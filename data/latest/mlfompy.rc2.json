{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "MLFoMpy: A figure of merit extraction tool for semiconductor device simulations\n===============================================================================\n\nWhat is this?\n+++++++++++++\n\n* This is a MLFomPy tutorial introduction, where you will learn how to use the basic capabilities of the MLFoMpy library.\n* September 2, 2021.\n\nThe source code of MLFoMpy can be downloaded from https://gitlab.citius.usc.es/modev/mlfompy' and is purely intended to run as a library for Linux systems. Note that the following instalation steps work on Debian-derived distributions: e.g. for Ubuntu 16.04 or later and CentOS (tested). Also, MLFoMpy has been proven to work in **Python 3.6**.\nMLFoMpy uses several external libraries that need to be installed in order to be able to use the full functionality of the tool. A list of these libraries can be seen below:\n\n\t* setuptools\n\t* numpy\n\t* scipy\n\t* matplotlib\n\t* pytest\n\t* probscale\n\nMost of these modules will be installed automatically when installing MLFoMpy. The pytest module is not listed as a hard dependency so you will have to install it beforehand.\n\nDetailed instalation steps can be found futher down this tutorial and further documentation on the MLFoMpy library can be found inside MLFoMpy.pdf .\n\n1. Introduction\n---------------\n\nFoMPy is an effective tool that extracts the main figures of merit (FoM) of a semiconductor's IV curve and provides useful statistical parameters for variability studies. It includes several methods to extract the threshold voltage. \n\nIn the figure below the user can see the basic workflow behind the MLFoMpy library:\n\n\n.. figure:: ./docs/figs/simplified_diagram.jpg\n    :width: 600px\n    :align: center\n    :height: 400px\n    :alt: alternate text\n    :figclass: align-center\n\nAfter loading the data into a MLFoMpy Dataset, using the various tools implemented in the library, the user is able to process and extract important parameters of the given curves.\n\n2. Installation\n---------------\n\nFirst you need to have installed **pip3** on your system. For Ubuntu, open up a terminal and type::\n\n\tsudo apt update\n\n\tsudo apt install python3-pip\n\nThe use of virtual environments is highly encouraged. The main purpose of Python virtual environments is to create an isolated environment for Python projects so that no modular dependency issues with other projects can appear. In order to use them run the following commands in a terminal::\n\n\t#Install virtual environments\n\tsudo apt install python3-venv \n\n\t#Create and name the environment \"venv\"\n\tpython3 -m venv .venv\n\n\t#Activate the venv\n\tsource .venv/bin/activate\n\nNote that as of this moment you're inside a virtual environment (Notice (.venv) $ in the terminal) with a limited/isolated version of python and therefore you will have to install all the packages you need for that particular project (including the ones you may have installed in the system as they may not be installed in the virtual environment).\n\n**Instalation of MLFoMpy via pip3**\n\nIt is necessary to download MLFompy from the repository. You obtain a compressed file, once decompressed, the folder mlfompy-main will appear. Then, it is neccesary to run the following command in a terminal indicating the path where mlfompy-main is located (/PATH/MLfompy-main)::\n\n\tpip install -e /PATH/MLFOMPY\n\nand check the library is installed by importing it from a **python3 terminal**::\n\n \timport mlfompy\n\nUnless an error comes up, MLFoMpy is now installed on your virtual environment.\n\n\n**Note: Most of the packages will be installed automatically during the MLFoMpy instalation. If you experience some issue, you can try to install the needed modules them yourself by typing in a terminal**::\n\t\n\tpip3 install setuptools\n\tpip3 install pytest\n\tpip3 install numpy\n\tpip3 install scipy\n\tpip3 install probscale\n\tpip3 install matplotlib\n\tsudo apt-get install python3-tk #optional\n\n3. Quickstart \n-------------\n\nIn this section the user can learn the most basic yet powerful commands implemented in the MLFoMpy library. In order to do so either start by reading the basic commands or \ndownload and try the exampled provided in the repository explained at the end of this page.\n\nBasic commands\n+++++++++++++++++\n\nA bunch of useful MLFoMpy commands are now provided. Supported tools include mlfompy.extract, mlfompy.plot or mlfompy.savetotxt. Here are some quick examples of the core capabilities of MLFoMpy:\n\nIn order to load a MLFoMpy Dataset run inside a **python3 terminal**::\n\n\timport mlfompy\n\nMLFoMpy implements an importing tools that allows the user to extract the data from various sources\n(from a file, an array stored in memory, etc).\n\n**1.Import from a file**\n\nFor example if the user wishes to import IV curves stored in a general way (with a header plus a voltage and current columns)::\n\t\n\t#VG\t#ID\n\t0.0\t3.00E-09\n\t0.1\t2.18E-08\n\t0.2\t3.77E-07\n\t0.3\t2.74E-06\n\t0.4\t9.33E-06\n\t0.5\t1.87E-05\n\t0.6\t2.97E-05\n\t0.7\t3.96E-05\n\t0.8\t5.43E-05\n\t0.9\t5.98E-05\n\t1.0\t6.60E-05\n\nOne approach to create a MLFoMpy Dataset is::\n\n\timport mlfompy\n\n\tpath = './path_to_file'\n\tfds = mlfompy.dataset(path, parser=mlfompy.file)\n\n\tprint(fds.dataset) \n\t\n**2.Import from an array**\n\nAdditionally if the user already has the IV curves loaded in an array the process is similar to the previously explained::\n\n\timport mlfompy\n\timport numpy as np\n\n\tarr1 =np.array([[0.00e+00, 1.00e-09],\n\t\t       [1.00e-01, 2.20e-08],\n\t\t       [2.00e-01, 3.20e-07],\n\t\t       [3.00e-01, 2.74e-06],\n\t\t       [4.00e-01, 9.90e-06],\n\t\t       [5.00e-01, 2.20e-05],\n\t\t       [6.00e-01, 3.22e-05],\n\t\t       [7.00e-01, 4.16e-05],\n\t\t       [8.00e-01, 5.23e-05],\n\t\t       [9.00e-01, 6.04e-05],\n\t\t       [1.00e+00, 6.60e-05]])\n\t\t       \n\tarr2 =np.array([[0.00e+00, 1.00e-09],\n\t\t       [1.00e-01, 2.15e-08],\n\t\t       [2.00e-01, 3.18e-07],\n\t\t       [3.00e-01, 2.72e-06],\n\t\t       [4.00e-01, 9.85e-06],\n\t\t       [5.00e-01, 2.12e-05],\n\t\t       [6.00e-01, 3.16e-05],\n\t\t       [7.00e-01, 4.10e-05],\n\t\t       [8.00e-01, 5.46e-05],\n\t\t       [9.00e-01, 6.15e-05],\n\t\t       [1.00e+00, 6.57e-05]])\n\n\tarrays = np.stack((arr1, arr2)) #Here the arrays are put together\n\tfds = mlfompy.dataset(arr = arrays, parser=mlfompy.array)\n\n\tprint(fds.dataset)\n\nAlso for a single IV curve::\n\n\timport mlfompy\n\timport numpy as np\n\tx = ([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\ty = ([1.00e-09, 2.20e-08, 3.20e-07, 2.74e-06, 9.90e-06, 2.20e-05, 3.22e-05, 4.16e-05, 5.23e-05, 6.04e-05, 6.60e-05])\n\tfds = mlfompy.iv(arr = (x,y), parser=mlfompy.curve)\n\tprint(fds.dataset)\n\nNote that all the operations of MLFoMpy are dependant on how the Dataset is created, therefore try to concatenate several arrays according to the previous example.\n\n\n**3.Import from an JCJB used in VENDES simulator[#]_**\n\nFinally, MLFoMpy has predefined a parser thath reads an in-house format called 'JCJB'. In order to load the dada from these files, MLFoMpy has a importing tool with an input parameter for the parser. Inside the folder './data/' the user has to store all simulations in individual folders (i.e. './data/sim_1/current_file_1.txt', './data/sim_2/current_file_2.txt', etc)::\n\n\tpath_data = './data'\n\tfds = mlfompy.dataset(path_data, parser=mlfompy.JCJB)\n\nNote that the defined path has to point to the parent directory of the folders containing the single IV curve files.\n\nAfter running this, a MLFoMpy Dataset is created and the IV curves are stored inside it.\nThey can be accessed by calling the dataset attribute::\n\n\tprint(fds.dataset)\n\n**4.MLFoMpy Dataset**\n\nNow that the MLFoMpy Dataset has been implemented several other parameters can be defined like the\nnumber of simulations (fds.n_sims) or a value for normalizing the curves (fds.norm)., the default extraction\nmethod (fds.ext_method), the drain bias for the ensemble of curves (fds.drain_bias), the drain bias value\n(fds.drain_bias_value) and the default interpolation method (fds.interpolation). All these parameters can be defined/updated\nlike the following example (Note that some of them will be defined automatically, like the number of simulations,\nonce the IV curves are loaded)::\n\n\tfds.drain_bias_value = 0.66\n\nAlso a predefined function can be called in order to print the current value of the attributes of the selected MLFoMpy Dataset::\n\n\tfds.print_parameters()\n\n**5.Parameter extraction**\n\nThe most important capability of MLFompy is that it allows the user to extract the most common figures of merit (FoM)\nof a semiconductor's IV curve using different methodologies. In order to extract these FoM the user has to call the \nfunction extract. The following example extracts the threshold voltage values `V_TH` of the curves in the Fompy Dataset::\n\n\tvth_array = mlfompy.extract(fds, fom = 'vth')\n\nand write the results to a file::\n\n\tmlfompy.savetotxt('./results_vth.txt', 'vth', vth_array)\n\nNote that since no extraction method has been defined the library uses the second derivative method ('SD') as a default. \nThis can be changed to other commonly used methods like the constant current method, the third derivative or the linear extrapolation (See further instructions on how to choose this in the full documentation). The theory behind these extraction methodologies and case results can be found in [#]_ [#]_\n\n**6.Plotting the results**\n\nMLFoMpy also has built-in several plotting capabilities to be able to check the extraction results. A simple plot\nof the threshold voltage with the 'SD' method and the second derivative of the curve goes as follows::\n\n\tmlfompy.plot(fds, fom = 'vth', save_plot='./vth_plots/sd/')\n\nTwo common backends are available when using MLFoMpy:'Agg'(default), which only works whenever saving plots to files (non-GUI) and 'TkAgg' a GUI tool for visualizing the plots on a pop-up window.\nNote that 'TkAgg' requires the package python3-tk installed in order to run. Also the plots have been saved to the path './vth_plots/sd/', keeping the indexing of the curves as stored in the MLFoMpy Dataset.\n\n\n\nRepository Example\n+++++++++++++++++++\n\n\nA simple example is included with the code so the user can test some basic commands and check the library\nworks as intended in their systems. After grabbing this repostiroty::\n\n\tgit clone https://gitlab.citius.usc.es/modev/mlfompy\n\tcd mlfompy-main\n\nin the directory ``examples``, a file called ``example.py`` with command examples and a folder containing ensembles of simulated IV curves are included inside the path './data'. \n\nIn order to test it comment and uncomment the lines that you want to run inside example.py and in a **python3 terminal** type::\n\n\tpython3 example.py\n\n\nCiting MLFoMpy\n+++++++++++++++++++\n\nPlease cite MLFoMpy in your publications if it helps your research::\n\n\t@INPROCEEDINGS{fompy2018,\n\tauthor={G. {Espiñeira} and N. {Seoane} and D. {Nagy} and G. {Indalecio} and A. J. {García-Loureiro}},\n\tbooktitle={2018 Joint International EUROSOI Workshop and International Conference on Ultimate Integration on Silicon (EUROSOI-ULIS)},\n\ttitle={FoMPy: A figure of merit extraction tool for semiconductor device simulations},\n\tyear={2018},\n\tpages={1-4},\n\tdoi={10.1109/ULIS.2018.8354752},\n\tISSN={2472-9132},\n\tmonth={March},}\n\n\n\nReferences\n+++++++++++++++++++\n\n.. [#] VENDES. A.J.Garcia-Loureiro, N.Seoane, M.Aldegunde, R.Valin, A.Asenov, A.Martinez and K.Kalna “Implementation of the Density Gradient Quantum Corrections for 3-D Simulations of Multigate Nanoscaled Transistors”, IEEE Trans. Comput.-Aided Des. Integr. Circuits Syst, doi=10.1109/TCAD.2011.2107990 \n.. [#] G.Espiñeira, N.Seoane, D.Nagy, G.Indalecio and A.J.García Loureiro, “FoMPy: A figure of merit extraction tool for semiconductor device simulations” in 2018 Joint International EUROSOI Workshop and International Conference on Ultimate Integration on Silicon (EUROSOI-ULIS) doi :10.1109/ULIS.2018.8354752\n.. [#] G.Espiñeira, D.Nagy, G.Indalecio, A.J.García Loureiro and N.Seoane, “Impact of threshold voltage extraction methods on semiconductor device variability” in Solid-State Electron, https://doi.org/10.1016/j.sse.2019.03.055\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.citius.usc.es/modev/mlfompy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlfompy",
    "package_url": "https://pypi.org/project/mlfompy/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlfompy/",
    "project_urls": {
      "Homepage": "https://gitlab.citius.usc.es/modev/mlfompy"
    },
    "release_url": "https://pypi.org/project/mlfompy/0.0.3/",
    "requires_dist": [
      "scipy",
      "pytest",
      "probscale",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "MLFoMPy is an effective tool that extracts the main figures of merit (FoM) of a semiconductors IV curve",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11375919,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08269088d85fd975408a5e52feb4fb1904940de3117e50720c6afeb1c405dbbf",
          "md5": "3537e78fb8703ebf7c1936838fd0e2f4",
          "sha256": "596cdf6dcba7c1261529285b6b43dd4dd9372c524b4deb6307e2cec38ac2da77"
        },
        "downloads": -1,
        "filename": "mlfompy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3537e78fb8703ebf7c1936838fd0e2f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39213,
        "upload_time": "2021-09-02T16:51:56",
        "upload_time_iso_8601": "2021-09-02T16:51:56.010785Z",
        "url": "https://files.pythonhosted.org/packages/08/26/9088d85fd975408a5e52feb4fb1904940de3117e50720c6afeb1c405dbbf/mlfompy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c28ed5febd04ff11a97267ed743a3f331a3826d439788cc2421f64b7fc6eabb7",
          "md5": "d3476dfeebb6e7b88f89b348cec62c2b",
          "sha256": "1d438c0ceae12fe24a35149a9c082b8307f645519032d60f511b39dcc51ed00d"
        },
        "downloads": -1,
        "filename": "mlfompy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d3476dfeebb6e7b88f89b348cec62c2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40759,
        "upload_time": "2021-09-02T16:51:57",
        "upload_time_iso_8601": "2021-09-02T16:51:57.687419Z",
        "url": "https://files.pythonhosted.org/packages/c2/8e/d5febd04ff11a97267ed743a3f331a3826d439788cc2421f64b7fc6eabb7/mlfompy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25c87be211ff3c473e6f7673ac2dbb4d1c76952091e96812a5523ad79787278e",
          "md5": "753fd1c3bbefb3ed61b0b0660966dd00",
          "sha256": "065c79b088d58ad1ba544d5c2e4ba6f34eb29b0b64cd09955d1837326133586c"
        },
        "downloads": -1,
        "filename": "mlfompy-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "753fd1c3bbefb3ed61b0b0660966dd00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 55027,
        "upload_time": "2021-09-06T11:17:36",
        "upload_time_iso_8601": "2021-09-06T11:17:36.391946Z",
        "url": "https://files.pythonhosted.org/packages/25/c8/7be211ff3c473e6f7673ac2dbb4d1c76952091e96812a5523ad79787278e/mlfompy-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86136cfeadb95034e670ee21dfbe498ff3b1b1e94ca57215c6ccb63d6fc33265",
          "md5": "30d2bf0d1bc7c137bf0c645817a7b220",
          "sha256": "73e15807ac9f43ece623d53f2d6c682ba9f896c226d1577f597a1aadb74dbb45"
        },
        "downloads": -1,
        "filename": "mlfompy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "30d2bf0d1bc7c137bf0c645817a7b220",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 55039,
        "upload_time": "2021-09-06T11:17:37",
        "upload_time_iso_8601": "2021-09-06T11:17:37.984044Z",
        "url": "https://files.pythonhosted.org/packages/86/13/6cfeadb95034e670ee21dfbe498ff3b1b1e94ca57215c6ccb63d6fc33265/mlfompy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25c87be211ff3c473e6f7673ac2dbb4d1c76952091e96812a5523ad79787278e",
        "md5": "753fd1c3bbefb3ed61b0b0660966dd00",
        "sha256": "065c79b088d58ad1ba544d5c2e4ba6f34eb29b0b64cd09955d1837326133586c"
      },
      "downloads": -1,
      "filename": "mlfompy-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "753fd1c3bbefb3ed61b0b0660966dd00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 55027,
      "upload_time": "2021-09-06T11:17:36",
      "upload_time_iso_8601": "2021-09-06T11:17:36.391946Z",
      "url": "https://files.pythonhosted.org/packages/25/c8/7be211ff3c473e6f7673ac2dbb4d1c76952091e96812a5523ad79787278e/mlfompy-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86136cfeadb95034e670ee21dfbe498ff3b1b1e94ca57215c6ccb63d6fc33265",
        "md5": "30d2bf0d1bc7c137bf0c645817a7b220",
        "sha256": "73e15807ac9f43ece623d53f2d6c682ba9f896c226d1577f597a1aadb74dbb45"
      },
      "downloads": -1,
      "filename": "mlfompy-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "30d2bf0d1bc7c137bf0c645817a7b220",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 55039,
      "upload_time": "2021-09-06T11:17:37",
      "upload_time_iso_8601": "2021-09-06T11:17:37.984044Z",
      "url": "https://files.pythonhosted.org/packages/86/13/6cfeadb95034e670ee21dfbe498ff3b1b1e94ca57215c6ccb63d6fc33265/mlfompy-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}