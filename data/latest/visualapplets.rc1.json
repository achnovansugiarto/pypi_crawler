{
  "info": {
    "author": "Juergen Hock",
    "author_email": "juergen.hock@jurihock.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Tcl",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development",
      "Topic :: Software Development :: Code Generators",
      "Topic :: System :: Hardware",
      "Topic :: Utilities"
    ],
    "description": "# About visualapplets.py\n\nThe [Basler AG](https://www.baslerweb.com) company provides a [TCL](https://docs.baslerweb.com/visualapplets/files/documents/TCL/Content/4_VisualApplets/TCL/Intro.htm) scripting engine to automatize the creation of [VisualApplets](https://www.baslerweb.com/en/products/frame-grabber-portfolio/visualapplets) designs (a former Silicon Software GmbH technology), which is a nice and useful feature but not nice enough, in my opinion.\n\nThe main idea of the **[visualapplets.py](https://github.com/jurihock/visualapplets.py/blob/main/visualapplets.py)** project is to introduce an additional scripting abstraction and to script the creation of TCL scripts via Python.\n\nHuh, to script a script? Too much meta? Let's study an example...\n\n## Example\n\nIn this example we will implement the [ReLU](https://en.wikipedia.org/wiki/Rectifier_(neural_networks)) operator, which functionally corresponds to `y(x) = max(0, x)`.\n\nJust for practical reasons, we encapsulate the operator logic in a `HierarchicalBox`. So it can be reused many times in a VisualApplets design. Consequently we also create a class in our Python script, for the same purpose of course.\n\nWe begin with the first part of the Python script [example.py](https://github.com/jurihock/visualapplets.py/blob/main/example.py):\n\n```python\nimport visualapplets as VA\n\nclass Example(VA.Module):\n\n    def __init__(self, parent, name, x, y):\n\n        # initialize the HierarchicalBox (e.g. super)\n        super().__init__('HierarchicalBox', parent, name, i=1, o=1, x=x, y=y)\n\n        # create required modules inside the HierarchicalBox (e.g. self)\n        branch = VA.Module('BRANCH', self, 'Branch', o=3, x=1, y=1)\n        condition = VA.Module('IS_GreaterThan', self, 'Condition', x=2, y=2)\n        value = VA.Module('CONST', self, 'Value', x=2, y=3)\n        decision = VA.Module('IF', self, 'Decision', x=3, y=1)\n\n        # link created modules together, from left to right\n        self('INBOUND') - branch\n        branch(0) - decision('I')\n        branch(1) - condition - decision('C')\n        branch(2) - value - decision('E')\n        decision - self('OUTBOUND')\n\n        # for instance, set desired link properties\n        branch('I')['Bit Width'] = 16        # input link of the BRANCH\n        branch('I')['Arithmetic'] = 'signed'\n        value('O')['Bit Width'] = 16         # output link of the CONST\n        value('O')['Arithmetic'] = 'signed'  # (needs to match the input link)\n\n        # for instance, set desired module properties\n        condition['Number'] = 0  # input value threshold\n        value['Value'] = 0       # output value below threshold\n```\n\nNow the second part of our Python script:\n\n```python\n# dump generated TCL script to a file instead of stdout\nVA.printer = VA.FilePrinter('example.tcl')\n\n# create a design with an instance of the example module\ndesign = VA.Design('mE5-MA-VCLx', 'Example')\nexample = Example(design, 'Example', x=1, y=2)\n```\n\nFinally import the generated [example.tcl](https://github.com/jurihock/visualapplets.py/raw/main/example.tcl) file in the VisualApplets IDE or execute something like this in the TCL console:\n\n```\nCloseDesign Discard\nsource \"C:/foo/bar/example.tcl\"\n```\n\nThe resulting design should look similar to this one:\n\n![](https://github.com/jurihock/visualapplets.py/raw/main/example.png)\n\nObviously there are more possibilities to implement the ReLU function. You can replace the fallback value by the `XOR` result or also only check the sign bit of the input value. But the preferred way is probably to utilize the built-in `ClipLow` operator instead... ;-)\n\n# Basics\n\nWith the help of the previous example imagine now, how custom algorithms could be implemented without a deep [TCL](https://en.wikipedia.org/wiki/Tcl) knowledge, but of course not without a certain amount of [Python](https://www.python.org/doc/essays/comparisons) experience.\n\nThere are a few basic concepts to understand how the `visualapplets.py` works.\n\n## Module\n\nAn instance of the Python module actually triggers the `CreateModule` TCL command as well forwards the specified parameters as is:\n\n```python\nModule(operator, parent, name, i, o, x, y)\n```\n\nOnly `x` and `y` arguments will be converted from the grid cell index to the absolute coordinates via `visualapplets.grid` instance. So you don't have to mess up with pixels, just place modules discretely in grid cells.\n\nFurthermore each module instance provides an access to\n\n* module port descriptor via `()` accessor and\n* module parameter descriptor via `[]` accessor.\n\nModules with unambiguous assignable output-input port combination can be directly connected without specifying the source and destination port, like `CONST - BRANCH`. Reciprocal connection `BRANCH - CONST` is not necessarily unambiguous, since the branch may have multiple outputs, so you have to specify which one.\n\n## Port\n\nA port descriptor has a little magic inside. Conventionally call the module instance to access either input or output port descriptor:\n\n```python\nmodule('I') # default input port\nmodule('I', 0) # same\nmodule(0, 'I') # same\n\nmodule('O') # default output port\nmodule('O', 0) # same\nmodule(0, 'O') # same\n\nmodule('O', 1) # second output port of branch\nmodule('A') # first input of comparator\nmodule('R') # rest of division output\n\nmodule() # either default I or O port, which is only determinable in connection context\n```\n\nThere are particular operator specific variations like in case of `DIV`, `MULT` or `SUB`, where the input index begins with `1` instead of `0` and has no specific `%03d` string format. Such delicacies are specified in the operator port dictionary `visualapplets.operators`. The port descriptor looks up for the matching dictionary entry. If there is no matching entry, it keeps the specified port name string as is. The dictionary lookup is case invariant and partial string matches are possible, e.g. first letter only if a distinct match is possible.\n\n## Link\n\nCreation of a link by \"subtracting\" modules or ports triggers the `ConnectModules` TCL command:\n\n```python\nfoo = Module('CONST', ...)\nbar = Module('BRANCH', ...)\n\nlink = foo - bar # connect foo to bar\nlink = foo - bar('I') # same\nlink = foo('O') - bar(0) # same\n\nlink = bar - foo # connect bar to foo\nlink = bar('O', 0) - foo # same\nlink = bar(0) - foo('I') # same\nlink = bar(1) - foo # another branch port\n\nfoo - bar # just connect and forget the link descriptor\n```\n\nIt is not required to \"park\" the created link in a variable, only if a link parameter needs to be modified. Another possibility to set a link parameter is to set the parameter of the corresponding port descriptor, which is the same thing.\n\n## Param\n\nDepending on the context, a parameter descriptor triggers either `SetModuleParam` or `SetLinkParam` TCL command:\n\n```python\n# module params\n\nfoo = Module(...)\n\nfoo['asdf'] = 42 # assign a int\nfoo['asdf'] = 'hello' # assign a string\n\nfoo['asdf'] = [1, 2, 3] # assign a list of ints\nfoo['asdf'] = ('a', 'b', 'c') # assign a string tuple\n\n# link params\n\nbar = Module(...)\nlink = foo - bar\n\nlink['Bit Width'] = 24 # modify link parameter\nbar('I')['Bit Width'] = 24 # same\n```\n\n# License\n\nThis Source Code Form is subject to the terms of the Mozilla Public License 2.0. The file [LICENSE](LICENSE) contains a copy of the MPL. Alternatively obtain another one at [https://mozilla.org/MPL/2.0](https://mozilla.org/MPL/2.0).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jurihock/visualapplets.py",
    "keywords": "automation,basler,camera,cameralink,dsp,fpga,framegrabber,gigevision,high-performance,image-processing,kintex7,machine-vision,microenable,prototyping,python,real-time,siso,tcl,visualapplets,xilinx",
    "license": "MPL-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "visualapplets",
    "package_url": "https://pypi.org/project/visualapplets/",
    "platform": "",
    "project_url": "https://pypi.org/project/visualapplets/",
    "project_urls": {
      "Homepage": "https://github.com/jurihock/visualapplets.py"
    },
    "release_url": "https://pypi.org/project/visualapplets/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python bindings for Basler's VisualApplets TCL script generation.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12514836,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26afcd2d4e7be713d5256fcc32791137cd0a9ed9767295e3d44eabff4a2bc580",
          "md5": "1ff8bf25e9d2a441c2c562674fa1b987",
          "sha256": "3ec88c41752610fc723d1b8f82e64caec8b11a22ac18ef79e46f273b64e4746f"
        },
        "downloads": -1,
        "filename": "visualapplets-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ff8bf25e9d2a441c2c562674fa1b987",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12500,
        "upload_time": "2022-01-08T17:55:39",
        "upload_time_iso_8601": "2022-01-08T17:55:39.648136Z",
        "url": "https://files.pythonhosted.org/packages/26/af/cd2d4e7be713d5256fcc32791137cd0a9ed9767295e3d44eabff4a2bc580/visualapplets-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da33e963942e5c6caf4937879df833a2363d10a2d73817711400fefd4d59fd11",
          "md5": "107de4e3924b957d3b2a34f845d94602",
          "sha256": "c65b8ac852117fe5bdcdde5e94b383ff4da0222adbc7c74ddbe4b7480f77ad19"
        },
        "downloads": -1,
        "filename": "visualapplets-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "107de4e3924b957d3b2a34f845d94602",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12068,
        "upload_time": "2022-01-08T17:55:41",
        "upload_time_iso_8601": "2022-01-08T17:55:41.273335Z",
        "url": "https://files.pythonhosted.org/packages/da/33/e963942e5c6caf4937879df833a2363d10a2d73817711400fefd4d59fd11/visualapplets-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26afcd2d4e7be713d5256fcc32791137cd0a9ed9767295e3d44eabff4a2bc580",
        "md5": "1ff8bf25e9d2a441c2c562674fa1b987",
        "sha256": "3ec88c41752610fc723d1b8f82e64caec8b11a22ac18ef79e46f273b64e4746f"
      },
      "downloads": -1,
      "filename": "visualapplets-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1ff8bf25e9d2a441c2c562674fa1b987",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12500,
      "upload_time": "2022-01-08T17:55:39",
      "upload_time_iso_8601": "2022-01-08T17:55:39.648136Z",
      "url": "https://files.pythonhosted.org/packages/26/af/cd2d4e7be713d5256fcc32791137cd0a9ed9767295e3d44eabff4a2bc580/visualapplets-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da33e963942e5c6caf4937879df833a2363d10a2d73817711400fefd4d59fd11",
        "md5": "107de4e3924b957d3b2a34f845d94602",
        "sha256": "c65b8ac852117fe5bdcdde5e94b383ff4da0222adbc7c74ddbe4b7480f77ad19"
      },
      "downloads": -1,
      "filename": "visualapplets-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "107de4e3924b957d3b2a34f845d94602",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12068,
      "upload_time": "2022-01-08T17:55:41",
      "upload_time_iso_8601": "2022-01-08T17:55:41.273335Z",
      "url": "https://files.pythonhosted.org/packages/da/33/e963942e5c6caf4937879df833a2363d10a2d73817711400fefd4d59fd11/visualapplets-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}