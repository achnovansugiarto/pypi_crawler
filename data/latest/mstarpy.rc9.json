{
  "info": {
    "author": "MaÃ«l Jourdain",
    "author_email": "mael.jourdain@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Introduction\r\n===============\r\n\r\nMStarpy is a Python Package to extract data from `morningstar.com <https://www.morningstar.com/>`_.\r\n\r\nMStarpy provides stock and fund public data to retail and professional investors for **free**. The main goal is to give investors access to the same information and help them in their investment process.\r\n \r\nThe project is **open-source** and anyone can contribute on `github <https://github.com/Mael-J/mstarpy>`_.\r\n\r\nGetting Started\r\n=================\r\n\r\nInstallation\r\n--------------\r\n\r\nYou can install it **via pip** on the terminal by typing:\r\n\r\n.. code-block:: bash\r\n\r\n   pip install mstarpy\r\n\r\nYou can also install it **via git** on the terminal bu using :\r\n\r\n.. code-block:: bash\r\n\r\n   pip install git+https://github.com/Mael-J/mstarpy.git@master\r\n\r\n\r\nFirst commands\r\n----------------\r\n\r\nLook for funds with `search_funds`\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can look for funds by using the method `search_funds`. In the following example, we will look for 40 funds in the US market with the term \"technology\" in their name. We want to get the name, the ID and the 12 months return. We transform the result in a pandas DataFrame to make it more clear.\r\n\r\n.. code-block:: python\r\n\r\n    import mstarpy\r\n    import pandas as pd\r\n\r\n    response = mstarpy.search_funds(term=\"technology\", field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\"], country=\"us\", pageSize=40, currency =\"USD\")\r\n\r\n    df = pd.DataFrame(response)\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n                                Name fundShareClassId  GBRReturnM12\r\n    0       Baron Technology Instituitional       F00001CUJ3        -21.64\r\n    1                   Baron Technology R6       F00001CUJ1        -21.88\r\n    2               Baron Technology Retail       F00001CUJ2        -21.91\r\n    3         Black Oak Emerging Technology       FOUSA00LIX         -8.33\r\n    4  BlackRock Technology Opportunities K       F000014AX6        -21.09\r\n\r\n\r\nLook for fields with `search_field`\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can find the field you need for the `search_funds` and `search_stock` methods using `search_field`. In the following example, we get all fields.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_field\r\n    \r\n    response = search_field(pattern='')\r\n\r\n    print(response)\r\n\r\n.. code-block:: python\r\n\r\n    ['AdministratorCompanyId', 'AlphaM36', 'AnalystRatingScale', 'AverageCreditQualityCode', 'AverageMarketCapital', 'BetaM36', 'BondStyleBox', 'brandingCompanyId', 'categoryId', 'CategoryName', 'ClosePrice', 'currency', 'DebtEquityRatio', 'distribution', 'DividendYield', 'EBTMarginYear1', 'EffectiveDuration', 'EPSGrowth3YYear1', 'equityStyle', 'EquityStyleBox', 'exchangeCode', 'ExchangeId', 'ExpertiseAdvanced', 'ExpertiseBasic', 'ExpertiseInformed', 'FeeLevel', 'fundShareClassId', 'fundSize', 'fundStyle', 'FundTNAV', 'GBRReturnD1', 'GBRReturnM0', 'GBRReturnM1', 'GBRReturnM12', 'GBRReturnM120', 'GBRReturnM3', 'GBRReturnM36', 'GBRReturnM6', 'GBRReturnM60', 'GBRReturnW1', 'geoRegion', 'globalAssetClassId', 'globalCategoryId', 'iMASectorId', 'IndustryName', 'InitialPurchase', 'instrumentName', 'investment', 'investmentExpertise', 'investmentObjective', 'investmentType', 'investorType', 'InvestorTypeEligibleCounterparty', 'InvestorTypeProfessional', 'InvestorTypeRetail', 'LargestSector', 'LegalName', 'managementStyle', 'ManagerTenure', 'MarketCap', 'MarketCountryName', 'MaxDeferredLoad', 'MaxFrontEndLoad', 'MaximumExitCostAcquired', 'MorningstarRiskM255', 'Name', 'NetMargin', 'ongoingCharge', 'OngoingCostActual', 'PEGRatio', 'PERatio', 'PerformanceFeeActual', 'PriceCurrency', 'QuantitativeRating', 'R2M36', 'ReturnD1', 'ReturnM0', 'ReturnM1', 'ReturnM12', 'ReturnM120', 'ReturnM3', 'ReturnM36', 'ReturnM6', 'ReturnM60', 'ReturnProfileGrowth', 'ReturnProfileHedging', 'ReturnProfileIncome', 'ReturnProfileOther', 'ReturnProfilePreservation', 'ReturnW1', 'RevenueGrowth3Y', 'riskSrri', 'ROATTM', 'ROETTM', 'ROEYear1', 'ROICYear1', 'SecId', 'SectorName', 'shareClassType', 'SharpeM36', 'StandardDeviationM36', 'starRating', 'StarRatingM255', 'SustainabilityRank', 'sustainabilityRating', 'TenforeId', 'Ticker', 'totalReturn', 'totalReturnTimeFrame', 'TrackRecordExtension', 'TransactionFeeActual', 'umbrellaCompanyId', 'Universe', 'Yield_M12', 'yieldPercent']\r\n\r\n\r\nAnalysis of funds\r\n~~~~~~~~~~~~~~~~~\r\n\r\nOnce, you know what fund you want to analyse, you can load it with the class `Funds` and then access all the methods to get data.\r\n\r\n.. code-block:: python\r\n\r\n    import mstarpy\r\n\r\n    fund = mstarpy.Funds(term=\"FOUSA00LIX\", country=\"us\")\r\n\r\n\r\nYou can access to his property name.\r\n\r\n.. code-block:: python\r\n\r\n    print(fund.name)\r\n\r\n.. code-block:: python\r\n\r\n    'Black Oak Emerging Technology Fund'\r\n\r\n\r\nYou can show the equity holdings of the fund.\r\n\r\n.. code-block:: python\r\n\r\n    df_equity_holdings = fund.holdings(holdingType=\"equity\")\r\n    print(df_equity_holdings[[\"securityName\", \"weighting\", \"susEsgRiskScore\"]].head())\r\n\r\n.. code-block:: python\r\n\r\n                        securityName  weighting  susEsgRiskScore\r\n    0                       Apple Inc    5.03336          16.6849\r\n    1                        KLA Corp    4.90005          16.6870\r\n    2  Kulicke & Soffa Industries Inc    4.23065          17.2155\r\n    3      SolarEdge Technologies Inc    4.13637          24.6126\r\n    4                   Ambarella Inc    4.10950          33.1408\r\n\r\n\r\nYou can find the historical Nav and total return of the fund.\r\n\r\n.. code-block:: python\r\n\r\n    import datetime\r\n    import pandas as pd\r\n    start_date = datetime.datetime(2023,1,1)\r\n    end_date = datetime.datetime(2023,3,2)\r\n    #get historical data\r\n    history = fund.nav(start_date=start_date,end_date=end_date, frequency=\"daily\")\r\n    #convert it in pandas DataFrame\r\n    df_history = pd.DataFrame(history)\r\n\r\n    print(df_history.head())\r\n\r\n\r\n.. code-block:: python\r\n\r\n        nav  totalReturn        date\r\n    0  6.28     10.21504  2022-12-30\r\n    1  6.23     10.13371  2023-01-03\r\n    2  6.31     10.26383  2023-01-04\r\n    3  6.18     10.05238  2023-01-05\r\n    4  6.37     10.36143  2023-01-06\r\n\r\n\r\nLook for stock with `search_stock`\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can look for stocks by using the method `search_stock`. In the following example, we will look for 20 stocks on the Paris Stock Exchange with the term \"AB\" in their name. We want to get the name, the ID and the Sector. We transform the result in a pandas DataFrame to make it more clear.\r\n\r\n.. code-block:: python\r\n\r\n    import mstarpy\r\n    import pandas as pd\r\n\r\n    response = mstarpy.search_stock(term=\"AB\",field=[\"Name\", \"fundShareClassId\", \"SectorName\"], exchange='PARIS',pageSize=20)\r\n\r\n    df = pd.DataFrame(response)\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n                                Name fundShareClassId          SectorName\r\n    0                      AB Science       0P0000NQNE          Healthcare\r\n    1                ABC arbitrage SA       0P00009W9I  Financial Services\r\n    2                         Abeo SA       0P00018PIU   Consumer Cyclical\r\n    3  Abionyx Pharma Ordinary Shares       0P00015JGM          Healthcare\r\n    4                       Abivax SA       0P00016673          Healthcare\r\n\r\nTips : You can get different exchange by looking at the variable EXCHANGE in mstarpy.utils\r\n\r\n.. code-block:: python\r\n    \r\n    from mstarpy.utils import EXCHANGE\r\n\r\n    print(list(EXCHANGE))\r\n\r\n.. code-block:: python\r\n\r\n    ['NYSE', 'NASDAQ', 'LSE', 'AMSTERDAM', 'ATHENS', 'BOLSA_DE_VALORES', 'BOMBAY', 'BORSA_ITALIANA', 'BRUSSELS', 'COPENHAGEN', 'HELSINKI', 'ICELAND', 'INDIA', 'IPSX', 'IRELAND', 'ISTANBUL', 'LISBON', 'LUXEMBOURG', 'OSLO_BORS', 'PARIS', 'RIGA', 'SHANGAI', 'SHENZHEN', 'SINGAPORE', 'STOCKHOLM', 'SWISS', 'TAIWAN', 'TALLIN', 'THAILAND', 'TOKYO', 'VILNIUS', 'WARSAW', 'WIENER_BOERSE']\r\n\r\n\r\nAnalysis of stocks\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nOnce, you know what stock you want to analyse, you can load it with the class `Stock` and then access all the methods to get data.\r\n\r\n.. code-block:: python\r\n\r\n    import mstarpy\r\n\r\n    stock = stock = mstarpy.Stock(term=\"0P00018PIU\", exchange=\"PARIS\")\r\n\r\nYou can access to his property name.\r\n\r\n.. code-block:: python\r\n\r\n    print(stock.name)\r\n\r\n.. code-block:: python\r\n\r\n    'Abeo SA'\r\n\r\nYou can find the historical price and volume of the stock.\r\n\r\n.. code-block:: python\r\n\r\n    import datetime\r\n    import pandas as pd\r\n    start_date = datetime.datetime(2023,1,1)\r\n    end_date = datetime.datetime(2023,3,2)\r\n    #get historical data\r\n    history = stock.historical(start_date=start_date,end_date=end_date, frequency=\"daily\")\r\n    #convert it in pandas DataFrame\r\n    df_history = pd.DataFrame(history)\r\n\r\n    print(df_history.head())\r\n\r\n\r\n.. code-block:: python\r\n\r\n    open   high    low  close  volume  previousClose        date\r\n    0  18.60  18.60  18.55  18.55     194          18.55  2022-12-30\r\n    1  18.70  18.70  18.70  18.70       9          18.55  2023-01-02\r\n    2  18.65  18.70  18.55  18.60     275          18.70  2023-01-03\r\n    3  18.65  18.65  18.50  18.60     994          18.60  2023-01-04\r\n    4  18.65  18.95  18.50  18.60     999          18.60  2023-01-05\r\n\r\n\r\nYou can show the financial statements such as the balance sheet.\r\n\r\n\r\n.. code-block:: python\r\n\r\n     bs = stock.balanceSheet(period='annual', reportType='original')\r\n     \r\n\r\nMore commands\r\n--------------\r\n\r\nYou can find all the methods of the classes `Funds` and `Stocks` in the part Indices and tables of this documentation.\r\n\r\nSearch with filters\r\n====================\r\n\r\nYou can use filters to search funds and stocks more precisely with methods `search_funds` and `search_stock`.\r\n\r\nChoose filters\r\n----------------\r\n\r\nYou can find the possible filters with the methods `search_filter`\r\n\r\nfor funds:\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_filter\r\n\r\n    filter_fund = search_filter(pattern = '', asset_type ='fund')\r\n\r\n    print(filter_fund)\r\n\r\n.. code-block:: python\r\n\r\n    ['AdministratorCompanyId', 'AnalystRatingScale', 'BondStyleBox', 'BrandingCompanyId', 'CategoryId', 'CollectedSRRI', 'distribution', 'EquityStyleBox', 'ExpertiseInformed', 'FeeLevel', 'FundTNAV', 'GBRReturnM0', 'GBRReturnM12', 'GBRReturnM120', 'GBRReturnM36', 'GBRReturnM60', 'GlobalAssetClassId', 'GlobalCategoryId', 'IMASectorID', 'IndexFund', 'InvestorTypeProfessional', 'LargestRegion', 'LargestSector', 'OngoingCharge', 'QuantitativeRating', 'ReturnProfilePreservation', 'ShareClassTypeId', 'SustainabilityRank', 'UmbrellaCompanyId', 'Yield_M12']\r\n\r\nfor stocks:\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_filter\r\n\r\n    filter_stock = search_filter(pattern = '', asset_type ='stock')\r\n\r\n    print(filter_stock)\r\n\r\n.. code-block:: python\r\n\r\n    ['debtEquityRatio', 'DividendYield', 'epsGrowth3YYear1', 'EquityStyleBox', 'GBRReturnM0', 'GBRReturnM12', 'GBRReturnM36', 'GBRReturnM60', 'GBRReturnM120', 'IndustryId', 'MarketCap', 'netMargin', 'PBRatio', 'PEGRatio', 'PERatio', 'PSRatio', 'revenueGrowth3Y', 'roattm', 'roettm', 'SectorId']\r\n\r\n\r\nFind filters values\r\n--------------------\r\n\r\nOnce, you know what filters you want you use the method `filter_universe` to show the possible values of each filter.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import filter_universe\r\n\r\n    filter_value = filter_universe([\"GBRReturnM12\", \"PERatio\", \"LargestSector\"])\r\n\r\n    print(filter_value)\r\n\r\n\r\nYou have two types of filters values, either qualitative or quantitative. By example, the filter LargestSector has qualitative values such as SB_Healthcare or SB_Utilities. The filter PERatio works with quantitative values between 0 and 100000.\r\n\r\n\r\nFilter funds\r\n------------------\r\n\r\nLet say we want to find funds that invest mainly in the consumer defensive sector. We can use filters like in this example:\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_funds\r\n\r\n    response = search_funds(term='',field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\"], country='fr', filters = {\"LargestSector\" : \"SB_ConsumerDefensive\"})\r\n    \r\n    df = pd.DataFrame(response)\r\n\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n                                       Name fundShareClassId  GBRReturnM12\r\n    0             AB US High Yield A2 EUR H       F00000O4X9         -9.71\r\n    1               AB US High Yield A2 USD       F00000O4XA         -6.88\r\n    2             AB US High Yield I2 EUR H       F00000O4X6         -9.18\r\n    3               AB US High Yield I2 USD       F00000O4XB         -6.36\r\n    4  abrdn China A Share Sus Eq A Acc EUR       F000015MAW         -8.41\r\n\r\nIf we want to search for funds which invest mainly in consumer defensive or healthcare sectors, we can add filters values to a list.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_funds\r\n\r\n    response = search_funds(term='',field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\"], country='fr', filters = {\"LargestSector\" : [\"SB_ConsumerDefensive\", \"SB_Healthcare\"]})\r\n    \r\n    df = pd.DataFrame(response)\r\n\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n                                    Name fundShareClassId  GBRReturnM12\r\n    0  AB Concentrated Global Eq A EUR H       F00000SJ2P        -10.46\r\n    1  AB Concentrated Global Eq I EUR H       F00000SJ2J         -9.77\r\n    2    AB Concentrated Global Eq I USD       F00000SE91         -5.77\r\n    3    AB Concentrated Global Eq S USD       F00000SE93          1.16\r\n    4   AB Concentrated Global Eq S1 EUR       F00001CYZS         -1.89\r\n\r\n\r\nIn the previous examples, we saw how to search for securities with a qualitative filter, now let see how to use quantitativer filters.\r\n\r\n\r\nFilter stocks\r\n------------------\r\n\r\nWe want to find stocks with a 12 months return superior to 20%. The value of filter is a 2 length tuple. the first element is the sign superior \">\", the second element the 12 months return of 20.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_stock\r\n\r\n    response = search_stock(term='',field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\", \"PERatio\"], exchange='PARIS', filters={\"GBRReturnM12\" : (\">\", 20)})\r\n\r\n    df = pd.DataFrame(response)\r\n\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n    0    1000Mercis SA       0P0000DKX2         24.89    95.24\r\n    1          Abeo SA       0P00018PIU         21.73    14.84\r\n    2  ABL Diagnostics       0P00009WGF        279.01      NaN\r\n    3           Acteos       0P00009W9O         27.01      NaN\r\n    4      Actia group       0P00009W9P         44.36      NaN\r\n\r\nIt will work similar if we are looking for stocks with a PERatio inferior to 10. The value of filter is a 2 length tuple. the first element is the sign inferior \"<\", the second element is the PERatio 10.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_stock\r\n\r\n    response = search_stock(term='',field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\", \"PERatio\"], exchange='PARIS', filters={\"PERatio\" : (\"<\", 10)})\r\n\r\n    df = pd.DataFrame(response)\r\n\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n                        Name fundShareClassId  GBRReturnM12  PERatio\r\n    0  Acanthe Developpement SA       0P00009W9K        -23.27     5.78\r\n    1                    ALD SA       0P0001AM22         31.89     5.07\r\n    2               Altarea SCA       0P00009WAG         -2.20     8.18\r\n    3  Altur Investissement SCA       0P0000DKYA         33.38     1.98\r\n    4                    Archos       0P00009WAT        -97.02     0.00\r\n\r\n\r\nWe can also look like stocks with a PERatio between 10 and 20. The value of filter is a 2 length tuple. the first element is the lower bound PERatio of 10, the second element is the upper bound PERatio of 20.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_stock\r\n\r\n    response = search_stock(term='',field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\", \"PERatio\"], exchange='PARIS', filters={\"PERatio\" : (10, 20)})\r\n\r\n    df = pd.DataFrame(response)\r\n\r\n    print(df.head())\r\n\r\n.. code-block:: python\r\n\r\n                Name fundShareClassId  GBRReturnM12  PERatio\r\n    0  ABC arbitrage SA       0P00009W9I         -5.73    14.10\r\n    1           Abeo SA       0P00018PIU         21.73    14.84\r\n    2           AdUX SA       0P00009WIO        -32.05    11.49\r\n    3       Altareit SA       0P00009WHA        -11.03    12.69\r\n    4             Alten       0P00009WAH         14.25    19.96\r\n\r\n\r\nNow we know how to use filters, we can combine them to find a precise securities universe. The world is your oyster.\r\n\r\n.. code-block:: python\r\n\r\n    from mstarpy import search_stock\r\n\r\n    response = search_stock(term='',field=[\"Name\", \"fundShareClassId\", \"GBRReturnM12\", \"PERatio\"], \r\n                            exchange='PARIS', filters={\"PERatio\" : (\"<\", '10'), \"GBRReturnM12\" : (\">\", 20), \r\n                                                        \"debtEquityRatio\" : (0, 5), \"SectorId\" : [\"IG000BA008\", \"IG000BA006\"] })\r\n\r\n    df = pd.DataFrame(response)\r\n\r\n    print(df.head())\r\n\r\n\r\n.. code-block:: python\r\n\r\n                            Name fundShareClassId  GBRReturnM12  PERatio\r\n    0                 ALD SA       0P0001AM22         31.89     5.07\r\n    1                Coheris       0P00009WDN         72.68     5.27\r\n    2  Ediliziacrobatica SpA       0P0001GZM9         24.07     6.85\r\n    3               Rexel SA       0P00009WO9         32.27     7.96\r\n    4            Soditech SA       0P00009WQ2         97.45     4.49\r\n\r\nMStarpy in the world\r\n======================\r\n\r\nAlbertine.io\r\n--------------\r\n\r\nThe site `albertine.io <https://albertine.io/#/funds>`_ uses MStarpy to compare funds. You can create PDF reports and extract data in Excel format.\r\n\r\n\r\nContribution\r\n--------------\r\n\r\nThe project is **open-source** and you can contribute on `github <https://github.com/Mael-J/mstarpy>`_.\r\n\r\nDisclaimer\r\n===============\r\n\r\nMStarpy is not affiliated to `morningstar.com <https://www.morningstar.com/>`_ or any other companies.\r\n\r\nThe package aims to share public information about funds and stocks to automatize analysis. It is the result of a free, free and independent work.\r\n\r\nMStarpy does not give any investment recommendations.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mstarpy",
    "package_url": "https://pypi.org/project/mstarpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/mstarpy/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mstarpy/1.0.1/",
    "requires_dist": [
      "beautifulsoup4 (>=4.11.1)",
      "pandas (>=1.4.3)",
      "requests (>=2.28.1)"
    ],
    "requires_python": "",
    "summary": "Mutual funds and stocks data extraction from MorningStar with Python",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17162748,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4626e0ab0da69bb00248df1ab140332a1fbb9fbd5a3f4ed0dab2e0fa742dc5e",
          "md5": "38560862b8bb45c323682703a6727c85",
          "sha256": "9a7a540d9a5cb2a724f8fc0c0e2c3621c71e833a2f86a328c21b1525004534f5"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "38560862b8bb45c323682703a6727c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30960,
        "upload_time": "2022-08-24T08:22:28",
        "upload_time_iso_8601": "2022-08-24T08:22:28.228338Z",
        "url": "https://files.pythonhosted.org/packages/a4/62/6e0ab0da69bb00248df1ab140332a1fbb9fbd5a3f4ed0dab2e0fa742dc5e/mstarpy-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95a6f29f5d882cbc7cbdb93fcdbb0023480428b99d8838a5c8b80ffe4137d759",
          "md5": "44ec56e6119dd8496b08501037625c87",
          "sha256": "bc5450a5449665aa018e18f02c6c16f8b7f4370203b51ccda49bac01e56f8e1e"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44ec56e6119dd8496b08501037625c87",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43336,
        "upload_time": "2022-10-04T08:34:58",
        "upload_time_iso_8601": "2022-10-04T08:34:58.099860Z",
        "url": "https://files.pythonhosted.org/packages/95/a6/f29f5d882cbc7cbdb93fcdbb0023480428b99d8838a5c8b80ffe4137d759/mstarpy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cebdeb2f44959e88ab57e0b154fd5579185a091eab91ff0e53186b08e1eb1dad",
          "md5": "23c177a294f50e883686af7f84b166f0",
          "sha256": "5b0000c6a6a03ad7de805c924acf07c10dcc0a2b756b344b01468b613ab357b5"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "23c177a294f50e883686af7f84b166f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43563,
        "upload_time": "2022-10-04T08:35:00",
        "upload_time_iso_8601": "2022-10-04T08:35:00.206646Z",
        "url": "https://files.pythonhosted.org/packages/ce/bd/eb2f44959e88ab57e0b154fd5579185a091eab91ff0e53186b08e1eb1dad/mstarpy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6f0bac95c81cda3bd1c8d2627aa81c306185efbf4114254b7e07e5e7c9aeaa4",
          "md5": "f0863b8dab4c75f1da1bcc174a303c48",
          "sha256": "640091d544bb714765a1ef53ff5749c1fbb66e399accfa92123b0741b6e47b53"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0863b8dab4c75f1da1bcc174a303c48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43384,
        "upload_time": "2023-01-26T23:49:15",
        "upload_time_iso_8601": "2023-01-26T23:49:15.446544Z",
        "url": "https://files.pythonhosted.org/packages/a6/f0/bac95c81cda3bd1c8d2627aa81c306185efbf4114254b7e07e5e7c9aeaa4/mstarpy-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78dc6f164a1180e45b8ec2da728465d6fefe88c7123a1d0fb8cf32d0bade50d6",
          "md5": "af55fb43460ccd65f21d348ab7fded6b",
          "sha256": "dba1c19d21a9669fc232d4dbc66ceba5d9e1d66a2c5173319d47546cd4beef9a"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "af55fb43460ccd65f21d348ab7fded6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43582,
        "upload_time": "2023-01-26T23:49:17",
        "upload_time_iso_8601": "2023-01-26T23:49:17.243150Z",
        "url": "https://files.pythonhosted.org/packages/78/dc/6f164a1180e45b8ec2da728465d6fefe88c7123a1d0fb8cf32d0bade50d6/mstarpy-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "795318b44b68f7d46416881ba291cda9e58a9d3ba778f2e9bd6b129be461a851",
          "md5": "5388239174a233ea467df785a91d061f",
          "sha256": "56959595a92b6b0842547fc4f8ae55d93d5c1323930c71b51f6b0b85054a837a"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5388239174a233ea467df785a91d061f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43389,
        "upload_time": "2023-02-02T16:56:38",
        "upload_time_iso_8601": "2023-02-02T16:56:38.893706Z",
        "url": "https://files.pythonhosted.org/packages/79/53/18b44b68f7d46416881ba291cda9e58a9d3ba778f2e9bd6b129be461a851/mstarpy-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf825ce13123718a9408712c05241bbcca1201fbaab86f28ec73eed9d24999a7",
          "md5": "af3cc0d2c07b965fb2d380ef3fff6282",
          "sha256": "470c95225968a59d3044eab72f94d170a87b7050957e3c0384ca040acd8810bb"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "af3cc0d2c07b965fb2d380ef3fff6282",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43577,
        "upload_time": "2023-02-02T16:56:40",
        "upload_time_iso_8601": "2023-02-02T16:56:40.672707Z",
        "url": "https://files.pythonhosted.org/packages/bf/82/5ce13123718a9408712c05241bbcca1201fbaab86f28ec73eed9d24999a7/mstarpy-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47b2eda5217b8bde3874f7b521d9cf330d3fdb4f83b3aa89486bbf79ef83d198",
          "md5": "dbdd8f118f4bc0bd6e0a1178d970ab60",
          "sha256": "afc97588deb25170851f5290e70129930a2373f156509e83c327ada4dc3c16e9"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbdd8f118f4bc0bd6e0a1178d970ab60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44187,
        "upload_time": "2023-02-02T19:07:56",
        "upload_time_iso_8601": "2023-02-02T19:07:56.967607Z",
        "url": "https://files.pythonhosted.org/packages/47/b2/eda5217b8bde3874f7b521d9cf330d3fdb4f83b3aa89486bbf79ef83d198/mstarpy-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e1935b54ad9609c23ed8a9bde708a2202cddab668194118948894c0b3228bfe",
          "md5": "d6ddaa9ea8e727e31db7999162325428",
          "sha256": "32a75beeb039ebdaf5e40071000e31d78a18e0f54575227dfbabc46084e15f2a"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d6ddaa9ea8e727e31db7999162325428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44369,
        "upload_time": "2023-02-02T19:07:58",
        "upload_time_iso_8601": "2023-02-02T19:07:58.585095Z",
        "url": "https://files.pythonhosted.org/packages/2e/19/35b54ad9609c23ed8a9bde708a2202cddab668194118948894c0b3228bfe/mstarpy-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b4c0f36b8e8e91902ff4a049f76ffb3b72ccdcca1816e76f29771583e2dd2fc",
          "md5": "8729f59cec6902566c11ba63254692c3",
          "sha256": "6a12ade44fb3b9cf4f7e7217d2a466c1ca8d32acfeb41b84ed3e5ea80e2845c9"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8729f59cec6902566c11ba63254692c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 45548,
        "upload_time": "2023-02-06T17:30:04",
        "upload_time_iso_8601": "2023-02-06T17:30:04.797608Z",
        "url": "https://files.pythonhosted.org/packages/6b/4c/0f36b8e8e91902ff4a049f76ffb3b72ccdcca1816e76f29771583e2dd2fc/mstarpy-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "940d4fd445d123125269aff69789f09d6961155051a7617e1d7352a9b11908b6",
          "md5": "d11aea627f081bc3169ed85cc364ed52",
          "sha256": "5b1f6d63d70b35304e857c3ab0dd0861838a9ca102e592d7496ef6c589ed07f5"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d11aea627f081bc3169ed85cc364ed52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45866,
        "upload_time": "2023-02-06T17:30:07",
        "upload_time_iso_8601": "2023-02-06T17:30:07.862978Z",
        "url": "https://files.pythonhosted.org/packages/94/0d/4fd445d123125269aff69789f09d6961155051a7617e1d7352a9b11908b6/mstarpy-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9a1e3a913ee8eba674266f9d2c61448e436d0f703e9e0cb5498dd09ec53480c",
          "md5": "0781f3f8a8326729dc07b99841867f4b",
          "sha256": "1eb8f19bf94f06ff72a0d6f462e5ac103ec44024f5d49f2e1c7e108ae2e8373d"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0781f3f8a8326729dc07b99841867f4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 46523,
        "upload_time": "2023-02-12T21:10:42",
        "upload_time_iso_8601": "2023-02-12T21:10:42.287416Z",
        "url": "https://files.pythonhosted.org/packages/f9/a1/e3a913ee8eba674266f9d2c61448e436d0f703e9e0cb5498dd09ec53480c/mstarpy-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6677ee63c4b69aac72c11079845b6dcb6bf8d6272e72558f7d3fb3b823326b8",
          "md5": "d35e95870ccb9def7024e5fb89f02acd",
          "sha256": "79a5c0c2b133ddba9ca1ff0d8767fab1fc104cc4cb945d3f58634968a04f7c17"
        },
        "downloads": -1,
        "filename": "mstarpy-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d35e95870ccb9def7024e5fb89f02acd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46903,
        "upload_time": "2023-02-12T21:10:47",
        "upload_time_iso_8601": "2023-02-12T21:10:47.786015Z",
        "url": "https://files.pythonhosted.org/packages/e6/67/7ee63c4b69aac72c11079845b6dcb6bf8d6272e72558f7d3fb3b823326b8/mstarpy-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afa53b86fe694ffdb54f5a88c53a812d621bb12f499bc8524bed9615290d3013",
          "md5": "2fb43e4cfe31039b01985df42aaab6fb",
          "sha256": "86304d99a105855e37fcb0cbd8a584976b7933a092061f21a94bcb6fdd65f7de"
        },
        "downloads": -1,
        "filename": "mstarpy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fb43e4cfe31039b01985df42aaab6fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 88885,
        "upload_time": "2023-02-18T21:20:20",
        "upload_time_iso_8601": "2023-02-18T21:20:20.920167Z",
        "url": "https://files.pythonhosted.org/packages/af/a5/3b86fe694ffdb54f5a88c53a812d621bb12f499bc8524bed9615290d3013/mstarpy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4083d1761f08ea7d6a8a45a8689a162ce3a7b95140052996f1e54cf5cb80f3eb",
          "md5": "b1d764a823e2d6244fb8e3f1f94b5899",
          "sha256": "f04ccbc28e34e999b2de4b772a24d194eb546edbfe792ae9135b07277694f157"
        },
        "downloads": -1,
        "filename": "mstarpy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b1d764a823e2d6244fb8e3f1f94b5899",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 87901,
        "upload_time": "2023-02-18T21:20:23",
        "upload_time_iso_8601": "2023-02-18T21:20:23.311471Z",
        "url": "https://files.pythonhosted.org/packages/40/83/d1761f08ea7d6a8a45a8689a162ce3a7b95140052996f1e54cf5cb80f3eb/mstarpy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "355884e12a1d5468962bfca2350996c2ab51a175dec6559757267e449210376b",
          "md5": "16bd7f8e2e161e8619c7bad88f2a033e",
          "sha256": "e0fb8f9e11389f567ab3a6ec58a50285b5bf938f9b1e0fc3773257bcf12533a5"
        },
        "downloads": -1,
        "filename": "mstarpy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16bd7f8e2e161e8619c7bad88f2a033e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28860,
        "upload_time": "2023-03-05T09:40:40",
        "upload_time_iso_8601": "2023-03-05T09:40:40.752756Z",
        "url": "https://files.pythonhosted.org/packages/35/58/84e12a1d5468962bfca2350996c2ab51a175dec6559757267e449210376b/mstarpy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb19f40f7c17b9e49a6bbf258970b3dbe581f4093e7d09bfa0ca4d1709f5276a",
          "md5": "6ffc8eacd804c4ea5bf836b2437ef087",
          "sha256": "f17bcc814e52f2ace986f4a0e11bd6ef5b1a7555ce37c85a9cced80b1246e95b"
        },
        "downloads": -1,
        "filename": "mstarpy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ffc8eacd804c4ea5bf836b2437ef087",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31663,
        "upload_time": "2023-03-05T09:40:43",
        "upload_time_iso_8601": "2023-03-05T09:40:43.309898Z",
        "url": "https://files.pythonhosted.org/packages/fb/19/f40f7c17b9e49a6bbf258970b3dbe581f4093e7d09bfa0ca4d1709f5276a/mstarpy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "355884e12a1d5468962bfca2350996c2ab51a175dec6559757267e449210376b",
        "md5": "16bd7f8e2e161e8619c7bad88f2a033e",
        "sha256": "e0fb8f9e11389f567ab3a6ec58a50285b5bf938f9b1e0fc3773257bcf12533a5"
      },
      "downloads": -1,
      "filename": "mstarpy-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16bd7f8e2e161e8619c7bad88f2a033e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28860,
      "upload_time": "2023-03-05T09:40:40",
      "upload_time_iso_8601": "2023-03-05T09:40:40.752756Z",
      "url": "https://files.pythonhosted.org/packages/35/58/84e12a1d5468962bfca2350996c2ab51a175dec6559757267e449210376b/mstarpy-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb19f40f7c17b9e49a6bbf258970b3dbe581f4093e7d09bfa0ca4d1709f5276a",
        "md5": "6ffc8eacd804c4ea5bf836b2437ef087",
        "sha256": "f17bcc814e52f2ace986f4a0e11bd6ef5b1a7555ce37c85a9cced80b1246e95b"
      },
      "downloads": -1,
      "filename": "mstarpy-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6ffc8eacd804c4ea5bf836b2437ef087",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31663,
      "upload_time": "2023-03-05T09:40:43",
      "upload_time_iso_8601": "2023-03-05T09:40:43.309898Z",
      "url": "https://files.pythonhosted.org/packages/fb/19/f40f7c17b9e49a6bbf258970b3dbe581f4093e7d09bfa0ca4d1709f5276a/mstarpy-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}