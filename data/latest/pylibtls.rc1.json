{
  "info": {
    "author": "",
    "author_email": "David Stenwall <david@stenwall.io>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# pylibtls\n\n## About\nDeveloped initially in september 2021 on FreeBSD 13.0 with LibreSSL 3.3.3 with API Version `20200120`. \n\nThe aim is to just wrap the API as thinly as possible. A few principles: \n- `str` is encoded using default encoding (just calling `encode()`)\n- Epochs are converted to UTC datetime\n- Return code `-1` is made into `TLSError`\n- Returned `1`s and `0`s are cast to `boolean`\n- Returned strings are converted with `decode()`\n- `tls_read()` and `tls_write()` expects `bytes` though\n- The order of the functions defined matches that of libtls.h\n- Argument names are not always pythonic but matches that of libtls.h\n\n## Background\nI always thought it was a bit of a mistake for [LibreSSL](https://www.libressl.org/index.html) to be an drop-in replacement for OpenSSL. I just wanted to use libtls and be done with it. But since LibreSSL always replaced OpenSSL and that always seemed to be problematic I looked for ways to install just libtls, but to no awail. Until April 18, 2021 when version 3.3.2 of LibreSSL was released.\n\nFrom the [release notes](https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.3.2-relnotes.txt) (way down): \n>Added '--enable-libtls-only' build option, which builds and installs a statically-linked libtls, skipping libcrypto and libssl. This is useful for systems that ship with OpenSSL but wish to also package libtls.\n\n*YEY!*\n\nSome time after it was made a [flavor](https://docs.freebsd.org/en/books/porters-handbook/flavors/) of the FreeBSD LibreSSL [port](https://www.freshports.org/security/libressl/). So now I finally had it! So I started looking for Python wrappers for it. I found [python-libtls](https://pypi.org/project/python-libtls/) by Vinay Sajip. Last update in 2017, looked abandoned, so [I made a new one](https://www.youtube.com/channel/UCMrMVIBtqFW6O0-MWq26gqw).\n\n## Getting started\n### Getting libtls\nFirst thing is getting libtls somehow. If you already have LibreSSL you should be good to go. Otherwise hope the **&#x2011;&#x2011;enable&#x2011;libtls&#x2011;only** build flag is used somehow in whatever package thingamajig you're using:\n- FreeBSD got the forementioned port\n- MacOS got nothing (yet...)\n- Gentoo got libtls ported to OpenSSL (ewww...)\n\nThere's an env variable you can use to specify the path to libtls if `ctypes` is unable to find it automagically and that's `PYLIBTLS_LIBTLS_PATH`.\n\n### Getting pylibtls\nOnce I get it up on PyPi you can just use:\n```sh\n$> pip install pylibtls\n```\nand \n```py\nimport tls\n```\nBut right now your only option is to clone this repo and work your way from there. Godspeed!\n\n\n## Usage\nOh the fun part!\n\nFunctions are named the same so `tls_init()` is `tls.tls_init()` and so on. Constants from header file are just `tls.TLS_A_CONSTANT`.\n\n\n```python\nfrom tls import (tls_config_new, tls_client, tls_configure, tls_connect, tls_write, \n                tls_read, tls_config_free, tls_close, tls_free)\n\ncfg = tls_config_new()\nctx = tls_client()\ntls_configure(ctx, cfg)\n\nhost = 'www.openbsd.org'\ntls_connect(ctx, host, 443)\nquery = \"HEAD / HTTP/1.0\\r\\nHost: {}\\r\\n\\r\\n\".format(host)\ntls_write(ctx, query.encode())\nr = tls_read(ctx)\nprint(r.decode())\n\ntls_config_free(cfg)\ntls_close(ctx)\ntls_free(ctx)\n```\n\nThe full monty\n\n```python\nfrom tls import *\n\nprint('Version:', TLS_API)\ncfg = tls_config_new()\ntls_config_set_ca_file(cfg, \"/etc/ssl/cert.pem\")\nprint(tls_default_ca_cert_file())\ntls_config_set_protocols(cfg, TLS_PROTOCOL_TLSv1_2)\nctx = tls_client()\ntls_configure(ctx, cfg)\n\nhost = 'www.openbsd.org'\nprint('host:', host)\n\nprint('connect_socket')\ntls_connect(ctx, host, 443)\nprint(\"Cert provided:\", tls_peer_cert_provided(ctx))\nprint(\"Hash (SHA256):\", tls_peer_cert_hash(ctx))\nprint(\"Issuer:\", tls_peer_cert_issuer(ctx))\nprint(\"Subject:\", tls_peer_cert_subject(ctx))\nprint(\"NotBefore (UTC):\", tls_peer_cert_notbefore(ctx))\nprint(\"NotAfter (UTC):\", tls_peer_cert_notafter(ctx))\nprint(\"ALPN:\", tls_conn_alpn_selected(ctx))\nprint(\"Cipher:\", tls_conn_cipher(ctx))\nprint(\"Servername:\", tls_conn_servername(ctx))\nprint(\"Resumed:\", tls_conn_session_resumed(ctx))\nprint(\"TLS Version:\", tls_conn_version(ctx))\nprint(\"OCSP URL:\", tls_peer_ocsp_url(ctx))\nprint(\"OCSP result:\", tls_peer_ocsp_result(ctx))\nif tls_peer_ocsp_result(ctx) is not None:\n    print(\"OCSP Response Status:\", TLS_OCSP_RESPONSE[tls_peer_ocsp_response_status(ctx)])\n    print(\"OCSP Cert Status:\", TLS_OCSP_CERT[tls_peer_ocsp_cert_status(ctx)])\n    print(\"OCSP CRL Reason:\", TLS_CRL_REASON[tls_peer_ocsp_crl_reason(ctx)])\n    print(\"OCSP revocation:\", tls_peer_ocsp_revocation_time(ctx))\n    print(\"OCSP this update:\", tls_peer_ocsp_this_update(ctx))\n    print(\"OCSP next update:\", tls_peer_ocsp_next_update(ctx))\n\nprint()\nquery = \"HEAD / HTTP/1.0\\r\\nHost: {}\\r\\n\\r\\n\".format(host)\nprint('tls_write', query)\nr = tls_write(ctx, query.encode())\nprint(r, 'bytes')\nprint('read')\nr = tls_read(ctx)\nprint(len(r), 'bytes')\nprint(r.decode())\n\ntls_config_free(cfg)\ntls_close(ctx)\ntls_free(ctx)\n```\nThis is using the extra `dict`s I put in for reverse lookup of values-to-name: `TLS_OCSP_RESPONSE`, `TLS_OCSP_CERT` and `TLS_CRL_REASON`. They require that OCSP stapling is active on the server in question. In the example, it is. \n\n## Documentation\nNone yet, apart from this README. See the [OpenBSD documentation](https://man.openbsd.org/tls_init.3) for reference. It should get you up and running somewhat.\n\n## Status\n#### 2021-10-08\nFirst pushed to GitHub (A bit nervous). Most of the API implemented. Only client functionality tested. No local OCSP-stuff (getting the staple file is HARD). Only tested on FreeBSD. Should work fine on Linux at least. No `libtls-only` brew Formulae so MacOS is out (might be next project). Windows seems to be a sad chapter in general. Vinay stranded [here](https://github.com/libressl-portable/portable/issues/266) more or less.\n\n## TODO\n- [ ] All `mem`-functions that read stuff from memory loaded with `tls_load_file()`\n- [ ] Callbacks versions of `tls_accept()` and `tls_connect()`\n- [ ] File descriptor versions of the same\n- [ ] `tls_peer_cert_chain_pem()`\n- [ ] `assert` a few things here and there\n\n## Acknowledgments\n- [python-libtls](https://bitbucket.org/vinay.sajip/python-libtls/src/master/) and [python-gnutls](https://github.com/AGProjects/python-gnutls) for inspiration\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylibtls",
    "package_url": "https://pypi.org/project/pylibtls/",
    "platform": "",
    "project_url": "https://pypi.org/project/pylibtls/",
    "project_urls": {
      "GitHub": "https://github.com/dafvid/pylibtls"
    },
    "release_url": "https://pypi.org/project/pylibtls/0.1.1/",
    "requires_dist": [
      "pytest ; extra == \"test\"",
      "pytest-cov ; extra == \"test\""
    ],
    "requires_python": "",
    "summary": "pylibtls - Python bindings for libtls",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11677044,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31d2ce4e61514a47a14b7f39a5c2e41648c31a96b80488dfaa8ff36e39ec8290",
          "md5": "b5b4376e91a076091871bcd45c743d25",
          "sha256": "c56e20c681fa98d50adac00e71d6736da35630bb825603b1c0d19865ce9e2fba"
        },
        "downloads": -1,
        "filename": "pylibtls-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5b4376e91a076091871bcd45c743d25",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 9610,
        "upload_time": "2021-10-09T20:55:00",
        "upload_time_iso_8601": "2021-10-09T20:55:00.268749Z",
        "url": "https://files.pythonhosted.org/packages/31/d2/ce4e61514a47a14b7f39a5c2e41648c31a96b80488dfaa8ff36e39ec8290/pylibtls-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65526d5d7980023dc6af619e175f5e0a409c243c7b57a6a22a1a79a8bb8ea23f",
          "md5": "91e3486b347c875d332d9b21c91af120",
          "sha256": "a993c711e3775234f81eab0a45cebe6dcd27884d65ed455ae32d3ce1641d834c"
        },
        "downloads": -1,
        "filename": "pylibtls-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "91e3486b347c875d332d9b21c91af120",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11581,
        "upload_time": "2021-10-09T20:55:02",
        "upload_time_iso_8601": "2021-10-09T20:55:02.367513Z",
        "url": "https://files.pythonhosted.org/packages/65/52/6d5d7980023dc6af619e175f5e0a409c243c7b57a6a22a1a79a8bb8ea23f/pylibtls-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31d2ce4e61514a47a14b7f39a5c2e41648c31a96b80488dfaa8ff36e39ec8290",
        "md5": "b5b4376e91a076091871bcd45c743d25",
        "sha256": "c56e20c681fa98d50adac00e71d6736da35630bb825603b1c0d19865ce9e2fba"
      },
      "downloads": -1,
      "filename": "pylibtls-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5b4376e91a076091871bcd45c743d25",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9610,
      "upload_time": "2021-10-09T20:55:00",
      "upload_time_iso_8601": "2021-10-09T20:55:00.268749Z",
      "url": "https://files.pythonhosted.org/packages/31/d2/ce4e61514a47a14b7f39a5c2e41648c31a96b80488dfaa8ff36e39ec8290/pylibtls-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65526d5d7980023dc6af619e175f5e0a409c243c7b57a6a22a1a79a8bb8ea23f",
        "md5": "91e3486b347c875d332d9b21c91af120",
        "sha256": "a993c711e3775234f81eab0a45cebe6dcd27884d65ed455ae32d3ce1641d834c"
      },
      "downloads": -1,
      "filename": "pylibtls-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "91e3486b347c875d332d9b21c91af120",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11581,
      "upload_time": "2021-10-09T20:55:02",
      "upload_time_iso_8601": "2021-10-09T20:55:02.367513Z",
      "url": "https://files.pythonhosted.org/packages/65/52/6d5d7980023dc6af619e175f5e0a409c243c7b57a6a22a1a79a8bb8ea23f/pylibtls-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}