{
  "info": {
    "author": "Swiss National Supercomputing Center (CSCS/ETH Zurich)",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Stackinator\n\nA tool for building a scientific software stack from a recipe for vClusters on CSCS' Alps infrastructure.\n\n## Bootstrapping\nUse the `bootstrap.sh` script to install the necessary dependencies. \nThe dependencies are going to be installed under the `external` directory on the root directory of the project.\n\n## Basic usage\n\nThe tool generates the make files and spack configurations that build the spack environments that are packaged together in the spack stack.\nIt can be thought of as equivalent to calling `cmake` or `configure`, before running make to run the configured build.\n\n```bash\n# configure the build\n./bin/stack-config -b$BUILD_PATH -r$RECIPE_PATH\n\n# build the spack stack\ncd $BUILD_PATH\nenv --ignore-environment PATH=/usr/bin:/bin:`pwd`/spack/bin make modules store.squashfs -j64\n\n# mount the stack\nsquashfs-run store.squashfs bash\n```\n* `-b, --build`: the path where the build stage\n* `-r, --recipe`: the path with the recipe yaml files that describe the environment.\n* `-d, --debug`: print detailed python error messages.\n\n## Recipes\n\nA recipe is the input provided to the tool. A recipe is comprised of the following yaml files in a directory:\n\n* `config.yaml`: common configuration for the stack.\n* `compilers.yaml`: the compilers provided by the stack.\n* `environments.yaml`: environments that contain all the software packages.\n* `modules.yaml`: _optional_ module generation rules\n    * follows the spec for (spack mirror configuration)[https://spack.readthedocs.io/en/latest/mirrors.html]\n* `packages.yaml`: _optional_ package rules.\n    * follows the spec for (spack package configuration)[https://spack.readthedocs.io/en/latest/build_settings.html]\n\n### config\n\n```yaml\nname: nvgpu-basic\nstore: /user-environment\nsystem: hohgant\nspack:\n    repo: https://github.com/spack/spack.git\n    commit: 6408b51\nmodules: True\n```\n\n* `name`: a plain text name for the environment\n* `store`: the location where the environment will be mounted.\n* `system`: the name of the vCluster on which the stack will be deployed.\n    * one of `balfrin` or `hohgant`.\n    * cluster-specific details such as the version and location of libfabric are used when configuring and building the stack.\n* `spack`: which spack repository to use for installation.\n* `mirrors`: _optional_ configure use of build caches, see [build cache documentation](docs/build-cache.md).\n* `modules`: _optional_ enable/diasble module file generation (default `True`).\n\n### compilers\n\nTake an  example configuration:\n```yaml\nbootstrap:\n  spec: gcc@11\ngcc:\n  specs:\n  - gcc@11\nllvm:\n  requires: gcc@11\n  specs:\n  - nvhpc@21.7\n  - llvm@14\n```\n\nThe compilers are built in multiple stages:\n\n1. *bootstrap*: A bootstrap gcc compiler is built using the system compiler (currently gcc 4.7.5).\n    * `gcc:specs`: single spec of the form `gcc@version`.\n    * The selected version should have full support for the target architecture in order to build optimised gcc toolchains in step 2.\n2. *gcc*: The bootstrap compiler is then used to build the gcc version(s) provided by the stack.\n    * `gcc:specs`: A list of _at least one_ of the specs of the form `gcc@version`.\n3. *llvm*: (optional) The nvhpc and/or llvm toolchains are build using one of the gcc toolchains installed in step 2.\n    * `llvm:specs`: a list of specs of the form `nvhpc@version` or `llvm@version`.\n    * `llvm:requires`: the version of gcc from step 2 that is used to build the llvm compilers.\n\nThe first two steps are required, so that the simplest stack will provide at least one version of gcc compiled for the target architecture.\n\n> **Note**\n>\n> Don't provide full specs, because the tool will insert \"opinionated\" specs for the target node type, for example:\n> * `nvhpc@21.7` generates `nvhpc@21.7 ~mpi~blas~lapack`\n> * `llvm@14` generates `llvm@14 +clang targets=x86 ~gold ^ninja@kitware`\n> * `gcc@11` generates `gcc@11 build_type=Release +profiled +strip`\n\n### environments\n\nThe software packages are configured as disjoint environments, each built with the same compiler, and configured with a single implementation of MPI.\n\n#### example: a cpu-only gnu toolchain with MPI\n\n```\n# environments.yaml\ngcc-host:\n  compiler:\n      - toolchain: gcc\n        spec: gcc@11.3\n  unify: true\n  specs:\n  - hdf5 +mpi\n  - fftw +mpi\n  mpi:\n    spec: cray-mpich\n    gpu: false\n```\n\nAn environment labelled `gcc-host` is built using `gcc@11.3` from the `gcc` compiler toolchain (**note** the compiler spec must mach a compiler from the toolchain that was installed via the `compilers.yaml` file).\nThe tool will generate a `spack.yaml` specification:\n\n```yaml\n# spack.yaml\nspack:\n  include:\n  - compilers.yaml\n  - config.yaml\n  view: false\n  concretizer:\n    unify: True\n  specs:\n  - fftw +mpi\n  - hdf5 +mpi\n  - cray-mpich\n  packages:\n    all:\n      compiler: [gcc@11.3]\n    mpi:\n      require: cray-mpich\n```\n\n> **Note**\n>\n> The `cray-mpich` spec is added to the list of package specs automatically.\n> By setting `environments.ENV.mpi` all packages in the environment `ENV` that use the virtual dependency `+mpi` will use the same `cray-mpich` implementation.\n\n#### example: a gnu toolchain with MPI and NVIDIA GPU support\n\n```yaml\n# environments.yaml\ngcc-nvgpu:\n  compiler:\n      - toolchain: gcc\n        spec: gcc@11.3\n  unify: true\n  specs:\n  - cuda@11.8\n  - fftw +mpi\n  - hdf5 +mpi\n  mpi:\n    spec: cray-mpich\n    gpu: cuda\n```\n\nThe `environments:gcc-nvgpu:gpu` to `cuda` will build the `cray-mpich` with support for GPU-direct.\n\n```yaml\n# spack.yaml\nspack:\n  include:\n  - compilers.yaml\n  - config.yaml\n  view: false\n  concretizer:\n    unify: True\n  specs:\n  - cuda@11.8\n  - fftw +mpi\n  - hdf5 +mpi\n  - cray-mpich +cuda\n  packages:\n    all:\n      compiler: [gcc@11.3]\n    mpi:\n      require: cray-mpich\n```\n\n#### example: a nvhpc toolchain with MPI\n\nTo build a toolchain with NVIDIA HPC SDK, we provide two compiler toolchains:\n- The `llvm:nvhpc` compiler;\n- A version of gcc from the `gcc` toolchain, in order to build dependencies (like CMake) that can't be built with nvhpc. If a second compiler is not provided, Spack will fall back to the system gcc 4.7.5, and not generate zen2/zen3 optimized code as a result.\n\n```yaml\n# environments.yaml\nprgenv-nvidia:\n  compiler:\n      - toolchain: llvm\n        spec: nvhpc\n      - toolchain: gcc\n        spec: gcc@11.3\n  unify: true\n  specs:\n  - cuda@11.8\n  - fftw%nvhpc +mpi\n  - hdf5%nvhpc +mpi\n  mpi:\n    spec: cray-mpich\n    gpu: cuda\n```\n\nThe following `spack.yaml` is generated:\n\n```yaml\n# spack.yaml\nspack:\n  include:\n  - compilers.yaml\n  - config.yaml\n  view: false\n  concretizer:\n    unify: True\n  specs:\n  - cuda@11.8\n  - fftw%nvhpc +mpi\n  - hdf5%nvhpc +mpi\n  - cray-mpich +cuda\n  packages:\n    all:\n      compiler: [nvhpc, gcc@11.3]\n    mpi:\n      require: cray-mpich\n```\n\n#### example: a gnu toolchain that provides some common tools\n\n```yaml\n# environments.yaml\ntools:\n  compiler:\n      toolchain: gcc\n      spec: gcc@11.3\n  unify: true\n  specs:\n  - cmake\n  - python@3.10\n  - tmux\n  - reframe\n  mpi: false\n  gpu: false\n```\n\n```yaml\n# spack.yaml\nspack:\n  include:\n  - compilers.yaml\n  - config.yaml\n  view: false\n  concretizer:\n    unify: True\n  specs:\n  - cmake\n  - python@3.10\n  - tmux\n  - reframe\n  packages:\n    all:\n      compiler: [gcc@11.3]\n```\n\n### modules\n\nModules are generated for the installed compilers and packages by spack. The default module generation rules set by the version of spack specified in `config.yaml` will be used if no `modules.yaml` file is provided.\n\nTo set rules for module generation, provide a `module.yaml` file as per the [spack documentation](https://spack.readthedocs.io/en/latest/module_file_support.html).\n\nTo disable module generation, set the field `config:modules:False` in `config.yaml`.\n\n### packages\n\nA spack `packages.yaml` file is provided by the tool for each target cluster. This file sets system dependencies, such as libfabric and slurm, which are expected to be provided by the cluster and not built by Spack. A recipe can provide a `packages.yaml` file, which is merged with the cluster-specific `packages.yaml`.\n\nFor example, to enforce every compiler and environment built use the versions of perl and git installed on the system, add a file like the following (with appropriate version numbers and prefixes, of course):\n\n```yaml\n# packages.yaml\npackages:\n  perl:\n    buildable: false\n    externals:\n    - spec: perl@5.36.0\n      prefix: /usr\n  git:\n    buildable: false\n    externals:\n    - spec: git@2.39.1\n      prefix: /usr\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eth-cscs/stackinator",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Stackinator",
    "package_url": "https://pypi.org/project/Stackinator/",
    "platform": null,
    "project_url": "https://pypi.org/project/Stackinator/",
    "project_urls": {
      "Homepage": "https://github.com/eth-cscs/stackinator"
    },
    "release_url": "https://pypi.org/project/Stackinator/1.0/",
    "requires_dist": [
      "Jinja2",
      "jsonschema",
      "PyYAML"
    ],
    "requires_python": ">=3.6",
    "summary": "Stackinator is a tool for building a scientific software stack from a recipe for vClusters on CSCS' Alps infrastructure",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16873987,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acbc13470076a5cd8367ec98e0bd7dcc5ac914cf9bfad4a7da37d48cd65794ed",
          "md5": "6483c02ad4dc218f9a32f145bc5facd3",
          "sha256": "4970d03d5d3b1ad4d6831fd92cafe7bf607fd2f47080495ec3266c098e37204b"
        },
        "downloads": -1,
        "filename": "Stackinator-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6483c02ad4dc218f9a32f145bc5facd3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31446,
        "upload_time": "2023-02-15T09:46:53",
        "upload_time_iso_8601": "2023-02-15T09:46:53.509878Z",
        "url": "https://files.pythonhosted.org/packages/ac/bc/13470076a5cd8367ec98e0bd7dcc5ac914cf9bfad4a7da37d48cd65794ed/Stackinator-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "930eab859342b9a8ab38f8aa5a5781e3deee27115a49cb802332c7cf49445881",
          "md5": "1302e26f4db00c146011d8f865742e7b",
          "sha256": "b170af77d4cf5e94d1a70c91ace9f71387364d80c3f7b616e0fb18c51f5e92b1"
        },
        "downloads": -1,
        "filename": "Stackinator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1302e26f4db00c146011d8f865742e7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20324,
        "upload_time": "2023-02-15T09:46:55",
        "upload_time_iso_8601": "2023-02-15T09:46:55.121483Z",
        "url": "https://files.pythonhosted.org/packages/93/0e/ab859342b9a8ab38f8aa5a5781e3deee27115a49cb802332c7cf49445881/Stackinator-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfd1b9e24b89b38495fe07a345c4080f78c96b83bdad002f03ace3d0f6e5a53d",
          "md5": "9834292088dcb91f0a4c16682c306b58",
          "sha256": "7710a659fb47720d8b84cef5be6225a1b4d41cbce911268dc2886301caea19f8"
        },
        "downloads": -1,
        "filename": "Stackinator-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9834292088dcb91f0a4c16682c306b58",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31473,
        "upload_time": "2023-02-15T16:34:29",
        "upload_time_iso_8601": "2023-02-15T16:34:29.445444Z",
        "url": "https://files.pythonhosted.org/packages/bf/d1/b9e24b89b38495fe07a345c4080f78c96b83bdad002f03ace3d0f6e5a53d/Stackinator-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ede602fa36d7016992470cc4723dbf39c777cf088a3b7ef09c34a5ea94caa89",
          "md5": "85274314466985cab83c0da01b257239",
          "sha256": "8e6655790e62aed8546c74fb44e19e42211099b17fbdba5eb3c77eda5cb2042a"
        },
        "downloads": -1,
        "filename": "Stackinator-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "85274314466985cab83c0da01b257239",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20369,
        "upload_time": "2023-02-15T16:34:30",
        "upload_time_iso_8601": "2023-02-15T16:34:30.720419Z",
        "url": "https://files.pythonhosted.org/packages/5e/de/602fa36d7016992470cc4723dbf39c777cf088a3b7ef09c34a5ea94caa89/Stackinator-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfd1b9e24b89b38495fe07a345c4080f78c96b83bdad002f03ace3d0f6e5a53d",
        "md5": "9834292088dcb91f0a4c16682c306b58",
        "sha256": "7710a659fb47720d8b84cef5be6225a1b4d41cbce911268dc2886301caea19f8"
      },
      "downloads": -1,
      "filename": "Stackinator-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9834292088dcb91f0a4c16682c306b58",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 31473,
      "upload_time": "2023-02-15T16:34:29",
      "upload_time_iso_8601": "2023-02-15T16:34:29.445444Z",
      "url": "https://files.pythonhosted.org/packages/bf/d1/b9e24b89b38495fe07a345c4080f78c96b83bdad002f03ace3d0f6e5a53d/Stackinator-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ede602fa36d7016992470cc4723dbf39c777cf088a3b7ef09c34a5ea94caa89",
        "md5": "85274314466985cab83c0da01b257239",
        "sha256": "8e6655790e62aed8546c74fb44e19e42211099b17fbdba5eb3c77eda5cb2042a"
      },
      "downloads": -1,
      "filename": "Stackinator-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "85274314466985cab83c0da01b257239",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20369,
      "upload_time": "2023-02-15T16:34:30",
      "upload_time_iso_8601": "2023-02-15T16:34:30.720419Z",
      "url": "https://files.pythonhosted.org/packages/5e/de/602fa36d7016992470cc4723dbf39c777cf088a3b7ef09c34a5ea94caa89/Stackinator-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}