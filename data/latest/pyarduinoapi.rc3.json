{
  "info": {
    "author": "Pigeonburger",
    "author_email": "pigeonburger@pigeonburger.xyz",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pyArduinoAPI\n\nA Python API for communicating with your Arduino board.\n\nA lightweight Python library for\ncommunicating with [Arduino microcontroller boards](http://www.arduino.cc/) from a connected computer using\nstandard serial IO, either over a physical wire\nor wirelessly. It is written using a custom protocol, similar to [Firmata](http://firmata.org/wiki/Main_Page).\n\nThis is my own fork of the [original](https://github.com/mkals/Arduino-Python3-Command-API) version of this repo. I've added some new commands to suit my needs and use cases for Arduino, and will continue adding my modifications here as I need them.\n\nThis library allows a user to quickly prototype programs for Arduino using Python code, or to\nsimply read/control/troubleshoot/experiment\nwith hardware connected to an Arduino board without ever having to recompile and reload sketches to the board itself.\n\nMethod names within the Arduino-Python3 Command API are designed to be as close\nas possible to their Arduino programming language counterparts. This allows for Arduino code to quickly be transcribed into Python, or vice-versa.\n\n## Requirements:\n- [Python](http://python.org/) 3.7 or above (tested on Windows, Linux and macOS).\n- [pyserial](http://pyserial.sourceforge.net/) 2.6 or higher (`pip install pyserial`)\n- Any [Arduino compatible microcontroller](https://www.sparkfun.com/categories/242) with at least 14KB of flash memory\n\n\n# Installation + Setup\n1. To install, run `pip install pyArduinoAPI`.\n\n2. Load the `prototype.ino` sketch onto your Arduino board, using the Arduino IDE.\n\n3. Set up some kind of serial I/O communication between the Arduino board and your computer (via physical USB cable,\nBluetooth, xbee, etc. + associated drivers)\n\n4. Add `from Arduino import Arduino` into your python script to communicate with your Arduino.\n---\n\n**What I've added so far that is different to the version I adapted this from:**\n- Added support for `tone()` and `noTone()` operations.\n- Added (almost) complete support for the [`LiquidCrystal`](https://www.arduino.cc/en/Reference/LiquidCrystal) library for controlling LCD screens (missing `write()` and `createChar()` functions)\n\n# Examples\n## Simple usage example (LED blink):\n```python\nfrom Arduino import Arduino\nimport time\n\nboard = Arduino()\nboard.pinMode(13, \"OUTPUT\")\n\nwhile True:\n    board.digitalWrite(13, \"LOW\")\n    time.sleep(1)\n    board.digitalWrite(13, \"HIGH\")\n    time.sleep(1)\n```\n\n## Python adaptation of [Spaceship Interface](https://create.arduino.cc/projecthub/SBR/spaceship-interface-4e616d):\n```python\nfrom Arduino import Arduino\nimport time\n\nboard = Arduino()\n\nswitchState = 0\n\nboard.pinMode(3, \"OUTPUT\")\nboard.pinMode(4, \"OUTPUT\")\nboard.pinMode(5, \"OUTPUT\")\nboard.pinMode(2, \"INPUT\")\n\nwhile True:\n    switchState = board.digitalRead(2)\n\n    if switchState == 0:\n        board.digitalWrite(3, \"HIGH\")\n        board.digitalWrite(4, \"LOW\")\n        board.digitalWrite(5, \"LOW\")\n    else:\n        board.digitalWrite(3, \"LOW\")\n        board.digitalWrite(4, \"LOW\")\n        board.digitalWrite(5, \"HIGH\")\n\n        time.sleep(0.25)\n        board.digitalWrite(4, \"HIGH\")\n        board.digitalWrite(5, \"LOW\")\n        time.sleep(0.25)\n```\n\n## Simple Servo Motor Control on pin 9:\n```python\nfrom Arduino import Arduino\nimport time\n\nboard = Arduino()\n\nboard.Servos.attach(9)\n\nwhile True:\n    for pos in range(180):\n        board.Servos.write(9, pos)\n        time.sleep(0.015)\n\n    for pos in range(180):\n        pos = 180 - pos\n\n        board.Servos.write(9, pos)\n        time.sleep(0.015)\n```\n\nFor a collection of examples, see `examples.py`. This file contains methods which replicate\nthe functionality of many Arduino demo sketches.\n\n## Classes\n- `Arduino(baud)` - Set up communication with currently connected and powered\nArduino.\n\n```python\nboard = Arduino(\"115200\") #Example\n```\n\nThe device name / COM port of the connected Arduino will be auto-detected.\nIf there are more than one Arduino boards connected,\nthe desired COM port can be also be passed as an optional argument:\n\n```python\nboard = Arduino(\"115200\", port=\"COM3\") #Windows example\n```\n```python\nboard = Arduino(\"115200\", port=\"/dev/tty.usbmodemfa141\") #OSX example\n```\n\nA time-out for reading from the Arduino can also be specified as an optional\nargument:\n\n```python\nboard = Arduino(\"115200\", timeout=2) #Serial reading functions will\n#wait for no more than 2 seconds\n```\n\n## Methods\n\n**Digital I/O**\n\n- `Arduino.digitalWrite(pin_number, state)` turn digital pin on/off\n- `Arduino.digitalRead(pin_number)` read state of a digital pin\n\n```python\n#Digital read / write example\nboard.digitalWrite(13, \"HIGH\") #Set digital pin 13 voltage\nstate_1 = board.digitalRead(13) #Will return integer 1\nboard.digitalWrite(13, \"LOW\") #Set digital pin 13 voltage\nstate_2 = board.digitalRead(13) #Will return integer 0\n```\n\n- `Arduino.pinMode(pin_number, io_mode)` set pin I/O mode\n- `Arduino.pulseIn(pin_number, state)` measures a pulse\n- `Arduino.pulseIn_set(pin_number, state)` measures a pulse, with preconditioning\n\n```python\n#Digital mode / pulse example\nboard.pinMode(7, \"INPUT\") #Set digital pin 7 mode to INPUT\nduration = board.pulseIn(7, \"HIGH\") #Return pulse width measurement on pin 7\n```\n\n**Analog I/O**\n\n- `Arduino.analogRead(pin_number)` returns the analog value\n- `Arduino.analogWrite(pin_number, value)` sets the analog value\n\n```python\n#Analog I/O examples\nval=board.analogRead(5) #Read value on analog pin 5 (integer 0 to 1023)\nval = val / 4 # scale to 0 - 255\nboard.analogWrite(11) #Set analog value (PWM) based on analog measurement\n```\n\n**Shift Register**\n\n- `Arduino.shiftIn(dataPin, clockPin, bitOrder)` shift a byte in and returns it\n- `Arduino.shiftOut(dataPin, clockPin, bitOrder, value)` shift the given byte out\n\n`bitOrder` should be either `\"MSBFIRST\"` or `\"LSBFIRST\"`\n\n**Servo Library Functionality**\nSupport is included for up to 8 servos.\n\n- `Arduino.Servos.attach(pin, min=544, max=2400)` Create servo instance. Only 8 servos can be used at one time.\n- `Arduino.Servos.read(pin)` Returns the angle of the servo attached to the specified pin\n- `Arduino.Servos.write(pin, angle)` Move an attached servo on a pin to a specified angle\n- `Arduino.Servos.writeMicroseconds(pin, uS)` Write a value in microseconds to the servo on a specified pin\n- `Arduino.Servos.detach(pin)` Detaches the servo on the specified pin\n\n```python\n#Servo example\nboard.Servos.attach(9) #declare servo on pin 9\nboard.Servos.write(9, 0) #move servo on pin 9 to 0 degrees\nprint board.Servos.read(9) # should be 0\nboard.Servos.detach(9) #free pin 9\n```\n\n**Software Serial Functionality**\n\n- `Arduino.SoftwareSerial.begin(ss_rxPin, ss_txPin, ss_device_baud)` initialize software serial device on\nspecified pins.\nOnly one software serial device can be used at a time. Existing software serial instance will\nbe overwritten by calling this method, both in Python and on the Arduino board.\n- `Arduino.SoftwareSerial.write(data)` send data using the Arduino 'write' function to the existing software\nserial connection.\n- `Arduino.SoftwareSerial.read()` returns one byte from the existing software serial connection\n\n```python\n#Software serial example\nboard.SoftwareSerial.begin(0, 7, \"19200\") # Start software serial for transmit only (tx on pin 7)\nboard.SoftwareSerial.write(\" test \") #Send some data\nresponse_char = board.SoftwareSerial.read() #read response character\n```\n\n**EEPROM**\n\n- `Arduino.EEPROM.read(address)` reads a byte from the EEPROM\n- `Arduino.EEPROM.write(address, value)` writes a byte to the EEPROM\n- `Arduino.EEPROM.size()` returns size of the EEPROM\n\n```python\n#EEPROM read and write examples\nlocation = 42\nvalue = 10 # 0-255(byte)\n\nboard.EEPROM.write(location, 10)\nprint(board.EEPROM.read(location))\nprint('EEPROM size {size}'.format(size=board.EEPROM.size()))\n```\n\n**LCD Screen LiquidCrystal Support Library (only supports 1 display currently)**\n\n*See https://www.arduino.cc/en/Reference/LiquidCrystal for reference to the LiquidCrystal library.*\n\n- `Arduino.LCD.LiquidCrystal(rs, en, d4, d5, d6, d7)` Creates an object of type LiquidCrystal.\n- `Arduino.LCD.begin(cols, rows)` Initializes the interface to the LCD screen, and specifies the dimensions of the display.\n- `Arduino.LCD.cleanup()` Deletes LCD object from Arduino system memory\n- `Arduino.LCD.clear()` Clears the LCD screen and positions the cursor in the upper-left corner.\n- `Arduino.LCD.home()` Positions the cursor in the upper-left corner of the LCD.\n- `Arduino.LCD.print(text)` Prints text to the LCD screen.\n- `Arduino.LCD.setCursor(col, row)` Sets the location at which subsequent text written to the LCD will be displayed.\n- `Arduino.LCD.cursor()` Displays the LCD cursor.\n- `Arduino.LCD.noCursor()` Hides the LCD cursor.\n- `Arduino.LCD.blink()` Displays the blinking LCD cursor.\n- `Arduino.LCD.noBlink()` Hides the blinking LCD cursor.\n- `Arduino.LCD.display()` Turns the LCD display on.\n- `Arduino.LCD.noDisplay()` Turns the LCD display off.\n- `Arduino.LCD.scrollDisplayLeft()` Scrolls the contents of the display (text and cursor) one space to the left.\n- `Arduino.LCD.scrollDisplayRight()` Scrolls the contents of the display (text and cursor) one space to the right.\n- `Arduino.LCD.autoscroll()` Turns on automatic scrolling of the LCD.\n- `Arduino.LCD.noAutoscroll()` Turns off automatic scrolling of the LCD.\n- `Arduino.LCD.leftToRight()` Set the direction for text written to the LCD to left-to-right.\n- `Arduino.LCD.rightToLeft()` Set the direction for text written to the LCD to right-to-left.\n\n```python\n#LCD \"Hello World\" and time since start example\n#Ported from https://www.arduino.cc/en/Tutorial/LibraryExamples/HelloWorld\nimport time\nstart_time = time.time()\n\nboard.LCD.LiquidCrystal(12, 11, 5, 4, 3, 2)\nboard.LCD.begin(16, 2)\nboard.LCD.print(\"hello, world!\")\n\nwhile True:\n    board.LCD.setCursor(0, 1)\n\n    board.LCD.print(round(time.time() - start_time))\n```\n\n\n**Misc**\n\n- `Arduino.resetFunc()` Resets the Arduino.\n- `Arduino.close()` Closes serial connection to the Arduino.\n\n## To-do list:\n- Add simple reset functionality that zeros out all pin values\n- Include a wizard which generates 'prototype.ino' with selected serial baud rate and Arduino function support\n(to help reduce memory requirements).\n- Add `write()` and `createChar()` functions for the LCD library.\n- Anything else that I come across that I need will be added here.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pigeonburger/pyArduinoAPI",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyArduinoAPI",
    "package_url": "https://pypi.org/project/pyArduinoAPI/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyArduinoAPI/",
    "project_urls": {
      "Homepage": "https://github.com/pigeonburger/pyArduinoAPI"
    },
    "release_url": "https://pypi.org/project/pyArduinoAPI/0.8.2/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": "",
    "summary": "A light-weight Python library that provides a serial   bridge for communicating with Arduino microcontroller boards. Extended to work with Python 3",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11155253,
  "releases": {
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0f21c7ba1c51d3d537054c0a536179862ab353ba864921f4648d067407e164a",
          "md5": "e68311e56602e46cdae003da1453bd44",
          "sha256": "c9b44e61cf6e4504e5cd748fdd4bec2159aae8c243dd7de9e9ed6c628f900d37"
        },
        "downloads": -1,
        "filename": "pyArduinoAPI-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e68311e56602e46cdae003da1453bd44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10896,
        "upload_time": "2021-08-11T03:33:07",
        "upload_time_iso_8601": "2021-08-11T03:33:07.479889Z",
        "url": "https://files.pythonhosted.org/packages/e0/f2/1c7ba1c51d3d537054c0a536179862ab353ba864921f4648d067407e164a/pyArduinoAPI-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "696cf0316ae5c0fe41581fc8e894c425f7616815ac063f8d81f6036f042aca11",
          "md5": "b55b4c5a1e16f4323e7813b3d7ae2bd5",
          "sha256": "86c39b618552cdc328f822c0b19d3b190f2f59c6cedf70440cda1b85496d62a2"
        },
        "downloads": -1,
        "filename": "pyArduinoAPI-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b55b4c5a1e16f4323e7813b3d7ae2bd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11052,
        "upload_time": "2021-08-11T22:15:29",
        "upload_time_iso_8601": "2021-08-11T22:15:29.925864Z",
        "url": "https://files.pythonhosted.org/packages/69/6c/f0316ae5c0fe41581fc8e894c425f7616815ac063f8d81f6036f042aca11/pyArduinoAPI-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9f669d1b27502fe5dab9cb143afc72027b01962d8cb70cfd61dfb692240654d",
          "md5": "333c3a5588db4e13010e61863392d52b",
          "sha256": "af6fedc8b746866008bf5f23311b21dae7a5af9431934f946ce8970414ea4aff"
        },
        "downloads": -1,
        "filename": "pyArduinoAPI-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "333c3a5588db4e13010e61863392d52b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10911,
        "upload_time": "2021-08-11T22:15:32",
        "upload_time_iso_8601": "2021-08-11T22:15:32.334792Z",
        "url": "https://files.pythonhosted.org/packages/c9/f6/69d1b27502fe5dab9cb143afc72027b01962d8cb70cfd61dfb692240654d/pyArduinoAPI-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dba0f0646cdfbec34b56336511893eb93621a00382225ffcbd86ab824cbb998a",
          "md5": "f27f98de8e45bfe186aa051450c4dae8",
          "sha256": "c42c0ef352de6e6da437dabc9e9586107f36ca49c8deef98ab58b65209e5c211"
        },
        "downloads": -1,
        "filename": "pyArduinoAPI-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f27f98de8e45bfe186aa051450c4dae8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11054,
        "upload_time": "2021-08-11T22:39:57",
        "upload_time_iso_8601": "2021-08-11T22:39:57.421149Z",
        "url": "https://files.pythonhosted.org/packages/db/a0/f0646cdfbec34b56336511893eb93621a00382225ffcbd86ab824cbb998a/pyArduinoAPI-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65a481cccb8581c7fa38bbd3c8218375b8c6db876311a35aa34dcc0be454a6d3",
          "md5": "2bf0d252006e788a485603cea9a1d8db",
          "sha256": "fb01c9db6d7bfa114669ad1e219448af97b303c5ba347cae08d28d00f5c77130"
        },
        "downloads": -1,
        "filename": "pyArduinoAPI-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2bf0d252006e788a485603cea9a1d8db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10907,
        "upload_time": "2021-08-11T22:39:59",
        "upload_time_iso_8601": "2021-08-11T22:39:59.547985Z",
        "url": "https://files.pythonhosted.org/packages/65/a4/81cccb8581c7fa38bbd3c8218375b8c6db876311a35aa34dcc0be454a6d3/pyArduinoAPI-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dba0f0646cdfbec34b56336511893eb93621a00382225ffcbd86ab824cbb998a",
        "md5": "f27f98de8e45bfe186aa051450c4dae8",
        "sha256": "c42c0ef352de6e6da437dabc9e9586107f36ca49c8deef98ab58b65209e5c211"
      },
      "downloads": -1,
      "filename": "pyArduinoAPI-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f27f98de8e45bfe186aa051450c4dae8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11054,
      "upload_time": "2021-08-11T22:39:57",
      "upload_time_iso_8601": "2021-08-11T22:39:57.421149Z",
      "url": "https://files.pythonhosted.org/packages/db/a0/f0646cdfbec34b56336511893eb93621a00382225ffcbd86ab824cbb998a/pyArduinoAPI-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65a481cccb8581c7fa38bbd3c8218375b8c6db876311a35aa34dcc0be454a6d3",
        "md5": "2bf0d252006e788a485603cea9a1d8db",
        "sha256": "fb01c9db6d7bfa114669ad1e219448af97b303c5ba347cae08d28d00f5c77130"
      },
      "downloads": -1,
      "filename": "pyArduinoAPI-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2bf0d252006e788a485603cea9a1d8db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10907,
      "upload_time": "2021-08-11T22:39:59",
      "upload_time_iso_8601": "2021-08-11T22:39:59.547985Z",
      "url": "https://files.pythonhosted.org/packages/65/a4/81cccb8581c7fa38bbd3c8218375b8c6db876311a35aa34dcc0be454a6d3/pyArduinoAPI-0.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}