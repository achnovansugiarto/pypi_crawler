{
  "info": {
    "author": "DARPA D3M Program",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "[![PyPI](https://img.shields.io/pypi/v/d3m-automl-rpc)](https://pypi.org/project/d3m-automl-rpc/)\n\n# D3M AutoML RPC\n\nThis repository contains an AutoML API protocol specification and implementation using\n[gRPC](http://grpc.io/).\nThe API allows a client to request from an AutoML system to start a pipeline search process, using\nan optional pipeline template, and after candidate pipelines are found the client\ncan request scoring, fitting, or producing data through a pipeline.\n\nThe gRPC protocol specification can be automatically compiled into implementations\nfor multiple programming languages.\nSee below for more information and the [Quickstart](http://grpc.io/docs/quickstart/) for details\nabout gRPC.\n\n## API Structure\n\nD3M AutoML RPC calls are defined in the *core* gRPC service which can be found in [`core.proto`](https://gitlab.com/datadrivendiscovery/automl-rpc/-/blob/devel/core.proto) file\nand AutoML systems are expected implement it and support it. Other `.proto` files provide definitions\nof additional standard messages.\n\nUseful utilities for working with the D3M AutoML API in Python are available in the included [d3m_automl_rpc](https://gitlab.com/datadrivendiscovery/automl-rpc/tree/dist-python) package.\n\n![Diagram of the overall flow of the API](https://gitlab.com/datadrivendiscovery/automl-rpc/-/raw/devel/flow.png)\n\n## gRPC compilation\n\ngRPC provides tooling to compile protocol specification into various target languages. Examples follow.\n\n### Go setup\n\nTo set up gRPC and Protocol Buffers in Go run:\n\n```\ngo get -u github.com/golang/protobuf/proto\ngo get -u github.com/golang/protobuf/protoc-gen-go\ngo get -u google.golang.org/grpc\n```\nNext install protocol buffer compiler:\n\nLinux\n\n```bash\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip\nunzip protoc-3.3.0-linux-x86_64.zip -d protoc3\nsudo cp protoc3/bin/protoc /usr/bin/protoc\nsudo cp -r protoc3/include /usr/local\n```\n\nOSX\n\n```bash\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-osx-x86_64.zip\nunzip protoc-3.3.0-osx-x86_64.zip -d protoc3\nsudo cp protoc3/bin/protoc /usr/bin/protoc\nsudo cp -r protoc3/include /usr/local\n```\n\nCompile the `.proto` file:\n\n```\nprotoc -I /usr/local/include -I . core.proto --go_out=plugins=grpc:.\n```\n\nThe resulting `core.pb.go` file implements the messaging protocol, client and server.\n\n**Note**: The CI process will automatically build and publish the corresponding `.go` files on a branch called `dist-golang` for the current master version, and `dev-dist-golang` for the current dev version.  These generated files can be included in a project by passing the branch/commit hash associated with the `dist` branch to the `go get` command / `go.mod` entry.\n\n### Python setup\n\nInstall libraries and tools via pip:\n\n```\npython -m pip install grpcio --ignore-installed\npython -m pip install grpcio-tools\n```\n\nCompile the `.proto` file:\n\n```\npython -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. core.proto\n```\n\nThe created `core_pb2.py` file implements the messaging protocol, and `core_pb2_grpc.py` implements the client and server.\n\nAlternatively, you can install the [latest release from PyPI](https://pypi.org/project/d3m-automl-rpc/): `pip install d3m-automl-rpc`\n\n### Javascript/Node.js setup\n\nUse `npm` to get gRPC and Protocol Buffer packages:\n\n```\nnpm install grpc\nnpm install google-protobuf\n```\n\nJust as with Go installation, need to install protocol buffer compiler:\n\nLinux\n\n```bash\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip\nunzip protoc-3.3.0-linux-x86_64.zip -d protoc3\nsudo mv protoc3/bin/protoc /usr/bin/protoc\nsudo cp -r protoc3/include /usr/local\n```\n\nOSX\n\n```bash\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-osx-x86_64.zip\nunzip protoc-3.3.0-osx-x86_64.zip -d protoc3\nsudo mv protoc3/bin/protoc /usr/bin/protoc\nsudo cp -r protoc3/include /usr/local\n```\n\nCompile the `.proto` file:\n\n```\nprotoc -I /usr/local/include -I . core.proto --js_out=import_style=commonjs,binary:.\n```\n\nThe resulting `core_pb.js` file implements the messaging protocol, client and server.\n\n## Pipelines\n\nAPI is centered around a concept of a pipeline. Pipelines are described using a shared\n[D3M pipeline language](https://gitlab.com/datadrivendiscovery/metalearning). Pipeline\ndescriptions are used in two places:\n\n* To describe a pipeline template provided to an AutoML system.\n* To describe resulting pipelines found by the AutoML system to the client.\n\nGenerally, pipelines always have Dataset container value as input (currently only\none) and predictions as output. This is the only pipeline an AutoML system is expected to search.\nBut clients can fully specify any pipeline for the AutoML system to execute without any search\n(including a pipeline of just one primitive).\n\nIf pipelines have the associated problem description provided, then this should\napply to the data at the beginning of the pipeline.  This is especially relevant\nfor partially specified pipelines; the problem description for a partially\nspecified pipeline should describe the data at the beginning of the pipeline,\nnot the end of the specified portion.\n\n### Pipeline templates\n\nPipeline templates are based on pipeline description with few differences:\n\n* Templates can accept *multiple* Dataset container values as inputs.\n* There is a special *placeholder pipeline step* which signals where in the pipeline\n  template an AutoML system should insert a standard pipeline it finds.\n* Not all fields in the pipeline description are reasonable (they will be filled out by the AutoML system).\n  Those differences are explained through comments in the [`pipeline.proto`](https://gitlab.com/datadrivendiscovery/automl-rpc/-/blob/devel/pipeline.proto).\n\nA placeholder pipeline step is replaced with a sub-pipeline during pipeline search to form\nfinal pipeline.\n\n### Pipeline template restrictions\n\nWhile the pipeline template language does not restrict the use of a placeholder step, for\nmaximizing compatibility between clients and AutoML systems, you may assume the following limitations:\n\n* There can be only one placeholder step in a pipeline template, at the top-level of a pipeline (not inside a sub-pipeline).\n* The placeholder step has to have only one input, a Dataset container value, and one output,\n  predictions as a Pandas dataframe. In this way it resembles a standard pipeline.\n* The placeholder can be only the last step in the pipeline.\n* All primitive steps should have all their hyper-parameters fixed (see also `use_default_values_for_free_hyperparams`\n  flag to control this requirement).\n\nThese restrictions effectively mean that a pipeline template can only specify a directed acyclic graph of preprocessing\nprimitives that transforms one or more input Dataset container values into a *single* transformed\nDataset container value, which is the input to the placeholder step (and future sub-pipeline in its place).\nThere are no additional restrictions on the types of individual primitives that can be used within the\npipeline template, although impact on downstream AutoML system processing should be assessed before a given\nprimitive is used.\n\nIndividual systems can relax those restrictions. For example, they might allow a placeholder step to\nhave postprocessing primitive steps after it. In this case postprocessing\nprimitives can only transform predictions from a placeholder step into transformed predictions.\nOr individual systems might allow primitive steps to have free hyper-parameters an AutoML system\nshould tune (see `use_default_values_for_free_hyperparams` flag to potentially control this behavior).\nWe expect that some AutoML systems will be able to work with those relaxed requirements, and\nclients can use those if available, but it is not expected that every AutoML system will.\n\n### Fully specified pipelines\n\nClients can also provide a fully specified pipeline in the `SearchSolutions`. This is a pipeline description\nwhich does not have any placeholder step and have all hyper-parameters fixed.\n\nFor fully specified pipelines with fixed hyper-parameters, the AutoML system will just check that the given\npipeline is valid and return it for it to be directly executed (scored, fitted, called to\nproduce data). This allows fixed computations to be done on data, for example, the pipeline\ncan consist of only one primitive with fixed hyper-parameters to execute that one primitive.\nMoreover, such fully specified pipelines with fixed hyper-parameters can have any\ninputs and any outputs. (Standard pipelines are from a Dataset container value\nto predictions Pandas dataframe.) When non-Dataset inputs are provided, AutoML systems should attempt\nto convert input value to closest container type value, e.g., gRPC `RAW` list value should\nbe converted to `d3m.container.List` with generated metadata, CSV file read as Pandas\nDataFrame should be converted to `d3m.container.DataFrame` with generated metadata.\n\nIndividual systems can also support pipelines with all primitives specified,\nbut with free (available for tuning) hyper-parameters. In this case, the AutoML system will only tune\nhyper-parameters and resulting pipelines will have the same structure as given pipeline,\nbut hyper-parameter configuration will differ. If such potential behavior of a system is\nnot desired, a `use_default_values_for_free_hyperparams` flag can be set to true.\n\n## Values\n\nSome messages contain data values which can be passed between the client and the AutoML system. There are\nmultiple ways those values can be passed and they are listed in the [`value.proto`](https://gitlab.com/datadrivendiscovery/automl-rpc/-/blob/devel/value.proto)\nfile:\n\n* Put simple raw values directly in the message.\n* If a value is a Dataset container value, read or write it through a dataset URI.\n* Value can also be Python-pickled and stored at a URI or given directly in the message.\n* If value is a tabular container value, it can also be stored as a CSV file.\n* Value can be stored into a shared [Plasma store](https://arrow.apache.org/docs/python/plasma.html),\n  in which case value is represented by its Plasma ObjectID.\n\nBecause not all systems can or are willing to support all ways to pass the value, and we can\nextend them in the future, API supports signaling which value types are\nallowed/supported through `Hello` call.\n\n## Example call flows\n\n### Basic pipeline search\n\nBelow is an example call flow in which a client initiates a pipeline search request without any\npreprocessing or postprocessing, and the AutoML system returns two pipelines through a series of streamed\nresponses. Responses for multiple pipelines are transmitted each using one gRPC stream and can be\ninterleaved. Client then requests scores for one.\n\n```mermaid\nsequenceDiagram\n  participant Client\n  participant ScoreSolution\n  participant SearchSolutions\n  Client->>SearchSolutions: SearchSolutionsRequest\n  SearchSolutions-->>Client: SearchSolutionsResponse { search_id = 057cf5... }\n  Client->>+SearchSolutions: GetSearchSolutionsResults(GetSearchSolutionsResultsRequest)\n  SearchSolutions-->>Client: GetSearchSolutionsResultsResponse { solution_id = a5d78d... }\n  SearchSolutions-->>Client: GetSearchSolutionsResultsResponse { solution_id = b6d5e2... }\n  Client->>ScoreSolution: ScoreSolutionRequest { a5d78d... }\n  ScoreSolution-->>Client: ScoreSolutionResponse { request_id = 1d9193... }\n  Client->>+ScoreSolution: GetScoreSolutionResults(GetScoreSolutionResultsRequest)\n  ScoreSolution-->>Client: ScoreSolutionResultsResponse { progress = PENDING }\n  ScoreSolution-->>Client: ScoreSolutionResultsResponse { progress = RUNNING }\n  ScoreSolution-->>Client: ScoreSolutionResultsResponse { progress = COMPLETED, scores }\n  ScoreSolution-->>-Client: (ScoreSolution stream ends)\n  Client->>SearchSolutions: EndSearchSolutions(EndSearchSolutionsRequest)\n  SearchSolutions-->>Client: EndSearchSolutionsResponse\n  SearchSolutions-->>-Client: (GetFoundSolutions stream ends)\n```\n\n```\n1. Client: SearchSolutions(SearchSolutionsRequest) // problem = {...}, template = {...}, inputs = [dataset_uri]\n2. Server: SearchSolutionsResponse // search_id = 057cf581-5d5e-48b2-8867-db72e7d1381d\n3. Client: GetSearchSolutionsResults(GetSearchSolutionsResultsRequest) // search_id = 057cf581-5d5e-48b2-8867-db72e7d1381d\n[SEARCH SOLUTIONS STREAM BEGINS]\n4. Server: GetSearchSolutionsResultsResponse // progress = PENDING\n5. Server: GetSearchSolutionsResultsResponse // progress = RUNNING, solution_id = 5b08f87a-8393-4fa4-95be-91a3e587fe54, internal_score = 0.6, done_ticks = 0.5, all_ticks = 1.0\n6. Server: GetSearchSolutionsResultsResponse // progress = RUNNING, solution_id = 95de692f-ea81-4e7a-bef3-c01f18281bc0, internal_score = 0.8, done_ticks = 1.0, all_ticks = 1.0\n7. Server: GetSearchSolutionsResultsResponse // progress = COMPLETED\n[SEARCH SOLUTIONS STREAM ENDS]\n8. Client: ScoreSolution(ScoreSolutionRequest) // solution_id = 95de692f-ea81-4e7a-bef3-c01f18281bc0, inputs = [dataset_uri], performance_metrics = [ACCURACY]\n9. Server: ScoreSolutionResponse // request_id = 5d919354-4bd3-4155-9295-406d8c02b915\n10. Client: GetScoreSolutionResults(GetScoreSolutionResultsRequest) // request_id = 5d919354-4bd3-4155-9295-406d8c02b915\n[SCORE SOLUTION STREAM BEGINS]\n11. Server: GetScoreSolutionResultsResponse // progress = PENDING\n12. Server: GetScoreSolutionResultsResponse // progress = RUNNING\n13. Server: GetScoreSolutionResultsResponse // progress = COMPLETED, scores = [0.9]\n[SCORE SOLUTION STREAM END]\n14. Client: EndSearchSolutions(EndSearchSolutionsRequest) // search_id = 057cf581-5d5e-48b2-8867-db72e7d1381d\n15. Server: EndSearchSolutionsResponse\n```\n\n### Pass-through execution of a primitive\n\nExample call flow for a client calling one primitive on a dataset and storing transformed dataset into a\nPlasma store where it can efficiently access it using memory sharing and display it to the user.\nEven if the primitive is just a transformation and fitting is not necessary, the client has to fit a solution\nbefore it is able to call produce.\n\nThis example has as an input dataset and as the output dataset as well. This is different from regular\npipelines which take dataset as input and produce predictions as output. The reason is that the\npipeline is full specified by a client so inputs and outputs can be anything.\n\n```\n1. Client: SearchSolutions(SearchSolutionsRequest) // problem = {...}, template = {...}, inputs = [dataset_uri]\n2. Server: SearchSolutionsResponse // search_id = ae4de7f4-4435-4d86-834b-c183ef85f2d0\n3. Client: GetSearchSolutionsResults(GetSearchSolutionsResultsRequest) // search_id = ae4de7f4-4435-4d86-834b-c183ef85f2d0\n[SEARCH SOLUTIONS STREAM BEGINS]\n4. Server: GetSearchSolutionsResultsResponse // progress = PENDING\n5. Server: GetSearchSolutionsResultsResponse // progress = RUNNING, solution_id = 619e09ee-ccf5-4bd2-935d-41094169b0c5, internal_score = NaN, done_ticks = 1.0, all_ticks = 1.0\n6. Server: GetSearchSolutionsResultsResponse // progress = COMPLETED\n[SEARCH SOLUTIONS STREAM ENDS]\n7. Client: FitSolution(FitSolutionRequest) // solution_id = 619e09ee-ccf5-4bd2-935d-41094169b0c5, inputs = [dataset_uri]\n8. Server: FitSolutionResponse // request_id = e7fe4ef7-8b3a-4365-9fc4-c1a8228c509c\n9. Client: GetFitSolutionResults(GetFitSolutionResultsRequest) // request_id = e7fe4ef7-8b3a-4365-9fc4-c1a8228c509c\n[FIT SOLUTION STREAM BEGINS]\n10. Server: GetFitSolutionResultsResponse // progress = PENDING\n11. Server: GetFitSolutionResultsResponse // progress = RUNNING\n12. Server: GetFitSolutionResultsResponse // progress = COMPLETED, fitted_solution_id = 88d627a4-e4ca-4b1a-9f2e-af9c54dfa860\n[FIT SOLUTION STREAM END]\n13. Client: ProduceSolution(ProduceSolutionRequest) // fitted_solution_id = 88d627a4-e4ca-4b1a-9f2e-af9c54dfa860, inputs = [dataset_uri], expose_outputs = [\"outputs.0\"], expose_value_types = [PLASMA_ID]\n14. Server: ProduceSolutionResponse // request_id = 954b19cc-13d4-4c2a-a98f-8c15498014ac\n15. Client: GetProduceSolutionResults(GetProduceSolutionResultsRequest) // request_id = 954b19cc-13d4-4c2a-a98f-8c15498014ac\n[PRODUCE SOLUTION STREAM BEGINS]\n16. Server: GetProduceSolutionResultsResponse // progress = PENDING\n17. Server: GetProduceSolutionResultsResponse // progress = RUNNING, steps = [progress = PENDING]\n18. Server: GetProduceSolutionResultsResponse // progress = RUNNING, steps = [progress = RUNNING]\n19. Server: GetProduceSolutionResultsResponse // progress = RUNNING, steps = [progress = COMPLETED]\n20. Server: GetProduceSolutionResultsResponse // progress = COMPLETED, steps = [progress = COMPLETED], exposed_outputs = {\"outputs.0\": ObjectID(6811fc1154520d677d58b01a51b47036d5a408a8)}\n[PRODUCE SOLUTION STREAM END]\n21. Client: EndSearchSolutions(EndSearchSolutionsRequest) // search_id = ae4de7f4-4435-4d86-834b-c183ef85f2d0\n22. Server: EndSearchSolutionsResponse\n```\n\n`template` used above could look like (with message shown in JSON):\n\n```json\n{\n  \"inputs\": [\n    {\n      \"name\": \"dataset\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"name\": \"dataset\",\n      \"data\": \"step.0.produce\"\n    }\n  ],\n  \"steps\": [\n    {\n      \"primitive\": {\n        \"id\": \"f5c2f905-b694-4cf9-b8c3-7cd7cf8d6acf\"\n      },\n      \"arguments\": {\n        \"inputs\": {\n          \"data\": \"inputs.0\"\n        }\n      },\n      \"outputs\": [\n        {\n          \"id\": \"produce\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Standard port\n\nA standard port for D3M AutoML API on which AutoML systems should listen for connections is 45042.\n\nIt is expected that TA2 systems read the `D3MPORT` environment variable if present and listen on that port instead.\n\n## Protocol version\n\nTo support easier debugging `SearchSolutionsRequest` and `SearchSolutionsResponse` messages contain a version of the protocol\nused by each party. This can serve to easier understand a potential problem by detecting a version mismatch.\n\nFor this to work, `version` field has to be populated from the value stored in the protocol specification itself.\nWe use [custom options](https://developers.google.com/protocol-buffers/docs/proto#customoptions) for this.\nTo retrieve the version from the protocol specification, you can do the following in Python:\n\n```python\nimport core_pb2\nversion = core_pb2.DESCRIPTOR.GetOptions().Extensions[core_pb2.protocol_version]\n```\n\nIn Go, accessing version is slightly more involved and it is described\n[here](https://gitlab.com/datadrivendiscovery/automl-rpc/snippets/1684616).\n\n## Extensions of messages\n\ngRPC and Protocol Buffers support a simple method of extending messages: just define extra fields with custom tags\nin your local version of the protocol. Users for this protocol can do that to experiment with variations of the protocol (and if\nchanges work out, they can submit a merge request for those changes to be included into this specification).\nTo make sure such unofficial fields in messages do not conflict between performers, use values from the\n[allocated tag ranges](https://gitlab.com/datadrivendiscovery/automl-rpc/-/blob/devel/private_tag_ranges.txt) for your organization, or add your organization via a\nmerge request.\n\n## Changelog\n\nSee [HISTORY.md](https://gitlab.com/datadrivendiscovery/automl-rpc/-/blob/devel/HISTORY.md) for summary of changes to the API.\n\n## Repository structure\n\n`master` branch contains latest stable release of the D3M AutoML RPC API specification.\n`devel` branch is a staging branch for the next release.\n\nReleases are [tagged](https://gitlab.com/datadrivendiscovery/automl-rpc/-/tags).\n\nAt every commit to `master` and `devel` branches we compile `.proto` files and push\ncompiled files to `dist-*` and `dev-dist-*` branches for multiple languages. You can use those\nbranches in your projects directly using `git submodule` or some other similar mechanism.\n\n## Contributing\n\nSee [contributing guide](https://gitlab.com/datadrivendiscovery/automl-rpc/-/blob/devel/CONTRIBUTING.md) for more information how to contribute to the API development.\n\n## About Data Driven Discovery Program\n\nDARPA Data Driven Discovery (D3M) Program is researching ways to get machines to build\nmachine learning pipelines automatically. It is split into three layers:\nTA1 (primitives), TA2 (systems which combine primitives automatically into pipelines\nand executes them), and TA3 (end-users interfaces).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/datadrivendiscovery/automl-rpc",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "d3m-automl-rpc",
    "package_url": "https://pypi.org/project/d3m-automl-rpc/",
    "platform": null,
    "project_url": "https://pypi.org/project/d3m-automl-rpc/",
    "project_urls": {
      "Homepage": "https://gitlab.com/datadrivendiscovery/automl-rpc"
    },
    "release_url": "https://pypi.org/project/d3m-automl-rpc/1.2.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "gRPC protocol for the AutoML communication.",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14288357,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07c975106c54a0f671bd19ca03c36bc29423243727fa375038888fd9f2af3020",
          "md5": "926453df1e72cda763c9f34492f6f538",
          "sha256": "26af6adb9adeeaffb5034ec5025ecbdeae7c45cf17ad3593f0fe176b25e0bf69"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "926453df1e72cda763c9f34492f6f538",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7472,
        "upload_time": "2020-10-27T19:22:27",
        "upload_time_iso_8601": "2020-10-27T19:22:27.632783Z",
        "url": "https://files.pythonhosted.org/packages/07/c9/75106c54a0f671bd19ca03c36bc29423243727fa375038888fd9f2af3020/d3m-automl-rpc-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba60d15ad1a8c8dfd7dfff27714c5e5eb7f10537b67b389a0c6d39d3517094a6",
          "md5": "ad03493f84c66640df6b83c74f816499",
          "sha256": "56dc1ababe4d9c247a04d936a4df0be2849fdb561803f4516b6d356395531dc5"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad03493f84c66640df6b83c74f816499",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46865,
        "upload_time": "2020-12-03T05:43:01",
        "upload_time_iso_8601": "2020-12-03T05:43:01.686993Z",
        "url": "https://files.pythonhosted.org/packages/ba/60/d15ad1a8c8dfd7dfff27714c5e5eb7f10537b67b389a0c6d39d3517094a6/d3m_automl_rpc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c4f474bb72381cb590dcbff8e078ce451aef65cbcabc47cf7fb3ca9020949f",
          "md5": "639fe098a5dbe57de4811bee63e3458c",
          "sha256": "931ab2f8ca5b5cc5d9c3250b4a7f23743317b50d19dbd9b6ecb297b26ad9db6a"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "639fe098a5dbe57de4811bee63e3458c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43405,
        "upload_time": "2021-08-16T15:04:01",
        "upload_time_iso_8601": "2021-08-16T15:04:01.086803Z",
        "url": "https://files.pythonhosted.org/packages/32/c4/f474bb72381cb590dcbff8e078ce451aef65cbcabc47cf7fb3ca9020949f/d3m_automl_rpc-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "110fa07ab1bad0b083a05876012caacd29f44f5bff5197308626a055927a78a8",
          "md5": "e3f4b6a5468a822942e53c1fe2f7597a",
          "sha256": "73600cd49869717d839e500c37f7d5b2dc7a60ede380cb6290403ca4be1653c8"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e3f4b6a5468a822942e53c1fe2f7597a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48327,
        "upload_time": "2021-08-16T15:03:24",
        "upload_time_iso_8601": "2021-08-16T15:03:24.119140Z",
        "url": "https://files.pythonhosted.org/packages/11/0f/a07ab1bad0b083a05876012caacd29f44f5bff5197308626a055927a78a8/d3m-automl-rpc-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b4b9fb7f967b18f35b6b9e8e13e1b343797d1d5fd43e887a045789628019800",
          "md5": "f1300c5869d1992970c9cf8a4ea186d3",
          "sha256": "75c412be5367852c5146c435ebb9e7b3424aa05fba30a76a231effd37785e495"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1300c5869d1992970c9cf8a4ea186d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43405,
        "upload_time": "2021-12-19T22:08:03",
        "upload_time_iso_8601": "2021-12-19T22:08:03.065072Z",
        "url": "https://files.pythonhosted.org/packages/1b/4b/9fb7f967b18f35b6b9e8e13e1b343797d1d5fd43e887a045789628019800/d3m_automl_rpc-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d4e9afca5865be8d90401afd8987a621273ad29bf3b3c54f74a8235b5e40c02",
          "md5": "112f233f671fb7a61ae7d0416a2897b6",
          "sha256": "58a464609ae2716de8a3e187222fe718bd40cb932423da8ca73abe92fc0b9ae7"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "112f233f671fb7a61ae7d0416a2897b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48332,
        "upload_time": "2021-12-19T22:07:52",
        "upload_time_iso_8601": "2021-12-19T22:07:52.863378Z",
        "url": "https://files.pythonhosted.org/packages/7d/4e/9afca5865be8d90401afd8987a621273ad29bf3b3c54f74a8235b5e40c02/d3m-automl-rpc-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c1f5ceb22e107be82d389ee934cf89d77a4594b4e7f485cb3b147e5c41a2600",
          "md5": "26b9d8f0a20d82851ef06498819b5f05",
          "sha256": "d3166a533f73e0f56f9219db60ae54a2c6a3e4db010a907ef62600caa87c16a3"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26b9d8f0a20d82851ef06498819b5f05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34791,
        "upload_time": "2022-03-28T18:58:10",
        "upload_time_iso_8601": "2022-03-28T18:58:10.533086Z",
        "url": "https://files.pythonhosted.org/packages/4c/1f/5ceb22e107be82d389ee934cf89d77a4594b4e7f485cb3b147e5c41a2600/d3m_automl_rpc-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10574d2891573d3d7408d5b55a875a9793a9b31db578564af22b189e925fcdec",
          "md5": "3a0a9d5a31aaf2ec67f264ec5198d5cd",
          "sha256": "d1ddbacb1f18fba85fd08080a69574c18994f5b7ae061c4adfd4a89b39ee436c"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a0a9d5a31aaf2ec67f264ec5198d5cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39981,
        "upload_time": "2022-03-28T18:58:06",
        "upload_time_iso_8601": "2022-03-28T18:58:06.009567Z",
        "url": "https://files.pythonhosted.org/packages/10/57/4d2891573d3d7408d5b55a875a9793a9b31db578564af22b189e925fcdec/d3m-automl-rpc-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5afd787d667c3f5782b055aa8de21af3465e763387c3451b79b1a33c34c6538c",
          "md5": "c3d58067e17b856d5312553e389532c6",
          "sha256": "35d4735e599388fc1646b4d5165ba5c6b86ba880158abb007cf63ac2387c88c0"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3d58067e17b856d5312553e389532c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34787,
        "upload_time": "2022-04-26T15:34:02",
        "upload_time_iso_8601": "2022-04-26T15:34:02.726512Z",
        "url": "https://files.pythonhosted.org/packages/5a/fd/787d667c3f5782b055aa8de21af3465e763387c3451b79b1a33c34c6538c/d3m_automl_rpc-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "845d775552f435c140e0aa6fd7e1e24f2e6444fd2d059a627d300cbaeb5dbff1",
          "md5": "73e353ea5ff8e7ca786d60cd602b1d57",
          "sha256": "1dde42f92c1e15ef2064b9d46effda2345328a889cedf9ebbc52af7d764dac23"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "73e353ea5ff8e7ca786d60cd602b1d57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39986,
        "upload_time": "2022-04-26T15:33:57",
        "upload_time_iso_8601": "2022-04-26T15:33:57.351922Z",
        "url": "https://files.pythonhosted.org/packages/84/5d/775552f435c140e0aa6fd7e1e24f2e6444fd2d059a627d300cbaeb5dbff1/d3m-automl-rpc-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ee462852c1427b338696ab8a9ea682811d19a7302095f607f2893cbe5a2f748",
          "md5": "780e3ead09b418e43527819bba28015e",
          "sha256": "43c0f79a68d9ee6174f46a748097d3a7ad588a1ff27fa73f78accf7b3e4b562c"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "780e3ead09b418e43527819bba28015e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34791,
        "upload_time": "2022-05-05T02:22:01",
        "upload_time_iso_8601": "2022-05-05T02:22:01.122374Z",
        "url": "https://files.pythonhosted.org/packages/4e/e4/62852c1427b338696ab8a9ea682811d19a7302095f607f2893cbe5a2f748/d3m_automl_rpc-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bd42440d92fa6fab976810b820857bd9adadf23f6268e8093e21015824b5e8e",
          "md5": "2bf0f5479cb5cb2e26a6725a707a0711",
          "sha256": "f2271482749b31657f2e7e9bcf9720262f190c58a13112f3cd4c916ca8a2aed8"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2bf0f5479cb5cb2e26a6725a707a0711",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39985,
        "upload_time": "2022-05-05T02:21:53",
        "upload_time_iso_8601": "2022-05-05T02:21:53.555453Z",
        "url": "https://files.pythonhosted.org/packages/8b/d4/2440d92fa6fab976810b820857bd9adadf23f6268e8093e21015824b5e8e/d3m-automl-rpc-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62cf7db317ddb1d10dbc4ee201a1c66d309948de34c1268070a9b58e947375d5",
          "md5": "35f5635a799bcebad3fcf094dae37465",
          "sha256": "1ad38727509a96ace32c688cd3506b0eb3509744447530381598adbdbe838b22"
        },
        "downloads": -1,
        "filename": "d3m_automl_rpc-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35f5635a799bcebad3fcf094dae37465",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34799,
        "upload_time": "2022-06-29T19:56:32",
        "upload_time_iso_8601": "2022-06-29T19:56:32.378690Z",
        "url": "https://files.pythonhosted.org/packages/62/cf/7db317ddb1d10dbc4ee201a1c66d309948de34c1268070a9b58e947375d5/d3m_automl_rpc-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2aee3002388720a1cf0c2027506d0675554a5a0ba3a870d2edca95a56dfb16",
          "md5": "341b718c68711b583b6a89fc50aad099",
          "sha256": "3720822b6cd73a84ad4667349e8cb103d6ef84cf435f4dd1c529908b2f38f5f7"
        },
        "downloads": -1,
        "filename": "d3m-automl-rpc-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "341b718c68711b583b6a89fc50aad099",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40009,
        "upload_time": "2022-06-29T19:56:25",
        "upload_time_iso_8601": "2022-06-29T19:56:25.974881Z",
        "url": "https://files.pythonhosted.org/packages/ff/2a/ee3002388720a1cf0c2027506d0675554a5a0ba3a870d2edca95a56dfb16/d3m-automl-rpc-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62cf7db317ddb1d10dbc4ee201a1c66d309948de34c1268070a9b58e947375d5",
        "md5": "35f5635a799bcebad3fcf094dae37465",
        "sha256": "1ad38727509a96ace32c688cd3506b0eb3509744447530381598adbdbe838b22"
      },
      "downloads": -1,
      "filename": "d3m_automl_rpc-1.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35f5635a799bcebad3fcf094dae37465",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34799,
      "upload_time": "2022-06-29T19:56:32",
      "upload_time_iso_8601": "2022-06-29T19:56:32.378690Z",
      "url": "https://files.pythonhosted.org/packages/62/cf/7db317ddb1d10dbc4ee201a1c66d309948de34c1268070a9b58e947375d5/d3m_automl_rpc-1.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff2aee3002388720a1cf0c2027506d0675554a5a0ba3a870d2edca95a56dfb16",
        "md5": "341b718c68711b583b6a89fc50aad099",
        "sha256": "3720822b6cd73a84ad4667349e8cb103d6ef84cf435f4dd1c529908b2f38f5f7"
      },
      "downloads": -1,
      "filename": "d3m-automl-rpc-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "341b718c68711b583b6a89fc50aad099",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40009,
      "upload_time": "2022-06-29T19:56:25",
      "upload_time_iso_8601": "2022-06-29T19:56:25.974881Z",
      "url": "https://files.pythonhosted.org/packages/ff/2a/ee3002388720a1cf0c2027506d0675554a5a0ba3a870d2edca95a56dfb16/d3m-automl-rpc-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}