{
  "info": {
    "author": "Ashish Yadav",
    "author_email": "ashugodhai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Void API | Docs\n\n\n\nAn Python wrapper for the https://voidbots.net/\n\n\n\n# Requirements \n\n - Pythin 3.6 or above\n - aiohttp (`python -m pip install aiohttp`)\n - discord.py (`python -m pip install discord.py`)\n - python-dateutil (`python -m pip install python-dateutil`)\n\n# Installation\nInstall via pip (recommended)\n```py\npip install voidapi\n```\nInstall from source\n```\npip install git+https://github.com/ggashish/voidapi/\n```\n# Documentation\nDocumentation can be found [here](https://docs.voidbots.net/)\n\n# Features\n\n - POST bot stats\n - GET check voted\n - GET bot info\n - GET bot analytics\n - GET bot reviews\n - GET search bot\n - GET bot votes\n - GET user info\n - GET pack info\n\n# Support \nYou can get support be either joining our [Support Server](https://discord.gg/QbnZMCP8MY) or contact me on [ggashish#6132](https://discord.com/users/711043296025378856)\n\n# Usage\n```py\nimport voidapi\n\nclient = voidapi.Client(bot, api_key)\n```\n# Funtions\n## await client.check_voted(bot_id, user_id)\nCheck if a user has voted for a bot.\n\n**Parameters:**\n\n - bot_id ([int](https://docs.python.org/3/library/functions.html#int)) - ID of bot to check for.\n - user_id ([int](https://docs.python.org/3/library/functions.html#int)) -   ID of user to check for.\n\n **`Returns CheckVoted (class):`**\n\n**Attributes**:\n - `bot_id` ([int](https://docs.python.org/3/library/functions.html#int)) - ID of the bot\n - `voter_id` ([int](https://docs.python.org/3/library/functions.html#int)) - ID of the voter\n - `voted` ([bool](https://docs.python.org/3/library/functions.html#bool)) - Voted for the bot or not.\n - `vote_time` ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime)) - Time of vote if voted.\n  - `next_vote` ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime)) - Time of the next vote if voted.\n\n## await client.bot_info(bot_id)\nGet a specific bot's information.\n\n**Parameters:**\n\n - bot_id ([int](https://docs.python.org/3/library/functions.html#int)) - ID of bot to check for.\n\n **`Returns BotInfo (class):`**\n\n**Attributes**:\n - `bot_id`([int](https://docs.python.org/3/library/functions.html#int)) - ID of the bot.\n - `servers`([int](https://docs.python.org/3/library/functions.html#int)) - Server count if available.\n - `owners`(List([int](https://docs.python.org/3/library/functions.html#int))) - IDs of the bot's owner.\n - `votes`([int](https://docs.python.org/3/library/functions.html#int)) - Number of votes bot received.\n - `monthly_votes`([int](https://docs.python.org/3/library/functions.html#int)) - Total monthly vote received.\n - `total_votes`([int](https://docs.python.org/3/library/functions.html#int)) - Total bot's votes.\n - `blurb`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Short description of the bot.\n - `description`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Long bot's description.\n - `certified`([bool](https://docs.python.org/3/library/functions.html#bool)) - Bot is certified.\n - `links`([dict](https://docs.python.org/3/library/stdtypes.html#dict)) - Dict of all the links.\n - `tags`(List([str](https://docs.python.org/3/library/stdtypes.html#str))) - List of all the bot tags.\n\n## await client.bot_analytics(bot_id)\nGet the analytics that we store for your bot.\n\n**Parameters:**\n\n - bot_id ([int](https://docs.python.org/3/library/functions.html#int)) - ID of bot to check for.\n\n **`Returns CheckVoted (class):`**\n\n**Attributes**:\n - `bot_id`([int](https://docs.python.org/3/library/functions.html#int)) - ID of the bot.\n - `analytics`(List([dict](https://docs.python.org/3/library/stdtypes.html#dict))) - List of dicts of analytics.\n\n ## await client.bot_reviews(bot_id)\nGet the reviews are stored for your bot.\n\n**Parameters:**\n\n - bot_id ([int](https://docs.python.org/3/library/functions.html#int)) - ID of bot to check for.\n\n **`Returns BotReviews (class):`**\n\n**Attributes**:\n - `analytics`(List([dict](https://docs.python.org/3/library/stdtypes.html#dict))) - List of dicts of reviews if available.\n\n ## await client.search_bot(query)\nSearch our list of bots using a json api.\n\n**Parameters:**\n\n - bot_id ([str](https://docs.python.org/3/library/stdtypes.html#str)) - Query to search bot.\n\n **`Returs Dict`:**\n\n\n - Returns a dict of bots is available.\n\n ## await client.bot_votes(bot_id)\nGet an array of users who have voted for your bot.\n\n**Parameters:**\n\n - bot_id ([int](https://docs.python.org/3/library/functions.html#int)) - ID of bot to check for.\n\n\n **`Returs List`:**\n\n\n - Returns a list of users who voted the bot if available.\n\n## await client.user_info(user_id)\nGet a specific user's information.\n\n**Parameters:**\n\n - user_id ([int](https://docs.python.org/3/library/functions.html#int)) - The ID of the user to check for.\n\n **`Returns UserInfo (class):`**\n\n**Attributes**:\n - `user_id`([int](https://docs.python.org/3/library/functions.html#int)) - ID of the user.\n - `blurb`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Short description of the user.\n - `description`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Long description of the user.\n - `theme`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Theme of the user.\n - `bots`(List([int](https://docs.python.org/3/library/functions.html#int))) - List of bots user owns if any.\n - `packs`(List([str](https://docs.python.org/3/library/stdtypes.html#str))) - List of pack user own if any.\n - `achievements`(List([str](https://docs.python.org/3/library/stdtypes.html#str))) - List of achievement of users if any.\n - `blacklist`(List([str](https://docs.python.org/3/library/stdtypes.html#str))) - \n - `first_login`([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime)) - First time user logged in.\n - `last_login`([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime)) - Last time user logged in.\n - `links`(List([str](https://docs.python.org/3/library/stdtypes.html#str))) - List of links of users if any.\n\n## await client.pack_info(pack_id)\nGet a specific user's information.\n\n**Parameters:**\n\n - pack_id ([str](https://docs.python.org/3/library/stdtypes.html#str)) - The ID of the pack to check for.\n\n **`Returns PackInfo (class):`**\n\n**Attributes**:\n - `pack_id`([str](https://docs.python.org/3/library/stdtypes.html#str)) - ID of the pack.\n - `name`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Name of the pack.\n - `description`([str](https://docs.python.org/3/library/stdtypes.html#str)) - Description of the pack.\n - `bots`(List([int](https://docs.python.org/3/library/functions.html#int))) - List of bots the pack have.\n - `owners`(List([int](https://docs.python.org/3/library/functions.html#int))) - List of owner the pack.\n - `tags`(List([str](https://docs.python.org/3/library/stdtypes.html#str))) - List of tags the pack have.\n - `created_at`([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime)) - Time of pack creating\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ggashish/voidapi",
    "keywords": "void,voidbots.net",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "voidapi",
    "package_url": "https://pypi.org/project/voidapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/voidapi/",
    "project_urls": {
      "Homepage": "https://github.com/ggashish/voidapi"
    },
    "release_url": "https://pypi.org/project/voidapi/1.1.0/",
    "requires_dist": [
      "aiohttp",
      "discord.py",
      "python-dateutil"
    ],
    "requires_python": "",
    "summary": "A simple API wrapper for voidbots.net.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11322981,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de45ffde44318417c445985966b63f65dd440916173d6c5ae1742ffe20ba4e4e",
          "md5": "5b39d07069bf41a72a2e4321c6cf835e",
          "sha256": "d848d59195cd08009f72620ee845ae587ff96448b7ac6aac0546984cda09cc44"
        },
        "downloads": -1,
        "filename": "voidapi-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b39d07069bf41a72a2e4321c6cf835e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4763,
        "upload_time": "2021-08-31T06:28:43",
        "upload_time_iso_8601": "2021-08-31T06:28:43.336379Z",
        "url": "https://files.pythonhosted.org/packages/de/45/ffde44318417c445985966b63f65dd440916173d6c5ae1742ffe20ba4e4e/voidapi-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86b059be8773caed0f87276c8daf4389cdfa74165043055f492ec072e5cd99b5",
          "md5": "7af41f35e136f2f447a59e900562d7b4",
          "sha256": "c62685c650633b2fa2406a61ff5861e3a83393f35c30b5c8de13c6053d9c127f"
        },
        "downloads": -1,
        "filename": "voidapi-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7af41f35e136f2f447a59e900562d7b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5618,
        "upload_time": "2021-08-31T06:28:45",
        "upload_time_iso_8601": "2021-08-31T06:28:45.339225Z",
        "url": "https://files.pythonhosted.org/packages/86/b0/59be8773caed0f87276c8daf4389cdfa74165043055f492ec072e5cd99b5/voidapi-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87f01305a7f47fce12fe4b3b326672485d0287aca1242f3ea64e95f416a6ba73",
          "md5": "f754e1624cd9df6f598f320bd9f2bcd2",
          "sha256": "f097b1ada4e82793a5d1a3b47759c1d72d34b1b9dadd768593e1a2b9fbd1c04e"
        },
        "downloads": -1,
        "filename": "voidapi-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f754e1624cd9df6f598f320bd9f2bcd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4766,
        "upload_time": "2021-08-31T06:35:52",
        "upload_time_iso_8601": "2021-08-31T06:35:52.167342Z",
        "url": "https://files.pythonhosted.org/packages/87/f0/1305a7f47fce12fe4b3b326672485d0287aca1242f3ea64e95f416a6ba73/voidapi-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5993fa1300a445d8176593826d4b53d5ec6802c3e914ffa859fbeff1258b89fe",
          "md5": "3c4d83645afe8c60daeb689e957d0651",
          "sha256": "13f4ea17c9f87e847e5aa474a4f89ea50c550e4c6df9b640ff0edf8e5b5dbf0a"
        },
        "downloads": -1,
        "filename": "voidapi-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3c4d83645afe8c60daeb689e957d0651",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5616,
        "upload_time": "2021-08-31T06:35:54",
        "upload_time_iso_8601": "2021-08-31T06:35:54.319405Z",
        "url": "https://files.pythonhosted.org/packages/59/93/fa1300a445d8176593826d4b53d5ec6802c3e914ffa859fbeff1258b89fe/voidapi-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "806dcb659c12e6e1c3942dfd1bb217181eea985ffc46a44a17071751354f1b7a",
          "md5": "4789aaa1f8be9b49e66f6e1aca64d23c",
          "sha256": "f6d46733086db80b5f80e0bef0528b922c77393c6a9e2ab8d749e3f50647d82a"
        },
        "downloads": -1,
        "filename": "voidapi-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4789aaa1f8be9b49e66f6e1aca64d23c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4569,
        "upload_time": "2021-08-31T09:27:58",
        "upload_time_iso_8601": "2021-08-31T09:27:58.358768Z",
        "url": "https://files.pythonhosted.org/packages/80/6d/cb659c12e6e1c3942dfd1bb217181eea985ffc46a44a17071751354f1b7a/voidapi-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "806dcb659c12e6e1c3942dfd1bb217181eea985ffc46a44a17071751354f1b7a",
        "md5": "4789aaa1f8be9b49e66f6e1aca64d23c",
        "sha256": "f6d46733086db80b5f80e0bef0528b922c77393c6a9e2ab8d749e3f50647d82a"
      },
      "downloads": -1,
      "filename": "voidapi-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4789aaa1f8be9b49e66f6e1aca64d23c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4569,
      "upload_time": "2021-08-31T09:27:58",
      "upload_time_iso_8601": "2021-08-31T09:27:58.358768Z",
      "url": "https://files.pythonhosted.org/packages/80/6d/cb659c12e6e1c3942dfd1bb217181eea985ffc46a44a17071751354f1b7a/voidapi-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}