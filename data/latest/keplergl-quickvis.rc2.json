{
  "info": {
    "author": "Kyle Barron",
    "author_email": "kylebarron2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# keplergl_quickvis\n\n## Overview\n\nUber's open-source [kepler.gl](https://kepler.gl/) is a great browser-based\nplatform for interactively visualizing geospatial data. The `keplergl` Python package's [included\ndocumentation](https://github.com/keplergl/kepler.gl/blob/master/docs/keplergl-jupyter/user-guide.md)\nis almost entirely directed at use within Jupyter, and it took a little bit of\nwork to figure out how to use it from a non-Jupyter Python environment.\n\n`keplergl_quickvis` is a simple wrapper to quickly get your geospatial objects from Python into kepler.gl in the browser. It's as simple as\n\n```\nkeplergl_quickvis --style=outdoors data.geojson\n```\n\nfrom the command line, or from Python\n\n```py\nfrom keplergl_quickvis import Visualize\nVisualize(data)\n```\n\n![Example gif](https://raw.githubusercontent.com/kylebarron/keplergl_quickvis/master/assets/example.gif)\n\n## Features\n\n-   One-line data visualization\n-   Automatically converts Shapely objects to GeoJSON\n-   No configuration needed\n\n## Install\n\n**Mapbox API key**: in order to display Mapbox-hosted maps, you need to provide\na Mapbox API key. Go to [Mapbox.com](https://account.mapbox.com/access-tokens)\nto get an API key.\n\n**Package install**:\n\n```\npip install keplergl_quickvis\n```\n\nThis package has dependencies on `geojson`, `shapely`, and `geopandas`. If you\nget errors when installing this package through pip, it may be easier to first\ninstall dependencies through Conda, then installing this package. I.e.:\n\n```\nconda install geojson shapely geopandas -c conda-forge\npip install keplergl_quickvis\n```\n\n## Usage\n\n### CLI\n\nThe CLI is installed under the name `keplergl_quickvis`:\n\n```\nexport MAPBOX_API_KEY=...\nkeplergl_quickvis --style=outdoors data.geojson\nkeplergl_quickvis --style=dark data1.geojson shapefile.shp geodatabase.gdb\n```\n\nYou can supply data in any [vector format readable by GeoPandas/GDAL](https://gdal.org/drivers/vector/index.html).\n\nSupply `--help` to see the CLI's help menu:\n\n```\n> keplergl_quickvis --help\n\nUsage: keplergl_quickvis [OPTIONS] FILES...\n\n  Interactively view geospatial data using kepler.gl\n\nOptions:\n  --api_key TEXT  Mapbox API Key. Must be provided on the command line or\n                  exist in the MAPBOX_API_KEY environment variable.\n  --style TEXT    Mapbox style. Accepted values are: streets, outdoors, light,\n                  dark, satellite, satellite-streets, or a custom style URL.\n                  [default: streets]\n  --help          Show this message and exit.\n```\n\n### Python API\n\nSimplest usage:\n\n```py\nimport geopandas as gpd\nfrom keplergl_quickvis import Visualize\n\n# Create your geospatial objects\ngdf = gpd.GeoDataFrame(...)\n\n# Visualize one or multiple objects at a time\nVisualize(gdf, api_key=MAPBOX_API_KEY)\nVisualize([gdf, shapely_object, geojson_string], api_key=MAPBOX_API_KEY)\n```\n\nMore detail over the objects in your map:\n\n```py\nfrom keplergl_quickvis import Visualize\nvis = Visualize(api_key=MAPBOX_API_KEY)\nvis.add_data(data=data, names='name of layer')\nvis.add_data(data=data2, names='name of layer')\nhtml_path = vis.render(open_browser=True, read_only=False)\n```\n\n**Visualize**\n\n```py\nVisualize(data=None, names=None, read_only=False, api_key=None, style=None)\n```\n\n-   `data` (either `None`, a single data object, or a list of data objects):\n\n    A data object may be a GeoDataFrame from the\n    [GeoPandas](http://geopandas.org/) library, any geometry from the\n    [Shapely](https://shapely.readthedocs.io/en/stable/manual.html) library, any\n    object from the [GeoJSON](https://github.com/jazzband/geojson) library, or\n    any GeoJSON string or dictionary. You can also provide a CSV file as a\n    string or a Pandas DataFrame if the DataFrame has `Latitude` and `Longitude`\n    columns. Full documentation on the accepted data formats is\n    [here](https://github.com/keplergl/kepler.gl/blob/master/docs/keplergl-jupyter/user-guide.md#3-data-format).\n\n    You can provide either a single data object, or an iterable containing\n    multiple allowed data objects.\n\n    If data is not `None`, then Visualize(data) will perform all steps, including\n    rendering the data to an HTML file and opening it in a new browser tab.\n\n-   `names` (either `None`, a string, or a list of strings):\n\n    This defines the names shown for each layer in Kepler.gl. If `None`, the\n    layers will be named `data_0`, `data_1`, and so on. Otherwise, if `data` is\n    a single object, `names` should be a string, and if `data` is an iterable,\n    then `names` should be an iterable of strings.\n\n-   `read_only` (`boolean`): If `True`, hides side panel to disable map customization\n-   `api_key` (`string`): Mapbox API key. Go to [Mapbox.com](https://account.mapbox.com/access-tokens)\n    to get an API key. If not provided, the `MAPBOX_API_KEY` environment\n    variable must be set, or the `style_url` must point to a `style.json` file\n    that does not use Mapbox map tiles.\n-   `style` (`string`): The basemap style to use. Standard Mapbox options are:\n\n    -   `streets`\n    -   `outdoors`\n    -   `light`\n    -   `dark`\n    -   `satellite`\n    -   `satellite-streets`\n\n    The default is `streets`. Alternatively, you can supply a path to a custom\n    style. A custom style created from Mapbox Studio should have a url that\n    starts with `mapbox://`. Otherwise, a custom style using third-party map\n    tiles should be a URL to a JSON file that conforms to the [Mapbox Style\n    Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/).\n\n**Visualize.add_data()**\n\n```py\nVisualize.add_data(data, names=None):\n```\n\n-   `data` (either a single data object, or a list of data objects):\n\n    A data object may be a GeoDataFrame from the\n    [GeoPandas](http://geopandas.org/) library, any geometry from the\n    [Shapely](https://shapely.readthedocs.io/en/stable/manual.html) library, any\n    object from the [GeoJSON](https://github.com/jazzband/geojson) library, or\n    any GeoJSON string or dictionary. You can also provide a CSV file as a\n    string or a Pandas DataFrame if the DataFrame has `Latitude` and `Longitude`\n    columns. Full documentation on the accepted data formats is\n    [here](https://github.com/keplergl/kepler.gl/blob/master/docs/keplergl-jupyter/user-guide.md#3-data-format).\n\n    You can provide either a single data object, or an iterable containing\n    multiple allowed data objects.\n\n-   `names` (either `None`, a string, or a list of strings):\n\n    This defines the names shown for each layer in Kepler.gl. If `None`, the\n    layers will be named `data_0`, `data_1`, and so on. Otherwise, if `data` is\n    a single object, `names` should be a string, and if `data` is an iterable,\n    then `names` should be an iterable of strings.\n\n**Visualize.render()**\n\n```py\nVisualize.render(open_browser=True, read_only=False)\n```\n\n-   `read_only` (`boolean`): If `True`, hides side panel to disable map customization\n-   `open_browser` (`boolean`): If `True`, opens the saved HTML file in the default browser\n\n## Troubleshooting\n\nThe most common reasons why a map is not displayed are:\n\n-   Missing Mapbox API Key: in order to display Mapbox-hosted maps, you need get [an API key from Mapbox](https://account.mapbox.com/access-tokens) to pass an API key\n-   Data projection: Kepler.gl works only with data projected into standard WGS84 (latitude, longitude) coordinates. If you have your data in a projected coordinate system, first reproject your data into WGS84 (EPGS 4326), then try again. The CLI attempts to automatically reproject into EPSG 4326, but the Python library doesn't.\n\nIf your data seems to be \"floating\" above the map, this is likely because your\ninput data have Z coordinates, so kepler.gl displays them in 3-dimensional space.\n\n\n# Changelog\n\n## 0.1.0 (2019-12-05)\n\n-   First release on PyPI.\n\n## 0.2.0 (2019-12-09)\n\n-   Automatically attempt to reproject to EPSG 4326",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kylebarron/keplergl_quickvis",
    "keywords": "keplergl,mapbox",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keplergl-quickvis",
    "package_url": "https://pypi.org/project/keplergl-quickvis/",
    "platform": "",
    "project_url": "https://pypi.org/project/keplergl-quickvis/",
    "project_urls": {
      "Homepage": "https://github.com/kylebarron/keplergl_quickvis"
    },
    "release_url": "https://pypi.org/project/keplergl-quickvis/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Description",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6270537,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d19a9249c2ceaf396e4c474d1ceac5626e16dbddc912ee77290f22ac9c2ef61b",
          "md5": "cc5ed2a7a0978aadf6d8f0be9167a8d1",
          "sha256": "0c8615d4616be0548c106c9eee9fa0e7c08ad59c8bf9b675aeaa2f70f72264ee"
        },
        "downloads": -1,
        "filename": "keplergl_quickvis-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cc5ed2a7a0978aadf6d8f0be9167a8d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11742,
        "upload_time": "2019-12-06T05:46:01",
        "upload_time_iso_8601": "2019-12-06T05:46:01.814686Z",
        "url": "https://files.pythonhosted.org/packages/d1/9a/9249c2ceaf396e4c474d1ceac5626e16dbddc912ee77290f22ac9c2ef61b/keplergl_quickvis-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9720dd52510fb2453ac82b9def2dcd1b883fc033728247797d04da5d8fc92c6e",
          "md5": "712c6e2cad1dff68b56cd7055c654670",
          "sha256": "61f18745accf2bd8f7e04cd92cc93f0228d0236808fe5c9a0033afaa04c6828f"
        },
        "downloads": -1,
        "filename": "keplergl_quickvis-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "712c6e2cad1dff68b56cd7055c654670",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11787,
        "upload_time": "2019-12-10T03:01:10",
        "upload_time_iso_8601": "2019-12-10T03:01:10.373040Z",
        "url": "https://files.pythonhosted.org/packages/97/20/dd52510fb2453ac82b9def2dcd1b883fc033728247797d04da5d8fc92c6e/keplergl_quickvis-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9720dd52510fb2453ac82b9def2dcd1b883fc033728247797d04da5d8fc92c6e",
        "md5": "712c6e2cad1dff68b56cd7055c654670",
        "sha256": "61f18745accf2bd8f7e04cd92cc93f0228d0236808fe5c9a0033afaa04c6828f"
      },
      "downloads": -1,
      "filename": "keplergl_quickvis-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "712c6e2cad1dff68b56cd7055c654670",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 11787,
      "upload_time": "2019-12-10T03:01:10",
      "upload_time_iso_8601": "2019-12-10T03:01:10.373040Z",
      "url": "https://files.pythonhosted.org/packages/97/20/dd52510fb2453ac82b9def2dcd1b883fc033728247797d04da5d8fc92c6e/keplergl_quickvis-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}