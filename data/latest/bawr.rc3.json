{
  "info": {
    "author": "Frank David Martinez Muñoz",
    "author_email": "mnesarco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# BAWR\n\nThis is a tool to automate the icons generation from sets of svg files into fonts and atlases.\n\nThe main purpose of this tool is to add it to the build process of your c++ project and let it do all the work, then you can use your svg icons as fonts\nor as spritesheets.\n\nThe project url is: https://github.com/mnesarco/bawr\nThis project is based on a previous project: https://github.com/mnesarco/ff-batch \n\n## Features\n\n- Generate TrueType fonts from svg collections.\n- Generate png textures from svg collections.\n- Embed binaries into c++ sources ready to link.\n- Generate ImGui Font Loaders (c++). ([howto](https://github.com/mnesarco/bawr/blob/main/ImGui.md))\n- Generate c++ Atlas Maps.\n- Generate c++ Font constants as Macros and/or as const/constexpr.\n- Apply transformation to svg files during the generation.\n  - Textual transformations\n  - Font forge supported transformations\n\n## Requirements\n\n- Python 3.6+\n- FontForge 20170924+\n- Inkscape 1.0+\n\n## Install\n\nBuild from sources\n\n```bash\ngit clone https:://github.com/mnesarco/bawr.git\ncd bawr\n\npython3 -m pip install --upgrade build\npython3 -m pip install wheel\n\npython3 -m build \npython3 -m pip install dist/bawr-0.0.3-py3-none-any.whl\n\n```\n\nOr from pypi:\n\n```bash\npython3 -m pip install bawr\n```\n\n\n## Terminology\n\n| Concept                | Description                                                                                           |\n|------------------------|-------------------------------------------------------------------------------------------------------|\n| Svg Icon               | It is just a file in .svg format. It must be a square.                                                |\n| Icon set or Collection | It is a folder with svg icons                                                                         |\n| Configuration file     | It is a python file with all the options to generate your files. By convention it is called config.py |\n\n## Usage\n\n1. Create a folder\n2. Put a file named `config.py` (you can copy the one from examples dir https://github.com/mnesarco/bawr/tree/main/examples)\n3. Add folders with svg icons\n4. Adjust the configuration (edit config.py)\n5. Call bawr\n\n```bash\ncd examples\npython3 -m bawr.tool\n\n```\n\n## Examples\n\nYou can use the examples dir (https://github.com/mnesarco/bawr/tree/main/examples) as a template for your project:\n\n```bash\nexamples/\n├── config.py\n├── icons/\n└── bootstrap-icons/\n\n```\n\n### Result (generated files):\n\n```bash\nexamples/build/\n├── atlas_cells.hpp\n├── atlas.cpp\n├── atlas.hpp\n├── atlas.png\n├── my-icons_codes.hpp\n├── my-icons.cpp\n├── my-icons.hpp\n├── my-icons_loader.hpp\n└── my-icons.ttf\n\n```\n\n## Configuration (`config.py`)\n\n```python\n#------------------------------------------------------------------------------\n# Import all required stuff:\n#------------------------------------------------------------------------------\n\nfrom bawr.config import *\n\n#------------------------------------------------------------------------------\n# Define an environment (Use the name that you want, but extend Environment):\n#------------------------------------------------------------------------------\n\nclass Env( Environment ):\n\n    # [Optional] FONTFORGE_PATH = Path to fontforge executable, deduced if it is in PATH\n    # FONTFORGE_PATH = ...\n\n    # [Optional] INKSCAPE_PATH = Path to inkscape executable, deduced if it is in PATH\n    # INKSCAPE_PATH = ...   \n\n    # [Optional] BAWR_OUTPUT_DIR = Where all the output will be generated. Default = ./build\n    # BAWR_OUTPUT_DIR = ...\n\n    # [Optional] BAWR_SOURCE_DIR = Where all the icon folders will be found. Default = ./\n    #  BAWR_SOURCE_DIR = ...\n\n    pass\n\n#------------------------------------------------------------------------------\n# Define your icon sets (extend IconSet):\n#------------------------------------------------------------------------------\n\nclass BootstrapIcons( IconSet ):\n\n    # [Mandatory] src = directory name (which contains svg icons)\n    src = 'bootstrap-icons'\n\n    # [Optional] select = selection of icons from the directory: list( tuple(file-name, glyph-name) )\n    select = [\n        ('info-circle',              'infoCircle'),\n        ('file-earmark',             'fileEarmark'),\n        ('folder2-open',             'folderOpen'),\n        ('hdd',                      'save'),\n        ('file-earmark-arrow-up',    'fileImport'),\n        ('file-earmark-arrow-down',  'fileExport'),\n        ('folder',                   'folder'),\n        ('sliders',                  'sliders'),\n        ('eye',                      'eye'),\n        ('layers',                   'layers'),\n    ]\n\n    # [Optional] options = Special options for generators\n    options = {\n        \"font_transformation\": [('scale', 0.75, 0.75)],\n        \"atlas_preprocessors\": [\n            RegexReplacePreprocessor(\n                {\n                    \"currentColor\": \"#ffffff\",\n                    'width=\"1em\"': 'width=\"16\"',\n                    'height=\"1em\"': 'height=\"16\"',\n                }            \n            )\n        ],\n        \"atlas_margin\": 0.0625\n    }\n\n# Another icon set with different options\n\nclass MyIcons( IconSet ):\n\n    src = 'icons'\n\n    options = {\n        \"atlas_preprocessors\": [\n            RegexReplacePreprocessor(\n                {\n                    'fill:#000000': \"fill:#ffffff\",\n                    'stroke:#000000': 'stroke:#ffffff',\n                }            \n            )\n        ]\n    }\n\n#------------------------------------------------------------------------------\n# [Optional]\n# Define Font generator to generate truetype fonts using FontForge\n# (extend Font)\n#------------------------------------------------------------------------------\n\nclass MyFont( Font ):\n\n    # Generated font copyright notice [Mandatory]\n    copyright = \"Copyright 2020 Frank D. Martinez M.\"\n\n    # Font name [Mandatory]\n    name = \"my-icons\"\n\n    # Font family [Mandatory]\n    family = \"my-icons\"\n\n    # First font glyph code [Optional] (default = 0xe000)\n    # start_code = 0xe000\n\n    # List ot tuple of the icon sets included in this font [Mandatory]\n    collections = (BootstrapIcons, MyIcons)\n\n    # Global font transformation [Optiona] (See: Font transformations)\n    # transformation = []\n\n    # Output format [Optional] (default = ['ttf'])\n    # output_formats = ['ttf']\n\n    # Verbose output. Shows glyph generation details [Optional] (default = False)\n    # verbose = False\n\n\n#------------------------------------------------------------------------------\n# [Optional]\n# You can generate a C++ font header file with glyph codes ready to use in C++.\n# (extend CppFontHeader)\n#------------------------------------------------------------------------------\n\nclass MyCppFontH( CppFontHeader ):\n\n    # [Mandatory] Reference to the font generator to use\n    source = MyFont    \n\n    # [Optional] Generate constexpr values (default = false)\n    constexpr = True\n\n    # [Optional] name of the generated c++ file (default = source.name)\n    # name = ...\n\n    # [Optional] namespace of the generated c++ file (default = icons)\n    # namespace = ...\n\n    # [Optional] Generate macros (default = True)\n    # macros = ...\n\n    # [Optional] Prefix for all macros (default = Icon_)\n    # macro_prefix = ...\n\n\n#------------------------------------------------------------------------------\n# [Optional]\n# You can Embed your font binary into a C++ source file to be linked.\n# (extend CppEmbedded)\n#------------------------------------------------------------------------------\n\nclass MyCppFontEmbed( CppEmbedded ):\n\n    # [Mandatory] Reference to the binary file to embed\n    source = \"${BAWR_OUTPUT_DIR}/my-icons.ttf\"\n\n    # [Optional] name prefix for the generated files (default = source name)\n    # name = ...\n\n    # [Optional] namespace for the generated files (default = icons)\n    # namespace = ...\n\n\n#------------------------------------------------------------------------------\n# [Optional]\n# You can generate C++ code to load your font into Dear ImGui.\n# (extend CppEmbedded)\n#------------------------------------------------------------------------------\n\nclass MyCppFontImGui( ImGuiFontLoader ):\n\n    # [Mandatory] reference to the font\n    font = MyFont\n\n    # [Mandatory] reference to the font header\n    header = MyCppFontH    \n\n    # [Mandatory] reference to the embedded binary\n    data = MyCppFontEmbed\n\n    # [Optional] name prefix for the generated files (default = font.name)\n    # name = ...\n\n    # [Optional] namespace for the generated files (default = icons)\n    # namespace = ...\n\n#------------------------------------------------------------------------------\n# [Optional]\n# You can generate an optimized png atlas with all your icons in different sizes.\n# (extend Atlas)\n#------------------------------------------------------------------------------\n\nclass MyAtlas( Atlas ):\n\n    # [Optional] width of the atlas image (default = 512)\n    width = 512\n\n    # [Mandatory] sizes of the icons to be generated and included in the atlas\n    sizes = (16, 32, 64)\n\n    # [Mandatory] References to collections (icon sets) to be included\n    collections = (BootstrapIcons, MyIcons)\n\n    # [Optional] name prefix for the generated files (default = font.name)\n    # name = ...\n\n# [Optional] Embed the Atlas png into a C++ source.\nclass MyCppAtlasEmbed( CppEmbedded ):\n    source = \"${BAWR_OUTPUT_DIR}/atlas.png\"\n\n#------------------------------------------------------------------------------\n# [Optional]\n# Generate a C++ header file with the atlas cells (frames) to be used in your code.\n# (extend CppAtlasHeader)\n#------------------------------------------------------------------------------\n\nclass MyAtlasHeader( CppAtlasHeader ):\n    source = MyAtlas\n\n\n```\n\n## How to use with Dear ImGui:\n\nhttps://github.com/mnesarco/bawr/blob/main/ImGui.md\n\n## What is in the name\n\n**BAWR** in honor of **Bertrand Arthur William Russell**, a great Logician, Mathematician and Philosopher of the IX and XX centuries. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mnesarco/bawr",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bawr",
    "package_url": "https://pypi.org/project/bawr/",
    "platform": null,
    "project_url": "https://pypi.org/project/bawr/",
    "project_urls": {
      "Bug Tracker": "https://github.com/mnesarco/bawr/issues",
      "Homepage": "https://github.com/mnesarco/bawr"
    },
    "release_url": "https://pypi.org/project/bawr/0.0.4/",
    "requires_dist": [
      "Pillow",
      "rectpack"
    ],
    "requires_python": ">=3.6",
    "summary": "Tool to generate truetype fonts and atlas textures from sets of svg files.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14464237,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "101e6bf67471355d5bba0ee9db78ac0fae04b9ef1ca597466657e2a1ab9c8409",
          "md5": "f34411360fde26fed9e93f85c11c4546",
          "sha256": "04b2016c2927ef0cf50b0cc0f940948ceb2c9cd4244a6b4b679d7923a90be58d"
        },
        "downloads": -1,
        "filename": "bawr-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f34411360fde26fed9e93f85c11c4546",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29544,
        "upload_time": "2021-09-23T22:58:09",
        "upload_time_iso_8601": "2021-09-23T22:58:09.563938Z",
        "url": "https://files.pythonhosted.org/packages/10/1e/6bf67471355d5bba0ee9db78ac0fae04b9ef1ca597466657e2a1ab9c8409/bawr-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c506eb4524b7984bc1a2125d912fa4bb6e1a0d18d0d46446ff18142defe294d3",
          "md5": "e701aa3384c45ea5ea83e3f1549983aa",
          "sha256": "1a77785243ffd132581b7274cd6c1e9b4049bebd5e84669978ebbb83f514ffe1"
        },
        "downloads": -1,
        "filename": "bawr-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e701aa3384c45ea5ea83e3f1549983aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13075,
        "upload_time": "2021-09-23T22:58:11",
        "upload_time_iso_8601": "2021-09-23T22:58:11.358790Z",
        "url": "https://files.pythonhosted.org/packages/c5/06/eb4524b7984bc1a2125d912fa4bb6e1a0d18d0d46446ff18142defe294d3/bawr-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ec6894adaff85ad4e48fa33426713cb6a4662411fee126112fd21c7e271fddb",
          "md5": "df0b1b489c6721854e56c0edc50de35d",
          "sha256": "9361f2008534fc65b42c2d7a35b34dfce079b4dcd2b5ab4a3f23432e547de344"
        },
        "downloads": -1,
        "filename": "bawr-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df0b1b489c6721854e56c0edc50de35d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29543,
        "upload_time": "2021-09-24T06:53:45",
        "upload_time_iso_8601": "2021-09-24T06:53:45.733083Z",
        "url": "https://files.pythonhosted.org/packages/0e/c6/894adaff85ad4e48fa33426713cb6a4662411fee126112fd21c7e271fddb/bawr-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6406f0b46a39ae4a31c4218efb5664c3417866a7b5c83b30f3b8633509e4a874",
          "md5": "b62de634d31b3888f367c39165d6de95",
          "sha256": "18a925f4b2656834744a4ffd9781af99e5e2795d811cf1ecc8115f2d067625fe"
        },
        "downloads": -1,
        "filename": "bawr-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b62de634d31b3888f367c39165d6de95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13088,
        "upload_time": "2021-09-24T06:53:47",
        "upload_time_iso_8601": "2021-09-24T06:53:47.131644Z",
        "url": "https://files.pythonhosted.org/packages/64/06/f0b46a39ae4a31c4218efb5664c3417866a7b5c83b30f3b8633509e4a874/bawr-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e84df1974ff121dd06f9d40170e4c8c1055d48976f9ae0d22e8e7eb4c279a763",
          "md5": "ac40c248429746d2bb99f4c9d927f394",
          "sha256": "5e606181ad2eee009e82c6dcf54553f5d5b780830eb7e19120ed9ca1d5f84a91"
        },
        "downloads": -1,
        "filename": "bawr-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac40c248429746d2bb99f4c9d927f394",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29672,
        "upload_time": "2022-07-18T00:22:44",
        "upload_time_iso_8601": "2022-07-18T00:22:44.216032Z",
        "url": "https://files.pythonhosted.org/packages/e8/4d/f1974ff121dd06f9d40170e4c8c1055d48976f9ae0d22e8e7eb4c279a763/bawr-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d39c70f0a1c0df0f9a7dcbfdfb0489c78e2341aa0c1be0da9ba10ca7d7cf7a59",
          "md5": "7a551a49ab3be88636486bdda0ca1dc2",
          "sha256": "ad9a040208b4aad14eecc0501e4179f66beb34182b6b924b68c344820bfc8371"
        },
        "downloads": -1,
        "filename": "bawr-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7a551a49ab3be88636486bdda0ca1dc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17015,
        "upload_time": "2022-07-18T00:22:46",
        "upload_time_iso_8601": "2022-07-18T00:22:46.204294Z",
        "url": "https://files.pythonhosted.org/packages/d3/9c/70f0a1c0df0f9a7dcbfdfb0489c78e2341aa0c1be0da9ba10ca7d7cf7a59/bawr-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e84df1974ff121dd06f9d40170e4c8c1055d48976f9ae0d22e8e7eb4c279a763",
        "md5": "ac40c248429746d2bb99f4c9d927f394",
        "sha256": "5e606181ad2eee009e82c6dcf54553f5d5b780830eb7e19120ed9ca1d5f84a91"
      },
      "downloads": -1,
      "filename": "bawr-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac40c248429746d2bb99f4c9d927f394",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 29672,
      "upload_time": "2022-07-18T00:22:44",
      "upload_time_iso_8601": "2022-07-18T00:22:44.216032Z",
      "url": "https://files.pythonhosted.org/packages/e8/4d/f1974ff121dd06f9d40170e4c8c1055d48976f9ae0d22e8e7eb4c279a763/bawr-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d39c70f0a1c0df0f9a7dcbfdfb0489c78e2341aa0c1be0da9ba10ca7d7cf7a59",
        "md5": "7a551a49ab3be88636486bdda0ca1dc2",
        "sha256": "ad9a040208b4aad14eecc0501e4179f66beb34182b6b924b68c344820bfc8371"
      },
      "downloads": -1,
      "filename": "bawr-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "7a551a49ab3be88636486bdda0ca1dc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17015,
      "upload_time": "2022-07-18T00:22:46",
      "upload_time_iso_8601": "2022-07-18T00:22:46.204294Z",
      "url": "https://files.pythonhosted.org/packages/d3/9c/70f0a1c0df0f9a7dcbfdfb0489c78e2341aa0c1be0da9ba10ca7d7cf7a59/bawr-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}