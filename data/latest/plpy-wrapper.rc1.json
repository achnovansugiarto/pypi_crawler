{
  "info": {
    "author": "Shmuel Kamensky",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# plpy-wrapper\n\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![docs](https://readthedocs.org/projects/plpy-wrapper-dev/badge/?version=latest)](https://plpy-wrapper-dev.readthedocs.io/en/latest/)\n[![license](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![pypi](https://badge.fury.io/py/plpy-wrapper.svg)](https://pypi.python.org/pypi/plpy-wrapper/)\n[![HitCount](http://hits.dwyl.com/skamensky/plpy-wrapper.svg)](http://hits.dwyl.com/skamensky/plpy-wrapper)\n\nTable of Contents\n=================\n\n  * [Terminology](#terminology)\n  * [Documentation](#documentation)\n  * [Why](#why)\n  * [Who should use this?](#who-should-use-this)\n  * [Getting Started](#getting-started)\n    * [Prerequisites](#prerequisites)\n    * [Installation](#installation)\n    * [How to use](#how-to-use)\n    * [Examples](#examples)\n  * [Running the tests](#running-the-tests)\n  * [Technologies](#technologies)\n  * [Scope of the project](#scope-of-the-project)\n  * [Project status](#project-status)\n  * [What does plpython stand for?](#what-does-plpython-stand-for)\n  * [TODO](#todo)\n  * [A Note on the Development Environment](#a-note-on-the-development-environment)\n  * [Further Reading](#further-reading)\n\n\nTerminology\n------------------\n* `procedural language` A language in which one can write user-defined functions to access database functionality. The most well known and used in the Postgres world is `PL/pgsql`\n* `plpython` - The procedural language plpython which allows python code to run in the Postgres Runtime\n* `plpy` The only package that is imported automatically by the Python interpreter embedded in Postgres. This package cannot be imported outside of the Postgres runtime and is used to access Postgres DB functionality such as querying or logging       \n* `plpy-wrapper` This package which is a convenience wrapper around plpy\n\n\nDocumentation\n------------------\nCheck out the documentation [here](https://plpy-wrapper.readthedocs.io/)\nSee the [documentation readme](/docs/README.md) for information on building the documentation.\n\nWhy\n------------------\nThe reason I wrote plpy-wrapper was to explore how two of some of my favorite technologies, Postgres, and Python\nlive and cooperate with one another.\n\nWho should use this?\n------------------\nIt's difficult to justify the use of this in large-scale or security-conscious projects.\nThe main reason doesn't have anything to do with this package itself, but rather the fact that plpython is an untrusted procedural language - meaning that it can run arbitrary code on your Postgres server.  \n\nAs phrased by the [postgres documentation](https://www.postgresql.org/docs/12/plpython.html#docComments):\n>PL/Python is only available as an \"untrusted\" language, meaning it does not offer any way of restricting what users can do in it and is therefore named plpython\n \n\nHowever, there are some good reasons to use plpython in general and therefore plpy-wrapper as well.\n1. You don't want to learn PL/pgSQL but you want to write user-defined functions in Postgres\n2. You want to use a python package that already does exactly what you want it to do \n3. You have code you already wrote in Python and want to use it in Postgres\n4. You are curious\n5. It's a personal server and you have full control over the environment and Python is cool\n\nGetting Started\n------------------\n#### Prerequisites\nMake sure to have Postgres installed on your system.\nThe Postgres installation should have been compiled with support for plpython as a supported procedural language.\nBy default most installations come with that baked in. When in doubt you can look in the [dockerfile](/testing/docker/Dockerfile) \nfor an example of an environment that this package will definitely run in.\n\nMake sure you've installed plpython as a procedural language in a Postgres session. This package only supports plpython3.\nYou can do that by running the following code snippet\n\n```postgres-psql\nCREATE EXTENSION plpython3u;\n```\n\n#### Installation\n\nOn the same machine as your Postgres installation, install plpy-wrapper.\nHowever the package gets installed, it must end up in the [Python Path](https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH).\nThe way the embedded Python interpreter running inside of the Postgres runtime knows how to access outside Python packages (such as this one), is through the Python Path.\nSo however you install this package, make sure it ends up on the Python Path.\n\nThe two easiest ways to install plpy-wrapper are through pip\n\nUsing pypi\n```shell script\npip install plpy-wrapper\n```\n\nUsing github\n\n```shell script\npip install git+https://github.com/skamensky/plpy-wrapper\n```\n\n#### How to use\nThe best way to learn about how to use this package is by reading the [tests](/testing/tests.py).\n\nYou can also read some examples below or open an issue if something is unclear.\n\n\n#### Examples\nThe trigger creation utility attempts to satisfy a simple use case where you want to create a trigger on every event for a given table. \n\nThis code \n```postgres-sql\nDO\n$$\nfrom plpy_wrapper import utilities,PLPYWrapper\nutilities.create_plpython_triggers(PLPYWrapper(globals()),'customer','contact')\n$$ language plpython3u;\n```\n\nResults in the following triggers definitions being executed on the `contact` table in the `customer` schema\nin order to captures all row events. \n\n```postgres-psql\ncreate trigger trig_customer_contact_after\n    after insert or update or delete\n    on contact\n    for each row\nexecute procedure func_customer_contact_trigger_controller();\n```\nAnd\n\n```postgres-psql\ncreate trigger trig_customer_contact_before\n    before insert or update or delete\n    on contact\n    for each row\nexecute procedure func_customer_contact_trigger_controller();\n```\nThe `func_customer_contact_trigger_controller` will autogenerate to the following definition, but could also be changed:\n\n```postgres-psql\ncreate function func_customer_contact_trigger_controller() returns trigger\n    language plpython3u\nas\n$$\nfrom plpy_wrapper import PLPYWrapper,Trigger\nclass _Contact(Trigger):\n\n    def before_insert(self):\n        #put your before insert logic here (or delete this method if you don't want anything to happen before insert)\n        pass\n\n    def after_insert(self):\n        #put your after insert logic here (or delete this method if you don't want anything to happen after insert)\n        pass\n\n    def before_update(self):\n        #put your before update logic here (or delete this method if you don't want anything to happen before update)\n        pass\n\n    def after_update(self):\n        #put your after update logic here (or delete this method if you don't want anything to happen after update)\n        pass\n\n    def before_delete(self):\n        #put your before delete logic here (or delete this method if you don't want anything to happen before delete)\n        pass\n\n    def after_delete(self):\n        #put your before after delete logic here (or delete this method if you don't want anything to happen after delete)\n        pass\n\ntrigger_handler = _Contact(PLPYWrapper(globals()))\n#this runs the appropriate method\ntrigger_handler.execute()\n#based on changes you made to the data or events you initiated, this tells postgres to change data, skip the event, etc.\n#The return value is only relevant in BEFORE/INSTEAD OF triggers\nreturn trigger_handler.trigger_return_val\n$$;\n```\n\nRunning the tests\n------------------\nYou can read more about how tests work and how to run them in the [tests readme](/testing/README.md).\n\nTechnologies\n------------------\n* Python\n* Postgres\n\nScope of the project\n------------------\nAs of now, plpy-wrapper is a simple wrapper around plpy. The main utilities someone could find in it\nare:\n1. Simplifying writing triggers in plpython and avoiding some common pitfalls (for example by using the autogenerated trigger above you don't need to worry about persisting changes you've made to the row in the trigger by returning the string 'OK'. This package does that for you).\n2. Performing a specific action before or after every function call to plpy (sort of how you would use decorators)\n\nHowever, I am open to contributions and extending the scope of this package to be a more full-fledged wrapper as long as the changes are useful enough to a broad audience. \n\nProject status\n------------------ \nWhatever comes before Alpha. Given that this project was written mainly for fun and curiosity I can see it never being touched again.\n\nWhat does plpython3u stand for?\n------------------\nThe `pl` part of plpython stands for procedural language\n\nThe `python` part stands for Python â™¥\n\nThe `3` part stands for python 3.\n\nThe `u` part stands for untrusted (you can what untrusted means in the [Who should use this?](#who-should-use-this) section).\n\nTODO\n------------------\n* Finish writing tests\n* Add CI\n* Create coverage badge and improve coverage\n\nA Note on the Development Environment\n------------------\nThis package was developed on Windows and therefore bash scripts are batch scripts and some file paths may be in Windows formats. \n\nSorry! I'm still in the process of transferring my development environment to WSL.\n\nFurther Reading\n------------------\nhttps://www.postgresql.org/docs/current/plpython.html",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/skamensky/plpy-wrapper/",
    "keywords": "postgres plpython plpy wrapper",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plpy-wrapper",
    "package_url": "https://pypi.org/project/plpy-wrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/plpy-wrapper/",
    "project_urls": {
      "Homepage": "https://github.com/skamensky/plpy-wrapper/"
    },
    "release_url": "https://pypi.org/project/plpy-wrapper/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7, <=3.8",
    "summary": "",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7031386,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b79f18f8171a180dd517003ea33105c75932decc32ba66591a6458f80f89a611",
          "md5": "a135fdea10c1a07c8916f0b6592590ca",
          "sha256": "e619c9e798895b4d38d5cefc480215a6c80dc9b4a250cc50ef2ddd56542973e1"
        },
        "downloads": -1,
        "filename": "plpy-wrapper-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a135fdea10c1a07c8916f0b6592590ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <=3.8",
        "size": 16187,
        "upload_time": "2020-04-16T11:17:20",
        "upload_time_iso_8601": "2020-04-16T11:17:20.819999Z",
        "url": "https://files.pythonhosted.org/packages/b7/9f/18f8171a180dd517003ea33105c75932decc32ba66591a6458f80f89a611/plpy-wrapper-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b79f18f8171a180dd517003ea33105c75932decc32ba66591a6458f80f89a611",
        "md5": "a135fdea10c1a07c8916f0b6592590ca",
        "sha256": "e619c9e798895b4d38d5cefc480215a6c80dc9b4a250cc50ef2ddd56542973e1"
      },
      "downloads": -1,
      "filename": "plpy-wrapper-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a135fdea10c1a07c8916f0b6592590ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <=3.8",
      "size": 16187,
      "upload_time": "2020-04-16T11:17:20",
      "upload_time_iso_8601": "2020-04-16T11:17:20.819999Z",
      "url": "https://files.pythonhosted.org/packages/b7/9f/18f8171a180dd517003ea33105c75932decc32ba66591a6458f80f89a611/plpy-wrapper-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}