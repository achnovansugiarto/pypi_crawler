{
  "info": {
    "author": "Tzachi Noy",
    "author_email": "tzachi.noy@biu.ac.il",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Project Salamandra\n\n**Salamandra** is an extensible [Pythonic](https://en.wikipedia.org/wiki/Python_(programming_language)) \ninfrastructure for loading, analyzing, generating and storing of netlists. \nSalamandra is under development and evolving so documentation of the latest features is missing and expected to be added\nsoon.\n\nSalamandra is developed by [EnICS labs](https://enicslabs.com/) and is being made available under the permissive \nApache 2.0 open source license. See [LICENSE](LICENSE).\n\n## Getting Salamandra\nSource code is maintained at https://github.com/enics-labs/salamandra\n\nTo install Salamandra use `pip install salamandra`\n\nIf you want a specific version you can do `pip install salamandra==#version#`\n\nTo install a specific version locally (only for user) you can install it inside a `virtualenv`\n\nor `pip install --user salamandra==#version#`\nwhich will Install it to the Python user install directory for your platform. \n\nTypically `~/.local/` on Linux, or `%APPDATA%Python` on Windows\n\n## Basic Commands\n\n**Note: Only Python3 is supported by Salamandra.**\n\nSalamandra is object-oriented. The four basic classes are `Component`, `Net` , `Param` and `Pin`. The following code creates an NMOS transistor skeleton.\n\n```\nimport salamandra as slm\nnmos = slm.Component('nmos')\nnmos.add_pin(slm.Pin('source'))\nnmos.add_pin(slm.Pin('drain'))\nnmos.add_pin(slm.Pin('gate'))\nnmos.add_pin(slm.Pin('body'))\n```\n\nThe nmos component above has no internal structure, but can be used as a leaf node for higher levels, \nas shown in the example below. Note below the usage of `Input`, `Output` and `Inout`, \nwhich are of subclass `Pin`, and imply the pin's direction in digital designs.\n```\ninv = slm.Component('inv')\n\n#pins\ninv.add_pin(slm.Input('I'))\ninv.add_pin(slm.Output('ZN'))\ninv.add_pin(slm.Inout('VDD'))\ninv.add_pin(slm.Inout('VSS'))\n\n#subcomponents\ninv.add_subcomponent(nmos, 'n1')\ninv.add_subcomponent(pmos, 'p1')\n\n#connections\ninv.connect('I', 'n1.gate')\ninv.connect('I', 'p1.gate')\ninv.connect('ZN', 'n1.drain')\ninv.connect('ZN', 'p1.drain')\ninv.connect('VDD', 'p1.source')\ninv.connect('VDD', 'p1.body')\ninv.connect('VSS', 'n1.source')\ninv.connect('VSS', 'n1.body')\n```\nComponents, such as nmos, resistors, capacitors, etc., \nmay have parameters, such as width, length etc.\nTo be able to make the component compatible to Netlist exporting, those parameters should be added to the component. \nThe following code demonstrates how to add parameters to components.\n```\n# adding new params to inv\nnmos.set_spice_param('W', 200E-9)\nnmos.set_spice_param('L', 60E-9)\nnmos.set_spice_param('mult', 2)\nnmos.set_spice_param('nf', 0)\n\n# changing a specific parameter value in the component\nnmos.set_spice_param('nf',2)\n```\n\n## Other Commands\n\n-   A component can be created from an existing one(clone it):\n    ```\n    inv = Component('inv')\n    inv.add_pin(Input('A'))\n    inv.add_pin(Output('Z'))\n\n    inv_cloned = Component('inv2', inv)\n    ```\n-   Salamandra can use busses also:\n     ```\n    and_ = Component('and')\n    and_.add_pinbus(Bus(Input, 'A', 2))  # arguments: type-input, bus_name-A, width-2.\n    and_.add_pin(Output('Z'))\n\n    nand = Component('nand')\n    nand.add_pinbus(Bus(Input, 'A', 2))\n    nand.add_pin(Output('Z'))\n    nand.add_net(Net('A1A2'))\n\n    nand.add_subcomponent(and_, 'i_and')\n    nand.add_subcomponent(inv, 'i_inv')\n\n    nand.connect_bus('A', 'i_and.A')  # connect_bus for busses\n    nand.connect('A1A2', 'i_and.Z')\n    nand.connect('A1A2', 'i_inv.A')\n    nand.connect('Z', 'i_inv.Z')\n\n    # now the connectivity is:\n    #    //instances\n    #    and i_and(.A({A[1:0]}), .Z(A1A2));\n    #    inv i_inv(.A(A1A2), .Z(Z));\n\n    # you can disconnect them also\n    nand.disconnect('i_inv.Z')\n    nand.disconnect_bus('i_and.A')\n\n    # and after disconnect the connectivity is:\n    #    //instances\n    #    and i_and(.A(), .Z(A1A2));\n    #    inv i_inv(.A(A1A2), .Z());\n    ```\n-   Pins can also be connected to constants like 1'bx, 1'b1 or 1'b0\n\n-   And if you want to map constants('1', '0') to 'tiehi' and 'tielo' driver cells,\n    it can be done with hilomap function:\n    ```\n    tielo = Component('tielo')\n    tielo.add_pin(Output('Y'))\n\n    tiehi = Component('tiehi')\n    tiehi.add_pin(Output('Y'))\n\n    inv.add_pin(Inout('VDD'))\n    nand.connect(\"1'b1\", 'i_inv.VDD')\n\n    # relevant verilog print:\n    # \t//instances\n    #\tand i_and(.A(), .Z(A1A2));\n    #\tinv i_inv(.A(A1A2), .VDD(1'b1), .Z());  # 1'b1 connected to VDD\n\n    nand.hilomap(tiehi, tielo)\n\n    # relevant verilog print:\n    #\t//instances\n    #\tand i_and(.A(), .Z(A1A2));\n    #\tinv i_inv(.A(A1A2), .VDD(HI), .Z());  # connected VDD to tiehi output\n    #\ttiehi tiehi(.Y(HI));  # added tiehi instance to component\n    ```\n-   If you want to uniquify the instances in the netlist,\n    e.g., every instance of a component will be a new component,\n    you can do this using the ```uniq()``` function:\n    ```\n    nand.add_subcomponent(inv, 'i_inv2')  \n    # now there are two instances of inv component: 'i_inv1', 'i_inv2'\n    # relevant verilog print:\n    #\t//instances\n    #\tinv i_inv(.A(A1A2), .VDD(HI), .Z());\n    #\tinv i_inv2(.A(), .VDD(), .Z());\n\n    nand.uniq()\n\n    # now there are two components of inv(inv_0, inv_1), one for each instance\n    # relevant verilog print:\n    #\t//instances\n    #\tinv_0 i_inv(.A(A1A2), .VDD(HI), .Z());\n    #\tinv_1 i_inv2(.A(), .VDD(), .Z());\n    ```\n-   Salamandra also supports assignments using the `connect_nets()` function:\n    ```\n    inv = Component('inv')\n    inv.add_pin(Input('A'))  \n    inv.add_pin(Output('Z'))\n    # add_pin also add Net with same name attached to this pin\n    # you can disable it with add_pin_adds_net in Component\n\n    inv.connect_nets('A', 'Z')\n\n    # relevant verilog print:\n    #\t//assignments\n    #\tassign Z = A;\n    ```\n-   You can flatten your netlist using `flatten` function, this will flatten your\n    netlist until the physical components (checking with __is_physical flag):\n    ```\n    inv.set_is_physical(True)\n    and_.set_is_physical(True)\n\n    # we will add another wrapper to nand(that we saw earlier)\n    chip = Component('chip')\n    chip.add_pinbus(Bus(Input, 'A', 2))\n    chip.add_pin(Output('Z'))\n    chip.add_subcomponent(nand, 'nand')\n    chip.connect_bus('A', 'nand.A')\n    chip.connect('Z', 'nand.Z')\n\n    chip.print_verilog()\n    # relevant verilog print:\n    #\t//wires\n    #\twire [1:0] A;\n    #\twire Z;\n    #\n    #\t//instances\n    #\tnand nand(.A({A[1:0]}), .Z(Z));\n\n    chip.flatten()\n    chip.print_verilog()\n    # relevant verilog print:\n    #\t//wires\n    #\twire [1:0] A;\n    #\twire Z;\n    #\twire nand__A1A2;\n    #\n    #\t//instances\n    #\tand nand__i_and(.A({A[1:0]}), .Z(nand__A1A2));\n    #\tinv nand__i_inv(.A(nand__A1A2), .Z(Z));\n    ```\n    We can see that it added its inner nets, \n    subcomponents and their connectivity to itself,\n    adding the component name as a prefix (e.g., \"A1A2\" -> \"nand__A1A2\")\n\n-   You can also add properties to objects (pin/net/bus/component) like add tpd value to pin, or 'is_clk' flag\n    and after that you can filter pins (or subcomponents/nets...) like this:\n    ```\n    inv = Component('inv').set_property('is_optimized', True)  # set_property(property, value)\n    inv.add_pin(Input('A').set_property('tpd', 0.1))\n    inv.add_pin(Inout('VDD').set_property('is_supp', True))\n\n    # now we can get filterd pins as we wish\n    fast_pins = inv.get_pins(filter=lambda p: p.get_property('tpd') and p.get_property('tpd') < 0.2)\n    vdd_pins = inv.get_pins(filter=lambda p: p.get_property('is_supp'))\n    ```\n\n- If you want to get component's connectivity paths, you can get this with `connectivity_paths` method\n    which will return 3 dictionaries, one dict that has all connectivity, forward and backward of pins&nets.\n    second dict that has forward connectivity, and third backward connectivity.\n    for example:\n    ```     \n    all_connectivity_dict:\n       (('A',Input): [('A',Net)], ('A',Net): [('A',Input),('X.A',Input),..])\n\n    forward connectivity dict:\n       (('A',Input): [('A',Net)], ('A',Net): [('X.A',Input)], ('X.A',Input): [('X.O',Output)],..)\n    ```\n\n- Before you export your netlist you can add verilog code to your netlist:\n    ```\n    y = Net('y')\n    nand.add_net(y)\n    nand.add_verilog_code(\"\\tassign {}=1'b0;\".format(y.get_object_name()))\n\n    # relevant verilog print:\n    #\t//verilog code\n    #\tassign y=1'b0;\n    ```\n\n## Export Netlist\n-   Salamandra currently supports exporting netlists as verilog netlist or as spectre netlist (Cadence's spice simulator).\n    The following code will print the verilog netlist to STDOUT using `print_verilog`.\n    ```\n    my_design.print_verilog()\n    ```\n-   If you want it to also print all of its descendants (as modules) you can do that using the flag `include_descendants=True`:\n    ```\n    my_design.print_verilog(include_descendants=True)\n    ```\n    You can also write it to a file using `write_verilog_to_file(path)` with `append` flag if you want to append to the file,\n    whether it exist or not.\n\n-   Similarly, less recommended method for exporting into a file, you can use `write_verilog`. \n    The function returns a list of lines defining the component as a verilog module:\n    ```\n    f = open('module.v', 'w')\n    for l in sfpga.write_verilog():\n       f.write(l+'\\n')\n    f.close()\n    ```\n\n-   In a similar way you can print spectre netlist by using `print_spectre` like this:\n    ```\n    comp.print_spectre()\n    ```\n    or any of the verilog functions above, for spectre (`write_spectre_to_file`, etc.)\n\nNote: You might want to run `legalize()` on the component before exporting, to check for unexportable structures\nsuch as partially-connected busses. If it finds such problems, `legalize()` will try to fix\nwhat it can. For example, it will connect the undriven bits of a bus to ```{1'bx}``` and connect. \nunloaded outputs/inouts to ```UC_###``` nets.\n\n## Import Netlist\nSalamandra currently supports importing netlists from verilog and spectre netlists.\n`verilog2slm` is used to import a verilog netlist as components. \nThe following code will read the verilog netlist and convert it to components in salamandra:\n\n`components = verilog2slm_file('verilog_file.v')`\n\nit also supports reading an STD cells (takes only I/Os of the modules)\n\n`std_components = verilog2slm_file('std_cells.v',  is_std_cell=True)`\nNote: there is a sample std_cells.v file under `verilog_files/more`\n\nand if you want to enable implicit wires you can also\nenable it through the flag `implicit_wire=True`\n\nas well you can enable the flag `implicit_instance` to let salamandra guess components\nif it isn't shown in the text or not created before. \n\nThe same way you can import spectre netlist using `spectre2slm`:\n\n`comp = spectre2slm_file('spectre_file.scs', top_cell_name='comp')`\n\n## Contributions\nSalamandra was first developed by [Tzachi Noy](https://github.com/noytzach) for internal use at EnICS labs.\n[Bnayah Levy](https://github.com/SwarleyBL) later joined and helped cleaning, restructuring and adding lots of useful features.\n\nWe are open to contributions from the community. We follow the \"fork-and-pull\" Git workflow.\n* Fork the repo on GitHub\n* Clone the project to your own machine\n* Commit changes to your own branch\n* Push your work back up to your fork\n* Submit a Pull request so that we can review your changes\n\n**NOTE:** Be sure to merge the latest from \"upstream\" before making a pull request!\n\nFeel free to [submit](https://github.com/enics-labs/salamandra/issues) issues and enhancement requests.\n\n## Publication\nPlease acknowledge Salamandra if you use it in a \npublished or presented research project.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/enics-labs/salamandra",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "salamandra",
    "package_url": "https://pypi.org/project/salamandra/",
    "platform": "",
    "project_url": "https://pypi.org/project/salamandra/",
    "project_urls": {
      "EnICS Labs": "https://enicslabs.com/",
      "Homepage": "https://github.com/enics-labs/salamandra"
    },
    "release_url": "https://pypi.org/project/salamandra/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Framework for netlist manipulation",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10047226,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5720efc40e6a9c5abeb737e03ba1cad9758275e6da0e1432effe499fc252fbf",
          "md5": "8bd263ccaf50c6607da37ffa2bfb9710",
          "sha256": "d7d612849a22c1f2075dc4ba50dfce8fd0b3bfe14c8826dc965297e767e3fee7"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bd263ccaf50c6607da37ffa2bfb9710",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18223,
        "upload_time": "2020-09-24T17:15:05",
        "upload_time_iso_8601": "2020-09-24T17:15:05.190963Z",
        "url": "https://files.pythonhosted.org/packages/d5/72/0efc40e6a9c5abeb737e03ba1cad9758275e6da0e1432effe499fc252fbf/salamandra-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af057dbcb759f1e1f7c5488d9c53c786922a86802e644d07e0b60000e743bfe",
          "md5": "67b25be55c148c5fc2030ad884665b94",
          "sha256": "f86244ab49d65e75f7bfeba893e47e99b92bc0185cfaa3ddd0f0cc0dbc3217e5"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67b25be55c148c5fc2030ad884665b94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13678,
        "upload_time": "2020-09-24T17:15:15",
        "upload_time_iso_8601": "2020-09-24T17:15:15.058646Z",
        "url": "https://files.pythonhosted.org/packages/1a/f0/57dbcb759f1e1f7c5488d9c53c786922a86802e644d07e0b60000e743bfe/salamandra-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21fcbcf08ab9cb05ddf99cb19557e277cdf34536f0840617d6dd626b8e0b5ab",
          "md5": "868831043b3a69e50477060f2a3259ee",
          "sha256": "f3aa20b7f118cfb01c21ada64ae200f39c6a7537cd2f4cbb133e2dfeb0d66289"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "868831043b3a69e50477060f2a3259ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18458,
        "upload_time": "2020-09-24T17:15:08",
        "upload_time_iso_8601": "2020-09-24T17:15:08.466779Z",
        "url": "https://files.pythonhosted.org/packages/f2/1f/cbcf08ab9cb05ddf99cb19557e277cdf34536f0840617d6dd626b8e0b5ab/salamandra-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "445307c81269c9ebb91ee6f721a44b13597807187757cf4ea4cf58faca585cd4",
          "md5": "3aefd5f877b130ed0ff4d3c3aef1bf49",
          "sha256": "b0681b535b3100f0d683720a9a94628109c19d63c0158c5e2366cdd2a292c4bb"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3aefd5f877b130ed0ff4d3c3aef1bf49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18536,
        "upload_time": "2020-09-24T17:15:10",
        "upload_time_iso_8601": "2020-09-24T17:15:10.202779Z",
        "url": "https://files.pythonhosted.org/packages/44/53/07c81269c9ebb91ee6f721a44b13597807187757cf4ea4cf58faca585cd4/salamandra-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de6a1aea08416f3e28ac22342ef1bd3e339a68c29247ae1968288366dc8f9a3f",
          "md5": "84fa13f7dc938463dbbd57a8dee5968e",
          "sha256": "90f02bb9c6ce597f02a60f51699acc94080eaa5b1bed9675d6ae6ae174c8e98f"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84fa13f7dc938463dbbd57a8dee5968e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 2083,
        "upload_time": "2020-09-24T17:15:11",
        "upload_time_iso_8601": "2020-09-24T17:15:11.790777Z",
        "url": "https://files.pythonhosted.org/packages/de/6a/1aea08416f3e28ac22342ef1bd3e339a68c29247ae1968288366dc8f9a3f/salamandra-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d02bf619ac842d0db8fb4f0270b71d82b60fb64effc3b6be5af436ac9a5f2622",
          "md5": "0c280013227f071940014a486ce16859",
          "sha256": "97d16597fca6f0624bc0960a507c8228d8bdbf3b12d3e05f40051553611bc43e"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.3.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c280013227f071940014a486ce16859",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 22190,
        "upload_time": "2020-09-24T17:42:37",
        "upload_time_iso_8601": "2020-09-24T17:42:37.601762Z",
        "url": "https://files.pythonhosted.org/packages/d0/2b/f619ac842d0db8fb4f0270b71d82b60fb64effc3b6be5af436ac9a5f2622/salamandra-0.1.3.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43dcff7d3699b4b2a9ff906baac6d3ecbeba4ac8caa029287442c9044ea6bc43",
          "md5": "18ca82dd91d15c41a047307380de879d",
          "sha256": "9bb8c09da89d3a16edba189260b4e0b3277e63742761336d6709b6a3e20e0df6"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.3.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18ca82dd91d15c41a047307380de879d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 22201,
        "upload_time": "2020-09-24T18:17:08",
        "upload_time_iso_8601": "2020-09-24T18:17:08.016977Z",
        "url": "https://files.pythonhosted.org/packages/43/dc/ff7d3699b4b2a9ff906baac6d3ecbeba4ac8caa029287442c9044ea6bc43/salamandra-0.1.3.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.post3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4318d84a5169b4470c60b89df0f068507315a506106a52bdc6235aa388ce5052",
          "md5": "dad6063f31db38c9a5cdbef9eb11be7e",
          "sha256": "0323732f6b83c642cd1f841d99f5339b400abd3cfae603a9e0b23a2f50a376b6"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.3.post3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dad6063f31db38c9a5cdbef9eb11be7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 23321,
        "upload_time": "2020-10-05T12:26:42",
        "upload_time_iso_8601": "2020-10-05T12:26:42.805734Z",
        "url": "https://files.pythonhosted.org/packages/43/18/d84a5169b4470c60b89df0f068507315a506106a52bdc6235aa388ce5052/salamandra-0.1.3.post3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.post4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5738c07ab70936ce988fb602fa42a50ba4643038262267e278f057e69b90c153",
          "md5": "5c0c994d8afd36701033e4310d9d37bf",
          "sha256": "32fb6d677efd3f2db65d94440175a9ca62ab349721ac763e51ceb3b7d5509f95"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.3.post4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c0c994d8afd36701033e4310d9d37bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 23321,
        "upload_time": "2020-10-05T12:26:44",
        "upload_time_iso_8601": "2020-10-05T12:26:44.334849Z",
        "url": "https://files.pythonhosted.org/packages/57/38/c07ab70936ce988fb602fa42a50ba4643038262267e278f057e69b90c153/salamandra-0.1.3.post4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3.post5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50e70477c1fdda7c57ee5eb894ff163b3ff6f439ee1638a5732de7bfc4a7276f",
          "md5": "2721105b5d3317bb290bafed91529d16",
          "sha256": "7e6c19ae411897b5a3d2938eba194828a5b7638e1908f9c7b99b1a15fe3e2677"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.3.post5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2721105b5d3317bb290bafed91529d16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 23001,
        "upload_time": "2020-10-06T14:17:54",
        "upload_time_iso_8601": "2020-10-06T14:17:54.468672Z",
        "url": "https://files.pythonhosted.org/packages/50/e7/0477c1fdda7c57ee5eb894ff163b3ff6f439ee1638a5732de7bfc4a7276f/salamandra-0.1.3.post5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ae92c054bdaf487fdcc44d6c75ac0e19f5a2262a990e60b8c2432442eaaad8f",
          "md5": "411cd1c7631a8a12161118f38fc7f74a",
          "sha256": "259d3626459cea4dd2d52786198b8b7a7c57062ed26bb0100453b03a77c9efff"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "411cd1c7631a8a12161118f38fc7f74a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38739,
        "upload_time": "2021-02-11T17:50:23",
        "upload_time_iso_8601": "2021-02-11T17:50:23.763155Z",
        "url": "https://files.pythonhosted.org/packages/6a/e9/2c054bdaf487fdcc44d6c75ac0e19f5a2262a990e60b8c2432442eaaad8f/salamandra-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15bdc338218fa5a4ed7329bd219c1fd5aa356902bcfb8cbc83ac91b02ae5d71a",
          "md5": "8d98b89f8fd1268b701044e4b59bd78a",
          "sha256": "579ac4f11d7f94c801a1559ff0fb2b1605da3158740211d2b9a1e62a3a0d2094"
        },
        "downloads": -1,
        "filename": "salamandra-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d98b89f8fd1268b701044e4b59bd78a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38745,
        "upload_time": "2021-02-14T11:03:34",
        "upload_time_iso_8601": "2021-02-14T11:03:34.818259Z",
        "url": "https://files.pythonhosted.org/packages/15/bd/c338218fa5a4ed7329bd219c1fd5aa356902bcfb8cbc83ac91b02ae5d71a/salamandra-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c92eb3ccd7c97d09ac5d663d8eef8154efbb57f13fb66ac689a27d1367d2d40",
          "md5": "125149aa5f29c9000a079dbc4ffeef41",
          "sha256": "4b3fee2aba8f7a8229079f79f98760feffbb8114881a632e4eb3ff2ac856e490"
        },
        "downloads": -1,
        "filename": "salamandra-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "125149aa5f29c9000a079dbc4ffeef41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38839,
        "upload_time": "2021-02-21T14:11:05",
        "upload_time_iso_8601": "2021-02-21T14:11:05.474386Z",
        "url": "https://files.pythonhosted.org/packages/4c/92/eb3ccd7c97d09ac5d663d8eef8154efbb57f13fb66ac689a27d1367d2d40/salamandra-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.201": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1456b6151b209e65152ea3f55a0de6f0e8b3068a1e373df1d33c9a34ab657ab",
          "md5": "12376e3d84f034f9f400360203ef3572",
          "sha256": "51d498918b4ea328920da4734842e5dcf10c94126a5845df982749970dcb8264"
        },
        "downloads": -1,
        "filename": "salamandra-0.201-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12376e3d84f034f9f400360203ef3572",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 41110,
        "upload_time": "2021-03-14T16:00:31",
        "upload_time_iso_8601": "2021-03-14T16:00:31.334981Z",
        "url": "https://files.pythonhosted.org/packages/b1/45/6b6151b209e65152ea3f55a0de6f0e8b3068a1e373df1d33c9a34ab657ab/salamandra-0.201-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcca816b7a1de19626084ef887596d4795f2272789d76ca47ae8a4cf4ceb3484",
          "md5": "1c580ba86b8b40b1fe0dae5116ddfd9a",
          "sha256": "4c6ab328e33ed607fdb9bb1157b17ba2c0c9f1cb463a7718492d9eeb0cd3925a"
        },
        "downloads": -1,
        "filename": "salamandra-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c580ba86b8b40b1fe0dae5116ddfd9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 39835,
        "upload_time": "2021-03-26T09:47:25",
        "upload_time_iso_8601": "2021-03-26T09:47:25.525822Z",
        "url": "https://files.pythonhosted.org/packages/dc/ca/816b7a1de19626084ef887596d4795f2272789d76ca47ae8a4cf4ceb3484/salamandra-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6df45cab9c00a2da5dbc07df93e386c79e297723d301e8fb0969ed0841124f0",
          "md5": "cfdfc74381217540dfc4591f547ad726",
          "sha256": "ad56435687edd8ecd69ec6d92216b18ef1a27e8122767b27478f3700a2b7d6f6"
        },
        "downloads": -1,
        "filename": "salamandra-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfdfc74381217540dfc4591f547ad726",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 44818,
        "upload_time": "2021-04-13T07:37:51",
        "upload_time_iso_8601": "2021-04-13T07:37:51.462788Z",
        "url": "https://files.pythonhosted.org/packages/e6/df/45cab9c00a2da5dbc07df93e386c79e297723d301e8fb0969ed0841124f0/salamandra-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66e56fd1074edf0cb1089d39c3f37a9c260a55f9614badfb3dd33126ff2fe8bb",
          "md5": "8a20aa0a4d4360f321f5b0b70e403718",
          "sha256": "b9da6a7c0f46baf4a02ce65c48d5f149f7e5f3bb3a03a1474851841084b7f3e8"
        },
        "downloads": -1,
        "filename": "salamandra-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8a20aa0a4d4360f321f5b0b70e403718",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 42955,
        "upload_time": "2021-04-13T07:37:53",
        "upload_time_iso_8601": "2021-04-13T07:37:53.703062Z",
        "url": "https://files.pythonhosted.org/packages/66/e5/6fd1074edf0cb1089d39c3f37a9c260a55f9614badfb3dd33126ff2fe8bb/salamandra-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6df45cab9c00a2da5dbc07df93e386c79e297723d301e8fb0969ed0841124f0",
        "md5": "cfdfc74381217540dfc4591f547ad726",
        "sha256": "ad56435687edd8ecd69ec6d92216b18ef1a27e8122767b27478f3700a2b7d6f6"
      },
      "downloads": -1,
      "filename": "salamandra-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cfdfc74381217540dfc4591f547ad726",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 44818,
      "upload_time": "2021-04-13T07:37:51",
      "upload_time_iso_8601": "2021-04-13T07:37:51.462788Z",
      "url": "https://files.pythonhosted.org/packages/e6/df/45cab9c00a2da5dbc07df93e386c79e297723d301e8fb0969ed0841124f0/salamandra-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66e56fd1074edf0cb1089d39c3f37a9c260a55f9614badfb3dd33126ff2fe8bb",
        "md5": "8a20aa0a4d4360f321f5b0b70e403718",
        "sha256": "b9da6a7c0f46baf4a02ce65c48d5f149f7e5f3bb3a03a1474851841084b7f3e8"
      },
      "downloads": -1,
      "filename": "salamandra-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8a20aa0a4d4360f321f5b0b70e403718",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 42955,
      "upload_time": "2021-04-13T07:37:53",
      "upload_time_iso_8601": "2021-04-13T07:37:53.703062Z",
      "url": "https://files.pythonhosted.org/packages/66/e5/6fd1074edf0cb1089d39c3f37a9c260a55f9614badfb3dd33126ff2fe8bb/salamandra-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}