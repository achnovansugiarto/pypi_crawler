{
  "info": {
    "author": "Video Compression Team & MSU G&M Lab.",
    "author_email": "video-measure@compression.ru",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Conditions\nThis package is a wraper over [MSU VQMT](https://compression.ru/vqmt). It can be used **only if you have installed MSU VQMT [Pro or Premium](https://compression.ru/vqmt-pro) version 14.1 or higher**. There also possible to test the wrapper with [DEMO version](https://compression.ru/video/quality_measure/vqmt_download.html#free). If you are representing a company you can also [ask for trial](https://compression.ru/video/quality_measure/vqmt_download.html#free).\n\nThe package can perform measures only with the activated VQMT. However, if you have a valid activation code, VQMT can be activated using this package. Please, don't spread MSU VQMT activation code with your sources.\n\nPython wrapper is in BETA stage now, supplied \"as is\". You can report issues to video-measure@compression.ru.\n\n*It's not possible to use the wrapper with MSU VQMT 14.0 or earlier. It won't work with the free version either.*\n\n## How it works\nThis package will try to find VQMT shared library. In case of portable installation you should manually specify VQMT path. On Linux you should find `libvqmt.so`, on Windows -- `vqmt_finder.dll`.\n\nShared library is the part of MSU VQMT since version 14.1. It's not recommended (but possible) to use the shared library directly. You shouldn't distribute this shared library with your software or use it as a part of public service. If you need this, please refer to [MSU VQMT SDK](https://compression.ru/video/quality_measure/vqmt_sdk.html#sdk-back).\n\nThe package will load library as instalnce of `msu_vqmt.SharedInterface` class and will initialize VQMT. Using this object you can run any number of measurements without reinitialization.\n\n*To configure measurement use JSON-configuration as described in the [configuration description](https://videoprocessing.ai/vqmt/online-help-last/config/).*\n\n## Installation\nThis package is compatible with Python >=3.5. Run the following command to install (replacing `python3` with the local python command):\n```\npython3 -m pip install msu_vqmt\n```\n\n## Checking\nTo check if the package is able to find MSU VQMT shared library try the following code:\n```Python\nimport msu_vqmt\nvqmt = msu_vqmt.find()\n```\nMore details:\n```Python\nimport msu_vqmt\n\ntry :\n    vqmt = msu_vqmt.find()\nexcept Exception as e:\n    print('Unable to find or load VQMT: %s' % str(e))\n    exit(1)\n    \nvqmt_ver = vqmt.getVersionObject()\nprint('Found MSU VQMT %d.%d' % (vqmt_ver.maj, vqmt_ver.min))\n```\nIf you have a portable installation use `loadByDir` instead of `find`:\n```Python\nimport msu_vqmt\nvqmt = msu_vqmt.loadByDir(your_vqmt_path)\n```\nYou should specify path to\n* `libvqmt.so` On Linux, \n* `vqmt_finder.dll` on Windows.\n\nBy default `msu_vqmt.find` will try to find the latest VQMT. You can also specify desired version: `msu_vqmt.find(14)` or `msu_vqmt.find('14.1')`.\n\n## Activation\nIf your VQMT installation is already activated, skip this step. With MSU VQMT Pro of Premium activation code you have two alternatives:\n* activation via GUI (on Windows) or command-line (on Windows or Linux),\n* activation via Python-wrapper.\n\nThe first alternative is described in [MSU VQMT Documentation](https://videoprocessing.ai/vqmt/vqmt-doc-toc/).\nTo activate via Python-wrapper use the following scheme:\n```python\nimport msu_vqmt\n\n# replace the following line if you have portable installation:\nvqmt = msu_vqmt.find()\n\nif not vqmt.isActivated():\n    # premium activation:\n    result = vqmt.activate_premium(yout_premium_code)\n    \n    # or pro activation:\n    result = vqmt.activate_pro(your_pro_code)\n    \n    if not result:\n        print('Could not activate VQMT: %s' % vqmt.getError())\n    else:\n        print('Activation passed')\n```\n## Examples\n### Running measure\n```Python\nimport msu_vqmt\nimport json\nvqmt = msu_vqmt.find()\n\n# creating configuration\nconfig = msu_vqmt.Config()\nconfig.addMetric('psnr', component='Y')\nconfig.addFile('/path/to/source.mp4')\nconfig.addFile('/path/to/dist.mp4', startFrame=10, endFrame=20)\n\n# running configuration\ninvoke = vqmt.invoke(config)\ninvoke.start()\n\n# printing results\nprint(json.dumps(invoke.getColumns(), indent=2))       # columns of values table\nprint(invoke.getFrameNumbersAsArray())                 # returns numpy array\nprint(invoke.getValuesAsArray())                       # returns numpy matrix\nprint(json.dumps(invoke.getAccumulators(), indent=2))  # accumulators\n```\nYou can get list of all supported metrics. See section [Getting information](#Getting_information)\n### Troubleshooting\n```Python\n# creating vqmt and config...\n\ninvoke = vqmt.invoke(config)\nif not invoke:\n\tprint(invoke.getInitError())\n\tsys.exit(1)\n\t\n# running invoke..\n```\n### Running asynchronous\n```Python\nimport msu_vqmt\nimport json\nimport time\n\nvqmt = msu_vqmt.find()\n\n# add a lot of metrics\nconfig = msu_vqmt.Config()\nfor c in list('YUVRGBL') + ['YUV', 'RGB']:\n\tconfig.addMetric('psnr', component=c)\nfor c in list('YUVRGB'):\n\tconfig.addMetric('ssim', component=c)\n\tconfig.addMetric('msssim', component=c)\nconfig.addMetric('vmaf', component='Y')\n\n# and some files\nconfig.addFile('original.mp4')\nconfig.addFile('distorted.mp4')\n\n# running configuration\ninvoke = vqmt.invoke(config)\ninvoke.startAsynch()\n\n# wait initialization\ninvoke.waitPrepareComplete()\nprint('Initialization complete')\n\n# printing information about files and metrics\nprint(json.dumps(invoke.getColumns(), indent=2))\nprint(json.dumps(invoke.getFiles(), indent=2))\n\n# let VQMT run for 1s\ntime.sleep(1)\ninvoke.pause()\n\n# give it time to rest and then resume\nprint('Pause 3 sec.')\ntime.sleep(3)\n\nprint('Resuming')\ninvoke.resume()\n\n# finally wait for the end and print results\ninvoke.wait()\nprint('Complete measure')\nprint(json.dumps(invoke.getAccumulators(), indent=2))\n```\n### Getting values interactively\nThe following example will print computed values and log messages immediately.\n```Python\ndef value_cb(invoke, frame, col, val): \n    print('Frame %d col %d: %f' % (frame, col, val))\n    \ndef event_cb(data):\n\tprint(json.dumps(data,indent=2))\n\n# creating vqmt and config...\n\n# running measure\ninvoke = vqmt.invoke(config, event_cb, value_cb)\ninvoke.start()\n```\n### Configuring\nThe object of `msu_vqmt.Config` can be initialized using JSON-configuration as described in [configuration description](https://videoprocessing.ai/vqmt/online-help-last/config/).\n```Python\nimport msu_vqmt\nimport json\n\nvqmt = msu_vqmt.find()\n\nconfig = msu_vqmt.Config()\n\n# adding files with different reslution and a metric\nconfig.addFile('../media/sunflower720.mp4')\nconfig.addFile('../media/sunflower540.mp4')\nconfig.addMetric('psnr', component='Y')\n\n# vqmt will fail because geometry correction is disabled by default\ninvoke = vqmt.invoke(config)\ninvoke.start()\nassert invoke.getExitStatus() == 200  # Status 200 - failed\n\n\n# create another configuration with enabled geometry\nconfig_data = {\n    # configuring visualization\n    'vis': {\n        'enabled': True,\n        'output_directory': '/vis/path',\n        'compressor': 'h264'\n    },\n    # enabling input image resize\n    'geometry': {\n        'enabled': True\n    },\n    # configuring concurrency\n    'performance': {\n        'threads_number': 2,\n        'metric_parallelism': 2\n    }\n}\nconfig = msu_vqmt.Config(config_data)\n\n# adding files with different reslution and a metric\nconfig.addFile('../media/sunflower720.mp4')\nconfig.addFile('../media/sunflower540.mp4')\nconfig.addMetric('psnr', component='Y')\n\n# now should be ok\ninvoke = vqmt.invoke(config)\ninvoke.start()\nassert invoke.getExitStatus() == 100  # Status 100 - OK\n```\n### Using numpy matrix as source of input frames\n```Python\nimport msu_vqmt\nimport json\nimport numpy as np\n\nvqmt = msu_vqmt.find()\n\n# the callback will be invoked as soon as a frame is needed\ndef input_cb(invoke_id, file, frame, data, chan_mask):\n    # return None for error\n    if file not in ['file1', 'file2']: return       \n        \n    # return False for EOF\n    if frame >= 10: return False \n\n    # create solid image\n    multiplier = 10 if file == 'file1' else 8\n    img = np.ndarray([1280,720], dtype=np.ubyte)\n    img.fill(50 + frame * multiplier)\n    \n    # copy image to VQMT buffer\n    vqmt.copyImage(img, data, chan_mask)\n    \n    # return True for success\n    return True\n\nconfig = msu_vqmt.Config()\n\n# Adding two files. We specified fmt gray to have monochrome frames.\n# It's possible to use any picture type from \n# https://videoprocessing.ai/vqmt/online-help-last/picture-types/\nconfig.addFile(\"file1\", mode=\"callback\", \n               props={\"frames\":10, \"fmt\":\"gray\", \"w\": 1280, \"h\": 720})\nconfig.addFile(\"file2\", mode=\"callback\", \n               props={\"frames\":10, \"fmt\":\"gray\", \"w\": 1280, \"h\": 720})\n\n# adding metrics\nconfig.addMetric('psnr', component='Y')\nconfig.addMetric('ssim', component='Y')\n\n# setting up invoke object and running\ninvoke = vqmt.invoke(config)\ninvoke.setInputCallback(input_cb)\ninvoke.start()\n\n# printing results\nprint(\"Columns:\")\nprint(json.dumps(invoke.getColumns(), indent=2))\nprint(\"\\n\\nComputed values:\")\nframes = invoke.getFrameNumbersAsArray()\nvalues = invoke.getValuesAsArray()\nprint(np.column_stack((frames,values)))\nprint(\"\\n\\nAccumulators:\")\nprint(json.dumps(invoke.getAccumulators(), indent=2))\n```\n\nOutput of this script:\n```\nColumns:\n[\n  {\n    \"metric_name\": \"psnr\",\n    \"metric_variation\": \"\",\n    \"metric_aliases\": [\n      \"apsnr\"\n    ],\n    \"info_url\": \"https://www.compression.ru/video/quality_measure/info.html#psnr\",\n    \"device\": \"CPU\",\n    \"color_specification\": \"unspecified YUV-Y quantized\",\n    \"actual_colorspace\": \"YUV BT.709 Quantized\",\n    \"color_component\": \"Y\",\n    \"requested_components\": [\n      \"Y'/BT.709 Quantized\",\n      \"Y'/BT.709 Quantized\"\n    ],\n    \"compaired_files\": [\n      0,\n      1\n    ],\n    \"config_summary\": \"\",\n    \"uv-scale\": {\n      \"expected\": {\n        \"x\": 1,\n        \"y\": 1\n      },\n      \"real\": {\n        \"x\": 1,\n        \"y\": 1\n      }\n    },\n    \"value_id\": \"\",\n    \"col\": \"A\"\n  },\n  {\n    \"metric_name\": \"ssim\",\n    \"metric_variation\": \"superfast\",\n    \"metric_aliases\": [\n      \"ssim_superfast\"\n    ],\n    \"info_url\": \"https://www.compression.ru/video/quality_measure/info.html#ssim\",\n    \"device\": \"CPU\",\n    \"color_specification\": \"unspecified YUV-Y quantized\",\n    \"actual_colorspace\": \"YUV BT.709 Quantized\",\n    \"color_component\": \"Y\",\n    \"requested_components\": [\n      \"Y'/BT.709 Quantized\",\n      \"Y'/BT.709 Quantized\"\n    ],\n    \"compaired_files\": [\n      0,\n      1\n    ],\n    \"config_summary\": \"\",\n    \"uv-scale\": {\n      \"expected\": {\n        \"x\": 1,\n        \"y\": 1\n      },\n      \"real\": {\n        \"x\": 1,\n        \"y\": 1\n      }\n    },\n    \"value_id\": \"\",\n    \"col\": \"B\"\n  }\n]\n\n\nComputed values:\n[[  0.         100.           1.        ]\n [  1.          42.1102066    0.99942541]\n [  2.          36.08960342   0.99827111]\n [  3.          32.56777954   0.99696863]\n [  4.          30.06900406   0.99568194]\n [  5.          28.13080215   0.99447572]\n [  6.          26.54718018   0.99336535]\n [  7.          25.20824242   0.99235517]\n [  8.          24.04840469   0.9914369 ]\n [  9.          23.02535248   0.99060369]]\n\n\nAccumulators:\n{\n  \"total psnr\": {\n    \"A\": 27.56175422668457\n  },\n  \"mean\": {\n    \"A\": 36.779659271240234,\n    \"B\": 0.9952583909034729\n  },\n  \"harmonic mean\": {\n    \"A\": 30.929319381713867,\n    \"B\": 0.9952482581138611\n  },\n  \"min. val\": {\n    \"A\": 23.025352478027344,\n    \"B\": 0.9906036853790283\n  },\n  \"max. val\": {\n    \"A\": 100.0,\n    \"B\": 1.0\n  },\n  \"min. frame\": {\n    \"A\": 9,\n    \"B\": 9\n  },\n  \"max. frame\": {\n    \"A\": 0,\n    \"B\": 0\n  },\n  \"std dev\": {\n    \"A\": 21.801708221435547,\n    \"B\": 0.0031768325716257095\n  },\n  \"variance\": {\n    \"A\": 475.31451416015625,\n    \"B\": 1.009226525638951e-05\n  }\n}\n```\n### Getting information\n```Python\nimport msu_vqmt\nimport json\n\nvqmt = msu_vqmt.find()\nprint(json.dumps(vqmt.getVersion(), indent=2), end='\\n\\n')\nprint(\"1st Picture type\")\nprint(json.dumps(vqmt.getPictureTypes()[0], indent=2), end='\\n\\n')\nprint(\"1st Colorspace\")\nprint(json.dumps(vqmt.getColorspaces()[0], indent=2), end='\\n\\n')\nprint(\"1st Device\")\nprint(json.dumps(vqmt.getDevices()[0], indent=2), end='\\n\\n')\nprint(\"1st Metric\")\nprint(json.dumps(vqmt.getMetrics()[0], indent=2))\n```\nPossible output:\n```\n{\n  \"program_fullname\": \"MSU Video Quality Measurement Tool\",\n  \"program_shortname\": \"MSU VQMT\",\n  \"developer\": \"COMPRESSION.RU Team & MSU G&M Lab. Video Group\",\n  \"email\": \"video-measure@compression.ru\",\n  \"web_page\": [\n    \"https://compression.ru/vqmt\",\n    \"https://videoprocessing.ai/vqmt\"\n  ],\n  \"version\": {\n    \"full\": \"14.1 r12828\",\n    \"maj\": 14,\n    \"min\": 1,\n    \"rev\": 12828,\n    \"extra\": \"\"\n  },\n  \"edition\": \"Pro/Premium\",\n  \"system\": \"Windows\",\n  \"build_date\": \"May 26 2022\",\n  \"activation\": {\n    \"type\": \"Premium\",\n    \"activated\": true,\n    \"status\": \"Licensed at Jan 01 2010 for Company Name;\"\n  }\n}\n\n1st Picture type\n{\n  \"key\": \"ABGR32\",\n  \"name\": \"ABGR32\",\n  \"bps\": 8,\n  \"sample_type\": \"8-bit int\",\n  \"color_model\": \"RGB\",\n  \"subsampling\": \"Packed_444\",\n  \"order\": \"ABGR\",\n  \"description\": \"packed ABGR 444 8bps\"\n}\n\n1st Colorspace\n{\n  \"full_name\": \"CIE LUV\",\n  \"base_name\": \"LUV\",\n  \"model\": \"LUV\",\n  \"components\": [\n    {\n      \"short_name\": \"L\",\n      \"full_name\": \"L\",\n      \"min\": 0.0,\n      \"max\": 100.0\n    }\n  ],\n  \"standards\": [\n    \"CIE\"\n  ],\n  \"is_basic\": false,\n  \"is_linear\": true,\n  \"is_quantized\": false\n}\n\n1st Device\n{\n  \"id\": \"CPU\",\n  \"fullname\": \"CPU\",\n  \"variation\": \"[CPU] CPU\",\n  \"is_available\": true,\n  \"is_recommended\": true,\n  \"is_not_recommended\": false,\n  \"comment\": \"\",\n  \"technology\": \"general\",\n  \"type\": \"CPU\"\n}\n\n1st Metric\n{\n  \"usage\": \"psnr\",\n  \"info\": {\n    \"name\": \"psnr\",\n    \"variation\": \"\",\n    \"device\": \"CPU\",\n    \"inputs\": 2,\n    \"long_name\": \"Peak signal-to-noise ratio\",\n    \"url\": \"https://www.compression.ru/video/quality_measure/info.html#psnr\",\n    \"interface_name\": \"PSNR\",\n    \"interface_group_name\": \"PSNR\",\n    \"library_file\": \"\",\n    \"aliases\": [\n      \"apsnr\"\n    ]\n  },\n  \"possible_colors\": [\n    \"Y\",\n    \"U\",\n    \"V\",\n    \"R\",\n    \"G\",\n    \"B\",\n    \"LUV-L\",\n    \"RGB\",\n    \"YUV\"\n  ],\n  \"parameters\": {}\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/msu-video-group/vqmt_python",
    "keywords": "video,images,compression,codecs,quality,analysis",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "msu-vqmt",
    "package_url": "https://pypi.org/project/msu-vqmt/",
    "platform": null,
    "project_url": "https://pypi.org/project/msu-vqmt/",
    "project_urls": {
      "Homepage": "https://github.com/msu-video-group/vqmt_python"
    },
    "release_url": "https://pypi.org/project/msu-vqmt/0.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "MSU VQMT Python Wrapper package. This package requires installed MSU VQMT Pro or Premium",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14222029,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb312dfee8cae9a228a3a8d0fdcfd01b78fdb9769bd1e9042c8ff7a5851f0b1d",
          "md5": "d9dceab43a791d67002bb49f5f28a278",
          "sha256": "0329d7e9edf58ab19d1862f08d3ff1993b9ea8baa00c41e0e8bd2e9f51ddffb8"
        },
        "downloads": -1,
        "filename": "msu_vqmt-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9dceab43a791d67002bb49f5f28a278",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15880,
        "upload_time": "2022-06-08T13:50:32",
        "upload_time_iso_8601": "2022-06-08T13:50:32.501643Z",
        "url": "https://files.pythonhosted.org/packages/cb/31/2dfee8cae9a228a3a8d0fdcfd01b78fdb9769bd1e9042c8ff7a5851f0b1d/msu_vqmt-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "440bd4d53e66d3ca2ea792eed309b59184c9fe9331b1284075a1ec54bf14e8a1",
          "md5": "665d2656cd378def7740de611e013eb6",
          "sha256": "5b466152c433e2481285088712a2d54ee34b56720dd41843752072a92075f908"
        },
        "downloads": -1,
        "filename": "msu_vqmt-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "665d2656cd378def7740de611e013eb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15886,
        "upload_time": "2022-06-23T08:06:10",
        "upload_time_iso_8601": "2022-06-23T08:06:10.967368Z",
        "url": "https://files.pythonhosted.org/packages/44/0b/d4d53e66d3ca2ea792eed309b59184c9fe9331b1284075a1ec54bf14e8a1/msu_vqmt-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "440bd4d53e66d3ca2ea792eed309b59184c9fe9331b1284075a1ec54bf14e8a1",
        "md5": "665d2656cd378def7740de611e013eb6",
        "sha256": "5b466152c433e2481285088712a2d54ee34b56720dd41843752072a92075f908"
      },
      "downloads": -1,
      "filename": "msu_vqmt-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "665d2656cd378def7740de611e013eb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 15886,
      "upload_time": "2022-06-23T08:06:10",
      "upload_time_iso_8601": "2022-06-23T08:06:10.967368Z",
      "url": "https://files.pythonhosted.org/packages/44/0b/d4d53e66d3ca2ea792eed309b59184c9fe9331b1284075a1ec54bf14e8a1/msu_vqmt-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}