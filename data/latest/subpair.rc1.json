{
  "info": {
    "author": "",
    "author_email": "lfrati <lfrati.github@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n    <img width=\"300\" alt=\"Logo\" src=\"https://user-images.githubusercontent.com/3115640/203899211-fff1c9d8-10cd-4a84-88b5-518a591cd1e5.jpeg\">\n    <p align=\"center\">/s åb.p…õ…π/</p>\n</p>\n\n# SubPair  ![CI](https://github.com/lfrati/subpair/actions/workflows/test.yml/badge.svg)\n\n> \"All you need is love and _evolutionary matrix subset extraction_.\" - J. Lennon\n\nPairwise cosine distance is great to easily compare many vectors. However, you can end up with a very sizeable distance matrix. What if you would like to find a small subset of that matrix? Let's search it by evolution.\n\nGiven N elements and their (N,N) pairwise distance matrix we would like to get the subset of S elements such that the sum of elements in the corresponding (S,S) submatrix is minimal. See example below.\n\n```\n  [0  1  2  3  4] indeces \n      i  j     k    \n      ‚îÇ  ‚îÇ     ‚îÇ          i j k   = [1, 2, 4]\n   0  1  6  4  1                   \ni‚îÄ‚îÄ1  0  3  1  7       i  0 3 7     \nj‚îÄ‚îÄ6  3  0  2  3  -->  j  3 0 3  -->  7 + 3 + 3 = 13 üëé\n   4  1  2  0  1       k  7 3 0\nk‚îÄ‚îÄ1  7  3  1  0\n\n         i  j  k    \n         ‚îÇ  ‚îÇ  ‚îÇ          i j k  = [2, 3, 4]   \n   0  1  6  4  1                   \n   1  0  3  1  7       i  0 2 3     \ni‚îÄ‚îÄ6  3  0  2  3  -->  j  2 0 1  -->  2 + 1 + 3 = 6 üëç\nj‚îÄ‚îÄ4  1  2  0  1       k  3 1 0\nk‚îÄ‚îÄ1  7  3  1  0\n```\n\nAll the possible subsets are ${N}\\choose{S}$ and for N = 1024, S = 20 (like in the tests) we would have to check ${1024}\\choose{20}$ $= 5.479 \\times 10^{41}$ of them. \n\nA few too many. Instead we are going to use an evolutionary approach to search for it.\n\n# Example usage\n\nThe usage is quite straight forward since there are only a couple of functions exported `pairwise_cosine` and `extract`.\n\n```python\n>>> import matplotlib.pyplot as plt\n>>> from subpair import pairwise_cosine\n>>>\n>>> X = np.random.rand(N, K).astype(np.float32)\n>>> distances = pairwise_cosine(X) # (N,N)\n>>> ...\n>>> best, stats = extract(distances, P=200, S=S, K=50, M=3, O=2, its=3_000)\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3000/3000 [00:03<00:00, 817.42it/s]\n>>> plt.plot(stats[\"fits\"]); plt.show()\n```\n<p align=\"left\">\n    <img width=\"500\" alt=\"Logo\" src=\"https://user-images.githubusercontent.com/3115640/204059389-730df61a-4e87-4023-b7c7-038b329dc6a6.png\">\n    <p>(We have sprinkled a few negative numbers to see if the algorithm can find them)</p>\n</p>\nWhere the options of extract are parameters for the evolutionary algorithm:\n\n``` \ndistances (int, int) : N vectors of length L\n        P (int)      : population size\n        S (int)      : desired subset size <- determines size of output\n        K (int)      : number of parents (P-K children)\n        M (int)      : number of mutations\n        O (int)      : fraction of crossovers e.g. O=2 -> 1/2, O=10 -> 1/10, (bigger=faster)\n```\n\n# Note\n\nThis repo contains both numpy and numba/CUDA versions of the pairwise cosine distance matrix calculation. But numpy is already _blazingly_ fast so the cuda version is provided mostly for inspiration. Our numpy version is very similar to sklearn's [metrics.pairwise.cosine_distances](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_distances.html) but slightly faster. Sklearn's one has some extra nicities that our simplified version does not have.\n\n```bash\n> python flops.py # On Macbook pro M1 Max\nN=513 K=2304 GOPs=1\n  sklearn: 0.01s - 109.4 GFLOPS\n    numpy: 0.00s - 162.4 GFLOPS\n\nN=1027 K=2304 GOPs=2\n  sklearn: 0.02s - 135.9 GFLOPS\n    numpy: 0.01s - 192.4 GFLOPS\n\nN=2055 K=2304 GOPs=10\n  sklearn: 0.07s - 142.9 GFLOPS\n    numpy: 0.06s - 166.0 GFLOPS\n\nN=4111 K=2304 GOPs=39\n  sklearn: 0.20s - 195.8 GFLOPS\n    numpy: 0.16s - 248.6 GFLOPS\n\nN=8223 K=2304 GOPs=156\n  sklearn: 0.61s - 255.3 GFLOPS\n    numpy: 0.54s - 289.5 GFLOPS\n\nN=16447 K=2304 GOPs=623\n  sklearn: 2.11s - 295.4 GFLOPS\n    numpy: 1.79s - 347.9 GFLOPS\n```\n\n# Todo\n- [ ] Add type info to minimize.py to allow for AOT compilation.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "numpy,numba,evolution,pairwise-cosine",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "subpair",
    "package_url": "https://pypi.org/project/subpair/",
    "platform": null,
    "project_url": "https://pypi.org/project/subpair/",
    "project_urls": {
      "Homepage": "https://github.com/lfrati/subpair"
    },
    "release_url": "https://pypi.org/project/subpair/0.1.1/",
    "requires_dist": [
      "numpy",
      "numba",
      "tqdm",
      "bumpver ; extra == 'dev'",
      "pip-tools ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "matplotlib ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "pytest ; extra == 'testing'",
      "scipy ; extra == 'testing'",
      "scikit-learn ; extra == 'testing'"
    ],
    "requires_python": ">=3.9",
    "summary": "Fast pairwise cosine distance calculation and numba accelerated evolutionary matrix subset extraction",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16013081,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbaedd312e3233ac0137115fe0cf0372da35b43eac8db9fd60df5f1167e66aa2",
          "md5": "2794e4965a311286f3ea3f446d96aa23",
          "sha256": "a55ccb182fa3841589d9eed3edd3a746c42f107957898e55f84bf51abdf9f8ea"
        },
        "downloads": -1,
        "filename": "subpair-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2794e4965a311286f3ea3f446d96aa23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 7628,
        "upload_time": "2022-12-06T22:06:12",
        "upload_time_iso_8601": "2022-12-06T22:06:12.676649Z",
        "url": "https://files.pythonhosted.org/packages/fb/ae/dd312e3233ac0137115fe0cf0372da35b43eac8db9fd60df5f1167e66aa2/subpair-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09c6fbb4394423f7cadddc9b78d5ef6804bd071f3635a7d5af0469c23f128a29",
          "md5": "f5e065442b2690dc08e9a3c6ef269172",
          "sha256": "e3b51a8b9423358bfac561301b96e4ef167c1c74bd65cb7dfd0a69bb737a8600"
        },
        "downloads": -1,
        "filename": "subpair-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5e065442b2690dc08e9a3c6ef269172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 7632,
        "upload_time": "2022-12-06T22:06:15",
        "upload_time_iso_8601": "2022-12-06T22:06:15.423712Z",
        "url": "https://files.pythonhosted.org/packages/09/c6/fbb4394423f7cadddc9b78d5ef6804bd071f3635a7d5af0469c23f128a29/subpair-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbaedd312e3233ac0137115fe0cf0372da35b43eac8db9fd60df5f1167e66aa2",
        "md5": "2794e4965a311286f3ea3f446d96aa23",
        "sha256": "a55ccb182fa3841589d9eed3edd3a746c42f107957898e55f84bf51abdf9f8ea"
      },
      "downloads": -1,
      "filename": "subpair-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2794e4965a311286f3ea3f446d96aa23",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 7628,
      "upload_time": "2022-12-06T22:06:12",
      "upload_time_iso_8601": "2022-12-06T22:06:12.676649Z",
      "url": "https://files.pythonhosted.org/packages/fb/ae/dd312e3233ac0137115fe0cf0372da35b43eac8db9fd60df5f1167e66aa2/subpair-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09c6fbb4394423f7cadddc9b78d5ef6804bd071f3635a7d5af0469c23f128a29",
        "md5": "f5e065442b2690dc08e9a3c6ef269172",
        "sha256": "e3b51a8b9423358bfac561301b96e4ef167c1c74bd65cb7dfd0a69bb737a8600"
      },
      "downloads": -1,
      "filename": "subpair-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f5e065442b2690dc08e9a3c6ef269172",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 7632,
      "upload_time": "2022-12-06T22:06:15",
      "upload_time_iso_8601": "2022-12-06T22:06:15.423712Z",
      "url": "https://files.pythonhosted.org/packages/09/c6/fbb4394423f7cadddc9b78d5ef6804bd071f3635a7d5af0469c23f128a29/subpair-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}