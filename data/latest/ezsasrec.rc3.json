{
  "info": {
    "author": "Beomso0",
    "author_email": "univ3352@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# **ezSASRec**\n## Documentation\nhttps://ezsasrec.netlify.app\n\n## References\n\n### repos\n1. [kang205 SASRec](https://github.com/kang205/SASRec)\n2. [nnkkmto/SASRec-tf2](https://github.com/nnkkmto/SASRec-tf2)\n3. [microsoft recommenders](https://github.com/microsoft/recommenders)\n\n### papers\n1. [Self-Attentive Sequential Recommendation](https://arxiv.org/pdf/1808.09781.pdf)\n2. [A Case Study on Sampling Strategies for Evaluating Neural Sequential Item Recommendation Models](https://www.informatik.uni-wuerzburg.de/datascience/staff/dallmann/?tx_extbibsonomycsl_publicationlist%5Baction%5D=download&tx_extbibsonomycsl_publicationlist%5Bcontroller%5D=Document&tx_extbibsonomycsl_publicationlist%5BfileName%5D=main.pdf&tx_extbibsonomycsl_publicationlist%5BintraHash%5D=23f589b27e22018936753bb64b33971d&tx_extbibsonomycsl_publicationlist%5BuserName%5D=dallmann&cHash=dd7c54126f6c20972a502e9cc223cec2)\n\n---------------\n# **QuickStart**\nexample data source: https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset\n\n```python\nimport pandas as pd \nimport pickle\nfrom sasrec.util import filter_k_core, SASRecDataSet, load_model\nfrom sasrec.model import SASREC\nfrom sasrec.sampler import WarpSampler\nimport multiprocessing\n```\n\n## Preprocessing\n\n\n```python\npath = 'your path'\n```\n\n\n```python\ndf = pd.read_csv('ratings.csv')\ndf = df.rename({'userId':'userID','movieId':'itemID','timestamp':'time'},axis=1)\\\n       .sort_values(by=['userID','time'])\\\n       .drop(['rating','time'],axis=1)\\\n       .reset_index(drop=True)\n```\n\n\n```python\ndf.head()\n```\n\n  <div id=\"df-f0146c0d-8a79-4924-9daa-e3b1bad88db4\">\n    <div class=\"colab-df-container\">\n      <div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userID</th>\n      <th>itemID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2762</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>54503</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>112552</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>96821</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>5577</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n  </div>\n\n\n```python\n# filter data\n# every user and item will appear more than 6 times in filtered_df\n\nfiltered_df = filter_k_core(df, 7)\n```\n\n    Original: 270896 users and 45115 items\n    Final: 243377 users and 24068 items\n\n\n\n```python\n# make maps (encoder)\n\nuser_set, item_set = set(filtered_df['userID'].unique()), set(filtered_df['itemID'].unique())\nuser_map = dict()\nitem_map = dict()\nfor u, user in enumerate(user_set):\n    user_map[user] = u+1\nfor i, item in enumerate(item_set):\n    item_map[item] = i+1\n\nmaps = (user_map, item_map)   \n```\n\n\n```python\n# Encode filtered_df\n\nfiltered_df[\"userID\"] = filtered_df[\"userID\"].apply(lambda x: user_map[x])\nfiltered_df[\"itemID\"] = filtered_df[\"itemID\"].apply(lambda x: item_map[x])\n```\n\n```python\n# save data and maps\n\n# save sasrec data    \nfiltered_df.to_csv('sasrec_data.txt', sep=\"\\t\", header=False, index=False)\n\n# save maps\nwith open('maps.pkl','wb') as f:\n    pickle.dump(maps, f)\n```\n\n## Load data and Train model\n\n\n```python\n# load data\n\ndata = SASRecDataSet('sasrec_data.txt')\ndata.split() # train, val, test split\n              # the last interactions of each user is used for test\n              # the last but one will be used for validation\n              # others will be used for train\n```\n\n\n```python\n# make model and warmsampler for batch training\n\nmax_len = 100\nhidden_units = 128\nbatch_size = 2048\n\nmodel = SASREC(\n    item_num=data.itemnum,\n    seq_max_len=max_len,\n    num_blocks=2,\n    embedding_dim=hidden_units,\n    attention_dim=hidden_units,\n    attention_num_heads=2,\n    dropout_rate=0.2,\n    conv_dims = [hidden_units, hidden_units],\n    l2_reg=0.00001\n)\n\nsampler = WarpSampler(data.user_train, data.usernum, data.itemnum, batch_size=batch_size, maxlen=max_len, n_workers=multiprocessing.cpu_count())\n```\n\n\n```python\n# train model\n\nmodel.train(\n          data,\n          sampler,\n          num_epochs=3, \n          batch_size=batch_size, \n          lr=0.001, \n          val_epoch=1,\n          val_target_user_n=1000, \n          target_item_n=-1,\n          auto_save=True,\n          path = path,\n          exp_name='exp_example',\n        )\n```\n    epoch 1 / 3 -----------------------------\n\n    Evaluating...    \n\n    epoch: 1, test (NDCG@10: 0.04607630127474612, HR@10: 0.097)\n    best score model updated and saved\n\n\n    epoch 2 / 3 -----------------------------\n\n    Evaluating...    \n\n    epoch: 2, test (NDCG@10: 0.060855185638025944, HR@10: 0.118)\n    best score model updated and saved\n\n\n    epoch 3 / 3 -----------------------------\n\n    Evaluating...   \n\n    epoch: 3, test (NDCG@10: 0.07027207563856912, HR@10: 0.139)\n    best score model updated and saved\n\n\n## Predict\n\n\n```python\n# load trained model\n\nmodel = load_model(path,'exp_example')\n```\n\n### get score\n\n\n```python\n# get user-item score\n\n# make inv_user_map\ninv_user_map = {v: k for k, v in user_map.items()}\n\n# sample target_user\nmodel.sample_val_users(data, 100)\nencoded_users = model.val_users\n\n# get scores\nscore = model.get_user_item_score(data,\n                          [inv_user_map[u] for u in encoded_users], # user_list containing raw(not-encoded) userID \n                          [1,2,3], # item_list containing raw(not-encoded) itemID\n                          user_map,\n                          item_map,   \n                          batch_size=10\n                        )\n```\n    100%|██████████| 10/10 [00:00<00:00, 29.67batch/s]\n```python\nscore.head()\n```\n  <div id=\"df-556484ef-c5ea-4d4f-b3ec-ec343da88e4e\">\n    <div class=\"colab-df-container\">\n      <div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1525</td>\n      <td>5.596944</td>\n      <td>4.241653</td>\n      <td>3.804743</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1756</td>\n      <td>4.535607</td>\n      <td>2.694459</td>\n      <td>0.858440</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2408</td>\n      <td>5.883061</td>\n      <td>4.655960</td>\n      <td>4.691791</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2462</td>\n      <td>5.084695</td>\n      <td>2.942075</td>\n      <td>2.773376</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3341</td>\n      <td>5.532438</td>\n      <td>4.348150</td>\n      <td>4.073740</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### get recommendation\n\n\n```python\n# get top N recommendation \n\nreco = model.recommend_item(data,\n                            user_map,\n                            [inv_user_map[u] for u in encoded_users],\n                            is_test=True,\n                            top_n=5)\n```\n    100%|██████████| 100/100 [00:04<00:00, 21.10it/s]\n\n```python\n# returned tuple contains topN recommendations for each user\n\nreco\n```\n    {1525: [(456, 6.0680223),\n      (355, 6.033769),\n      (379, 5.9833336),\n      (591, 5.9718275),\n      (776, 5.8978705)],\n     1756: [(7088, 5.735977),\n      (15544, 5.5946136),\n      (5904, 5.500249),\n      (355, 5.492655),\n      (22149, 5.4117346)],\n     2408: [(456, 5.976555),\n      (328, 5.8824606),\n      (588, 5.8614006),\n      (264, 5.7114534),\n      (299, 5.649914)],\n     2462: [(259, 6.3445344),\n      (591, 6.2664876),\n      (295, 6.105361),\n      (355, 6.0698805),\n      (1201, 5.8477645)],\n     3341: [(110, 5.510764),\n      (1, 5.4927354),\n      (259, 5.4851904),\n      (161, 5.467624),\n      (208, 5.2486935)], ...}\n\n\n\n\n<!-- \n## Introduction\nThis repository contains tools to train, evaluate and save SASRec model.\n- - - \nOriginal codes and architectures are from \n  - https://github.com/kang205/SASRec\n  - https://github.com/microsoft/recommenders/tree/main/recommenders/models/sasrec\n\n## References\n1. [Self-Attentive Sequential Recommendation](https://arxiv.org/pdf/1808.09781.pdf)\n2. [A Case Study on Sampling Strategies for Evaluating Neural Sequential Item Recommendation Models](https://www.informatik.uni-wuerzburg.de/datascience/staff/dallmann/?tx_extbibsonomycsl_publicationlist%5Baction%5D=download&tx_extbibsonomycsl_publicationlist%5Bcontroller%5D=Document&tx_extbibsonomycsl_publicationlist%5BfileName%5D=main.pdf&tx_extbibsonomycsl_publicationlist%5BintraHash%5D=23f589b27e22018936753bb64b33971d&tx_extbibsonomycsl_publicationlist%5BuserName%5D=dallmann&cHash=dd7c54126f6c20972a502e9cc223cec2)\n\n## Quick Start\n### a. sas_evaluate\n\n- added parameters\n  - target_user_n=1000 : \n  - target_item_n=-1: metric 산출 시 target label(마지막 interaction) 외에 추가할 neg_candidate의 수 | -1일 경우 target label 및 해당 user의 train,valid에 활용된 아이템 제외한 모든 아이템을 neg_candidate에 포함\n  - rank_threshold=10 : NDCG@k 및 HR@k metrics의 k 값\n  - is_val : True -> validation score 계산 || False -> test score 계산\n  </br>\n- usage\n\n  ```python\n  sas_evaluate(test_model,data, target_user_n=1000, target_item_n=-1,rank_threshold=5)\n  ```\n### b. sas_train\n- added parameters\n  - target_user_n=1000 : for sas_evaluate\n  - target_item_n=-1: for sas_evaluate\n  - auto_save : 학습 시, best HR@10 score 모델을 자동으로 저장할지 여부 ([save_sasrec_model source code](custom_SASRec/custom_util.py))\n  - path : 저장 경로\n  - exp_name : 실험 이름 (저장 시 suffix)\n  </br>\n  \n- usage\n\n  ```python\n  sas_train(test_model,data,sampler,num_epochs=num_epochs, batch_size=batch_size, learning_rate=lr, val_epoch=5, target_user_n=10000, target_item_n=-1)\n  ```\n### c. sas_get_prediction\n- user에 대한 상위 n개 추천 아이템 산출\n- parameters\n  - model_ : SASRec model\n  - dataset : SASRecDATASET\n  - user_map_dict : {original : EncodedLabel} 형태의 dict\n  - user_id_list : 추천을 받고자 하는 user id의 list\n  - target_item_n : 추천 후보 수 \n    - randomly sampled\n    - 전체 후보 -> target_item_n = -1\n  - top_n : 추천 item 수 (상위 n개)\n  - exclude_purchased : 해당 user가 이미 구매한 item을 추천 후보에서 제외할지 여부\n  - is_test : 각 user의 sequence에서 마지막 1개 item(test target)을 제외한 sequence를 기반으로 추천할지 여부.\n- return\n  ```\n  {user_id : [(encoded_item_id, pred_score) ...]}\n  ```\n    </br>\n  \n- usage\n\n  ```python\n  pred = sas_get_prediction(loaded_model,data,user_map,user_id_list,is_test=True)\n  ```\n### d. sas_predict\n- added parameters\n  - neg_cand_n: test target 외에 추가된 neg_candidates의 수.\n    -  행렬 연산이 끝난 뒤에 output(test_logits)을 reshape할 때 필요함\n    - 학습 및 평가 시에는 sas_evaluate 함수에서 자동으로 값을 전달\n    - 최종 배포 시에는 ```neg_cand_n=0```으로 지정\n\n## 2. custom_util\nsave and load SASRec model\n### a. save_sasrec_model\n- 학습이 완료된 SASRec 객체의 weight와 args를 각각 파일로 저장함.\n</br>\n- usage\n\n  ```python\n  save_sasrec_model(test_model, path, exp_name='save_test')\n  ```\n  </br>\n\n- parameters\n  - model: SASRec 객체\n  - path: 저장할 경로 (저장 시 path 아래에 exp_name의 폴더 생성)\n  - exp_name: 실험(모델) 이름을 suffix로 추가\n- outputs\n  - {exp_name}_weights : 학습된 모델의 weights들을 담은 파일\n  - {exp_name}_train_log.txt : model의 parameter와 update log 확인 가능\n  - {exp_name}_model_args : SASRec 모델의 parameter dict를 담은 binary 파일\n\n### b. load_sasrec_model\n- save_sasrec_model로 저장한 SASRec 객체의 weight와 args 파일을 불러와서 SASRec 객체 생성\n</br>\n- usage\n\n  ```python\n  loaded_model = load_sasrec_model(path, exp_name='save_test')\n  ```\n\n- parameters\n  - path: 파일**들**이 저장된 경로\n  - exp_name: 실험(모델) 이름\n    - save 시 지정한 suffix -->\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beomso0/ezSASRec",
    "keywords": "sasrec,recommendation,sequential",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezSASRec",
    "package_url": "https://pypi.org/project/ezSASRec/",
    "platform": null,
    "project_url": "https://pypi.org/project/ezSASRec/",
    "project_urls": {
      "Homepage": "https://github.com/beomso0/ezSASRec"
    },
    "release_url": "https://pypi.org/project/ezSASRec/1.0.1/",
    "requires_dist": [
      "tensorflow",
      "numpy",
      "pandas",
      "tqdm"
    ],
    "requires_python": ">=3.7",
    "summary": "easy SASRec",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14053630,
  "releases": {
    "0.8.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdc1547be3e30b3a6d1734d98e2db6126d6e27a3cd4c2b4ba7b678592334205e",
          "md5": "62a0c905cb815fc04076c25c63f7a950",
          "sha256": "fe20cc0a3404e25bf326d72574f911db3664e2c3960c3db9b153b8969fc1be12"
        },
        "downloads": -1,
        "filename": "ezSASRec-0.8.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62a0c905cb815fc04076c25c63f7a950",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16613,
        "upload_time": "2022-06-05T06:02:32",
        "upload_time_iso_8601": "2022-06-05T06:02:32.345551Z",
        "url": "https://files.pythonhosted.org/packages/bd/c1/547be3e30b3a6d1734d98e2db6126d6e27a3cd4c2b4ba7b678592334205e/ezSASRec-0.8.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91baa17cacc9f70c71a82839e28393e63445ee97c157306bf62932cd7754a528",
          "md5": "976b505696dd682c8b8c690ae34a6c6f",
          "sha256": "c8ddee6e3627bed84705920b90bf321908be641dc37da6ea1b5fea15a84e60c9"
        },
        "downloads": -1,
        "filename": "ezSASRec-0.8.9.tar.gz",
        "has_sig": false,
        "md5_digest": "976b505696dd682c8b8c690ae34a6c6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15910,
        "upload_time": "2022-06-05T06:02:34",
        "upload_time_iso_8601": "2022-06-05T06:02:34.822894Z",
        "url": "https://files.pythonhosted.org/packages/91/ba/a17cacc9f70c71a82839e28393e63445ee97c157306bf62932cd7754a528/ezSASRec-0.8.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e9abe0c43c376edcf9614f6485e7487504fc36c3a86fecd08bc72141909981",
          "md5": "f9bd4cdbe83d850d743218903b7347f0",
          "sha256": "3a5823961f574537ca513a546909695317858b107eaff8adfb1725bb3fcdf741"
        },
        "downloads": -1,
        "filename": "ezSASRec-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9bd4cdbe83d850d743218903b7347f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19974,
        "upload_time": "2022-06-07T06:40:08",
        "upload_time_iso_8601": "2022-06-07T06:40:08.054073Z",
        "url": "https://files.pythonhosted.org/packages/38/e9/abe0c43c376edcf9614f6485e7487504fc36c3a86fecd08bc72141909981/ezSASRec-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01a95bda82daeac4767e2a8355ca3b1101f3c740ce4e4cc050e539575050af21",
          "md5": "8bc9cf6ed6274a79652e68e542b31c85",
          "sha256": "1654adda9bdac8d60cc401245c01e701bc2cb52eba7d5659507a3b6e661daf79"
        },
        "downloads": -1,
        "filename": "ezSASRec-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8bc9cf6ed6274a79652e68e542b31c85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19818,
        "upload_time": "2022-06-07T06:40:10",
        "upload_time_iso_8601": "2022-06-07T06:40:10.407750Z",
        "url": "https://files.pythonhosted.org/packages/01/a9/5bda82daeac4767e2a8355ca3b1101f3c740ce4e4cc050e539575050af21/ezSASRec-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9307bb4bf4d37fed6435bd68ab8e844c5f79c9061df30f8f31e2cf264dc4c9c1",
          "md5": "99db32f02735e0145e6096d9728575b5",
          "sha256": "40584777c6754b5812107e1f5c21600eaa6549a9991ad9c765e515a4c49a1d66"
        },
        "downloads": -1,
        "filename": "ezSASRec-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99db32f02735e0145e6096d9728575b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18786,
        "upload_time": "2022-06-07T07:14:54",
        "upload_time_iso_8601": "2022-06-07T07:14:54.122338Z",
        "url": "https://files.pythonhosted.org/packages/93/07/bb4bf4d37fed6435bd68ab8e844c5f79c9061df30f8f31e2cf264dc4c9c1/ezSASRec-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e52f6bec44940ec6bcdd17e4489c3db8cd3c7c0d667eb411bb0da1fd1cb73c08",
          "md5": "824e3cfe496e1c5de28efd8f603f7790",
          "sha256": "87b9e972b53ba72748e754a22a8501cf80aa7d5c3bb1916f381f55c6bf372637"
        },
        "downloads": -1,
        "filename": "ezSASRec-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "824e3cfe496e1c5de28efd8f603f7790",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18232,
        "upload_time": "2022-06-07T07:14:56",
        "upload_time_iso_8601": "2022-06-07T07:14:56.493437Z",
        "url": "https://files.pythonhosted.org/packages/e5/2f/6bec44940ec6bcdd17e4489c3db8cd3c7c0d667eb411bb0da1fd1cb73c08/ezSASRec-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9307bb4bf4d37fed6435bd68ab8e844c5f79c9061df30f8f31e2cf264dc4c9c1",
        "md5": "99db32f02735e0145e6096d9728575b5",
        "sha256": "40584777c6754b5812107e1f5c21600eaa6549a9991ad9c765e515a4c49a1d66"
      },
      "downloads": -1,
      "filename": "ezSASRec-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "99db32f02735e0145e6096d9728575b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18786,
      "upload_time": "2022-06-07T07:14:54",
      "upload_time_iso_8601": "2022-06-07T07:14:54.122338Z",
      "url": "https://files.pythonhosted.org/packages/93/07/bb4bf4d37fed6435bd68ab8e844c5f79c9061df30f8f31e2cf264dc4c9c1/ezSASRec-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e52f6bec44940ec6bcdd17e4489c3db8cd3c7c0d667eb411bb0da1fd1cb73c08",
        "md5": "824e3cfe496e1c5de28efd8f603f7790",
        "sha256": "87b9e972b53ba72748e754a22a8501cf80aa7d5c3bb1916f381f55c6bf372637"
      },
      "downloads": -1,
      "filename": "ezSASRec-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "824e3cfe496e1c5de28efd8f603f7790",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 18232,
      "upload_time": "2022-06-07T07:14:56",
      "upload_time_iso_8601": "2022-06-07T07:14:56.493437Z",
      "url": "https://files.pythonhosted.org/packages/e5/2f/6bec44940ec6bcdd17e4489c3db8cd3c7c0d667eb411bb0da1fd1cb73c08/ezSASRec-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}