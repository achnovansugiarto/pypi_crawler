{
  "info": {
    "author": "patractlabs",
    "author_email": "polkadev@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "# Himalia PatractPy\n\nSubstrate Contract SDK for Python As a part of Himalia\n\n----------\n\nPatractPy is a contract SDK to support the development of Python scripts that interact with contracts, including automated scripts to support testing. Unlike PatractGo, PatractPy is mainly for script development, so PatractPy mainly completes contract-related RPC interfaces, and completes contract deployment and instantiation-related operations.\n\nPatractPy will provide support for [europa](https://github.com/patractlabs/europa) env, which is a good environment for contract exec sandbox,\nWith PatractPy, we can write contract unittest by python, which is more friendly to developer and can easy use other test tools.\n\nPatractPy will be based on [polkascan's Python Substrate Interface](https://github.com/polkascan/py-substrate-interface), which is a Python sdk for Substrate.\n\nElement Group for disscusion: https://app.element.io/#/room/#PatractLabsDev:matrix.org\n\nPatractPy will achieve the following support:\n\n- Some support that missing in [polkascan's Python Substrate Interface](https://github.com/polkascan/py-substrate-interface), which is needed for contracts\n- Provide Scanning and monitoring support for contract to do statistics and analysis\n- Provide a SDK development example for ERC20 contract\n- Support For unittest to canvas or [europa](https://github.com/patractlabs/europa) env.\n\n## Usage\n\nThe sdk is in [https://pypi.org/project/patract-interface/0.3.1/](https://pypi.org/project/patract-interface/0.3.1/)\n\ninstall package:\n\n```bash\npip3 install -U patract-interface \n```\n\nuse in python:\n\n```python\nfrom patractinterface import ContractFactory, ContractAPI\n\n... So something ...\n```\n\n### Quick start\n```python\nimport os\nfrom substrateinterface import SubstrateInterface, Keypair\nfrom patractinterface.contract import ContractAPI, ContractFactory\nfrom patractinterface.observer import ContractObserver\n\ndef main():\n    # use [europa](https://github.com/patractlabs/europa) as test node endpoint, notice `type_registry` should set correctly.\n    substrate=SubstrateInterface(url='ws://127.0.0.1:9944', type_registry_preset=\"default\", type_registry={'types': {'LookupSource': 'MultiAddress'}})\n    # load deployer key\n    alice = Keypair.create_from_uri('//Alice')\n    bob = Keypair.create_from_uri('//Bob')\n    # 1. load a contract from WASM file and metadata.json file (Those files is complied by [ink!](https://github.com/paritytech/ink))\n    # in this example, we use `ink/example/erc20` contract as example.\n    contract = ContractFactory.create_from_file(\n            substrate=substrate, # should provide a subtrate endpoint\n            code_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.wasm'),\n            metadata_file= os.path.join(os.path.dirname(__file__), 'res', 'erc20.json')\n        )\n    # 2. instantiate the uploaded code as a contract instance\n    erc20_ins = contract.new(alice, 1000000 * (10 ** 15), endowment=2*10**10, gas_limit=20000000000, deployment_salt=\"0x12\")\n    # 2.1 create a observer to listen event\n    observer = ContractObserver(erc20_ins.contract_address, erc20_ins.metadata, substrate)\n    # 3. send a transfer call for this contract\n    res = erc20_ins.transfer(alice, bob.ss58_address, 100000, gas_limit=20000000000)\n    print('transfer res', res.is_success)\n\n    def on_transfer(num, evt):\n        print(\"on_transfer in {} : {} {} {}\".format(num, evt['from'], evt['to'], evt['value']))\n\n    def on_approval(num, evt):\n        print(\"on_approval in {} : {} {} {}\".format(num, evt['owner'], evt['spender'], evt['value']))\n    # 4 set event callback \n    observer.scanEvents(handlers={\n        'Transfer': on_transfer,\n        'Approve': on_approval\n    })\n\nif __name__ == \"__main__\":\n    main()\n    pass\n```\n\n## Test\n\nFor Unittest, should install [europa](https://github.com/patractlabs/europa) at first.\n\n```bash\n# install v1.0.0 europa to local\ncargo install europa --git=https://github.com/patractlabs/europa --tag=v1.0.0 --force --locked\n# check europa version\neuropa --version\n```\n\nAll of test pased by europa environment.\n\nInstall `pytest` and `executor` to run test:\n\n```bash\npip3 install pytest\npip3 install executor\npytest ./test --log-cli-level info \n```\n\n## Basic Apis For Contracts\n\nAs [polkascan's Python Substrate Interface](https://github.com/polkascan/py-substrate-interface) has provide some support to contract api, so we not need to important the api for contract calls, but there is some api to add:\n\n- `SubstrateSubscriber` is a subscriber support to subscribe data changes in chain, for example, the events in chain.\n- `get_contract_event_type` add event decode support for contracts.\n\nThe basic api split into 2 parts:\n- Contract, include:\n  - contractExecutor: This api could construct an extrinsic to call a contract, would be packed into a block and change state.\n  - contractReader: This api could construct a rpc request to call a contract, do not pack into a block and do not change any state.\n  - contractCreator: This api is used for `instantiate` a contract and holding the WASM code and metadata, receive following parameters:\n    - `gas_limit`\n    - `endowment`\n    - `deployment_salt` (`salt` parameter in `instantiate`)\n  - ContractAPI: This api is used for `call` a contract, is a wrapper for `contractExecutor` and `contractReader`, developers could use this api to react with contracts. This api could create a instance depends on the metadata, auto generate the contract access functions based on the contract. And the auto-gen functions receive the parameters which defined in contracts, besides receive following common parameters:\n    - `gas_limit`\n    - `value` (notice, if current call's `payable` is false, this `value` must be `0`)\n  - ContractFactory: This api is used for constructing a contract instance in python, and developer could use this instance to access contract. This is a wrapper for `contractCreator` and `ContractAPI`\n- Observer, include:\n  - ContractObserver: This api is used for listen the events in contracts. \n\nAll methods which belong to the instance of `ContractAPI` and `ContractFactory` **receive a keypair as the first parameter**, as the sender for this operation. And from the second parameter, receive the parameters defined in contracts.\n\n### `ContractFactory` and `ContractAPI` is used to react with contracts\nwe add a factory to put code and deploy contracts to chain:\n\n```python\n    factory = ContractFactory.create_from_file(\n        substrate=substrate, \n        code_file=os.path.join(os.path.dirname(__file__), 'contract', 'erc20.wasm'),\n        metadata_file=os.path.join(os.path.dirname(__file__), 'contract', 'erc20.json')\n    )\n\n    # this api is `ContractAPI`\n    api = factory.new(alice, 1000000 * (10 ** 15), endowment=10**15, gas_limit=1000000000000)\n    print(api.contract_address) # contract_address is the deployed contract\n```\n\nThe factory will generate constructors from metadata file.\n\nWe add api by metadata for Contract, api will auto generate caller for contract from metadata:\n\n```python\n# create a ContractAPI from an existed contract address\napi = ContractAPI(contract_address, contract_metadata, substrate)\n\n# api will auto generate caller for contract from metadata\nalice_balance_old = api.balance_of(bob, alice.ss58_address) # bob is the keypair for `//Bob`\n\nres = api.transfer(alice, bob.ss58_address, 100000, gas_limit=20000000000)\nlogging.info(f'transfer res {res.error_message}')\nprint(res.is_success)\n\nalice_balance = api.balance_of(bob, alice.ss58_address)\nlogging.info(f'transfer alice_balance {alice_balance}')\n\nbob_balance = api.balance_of(bob, bob.ss58_address)\nlogging.info(f'transfer bob_balance {bob_balance}')\n```\n\nThe api will generate exec and read api from metadata file, for example:\n\n```json\n      {\n        \"args\": [\n          {\n            \"name\": \"owner\",\n            \"type\": {\n              \"displayName\": [\n                \"AccountId\"\n              ],\n              \"type\": 5\n            }\n          }\n        ],\n        \"docs\": [\n          \" Returns the account balance for the specified `owner`.\",\n          \"\",\n          \" Returns `0` if the account is non-existent.\"\n        ],\n        \"mutates\": false,\n        \"name\": [\n          \"balance_of\"\n        ],\n        \"payable\": false,\n        \"returnType\": {\n          \"displayName\": [\n            \"Balance\"\n          ],\n          \"type\": 1\n        },\n        \"selector\": \"0x56e929b2\"\n      },\n```\n\nIn api, can call by:\n\n```python\nbob_balance = api.balance_of(bob, bob.ss58_address)\nlogging.info(f'transfer bob_balance {bob_balance}')\n```\n\n### `ContractObserver` is used to listen contracts events\n\nContractObserver can observer events for a contract:\n\n```python\nsubstrate=SubstrateInterface(url=\"ws://127.0.0.1:9944\", type_registry_preset='canvas')\ncontract_metadata = ContractMetadata.create_from_file(\n    metadata_file=os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json'),\n    substrate=substrate\n)\nobserver = ContractObserver(\"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48\", contract_metadata, substrate)\n\n# for some handlers (callbacks)\nobserver.scanEvents()\n```\n\nThe handler function can take the erc20 support as a example.\n\n## Special case: ERC20 API\nExcept react contract by `ContractAPI`, developers could create the wrapper by themself to react with corresponding contract. `py-contract` create an `ERC20 API` as an example to show this.\n\nERC20 api provide a wapper to erc20 contract exec, read and observer events, it can be a example for contracts api calling.\n\n```python\n\n# init api\nsubstrate=SubstrateInterface(url=\"ws://127.0.0.1:9944\", type_registry_preset='canvas')\n\ncontract_metadata = ContractMetadata.create_from_file(\n    metadata_file=os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json'),\n    substrate=substrate\n)\n\nalice = Keypair.create_from_uri('//Alice')\nbob = Keypair.create_from_uri('//Bob')\n\n# erc20 api\nerc20 = ERC20.create_from_contracts(\n    substrate= substrate, \n    contract_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.wasm'),\n    metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n)\n\n# deplay a erc20 contract\nerc20.instantiate_with_code(alice, 1000000 * (10 ** 15))\n\n# read total supply\ntotal_supply = erc20.totalSupply()\n\n# transfer\nerc20.transfer_from(alice,\n    from_acc=alice.ss58_address, \n    to_acc=bob.ss58_address, \n    amt=10000)\n\nerc20.transfer(alice, bob.ss58_address, 10000)\n\n# get balance\nalice_balance = erc20.balance_of(alice.ss58_address)\n\n# approve\nerc20.approve(alice, spender=bob.ss58_address, amt=10000)\n\n# get allowance\nalice_allowance = erc20.allowance(alice.ss58_address, bob.ss58_address)\n\n```\n\n`ERC20Observer` is a event observer for erc20 contract:\n\n```python\nobserver = ERC20Observer.create_from_address(\n    substrate = substrate, \n    contract_address = contract_address,\n    metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n)\n\ndef on_transfer(num, evt):\n    logging.info(\"on_transfer in {} : {} {} {}\".format(num, evt['from'], evt['to'], evt['value']))\n\ndef on_approval(num, evt):\n    logging.info(\"on_approval in {} : {} {} {}\".format(num, evt['owner'], evt['spender'], evt['value']))\n\n\nobserver.scanEvents(on_transfer = on_transfer, on_approval = on_approval)\n```\n\n### Observer For Contracts\n\n`ContractObserver` is a observer to listen events by contract with a given address:\n\n```python\nobserver = ContractObserver.create_from_address(\n    substrate = substrate, \n    contract_address = 'contract_address',\n    metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n)\n\ndef on_transfer(num, evt):\n    logging.info(\"on_transfer in {} : {} {} {}\".format(num, evt['from'], evt['to'], evt['value']))\n\ndef on_approval(num, evt):\n    logging.info(\"on_approval in {} : {} {} {}\".format(num, evt['owner'], evt['spender'], evt['value']))\n\nobserver.scanEvents(from_num, to_num, {\n    'Transfer': on_transfer,\n    'Approve': on_approval\n})\n```\n\n`handlers` is a hander dictionary by name to hander function.\n\n## Unittest Node Environment\n\nPatractPy can support write contract unittest by node environment.\n\nAt First We need install [europa](https://github.com/patractlabs/europa).\n\n```python\nfrom patractinterface.contracts.erc20 import ERC20\nfrom patractinterface.unittest.env import SubstrateTestEnv\n\nclass UnittestEnvTest(unittest.TestCase):\n    @classmethod\n    def setUp(cls):\n        # start env or use canvas for a 6s block\n        cls.env = SubstrateTestEnv.create_europa(port=39944)\n        cls.env.start_node()\n\n        cls.api = SubstrateInterface(url=cls.env.url(), type_registry_preset=cls.env.typ(), type_registry=cls.env.types())\n        cls.alice = Keypair.create_from_uri('//Alice')\n        cls.bob = Keypair.create_from_uri('//Bob')\n\n        cls.erc20 = ERC20.create_from_contracts(\n            substrate= cls.substrate, \n            contract_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.wasm'),\n            metadata_file= os.path.join(os.path.dirname(__file__), 'constracts', 'ink', 'erc20.json')\n        )\n        cls.erc20.instantiate_with_code(alice, 1000000 * (10 ** 15))\n\n        return\n\n    def tearDown(cls):\n        cls.env.stop_node()\n\n    def test_transfer(self):\n        self.erc20.transfer_from(alice,\n            from_acc=alice.ss58_address, \n            to_acc=bob.ss58_address, \n            amt=10000)\n        # some more test case\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\nBy example, we can use python to write testcase for some complex logics, by [europa](https://github.com/patractlabs/europa), we can test the contracts for python scripts.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patractlabs/py-patract",
    "keywords": "contract interface polkascan polkadot substrate blockchain rpc kusama",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "patract-interface",
    "package_url": "https://pypi.org/project/patract-interface/",
    "platform": "",
    "project_url": "https://pypi.org/project/patract-interface/",
    "project_urls": {
      "Homepage": "https://github.com/patractlabs/py-patract"
    },
    "release_url": "https://pypi.org/project/patract-interface/0.3.4/",
    "requires_dist": [
      "websocket-client (>=0.57.0)",
      "base58 (>=2.0.1)",
      "certifi (>=2020.11.8)",
      "idna (>=2.8)",
      "requests (>=2.25.0)",
      "xxhash (>=1.3.0)",
      "scalecodec (>=0.10.41)",
      "py-sr25519-bindings (>=0.1.2)",
      "py-ed25519-bindings (>=0.1.2)",
      "py-bip39-bindings (>=0.1.6)",
      "executor (>=23.2)",
      "scalecodec (>=0.11.0)",
      "substrate-interface (>=0.13.2)",
      "coverage ; extra == 'test'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Substrate Contract SDK for Python As a part of Himalia",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10573635,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13d22bef471a96236074ed10cd349c44e110d45cbcb57db49f8b8a3365e62175",
          "md5": "fe1f817cc91921ce366c4c7d31e2dd4a",
          "sha256": "8a3c0b428ab06c8a519aa352a1148801ed77aa383157116da692871ec3b31f82"
        },
        "downloads": -1,
        "filename": "patract_interface-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe1f817cc91921ce366c4c7d31e2dd4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 10342,
        "upload_time": "2021-01-04T09:49:50",
        "upload_time_iso_8601": "2021-01-04T09:49:50.974521Z",
        "url": "https://files.pythonhosted.org/packages/13/d2/2bef471a96236074ed10cd349c44e110d45cbcb57db49f8b8a3365e62175/patract_interface-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27dacb732aa6609ac98ba19c9c67f6ade43acb6ae6dfcfae5897650b57e08267",
          "md5": "1033744a5b9cb43cc0734ce66a0fcc9e",
          "sha256": "cbe42ed40baa462fbe9bb790f8f5efbcd77b8d2972483e1835d880afba07e29d"
        },
        "downloads": -1,
        "filename": "patract-interface-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1033744a5b9cb43cc0734ce66a0fcc9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 10196,
        "upload_time": "2021-01-04T09:49:52",
        "upload_time_iso_8601": "2021-01-04T09:49:52.808347Z",
        "url": "https://files.pythonhosted.org/packages/27/da/cb732aa6609ac98ba19c9c67f6ade43acb6ae6dfcfae5897650b57e08267/patract-interface-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c176d5ff3d8624ea59348ecd75aedf403430fcf5a4f7b00664481407d0e4fc8c",
          "md5": "9e5c6cef02306a58db266b67d72832e1",
          "sha256": "499a8304a674aa0d045c7fe02d923d9b115b94c38411c02b8f7b7ae58822fb97"
        },
        "downloads": -1,
        "filename": "patract_interface-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e5c6cef02306a58db266b67d72832e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 13985,
        "upload_time": "2021-01-05T09:45:49",
        "upload_time_iso_8601": "2021-01-05T09:45:49.970679Z",
        "url": "https://files.pythonhosted.org/packages/c1/76/d5ff3d8624ea59348ecd75aedf403430fcf5a4f7b00664481407d0e4fc8c/patract_interface-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f99978a3721f2a06f8f876ae51ed3bd1ac951be7fab278ec4f5bb3bb34ec949",
          "md5": "0b8132de5e41b4e95eea213a1f8c5c7d",
          "sha256": "0ef04bdb723a379e958cfc9ae589ceaabd8e9b461679e0666a8512e6955e48fb"
        },
        "downloads": -1,
        "filename": "patract-interface-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0b8132de5e41b4e95eea213a1f8c5c7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 12938,
        "upload_time": "2021-01-05T09:45:51",
        "upload_time_iso_8601": "2021-01-05T09:45:51.716723Z",
        "url": "https://files.pythonhosted.org/packages/8f/99/978a3721f2a06f8f876ae51ed3bd1ac951be7fab278ec4f5bb3bb34ec949/patract-interface-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0e9fbd6ee03987c2c79c12ff5b93d0e6a44d5e321c9de64b9f91bd2dbbfee2d",
          "md5": "1ab6f4a6df655af6a3c088c0895ddcfa",
          "sha256": "faa3bdfae7107345851285d1d62a268fb960a783fd97694b9b45a5df4e3a5299"
        },
        "downloads": -1,
        "filename": "patract_interface-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ab6f4a6df655af6a3c088c0895ddcfa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 14094,
        "upload_time": "2021-01-05T09:57:07",
        "upload_time_iso_8601": "2021-01-05T09:57:07.880702Z",
        "url": "https://files.pythonhosted.org/packages/a0/e9/fbd6ee03987c2c79c12ff5b93d0e6a44d5e321c9de64b9f91bd2dbbfee2d/patract_interface-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5fe691d42e79a27d01234880426199f12d916f88be19ffc3354e9a42f550789",
          "md5": "b9855e3f7d0cb12e84ab8db382fbc747",
          "sha256": "f20e9898ccc132c2a628426775a35cc7e64562e16a756c5cd474e3eca75eefa3"
        },
        "downloads": -1,
        "filename": "patract-interface-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9855e3f7d0cb12e84ab8db382fbc747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 13268,
        "upload_time": "2021-01-05T09:57:09",
        "upload_time_iso_8601": "2021-01-05T09:57:09.562603Z",
        "url": "https://files.pythonhosted.org/packages/b5/fe/691d42e79a27d01234880426199f12d916f88be19ffc3354e9a42f550789/patract-interface-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea649dc0c57e5816376c90f32d0f9225c4ce1eb67e72cda0e6ed5675c6e2e6c7",
          "md5": "c35101dac5252bb9933d14273a9cdaff",
          "sha256": "9a2b94debb1d79154291be5b19ad63c1f578ff811ecd69cfd2d770d3afd248e4"
        },
        "downloads": -1,
        "filename": "patract_interface-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c35101dac5252bb9933d14273a9cdaff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 16641,
        "upload_time": "2021-05-17T05:29:20",
        "upload_time_iso_8601": "2021-05-17T05:29:20.645730Z",
        "url": "https://files.pythonhosted.org/packages/ea/64/9dc0c57e5816376c90f32d0f9225c4ce1eb67e72cda0e6ed5675c6e2e6c7/patract_interface-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b219330a3efcdfc1ba0a0ad8c4366b49c9df7c2562aa063b1b13ee10a13114",
          "md5": "2ced27373483f527ca2ca11b25606fba",
          "sha256": "6e59c308e06d0cef47d88b4e019e0ab380e76892473701390d3197fff09405e5"
        },
        "downloads": -1,
        "filename": "patract-interface-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ced27373483f527ca2ca11b25606fba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 16727,
        "upload_time": "2021-05-17T05:29:22",
        "upload_time_iso_8601": "2021-05-17T05:29:22.345436Z",
        "url": "https://files.pythonhosted.org/packages/02/b2/19330a3efcdfc1ba0a0ad8c4366b49c9df7c2562aa063b1b13ee10a13114/patract-interface-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cb170a1a3fdfca498787907ce6297e09232dedf97bac98a85cdb132fb60edf1",
          "md5": "dd067af52ed646b314df2de5df3bd2cc",
          "sha256": "eab1eb604569ccce35da18bd84225fe1c9c6b61ac80c3792c88f48cf40d12d98"
        },
        "downloads": -1,
        "filename": "patract_interface-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd067af52ed646b314df2de5df3bd2cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 16582,
        "upload_time": "2021-05-17T06:07:37",
        "upload_time_iso_8601": "2021-05-17T06:07:37.082070Z",
        "url": "https://files.pythonhosted.org/packages/5c/b1/70a1a3fdfca498787907ce6297e09232dedf97bac98a85cdb132fb60edf1/patract_interface-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b5e97a678901847d6320ddfef495b29c79a17dfd985f845c0fb341144549aa9",
          "md5": "4be73c6c34270c50589205f2c0dcdb95",
          "sha256": "da2ff9ae35b6474d48a424e380196e1f3bfc197f581879589f2364413cb0b6b1"
        },
        "downloads": -1,
        "filename": "patract-interface-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4be73c6c34270c50589205f2c0dcdb95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 16619,
        "upload_time": "2021-05-17T06:07:38",
        "upload_time_iso_8601": "2021-05-17T06:07:38.889103Z",
        "url": "https://files.pythonhosted.org/packages/6b/5e/97a678901847d6320ddfef495b29c79a17dfd985f845c0fb341144549aa9/patract-interface-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "820f3b68a9f5f6859fc0643ba231978e4c9e9a8093f17908748afcc5984d6fa8",
          "md5": "c315ef4719f880c7a82201d5f93b76ba",
          "sha256": "74a1d0f91f46c7ea44f713f4e7ad4225b9799dd7b258e3e6d2848e84a26b7e49"
        },
        "downloads": -1,
        "filename": "patract_interface-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c315ef4719f880c7a82201d5f93b76ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 19260,
        "upload_time": "2021-06-07T03:04:33",
        "upload_time_iso_8601": "2021-06-07T03:04:33.126622Z",
        "url": "https://files.pythonhosted.org/packages/82/0f/3b68a9f5f6859fc0643ba231978e4c9e9a8093f17908748afcc5984d6fa8/patract_interface-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a41c83302444f6933fd8ab4a5636ccfa5925339accd40a957ef19ced5459fb4",
          "md5": "1d2dff705f2d49ac276431ff2082e65b",
          "sha256": "6069759952c1269cc28596b5df573363ba94d4a137be998b724f665eb7b804ca"
        },
        "downloads": -1,
        "filename": "patract-interface-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1d2dff705f2d49ac276431ff2082e65b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 18217,
        "upload_time": "2021-06-07T03:04:34",
        "upload_time_iso_8601": "2021-06-07T03:04:34.991674Z",
        "url": "https://files.pythonhosted.org/packages/7a/41/c83302444f6933fd8ab4a5636ccfa5925339accd40a957ef19ced5459fb4/patract-interface-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a1b1aa6e0727309e2e81a4b83e796c8403fab62c427133eb5bf02cdae3b7aa4",
          "md5": "042332c5f1cfe1cbc83c7fef2e86bce5",
          "sha256": "daa567548933f5985c257f2da0a2a07ee0e28cee44b42857c255ff6d592ff2cb"
        },
        "downloads": -1,
        "filename": "patract_interface-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "042332c5f1cfe1cbc83c7fef2e86bce5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 19323,
        "upload_time": "2021-06-07T03:24:18",
        "upload_time_iso_8601": "2021-06-07T03:24:18.221368Z",
        "url": "https://files.pythonhosted.org/packages/8a/1b/1aa6e0727309e2e81a4b83e796c8403fab62c427133eb5bf02cdae3b7aa4/patract_interface-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2684fc90c06638a91c1c1e1720e1604944a0eb7a29bb7d5a7f025bdd27936a4",
          "md5": "9cfff01be6c752c5d090e7f6255764b1",
          "sha256": "8123ad6e304b616429ac4ac86a6ca2ea543331892d7ea89f06d97a45b2b8d964"
        },
        "downloads": -1,
        "filename": "patract-interface-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9cfff01be6c752c5d090e7f6255764b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 18275,
        "upload_time": "2021-06-07T03:24:20",
        "upload_time_iso_8601": "2021-06-07T03:24:20.022249Z",
        "url": "https://files.pythonhosted.org/packages/a2/68/4fc90c06638a91c1c1e1720e1604944a0eb7a29bb7d5a7f025bdd27936a4/patract-interface-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29e1307fa021f83771f976365c085ac7b8f89b8a8bbfd78ec05f5f951d6c62e",
          "md5": "6b2b37829c8885b769e2e22601d3d370",
          "sha256": "3a1ca3630a20fe3af6511ad2f0b0862166ffd897e6fb2b8ba5a3361f2c0d9f24"
        },
        "downloads": -1,
        "filename": "patract_interface-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b2b37829c8885b769e2e22601d3d370",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 19327,
        "upload_time": "2021-06-07T03:37:26",
        "upload_time_iso_8601": "2021-06-07T03:37:26.842109Z",
        "url": "https://files.pythonhosted.org/packages/e2/9e/1307fa021f83771f976365c085ac7b8f89b8a8bbfd78ec05f5f951d6c62e/patract_interface-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe1f0cf43294a36838c466a2cc8af90a766a5c33d0681c0563bbedba1ff02e41",
          "md5": "53626f988f47f587d4519cf673143fab",
          "sha256": "3b201b63e5d5a7391133c8c2fa1c22d86f30f0de5fe118ed899b66922f45cebf"
        },
        "downloads": -1,
        "filename": "patract-interface-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "53626f988f47f587d4519cf673143fab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 18270,
        "upload_time": "2021-06-07T03:37:28",
        "upload_time_iso_8601": "2021-06-07T03:37:28.618719Z",
        "url": "https://files.pythonhosted.org/packages/fe/1f/0cf43294a36838c466a2cc8af90a766a5c33d0681c0563bbedba1ff02e41/patract-interface-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e29e1307fa021f83771f976365c085ac7b8f89b8a8bbfd78ec05f5f951d6c62e",
        "md5": "6b2b37829c8885b769e2e22601d3d370",
        "sha256": "3a1ca3630a20fe3af6511ad2f0b0862166ffd897e6fb2b8ba5a3361f2c0d9f24"
      },
      "downloads": -1,
      "filename": "patract_interface-0.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b2b37829c8885b769e2e22601d3d370",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 19327,
      "upload_time": "2021-06-07T03:37:26",
      "upload_time_iso_8601": "2021-06-07T03:37:26.842109Z",
      "url": "https://files.pythonhosted.org/packages/e2/9e/1307fa021f83771f976365c085ac7b8f89b8a8bbfd78ec05f5f951d6c62e/patract_interface-0.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe1f0cf43294a36838c466a2cc8af90a766a5c33d0681c0563bbedba1ff02e41",
        "md5": "53626f988f47f587d4519cf673143fab",
        "sha256": "3b201b63e5d5a7391133c8c2fa1c22d86f30f0de5fe118ed899b66922f45cebf"
      },
      "downloads": -1,
      "filename": "patract-interface-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "53626f988f47f587d4519cf673143fab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 18270,
      "upload_time": "2021-06-07T03:37:28",
      "upload_time_iso_8601": "2021-06-07T03:37:28.618719Z",
      "url": "https://files.pythonhosted.org/packages/fe/1f/0cf43294a36838c466a2cc8af90a766a5c33d0681c0563bbedba1ff02e41/patract-interface-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}