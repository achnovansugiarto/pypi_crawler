{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azpysdkhelp@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Azure Schema Registry Avro Serializer client library for Python\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning,\nand management. This package provides an Avro serializer capable of serializing and deserializing payloads containing\nSchema Registry schema identifiers and Avro-encoded data.\n\n[Source code][source_code] | [Package (PyPi)][pypi] | [API reference documentation][api_reference] | [Samples][sr_avro_samples] | [Changelog][change_log]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 is ending 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Schema Registry Avro Serializer client library and Azure Identity client library for Python with [pip][pip]:\n\n```Bash\npip install azure-schemaregistry-avroserializer azure-identity\n```\n\n### Prerequisites:\nTo use this package, you must have:\n* Azure subscription - [Create a free account][azure_sub]\n* [Azure Schema Registry][schemaregistry_service]\n* Python 2.7, 3.6 or later - [Install Python][python]\n\n### Authenticate the client\nInteraction with the Schema Registry Avro Serializer starts with an instance of AvroSerializer class, which takes the schema group name and the [Schema Registry Client][schemaregistry_client] class. The client constructor takes the Event Hubs fully qualified namespace and and Azure Active Directory credential:\n\n* The fully qualified namespace of the Schema Registry instance should follow the format: `<yournamespace>.servicebus.windows.net`.\n\n* An AAD credential that implements the [TokenCredential][token_credential_interface] protocol should be passed to the constructor. There are implementations of the `TokenCredential` protocol available in the\n[azure-identity package][pypi_azure_identity]. To use the credential types provided by `azure-identity`, please install the Azure Identity client library for Python with [pip][pip]:\n\n```Bash\npip install azure-identity\n```\n\n* Additionally, to use the async API supported on Python 3.6+, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/):\n\n```Bash\npip install aiohttp\n```\n\n**Create AvroSerializer using the azure-schemaregistry library:**\n\n```python\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.serializer.avroserializer import AvroSerializer\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net'\nfully_qualified_namespace = '<< FULLY QUALIFIED NAMESPACE OF THE SCHEMA REGISTRY >>'\ngroup_name = '<< GROUP NAME OF THE SCHEMA >>'\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\nserializer = AvroSerializer(client=schema_registry_client, group_name=group_name)\n```\n\n## Key concepts\n\n### AvroSerializer\n\nProvides API to serialize to and deserialize from Avro Binary Encoding plus a\nheader with schema ID. Uses [SchemaRegistryClient][schemaregistry_client] to get schema IDs from schema content or vice versa.\n\n### Message format\n\nThe same format is used by schema registry serializers across Azure SDK languages.\n\nMessages are encoded as follows:\n\n- 4 bytes: Format Indicator\n\n  - Currently always zero to indicate format below.\n\n- 32 bytes: Schema ID\n\n  - UTF-8 hexadecimal representation of GUID.\n  - 32 hex digits, no hyphens.\n  - Same format and byte order as string from Schema Registry service.\n\n- Remaining bytes: Avro payload (in general, format-specific payload)\n\n  - Avro Binary Encoding\n  - NOT Avro Object Container File, which includes the schema and defeats the\n    purpose of this serialzer to move the schema out of the message payload and\n    into the schema registry.\n\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Schema Registry tasks, including:\n\n- [Serialization](#serialization)\n- [Deserialization](#deserialization)\n- [Event Hubs Sending Integration](#event-hubs-sending-integration)\n- [Event Hubs Receiving Integration](#event-hubs-receiving-integration)\n\n### Serialization\n\nUse `AvroSerializer.serialize` method to serialize dict data with the given avro schema.\nThe method would use a schema previously registered to the Schema Registry service and keep the schema cached for future serialization usage. It is also possible to avoid pre-registering the schema to the service and automatically register with the `serialize` method by instantiating the `AvroSerializer` with the keyword argument `auto_register_schemas=True`.\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.serializer.avroserializer import AvroSerializer\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\nname = \"example.avro.User\"\nformat = \"Avro\"\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nschema_register_client.register(group_name, name, definition, format)\nserializer = AvroSerializer(client=schema_registry_client, group_name=group_name)\n\nwith serializer:\n    dict_data = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    encoded_bytes = serializer.serialize(dict_data, schema=definition)\n```\n\n### Deserialization\n\nUse `AvroSerializer.deserialize` method to deserialize raw bytes into dict data.\nThe method automatically retrieves the schema from the Schema Registry Service and keeps the schema cached for future deserialization usage.\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.serializer.avroserializer import AvroSerializer\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nserializer = AvroSerializer(client=schema_registry_client, group_name=group_name)\n\nwith serializer:\n    encoded_bytes = b'<data_encoded_by_azure_schema_registry_avro_serializer>'\n    decoded_data = serializer.deserialize(encoded_bytes)\n```\n\n### Event Hubs Sending Integration\n\nIntegration with [Event Hubs][eventhubs_repo] to send serialized avro dict data as the body of EventData.\n\n```python\nimport os\nfrom azure.eventhub import EventHubProducerClient, EventData\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.serializer.avroserializer import AvroSerializer\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_serializer = AvroSerializer(client=schema_registry_client, group_name=group_name, auto_register_schemas=True)\n\neventhub_producer = EventHubProducerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    eventhub_name=eventhub_name\n)\n\nwith eventhub_producer, avro_serializer:\n    event_data_batch = eventhub_producer.create_batch()\n    dict_data = {\"name\": \"Bob\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    payload_bytes = avro_serializer.serialize(dict_data, schema=definition)\n    event_data_batch.add(EventData(body=payload_bytes))\n    eventhub_producer.send_batch(event_data_batch)\n```\n\n### Event Hubs Receiving Integration\n\nIntegration with [Event Hubs][eventhubs_repo] to receive `EventData` and deserialized raw bytes into avro dict data.\n\n```python\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.serializer.avroserializer import AvroSerializer\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_serializer = AvroSerializer(client=schema_registry_client, group_name=group_name)\n\neventhub_consumer = EventHubConsumerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    consumer_group='$Default',\n    eventhub_name=eventhub_name,\n)\n\ndef on_event(partition_context, event):\n    bytes_payload = b\"\".join(b for b in event.body)\n    deserialized_data = avro_serializer.deserialize(bytes_payload)\n\nwith eventhub_consumer, avro_serializer:\n    eventhub_consumer.receive(on_event=on_event, starting_position=\"-1\")\n```\n\n## Troubleshooting\n\n### General\n\nAzure Schema Registry Avro Serializer raise exceptions defined in [Azure Core][azure_core].\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.serializer.avroserializer import AvroSerializer\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the SDK\nlogger = logging.getLogger('azure.schemaregistry')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\nschema_registry_client = SchemaRegistryClient(\"<your-fully_qualified_namespace>\", credential, logging_enable=True)\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nserializer = AvroSerializer(client=schema_registry_client, group_name=\"<your-group-name>\")\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```py\nserializer.serialize(dict_data, schema=schema_definition, logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nPlease find further examples in the [samples][sr_avro_samples] directory demonstrating common Azure Schema Registry Avro Serializer scenarios.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-schemaregistry-avroserializer\n[python]: https://www.python.org/downloads/\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_sub]: https://azure.microsoft.com/free/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sr_avro_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroserializer/samples\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-avroserializer-readme\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroserializer\n[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroserializer/CHANGELOG.md\n[schemaregistry_client]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry\n[schemaregistry_service]: https://aka.ms/schemaregistry\n[eventhubs_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub\n[token_credential_interface]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py\n[pypi_azure_identity]: https://pypi.org/project/azure-identity/\n\n# Release History\n\n## 1.0.0b4 (2021-11-11)\n\n### Features Added\n\n- Async version of `AvroSerializer` has been added under `azure.schemaregistry.serializer.avroserializer.aio`.\n- Depends on `azure-schemaregistry>=1.0.0,<2.0.0`.\n\n### Breaking Changes\n\n- `SchemaParseError`, `SchemaSerializationError`, and `SchemaDeserializationError` have been introduced under `azure.schemaregistry.serializer.avroserializer.exceptions` and will be raised for corresponding operations.\n  - `SchemaParseError` and `SchemaSerializationError` may be raised for errors when calling `serialize` on `AvroSerializer`.\n  - `SchemaParseError` and `SchemaDeserializationError` may be raised for errors when calling `deserialize` on `AvroSerializer`.\n\n## 1.0.0b3 (2021-10-06)\n\n### Features Added\n\n- `auto_register_schemas` keyword argument has been added to `AvroSerializer`, which will allow for automatically registering schemas passed in to the `serialize`, when set to `True`, otherwise `False` by default.\n- `value` parameter in `serialize` on `AvroSerializer` takes type `Mapping` rather than `Dict`.\n- Depends on `azure-schemaregistry==1.0.0b3`.\n\n### Breaking Changes\n\n- `SchemaRegistryAvroSerializer` has been renamed `AvroSerializer`.\n- `schema_registry` parameter in the `AvroSerializer` constructor has been renamed `client`.\n- `schema_group` parameter in the `AvroSerializer` constructor has been renamed `group_name`.\n- `data` parameter in the `serialize` and `deserialize` methods on `AvroSerializer` has been renamed `value`.\n- `schema` parameter in the `serialize` method on `AvroSerializer` no longer accepts argument of type `bytes`.\n- `AvroSerializer` constructor no longer takes in the `codec` keyword argument.\n- The following positional arguments are now required keyword arguments:\n  - `client` and `group_name` in `AvroSerializer` constructor\n  - `schema` in `serialize` on `AvroSerializer`\n\n## 1.0.0b2 (2021-08-18)\n\nThis version and all future versions will require Python 2.7 or Python 3.6+, Python 3.5 is no longer supported.\n\n### Features Added\n\n- Depends on `azure-schemaregistry==1.0.0b2` which supports client-level caching.\n\n## 1.0.0b1 (2020-09-09)\n\nVersion 1.0.0b1 is the first preview of our efforts to create a user-friendly and Pythonic client library for Azure Schema Registry Avro Serializer.\n\n**New features**\n\n- `SchemaRegistryAvroSerializer` is the top-level client class that provides the functionality to encode and decode avro data utilizing the avro library. It will automatically register schema and retrieve schema from Azure Schema Registry Service. It provides two methods:\n  - `serialize`: Serialize dict data into bytes according to the given schema and register schema if needed.\n  - `deserialize`: Deserialize bytes data into dict data by automatically retrieving schema from the service.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-schemaregistry-avroserializer",
    "package_url": "https://pypi.org/project/azure-schemaregistry-avroserializer/",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-schemaregistry-avroserializer/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python"
    },
    "release_url": "https://pypi.org/project/azure-schemaregistry-avroserializer/1.0.0b4/",
    "requires_dist": [
      "azure-schemaregistry (<2.0.0,>=1.0.0)",
      "avro (==1.10.0)",
      "backports.functools-lru-cache (>=1.6.4) ; python_version == \"2.7\""
    ],
    "requires_python": "",
    "summary": "Microsoft Azure Schema Registry Avro Serializer Client Library for Python",
    "version": "1.0.0b4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12000451,
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3cec1a064e58c6a7690e6240bcf82bd33fec9070b9a64755d2b7d3745644c15",
          "md5": "157ed0dbe5b8d82455432b2e541d10e5",
          "sha256": "f7b85f719239d30ae8d4a632e9e75452fd8e9e51ef1f615053ec83b3f3aec194"
        },
        "downloads": -1,
        "filename": "azure_schemaregistry_avroserializer-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "157ed0dbe5b8d82455432b2e541d10e5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11743,
        "upload_time": "2020-09-09T20:09:32",
        "upload_time_iso_8601": "2020-09-09T20:09:32.878046Z",
        "url": "https://files.pythonhosted.org/packages/e3/ce/c1a064e58c6a7690e6240bcf82bd33fec9070b9a64755d2b7d3745644c15/azure_schemaregistry_avroserializer-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37e3dc88c393aa11dc5644d82eeccddc336027939ac851c8aaffaccb76c7c547",
          "md5": "daadeff996ebba78c7ef6f115a20781a",
          "sha256": "b2072b1a2820ec22dc708c6877bab6935e2ce1c1f52cb00abe4e1d056c30f267"
        },
        "downloads": -1,
        "filename": "azure-schemaregistry-avroserializer-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "daadeff996ebba78c7ef6f115a20781a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30949,
        "upload_time": "2020-09-09T20:09:36",
        "upload_time_iso_8601": "2020-09-09T20:09:36.346134Z",
        "url": "https://files.pythonhosted.org/packages/37/e3/dc88c393aa11dc5644d82eeccddc336027939ac851c8aaffaccb76c7c547/azure-schemaregistry-avroserializer-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "810f0955320eed9dfda5bec1884e907868a7574d8c62d9a468d9911f9c56fb1a",
          "md5": "78bbda6553931ac2db8fb1a7deae4c93",
          "sha256": "6172c1aa71fa113dc0dfdebc399c680a3bbb19f40b54411d028a77eec847da87"
        },
        "downloads": -1,
        "filename": "azure_schemaregistry_avroserializer-1.0.0b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78bbda6553931ac2db8fb1a7deae4c93",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12431,
        "upload_time": "2021-08-18T17:37:12",
        "upload_time_iso_8601": "2021-08-18T17:37:12.857035Z",
        "url": "https://files.pythonhosted.org/packages/81/0f/0955320eed9dfda5bec1884e907868a7574d8c62d9a468d9911f9c56fb1a/azure_schemaregistry_avroserializer-1.0.0b2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a935179514ea0af20ce8a3d788c417005b77936081c8eba688ffa37652cef94",
          "md5": "6eb6cf962c650e8d41dd960151e7208c",
          "sha256": "21f46ea2eb1ed79c270cabdc8b6f7792bdb811fef0db6c2b7499dad1afec813c"
        },
        "downloads": -1,
        "filename": "azure-schemaregistry-avroserializer-1.0.0b2.zip",
        "has_sig": false,
        "md5_digest": "6eb6cf962c650e8d41dd960151e7208c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35597,
        "upload_time": "2021-08-18T17:37:14",
        "upload_time_iso_8601": "2021-08-18T17:37:14.710644Z",
        "url": "https://files.pythonhosted.org/packages/0a/93/5179514ea0af20ce8a3d788c417005b77936081c8eba688ffa37652cef94/azure-schemaregistry-avroserializer-1.0.0b2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73b42ed0113a9d77fc829c866e8233ac0af748b7d4aa8f3d0b190681cb349cfa",
          "md5": "f5d92fd5cd67abbe49fd60a17b379859",
          "sha256": "1e5aa699eac0bfbb1f828ad549ce5be64aed497feedbcefbbb1f33b132ada26c"
        },
        "downloads": -1,
        "filename": "azure_schemaregistry_avroserializer-1.0.0b3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5d92fd5cd67abbe49fd60a17b379859",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13064,
        "upload_time": "2021-10-06T21:24:10",
        "upload_time_iso_8601": "2021-10-06T21:24:10.039288Z",
        "url": "https://files.pythonhosted.org/packages/73/b4/2ed0113a9d77fc829c866e8233ac0af748b7d4aa8f3d0b190681cb349cfa/azure_schemaregistry_avroserializer-1.0.0b3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c2693847f9aa12ebb1a19cd5b7df9662598b6689167bfb6488b23e325b348e8",
          "md5": "54517383f2c855f04ff65d9cf2076e5a",
          "sha256": "763759c6089e90cd82b8d1fcd00d1e340193764346ee431b049db17b57f8e813"
        },
        "downloads": -1,
        "filename": "azure-schemaregistry-avroserializer-1.0.0b3.zip",
        "has_sig": false,
        "md5_digest": "54517383f2c855f04ff65d9cf2076e5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35896,
        "upload_time": "2021-10-06T21:24:12",
        "upload_time_iso_8601": "2021-10-06T21:24:12.764880Z",
        "url": "https://files.pythonhosted.org/packages/3c/26/93847f9aa12ebb1a19cd5b7df9662598b6689167bfb6488b23e325b348e8/azure-schemaregistry-avroserializer-1.0.0b3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71cde3dc4c5663ab5f597f386017a43f5803b0d8c3f2c10734308c867892b3a5",
          "md5": "a82af962cdbcaba745ef13e8a1e53e60",
          "sha256": "8f3bcc4393d321a3823b35ce4efedfa6c02edfae9c438b9730baa768ecaa59b8"
        },
        "downloads": -1,
        "filename": "azure_schemaregistry_avroserializer-1.0.0b4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a82af962cdbcaba745ef13e8a1e53e60",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23097,
        "upload_time": "2021-11-11T23:01:28",
        "upload_time_iso_8601": "2021-11-11T23:01:28.372304Z",
        "url": "https://files.pythonhosted.org/packages/71/cd/e3dc4c5663ab5f597f386017a43f5803b0d8c3f2c10734308c867892b3a5/azure_schemaregistry_avroserializer-1.0.0b4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47c851344751cacd67465d0b8517173c340d1b5cbf43a916d86f0beca4578f4d",
          "md5": "38f6c7cbe15865c2b3ccff5d48089f6a",
          "sha256": "fc957d07dda2d3473b11aaafe8e7e0d0ca469e244fc9c925a32f7eb22f60e9d2"
        },
        "downloads": -1,
        "filename": "azure-schemaregistry-avroserializer-1.0.0b4.zip",
        "has_sig": false,
        "md5_digest": "38f6c7cbe15865c2b3ccff5d48089f6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57030,
        "upload_time": "2021-11-11T23:01:30",
        "upload_time_iso_8601": "2021-11-11T23:01:30.590067Z",
        "url": "https://files.pythonhosted.org/packages/47/c8/51344751cacd67465d0b8517173c340d1b5cbf43a916d86f0beca4578f4d/azure-schemaregistry-avroserializer-1.0.0b4.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71cde3dc4c5663ab5f597f386017a43f5803b0d8c3f2c10734308c867892b3a5",
        "md5": "a82af962cdbcaba745ef13e8a1e53e60",
        "sha256": "8f3bcc4393d321a3823b35ce4efedfa6c02edfae9c438b9730baa768ecaa59b8"
      },
      "downloads": -1,
      "filename": "azure_schemaregistry_avroserializer-1.0.0b4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a82af962cdbcaba745ef13e8a1e53e60",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23097,
      "upload_time": "2021-11-11T23:01:28",
      "upload_time_iso_8601": "2021-11-11T23:01:28.372304Z",
      "url": "https://files.pythonhosted.org/packages/71/cd/e3dc4c5663ab5f597f386017a43f5803b0d8c3f2c10734308c867892b3a5/azure_schemaregistry_avroserializer-1.0.0b4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47c851344751cacd67465d0b8517173c340d1b5cbf43a916d86f0beca4578f4d",
        "md5": "38f6c7cbe15865c2b3ccff5d48089f6a",
        "sha256": "fc957d07dda2d3473b11aaafe8e7e0d0ca469e244fc9c925a32f7eb22f60e9d2"
      },
      "downloads": -1,
      "filename": "azure-schemaregistry-avroserializer-1.0.0b4.zip",
      "has_sig": false,
      "md5_digest": "38f6c7cbe15865c2b3ccff5d48089f6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 57030,
      "upload_time": "2021-11-11T23:01:30",
      "upload_time_iso_8601": "2021-11-11T23:01:30.590067Z",
      "url": "https://files.pythonhosted.org/packages/47/c8/51344751cacd67465d0b8517173c340d1b5cbf43a916d86f0beca4578f4d/azure-schemaregistry-avroserializer-1.0.0b4.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}