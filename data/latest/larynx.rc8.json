{
  "info": {
    "author": "Michael Hansen",
    "author_email": "mike@rhasspy.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Larynx\n\nðŸŽ¥ [DEMO VIDEO](https://www.youtube.com/watch?v=hBmhDf8cl0k)\n\nOffline end-to-end text to speech system using [gruut](https://github.com/rhasspy/gruut) and [onnx](https://onnx.ai/) ([architecture](#architecture)). There are [50 voices available across 9 languages](#samples).\n\n```sh\ncurl https://raw.githubusercontent.com/rhasspy/larynx/master/docker/larynx-server \\\n    > ~/bin/larynx-server && chmod +755 ~/bin/larynx-server\nlarynx-server\n```\n\nVisit http://localhost:5002 for the test page. See http://localhost:5002/openapi/ for HTTP endpoint documentation.\n\n![Larynx screenshot](img/web_screenshot.png)\n\nSupports a [subset of SSML](#ssml) that can use multiple voices and languages!\n\n``` xml\n<speak>\n  The 1st thing to remember is that 9 languages are supported in Larynx TTS as of 10/19/2021 at 10:39am.\n\n  <voice name=\"harvard\">\n    <s>\n      The current voice can be changed!\n    </s>\n  </voice>\n\n  <voice name=\"northern_english_male\">\n    <s>Breaks are possible</s>\n    <break time=\"0.5s\" />\n    <s>between sentences.</s>\n  </voice>\n\n  <s lang=\"en\">\n    One language is never enough\n  </s>\n  <s lang=\"de\">\n   Eine Sprache ist niemals genug\n  </s>\n  <s lang=\"sw\">\n    Lugha moja haitoshi\n  </s>\n</speak>\n```\n\nLarynx's goals are:\n\n* \"Good enough\" synthesis to avoid using a cloud service\n* Faster than realtime performance on a Raspberry Pi 4 (with low quality vocoder)\n* Broad language support (9 languages)\n* Voices trained purely from public datasets\n\nYou can use Larynx to:\n\n* Host a [text to speech HTTP endpoint](#docker-installation)\n* Synthesize text [on the command-line](#basic-synthesis)\n* [Read a book](#long-texts) to you\n\n## Samples\n\n[Listen to voice samples](https://rhasspy.github.io/larynx/) from all of the [pre-trained voices](https://github.com/rhasspy/larynx/releases).\n\n---\n\n## Docker Installation\n\nPre-built Docker images are available for the following platforms:\n\n* `linux/amd64` - desktop/laptop/server\n* `linux/arm64` - Raspberry Pi 64-bit\n* `linux/arm/v7` - Raspberry Pi 32-bit\n\nThese images include a single English voice, but [many more can be downloaded](https://github.com/rhasspy/larynx/releases/tag/2021-03-28) from within the web interface.\n\nThe [larynx](https://raw.githubusercontent.com/rhasspy/larynx/master/docker/larynx) and [larynx-server](https://raw.githubusercontent.com/rhasspy/larynx/master/docker/larynx-server) shell scripts wrap the Docker images, allowing you to use Larynx as a command-line tool.\n\nTo manually run the Larynx web server in Docker:\n\n```sh\ndocker run \\\n    -it \\\n    -p 5002:5002 \\\n    -e \"HOME=${HOME}\" \\\n    -v \"$HOME:${HOME}\" \\\n    -v /usr/share/ca-certificates:/usr/share/ca-certificates \\\n    -v /etc/ssl/certs:/etc/ssl/certs \\\n    -w \"${PWD}\" \\\n    --user \"$(id -u):$(id -g)\" \\\n    rhasspy/larynx\n```\n\nDownloaded voices will be stored in `${HOME}/.local/share/larynx`.\n\nVisit http://localhost:5002 for the test page. See http://localhost:5002/openapi/ for HTTP endpoint documentation.\n\n## Debian Installation\n\nPre-built Debian packages for [bullseye](https://www.debian.org/releases/bullseye/) are [available for download](https://github.com/rhasspy/larynx/releases/latest) with the name `larynx-tts_<VERSION>_<ARCH>.deb` where `ARCH` is one of `amd64` (most desktops, laptops), `armhf` (32-bit Raspberry Pi), and `arm64` (64-bit Raspberry Pi)\n    \nExample installation on a typical desktop:\n\n```sh\nsudo apt install ./larynx-tts_<VERSION>_amd64.deb\n```\n\nFrom there, you may run the `larynx` command or `larynx-server` to start the web server (http://localhost:5002).\n\n## Python Installation\n\nYou may need to install the following dependencies (besides Python 3.7+):\n\n```sh\nsudo apt-get install libopenblas-base libgomp1 libatomic1\n```\n\nOn 32-bit ARM systems (Raspberry Pi), you will also need:\n\n```sh\nsudo apt-get install libatlas3-base libgfortran5\n```\n\nNext, create a Python virtual environment:\n\n```sh\npython3 -m venv larynx_venv\nsource larynx_venv/bin/activate\n\npip3 install --upgrade pip\npip3 install --upgrade wheel setuptools\n```\n\nNext, install larynx:\n\n```sh\npip3 install -f 'https://synesthesiam.github.io/prebuilt-apps/' -f 'https://download.pytorch.org/whl/cpu/torch_stable.html' larynx\n```\n\nThen run `larynx` or `larynx.server` for the web server. You may also execute the Python module directly with `python3 -m larynx` and `python3 -m larynx.server`.\n\n### Voice/Vocoder Download\n\nVoices and vocoders are automatically downloaded when used on the command-line or in the web server. You can also [manually download each voice](https://github.com/rhasspy/larynx/releases/tag/2021-03-28). Extract them to `${HOME}/.local/share/larynx/voices` so that the directory structure follows the pattern `${HOME}/.local/share/larynx/voices/<language>,<voice>`.\n\n---\n\n## Command-Line Interface\n\nLarynx has a flexible command-line interface, available with:\n\n* The [larynx script](https://raw.githubusercontent.com/rhasspy/larynx/master/docker/larynx) for Docker \n* The `larynx` command from the Debian package\n* `larynx` or `python3 -m larynx` for Python installations\n\n### Basic Synthesis\n\n```sh\nlarynx -v <VOICE> \"<TEXT>\" > output.wav\n```\n\nwhere `<VOICE>` is a language name (`en`, `de`, etc) or a voice name (`ljspeech`, `thorsten`, etc). `<TEXT>` may contain multiple sentences, which will be combined in the final output WAV file. These can also be [split into separate WAV files](#multiple-wav-output).\n\nTo adjust the quality of the output, use `-q <QUALITY>` where `<QUALITY>` is \"high\" (slowest), \"medium\", or \"low\" (fastest).\n\n### SSML Synthesis\n\n```sh\nlarynx --ssml -v <VOICE> \"<SSML>\" > output.wav\n```\n\nwhere `<SSML>` is valid [SSML](https://www.w3.org/TR/speech-synthesis11/). Not all features are supported; for example:\n\n* Breaks (pauses) can only occur between sentences and can only be specified in seconds or milliseconds\n* Voices can only be referenced by name\n* Custom lexicons are not yet supported (you can use `<phoneme ph=\"...\">`, however)\n\nIf your SSML contains `<mark>` tags, add `--mark-file <FILE>` to the command-line. As the marks are encountered (between sentences), their names will be written on separate lines to the file.\n\n### CUDA Accelerated Synthesis\n\nThe `--cuda` flag will make use of a GPU if its available to PyTorch:\n\n``` sh\nlarynx --cuda 'This is spoken on the GPU.' > output.wav\n```\n\nAdding the `--half` flag will enable half-precision inference, which is often faster:\n\n``` sh\nlarynx --cuda --half 'This is spoken on the GPU even faster.' > output.wav\n```\n\nFor CUDA acceleration to work, your voice must contain a PyTorch checkpoint file (`generator.pth`). Older Larynx voices did not have these, so you may need to [re-download your voices](https://github.com/rhasspy/larynx/releases/latest/).\n\n### Long Texts\n\nIf your text is very long, and you would like to listen to it as its being synthesized, use the `--raw-stream` option:\n\n```sh\nlarynx -v en --raw-stream < long.txt | aplay -r 22050 -c 1 -f S16_LE\n```\n\nEach input line will be synthesized and written the standard out as raw 16-bit 22050Hz mono PCM. By default, 5 sentences will be kept in an output queue, only blocking synthesis when the queue is full. You can adjust this value with `--raw-stream-queue-size`. Additionally, you can adjust `--max-thread-workers` to change how many threads are available for synthesis.\n\nIf your long text is fixed-width with blank lines separating paragraphs like those from [Project Gutenberg](https://www.gutenberg.org/), use the `--process-on-blank-line` option so that sentences will not be broken at line boundaries. For example, you can listen to \"Alice in Wonderland\" like this:\n\n```sh\ncurl --output - 'https://www.gutenberg.org/files/11/11-0.txt' | \\\n    larynx -v ek --raw-stream --process-on-blank-line | aplay -r 22050 -c 1 -f S16_LE\n```\n\n### Multiple WAV Output\n\nWith `--output-dir` set to a directory, Larynx will output a separate WAV file for each sentence:\n\n```sh\nlarynx -v en 'Test 1. Test 2.' --output-dir /path/to/wavs\n```\n\nBy default, each WAV file will be named using the (slightly modified) text of the sentence. You can have WAV files named using a timestamp instead with `--output-naming time`. For full control of the output naming, the `--csv` command-line flag indicates that each sentence is of the form `id|text` where `id` will be the name of the WAV file.\n\n```sh\ncat << EOF |\ns01|The birch canoe slid on the smooth planks.\ns02|Glue the sheet to the dark blue background.\ns03|It's easy to tell the depth of a well.\ns04|These days a chicken leg is a rare dish.\ns05|Rice is often served in round bowls.\ns06|The juice of lemons makes fine punch.\ns07|The box was thrown beside the parked truck.\ns08|The hogs were fed chopped corn and garbage.\ns09|Four hours of steady work faced us.\ns10|Large size in stockings is hard to sell.\nEOF\n  larynx --csv --voice en --output-dir /path/to/wavs\n```\n\n### Interactive Mode\n\nWith no text input and no output directory, Larynx will switch into interactive mode. After entering a sentence, it will be played with `--play-command` (default is `play` from SoX).\n\n```sh\nlarynx -v en\nReading text from stdin...\nHello world!<ENTER>\n```\n\nUse `CTRL+D` or `CTRL+C` to exit.\n\n### GlowTTS Settings\n\nThe GlowTTS voices support two additional parameters:\n\n* `--noise-scale` - determines the speaker volatility during synthesis (0-1, default is  0.667)\n* `--length-scale` - makes the voice speaker slower (> 1) or faster (< 1)\n\n### Vocoder Settings\n\n* `--denoiser-strength` - runs the denoiser if > 0; a small value like 0.005 is a good place to start.\n\n### List Voices and Vocoders\n\n```sh\nlarynx --list\n```\n\n---\n\n## MaryTTS Compatible API\n\nTo use Larynx as a drop-in replacement for a [MaryTTS](http://mary.dfki.de/) server (e.g., for use with [Home Assistant](https://www.home-assistant.io/integrations/marytts/)), run:\n\n```sh\ndocker run \\\n    -it \\\n    -p 59125:5002 \\\n    -e \"HOME=${HOME}\" \\\n    -v \"$HOME:${HOME}\" \\\n    -v /usr/share/ca-certificates:/usr/share/ca-certificates \\\n    -v /etc/ssl/certs:/etc/ssl/certs \\\n    -w \"${PWD}\" \\\n    --user \"$(id -u):$(id -g)\" \\\n    rhasspy/larynx\n```\n\nThe `/process` HTTP endpoint should now work for voices formatted as `<LANG>` or `<VOICE>`, e.g. `en` or `harvard`.\n\nYou can specify the vocoder quality by adding `;<QUALITY>` to the MaryTTS voice where `QUALITY` is \"high\", \"medium\", or \"low\".\n\nFor example: `en;low` will use the lowest quality (but fastest) vocoder. This is usually necessary to get decent performance on a Raspberry Pi.\n\n---\n\n## SSML\n\nA subset of [SSML](https://www.w3.org/TR/speech-synthesis11/) is supported (use `--ssml`):\n\n* `<speak>` - wrap around SSML text\n    * `lang` - set language for document\n* `<s>` - sentence (disables automatic sentence breaking)\n    * `lang` - set language for sentence\n* `<w>` / `<token>` - word (disables automatic tokenization)\n* `<voice name=\"...\">` - set voice of inner text\n    * `voice` - name or language of voice\n* `<say-as interpret-as=\"\">` - force interpretation of inner text\n    * `interpret-as` one of \"spell-out\", \"date\", \"number\", \"time\", or \"currency\"\n    * `format` - way to format text depending on `interpret-as`\n        * number - one of \"cardinal\", \"ordinal\", \"digits\", \"year\"\n        * date - string with \"d\" (cardinal day), \"o\" (ordinal day), \"m\" (month), or \"y\" (year)\n* `<break time=\"\">` - Pause for given amount of time\n    * time - seconds (\"123s\") or milliseconds (\"123ms\")\n* `<mark name=\"\">` - User-defined mark (written to `--mark-file` or part of `TextToSpeechResult`)\n    * name - name of mark\n* `<sub alias=\"\">` - substitute `alias` for inner text\n* `<phoneme ph=\"...\">` - supply phonemes for inner text\n    * `ph` - phonemes for each word of inner text, separated by whitespace\n* `<lexicon id=\"...\">` - inline pronunciation lexicon\n    * `id` - unique id of lexicon (used in `<lookup ref=\"...\">`)\n    * One or more `<lexeme>` child elements with:\n        * `<grapheme role=\"...\">WORD</grapheme>` - word text (optional [role][#word-roles])\n        * `<phoneme>P H O N E M E S</phoneme>` - word pronunciation (phonemes separated by whitespace)\n* `<lookup ref=\"...\">` - use inline pronunciation lexicon for child elements\n    * `ref` - id from a `<lexicon id=\"...\">`\n\n### Word Roles\n\nDuring phonemization, word roles are used to disambiguate pronunciations. Unless manually specified, a word's role is derived from its part of speech tag as `gruut:<TAG>`. For initialisms and `spell-out`, the role `gruut:letter` is used to indicate that e.g., \"a\" should be spoken as `/eÉª/` instead of `/É™/`.\n\nFor `en-us`, the following additional roles are available from the part-of-speech tagger:\n\n* `gruut:CD` - number\n* `gruut:DT` - determiner\n* `gruut:IN` - preposition or subordinating conjunction \n* `gruut:JJ` - adjective\n* `gruut:NN` - noun\n* `gruut:PRP` - personal pronoun\n* `gruut:RB` - adverb\n* `gruut:VB` - verb\n* `gruut:VB` - verb (past tense)\n\n### Inline Lexicons\n\nInline [pronunciation lexicons](https://www.w3.org/TR/2008/REC-pronunciation-lexicon-20081014/) are supported via the `<lexicon>` and `<lookup>` tags. gruut diverges slightly from the [SSML standard](https://www.w3.org/TR/speech-synthesis11/) here by only allowing lexicons to be defined within the SSML document itself. Additionally, the `id` attribute of the `<lexicon>` element can be left off to indicate a \"default\" inline lexicon that does not require a corresponding `<lookup>` tag.\n\nFor example, the following document will yield three different pronunciations for the word \"tomato\":\n\n``` xml\n<?xml version=\"1.0\"?>\n<speak version=\"1.1\"\n       xmlns=\"http://www.w3.org/2001/10/synthesis\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis\n                 http://www.w3.org/TR/speech-synthesis11/synthesis.xsd\"\n       xml:lang=\"en-US\">\n\n  <lexicon xml:id=\"test\" alphabet=\"ipa\">\n    <lexeme>\n      <grapheme>\n        tomato\n      </grapheme>\n      <phoneme>\n        <!-- Individual phonemes are separated by whitespace -->\n        t É™ m ËˆÉ‘ t oÊŠ\n      </phoneme>\n    </lexeme>\n    <lexeme>\n      <grapheme role=\"fake-role\">\n        tomato\n      </grapheme>\n      <phoneme>\n        <!-- Made up pronunciation for fake word role -->\n        t É™ m Ëˆi t oÊŠ\n      </phoneme>\n    </lexeme>\n  </lexicon>\n\n  <w>tomato</w>\n  <lookup ref=\"test\">\n    <w>tomato</w>\n    <w role=\"fake-role\">tomato</w>\n  </lookup>\n</speak>\n```\n\nThe first \"tomato\" will be looked up in the U.S. English lexicon (`/t É™ m ËˆeÉª t oÊŠ/`). Within the `<lookup>` tag's scope, the second and third \"tomato\" words will be looked up in the inline lexicon. The third \"tomato\" word has a [role](#word-roles) attached  (selecting a made up pronunciation in this case).\n\nEven further from the SSML standard, gruut allows you to leave off the `<lexicon>` id entirely. With no `id`, a `<lookup>` tag is no longer needed, allowing you to override the pronunciation of any word in the document: \n\n``` xml\n<?xml version=\"1.0\"?>\n<speak version=\"1.1\"\n       xmlns=\"http://www.w3.org/2001/10/synthesis\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis\n                 http://www.w3.org/TR/speech-synthesis11/synthesis.xsd\"\n       xml:lang=\"en-US\">\n\n  <!-- No id means change all words without a lookup -->\n  <lexicon>\n    <lexeme>\n      <grapheme>\n        tomato\n      </grapheme>\n      <phoneme>\n        t É™ m ËˆÉ‘ t oÊŠ\n      </phoneme>\n    </lexeme>\n  </lexicon>\n\n  <w>tomato</w>\n</speak>\n```\n\nThis will yield a pronunciation of `/t É™ m ËˆÉ‘ t oÊŠ/` for all instances of \"tomato\" in the document (unless they have a `<lookup>`).\n\n\n---\n\n## Text to Speech Models\n\n* [GlowTTS](https://github.com/rhasspy/glow-tts-train) (50 voices)\n    * English (`en-us`, 27 voices)\n        * blizzard\\_fls (F, accent, [Blizzard](https://www.cstr.ed.ac.uk/projects/blizzard/2017/usborne_blizzard2017/license.html))\n        * blizzard\\_lessac (F, [Blizzard](https://www.cstr.ed.ac.uk/projects/blizzard/2011/lessac_blizzard2011/license.html))\n        * cmu\\_aew (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_ahw (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_aup (M, accent, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_bdl (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_clb (F, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_eey (F, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_fem (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_jmk (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_ksp (M, accent, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_ljm (F, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_lnh (F, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_rms (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_rxr (M, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_slp (F, accent, [Arctic](licenses/cmuarctic.txt))\n        * cmu\\_slt (F, [Arctic](licenses/cmuarctic.txt))\n        * ek (F, accent, [M-AILabs](licenses/m-ailabs.txt))\n        * harvard (F, accent, [CC/Attr/NC](https://creativecommons.org/licenses/by-nc/4.0/legalcode))\n        * kathleen (F, [CC0](licenses/cc0.txt))\n        * ljspeech (F, [Public Domain](https://librivox.org/pages/public-domain/))\n        * mary\\_ann (F, [M-AILabs](licenses/m-ailabs.txt))\n        * northern\\_english\\_male (M, [CC/Attr/SA](licenses/cc4asa.txt))\n        * scottish\\_english\\_male (M, [CC/Attr/SA](licenses/cc4asa.txt))\n        * southern\\_english\\_female (F, [CC/Attr/SA](licenses/cc4asa.txt))\n        * southern\\_english\\_male (M, [CC/Attr/SA](licenses/cc4asa.txt))\n        * judy\\_bieber (F, [M-AILabs](licenses/m-ailabs.txt))\n    * German (`de-de`, 7 voices)\n        * eva\\_k (F, [M-AILabs](licenses/m-ailabs.txt))\n        * hokuspokus (F, [CC0](licenses/cc0.txt))\n        * karlsson (M, [M-AILabs](licenses/m-ailabs.txt))\n        * kerstin (F, [CC0](licenses/cc0.txt))\n        * pavoque (M, [CC4/BY/NC/SA](https://github.com/marytts/pavoque-data))\n        * rebecca\\_braunert\\_plunkett (F, [M-AILabs](licenses/m-ailabs.txt))\n        * thorsten (M, [CC0](licenses/cc0.txt))\n    * French (`fr-fr`, 3 voices)\n        * gilles\\_le\\_blanc (M, [M-AILabs](licenses/m-ailabs.txt))\n        * siwis (F, [CC/Attr](licenses/cc4a.txt))\n        * tom (M, [ODbL](licenses/odbl.txt))\n    * Spanish (`es-es`, 2 voices)\n        * carlfm (M, public domain)\n        * karen\\_savage (F, [M-AILabs](licenses/m-ailabs.txt))\n    * Dutch (`nl`, 4 voices)\n        * bart\\_de\\_leeuw (M, [Apache2](licenses/apache2.txt))\n        * flemishguy (M, [CC0](licenses/cc0.txt))\n        * rdh (M, [CC0](licenses/cc0.txt))\n        * nathalie (F, [CC0](licenses/cc0.txt))\n    * Italian (`it-it`, 2 voices)\n        * lisa (F, [M-AILabs](licenses/m-ailabs.txt))\n        * riccardo\\_fasol (M, [Apache2](licenses/apache2.txt))\n    * Swedish (`sv-se`, 1 voice)\n        * talesyntese (M, [CC0](licenses/cc0.txt))\n    * Swahili (`sw`, 1 voice)\n        * blblia\\_takatifu (M, [Sermon Online](https://www.sermon-online.com))\n    * Russian (`ru-ru`, 3 voices)\n        * hajdurova (F, [M-AILabs](licenses/m-ailabs.txt))\n        * nikolaev (M, [M-AILabs](licenses/m-ailabs.txt))\n        * minaev (M, [M-AILabs](licenses/m-ailabs.txt))\n\n## Vocoders\n\n* [Hi-Fi GAN](https://github.com/rhasspy/hifi-gan-train)\n    * Universal large (slowest)\n    * VCTK \"small\"\n    * VCTK \"medium\" (fastest)\n    \n---\n\n## Benchmarks\n\nThe following benchmarks were run on:\n\n* Core i7-8750H (`amd64`)\n* Raspberry Pi 4 (`aarch64`)\n* Raspberry Pi 3 (`armv7l`)\n\nMultiple runs were done at each quality level, with the first run being discarded so that cache for the model files was hot.\n\nThe RTF (real-time factor) is computed as the time taken to synthesize audio divided by the duration of the synthesized audio. An RTF less than 1 indicates that audio was able to be synthesized faster than real-time.\n\n| Platform | Quality | RTF   |\n| -------- | ------- | ---   |\n| amd64    | high    | 0.25  |\n| amd64    | medium  | 0.06  |\n| amd64    | low     | 0.05  |\n| -------- | ------- | ---   |\n| aarch64  | high    | 4.28  |\n| aarch64  | medium  | 1.82  |\n| aarch64  | low     | 0.56  |\n| -------- | ------- | ---   |\n| armv7l   | high    | 16.83 |\n| armv7l   | medium  | 7.16  |\n| armv7l   | low     | 2.22  |\n\nSee the benchmarking scripts in `scripts/` for more details.\n\n---\n\n## Architecture\n\nLarynx breaks text to speech into 4 distinct steps:\n\n1. Text to [IPA](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet) phonemes ([gruut](https://github.com/rhasspy/gruut))\n2. Phonemes to ids (`phonemes.txt` file from voice)\n3. Phoneme ids to mel spectrograms ([glow-tts](https://github.com/rhasspy/glow-tts-train))\n4. Mel spectrograms to waveforms ([hifi-gan](https://github.com/rhasspy/hifi-gan-train))\n\n![Larynx architecture](img/architecture.png)\n\nVoices are trained on phoneme ids and mel spectrograms. For each language, the voice with the most data available was used as a base model and fine-tuned.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rhasspy/larynx",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "larynx",
    "package_url": "https://pypi.org/project/larynx/",
    "platform": "",
    "project_url": "https://pypi.org/project/larynx/",
    "project_urls": {
      "Homepage": "https://github.com/rhasspy/larynx"
    },
    "release_url": "https://pypi.org/project/larynx/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Neural text to speech system using the International Phonetic Alphabet",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11996935,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7dc68b1a94a5e6fc965e023f4f3a410bdba9fe5ecad7d3a3e751dad066843de",
          "md5": "66410411c6b9d8ce149335bec2573988",
          "sha256": "bd78ba530d7c882d11e555b697b0ec8760ff38e0a6499e378b42055f6654175f"
        },
        "downloads": -1,
        "filename": "larynx-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66410411c6b9d8ce149335bec2573988",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25405,
        "upload_time": "2021-03-28T20:31:22",
        "upload_time_iso_8601": "2021-03-28T20:31:22.263655Z",
        "url": "https://files.pythonhosted.org/packages/b7/dc/68b1a94a5e6fc965e023f4f3a410bdba9fe5ecad7d3a3e751dad066843de/larynx-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f84da2e3a5feffe04730def2fcc6712b3b182a4c89bd8bd08fa410e058a6130f",
          "md5": "0a75573145d033bee1175e38b4fbc1ae",
          "sha256": "2482811505a7d8296293a011357c7a87baa01f4e07e90fe4493bf778132ba954"
        },
        "downloads": -1,
        "filename": "larynx-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a75573145d033bee1175e38b4fbc1ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31925,
        "upload_time": "2021-03-31T19:59:58",
        "upload_time_iso_8601": "2021-03-31T19:59:58.589483Z",
        "url": "https://files.pythonhosted.org/packages/f8/4d/a2e3a5feffe04730def2fcc6712b3b182a4c89bd8bd08fa410e058a6130f/larynx-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26b07bb136639b1d31415fbe730c38c75e7a287b9336635a50e79759212f5fca",
          "md5": "19faf5e0f2f279a5402c1fc7873feb3e",
          "sha256": "d68f77d3514ff5e500d96dc910ccc03abdc9869ddd6da19458341a90130c155a"
        },
        "downloads": -1,
        "filename": "larynx-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "19faf5e0f2f279a5402c1fc7873feb3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31666100,
        "upload_time": "2021-08-23T20:37:51",
        "upload_time_iso_8601": "2021-08-23T20:37:51.089239Z",
        "url": "https://files.pythonhosted.org/packages/26/b0/7bb136639b1d31415fbe730c38c75e7a287b9336635a50e79759212f5fca/larynx-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c448b941ea73bd3ae649124f0bc43a4b01a3c77db660bc65c3de7a0083756085",
          "md5": "1a3e8643a00c67676a2682fe13806657",
          "sha256": "09746627ee08c0b56d51c66e44550176fb06542ad5028a306c8f48b9209cae31"
        },
        "downloads": -1,
        "filename": "larynx-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a3e8643a00c67676a2682fe13806657",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31680356,
        "upload_time": "2021-10-20T16:41:44",
        "upload_time_iso_8601": "2021-10-20T16:41:44.032171Z",
        "url": "https://files.pythonhosted.org/packages/c4/48/b941ea73bd3ae649124f0bc43a4b01a3c77db660bc65c3de7a0083756085/larynx-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ebe61e93a10d2016f9f5aa9fed6146041a1865a5e73922b525270a12d96a4f8",
          "md5": "9affa7d64155ada0ba3461dbc10684aa",
          "sha256": "fe84640ee93e4256b29f785c4b0bafb9aef88e0416b7443e14419e3fe900d4ce"
        },
        "downloads": -1,
        "filename": "larynx-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9affa7d64155ada0ba3461dbc10684aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31680427,
        "upload_time": "2021-10-20T17:34:58",
        "upload_time_iso_8601": "2021-10-20T17:34:58.665783Z",
        "url": "https://files.pythonhosted.org/packages/8e/be/61e93a10d2016f9f5aa9fed6146041a1865a5e73922b525270a12d96a4f8/larynx-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "936190c52f109791cbd3da85532478cb00d1096ae61f46ac0cfa9c2e52ac77df",
          "md5": "1592a9864ab99e61dfa2a3a6bdfb78b7",
          "sha256": "116b730d21321e5584ac9bdd1d384fa50187c858496b68b6fc78f4deca469aa9"
        },
        "downloads": -1,
        "filename": "larynx-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1592a9864ab99e61dfa2a3a6bdfb78b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31680949,
        "upload_time": "2021-10-21T16:00:27",
        "upload_time_iso_8601": "2021-10-21T16:00:27.406039Z",
        "url": "https://files.pythonhosted.org/packages/93/61/90c52f109791cbd3da85532478cb00d1096ae61f46ac0cfa9c2e52ac77df/larynx-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e27eaceaa46c095eae64ee7f236e9b078f06c610c59c6d6285efe79df994b526",
          "md5": "7f25f2114e7231aee73302215e100d99",
          "sha256": "c867e519e6b33de5d84c14667baf734d3f4f38603399899a569b9191b0ae728e"
        },
        "downloads": -1,
        "filename": "larynx-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7f25f2114e7231aee73302215e100d99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31682952,
        "upload_time": "2021-10-22T14:40:12",
        "upload_time_iso_8601": "2021-10-22T14:40:12.743572Z",
        "url": "https://files.pythonhosted.org/packages/e2/7e/aceaa46c095eae64ee7f236e9b078f06c610c59c6d6285efe79df994b526/larynx-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e52d210a21ed74df849b5a8e446f83bbe166dfe80b58d1f0d5d139f55221ba38",
          "md5": "15c5b413da27ec6e506810617f6c4c41",
          "sha256": "4f073ce1ef1ae0ce806e896dfee9fd242c287964eeaf46c9587ad33d5c4efc83"
        },
        "downloads": -1,
        "filename": "larynx-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15c5b413da27ec6e506810617f6c4c41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31686189,
        "upload_time": "2021-11-11T16:30:34",
        "upload_time_iso_8601": "2021-11-11T16:30:34.079140Z",
        "url": "https://files.pythonhosted.org/packages/e5/2d/210a21ed74df849b5a8e446f83bbe166dfe80b58d1f0d5d139f55221ba38/larynx-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e52d210a21ed74df849b5a8e446f83bbe166dfe80b58d1f0d5d139f55221ba38",
        "md5": "15c5b413da27ec6e506810617f6c4c41",
        "sha256": "4f073ce1ef1ae0ce806e896dfee9fd242c287964eeaf46c9587ad33d5c4efc83"
      },
      "downloads": -1,
      "filename": "larynx-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "15c5b413da27ec6e506810617f6c4c41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 31686189,
      "upload_time": "2021-11-11T16:30:34",
      "upload_time_iso_8601": "2021-11-11T16:30:34.079140Z",
      "url": "https://files.pythonhosted.org/packages/e5/2d/210a21ed74df849b5a8e446f83bbe166dfe80b58d1f0d5d139f55221ba38/larynx-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}