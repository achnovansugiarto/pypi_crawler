{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# dilib\n\nDependency injection (DI) library for python\n\n[![PyPI version](https://badge.fury.io/py/dilib.svg)](https://badge.fury.io/py/dilib)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/dilib.svg)](https://pypi.python.org/pypi/dilib/)\n[![GitHub Actions (Tests)](https://github.com/ansatzcapital/dilib/workflows/Test/badge.svg)](https://github.com/ansatzcapital/dilib)\n\n## About DI\n\n[Dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) \ncan be thought of as a **software engineering pattern** \nas well as a **framework**. The goal is to develop objects in a more\ncomposable and modular way.\n\nThe **pattern** is: when creating objects, always express what you depend on, \nand let someone else give you those dependencies. (This is sometimes\nreferred to as the \"Hollywood principle\": \"Don't call us; we'll call you.\")\n\nThe **framework** is meant to ease the inevitable boilerplate \nthat occurs when following this pattern, and `dilib` is one such framework.\n\nSee the [Google Clean Code Talk about Dependency Injection](https://testing.googleblog.com/2008/11/clean-code-talks-dependency-injection.html).\n\n## Installation\n\n`dilib` is available on [PyPI](https://pypi.org/project/dilib/):\n\n```bash\npip install dilib\n```\n\n## Quick Start\n\nThere are 3 major parts of this framework:\n\n- `dilib.{Prototype,Singleton}`: A recipe that describes how to instantiate \nthe object when needed later. `dilib.Prototype` indicates to the retriever\nthat a new instance should be created per retrieval, \nwhile `dilib.Singleton` indicates only 1 instance of the object \nshould exist. (Both spec types inherit from `dilib.Spec`.)\n- `dilib.Config`: Nestable bag of types and values, bound by specs, \nthat can be loaded, perturbed, and saved.\n- `dilib.Container`: The object retriever--it's in charge of \n_materializing_ the aforementioned delayed specs that \nare wired together by config into actual instances \n(plus caching, if indicated by the spec).\n\n```python\nfrom typing import Optional\n\nimport dilib\n\n\n# API\nclass Engine:\n    pass\n\n\n# An implementation of the engine API that makes network calls\nclass DBEngine(Engine):\n    def __init__(self, addr: str, token: Optional[str] = None):\n        self.addr = addr\n        self.token = token\n\n\n# An implementation of the engine API designed for testing\nclass MockEngine(Engine):\n     pass\n\n\nclass Car:\n    # Takes an Engine instance via constructor injection\n    def __init__(self, engine: Engine):\n        self.engine = engine\n\n\nclass EngineConfig(dilib.Config):\n    db_addr = dilib.GlobalInput(str, default=\"some-db-addr\")\n\n    token_prefix = dilib.LocalInput(str)\n    token = dilib.Prototype(lambda x: x + \".bar\", x=token_prefix)\n\n    # Objects depend on other objects via named aliases\n    engine0: Engine = dilib.Singleton(DBEngine, db_addr, token=token)\n    # Or equivalently, if DBEngine used dilib.SingletonMixin:\n    # engine0 = dilib.DBEngine(db_addr, token=token)\n\n    # Alternate engine spec\n    engine1: Engine = dilib.Singleton(DBEngine, db_addr)\n\n    # Forward spec resolution to the target spec\n    engine: Engine = dilib.Forward(engine0)\n\n\nclass CarConfig(dilib.Config):\n    # Configs depend on other configs via types. \n    # Here, CarConfig depends on EngineConfig.\n    engine_config = EngineConfig(foo_prefix=\"baz\")\n\n    car = dilib.Singleton(Car, engine_config.engine)\n\n\n# Get instance of config (with global input value set)\ncar_config: CarConfig = dilib.get_config(\n  CarConfig, db_addr=\"some-other-db-addr\"\n)\n\n# Perturb here as you'd like. E.g.:\ncar_config.engine_config.Engine = dilib.Singleton(MockEngine)\n\n# Pass config to a container\ncontainer: dilib.Container[CarConfig] = dilib.get_container(car_config)\n\n# Retrieve objects from container (some of which are cached inside)\nassert container.config.engine_config.db_addr == \"some-other-db-addr\"\nassert isinstance(container.config.engine_config.engine, MockEngine)\nassert isinstance(container.config.car, Car)\nassert container.config.car is container.car  # Because it's a Singleton\n```\n\nNotes:\n- `Car` *takes in* an `Engine` via its constructor \n(known as \"constructor injection\"),\ninstead of making or getting one within itself.\n- For this to work, `Car` cannot make any assumptions about \n*what kind* of `Engine` it received. Different engines have different \nconstructor params but have the [same API and semantics](https://en.wikipedia.org/wiki/Liskov_substitution_principle).\n- In order to take advantage of typing (e.g., `mypy`, PyCharm auto-complete), \nuse `dilib.get_config(...)` and `container.config`, \nwhich are type-safe alternatives to `CarConfig().get(...)` and \ndirect `container` access. Note also how we set the `engine` config field type\nto the base class `Engine`--this way, clients of the config are \nabstracted away from which implementation is currently configured. \n\n### API Overview\n\n- `dilib.Config`: Inherit from this to specify your objects and params\n- `config = dilib.get_config(ConfigClass, **global_inputs)`: Instantiate \nconfig object\n  - Alternatively: `config = ConfigClass().get(**global_inputs)`\n- `container = dilib.get_container(config)`: Instantiate container object\nby passing in the config object \n  - Alternatively: `container = dilib.Container(config)`\n- `container.config.x_config.y_config.z`: Get the instantianted object\n  - Alternatively: `container.x_config.y_config.z`, \nor even `container[\"x_config.y_config.z\"]`\n\nSpecs:\n\n- `dilib.Object`: Pass-through already-instantiated object\n- `dilib.Forward`: Forward to a different config field\n- `dilib.Prototype`: Instantiate a new object at each container retrieval\n- `dilib.Singleton`: Instantiate and cache object at each container retrieval\n- `dilib.Singleton{Tuple,List,Dict}`: Special helpers to ease \ncollections of specs. E.g.:\n\n```python\nimport dataclasses\n\nimport dilib\n\n\n@dataclasses.dataclass(frozen=True)\nclass ValuesWrapper:\n    x: int\n    y: int\n    z: int = 3\n\n\nclass CollectionsConfig(dilib.Config):\n    x: int = dilib.Object(1)\n    y: int = dilib.Object(2)\n    z: int = dilib.Object(3)\n\n    xy_tuple = dilib.SingletonTuple(x, y)\n    xy_list = dilib.SingletonList(x, y)\n    xy_dict0 = dilib.SingletonDict(x=x, y=y)\n    xy_dict1 = dilib.SingletonDict({\"x\": x, \"y\": y})\n    xy_dict2 = dilib.SingletonDict({\"x\": x, \"y\": y}, z=z)\n\n    # You can also build a partial kwargs dict that can be \n    # re-used and combined downstream\n    partial_kwargs = dilib.SingletonDict(x=x, y=y)\n    values0 = dilib.Singleton(ValuesWrapper, __lazy_kwargs=partial_kwargs)\n    values1 = dilib.Singleton(ValuesWrapper, z=4, __lazy_kwargs=partial_kwargs)\n\n\nconfig = dilib.get_config(CollectionsConfig)\ncontainer = dilib.get_container(config)\n\nassert container.config.xy_tuple == (1, 2)\nassert container.config.xy_list == [1, 2]\nassert container.config.xy_dict0 == {\"x\": 1, \"y\": 2}\nassert container.config.xy_dict1 == {\"x\": 1, \"y\": 2}\nassert container.config.xy_dict2 == {\"x\": 1, \"y\": 2, \"z\": 3}\n```\n\n## Comparisons with Other DI Frameworks\n\n### pinject\n\nA prominent DI library in \npython is [`pinject`](https://github.com/google/pinject).\n\n#### Advantages of dilib\n\n- Focus on simplicity. E.g.:\n  - `foo = dilib.Object(\"a\")` rather than `bind(\"foo\", to_instance=\"a\")`.\n  - Child configs look like just another field on the config.\n- Getting is via *names* rather than *classes*.\n  - In `pinject`, the equivalent of container attr access\n    takes a class (like `Car`) rather than a config address.\n- No implicit wiring: No assumptions are made about aligning \narg names with config params.\n  - Granted, `pinject` does have an explicit mode, \n    but the framework's default state is implicit.\n  - The explicit wiring in dilib configs obviates the need \n  for complications like [inject decorators](https://github.com/google/pinject#safety) \n  and [annotations](https://github.com/google/pinject#annotations).\n- Minimal or no pollution of objects: Objects are not aware of \nthe DI framework. The only exception is:\nif you want the IDE autocompletion to work when wiring up configs in an\nenvironment that does not support `ParamSpec`\n(e.g., `car = Car(engine=...)`), you have\nto inherit from, e.g., `dilib.SingletonMixin`. But this is completely \noptional; in `pinject`, on the other hand, one is required to \ndecorate with `@pinject.inject()` in some circumstances.\n\n### dependency-injector\n\nAnother prominent DI library in python is [`dependency-injector`](https://github.com/ets-labs/python-dependency-injector).\n\n#### Advantages of dilib\n\n- `dilib` discourages use of class-level state by not supporting it\n(that is, `dilib.Container` is equivalent to \n`dependency_injector.containers.DynamicContainer`)\n- Cleaner separation between \"config\" and \"container\" \n(dependency-injector conflates the two)\n- Easy-to-use perturbing with simple `config.x = new_value` syntax\n- Easier to nest configs via config locator pattern\n- Child configs are typed instead of relying on \n`DependenciesContainer` stub (which aids in IDE auto-complete)\n- Easier-to-use global input configuration\n- Written in native python for more transparency\n\n## Design\n\n### Prevent Pollution of Objects\n\nThe dependency between the DI config and the actual objects in the \nobject graph should be one way: \nthe DI config depends on the object graph types and values. \nThis keeps the objects clean of \nparticular decisions made by the DI framework.\n\n(`dilib` offers optional mixins that violate this decision \nfor users that want to favor the typing and \nauto-completion benefits of using the object types directly.)\n\n### Child Configs are Singletons by Type\n\nIn `dilib`, when you set a child config on a config object, \nyou're not actually instantiating the child config. \nRather, you're creating a spec that will be instantiated \nwhen the root config's `.get()` is called. \nThis means that the config instances are singletons by type \n(unlike the actual objects specified in the config, which are by alias). \nIt would be cleaner to create instances of common configs and \npass them through to other configs \n(that's what DI is all about, after all!). However, the decision was made \nto not allow this because this would make \nbuilding up configs almost as complicated as building up the \nactual object graph users are interested in \n(essentially, the user would be engaged in an abstract meta-DI problem). \nAs such, all references to the same config type are \nautomatically resolved to the same instance, \nat the expense of some flexibility and directness. \nThe upside, however, is that it's much easier to create nested configs, \nwhich means users can get to designing the actual object graph quicker.\n\n### Factories for Dynamic Objects\n\nIf you need to configure objects dynamically \n(e.g., check db value to resolve what type to use, \nset config keys based on another value), consider a factory pattern like:\n\n```python\nimport dilib\n\n\nclass Foo:\n    @property\n    def value(self) -> int:\n        raise NotImplementedError\n\n\nclass FooFactory:\n    def get_foo(self) -> Foo:\n        raise NotImplementedError\n\n\nclass FooClient:\n    def __init__(self, foo_factory: FooFactory):\n        self.foo_factory = foo_factory\n        \n    def get_foo_value(self) -> int:\n        foo = self.foo_factory.get_foo()\n        return foo.value\n\n\nclass FooConfig(dilib.Config):\n    db_param = dilib.Object(\"some-db-addr\")\n    foo_factory = dilib.Singleton(FooFactory, db_param)\n    foo_client = dilib.Singleton(FooClient, foo_factory=foo_factory)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ansatzcapital/dilib",
    "keywords": "dependency injection, di, inversion of control, ioc, design patterns",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dilib",
    "package_url": "https://pypi.org/project/dilib/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dilib/",
    "project_urls": {
      "Homepage": "https://github.com/ansatzcapital/dilib",
      "Packaging": "https://pypi.org/project/dilib/",
      "Source": "https://github.com/ansatzcapital/dilib",
      "Tracker": "https://github.com/ansatzcapital/dilib/issues"
    },
    "release_url": "https://pypi.org/project/dilib/0.4.2/",
    "requires_dist": [
      "typing-extensions (>=4.4.0)",
      "build (>=0.6.0) ; extra == 'building'",
      "setuptools-scm[toml] (>=3.4) ; extra == 'building'",
      "wheel (>=0.38.0) ; extra == 'building'",
      "black (>=22.8) ; extra == 'testing'",
      "docformatter (>=1.5.0) ; extra == 'testing'",
      "flake8 (>=5.0.4) ; extra == 'testing'",
      "isort (>=5.2.2) ; extra == 'testing'",
      "mypy (>=0.800) ; extra == 'testing'",
      "pytest (>=6.2.5) ; extra == 'testing'",
      "pytest-cov (<3,>=2) ; extra == 'testing'",
      "pyright (>=1.1.284) ; extra == 'testing'",
      "tox (>=3.27.1) ; extra == 'testing'"
    ],
    "requires_python": ">=3.7",
    "summary": "Dependency injection library",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16322317,
  "releases": {
    "0.0.1": [],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63dced557591be73e2697299da6703a7a9c01dec12a1ffcad98ec399b32b44be",
          "md5": "9bf16efc5b600ee09dc346873017e8ed",
          "sha256": "846753c730f5f418e0790947573556af4d446804d9feee5b74fa49d95cfcfdd4"
        },
        "downloads": -1,
        "filename": "dilib-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bf16efc5b600ee09dc346873017e8ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19620,
        "upload_time": "2022-12-05T20:59:27",
        "upload_time_iso_8601": "2022-12-05T20:59:27.445623Z",
        "url": "https://files.pythonhosted.org/packages/63/dc/ed557591be73e2697299da6703a7a9c01dec12a1ffcad98ec399b32b44be/dilib-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf6559fe26887c0ffda3ec3233cad816f6296372f30056a51e7c19cfccd65c5",
          "md5": "ea6b01cc8ad4c11f7de085a2a61a52fe",
          "sha256": "a4b9933a80183c1db3d8d06a2f9e8f5e1cdead550fc4633f624a2a9075c98031"
        },
        "downloads": -1,
        "filename": "dilib-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea6b01cc8ad4c11f7de085a2a61a52fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21736,
        "upload_time": "2022-12-05T20:59:28",
        "upload_time_iso_8601": "2022-12-05T20:59:28.541045Z",
        "url": "https://files.pythonhosted.org/packages/0c/f6/559fe26887c0ffda3ec3233cad816f6296372f30056a51e7c19cfccd65c5/dilib-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "189a8d0cfb32a23919b48a67dbb5ee6109bfcee759e68af4411992ab9ae00764",
          "md5": "e5798794de909e30dde4fbd0254c6be6",
          "sha256": "9eca55f8fb6f3e6ad187002c4b867e531c63c3dee39388b90e3abedd65ce8ad8"
        },
        "downloads": -1,
        "filename": "dilib-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5798794de909e30dde4fbd0254c6be6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19851,
        "upload_time": "2022-12-05T21:12:32",
        "upload_time_iso_8601": "2022-12-05T21:12:32.654206Z",
        "url": "https://files.pythonhosted.org/packages/18/9a/8d0cfb32a23919b48a67dbb5ee6109bfcee759e68af4411992ab9ae00764/dilib-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2424759fb68abf0b6893310bd1d83d5c9e270f13f8eb4afb6c24a5983183a0d7",
          "md5": "87b1647903b833b54b4a144a4fdfadf5",
          "sha256": "7c054417b3b1b327c8a3f947d24ffae06fcbdee58f242629595b2228f8b8bcc9"
        },
        "downloads": -1,
        "filename": "dilib-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87b1647903b833b54b4a144a4fdfadf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22367,
        "upload_time": "2022-12-05T21:12:34",
        "upload_time_iso_8601": "2022-12-05T21:12:34.295159Z",
        "url": "https://files.pythonhosted.org/packages/24/24/759fb68abf0b6893310bd1d83d5c9e270f13f8eb4afb6c24a5983183a0d7/dilib-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da295017d6e213daa54e562a3849b78d6ecfad6ca0b275b0c77c8dfd2a8b6e1a",
          "md5": "9e13e73fb61808f442a94493815e6362",
          "sha256": "b882fb945118e64ec6d5353f190590803c97b7421c1a3886db51f7fe207fb914"
        },
        "downloads": -1,
        "filename": "dilib-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e13e73fb61808f442a94493815e6362",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24033,
        "upload_time": "2022-12-12T15:14:40",
        "upload_time_iso_8601": "2022-12-12T15:14:40.015828Z",
        "url": "https://files.pythonhosted.org/packages/da/29/5017d6e213daa54e562a3849b78d6ecfad6ca0b275b0c77c8dfd2a8b6e1a/dilib-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c426b0a17a407efda829e0a77bbe4dbf16f4c9d0240bf1e16cd0f2e26a3d7d5f",
          "md5": "a456c5e1c1992dad850eff862f52222a",
          "sha256": "914a264daba890832303d431c440079ce0350bb02954d2899142f162c549f4fd"
        },
        "downloads": -1,
        "filename": "dilib-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a456c5e1c1992dad850eff862f52222a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26427,
        "upload_time": "2022-12-12T15:14:41",
        "upload_time_iso_8601": "2022-12-12T15:14:41.604145Z",
        "url": "https://files.pythonhosted.org/packages/c4/26/b0a17a407efda829e0a77bbe4dbf16f4c9d0240bf1e16cd0f2e26a3d7d5f/dilib-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7a63339cd50e6a5f92d0b2823ad53d5a2d23722db4c6598beadaf716eeb38b2",
          "md5": "31b938581f5831c0c755051969db3f0c",
          "sha256": "0d4cc006139d451203ed98e75634358572fe02b9fee24cad5f035814d30ae084"
        },
        "downloads": -1,
        "filename": "dilib-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31b938581f5831c0c755051969db3f0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24816,
        "upload_time": "2022-12-22T15:16:28",
        "upload_time_iso_8601": "2022-12-22T15:16:28.080848Z",
        "url": "https://files.pythonhosted.org/packages/c7/a6/3339cd50e6a5f92d0b2823ad53d5a2d23722db4c6598beadaf716eeb38b2/dilib-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "181289014fd87a3dfebd62f7be2a47f0e48edf40488dc0a2a92d17e43d27fdf1",
          "md5": "28f3143153a09ee4057673fb3194fb8e",
          "sha256": "054d87ff33ab046046ea6783bea295276eb5063bc0dd8d7afc3aa03329e17e4e"
        },
        "downloads": -1,
        "filename": "dilib-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "28f3143153a09ee4057673fb3194fb8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27162,
        "upload_time": "2022-12-22T15:16:29",
        "upload_time_iso_8601": "2022-12-22T15:16:29.710394Z",
        "url": "https://files.pythonhosted.org/packages/18/12/89014fd87a3dfebd62f7be2a47f0e48edf40488dc0a2a92d17e43d27fdf1/dilib-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be826273c98f2fa0bef336fb16f5021883a59069aa993890abc3715086a05374",
          "md5": "463c5ba8457d87528b24910ee0e72509",
          "sha256": "8b9e57e8f6d2b3d4e99cbfc3e73d72408079c5f004061f63732e02f502cac402"
        },
        "downloads": -1,
        "filename": "dilib-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "463c5ba8457d87528b24910ee0e72509",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25214,
        "upload_time": "2023-01-05T21:36:57",
        "upload_time_iso_8601": "2023-01-05T21:36:57.824358Z",
        "url": "https://files.pythonhosted.org/packages/be/82/6273c98f2fa0bef336fb16f5021883a59069aa993890abc3715086a05374/dilib-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4589125b3a21b2031a4b116bdde6385a3ad9d2d2532bc4ff1e76e685fae5ea3e",
          "md5": "ebd69b7462ef9efd36e18e10e5365508",
          "sha256": "bbe861add80f1d5621a2e459964e49167a7f8d5fc829587c5b8b054d15f88420"
        },
        "downloads": -1,
        "filename": "dilib-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ebd69b7462ef9efd36e18e10e5365508",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27918,
        "upload_time": "2023-01-05T21:36:59",
        "upload_time_iso_8601": "2023-01-05T21:36:59.464503Z",
        "url": "https://files.pythonhosted.org/packages/45/89/125b3a21b2031a4b116bdde6385a3ad9d2d2532bc4ff1e76e685fae5ea3e/dilib-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be826273c98f2fa0bef336fb16f5021883a59069aa993890abc3715086a05374",
        "md5": "463c5ba8457d87528b24910ee0e72509",
        "sha256": "8b9e57e8f6d2b3d4e99cbfc3e73d72408079c5f004061f63732e02f502cac402"
      },
      "downloads": -1,
      "filename": "dilib-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "463c5ba8457d87528b24910ee0e72509",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25214,
      "upload_time": "2023-01-05T21:36:57",
      "upload_time_iso_8601": "2023-01-05T21:36:57.824358Z",
      "url": "https://files.pythonhosted.org/packages/be/82/6273c98f2fa0bef336fb16f5021883a59069aa993890abc3715086a05374/dilib-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4589125b3a21b2031a4b116bdde6385a3ad9d2d2532bc4ff1e76e685fae5ea3e",
        "md5": "ebd69b7462ef9efd36e18e10e5365508",
        "sha256": "bbe861add80f1d5621a2e459964e49167a7f8d5fc829587c5b8b054d15f88420"
      },
      "downloads": -1,
      "filename": "dilib-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ebd69b7462ef9efd36e18e10e5365508",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 27918,
      "upload_time": "2023-01-05T21:36:59",
      "upload_time_iso_8601": "2023-01-05T21:36:59.464503Z",
      "url": "https://files.pythonhosted.org/packages/45/89/125b3a21b2031a4b116bdde6385a3ad9d2d2532bc4ff1e76e685fae5ea3e/dilib-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}