{
  "info": {
    "author": "Shneor Elmaleh",
    "author_email": "770elmo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# FlashText 2.0\n\n\n----\n\n\n[![PyPi](https://img.shields.io/badge/PyPi-0.1.0-yellow)](https://pypi.org/project/flashtext2/)\n[![Downloads](https://pepy.tech/badge/flashtext2)](https://pepy.tech/project/flashtext2)\n[![Downloads](https://pepy.tech/badge/flashtext2/month)](https://pepy.tech/project/flashtext2)\n\n----\n[`flashtext`](https://github.com/vi3k6i5/flashtext)\nis great, but wouldn't it be nice if the code was much simpler, so instead of \n[this](https://github.com/vi3k6i5/flashtext/blob/5591859aabe3da37499a20d0d0d6dd77e480ed8d/flashtext/keyword.py#L470-L558):\n```py\ndef extract_keywords(self, sentence, span_info=False):\n    keywords_extracted = []\n    if not sentence:\n        # if sentence is empty or none just return empty list\n        return keywords_extracted\n    if not self.case_sensitive:\n        sentence = sentence.lower()\n    current_dict = self.keyword_trie_dict\n    sequence_start_pos = 0\n    sequence_end_pos = 0\n    reset_current_dict = False\n    idx = 0\n    sentence_len = len(sentence)\n    while idx < sentence_len:\n        char = sentence[idx]\n        # when we reach a character that might denote word end\n        if char not in self.non_word_boundaries:\n\n            # if end is present in current_dict\n            if self._keyword in current_dict or char in current_dict:\n                # update longest sequence found\n                sequence_found = None\n                longest_sequence_found = None\n                is_longer_seq_found = False\n                if self._keyword in current_dict:\n                    sequence_found = current_dict[self._keyword]\n                    longest_sequence_found = current_dict[self._keyword]\n                    sequence_end_pos = idx\n                    \n    # and many more lines ... (89 lines in total)\n```\nWe would have [this](https://github.com/shner-elmo/FlashText2.0/blob/master/flashtext2/keyword_processor.py#L54#L81):\n```py\ndef extract_keywords_iter(self, sentence: str) -> Iterator[tuple[str, int, int]]:\n    if not self._case_sensitive:\n        sentence = sentence.lower()\n\n    words: list[str] = self.split_sentence(sentence) + ['']\n    lst_len: list[int] = list(map(len, words))  # cache the len() of each word\n    keyword = self.keyword\n    trie = self.trie_dict\n    node = trie\n\n    last_kw_found: str | None = None\n    last_kw_found_idx: tuple[int, int] | None = None\n    last_start_span: tuple[int, int] | None = None\n    n_words_covered = 0\n    idx = 0\n    while idx < len(words):\n        word = words[idx]\n\n        n_words_covered += 1\n        node = node.get(word)\n        if node:\n            kw = node.get(keyword)\n            if kw:\n                last_kw_found = kw\n                last_kw_found_idx = (idx, n_words_covered)\n        else:\n            if last_kw_found is not None:\n                kw_end_idx, kw_n_covered = last_kw_found_idx\n                start_span_idx = kw_end_idx - kw_n_covered + 1\n\n                if last_start_span is None:\n                    start_span = sum(lst_len[:start_span_idx])\n                else:\n                    start_span = last_start_span[1] + sum(lst_len[last_start_span[0]:start_span_idx])\n                last_start_span = start_span_idx, start_span  # cache the len() for the given slice for next time\n\n                yield last_kw_found, start_span, start_span + sum(\n                    lst_len[start_span_idx:start_span_idx + kw_n_covered])\n                last_kw_found = None\n                idx -= 1\n            else:\n                idx -= n_words_covered - 1\n            node = trie\n            n_words_covered = 0\n        idx += 1\n```\nMuch more readable, right?  \nAlso, other than rewriting all the functions with simpler, shorter, and more intuitive code,\nall the methods and functions are fully typed.\n\n## Performance\n\nSimplicity is great, but how is the performance?\n\nI created some benchmarks which you could find [here](https://github.com/shner-elmo/FlashText2.0/tree/master/benchmarks), \nand it turns out that both for extracting and replacing keywords it is faster than the original package:\n\nExtracting keywords:\n![Image](benchmarks/extract-keywords.png)\n\nReplacing keywords:\n![Image](benchmarks/replace-keywords.png)\n\n\n---\n## Quick Start\nImport and initialize the class:\n```py\n>>> from flashtext2 import KeywordProcessor\n>>> kp = KeywordProcessor()\n```\n\nAdd a bunch of words:\n```py\n>>> kp.add_keywords_from_dict({'py': 'Python', 'go': 'Golang', 'hello': 'hey'})\n```\nThe dictionary keys represent the words that we want to search in the string, \nand the values are their corresponding 'clean word'.\n\nCheck how many words we added:\n```py\n>>> len(kp)\n3\n```\n\nWe can see how the key/values are stored in the trie dict:\n```python\n>>> kp.trie_dict\n{'py': {'__keyword__': 'Python'},\n 'go': {'__keyword__': 'Golang'},\n 'hello': {'__keyword__': 'hey'}}\n```\n\nOne major change in FlashText 2.0 is that the keywords are splitted by words and non-words groups instead of characters.\nFor example, if you were to add the keyword/sentence `\"I love .NET\"` it would be stored like this:\n```py\nkp2 = KeywordProcessor()\nkp2.add_keyword(\"I love .NET\")  # not actually :)\n>>> kp2.trie_dict\n```\n```\n{'i': {' ': {'love': {' ': {'': {'.': {'net': {'__keyword__': 'I love .NET'}}}}}}}}\n```\n\n\n### Extracting Keywords\n\n```py\nfrom flashtext2 import KeywordProcessor\nkp = KeywordProcessor()\nkp.add_keywords_from_dict({'py': 'Python', 'go': 'Golang', 'hello': 'Hey'})\n\nmy_str = 'Hello, I love learning Py, aka: Python, and I plan to learn about Go as well.'\n\nkp.extract_keywords(my_str)\n```\n```\n['Hey', 'Python', 'Golang']\n```\n\n\n### Replace Keywords\n\n\n```py\nkp.replace_keywords(my_str)\n```\n```\n'Hey, I love learning Python, aka: Python, and I plan to learn about Golang as well.'\n```\n\n\n### Acknowledgements\nCredit goes to the original FlashText package author; [Vikash Singh](https://github.com/vi3k6i5/),\nand to [decorator-factory](https://github.com/decorator-factory) for optimizing the algorithm.\n\n\n#### What's next\n\n* Optimized the extract_keywords() algorithm\n* Experiment with Cython to speed up everything\n* Add a selection algorithms for extracting different things (words, substrings, sentences, etc.) \n* Improve tests\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flashtext2",
    "package_url": "https://pypi.org/project/flashtext2/",
    "platform": null,
    "project_url": "https://pypi.org/project/flashtext2/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/flashtext2/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A package for extracting keywords from large text very quickly (much faster than regex and the original flashtext package",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17053496,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20714bfb51f7ac1048ddd54580a1ba79c2a11ef37e4f13175805bcda2e3ca84d",
          "md5": "85f2544518650e3367d0848c7ebdefed",
          "sha256": "a0e7652e263cd29844007fa52587ea47a81787433ae0b32024bbc4564afa36ea"
        },
        "downloads": -1,
        "filename": "flashtext2-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85f2544518650e3367d0848c7ebdefed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4129,
        "upload_time": "2023-01-01T01:13:34",
        "upload_time_iso_8601": "2023-01-01T01:13:34.136880Z",
        "url": "https://files.pythonhosted.org/packages/20/71/4bfb51f7ac1048ddd54580a1ba79c2a11ef37e4f13175805bcda2e3ca84d/flashtext2-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5465cd12774a898db918d223f13dc8cc12888c677e847584552aeffde01fbd77",
          "md5": "a9aa2b3fb51bef72d3ddb3800d2948b8",
          "sha256": "73d985ac281fca7025f8ba62fef8c7a8974bd1c8fd4d95e6c3c0721f2b3a5a2c"
        },
        "downloads": -1,
        "filename": "flashtext2-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9aa2b3fb51bef72d3ddb3800d2948b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4029,
        "upload_time": "2023-01-01T01:13:35",
        "upload_time_iso_8601": "2023-01-01T01:13:35.910090Z",
        "url": "https://files.pythonhosted.org/packages/54/65/cd12774a898db918d223f13dc8cc12888c677e847584552aeffde01fbd77/flashtext2-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23ee66aa78de6efe2e73334858109878c0bc7d4e194d1ad19e1493e722388822",
          "md5": "fd79007d70dabab3682ae4e27212aadb",
          "sha256": "181775f9896aebd712afdfb3b57daabc448b540c67c06676ccbb3d2b6413b2bc"
        },
        "downloads": -1,
        "filename": "flashtext2-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd79007d70dabab3682ae4e27212aadb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10514,
        "upload_time": "2023-02-26T22:17:57",
        "upload_time_iso_8601": "2023-02-26T22:17:57.953355Z",
        "url": "https://files.pythonhosted.org/packages/23/ee/66aa78de6efe2e73334858109878c0bc7d4e194d1ad19e1493e722388822/flashtext2-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae202d95b2ffb455ed10ffdd34b785ba85ce4a23568fbb43b7f6f96279b83e74",
          "md5": "71291a54018af9f392dc1b20937fbc05",
          "sha256": "7167d34f93bdd8568fc76ad5c1924c49cc9953cf2c27865e437948ba72ffd269"
        },
        "downloads": -1,
        "filename": "flashtext2-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71291a54018af9f392dc1b20937fbc05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8844,
        "upload_time": "2023-02-26T22:18:00",
        "upload_time_iso_8601": "2023-02-26T22:18:00.402372Z",
        "url": "https://files.pythonhosted.org/packages/ae/20/2d95b2ffb455ed10ffdd34b785ba85ce4a23568fbb43b7f6f96279b83e74/flashtext2-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23ee66aa78de6efe2e73334858109878c0bc7d4e194d1ad19e1493e722388822",
        "md5": "fd79007d70dabab3682ae4e27212aadb",
        "sha256": "181775f9896aebd712afdfb3b57daabc448b540c67c06676ccbb3d2b6413b2bc"
      },
      "downloads": -1,
      "filename": "flashtext2-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd79007d70dabab3682ae4e27212aadb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10514,
      "upload_time": "2023-02-26T22:17:57",
      "upload_time_iso_8601": "2023-02-26T22:17:57.953355Z",
      "url": "https://files.pythonhosted.org/packages/23/ee/66aa78de6efe2e73334858109878c0bc7d4e194d1ad19e1493e722388822/flashtext2-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae202d95b2ffb455ed10ffdd34b785ba85ce4a23568fbb43b7f6f96279b83e74",
        "md5": "71291a54018af9f392dc1b20937fbc05",
        "sha256": "7167d34f93bdd8568fc76ad5c1924c49cc9953cf2c27865e437948ba72ffd269"
      },
      "downloads": -1,
      "filename": "flashtext2-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "71291a54018af9f392dc1b20937fbc05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8844,
      "upload_time": "2023-02-26T22:18:00",
      "upload_time_iso_8601": "2023-02-26T22:18:00.402372Z",
      "url": "https://files.pythonhosted.org/packages/ae/20/2d95b2ffb455ed10ffdd34b785ba85ce4a23568fbb43b7f6f96279b83e74/flashtext2-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}