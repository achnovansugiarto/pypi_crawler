{
  "info": {
    "author": "Nicola Elia",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": "[![Upload Python Package](https://github.com/n-elia/MAX30102-MicroPython-driver/actions/workflows/python-publish.yml/badge.svg)](https://github.com/n-elia/MAX30102-MicroPython-driver/actions/workflows/python-publish.yml)\n[![PyPI version](https://badge.fury.io/py/micropython-max30102.svg)](https://badge.fury.io/py/micropython-max30102)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/micropython-max30102?color=blue&label=upip%20installations)\n\n# Maxim MAX30102 MicroPython driver\n\nA port of the SparkFun driver for Maxim MAX30102 sensor to MicroPython.\n\nIt _should_ work for MAX30105, too. If you have the chance to test this library with a MAX30105, please leave your\nfeedback in the Discussions section.\n\n## Table of contents\n\n* [Disclaimer](#disclaimer)\n* [Usage](#usage)\n    + [1 - Including this library into your project](#1---including-this-library-into-your-project)\n        - [1a - **network-enabled MicroPython ports**](#1a---network-enabled-micropython-ports)\n        - [1b - **manual way** (no Internet access required)](#1b---manual-way-no-internet-access-required)\n    + [2 - I2C setup and sensor configuration](#2---i2c-setup-and-sensor-configuration)\n        - [I2C connection](#i2c-connection)\n        - [Sensor setup](#sensor-setup)\n    + [3 - Data acquisition](#3---data-acquisition)\n        - [Read data from sensor](#read-data-from-sensor)\n        - [Notes on data acquisition rate](#notes-on-data-acquisition-rate)\n        - [Die temperature reading](#die-temperature-reading)\n* [Changelog](#changelog)\n* [Acknowledgements](#acknowledgements)\n* [Tested platforms and known issues](#tested-platforms-and-known-issues)\n* [Other useful things](#other-useful-things)\n    + [Realtime plot over Serial](#realtime-plot-over-serial)\n    + [Sensor clones](#sensor-clones)\n    + [Heartrate and SPO2 estimation](#heartrate-and-spo2-estimation)\n\n## Disclaimer\n\nThis work is not intended to be used in professional environments, and there are no guarantees on its functionalities.\nPlease do not rely on it for medical purposes or professional usage.\n\n## Usage\n\nDriver usage is quite straightforward. You just need to import the library, and to set up a `SoftI2C` instance.\n\nA full example is provided in `/example` directory.\n\n### 1 - Including this library into your project\n\n#### 1a - **network-enabled MicroPython ports**\n\n> Warning: in latest MicroPython releases `upip` has been deprecated in favor of [`mip`](https://docs.micropython.org/en/latest/reference/packages.html#package-management). This module is compatible with both of them. Please use the package manager included into your MicroPython version.\n\nIf your MicroPython version supports `mip` package manager, put these lines **after** the setup of an Internet connection:\n\n```python\nimport mip\n\nmip.install(\"github:n-elia/MAX30102-MicroPython-driver\")\n```\n\nIf your MicroPython version supports `upip` package manager, put these lines **after** the setup of an Internet connection:\n\n```python\nimport upip\n\nupip.install(\"micropython-max30102\")\n```\n\nTo run the example in `./example` folder, please set your WiFi credentials in `boot.py` and then upload `./example`\ncontent into your microcontroller. If you prefer, you can perform a manual install as explained below.\n\n#### 1b - **manual way** (no Internet access required)\n\nTo directly include the library into a MicroPython project, it's sufficient to copy `max30102/circular_buffer.py`\nand `max30102/__init__.py` next to your `main.py` file, into a `lib` directory.\n\nThe folder tree should look as follows:\n\n```text\n.\nâ”£ ðŸ“œ boot.py\nâ”£ ðŸ“œ main.py\nâ”— ðŸ“‚ lib\n  â”£ ðŸ“œ __init__.py\n  â”— ðŸ“œ circular_buffer.py\n```\n\nThen, import the constructor as follows:\n\n```python\nfrom max30102 import MAX30102\n```\n\nTo run the example in `./example` folder, copy `max30102/circular_buffer.py` and `max30102/__init__.py` into\nthe `./example/lib` directory. Then, upload the `./example` directory content into your microcontroller. After the\nupload, press the reset button of your board are you're good to go.\n\n### 2 - I2C setup and sensor configuration\n\n#### I2C connection\n\nCreate a `SoftI2C` instance as in the following example:\n\n```python\nfrom machine import SoftI2C, Pin\n\nmy_SDA_pin = 21  # I2C SDA pin number here!\nmy_SCL_pin = 22  # I2C SCL pin number here!\nmy_i2c_freq = 400000  # I2C frequency (Hz) here!\n\ni2c = SoftI2C(sda=Pin(my_SDA_pin),\n              scl=Pin(my_SCL_pin),\n              freq=my_i2c_freq)\n\nsensor = MAX30102(i2c=i2c)\n```\n\nThe I2C pin numbers depend on the board that you are using, and how you wired the sensor to it.\n\n#### Sensor setup\n\nThe library provides a method to setup the sensor at once. Leaving the arguments empty, makes the library load the\ndefault values.\n\n> **Default configuration values:**\n>\n> _Led mode_: 2 (RED + IR)  \n> _ADC range_: 16384  \n> _Sample rate_: 400 Hz  \n> _Led power_: maximum (50.0mA - Presence detection of ~12 inch)  \n> _Averaged samples_: 8  \n> _Pulse width_: 411\n\n```python\n# Setup with default values\nsensor.setup_sensor()\n\n# Alternative example:\nsetup_sensor(self, led_mode=2, adc_range=16384, sample_rate=400)\n```\n\nThe library provides the methods to change the configuration parameters one by one, too. Remember that\nthe `setup_sensor()` method has still to be called before modifying the single parameters.\n\n```python\n# Set the number of samples to be averaged by the chip\nSAMPLE_AVG = 8  # Options: 1, 2, 4, 8, 16, 32\nsensor.set_fifo_average(SAMPLE_AVG)\n\n# Set the ADC range\nADC_RANGE = 4096  # Options: 2048, 4096, 8192, 16384\nsensor.set_adc_range(ADC_RANGE)\n\n# Set the sample rate\nSAMPLE_RATE = 400  # Options: 50, 100, 200, 400, 800, 1000, 1600, 3200\nsensor.set_sample_rate(SAMPLE_RATE)\n\n# Set the Pulse Width\nPULSE_WIDTH = 118  # Options: 69, 118, 215, 411\nsensor.set_pulse_width(PULSE_WIDTH)\n\n# Set the LED mode\nLED_MODE = 2  # Options: 1 (red), 2 (red + IR), 3 (red + IR + g - MAX30105 only)\nsensor.set_led_mode(LED_MODE)\n\n# Set the LED brightness of each LED\nLED_POWER = MAX30105_PULSEAMP_MEDIUM\n# Options:\n# MAX30105_PULSE_AMP_LOWEST =  0x02 # 0.4mA  - Presence detection of ~4 inch\n# MAX30105_PULSE_AMP_LOW =     0x1F # 6.4mA  - Presence detection of ~8 inch\n# MAX30105_PULSE_AMP_MEDIUM =  0x7F # 25.4mA - Presence detection of ~8 inch\n# MAX30105_PULSE_AMP_HIGH =    0xFF # 50.0mA - Presence detection of ~12 inch\nsensor.set_pulse_amplitude_red(LED_POWER)\nsensor.set_pulse_amplitude_it(LED_POWER)\nsensor.set_pulse_amplitude_green(LED_POWER)\n\n# Set the LED brightness of all the active LEDs\nLED_POWER = MAX30105_PULSEAMP_MEDIUM\n# Options:\n# MAX30105_PULSE_AMP_LOWEST =  0x02 # 0.4mA  - Presence detection of ~4 inch\n# MAX30105_PULSE_AMP_LOW =     0x1F # 6.4mA  - Presence detection of ~8 inch\n# MAX30105_PULSE_AMP_MEDIUM =  0x7F # 25.4mA - Presence detection of ~8 inch\n# MAX30105_PULSE_AMP_HIGH =    0xFF # 50.0mA - Presence detection of ~12 inch\nsensor.set_active_leds_amplitude(LED_POWER)\n```\n\n### 3 - Data acquisition\n\nThe sensor will store all the readings into a FIFO register (FIFO_DATA). Based on the number of active LEDs and other\nconfiguration parameters, the sensor instance will read data from that register, putting it into the_storage_.\nThe_storage_ is a circular buffer, that can be read using the provided methods.\n\nThe `check()` method polls the sensor to check if new samples are available in the FIFO queue. If data is available, it\nwill be read and put into the _storage_. We can access those samples using the provided methods such\nas `popRedFromStorage()`.\n\n#### Read data from sensor\n\nAs a consequence, this is an example on how the library can be used to read data from the sensor:\n\n```python\nwhile (True):\n    # The check() method has to be continuously polled, to check if\n    # there are new readings into the sensor's FIFO queue. When new\n    # readings are available, this function will put them into the storage.\n    sensor.check()\n\n    # Check if the storage contains available samples\n    if (sensor.available()):\n        # Access the storage FIFO and gather the readings (integers)\n        red_sample = sensor.pop_red_from_storage()\n        ir_sample = sensor.pop_ir_from_storage()\n\n        # Print the acquired data (can be plot with Arduino Serial Plotter)\n        print(red_sample, \",\", ir_sample)\n```\n\n#### Notes on data acquisition rate\n\nConsidering the sensor configuration, two main parameters will affect the data throughput of the sensor itself:\n\n- The *sample rate*, which is the number of RAW readings per second made by the sensor\n\n- The *averaged samples*, which is the number of RAW readings averaged together for composing a single sample\n\nTherefore, the FIFO_DATA register will contain averaged RAW readings. The rate at which that register is fed depends on\nthe two parameters: *real rate = sample rate / averaged samples*.\n\nThe library computes this value, that can be accessed with:\n\n```python\n# Get the estimated acquisition rate\nacquisition_rate = sensor.get_acquisition_frequency()\n```\n\nHowever, there are some limitations on sensor side and on micropocessor side that may affect the acquisition rate (see\nissue #6 for more details about it). Is is possible to measure the real throughput as\nin [this](https://github.com/sparkfun/SparkFun_MAX3010x_Sensor_Library/blob/72d5308df500ae1a64cc9d63e950c68c96dc78d5/examples/Example9_RateTesting/Example9_RateTesting.ino)\nexample sketch by SparkFun, using the following snippet:\n\n```python\n# (Assuming that the sensor instance has been already set-up)\nfrom utime import ticks_diff, ticks_ms\n\nt_start = ticks_us()  # Starting time of the acquisition\nsamples_n = 0  # Number of samples that have been collected\n\nwhile True:\n    sensor.check()\n    if sensor.available():\n        red_reading = sensor.pop_red_from_storage()\n        ir_reading = sensor.pop_ir_from_storage()\n\n        # Print the acquired data (so that it can be plotted with a Serial Plotter)\n        print(red_reading, \",\", ir_reading)\n\n        # Compute the real frequency at which we receive data (with microsecond precision)\n        if compute_frequency:\n            if ticks_diff(ticks_us(), t_start) >= 999999:\n                f_HZ = samples_n\n                samples_n = 0\n                print(\"acquisition frequency = \", f_HZ)\n                t_start = ticks_us()\n            else:\n                samples_n = samples_n + 1\n```\n\n#### Die temperature reading\n\nThe `read_temperature()` method allows to read the internal die temperature. An example is proposed below.\n\n```python\n# Read the die temperature in Celsius degree\ntemperature_C = sensor.read_temperature()\nprint(\"Die temperature: \", temperature_C, \"Â°C\")\n```\n\nNote: as stated in the [datasheet](https://datasheets.maximintegrated.com/en/ds/MAX30102.pdf), the internal die\ntemperature sensor is intended for calibrating the temperature dependence of the SpO2 subsystem. It has an inherent\nresolution of 0.0625Â°C, but be aware that the accuracy is Â±1Â°C.\n\n## Changelog\n\n- v0.4.1\n  - Changed the module files organization.\n  - Added support to `mip` package manager.\n- v0.4.0\n    - According to some best practices discussed [here](https://forum.micropython.org/viewtopic.php?f=2&t=12508), some\n      changes have been made.\n        - Removed the I2C scan at instantiation time, so that the sensor object could be instantiated even if the sensor\n          is not available at the moment.\n        - Removed the part ID checks at instantiation time, so that the user may skip them saving time.\n    - The example has been updated.\n- v0.3.6\n    - The library now performs a I2C scan to check if the sensor is connected. This prevents unexpected I2C errors with\n      some boards (such as Raspberry Pi Pico).\n- v0.3.5\n    - A `SoftI2C` instance is now required by the constructor.\n    - The constructor now raises `RuntimeError` when the sensor is not found on I2C bus.\n    - The example has been updated to intercept the errors thrown by the constructor.\n    - The example has been updated to estimate real acquisition frequency with a precision of 1 microsecond.\n    - The readme has been re-organized to improve readability.\n- v0.3.4\n    - The package has been refactored to be compliant to PEP standards.\n- v0.3.3\n    - Made a PyPi package. Now you can install this package with upip.\n    - Tested with Raspberry Pi Pico and non-genuine sensors.\n- v0.3\n    - Tested with TinyPico board (based on ESP32-D4) and genuine Maxim MAX30102 sensor.\n\n## Acknowledgements\n\nThis work is a lot based on:\n\n- [SparkFun MAX3010x Sensor Library](https://github.com/sparkfun/SparkFun_MAX3010x_Sensor_Library \"GitHub | SparkFun MAX3010x Sensor Library\")\n\n  Written by **Peter Jansen** and **Nathan Seidle** (SparkFun)\n  This is a library written for the Maxim MAX30105 Optical Smoke Detector\n  It should also work with the MAX30102. However, the MAX30102 does not have a Green LED.\n  These sensors use I2C to communicate, as well as a single (optional)\n  interrupt line that is not currently supported in this driver.\n  Written by Peter Jansen and Nathan Seidle (SparkFun)\n  BSD license, all text above must be included in any redistribution.\n\n- [esp32-micropython](https://github.com/kandizzy/esp32-micropython/blob/master/PPG/ppg/MAX30105.py \"GitHub | esp32-micropython\")\n\n  A port of the library to MicroPython by **kandizzy**\n\n## Tested platforms and known issues\n\nThe library has been tested on _TinyPico_ (board based on _ESP32-D4_) running 'tinypico-20210418-v1.15.bin' MicroPython\nfirmware, connected to a genuine Maxim 30102 breakout\nboard ([MAXREFDES117#](https://www.maximintegrated.com/en/design/reference-design-center/system-board/6300.html)).\n\nTested ([thanks to ebolisa](https://github.com/n-elia/MAX30102-MicroPython-driver/issues/4)) and working on _Raspberry Pi\nPico_ + non-Maxim breakout board.\n\nTested and working on _ESP32-S3_ (_Unexpected Maker TinyS3_) + non-Maxim breakout board.\n\n**I2C read issue**: as discussed in the [MicroPython forum](https://forum.micropython.org/viewtopic.php?f=2&t=12508) and\nin the\n[GitHub Discussions section](https://github.com/n-elia/MAX30102-MicroPython-driver/discussions/5#discussioncomment-2899588),\nsome board/sensor combinations lead to an issue that makes the first I2C read fail. This issue can be mitigated by\nrunning an I2C scan before actually using the sensor, as shown in the provided example.\n\n## Other useful things\n\n### Realtime plot over Serial\n\nThe example proposed in this repository ([main.py](./example/main.py)) contains a print statement in a CSV-like\nformat: `print(red_reading, \",\", IR_reading)`. If you open Arduino IDE and connect your board, then you will be able to\nopen the *serial plotter* (Ctrl+Maiusc+L) and see a real-time plot of your readings (need some help? take a\nlook [here](https://learn.sparkfun.com/tutorials/max30105-particle-and-pulse-ox-sensor-hookup-guide/all)).\n\nFor instance, this is an example of my heartbeat taken on the index finger:\n\n![Serial Plotter picture](./img/arduino-IDE-serial-plotter-heartbeat.png \"Serial Plotter picture\")\n\n### Sensor clones\n\nThere is an issue involving chinese clones of the Maxim MAX30102: some of them appear to have the red and IR registers\ninverted (or maybe the LEDs swapped) (see [here](https://github.com/aromring/MAX30102_by_RF/issues/13)). You can easily\ncheck if your sensor is inverted by putting it in LED mode 1: only the red LED should work. If you see the IR LED (use\nyour phone camera to check), then you have to collect IR samples as red ones and viceversa.\n\n### Heartrate and SPO2 estimation\n\nIf you're looking for algorithms for extracting heartrate and SPO2 from your RAW data, take a\nlook [here](https://github.com/aromring/MAX30102_by_RF)\nand [here](https://github.com/kandizzy/esp32-micropython/tree/master/PPG)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/n-elia/MAX30102-MicroPython-driver",
    "keywords": "micropython,max30102,max30105,esp32",
    "license": "MIT",
    "maintainer": "Nicola Elia",
    "maintainer_email": "",
    "name": "micropython-max30102",
    "package_url": "https://pypi.org/project/micropython-max30102/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-max30102/",
    "project_urls": {
      "Homepage": "https://github.com/n-elia/MAX30102-MicroPython-driver"
    },
    "release_url": "https://pypi.org/project/micropython-max30102/0.4.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MAX30102 driver for micropython.",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15981798,
  "releases": {
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c02277a71952e1da3c81938b6f97432124ba19108e2da3f6d94dda9866ecee88",
          "md5": "0fd2dbcf3223fc647d537192510bd6a8",
          "sha256": "25a7e9911adf6a2bdd6ad564f09dac6c32eebb3e8b7616faaa087e381d7dbac7"
        },
        "downloads": -1,
        "filename": "micropython-max30102-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0fd2dbcf3223fc647d537192510bd6a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12925,
        "upload_time": "2022-03-15T19:22:28",
        "upload_time_iso_8601": "2022-03-15T19:22:28.027609Z",
        "url": "https://files.pythonhosted.org/packages/c0/22/77a71952e1da3c81938b6f97432124ba19108e2da3f6d94dda9866ecee88/micropython-max30102-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8acbd51246ca6bd3304786ebddc4a43601890096f5f443ad5272bf3a3a07dc60",
          "md5": "6cbbb7863f7086587493dd2633bcae31",
          "sha256": "c20018b3a28470e6daa625fb39669ab36cf02a57172991cf9a4f9c075e822584"
        },
        "downloads": -1,
        "filename": "micropython-max30102-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6cbbb7863f7086587493dd2633bcae31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13167,
        "upload_time": "2022-03-16T23:24:10",
        "upload_time_iso_8601": "2022-03-16T23:24:10.179670Z",
        "url": "https://files.pythonhosted.org/packages/8a/cb/d51246ca6bd3304786ebddc4a43601890096f5f443ad5272bf3a3a07dc60/micropython-max30102-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54ea6679ce54d57b148ecdd4d05acd2abe912e4078d6217f221d8132dc541607",
          "md5": "60d57cfad7894d0af54a50ff0b086cc4",
          "sha256": "596ca4f18e953b22c813629013e2756dd3e9c779b6a195ad03567c4cbbaef9f4"
        },
        "downloads": -1,
        "filename": "micropython-max30102-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "60d57cfad7894d0af54a50ff0b086cc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13351,
        "upload_time": "2022-05-24T13:11:17",
        "upload_time_iso_8601": "2022-05-24T13:11:17.503632Z",
        "url": "https://files.pythonhosted.org/packages/54/ea/6679ce54d57b148ecdd4d05acd2abe912e4078d6217f221d8132dc541607/micropython-max30102-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfb472533b98f51abbf7ec94be791a85a199bb090607c403e533ba2623510918",
          "md5": "4efb98c1fbd46eec3adb73fb94e9e00d",
          "sha256": "449a55e5e6e2e73a5618513e85a1829d661ec54d5c04b006d09dce9294b671bb"
        },
        "downloads": -1,
        "filename": "micropython-max30102-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4efb98c1fbd46eec3adb73fb94e9e00d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13530,
        "upload_time": "2022-06-13T15:07:42",
        "upload_time_iso_8601": "2022-06-13T15:07:42.548279Z",
        "url": "https://files.pythonhosted.org/packages/df/b4/72533b98f51abbf7ec94be791a85a199bb090607c403e533ba2623510918/micropython-max30102-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d96ab2cc7739fb240440d8f5ac5b269978a4f7dcc4b4ed84e1064a9c07446d57",
          "md5": "395bab2d537a2ad3bda532c6dbff5248",
          "sha256": "526d6571930bce3c3ba1c821f46ab140e46c3089b322d3ff72eca088a9701267"
        },
        "downloads": -1,
        "filename": "micropython-max30102-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "395bab2d537a2ad3bda532c6dbff5248",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14178,
        "upload_time": "2022-07-04T09:32:50",
        "upload_time_iso_8601": "2022-07-04T09:32:50.579754Z",
        "url": "https://files.pythonhosted.org/packages/d9/6a/b2cc7739fb240440d8f5ac5b269978a4f7dcc4b4ed84e1064a9c07446d57/micropython-max30102-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce33f2e0f8423af253450fb20d28714f475fc77800f1bf91418d7401c85ac45b",
          "md5": "fac40b778432dffef62bdc45b3c1574d",
          "sha256": "2d1473d3bfa871f5db715988c3902bf85ec8c316e5598890ee67ee4f7d444f96"
        },
        "downloads": -1,
        "filename": "micropython-max30102-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fac40b778432dffef62bdc45b3c1574d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14328,
        "upload_time": "2022-12-03T23:29:47",
        "upload_time_iso_8601": "2022-12-03T23:29:47.811992Z",
        "url": "https://files.pythonhosted.org/packages/ce/33/f2e0f8423af253450fb20d28714f475fc77800f1bf91418d7401c85ac45b/micropython-max30102-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce33f2e0f8423af253450fb20d28714f475fc77800f1bf91418d7401c85ac45b",
        "md5": "fac40b778432dffef62bdc45b3c1574d",
        "sha256": "2d1473d3bfa871f5db715988c3902bf85ec8c316e5598890ee67ee4f7d444f96"
      },
      "downloads": -1,
      "filename": "micropython-max30102-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fac40b778432dffef62bdc45b3c1574d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14328,
      "upload_time": "2022-12-03T23:29:47",
      "upload_time_iso_8601": "2022-12-03T23:29:47.811992Z",
      "url": "https://files.pythonhosted.org/packages/ce/33/f2e0f8423af253450fb20d28714f475fc77800f1bf91418d7401c85ac45b/micropython-max30102-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}