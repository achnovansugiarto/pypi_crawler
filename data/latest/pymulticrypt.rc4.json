{
  "info": {
    "author": "Abhay Tripathi",
    "author_email": "abhay.triipathi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# PyMulticrypt\n\nPython Module for secure End-2-End encryption using the Multicrypt algorithm made by me.\n\n## Concept behind MultiCrypt Algrorithm\n\nSo, take a number, say 77 as your message.\nThen, take another number, say 739 as your key (In actual, this number will be of 256 bits).\nNow, to get your encrypted message, just add your key to the actual message\ni.e. 77 + 739 in this case = 816. So your encrypted message is now 816.\n\nNow, encrypt your key i.e. 739 in this case using RSA Encryption (Asymmetric Encryption)\ni.e. encrypt your key with the public key of the recipient, then append the encrypted key\nat the end of your encrypted message with any seperator charecter between the encrypted message \nand the encrypted key.\n\nNow this message is your final encrypyed message which can be transmitted safely to the\nrecipient.\n\nNow when the recipient receives your encrypted message, then for decrypting that message first the\nrecipient will seperate the actual encrypted message and the encrypted key from the seperator charecter\nwhich you used between the actual encrypted message and encrypted key at the time of encrypting the message\n(In actual, the seperator charecter is fixed for everyone and is equal to \"K\"). Then the recipient will\ndecrypt the encrypted key using his/her private key which is mathematically linked to his/her public key.\n\nThen the recipient gets the actual key i.e. 739 in this case. Then all he/she has to do is minus the actual key\nfrom the actual encrypted message to get the actual message i.e. 816 - 739 in this case = 77 which is the actual message\nwhich you wanted to send to the recipient.\n\nThis is highly secure as the encrypted message is safe from brute force attack. Also, no one can reverse engineer the\nencryption algorithm to decrypt the message as the key required to do so is encrypted asymmetrically\n(i.e. using RSA encryption algorithm) and everyone knows that RSA Encryption cannot be broken due to its public-private\nkey pair system.\n\nHence, MultiCrypt encrypiton is a hybrid encryption algorithm (i.e. involves both symmetric encryption algorithm (key encryption)\nand asymmetric encryption (RSA encryption)) which is ideal for transmitting any kind of data securely using any kind of network protocol.\n\n**Please do note that I am using a cutom RSA Encryption algorithm made by me for suiting the symmetric part of the MultiCrypt algorithm.\nHence, public and private keys of standard RSA Encryption System WILL NOT WORK in MultiCrypt Encryption System and vice versa.**\n\n## Installation\n\nSimply using PyPi: \n\n```\npip install pymulticrypt\n```\n## Usage\n\n```python\nfrom pymulticrypt import End2End\n\ne2e = End2End(Parameters)\n```\n\n### Parameters\n\n- **public_key (Optional):** Public Key to be used if you want to use existing key (Default: \"\").\n- **private_key (Optional):** Private Key to be used if you want to use existing key (Default: \"\").\n- **save (Optional):** Should be True/False. Specifies whether the keys have to be stored in a file or not (Default: True).\n- **key_path (Optional):** Specifies the path and name of the file where the keys have to be stored, if save = True (Default: Same as your python file).\n- **new (Optional):** Should be True/False. Specifies whether it should ignore any existing key pairs and generate new key pair or not (Default: False).\n\n## Methods\n\n### keys()\n\n```python\nkeys = e2e.keys()\n```\n\nReturns Private Key and Public Key in the form of dictionary of the format {\"public\": %YOUR_PUBLIC_KEY%, \"private\": %YOUR_PRIVATE_KEY%}.\n\n### encrypt()\n\n```python\nencrypted_message = e2e.encrypt(message, public_key)\n```\n\nEncrypts the message using MULTICRYPT algorithm.\n\n**Parameters**\n\n- **message (Required):** Message to encrypt.\n- **public_key (Required):** Public Key of the recipient of the message (for the asymmetric encryption part).\n\n\n### decrypt()\n\n```python\nactual_message = e2e.decrypt(message, private_key)\n```\n\nDecrypts the encrypted message using MULTICRYPT algorithm.\n\n**Parameters**\n\n- **message (Required):** Encrypted Message to decryt.\n- **private_key (Optional):** Your Private Key required to decrypt any message which is encrypted with Public Key\n                        linked to that private key (Default: Key which was either passed in the End2End()\n                        constrctor or generated by the program for you).\n\nUseful for transmitting data securely between 2 devices on a network.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/AbhayTr/PyMulticrypt/archive/v1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AbhayTr/PyMulticrypt",
    "keywords": "PyMulticrypt,Encryption,Asymmetric Encryption,Symmetric Encryption,End2End Encryption,End2End,Signal Protocol",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymulticrypt",
    "package_url": "https://pypi.org/project/pymulticrypt/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymulticrypt/",
    "project_urls": {
      "Download": "https://github.com/AbhayTr/PyMulticrypt/archive/v1.2.tar.gz",
      "Homepage": "https://github.com/AbhayTr/PyMulticrypt"
    },
    "release_url": "https://pypi.org/project/pymulticrypt/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Module for secure End-2-End encryption using the Multicrypt algorithm made by me",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8687634,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffd4d53f865800d46847a92da7c0e3390f2787f90b151f6135620d468a1adf3c",
          "md5": "0fe048af16b9bfc67e7735417eaa825b",
          "sha256": "e68503222b7b8677673a6ec812b813ba25947ba3438e1527cfffa96fffc8e44e"
        },
        "downloads": -1,
        "filename": "pymulticrypt-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0fe048af16b9bfc67e7735417eaa825b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1383,
        "upload_time": "2020-11-12T08:20:58",
        "upload_time_iso_8601": "2020-11-12T08:20:58.176492Z",
        "url": "https://files.pythonhosted.org/packages/ff/d4/d53f865800d46847a92da7c0e3390f2787f90b151f6135620d468a1adf3c/pymulticrypt-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34c6c26aa9c5779ea74413d2e0d36b2916bbb31b82619338e52910400a3f83ac",
          "md5": "6bc74a66286e6f34863d829ccb3dba7a",
          "sha256": "5bbdf9007cd5a7b141e8b429f2ac59aa1404991253141f495a458a6411baad10"
        },
        "downloads": -1,
        "filename": "pymulticrypt-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6bc74a66286e6f34863d829ccb3dba7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5093,
        "upload_time": "2020-11-18T07:24:12",
        "upload_time_iso_8601": "2020-11-18T07:24:12.977320Z",
        "url": "https://files.pythonhosted.org/packages/34/c6/c26aa9c5779ea74413d2e0d36b2916bbb31b82619338e52910400a3f83ac/pymulticrypt-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47966ae2cf5db1014f8a2de75185c9c7911d9b369c55164ad484dd13b76937ac",
          "md5": "dbd754987f4b68c4a5e4f978b02f18e8",
          "sha256": "f09462a8e92569b5909e7244bb8e6e951cbc052aa18ae4a64a5f7ee0cce21a07"
        },
        "downloads": -1,
        "filename": "pymulticrypt-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dbd754987f4b68c4a5e4f978b02f18e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5083,
        "upload_time": "2020-11-18T07:36:23",
        "upload_time_iso_8601": "2020-11-18T07:36:23.997412Z",
        "url": "https://files.pythonhosted.org/packages/47/96/6ae2cf5db1014f8a2de75185c9c7911d9b369c55164ad484dd13b76937ac/pymulticrypt-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae7225eacfbcffe9f39c4a024fcbc09d8e1b20fd74b11d619b19bb6151898fab",
          "md5": "4306bb50ef4b5eca76875eb6f18bb12c",
          "sha256": "53d17de374bc2158f537a9c8a47d767251139cc033855a34a2922d3e5c5007ba"
        },
        "downloads": -1,
        "filename": "pymulticrypt-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4306bb50ef4b5eca76875eb6f18bb12c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6117,
        "upload_time": "2020-11-18T08:24:23",
        "upload_time_iso_8601": "2020-11-18T08:24:23.412571Z",
        "url": "https://files.pythonhosted.org/packages/ae/72/25eacfbcffe9f39c4a024fcbc09d8e1b20fd74b11d619b19bb6151898fab/pymulticrypt-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae7225eacfbcffe9f39c4a024fcbc09d8e1b20fd74b11d619b19bb6151898fab",
        "md5": "4306bb50ef4b5eca76875eb6f18bb12c",
        "sha256": "53d17de374bc2158f537a9c8a47d767251139cc033855a34a2922d3e5c5007ba"
      },
      "downloads": -1,
      "filename": "pymulticrypt-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4306bb50ef4b5eca76875eb6f18bb12c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6117,
      "upload_time": "2020-11-18T08:24:23",
      "upload_time_iso_8601": "2020-11-18T08:24:23.412571Z",
      "url": "https://files.pythonhosted.org/packages/ae/72/25eacfbcffe9f39c4a024fcbc09d8e1b20fd74b11d619b19bb6151898fab/pymulticrypt-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}