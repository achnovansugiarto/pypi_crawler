{
  "info": {
    "author": "Tobias Neitzel (@qtc_de)",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "### ctfcred\n\n----\n\nDuring *CTFs* it is common to obtain several different usernames and passwords.\nJust storing these inside of text files becomes confusing very quickly and accessing\nthem in this way is not really fast. *ctfcred* is designed to allow fast, organized and\nsimple access to *CTF* credentials. Credentials are stored as plaintext in a ``.yml``\nfile and are accesses via *rofi*.\n\n![](https://github.com/qtc-de/ctfcred/workflows/main%20Python%20CI/badge.svg?branch=main)\n![](https://github.com/qtc-de/ctfcred/workflows/develop%20Python%20CI/badge.svg?branch=develop)\n![example](https://tneitzel.eu/73201a92878c0aba7c3419b7403ab604/ctfcred-plain.png)\n\n**Do not use this tool to store real sensitive data!**\n\n\n### Table of Contents\n\n----\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Updating and Cloning Credentials](#updating-and-cloning-credentials)\n- [Import and Export](#import-and-export)\n- [Default Values](#default-values)\n- [Warning](#warning)\n\n\n### Installation\n\n----\n\n*ctfcred* can be build and installed as a *pip package*. The following command installs *ctfcred*\nfor your current user profile:\n\n```console\n$ git clone https://github.com/qtc-de/ctfcred\n$ cd ctfcred\n$ python3 setup.py sdist\n$ pip3 install dist/*\n```\n\n*ctfcred* also supports autocompletion for *bash*. To take advantage of autocompletion, you need to have the\n[completion-helpers](https://github.com/qtc-de/completion-helpers) project installed. If setup correctly, just\ncopying the [completion script](./resources/bash_completion.d/ctfcred) to your ``~/.bash_completion.d`` folder enables\nautocompletion.\n\n```console\n$ cp resources/bash_completion.d/ctfcred ~/bash_completion.d/\n```\n\nFurthermore, there are some external dependencies:\n\n* **rofi** (required): a working installation of *rofi* is required, as *rofi* is used to display and access the stored\n  credentials.\n\n* **libnotify** and a **notification server** (optional): These are shipped per default on most\n  distributions. Just type ``$ notify-send test`` to check if they are available.\n  If not, read about [desktop notifications](https://wiki.archlinux.org/index.php/Desktop_notifications)\n  and decide if you want to install them. *ctfcred* uses the notification server to display messages,\n  which values were copied to the clipboard. It is nice to have, but not required.\n\n\n### Usage\n\n----\n\nThe first thing you probably want to do with *ctfcred* is to add some credentials. Credentials can be added\nby using the following argument format:\n\n```console\n[qtc@kali ~]$ ctfcred <USERNAME> <PASSWORD> <NOTE>\n```\n\nEach of this values is optional. You do not have to specify a *password* or a *note* and you can use empty strings\nfor *username* or *password* to get to the next argument. Let's add some credentials:\n\n```console\n[qtc@kali ~]$ ctfcred timmy password123 'Found on SMB share 10.10.10.3'\n[qtc@kali ~]$ ctfcred carol carolsSecurePassword 'Carols AD Credentials' --domain example.com --url '\\\\10.10.10.2'\n[qtc@kali ~]$ ctfcred peter pet3rRul35 'Peters GitLab password' --url 'https://gitlab.example.com' --otp e1euj1ÃŸdhsdhdasd1\n[qtc@kali ~]$ ctfcred peterTheInsaneFighter securePassword 'Peters Gaming password' --url 'https://games.example.com' --alias peter_gaming\n```\n\nAfter running the above commands, a plain run of *ctfcred* (without any arguments) starts *rofi* and displays the following\nview:\n\n![Rofi View](https://tneitzel.eu/73201a92878c0aba7c3419b7403ab604/ctfcred.png)\n\nWithin *rofi*, *ctfcred* defines several keybindings for performing actions with the stored credentials.\n\n* ``Ctrl+C``:    Copy Username\n* ``Ctrl+c``:    Copy Password\n* ``Ctrl+o``:    Copy OTP Value\n* ``Ctrl+l``:    Copy URL Value\n* ``Ctrl+D``:    Copy Domain\n* ``Ctrl+F``:    Copy User with Domain\n* ``Ctrl+X``:    Delete Credential\n* ``Ctrl+K``:    Move Credential one Up\n* ``Ctrl+J``:    Move Credential one Down\n\n\n### Updating and Cloning Credentials\n\n----\n\nCredentials can be updated or cloned by using the ``--update`` or ``--clone`` command line switches. Both of these\noperations expect you to enter some credential data as in the case of creating a new credential. However, instead of using\nthe data to add a new credential, *ctfcred* will display all available credentials in *rofi* and wait for you to select one.\n\nIn the case of ``--update``, the corresponding credential is updated with the data you have entered. In the case of ``--clone``\nthe credential is cloned and updated with the new data afterwards. Cloning a credential without updating one of it's properties\nis not possible, as only unique credentials are allowed by *ctfcred*.\n\nThe update and clone operations only change data that is user specified and not empty. E.g. if you want to update the password\nof a credential without changing it's username, you would run the following command:\n\n```console\n[qtc@kali ~]$ ctfcred '' newpassword --update\n```\n\n\n### Import and Export\n\n----\n\n*ctfcred* stores credentials in a plain text ``.yml`` file within your home directory (``~/.ctfcred.yml``). Copying this file to\na different machine is sufficient to export all of your stored credentials.\n\nApart from the *ctfcred* internal format of storing credentials, it is also possible to export or import credentials from other formats.\nDuring *CTFs* it is quite common to obtain credential lists with in ``<USERNAME>:<PASSWORD>`` format. Such a list can be imported with\none of the following commands:\n\n```console\n[qtc@kali ~]$ cat cred_file.txt\nalex:S3cur3P@55w0rd\ntimmy:insecurePassword:(\n[qtc@kali ~]$ ctfcred --import-user-pass cred_file.txt\n\n[qtc@kali ~]$ cat cred_file2.txt\nexample.com/alex:S3cur3P@55w0rd\nexample.org/timmy:insecurePassword:(\n[qtc@kali ~]$ ctfcred --import-user-pass-domain cred_file2.txt\n\n[qtc@kali ~]$ cat cred_file3.txt\nexample.com/alex,S3cur3P@55w0rd\ntimmy,insecurePassword:(\n[qtc@kali ~]$ ctfcred --import-user-pass-domain cred_file3.txt --sep ,\n```\n\nIn the second and third example, the ``--import-user-pass-domain`` option is required, as otherwise the domain prefix\nwould be interpreted as username. Apart from imports with usernames and passwords, *ctfcred* also allows to import\njust usernames or passwords:\n\n```console\n[qtc@kali ~]$ cat users.txt\ntimmy\nharry\n[qtc@kali ~]$ ctfcred --import-user users.txt\n\n[qtc@kali ~]$ cat passwords.txt\nSecurePW!\nMySecretPW.\n[qtc@kali ~]$ ctfcred --import-pass passwords.txt\n```\n\nExports can be created in a similar way as imports and the same formats are supported. To create a list of username and passwords\nseparated by ``:`` you could run the following command:\n\n```console\n[qtc@kali ~]$ ctfcred --users-pass\ncarol:carolsSecurePassword\npeter:pet3rRul35\npeterTheInsaneFighter:securePassword\ntimmy:password123\n```\n\nIt is also possible to print all permutations of the stored credentials by using the ``--mix`` switch:\n\n```console\n[qtc@kali ~]$ ctfcred --users-pass --mix\ncarol:carolsSecurePassword\ncarol:password123\ncarol:pet3rRul35\ncarol:securePassword\npeter:carolsSecurePassword\npeter:password123\npeter:pet3rRul35\npeter:securePassword\npeterTheInsaneFighter:carolsSecurePassword\npeterTheInsaneFighter:password123\npeterTheInsaneFighter:pet3rRul35\npeterTheInsaneFighter:securePassword\ntimmy:carolsSecurePassword\ntimmy:password123\ntimmy:pet3rRul35\ntimmy:securePassword\n```\n\nFor creating simple wordlist of all available usernames or passwords, the ``--users`` and ``--passwords`` switches are sufficient:\n\n```console\n[qtc@kali ~]$ ctfcred --users\ncarol\npeter\npeterTheInsaneFighter\ntimmy\n[qtc@kali ~]$ ctfcred --passwords\ncarolsSecurePassword\npassword123\npet3rRul35\nsecurePassword\n```\n\n\n### Default Values\n\n----\n\nDefault values are currently supported for the ``url`` and ``domain`` attribute of credentials. Both are set to ``None`` by default,\nbut they can be set to individual values on the command line:\n\n```console\n[qtc@kali ~]$ ctfcred --default-url https://example.com\n[qtc@kali ~]$ ctfcred --default-domain example.com\n```\n\nWhen setting them manually, each copy or export operation that involves one of the corresponding attributes will use the default value,\nwhen the credential does not has it set explicitly. The following output shows an example of this situation:\n\n```console\n[qtc@kali ~]$ ctfcred --users-domain\nexample.com/timmy\ntest.org/james\n```\n\n\n### Warning\n\n----\n\nThis tool should not be used to store any sensitive information like your private usernames or passwords.\nAs mentioned above, all entered credentials are saved as plaintext on your disk. This behavior is insecure\nand should only be used to store non sensitive data, like credentials obtained during a *CTF*.\n\nCopyright 2021, Tobias Neitzel and the *ctfcred* contributors.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/qtc-de/ctfcred",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ctfcred",
    "package_url": "https://pypi.org/project/ctfcred/",
    "platform": "",
    "project_url": "https://pypi.org/project/ctfcred/",
    "project_urls": {
      "Homepage": "https://github.com/qtc-de/ctfcred"
    },
    "release_url": "https://pypi.org/project/ctfcred/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "CTF Credential Manager",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10495870,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f118ddf02f8045de644cce1fdddc41ac0b90096f653fb864b8b8cb2ea7d893f6",
          "md5": "3e130b6ce6adf45d08828ac572331f53",
          "sha256": "98ddfd63f2e08bedcdb002670a3e5670d13240a95a826cea0018c82892107cdc"
        },
        "downloads": -1,
        "filename": "ctfcred-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e130b6ce6adf45d08828ac572331f53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16549,
        "upload_time": "2021-05-28T05:43:23",
        "upload_time_iso_8601": "2021-05-28T05:43:23.083385Z",
        "url": "https://files.pythonhosted.org/packages/f1/18/ddf02f8045de644cce1fdddc41ac0b90096f653fb864b8b8cb2ea7d893f6/ctfcred-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f118ddf02f8045de644cce1fdddc41ac0b90096f653fb864b8b8cb2ea7d893f6",
        "md5": "3e130b6ce6adf45d08828ac572331f53",
        "sha256": "98ddfd63f2e08bedcdb002670a3e5670d13240a95a826cea0018c82892107cdc"
      },
      "downloads": -1,
      "filename": "ctfcred-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3e130b6ce6adf45d08828ac572331f53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16549,
      "upload_time": "2021-05-28T05:43:23",
      "upload_time_iso_8601": "2021-05-28T05:43:23.083385Z",
      "url": "https://files.pythonhosted.org/packages/f1/18/ddf02f8045de644cce1fdddc41ac0b90096f653fb864b8b8cb2ea7d893f6/ctfcred-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}