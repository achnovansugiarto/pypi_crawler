{
  "info": {
    "author": "Amazon Web Services",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Amazon Braket Python SDK\n\n[![Latest Version](https://img.shields.io/pypi/v/amazon-braket-sdk.svg)](https://pypi.python.org/pypi/amazon-braket-sdk)\n[![Supported Python Versions](https://img.shields.io/pypi/pyversions/amazon-braket-sdk.svg)](https://pypi.python.org/pypi/amazon-braket-sdk)\n[![Build Status](https://img.shields.io/github/workflow/status/aws/amazon-braket-sdk-python/Python%20package/main?logo=github)](https://github.com/aws/amazon-braket-sdk-python/actions?query=workflow%3A%22Python+package%22)\n[![codecov](https://codecov.io/gh/aws/amazon-braket-sdk-python/branch/main/graph/badge.svg?token=1lsqkZL3Ll)](https://codecov.io/gh/aws/amazon-braket-sdk-python)\n[![Documentation Status](https://img.shields.io/readthedocs/amazon-braket-sdk-python.svg?logo=read-the-docs)](https://amazon-braket-sdk-python.readthedocs.io/en/latest/?badge=latest)\n[![Code Style: Black](https://img.shields.io/badge/code_style-black-000000.svg)](https://github.com/psf/black)\n\nThe Amazon Braket Python SDK is an open source library that provides a framework that you can use to interact with quantum computing hardware devices through Amazon Braket.\n\n## Prerequisites\nBefore you begin working with the Amazon Braket SDK, make sure that you've installed or configured the following prerequisites.\n\n### Python 3.7.2 or greater\nDownload and install Python 3.7.2 or greater from [Python.org](https://www.python.org/downloads/).\n\n### Git\nInstall Git from https://git-scm.com/downloads. Installation instructions are provided on the download page.\n\n### IAM user or role with required permissions\nAs a managed service, Amazon Braket performs operations on your behalf on the AWS hardware that is managed by Amazon Braket. Amazon Braket can perform only operations that the user permits. You can read more about which permissions are necessary in the AWS Documentation.\n\nThe Braket Python SDK should not require any additional permissions aside from what is required for using Braket. However, if you are using an IAM role with a path in it, you should grant permission for iam:GetRole.\n\nTo learn more about IAM user, roles, and policies, see [Adding and Removing IAM Identity Permissions](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage-attach-detach.html).\n\n### Boto3 and setting up AWS credentials\n\nFollow the installation [instructions](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html) for Boto3 and setting up AWS credentials.\n\n**Note:** Make sure that your AWS region is set to one supported by Amazon Braket. You can check this in your AWS configuration file, which is located by default at `~/.aws/config`.\n\n### Configure your AWS account with the resources necessary for Amazon Braket\nIf you are new to Amazon Braket, onboard to the service and create the resources necessary to use Amazon Braket using the [AWS console](https://console.aws.amazon.com/braket/home ).\n\n## Installing the Amazon Braket Python SDK\n\nThe Amazon Braket Python SDK can be installed with pip as follows:\n\n```bash\npip install amazon-braket-sdk\n```\n\nYou can also install from source by cloning this repository and running a pip install command in the root directory of the repository:\n\n```bash\ngit clone https://github.com/aws/amazon-braket-sdk-python.git\ncd amazon-braket-sdk-python\npip install .\n```\n\n### Check the version you have installed\nYou can view the version of the amazon-braket-sdk you have installed by using the following command:\n```bash\npip show amazon-braket-sdk\n```\n\nYou can also check your version of `amazon-braket-sdk` from within Python:\n\n```\n>>> import braket._sdk as braket_sdk\n>>> braket_sdk.__version__\n```\n\n### Updating the Amazon Braket Python SDK\nYou can update the version of the amazon-braket-sdk you have installed by using the following command:\n```bash\npip install amazon-braket-sdk --upgrade --upgrade-strategy eager\n```\n\n## Usage\n\n### Running a circuit on an AWS simulator\n\n```python\nimport boto3\nfrom braket.aws import AwsDevice\nfrom braket.circuits import Circuit\n\ndevice = AwsDevice(\"arn:aws:braket:::device/quantum-simulator/amazon/sv1\")\n\nbell = Circuit().h(0).cnot(0, 1)\ntask = device.run(bell, shots=100)\nprint(task.result().measurement_counts)\n```\n\nThe code sample imports the Amazon Braket framework, then defines the device to use (the SV1 AWS simulator). It then creates a Bell Pair circuit, executes the circuit on the simulator and prints the results of the job. This example can be found in `../examples/bell.py`.\n\n### Running multiple tasks at once\n\nMany quantum algorithms need to run multiple independent circuits, and submitting the circuits in parallel can be faster than submitting them one at a time. In particular, parallel task processing provides a significant speed up when using simulator devices. The following example shows how to run a batch of tasks on SV1:\n\n```python\ncircuits = [bell for _ in range(5)]\nbatch = device.run_batch(circuits, shots=100)\nprint(batch.results()[0].measurement_counts)  # The result of the first task in the batch\n```\n\n### Running a hybrid job\n\n```python\nfrom braket.aws import AwsQuantumJob\n\njob = AwsQuantumJob.create(\n    device=\"arn:aws:braket:::device/quantum-simulator/amazon/sv1\",\n    source_module=\"job.py\",\n    entry_point=\"job:run_job\",\n    wait_until_complete=True,\n)\nprint(job.result())\n```\nwhere `run_job` is a function in the file `job.py`.\n\n\nThe code sample imports the Amazon Braket framework, then creates a hybrid job with the entry point being the `run_job` function. The hybrid job creates quantum tasks against the SV1 AWS Simulator. The job runs synchronously, and prints logs until it completes. The complete example can be found in `../examples/job.py`.\n\n### Available Simulators\nAmazon Braket provides access to two types of simulators: fully managed simulators, available through the Amazon Braket service, and the local simulators that are part of the Amazon Braket SDK.\n\n- Fully managed simulators offer high-performance circuit simulations. These simulators can handle circuits larger than circuits that run on quantum hardware. For example, the SV1 state vector simulator shown in the previous examples requires approximately 1 or 2 hours to complete a 34-qubit, dense, and square circuit (circuit depth = 34), depending on the type of gates used and other factors.\n- The Amazon Braket Python SDK includes an implementation of quantum simulators that can run circuits on your local, classic hardware. For example the braket_sv local simulator is well suited for rapid prototyping on small circuits up to 25 qubits, depending on the hardware specifications of your Braket notebook instance or your local environment. An example of how to execute the task locally is included in the repository  `../examples/local_bell.py`.\n\nFor a list of available simulators and their features, consult the [Amazon Braket Developer Guide](https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.html).\n\n### Debugging logs\n\nTasks sent to QPUs don't always run right away. To view task status, you can enable debugging logs. An example of how to enable these logs is included in repo: `../examples/debug_bell.py`. This example enables task logging so that status updates are continuously printed to the terminal after a quantum task is executed. The logs can also be configured to save to a file or output to another stream. You can use the debugging example to get information on the tasks you submit, such as the current status, so that you know when your task completes.\n\n### Running a Quantum Algorithm on a Quantum Computer\nWith Amazon Braket, you can run your quantum circuit on a physical quantum computer.\n\nThe following example executes the same Bell Pair example described to validate your configuration on a Rigetti quantum computer.\n\n```python\nimport boto3\nfrom braket.circuits import Circuit\nfrom braket.aws import AwsDevice\n\ndevice = AwsDevice(\"arn:aws:braket:::device/qpu/rigetti/Aspen-8\")\n\nbell = Circuit().h(0).cnot(0, 1)\ntask = device.run(bell) \nprint(task.result().measurement_counts)\n```\n\nWhen you execute your task, Amazon Braket polls for a result. By default, Braket polls for 5 days; however, it is possible to change this by modifying the `poll_timeout_seconds` parameter in `AwsDevice.run`, as in the example below. Keep in mind that if your polling timeout is too short, results may not be returned within the polling time, such as when a QPU is unavailable, and a local timeout error is returned. You can always restart the polling by using `task.result()`.\n\n```python\ntask = device.run(bell, poll_timeout_seconds=86400)  # 1 day \nprint(task.result().measurement_counts)\n```\n\nTo select a quantum hardware device, specify its ARN as the value of the `device_arn` argument. A list of available quantum devices and their features can be found in the [Amazon Braket Developer Guide](https://docs.aws.amazon.com/braket/latest/developerguide/braket-devices.html).\n\n**Important** Tasks may not run immediately on the QPU. The QPUs only execute tasks during execution windows. To find their execution windows, please refer to the [AWS console](https://console.aws.amazon.com/braket/home) in the \"Devices\" tab.\n\n## Sample Notebooks\nSample Jupyter notebooks can be found in the [amazon-braket-examples](https://github.com/aws/amazon-braket-examples/) repo.\n\n## Braket Python SDK API Reference Documentation\n\nThe API reference, can be found on [Read the Docs](https://amazon-braket-sdk-python.readthedocs.io/en/latest/).\n\n**To generate the API Reference HTML in your local environment**\n\nTo generate the HTML, first change directories (`cd`) to position the cursor in the `amazon-braket-sdk-python` directory. Then, run the following command to generate the HTML documentation files:\n\n```bash\npip install tox\ntox -e docs\n```\n\nTo view the generated documentation, open the following file in a browser:\n`../amazon-braket-sdk-python/build/documentation/html/index.html`\n\n## Testing\n\nThis repository has both unit and integration tests.\n\nTo run the tests, make sure to install test dependencies first:\n\n```bash\npip install -e \"amazon-braket-sdk-python[test]\"\n```\n\n### Unit Tests\n\nTo run the unit tests:\n\n```bash\ntox -e unit-tests\n```\n\nYou can also pass in various pytest arguments to run selected tests:\n\n```bash\ntox -e unit-tests -- your-arguments\n```\n\nFor more information, please see [pytest usage](https://docs.pytest.org/en/stable/usage.html).\n\nTo run linters and doc generators and unit tests:\n\n```bash\ntox\n```\n\n### Integration Tests\n\nFirst, configure a profile to use your account to interact with AWS. To learn more, see [Configure AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html).\n\nAfter you create a profile, use the following command to set the `AWS_PROFILE` so that all future commands can access your AWS account and resources.\n\n```bash\nexport AWS_PROFILE=YOUR_PROFILE_NAME\n```\nTo run the integration tests for local jobs, you need to have Docker installed and running. To install Docker follow these instructions: [Install Docker](https://docs.docker.com/get-docker/)\n\nRun the tests:\n\n```bash\ntox -e integ-tests\n```\n\nAs with unit tests, you can also pass in various pytest arguments:\n\n```bash\ntox -e integ-tests -- your-arguments\n```\n\n## Support\n\n### Issues and Bug Reports\n\nIf you encounter bugs or face issues while using the SDK, please let us know by posting \nthe issue on our [Github issue tracker](https://github.com/aws/amazon-braket-sdk-python/issues/).  \nFor issues with the Amazon Braket service in general, please use the [Developer Forum](https://forums.aws.amazon.com/forum.jspa?forumID=370).\n\n### Feedback and Feature Requests\n\nIf you have feedback or features that you would like to see on Amazon Braket, we would love to hear from you!  \n[Github issues](https://github.com/aws/amazon-braket-sdk-python/issues/) is our preferred mechanism for collecting feedback and feature requests, allowing other users \nto engage in the conversation, and +1 issues to help drive priority. \n\n## License\nThis project is licensed under the Apache-2.0 License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aws/amazon-braket-sdk-python",
    "keywords": "Amazon AWS Quantum",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "amazon-braket-sdk-kshitijc",
    "package_url": "https://pypi.org/project/amazon-braket-sdk-kshitijc/",
    "platform": null,
    "project_url": "https://pypi.org/project/amazon-braket-sdk-kshitijc/",
    "project_urls": {
      "Homepage": "https://github.com/aws/amazon-braket-sdk-python"
    },
    "release_url": "https://pypi.org/project/amazon-braket-sdk-kshitijc/1.35.2.dev0/",
    "requires_dist": [
      "amazon-braket-schemas (>=1.14.0)",
      "amazon-braket-default-simulator-kshitijc",
      "oqpy (~=0.1.1)",
      "backoff",
      "boltons",
      "boto3 (>=1.22.3)",
      "nest-asyncio",
      "networkx",
      "numpy",
      "openpulse",
      "openqasm3",
      "sympy",
      "black ; extra == 'test'",
      "botocore ; extra == 'test'",
      "coverage (==5.5) ; extra == 'test'",
      "flake8 (<=5.0.4) ; extra == 'test'",
      "isort ; extra == 'test'",
      "jsonschema (==3.2.0) ; extra == 'test'",
      "pre-commit ; extra == 'test'",
      "pylint ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-rerunfailures ; extra == 'test'",
      "pytest-xdist ; extra == 'test'",
      "sphinx ; extra == 'test'",
      "sphinx-rtd-theme ; extra == 'test'",
      "sphinxcontrib-apidoc ; extra == 'test'",
      "tox ; extra == 'test'"
    ],
    "requires_python": ">= 3.7.2",
    "summary": "An open source library for interacting with quantum computing devices on Amazon Braket",
    "version": "1.35.2.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16252060,
  "releases": {
    "1.35.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40c4c5c87ba4461191734e5a8a9522668ddca6160925ab7fbfa928ec87aae018",
          "md5": "6c6f35d934dd7b9cc9e383e4484abf05",
          "sha256": "16afcec525269e28eff3939722cc2a3582fd663e8f267679fbd3ecd1dc6db87f"
        },
        "downloads": -1,
        "filename": "amazon_braket_sdk_kshitijc-1.35.2.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c6f35d934dd7b9cc9e383e4484abf05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7.2",
        "size": 245699,
        "upload_time": "2022-12-29T21:22:32",
        "upload_time_iso_8601": "2022-12-29T21:22:32.544127Z",
        "url": "https://files.pythonhosted.org/packages/40/c4/c5c87ba4461191734e5a8a9522668ddca6160925ab7fbfa928ec87aae018/amazon_braket_sdk_kshitijc-1.35.2.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "092042c188b575ec75cacbacc6ba2cd6ff5f44bbda860e3e441ce7cef3054cc5",
          "md5": "1bc472209a56179e571f252dbb848953",
          "sha256": "f3bfcbcb9ca421ff35747e619a78b97beb810adf346aaeb77548b98a4405f677"
        },
        "downloads": -1,
        "filename": "amazon-braket-sdk-kshitijc-1.35.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "1bc472209a56179e571f252dbb848953",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7.2",
        "size": 301519,
        "upload_time": "2022-12-29T21:22:34",
        "upload_time_iso_8601": "2022-12-29T21:22:34.318115Z",
        "url": "https://files.pythonhosted.org/packages/09/20/42c188b575ec75cacbacc6ba2cd6ff5f44bbda860e3e441ce7cef3054cc5/amazon-braket-sdk-kshitijc-1.35.2.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40c4c5c87ba4461191734e5a8a9522668ddca6160925ab7fbfa928ec87aae018",
        "md5": "6c6f35d934dd7b9cc9e383e4484abf05",
        "sha256": "16afcec525269e28eff3939722cc2a3582fd663e8f267679fbd3ecd1dc6db87f"
      },
      "downloads": -1,
      "filename": "amazon_braket_sdk_kshitijc-1.35.2.dev0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c6f35d934dd7b9cc9e383e4484abf05",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.7.2",
      "size": 245699,
      "upload_time": "2022-12-29T21:22:32",
      "upload_time_iso_8601": "2022-12-29T21:22:32.544127Z",
      "url": "https://files.pythonhosted.org/packages/40/c4/c5c87ba4461191734e5a8a9522668ddca6160925ab7fbfa928ec87aae018/amazon_braket_sdk_kshitijc-1.35.2.dev0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "092042c188b575ec75cacbacc6ba2cd6ff5f44bbda860e3e441ce7cef3054cc5",
        "md5": "1bc472209a56179e571f252dbb848953",
        "sha256": "f3bfcbcb9ca421ff35747e619a78b97beb810adf346aaeb77548b98a4405f677"
      },
      "downloads": -1,
      "filename": "amazon-braket-sdk-kshitijc-1.35.2.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "1bc472209a56179e571f252dbb848953",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.7.2",
      "size": 301519,
      "upload_time": "2022-12-29T21:22:34",
      "upload_time_iso_8601": "2022-12-29T21:22:34.318115Z",
      "url": "https://files.pythonhosted.org/packages/09/20/42c188b575ec75cacbacc6ba2cd6ff5f44bbda860e3e441ce7cef3054cc5/amazon-braket-sdk-kshitijc-1.35.2.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}