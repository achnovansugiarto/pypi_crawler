{
  "info": {
    "author": "heron",
    "author_email": "adept@heronsystems.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![banner](images/banner.png)\n\nadept is a reinforcement learning framework designed to accelerate research \nby providing:\n* a modular interface for using custom networks, agents, and environments\n* baseline reinforcement learning models and algorithms for PyTorch\n* multi-GPU support\n* access to various environments\n* built-in tensorboard logging, model saving, reloading, evaluation, and \nrendering\n* proven hyperparameter defaults\n\nThis code is early-access, expect rough edges. Interfaces subject to change. \nWe're happy to accept feedback and contributions.\n\n### Read More\n* [Installation](#installation)\n* [Quickstart](#quickstart)\n* [Features](#features)\n* [Performance](#performance)\n\n### Documentation\n* [Architecture Overview](docs/api_overview.md)\n* [ModularNetwork Overview](docs/modular_network.md)\n* [Resume training](docs/resume_training.md)\n* Evaluate a model\n* Render environment\n\n### Examples\n* Custom Network ([stub](examples/custom_network_stub.py) | example)\n* Custom SubModule ([stub](examples/custom_submodule_stub.py) | [example](adept/networks/net1d/lstm.py))\n* Custom Agent ([stub](examples/custom_agent_stub.py) | [example](adept/agents/actor_critic.py))\n* Custom Environment ([stub](examples/custom_environment_stub.py) | [example](adept/environments/openai_gym.py))\n\n## Installation\n**Dependencies:**\n* gym\n* PyTorch 1.x\n* Python 3.5+\n* We recommend CUDA 10, pytorch 1.0, python 3.6\n\n**From source:**\n* Follow instructions for [PyTorch](https://pytorch.org/)\n* (Optional) Follow instructions for \n[StarCraft 2](https://github.com/Blizzard/s2client-proto#downloads)\n```bash\ngit clone https://github.com/heronsystems/adeptRL\ncd adeptRL\n# Remove mpi, sc2, profiler if you don't plan on using these features:\npip install .[mpi,sc2,profiler]\n```\n\n**From docker:**\n* [docker instructions](./docker/)\n\n## Quickstart\n**Train an Agent**\nLogs go to `/tmp/adept_logs/` by default. The log directory contains the \ntensorboard file, saved models, and other metadata.\n\n```bash\n# Local Mode (A2C)\n# We recommend 4GB+ GPU memory, 8GB+ RAM, 4+ Cores\npython -m adept.app local --env BeamRiderNoFrameskip-v4\n\n# Distributed Mode (A2C, requires NCCL)\n# We recommend 2+ GPUs, 8GB+ GPU memory, 32GB+ RAM, 4+ Cores\npython -m adept.app distrib --env BeamRiderNoFrameskip-v4\n\n# IMPALA (requires mpi4py and is resource intensive)\n# We recommend 2+ GPUs, 8GB+ GPU memory, 32GB+ RAM, 4+ Cores\npython -m adept.app impala --agent ActorCriticVtrace --env BeamRiderNoFrameskip-v4\n\n# StarCraft 2 (IMPALA not supported yet)\n# Warning: much more resource intensive than Atari\npython -m adept.app local --env CollectMineralShards\n\n# To see a full list of options:\npython -m adept.app -h\npython -m adept.app help <command>\n```\n\n**Use your own Agent, Environment, Network, or SubModule**  \n```python\n\"\"\"\nmy_script.py\n\nTrain an agent on a single GPU.\n\"\"\"\nfrom adept.scripts.local import parse_args, main\nfrom adept.networks import NetworkModule, NetworkRegistry, SubModule1D\nfrom adept.agents import AgentModule, AgentRegistry\nfrom adept.environments import EnvModule, EnvRegistry\n\n\nclass MyAgent(AgentModule):\n    pass  # Implement\n\n\nclass MyEnv(EnvModule):\n    pass  # Implement\n\n\nclass MyNet(NetworkModule):\n    pass  # Implement\n\n\nclass MySubModule1D(SubModule1D):\n    pass  # Implement\n\n\nif __name__ == '__main__':\n    agent_registry = AgentRegistry()\n    agent_registry.register_agent(MyAgent)\n\n    env_registry = EnvRegistry()\n    env_registry.register_env(MyEnv, ['env-id-1', 'env-id-2'])\n\n    network_registry = NetworkRegistry()\n    network_registry.register_custom_net(MyNet)\n    network_registry.register_submodule(MySubModule1D)\n\n    main(\n        parse_args(),\n        agent_registry=agent_registry,\n        env_registry=env_registry,\n        net_registry=network_registry\n    )\n```\n* Call your script like this: `python my_script.py --agent MyAgent --env \nenv-id-1 --custom-network MyNet`\n* You can see all the args [here](adept/scripts/local.py) or how to implement\n the stubs in the examples section above.\n\n## Features\n### Scripts\n**Local (Single-node, Single-GPU)**\n* Best place to [start](adept/scripts/local.py) if you're trying to understand code.\n\n**Distributed (Multi-node, Multi-GPU)**\n* Uses NCCL backend to all-reduce gradients across GPUs without a parameter \nserver or host process.\n* Supports NVLINK and InfiniBand to reduce communication overhead\n* InfiniBand untested since we do not have a setup to test on.\n\n**Importance Weighted Actor Learner Architectures, IMPALA (Single Node, Multi-GPU)**\n* Our implementation uses GPU workers rather than CPU workers for forward \npasses.\n* On Atari we achieve ~4k SPS = ~16k FPS with two GPUs and an 8-core CPU.\n* \"Note that the shallow IMPALA experiment completes training over 200 \nmillion frames in less than one hour.\"\n* IMPALA official experiments use 48 cores.\n* Ours: 2000 frame / (second * # CPU core) DeepMind: 1157 frame / (second * # CPU core)\n* Does not yet support multiple nodes or direct GPU memory transfers.\n\n### Agents\n* Advantage Actor Critic, A2C ([paper](https://arxiv.org/pdf/1708.05144.pdf) | [code](adept/agents/actor_critic.py))\n* Actor Critic Vtrace, IMPALA ([paper](https://arxiv.org/pdf/1802.01561.pdf) | [code](https://arxiv.org/pdf/1802.01561.pdf))\n\n### Networks\n* Modular Network Interface: supports arbitrary input and output shapes up to\n 4D via a SubModule API.\n* Stateful networks (ie. LSTMs)\n* Batch normalization ([paper](https://arxiv.org/pdf/1502.03167.pdf))\n\n### Environments\n* OpenAI Gym\n* StarCraft 2 (unstable)\n\n## Performance\n* ~ 3,000 Steps/second = 12,000 FPS (Atari)\n  * Local Mode\n  * 64 environments\n  * GeForce 2080 Ti\n  * Ryzen 2700x 8-core\n* Used to win a \n[Doom competition](https://www.crowdai.org/challenges/visual-doom-ai-competition-2018-track-2) \n(Ben Bell / Marv2in)\n![architecture](images/benchmark.png)\n* Trained for 50M Steps / 200M Frames\n* Up to 30 no-ops at start of each episode\n* Evaluated on different seeds than trained on\n* Architecture: [Four Convs](./adept/networks/net3d/four_conv.py) (F=32)\nfollowed by an [LSTM](./adept/networks/net1d/lstm.py) (F=512)\n* Reproduce with `python -m adept.app local --logdir ~/local64_benchmark --eval \n-y --nb-step 50e6 --env <env-id>`\n\n## Acknowledgements\nWe borrow pieces of OpenAI's [gym](https://github.com/openai/gym) and \n[baselines](https://github.com/openai/baselines) code. We indicate where this\n is done.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/heronsystems/adeptRL",
    "keywords": "",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adeptRL",
    "package_url": "https://pypi.org/project/adeptRL/",
    "platform": "",
    "project_url": "https://pypi.org/project/adeptRL/",
    "project_urls": {
      "Homepage": "https://github.com/heronsystems/adeptRL"
    },
    "release_url": "https://pypi.org/project/adeptRL/0.2.0/",
    "requires_dist": [
      "numpy (>=1.14)",
      "gym[atari] (>=0.10)",
      "absl-py (>=0.2)",
      "tensorboard (>=1.14)",
      "cloudpickle (>=0.5)",
      "opencv-python-headless (>=3.4)",
      "pyzmq (>=17.1.2)",
      "docopt (>=0.6)",
      "torch (>=1.3.1)",
      "torchvision (>=0.4.2)",
      "mpi4py (>=3.0) ; extra == 'all'",
      "pysc2 (>=2.0) ; extra == 'all'",
      "pyinstrument (>=2.0) ; extra == 'all'",
      "pytest ; extra == 'all'",
      "mpi4py (>=3.0) ; extra == 'mpi'",
      "pyinstrument (>=2.0) ; extra == 'profiler'",
      "pysc2 (>=2.0) ; extra == 'sc2'"
    ],
    "requires_python": ">=3.5.0",
    "summary": "Reinforcement Learning Framework",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6527785,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4be20b489139f7471e98a6a021d25a766e0dd0c7eadd108bebc062eaf88a218",
          "md5": "9b5432e28539a7aa86a12ed0a0dd6fa7",
          "sha256": "8b1db429029149009097ba1bf9e51f48d9c41a36ad3e9fa150eea69855a26c8b"
        },
        "downloads": -1,
        "filename": "adeptRL-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b5432e28539a7aa86a12ed0a0dd6fa7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 93078,
        "upload_time": "2018-08-28T15:03:02",
        "upload_time_iso_8601": "2018-08-28T15:03:02.168420Z",
        "url": "https://files.pythonhosted.org/packages/d4/be/20b489139f7471e98a6a021d25a766e0dd0c7eadd108bebc062eaf88a218/adeptRL-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1999d994495f282af042c75f382184d946aef3ec0918dd9d8dd749bd6926084a",
          "md5": "b5ad655a9592aa7eb2f699d0880df5ea",
          "sha256": "0001c87dc1f707cd8877035e9524852509df99c02ef8607f453f5dc145f1671e"
        },
        "downloads": -1,
        "filename": "adeptRL-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5ad655a9592aa7eb2f699d0880df5ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 48866,
        "upload_time": "2018-08-28T15:03:04",
        "upload_time_iso_8601": "2018-08-28T15:03:04.258617Z",
        "url": "https://files.pythonhosted.org/packages/19/99/d994495f282af042c75f382184d946aef3ec0918dd9d8dd749bd6926084a/adeptRL-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35706659eef7a0d695ffab0511a5601f40423f38a0c27eedf4955e9025b0fa3f",
          "md5": "4490838656cb0650ac9fc4d2e49e8421",
          "sha256": "f2ad6228c71a783bfb040099981530a246983627502d79410946509435bfb3bd"
        },
        "downloads": -1,
        "filename": "adeptRL-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4490838656cb0650ac9fc4d2e49e8421",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.0",
        "size": 153973,
        "upload_time": "2020-01-27T18:13:09",
        "upload_time_iso_8601": "2020-01-27T18:13:09.792240Z",
        "url": "https://files.pythonhosted.org/packages/35/70/6659eef7a0d695ffab0511a5601f40423f38a0c27eedf4955e9025b0fa3f/adeptRL-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ead0d33e65f92fdb05be4be393722c972a38597000f6fb12a72cd75afbd92147",
          "md5": "7c56a40231743739d2103fcf06783270",
          "sha256": "859502c63595e7acc2126d663638883875d22bd24a5f0dbce0600f94da677aaf"
        },
        "downloads": -1,
        "filename": "adeptRL-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7c56a40231743739d2103fcf06783270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 73065,
        "upload_time": "2020-01-27T18:13:11",
        "upload_time_iso_8601": "2020-01-27T18:13:11.866778Z",
        "url": "https://files.pythonhosted.org/packages/ea/d0/d33e65f92fdb05be4be393722c972a38597000f6fb12a72cd75afbd92147/adeptRL-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35706659eef7a0d695ffab0511a5601f40423f38a0c27eedf4955e9025b0fa3f",
        "md5": "4490838656cb0650ac9fc4d2e49e8421",
        "sha256": "f2ad6228c71a783bfb040099981530a246983627502d79410946509435bfb3bd"
      },
      "downloads": -1,
      "filename": "adeptRL-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4490838656cb0650ac9fc4d2e49e8421",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.0",
      "size": 153973,
      "upload_time": "2020-01-27T18:13:09",
      "upload_time_iso_8601": "2020-01-27T18:13:09.792240Z",
      "url": "https://files.pythonhosted.org/packages/35/70/6659eef7a0d695ffab0511a5601f40423f38a0c27eedf4955e9025b0fa3f/adeptRL-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ead0d33e65f92fdb05be4be393722c972a38597000f6fb12a72cd75afbd92147",
        "md5": "7c56a40231743739d2103fcf06783270",
        "sha256": "859502c63595e7acc2126d663638883875d22bd24a5f0dbce0600f94da677aaf"
      },
      "downloads": -1,
      "filename": "adeptRL-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7c56a40231743739d2103fcf06783270",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 73065,
      "upload_time": "2020-01-27T18:13:11",
      "upload_time_iso_8601": "2020-01-27T18:13:11.866778Z",
      "url": "https://files.pythonhosted.org/packages/ea/d0/d33e65f92fdb05be4be393722c972a38597000f6fb12a72cd75afbd92147/adeptRL-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}