{
  "info": {
    "author": "DKing",
    "author_email": "dking@tot.im",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: Android",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: System"
    ],
    "description": "# DroidHack\nA toolkit that provides easy access with procfs and devfs\n\n## How to use\n\nFirst, follow the guide I provided in `Setup` section, so you can run/debug your python code in any rooted android system (real system, NOT chrooted)\n\nAfter python dev env being successfully setup, this python package will empower you to control your android phone fully by python.\n\nWith this package, you can:\n* search/edit process memory in your phone\n* read/write opcodes in a process, or hook them.\n* dump a module from a running process\n\nWith python dev env, you can (DIY):\n* run system calls and library functions with `ctypes`, e.g libc\n* do any other cool stuffs based on syscalls and libraries.\n\n\n## Setup\nGTFO if you cant understand steps below.\n\nDO NOT FOLLOW THE STEPS UNLESS YOU REALLY UNDERSTAND THEM.\\\nor you might just fuck up your phone.\n\n### Android Side:\n1. Download & install termux on your **ROOTED** android system\n2. Verify root by running `su` in termux. Remember root for termux so magisk automatically allow root requests.\n3. In termux, install packages by running `pkg install tsu openssh python cmake clang`\n4. In termux, configure openssh by:\n    * writing your public key to `~/.ssh/authorized_keys`\n    * edit `~/../usr/etc/ssh/sshd_config`, append `StrictModes no` and `AllowTcpForwarding yes`\n5. In termux, run `tsu` to enter su with termux envs, then run `sshd` to start openssh server as root.\n6. In termux, run `pip install droidhack`\n\n### PC Side\n1. Install PyCharms\n2. Settings -> Deployment, setup your remote android ssh server here.\n    * Server: `ssh root@<android_ip> -p 8022`\n    * Root Path: `/`\n    * Deployment Path: `/data/local/tmp/your_project` or something similar\n3. Settings -> Project -> Python Interpreter: add deployment target with python interpreter path: `/data/data/com.termux/files/usr/bin/python`\n4. Debug your pycharm project with remote python interpreter created above.\n\n#### Note\nIf you have trouble connecting by remote ip address of android phone,\n`adb forward tcp:8022 tcp:8022` will forward 8022 port from remote to your local address.\nSo you can connected to `127.0.0.1:8022` instead.\n\nPyCharms 2020.1 has a bug in `.pycharm_helper`, remember to fix the bug manually.\n\n\n## Usage\n```python\nfrom capstone import *\nfrom keystone import *\nfrom droidhack.procfs import *\nfrom droidhack.devfs import *\n\n# get a random process\nprocs = Processes()\nmsg = procs.find('messaging')\nassert len(msg) > 0\nmsg = msg[0]\n# dump a module\nmsg.dump('libopenjdk.so', '/data/local/tmp/libopenjdk.so')\n\n# search the whole memory\ngoogle_msg_ptrs = msg.search(pattern=\"GNU\", limit=5, verbose=False)\nfor ptr in google_msg_ptrs:\n    print(msg.mem.readcstr(ptr).replace('\\r', '\\n'))\n\n# search memory by module\nfor m in msg.maps:\n    if '.so' in m.path and 'r-' in m.perm:\n        # advanced usage\n        copyright_addrs = msg.search(pattern=\"CREATE \", addr=m.addr, size=m.size, limit=1)\n        if copyright_addrs:\n            print(m.path)\n        for ca in copyright_addrs:\n            print('    ' + msg.mem.readcstr(ca))\n\n\n# patch code dynamically\nasm = Ks(KS_ARCH_ARM64, KS_MODE_LITTLE_ENDIAN)\ndism = Cs(CS_ARCH_ARM64, KS_MODE_LITTLE_ENDIAN)\nopcodes = \"\"\"\n    MOV             X19, X0\n    MOV             X20, X1\n\"\"\"\ntarget_codes = asm.asm(opcodes, as_bytes=True)[0]\nprint(f'finding {opcodes}    => {target_codes}')\npossible_targets = msg.search(pattern=target_codes, verbose=True)\n# possible_targets = qq.search(pattern=bytearray(target_opcodes).hex(), pattern_type='aob') # example for AOB search\nfor ptr in possible_targets:\n    print(f'found at {ptr:x}, region: {msg.get_ptr_info(ptr)}\\ndumping opcodes:')\n    for i in dism.disasm(msg.mem.readbuf(ptr, 4 * 4), offset=ptr):\n        print(i)\n    print('hacking...')\n    old_perm = msg.get_perm(ptr)\n    msg.set_perm(ptr, 'rwx')\n    old_opcodes = msg.mem.readbuf(ptr + 4 * 2, 4)\n    msg.mem.writebuf(ptr + 4 * 2, asm.asm('mov x0, x1', as_bytes=True)[0])\n    print(f'modified instructions at {ptr:x}, dumping opcodes:')\n    for i in dism.disasm(msg.mem.readbuf(ptr, 4 * 4), offset=ptr):\n        print(i)\n    # restore opcodes\n    msg.mem.writebuf(ptr + 4 * 2, old_opcodes)\n    print('restore perm')\n    msg.set_perm(ptr, old_perm)\n    print(f'current ptr info: {msg.get_ptr_info(ptr)}')\n\n\n# interactive search\ncandidates = msg.search(int(input('current value:')), limit=0, verbose=True)\nwhile True:\n    cand = []\n    for c in candidates:\n        if msg.search(pattern=int(input('current value:')), addr=c, size=4):\n            cand.append(c)\n    candidates = cand\n    print(f'found {len(candidates)} results.')\n    if len(candidates) < 10:\n        break\n\n# play with found candidates\npass\n\n\n# [[unlikely]] RKmem operation\nkmem = DevKmem()\nsys_open_addr = kmem.get_sym('sys_open')[0].addr\nprint(f'{sys_open_addr:x}')\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DKingAlpha/droidhack",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "droidhack",
    "package_url": "https://pypi.org/project/droidhack/",
    "platform": "",
    "project_url": "https://pypi.org/project/droidhack/",
    "project_urls": {
      "Homepage": "https://github.com/DKingAlpha/droidhack"
    },
    "release_url": "https://pypi.org/project/droidhack/1.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A toolkit that provides easy access with procfs and devfs",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11151828,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8e7cfb4c4b4c5bd4d4ab99be6c212d49be7a91409957fc6bc5d48d7f4037f73",
          "md5": "f8de679e032b9e79168b638f22ba0239",
          "sha256": "990ba2c6d095e6c5dce3491104920bce25557f3f6a09d05376e29655f1067206"
        },
        "downloads": -1,
        "filename": "droidhack-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8de679e032b9e79168b638f22ba0239",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12602,
        "upload_time": "2021-02-10T10:41:45",
        "upload_time_iso_8601": "2021-02-10T10:41:45.666745Z",
        "url": "https://files.pythonhosted.org/packages/b8/e7/cfb4c4b4c5bd4d4ab99be6c212d49be7a91409957fc6bc5d48d7f4037f73/droidhack-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94fd258f529b39d4fb8a632c90ce8476a566f27c454d1d92698c5a8902172c62",
          "md5": "f5544678401fce13be7c6c958004d3a5",
          "sha256": "cf2c5f2cb32875250c504e41a1a952c7bd175ecbdfd46abb8f24b870282c1d1d"
        },
        "downloads": -1,
        "filename": "droidhack-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5544678401fce13be7c6c958004d3a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14093,
        "upload_time": "2021-08-11T16:18:06",
        "upload_time_iso_8601": "2021-08-11T16:18:06.680882Z",
        "url": "https://files.pythonhosted.org/packages/94/fd/258f529b39d4fb8a632c90ce8476a566f27c454d1d92698c5a8902172c62/droidhack-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f00b8aaf85c4116cba9098d6905342e85321e035969cdedc6c76d7c125f17a",
          "md5": "4b818f0383de50eaf3fb51ad4cc948cf",
          "sha256": "b92804acdca60a882c733b94a6cc950eeb93e829d6a6579b952c5e97675e8ac1"
        },
        "downloads": -1,
        "filename": "droidhack-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4b818f0383de50eaf3fb51ad4cc948cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13282,
        "upload_time": "2021-08-11T16:18:08",
        "upload_time_iso_8601": "2021-08-11T16:18:08.176129Z",
        "url": "https://files.pythonhosted.org/packages/21/f0/0b8aaf85c4116cba9098d6905342e85321e035969cdedc6c76d7c125f17a/droidhack-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94fd258f529b39d4fb8a632c90ce8476a566f27c454d1d92698c5a8902172c62",
        "md5": "f5544678401fce13be7c6c958004d3a5",
        "sha256": "cf2c5f2cb32875250c504e41a1a952c7bd175ecbdfd46abb8f24b870282c1d1d"
      },
      "downloads": -1,
      "filename": "droidhack-1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5544678401fce13be7c6c958004d3a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14093,
      "upload_time": "2021-08-11T16:18:06",
      "upload_time_iso_8601": "2021-08-11T16:18:06.680882Z",
      "url": "https://files.pythonhosted.org/packages/94/fd/258f529b39d4fb8a632c90ce8476a566f27c454d1d92698c5a8902172c62/droidhack-1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21f00b8aaf85c4116cba9098d6905342e85321e035969cdedc6c76d7c125f17a",
        "md5": "4b818f0383de50eaf3fb51ad4cc948cf",
        "sha256": "b92804acdca60a882c733b94a6cc950eeb93e829d6a6579b952c5e97675e8ac1"
      },
      "downloads": -1,
      "filename": "droidhack-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4b818f0383de50eaf3fb51ad4cc948cf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13282,
      "upload_time": "2021-08-11T16:18:08",
      "upload_time_iso_8601": "2021-08-11T16:18:08.176129Z",
      "url": "https://files.pythonhosted.org/packages/21/f0/0b8aaf85c4116cba9098d6905342e85321e035969cdedc6c76d7c125f17a/droidhack-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}