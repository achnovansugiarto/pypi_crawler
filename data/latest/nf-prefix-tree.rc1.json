{
  "info": {
    "author": "Zachary McGrath",
    "author_email": "zmcgrath96@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# No Frills Prefix Tree (nf_prefix_tree)\nThis is a prefix tree with no frills. Supports simple insert, search, and basic querying of strings that a (can be) keyed. Written in C++ 11 and has python wrappers. Written because I couldn't find a fast, easy to install and use basic prefix tree in python. \n\n## Installation\n### C++\nIn order to build the C++, you need to have \n1. C++ 11\n2. `g++` compiler\n\nThis program uses the `STL` so no other packages are necessary\n\n#### Linux and macOS\n1. Change to the `nf_prefix_tree` directory\n2. Run `chmod +x buildAndTest.sh`\n3. Run `./buildAndTest.sh`\n\nIf no errors occur, you should be good to go!\n\n#### Windows\nIn order to build, ensure you have the `g++` compiler and it is added to path\n1. Change to `nf_prefix_tree/src/` directory\n2. Run `make`\n3. Change to `nf_prefix_tree/tests/` directory if you want to run tests\n4. Run `make`\n5. Run `./testmain`\n\n### Python\nIf you are installing on `pip` and use macOS, all you need to run is `pip install nf_prefix_tree`\n\nOtherwise you will need to build from source. First follow the above steps for C++. After doing so, make sure you have the following\n1. `Python 3`\n2. `Cython` package\n\nOnce you have these, change into the `python_bindings` directory. Run `python3 setup.py build_ext --inplace`. You can now do `from nf_prefix_tree import PyPrefixTree` in the same directory!\n\n## Examples\n### C++ \n```c++\n#include \"PrefixTree.hpp\"\n\nint main() {\n\n    PrefixTree * t = new PrefixTree();\n\n    t->addSequence(\"ABCDEFG\", \"Key1\");\n    t->addSequence(\"ABCDEFG\", \"Key2\");\n    t->addSequence(\"ABCXYZ\", \"Key3\");\n    t->addSequence(\"LMNOP\", \"Key4\");\n\n    t->show();\n\n    t->show(2);\n}\n```\nOutput:\n```bash\nroot\n|-> Sequence: A\t keys: Key1, Key2, Key3, \n |-> Sequence: AB\t keys: Key1, Key2, Key3, \n  |-> Sequence: ABC\t keys: Key1, Key2, Key3, \n   |-> Sequence: ABCD\t keys: Key1, Key2, \n    |-> Sequence: ABCDE\t keys: Key1, Key2, \n     |-> Sequence: ABCDEF\t keys: Key1, Key2, \n      |-> Sequence: ABCDEFG\t keys: Key1, Key2, \n   |-> Sequence: ABCX\t keys: Key3, \n    |-> Sequence: ABCXY\t keys: Key3, \n     |-> Sequence: ABCXYZ\t keys: Key3, \n|-> Sequence: L\t keys: Key4, \n |-> Sequence: LM\t keys: Key4, \n  |-> Sequence: LMN\t keys: Key4, \n   |-> Sequence: LMNO\t keys: Key4, \n    |-> Sequence: LMNOP\t keys: Key4, \nroot\n|-> Sequence: A\t keys: Key1, Key2, Key3, \n |-> Sequence: AB\t keys: Key1, Key2, Key3, \n|-> Sequence: L\t keys: Key4, \n |-> Sequence: LM\t keys: Key4, \n```\n\n### Python \n```python\nfrom nf_prefix_tree import PyPrefixTree\n\nt = PyPrefixTree()\n\nt.addSequence('ABCDE', 'key1')\nt.addSequence('ABCXY', 'key2')\nt.addSequence('ZYAPW', 'key3')\n\nt.show()\n```\nOutput:\n```bash\nroot\n|-> Sequence: A\t keys: key1, key2, \n |-> Sequence: AB\t keys: key1, key2, \n  |-> Sequence: ABC\t keys: key1, key2, \n   |-> Sequence: ABCD\t keys: key1, \n    |-> Sequence: ABCDE\t keys: key1, \n   |-> Sequence: ABCX\t keys: key2, \n    |-> Sequence: ABCXY\t keys: key2, \n|-> Sequence: Z\t keys: key3, \n |-> Sequence: ZY\t keys: key3, \n  |-> Sequence: ZYA\t keys: key3, \n   |-> Sequence: ZYAP\t keys: key3, \n    |-> Sequence: ZYAPW\t keys: key3, \n```\n\n## API\n### C++\n* `PrefixTree()`\n    * Constructor for the prefix tree\n* `void addSequence(sequence, key)`\n    * Add a sequence with a key to the prefix tree\n    * `sequence - std::string` the sequence to compress via tree\n    * `key - std::string` the key for this sequence. If not desired, make sequence empty string\n* `bool hasPrefix(prefix)`\n    * Check to see if the input sequence is in the tree\n    * `prefix - std::string` the prefix to look up\n* `std::vector<std::string> getKeysWithPrefix(prefix)`\n    * Get all keys associated with a prefix. Empty vector returned if the prefix is not in the tree\n    * `prefix - std::string` the prefix to look for\n* `void show(level=-1)`\n    * Show the tree in the console down to the specified level\n    * `level -- int` the level down to which to print the tree. Leave as `-1` if you want to print the entire tree\n### Python\n* `PyPrefixTree()`\n    * Constructor for the prefix tree\n* `addSequence(sequence, key) -> None` \n    * Add a sequence with a key to the prefix tree\n    * `sequence - str` the sequence to compress via tree\n    * `key - str` the key for this sequence. If not desired, make \n* `hasPrefix(prefix) -> bool`\n    * Check to see if the input sequence is in the tree\n    * `prefix - str` the prefix to look up\n    * Returns `True` if `prefix` is found, `False` otherwise\n* `getKeysWithPrefix(prefix) -> list`\n    * Get all keys associated with a prefix\n    * `prefix - str` the prefix to look for\n    * Returns a `list` of `str` of all keys. `[]` is returned if the prefix is not in the tree\n* `show(level=-1)`\n    * Show the tree in the console down to the specified level\n    * `level -- int` the level down to which to print the tree. Leave as `-1` if you want to print the entire tree\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zmcgrath96/nf_prefix_tree",
    "keywords": "prefix bioinformatics substring string fast memory",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nf-prefix-tree",
    "package_url": "https://pypi.org/project/nf-prefix-tree/",
    "platform": "",
    "project_url": "https://pypi.org/project/nf-prefix-tree/",
    "project_urls": {
      "Homepage": "https://github.com/zmcgrath96/nf_prefix_tree"
    },
    "release_url": "https://pypi.org/project/nf-prefix-tree/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A datastructure for efficient storage of string data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8292334,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68a4a3b0fb3b1d5fe8de076b2239927fcdf16196b64866b5470e2423d26f0436",
          "md5": "4460d4166b098f1e6086bb051d4dcd81",
          "sha256": "ec25f5558633157cafd68764664302b43f41e48a49620626fa5df351f31dc89a"
        },
        "downloads": -1,
        "filename": "nf_prefix_tree-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4460d4166b098f1e6086bb051d4dcd81",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 54526,
        "upload_time": "2020-09-28T21:57:47",
        "upload_time_iso_8601": "2020-09-28T21:57:47.918921Z",
        "url": "https://files.pythonhosted.org/packages/68/a4/a3b0fb3b1d5fe8de076b2239927fcdf16196b64866b5470e2423d26f0436/nf_prefix_tree-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8b95066b6c1d9e96f4ef02be1d78954261cb00e99c261fb640a1ae6ff0059c2",
          "md5": "eb329e50f356c7cfb0c743489d7f9d68",
          "sha256": "cfdd3a4f7967719b296889b8a614e06595ca999467178944825a7cd2ec3ad1eb"
        },
        "downloads": -1,
        "filename": "nf_prefix_tree-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb329e50f356c7cfb0c743489d7f9d68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69983,
        "upload_time": "2020-09-28T21:57:50",
        "upload_time_iso_8601": "2020-09-28T21:57:50.455038Z",
        "url": "https://files.pythonhosted.org/packages/a8/b9/5066b6c1d9e96f4ef02be1d78954261cb00e99c261fb640a1ae6ff0059c2/nf_prefix_tree-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68a4a3b0fb3b1d5fe8de076b2239927fcdf16196b64866b5470e2423d26f0436",
        "md5": "4460d4166b098f1e6086bb051d4dcd81",
        "sha256": "ec25f5558633157cafd68764664302b43f41e48a49620626fa5df351f31dc89a"
      },
      "downloads": -1,
      "filename": "nf_prefix_tree-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4460d4166b098f1e6086bb051d4dcd81",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 54526,
      "upload_time": "2020-09-28T21:57:47",
      "upload_time_iso_8601": "2020-09-28T21:57:47.918921Z",
      "url": "https://files.pythonhosted.org/packages/68/a4/a3b0fb3b1d5fe8de076b2239927fcdf16196b64866b5470e2423d26f0436/nf_prefix_tree-0.1.0-cp37-cp37m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8b95066b6c1d9e96f4ef02be1d78954261cb00e99c261fb640a1ae6ff0059c2",
        "md5": "eb329e50f356c7cfb0c743489d7f9d68",
        "sha256": "cfdd3a4f7967719b296889b8a614e06595ca999467178944825a7cd2ec3ad1eb"
      },
      "downloads": -1,
      "filename": "nf_prefix_tree-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eb329e50f356c7cfb0c743489d7f9d68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 69983,
      "upload_time": "2020-09-28T21:57:50",
      "upload_time_iso_8601": "2020-09-28T21:57:50.455038Z",
      "url": "https://files.pythonhosted.org/packages/a8/b9/5066b6c1d9e96f4ef02be1d78954261cb00e99c261fb640a1ae6ff0059c2/nf_prefix_tree-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}