{
  "info": {
    "author": "Jeff Donner",
    "author_email": "jeffrey.donner@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C++",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Text Processing"
    ],
    "description": "# Python Aho-Corasick implementation\n\n`noahong` is a Python implementation of the [Aho-Corasick](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm) algorithm for string matching, based on a fork of the [NoAho](https://github.com/JDonner/NoAho) C++ implementation.\n\n\n`noahong` supports macOS, Linux, Windows on Python 3.6+.\n\n\n## API\n\nThe first thing to do is to instantiate a `NoAho` object and add some keys to it (optionally with different payloads for each).\n\n```python3\nfrom noahong import NoAho\n\ntrie = NoAho()\n\n# fill with .add()\ntrie.add(\"foo\", \"id_foo\")\ntrie.add(\"foobar\", \"id_foobar\")\n\n#Â or fill with __setitem__\ntrie[\"bar\"] = \"id_bar\"\n```\n\nOnce you have added the different keys and their payloads, the `NoAho` object needs to be compiled:\n\n```python3\ntrie.compile()\n```\n\nOnce it is compiled, keys can no longer be added to the `NoAho` object.\n\n`noahong` then exposes four functions to find matching substrings in text:\n\n### `find_short`\n\n`trie.find_short(text)` finds the first substring of `text` that is matched by a key added to the `trie`. \n\nIt returns a tuple `(start, stop, payload)` such that: \n- `payload` is the object inserted with `trie.add()`\n- `start` and `stop` are indices of the match in the `text`: `text[start:stop] == key` \n\nFor example, using the above `trie`:\n\n```python3\ntrie.find_short(\"something foo\")\n# returns (10, 13, 'id_foo')\n# \"something foo\"[10:13] == \"foo\"\n```\n\nand returns the first match even though a longer match may start at the same position:\n\n```python3\ntrie.find_short(\"something foobar\")\n# returns (10, 13, 'id_foo')\n```\n\n### `find_long`\n\n`trie.find_long(text)` finds the first longest substring of `text` that is matched by a key added to the `trie`. \n\nFor example, using the above `trie`:\n\n```python3\ntrie.find_long(\"something foobar\")\n# returns (10, 16, 'id_foobar')\n```\n\n### `findall_*`\n\nBoth `find_short` and `find_long` have a `findall_short` and `findall_long` counterparts that allow you to iterate on all non-overlapping matches found\nin the text:\n\n```python3\nfor x in trie.findall_long(\"something foo bar foobar\"): \n    print(x)       \n\n# prints                          \n# (10, 13, 'id_foo')\n# (14, 17, 'id_bar')\n# (18, 24, 'id_foobar')\n```\n\nBecause matches are non-overlapping:\n\n```python3\nlist(trie.findall_short(\"foobar\")) == [(0, 3, \"id_foo\"), (3, 6, \"id_bar\")]\n```\n\nwhereas:\n\n```python3\nlist(trie.findall_long(\"foobar\")) == [(0, 6, \"id_foobar\")]\n```\n\n### Payloads\n\n`NoAho` tries accept any Python object as a payload:\n\n```python3\ntrie = NoAho()\ntrie.add(\"foo\", 0)\ntrie.add(\"bar\", CustomClass())\ntrie.add(\"baz\", lambda x: x)\n```\n\nThe same payload can be associated with different keys.\n\nNotice that the non-pickable `lambda x: x` payload works because\nthere is no serialization involved here.\n\n### Length and inclusion\n\n`NoAho` trie objects also expose the number of keys with `len`:\n\n```python3\nlen(trie)\n```\n\nAnd, when they are compiled, they can be used to test for key inclusion:\n\n```python3\n\"foo\" in trie\n```\n\nThe number of nodes in the underlying Trie can be recovered with \n\n```python3\ntrie.nodes_count()\n```\n\n## Mapped `NoAho`\n\nIn order to save memory, `noahong` exposes a `Mapped` matching object which can be written to disk and later loaded directly to memory to perform matches with a smaller memory footprint.\n\nThe `Mapped` object exposes different finding methods and only supports integer payloads.\n\nConstruct it by adding keys and payloads to a `NoAho` object:\n\n```python3\nfrom noahong import NoAho, Mapped\n\ntrie = NoAho()\ntrie.add(\"baz\", \"id_baz\")\n\ntrie.compile()\ntrie.write(\"./test.matcher\")\n\nmapped_trie = Mapped(\"./test.matcher\")\n```\n\nThe `mapped_trie` object exposes a `findall_anchored` function that iterates over _anchored_ matches, matches that can be found within boundaries set with a special \"anchor\" character `\\u001F`.\n\nThis is useful to restrict matches to be found only between, say, spaces:\n\n```python3\ntrie = NoAho()\ntrie.add(\"foo\", 0)\ntrie.add(\"bar\", 1)\n\ntrie.compile()\ntrie.write(\"./test.matcher\")\n\nmapped_trie = Mapped(\"./test.matcher\")\nmapped_trie.findall_anchored(\"\\u001Fbar\\u001F\\u001Ffoo\\u001F\\u001Ffoobar\\u001F\")\n\n# returns [(1, 4, 1), (6, 9, 0), (11, 14, 0)]\n```\n\nNotice how `\"bar\"` is not found in the final `\"foobar\"` because it is not present between \"anchor\" characters.\n\nIt is possible to place anchor characters in the keys:\n\n```python3\ntrie = NoAho()\ntrie.add(\"foo\\u001F\\u001Fbar\", 0)\ntrie.add(\"foo\", 1)\ntrie.add(\"bar\", 2)\n\ntrie.compile()\ntrie.write(\"./test.matcher\")\n\nmapped_trie = Mapped(\"./test.matcher\")\nmapped_trie.findall_anchored(\"\\u001Ffoo\\u001F\\u001Fbar\\u001F\")\n# returns [(1, 9, 0)]\n```\n\nIn this case, the longest key found between anchors is returned.\n\n\n## Installation\n\n### Devpi\n\n`noahong` is available on devpi:\n\n```\npip install noahong\n```\n\n### Python 3\n\n`noahong` can be installed manually:\n\n```\npython3 setup.py install\n```\n\n## Legacy README\n\nYou can find more information on the package and C++ implementation by reading the \nlegacy README found [here](./README-legacy.md).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/clustree/noahong",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "noahong",
    "package_url": "https://pypi.org/project/noahong/",
    "platform": "",
    "project_url": "https://pypi.org/project/noahong/",
    "project_urls": {
      "Homepage": "https://github.com/clustree/noahong"
    },
    "release_url": "https://pypi.org/project/noahong/0.11.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.*, <4",
    "summary": "Fast, non-overlapping simultaneous multiple keyword search",
    "version": "0.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12631399,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85a4005f4ab6185a0ebf027bcb7b55d76c1345511ea9da3c9116118bb1c09254",
          "md5": "c7b1b61085db2bf04b49b5849341b3f7",
          "sha256": "8b97555aa8510e6bbf8bad893880c3373caef12501caf765f739e3a3813efb7b"
        },
        "downloads": -1,
        "filename": "noahong-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c7b1b61085db2bf04b49b5849341b3f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.*, <4",
        "size": 67999,
        "upload_time": "2020-05-14T07:03:55",
        "upload_time_iso_8601": "2020-05-14T07:03:55.235759Z",
        "url": "https://files.pythonhosted.org/packages/85/a4/005f4ab6185a0ebf027bcb7b55d76c1345511ea9da3c9116118bb1c09254/noahong-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56eb4b6cf56a190b8da8cfd5361f3ad5230f0aff479693464ad698e2f65e1511",
          "md5": "de7a8531847dd4a1a30d2c7a3258a7f7",
          "sha256": "933c2c413ecce0b41ffcfb3efcec8128f426aca17a29278b639818da0638b7b2"
        },
        "downloads": -1,
        "filename": "noahong-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de7a8531847dd4a1a30d2c7a3258a7f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.*, <4",
        "size": 115509,
        "upload_time": "2022-01-20T10:19:49",
        "upload_time_iso_8601": "2022-01-20T10:19:49.283526Z",
        "url": "https://files.pythonhosted.org/packages/56/eb/4b6cf56a190b8da8cfd5361f3ad5230f0aff479693464ad698e2f65e1511/noahong-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65dc7d895e01bdabcfe6d912d24b9bb14b550c2613b1e12fd68da2dddbe81227",
          "md5": "ea49a42e1da3451ea7f4674ed9020e4c",
          "sha256": "d637557d2704c8c6180d32ed873db65403e139f79e47a5493c8539b0fc479dc3"
        },
        "downloads": -1,
        "filename": "noahong-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea49a42e1da3451ea7f4674ed9020e4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.*, <4",
        "size": 118318,
        "upload_time": "2022-01-19T12:48:40",
        "upload_time_iso_8601": "2022-01-19T12:48:40.439244Z",
        "url": "https://files.pythonhosted.org/packages/65/dc/7d895e01bdabcfe6d912d24b9bb14b550c2613b1e12fd68da2dddbe81227/noahong-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65dc7d895e01bdabcfe6d912d24b9bb14b550c2613b1e12fd68da2dddbe81227",
        "md5": "ea49a42e1da3451ea7f4674ed9020e4c",
        "sha256": "d637557d2704c8c6180d32ed873db65403e139f79e47a5493c8539b0fc479dc3"
      },
      "downloads": -1,
      "filename": "noahong-0.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ea49a42e1da3451ea7f4674ed9020e4c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.*, <4",
      "size": 118318,
      "upload_time": "2022-01-19T12:48:40",
      "upload_time_iso_8601": "2022-01-19T12:48:40.439244Z",
      "url": "https://files.pythonhosted.org/packages/65/dc/7d895e01bdabcfe6d912d24b9bb14b550c2613b1e12fd68da2dddbe81227/noahong-0.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}