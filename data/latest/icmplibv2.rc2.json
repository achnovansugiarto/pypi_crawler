{
  "info": {
    "author": "Valentin BELYN",
    "author_email": "valentin-hello@gmx.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "- fork from - ```https://github.com/ValentinBELYN/icmplib```\n\n## Features\n\n- :deciduous_tree: **Ready-to-use:** icmplib offers ready-to-use functions such as the most popular ones: `ping`, `multiping` and `traceroute`.\n- :gem: **Modern:** This library uses the latest technologies offered by Python 3.6+ and is fully object-oriented.\n- :rocket: **Fast:** Each class and function has been designed and optimized to deliver the best performance. Some functions are also multithreaded (like the `multiping` function). You can ping the world in seconds!\n- :nut_and_bolt: **Powerful and evolutive:** Easily build your own classes and functions with `ICMPv4` and `ICMPv6` sockets.\n- :fire: **Seamless integration of IPv6:** Use IPv6 the same way you use IPv4. Automatic detection is done without impacting performance.\n- :rainbow: **Broadcast support** (you must use the `ICMPv4Socket` class to enable it).\n- :beer: **Support of all operating systems.** Tested on Linux, macOS and Windows.\n- :metal: **No dependency:** icmplib is a pure Python implementation of the ICMP protocol. It does not use any external dependencies.\n\n<br>\n\n## Installation\n\nInstall, upgrade and uninstall icmplib with these commands:\n\n```shell\n$ pip3 install icmplib --extra-index-url https://USER:PASSOWRD@pip.noia.network/icmplib --upgrade\n$ pip3 uninstall icmplib\n```\n\nicmplib requires Python 3.6 or later.\n\nImport icmplib into your project (only import what you need):\n\n```python\n# For simple use\nfrom icmplib import ping, multiping, traceroute, Host, Hop\n\n# For advanced use (sockets)\nfrom icmplib import ICMPv4Socket, ICMPv6Socket, ICMPRequest, ICMPReply\n\n# Exceptions\nfrom icmplib import ICMPLibError, ICMPSocketError, \\\n    SocketPermissionError, SocketBroadcastError, TimeoutExceeded, \\\n    ICMPError, DestinationUnreachable, TimeExceeded\n```\n\n<br>\n\n## Built-in functions\n\n### Ping\nSend *ICMP ECHO_REQUEST* packets to a network host.\n\n#### Definition\n```python\nping(address, src_addr='127.0.01', count=4, interval=1, timeout=2, id=PID)\n```\n\n#### Parameters\n- `address`\n\n  The IP address of the gateway or host to which the message should be sent.\n\n  - Type: `str`\n\n- `count`\n\n  The number of ping to perform.\n\n  - Type: `int`\n  - Default: 4\n\n- `interval`\n\n  The interval in seconds between sending each packet.\n\n  - Type: `int` or `float`\n  - Default: 1\n\n- `timeout`\n\n  The maximum waiting time for receiving a reply in seconds.\n\n  - Type: `int` or `float`\n  - Default: 2\n\n- `id`\n\n  The identifier of the request. Used to match the reply with the request.<br>\n  In practice, a unique identifier is used for every ping process.\n\n  - Type: `int`\n  - Default: `PID`\n\n#### Return value\n- `Host` object\n\n  A `Host` object containing statistics about the desired destination:<br>\n  `address`, `min_rtt`, `avg_rtt`, `max_rtt`, `transmitted_packets`,<br>\n  `received_packets`, `packet_loss`, `is_alive`.\n\n#### Exceptions\n- `SocketPermissionError`\n\n  If the permissions are insufficient to create a socket.\n\n#### Example\n```python\n>>> host = ping('1.1.1.1', src_addr='127.0.01', count=10, interval=0.2)\n\n>>> host.address              # The IP address of the gateway or host that responded\n'1.1.1.1'                     # to the request\n\n>>> host.min_rtt              # The minimum round-trip time\n12.2\n\n>>> host.avg_rtt              # The average round-trip time\n13.2\n\n>>> host.max_rtt              # The maximum round-trip time\n17.6\n\n>>> host.transmitted_packets  # The number of packets transmitted to the destination host\n10\n\n>>> host.received_packets     # The number of packets sent by the remote host and received by\n9                             # the current host\n\n>>> host.packet_loss          # Packet loss occurs when packets fail to reach their destination\n0.1                           # Return a float between 0 and 1 (all packets are lost)\n\n>>> host.is_alive             # Return True if the host is reachable, False otherwise\nTrue\n```\n\n<br>\n\n### Multiping\nSend *ICMP ECHO_REQUEST* packets to multiple network hosts.\n\n#### Definition\n```python\nmultiping(addresses, count=2, interval=1, timeout=2, id=PID, max_threads=10)\n```\n\n#### Parameters\n- `addresses`\n\n  The IP addresses of the gateways or hosts to which messages should be sent.\n\n  - Type: `list of str`\n\n- `count`\n\n  The number of ping to perform per address.\n\n  - Type: `int`\n  - Default: 2\n\n- `interval`\n\n  The interval in seconds between sending each packet.\n\n  - Type: `int` or `float`\n  - Default: 1\n\n- `timeout`\n\n  The maximum waiting time for receiving a reply in seconds.\n\n  - Type: `int` or `float`\n  - Default: 2\n\n- `id`\n\n  The identifier of the requests. This identifier will be incremented by one for each destination.\n\n  - Type: `int`\n  - Default: `PID`\n\n- `max_threads`\n\n  The number of threads allowed to speed up processing.\n\n  - Type: `int`\n  - Default: 10\n\n#### Return value\n- `List of Host`\n\n  A `list of Host` objects containing statistics about the desired destinations:<br>\n  `address`, `min_rtt`, `avg_rtt`, `max_rtt`, `transmitted_packets`,<br>\n  `received_packets`, `packet_loss`, `is_alive`.<br>\n  The list is sorted in the same order as the addresses passed in parameters.\n\n#### Exceptions\n- `SocketPermissionError`\n\n  If the permissions are insufficient to create a socket.\n\n#### Example\n```python\n>>> hosts = multiping(['10.0.0.5', '127.0.0.1', '::1'])\n\n>>> for host in hosts:\n...     if host.is_alive:\n...         # See the Host class for details\n...         print(f'{host.address} is alive!')\n...\n...     else:\n...         print(f'{host.address} is dead!')\n...\n\n# 10.0.0.5 is dead!\n# 127.0.0.1 is alive!\n# ::1 is alive!\n```\n\n<br>\n\n### Traceroute\nDetermine the route to a destination host.\n\nThe Internet is a large and complex aggregation of network hardware, connected together by gateways. Tracking the route one's packets follow can be difficult. This function utilizes the IP protocol time to live field and attempts to elicit an *ICMP TIME_EXCEEDED* response from each gateway along the path to some host.\n\n#### Definition\n```python\ntraceroute(address, count=3, interval=0.05, timeout=2, id=PID, max_hops=30, fast_mode=False)\n```\n\n#### Parameters\n- `address`\n\n  The destination IP address.\n\n  - Type: `str`\n\n- `count`\n\n  The number of ping to perform per hop.\n\n  - Type: `int`\n  - Default: 3\n\n- `interval`\n\n  The interval in seconds between sending each packet.\n\n  - Type: `int` or `float`\n  - Default: 0.05\n\n- `timeout`\n\n  The maximum waiting time for receiving a reply in seconds.\n\n  - Type: `int` or `float`\n  - Default: 2\n\n- `id`\n\n  The identifier of the request. Used to match the reply with the request.<br>\n  In practice, a unique identifier is used for every ping process.\n\n  - Type: `int`\n  - Default: `PID`\n\n- `max_hops`\n\n  The maximum time to live (max number of hops) used in outgoing probe packets.\n\n  - Type: `int`\n  - Default: 30\n\n- `fast_mode`\n\n  When this option is enabled and an intermediate router has been reached, skip to the next hop rather than perform additional requests. The `count` option then becomes the maximum number of requests in case of no responses.\n\n  - Type: `bool`\n  - Default: False\n\n#### Return value\n- `List of Hop`\n\n  A `list of Hop` objects representing the route to the desired host. A `Hop` is a `Host` object with an additional attribute: a `distance`. The list is sorted in ascending order according to the distance (in terms of hops) that separates the remote host from the current machine.\n\n#### Exceptions\n- `SocketPermissionError`\n\n  If the permissions are insufficient to create a socket.\n\n#### Example\n```python\n>>> hops = traceroute('1.1.1.1')\n\n>>> print('Distance (ttl)    Address    Average round-trip time')\n>>> last_distance = 0\n\n>>> for hop in hops:\n...     if last_distance + 1 != hop.distance:\n...         print('*** Some routers does not respond')\n...\n...     # See the Hop class for details\n...     print(f'{hop.distance}    {hop.address}    {hop.avg_rtt} ms')\n...\n...     last_distance = hop.distance\n...\n\n# Distance (ttl)    Address                 Average round-trip time\n# 1                 10.0.0.1                5.19 ms\n# 2                 194.149.169.49          7.55 ms\n# 3                 194.149.166.54          12.2 ms\n# ***               Some routers does not respond\n# 5                 212.73.205.22           22.1 ms\n# 6                 1.1.1.1                 13.5 ms\n```\n\n<br>\n\n## ICMP sockets\n\nIf you want to create your own functions and classes using the ICMP protocol, you can use the `ICMPv4Socket` (for IPv4) and the `ICMPv6Socket` (for IPv6 only). These classes have many methods and attributes in common. They manipulate `ICMPRequest` and `ICMPReply` objects.\n\n```\n                                      ┌─────────────────┐\n    ┌─────────────────┐   send(...)   │ ICMPSocket:     │   receive()   ┌─────────────────┐\n    │   ICMPRequest   │ ────────────> │ ICMPv4Socket or │ ────────────> │    ICMPReply    │\n    └─────────────────┘               │ ICMPv6Socket    │               └─────────────────┘\n                                      └─────────────────┘\n```\n\n### ICMPRequest\nA user-created class that represents an *ICMP ECHO_REQUEST*.\n\n#### Definition\n```python\nICMPRequest(destination, id, sequence, payload_size=56, timeout=2, ttl=64)\n```\n\n#### Parameters / Getters\n- `destination`\n\n  The IP address of the gateway or host to which the message should be sent.\n\n  - Type: `str`\n\n- `id`\n\n  The identifier of the request. Used to match the reply with the request.<br>\n  In practice, a unique identifier is used for every ping process.\n\n  - Type: `int`\n\n- `sequence`\n\n  The sequence number. Used to match the reply with the request.<br>\n  Typically, the sequence number is incremented for each packet sent during the process.\n\n  - Type: `int`\n\n- `payload_size`\n\n  The payload size in bytes.\n\n  - Type: `int`\n  - Default: 56\n\n- `timeout`\n\n  The maximum waiting time for receiving a reply in seconds.\n\n  - Type: `int` or `float`\n  - Default: 2\n\n- `ttl`\n\n  The time to live of the packet in seconds.\n\n  - Type: `int`\n  - Default: 64\n\n#### Getters only\n- `time`\n\n  The timestamp of the ICMP request. Initialized to zero when creating the request and replaced by `ICMPv4Socket` or `ICMPv6Socket` with the time of sending.\n\n  - Type: `float`\n\n<br>\n\n### ICMPReply\nA class that represents an ICMP reply. Generated from an ICMPSocket object (`ICMPv4Socket` or `ICMPv6Socket`).\n\n#### Definition\n```python\nICMPReply(source, id, sequence, type, code, received_bytes, time)\n```\n\n#### Parameters / Getters\n- `source`\n\n  The IP address of the gateway or host that composes the ICMP message.\n\n  - Type: `str`\n\n- `id`\n\n  The identifier of the request. Used to match the reply with the request.\n\n  - Type: `int`\n\n- `sequence`\n\n  The sequence number. Used to match the reply with the request.\n\n  - Type: `int`\n\n- `type`\n\n  The type of message.\n\n  - Type: `int`\n\n- `code`\n\n  The error code.\n\n  - Type: `int`\n\n- `received_bytes`\n\n  The number of bytes received.\n\n  - Type: `int`\n\n- `time`\n\n  The timestamp of the ICMP reply.\n\n  - Type: `float`\n\n#### Methods\n- `raise_for_status()`\n\n  Throw an exception if the reply is not an *ICMP ECHO_REPLY*.<br>\n  Otherwise, do nothing.\n\n  - Raises `ICMPv4DestinationUnreachable`: If the ICMPv4 reply is type 3.\n  - Raises `ICMPv4TimeExceeded`: If the ICMPv4 reply is type 11.\n  - Raises `ICMPv6DestinationUnreachable`: If the ICMPv6 reply is type 1.\n  - Raises `ICMPv6TimeExceeded`: If the ICMPv6 reply is type 3.\n  - Raises `ICMPError`: If the reply is of another type and is not an *ICMP ECHO_REPLY*.\n\n<br>\n\n### ICMPv4Socket\nSocket for sending and receiving ICMPv4 packets.\n\n#### Definition\n```python\nICMPv4Socket()\n```\n\n#### Methods\n- `__init__()`\n\n  *Constructor. Automatically called: do not call it directly.*\n\n  - Raises `SocketPermissionError`: If the permissions are insufficient to create the socket.\n\n- `__del__()`\n\n  *Destructor. Automatically called: do not call it directly.*\n\n  - Call the `close()` method.\n\n- `send(request)`\n\n  Send a request to a host.\n\n  This operation is non-blocking. Use the `receive()` method to get the reply.\n\n  - Parameter `ICMPRequest`: The ICMP request you have created.\n  - Raises `SocketBroadcastError`: If a broadcast address is used and the corresponding option is not enabled on the socket (ICMPv4 only).\n  - Raises `ICMPSocketError`: If another error occurs while sending.\n\n- `receive()`\n\n  Receive a reply from a host.\n\n  This method can be called multiple times if you expect several responses (as with a broadcast address).\n\n  - Raises `TimeoutExceeded`: If no response is received before the timeout defined in the request. This exception is also useful for stopping a possible loop in case of multiple responses.\n  - Raises `ICMPSocketError`: If another error occurs while receiving.\n  - Returns `ICMPReply`: An ICMPReply object containing the reply of the desired destination. See the ICMPReply class for details.\n\n- `close()`\n\n  Close the socket. It cannot be used after this call.\n\n#### Getters / Setters\n- `broadcast`\n\n  Enable or disable the broadcast support on the socket.\n\n  - Type: `bool`\n  - Default: False\n\n<br>\n\n### ICMPv6Socket\nSocket for sending and receiving ICMPv6 packets.\n\n```python\nICMPv6Socket()\n```\n\n#### Methods\nThe same methods as for the `ICMPv4Socket` class.\n\n<br>\n\n### Exceptions\nThe library contains many exceptions to adapt to your needs:\n\n```\nICMPLibError\n ├─ ICMPSocketError\n │  ├─ SocketPermissionError\n │  ├─ SocketBroadcastError\n │  └─ TimeoutExceeded\n │  \n └─ ICMPError\n    ├─ DestinationUnreachable\n    │  ├─ ICMPv4DestinationUnreachable\n    │  └─ ICMPv6DestinationUnreachable\n    │   \n    └─ TimeExceeded\n       ├─ ICMPv4TimeExceeded\n       └─ ICMPv6TimeExceeded\n```\n\n- `ICMPLibError`: Exception class for the icmplib package.\n- `ICMPSocketError`: Base class for ICMP sockets exceptions.\n- `SocketPermissionError`: Raised when the permissions are insufficient to create a socket.\n- `SocketBroadcastError`: Raised when a broadcast address is used and the corresponding option is not enabled on the socket.\n- `TimeoutExceeded`: Raised when a timeout occurs on a socket.\n- `ICMPError`: Base class for ICMP error messages.\n- `DestinationUnreachable`: Destination Unreachable message is generated by the host or its inbound gateway to inform the client that the destination is unreachable for some reason.\n- `TimeExceeded`: Time Exceeded message is generated by a gateway to inform the source of a discarded datagram due to the time to live field reaching zero. A Time Exceeded message may also be sent by a host if it fails to reassemble a fragmented datagram within its time limit.\n\nUse the `message` method (getter) to retrieve the error message.\n\n`ICMPError` subclasses have methods to retrieve the response (`reply` method) and the specific message of the error (`message` method).\n\n<br>\n\n### Examples\n#### Sockets in action\n```python\ndef single_ping(address, timeout=2, id=PID):\n    # Create an ICMP socket\n    socket = ICMPv4Socket()\n\n    # Create a request\n    # See the ICMPRequest class for details\n    request = ICMPRequest(\n        destination=address,\n        id=id,\n        sequence=1,\n        timeout=timeout)\n\n    try:\n        socket.send(request)\n\n        # If the program arrives in this section,\n        # it means that the packet has been transmitted\n\n        reply = socket.receive()\n\n        # If the program arrives in this section,\n        # it means that a packet has been received\n        # The reply has the same identifier and sequence number that\n        # the query but it can come from an intermediate gateway\n\n        reply.raise_for_status()\n\n        # If the program arrives in this section,\n        # it means that the destination host has responded to\n        # the request\n\n    except TimeoutExceeded as err:\n        # The timeout has been reached\n        # Equivalent to print(err.message)\n        print(err)\n\n    except DestinationUnreachable as err:\n        # The reply indicates that the destination host is\n        # unreachable\n        print(err)\n\n        # Retrieve the response\n        reply = err.reply\n\n    except TimeExceeded as err:\n        # The reply indicates that the time to live exceeded\n        # in transit\n        print(err)\n\n        # Retrieve the response\n        reply = err.reply\n\n    except ICMPLibError as err:\n        # All other errors\n        print(err)\n\n    # Automatic socket closure (garbage collector)\n```\n\n#### Verbose ping\n```python\ndef verbose_ping(address, count=4, interval=1, timeout=2, id=PID):\n    # ICMPRequest uses a payload of 56 bytes by default\n    # You can modify it with the payload_size parameter\n    print(f'PING {address}: 56 data bytes')\n\n    # Automatic detection of the socket to use\n    if is_ipv6_address(address):\n        socket = ICMPv6Socket()\n\n    else:\n        socket = ICMPv4Socket()\n\n    for sequence in range(count):\n        request = ICMPRequest(\n            destination=address,\n            id=id,\n            sequence=sequence,\n            timeout=timeout)\n\n        try:\n            socket.send(request)\n            reply = socket.receive()\n\n            print(f'{reply.received_bytes} bytes from '\n                  f'{reply.source}: ', end='')\n\n            reply.raise_for_status()\n            round_trip_time = (reply.time - request.time) * 1000\n\n            print(f'icmp_seq={sequence} '\n                  f'time={round(round_trip_time, 2)} ms')\n\n            if sequence < count - 1:\n                sleep(interval)\n\n        except TimeoutExceeded:\n            print(f'Request timeout for icmp_seq {sequence}')\n\n        except ICMPError as err:\n            print(err)\n\n        except ICMPLibError:\n            print('General failure...')\n\n\nverbose_ping('1.1.1.1')\n\n# PING 1.1.1.1: 56 data bytes\n# 64 bytes from 1.1.1.1: icmp_seq=0 time=10.41 ms\n# 64 bytes from 1.1.1.1: icmp_seq=1 time=7.56 ms\n# 64 bytes from 1.1.1.1: icmp_seq=2 time=11.81 ms\n# 64 bytes from 1.1.1.1: icmp_seq=3 time=10.75 ms\n```\n\n<br>\n\n## FAQ\n\n### How to resolve a FQDN / domain name?\nPython has a method to do this in its libraries:\n```python\n>>> import socket\n>>> socket.gethostbyname('github.com')\n'140.82.118.4'\n```\n\n## Contributing\n\nComments and enhancements are welcome.\n\nAll development is done on [GitHub](https://github.com/ValentinBELYN/icmplib). Use [Issues](https://github.com/ValentinBELYN/icmplib/issues) to report problems and submit feature requests. Please include a minimal example that reproduces the bug.\n\n## Donate\n\nicmplib is completely free and open source. It has been fully developed on my free time. If you enjoy it, please consider donating to support the development.\n\n- [:beer: Donate via PayPal](https://paypal.me/ValentinBELYN)\n\n## License\n\nCopyright 2017-2019 Valentin BELYN.\n\nCode released under the GNU LGPLv3 license. See the [LICENSE](LICENSE) for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ValentinBELYN/icmplib",
    "keywords": "pure,implementation,icmp,sockets,ping,multiping,traceroute,ipv4,ipv6,python3",
    "license": "GNU Lesser General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "icmplibv2",
    "package_url": "https://pypi.org/project/icmplibv2/",
    "platform": "",
    "project_url": "https://pypi.org/project/icmplibv2/",
    "project_urls": {
      "Homepage": "https://github.com/ValentinBELYN/icmplib"
    },
    "release_url": "https://pypi.org/project/icmplibv2/1.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Easily forge ICMP packets and make your own ping and traceroute.",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8179266,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e90dc497075cce0b72aa76631f64f164e699fede0a9ac1e75eeef59104fa27ed",
          "md5": "3507bb3b64fe92e4e5dd9a0b58250c0c",
          "sha256": "5381224b7b973b8528e2165c74886122161d5161d7f610724697f9ac648ff778"
        },
        "downloads": -1,
        "filename": "icmplibv2-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3507bb3b64fe92e4e5dd9a0b58250c0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24900,
        "upload_time": "2020-04-22T11:16:20",
        "upload_time_iso_8601": "2020-04-22T11:16:20.296973Z",
        "url": "https://files.pythonhosted.org/packages/e9/0d/c497075cce0b72aa76631f64f164e699fede0a9ac1e75eeef59104fa27ed/icmplibv2-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78c12c772ccf61eda4be38050561bcdee7ae1a86c4dcd8ad3ee8487ce4452a5f",
          "md5": "9b749130ea4dd6ae83aeabfa23034dca",
          "sha256": "c48a3b2a652bcc0c66815ab68960b4c57fdc24ec21c7a5d47f6966dbcc927ffa"
        },
        "downloads": -1,
        "filename": "icmplibv2-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9b749130ea4dd6ae83aeabfa23034dca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21685,
        "upload_time": "2020-04-22T11:16:23",
        "upload_time_iso_8601": "2020-04-22T11:16:23.790719Z",
        "url": "https://files.pythonhosted.org/packages/78/c1/2c772ccf61eda4be38050561bcdee7ae1a86c4dcd8ad3ee8487ce4452a5f/icmplibv2-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27ab7e8f49282eb03ffa0d16d82ba95fc6510a2953c7ed347ef5bf2d86ba990e",
          "md5": "c58e9db4d2335278687e844a27e8ab8f",
          "sha256": "0ffcadc8a488535a2fff57197fe637820a14af8285e9b53b3a8f153dc7b31d67"
        },
        "downloads": -1,
        "filename": "icmplibv2-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c58e9db4d2335278687e844a27e8ab8f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24897,
        "upload_time": "2020-09-14T06:58:32",
        "upload_time_iso_8601": "2020-09-14T06:58:32.957453Z",
        "url": "https://files.pythonhosted.org/packages/27/ab/7e8f49282eb03ffa0d16d82ba95fc6510a2953c7ed347ef5bf2d86ba990e/icmplibv2-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95fd555afce02c6e8ab6fe098fb894681693d665ac46368da87c5583fab7c5c3",
          "md5": "e2110e12ff0586a6ef63bd35bf6905d6",
          "sha256": "bc147a1b6ea12b9f33a27e540fda1c0ae7249d406ac0f7a2b78b63ee39ea87cc"
        },
        "downloads": -1,
        "filename": "icmplibv2-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e2110e12ff0586a6ef63bd35bf6905d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24612,
        "upload_time": "2020-09-14T06:58:34",
        "upload_time_iso_8601": "2020-09-14T06:58:34.690911Z",
        "url": "https://files.pythonhosted.org/packages/95/fd/555afce02c6e8ab6fe098fb894681693d665ac46368da87c5583fab7c5c3/icmplibv2-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27ab7e8f49282eb03ffa0d16d82ba95fc6510a2953c7ed347ef5bf2d86ba990e",
        "md5": "c58e9db4d2335278687e844a27e8ab8f",
        "sha256": "0ffcadc8a488535a2fff57197fe637820a14af8285e9b53b3a8f153dc7b31d67"
      },
      "downloads": -1,
      "filename": "icmplibv2-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c58e9db4d2335278687e844a27e8ab8f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24897,
      "upload_time": "2020-09-14T06:58:32",
      "upload_time_iso_8601": "2020-09-14T06:58:32.957453Z",
      "url": "https://files.pythonhosted.org/packages/27/ab/7e8f49282eb03ffa0d16d82ba95fc6510a2953c7ed347ef5bf2d86ba990e/icmplibv2-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95fd555afce02c6e8ab6fe098fb894681693d665ac46368da87c5583fab7c5c3",
        "md5": "e2110e12ff0586a6ef63bd35bf6905d6",
        "sha256": "bc147a1b6ea12b9f33a27e540fda1c0ae7249d406ac0f7a2b78b63ee39ea87cc"
      },
      "downloads": -1,
      "filename": "icmplibv2-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "e2110e12ff0586a6ef63bd35bf6905d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24612,
      "upload_time": "2020-09-14T06:58:34",
      "upload_time_iso_8601": "2020-09-14T06:58:34.690911Z",
      "url": "https://files.pythonhosted.org/packages/95/fd/555afce02c6e8ab6fe098fb894681693d665ac46368da87c5583fab7c5c3/icmplibv2-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}