{
  "info": {
    "author": "y19818",
    "author_email": "y19818@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Web3.py\n\n[![Join the chat at https://gitter.im/vnscoin/web3.py](https://badges.gitter.im/vnscoin/web3.py.svg)](https://gitter.im/vnscoin/web3.py?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://circleci.com/gh/vnscoin/web3.py.svg?style=shield)](https://circleci.com/gh/vnscoin/web3.py)\n\n\nA Python implementation of [web3.js](https://github.com/vnscoin/web3.js)\n\n* Python 3.6+ support\n\n## Developer Setup\n\n```sh# Web3.py\n\n[![Join the chat at https://gitter.im/vnscoin/web3.py](https://badges.gitter.im/vnscoin/web3.py.svg)](https://gitter.im/vnscoin/web3.py?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://circleci.com/gh/vnscoin/web3.py.svg?style=shield)](https://circleci.com/gh/vnscoin/web3.py)\n\n\nA Python implementation of [web3.js](https://github.com/vnscoin/web3.js)\n\n* Python 3.6+ support\n\n## Developer Setup\n\n```sh\ngit clone git@github.com:vnscoin/web3.py.git\ncd web3.py\n```\n\nPlease see OS-specific instructions for:\n\n- [Linux](docs/README-linux.md#Developer-Setup)\n- [Mac](docs/README-osx.md#Developer-Setup)\n- [Windows](docs/README-windows.md#Developer-Setup)\n\nThen run these install commands:\n```sh\nvirtualenv venv\n. venv/bin/activate\npip install -e .[dev]\n```\n\nFor different environments, you can set up multiple `virtualenv`. For example, if you want to create a `venvdocs`, then you do the following:\n\n```sh\nvirtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .[docs]\npip install -e .\n```\n\n\n\n#### How to Execute the Tests?\n\n1. [Setup your development environment](https://github.com/vnscoin/web3.py/#developer-setup).\n\n2. Execute `tox` for the tests\n\nThere are multiple [components](https://github.com/vnscoin/web3.py/blob/master/.circleci/config.yml#L144) of the tests. You can run test to against specific component. For example:\n\n```sh\n# Run Tests for the Core component (for Python 3.6):\ntox -e py36-core\n\n# Run Tests for the Core component (for Python 3.7):\ntox -e py37-core\n```\n\nIf for some reason it is not working, add `--recreate` params.\n\n`tox` is good for testing against the full set of build targets. But if you want to run the tests individually, `pytest` is better for development workflow. For example, to run only the tests in one file:\n\n```sh\npytest tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n```\n\n### Release setup\n\nFor Debian-like systems:\n```\napt install pandoc\n```\n\nTo release a new version:\n\n```sh\nmake release bump=$$VERSION_PART_TO_BUMP$$\n```\n\nTo preview the upcoming release notes:\n\n```sh\ntowncrier --draft\n```\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`.\n\nIf you are in a beta version, `make release bump=stage` will switch to a stable.\n\nTo issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 4.0.0-alpha.1 devnum\"`\n\ngit clone git@github.com:vnscoin/web3.py.git\ncd web3.py\n```\n\nPlease see OS-specific instructions for:\n\n- [Linux](docs/README-linux.md#Developer-Setup)\n- [Mac](docs/README-osx.md#Developer-Setup)\n- [Windows](docs/README-windows.md#Developer-Setup)\nThen run these install commands:\n\n```sh\nvirtualenv venv\n. venv/bin/activate\npip install -e .[dev]\n```\n\nFor different environments, you can set up multiple `virtualenv`. For example, if you want to create a `venvdocs`, then you do the following:\n\n```sh\nvirtualenv venvdocs\n. venvdocs/bin/activate\npip install -e .[docs]\npip install -e .\n```\n\n\n\n#### How to Execute the Tests?\n\n1. [Setup your development environment](https://github.com/vnscoin/web3.py/#developer-setup).\n\n2. Execute `tox` for the tests\n\nThere are multiple [components](https://github.com/vnscoin/web3.py/blob/master/.circleci/config.yml#L144) of the tests. You can run test to against specific component. For example:\n\n```sh\n# Run Tests for the Core component (for Python 3.6):\ntox -e py36-core\n\n# Run Tests for the Core component (for Python 3.7):\ntox -e py37-core\n```\n\nIf for some reason it is not working, add `--recreate` params.\n\n`tox` is good for testing against the full set of build targets. But if you want to run the tests individually, `pytest` is better for development workflow. For example, to run only the tests in one file:\n\n```sh\npytest tests/core/gas-strategies/test_time_based_gas_price_strategy.py\n```\n\n### Release setup\n\nFor Debian-like systems:\n```\napt install pandoc\n```\n\nTo release a new version:\n\n```sh\nmake release bump=$$VERSION_PART_TO_BUMP$$\n```\n\nTo preview the upcoming release notes:\n\n```sh\ntowncrier --draft\n```\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`.\n\nIf you are in a beta version, `make release bump=stage` will switch to a stable.\n\nTo issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 4.0.0-alpha.1 devnum\"`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/y19818/vns_web3.py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vns-web3",
    "package_url": "https://pypi.org/project/vns-web3/",
    "platform": "",
    "project_url": "https://pypi.org/project/vns-web3/",
    "project_urls": {
      "Homepage": "https://github.com/y19818/vns_web3.py"
    },
    "release_url": "https://pypi.org/project/vns-web3/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "vns web3.pyl",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6354515,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4b23c3c55ce8d5cbaa0e09937e6539bbe92a39ab4c7e340f61eaee9c407c1e8",
          "md5": "6b476380d519df34cd2e71be82c1032c",
          "sha256": "abe72dd3fb37ecb867ad4027a3db83d8c740256e6a98225d3fd57379b1c59df7"
        },
        "downloads": -1,
        "filename": "vns_web3-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b476380d519df34cd2e71be82c1032c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 179635,
        "upload_time": "2019-12-24T08:51:01",
        "upload_time_iso_8601": "2019-12-24T08:51:01.172676Z",
        "url": "https://files.pythonhosted.org/packages/d4/b2/3c3c55ce8d5cbaa0e09937e6539bbe92a39ab4c7e340f61eaee9c407c1e8/vns_web3-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3497663a8f059ba2abb58d1ac079c4b16cb83fb2d2b1399484ac8567fc91ba91",
          "md5": "8aa48e7967f37d2968485a93892888e8",
          "sha256": "350a9fdcf6ba2200e765eb9f50fe78696856a414bec1a5a78d90251ae10e9843"
        },
        "downloads": -1,
        "filename": "vns_web3-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8aa48e7967f37d2968485a93892888e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 182285,
        "upload_time": "2019-12-24T09:21:27",
        "upload_time_iso_8601": "2019-12-24T09:21:27.635384Z",
        "url": "https://files.pythonhosted.org/packages/34/97/663a8f059ba2abb58d1ac079c4b16cb83fb2d2b1399484ac8567fc91ba91/vns_web3-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3497663a8f059ba2abb58d1ac079c4b16cb83fb2d2b1399484ac8567fc91ba91",
        "md5": "8aa48e7967f37d2968485a93892888e8",
        "sha256": "350a9fdcf6ba2200e765eb9f50fe78696856a414bec1a5a78d90251ae10e9843"
      },
      "downloads": -1,
      "filename": "vns_web3-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8aa48e7967f37d2968485a93892888e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 182285,
      "upload_time": "2019-12-24T09:21:27",
      "upload_time_iso_8601": "2019-12-24T09:21:27.635384Z",
      "url": "https://files.pythonhosted.org/packages/34/97/663a8f059ba2abb58d1ac079c4b16cb83fb2d2b1399484ac8567fc91ba91/vns_web3-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}