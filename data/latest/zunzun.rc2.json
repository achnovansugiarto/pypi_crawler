{
  "info": {
    "author": "Renier Ricardo Figueredo",
    "author_email": "aprezcuba24@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Zunzun Framework\n\nZunzun is a Python framework that uses other libraries to implement its features. Ones of them are:\n\n- [injector](https://pypi.org/project/injector/) It's used to Dependency Injection.\n- [click](https://pypi.org/project/click/) For creating commands line interface.\n- [blinker](https://pypi.org/project/blinker/) Provides a fast dispatching system.\n- [SQLAlchemy](https://pypi.org/project/SQLAlchemy/) The Python SQL Toolkit and Object Relational Mapper.\n\n## Create an application\n\n1. Clone the example application from https://github.com/aprezcuba24/zunzun_app\n2. Create .env file base on .env.example\n    - Configure database configuration\n3. You can use vscode to open the application in a container.\n4. Star the application using this command.\n```\npython manage.py core runserver\n```\n5. Open the browser in this url `http://localhost:8001/`\n\n## Controller\nWe can create two types of controller, a function controller, or a class controller.\n\n### Function controller\n\n```python\nfrom main import router\n\n\n@router.post(\"/\")\ndef register():\n    return \"Register\"\n```\n\n### Class controller\nTo create a class controller we can use the following command\n\n```\npython zunzun.py maker controller Role --route=\"/role\"\n```\n\nWhere \"Role\" will be the name of the controller and \"/role\" the path to access the controller.\n\nThe command will generate the file `app/controllers/role.py`\n\n```python\nfrom zunzun import Response\nfrom main import router\n\nclass RoleController:\n    @router.get('/role')\n    def index(self):\n        return \"RoleController Index\"\n```\nIn the class controller or in the function controller we can inject dependencies.\nFor example, if we have a service named \"PaypalService\" we can inject it, with the following code.\n```python\nfrom main import router\nfrom app.services import PaypalService\n\n\n@router.post(\"/\")\ndef register(paypal: PaypalService):\n    paypal.call_a_method()\n    return \"Register\"\n```\nIn a controller class, we can inject dependencies in the constructor or in any function.\n```python\nfrom zunzun import Response\nfrom main import router\nfrom app.services import PaypalService, SomeService\n\nclass RoleController:\n    def __init__(self, some_service: SomeService):\n        self.some_service = some_service\n\n    @router.get('/role')\n    def index(self, paypal: PaypalService):\n        return \"RoleController Index\"\n```\n## Commands\nCommands allow us to implement command line features. To do that we can use the following command.\n```\npython manager.py maker command role\n```\nWhere \"role\" will be the name of the command. This command will create the following file `app/commands/role.py`.\n```python\nimport click\nfrom injector import singleton, inject\nfrom zunzun import Command\n\n\n@singleton\nclass roleCommand(Command):\n    @inject\n    def __init__(self):\n        super().__init__(\"role\")\n        self.add_option(\"--some-option\")\n        self.add_argument(\"some-argument\")\n\n    def handle(self, some_option, some_argument):\n        click.echo(\n            f\"roleCommand [some_argument: {some_argument}] [some_option: {some_option}]\"\n        )\n```\nTo use the new command we can type the following in the console.\n```\npython manager.py app role \"An argument value\" --some-option=\"An option value\"\n```\n## Listener\nThe listener allows us to implement the Event-Dispatcher pattern. To create a new listener with its signal we can use the following command.\n```\npython manager.py maker listener Role Role\n```\nWhere the first word \"Role\" will be the listener name and the second will be the signal name.\nThe command will generate the following files:\n\n- Signal file `app/signals/role.py`\n- Listener file `app/listeners/role.py`\n\nThe signal file will have this code.\n```python\nfrom zunzun import Signal\nfrom injector import singleton\n\n\n@singleton\nclass RoleSignal(Signal):\n    pass\n```\nThe listener file will have this code.\n```python\nfrom injector import singleton\n\n\n@singleton\nclass RoleListener:\n    def __call__(self, sender, **kwargs):\n        pass\n```\n## Services\nWe can create classes to implement any logic that we need. For example to create a service to integrate Paypal we can use the following command.\n```\npython manager.py maker service Paypal\n```\nThe command will create the file `app/services/paypal.py` with the following code.\n```python\nfrom injector import singleton, inject\n\n\n@singleton\nclass PaypalService:\n    @inject\n    def __init__(self):\n        pass\n```\n## ORM\nZunzun uses **SQLAlchemy** to implement the ORM features. The framework uses two type of classes.\n\n- The model represents a single row in the database.\n- The repository is a class to implement the queries to the database.\n\nTo create the model and its repository we can use the following command.\n```\npython manager.py orm model_create Role\n```\nThe model will be\n```python\nfrom zunzun import orm\nfrom sqlalchemy import Column, Integer\n\n\nclass Role(orm.BaseModel):\n    __tablename__ = \"Role\"\n    id = Column(Integer, primary_key=True)\n```\nThe repository will be\n```python\nfrom injector import singleton\nfrom zunzun import orm\nfrom app.model import Role\n\n\n@singleton\nclass RoleRepository(orm.BaseRepository):\n    def new(self, **kwargs):\n        return Role(**kwargs)\n```\n## Dependency injection\nThe framework uses this pattern to manage dependencies. To know how you can use see the documentation on [inject](https://pypi.org/project/injector/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aprezcuba24/zunzun",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zunzun",
    "package_url": "https://pypi.org/project/zunzun/",
    "platform": "",
    "project_url": "https://pypi.org/project/zunzun/",
    "project_urls": {
      "Homepage": "https://github.com/aprezcuba24/zunzun"
    },
    "release_url": "https://pypi.org/project/zunzun/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A python framework to create api applications.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7972223,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da966845eff6ae7502a9b13eaf1ead81f22925cd0ac80a6b006b6c31b6e14fea",
          "md5": "8164be6358c9e99f49b7ca81bf4488d9",
          "sha256": "792bb676d007dcf00e64a698418ded7fa88b3761112a8547a321729756abd03c"
        },
        "downloads": -1,
        "filename": "zunzun-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8164be6358c9e99f49b7ca81bf4488d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21486,
        "upload_time": "2020-06-14T16:54:18",
        "upload_time_iso_8601": "2020-06-14T16:54:18.650040Z",
        "url": "https://files.pythonhosted.org/packages/da/96/6845eff6ae7502a9b13eaf1ead81f22925cd0ac80a6b006b6c31b6e14fea/zunzun-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad7b1f9b0f778c3084ec60edfe933d90ffa0a3dd158a820d20350620464deba6",
          "md5": "b8ba935da131a75025c3babde829c807",
          "sha256": "811411369fc5bf5f9434ed7f30096318a0c6c152d919448fcfb319f4d83e717e"
        },
        "downloads": -1,
        "filename": "zunzun-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8ba935da131a75025c3babde829c807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11847,
        "upload_time": "2020-06-14T16:54:21",
        "upload_time_iso_8601": "2020-06-14T16:54:21.497513Z",
        "url": "https://files.pythonhosted.org/packages/ad/7b/1f9b0f778c3084ec60edfe933d90ffa0a3dd158a820d20350620464deba6/zunzun-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ea5b1c5bec45e3986ff0e5f9b64cace3d5eb61f3f7a32e2042ebde96d851e13",
          "md5": "601e9b034b66fc5f66ac636af749741a",
          "sha256": "19f2a70463da2be4c95b5341a553c50f8873746d23b30e04cd1271fd62db35c0"
        },
        "downloads": -1,
        "filename": "zunzun-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "601e9b034b66fc5f66ac636af749741a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21765,
        "upload_time": "2020-08-16T15:29:58",
        "upload_time_iso_8601": "2020-08-16T15:29:58.833029Z",
        "url": "https://files.pythonhosted.org/packages/1e/a5/b1c5bec45e3986ff0e5f9b64cace3d5eb61f3f7a32e2042ebde96d851e13/zunzun-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13220a94b65fd497e0a445dc02e8d3d75f3de954b6883259744b73a5a7a3bec8",
          "md5": "f4a145b6cb807e005442be08492e6ff8",
          "sha256": "75f51fe43f0f58b217662708c3376d42753ba11c8435e8a9ff2a21d776b1c3f8"
        },
        "downloads": -1,
        "filename": "zunzun-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f4a145b6cb807e005442be08492e6ff8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12111,
        "upload_time": "2020-08-16T15:30:00",
        "upload_time_iso_8601": "2020-08-16T15:30:00.510350Z",
        "url": "https://files.pythonhosted.org/packages/13/22/0a94b65fd497e0a445dc02e8d3d75f3de954b6883259744b73a5a7a3bec8/zunzun-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ea5b1c5bec45e3986ff0e5f9b64cace3d5eb61f3f7a32e2042ebde96d851e13",
        "md5": "601e9b034b66fc5f66ac636af749741a",
        "sha256": "19f2a70463da2be4c95b5341a553c50f8873746d23b30e04cd1271fd62db35c0"
      },
      "downloads": -1,
      "filename": "zunzun-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "601e9b034b66fc5f66ac636af749741a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21765,
      "upload_time": "2020-08-16T15:29:58",
      "upload_time_iso_8601": "2020-08-16T15:29:58.833029Z",
      "url": "https://files.pythonhosted.org/packages/1e/a5/b1c5bec45e3986ff0e5f9b64cace3d5eb61f3f7a32e2042ebde96d851e13/zunzun-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13220a94b65fd497e0a445dc02e8d3d75f3de954b6883259744b73a5a7a3bec8",
        "md5": "f4a145b6cb807e005442be08492e6ff8",
        "sha256": "75f51fe43f0f58b217662708c3376d42753ba11c8435e8a9ff2a21d776b1c3f8"
      },
      "downloads": -1,
      "filename": "zunzun-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f4a145b6cb807e005442be08492e6ff8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12111,
      "upload_time": "2020-08-16T15:30:00",
      "upload_time_iso_8601": "2020-08-16T15:30:00.510350Z",
      "url": "https://files.pythonhosted.org/packages/13/22/0a94b65fd497e0a445dc02e8d3d75f3de954b6883259744b73a5a7a3bec8/zunzun-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}