{
  "info": {
    "author": "Anserini Gaggle",
    "author_email": "anserini.gaggle@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: Speech"
    ],
    "description": "# Howl\n\n[![PyPI](https://img.shields.io/pypi/v/howl?color=brightgreen)](https://pypi.org/project/howl/)\n[![License: MPL 2.0](https://img.shields.io/badge/License-MPL%202.0-brightgreen.svg)](https://opensource.org/licenses/MPL-2.0)\n\nWake word detection modeling for Firefox Voice, supporting open datasets like Google Speech Commands and Mozilla Common Voice.\n\nCitation:\n\n```\n@inproceedings{tang-etal-2020-howl,\n    title = \"Howl: A Deployed, Open-Source Wake Word Detection System\",\n    author = \"Tang, Raphael and Lee, Jaejun and Razi, Afsaneh and Cambre, Julia and Bicking, Ian and Kaye, Jofish and Lin, Jimmy\",\n    booktitle = \"Proceedings of Second Workshop for NLP Open Source Software (NLP-OSS)\",\n    month = nov,\n    year = \"2020\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://www.aclweb.org/anthology/2020.nlposs-1.9\",\n    doi = \"10.18653/v1/2020.nlposs-1.9\",\n    pages = \"61--65\"\n}\n```\n\n## Quickstart Guide\n\n1. Install PyAudio and [PyTorch 1.5+](https://pytorch.org) through your distribution's package system.\n\n2. Install Howl using `pip`\n\n```\npip install howl\n```\n\n3. To immediately use a pre-trained Howl model for inference, we provide the `client` API. The following example (also found under `examples/hey_fire_fox.py`) loads the \"hey_fire_fox\" pretrained model with a simple callback and starts the inference client.\n\n```\nfrom howl.client import HowlClient\n\ndef hello_callback(detected_words):\n    print(\"Detected: {}\".format(detected_words))\n\nclient = HowlClient()\nclient.from_pretrained(\"hey_fire_fox\", force_reload=False)\nclient.add_listener(hello_callback)\nclient.start().join()\n```\n\n## Training Guide\n\n### Installation\n\n1. `git clone https://github.com/castorini/howl && cd howl`\n\n2. Install [PyTorch](https://pytorch.org) by following your platform-specific instructions.\n\n3. Install PyAudio and its dependencies through your distribution's package system.\n\n4. `pip install -r requirements.txt -r requirements_training.txt` (some apt packages might need to be installed)\n\n### Preparing a Dataset\n\nIn the example that follows, we describe how to train a custom detector for the word, \"fire.\"\n\n1. Download a supported data source. We recommend [Common Voice](https://commonvoice.mozilla.org/) for its breadth and free license.\n2. To provide alignment for the data, install [Montreal Forced Aligner](https://montreal-forced-aligner.readthedocs.io/en/latest/installation.html) (MFA)\nand download an [English pronunciation dictionary](http://svn.code.sf.net/p/cmusphinx/code/trunk/cmudict/cmudict-0.7b).\n3. Create a positive dataset containing the keyword:\n```bash\nVOCAB='[\"fire\"]' INFERENCE_SEQUENCE=[0] DATASET_PATH=data/fire-positive python -m howl_training.run.create_raw_dataset --negative-pct 0 -i ~/path/to/common-voice --positive-pct 100\n```\n\n4. Create a negative dataset without the keyword:\n\n```bash\nVOCAB='[\"fire\"]' INFERENCE_SEQUENCE=[0] DATASET_PATH=data/fire-negative python -m howl_training.run.create_raw_dataset --negative-pct 5 -i ~/path/to/common-voice --positive-pct 0\n```\n\n5. Generate some mock alignment for the negative set, where we don't care about alignment:\n\n```bash\nDATASET_PATH=data/fire-negative python -m howl_training.run.attach_alignment --align-type stub\n```\n\n6. Use MFA to generate alignment for the positive set:\n\n```bash\nmfa_align data/fire-positive/audio eng.dict pretrained_models/english.zip output-folder\n```\n\n7. Attach the MFA alignment to the positive dataset:\n\n```bash\nDATASET_PATH=data/fire-positive python -m howl_training.run.attach_alignment --align-type mfa -i output-folder\n```\n\n### Training and Running a Model\n\n1. Source the relevant environment variables for training the `res8` model: `source envs/res8.env`.\n2. Train the model: `python -m howl_training.run.train -i data/fire-negative data/fire-positive --model res8 --workspace workspaces/fire-res8`.\n3. For the CLI demo, run `python -m howl_training.run.demo --model res8 --workspace workspaces/fire-res8`.\n\n### Pretrained Models\n\n[howl-models](https://github.com/castorini/howl-models) contains workspaces with pretrained models\n\nTo get the latest models, simply run `git submodule update --init --recursive`\n\n- [hey firefox](https://github.com/castorini/howl-models/tree/master/howl/hey-fire-fox)\n\n```bash\nVOCAB='[\" hey\",\"fire\",\"fox\"]' INFERENCE_SEQUENCE=[0,1,2] INFERENCE_THRESHOLD=0 NUM_MELS=40 MAX_WINDOW_SIZE_SECONDS=0.5 python -m howl_training.run.demo --model res8 --workspace howl-models/howl/hey-fire-fox\n```\n\n## Reproducing Paper Results\n\nFirst, follow the installation instructions in the quickstart guide.\n\n### Google Speech Commands\n\n1. Download [the Google Speech Commands dataset](https://ai.googleblog.com/2017/08/launching-speech-commands-dataset.html) and extract it.\n2. Source the appropriate environment variables: `source envs/res8.env`\n3. Set the dataset path to the root folder of the Speech Commands dataset: `export DATASET_PATH=/path/to/dataset`\n4. Train the `res8` model: `NUM_EPOCHS=20 MAX_WINDOW_SIZE_SECONDS=1 VOCAB='[\"yes\",\"no\",\"up\",\"down\",\"left\",\"right\",\"on\",\"off\",\"stop\",\"go\"]' BATCH_SIZE=64 LR_DECAY=0.8 LEARNING_RATE=0.01 python -m howl_training.run.pretrain_gsc --model res8`\n\n### Hey Firefox\n\n1. Download [the Hey Firefox corpus](https://nlp.nyc3.digitaloceanspaces.com/hey-ff-data.zip), licensed under CC0, and extract it.\n2. Download [our noise dataset](https://nlp.nyc3.digitaloceanspaces.com/hey-ff-noise.zip), built from Microsoft SNSD and MUSAN, and extract it.\n3. Source the appropriate environment variables: `source envs/res8.env`\n4. Set the noise dataset path to the root folder: `export NOISE_DATASET_PATH=/path/to/snsd`\n5. Set the firefox dataset path to the root folder: `export DATASET_PATH=/path/to/hey_firefox`\n6. Train the model: `LR_DECAY=0.98 VOCAB='[\" hey\",\"fire\",\"fox\"]' USE_NOISE_DATASET=True BATCH_SIZE=16 INFERENCE_THRESHOLD=0 NUM_EPOCHS=300 NUM_MELS=40 INFERENCE_SEQUENCE=[0,1,2] MAX_WINDOW_SIZE_SECONDS=0.5 python -m howl_training.run.train --model res8 --workspace workspaces/hey-ff-res8`\n\n### Hey Snips\n\n1. Download [hey snips dataset](https://github.com/sonos/keyword-spotting-research-datasets)\n2. Process the dataset to a format howl can load\n\n```bash\nVOCAB='[\"hey\",\"snips\"]' INFERENCE_SEQUENCE=[0,1] DATASET_PATH=data/hey-snips python -m howl_training.run.create_raw_dataset --dataset-type 'hey-snips' -i ~/path/to/hey_snips_dataset\n```\n\n3. Generate some mock alignment for the dataset, where we don't care about alignment:\n\n```bash\nDATASET_PATH=data/hey-snips python -m howl_training.run.attach_alignment --align-type stub\n```\n\n4. Use MFA to generate alignment for the dataset set:\n\n```bash\nmfa_align data/hey-snips/audio eng.dict pretrained_models/english.zip output-folder\n```\n\n5. Attach the MFA alignment to the dataset:\n\n```bash\nDATASET_PATH=data/hey-snips python -m howl_training.run.attach_alignment --align-type mfa -i output-folder\n```\n\n6. Source the appropriate environment variables: `source envs/res8.env`\n7. Set the noise dataset path to the root folder: `export NOISE_DATASET_PATH=/path/to/snsd`\n8. Set the noise dataset path to the root folder: `export DATASET_PATH=/path/to/hey-snips`\n9. Train the model: `LR_DECAY=0.98 VOCAB='[\" hey\",\"snips\"]' USE_NOISE_DATASET=True BATCH_SIZE=16 INFERENCE_THRESHOLD=0 NUM_EPOCHS=300 NUM_MELS=40 INFERENCE_SEQUENCE=[0,1] MAX_WINDOW_SIZE_SECONDS=0.5 python -m howl_training.run.train --model res8 --workspace workspaces/hey-snips-res8`\n\n### Generating dataset for Mycroft-precise\n\nhowl also provides a script for transforming howl dataset to [mycroft-precise](https://github.com/MycroftAI/mycroft-precise) dataset\n```bash\nVOCAB='[\" hey\",\"fire\",\"fox\"]' INFERENCE_SEQUENCE=[0,1,2] python -m howl_training.run.generate_precise_dataset --dataset-path /path/to/howl_dataset\n```\n\n## Experiments\n\nTo verify the correctness of our implementation, we first train and evaluate our models on the Google Speech Commands dataset, for which there exists many known results. Next, we curate a wake word detection datasets and report our resulting model quality.\n\nFor both experiments, we generate reports in excel format. [experiments](https://github.com/castorini/howl/tree/master/experiments) folder includes sample outputs from the for each experiment and corresponding workspaces can be found [here](https://github.com/castorini/howl-models/tree/master/howl/experiments)\n\n### commands_recognition\n\nFor command recognition, we train the four different models (res8, LSTM, LAS encoder, MobileNetv2) to detect twelve different keywords: “yes”, “no”, “up”, “down”, “left”, “right”, “on”, “off”, “stop”, “go”, unknown, or silence.\n\n```bash\npython -m howl_training.run.eval_commands_recognition --num_iterations n --dataset_path < path_to_gsc_datasets >\n```\n\n### word_detection\n\nIn this experiment, we train our best commands recognition model, res8, for `hey firefox` and `hey snips` and evaluate them with different threashold.\n\nTwo different performance reports are generated, one with the clean audio and one with audios with noise\n\n```bash\npython -m howl_training.run.eval_wake_word_detection --num_models n --hop_size < number between 0 and 1 > --exp_type < hey_firefox | hey_snips > --dataset_path \"x\" --noiseset_path \"y\"\n```\n\nWe also provide a script for generating ROC curve. `exp_timestamp` can be found from the reports generated from previous command\n\n```bash\npython -m howl_training.run.generate_roc --exp_timestamp < experiment timestamp > --exp_type < hey_firefox | hey_snips >\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/castorini/howl",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "howl",
    "package_url": "https://pypi.org/project/howl/",
    "platform": "",
    "project_url": "https://pypi.org/project/howl/",
    "project_urls": {
      "Homepage": "https://github.com/castorini/howl"
    },
    "release_url": "https://pypi.org/project/howl/0.1.2/",
    "requires_dist": [
      "coloredlogs",
      "librosa (>=0.8.0)",
      "numpy (>=1.18.3)",
      "pandas (>=1.0.3)",
      "pocketsphinx",
      "pyaudio",
      "pydantic (>=1.7.3)",
      "soundfile (==0.10.3.post1)",
      "tensorboard",
      "tqdm",
      "torch (>=1.5.0)",
      "torchaudio (>=0.5.0)",
      "torchvision (>=0.6.0)",
      "dataclasses ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "A wake word detection toolkit",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9436488,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9051b9de87bb5281a8ffe7ee1f034c5d882ab67622ba1b8fdacd7347752acf3f",
          "md5": "7f346bfac93d575775ff787f10d4a405",
          "sha256": "98dfaa9302fcc91de8aa6c9a9558e80306388c5bc8d4936267e7b38f4d5ee3c8"
        },
        "downloads": -1,
        "filename": "howl-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f346bfac93d575775ff787f10d4a405",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45201,
        "upload_time": "2021-02-11T03:38:02",
        "upload_time_iso_8601": "2021-02-11T03:38:02.727651Z",
        "url": "https://files.pythonhosted.org/packages/90/51/b9de87bb5281a8ffe7ee1f034c5d882ab67622ba1b8fdacd7347752acf3f/howl-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7be6580bea991096cad7ba0cd6d9fc4ee0e4dc82ae7840fc9368b78e50c6686",
          "md5": "94faccc433b19fcf9bd20ceb66d61acd",
          "sha256": "8d406dc379d6d95c8260466318d39b2acbc84ad10d9cc0bae99fcabf1d6a06ce"
        },
        "downloads": -1,
        "filename": "howl-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94faccc433b19fcf9bd20ceb66d61acd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34481,
        "upload_time": "2021-02-11T03:38:04",
        "upload_time_iso_8601": "2021-02-11T03:38:04.284977Z",
        "url": "https://files.pythonhosted.org/packages/f7/be/6580bea991096cad7ba0cd6d9fc4ee0e4dc82ae7840fc9368b78e50c6686/howl-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb1e89987301a46dfcc632a3a20302dad5c869f10ee1cc45b45e60bca6099777",
          "md5": "e37a45e886e930087749c236c42b45cc",
          "sha256": "c8b37a302accbab04bfd9a60560a862cc94ed2ca02c67c131ae6e2238e3a21c8"
        },
        "downloads": -1,
        "filename": "howl-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e37a45e886e930087749c236c42b45cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45221,
        "upload_time": "2021-02-11T20:49:12",
        "upload_time_iso_8601": "2021-02-11T20:49:12.574561Z",
        "url": "https://files.pythonhosted.org/packages/eb/1e/89987301a46dfcc632a3a20302dad5c869f10ee1cc45b45e60bca6099777/howl-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ece2fdb9eea3f3cf3ee7ceeb7484849426df2b74ddc3c97a73ee29ff66f1ce9",
          "md5": "4c060e08b77dc6d06a6a80a5923ec4d6",
          "sha256": "9fe9685f2e00e521ea84e9b3a3b189b3510a717c0afb5fbb9020230f28d71f37"
        },
        "downloads": -1,
        "filename": "howl-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c060e08b77dc6d06a6a80a5923ec4d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34606,
        "upload_time": "2021-02-11T20:49:13",
        "upload_time_iso_8601": "2021-02-11T20:49:13.896194Z",
        "url": "https://files.pythonhosted.org/packages/4e/ce/2fdb9eea3f3cf3ee7ceeb7484849426df2b74ddc3c97a73ee29ff66f1ce9/howl-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb1e89987301a46dfcc632a3a20302dad5c869f10ee1cc45b45e60bca6099777",
        "md5": "e37a45e886e930087749c236c42b45cc",
        "sha256": "c8b37a302accbab04bfd9a60560a862cc94ed2ca02c67c131ae6e2238e3a21c8"
      },
      "downloads": -1,
      "filename": "howl-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e37a45e886e930087749c236c42b45cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 45221,
      "upload_time": "2021-02-11T20:49:12",
      "upload_time_iso_8601": "2021-02-11T20:49:12.574561Z",
      "url": "https://files.pythonhosted.org/packages/eb/1e/89987301a46dfcc632a3a20302dad5c869f10ee1cc45b45e60bca6099777/howl-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ece2fdb9eea3f3cf3ee7ceeb7484849426df2b74ddc3c97a73ee29ff66f1ce9",
        "md5": "4c060e08b77dc6d06a6a80a5923ec4d6",
        "sha256": "9fe9685f2e00e521ea84e9b3a3b189b3510a717c0afb5fbb9020230f28d71f37"
      },
      "downloads": -1,
      "filename": "howl-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4c060e08b77dc6d06a6a80a5923ec4d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34606,
      "upload_time": "2021-02-11T20:49:13",
      "upload_time_iso_8601": "2021-02-11T20:49:13.896194Z",
      "url": "https://files.pythonhosted.org/packages/4e/ce/2fdb9eea3f3cf3ee7ceeb7484849426df2b74ddc3c97a73ee29ff66f1ce9/howl-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}