{
  "info": {
    "author": "Vladimir Korolev, SNAD team",
    "author_email": "balodja@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Coniferests\n\nTrying to make a slightly better isolation forest for anomaly detection.\nAt the moment there are two forests:\n* [Isolation forest](#isolation-forest),\n* [Pine forest](#pine-forest).\n\n## Isolation forest\n[This](https://github.com/snad-space/coniferest/blob/master/coniferest/isoforest.py)\nis the reimplementation of scikit-learn's \n[isolation forest](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html).\nThe low-level trees and builders are those of original isoforest. What is basically\nreimplemented is the score evaluation to provide better efficiency. Compare runs (4-cores Intel Core i5-6300U):\n```python\nimport sklearn.ensemble\nimport coniferest.isoforest\nfrom coniferest.datasets import MalanchevDataset\n\n# 1e6 data points\ndataset = MalanchevDataset(inliers=2**20, outliers=2**6)\n\n# %%time\nisoforest = coniferest.isoforest.IsolationForest(n_subsamples=1024)\nisoforest.fit(dataset.data)\nscores = isoforest.score_samples(dataset.data)\n# CPU times: user 16.4 s, sys: 26.1 ms, total: 16.4 s\n# Wall time: 5.03 s\n\n# %%time\nskforest = sklearn.ensemble.IsolationForest(max_samples=1024)\nskforest.fit(dataset.data)\nskscores = skforest.score_samples(dataset.data)\n# CPU times: user 32.3 s, sys: 4.48 s, total: 36.8 s\n# Wall time: 36.8 s\n```\nAnd that's not the largest speedup. The more data we analyze, the more cores we have, the more trees we build -- the larger will be the speedup.\nAt one setup (analyzing 30M objects with 100-dimensional features on 80-core computer) the author has seeen a speedup rate from 24 hours to 1 minute.\n\nThe main object of optimization is score evaluation. So if you'd like to test it without using the isolation forest reimplementation, you may use\njust the evaluator as follows:\n```python\n# %%time\nfrom coniferest.sklearn.isoforest import IsolationForestEvaluator\n\nisoforest = sklearn.ensemble.IsolationForest(max_samples=1024)\nisoforest.fit(dataset.data)\nevaluator = IsolationForestEvaluator(isoforest)\nscores = evaluator.score_samples(dataset.data)\n# CPU times: user 17.1 s, sys: 13.9 ms, total: 17.2 s\n# Wall time: 6.32 s\n```\n\n## Pine forest\nPine forest is an attempt to make isolation forest capable of applying a bit of prior information. Let's take a data sample:\n```python\ndataset = MalanchevDataset(inliers=100, outliers=10)\n```\n\n```\n                                Plain data\n     ┌───────────────────────────────────────────────────────────────┐\n 1.12┤  .           .                                        .       │\n     │        .  .         .                        .  .    .  .     │\n 0.88┤.   . .        .                                      .      . │\n     │   .                                             .             │\n     │                                                               │\n 0.64┤                                                               │\n     │                .     .                                        │\n     │         ... ..  .... ... .....                                │\n  0.4┤        ....  .. .. .. .    .                                  │\n     │          . ...     ..   ... .                                 │\n 0.17┤        .  .  ...  ..... .  ..                   .             │\n     │         .    .... .  . .. . .                 .  ..           │\n     │         .   .      . . . ...                 .     .         .│\n-0.07┤                                                       .       │\n     │                                                               │\n-0.31┤                                               .               │\n     └┬──────────────┬───────────────┬───────────────┬──────────────┬┘\n     -0.2           0.16            0.53            0.89          1.26\n```\n\nHere we have one bunch of inliers and three bunches of outliers (10 points each). What happens when we use regular isolation forest?\n(or just PineForest without priors)\n```python\npineforest = PineForest(n_subsamples=16)\npineforest.fit(dataset.data)\nscores = pineforest.score_samples(dataset.data)\nnp.argsort(scores)[:10]\n```\n\n```\n                         PineForest without priors\n     ┌───────────────────────────────────────────────────────────────┐\n 1.12┤  *           .                                        *       │\n     │        .  .         .                        .  *    *  *     │\n 0.88┤*   . .        .                                      *      * │\n     │   .                                             .             │\n     │                                                               │\n 0.64┤                                                               │\n     │                .     .                                        │\n     │         ... ..  .... ... .....                                │\n  0.4┤        ....  .. .. .. .    .                                  │\n     │          . ...     ..   ... .                                 │\n 0.17┤        .  .  ...  ..... .  ..                   .             │\n     │         .    .... .  . .. . .                 .  ..           │\n     │         .   .      . . . ...                 .     .         *│\n-0.07┤                                                       .       │\n     │                                                               │\n-0.31┤                                               .               │\n     └┬──────────────┬───────────────┬───────────────┬──────────────┬┘\n     -0.2           0.16            0.53            0.89          1.26\n```\n\nPineForest sees the upper corner as the most anomalous with some doubt about two other bunches.\nLet's now add prior information \"the points (0, 1) and (1, 1) are regular and the point\n(1, 0) is anomalous\":\n```python\npriors = np.array([[0.0, 1.0],\n                   [1.0, 1.0],\n                   [1.0, 0.0]])\n\nprior_labels = np.array([Label.R, Label.R, Label.A])\n```\n\nAnd see what happens:\n```python\npineforest.fit_known(dataset.data, priors, prior_labels)\nscores = pineforest.score_samples(dataset.data)\nnp.argsort(scores)[:10]\n```\n\n```\n                         PineForest with 3 priors\n     ┌───────────────────────────────────────────────────────────────┐\n 1.12┤  .           .                                        .       │\n     │        .  .         .                        .  .    .  *     │\n 0.88┤.   . .        .                                      .      * │\n     │   .                                             .             │\n     │                                                               │\n 0.64┤                                                               │\n     │                .     .                                        │\n     │         ... ..  .... ... .....                                │\n  0.4┤        ....  .. .. .. .    .                                  │\n     │          . ...     ..   ... .                                 │\n 0.17┤        .  .  ...  ..... .  ..                   .             │\n     │         .    .... .  . .. . .                 *  **           │\n     │         .   .      . . . ...                 *     *         *│\n-0.07┤                                                       *       │\n     │                                                               │\n-0.31┤                                               *               │\n     └┬──────────────┬───────────────┬───────────────┬──────────────┬┘\n     -0.2           0.16            0.53            0.89          1.26\n```\n\nNow the PineForest sees the lower right outliers as anomalous and still has some doubts\nabout upper right bunch. We may supply more labeled points. And the more prior data we supply\nthe better anomaly detection will be, hopefully.\n\nThe plots may be repeated with [plotext_pineforest.py script](scripts/plotext_pineforest.py):\n```shell\ncd scripts\npython plotext_pineforest.py\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snad-space/coniferest",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coniferest",
    "package_url": "https://pypi.org/project/coniferest/",
    "platform": null,
    "project_url": "https://pypi.org/project/coniferest/",
    "project_urls": {
      "Homepage": "https://github.com/snad-space/coniferest"
    },
    "release_url": "https://pypi.org/project/coniferest/0.0.4/",
    "requires_dist": [
      "numpy",
      "sklearn",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "Coniferous forests for better machine learning",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14364244,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "694d975914bf3e92240034e99db077f80aecf611fab8fc91e2979ae9ac442a6a",
          "md5": "4d0f75daae0dbf2087deae7e1698bd94",
          "sha256": "3f57f6a0ed3f087b3a6f45b8744b10257c03dac130427180d89740da1a7ccc35"
        },
        "downloads": -1,
        "filename": "coniferest-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4d0f75daae0dbf2087deae7e1698bd94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1312744,
        "upload_time": "2021-08-13T12:33:47",
        "upload_time_iso_8601": "2021-08-13T12:33:47.807188Z",
        "url": "https://files.pythonhosted.org/packages/69/4d/975914bf3e92240034e99db077f80aecf611fab8fc91e2979ae9ac442a6a/coniferest-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8615cb9df9266a6515e9a926bd0c89b5794dd064fd8547a760a75243d25947fc",
          "md5": "e72fba662e06439469c7e13e6a3d1e56",
          "sha256": "f3c22ae951fdddae8204341d51c545543bcd2315884951212147fc0fae5b3507"
        },
        "downloads": -1,
        "filename": "coniferest-0.0.3-cp39-cp39-macosx_12_0_arm64.whl",
        "has_sig": false,
        "md5_digest": "e72fba662e06439469c7e13e6a3d1e56",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 105116,
        "upload_time": "2022-07-04T09:52:43",
        "upload_time_iso_8601": "2022-07-04T09:52:43.758272Z",
        "url": "https://files.pythonhosted.org/packages/86/15/cb9df9266a6515e9a926bd0c89b5794dd064fd8547a760a75243d25947fc/coniferest-0.0.3-cp39-cp39-macosx_12_0_arm64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c97b102c9ba84b5aa3952b6d96378ad33e6f476ae7ed2741adfce93bf08b544d",
          "md5": "5037f5de74dea6958b34e96cb4c825e6",
          "sha256": "d9bd57bf6acc24a7be9188426ebf3c734520ed1d527bfe7cc9c02cd262966d7a"
        },
        "downloads": -1,
        "filename": "coniferest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5037f5de74dea6958b34e96cb4c825e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12015376,
        "upload_time": "2022-07-04T09:52:52",
        "upload_time_iso_8601": "2022-07-04T09:52:52.870462Z",
        "url": "https://files.pythonhosted.org/packages/c9/7b/102c9ba84b5aa3952b6d96378ad33e6f476ae7ed2741adfce93bf08b544d/coniferest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06041857299f52b46437e0d3a3fad7fc7045b74f9956f388487915d1fc17d4c4",
          "md5": "1e2fe8c1d6174543e6be6c26f61f4e17",
          "sha256": "a8f9632e7614e0c8c0e7d0968c1fc5eef7d91b11f4f4ac4051e863acae9bad2c"
        },
        "downloads": -1,
        "filename": "coniferest-0.0.4-cp39-cp39-macosx_12_0_arm64.whl",
        "has_sig": false,
        "md5_digest": "1e2fe8c1d6174543e6be6c26f61f4e17",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 105095,
        "upload_time": "2022-07-07T12:59:55",
        "upload_time_iso_8601": "2022-07-07T12:59:55.654348Z",
        "url": "https://files.pythonhosted.org/packages/06/04/1857299f52b46437e0d3a3fad7fc7045b74f9956f388487915d1fc17d4c4/coniferest-0.0.4-cp39-cp39-macosx_12_0_arm64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71edec590f80014092ccf462a3c383fad0d0b1757d26349e052990d11718be82",
          "md5": "23660c3e7356e66d28793099f6d2479e",
          "sha256": "88b51076a6458a1c535e9929cfd2d7e5d962b3fbc78d77da87f3ece5e8c91bb0"
        },
        "downloads": -1,
        "filename": "coniferest-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "23660c3e7356e66d28793099f6d2479e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10483719,
        "upload_time": "2022-07-07T12:59:58",
        "upload_time_iso_8601": "2022-07-07T12:59:58.922222Z",
        "url": "https://files.pythonhosted.org/packages/71/ed/ec590f80014092ccf462a3c383fad0d0b1757d26349e052990d11718be82/coniferest-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06041857299f52b46437e0d3a3fad7fc7045b74f9956f388487915d1fc17d4c4",
        "md5": "1e2fe8c1d6174543e6be6c26f61f4e17",
        "sha256": "a8f9632e7614e0c8c0e7d0968c1fc5eef7d91b11f4f4ac4051e863acae9bad2c"
      },
      "downloads": -1,
      "filename": "coniferest-0.0.4-cp39-cp39-macosx_12_0_arm64.whl",
      "has_sig": false,
      "md5_digest": "1e2fe8c1d6174543e6be6c26f61f4e17",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 105095,
      "upload_time": "2022-07-07T12:59:55",
      "upload_time_iso_8601": "2022-07-07T12:59:55.654348Z",
      "url": "https://files.pythonhosted.org/packages/06/04/1857299f52b46437e0d3a3fad7fc7045b74f9956f388487915d1fc17d4c4/coniferest-0.0.4-cp39-cp39-macosx_12_0_arm64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71edec590f80014092ccf462a3c383fad0d0b1757d26349e052990d11718be82",
        "md5": "23660c3e7356e66d28793099f6d2479e",
        "sha256": "88b51076a6458a1c535e9929cfd2d7e5d962b3fbc78d77da87f3ece5e8c91bb0"
      },
      "downloads": -1,
      "filename": "coniferest-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "23660c3e7356e66d28793099f6d2479e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10483719,
      "upload_time": "2022-07-07T12:59:58",
      "upload_time_iso_8601": "2022-07-07T12:59:58.922222Z",
      "url": "https://files.pythonhosted.org/packages/71/ed/ec590f80014092ccf462a3c383fad0d0b1757d26349e052990d11718be82/coniferest-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}