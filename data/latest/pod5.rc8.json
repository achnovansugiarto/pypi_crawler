{
  "info": {
    "author": "",
    "author_email": "\"Oxford Nanopore Technologies, Limited\" <support@nanoporetech.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "POD5 Python Package\n===================\n\nThe `pod5` Python package contains the tools and python API wrapping the compiled bindings\nfor the POD5 file format from `lib_pod5`.\n\nInstallation\n------------\n\nThe `pod5` package is available on [pypi](https://pypi.org/project/pod5/) and is\ninstalled using `pip`:\n\n``` console\npip install pod5\n```\n\nReading a POD5 File\n-------------------\n\nTo read a `pod5` file provide the the `Reader` class with the input `pod5` file path\nand call `Reader.reads()` to iterate over read records in the file. The example below\nprints the read_id of every record in the input `pod5` file.\n\n``` python\nimport pod5 as p5\n\nwith p5.Reader(\"example.pod5\") as reader:\n    for read_record in reader.reads():\n        print(read_record.read_id)\n```\n\nTo iterate over a selection of read_ids supply `Reader.reads()` with a collection\nof read_ids which must be `UUID` compatible:\n\n``` python\nimport pod5 as p5\n\n# Create a collection of read_id UUIDs\nread_ids: List[str] = [\n  \"00445e58-3c58-4050-bacf-3411bb716cc3\",\n  \"00520473-4d3d-486b-86b5-f031c59f6591\",\n]\n\nwith p5.Reader(\"example.pod5\") as reader:\n    for read_record in reader.reads(selection=read_ids):\n        assert str(read_record.read_id) in read_ids\n```\n\nPlotting Signal Data Example\n----------------------------\n\nHere is an example of how a user may plot a readâ€™s signal data against time.\n\n``` python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport pod5 as p5\n\n# Using the example pod5 file provided\nexample_pod5 = \"test_data/multi_fast5_zip.pod5\"\nselected_read_id = '0000173c-bf67-44e7-9a9c-1ad0bc728e74'\n\nwith p5.Reader(example_pod5) as reader:\n\n    # Read the selected read from the pod5 file\n    # next() is required here as Reader.reads() returns a Generator\n    read = next(reader.reads(selection=[selected_read_id]))\n\n    # Get the signal data and sample rate\n    sample_rate = read.run_info.sample_rate\n    signal = read.signal\n\n    # Compute the time steps over the sampling period\n    time = np.arange(len(signal)) / sample_rate\n\n    # Plot using matplotlib\n    plt.plot(time, signal)\n```\n\nWriting a POD5 File\n-------------------\n\nThe `pod5` package provides the functionality to write POD5 files.\n\nIt is strongly recommended that users first look at the available tools when\nmanipulating existing datasets, as there may already be a tool to meet your needs.\nNew tools may be added to support our users and if you have a suggestion for a\nnew tool or feature please submit a request on the\n[pod5-file-format GitHub issues page](https://github.com/nanoporetech/pod5-file-format/issues).\n\nBelow is an example of how one may add reads to a new POD5 file using the `Writer`\nand its `add_read()` method.\n\n```python\nimport pod5 as p5\n\n# Populate container classes for read metadata\npore = p5.Pore(channel=123, well=3, pore_type=\"pore_type\")\ncalibration = p5.Calibration(offset=0.1, scale=1.1)\nend_reason = p5.EndReason(name=p5.EndReasonEnum.SIGNAL_POSITIVE, forced=False)\nrun_info = p5.RunInfo(\n    acquisition_id = ...\n    acquisition_start_time = ...\n    adc_max = ...\n    ...\n)\nsignal = ... # some signal data as numpy np.int16 array\n\nread = p5.Read(\n    read_id=UUID(\"0000173c-bf67-44e7-9a9c-1ad0bc728e74\"),\n    end_reason=end_reason,\n    calibration=calibration,\n    pore=pore,\n    run_info=run_info,\n    ...\n    signal=signal,\n)\n\nwith p5.Writer(\"example.pod5\") as writer:\n    # Write the read object\n    writer.add_read(read)\n```\n\nPOD5 Format Tools\n-----------------\n\nThe ``pod5`` package provides the following tools for inspecting and manipulating\n`.pod5` files as well as converting between `.pod5` and `.fast5` file formats.\n\n1. [pod5 update](#pod5%20update)\n2. [pod5 inspect](#pod5%20inspect)\n3. [pod5 subset](#pod5%20subset)\n4. [pod5 repack](#pod5%20repack)\n5. [pod5 convert fast5](#pod5%20convert%20fast5)\n6. [pod5 convert to_fast5](#pod5%20convert%20to_fast5)\n\npod5 update\n-----------\n\nThe `pod5 update` tool can be used to update a file in an older pod5 format to the latest available format.\n\n```bash\n# View help on pod5 update tools\n> pod5 update --help\n> pod5 update my-old-pod5-file.pod5 ./migrated_files/\n```\n\npod5 inspect\n------------\n\nThe `pod5 inspect` tool can be used to extract details and summaries of the contents of `.pod5` files. There are three programs for users within `pod5 inspect` and these are [`reads`](#pod5%20inspect%20reads), [`read`](#pod5%20inspect%20read), and [`summary`](#pod5%20inspect%20summary),\n\n```bash\n# View help on pod5 inspect tools\n> pod5 inspect --help\n> pod5 inspect {reads, read, summary} --help\n```\n\n### pod5 inspect reads\n\nInspect all reads and print a csv table of the details of all reads in the given `.pod5` files.\n\n```bash\n> pod5 inspect reads pod5_file.pod5\n\n# Sample Output:\nread_id,channel,well,pore_type,read_number,start_sample,end_reason,median_before,calibration_offset,calibration_scale,sample_count,byte_count,signal_compression_ratio\n00445e58-3c58-4050-bacf-3411bb716cc3,908,1,not_set,100776,374223800,signal_positive,205.3,-240.0,0.1,65582,58623,0.447\n00520473-4d3d-486b-86b5-f031c59f6591,220,1,not_set,7936,16135986,signal_positive,192.0,-233.0,0.1,167769,146495,0.437\n...\n```\n\n### pod5 inspect read\n\nInspect the pod5 file, find a specific read and print its details.\n\n```bash\n> pod5 inspect read pod5_file.pod5 00445e58-3c58-4050-bacf-3411bb716cc3\n\n# Sample Output:\nFile: out-tmp/output.pod5\nread_id: 0e5d6827-45f6-462c-9f6b-21540eef4426\nread_number:    129227\nstart_sample:   367096601\nmedian_before:  171.889404296875\nchannel data:\n  channel: 2366\n  well: 1\n  pore_type: not_set\nend reason:\n  name: signal_positive\n  forced False\ncalibration:\n  offset: -243.0\n  scale: 0.1462070643901825\nsamples:\n  sample_count: 81040\n  byte_count: 71989\n  compression ratio: 0.444\nrun info\n    acquisition_id: 2ca00715f2e6d8455e5174cd20daa4c38f95fae2\n    acquisition_start_time: 2021-07-23 13:48:59.780000\n    adc_max: 0\n    adc_min: 0\n    context_tags\n      barcoding_enabled: 0\n      basecall_config_filename: dna_r10.3_450bps_hac_prom.cfg\n      experiment_duration_set: 2880\n...\n```\n\n### pod5 inspect summary\n\nInspect the pod5 file, printing summary information on the reads in each batch\n\npod5 subset\n----------\n\n`pod5 subset` is a tool for separating the reads in `.pod5` files into one or more\noutput files. This tool can be used to create new `.pod5` files which contain a\nuser-defined subset of reads from the input.\n\nThe `pod5 subset` tool requires a mapping which defines which read_ids should be\nwritten to which output. There are multiple ways of specifying this mapping which are\ndefined in either a `.csv` or `.json` file or by using a tab-separated table\n(e.g. basecaller sequencing summary) and instructions on how to interpret it.\n\n```bash\n# View help\n> pod5 subset --help\n\n# Subset input(s) using a pre-defined mapping\n> pod5 subset example_1.pod5 --csv mapping.csv\n> pod5 subset examples_*.pod5 --json mapping.json\n\n# Subset input(s) using a dynamic mapping created at runtime\n> pod5 subset example_1.pod5 --summary summary.txt --columns barcode alignment_genome\n```\n\n### Important note on read_id clashes\n\nCare should be taken to ensure that when providing multiple input `.pod5` files to `pod5 subset`\nthat there are no read_id UUID clashes. If this occurs both reads are written to the output.\n\n### Creating a Subset mapping\n\nThe `.csv` or `.json` inputs should define a mapping of destination filename to an array\nof read_ids which will be written to the destination.\n\nIn the example below of a `.csv` subset mapping, note that the output filename can be specified on multiple lines. This allows multi-line specifications to avoid excessively long lines.\n\n```bash\n# --csv mapping filename to array of read_id\noutput_1.pod5, 132b582c-56e8-4d46-9e3d-48a275646d3a, 12a4d6b1-da6e-4136-8bb3-1470ef27e311, ...\noutput_2.pod5, 0ff4dc01-5fa4-4260-b54e-1d8716c7f225\noutput_2.pod5, 0e359c40-296d-4edc-8f4a-cca135310ab2, 0e9aa0f8-99ad-40b3-828a-45adbb4fd30c\n```\n\nSee below an example of a `.json` subset mapping. This file must of course be well-formatted\n`json` in addition to the formatting standard required by the tool. The formatting requirements\nfor the `.json` subset mapping are that keys should be unique filenames mapped to an array\nof read_id strings.\n\n```json\n{\n    \"output_1.pod5\": [\n        \"0000173c-bf67-44e7-9a9c-1ad0bc728e74\",\n        \"006d1319-2877-4b34-85df-34de7250a47b\"\n    ],\n    \"output_2.pod5\": [\n        \"00925f34-6baf-47fc-b40c-22591e27fb5c\",\n        \"009dc9bd-c5f4-487b-ba4c-b9ce7e3a711e\"\n    ]\n}\n```\n\n### Subsetting from a summary\n\n`pod5 subset` can dynamically generate output targets and collect associated reads\nbased on a tab-separated file (e.g. sequencing summary) which contains a header row\nand a series of columns on which to group unique collections of values. Internally\nthis process uses the [`pandas.Dataframe.groupby`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html) function where the `by` parameter is the sequence of column names\nspecified using the ``--columns` argument.\n\nThe column names specified in `--columns` should be **categorical** in nature.\nThere is no restriction in-place however there may be an excessive number of output files\ngenerated if a continuous variable was used for subsetting.\n\nGiven the following example summary file, observe the resultant outputs given various\narguments:\n\n```text\nread_id mux barcode     length\nread_a  1   barcode_a   4321\nread_b  1   barcode_b   1000\nread_c  2   barcode_b   1200\nread_d  2   barcode_c   1234\n```\n\n```bash\n> pod5 subset example_1.pod5 --output barcode_subset --summary summary.txt --columns barcode\n> ls barcode_subset\nbarcode-barcode_a.pod5 # Contains: read_a\nbarcode-barcode_b.pod5 # Contains: read_b, read_c\nbarcode-barcode_c.pod5 # Contains: read_d\n\n> pod5 subset example_1.pod5 --output mux_subset --summary summary.txt --columns mux\n> ls mux_subset\nmux-1.pod5 # Contains: read_a, read_b\nmus-2.pod5 # Contains: read_c, read_d\n\n> pod5 subset example_1.pod5 --output barcode_mux_subset --summary summary.txt --columns barcode mux\n> ls barcode_mux_subset\nbarcode-barcode_a_mux-1.pod5 # Contains: read_a\nbarcode-barcode_b_mux-1.pod5 # Contains: read_b\nbarcode-barcode_b_mux-2.pod5 # Contains: read_c\nbarcode-barcode_c_mux-2.pod5 # Contains: read_d\n```\n\nThe output filename is generated from a template string. The automatically generated\ntemplate is the sequential concatenation of column_name-column_value followed by the\n`.pod5` file extension. The user can set their own filename template using the ``--template``\nargument. This argument accepts a string in the Python f-string style where the subsetting\nvariables are used for keyword placeholder substitution. Keywords should be placed\nwithin curly-braces. For example:\n\nFrom the examples above:\n\n```bash\n> pod5 subset example_1.pod5 --output barcode_subset --summary summary.txt --columns barcode\n# default template used = \"barcode-{barcode}.pod5\"\n\n> pod5 subset example_1.pod5 --output barcode_mux_subset --summary summary.txt --columns barcode mux\n# default template used = \"barcode-{barcode}_mux-{mux}.pod5\"\n```\n\nCustom template example:\n\n```bash\n> pod5 subset example_1.pod5 --output barcode_subset --summary summary.txt --columns barcode --template \"{barcode}.subset.pod5\"\n> ls barcode_subset\nbarcode_a.subset.pod5 # Contains: read_a\nbarcode_b.subset.pod5 # Contains: read_b, read_c\nbarcode_c.subset.pod5 # Contains: read_d\n```\n\npod5 repack\n-----------\n\n`pod5 repack` will simply repack `.pod5` files into one-for-one output files of the same name.\n\n``` bash\n> pod5 repack pod5s/*.pod5 repacked_pods/\n```\n\npod5 merge\n-----------\n\n`pod5 merge` will merge multiple `.pod5` files into one output file.\n\n``` bash\n> pod5 merge pod5s/*.pod5 merged.pod5\n```\n\npod5 convert fast5\n-----------------------\n\nThe `pod5 convert fast5` tool takes one or more `.fast5` files and converts them\nto one or more `.pod5` files.\n\n**Some content previously stored in fast5 files is not compatible with the pod5 format and will not be converted**\n\n``` bash\n# View help\n> pod5 convert fast5 --help\n\n# Convert fast5 files into a monolithic output file\n> pod5 convert fast5 ./input/*.fast5 --output converted.pod5\n\n# Convert fast5 files into a monolithic output in an existing directory\n> pod5 convert fast5 ./input/*.fast5 --output outputs/\n> ls outputs/\noutputs/output.pod5 # default name\n\n# Convert each fast5 to its relative converted output. The output files are written\n# into the output directory at paths relatve to the path given to the\n# --one-to-one argument. Note: This path must be a relative parent to all\n# input paths.\n> ls input/*.fast5\nfast5_1.fast5 fast5_2.fast5 ... fast5_N.fast5\n> pod5 convert fast5 ./input/*.fast5 --output output_pod5s --one-to-one input/\n> ls output_pod5s/\nfast5_1.pod5 fast5_2.pod5 ... fast5_N.pod5\n\n# Note the different --one-to-one path which is now the current working directory.\n# The new sub-directory output_pod5/input is created.\n> pod5 convert fast5 ./input/*.fast5 --output output_pod5s --one-to-one ./\n> ls output_pod5s/\ninput/fast5_1.pod5 input/fast5_2.pod5 ... input/fast5_N.pod5\n\n```\n\npod5 convert to_fast5\n---------------------\n\nThe `pod5 convert to_fast5` tool takes one or more `.pod5` files and converts them\nto multiple `.fast5` files. The default behaviour is to write 4000 reads per output file\nbut this can be controlled with the `--file-read-count` argument.\n\n``` bash\n# View help\n> pod5 convert to_fast5 --help\n\n# Convert pod5 files to fast5 files with default 4000 reads per file\n> pod5 convert to_fast5 example.pod5 pod5_to_fast5\n> ls pod5_to_fast5/\noutput_1.fast5 output_2.fast5 ... output_N.fast5\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "nanopore",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pod5",
    "package_url": "https://pypi.org/project/pod5/",
    "platform": null,
    "project_url": "https://pypi.org/project/pod5/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pod5/0.1.13/",
    "requires_dist": [
      "iso8601",
      "jsonschema",
      "lib-pod5 (~=0.1.10dev0)",
      "more-itertools",
      "numpy (>=1.20.0)",
      "pyarrow (~=11.0.0)",
      "pytz",
      "packaging",
      "pandas",
      "h5py (~=3.8.0)",
      "vbz-h5py-plugin",
      "tqdm",
      "black (==22.3.0) ; extra == 'dev'",
      "mypy (==0.991) ; extra == 'dev'",
      "pre-commit (==v2.21.0) ; extra == 'dev'",
      "pytest (~=6.2) ; extra == 'dev'",
      "pytest-cov (~=3.0) ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "types-jsonschema ; extra == 'dev'",
      "types-setuptools ; extra == 'dev'",
      "types-pytz ; extra == 'dev'",
      "pandas-stubs ; extra == 'dev'"
    ],
    "requires_python": "~=3.7",
    "summary": "Oxford Nanopore Technologies Pod5 File Format Python API and Tools",
    "version": "0.1.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17428506,
  "releases": {
    "0.0.43": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7a848dfe2ce75dbd0cd42cf88b8439b6dc371860f938990da78934d5e0e995f",
          "md5": "4fa0906fcf49fe6e5eeec6a46bfd69c5",
          "sha256": "5b194e2c6d3dbe3dbef87116a8a238cf131ee05044e2dd0867a0540f83c9ddc1"
        },
        "downloads": -1,
        "filename": "pod5-0.0.43-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fa0906fcf49fe6e5eeec6a46bfd69c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 46435,
        "upload_time": "2022-11-30T09:47:08",
        "upload_time_iso_8601": "2022-11-30T09:47:08.942406Z",
        "url": "https://files.pythonhosted.org/packages/d7/a8/48dfe2ce75dbd0cd42cf88b8439b6dc371860f938990da78934d5e0e995f/pod5-0.0.43-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b26c74cb1d63460242d55b55cb3765367b2ce631d41ee7f11980447b8f8ba89c",
          "md5": "95e6e49ed971af2bf09c17becf3f862f",
          "sha256": "aacdc6f529a6eb1b5f14b50bc2d9bd21a057c7dc180d92ff3f9ffe790341415d"
        },
        "downloads": -1,
        "filename": "pod5-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95e6e49ed971af2bf09c17becf3f862f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 47641,
        "upload_time": "2022-12-06T13:09:10",
        "upload_time_iso_8601": "2022-12-06T13:09:10.313918Z",
        "url": "https://files.pythonhosted.org/packages/b2/6c/74cb1d63460242d55b55cb3765367b2ce631d41ee7f11980447b8f8ba89c/pod5-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66b7f08accbc2d7990355dfb7cfc2eba9ad750e21049e5de10cfbd5981ace769",
          "md5": "a42043fbd83246a4f2ab682b5f8a3b18",
          "sha256": "9ae8d1b6d97bf3a94a640610d052f7e8c4a1517cea53e8178cb40e28cba2d7cd"
        },
        "downloads": -1,
        "filename": "pod5-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a42043fbd83246a4f2ab682b5f8a3b18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 50990,
        "upload_time": "2023-03-13T10:20:52",
        "upload_time_iso_8601": "2023-03-13T10:20:52.630146Z",
        "url": "https://files.pythonhosted.org/packages/66/b7/f08accbc2d7990355dfb7cfc2eba9ad750e21049e5de10cfbd5981ace769/pod5-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14089dbe3ab0bacbf50ef45b19b6ddd8a5b5fdb6ebb81c1a951d1f298b5913f0",
          "md5": "ab0088a2cbdbb9237e98b13232c29715",
          "sha256": "b43abc801e90a4e5895b3651ddaa0b1edc18d8f9204a9d0acb492fc7f67d65f9"
        },
        "downloads": -1,
        "filename": "pod5-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab0088a2cbdbb9237e98b13232c29715",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 50984,
        "upload_time": "2023-03-16T14:09:50",
        "upload_time_iso_8601": "2023-03-16T14:09:50.814794Z",
        "url": "https://files.pythonhosted.org/packages/14/08/9dbe3ab0bacbf50ef45b19b6ddd8a5b5fdb6ebb81c1a951d1f298b5913f0/pod5-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89b59f5825cbcd98ab86eed541218f7441ed2080f3b75539e56b365034cb2bf6",
          "md5": "d586f9e89d45fbf5a548247df50462a6",
          "sha256": "eae86c8f36787681d7121449d1b7dd128b936d9933f014fcc2b2b1829d498804"
        },
        "downloads": -1,
        "filename": "pod5-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d586f9e89d45fbf5a548247df50462a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 51761,
        "upload_time": "2023-03-22T17:38:13",
        "upload_time_iso_8601": "2023-03-22T17:38:13.872858Z",
        "url": "https://files.pythonhosted.org/packages/89/b5/9f5825cbcd98ab86eed541218f7441ed2080f3b75539e56b365034cb2bf6/pod5-0.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e28f094c6ac63876256f80167b57b589fb0afa0ce26ecfde161344526cbd696a",
          "md5": "2640a3a9b9a98871a8b91b95430ce270",
          "sha256": "de917e2c8d7960cae8c6879d2a92614fec251effdce5ec66b1023a5181907c8f"
        },
        "downloads": -1,
        "filename": "pod5-0.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2640a3a9b9a98871a8b91b95430ce270",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 52035,
        "upload_time": "2023-03-24T08:22:10",
        "upload_time_iso_8601": "2023-03-24T08:22:10.171335Z",
        "url": "https://files.pythonhosted.org/packages/e2/8f/094c6ac63876256f80167b57b589fb0afa0ce26ecfde161344526cbd696a/pod5-0.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0666f47d9c849743d0a74627da58b0e9305475537e177d5d01da8121e87899e9",
          "md5": "3119ba22d67635d7286960c9ea6a2bb5",
          "sha256": "7852b2afe674e1515d59e0b071261b76b9bf8086aee31b8ff7fec8c2ede0757d"
        },
        "downloads": -1,
        "filename": "pod5-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3119ba22d67635d7286960c9ea6a2bb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 47726,
        "upload_time": "2022-12-23T10:02:37",
        "upload_time_iso_8601": "2022-12-23T10:02:37.066925Z",
        "url": "https://files.pythonhosted.org/packages/06/66/f47d9c849743d0a74627da58b0e9305475537e177d5d01da8121e87899e9/pod5-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594b7806c3f696a4a13e9b101d748615f3602b47e20fe6f9cecf47f97e644244",
          "md5": "0e8998a6952f56aaf115d84894a29d3a",
          "sha256": "4d66b95035c325a3a0bf6518d3b728f4324ccd6303aa9a00515b73cf1ef2d575"
        },
        "downloads": -1,
        "filename": "pod5-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e8998a6952f56aaf115d84894a29d3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 47852,
        "upload_time": "2023-01-20T14:54:21",
        "upload_time_iso_8601": "2023-01-20T14:54:21.167151Z",
        "url": "https://files.pythonhosted.org/packages/59/4b/7806c3f696a4a13e9b101d748615f3602b47e20fe6f9cecf47f97e644244/pod5-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e28f094c6ac63876256f80167b57b589fb0afa0ce26ecfde161344526cbd696a",
        "md5": "2640a3a9b9a98871a8b91b95430ce270",
        "sha256": "de917e2c8d7960cae8c6879d2a92614fec251effdce5ec66b1023a5181907c8f"
      },
      "downloads": -1,
      "filename": "pod5-0.1.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2640a3a9b9a98871a8b91b95430ce270",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 52035,
      "upload_time": "2023-03-24T08:22:10",
      "upload_time_iso_8601": "2023-03-24T08:22:10.171335Z",
      "url": "https://files.pythonhosted.org/packages/e2/8f/094c6ac63876256f80167b57b589fb0afa0ce26ecfde161344526cbd696a/pod5-0.1.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}