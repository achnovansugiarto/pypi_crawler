{
  "info": {
    "author": "Statistics Norway",
    "author_email": "stat-dev@ssb.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Tink FPE Python\n\n[![PyPI](https://img.shields.io/pypi/v/tink-fpe.svg)][pypi_]\n[![Status](https://img.shields.io/pypi/status/tink-fpe.svg)][status]\n[![Python Version](https://img.shields.io/pypi/pyversions/tink-fpe)][python version]\n[![License](https://img.shields.io/pypi/l/tink-fpe)][license]\n\n[![Tests](https://github.com/statisticsnorway/tink-fpe-python/workflows/Tests/badge.svg)][tests]\n[![Codecov](https://codecov.io/gh/statisticsnorway/tink-fpe-python/branch/main/graph/badge.svg)][codecov]\n\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)][pre-commit]\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)][black]\n\n[pypi_]: https://pypi.org/project/tink-fpe/\n[status]: https://pypi.org/project/tink-fpe-python/\n[python version]: https://pypi.org/project/tink-fpe-python\n[tests]: https://github.com/statisticsnorway/tink-fpe-python/actions?workflow=Tests\n[codecov]: https://app.codecov.io/gh/statisticsnorway/tink-fpe-python\n[pre-commit]: https://github.com/pre-commit/pre-commit\n[black]: https://github.com/psf/black\n\nFormat-Preserving Encryption (FPE) is a type of encryption that encrypts data in a way that preserves the format of the original plaintext. This means that after encryption, the encrypted data retains the same format as the original plaintext, such as a specific length or character set.\n\n## Features\n\n- _Tink FPE_ implements a [Primitive](https://developers.google.com/tink/glossary) that extends the Google Tink framework with support for Format-Preserving Encryption (FPE).\n- The following [NIST compliant](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38Gr1-draft.pdf) algorithms are currently supported: `FF3-1`.\n- The implementation of the underlying algorithm is built on top of the excellent [Mysto FPE](https://github.com/mysto/python-fpe) library.\n- Tink FPE is currently available for Python and Java.\n- Regarding sensitivity for alphabet, FPE is designed to work with a specific alphabet, which is typically defined in the encryption algorithm. If the plaintext data contains characters that are not part of the defined alphabet, Tink FPE supports different _strategies_ for dealing with the data or substitute the characters with ones that are part of the alphabet.\n\n## Requirements\n\n- Google Tink for Python - the bleeding edge version (until [this issue](https://github.com/google/tink/issues/623) is resolved)\n\n## Installation\n\nYou can install _Tink FPE_ via [pip] from [PyPI]:\n\n```console\n$ pip install tink-fpe\n```\n\n## Usage\n\n```python\nimport tink\nimport tink_fpe\n\n# Register Tink FPE with the Tink runtime\ntink_fpe.register()\n\n# Specify the key template to use. In this example we want a 256 bits FF3-1 key that can handle\n# alphanumeric characters (ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789)\nkey_template = tink_fpe.fpe_key_templates.FPE_FF31_256_ALPHANUMERIC\n\n# Create a keyset\nkeyset_handle = tink.new_keyset_handle(key_template)\n\n# Get the FPE primitive\nfpe = keyset_handle.primitive(tink_fpe.Fpe)\n\n# Encrypt\nciphertext = fpe.encrypt(b'Secret123')\nprint(ciphertext.decode('utf-8')) #-> sN3gt6q0V\n\n# Decrypt\ndecrypted = fpe.decrypt(ciphertext)\nprint(decrypted.decode('utf-8')) #-> Secret123\n```\n\n### Handling non-alphabet characters\n\nA characteristic of Format-Preserving Encryption is that plaintext can only be composed of letters or symbols\nfrom a predefined set of characters called the \"alphabet\". Tink FPE supports different ways of coping with\ntexts that contain non-alphabet characters. The approach to use can be expressed via the `UnknownCharacterStrategy` enum.\n\nThe following _stragies_ are supported:\n\n- `FAIL` - Raise an error and bail out if encountering a non-alphabet character. **(this is the default)**\n- `SKIP` - Ignore non-alphabet characters, leaving them unencrypted (nested into the ciphertext).\n- `DELETE` - Remove all characters that are not part of the alphabet prior to processing. \\_Warning: Using this strategy implies that the length of the plaintext and ciphertext may differ.\n- `REDACT` - Replace non-alphabet characters with an alphabet-compliant character prior to processing. _Warning: Using this strategy means that decryption may not result in the exact same plaintext being restored._\n\n```python\nfrom tink_fpe import FpeParams, UnknownCharacterStrategy\n\n# The following will raise an Error\nciphertext = fpe.encrypt(b'Ken sent me...', FpeParams(strategy=UnknownCharacterStrategy.FAIL))\n\n# Skipping non-supported characters might reveal too much of the plaintext, but it is currently the only\n# approach that will handle any plaintext without either failing or irreversibly transforming the plaintext.\nparams = FpeParams(strategy=UnknownCharacterStrategy.SKIP)\nfpe.encrypt(b'Ken sent me...', params) #-> UEj l1Ns sj...\nfpe.decrypt(ciphertext, params) #-> Ken sent me...\n\n# Notice that using the DELETE strategy implies that the length of the plaintext and ciphertext may differ.\n# Furthermore, it might be impossible to go back to the original plaintext.\nparams = FpeParams(strategy=UnknownCharacterStrategy.DELETE)\nciphertext = fpe.encrypt(b'Ken sent me...', params) #-> EsQPgkE9Y\ndecrypted = fpe.decrypt(ciphertext, params) #-> Kensentme\n\n# Notice that using the REDACT strategy it might be impossible to go back to the original plaintext.\n# If not specified, the redaction character will be deduced automatically from the alphabet.\n# For alphanumeric alphabets the 'X' character is used.\nparams = FpeParams(strategy=UnknownCharacterStrategy.REDACT)\nciphertext = fpe.encrypt(b'Ken sent me...', params) #-> MMY2HXvLwzIDoY\ndecrypted = fpe.decrypt(ciphertext, params) #-> KenXsentXmeXXX\n\n# It is also possible to specify the redaction character explicitly, like so:\nparams = FpeParams(strategy=UnknownCharacterStrategy.REDACT, redaction_char='Q')\nciphertext = fpe.encrypt(b'Ken sent me...', params) #-> 9fVDzAODt2vvdz\ndecrypted = fpe.decrypt(ciphertext, params) #-> KenQsentQmeQQQ\n```\n\n### Loading predefined key material\n\nIt is easy to initialize key material from a predefined JSON. The following uses a cleartext keyset,\nbut it will be similar for a wrapped/encrypted key as well.\n\n```python\nimport json\nfrom tink import JsonKeysetReader\nfrom tink import cleartext_keyset_handle\nimport tink_fpe\n\ntink_fpe.register()\n\nkeyset_json = json.dumps({\n    \"primaryKeyId\": 1382079328,\n    \"key\": [\n        {\n            \"keyData\": {\n                \"typeUrl\": \"type.googleapis.com/ssb.crypto.tink.FpeFfxKey\",\n                \"value\": \"EhD4978shQNRpBNaBjbF4KO4GkIQAho+QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODk=\",\n                \"keyMaterialType\": \"SYMMETRIC\"\n            },\n            \"status\": \"ENABLED\",\n            \"keyId\": 1382079328,\n            \"outputPrefixType\": \"RAW\"\n        }\n    ]\n})\n\nkeyset_handle = cleartext_keyset_handle.read(JsonKeysetReader(keyset_json))\nfpe = keyset_handle.primitive(tink_fpe.Fpe)\n```\n\n## Known issues\n\n// TODO: Describe issue about chunking that results in up to last 3 characters not being encrypted.\n\n## Contributing\n\nContributions are very welcome.\nTo learn more, see the [Contributor Guide].\n\n## License\n\nDistributed under the terms of the [MIT license][license],\n_Tink FPE Python_ is free and open source software.\n\n## Issues\n\nIf you encounter any problems,\nplease [file an issue] along with a detailed description.\n\n## Credits\n\nThis project was generated from [@cjolowicz]'s [Hypermodern Python Cookiecutter] template.\n\n[@cjolowicz]: https://github.com/cjolowicz\n[pypi]: https://pypi.org/\n[hypermodern python cookiecutter]: https://github.com/cjolowicz/cookiecutter-hypermodern-python\n[file an issue]: https://github.com/statisticsnorway/tink-fpe/issues\n[pip]: https://pip.pypa.io/\n\n<!-- github-only -->\n\n[license]: https://github.com/statisticsnorway/tink-fpe-python/blob/main/LICENSE\n[contributor guide]: https://github.com/statisticsnorway/tink-fpe-python/blob/main/CONTRIBUTING.md\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/statisticsnorway/tink-fpe-project",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tink-fpe",
    "package_url": "https://pypi.org/project/tink-fpe/",
    "platform": null,
    "project_url": "https://pypi.org/project/tink-fpe/",
    "project_urls": {
      "Changelog": "https://github.com/statisticsnorway/tink-fpe-python/releases",
      "Documentation": "https://statisticsnorway.github.io/tink-fpe-project",
      "Homepage": "https://github.com/statisticsnorway/tink-fpe-project",
      "Repository": "https://github.com/statisticsnorway/tink-fpe-python"
    },
    "release_url": "https://pypi.org/project/tink-fpe/0.2.0/",
    "requires_dist": [
      "ff3 (>=1.0.1,<2.0.0)",
      "tink-custom (>=1.7.0,<2.0.0)",
      "types-protobuf (>=4.21.0.4,<5.0.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Format-Preserving Encryption support for Google Tink",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16812704,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "269756fb8c897a327fd6b9ce421dbf566e0d667cdc78b3a9921ac3d1281752cd",
          "md5": "d7bdb655505bfde417fa223f50a6e3dd",
          "sha256": "74a93f0edcd757cfd4dc39b1e5d154b14744e81045f4fdc530b7a9f65b72e5a2"
        },
        "downloads": -1,
        "filename": "tink_fpe-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7bdb655505bfde417fa223f50a6e3dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 15202,
        "upload_time": "2023-02-11T16:47:20",
        "upload_time_iso_8601": "2023-02-11T16:47:20.398019Z",
        "url": "https://files.pythonhosted.org/packages/26/97/56fb8c897a327fd6b9ce421dbf566e0d667cdc78b3a9921ac3d1281752cd/tink_fpe-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6b0dc5d78a3e6784e408d27f47aef1601d41e31a3934270808349533f330ec4",
          "md5": "bf3abc9742f4b6eca944948bcd785bc2",
          "sha256": "5a92ff0654a551286e152eca5b73859158bc2218a0b4dd0f037a6e0a367428cd"
        },
        "downloads": -1,
        "filename": "tink_fpe-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf3abc9742f4b6eca944948bcd785bc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 15648,
        "upload_time": "2023-02-11T16:47:22",
        "upload_time_iso_8601": "2023-02-11T16:47:22.159259Z",
        "url": "https://files.pythonhosted.org/packages/a6/b0/dc5d78a3e6784e408d27f47aef1601d41e31a3934270808349533f330ec4/tink_fpe-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "269756fb8c897a327fd6b9ce421dbf566e0d667cdc78b3a9921ac3d1281752cd",
        "md5": "d7bdb655505bfde417fa223f50a6e3dd",
        "sha256": "74a93f0edcd757cfd4dc39b1e5d154b14744e81045f4fdc530b7a9f65b72e5a2"
      },
      "downloads": -1,
      "filename": "tink_fpe-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d7bdb655505bfde417fa223f50a6e3dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 15202,
      "upload_time": "2023-02-11T16:47:20",
      "upload_time_iso_8601": "2023-02-11T16:47:20.398019Z",
      "url": "https://files.pythonhosted.org/packages/26/97/56fb8c897a327fd6b9ce421dbf566e0d667cdc78b3a9921ac3d1281752cd/tink_fpe-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6b0dc5d78a3e6784e408d27f47aef1601d41e31a3934270808349533f330ec4",
        "md5": "bf3abc9742f4b6eca944948bcd785bc2",
        "sha256": "5a92ff0654a551286e152eca5b73859158bc2218a0b4dd0f037a6e0a367428cd"
      },
      "downloads": -1,
      "filename": "tink_fpe-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bf3abc9742f4b6eca944948bcd785bc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 15648,
      "upload_time": "2023-02-11T16:47:22",
      "upload_time_iso_8601": "2023-02-11T16:47:22.159259Z",
      "url": "https://files.pythonhosted.org/packages/a6/b0/dc5d78a3e6784e408d27f47aef1601d41e31a3934270808349533f330ec4/tink_fpe-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}