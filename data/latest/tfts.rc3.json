{
  "info": {
    "author": "Longxing Tan",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[license-image]: https://img.shields.io/badge/License-MIT-blue.svg\n[license-url]: https://opensource.org/licenses/MIT\n[pypi-image]: https://badge.fury.io/py/tfts.svg\n[pypi-url]: https://pypi.python.org/pypi/tfts\n[pepy-image]: https://pepy.tech/badge/tfts/month\n[pepy-url]: https://pepy.tech/project/tfts\n[build-image]: https://github.com/LongxingTan/Time-series-prediction/actions/workflows/test.yml/badge.svg?branch=master\n[build-url]: https://github.com/LongxingTan/Time-series-prediction/actions/workflows/test.yml?query=branch%3Amaster\n[lint-image]: https://github.com/LongxingTan/Time-series-prediction/actions/workflows/lint.yml/badge.svg?branch=master\n[lint-url]: https://github.com/LongxingTan/Time-series-prediction/actions/workflows/lint.yml?query=branch%3Amaster\n[docs-image]: https://readthedocs.org/projects/time-series-prediction/badge/?version=latest\n[docs-url]: https://time-series-prediction.readthedocs.io/en/latest/?version=latest\n[coverage-image]: https://codecov.io/gh/longxingtan/Time-series-prediction/branch/master/graph/badge.svg\n[coverage-url]: https://codecov.io/github/longxingtan/Time-series-prediction?branch=master\n[contributing-image]: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n[contributing-url]: https://github.com/longxingtan/Time-series-prediction/blob/master/CONTRIBUTING.md\n[codeql-image]: https://github.com/longxingtan/Time-series-prediction/actions/workflows/codeql-analysis.yml/badge.svg\n[codeql-url]: https://github.com/longxingtan/Time-series-prediction/actions/workflows/codeql-analysis.yml\n\n<h1 align=\"center\">\n<img src=\"./docs/source/_static/logo.svg\" width=\"490\" align=center/>\n</h1><br>\n\n[![LICENSE][license-image]][license-url]\n[![PyPI Version][pypi-image]][pypi-url]\n[![Download][pepy-image]][pepy-url]\n[![Build Status][build-image]][build-url]\n[![Lint Status][lint-image]][lint-url]\n[![Docs Status][docs-image]][docs-url]\n[![Code Coverage][coverage-image]][coverage-url]\n[![Contributing][contributing-image]][contributing-url]\n[![CodeQL Status][codeql-image]][codeql-url]\n\n**[Documentation](https://time-series-prediction.readthedocs.io)** | **[Tutorials](https://time-series-prediction.readthedocs.io/en/latest/tutorials.html)** | **[Release Notes](https://time-series-prediction.readthedocs.io/en/latest/CHANGELOG.html)** | **[中文](https://github.com/LongxingTan/Time-series-prediction/blob/master/README_CN.md)**\n\n**TFTS** (TensorFlow Time Series) is an easy-to-use python package for time series, supporting the classical and SOTA deep learning methods in TensorFlow or Keras.\n- Flexible and powerful design for time series task\n- Advanced deep learning models for industry, research and competition\n- Documentation lives at [time-series-prediction.readthedocs.io](https://time-series-prediction.readthedocs.io)\n\n## Tutorial\n\n**Installation**\n\n- python >= 3.7\n- tensorflow >= 2.4\n\n``` bash\n$ pip install tfts\n```\n\n**Basic usage**\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1LHdbrXmQGBSQuNTsbbM5-lAk5WENWF-Q?usp=sharing)\n\n``` python\nimport matplotlib.pyplot as plt\nimport tfts\nfrom tfts import AutoModel, AutoConfig, KerasTrainer\n\ntrain_length = 24\npredict_length = 8\n(x_train, y_train), (x_valid, y_valid) = tfts.get_data(\"sine\", train_length, predict_length, test_size=0.2)\n\nmodel = AutoModel(\"seq2seq\", predict_length=predict_length)\ntrainer = KerasTrainer(model)\ntrainer.train((x_train, y_train), (x_valid, y_valid), n_epochs=3)\n\npred = trainer.predict(x_valid)\ntrainer.plot(history=x_valid, true=y_valid, pred=pred)\nplt.show()\n```\n\n**Prepare your own data**\n\nYou could train your own data by preparing 3D data as inputs, for both inputs and targets\n\n- option1 `np.ndarray`\n- option2 `tf.data.Dataset`\n\nEncoder only model inputs\n\n```python\ntrain_length = 49\npredict_length = 10\nn_feature = 2\n\nx_train = np.random.rand(1, train_length, n_feature)  # feature: (n, train_length, feature)\ny_train = np.random.rand(1, predict_length, 1)  # y: (n, predict_length, 1)\nx_valid = np.random.rand(1, train_length, n_feature)\ny_valid = np.random.rand(1, predict_length, 1)\n\nmodel = AutoModel(\"rnn\", predict_length=predict_length)\ntrainer = KerasTrainer(model)\ntrainer.train(train_dataset=(x_train, y_train), valid_dataset=(x_valid, y_valid), n_epochs=1)\n\n```\n\nEncoder-decoder model inputs\n\n```python\n# option1: np.ndarray\n\ntrain_length = 49\npredict_length = 10\nn_encoder_feature = 2\nn_decoder_feature = 3\n\nx_train = (\n    np.random.rand(1, train_length, 1),  # x: (n, train_length, 1)\n    np.random.rand(1, train_length, n_encoder_feature),  # encoder_feature: (n, train_length, encoder_features)\n    np.random.rand(1, predict_length, n_decoder_feature),  # decoder_feature: (n, predict_length, decoder_features)\n)\ny_train = np.random.rand(1, predict_length, 1)  # y: (n, predict_length, 1)\nx_valid = (\n    np.random.rand(1, train_length, 1),\n    np.random.rand(1, train_length, n_encoder_feature),\n    np.random.rand(1, predict_length, n_decoder_feature),\n)\ny_valid = np.random.rand(1, predict_length, 1)\n\nmodel = AutoModel(\"seq2seq\", predict_length=predict_length)\ntrainer = KerasTrainer(model)\ntrainer.train((x_train, y_train), (x_valid, y_valid), n_epochs=1)\n```\n\n```python\n# option2: tf.data.Dataset\n\nclass FakeReader(object):\n    def __init__(self, predict_length=10):\n        train_length = 49\n        n_encoder_feature = 2\n        n_decoder_feature = 3\n        self.x = np.random.rand(15, train_length, 1)\n        self.encoder_feature = np.random.rand(15, train_length, n_encoder_feature)\n        self.decoder_feature = np.random.rand(15, predict_length, n_decoder_feature)\n        self.target = np.random.rand(15, predict_length, 1)\n\n    def __len__(self):\n        return len(self.x)\n\n    def __getitem__(self, idx):\n        return {\n            \"x\": self.x[idx],\n            \"encoder_feature\": self.encoder_feature[idx],\n            \"decoder_feature\": self.decoder_feature[idx],\n        }, self.target[idx]\n\n    def iter(self):\n        for i in range(len(self.x)):\n            yield self[i]\n\n\npredict_length = 10\ntrain_reader = FakeReader(predict_length=10)\ntrain_loader = tf.data.Dataset.from_generator(\n    train_reader.iter,\n    ({\"x\": tf.float32, \"encoder_feature\": tf.float32, \"decoder_feature\": tf.float32}, tf.float32),\n)\ntrain_loader = train_loader.batch(batch_size=1)\nvalid_reader = FakeReader(predict_length=10)\nvalid_loader = tf.data.Dataset.from_generator(\n    valid_reader.iter,\n    ({\"x\": tf.float32, \"encoder_feature\": tf.float32, \"decoder_feature\": tf.float32}, tf.float32),\n)\nvalid_loader = valid_loader.batch(batch_size=1)\n\nmodel = AutoModel(\"seq2seq\", predict_length=predict_length)\ntrainer = KerasTrainer(model)\ntrainer.train(train_dataset=train_loader, valid_dataset=valid_loader, n_epochs=1)\n```\n\n**Build your own model**\n\nThe models tfts support to use in `AutoModel()`\n- rnn\n- tcn\n- bert\n- nbeats\n- seq2seq\n- wavenet\n- transformer\n\nYou could build the model based on tfts backbone, especially\n- add custom-defined embeddings for categorical variables\n- add custom-defined head layers for classification or anomaly task\n\n```python\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense\nfrom tfts import AutoModel\n\n\ndef build_model():\n    train_length = 24\n    train_features = 15\n    predict_length = 16\n\n    inputs = Input([train_length, train_features])\n    backbone = AutoModel(\"seq2seq\", predict_length=predict_length)\n    outputs = backbone(inputs)\n    outputs = Dense(1, activation=\"sigmoid\")(outputs)\n    model = tf.keras.Model(inputs=inputs, outputs=outputs)\n    model.compile(loss=\"mse\", optimizer=\"rmsprop\")\n    return model\n```\n\n## Examples\n\n- [TFTS-Bert](https://github.com/LongxingTan/KDDCup2022-Baidu) wins the **3rd place** in KDD Cup 2022 Baidu-wind power forecasting\n- [TFTS-Seq2seq](https://github.com/LongxingTan/Data-competitions/tree/master/tianchi-enso-prediction) wins the **4th place** in Alibaba Tianchi-ENSO prediction 2021\n\n<!-- ### Performance\n\n[Time series prediction](./examples/run_prediction.py) performance is evaluated by tfts implementation, not official\n\n| Performance | [web traffic<sup>mape</sup>]() | [grocery sales<sup>wrmse</sup>](https://www.kaggle.com/competitions/favorita-grocery-sales-forecasting/data) | [m5 sales<sup>val</sup>]() | [ventilator<sup>val</sup>]() |\n| :-- | :-: | :-: | :-: | :-: |\n| [RNN]() | 672 | 47.7% |52.6% | 61.4% |\n| [DeepAR]() | 672 | 47.7% |52.6% | 61.4% |\n| [Seq2seq]() | 672 | 47.7% |52.6% | 61.4% |\n| [TCN]() | 672 | 47.7% |52.6% | 61.4% |\n| [WaveNet]() | 672 | 47.7% |52.6% | 61.4% |\n| [Bert]() | 672 | 47.7% |52.6% | 61.4% |\n| [Transformer]() | 672 | 47.7% |52.6% | 61.4% |\n| [Temporal-fusion-transformer]() | 672 | 47.7% |52.6% | 61.4% |\n| [Informer]() | 672 | 47.7% |52.6% | 61.4% |\n| [AutoFormer]() | 672 | 47.7% |52.6% | 61.4% |\n| [N-beats]() | 672 | 47.7% |52.6% | 61.4% |\n| [U-Net]() | 672 | 47.7% |52.6% | 61.4% |\n\n### More demos\n- [More complex prediction task](./notebooks)\n- [Time series classification](./examples/run_classification.py)\n- [Anomaly detection](./examples/run_anomaly.py)\n- [Uncertainty prediction](examples/run_uncertainty.py)\n- [Parameters tuning by optuna](examples/run_optuna_tune.py)\n- [Serving by tf-serving](./examples) -->\n\nif you prefer other DL frameworks, try [pytorch-forecasting](https://github.com/jdb78/pytorch-forecasting), [gluonts](https://github.com/awslabs/gluonts), [paddlets](https://github.com/PaddlePaddle/PaddleTS)\n\n## Citation\n\nIf you find tfts project useful in your research, please consider cite:\n\n```\n@misc{tfts2020,\n  author = {Longxing Tan},\n  title = {Time series prediction},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/longxingtan/time-series-prediction}},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://time-series-prediction.readthedocs.io",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tfts",
    "package_url": "https://pypi.org/project/tfts/",
    "platform": null,
    "project_url": "https://pypi.org/project/tfts/",
    "project_urls": {
      "Documentation": "https://time-series-prediction.readthedocs.io",
      "Homepage": "https://time-series-prediction.readthedocs.io",
      "Repository": "https://github.com/LongxingTan/Time-series-prediction"
    },
    "release_url": "https://pypi.org/project/tfts/0.0.5/",
    "requires_dist": [
      "optuna (>=2.3.0,<3.0.0)",
      "pandas (>=1.2.0,<2.0.0)",
      "numpy",
      "matplotlib"
    ],
    "requires_python": ">=3.7.1,<3.11",
    "summary": "Deep learning time series with TensorFlow",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15970041,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7c0d6af5ddc0b7a2560b21b7d82f5ffd89a24b3dda8b06bc807a847ec68187",
          "md5": "9cc2e32e345b3c49ca7b1d22e00ee821",
          "sha256": "776db97c45f32b25081128ba49455ff7134c94a80ad7ab7ae6350eb34958ea52"
        },
        "downloads": -1,
        "filename": "tfts-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cc2e32e345b3c49ca7b1d22e00ee821",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<3.11",
        "size": 45547,
        "upload_time": "2022-10-21T03:38:42",
        "upload_time_iso_8601": "2022-10-21T03:38:42.327154Z",
        "url": "https://files.pythonhosted.org/packages/8e/7c/0d6af5ddc0b7a2560b21b7d82f5ffd89a24b3dda8b06bc807a847ec68187/tfts-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7705096c26803bf5a1e68011d7b2335c49e490ac06643493d1cbcc5adf9ca263",
          "md5": "92f507cda949dd5fcaf5a1f51c70d35a",
          "sha256": "0249f68a54cc30c3bf1dbe216ca296d2abdf9d0f859ea8cadc101a164f157b8a"
        },
        "downloads": -1,
        "filename": "tfts-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "92f507cda949dd5fcaf5a1f51c70d35a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 31471,
        "upload_time": "2022-10-21T03:38:44",
        "upload_time_iso_8601": "2022-10-21T03:38:44.729290Z",
        "url": "https://files.pythonhosted.org/packages/77/05/096c26803bf5a1e68011d7b2335c49e490ac06643493d1cbcc5adf9ca263/tfts-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9337dd99cad11e3d680b8a1f414c06b70e8ab9c2e6c34a157b2068ba86655510",
          "md5": "292e16b41edb0520b4c19e53dc40e911",
          "sha256": "a8af6655b818a3e79601a287713f24439c8046a054465c478633ed7d90b416aa"
        },
        "downloads": -1,
        "filename": "tfts-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "292e16b41edb0520b4c19e53dc40e911",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<3.11",
        "size": 45705,
        "upload_time": "2022-11-22T03:16:54",
        "upload_time_iso_8601": "2022-11-22T03:16:54.933237Z",
        "url": "https://files.pythonhosted.org/packages/93/37/dd99cad11e3d680b8a1f414c06b70e8ab9c2e6c34a157b2068ba86655510/tfts-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80861b9702eb0fdf771273f3fced5264537bf77993364216e4c2a3bb3305c5a0",
          "md5": "fd292351fd0067a0c10b63934302f994",
          "sha256": "e8ae74304e79f37aeaf2671765b437c79f39d4925afd4bc3335bbccf6dac7d1c"
        },
        "downloads": -1,
        "filename": "tfts-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fd292351fd0067a0c10b63934302f994",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 32462,
        "upload_time": "2022-11-22T03:16:57",
        "upload_time_iso_8601": "2022-11-22T03:16:57.021379Z",
        "url": "https://files.pythonhosted.org/packages/80/86/1b9702eb0fdf771273f3fced5264537bf77993364216e4c2a3bb3305c5a0/tfts-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfb69a29a9a6c9da5e87c90a287de0e33f0f782df6ecc248abf2e9971fe4df78",
          "md5": "6ede125187aceb25cab423b111dd76ce",
          "sha256": "8cfbf74e4615e77cfc1703c48aefd65c788caceb979c488298d76f4ea1660908"
        },
        "downloads": -1,
        "filename": "tfts-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ede125187aceb25cab423b111dd76ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.1,<3.11",
        "size": 45969,
        "upload_time": "2022-12-02T13:17:31",
        "upload_time_iso_8601": "2022-12-02T13:17:31.772897Z",
        "url": "https://files.pythonhosted.org/packages/df/b6/9a29a9a6c9da5e87c90a287de0e33f0f782df6ecc248abf2e9971fe4df78/tfts-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9afe9099b3a76a09fa80a878e4a389ea18cec5cd0d2fb5b5bb200ede2908586d",
          "md5": "51c15f9c3c997765409323e01709d5e3",
          "sha256": "08d17509f8f65faef1a3fbd1c164229340b6e0909eed137dd295b61c0d559ae0"
        },
        "downloads": -1,
        "filename": "tfts-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "51c15f9c3c997765409323e01709d5e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.1,<3.11",
        "size": 33005,
        "upload_time": "2022-12-02T13:17:33",
        "upload_time_iso_8601": "2022-12-02T13:17:33.602789Z",
        "url": "https://files.pythonhosted.org/packages/9a/fe/9099b3a76a09fa80a878e4a389ea18cec5cd0d2fb5b5bb200ede2908586d/tfts-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfb69a29a9a6c9da5e87c90a287de0e33f0f782df6ecc248abf2e9971fe4df78",
        "md5": "6ede125187aceb25cab423b111dd76ce",
        "sha256": "8cfbf74e4615e77cfc1703c48aefd65c788caceb979c488298d76f4ea1660908"
      },
      "downloads": -1,
      "filename": "tfts-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ede125187aceb25cab423b111dd76ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.1,<3.11",
      "size": 45969,
      "upload_time": "2022-12-02T13:17:31",
      "upload_time_iso_8601": "2022-12-02T13:17:31.772897Z",
      "url": "https://files.pythonhosted.org/packages/df/b6/9a29a9a6c9da5e87c90a287de0e33f0f782df6ecc248abf2e9971fe4df78/tfts-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9afe9099b3a76a09fa80a878e4a389ea18cec5cd0d2fb5b5bb200ede2908586d",
        "md5": "51c15f9c3c997765409323e01709d5e3",
        "sha256": "08d17509f8f65faef1a3fbd1c164229340b6e0909eed137dd295b61c0d559ae0"
      },
      "downloads": -1,
      "filename": "tfts-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "51c15f9c3c997765409323e01709d5e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.1,<3.11",
      "size": 33005,
      "upload_time": "2022-12-02T13:17:33",
      "upload_time_iso_8601": "2022-12-02T13:17:33.602789Z",
      "url": "https://files.pythonhosted.org/packages/9a/fe/9099b3a76a09fa80a878e4a389ea18cec5cd0d2fb5b5bb200ede2908586d/tfts-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}