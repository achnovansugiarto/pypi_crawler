{
  "info": {
    "author": "Randy Simons",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Hardware"
    ],
    "description": "# dt8852 overview\n\ndt8852 is a cross-platform Python package and module for reading and controlling CEM DT-8852 and equivalent Sound Level Meter and Data Logger devices.\n\n* Project homepage: https://codeberg.org/randysimons/dt8852\n* Download: https://pypi.org/project/dt8852/\n* License: GPLv3 or later\n\n# Features\n\n* Read current SPL value as measured from device.\n* Read current device configuration.\n* Configure the device.\n* Download recorded sessions directly to .csv.\n* Can be used directly from command line interface, and in your own application using the API.\n* Single dependency: [pySerial](https://github.com/pyserial/pyserial).\n\n# Compatible devices\n\n* [CEM DT-8852](http://www.cem-instruments.com/en/Product/detail/id/1294) (OEM)\n\nThis device is also re-branded and sold as:\n\n* Trotec SL400\n* Voltcraft SL-451\n* ATP SL-8852\n* … probably various others.\n\nThe CEM DT-8851 lacks the data logger functionality, but might otherwise be supported as well. However, due to availability of only a Trotec SL400, the package is only tested on this device.\n\n# Installation\n\nInstall the package using PIP:\n\n```\n$ pip install dt8852\n```\n\nOr directly from source:\n\n```\n$ pip install git+https://codeberg.org/randysimons/dt8852.git#egg=dt8852\n```\n\nOn Debian / Ubuntu, use `pip3` instead of `pip`.\n\n## Device driver installation\n\nThe devices internally uses a USB-to-UART bridge by Silicon Labs. Your OS needs a driver for this to work, so the device can be accessed as a regular RS232 serial (COM) device.\n\n* On **Linux**, the driver is already available on many distributions. No action is needed. However, depending on your Linux distribution, a user might need permission to access serial interfaces. E.g. on Ubuntu, Debian, openSUSE, Fedora your user needs to be part of the `dialout` group. On Ubuntu and Debian you can add yourself to this group using `$ sudo usermod -a -G dialout $USER`. Others may vary.\n* On **Windows 10**, the device is automatically recognized, and Windows installs the appropriate driver. No action is needed. Alternatively, if you already have installed the provided software, no action is needed. If needed, the USB driver is available directly from [Silicon Labs](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers).\n* On **Mac OSX**, a USB driver is available from [Silicon Labs](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers).\n\n# Usage\n\nAfter installation, the module can be run directly from the command line, and can be used as module in your own Python application (see below). In both cases, the basic setup applies:\n\n1. Connect the device to computer by USB.\n2. Switch on the device.\n3. Press button \"Setup\" once, to enable data communication mode.\n\n## Command line interface\n\n`python3 -m dt8852 MODE`, where `MODE` is one of:\n\n* `live` get live SPL measurements from device, output to stdout.\n* `set_mode` configure device according to specified values and exits.\n* `get_mode` retrieve current device configuration and exit.\n* `download` to download recorded sessions as comma separated value (csv) files and exit.\n\nUse `python3 -m dt8852 -h` for basic help, or `python3 -m dt8852 MODE -h` for mode-specific help, for example `python3 -m dt8852 live -h`.\n\nNote: by default the serial interface used is `COM3` on Windows, `/dev/ttyUSB0` on other OSses. You can override this by using the `--serial_port` argument. The currently available serial interfaces can be found by running `python3 -m  serial.tools.list_ports` on the command line.\n\n### Examples\n\nThe following examples each show a command from the command line and an example of the output.\n\n#### Basic live output\n\n```\n$ python3 -m dt8852 live\n33.3\n32.4\n32.9\n71.8\n```\n\n#### Verbose level 1 live output\n\n```\n$ python3 -m dt8852 live -v\n2020-10-01 22:27:02.806050,37.3\n2020-10-01 22:27:03.304626,33.0\n2020-10-01 22:27:03.802777,56.2\n2020-10-01 22:27:04.301302,53.0\n```\nTip: if you redirect the output to a file, e.g. `python3 -m dt8852 live -v > output.csv`, you can easily import the output in a spreadsheet.\n\n#### Verbose level 5 live output\n\n```\n$ python3 -m dt8852 live -vvvvv\n('frequency_weighting', <Frequency_weighting.DBA: 'dB(A)'>, True)\n('current_time', time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=22, tm_min=29, tm_sec=4, tm_wday=0, tm_yday=1, tm_isdst=-1), True)\n('range_mode', <Range_mode.R_30_80: '30dB - 80dB'>, True)\n('hold_mode', <Hold_mode.LIVE: 'Live'>, True)\n('range_threshold', <Range_threshold.OK: 'Within range'>, True)\n('current_spl', 41.9, True)\n('output_to', <Output_to.BAR_GRAPH: 'Bar graph'>, True)\n```\n\n#### Get current configuration\n\n```\n$ python3 -m dt8852 get_mode\ncurrent_time = 22:31:39\ncurrent_spl = 40.7dB\nfrequency_weighting = dB(A)\ntime_weighting = Fast\nrange_threshold = Within range\nhold_mode = Live\nrange_mode = 30dB - 80dB\nrecording_mode = Not recording\nmemory_store = Storage available\nbattery_state = Battery OK\noutput_to = Digits\nserial = /dev/ttyUSB0\n```\n\n#### Set configuration\n\nSets modes Range 30dB - 80dB, dB(C), slow, and start recording to internal storage.\n\n```\n$ python3 -m dt8852 set_mode --range R_30_80 --freqweighting DBC --timeweighting SLOW --record RECORDING\n```\n\n#### Stop recording\n\n```\n$ python3 -m dt8852 set_mode --record NOT_RECORDING\n```\n\n#### Download recordings\n\n**Note:** make sure the device is not recording anymore before downloading, otherwise memory corruption will occur.\n\n```\n$ python3 -m dt8852 download\nDownloading 2349 bytes\nWriting file: Recording 2020-10-01 21-49-19, dB(A), sample interval 1s.csv\nNumber of recorded samples written to file: 7\nWriting file: Recording 2020-10-01 21-49-30, dB(A), sample interval 1s.csv\nNumber of recorded samples written to file: 6\nWriting file: Recording 2020-10-01 21-50-57, dB(A), sample interval 1s.csv\nNumber of recorded samples written to file: 1148\nAll done\n```\n## API\n\nThe module can be used in your own applications as well. To use, instantiate an object of class **`dt8852.Dt8852`**. See below for examples.\n\n### Class methods\n\n**`__init__(serial: serial.Serial)`** Instantiates a new Dt8852 handler on provided serial interface.\n\n**`__str__()`** Returns string representation, with all currently known device values.\n\n**`decode_next_token(changes_only=True)`** Generator function. Waits for and decodes the next token from the device, yields the received token type and value.\n\nIn addition, it sends commands to the device to achieve the requested modes specified by `set_mode()`.\n\nReturn value is a tuple containing decoded token type as string, its enumeration, and its value.\nIf changes_only is True, decode_next_token returns only if the value is different than previously received value. If changes_only is False, all updates from device are returned,\nwhich is quite spammy.\n\n**`set_mode(modes)`** Sets the list of device configuration modes. Modes is a mutable sequence containing the requested device configuration. This list can contain any of `Dt8852.Time_weighting.FAST`, `Dt8852.Time_weighting.SLOW`, `Dt8852.Frequency_weighting.DBA`, `Dt8852.Frequency_weighting.DBC`, `Dt8852.Hold_mode.LIVE`, `Dt8852.Hold_mode.MIN`, `Dt8852.Hold_mode.MAX`, `Dt8852.Range_mode.R_30_80`, `Dt8852.Range_mode.R_50_100`, `Dt8852.Range_mode.R_80_130`, `Dt8852.Range_mode.R_30_130_AUTO`, `Dt8852.Recording_mode.NOT_RECORDING`, `Dt8852.Recording_mode.RECORDING`.\n\nRequested configuration is send to the device while calling decode_next_token. The process is done, if the passed modes sequence is empty.\n\nCurrently the correct mechanism of precisely when to send the commands to the device is not well understood. More often than not, the device ignores the sent commands. The current implementation tries to mitigate this by periodically sending the command, and then waits if it has the desired effect. This method is not perfect, resulting in incorrect device configuration. Of course, you can always use the device's own buttons to set the desired mode at any time.\n\n**`get_recordings()`**  Generator function yielding all recorded sessions and data.\n\nFor example, if there are two recorded sessions, this iterator yields:\n\n```\ndata_length [bytes to read]\nrecording_start [frequency weighting, start time, sample interval, bytes read so far]\n[spl, timestamp, bytes read so far]\n[spl, timestamp, bytes read so far]\n…\nrecording_complete [bytes read so far]\nrecording_start [frequency weighting, start time, sample interval, bytes read so far]\n[spl, timestamp, bytes read so far]\n[spl, timestamp, bytes read so far]\n…\nrecording_complete [bytes read so far]\ndump_complete [bytes read so far]\n```\n\n### Instance variables\n\nThe device simply outputs a stream of current values. The `decode_next_token()`-loop decodes this stream, and gradually fills the following instance variables. These are read-only.\n\n**`current_spl`** Most recent SPL measurement.\n\n**`current_time`** Current time on device.\n\n**`time_weighting`** `Dt8852.Time_weighting.FAST`, `Dt8852.Time_weighting.SLOW` or `None` if not yet known.\n\n**`frequency_weighting`** `Dt8852.Frequency_weighting.DBA`, `Dt8852.Frequency_weighting.DBC` or `None` if not yet known.\n\n**`range_threshold`** `Dt8852.Range_threshold.UNDER`, `Dt8852.Range_threshold.OK`, `Dt8852.Range_threshold.OVER` or `None` if not yet known.\n\n**`hold_mode`** `Dt8852.Hold_mode.LIVE`, `Dt8852.Hold_mode.MIN`, `Dt8852.Hold_mode.MAX` or `None` if not yet known.\n\n**`range_mode`** `Dt8852.Range_mode.R_30_80`, `Dt8852.Range_mode.R_50_100`, `Dt8852.Range_mode.R_80_130`, `Dt8852.Range_mode.R_30_130_AUTO` or `None` if not yet known.\n\n**`recording_mode`** `Dt8852.Recording_mode.NOT_RECORDING`, `Dt8852.Recording_mode.RECORDING` or `None` if not yet known.\n\n**`memory_store`** `Dt8852.Memory_store.AVAILABLE`, `Dt8852.Memory_store.FULL` or `None` if not yet known.\n\n**`battery_state`** `Dt8852.Battery_state.OK`, `Dt8852.Battery_state.LOW` or `None` if not yet known.\n\n**`output_to`** `Dt8852.Output_to.DISPLAY`, `Dt8852.Output_to.BAR_GRAPH` or `None` if not yet known. This indicates whether the last reported SPL-update was shown on the digits display, or the bar graph display on device.\n\n### Examples\n\nMinimalistic example, which decodes and prints all updates coming from the device connected on serial port `/dev/ttyUSB0`:\n```python\nimport serial, dt8852\n\nspl_meter = dt8852.Dt8852(serial.Serial('/dev/ttyUSB0'))\nfor data in spl_meter.decode_next_token():\n    print(data)\n```\n\nA more extended example of API usage is available in [example.py](https://codeberg.org/randysimons/dt8852/src/branch/main/example.py).\n\n# Attribution\n\nThe project is based on information from the [Sigrok device wiki for CEM DT-8852](https://sigrok.org/wiki/CEM_DT-8852).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://codeberg.org/randysimons/dt8852",
    "keywords": "",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dt8852",
    "package_url": "https://pypi.org/project/dt8852/",
    "platform": "",
    "project_url": "https://pypi.org/project/dt8852/",
    "project_urls": {
      "Bug Tracker": "https://codeberg.org/randysimons/dt8852/issues",
      "Homepage": "https://codeberg.org/randysimons/dt8852"
    },
    "release_url": "https://pypi.org/project/dt8852/1.0.1/",
    "requires_dist": [
      "pyserial (>=3.4)"
    ],
    "requires_python": ">=3.7",
    "summary": "Cross-platform Python package and module for reading and controlling CEM DT-8852 and equivalent Sound Level Meter and Data Logger devices.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11299086,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7bdfeb1e9f98dc1b8a959cafa6bb9d7532c4b8453dec2b1282cb695b0ac1a06",
          "md5": "dc65743b08f47c3367f02fc7887c3dd8",
          "sha256": "87eecd23fec1d80b1cb7e7eb8ee8078f36e2640e0dc52fa70fd82458f60410f2"
        },
        "downloads": -1,
        "filename": "dt8852-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc65743b08f47c3367f02fc7887c3dd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 24692,
        "upload_time": "2020-10-08T19:34:57",
        "upload_time_iso_8601": "2020-10-08T19:34:57.848819Z",
        "url": "https://files.pythonhosted.org/packages/d7/bd/feb1e9f98dc1b8a959cafa6bb9d7532c4b8453dec2b1282cb695b0ac1a06/dt8852-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c226edc10ad2591be7e35c87fcc3f0f19d380e67b18815395f0c12be0b4bc2a7",
          "md5": "1cab0830de3869f31b201ca4ac136682",
          "sha256": "17630e50a64c70909a03f10e2fba771da839783f6e54517dac4b92615c62fb52"
        },
        "downloads": -1,
        "filename": "dt8852-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1cab0830de3869f31b201ca4ac136682",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14735,
        "upload_time": "2020-10-08T19:35:00",
        "upload_time_iso_8601": "2020-10-08T19:35:00.153079Z",
        "url": "https://files.pythonhosted.org/packages/c2/26/edc10ad2591be7e35c87fcc3f0f19d380e67b18815395f0c12be0b4bc2a7/dt8852-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16aef84188b5ea5e864883b289dafb0c02d00043b95bef2aac76fdcb8b5ca793",
          "md5": "beddd3ca419863f74547788a60fdf6ee",
          "sha256": "f5620ac9d777a49ae513be5e465b5cb740e4102859462e3ea552e23435185c31"
        },
        "downloads": -1,
        "filename": "dt8852-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "beddd3ca419863f74547788a60fdf6ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25008,
        "upload_time": "2021-08-27T22:44:54",
        "upload_time_iso_8601": "2021-08-27T22:44:54.522061Z",
        "url": "https://files.pythonhosted.org/packages/16/ae/f84188b5ea5e864883b289dafb0c02d00043b95bef2aac76fdcb8b5ca793/dt8852-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "353e85a225858157ac7839fff723cd94539a02135b19de095103fdaa84bc2f3e",
          "md5": "89947144ce19d8051d5c6cff605027c2",
          "sha256": "8e849de395e1ed35c41a2d86a08a79ad0fe12134a9f35bc408b62cd761a1b69c"
        },
        "downloads": -1,
        "filename": "dt8852-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "89947144ce19d8051d5c6cff605027c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26768,
        "upload_time": "2021-08-27T22:44:56",
        "upload_time_iso_8601": "2021-08-27T22:44:56.454788Z",
        "url": "https://files.pythonhosted.org/packages/35/3e/85a225858157ac7839fff723cd94539a02135b19de095103fdaa84bc2f3e/dt8852-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16aef84188b5ea5e864883b289dafb0c02d00043b95bef2aac76fdcb8b5ca793",
        "md5": "beddd3ca419863f74547788a60fdf6ee",
        "sha256": "f5620ac9d777a49ae513be5e465b5cb740e4102859462e3ea552e23435185c31"
      },
      "downloads": -1,
      "filename": "dt8852-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "beddd3ca419863f74547788a60fdf6ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25008,
      "upload_time": "2021-08-27T22:44:54",
      "upload_time_iso_8601": "2021-08-27T22:44:54.522061Z",
      "url": "https://files.pythonhosted.org/packages/16/ae/f84188b5ea5e864883b289dafb0c02d00043b95bef2aac76fdcb8b5ca793/dt8852-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "353e85a225858157ac7839fff723cd94539a02135b19de095103fdaa84bc2f3e",
        "md5": "89947144ce19d8051d5c6cff605027c2",
        "sha256": "8e849de395e1ed35c41a2d86a08a79ad0fe12134a9f35bc408b62cd761a1b69c"
      },
      "downloads": -1,
      "filename": "dt8852-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "89947144ce19d8051d5c6cff605027c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26768,
      "upload_time": "2021-08-27T22:44:56",
      "upload_time_iso_8601": "2021-08-27T22:44:56.454788Z",
      "url": "https://files.pythonhosted.org/packages/35/3e/85a225858157ac7839fff723cd94539a02135b19de095103fdaa84bc2f3e/dt8852-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}