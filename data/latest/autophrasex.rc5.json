{
  "info": {
    "author": "ZhouYang Luo",
    "author_email": "zhouyang.luo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# AutoPhraseX\n\n![Python package](https://github.com/luozhouyang/autophrasex/workflows/Python%20package/badge.svg)\n[![PyPI version](https://badge.fury.io/py/autophrasex.svg)](https://badge.fury.io/py/autophrasex)\n[![Python](https://img.shields.io/pypi/pyversions/autophrasex.svg?style=plastic)](https://badge.fury.io/py/autophrasex)\n\n\nAutomated Phrase Mining from Massive Text Corpora in Python.\n\n\n实现思路参考 [shangjingbo1226/AutoPhrase](https://github.com/shangjingbo1226/AutoPhrase)，并不完全一致。\n\n## 安装\n\n```bash\npip install -U autophrasex\n```\n\n## 基本使用\n\n```python\nfrom autophrasex import *\n\n# 构造autophrase\nautophrase = AutoPhrase(\n    reader=DefaultCorpusReader(tokenizer=JiebaTokenizer()),\n    selector=DefaultPhraseSelector(),\n    extractors=[\n        NgramsExtractor(N=4), \n        IDFExtractor(), \n        EntropyExtractor()\n    ]\n)\n\n# 开始挖掘\npredictions = autophrase.mine(\n    corpus_files=['data/answers.10000.txt'],\n    quality_phrase_files='data/wiki_quality.txt',\n    callbacks=[\n        LoggingCallback(),\n        ConstantThresholdScheduler(),\n        EarlyStopping(patience=2, min_delta=3)\n    ])\n\n# 输出挖掘结果\nfor pred in predictions:\n    print(pred)\n\n```\n\n\n## 高级用法\n\n本项目的各个关键步骤都是可以扩展的，所以大家可以自由实现自己的逻辑。\n\n本项目大体上可以氛围以下几个主要模块：\n\n* `tokenizer`分词器模块\n* `reader`语料读取模块\n* `selector`高频短语的选择模块\n* `extractors`特征抽取器，用于抽取分类器所需要的特征\n* `callbacks`挖掘周期的回调模块\n\n以下是每个模块的高级使用方法。\n\n### tokenizer\n\n`tokenizer`用于文本分词，用户可以继承`AbstractTokenizer`实现自己的分词器。本库自带`JiebaTokenizer`。\n\n例如，你可以使用`baidu/LAC`来进行中文分词。你可以这样实现分词器：\n\n```python\n# pip install lac\n\nclass BaiduLacTokenizer(AbstractTokenizer):\n\n    def __init__(self, custom_vocab_path=None, model_path=None, mode='seg', use_cuda=False, **kwargs):\n        self.lac = LAC(model_path=model_path, mode=mode, use_cuda=use_cuda)\n        if custom_vocab_path:\n            self.lac.load_customization(custom_vocab_path)\n\n    def tokenize(self, text, **kwargs):\n        text = self._uniform_text(text, **kwargs)\n        results = self.lac.run(text)\n        results = [x.strip() for x in results if x.strip()]\n        return results\n```\n\n然后在构建`reader`的使用使用`BaiduLacTokenizer`:\n```python\nreader = DefaultCorpusReader(tokenizer=BaiduLacTokenizer())\n```\n\n### reader\n\n`reader`用于读取语料，用户可以继承`AbstractCorpusReader`实现自己的Reader。本库自带`DefaultCorpusReader`。\n\n因为目前的`extractor`其实是依赖`reader`的（具体来说是`extractor`实现了`reader`的生命周期回调接口），因此想要重写`reader`，在有些情况下需要同时更改`extractor`的实现，此时自定义成本比较大，暂时不推荐重写`reader`。\n\n### selector\n\n`selector`用于选择高频Phrase，用户可以继承`AbstractPhraseSelector`实现自己的Phrase选择器。本库自带`DefaultPhraseSelector`。\n\n`selector`可以拥有多个`phrase_filter`，用于实现Phrase的过滤。关于`phrase_filter`本库提供了开放的接口，用户可以继承`AbstractPhraseFilter`实现自己的过滤器。本库自带了默认的过滤器`DefaultPhraseFilter`，并且在默认情况下使用。\n\n如果你想要禁用默认的过滤器，转而使用自己实现的过滤器，可以在构造`selector`的时候设置：\n\n```python\n# 自定义过滤器\nclass MyPhraseFilter(AbstractPhraseFilter):\n\n    def apply(self, pair, **kwargs):\n        phrase, freq = pair\n        # return True to filter this phrase\n        if is_verb(phrase):\n            return True\n        return False\n\nselector = DefaultPhraseSelector(\n    phrase_filters=[MyPhraseFilter()], \n    use_default_phrase_filters=False\n)\n```\n\n考虑到有些过滤过程，使用按批处理可以显著提升速度(例如使用深度学习模型计算词性)，`phrase_filter`提供了一个`batch_apply`方法。\n\n举个例子，使用`baidu/LAC`来计算词性，从而实现Phrase的过滤：\n\n```python\n\nclass VerbPhraseFilter(AbstractPhraseFilter):\n\n    def __init__(self, batch_size=100):\n        super().__init__()\n        self.lac = LAC()\n        self.batch_size = batch_size\n\n    def batch_apply(self, batch_pairs, **kwargs):\n        predictions = []\n        for i in range(0, len(batch_pairs), self.batch_size):\n            batch_texts = [x[0] for x in batch_pairs[i: i + self.batch_size]]\n            batch_preds = self.lac.run(batch_texts)\n            predictions.extend(batch_preds)\n        candidates = []\n        for i in range(len(predictions)):\n            _, pos_tags = predictions[i]\n            if any(pos in ['v', 'vn', 'vd'] for pos in pos_tags):\n                continue\n            candidates.append(batch_pairs[i])\n        return candidates\n\nselector = DefaultPhraseSelector(\n    phrase_filters=[VerbPhraseFilter()], \n    use_default_phrase_filters=False\n)\n```\n\n### extractor\n\n`extractor`用于抽取分类器的特征。特征抽取器会在`reader`读取语料的时候进行必要信息的统计。因此`extractor`实现了`reader`的回调接口，所以在自定义特征抽取器的时候，需要同时继承`AbstractCorpusReadCallback`和`AbstractFeatureExtractor`。\n\n本库自带了以下几个特征抽取器：\n\n* `NgramExtractor`，`n-gram`特征抽取器，可以计算phrase的`pmi`特征\n* `IDFExtractor`，`idf`特征抽取器，可以计算phrase的`doc_freq`、`idf`特征\n* `EntropyExtractor`，`熵`特征抽取器，可以计算phrase的`左右熵`特征\n\n上述自带的特征抽取器，都是基于`n-gram`统计的，因此都支持`ngram`的选择，也就是都可以自定义`ngram_filter`来过滤不需要统计的`ngram`。本库自带了`DefaultNgramFilter`，并且默认启用。用户可以实现自己的`ngram_filter`来灵活选取合适的`ngram`。\n\n举个例子，我需要过滤掉`包含标点符号`的`ngram`：\n\n```python\nCHARACTERS = set('!\"#$%&\\'()*+,-./:;?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c，。？：“”【】「」')\n\nclass MyNgramFilter(AbstractNgramFiter):\n\n    def apply(self, ngram, **kwargs):\n        if any(x in CHARACTERS for x in ngram):\n            return True\n        return False\n\nautophrase = AutoPhrase(\n    reader=DefaultCorpusReader(tokenizer=JiebaTokenizer()),\n    selector=DefaultPhraseSelector(),\n    extractors=[\n        NgramsExtractor(N=4, ngram_filters=[MyNgramFilter()]), \n        IDFExtractor(ngram_filters=[MyNgramFilter()]), \n        EntropyExtractor(ngram_filters=[MyNgramFilter()]),\n    ]\n)\n# 开始挖掘\n...\n```\n\n用户可以继承`AbstractFeatureExtractor`实现自己的特征计算。只需要在构建autophrase实例的时候，把这些特征计算器传入即可，不需要做其他任何额外操作。\n\n举个例子，我增加一个`phrase是否是unigram`的特征：\n\n```python\nclass UnigramFeatureExtractor(AbstractFeatureExtractor，AbstractCorpusReadCallback):\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def extract(self, phrase, **kwargs):\n        parts = phrase.split(' ')\n        features = {\n            'is_unigram': 1 if len(parts) == 1 else 0\n        }\n        return features\n\n\nautophrase = AutoPhrase(\n    reader=DefaultCorpusReader(tokenizer=JiebaTokenizer()),\n    selector=DefaultPhraseSelector(),\n    extractors=[\n        NgramsExtractor(N=N), \n        IDFExtractor(), \n        EntropyExtractor(),\n        UnigramFeatureExtractor(),\n    ]\n)\n\n# 可以开始挖掘了\n...\n```\n\n### callback\n\n`callback`回调接口，可以提供phrase挖掘过程中的生命周期监听，并且实现一些稍微复杂的功能，例如`EarlyStopping`、`判断阈值Schedule`等。\n\n本库自带以下回调：\n\n* `LoggingCallback`提供挖掘过程的日志信息打印\n* `ConstantThresholdScheduler`在训练过程中调整阈值的回调\n* `EarlyStopping`早停，在指标没有改善的情况下停止训练\n\n用户可以自己继承`Callback`实现自己的逻辑。\n\n\n## 结果示例\n\n> 以下结果属于本库比较早期的测试效果，目前本库的代码更新比较大，返回结果和下述内容不太一致。仅供参考。\n\n新闻语料上的抽取结果示例：\n\n```bash\n成品油价格, 0.992766816097071\n股份制银行, 0.992766816097071\n公务船, 0.992766816097071\n中国留学生, 0.992766816097071\n贷款基准, 0.992766816097071\n欧足联, 0.992766816097071\n新局面, 0.992766816097071\n淘汰赛, 0.992766816097071\n反动派, 0.992766816097071\n生命危险, 0.992766816097071\n新台阶, 0.992766816097071\n知名度, 0.992766816097071\n新兴产业, 0.9925660976153782\n安全感, 0.9925660976153782\n战斗力, 0.9925660976153782\n战略性, 0.9925660976153782\n私家车, 0.9925660976153782\n环球网, 0.9925660976153782\n副校长, 0.9925660976153782\n流行语, 0.9925660976153782\n债务危机, 0.9925660976153782\n保险资产, 0.9920376397372204\n保险机构, 0.9920376397372204\n豪华车, 0.9920376397372204\n环境质量, 0.9920376397372204\n瑞典队, 0.9919345469537152\n交强险, 0.9919345469537152\n马卡报, 0.9919345469537152\n生产力, 0.9911077251879798\n```\n\n医疗对话语料的抽取示例：\n\n```bash\n左眉弓, 1.0\n支原体, 1.0\nmri, 1.0\n颈动脉, 0.9854149008885851\n结核病, 0.9670815675552518\n手术室, 0.9617546444783288\n平扫示, 0.9570324222561065\n左手拇指, 0.94\n双膝关节, 0.94\n右手中指, 0.94\n拇指末节, 0.94\ncm皮肤, 0.94\n肝胆脾, 0.94\n抗体阳性, 0.94\nigm抗体阳性, 0.94\n左侧面颊, 0.94\n膀胱结石, 0.94\n左侧基底节, 0.94\n腰椎正侧, 0.94\n软组织肿胀, 0.94\n手术瘢痕, 0.94\n枕顶部, 0.94\n左膝关节正侧, 0.94\n膝关节正侧位, 0.94\n腰椎椎体, 0.94\n承德市医院, 0.94\n性脑梗塞, 0.94\n颈椎dr, 0.94\n泌尿系超声, 0.94\n双侧阴囊, 0.94\n右颞部, 0.94\n肺炎支原体, 0.94\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luozhouyang/AutoPhraseX",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "autophrasex",
    "package_url": "https://pypi.org/project/autophrasex/",
    "platform": "",
    "project_url": "https://pypi.org/project/autophrasex/",
    "project_urls": {
      "Homepage": "https://github.com/luozhouyang/AutoPhraseX"
    },
    "release_url": "https://pypi.org/project/autophrasex/0.3.1/",
    "requires_dist": [
      "jieba",
      "naive-stopwords",
      "scikit-learn",
      "opencc"
    ],
    "requires_python": "",
    "summary": "Automated Phrase Mining from Massive Text Corpora in Python.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10445152,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8c239430f81747e16de587e026762e8ed9b20f45a15c2c4dbd6f8132c2f35c",
          "md5": "80995c01eddc10ac9afc757f1895ad43",
          "sha256": "a3b6aeaab79218eaa970553d3d2d8ab46d1e6c6a803004821501f0f0146a974a"
        },
        "downloads": -1,
        "filename": "autophrasex-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80995c01eddc10ac9afc757f1895ad43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15455,
        "upload_time": "2020-12-17T12:16:49",
        "upload_time_iso_8601": "2020-12-17T12:16:49.077240Z",
        "url": "https://files.pythonhosted.org/packages/fd/8c/239430f81747e16de587e026762e8ed9b20f45a15c2c4dbd6f8132c2f35c/autophrasex-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1f67136ca2e6d942e190c0aefa2ce7af10e9e8b3e69d4a82ba70e0f059399c7",
          "md5": "2c40f7c5531216f2c007325a0faa2b29",
          "sha256": "c7ac0082be7218a167f2aa7200fbbff64db8dd0bba98817756e1bdfd88a8f07d"
        },
        "downloads": -1,
        "filename": "autophrasex-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2c40f7c5531216f2c007325a0faa2b29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10666,
        "upload_time": "2020-12-17T12:16:50",
        "upload_time_iso_8601": "2020-12-17T12:16:50.145978Z",
        "url": "https://files.pythonhosted.org/packages/d1/f6/7136ca2e6d942e190c0aefa2ce7af10e9e8b3e69d4a82ba70e0f059399c7/autophrasex-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2899779cdbf7a48eae399e56c8c1598ce9c39ea744d83dc22b12f0d5c0842f9b",
          "md5": "f1dfa42ee0524eb5a7ed1bc1d31fef53",
          "sha256": "08f9a0225f6242c04a6d9764279c2bc083361e5d20f45fa5ca4095abde98e3c1"
        },
        "downloads": -1,
        "filename": "autophrasex-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1dfa42ee0524eb5a7ed1bc1d31fef53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15559,
        "upload_time": "2020-12-21T11:11:40",
        "upload_time_iso_8601": "2020-12-21T11:11:40.100585Z",
        "url": "https://files.pythonhosted.org/packages/28/99/779cdbf7a48eae399e56c8c1598ce9c39ea744d83dc22b12f0d5c0842f9b/autophrasex-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e1ea77a58d4c736a669615f9fb444721d6f3163d233616e8268b400c2d29414",
          "md5": "b10757274bd8f87e45ad6557e37494d8",
          "sha256": "833e251c4241349c23c48ae5ce9882cf53509fd54556de863ae68d07d6063b2e"
        },
        "downloads": -1,
        "filename": "autophrasex-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b10757274bd8f87e45ad6557e37494d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10946,
        "upload_time": "2020-12-21T11:11:41",
        "upload_time_iso_8601": "2020-12-21T11:11:41.206856Z",
        "url": "https://files.pythonhosted.org/packages/9e/1e/a77a58d4c736a669615f9fb444721d6f3163d233616e8268b400c2d29414/autophrasex-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbde8eb9d8274a72c728c42ffd2d240a38726536245d158794b5d6b1faa852d4",
          "md5": "3ef7cd361ef89ff9301297b1d75941e3",
          "sha256": "96c490a15f719170bc34e985da4540a3d15fc8de2a41db357bfc38b52ed647bd"
        },
        "downloads": -1,
        "filename": "autophrasex-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ef7cd361ef89ff9301297b1d75941e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19060,
        "upload_time": "2021-04-16T13:36:23",
        "upload_time_iso_8601": "2021-04-16T13:36:23.109928Z",
        "url": "https://files.pythonhosted.org/packages/cb/de/8eb9d8274a72c728c42ffd2d240a38726536245d158794b5d6b1faa852d4/autophrasex-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c744a14107a25a05a37014d1b9af8df040509e0a71a696624b0ed16304e9289",
          "md5": "aaa641634b894030e4da7a24fb618d9d",
          "sha256": "9f46737f94c3f19aa6bc75a85411bdfa3ea8d7a6defc51f82a2a935a1bf328c3"
        },
        "downloads": -1,
        "filename": "autophrasex-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aaa641634b894030e4da7a24fb618d9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13337,
        "upload_time": "2021-04-16T13:36:24",
        "upload_time_iso_8601": "2021-04-16T13:36:24.445149Z",
        "url": "https://files.pythonhosted.org/packages/9c/74/4a14107a25a05a37014d1b9af8df040509e0a71a696624b0ed16304e9289/autophrasex-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe0a15241143f4727a9afa8d71ac635f5a5ee3681fd9177a4c47191f53d8fcf1",
          "md5": "cb1e4831f0d1fbe1255d38bf471f1e4f",
          "sha256": "2fe11a54c186daf3ccfcdb57f3c3995064cde9a3a3b195ac534be11ed24ba0cc"
        },
        "downloads": -1,
        "filename": "autophrasex-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb1e4831f0d1fbe1255d38bf471f1e4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20311,
        "upload_time": "2021-05-20T16:35:13",
        "upload_time_iso_8601": "2021-05-20T16:35:13.261962Z",
        "url": "https://files.pythonhosted.org/packages/fe/0a/15241143f4727a9afa8d71ac635f5a5ee3681fd9177a4c47191f53d8fcf1/autophrasex-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da14ac9eb63a9a961d9fdf0f649b125429d5e2846b9fcc53a362bdaab707d67d",
          "md5": "55f44121eadccdb2783905419df3c66c",
          "sha256": "752911a7f769ccf580d8822ba0b49d6da76edbefbc37a8f069840c5b708184c1"
        },
        "downloads": -1,
        "filename": "autophrasex-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "55f44121eadccdb2783905419df3c66c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21783,
        "upload_time": "2021-05-20T16:35:14",
        "upload_time_iso_8601": "2021-05-20T16:35:14.588801Z",
        "url": "https://files.pythonhosted.org/packages/da/14/ac9eb63a9a961d9fdf0f649b125429d5e2846b9fcc53a362bdaab707d67d/autophrasex-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34468601caad56fc1bdc9d72e73c3c8f2b9a0d26eb14bd241de445229fbba362",
          "md5": "1cee0e38952fed7e4e97a776ea1d22fc",
          "sha256": "17ffd7fa3ab2dc32cf038a981bc667bfbb4b09964426bf84c842961b86cd6f4d"
        },
        "downloads": -1,
        "filename": "autophrasex-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cee0e38952fed7e4e97a776ea1d22fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20319,
        "upload_time": "2021-05-23T05:56:03",
        "upload_time_iso_8601": "2021-05-23T05:56:03.920169Z",
        "url": "https://files.pythonhosted.org/packages/34/46/8601caad56fc1bdc9d72e73c3c8f2b9a0d26eb14bd241de445229fbba362/autophrasex-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dfca34c2f0959d884b57b829ef61c57ae22cf1c675c9a1196254ccf7b4eaab1",
          "md5": "870c1a49068290dc19e620c8db9d8a39",
          "sha256": "a81ade30142bfe008868a46c61d5fea19220c673276cc0afd39c02c409ed876f"
        },
        "downloads": -1,
        "filename": "autophrasex-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "870c1a49068290dc19e620c8db9d8a39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21770,
        "upload_time": "2021-05-23T05:56:05",
        "upload_time_iso_8601": "2021-05-23T05:56:05.420394Z",
        "url": "https://files.pythonhosted.org/packages/5d/fc/a34c2f0959d884b57b829ef61c57ae22cf1c675c9a1196254ccf7b4eaab1/autophrasex-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34468601caad56fc1bdc9d72e73c3c8f2b9a0d26eb14bd241de445229fbba362",
        "md5": "1cee0e38952fed7e4e97a776ea1d22fc",
        "sha256": "17ffd7fa3ab2dc32cf038a981bc667bfbb4b09964426bf84c842961b86cd6f4d"
      },
      "downloads": -1,
      "filename": "autophrasex-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1cee0e38952fed7e4e97a776ea1d22fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20319,
      "upload_time": "2021-05-23T05:56:03",
      "upload_time_iso_8601": "2021-05-23T05:56:03.920169Z",
      "url": "https://files.pythonhosted.org/packages/34/46/8601caad56fc1bdc9d72e73c3c8f2b9a0d26eb14bd241de445229fbba362/autophrasex-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dfca34c2f0959d884b57b829ef61c57ae22cf1c675c9a1196254ccf7b4eaab1",
        "md5": "870c1a49068290dc19e620c8db9d8a39",
        "sha256": "a81ade30142bfe008868a46c61d5fea19220c673276cc0afd39c02c409ed876f"
      },
      "downloads": -1,
      "filename": "autophrasex-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "870c1a49068290dc19e620c8db9d8a39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21770,
      "upload_time": "2021-05-23T05:56:05",
      "upload_time_iso_8601": "2021-05-23T05:56:05.420394Z",
      "url": "https://files.pythonhosted.org/packages/5d/fc/a34c2f0959d884b57b829ef61c57ae22cf1c675c9a1196254ccf7b4eaab1/autophrasex-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}