{
  "info": {
    "author": "Rahul Kumar",
    "author_email": "rahulnkumar7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# custom-utils\nPip Package for Database Connectors, Alerter, Log Formatter etc\n\n\n***\n\n<p float=\"left\">\n  <img src=https://img.shields.io/pypi/v/custom-utils />\n  <img src=https://www.code-inspector.com/project/29426/score/svg />\n  <img src=https://img.shields.io/pypi/dm/custom-utils?logo=Python&style=social /> \n  <a href=\"https://github.com/RahulnKumar/custom-utils/blob/main/LICENSE\"><img alt=\"GitHub license\" src=\"https://img.shields.io/github/license/RahulnKumar/custom-utils\"></a>\n</p>\n\n\n## Table of Contents\n\n- [Installation](#Installation)\n- [Connector](#Connector)\n  - [S3 Connector](#S3_Connector)\n  - [MySQL Connector](#MySQL_Connector)\n  - [MongoDB Connector](#MongoDB_Connector)\n  - [BigQuery Connector](#BigQuery_Connector)\n\n- [Configurer](#Configurer)\n  - [Log Formatter](#Log_Formatter)\n  - [Profile Decorator](#Profile_Decorator)\n\n- [Alerter](#Alerter)\n  - [Slack Alerter](#Slack_Alerter)\n\n***\n\n## 1.  Installation<a id=\"Installation\" name=\"Installation\">    \n\n- **Installation from Pypi repository** (Any one)\n\n    `pip install custom-utils`  --> minimal installation  \n    `pip install custom-utils[full]` --> full installation  \n    `pip install custom-utils[s3,mysql,bigquery,mongodb]`  --> selective installation \n- **Installation from github repository** (Any one)  \n\n    `pip install git+https://github.com/rahulnkumar/custom-utils.git`  \n    `pip install git+https://github.com/rahulnkumar/custom-utils.git@<tag_no>`  \n    `pip install git+https://github.com/rahulnkumar/custom-utils.git@<branch_name>`    \n\n---\n\n\n## 2. Connector<a id=\"Connector\" name=\"Connector\">\n\n\n### 1. S3 Connector<a id=\"S3_Connector\" name=\"S3_Connector\">     \n\n**Code Snippet Sample :**\n```python\nfrom custom_utils.connector.s3 import S3\n\n# Uplaoding data to S3\ndemo = {\"Name\": \"Trell\", \"Age\": 4}\nS3.write_to_s3_bucket(python_data_object=demo,\n                             bucket='data-science-datas',\n                             sub_bucket='models/', file_name=\"demo.pickle\")\n\n# Doownlaoding data from S3\n\ndemo = S3.read_from_s3_bucket(bucket='data-science-datas',          \n                                         sub_bucket='models/',\n                                         file_name=\"demo.pickle\")\n```\n\n**S3 Connector Documentation**\n\n```\nclass S3(builtins.object)\n |  AWS S3 utility functions\n |  \n |  Static methods defined here:\n |  \n |  read_from_s3_bucket(bucket, sub_bucket, file_name)\n |      read data stored in S3 bucket\n |      :param string bucket: bucket name\n |      :param string sub_bucket: sub-bucket name\n |      :param string file_name: name of the file to be read\n |      :return old_data : python object stored in the S3\n |  \n |  upload_data_from_local_to_s3(model_file_name, bucket, sub_bucket)\n |      write data stored in local machine into S3 bucket from\n |      :param string bucket: bucket name\n |      :param string sub_bucket: sub-bucket name\n |      :param string file_name: name of the file to be written\n |      :return None\n |  \n |  write_to_s3_bucket(python_data_object, bucket, sub_bucket, file_name)\n |      write python objects/variables etc  into S3 bucket\n |      :param string bucket: bucket name\n |      :param string sub_bucket: sub-bucket name\n |      :param string file_name: name of the file to be written\n |      :return None\n```\n---\n\n\n---\n\n### 2. MySQL Connector<a id=\"MySQL_Connector\" name=\"MySQL_Connector\">  \n\n**Code Snippet Sample :**  \n```python\n# Query from Custom MySQL Database\nfrom custom_utils.connector.mysql import MySQL \nuser = \"***\"\npassword = \"***\"\nhost = \"***\"\nport = \"***\"\ndatabase = \"***\"\ndb_string = f\"mysql+mysqlconnector://{user}:{password}@{host}:{port}/{database}\"\nquery = \"select * from table_name limit 10\"\nmysql = MySQL(db_string=db_string)\ndf = mysql.get_data(query = query) \n```\n\n**MySQL Connector Documentaion**\n```\nclass MySQL(builtins.object)\n |  MySQL(db_string)\n |  \n |  MySQL database utility functions\n |  \n |  Methods defined here:\n |  \n |  __init__(self, db_string)\n |      initialisation method for MySQL Connector\n |      :param string db_string: mysql database connection string\n |  \n |  dump_data(self, data, table_name, mode='append')\n |      Execute a query in the mysql table\n |      :param pd.DataFrame data: dataframe to be appended or replaced\n |      :param string table_name: name of the the target table\n |      :param string mode: it can be either replace or append\n |      :return None\n |  \n |  execute_query(self, query)\n |      Execute a query in the mysql table\n |      :param string query: query for execution in the table\n |      :return :\n |  \n |  get_data(self, query)\n |      Fetch data from mysql as a dataframe.\n |      :param string query: query for fetching data from table\n |      :return pd.DataFrame data\n```\n\n---\n\n\n### 3.  MongoDB Connector<a id=\"MongoDB_Connector\" name=\"MongoDB_Connector\">\n\n**Code Snippet Sample :**  \n```python\nfrom custom_utils.connector.mongodb import MongoDB\nuri = \"****\"\ndb = \"***\"\ncollection = \"****\"\nmongo = MongoDb(uri = uri, db = db)\n\n#Reading with pull method\ndata =  mongo.pull_data(collection=collection, list_dict=list_dict)\n\n# Reading with fetch method\nquery = {'id': {'$in': [1,2]}}\ndata = mongo.fetch_data(collection, query=query, only_include_keys=[\"name\"])\n\n#Writing inot MongoDB\nmongo.push_data(collection = collection, data = data)\n\n#Updating value\nid_dict = {\"id\":\"2\"}\nset_dict = {\"$set\": {\"name\":\"ram\"}}\nmongo.update_value(id_dict, set_dict,collection=collection, upsert=True)\n\n# Deleting data\nmongo.delete_data(collection=collection, overall=False, condition_dict= {\"id\":None})\n\n```\n\n **MongoDB Connector Documentaion**\n```    \nclass MongoDB(builtins.object)\n |  MongoDB(db=None, uri=None)\n |  \n |  MongoDB utility functions.\n |  \n |  Methods defined here:\n |  \n |  __init__(self, db=None, uri=None)\n |      initialisation method for MongoDB connector\n |      :param str db: database name\n |      :param str uri: mongo uri string for establishing connection\n |  \n |  delete_data(self, collection, db=None, overall=False, condition_dict=None)\n |      Function for inserting data into db\n |      :param str db : database name\n |      :param str collection : collection name\n |      :param bool overall : delete whole collection if True\n |      :param dict condition_dict : query for deletion\n |      :return:\n |  \n |  fetch_data(self, collection, db=None, query={}, only_include_keys=[])\n |      function to fetch data from the given database and collection on given query\n |      :param str db : db_name in mongo\n |      :param str collection: collection name in mongo for database db\n |      :param dict query : execution query statement; default is {} which means fetch\n |                         all without any filters\n |      :param list only_include_keys : list of keys to be included while fetching rows\n |      :return: pd.DataFrame\n |  \n |  fetch_data_sorted(self, collection, db=None, pipeline=[])\n |      function to fetch data from the given database and collection on given query\n |      :param str db: db_name in mongo\n |      :param str collection: collection name in mongo for database db\n |      :param list pipeline: pipeline required to aggregate\n |      :return: pd.DataFrame\n |  \n |  pull_data(self, list_dict, collection, db=None)\n |      Function for inserting data into db\n |      :param str db : database name\n |      :param str collection : collection name\n |      :param list list_dict : query for fetching data\n |      :return: pd.DataFrame\n |  \n |  push_data(self, data, collection, db=None)\n |      Function for inserting data into db\n |      :param str db : database name\n |      :param str collection : collection name\n |      :param list/pd.DataFrame data : data to be inserted in the form of\n |                                      dataframe or list of dictionaries\n |      :return:\n |  \n |  update_value(self, id_dict, set_dict, collection, db=None, upsert=None)\n |      Function for updating data into db\n |      :param str db : database name\n |      :param str collection : collection name\n |      :param dict id_dict : query for updation\n |      :param dict set_dict : key and value dictionary to be updated\n |      :param bool upsert : whether to upsert or just update\n |      :return:\n |  \n |  upsert_json(self, output_json, upsert_keys, collection, db=None)\n |      Function for inserting data into db\n |      :param str db : database name\n |      :param str collection : collection name\n |      :param dict output_json : list of dictionaries where each dictionary is\n |                                a row with keys as column names\n |      :param list upsert_keys : keys to be upserted\n |      :return:\n |  \n |  ----------------------------------------------------------------------\n```\n---\n\n### 4.  BigQuery Connector<a id=\"BigQuery_Connector\" name=\"BigQuery_Connector\">\n\n**Code Snippet Sample :**  \n```python\n\n# Fetching data from BigQuery\nfrom custom_utils.connector.bigquery import BigQuery\nbq = BigQuery(read_big_query_project = \"****\",\n                    service_account_file_path=\"***.json\")\nquery = \"select * from `trellatale.trellDbDump.userLanguages` limit 2\"\ndf = bq.get_data(query)\n\n# Dumping Dataframe in BigQuery\nbq.dump_data(database=\"rahul_temp\", table=\"demo\", dataframe=df, mode=\"append\")\n\n# Executing any query in BigQuery\nquery = \"INSERT rahul_temp.Demo (id, userId) VALUES(1,1),(1,1)\"\nBigQuery.execute_query(query)\n\n# Streaming insert in BigQuery\nrow_to_insert = [{\"id\": 1, \"userid\": 1, \"languageId\": 58,\n             \"mode\":0,\"active\":1}]\nBigQuery.insert_rows_in_bigquery(dataset=\"rahul_temp\", table=\"Demo\", rows_to_insert=row_to_insert)\n\n```\n\n**BigQuery Connector Documentaion**\n```\nclass BigQuery(builtins.object)\n |  BigQuery(read_big_query_project, write_big_query_project, service_account_file_path)\n |  \n |  BigQuery database utility functions\n |  \n |  Methods defined here:\n |  \n |  __init__(self, read_big_query_project, write_big_query_project, service_account_file_path)\n |      initialisation method for BigQuery Connector\n |      :param str read_big_query_project : project used while reading from BigQuery\n |      :param str write_big_query_project: project used while writing into BigQuery\n |      :param str service_account_file_path: project specific BigQuery Credential\n |  \n |  dump_data(self, database=None, table=None, dataframe=None, mode='append')\n |      Dumps data into from BigQuery\n |      :param string database: target bigquery database\n |      :param string table: target table name\n |      :param pd.DataFrame dataframe: pandas dataframe for dumping into bigquery\n |      :param string mode: it can be either append or replace\n |  \n |  execute_query(self, query, query_config=None, timeout=900, max_retries=0, time_interval=5)\n |      Executes query from from BigQuery table\n |      :param string query: query for execution\n |      :param string query_cofig: config for parameterised query\n |      :param integer timeout : maximum bigquery execution timeout\n |      :param string max_retries: maximum retries if data is not fetched\n |      :param integer time_interval : time interval between retries\n |  \n |  get_data(self, query=None, query_config=None, max_retries=0, time_interval=5)\n |      Fetches data from from BigQuery\n |      :param string query: query for fetching data from table\n |      :param string query_cofig: config for parameterised query\n |      :param string max_retries: maximum retries if data is not fetched\n |      :param integer time_interval : time interval between retries\n |  \n |  insert_rows_array(self, dataset=None, table=None, rows_to_insert=None)\n |      Streaming insert into from BigQuery\n |      :param string dataset: target bigquery database\n |      :param string table: target table name\n |      :param list rows_to_insert: list of dictionaries where each dictionary is a\n |                                  row with keys as column names\n |  \n |  insert_rows_in_bigquery(self, dataset=None, table=None, rows_to_insert=None)\n |      Streaming insert into from BigQuery\n |      :param string dataset: target bigquery database\n |      :param string table: target table name\n |      :param  rows_to_insert: list of dictionaries where each dictionary is a\n |                              row with keys as column names\n```\n---\n\n\n## 3. Configurer<a id=\"Configurer\" name=\"Configurer\">   \n\n### 1. Profile Decorator<a id=\"Profile_Decorator\" name=\"Profile_Decorator\">    \n\n**Code Snippet Sample :**  \n```python\nfrom custom_utils.configurer.profiler import profiler\n@profiler(sort_by='cumulative', lines_to_print=10, strip_dirs=True)\ndef product_counter_v3():\n    return [1, 2, 3, 4, 5]\n```\n**Profiler Documentaion**\n```python\ndef profiler(output_file=None, sort_by='cumulative', lines_to_print=None, strip_dirs=False):\n    \"\"\"\n    A time profiler decorator\n\n    :param str output_file: Path of the output file. If only name of the file is given, it's saved in the current\n    directory. If it's None, the name of the decorated function is used.\n    :param str sort_by: SortKey enum or tuple/list of str/SortKey enum Sorting criteria for the Stats object. For a list\n    of valid string and SortKey refer to: https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats\n    :param int lines_to_print: Number of lines to print. Default (None) is for all the lines. This is useful in reducing\n    the size of the printout, especially that sorting by 'cumulative', the time consuming operations are printed toward\n    the top of the file.\n    :param bool strip_dirs: Whether to remove the leading path info from file names. This is also useful in reducing the\n    size of the printout\n    :return: Profile of the decorated function\n    \"\"\"\n```\n###  2.  Log Formatter<a id=\"Log_Formatter\" name=\"Log_Formatter\">\n\n**Code Snippet Sample :**\n```python\nfrom custom_utils.configurer.utils import LogFormatter\nLogFormatter.apply()\n```\n\n**Log Formatter Documentation**\n```\nclass LogFormatter(logging.Formatter):\n    \"\"\"Log Formatter class for trell ai usage\"\"\"\n\n    __date_format = '%d/%b/%Y:%H:%M:%S %Z'\n\n    @staticmethod\n    def apply(level=logging.INFO):\n        \"\"\"\n        Start logging in json format.\n        :return:\n```\n---\n\n\n## 4. Alerter<a id=\"Alerter\" name=\"Alerter\">    \n\n###  1.  Slack Alerter<a id=\"Slack_Alerter\" name=\"Slack_Alerter\">  \n\n\n**Code Snippet Sample :**\n```\nfrom custom_utils.slack_alerter import Alerter\ntry:\n    \"\"\"Write your code\"\"\"\nexcept:\n    \"\"\"Catch exceptions\"\"\"\n    Alerter.send_alert(message=message, url=url, userId=userId, send_error=True) \n```\n\n**Alerter Documentation :**\n```python\nclass Alerter(builtins.object)\n     |  Class for sending alerts and monitoring stats to a slack channel\n     |  \n     |  Static methods defined here:\n     |  \n     |  send_alert(message: str, url: str, user_id: str = None, send_error: bool = False)\n     |      This function send alert to a target channel tagging a user\n     |                         with a alert message and traceback error.\n     |      args:\n     |              message     : Pass the message to be displayed in the channel\n     |              url         : Pass webhook of target channel\n     |              user_id     : Slack user_id of user who needs to be tagged (\n     |              send_error  : This should be set True,\n     |                           if slack_alert is called while catching exception\n     |      returns: Nothing\n     |  \n     |  send_monitoring_stats(start: tuple, stop: tuple, message: str, url: str, user_id: str = None)\n     |      This function send run time and RAM usage for a cronjob\n     |      to a target channel tagging a user with a  message\n     |      \n     |      Args:\n     |              message : Pass the message to be displayed in the channel\n     |              url : Pass webhook of target channel\n     |              user_id : Slack user_id of user who needs to be tagged\n     |              start : this should be set to output of start_monitoring function\n     |              stop : this should be set to output of start_monitoring function\n     |  \n     |  start_monitoring()\n     |      function for initiating monitoring\n     |  \n     |  stop_monitoring()\n     |      function for end monitoring\n     |  \n     |  ----------------------------------------------------------------------\n```\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RahulnKumar/custom-utils",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "custom-utils",
    "package_url": "https://pypi.org/project/custom-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/custom-utils/",
    "project_urls": {
      "Homepage": "https://github.com/RahulnKumar/custom-utils"
    },
    "release_url": "https://pypi.org/project/custom-utils/0.0.2/",
    "requires_dist": [
      "json-utils",
      "psutil",
      "python-dotenv",
      "requests",
      "subprocess32",
      "google-cloud ; extra == 'bigquery'",
      "google-cloud-bigquery (==2.1.0) ; extra == 'bigquery'",
      "pandas-gbq ; extra == 'bigquery'",
      "tqdm (==4.49.0) ; extra == 'bigquery'",
      "SQLAlchemy ; extra == 'full'",
      "SQLAlchemy-JSONField ; extra == 'full'",
      "SQLAlchemy-Utils ; extra == 'full'",
      "boto ; extra == 'full'",
      "boto3 ; extra == 'full'",
      "google-cloud ; extra == 'full'",
      "google-cloud-bigquery (==2.1.0) ; extra == 'full'",
      "joblib ; extra == 'full'",
      "mysql-connector ; extra == 'full'",
      "mysql-replication ; extra == 'full'",
      "pandas-gbq ; extra == 'full'",
      "pymongo (==3.10.0) ; extra == 'full'",
      "tqdm (==4.49.0) ; extra == 'full'",
      "pymongo (==3.10.0) ; extra == 'mongodb'",
      "SQLAlchemy ; extra == 'mysql'",
      "SQLAlchemy-JSONField ; extra == 'mysql'",
      "SQLAlchemy-Utils ; extra == 'mysql'",
      "mysql-connector ; extra == 'mysql'",
      "mysql-replication ; extra == 'mysql'",
      "boto ; extra == 's3'",
      "boto3 ; extra == 's3'",
      "joblib ; extra == 's3'"
    ],
    "requires_python": ">=3.6.9",
    "summary": "Utilities for database connectors, slack alerter, loggers etc",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12024790,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bad675195c9307ada13162148e59830db08af5a5d85215ed47558bf2a0ed53bd",
          "md5": "4e2c7087781ec0ea3f1f9b2f41aadfc2",
          "sha256": "f1e23abfb60e5dc8b62826aa9acce5e68d9cb59d4f716cba2b99dfff70b3e37f"
        },
        "downloads": -1,
        "filename": "custom_utils-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e2c7087781ec0ea3f1f9b2f41aadfc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.9",
        "size": 7419,
        "upload_time": "2021-10-17T14:00:26",
        "upload_time_iso_8601": "2021-10-17T14:00:26.870533Z",
        "url": "https://files.pythonhosted.org/packages/ba/d6/75195c9307ada13162148e59830db08af5a5d85215ed47558bf2a0ed53bd/custom_utils-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe129a1893acc3f0e1c7d02228b204434d93503ca3af6faf51a3c287683845fa",
          "md5": "10b8876a19e98ba4f295869679906630",
          "sha256": "0e85b85473d3c6d2c40058f8266ef8cb1a8502877c3bc98ee5f2fe453d4d7096"
        },
        "downloads": -1,
        "filename": "custom-utils-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10b8876a19e98ba4f295869679906630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.9",
        "size": 9437,
        "upload_time": "2021-10-17T14:00:30",
        "upload_time_iso_8601": "2021-10-17T14:00:30.853129Z",
        "url": "https://files.pythonhosted.org/packages/fe/12/9a1893acc3f0e1c7d02228b204434d93503ca3af6faf51a3c287683845fa/custom-utils-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95d4bc3591d1b06d210b33a8044c0dca14e8f2228895284213ab49efab818ddc",
          "md5": "8b96c8abe7c00c9feed15c1b6c5e7ddb",
          "sha256": "3219af42a6503f05dc0b38a49124baac93ddc8dd5bd16c3e5ed760f340ba63e9"
        },
        "downloads": -1,
        "filename": "custom_utils-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b96c8abe7c00c9feed15c1b6c5e7ddb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.9",
        "size": 7534,
        "upload_time": "2021-10-17T15:32:24",
        "upload_time_iso_8601": "2021-10-17T15:32:24.921660Z",
        "url": "https://files.pythonhosted.org/packages/95/d4/bc3591d1b06d210b33a8044c0dca14e8f2228895284213ab49efab818ddc/custom_utils-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "132c3de06d9c31842546c105e70b3b1ff098ecae8bc110ea2a281ec87322f039",
          "md5": "2b7401eaaa1ea0d284b00deb7caf6511",
          "sha256": "5355595432c20f7a27db6683099e71dccad881097403c7f7835463f12929f50e"
        },
        "downloads": -1,
        "filename": "custom-utils-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b7401eaaa1ea0d284b00deb7caf6511",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.9",
        "size": 9611,
        "upload_time": "2021-10-17T15:32:27",
        "upload_time_iso_8601": "2021-10-17T15:32:27.623884Z",
        "url": "https://files.pythonhosted.org/packages/13/2c/3de06d9c31842546c105e70b3b1ff098ecae8bc110ea2a281ec87322f039/custom-utils-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5dd260e95b8f0bd81d09ebd008d0b7dfb838bbcb4560faa955721a0685d015f",
          "md5": "2c5f0185bf4355fe281e16848527644e",
          "sha256": "1ad6133b4f83a9636de9a57d88905308362a092c52bd11f1699aa70f6fe37ed8"
        },
        "downloads": -1,
        "filename": "custom_utils-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c5f0185bf4355fe281e16848527644e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.9",
        "size": 13066,
        "upload_time": "2021-11-15T09:38:11",
        "upload_time_iso_8601": "2021-11-15T09:38:11.045791Z",
        "url": "https://files.pythonhosted.org/packages/c5/dd/260e95b8f0bd81d09ebd008d0b7dfb838bbcb4560faa955721a0685d015f/custom_utils-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d1c40f2744ea7fce52cc5d57b1b50e4f25b500fbe9a296921a45043ee6a77ef",
          "md5": "34699a2f0e75412c993b96c9baf04b22",
          "sha256": "19e927566fd1cf04dffb916cb56163578f5970f42e61f7c82cdc2e4bff48be1e"
        },
        "downloads": -1,
        "filename": "custom-utils-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "34699a2f0e75412c993b96c9baf04b22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.9",
        "size": 15250,
        "upload_time": "2021-11-15T09:38:13",
        "upload_time_iso_8601": "2021-11-15T09:38:13.501139Z",
        "url": "https://files.pythonhosted.org/packages/0d/1c/40f2744ea7fce52cc5d57b1b50e4f25b500fbe9a296921a45043ee6a77ef/custom-utils-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5dd260e95b8f0bd81d09ebd008d0b7dfb838bbcb4560faa955721a0685d015f",
        "md5": "2c5f0185bf4355fe281e16848527644e",
        "sha256": "1ad6133b4f83a9636de9a57d88905308362a092c52bd11f1699aa70f6fe37ed8"
      },
      "downloads": -1,
      "filename": "custom_utils-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c5f0185bf4355fe281e16848527644e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.9",
      "size": 13066,
      "upload_time": "2021-11-15T09:38:11",
      "upload_time_iso_8601": "2021-11-15T09:38:11.045791Z",
      "url": "https://files.pythonhosted.org/packages/c5/dd/260e95b8f0bd81d09ebd008d0b7dfb838bbcb4560faa955721a0685d015f/custom_utils-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d1c40f2744ea7fce52cc5d57b1b50e4f25b500fbe9a296921a45043ee6a77ef",
        "md5": "34699a2f0e75412c993b96c9baf04b22",
        "sha256": "19e927566fd1cf04dffb916cb56163578f5970f42e61f7c82cdc2e4bff48be1e"
      },
      "downloads": -1,
      "filename": "custom-utils-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "34699a2f0e75412c993b96c9baf04b22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.9",
      "size": 15250,
      "upload_time": "2021-11-15T09:38:13",
      "upload_time_iso_8601": "2021-11-15T09:38:13.501139Z",
      "url": "https://files.pythonhosted.org/packages/0d/1c/40f2744ea7fce52cc5d57b1b50e4f25b500fbe9a296921a45043ee6a77ef/custom-utils-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}