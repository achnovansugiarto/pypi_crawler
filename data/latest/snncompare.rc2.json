{
  "info": {
    "author": "a-t-0",
    "author_email": "no-email@no-email.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# networkx-to-lava-nc\n\nThis module compares SNN algorithms to their default/Neumann implementations.\nThe user can specify an SNN and \"normal\" algorithm which take as input a\nnetworkx graph, and compute some graph property as output. The output of the\nSNN is then compared to the \"normal\" algorithm as \"ground truth\", in terms of:\n\n- Score: How many results the SNN algorithm computed correctly (from a set of input\n  graphs).\n- Runtime\n  In theory, the score should always be 100% for the SNN, as it should be an\n  exact SNN implementation of the ground truth algorithm. This comparison is\n  mainly relevant for the additions of brain adaptation and simulated radiation.\n\n## Brain adaptation\n\nFor each SNN algorithm that the user specifies, the user can also specify a\nform of brain-inspired adaptation. This serves to increase the robustness of\nthe SNN against radiation effects. The brain adaptation can be called from a\nseparate pip package called: `adaptivesnn`.\n\n## Radiation\n\nA basic form of radiation effects is modelled on the SNNs. For example,\nradiation is modelled as yielding permanent activity termination for random\nneurons.\n\nIt is noted that the accuracy of the modelling of the neuronal effects\ninduced by the radiation is a function of the underlying hardware platforms.\nFor example, on the Intel Loihi chips, the memory/routing and computations\nare somewhat intertwined from what I understood. This would suggest that\nradiation effects may yield errors that prevent a computation being executed\nat all, instead of a computation being corrupted, if for example a memory\naddress is corrupted. (If that memory, for example, were to orchestrate some\ngroup of neurons to do something, but instead orchestrates an inactive set of\nneurons to perform some computation). In such cases, \"neuronal- & synaptic\"\nadaptation could be the best in the world, but nothing would happen with it if\nthe neurons don't get the right input/send the output to the wrong place.\n\nIn hardware platforms where neurons and synapses have a more physical\nimplementation on chip, the adaptation may be more effective to increase the\nradiation robustness.\n\n## Backends\n\nSince the effectiveness of the adaptation mechanisms, in terms of radiation\nrobustness, is a function of neuromorphic hardware platform, multiple backends\nare supported. These backends also allow for different neuronal and synaptic\nmodels. Currently the following backends are supported:\n\n- A self-made networkx SNN simulator (LIF-neurons)\n- Lava-nc simulator v0.5.0 (LIF-neurons)\n\n## Algorithms\n\nDifferent SNN implementations may use different encoding schemes, such as\nsparse coding, population coding and/or rate coding. In population coding,\nadaptation may be realised in the form of larger populations, whereas in rate\ncoding, adaptation may be realised through varying the spike-rate. This implies\nthat different algorithms may benefit from different types of adaptation.\nHence, an overview is included of the implemented SNN algorithms and their\nrespective compatibilities with adaptation and radiation implementations:\n\n| Algorithm                            | Encoding | Adaptation | Radiation    |\n| ------------------------------------ | -------- | ---------- | ------------ |\n| Minimum Dominating Set Approximation | Sparse   | Redundancy | Neuron Death |\n|                                      |          |            |              |\n|                                      |          |            |              |\n\n### Minimum Dominating Set Approximation\n\nThis is an implementation of the distributed algorithm presented by Alipour et al.\n\n- *Input*: Non-triangle, planar Networkx graph. (Non triangle means there\n  should not be any 3 nodes that are all connected with each other (forming a\n  triangle)). Planar means that if you lay-out the graph on a piece of paper, no\n  lines intersect (that you can roll it out on a 2D plane).\n- *Output*: A set of nodes that form a dominating set in the graph.\n\n*Description:* The algorithm basically consists of `k` rounds, where you can\nchoose `k` based on how accurate you want the approximation to be, more rounds\n(generally) means more accuracy. At the start each node `i` gets 1 random\nnumber `r_i`. This is kept constant throughout the entire algorithm. Then for\nthe first round:\n\n- Each node `i` computes how many neighbours (degree) `d_i` it has.\n- Then it adds `r_i+d_i=w_i`.\n  In all consecutive rounds:\n- Each node `i` \"computes\" which neighbour has the highest weight `w_j`, and\n  gives that node 1 mark/point. Then each node `i` has some mark/score `m_i`.\n  Next, the weight `w_i=r_i+m_i` is computed (again) and the next round starts.\n  This last round is repeated until `k` rounds are completed. At the end, the\n  nodes with a non-zero mark/score `m_i` are selected to form the dominating set.\n\n## Experiment Stages\n\nThe experiment generates some input graphs, the SNN algorithm, a copied SNN\nwith some form of adaptation, and two copies with radiation (one with-/out\nadaptation). Then it simulates those SNNs for \"as long as it takes\" (=implicit\nin the algorithm specification), and computes the results of these 4 SNNs based\non the \"ground truth\" Neumann/default algorithm.\n\nThis experiment is executed in 4 stages:\n\nInput: Experiment configuration. Which consists of:\nSubInput: Run configuration within an experiment.\nStage 1: Create networkx graphs that will be propagated.\nStage 2: Create propagated networkx graphs (at least one per timestep).\nStage 3: Visaualisation of the networkx graphs over time.\nStage 4: Post-processed performance data of algorithm and adaptation\nmechanism.\n\n## Running Experiment\n\nYou can run the experiment with command (to run the experiment using the\nnetworkx backend):\n\n```\npip install snncompare\npip install https://github.com/a-t-0/lava/archive/refs/tags/v0.5.1.tar.gz\nulimit -n 800000\npython -m src\n```\n\nAnd run tests with:\n\n```\npython -m pytest\n```\n\nGet help with:\n\n```\npython -m src --halp\n```\n\nThis generates the graphs from the default experiment configurations, and\noutputs the graphs in json format to the `results/` directory, and outputs\nthe graph behaviour to: `latex/Images/graphs/`.\n\n## Test Coverage\n\nDevelopers can use:\n\n```\nconda env create --file environment.yml\nconda activate snncompare\nulimit -n 800000\npython -m pytest\n```\n\nAnd the respective output is listed below, with a test coverage of `65%`:\n\n```\n============================ test session starts ==============================\nplatform linux -- Python 3.8.13, pytest-7.2.0, pluggy-1.0.0\nrootdir: /home/name/git/snncompare, configfile: pyproject.toml, testpaths: tests\nplugins: cov-4.0.0\ncollected 82 items\n\nexperiment_settings/test_generic_experiment_settings.py ....           \\[ 4%\\]\nexperiment_settings/test_generic_run_settings.py ....                  \\[ 9%\\]\nexperiment_settings/test_supported_settings_adaptation.py ......       \\[17%\\]\nexperiment_settings/test_supported_settings_iteration.py .....         \\[23%\\]\nexperiment_settings/test_supported_settings_m_vals.py .....            \\[29%\\]\nexperiment_settings/test_supported_settings_max_graph_size.py .....    \\[35%\\]\nexperiment_settings/test_supported_settings_max_max_graphs.py .....    \\[41%\\]\nexperiment_settings/test_supported_settings_min_graph_size.py ....     \\[46%\\]\nexperiment_settings/test_supported_settings_min_max_graphs.py ....     \\[51%\\]\nexperiment_settings/test_supported_settings_overwrite_sim_results.py ..\\[53%\\]\nexperiment_settings/test_supported_settings_overwrite_visualisation.py \\[56%\\]\nexperiment_settings/test_supported_settings_radiation.py ......        \\[63%\\]\nexperiment_settings/test_supported_settings_seed.py ..                 \\[65%\\]\nexperiment_settings/test_supported_settings_simulators.py ....         \\[70%\\]\nexperiment_settings/test_supported_settings_size_and_max_graphs.py ....\\[76%\\]\nexport_results/performed_stage/test_performed_stage_TFFF.py .          \\[78%\\]\nexport_results/performed_stage/test_performed_stage_TTFF.py .          \\[79%\\]\nexport_results/performed_stage/test_performed_stage_TTTF.py .          \\[80%\\]\nexport_results/performed_stage/test_performed_stage_TTTT.py .          \\[81%\\]\ngraph_generation/test_get_graph.py .                                   \\[82%\\]\ngraph_generation/test_rand_network_generation.py ..                    \\[85%\\]\nsimulation/test_cyclic_graph_propagation.py .                          \\[86%\\]\nsimulation/test_has_recurrent_edge_lava.py .....                       \\[92%\\]\nsimulation/test_has_recurrent_edge_networkx.py .....                   \\[98%\\]\nsimulation/test_rand_network_propagation.py .                          \\[00%\\]\n\n## ---------- coverage: platform linux, python 3.8.13-final-0 -----------\nName                                                       Stmts   Miss  Cover\n\n## src/__init__.py                                                0    0  100%\n\nsrc/snncompare/__init__.py                                        2    0  100%\nsrc/snncompare/__main__.py                                       13   13    0%\nsrc/snncompare/exp_setts/Adaptation_Rad_settings.py              16    0  100%\nsrc/snncompare/exp_setts/Experiment_runner.py                   110    9   92%\nsrc/snncompare/exp_setts/Scope_of_tests.py                       39   17   56%\nsrc/snncompare/exp_setts/Supported_algorithms.py                  5    0  100%\nsrc/snncompare/exp_setts/Supported_experiment_settings.py        57    4   93%\nsrc/snncompare/exp_setts/Supported_run_settings.py               18    2   89%\nsrc/snncompare/exp_setts/__init__.py                              0    0  100%\nsrc/snncompare/exp_setts/create_testobject.py                    61   45   26%\nsrc/snncompare/exp_setts/verify_experiment_settings.py          123   12   90%\nsrc/snncompare/exp_setts/verify_run_completion.py                 4    1   75%\nsrc/snncompare/exp_setts/verify_run_settings.py                  31    8   74%\nsrc/snncompare/export_results/Output.py                         114   80   30%\nsrc/snncompare/export_results/Output_stage_12.py                  5    0  100%\nsrc/snncompare/export_results/Output_stage_34.py                 13    5   62%\nsrc/snncompare/export_results/Plot_to_tex.py                     75   59   21%\nsrc/snncompare/export_results/__init__.py                         0    0  100%\nsrc/snncompare/export_results/check_json_graphs.py               12   12    0%\nsrc/snncompare/export_results/check_nx_graphs.py                  9    7   22%\nsrc/snncompare/export_results/export_json_results.py             37   21   43%\nsrc/snncompare/export_results/export_nx_graph_to_json.py         42    8   81%\nsrc/snncompare/export_results/helper.py                          39    2   95%\nsrc/snncompare/export_results/load_json_to_nx_graph.py           64   31   52%\nsrc/snncompare/export_results/load_pickles_get_results.py        22   18   18%\nsrc/snncompare/export_results/plot_graphs.py                     36    9   75%\nsrc/snncompare/export_results/verify_json_graphs.py              21    5   76%\nsrc/snncompare/export_results/verify_nx_graphs.py                42   10   76%\nsrc/snncompare/export_results/verify_stage_1_graphs.py           23   10   57%\nsrc/snncompare/export_results/verify_stage_2_graphs.py            1    0  100%\nsrc/snncompare/export_results/verify_stage_3_graphs.py            1    0  100%\nsrc/snncompare/export_results/verify_stage_4_graphs.py            1    0  100%\nsrc/snncompare/graph_generation/Used_graphs.py                   95   25   74%\nsrc/snncompare/graph_generation/__init__.py                       0    0  100%\nsrc/snncompare/graph_generation/adaptation/__init__.py            0    0  100%\nsrc/snncompare/graph_generation/adaptation/redundancy.py         59    5   92%\nsrc/snncompare/graph_generation/brain_adaptation.py              78   78    0%\nsrc/snncompare/graph_generation/convert_networkx_to_lava.py     117    9   92%\nsrc/snncompare/graph_generation/get_graph.py                     76    3   96%\nsrc/snncompare/graph_generation/helper_network_structure.py     144  114   21%\nsrc/snncompare/graph_generation/radiation/Radiation_damage.py    71   28   61%\nsrc/snncompare/graph_generation/radiation/__init__.py             0    0  100%\nsrc/snncompare/graph_generation/snn_algo/__init__.py              0    0  100%\nsrc/snncompare/graph_generation/snn_algo/mdsa_snn_algo.py       110    1   99%\nsrc/snncompare/graph_generation/stage_1_get_input_graphs.py      85   14   84%\nsrc/snncompare/helper.py                                        276  167   39%\nsrc/snncompare/import_results/__init__.py                         0    0  100%\nsrc/snncompare/import_results/check_completed_stages.py          77   21   73%\nsrc/snncompare/import_results/read_json.py                       37    4   89%\nsrc/snncompare/import_results/stage_1_load_input_graphs.py       28   20   29%\nsrc/snncompare/old_conversion.py                                 59   49   17%\nsrc/snncompare/process_results/__init__.py                        0    0  100%\nsrc/snncompare/process_results/get_alipour_nodes.py              17    0  100%\nsrc/snncompare/process_results/get_mdsa_results.py               54    3   94%\nsrc/snncompare/process_results/process_results.py                36    3   92%\nsrc/snncompare/process_results/stage_2_propagate_graphs.py        0    0  100%\nsrc/snncompare/simulation/LIF_neuron.py                         120   11   91%\nsrc/snncompare/simulation/__init__.py                             0    0  100%\nsrc/snncompare/simulation/run_on_lava.py                         24    2   92%\nsrc/snncompare/simulation/run_on_networkx.py                     51    3   94%\nsrc/snncompare/simulation/stage2_sim.py                          25    3   88%\nsrc/snncompare/simulation/verify_graph_is_lava_snn.py            14    4   71%\nsrc/snncompare/simulation/verify_graph_is_networkx_snn.py        31    7   77%\nsrc/snncompare/simulation/verify_graph_is_snn.py                 12    0  100%\nsrc/snncompare/verification_generic.py                           10    2   80%\n\nTOTAL                                                            2742    964    65%\nCoverage XML written to file cov.xml\n\n=================== 82 passed, 1 warning in 415.57s (0:06:55) =======================\n\n```\n\nAnd for type checking:\n\n```\nmypy --disallow-untyped-calls --disallow-untyped-defs tests/export_results/performed_stage/test_performed_stage_TTFF.py\n```\n\n### Releasing pip package update\n\nTo udate the Python pip package, one can first satisfy the following requirements:\n\n```\npip install --upgrade pip setuptools wheel\npip install twine\n```\n\nFollowed by updating the package with:\n\n```\npython3 setup.py sdist bdist_wheel\npython -m twine upload dist/*\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/a-t-0/snncompare",
    "keywords": "",
    "license": "AGPLv3",
    "maintainer": "a-t-0",
    "maintainer_email": "no-email@no-email.org",
    "name": "snncompare",
    "package_url": "https://pypi.org/project/snncompare/",
    "platform": null,
    "project_url": "https://pypi.org/project/snncompare/",
    "project_urls": {
      "Homepage": "https://github.com/a-t-0/snncompare"
    },
    "release_url": "https://pypi.org/project/snncompare/0.0.7/",
    "requires_dist": [
      "jsons (>=1.6.3)",
      "matplotlib (>=3.6.1)",
      "networkx (>=2.8.7)",
      "numpy (>=1.23.4)",
      "pytest-cov (>=4.0.0)"
    ],
    "requires_python": ">=3.10",
    "summary": "compares snn algorithms against neumann algorithms",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15655731,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "196249e5c66f44c801b958029763a1ab4ade6a6cb54161f3e1c5c093ecd90ae2",
          "md5": "0e222de637e1d756dee0d5149209d89f",
          "sha256": "b217d639362c6c643002197f192d499068b3b6825cf44d93b3ff602929428a96"
        },
        "downloads": -1,
        "filename": "snncompare-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e222de637e1d756dee0d5149209d89f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 123686,
        "upload_time": "2022-11-03T13:00:31",
        "upload_time_iso_8601": "2022-11-03T13:00:31.997400Z",
        "url": "https://files.pythonhosted.org/packages/19/62/49e5c66f44c801b958029763a1ab4ade6a6cb54161f3e1c5c093ecd90ae2/snncompare-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90bd5279b290d4a26f2dba4ec2e4dcd7be0ce3d62bdfab28442156ff091eee5b",
          "md5": "2a39d8df51c4bdb3ba15651606a293e9",
          "sha256": "61ae6bd04070f7e144a314d182b9bec4a9475336a93bd795d7cbea480adb84d2"
        },
        "downloads": -1,
        "filename": "snncompare-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2a39d8df51c4bdb3ba15651606a293e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 96233,
        "upload_time": "2022-11-03T13:00:35",
        "upload_time_iso_8601": "2022-11-03T13:00:35.927823Z",
        "url": "https://files.pythonhosted.org/packages/90/bd/5279b290d4a26f2dba4ec2e4dcd7be0ce3d62bdfab28442156ff091eee5b/snncompare-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "567a055f437b8a5bbce79cb9685591c822260860611ba44aac9bd30d9f8519db",
          "md5": "148f680dfddec1aef0fb92a71c8208c4",
          "sha256": "eb7cd79733f96a3f48efa90ebb2185d4749c6490421cfa10336f347f23caa817"
        },
        "downloads": -1,
        "filename": "snncompare-0.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "148f680dfddec1aef0fb92a71c8208c4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.10",
        "size": 125130,
        "upload_time": "2022-11-04T13:57:06",
        "upload_time_iso_8601": "2022-11-04T13:57:06.212151Z",
        "url": "https://files.pythonhosted.org/packages/56/7a/055f437b8a5bbce79cb9685591c822260860611ba44aac9bd30d9f8519db/snncompare-0.0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "774798f53ebc9a0be61404c41b47186018222a64a19435e06e647e62266fa048",
          "md5": "f266c305d1b728accd2692aef2b1d405",
          "sha256": "c47095e029e411477c25e9c58446e8ec57c511258341d795ffb7c627b808d0f3"
        },
        "downloads": -1,
        "filename": "snncompare-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f266c305d1b728accd2692aef2b1d405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 97066,
        "upload_time": "2022-11-04T13:57:08",
        "upload_time_iso_8601": "2022-11-04T13:57:08.509900Z",
        "url": "https://files.pythonhosted.org/packages/77/47/98f53ebc9a0be61404c41b47186018222a64a19435e06e647e62266fa048/snncompare-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "567a055f437b8a5bbce79cb9685591c822260860611ba44aac9bd30d9f8519db",
        "md5": "148f680dfddec1aef0fb92a71c8208c4",
        "sha256": "eb7cd79733f96a3f48efa90ebb2185d4749c6490421cfa10336f347f23caa817"
      },
      "downloads": -1,
      "filename": "snncompare-0.0.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "148f680dfddec1aef0fb92a71c8208c4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.10",
      "size": 125130,
      "upload_time": "2022-11-04T13:57:06",
      "upload_time_iso_8601": "2022-11-04T13:57:06.212151Z",
      "url": "https://files.pythonhosted.org/packages/56/7a/055f437b8a5bbce79cb9685591c822260860611ba44aac9bd30d9f8519db/snncompare-0.0.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "774798f53ebc9a0be61404c41b47186018222a64a19435e06e647e62266fa048",
        "md5": "f266c305d1b728accd2692aef2b1d405",
        "sha256": "c47095e029e411477c25e9c58446e8ec57c511258341d795ffb7c627b808d0f3"
      },
      "downloads": -1,
      "filename": "snncompare-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "f266c305d1b728accd2692aef2b1d405",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 97066,
      "upload_time": "2022-11-04T13:57:08",
      "upload_time_iso_8601": "2022-11-04T13:57:08.509900Z",
      "url": "https://files.pythonhosted.org/packages/77/47/98f53ebc9a0be61404c41b47186018222a64a19435e06e647e62266fa048/snncompare-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}