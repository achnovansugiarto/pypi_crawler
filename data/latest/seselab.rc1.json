{
  "info": {
    "author": "Pablo Rauzy",
    "author_email": "pr_NOSPAM@up8.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "SeseLab: a software platform for teaching physical attacks\n==========================================================\n\nAnyone following computer security related news will agree that it is important to teach a minimum of security to computer science students,\nand that at least the existence of side channel attacks is part of this strict minimum that they should be aware of.\n\nThe toolset required for carrying out a side channel attack is costly and bulky,\nand its usage requires specific training that most computer science student do not have.\n\nSeseLab is a software platform that can be used in any computer room where Python 3 is installed.\nIt allows students to simulate physical attacks (e.g., Simple Power Analysis and BellCoRe) on cryptographic implementations.\n\nFor that it simulates a simple CPU (e.g., there is no cache) that uses a simplified assembly language which can be learned and used over the course of a lab session.\n\nIt comes with a bignum library written in this assembly language which can be used to implement cryptographic primitive such as a square-and-multiply algorithm for modular exponentiation.\n\n## Installation\n\nYou can either install SeseLab from [PyPI](https://pypi.org/project/seselab/) using pip with the following command:\n\n    $ pip3 install seselab\n\nOr you can download its [source code](https://code.up8.edu/pablo/seselab) and run the following command in the root directory of the repository:\n\n    $ pip3 install .\n\n## Usage\n\nYou can call the `seselab` tool either directly or with `python3 -m seselab`.\n\n## SeseLab assembly language\n\nAn 8-bits Harvard architecture is simulated.\n\nThere are 32 registers and 1M memory cells.\n\nRegister 31 is used for return address, and register 30 is used for stack pointer.\n\nThere are 25 instructions:\n\n* `nop`: does nothing;\n* `mov dst val`: copies the value of `val` in `dst`;\n* `not dst val`: writes the bitwise negation of `val` in `dst`;\n* `and dst val1 val2`: writes the bitwise logical and of `val1` and `val2` in `dst`;\n* `orr dst val1 val2`: writes the bitwise logical or of `val1` and `val2` in `dst`;\n* `xor dst val1 val2`: writes the bitwise exclusive or of `val1` and `val2` in `dst`;\n* `lsl dst val1 val2`: writes `val1` shifted by `val2` bits to the left in `dst`;\n* `lsr dst val1 val2`: writes `val1` shifted by `val2` bits to the right in `dst`;\n* `min dst val1 val2`: writes the smallest of `val1` and `val2` in `dst`;\n* `max dst val1 val2`: writes the bigest of `val1` and `val2` in `dst`;\n* `add dst val1 val2`: writes the sum of `val1` and `val2` in `dst`;\n* `sub dst val1 val2`: writes the difference of `val1` and `val2` in `dst`;\n* `mul dst val1 val2`: writes the product of `val1` and `val2` in `dst`;\n* `div dst val1 val2`: writes the quotient of `val1` devided by `val2` in `dst`;\n* `mod dst val1 val2`: writes the remainder of `val1` devided by `val2` in `dst`;\n* `ret`: jumps to the instruction pointed to by register `r31`;\n* `cal addr`: write next instruction index in `r31` then jumps to `addr`;\n* `cmp dst val1 val2`: writes 1 in `dst` if `val1` < `val2`, -1 if `val1` > `val2`, 0 otherwise;\n* `jmp addr`: jumps to `addr`\n* `beq addr val1 val2`: jumps to `addr` if `val1` = `val2`;\n* `bne addr val1 val2`: jumps to `addr` if `val1` ≠ `val2`;\n* `prn val`: prints the decimal value of `val`;\n* `prx val`: prints the hexadecimal value of `val`;\n* `prc val`: prints the ASCII character of value `val`;\n* `prs addr val`: prints the string starting at address `addr` and of length `val`.\n\nThe values (`val`, `val1`, `val2`) are either :\n\n* an immediate value, written `#N`: `#13`, `#42`, `#51`, etc. ;\n* a register, written `rN`: `r0`, `r1`, …, `r31` ;\n* a memory cell, written `@N`: (`@0`, `@1`, etc. ;\n* a dereferenced pointer, written `!val`: `!r2`, `!@100`, etc. (note that `!#93` is the same as `@93`) ;\n* this last notation also accept an offset, written after a comma: `!r12,\\#-3`, `!r12,r2`, etc.\n\nValid destinations (`dst`) are writable values, i.e., any of the above except for immediate values.\n\nAdresses (`addr`) are given either as values in which case they correspond to the instruction index in the code, or as a label.\nLabels can be defined anywhere using the `label:` syntax and their value is the index of the instruction that immidiately follow them.\n\nThere are two additional instructions:\n\n* `.use bignum` which loads the packaged bignum library;\n* `.include file.asm` which loads `file.asm`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pablo.rauzy.name/software.html#seselab",
    "keywords": "",
    "license": "GNU AGPL v3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "seselab",
    "package_url": "https://pypi.org/project/seselab/",
    "platform": "",
    "project_url": "https://pypi.org/project/seselab/",
    "project_urls": {
      "Homepage": "https://pablo.rauzy.name/software.html#seselab"
    },
    "release_url": "https://pypi.org/project/seselab/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SeseLab: a software platform for teaching physical attacks",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8201604,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed0997cfd31395375f2feb1d1cf9437dc6a8bf8979d7f100da853eaaf5c97573",
          "md5": "ff6e5cee6733375857f7cd41c9ae99a0",
          "sha256": "8e7f60f82daaa8b0578a9e2a3a0e25ed030773eb1343bc2d055292f3e9f92f6b"
        },
        "downloads": -1,
        "filename": "seselab-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff6e5cee6733375857f7cd41c9ae99a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10986,
        "upload_time": "2020-09-16T17:12:24",
        "upload_time_iso_8601": "2020-09-16T17:12:24.951952Z",
        "url": "https://files.pythonhosted.org/packages/ed/09/97cfd31395375f2feb1d1cf9437dc6a8bf8979d7f100da853eaaf5c97573/seselab-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ec0590957808786e0fbf6c3d0debc0fadf63bb005dec3c82b46c0ee69f2276c",
          "md5": "36a333053a7a7867294be24490c0847b",
          "sha256": "e595dac99ceb8f80a6c4c29015ddda06335c4d9c5be0c2b34ece1d42c77ba127"
        },
        "downloads": -1,
        "filename": "seselab-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36a333053a7a7867294be24490c0847b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11105,
        "upload_time": "2020-09-16T17:12:27",
        "upload_time_iso_8601": "2020-09-16T17:12:27.144230Z",
        "url": "https://files.pythonhosted.org/packages/0e/c0/590957808786e0fbf6c3d0debc0fadf63bb005dec3c82b46c0ee69f2276c/seselab-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed0997cfd31395375f2feb1d1cf9437dc6a8bf8979d7f100da853eaaf5c97573",
        "md5": "ff6e5cee6733375857f7cd41c9ae99a0",
        "sha256": "8e7f60f82daaa8b0578a9e2a3a0e25ed030773eb1343bc2d055292f3e9f92f6b"
      },
      "downloads": -1,
      "filename": "seselab-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff6e5cee6733375857f7cd41c9ae99a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10986,
      "upload_time": "2020-09-16T17:12:24",
      "upload_time_iso_8601": "2020-09-16T17:12:24.951952Z",
      "url": "https://files.pythonhosted.org/packages/ed/09/97cfd31395375f2feb1d1cf9437dc6a8bf8979d7f100da853eaaf5c97573/seselab-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ec0590957808786e0fbf6c3d0debc0fadf63bb005dec3c82b46c0ee69f2276c",
        "md5": "36a333053a7a7867294be24490c0847b",
        "sha256": "e595dac99ceb8f80a6c4c29015ddda06335c4d9c5be0c2b34ece1d42c77ba127"
      },
      "downloads": -1,
      "filename": "seselab-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "36a333053a7a7867294be24490c0847b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11105,
      "upload_time": "2020-09-16T17:12:27",
      "upload_time_iso_8601": "2020-09-16T17:12:27.144230Z",
      "url": "https://files.pythonhosted.org/packages/0e/c0/590957808786e0fbf6c3d0debc0fadf63bb005dec3c82b46c0ee69f2276c/seselab-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}