{
  "info": {
    "author": "Jon Crall",
    "author_email": "jon.crall@kitware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "\nNetHarn - a PyTorch Network Harness\n-----------------------------------\n\n|GitlabCIPipeline| |GitlabCICoverage| |Pypi| |Downloads| \n\n\nUPDATE 2021-10-05: Netharn as a Training loop will no longer be maintained. Use\npytorch-lightning instead. This library may slowly morph into an extension of\nlightning.\n\n\nThe main webpage for this project is: https://gitlab.kitware.com/computer-vision/netharn\n\nIf you want a framework for your pytorch training loop that\n(1) chooses directory names based on hashes of hyperparameters,\n(2) can write a single-file deployment of your model by statically auto-extracting the in-code definition of the model topology and zipping it with the weights, \n(3) has brief terminal output and a rich logging output, \n(4) has rule-based monitoring of validation loss and can reduce the learning rate or early stop, \n(5) has tensorboard and/or matplotlib visualizations of training statistics, and \n(6) is designed to be extended, then you might be interested in NetHarn. \n\nNAME:\n    NetHarn (pronounced \"net-harn\")\nFRAMEWORK:\n    PyTorch\nFEATURES: \n    * hyperparameter tracking\n    * training directory management\n    * callback-based public API \n    * XPU - code abstraction for [cpu, gpu, multi-gpu].\n    * single-file deployments (NEW in version ``0.1.0``).\n    * reasonable test coverage using pytest and xdoctest\n    * CI testing on appveyor and travis (note a few tests are failing due to minor issues)\n    * A rich utility set\n    * Extensions of PyTorch objects (e.g. critions, initializers, layers,\n      optimizers, schedulers)\nBUILTINS:\n   - training loop boilerplate\n   - snapshots / checkpoints\n   - progress bars (backend_choices: [progiter, tqdm])\n   - data provenance of training history in ``train_info.json``\n   - tensorboard metric visualization (optional)\nDESIGN PHILOSOPHY: \n   Avoid boilerplate, built-it yourself when you need to, and don't repeat yourself.\n   Experiments should be strongly tied to the choice of hyperparameters, and\n   the framework should be able to construct a directory heirarchy based on\n   these hyperparameters.\nSLOGAN: \n    Rein and train.\nUSAGE PATTERNS:\n    (1) Write code for a torch object  (i.e. Dataset, Model, Criterion, Initializer, and Scheduler) just as you normally would.\n    (2) Inherit from the ``netharn.FitHarn`` object, define ``run_batch``, ``on_batch``, ``on_epoch``, etc...\n    (3) Create an instance of ``netharn.HyperParams`` to specify your dataset, model, criterion, etc...\n    (4) Create an instance of your ``FitHarn`` object with those hyperparameters.\n    (5) Then execute its ``run`` method.\n    (6) ???\n    (7) profit\nEXAMPLES:\n    * ToyData2d classification with netharn.models.ToyNet2d (see doctest in netharn/fit_harn.py:__DOC__:0)\n    * MNIST digit classification with MnistNet (netharn/examples/mnist.py)\n    * Cifar10 category classification with ResNet50 / dpn91 (netharn/examples/cifar.py)\n    * Voc2007+2012 object detection with YOLOv2 (netharn/examples/yolo_voc.py)\n    * IBEIS metric learning with SiameseLP (netharn/examples/siam_ibeis.py)\nSTABILITY:\n   Mostly harmless. Most tests pass, the current failures are probably not\n   critical. I'm able to use it on my machine (tm). In this early stage of\n   development, there are still a few pain points. Issues and PRs welcome.\nKNOWN BUGS:\n   * The metrics for computing detection mAP / AP might not be correct.\n   * The YOLO example gets to about 70% mAP (using Girshik's mAP code) whereas we should be hitting 74-76%\nAUTHORS COMMENTS:\n   * The MNIST, CIFAR, and VOC examples will download the data as needed.\n   * The CIFAR example for ResNet50 achieves 95.72% accuracy, outperforming the\n     best DPN92 result (95.16%) that I'm aware of.\n     This result seems real, I do not believe I've made an error in measurement\n     (but this has need been peer-reviewed so, caveat emptor).  I've reproduced\n     this results a few times. You can use the code in examples/cifar.py to see\n     if you can too (please tell me if you cannot). \n   * The YOLO example is based of of EAVise's excellent lightnet (https://gitlab.com/EAVISE/lightnet/) package.\n   * I reimplemented the CocoAPI (see netharn.data.coco_api), because I had some\n     (probably minor) issue with the original implementation. I've extended it\n     quite a bit, and I'd recommend using it.\n   * The metric-learning example requires code requires the ibeis software:\n     `https://github.com/Erotemic/ibeis`.\nDEPENDENCIES:\n    * torch\n    * numpy\n    * Cython\n    * ubelt\n    * xdoctest\n    * ... (see requirements.txt)\n\n\nFeatures (continued)\n====================\n\n* Hyperparameter tracking: The hash of your hyperparameters determines the\n  directory data will be written to. We also allow for a \"nicer\" means to\n  manage directory structures. Given a ``HyperParams`` object, we create the\n  symlink ``{workdir}/fit/name/{name}`` which points to\n  ``{workdir}/fit/runs/{name}/{hashid}``.\n\n* Automatic restarts: \n  Calling ``FitHarn.run`` twice restarts training from where you left off by\n  default (as long as the hyperparams haven't changed).\n\n* \"Smart\" Snapshot cleanup:  \n  Maintaining model weights files can be a memory hog. Depending the settings\n  of ``harn.preferences``, ``netharn.FitHarn`` will periodically remove\n  less-recent or low-scoring snapshots.\n\n* Deployment files: \n  Model weights and architecture are together written as one\n  reasonably-portable zip-file. We also package training metadata to maintain\n  data provinence and make reproducing experiments easier. \n\n* Restart from any pretrained state: \n  use ``netharn.initializers.PretainedInitializer``. \n\n* Utilities for building networks in torch:\n  Layers like ``netharn.layers.ConvNormNd`` make it easy to build networks for\n  n=1, 2, or 3 dimensional data. \n\n* Analytic output shape and receptive field:\n  Netharn defines a ``netharn.layers.AnalyticModule``, which can automatically\n  define ``forward``, ``output_shape_for`` and ``receptive_field_for`` if users\n  define a special ``_output_for`` method, written with the\n  ``netharn.analytic_for.Output``, ``netharn.analytic_for.Hidden``, and\n  ``netharn.analytic_for.OutputFor`` special callables.\n\n* Example tasks:\n  Baseline code for standard tasks like: object segmentation, classification,\n  and detection are defined in ``netharn.examples``. The examples also provide\n  example use cases for ``ndsampler``, ``kwimage``, ``kwannot``, and\n  ``kwplot``. \n\n\nInstallation\n============\n\nIn the future these instructions may actually be different than the developer\nsetup instructions, but for now they are the same.\n\n.. code-block:: bash\n\n    mkdir -p ~/code\n    git clone git@github.com:Erotemic/netharn.git ~/code/netharn\n    cd ~/code/netharn\n    ./run_developer_setup.sh\n\n\nWhile all netharn dependencies should be available on pypi (with manylinux2010\nwheels for binary packages), there are other packages developed concurrently\nwith netharn. To install the development version of these dependencies then run\n``python super_setup.py ensure`` to check out the repos and ensure they are on\nthe correct branch, ``python super_setup.py develop`` to build everything in\ndevelopment mode, and ``python super_setup.py pull`` to update to the latest on\nthe branch.\n\nDescription\n===========\n\nParameterized fit harnesses for PyTorch.\n\nTrains models and keeps track of your hyperparameters.\n\nThis is a clean port of the good parts developed in my research repo: ``clab``. \n\nSee the netharn/examples folder for example usage. The doctests are also a good\nresource. It would be nice if we had better docs.\n\nNetHarn is a research framework for training and deploying arbitrary PyTorch\nmodels.  It was designed for the purpose of minimizing training-loop\nboilerplate and tracking hyperparameters to encourage reproducible research.\nNetHarn separates the problem of training a model into the following core\nhyperparameter components: the datasets, model, criterion, initializer,\noptimizer, and learning rate scheduler.  Runs with different hyperparameters\nare automatically logged to separate directories which makes it simple to\ncompare the results of two experiments.  NetHarn also has the ability to create\na single-file deployment of a trained model that is independent of the system\nused to train it.  This makes it fast and simple for research results to be\nexternally verified and moved into production.\n\n\nCore Callback Structure\n=======================\n\nNetharn is designed around inheriting from the ``netharn.FitHarn`` class,\noverloading several methods, and then creating an instance of your custom\nFitHarn with specific hyperparameters.\n\nFitHarn allows you to customize the execution of the training loop via its\ncallback system. You write a callback simply overloading one of these\nmethods. There are callbacks with and without default behavior.\n\nThe ones with default behavior directly influence the learning process.\nWhile these don't have to be overwritten, they usually should be as\ndifferent tasks require slightly different ways of moving data through the\ntraining pipeline.\n\nThe ones without default behavior allow the developer to execute custom\ncode at special places in the training loop. These are usually used for\nlogging custom metrics and outputing visualizations.\n\nThe following note lists the callbacks in roughly the order in which they are\ncalled by the ``FitHarn.run`` method. The tree structure denotes loop nesting.\n\n.. code-block:: \n\n    ├─ after_initialize (no default) - runs after FitHarn is initialized\n    │  │\n    │  ├─ before_epochs (no default) - runs once before all train/vali/test\n    │  │  │    epochs on each iteration\n    │  │  │\n    │  │  ├─ prepare_epoch (no default) - runs before each train, vali,\n    │  │  │  │    and test epoch\n    │  │  │  │\n    │  │  │  ├─ prepare_batch (has default behavior) - transfer data from\n    │  │  │  │    CPU to the XPU\n    │  │  │  │\n    │  │  │  ├─ run_batch (has default behavior) - execute the forward pass\n    │  │  │  │    and compute the loss\n    │  │  │  │\n    │  │  │  ├─ backpropogate (has default behavior) - accumulate gradients\n    │  │  │  │    and take an optimization step\n    │  │  │  │\n    │  │  │  └─ on_batch (no default) - runs after `run_batch` and\n    │  │  │       `backpropogate` on every batch\n    │  │  │\n    │  │  └─ on_epoch (no default) - runs after each train, vali, and test\n    │  │         epoch finishes.  Any custom scalar metrics returned in a\n    │  │         dictionary will be recorded by the FitHarn loggers.\n    │  │\n    │  └─ after_epochs (no default) - runs after the all data splits are\n    │         finished with  the current epoch.\n    │\n    └─ on_complete (no default) - runs after the main loop is complete\n\n\nGiven a custom FitHarn class see the \"Toy Example\" section for details on how\nto construct hyperparamters and execute the training loop (i.e.\n``FitHarn.run``).\n\n\nDeveloper Setup:\n================\n\n\nIn the future these instructions might be different from the install\ninstructions, but for now they are the same.\n\n.. code-block:: bash\n\n    sudo apt-get install python3 python-dev python3-dev \\\n     build-essential libssl-dev libffi-dev \\\n     libxml2-dev libxslt1-dev zlib1g-dev \\\n     python-pip\n\n    mkdir -p ~/code\n    git clone git@github.com:Erotemic/netharn.git ~/code/netharn\n    cd ~/code/netharn\n\n    ./run_developer_setup.sh\n\n\nDocumentation\n=============\n\nNetharn's documentation is currently sparse. I typically do most of my\ndocumenting in the code itself using docstrings. In the future much of this\nwill likely be consolidated in a read-the-docs style documentation page, but\nfor now you'll need to look at the code to read the docs.\n\nThe main concept provided by netharn is the \"FitHarn\", which has a decent\nmodule level docstring, and a lot of good class / method level docstrings: \nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/fit_harn.py\n\nThe examples folder has better docstrings with task-level documentation: \n\nThe simplest is the mnist example:\nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/examples/mnist.py\n\nThe CIFAR example builds on the mnist example:\nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/examples/cifar.py\n\nI'd recommend going through those two examples, as they have the best documentation. \n\nThe segmentation example:\nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/examples/segmentation.py\n\nand object detection example: \nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/examples/object_detection.py\n\nhave less documentation, but provide more real-world style examples of how netharn is used. \n\nThere is an applied segmentation example that is specific to the CAMVID dataset:\nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/examples/sseg_camvid.py\n\nAnd there is an applied VOC detection example:\nhttps://gitlab.kitware.com/computer-vision/netharn/-/blob/master/netharn/examples/yolo_voc.py\n\nThis README also contains a toy example.\n\nToy Example:\n============\n\nThis following example is the doctest in ``netharn/fit_harn.py``. It\ndemonstrates how to use NetHarn to train a model to solve a toy problem.  \n\nIn this toy problem, we do not extend the netharn.FitHarn object, so we are using\nthe default behavior of ``run_batch``. The default ``on_batch``, and\n``on_epoch`` do nothing, so only loss will be the only measurement of\nperformance.\n\nFor further examples please see the examples directory. These example show how\nto extend netharn.FitHarn to measure performance wrt a particular problem.  The\nMNIST and CIFAR examples are the most simple. The YOLO example is more complex.\nThe IBEIS example depends on non-public data / software, but can still be\nuseful to look at.  Its complexity is more than CIFAR but less than YOLO.\n\n\n.. code-block:: python\n\n    >>> import netharn \n    >>> hyper = netharn.HyperParams(**{\n    >>>     # ================\n    >>>     # Environment Components\n    >>>     'name'        : 'demo',\n    >>>     'workdir'     : ub.ensure_app_cache_dir('netharn/demo'),\n    >>>     'xpu'         : netharn.XPU.coerce('auto'),\n    >>>     # workdir is a directory where intermediate results can be saved\n    >>>     # \"name\" symlinks <workdir>/fit/name/<name> -> ../runs/<hashid>\n    >>>     # XPU auto select a gpu if idle and VRAM>6GB else a cpu\n    >>>     # ================\n    >>>     # Data Components\n    >>>     'datasets'    : {  # dict of plain ol torch.data.Dataset instances\n    >>>         'train': netharn.data.ToyData2d(size=3, border=1, n=256, rng=0),\n    >>>         'vali': netharn.data.ToyData2d(size=3, border=1, n=64, rng=1),\n    >>>         'test': netharn.data.ToyData2d(size=3, border=1, n=64, rng=2),\n    >>>     },\n    >>>     'loaders'     : {'batch_size': 4}, # DataLoader instances or kw\n    >>>     # ================\n    >>>     # Algorithm Components\n    >>>     # Note the (cls, kw) tuple formatting\n    >>>     'model'       : (netharn.models.ToyNet2d, {}),\n    >>>     'optimizer'   : (netharn.optimizers.SGD, {\n    >>>         'lr': 0.01\n    >>>     }),\n    >>>     # focal loss is usually better than netharn.criterions.CrossEntropyLoss\n    >>>     'criterion'   : (netharn.criterions.FocalLoss, {}),\n    >>>     'initializer' : (netharn.initializers.KaimingNormal, {\n    >>>         'param': 0,\n    >>>     }),\n    >>>     # The scheduler adjusts learning rate over the training run\n    >>>     'scheduler'   : (netharn.schedulers.ListedScheduler, {\n    >>>         'points': {'lr': {0: 0.1, 2: 10.0, 4: .15, 6: .05, 9: .01}},\n    >>>         'interpolation': 'linear',\n    >>>     }),\n    >>>     'monitor'     : (netharn.Monitor, {\n    >>>         'max_epoch': 10,\n    >>>         'patience': 7,\n    >>>     }),\n    >>>     # dynamics are a config option that modify the behavior of the main\n    >>>     # training loop. These parameters effect the learned model.\n    >>>     'dynamics'   : {'batch_step': 2},\n    >>> })\n    >>> harn = netharn.FitHarn(hyper)\n    >>> # non-algorithmic behavior preferences (do not change learned models)\n    >>> harn.preferences['num_keep'] = 10\n    >>> harn.preferences['auto_prepare_batch'] = True\n    >>> # start training.\n    >>> harn.initialize(reset='delete')  # delete removes an existing run\n    >>> harn.run()  # note: run calls initialize it hasn't already been called.\n    >>> # xdoc: +IGNORE_WANT\n\nRunning this code produes the following output:\n\n.. code-block:: \n\n   RESET HARNESS BY DELETING EVERYTHING IN TRAINING DIR\n   Symlink: /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum -> /home/joncrall/.cache/netharn/demo/_mru\n   ... already exists\n   Symlink: /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum -> /home/joncrall/.cache/netharn/demo/fit/name/demo\n   ... already exists\n   ... and points to the right place\n   INFO: Initializing tensorboard (dont forget to start the tensorboard server)\n   INFO: Model has 824 parameters\n   INFO: Mounting ToyNet2d model on GPU(0)\n   INFO: Exported model topology to /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/ToyNet2d_2a3f49.py\n   INFO: Initializing model weights with: <netharn.initializers.nninit_core.KaimingNormal object at 0x7fc67eff0278>\n   INFO:  * harn.train_dpath = '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum'\n   INFO:  * harn.name_dpath  = '/home/joncrall/.cache/netharn/demo/fit/name/demo'\n   INFO: Snapshots will save to harn.snapshot_dpath = '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots'\n   INFO: ARGV:\n       /home/joncrall/.local/conda/envs/py36/bin/python /home/joncrall/.local/conda/envs/py36/bin/ipython\n   INFO: dont forget to start:\n       tensorboard --logdir ~/.cache/netharn/demo/fit/name\n   INFO: === begin training 0 / 10 : demo ===\n   epoch lr:0.0001 │ vloss is unevaluated  0/10... rate=0 Hz, eta=?, total=0:00:00, wall=19:36 EST\n   train loss:0.173 │ 100.00% of 64x8... rate=11762.01 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   vali loss:0.170 │ 100.00% of 64x4... rate=9991.94 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   test loss:0.170 │ 100.00% of 64x4... rate=24809.37 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   INFO: === finish epoch 0 / 10 : demo ===\n   epoch lr:0.00505 │ vloss: 0.1696 (n_bad=00, best=0.1696)  1/10... rate=1.24 Hz, eta=0:00:07, total=0:00:00, wall=19:36 EST\n   train loss:0.175 │ 100.00% of 64x8... rate=13522.14 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   vali loss:0.167 │ 100.00% of 64x4... rate=23598.31 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   test loss:0.167 │ 100.00% of 64x4... rate=20354.22 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   INFO: === finish epoch 1 / 10 : demo ===\n   epoch lr:0.01 │ vloss: 0.1685 (n_bad=00, best=0.1685)  2/10... rate=1.28 Hz, eta=0:00:06, total=0:00:01, wall=19:36 EST\n   train loss:0.177 │ 100.00% of 64x8... rate=15723.99 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   vali loss:0.163 │ 100.00% of 64x4... rate=29375.56 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   test loss:0.163 │ 100.00% of 64x4... rate=29664.69 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   INFO: === finish epoch 2 / 10 : demo ===\n\n   <JUST MORE OF THE SAME; REMOVED FOR BREVITY>\n\n   epoch lr:0.001 │ vloss: 0.1552 (n_bad=00, best=0.1552)  9/10... rate=1.11 Hz, eta=0:00:00, total=0:00:08, wall=19:36 EST\n   train loss:0.164 │ 100.00% of 64x8... rate=13795.93 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   vali loss:0.154 │ 100.00% of 64x4... rate=19796.72 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   test loss:0.154 │ 100.00% of 64x4... rate=21396.73 Hz, eta=0:00:00, total=0:00:00, wall=19:36 EST\n   INFO: === finish epoch 9 / 10 : demo ===\n   epoch lr:0.001 │ vloss: 0.1547 (n_bad=00, best=0.1547) 10/10... rate=1.13 Hz, eta=0:00:00, total=0:00:08, wall=19:36 EST\n\n\n\n\n   INFO: Maximum harn.epoch reached, terminating ...\n   INFO: \n\n\n\n   INFO: training completed\n   INFO: harn.train_dpath = '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum'\n   INFO: harn.name_dpath  = '/home/joncrall/.cache/netharn/demo/fit/name/demo'\n   INFO: view tensorboard results for this run via:\n       tensorboard --logdir ~/.cache/netharn/demo/fit/name\n   [DEPLOYER] Deployed zipfpath=/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/deploy_ToyNet2d_lnejaaum_009_GAEYQT.zip\n   INFO: wrote single-file deployment to: '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/deploy_ToyNet2d_lnejaaum_009_GAEYQT.zip'\n   INFO: exiting fit harness.\n\nFurthermore, if you were to run that code when ``'--verbose' in sys.argv``,\nthen it would produce this more detailed description of what it was doing:\n\n.. code-block:: \n\n   RESET HARNESS BY DELETING EVERYTHING IN TRAINING DIR\n   Symlink: /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum -> /home/joncrall/.cache/netharn/demo/_mru\n   ... already exists\n   Symlink: /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum -> /home/joncrall/.cache/netharn/demo/fit/name/demo\n   ... already exists\n   ... and points to the right place\n   DEBUG: Initialized logging\n   INFO: Initializing tensorboard (dont forget to start the tensorboard server)\n   DEBUG: harn.train_info[hyper] = {\n       'model': (\n           'netharn.models.toynet.ToyNet2d',\n           {\n               'input_channels': 1,\n               'num_classes': 2,\n           },\n       ),\n       'initializer': (\n           'netharn.initializers.nninit_core.KaimingNormal',\n           {\n               'mode': 'fan_in',\n               'param': 0,\n           },\n       ),\n       'optimizer': (\n           'torch.optim.sgd.SGD',\n           {\n               'dampening': 0,\n               'lr': 0.0001,\n               'momentum': 0,\n               'nesterov': False,\n               'weight_decay': 0,\n           },\n       ),\n       'scheduler': (\n           'netharn.schedulers.scheduler_redesign.ListedScheduler',\n           {\n               'interpolation': 'linear',\n               'optimizer': None,\n               'points': {'lr': {0: 0.0001, 2: 0.01, 5: 0.015, 6: 0.005, 9: 0.001}},\n           },\n       ),\n       'criterion': (\n           'netharn.criterions.focal.FocalLoss',\n           {\n               'focus': 2,\n               'ignore_index': -100,\n               'reduce': None,\n               'reduction': 'mean',\n               'size_average': None,\n               'weight': None,\n           },\n       ),\n       'loader': (\n           'torch.utils.data.dataloader.DataLoader',\n           {\n               'batch_size': 64,\n           },\n       ),\n       'dynamics': (\n           'Dynamics',\n           {\n               'batch_step': 4,\n               'grad_norm_max': None,\n           },\n       ),\n   }\n   DEBUG: harn.hyper = <netharn.hyperparams.HyperParams object at 0x7fb19b4b8748>\n   DEBUG: make XPU\n   DEBUG: harn.xpu = <XPU(GPU(0)) at 0x7fb12af24668>\n   DEBUG: Criterion: FocalLoss\n   DEBUG: Optimizer: SGD\n   DEBUG: Scheduler: ListedScheduler\n   DEBUG: Making loaders\n   DEBUG: Making model\n   DEBUG: ToyNet2d(\n     (layers): Sequential(\n       (0): Conv2d(1, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n       (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (2): ReLU(inplace)\n       (3): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n       (4): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n       (5): ReLU(inplace)\n       (6): Conv2d(8, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n     )\n     (softmax): Softmax()\n   )\n   INFO: Model has 824 parameters\n   INFO: Mounting ToyNet2d model on GPU(0)\n   DEBUG: Making initializer\n   DEBUG: Move FocalLoss() model to GPU(0)\n   DEBUG: Make optimizer\n   DEBUG: Make scheduler\n   DEBUG: Make monitor\n   DEBUG: Make dynamics\n   INFO: Exported model topology to /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/ToyNet2d_2a3f49.py\n   INFO: Initializing model weights with: <netharn.initializers.nninit_core.KaimingNormal object at 0x7fb129e732b0>\n   DEBUG: calling harn.initializer=<netharn.initializers.nninit_core.KaimingNormal object at 0x7fb129e732b0>\n   INFO:  * harn.train_dpath = '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum'\n   INFO:  * harn.name_dpath  = '/home/joncrall/.cache/netharn/demo/fit/name/demo'\n   INFO: Snapshots will save to harn.snapshot_dpath = '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots'\n   INFO: ARGV:\n       /home/joncrall/.local/conda/envs/py36/bin/python /home/joncrall/.local/conda/envs/py36/bin/ipython --verbose\n   INFO: dont forget to start:\n       tensorboard --logdir ~/.cache/netharn/demo/fit/name\n   INFO: === begin training 0 / 10 : demo ===\n   DEBUG: epoch lr:0.0001 │ vloss is unevaluated\n   epoch lr:0.0001 │ vloss is unevaluated  0/10... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 EST\n   DEBUG: === start epoch 0 ===\n   DEBUG: log_value(epoch lr, 0.0001, 0\n   DEBUG: log_value(epoch momentum, 0, 0\n   DEBUG: _run_epoch 0, tag=train, learn=True\n   DEBUG:  * len(loader) = 8\n   DEBUG:  * loader.batch_size = 64\n   train loss:-1.000 │ 0.00% of 64x8... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 ESTDEBUG: Making batch iterator\n   DEBUG: Starting batch iteration for tag=train, epoch=0\n   train loss:0.224 │ 100.00% of 64x8... rate=12052.25 Hz, eta=0:00:00, total=0:00:00, wall=19:56 EST\n   DEBUG: log_value(train epoch loss, 0.22378234565258026, 0\n   DEBUG: Finished batch iteration for tag=train, epoch=0\n   DEBUG: _run_epoch 0, tag=vali, learn=False\n   DEBUG:  * len(loader) = 4\n   DEBUG:  * loader.batch_size = 64\n   vali loss:-1.000 │ 0.00% of 64x4... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 ESTDEBUG: Making batch iterator\n   DEBUG: Starting batch iteration for tag=vali, epoch=0\n   vali loss:0.175 │ 100.00% of 64x4... rate=23830.75 Hz, eta=0:00:00, total=0:00:00, wall=19:56 EST\n   DEBUG: log_value(vali epoch loss, 0.1749105490744114, 0\n   DEBUG: Finished batch iteration for tag=vali, epoch=0\n   DEBUG: epoch lr:0.0001 │ vloss: 0.1749 (n_bad=00, best=0.1749)\n   DEBUG: _run_epoch 0, tag=test, learn=False\n   DEBUG:  * len(loader) = 4\n   DEBUG:  * loader.batch_size = 64\n   test loss:-1.000 │ 0.00% of 64x4... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 ESTDEBUG: Making batch iterator\n   DEBUG: Starting batch iteration for tag=test, epoch=0\n   test loss:0.176 │ 100.00% of 64x4... rate=28606.65 Hz, eta=0:00:00, total=0:00:00, wall=19:56 EST\n   DEBUG: log_value(test epoch loss, 0.17605290189385414, 0\n   DEBUG: Finished batch iteration for tag=test, epoch=0\n   DEBUG: Saving snapshot to /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots/_epoch_00000000.pt\n   DEBUG: Snapshot saved to /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots/_epoch_00000000.pt\n   DEBUG: new best_snapshot /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots/_epoch_00000000.pt\n   DEBUG: Plotting tensorboard data\n   Populating the interactive namespace from numpy and matplotlib\n   INFO: === finish epoch 0 / 10 : demo ===\n\n   <JUST MORE OF THE SAME; REMOVED FOR BREVITY>\n\n   INFO: === finish epoch 8 / 10 : demo ===\n   DEBUG: epoch lr:0.001 │ vloss: 0.2146 (n_bad=08, best=0.1749)\n   epoch lr:0.001 │ vloss: 0.2146 (n_bad=08, best=0.1749)  9/10... rate=1.20 Hz, eta=0:00:00, total=0:00:07, wall=19:56 EST\n   DEBUG: === start epoch 9 ===\n   DEBUG: log_value(epoch lr, 0.001, 9\n   DEBUG: log_value(epoch momentum, 0, 9\n   DEBUG: _run_epoch 9, tag=train, learn=True\n   DEBUG:  * len(loader) = 8\n   DEBUG:  * loader.batch_size = 64\n   train loss:-1.000 │ 0.00% of 64x8... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 ESTDEBUG: Making batch iterator\n   DEBUG: Starting batch iteration for tag=train, epoch=9\n   train loss:0.207 │ 100.00% of 64x8... rate=13580.13 Hz, eta=0:00:00, total=0:00:00, wall=19:56 EST\n   DEBUG: log_value(train epoch loss, 0.2070118673145771, 9\n   DEBUG: Finished batch iteration for tag=train, epoch=9\n   DEBUG: _run_epoch 9, tag=vali, learn=False\n   DEBUG:  * len(loader) = 4\n   DEBUG:  * loader.batch_size = 64\n   vali loss:-1.000 │ 0.00% of 64x4... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 ESTDEBUG: Making batch iterator\n   DEBUG: Starting batch iteration for tag=vali, epoch=9\n   vali loss:0.215 │ 100.00% of 64x4... rate=29412.91 Hz, eta=0:00:00, total=0:00:00, wall=19:56 EST\n   DEBUG: log_value(vali epoch loss, 0.21514184772968292, 9\n   DEBUG: Finished batch iteration for tag=vali, epoch=9\n   DEBUG: epoch lr:0.001 │ vloss: 0.2148 (n_bad=09, best=0.1749)\n   DEBUG: _run_epoch 9, tag=test, learn=False\n   DEBUG:  * len(loader) = 4\n   DEBUG:  * loader.batch_size = 64\n   test loss:-1.000 │ 0.00% of 64x4... rate=0 Hz, eta=?, total=0:00:00, wall=19:56 ESTDEBUG: Making batch iterator\n   DEBUG: Starting batch iteration for tag=test, epoch=9\n   test loss:0.216 │ 100.00% of 64x4... rate=25906.58 Hz, eta=0:00:00, total=0:00:00, wall=19:56 EST\n   DEBUG: log_value(test epoch loss, 0.21618007868528366, 9\n   DEBUG: Finished batch iteration for tag=test, epoch=9\n   DEBUG: Saving snapshot to /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots/_epoch_00000009.pt\n   DEBUG: Snapshot saved to /home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/torch_snapshots/_epoch_00000009.pt\n   DEBUG: Plotting tensorboard data\n   INFO: === finish epoch 9 / 10 : demo ===\n   DEBUG: epoch lr:0.001 │ vloss: 0.2148 (n_bad=09, best=0.1749)\n   epoch lr:0.001 │ vloss: 0.2148 (n_bad=09, best=0.1749) 10/10... rate=1.21 Hz, eta=0:00:00, total=0:00:08, wall=19:56 EST\n\n\n\n\n   INFO: Maximum harn.epoch reached, terminating ...\n   INFO: \n\n\n\n   INFO: training completed\n   INFO: harn.train_dpath = '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum'\n   INFO: harn.name_dpath  = '/home/joncrall/.cache/netharn/demo/fit/name/demo'\n   INFO: view tensorboard results for this run via:\n       tensorboard --logdir ~/.cache/netharn/demo/fit/name\n   [DEPLOYER] Deployed zipfpath=/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/deploy_ToyNet2d_lnejaaum_000_JWPNDC.zip\n   INFO: wrote single-file deployment to: '/home/joncrall/.cache/netharn/demo/fit/runs/demo/lnejaaum/deploy_ToyNet2d_lnejaaum_000_JWPNDC.zip'\n   INFO: exiting fit harness.\n\nRelated Packages\n================\n\npytorch-lightning (https://github.com/PyTorchLightning/pytorch-lightning) has\nvery similar goals to netharn. Currently, there are strengths and weaknesses to\nboth, but in the future I do see one consuming functionality of the other.\nCurrently (2020-10-21), pytorch-lightning does distributed training better,\nwhereas netharn's logging and hyperparameter management outshines\npytorch-lightning.\n\n\nConsumer Packages\n=================\n\nThe bioharn package (https://gitlab.kitware.com/jon.crall/bioharn) implements\nextensions of the classifier and detector examples in the netharn/examples\nfolder as well as prediction and evaluation scripts.\n\n\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/netharn.svg\n   :target: https://pypi.python.org/pypi/netharn\n\n.. |Downloads| image:: https://img.shields.io/pypi/dm/netharn.svg\n   :target: https://pypistats.org/packages/netharn\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/netharn/badge/?version=latest\n    :target: http://netharn.readthedocs.io/en/latest/\n\n.. # See: https://ci.appveyor.com/project/jon.crall/netharn/settings/badges\n.. .. |Appveyor| image:: https://ci.appveyor.com/api/projects/status/py3s2d6tyfjc8lm3/branch/master?svg=true\n.. :target: https://ci.appveyor.com/project/jon.crall/netharn/branch/master\n\n.. |GitlabCIPipeline| image:: https://gitlab.kitware.com/computer-vision/netharn/badges/master/pipeline.svg\n   :target: https://gitlab.kitware.com/computer-vision/netharn/-/jobs\n\n.. |GitlabCICoverage| image:: https://gitlab.kitware.com/computer-vision/netharn/badges/master/coverage.svg?job=coverage\n    :target: https://gitlab.kitware.com/computer-vision/netharn/commits/master\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.kitware.com/computer-vision/netharn",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netharn",
    "package_url": "https://pypi.org/project/netharn/",
    "platform": null,
    "project_url": "https://pypi.org/project/netharn/",
    "project_urls": {
      "Homepage": "https://gitlab.kitware.com/computer-vision/netharn"
    },
    "release_url": "https://pypi.org/project/netharn/0.6.1/",
    "requires_dist": [
      "six (>=1.11.0)",
      "ubelt (>=1.2.3)",
      "parse (>=1.12.0)",
      "pyflakes (>=2.4.0)",
      "astunparse (>=1.6.1)",
      "pygtrie (>=2.3.3)",
      "scriptconfig (>=0.7.0)",
      "kwarray (>=0.6.7)",
      "kwimage (>=0.9.7)",
      "torch-liberator (>=0.2.1)",
      "imageio (<2.8.0) ; python_version < \"3.0\"",
      "qualname (>=0.1.0) ; python_version < \"3.0\"",
      "numpy (>=1.19.3) ; python_version < \"3.10\" and python_version >= \"3.6\"",
      "torch (>=1.9.0) ; python_version < \"3.10\" and python_version >= \"3.9\"",
      "torchvision (>=0.10.0) ; python_version < \"3.10\" and python_version >= \"3.9\"",
      "torch (>=1.11.0) ; python_version < \"3.11\" and python_version >= \"3.10\"",
      "torchvision (>=0.12.0) ; python_version < \"3.11\" and python_version >= \"3.10\"",
      "numpy (>=1.21.6) ; python_version < \"3.11\" and python_version >= \"3.10\"",
      "torchvision (>=0.10.0) ; python_version < \"3.7\" and python_version >= \"3.6\"",
      "torchvision (>=0.10.0) ; python_version < \"3.8\" and python_version >= \"3.7\"",
      "torchvision (>=0.10.0) ; python_version < \"3.9\" and python_version >= \"3.8\"",
      "torch (>=1.9.0) ; python_version < \"3.9.0\" and python_version >= \"3.6.0\"",
      "torch (>=1.13.0) ; python_version < \"4.0\" and python_version >= \"3.11\"",
      "numpy (>=1.23.2) ; python_version < \"4.0\" and python_version >= \"3.11\"",
      "imageio (>2.6.0) ; python_version > \"3.0\"",
      "six (>=1.11.0) ; extra == 'all'",
      "ubelt (>=1.2.3) ; extra == 'all'",
      "parse (>=1.12.0) ; extra == 'all'",
      "pyflakes (>=2.4.0) ; extra == 'all'",
      "astunparse (>=1.6.1) ; extra == 'all'",
      "pygtrie (>=2.3.3) ; extra == 'all'",
      "scriptconfig (>=0.7.0) ; extra == 'all'",
      "kwarray (>=0.6.7) ; extra == 'all'",
      "kwimage (>=0.9.7) ; extra == 'all'",
      "torch-liberator (>=0.2.1) ; extra == 'all'",
      "xdoctest (>=0.15.10) ; extra == 'all'",
      "tqdm (>=4.23.4) ; extra == 'all'",
      "Pygments (>=2.2.0) ; extra == 'all'",
      "sympy (>=1.3) ; extra == 'all'",
      "ndsampler (>=0.7.3) ; extra == 'all'",
      "kwcoco (>=0.5.6) ; extra == 'all'",
      "colormath ; extra == 'all'",
      "six (==1.11.0) ; extra == 'all-strict'",
      "ubelt (==1.2.3) ; extra == 'all-strict'",
      "parse (==1.12.0) ; extra == 'all-strict'",
      "pyflakes (==2.4.0) ; extra == 'all-strict'",
      "astunparse (==1.6.1) ; extra == 'all-strict'",
      "pygtrie (==2.3.3) ; extra == 'all-strict'",
      "scriptconfig (==0.7.0) ; extra == 'all-strict'",
      "kwarray (==0.6.7) ; extra == 'all-strict'",
      "kwimage (==0.9.7) ; extra == 'all-strict'",
      "torch-liberator (==0.2.1) ; extra == 'all-strict'",
      "xdoctest (==0.15.10) ; extra == 'all-strict'",
      "tqdm (==4.23.4) ; extra == 'all-strict'",
      "Pygments (==2.2.0) ; extra == 'all-strict'",
      "sympy (==1.3) ; extra == 'all-strict'",
      "ndsampler (==0.7.3) ; extra == 'all-strict'",
      "kwcoco (==0.5.6) ; extra == 'all-strict'",
      "colormath ; extra == 'all-strict'",
      "pytest (<=4.6.11,==4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all-strict'",
      "pytest-cov (==2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all-strict'",
      "imageio (<2.8.0) ; (python_version < \"3.0\") and extra == 'all-strict'",
      "qualname (==0.1.0) ; (python_version < \"3.0\") and extra == 'all-strict'",
      "psutil (==5.8.0) ; (python_version < \"3.10\") and extra == 'all-strict'",
      "numpy (==1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "Pillow (==8.0.0) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "torch (==1.9.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "pandas (==1.4.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "matplotlib (==3.5.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "scikit-learn (==1.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "scipy (==1.8.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all-strict'",
      "torch (==1.11.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "torchvision (==0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "numpy (==1.21.6) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "pandas (==1.3.5) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "Pillow (==9.1.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "scipy (==1.8.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "psutil (==5.9.1) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
      "pytest (<=4.6.11,==4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all-strict'",
      "pytest-cov (==2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all-strict'",
      "coverage (==4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'all-strict'",
      "seaborn (==0.9.1) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'all-strict'",
      "matplotlib (==3.0.0) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'all-strict'",
      "pytest (<=6.1.2,==4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all-strict'",
      "pytest-cov (==2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "pandas (==1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "matplotlib (==3.1.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "scikit-learn (==0.24.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "scipy (==1.5.4) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
      "pandas (==1.2.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
      "matplotlib (==3.4.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
      "scikit-learn (==0.24.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
      "scipy (==1.6.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
      "pandas (==1.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
      "matplotlib (==3.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
      "scikit-learn (==1.0.2) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
      "scipy (==1.8.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
      "torch (==1.9.0) ; (python_version < \"3.9.0\" and python_version >= \"3.6.0\") and extra == 'all-strict'",
      "torch (==1.13.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "numpy (==1.23.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "pandas (==1.5.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "Pillow (==9.2.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "scipy (==1.9.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all-strict'",
      "imageio (>2.6.0) ; (python_version > \"3.0\") and extra == 'all-strict'",
      "matplotlib (==3.5.0) ; (python_version >= \"3.10\") and extra == 'all-strict'",
      "scikit-learn (==1.1.0) ; (python_version >= \"3.10\") and extra == 'all-strict'",
      "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all-strict'",
      "psutil (==5.9.1) ; (python_version >= \"3.11\") and extra == 'all-strict'",
      "coverage (==5.2.1) ; (python_version >= \"3.6\") and extra == 'all-strict'",
      "seaborn (==0.10.0) ; (python_version >= \"3.6\") and extra == 'all-strict'",
      "torch-optimizer (==0.3.0) ; (python_version >= \"3.6\") and extra == 'all-strict'",
      "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all-strict'",
      "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all'",
      "pytest-cov (>=2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all'",
      "imageio (<2.8.0) ; (python_version < \"3.0\") and extra == 'all'",
      "qualname (>=0.1.0) ; (python_version < \"3.0\") and extra == 'all'",
      "psutil (>=5.8.0) ; (python_version < \"3.10\") and extra == 'all'",
      "numpy (>=1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'all'",
      "Pillow (>=8.0.0) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'all'",
      "torch (>=1.9.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "pandas (>=1.4.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "matplotlib (>=3.5.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "scikit-learn (>=1.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "scipy (>=1.8.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
      "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all'",
      "torch (>=1.11.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "torchvision (>=0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "numpy (>=1.21.6) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "pandas (>=1.3.5) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "Pillow (>=9.1.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "scipy (>=1.8.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "psutil (>=5.9.1) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
      "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all'",
      "pytest-cov (>=2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all'",
      "coverage (>=4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'all'",
      "seaborn (>=0.9.1) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'all'",
      "matplotlib (>=3.0.0) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'all'",
      "pytest (<=6.1.2,>=4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all'",
      "pytest-cov (>=2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "pandas (>=1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "matplotlib (>=3.1.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "scikit-learn (>=0.24.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "scipy (>=1.5.4) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
      "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
      "pandas (>=1.2.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
      "matplotlib (>=3.4.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
      "scikit-learn (>=0.24.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
      "scipy (>=1.6.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
      "torchvision (>=0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
      "pandas (>=1.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
      "matplotlib (>=3.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
      "scikit-learn (>=1.0.2) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
      "scipy (>=1.8.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
      "torch (>=1.9.0) ; (python_version < \"3.9.0\" and python_version >= \"3.6.0\") and extra == 'all'",
      "torch (>=1.13.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "numpy (>=1.23.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "pandas (>=1.5.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "Pillow (>=9.2.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "scipy (>=1.9.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'all'",
      "imageio (>2.6.0) ; (python_version > \"3.0\") and extra == 'all'",
      "matplotlib (>=3.5.0) ; (python_version >= \"3.10\") and extra == 'all'",
      "scikit-learn (>=1.1.0) ; (python_version >= \"3.10\") and extra == 'all'",
      "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all'",
      "psutil (>=5.9.1) ; (python_version >= \"3.11\") and extra == 'all'",
      "coverage (>=5.2.1) ; (python_version >= \"3.6\") and extra == 'all'",
      "seaborn (>=0.10.0) ; (python_version >= \"3.6\") and extra == 'all'",
      "torch-optimizer (>=0.3.0) ; (python_version >= \"3.6\") and extra == 'all'",
      "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all'",
      "opencv-python (==3.4.15.55) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'graphics-strict'",
      "opencv-python (==3.1.0.0) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'graphics-strict'",
      "opencv-python (==3.1.0.5) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'graphics-strict'",
      "opencv-python (==3.1.0.2) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'graphics-strict'",
      "opencv-python (==3.4.13.47) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'graphics-strict'",
      "opencv-python (==3.4.15.55) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'graphics-strict'",
      "opencv-python (==3.4.15.55) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'graphics-strict'",
      "opencv-python (==4.5.4.58) ; (python_version >= \"3.10\") and extra == 'graphics-strict'",
      "opencv-python (>=3.4.15.55) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'graphics'",
      "opencv-python (>=3.1.0.0) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'graphics'",
      "opencv-python (>=3.1.0.5) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'graphics'",
      "opencv-python (>=3.1.0.2) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'graphics'",
      "opencv-python (>=3.4.13.47) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'graphics'",
      "opencv-python (>=3.4.15.55) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'graphics'",
      "opencv-python (>=3.4.15.55) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'graphics'",
      "opencv-python (>=4.5.4.58) ; (python_version >= \"3.10\") and extra == 'graphics'",
      "opencv-python-headless (==3.4.13.47) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'headless-strict'",
      "opencv-python-headless (==3.4.2.16) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'headless-strict'",
      "opencv-python-headless (==3.4.2.16) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'headless-strict'",
      "opencv-python-headless (==3.4.11.39) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'headless-strict'",
      "opencv-python-headless (==3.4.13.47) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'headless-strict'",
      "opencv-python-headless (==3.4.13.47) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'headless-strict'",
      "opencv-python-headless (==3.4.13.47) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'headless-strict'",
      "opencv-python-headless (==4.5.4.58) ; (python_version >= \"3.10\") and extra == 'headless-strict'",
      "opencv-python-headless (>=3.4.13.47) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'headless'",
      "opencv-python-headless (>=3.4.2.16) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'headless'",
      "opencv-python-headless (>=3.4.2.16) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'headless'",
      "opencv-python-headless (>=3.4.11.39) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'headless'",
      "opencv-python-headless (>=3.4.13.47) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'headless'",
      "opencv-python-headless (>=3.4.13.47) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'headless'",
      "opencv-python-headless (>=3.4.13.47) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'headless'",
      "opencv-python-headless (>=4.5.4.58) ; (python_version >= \"3.10\") and extra == 'headless'",
      "tqdm (>=4.23.4) ; extra == 'optional'",
      "Pygments (>=2.2.0) ; extra == 'optional'",
      "sympy (>=1.3) ; extra == 'optional'",
      "ndsampler (>=0.7.3) ; extra == 'optional'",
      "kwcoco (>=0.5.6) ; extra == 'optional'",
      "colormath ; extra == 'optional'",
      "tqdm (==4.23.4) ; extra == 'optional-strict'",
      "Pygments (==2.2.0) ; extra == 'optional-strict'",
      "sympy (==1.3) ; extra == 'optional-strict'",
      "ndsampler (==0.7.3) ; extra == 'optional-strict'",
      "kwcoco (==0.5.6) ; extra == 'optional-strict'",
      "colormath ; extra == 'optional-strict'",
      "psutil (==5.8.0) ; (python_version < \"3.10\") and extra == 'optional-strict'",
      "Pillow (==8.0.0) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'optional-strict'",
      "pandas (==1.4.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional-strict'",
      "matplotlib (==3.5.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional-strict'",
      "scikit-learn (==1.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional-strict'",
      "scipy (==1.8.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional-strict'",
      "pandas (==1.3.5) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional-strict'",
      "Pillow (==9.1.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional-strict'",
      "scipy (==1.8.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional-strict'",
      "psutil (==5.9.1) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional-strict'",
      "seaborn (==0.9.1) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'optional-strict'",
      "matplotlib (==3.0.0) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'optional-strict'",
      "pandas (==1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
      "matplotlib (==3.1.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
      "scikit-learn (==0.24.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
      "scipy (==1.5.4) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
      "pandas (==1.2.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional-strict'",
      "matplotlib (==3.4.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional-strict'",
      "scikit-learn (==0.24.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional-strict'",
      "scipy (==1.6.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional-strict'",
      "pandas (==1.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional-strict'",
      "matplotlib (==3.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional-strict'",
      "scikit-learn (==1.0.2) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional-strict'",
      "scipy (==1.8.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional-strict'",
      "pandas (==1.5.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'optional-strict'",
      "Pillow (==9.2.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'optional-strict'",
      "scipy (==1.9.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'optional-strict'",
      "matplotlib (==3.5.0) ; (python_version >= \"3.10\") and extra == 'optional-strict'",
      "scikit-learn (==1.1.0) ; (python_version >= \"3.10\") and extra == 'optional-strict'",
      "psutil (==5.9.1) ; (python_version >= \"3.11\") and extra == 'optional-strict'",
      "seaborn (==0.10.0) ; (python_version >= \"3.6\") and extra == 'optional-strict'",
      "torch-optimizer (==0.3.0) ; (python_version >= \"3.6\") and extra == 'optional-strict'",
      "psutil (>=5.8.0) ; (python_version < \"3.10\") and extra == 'optional'",
      "Pillow (>=8.0.0) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'optional'",
      "pandas (>=1.4.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional'",
      "matplotlib (>=3.5.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional'",
      "scikit-learn (>=1.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional'",
      "scipy (>=1.8.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional'",
      "pandas (>=1.3.5) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional'",
      "Pillow (>=9.1.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional'",
      "scipy (>=1.8.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional'",
      "psutil (>=5.9.1) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional'",
      "seaborn (>=0.9.1) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'optional'",
      "matplotlib (>=3.0.0) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'optional'",
      "pandas (>=1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
      "matplotlib (>=3.1.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
      "scikit-learn (>=0.24.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
      "scipy (>=1.5.4) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
      "pandas (>=1.2.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional'",
      "matplotlib (>=3.4.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional'",
      "scikit-learn (>=0.24.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional'",
      "scipy (>=1.6.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional'",
      "pandas (>=1.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional'",
      "matplotlib (>=3.4.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional'",
      "scikit-learn (>=1.0.2) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional'",
      "scipy (>=1.8.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional'",
      "pandas (>=1.5.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'optional'",
      "Pillow (>=9.2.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'optional'",
      "scipy (>=1.9.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'optional'",
      "matplotlib (>=3.5.0) ; (python_version >= \"3.10\") and extra == 'optional'",
      "scikit-learn (>=1.1.0) ; (python_version >= \"3.10\") and extra == 'optional'",
      "psutil (>=5.9.1) ; (python_version >= \"3.11\") and extra == 'optional'",
      "seaborn (>=0.10.0) ; (python_version >= \"3.6\") and extra == 'optional'",
      "torch-optimizer (>=0.3.0) ; (python_version >= \"3.6\") and extra == 'optional'",
      "six (==1.11.0) ; extra == 'runtime-strict'",
      "ubelt (==1.2.3) ; extra == 'runtime-strict'",
      "parse (==1.12.0) ; extra == 'runtime-strict'",
      "pyflakes (==2.4.0) ; extra == 'runtime-strict'",
      "astunparse (==1.6.1) ; extra == 'runtime-strict'",
      "pygtrie (==2.3.3) ; extra == 'runtime-strict'",
      "scriptconfig (==0.7.0) ; extra == 'runtime-strict'",
      "kwarray (==0.6.7) ; extra == 'runtime-strict'",
      "kwimage (==0.9.7) ; extra == 'runtime-strict'",
      "torch-liberator (==0.2.1) ; extra == 'runtime-strict'",
      "imageio (<2.8.0) ; (python_version < \"3.0\") and extra == 'runtime-strict'",
      "qualname (==0.1.0) ; (python_version < \"3.0\") and extra == 'runtime-strict'",
      "numpy (==1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.6\") and extra == 'runtime-strict'",
      "torch (==1.9.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'runtime-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'runtime-strict'",
      "torch (==1.11.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'runtime-strict'",
      "torchvision (==0.12.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'runtime-strict'",
      "numpy (==1.21.6) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'runtime-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'runtime-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'runtime-strict'",
      "torchvision (==0.10.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'runtime-strict'",
      "torch (==1.9.0) ; (python_version < \"3.9.0\" and python_version >= \"3.6.0\") and extra == 'runtime-strict'",
      "torch (==1.13.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'runtime-strict'",
      "numpy (==1.23.2) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'runtime-strict'",
      "imageio (>2.6.0) ; (python_version > \"3.0\") and extra == 'runtime-strict'",
      "xdoctest (>=0.15.10) ; extra == 'tests'",
      "xdoctest (==0.15.10) ; extra == 'tests-strict'",
      "pytest (<=4.6.11,==4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests-strict'",
      "pytest-cov (==2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests-strict'",
      "pytest (<=4.6.11,==4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests-strict'",
      "pytest-cov (==2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests-strict'",
      "coverage (==4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'tests-strict'",
      "pytest (<=6.1.2,==4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests-strict'",
      "pytest-cov (==2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests-strict'",
      "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests-strict'",
      "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests-strict'",
      "coverage (==5.2.1) ; (python_version >= \"3.6\") and extra == 'tests-strict'",
      "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests-strict'",
      "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests'",
      "pytest-cov (>=2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests'",
      "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests'",
      "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests'",
      "pytest-cov (>=2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests'",
      "coverage (>=4.4.0) ; (python_version < \"3.6\" and python_version >= \"2.7\") and extra == 'tests'",
      "pytest (<=6.1.2,>=4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests'",
      "pytest-cov (>=2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests'",
      "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests'",
      "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests'",
      "coverage (>=5.2.1) ; (python_version >= \"3.6\") and extra == 'tests'",
      "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "Train and deploy pytorch models",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16816971,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2855c7dfe80db34b004aea09de73ff33aeb031f165ad9c5fa8323162d482a17c",
          "md5": "de828b21605ff5479bac5ee63781a0c0",
          "sha256": "038cb6d1bf08dcf98e3bbce28a26ef319d0193d7027199f75b5dee3844e2063e"
        },
        "downloads": -1,
        "filename": "netharn-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de828b21605ff5479bac5ee63781a0c0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 255395,
        "upload_time": "2018-09-09T21:18:18",
        "upload_time_iso_8601": "2018-09-09T21:18:18.679202Z",
        "url": "https://files.pythonhosted.org/packages/28/55/c7dfe80db34b004aea09de73ff33aeb031f165ad9c5fa8323162d482a17c/netharn-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1846930536b524a9b117d5bb0c1d0e56f861ec4ce7be250f8ca3befbbdaa6874",
          "md5": "a530a6f7979001575a5522d3caeeedc2",
          "sha256": "e8c984327a8f37dd0783dd904b74ab3b759ebd5225a26d34805278c32096b6ac"
        },
        "downloads": -1,
        "filename": "netharn-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a530a6f7979001575a5522d3caeeedc2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 262097,
        "upload_time": "2018-12-01T00:51:10",
        "upload_time_iso_8601": "2018-12-01T00:51:10.842822Z",
        "url": "https://files.pythonhosted.org/packages/18/46/930536b524a9b117d5bb0c1d0e56f861ec4ce7be250f8ca3befbbdaa6874/netharn-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "215b6abbce7ee70ec02c419e3ac451358c0555926e276a06b20bf42394740a2e",
          "md5": "c750df02432eb4ead59b52a04617ac6f",
          "sha256": "af1a7e68257e8952eda2d53737813aaeffe0a06aa14195f71f99267533a33422"
        },
        "downloads": -1,
        "filename": "netharn-0.5.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "c750df02432eb4ead59b52a04617ac6f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 350369,
        "upload_time": "2019-11-14T17:31:57",
        "upload_time_iso_8601": "2019-11-14T17:31:57.651934Z",
        "url": "https://files.pythonhosted.org/packages/21/5b/6abbce7ee70ec02c419e3ac451358c0555926e276a06b20bf42394740a2e/netharn-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dce34474489ad4f00897079b87400730cc034ff963723dcd096abae64aee0a8",
          "md5": "ce208bd7a5abcda9c2d8b3874d3a3ac3",
          "sha256": "acaeba509f97fe0409c48a3499f09a1e36fb3ad549f40bdceab30153b188f60e"
        },
        "downloads": -1,
        "filename": "netharn-0.5.11-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "ce208bd7a5abcda9c2d8b3874d3a3ac3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 545911,
        "upload_time": "2020-12-03T01:53:16",
        "upload_time_iso_8601": "2020-12-03T01:53:16.845877Z",
        "url": "https://files.pythonhosted.org/packages/1d/ce/34474489ad4f00897079b87400730cc034ff963723dcd096abae64aee0a8/netharn-0.5.11-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9338b67d94e4a2812738f72741bf9f8b07038d056a99ce1f520ecad15687dce5",
          "md5": "7b94bf2f5ad21f34d3295dcb3c1307bf",
          "sha256": "492706f1ea4f1d0fbcef9c6f6bf050dc2701f6f1a2ca38e7520fc2f0841b026f"
        },
        "downloads": -1,
        "filename": "netharn-0.5.11.tar.gz",
        "has_sig": true,
        "md5_digest": "7b94bf2f5ad21f34d3295dcb3c1307bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 480686,
        "upload_time": "2020-12-03T01:53:10",
        "upload_time_iso_8601": "2020-12-03T01:53:10.811527Z",
        "url": "https://files.pythonhosted.org/packages/93/38/b67d94e4a2812738f72741bf9f8b07038d056a99ce1f520ecad15687dce5/netharn-0.5.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75b610c33b89c67b07ce27b8989863fdd3f1c29bcfd11e1ed39ad90c9d340cbf",
          "md5": "7d7e31f02b6576da0d5c37ee9d6bbe23",
          "sha256": "465c4b6dd31b9600ce25c34a955a1b211571ac7baed844d4a6cf3e5bc6cc93f2"
        },
        "downloads": -1,
        "filename": "netharn-0.5.12-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7d7e31f02b6576da0d5c37ee9d6bbe23",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 526492,
        "upload_time": "2020-12-07T17:28:57",
        "upload_time_iso_8601": "2020-12-07T17:28:57.707348Z",
        "url": "https://files.pythonhosted.org/packages/75/b6/10c33b89c67b07ce27b8989863fdd3f1c29bcfd11e1ed39ad90c9d340cbf/netharn-0.5.12-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33e55dde6465174b2bf40cffe2920e390b689a9faaf9efc66ab9d322711260d2",
          "md5": "d07a6acddfb36802bcf388b7bb142578",
          "sha256": "9c364a94f009960c5aa9727c6d6205fbddb1b5560ce686546a7c6db0640cac4e"
        },
        "downloads": -1,
        "filename": "netharn-0.5.12.tar.gz",
        "has_sig": true,
        "md5_digest": "d07a6acddfb36802bcf388b7bb142578",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 462567,
        "upload_time": "2020-12-07T17:28:55",
        "upload_time_iso_8601": "2020-12-07T17:28:55.381610Z",
        "url": "https://files.pythonhosted.org/packages/33/e5/5dde6465174b2bf40cffe2920e390b689a9faaf9efc66ab9d322711260d2/netharn-0.5.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3ebf3a3f0efc5a84604522b9f42d3a54fab5d286c396941f290a916ca3e9c22",
          "md5": "f8daa6998e746eb5fba47596f2d53feb",
          "sha256": "0eba262daccf0885ece680a534fa655c60e666c3f8323d88bc36fac516eb375d"
        },
        "downloads": -1,
        "filename": "netharn-0.5.13-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "f8daa6998e746eb5fba47596f2d53feb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 561064,
        "upload_time": "2021-01-19T18:57:12",
        "upload_time_iso_8601": "2021-01-19T18:57:12.841739Z",
        "url": "https://files.pythonhosted.org/packages/f3/eb/f3a3f0efc5a84604522b9f42d3a54fab5d286c396941f290a916ca3e9c22/netharn-0.5.13-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39ea47b29dcfaf25d1bf6a45ba447ae24a7623517383b5e66f6bba04dce4d93d",
          "md5": "bae0df8fafacf34193275d68f34200f4",
          "sha256": "d953cada73a86b412ae8574aaa37eb46a4504785f058265b004744be57a256f2"
        },
        "downloads": -1,
        "filename": "netharn-0.5.13-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "bae0df8fafacf34193275d68f34200f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 561061,
        "upload_time": "2021-01-19T18:57:16",
        "upload_time_iso_8601": "2021-01-19T18:57:16.113536Z",
        "url": "https://files.pythonhosted.org/packages/39/ea/47b29dcfaf25d1bf6a45ba447ae24a7623517383b5e66f6bba04dce4d93d/netharn-0.5.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fe0231fb1fde69e644a93878c101ea15412b98c58d4fe82925cfe01b9765e02",
          "md5": "b2a1dc517cc2a1785e70cad401dbf5dd",
          "sha256": "7c5134d4d99b8822af41e5ac7b0cb1947af036574d020a02263364a33e4eac52"
        },
        "downloads": -1,
        "filename": "netharn-0.5.13.tar.gz",
        "has_sig": true,
        "md5_digest": "b2a1dc517cc2a1785e70cad401dbf5dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 546145,
        "upload_time": "2021-01-19T18:57:09",
        "upload_time_iso_8601": "2021-01-19T18:57:09.398425Z",
        "url": "https://files.pythonhosted.org/packages/6f/e0/231fb1fde69e644a93878c101ea15412b98c58d4fe82925cfe01b9765e02/netharn-0.5.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "688d48cbe2637bad03251c5cf325183c3ef5cb4c64ff73d5f93cd8c23026e0b7",
          "md5": "53f6482e037bd81defab0437899ee6a5",
          "sha256": "dd94ab5d2c1783c6f324c7f16c257843b423931002e5a7b9cf6398bff3286393"
        },
        "downloads": -1,
        "filename": "netharn-0.5.14-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "53f6482e037bd81defab0437899ee6a5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 561497,
        "upload_time": "2021-01-21T21:31:24",
        "upload_time_iso_8601": "2021-01-21T21:31:24.301660Z",
        "url": "https://files.pythonhosted.org/packages/68/8d/48cbe2637bad03251c5cf325183c3ef5cb4c64ff73d5f93cd8c23026e0b7/netharn-0.5.14-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a539c42dc6e205ac624108976314d676efa9c4f0431403804f93fa1d9eaaf902",
          "md5": "3852f4ba0f65fe2976a8cdd2fd07ce32",
          "sha256": "074393d86156c6dc8494f9328e45e01c3e8230610ea7982eb2d381c04228e905"
        },
        "downloads": -1,
        "filename": "netharn-0.5.14-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "3852f4ba0f65fe2976a8cdd2fd07ce32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 561495,
        "upload_time": "2021-01-21T21:31:27",
        "upload_time_iso_8601": "2021-01-21T21:31:27.958782Z",
        "url": "https://files.pythonhosted.org/packages/a5/39/c42dc6e205ac624108976314d676efa9c4f0431403804f93fa1d9eaaf902/netharn-0.5.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e562e8e1cff0fd62bec076153c6ae0816edff975b9e89a44547524a864889551",
          "md5": "e376d280ab37cf9e3c5baa77038ceb05",
          "sha256": "d28d9b0dcda4dee7efd0ef731ddb49b05324df9abb0a5720ee77a90bd6095654"
        },
        "downloads": -1,
        "filename": "netharn-0.5.14.tar.gz",
        "has_sig": true,
        "md5_digest": "e376d280ab37cf9e3c5baa77038ceb05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 546092,
        "upload_time": "2021-01-21T21:31:20",
        "upload_time_iso_8601": "2021-01-21T21:31:20.716098Z",
        "url": "https://files.pythonhosted.org/packages/e5/62/e8e1cff0fd62bec076153c6ae0816edff975b9e89a44547524a864889551/netharn-0.5.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9737693c781856919993dccf87195e0cd0e017c3b222d47d1b33ac3fa3dafc4a",
          "md5": "595cee006176982c61fbec7a7f070eac",
          "sha256": "f03430b5fa0650b71c352a7cd3ab6b92d5c452556805c39ed30ce10fdae9eeae"
        },
        "downloads": -1,
        "filename": "netharn-0.5.15-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "595cee006176982c61fbec7a7f070eac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 561508,
        "upload_time": "2021-01-27T03:52:29",
        "upload_time_iso_8601": "2021-01-27T03:52:29.190792Z",
        "url": "https://files.pythonhosted.org/packages/97/37/693c781856919993dccf87195e0cd0e017c3b222d47d1b33ac3fa3dafc4a/netharn-0.5.15-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3011330cbab8c81fb1abb779fe6ac3187ed34b287100dedb7a7069d14ee663e0",
          "md5": "f2694fe182e39dbc48e0f86f1fb354c6",
          "sha256": "f6749cf021f4687530c14244f029ce0fb3eb29372de03a80af7b9d9530365ab1"
        },
        "downloads": -1,
        "filename": "netharn-0.5.15-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "f2694fe182e39dbc48e0f86f1fb354c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 561506,
        "upload_time": "2021-01-27T03:52:32",
        "upload_time_iso_8601": "2021-01-27T03:52:32.550654Z",
        "url": "https://files.pythonhosted.org/packages/30/11/330cbab8c81fb1abb779fe6ac3187ed34b287100dedb7a7069d14ee663e0/netharn-0.5.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d374d54a6604631a9b73c75f1c9dff12394df1c8752e23c743dfc78e1478e333",
          "md5": "24c05a2652fe29982562b73084ee8661",
          "sha256": "451a126a43c65e1f6f956d2c780153c621516411fcc4f7333c535856b4b9416f"
        },
        "downloads": -1,
        "filename": "netharn-0.5.15.tar.gz",
        "has_sig": true,
        "md5_digest": "24c05a2652fe29982562b73084ee8661",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 546029,
        "upload_time": "2021-01-27T03:52:25",
        "upload_time_iso_8601": "2021-01-27T03:52:25.918870Z",
        "url": "https://files.pythonhosted.org/packages/d3/74/d54a6604631a9b73c75f1c9dff12394df1c8752e23c743dfc78e1478e333/netharn-0.5.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a340ff5a494cc115fe5cfb0d5b01dba201ccca31ce4c930de32a79b4425b298",
          "md5": "3908cee4c4222541aac8d1f20c7b356d",
          "sha256": "7270f956fc1dbdd87501ee46097ef5ddf09ee6b5e4789a968273b84458d3b230"
        },
        "downloads": -1,
        "filename": "netharn-0.5.16-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "3908cee4c4222541aac8d1f20c7b356d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 533767,
        "upload_time": "2021-06-16T15:47:51",
        "upload_time_iso_8601": "2021-06-16T15:47:51.494563Z",
        "url": "https://files.pythonhosted.org/packages/8a/34/0ff5a494cc115fe5cfb0d5b01dba201ccca31ce4c930de32a79b4425b298/netharn-0.5.16-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5688f32e2b1a2e8719b436a97217d4914b412454f7751f04831787d197242a9e",
          "md5": "a8930b07b405029b6ee68e058d2cdfd4",
          "sha256": "5b125544b0952db7d52405e5b3c4abf31f1608bcdf7a531e175119a0fdc577ac"
        },
        "downloads": -1,
        "filename": "netharn-0.5.16-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a8930b07b405029b6ee68e058d2cdfd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 533764,
        "upload_time": "2021-06-16T15:47:54",
        "upload_time_iso_8601": "2021-06-16T15:47:54.235837Z",
        "url": "https://files.pythonhosted.org/packages/56/88/f32e2b1a2e8719b436a97217d4914b412454f7751f04831787d197242a9e/netharn-0.5.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0a6d9a3580a1f155da9df5a84c8916d1f6adc96bb7a1e5eb39a1e85d43b9119",
          "md5": "ee83f00b65add39b2013324c98b85763",
          "sha256": "4cf5a2cf1e086270e661dd5e1270a404dcf934fa1bef82a3fa0e1b172dc06dca"
        },
        "downloads": -1,
        "filename": "netharn-0.5.16.tar.gz",
        "has_sig": true,
        "md5_digest": "ee83f00b65add39b2013324c98b85763",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 471936,
        "upload_time": "2021-06-16T15:47:48",
        "upload_time_iso_8601": "2021-06-16T15:47:48.434784Z",
        "url": "https://files.pythonhosted.org/packages/d0/a6/d9a3580a1f155da9df5a84c8916d1f6adc96bb7a1e5eb39a1e85d43b9119/netharn-0.5.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "467f3b73e8b1d60fd90b14553e0ff6a15eddf5a5fc4f06fe0632ecbddf08ee44",
          "md5": "5508bc1667489a814da93bdb06960b20",
          "sha256": "4e8023abe1b60ee1354e97b7e6c8896c57779829c141a9feb1051af42367c6da"
        },
        "downloads": -1,
        "filename": "netharn-0.5.17-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "5508bc1667489a814da93bdb06960b20",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 485835,
        "upload_time": "2021-10-05T17:15:43",
        "upload_time_iso_8601": "2021-10-05T17:15:43.105371Z",
        "url": "https://files.pythonhosted.org/packages/46/7f/3b73e8b1d60fd90b14553e0ff6a15eddf5a5fc4f06fe0632ecbddf08ee44/netharn-0.5.17-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "611dfea72252a7f0e1df82a9728a298501a7e640cdaf988cb0ca1846ea5fab57",
          "md5": "85751ee27f10e5c7cc9338e8594f2173",
          "sha256": "dcdb40ba40c18bf05310c723007a2ba684e4a73264c9cfa896f73736f9ab6a4f"
        },
        "downloads": -1,
        "filename": "netharn-0.5.17-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "85751ee27f10e5c7cc9338e8594f2173",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 485833,
        "upload_time": "2021-10-05T17:15:45",
        "upload_time_iso_8601": "2021-10-05T17:15:45.619403Z",
        "url": "https://files.pythonhosted.org/packages/61/1d/fea72252a7f0e1df82a9728a298501a7e640cdaf988cb0ca1846ea5fab57/netharn-0.5.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "625a43f58f510194d00cc02c760da332a554c6d1892ab2c0a39b852f51385a3a",
          "md5": "bc8ec2830f307dbedf518ad861bd0d64",
          "sha256": "5eebeb31c0a53aedcbbc80c41729a38b10da0d58743ce48f167b0e5a01be8f25"
        },
        "downloads": -1,
        "filename": "netharn-0.5.17.tar.gz",
        "has_sig": true,
        "md5_digest": "bc8ec2830f307dbedf518ad861bd0d64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 431467,
        "upload_time": "2021-10-05T17:15:40",
        "upload_time_iso_8601": "2021-10-05T17:15:40.306311Z",
        "url": "https://files.pythonhosted.org/packages/62/5a/43f58f510194d00cc02c760da332a554c6d1892ab2c0a39b852f51385a3a/netharn-0.5.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f460b558a724c107cf7ac7a6714a35d0d5c7e85f1b447bc4ae7cade9d039fe6d",
          "md5": "5b50061001df9f4c62ae7bea58c8ec21",
          "sha256": "3eabdf904abde47c73113f10bf80d8fd9f68e2ad0ec96fdb0835b3f08653ffbb"
        },
        "downloads": -1,
        "filename": "netharn-0.5.18-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "5b50061001df9f4c62ae7bea58c8ec21",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 485832,
        "upload_time": "2022-03-19T19:05:17",
        "upload_time_iso_8601": "2022-03-19T19:05:17.407112Z",
        "url": "https://files.pythonhosted.org/packages/f4/60/b558a724c107cf7ac7a6714a35d0d5c7e85f1b447bc4ae7cade9d039fe6d/netharn-0.5.18-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e229fc44701d7407ae468a8d2f672b990dd9b39388819ca6e88929b4a9760b03",
          "md5": "c438f5561f02b114775e0d441b97001e",
          "sha256": "9a34b53ac191277c2142b95f2c30eeba112aa45cdf0e93397c5c52177a91f7cb"
        },
        "downloads": -1,
        "filename": "netharn-0.5.18-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "c438f5561f02b114775e0d441b97001e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 485832,
        "upload_time": "2022-03-19T19:05:21",
        "upload_time_iso_8601": "2022-03-19T19:05:21.425148Z",
        "url": "https://files.pythonhosted.org/packages/e2/29/fc44701d7407ae468a8d2f672b990dd9b39388819ca6e88929b4a9760b03/netharn-0.5.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7e8132c30745c14af6ee3f9ea05fdfb5e76b830ac49bdfcfd30486ecc42f140",
          "md5": "2310938d44e3be732ec5954e186c7d3e",
          "sha256": "0aa5430c52b3323bb11bcf0237f911f72642782dc424c4feed8a553413d74713"
        },
        "downloads": -1,
        "filename": "netharn-0.5.18.tar.gz",
        "has_sig": true,
        "md5_digest": "2310938d44e3be732ec5954e186c7d3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 431529,
        "upload_time": "2022-03-19T19:05:13",
        "upload_time_iso_8601": "2022-03-19T19:05:13.088187Z",
        "url": "https://files.pythonhosted.org/packages/d7/e8/132c30745c14af6ee3f9ea05fdfb5e76b830ac49bdfcfd30486ecc42f140/netharn-0.5.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f35bbcd591213084bd5350f3ec34c6fae538f43a4baa6b51b6f8dc8d958ca4",
          "md5": "4394b22cc12a59bbdce085d335aeff1f",
          "sha256": "972ab26e57a436065fe14724db47065bc7ee7d5c7f25a33ffe4462f317994f39"
        },
        "downloads": -1,
        "filename": "netharn-0.5.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "4394b22cc12a59bbdce085d335aeff1f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 351922,
        "upload_time": "2019-11-25T20:04:04",
        "upload_time_iso_8601": "2019-11-25T20:04:04.332562Z",
        "url": "https://files.pythonhosted.org/packages/a8/f3/5bbcd591213084bd5350f3ec34c6fae538f43a4baa6b51b6f8dc8d958ca4/netharn-0.5.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92d71c29cdec97cab042b8f41aec229e859c049f2615f4e13eb6cf17c2b100f7",
          "md5": "6cce6af92a750be72d291df549d4a12a",
          "sha256": "10dfd4e1263f3cc95d4882351bc6c9a4d3750683c0ee62e062184a85633d5601"
        },
        "downloads": -1,
        "filename": "netharn-0.5.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "6cce6af92a750be72d291df549d4a12a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 358363,
        "upload_time": "2020-01-31T03:26:46",
        "upload_time_iso_8601": "2020-01-31T03:26:46.140768Z",
        "url": "https://files.pythonhosted.org/packages/92/d7/1c29cdec97cab042b8f41aec229e859c049f2615f4e13eb6cf17c2b100f7/netharn-0.5.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a89d79ea7f8f92935d81bfb19e151c8cb7417a72fec564d66542719250a506cd",
          "md5": "4a500dda2051a88df5dac5fbd4400337",
          "sha256": "f38f1ecf1512c302c9ac1d502084b95f1b180d530a638850bfb290844684efc3"
        },
        "downloads": -1,
        "filename": "netharn-0.5.3.tar.gz",
        "has_sig": true,
        "md5_digest": "4a500dda2051a88df5dac5fbd4400337",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 313789,
        "upload_time": "2020-01-31T03:26:43",
        "upload_time_iso_8601": "2020-01-31T03:26:43.790607Z",
        "url": "https://files.pythonhosted.org/packages/a8/9d/79ea7f8f92935d81bfb19e151c8cb7417a72fec564d66542719250a506cd/netharn-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "014ebf27728839a02c4cc2feba373ad10e522dd17042f485e0eb75dfb21541e5",
          "md5": "7bf2c863d436a61a058dd6a9a4c283b4",
          "sha256": "32fae5a2a589ae7cd8a8d69dbfd585edf4c770b988f32fa26d883dcbf8bea551"
        },
        "downloads": -1,
        "filename": "netharn-0.5.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7bf2c863d436a61a058dd6a9a4c283b4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 430373,
        "upload_time": "2020-02-19T18:02:06",
        "upload_time_iso_8601": "2020-02-19T18:02:06.230659Z",
        "url": "https://files.pythonhosted.org/packages/01/4e/bf27728839a02c4cc2feba373ad10e522dd17042f485e0eb75dfb21541e5/netharn-0.5.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05ebbe56fb10e0633582a1b7081ac88c20f8785feba8cf730972aee93206e683",
          "md5": "6cab3d54d8011a41fda553d4f20ade77",
          "sha256": "5f28eb2f93cb637d5a3388dc0f8d3443b33f6e572f72992c513e1651ee5a36c0"
        },
        "downloads": -1,
        "filename": "netharn-0.5.4.tar.gz",
        "has_sig": true,
        "md5_digest": "6cab3d54d8011a41fda553d4f20ade77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 378322,
        "upload_time": "2020-02-19T18:02:03",
        "upload_time_iso_8601": "2020-02-19T18:02:03.683033Z",
        "url": "https://files.pythonhosted.org/packages/05/eb/be56fb10e0633582a1b7081ac88c20f8785feba8cf730972aee93206e683/netharn-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82494f9d8b33c8aa60a0024dba19a62639b1f9fe4bb6c975ad746834850de72e",
          "md5": "b7b9626b1ae309837219dc97cb707278",
          "sha256": "5152ee74e80add8fe3123d03d8d39491f4fdb04ae417240a57bbdc47755ba8ff"
        },
        "downloads": -1,
        "filename": "netharn-0.5.5-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "b7b9626b1ae309837219dc97cb707278",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 454372,
        "upload_time": "2020-04-08T18:22:29",
        "upload_time_iso_8601": "2020-04-08T18:22:29.569508Z",
        "url": "https://files.pythonhosted.org/packages/82/49/4f9d8b33c8aa60a0024dba19a62639b1f9fe4bb6c975ad746834850de72e/netharn-0.5.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fb60b8d291da896a23bbe21e882d61ea56e23ae8c577989e4ad39340c62d100",
          "md5": "f7820739e317f3a6a8f754c1db0359a8",
          "sha256": "b47bff018aca6fb072ecbac8bd43f6da96e5b1041b0b441fb9e1ea2797c7c972"
        },
        "downloads": -1,
        "filename": "netharn-0.5.5.tar.gz",
        "has_sig": true,
        "md5_digest": "f7820739e317f3a6a8f754c1db0359a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 394772,
        "upload_time": "2020-04-08T18:22:27",
        "upload_time_iso_8601": "2020-04-08T18:22:27.442171Z",
        "url": "https://files.pythonhosted.org/packages/8f/b6/0b8d291da896a23bbe21e882d61ea56e23ae8c577989e4ad39340c62d100/netharn-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1af1f83e371e370e0be9f12975dd410e3f8b85516bcf7432ee7c3740adc0476",
          "md5": "facb214c1ee63f8c82627d2bcc1452ba",
          "sha256": "5c734de6decf7c260edbb19b76b7db7f4450d2264109ea34e93ff65ed66d73bc"
        },
        "downloads": -1,
        "filename": "netharn-0.5.6-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "facb214c1ee63f8c82627d2bcc1452ba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 455340,
        "upload_time": "2020-04-14T16:48:50",
        "upload_time_iso_8601": "2020-04-14T16:48:50.200373Z",
        "url": "https://files.pythonhosted.org/packages/a1/af/1f83e371e370e0be9f12975dd410e3f8b85516bcf7432ee7c3740adc0476/netharn-0.5.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "310882ae08cfea501c25293d51076425ba487c394e0fe0babb00188d40ab8f99",
          "md5": "db2ea923752fb9c3b6155803a7afad4a",
          "sha256": "179b08193f38a1dae471c343327e0ef5949846f61daecda6bf7c47b5146aaf80"
        },
        "downloads": -1,
        "filename": "netharn-0.5.6.tar.gz",
        "has_sig": true,
        "md5_digest": "db2ea923752fb9c3b6155803a7afad4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 399617,
        "upload_time": "2020-04-14T16:48:47",
        "upload_time_iso_8601": "2020-04-14T16:48:47.385048Z",
        "url": "https://files.pythonhosted.org/packages/31/08/82ae08cfea501c25293d51076425ba487c394e0fe0babb00188d40ab8f99/netharn-0.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "781dbc38d2c29696f0889b1a347d7d1ab7ce353f758efe66a27d1d2a386031b0",
          "md5": "984f179abcbd0fd9e0dcf279717e12a3",
          "sha256": "1a567864d3842ac28b2390ca18eb324be03fea00cc05bd8744108737806e809a"
        },
        "downloads": -1,
        "filename": "netharn-0.5.7-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "984f179abcbd0fd9e0dcf279717e12a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 483605,
        "upload_time": "2020-05-28T15:29:38",
        "upload_time_iso_8601": "2020-05-28T15:29:38.973369Z",
        "url": "https://files.pythonhosted.org/packages/78/1d/bc38d2c29696f0889b1a347d7d1ab7ce353f758efe66a27d1d2a386031b0/netharn-0.5.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "617f9951ba27648b06da6151050f908db7ad25039357753481eb4b5d5756167f",
          "md5": "7035f8a19f1ff3c85afe78859e902698",
          "sha256": "f26915068c1e5f26308abdf261d9b544c22c1f7c78a769d282a8396c9055d008"
        },
        "downloads": -1,
        "filename": "netharn-0.5.7.tar.gz",
        "has_sig": true,
        "md5_digest": "7035f8a19f1ff3c85afe78859e902698",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 431229,
        "upload_time": "2020-05-28T15:29:36",
        "upload_time_iso_8601": "2020-05-28T15:29:36.279728Z",
        "url": "https://files.pythonhosted.org/packages/61/7f/9951ba27648b06da6151050f908db7ad25039357753481eb4b5d5756167f/netharn-0.5.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce46a8ddf8a4b5d2ba26ff06f93e42da8d3863560a419868d6eb7127c0e575e",
          "md5": "965484407d319694cc4c8e8cdb5e9dfb",
          "sha256": "e298e2b7c071cd19cc50ffe53b1c8880c3fd6fb1dbf9bcddd552400cb48f7b9d"
        },
        "downloads": -1,
        "filename": "netharn-0.5.8-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "965484407d319694cc4c8e8cdb5e9dfb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 468994,
        "upload_time": "2020-07-08T00:30:11",
        "upload_time_iso_8601": "2020-07-08T00:30:11.735712Z",
        "url": "https://files.pythonhosted.org/packages/fc/e4/6a8ddf8a4b5d2ba26ff06f93e42da8d3863560a419868d6eb7127c0e575e/netharn-0.5.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f20510dd72546d01aecf09bdb0aef912791809b793f70342e76c902b7ba5b40",
          "md5": "0f23376950180bcd16e877f00094b0a8",
          "sha256": "b08f9a1be86c47757746bfdc97f4a92361d07965ea4dd9ef42607fe8caf45186"
        },
        "downloads": -1,
        "filename": "netharn-0.5.8.tar.gz",
        "has_sig": true,
        "md5_digest": "0f23376950180bcd16e877f00094b0a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 416499,
        "upload_time": "2020-07-08T00:30:09",
        "upload_time_iso_8601": "2020-07-08T00:30:09.075346Z",
        "url": "https://files.pythonhosted.org/packages/9f/20/510dd72546d01aecf09bdb0aef912791809b793f70342e76c902b7ba5b40/netharn-0.5.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "580872a21b29c975f96b0a708176c4b1a2afeb50e02e06da8bd51d9179d97c1e",
          "md5": "7ec8f0c71525f438fbe5316f3266ab4e",
          "sha256": "8ecc716654b612ea19b047c50db66a3a162235010b20ee5068e8a6c77a0d757a"
        },
        "downloads": -1,
        "filename": "netharn-0.5.9-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7ec8f0c71525f438fbe5316f3266ab4e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 495885,
        "upload_time": "2020-08-27T00:40:00",
        "upload_time_iso_8601": "2020-08-27T00:40:00.229193Z",
        "url": "https://files.pythonhosted.org/packages/58/08/72a21b29c975f96b0a708176c4b1a2afeb50e02e06da8bd51d9179d97c1e/netharn-0.5.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9c6be038d24acd251f6d92731c1050dcbc34166ecadd0e9978d935860db566f",
          "md5": "64933048e52a77cadf718ae2b2de528b",
          "sha256": "fa959d675f1a940b4f9624fef52575f3bedd65aed1062722ac0bf88b0492e273"
        },
        "downloads": -1,
        "filename": "netharn-0.5.9.tar.gz",
        "has_sig": true,
        "md5_digest": "64933048e52a77cadf718ae2b2de528b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 438085,
        "upload_time": "2020-08-27T00:39:57",
        "upload_time_iso_8601": "2020-08-27T00:39:57.754096Z",
        "url": "https://files.pythonhosted.org/packages/f9/c6/be038d24acd251f6d92731c1050dcbc34166ecadd0e9978d935860db566f/netharn-0.5.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4796ceb55c54752db3d5ab6232452ceb4b6f026487f3e3f5dfb2babd8763fe2b",
          "md5": "50345774edce427dcd8791f26bd87b47",
          "sha256": "9cff3bfd9d72ee0df8cbf86c5621ca007b17e883e9d55b3967ac35c03f85ab2b"
        },
        "downloads": -1,
        "filename": "netharn-0.6.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "50345774edce427dcd8791f26bd87b47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 487665,
        "upload_time": "2022-07-07T02:30:20",
        "upload_time_iso_8601": "2022-07-07T02:30:20.864477Z",
        "url": "https://files.pythonhosted.org/packages/47/96/ceb55c54752db3d5ab6232452ceb4b6f026487f3e3f5dfb2babd8763fe2b/netharn-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae34184e0dcf855b9bfa2608ee06616f4ccfd6f961d5390fd1511ee9866040b1",
          "md5": "516a124d5ce1371c13fa7b52ef1a6154",
          "sha256": "52d01518fcdf5cba8f5b803015652b1da9227765702514c825c4796534796066"
        },
        "downloads": -1,
        "filename": "netharn-0.6.0.tar.gz",
        "has_sig": true,
        "md5_digest": "516a124d5ce1371c13fa7b52ef1a6154",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 432943,
        "upload_time": "2022-07-07T02:30:26",
        "upload_time_iso_8601": "2022-07-07T02:30:26.089408Z",
        "url": "https://files.pythonhosted.org/packages/ae/34/184e0dcf855b9bfa2608ee06616f4ccfd6f961d5390fd1511ee9866040b1/netharn-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ceb4de164080d6d7f8f95e54e4bd34dcf2dd2199e74fb630b73d530bb55ffae",
          "md5": "a696a660f63e9341e1f7835a09cbf819",
          "sha256": "3b2145553f5cf7650f6701efbf0351c81d3e2d6966eeb41f4339afe05ce3e505"
        },
        "downloads": -1,
        "filename": "netharn-0.6.1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a696a660f63e9341e1f7835a09cbf819",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 451912,
        "upload_time": "2023-02-12T02:14:21",
        "upload_time_iso_8601": "2023-02-12T02:14:21.575720Z",
        "url": "https://files.pythonhosted.org/packages/9c/eb/4de164080d6d7f8f95e54e4bd34dcf2dd2199e74fb630b73d530bb55ffae/netharn-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ceb4de164080d6d7f8f95e54e4bd34dcf2dd2199e74fb630b73d530bb55ffae",
        "md5": "a696a660f63e9341e1f7835a09cbf819",
        "sha256": "3b2145553f5cf7650f6701efbf0351c81d3e2d6966eeb41f4339afe05ce3e505"
      },
      "downloads": -1,
      "filename": "netharn-0.6.1-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "a696a660f63e9341e1f7835a09cbf819",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 451912,
      "upload_time": "2023-02-12T02:14:21",
      "upload_time_iso_8601": "2023-02-12T02:14:21.575720Z",
      "url": "https://files.pythonhosted.org/packages/9c/eb/4de164080d6d7f8f95e54e4bd34dcf2dd2199e74fb630b73d530bb55ffae/netharn-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}