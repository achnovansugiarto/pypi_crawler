{
  "info": {
    "author": "Aur Saraf",
    "author_email": "aur@sarafconsulting.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Compilers",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "[![Build Status](https://app.travis-ci.com/SonOfLilit/kleenexp.svg?branch=master)](https://app.travis-ci.com/github/SonOfLilit/kleenexp)\n\n# Kleene Expressions, a modern regular expression syntax\n\n[Try it](https://kleenexp.herokuapp.com/alice/)\n\nRegular Expressions are one of the best ideas in the programmers ever had. However, Regular Expression _syntax_ is a _^#.\\*!_ accident from the late 60s(!), the most horrible legacy syntax for a computer language in common use. It's time to fix it. Kleene Expressions (named after mathematician Stephen Kleene who invented regex) are an easy to learn and use, hard to misuse, drop-in replacement for traditional regular expression syntax. By design, KleenExps **do not** come with their own regex engine - by changing only the syntax and riding on existing regex engines, we can promise full bug-for-bug API compatibility with your existing solution.\n\nNow 100% less painful to migrate! (you heard that right: migration is not painful _at all_)\n\n- [Installation and usage](#installation-and-usage)\n- [A Taste of the Syntax](#a-taste-of-the-syntax)\n- [How We're Going To Take Over The World](#how-were-going-to-take-over-the-world)\n  - [Roadmap](#roadmap)\n- [Name](#name)\n- [Real World Examples](#real-world-examples)\n- [Tutorial](#tutorial)\n- [Design criteria](#design-criteria)\n  - [Migration](#migration)\n  - [Syntax](#syntax)\n- [Syntax Cheat Sheet](#syntax-cheat-sheet)\n- [Grammar](#grammar)\n- [Contributing](#contributing)\n- [Similar works](#similar-works)\n- [License](#license)\n\n# Installation and usage\n\nYou can try KleenExp [online](https://kleenexp.herokuapp.com/alice/), or you can install and try it with Python and/or with `grep`, e.g.\n\n```\n$ pip install kleenexp\n$ echo \"Trololo lolo\" | grep -P \"`ke \"[#sl]Tro[0+ [#space | 'lo']]lo[#el]\"`\"\n$ python -c 'import ke; print(ke.search(\"[1+ #digit]\", \"Come in no. 51, your time is up\").group(0))'\n51\n```\n\nYou can then install the KleenExp VSCode extension from the VSCode extension marketplace and start using it to replace VSCode's Find and Replace dialogue:\n\n!()[Demo animation]\n\nBe sure to read the tutorial below!\n\n# A Taste of the Syntax\n\n```\nHello. My name is Inigo Montoya. You killed my Father. Prepare to die.\n    # vs. regex:\nHello\\. My name is Inigo Montoya\\. You killed my Father\\. Prepare to die\\.\n```\n\n```\n[1-3 'What is your ' ['name' | 'quest' | 'favourite colour'] '?' [0-1 #space]]\n    # vs. regex:\n(?:What is your (?:name|quest|favourite colour)\\?)\\s?){1,3}\n```\n\n```\nHello. My name is [capture:name #tmp ' ' #tmp #tmp=[#uppercase [1+ #lowercase]]]. You killed my ['Father' | 'Mother' | 'Son' | 'Daughter' | 'Dog' | 'Hamster']. Prepare to die.\n    # vs. regex:\nHello\\. My name is (?<name>[A-Z][a-z]+ [A-Z][a-z]+)\\. You killed my (?:Father|Mother|Son|Daughter|Dog|Hamster)\\. Prepare to die\\.`\n```\n\n```\n[[comment \"Custom macros can help document intent\"]\n  #has_lower=[lookahead [0+ not #lowercase] #lowercase]\n  #has_upper=[lookahead [0+ not #uppercase] #uppercase]\n  #has_digit=[lookahead [0+ not #digit] [capture #digit]]\n  #no_common_sequences=[not lookahead [0+ #any] [\"123\" | \"pass\" | \"Pass\"]]\n\n  #start_string #has_lower #has_upper #has_digit #no_common_sequences [6+ #token_character] #end_string\n]\n    # vs. regex:\n\\A(?=[^a-z]*[a-z])(?=[^A-Z]*[A-Z])(?=\\D*(\\d))(?!.*(?:123|pass|Pass))\\w{6,}\\Z\n```\n\nOr, if you're in a hurry you can use the shortened form:\n\n```\nHello. My name is [c:name #uc [1+ #lc] ' ' #uc [1+ #lc]]. You killed my ['Father' | 'Mother' | 'Son' | 'Daughter' | 'Dog' | 'Hamster']. Prepare to die.\n```\n\n(and when you're done you can use our automatic tool to convert it to the more readable version and commit that instead.)\n\nMore on the syntax, additional examples, and the design criteria that led to its design, below.\n\n# How We're Going To Take Over The World\n\nThis is not a toy project meant to prove a technological point. This is a serious attempt to fix something that is broken in the software ecosystem and has been broken since before we were born. We have experience running R&D departments, we understand how technology decisions are made, and we realise success here hinges more on \"growth hacking\" and on having a painless and risk-free migration story than it does on technical excellence.\n\n**Step 1** would be to introduce KleenExp to the early adopter developer segment by releasing great plugins for popular text editors like Visual Studio Code, with better UX (syntax highlighting, autocompletion, good error messages, ...) and a great tutorial. Adopting a new regex syntax for your text editor is lower-risk, and requires no consultation with other stakeholders.\n\n**Step 2** would be to aim at hobbyist software projects by making our Javascript adoption story as painless and risk-free as possible (since Javascript has the most early-adopting and fast-moving culture). In addition to a runtime drop-in syntax adapter, we will write a `babel` plugin that translates KleenExp syntax into legacy regex syntax at compile time, to enable zero-overhead usage.\n\n**Step 3** would be to aim at startups by optimize and test the implementations until they're ready for deployment in big-league production scenarios\n\n**Step 4** would be to make it possible for large legacy codebases to switch by releasing tools that automatically convert a codebase from legacy syntax to KleenExp (like python's `2to3` or AirBnB's `ts-migrate`)\n\n## Roadmap\n\n- 0.0.1 `pip install`-able, usable in Python projects with `import ke as re` and in `grep` with `` grep -P `ke \"pattern\"`  ``\n- 0.0.2 **We are here** Usable in Visual Studio Code with an extension (requires manually installing the python library)\n- 0.0.x Bugfixes and improvements based on community feedback, support 100% of Python and Javascript regex features\n- 0.1.0 Usable in Javascript projects, Visual Studio Code extension uses Javascript implementation and does not require any manual installation or configuration\n- 0.2.0 Better UX for Visual Studio Code extension through WebView, extensions available for Brainjet IDEs\n- 0.3.0 `Babel` plugin enables Javascript projects to use the new syntax with 0 runtime overhead\n- 0.9.0 Both implementations are fast, stable and battle tested\n- 1.0.0 `2to3`-based tool to automatically migrate Python projects to use new syntax, similar tool for Javascript\n- 2.0.0 Implementations for all major languages (Javascript, Python, Java, C#, Go, Kotlin, Scala). Integration into libpcre (or, if we can't get our patches in, stable libpcre fork that keeps in sync with upstream) enables language, editor, database and other tool implementations to effortlessly support KleenExp\n\n# Name\n\nKleene Expression syntax is named after mathematician Stephen Kleene who invented regular expressions.\n\nWikipedia says:\n\n> Although his last name is commonly pronounced /ˈkliːni/ KLEE-nee or /kliːn/ KLEEN, Kleene himself pronounced it /ˈkleɪni/ KLAY-nee. His son, Ken Kleene, wrote: \"As far as I am aware this pronunciation is incorrect in all known languages. I believe that this novel pronunciation was invented by my father.\"\n\nHowever, with apologies to the late Mr. Kleen, \"Kleene expressions\" is pronounced \"Clean expressions\" and not \"Klein expression\".\n\n# Real World Examples\n\n```\nimport ke\n\ndef remove_parentheses(line):\n    if ke.search(\"([0+ not ')'](\", line):\n        raise ValueError()\n    return ke.sub(\"([0+ not ')'])\", '', line)\nassert remove_parentheses('a(b)c(d)e') == 'ace'\n```\n\n(the original is from a hackathon project I participated in and looks like this:)\n\n```\nimport re\n\ndef remove_parentheses(line):\n    if re.search(r'\\([^)]*\\(', line):\n        raise ValueError()\n    return re.sub(r'\\([^)]*\\)', '', line)\nassert remove_parentheses('a(b)c(d)e') == 'ace'\n```\n\n```\nimport ke\nfrom django.urls import path, re_path\n\nfrom . import views\n\nurlpatterns = [\n    path('articles/2003/', views.special_case_2003),\n    re_path(ke.re('[#start_line]articles/[capture:year 4 #digit]/[#end_line]'), views.year_archive),\n    re_path(ke.re('[#start_line]articles/[capture:year 4 #digit]/[capture:month 2 #digit]/[#end_line]'), views.month_archive),\n    re_path(ke.re('[#start_line]articles/[capture:year 4 #digit]/[capture:month 2 #digit]/[capture:slug 1+ [#letter | #digit | '_' | '-']]/[#end_line]'), views.article_detail),\n]\n```\n\n(the original is taken from Django documentation and looks like this:)\n\n```\nfrom django.urls import path, re_path\n\nfrom . import views\n\nurlpatterns = [\n    path('articles/2003/', views.special_case_2003),\n    re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive),\n    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive),\n    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\\w-]+)/$', views.article_detail),\n]\n```\n\n# Tutorial\n\nThis is still in Beta, we'd love to get your feedback on the syntax.\n\nAnything outside of brackets is a literal:\n\n```\nThis is a (short) literal :-)\n```\n\nYou can use macros like `#digit` (short: `#d`) or `#any` (`#a`):\n\n```\nThis is a [#lowercase #lc #lc #lc] regex :-)\n```\n\nYou can repeat with `n`, `n+` or `n-m`:\n\n```\nThis is a [1+ #lc] regex :-)\n```\n\nIf you want one of a few options, use `|`:\n\n```\nThis is a ['Happy' | 'Short' | 'readable'] regex :-)\n```\n\nCapture with `[capture <kleenexp>]` (short: `[c <kleenexp>]`):\n\n```\nThis is a [capture 1+ [#letter | ' ' | ',']] regex :-)\n```\n\nReverse a pattern that matches a single character with `not`:\n\n```\n[#start_line [0+ #space] [not ['-' | #digit | #space]] [0+ not #space]]\n```\n\nDefine your own macros with `#name=[<regex>]`:\n\n```\nThis is a [#trochee #trochee #trochee] regex :-)[\n    [comment 'see xkcd 856']\n    #trochee=['Robot' | 'Ninja' | 'Pirate' | 'Doctor' | 'Laser' | 'Monkey']\n]\n```\n\nLookeahead and lookbehind:\n\n```\n[#start_string\n  [lookahead [0+ #any] #lowercase]\n  [lookahead [0+ #any] #uppercase]\n  [lookahead [0+ #any] #digit]\n  [not lookahead [0+ #any] [\"123\" | \"pass\" | \"Pass\"]]\n  [6+ #token]\n  #end_string\n]\n```\n\n```\n[\")\" [not lookbehind \"()\"]]\n```\n\nAdd comments with the `comment` operator:\n\n```\n[[comment \"Custom macros can help document intent\"]\n  #has_lower=[lookahead [0+ not #lowercase] #lowercase]\n  #has_upper=[lookahead [0+ not #uppercase] #uppercase]\n  #has_digit=[lookahead [0+ not #digit] [capture #digit]]\n  #no_common_sequences=[not lookahead [0+ #any] [\"123\" | \"pass\" | \"Pass\"]]\n\n  #start_string #has_lower #has_upper #has_digit #no_common_sequences [6+ #token_character] #end_string\n]\n```\n\nSome macros you can use:\n\n| Long Name                                    | Short Name | Definition\\*                                                                                                                             | Notes                                                                                                                                                                                                                         |\n| -------------------------------------------- | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| #any                                         | #a         | `/./`                                                                                                                                    | May or may not match newlines depending on your engine and whether the kleenexp is compiled in multiline mode, see your regex engine's documentation                                                                          |\n| #any_at_all                                  | #aaa       | `[#any \\| #newline]`                                                                                                                     |                                                                                                                                                                                                                               |\n| #newline_character                           | #nc        | `/[\\r\\n\\u2028\\u2029]/`                                                                                                                   | Any of `#cr`, `#lf`, and in unicode a couple more ([explanation](https://stackoverflow.com/questions/1279779/what-is-the-difference-between-r-and-n))                                                                         |\n| #newline                                     | #n         | `[#newline_character \\| #crlf]`                                                                                                          | Note that this may match 1 or 2 characters!                                                                                                                                                                                   |\n| #not_newline                                 | #nn        | `[not #newline_character]`                                                                                                               | Note that this may only match 1 character, and is _not_ the negation of `#n` but of `#nc`!                                                                                                                                    |\n| #linefeed                                    | #lf        | `/\\n/`                                                                                                                                   | See also `#n` ([explanation](https://stackoverflow.com/questions/1279779/what-is-the-difference-between-r-and-n))                                                                                                             |\n| #carriage_return                             | #cr        | `/\\r/`                                                                                                                                   | See also `#n` ([explanation](https://stackoverflow.com/questions/1279779/what-is-the-difference-between-r-and-n))                                                                                                             |\n| #windows_newline                             | #crlf      | `/\\r\\n/`                                                                                                                                 | Windows newline ([explanation](https://stackoverflow.com/questions/1279779/what-is-the-difference-between-r-and-n))                                                                                                           |\n| #tab                                         | #t         | `/\\t/`                                                                                                                                   |                                                                                                                                                                                                                               |\n| #not_tab                                     | #nt        | `[not #tab]`                                                                                                                             |                                                                                                                                                                                                                               |\n| #digit                                       | #d         | `/\\d/`                                                                                                                                   |                                                                                                                                                                                                                               |\n| #not_digit                                   | #nd        | `[not #d]`                                                                                                                               |                                                                                                                                                                                                                               |\n| #letter                                      | #l         | `/[A-Za-z]/`                                                                                                                             | When in unicode mode, this will be translated as `\\p{L}` in languages that support it (and throw an error elsewhere)                                                                                                          |\n| #not_letter                                  | #nl        | `[not #l]`                                                                                                                               |                                                                                                                                                                                                                               |\n| #lowercase                                   | #lc        | `/[a-z]/`                                                                                                                                | Unicode: `\\p{Ll}`                                                                                                                                                                                                             |\n| #not_lowercase                               | #nlc       | `[not #lc]`                                                                                                                              |                                                                                                                                                                                                                               |\n| #uppercase                                   | #uc        | `/[A-Z]/`                                                                                                                                | Unicode: `\\p{Lu}`                                                                                                                                                                                                             |\n| #not_uppercase                               | #nuc       | `[not #uc]`                                                                                                                              |                                                                                                                                                                                                                               |\n| #space                                       | #s         | `/\\s/`                                                                                                                                   |                                                                                                                                                                                                                               |\n| #not_space                                   | #ns        | `[not #space]`                                                                                                                           |                                                                                                                                                                                                                               |\n| #token_character                             | #tc        | `[#letter \\| #digit \\| '_']`                                                                                                             |                                                                                                                                                                                                                               |\n| #not_token_character                         | #ntc       | `[not #tc]`                                                                                                                              |                                                                                                                                                                                                                               |\n| #token                                       |            | `[#letter \\| '_'][0+ #token_character]`                                                                                                  |                                                                                                                                                                                                                               |\n| #word_boundary                               | #wb        | `/\\b/`                                                                                                                                   |                                                                                                                                                                                                                               |\n| #not_word_boundary                           | #nwb       | `[not #wb]`                                                                                                                              |                                                                                                                                                                                                                               |\n| #quote                                       | #q         | `'`                                                                                                                                      |                                                                                                                                                                                                                               |\n| #double_quote                                | #dq        | `\"`                                                                                                                                      |                                                                                                                                                                                                                               |\n| #left_brace                                  | #lb        | `[ '[' ]`                                                                                                                                |                                                                                                                                                                                                                               |\n| #right_brace                                 | #rb        | `[ ']' ]`                                                                                                                                |                                                                                                                                                                                                                               |\n| #start_string                                | #ss        | `/\\A/` (this is the same as `#sl` unless the engine is in multiline mode)                                                                |                                                                                                                                                                                                                               |\n| #end_string                                  | #es        | `/\\Z/` (this is the same as `#el` unless the engine is in multiline mode)                                                                |                                                                                                                                                                                                                               |\n| #start_line                                  | #sl        | `/^/` (this is the same as `#ss` unless the engine is in multiline mode)                                                                 |                                                                                                                                                                                                                               |\n| #end_line                                    | #el        | `/$/` (this is the same as `#es` unless the engine is in multiline mode)                                                                 |                                                                                                                                                                                                                               |\n| #\\<char1\\>..\\<char2\\>, e.g. `#a..f`, `#1..9` |            | `[<char1>-<char2>]`                                                                                                                      | `char1` and `char2` must be of the same class (lowercase english, uppercase english, numbers) and `char1` must be strictly below `char2`, otherwise it's an error (e.g. these are errors: `#a..a`, `#e..a`, `#0..f`, `#!..@`) |\n| #integer                                     | #int       | `[[0-1 '-'] [1+ #digit]]`                                                                                                                |                                                                                                                                                                                                                               |\n| #unsigned_integer                            | #uint      | `[1+ #digit]`                                                                                                                            |                                                                                                                                                                                                                               |\n| #real                                        |            | `[#int [0-1 '.' #uint]`                                                                                                                  |                                                                                                                                                                                                                               |\n| #float                                       |            | `[[0-1 '-'] [[#uint '.' [0-1 #uint] \\| '.' #uint] [0-1 #exponent] \\| #int #exponent] #exponent=[['e' \\| 'E'] [0-1 ['+' \\| '-']] #uint]]` |                                                                                                                                                                                                                               |\n| #hex_digit                                   | #hexd      | `[#digit \\| #a..f \\| #A..F]`                                                                                                             |                                                                                                                                                                                                                               |\n| #hex_number                                  | #hexn      | `[1+ #hex_digit]`                                                                                                                        |                                                                                                                                                                                                                               |\n| #letters                                     |            | `[1+ #letter]`                                                                                                                           |                                                                                                                                                                                                                               |\n| #capture_0+\\_any                             | #c0        | `[capture 0+ #any]`                                                                                                                      |                                                                                                                                                                                                                               |\n| #capture_1+\\_any                             | #c1        | `[capture 1+ #any]`                                                                                                                      |                                                                                                                                                                                                                               |\n| #vertical_tab                                |            | `/\\v/`                                                                                                                                   |                                                                                                                                                                                                                               |\n| #bell                                        |            | `/\\a/`                                                                                                                                   |                                                                                                                                                                                                                               |\n| #backspace                                   |            | `/[\\b]/`                                                                                                                                 |                                                                                                                                                                                                                               |\n| #formfeed                                    |            | `/\\f/`                                                                                                                                   |                                                                                                                                                                                                                               |\n\n\\* Definitions `/wrapped in slashes/` are in old regex syntax (because the macro isn't simply a short way to express something you could express otherwise)\n\n```\n\"[not ['a' | 'b']]\" => /[^ab]/\n\"[#digit | [#a..f]]\" => /[0-9a-f]/\n```\n\nTrying to compile the empty string raises an error (because this is more often a mistake than not). In the rare case you need it, use `[]`.\n\nComing soon:\n\n- `#integer`, `#ip`, ..., `#a..f`\n- `numbers: #number_scientific`, `#decimal` (instead of `#real`)\n- improve readability insice brackets scope with `#dot`, `#hash`, `#tilde`...\n- `abc[ignore_case 'de' #lowercase]` (which translates to `abc[['D' | 'd'] ['E'|'e'] [[A-Z] | [a-z]]`, today you just wouldn't try)\n- `[#0..255]` (which translates to `['25' #0..5 | '2' #0..4 #d | '1' #d #d | #1..9 #d | #d]`\n- `[capture:name ...]`, `[1+:fewest ...]` (for non-greedy repeat)\n- unicode support. Full PCRE feature support (lookahead/lookback, some other stuff)\n- Option to add your macros permanently. `ke.add_macro(\"#camelcase=[1+ [#uppercase [0+ lowercase]]], path_optional)`, `[add_macro #month=['january', 'January', 'Jan', ....]]`\n  - `ke.import_macros(\"./apache_logs_macros.ke\")`, `ke.export_macros(\"./my_macros.ke\")`, and maybe arrange built-in ke macros in packages\n- `#month`, `#word`, `#year_month_day` or `#yyyy-mm-dd`\n- See TODO.txt.\n\n# Design criteria\n\n## Migration\n\nEase of migration trumps any other design consideration. Without a clear, painless migration path, there will be no adoption.\n\n- Capabilities should be exactly equivalent to those of legacy regex syntax\n- Provide a tool to translate between legacy and kleenexp syntax to aid in learning and porting existing code\n- Provide a tool to translate between short and long macro names (because typing `[#start_line [1+ #letter] #end_line]` instead of `^[a-zA-Z]+$`\n- Provide plugins for popular IDEs (vscode, IntelliJ, ...) that wrap existing find/replace functionality with kleenexp support, with good syntax highlighting and macro name autocomplete\n- Provide libraries for every common language with a function to convert kleenexp syntax to the language's legacy native syntax, and a factory that constructs compiled regex objects (since it returns a native regex engine object, no code changes will ever be required except for translating the patterns)\n- Provide a command line tool, e.g. `` $ grep \"`ke \"[1+ #d] Reasons\"`\" ``\n\n## Syntax\n\n- Should be easy to read\n- Should be easy to teach\n- Should be easy to type (e.g. \"between 3 and 5 times\" is not a very good syntax)\n- Should minimize comic book cursing like ^[^#]\\*$\n- Should make simple expressions literals (i.e. /Yo, dawg!/ matches \"Yo, dawg!\" and no other string)\n- Should only have 1-2 \"special characters\" that make an expression be more than a simple literal\n- Should not rely on characters that need to be escaped in many use cases, e.g. `\"` and `\\` in most languages' string literals, `` ` `` `$` in bash (`'` is OK because every language that allows `'` strings also allows `\"` strings. Except for SQL. Sorry, SQL.)\n- Different things should look different, beware of Lisp-like parentheses forests\n- Macros (e.g. a way to write the [IP address regex](https://regex101.com/r/oE7iZ2/1) as something like `/\\bX.X.X.X\\b where X is (?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)/`\n\n# Syntax Cheat Sheet\n\n```\nThis is a literal. Anything outside of brackets is a literal (even text in parentethes and 'quoted' text)\nBrackets may contain whitespace-separated #macros: [#macro #macro #macro]\nBrackets may contain literals: ['I am a literal' \"I am also a literal\"]\nBrackets may contain pipes to mean \"one of these\": [#letter | '_'][#digit | #letter | '_'][#digit | #letter | '_']\nIf they don't, they may begin with an operator: [0-1 #digit][not 'X'][capture #digit #digit #digit]\nThis is not a legal kleenexp: [#digit capture #digit] because the operator is not at the beginning\nThis is not a legal kleenexp: [capture #digit | #letter] because it has both an operator and a pipe\nBrackets may contain brackets: [[#letter | '_'] [1+ [#digit | #letter | '_']]]\nThis is a special macro that matches either \"c\", \"d\", \"e\", or \"f\": [#c..f]\nYou can define your own macros (note the next '#' is a litral #): ['#' [[6 #hex] | [3 #hex]] #hex=[#digit | #a..f]]\nThere is a \"comment\" operator: ['(' [3 #d] ')' [0-1 #s] [3 #d] '.' [4 #d] [comment \"ignore extensions for now\" [0-1 '#' [1-4 #d]]]]\n```\n\n# Grammar\n\nIn [parsimonious](https://github.com/erikrose/parsimonious) syntax):\n\n```\nregex           = ( outer_literal / braces )*\nbraces          = '[' whitespace? ( ops_matches / either / matches )? whitespace? ']'\nops_matches     = op ( whitespace op )* ( whitespace matches )?\nop              = token (':' token)?\neither          = matches ( whitespace? '|' whitespace? matches )+\nmatches         = match ( whitespace match )*\nmatch           = inner_literal / def / macro / braces\nmacro           = '#' ( range_macro / token )\nrange_macro     = range_endpoint '..' range_endpoint\ndef             = macro '=' braces\n\nouter_literal   = ~r'[^\\[\\]]+'\ninner_literal   = ( '\\'' until_quote '\\'' ) / ( '\"' until_doublequote '\"' )\nuntil_quote     = ~r\"[^']*\"\nuntil_doublequote = ~r'[^\"]*'\n\n# if separating between something and a brace, whitespace can be optional without introducing ambiguity\nwhitespace      = ~r'[ \\t\\r\\n]+|(?<=\\])|(?=\\[)'\n# '=' and ':' have syntactic meaning\ntoken           = ~r'[A-Za-z0-9!$%&()*+,./;<>?@\\\\^_`{}~-]+'\nrange_endpoint  = ~r'[A-Za-z0-9]'\n```\n\n# Contributing\n\nPRs welcome, if it's a major change maybe open a \"feature suggestion\" issue first suggesting the feature, get a blessing, and agree on a design.\n\nBefore making commits make sure to run these commands:\n\n```\npip install pre-commit\npre-commit install\n```\n\nThis will run autoformatting tools like `black` on all files you changed whenever you try to commit. If they make changes, you will need to `git add` the changes before you can commit.\n\nBefore every commit, make sure the tests pass:\n\n```\npytest\n```\n\n# Similar works\n\n- Regular Expressions - very popular, occasionally reads like line noise, backslash for escape\n\n  ```\n  (?:What is your (?:name|quest|favourite colour)\\?\\s?){1,3}\n  ```\n\n- kleenexp (this right here) - Terse, readable, almost never needs escaping. Python compiler, almost ready VSCode extension, online playground.\n\n  ```\n  [1-3 'What is your ' ['name' | 'quest' | 'favourite colour'] '?' [0-1 #space]]\n  ```\n\n- [Melody](https://github.com/yoav-lavi/melody) - More verbose, supports macros, backslash escapes only for quotes. Rust compiler, babel plugin. Improves with time, getting quite impressive.\n\n  ```\n  1 to 3 of match {\n    \"What is your \";\n    either {\n      \"name\";\n      \"quest\";\n      \"favorite color\";\n    }\n    \"?\";\n    0 to 1 of \" \";\n  }\n  ```\n\n- [Pomsky](https://pomsky-lang.org/) - Very similar to legacy regex syntax, supports macros and number ranges, supports unicode, _amazing_ error messages help convert legacy to new syntax, backslash escapes only for quotes. Rust compiler, as of today no built in way to use outside rust (but they seem to be planning it).\n\n  ```\n  ('What is your ' ('name'|'quest'|'favorite colour')'?' [s]){1,3}\n  ```\n\n- [Eggex](https://www.oilshell.org/release/latest/doc/eggex.html) Part of a new Unix shell's syntax. Big on composition (macros in kleenexp). Uses backslash for character classes. Production-ready within the shell, not supported elsewhere yet.\n\n  ```\n  / ('What is your ' ('name' | 'quest' | 'favorite color') '?' ' '?){1,3} /\n  ```\n\n- [Raku regexes](https://docs.raku.org/language/regexes) Similar to Eggex, part of Raku (the artist formerly known as Perl 6)\n\n- [Verbal expressions](http://verbalexpressions.github.io/) - Embedded DSL, supports 14(!) languages (to some extent? I didn't verify), but don't seem to have syntax for `(a|b)` and `(?:...){3}`\n\n  ```\n  const tester = VerEx()\n      .then('What is your ')\n      .either( // this doesn't seem to be implemented yet (?), so I'm proposing a possible syntax\n        VerEx().then('name'),\n        VerEx().then('quest'),\n        VerEx().then('favorite color'),\n      )\n      .then('?')\n      .maybe(' ')\n      .multiple(1, 3); // not sure this is the correct syntax or how to use it in more complex scenarios, hard to tell from tests and discussions in Issues\n  ```\n\n- There are many more eDSLs, but I will not list them as they are less relevant in my opinion\n\n# License\n\n(c) 2015-2022 Aur Saraf. `kleenexp` is distrubuted under the MIT license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sonoflilit/kleenexp",
    "keywords": "regular expressions regex",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kleenexp",
    "package_url": "https://pypi.org/project/kleenexp/",
    "platform": null,
    "project_url": "https://pypi.org/project/kleenexp/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SonOfLilit/kleenexp/issues",
      "Homepage": "https://github.com/sonoflilit/kleenexp"
    },
    "release_url": "https://pypi.org/project/kleenexp/0.0.7/",
    "requires_dist": [
      "parsimonious (==0.8.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Modern regex syntax with a painless upgrade path",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14660631,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff07f77c61aff202d8d873cd420f2fe016027eb22ad7514d6f435ea3902971d5",
          "md5": "88de2b4d9a1e5119c614d71d47332854",
          "sha256": "50d685625ad8467af616de57874093754c03fd7a5b86534d763eba8b08016172"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88de2b4d9a1e5119c614d71d47332854",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23188,
        "upload_time": "2021-12-11T00:29:41",
        "upload_time_iso_8601": "2021-12-11T00:29:41.143631Z",
        "url": "https://files.pythonhosted.org/packages/ff/07/f77c61aff202d8d873cd420f2fe016027eb22ad7514d6f435ea3902971d5/kleenexp-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50ada2c3de3d0797207e45e851a216894d1844341f333d7a277fd19b91de20a5",
          "md5": "8fdfed8d5cd3f5917b94f91a61a4e57c",
          "sha256": "648afab66d7a2c7d18952dbd57bfb7a5b8686cee7ccb615bf31456cc0de8fba8"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8fdfed8d5cd3f5917b94f91a61a4e57c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33579,
        "upload_time": "2021-12-11T00:29:42",
        "upload_time_iso_8601": "2021-12-11T00:29:42.694522Z",
        "url": "https://files.pythonhosted.org/packages/50/ad/a2c3de3d0797207e45e851a216894d1844341f333d7a277fd19b91de20a5/kleenexp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ccf47f39be06d5db94843fbe51529a2f548e30ffb0847a41fadc8c1aef45fef",
          "md5": "a9efbcf8afd3712282f4b17ee0c0c253",
          "sha256": "5fa864102313fd4c1e07cdf924a353e87752441a6730a83db1cd967f768f8953"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9efbcf8afd3712282f4b17ee0c0c253",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25785,
        "upload_time": "2022-03-21T03:37:38",
        "upload_time_iso_8601": "2022-03-21T03:37:38.125005Z",
        "url": "https://files.pythonhosted.org/packages/6c/cf/47f39be06d5db94843fbe51529a2f548e30ffb0847a41fadc8c1aef45fef/kleenexp-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90ddc72c81ad5046b8b888b6fc6899eb7f5d3cb07bb7580c60416c62d4da982a",
          "md5": "24dd27de1e3f5554b9265f75f8aa7424",
          "sha256": "a4993d481602caa3d9a22877f7c2e9335ff0ea61e78755ea7a6fb2b5ca1b6c97"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "24dd27de1e3f5554b9265f75f8aa7424",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37888,
        "upload_time": "2022-03-21T03:37:40",
        "upload_time_iso_8601": "2022-03-21T03:37:40.128895Z",
        "url": "https://files.pythonhosted.org/packages/90/dd/c72c81ad5046b8b888b6fc6899eb7f5d3cb07bb7580c60416c62d4da982a/kleenexp-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b993ff7d4523091f9e06f7bce90af2395c46d6e4ea6295e8ce4b0a6541bdbca",
          "md5": "cc43c70fe7a96ce9a3f11ea3b7cbdc5a",
          "sha256": "5e6c87f2edb6b7585d2b6eede122d240e5d5797764d5ad936a90f1ccc8b5a84e"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc43c70fe7a96ce9a3f11ea3b7cbdc5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25773,
        "upload_time": "2022-03-21T03:49:35",
        "upload_time_iso_8601": "2022-03-21T03:49:35.161589Z",
        "url": "https://files.pythonhosted.org/packages/0b/99/3ff7d4523091f9e06f7bce90af2395c46d6e4ea6295e8ce4b0a6541bdbca/kleenexp-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ff78d4e041f365df42829710fe777489b79e609b3d7075618052257ba0cf911",
          "md5": "cf68d3496d71f12140924f89e8164451",
          "sha256": "fd9c2eca1b50a0821854b671861697b3a07a32329c6fce0abb8bdb444a6d27fd"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cf68d3496d71f12140924f89e8164451",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37889,
        "upload_time": "2022-03-21T03:49:37",
        "upload_time_iso_8601": "2022-03-21T03:49:37.060583Z",
        "url": "https://files.pythonhosted.org/packages/6f/f7/8d4e041f365df42829710fe777489b79e609b3d7075618052257ba0cf911/kleenexp-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ffc2870336c2519ccaa494139547a98d63ab7c204d2b28413326a081e5b873",
          "md5": "472138b56221e60e2d2fa4b43c33275a",
          "sha256": "55977cdbe4c087a51fda67150942242c91eb6c74667d96114aab5096a9bc7ed2"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "472138b56221e60e2d2fa4b43c33275a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27768,
        "upload_time": "2022-08-02T12:32:22",
        "upload_time_iso_8601": "2022-08-02T12:32:22.220493Z",
        "url": "https://files.pythonhosted.org/packages/d8/ff/c2870336c2519ccaa494139547a98d63ab7c204d2b28413326a081e5b873/kleenexp-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282c7e49a212f1247cb1d65a1346ecfaf278314d3d59e9c8b5d8ac4824b91cfc",
          "md5": "03f20ee1bacfef768b87f4e61c7cde8a",
          "sha256": "72dcc6655d55938a3fd580ab3bc6c4e5d19590cab0d4cd3ce8fb66a0f046e8a7"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "03f20ee1bacfef768b87f4e61c7cde8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43404,
        "upload_time": "2022-08-02T12:32:24",
        "upload_time_iso_8601": "2022-08-02T12:32:24.532971Z",
        "url": "https://files.pythonhosted.org/packages/28/2c/7e49a212f1247cb1d65a1346ecfaf278314d3d59e9c8b5d8ac4824b91cfc/kleenexp-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fec73cb9dae4bb36fd84139995e5aaf168b99b697bd25dd259ca31b0a4d59a52",
          "md5": "92f0174d266e156cad834319d0f34ecb",
          "sha256": "9e55f6374ce1a772a3a6a44686a2688071a2432ca15ae2bf3ff97359599cbb2d"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92f0174d266e156cad834319d0f34ecb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28519,
        "upload_time": "2022-08-05T01:32:26",
        "upload_time_iso_8601": "2022-08-05T01:32:26.387702Z",
        "url": "https://files.pythonhosted.org/packages/fe/c7/3cb9dae4bb36fd84139995e5aaf168b99b697bd25dd259ca31b0a4d59a52/kleenexp-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8be61072cbfc14cb5888688031eabaf83c5b96b97592eac90d14df1bfeee4f2d",
          "md5": "e4a4ed6ec3abe81e4d82827b536dfd98",
          "sha256": "eef40094db44c77de6a5b076e4170993093d020ff5b00a67e9746a8e2611ab91"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4a4ed6ec3abe81e4d82827b536dfd98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28603,
        "upload_time": "2022-08-05T01:56:48",
        "upload_time_iso_8601": "2022-08-05T01:56:48.257105Z",
        "url": "https://files.pythonhosted.org/packages/8b/e6/1072cbfc14cb5888688031eabaf83c5b96b97592eac90d14df1bfeee4f2d/kleenexp-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b46db5514f9c432d52a515067a8dbd982a63d86cba62cc97565815b178e8f60e",
          "md5": "f45c0b1aba51045028a57c34d9287163",
          "sha256": "d5295f5f744381148fe9ca8fca16d22a2abaeb107f3ad8bc0dac08affab9663f"
        },
        "downloads": -1,
        "filename": "kleenexp-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f45c0b1aba51045028a57c34d9287163",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44808,
        "upload_time": "2022-08-05T01:56:50",
        "upload_time_iso_8601": "2022-08-05T01:56:50.244436Z",
        "url": "https://files.pythonhosted.org/packages/b4/6d/b5514f9c432d52a515067a8dbd982a63d86cba62cc97565815b178e8f60e/kleenexp-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8be61072cbfc14cb5888688031eabaf83c5b96b97592eac90d14df1bfeee4f2d",
        "md5": "e4a4ed6ec3abe81e4d82827b536dfd98",
        "sha256": "eef40094db44c77de6a5b076e4170993093d020ff5b00a67e9746a8e2611ab91"
      },
      "downloads": -1,
      "filename": "kleenexp-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4a4ed6ec3abe81e4d82827b536dfd98",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28603,
      "upload_time": "2022-08-05T01:56:48",
      "upload_time_iso_8601": "2022-08-05T01:56:48.257105Z",
      "url": "https://files.pythonhosted.org/packages/8b/e6/1072cbfc14cb5888688031eabaf83c5b96b97592eac90d14df1bfeee4f2d/kleenexp-0.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b46db5514f9c432d52a515067a8dbd982a63d86cba62cc97565815b178e8f60e",
        "md5": "f45c0b1aba51045028a57c34d9287163",
        "sha256": "d5295f5f744381148fe9ca8fca16d22a2abaeb107f3ad8bc0dac08affab9663f"
      },
      "downloads": -1,
      "filename": "kleenexp-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "f45c0b1aba51045028a57c34d9287163",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44808,
      "upload_time": "2022-08-05T01:56:50",
      "upload_time_iso_8601": "2022-08-05T01:56:50.244436Z",
      "url": "https://files.pythonhosted.org/packages/b4/6d/b5514f9c432d52a515067a8dbd982a63d86cba62cc97565815b178e8f60e/kleenexp-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}