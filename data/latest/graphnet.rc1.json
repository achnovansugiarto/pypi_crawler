{
  "info": {
    "author": "Fredrick Pwol",
    "author_email": "fredpwol@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Graphnet\n[![image](https://img.shields.io/pypi/pyversions/present.svg)](https://pypi.org/project/graphnet/)\n\nA lightweight python library for graph and networks manipulation and visualization\n\n# Installation\n```bash\npip install graphnet\n```\n\n# Usage\n```python\n>>> from graphnet import Graph\n>>> g = Graph()\n>>> g.add_node(1)\n>>> g.add_node(2)\n>>> g.add_node(3)\n>>> g.add_edge(1,2)\n>>> g.add_edge(2, 3)\n>>> g.graph_matrix\narray([[0., 1., 0.],\n       [1., 0., 1.],\n       [0., 1., 0.]])\n```\nThe node object can take any hashable object as input in this example we use integers for simplicity but you can use any object of your choice. The are two graph types supported for now, The are `vector` and `scalar` type graphs. Graph objects by default are scalar or undirected graph to change it's type assign the variable `VECTOR` to the Graph type argument like so.\n\n```python\n>>> from graphnet import VECTOR\n>>> g = Graph(type=VECTOR)\n```\n## Visualizing\nGraphnet supports graph visualization through [Matplotlib](https://matplotlib.org/) API. All the graph plot heavy-lifting is done by one method so the is no need to worry. customization can be done using the display method parameters.\n\n```python\n>>> from graphnet import VECTOR\n>>> import matplotlib.pyplot as plt\n>>> g = Graph(type=VECTOR)\n>>> g.add_node(1)\n>>> g.add_node(2)\n>>> g.add_node(3)\n>>> g.add_node(4)\n>>> g.add_edge(1,2,weight=2)\n>>> g.add_edge(2,3,weight=6)\n>>> g.add_edge(3,4,weight=0)\n>>> g.add_edge(4,1,weight=4)\n>>> g.display(weighted=True)\n>>> plt.show()\n```\n![image plot](https://raw.githubusercontent.com/Fredpwol/graphnet/master/assets/Figure_1.png)\n\nNodes and Edges can be added through iterable to reduce code lines and to load data from a huge iterable.\n\n```python\n>>> g = Graph()\n>>> g.add_nodes_from_iterable(range(5))\n>>> edge_list = [(1,2,3), (3,4), (0,1,2), (2,4), (3,2,1), (4,2,0)]\n>>> g.add_edges_from_iterable(edge_list)\n>>> g.graph_matrix\narray([[0., 2., 0., 0., 0.],\n       [2., 0., 3., 0., 0.],\n       [0., 3., 0., 1., 0.],\n       [0., 0., 1., 0., 1.],\n       [0., 0., 0., 1., 0.]])\n```\nData can also be added to the graph from dictionaries.\n\n```python\n>>> h = Graph(type=VECTOR)\n>>> m = {1:[1,2], 2:[3], 3:[4,1], 4:[2]}\n>>> h.from_dict(m)\n>>> h.graph_matrix\narray([[1., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 1.],\n       [0., 1., 0., 0.]])\n```\n\n## Using Custom Node Class\nIn some cases you might want to use a custom class as nodes in the graph to create networks. to use custom node class in the graph first we inherit from the Node class and then overwrite the `__eq__`,`__hash__`,`__repr__` methods in other for the custom class to work well with the graph. then pass the new reference attribute to the graph or you can use the old reference `value`.\n\n```python\nclass Person(Node):\n    def __init__(self, name, age, sex):\n        Node.__init__(self)\n        self.name = name\n        self.age = age\n        self.sex = sex\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __repr__(self):\n        return \"Person(name=%s, age=%s, sex=%s)\"%(self.name, self.age, self.sex)\n\ng = Graph(ref=\"name\")\n```\n\n## Algorithms\nThe algorithms module supports only two algorithms for now.\n\n+ [Dijkstra Algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)\n+ [Minimum Spanning Tree](https://en.wikipedia.org/wiki/Minimum_spanning_tree) \n```python\nfrom graphnet.algorithms import dijkstra\n\nwith Graph(type='vector') as g:\n    for i in range(6):\n        g.add_node(Node(i))\n    edges = [(0, 1, 2), (0, 2, 10), (1, 3, 10),\n                (1, 4, 8), (2, 5, 2), (3, 2, 7), (4, 5, 5)]\n    for e in edges:\n        g.add_edge(*e)\n    cost = dijkstra(g, 0, 5, path=True)\n    for i, c in enumerate(cost):\n        if i < len(cost)-1:\n            edge = g.connections[g.get_node_id(\n                cost[i])][g.get_node_id(cost[i+1])]\n        c.color = \"#82ffa3\"\n        edge.color= 'red'\n        c.radius = 0.2\n    g.display(weighted=True)\n    plt.show()\n```\n![dijkstra vis](https://raw.githubusercontent.com/Fredpwol/graphnet/master/assets/Figure_2.png)\n\n# Dependencies\n1. Numpy\n2. Matplotlib\n\n# Contributing\nAny pull requests to this projects will be reviewed and accepted as long as you follow the Contributing Guide. \n\n# License\n\nThis project is licensed under the MIT License, see the [LICENSE](https://github.com/Fredpwol/graphnet/blob/master/LICENSE) file for details.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Fredpwol/graphnet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphnet",
    "package_url": "https://pypi.org/project/graphnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/graphnet/",
    "project_urls": {
      "Homepage": "https://github.com/Fredpwol/graphnet"
    },
    "release_url": "https://pypi.org/project/graphnet/0.1.2/",
    "requires_dist": [
      "numpy",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "A python library for graph manipulation and visualization",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8230893,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21128152ddb03ad6c2609352916f03fbae8e9a29b16cf590c11880662df7264",
          "md5": "58878d17c0eae9793a34198950add3e3",
          "sha256": "db133e556ba1aa777fb60d2de937c914c310d24675b2413bafc232b6e67b6a2e"
        },
        "downloads": -1,
        "filename": "graphnet-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58878d17c0eae9793a34198950add3e3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16335,
        "upload_time": "2020-09-21T00:41:50",
        "upload_time_iso_8601": "2020-09-21T00:41:50.555123Z",
        "url": "https://files.pythonhosted.org/packages/f2/11/28152ddb03ad6c2609352916f03fbae8e9a29b16cf590c11880662df7264/graphnet-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f21128152ddb03ad6c2609352916f03fbae8e9a29b16cf590c11880662df7264",
        "md5": "58878d17c0eae9793a34198950add3e3",
        "sha256": "db133e556ba1aa777fb60d2de937c914c310d24675b2413bafc232b6e67b6a2e"
      },
      "downloads": -1,
      "filename": "graphnet-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58878d17c0eae9793a34198950add3e3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16335,
      "upload_time": "2020-09-21T00:41:50",
      "upload_time_iso_8601": "2020-09-21T00:41:50.555123Z",
      "url": "https://files.pythonhosted.org/packages/f2/11/28152ddb03ad6c2609352916f03fbae8e9a29b16cf590c11880662df7264/graphnet-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}