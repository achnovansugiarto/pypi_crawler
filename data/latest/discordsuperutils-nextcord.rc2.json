{
  "info": {
    "author": "koyashie07 and adam7100. converted by i-dan-mi-i",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "<h1 align=\"center\">discord-super-utils</h1>\r\n\r\n<p align=\"center\">\r\n  <a href=\"https://codefactor.io/repository/github/discordsuperutils/discord-super-utils/\"><img src=\"https://img.shields.io/codefactor/grade/github/discordsuperutils/discord-super-utils?style=flat-square\" /></a>\r\n  <a href=\"https://discord.gg/zhwcpTBBeC\"><img src=\"https://img.shields.io/discord/863388828734586880?logo=discord&color=blue&style=flat-square\" /></a>\r\n  <a href=\"https://pepy.tech/project/discordsuperutils\"><img src=\"https://img.shields.io/pypi/dm/discordSuperUtils?color=green&style=flat-square\" /></a>\r\n  <a href=\"https://pypi.org/project/discordSuperUtils/\"><img src=\"https://img.shields.io/pypi/v/discordSuperUtils?style=flat-square\" /></a>\r\n  <a href=\"\"><img src=\"https://img.shields.io/pypi/l/discordSuperUtils?style=flat-square\" /></a>\r\n  <a href=\"https://github.com/psf/black\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square\">\r\n    <br/>\r\n  <a href=\"https://discord-super-utils.gitbook.io/discord-super-utils/\">Documentation</a>\r\n  <a href=\"https://discordsuperutils.readthedocs.io/en/latest/\">Secondary Documentation</a>\r\n</p>\r\n\r\n<p align=\"center\">\r\n   A modern python module including many useful features that make discord bot programming extremely easy.\r\n    <br/>\r\n   <b>The documentation is not done. if you have any questions, feel free to ask them in our <a href=\"https://discord.gg/zhwcpTBBeC\">discord server.</a></b>\r\n</p>\r\n\r\nFeatures\r\n-------------\r\n\r\n\r\n- Very easy to use and user-friendly.\r\n- Object Oriented.\r\n- Modern Leveling Manager.\r\n- Modern Music/Audio playing manager. [Lavalink and FFmpeg support]\r\n- Modern Async Database Manager (SQLite, MongoDB, PostgreSQL, MySQL, MariaDB).\r\n- Modern Paginator.\r\n- Modern Reaction Manager.\r\n- Modern Economy Manager.\r\n- Modern Image Manager (PIL).\r\n- Modern Invite Tracker.\r\n- Modern Command Hinter.\r\n- Modern FiveM Server Parser.\r\n- Modern Birthday Manager.\r\n- Modern Prefix Manager.\r\n- Includes easy to use convertors.\r\n- Modern spotify client that is optimized for player fetching.\r\n- Modern Punishment Manager (Kick, Ban, Infractions, Mutes)\r\n- Modern Template Manager.\r\n- Modern CogManager that supports usage of managers in discord cogs.\r\n- Modern MessageFilter and AntiSpam.\r\n- Customizable ModMail Manager\r\n- Modern Youtube client that is optimized for player fetching.\r\n- And many more!\r\n(MORE COMING SOON!)\r\n\r\nInstallation\r\n--------------\r\n\r\nInstalling discordSuperUtils_nextcord is very easy.\r\n\r\n```sh\r\npython -m pip install discordSuperUtils_nextcord\r\n```\r\n\r\nExamples\r\n--------------\r\n\r\n### Leveling Example (With Role Manager) ###\r\n\r\n```py\r\nimport nextcord as discord\r\nfrom nextcord.ext import commands\r\n\r\nimport discordSuperUtils_nextcord as discordSuperUtils\r\n\r\nbot = commands.Bot(command_prefix=\"-\", intents=discord.Intents.all())\r\nLevelingManager = discordSuperUtils.LevelingManager(bot, award_role=True)\r\nImageManager = (\r\n    discordSuperUtils.ImageManager()\r\n)  # LevelingManager uses ImageManager to create the rank command.\r\n\r\n\r\n@bot.event\r\nasync def on_ready():\r\n    database = discordSuperUtils.DatabaseManager.connect(...)\r\n    await LevelingManager.connect_to_database(database, [\"xp\", \"roles\", \"role_list\"])\r\n\r\n    print(\"Leveling manager is ready.\", bot.user)\r\n\r\n\r\n@LevelingManager.event()\r\nasync def on_level_up(message, member_data, roles):\r\n    await message.reply(\r\n        f\"You are now level {await member_data.level()}\"\r\n        + (f\", you have received the {roles[0]}\" f\" role.\" if roles else \"\")\r\n    )\r\n\r\n\r\n@bot.command()\r\nasync def rank(ctx):\r\n    member_data = await LevelingManager.get_account(ctx.author)\r\n\r\n    if not member_data:\r\n        await ctx.send(f\"I am still creating your account! please wait a few seconds.\")\r\n        return\r\n\r\n    guild_leaderboard = await LevelingManager.get_leaderboard(ctx.guild)\r\n    member = [x for x in guild_leaderboard if x.member == ctx.author.id]\r\n\r\n    image = await ImageManager.create_leveling_profile(\r\n        ctx.author,\r\n        member_data,\r\n        discordSuperUtils.Backgrounds.GALAXY,\r\n        (127, 255, 0),\r\n        guild_leaderboard.index(member[0]) + 1 if member else -1,\r\n        outline=5,\r\n    )\r\n    await ctx.send(file=image)\r\n\r\n\r\n@bot.command()\r\nasync def set_roles(ctx, interval: int, *roles: discord.Role):\r\n    await LevelingManager.set_interval(ctx.guild, interval)\r\n    await LevelingManager.set_roles(ctx.guild, roles)\r\n\r\n    await ctx.send(\r\n        f\"Successfully set the interval to {interval} and role list to {', '.join(role.name for role in roles)}\"\r\n    )\r\n\r\n\r\n@bot.command()\r\nasync def leaderboard(ctx):\r\n    guild_leaderboard = await LevelingManager.get_leaderboard(ctx.guild)\r\n    formatted_leaderboard = [\r\n        f\"Member: {x.member}, XP: {await x.xp()}\" for x in guild_leaderboard\r\n    ]\r\n\r\n    await discordSuperUtils.PageManager(\r\n        ctx,\r\n        discordSuperUtils.generate_embeds(\r\n            formatted_leaderboard,\r\n            title=\"Leveling Leaderboard\",\r\n            fields=25,\r\n            description=f\"Leaderboard of {ctx.guild}\",\r\n        ),\r\n    ).run()\r\n\r\n\r\nbot.run(\"token\")\r\n```\r\n\r\n![Leveling Manager Example](https://media.giphy.com/media/ey1Iv2HlYYLPy0bm9p/giphy.gif)\r\n\r\n### Playing Example ### \r\n\r\n```py\r\nfrom math import floor\r\n\r\nfrom nextcord.ext import commands\r\n\r\nimport discordSuperUtils_nextcord as discordSuperUtils\r\nfrom discordSuperUtils_nextcord import MusicManager\r\nimport nextcord as discord\r\n\r\nclient_id = \"\"\r\nclient_secret = \"\"\r\n\r\nbot = commands.Bot(command_prefix=\"-\", intents=discord.Intents.all())\r\n# MusicManager = MusicManager(bot, spotify_support=False)\r\n\r\n\r\nMusicManager = MusicManager(\r\n    bot, client_id=client_id, client_secret=client_secret, spotify_support=True\r\n)\r\n\r\n\r\n# if using spotify support use this instead ^^^\r\n\r\n\r\n@MusicManager.event()\r\nasync def on_music_error(ctx, error):\r\n    raise error  # add your error handling here! Errors are listed in the documentation.\r\n\r\n\r\n@MusicManager.event()\r\nasync def on_queue_end(ctx):\r\n    print(f\"The queue has ended in {ctx}\")\r\n    # You could wait and check activity, etc...\r\n\r\n\r\n@MusicManager.event()\r\nasync def on_inactivity_disconnect(ctx):\r\n    print(f\"I have left {ctx} due to inactivity..\")\r\n\r\n\r\n@MusicManager.event()\r\nasync def on_play(ctx, player):\r\n    await ctx.send(f\"Playing {player}\")\r\n\r\n\r\n@bot.event\r\nasync def on_ready():\r\n    # database = discordSuperUtils.DatabaseManager.connect(...)\r\n    # await MusicManager.connect_to_database(database, [\"playlists\"])\r\n\r\n    print(\"Music manager is ready.\", bot.user)\r\n\r\n\r\n@bot.command()\r\nasync def leave(ctx):\r\n    if await MusicManager.leave(ctx):\r\n        await ctx.send(\"Left Voice Channel\")\r\n\r\n\r\n@bot.command()\r\nasync def np(ctx):\r\n    if player := await MusicManager.now_playing(ctx):\r\n        duration_played = await MusicManager.get_player_played_duration(ctx, player)\r\n        # You can format it, of course.\r\n\r\n        await ctx.send(\r\n            f\"Currently playing: {player}, \\n\"\r\n            f\"Duration: {duration_played}/{player.duration}\"\r\n        )\r\n\r\n\r\n@bot.command()\r\nasync def join(ctx):\r\n    if await MusicManager.join(ctx):\r\n        await ctx.send(\"Joined Voice Channel\")\r\n\r\n\r\n@bot.group(invoke_without_command=True)\r\nasync def playlists(ctx, user: discord.User):\r\n    user_playlists = await MusicManager.get_user_playlists(user)\r\n\r\n    formatted_playlists = [\r\n        f\"ID: '{user_playlist.id}'\\nTitle: '{user_playlist.playlist.title}'\\nTotal Songs: {len(user_playlist.playlist.songs)}\"\r\n        for user_playlist in user_playlists\r\n    ]\r\n\r\n    embeds = discordSuperUtils.generate_embeds(\r\n        formatted_playlists,\r\n        f\"Playlists of {user}\",\r\n        f\"Shows {user.mention}'s playlists.\",\r\n        25,\r\n        string_format=\"{}\",\r\n    )\r\n\r\n    page_manager = discordSuperUtils.PageManager(ctx, embeds, public=True)\r\n    await page_manager.run()\r\n\r\n\r\n@playlists.command()\r\nasync def add(ctx, url: str):\r\n    added_playlist = await MusicManager.add_playlist(ctx.author, url)\r\n\r\n    if not added_playlist:\r\n        await ctx.send(\"Playlist URL not found!\")\r\n        return\r\n\r\n    await ctx.send(f\"Playlist added with ID {added_playlist.id}\")\r\n\r\n\r\n@playlists.command()\r\nasync def play(ctx, playlist_id: str):\r\n    # This command is just an example, and not something you should do.\r\n    # The saved playlist system is supposed to provide fast, easy and simple playing, and the user should not look for\r\n    # the right playlist id before playing, as that defeats the whole point.\r\n    # Instead of playing using a playlist id, I recommend playing using indexes.\r\n    # Please, if you are playing using indexes, find the playlist id you need by getting all the user's playlists\r\n    # and then finding the id from there.\r\n    # Find the user's playlists using MusicManager.get_user_playlists(ctx.author, partial=True).\r\n    # Make sure partial is True to speed up the fetching progress (incase you want to access the playlist data,\r\n    # you can set it to False, of course).\r\n    # Using these playlists, find the id the user wants, and play it (or whatever else you want to do with it).\r\n    # Be creative!\r\n\r\n    user_playlist = await MusicManager.get_playlist(ctx.author, playlist_id)\r\n\r\n    if not user_playlist:\r\n        await ctx.send(\"That playlist does not exist!\")\r\n        return\r\n\r\n    if not ctx.voice_client or not ctx.voice_client.is_connected():\r\n        await MusicManager.join(ctx)\r\n\r\n    async with ctx.typing():\r\n        players = await MusicManager.create_playlist_players(\r\n            user_playlist.playlist, ctx.author\r\n        )\r\n\r\n    if players:\r\n        if await MusicManager.queue_add(\r\n            players=players, ctx=ctx\r\n        ) and not await MusicManager.play(ctx):\r\n            await ctx.send(f\"Added playlist {user_playlist.playlist.title}\")\r\n\r\n    else:\r\n        await ctx.send(\"Query not found.\")\r\n\r\n\r\n@playlists.command()\r\nasync def remove(ctx, playlist_id: str):\r\n    user_playlist = await MusicManager.get_playlist(ctx.author, playlist_id)\r\n\r\n    if not user_playlist:\r\n        await ctx.send(f\"Playlist with id {playlist_id} is not found.\")\r\n        return\r\n\r\n    await user_playlist.delete()\r\n    await ctx.send(f\"Playlist {user_playlist.playlist.title} has been deleted\")\r\n\r\n\r\n@bot.command()\r\nasync def play(ctx, *, query: str):\r\n    if not ctx.voice_client or not ctx.voice_client.is_connected():\r\n        await MusicManager.join(ctx)\r\n\r\n    async with ctx.typing():\r\n        players = await MusicManager.create_player(query, ctx.author)\r\n\r\n    if players:\r\n        if await MusicManager.queue_add(\r\n            players=players, ctx=ctx\r\n        ) and not await MusicManager.play(ctx):\r\n            await ctx.send(\"Added to queue\")\r\n\r\n    else:\r\n        await ctx.send(\"Query not found.\")\r\n\r\n\r\n@bot.command()\r\nasync def lyrics(ctx, query: str = None):\r\n    if response := await MusicManager.lyrics(ctx, query):\r\n        title, author, query_lyrics = response\r\n\r\n        splitted = query_lyrics.split(\"\\n\")\r\n        res = []\r\n        current = \"\"\r\n        for i, split in enumerate(splitted):\r\n            if len(splitted) <= i + 1 or len(current) + len(splitted[i + 1]) > 1024:\r\n                res.append(current)\r\n                current = \"\"\r\n                continue\r\n            current += split + \"\\n\"\r\n\r\n        page_manager = discordSuperUtils.PageManager(\r\n            ctx,\r\n            [\r\n                discord.Embed(\r\n                    title=f\"Lyrics for '{title}' by '{author}', (Page {i + 1}/{len(res)})\",\r\n                    description=x,\r\n                )\r\n                for i, x in enumerate(res)\r\n            ],\r\n            public=True,\r\n        )\r\n        await page_manager.run()\r\n    else:\r\n        await ctx.send(\"No lyrics found.\")\r\n\r\n\r\n@bot.command()\r\nasync def pause(ctx):\r\n    if await MusicManager.pause(ctx):\r\n        await ctx.send(\"Player paused.\")\r\n\r\n\r\n@bot.command()\r\nasync def resume(ctx):\r\n    if await MusicManager.resume(ctx):\r\n        await ctx.send(\"Player resumed.\")\r\n\r\n\r\n@bot.command()\r\nasync def volume(ctx, volume: int):\r\n    await MusicManager.volume(ctx, volume)\r\n\r\n\r\n@bot.command()\r\nasync def loop(ctx):\r\n    is_loop = await MusicManager.loop(ctx)\r\n\r\n    if is_loop is not None:\r\n        await ctx.send(f\"Looping toggled to {is_loop}\")\r\n\r\n\r\n@bot.command()\r\nasync def shuffle(ctx):\r\n    is_shuffle = await MusicManager.shuffle(ctx)\r\n\r\n    if is_shuffle is not None:\r\n        await ctx.send(f\"Shuffle toggled to {is_shuffle}\")\r\n\r\n\r\n@bot.command()\r\nasync def autoplay(ctx):\r\n    is_autoplay = await MusicManager.autoplay(ctx)\r\n\r\n    if is_autoplay is not None:\r\n        await ctx.send(f\"Autoplay toggled to {is_autoplay}\")\r\n\r\n\r\n@bot.command()\r\nasync def queueloop(ctx):\r\n    is_loop = await MusicManager.queueloop(ctx)\r\n\r\n    if is_loop is not None:\r\n        await ctx.send(f\"Queue looping toggled to {is_loop}\")\r\n\r\n\r\n@bot.command()\r\nasync def complete_queue(ctx):\r\n    if ctx_queue := await MusicManager.get_queue(ctx):\r\n        formatted_queue = [\r\n            f\"Title: '{x.title}'\\nRequester: {x.requester and x.requester.mention}\\n\"\r\n            f\"Position: {i - ctx_queue.pos}\"\r\n            for i, x in enumerate(ctx_queue.queue)\r\n        ]\r\n\r\n        num_of_fields = 25\r\n\r\n        embeds = discordSuperUtils.generate_embeds(\r\n            formatted_queue,\r\n            \"Complete Song Queue\",\r\n            \"Shows the complete song queue.\",\r\n            num_of_fields,\r\n            string_format=\"{}\",\r\n        )\r\n\r\n        page_manager = discordSuperUtils.PageManager(\r\n            ctx, embeds, public=True, index=floor(ctx_queue.pos / 25)\r\n        )\r\n        await page_manager.run()\r\n\r\n\r\n@bot.command()\r\nasync def goto(ctx, position: int):\r\n    if ctx_queue := await MusicManager.get_queue(ctx):\r\n        new_pos = ctx_queue.pos + position\r\n        if not 0 <= new_pos < len(ctx_queue.queue):\r\n            await ctx.send(\"Position is out of bounds.\")\r\n            return\r\n\r\n        await MusicManager.goto(ctx, new_pos)\r\n        await ctx.send(f\"Moved to position {position}\")\r\n\r\n\r\n@bot.command()\r\nasync def history(ctx):\r\n    if ctx_queue := await MusicManager.get_queue(ctx):\r\n        formatted_history = [\r\n            f\"Title: '{x.title}'\\nRequester: {x.requester and x.requester.mention}\"\r\n            for x in ctx_queue.history\r\n        ]\r\n\r\n        embeds = discordSuperUtils.generate_embeds(\r\n            formatted_history,\r\n            \"Song History\",\r\n            \"Shows all played songs\",\r\n            25,\r\n            string_format=\"{}\",\r\n        )\r\n\r\n        page_manager = discordSuperUtils.PageManager(ctx, embeds, public=True)\r\n        await page_manager.run()\r\n\r\n\r\n@bot.command()\r\nasync def skip(ctx, index: int = None):\r\n    await MusicManager.skip(ctx, index)\r\n\r\n\r\n@bot.command()\r\nasync def queue(ctx):\r\n    if ctx_queue := await MusicManager.get_queue(ctx):\r\n        formatted_queue = [\r\n            f\"Title: '{x.title}\\nRequester: {x.requester and x.requester.mention}\"\r\n            for x in ctx_queue.queue[ctx_queue.pos + 1 :]\r\n        ]\r\n\r\n        embeds = discordSuperUtils.generate_embeds(\r\n            formatted_queue,\r\n            \"Queue\",\r\n            f\"Now Playing: {await MusicManager.now_playing(ctx)}\",\r\n            25,\r\n            string_format=\"{}\",\r\n        )\r\n\r\n        page_manager = discordSuperUtils.PageManager(ctx, embeds, public=True)\r\n        await page_manager.run()\r\n\r\n\r\n@bot.command()\r\nasync def rewind(ctx, index: int = None):\r\n    await MusicManager.previous(ctx, index, no_autoplay=True)\r\n\r\n\r\n@bot.command()\r\nasync def ls(ctx):\r\n    if queue := await MusicManager.get_queue(ctx):\r\n        loop = queue.loop\r\n        loop_status = None\r\n\r\n        if loop == discordSuperUtils.Loops.LOOP:\r\n            loop_status = \"Looping enabled.\"\r\n\r\n        elif loop == discordSuperUtils.Loops.QUEUE_LOOP:\r\n            loop_status = \"Queue looping enabled.\"\r\n\r\n        elif loop == discordSuperUtils.Loops.NO_LOOP:\r\n            loop_status = \"No loop enabled.\"\r\n\r\n        if loop_status:\r\n            await ctx.send(loop_status)\r\n\r\n\r\n@bot.command()\r\nasync def move(ctx, player_index: int, index: int):\r\n    await MusicManager.move(ctx, player_index, index)\r\n\r\n\r\nbot.run(\"token\")\r\n```\r\n\r\n![MusicManager Example](https://media.giphy.com/media/SF6K0zIVHl6RCQ0Aqk/giphy.gif)\r\n\r\nMore examples are listed in the examples folder.\r\n\r\nKnown Issues\r\n--------------\r\n\r\n- Removing an animated emoji wont be recognized as a reaction role, as it shows up as not animated for some reason, breaking the reaction matcher. (Discord API Related)\r\n- Leveling might call the on_level_up event multiple times, resulting in duplicate messages, caused by duplicate records in the leveling table. (Fixed)\r\n\r\nSupport\r\n--------------\r\n\r\n- **[Support Server](https://discord.gg/zhwcpTBBeC)**\r\n- **[Documentation](https://discord-super-utils.gitbook.io/discord-super-utils/)**\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/I-dan-mi-I/nextcord-super-utils/releases/download/0.3.1/discordSuperUtils_nextcord-0.3.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/I-dan-mi-I/nextcord-super-utils",
    "keywords": "nextcord,easy,music,download,links,images,videos,audio,bot,paginator,economy,reaction,reaction roles,database,database manager",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "discordSuperUtils-nextcord",
    "package_url": "https://pypi.org/project/discordSuperUtils-nextcord/",
    "platform": null,
    "project_url": "https://pypi.org/project/discordSuperUtils-nextcord/",
    "project_urls": {
      "Download": "https://github.com/I-dan-mi-I/nextcord-super-utils/releases/download/0.3.1/discordSuperUtils_nextcord-0.3.1.tar.gz",
      "Homepage": "https://github.com/I-dan-mi-I/nextcord-super-utils"
    },
    "release_url": "https://pypi.org/project/discordSuperUtils-nextcord/0.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Discord Bot Development made easy!",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13223157,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "730f04218749959c429a649b3463f8f832ef424f4a54af9c08f4316b6817d0a8",
          "md5": "b2e7a9e9abe0c30d77dbf46ca9aafa5b",
          "sha256": "9f11d6b598375ef7a16806060f732d71f4cc49caacf74a3c986bf33d2cb4262a"
        },
        "downloads": -1,
        "filename": "discordSuperUtils_nextcord-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2e7a9e9abe0c30d77dbf46ca9aafa5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50168,
        "upload_time": "2022-03-19T08:36:59",
        "upload_time_iso_8601": "2022-03-19T08:36:59.070906Z",
        "url": "https://files.pythonhosted.org/packages/73/0f/04218749959c429a649b3463f8f832ef424f4a54af9c08f4316b6817d0a8/discordSuperUtils_nextcord-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4c2396b3c5c7c201bfada531a2fc013b04f3a27fe4364b6f87f708df19ca9aa",
          "md5": "4d576a4e7e91570079ac8bb0a25ebcc2",
          "sha256": "50511c3fc425ace277f86b8b251d13109f7d74d13a8b6373ad46260564078a11"
        },
        "downloads": -1,
        "filename": "discordSuperUtils_nextcord-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4d576a4e7e91570079ac8bb0a25ebcc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50207,
        "upload_time": "2022-03-19T09:25:44",
        "upload_time_iso_8601": "2022-03-19T09:25:44.527200Z",
        "url": "https://files.pythonhosted.org/packages/a4/c2/396b3c5c7c201bfada531a2fc013b04f3a27fe4364b6f87f708df19ca9aa/discordSuperUtils_nextcord-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4c2396b3c5c7c201bfada531a2fc013b04f3a27fe4364b6f87f708df19ca9aa",
        "md5": "4d576a4e7e91570079ac8bb0a25ebcc2",
        "sha256": "50511c3fc425ace277f86b8b251d13109f7d74d13a8b6373ad46260564078a11"
      },
      "downloads": -1,
      "filename": "discordSuperUtils_nextcord-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4d576a4e7e91570079ac8bb0a25ebcc2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50207,
      "upload_time": "2022-03-19T09:25:44",
      "upload_time_iso_8601": "2022-03-19T09:25:44.527200Z",
      "url": "https://files.pythonhosted.org/packages/a4/c2/396b3c5c7c201bfada531a2fc013b04f3a27fe4364b6f87f708df19ca9aa/discordSuperUtils_nextcord-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}