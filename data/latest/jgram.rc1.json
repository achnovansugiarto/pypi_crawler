{
  "info": {
    "author": "grehban",
    "author_email": "maximfeedback19@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# JGram\n\n## About the project\nJgram was created to be able to quickly and conveniently write telegram bots, placing their structure in .json files\nJgram based on [AIOgram-2.21](https://github.com/aiogram/aiogram/tree/v2.21) framework\n\nfor development info see [TODO](/TODO.md) and [CHANGES](/CHANGES.rst)\n\n## Table of contents\n- [Installation](#installation)\n    - [From sources](#from-sources)\n- [Getting started](#getting-started)\n- [Initialization](#initialization)\n    - [Registry](#registry)\n    - [Windows manager](#windows-manager)\n    - [Storage](#storage)\n    - [Loader](#loader)\n- [Windows](#windows)\n    - [Fields](#fields)\n    - [Loading windows](#loading-windows)\n- [Middlewares](#middlewares)\n- [Filters](#filters)\n    - [Aioram's filters](#aiograms-filters)\n    - [Middleware as filter](#middleware-as-filter)\n\n## installation\n\n### From sources\n\n```bash\ngit clone https://github.com/GrehBan/jgram.git\ncd jgram\npoetry install --no-dev\n```\n\n### Speedups\n```bash\npip install uvloop cchardet aiodns ujson\n```\n\n## Getting started\n\nwindows.json\n\n```json\n{\n    \"locale\": \"en\",\n    \"start\": {\n        \"text\": \"Hello unknown user\",\n        \"markup\": {\n            \"type\": \"inline\",\n            \"markup\": [\n                [\n                    {\n                        \"text\": \"Register\",\n                        \"callback_data\": \"write_name\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"write_name\": {\n        \"text\": \"Write your name please\",\n        \"markup\": {\n            \"type\": \"inline\",\n            \"markup\": [\n                [\n                    {\n                        \"text\": \"back\",\n                        \"callback_data\": \"start\"\n                    }\n                ]\n            ]\n        },\n        \"next_step\": \"write_age\"\n    },\n    \"write_age\": {\n        \"text\": \"Your name is {name}\\nwrite your age please\",\n        \"markup\": {\n            \"type\": \"inline\",\n            \"markup\": [\n                [\n                    {\n                        \"text\": \"back\",\n                        \"callback_data\": \"write_name\"\n                    }\n                ]\n            ]\n        },\n        \"allowed_updates\": [\"text\"],\n        \"next_step\": \"save_data\"\n\n    },\n    \"save_data\": {\n        \"text\": \"Your name is {name}\\nYou {age} years old\\nThank you!\",\n        \"allowed_updates\": [\"text\"]\n    }\n}\n\n```\n\n[simple.py](/examples/simple.py)\n\n```python\nimport asyncio\nimport os\n\nfrom jgram import Registry\nfrom jgram.context import Context\nfrom jgram.manager import WindowsManager\n\n\nasync def name_formatter(update, manager: WindowsManager, context: Context):\n    context.data['name'] = update.text\n\n\nasync def age_formatter(update, manager: WindowsManager, context: Context):\n    context.data['age'] = update.text\n\n\nasync def main():\n    registry = Registry(token=os.getenv('BOT_TOKEN'))\n    registry.manager.load_windows('windows.json')\n    registry.register_middleware(name_formatter, name='write_age')\n    registry.register_middleware(age_formatter, name='save_data')\n\n    try:\n        await registry.start()\n    finally:\n        await registry.close()\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n## Initialization\n \n ### Registry\n ```python\n from jgram import Registry\n\n registry = Registry()\n\n # initialization arguments\n\n    # registry initialize bot and dispatcher from one of this arguments, and must have one of it\n\n    bot -> typing.Optional[aiogram.Bot] # current aiogram's bot\n\n    dispatcher -> typing.Optional[aiogram.Dispatcher] # current aiogram's dispatcher\n\n    token -> typing.Optional[str] # bot's token\n\n\n    # registry initialize new jgram.WindowsManager instance, if manager argument is not provided\n    manager -> typing.Optional[jgram.WindowsManager] # current manager for manage windows\n ```\n\n### Windows manager\n```python\nfrom jgram import WindowsManager\n\nmanager = WindowsManager()\n\n# initialization arguments\n\n    # manager initialize new jgram.loader.JsonLoader instance, if loader arguemnt is not provided\n    loader -> typing.Optional[jgram.loader.protocols.LoaderProto] # current loader for load raw json\n\n    # manager initialize new jgram.storage.memory.MemoryStorage, if storage argument is not provided\n    storage -> typing.Optional[jgram.storage.protocols.BaseStorage] # current users data storage\n\n    start_window -> str # name of window than be rendered when /start command is handled\n        default = \"start\"\n```\n\n## Storage\n```python\nfrom jgram.storage.memory import MemoryStorage # memory storage for example\n\nstorage = MemoryStorage()\n```\n\n## Loader\n```python\nfrom jgram.loader import JsonLoader\n\nloader = JsonLoader()\n\n# initialization arguments\n\n    default_locale -> typing.Optional[str] # locale which will be used if \"locale\" field in window is not provided, if set to None, all of windows must have \"locale\" field\n        default = 'en'\n    json_loads -> typing.Callable[..., Any] # function to loads json from string\n        default = json.loads # python's built-in json's module func\n```\n\n## Windows\n\n### Structure\n\n```json\n{\n  \"lang\": \"{lang}\",\n  \"{text_name}\": {\n    \"text\": \"{text}\",\n    \"media\": {\n        \"type\": \"{media_type}\",\n        \"url\": \"{media_url}\",\n        \"path\": \"{media_path}\",\n        \"file_id\": \"{media_file_id}\"\n    }\n    \"markup\": {\n        \"type\": \"{type}\",\n        \"markup\":\n        [\n            [{\"text\": \"Button text\", \"callback_data\": \"{next_step callback data}\"}],\n            [{\"text\": \"Url button\", \"url\": \"{url}\"}],\n            [{\"text\": \"Reply button\"}]\n        ],\n    \"parse_mode\": null,\n    \"web_preview\": false,\n    \"allowed_updates\": [\"{update_type}\"],\n    \"filters\": [\n        {\n            \"{filter_name}\": \"{value}\",\n            \"next_step\": \"{value}\"\n        }\n    ],\n    \"next_step\": \"{value}\",\n    \"reset_context\": false\n  }\n}\n}\n```\n\n### Fields\n\n```python \n\"lang\" -> typing.Optional[str] # Locale of windows\n```\n\n```python\n\"text\" -> typing.Optional[str] # bot message text, uses as a caption to media, if it set\n```\n\n```python\n\"media\" -> typing.Optional[typing.Dict] # bot message media\n    \"type\" -> str # media type\n        values = [\"photo\", \"video\", \"animation\", \"audio\", \"document\"]\n    \n    # media must have one of this fields\n\n    \"url\" -> typing.Optional[str] # media url\n    \n    \"path\" -> typing.Optional[str] # path to media file\n\n    \"file_id\" -> typing.Optional[str] # media file id\n```\n\n```python\n\"markup\" -> typing.Optional[typing.Dict] # bot message reply markup\n    \"type\" -> str # markup type\n        values = [\"inline\", \"reply\"]\n    \n    \"markup\" typing.List[typing.List[typing.Dict[str, str]]] # list of lists of markup buttons\n```\n\n```python\n\"parse_mode\" -> typing.Optional[str] # bot message parse mode\n    values = [\"HTML\", \"MARKDOWN\", \"MARKDOWN_V2\"]\n```\n\n```python\n\"web_preview\" -> bool # bot message disable or enable web preview\n    default = False\n```\n\n```python\n\"allowed_updates\" -> typing.List[str] # list of content types allowed for processing\n    default = []\n    values = [\"text\", \"photo\", \"video\", \"animation\", \"audio\", \"document\"]\n```\n\n```python\n\"filters\" -> typing.List[typing.Dict] # list of dicts than represents aiogram's filters\n    default = []\n\n    \"{filter_name}\" -> str # Aiogram's filter value\n    ...\n    \"next_step\" -> str # name of window than be rendered when filters passed\n```\n\n```python\n\"next_step\" -> typing.Optional[str] # name of window than be rendered if any filter not passed or filters not found\n```\n\n```python\n\"reset_context\" -> bool # reset current user context\n    default = False\n```\n\n### Loading windows\n```python\nfrom jgram import WindowsManager\n\nmanager = WindowsManager()\nmanager.load_windows(\"path/to/file/windows.json\")\n```\n\n## Middlewares\nmiddlewares call before window rendered, and in middleware you can change user context data or manipulate window processing\n\nmiddlewares can return a True or False, if returns True, update handler will continue render window, but if returns False, window will not be rendered\n\nfor example\n\n```python\nfrom aiogram.types import Message, CallbackQuery\n\nfrom jgram import Registry\nfrom jgram.context import Context\nfrom jgram.manager import WindowsManager\n\n\nasync def middleware(\n    update: typing.Union[Message, CallbackQuery],\n    manager: WindowsManager, \n    context: Context\n    ):\n    if isinstance(update, CallbackQuery):\n        return True # skip middleware processing, and render window\n    context.data['name'] = update.text # save current message text to \"name\" field\n\n\nregistry = Registry()\nregistry.register_middleware(middleware) # middleware will be processed for all windows\n\n# if you can process middleware only for one window\nregistry.register_middleware(middleware, name=\"window_name\")\n```\n\n## Filters\n\nyou have two ways to filter update\n\n### Aiogram's filters\n\nyou can use aiogram's filters, to filter update, but only if filter have key field\n\nfor example\n\n```json\n    {\n      \"filtered\": {\n        \"text\": \"Hello\",\n        \"filters\": [\n          {\n          \"chat_id\": 123,\n          \"next_step\": \"chat_123\"\n          }\n        ],\n        \"next_step\": \"any_another_chat\"\n      }\n    }\n```\n\nif current update chat id is 123 renders \"chat_123\" window, in another situations renders \"any_another_chat\" window\n\n## Middleware as filter\n\nyou can use jgram's middleware as filter\n\nfor example\n\n```python\nfrom aiogram.types import Message, CallbackQuery\n\nfrom jgram.context import Context\nfrom jgram.manager import WindowsManager\n\n\nasync def middleware(\n    update: typing.Union[Message, CallbackQuery],\n    manager: WindowsManager, \n    context: Context\n    ):\n    if isinstance(update, CallbackQuery):\n        return True # skip middleware processing, and render window\n    try:\n        age = int(update.text) # try to convert text to age int\n    except ValueError:\n        return False # skip window rendering\n        # context.window_name = \"error_window\" # or switch window\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grehban/jgram",
    "keywords": "telegram,bot,aiogram,api,wrapper,json,asyncio",
    "license": "MIT",
    "maintainer": "grehban",
    "maintainer_email": "maximfeedback19@gmail.com",
    "name": "jgram",
    "package_url": "https://pypi.org/project/jgram/",
    "platform": null,
    "project_url": "https://pypi.org/project/jgram/",
    "project_urls": {
      "Homepage": "https://github.com/grehban/jgram",
      "Repository": "https://github.com/grehban/jgram"
    },
    "release_url": "https://pypi.org/project/jgram/1.0.4b0/",
    "requires_dist": [
      "aiogram (>=2.21,<3.0)",
      "uvloop (>=0.16.0,<0.17.0); (sys_platform == \"darwin\" or sys_platform == \"linux\") and (extra == \"fast\")",
      "cchardet (>=2.1.7,<3.0.0); extra == \"fast\"",
      "aiodns (>=3.0.0,<4.0.0); extra == \"fast\"",
      "ujson (>=5.4.0,<6.0.0); extra == \"fast\"",
      "aiohttp-socks (>=0.7.1,<0.8.0); extra == \"proxy\""
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Simple wrapper over aiogram for create bots structure in json files",
    "version": "1.0.4b0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14440809,
  "releases": {
    "1.0.4b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16c9efab1c7d51de83f1838a4c8ecabe8b78883c1db033359dc753a5ba7f9b71",
          "md5": "e3e3ecf33d9b9a0df8467ce39d2e2b99",
          "sha256": "8acc1060e251c8770424ffb78fd2fd7b5628c28dd253f65f6c666f0b67d2d9f7"
        },
        "downloads": -1,
        "filename": "jgram-1.0.4b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3e3ecf33d9b9a0df8467ce39d2e2b99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 21571,
        "upload_time": "2022-07-14T23:34:00",
        "upload_time_iso_8601": "2022-07-14T23:34:00.963146Z",
        "url": "https://files.pythonhosted.org/packages/16/c9/efab1c7d51de83f1838a4c8ecabe8b78883c1db033359dc753a5ba7f9b71/jgram-1.0.4b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52c9b7fd1c71402ff0c74fc8441697ca82711408003a55bb138c7bb439abc925",
          "md5": "81a32b3739e084f699e9e10e06b58781",
          "sha256": "22255780c46cfad121f53a46de55f45f89ac426a9411f99fd7d24afe21dce0df"
        },
        "downloads": -1,
        "filename": "jgram-1.0.4b0.tar.gz",
        "has_sig": false,
        "md5_digest": "81a32b3739e084f699e9e10e06b58781",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16644,
        "upload_time": "2022-07-14T23:34:05",
        "upload_time_iso_8601": "2022-07-14T23:34:05.697561Z",
        "url": "https://files.pythonhosted.org/packages/52/c9/b7fd1c71402ff0c74fc8441697ca82711408003a55bb138c7bb439abc925/jgram-1.0.4b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16c9efab1c7d51de83f1838a4c8ecabe8b78883c1db033359dc753a5ba7f9b71",
        "md5": "e3e3ecf33d9b9a0df8467ce39d2e2b99",
        "sha256": "8acc1060e251c8770424ffb78fd2fd7b5628c28dd253f65f6c666f0b67d2d9f7"
      },
      "downloads": -1,
      "filename": "jgram-1.0.4b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e3e3ecf33d9b9a0df8467ce39d2e2b99",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 21571,
      "upload_time": "2022-07-14T23:34:00",
      "upload_time_iso_8601": "2022-07-14T23:34:00.963146Z",
      "url": "https://files.pythonhosted.org/packages/16/c9/efab1c7d51de83f1838a4c8ecabe8b78883c1db033359dc753a5ba7f9b71/jgram-1.0.4b0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52c9b7fd1c71402ff0c74fc8441697ca82711408003a55bb138c7bb439abc925",
        "md5": "81a32b3739e084f699e9e10e06b58781",
        "sha256": "22255780c46cfad121f53a46de55f45f89ac426a9411f99fd7d24afe21dce0df"
      },
      "downloads": -1,
      "filename": "jgram-1.0.4b0.tar.gz",
      "has_sig": false,
      "md5_digest": "81a32b3739e084f699e9e10e06b58781",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 16644,
      "upload_time": "2022-07-14T23:34:05",
      "upload_time_iso_8601": "2022-07-14T23:34:05.697561Z",
      "url": "https://files.pythonhosted.org/packages/52/c9/b7fd1c71402ff0c74fc8441697ca82711408003a55bb138c7bb439abc925/jgram-1.0.4b0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}