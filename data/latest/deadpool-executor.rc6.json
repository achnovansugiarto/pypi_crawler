{
  "info": {
    "author": null,
    "author_email": "Caleb Hattingh <caleb.hattingh@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": ".. image:: https://github.com/cjrh/deadpool/workflows/Python%20application/badge.svg\n    :target: https://github.com/cjrh/deadpool/actions\n\n.. image:: https://coveralls.io/repos/github/cjrh/deadpool/badge.svg?branch=main\n    :target: https://coveralls.io/github/cjrh/deadpool?branch=main\n\n.. image:: https://img.shields.io/pypi/pyversions/deadpool-executor.svg\n    :target: https://pypi.python.org/pypi/deadpool-executor\n\n.. image:: https://img.shields.io/github/tag/cjrh/deadpool.svg\n    :target: https://img.shields.io/github/tag/cjrh/deadpool.svg\n\n.. image:: https://img.shields.io/badge/install-pip%20install%20deadpool--executor-ff69b4.svg\n    :target: https://img.shields.io/badge/install-pip%20install%20deadpool--executor-ff69b4.svg\n\n.. image:: https://img.shields.io/pypi/v/deadpool-executor.svg\n    :target: https://pypi.org/project/deadpool-executor/\n\n.. image:: https://img.shields.io/badge/calver-YYYY.MM.MINOR-22bfda.svg\n    :alt: This project uses calendar-based versioning scheme\n    :target: http://calver.org/\n\n.. image:: https://pepy.tech/badge/deadpool-executor\n    :alt: Downloads\n    :target: https://pepy.tech/project/deadpool-executor\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :alt: This project uses the \"black\" style formatter for Python code\n    :target: https://github.com/python/black\n\n.. image:: https://api.securityscorecards.dev/projects/github.com/cjrh/deadpool/badge\n    :alt: OpenSSF Scorecard\n    :target: https://api.securityscorecards.dev/projects/github.com/cjrh/deadpool\n\ndeadpool\n========\n\n``Deadpool`` is a process pool that is really hard to kill.\n\n``Deadpool`` is an implementation of the ``Executor`` interface\nin the ``concurrent.futures`` standard library. ``Deadpool`` is\na process pool executor, quite similar to the stdlib's\n`ProcessPoolExecutor`_.\n\nThis document assumes that you are familiar with the stdlib\n`ProcessPoolExecutor`_. If you are not, it is important\nto understand that ``Deadpool`` makes very specific tradeoffs that\ncan result in quite different behaviour to the stdlib\nimplementation.\n\n.. contents::\n   :local:\n   :backlinks: entry\n\nInstallation\n------------\n\nThe python package name is *deadpool-executor*, so to install\nyou must type ``$ pip install deadpool-executor``. The import\nname is *deadpool*, so in your Python code you must type\n``import deadpool`` to use it.\n\nWhy would I want to use this?\n-----------------------------\n\nI created ``Deadpool`` because I became frustrated with the\nstdlib `ProcessPoolExecutor`_, and various other community\nimplementations of process pools. In particular, I had a use-case\nthat required a high server uptime, but also had variable and\nunpredictable memory requirements such that certain tasks could\ntrigger the `OOM killer`_, often resulting in a \"broken\" process\npool. I also needed task-specific timeouts that could kill a \"hung\"\ntask, which the stdlib executor doesn't provide.\n\nYou might wonder, isn't it bad to just kill a task like that?\nIn my use-case, we had extensive logging and monitoring to alert\nus if any tasks failed; but it was paramount that our services\ncontinue to operate even when tasks got killed in OOM scenarios,\nor specific tasks took too long. This is the primary trade-off\nthat ``Deadpool`` offers.\n\nI also tried using the `Pebble <https://github.com/noxdafox/pebble>`_\ncommunity process pool. This is a cool project, featuring several\nof the properties I've been looking for such as timeouts, and\nmore resilient operation. However, during testing I found several\noccurrences of a mysterious `RuntimeError`_ that caused the Pebble\npool to become broken and no longer accept new tasks.\n\nMy goal with ``Deadpool`` is to make a process pool executor that\nis impossible to break. The tradeoffs are that I care less about:\n\n- being cross-platform\n- optimizing per-task latency\n\nWhat differs from `ProcessPoolExecutor`_?\n-----------------------------------------\n\n``Deadpool`` is generally similar to `ProcessPoolExecutor`_ since it executes\ntasks in subprocesses, and implements the standard ``Executor`` abstract\ninterface. However, it differs in the following ways:\n\n- ``Deadpool`` makes a new subprocess for every task submitted to\n  the pool (up to the ``max_workers`` limit). It is like having\n  ``max_tasks_per_child == 1`` (a new feature in\n  Python 3.11, although it was available in `multiprocessing.Pool`_\n  since Python 3.2). I have ideas about making this configurable, but\n  for now this is a much less important than overall resilience of\n  the pool. This also means that ``Deadpool`` doesn't suffer from\n  long-lived subprocesses being affected by memory leaks, usually\n  created by native extensions.\n- ``Deadpool`` defaults to the `forkserver <https://docs.python.org/3.11/library/multiprocessing.html#contexts-and-start-methods>`_ multiprocessing\n  context, unlike the stdlib pool which defaults to ``fork`` on\n  Linux. It's just a setting though, you can change it in the same way as\n  with the stdlib pool.\n- ``Deadpool`` does not keep a pool of processes around indefinitely.\n  There will only be as many concurrent processes running as there\n  is work to be done, up to the limit set by the ``max_workers``\n  parameter; but if there are fewer tasks to be executed, there will\n  be fewer active subprocesses. When there are no pending or active\n  tasks, there will be *no subprocesses present*. They are created\n  on demand as necessary and disappear when not required.\n- ``Deadpool`` tasks can have timeouts. When a task hits the timeout,\n  the underlying subprocess in the pool is killed with ``SIGKILL``.\n  The entire process tree of that subprocess is killed.\n- ``Deadpool`` tasks can have priorities. The priority is set in the\n  ``submit()`` call. See the examples later in this document for further\n  discussion on priorities.\n- The shutdown parameters ``wait`` and ``cancel_futures`` can behave\n  differently to how they work in the _ProcessPoolExecutor. This is\n  discussed in more detail later in this document.\n- If a ``Deadpool`` subprocess in the pool is killed by some\n  external actor, for example, the OS runs out of memory and the\n  `OOM killer`_ kills a pool subprocess that is using too much memory,\n  ``Deadpool`` does not care and further operation is unaffected.\n  ``Deadpool`` will not, and indeed cannot raise\n  `BrokenProcessPool <https://docs.python.org/3/library/concurrent.futures.html?highlight=broken%20process%20pool#concurrent.futures.process.BrokenProcessPool>`_ or\n  `BrokenExecutor <https://docs.python.org/3/library/concurrent.futures.html?highlight=broken%20process%20pool#concurrent.futures.BrokenExecutor>`_.\n- ``Deadpool`` also allows a ``finalizer``, with corresponding\n  ``finalargs``, that will be called after a task is executed on\n  a subprocess, but before the subprocess terminates. It is\n  analogous to the ``initializer`` and ``initargs`` parameters.\n  Just like the ``initializer`` callable, the ``finalizer``\n  callable is executed inside the subprocess. It is not guaranteed that\n  the finalizer will always run. If a process is killed, e.g. due to a\n  timeout or any other reason, the finalizer will not run. The finalizer\n  could be used for things like flushing pending monitoring messages,\n  such as traces and so on.\n- ``Deadpool`` currently only works on Linux. There isn't any specific\n  reason it can't work on other platforms.\n\nShow me some code\n-----------------\n\nSimple case\n^^^^^^^^^^^\n\nThe simple case works exactly the same as with `ProcessPoolExecutor`_:\n\n.. code-block:: python\n\n    from deadpool import Deadpool\n\n    def f():\n        return 123\n\n    with deadpool.Deadpool() as exe:\n        fut = exe.submit(f)\n        result = fut.result()\n\n    assert result == 123\n\nIt is intended that all the basic behaviour should \"just work\" in the\nsame way, and ``Deadpool`` should be a drop-in replacement for\n`ProcessPoolExecutor`_; but there are some subtle differences so you\nshould read all of this document to see if any of those will affect you.\n\nTimeouts\n^^^^^^^^\n\nIf a timeout is reached on a task, the subprocess running that task will be\nkilled, as in ``SIGKILL``. ``Deadpool`` doesn't mind, but your own\napplication should: if you use timeouts it is likely important that your tasks\nbe `idempotent <https://en.wikipedia.org/wiki/Idempotence>`_, especially if\nyour application will restart tasks, or restart them after application deployment,\nand other similar scenarios.\n\n.. code-block:: python\n\n    import time\n    import deadpool\n\n    def f():\n        time.sleep(10.0)\n\n    with deadpool.Deadpool() as exe:\n        fut = exe.submit(f, deadpool_timeout=1.0)\n\n        with pytest.raises(deadpool.TimeoutError)\n            fut.result()\n\nHandling OOM killed situations\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    import time\n    import deadpool\n\n    def f():\n        x = list(range(10**100))\n\n    with deadpool.Deadpool() as exe:\n        fut = exe.submit(f, timeout=1.0)\n\n        try:\n            result = fut.result()\n        except deadpool.ProcessError:\n            print(\"Oh no someone killed my task!\")\n\n\nAs long as the OOM killer terminates the subprocess (and not the main process),\nwhich is likely because it'll be your subprocess that is using too much\nmemory, this will not hurt the pool, and it will be able to receive and\nprocess more tasks.\n\nDesign Details\n--------------\n\nTypical Example - with timeouts\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHere's a typical example of how code using Deadpool might look. The\noutput of this code should be similar to the following:\n\n.. code-block:: bash\n\n    $ python examples/entrypoint.py\n    ...................xxxxxxxxxxx.xxxxxxx.x.xxxxxxx.x\n    $\n\nEach ``.`` is a successfully completed task, and each ``x`` is a task\nthat timed out. Below is the code for this example.\n\n.. code-block:: python\n\n    import random, time\n    import deadpool\n\n\n    def work():\n        time.sleep(random.random() * 4.0)\n        print(\".\", end=\"\", flush=True)\n        return 1\n\n\n    def main():\n        with deadpool.Deadpool() as exe:\n            futs = (exe.submit(work, timeout=2.0) for _ in range(50))\n            for fut in deadpool.as_completed(futs):\n                try:\n                    assert fut.result() == 1\n                except deadpool.TimeoutError:\n                    print(\"x\", end=\"\", flush=True)\n\n\n    if __name__ == \"__main__\":\n        main()\n        print()\n\n- The work function will be busy for a random time period between 0 and\n  4 seconds.\n- There is a ``deadpool_timeout`` kwarg given to the ``submit`` method.\n  This kwarg is special and will be consumed by Deadpool. You cannot\n  use this kwarg name for your own task functions.\n- When a task completes, it prints out ``.`` internally. But when a task\n  raises a ``deadpool.TimeoutError``, a ``x`` will be printed out instead.\n- When a task times out, keep in mind that the underlying process that\n  is executing that task is killed, literally with the ``SIGKILL`` signal.\n\nDeadpool tasks have priority\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe example below is similar to the previous one for timeouts. In fact\nthis example retains the timeouts to show how the different features\ncompose together. In this example we create tasks with different\npriorities, and we change the printed character of each task to show\nthat higher priority items are executed first.\n\nThe code example will print something similar to the following:\n\n.. code-block:: bash\n\n    $ python examples/priorities.py\n    !!!!!xxxxxxxxxxx!x..!...x.xxxxxxxx.xxxx.x...xxxxxx\n\nYou can see how the ``!`` characters, used for indicating higher priority\ntasks, appear towards the front indicating that they were executed sooner.\nBelow is the code.\n\n.. code-block:: python\n\n    import random, time\n    import deadpool\n\n\n    def work(symbol):\n        time.sleep(random.random() * 4.0)\n        print(symbol, end=\"\", flush=True)\n        return 1\n\n\n    def main():\n        with deadpool.Deadpool(max_backlog=100) as exe:\n            futs = []\n            for _ in range(25):\n                fut = exe.submit(work, \".\",deadpool_timeout=2.0, deadpool_priority=10)\n                futs.append(fut)\n                fut = exe.submit(work, \"!\",deadpool_timeout=2.0, deadpool_priority=0)\n                futs.append(fut)\n\n            for fut in deadpool.as_completed(futs):\n                try:\n                    assert fut.result() == 1\n                except deadpool.TimeoutError:\n                    print(\"x\", end=\"\", flush=True)\n\n\n    if __name__ == \"__main__\":\n        main()\n        print()\n\n- When the tasks are submitted, they are given a priority. The default\n  value for the ``deadpool_priority`` parameter is 0, but here we'll\n  write them out explicity.  Half of the tasks will have priority 10 and\n  half will have priority 0.\n- A lower value for the ``deadpool_priority`` parameters means a **higher**\n  priority. The highest priority allowed is indicated by 0. Negative\n  priority values are not allowed.\n- I also specified the ``max_backlog`` parameter when creating the\n  Deadpool instance. This is discussed in more detail next, but quickly:\n  task priority can only be enforced on what is in the submitted backlog\n  of tasks, and the ``max_backlog`` parameter controls the depth of that\n  queue. If ``max_backlog`` is too low, then the window of prioritization\n  will not include tasks submitted later which might have higher priorities\n  than earlier-submitted tasks. The ``submit`` call will in fact block\n  if the ``max_backlog`` depth has been reached.\n\nControlling the backlog of submitted tasks\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default, the ``max_backlog`` parameter is set to 5. This parameter is\nused to create the \"submit queue\" size. The submit queue is the place\nwhere submitted tasks are held before they are executed in background\nprocesses.\n\nIf the submit queue is large (``max_backlog``), it will mean\nthat a large number of tasks can be added to the system with the\n``submit`` method, even before any tasks have finished exiting. Conversely,\na low ``max_backlog`` parameter means that the submit queue will fill up\nfaster. If the submit queue is full, it means that the next call to\n``submit`` will block.\n\nThis kind of blocking is fine, and typically desired. It means that\nbackpressure from blocking is controlling the amount of work in flight.\nBy using a smaller ``max_backlog``, it means that you'll also be\nlimiting the amount of memory in use during the execution of all the tasks.\n\nHowever, if you nevertheless still accumulate received futures as my\nexample code above is doing, that accumulation, i.e., the list of futures,\nwill contribute to memory growth. If you have a large amount of work, it\nwill be better to set a *callback* function on each of the futures rather\nthan processing them by iterating over ``as_completed``.\n\nThe example below illustrates this technique for keeping memory\nconsumption down:\n\n.. code-block:: python\n\n    import random, time\n    import deadpool\n\n\n    def work():\n        time.sleep(random.random() * 4.0)\n        print(\".\", end=\"\", flush=True)\n        return 1\n\n\n    def cb(fut):\n        try:\n            assert fut.result() == 1\n        except deadpool.TimeoutError:\n            print(\"x\", end=\"\", flush=True)\n\n\n    def main():\n        with deadpool.Deadpool() as exe:\n            for _ in range(50):\n                exe.submit(work, deadpool_timeout=2.0).add_done_callback(cb)\n\n\n    if __name__ == \"__main__\":\n        main()\n        print()\n\n\nWith this callback-based design, we no longer have an accumulation of futures\nin a list. We get the same kind of output as in the \"typical example\" from\nearlier:\n\n.. code-block:: bash\n\n    $ python examples/callbacks.py\n    .....xxx.xxxxxxxxx.........x..xxxxx.x....x.xxxxxxx\n\n\nSpeaking of callbacks, the customized ``Future`` class used by Deadpool\nlets you set a callback for when the task begins executing on a real\nsystem process. That can be configured like so:\n\n.. code-block:: python\n\n    with deadpool.Deadpool() as exe:\n        f = exe.submit(work)\n\n        def cb(fut: deadpool.Future):\n            print(f\"My task is running on process {fut.pid}\")\n\n        f.add_pid_callback(cb)\n\nMore about shutdown\n^^^^^^^^^^^^^^^^^^^\n\nIn the documentation for ProcessPoolExecutor_, the following function\nsignature is given for the shutdown_ method of the executor interface:\n\n.. code-block:: python\n\n    shutdown(wait=True, *, cancel_futures=False)\n\nI want to honor this, but it presents some difficulties because the\nsemantics of the ``wait`` and ``cancel_futures`` parameters need to be\nsomewhat different for Deadpool.\n\nIn Deadpool, this is what the combinations of those flags mean:\n\n.. csv-table:: Shutdown flags\n   :header: ``wait``, ``cancel_futures``, ``effect``\n   :widths: 10, 10, 80\n   :align: left\n\n   ``True``, ``True``, \"Wait for already-running tasks to complete; the\n   ``shutdown()`` call will unblock (return) when they're done. Cancel\n   all pending tasks that are in the submit queue, but have not yet started\n   running. The ``fut.cancelled()`` method will return ``True`` for such\n   cancelled tasks.\"\n   ``True``, ``False``, \"Wait for already-running tasks to complete.\n   Pending tasks in the\n   submit queue that have not yet started running will *not* be cancelled, and\n   will all continue to execute. The ``shutdown()`` call will return only\n   after all submitted tasks have completed. \"\n   ``False``, ``True``, \"Already-running tasks **will be cancelled** and this\n   means the underlying subprocesses executing these tasks will receive\n   SIGKILL. Pending tasks on the submit queue that have not yet started\n   running will also be cancelled.\"\n   ``False``, ``False``, \"This is a strange one. What to do if the caller\n   doesn't want to wait, but also doesn't want to cancel things? In this\n   case, already-running tasks will be allowed to complete, but pending\n   tasks on the submit queue will be cancelled. This is the same outcome as\n   as ``wait==True`` and ``cancel_futures==True``. An alternative design\n   might have been to allow all tasks, both running and pending, to just\n   keep going in the background even after the ``shutdown()`` call\n   returns. Does anyone have a use-case for this?\"\n\nIf you're using ``Deadpool`` as a context manager, you might be wondering\nhow exactly to set these parameters in the ``shutdown`` call, since that\ncall is made for you automatically when the context manager exits.\n\nFor this, Deadpool provides additional parameters that can be provided\nwhen creating the instance:\n\n.. code-block:: python\n\n   # This is pseudocode\n   import deadpool\n\n   with deadpool.DeadPool(\n           shutdown_wait=True,\n           shutdown_cancel_futures=True\n   ):\n       fut = exe.submit(...)\n\n\n.. _shutdown: https://docs.python.org/3/library/concurrent.futures.html?highlight=brokenprocesspool#concurrent.futures.Executor.shutdown\n.. _ProcessPoolExecutor: https://docs.python.org/3/library/concurrent.futures.html?highlight=broken%20process%20pool#processpoolexecutor\n.. _RuntimeError: https://github.com/noxdafox/pebble/issues/42#issuecomment-551245730\n.. _OOM killer: https://en.wikipedia.org/wiki/Out_of_memory#Out_of_memory_management\n.. _multiprocessing.Pool: https://docs.python.org/3.11/library/multiprocessing.html#multiprocessing.pool.Pool\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "deadpool-executor",
    "package_url": "https://pypi.org/project/deadpool-executor/",
    "platform": null,
    "project_url": "https://pypi.org/project/deadpool-executor/",
    "project_urls": {
      "Documentation": "https://github.com/cjrh/deadpool",
      "Home": "https://github.com/cjrh/deadpool",
      "Source": "https://github.com/cjrh/deadpool"
    },
    "release_url": "https://pypi.org/project/deadpool-executor/2022.9.6/",
    "requires_dist": [
      "psutil",
      "pytest >= 7 ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "flake8 ; extra == \"test\"",
      "coverage[toml] ; extra == \"test\""
    ],
    "requires_python": null,
    "summary": "Deadpool",
    "version": "2022.9.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15189120,
  "releases": {
    "2022.9.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e0f6c68cc7416bd644cf604e616be56c8cb3c00b0d4eeae6ce3e5896bf1f838e",
          "md5": "aed19c8f4ad05c244e6d509bdbfc0141",
          "sha256": "c7ffdf636c85764a401c5d04b1987dacf815990afb6c10e1e5c2b22636063380"
        },
        "downloads": -1,
        "filename": "deadpool_executor-2022.9.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aed19c8f4ad05c244e6d509bdbfc0141",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18326,
        "upload_time": "2022-09-17T13:42:50",
        "upload_time_iso_8601": "2022-09-17T13:42:50.365148Z",
        "url": "https://files.pythonhosted.org/packages/e0/f6/c68cc7416bd644cf604e616be56c8cb3c00b0d4eeae6ce3e5896bf1f838e/deadpool_executor-2022.9.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "79ae0145026886a2ba751641f82d3ae67c198508a97883941e85f11945bbd512",
          "md5": "32ad7c0f86e1b5d6ed1f96e420297160",
          "sha256": "e4bae3f8af1f001cefa8ac04b01f42b814b1d2449179b611c245121c38f7332d"
        },
        "downloads": -1,
        "filename": "deadpool-executor-2022.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32ad7c0f86e1b5d6ed1f96e420297160",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18553,
        "upload_time": "2022-09-17T13:51:34",
        "upload_time_iso_8601": "2022-09-17T13:51:34.096342Z",
        "url": "https://files.pythonhosted.org/packages/79/ae/0145026886a2ba751641f82d3ae67c198508a97883941e85f11945bbd512/deadpool-executor-2022.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.9.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "bfdb3878404e3636bf4d896a3bedb50fd460a421a08290669cd4eadcad48374a",
          "md5": "92206074faae1d40bee40eb8867f7374",
          "sha256": "877b7c0f9676811ff738431aef8d0939eb94e223ec1fdf46b541611430e1a5cb"
        },
        "downloads": -1,
        "filename": "deadpool_executor-2022.9.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92206074faae1d40bee40eb8867f7374",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18323,
        "upload_time": "2022-09-17T13:54:41",
        "upload_time_iso_8601": "2022-09-17T13:54:41.726096Z",
        "url": "https://files.pythonhosted.org/packages/bf/db/3878404e3636bf4d896a3bedb50fd460a421a08290669cd4eadcad48374a/deadpool_executor-2022.9.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "064862fa0cbfb7daf81375e761c6b05ed6a6461c9540e49f54ca97dd8c0b7a09",
          "md5": "f2606bacba88bac1bb2108fc413a3767",
          "sha256": "763a5f0553101c0caa4522dbe2d2f6a909648481eec4692d9d8906534f370f06"
        },
        "downloads": -1,
        "filename": "deadpool-executor-2022.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f2606bacba88bac1bb2108fc413a3767",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18553,
        "upload_time": "2022-09-17T13:54:44",
        "upload_time_iso_8601": "2022-09-17T13:54:44.681828Z",
        "url": "https://files.pythonhosted.org/packages/06/48/62fa0cbfb7daf81375e761c6b05ed6a6461c9540e49f54ca97dd8c0b7a09/deadpool-executor-2022.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.9.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "5b8a427f09fa6917fb5895bcf146e1d3f0f8a5de718726b291f707d4433c751c",
          "md5": "c40c4e84be49b4f07e0fcc307e2d6641",
          "sha256": "a27463e69d6e4371a81129d19f3c4b0515595a6eee9c7a001e7baa3218096a8b"
        },
        "downloads": -1,
        "filename": "deadpool_executor-2022.9.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c40c4e84be49b4f07e0fcc307e2d6641",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19281,
        "upload_time": "2022-09-21T03:24:52",
        "upload_time_iso_8601": "2022-09-21T03:24:52.014240Z",
        "url": "https://files.pythonhosted.org/packages/5b/8a/427f09fa6917fb5895bcf146e1d3f0f8a5de718726b291f707d4433c751c/deadpool_executor-2022.9.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8a5569ffe201c6677a4a24d69497bca8081421f69951fceb3255b4f8748791d4",
          "md5": "e189b2ff3f657d41fa971e3d5a8d4387",
          "sha256": "e3a0c0d757be5d00432d6875dd3fa77b3e83814b618634924ffc7f46b3d00eb8"
        },
        "downloads": -1,
        "filename": "deadpool-executor-2022.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e189b2ff3f657d41fa971e3d5a8d4387",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22757,
        "upload_time": "2022-09-21T03:24:54",
        "upload_time_iso_8601": "2022-09-21T03:24:54.773514Z",
        "url": "https://files.pythonhosted.org/packages/8a/55/69ffe201c6677a4a24d69497bca8081421f69951fceb3255b4f8748791d4/deadpool-executor-2022.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.9.4": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9c67ba6e6e02de3b746d842a65158c2c91866d333cd9cc57af0916ccd305b14b",
          "md5": "2660659c86c77b4ed3a5a615cf0fbb9d",
          "sha256": "3908dd12c0e3a15b8e2b92792dcae0df24ef263ab8f731a6c6632e133a102a98"
        },
        "downloads": -1,
        "filename": "deadpool_executor-2022.9.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2660659c86c77b4ed3a5a615cf0fbb9d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23231,
        "upload_time": "2022-09-23T04:39:10",
        "upload_time_iso_8601": "2022-09-23T04:39:10.443330Z",
        "url": "https://files.pythonhosted.org/packages/9c/67/ba6e6e02de3b746d842a65158c2c91866d333cd9cc57af0916ccd305b14b/deadpool_executor-2022.9.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9595d99305e7c4731d8e49e09a62e0e5be3822906e597f69c492fa49869c9f05",
          "md5": "33ad83b0030e4150354d7727bc95f72f",
          "sha256": "bf46085c5653c1a76ff5119522fcccf008c808e27825b7bff5fe1737a84b4c43"
        },
        "downloads": -1,
        "filename": "deadpool-executor-2022.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "33ad83b0030e4150354d7727bc95f72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29728,
        "upload_time": "2022-09-23T04:39:14",
        "upload_time_iso_8601": "2022-09-23T04:39:14.296603Z",
        "url": "https://files.pythonhosted.org/packages/95/95/d99305e7c4731d8e49e09a62e0e5be3822906e597f69c492fa49869c9f05/deadpool-executor-2022.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.9.5": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "3dee73017a3a89cca496d6ac4fff87648ce9f0ef24859171f1645cae77c89527",
          "md5": "bc62814e47309d8791f25c8fa7c85551",
          "sha256": "c4f89f974d7cd0dfab75d872e27b1428e8567807ea108d1e11e89677c5f2e7ba"
        },
        "downloads": -1,
        "filename": "deadpool_executor-2022.9.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc62814e47309d8791f25c8fa7c85551",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23921,
        "upload_time": "2022-09-23T07:06:20",
        "upload_time_iso_8601": "2022-09-23T07:06:20.787736Z",
        "url": "https://files.pythonhosted.org/packages/3d/ee/73017a3a89cca496d6ac4fff87648ce9f0ef24859171f1645cae77c89527/deadpool_executor-2022.9.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7cdbccf13919bc0efe6255f2d2cfe62802d7b6ed9220ba12842a887193fd79c8",
          "md5": "be9b878e3f541eec5524483087713cb0",
          "sha256": "b234dae3c7afc138a8033e39349ed54b098b5754cea91f145c983743129edc82"
        },
        "downloads": -1,
        "filename": "deadpool-executor-2022.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "be9b878e3f541eec5524483087713cb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31110,
        "upload_time": "2022-09-23T07:06:24",
        "upload_time_iso_8601": "2022-09-23T07:06:24.276799Z",
        "url": "https://files.pythonhosted.org/packages/7c/db/ccf13919bc0efe6255f2d2cfe62802d7b6ed9220ba12842a887193fd79c8/deadpool-executor-2022.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.9.6": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "29699864548154c930f67b3879d008eecc65798c810e538e70860b8a3ffe07dc",
          "md5": "4e3a9586c7377d58b06ef51220103eb7",
          "sha256": "d1d12742db58fb8fc3e701e282d2d27211ae4b70acf1ee9e04c02c24e2f63fab"
        },
        "downloads": -1,
        "filename": "deadpool_executor-2022.9.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e3a9586c7377d58b06ef51220103eb7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23908,
        "upload_time": "2022-09-23T10:56:12",
        "upload_time_iso_8601": "2022-09-23T10:56:12.299330Z",
        "url": "https://files.pythonhosted.org/packages/29/69/9864548154c930f67b3879d008eecc65798c810e538e70860b8a3ffe07dc/deadpool_executor-2022.9.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b2777e1916a2aa5966af97b6c1f864cf4c610de35c8f91ee9fd4e7a7aae89e1b",
          "md5": "c3a5c9bccb84879d60a1813fdceab134",
          "sha256": "eb4fea1ce1ee6b39858ada11c33fbab0c90eee4320c291cdbdfe3fe54be64bf2"
        },
        "downloads": -1,
        "filename": "deadpool-executor-2022.9.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c3a5c9bccb84879d60a1813fdceab134",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31092,
        "upload_time": "2022-09-23T10:56:15",
        "upload_time_iso_8601": "2022-09-23T10:56:15.924274Z",
        "url": "https://files.pythonhosted.org/packages/b2/77/7e1916a2aa5966af97b6c1f864cf4c610de35c8f91ee9fd4e7a7aae89e1b/deadpool-executor-2022.9.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "29699864548154c930f67b3879d008eecc65798c810e538e70860b8a3ffe07dc",
        "md5": "4e3a9586c7377d58b06ef51220103eb7",
        "sha256": "d1d12742db58fb8fc3e701e282d2d27211ae4b70acf1ee9e04c02c24e2f63fab"
      },
      "downloads": -1,
      "filename": "deadpool_executor-2022.9.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4e3a9586c7377d58b06ef51220103eb7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23908,
      "upload_time": "2022-09-23T10:56:12",
      "upload_time_iso_8601": "2022-09-23T10:56:12.299330Z",
      "url": "https://files.pythonhosted.org/packages/29/69/9864548154c930f67b3879d008eecc65798c810e538e70860b8a3ffe07dc/deadpool_executor-2022.9.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b2777e1916a2aa5966af97b6c1f864cf4c610de35c8f91ee9fd4e7a7aae89e1b",
        "md5": "c3a5c9bccb84879d60a1813fdceab134",
        "sha256": "eb4fea1ce1ee6b39858ada11c33fbab0c90eee4320c291cdbdfe3fe54be64bf2"
      },
      "downloads": -1,
      "filename": "deadpool-executor-2022.9.6.tar.gz",
      "has_sig": false,
      "md5_digest": "c3a5c9bccb84879d60a1813fdceab134",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31092,
      "upload_time": "2022-09-23T10:56:15",
      "upload_time_iso_8601": "2022-09-23T10:56:15.924274Z",
      "url": "https://files.pythonhosted.org/packages/b2/77/7e1916a2aa5966af97b6c1f864cf4c610de35c8f91ee9fd4e7a7aae89e1b/deadpool-executor-2022.9.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}