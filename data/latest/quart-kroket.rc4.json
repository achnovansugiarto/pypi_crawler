{
  "info": {
    "author": "Kroket Ltd.",
    "author_email": "code@kroket.io",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Quart-Keycloak\n\nzZzZ\n\n### Redis cache\n\n```python3\napp.setup_cache()\n```\n\nAfter which you may use it directly;\n\n```python3\nfrom quart_session.sessions import SessionInterface\n@app.route(\"/\")\nasync def hello():\n    cache: SessionInterface = app.session_interface\n    await cache.set(\"random_key\", \"val\", expiry=3600)\n    data = await cache.get(\"random_key\")\n```\n\n### multi-subscriber websocket\n\n```python3\nfrom asyncio_multisubscriber_queue import MultisubscriberQueue\nbroadcast = MultisubscriberQueue()\n\nawait broadcast.put({\"payload\": 1})\n\nasync for msg in broadcast.subscribe():\n    [...]\n```\n\n### Utils\n\n```python3\nfrom quart.kroket.utils import ...\n```\n\n```python3\ndef make_slug(inp: str)\ndef program_exists(name: str)\ndef safu(func)  (decorator)\ndef get_visitor_ipv4(enforce_forwarded_header=True)\ndef random_str(num_chars: int)\n```\n\n### image APIs\n\n```text\napp.setup_image_apis()\n```\n\nRegisters the following routes:\n\n- `/_/avatar/<path:inp>`\n- `/_/gravatar/<path:inp>`\n- `/_/avatar/<path:inp>`\n- `/_/qr/<path:inp>/<path:color_from>/<path:color_to>/` (colors need to be tuple)\n\n```python3\nurl_for(\"kquart.route_avatar\", inp=\"test\")\nurl_for(\"kquart.route_gravatar\", inp=\"test\")\nurl_for(\"kquart.route_qr\", inp=\"test\")\n```\n\n### Error templates\n\nCreate these:\n\n- `templates/errors/500.html`\n- `templates/errors/403.html`\n- `templates/errors/404.html`\n\n### OIDC\n\n```python3\napp.setup_keycloak(\n    client_id='', \n    client_secret='', \n    configuration='url')\n```\n\nauto-registered routes:\n\n- `/oidc/login`\n- `/oidc/logout`\n- `/oidc/after_logout`\n\nAfter login, will set `g.user` and `session['user']` with instance of `quart.kroket.oidc.models.KeycloakUser`\n\nSo in `factory.py` we'll have `before_request` look like:\n\n```python3\n@app.before_request\nasync def set_request_ctx():\n    from app.db.models import User\n    from quart.kroket.database.enums import UserRole\n    auth_token: KeycloakAuthToken = g.ses\n\n    if not auth_token:\n        return\n\n    if g.user:\n        return\n\n    # get and update (or create) user\n    try:\n        user: User = User.by_uid(auth_token.sub)\n        user.username = auth_token.username\n        user.role = UserRole.member\n        user.save()\n        g.user = user\n    except pw.DoesNotExist as ex:\n        user: User = User.create(\n            uuid=auth_token.sub,\n            username=auth_token.username,\n            role=UserRole.member)\n        g.user = user\n    except Exception as ex:\n        current_app.logger.error(ex)\n        session.clear()\n        raise Exception(ex)\n```\n\n### Template filters\n\n```text\nhash_sha256(val)\ndef hash_md5(val)\ndef size_human(val)\ndef dt_ago(val: datetime)\ndef dt_human(val)\n```\n\n### Rate limiting\n\n```python3\nrate_limiter = RateLimiter()\n\ndef create_app():\n    app = Quart(__name__)\n    rate_limiter.init_app(app)\n    return app\n\n@app.route('/')\n@rate_limit(1, timedelta(seconds=10))\nasync def handler():\n    [...]\n```\n\n### Database\n#### Enum\n\n```text\nUsage:\n  from enum import IntEnum, unique\n\n  @unique\n  class UserStatus(IntEnum):\n    disabled = 0\n    enable = 1\n    banned = 2\n\n  [...]\n  status = EnumIntField(enum_class=UserStatus, default=UserStatus.active)\n  [...]\n  Model.select().where(Model.status != UserStatus.banned)\n\nUsage:\n  from enum import IntEnum, unique\n\n  @unique\n  class UserTags(IntEnum):\n    has_car = 0\n    has_plane = 1\n    has_helicopter = 2\n\n  [...]\n  vehicles = EnumArrayField(enum_class=UserTags, field_class=IntegerField, default=[UserTags.has_bank_account])\n\n  # Fetch results with `has_car` OR `has_helicopter`:\n  Model.select().where(\n    Model.vehicles.contains_any(UserTags.has_car, UserTags.has_helicopter)).get()\n```\n\n#### database example\n\n```python3\nfrom quart.kroket.database import create_db\ndatabase = create_db()\n```\n\n```python3\nclass Company(pw.Model):\n    uid: Union[str, UUID] = pw.UUIDField(primary_key=True, default=uuid4)\n    created = pw.DateTimeField(default=datetime.now)\n    modified = pw.DateTimeField(default=datetime.now)\n\n    name: str = pw.CharField(unique=True, index=True, max_length=256)\n    users: List['User'] = None\n\n    class Meta:\n        from my_app.factory import database\n        database = database\n\n\nclass User(pw.Model):\n    uid: Union[str, UUID] = pw.UUIDField(primary_key=True)  # uuid4 from keycloak\n    created = pw.DateTimeField(default=datetime.now)\n    modified = pw.DateTimeField(default=datetime.now)\n\n    name = pw.CharField(unique=True, index=True, max_length=256)\n    username = pw.CharField(unique=True, index=True, max_length=64)\n    company = pw.ForeignKeyField(Company, backref='users')\n\n    roles: List[UserRole] = EnumArrayField(enum_class=UserRole, field_class=pw.IntegerField, default=[UserRole.anonymous])\n    status: UserStatus = EnumIntField(enum_class=UserStatus, default=UserStatus.active)\n\n    things: List['Thing'] = None\n\n    class Meta:\n        from my_app.factory import database\n        database = database\n\n    @property\n    def is_admin(self):\n        return UserRole.admin in self.roles\n\n    @property\n    def is_anon(self):\n        return UserRole.anonymous in self.roles\n\n    @property\n    def has_auth(self):\n        return not self.is_anon\n\n    @staticmethod\n    def by_uid(uuid: Union[str, UUID]):\n        return User.select() \\\n            .join(File, pw.JOIN.LEFT_OUTER) \\\n            .where(User.uid == uuid).get()\n        # .join(Download, pw.JOIN.LEFT_OUTER) \\\n\n    async def to_json(self):\n        return {\n            \"uid\": self.uid\n        }\n\n\nclass Thing(pw.Model):\n    uid: Union[str, UUID] = pw.UUIDField(primary_key=True, default=uuid4)\n    created = pw.DateTimeField(default=datetime.now)\n    modified = pw.DateTimeField(default=datetime.now)\n\n    title: str = pw.CharField(max_length=512, index=True)\n    markdown: str = pw.TextField(null=True)\n\n    roles_view: List[UserRole] = EnumArrayField(enum_class=UserRole, field_class=pw.IntegerField, default=[])\n    roles_edit: List[UserRole] = EnumArrayField(enum_class=UserRole, field_class=pw.IntegerField, default=[])\n    participants: List[User] = pw.ManyToManyField(User, backref='thing_participations')\n\n    ip = pw.IPField(index=True, null=True)\n\n    creator = pw.ForeignKeyField(User, backref='things')\n\n    class Meta:\n        from my_app.factory import database\n        database = database\n\n    @property\n    def ago(self):\n        return humanize.naturaltime(self.created)\n\n    @classmethod\n    async def new_ticket(cls, user: User, title: str, markdown: str, remote_address: str) -> 'Thing':\n        if not title:\n            raise Exception(\"title cannot be empty\")\n        if not validate_ipv4(remote_address):\n            raise Exception(\"upload ipv4 address invalid\")\n\n        return cls.create(\n            title=title,\n            markdown=markdown,\n            creator=user,\n            ip=remote_address\n        )\n\nUserThingParticipant = Thing.participants.get_through_model()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.kroket.io/labs/quart-kroket",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Quart-Kroket",
    "package_url": "https://pypi.org/project/Quart-Kroket/",
    "platform": "any",
    "project_url": "https://pypi.org/project/Quart-Kroket/",
    "project_urls": {
      "Homepage": "https://git.kroket.io/labs/quart-kroket"
    },
    "release_url": "https://pypi.org/project/Quart-Kroket/1.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "zZzZ",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17517767,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "961b914944a17bbfada4f59f6b945f874706f335aa1a52d029d9b30b19ed939a",
          "md5": "5283dd2e12c32ab9408a695538c0acc5",
          "sha256": "f9cc89da21983db91a2cadce2703873cd8bf7a5bb2445ed4bc31abf0ce4605c7"
        },
        "downloads": -1,
        "filename": "Quart-Kroket-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5283dd2e12c32ab9408a695538c0acc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 289288,
        "upload_time": "2023-02-24T13:02:41",
        "upload_time_iso_8601": "2023-02-24T13:02:41.364305Z",
        "url": "https://files.pythonhosted.org/packages/96/1b/914944a17bbfada4f59f6b945f874706f335aa1a52d029d9b30b19ed939a/Quart-Kroket-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e4e27d692952897d27e1f79901a8868347cad1dd34b55b49c6e4ccbe93a54bd",
          "md5": "5fae875cafee49640c8a60dbb9721552",
          "sha256": "78fa047163b0ded17b064e23841b361b8a832dbd4060d4d5d3bee0027d5903e6"
        },
        "downloads": -1,
        "filename": "Quart-Kroket-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fae875cafee49640c8a60dbb9721552",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 289295,
        "upload_time": "2023-02-28T17:49:41",
        "upload_time_iso_8601": "2023-02-28T17:49:41.818284Z",
        "url": "https://files.pythonhosted.org/packages/6e/4e/27d692952897d27e1f79901a8868347cad1dd34b55b49c6e4ccbe93a54bd/Quart-Kroket-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c60b3328411e9017a67379b10c26fa1204cab118defd9aa4f8e160501a0056f9",
          "md5": "cd4f2c0ee599f117304c0a7793a06a6c",
          "sha256": "a4216492b4a17b11e8f7cd14e1905b996e30537adff6146fa132888abe14bf49"
        },
        "downloads": -1,
        "filename": "Quart-Kroket-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cd4f2c0ee599f117304c0a7793a06a6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 290748,
        "upload_time": "2023-02-28T17:49:43",
        "upload_time_iso_8601": "2023-02-28T17:49:43.851855Z",
        "url": "https://files.pythonhosted.org/packages/c6/0b/3328411e9017a67379b10c26fa1204cab118defd9aa4f8e160501a0056f9/Quart-Kroket-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5963e880d3549b3897f890bc7737b86d47fea063b8712742c0a09db416598678",
          "md5": "06e1876955c0a6251b535e79c9b864eb",
          "sha256": "cf7f1fe23c0afd6d8d7a3a21d789dbbfa5b4eee9d49120f89ef615db5d486836"
        },
        "downloads": -1,
        "filename": "Quart-Kroket-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "06e1876955c0a6251b535e79c9b864eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 299248,
        "upload_time": "2023-03-30T23:56:08",
        "upload_time_iso_8601": "2023-03-30T23:56:08.799402Z",
        "url": "https://files.pythonhosted.org/packages/59/63/e880d3549b3897f890bc7737b86d47fea063b8712742c0a09db416598678/Quart-Kroket-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5963e880d3549b3897f890bc7737b86d47fea063b8712742c0a09db416598678",
        "md5": "06e1876955c0a6251b535e79c9b864eb",
        "sha256": "cf7f1fe23c0afd6d8d7a3a21d789dbbfa5b4eee9d49120f89ef615db5d486836"
      },
      "downloads": -1,
      "filename": "Quart-Kroket-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "06e1876955c0a6251b535e79c9b864eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 299248,
      "upload_time": "2023-03-30T23:56:08",
      "upload_time_iso_8601": "2023-03-30T23:56:08.799402Z",
      "url": "https://files.pythonhosted.org/packages/59/63/e880d3549b3897f890bc7737b86d47fea063b8712742c0a09db416598678/Quart-Kroket-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}