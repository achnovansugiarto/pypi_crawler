{
  "info": {
    "author": "Chris Johnson",
    "author_email": "chrisjohnson00@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# kme\nA Python library that enables building simple Kafka consumer/producer micro/nano services\n\nThis is a library that wraps the `kafka-python` library with some message routing helpers.\n\nWith this library, you can create micro/nano services (think like a Function, FaaS) that listens to one or more Kafka topics\nand processes the message, then based on configuration can send a new message.\n\nI developed this with the intent to create a distributed workflow for various automation activities in my Kubernetes cluster\nand outside as well.\n\nThe workflow that I initially designed this for was:\n\n1) On a schedule, submit a message to the \"wakup-computer\" topic.  This message contains details on which computer to \n   wake up and how we determine when the computer is ready for work, and \"completion topic\", where we send a message \n   when the computer is alive!  In my case, I have an old server with a ton of hard drives, which I use for cold \n   backups.  I only need it on while backups are running.\n2) The completion topic, lets call it \"run-backups\" would accept the message and perform the backup processes.  Once it\n   has completed, it will send a new message to the \"shutdown-computer\" topic.\n3) The \"shutdown-computer\" topic has a consumer group for each computer which is included in this flow, and it receives\n   the message and sees that it needs to shut down and does so.\n   \nI also invision using this workflow for my on-premise Kubernetes cluster so that I can \"auto scale\" nodes up/down when \nneeded, reusing the \"wakup-computer\" and \"shutdown-computer\" topics and nano-services.\n\n# Usage\n\n```python\nfrom kme import KMEMessage, KME\nimport os\n\n# produce a message with a completion topic\ndef kme_producer():\n    message = KMEMessage(topic=os.environ.get('KAFKA_TOPIC'))\n    message.message = {'foo': 'bar', 'bar': 'foo'}\n    message.completion_topic = 'foobar'\n    k_client = KME(bootstrap_servers=[os.environ.get('KAFKA_BOOSTRAP_SERVER')])\n    k_client.send_message(message=message)\n\n# setup a consumer\ndef kme_consumer():\n    k_client = KME(bootstrap_servers=[os.environ.get('KAFKA_BOOSTRAP_SERVER')])\n    print(f\"Subscribing to {os.environ.get('KAFKA_TOPIC')}\", flush=True)\n    # IMPORTANT - note the callback value!!\n    k_client.subscribe(os.environ.get('KAFKA_TOPIC'), consumer_group='me', callback=process_message)  \n\n\n# this is the method which is called for each message, so put your logic here!\ndef process_message(message: KMEMessage):\n    print(f\"Processing message {message}\", flush=True)\n    print(f\"Message: {message.message}\", flush=True)\n    print(f\"Topic: {message.topic}\", flush=True)\n    print(f\"Completion Topic: {message.completion_topic}\", flush=True)\n    # if you want to pass a \"completion message\" you populate it and return it\n    # if you don't want to pass a \"completion message\" just return `KMEMessage(topic='')`\n    return_message = KMEMessage(topic=message.completion_topic)\n    return_message.message = \"foo the bar\"\n    return return_message\n\nif __name__ == '__main__':\n    print(\"Starting\", flush=True)\n    kme_producer() # produce a message\n    kme_consumer() # now consume said message\n    print(\"Finished\", flush=True)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chrisjohnson00/kme",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kme",
    "package_url": "https://pypi.org/project/kme/",
    "platform": "",
    "project_url": "https://pypi.org/project/kme/",
    "project_urls": {
      "Bug Tracker": "https://github.com/chrisjohnson00/kme/issues",
      "Homepage": "https://github.com/chrisjohnson00/kme"
    },
    "release_url": "https://pypi.org/project/kme/0.1.1/",
    "requires_dist": [
      "jsonpickle (<3,>=2)",
      "kafka-python (<3,>=2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A library that enables building simple Kafka consumer/producer micro/nano services",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10628369,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b036c8bb5451a897c932062022342a9102e6b242920a3401fe3ea725d4193905",
          "md5": "d6f0c139f2526c01aff5f857dcea47f8",
          "sha256": "9517769edb6e31d9bfc930e41190b70170f78fcdf1fd720fa6d1da7f8fb99310"
        },
        "downloads": -1,
        "filename": "kme-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6f0c139f2526c01aff5f857dcea47f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4447,
        "upload_time": "2021-06-11T23:06:14",
        "upload_time_iso_8601": "2021-06-11T23:06:14.524364Z",
        "url": "https://files.pythonhosted.org/packages/b0/36/c8bb5451a897c932062022342a9102e6b242920a3401fe3ea725d4193905/kme-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "158407a639df9e49a0f1fe5c6db0d4627be27bf0d43f3182cc9069b3c8b1f89b",
          "md5": "f65baa762a98499e24d4dd9a6d1a413b",
          "sha256": "2de474b3f90257e41356f0fd192b1c46ed62f69c92e60f96d4c254d20e2026c2"
        },
        "downloads": -1,
        "filename": "kme-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f65baa762a98499e24d4dd9a6d1a413b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4216,
        "upload_time": "2021-06-11T23:06:16",
        "upload_time_iso_8601": "2021-06-11T23:06:16.106058Z",
        "url": "https://files.pythonhosted.org/packages/15/84/07a639df9e49a0f1fe5c6db0d4627be27bf0d43f3182cc9069b3c8b1f89b/kme-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eaf866ec438a66fda13e0cba147c7bc2cb41662517fc01f5b1064506abd0e5d",
          "md5": "cc7b93be611891671335f59fd7b27438",
          "sha256": "63714067f75981567a1384a738093a05634928032b0d0ed19e21fd7a35a3b78c"
        },
        "downloads": -1,
        "filename": "kme-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc7b93be611891671335f59fd7b27438",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4632,
        "upload_time": "2021-06-12T00:51:12",
        "upload_time_iso_8601": "2021-06-12T00:51:12.219580Z",
        "url": "https://files.pythonhosted.org/packages/5e/af/866ec438a66fda13e0cba147c7bc2cb41662517fc01f5b1064506abd0e5d/kme-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbeeb459be54e395e0347409acb38f4981fb3e7181d0fec904485917904c466d",
          "md5": "078e75f5f51d84df97e6c174199e2063",
          "sha256": "8b82ea742dd05c89009a6e1a7f75fa4ce3efcb4cb81e3f32040bdfa72aed2674"
        },
        "downloads": -1,
        "filename": "kme-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "078e75f5f51d84df97e6c174199e2063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4364,
        "upload_time": "2021-06-12T00:51:13",
        "upload_time_iso_8601": "2021-06-12T00:51:13.075677Z",
        "url": "https://files.pythonhosted.org/packages/cb/ee/b459be54e395e0347409acb38f4981fb3e7181d0fec904485917904c466d/kme-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5eaf866ec438a66fda13e0cba147c7bc2cb41662517fc01f5b1064506abd0e5d",
        "md5": "cc7b93be611891671335f59fd7b27438",
        "sha256": "63714067f75981567a1384a738093a05634928032b0d0ed19e21fd7a35a3b78c"
      },
      "downloads": -1,
      "filename": "kme-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc7b93be611891671335f59fd7b27438",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4632,
      "upload_time": "2021-06-12T00:51:12",
      "upload_time_iso_8601": "2021-06-12T00:51:12.219580Z",
      "url": "https://files.pythonhosted.org/packages/5e/af/866ec438a66fda13e0cba147c7bc2cb41662517fc01f5b1064506abd0e5d/kme-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbeeb459be54e395e0347409acb38f4981fb3e7181d0fec904485917904c466d",
        "md5": "078e75f5f51d84df97e6c174199e2063",
        "sha256": "8b82ea742dd05c89009a6e1a7f75fa4ce3efcb4cb81e3f32040bdfa72aed2674"
      },
      "downloads": -1,
      "filename": "kme-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "078e75f5f51d84df97e6c174199e2063",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4364,
      "upload_time": "2021-06-12T00:51:13",
      "upload_time_iso_8601": "2021-06-12T00:51:13.075677Z",
      "url": "https://files.pythonhosted.org/packages/cb/ee/b459be54e395e0347409acb38f4981fb3e7181d0fec904485917904c466d/kme-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}