{
  "info": {
    "author": "apollo-team",
    "author_email": "apollo-support@baidu.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Convert dataset\n`adataset` is used to convert datasets (nuScenes, KITTI) to Apollo record file. This way we can guarantee **the consistency of training data and test data**, including sensor intrinsics and extrinsics parameter files, thus speeding up model validation.\n\n## Install\n```\npip3 install adataset\n```\n\n## Usage\nWe first introduce the use of the command, and then introduce how to use the dataset with `adataset`.\n\n#### Command options\nThe options for `adataset` command are as follows:\n* --dataset(-d) Choose the dataset, support list `n, k, w`, means \"n:nuScenes, k:KITTI, w:Waymo\"\n* --input(-i) Set the dataset input directory.\n* --output(-o) Set the output directory, default is the current directory.\n* --type(-t) Choose conversion type, support list `rcd, cal, pcd`, means \"rcd:record, cal:calibration, pcd:pointcloud\", default is `rcd`.\n\n#### Convert record files\nYou can use below command to convert dataset to Apollo record file. For example convert nuScenes dataset in `dataset_path` to Apollo record. The `output` default is the current directory, and the `type` default is `rcd`.\n```shell\nadataset -d=n -i=dataset_path\n```\nThe name of the nuScenes record file is `scene_token.record`, and KITTI is `result.record`.\n\n#### Convert calibration files\nYou can use below command to convert dataset to apollo calibration files. There maybe multi sense in one dataset, and we create calibration files for each scene.\n```shell\nadataset -d=n -i=dataset_path -t=cal\n```\n\n###### Camera intrinsics\nCamera intrinsics matrix. ref [link](http://docs.ros.org/en/melodic/api/sensor_msgs/html/msg/CameraInfo.html)\n- D: The distortion parameters, size depending on the distortion model. For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\n- K: Intrinsic camera matrix for the raw (distorted) images.\n- R: Rectification matrix (stereo cameras only)\n- P: Projection/camera matrix\n\n#### Convert PCD file\nYou can use below command to convert dataset lidar pcd to normal pcl file, which can display in visualization tools such as `pcl_viewer`.\n```shell\nadataset -d=n -i=dataset_lidar_pcd_file -t=pcd\n```\nIf you do not specify a name, the default name of the pcd file is `result.pcd`, saved in the current directory.\n\n## Dataset introduction\nThere are differences between the data sets, so introduce them separately.\n\n#### nuScenes\n[nuScenes Mini](https://www.nuscenes.org/nuscenes#download) compared with the full amount of data, the Mini data set is relatively small. The nuScenes Mini data set is as follows.\n```\nnuScenes-Mini\n -maps\n -samples\n -sweeps\n -v1.0-mini\n```\nThen we can use the following command to generate the \"record/calibration/pcd\" file.\n```\n// record\nadataset -d=n -i=path/to/nuScenes-Mini\n// calibration\nadataset -d=n -i=path/to/nuScenes-Mini -t=cal\n// pcd\nadataset -d=n -i=path/to/nuScenes-Mini/samples/LIDAR_TOP/n015-2018-11-21-19-38-26+0800__LIDAR_TOP__1542801007446751.pcd.bin -t=pcd\n```\n\n#### KITTI\nWe use [KITTI raw data](https://www.cvlibs.net/datasets/kitti/raw_data.php) to generate Apollo record file. Be sure to download `[synced+rectified data]` but not `[unsynced+unrectified data]`. Note that the calibration data are in `[calibration]`.\n\n###### dataset\nThe KITTI raw data is as follows.\n```\n2011_09_26_drive_0015_sync\n -image_00\n -image_01\n -image_02\n -image_03\n -oxts\n -velodyne_points\n```\nThen we can use the following command to generate the \"record/pcd\" file.\n```\n// record\nadataset -d=k -i=path/to/2011_09_26_drive_0015_sync\n// pcd\nadataset -d=k -i=path/to/2011_09_26/2011_09_26_drive_0015_sync/velodyne_points/data/0000000113.bin -t=pcd\n```\n\n###### calibration\nThe KITTI calibration data is as follows:\n```\n2011_09_26\n -calib_cam_to_cam.txt\n -calib_imu_to_velo.txt\n -calib_velo_to_cam.txt\n```\nThen we can use the following command to generate the Apollo \"calibration\" files.\n```\nadataset -d=k -i=path/to/2011_09_26 -t=cal\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ApolloAuto/apollo/tree/master/modules/tools/adataset",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adataset",
    "package_url": "https://pypi.org/project/adataset/",
    "platform": null,
    "project_url": "https://pypi.org/project/adataset/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ApolloAuto/apollo/issues",
      "Homepage": "https://github.com/ApolloAuto/apollo/tree/master/modules/tools/adataset"
    },
    "release_url": "https://pypi.org/project/adataset/0.1.0/",
    "requires_dist": [
      "numpy",
      "pyproj",
      "cyber-record",
      "record-msg"
    ],
    "requires_python": ">=3.6",
    "summary": "Dataset conversion to Apollo record tool",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16470571,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2af2e2d6a7330c3ef2dd65465e1506fe3a19e080c96bb78029154827e76906",
          "md5": "a4cfee96f4abda4f92574d9c492258d9",
          "sha256": "916ebfe2fa57a4e3680dc3ae568da9ebfa41452e32a77f9005a66e6da94ab7b3"
        },
        "downloads": -1,
        "filename": "adataset-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4cfee96f4abda4f92574d9c492258d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26899,
        "upload_time": "2023-01-18T10:51:12",
        "upload_time_iso_8601": "2023-01-18T10:51:12.652887Z",
        "url": "https://files.pythonhosted.org/packages/4a/2a/f2e2d6a7330c3ef2dd65465e1506fe3a19e080c96bb78029154827e76906/adataset-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cb626b71b853b1ea01b4e5cd5ebdc1877f8fd60dde74425d6e09c85c6fa8f0d",
          "md5": "1d68d3f1bd652c12b94bb2e2113cd99e",
          "sha256": "2aebe7607dfcdda2938b193d4d9856fd3fc334a45b39615f05888216a2975f17"
        },
        "downloads": -1,
        "filename": "adataset-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d68d3f1bd652c12b94bb2e2113cd99e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18383,
        "upload_time": "2023-01-18T10:51:14",
        "upload_time_iso_8601": "2023-01-18T10:51:14.442317Z",
        "url": "https://files.pythonhosted.org/packages/5c/b6/26b71b853b1ea01b4e5cd5ebdc1877f8fd60dde74425d6e09c85c6fa8f0d/adataset-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a2af2e2d6a7330c3ef2dd65465e1506fe3a19e080c96bb78029154827e76906",
        "md5": "a4cfee96f4abda4f92574d9c492258d9",
        "sha256": "916ebfe2fa57a4e3680dc3ae568da9ebfa41452e32a77f9005a66e6da94ab7b3"
      },
      "downloads": -1,
      "filename": "adataset-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4cfee96f4abda4f92574d9c492258d9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26899,
      "upload_time": "2023-01-18T10:51:12",
      "upload_time_iso_8601": "2023-01-18T10:51:12.652887Z",
      "url": "https://files.pythonhosted.org/packages/4a/2a/f2e2d6a7330c3ef2dd65465e1506fe3a19e080c96bb78029154827e76906/adataset-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cb626b71b853b1ea01b4e5cd5ebdc1877f8fd60dde74425d6e09c85c6fa8f0d",
        "md5": "1d68d3f1bd652c12b94bb2e2113cd99e",
        "sha256": "2aebe7607dfcdda2938b193d4d9856fd3fc334a45b39615f05888216a2975f17"
      },
      "downloads": -1,
      "filename": "adataset-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1d68d3f1bd652c12b94bb2e2113cd99e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18383,
      "upload_time": "2023-01-18T10:51:14",
      "upload_time_iso_8601": "2023-01-18T10:51:14.442317Z",
      "url": "https://files.pythonhosted.org/packages/5c/b6/26b71b853b1ea01b4e5cd5ebdc1877f8fd60dde74425d6e09c85c6fa8f0d/adataset-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}