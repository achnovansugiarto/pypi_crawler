{
  "info": {
    "author": "DC3",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Dragodis\n\nDragodis is a Python framework which allows for the creation of\nuniversal disassembler scripts.  Dragodis currently only supports\nIDA and Ghidra, but has plans to support additional disassemblers\nin the future.  Dragodis only supports Python 3.\n\nThe name `Dragodis` comes from the combination of `Dragoman`, a professional\ninterpreter, and `Disassembler`.\n\nDragodis was created due to a need of the ability to run IDA scripts in\nGhidra. Many scripts for automated analysis will work fine in most disassemblers.\nEliminating the need to use disassemblers which require licenses for automated\nanalysis is ideal.\n\nThere are other benefits of a universal disassembler API as well. Many reverse\nengineers have a preferred disassembler. Dragodis allows for simple transfers\nof scripts between users of different disassemblers. Dragodis also aims to provide\na cleaner and easier to use API than those provided by other disassemblers.\n\n\n## Install\n\nUse pip to install dragodis:\n\n```console\npip install dragodis\n```\n\nThen follow the instructions [here](./docs/install.md) to install a backend disassembler.\n\n\n## Usage\n\nTo use Dragodis, simply pass in the path to your input binary file into either the `IDA` or `Ghidra` class.\nThis will create an instance of the disassembler with the given input file analyzed.\n\n```python\nimport dragodis\n\nwith dragodis.Ghidra(r\"C:\\strings.exe\") as ghidra:\n    print(ghidra.get_dword(0x401000))\n```\n\n```python\nimport dragodis\n\nwith dragodis.IDA(r\"C:\\strings.exe\") as ida:\n    print(ida.get_dword(0x401000))\n```\n\nA disassembler can also be run without using a context manager using the `start()` and `stop()` functions.\n\n```python\nimport dragodis\n\nghidra = dragodis.Ghidra(r\"C:\\strings.exe\")\nghidra.start()\nghidra.get_dword(0x401000)\nghidra.stop()\n```\n\nAlternatively, you can use `open_program()` to choose the disassembler more dynamically by providing\nthe disassembler name in the `disassembler` parameter or by setting the `DRAGODIS_DISASSEMBLER`\nenvironment variable.\n\n```python\nimport dragodis\n\nwith dragodis.open_program(r\"C:\\strings.exe\", disassembler=\"ida\") as ida:\n    print(ida.get_dword(0x401000))\n```\n\nIt is highly recommended to use the `DRAGODIS_DISASSEMBLER` environment variable to ensure your scripts\nare cross compatible without any modification. As well, to give the user the power to choose\nwhich disassembler they would like to use.\n\n\n```{note} \nA \"NotInstalledError\" will be thrown if the disassembler chosen is not properly installed.\n```\n\n```python\nimport os\nos.environ[\"DRAGODIS_DISASSEMBLER\"] = \"ida\"\n\nimport dragodis\n\nwith dragodis.open_program(r\"C:\\strings.exe\") as dis:\n    print(f\"Disassembler used: {dis.name}\")\n    print(dis.get_dword(0x401000))\n```\n\nIf you are locally within the disassembler's interpreter (the output window for IDA or pyhidraw interpreter in Ghidra)\nthen you can initialize a disassembler object by directly acccessing the object:\n\n```python\n# If in IDA\nimport dragodis\ndis = dragodis.IDA()\n\n# If in Ghidra\nimport dragodis\ndis = dragodis.Ghidra()\n```\n\nWe can also directly call scripts using the `open_program()` function locally in the disassembler.\nWhen this happens, the input file path provided must match the detected input file path by the disassembler.\n\n\n### Specifying Processor Type\n\nThe processor type can be specified during initialization of the `Disassembler` object or through `open_program()`. \nThis can be useful when loading shellcode.\n\nWhen using `open_program()` with any backend disassembler supported, use a `dragodis.PROCESSOR_*` flag which will get converted\nto a sane default for the respective disassembler.\n\n```python\nimport dragodis\nwith dragodis.open_program(r\"C:\\input.exe\", processor=dragodis.PROCESSOR_ARM) as dis:\n    ...\n```\n\nIf using a specific disassembler, any option that disassembler supports can be passed in.\n(Consult the documentation for the respective disassembler to know how to format the argument.)\n\n```python\n# IDA\nimport dragodis\nida = dragodis.IDA(r\"C:\\input\", processor=\"arm:ARMv7-M\")\n\n# Ghidra\nimport dragodis\nghidra = dragodis.Ghidra(r\"C:\\input\", processor=\"ARM:LE:32:v7\")\n```\n\nAlternatively, we can automatically choose the correct processor for the default disassembler chosen by the user \nwith some initial checks.\n\n```python\nimport dragodis\n\nPROCESSOR = {\n    dragodis.BACKEND_IDA: \"arm:ARMv7-M\",\n    dragodis.BACKEND_GHIDRA: \"ARM:LE:32:v7\",\n}[dragodis.BACKEND_DEFAULT]\n\nwith dragodis.open_program(r\"C:\\input\", processor=PROCESSOR) as dis:\n    ...\n```\n\n\n## Disassembler API Translation Map\n\nAs a reference, the following tables provide a rough mapping between the general equivalent API calls for Dragodis and each supported\ndisassembler. \n\n*NOTE: These are rough translations between equivalent disassembler API functions to help you transition \nfrom using either IDA or Ghidra to using Dragodis.\nThey are not always direct translations.\nFor brevity, some details and differences in results get glossed over here. Please see the source code for more information.*\n\n\n## Basics\n| Dragodis*                            | IDA                                                    | Ghidra                                                                           | \n|--------------------------------------|--------------------------------------------------------|----------------------------------------------------------------------------------|\n| dis.processor_name                   | ida_ida.inf_get_procname()                             | currentProgram.getLanguage().getProcessor()                                      |\n| dis.compiler_name                    | ida_typeinf.get_compiler_name(ida_ida.inf_get_cc_id()) | currentProgram.getCompiler()                                                     |\n| dis.bit_size                         | ida_ida.inf_get_app_bitness()                          | currentProgram.getDefaultPointerSize() * 8                                       |\n| dis.is_big_endian                    | ida_ida.inf_is_be()                                    | currentProgram.getLanguage().isBigEndian()                                       |\n| dis.min_address                      | ida_ida.inf_get_min_ea()                               | currentProgram.getMinAddress()                                                   |\n| dis.max_address                      | ida_ida.inf_get_max_ea()                               | currentProgram.getMaxAddress()                                                   |\n| dis.base_address                     | ida_nalt.get_imagebase()                               | currentProgram.getImageBase()                                                    |\n| dis.get_virtual_address(file_offset) | ida_loader.get_fileregion_ea(file_offset)              | currentProgram.getMemory().locateAddressesForFileOffset(file_offset)             |\n| dis.get_file_offset(address)         | ida_loader.get_fileregion_offset(address)              | currentProgram.getMemory().getAddressSourceInfo(toAddr(address)).getFileOffset() |\n| dis.entry_point                      | ida_ida.inf_get_start_ip()                             | *(export with name \"entry\" or \"_start\")*                                         |\n\n\n### Data\n| Dragodis*                                                                               | IDA                                                                                                                                         | Ghidra                                                                                                                                           | \n|-----------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|\n| dis.get_byte(address)                                                                   | ida_bytes.get_wide_byte(address)                                                                                                            | getByte(toAddr(address))                                                                                                                         |\n| dis.get_bytes(address, size)                                                            | ida_bytes.get_bytes(address, size)                                                                                                          | getBytes(toAddr(address), size)                                                                                                                  |\n| dis.find_bytes(b\"\\xde\\xad\\xbe\\xef\", start)                                              | idc.find_binary(start, idc.SEARCH_DOWN, \"DE AD BE EF\")                                                                                      | currentProgram.getMemory().findBytes(start, b\"\\xde\\xad\\xbe\\xef\", None, True, monitor)                                                            | \n| dis.find_bytes(b\"\\xde\\xad\\xbe\\xef\", start, reverse=True)                                | idc.find_binary(start, idc.SEARCH_UP, \"DE AD BE EF\")                                                                                        | currentProgram.getMemory().findBytes(start, b\"\\xde\\xad\\xbe\\xef\", None, False, monitor)                                                           |\n| dis.get_word(address)                                                                   | ida_bytes.get_wide_word(address)                                                                                                            | getShort(toAddr(address))                                                                                                                        |\n| dis.get_dword(address)                                                                  | ida_bytes.get_wide_dword(address)                                                                                                           | getInt(toAddr(address))                                                                                                                          |\n| dis.get_qword(address)                                                                  | ida_bytes.get_qword(address)                                                                                                                | getLong(toAddr(address))                                                                                                                         |\n| dis.get_string_bytes(address)                                                           | idc.get_strlit_contents(address)                                                                                                            | *complex: see source code*                                                                                                                       |\n| dis.lines(start_address, end_address)<br>dis.line_addresses(start_address, end_address) | idautils.Heads(start_address, end_address)                                                                                                  | currentProgram.getListing().getCodeUnits(address_set, True)                                                                                      |  \n| line = dis.get_line(address)                                                            | *N/A*                                                                                                                                       | code_unit = currentProgram.getListing().getCodeUnitContaining(toAddr(address))                                                                   |\n| line.address<br>dis.get_line_address(address)                                           | idc.get_item_head(address)                                                                                                                  | code_unit.getAddress()                                                                                                                           |\n| line.name<br>dis.get_name(address)                                                      | ida_name.get_name(address)                                                                                                                  | code_unit.getLabel()                                                                                                                             |\n| line.name = \"new_name\"                                                                  | ida_name.set_name(address, \"new_name\")                                                                                                      | symbol = code_unit.getPrimarySymbol(); symbol.setName(\"new_name\", symbol.getSource())                                                            |        \n| line.size                                                                               | ida_bytes.get_item_size(address)                                                                                                            | code_unit.getLength()                                                                                                                            |\n| line.type                                                                               | ida_bytes.get_flags(address)                                                                                                                | code_unit.getClass()<br>code_unit.getDataType().getName()                                                                                        |\n| line.type = LineType.dword                                                              | idc.create_dword(address)                                                                                                                   | createDWord(address)                                                                                                                             |\n| line.data                                                                               | ida_bytes.get_bytes(address, ida_bytes.get_item_size(address))                                                                              | code_unit.getBytes()                                                                                                                             |\n| line.data = b\"new data\"                                                                 | ida_bytes.patch_bytes(address, b\"new data\")                                                                                                 | setBytes(code_unit.getAddress(), b\"new data\")                                                                                                    |\n| line.get_comment()<br>dis.get_comment(address)                                          | ida_bytes.get_cmt(address, 0)                                                                                                               | code_unit.getComment(0)                                                                                                                          |\n| line.set_comment(\"new comment\")                                                         | ida_bytes.set_cmt(address, \"new comment\", 0)                                                                                                | code_unit.setComment(0, \"new comment\")                                                                                                           |\n| line.next<br>dis.next_line_address(address)                                             | idc.next_head(address)                                                                                                                      | currentProgram.getListing().getCodeUnitAfter(code_unit.getAddress())                                                                             |\n| line.prev<br>dis.prev_line_address(address)                                             | idc.prev_head(address)                                                                                                                      | currentProgram.getListing().getCodeUnitBefore(code_unit.getAddress())                                                                            |\n| line.undefine()                                                                         | ida_bytes.del_items(address)                                                                                                                | clearListing(code_unit.getAddress())                                                                                                             |\n| line.value                                                                              | ida_bytes.get_wide_byte(address)<br>ida_bytes.get_wide_word(address)<br>*etc.*                                                              | code_unit.getValue()                                                                                                                             |\n| line.value = new_value                                                                  | ida_bytes.patch_byte(address, new_value)<br>ida_bytes.patch_word(address, new_value)<br>ida_bytes.patch_dword(address, new_value)<br>*etc.* | setByte(code_unit.getAddress(), new_value)<br>setShort(code_unit.getAddress(), new_value)<br>setInt(code_unit.getAddress(), new_value)<br>*etc.* |\n| data_type = dis.get_data_type(\"dword\")                                                  | data_type = ida_typeinf.tinfo_t(); data_type.get_named_type(ida_typeinf.get_idati(), \"dword\")                                               | data_type = DataTypeParser(None, DataTypeParser.AllowedDataTypes.valueOf(\"ALL\")).parse(\"dword\")                                                  |\n| data_type.name                                                                          | *N/A*                                                                                                                                       | data_type.getName()                                                                                                                              |\n| data_type.size                                                                          | ida_bytes.get_data_elsize(address, ida_bytes.get_flags(address) & ida_bytes.DT_TYPE)                                                        | data_type.getLength()                                                                                                                            |\n\n\n### Cross-References\n| Dragodis*                                                                                                          | IDA                                                                                                            | Ghidra                                                                                                                                   | \n|--------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| dis.references_from(address)<br>dis.get_line(address).references_from<br>dis.get_function(address).references_from | idautils.XrefsFrom(address)                                                                                    | getReferencesFrom(toAddr(address))                                                                                                       |\n| dis.references_to(address)<br>dis.get_line(address).references_to<br>dis.get_function(address).references_to       | idautils.XrefsTo(address)                                                                                      | getReferencesTo(toAddr(address))                                                                                                         |\n| ref.from_address                                                                                                   | ref.frm                                                                                                        | ref.getFromAddress()                                                                                                                     |\n| ref.to_address                                                                                                     | ref.to                                                                                                         | ref.getToAddress()                                                                                                                       |\n| ref.type                                                                                                           | ref.type                                                                                                       | ref.getReferenceType()                                                                                                                   |\n| ref.is_code                                                                                                        | ref.iscode                                                                                                     | not ref.getReferenceType().isData()                                                                                                      |\n| ref.is_data                                                                                                        | not ref.iscode                                                                                                 | ref.getReferenceType().isData()                                                                                                          |\n| dis.create_reference(from_address, to_address, dragodis.ReferenceType.*)                                           | ida_xref.add_cref(from_address, to_address, idc.fl_*)<br>ida_xref.add_dref(from_address, to_address, idc.dr_*) | currentProgram.getReferenceManager().addMemoryReference(toAddr(from_address), toAddr(to_address), RefType.*, SourceType.USER_DEFINED, 0) |\n\n\n### Imports/Exports\n| Dragodis*             | IDA                                                                                          | Ghidra                                                          | \n|-----------------------|----------------------------------------------------------------------------------------------|-----------------------------------------------------------------|\n| dis.imports           | \\[ida_nalt.enum_import_names(i, callback) for i in range(ida_nalt.get_import_module_qty())\\] | currentProgram.getSymbolTable().getExternalSymbols()            |\n| dis.exports           | \\[ida_entry.get_entry_ordinal(i) for i in range(ida_entry.get_entry_qty())\\]                 | currentProgram.getSymbolTable().getExternalEntryPointIterator() |\n| import_.address       | *returned in callback*                                                                       | symbol.getAddress()                                             |\n| import_.name          | *returned in callback*                                                                       | symbol.getName()                                                |\n| import_.namespace     | ida_nalt.get_import_module_name(i)                                                           | symbol.getParentSymbol().getName()                              |\n| import_.references_to | idautils.XrefsTo(address)                                                                    | symbol.getReferences()                                          |\n| export.address        | ida_entry.get_entry(ordinal)                                                                 | symbol.getAddress()                                             |\n| export.name           | ida_entry.get_entry_name(ordinal)                                                            | symbol.getName()                                                |\n| export.references_to  | idautils.XrefsTo(ida_entry.get_entry(ordinal))                                               | symbol.getReferences()                                          |\n\n\n### Functions\n| Dragodis*                                             | IDA                                                                                                                                                        | Ghidra                                                                           | \n|-------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|\n| dis.functions()                                       | idautils.Functions()                                                                                                                                       | currentProgram.getListing().getFunctions(True)                                   |\n| func = dis.get_function(address)                      | func = ida_funcs.get_func(address)                                                                                                                         | func = getFunctionContaining(toAddr(address))                                    |\n| func.start                                            | func.start_ea                                                                                                                                              | func.getEntryPoint()                                                             |\n| func.end                                              | func.end_ea                                                                                                                                                | func.getBody().getMaxAddress()                                                   |\n| func.name<br>dis.get_name(address)                    | ida_funcs.get_func_name(address)                                                                                                                           | func.getName()                                                                   |\n| func.name = \"new_name\"                                | ida_name.set_name(address, \"new_name\")                                                                                                                     | func.setName(\"new_name\", SourceType.USER_DEFINED)                                |\n| func.get_comment()                                    | ida_funcs.get_func_cmt(func, 0)                                                                                                                            | func.getComment()                                                                |\n| func.set_comment(\"new comment\")                       | ida_funcs.set_func_cmt(func, \"new comment\", 0)                                                                                                             | func.setComment(\"new comment\")                                                   |\n| dis.get_flowchart(address)<br>func.flowchart          | ida_gdl.FlowChart(func)                                                                                                                                    | BasicBlockModel(currentProgram).getCodeBlocksContaining(func.getBody(), monitor) |\n| func.stack_frame                                      | ida_frame.get_frame(func)                                                                                                                                  | func.getStackFrame()                                                             |\n| dis.get_function_signature(address)<br>func.signature | tif = ida_typeinf.tinfo_t()<br>ida_nalt.get_tinfo(tif, address)<br>func_type_data = ida_typeinf.func_type_data_t()<br>tif.get_func_details(func_type_data) | func.getSignature()                                                              |\n\n### Instructions\n| Dragodis*                                  | IDA                                                       | Ghidra                                                                                               | \n|--------------------------------------------|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| insn = dis.get_instruction(address)        | insn = ida_ua.insn_t(); ida_ua.decode_insn(insn, address) | insn = currentProgram.getListing().getCodeUnitAt(toAddr(address))                                    |\n| insn.is_call                               | ida_idp.is_call_insn(insn)                                | insn.getFlowType().isCall()                                                                          |\n| insn.is_jump                               | *complex: see source code*                                | insn.getFlowType().isJump()                                                                          |\n| insn.is_return                             | ida_idp.is_ret_insn(insn)                                 | insn.getFlowType().isTerminal()                                                                      |\n| insn.mnemonic<br>dis.get_mnemonic(address) | ida_ua.ua_mnem(address)                                   | insn.getMnemonicString()                                                                             |\n| insn.text                                  | idc.GetDisasm(address)                                    | str(insn)                                                                                            |\n| insn.operands                              | insn.ops                                                  | *N/A: See operands section*                                                                          |\n| insn.stack_depth                           | idc.get_spd(address)                                      | CallDepthChangeInfo(currentProgram.getListing().getFunctionContaining(insn.getAddress())).getDepth() |\n| insn.stack_delta                           | idc.get_sp_delta(address)                                 | *complex: see source code*                                                                           |\n\n### Operands\n\n*`insn` pulled as described above*\n\n| Dragodis*                                                                     | IDA                                                                 | Ghidra                        | \n|-------------------------------------------------------------------------------|---------------------------------------------------------------------|-------------------------------|\n| operand = dis.get_operand(address, index)<br>operand = insn.operands\\[index\\] | operand = insn.ops\\[index\\]                                         | *N/A*                         |\n| operand.type<br>dis.get_operand_type(address, index)                          | idc.get_operand_type(address, index)                                | insn.getOperandType(index)    |\n| operand.width                                                                 | ida_ua.get_dtype_size(operand.dtype)                                | *complex: see source code*    |\n| operand.value<br>dis.get_operand_value(address, index)                        | *(depends on type)*<br>operand.addr<br>operand.reg<br>operand.value | insn.getOpObjects(index)      |\n| *(phrase operand)*<br>operand.value.base                                      | operand.reg<br>ida_intel.x86_base_reg(insn, operand)                | insn.getOpObjects(index)\\[0\\] |\n| *(phrase operand)*<br>operand.value.index                                     | ida_intel.x86_index_reg(insn, operand)                              | insn.getOpObjects(index)\\[1\\] |\n| *(phrase operand)*<br>operand.value.scale                                     | 1 << ida_intel.sib_scale(operand)                                   | insn.getOpObjects(index)\\[2\\] |\n| *(phrase operand)*<br>operand.value.offset                                    | operand.addr<br>idc.get_operand_value(address, index)               | insn.getOpObjects(index)\\[3\\] |\n| *(register operand)*<br>operand.value                                         | operand.reg<br>idc.get_operand_value(address, index)                | insn.getOpObjects(index)\\[0\\] |\n| *(immediate operand)*<br>operand.value                                        | operand.value<br>idc.get_operand_value(address, index)              | insn.getOpObjects(index)\\[0\\] |\n| *(memory reference operand)*<br>operand.value                                 | operand.addr<br>idc.get_operand_value(address, index)               | insn.getOpObjects(index)\\[0\\] |\n\n\n### Registers\n| Dragodis*                          | IDA                                                                      | Ghidra                                       | \n|------------------------------------|--------------------------------------------------------------------------|----------------------------------------------|\n| register = dis.get_register(\"eax\") | register = ida_idp.reg_info_t(); ida_idp.parse_reg_name(register, \"eax\") | register = currentProgram.getRegister(\"eax\") |\n| register.name                      | ida_idp.get_reg_name(register.reg, register.size)                        | register.getName()                           |\n| register.bit_width                 | register.size * 8                                                        | register.getBitLength()                      |\n\n\n### Segments\n| Dragodis*                                                             | IDA                                                                                   | Ghidra                                                                                                                          | \n|-----------------------------------------------------------------------|---------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| dis.segments                                                          | \\[ida_segment.getnseg(n) for n in range(ida_segment.get_segm_qty())\\]                 | currentProgram.getMemory().getBlocks()                                                                                          |\n| segment = dis.get_segment(name)<br>segment = dis.get_segment(address) | segment = ida_segment.get_segm_by_name(name)<br>segment = ida_segment.getseg(address) | memory_block = currentProgram.getMemory().getBlock(name)<br>memory_block = currentProgram.getMemory().getBlock(toAddr(address)) |\n| segment.name                                                          | ida_segment.get_segm_name(segment)                                                    | memory_block.getName()                                                                                                          |\n| segment.start                                                         | segment.start_ea                                                                      | memory_block.getStart()                                                                                                         |\n| segment.end                                                           | segment.end_ea                                                                        | memory_block.getEnd()                                                                                                           |\n| segment.initialized                                                   | ida_bytes.is_loaded(segment.start_ea)                                                 | memory_block.isInitialized()                                                                                                    |\n| segment.bit_size                                                      | segment.abits()                                                                       | memory_block.getStart().getSize()                                                                                               |\n| segment.permissions                                                   | segment.perm                                                                          | memory_block.isRead()<br>memory_block.isWrite()<br>memory_block.isExecute()<br>memory_block.isVolatile()                        |\n| dis.create_segment(\".new_seg\", 0x1234, 256)                           | ida_segment.add_segm(0, 0x1234, 0x1334, \".new_seg\", \"XTRN\")                           | currentProgram.getMemory().createUninitializedBlock(\".new_seg\", toAddr(0x1234), 256, False)                                     |\n\n\n### Strings\n| Dragodis*                 | IDA                                                               | Ghidra                                |\n|---------------------------|-------------------------------------------------------------------|---------------------------------------|\n| dis.strings(min_length=5) | finder = idautils.Strings(); finder.setup(minlen=5); list(finder) | findStrings(None, 5, 1, False, True)  |\n\n\n\\* `dis` in the dragodis column represents the open disassembler object retrieved from `dragodis.open_program()`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dod-cyber-crime-center/dragodis",
    "keywords": "malware,ida,idapro,ghidra,disassembler",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dragodis",
    "package_url": "https://pypi.org/project/dragodis/",
    "platform": null,
    "project_url": "https://pypi.org/project/dragodis/",
    "project_urls": {
      "Homepage": "https://github.com/dod-cyber-crime-center/dragodis"
    },
    "release_url": "https://pypi.org/project/dragodis/0.7.2/",
    "requires_dist": [
      "bytesparse",
      "capstone",
      "rpyc",
      "pyhidra (>=0.4.0)",
      "pefile",
      "pyelftools",
      "pywin32 ; platform_system == \"Windows\"",
      "pytest (>=3.0.0) ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "A universal interface for running scripts under multiple disassemblers.",
    "version": "0.7.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17111296,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "793254ab6749c4d981e25e3ea7a386e329277b20df8391f742dc80295498a735",
          "md5": "c5f0536ea188a24bb7d2b62e9066814e",
          "sha256": "23c996b019ec29f4615071b009932bd5a38abb4fda5ffe5baf7801968c8c2cce"
        },
        "downloads": -1,
        "filename": "Dragodis-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5f0536ea188a24bb7d2b62e9066814e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14354,
        "upload_time": "2020-12-09T18:04:34",
        "upload_time_iso_8601": "2020-12-09T18:04:34.689307Z",
        "url": "https://files.pythonhosted.org/packages/79/32/54ab6749c4d981e25e3ea7a386e329277b20df8391f742dc80295498a735/Dragodis-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54638a31add4927ef0fdaf51675aaec860b5e52e3b7675f2eeb2b04955ac92c6",
          "md5": "c216104590c282178882a3c284201bbf",
          "sha256": "902389f7280453a39e3df07d1b5a0db495d3fba4b4fbc0089e927f6856026f9a"
        },
        "downloads": -1,
        "filename": "Dragodis-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c216104590c282178882a3c284201bbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11743,
        "upload_time": "2020-12-09T18:04:35",
        "upload_time_iso_8601": "2020-12-09T18:04:35.757760Z",
        "url": "https://files.pythonhosted.org/packages/54/63/8a31add4927ef0fdaf51675aaec860b5e52e3b7675f2eeb2b04955ac92c6/Dragodis-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dee2d92f260af7774aa790be9b7c7887109f3be79544bfb9174135e213c22d01",
          "md5": "c9ba3b118b6f91669ae065e5765af786",
          "sha256": "dfb61a77346479a2dfad241aecc45e5c57594079da3fad5bfc33c5f7dd516307"
        },
        "downloads": -1,
        "filename": "dragodis-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9ba3b118b6f91669ae065e5765af786",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 109090,
        "upload_time": "2022-02-24T21:49:29",
        "upload_time_iso_8601": "2022-02-24T21:49:29.951525Z",
        "url": "https://files.pythonhosted.org/packages/de/e2/d92f260af7774aa790be9b7c7887109f3be79544bfb9174135e213c22d01/dragodis-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50d73c883a6a353126bc747fd200095718f7dfb6dc86c511b3c4378a97abeebd",
          "md5": "00021ae407a861385a4ee1939d2607fd",
          "sha256": "7d967af29e07f3aedb7da3c375758a811087caaec4d32d8402fa92d5097c69a2"
        },
        "downloads": -1,
        "filename": "dragodis-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00021ae407a861385a4ee1939d2607fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 71639,
        "upload_time": "2022-02-24T21:49:31",
        "upload_time_iso_8601": "2022-02-24T21:49:31.801665Z",
        "url": "https://files.pythonhosted.org/packages/50/d7/3c883a6a353126bc747fd200095718f7dfb6dc86c511b3c4378a97abeebd/dragodis-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afec669425b9c753833f045ce8ef3824d60f833e177d0fd9852b938dfa48236a",
          "md5": "1b5e3857774e6695e66f58e62d7f610f",
          "sha256": "cf7435cc810a348378b5f4c3bca3d5b738e423fd9c6d9a79ceaaa5d51940951a"
        },
        "downloads": -1,
        "filename": "dragodis-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b5e3857774e6695e66f58e62d7f610f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 112958,
        "upload_time": "2022-06-07T19:16:24",
        "upload_time_iso_8601": "2022-06-07T19:16:24.459907Z",
        "url": "https://files.pythonhosted.org/packages/af/ec/669425b9c753833f045ce8ef3824d60f833e177d0fd9852b938dfa48236a/dragodis-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be2550b0d1078226ffae17e216beb9b4ffafcf512101588e526faeb8ab1eb0bc",
          "md5": "6581c717ce61d3196ee0dafcef1148ea",
          "sha256": "63c76437bf141514f0242623d39e2b6e164d208b1281c6c98c4ec31528da43d9"
        },
        "downloads": -1,
        "filename": "dragodis-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6581c717ce61d3196ee0dafcef1148ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 77448,
        "upload_time": "2022-06-07T19:16:26",
        "upload_time_iso_8601": "2022-06-07T19:16:26.145201Z",
        "url": "https://files.pythonhosted.org/packages/be/25/50b0d1078226ffae17e216beb9b4ffafcf512101588e526faeb8ab1eb0bc/dragodis-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b519313cd11e9696c29a65348db81592edfd68f514f9c67970886e02efb23731",
          "md5": "882694670dc4af3b61ddcbac923b6913",
          "sha256": "c69cf5739995a6561e982871cc564370c724f01a589bb585a63c3506010f7fd3"
        },
        "downloads": -1,
        "filename": "dragodis-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "882694670dc4af3b61ddcbac923b6913",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 114036,
        "upload_time": "2022-06-27T18:25:00",
        "upload_time_iso_8601": "2022-06-27T18:25:00.588214Z",
        "url": "https://files.pythonhosted.org/packages/b5/19/313cd11e9696c29a65348db81592edfd68f514f9c67970886e02efb23731/dragodis-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d92e67206f3b960417f5632128875743810f3d1bea2adc6c8a0e3e45813aa284",
          "md5": "b6ea7c255f80b34a548317a988698321",
          "sha256": "2ea8f0e4cfd520c940795fff0ee4adb74575c44a38e6f30a12f988d7bf7dbecf"
        },
        "downloads": -1,
        "filename": "dragodis-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6ea7c255f80b34a548317a988698321",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 78246,
        "upload_time": "2022-06-27T18:25:02",
        "upload_time_iso_8601": "2022-06-27T18:25:02.533232Z",
        "url": "https://files.pythonhosted.org/packages/d9/2e/67206f3b960417f5632128875743810f3d1bea2adc6c8a0e3e45813aa284/dragodis-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "149ea5ccbc47aa5fa4e48155e08a3dda61dfc0a80633d044f22f8cc7d31b9966",
          "md5": "aba1bec2483a8af91a2e15812a39d534",
          "sha256": "32fd9111afe450fbf85fd918cf0ba38e9dd62a4cac1a6597df1a479b532c8abc"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aba1bec2483a8af91a2e15812a39d534",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 117409,
        "upload_time": "2022-08-10T20:05:28",
        "upload_time_iso_8601": "2022-08-10T20:05:28.657757Z",
        "url": "https://files.pythonhosted.org/packages/14/9e/a5ccbc47aa5fa4e48155e08a3dda61dfc0a80633d044f22f8cc7d31b9966/dragodis-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07f2700f33e8d45f7b5e15a790f2a9ff579ba496ce3081024a919d5ca1fc751a",
          "md5": "51d2b85b6648269a07403f1514007e34",
          "sha256": "08a2ec3bf7610f340e3014a6ccc50809f3d03ec7be3426240c1325d02e2ee9a4"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51d2b85b6648269a07403f1514007e34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 80521,
        "upload_time": "2022-08-10T20:05:30",
        "upload_time_iso_8601": "2022-08-10T20:05:30.257411Z",
        "url": "https://files.pythonhosted.org/packages/07/f2/700f33e8d45f7b5e15a790f2a9ff579ba496ce3081024a919d5ca1fc751a/dragodis-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "293ae5a8babc0af677ab385276b1087cd826c812c299171e5601a2bfb3af2665",
          "md5": "ee6451a4ec08fbb8f9217ef39a41899f",
          "sha256": "6a67df1a1ad295264a591ee64d2edb243d3510074f0edb8d51a4f38c64907314"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee6451a4ec08fbb8f9217ef39a41899f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 117467,
        "upload_time": "2022-08-11T15:51:35",
        "upload_time_iso_8601": "2022-08-11T15:51:35.694180Z",
        "url": "https://files.pythonhosted.org/packages/29/3a/e5a8babc0af677ab385276b1087cd826c812c299171e5601a2bfb3af2665/dragodis-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67c6cacf244da71620854f632417a9b7299a37b8aeea9fe30588a1419f1789cc",
          "md5": "9246667a3193a5e19b2c0fa4b857e2c2",
          "sha256": "41da256b9b4d0614be1e8163c6f9ac17db8bf77eb3813e04efdbca4415539b9a"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9246667a3193a5e19b2c0fa4b857e2c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 80595,
        "upload_time": "2022-08-11T15:51:37",
        "upload_time_iso_8601": "2022-08-11T15:51:37.146921Z",
        "url": "https://files.pythonhosted.org/packages/67/c6/cacf244da71620854f632417a9b7299a37b8aeea9fe30588a1419f1789cc/dragodis-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4064580ea9c01f4d93297eab1c1ed2577f294cd148646ade100b3745d93d210b",
          "md5": "87fa2f55626bec7a8b3819e17cf86b48",
          "sha256": "749a83f15b411377058c58e094af9a148a84be51822a123787fdf4a135957939"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87fa2f55626bec7a8b3819e17cf86b48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 117758,
        "upload_time": "2022-09-16T12:23:31",
        "upload_time_iso_8601": "2022-09-16T12:23:31.342179Z",
        "url": "https://files.pythonhosted.org/packages/40/64/580ea9c01f4d93297eab1c1ed2577f294cd148646ade100b3745d93d210b/dragodis-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06293c0389d0f8209a1901ae18b82c63140925586fc3b0081f95d81c22b8aac5",
          "md5": "068cc8bb369f58603448683be2bc0d84",
          "sha256": "dd195962d69f5185a01de51f8e9fe0cfe27f027269a3abcae92dcde7242e3e36"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "068cc8bb369f58603448683be2bc0d84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 80867,
        "upload_time": "2022-09-16T12:23:33",
        "upload_time_iso_8601": "2022-09-16T12:23:33.824918Z",
        "url": "https://files.pythonhosted.org/packages/06/29/3c0389d0f8209a1901ae18b82c63140925586fc3b0081f95d81c22b8aac5/dragodis-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8c87509c75c2f230f840713c78e3e04fa88111dc8aec8de95bbe7fb19f2cf73",
          "md5": "2ed5be6a005a9d73595754cf14ffbca0",
          "sha256": "24cc71df463ee34b458936f63432d9d2e76366fd0981c801656671161bd451e2"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ed5be6a005a9d73595754cf14ffbca0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 121925,
        "upload_time": "2022-10-05T17:38:52",
        "upload_time_iso_8601": "2022-10-05T17:38:52.099696Z",
        "url": "https://files.pythonhosted.org/packages/b8/c8/7509c75c2f230f840713c78e3e04fa88111dc8aec8de95bbe7fb19f2cf73/dragodis-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a5e1d3f19a56674b21d68ed19149a9017b78dd229518485a3a9502518f22ca7",
          "md5": "6df2b589c758ed83ad989327ee6739a9",
          "sha256": "bb11452700c00c3008dda650211cd2e0628de68759cb02c06b96b716aedfa6db"
        },
        "downloads": -1,
        "filename": "dragodis-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6df2b589c758ed83ad989327ee6739a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 94940,
        "upload_time": "2022-10-05T17:38:53",
        "upload_time_iso_8601": "2022-10-05T17:38:53.693889Z",
        "url": "https://files.pythonhosted.org/packages/7a/5e/1d3f19a56674b21d68ed19149a9017b78dd229518485a3a9502518f22ca7/dragodis-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd258eda8fdb40ea67cfb3ac2cfa921410350c7bd8c0dffba93cab2ccfd70254",
          "md5": "581cb0e413afd4c1d81806415e249419",
          "sha256": "e00df44f054f7a1fca0a16563b9433f3639c7cd41f3858dd02e4646ba6ab8885"
        },
        "downloads": -1,
        "filename": "dragodis-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "581cb0e413afd4c1d81806415e249419",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 112125,
        "upload_time": "2022-12-15T19:27:45",
        "upload_time_iso_8601": "2022-12-15T19:27:45.963605Z",
        "url": "https://files.pythonhosted.org/packages/bd/25/8eda8fdb40ea67cfb3ac2cfa921410350c7bd8c0dffba93cab2ccfd70254/dragodis-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5ef6af0d6d59959e87499750188005576df68678bdb1339272c119c6c3c1a99",
          "md5": "6df12fd7e1686d2f2e7f5a62b9342d5a",
          "sha256": "e33aca967b57ae080a591e4a15800966dbba8466d613494a0881133744fa01f7"
        },
        "downloads": -1,
        "filename": "dragodis-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6df12fd7e1686d2f2e7f5a62b9342d5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 94774,
        "upload_time": "2022-12-15T19:27:47",
        "upload_time_iso_8601": "2022-12-15T19:27:47.882824Z",
        "url": "https://files.pythonhosted.org/packages/a5/ef/6af0d6d59959e87499750188005576df68678bdb1339272c119c6c3c1a99/dragodis-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6c87d60ad421e0a3468f10c325e05749b6c2a9a363de05794335478fb989562",
          "md5": "720b0c15d11ff49440ecfa39dbb3facc",
          "sha256": "e8cf4c8427fb3270db48d98244bc66db7a31404565a4a7a01bf3cb84ccae5eb6"
        },
        "downloads": -1,
        "filename": "dragodis-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "720b0c15d11ff49440ecfa39dbb3facc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 123287,
        "upload_time": "2023-02-03T02:28:14",
        "upload_time_iso_8601": "2023-02-03T02:28:14.269764Z",
        "url": "https://files.pythonhosted.org/packages/f6/c8/7d60ad421e0a3468f10c325e05749b6c2a9a363de05794335478fb989562/dragodis-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ea8495c4668a99e83f60b45d0fedd950e9bcdbc55218195dcc249806cdc6f9",
          "md5": "e000a80caf25678aa7473b250b2c6747",
          "sha256": "168a2c1f75f63a397d53dc257ebbe8db3576250fa9caeb8ba75255101790bf27"
        },
        "downloads": -1,
        "filename": "dragodis-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e000a80caf25678aa7473b250b2c6747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 106142,
        "upload_time": "2023-02-03T02:28:16",
        "upload_time_iso_8601": "2023-02-03T02:28:16.006410Z",
        "url": "https://files.pythonhosted.org/packages/a2/ea/8495c4668a99e83f60b45d0fedd950e9bcdbc55218195dcc249806cdc6f9/dragodis-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe390d87500fcbc949c01d5a091ff97b6583ed6067510817b399d29440e49ffc",
          "md5": "056a35a8ab3e26de65db1d93692a0cc0",
          "sha256": "f2cc34520dc5093327729f0dbbb33df06d5663dccbccbacdd32de17df3f5e53b"
        },
        "downloads": -1,
        "filename": "dragodis-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "056a35a8ab3e26de65db1d93692a0cc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 123328,
        "upload_time": "2023-02-07T15:05:47",
        "upload_time_iso_8601": "2023-02-07T15:05:47.363920Z",
        "url": "https://files.pythonhosted.org/packages/fe/39/0d87500fcbc949c01d5a091ff97b6583ed6067510817b399d29440e49ffc/dragodis-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65f9fc532d67598b5ddf75a466da5d7fc7a336146620e8e98764b2f14af3af68",
          "md5": "e68f817232c8775139364ab31059cc40",
          "sha256": "6e14c69f903941b3eb26528f8818c2117de360d648cf8b9567f22e716912421f"
        },
        "downloads": -1,
        "filename": "dragodis-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e68f817232c8775139364ab31059cc40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 106184,
        "upload_time": "2023-02-07T15:05:48",
        "upload_time_iso_8601": "2023-02-07T15:05:48.965768Z",
        "url": "https://files.pythonhosted.org/packages/65/f9/fc532d67598b5ddf75a466da5d7fc7a336146620e8e98764b2f14af3af68/dragodis-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fb6982aa6d64e832f56ac31cc950ee25bb79f27f582f9d5e4395e9810bb226a",
          "md5": "6b50d837b6c146e200602551177f78a7",
          "sha256": "bcb60fbf6a60da88a68d3a25f67334b287f58b494dd08e4d8d9f854c7b0cdc2a"
        },
        "downloads": -1,
        "filename": "dragodis-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b50d837b6c146e200602551177f78a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 123323,
        "upload_time": "2023-03-01T13:03:31",
        "upload_time_iso_8601": "2023-03-01T13:03:31.108319Z",
        "url": "https://files.pythonhosted.org/packages/3f/b6/982aa6d64e832f56ac31cc950ee25bb79f27f582f9d5e4395e9810bb226a/dragodis-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b4a55baf24d87b1de2a03d2a3bc293296f9ae3c60d3f82a54dab38a40e0ba0",
          "md5": "4dd1ffcf170b17c3858fa95b91f0fd37",
          "sha256": "44a3ee60c49127c1e09c39918967e9f964eca80a2067e819280d3d15ea2387a5"
        },
        "downloads": -1,
        "filename": "dragodis-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4dd1ffcf170b17c3858fa95b91f0fd37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 124238,
        "upload_time": "2023-03-01T13:03:32",
        "upload_time_iso_8601": "2023-03-01T13:03:32.459480Z",
        "url": "https://files.pythonhosted.org/packages/e5/b4/a55baf24d87b1de2a03d2a3bc293296f9ae3c60d3f82a54dab38a40e0ba0/dragodis-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3fb6982aa6d64e832f56ac31cc950ee25bb79f27f582f9d5e4395e9810bb226a",
        "md5": "6b50d837b6c146e200602551177f78a7",
        "sha256": "bcb60fbf6a60da88a68d3a25f67334b287f58b494dd08e4d8d9f854c7b0cdc2a"
      },
      "downloads": -1,
      "filename": "dragodis-0.7.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b50d837b6c146e200602551177f78a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 123323,
      "upload_time": "2023-03-01T13:03:31",
      "upload_time_iso_8601": "2023-03-01T13:03:31.108319Z",
      "url": "https://files.pythonhosted.org/packages/3f/b6/982aa6d64e832f56ac31cc950ee25bb79f27f582f9d5e4395e9810bb226a/dragodis-0.7.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5b4a55baf24d87b1de2a03d2a3bc293296f9ae3c60d3f82a54dab38a40e0ba0",
        "md5": "4dd1ffcf170b17c3858fa95b91f0fd37",
        "sha256": "44a3ee60c49127c1e09c39918967e9f964eca80a2067e819280d3d15ea2387a5"
      },
      "downloads": -1,
      "filename": "dragodis-0.7.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4dd1ffcf170b17c3858fa95b91f0fd37",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 124238,
      "upload_time": "2023-03-01T13:03:32",
      "upload_time_iso_8601": "2023-03-01T13:03:32.459480Z",
      "url": "https://files.pythonhosted.org/packages/e5/b4/a55baf24d87b1de2a03d2a3bc293296f9ae3c60d3f82a54dab38a40e0ba0/dragodis-0.7.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}