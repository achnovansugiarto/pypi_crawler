{
  "info": {
    "author": "Hao Li",
    "author_email": "lih627@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent"
    ],
    "description": "# auto-crop\n\nImage auto crop toolbox. Supports image cropping with any aspect ratio, based on [face-detection](https://pypi.org/project/face-detection/) and [GAIC: Grid-Anchor-based-Image-Cropping-Pytorch](https://github.com/lld533/Grid-Anchor-based-Image-Cropping-Pytorch). \n\n**This project only supports python3 and pytorch > 1.0**\n\n## Contents\n\n- [Setup](#Setup)\n- [Demo](#Demo)\n- [Different from GAIC](#Different-from-GAIC)\n- [Reference](#Reference)\n- [Citation](#Citation)\n\n## Setup\n\nYou can choose to install via pypi or install it via source code.\n\n### From Pypi\n\n**auto-crop** can be installed directly through pypi\n\n```shell\npip install auto-crop\n```\n\n### From Source Code\n\n```shell\n# colone repository\ngit clone https://github.com/lih627/autocrop.git\n# install autocrop\ncd /path/to/autocrop\npython setup.py install\n```\n\n**Note** : If there is errors when compiling CPP and CUDA extensions, you can choose to compile CPP/CUDA api separately.\n\n```shell\ncd autocrop/model/rod_align\npython setup.py install\ncd ../roi_aligm\npython setup.py install\n```\n\n## Demo\n\nHere is a simple demo. From [`demo.py`](./demo.py)\n\nFirst, build a cropper. Cropper contains [GAIC pretrained models](https://github.com/lld533/Grid-Anchor-based-Image-Cropping-Pytorch/tree/master/pretrained_model), and you can select load a [DSFD Face-Detecor](https://pypi.org/project/face-detection/) or not.\n\n```python\nfrom autocrop import cropper\nautocropper = cropper.AutoCropper(model='mobilenetv2', # 'mobilenetv2' or 'shufflenetv2'\n                                  cuda=True, # if GUDA is avaliable and True, Inference on GPU\n                                  use_face_detector=True) # Use Face Detector to filter RoIs\n```\n\nThen, use cropper to crop RGB formate image. The selectable parameters are the number of cropping results, the aspect ration and whether to used face detection results to assist in generating RoIs. `crop_ret` is a list with size`topK x 4` ,  Each cropping result is encoded as `[xmin, ymin, xmax, ymax]` in pixel coordinate system.\n\n```python\nimport cv2\n# BGR to RGB\nimg = cv2.imread('imgs/demo.jpg')\nimg_ = img[:, :, (2, 1, 0)]\n# get crop result\ncrop_ret = autocropper.crop(img_,\n                            topK=1,\n                            crop_height=1,\n                            crop_width=1,\n                            filter_face=True, # True: Crop result will not contain half face\n                            single_face_center=True) # True: face in the crop result's width center\n```\n\nYou can visualize the cropping results\n\n```python\nfor bbox in crop_ret:\n    r, g, b = int(random.random() * 255), int(random.random() * 255), int(random.random() * 255)\n    cv2.rectangle(img, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (b, g, r))\ncv2.imshow('ret', img)\ncv2.waitKey()\n```\n\n\n\n## Different from GAIC\n\nThis project is mostly based on GAIC, and the modules are listed as follows:\n\n<img src=\"https://github.com/lih627/autocrop/blob/master/misc/Pipeline.png?raw=true\" alt=\"pipeline-w\" style=\"zoom:50%;\" />\n\nIt is slightly different from GAIC in practice, as shown below:\n\n1. **We can specify any crop ratio**\n\nGAIC supports RoIs with uncertain aspect ratios and several RoIs with fixed aspect ratios(`1:1, 4:3, 16:9`). In practical applications, image cropping needs to select the cropping area according to the fixed aspect ratio. I modified the code of the bboxes generation part. For RoIs evaluation, I used the GAIC pre-trained model.\n\n2. **If there is only half a face in the bounding box, filter out the bounding box**\n\nAt the same time, in practical applications, when the distribution of people in the picture is not fixed, for example, when two people stand on the left and right sides of the picture, the RoI selected by GAIC may tear the human body. We adopt the face detection method to filter out some non-conformities. The required RoI will be evaluated after.\n\nThere is a comparison:\n\n<img src=\"https://github.com/lih627/autocrop/blob/master/misc/face_filter.jpg?raw=true\" alt=\"comparison with face detection - w150\" style=\"zoom:50%;\" />\n\n3. **When the bounding box has only one face, the face should be in the middle of the box as much as possible**\n\nWe have added additional options when generating anchor boxes. If there is only one face in a RoI, use the RoI with the face in the middle of the RoI's width direction. see `autocrop/cropper.py` for details.\n\nThere is a comparison:\n\n<img src=\"https://github.com/lih627/autocrop/blob/master/misc/face_filter2.jpg?raw=true\" alt=\"comparison with face detection - w150\" style=\"zoom:50%;\" />\n\n## Reference\n\n1. [GAIC: Grid-Anchor-based-Image-Cropping-Pytorch](https://github.com/lld533/Grid-Anchor-based-Image-Cropping-Pytorch) MIT License\n2. [DSFD-Pytorch-Inference](https://github.com/hukkelas/DSFD-Pytorch-Inference) [Apache-2.0 License](https://github.com/hukkelas/DSFD-Pytorch-Inference/blob/master/LICENSE)\n\n## Citation\n\nIf you find this code useful, remember to cite the original authors:\n\nFor GAIC:\n\n```\n@inproceedings{zhang2019deep,\n  title={Reliable and Efficient Image Cropping: A Grid Anchor based Approach},\n  author={Zeng, Hui, Li, Lidaï¼Œ Cao, Zisheng and Zhang, Lei},\n  booktitle={IEEE Conference on Computer Vision and Pattern Recognition},\n  year={2019}\n}\n```\n\nFor DSFD:\n\n```\n@inproceedings{li2018dsfd,\n  title={DSFD: Dual Shot Face Detector},\n  author={Li, Jian and Wang, Yabiao and Wang, Changan and Tai, Ying and Qian, Jianjun and Yang, Jian and Wang, Chengjie and Li, Jilin and Huang, Feiyue},\n  booktitle={Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition},\n  year={2019}\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lih627/autocrop",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "auto-crop",
    "package_url": "https://pypi.org/project/auto-crop/",
    "platform": "",
    "project_url": "https://pypi.org/project/auto-crop/",
    "project_urls": {
      "Homepage": "https://github.com/lih627/autocrop"
    },
    "release_url": "https://pypi.org/project/auto-crop/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Smart auto cropping tool that supports any aspect ratio",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7840069,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06215734b1e8f0a99eecb20eb4b4310480f1f13da13b22675fdb5808c85e5762",
          "md5": "32c5ed5be0d74944972d2d9648f6161c",
          "sha256": "829663ad7a682bc794a67f200e3d77798bb0e9f84ca4b50180a441f6108e936f"
        },
        "downloads": -1,
        "filename": "auto_crop-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32c5ed5be0d74944972d2d9648f6161c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2594059,
        "upload_time": "2020-07-21T07:18:11",
        "upload_time_iso_8601": "2020-07-21T07:18:11.968608Z",
        "url": "https://files.pythonhosted.org/packages/06/21/5734b1e8f0a99eecb20eb4b4310480f1f13da13b22675fdb5808c85e5762/auto_crop-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bd20858c05b9fc7da47104e143a50b993ab763f477676082a22c537142ee396",
          "md5": "b88344ca2705486e54d83e7548e1458a",
          "sha256": "aef8a64b6f9246d4e571502cd6b73af296e284c4b4229f1de7f26caa3c9c5dc1"
        },
        "downloads": -1,
        "filename": "auto_crop-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b88344ca2705486e54d83e7548e1458a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 4267980,
        "upload_time": "2020-07-30T06:15:42",
        "upload_time_iso_8601": "2020-07-30T06:15:42.890565Z",
        "url": "https://files.pythonhosted.org/packages/9b/d2/0858c05b9fc7da47104e143a50b993ab763f477676082a22c537142ee396/auto_crop-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bd20858c05b9fc7da47104e143a50b993ab763f477676082a22c537142ee396",
        "md5": "b88344ca2705486e54d83e7548e1458a",
        "sha256": "aef8a64b6f9246d4e571502cd6b73af296e284c4b4229f1de7f26caa3c9c5dc1"
      },
      "downloads": -1,
      "filename": "auto_crop-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b88344ca2705486e54d83e7548e1458a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 4267980,
      "upload_time": "2020-07-30T06:15:42",
      "upload_time_iso_8601": "2020-07-30T06:15:42.890565Z",
      "url": "https://files.pythonhosted.org/packages/9b/d2/0858c05b9fc7da47104e143a50b993ab763f477676082a22c537142ee396/auto_crop-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}