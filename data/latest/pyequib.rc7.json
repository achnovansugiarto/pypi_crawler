{
  "info": {
    "author": "Ashkbiz Danehkar",
    "author_email": "ashkbiz.danehkar@students.mq.edu.au",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "======================\npyEQUIB Python Package\n======================\n\n.. image:: https://img.shields.io/pypi/v/pyequib.svg?style=flat\n    :target: https://pypi.python.org/pypi/pyequib/\n    :alt: PyPI Version\n\n.. image:: https://travis-ci.org/equib/pyEQUIB.svg?branch=master\n    :target: https://travis-ci.org/equib/pyEQUIB\n    :alt: Build Status\n\n.. image:: https://ci.appveyor.com/api/projects/status/b3gw6vgf8s0vu8nv?svg=true\n    :target: https://ci.appveyor.com/project/danehkar/pyequib\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/equib/pyEQUIB/badge.svg?branch=master\n    :target: https://coveralls.io/github/equib/pyEQUIB?branch=master\n    :alt: Coverage Status\n\n.. image:: https://img.shields.io/badge/license-GPL-blue.svg\n    :target: https://github.com/equib/pyEQUIB/blob/master/LICENSE\n    :alt: GitHub license\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pyequib.svg\n    :target: https://anaconda.org/conda-forge/pyequib\n    :alt: Anaconda Cloud\n\n.. image:: https://readthedocs.org/projects/pyequib/badge/?version=latest\n    :target: https://pyequib.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/python-2.7%2C%203.8-blue.svg\n    :alt: Support Python versions 2.7 and 3.8\n\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4287576.svg\n    :target: https://doi.org/10.5281/zenodo.4287576\n    :alt: Zenodo\n\n.. image:: http://joss.theoj.org/papers/10.21105/joss.02798/status.svg\n    :target: https://doi.org/10.21105/joss.02798\n    :alt: JOSS\n\n\nDescription\n===========\n\nThe **pyEQUIB** library is a collection of `Python <https://www.python.org/>`_ programs developed to perform plasma diagnostics and abundance analysis using emission line fluxes measured in ionzed nebulae. It uses the `AtomNeb Python Package <https://github.com/atomneb/AtomNeb-py>`_ to read collision strengths and transition probabilities for collisionally excited lines (CEL), and recombination coefficients for recombination lines (RL). This Python package can be used to determine interstellar extinctions, electron temperatures, electron densities, and ionic abundances from the measured fluxes of emission lines. It mainly contains the follwing API functions written purely in Python: \n\n* **API functions for collisionally excited lines (CEL)** have been developed based on the algorithm of the FORTRAN program `EQUIB <http://adsabs.harvard.edu/abs/2016ascl.soft03005H>`_ written in FORTRAN by `Howarth & Adams (1981) <http://adsabs.harvard.edu/abs/1981ucl..rept.....H>`_. The program EQUIB calculates atomic level populations and line emissivities in statistical equilibrium in multi-level atoms for different physical conditions of the stratification layers where the chemical elements are ionized. Using the Python implementation of the program `EQUIB <http://adsabs.harvard.edu/abs/2016ascl.soft03005H>`_, electron temperatures, electron densities, and ionic abundances are determined from the measured fluxes of collisionally excited lines.\n\n* **API functions for recombination lines (RL)** have been developed based on the algorithm of the recombination scripts by X. W. Liu and Y. Zhang included in the FORTRAN program `MOCASSIN <https://github.com/mocassin/MOCASSIN-2.0>`_. These API functiosn are used to determine ionic abundances from recombination lines for some heavy element ions.\n\n* **API functions for reddening and extinctions** have been developed according to the methods of the reddening law functions from `STSDAS IRAF Package <http://www.stsci.edu/institute/software_hardware/stsdas>`_, which are used to obtain interstellar extinctions and deredden measured fluxes based on different reddening laws.\n\n\nInstallation\n============\n\nDependent Python Packages\n-------------------------\n\n This package requires the following packages:\n\n    - `NumPy <https://numpy.org/>`_\n    - `SciPy <https://scipy.org/scipylib/>`_\n    - `AtomNeb <https://github.com/atomneb/AtomNeb-py/>`_\n\n* To get this package with the AtomNeb FITS files, you can simply use ``git`` command as follows::\n\n        git clone --recursive https://github.com/equib/pyEQUIB\n\nTo install the last version, all you should need to do is\n\n.. code-block::\n\n    $ python setup.py install\n\nTo install the stable version, you can use the preferred installer program (pip):\n\n.. code-block::\n\n    $ pip install pyequib\n\nor you can install it from the cross-platform package manager *conda*:\n\n.. code-block::\n\n    $ conda install -c conda-forge pyequib\n\nHow to Use\n==========\n\nThe Documentation of the Python functions provides in detail in the *API Documentation* (`equib.github.io/pyEQUIB/doc <https://equib.github.io/pyEQUIB/doc>`_). There are three main object units:\n\n* **Collision Unit** which have the API functions for plasma diagnostics and abundance analysis of collisionally excited lines. Here are some examples of using *Collision* Unit:\n\n    - *Temperature*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n\n        atom = 's'\n        ion = 'ii'\n        s_ii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5)\n        s_ii_omij = atomneb.read_omij(atom_omij_file, atom, ion)\n        s_ii_aij = atomneb.read_aij(atom_aij_file, atom, ion)\n\n        upper_levels='1,2,1,3/'\n        lower_levels='1,5/'\n        density = np.float64(2550)\n        line_flux_ratio=np.float64(10.753)\n        temperature = pyequib.calc_temperature(line_flux_ratio=line_flux_ratio, density=density, \n                               upper_levels=upper_levels, lower_levels=lower_levels, \n                               elj_data=s_ii_elj, omij_data=s_ii_omij, aij_data=s_ii_aij)\n        print(\"Electron Temperature:\", temperature)\n\n      which gives::\n\n        Electron Temperature:       7920.2865\n\n    - *Density*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n\n        atom = 's'\n        ion = 'ii'\n        s_ii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5)\n        s_ii_omij = atomneb.read_omij(atom_omij_file, atom, ion)\n        s_ii_aij = atomneb.read_aij(atom_aij_file, atom, ion)\n\n        upper_levels='1,2/'\n        lower_levels='1,3/'\n        temperature=np.float64(7000.0)#\n        line_flux_ratio=np.float64(1.506)#\n        density = pyequib.calc_density(line_flux_ratio=line_flux_ratio, temperature=temperature, \n                                       upper_levels=upper_levels, lower_levels=lower_levels, \n                                       elj_data=s_ii_elj, omij_data=s_ii_omij, aij_data=s_ii_aij)\n        print(\"Electron Density:\", density)\n\n      which gives::\n\n        Electron Density:       2312.6395\n\n    - *Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'h'\n        ion = 'ii' # H I Rec\n        hi_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        atom = 'o'\n        ion = 'iii' # [O III]\n        o_iii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5) # read Energy Levels (Ej)\n        o_iii_omij = atomneb.read_omij(atom_omij_file, atom, ion) # read Collision Strengths (Omegaij)\n        o_iii_aij = atomneb.read_aij(atom_aij_file, atom, ion) # read Transition Probabilities (Aij)\n\n        levels5007='3,4/'\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        iobs5007=np.float64(1200.0)\n        abb5007 = pyequib.calc_abundance(temperature=temperature, density=density, \n                                         line_flux=iobs5007, atomic_levels=levels5007,\n                                         elj_data=o_iii_elj, omij_data=o_iii_omij, aij_data=o_iii_aij, \n                                         h_i_aeff_data=hi_rc_data['aeff'][0])\n        print('N(O^2+)/N(H+):', abb5007)\n\n      which gives::\n\n        N(O^2+)/N(H+):   0.00041256231 \n\n    - *Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'h'\n        ion = 'ii' # H I Rec\n        hi_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        atom = 'o'\n        ion = 'iii' # [O III]\n        o_iii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5) # read Energy Levels (Ej)\n        o_iii_omij = atomneb.read_omij(atom_omij_file, atom, ion) # read Collision Strengths (Omegaij)\n        o_iii_aij = atomneb.read_aij(atom_aij_file, atom, ion) # read Transition Probabilities (Aij)\n\n        levels5007='3,4/'\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        iobs5007=np.float64(1200.0)\n        emis = pyequib.calc_emissivity(temperature=temperature, density=density, atomic_levels=levels5007, \n                                       elj_data=o_iii_elj, omij_data=o_iii_omij, aij_data=o_iii_aij)\n        print('Emissivity(O III 5007):', emis)\n\n      which gives::\n\n        Emissivity(O III 5007):   3.6041012e-21\n\n\n    - *Atomic Level Population*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n\n        atom = 's'\n        ion = 'ii'\n        s_ii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5)\n        s_ii_omij = atomneb.read_omij(atom_omij_file, atom, ion)\n        s_ii_aij = atomneb.read_aij(atom_aij_file, atom, ion)\n\n        density = np.float64(1000)\n        temperature=np.float64(10000.0)#\n        nlj = pyequib.calc_populations(temperature=temperature, density=density, \n                                       elj_data=s_ii_elj, omij_data=s_ii_omij, aij_data=s_ii_aij)\n        print('Populations:', nlj)\n\n      which prints::\n\n        Populations: 0.96992832 0.0070036315 0.023062261 2.6593671e-06 3.1277019e-06\n\n    - *Critical Density*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n\n        atom = 's'\n        ion = 'ii'\n        s_ii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5)\n        s_ii_omij = atomneb.read_omij(atom_omij_file, atom, ion)\n        s_ii_aij = atomneb.read_aij(atom_aij_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        n_crit = pyequib.calc_crit_density(temperature=temperature, \n                                           elj_data=s_ii_elj, omij_data=s_ii_omij, aij_data=s_ii_aij)\n        print('Critical Densities:', n_crit)\n\n      which gives::\n\n        Critical Densities: 0.0000000 5007.8396 1732.8414 1072685.0 2220758.1\n\n    - *All Ionic Level Information*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_dir = os.path.join('atomic-data', 'chianti70')\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_elj_file = os.path.join(base_dir,data_dir, 'AtomElj.fits')\n        atom_omij_file = os.path.join(base_dir,data_dir, 'AtomOmij.fits')\n        atom_aij_file = os.path.join(base_dir,data_dir, 'AtomAij.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'h'\n        ion = 'ii' # H I Rec\n        hi_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        atom = 'o'\n        ion = 'iii' # [O III]\n        o_iii_elj = atomneb.read_elj(atom_elj_file, atom, ion, level_num=5) # read Energy Levels (Ej)\n        o_iii_omij = atomneb.read_omij(atom_omij_file, atom, ion) # read Collision Strengths (Omegaij)\n        o_iii_aij = atomneb.read_aij(atom_aij_file, atom, ion) # read Transition Probabilities (Aij)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        pyequib.print_ionic(temperature=temperature, density=density,\n                    elj_data=o_iii_elj, omij_data=o_iii_omij, aij_data=o_iii_aij,\n                    h_i_aeff_data=hi_rc_data['aeff'][0])\n\n      which gives::\n\n        Temperature =   10000.0 K\n        Density =    1000.0 cm-3\n\n        Level    Populations   Critical Densities \n        Level 1:   3.063E-01   0.000E+00\n        Level 2:   4.896E-01   4.908E+02\n        Level 3:   2.041E-01   3.419E+03\n        Level 4:   4.427E-05   6.853E+05\n        Level 5:   2.985E-09   2.547E+07\n\n         2.597E-05  \n             88.34um \n             (2-->1) \n         2.859E-22  \n\n         0.000E+00   9.632E-05  \n             32.66um      51.81um \n             (3-->1)     (3-->2) \n         0.000E+00   7.536E-22  \n\n         2.322E-06   6.791E-03   2.046E-02  \n           4932.60A    4960.29A    5008.24A \n            (4-->1)     (4-->2)     (4-->3) \n         4.140E-25   1.204E-21   3.593E-21  \n\n         0.000E+00   2.255E-01   6.998E-04   1.685E+00  \n           2315.58A    2321.67A    2332.12A    4364.45A \n            (5-->1)     (5-->2)     (5-->3)     (5-->4) \n         0.000E+00   5.759E-24   1.779E-26   2.289E-23  \n\n        H-beta emissivity: 1.237E-25 N(H+) Ne  [erg/s]\n\n\n* **Recombination Unit** which have the API functions for plasma diagnostics and abundance analysis of recombination lines. Here are some examples of using *Recombination* Unit:\n\n    - *He+ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_he_i_file = os.path.join(base_dir,data_rc_dir, 'rc_he_ii_PFSD12.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        atom = 'he'\n        ion = 'ii' # He I\n        he_i_rc_data = atomneb.read_aeff_he_i_pfsd12(atom_rc_he_i_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        he_i_4471_flux= 2.104\n        linenum=10# 4471.50\n        abund_he_i = pyequib.calc_abund_he_i_rl(temperature=temperature, density=density,\n                                        linenum=linenum, line_flux=he_i_4471_flux,\n                                        he_i_aeff_data=he_i_aeff_data, h_i_aeff_data=h_i_aeff_data)\n        print('N(He^+)/N(H^+):', abund_he_i)\n\n      which gives::\n\n        N(He^+)/N(H^+):     0.040848393\n\n    - *He++ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        atom = 'he'\n        ion = 'iii' # He II\n        he_ii_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        he_ii_4686_flux = 135.833\n        abund_he_ii = pyequib.calc_abund_he_ii_rl(temperature=temperature, density=density,\n                                          line_flux=he_ii_4686_flux,\n                                          he_ii_aeff_data=he_ii_aeff_data, h_i_aeff_data=h_i_aeff_data)\n        print('N(He^2+)/N(H^+):', abund_he_ii)\n\n      which gives::\n\n        N(He^2+)/N(H^+):      0.11228817\n\n    - *C++ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'c'\n        ion = 'iii' # C II\n        c_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        wavelength=6151.43\n        c_ii_6151_flux = 0.028\n        abund_c_ii = pyequib.calc_abund_c_ii_rl(temperature=temperature, density=density,\n                                        wavelength=wavelength, line_flux=c_ii_6151_flux,\n                                        c_ii_rc_data=c_ii_rc_data, h_i_aeff_data=h_i_aeff_data)\n        print('N(C^2+)/N(H+):', abund_c_ii)\n\n      which gives::\n\n        N(C^2+)/N(H+):   0.00063404650 \n\n    - *C3+ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_ppb91_file = os.path.join(base_dir,data_rc_dir, 'rc_PPB91.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'c'\n        ion = 'iv' # C III\n        c_iii_rc_data = atomneb.read_aeff_ppb91(atom_rc_ppb91_file, atom, ion)\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        wavelength=4647.42\n        c_iii_4647_flux = 0.107\n        abund_c_iii = pyequib.calc_abund_c_iii_rl(temperature=temperature, density=density,\n                                          wavelength=wavelength,\n                                          line_flux=c_iii_4647_flux, c_iii_rc_data=c_iii_rc_data,\n                                          h_i_aeff_data=h_i_aeff_data)\n        print('N(C^3+)/N(H+):', abund_c_iii)\n\n      which gives::\n\n        N(C^3+)/N(H+):   0.00017502840\n\n    - *N++ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'n'\n        ion = 'iii' # N II\n        n_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n        n_ii_rc_data_br = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion, br=True)\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        wavelength=4442.02\n        n_ii_4442_flux = 0.017\n        abund_n_ii = pyequib.calc_abund_n_ii_rl(temperature=temperature, density=density,\n                                        wavelength=wavelength, line_flux=n_ii_4442_flux,\n                                        n_ii_rc_br=n_ii_rc_data_br, n_ii_rc_data=n_ii_rc_data,\n                                        h_i_aeff_data=h_i_aeff_data)\n        print('N(N^2+)/N(H+):', abund_n_ii)\n\n      which gives::\n\n        N(N^2+)/N(H+):   0.00069297541\n\n    - *N3+ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_ppb91_file = os.path.join(base_dir,data_rc_dir, 'rc_PPB91.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'n'\n        ion = 'iv' # N III\n        n_iii_rc_data = atomneb.read_aeff_ppb91(atom_rc_ppb91_file, atom, ion)\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        wavelength=4640.64\n        n_iii_4641_flux = 0.245\n        abund_n_iii = pyequib.calc_abund_n_iii_rl(temperature=temperature, density=density,\n                                          wavelength=wavelength, line_flux=n_iii_4641_flux,\n                                          n_iii_rc_data=n_iii_rc_data, h_i_aeff_data=h_i_aeff_data)\n        print('N(N^3+)/N(H+):', abund_n_iii)\n\n      which gives::\n\n        N(N^3+)/N(H+):   6.3366175e-05\n\n    - *O++ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'o'\n        ion = 'iii' # O II\n        o_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n        o_ii_rc_data_br = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion, br=True)\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        wavelength=4613.68\n        o_ii_4614_flux = 0.009\n        abund_o_ii = pyequib.calc_abund_o_ii_rl(temperature=temperature, density=density,\n                                        wavelength=wavelength, line_flux=o_ii_4614_flux,\n                                        o_ii_rc_br=o_ii_rc_data_br,\n                                        o_ii_rc_data=o_ii_rc_data,\n                                        h_i_aeff_data=h_i_aeff_data)              \n        print('N(O^2+)/N(H+):', abund_o_ii)\n\n      which gives::\n\n        N(O^2+)/N(H+):    0.0018886330\n\n    - *Ne++ Ionic Abundance*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'ne'\n        ion = 'iii' # Ne II\n        ne_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n\n        atom = 'h'\n        ion = 'ii' # H I\n        h_i_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        wavelength=3777.14\n        ne_ii_3777_flux = 0.056\n        abund_ne_ii = pyequib.calc_abund_ne_ii_rl(temperature=temperature, density=density,\n                                          wavelength=wavelength, line_flux=ne_ii_3777_flux,\n                                          ne_ii_rc_data=ne_ii_rc_data, h_i_aeff_data=h_i_aeff_data)\n        print('N(Ne^2+)/N(H+):', Abund_ne_ii)\n\n      which gives::\n\n        N(Ne^2+)/N(H+):   0.00043376850\n\n\n    - *He I Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_he_i_file = os.path.join(base_dir,data_rc_dir, 'rc_he_ii_PFSD12.fits')\n\n        atom = 'he'\n        ion = 'ii' # He I\n        he_i_rc_data = atomneb.read_aeff_he_i_pfsd12(atom_rc_he_i_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        linenum=10# 4471.50\n        emiss_he_i = pyequib.calc_emiss_he_i_rl(temperature=temperature, density=density,\n                                        linenum=linenum, he_i_aeff_data=he_i_aeff_data)\n        print('He I Emissivity:', emiss_he_i)\n\n      which gives::\n\n        He I Emissivity:   6.3822830e-26\n\n    - *He II Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_sh95_file = os.path.join(base_dir,data_rc_dir, 'rc_SH95.fits')\n\n        atom = 'he'\n        ion = 'iii' # He II\n        he_ii_rc_data = atomneb.read_aeff_sh95(atom_rc_sh95_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        emiss_he_ii = pyequib.calc_emiss_he_ii_rl(temperature=temperature, density=density,\n                                          he_ii_aeff_data=he_ii_aeff_data)\n        print('He II Emissivity:', emiss_he_ii)\n\n      which gives::\n\n        He II Emissivity:   1.4989134e-24\n\n    - *C II Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n\n        atom = 'c'\n        ion = 'iii' # C II\n        c_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        wavelength=6151.43\n        emiss_c_ii = pyequib.calc_emiss_c_ii_rl(temperature=temperature, density=density,\n                                        wavelength=wavelength, c_ii_rc_data=c_ii_rc_data)\n        print('C II Emissivity:', emiss_c_ii)\n\n      which gives::\n\n        C II Emissivity:   5.4719511e-26\n\n    - *C III Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_ppb91_file = os.path.join(base_dir,data_rc_dir, 'rc_PPB91.fits')\n\n        atom = 'c'\n        ion = 'iv' # C III\n        c_iii_rc_data = atomneb.read_aeff_ppb91(atom_rc_ppb91_file, atom, ion)\n\n        temperature=np.float64(10000.0)\n        density=np.float64(5000.0)\n        wavelength=4647.42\n        emiss_c_iii = pyequib.calc_emiss_c_iii_rl(temperature=temperature, density=density,\n                                          wavelength=wavelength,\n                                          c_iii_rc_data=c_iii_rc_data)\n        print('C III Emissivity:', emiss_c_iii)\n\n      which gives::\n\n        C III Emissivity:   7.5749632e-25\n\n    - *N II Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n\n        atom = 'n'\n        ion = 'iii' # N II\n        n_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n        n_ii_rc_data_br = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion, br=True)\n\n        wavelength=4442.02\n        emiss_n_ii = pyequib.calc_emiss_n_ii_rl(temperature=temperature, density=density,\n                                        wavelength=wavelength,\n                                        n_ii_rc_br=n_ii_rc_data_br, n_ii_rc_data=n_ii_rc_data)\n        print('N II Emissivity:', emiss_n_ii)\n\n      which gives::\n\n        N II Emissivity:   3.0397397e-26\n\n    - *N III Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_ppb91_file = os.path.join(base_dir,data_rc_dir, 'rc_PPB91.fits')\n\n        atom = 'n'\n        ion = 'iv' # N III\n        n_iii_rc_data = atomneb.read_aeff_ppb91(atom_rc_ppb91_file, atom, ion)\n\n        wavelength=4640.64\n        emiss_n_iii = pyequib.calc_emiss_n_iii_rl(temperature=temperature, density=density,\n                                          wavelength=wavelength, n_iii_rc_data=n_iii_rc_data)\n        print('N III Emissivity:', emiss_n_iii)\n\n      which gives::\n\n        N III Emissivity:   4.7908644e-24\n\n    - *O II Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n\n        atom = 'o'\n        ion = 'iii' # O II\n        o_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n        o_ii_rc_data_br = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion, br=True)\n\n        wavelength=4613.68\n        emiss_o_ii = pyequib.calc_emiss_o_ii_rl(temperature=temperature, density=density,\n                                        wavelength=wavelength,\n                                        o_ii_rc_br=o_ii_rc_data_br, o_ii_rc_data=o_ii_rc_data)\n        print('O II Emissivity:', emiss_o_ii)\n\n      which gives::\n\n        O II Emissivity:   5.9047319e-27\n\n    - *Ne II Emissivity*::\n\n        import pyequib\n        import atomneb\n        import os\n        base_dir = 'externals/atomneb'\n        data_rc_dir = os.path.join('atomic-data-rc')\n        atom_rc_all_file = os.path.join(base_dir,data_rc_dir, 'rc_collection.fits')\n\n        atom = 'ne'\n        ion = 'iii' # Ne II\n        ne_ii_rc_data = atomneb.read_aeff_collection(atom_rc_all_file, atom, ion)\n\n        wavelength=3777.14\n        emiss_ne_ii = pyequib.calc_emiss_ne_ii_rl(temperature=temperature, density=density,\n                                          wavelength=wavelength, ne_ii_rc_data=ne_ii_rc_data)\n        print('Ne II Emissivity:', emiss_ne_ii)\n\n      which gives::\n\n        Ne II Emissivity:   1.5996881e-25\n\n* **Reddening Unit** which have the API functions for estimating logarithmic extinctions at H-beta and dereddening observed fluxes based on reddening laws and extinctions. Here are some examples of using *Reddening* Unit:\n\n    - *Reddening Law Function*::\n\n        import pyequib\n        wavelength=6563.0\n        r_v=3.1\n        fl=pyequib.redlaw(wavelength, rv=r_v, ext_law='GAL')\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.32013816\n\n    - *Galactic Reddening Law Function based on Seaton (1979), Howarth (1983), & CCM (1983)*::\n\n        import pyequib\n        wavelength=6563.0\n        r_v=3.1\n        fl=pyequib.redlaw_gal(wavelength, rv=r_v)\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.32013816\n\n    - *Galactic Reddening Law Function based on Savage & Mathis (1979)*::\n\n        import pyequib\n        wavelength=6563.0\n        fl=pyequib.redlaw_gal2(wavelength)\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.30925984\n\n    - *Reddening Law Function based on Cardelli, Clayton & Mathis (1989)*::\n\n        import pyequib\n        wavelength=6563.0\n        r_v=3.1\n        fl=pyequib.redlaw_ccm(wavelength, rv=r_v)\n        prin('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.29756615\n\n    - *Galactic Reddening Law Function based on Whitford (1958), Seaton (1977), & Kaler(1976)*::\n\n        import pyequib\n        wavelength=6563.0\n        fl=pyequib.redlaw_jbk(wavelength)\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.33113684\n\n    - *Reddening Law Function based on Fitzpatrick & Massa (1990), Fitzpatrick (1999), Misselt (1999)*::\n\n        import pyequib\n        wavelength=6563.0\n        r_v=3.1\n        fmlaw='AVGLMC'\n        fl=pyequib.redlaw_fm(wavelength, fmlaw=fmlaw, rv=r_v)\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.35053032\n\n    - *Reddening Law Function for the Small Magellanic Cloud*::\n\n        import pyequib\n        wavelength=6563.0\n        fl=pyequib.redlaw_smc(wavelength)\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.22659261\n\n    - *Reddening Law Function for the Large Magellanic Cloud*::\n\n        import pyequib\n        wavelength=6563.0\n        fl=pyequib.redlaw_lmc(wavelength)\n        print('fl(6563):', fl)\n\n      which gives::\n\n        fl(6563):     -0.30871187\n\n    - *Dereddening Absolute Flux*::\n\n        import pyequib\n        wavelength=6563.0\n        m_ext=1.0\n        flux=1.0\n        ext_law='GAL'\n        r_v=3.1\n        flux_deredden=pyequib.deredden_relflux(wavelength, flux, m_ext, ext_law=ext_law, rv=r_v)\n        print('dereddened flux(6563)', flux_deredden)\n\n      which gives::\n\n        dereddened flux(6563)       4.7847785\n\n    - *Dereddening Relative Flux*::\n\n        import pyequib\n        wavelength=6563.0\n        m_ext=1.0\n        flux=1.0\n        ext_law='GAL'\n        r_v=3.1\n        flux_deredden=pyequib.deredden_flux(wavelength, flux, m_ext, ext_law=ext_law, rv=r_v)\n        print('dereddened flux(6563)', flux_deredden)\n\n      which gives::\n\n        dereddened flux(6563)      0.47847785\n\nDocumentation\n=============\n\nFor more information on how to use the API functions from the pyEQUIB libray, please read the `API Documentation  <https://equib.github.io/pyEQUIB/doc>`_ published on `equib.github.io/pyEQUIB <https://equib.github.io/pyEQUIB>`_.\n\n\nReferences\n==========\n* Danehkar, A. (2020). pyEQUIB Python Package, an addendum to proEQUIB: IDL Library for Plasma Diagnostics and Abundance Analysis. *J. Open Source Softw.*, **5**, 2798. doi:`10.21105/joss.02798 <https://doi.org/10.21105/joss.02798>`_ ads:`2020JOSS....5.2798D <https://ui.adsabs.harvard.edu/abs/2020JOSS....5.2798D>`_.\n\n* Danehkar, A. (2018). proEQUIB: IDL Library for Plasma Diagnostics and Abundance Analysis. *J. Open Source Softw.*, **3**, 899. doi:`10.21105/joss.00899 <https://doi.org/10.21105/joss.00899>`_ ads:`2018JOSS....3..899D <https://ui.adsabs.harvard.edu/abs/2018JOSS....3..899D>`_.\n\n\nCitation\n========\n\nUsing **pyEQUIB** in a scholarly publication? Please cite thess papers:\n\n.. code-block:: bibtex\n\n   @article{Danehkar2020,\n     author = {{Danehkar}, Ashkbiz},\n     title = {pyEQUIB Python Package, an addendum to proEQUIB: IDL Library for Plasma Diagnostics and Abundance Analysis},\n     journal = {Journal of Open Source Software},\n     volume = {5},\n     number = {55},\n     pages = {2798},\n     year = {2020},\n     doi = {10.21105/joss.02798}\n   }\n\n   @article{Danehkar2018,\n     author = {{Danehkar}, Ashkbiz},\n     title = {proEQUIB: IDL Library for Plasma Diagnostics and Abundance Analysis},\n     journal = {Journal of Open Source Software},\n     volume = {3},\n     number = {32},\n     pages = {899},\n     year = {2018},\n     doi = {10.21105/joss.00899}\n   }\n\nLearn More\n==========\n\n==================  =============================================\n**Documentation**   https://pyequib.readthedocs.io/\n**Repository**      https://github.com/equib/pyEQUIB\n**Issues & Ideas**  https://github.com/equib/pyEQUIB/issues\n**Conda-Forge**     https://anaconda.org/conda-forge/pyequib\n**PyPI**            https://pypi.org/project/pyequib/\n**DOI**             `10.21105/joss.02798 <https://doi.org/10.21105/joss.02798>`_\n**Archive**         `10.5281/zenodo.4287576 <https://doi.org/10.5281/zenodo.4287576>`_\n==================  =============================================\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/equib/pyEQUIB",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://equib.github.io/pyEQUIB/",
    "keywords": "pyEQUIB,EQUIB,equilibrium,emissivities,plasma diagnostics,abundance analysis,astronomy,physics,astrophysics",
    "license": "http://www.gnu.org/licenses/gpl.html",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyequib",
    "package_url": "https://pypi.org/project/pyequib/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyequib/",
    "project_urls": {
      "Download": "https://github.com/equib/pyEQUIB",
      "Homepage": "https://equib.github.io/pyEQUIB/"
    },
    "release_url": "https://pypi.org/project/pyequib/0.4.2/",
    "requires_dist": [
      "numpy",
      "scipy",
      "atomneb"
    ],
    "requires_python": "",
    "summary": "pyequib: Python Package for Plasma Diagnostics and Abundance Analysis",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9627607,
  "releases": {
    "0.0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f494cbd1d71d5ca5641f8672908cadf7eb69591f2fd78887264047c7795dc22",
          "md5": "31bfec84fae64699c00f350402e3d794",
          "sha256": "277773252b1ef16d3ddb2f6194e593d9eb63ec3172d4cf31fe987e7f3b3fd642"
        },
        "downloads": -1,
        "filename": "pyequib-0.0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "31bfec84fae64699c00f350402e3d794",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 293864,
        "upload_time": "2018-02-18T03:29:31",
        "upload_time_iso_8601": "2018-02-18T03:29:31.266489Z",
        "url": "https://files.pythonhosted.org/packages/8f/49/4cbd1d71d5ca5641f8672908cadf7eb69591f2fd78887264047c7795dc22/pyequib-0.0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e726ee777efbd9f22e94381c528fa2da42fc409bd49faa0309ce258a71405aad",
          "md5": "3e6d3a08371a90c1e8617e6900dba415",
          "sha256": "0437a77e119729d81f3ab5cff55826fbeb4c5e2985aceef0265a6ad0d00e33e6"
        },
        "downloads": -1,
        "filename": "pyequib-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e6d3a08371a90c1e8617e6900dba415",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 47819,
        "upload_time": "2020-10-14T21:22:06",
        "upload_time_iso_8601": "2020-10-14T21:22:06.562786Z",
        "url": "https://files.pythonhosted.org/packages/e7/26/ee777efbd9f22e94381c528fa2da42fc409bd49faa0309ce258a71405aad/pyequib-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1d9360a0128c5eb33cd6867b9eea6692b7c7159dbe7cf159561e1e14094b3b2",
          "md5": "b586d045002dc68bc5ed68ee1bf8aca8",
          "sha256": "e5a1d6412500f690df8c974d8cbe5399ce6d76a9a44f4d04b160b2738f032704"
        },
        "downloads": -1,
        "filename": "pyequib-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b586d045002dc68bc5ed68ee1bf8aca8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34707,
        "upload_time": "2020-10-14T21:22:07",
        "upload_time_iso_8601": "2020-10-14T21:22:07.646873Z",
        "url": "https://files.pythonhosted.org/packages/d1/d9/360a0128c5eb33cd6867b9eea6692b7c7159dbe7cf159561e1e14094b3b2/pyequib-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1dbd8efc3b2ec1c381c8611b8e13ab625af2dfc59329b796d8063d200085f34",
          "md5": "0f73f6acb360279ad3e46defa824e84c",
          "sha256": "96b5cd8af90fa5f72a80be42dcebfa70441b65b072eb29f7ed1e0887b35bb5b6"
        },
        "downloads": -1,
        "filename": "pyequib-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f73f6acb360279ad3e46defa824e84c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64985,
        "upload_time": "2020-10-15T01:20:52",
        "upload_time_iso_8601": "2020-10-15T01:20:52.411071Z",
        "url": "https://files.pythonhosted.org/packages/a1/db/d8efc3b2ec1c381c8611b8e13ab625af2dfc59329b796d8063d200085f34/pyequib-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76f2237c0ae113ef9c45a6ec7cb9a9d396ddc19a81246426ccb2cb73adcc8e84",
          "md5": "1a925e8858effef6b980c5b6acb5de1b",
          "sha256": "0d729ac2615a9d7956de87d8a70682cbc47b8ea03f718ec0f8e50a06a189e48f"
        },
        "downloads": -1,
        "filename": "pyequib-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1a925e8858effef6b980c5b6acb5de1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60537,
        "upload_time": "2020-10-15T01:20:54",
        "upload_time_iso_8601": "2020-10-15T01:20:54.118783Z",
        "url": "https://files.pythonhosted.org/packages/76/f2/237c0ae113ef9c45a6ec7cb9a9d396ddc19a81246426ccb2cb73adcc8e84/pyequib-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adf83b5e2babab4fd9e0c4918cf80f79a753bbf688a0d1677a867bc9f317d386",
          "md5": "70b51c4679b1499636d00e85929a3e58",
          "sha256": "2ffbc4408f7761699c5025f7f9e90491f9df39d968429c6f279b1400b4b2e99a"
        },
        "downloads": -1,
        "filename": "pyequib-0.3.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70b51c4679b1499636d00e85929a3e58",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 65065,
        "upload_time": "2020-10-16T18:27:43",
        "upload_time_iso_8601": "2020-10-16T18:27:43.700023Z",
        "url": "https://files.pythonhosted.org/packages/ad/f8/3b5e2babab4fd9e0c4918cf80f79a753bbf688a0d1677a867bc9f317d386/pyequib-0.3.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2bd257a6e4a978363e1b7e06c4ee86656e452456e8f3d990ecd538aa958c4dc",
          "md5": "7e86150ea0feac125cf06684eb94f759",
          "sha256": "dab3eb4e99d85768673ed30ac90f0dae809bbb29de78cc5308f74cc1716798a9"
        },
        "downloads": -1,
        "filename": "pyequib-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7e86150ea0feac125cf06684eb94f759",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60782,
        "upload_time": "2020-10-16T18:27:45",
        "upload_time_iso_8601": "2020-10-16T18:27:45.358782Z",
        "url": "https://files.pythonhosted.org/packages/b2/bd/257a6e4a978363e1b7e06c4ee86656e452456e8f3d990ecd538aa958c4dc/pyequib-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5de3a53b6cce3dfa3cdc381ec0b39157359c4ee42f75effc5f94e1b4ddf3ad42",
          "md5": "a36b4b4e2da1f79c92e28b651109dc2b",
          "sha256": "a562a1c34ceccc34f1105fec074fcdb54ce9508b9af02256c7d402765ccaf0d1"
        },
        "downloads": -1,
        "filename": "pyequib-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a36b4b4e2da1f79c92e28b651109dc2b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 66473,
        "upload_time": "2021-03-03T06:06:00",
        "upload_time_iso_8601": "2021-03-03T06:06:00.541715Z",
        "url": "https://files.pythonhosted.org/packages/5d/e3/a53b6cce3dfa3cdc381ec0b39157359c4ee42f75effc5f94e1b4ddf3ad42/pyequib-0.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b61e30fc52803db45dc88dc2f6733ae2253b6434eb81dced0d72dd627b0f4ad1",
          "md5": "dcc2f954a7af17492cfee574d74831b5",
          "sha256": "fb8098d7af4edd145d0152d514651741f9c54892a234fa10010817ef3240ba95"
        },
        "downloads": -1,
        "filename": "pyequib-0.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcc2f954a7af17492cfee574d74831b5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 66474,
        "upload_time": "2021-03-03T18:27:14",
        "upload_time_iso_8601": "2021-03-03T18:27:14.038656Z",
        "url": "https://files.pythonhosted.org/packages/b6/1e/30fc52803db45dc88dc2f6733ae2253b6434eb81dced0d72dd627b0f4ad1/pyequib-0.4.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa48f658eb26a07c4f83c500f1b4ffdc16065f79621fe0aef485b749ead9c9ee",
          "md5": "6443a08e922d84a59d8e6e3bf0d7ffcf",
          "sha256": "9fb24449ee378202e681d850958aef796c3816320bec29cfa46fb81bddd633e1"
        },
        "downloads": -1,
        "filename": "pyequib-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6443a08e922d84a59d8e6e3bf0d7ffcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63309,
        "upload_time": "2021-03-03T18:27:15",
        "upload_time_iso_8601": "2021-03-03T18:27:15.565504Z",
        "url": "https://files.pythonhosted.org/packages/aa/48/f658eb26a07c4f83c500f1b4ffdc16065f79621fe0aef485b749ead9c9ee/pyequib-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab246c1562ba4b633230edc3197c4ba5042656cd4bd3964243a858ca7ca9c82c",
          "md5": "3e148cbc2d9d3a0adeac858b536452e5",
          "sha256": "16525e0479cb2e6a97b9fc1ec3275f19c3773f86b73ab76bec56b3b02cddf3b7"
        },
        "downloads": -1,
        "filename": "pyequib-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e148cbc2d9d3a0adeac858b536452e5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 66473,
        "upload_time": "2021-03-03T19:06:55",
        "upload_time_iso_8601": "2021-03-03T19:06:55.745116Z",
        "url": "https://files.pythonhosted.org/packages/ab/24/6c1562ba4b633230edc3197c4ba5042656cd4bd3964243a858ca7ca9c82c/pyequib-0.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b990714b82911b2e8fed50d1b90bf822d84abded9c3360d9c5f33ee1aab47f6c",
          "md5": "8d9a82127af7224e3687d4ac65ca6cb6",
          "sha256": "187dd4d4c1183edbd2cc40954fb6e71fa9d187d937f400f0fa29335cc5237b2f"
        },
        "downloads": -1,
        "filename": "pyequib-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8d9a82127af7224e3687d4ac65ca6cb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63477,
        "upload_time": "2021-03-03T19:06:57",
        "upload_time_iso_8601": "2021-03-03T19:06:57.264273Z",
        "url": "https://files.pythonhosted.org/packages/b9/90/714b82911b2e8fed50d1b90bf822d84abded9c3360d9c5f33ee1aab47f6c/pyequib-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab246c1562ba4b633230edc3197c4ba5042656cd4bd3964243a858ca7ca9c82c",
        "md5": "3e148cbc2d9d3a0adeac858b536452e5",
        "sha256": "16525e0479cb2e6a97b9fc1ec3275f19c3773f86b73ab76bec56b3b02cddf3b7"
      },
      "downloads": -1,
      "filename": "pyequib-0.4.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e148cbc2d9d3a0adeac858b536452e5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 66473,
      "upload_time": "2021-03-03T19:06:55",
      "upload_time_iso_8601": "2021-03-03T19:06:55.745116Z",
      "url": "https://files.pythonhosted.org/packages/ab/24/6c1562ba4b633230edc3197c4ba5042656cd4bd3964243a858ca7ca9c82c/pyequib-0.4.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b990714b82911b2e8fed50d1b90bf822d84abded9c3360d9c5f33ee1aab47f6c",
        "md5": "8d9a82127af7224e3687d4ac65ca6cb6",
        "sha256": "187dd4d4c1183edbd2cc40954fb6e71fa9d187d937f400f0fa29335cc5237b2f"
      },
      "downloads": -1,
      "filename": "pyequib-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8d9a82127af7224e3687d4ac65ca6cb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63477,
      "upload_time": "2021-03-03T19:06:57",
      "upload_time_iso_8601": "2021-03-03T19:06:57.264273Z",
      "url": "https://files.pythonhosted.org/packages/b9/90/714b82911b2e8fed50d1b90bf822d84abded9c3360d9c5f33ee1aab47f6c/pyequib-0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}