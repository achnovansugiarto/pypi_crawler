{
  "info": {
    "author": "hanerx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Simple Compressed File Cracker\n\n[![GitHub All Releases](https://img.shields.io/github/downloads/hanerx/rarCracker/total)](https://github.com/hanerx/rarCracker/releases/latest)  ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/rarCracker) [![PyPI](https://img.shields.io/pypi/v/rarCracker)](https://pypi.org/project/rarCracker/) ![PyPI - Downloads](https://img.shields.io/pypi/dm/rarCracker) ![GitHub](https://img.shields.io/github/license/hanerx/rarCracker)\n\nA python based compressed file cracker\n\n- generate password from ASCII charset or custom charset using `charset` param\n\n- multi-thread\n\n## Install\n\n### From git\n\n- `git clone https://github.com/hanerx/rarCracker.git ` \n\n- run `pip install -r requriements.txt`\n\n- make sure you have installed `winrar` or `unar` or `bsdstar` \n\n- run `python -m rarCracker`\n\n## From release\n- download file from [release](https://github.com/hanerx/rarCracker/releases/latest) \n- run `pip install rarCracker-0.0.1.tar.gz`\n- run `python -m rarCracker`\n## From pip\n- run `pip install rarCracker`\n\n## Usage\n\n### Basic\n\n```python\nfrom rarCracker import RarCracker\nif __name__ == '__main__':\n    cracker = RarCracker('file_path', 3, 3, workers=2, charset='1234567890')\n    cracker.crack()\n```\n\n### Use Local Dictionary\n\n```python\nfrom rarCracker import RarCracker, LocalProvider\n\nif __name__ == '__main__':\n    cracker = RarCracker('./test.rar', provider=LocalProvider('./dict.txt'), unrar_tool='unrar')\n    print(cracker.crack())\n```\n\n### Use Network Dictionary\n\n```python\nfrom rarCracker import RarCracker, NetworkProvider\n\nif __name__ == '__main__':\n    cracker = RarCracker('./test.rar', provider=NetworkProvider('https://hanerx.top/rarCracker/dict.json',\n                                                                method=NetworkProvider.GET))\n    print(cracker.crack())\n\n```\n\n### Use Breakpoint\n\n```python\nfrom rarCracker import RarCracker, LocalProvider, LocalBreakPoint\n\nif __name__ == '__main__':\n    cracker = RarCracker('./test.rar', provider=LocalProvider('./dict.txt'), unrar_tool='unrar',\n                         break_point=LocalBreakPoint(breakpoint_count=1))\n    print(cracker.crack())\n```\n\n\n\n\n\n## API\n\n### RarCracker\n\nThe main class for module\n\n#### params\n\n| name       | type     | desc                                                         | default                              | required |\n| ---------- | -------- | ------------------------------------------------------------ | ------------------------------------ | -------- |\n| file_path  | str      | the compressed file path, if file does not exist raise `FileNotFoundError` , if file is not `.rar` or `.zip` raise `TypeError` | None                                 | True     |\n| start      | int      | the minimum password length                                  | 1                                    | False    |\n| stop       | int      | the maximum password length                                  | 10                                   | False    |\n| charset    | str      | the password charset                                         | digits + ascii_letters + punctuation | False    |\n| output     | str      | the output folder                                            | './output'                           | False    |\n| workers    | int      | the number of multi thread                                   | 8                                    | False    |\n| level      | int      | the logging display level                                    | logging.INFO                         | False    |\n| unrar_tool | str      | the decompressing tool, support `unrar` \\ `unar` \\ `bsdtar`  | 'unrar'                              | False    |\n| provider   | Provider | the password provider, if provider is not `None` it will replace original password generator and `start` \\ `stop` \\ `charset` will not work | None                                 | False    |\n\n#### Methods\n\n##### crack()\n\n- The method which start cracking, will block until all threads done or password found, if crack failed it will return `None`\n\n- return `None` or `str`\n\n##### generate_password()\n\n- The method which will return an iterator for password\n\n- return `iter`\n\n### Provider\nThe abstract class for provider param\n#### Methods\n##### generate(file)\n- The method which will return an iterator for password\n- return `iter`\n\n### DefaultProvider\n\nThe default password provider\n\n#### Param\n\n| name    | type | desc                        | default                              | required |\n| ------- | ---- | --------------------------- | ------------------------------------ | -------- |\n| start   | int  | the minimum password length | 1                                    | False    |\n| stop    | int  | the maximum password length | 10                                   | False    |\n| charset | str  | the password charset        | digits + ascii_letters + punctuation | False    |\n\n#### Methods\n\n##### generate(file)\n\n- The method which will return an iterator for password\n- return `iter`\n\n### LocalProvider\n\nThe class allows to get password from local dictionary\n\n#### Param\n\n| name | type | desc                                                         | default | required |\n| ---- | ---- | ------------------------------------------------------------ | ------- | -------- |\n| path | str  | the dictionary file path, if file does not exist raise `FileNotFoundError` | None    | True     |\n\n#### Methods\n\n##### generate(file)\n\n- The method which will return an iterator for password\n- return `iter`\n\n### NetworkProvider\n\nThe class allows to get password from network dictionary\n\n#### Param\n\n| name      | type   | desc                                                         | default                     | required |\n| --------- | ------ | ------------------------------------------------------------ | --------------------------- | -------- |\n| url       | str    | the url of the dictionary                                    | None                        | True     |\n| method    | method | the method of request, support `GET` \\  `POST` \\ `PUT` \\ `DELETE` \\ `OPTION` \\ `HEAD` | NetworkProvider.GET         | False    |\n| on_decode | method | the decode method for response                               | self.default_decode(result) | False    |\n| **kwargs  |        | support params for `requests` module                         | None                        | False    |\n\n#### Methods\n\n##### default_decode(result)\n\n- The method which will decode the response by default\n- accept json format array, for example `[\"123\",\"124\",\"125\"]`\n- return `list`\n\n##### generate(file)\n\n- The method which will return an iterator for password\n- return `iter`\n\n### BreakPoint\n\nThe abstract class for break_point param\n\n#### Methods\n\n##### generate(provider,file)\n\n- The method which will return a iterator for password with breakpoint supported\n- return `iter`\n\n### DefaultBreakPoint\n\nThe default breakpoint when break_point param is None\n\n#### Methods\n\n##### generate(provider,file)\n\n- The method which will return a iterator for password with breakpoint supported\n- return `iter`\n\n### LocalBreakPoint\n\nThe breakpoint will save cracking count number into local file and recover the progress from local file\n\n#### Param\n\n| name             | type | desc                                                         | default            | required |\n| ---------------- | ---- | ------------------------------------------------------------ | ------------------ | -------- |\n| breakpoint_path  | str  | the breakpoint file path, if file does not exist counter will start at 0 | './breakpoint.txt' | False    |\n| breakpoint_count | int  | the interval between two breakpoint                          | 1000               | False    |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hanerx/rarCracker",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rarCracker",
    "package_url": "https://pypi.org/project/rarCracker/",
    "platform": "",
    "project_url": "https://pypi.org/project/rarCracker/",
    "project_urls": {
      "Homepage": "https://github.com/hanerx/rarCracker"
    },
    "release_url": "https://pypi.org/project/rarCracker/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple compressed file cracker",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8152805,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4bff5c771fa4461fda3ebac293748b3d1c9ebba05b01316c640bab4e0d59b93",
          "md5": "0b396be408b025f7cf85f45dff6ed53f",
          "sha256": "2f21bff88b45b75b29b24fd5992174002b043fd81f01ea1552333b2538035106"
        },
        "downloads": -1,
        "filename": "rarCracker-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b396be408b025f7cf85f45dff6ed53f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3046,
        "upload_time": "2020-09-08T12:46:09",
        "upload_time_iso_8601": "2020-09-08T12:46:09.320497Z",
        "url": "https://files.pythonhosted.org/packages/f4/bf/f5c771fa4461fda3ebac293748b3d1c9ebba05b01316c640bab4e0d59b93/rarCracker-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b559ab605af050c6627872f960bc41bd3201908d3da76ab52b1656f75e38015",
          "md5": "fdf3f2dfe2d9ef7c6b9461de4f342357",
          "sha256": "1707443519b6bd285b59a0d2e00277e0901b9d7e9e8a4505aca093eb1f4ec771"
        },
        "downloads": -1,
        "filename": "rarCracker-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fdf3f2dfe2d9ef7c6b9461de4f342357",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3967,
        "upload_time": "2020-09-09T00:57:19",
        "upload_time_iso_8601": "2020-09-09T00:57:19.086579Z",
        "url": "https://files.pythonhosted.org/packages/0b/55/9ab605af050c6627872f960bc41bd3201908d3da76ab52b1656f75e38015/rarCracker-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c060b277a5a2f956661f9b5d9cdcba8fdbf59f38b7561bd407bc28902401d3e",
          "md5": "280861762e8cd4e5a34b8d7476398141",
          "sha256": "f4c234be7b9b29b575afe4d6a21a8cf3e9697421028a0c5c4ff465b6250f8fe7"
        },
        "downloads": -1,
        "filename": "rarCracker-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "280861762e8cd4e5a34b8d7476398141",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4564,
        "upload_time": "2020-09-09T01:45:13",
        "upload_time_iso_8601": "2020-09-09T01:45:13.644569Z",
        "url": "https://files.pythonhosted.org/packages/4c/06/0b277a5a2f956661f9b5d9cdcba8fdbf59f38b7561bd407bc28902401d3e/rarCracker-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b66b949571661b027f2af7e1a166e057d5daedd65b7c89f565add723b0ece1d",
          "md5": "c258b43a8ccf9feef1c470ff9c8fa6c7",
          "sha256": "3380f483888090239e2d37bc78e4866eecf76e274aa9d3c72977f1d875bf6150"
        },
        "downloads": -1,
        "filename": "rarCracker-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c258b43a8ccf9feef1c470ff9c8fa6c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5914,
        "upload_time": "2020-09-10T08:00:53",
        "upload_time_iso_8601": "2020-09-10T08:00:53.817061Z",
        "url": "https://files.pythonhosted.org/packages/3b/66/b949571661b027f2af7e1a166e057d5daedd65b7c89f565add723b0ece1d/rarCracker-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b66b949571661b027f2af7e1a166e057d5daedd65b7c89f565add723b0ece1d",
        "md5": "c258b43a8ccf9feef1c470ff9c8fa6c7",
        "sha256": "3380f483888090239e2d37bc78e4866eecf76e274aa9d3c72977f1d875bf6150"
      },
      "downloads": -1,
      "filename": "rarCracker-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c258b43a8ccf9feef1c470ff9c8fa6c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5914,
      "upload_time": "2020-09-10T08:00:53",
      "upload_time_iso_8601": "2020-09-10T08:00:53.817061Z",
      "url": "https://files.pythonhosted.org/packages/3b/66/b949571661b027f2af7e1a166e057d5daedd65b7c89f565add723b0ece1d/rarCracker-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}