{
  "info": {
    "author": "Gabriel Fortin-Leblanc",
    "author_email": "gabriel.fortin-leblanc@umontreal.ca",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# GGames\n\n## About The Project\nGGames, short for Graph Games, is a Python package that provides functions to \nstudy games on static or time-varying graphs. The project was first created to \nhelp students to answer questions about the [cop-number](#cops-and-robbers-game)\nof [edge-periodic graph](#time-varying-graphs).\n\n## Preliminary\nThe user must have minimum knowledge of [graph theory](#bondy-murty) and \n[time-varying graph](#casteigts) to enjoy this package. Depending on the field\nof study of the user, he/she should be familiar with the\n[Cops and Robbers game](#bonato-nowakowski) and the\n[reachability game](#berwanger). More references are available at the end of \nthis document.\n\n### Cops and Robbers game\nThe Cops and Robbers game was first introduced independently by\n[Quilliot](#quilliot), and by [Nowakowski and Winkler](#nowakowski-winkler).\nThis game is played by *k* cops and a robber who place themselves on vertices of\na graph and take turns moving along an edge. Cops play first. They win if at any \nmoment a cop occupies the same vertex as the robber. If the\nrobber can avoid capture forever, he wins. A good survey on the subject\nhas been written by [Bonato and Nowakowski](#bonato-nowakowski).\n\nThere exist a lot of different variants of this game. One involves playing\non time-varying graphs: more specifically, on discrete ones. This\nvariant was first introduced by [Erlebach and Spooner](#erlebach-spooner).\nBecause of its recency, a lot of questions about it have yet to be answered.\n\n### Reachability game\nThe reachability game is played by two players, Player 0 and Player 1, on a\ngraph. The set of vertices is partitioned into two sets, *S0* and *S1*. A\ntoken is placed on a vertex of the graph. When the token is on a vertex of\n*S0*, Player 0 moves the token to an adjacent vertex. Player 1 does the same if\nthe token is on a vertex of *S1*.  There is also a subset of *S1*, *F*. \nPlayer 0 wins if the token occupies a vertex of *F*, and Player 1 wins \nif he can avoid that forever. Because many important problems can be reduced to \na reachability game, this topic is constantly being studied. To learn more \nabout reduction and [the theory of computation](#sipser), a nice and short introduction on the\nreachability game has been written by [Berwanger](#berwanger).\n\n## Getting started\n### Installation\nYou can easily install the package via\n[pip](https://pip.pypa.io/en/stable/installation/) with the following command:\n```sh\npip install ggames\n```\nor you can download the\n[sources](https://github.com/gfl-math-stat-info/ggames).\nThe program requires Python 3.9+. The program probably works on older versions\nof Python 3.0+, but hasn't been tested.\n\n### Usage\nGGames can be used by importing it into a Python session.\n```python\nfrom ggames import cop_robber_game as crg\n\n# Create a cycle of length 4.\nV = list(range(4))\nE = [(i, (i+1)%4) for i in range(4)]\nprint(crg.is_kcop_win(V, E, k=1)) # prints False\nprint(crg.is_kcop_win(V, E, k=2)) # prints True\n\n# You can add a presence mapping for the edges.\ntau = {(0, 1): '1', (1, 2): '001', (2, 3): '1', (3, 0): '1'}\nprint(crg.is_kcop_win(V, E, tau, 1)) # prints True\n```\nYou can reduce a Cops and Robbers game to a reachability game.\n```python\nVgg, Agg = crg.get_game_graph(V, E, tau, 1)\nS0, S1, A, F = crg.game_graph_to_reachability_game(Vgg, Agg)\n```\nBy computing the attractor set of the reachability game, you can extract a\nwinning strategy for the winner.\n```python\nfrom ggames import reachability_game as rg\n\nattractor = rg.get_attractor(S0, S1, A, F)\ncurrent_config_vertex = (0, 2, False, 0)\n# ^^ (cop position, robber position, False := cop's turn, time step)\nnext_moves = rg.get_next_winning_moves(current_config_vertex, A, attractor)\nprint(next_moves) # prints [(0, 2, True, 0), (1, 2, True, 0), (3, 2, True, 0)]\n# ^^ Doesn't give only the best winning strategy.\nnext_moves = rg.get_next_winning_moves((3, 2, True, 0), A, attractor,\n      player0_move=False)\nprint(next_moves) # prints []. The robber will lose in any case.\n```\nTo get more information, see the [documentation](#documentation).\n\nAlso, by having a static of an edge-periodic graph into\n[JSON](https://www.json.org/json-en.html) format, a console script can \neasily be called to answer basic questions.\n```sh\nkcop-win 1 outerplanar_graph.json # prints False\nkcop-win 2 outerplanar_graph.json --output output.txt\ncat output.txt # prints True\n```\nwhere outerplanar_graph.json contains\n```json\n{\n   \"V\": [ 1, 2, 3, 4, 5, 6, 7, 8 ],\n   \"E\": [ [1, 2], [1, 8], [2, 3], [2, 4], [2, 8], [3, 4], [4, 5], [4, 6],\n         [5, 6], [6, 7], [6, 8], [7, 8] ]\n}\n```\nTo get help on a console script, you can use the *--help* arguments.\n```sh\nkcop-win --help # prints the help section\n```\n\n## Documentation\n### `cops_robbers_game`\n#### `get_game_graph(V: list, E: list, tau: dict, k: int): list`\nComputes the game graph where the \"k\"-cops and robber game takes place on \nthe edge periodic graph (V, E, tau). If \"tau\" is not specified, then the\ngraph is considered to be static. Returns the list of vertices and arcs of\nthe game graph.\n\nParameters | Description\n--------- | ---------\nV | The list of vertices\nE | The list of edges\ntau | The presence function of the edges in E in dict. If the graph is static, defaults to 'None'.\nk | The number of cops in the game\n\n#### `game_graph_to_reachability_game(V_gg: list, A_gg: list): list`\nComputes and returns a reachable game corresponding to the game graph\nG = (V_gg, A_gg).\nParameters | Description\n--------- | ---------\nV_gg | A list of vertices of a game graph\nA_gg | A list of edges of a game graph\n\n\n#### `is_kcop_win(V: list, E: list, tau: dict, k: int): boolean`\nComputes if the time-varying graph (\"V\", \"E\", \"tau\") is \"k\"-cop win\nby turning the game into a reachability game. \nParameters | Description\n--------- | ---------\nV | A set of vertices \nE | A set of edges\ntau | A map from E to a set of bit sequences\nk | The number of cops that play on the time-varying graph\n\n\n### `reachability_game`\n#### `get_attractor(S0: list, S1: list, A: list, F: list): list`\nComputes the attractor set.\nParameters | Description\n--------- | ---------\nS0 | A list of vertices\nS1 | A list of vertices (must be disjointed of S0)\nA | A sub-list (subset) of S0&times;S1 &cup; S1&times;S0\nF | A sub-list (subset) of S1 as list.\n\n#### `get_next_winning_moves(current_vertex: int, A: list, attractor: list, player0_move: boolean): list`\nCompute a list of next moves that lead to a winning game for the player 0\nif \"player0_move\" with respect to the game on the graph with the set of\narcs \"A\", its attractor set \"attractor\" and the vertex \"current_vertex\"\nthe token is on.\nParameters | Description\n--------- | ---------\ncurrent_vertex | A vertex\nA | A list of arcs\nattractor | A list representing the attractor set.\nplayer0_move | A flag meaning that it's Player 0's turn to play.`\n\n## References\n<p id=\"bondy-murty\">[1] Bondy, J. A. & Murty, U. S. R. (1976). Graph Theory\nWith Applications. North-Holland.</p>\n<p id=\"casteigts\">[2] Casteigts, A. (2018). A Journey Through Dynamic\nNetworks (with Excursions). Universit√© de Bordeaux.</p>\n<p id=\"berwanger\">[3] Berwanger, D. (2013). Graph games with perfect\ninformation [Lecture notes]. ENS Cachan, Cachan.</p>\n<p id=\"bonato-nowakowski\">[4] Bonato, A. & Nowakowski, R. J. (2011).\nThe Game of Cops and Robbers on Graphs. American Mathematical Society.\nhttp://dx.doi.org/10.1090/stml/061.<p>\n<p id=\"erlebach-spooner\">[5] Erlebach, T & Spooner, J. T. (2019). A\nGame of Cops and Robbers on Graphs with Periodic Edge-Connectivity.\narXiv:1908.06828<p>\n<p id=\"quilliot\">[6] Quilliot, A. (1978). Jeux et pointes fixes sur les\ngraphes. PhD thesis, University of Paris VI.<p>\n<p id=\"nowakowski-winkler\">[7] Nowakowski, R. & Winkler, P. (1983).\nVertex-to-vertex pursuit in a graph. Discrete Mathematics, 32(2-3), 235-239.\nhttps://doi.org/10.1016/0012-365X(83)90160-7.<p>\n<p id=\"sipser\">[8] Sipser, M. (2013). Introduction to the Theory of\nComputation (3rd ed.). Cengage Learning.</p>\n\n## Contribute\nFeel free to contribute by adding new modules for other graph games, creating more\nefficient algorithms for some classes of graphs, or even improving the\nexisting algorithms! For more information on how to contribute to this project,\nread [How to Contribute](#TODO).\n\n## Contact\nIf you have any further questions or want to contribute, feel free to send an\nemail to [Gabriel](https://github.com/gfl-math-stat-info).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gfl-math-stat-info/ggames",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ggames",
    "package_url": "https://pypi.org/project/ggames/",
    "platform": "",
    "project_url": "https://pypi.org/project/ggames/",
    "project_urls": {
      "Homepage": "https://github.com/gfl-math-stat-info/ggames"
    },
    "release_url": "https://pypi.org/project/ggames/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package composed of tools for different games played on graph.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11070318,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a45f12cb478bb87b6ad7447f2717d54a36a9906dfe370415244a163d035739a2",
          "md5": "b182ccb31025a4b0de1d2e39d3b49d1d",
          "sha256": "f724ce8db1a33a30b0edc0fca3db9620f9888f6a41ce48d0405ebefca772c900"
        },
        "downloads": -1,
        "filename": "ggames-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b182ccb31025a4b0de1d2e39d3b49d1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18190,
        "upload_time": "2021-08-01T01:24:35",
        "upload_time_iso_8601": "2021-08-01T01:24:35.942780Z",
        "url": "https://files.pythonhosted.org/packages/a4/5f/12cb478bb87b6ad7447f2717d54a36a9906dfe370415244a163d035739a2/ggames-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6c0609510d4c42e6d50c1257d92544d46530a44d3d15308d70986bfb698a87f",
          "md5": "0d7ec1b324945f6042bf93835ea47c7e",
          "sha256": "42453d8cb30a61e4a042f7b68597ad7ccaf65ce9b327a4943a8c38797ee80839"
        },
        "downloads": -1,
        "filename": "ggames-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d7ec1b324945f6042bf93835ea47c7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20188,
        "upload_time": "2021-08-01T01:24:37",
        "upload_time_iso_8601": "2021-08-01T01:24:37.488107Z",
        "url": "https://files.pythonhosted.org/packages/d6/c0/609510d4c42e6d50c1257d92544d46530a44d3d15308d70986bfb698a87f/ggames-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55b2e48207871825a27d22740c5fd5e88c8ec87bd3dc844e2fe34c860c6babcb",
          "md5": "8564cdd7125e18c9351da05c1ca08d32",
          "sha256": "870e88daa2bab0b828660a940e0a0f7958cd3ce7922d331fd891b8e581db474f"
        },
        "downloads": -1,
        "filename": "ggames-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8564cdd7125e18c9351da05c1ca08d32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21664,
        "upload_time": "2021-08-02T15:35:10",
        "upload_time_iso_8601": "2021-08-02T15:35:10.545409Z",
        "url": "https://files.pythonhosted.org/packages/55/b2/e48207871825a27d22740c5fd5e88c8ec87bd3dc844e2fe34c860c6babcb/ggames-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11379760f47ff23eff4451d447667385d49608c3a59f82a94e76cb9f27038a0d",
          "md5": "fbb019812404e57bcc3c8b09a332fec3",
          "sha256": "c90b1e23a87fd3e92f3d24547c092f043ad1bb87c9917e63aca1528a103ff1c7"
        },
        "downloads": -1,
        "filename": "ggames-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fbb019812404e57bcc3c8b09a332fec3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23262,
        "upload_time": "2021-08-02T15:35:11",
        "upload_time_iso_8601": "2021-08-02T15:35:11.715676Z",
        "url": "https://files.pythonhosted.org/packages/11/37/9760f47ff23eff4451d447667385d49608c3a59f82a94e76cb9f27038a0d/ggames-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55b2e48207871825a27d22740c5fd5e88c8ec87bd3dc844e2fe34c860c6babcb",
        "md5": "8564cdd7125e18c9351da05c1ca08d32",
        "sha256": "870e88daa2bab0b828660a940e0a0f7958cd3ce7922d331fd891b8e581db474f"
      },
      "downloads": -1,
      "filename": "ggames-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8564cdd7125e18c9351da05c1ca08d32",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21664,
      "upload_time": "2021-08-02T15:35:10",
      "upload_time_iso_8601": "2021-08-02T15:35:10.545409Z",
      "url": "https://files.pythonhosted.org/packages/55/b2/e48207871825a27d22740c5fd5e88c8ec87bd3dc844e2fe34c860c6babcb/ggames-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11379760f47ff23eff4451d447667385d49608c3a59f82a94e76cb9f27038a0d",
        "md5": "fbb019812404e57bcc3c8b09a332fec3",
        "sha256": "c90b1e23a87fd3e92f3d24547c092f043ad1bb87c9917e63aca1528a103ff1c7"
      },
      "downloads": -1,
      "filename": "ggames-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fbb019812404e57bcc3c8b09a332fec3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23262,
      "upload_time": "2021-08-02T15:35:11",
      "upload_time_iso_8601": "2021-08-02T15:35:11.715676Z",
      "url": "https://files.pythonhosted.org/packages/11/37/9760f47ff23eff4451d447667385d49608c3a59f82a94e76cb9f27038a0d/ggames-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}