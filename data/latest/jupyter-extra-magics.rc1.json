{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Jupyter Extra Magics\n\nStarting working with Jupyter - we declared basic functionality needed to make Jupyter interactive and ready for processing data.   \n\nAll magics are agnostic to kernel type  and should work on any kernel. Notice that using variables in the magic should declared in python3 context - that means that if you’re using python3 kernel all variables are available in the magic, if you’re using other kernel (PySpark,Spark) you should declare variables with the %%local magic. note that you can apply multiple magics and chain them together.\n\n### Read more with practical examples:\n\nhttps://benm-23166.medium.com/jupyter-helpful-extra-magics-9545075f3138\n\n# Installation:\n\nInstall the package using pip (python > 3.6)\n```\npip install jupyter_extra_magics\n```\nOr using the github repo:\n\n```\ngit clone https://github.com/benmizrahi/jupyter-extra-magics.git && cd jupyter-extra-magics && python3 setup.py sdist bdist_wheel && pip install dist/pdp_extra_magics*.whl\n```\nAfter having the package installed, you need to modify jupyter_notebook_config.py to autoload the magics when Jupyter instance is loaded:\n\n```\nc = get_config()\nc.InteractiveShellApp.extensions = ['extra_magics']\n```\n\nOnce you configure that, the extra magics are ready to use inside Jupyter instance.\n\n# Declarations: \n\n## Estimate Magic:  \n\nAn estimation magic for BQ, this magic can give you the estimated cost & scan of a query usage and parameters:\n\n####  Declaration:\n\n```\n%%estimate\noptional params: \n   block_cost -\n          decimal/integer cost ($) blocker to run the query, \n          if cost is above the amount, Y/N question will be display\n   block_scan -\n          integer (GB) blocker to run the query, \n          if scan is above the amount, Y/N question will be display\n    dry-run -\n          Boolean - If the current cell contains %%bigquery magic ?\n```\n\n----\n## Notifier Magic:  \n\nA magic designed to collect cell execution results and combine notebook results into single EMAIL/SLACK, the magic run immediate and it give us the ability to debug the message while development, each cell output is acceptable as an attachment - Datafream,  Plot, String messages.\n\nUsing this magic requires having 4 environment parameters declared in the Jupyter instance created:  \n\n```\nSLACK_API_TOKEN - sending slack notification using slack sdks for python.read more about the web-token inside slack repo link: (https://github.com/slackapi/python-slack-sdk)   \n\nEMAIL_USER - username for smtp connection to send email.   \n\nEMAIL_PASS - password for smtp connection to send email.   \n\nENV- current running environment (INT/PROD/INTERACTIVE)\n```\n\n####  Declaration:\n\n```\n%%notify_collect \n   kind:\n      EMAIL|SLACK - what is the type of the message we want to send\n   destination:\n      String - how should we notify, a comma separated list \n      of destinations (example: \"email@address.com\") or comma    \n      separated channels (example: #channel,#channel_two)\n   header:\n      String - the EMAIL header message \n   body:\n      String - the email body (will be append before the result-set).\n\n%notify_clean - cleaning the mails loaded until now\n\n%notify \n    show_env - is the env value should be visible in the message header \n    ([INTERACTIVE]|[INT][PROD])\n```\n\n## SuperRun Magic:\n\nA magic that enables the ability to run notebook from another notebook, this magic enables us to split the notebooks into sub notebooks and execute them in the same kernel. this is really effective and enables us to create more modular and splittable notebooks . this magic is also working on interactive mode, getting the needed notebook directly from github \n\n**Notice! path to the notebook should be full path in you're local environment not relative!  \n\n```\n%super_run \n    notebook: \n        String, full path the the notebook location.\n        (example: /full/path/to/other/notebook.ipynb)\n    regex_filter: \n        String, declared regex for the content of the cell, means that if the if the regex pattern\n        exists in the cell, the cell will be executed, if not it will be skip execution.\n        this regex enable us to write \"GENERIC\" notebook in multiple kernel types, and \n        use them where needed.\n```\n\n\n# Contributing\n\nTo learn how to setup a development environment and for contribution guidelines, see CONTRIBUTING.md.   \n\n\n\n\n# Copyright\nSee LICENSE for details. Copyright (c) 20202 Ben Mizrahi",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jupyter-extra-magics",
    "package_url": "https://pypi.org/project/jupyter-extra-magics/",
    "platform": "",
    "project_url": "https://pypi.org/project/jupyter-extra-magics/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/jupyter-extra-magics/1.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Jupyter magics and tools to extend Jupyter env",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8836711,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13b2cafbd6a30fed76b295b5b6cf56002063d69cb2d839daa0e109372a4685b4",
          "md5": "a8388f48e6a1e824c7cb393ce7a81a3b",
          "sha256": "fcb80d1ef392b2e9cc04e626c306521dafb6b292956077e5d57637c25a1d8e7d"
        },
        "downloads": -1,
        "filename": "jupyter_extra_magics-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a8388f48e6a1e824c7cb393ce7a81a3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8506,
        "upload_time": "2020-12-07T07:21:27",
        "upload_time_iso_8601": "2020-12-07T07:21:27.406101Z",
        "url": "https://files.pythonhosted.org/packages/13/b2/cafbd6a30fed76b295b5b6cf56002063d69cb2d839daa0e109372a4685b4/jupyter_extra_magics-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13b2cafbd6a30fed76b295b5b6cf56002063d69cb2d839daa0e109372a4685b4",
        "md5": "a8388f48e6a1e824c7cb393ce7a81a3b",
        "sha256": "fcb80d1ef392b2e9cc04e626c306521dafb6b292956077e5d57637c25a1d8e7d"
      },
      "downloads": -1,
      "filename": "jupyter_extra_magics-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a8388f48e6a1e824c7cb393ce7a81a3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8506,
      "upload_time": "2020-12-07T07:21:27",
      "upload_time_iso_8601": "2020-12-07T07:21:27.406101Z",
      "url": "https://files.pythonhosted.org/packages/13/b2/cafbd6a30fed76b295b5b6cf56002063d69cb2d839daa0e109372a4685b4/jupyter_extra_magics-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}