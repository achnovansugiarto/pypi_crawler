{
  "info": {
    "author": "Daniel L. Bates",
    "author_email": "danbates@verizon.net",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# queens8 Package 0.1.2\nlast change 25-Apr-2022\n\n## Introduction to the n Queens and 8 Queens problem.\nIn the 19th century the n Queens puzzle was formulated. The aim of the puzzle was to place\nn Chess Queens on a n x n chessboard such that no Queen attacks any other Queen. That is every row, every\ncolumn and every diagonal has no more than one of the n Queens placed in that row, column or diagonal.\n\nIn 1848 Chess Master Max Bezzel proposed the problem for n=8, the Chess Board we are all familiar with.\nIn 1850 Franz Nauck extended the problem to other n x n Chess boards, as well as publish soloutions to the 8 x 8\nvariant. Many mathematicians of the time worked on this, including the esteemed Karl Friedrich Gauss.\n\nWith the advent of structured progamming Edsger Dijikstra wrote a program to solve this problem for n=8, with a method\nknown as depth first backtracking. The Dijikstra solution also had an elegant method of charaterizing the diagonals.\n\nIn his program the user chooses which column the Queen on the first row occupies and the program looks for the first\nsolution in placing the other 7 Queens.\n\n|Column Number|Chess Notation|\n|-----------------|------------------|\n|1|Queens Rook 1|\n|2|Queens Knight 1|\n|3|Queens Bishop 1|\n|4|Queen 1|\n|5|King 1|\n|6|Kings Bishop 1|\n|7|Kings Knight 1|\n|8|Kings Rook 1|\n\n## Symmetry\n\nWhen you run this the careful observer will notice the solutions 1 and 8 are really the same with \nthere only being a rotation of the board between them. You might also observe 2 and 6 are the same\nwith a rotation between them.\n\n![Symmetry between solution 1 and 8](ChessSym.png)\n\nA fundamental solution is the set of a solution with all symmetric solutions to that solution. A symmetric\nsolution is either a rotation or a reflection. There is one solution which is exactly equal to it's reflection,\nso it has no reflections.\n\nThere are three counter clockwise rotations, that of 90, 180 and 270 degrees.\n\nA horizontal reflection is a relection around the line which\nlies between the King and Queen columns. A vertical reflection is around the line between the 4th and 5th rows.\nThere are also reflections around the longest up diagonal and the longest down diagonal. Both of these diagonal\nreflections together are a reflection about the center point of the board.\n\nAny composition of these operations is again another symmetry.\nWe keep putting new ones in until there are no new symmetries.\n\n## The Dijikstra Wirth algorithm.\n\nThe Dijikstra algorithm has a set of flags one for every row, every column, every Up Diagonal and every Down Diagonal.\nThis make 8 rows, 8 columns, 15 Up Diagonals and 15 Down diagonals. The Up Diagonals are characterized by K = Row + Column.\nK characterizes the diagonal with K in {2 .. 16}. The DownDiagonals are characterized by K = Row - Column. K\ncharacterizes the diagonal with K in {-7 .. 7}. The diagonal flags (as well as row and column) are lists of flags. The\ndiagonal are lists of length 17. The negative indexes for Down Diagonals work well with Python these being the distance from the\nend of the list.\n\n## This package has 4 different functions.\n\nThis package has 4 different functions which are sellected by menu:\n\n1) The fundamental Dijikstra algorithm with a Graphics like board display.\n\n2) A search for all fundamental solutions, that is pruning symmetries.\n\n3) The Dijikstra algorithm showing the board and all symmetrical boards.\n\n4) Showing which Dijikstra soloutiions are symmetric to each other as sets.\n\n## The Pseudo graphical board display.\n\nThe board is shown by using tkinter. The root frame contains 8 frames, each of which is a row.\nEach row is 8 characters. The Empty square is a Unicode '\\u3000' because an ascii space is not\nsized right. The color of the square is the background color. White Queens '\\u2665' are queens\non black squares and Black Queens '\\u265b' are placed on white squares for good contrasts. An example of\nboard for 1 and 8 are in the section labeled symmetry. The board or boards\nremain until the \"Enter to Proceed!\" is replied to. Then the boards are destroyed.\n\n## Installing Queens8.\n\nThe simplest method : pip install queens8\n\n## Running Queens8.\n\n```\n#!python\n\nfrom queens8 import Queens8\n\nQueens8.Go()\n```\n\nQueens8 will then prompt:\n```\nA  : The orginal Dijkstra and Wirth solution to the 8 queens problem.\nB  : Do all solutions with no symmetries\nC  : Like Queens8 only show the symmetries too\nE  : Of the 8 returned by Queens8 as equivalence sets (no graphics)\nQ  : To Quit \nX  : Same as Q\nselect:q\n\n```\nA Q or an X followed by enter will exit queens8.\n\nAn A or a will prompt for a column on row 1 to place the first queen. All the steps in\nthe depth first backtracking search will be displayed. The final board will be displayed also.\n\n```\nOn which row do you want the first Queen?\nvalid entries an in range 1..8\nenter any other integer to halt.\n?:5\n  1: Place Queen 1 on Row 5\n  2: Place Queen 2 on Row 1\n  3: Place Queen 3 on Row 4\n  4: Place Queen 4 on Row 6\n  5: Place Queen 5 on Row 3\n  5: Take Queen 5 from row 3\n  7: Place Queen 5 on Row 8\n  8: Place Queen 6 on Row 2\n  9: Place Queen 7 on Row 7\n 10: Place Queen 8 on Row 3\n2 6 8 3 1 4 7 5 \nEnter to Proceed\nOn which row do you want the first Queen?\nvalid entries an in range 1..8\nenter any other integer to halt.\n?:0\n```\nThe B entry shows all 12 fundamental solutions. Each board representing all\nsymmetries. This prompts for the choice to see the 12 boards or for a text line\nshowing each column for each row for each solution.\n```\nselect:b\nDisplay Queens Y or N?y\nNumber of Distinct Solutions = 12 Total Solutions = 92\nEnter to Proceed!\n```\nThe C entry is like the A entry, except that the board and all symmetric boards\nare displayed!\n```\nselect:c\nOn which row do you want the first Queen?\nvalid entries an in range 1..8\nenter any other integer to halt.\n?:5\nEnter to Continue\nOn which row do you want the first Queen?\nvalid entries an in range 1..8\nenter any other integer to halt.\n?:0\n```\nThe D entry shows for for the Dijkstra solutions, which ones are really the same\nfundamental solutions.\n```\nselect:e\n{1, 8}\n{2, 6}\n{3}\n{4}\n{5}\n{7}\n\n```\nFor each of the 8 solutions a set of all symmetric solutions is made. The program\nlooks for which one are disjoint, O(n^2^) process.\n\n## Look For:\n\nThis subject is also discussed in a book I have written. I will update this 'README.md'\nwhen the book is published.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DanLBates/queens8",
    "keywords": "'eight','queens','Wirth','Dijkstra','8Queens','dan.bates'",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "queens8",
    "package_url": "https://pypi.org/project/queens8/",
    "platform": null,
    "project_url": "https://pypi.org/project/queens8/",
    "project_urls": {
      "Homepage": "https://github.com/DanLBates/queens8"
    },
    "release_url": "https://pypi.org/project/queens8/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "An Exploration of aspects of the eight queens problem",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13621784,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a212e52d0452ea74a1e24111baeecb5efbda642536d74937ff2b0e5afca0d484",
          "md5": "71795b3914d621907c76be6de816f20f",
          "sha256": "5e59e67849e9530f7c4a8f049564fe37f96fa3e03a358bed0ebb7ff379f71155"
        },
        "downloads": -1,
        "filename": "queens8-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71795b3914d621907c76be6de816f20f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8823,
        "upload_time": "2022-02-17T17:57:10",
        "upload_time_iso_8601": "2022-02-17T17:57:10.312262Z",
        "url": "https://files.pythonhosted.org/packages/a2/12/e52d0452ea74a1e24111baeecb5efbda642536d74937ff2b0e5afca0d484/queens8-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3c34289f7620ba0d86efe8f93ddbff31f07fb479dfa7f70814dd8764b36c4ee",
          "md5": "5e43995fe887ccd278b463fd85e5a405",
          "sha256": "d5cbc782bacdfafc93227df273182cec42130cf2b9eb23f01c501b84627327c5"
        },
        "downloads": -1,
        "filename": "queens8-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e43995fe887ccd278b463fd85e5a405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18027,
        "upload_time": "2022-02-17T17:57:12",
        "upload_time_iso_8601": "2022-02-17T17:57:12.369984Z",
        "url": "https://files.pythonhosted.org/packages/f3/c3/4289f7620ba0d86efe8f93ddbff31f07fb479dfa7f70814dd8764b36c4ee/queens8-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8dd1575d8d2ee1737c6e65dd861eeebd77a3e8915f8e76183d10d33bcf4ce7d",
          "md5": "26060568314d8e9a389c7a80846c3b67",
          "sha256": "1c9aed4c6b62866a18a05de9cf7f866a787a5878ee84024ca3afbdededd3770b"
        },
        "downloads": -1,
        "filename": "queens8-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26060568314d8e9a389c7a80846c3b67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8829,
        "upload_time": "2022-02-17T18:42:07",
        "upload_time_iso_8601": "2022-02-17T18:42:07.188210Z",
        "url": "https://files.pythonhosted.org/packages/a8/dd/1575d8d2ee1737c6e65dd861eeebd77a3e8915f8e76183d10d33bcf4ce7d/queens8-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0016d4c620ccc558c18405079d9cadca26aa3ee0727b5abe3ac68f6b423d65e2",
          "md5": "a7aeaf4508b80b8e13099471c7f1001b",
          "sha256": "974ad0585f4f36547e7bc5f826402abcd6ad98366b92b9ea30fde210777e3150"
        },
        "downloads": -1,
        "filename": "queens8-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a7aeaf4508b80b8e13099471c7f1001b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18038,
        "upload_time": "2022-02-17T18:42:08",
        "upload_time_iso_8601": "2022-02-17T18:42:08.782570Z",
        "url": "https://files.pythonhosted.org/packages/00/16/d4c620ccc558c18405079d9cadca26aa3ee0727b5abe3ac68f6b423d65e2/queens8-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71c7f7e98750f3ed35a6547c53933d2238b44a20bda5f6e54c10f5604d466686",
          "md5": "62f48765d3239cfb3c3868dd8fc3ef70",
          "sha256": "ee932ec88aff3a4b858c98c3723ad36c06045a2aeb00c89ccdea605aebfaf26b"
        },
        "downloads": -1,
        "filename": "queens8-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62f48765d3239cfb3c3868dd8fc3ef70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8835,
        "upload_time": "2022-04-26T01:13:47",
        "upload_time_iso_8601": "2022-04-26T01:13:47.894447Z",
        "url": "https://files.pythonhosted.org/packages/71/c7/f7e98750f3ed35a6547c53933d2238b44a20bda5f6e54c10f5604d466686/queens8-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa12be7fc177613a82ff5639602ce047fff2687b208d91052417a82d5a4cdea4",
          "md5": "e4a81c0af2ed6979a7d8cd109884000b",
          "sha256": "1f99c92d6e88f059e5547095d3e6604cfeebbd8e10af0a76a7950abd9ed409a3"
        },
        "downloads": -1,
        "filename": "queens8-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e4a81c0af2ed6979a7d8cd109884000b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18074,
        "upload_time": "2022-04-26T01:13:49",
        "upload_time_iso_8601": "2022-04-26T01:13:49.344000Z",
        "url": "https://files.pythonhosted.org/packages/fa/12/be7fc177613a82ff5639602ce047fff2687b208d91052417a82d5a4cdea4/queens8-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71c7f7e98750f3ed35a6547c53933d2238b44a20bda5f6e54c10f5604d466686",
        "md5": "62f48765d3239cfb3c3868dd8fc3ef70",
        "sha256": "ee932ec88aff3a4b858c98c3723ad36c06045a2aeb00c89ccdea605aebfaf26b"
      },
      "downloads": -1,
      "filename": "queens8-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62f48765d3239cfb3c3868dd8fc3ef70",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 8835,
      "upload_time": "2022-04-26T01:13:47",
      "upload_time_iso_8601": "2022-04-26T01:13:47.894447Z",
      "url": "https://files.pythonhosted.org/packages/71/c7/f7e98750f3ed35a6547c53933d2238b44a20bda5f6e54c10f5604d466686/queens8-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa12be7fc177613a82ff5639602ce047fff2687b208d91052417a82d5a4cdea4",
        "md5": "e4a81c0af2ed6979a7d8cd109884000b",
        "sha256": "1f99c92d6e88f059e5547095d3e6604cfeebbd8e10af0a76a7950abd9ed409a3"
      },
      "downloads": -1,
      "filename": "queens8-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e4a81c0af2ed6979a7d8cd109884000b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 18074,
      "upload_time": "2022-04-26T01:13:49",
      "upload_time_iso_8601": "2022-04-26T01:13:49.344000Z",
      "url": "https://files.pythonhosted.org/packages/fa/12/be7fc177613a82ff5639602ce047fff2687b208d91052417a82d5a4cdea4/queens8-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}