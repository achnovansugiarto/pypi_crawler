{
  "info": {
    "author": "Andrey Semenov",
    "author_email": "gatekeeper.mail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# fast_enum\nA fast Enum implementation for Python\n\nThe purpose is to replace Python3.4+ standard library Enum.\n\nThe main objective to using standard library's Enum is that it's super slow.\n\nFeatures implemented:\n- as in stdlib's enums all Enum members are instances of the Enum itself\n```python\ntype(LightEnum.ONE)\n# <class 'LightEnum'>\n```\n- all enum members have at least `name` and `value` properties; the `name` property\n is a string containing the class member's name itself; the `value` property contains the value\n  assigned\n ```python\nclass ValuesGivenEnum(metaclass=FastEnum):\n    ONE: 'ValuesGivenEnum' = 1\n    FOUR: 'ValuesGivenEnum' = 4\n    ELEVEN: 'ValuesGivenEnum' = 11\n\nValuesGivenEnum.FOUR\n# <ValuesGivenEnum.FOUR: 4>\nValuesGivenEnum.FOUR.value\n# 4\nValuesGivenEnum.FOUR.name\n# 'FOUR'\n```\n- a lightweight form of enum declaration is possible\n```python\nclass LightEnum(metaclass=FastEnum):\n    ONE: 'LightEnum'\n    TWO: 'LightEnum'\n    THREE: 'LightEnum'\n```\n When this form is used it is strictly required that members are \"type-hinted\"\n as instances of the enum class. Otherwise they will remain just as property/attributes\n annotations deep inside the `cls.__annotations__`\n\n- an enum could be accessed by value\n```python\nLightEnum(1)\n# <LightEnum.ONE: 1>\n```\n- or by name\n```python\nLightEnum['ONE']\n# <LightEnum.ONE: 1>\n```\n\n- it is possible to mix lightweight declaration and a value-provided one in the same class:\n```python\nclass MixedEnum(metaclass=FastEnum):\n    _ZERO_VALUED = 1\n    AUTO_ZERO: 'MixedEnum'\n    ONE: 'MixedEnum' = 1\n    AUTO_ONE: 'MixedEnum'\n    TWO: 'MixedEnum' = 2\n\nMixedEnum(1)\n# <MixedEnum.ONE: 1>\nMixedEnum.AUTO_ZERO\n# <MixedEnum.AUTO_ZERO: 0>\nMixedEnum.AUTO_ONE\n# <MixedEnum.ONE: 1>\n```\n When this form is used, if there are more than one Enum with the same value as a result (`MixedEnum.AUTO_ONE.value`\n and `MixedEnum.ONE.value` in this example) all subsequent enums are rendered as just aliases to the first declared\n (the order of declaration is: first value-provided enums then lightweight forms so auto-valued will always become\n aliases, not vice versa). The auto-valued enums value provider is independent from value-provided ones.\n\n- as shown in the previous example, a special attribute `_ZERO_VALUED` could be provided in class declaration;\n given it's value renders to `True` in boolean context auto-valued enums will start from zero instead of integer 1;\n The `_ZERO_VALUED` attribute is erased from the resulting enum type \n\n- an enum creation can be hooked with 'late-init'. If a special method `def __init_late(self): ...` is provided within\n enum class' declaration, it's run for every enum instance created after all of them are created successfully\n```python\nclass HookedEnum(metaclass=FastEnum):\n    halved_value: 'HookedEnum'\n\n    __slots__ = ('halved_value',)\n\n    def __init_late(self):\n        # noinspection PyTypeChecker\n        self.halved_value: 'HookedEnum' = self.__class__(self.value // 2)\n\n    ZERO: 'HookedEnum' = 0\n    ONE: 'HookedEnum' = 1\n    TWO: 'HookedEnum' = 2\n    THREE: 'HookedEnum' = 3\n\nHookedEnum.ZERO.halved_value\n#<HookedEnum.ZERO: 0>\nHookedEnum.ONE.halved_value\n#<HookedEnum.ZERO: 0>\nHookedEnum.TWO.halved_value\n#<HookedEnum.ONE: 1>\nHookedEnum.THREE.halved_value\n#<HookedEnum.ONE: 1>\n```\n\n- enums are singletons\n```python\nfrom pickle import dumps, loads\no = LightEnum.ONE\nr = loads(dumps(o))\nid(o)\n# 139649196736456\nid(r)\n# 139649196736456\no is r\n# True\n```\n- enums are hashable\n```python\nlist(LightEnum)\n# [<LightEnum.ONE: 1>, <LightEnum.TWO: 2>, <LightEnum.THREE: 3>]\nset(LightEnum)\n# {<LightEnum.ONE: 1>, <LightEnum.TWO: 2>, <LightEnum.THREE: 3>}\n```\n- enums are easily extended if one needs\n```python\nclass ExtendedEnum(metaclass=FastEnum):\n    description: Text\n    __slots__ = ('description',)\n\n    def __init__(self, value, description, name):\n        self.value = value\n        self.name = name\n        self.description = description\n\n    def describe(self):\n        return self.description\n\n    RED = 'red', 'a color of blood'\n    GREEN = 'green', 'a color of grass in the spring'\n\nExtendedEnum.GREEN\n# <ExtendedEnum.GREEN: green>\nstr(ExtendedEnum.GREEN)\n# 'ExtendedEnum.GREEN'\nExtendedEnum.GREEN.name\n# 'GREEN'\nExtendedEnum.GREEN.value\n# 'green'\nExtendedEnum.GREEN.description\n# 'a color of grass in the spring'\nExtendedEnum.GREEN.describe()\n# 'a color of grass in the spring'\n```\n In case an enum has extended set of fields it it must be guaranteed that the `__init__`\n method has the `name` argument in the last position. It's because enum instances are\n instantiated like `enumtype(*value, name=name)` where `value` is the right side of\n assignment in the code `RED = 'red', 'a color of blood'` (in case the right side is not\n a tuple-like object it is wrapped into tuple beforehand)\n- protected from modifications\n```python\ndel LightEnum.ONE\n#Traceback (most recent call last):\n#  File \"<stdin>\", line 1, in <module>\n#  File \"fastenum.py\", line 81, in __delattr__\n#    self.__restrict_modification()\n#  File \"fastenum.py\", line 69, in __restrict_modification\n#    raise TypeError(f'Enum-like classes strictly prohibit changing any attribute/property after they are once set')\n#TypeError: Enum-like classes strictly prohibit changing any attribute/property after they are once set\ndel LightEnum.ONE.name\n#Traceback (most recent call last):\n#  File \"<stdin>\", line 1, in <module>\n#  File \"fastenum.py\", line 69, in __restrict_modification\n#    raise TypeError(f'Enum-like classes strictly prohibit changing any attribute/property after they are once set')\n#TypeError: Enum-like classes strictly prohibit changing any attribute/property after they are once set\nExtendedEnum.GREEN.description = \"I've changed my mind, it's a colour of swamps\"\n#Traceback (most recent call last):\n#  File \"<stdin>\", line 1, in <module>\n#  File \"fastenum.py\", line 69, in __restrict_modification\n#    raise TypeError(f'Enum-like classes strictly prohibit changing any attribute/property after they are once set')\n#TypeError: Enum-like classes strictly prohibit changing any attribute/property after they are once set\n```\n- protected from subclassing\n```python\nclass LightSub(LightEnum):\n    FOUR: 'LightSub'\n\n#Traceback (most recent call last):\n#  File \"<stdin>\", line 1, in <module>\n#  File \"fastenum.py\", line 34, in __new__\n#    typ.__call__ = typ.__new__ = typ.get\n#  File \"fastenum.py\", line 76, in __setattr__\n#    self.__restrict_modification()\n#  File \"fastenum.py\", line 69, in __restrict_modification\n#    raise TypeError(f'Enum-like classes strictly prohibit changing any attribute/property after they are once set')\n#TypeError: Enum-like classes strictly prohibit changing any attribute/property after they are once set\n```\n- but you could declare a class providing no new values (the result will be just an alias):\n```python\nclass LightAlias(LightEnum):\n    pass\n\nLightAlias.ONE\n# <LightEnum.ONE: 1>\n```\n- and extensible in superclasses\n```python\nclass ExtEnumBase(metaclass=FastEnum):\n    description: Text\n\n    __slots__ = ('description',)\n\n    def __init__(self, value, description, name):\n        self.value = value\n        self.name = name\n        self.description = description\n\n\nclass ExtEnumOne(ExtEnumBase):\n    ONE = 1, 'First positive integer'\n    TWO = 2, 'Second positive integer'\n\n\nclass ExtEnumTwo(ExtEnumBase):\n    RED = 'red', 'A sunset'\n    GREEN = 'green', 'Allows to cross the road'\n```\n- as requested after publication, it's possible to subclass arbitrary classes (look at tests for more) starting from 1.3:\n```python\nclass IntEnum(int, metaclass=FastEnum):\n    ONE = 1\n    TWO = 2\n\n# >>> IntEnum.ONE == 1\n# True\n# >>> IntEnum.ONE * 100\n# 100\n\nimport sys\nsys.exit(IntEnum.TWO)  # sets python's interpreter exit code to 2\n```\n\n- faster than standard library's one\n```\nIn [2]: %timeit ValuesGivenEnum.FOUR\n21.4 ns ± 0.196 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n\nIn [3]: %timeit ValuesGivenEnum.FOUR.name\n30.3 ns ± 0.121 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n\nIn [4]: %timeit ValuesGivenEnum.FOUR.value\n30.4 ns ± 0.166 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n\nIn [5]: %timeit ValuesGivenEnum(4)\n111 ns ± 0.599 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n\nIn [6]: %timeit ValuesGivenEnum['FOUR']\n84.6 ns ± 0.188 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n```\n compare that to\n```python\n# Classic enum\nfrom enum import Enum\nclass StdEnum(Enum):\n    ONE = 1\n    TWO = 2\n```\n```\nIn [7]: %timeit StdEnum.ONE\n69.2 ns ± 0.195 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n\nIn [8]: %timeit StdEnum.ONE.name\n247 ns ± 0.501 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [9]: %timeit StdEnum.ONE.value\n249 ns ± 1.43 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [10]: %timeit StdEnum(1)\n380 ns ± 3.74 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [11]: %timeit StdEnum['ONE']\n134 ns ± 0.246 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n```\n  That is:\n   - 3 times faster on enum's member access\n   - ~8.5 times faster on enum's property (`name`, `value`) access\n   - 3 times faster on enum's access by val (call on enum's class `MyEnum(value)`)\n   - 1.5 times faster on enum's access by name (dict-like `MyEnum[name]`)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QratorLabs/fastenum",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fast-enum",
    "package_url": "https://pypi.org/project/fast-enum/",
    "platform": "any",
    "project_url": "https://pypi.org/project/fast-enum/",
    "project_urls": {
      "Homepage": "https://github.com/QratorLabs/fastenum"
    },
    "release_url": "https://pypi.org/project/fast-enum/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A fast pure-python implementation of Enum",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6332737,
  "releases": {
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "497bdd888e182f3f3d8dd4b8721b79584c9f70f2dd5922183f46c3e138ea1c6c",
          "md5": "f58b403ab8a0ebc2ab30c9bebb6ecb95",
          "sha256": "3798f0baca249432879d93fe673040a99274fbfdef76431b387f875ecda44be7"
        },
        "downloads": -1,
        "filename": "fast_enum-1.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f58b403ab8a0ebc2ab30c9bebb6ecb95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9762,
        "upload_time": "2019-11-28T11:25:52",
        "upload_time_iso_8601": "2019-11-28T11:25:52.047568Z",
        "url": "https://files.pythonhosted.org/packages/49/7b/dd888e182f3f3d8dd4b8721b79584c9f70f2dd5922183f46c3e138ea1c6c/fast_enum-1.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7afe140e8ec7efc7b9990461257d7bfe41b50fa6c59a468d9766b813d12a4511",
          "md5": "385845921801a998ef6611d0e680e803",
          "sha256": "f0f1d4439e17bd2280e3f97480e2c9aac082880c3a0baff35b4def9efb63ef09"
        },
        "downloads": -1,
        "filename": "fast-enum-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "385845921801a998ef6611d0e680e803",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7474,
        "upload_time": "2019-11-28T11:25:54",
        "upload_time_iso_8601": "2019-11-28T11:25:54.441610Z",
        "url": "https://files.pythonhosted.org/packages/7a/fe/140e8ec7efc7b9990461257d7bfe41b50fa6c59a468d9766b813d12a4511/fast-enum-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d945de3a7d69130c1db32876d82cd6f90ac7f89922e9dba9e67224885f50415",
          "md5": "d4d6cd5228276645b3a2ad0e7d303631",
          "sha256": "9ea5105e7789f1b805962bdef0f232537a3b5e03d9ae46c53511ad686f0bd88d"
        },
        "downloads": -1,
        "filename": "fast_enum-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4d6cd5228276645b3a2ad0e7d303631",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10347,
        "upload_time": "2019-12-19T15:31:39",
        "upload_time_iso_8601": "2019-12-19T15:31:39.190477Z",
        "url": "https://files.pythonhosted.org/packages/0d/94/5de3a7d69130c1db32876d82cd6f90ac7f89922e9dba9e67224885f50415/fast_enum-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6b6369ce2c8ae78f7d4b20da6e8eee484658b70a246a9172a033e71043ec2ff",
          "md5": "e83c0e077a68524afee673cc83cf83c5",
          "sha256": "4ea5b8f263eeb295bcaa6b377eec7ae1e3df20754dfbd7ead1a3aa78a8f0fc0e"
        },
        "downloads": -1,
        "filename": "fast-enum-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e83c0e077a68524afee673cc83cf83c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9444,
        "upload_time": "2019-12-19T15:31:42",
        "upload_time_iso_8601": "2019-12-19T15:31:42.211260Z",
        "url": "https://files.pythonhosted.org/packages/d6/b6/369ce2c8ae78f7d4b20da6e8eee484658b70a246a9172a033e71043ec2ff/fast-enum-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d945de3a7d69130c1db32876d82cd6f90ac7f89922e9dba9e67224885f50415",
        "md5": "d4d6cd5228276645b3a2ad0e7d303631",
        "sha256": "9ea5105e7789f1b805962bdef0f232537a3b5e03d9ae46c53511ad686f0bd88d"
      },
      "downloads": -1,
      "filename": "fast_enum-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4d6cd5228276645b3a2ad0e7d303631",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10347,
      "upload_time": "2019-12-19T15:31:39",
      "upload_time_iso_8601": "2019-12-19T15:31:39.190477Z",
      "url": "https://files.pythonhosted.org/packages/0d/94/5de3a7d69130c1db32876d82cd6f90ac7f89922e9dba9e67224885f50415/fast_enum-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6b6369ce2c8ae78f7d4b20da6e8eee484658b70a246a9172a033e71043ec2ff",
        "md5": "e83c0e077a68524afee673cc83cf83c5",
        "sha256": "4ea5b8f263eeb295bcaa6b377eec7ae1e3df20754dfbd7ead1a3aa78a8f0fc0e"
      },
      "downloads": -1,
      "filename": "fast-enum-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e83c0e077a68524afee673cc83cf83c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9444,
      "upload_time": "2019-12-19T15:31:42",
      "upload_time_iso_8601": "2019-12-19T15:31:42.211260Z",
      "url": "https://files.pythonhosted.org/packages/d6/b6/369ce2c8ae78f7d4b20da6e8eee484658b70a246a9172a033e71043ec2ff/fast-enum-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}