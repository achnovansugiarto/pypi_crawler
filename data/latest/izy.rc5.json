{
  "info": {
    "author": "Mohsen Tabasi",
    "author_email": "m.tabasy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n\n# izy\n\nPython functions and classes that make it even *easier*! You will wonder why these are not already built-in in python! :)\n\n> You can skip README and follow (and run) its equivalent [demo notebook](https://colab.research.google.com/github/tabasy/izy/blob/main/notebooks/demo.ipynb).\n\nThe sooner you `pip install izy`, the less time you waste! Just 3 keystrokes to install and import :)\n\n```bash\npip install izy\n```\nNow that you have it, here are the functionalities:\n\n# Sorting\n\nSome operations like `argsort` need 1 or 2 lines to implement in python, but the code is not pythonically readable as it should be. Some other functions like `topk` are somehow hidden in the built-in modules, which we expose with ease!\n\nLet us have a big list of numbers and give it an `izy` try:\n\n\n```python\nfrom izy import *\n\nmylist = [4.2, 10, -8, 0, 4, 33, 6, 97, 1, 6., 41, -6, 0.0]\n\n>>> topk(mylist, 4)\n[97, 41, 33, 10]\n\n>>> topk(mylist, -3)     # as you would expect\n[-8, -6, 0]\n\n>>> argmin(mylist), argmax(mylist)\n(2, 7)\n\n>>> argsort(mylist)\n[2, 11, 3, 12, 8, 4, 0, 6, 9, 1, 5, 10, 7]\n\n>>> descending(mylist)   # I like it more than sorted(x, reverse=True)\n[97, 41, 33, 10, 6, 6.0, 4.2, 4, 1, 0, 0.0, -6, -8]\n\n>>> reorder(mylist, argsort(mylist))    # like numpy array indexing\n[-8, -6, 0, 0.0, 1, 4, 4.2, 6, 6.0, 10, 33, 41, 97]\n```\n\n\nIf you have a `dict` (or more precisely a `Mapping`), the `arg*` functions take `keys` as indices:\n\n\n```python\nmydict = {'a': 1, 'b': 4, 'c': -1}\n\n>>> argmin(mydict)\n'c'\n\n>>> reorder(mydict, argsort(mydict))    # as it should be\nOrderedDict([('c', -1), ('a', 1), ('b', 4)])\n```\n\nIf you liked what `reorder()` did to a dictionary, consider `ordered()` as an alternative to built-in `sorted()`. `ordered()` tries to return the sorted (ordered) variant of the input, while preserving its key properties. The behavior is as follows:\n* `Mapping`-> `OrderedDict` which is a `Mapping` too.\n* `MutableSequence` or `MutableSet` -> `list` (equivalent to `sorted()` in this case)\n* *immutable* `Sequence` or `Set` -> `tuple`\n\n```python\n>>> ordered(mydict)\nOrderedDict([('c', -1), ('a', 1), ('b', 4)])\n\n>>> ordered(frozenset({2, 4, -5}))\n(-5, 2, 4)\n```\n\n\n# Scorer\n\nThe `Scorer` is a `dict` subclass for scoring hashable items. It generalizes functionality of built-in `Counter` to floating-point numbers with full math operation support.\n\n\n```python\nfrom izy import Scorer\n\ns1 = Scorer({'a': 1, 'b': 2, 'c': 5})\ns1['d'] = 3\n\n>>> s1\nScorer({c: 5, d: 3, b: 2, a: 1})\n\ns2 = Scorer('abc', [-2, 3, 4])\n\n>>> s2\nScorer({c: 4, b: 3, a: -2})\n```\n\nMathematical operators (`+`, `-`, `*`, `/`, `//`, `%`, `**`) are supported for both `Scorer` and scalar right-hand operands. \n\n\n```python\n>>> s1 + s2\nScorer({c: 9, b: 5, d: 3, a: -1})\n\n>>> s1 / 4\nScorer({c: 1.25, d: 0.75, b: 0.5, a: 0.25})\n```\n\n\n> ***WARNING!*** To support partial update with math operations, we carry non-common items from the first operand unchanged, but those from the second operand are ignored.\n\nUnary math operators (`+`, `-`) are available too.\n\n\n```python\n>>> +s2             # special usage for useless uniary `+` (only keeps positive itmes)\nScorer({c: 4, b: 3})\n\n>>> s1 + (+s2)      # not equivalent to s1 + s2\nScorer({c: 9, b: 5, d: 3, a: 1})\n```\n\nWe also have `abs()`, `round()`:\n\n```python\n>>> abs(s2))\nScorer({c: 4, b: 3, a: 2})\n\n>>> round(s2/4, 1)\nScorer({c: 1.0, b: 0.8, a: -0.5})\n```\n\nLogical operators `&`, `|` apply element-wise min/max and they are also applicable to scalars. As `Scorer` is not a `set` or even `multiset` (like `Counter`), we don't refer to these as intersection and union, but the functionalities are still similar. \n\n\n```python\n>>> abs(s1 & s2)      # ~ min (drops non-common items)\nScorer({c: 4, a: 2, b: 2})\n\n>>> s1 & 2            # drops items with score less than 2\nScorer({c: 5, d: 3, b: 2})\n\n>>> s1 | s2           # ~ max\nScorer({c: 5, b: 3, d: 3, a: 1})\n\n```\n\n> About the above warning, note that `(s1 | (s1 & s2))` gives the subset of `s1` which also exists in `s2`. You can use this to force math operations to return common items only.\n\nAnd finally the ultimate goal of the `Scorer` is to sort its items according to scores and give us the `best`, `topk` (or `worst`, `bottomk`).\n\n\n```python\n>>> s1.best()           \n('c', 5)\n\n>>> s1.topk(3)           # alias to `s1.best` but more readable when you specify the number of items\n[('c', 5), ('d', 3), ('b', 2)]\n\n>>> s1.topk(-2)         # negative k means bottom k\n[('a', 1), ('b', 2)]\n\n>>> s1.ascending()   # prefer this to `best` or `topk` with special values of n or k (None, 0, inf)\n[('a', 1), ('b', 2), ('d', 3), ('c', 5)]\n\n>>> s1.median()         # if scorer length is even, lower median is returned\n('b', 2)\n```\n\n\n\n# Decorators\n\nPython `functools` is really interesting, but it really lacks some generally usefull   decorators. There are some sippets scattered around and in [PythonDecoratorLibrary](https://wiki.python.org/moin/PythonDecoratorLibrary), but I wanted to gather my favourites in a single package.\n\nFirst, `@returns()` and `@yields()` make your function/generator return/yield `namedtuple`s to more pythonically access your function output. It also looks like an easy documentation to me (about the *meaning* of what function returns and not just the `type`).\n\n\n```python\nfrom izy import *\n\n@returns(x='the input', plus_one='input + 1')\ndef myfunction(x):\n    return x, x+1\n\n@yields('a', 'a_doubled')\ndef mygenerator(x):\n    for i in range(x):\n        yield i, i*2\n\n>>> myfunction(5)\nmyfunction_output(x=5, plus_one=6)\n\n>>> myfunction(5).plus_one\n6\n\n>>> myfunction.__doc__\n Returns:\n    x: the input\n    plus_one: input + 1\n```\n\n`@returns_time()` calculates function runtime and returns it as a `datetime.timedelta` object. You can change time format to `milis` (`int`) or `seconds` (`float`). It returns a  `namedtuple` which you can rename with using `@returns`.\n\n\n```python\n@returns_time()\ndef timed(x):\n    z = 0\n    for i in range(x * 1000000):\n        z += i\n\n@returns('output', 'milis')\n@returns_time(milis=True)\ndef timed_milis(x):\n    z = 0\n    for i in range(x * 1000000):\n        z += i\n    return 'done'\n\n>>> timed(64)\ntimed_output(output=None, time=datetime.timedelta(seconds=4, microseconds=701631))\n\n>>> timed_milis(32)\ntimed_milis_output(output='done', milis=2297)\n```\n\n`@logs()` does what it says at three stages: before calling, after returning and on exceptions. You can control log level for each stage, log `to_file` using default logger (named after the function) or pass your own `logging.Logger`.\n\n\n```python\nimport logging\n\nroot_logger = logging.getLogger()\nroot_logger.setLevel(logging.DEBUG)\n\n@logs(before=logging.DEBUG, after=logging.INFO,\n      to_file='logged.log', file_mode='a')\ndef logged(x, **kw):\n    for i in range(1000000):\n        x += i\n  \n>>> logged(1, key1=5, key2=7.2)\n[2022-01-09 12:38:41][logged][DEBUG] - Function `logged` called with args: (1, key1=5, key2=7.2)\n[2022-01-09 12:38:41][logged][INFO] - Function `logged` returned after 0:00:00.075534 with output: None\n```\n\n\n`@fix_this()` reminds you to fix something in a stronger way than a passive comment. It raises `UserWarning` at runtime and does this everytime :)\n\n\n\n```python\n@fix_this('It always prints ValueError, errors should be raised!')\ndef please(x):\n    print('ValueError')\n```\n\nThis one `@ignores()` exceptions you define (and returns `None`). Who knows when and why you need this? :) You can stack it on top of `@logs()` to be aware of ignored exceptions.  \n\n\n```python\n@ignores(ValueError, IndexError)\n@logs()\ndef ignorer(x):\n    for i in range(x):\n        raise ValueError\n\n>>> ignorer(5)    # no error raises, only logging it\n[2022-01-09 12:38:41][ignorer][DEBUG] - Function `ignorer` called with args: (5)\n[2022-01-09 12:38:41][ignorer][ERROR] - ValueError() raised in `ignorer` after 0:00:00.003514!\n```\n\nWant more useful exception handler? `@fallsback()` falls back on specified exception to predefined return value or another `callable`. For multiple exceptions, stack it like this:\n\n\n```python\nimport math\n\n@fallsback(ZeroDivisionError, float('inf'))\n@fallsback(ValueError, lambda x: x**2)\ndef multifb(x):\n    if x < 0:\n        raise ValueError\n    elif x == 0:\n        raise ZeroDivisionError\n    else:\n      return 1 / math.sqrt(x)\n\n>>> multifb(25)\n0.2\n>>> multifb(-5)   # falls back to callable\n25\n>>> multifb(0)     # falls back to value\ninf\n```\n\n# Bidict\n> If you already heard about (and used) the great [`bidict`](https://github.com/jab/bidict) package, you can simply skip this one as this is merely a minimal bidict for those in a hurry :).\n\nThe **Bidi**rectional **dict**ionary is an invertible one-to-one mapping (a bijection). Obviously both sides should be valid dictionary keys. Uniqueness in either side is preserved by removing previous confilcting pairs, without any warnings. \n\n\n```python\nfrom izy import Bidict\n\nbd = Bidict({'a': 1, 'b': 2, 'c': 5})\n\nbd = Bidict([('a', 1), ('b', 2), ('c', 5)])\n\nbd = Bidict(a=1, b=2, c=5)  # nothing special, just like dict()\n\n>>> bd              # all above are quivalent to\nBidict({'a': 1, 'b': 2, 'c': 5})\n```\n\nThis is how you would access the mapping, in the direct way or reversed:\n\n```python\n>>> bd.r     # or bd.reverse\n{1: 'a', 2: 'b', 5: 'c'}\n>>> bd['c']\n5\n>>> bd.r[5]\n'c'\n```\n\nIt is recommended to name the two directions of your `Bidict` to make your code more readable.\n\n\n```python\nbd = Bidict('char', 'id')           # or Bidict('char-id')\nbd.update({'a': 1, 'b': 2, 'c': 5})\n\n>>> bd\nBidict({'a': 1, 'b': 2, 'c': 5})\n\nbd = Bidict(char=['a', 'b', 'c'], id=[1, 2, 5])\n>>> bd\nBidict({'a': 1, 'b': 2, 'c': 5})\n\n>>> bd.id['c']\n5\n>>> bd.char[5]\n'c'\n\n>>> bd.char2id['c']   # more expressive access\n5\n>>> bd.id2char[5]\n'c'\n```\n\nOn evey update, the `Bidict` makes sure that all values in both directions remain unique. This is done by removing every existing pair which has conflict with the new one (overwritig).\n\n\n```python\nbd.char[2] = 'c'  # two conflicting pairs ('b', 2), ('c', 5) are removed\n\n>>> bd\nBidict({'a': 1, 'c': 2})\n```\n\nNot to mention that a `Bidict` and its reversed views (`bd.r` or other accessors) are still a `dict`.\n\n```python\n>>> isinstance(bd, dict)\nTrue\n\n>>> for char, id in bd.r.items():\n        print(char, id)\n1 a\n2 c\n```\n\n# Regex\n\nHere are some functions to help you create complex regular expressions. These functions are especially useful for some *hard-to-remember* and *hard-to-read* pattern syntaxes, like lookahead, lookbehind patterns.\n\n```python\np = make_regex(\n   following('then '),      # lookbehind\n   charset('a-z '), '+',\n   followed_by(r' end')     # lookahead\n)\n\n>>> p.pattern\n'(?<=then )[a-z ]+(?= end)'\n\n>>> p.search('if condition then do something end; etc')\n<re.Match object; span=(18, 30), match='do something'>\n\np = make_regex(\n   any_of('ali', 'hossein', 'javad'),\n   '\\s+',\n   grouped(any_of('goodarzi', 'sharafi'), name='family')\n)\n\n>>> p.pattern\n'(?:hossein|javad|ali)\\s+(?P<family>(?:goodarzi|sharafi))'\n\n>>> match = p.search('his name is hossein sharafi.')\n>>> match\n<re.Match object; span=(12, 27), match='hossein sharafi'>\n\n>>> match.group('family')\n'sharafi'\n```\n\n# Head\n\nThis simple function `head()` gives you a brief insight about the structure and contents of a possible large and nested python data object. The key use case is when you load a large `.json` file for the first time in a jupyter notebook.\n\n```python\nx = [\n   (1, 2, 3, 4),\n   {1: range(3), 2: range(2, 40, 2), 5: 6, 7: 8},\n   range(1000),\n   (7, 8, 9, 10),\n   *range(10)\n]\n\n>>> head(x)\n[(1, 2, 3), {1: (0, 1, 2), 2: (2, 4, 6), 5: 6, 7: 8}, (0, 1, 2)]\n\n>>> head(x, n=2, ellipsis=True)\n[(1, 2, ...), {1: (0, 1, ...), 2: (2, 4, ...), ...: ...}, ...]\n\n>>> print(phead(x))\n[ (1, 2, 3, ...),\n  {1: (0, 1, 2), 2: (2, 4, 6, ...), 5: 6, ...: ...},\n  (0, 1, 2, ...),\n  ...]\n\n>>> hprint(x, n=5, width=32, indent=4)\n[   (1, 2, 3, 4),\n    {   1: (0, 1, 2),\n        2: (   2,\n               4,\n               6,\n               8,\n               10,\n               ...),\n        5: 6,\n        7: 8},\n    (0, 1, 2, 3, 4, ...),\n    (7, 8, 9, 10),\n    0,\n    ...]\n```\n\n# Table\n\nIf you have a small tabular data and you don't want to install `numpy`, `pandas` just to handle it, here is the thing for you. The `Table` is a simple pure-python container for tabular data:\n\n```python\n# create table using dict of lists (columns)\ndata = {\n   'a': [3, 5, 21638540, 'very-loong-value'],\n   'b': [16, 8, 0, 1],\n   'c': [0, 5, 6, None],\n   }\ntable = Table(data)\n\n>>> print(table.draw())\na               b    c      \n============================\n3               16   0      \n5               8    5      \n21638540        0    6      \nvery-loong-va.. 1    None\n\n# ... or a list of dicts (rows)\ndata = [\n   {'a': 3, 'b': 16, 'c': 0},\n   {'a': 5, 'b': 8, 'c': 5},\n   {'a': 21638540, 'b': 0, 'c': 6},\n   {'b': 1, 'a': 'very-loong-value'},\n   ]\ntable = Table(data)\n\n>>> print(table.draw())\na               b    c      \n============================\n3               16   0      \n5               8    5      \n21638540        0    6      \nvery-loong-va.. 1    None\n```\n\nYou can easily access columns, rows, or a slice of the table:\n\n```python\n>>> table['b']      # access table columns (by str key)\n[16, 8, 0, 1]\n\n>>> table[2]        # access table rows (by int key)\n{'a': 21638540, 'b': 0, 'c': 6}\n\n>>> table[1:3]      # or get a slice of table\na          b   c   \n===================\n5          8   5   \n21638540   0   6\n```\nConcatenate tables:\n```python\n>>> table[:2] + table[2:]\na               b    c      \n============================\n3               16   0      \n5               8    5      \n21638540        0    6      \nvery-loong-va.. 1    None\n```\nAnd manipulate table data:\n```python\n# add/change a column\n>>> table['d'] = [0] * len(table)\n>>> table\na               b    c      d   \n================================\n3               16   0      0   \n5               8    5      0   \n21638540        0    6      0   \nvery-loong-va.. 1    None   0\n\n# manipulate table rows\n>>> table[1] = {'a': 5, 'b': 55, 'c': 555}\n>>> table.append({'b': 66, 'c': 666})\n>>> table\na               b    c      d      \n===================================\n3               16   0      0      \n5               55   555    None   \n21638540        0    6      0      \nvery-loong-va.. 1    None   0      \nNone            66   666    None\n```\n\n`csv` read/write is alse there:\n```python\n>>> table.to_csv('output.tsv')\n>>> Table.from_csv('output.tsv')\na               b    c      d      \n===================================\n3               16   0      0      \n5               55   555    None   \n21638540        0    6      0      \nvery-loong-va.. 1    None   0      \nNone            66   666    None\n```\n\n# Path\n\nYet another `path` operations toolkit along with `pathlib`, `path.py`. This one is based on the standard `pathlib` and shares most of advantages of `path.py`. What makes it different is the convenient *method-chaining* api, and its file read/write methods.\n\n```python\nd = Path('path/to').mkdir()\np = (d / 'file').with_suffix('.txt').touch()\n\n>>> p.copy(d / 'copy.txt').name\n'copy.txt'\n\n>>> len(d.glob('*.txt'))\n2\n>>> d.parent.rmdir(recursive=True).exists()\nFalse\n```\n\n`FilePath` is a `Path` which handles some file read/write operations which are not relevant to a Path.\n\n```python\nf = FilePath('path/to', 'file.txt')\n\n>>> f.mkdir().write_text('hello world!').read_text()\n'hello world!'\n\n>>> f.print({'x': 4, 'y':5}).aprint({'x': 6, 'y':7}).get_size()\n36\n\n>>> print(f.read_text())\n{'x': 4, 'y': 5}\n{'x': 6, 'y': 7}\n\n>>> f.pickle({'x': 4, 'y': 5}).pickle({'x': 6, 'y': 7}, append=True).unpickle()\n[{'x': 4, 'y': 5}, {'x': 6, 'y': 7}]\n```\nRead/write operations for `json` and `csv` (using `izy.Table`) are also available.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tabasy/izy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "izy",
    "package_url": "https://pypi.org/project/izy/",
    "platform": null,
    "project_url": "https://pypi.org/project/izy/",
    "project_urls": {
      "Homepage": "https://github.com/tabasy/izy"
    },
    "release_url": "https://pypi.org/project/izy/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Python functions and classes that make it even easier!",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17466148,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82bcd8fec9bff0330c635f8ed96dd806302fc6475b7158e90e437cf2577a8362",
          "md5": "e7d833f138600287d87d531d26ee7bfb",
          "sha256": "110064ef34c18be9055c1f2a33b80efddabe9b3620eb971edc6af1485b9e528a"
        },
        "downloads": -1,
        "filename": "izy-0.1.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "e7d833f138600287d87d531d26ee7bfb",
        "packagetype": "bdist_egg",
        "python_version": "0.1.0",
        "requires_python": ">=3.6.0",
        "size": 17686,
        "upload_time": "2021-12-30T21:04:27",
        "upload_time_iso_8601": "2021-12-30T21:04:27.989632Z",
        "url": "https://files.pythonhosted.org/packages/82/bc/d8fec9bff0330c635f8ed96dd806302fc6475b7158e90e437cf2577a8362/izy-0.1.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58797c08d18b42207f01fc547ecef75946073060bfaf953fc0d585be210ec696",
          "md5": "a202ccf74d7011ce8e3b45b9193ad8b4",
          "sha256": "89adb428af2c1825f5e721e0d5ceca37c18320cf61fdf7f3f5ee0c4533f17586"
        },
        "downloads": -1,
        "filename": "izy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a202ccf74d7011ce8e3b45b9193ad8b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8114,
        "upload_time": "2021-12-30T21:04:24",
        "upload_time_iso_8601": "2021-12-30T21:04:24.639884Z",
        "url": "https://files.pythonhosted.org/packages/58/79/7c08d18b42207f01fc547ecef75946073060bfaf953fc0d585be210ec696/izy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce67c0681a4d5d59392db7f74445c8c63a7598ae105ea785ac936367672dafe8",
          "md5": "69b10942642ca6cef8844bbce046b8e9",
          "sha256": "0d0351c715596da292f42ad2380f303e5924a6f500c26eed52db925e8d1967d8"
        },
        "downloads": -1,
        "filename": "izy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69b10942642ca6cef8844bbce046b8e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 8802,
        "upload_time": "2021-12-30T21:04:26",
        "upload_time_iso_8601": "2021-12-30T21:04:26.257617Z",
        "url": "https://files.pythonhosted.org/packages/ce/67/c0681a4d5d59392db7f74445c8c63a7598ae105ea785ac936367672dafe8/izy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d6cbaea952a246b13ffc2640a15815b73782bbd6b2dc5a7bb751356a2bf3061",
          "md5": "5522a31f684087463770e2ab9e87d9e7",
          "sha256": "cbb94d4d8786955fd8b52430b8aaca8416d8959f1788e15f38bef8708a223bc6"
        },
        "downloads": -1,
        "filename": "izy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5522a31f684087463770e2ab9e87d9e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 10867,
        "upload_time": "2021-12-31T06:21:03",
        "upload_time_iso_8601": "2021-12-31T06:21:03.377910Z",
        "url": "https://files.pythonhosted.org/packages/5d/6c/baea952a246b13ffc2640a15815b73782bbd6b2dc5a7bb751356a2bf3061/izy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1db339aaa4cf4254fce5e89e9c2f2f38a189cfb67367fcb4b4d51c44a6e4b67",
          "md5": "870303c85c76b7026b80b01c86ff4dba",
          "sha256": "e93176cae30ff8ffcb5cdac1be55704d10a2b2048f6ae5284a657cc70580a5e4"
        },
        "downloads": -1,
        "filename": "izy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "870303c85c76b7026b80b01c86ff4dba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13287,
        "upload_time": "2021-12-31T06:21:06",
        "upload_time_iso_8601": "2021-12-31T06:21:06.154641Z",
        "url": "https://files.pythonhosted.org/packages/d1/db/339aaa4cf4254fce5e89e9c2f2f38a189cfb67367fcb4b4d51c44a6e4b67/izy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eb84876d390b63d7823c5ff57a2e5abd7972393e139a40c8a6c4344c95ad867",
          "md5": "f3ec3d36329cb0d876250b3436e9c1d7",
          "sha256": "ff59f6a19c76599e7218b8c2ec0d2316694246ccc37d52c61571f855b8c71307"
        },
        "downloads": -1,
        "filename": "izy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3ec3d36329cb0d876250b3436e9c1d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 10975,
        "upload_time": "2021-12-31T17:50:49",
        "upload_time_iso_8601": "2021-12-31T17:50:49.957935Z",
        "url": "https://files.pythonhosted.org/packages/0e/b8/4876d390b63d7823c5ff57a2e5abd7972393e139a40c8a6c4344c95ad867/izy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e827f7541fb039e0fb8b32fb45f8939edd919c5300dcbd1a25bc21b8a55e49aa",
          "md5": "67f5a6ebf1a4a4ef67c3e66614146343",
          "sha256": "8dedb812f6d0d384c7e47f7af1cb1b61b05febb1d3905ddbfb7194401164abb5"
        },
        "downloads": -1,
        "filename": "izy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67f5a6ebf1a4a4ef67c3e66614146343",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 13442,
        "upload_time": "2021-12-31T17:50:51",
        "upload_time_iso_8601": "2021-12-31T17:50:51.776913Z",
        "url": "https://files.pythonhosted.org/packages/e8/27/f7541fb039e0fb8b32fb45f8939edd919c5300dcbd1a25bc21b8a55e49aa/izy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a30546af66518de979a56214464c14d90e8a582cace3fcc322d32ab541569b99",
          "md5": "0be5923d4e3ee67a3bb703a89e746450",
          "sha256": "1bbc67c2d3920f078fa6919a39187bdb5ffac61c7019899a5d13819b1ed870dc"
        },
        "downloads": -1,
        "filename": "izy-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0be5923d4e3ee67a3bb703a89e746450",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 14776,
        "upload_time": "2022-01-09T13:12:25",
        "upload_time_iso_8601": "2022-01-09T13:12:25.128523Z",
        "url": "https://files.pythonhosted.org/packages/a3/05/46af66518de979a56214464c14d90e8a582cace3fcc322d32ab541569b99/izy-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "384c520f1e38f48919ecc06cf739531a9538372dd7e5981bc69b99f9b178a7b3",
          "md5": "10c20f0cc4f5605678c8eb5c6882f9c3",
          "sha256": "8e38c1ad4f0462e7e67b5a20cecad15952e3e979ab12a18c04bcaf9eb61eaea9"
        },
        "downloads": -1,
        "filename": "izy-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10c20f0cc4f5605678c8eb5c6882f9c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 18488,
        "upload_time": "2022-01-09T13:12:27",
        "upload_time_iso_8601": "2022-01-09T13:12:27.554272Z",
        "url": "https://files.pythonhosted.org/packages/38/4c/520f1e38f48919ecc06cf739531a9538372dd7e5981bc69b99f9b178a7b3/izy-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "472c31a0a0b1195fa922dda01061c988863df261992f8a220c883bc5fa6e6bc3",
          "md5": "24a896cc53551c17844c6ac30a1d8cab",
          "sha256": "cb4111437adea4aadd9bfefd2864ec00e5aca4ef59d1f8678bf046b2b4c64c31"
        },
        "downloads": -1,
        "filename": "izy-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24a896cc53551c17844c6ac30a1d8cab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 28099,
        "upload_time": "2023-03-27T19:20:03",
        "upload_time_iso_8601": "2023-03-27T19:20:03.651541Z",
        "url": "https://files.pythonhosted.org/packages/47/2c/31a0a0b1195fa922dda01061c988863df261992f8a220c883bc5fa6e6bc3/izy-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3c760ca553fada73a32a91abd2d8ffdc7deb4c8c694afd1496d566fff12e07b",
          "md5": "ef2ce4cda605e8bb4e42939edc89a07c",
          "sha256": "070a8eb4fe7a302d8790f4b08dfbea15d8a24c3aa8dc76a385dbdc0bece7415c"
        },
        "downloads": -1,
        "filename": "izy-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef2ce4cda605e8bb4e42939edc89a07c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 31639,
        "upload_time": "2023-03-27T19:20:10",
        "upload_time_iso_8601": "2023-03-27T19:20:10.310853Z",
        "url": "https://files.pythonhosted.org/packages/e3/c7/60ca553fada73a32a91abd2d8ffdc7deb4c8c694afd1496d566fff12e07b/izy-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "472c31a0a0b1195fa922dda01061c988863df261992f8a220c883bc5fa6e6bc3",
        "md5": "24a896cc53551c17844c6ac30a1d8cab",
        "sha256": "cb4111437adea4aadd9bfefd2864ec00e5aca4ef59d1f8678bf046b2b4c64c31"
      },
      "downloads": -1,
      "filename": "izy-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24a896cc53551c17844c6ac30a1d8cab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 28099,
      "upload_time": "2023-03-27T19:20:03",
      "upload_time_iso_8601": "2023-03-27T19:20:03.651541Z",
      "url": "https://files.pythonhosted.org/packages/47/2c/31a0a0b1195fa922dda01061c988863df261992f8a220c883bc5fa6e6bc3/izy-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3c760ca553fada73a32a91abd2d8ffdc7deb4c8c694afd1496d566fff12e07b",
        "md5": "ef2ce4cda605e8bb4e42939edc89a07c",
        "sha256": "070a8eb4fe7a302d8790f4b08dfbea15d8a24c3aa8dc76a385dbdc0bece7415c"
      },
      "downloads": -1,
      "filename": "izy-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ef2ce4cda605e8bb4e42939edc89a07c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 31639,
      "upload_time": "2023-03-27T19:20:10",
      "upload_time_iso_8601": "2023-03-27T19:20:10.310853Z",
      "url": "https://files.pythonhosted.org/packages/e3/c7/60ca553fada73a32a91abd2d8ffdc7deb4c8c694afd1496d566fff12e07b/izy-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}