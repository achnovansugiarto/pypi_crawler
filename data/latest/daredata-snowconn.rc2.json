{
  "info": {
    "author": "DareData Engineering",
    "author_email": "sam@daredata.engineering",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SnowConn\r\n\r\nThis repository is a wrapper around the [snowflake SQLAlchemy](https://docs.snowflake.net/manuals/user-guide/sqlalchemy.html)\r\nlibrary. It manages the creation of connections and provides a few convenience functions that should be good enough\r\nto cover most use cases yet be flexible enough to allow additional wrappers to be written around to serve more specific\r\nuse cases for different teams. \r\n\r\n## Installation\r\n\r\nTo install latest version released to pypi with pip:\r\n\r\n```bash\r\npip install daredata_snowconn\r\n```\r\n\r\nTo install the latest version directly from the repo:\r\n\r\n```bash\r\npip install 'git+ssh://git@github.com/DareData/snowconn.git@master#egg=snowconn'\r\n```\r\n\r\n## Connection\r\n\r\nEverything is implemented in a single `SnowConn` class. To import it is always the same:\r\n\r\n```py\r\nfrom snowconn import SnowConn\r\n```\r\n\r\n### (1) Connection using your own personal creds\r\n\r\nSet the environment variables:\r\n\r\n* SF_USERNAME - SnowFlake username.\r\n* SF_PASSWORD - SnowFlake password.\r\n* SF_ROLE - the role you want to use.\r\n* SF_ACCOUNT - SnowFlake [account identifier](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html), has the format `<organization_name>-<account_name>`.\r\n\r\nThen simply do:\r\n\r\n```py\r\nconn = SnowConn.connect()\r\n```\r\nThat's it you are connected! You can connect to a specific schema/database using another role or particular computing warehouse with the following:\r\n\r\n```py\r\nconn = SnowConn.connect('db_prod', 'public', role=my_role, warehouse=my_warehouse)\r\n```\r\n\r\n## API\r\n\r\nNow that you're connected, there are a few low-level functions that you can use to programatically interact with\r\nthe snowflake tables that you have access to.\r\n\r\n### execute_simple\r\n\r\nThe exc_simple function is used for when you have a single statement to execute and the result set can fit into memory. It\r\ntakes a single argument which a string of the SQL statement that you with to execute.\r\n\r\n### execute_string\r\n\r\nIf you have multiple sql statements in a single string that you want to execute or the resultset is larger than\r\nwill fit into memory, this is the function that you want to use. It returns a list of cursors that are a result\r\nof each of the statements that are contained in the string. See [here](https://docs.snowflake.net/manuals/user-guide/python-connector-api.html#execute_string) for the full documentation.\r\n\r\n### execute_file\r\n\r\nIf you have the contents of an sql file that you want to execute, you can use this function. For example:\r\nThis also returns a list of cursors the same as `execute_string` does. In fact, this function is nothing more than a very\r\nsimple wrapper around `execute_string`.\r\n\r\n### read_df\r\n\r\nUse this function to read the results of a query into a dataframe. Note that pandas is NOT a dependency of this repo so\r\nif you want to use it you must satisfy this dependency yourself.\r\n\r\nIt takes one sql string as an argument and returns a dataframe.\r\n\r\n### write_df\r\n\r\nUse this to write a dataframe to Snowflake. This is a very thin wrapper around the pandas [DataFrame.to_sql()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_sql.html) function.\r\n\r\nUnfortunately, it doesn't play nice with dictionaries and arrays so the use cases are quite limited. Hopefully\r\nwe will improve upon this in the future.\r\n\r\n### get_current_role\r\n\r\nReturns the current role.\r\n\r\n### close\r\n\r\nUse this to cleanly close all connections that have ever been associated with this instance of SnowConn. If you don't\r\nuse this your process will hang for a while without saying anything before it actually exits.\r\n\r\n## Accessing the connection objects directly\r\n\r\nThese functions are mostly wrappers around 2 connection libraries:\r\n\r\n- [The snowflake python connector](https://docs.snowflake.net/manuals/user-guide/python-connector-api.html)\r\n- [The snowflake SQLAlchemy library](https://docs.snowflake.net/manuals/user-guide/sqlalchemy.html)\r\n\r\nShould you need to use either of these yourself, you can ask for the connections yourself with the following\r\nfunctions:\r\n\r\n### get_raw_connection\r\n\r\nThis will return the instance of a snowflake connector which is documented [here](https://docs.snowflake.net/manuals/user-guide/python-connector-api.html#connect). It is a good choice if you have very simple needs and for some reason none\r\nof the functions in the rest of this repo are serving your needs.\r\n\r\n### get_alchemy_engine\r\n\r\nThis is the result of [create_engine()](https://docs.snowflake.net/manuals/user-guide/sqlalchemy.html#connection-parameters)\r\nwhich was called during `connect()` or `credsman_connect()`. It does not represent an active connection to the database\r\nbut rather acts as a factory for connections.\r\n\r\nThis is useful for using the most commonly abstracted things in other libraries such as dashboards, pandas, etc. \r\nHowever, like SQLAlchemy in general, despite being very widely supported and feature-complete, it is not the simplest \r\nAPI so it should probably not be your first choice unless you know exactly that you need it.\r\n\r\n### get_connection\r\n\r\nThis returns the result of the creating the sqlalchemy engine and then calling `connect()` on it. Unlike the result\r\nof `get_alchemy_engine` this represents an active connection to Snowflake and this has a session associated with it.\r\n\r\nYou can see the object documentation [here](https://docs.snowflake.net/manuals/user-guide/sqlalchemy.html#parameters-and-behavior)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DareData/snowconn",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "daredata-snowconn",
    "package_url": "https://pypi.org/project/daredata-snowconn/",
    "platform": null,
    "project_url": "https://pypi.org/project/daredata-snowconn/",
    "project_urls": {
      "Homepage": "https://github.com/DareData/snowconn"
    },
    "release_url": "https://pypi.org/project/daredata-snowconn/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python utilities for connection to the Snowflake data warehouse",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13844004,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd8ab2a434bdbe29e01b83e7d0ff750450b1ddef6d138f3734bf44c00ffece08",
          "md5": "64f24d00039af20f20d21cc9c95550c1",
          "sha256": "e7c52fcfc1606361e583665c61260b27e8aa6cc4d444269e51ee6050be434256"
        },
        "downloads": -1,
        "filename": "daredata_snowconn-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "64f24d00039af20f20d21cc9c95550c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7011,
        "upload_time": "2022-05-17T14:49:05",
        "upload_time_iso_8601": "2022-05-17T14:49:05.399739Z",
        "url": "https://files.pythonhosted.org/packages/cd/8a/b2a434bdbe29e01b83e7d0ff750450b1ddef6d138f3734bf44c00ffece08/daredata_snowconn-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68affeae26209bb35f5a5727dfbf0422d1b887f1b146e2341d68c78dcc235cab",
          "md5": "cf6ade8f6de5be4dfdfba864b099fda6",
          "sha256": "b41a7df4e883ce8165e153abbb7a62226fc71b230b192affcf98cb6d0a5860e8"
        },
        "downloads": -1,
        "filename": "daredata_snowconn-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cf6ade8f6de5be4dfdfba864b099fda6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7061,
        "upload_time": "2022-05-17T16:44:34",
        "upload_time_iso_8601": "2022-05-17T16:44:34.782757Z",
        "url": "https://files.pythonhosted.org/packages/68/af/feae26209bb35f5a5727dfbf0422d1b887f1b146e2341d68c78dcc235cab/daredata_snowconn-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68affeae26209bb35f5a5727dfbf0422d1b887f1b146e2341d68c78dcc235cab",
        "md5": "cf6ade8f6de5be4dfdfba864b099fda6",
        "sha256": "b41a7df4e883ce8165e153abbb7a62226fc71b230b192affcf98cb6d0a5860e8"
      },
      "downloads": -1,
      "filename": "daredata_snowconn-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "cf6ade8f6de5be4dfdfba864b099fda6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7061,
      "upload_time": "2022-05-17T16:44:34",
      "upload_time_iso_8601": "2022-05-17T16:44:34.782757Z",
      "url": "https://files.pythonhosted.org/packages/68/af/feae26209bb35f5a5727dfbf0422d1b887f1b146e2341d68c78dcc235cab/daredata_snowconn-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}