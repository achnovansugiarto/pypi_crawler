{
  "info": {
    "author": "DiegoSong, TianjinMouth",
    "author_email": "ssyshenn@gmail.com, tjszgaosan@sina.cn",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "[![Contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](CONTRIBUTING.md)\n[![GitHub top language](https://img.shields.io/github/languages/top/TianjinMouth/Tea)](https://img.shields.io/github/languages/top/TianjinMouth/TeaML)\n[![GitHub Issues](https://img.shields.io/github/issues/TianjinMouth/Tea.svg)](https://github.com/TianjinMouth/TeaML/issues)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/TianjinMouth/TeaML/blob/master/LICENSE)\n\n# **TeaML - Automated Modeling in Financial Domain**\n\nüéâüéâüéâ We are proud to announce that we design an automatic modeling robot based on `financial risk control field`! üéâüéâüéâ\n\n## Table of Contents\n- [Overview](#overview)\n- [Our Goal](#our-goal)\n- [Performance](#performance)\n- [Quick start](#quick-start)\n- [Support](#support)\n\n## üì£ Overview\n\nTeaML is a simple and design friendly automatic modeling learning framework.\nIt can automatically model from beginning to end, and in the end, it will also help you output a model report about the model.\n\n- **Human-friendly**. TeaML's code is straightforward, well documented and tested, which makes it very easy to understand and modify.\n- **Built-in financial risk control field**. TeaML built-in financial risk control field, it fits well with the use in the field of financial risk control, including WOE, and is very suitable for this scenario.\n- **Flexible**. TeaML provides a variety of variable selection methods, each of which can be self-defined. You can also assemble these algorithms in different order. \n- **Final Report**. TeaML can provide you with a final version of the model report, so that you can find the details in your model. \n\n## ‚ú® Our Goal\n\n- **Automation** In the near future, we will update and add some fantastic algorithms, including but not limited to variable generation (VariableCluster is already in experimental function).\n- **Common Use** All algorithmic engineers, including model analysts, can use it to increase efficiency as long as you have some algorithmic knowledge.\n- **Wonderful thing** We hope that there will be many wonderful things to add. At present, there is no optimization algorithm and parallel strategy in this version. We will try to add these things in later iterations, maybe not too long.\n\n## ‚è≥ Performance\n\n| Task                                        | Strategy | Dataset                   | Score            | Detail                                                                                                             |\n| ------------------------------------------- | -------- | ------------------------- | ---------------- | -------------------------- |\n| Predicting the Delay Rate of Financial Risk |   TeaML  | Financial Risk Data       | **0.6894** (AUC) | WOE(Monotonic) + STEPWISE |\n| Predicting the Delay Rate of Financial Risk | LightGBM | Financial Risk Data       | **0.6773** (AUC) |         LightGBM          |\n\n\n## üìù Quick start\n\n### Requirements and Installation\n\n\nThe project is based on **Python 3.7**, **Python 3.6** may also work, but it is not fully tested to ensure that all functions are normal.\n\nIf you haven't installed **lightgbm**, you need to install the package yourself.\n\n```bash\npip install TeaML\n```\n\n### Example Usage\n\nLet's run a simple version.\n\n```python\nfrom TeaML.utils.tea_encoder import *\nfrom TeaML.utils.tea_filter import *\nfrom TeaML.utils.tea_utils import *\nfrom TeaML.utils.auto_bin_woe import *\nimport TeaML\n\ndata = pd.read_csv(\"TeaML/examples.csv\")\n\n# encoder\nct = TeaBadRateEncoder(num=1)\nme = TeaMeanEncoder(categorical_features=['city'])\nt = TeaOneHotEncoder()\nencoder = [me]\n\n# woe & feature selection\nwoe = TeaML.WOE(bins=10, bad_rate_merge=True, bad_rate_sim_threshold=0.05, psi_threshold=0.1, iv_threshold=None)\niv = FilterIV(200, 100)\nvif = FilterVif(50)\nmod = FilterModel('lr', 70)\nnova = FilterANOVA(40, 30)\ncoline = FilterCoLine({'penalty': 'l2', 'C': 0.01, 'fit_intercept': True})\nfshap = FilterSHAP(70)\noutlier = OutlierTransform()\nfiltercor = FilterCorr(20)\nstepwise = FilterStepWise(method='p_value')\nmethod = [woe, stepwise]\n\n# main\ntea = TeaML.Tea(['core_lend_request_id', 'lend_customer_id', 'customer_sex',\n               'data_center_id', 'trace_back_time', 'mobile', 'user_id', 'id_no', 'task_id', 'id',\n               'id_district_name', 'id_province_name', 'id_city_name', 'pass_time'],\n              'is_overdue_M0',\n              datetime_feature='pass_time',\n              split_method='oot',\n              file_path='report.xlsx')\ntea.wash(data, null_drop_rate=0.8, most_common_drop_rate=0.9)\ntea.cook(encoder)\ntea.select(method)\ntea.drink(LogisticRegression(penalty='l2', C=1, class_weight='balanced'))\ntea.sleep(woe.bins)\n\n\n'''\nPreliminary screening...\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 29.19it/s]\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 50.03it/s]\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 55.00it/s]\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 104.02it/s]\n  0%|          | 0/19 [00:00<?, ?it/s]\ncal bin ks, train...\ncal bin ks, oot...\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 21.33it/s]\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100/100 [00:00<00:00, 116.78it/s]\n  0%|          | 0/19 [00:00<?, ?it/s]\nTrain AUC: 0.6107958854166341\nTest AUC: 0.6083763215945612\nOOT AUC: 0.6050562520208106\nTrain KS: 0.1719605325145203\nTest KS: 0.17401800497420833\nOOT KS: 0.1616794283922675\n--------------------------------------------------- \n\ncal bin ks, train...\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 97.39it/s]\n 36%|‚ñà‚ñà‚ñà‚ñã      | 4/19 [00:00<00:00, 37.62it/s]\ncal bin ks, oot...\n\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 19/19 [00:00<00:00, 25.66it/s]\nAdd  P                              with p-value 1.14745e-22\nAdd  F                              with p-value 3.38993e-15\nAdd  I                              with p-value 5.18381e-10\nAdd  J                              with p-value 2.8625e-09\nAdd  M                              with p-value 6.66696e-07\nAdd  Q                              with p-value 3.18125e-09\nAdd  B                              with p-value 1.14541e-06\nAdd  D                              with p-value 1.21802e-05\nAdd  K                              with p-value 2.70815e-05\nAdd  C                              with p-value 0.000118247\nAdd  A                              with p-value 0.000214666\nAdd  L                              with p-value 0.000169921\nAdd  H                              with p-value 0.00139263\nAdd  N                              with p-value 0.000488745\n\n   feature_name  feature_coef\n5             Q      2.332818\n10            A      2.203708\n12            H      1.391547\n7             D      1.385142\n2             I      1.192397\n13            N      1.181320\n0             P      0.926443\n8             K      0.914186\n1             F      0.898581\n3             J      0.868826\n6             B      0.864311\n4             M      0.851936\n11            L      0.842446\n9             C      0.704460\nFinish üçµ \n\n'''\n```\n\n#### What's the encoder in tea.cook()Ôºü\n\nThis is a module for automatic processing of discrete variables in robots.\n\nWe offer you three ways to deal with categorical variables\n\n```python\nct = TeaBadRateEncoder(num=1)\nme = TeaMeanEncoder(categorical_features=['city'])\nt = TeaOneHotEncoder()\nencoder = [me]\n```\n\n\n```TeaBadRateEncoder:  Replace categorical variables with bad_rate of each bin```\n\n```TeaMeanEncoder:  MeanEncoder```\n\n```TeaOneHotEncoder: Such as Onehot```\n\n\n\n#### What's the method in tea.cook()\n\nThis is a module for automatic selection of variables in robots.\n\nWhat you fill in in the TeaML's method is orderly.\n\nFor example, the following represents a monotone woe transformation of all variables, followed by a step-by-step regression based on p-value.\n\n```python\nwoe = TeaML.WOE(bins=10, bad_rate_merge=True, bad_rate_sim_threshold=0.05, psi_threshold=0.1, iv_threshold=None)\niv = FilterIV(200, 100)\nvif = FilterVif(50)\nmod = FilterModel('lr', 70)\nnova = FilterANOVA(40, 30)\ncoline = FilterCoLine({'penalty': 'l2', 'C': 0.01, 'fit_intercept': True})\nfshap = FilterSHAP(70)\noutlier = OutlierTransform()\nfiltercor = FilterCorr(20)\nstepwise = FilterStepWise(method='p_value')\nmethod = [woe, stepwise]\n```\n\n## üí° Support\n\nWe support all people to make suggestions, because this is support and encouragement for our project.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TianjinMouth/TeaML",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TeaML",
    "package_url": "https://pypi.org/project/TeaML/",
    "platform": "",
    "project_url": "https://pypi.org/project/TeaML/",
    "project_urls": {
      "Homepage": "https://github.com/TianjinMouth/TeaML"
    },
    "release_url": "https://pypi.org/project/TeaML/0.2.0/",
    "requires_dist": [
      "pandas (==0.24.2)",
      "numpy (==1.16.3)",
      "openpyxl (==2.6.2)",
      "setuptools (==41.0.1)",
      "scipy (==1.2.1)",
      "statsmodels (==0.9.0)",
      "tqdm (==4.34.0)",
      "shap (==0.28.5)",
      "scikit-learn (==0.20.2)"
    ],
    "requires_python": ">3.6",
    "summary": "Automated Modeling in Financial Domain. TeaML is a simple and design friendly automatic modeling learning framework.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6073684,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9731e37020ce0826731983ac402f9c82fd3c9167756c3cb227bccb6bb36c7b8f",
          "md5": "d344f70be99ad200dbbb338a3bf7aebc",
          "sha256": "020fc7308f7adf959a94a31fb1d406e36b345f8972c52e232ff19a9354f2545e"
        },
        "downloads": -1,
        "filename": "TeaML-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d344f70be99ad200dbbb338a3bf7aebc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6",
        "size": 8792028,
        "upload_time": "2019-10-08T05:33:53",
        "upload_time_iso_8601": "2019-10-08T05:33:53.821233Z",
        "url": "https://files.pythonhosted.org/packages/97/31/e37020ce0826731983ac402f9c82fd3c9167756c3cb227bccb6bb36c7b8f/TeaML-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a62553344b7317ae138da1698c9bdacca8ca1a5b9250e9800e28cc39cee0232c",
          "md5": "5ddc8bfcdeab3597bc68b7c127882f66",
          "sha256": "b638142278573c16acaacf5e2d47e42a25c452d31d121d32372ac4f6d6f1696c"
        },
        "downloads": -1,
        "filename": "TeaML-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ddc8bfcdeab3597bc68b7c127882f66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6",
        "size": 8792198,
        "upload_time": "2019-11-04T08:25:10",
        "upload_time_iso_8601": "2019-11-04T08:25:10.135564Z",
        "url": "https://files.pythonhosted.org/packages/a6/25/53344b7317ae138da1698c9bdacca8ca1a5b9250e9800e28cc39cee0232c/TeaML-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a62553344b7317ae138da1698c9bdacca8ca1a5b9250e9800e28cc39cee0232c",
        "md5": "5ddc8bfcdeab3597bc68b7c127882f66",
        "sha256": "b638142278573c16acaacf5e2d47e42a25c452d31d121d32372ac4f6d6f1696c"
      },
      "downloads": -1,
      "filename": "TeaML-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ddc8bfcdeab3597bc68b7c127882f66",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.6",
      "size": 8792198,
      "upload_time": "2019-11-04T08:25:10",
      "upload_time_iso_8601": "2019-11-04T08:25:10.135564Z",
      "url": "https://files.pythonhosted.org/packages/a6/25/53344b7317ae138da1698c9bdacca8ca1a5b9250e9800e28cc39cee0232c/TeaML-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}