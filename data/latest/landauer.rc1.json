{
  "info": {
    "author": "",
    "author_email": "Marco Diniz Sousa <mtdsousa@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Landauer\nPython toolkit to support fundamental energy limits and reversible computing research\n\n[![Build Status](https://img.shields.io/circleci/build/github/mtdsousa/landauer?label=Continuous%20integration)](https://app.circleci.com/pipelines/github/mtdsousa/landauer)\n![PyPI version](https://img.shields.io/pypi/v/landauer)\n\n## Install\nInstalling this Python package:\n```\npython3 -m pip install landauer\n```\n\n## Modules\n\n### Parse\nParses a hardware description file (written using a Verilog subset) and returns an and-inverter graph (as an instance of NetworkX DiGraph):\n```python\nimport landauer.parse as parse\nhalf_adder = '''\n    module half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\n'''\naig = parse.parse(half_adder)\nprint(aig)\n# DiGraph with 8 nodes and 10 edges\n```\n> You can enable majority-gates support using the switch `--majority_support`. In this case the output is an AIG superset where a node with three inputs (e.g. a, b, and c) is equivalent to `(a & b) | (a & c) | (b & c)`.\n\n> Verilog subset supported: Single module description. Restricted to `input`, `output`, and `wire` declarations (registers nor arrays are supported). Usage of identifiers before their proper declaration is currently not supported.\n\nYou can also use this module via the command line. The output is a JSON-serialized NetworkX DiGraph in an adjacency format:\n\n```bash\ncat << EOF | python -m landauer.parse --stdin\nmodule half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\nEOF\n# {\"directed\": true, \"multigraph\": false, \"graph\": [], \"nodes\": [{\"id\": \"a\"}, {\"id\": 1}, {\"id\": \"b\"}, {\"id\": 2}, {\"id\": 3}, {\"id\": \"sum\"}, {\"id\": 4}, {\"id\": \"cout\"}], \"adjacency\": [[{\"inverter\": false, \"id\": 1}, {\"inverter\": true, \"id\": 2}, {\"inverter\": false, \"id\": 4}], [{\"inverter\": true, \"id\": 3}], [{\"inverter\": true, \"id\": 1}, {\"inverter\": false, \"id\": 2}, {\"inverter\": false, \"id\": 4}], [{\"inverter\": true, \"id\": 3}], [{\"inverter\": true, \"id\": \"sum\"}], [], [{\"inverter\": false, \"id\": \"cout\"}], []]}\n```\n\n### Simulate\n\nSimulates the design for all possible inputs and calculates the entropy for some specific signal sets. We can list the following sets for each gate: inputs, output, and every output-input combination.\n\n```python\nimport landauer.parse as parse\nimport landauer.simulate as simulate\n\nhalf_adder = '''\n    module half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\n'''\nsimulation = simulate.simulate(parse.parse(half_adder))\nprint(simulation)\n# {frozenset({'b', 'a'}): 2.0, frozenset({1}): 0.8112781244591328, frozenset({1, 'b'}): 1.5, frozenset({1, 'a'}): 1.5, frozenset({1, 'b', 'a'}): 2.0, frozenset({2}): 0.8112781244591328, frozenset({2, 'b'}): 1.5, frozenset({2, 'a'}): 1.5, frozenset({2, 'b', 'a'}): 2.0, frozenset({4}): 0.8112781244591328, frozenset({'b', 4}): 1.5, frozenset({4, 'a'}): 1.5, frozenset({'b', 4, 'a'}): 2.0, frozenset({1, 2}): 1.5, frozenset({3}): 1.0, frozenset({1, 3}): 1.5, frozenset({2, 3}): 1.5, frozenset({1, 2, 3}): 1.5}\n```\n> The output is a Python dictionary where the key is the signal set (as a Python `frozenset`), and the value is the entropy (in bits).\n\nYou can also use this module via the command line:\n```bash\ncat << EOF | python -m landauer.parse --stdin | python -m landauer.simulate --stdin\nmodule half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\nEOF\n# [{\"variables\": [\"a\", \"b\"], \"entropy\": 2.0}, {\"variables\": [1], \"entropy\": 0.8112781244591328}, {\"variables\": [1, \"a\"], \"entropy\": 1.5}, {\"variables\": [1, \"b\"], \"entropy\": 1.5}, {\"variables\": [1, \"a\", \"b\"], \"entropy\": 2.0}, {\"variables\": [2], \"entropy\": 0.8112781244591328}, {\"variables\": [2, \"a\"], \"entropy\": 1.5}, {\"variables\": [2, \"b\"], \"entropy\": 1.5}, {\"variables\": [2, \"a\", \"b\"], \"entropy\": 2.0}, {\"variables\": [4], \"entropy\": 0.8112781244591328}, {\"variables\": [\"a\", 4], \"entropy\": 1.5}, {\"variables\": [4, \"b\"], \"entropy\": 1.5}, {\"variables\": [\"a\", 4, \"b\"], \"entropy\": 2.0}, {\"variables\": [1, 2], \"entropy\": 1.5}, {\"variables\": [3], \"entropy\": 1.0}, {\"variables\": [1, 3], \"entropy\": 1.5}, {\"variables\": [2, 3], \"entropy\": 1.5}, {\"variables\": [1, 2, 3], \"entropy\": 1.5}]\n```\n\n### Evaluate\nCalculates the total entropy loss and losses for each gate given circuit and its simulation data.\n\n```python\nimport landauer.parse as parse\nimport landauer.simulate as simulate\nimport landauer.evaluate as evaluate\n\nhalf_adder = '''\n    module half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\n'''\naig = parse.parse(half_adder)\nsimulation = simulate.simulate(aig)\nentropy = evaluate.evaluate(aig, simulation)\nprint(entropy)\n# {'gates': {1: 1.188721875540867, 2: 1.188721875540867, 3: 0.5, 4: 1.188721875540867}, 'total': 4.066165626622601}\n```\n\n> You may provide an optimized circuit instead (check `Naive` module below). However, you should provide the simulation result from the original circuit.\n\nYou can also use this module via the command line:\n```bash\ncat << EOF > half_adder.v  \nmodule half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\nEOF\npython -m landauer.parse --file half_adder.v > half_adder.json\npython -m landauer.simulate --file half_adder.v > simulation.json\npython -m landauer.evaluate simulation.json --file half_adder.json\n# {\"total\": 4.066165626622601, \"gates\": [{\"gate\": 1, \"loss\": 1.188721875540867}, {\"gate\": 2, \"loss\": 1.188721875540867}, {\"gate\": 3, \"loss\": 0.5}, {\"gate\": 4, \"loss\": 1.188721875540867}]}\n```\n\n### Naive\nOptimizes the circuit using the heuristics from \"CHAVES, J. et all. Designing Partially Reversible Field-Coupled Nanocomputing Circuits. IEEE Transactions on Nanotechnology, Volume 18, 2019.\" There are two strategies: The first one is more conservative and doesn't change the circuit depth (delay-oriented). The second one is more aggressive and may change the circuit depth. However, this last one (energy-oriented) leverages better energy optimization.\n\n```python\nimport landauer.parse as parse\nimport landauer.simulate as simulate\nimport landauer.evaluate as evaluate\nimport landauer.naive as naive\n\nhalf_adder = '''\n    module half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\n'''\n\naig = parse.parse(half_adder)\nsimulation = simulate.simulate(aig)\nprint(evaluate.evaluate(aig, simulation))\n# 4.066165626622601\n\ndelay_oriented = naive.naive(aig, naive.Strategy.DELAY_ORIENTED)\nprint(evaluate.evaluate(delay_oriented, simulation))\n# 4.066165626622601\n\nenergy_oriented = naive.naive(aig, naive.Strategy.ENERGY_ORIENTED)\nprint(evaluate.evaluate(energy_oriented, simulation))\n# 1.688721875540867\n```\n\n> Please notice that the delay-oriented strategy couldn't find any opportunity to propagate inputs (to avoid information/entropy losses). On the other hand, the energy-oriented heuristic reduced the entropy losses from 4.07 to 1.69.\n\nYou can also use this module via command line. The output is a JSON-serialized NetworkX MultiDiGraph in an adjacency format.\n```bash\ncat << EOF > half_adder.v  \nmodule half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\nEOF\npython -m landauer.parse --file half_adder.v > half_adder.json\npython -m landauer.simulate --file half_adder.v > simulation.json\npython -m landauer.evaluate simulation.json --file half_adder.json\npython -m landauer.naive energy_oriented --file half_adder.json\n# {\"directed\": true, \"multigraph\": true, \"graph\": [], \"nodes\": [{\"level\": 0, \"id\": \"a\"}, {\"level\": 1, \"id\": 1}, {\"level\": 0, \"id\": \"b\"}, {\"level\": 2, \"id\": 2}, {\"level\": 3, \"id\": 3}, {\"level\": 4, \"id\": \"sum\"}, {\"level\": 3, \"id\": 4}, {\"level\": 4, \"id\": \"cout\"}], \"adjacency\": [[{\"inverter\": false, \"id\": 1, \"attributes\": {\"color\": \"#0173b2\"}, \"key\": 0}], [{\"inverter\": true, \"id\": 3, \"key\": 0}, {\"forward\": true, \"inverter\": true, \"attributes\": {\"color\": \"#0173b2\"}, \"id\": 2, \"key\": \"a\"}, {\"forward\": true, \"inverter\": true, \"attributes\": {\"color\": \"#56b4e9\"}, \"id\": 2, \"key\": \"b\"}], [{\"inverter\": true, \"id\": 1, \"attributes\": {\"color\": \"#56b4e9\"}, \"key\": 0}], [{\"inverter\": true, \"id\": 3, \"key\": 0}, {\"forward\": true, \"inverter\": true, \"attributes\": {\"color\": \"#0173b2\"}, \"id\": 4, \"key\": \"a\"}, {\"forward\": true, \"inverter\": false, \"attributes\": {\"color\": \"#56b4e9\"}, \"id\": 4, \"key\": \"b\"}], [{\"inverter\": true, \"id\": \"sum\", \"key\": 0}], [], [{\"inverter\": false, \"id\": \"cout\", \"key\": 0}], []]}\n\n```\n\n### Graph\nGenerates a DOT file given an and-inverter graph. There are two visualization modes: `default` and `paper`. Input propagations are represented by colored edges. Inverters are represented by dashed edges.\n\n```python\nimport landauer.parse as parse\nimport landauer.naive as naive\nimport landauer.graph as graph\n\nhalf_adder = '''\n    module half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\n'''\n\naig = parse.parse(half_adder)\nenergy_oriented = naive.naive(aig, naive.Strategy.ENERGY_ORIENTED)\nprint(graph.default(energy_oriented))\n# digraph {\n#\ta\n#\t1\n#\tb\n#\t2\n#\t3\n#\tsum\n#\t4\n#\tcout\n#\ta -> 1 [color=\"#0173b2\" style=solid]\n#\t1 -> 3 [style=dashed]\n#\t1 -> 2 [color=\"#0173b2\" style=dashed]\n#\t1 -> 2 [color=\"#56b4e9\" style=dashed]\n#\tb -> 1 [color=\"#56b4e9\" style=dashed]\n#\t2 -> 3 [style=dashed]\n#\t2 -> 4 [color=\"#0173b2\" style=dashed]\n#\t2 -> 4 [color=\"#56b4e9\" style=solid]\n#\t3 -> sum [style=dashed]\n#\t4 -> cout [style=solid]\n#}\n```\nYou can call the method `show` to display the graph using `matplotlib`:\n```python\ngraph.show(graph.default(energy_oriented))\n```\n![graph visualization (default)](./docs/source/_static/default.png)\n\nYou can also use this module via command line:\n```bash\ncat << EOF | python -m landauer.parse --stdin | python -m landauer.naive energy_oriented --stdin | python -m landauer.graph --type paper --stdin --show\nmodule half_adder (a, b, sum, cout);\n        input a, b;\n        output sum, cout;\n\n        assign sum = a ^ b;\n        assign cout = a & b;\n    endmodule\nEOF\n```\n![graph visualization (paper)](./docs/source/_static/paper.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License Copyright (c) 2021 Marco Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "landauer",
    "package_url": "https://pypi.org/project/landauer/",
    "platform": null,
    "project_url": "https://pypi.org/project/landauer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/mtdsousa/landauer/issues",
      "Homepage": "https://github.com/mtdsousa/landauer"
    },
    "release_url": "https://pypi.org/project/landauer/0.0.1/",
    "requires_dist": [
      "antlr4-verilog (==4.0.0)",
      "graphviz (~=0.19.1)",
      "matplotlib (~=3.5.1)",
      "networkx (~=2.6.3)",
      "pydot (~=1.4.2)",
      "seaborn (~=0.11.2)",
      "tqdm (~=4.64.0)"
    ],
    "requires_python": ">=3.10",
    "summary": "Python toolkit to support fundamental energy limits and reversible computing research",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14697379,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f85893372d9938ad646904af36777d01b55e374c85c2c9c3d5b76ac9cf23982",
          "md5": "06bb0b0878df7224d4f01be8187872de",
          "sha256": "dd10788c5039f222cd64fd2693b89e15b8bd66c097d0669d45ead3f9f8a4ce5f"
        },
        "downloads": -1,
        "filename": "landauer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06bb0b0878df7224d4f01be8187872de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 17829,
        "upload_time": "2022-08-09T04:04:13",
        "upload_time_iso_8601": "2022-08-09T04:04:13.815391Z",
        "url": "https://files.pythonhosted.org/packages/1f/85/893372d9938ad646904af36777d01b55e374c85c2c9c3d5b76ac9cf23982/landauer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d64ecd82a99bbb2e01b7df6ae506783e1cf1728ad00dfdf43ed08dd0f70efbbf",
          "md5": "e552a980426030429dc009e59f80da25",
          "sha256": "8103b6e69dd091b4c18ead16d2eb71202cf3be115ab3ff85f3e2f1dcd51e5304"
        },
        "downloads": -1,
        "filename": "landauer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e552a980426030429dc009e59f80da25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 15537,
        "upload_time": "2022-08-09T04:04:15",
        "upload_time_iso_8601": "2022-08-09T04:04:15.809525Z",
        "url": "https://files.pythonhosted.org/packages/d6/4e/cd82a99bbb2e01b7df6ae506783e1cf1728ad00dfdf43ed08dd0f70efbbf/landauer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f85893372d9938ad646904af36777d01b55e374c85c2c9c3d5b76ac9cf23982",
        "md5": "06bb0b0878df7224d4f01be8187872de",
        "sha256": "dd10788c5039f222cd64fd2693b89e15b8bd66c097d0669d45ead3f9f8a4ce5f"
      },
      "downloads": -1,
      "filename": "landauer-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06bb0b0878df7224d4f01be8187872de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 17829,
      "upload_time": "2022-08-09T04:04:13",
      "upload_time_iso_8601": "2022-08-09T04:04:13.815391Z",
      "url": "https://files.pythonhosted.org/packages/1f/85/893372d9938ad646904af36777d01b55e374c85c2c9c3d5b76ac9cf23982/landauer-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d64ecd82a99bbb2e01b7df6ae506783e1cf1728ad00dfdf43ed08dd0f70efbbf",
        "md5": "e552a980426030429dc009e59f80da25",
        "sha256": "8103b6e69dd091b4c18ead16d2eb71202cf3be115ab3ff85f3e2f1dcd51e5304"
      },
      "downloads": -1,
      "filename": "landauer-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e552a980426030429dc009e59f80da25",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 15537,
      "upload_time": "2022-08-09T04:04:15",
      "upload_time_iso_8601": "2022-08-09T04:04:15.809525Z",
      "url": "https://files.pythonhosted.org/packages/d6/4e/cd82a99bbb2e01b7df6ae506783e1cf1728ad00dfdf43ed08dd0f70efbbf/landauer-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}