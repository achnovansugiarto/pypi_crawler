{
  "info": {
    "author": "Givanna Putri",
    "author_email": "ghar1821@uni.sydney.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# ChronoClust\n\nA clustering algorithm that will perform clustering on each of a time-series of discrete (not a data stream... yet) datasets, and explicitly track the evolution of clusters over time.\n\nIf you use the ChronoClust algorithm, please cite the associated publication:\n\n>Putri, Givanna H., Mark N. Read, Irena Koprinska, Deeksha Singh, Uwe RÃ¶hm, Thomas M. Ashhurst, and Nicholas JC King. \"ChronoClust: Density-based clustering and cluster tracking in high-dimensional time-series data.\" Knowledge-Based Systems 174 (2019): 9-26\n\nDOI: https://doi.org/10.1016/j.knosys.2019.02.018\n\nTo run the project you will require the following packages for python 3:\n1. pandas\n2. numpy\n3. scipy\n4. scikit-learn\n5. tqdm\n6. numba\n\n## How do I use chronoclust?\n\nThe following instructions assume you have python 3 installed. If you haven't, please install python 3.6 or 3.7.\nVisit https://www.python.org/downloads/ for instruction.\n\n1. Download this repo to a local folder. You can do this by clicking \"clone or download\" button and \"Download ZIP\".\n2. Unzip the downloaded repo file in step (1).\n3. Open the Terminal app.\n4. Change your active directory to the directory containing the unzipped files in step (2). To do this type ``cd `` (don't miss the space!) then drag the unzipped directory to the terminal, then press enter.\n5. Type ``python3 setup.py install`` and press enter. This shall install chronoclust into your computer.\n6. Type ``cd sample_run_script`` and press enter. This shall change your active directory to where the sample script is stored.\n7. Type ``python3 sample_run.py`` and press enter. Chronoclust will execute on a synthetic dataset.\n\nIt is highly recommended to learn how to use environment manager such as Miniconda (https://docs.conda.io/en/latest/miniconda.html) prior to installing Chronoclust. \nHowever, if this is too much, stick with instruction above.\n\n\n### Running Chronoclust\n``sample_run.py`` file stored within ``sample_run_script`` folder shows what you need to specify in order to run Chronoclust.\nBriefly, you need the location of your data files and specify them in a list, as well as the directory where results will be stored.\nYou can run Chronoclust with default parameter values, but I strongly recommend you to do this just as a trial run. \nThe default parameter values are not suitable for all kinds of dataset.\n\n``sample_run.R`` make use of reticulate to run Chronoclust in R. \nTo use this script, you need to setup Miniconda environment and install Chronoclust and all its dependencies inside it.\nSee the script for more details.\n\n## Where to start with the parameters?\nYou can pretty much start with any value for any parameters, but to at least get some kind of clustering, I recommend you start with setting ``pi`` to be the dimensionality of your dataset (number of columns or markers in the dataset).\nThis gives Chronoclust the flexibility in creating the Microclusters.\n\nOnce you have some kind of clustering going, then you can start playing around with others.\nI will generally start by looking at the number of clusters produced and tuning ``epsilon``.\nIf there are too many clusters (overclustering), I'll tune ``epsilon`` down (make it smaller).\nOtherwise, make it a bit bigger.\n**Do note that a small reduction/increment in ``epsilon`` can dramatically alter the clustering produced.**\nAfter it looks sort of right, then you can move on to ``beta``, ``mu``, and/or ``upsilon``.\n\nIf you find that the clusters are too wide or big (has too big of a reach), then it could very well be that you have set the requirement for the MCs to be too _lenient_, i.e. the parameter combination allows small MCs to be formed and included in the final clustering.\nWhat you can do here is make ``beta`` and ``mu`` bigger so small MCs are treated as outliers and not included in final clustering.\nYou can also make ``upsilon`` smaller, which will split your big wide cluster into few smaller ones.\n\n## Data files\nThe synthetic dataset and corresponding gating is available under ``synthetic_dataset`` folder.\n\nThe WNV dataset and gating are available from FlowRepository [repository FR-FCM-Z285](https://flowrepository.org/id/FR-FCM-Z285).\n\n## Providing gated files for ChronoClust\nFor the clustering result to be meaningful, there must be some sort of labelling attached to each cluster produced by ChronoClust.\nYou can do this by manually annotating either the result file or the file containing the points belonging to each cluster.\nHowever, there are times (such as when we prepare the result for our paper) when a ``ground truth`` is already available.\nIn this case, you can automatically get ChronoClust to label the clusters based on the ground truth label.\n\nTo do this, you need to first find the centroid of each ``cell population`` or grouping in your ground truth.\nThis can easily be done by just taking the mean of the data points for each population/grouping.\nYou can either do this yourself or just use the script in ``helper_code_for_manuscript/cluster_labelling/calculate_gating_centroid.py`` (this is the script we used for our paper).\nIt shall produce the file similar to the gating centroid found in synthetic dataset (``synthetic_dataset/gating_fine/gating_centroids.csv``) or the WNV dataset.\nPlease note that if you want to do this, make sure you format your ground truth data in similar format as ours (label is named ``PopName`` at least).\nConsult ``synthetic_dataset/gating_fine/synthetic_d0.csv`` for example.\nThereafter, you need to pass this file (just the location) to ChronoClust as ``gating_file`` parameter.\nChronoClust will then attempt to match each cluster to the nearest population/grouping.\nFor more information on how it does this, please download the paper.\n\nIf you do this, the result file will have an extra column call ``predicted_label``, the cluster label based on supplied ground truth.\nOnly after you have this then you can label each data points in ``cluster_points`` file (generated by ChronoClust) with their predicted label (based on ``predicted_label`` above) and true label (given by ground truth).\n\n## Issues/Bugs/Features request\nWe're all only humans and we do make mistakes. \nHence please forgive me if you find some bugs/issues in the code.\nI will greatly appreciate it if you please kindly inform me of them by either sending me an email (see the paper for my contact details) or opening an issue ticket.\nI'll try my best to address it as soon as possible.\n\nIn addition, if you have a feature request please do the same. \n\n## Code for reproducing result in the paper\nIn addition to using chronoclust, there exists other codes used to generate our manuscript.\nYou can find all them under ``helper_code_for_manuscript``.\nSee separate README in the folder for more details.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://https://github.com/ghar1821/Chronoclust",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Chronoclust",
    "package_url": "https://pypi.org/project/Chronoclust/",
    "platform": "",
    "project_url": "https://pypi.org/project/Chronoclust/",
    "project_urls": {
      "Homepage": "https://https://github.com/ghar1821/Chronoclust"
    },
    "release_url": "https://pypi.org/project/Chronoclust/0.2.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A clustering algorithm that will perform clustering on each of a time-series of discrete datasets, and explicitly track the evolution of clusters over time.",
    "version": "0.2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7466744,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2a9a1ed5ff7cd2ec07d4c3519894eb4f62401e3dd150d8c978e04017bcb1083",
          "md5": "6a480ab28b55ab41d1f2e344ff863ff9",
          "sha256": "92b44cc03a5f59f09c3f2eb8744dbf2d1efffa57ee665c83c8187b51a3b42094"
        },
        "downloads": -1,
        "filename": "Chronoclust-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a480ab28b55ab41d1f2e344ff863ff9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33197,
        "upload_time": "2020-05-11T08:13:55",
        "upload_time_iso_8601": "2020-05-11T08:13:55.495515Z",
        "url": "https://files.pythonhosted.org/packages/b2/a9/a1ed5ff7cd2ec07d4c3519894eb4f62401e3dd150d8c978e04017bcb1083/Chronoclust-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81d43100ee6db6ae8ae6ff4941130f508970563b39450a9e7845500b8def3704",
          "md5": "efe762845e22a2c624b6aac659a0de20",
          "sha256": "997287e287cd8acdf01cef018a0b933a800204925fa9042073d9bd22a76b7783"
        },
        "downloads": -1,
        "filename": "Chronoclust-0.2.1.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "efe762845e22a2c624b6aac659a0de20",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 92237,
        "upload_time": "2020-06-13T06:43:32",
        "upload_time_iso_8601": "2020-06-13T06:43:32.158382Z",
        "url": "https://files.pythonhosted.org/packages/81/d4/3100ee6db6ae8ae6ff4941130f508970563b39450a9e7845500b8def3704/Chronoclust-0.2.1.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35aab4340115185e94dee655d432050157c9ff5c7ca9221d4983eeca65fdee2f",
          "md5": "6aac90491b2b15bba5eca4eea66c83c3",
          "sha256": "3ab7a6fedffbe4f3529b763715e397eecc1721cc7c30fee251b798b0fcc816f5"
        },
        "downloads": -1,
        "filename": "Chronoclust-0.2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6aac90491b2b15bba5eca4eea66c83c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34348,
        "upload_time": "2020-06-13T06:43:33",
        "upload_time_iso_8601": "2020-06-13T06:43:33.302833Z",
        "url": "https://files.pythonhosted.org/packages/35/aa/b4340115185e94dee655d432050157c9ff5c7ca9221d4983eeca65fdee2f/Chronoclust-0.2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35aab4340115185e94dee655d432050157c9ff5c7ca9221d4983eeca65fdee2f",
        "md5": "6aac90491b2b15bba5eca4eea66c83c3",
        "sha256": "3ab7a6fedffbe4f3529b763715e397eecc1721cc7c30fee251b798b0fcc816f5"
      },
      "downloads": -1,
      "filename": "Chronoclust-0.2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6aac90491b2b15bba5eca4eea66c83c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34348,
      "upload_time": "2020-06-13T06:43:33",
      "upload_time_iso_8601": "2020-06-13T06:43:33.302833Z",
      "url": "https://files.pythonhosted.org/packages/35/aa/b4340115185e94dee655d432050157c9ff5c7ca9221d4983eeca65fdee2f/Chronoclust-0.2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}