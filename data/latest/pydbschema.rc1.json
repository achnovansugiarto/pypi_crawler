{
  "info": {
    "author": "Yosia Lukumai",
    "author_email": "yosialukumai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# **Powerful python library like Mongoose**\n\n\n## ***PyDbSchema Features***\nThe library enable one to create Schema validates the Schema.\n\nThe Library will also insert the Default values when one provided\nand it in schema but didn't provide during insertation.\n\nThe library is very hand and it's objects are directly Pymongo \ncollection Object do one configuration the all of the.\n\nSchema can access pymongo Object method the Shema are Collection Level,\nLet Bring the Mongoose Flavour.\n\n\n## ***Requirements || dependecies***\npymongo >= 3.0\n\n\n# Usage\n## ***Configuration***\nCreate a folder with the database configuration then pass\ndatabase name and url or name only\n\n        # import the module\n        import PyDbSchema\n        PyDbSchema.connect(<DatabaseName: str>)\n        # Test if the database if connected\n        if PyDbSchema.connection.connected:\n            print(\"Connected\")\n\nSo by this one folder all the database Configuration are ready\nNote: This code mostly should be at the top so as to enable Schema to access conection\n\n\n\n### ***Models Creation***\n\nCreate a folder and insert all of your model Rules here \n\n        # For Example here\n        import PyDbSchema\n        User = {\n        'Attributes':[{ \"Name\": {\n        \"dtype\": str,\n        \"req\": True,\n        \"default\": None\n        }},\n        { \"email\": {\n        \"dtype\": str,\n        \"req\": True,\n        \"default\": None\n        }},\n        }\n\n        ## Creating the Schema\n        User = PyDbSchema.Schema(<Skelrton:dict>, <NameSchema: str>)\n        # The Schema object is Collection Object by nature and pymongo methods can be used in itds\n\n\n## ***Using the Schema Object Method***\n\nThe Schema Object perform all of the methods like how pymongo Object will perform\nbut Crud( Create Read Update Delete) operation are easier as follows\n\n\n## ***Creating***\nNote: Advantages of PyDbSchema is that it's Schema are validated and default value are passed if not there\n### **Methods**\n\nModel.insertOne(data<dic>)     -> # Insert One object passed into the collection Used\n\nModel.bulkInsert(data<list>)  -> # Insert list of object passed into the collection Used\n\n        Example\n        # Inserting Document\n        # Create a folder and database configuration\n        # Create the Models  Folder\n        # Inside creates Schema Objects\n        Example \n        from Models.User import User # We were having a folder with py file having User Object of the class of Schema\n        mydata = {\n        \"Name\": \"Jack\",\n        'email': 'yosiaLukumai@gmail.com',\n        }\n        response = User.insertOne(credentials)\n        print(response) #Return pymongo result object\n\n        # Inserting Many Objects \n        ListOfData [\n        {\n                \"Name\": \"Jack\",\n                'email': 'yosiaLukumai@gmail.com'\n        },\n        {\n                \"Name\": \"Onisa\",\n                'email': 'jr@gmail.com'\n        }      \n        ]\n\n        response = User.bulkInsert(credentials)\n\n\n\n\n## ***Finding***\nNote: The Schema skeleton will be used for all of this methods\n### **Methods**\n\nModel.find(credential<dict>)     -> # find the Documents required and return list according to the credential passed\n\nModel.findOne(data<dict>)       -> # Find and return only one document if credentials passed\n\n        # Find One Result\n        # Import the Schema Objects\n        # Example \n        from Models.User import User # We were having a folder with py file having User Object of the class of Schema\n        credentials = {\"Name\": 'Yosia'}\n        response = User.findOne(credentials)\n        print(response) # Check the Response\n\n        # To find many Use the findMany\n        credentials = {\"Name\": 'Yosia'}\n        response = User.find(credentials) # Return multiple of the instance found\n\n\n## ***Updating***\nNote: The Schema skeleton will be used for all of this methods\n### **Methods**\n\nModel.updateOne(credentialForSearching<dict>, newdata,dict>)     -> # update one according to credentil passed and new data to be inserted\n\nModel.updateMany(credentialForSearching<dict>, newdata,dict>)     -> # update Many according to credentil passed and new data to be inserted\n\n        # Find One Result\n        # Import the Schema Objects\n        Example \n        \n        from Models.User import User # We were having a folder with py file having User Object of the class of Schema\n        myquery = { \"Name\": \"Yosia\" }\n        newvalues = {\"Name\": \"Shadrack\" }\n        response = User.updateOne(myquery, newvalues)\n        print(response) # Check the Response\n\n        # To updateMany  Use the <Model>.updateMany(dataForSearching<dict>, newData<dict>)\n        response = User.updateMany(dataForSearching<dict>, newData<dic>)\n        # check response like how pymongo insert method does like\n        print(response.matched_count)\n\n\n## ***Deleting***\nNote: The Schema skeleton will be used for all of this methods\n### **Methods**\n\nModel.deleteOne(credential<dict>)      -> # delete one according to credentil passed \n\nModel.deleteMany(credential<dict>)     -> # delete Many according to credentil passed \n\n        # Find One Result\n        # Import the Schema Objects\n        Example \n        \n        from Models.User import User # We were having a folder with py file having User Object of the class of Schema\n        response = User.deleteMany(myquery, newvalues)\n        print(response) # Check the Response\n        credentials = {\"Name\": 'Yosia'}\n        # To updateMany  Use the <Model>.deleteMany(credentials:dict)\n        credentials = {\"Name\": 'Yosia'}\n        response = User.deleteOne(credentials<dict>)\n        # check response like how pymongo insert method does like\n\n\n\n## ***FindById***\nJust pass the id and model will give you the back whole document\n\n        # Example\n        from Models.User import User # We were having a folder with py file having User Object of the class of Schema\n        response = User.findById(id)\n        print(response) # Check the Response\n\n\n## ***Using Schema as Object as Pymongo Collection***\nJust Use the attribute inside the Schema the collection attribute example\n\n        # Example\n        from Models.User import User # We were having a folder with py file having User Object of the class of Schema\n        # collection\n        collection = User.collection\n        type(User.collection) # Return <class 'pymongo.collection.Collection'>\n        # so all of the pymongo collection methods can be used\n        # like\n        collection.create_index,  next, watch\n\n\n\n\n\n\n## Powered By: Yosia Lukumai\n\nGithub Account: <https://github.com/yosiaLukumai>\n\nEmail me trough: <a href = \"mailto:yosialukumai.com?subject = Feedback&body = Message\">yosiadev@gmail.com</a>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yosiaLukumai/pymongo-wrappers",
    "keywords": "pythonmongodb,py_mongoose,Py_Mongoose,mongoosepy,pymongo,Schemavalidator,ShemaChecker",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDbSchema",
    "package_url": "https://pypi.org/project/PyDbSchema/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyDbSchema/",
    "project_urls": {
      "Homepage": "https://github.com/yosiaLukumai/pymongo-wrappers"
    },
    "release_url": "https://pypi.org/project/PyDbSchema/0.0.5/",
    "requires_dist": [
      "pymongo (>=3.0)"
    ],
    "requires_python": "",
    "summary": "PyMongoose enable you to validate your SChema and setting them default values it Give you Schema Object that give you easier accesbility of pymongo collection",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14507374,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c05d37457cd3612f602eb09a401173f6158ac4360f8b5c1fed4bb445c063193",
          "md5": "abfb7a5c519f712aa9c696175e6227c2",
          "sha256": "eab131a91046055d3a1e0d5053c1aca70a76be07cadbed024c1313643e2a106e"
        },
        "downloads": -1,
        "filename": "PyDbSchema-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abfb7a5c519f712aa9c696175e6227c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8980,
        "upload_time": "2022-07-21T16:36:05",
        "upload_time_iso_8601": "2022-07-21T16:36:05.807805Z",
        "url": "https://files.pythonhosted.org/packages/0c/05/d37457cd3612f602eb09a401173f6158ac4360f8b5c1fed4bb445c063193/PyDbSchema-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e00560829e6f9076992ba23fcef24c96b0a403ff8c8ffef687f664e7457e2f01",
          "md5": "0ee11417f24c8fc13bb9c4b382628373",
          "sha256": "4055bd1ce013e06c8ce8c7b877f1e0d4a730f782d0112c4e7221b7eb4a7f2eee"
        },
        "downloads": -1,
        "filename": "PyDbSchema-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0ee11417f24c8fc13bb9c4b382628373",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7968,
        "upload_time": "2022-07-21T16:36:08",
        "upload_time_iso_8601": "2022-07-21T16:36:08.799062Z",
        "url": "https://files.pythonhosted.org/packages/e0/05/60829e6f9076992ba23fcef24c96b0a403ff8c8ffef687f664e7457e2f01/PyDbSchema-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c05d37457cd3612f602eb09a401173f6158ac4360f8b5c1fed4bb445c063193",
        "md5": "abfb7a5c519f712aa9c696175e6227c2",
        "sha256": "eab131a91046055d3a1e0d5053c1aca70a76be07cadbed024c1313643e2a106e"
      },
      "downloads": -1,
      "filename": "PyDbSchema-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "abfb7a5c519f712aa9c696175e6227c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8980,
      "upload_time": "2022-07-21T16:36:05",
      "upload_time_iso_8601": "2022-07-21T16:36:05.807805Z",
      "url": "https://files.pythonhosted.org/packages/0c/05/d37457cd3612f602eb09a401173f6158ac4360f8b5c1fed4bb445c063193/PyDbSchema-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e00560829e6f9076992ba23fcef24c96b0a403ff8c8ffef687f664e7457e2f01",
        "md5": "0ee11417f24c8fc13bb9c4b382628373",
        "sha256": "4055bd1ce013e06c8ce8c7b877f1e0d4a730f782d0112c4e7221b7eb4a7f2eee"
      },
      "downloads": -1,
      "filename": "PyDbSchema-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "0ee11417f24c8fc13bb9c4b382628373",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7968,
      "upload_time": "2022-07-21T16:36:08",
      "upload_time_iso_8601": "2022-07-21T16:36:08.799062Z",
      "url": "https://files.pythonhosted.org/packages/e0/05/60829e6f9076992ba23fcef24c96b0a403ff8c8ffef687f664e7457e2f01/PyDbSchema-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}