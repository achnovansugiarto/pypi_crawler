{
  "info": {
    "author": "MikoÅ‚aj Kuranowski",
    "author_email": "mkuranowski+pypackages@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "table2md\n========\n\nPrint tabular data in markdown format\n\nInstallation\n------------\n\nTested on Pythons above 3.6+.\n`pip3 install table2md`\n\nUsage\n-----\n\n```py\nfrom table2md import MarkdownTable\n\n# All following examples print the following table onto stdout:\n# | constant | value |\n# |----------|-------|\n# | e        | 2.71  |\n# | pi       | 3.14  |\n# | sqrt2    | 1.41  |\n\n# With dictionaries\nMarkdownTable.from_dicts([\n    {\"constant\": \"e\", \"value\": 2.71},\n    {\"constant\": \"pi\", \"value\": 3.14},\n    {\"constant\": \"sqrt2\", \"value\": 1.41},\n]).print()\n\n# With 2D iterables\nMarkdownTable.from_2d_iterable([\n    [\"constant\", \"value\"],\n    [\"pi\", 6.28],\n    [\"e\", 2.71],\n    [\"sqrt2\", 1.41],\n]).print()\n\n# With named tuples\nfrom typing import NamedTuple\n\nclass Constant(NamedTuple):\n    constant: str\n    value: float\n\nMarkdownTable.from_namedtuples([\n    Constant(\"e\", 2.71),\n    Constant(\"pi\", 3.14),\n    Constant(\"sqrt2\", 1.41),\n]).print()\n```\n\nMarkdownTable automatically coalesces all values into strings (with `str(value)`);\nwith the exception of the `MarkdownTable.from_dicts`, where keys are assumed to be strings.\n\nTo use custom formatting, either coalesce values into strings on your own,\nuse your own classes with custom `__str__` methods,\nor use the special `MarkdownTable.from_serializable` constructor.\n\nIt takes an iterable of objects with `_fields` property and a `serialize` method. Example:\n\n```py\nfrom table2md import MarkdownTable\nfrom typing import NamedTuple\nfrom datetime import datetime\n\n# Named tuples already provide the _fields property,\n# so we only need to implement the serialize method.\nclass TemperatureReadout(NamedTuple):\n    tstamp: datetime\n    value: float\n\n    def serialize(self) -> tuple[str, str]:\n        return self.tstamp.strftime(\"%Y-%m-%d %H:%M\"), f\"{self.value:.1f}\"\n\nMarkdownTable.from_serializable([\n    TemperatureReadout(datetime(2021, 11, 1, 10, 0, 0), 10.411),\n    TemperatureReadout(datetime(2021, 11, 1, 12, 0, 0), 12.782),\n    TemperatureReadout(datetime(2021, 11, 1, 14, 0, 0), 11.214),\n]).print()\n# Output:\n# |      tstamp      | value |\n# |------------------|-------|\n# | 2021-11-01 10:00 | 10.4  |\n# | 2021-11-01 12:00 | 12.8  |\n# | 2021-11-01 14:00 | 11.2  |\n```\n\nDocumentation\n-------------\n\n#### MarkdownTable\n\nA class to represent tabular data\n\n- **MarkdownTable(data: List[List[Str]])**:  \n    Initializes a table from a 2D list of strings.\n    1st row is always the header row.\n    See utility MarkdownTable.from_* helper classmethods.\n    Provided lists are not copied!\n\n- **markdown_table.\\_\\_str\\_\\_() -> str**:  \n    Serializes the contained tabular data to a markdown table.\n    First row is assumed to be the header row.\n\n- **markdown_table.validate() -> None**:  \n    Ensures the contained table is good-to-print -\n    that is it has a header; and all rows with data have the same number\n    of cells as the header.  \n    Raises a sub-class of InvalidData in case invalid state is detected.\n\n- **markdown_table.print(end: str = \"\", file: SupportsWrite[str] = sys.stdout, flush: bool = False) -> None**:  \n    Validates the table, and then prints it.\n    'end', 'file' and 'flush' arguments are passed\n    through to the builtin print function.  \n    Pleas note that the serialized table already has a newline at the end,\n    so `end=\"\\n\"` is not necessary.\n\n- **MarkdownTable.from_2d_iterable(iters: Iterable[Iterable[Any]]) -> MarkdownTable**:  \n    Initializes the table from a 2D iterable.\n    Every cell is saved by calling `str(cell)`.\n    If provided with a 2D list, those lists are copied\n    (this is different to the behavior from the constructor).\n\n- **MarkdownTable.from_dicts(dicts: Iterable[Mapping[str, Any]]) -> MarkdownTable:**:  \n    Initializes the table from an iterable of dictionaries.\n    Every value is saved by calling `str(cell)`.  \n    Only keys from the first dictionary are used; that is any extra key\n    in other dictionaries are ignored.\n    However, if a following dict has a missing key, KeyError is thrown.\n\n- **MarkdownTable.from_namedtuples(named_tuples: Iterable[_NamedTupleLike]) -> MarkdownTable**:  \n    Initializes the table from an iterable of NamedTuples.  \n    Well, in reality those don't have to be NamedTuples per se;\n    as longs at the objects have a `_fields` property\n    and one can iterate over those objects this function works fine.  \n    First object's `_fields` property is the header row.  \n    If objects aren't of the same type, ensure all of them have the same amount of fields;\n    otherwise an invalid table is created.\n\n- **MarkdownTable.from_serializable(objects: Iterable[_Serializable]) -> MarkdownTable**:  \n    This is an extension of from_namedtuples; but instead of iterating over\n    those objects directly, obj.serialize() is used to get the string representations\n    of the cells.  \n    So, as long as objects have the `_fields` property and\n    a `serialize()` method; this method works fine.  \n    First object's `_fields` property is the header row.  \n    Ensure all object's serialize() method yield the same amount of cells,\n    otherwise an invalid table is created.\n\n#### Exceptions\n\n- **InvalidData**:\n    Base exception fort use in table validation. Subclasses `ValueError`.\n\n- **NoData**:\n    Exception used when a table has absolutely no data; not even a header row.\n    Subclasses `InvalidData`.\n\n- **MisalignedRows**:\n    Exception used when a table has rows with more/less cells than the header.\n    Subclasses `InvalidData`.\n\n#### Protocols/Interfaces\n\n- **SupportsWrite[str]**:\n    Anything with a write method accepting a string argument.\n    [Implemented by the _typeshed module](https://github.com/python/typeshed/blob/master/stdlib/_typeshed/__init__.pyi#L173).\n\n- **_NamedTupleLike**:\n    Anything with a `_fields` property, which is an iterable of strings\n    representing field names; that is itself iterable.\n\n- **_Serializable**:\n    Anything with a `_fields` property, which is an iterable of strings\n    representing field names; and with a `serialize() -> Iterable[str]` method\n    which returns all the held field values as strings.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MKuranowski/table2md",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "table2md",
    "package_url": "https://pypi.org/project/table2md/",
    "platform": "",
    "project_url": "https://pypi.org/project/table2md/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MKuranowski/table2md/issues",
      "Homepage": "https://github.com/MKuranowski/table2md"
    },
    "release_url": "https://pypi.org/project/table2md/1.0.0/",
    "requires_dist": [
      "typing-extensions ; python_version < \"3.8\""
    ],
    "requires_python": ">=3.6",
    "summary": "Print tabular data in markdown format",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12084448,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65c3fae1b9521c2d7e0a9ab1b254347575622b1c4c99156b929563b7743200d3",
          "md5": "0c400a448792e9e866680c9154ac44e1",
          "sha256": "0ed69deb2a91cb734dfe96911d93271f2d18ffb3978dbe424d832c7f5569aa38"
        },
        "downloads": -1,
        "filename": "table2md-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c400a448792e9e866680c9154ac44e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6863,
        "upload_time": "2021-11-21T17:24:30",
        "upload_time_iso_8601": "2021-11-21T17:24:30.827754Z",
        "url": "https://files.pythonhosted.org/packages/65/c3/fae1b9521c2d7e0a9ab1b254347575622b1c4c99156b929563b7743200d3/table2md-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8028e57d97d2b3877935cf03c6c391b206b58260c85722c1422f31bc16160cf4",
          "md5": "65916130921db5642a63315526dc2f8f",
          "sha256": "a214dbac42af24f4a840437bada6af3cba3813ecccce15487f1328747931bfe8"
        },
        "downloads": -1,
        "filename": "table2md-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65916130921db5642a63315526dc2f8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5967,
        "upload_time": "2021-11-21T17:24:32",
        "upload_time_iso_8601": "2021-11-21T17:24:32.651471Z",
        "url": "https://files.pythonhosted.org/packages/80/28/e57d97d2b3877935cf03c6c391b206b58260c85722c1422f31bc16160cf4/table2md-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65c3fae1b9521c2d7e0a9ab1b254347575622b1c4c99156b929563b7743200d3",
        "md5": "0c400a448792e9e866680c9154ac44e1",
        "sha256": "0ed69deb2a91cb734dfe96911d93271f2d18ffb3978dbe424d832c7f5569aa38"
      },
      "downloads": -1,
      "filename": "table2md-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c400a448792e9e866680c9154ac44e1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6863,
      "upload_time": "2021-11-21T17:24:30",
      "upload_time_iso_8601": "2021-11-21T17:24:30.827754Z",
      "url": "https://files.pythonhosted.org/packages/65/c3/fae1b9521c2d7e0a9ab1b254347575622b1c4c99156b929563b7743200d3/table2md-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8028e57d97d2b3877935cf03c6c391b206b58260c85722c1422f31bc16160cf4",
        "md5": "65916130921db5642a63315526dc2f8f",
        "sha256": "a214dbac42af24f4a840437bada6af3cba3813ecccce15487f1328747931bfe8"
      },
      "downloads": -1,
      "filename": "table2md-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "65916130921db5642a63315526dc2f8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5967,
      "upload_time": "2021-11-21T17:24:32",
      "upload_time_iso_8601": "2021-11-21T17:24:32.651471Z",
      "url": "https://files.pythonhosted.org/packages/80/28/e57d97d2b3877935cf03c6c391b206b58260c85722c1422f31bc16160cf4/table2md-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}