{
  "info": {
    "author": "Justin Engel",
    "author_email": "jtengel08@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "==========\nShell Proc\n==========\n\nInstall\n=======\n\n.. code-block:: bash\n\n    pip install shell_proc\n\n\nRun\n===\n\nRun a series of commands with results.\n\n.. code-block:: python\n\n    from shell_proc import Shell\n\n    with Shell() as sh:\n        sh('cd ..')\n        if sh.is_windows():\n            cmd = sh('dir')\n        else:\n            cmd = sh('ls')\n\n        # cmd (Command) Attributes: cmd, exit_code, stdout, stderr\n        print(cmd.stdout)\n\n\nRun a series of terminal commands.\n\n.. code-block:: python\n\n    import sys\n    from shell_proc import Shell\n\n    with Shell(stdout=sys.stdout, stderr=sys.stderr) as sh:\n        sh.run('mkdir storage')\n        sh('cd storage')  # Same as sh.run()\n        sh('echo Hello World! > hello.txt')\n\n        if sh.is_windows():\n            sh('python -m venv ./winvenv')\n            sh('call ./winvenv/Scripts/activate.bat')\n        else:\n            pwd = sh('pwd')\n            sh('cd ~')\n            sh('python3 -m venv ./lxvenv')\n            sh('source ./lxvenv/bin/activate')\n            sh('cd {}'.format(pwd.stdout))\n        sh('pip install requests')\n        sh('pip list')\n\n    table = '|{:_<20}|{:_<20}|{:_<20}|{:_<50}|'\n    print(table.format('', '', '', '').replace('|', '_'))\n    print(table.format(\"Exit Code\", \"Has Error\", \"Has Ouput\", \"Command\").replace('_', ' '))\n    print(table.format('', '', '', ''))\n    for cmd in sh.history:\n        print(table.format(cmd.exit_code, cmd.has_error(), cmd.has_output(), cmd.cmd).replace('_', ' '))\n    print(table.format('', '', '', '').replace('|', '_'))\n\n\nRun without blocking every command\n\n.. code-block:: python\n\n    import sys\n    import time\n    from shell_proc import Shell\n\n    with Shell(stdout=sys.stdout, stderr=sys.stderr, blocking=False, wait_on_exit=True) as sh:\n        sh.run('mkdir storage')\n        sh('cd storage')  # Same as sh.run()\n        sh('echo Hello World! > hello.txt')\n\n        if sh.is_windows():\n            sh('python -m venv ./winvenv')\n            sh('call ./winvenv/Scripts/activate.bat')\n        else:\n            pwd = sh('pwd')\n            sh('cd ~')\n            sh('python3 -m venv ./lxvenv')\n            sh('source ./lxvenv/bin/activate')\n            sh('cd {}'.format(pwd.stdout))\n        sh('pip install requests')\n        sh('pip list')\n        print('---------- At exit (shows non-blocking until exit) ----------')\n\n    time.sleep(1)\n    print('1 Second has passed', 'Running:', sh.current_command)\n    time.sleep(1)\n    print('2 Seconds have passed', 'Running:', sh.current_command)\n    time.sleep(1)\n    print('3 Seconds have passed', 'Running:', sh.current_command)\n\n    sh.wait()  # Wait for all commands to finish\n\n\nManually call commands and check results.\n\n.. code-block:: python\n\n    import io\n    import sys\n    from shell_proc import Shell\n\n    # Initialize and run tasks\n    sh = Shell('mkdir storage',\n               'cd storage',\n               'echo Hello World! > hello.txt',\n               stderr=io.StringIO())\n\n    # Manually run tasks\n    if sh.is_windows():\n        sh('python -m venv ./winvenv')\n        sh('call ./winvenv/Scripts/activate.bat')\n    else:\n        pwd = sh('pwd')\n        sh('cd ~')\n        sh('python3 -m venv ./lxvenv')\n        sh('source ./lxvenv/bin/activate')\n        sh('cd {}'.format(pwd.stdout))\n\n    # Not exactly success. If True no output was printed to stderr. Stderr could also be warning like need to update pip\n    results = sh.run('pip install requests')\n    print(\"***** Successful install: \", results.exit_code == 0)\n    if results.exit_code != 0:\n        sh.stderr.seek(0)  # Move to start of io.StringIO()\n        err = sh.stderr.read()  # All text collected into stderr from subprocess stderr\n        print(err, file=sys.stderr)\n        # sh.print_stderr()  # Also available\n\n    sh.stdout = io.StringIO()  # Start saving output for new tasks\n    results = sh('pip list')\n    print('***** Output Printed\\n', results.stdout)\n\n    sh('pip -V')\n    print('pip -V =>', sh.last_command.stdout)\n\n    print('All collected stdout')\n    sh.stdout.seek(0)  # Move to start of io.StringIO()\n    print(sh.stdout.read(), end='', flush=True)  # Print all read data\n\n    # Should close when finished to stop threads from reading stdout and stderr subprocess.PIPE\n    # (will close automatically eventually)\n    sh.close()\n\nio.StringIO() Help\n==================\n\nBelow are several functions to read data from stdout and io.StringIO()\n\n.. code-block:: python\n\n    def read_io(fp):\n        \"\"\"Return all of the human readable text from the io object.\"\"\"\n        try:\n            if fp.seekable():\n                fp.seek(0)\n            out = fp.read()\n            if not isinstance(out, str):\n                out = out.decode('utf-8')\n            return out\n        except:\n            return ''\n\n    def clear_io(fp):\n        \"\"\"Try to clear the stdout\"\"\"\n        text = read_io(fp)\n        try:\n            fp.truncate(0)\n        except:\n            pass\n        return text\n\n    def print_io(fp, end='\\n', file=None, flush=True):\n        \"\"\"Print and clear the collected io.\"\"\"\n        if file is None:\n            file = sys.stdout\n        print(clear_io(fp), file=file, flush=True)\n\nRun Python\n==========\n\nAdded support to call python in a subprocess\n\n.. code-block:: python\n\n    from shell_proc import Shell\n\n    with Shell(python_call='python3') as sh:\n        sh.python('-c',\n                  'import os',\n                  'print(\"My PID:\", os.getpid())')\n\n\nRun Parallel\n============\n\nAdded support to run parallel subprocesses\n\n.. code-block:: python\n\n    import sys\n    import time\n    from shell_proc import Shell, python_args\n\n    with Shell(stdout=sys.stdout, stderr=sys.stderr) as sh:\n        p = sh.parallel(*(python_args('-c',\n                    'import os',\n                    'import time',\n                    \"print('My ID:', {id}, 'My PID:', os.getpid(), time.time())\".format(id=i)) for i in range(10)))\n        sh.wait()  # or p.wait()\n        print('finished parallel')\n        time.sleep(1)\n\n        tasks = []\n        for i in range(10):\n            if i == 3:\n                t = python_args('-c',\n                    'import os',\n                    'import time',\n                    'time.sleep(1)',\n                    \"print('My ID:', {id}, 'My PID:', os.getpid(), time.time())\".format(id=i))\n            else:\n                t = python_args('-c',\n                    'import os',\n                    'import time',\n                    \"print('My ID:', {id}, 'My PID:', os.getpid(), time.time())\".format(id=i))\n            tasks.append(t)\n        p = sh.parallel(*tasks)\n        p.wait()\n        print('finished parallel')\n        time.sleep(1)\n\n        with sh.parallel() as p:\n            for i in range(10):\n                if i == 3:\n                    p.python('-c',\n                             'import os',\n                             'import time',\n                             'time.sleep(1)',\n                             \"print('My ID:', {id}, 'My PID:', os.getpid(), time.time())\".format(id=i))\n                else:\n                    p.python('-c',\n                             'import os',\n                             'import time',\n                             \"print('My ID:', {id}, 'My PID:', os.getpid(), time.time())\".format(id=i))\n            # p.wait() on exit context\n        print('finished parallel')\n\n\nUse Pipe\n========\n\nThe pipe operator can be used with Command objects to take a completed command stdout and submit the text into a\nnew commands stdin.\n\n.. code-block:: python\n\n    import sys\n    from shell_proc import Shell, ShellExit, shell_args\n\n    with Shell(stdout=sys.stdout, stderr=sys.stderr) as sh:\n        # One step\n        results = sh('dir') | 'find \"run\"'  # Hard to tell where find output starts\n\n        # Two Steps\n        cmd = sh('dir')\n        results = cmd | 'find \"run\"'\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/justengel/shell_proc/archive/v1.2.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justengel/shell_proc",
    "keywords": "shell bash subprocess sh",
    "license": "Proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shell-proc",
    "package_url": "https://pypi.org/project/shell-proc/",
    "platform": "any",
    "project_url": "https://pypi.org/project/shell-proc/",
    "project_urls": {
      "Download": "https://github.com/justengel/shell_proc/archive/v1.2.1.tar.gz",
      "Homepage": "https://github.com/justengel/shell_proc"
    },
    "release_url": "https://pypi.org/project/shell-proc/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Continuous shell process",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12316247,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10fcd5f47d0ec31d435b5bc903d926432f13f49c544c78809f37ce0ee1ad6262",
          "md5": "a8f8ac10cf50ce66e07ddc10bdcf181c",
          "sha256": "4f14a5bcde6511a57091bcbbfac224145e730aa892419369b3b9c4974d2dd3cd"
        },
        "downloads": -1,
        "filename": "shell_proc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8f8ac10cf50ce66e07ddc10bdcf181c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6362,
        "upload_time": "2019-12-12T19:57:32",
        "upload_time_iso_8601": "2019-12-12T19:57:32.932018Z",
        "url": "https://files.pythonhosted.org/packages/10/fc/d5f47d0ec31d435b5bc903d926432f13f49c544c78809f37ce0ee1ad6262/shell_proc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4715ce1bd88f4ec77b93a67fe3d95792a311392e5ccaac54de6ba438c534ebb8",
          "md5": "b4f06a714e00cc1893b18f762948dd66",
          "sha256": "5eff1c20f0473d3dbc2af97203d2bb3362b36366cd77249f0d396c02ed2182a8"
        },
        "downloads": -1,
        "filename": "shell_proc-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b4f06a714e00cc1893b18f762948dd66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6513,
        "upload_time": "2020-01-17T17:57:26",
        "upload_time_iso_8601": "2020-01-17T17:57:26.400411Z",
        "url": "https://files.pythonhosted.org/packages/47/15/ce1bd88f4ec77b93a67fe3d95792a311392e5ccaac54de6ba438c534ebb8/shell_proc-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb4491e96c1f53e12713ac37a92dffca67f991555c3f51e648c3fa4630236d7",
          "md5": "c427974ccc03508924c8ad0c5f794537",
          "sha256": "395fb10d7a5cc340e7d5f284ebedfb378ff34d0582e9ff90848e2e446621bc88"
        },
        "downloads": -1,
        "filename": "shell_proc-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c427974ccc03508924c8ad0c5f794537",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6967,
        "upload_time": "2020-01-17T18:08:54",
        "upload_time_iso_8601": "2020-01-17T18:08:54.992370Z",
        "url": "https://files.pythonhosted.org/packages/fc/b4/491e96c1f53e12713ac37a92dffca67f991555c3f51e648c3fa4630236d7/shell_proc-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "293e33d40b480b954758fd6067f92f1b0fd27869052d83f419712410792a1b8a",
          "md5": "4da6feb23da1412b92005812f2eddfd5",
          "sha256": "367ee29cfaac2c5b39937ca4e58cc43e5bf9877a97b4ed047e2618daf2fb7909"
        },
        "downloads": -1,
        "filename": "shell_proc-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4da6feb23da1412b92005812f2eddfd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8937,
        "upload_time": "2020-01-22T03:02:27",
        "upload_time_iso_8601": "2020-01-22T03:02:27.673733Z",
        "url": "https://files.pythonhosted.org/packages/29/3e/33d40b480b954758fd6067f92f1b0fd27869052d83f419712410792a1b8a/shell_proc-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2893d8698bc5b659377d9bf18904d7e3bdab185d339a3ba8b7f349d8b1d261f",
          "md5": "83735a5e332e6d0020a5d053c6b18795",
          "sha256": "4323bc2edc8583d5d38a816ae31bb30dd378d6d466f84b1a8ddd176591e62c0a"
        },
        "downloads": -1,
        "filename": "shell_proc-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83735a5e332e6d0020a5d053c6b18795",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9413,
        "upload_time": "2020-01-27T18:54:49",
        "upload_time_iso_8601": "2020-01-27T18:54:49.859986Z",
        "url": "https://files.pythonhosted.org/packages/a2/89/3d8698bc5b659377d9bf18904d7e3bdab185d339a3ba8b7f349d8b1d261f/shell_proc-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e562e8bede539a58ede0bae1464d63341a460af4954e944f83f9da658f4259",
          "md5": "97028ee4f316d8a9d65b105f41fa656a",
          "sha256": "db2ebed7ec06d5e8fad08dad66c3b2b85ca7280761f738d9e1187d056282873a"
        },
        "downloads": -1,
        "filename": "shell_proc-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97028ee4f316d8a9d65b105f41fa656a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11487,
        "upload_time": "2021-12-15T00:39:02",
        "upload_time_iso_8601": "2021-12-15T00:39:02.042524Z",
        "url": "https://files.pythonhosted.org/packages/86/e5/62e8bede539a58ede0bae1464d63341a460af4954e944f83f9da658f4259/shell_proc-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d83388dd20d810a8506c50065ee8f92052ab7ba6a4a83c42c70dec004ff2b20",
          "md5": "0a57bafc802239c21965968d94df1d03",
          "sha256": "a953f3cd0cefaaf845d160b29adf890f073687aa6b00943e7722a2c3a78d1772"
        },
        "downloads": -1,
        "filename": "shell_proc-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a57bafc802239c21965968d94df1d03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13876,
        "upload_time": "2021-12-15T00:39:03",
        "upload_time_iso_8601": "2021-12-15T00:39:03.626767Z",
        "url": "https://files.pythonhosted.org/packages/4d/83/388dd20d810a8506c50065ee8f92052ab7ba6a4a83c42c70dec004ff2b20/shell_proc-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "085d2ce80a5e168a0dd2efefa8fd7bbe66458d2ff54bbd450390eec6fb18a03b",
          "md5": "107c4f000d6f1a6fc2bc25320400040d",
          "sha256": "ba7d31ce652f7ba58cacd1f3a4cba4af419c3a82c9776a3b9ebd59558e00288d"
        },
        "downloads": -1,
        "filename": "shell_proc-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "107c4f000d6f1a6fc2bc25320400040d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38787,
        "upload_time": "2021-12-15T20:17:34",
        "upload_time_iso_8601": "2021-12-15T20:17:34.031868Z",
        "url": "https://files.pythonhosted.org/packages/08/5d/2ce80a5e168a0dd2efefa8fd7bbe66458d2ff54bbd450390eec6fb18a03b/shell_proc-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "313c537515de8174651b47b2005d25a0940fb1490f125c5670f4983f19410d2c",
          "md5": "3bb84cac471ba1495e320b1a7dd26a01",
          "sha256": "d66fa300ce0bf1146d77932b0829be28ec20367e09a682eb5c32192a5b99dfb8"
        },
        "downloads": -1,
        "filename": "shell_proc-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3bb84cac471ba1495e320b1a7dd26a01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14766,
        "upload_time": "2021-12-15T20:17:35",
        "upload_time_iso_8601": "2021-12-15T20:17:35.982182Z",
        "url": "https://files.pythonhosted.org/packages/31/3c/537515de8174651b47b2005d25a0940fb1490f125c5670f4983f19410d2c/shell_proc-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "085d2ce80a5e168a0dd2efefa8fd7bbe66458d2ff54bbd450390eec6fb18a03b",
        "md5": "107c4f000d6f1a6fc2bc25320400040d",
        "sha256": "ba7d31ce652f7ba58cacd1f3a4cba4af419c3a82c9776a3b9ebd59558e00288d"
      },
      "downloads": -1,
      "filename": "shell_proc-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "107c4f000d6f1a6fc2bc25320400040d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 38787,
      "upload_time": "2021-12-15T20:17:34",
      "upload_time_iso_8601": "2021-12-15T20:17:34.031868Z",
      "url": "https://files.pythonhosted.org/packages/08/5d/2ce80a5e168a0dd2efefa8fd7bbe66458d2ff54bbd450390eec6fb18a03b/shell_proc-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "313c537515de8174651b47b2005d25a0940fb1490f125c5670f4983f19410d2c",
        "md5": "3bb84cac471ba1495e320b1a7dd26a01",
        "sha256": "d66fa300ce0bf1146d77932b0829be28ec20367e09a682eb5c32192a5b99dfb8"
      },
      "downloads": -1,
      "filename": "shell_proc-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3bb84cac471ba1495e320b1a7dd26a01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14766,
      "upload_time": "2021-12-15T20:17:35",
      "upload_time_iso_8601": "2021-12-15T20:17:35.982182Z",
      "url": "https://files.pythonhosted.org/packages/31/3c/537515de8174651b47b2005d25a0940fb1490f125c5670f4983f19410d2c/shell_proc-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}