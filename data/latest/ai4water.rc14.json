{
  "info": {
    "author": "Ather Abbas",
    "author_email": "ather_abbas786@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# AI4Water\r\n\r\n\r\n[![Build Status](https://github.com/AtrCheema/AI4Water/workflows/tf/badge.svg)](https://github.com/AtrCheema/AI4Water/actions)\r\n[![Documentation Status](https://readthedocs.org/projects/ai4water/badge/?version=latest)](https://ai4water.readthedocs.io/en/latest/?badge=latest)\r\n[![DOI](https://zenodo.org/badge/DOI/10.5194/gmd-2021-139.svg)](https://doi.org/10.5194/gmd-15-3021-2022)\r\n[![Downloads](https://pepy.tech/badge/ai4water)](https://pepy.tech/project/ai4water)\r\n[![PyPI version](https://badge.fury.io/py/AI4Water.svg)](https://badge.fury.io/py/AI4Water)\r\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/AtrCheema/AI4Water)\r\n![GitHub last commit (branch)](https://img.shields.io/github/last-commit/AtrCheema/AI4Water/master)\r\n\r\n\r\nA uniform and simplified framework for rapid experimentation with deep leaning and machine learning based models\r\nfor time series and tabular data. To put into Andrej Karapathy's [words](https://twitter.com/karpathy/status/1350503355299205120)\r\n\r\n`Because deep learning is so empirical, success in it is to a large extent proportional to raw experimental throughput,\r\n the ability to babysit a large number of experiments at once, staring at plots and tweaking/re-launching what works. \r\n This is necessary, but not sufficient.` \r\n\r\nThe specific purposes of the repository are\r\n\r\n-    compliment the functionality of `keras`/`pytorch`/`sklearn` by making pre and \r\n post-processing easier for time-series prediction/classification problems (also holds\r\n true for any tabular data).\r\n \r\n-    save, load/reload or build models from readable json file. This repository \r\n provides a framework to build layered models using python dictionary and with \r\n several helper tools which fasten the process of  modeling time-series forecasting.\r\n\r\n-    provide a uniform interface for optimizing hyper-parameters for \r\n [skopt](https://scikit-optimize.github.io/stable/index.html);\r\n [sklearn](https://scikit-learn.org/stable/modules/classes.html#hyper-parameter-optimizers) \r\n based [grid](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html) \r\n and [random](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html);\r\n  [hyperopt](http://hyperopt.github.io/hyperopt/) based \r\n  [tpe](https://papers.nips.cc/paper/2011/file/86e8f7ab32cfd12577bc2619bc635690-Paper.pdf), \r\n  [atpe](https://www.electricbrain.io/blog/learning-to-optimize) or \r\n  [optuna](https://optuna.readthedocs.io/en/stable/) based \r\n  [tpe](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.samplers.TPESampler.html), \r\n  [cmaes](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.samplers.CmaEsSampler.html) etc. \r\n  See [example](https://github.com/AtrCheema/AI4Water/blob/master/examples/hyper_para_opt.ipynb)  \r\n  using its application.\r\n \r\n-    cut short the time to write boilerplate code in developing machine learning \r\n based models.\r\n\r\n-    It should be possible to overwrite/customize any of the functionality of the AI4Water's `Model` \r\n by subclassing the\r\n `Model`. So at the highest level you just need to initiate the `Model`, and then need `fit`, `predict` and \r\n `view_model` methods of `Model` class, but you can go as low as you could go with tensorflow/keras. \r\n\r\n-    All the above functionalities should be available without complicating keras \r\n implementation.\r\n\r\n\r\n## Installation\r\n\r\nAn easy way to install ai4water is using pip\r\n\r\n    pip install ai4water\r\n\r\nYou can also use GitHub link\r\n\r\n\tpython -m pip install git+https://github.com/AtrCheema/AI4Water.git\r\n\r\nor using setup file, go to folder where repo is downloaded\r\n\r\n    python setup.py install\r\n\r\nThe latest code however (possibly with fewer bugs and more features) can be installed from `dev` branch instead\r\n\r\n    python -m pip install git+https://github.com/AtrCheema/AI4Water.git@dev\r\n\r\nTo install the latest branch (`dev`) with all requirements use the following command\r\n\r\n    python -m pip install \"AI4Water[all] @ git+https://github.com/AtrCheema/AI4Water.git@dev\"\r\n\r\n### installation options\r\n`all` keyword will install all the dependencies. You can choose the dependencies of particular sub-module\r\nby using the specific keyword. Following keywords are available\r\n\r\n - `hpo` if you want hyperparameter optimization\r\n - `post_process` if you want postprocessing\r\n - `exp` for experiments sub-module\r\n\r\n\r\n## Sub-modules\r\nAI4Water consists of several submodules, each of wich responsible for a specific tasks.\r\nThe modules are also liked with each other. For understanding sub-module structure of\r\nai4water, [see this article](https://ai4water.readthedocs.io/en/dev/understanding.html)\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/architecture.png\" width=\"800\" height=\"700\"/>\r\n</p>\r\n\r\n## How to use\r\n\r\nBuild a `Model` by providing all the arguments to initiate it.\r\n\r\n```python\r\nfrom ai4water import Model\r\nfrom ai4water.models import MLP\r\nfrom ai4water.datasets import mg_photodegradation\r\ndata, *_ = mg_photodegradation(encoding=\"le\")\r\n\r\nmodel = Model(\r\n    # define the model/algorithm\r\n    model=MLP(units=24, activation=\"relu\", dropout=0.2),\r\n    # columns in data file to be used as input\r\n    input_features=data.columns.tolist()[0:-1],\r\n    # columns in csv file to be used as output\r\n    output_features=data.columns.tolist()[-1:],\r\n    lr=0.001,  # learning rate\r\n    batch_size=8,  # batch size\r\n    epochs=500,  # number of epochs to train the neural network\r\n    patience=50,  # used for early stopping\r\n)\r\n```\r\n\r\nTrain the model by calling the `fit()` method\r\n```python\r\nhistory = model.fit(data=data)\r\n```\r\n\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/mlp_loss.png\" width=\"500\" />\r\n</p>\r\n\r\nAfter training, we can make predictions from it on test/training data\r\n```python\r\nprediction = model.predict_on_test_data(data=data)\r\n```\r\n\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/mlp_reg.png\" width=\"400\" />\r\n  <img src=\"/docs/source/imgs/mlp_residue.png\" width=\"400\" />\r\n</p>\r\n\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/mlp_line.png\" width=\"400\" />\r\n  <img src=\"/docs/source/imgs/mlp_edf.png\" width=\"400\" />\r\n</p>\r\n\r\nThe model object returned from initiating AI4Water's `Model` is same as that of Keras' `Model`\r\nWe can verify it by checking its type\r\n```python\r\nimport tensorflow as tf\r\nisinstance(model, tf.keras.Model)  # True\r\n``` \r\n\r\n\r\n## Using your own pre-processed data\r\nYou can use your own pre-processed data without using any of pre-processing tools of AI4Water. You will need to provide\r\ninput output paris to `data` argument to `fit` and/or `predict` methods.\r\n```python\r\nimport numpy as np\r\nfrom ai4water import Model  # import any of the above model\r\nfrom ai4water.models import LSTM\r\n\r\nbatch_size = 16\r\nlookback = 15\r\ninputs = ['dummy1', 'dummy2', 'dummy3', 'dummy4', 'dummy5']  # just dummy names for plotting and saving results.\r\noutputs=['DummyTarget']\r\n\r\nmodel = Model(\r\n            model = LSTM(units=64),\r\n            batch_size=batch_size,\r\n            ts_args={'lookback':lookback},\r\n            input_features=inputs,\r\n            output_features=outputs,\r\n            lr=0.001\r\n              )\r\nx = np.random.random((batch_size*10, lookback, len(inputs)))\r\ny = np.random.random((batch_size*10, len(outputs)))\r\n\r\nmodel.fit(x=x,y=y)\r\n\r\n```\r\n\r\n## using for `scikit-learn`/`xgboost`/`lgbm`/`catboost` based models\r\nThe repository can also be used for machine learning based models such as scikit-learn/xgboost based models for both\r\nclassification and regression problems by making use of `model` keyword arguments in `Model` function.\r\nHowever, integration of ML based models is not complete yet.\r\n```python\r\nfrom ai4water import Model\r\nfrom ai4water.datasets import busan_beach\r\n\r\ndata = busan_beach()  # path for data file\r\n\r\nmodel = Model(\r\n    # columns in data to be used as input\r\n    input_features=['tide_cm', 'wat_temp_c', 'sal_psu', 'rel_hum', 'pcp_mm'],\r\n    output_features = ['tetx_coppml'], # columns in data file to be used as input\r\n    seed=1872,\r\n    val_fraction=0.0,\r\n    split_random=True,\r\n        #  any regressor from https://scikit-learn.org/stable/modules/classes.html\r\n        model={\"RandomForestRegressor\": {}},  # set any of regressor's parameters. e.g. for RandomForestRegressor above used,\r\n    # some of the paramters are https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html#sklearn.ensemble.RandomForestRegressor\r\n              )\r\n\r\nhistory = model.fit(data=data)\r\n\r\nmodel.predict_on_test_data(data=data)\r\n```\r\n\r\n# Hyperparameter optimization\r\nFor hyperparameter optimization, replace the actual values of hyperparameters\r\nwith the space.\r\n```python\r\n\r\nfrom ai4water.functional import Model\r\nfrom ai4water.datasets import MtropicsLaos\r\nfrom ai4water.hyperopt import Real, Integer\r\n\r\ndata = MtropicsLaos().make_regression(lookback_steps=1)\r\n\r\nmodel = Model(\r\n    model = {\"RandomForestRegressor\": {\r\n        \"n_estimators\": Integer(low=5, high=30, name='n_estimators', num_samples=10),\r\n       \"max_leaf_nodes\": Integer(low=2, high=30, prior='log', name='max_leaf_nodes', num_samples=10),\r\n        \"min_weight_fraction_leaf\": Real(low=0.0, high=0.5, name='min_weight_fraction_leaf', num_samples=10),\r\n        \"max_depth\": Integer(low=2, high=10, name='max_depth', num_samples=10),\r\n        \"min_samples_split\": Integer(low=2, high=10, name='min_samples_split', num_samples=10),\r\n        \"min_samples_leaf\": Integer(low=1, high=5, name='min_samples_leaf', num_samples=10),\r\n    }},\r\n    input_features=data.columns.tolist()[0:-1],\r\n    output_features=data.columns.tolist()[-1:],\r\n    cross_validator = {\"KFold\": {\"n_splits\": 5}},\r\n    x_transformation=\"zscore\",\r\n    y_transformation=\"log\",\r\n)\r\n\r\n# First check the performance on test data with default parameters\r\nmodel.fit_on_all_training_data(data=data)\r\nprint(model.evaluate_on_test_data(data=data, metrics=[\"r2_score\", \"r2\"]))\r\n\r\n# optimize the hyperparameters\r\noptimizer = model.optimize_hyperparameters(\r\n   algorithm = \"bayes\",  # you can choose between `random`, `grid` or `tpe`\r\n    data=data,\r\n    num_iterations=60,\r\n)\r\n\r\n# Now check the performance on test data with default parameters\r\nprint(model.evaluate_on_test_data(data=data, metrics=[\"r2_score\", \"r2\"]))\r\n```\r\n\r\nRunning the above code will optimize the hyperparameters and generate\r\nfollowing figures\r\n\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/hpo_ml_convergence.png\" width=\"400\" />\r\n  <img src=\"/docs/source/imgs/hpo_fanova_importance_hist.png\" width=\"400\" />\r\n</p>\r\n\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/hpo_objective.png\" width=\"500\" />\r\n  <img src=\"/docs/source/imgs/hpo_evaluations.png\" width=\"500\" />\r\n</p>\r\n\r\n<p float=\"left\"> \r\n  <img src=\"/docs/source/imgs/hpo_parallel_coordinates.png\" width=\"500\" />\r\n</p>\r\n\r\n\r\n# Experiments\r\nThe experiments module is for comparison of multiple models on a single data\r\nor for comparison of one model under different conditions.\r\n\r\n```python\r\nfrom ai4water.datasets import busan_beach\r\nfrom ai4water.experiments import MLRegressionExperiments\r\n\r\ndata = busan_beach()\r\n\r\ncomparisons = MLRegressionExperiments(\r\n    input_features=data.columns.tolist()[0:-1],\r\n    output_features=data.columns.tolist()[-1:],\r\n    split_random=True\r\n)\r\n# train all the available machine learning models\r\ncomparisons.fit(data=data)\r\n# Compare R2 of models \r\nbest_models = comparisons.compare_errors(\r\n    'r2',\r\n    data=data,\r\n    cutoff_type='greater',\r\n    cutoff_val=0.1,\r\n    figsize=(8, 9),\r\n    colors=['salmon', 'cadetblue']\r\n)\r\n# Compare model performance using Taylor diagram\r\n_ = comparisons.taylor_plot(\r\n    data=data,\r\n    figsize=(5, 9),\r\n    exclude=[\"DummyRegressor\", \"XGBRFRegressor\",\r\n             \"SGDRegressor\", \"KernelRidge\", \"PoissonRegressor\"],\r\n    leg_kws={'facecolor': 'white',\r\n             'edgecolor': 'black','bbox_to_anchor':(2.0, 0.9),\r\n             'fontsize': 10, 'labelspacing': 1.0, 'ncol': 2\r\n            },\r\n)\r\n```\r\n\r\n<p float=\"left\">\r\n  <img src=\"/docs/source/imgs/exp_r2.png\" width=\"500\" />\r\n  <img src=\"/docs/source/imgs/exp_taylor.png\" width=\"500\" />\r\n</p>\r\n\r\nFor more comprehensive and detailed examples see [![Documentation Status](https://readthedocs.org/projects/ai4water-examples/badge/?version=latest)](https://ai4water.readthedocs.io/projects/Examples/en/latest/?badge=latest)\r\n\r\n## Disclaimer\r\nThe library is still under development. Fundamental changes are expected without prior notice or\r\nwithout regard of backward compatability.\r\n\r\n#### Related\r\n\r\n[sktime: A Unified Interface for Machine Learning with Time Series](https://github.com/alan-turing-institute/sktime)\r\n\r\n[Seglearn: A Python Package for Learning Sequences and Time Series](https://github.com/dmbee/seglearn)\r\n\r\n[Pastas: Open Source Software for the Analysis of Groundwater Time Series](https://github.com/pastas/pastas)\r\n\r\n[Time Series FeatuRe Extraction on basis of Scalable Hypothesis tests (tsfresh -- A Python package)](https://github.com/blue-yonder/tsfresh)\r\n\r\n[MLAir](https://gmd.copernicus.org/preprints/gmd-2020-332/)\r\n\r\n[pyts: A Python Package for Time Series Classification](https://github.com/johannfaouzi/pyts)\r\n\r\n[Tslearn, A Machine Learning Toolkit for Time Series Data](https://github.com/tslearn-team/tslearn)\r\n\r\n[TSFEL: Time Series Feature Extraction Library](https://doi.org/10.1016/j.softx.2020.100456)\r\n\r\n[catch22](https://github.com/chlubba/catch22)\r\n\r\n[vest](https://github.com/vcerqueira/vest-python)\r\n\r\n[pyunicorn (Unified Complex Network and RecurreNce analysis toolbox](https://github.com/pik-copan/pyunicorn)\r\n\r\n[TSFuse Python package for automatically constructing features from multi-view time series data](https://github.com/arnedb/tsfuse)\r\n\r\n[Catalyst](https://github.com/catalyst-team/catalyst)\r\n\r\n[tsai - A state-of-the-art deep learning library for time series and sequential data](https://github.com/timeseriesAI/tsai)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AtrCheema/AI4Water",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "AI4Water",
    "package_url": "https://pypi.org/project/AI4Water/",
    "platform": null,
    "project_url": "https://pypi.org/project/AI4Water/",
    "project_urls": {
      "Homepage": "https://github.com/AtrCheema/AI4Water"
    },
    "release_url": "https://pypi.org/project/AI4Water/1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Platform for developing data driven based models for sequential/tabular data",
    "version": "1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16791816,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89e59c3d9e9159a29af91c0759a3a774b8a1d5c6011f9904a4e5be2f6251b0a2",
          "md5": "53203f4117e54322f26b2060bea49f04",
          "sha256": "971ac6d1f1c6e884a3ed716bdfa736dfb7fe76cc576a30c0eaa5bade878e00c3"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "53203f4117e54322f26b2060bea49f04",
        "packagetype": "bdist_egg",
        "python_version": "1.0",
        "requires_python": null,
        "size": 1139145,
        "upload_time": "2022-04-24T05:57:22",
        "upload_time_iso_8601": "2022-04-24T05:57:22.612627Z",
        "url": "https://files.pythonhosted.org/packages/89/e5/9c3d9e9159a29af91c0759a3a774b8a1d5c6011f9904a4e5be2f6251b0a2/AI4Water-1.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "575f086b86c4a8747726588756a6a75f057ec2a2b8da9c0c1ff6a9287af9cb7d",
          "md5": "c7861e4635603154656d3649126539d4",
          "sha256": "59704887620c4cabdeb18cf2ab922100e94d216799741eca998ae2aedf285430"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "c7861e4635603154656d3649126539d4",
        "packagetype": "bdist_egg",
        "python_version": "1.0b0",
        "requires_python": null,
        "size": 1252594,
        "upload_time": "2022-04-24T05:57:24",
        "upload_time_iso_8601": "2022-04-24T05:57:24.824155Z",
        "url": "https://files.pythonhosted.org/packages/57/5f/086b86c4a8747726588756a6a75f057ec2a2b8da9c0c1ff6a9287af9cb7d/AI4Water-1.0b0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d285c66b906a9a2911bf6ef1e931beaaa5f00e700bb21e0489c52c02c2ec1d00",
          "md5": "648285e6594b56859afe7301a70b17cd",
          "sha256": "f714e9d3ca7ed17c07af3218ec501cb151e94847041effa6258889d3e3b44c11"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "648285e6594b56859afe7301a70b17cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 433330,
        "upload_time": "2022-02-17T09:43:50",
        "upload_time_iso_8601": "2022-02-17T09:43:50.741726Z",
        "url": "https://files.pythonhosted.org/packages/d2/85/c66b906a9a2911bf6ef1e931beaaa5f00e700bb21e0489c52c02c2ec1d00/AI4Water-1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa369080b91fb0ebc10c949ae3d6f4ff863d7cc28724bfb8ba8eb041cd3c503d",
          "md5": "e1bedace9f6d62e1c8d8a9df0b2c6a1c",
          "sha256": "e35d2e41146e1c742bba0860a66070dfbeb12118e1e0781dc5dfe61f55865af2"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "e1bedace9f6d62e1c8d8a9df0b2c6a1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 430689,
        "upload_time": "2022-02-20T03:22:02",
        "upload_time_iso_8601": "2022-02-20T03:22:02.720438Z",
        "url": "https://files.pythonhosted.org/packages/fa/36/9080b91fb0ebc10c949ae3d6f4ff863d7cc28724bfb8ba8eb041cd3c503d/AI4Water-1.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23a46d83bdbf71875dbd8d288b34e04e5d0bed324e9055e2fb8d707ceb91ba80",
          "md5": "37dfaf1e99497660e7afbe663cb27188",
          "sha256": "54c1844bd2dfa2b81f36dcef4e578f22d64de7b387a17c67125d6eb793153f17"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "37dfaf1e99497660e7afbe663cb27188",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 436413,
        "upload_time": "2022-02-25T09:03:31",
        "upload_time_iso_8601": "2022-02-25T09:03:31.997193Z",
        "url": "https://files.pythonhosted.org/packages/23/a4/6d83bdbf71875dbd8d288b34e04e5d0bed324e9055e2fb8d707ceb91ba80/AI4Water-1.0b4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "119fa482defefb2a39f376d566d5f7b4547ba5d07ec8ea94b1d8a440391bf452",
          "md5": "7c1faafb9d114b1f863d0c68101c1445",
          "sha256": "c62ce162641a91d4ff17ccb60628b342a6b44e4ebf6d76fbaf881b23a04ad4f7"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b5.tar.gz",
        "has_sig": false,
        "md5_digest": "7c1faafb9d114b1f863d0c68101c1445",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 438348,
        "upload_time": "2022-03-03T01:56:54",
        "upload_time_iso_8601": "2022-03-03T01:56:54.882278Z",
        "url": "https://files.pythonhosted.org/packages/11/9f/a482defefb2a39f376d566d5f7b4547ba5d07ec8ea94b1d8a440391bf452/AI4Water-1.0b5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbfc426afbfbf1f7951178d6aa2d803cbfc6dffa0ed1f9d27331ebe4fc584ef0",
          "md5": "3b976db4ae60ed7fe0f83657fe082e2d",
          "sha256": "1af65a0298a66766fc9b745fb78e796a9a4180e01a5e40266bbf410b28aa2c5f"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b6-py3.9.egg",
        "has_sig": false,
        "md5_digest": "3b976db4ae60ed7fe0f83657fe082e2d",
        "packagetype": "bdist_egg",
        "python_version": "1.0b6",
        "requires_python": null,
        "size": 1269592,
        "upload_time": "2022-04-24T05:57:31",
        "upload_time_iso_8601": "2022-04-24T05:57:31.309241Z",
        "url": "https://files.pythonhosted.org/packages/cb/fc/426afbfbf1f7951178d6aa2d803cbfc6dffa0ed1f9d27331ebe4fc584ef0/AI4Water-1.0b6-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c80939288c749623a638ab8770b9432c9c26d5e2670951604bfde9ac1435f157",
          "md5": "a4c49502240d36c439774cef1f52699e",
          "sha256": "03b4e470bd4080f694b060cb19884db7e752b247408a1e5eb562f51797d30dde"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b6.tar.gz",
        "has_sig": false,
        "md5_digest": "a4c49502240d36c439774cef1f52699e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 438830,
        "upload_time": "2022-03-12T16:35:49",
        "upload_time_iso_8601": "2022-03-12T16:35:49.598289Z",
        "url": "https://files.pythonhosted.org/packages/c8/09/39288c749623a638ab8770b9432c9c26d5e2670951604bfde9ac1435f157/AI4Water-1.0b6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b90fb5bdc4f9e145d3d214df365dc820517bd43df76d57243b6c46bf141a78f4",
          "md5": "82b387df5209856f5748e39fae799467",
          "sha256": "19cc0ffc9b6d87b2642ae1fb3fb5e38f046126f0b9c8ccfa2b46e10631803080"
        },
        "downloads": -1,
        "filename": "AI4Water-1.0b7.tar.gz",
        "has_sig": false,
        "md5_digest": "82b387df5209856f5748e39fae799467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 447007,
        "upload_time": "2022-04-24T05:57:33",
        "upload_time_iso_8601": "2022-04-24T05:57:33.842324Z",
        "url": "https://files.pythonhosted.org/packages/b9/0f/b5bdc4f9e145d3d214df365dc820517bd43df76d57243b6c46bf141a78f4/AI4Water-1.0b7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e60510064d24d71c64091c2dcec938c69ff229b03d467d6b367a36f46b899398",
          "md5": "6387e6c256497d1e3de35e3a5c6fc30b",
          "sha256": "3e186a6c501724f7caf0c826dab5557d186908117c9102a13f06579f62553394"
        },
        "downloads": -1,
        "filename": "AI4Water-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6387e6c256497d1e3de35e3a5c6fc30b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 447181,
        "upload_time": "2022-04-25T03:36:42",
        "upload_time_iso_8601": "2022-04-25T03:36:42.262776Z",
        "url": "https://files.pythonhosted.org/packages/e6/05/10064d24d71c64091c2dcec938c69ff229b03d467d6b367a36f46b899398/AI4Water-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da65582c87bf3636b7d49ada5d06df5873cfd4b0150998f3a63c1ce2f750103b",
          "md5": "73346951ed35b82f8f78ad351413e18d",
          "sha256": "3685f67f977161541b9be35b22b4aa9fd24eedecb983cf0d6b2b18d30d10a2ed"
        },
        "downloads": -1,
        "filename": "AI4Water-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "73346951ed35b82f8f78ad351413e18d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 451333,
        "upload_time": "2022-04-29T06:38:01",
        "upload_time_iso_8601": "2022-04-29T06:38:01.397956Z",
        "url": "https://files.pythonhosted.org/packages/da/65/582c87bf3636b7d49ada5d06df5873cfd4b0150998f3a63c1ce2f750103b/AI4Water-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aa4ebebc4caa8d7482b87dad7b9eba1b61df597dc64e80a9fd1d96bc86dbbc0",
          "md5": "5fe501bb3c4a0e9ec95968628fe1e98f",
          "sha256": "1804da227009c19b5b226de9a94be13f15821097e0240299f46db5a7147188cc"
        },
        "downloads": -1,
        "filename": "AI4Water-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5fe501bb3c4a0e9ec95968628fe1e98f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19968971,
        "upload_time": "2022-05-04T16:07:48",
        "upload_time_iso_8601": "2022-05-04T16:07:48.481403Z",
        "url": "https://files.pythonhosted.org/packages/5a/a4/ebebc4caa8d7482b87dad7b9eba1b61df597dc64e80a9fd1d96bc86dbbc0/AI4Water-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdca753256cff9cb61e1eaa9f8d35067ccfae21c2bb70604ece7a0f3ac0e52d0",
          "md5": "970f4574a58082749e9f03223ed342b5",
          "sha256": "2ee4676154a281434cbe94dc380c76424fc9559ac46422ecda2873cdc06cf814"
        },
        "downloads": -1,
        "filename": "AI4Water-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "970f4574a58082749e9f03223ed342b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19980839,
        "upload_time": "2022-05-26T09:16:09",
        "upload_time_iso_8601": "2022-05-26T09:16:09.407175Z",
        "url": "https://files.pythonhosted.org/packages/bd/ca/753256cff9cb61e1eaa9f8d35067ccfae21c2bb70604ece7a0f3ac0e52d0/AI4Water-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a02a9686bf246f74c1fbd49e19ed9b55455bd4b13607ffa56b78c2b1ce96e1a",
          "md5": "b5f9b7c3c675d384fc8c186d93c0225c",
          "sha256": "7cde97540c2198bd6868967b02acfb04c7229fc4db81ae81ea6b03ad783cebc3"
        },
        "downloads": -1,
        "filename": "AI4Water-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b5f9b7c3c675d384fc8c186d93c0225c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10318687,
        "upload_time": "2022-08-25T05:27:07",
        "upload_time_iso_8601": "2022-08-25T05:27:07.971673Z",
        "url": "https://files.pythonhosted.org/packages/3a/02/a9686bf246f74c1fbd49e19ed9b55455bd4b13607ffa56b78c2b1ce96e1a/AI4Water-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a3007df0f2ae2786aaba7c15071104b46cc3bcb6c3bf5ed4d233c1a076c647",
          "md5": "4e1af76a22b9513423d3e07a022ee106",
          "sha256": "572c9816cbfe90d8915d9525b2e8f70ded76d09a3e4d3fe55aee185c825dcc8b"
        },
        "downloads": -1,
        "filename": "AI4Water-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4e1af76a22b9513423d3e07a022ee106",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10377292,
        "upload_time": "2023-02-10T16:11:10",
        "upload_time_iso_8601": "2023-02-10T16:11:10.302938Z",
        "url": "https://files.pythonhosted.org/packages/33/a3/007df0f2ae2786aaba7c15071104b46cc3bcb6c3bf5ed4d233c1a076c647/AI4Water-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33a3007df0f2ae2786aaba7c15071104b46cc3bcb6c3bf5ed4d233c1a076c647",
        "md5": "4e1af76a22b9513423d3e07a022ee106",
        "sha256": "572c9816cbfe90d8915d9525b2e8f70ded76d09a3e4d3fe55aee185c825dcc8b"
      },
      "downloads": -1,
      "filename": "AI4Water-1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "4e1af76a22b9513423d3e07a022ee106",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10377292,
      "upload_time": "2023-02-10T16:11:10",
      "upload_time_iso_8601": "2023-02-10T16:11:10.302938Z",
      "url": "https://files.pythonhosted.org/packages/33/a3/007df0f2ae2786aaba7c15071104b46cc3bcb6c3bf5ed4d233c1a076c647/AI4Water-1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}