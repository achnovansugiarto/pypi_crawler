{
  "info": {
    "author": "Przemyslaw Pastuszka",
    "author_email": "pastuszka.przemyslaw@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Dash",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Simple Dash [![Build Status](https://travis-ci.com/rtshadow/simple-dash.svg?branch=master)](https://travis-ci.com/rtshadow/simple-dash)\n\nSimple Dash is a library that simplifies building applications with [Plotly Dash](https://github.com/plotly/dash) by allowing you to attach data directly to the layout and creating all the necessary callback functions under the hood.\n\n## Installation\n```bash\npip install simpledash\n```\n\n## Tutorial\n### Simplest example - using Input object in the layout\nLet's create an app with single `Input` component, that renders back whatever the user has typed in.\n\n```python\nfrom simpledash.callbacks import setup_callbacks\n\napp.layout = html.Div([\n    dash_core_components.Input(id='data-input', className='row'),\n    \n    # with Simple Dash you can use a dash dependency object directly in the layout\n    # it will be replaced by actual `data-input.value` and updated every time it changes\n    html.Div(dash.dependencies.Input('data-input', 'value'), className='row', id='output-div')\n])\n\nsetup_callbacks(app)  # this will scan the layout and create all necessary callback functions\n```\n\nAs you can see, no callbacks were explicitly defined and the code is clean and simple.\n\nWhat happened? The `setup_callbacks` method has scanned the app's layout, found all occurrences of `dash.dependencies.Input` and created a callback functions for them.\n\n### More complex example - data functions with `data_provider` decorator\nWe would like to have two Inputs (named A and B) and let user decide which one is going to be used\nfor rendering the output value. This choice will be done via dropdown.\n\n```python\nimport dash_core_components as dcc\nfrom dash.dependencies import Input\nfrom simpledash.data.data_providers import data_provider\n\ninput_a = dcc.Input(id='data-input-a', value=\"\")\ninput_b = dcc.Input(id='data-input-b', value=\"\")\ninput_chooser = dcc.Dropdown(id='input-chooser', options=options_from(['A', 'B']))\n\n# use a `data_provider` annotation to indicate, that the method provides data based on inputs\n# inputs used by function are declared as arguments to the decorator\n# and are later on passed to the function as arguments\n@data_provider(Input('data-input-a', 'value'), Input('data-input-b', 'value'), Input('input-chooser', 'value'))\ndef output_value(input_a_value, input_b_value, input_chooser_value):\n    if input_chooser_value == \"A\":\n        return input_a_value\n    if input_chooser_value == \"B\":\n        return input_b_value\n    return \"\"\n\n\napp.layout = html.Div([\n    html.Div([\"A: \", input_a], className='row'),\n    html.Div([\"B: \", input_b], className='row'),\n    html.Div([\"Which one to show? \", input_chooser], className='row'),\n    html.Br(),\n        # you simply use `data_provider` instance in the layout (as in previous example)\n        html.Div([\"Here's the output: \", output_value], className='row', id='output'),\n        # but you can also run some simple operations on `data_provider`, like `upper()`\n        html.Div([\"Also in uppercase!: \", output_value.upper()], className='row', id='output-upper')\n])\n\nsetup_callbacks(app)\n```\nThis time we have used `data_provider` decorator to declare the function that is able to provide data based on inputs. Note, that this is a plain python function, so you should be able to do any operation on inputs, regardless of the complexity.\n\nInteresting thing we see in the example is `output_value.upper()`. This is just a syntax sugar \nthat Simple Dash gives you - instead of writing another `data_provider` to do the uppercasing, \nwe can call the method directly on `output_value` (and this will create new `data_provider` under the hood for you).\n\nPlease note that the set of operations you are able to do on `data_provider` instance are limited to:\n* accessing the property (`output_value.xyz`)\n* accessing the item by index (`output_value['xyz']`)\n* calling the method (`output_value.xyz(\"param\")`)\n\n### Nesting `data_provider`s\nLet's say you'd like to replicate the `output_value.upper()` behavior from previous example, but without syntax sugar, i.e. by defining new `data_provider` directly.\n\nThe first option is to create a `data_provider` that takes the same inputs as `output_value` and passes values of those inputs to `output_value`. Here's how it looks like:\n```python\n@data_provider(Input('data-input-a', 'value'), Input('data-input-b', 'value'), Input('input-chooser', 'value'))\ndef uppercase_output_value_1(input_a_value, input_b_value, input_chooser_value):\n    v = output_value(input_a_value, input_b_value, input_chooser_value)\n    return v.upper()\n```\n\nThe second option has much less boilerplate, because the whole `data_provider` is specified as an input:\n```python\n@data_provider(output_value)\ndef uppercase_output_value_2(v):\n    return v.upper()\n```\n\n### What's next?\nTo see more advanced examples go to [examples](examples) section of the repo.\n\n## FAQ\n### Is there a usage for `data_provider` with no inputs?\nUse `data_provider` with no inputs when you've got a static, but time-consuming-to-calculate data. `data_provider` will ensure laziness - i.e. that the function is called only if the component using it is being displayed to the user.\n\n### What is the performance of Simple Dash vs plain dash?\nPerformance hasn't been priority so far, so it's reasonable to expect Simple Dash to be slower. That being said - there's a room for improvement (for example - caching `data_provider`'s output) and we expect to tackle this issue in later releases.\n\n### What are the limitations when compared to plain dash?\nValidators like to fail on `data_provider`s, so in many cases you need to just stop using them.\n\nTo give you an example - this will not work: \n```python\ndcc.Graph(figure={'data': [\n            graph_objects.Scattermapbox(lat=some_data_provider, ...)\n]})\n```\n\nbut this will:\n```python\ndcc.Graph(figure={'data': [\n            dict(lat=some_data_provider, ...)\n]})\n```\n\n### Can I test it?\nAbsolutely. Any testing methods that worked for plain dash apps will work with this approach too.\n\nTesting data providers is also pretty easy - they behave just like a methods, so you can call them in your test code.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rtshadow/simple-dash",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simpledash",
    "package_url": "https://pypi.org/project/simpledash/",
    "platform": "",
    "project_url": "https://pypi.org/project/simpledash/",
    "project_urls": {
      "Homepage": "https://github.com/rtshadow/simple-dash"
    },
    "release_url": "https://pypi.org/project/simpledash/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Library to simplify building Plotly Dash applications",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6773320,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d15f0c73c09a82dd83f0e186b385e6bb4deb9e232a3e57463e5069ab4312393",
          "md5": "30fd397f8384d4182ec532b575aa7219",
          "sha256": "161cd0bc27e76568fa9d6257bbe27594000920164aa74d4298890b7daf1d61de"
        },
        "downloads": -1,
        "filename": "simpledash-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30fd397f8384d4182ec532b575aa7219",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6807,
        "upload_time": "2020-02-23T20:00:19",
        "upload_time_iso_8601": "2020-02-23T20:00:19.475350Z",
        "url": "https://files.pythonhosted.org/packages/6d/15/f0c73c09a82dd83f0e186b385e6bb4deb9e232a3e57463e5069ab4312393/simpledash-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "655c6dddf4a66685fddbac2931c2d2b6e5596e6952843201cc091c1dfa21eb9e",
          "md5": "d65e691766082b4efc090e7a5d1b29a8",
          "sha256": "ce5f5b5f1886d6d13fef7a210a3ff387f719e2ae7d5365ac0b7b3541a0192066"
        },
        "downloads": -1,
        "filename": "simpledash-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d65e691766082b4efc090e7a5d1b29a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7719,
        "upload_time": "2020-02-23T20:45:57",
        "upload_time_iso_8601": "2020-02-23T20:45:57.316412Z",
        "url": "https://files.pythonhosted.org/packages/65/5c/6dddf4a66685fddbac2931c2d2b6e5596e6952843201cc091c1dfa21eb9e/simpledash-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d2ec42e115397bcaae7024a03e753e970e231faa6e2e486383bad3893459578",
          "md5": "1a34cfad335523d6872aac247d80ee67",
          "sha256": "398d969a399b353103e34677740c8b8d40aa713a49eba584ffdefe7d4edbcf48"
        },
        "downloads": -1,
        "filename": "simpledash-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a34cfad335523d6872aac247d80ee67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7979,
        "upload_time": "2020-02-27T19:50:23",
        "upload_time_iso_8601": "2020-02-27T19:50:23.597479Z",
        "url": "https://files.pythonhosted.org/packages/4d/2e/c42e115397bcaae7024a03e753e970e231faa6e2e486383bad3893459578/simpledash-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b480509a882a64cd1528b9a398c85535b2e1b5c14b265fa4798af971341b763",
          "md5": "1de78b9c4a15d455859484ff52d39bfb",
          "sha256": "83ba20d7dcdcd7708056320527c3afd34407dab482a7a9f4269915f03523d884"
        },
        "downloads": -1,
        "filename": "simpledash-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1de78b9c4a15d455859484ff52d39bfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8005,
        "upload_time": "2020-03-07T20:53:33",
        "upload_time_iso_8601": "2020-03-07T20:53:33.153876Z",
        "url": "https://files.pythonhosted.org/packages/5b/48/0509a882a64cd1528b9a398c85535b2e1b5c14b265fa4798af971341b763/simpledash-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d2e1e2c1111d075b6e7d00728c8257c312d1e72d9227c96e32096d381804cae",
          "md5": "44d0d220bf52a3f7aff9bdc2b32530e1",
          "sha256": "c4dc7fceb4e89f5e92d2b8fdf1f230122534f33276424b8bf995010524c39ca6"
        },
        "downloads": -1,
        "filename": "simpledash-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "44d0d220bf52a3f7aff9bdc2b32530e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8073,
        "upload_time": "2020-03-08T19:52:56",
        "upload_time_iso_8601": "2020-03-08T19:52:56.897846Z",
        "url": "https://files.pythonhosted.org/packages/8d/2e/1e2c1111d075b6e7d00728c8257c312d1e72d9227c96e32096d381804cae/simpledash-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d2e1e2c1111d075b6e7d00728c8257c312d1e72d9227c96e32096d381804cae",
        "md5": "44d0d220bf52a3f7aff9bdc2b32530e1",
        "sha256": "c4dc7fceb4e89f5e92d2b8fdf1f230122534f33276424b8bf995010524c39ca6"
      },
      "downloads": -1,
      "filename": "simpledash-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "44d0d220bf52a3f7aff9bdc2b32530e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8073,
      "upload_time": "2020-03-08T19:52:56",
      "upload_time_iso_8601": "2020-03-08T19:52:56.897846Z",
      "url": "https://files.pythonhosted.org/packages/8d/2e/1e2c1111d075b6e7d00728c8257c312d1e72d9227c96e32096d381804cae/simpledash-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}