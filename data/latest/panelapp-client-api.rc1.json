{
  "info": {
    "author": "Matteo Ferla",
    "author_email": "matteo.ferla@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PanelApp_Python3_client_API\nA preliminary _unofficial_ Python3 client API (SDK) for PanelApp.\n\nPanelApp has an OpenAPI whose specs also have [json definitions](https://panelapp.genomicsengland.co.uk/api/docs/?format=openapi).\n\nIt is a Swagger 2.0 app, which means that there would be obsolescence problems \nwith the codegens to make a Python3 client API (an SDK).\nHowever, there is an incomplete definitions issue, \ndone so from GEL's point of view I am guessing to avoid a circular reference problem. \nThat or I have misunderstood what is going on!\nNamely in a returned Panel object (from a panel request) the keys `strs`, `genes`, `regions` are returned,\nwhich are arrays of objects that follow the `Str`, `Gene` and `Region` definitions.\n\n## Basics of the API\nThere are two forms of successful (200) responses.\nFor a single entry response, the object returned is a `Panel`, `Gene` etc. while for a list of entries, \nthe response is a typical Django API or PHP generated one, with `counts`, `previous`, `next`, `results`,\nwhere the parameter `page` controls which subset and is in the URL in `previous`/`next` (or None if absent).\n\nIn [panel_app_query/basic.py](panel_app_query/basic.py) is a barebone retriever that returns a dict or a list of dicts.\n\n```python\nfrom panel_app_query import PanelAppQueryBasic\n\npa = PanelAppQueryBasic()\npanels = pa.get_data('/panels/')\npanel = pa.get_data('/panels/234/')\ngenes = pa.get_data('/genes/')\n```\nA panel from the list contains the keys:\n`['id', 'hash_id', 'name', 'disease_group', 'disease_sub_group', 'status', 'version', 'version_created', 'relevant_disorders', 'stats', 'types']`\nwhile from a single query there are additionally `genes`, `strs`, `regions`.\n\nFor a gene from a list the keys are:\n`['gene_data', 'entity_type', 'entity_name', 'confidence_level', 'penetrance', 'mode_of_pathogenicity', 'publications', 'evidence', 'phenotypes', 'mode_of_inheritance', 'tags', 'panel', 'transcript']`\nwhile `gene_data` dictionary contains the \nkeys `['alias', 'biotype', 'hgnc_id', 'gene_name', 'omim_gene', 'alias_name', 'gene_symbol', 'hgnc_symbol', 'hgnc_release', 'ensembl_genes', 'hgnc_date_symbol_changed']`\n\n\nNote that `confidence_level` for a gene is a string as opposed to an integer and\nworks like star-ratings, that is it goes from 0 (no support) to 4, and potentially 5 (not implemented as far as I can say).\n\nNote also that for each instance of a gene in a panel there is a new gene instance (which will have the same gene data).\n\n## Dataclasses\n\nIf something more advanced is required In [panel_app_query/basic.py](panel_app_query/parsed.py)\nis a retriever that returns a list of dataclass instances.\n\n```python\nfrom panel_app_query import PanelAppQuery\npa = PanelAppQuery()\npanels = pa.get_data('/panels/234/', formatted=True)  # returns a list of types.Panel\n# equivalent to .get_formatted_data\nfirst_panel_gene = panels[0].genes[0]\nprint(first_panel_gene.entity_name)  # dot notation!\nassert isinstance(first_panel_gene, pa.dataclasses['Gene'])\ngenes = pa.get_data('/genes/')\nassert isinstance(genes[0], pa.dataclasses['Gene'])\n```\n\nThe list of dataclasses are in the attribute `.dataclasses`.\n\nThe attribute `swagger` contains the dictionary of definitions. \nDerived from which is `schemata`, which contains the schema for each path.\n\nThe class attribute `extra_fields`\n(`Dict[str, List[Tuple]]` as accepted by the `dataclasses.make_dataclass` factory)\ncan be (and is) used to add custom fields (in addition to the openAPI defined one) for a given dataclass name.\nThe class attribute `extra_namespaces` (`Dict[str, Dict[str, Callable]]`) is used to assign methods to a given dataclass.\nSee [Python documentation for dataclasses](https://docs.python.org/3/library/dataclasses.html) for more.\nThe latter can be used therefore to add methods to the dataclasses for extra functionality.\nDo note `__post_init__` is not used. And the PanelAppQueryParsed method `_post_init_results` is called after \nall the results are initialised â€”the lists of dataclass instances aren't handed \nwithin the dataclass definitions (sloppy coding).\n\n## Pandas\n\n```python\nfrom panel_app_query import PanelAppQuery\npa = PanelAppQuery()\ngenes = pa.get_dataframe('/genes/')\nsubset = genes.loc[(genes.panel_id == 234) & (genes.confidence_level >= 3)]\n# in a Jupyter notebook:\nsubset\n```\n\n## Uptodateness\n\nThe data one can download from the browser for a panel may differ from that from the API.\nThe gene list for the panel (`len(subset)`) above contained 54 green genes while the website listed 57!\nTo get the web version:\n\n```python\nfrom panel_app_query import PanelAppQuery\nweb = PanelAppQuery.retrieve_web_panel(234, '34')\nprint( len(web) ) # pd.DataFrame   # 57\nprint( len(web['Entity Name'].unique()) )  # 57\n```\nHowever, on further investigation the next day it was 57 for gene, but that is deceiving!\n\nWhereas querying a panel 56 were found:\n\n```python\nfrom panel_app_query import PanelAppQuery\nimport pandas as pd\n\npa = PanelAppQuery()\npanels = pa.get_dataframe('/panels/234/')\nconfidence_levels = pd.Series(panels.genes_confidence_level[0]).astype(int)\nprint(sum(confidence_levels >=3))\n```\nreturns 56.\n\nHowever... as mentioned a gene is not a single entity.\n\n```python\nfrom panel_app_query import PanelAppQuery\npa = PanelAppQuery()\ngenes = pa.get_dataframe('/genes/')\nsubset = genes.loc[(genes.panel_id == 234) & (genes.confidence_level >= 3)]\nlen(subset.entity_name.unique())\n```\n\nreturns 52 unique genes (not 57).\n\nWhereas\n```python\nfrom panel_app_query import PanelAppQuery\nimport pandas as pd\n\npa = PanelAppQuery()\npanels = pa.get_dataframe('/panels/234/')\nentity_names = pd.Series(panels.genes_entity_name[0])\nconfidence_levels = pd.Series(panels.genes_confidence_level[0]).astype(int)\nlen(entity_names[confidence_levels >=3].unique())\n```\nreturns 56 (all).\n\nThe odd one out in web is 'ISCA-37432-Loss', which is a region not a gene.\n\nSo the `/panels/` route is up-to-date, while `/genes/` is not, but returns redundancies.\n\nThe genes that are absent cannot be explained by me.\n\n```python\nabsentees = set(web['Entity Name'].unique()) - set(subset.entity_name.unique())\nweb.loc[web['Entity Name'].isin(absentees)]\\\n    [['Entity Name', 'Entity type', 'ready', 'Flagged', 'GEL_Status', 'UserRatings_Green_amber_red' ]]\\\n    .sort_values('Entity Name').to_markdown()\n```\n\n\n|    | Entity Name     | Entity type   | ready   | Flagged   |   GEL_Status | UserRatings_Green_amber_red   |\n|---:|:----------------|:--------------|:--------|:----------|-------------:|:------------------------------|\n| 12 | EYA1            | gene          | True    | False     |            3 | 100;0;0                       |\n| 14 | FRAS1           | gene          | True    | False     |            3 | 100;0;0                       |\n| 15 | FREM1           | gene          | True    | False     |            3 | 100;0;0                       |\n| 56 | ISCA-37432-Loss | region        | False   | False     |            3 | 0;0;0                         |\n| 32 | LRIG2           | gene          | True    | False     |            3 | 100;0;0                       |\n\nThese genes do exist, but for other panels in the gene list:\n\n```python\nabsentee_subset = genes.loc[(genes.entity_name.isin(absentees))]\nprint(subset[['entity_name', 'panel_name', 'panel_id']].sort_values('entity_name').to_markdown())\n```\n\n|       | entity_name   | panel_name                                           |   panel_id |\n|------:|:--------------|:-----------------------------------------------------|-----------:|\n| 32444 | EYA1          | Severe Paediatric Disorders                          |        921 |\n| 21614 | EYA1          | Hearing loss                                         |        126 |\n| 21981 | EYA1          | Hearing loss                                         |        126 |\n| 17354 | EYA1          | Fetal anomalies                                      |        478 |\n| 23902 | EYA1          | Intellectual disability                              |        285 |\n| 10395 | EYA1          | Unexplained kidney failure in young people           |        156 |\n| 24413 | EYA1          | Intellectual disability                              |        285 |\n| 25726 | EYA1          | Intellectual disability                              |        285 |\n| 19728 | EYA1          | DDG2P                                                |        484 |\n| 19804 | EYA1          | DDG2P                                                |        484 |\n|  7552 | EYA1          | Ductal plate malformation                            |        209 |\n| 27371 | EYA1          | Structural eye disease                               |        509 |\n|  5319 | EYA1          | Deafness and congenital structural abnormalities     |        251 |\n| 28071 | EYA1          | Groopman et al 2019 - Genes with diagnostic variants |        720 |\n| 30178 | EYA1          | Severe Paediatric Disorders                          |        921 |\n| 10274 | EYA1          | Unexplained kidney failure in young people           |        156 |\n| ....  | ....          |    ....  | ....          |",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matteoferla/PanelApp_Python3_client_API",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PanelApp-client-API",
    "package_url": "https://pypi.org/project/PanelApp-client-API/",
    "platform": "",
    "project_url": "https://pypi.org/project/PanelApp-client-API/",
    "project_urls": {
      "Homepage": "https://github.com/matteoferla/PanelApp_Python3_client_API"
    },
    "release_url": "https://pypi.org/project/PanelApp-client-API/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "unofficial Python3 client API (SDK) for Genomics England (GEL) PanelApp",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10836266,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0cf65d66499acc11dae8b0f09e0b659a05dca3032b2a7cff702ad626325201f",
          "md5": "5f7985aed626bc6749887e13a9dabc70",
          "sha256": "422d61097678e5b74e4c0b7bcb6a20fcd088bbc97b02f8b322320f163c70151b"
        },
        "downloads": -1,
        "filename": "PanelApp_client_API-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5f7985aed626bc6749887e13a9dabc70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7668,
        "upload_time": "2021-07-06T15:41:39",
        "upload_time_iso_8601": "2021-07-06T15:41:39.716851Z",
        "url": "https://files.pythonhosted.org/packages/c0/cf/65d66499acc11dae8b0f09e0b659a05dca3032b2a7cff702ad626325201f/PanelApp_client_API-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0cf65d66499acc11dae8b0f09e0b659a05dca3032b2a7cff702ad626325201f",
        "md5": "5f7985aed626bc6749887e13a9dabc70",
        "sha256": "422d61097678e5b74e4c0b7bcb6a20fcd088bbc97b02f8b322320f163c70151b"
      },
      "downloads": -1,
      "filename": "PanelApp_client_API-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5f7985aed626bc6749887e13a9dabc70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7668,
      "upload_time": "2021-07-06T15:41:39",
      "upload_time_iso_8601": "2021-07-06T15:41:39.716851Z",
      "url": "https://files.pythonhosted.org/packages/c0/cf/65d66499acc11dae8b0f09e0b659a05dca3032b2a7cff702ad626325201f/PanelApp_client_API-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}