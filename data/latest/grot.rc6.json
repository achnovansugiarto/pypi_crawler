{
  "info": {
    "author": "Michal Kaczmarczyk",
    "author_email": "michal.s.kaczmarczyk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Documentation",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Multimedia :: Graphics :: Presentation",
      "Topic :: Utilities"
    ],
    "description": "# Grot\n**Grot** is a noun and means **arrowhead** in polish language.\n\n### Makes graphviz usage simpler\nMuch less headache. Gets you faster into the point.\n\n## Hello Grot\nTo generate a graph you need to import Grot class, create its instance and\ndefine nodes and edges. While `g.edge()` call, you can pass unlimited\nnumber of nodes or plain strings (creates implicit node).\n\nIf you don't connect given node (as `unconnected`) it's going to float somewhere around.\n```python\ndef example_01():\n    import os\n    from grot import Grot\n\n    this_dir_path = os.path.dirname(__file__)  # if run in console - remove 'directory' parameter below\n    out_dir_path = os.path.join(this_dir_path, \"out\")\n\n    g = Grot(name=\"example_01\", format=\"png\", directory=out_dir_path, graph_attrs={\"rankdir\": \"LR\"})\n\n    one = g.node(\"It is\\neaiser\")\n    two = g.node(\"graphs\", color=\"#8a9bac\")\n    ignored = g.node(\"Node floats when\\nunconnected\", color=\"#da3080\")\n\n    g.edge(one, \"to define\", two)\n    g.render()\n\n\n```\nSource of this example is in [examples/example_01.py](examples/example_01.py).\n\nIt generates raw dot-syntax text file in: [examples/out/example_01.gv](examples/out/example_01.gv).\nAnd the final graph file is in: [examples/out/example_01.gv.png](examples/out/example_01.gv.png):\n\n[![Rendered example image to be shown in gitlab)](examples/out/example_01.gv.png?raw=true \"example_01\")](examples/out/example_01.gv.png)\n\n# Branches\n\nOne call of `g.edge(node1, node2, node3, ...)` creates single chain of arrows.\nTo make a branch, you need to call `g.edge` once again.\n```python\ndef example_02a():\n    from grot import Grot\n\n    this_dir_path = os.path.dirname(__file__)  # if run in console - remove 'directory' parameter below\n    out_dir_path = os.path.join(this_dir_path, \"out\")\n    g = Grot(name=\"example_02a\", format=\"png\", directory=out_dir_path, graph_attrs={\"rankdir\": \"LR\"})\n\n    one = g.node(\"One\")\n    two = g.node(\"Two\")\n    three = g.node(\"Three\")\n    four = g.node(\"Four\")\n    five = g.node(\"Five\")\n    six = g.node(\"Six\")\n    seven = g.node(\"Seven\")\n\n    g.edge(one, two, three, four, \"A\")\n    g.edge(two, five, six, \"B\")\n    g.edge(two, seven, \"C\")\n\n    g.render()\n\n\n```\nSource of this example is in [examples/example_02.py](examples/example_02.py).\n\nIt generates raw dot-syntax text file in: [examples/out/example_02a.gv](examples/out/example_02a.gv).\nAnd the final graph file is in: [examples/out/example_02a.gv.png](examples/out/example_02a.gv.png):\n\n[![Rendered example image to be shown in gitlab)](examples/out/example_02a.gv.png?raw=true \"example_02a\")](examples/out/example_02a.gv.png)\n\n# Branches - syntax variant\nYou don't have to assign nodes to variables. However it's a good practice to do so.\nYou can define nodes while `g.edge(...)` call.\nHere node `two` is assigned to a local variable, because we refer it several times.\n```python\ndef example_02b():\n    from grot import Grot\n\n    this_dir_path = os.path.dirname(__file__)  # if run in console - remove 'directory' parameter below\n    out_dir_path = os.path.join(this_dir_path, \"out\")\n\n    g = Grot(name=\"example_02b\", format=\"png\", directory=out_dir_path, graph_attrs={\"rankdir\": \"LR\"})\n\n    two = g.node(\"Two\")\n    g.edge(g.node(\"One\"), two, g.node(\"Three\"), g.node(\"Four\"), \"A\")\n    g.edge(two, g.node(\"Five\"), g.node(\"Six\"), \"B\")\n    g.edge(two, g.node(\"Seven\"), \"C\")\n\n    g.render()\n\n\n```\nSource of this example is in [examples/example_02.py](examples/example_02.py).\n\nIt generates raw dot-syntax text file in: [examples/out/example_02b.gv](examples/out/example_02b.gv).\nAnd the final graph file is in: [examples/out/example_02b.gv.png](examples/out/example_02b.gv.png):\n\n[![Rendered example image to be shown in gitlab)](examples/out/example_02b.gv.png?raw=true \"example_02b\")](examples/out/example_02b.gv.png)\n\n# Branches\n\nOne call of `g.edge(node1, node2, node3, ...)` creates single chain of arrows.\nTo make a branch, you need to call `g.edge` once again.\n```python\ndef example_tree():\n    import os\n    from typing import List, Optional\n\n    from airium import Airium\n    from grot import Grot, NodeVisit, Node\n\n    this_dir_path = os.path.dirname(__file__)  # if run in console - remove 'directory' parameter below\n    out_dir_path = os.path.join(this_dir_path, \"out\")\n\n    font_face = \"Monospace\"  # \"Courier New\", \"Helvetica\"\n    g = Grot(\n        name=\"example_tree\",\n        format=\"png\",\n        directory=out_dir_path,\n        graph_attrs={\n            \"fontname\": font_face,\n            \"layout\": \"neato\",\n            \"overlap\": \"scalexy\",\n            \"mode\": \"ipsep\",\n            \"sep\": \"+5\",\n        },\n        node_attrs={\n            \"fontname\": font_face,\n            \"penwidth\": \"1.1\",\n            \"shape\": \"box\",\n            \"width\": \"0\",\n            \"height\": \"0\",\n            \"margin\": \"0\",\n        },\n        edge_attrs={\n            \"fontname\": font_face,\n            \"penwidth\": \"0.80\",\n        },\n    )\n\n    def html_table_label(\n        own_name: str, own_type: str, own_path: str, children: list[NodeVisit], fg_color: str, bg_color=str\n    ) -> str:\n        a = Airium(base_indent=\"\")\n\n        with a.table(border=\"0\", bgcolor=bg_color):\n            shaded_color = \"#757575\"\n            with a.tr():\n                with a.td(align=\"left\").font(color=fg_color, **{\"point-size\": \"29\"}):\n                    a(f\" <b><u>{own_name}</u></b>\")\n                with a.td(align=\"right\").font(color=fg_color):\n                    types_ = \" | \".join(sorted(set(c.type for c in children)))\n                    types_ = f\" [{types_[30:]}...]\" if len(types_) > 36 else f\" [{types_}]\"\n                    a(f\"{own_type}{types_}\")\n            with a.tr():\n                with a.td(colspan=2, align=\"center\").font(color=shaded_color):\n                    a(f\"<i>{own_path}</i>\")\n\n            for visit in children:\n                type_annotation = f'<font color=\"{shaded_color}\"><b>{visit.type}</b> '\n                sub_types = \" | \".join(sorted(NodeVisit.children_types(visit.value)))\n                if len(sub_types) > 36:\n                    type_annotation += f\"[{sub_types[:30]}...]\"\n                elif sub_types:\n                    type_annotation += f\"[{sub_types}]\"\n                type_annotation += \"</font>\"\n                right = repr(visit.value)\n                if len(right) < 55 and \"<\" not in right:\n                    left = f\"{visit.key}: {type_annotation}\"\n                    right = f\" = {right}\"\n                else:\n                    left = f\"{visit.key}:\"\n                    right = type_annotation\n\n                with a.tr():\n                    a.td(align=\"left\").font(_t=left, color=fg_color)\n                    a.td(align=\"right\").font(_t=right, color=fg_color)\n\n            if not children:\n                a.tr().td(colspan=2).font(_t=\"No children\", color=fg_color)\n        return str(a)\n\n    def draw_node(node_object, path=(\"root\",)) -> Optional[Node]:\n        children: List[NodeVisit] = []\n        for visit in NodeVisit.iter_tree_nodes(node_object):\n            visit: NodeVisit\n            visit.graph_node_id = draw_node(visit.value, (*path, visit.key))\n            children.append(visit)\n\n        if not children:\n            return  # draw only containers not leafs\n        fg_col = \"#111111\" if len(path) < 2 else \"#112233\" if len(path) % 2 else \"#334433\"\n        bg_col = \"#eeeeee\" if len(path) < 2 else \"#ddeedd\" if len(path) % 2 else \"#eee6dd\"\n        table_body: str = html_table_label(\n            own_name=path[-1],\n            own_type=type(node_object).__name__,\n            own_path=NodeVisit.join_path_str(*path),\n            children=children,\n            fg_color=fg_col,\n            bg_color=bg_col,\n        )\n\n        own_node: Node = g.html_node(table_body)\n\n        for visit in children:\n            if visit.graph_node_id:\n                g.edge(own_node, visit.graph_node_id)\n\n        return own_node\n\n    my_nested_structure = {\n        \"web-app\": {\n            \"servlet\": [\n                {\n                    \"servlet-name\": \"cofaxCDS\",\n                    \"servlet-class\": \"org.cofax.cds.CDSServlet\",\n                    \"init-param\": {\n                        \"configGlossary:installationAt\": \"Philadelphia, PA\",\n                        \"configGlossary:poweredBy\": \"Cofax\",\n                        \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\n                        \"dataStoreConnUsageLimit\": 100,\n                        \"dataStoreLogLevel\": \"debug\",\n                        \"maxUrlLength\": 500,\n                    },\n                },\n                {\n                    \"servlet-name\": \"cofaxEmail\",\n                    \"servlet-class\": \"org.cofax.cds.EmailServlet\",\n                    \"init-param\": {\"mailHost\": \"mail1\", \"mailHostOverride\": \"mail2\"},\n                },\n                {\"servlet-name\": \"cofaxAdmin\", \"servlet-class\": \"org.cofax.cds.AdminServlet\"},\n                {\"servlet-name\": \"fileServlet\", \"servlet-class\": \"org.cofax.cds.FileServlet\"},\n                {\n                    \"servlet-name\": \"cofaxTools\",\n                    \"servlet-class\": \"org.cofax.cms.CofaxToolsServlet\",\n                    \"init-param\": {\n                        \"templatePath\": \"toolstemplates/\",\n                        \"log\": 1,\n                        \"logLocation\": \"/usr/local/tomcat/logs/CofaxTools.log\",\n                        \"lookInContext\": 1,\n                        \"adminGroupID\": 4,\n                        \"betaServer\": True,\n                    },\n                },\n            ],\n            \"servlet-mapping\": {\n                \"cofaxCDS\": \"/\",\n                \"cofaxEmail\": \"/cofaxutil/aemail/*\",\n                \"cofaxAdmin\": \"/admin/*\",\n                \"fileServlet\": \"/static/*\",\n                \"cofaxTools\": \"/tools/*\",\n            },\n            \"taglib\": {\"taglib-uri\": \"cofax.tld\", \"taglib-location\": \"/WEB-INF/tlds/cofax.tld\"},\n        }\n    }\n    draw_node(my_nested_structure)\n\n    g.render()\n\n\n```\nSource of this example is in [examples/example_tree.py](examples/example_tree.py).\n\nIt generates raw dot-syntax text file in: [examples/out/example_tree.gv](examples/out/example_tree.gv).\nAnd the final graph file is in: [examples/out/example_tree.gv.png](examples/out/example_tree.gv.png):\n\n[![Rendered example image to be shown in gitlab)](examples/out/example_tree.gv.png?raw=true \"example_tree\")](examples/out/example_tree.gv.png)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/kamichal/grot",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "Michal Kaczmarczyk",
    "maintainer_email": "michal.s.kaczmarczyk@gmail.com",
    "name": "grot",
    "package_url": "https://pypi.org/project/grot/",
    "platform": null,
    "project_url": "https://pypi.org/project/grot/",
    "project_urls": {
      "Homepage": "https://gitlab.com/kamichal/grot"
    },
    "release_url": "https://pypi.org/project/grot/0.2.1/",
    "requires_dist": [
      "graphviz (==0.20.1)"
    ],
    "requires_python": "",
    "summary": "Graphviz syntax wrapper. Draw graphs with pure python.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15390562,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c27d2cdd8be2e6c9ef8dd3a2de48cb60e5f1590f2d7e3194236090e1196eb40",
          "md5": "1ee169e4f89109f576c72900b327811f",
          "sha256": "7b07fe24bf66eeb870cffe1e4144eb0a076eb034c11e12d0f3ce8c0c50e8ffb2"
        },
        "downloads": -1,
        "filename": "grot-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1ee169e4f89109f576c72900b327811f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8610,
        "upload_time": "2019-03-02T18:20:54",
        "upload_time_iso_8601": "2019-03-02T18:20:54.094584Z",
        "url": "https://files.pythonhosted.org/packages/3c/27/d2cdd8be2e6c9ef8dd3a2de48cb60e5f1590f2d7e3194236090e1196eb40/grot-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53ddbf636c46ae7907a92108504b3006db75b99d6e185f4503d1d78081d3e8bc",
          "md5": "b9a01541da98a68c2b09d27a2ed6db10",
          "sha256": "87bac16ab1365b9940128386f3900c528089974b939ea3a821492d339a0eaabe"
        },
        "downloads": -1,
        "filename": "grot-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9a01541da98a68c2b09d27a2ed6db10",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6874,
        "upload_time": "2019-03-02T18:20:52",
        "upload_time_iso_8601": "2019-03-02T18:20:52.631443Z",
        "url": "https://files.pythonhosted.org/packages/53/dd/bf636c46ae7907a92108504b3006db75b99d6e185f4503d1d78081d3e8bc/grot-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8c147cd47703caa27ac62778f5f09322d470f62f854ebf67bc5432e2a8c7f84",
          "md5": "ddd2445b8cb27e9c94570a3d3e8a8b00",
          "sha256": "c004e14fd4011beb46cb5a420dabf3e46168c606cb311a37685ec9f9493c3e3a"
        },
        "downloads": -1,
        "filename": "grot-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ddd2445b8cb27e9c94570a3d3e8a8b00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8610,
        "upload_time": "2019-03-02T18:20:00",
        "upload_time_iso_8601": "2019-03-02T18:20:00.602934Z",
        "url": "https://files.pythonhosted.org/packages/f8/c1/47cd47703caa27ac62778f5f09322d470f62f854ebf67bc5432e2a8c7f84/grot-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d0ec7985dbf115c4b4bf8581a1e36e19e4d8f62b2bd24cfafb568977e56e02",
          "md5": "d092ecadad67c3bd177a41ce17d7c7b6",
          "sha256": "e375ea34bb23b251568b435025188424005c476723fd4500d89bfaed4474f5ab"
        },
        "downloads": -1,
        "filename": "grot-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d092ecadad67c3bd177a41ce17d7c7b6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6855,
        "upload_time": "2019-03-23T23:57:17",
        "upload_time_iso_8601": "2019-03-23T23:57:17.222363Z",
        "url": "https://files.pythonhosted.org/packages/32/d0/ec7985dbf115c4b4bf8581a1e36e19e4d8f62b2bd24cfafb568977e56e02/grot-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d4a4007418bc19cb92becb8cc419b1b82d9ed3804ffc459d6baba93b80f4951",
          "md5": "41e736efbf2c4014c1850dd6f36ce151",
          "sha256": "88b652d593691970bffbbbf387b3756803f71348446c00fbfb7269ccf1781b5b"
        },
        "downloads": -1,
        "filename": "grot-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41e736efbf2c4014c1850dd6f36ce151",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12112,
        "upload_time": "2019-03-23T23:57:18",
        "upload_time_iso_8601": "2019-03-23T23:57:18.990466Z",
        "url": "https://files.pythonhosted.org/packages/2d/4a/4007418bc19cb92becb8cc419b1b82d9ed3804ffc459d6baba93b80f4951/grot-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da168eea4520ea5201ac81adc198d7752d98de7bbc350e861197f35db44a3d19",
          "md5": "d229b471993bfd231376a0aa39b3c5ac",
          "sha256": "e201491346dd7af3a24f6e390aae4da8265ea29d53b4c5deb4b2dea138998b17"
        },
        "downloads": -1,
        "filename": "grot-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d229b471993bfd231376a0aa39b3c5ac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7203,
        "upload_time": "2019-04-27T14:41:42",
        "upload_time_iso_8601": "2019-04-27T14:41:42.271503Z",
        "url": "https://files.pythonhosted.org/packages/da/16/8eea4520ea5201ac81adc198d7752d98de7bbc350e861197f35db44a3d19/grot-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd2bfbb1e1dc6170f251e28445e82b6cf703ee872ee28c49acc723296551c7f5",
          "md5": "478a5ba1368b594d2e9308f470436d30",
          "sha256": "13196acd7b59cf5f49116ff64e6d6229095f290deabdc448e77a26dad86c8117"
        },
        "downloads": -1,
        "filename": "grot-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "478a5ba1368b594d2e9308f470436d30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12400,
        "upload_time": "2019-04-27T14:41:46",
        "upload_time_iso_8601": "2019-04-27T14:41:46.485739Z",
        "url": "https://files.pythonhosted.org/packages/dd/2b/fbb1e1dc6170f251e28445e82b6cf703ee872ee28c49acc723296551c7f5/grot-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d839df5d42bc71a56401c0ac7ac802fb01c3c98ea4e5c8234dd9099505dc2791",
          "md5": "7fc0a4d731001ce93fee6ed76ced0f6a",
          "sha256": "9458fbb8e79700bee1c6a3c6bf01521d3644531babca9827dda3de744a9a5cb3"
        },
        "downloads": -1,
        "filename": "grot-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7fc0a4d731001ce93fee6ed76ced0f6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12964,
        "upload_time": "2022-10-12T19:43:04",
        "upload_time_iso_8601": "2022-10-12T19:43:04.430105Z",
        "url": "https://files.pythonhosted.org/packages/d8/39/df5d42bc71a56401c0ac7ac802fb01c3c98ea4e5c8234dd9099505dc2791/grot-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57c5d9fef3170dc6c0de5c9ff8d5c6bc0a3de58b034b85b85026ed7a1c8fbec9",
          "md5": "da9cae7c810e52fd4b3ca6faafe6939f",
          "sha256": "d54aa1ec0706b9eac23ded038a741474942c876915c62aeb5a21db263924cd18"
        },
        "downloads": -1,
        "filename": "grot-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da9cae7c810e52fd4b3ca6faafe6939f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9410,
        "upload_time": "2022-10-12T19:42:59",
        "upload_time_iso_8601": "2022-10-12T19:42:59.766892Z",
        "url": "https://files.pythonhosted.org/packages/57/c5/d9fef3170dc6c0de5c9ff8d5c6bc0a3de58b034b85b85026ed7a1c8fbec9/grot-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d000af8841fc36f65d73c776576cc157fc16128c90d83df1ce66304c144c81f8",
          "md5": "41a0ea5b4873b77276c5b720a9dcf39d",
          "sha256": "6288943645947b430658883ab753e315b5b4f02052a57ba613927620b11fb557"
        },
        "downloads": -1,
        "filename": "grot-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41a0ea5b4873b77276c5b720a9dcf39d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19496,
        "upload_time": "2022-10-12T19:43:02",
        "upload_time_iso_8601": "2022-10-12T19:43:02.190792Z",
        "url": "https://files.pythonhosted.org/packages/d0/00/af8841fc36f65d73c776576cc157fc16128c90d83df1ce66304c144c81f8/grot-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57c5d9fef3170dc6c0de5c9ff8d5c6bc0a3de58b034b85b85026ed7a1c8fbec9",
        "md5": "da9cae7c810e52fd4b3ca6faafe6939f",
        "sha256": "d54aa1ec0706b9eac23ded038a741474942c876915c62aeb5a21db263924cd18"
      },
      "downloads": -1,
      "filename": "grot-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da9cae7c810e52fd4b3ca6faafe6939f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9410,
      "upload_time": "2022-10-12T19:42:59",
      "upload_time_iso_8601": "2022-10-12T19:42:59.766892Z",
      "url": "https://files.pythonhosted.org/packages/57/c5/d9fef3170dc6c0de5c9ff8d5c6bc0a3de58b034b85b85026ed7a1c8fbec9/grot-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d000af8841fc36f65d73c776576cc157fc16128c90d83df1ce66304c144c81f8",
        "md5": "41a0ea5b4873b77276c5b720a9dcf39d",
        "sha256": "6288943645947b430658883ab753e315b5b4f02052a57ba613927620b11fb557"
      },
      "downloads": -1,
      "filename": "grot-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "41a0ea5b4873b77276c5b720a9dcf39d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19496,
      "upload_time": "2022-10-12T19:43:02",
      "upload_time_iso_8601": "2022-10-12T19:43:02.190792Z",
      "url": "https://files.pythonhosted.org/packages/d0/00/af8841fc36f65d73c776576cc157fc16128c90d83df1ce66304c144c81f8/grot-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}