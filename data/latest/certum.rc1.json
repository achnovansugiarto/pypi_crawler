{
  "info": {
    "author": "dylandoamaral",
    "author_email": "do.amaral.dylan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Certum\n\nA dictionary validation library based on partial, composable and expressive rules.\n\n## Why use it\n\nIn case you need to assert some propeties from a particular dictionary in a DSL manner without comparing the entire structure or asserting fields.\n\nCertum comes with the following features:\n- Easy to use\n- English friendly declaration\n- Error accumulation\n- Customizable\n- Anti KeyError\n\n## Using Certum\n\nYou can't use certum package for the moment, coming soon.\n\n## How it works\n\n### Basic usage\n\nImagine you have a very long json and you want to verify that it contains the following informations:\n- He should contains a key named 'name' containing a string.\n- He should contains a key named 'entities' being a list containing unique elements.\n- He should contains a key named 'nested' containing a key 'value' equals to 4.\n\n```python\nfrom certum import ensure, that\n\nmy_obj = {\n    \"name\": \"hello\",\n    \"entities\": [1, 3, 5],\n    \"nested\": {\n        \"value\": 4\n    }\n}\n\nvalidator = ensure(my_obj).respects(\n    that(\"name\").is_instance_of(str),\n    that(\"entities\").has_unique_elements(),\n    that(\"nested\", \"value\").equals(4)\n)\n\nvalidator.check()\n```\n\n### Error handling\n\nIf there is errors, certum will accumulate and return errors elegantly:\n\n```python\nfrom certum import ensure, that\n\nmy_obj = {\n    \"name\": 2,\n    \"entities\": [1, 3, 3],\n    \"nested\": {\n        \"value\": 2\n    }\n}\n\nvalidator = (\n    ensure(my_obj)\n    .respects(\n        that(\"name\").is_instance_of(str),\n        that(\"name\").equals(\"Hello\"),\n        that(\"entities\").foreach(this.equals(1)),\n        that(\"nested\", \"value\").equals(4),\n    )\n)\n\nvalidator.check()\n\n# certum.exception.CertumException: \n\n# [name] => The value is instance of int, expected str.\n# [name] => The value is 2, expected Hello.\n# [entities -> 2] => The value is 3, expected 1.\n# [entities -> 1] => The value is 3, expected 1.\n# [nested -> value] => The value is 2, expected 4.\n```\n\n### Strategies\n\nErros can be sorted, filtered and printed using different strategies.\n\nAs an example, you may want to try the GroupedPrinting strategy with the AlphabeticalSorting strategy, this will give you a list of errors like this:\n\n```python\nfrom certum import ensure, that, this\nfrom certum.strategy.printing.grouped import GroupedPrinting\nfrom certum.strategy.sorting.alphabetical import AlphabeticalSorting\n\n\nmy_obj = {\n    \"name\": 2,\n    \"entities\": [1, 3, 3],\n    \"nested\": {\n        \"value\": 2\n    }\n}\n\nvalidator = (\n    ensure(my_obj)\n    .respects(\n        that(\"name\").is_instance_of(str),\n        that(\"name\").equals(\"Hello\"),\n        that(\"entities\").foreach(this.equals(1)),\n        that(\"nested\", \"value\").equals(4),\n    )\n    .using(GroupedPrinting(), AlphabeticalSorting())\n)\n\nvalidator.check()\n\n# certum.exception.CertumException: \n\n# entities -> 1   => The value is 3, expected 1.\n# entities -> 2   => The value is 3, expected 1.\n# name            => The value is 2, expected Hello.\n#                    The value is instance of int, expected str.\n# nested -> value => The value is 2, expected 4.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dylandoamaral/certum",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "certum",
    "package_url": "https://pypi.org/project/certum/",
    "platform": "",
    "project_url": "https://pypi.org/project/certum/",
    "project_urls": {
      "Homepage": "https://github.com/dylandoamaral/certum",
      "Repository": "https://github.com/dylandoamaral/certum"
    },
    "release_url": "https://pypi.org/project/certum/1.0a1/",
    "requires_dist": null,
    "requires_python": ">=3.6,<4",
    "summary": "A dictionary validation library based on partial, composable and expressive rules.",
    "version": "1.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9765408,
  "releases": {
    "1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2060bf511343e9bb046b4b5f2a40bb47a9532331ccb6921fad54f195fe137c0e",
          "md5": "c7990c13901cc6d9b8594193653a4ce4",
          "sha256": "7c01f8a1bd3ca940617a70858976b55f3aed7337351152599d3f55f6a9fbb420"
        },
        "downloads": -1,
        "filename": "certum-1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7990c13901cc6d9b8594193653a4ce4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 20390,
        "upload_time": "2021-03-14T10:00:02",
        "upload_time_iso_8601": "2021-03-14T10:00:02.974808Z",
        "url": "https://files.pythonhosted.org/packages/20/60/bf511343e9bb046b4b5f2a40bb47a9532331ccb6921fad54f195fe137c0e/certum-1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc93a7863e850709efc6dc7ea5227a31cf5fd37a5972d35e2e70fca8d5954a64",
          "md5": "104d8f68cf1c099c84283d85ede529b6",
          "sha256": "31a61475d51774fed96ea3939b7935f8ef5a1dbba1222a113e6fb73d3f1d5dcc"
        },
        "downloads": -1,
        "filename": "certum-1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "104d8f68cf1c099c84283d85ede529b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 10926,
        "upload_time": "2021-03-14T10:00:04",
        "upload_time_iso_8601": "2021-03-14T10:00:04.248430Z",
        "url": "https://files.pythonhosted.org/packages/fc/93/a7863e850709efc6dc7ea5227a31cf5fd37a5972d35e2e70fca8d5954a64/certum-1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2060bf511343e9bb046b4b5f2a40bb47a9532331ccb6921fad54f195fe137c0e",
        "md5": "c7990c13901cc6d9b8594193653a4ce4",
        "sha256": "7c01f8a1bd3ca940617a70858976b55f3aed7337351152599d3f55f6a9fbb420"
      },
      "downloads": -1,
      "filename": "certum-1.0a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c7990c13901cc6d9b8594193653a4ce4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 20390,
      "upload_time": "2021-03-14T10:00:02",
      "upload_time_iso_8601": "2021-03-14T10:00:02.974808Z",
      "url": "https://files.pythonhosted.org/packages/20/60/bf511343e9bb046b4b5f2a40bb47a9532331ccb6921fad54f195fe137c0e/certum-1.0a1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc93a7863e850709efc6dc7ea5227a31cf5fd37a5972d35e2e70fca8d5954a64",
        "md5": "104d8f68cf1c099c84283d85ede529b6",
        "sha256": "31a61475d51774fed96ea3939b7935f8ef5a1dbba1222a113e6fb73d3f1d5dcc"
      },
      "downloads": -1,
      "filename": "certum-1.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "104d8f68cf1c099c84283d85ede529b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 10926,
      "upload_time": "2021-03-14T10:00:04",
      "upload_time_iso_8601": "2021-03-14T10:00:04.248430Z",
      "url": "https://files.pythonhosted.org/packages/fc/93/a7863e850709efc6dc7ea5227a31cf5fd37a5972d35e2e70fca8d5954a64/certum-1.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}