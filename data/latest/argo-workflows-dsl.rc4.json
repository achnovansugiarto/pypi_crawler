{
  "info": {
    "author": "Yudi Xue, Marek Cermak",
    "author_email": "binarycrayon@gmail.com, macermak@redhat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "# argo-python-dsl &nbsp; [![Release](https://img.shields.io/github/v/tag/argoproj-labs/argo-python-dsl.svg?sort=semver&label=Release)](https://github.com/argoproj-labs/argo-python-dsl/releases/latest)\n\n[![License](https://img.shields.io/github/license/argoproj-labs/argo-python-dsl)](https://github.com/argoproj-labs/argo-python-dsl/blob/master/LICENSE) &nbsp; [![CI](https://github.com/argoproj-labs/argo-python-dsl/workflows/CI/badge.svg)](https://github.com/argoproj-labs/argo-python-dsl/actions) &nbsp;\n\n### Python DSL for [Argo Workflows](https://github.com/argoproj/argo)\n\n<div style=\"text-align: justify\">\n\nIf you're new to Argo, we recommend checking out the examples in pure YAML. The language is descriptive and the Argo [examples](https://github.com/argoproj/argo/tree/master/examples) provide an exhaustive explanation.\n\nFor a more experienced audience, this DSL grants you the ability to programatically define Argo Workflows in Python which is then translated to the Argo YAML specification.\n\nThe DSL makes use of the Argo models defined in the [Argo Python client](https://github.com/argoproj-labs/argo-client-python) repository. Combining the two approaches we are given the whole low-level control over Argo Workflows.\n\n</div>\n\n## Getting Started\n\n#### Hello World\n\n<div style=\"text-align: justify\">\n\nThis example demonstrates the simplest functionality. Defining a `Workflow` by subclassing the `Workflow` class and a single template with the `@template` decorator.\n\nThe entrypoint to the workflow is defined as an `entrypoint` class property.\n\n</div>\n\n<table>\n<tr><th>Argo YAML</th><th>Argo Python</th></tr>\n<tr>\n<td valign=\"top\"><p>\n\n```yaml\n# @file: hello-world.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  name: hello-world\n  generateName: hello-world-\nspec:\n  entrypoint: whalesay\n  templates:\n  - name: whalesay\n    container:\n      name: whalesay\n      image: docker/whalesay:latest\n      command: [cowsay]\n      args: [\"hello world\"]\n```\n\n</p></td>\n<td valign=\"top\"><p>\n\n```python\nfrom argo.workflows.dsl import Workflow\nfrom argo.workflows.dsl import template\n\nfrom argo.workflows.dsl.templates import V1Container\n\n\nclass HelloWorld(Workflow):\n\n    entrypoint = \"whalesay\"\n\n    @template\n    def whalesay(self) -> V1Container:\n        container = V1Container(\n            image=\"docker/whalesay:latest\",\n            name=\"whalesay\",\n            command=[\"cowsay\"],\n            args=[\"hello world\"]\n        )\n\n        return container\n```\n\n</p></td>\n</tr>\n</table>\n\n#### DAG: Tasks\n\n<div style=\"text-align: justify\">\n\nThis example demonstrates tasks defined via dependencies forming a *diamond* structure. Tasks are defined using the `@task` decorator and they **must return a valid template**.\n\nThe entrypoint is automatically created as `main` for the top-level tasks of the `Workflow`.\n\n</div>\n\n<table>\n<tr><th>Argo YAML</th><th>Argo Python</th></tr>\n<tr>\n<td valign=\"top\"><p>\n\n```yaml\n# @file: dag-diamond.yaml\n# The following workflow executes a diamond workflow\n#\n#   A\n#  / \\\n# B   C\n#  \\ /\n#   D\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  name: dag-diamond\n  generateName: dag-diamond-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: A\n        template: echo\n        arguments:\n          parameters: [{name: message, value: A}]\n      - name: B\n        dependencies: [A]\n        template: echo\n        arguments:\n          parameters: [{name: message, value: B}]\n      - name: C\n        dependencies: [A]\n        template: echo\n        arguments:\n          parameters: [{name: message, value: C}]\n      - name: D\n        dependencies: [B, C]\n        template: echo\n        arguments:\n          parameters: [{name: message, value: D}]\n\n  # @task: [A, B, C, D]\n  - name: echo\n    inputs:\n      parameters:\n      - name: message\n    container:\n      name: echo\n      image: alpine:3.7\n      command: [echo, \"{{inputs.parameters.message}}\"]\n```\n\n</p></td>\n<td valign=\"top\"><p>\n\n```python\nfrom argo.workflows.dsl import Workflow\n\nfrom argo.workflows.dsl.tasks import *\nfrom argo.workflows.dsl.templates import *\n\n\nclass DagDiamond(Workflow):\n\n    @task\n    @parameter(name=\"message\", value=\"A\")\n    def A(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"B\")\n    @dependencies([\"A\"])\n    def B(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"C\")\n    @dependencies([\"A\"])\n    def C(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"D\")\n    @dependencies([\"B\", \"C\"])\n    def D(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @template\n    @inputs.parameter(name=\"message\")\n    def echo(self, message: V1alpha1Parameter) -> V1Container:\n        container = V1Container(\n            image=\"alpine:3.7\",\n            name=\"echo\",\n            command=[\"echo\", \"{{inputs.parameters.message}}\"],\n        )\n\n        return container\n\n```\n\n</p></td>\n</tr>\n</table>\n\n#### Artifacts\n\n<div style=\"text-align: justify\">\n\n`Artifacts` can be passed similarly to `parameters` in three forms: `arguments`, `inputs` and `outputs`, where `arguments` is the default one (simply `@artifact` or `@parameter`).\n\nI.e.: `inputs.artifact(...)`\n\nBoth artifacts and parameters are passed **one by one**, which means that for multiple artifacts (parameters), one should call:\n\n\n```python\n@inputs.artifact(name=\"artifact\", ...)\n@inputs.parameter(name=\"parameter_a\", ...)\n@inputs.parameter(...)\ndef foo(self, artifact: V1alpha1Artifact, prameter_b: V1alpha1Parameter, ...): pass\n```\n\nA complete example:\n\n</div>\n\n<table>\n<tr><th>Argo YAML</th><th>Argo Python</th></tr>\n<tr>\n<td valign=\"top\"><p>\n\n```yaml\n# @file: artifacts.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  name: artifact-passing\n  generateName: artifact-passing-\nspec:\n  entrypoint: main\n  templates:\n  - name: main\n    dag:\n      tasks:\n      - name: generate-artifact\n        template: whalesay\n      - name: consume-artifact\n        template: print-message\n        arguments:\n          artifacts:\n          # bind message to the hello-art artifact\n          # generated by the generate-artifact step\n          - name: message\n            from: \"{{tasks.generate-artifact.outputs.artifacts.hello-art}}\"\n\n  - name: whalesay\n    container:\n      name: \"whalesay\"\n      image: docker/whalesay:latest\n      command: [sh, -c]\n      args: [\"cowsay hello world | tee /tmp/hello_world.txt\"]\n    outputs:\n      artifacts:\n      # generate hello-art artifact from /tmp/hello_world.txt\n      # artifacts can be directories as well as files\n      - name: hello-art\n        path: /tmp/hello_world.txt\n\n  - name: print-message\n    inputs:\n      artifacts:\n      # unpack the message input artifact\n      # and put it at /tmp/message\n      - name: message\n        path: /tmp/message\n    container:\n      name: \"print-message\"\n      image: alpine:latest\n      command: [sh, -c]\n      args: [\"cat\", \"/tmp/message\"]\n```\n\n</p></td>\n<td valign=\"top\"><p>\n\n```python\nfrom argo.workflows.dsl import Workflow\n\nfrom argo.workflows.dsl.tasks import *\nfrom argo.workflows.dsl.templates import *\n\nclass ArtifactPassing(Workflow):\n\n    @task\n    def generate_artifact(self) -> V1alpha1Template:\n        return self.whalesay()\n\n    @task\n    @artifact(\n        name=\"message\",\n        _from=\"{{tasks.generate-artifact.outputs.artifacts.hello-art}}\"\n    )\n    def consume_artifact(self, message: V1alpha1Artifact) -> V1alpha1Template:\n        return self.print_message(message=message)\n\n    @template\n    @outputs.artifact(name=\"hello-art\", path=\"/tmp/hello_world.txt\")\n    def whalesay(self) -> V1Container:\n        container = V1Container(\n            name=\"whalesay\",\n            image=\"docker/whalesay:latest\",\n            command=[\"sh\", \"-c\"],\n            args=[\"cowsay hello world | tee /tmp/hello_world.txt\"]\n        )\n\n        return container\n\n    @template\n    @inputs.artifact(name=\"message\", path=\"/tmp/message\")\n    def print_message(self, message: V1alpha1Artifact) -> V1Container:\n        container = V1Container(\n            name=\"print-message\",\n            image=\"alpine:latest\",\n            command=[\"sh\", \"-c\"],\n            args=[\"cat\", \"/tmp/message\"],\n        )\n\n        return container\n```\n\n</p></td>\n</tr>\n</table>\n\n<br>\n\n## Going further: `closure` and `scope`\n\n<div style=\"text-align: justify\">\n\nThis is where it gets quite interesting. So far, we've only scratched the benefits that the Python implementation provides.\n\nWhat if we want to use native Python code and execute it as a step in the Workflow. What are our options?\n\n**Option A)** is to reuse the existing mindset, dump the code in a string, pass it as the source to the `V1ScriptTemplate` model and wrap it with the `template` decorator.\nThis is illustrated in the following code block:\n\n</div>\n\n```python\nimport textwrap\n\nclass ScriptsPython(Workflow):\n\n    ...\n\n    @template\n    def gen_random_int(self) -> V1alpha1ScriptTemplate:\n        source = textwrap.dedent(\"\"\"\\\n          import random\n          i = random.randint(1, 100)\n          print(i)\n        \"\"\")\n\n        template = V1alpha1ScriptTemplate(\n            image=\"python:alpine3.6\",\n            name=\"gen-random-int\",\n            command=[\"python\"],\n            source=source\n        )\n\n        return template\n```\n\nWhich results in:\n\n```yaml\napi_version: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generate_name: scripts-python-\n  name: scripts-python\nspec:\n  entrypoint: main\n\n  ...\n\n  templates:\n  - name: gen-random-int\n    script:\n      command:\n      - python\n      image: python:alpine3.6\n      name: gen-random-int\n      source: 'import random\\ni = random.randint(1, 100)\\nprint(i)\\n'\n```\n\n<div style=\"text-align: justify\">\n\nNot bad, but also not living up to the full potential. Since we're already writing Python, why would we wrap the code in a string? This is where we introduce `closure`s.\n\n#### `closure`s\n\nThe logic of `closure`s is quite simple. Just wrap the function you want to execute in a container in the `@closure` decorator. The `closure` then takes care of the rest and returns a `template` (just as the `@template` decorator).\n\nThe only thing we need to take care of is to provide it an image which has the necessary Python dependencies installed and is present in the cluster.\n\n> There is a plan to eliminate even this step in the future, but currently it is inavoidable.\n\nFollowing the previous example:\n\n</div>\n\n```python\nclass ScriptsPython(Workflow):\n\n    ...\n\n    @closure(\n      image=\"python:alpine3.6\"\n    )\n    def gen_random_int() -> V1alpha1ScriptTemplate:\n          import random\n\n          i = random.randint(1, 100)\n          print(i)\n```\n\n<div style=\"text-align: justify\">\n\nThe closure implements the `V1alpha1ScriptTemplate`, which means that you can pass in things like `resources`, `env`, etc...\n\nAlso, make sure that you `import` whatever library you are using, the context is not preserved --- `closure` behaves as a staticmethod and is *sandboxed* from the module scope.\n\n#### `scope`\n\nNow, what if we had a function (or a whole script) which is quite big. Wrapping it in a single Python function is not very Pythonic and it gets tedious. This is where we can make use of `scope`s.\n\nSay that we, for example, wanted to initialize logging before running our `gen_random_int` function.\n\n</div>\n\n```python\n    ...\n\n    @closure(\n      scope=\"main\",\n      image=\"python:alpine3.6\"\n    )\n    def gen_random_int(main) -> V1alpha1ScriptTemplate:\n          import random\n\n          main.init_logging()\n\n          i = random.randint(1, 100)\n          print(i)\n\n    @scope(name=\"main\")\n    def init_logging(level=\"DEBUG\"):\n        import logging\n\n        logging_level = getattr(logging, level, \"INFO\")\n        logging.getLogger(\"__main__\").setLevel(logging_level)\n```\n\nNotice the 3 changes that we've made:</div>\n\n```python\n    @closure(\n      scope=\"main\",  # <--- provide the closure a scope\n      image=\"python:alpine3.6\"\n    )\n    def gen_random_int(main):  # <--- use the scope name\n```\n\n```python\n    @scope(name=\"main\")  # <--- add function to a scope\n    def init_logging(level=\"DEBUG\"):\n```\n\n<div style=\"text-align: justify\">\n\nEach function in the given scope is then namespaced by the scope name and injected to the closure.\n\nI.e. the resulting YAML looks like this:</div>\n\n```yaml\n...\nspec:\n  ...\n  templates:\n    - name: gen-random-int\n      script:\n        command:\n        - python\n        image: python:alpine3.6\n        name: gen-random-int\n        source: |-\n          import logging\n          import random\n\n          class main:\n            \"\"\"Scoped objects injected from scope 'main'.\"\"\"\n\n            @staticmethod\n            def init_logging(level=\"DEBUG\"):\n              logging_level = getattr(logging, level, \"INFO\")\n              logging.getLogger(\"__main__\").setLevel(logging_level)\n\n\n          main.init_logging()\n\n          i = random.randint(1, 100)\n          print(i)\n```\n\n## Submitting with dsl\n\nAssume we are running `kubectl -n argo port-forward deployment/argo-server 2746:2746`\n\n#### Workflow\n```python\nfrom argo.workflows.client import (\n    ApiClient,\n    Configuration,\n    WorkflowServiceApi,\n    V1alpha1WorkflowCreateRequest)\n\nfrom argo.workflows.dsl import Workflow\nfrom argo.workflows.dsl.tasks import *\nfrom argo.workflows.dsl.templates import *\n\n\nclass DagDiamond(Workflow):\n\n    @task\n    @parameter(name=\"message\", value=\"A\")\n    def A(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"B\")\n    @dependencies([\"A\"])\n    def B(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"C\")\n    @dependencies([\"A\"])\n    def C(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @task\n    @parameter(name=\"message\", value=\"D\")\n    @dependencies([\"B\", \"C\"])\n    def D(self, message: V1alpha1Parameter) -> V1alpha1Template:\n        return self.echo(message=message)\n\n    @template\n    @inputs.parameter(name=\"message\")\n    def echo(self, message: V1alpha1Parameter) -> V1Container:\n        container = V1Container(\n            image=\"alpine:3.7\",\n            name=\"echo\",\n            command=[\"echo\", \"{{inputs.parameters.message}}\"],\n        )\n\n        return container\n\nif __name__ == \"__main__\":\n    wf = DagDiamond()\n    config = Configuration(host=\"http://localhost:2746\")\n    client = ApiClient(configuration=config)\n    wf.submit(client, 'argo')\n```\n\n#### CronWorkflow\n\n```python\nfrom argo.workflows.client import Configuration, ApiClient\nfrom argo.workflows.dsl import template\nfrom argo.workflows.dsl import CronWorkflow\nfrom argo.workflows.dsl.templates import V1Container\n\n\nclass HelloCron(CronWorkflow):\n\n    entrypoint = \"whalesay\"\n    schedule = \"0 0 1 1 *\"\n\n    @template\n    def whalesay(self) -> V1Container:\n        container = V1Container(\n            image=\"docker/whalesay:latest\",\n            name=\"whalesay\",\n            command=[\"cowsay\"],\n            args=[\"hello world\"],\n        )\n        return container\n\n\nif __name__ == \"__main__\":\n    wf = HelloCron()\n    print(wf)\n    config = Configuration(host=\"http://localhost:2746\")\n    client = ApiClient(configuration=config)\n    wf.submit(client, \"argo\")\n```\n\nThe compilation also takes all imports to the front and remove duplicates for convenience and more natural look so that you don't feel like poking your eyes when you look at the resulting YAML.\n\n<br>\n\nFor more examples see the [examples](https://github.com/argoproj-labs/argo-python-dsl/tree/master/examples) folder.\n\n<br>\n\n---\n\nAuthors:\n- [ Maintainer ] Yudi Xue <binarycrayon@gmail.com>\n- [ Past Maintainer ] Marek Cermak <macermak@redhat.com>, <prace.mcermak@gmail.com>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CermakM/argo-python-dsl",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argo-workflows-dsl",
    "package_url": "https://pypi.org/project/argo-workflows-dsl/",
    "platform": "",
    "project_url": "https://pypi.org/project/argo-workflows-dsl/",
    "project_urls": {
      "Homepage": "https://github.com/CermakM/argo-python-dsl"
    },
    "release_url": "https://pypi.org/project/argo-workflows-dsl/0.4.0/",
    "requires_dist": [
      "argo-workflows (==4.0.1)",
      "inflection",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "DSL for Argo Workflows",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8829796,
  "releases": {
    "0.1.0rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea828617bb6012a6d41a86733a4e3ec7616c2afbfacd6265603e90bb94ced1c4",
          "md5": "0f0f883bcc606e1c49d36a8793978402",
          "sha256": "5b98f8d47b3a4e1e8fa3de0971be81fd811cc78287567846cefffb9536057bd5"
        },
        "downloads": -1,
        "filename": "argo_workflows_dsl-0.1.0rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f0f883bcc606e1c49d36a8793978402",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 333706,
        "upload_time": "2020-03-08T07:42:45",
        "upload_time_iso_8601": "2020-03-08T07:42:45.379689Z",
        "url": "https://files.pythonhosted.org/packages/ea/82/8617bb6012a6d41a86733a4e3ec7616c2afbfacd6265603e90bb94ced1c4/argo_workflows_dsl-0.1.0rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ef48b42cf5fd6e5eb918b4b57389010a75179214a8ca49865ecee84ea7552ad",
          "md5": "4ada435f14dac9c385458c5e3eba5d82",
          "sha256": "bca5eb74aab6fea5332d4341e354363f5e1ace48bc587a2e01314f37a7b7de6c"
        },
        "downloads": -1,
        "filename": "argo-workflows-dsl-0.1.0rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ada435f14dac9c385458c5e3eba5d82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 141376,
        "upload_time": "2020-03-08T07:42:49",
        "upload_time_iso_8601": "2020-03-08T07:42:49.019908Z",
        "url": "https://files.pythonhosted.org/packages/7e/f4/8b42cf5fd6e5eb918b4b57389010a75179214a8ca49865ecee84ea7552ad/argo-workflows-dsl-0.1.0rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6ca3959efd049774c2967dd1790b984f82db5fb986812ea2a678b8e4d8b44a1",
          "md5": "0e4562e65189461a5747f376733f1732",
          "sha256": "abc2987684271a4d2659a9002935ca815d57934cd9fda63c40eca57765e505bb"
        },
        "downloads": -1,
        "filename": "argo_workflows_dsl-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e4562e65189461a5747f376733f1732",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21131,
        "upload_time": "2020-09-19T05:28:38",
        "upload_time_iso_8601": "2020-09-19T05:28:38.404013Z",
        "url": "https://files.pythonhosted.org/packages/c6/ca/3959efd049774c2967dd1790b984f82db5fb986812ea2a678b8e4d8b44a1/argo_workflows_dsl-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf66a325fdeb8669ea86237fb46621c3fdcaf4abf9e29609ea6ddc032132814",
          "md5": "8892ff1eeec41e32644ceaed37748d4b",
          "sha256": "3b9238c964776aae0c6b3b60045ce8e2fd14d380f7ea114bd2c29dc71b78ecc6"
        },
        "downloads": -1,
        "filename": "argo-workflows-dsl-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8892ff1eeec41e32644ceaed37748d4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21983,
        "upload_time": "2020-09-19T05:28:40",
        "upload_time_iso_8601": "2020-09-19T05:28:40.535591Z",
        "url": "https://files.pythonhosted.org/packages/dd/f6/6a325fdeb8669ea86237fb46621c3fdcaf4abf9e29609ea6ddc032132814/argo-workflows-dsl-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2140a25bf0c46899c4da3d5ad4ec00d8b38a8b9ed2f1cd04d974946a02e5a854",
          "md5": "343e9e87c392bbcbcf02005a7bc29ddd",
          "sha256": "fb86747676241289f4c0d359b527dca2ce31b0487e05f1e93dfe6190ee9db1fc"
        },
        "downloads": -1,
        "filename": "argo_workflows_dsl-0.3.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "343e9e87c392bbcbcf02005a7bc29ddd",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": null,
        "size": 54399,
        "upload_time": "2020-11-18T02:26:42",
        "upload_time_iso_8601": "2020-11-18T02:26:42.631080Z",
        "url": "https://files.pythonhosted.org/packages/21/40/a25bf0c46899c4da3d5ad4ec00d8b38a8b9ed2f1cd04d974946a02e5a854/argo_workflows_dsl-0.3.0-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb1e5db8e5c629225d6600840307e4f5780d404d69830aab227e299ad908f538",
          "md5": "18c1ef929278896e19cec55f5f0d3c03",
          "sha256": "6106812223653332d6ceb54d093944da2fa189780fc0e3e761b585fdd0aec5c8"
        },
        "downloads": -1,
        "filename": "argo_workflows_dsl-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18c1ef929278896e19cec55f5f0d3c03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29007,
        "upload_time": "2020-11-17T23:38:17",
        "upload_time_iso_8601": "2020-11-17T23:38:17.746824Z",
        "url": "https://files.pythonhosted.org/packages/cb/1e/5db8e5c629225d6600840307e4f5780d404d69830aab227e299ad908f538/argo_workflows_dsl-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b540d1bdc634e212a77222a78194a7be5f431ab0ec9e8e5efa7b5aa5adaea561",
          "md5": "5a0014c2adc141c6067f5264ab430343",
          "sha256": "f020598a82d6a08a1d5c587195b381f27ac46958490b74f03f18293857059ad4"
        },
        "downloads": -1,
        "filename": "argo-workflows-dsl-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5a0014c2adc141c6067f5264ab430343",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23796,
        "upload_time": "2020-11-17T23:38:19",
        "upload_time_iso_8601": "2020-11-17T23:38:19.360561Z",
        "url": "https://files.pythonhosted.org/packages/b5/40/d1bdc634e212a77222a78194a7be5f431ab0ec9e8e5efa7b5aa5adaea561/argo-workflows-dsl-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1c266a9fb28945ac7fc0a6e672dd27036dac1f27d14888654034f20801ed6bc",
          "md5": "b4b5567bd830ca9e6a5d857018ee9bc5",
          "sha256": "16b36df85020c85c542d04138b84825af07bfe7973ff1cdb0491d33a62831197"
        },
        "downloads": -1,
        "filename": "argo_workflows_dsl-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4b5567bd830ca9e6a5d857018ee9bc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29404,
        "upload_time": "2020-12-05T20:30:07",
        "upload_time_iso_8601": "2020-12-05T20:30:07.435301Z",
        "url": "https://files.pythonhosted.org/packages/c1/c2/66a9fb28945ac7fc0a6e672dd27036dac1f27d14888654034f20801ed6bc/argo_workflows_dsl-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4fb56bec1ed7952aa882cfe7bff28a2921a13de6585a12771197e894058502",
          "md5": "6206e32bbdda3cea1001b353076f0a99",
          "sha256": "134b1ba784874a4bd909181413ee5d598bcb89251114c8cea0125e3c597916f4"
        },
        "downloads": -1,
        "filename": "argo-workflows-dsl-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6206e32bbdda3cea1001b353076f0a99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24552,
        "upload_time": "2020-12-05T20:30:09",
        "upload_time_iso_8601": "2020-12-05T20:30:09.071852Z",
        "url": "https://files.pythonhosted.org/packages/7c/4f/b56bec1ed7952aa882cfe7bff28a2921a13de6585a12771197e894058502/argo-workflows-dsl-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1c266a9fb28945ac7fc0a6e672dd27036dac1f27d14888654034f20801ed6bc",
        "md5": "b4b5567bd830ca9e6a5d857018ee9bc5",
        "sha256": "16b36df85020c85c542d04138b84825af07bfe7973ff1cdb0491d33a62831197"
      },
      "downloads": -1,
      "filename": "argo_workflows_dsl-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4b5567bd830ca9e6a5d857018ee9bc5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29404,
      "upload_time": "2020-12-05T20:30:07",
      "upload_time_iso_8601": "2020-12-05T20:30:07.435301Z",
      "url": "https://files.pythonhosted.org/packages/c1/c2/66a9fb28945ac7fc0a6e672dd27036dac1f27d14888654034f20801ed6bc/argo_workflows_dsl-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c4fb56bec1ed7952aa882cfe7bff28a2921a13de6585a12771197e894058502",
        "md5": "6206e32bbdda3cea1001b353076f0a99",
        "sha256": "134b1ba784874a4bd909181413ee5d598bcb89251114c8cea0125e3c597916f4"
      },
      "downloads": -1,
      "filename": "argo-workflows-dsl-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6206e32bbdda3cea1001b353076f0a99",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24552,
      "upload_time": "2020-12-05T20:30:09",
      "upload_time_iso_8601": "2020-12-05T20:30:09.071852Z",
      "url": "https://files.pythonhosted.org/packages/7c/4f/b56bec1ed7952aa882cfe7bff28a2921a13de6585a12771197e894058502/argo-workflows-dsl-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}