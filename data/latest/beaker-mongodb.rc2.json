{
  "info": {
    "author": "Ryan Bourgeois",
    "author_email": "bluedragonx@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "==============\nbeaker_mongodb\n==============\nMongoDB_. backend for Beaker_.'s caching / session system.\n\nBased upon Beaker_.'s ext:memcache code.\n\nThis is implemented in a dont-assume-its-there manner.\nIt uses the beaker namespace as the mongodb row's _id, with everything\nin that namespace ( e.g. a session or cache namespace) stored as a full\ndocument.  Each key/value is part of that compound document, using upserts\nfor performance.\n\nI will probably add a toggleable option for using subcollections, as in\ncertain cases such as caching mako templates, this may be desirable /\npreferred performance wise.\n\nRight now, this is primarily optimized for usage with beaker sessions,\nalthough I need to look at tweaking beaker session itself as having it\nstore in individual keys rather than everything in a 'session' key may\nbe desirable for pruning/management/querying.\n\nI have not tackled expiration yet, so you may want to hold off using this\nif you need it.  It will be in the next update, but limits usefulness\nprimarily to sessions right now. (I'll tack a cleanup script in later\nas well).\n\nDue to the use of upserts, no check-insert is required, but it will overwrite\nprevious values which should be expected behavior while caching.\nSafe is NOT invoked, so failure will be quiet.\nTODO - Safe as overridable config option?\n\nNote that, unless you disable_. it, the beaker_mongodb container will\nuse pickle (tries loading cpickle first, falls back on pickle) to\nserialize/deserialize data to MongoDB_.\n\n.. _Beaker: http://beaker.groovie.org\n.. _MongoDB: http://mongodb.org\n\n\nBeaker should maintain thread safety on connections internally and so I am\nrelying upon that rather than setting up threadlocal, etc.  If this assumption\nis wrong or you run into issues, please let me know.\n\nConfiguration\n=============\n\nTo set this up in your own project so that beaker can find it, it must\ndefine a setuptools entry point in your setup.py file.  If you install\nfrom the egg distribution, beaker_mongodb's setup.py SHOULD create a\nbeaker.backend entry point.  If you need to tweak it/see how it's done\nor it just doesn't work and you need to define your own,\nmine looks like this::\n\n    >>> entry_points=\"\"\"\n    ... [beaker.backends]\n    ... mongodb = beaker_mongodb:MongoDBNamespaceManager\n    ... \"\"\",\n\n\nWith this defined, beaker should automatically find the entry point at startup\n(Beaker 1.4 and higher support custom entry points) and load it as an optional\nbackend called 'mongodb'. There are several ways to configure Beaker, I only\ncover ini file (such as with Pylons) here.  There are more configuration\noptions and details in the Beaker configuration docs [1]_.\n\n.. [1] Beaker's configuration documentation -\n        http://beaker.groovie.org/configuration.htm\n\nI have a few cache regions in one of my applications, some of which are memcache and some are on mongodb.  The region config looks like this::\n\n    >>> # new style cache settings\n    ... beaker.cache.regions = comic_archives, navigation\n    ... beaker.cache.comic_archives.type = libmemcached\n    ... beaker.cache.comic_archives.url = 127.0.0.1:11211\n    ... beaker.cache.comic_archives.expire = 604800\n    ... beaker.cache.navigation.type = mongodb\n    ... beaker.cache.navigation.url = mongodb://localhost:27017/beaker.navigation\n    ... beaker.cache.navigation.expire = 86400\n \nThe Beaker docs[1] contain detailed information on configuring regions.  The\nitem we're interested in here is the **beaker.cache.navigation** keys.  Each\nbeaker cache definition needs a *type* field, which defines which backend to\nuse.  Specifying mongodb will (if the module is properly installed) tell\nBeaker to cache via mongodb.  Note that if Beaker cannot load the extension,\nit will tell you that mongodb is an invalid backend.\n\nExpiration is standard beaker syntax, although not supported at the moment in\nthis backend.\n\nFinally, you need to define a URL to connect to MongoDB.  This follows the standardized\nMongoDB URI Format[3]_. Currently the only options supported is 'slaveOK'.\nFor backwards compatibility with old versions of beaker_mongodb, separating\ndatabase and collection with a '#' instead of '.' is supported, but deprecated.\nThe syntax is mongodb://<hostname>[:port]/<database>.<collection>\n\nYou must define a collection for MongoDB to store data in, in addition to a database.\n\nIf you want to use MongoDB's optional authentication support, that is also supported.  Simply define your URL as such::\n\n    >>> beaker.cache.navigation.url = mongodb://bwmcadams@passW0Rd?@localhost:27017/beaker.navigation\n\nThe beaker_mongodb backend will attempt to authenticate with the username and\npassword.  You must configure MongoDB's optional authentication support[2]_ for\nthis to work (By default MongoDB doesn't use authentication).\n\n.. [2] MongoDB Authentication Documentation: http://www.mongodb.org/display/DOCS/Security+and+Authentication\n.. [3] MongoDB URI Format: http://www.mongodb.org/display/DOCS/Connections\n\n\nReading from Secondaries (SlaveOK)\n==================================\n\nIf you'd like to enable reading from secondaries (SlaveOK), you can add that to your URL::\n\n    >>> beaker.cache.navigation.url = mongodb://bwmcadams@passW0Rd?@localhost:27017/beaker.navigation?slaveok=true\n\n\nUsing Beaker Sessions and disabling pickling\n=============================================\n\n.. _disable:\n\nIf you want to save some CPU cycles and can guarantee that what you're\npassing in is either \"mongo-safe\" and doesn't need pickling, or you know\nit's already pickled (such as while using beaker sessions), you can set an\nextra beaker config flag of skip_pickle=True.  ``.. admonition:: To make that\nperfectly clear, Beaker sessions are ALREADY PASSED IN pickled, so you want to\nconfigure it to skip_pickle.`` It shouldn't hurt anything to double-pickle,\nbut you will certainly waste precious CPU cycles.  And wasting CPU cycles is\nkind of counterproductive in a caching system.\n\nMy pylons application configuration for beaker_mongodb has the\nfollowing session_configuration::\n\n    >>> beaker.session.type = mongodb\n    ... beaker.session.url = mongodb://localhost:27017/beaker.sessions\n    ... beaker.session.skip_pickle = True\n\nDepending on your individual needs, you may also wish to create a\ncapped collection for your caching (e.g. memcache-like only most recently used storage)\n\nSee the MongoDB CappedCollection_. docs for details.\n\n.. _CappedCollection: http://www.mongodb.org/display/DOCS/Capped+Collections\n\nSparse Collection Support\n=========================\n\nThe default behavior of beaker_mongodb is to create a single MongoDB Document for each namespace, and store each \ncache key/value on that document.  In this case, the \"_id\" of the document will be the namespace, and each new cache entry\nwill be attached to that document.\n\nThis approach works well in many cases and makes it very easy for Mongo to efficiently manage your cache.  However, in other cases\nyou may wish to change behavior.  This may be for efficiency reasons, or because you're worried about documents getting too large.\n\nIn this case, you can enable a \"sparse collection\" mode, where beaker_mongodb will create a document for EACH key in the namespace.\nWhen sparse collections are enabled, the \"_id\" of a document is a compound document containing the namespace and the key::\n\n   { \"_id\" : { \"namespace\" : \"testcache\", \"key\" : \"value\" } }\n\nThe cache data for that key will be stored in a document field 'data'.  You can enable sparse collections in your config with the\n'sparse_collections' variable::\n\n    >>> beaker.session.type = mongodb\n    ... beaker.session.url = mongodb://localhost:27017/beaker.sessions\n    ... beaker.session.sparse_collections = True\n\nNote for Users of Previous Releases\n====================================\n\nFor bug fix and feature reasons, MongoDB Beaker 0.5+ are not compatible with caches created by previous releases.\nBecause this is cache data, it shouldn't be a big deal.  We recommend dropping or flushing your entire cache collection(s)\nbefore upgrading to 0.5+ and be aware that it will generate new caches.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BlueDragonX/beaker_mongodb/",
    "keywords": "mongo mongodb beaker cache session",
    "license": "New BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "beaker_mongodb",
    "package_url": "https://pypi.org/project/beaker_mongodb/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/beaker_mongodb/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/BlueDragonX/beaker_mongodb/"
    },
    "release_url": "https://pypi.org/project/beaker_mongodb/0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Beaker backend to write sessions and caches to a MongoDB schemaless database.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1107693,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d6cb1eef16ae03468f60c874eb9b0b8ed8ae6fbd105ec34cfb0d02449d0101c",
          "md5": "a6c944b4eda65fab8c1ecee58f7a9c3a",
          "sha256": "dbcc18a3e6f4b79e23b6b91cca23771f8c6b404e900fec79b6e5bb3f6cee86f6"
        },
        "downloads": -1,
        "filename": "beaker_mongodb-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a6c944b4eda65fab8c1ecee58f7a9c3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13094,
        "upload_time": "2013-04-15T21:33:30",
        "upload_time_iso_8601": "2013-04-15T21:33:30.432792Z",
        "url": "https://files.pythonhosted.org/packages/1d/6c/b1eef16ae03468f60c874eb9b0b8ed8ae6fbd105ec34cfb0d02449d0101c/beaker_mongodb-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05c1f3d7b1496554c29913b22262cfc4d72aa00d02d687434e734fdb41b0c885",
          "md5": "8f440066d1fad1240c90212fec256df4",
          "sha256": "95375071c6be27a8ebad9df56ce8e9eff5fd8a7145fd39cb5f92f290b73e5b2b"
        },
        "downloads": -1,
        "filename": "beaker_mongodb-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8f440066d1fad1240c90212fec256df4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13287,
        "upload_time": "2014-05-29T14:15:03",
        "upload_time_iso_8601": "2014-05-29T14:15:03.752394Z",
        "url": "https://files.pythonhosted.org/packages/05/c1/f3d7b1496554c29913b22262cfc4d72aa00d02d687434e734fdb41b0c885/beaker_mongodb-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05c1f3d7b1496554c29913b22262cfc4d72aa00d02d687434e734fdb41b0c885",
        "md5": "8f440066d1fad1240c90212fec256df4",
        "sha256": "95375071c6be27a8ebad9df56ce8e9eff5fd8a7145fd39cb5f92f290b73e5b2b"
      },
      "downloads": -1,
      "filename": "beaker_mongodb-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8f440066d1fad1240c90212fec256df4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13287,
      "upload_time": "2014-05-29T14:15:03",
      "upload_time_iso_8601": "2014-05-29T14:15:03.752394Z",
      "url": "https://files.pythonhosted.org/packages/05/c1/f3d7b1496554c29913b22262cfc4d72aa00d02d687434e734fdb41b0c885/beaker_mongodb-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}