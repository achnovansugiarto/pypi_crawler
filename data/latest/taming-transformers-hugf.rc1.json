{
  "info": {
    "author": "",
    "author_email": "\"tongxin.wen\" <mail@tongx.in>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Taming Transformers for High-Resolution Image Synthesis\n\n> note: forked by tongxin.wen for easier use in hugging-face, for example, added the from_pretrained mixin for models\n\n##### CVPR 2021 (Oral)\n![teaser](assets/mountain.jpeg)\n\n[**Taming Transformers for High-Resolution Image Synthesis**](https://compvis.github.io/taming-transformers/)<br/>\n[Patrick Esser](https://github.com/pesser)\\*,\n[Robin Rombach](https://github.com/rromb)\\*,\n[Bj√∂rn Ommer](https://hci.iwr.uni-heidelberg.de/Staff/bommer)<br/>\n\\* equal contribution\n\n**tl;dr** We combine the efficiancy of convolutional approaches with the expressivity of transformers by introducing a convolutional VQGAN, which learns a codebook of context-rich visual parts, whose composition is modeled with an autoregressive transformer.\n\n![teaser](assets/teaser.png)\n[arXiv](https://arxiv.org/abs/2012.09841) | [BibTeX](#bibtex) | [Project Page](https://compvis.github.io/taming-transformers/)\n\n\n### News\n#### 2022\n- More pretrained VQGANs (e.g. a f8-model with only 256 codebook entries) are available in our new work on [Latent Diffusion Models](https://github.com/CompVis/latent-diffusion).\n- Added scene synthesis models as proposed in the paper [High-Resolution Complex Scene Synthesis with Transformers](https://arxiv.org/abs/2105.06458), see [this section](#scene-image-synthesis).\n#### 2021\n- Thanks to [rom1504](https://github.com/rom1504) it is now easy to [train a VQGAN on your own datasets](#training-on-custom-data).\n- Included a bugfix for the quantizer. For backward compatibility it is\n  disabled by default (which corresponds to always training with `beta=1.0`).\n  Use `legacy=False` in the quantizer config to enable it.\n  Thanks [richcmwang](https://github.com/richcmwang) and [wcshin-git](https://github.com/wcshin-git)!\n- Our paper received an update: See https://arxiv.org/abs/2012.09841v3 and the corresponding changelog.\n- Added a pretrained, [1.4B transformer model](https://k00.fr/s511rwcv) trained for class-conditional ImageNet synthesis, which obtains state-of-the-art FID scores among autoregressive approaches and outperforms BigGAN.\n- Added pretrained, unconditional models on [FFHQ](https://k00.fr/yndvfu95) and [CelebA-HQ](https://k00.fr/2xkmielf).\n- Added accelerated sampling via caching of keys/values in the self-attention operation, used in `scripts/sample_fast.py`.\n- Added a checkpoint of a [VQGAN](https://heibox.uni-heidelberg.de/d/2e5662443a6b4307b470/) trained with f8 compression and Gumbel-Quantization. \n  See also our updated [reconstruction notebook](https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb). \n- We added a [colab notebook](https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb) which compares two VQGANs and OpenAI's [DALL-E](https://github.com/openai/DALL-E). See also [this section](#more-resources).\n- We now include an overview of pretrained models in [Tab.1](#overview-of-pretrained-models). We added models for [COCO](#coco) and [ADE20k](#ade20k).\n- The streamlit demo now supports image completions.\n- We now include a couple of examples from the D-RIN dataset so you can run the\n  [D-RIN demo](#d-rin) without preparing the dataset first.\n- You can now jump right into sampling with our [Colab quickstart notebook](https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/taming-transformers.ipynb).\n\n## Requirements\nA suitable [conda](https://conda.io/) environment named `taming` can be created\nand activated with:\n\n```\nconda env create -f environment.yaml\nconda activate taming\n```\n## Overview of pretrained models\nThe following table provides an overview of all models that are currently available. \nFID scores were evaluated using [torch-fidelity](https://github.com/toshas/torch-fidelity).\nFor reference, we also include a link to the recently released autoencoder of the [DALL-E](https://github.com/openai/DALL-E) model. \nSee the corresponding [colab\nnotebook](https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb)\nfor a comparison and discussion of reconstruction capabilities.\n\n| Dataset  | FID vs train | FID vs val | Link |  Samples (256x256) | Comments\n| ------------- | ------------- | ------------- |-------------  | -------------  |-------------  |\n| FFHQ (f=16) | 9.6 | -- | [ffhq_transformer](https://k00.fr/yndvfu95) |  [ffhq_samples](https://k00.fr/j626x093) |\n| CelebA-HQ (f=16) | 10.2 | -- | [celebahq_transformer](https://k00.fr/2xkmielf) | [celebahq_samples](https://k00.fr/j626x093) |\n| ADE20K (f=16) | -- | 35.5 | [ade20k_transformer](https://k00.fr/ot46cksa) | [ade20k_samples.zip](https://heibox.uni-heidelberg.de/f/70bb78cbaf844501b8fb/) [2k] | evaluated on val split (2k images)\n| COCO-Stuff (f=16) | -- | 20.4  | [coco_transformer](https://k00.fr/2zz6i2ce) | [coco_samples.zip](https://heibox.uni-heidelberg.de/f/a395a9be612f4a7a8054/) [5k] | evaluated on val split (5k images)\n| ImageNet (cIN) (f=16) | 15.98/15.78/6.59/5.88/5.20 | -- | [cin_transformer](https://k00.fr/s511rwcv) | [cin_samples](https://k00.fr/j626x093) | different decoding hyperparameters |  \n| |  | | || |\n| FacesHQ (f=16) | -- |  -- | [faceshq_transformer](https://k00.fr/qqfl2do8)\n| S-FLCKR (f=16) | -- | -- | [sflckr](https://heibox.uni-heidelberg.de/d/73487ab6e5314cb5adba/) \n| D-RIN (f=16) | -- | -- | [drin_transformer](https://k00.fr/39jcugc5)\n| | |  | | || |\n| VQGAN ImageNet (f=16), 1024 |  10.54 | 7.94 | [vqgan_imagenet_f16_1024](https://heibox.uni-heidelberg.de/d/8088892a516d4e3baf92/) | [reconstructions](https://k00.fr/j626x093) | Reconstruction-FIDs.\n| VQGAN ImageNet (f=16), 16384 | 7.41 | 4.98 |[vqgan_imagenet_f16_16384](https://heibox.uni-heidelberg.de/d/a7530b09fed84f80a887/)  |  [reconstructions](https://k00.fr/j626x093) | Reconstruction-FIDs.\n| VQGAN OpenImages (f=8), 256 | -- | 1.49 |https://ommer-lab.com/files/latent-diffusion/vq-f8-n256.zip |  ---  | Reconstruction-FIDs. Available via [latent diffusion](https://github.com/CompVis/latent-diffusion).\n| VQGAN OpenImages (f=8), 16384 | -- | 1.14 |https://ommer-lab.com/files/latent-diffusion/vq-f8.zip  |  ---  | Reconstruction-FIDs. Available via [latent diffusion](https://github.com/CompVis/latent-diffusion)\n| VQGAN OpenImages (f=8), 8192, GumbelQuantization | 3.24 | 1.49 |[vqgan_gumbel_f8](https://heibox.uni-heidelberg.de/d/2e5662443a6b4307b470/)  |  ---  | Reconstruction-FIDs.\n| | |  | | || |\n| DALL-E dVAE (f=8), 8192, GumbelQuantization | 33.88 | 32.01 | https://github.com/openai/DALL-E | [reconstructions](https://k00.fr/j626x093) | Reconstruction-FIDs.\n\n\n## Running pretrained models\n\nThe commands below will start a streamlit demo which supports sampling at\ndifferent resolutions and image completions. To run a non-interactive version\nof the sampling process, replace `streamlit run scripts/sample_conditional.py --`\nby `python scripts/make_samples.py --outdir <path_to_write_samples_to>` and\nkeep the remaining command line arguments. \n\nTo sample from unconditional or class-conditional models, \nrun `python scripts/sample_fast.py -r <path/to/config_and_checkpoint>`.\nWe describe below how to use this script to sample from the ImageNet, FFHQ, and CelebA-HQ models, \nrespectively.\n\n### S-FLCKR\n![teaser](assets/sunset_and_ocean.jpg)\n\nYou can also [run this model in a Colab\nnotebook](https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/taming-transformers.ipynb),\nwhich includes all necessary steps to start sampling.\n\nDownload the\n[2020-11-09T13-31-51_sflckr](https://heibox.uni-heidelberg.de/d/73487ab6e5314cb5adba/)\nfolder and place it into `logs`. Then, run\n```\nstreamlit run scripts/sample_conditional.py -- -r logs/2020-11-09T13-31-51_sflckr/\n```\n\n### ImageNet\n![teaser](assets/imagenet.png)\n\nDownload the [2021-04-03T19-39-50_cin_transformer](https://k00.fr/s511rwcv)\nfolder and place it into logs.  Sampling from the class-conditional ImageNet\nmodel does not require any data preparation. To produce 50 samples for each of\nthe 1000 classes of ImageNet, with k=600 for top-k sampling, p=0.92 for nucleus\nsampling and temperature t=1.0, run\n\n```\npython scripts/sample_fast.py -r logs/2021-04-03T19-39-50_cin_transformer/ -n 50 -k 600 -t 1.0 -p 0.92 --batch_size 25   \n```\n\nTo restrict the model to certain classes, provide them via the `--classes` argument, separated by \ncommas. For example, to sample 50 *ostriches*, *border collies* and *whiskey jugs*, run\n\n```\npython scripts/sample_fast.py -r logs/2021-04-03T19-39-50_cin_transformer/ -n 50 -k 600 -t 1.0 -p 0.92 --batch_size 25 --classes 9,232,901   \n```\nWe recommended to experiment with the autoregressive decoding parameters (top-k, top-p and temperature) for best results.  \n\n### FFHQ/CelebA-HQ\n\nDownload the [2021-04-23T18-19-01_ffhq_transformer](https://k00.fr/yndvfu95) and \n[2021-04-23T18-11-19_celebahq_transformer](https://k00.fr/2xkmielf) \nfolders and place them into logs. \nAgain, sampling from these unconditional models does not require any data preparation.\nTo produce 50000 samples, with k=250 for top-k sampling,\np=1.0 for nucleus sampling and temperature t=1.0, run\n\n```\npython scripts/sample_fast.py -r logs/2021-04-23T18-19-01_ffhq_transformer/   \n```\nfor FFHQ and  \n\n```\npython scripts/sample_fast.py -r logs/2021-04-23T18-11-19_celebahq_transformer/   \n```\nto sample from the CelebA-HQ model.\nFor both models it can be advantageous to vary the top-k/top-p parameters for sampling.\n\n### FacesHQ\n![teaser](assets/faceshq.jpg)\n\nDownload [2020-11-13T21-41-45_faceshq_transformer](https://k00.fr/qqfl2do8) and\nplace it into `logs`. Follow the data preparation steps for\n[CelebA-HQ](#celeba-hq) and [FFHQ](#ffhq). Run\n```\nstreamlit run scripts/sample_conditional.py -- -r logs/2020-11-13T21-41-45_faceshq_transformer/\n```\n\n### D-RIN\n![teaser](assets/drin.jpg)\n\nDownload [2020-11-20T12-54-32_drin_transformer](https://k00.fr/39jcugc5) and\nplace it into `logs`. To run the demo on a couple of example depth maps\nincluded in the repository, run\n\n```\nstreamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T12-54-32_drin_transformer/ --ignore_base_data data=\"{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.imagenet.DRINExamples}}}\"\n```\n\nTo run the demo on the complete validation set, first follow the data preparation steps for\n[ImageNet](#imagenet) and then run\n```\nstreamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T12-54-32_drin_transformer/\n```\n\n### COCO\nDownload [2021-01-20T16-04-20_coco_transformer](https://k00.fr/2zz6i2ce) and\nplace it into `logs`. To run the demo on a couple of example segmentation maps\nincluded in the repository, run\n\n```\nstreamlit run scripts/sample_conditional.py -- -r logs/2021-01-20T16-04-20_coco_transformer/ --ignore_base_data data=\"{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.coco.Examples}}}\"\n```\n\n### ADE20k\nDownload [2020-11-20T21-45-44_ade20k_transformer](https://k00.fr/ot46cksa) and\nplace it into `logs`. To run the demo on a couple of example segmentation maps\nincluded in the repository, run\n\n```\nstreamlit run scripts/sample_conditional.py -- -r logs/2020-11-20T21-45-44_ade20k_transformer/ --ignore_base_data data=\"{target: main.DataModuleFromConfig, params: {batch_size: 1, validation: {target: taming.data.ade20k.Examples}}}\"\n```\n\n## Scene Image Synthesis\n![teaser](assets/scene_images_samples.svg)\nScene image generation based on bounding box conditionals as done in our CVPR2021 AI4CC workshop paper [High-Resolution Complex Scene Synthesis with Transformers](https://arxiv.org/abs/2105.06458) (see talk on [workshop page](https://visual.cs.brown.edu/workshops/aicc2021/#awards)). Supporting the datasets COCO and Open Images.\n\n### Training\nDownload first-stage models [COCO-8k-VQGAN](https://heibox.uni-heidelberg.de/f/78dea9589974474c97c1/) for COCO or [COCO/Open-Images-8k-VQGAN](https://heibox.uni-heidelberg.de/f/461d9a9f4fcf48ab84f4/) for Open Images.\nChange `ckpt_path` in `data/coco_scene_images_transformer.yaml` and `data/open_images_scene_images_transformer.yaml` to point to the downloaded first-stage models.\nDownload the full COCO/OI datasets and adapt `data_path` in the same files, unless working with the 100 files provided for training and validation suits your needs already.\n\nCode can be run with\n`python main.py --base configs/coco_scene_images_transformer.yaml -t True --gpus 0,`\nor\n`python main.py --base configs/open_images_scene_images_transformer.yaml -t True --gpus 0,`\n\n### Sampling \nTrain a model as described above or download a pre-trained model:\n - [Open Images 1 billion parameter model](https://drive.google.com/file/d/1FEK-Z7hyWJBvFWQF50pzSK9y1W_CJEig/view?usp=sharing) available that trained 100 epochs. On 256x256 pixels, FID 41.48¬±0.21, SceneFID 14.60¬±0.15, Inception Score 18.47¬±0.27. The model was trained with 2d crops of images and is thus well-prepared for the task of generating high-resolution images, e.g. 512x512.\n - [Open Images distilled version of the above model with 125 million parameters](https://drive.google.com/file/d/1xf89g0mc78J3d8Bx5YhbK4tNRNlOoYaO) allows for sampling on smaller GPUs (4 GB is enough for sampling 256x256 px images). Model was trained for 60 epochs with 10% soft loss, 90% hard loss. On 256x256 pixels, FID 43.07¬±0.40, SceneFID 15.93¬±0.19, Inception Score 17.23¬±0.11.\n - [COCO 30 epochs](https://heibox.uni-heidelberg.de/f/0d0b2594e9074c7e9a33/)\n - [COCO 60 epochs](https://drive.google.com/file/d/1bInd49g2YulTJBjU32Awyt5qnzxxG5U9/) (find model statistics for both COCO versions in `assets/coco_scene_images_training.svg`)\n\nWhen downloading a pre-trained model, remember to change `ckpt_path` in `configs/*project.yaml` to point to your downloaded first-stage model (see ->Training).\n\nScene image generation can be run with\n`python scripts/make_scene_samples.py --outdir=/some/outdir -r /path/to/pretrained/model --resolution=512,512`\n\n\n## Training on custom data\n\nTraining on your own dataset can be beneficial to get better tokens and hence better images for your domain.\nThose are the steps to follow to make this work:\n1. install the repo with `conda env create -f environment.yaml`, `conda activate taming` and `pip install -e .`\n1. put your .jpg files in a folder `your_folder`\n2. create 2 text files a `xx_train.txt` and `xx_test.txt` that point to the files in your training and test set respectively (for example `find $(pwd)/your_folder -name \"*.jpg\" > train.txt`)\n3. adapt `configs/custom_vqgan.yaml` to point to these 2 files\n4. run `python main.py --base configs/custom_vqgan.yaml -t True --gpus 0,1` to\n   train on two GPUs. Use `--gpus 0,` (with a trailing comma) to train on a single GPU.\n\n## Data Preparation\n\n### ImageNet\nThe code will try to download (through [Academic\nTorrents](http://academictorrents.com/)) and prepare ImageNet the first time it\nis used. However, since ImageNet is quite large, this requires a lot of disk\nspace and time. If you already have ImageNet on your disk, you can speed things\nup by putting the data into\n`${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/` (which defaults to\n`~/.cache/autoencoders/data/ILSVRC2012_{split}/data/`), where `{split}` is one\nof `train`/`validation`. It should have the following structure:\n\n```\n${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/\n‚îú‚îÄ‚îÄ n01440764\n‚îÇ   ‚îú‚îÄ‚îÄ n01440764_10026.JPEG\n‚îÇ   ‚îú‚îÄ‚îÄ n01440764_10027.JPEG\n‚îÇ   ‚îú‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ n01443537\n‚îÇ   ‚îú‚îÄ‚îÄ n01443537_10007.JPEG\n‚îÇ   ‚îú‚îÄ‚îÄ n01443537_10014.JPEG\n‚îÇ   ‚îú‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ ...\n```\n\nIf you haven't extracted the data, you can also place\n`ILSVRC2012_img_train.tar`/`ILSVRC2012_img_val.tar` (or symlinks to them) into\n`${XDG_CACHE}/autoencoders/data/ILSVRC2012_train/` /\n`${XDG_CACHE}/autoencoders/data/ILSVRC2012_validation/`, which will then be\nextracted into above structure without downloading it again.  Note that this\nwill only happen if neither a folder\n`${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/data/` nor a file\n`${XDG_CACHE}/autoencoders/data/ILSVRC2012_{split}/.ready` exist. Remove them\nif you want to force running the dataset preparation again.\n\nYou will then need to prepare the depth data using\n[MiDaS](https://github.com/intel-isl/MiDaS). Create a symlink\n`data/imagenet_depth` pointing to a folder with two subfolders `train` and\n`val`, each mirroring the structure of the corresponding ImageNet folder\ndescribed above and containing a `png` file for each of ImageNet's `JPEG`\nfiles. The `png` encodes `float32` depth values obtained from MiDaS as RGBA\nimages. We provide the script `scripts/extract_depth.py` to generate this data.\n**Please note** that this script uses [MiDaS via PyTorch\nHub](https://pytorch.org/hub/intelisl_midas_v2/). When we prepared the data,\nthe hub provided the [MiDaS\nv2.0](https://github.com/intel-isl/MiDaS/releases/tag/v2) version, but now it\nprovides a v2.1 version. We haven't tested our models with depth maps obtained\nvia v2.1 and if you want to make sure that things work as expected, you must\nadjust the script to make sure it explicitly uses\n[v2.0](https://github.com/intel-isl/MiDaS/releases/tag/v2)!\n\n### CelebA-HQ\nCreate a symlink `data/celebahq` pointing to a folder containing the `.npy`\nfiles of CelebA-HQ (instructions to obtain them can be found in the [PGGAN\nrepository](https://github.com/tkarras/progressive_growing_of_gans)).\n\n### FFHQ\nCreate a symlink `data/ffhq` pointing to the `images1024x1024` folder obtained\nfrom the [FFHQ repository](https://github.com/NVlabs/ffhq-dataset).\n\n### S-FLCKR\nUnfortunately, we are not allowed to distribute the images we collected for the\nS-FLCKR dataset and can therefore only give a description how it was produced.\nThere are many resources on [collecting images from the\nweb](https://github.com/adrianmrit/flickrdatasets) to get started.\nWe collected sufficiently large images from [flickr](https://www.flickr.com)\n(see `data/flickr_tags.txt` for a full list of tags used to find images)\nand various [subreddits](https://www.reddit.com/r/sfwpornnetwork/wiki/network)\n(see `data/subreddits.txt` for all subreddits that were used).\nOverall, we collected 107625 images, and split them randomly into 96861\ntraining images and 10764 validation images. We then obtained segmentation\nmasks for each image using [DeepLab v2](https://arxiv.org/abs/1606.00915)\ntrained on [COCO-Stuff](https://arxiv.org/abs/1612.03716). We used a [PyTorch\nreimplementation](https://github.com/kazuto1011/deeplab-pytorch) and include an\nexample script for this process in `scripts/extract_segmentation.py`.\n\n### COCO\nCreate a symlink `data/coco` containing the images from the 2017 split in\n`train2017` and `val2017`, and their annotations in `annotations`. Files can be\nobtained from the [COCO webpage](https://cocodataset.org/). In addition, we use\nthe [Stuff+thing PNG-style annotations on COCO 2017\ntrainval](http://calvin.inf.ed.ac.uk/wp-content/uploads/data/cocostuffdataset/stuffthingmaps_trainval2017.zip)\nannotations from [COCO-Stuff](https://github.com/nightrome/cocostuff), which\nshould be placed under `data/cocostuffthings`.\n\n### ADE20k\nCreate a symlink `data/ade20k_root` containing the contents of\n[ADEChallengeData2016.zip](http://data.csail.mit.edu/places/ADEchallenge/ADEChallengeData2016.zip)\nfrom the [MIT Scene Parsing Benchmark](http://sceneparsing.csail.mit.edu/).\n\n## Training models\n\n### FacesHQ\n\nTrain a VQGAN with\n```\npython main.py --base configs/faceshq_vqgan.yaml -t True --gpus 0,\n```\n\nThen, adjust the checkpoint path of the config key\n`model.params.first_stage_config.params.ckpt_path` in\n`configs/faceshq_transformer.yaml` (or download\n[2020-11-09T13-33-36_faceshq_vqgan](https://k00.fr/uxy5usa9) and place into `logs`, which\ncorresponds to the preconfigured checkpoint path), then run\n```\npython main.py --base configs/faceshq_transformer.yaml -t True --gpus 0,\n```\n\n### D-RIN\n\nTrain a VQGAN on ImageNet with\n```\npython main.py --base configs/imagenet_vqgan.yaml -t True --gpus 0,\n```\n\nor download a pretrained one from [2020-09-23T17-56-33_imagenet_vqgan](https://k00.fr/u0j2dtac)\nand place under `logs`. If you trained your own, adjust the path in the config\nkey `model.params.first_stage_config.params.ckpt_path` of\n`configs/drin_transformer.yaml`.\n\nTrain a VQGAN on Depth Maps of ImageNet with\n```\npython main.py --base configs/imagenetdepth_vqgan.yaml -t True --gpus 0,\n```\n\nor download a pretrained one from [2020-11-03T15-34-24_imagenetdepth_vqgan](https://k00.fr/55rlxs6i)\nand place under `logs`. If you trained your own, adjust the path in the config\nkey `model.params.cond_stage_config.params.ckpt_path` of\n`configs/drin_transformer.yaml`.\n\nTo train the transformer, run\n```\npython main.py --base configs/drin_transformer.yaml -t True --gpus 0,\n```\n\n## More Resources\n### Comparing Different First Stage Models\nThe reconstruction and compression capabilities of different fist stage models can be analyzed in this [colab notebook](https://colab.research.google.com/github/CompVis/taming-transformers/blob/master/scripts/reconstruction_usage.ipynb). \nIn particular, the notebook compares two VQGANs with a downsampling factor of f=16 for each and codebook dimensionality of 1024 and 16384, \na VQGAN with f=8 and 8192 codebook entries and the discrete autoencoder of OpenAI's [DALL-E](https://github.com/openai/DALL-E) (which has f=8 and 8192 \ncodebook entries).\n![firststages1](assets/first_stage_squirrels.png)\n![firststages2](assets/first_stage_mushrooms.png)\n\n### Other\n- A [video summary](https://www.youtube.com/watch?v=o7dqGcLDf0A&feature=emb_imp_woyt) by [Two Minute Papers](https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg).\n- A [video summary](https://www.youtube.com/watch?v=-wDSDtIAyWQ) by [Gradient Dude](https://www.youtube.com/c/GradientDude/about).\n- A [weights and biases report summarizing the paper](https://wandb.ai/ayush-thakur/taming-transformer/reports/-Overview-Taming-Transformers-for-High-Resolution-Image-Synthesis---Vmlldzo0NjEyMTY)\nby [ayulockin](https://github.com/ayulockin).\n- A [video summary](https://www.youtube.com/watch?v=JfUTd8fjtX8&feature=emb_imp_woyt) by [What's AI](https://www.youtube.com/channel/UCUzGQrN-lyyc0BWTYoJM_Sg).\n- Take a look at [ak9250's notebook](https://github.com/ak9250/taming-transformers/blob/master/tamingtransformerscolab.ipynb) if you want to run the streamlit demos on Colab.\n\n### Text-to-Image Optimization via CLIP\nVQGAN has been successfully used as an image generator guided by the [CLIP](https://github.com/openai/CLIP) model, both for pure image generation\nfrom scratch and image-to-image translation. We recommend the following notebooks/videos/resources:\n\n - [Advadnouns](https://twitter.com/advadnoun/status/1389316507134357506) Patreon and corresponding LatentVision notebooks: https://www.patreon.com/patronizeme\n - The [notebook]( https://colab.research.google.com/drive/1L8oL-vLJXVcRzCFbPwOoMkPKJ8-aYdPN) of [Rivers Have Wings](https://twitter.com/RiversHaveWings).\n - A [video](https://www.youtube.com/watch?v=90QDe6DQXF4&t=12s) explanation by [Dot CSV](https://www.youtube.com/channel/UCy5znSnfMsDwaLlROnZ7Qbg) (in Spanish, but English subtitles are available)\n\n![txt2img](assets/birddrawnbyachild.png)\n\nText prompt: *'A bird drawn by a child'*\n\n## Shout-outs\nThanks to everyone who makes their code and models available. In particular,\n\n- The architecture of our VQGAN is inspired by [Denoising Diffusion Probabilistic Models](https://github.com/hojonathanho/diffusion)\n- The very hackable transformer implementation [minGPT](https://github.com/karpathy/minGPT)\n- The good ol' [PatchGAN](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix) and [Learned Perceptual Similarity (LPIPS)](https://github.com/richzhang/PerceptualSimilarity)\n\n## BibTeX\n\n```\n@misc{esser2020taming,\n      title={Taming Transformers for High-Resolution Image Synthesis}, \n      author={Patrick Esser and Robin Rombach and Bj√∂rn Ommer},\n      year={2020},\n      eprint={2012.09841},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "taming-transformers-hugf",
    "package_url": "https://pypi.org/project/taming-transformers-hugf/",
    "platform": null,
    "project_url": "https://pypi.org/project/taming-transformers-hugf/",
    "project_urls": {
      "Bug Tracker": "https://github.com/flybywind/taming-transformers",
      "Homepage": "https://github.com//flybywind/taming-transformers"
    },
    "release_url": "https://pypi.org/project/taming-transformers-hugf/0.0.1/",
    "requires_dist": [
      "albumentations>=0.4.3",
      "einops==0.3.0",
      "huggingface-hub>=0.10.0",
      "imageio-ffmpeg>=0.4.2",
      "imageio>=2.9.0",
      "more-itertools>=8.0.0",
      "numpy",
      "numpy>=1.19.2",
      "omegaconf==2.0.0",
      "opencv-python>=4.1.2.30",
      "pudb>=2019.2",
      "pytest>=7.2.1",
      "pytorch-lightning>=1.0.8",
      "streamlit>=0.73.1",
      "test-tube>=0.7.5",
      "torch>=1.7.0",
      "torchvision>=0.8.1",
      "tqdm",
      "transformers>=4.3.1"
    ],
    "requires_python": ">=3.6",
    "summary": "Taming Transformers for High-Resolution Image Synthesis, augmented with some utils of hugging-face",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16559896,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca310faf1bbfaf2222a93dc026a812f8e2f3474fddc6de4f292ca593e5e5c142",
          "md5": "59c8dab8c0e88cd854f4dbceb55f7697",
          "sha256": "5771d781beb485cd92bf1ac3dbecbec9ec5d67e80ec08ef8b8577f33bab31608"
        },
        "downloads": -1,
        "filename": "taming_transformers_hugf-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59c8dab8c0e88cd854f4dbceb55f7697",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82069,
        "upload_time": "2023-01-25T10:48:35",
        "upload_time_iso_8601": "2023-01-25T10:48:35.985198Z",
        "url": "https://files.pythonhosted.org/packages/ca/31/0faf1bbfaf2222a93dc026a812f8e2f3474fddc6de4f292ca593e5e5c142/taming_transformers_hugf-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82bd72b3d3aaf6a647b988040a3da02bb84f7edf35a39e32e790ca3106f6ca7c",
          "md5": "a3147315ee98fb865337944edd4dcb3f",
          "sha256": "46a97b6740a5e913298a946197e8e33f2c1cc00f64b626163a6710fa8974a65a"
        },
        "downloads": -1,
        "filename": "taming_transformers_hugf-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3147315ee98fb865337944edd4dcb3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 68276,
        "upload_time": "2023-01-25T10:48:37",
        "upload_time_iso_8601": "2023-01-25T10:48:37.996538Z",
        "url": "https://files.pythonhosted.org/packages/82/bd/72b3d3aaf6a647b988040a3da02bb84f7edf35a39e32e790ca3106f6ca7c/taming_transformers_hugf-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca310faf1bbfaf2222a93dc026a812f8e2f3474fddc6de4f292ca593e5e5c142",
        "md5": "59c8dab8c0e88cd854f4dbceb55f7697",
        "sha256": "5771d781beb485cd92bf1ac3dbecbec9ec5d67e80ec08ef8b8577f33bab31608"
      },
      "downloads": -1,
      "filename": "taming_transformers_hugf-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "59c8dab8c0e88cd854f4dbceb55f7697",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 82069,
      "upload_time": "2023-01-25T10:48:35",
      "upload_time_iso_8601": "2023-01-25T10:48:35.985198Z",
      "url": "https://files.pythonhosted.org/packages/ca/31/0faf1bbfaf2222a93dc026a812f8e2f3474fddc6de4f292ca593e5e5c142/taming_transformers_hugf-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82bd72b3d3aaf6a647b988040a3da02bb84f7edf35a39e32e790ca3106f6ca7c",
        "md5": "a3147315ee98fb865337944edd4dcb3f",
        "sha256": "46a97b6740a5e913298a946197e8e33f2c1cc00f64b626163a6710fa8974a65a"
      },
      "downloads": -1,
      "filename": "taming_transformers_hugf-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a3147315ee98fb865337944edd4dcb3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 68276,
      "upload_time": "2023-01-25T10:48:37",
      "upload_time_iso_8601": "2023-01-25T10:48:37.996538Z",
      "url": "https://files.pythonhosted.org/packages/82/bd/72b3d3aaf6a647b988040a3da02bb84f7edf35a39e32e790ca3106f6ca7c/taming_transformers_hugf-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}