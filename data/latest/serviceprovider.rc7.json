{
  "info": {
    "author": "Tushar Naik",
    "author_email": "tushar.knaik@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Networking",
      "Topic :: Utilities"
    ],
    "description": "# Python Ranger\n\n[![PyPI version](https://img.shields.io/pypi/v/serviceprovider?style=for-the-badge)](https://pypi.org/project/serviceprovider)\n[![Docker Image](https://img.shields.io/docker/v/tusharknaik/python-ranger-daemon?style=for-the-badge)](https://hub.docker.com/repository/docker/tusharknaik/python-ranger-daemon)\n\nBefore you start, you might wanna check [Ranger](https://github.com/appform-io/ranger) for more details. You'll need it\nto follow some jargon being used in this readme.\n\nThere are 2 sections in here.\n\n1. [Ranger Service Provider](#ranger-service-provider)\n2. [Ranger Daemon](#ranger-daemon-setup)\n\n## Ranger Service Provider\n\nA service provider in Ranger is something can be used to broadcast that a service is available at some host:port, where\nclients can connect and request services (make http calls). This broadcast is essentially done using zookeeper. The\nfollowing python class helps you do the same for any python based service/tool. It follows the same models as present in\nthe main ranger java library.\n\nSimilar details can be found at [PyPi](https://pypi.org/project/serviceprovider/)\n\n### Installation\n\n```shell\npython3.9 -m pip install serviceprovider\n```\n\n### Usage\n\n```python\nfrom serviceprovider.ranger_models import *\nfrom serviceprovider import RangerServiceProvider, HealthCheck\n\n# Create the ranger service provider\nranger = RangerServiceProvider(cluster_details=ClusterDetails(zk_string='localhost:2181', update_interval=1),\n                               service_details=ServiceDetails(host='localhost', port=12211, environment='stage',\n                                                              namespace='myorg',\n                                                              service_name='python-test'),\n                               health_check=HealthCheck(url='localhost:12211/health', scheme=UrlScheme.GET))\n\n## Start the updates in background (this will update zookeeper at regular intervals)\nranger.start()\n\n## You may also start the updates and block your current thread (until we hit an interrupt)\nranger.start(block=True)\n\n## When you wish to stop updates\nranger.stop()\n```\n\n### Details\n\nThe above sample shows how to set up a background thread, that does the job of publishing regular updates to zk. You can\noptionally provide a healthcheck url, which will receive a ping at regular intervals. A HEALTHY broadcast will only be\ndone if the ping check was successful. You can check HealthCheck to customize the URL to your needs.\n\n---\n\n## Ranger Daemon setup\n\nThis section deals with using the code as a simple light daemon that can run alongside your software (but outside it) to\nprovide regular service discovery updates to zookeeper. As usual, check [Ranger](https://github.com/appform-io/ranger)\nfor more details.\n\n### Intent\n\nIdeally, you would directly use the standard Ranger java client to deeply integrate the service's health updates with\nranger.<br>  \nIn scenarios where you can't do the above, you can rely on this daemon. Say you need discovery updates to be published\nfor a service written in a langauge other than java, or you are unable to add the ranger dependency directly, in your\njava application.\n\nThe intent of this daemon is to run along-side your software and publish updates, as long as your software is up and\nhealthy. Currently, support has been added for a dockerized setup, as well as an import based custom setup. Currently,\nSupport has been provided for the following:\n\n1. Simple usage\n2. Import based usage\n3. Docker multi-container setup\n\n### 1. Simple usage\n\nIf you just wish to invoke the script directly, clone the project and follow along the helper. You command will look\nlike so\n\n```shell\npython3.9 serviceprovider/ranger_daemon.py -zk localhost:2181 -s myapp -host localhost -p 12211 -n org -e stage -hcu 'http://localhost:12211/healthcheck?pretty=true'\n```\n\n### 2. Import Based Usage\n\nYou can also choose to run the daemon from within another python file, by forwarding the command line arguments. Install\nthe package first, as shown below\n\n```shell\npython3.9 -m pip install serviceprovider\n```\n\n```python\nimport sys\nfrom serviceprovider.ranger_daemon import ranger_daemon_trigger\n\nranger_daemon_trigger(sys.argv[1:])\n```\n\n### 3. Docker Based\n\nImagine a scenario where you already have a docker application, but you want to run this daemon alongside the container,\nto make the existing container discoverable, without having to code up an integration with ranger. The following is a\nsolution to this problem. You can use docker compose to run your service and this daemon as a multi container docker\napplication.<br>\nAfter this, your existing container should be ready for service discovery.\n\nDocker containers are available on\nthe [DockerHub](https://hub.docker.com/repository/docker/tusharknaik/python-ranger-daemon).\n\nThe following docker command can be used to start the daemon, using environment variables. The table below explains the\nvarious environment variables required to run the script\n\n| Env Variable | Description                                         |\n|--------------|-----------------------------------------------------|\n| HOST         | Hostname                                            |\n| PORT         | Port                                                |\n| RANGER_ZK    | Zookeeper connection string                         |\n| SERVICE_NAME | Name of service                                     |\n| ENV          | Environment (stage/prod)                            |\n| NAMESPACE    | Namespace in zookeeper                              |\n| HEALTH_CHECK | [optional] GET healthcheck URL to be used for pings |\n| REGION       | [optional] Region value                             |\n| TAGS         | [optional] Comma separated tags                     |\n\n```shell\ndocker run --rm -d -e RANGER_ZK=<zookeeper_info> -e SERVICE_NAME=<name_of_service> -e HOST=<host_of_machine> -e PORT=<port> -e ENV=<environment> -e NAMESPACE=<namespace> -e HEALTH_CHECK=<health_check_url> --name python-ranger-daemon tusharknaik/python-ranger-daemon:1.7\n```\n\nHere is an example for running it on a Mac machine, assuming your zookeeper is already running on `localhost:2181` (\nnotice the network being set to `host` and zookeeper being sent as `host.docker.internal` for connecting to localhost\nfrom within docker)\n\n```shell\ndocker run --rm -d --network host -e RANGER_ZK=host.docker.internal:2181 -e SERVICE_NAME=python-test -e HOST=localhost -e PORT=12211 -e ENV=stage -e NAMESPACE=myorg -e HEALTH_CHECK=\"localhost:12211/health\" --name python-ranger-daemon tusharknaik/python-ranger-daemon:1.7\n```\n\n---\n\n## Under the hood\n\nThe daemon/thread will write data to zookeeper in the following format (datamodel from ranger):\n\n```json\n{\n  \"host\": \"localhost\",\n  \"port\": 12211,\n  \"nodeData\": {\n    \"environment\": \"stage\",\n    \"tags\": [\"identity\", \"auth\"],\n    \"region\": \"IN-nm\"\n  },\n  \"healthcheckStatus\": \"healthy\",\n  \"lastUpdatedTimeStamp\": 1639044989841\n}\n```\n\nUpdates will be published in the path: /$NAMESPACE/$SERVICE_NAME at a periodic intervals of --interval (default: 1\nsecond)\n\n**The following will be taken care of:**\n\n- Infinite retry and connection reattempts in case of zk connection issues\n- Proper cleanup of zk connections to get rid of ephemeral nodes\n- Proper logging\n- Does continuous health check pings on a particular health check url if required [optional]\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tushar-Naik/python-ranger-daemon",
    "keywords": "ranger,zookeeper,service discovery,periodic task,interval,periodic job,flask style,decorator",
    "license": "License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serviceprovider",
    "package_url": "https://pypi.org/project/serviceprovider/",
    "platform": "",
    "project_url": "https://pypi.org/project/serviceprovider/",
    "project_urls": {
      "Homepage": "https://github.com/Tushar-Naik/python-ranger-daemon"
    },
    "release_url": "https://pypi.org/project/serviceprovider/1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The python equivalent for ranger based service discovery mechanism using zookeeper",
    "version": "1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12981165,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edb0ff229777325334f6be426b63da5a4ce40d644bb947c979a7053e6217e899",
          "md5": "0de0bef70e37c0304e002ab095d73f49",
          "sha256": "efa266a9586adf8df94c87e83ba70a946fbc69adeaf65195c9757e44c2de8ec4"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0de0bef70e37c0304e002ab095d73f49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12369,
        "upload_time": "2022-02-18T19:40:04",
        "upload_time_iso_8601": "2022-02-18T19:40:04.399534Z",
        "url": "https://files.pythonhosted.org/packages/ed/b0/ff229777325334f6be426b63da5a4ce40d644bb947c979a7053e6217e899/serviceprovider-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72385be3eaf4b838fbaf7799fc644cdd9c26ef399fd8225756042c891c7458e9",
          "md5": "8fec2b88451c9b6a11ca25f53f0826d6",
          "sha256": "b52f9234d6f14e68399fb430ea36049cb32ae90732f18f7b4c23c4bfd3b10c2f"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8fec2b88451c9b6a11ca25f53f0826d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13948,
        "upload_time": "2022-02-19T07:00:06",
        "upload_time_iso_8601": "2022-02-19T07:00:06.024767Z",
        "url": "https://files.pythonhosted.org/packages/72/38/5be3eaf4b838fbaf7799fc644cdd9c26ef399fd8225756042c891c7458e9/serviceprovider-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09744c2b760389222ac550e884bf053954aa2317550e90817fe35feb1eb36b4a",
          "md5": "18383322271f90da99265a3fe3c08fef",
          "sha256": "7a366ee73d809e13fae112c05bf00f5fddeb4aa8d30e0e12d156e880af81cd83"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "18383322271f90da99265a3fe3c08fef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14029,
        "upload_time": "2022-02-19T09:41:06",
        "upload_time_iso_8601": "2022-02-19T09:41:06.199361Z",
        "url": "https://files.pythonhosted.org/packages/09/74/4c2b760389222ac550e884bf053954aa2317550e90817fe35feb1eb36b4a/serviceprovider-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c33071225f988608a402bbc1524f0bc0dbbca243e675d7470d017d74428b5f6b",
          "md5": "c84d4b63d9f74a2e6057bac693f87539",
          "sha256": "8b8339cb85b2b8132d815a595fa0d57a082b8c30ce1c0b0d4cb83ed2f2f07214"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c84d4b63d9f74a2e6057bac693f87539",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14840,
        "upload_time": "2022-02-20T13:57:58",
        "upload_time_iso_8601": "2022-02-20T13:57:58.703407Z",
        "url": "https://files.pythonhosted.org/packages/c3/30/71225f988608a402bbc1524f0bc0dbbca243e675d7470d017d74428b5f6b/serviceprovider-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8f2fc3de068bab1a87ccf42ec206e4601de5d1f03d3a3b8eafc00315623542e",
          "md5": "be8dea40bda0fc70666fded499b60d73",
          "sha256": "b7764bc30f297b6218330ea2f9a9ecafab99667c011c55ede63a7cf858c1275a"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "be8dea40bda0fc70666fded499b60d73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14816,
        "upload_time": "2022-02-20T14:08:36",
        "upload_time_iso_8601": "2022-02-20T14:08:36.176898Z",
        "url": "https://files.pythonhosted.org/packages/b8/f2/fc3de068bab1a87ccf42ec206e4601de5d1f03d3a3b8eafc00315623542e/serviceprovider-1.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10baf329de0feb0272eeabed9c4f7590c613adfb867daafe33f5ce49db4ce740",
          "md5": "b02edb7bbc342d9e70e2cfa604de2594",
          "sha256": "6997a76f55aa55a39b28af830cb2ecd0399a420d249b1f95d3ba29a92afaaf0d"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.6.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b02edb7bbc342d9e70e2cfa604de2594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14823,
        "upload_time": "2022-02-20T14:55:26",
        "upload_time_iso_8601": "2022-02-20T14:55:26.202043Z",
        "url": "https://files.pythonhosted.org/packages/10/ba/f329de0feb0272eeabed9c4f7590c613adfb867daafe33f5ce49db4ce740/serviceprovider-1.6.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "604fa7be8d9fa27cdd559e6b681d06adb861db54bc9adb6b3f15bce34b1e83a4",
          "md5": "baa3124ae7844fa70bb21939a01f4336",
          "sha256": "171e0ca7b6dc21eb5411c0f4f4adad497b8c2f6cf513ebda404920dd571fa084"
        },
        "downloads": -1,
        "filename": "serviceprovider-1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "baa3124ae7844fa70bb21939a01f4336",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15435,
        "upload_time": "2022-02-23T09:54:13",
        "upload_time_iso_8601": "2022-02-23T09:54:13.176979Z",
        "url": "https://files.pythonhosted.org/packages/60/4f/a7be8d9fa27cdd559e6b681d06adb861db54bc9adb6b3f15bce34b1e83a4/serviceprovider-1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "604fa7be8d9fa27cdd559e6b681d06adb861db54bc9adb6b3f15bce34b1e83a4",
        "md5": "baa3124ae7844fa70bb21939a01f4336",
        "sha256": "171e0ca7b6dc21eb5411c0f4f4adad497b8c2f6cf513ebda404920dd571fa084"
      },
      "downloads": -1,
      "filename": "serviceprovider-1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "baa3124ae7844fa70bb21939a01f4336",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15435,
      "upload_time": "2022-02-23T09:54:13",
      "upload_time_iso_8601": "2022-02-23T09:54:13.176979Z",
      "url": "https://files.pythonhosted.org/packages/60/4f/a7be8d9fa27cdd559e6b681d06adb861db54bc9adb6b3f15bce34b1e83a4/serviceprovider-1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}