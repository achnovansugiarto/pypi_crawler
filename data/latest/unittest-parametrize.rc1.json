{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "====================\nunittest-parametrize\n====================\n\n.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/unittest-parametrize/main.yml?branch=main&style=for-the-badge\n   :target: https://github.com/adamchainz/unittest-parametrize/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/unittest-parametrize.svg?style=for-the-badge\n   :target: https://pypi.org/project/unittest-parametrize/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nParametrize tests within unittest TestCases.\n\nInstallation\n============\n\nInstall with:\n\n.. code-block:: bash\n\n    python -m pip install unittest-parametrize\n\nPython 3.7 to 3.11 supported.\n\n----\n\n**Testing a Django project?**\nCheck out my book `Speed Up Your Django Tests <https://adamchainz.gumroad.com/l/suydt>`__ which covers loads of recommendations to write faster, more accurate tests.\n\n----\n\nUsage\n=====\n\nThe API mirrors |@pytest.mark.parametrize|__ as much as possible.\n(Even the name `parametrize <https://en.wiktionary.org/wiki/parametrize#English>`__ over the slightly more common `parameterize <https://en.wiktionary.org/wiki/parameterize#English>`__ with an extra “e”.\nDon’t get caught out by that…)\n\n.. |@pytest.mark.parametrize| replace:: ``@pytest.mark.parametrize``\n__ https://docs.pytest.org/en/stable/how-to/parametrize.html#parametrize-basics\n\nThere are two steps to parametrize a test case:\n\n1. Use ``ParametrizedTestCase`` in the base classes for your test case.\n2. Apply ``@parametrize`` to any tests for parametrization.\n   This decorator takes (at least):\n\n   * the argument names to parametrize, as comma-separated string\n   * a list of parameter tuples to create individual tests for\n\nHere’s a basic example:\n\n.. code-block:: python\n\n    from unittest_parametrize import parametrize\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class SquareTests(ParametrizedTestCase):\n        @parametrize(\n            \"x,expected\",\n            [\n                (1, 1),\n                (2, 4),\n            ],\n        )\n        def test_square(self, x: int, expected: int) -> None:\n            self.assertEqual(x**2, expected)\n\n``@parametrize`` modifies the class at definition time with Python’s |__init_subclass__ hook|__.\nIt removes the original test method and creates wrapped copies with individual names.\nThus the parametrization should work regardless of the test runner you use (be it unittest, Django’s test runner, pytest, etc.).\n\n.. |__init_subclass__ hook| replace:: ``__init_subclass__`` hook\n__ https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__\n\nProvide argument names as a string\n----------------------------------\n\nIf you need, you can provide argument names as a sequence of strings instead:\n\n.. code-block:: python\n\n    from unittest_parametrize import parametrize\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class SquareTests(ParametrizedTestCase):\n        @parametrize(\n            (\"x\", \"expected\"),\n            [\n                (1, 1),\n                (2, 4),\n            ],\n        )\n        def test_square(self, x: int, expected: int) -> None:\n            self.assertEqual(x**2, expected)\n\nCustom test name suffixes\n-------------------------\n\nBy default, test names are extended with an index, starting at zero.\nYou can see these names when running the tests:\n\n.. code-block:: console\n\n    $ python -m unittest t.py -v\n    test_square_0 (t.SquareTests.test_square_0) ... ok\n    test_square_1 (t.SquareTests.test_square_1) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.000s\n\n    OK\n\nYou can customize these names by passing ``param`` objects, which contain the arguments plus an ID for the suffix:\n\n.. code-block:: python\n\n    from unittest_parametrize import param\n    from unittest_parametrize import parametrize\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class SquareTests(ParametrizedTestCase):\n        @parametrize(\n            \"x,expected\",\n            [\n                param(1, 1, id=\"one\"),\n                param(2, 4, id=\"two\"),\n            ],\n        )\n        def test_square(self, x: int, expected: int) -> None:\n            self.assertEqual(x**2, expected)\n\nYielding perhaps more natural names:\n\n.. code-block:: console\n\n    $ python -m unittest t.py -v\n    test_square_one (t.SquareTests.test_square_one) ... ok\n    test_square_two (t.SquareTests.test_square_two) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.000s\n\n    OK\n\nParameter IDs should be valid Python identifier suffixes.\n\nAlternatively, you can provide the id’s separately with the ``ids`` argument:\n\n.. code-block:: python\n\n    from unittest_parametrize import parametrize\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class SquareTests(ParametrizedTestCase):\n        @parametrize(\n            \"x,expected\",\n            [\n                (1, 1),\n                (2, 4),\n            ],\n            ids=[\"one\", \"two\"],\n        )\n        def test_square(self, x: int, expected: int) -> None:\n            self.assertEqual(x**2, expected)\n\nUse with other test decorators\n------------------------------\n\n``@parametrize`` tries to ensure it is the top-most (outermost) decorator.\nThis limitation exists to ensure that the decorator applies to each test.\nSo decorators like ``@mock.patch.object`` need be beneath ``@parametrize``:\n\n.. code-block:: python\n\n    from unittest import mock\n    from unittest_parametrize import parametrize\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class MockingTests(ParametrizedTestCase):\n        @parametrize(\n            \"nails\",\n            [(1,), (2,)],\n        )\n        @mock.patch.object(board, \"length\", new=9001)\n        def test_boarding(self, nails):\n            ...\n\nMultiple ``@parametrize`` decorators\n------------------------------------\n\n``@parametrize`` is not stackable.\nTo create a cross-product of tests, use |itertools.product()|__:\n\n.. |itertools.product()| replace:: ``itertools.product()``\n__ https://docs.python.org/3/library/itertools.html#itertools.product\n\n.. code-block:: python\n\n    from itertools import product\n    from unittest_parametrize import parametrize\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class RocketTests(ParametrizedTestCase):\n        @parametrize(\n            \"use_ions,hyperdrive_level,nose_colour\",\n            list(\n                product(\n                    [True, False],\n                    [0, 1, 2],\n                    [\"red\", \"yellow\"],\n                )\n            ),\n        )\n        def test_takeoff(self, use_ions, hyperdrive_level, nose_colour) -> None:\n            ...\n\nThe above creates 2 * 3 * 2 = 12 versions of ``test_takeoff``.\n\nUse ``ParametrizedTestCase`` in your base test case class\n---------------------------------------------------------\n\n``ParametrizedTestCase`` does nothing if there aren’t any ``@parametrize``-decorated tests within a class.\nTherefore you can include it in your project’s base test case class so that ``@parametrize`` works immediately in all test cases.\n\nFor example, within a Django project, you can create a set of project-specific base test case classes extending `those provided by Django <https://docs.djangoproject.com/en/stable/topics/testing/tools/#provided-test-case-classes>`__.\nYou can do this in a module like ``example.test``, and use the base classes throughout your test suite.\nTo add ``ParametrizedTestCase`` to all your copies, use it in a custom ``SimpleTestCase`` and then mixin to others using multiple inheritance like so:\n\n.. code-block:: python\n\n    from django import test\n    from unittest_parametrize import ParametrizedTestCase\n\n\n    class SimpleTestCase(ParametrizedTestCase, test.SimpleTestCase):\n        pass\n\n\n    class TestCase(SimpleTestCase, test.TestCase):\n        pass\n\n\n    class TransactionTestCase(SimpleTestCase, test.TransactionTestCase):\n        pass\n\n\n    class LiveServerTestCase(SimpleTestCase, test.LiveServerTestCase):\n        pass\n\nHistory\n=======\n\nWhen I started writing unit tests, I learned to use `DDT (Data-Driven Tests) <https://ddt.readthedocs.io/en/latest/>`__ for parametrizing tests.\nIt works, but the docs are a bit thin, and the API a little obscure (what does ``@ddt`` stand for again?).\n\nLater when picking up pytest, I learned to use its `parametrization API <https://docs.pytest.org/en/stable/how-to/parametrize.html>`__.\nIt’s legible and flexible, but it doesn’t work with unittest test cases, which Django’s test tooling provides.\n\nSo, until the creation of this package, I was using `parameterized <https://pypi.org/project/parameterized/>`__ on my (Django) test cases.\nThis package supports parametrization across multiple test runners, though most of them are “legacy” by now.\n\nI created unittest-parametrize as a smaller alternative to *parameterized*, with these goals:\n\n1. Only support unittest test cases.\n   For other types of test, you can use pytest’s parametrization.\n\n2. Avoid any custom test runner support.\n   Modifying the class at definition time means that all test runners will see the tests the same.\n\n3. Use modern Python features like ``__init_subclass__``.\n\n4. Have full type hint coverage.\n   You shouldn’t find unittest-parametrize a blocker when adopting Mypy with strict mode on.\n\n5. Use the name “parametrize” rather than “parameterize”.\n   This unification of spelling with pytest should help reduce confusion around the extra “e”.\n\nThanks to the creators and maintainers of ddt, parameterized, and pytest for their hard work.\n\nWhy not subtests?\n-----------------\n\n|TestCase.subTest()|__ is unittest’s built-in “parametrization” solution.\nYou use it in a loop within a single test method:\n\n.. |TestCase.subTest()| replace:: ``TestCase.subTest()``\n__ https://docs.python.org/3/library/unittest.html#unittest.TestCase.subTest\n\n.. code-block:: python\n\n    from unittest import TestCase\n\n\n    class SquareTests(TestCase):\n        def test_square(self):\n            tests = [\n                (1, 1),\n                (2, 4),\n            ]\n            for x, expected in tests:\n                with self.subTest(x=x):\n                    self.assertEqual(x**2, expected)\n\nThis approach crams multiple actual tests into one test method, with several consequences:\n\n* If a subtest fails, it prevents the next subtests from running.\n  Thus, failures are harder to debug, since each test run can only give you partial information.\n\n* Subtests can leak state.\n  Without correct isolation, they may not test what they appear to.\n\n* Subtests cannot be reordered by tools that detect state leakage, like `pytest-randomly <https://github.com/pytest-dev/pytest-randomly>`__.\n\n* Subtests skew test timings, since the test method runs multiple tests.\n\n* Everything is indented two extra levels for the loop and context manager.\n\nParametrization avoids all these issues by creating individual test methods.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/unittest-parametrize",
    "keywords": "unittest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unittest-parametrize",
    "package_url": "https://pypi.org/project/unittest-parametrize/",
    "platform": null,
    "project_url": "https://pypi.org/project/unittest-parametrize/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/unittest-parametrize/blob/main/CHANGELOG.rst",
      "Homepage": "https://github.com/adamchainz/unittest-parametrize",
      "Mastodon": "https://fosstodon.org/@adamchainz",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/unittest-parametrize/1.0.0/",
    "requires_dist": [
      "typing-extensions ; python_version < \"3.10\""
    ],
    "requires_python": ">=3.7",
    "summary": "Parametrize tests within unittest TestCases.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17480880,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ebd545b6a0cc80035c9b0bac4e0b6ad4138b73a4cac4d9a754f1564f748cab0",
          "md5": "91687eccc8139cf34958976f69f095c3",
          "sha256": "b0fc88d4e8f812f862e38235f00b397441f5cc1f322d013d9c652a175874cfa4"
        },
        "downloads": -1,
        "filename": "unittest_parametrize-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91687eccc8139cf34958976f69f095c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7632,
        "upload_time": "2023-03-28T16:35:08",
        "upload_time_iso_8601": "2023-03-28T16:35:08.564365Z",
        "url": "https://files.pythonhosted.org/packages/3e/bd/545b6a0cc80035c9b0bac4e0b6ad4138b73a4cac4d9a754f1564f748cab0/unittest_parametrize-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1761c62e35a71796d84ff4be5d64a9796e7ff95015607078e32a0296812f65c1",
          "md5": "9188cb790d9f985624ec25b2539ea2f8",
          "sha256": "fdc3070c97065dc64d7882fd29eb456744bca726101b2984ed634cf23fce19de"
        },
        "downloads": -1,
        "filename": "unittest_parametrize-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9188cb790d9f985624ec25b2539ea2f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9378,
        "upload_time": "2023-03-28T16:35:10",
        "upload_time_iso_8601": "2023-03-28T16:35:10.992493Z",
        "url": "https://files.pythonhosted.org/packages/17/61/c62e35a71796d84ff4be5d64a9796e7ff95015607078e32a0296812f65c1/unittest_parametrize-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ebd545b6a0cc80035c9b0bac4e0b6ad4138b73a4cac4d9a754f1564f748cab0",
        "md5": "91687eccc8139cf34958976f69f095c3",
        "sha256": "b0fc88d4e8f812f862e38235f00b397441f5cc1f322d013d9c652a175874cfa4"
      },
      "downloads": -1,
      "filename": "unittest_parametrize-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "91687eccc8139cf34958976f69f095c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7632,
      "upload_time": "2023-03-28T16:35:08",
      "upload_time_iso_8601": "2023-03-28T16:35:08.564365Z",
      "url": "https://files.pythonhosted.org/packages/3e/bd/545b6a0cc80035c9b0bac4e0b6ad4138b73a4cac4d9a754f1564f748cab0/unittest_parametrize-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1761c62e35a71796d84ff4be5d64a9796e7ff95015607078e32a0296812f65c1",
        "md5": "9188cb790d9f985624ec25b2539ea2f8",
        "sha256": "fdc3070c97065dc64d7882fd29eb456744bca726101b2984ed634cf23fce19de"
      },
      "downloads": -1,
      "filename": "unittest_parametrize-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9188cb790d9f985624ec25b2539ea2f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9378,
      "upload_time": "2023-03-28T16:35:10",
      "upload_time_iso_8601": "2023-03-28T16:35:10.992493Z",
      "url": "https://files.pythonhosted.org/packages/17/61/c62e35a71796d84ff4be5d64a9796e7ff95015607078e32a0296812f65c1/unittest_parametrize-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}