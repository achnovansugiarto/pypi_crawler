{
  "info": {
    "author": "Paul Martin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Stripe Subscriptions\n\nThis library is designed to make it as easy as possible for python web developers to manage Stripe Subscriptions. It allows to create Stripe Checkouts and also contains functions to ease the creation of custom checkouts\n\nAlmost all functions accept a user argument which would typically be an instant of an object created using ORM. This ensures that a user cannot access data belonging to another user. An exception will be raised if a function is called with a user who does not own the object being retrieved, updated or deleted. List functions will only return objects belonging to the user.\n \nThe sister library `django_stripe` implements this logic in a django app. ```stripe-subscriptins``` is the non-django specific code from that library put here so it can be used as the base for implementations in other frameworks and ORMs.\n\n## Getting Started:\n\nTo install:\n\n```shell\npip install stripe-subscriptions\n```\n\nTo get started you must have a ```User``` object which implements the ```email``` and ```stripe_customer_id``` properties.\n\nFor example in Django (```email``` property already exists):\n\n```python\nfrom django.db.contrib.auth import User\nfrom django.db import models\n\n\nclass StripeUser(User):\n    stripe_customer_id = models.CharField(max_length=255)\n\n```\n\nIf you already have a field for storing a customer id or prefer a different fieldname, you can add a property:\n\n```python\nfrom django.db.contrib.auth import User\nfrom django.db import models\n\n\nclass StripeUser(User):\n    customer_id = models.CharField(max_length=255)\n\n    @property\n    def stripe_customer_id(self):\n        return self.customer_id\n```\n\n\n## Example Usage\n\nThe easiest way to integrate with Stripe is to create a checkout. First create a product and price in the Stripe Dashboard and copy the price_id and your api keys.\n\n```python\nimport stripe\nimport subscriptions\nfrom django.contrib.auth.models import User     # Replace with appropriate ORM import\n\nstripe.api_key = \"sk_test_.....\"\nprice_id = \"price_1JB9PtCz06et8VuzfLu1Z9bf\"\n\nuser = User.objects.get(id=1)   # Replace with your ORM logic for retrieving a user\n\nif not user.stripe_customer_id:\n    subscriptions.create_customer(user)\n    user.save()                 # Or however models can be saved in ORM\nsession = subscriptions.create_subscription_checkout(user, price_id)\nsession_id = session['id']\n```\n\nReturn the session_id to the user (such as through an API or HTML template) and insert the following Javascript to redirect to the Stripe checkout:\n\n```javascript\n<script src=\"https://js.stripe.com/v3/\"></script>\n<script>\n    var stripePublicKey = 'pk_test...';\n    var sessionId = '{{ sessionId }}';\n    \n    var stripe = Stripe(stripePublicKey);\n    stripe.redirectToCheckout({sessionId: sessionId})\n</script>\n````\nTo check if a user is subscribed to the product:\n\n```python\nimport stripe\nimport subscriptions\nfrom django.contrib.auth.models import User     # Replace with appropriate ORM import\n\nstripe.api_key = \"sk_test_.....\"\nproduct_id = \"prod_Jo3KY017h0SZ1x\"\n\nuser = User.objects.get(id=1)   # Replace with your ORM logic for retrieving a user\n\nif not user.stripe_customer_id:\n    subscriptions.create_customer(user)\n    user.save()                 # Or however models can be saved in ORM\n\nis_subscribed = subscriptions.is_subscribed(user, product_id=product_id)\n```\n## Function Reference\n\n### Manage Customer IDs\n\nFor more information see https://stripe.com/docs/api/customers\n```python\nfrom subscriptions import create_customer, delete_customer\n\ndef create_customer(user: UserProtocol, **kwargs) -> stripe.Customer:\n    \"\"\"\n    Creates a new customer over the stripe API using the given user's data. The customer id is set on the user object but not saved.\n    The customer id must be saved to the database after this function is called.\n    \"\"\"\n\ndef delete_customer(user: UserProtocol) -> stripe.Customer:\n    \"\"\"\n    Deletes a customer from Stripe. Sets the customer id on the user object to none but this is not saved.\n    The customer id must be saved to the database after this function is called, e.g. by calling user.save().\n    An exception will be raised if the user does already not have a customer id set.\n    \"\"\"\n\n```\n\n### Create Stripe Checkouts\n\n\nThese functions create Stripe Checkouts sessions.\n\nUse stripe.js to redirect to the given sessionId.\n\nSee here for more info:\nhttps://stripe.com/docs/payments/checkout\n\n\n```python\nfrom subscriptions import create_checkout, create_subscription_checkout, create_setup_checkout\n\ndef create_checkout(user: UserProtocol, mode: str, line_items: List[Dict[str, Any]] = None,\n                    **kwargs) -> stripe.checkout.Session:\n    \"\"\"\n    Creates a new Stripe checkout session for this user.\n    Recommended to call create_subscription_checkout or create_setup_checkout instead.\n    An exception will be raised if the user does already not have a customer id set.\n    \"\"\"\n\n\ndef create_subscription_checkout(user: UserProtocol, price_id: str, **kwargs) -> stripe.checkout.Session:\n    \"\"\"\n    Creates a new Stripe subscription checkout session for this user for the given price.\n    An exception will be raised if the user does already not have a customer id set.\n    \"\"\"\n\n\ndef create_setup_checkout(user: UserProtocol, subscription_id: str = None, **kwargs) -> stripe.checkout.Session:\n    \"\"\"\n    Creates a new Stripe setup checkout session for this user, allowing them to add a new payment method for future use.\n    An exception will be raised if the user does already not have a customer id set.\n    \"\"\"\n```\n\n### Manage subscriptions\n\n\nFor more info see: https://stripe.com/docs/api/subscriptions\n\n\n```python\nfrom subscriptions import list_subscriptions, list_active_subscriptions, cancel_subscription, cancel_subscription_for_product, update_default_payment_method_all_subscriptions, modify_subscription, create_subscription\n\ndef list_subscriptions(user: Optional[UserProtocol], **kwargs) -> List[stripe.Subscription]:\n    \"\"\"\n    List all subscriptions for a user. Filters can be applied with kwargs according to the Stripe API.\n    \"\"\"\n\ndef list_active_subscriptions(user: Optional[UserProtocol], **kwargs) -> List[stripe.Subscription]:\n    \"\"\"\n    List all active subscriptions for a user.\n    \"\"\"\n    \ndef cancel_subscription(user: UserProtocol, subscription_id: str) -> stripe.Subscription:\n    \"\"\"\n    Allow a user to cancel their subscription.\n    If a user attempts to cancel a subscription belonging to another customer, StripeWrongCustomer will be raised.\n    \"\"\"\n    \ndef cancel_subscription_for_product(user: UserProtocol, product_id: str) -> bool:\n    \"\"\"\n    Allow a user to cancel their subscription by the id of the product they are subscribed to, if such a subscription exists.\n    Returns True if the subscription exists for that user, otherwise False.\n    \"\"\"\n\ndef update_default_payment_method_all_subscriptions(user: UserProtocol, default_payment_method: str) -> stripe.Customer:\n    \"\"\"\n    Change the default payment method for the user and for all subscriptions belonging to that user.\n    \"\"\"\n    \n  \ndef modify_subscription(user: UserProtocol, subscription_id: str,\n                        set_as_default_payment_method: bool = False, **kwargs) -> stripe.Subscription:\n    \"\"\"\n    Modify a user's subscription\n    kwargs is the parameters to modify.\n    If payment_method is given in kwargs and set_as_default_payment_method is true, the default payment method is changed to that payment method for all subscriptions.\n    Raises StripeWrongCustomer is a user tries to modify a subscription belonging to another customer.\n    \"\"\"\n    \n    \ndef create_subscription(user: UserProtocol, price_id: str,\n                        set_as_default_payment_method: bool = False, **kwargs) -> stripe.Subscription:\n    \"\"\"\n    Create a new subscription. A payment method must already be created.\n    If set_as_default_payment_method is true, the given payment method will be set as the default for this customer.\n    kwargs is a list of parameters to provide to stripe.Subscription.create in the Stripe API.\n    \"\"\"\n```\n\n### Products & Prices\n\nFunctions for viewing products and prices and checking if a user is subscribed to them. They can be created on the Stripe dashboard.\n\n\nFor more info see:\nhttps://stripe.com/docs/billing/prices-guide\n\n\n\n```python\nfrom subscriptions import (list_products_prices_subscribed_to, is_subscribed_and_cancelled_time, is_subscribed, \n                           get_active_prices, get_subscription_prices, retrieve_price, get_active_products,\n                           get_subscription_products_and_prices, retrieve_product)\n\n\ndef list_products_prices_subscribed_to(user: UserProtocol, **kwargs) -> List[ProductSubscription]:\n    \"\"\"\n    Flat data for each active subscription to quickly check which products a user is subscribed to.\n    \"\"\"\n\ndef is_subscribed_and_cancelled_time(user: UserProtocol, product_id: Optional[str] = None,\n                                     price_id: Optional[str] = None, **kwargs) -> ProductIsSubscribed:\n    \"\"\"\n    Return first active subscription for a specific product or price or none to quickly check if a user is subscribed.\n    \"\"\"\n\ndef is_subscribed(user: UserProtocol, product_id: str = None, price_id: str = None) -> bool:\n    \"\"\"\n    Returns a simple true or false to check if a user subscribed to the given product or price.\n    \"\"\"\n\ndef get_active_prices(**kwargs) -> List[Price]:\n    \"\"\"\n    List all active prices\n        kwargs is a list of filters to provide to stripe.Price.list as in the Stripe API.\n    \"\"\"\n\ndef get_subscription_prices(user: Optional[UserProtocol] = None, **kwargs) -> List[PriceSubscription]:\n    \"\"\"\n    Makes multiple requests to Stripe API to return the list of active prices with subscription data for each one for the given user.\n        kwargs is a list of filters to provide to stripe.Price.list as in the Stripe API.\n    \"\"\"\n\n    \ndef retrieve_price(user: Optional[UserProtocol], price_id: str) -> PriceSubscription:\n    \"\"\"\n    Retrieve a single price with subscription info\n    \"\"\"\n\ndef get_active_products(**kwargs) -> List[Product]:\n    \"\"\"\n    Get a list of active products with subscription information for the given user.\n    kwargs is a list of filters to provide to stripe.Product.list as in Stripe API.\n    \"\"\"\n\ndef get_subscription_products_and_prices(user: Optional[UserProtocol] = None,\n                                         price_kwargs: Optional[Dict[str, Any]] = None,\n                                         **kwargs) -> List[ProductDetail]:\n    \"\"\"\n    Get a list of active products with their prices and subscription information included in the result.\n    kwargs is a list of filters product to stripe.Product.list.\n    price_kwargs is a list of filters provided to stripe.Price.list\n    \"\"\"\n\ndef retrieve_product(user: Optional[UserProtocol], product_id: str,\n                     price_kwargs: Optional[Dict[str, Any]] = None) -> ProductDetail:\n    \"\"\"\n    Retrieve a single product with prices and subscription information included in the result.\n    price_kwargs is a list of filters provided to stripe.Price.list\n    \"\"\"\n```\n\n### Setup Intents\n\nSetup Intents are the first step to creating a paying method which can later be used for paying for subscriptions.\n\nFor more information see:\nhttps://stripe.com/docs/api/setup_intents\n\n```python\nfrom subscriptions import create_setup_intent\n\ndef create_setup_intent(user: UserProtocol, payment_method_types: List[PaymentMethodType] = None,\n                        **kwargs) -> stripe.SetupIntent:\n    \"\"\"\n     Create a setup intent, the first step in adding a payment method which can later be used for paying subscriptions.\n     price_kwargs is a list of filters provided to stripe.SetupIntent.create\n\n     Raises an exception if the user does not have a customer id\n     \"\"\"\n```\n\n### Payment Methods\n\nFor more info on Payment Methods in Stripe see: https://stripe.com/docs/payments/payment-methods\n\n\n```python\nfrom subscriptions import list_payment_methods, detach_payment_method, detach_all_payment_methods\n\ndef list_payment_methods(user: Optional[UserProtocol], types: List[PaymentMethodType],\n                         **kwargs) -> Generator[stripe.PaymentMethod, None, None]:\n    \"\"\"\n    List all payment methods for a user.\n    Stripe only allows to retrieve payment methods for a single type at a time.\n    This functions gathers payment methods from multiple types by making parallel requests to the Stripe API.\n    kwargs is additional filters to pass to stripe.PaymentMethod.list\n    \"\"\"\n\ndef detach_payment_method(user: Optional[UserProtocol], payment_method_id: str) -> stripe.PaymentMethod:\n    \"\"\"\n    Detach a user's payment method.\n    It is needed to retrieve the payment method first to check the customer id.\n    If a customer attempts to detach an object belonging to another customer, StripeWrongCustomer exception is raised.\n    \"\"\"\n\ndef detach_all_payment_methods(user: Optional[UserProtocol], types: List[PaymentMethodType],\n                               **kwargs) -> List[stripe.PaymentMethod]:\n    \"\"\"\n    Detach all of a user's payment methods.\n    \"\"\"\n```\n\n\n### Generic Functions for Interacting with Stripe API\n\nThese functions mirror the retrieve, delete and modify methods of Stripe resources, but also check that the user owns the requested object. An exception will be raised otherwise. \n\n```python\nfrom subscriptions import retrieve, delete, modify\n\n\ndef retrieve(user: UserProtocol, obj_cls, obj_id: str, action=\"retrieve\") -> Mapping[str, Any]:\n    \"\"\"\n    Retrieve an object over Stripe API for the given obj_id and obj_cls.\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    If a customer attempts to retrieve an object belonging to another customer, StripeWrongCustomer exception is raised.\n    The action word if provided is included in StripeWrongCustomer exception if raised.\n    \"\"\"\n\ndef delete(user: UserProtocol, obj_cls, obj_id: str, action: str = \"delete\"):\n    \"\"\"\n    Delete an object over Stripe API with given obj_id for obj_cls.\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    It is needed to retrieve the obj first to check the customer id.\n    If a customer attempts to delete an object belonging to another customer, StripeWrongCustomer exception is raised.\n    The action word if provided is included in StripeWrongCustomer exception if raised.\n    \"\"\"\n\ndef modify(user: UserProtocol, obj_cls, obj_id: str, action: str = \"modify\",\n           **kwargs) -> Union[Mapping[str, Any], stripe.Subscription]:\n    \"\"\"\n    Modify an object over Stripe API with given obj_id for obj_cls.\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    It is needed to retrieve the obj first to check the customer id.\n    If a customer attempts to modify an object belonging to another customer, StripeWrongCustomer exception is raised.\n    kwargs are the parameters to be modified.\n    The action word if provided is included in StripeWrongCustomer exception if raised.\n    \"\"\"\n```\n\n\n## Advanced\n\n### Creating subscriptions in a custom checkout\n\nTo create a new subscription generally requires three steps:\n\n1) Create a setup intent server-side and return the ```client_secret``` to the client\n2) Use stripe.js (or equivalent for the client's platform) on the client to create the payment method with the ```client_secret```\n3) Create a subscription server side with the new payment method id and ```price_id``` to subscribe to.\n\n\n```python\nimport stripe\nimport subscriptions\nfrom django.contrib.auth.models import User     # Replace with appropriate ORM import\n\nstripe.api_key = \"sk_test_.....\"\nprice_id = \"price_1JB9PtCz06et8VuzfLu1Z9bf\"\n\nuser = User.objects.get(id=1)   # Replace with your ORM logic for retrieving a user\n\nif not user.stripe_customer_id:\n    subscriptions.create_customer(user)\n    user.save()                 # Or however models can be saved in ORM\n\nsetup_intent = subscriptions.create_setup_intent(user)\nreturn setup_intent['client_secret']\n\n```\nSupply the ```client_secret``` to the client either through API response or HTML template and create the payment method when the user submits their card details:\n\n\n```javascript\n<div id=\"card-element\"></div>\n<button id=\"subscribe-button\" type=\"submit\">Subscribe</button>\n\n<script src=\"https://js.stripe.com/v3/\"></script>\n<script>\n    var stripePublicKey = 'pk_test...';\n    var client_secret = '{{ client_secret }}';\n    var hidePostalCode = true;\n    \n    var stripe = Stripe(stripePublicKey);\n    const elements = stripe.elements();\n    const card = elements.create('card', {hidePostalCode: hidePostalCode});\n    card.mount('#card-element');\n    \n    document.querySelector('#subscribe-button').addEventListener(\"click\", () => {\n        stripe\n            .confirmCardSetup(client_secret, {\n                payment_method: {\n                    card: cardElement,\n                },\n            }).then(function (result) {\n                var paymentMethodId = paymentMethod['id'];\n                // Send request to create subscription to server with payment method\n            });\n    });\n    \n</script>\n````\n\nFor more information on using Stripe Elements to collect the card details see: https://stripe.com/docs/stripe-js\n\nNow, send the payment to the server (such as through a REST API post request) and create the subscription:\n\n```python\nimport stripe\nimport subscriptions\nfrom django.contrib.auth.models import User     # Replace with appropriate ORM import\n\nstripe.api_key = \"sk_test_.....\"\nprice_id = \"price_1JB9PtCz06et8VuzfLu1Z9bf\"\npayment_method_id = \"pm_1JiHZ7Cz06et8VuzwI1HftWk\"  # Retrieved from API\n\nuser = User.objects.get(id=1)   # Replace with your ORM logic for retrieving a user\n\nreturn subscriptions.create_subscription(user, price_id, default_payment_method=payment_method_id)\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/primal100/stripe-subscriptions",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stripe-subscriptions",
    "package_url": "https://pypi.org/project/stripe-subscriptions/",
    "platform": "",
    "project_url": "https://pypi.org/project/stripe-subscriptions/",
    "project_urls": {
      "Homepage": "https://github.com/primal100/stripe-subscriptions"
    },
    "release_url": "https://pypi.org/project/stripe-subscriptions/0.5.3/",
    "requires_dist": [
      "stripe",
      "typing-extensions (>=3.10.0.0) ; python_version < \"3.8\""
    ],
    "requires_python": "",
    "summary": "Easier management of subscriptions with Stripe",
    "version": "0.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11665425,
  "releases": {
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c8bf21ce0f78d9e1ff5e649969f8a37fb1d45c98c9c3ab82b15ca798179a215",
          "md5": "906dbdf1bd455e4d5c92dc808f7fa2a6",
          "sha256": "e4987eeb1dde61d358d682e169eed6d7d4062d982fca0438ee1dbbdf6c93c116"
        },
        "downloads": -1,
        "filename": "stripe_subscriptions-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "906dbdf1bd455e4d5c92dc808f7fa2a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13597,
        "upload_time": "2021-10-08T12:31:09",
        "upload_time_iso_8601": "2021-10-08T12:31:09.284883Z",
        "url": "https://files.pythonhosted.org/packages/0c/8b/f21ce0f78d9e1ff5e649969f8a37fb1d45c98c9c3ab82b15ca798179a215/stripe_subscriptions-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c8bf21ce0f78d9e1ff5e649969f8a37fb1d45c98c9c3ab82b15ca798179a215",
        "md5": "906dbdf1bd455e4d5c92dc808f7fa2a6",
        "sha256": "e4987eeb1dde61d358d682e169eed6d7d4062d982fca0438ee1dbbdf6c93c116"
      },
      "downloads": -1,
      "filename": "stripe_subscriptions-0.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "906dbdf1bd455e4d5c92dc808f7fa2a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13597,
      "upload_time": "2021-10-08T12:31:09",
      "upload_time_iso_8601": "2021-10-08T12:31:09.284883Z",
      "url": "https://files.pythonhosted.org/packages/0c/8b/f21ce0f78d9e1ff5e649969f8a37fb1d45c98c9c3ab82b15ca798179a215/stripe_subscriptions-0.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}