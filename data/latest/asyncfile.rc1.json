{
  "info": {
    "author": "Ryan Vink",
    "author_email": "ryantvink@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Utilities"
    ],
    "description": "asyncfile\n===========\n\nA simple and up-to-date module that enables compatibility with asyncio and fileIO operations in Python.\n\nPurpose\n--------\n\nOperating on files in Python is a synchronous activity. When normally operating on file this does not\ncause any problems. However, when files are tampered with in code that also runs the asyncio event\nloop, this can cause the `asyncio <https://docs.python.org/3/library/asyncio.html>`_ `event loop <https://docs.python.org/3/library/asyncio-eventloop.html>`_ to block. This negatively effects the program's performance\nand should therefore be avoided. The ``asyncfile`` module avoids this problem by running the file operations in a separate\nthread so that the event loop is not as harshly affected.\n\nFeatures\n----------\n\n* *async* and *await* syntax is used\n* There is almost complete coverage of the `io <https://docs.python.org/3/library/io.html#module-io>`_ module's classes\n* The syntax and utility is similar to the built-in Python `open <https://docs.python.org/3/library/functions.html#open>`_ function and the built-in `io <https://docs.python.org/3/library/io.html#module-io>`_ module\n* Lightweight in speed and memory\n\nInstallation\n-----------------\n\nInstalling ``asyncfile`` should be done through `PIP <https://pypi.org/project/pip/>`_:\n\n.. code:: sh\n\n    pip install asyncfile\n\n\nOpen Examples\n--------------\n\nIf you were to have regular, blocking code, you can easily transition it to ``asyncfile``\n\n**Blocking:**\n\n.. code:: py\n\n    with open('fake_file', 'r') as f:\n        print(f.read())\n\n**Non-Blocking:**\n\n.. code:: py\n\n    import asyncfile\n    import asyncio\n\n    custom_loop = asyncio.get_event_loop() # You can pass in your own loop\n\n    async def open_file():\n        async with asyncfile.open('fake_file', 'r', loop=custom_loop) as f:\n            print(await f.read())\n\n    custom_loop.run_until_complete(open_file())\n\nThese both produce the same results, but one is better suited for asyncio-based code.\n\nIO Examples\n--------------\n\n**Blocking:**\n\n.. code:: py\n\n    import io\n\n    wrap = io.FileIO('fake_file.txt', 'wb')\n\n    buff = io.BufferedReader(wrap)\n    buff.write(b'Random bytes')\n    print(buff.fileno())\n    print(buff.raw)\n    print(buff.readable())\n    buff.close()\n\n**Non-Blocking:**\n\n.. code:: py\n\n    import asyncfile\n    import asyncio\n\n    async def no_block(file_path):\n        wrap = asyncfile.AsyncFileIO(file_path, 'rb')\n        buff = asyncfile.AsyncBufferedReader(wrap)\n        await buff.read(-1)\n        print(await buff.fileno())\n        print(buff.raw)\n        print(await buff.readable())\n        await buff.close()\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(no_block('fake_file.txt'))\n\n**Blocking:**\n\n.. code:: py\n\n    import io\n\n    for i in io.FileIO('fake_file.txt'):\n        print(i)\n\n**Non-Blocking:**\n\n.. code:: py\n\n    import asyncfile\n    import asyncio\n\n    async def async_iteration():\n        async for i in asyncfile.AsyncFileIO('fake_file.txt'):\n            print(i)\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/try-fail1/asyncfile",
    "keywords": "python,asyncio,fileio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncfile",
    "package_url": "https://pypi.org/project/asyncfile/",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncfile/",
    "project_urls": {
      "Homepage": "https://github.com/try-fail1/asyncfile"
    },
    "release_url": "https://pypi.org/project/asyncfile/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "An asynchronous file handling module.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7910292,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "532927c9d7850c104126486de461a9fc8ca84db6bc11bb78c5383d983c7b640f",
          "md5": "95309c793a9888726302be390405b173",
          "sha256": "96a21047d9c522418441da270843e50b5eee5a5c32982cbd24e476ba503a9e7f"
        },
        "downloads": -1,
        "filename": "asyncfile-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95309c793a9888726302be390405b173",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 7159,
        "upload_time": "2020-08-07T20:29:27",
        "upload_time_iso_8601": "2020-08-07T20:29:27.018999Z",
        "url": "https://files.pythonhosted.org/packages/53/29/27c9d7850c104126486de461a9fc8ca84db6bc11bb78c5383d983c7b640f/asyncfile-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaf8967fd7ded17a7514544ffbd52ac771695c34544cd53abf5d014423029478",
          "md5": "8a8cbc04833a89c402248765413a97c1",
          "sha256": "bbf9974703c837a0ffd09905f455854958de32284dbafa98c2b7f7e577061ebf"
        },
        "downloads": -1,
        "filename": "asyncfile-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a8cbc04833a89c402248765413a97c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 7088,
        "upload_time": "2020-08-07T20:29:29",
        "upload_time_iso_8601": "2020-08-07T20:29:29.902779Z",
        "url": "https://files.pythonhosted.org/packages/aa/f8/967fd7ded17a7514544ffbd52ac771695c34544cd53abf5d014423029478/asyncfile-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "532927c9d7850c104126486de461a9fc8ca84db6bc11bb78c5383d983c7b640f",
        "md5": "95309c793a9888726302be390405b173",
        "sha256": "96a21047d9c522418441da270843e50b5eee5a5c32982cbd24e476ba503a9e7f"
      },
      "downloads": -1,
      "filename": "asyncfile-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95309c793a9888726302be390405b173",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 7159,
      "upload_time": "2020-08-07T20:29:27",
      "upload_time_iso_8601": "2020-08-07T20:29:27.018999Z",
      "url": "https://files.pythonhosted.org/packages/53/29/27c9d7850c104126486de461a9fc8ca84db6bc11bb78c5383d983c7b640f/asyncfile-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aaf8967fd7ded17a7514544ffbd52ac771695c34544cd53abf5d014423029478",
        "md5": "8a8cbc04833a89c402248765413a97c1",
        "sha256": "bbf9974703c837a0ffd09905f455854958de32284dbafa98c2b7f7e577061ebf"
      },
      "downloads": -1,
      "filename": "asyncfile-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8a8cbc04833a89c402248765413a97c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 7088,
      "upload_time": "2020-08-07T20:29:29",
      "upload_time_iso_8601": "2020-08-07T20:29:29.902779Z",
      "url": "https://files.pythonhosted.org/packages/aa/f8/967fd7ded17a7514544ffbd52ac771695c34544cd53abf5d014423029478/asyncfile-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}