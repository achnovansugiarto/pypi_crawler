{
  "info": {
    "author": "Mike Gazes",
    "author_email": "sustainablelab@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: pygame",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "`pygstuff` is a Python package to simplify developing with pygame.\n\nInstall:\n\n```bash\n$ pip install pygstuff\n```\n\nImport `pygstuff` as `pygs` (pronounced \"pigs\"):\n\n```python\n>>> import pygstuff as pygs\n```\n\n# `pygstuff` is a pygame wrapper under development\n`pygame` is a great low-level tool for interactive applications.\nLow-level means lots of freedom, but lots of boiler-plate code.\n\n`pygstuff` makes pygame applications a little bit higher-level. It is\nwhere my pygame code goes when I get tired of repeating it.\n\nI am **very actively** adding to `pygstuff`. Check for changes:\n\n- if cloned, do `git remote update`\n- or if installed, update to the latest with `pip install --upgrade pygstuff`\n\n# Platform compatibility\nDeveloped on Windows using Python3.8 and `pygame 1.9.6`. Tested on Linux Mint 19.3.\n\nWindows runs pygame with no problem, but Linux Mint and Ubuntu\ndistributions are usually missing SDL build dependencies and are\ntherefore unable to run pygame out of the box. There are two\nsteps to fix this.\n\n## Install SDL dependencies on Linux\n\n### Configure the source list\n\nFirst, if you have never built anything from source on your Linux\nsystem, you need to configure your package manager source list\nwith `deb-src` URLs.\n\nThe `sources.list` file usually has both `deb` URLs and `deb-src`\nURLs, but the `deb-src` ones are commented out. The package\nmanager needs these sources for installing build dependencies.\n\nOpen `/etc/apt/sources.list` and find the lines starting\nwith `deb-src` that are commented out. Uncomment these lines.\n\n*sources.list is a protected file, so you will need to prefix\nyour text editor command with `sudo`.*\n\nFor example, my `/etc/apt/sources.list` has this line:\n\n```list\n# deb-src http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages\n```\n\nI remove the comment:\n\n```list\ndeb-src http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages\n```\n\n### Update the package manager with the new sources\n\nNow do `apt update` or `apt-get update` to update the newly\nconfigured sources.\n\n```bash\nsudo apt update\n```\n\n### Install SDL dependencies\n\nNow install the SDL build dependencies:\n\n```bash\nsudo apt-get build-dep python-pygame\n```\n\nNote this does not install the python-pygame package, but\ninstalls the dependencies for that package, which is exactly\nwhat's needed to `pip install pygame`.\n\n### Build from source\n\nUnrelated to using `pygame` or `pygstuff`, your Debian system is\nnow empowered to build other projects from source too:\n\n```bash\nsudo apt-get build-dep vim # powerful text editor\nsudo apt-get build-dep ardour # powerful audio recorder/editor\n```\n\nThis only installs the necessary build dependencies. To actually\ninstall Vim or Ardour, clone the official repository and follow\nthe instructions to run the configure and build scripts.\n\n# Installation\n\n```bash\n$ pip install pygstuff\n```\n\nThis installs the `wheel` ([built\ndistribution](https://packaging.python.org/glossary/#term-built-distribution)).\n\n`pygstuff` requires `pygame`. If `pygame` is not installed, `pip\ninstall pygstuff` takes care of installing `pygame` as well. If\nthe installation fails on Linux because of missing SDL\ndependencies, see the previous section.\n\nSee [AltInstallallation.md](AltInstallation.md) for developer installation\n('--editable') or simply editing PYTHONPATH (no installation).\n\n# Quick example script using `pygstuff`\n\nThis example opens a window and draws a line. Quit by pressing\n`q` or by clicking on the usual Window close button to quit.\n\n```python\n#!python.exe\n# -*- coding: utf-8 -*-\n'''Draw a line with pygame.'''\nimport pygame\nimport pygstuff as pygs\n\nif __name__ == '__main__':\n    rgb = pygs.RGB()\n    win = pygs.Window()\n    win.open_window(1200,600)\n    print(f\"Display window size: {win.width}x{win.height}\")\n    clock = pygs.Clock(framerate=50)\n\n    '''game loop'''\n    quit = False\n    while not quit:\n        clock.tick()\n\n        '''--- EVENTS ---'''\n        for event in pygame.event.get():\n            kp = pygame.key.get_pressed()\n            km = pygame.key.get_mods()\n            quit = pygs.user.quit(event, kp, km)\n\n        '''--- UPDATE SCREEN ---'''\n        win.surface.fill(rgb.blackestgravel)\n        pygame.draw.aalines(\n            win.surface,\n            rgb.dress,\n            False, # if True, connect first and last points\n            [(100,100), (200,200), (200,300), (500,300)]\n            )\n\n        # Flip to new surface drawing\n        pygame.display.flip()\n```\n\n# Libraries\n\n## pkg window: Class Window\n\nWraps `pygame.display.set_mode()`, pulling several pygame calls\ninto two methods: `__init__` and `open`.\n\nThe application only makes one instance of Window. This Window\nsingleton holds:\n\n- the top-level **`pygame` surface** (for drawing everything on)\n- the *width* and *height* of the main game window\n\n### Usage for Window\n\nInstantiate a Window:\n\n```python\nwin = pygs.Window()\n```\n\n- initializes pygame\n- sets window properties:\n    - location\n    - caption\n    - icon\n\nOpen the Window:\n\n```python\nwin.open()\n```\n\n- sets the window size `win.width` and `win.height`\n- opens the main game window `win.surface` for drawing to\n- the window closes when the application ends\n    - this is just pygame's out-of-the-box behavior for closing\n      the game window\n\n## pkg clock: Class Clock\n\nThis is a very simple wrapper around `pygame.time.Clock()`. All\nit does is avoid repeating the framerate value.\n\n### Usage for Clock\nSet the framerate when Clock() is instantiated:\n\n```python\nclock = pygs.Clock(framerate=60)\n```\n\nThen in the game loop, tick the `clock`:\n\n```python\nclock.tick()\n```\n\n## pkg colors\nColor is a distraction when I first start development on\nan application. I want nice contrast that is also easy on my eyes\nand is good enough if I never bother changing it.\n\nThis library gives me Steve Losh's Badwolf scheme in RGB and HEX\nformat. This is my default scheme for Vim, so it is a natural\ndefault scheme for my applications. It is just what I am used to\nlooking at. I encourage Vim users to do something similar with\ntheir favorite color schemes.\n\n### Usage for colors namedtuple RGB\nPygame uses RGB. Instantiate an `rgb` version of the Badwolf\npalette:\n\n```python\nrgb = pygs.RGB()\n```\n\nUse one of the gravels as a background:\n\n```python\nwin.surface.fill(rgb.blackestgravel)\n```\n\nDraw a tardis-colored plot (reminds me of the C64 blue):\n\n```python\npygame.draw.aalines(\n    win.surface,\n    rgb.tardis,\n    False, # if True, connect first and last points\n    meaningful_data # XY plot data [(x0,y0), ... (xn,yn)]\n    )\n```\n\nThe Badwolf scheme is a small set of colors with easy-to-remember\nnames:\n\n- the gravels:\n    - wide range of brownish-greys from almost white to almost\n      black\n    - good for background fills and background line work of\n      varying emphasis: grid lines, box borders, text\n    - e.g., if the background is `blackestgravel`, then:\n        - a non-interactive text title is just `gravel`\n        - interactive text is `darkgravel` to indicate disabled\n          or out-of-focus\n        - text is `brightgravel` or a highlight color to indicate\n          it is in-focus or it it just became active\n- highlight colors:\n    - tardis, taffy, saltwatertaffy, dalespale, orange, lime,\n      dress\n    - I usually have two or three of these in an application,\n      e.g.:\n    - a tardis command line\n    - a saltwatertaffy plot\n\nAnd, of course, there is simple black and white.\n\nBlack (0, 0, 0) is `coal`:\n\n```python\nrgb.coal\n```\n\nWhite (255, 255, 255) is `snow`:\n\n```python\nrgb.snow\n```\n\n## pkg plot\n\n`plot` handles:\n\n- reading data from file\n- scaling the data values for fitting the plot on screen\n\nEither the application generates 2d data to plot, or there is a\nfile with 2d data. Either way, there are x and y values for\nplotting.\n\n- x values are stored as a list of floating point values\n- y values are stored as a list of floating point values\n\nRight now it's up to the application to flip the data as needed,\ndealing with the pygame convention that y=0 is the top line of\nthe window and y increases moving towards the bottom of the\nwindow.\n\nLike `user`, `plot` is a work in progress. Right now, `plot` is\nonly handling conversions from the native data to the window\npixel values, scaling data to fit in the plot-window size and\nrounding values to integers.\n\nEventually `plot` will include commands for drawing the plot,\nmanaging multiple plot lines, changing plot styles (colors,\nline-thickness, dot-size, line on/off, dot on/off), and typical\nuser interaction such as changing the plot axes and zooming.\n\n## pkg user\n\nPygame user interaction is detected via key-presses and events.\nLibrary `user` is a collection of functions that check for common\nuser interactions and return a Boolean.\n\n### About pygame events, key presses, and key modifications\nTypical pygame applications check for user interaction on each\niteration of the game loop:\n\n```python\nfor event in pygame.event.get():\n    kp = pygame.key.get_pressed()\n    km = pygame.key.get_mods()\n```\n\nThis stores user interaction in three variables:\n\n- events\n- key presses (like a letter or a number)\n- key modifications (like shift or control)\n\nEvery function in `pygs.user` takes all three of these variables. I\npass all three to simplify the interface. I don't want to bother\nthinking about out which ones to pass.\n\n### typical example: quit\nFor example, every application needs a way for the user to quit.\nThe game loop loops until `quit` is True, and every iteration\nchecks if the user quit. The value of `quit` is updated by\ncalling `pygs.user.quit()`:\n\n```python\nquit = pygs.user.quit(event, kp, km)\n```\n\nIn this case, all three variables are actually used:\n\n- clicking the Window's red X is an event\n- ctrl-q is a keyboard shortcut requiring `kp` for detecting `q` and `km` for detecting if `ctrl` was held down\n\n### More about pygame events\nEvents are the catch-all for everything else:\n\n- some events are defined by pygame, such as JOYBUTTONDOWN and\n  JOYAXISMOTION\n- events are also defined by the developer, e.g., a text-entry\n  object might trigger an event when the user presses enter or\n  when the users selects text with the mouse\n\n## Future packages\n\n### Future goals for pkg user\nThere is a lot of boilerplate in detecting specific key-presses\nand events.\n\nThe `user` library is my attempt to simplify this with a\nhigher-level view asking \"what did the user do?\" in the form of\nfunctions that return either True or False.\n\nThere are many high-level views. This library just represents the\nstuff I find most useful.\n\nI intent to redo this library to enable:\n\n- customization in the application code\n- use of user-specific keyboard shortcuts, like a `.rc` file\n\nAs of now, the library is a mixture of high-level user\ninteraction, such as pygs.user.quit(), and low-level interaction\nsuch as checking for specific key presses. I use these when the\ninterpretation of user-intent is application specific. For\nexample, this returns True if the user presses capital x:\n\n```python\npygs.user.pressed_X(event, key_pressed, key_mods)\n```\n\n\n### new pkg lines\n\nThe `pygame` line drawing interfaces specifies line segments with\na start x,y and a stop x,y.\n\nI'm working on a `lines` library that provides a higher-level\ninterface for working with lines:\n\n- `line`:\n    - specify a point (x,y) the line passes through\n    - specify the slope\n\nThe library converts lines to the visible line segment that fills\nthe game window.\n\nBuilding on this `line` interface, `lines` provides a `Tiles`\nclass.\n\nInstantiate `Tiles` to generate a grid of parallelograms that\ntile a portion of the game window. This started out of a need to\ndraw grids for axonometric (isometric) projection. With the right\nparameter values, this simplifies to a rectangular grid for\nplotting 2d data.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sustainablelab/pygstuff",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygstuff",
    "package_url": "https://pypi.org/project/pygstuff/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/pygstuff/",
    "project_urls": {
      "Homepage": "https://github.com/sustainablelab/pygstuff"
    },
    "release_url": "https://pypi.org/project/pygstuff/0.0.3/",
    "requires_dist": [
      "pygame"
    ],
    "requires_python": ">=3.7",
    "summary": "PYGame Stuff for writing pygame applications",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8481511,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8a03555adc9f6194b988b28d8dfabdd5b8950523b578d146add27f0cc86ee3",
          "md5": "4335c0cb03b969f0b7b4b82cbc3d47f7",
          "sha256": "3ff280b9b0f157975666e7ae128ed4182be17815a883c7eb82f14d4e2ab2b5ed"
        },
        "downloads": -1,
        "filename": "pygstuff-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4335c0cb03b969f0b7b4b82cbc3d47f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12277,
        "upload_time": "2020-07-03T17:00:30",
        "upload_time_iso_8601": "2020-07-03T17:00:30.347462Z",
        "url": "https://files.pythonhosted.org/packages/bb/8a/03555adc9f6194b988b28d8dfabdd5b8950523b578d146add27f0cc86ee3/pygstuff-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77912a7ef857ff5094675f3591e69dcfb0b1024e17631fcc21976a4a2def4a3d",
          "md5": "c599157dd9ed432879f4795ca98501cb",
          "sha256": "e7af9a15e8123b52cf43728ba39251241137a45f7e6622e82fd75cb656dadcf0"
        },
        "downloads": -1,
        "filename": "pygstuff-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c599157dd9ed432879f4795ca98501cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17887,
        "upload_time": "2020-07-03T17:00:32",
        "upload_time_iso_8601": "2020-07-03T17:00:32.596228Z",
        "url": "https://files.pythonhosted.org/packages/77/91/2a7ef857ff5094675f3591e69dcfb0b1024e17631fcc21976a4a2def4a3d/pygstuff-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "453276366efb00a4dc1f9fe49922e5ef9a350ebd208c6b192bb6ee390cf8214f",
          "md5": "b9a97eb75c038ba8ab93679a6993294a",
          "sha256": "08f1206d7378a69624b57aa167fd912ca1d6b0775f404b744fa6fe278efc62d8"
        },
        "downloads": -1,
        "filename": "pygstuff-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9a97eb75c038ba8ab93679a6993294a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12311,
        "upload_time": "2020-08-15T19:13:21",
        "upload_time_iso_8601": "2020-08-15T19:13:21.098942Z",
        "url": "https://files.pythonhosted.org/packages/45/32/76366efb00a4dc1f9fe49922e5ef9a350ebd208c6b192bb6ee390cf8214f/pygstuff-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd31bae7ca5165ea2af2eb83d0975ac5452378ea6bed86ee79a85f0302186ac6",
          "md5": "50e397768e78a84aecad205c4d2cb37c",
          "sha256": "10175275757f620cbc39a6f435a87984382857158a2edcd9580a866c53644de3"
        },
        "downloads": -1,
        "filename": "pygstuff-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "50e397768e78a84aecad205c4d2cb37c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17860,
        "upload_time": "2020-08-15T19:13:22",
        "upload_time_iso_8601": "2020-08-15T19:13:22.128684Z",
        "url": "https://files.pythonhosted.org/packages/fd/31/bae7ca5165ea2af2eb83d0975ac5452378ea6bed86ee79a85f0302186ac6/pygstuff-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "311556fa49544cef5ead40ab9d823c23703968eaf90daf6c3f1e4622f2b654c0",
          "md5": "2a08682d76dea477a31ec1f07ae93f5d",
          "sha256": "d594c21cd6581eb03ea7d6556c12eefd14214bb2428f7998f1f20b42ce0b2d61"
        },
        "downloads": -1,
        "filename": "pygstuff-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a08682d76dea477a31ec1f07ae93f5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19023,
        "upload_time": "2020-10-23T05:02:08",
        "upload_time_iso_8601": "2020-10-23T05:02:08.588217Z",
        "url": "https://files.pythonhosted.org/packages/31/15/56fa49544cef5ead40ab9d823c23703968eaf90daf6c3f1e4622f2b654c0/pygstuff-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc733a4d66d5d6ff9333bdd94b3fa0627fad9bb02aa0c2ef9978498497bfacd3",
          "md5": "3f9e998c5c5a4646412d64cef6fc204b",
          "sha256": "52f3a194936420656347cf380e57a180789256f3ffea576991e91570815fcc11"
        },
        "downloads": -1,
        "filename": "pygstuff-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3f9e998c5c5a4646412d64cef6fc204b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24950,
        "upload_time": "2020-10-23T05:02:09",
        "upload_time_iso_8601": "2020-10-23T05:02:09.776462Z",
        "url": "https://files.pythonhosted.org/packages/fc/73/3a4d66d5d6ff9333bdd94b3fa0627fad9bb02aa0c2ef9978498497bfacd3/pygstuff-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "311556fa49544cef5ead40ab9d823c23703968eaf90daf6c3f1e4622f2b654c0",
        "md5": "2a08682d76dea477a31ec1f07ae93f5d",
        "sha256": "d594c21cd6581eb03ea7d6556c12eefd14214bb2428f7998f1f20b42ce0b2d61"
      },
      "downloads": -1,
      "filename": "pygstuff-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a08682d76dea477a31ec1f07ae93f5d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19023,
      "upload_time": "2020-10-23T05:02:08",
      "upload_time_iso_8601": "2020-10-23T05:02:08.588217Z",
      "url": "https://files.pythonhosted.org/packages/31/15/56fa49544cef5ead40ab9d823c23703968eaf90daf6c3f1e4622f2b654c0/pygstuff-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc733a4d66d5d6ff9333bdd94b3fa0627fad9bb02aa0c2ef9978498497bfacd3",
        "md5": "3f9e998c5c5a4646412d64cef6fc204b",
        "sha256": "52f3a194936420656347cf380e57a180789256f3ffea576991e91570815fcc11"
      },
      "downloads": -1,
      "filename": "pygstuff-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3f9e998c5c5a4646412d64cef6fc204b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24950,
      "upload_time": "2020-10-23T05:02:09",
      "upload_time_iso_8601": "2020-10-23T05:02:09.776462Z",
      "url": "https://files.pythonhosted.org/packages/fc/73/3a4d66d5d6ff9333bdd94b3fa0627fad9bb02aa0c2ef9978498497bfacd3/pygstuff-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}