{
  "info": {
    "author": "Yongping Guo",
    "author_email": "guoyoooping@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. meta::\n   :description: gnuplot plotting backend for python.\n   :keywords: gnuplot, py-gnuplot, pandas, python, plot\n\nGnuplot is a portable command-line driven graphing utility for many\nplatforms. To leverage the powful gnuplot to plot beautiful image in\nefficicent way in python, we port gnuplot to python. Let's see an example\nat first:\n\n..\n    cmd2img:: python3\n    :image: simple.1.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    g = gnuplot.Gnuplot(terminal = 'pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n                        output = '\"simple.1.png\"')\n    g.plot('[-10:10] sin(x)',\n           'atan(x)',\n           'cos(atan(x))',\n           key = 'fixed left top vertical Right noreverse enhanced autotitle box lt black linewidth 1.000 dashtype solid',\n           style = 'increment default',\n           samples = '50, 50',\n           title = '\"Simple Plots\" font \",20\" norotate')\n\nFrom the example we can see, we plot the function with plot() function,\nwith all the options as the function parameters. It's easy to understand\nand comply with both gnuplot and python's grammer. The generated image is as\nbelow:\n\n.. figure:: http://gnuplot.sourceforge.net/demo/simple.1.png \n   :width: 350\n\n   figure 1. pygnuplot demo 1: simple function\n\nLet's see the detail in the below:\n\n.. contents:: [Contents]\n   :depth: 3\n\n1. Introduction and examples list\n===================================\n\nAs we know Gnuplot is a portable and powerful command-line driven graphing\nutility for many platforms. To leverage the power of Gnuplot, We develop\nthe py-gnuplot in a easy understand way.\n\n**py-python only support python3** since the function dictionary paramaters in\npython2 is not in order.\n\nThis package has an object-oriented design as well as direct function call to\nallows the user flexibility to set plot options and to run multiple gnuplot\nsessions simultaneously.\n\nWe will introduce it in detail in the following chapter and here list the\nexaples used in this article as below:\n\n.. _Table1:\n\n.. list-table:: Table1 : A demostration of pygnuplot.gnuplot script\n   :widths: 15, 20, 20, 70\n   :header-rows: 1\n\n   * - gnuplot demo script\n     - object-oriented interface script\n     - direct function call script\n     - All the script produce the same image\n   * - `simple.dem`_\n     - simple2.py_\n     - simple3.py_\n     - |simple.1.png|\n   * - `surface2.dem`_\n     - surface1.py_\n     - surface2.py_\n     - |surface2.9.png|\n   * - `iterate.dem`_\n     - whale1.py_\n     - whale2.py_\n     - |whale.png|\n\n.. _Table2:\n\n.. list-table:: Table 2: A demostration of plot() and plot_data()\n   :widths: 15, 20, 20, 70\n   :header-rows: 1\n\n   * - gnuplot demo script\n     - object-oriented interface script\n     - direct function call script\n     - All the script produce the same image\n   * - `histo.1.gnu`_\n     - histo.1.py_\n     - histo.2.py_\n     - |histograms.1.png|\n   * - `finance.dem`_\n     - finance1.py_\n     - finance1.py_\n     - |finance.13.png|\n\n.. list-table:: Table 3: Examples porting from Matplotlib\n   :widths: 35, 35, 35, 35\n   :header-rows: 0\n\n   * - `3.2.1 Stacked bar chart`_ |sphx_glr_bar_stacked_001.png|\n     - `3.2.2 Grouped bar chart with labels`_ |sphx_glr_barchart_001.png|\n     - `3.2.3 Multiplot Axes Demo`_ |sphx_glr_axes_demo_001.png|\n     - `3.2.4 control view and zoom`_ |sphx_glr_axes_margins_001.png|\n   * - `3.2.5 Rendering math equation using TeX`_ |sphx_glr_tex_demo_001.png|\n     - `3.2.6 Basic pie chart`_ |sphx_glr_pie_features_0011.png|\n     - \n     - \n\n.. _simple.dem: http://gnuplot.sourceforge.net/demo/simple.1.gnu\n.. _surface2.dem: http://gnuplot.sourceforge.net/demo/surface2.9.gnu\n.. _histo.1.gnu: http://gnuplot.sourceforge.net/demo/histograms.1.gnu\n.. _iterate.dem: http://gnuplot.sourceforge.net/demo/iterate.2.gnu\n.. _finance.dem: http://gnuplot.sourceforge.net/demo/finance.13.gnu\n.. |simple.1.png| image:: http://gnuplot.sourceforge.net/demo/simple.1.png\n   :width: 180\n.. |surface2.9.png| image:: http://gnuplot.sourceforge.net/demo/surface2.9.png\n   :width: 180\n.. |finance.13.png| image:: http://gnuplot.sourceforge.net/demo/finance.13.png\n   :width: 180\n.. |iterate.2.png| image:: http://gnuplot.sourceforge.net/demo/iterate.2.png\n   :width: 180\n.. |whale.png| image:: http://ayapin-film.sakura.ne.jp/Gnuplot/Pm3d/Part1/whale.png\n   :width: 180\n.. |histograms.1.png| image:: http://gnuplot.sourceforge.net/demo/histograms.1.png\n   :width: 180\n.. |sphx_glr_bar_stacked_001.png| image:: https://matplotlib.org/_images/sphx_glr_bar_stacked_001.png\n   :width: 180\n.. |sphx_glr_barchart_001.png| image:: https://matplotlib.org/_images/sphx_glr_barchart_001.png\n   :width: 180\n.. |sphx_glr_axes_demo_001.png| image:: https://matplotlib.org/_images/sphx_glr_axes_demo_001.png\n   :width: 180\n.. |sphx_glr_pie_features_0011.png| image:: https://matplotlib.org/_images/sphx_glr_pie_features_0011.png\n   :width: 180\n.. |sphx_glr_tex_demo_001.png| image:: https://matplotlib.org/_images/sphx_glr_tex_demo_001.png\n   :width: 180\n.. |sphx_glr_axes_margins_001.png| image:: https://matplotlib.org/_images/sphx_glr_axes_margins_001.png\n   :width: 180\n\n\n2. Plot elements in py-gnuplot\n=================================\n\nAs we know, gnuplot use commands to plot all kinds of image, we port almost\nall the useful commands as functions in py-gnuplot.\n\nIn `2.1 member functions port from Gnuplot`_ we introduce the member\nfunctions that we can plot all what Gnuplot could do, The limitation is\nit's not so easy to plot the python generated data with the those existing\ncommand.\n\nTo plot the data generated in python, we develop additional functions as\nbelow, ::\n\n    plot_data(self, data, *items, **kwargs):\n    splot_data(self, data, *items, **kwargs)\n\nthey are almost the same as the original plot()/splot(), the difference is\nwe pass the data as the first parameter, you don't give the filename in the\nplot command, see detail in `2.2 new developed member functions for python\ngenerated data`_ .\n\nSometime we only need simple plot and don't want to allocate a Gnuplot\ninstance, we develop the easy way to plot: `2.3 new developed global\nclass-less function call`_ and you can plot the image in a easy way with\nglobal class-less function call.\n\n2.1 member functions port from Gnuplot\n---------------------------------------\n\nThe principle is if you can write Gnuplot script, you can write py-gnuplot.\nThere is 1-1 mapping between almost all Gnuplot command and python\nfunction;\n\n2.1.1 The constructor\n+++++++++++++++++++++\n\n.. code-block:: python\n\n    def __init__(self, *args, log = False, **kwargs):\n        '''\n        *args: The flag parameter in gnuplot\n        log: If print the gnuplot log\n        **kwargs: the flag that need to be set. You can also set them in the set() function.\n        '''\n\nWhen create the Gnuplot instance, you can pass some parameter to it, you\ncan also set them when you call set() or plot(), they are the same.\n\nThe \"log\" parameter is a new added flag to indicate if we print the gnuplot\nexecution log when run. For example:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    #http://ayapin-film.sakura.ne.jp/Gnuplot/Pm3d/Part1/whale.html\n    g = gnuplot.Gnuplot(log = True,\n            term = 'pngcairo size 480,480',\n            out = '\"whale.png\"',\n            style = 'line 100 lw 0.1 lc \"black\"',\n            pm3d = 'depth hidden3d ls 100',\n            cbrange = '[-0.5:0.5]',\n            palette = 'rgb -3,-3,-3',\n            colorbox = None,\n            border = None,\n            key = None,\n            zrange = '[-2:2]',\n            tics = None,\n            view = '60,185,1.5')\n    g.splot('\"examples/whale.dat\" w pm3d')\n\n    # Or the options could be passed on the constructor, it could be writen\n    # as:\n    g = gnuplot.Gnuplot(log = True)\n    g.splot('\"examples/whale.dat\" w pm3d',\n            term = 'pngcairo size 480,480',\n            out = '\"whale.png\"',\n            style = 'line 100 lw 0.1 lc \"black\"',\n            pm3d = 'depth hidden3d ls 100',\n            cbrange = '[-0.5:0.5]',\n            palette = 'rgb -3,-3,-3',\n            colorbox = None,\n            border = None,\n            key = None,\n            zrange = '[-2:2]',\n            tics = None,\n            view = '60,185,1.5')\n\nThis is the script output with the log=True::\n\n    [py-gnuplot] set term pngcairo size 480,480\n    [py-gnuplot] set out \"whale.png\"\n    [py-gnuplot] set style line 100 lw 0.1 lc \"black\"\n    [py-gnuplot] set pm3d depth hidden3d ls 100\n    [py-gnuplot] set cbrange [-0.5:0.5]\n    [py-gnuplot] set palette rgb -3,-3,-3\n    [py-gnuplot] unset colorbox\n    [py-gnuplot] unset border\n    [py-gnuplot] unset key\n    [py-gnuplot] set zrange [-2:2]\n    [py-gnuplot] unset tics\n    [py-gnuplot] set view 60,185,1.5\n    [py-gnuplot] splot \"examples/whale.dat\" w pm3d\n\nAnd this is the image output: |small_whale.png|\n\n.. |small_whale.png| image:: http://ayapin-film.sakura.ne.jp/Gnuplot/Pm3d/Part1/whale.png\n   :width: 50\n\n2.1.2 cmd()\n+++++++++++\n\n.. code-block:: python\n\n    def cmd(self, *args):\n        '''\n        *args: all the line that need to pass to gnuplot. It could be a\n        list of lines, or a paragraph; Lines starting with \"#\" would be\n        omitted. Every line should be a clause that could be executed in\n        gnuplot.\n        '''\n\nWe implemented the function cmd() and pass the command to call Gnuplot to\nplot the data, Thus we could do everything with the only one simple\nfunction:\n\n.. _simple1.1.py:\n..\n    cmd2img:: python3\n    :image: simple.1.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # Illustration of object-oriented interface, you can see we only wrap the\n    # gnuplot script by g.cmd('...') and it's simple and straitfoward if you\n    # are familar with Gnuplot.\n    g = gnuplot.Gnuplot()\n    g.cmd('set terminal pngcairo font \"arial,10\" fontscale 1.0 size 600, 400')\n    g.cmd('set output \"simple.1.png\"')\n    g.cmd('set key fixed left top vertical Right noreverse enhanced autotitle box lt black linewidth 1.000 dashtype solid')\n    g.cmd('set style increment default')\n    g.cmd('set samples 50, 50')\n    g.cmd('set title \"Simple Plots\" ')\n    g.cmd('set title  font \",20\" norotate')\n    g.cmd('plot [-10:10] sin(x),atan(x),cos(atan(x))')\n\nOr you can even pass the Gnuplot command as a string list or a text paragraph:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # Illustration of object-oriented interface, you can see we only wrap the\n    # gnuplot script by g.cmd('...') and it's simple and straitfoward if you\n    # are familar with Gnuplot.\n    g = gnuplot.Gnuplot()\n\n    # Take all the Gnuplot command as a list of command:\n    g.cmd('set terminal pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n    'set output \"simple.1.png\"',\n    'set key fixed left top vertical Right noreverse enhanced autotitle box lt black linewidth 1.000 dashtype solid',\n    'set style increment default',\n    'set samples 50, 50',\n    'set title \"Simple Plots\" ',\n    'set title  font \",20\" norotate',\n    'plot [-10:10] sin(x),atan(x),cos(atan(x))')\n\n    # Take all the Gnuplot command as a script paragraph:\n    plot_cmd = '''\n    set terminal pngcairo font \"arial,10\" fontscale 1.0 size 600, 400\n    set output \"simple.1.png\"\n    set key fixed left top vertical Right noreverse enhanced autotitle box lt black linewidth 1.000 dashtype solid\n    set style increment default\n    set samples 50, 50\n    set title \"Simple Plots\n    set title  font \",20\" norotate\n    plot [-10:10] sin(x),atan(x),cos(atan(x))'''\n    g.cmd(plot_cmd)\n\nThis is the image output: |small_simple.png|\n\n.. |small_simple.png| image:: http://gnuplot.sourceforge.net/demo/simple.1.png\n   :width: 50\n\nBy this way we can do everything that Gnuplot can do and cannot do what\nGnuplot itself can't do. It's the exact way that the Gnuplot do it. and we\ndon't get any benifit besides we can call Gnuplot in python. So we develop\nmany other functions as below:\n\n2.1.3 set()\n+++++++++++\n\n.. code-block:: python\n\n    def set(self, *args, **kwargs):\n        '''\n        *args: options without value\n        *kwargs: options with value. The set and unset commands may optionally\n                 contain an iteration clause, so the arg could be list.\n        '''\n\nThe set command can be used to set lots of options. The set and unset\ncommands may optionally contain an iteration clause, so the arg could be\nlist. For examples:\n\nWe set the options before plot and then call plot to render the image. It's\nequivalent to example in `2.1.2 cmd()`_ but seems muck like a python script.\n\n.. _simple2.py:\n\n..\n    cmd2img:: python3\n    :image: simple.1.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n\n    # Gnuplot lines:\n    #set terminal pngcairo font \"arial,10\" fontscale 1.0 size 600, 400\n    #set output \"simple.1.png\"\n    #set key fixed left top vertical Right noreverse enhanced autotitle box lt black linewidth 1.000 dashtype solid\n    #set style increment default\n    #set samples 50, 50\n    #set title \"Simple Plots\" font \",20\" norotate\n\n    g = gnuplot.Gnuplot()\n    g.set(terminal = 'pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n            output = '\"simple.1.png\"',\n            key = 'fixed left top vertical Right noreverse enhanced autotitle box lt black linewidth 1.000 dashtype solid',\n            style = 'increment default',\n            samples = '50, 50',\n            title = '\"Simple Plots\" font \",20\" norotate')\n    g.plot('[-10:10] sin(x),atan(x),cos(atan(x))')\n\nset() is flexible but indeed set() functions is not necessary. We could\npass the options as parameter in the constructor and plot(). For examples\nthe following script act equally with the above:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # py-python lines:\n    g = gnuplot.Gnuplot(terminal = 'pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n                        output = '\"test.png\"',\n                        boxwidth = '0.9 relative',\n                        style = 'fill solid 1.0',\n                        label = ['\"y=x\" at 1,2',\n                                 '2 \"S\" at graph 0.5,0.5 center font \"Symbol,24\"',\n                                 '3 \"y=x^2\" at 2,3,4 right'])\n    g.plot('\"file.dat\" with boxes')\n\nWe can also write it as the following, they are all the same:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # py-python lines:\n    g = gnuplot.Gnuplot()\n    g.plot('\"file.dat\" with boxes',\n           terminal = 'pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n           output = '\"test.png\"',\n           boxwidth = '0.9 relative',\n           style = 'fill solid 1.0',\n           label = ['\"y=x\" at 1,2',\n                    '2 \"S\" at graph 0.5,0.5 center font \"Symbol,24\"',\n                    '3 \"y=x^2\" at 2,3,4 right'])\n\n2.1.4 unset()\n+++++++++++++++\n\n.. code-block:: python\n\n    def unset(self, *items):\n        '''\n        *args: options that need to be unset\n        '''\n\nOptions set using the set() function may be returned to their default state by\nthe corresponding unset() function:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # py-python lines:\n    g = gnuplot.Gnuplot()\n    g.unset('xlabel', 'ylabel', 'xrange', 'yrange')\n    g.plot('sin(x) with lp')\n\nunset command could be replaced as set, for example the above example could\nalso be writen as:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # Another means to unset options:\n    g = gnuplot.Gnuplot()\n    g.set('noxlabel', 'noylabel', 'noxrange', 'noyrange')\n    g.plot('sin(x) with lp')\n\n    # Another means to unset options:\n    g = gnuplot.Gnuplot()\n    g.set(xlabel = None,\n          ylabel = None,\n          xrange = None,\n          yrange = None)\n    g.plot('sin(x) with lp')\n\n2.1.5 plot()\n++++++++++++\n\n.. code-block:: python\n\n    def plot(self, *items, **kwargs):\n        '''\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nplot is the primary command for drawing plots with gnuplot, We port it as a\nfunction in py-python. As description, the plot-element is passed as\nvariable parameters, and options are passed as dictionary parameter. please\nbe noted that the plot-element should be in the single quotes:\n\nNote that the plot()/splot() only plot the gnuplot functions and file, if\nyou'd like to plot data generated in python, you should call the new added\nfunctions: `2.2.1 plot_data()`_ and `2.2.2 splot_data()`_ .\n\nfor example plot the gnuplot function or datafile we use pygnuplot.gnuplot:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    g = gnuplot.Gnuplot()\n    g.plot('[-10:10] sin(x)',\n           'atan(x)',\n           'cos(atan(x))',\n           terminal = 'pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n           output = '\"simple.1.png\"',\n           key = 'fixed left top vertical Right lt black linewidth 1.000 dashtype solid',\n           style = 'increment default',\n           samples = '50, 50',\n           title = '\"Simple Plots\" font \",20\" norotate')\n\nIf we plot the python generated data we use plot_data() and splot_data():\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # usage examples, please note that we didn't give the output so could only\n    # see the image flash on the screen. Will introduce how to output the\n    # image to files.\n    df = pd.DataFrame(data = {'col1': [1, 2],\n                              'col2': [3, 4],\n                              'col3': [5, 6]})\n    g = gnuplot.Gnuplot()\n    g.plot_data(df, 'using 1:2 with lines', 'using 1:3 with points')\n\nAs we stated in `2.1.3 set()`_ , we can use parameter to replace\nset()/unset() in plot() function, here is something we need to know when\nusing parameter to replace set()/unset():\n\n1) If it's flag parameter, for example::\n\n    set grid\n    set hidden3d\n\nwe can pass it as a empty value:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n\n    # Examples of gnuplot.plot()\n    g = gnuplot.Gnuplot()\n    g.plot('sin(x)',\n           'cos(x)',\n           ...,\n           grid = '',\n           hidden3d = '',\n           ...)\n\n    # Examples of plot_data()\n    df = pd.DataFrame(data = {'col1': [1, 2],\n                              'col2': [3, 4],\n                              'col3': [5, 6]})\n    g = gnuplot.Gnuplot()\n    g.plot_data(df, 'using 1:2 with lines', 'using 1:3 with points',\n           grid = '')\n\n2) We have two means to pass \"unset\" command, one is the no-xxx option and\n   the other is xxx = None, for examples we'd like to unset the grid and\n   xrange::\n\n    unset grid\n    unset xrange\n\nWe can do that in py-gnuplot by:\n\n.. code-block:: python\n\n    g = gnuplot.Gnuplot()\n    # Example of use no-xxx to unset the flag\n    g.plot(df, 'using 0:2:3:4:5 notitle with financebars lt 8',\n            ...,\n            nogrid = '',\n            noxlabel = '',\n            ...)\n\n    # Example of use None to unset the flag\n    g.plot(df, 'using 0:2:3:4:5 notitle with financebars lt 8',\n            ...,\n            grid = None,\n            xlabel = None,\n            ...)\n\n3) If there is multiple lines for one options, for exampe in gnuplot it\n   is::\n\n    set arrow from 5,-5,-1.2 to 5,5,-1.2 lt -1\n    set arrow from 5,6,-1 to 5,5,-1 lt -1\n    set arrow from 5,6,sinc(5,5) to 5,5,sinc(5,5) lt -1\n\nWe pass them by a list of options:\n\n.. code-block:: python\n\n    g = gnuplot.Gnuplot()\n    g.plot(df,\n           'using 0:2:3:4:5 notitle with financebars lt 8',\n           ...,\n           arrow = ['from 5,-5,-1.2 to 5,5,-1.2 lt -1',\n                    'from 5,6,-1 to 5,5,-1 lt -1',\n                    'from 5,6,sinc(5,5) to 5,5,sinc(5,5) lt -1'],\n           ...,\n           ...)\n\n2.1.6 splot()\n+++++++++++++\n\n.. code-block:: python\n\n    def splot(self, *items, **kwargs):\n        '''\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nThe usage of splot() is exactly the same as plot().\n\n2.2 new developed member functions for python generated data\n--------------------------------------------------------------\n\nWe develop the following memember functions, they are very familar with the\norignal plot() and splot(), the only difference is that , in the new\ndeveloped function, we pass the python generated data as the first\nparameter and remove the corresponding element in the plot command.\n\n2.2.1 plot_data()\n+++++++++++++++++\n\n.. code-block:: python\n\n    def plot_data(self, data, *items, **kwargs):\n        '''\n        data: The data that need to be plotted. It's either the string of list\n        or the Pnadas Dataframe, if it's Pnadas Dataframe it would be converted\n        to string by data.to_csv(). Note that we will execut a extra command\n        \"set datafile separator \",\" to fit the data format of csv.\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nThe usage is the same as in `2.1.5 plot()`_ except that you should pass the\ndata(string or pandas Dataframe format) as the first parameter, and remove\nthe corresponding filename in every plot line. Moreover, the defaulst\nseperator now is \",\" for easy use with csv file:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    # usage examples, please note that we didn't give the output so could only\n    # see the image flash on the screen. Will introduce how to output the\n    # image to files.\n    df = pd.DataFrame(data = {'col1': [1, 2],\n                              'col2': [3, 4],\n                              'col3': [5, 6]})\n    g = gnuplot.Gnuplot()\n    # Note that the first parameter is df and there is no \"data.file\" in\n    # the following commmand.\n    g.plot_data(df,\n                'using 1:2 with lines',\n                'using 1:3 with points')\n\n2.2.2 splot_data()\n++++++++++++++++++\n\n.. code-block:: python\n\n    def splot_data(self, data, *items, **kwargs):\n        '''\n        data: The data that need to be plotted. It's either the string of list\n        or the Pnadas Dataframe, if it's Pnadas Dataframe it would be converted\n        to string by data.to_csv(). Note that we will execut a extra command\n        \"set datafile separator \",\" to fit the data format of csv.\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nThe usage is the same as in `2.2.1 plot_data()`_ .\n\n2.3 new developed global class-less function call\n----------------------------------------------------\n\nWe can plot the image just by the above object-oriented interface, but\nsometimes we want to quick plot an image in quick mode, we can call the\nglobal class-less function call:\n\n2.3.1 plot()\n++++++++++++\n\n.. code-block:: python\n\n    #submodule gnuplot\n    def plot(*args, **kwargs):\n        '''\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nThe usage is the same as in `2.1.5 plot()`_ except that you needn't\nallocate a Gnuplot() instance at first:.\n\n.. _simple3.py:\n\n..\n    cmd2img:: python3\n    :image: simple.1.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    gnuplot.plot('[-10:10] sin(x)',\n           'atan(x)',\n           'cos(atan(x))',\n           terminal = 'pngcairo font \"arial,10\" fontscale 1.0 size 600, 400',\n           output = '\"simple.1.png\"',\n           key = 'fixed left top vertical Right lt black linewidth 1.000 dashtype solid',\n           style = 'increment default',\n           samples = '50, 50',\n           title = '\"Simple Plots\" font \",20\" norotate')\n\n2.3.2 splot()\n++++++++++++++\n\n.. code-block:: python\n\n    #submodule gnuplot\n    def splot(*args, **kwargs):\n        '''\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nThe usage is the same as in `2.1.6 splot()`_ except that you needn't\nallocate a Gnuplot() instance at first:\n\n2.3.3 plot_data()\n+++++++++++++++++\n\n.. code-block:: python\n\n    def plot_data(data, *items, **kwargs):\n        '''\n        data: The data that need to be plotted. It's either the string of list\n        or the Pnadas Dataframe, if it's Pnadas Dataframe it would be converted\n        to string by data.to_csv()\n        *items: The list of plot command;\n        **kwargs: The options that would be set before the plot command.\n        '''\n\nThe usage is the same as in `2.2.1 plot_data()`_ except that you needn't\nallocate a Gnuplot() instance at first:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    df = pd.DataFrame(data = {'col1': [1, 2],\n                              'col2': [3, 4],\n                              'col3': [5, 6]})\n    gnuplot.plot_data(df,\n                      'using 1:2 with lines',\n                      'using 1:3 with points')\n\n2.3.4 splot_data()\n++++++++++++++++++\n\n.. code-block:: python\n\n    class gnuplot.Gnuplot(object):\n\n        def splot(self, *items, **kwargs):\n            '''\n            *items: The list of plot command;\n            **kwargs: The options that would be set before the plot command.\n            '''\n\nThe usage is the same as in `2.2.2 splot_data()`_ except that you needn't\nallocate a Gnuplot() instance at first:\n\n2.3.5 multiplot()\n+++++++++++++++++\n\nSince we don't allocate the Gnuplot instance, there is a little trick to\nplot the multiplot image. To solve the issue we create 3 brand new function\nto implement that, anyway, we have new options to plot the data.\n\n.. code-block:: python\n\n    def multiplot(\\*args, \\*\\*kwargs):\n        @args: the subplot object list;\n        @kwargs: the setting options that need to be set before call plot;\n\n    def make_plot(\\*args, \\*\\*kwargs)\n        The parameter definition is the same as plot(), but it doesn't plot\n        the data really, it only return the plot dictionary for later\n        multiplot() use.\n\n    def make_splot(\\*args, \\*\\*kwargs)\n        The parameter definition is the same as splot(), but it doesn't plot\n        the data really, it only return the plot dictionary for later\n        multiplot() use.\n\n    def make_plot_data (data, \\*args, \\*\\*kwargs)\n        The parameter definition is the same as plot_data(), but it doesn't\n        plot the data really, it only return the plot dictionary for later\n        multiplot() use.\n\n    def make_splot_data (data, \\*args, \\*\\*kwargs)\n        The parameter definition is the same as splot_data(), but it\n        doesn't plot the data really, it only return the plot dictionary\n        for later multiplot() use.\n\nBefore call multiplot() we must generate the subplot object by calling\nmake_plot()/make_splot(), It is much like mplfinance.make_addplot(), it only\nadd the subplot command for further call:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    sub1 = gnuplot.make_plot('sin(x)', ylabel = 'ylabel')\n    sub2 = gnuplot.make_plot('cos(x)', xlabel = 'xlabel')\n    sub3 = gnuplot.make_plot('sin(2*x)', noxlabel = '', ylabel = '')\n    sub4 = gnuplot.make_plot('cos(2*x)', xlabel = 'xlabel')\n    gnuplot.multiplot(sub1, sub2, sub3, sub4,\n                      output = '\"sample.multiplot.png\"',\n                      term = 'pngcairo size 900,600 font \",11\"',\n                      multiplot  = 'layout 2,2 columnsfirst margins 0.1,0.9,0.1,0.9 spacing 0.1')\n\nA example in reality:\n\n.. _finance2.py:\n\n..\n    cmd2img:: python3\n    :image: finance.13.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n\n    # A demostration to generate pandas data frame data in python.\n    df = pd.read_csv('examples/finance.dat', sep='\\t', index_col = 0, parse_dates = True,\n            names = ['date', 'open','high','low','close', 'volume','volume_m50',\n                'intensity','close_ma20','upper','lower '])\n\n    # make subplot at first, now there is still no real plot.\n    sub1 = gnuplot.make_plot_data(df,\n            'using 0:2:3:4:5 notitle with candlesticks lt 8',\n            'using 0:9 notitle with lines lt 3',\n            'using 0:10 notitle with lines lt 1',\n            'using 0:11 notitle with lines lt 2',\n            'using 0:8 axes x1y2 notitle with lines lt 4',\n            title = '\"Change to candlesticks\"',\n            logscale = 'y',\n            xrange = '[50:253]',\n            yrange = '[75:105]',\n            format = 'x \"\"',\n            xtics = '(66, 87, 109, 130, 151, 174, 193, 215, 235)',\n            ytics = '(105, 100, 95, 90, 85, 80)',\n            lmargin = '9',\n            rmargin = '2',\n            bmargin = '0',\n            origin = '0, 0.3',\n            size = ' 1, 0.7',\n            grid = 'xtics ytics',\n            ylabel = '\"price\" offset 1',\n            label = ['1 \"Acme Widgets\" at graph 0.5, graph 0.9 center front',\n                '2 \"Courtesy of Bollinger Capital\" at graph 0.01, 0.07',\n                '3 \"  www.BollingerBands.com\" at graph 0.01, 0.03']\n            )\n\n    sub2 = gnuplot.make_plot_data(df,\n            'using 0:($6/10000) notitle with impulses lt 3',\n            'using 0:($7/10000) notitle with lines lt 1',\n            ytics = '500',\n            xtics = '(\"6/03\" 66, \"7/03\" 87, \"8/03\" 109, \"9/03\" 130, \"10/03\" 151, \"11/03\" 174, \"12/03\" 193, \"1/04\" 215, \"2/04\" 235)',\n            ylabel = '\"volume (0000)\" offset 1',\n            nologscale = 'y',\n            autoscale = 'y',\n            size = '1.0, 0.3',\n            origin = '0.0, 0.0',\n            bmargin = '',\n            tmargin = '0',\n            format = ['x', 'y \"%1.0f\"'])\n\n    # plot at one time.\n    gnuplot.multiplot(sub1, sub2,\n            output = '\"finance.13.png\"',\n            term = 'pngcairo font \"arial,10\" fontscale 1.0 size 900, 600')\n\n.. _3 Multiplot Axes Demo2:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n    import numpy as np\n\n    #https://matplotlib.org/gallery/subplots_axes_and_figures/axes_demo.html#sphx-glr-gallery-subplots-axes-and-figures-axes-demo-py\n    #http://gnuplot.sourceforge.net/demo_5.2/bins.html\n\n    # 1) create some data to use for the plot\n    np.random.seed(19680801) # Fixing random state for reproducibility\n    dt = 0.001\n    t = np.arange(0.0, 10.0, dt)\n    r = np.exp(-t / 0.05)  # impulse response\n    x = np.random.randn(len(t))\n    s = np.convolve(x, r)[:len(x)] * dt  # colored noise\n    df = pd.DataFrame({'r': r, 'x': x, 's': s}, index = t)\n    df.index.name = 't'\n    #print(df.tail().to_csv())\n\n    # 2) Plot the data\n    main = gnuplot.make_plot_data(df.iloc[:1000],\n            'using 1:4 with line lw 2 lc \"web-blue\"',\n            title = '\"Gaussian colored noise\"',\n            xlabel = '\"time (s)\"',\n            ylabel = '\"current (nA)\"',\n            xrange = '[0:1]',\n            yrange = '[-0.015:0.03]',\n            key = None,\n            size = ' 1, 1',\n            origin = '0, 0')\n    right = gnuplot.make_plot_data(df,\n            'using 4 bins=400 with boxes title \"20 bins\" lw 2 lc \"web-blue\"',\n            title = '\"Probability\"',\n            xlabel = None,\n            ylabel = None,\n            tics = None,\n            xrange = None,\n            yrange = None,\n            origin = '0.65, 0.56',\n            size = '0.24, 0.32',\n            object = 'rectangle from graph 0,0 to graph 1,1 behind fc \"black\" fillstyle solid 1.0')\n    left = gnuplot.make_plot_data(df,\n            'using 1:2 with line lw 2 lc \"web-blue\"',\n            title = '\"Impulse response\"',\n            xrange = '[0:0.2]',\n            origin = '0.15, 0.56',\n            size = '0.24, 0.32')\n\n    gnuplot.multiplot(main, right, left,\n            output = '\"sphx_glr_axes_demo_001.png\"',\n            term = 'pngcairo font \"arial,10\" fontscale 1.0 size 640, 480',\n            key = '')\n\n3. examples\n============\n\n3.1 examples port from gnuplot\n------------------------------\n\n3.1.1 finance\n+++++++++++++\n\nexample with object-oriented interface call:\n\n.. _finance1.py:\n\n..\n    cmd2img:: python3\n    :image: finance.13.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n\n    # A demostration to generate pandas data frame data in python.\n    df = pd.read_csv('finance.dat', sep='\\t', index_col = 0, parse_dates = True,\n            names = ['date', 'open','high','low','close', 'volume','volume_m50',\n                'intensity','close_ma20','upper','lower '])\n\n    # Create a Gnuplot instance and set the options at first;\n    g = gnuplot.Gnuplot(log = True,\n            output = '\"finance.13.png\"',\n            term = 'pngcairo font \"arial,10\" fontscale 1.0 size 900, 600',\n            multiplot = \"\")\n\n    g.plot_data(df,\n            'using 0:2:3:4:5 notitle with candlesticks lt 8',\n            'using 0:9 notitle with lines lt 3',\n            'using 0:10 notitle with lines lt 1',\n            'using 0:11 notitle with lines lt 2',\n            'using 0:8 axes x1y2 notitle with lines lt 4',\n            title = '\"Change to candlesticks\"',\n            logscale = 'y',\n            xrange = '[50:253]',\n            yrange = '[75:105]',\n            format = 'x \"\"',\n            xtics = '(66, 87, 109, 130, 151, 174, 193, 215, 235)',\n            ytics = '(105, 100, 95, 90, 85, 80)',\n            lmargin = '9',\n            rmargin = '2',\n            bmargin = '0',\n            origin = '0, 0.3',\n            size = ' 1, 0.7',\n            grid = 'xtics ytics',\n            ylabel = '\"price\" offset 1',\n            label = ['1 \"Acme Widgets\" at graph 0.5, graph 0.9 center front',\n                '2 \"Courtesy of Bollinger Capital\" at graph 0.01, 0.07',\n                '3 \"  www.BollingerBands.com\" at graph 0.01, 0.03']\n            )\n\n    g.plot_data(df,\n            'using 0:($6/10000) notitle with impulses lt 3',\n            'using 0:($7/10000) notitle with lines lt 1',\n            bmargin = '',\n            size = '1.0, 0.3',\n            origin = '0.0, 0.0',\n            tmargin = '0',\n            nologscale = 'y',\n            autoscale = 'y',\n            format = ['x', 'y \"%1.0f\"'],\n            ytics = '500',\n            xtics = '(\"6/03\" 66, \"7/03\" 87, \"8/03\" 109, \"9/03\" 130, \"10/03\" 151, \"11/03\" 174, \"12/03\" 193, \"1/04\" 215, \"2/04\" 235)',\n            ylabel = '\"volume (0000)\" offset 1')\n\nSince it enable the log options, I attach the execution log as below::\n\n    [py-gnuplot 19:35:26] set output \"finance.13.png\"\n    [py-gnuplot 19:35:26] set term pngcairo font \"arial,10\" fontscale 1.0 size 900, 600\n    [py-gnuplot 19:35:26] set multiplot\n    [py-gnuplot 19:35:26] set datafile separator \",\"\n    [py-gnuplot 19:35:26] set title \"Change to candlesticks\"\n    [py-gnuplot 19:35:26] set logscale y\n    [py-gnuplot 19:35:26] set xrange [50:253]\n    [py-gnuplot 19:35:26] set yrange [75:105]\n    [py-gnuplot 19:35:26] set format x \"\"\n    [py-gnuplot 19:35:26] set xtics (66, 87, 109, 130, 151, 174, 193, 215, 235)\n    [py-gnuplot 19:35:26] set ytics (105, 100, 95, 90, 85, 80)\n    [py-gnuplot 19:35:26] set lmargin 9\n    [py-gnuplot 19:35:26] set rmargin 2\n    [py-gnuplot 19:35:26] set bmargin 0\n    [py-gnuplot 19:35:26] set origin 0, 0.3\n    [py-gnuplot 19:35:26] set size  1, 0.7\n    [py-gnuplot 19:35:26] set grid xtics ytics\n    [py-gnuplot 19:35:26] set ylabel \"price\" offset 1\n    [py-gnuplot 19:35:26] set label 1 \"Acme Widgets\" at graph 0.5, graph 0.9 center front\n    [py-gnuplot 19:35:26] set label 2 \"Courtesy of Bollinger Capital\" at graph 0.01, 0.07\n    [py-gnuplot 19:35:26] set label 3 \"  www.BollingerBands.com\" at graph 0.01, 0.03\n    [py-gnuplot 19:35:26] plot $DataFrame using 0:2:3:4:5 notitle with candlesticks lt 8,\\\n    [py-gnuplot 19:35:26] $DataFrame using 0:9 notitle with lines lt 3,\\\n    [py-gnuplot 19:35:26] $DataFrame using 0:10 notitle with lines lt 1,\\\n    [py-gnuplot 19:35:26] $DataFrame using 0:11 notitle with lines lt 2,\\\n    [py-gnuplot 19:35:26] $DataFrame using 0:8 axes x1y2 notitle with lines lt 4\n    [py-gnuplot 19:35:26] unset for [i=1:200] label i\n    [py-gnuplot 19:35:26] set datafile separator \",\"\n    [py-gnuplot 19:35:26] set bmargin\n    [py-gnuplot 19:35:26] set size 1.0, 0.3\n    [py-gnuplot 19:35:26] set origin 0.0, 0.0\n    [py-gnuplot 19:35:26] set tmargin 0\n    [py-gnuplot 19:35:26] set nologscale y\n    [py-gnuplot 19:35:26] set autoscale y\n    [py-gnuplot 19:35:26] set format x\n    [py-gnuplot 19:35:26] set format y \"%1.0f\"\n    [py-gnuplot 19:35:26] set ytics 500\n    [py-gnuplot 19:35:26] set xtics (\"6/03\" 66, \"7/03\" 87, \"8/03\" 109, \"9/03\" 130, \"10/03\" 151, \"11/03\" 174, \"12/03\" 193, \"1/04\" 215, \"2/04\" 235)\n    [py-gnuplot 19:35:26] set ylabel \"volume (0000)\" offset 1\n    [py-gnuplot 19:35:26] plot $DataFrame using 0:($6/10000) notitle with impulses lt 3,\\\n    [py-gnuplot 19:35:26] $DataFrame using 0:($7/10000) notitle with lines lt 1\n    [py-gnuplot 19:35:26] unset for [i=1:200] label i\n\nAnd the generated output is as following:\n\n.. image:: http://gnuplot.sourceforge.net/demo/finance.13.png\n   :width: 350\n\n3.1.2 histogram\n+++++++++++++++\n\n.. _histo.1.py:\n\n..\n    cmd2img:: python3\n    :image: histograms.1.png\n\nPlot with member functions:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n\n    df = pd.read_csv('examples/immigration.dat', index_col = 0, sep='\\t', comment='#')\n    g = gnuplot.Gnuplot()\n    g.set(terminal = 'pngcairo transparent enhanced font \"arial,10\" fontscale 1.0 size 600, 400 ',\n            output = '\"histograms.1.png\"',\n            key = 'fixed right top vertical Right noreverse noenhanced autotitle nobox',\n            style = 'data linespoints',\n            datafile = ' missing \"-\"',\n            xtics = 'border in scale 1,0.5 nomirror rotate by -45 autojustify norangelimit',\n            title = '\"US immigration from Europe by decade\"')\n    g.plot_data(df, 'using 2:xtic(1), for [i=3:22] \"\" using i ')\n\nSince it's simple, we also could plot it with global class-less function call:\n\n.. _histo.2.py:\n\n..\n    cmd2img:: python3\n    :image: histograms.1.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n\n    df = pd.read_csv('examples/immigration.dat', index_col = 0, sep='\\t', comment='#')\n    gnuplot.plot_data(df,\n            'using 2:xtic(1), for [i=3:22] \"\" using i ',\n            terminal = 'pngcairo transparent enhanced font \"arial,10\" fontscale 1.0 size 600, 400 ',\n            output = '\"histograms.1.png\"',\n            key = 'fixed right top vertical Right noreverse noenhanced autotitle nobox',\n            style = 'data linespoints',\n            datafile = ' missing \"-\"',\n            xtics = 'border in scale 1,0.5 nomirror rotate by -45 autojustify norangelimit',\n            title = '\"US immigration from Europe by decade\"')\n\nAnd the generated output is as following:\n\n.. image:: http://gnuplot.sourceforge.net/demo/histograms.1.png\n   :width: 350\n\n3.1.3 splot\n+++++++++++\n\n.. _surface1.py:\n\n..\n    cmd2img:: python3\n    :image: surface2.9.png\n\nobject-oriented function call:\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    g = gnuplot.Gnuplot(output = '\"surface2.9.png\"',\n            terminal = 'pngcairo enhanced font \"arial,10\" fontscale 1.0 size 600, 400 ',\n            title = '\"Interlocking Tori\" ',\n            dummy = 'u, v',\n            key = 'bmargin center horizontal Right noreverse enhanced autotitle nobox',\n            style = ['increment default','data lines'],\n            parametric = '',\n            view = '50, 30, 1, 1',\n            isosamples = '50, 20',\n            hidden3d = 'back offset 1 trianglepattern 3 undefined 1 altdiagonal bentover',\n            xyplane = 'relative 0',\n            urange = '[ -3.14159 : 3.14159 ] noreverse nowriteback',\n            vrange = '[ -3.14159 : 3.14159 ] noreverse nowriteback')\n    g.splot('cos(u)+.5*cos(u)*cos(v),sin(u)+.5*sin(u)*cos(v),.5*sin(v) with lines',\n            '1+cos(u)+.5*cos(u)*cos(v),.5*sin(v),sin(u)+.5*sin(u)*cos(v) with lines')\n\n.. _surface2.py:\n\nDirect function call example:\n\n..\n    cmd2img:: python3\n    :image: surface2.9.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    gnuplot.splot('cos(u)+.5*cos(u)*cos(v),sin(u)+.5*sin(u)*cos(v),.5*sin(v) with lines',\n            '1+cos(u)+.5*cos(u)*cos(v),.5*sin(v),sin(u)+.5*sin(u)*cos(v) with lines',\n            terminal = 'pngcairo enhanced font \"arial,10\" fontscale 1.0 size 600, 400 ',\n            output = '\"surface2.9.png\"',\n            dummy = 'u, v',\n            key = 'bmargin center horizontal Right noreverse enhanced autotitle nobox',\n            style = ['increment default','data lines'],\n            parametric = '',\n            view = '50, 30, 1, 1',\n            isosamples = '50, 20',\n            hidden3d = 'back offset 1 trianglepattern 3 undefined 1 altdiagonal bentover',\n            xyplane = 'relative 0',\n            title = '\"Interlocking Tori\" ',\n            urange = '[ -3.14159 : 3.14159 ] noreverse nowriteback',\n            vrange = '[ -3.14159 : 3.14159 ] noreverse nowriteback')\n\nAnd the generated output is as following:\n\n.. image:: http://gnuplot.sourceforge.net/demo/surface2.9.png\n   :width: 350\n\n3.1.4 pm3d\n++++++++++\n\niterate.dem\n\n.. _whale1.py:\n\n..\n    cmd2img:: python3\n    :image: whale.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n\n    #http://ayapin-film.sakura.ne.jp/Gnuplot/Pm3d/Part1/whale.html\n    g = gnuplot.Gnuplot()\n    #g.set(terminal = 'pngcairo  transparent enhanced font \"arial,10\" fontscale 1.0 size 600, 400 ',\n    #        output = '\"iterate.2.png\"',\n    #        noborder = '',\n    #        key = ['title \"splot for [scan=1:*] \\'whale.dat\\' index scan\" center',\n    #              'bmargin center horizontal Right noreverse enhanced autotitle nobox',\n    #              'noinvert samplen 0.6 spacing 1 width 0 height 0 ',\n    #              'maxcolumns 0 maxrows 6'],\n    #        style = 'increment default',\n    #        view = '38, 341, 1, 1',\n    #        xtics = '',\n    #        ytics = '',\n    #        ztics = '',\n    #        title = '\"Iteration over all available data in a file\" ',\n    #        lmargin = 'at screen 0.09',\n    #        rmargin = 'at screen 0.9')\n    #g.splot('for [i=1:*] \"examples/whale.dat\" index i title sprintf(\"scan %d\",i) with lines')\n\n    # Black and white version\n    g.splot('\"examples/whale.dat\" w pm3d',\n            term = 'pngcairo size 480,480',\n            out = '\"whale.png\"',\n            style = 'line 100 lw 0.1 lc \"black\"',\n            pm3d = 'depth hidden3d ls 100',\n            cbrange = '[-0.5:0.5]',\n            palette = 'rgb -3,-3,-3',\n            colorbox = None,\n            border = None,\n            key = None,\n            zrange = '[-2:2]',\n            tics = None,\n            view = '60,185,1.5')\n\n\n.. _whale2.py:\n\n..\n    cmd2img:: python3\n    :image: whale.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n\n    #gnuplot.splot('for [i=1:*] \"examples/whale.dat\" index i title sprintf(\"scan %d\",i) with lines',\n    #        terminal = 'pngcairo  transparent enhanced font \"arial,10\" fontscale 1.0 size 600, 400 ',\n    #        output = '\"iterate.2.png\"',\n    #        border = '',\n    #        key = ['title \"splot for [scan=1:*] \\'whale.dat\\' index scan\" center',\n    #              'bmargin center horizontal Right noreverse enhanced autotitle nobox',\n    #              'noinvert samplen 0.6 spacing 1 width 0 height 0 ',\n    #              'maxcolumns 0 maxrows 6'],\n    #        style = 'increment default',\n    #        view = '38, 341, 1, 1',\n    #        xtics = '',\n    #        ytics = '',\n    #        ztics = '',\n    #        title = '\"Iteration over all available data in a file\" ',\n    #        lmargin = 'at screen 0.09',\n    #        rmargin = 'at screen 0.9')\n\n    # Black and white version\n    gnuplot.splot('\"examples/whale.dat\" w pm3d',\n            term = 'pngcairo size 480,480',\n            out = '\"whale.png\"',\n            style = 'line 100 lw 0.1 lc \"black\"',\n            pm3d = 'depth hidden3d ls 100',\n            cbrange = '[-0.5:0.5]',\n            palette = 'rgb -3,-3,-3',\n            colorbox = None,\n            border = None,\n            key = None,\n            zrange = '[-2:2]',\n            tics = None,\n            view = '60,185,1.5')\n\nAnd the generated output is as following:\n\n.. http://ayapin-film.sakura.ne.jp/Gnuplot/Pm3d/Part1/whale.html\n.. image http://gnuplot.sourceforge.net/demo/iterate.2.png\n.. image:: http://ayapin-film.sakura.ne.jp/Gnuplot/Pm3d/Part1/whale.png\n   :width: 350\n\n3.2 Examples port from matplotlib\n---------------------------------\n\nJust for fun, I translate some examples in matplotlib to py-gnuplot:\n\n3.2.1 Stacked bar chart\n+++++++++++++++++++++++\n\n..\n    .. cmd2img:: python3\n        :image: sphx_glr_bar_stacked_001.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    import pandas as pd\n    from pygnuplot import gnuplot\n\n    # data is from https://matplotlib.org/gallery/lines_bars_and_markers/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py\n    #https://matplotlib.org/_downloads/2ac62a2edbb00a99e8a853b17387ef14/bar_stacked.py\n    labels = ['G1', 'G2', 'G3', 'G4', 'G5']\n    men_means = [20, 35, 30, 35, 27]\n    women_means = [25, 32, 34, 20, 25]\n    men_std = [2, 3, 4, 1, 2]\n    women_std = [3, 5, 2, 3, 3]\n    width = 0.35       # the width of the bars: can also be len(x) sequence\n\n    # Plot programme:\n    df = pd.DataFrame({'men_means': men_means,\n        'women_means': women_means,\n        'men_std': men_std,\n        'women_std': women_std}, index = labels)\n    #print(df)\n    gnuplot.plot_data(df,\n            'using :($2 + $3):5:xtic(1) with boxerror title \"women\" lc \"dark-orange\"',\n            'using :2:4 with boxerror title \"men\" lc \"royalblue\"',\n            style = ['data boxplot', 'fill solid 0.5 border -1'],\n            boxwidth = '%s' %(width),\n            xrange = '[0.5:5.5]',\n            ylabel = '\"Scores\"',\n            title = '\"Scores by group and gender\"',\n            output = '\"sphx_glr_bar_stacked_001.png\"',\n            terminal = 'pngcairo size 640, 480')\n\nRefer to the original script: `Stacked bar chart`_ and the original image:\n\n.. _Stacked bar chart: https://matplotlib.org/gallery/lines_bars_and_markers/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py\n.. image:: https://matplotlib.org/_images/sphx_glr_bar_stacked_001.png\n   :width: 350\n\n3.2.2 Grouped bar chart with labels\n+++++++++++++++++++++++++++++++++++\n\n..\n    cmd2img:: python3\n            :image: sphx_glr_barchart_001.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    import pandas as pd\n    from pygnuplot import gnuplot\n\n    # data is from https://matplotlib.org/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py\n    labels = ['G1', 'G2', 'G3', 'G4', 'G5']\n    men_means = [20, 34, 30, 35, 27]\n    women_means = [25, 32, 34, 20, 25]\n    width = 0.35  # the width of the bars\n\n    # Plot programme:\n    df = pd.DataFrame({'men': men_means, 'women': women_means},\n            index = labels)\n    df.index.name = 'label'\n    #print(df)\n    gnuplot.plot_data(df,\n            'using 2:xticlabels(1) title columnheader(2) lc \"web-blue\"',\n            'using 3:xticlabels(1) title columnheader(3) lc \"orange\"',\n            'using ($0-0.2):($2+1):2 with labels notitle column',\n            'using ($0+0.2):($3+1):3 with labels notitle column',\n            title = '\"Scores by group and gender\"',\n            xrange = '[-0.5:4.5]',\n            yrange = '[0:38]',\n            ylabel = '\"Scores\"',\n            style = ['data histogram',\n                     'histogram cluster gap 1',\n                     'fill solid border -1',\n                     'textbox transparent'],\n            output = '\"sphx_glr_barchart_001.png\"',\n            terminal = 'pngcairo size 640, 480')\n\nRefer to the original script: `Grouped bar chart with labels`_ and the original image:\n\n.. _Grouped bar chart with labels: https://matplotlib.org/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py\n.. image:: https://matplotlib.org/_images/sphx_glr_barchart_001.png\n   :width: 350\n\n3.2.3 Multiplot Axes Demo\n+++++++++++++++++++++++++\n\n..\n    cmd2img:: python3\n            :image: sphx_glr_axes_demo_001.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n    import numpy as np\n\n    #https://matplotlib.org/gallery/subplots_axes_and_figures/axes_demo.html#sphx-glr-gallery-subplots-axes-and-figures-axes-demo-py\n    #http://gnuplot.sourceforge.net/demo_5.2/bins.html\n\n    # 1) create some data to use for the plot\n    np.random.seed(19680801) # Fixing random state for reproducibility\n    dt = 0.001\n    t = np.arange(0.0, 10.0, dt)\n    r = np.exp(-t / 0.05)  # impulse response\n    x = np.random.randn(len(t))\n    s = np.convolve(x, r)[:len(x)] * dt  # colored noise\n    df = pd.DataFrame({'r': r, 'x': x, 's': s}, index = t)\n    df.index.name = 't'\n\n    g = gnuplot.Gnuplot(log = True,\n            output = '\"sphx_glr_axes_demo_001.png\"',\n            term = 'pngcairo font \"arial,10\" fontscale 1.0 size 640, 480',\n            key = '',\n            multiplot = '')\n\n    # 2) Plot the data\n    g.plot_data(df.iloc[:1000],\n            'using 1:4 with line lw 2 lc \"web-blue\"',\n            title = '\"Gaussian colored noise\"',\n            xlabel = '\"time (s)\"',\n            ylabel = '\"current (nA)\"',\n            xrange = '[0:1]',\n            yrange = '[-0.015:0.03]',\n            key = None,\n            size = ' 1, 1',\n            origin = '0, 0')\n    g.plot_data(df,\n            'using 4 bins=400 with boxes title \"20 bins\" lw 2 lc \"web-blue\"',\n            title = '\"Probability\"',\n            xlabel = None,\n            ylabel = None,\n            tics = None,\n            xrange = None,\n            yrange = None,\n            origin = '0.65, 0.56',\n            size = '0.24, 0.32',\n            object = 'rectangle from graph 0,0 to graph 1,1 behind fc \"black\" fillstyle solid 1.0')\n    g.plot_data(df,\n            'using 1:2 with line lw 2 lc \"web-blue\"',\n            title = '\"Impulse response\"',\n            xrange = '[0:0.2]',\n            origin = '0.15, 0.56',\n            size = '0.24, 0.32')\n\nRefer to the original script: `Multiplot Axes Demo`_ and the original image:\n\n.. _Multiplot Axes Demo: https://matplotlib.org/gallery/subplots_axes_and_figures/axes_demo.html#sphx-glr-gallery-subplots-axes-and-figures-axes-demo-py\n.. image:: https://matplotlib.org/_images/sphx_glr_axes_demo_001.png\n   :width: 350\n\n3.2.4 control view and zoom \n++++++++++++++++++++++++++++\n\n..\n    cmd2img:: python3\n            :image: sphx_glr_axes_margins_001.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n    #https://matplotlib.org/gallery/subplots_axes_and_figures/axes_margins.html#sphx-glr-gallery-subplots-axes-and-figures-axes-margins-py\n    g = gnuplot.Gnuplot(log = True,\n            output = '\"sphx_glr_axes_margins_001.png\"',\n            term = 'pngcairo font \"arial,10\" fontscale 1.0 size 640,480',\n            multiplot = \"\")\n\n    g.cmd('f(x) = exp(-x) * cos(2*pi*x)')\n    g.plot('sample [x=0:3] \"+\" using (x):(f(x)) with lines',\n            title = '\"Zoomed out\"',\n            key = None,\n            xrange = '[-6: 9]',\n            yrange = '[-4: 4]',\n            xtics = '-5, 5, 5',\n            ytics = '-2, 2, 4',\n            origin = '0, 0.5',\n            size = '0.5, 0.5')\n    g.plot('f(x)',\n            title = '\"Zoomed in\"',\n            key = None,\n            xrange = '[0: 3]',\n            yrange = '[-0.2: 0.5]',\n            xtics = '0, 1, 2',\n            ytics = '-0.2, 0.2, 0.4',\n            origin = '0.5, 0.5',\n            size = '0.5, 0.5')\n    g.plot('f(x)',\n            title = None,\n            key = None,\n            xrange = '[0: 3]',\n            yrange = '[-0.7: 1]',\n            xtics = '0, 0.5, 3',\n            ytics = '-0.5, 0.5, 1',\n            origin = '0, 0',\n            size = '1, 0.5')\n\n\nRefer to the original script: `axes_margins.py`_ and the original image:\n\n.. _axes_margins.py: https://matplotlib.org/_downloads/4d3bc54481c3ff3a1ac6712bc2904875/axes_margins.py\n.. image:: https://matplotlib.org/_images/sphx_glr_axes_margins_001.png\n   :width: 350\n\n3.2.5 Rendering math equation using TeX\n+++++++++++++++++++++++++++++++++++++++\n\nWe can embed the TeX math equation into the gnuplot generated image by setting\nthe epslatex terminal, it would be rendered as a .tex file, you can import it\ndirectly or you can convert it to .pdf file and then .png file if needed. this\nis the example:\n\n..\n    cmd2img:: python3\n    :image: pygnuplot_tex_demo.tex\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    from pygnuplot import gnuplot\n    import pandas as pd\n    # https://matplotlib.org/gallery/text_labels_and_annotations/tex_demo.html#sphx-glr-gallery-text-labels-and-annotations-tex-demo-py\n    # http://wap.sciencenet.cn/blog-373392-500657.html\n    # https://www.thinbug.com/q/17593917\n    g = gnuplot.Gnuplot(log = True,\n            output = '\"pygnuplot_tex_demo.tex\"',\n            term = 'epslatex standalone lw 2 color colortext')\n\n    # NOTE: In the following example, we need to escape the \"\\\", that means we\n    # should use '\\\\' or \"\\\\\\\\\" for \\\n    g.plot('cos(4*pi*x) + 2',\n            xlabel = \"'\\\\textbf{time (s)}'\",\n            ylabel = \"'\\\\textit{Velocity (\\N{DEGREE SIGN}/sec)}'\",\n            title = \"'\\\\TeX\\\\ is Number $\\\\displaystyle\\\\sum_{n=1}^\\\\infty\\\\frac{-e^{i\\\\pi}}{2^n}$!' tc 'red'\",\n            key = None,\n            xrange = '[0: 1]')\n\nI list the script output since it's with the log=True::\n\n    [py-gnuplot 14:56:13] set output \"pygnuplot_tex_demo.tex\"\n    [py-gnuplot 14:56:13] set term epslatex standalone lw 2 color colortext\n    [py-gnuplot 14:56:13] set xlabel '\\textbf{time (s)}'\n    [py-gnuplot 14:56:13] set ylabel '\\textit{Velocity (°/sec)}'\n    [py-gnuplot 14:56:13] set title '\\TeX\\ is Number $\\displaystyle\\sum_{n=1}^\\infty\\frac{-e^{i\\pi}}{2^n}$!' tc 'red'\n    [py-gnuplot 14:56:13] unset key\n    [py-gnuplot 14:56:13] set xrange [0: 1]\n    [py-gnuplot 14:56:13] plot cos(4*pi*x) + 2\n\nRefer to the original script: `Rendering math equation using TeX`_ and the original image:\n\n.. _Rendering math equation using TeX: https://matplotlib.org/gallery/text_labels_and_annotations/tex_demo.html#sphx-glr-gallery-text-labels-and-annotations-tex-demo-py\n.. image:: https://matplotlib.org/_images/sphx_glr_tex_demo_001.png\n   :width: 350\n\n3.2.6 Basic pie chart\n+++++++++++++++++++++\n\n..\n    cmd2img:: python3\n    :image: sphx_glr_pie_features_0011.png\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    #coding=utf8\n    import pandas as pd\n    import math\n    from pygnuplot import gnuplot\n\n    #http://www.phyast.pitt.edu/~zov1/gnuplot/html/pie.html\n    #https://matplotlib.org/gallery/pie_and_polar_charts/pie_features.html#sphx-glr-gallery-pie-and-polar-charts-pie-features-py\n    # Pie chart, where the slices will be ordered and plotted counter-clockwise:\n    labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n    sizes = [15, 30, 45, 10]\n    explode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n    startangle = math.pi/2\n\n    # Prepare the data: caculate the percentage\n    df = pd.DataFrame({'labels': labels, 'sizes': sizes, 'explode': explode})\n    df.index.name = 'index'\n    df['percentage'] = df['sizes'] / df['sizes'].sum()\n    df['end'] = df['percentage'].cumsum()*2*math.pi + startangle\n    #df['start'] = df['end'].shift(axis=0, fill_value = 0)\n    df['start'] = df['end'].shift(axis=0)\n    df = df.fillna(startangle)\n    #print(df)\n\n    pie_shade = []\n    pie_graph = []\n\n    shade_offset = 0.03\n    for k, v in df.iterrows():\n        #print(k,v)\n        cos = math.cos((v['start']+v['end'])/2)\n        sin = math.sin((v['start']+v['end'])/2)\n\n        # If we'd like explode the piece, ad the dx/dy to move the origi point.\n        dx = v['explode'] * cos\n        dy = v['explode'] * sin\n\n        # make the shade for each piece\n        piece = gnuplot.make_plot('cos(t)+%f, sin(t)+%f with filledcurves xy=%f,%f lc \"grey80\"'\n                    %(dx-shade_offset, dy-shade_offset, dx-shade_offset, dy-shade_offset),\n                trange = '[%f:%f]' %(v['start'], v['end']),\n                xrange = '[-1.5:1.5]',\n                yrange = '[-1.5:1.5]')\n        pie_shade.append(piece)\n\n        # make the pie and label\n        piece = gnuplot.make_plot('cos(t)+%f, sin(t)+%f with filledcurve xy=%f,%f  lt %d'\n                    %(dx, dy, dx, dy, k+3),\n                trange = '[%f:%f]' %(v['start'], v['end']),\n                xrange = '[-1.5:1.5]',\n                yrange = '[-1.5:1.5]',\n                label = ['1 \"%s\" at %f, %f center front' %(v['labels'], 1.2*cos+dx, 1.2*sin+dy),\n                    '2 \"%.1f%%\" at %f, %f center front' %(v['percentage']*100, 0.6*cos, 0.6*sin)])\n        pie_graph.append(piece)\n\n    gnuplot.multiplot(*pie_shade, *pie_graph,\n            output = '\"sphx_glr_pie_features_0011.png\"',\n            terminal = 'pngcairo size 640, 480',\n            key = None,\n            parametric = '',\n            border = '',\n            tics = '',\n            multiplot = '')\n\nRefer to the original script: `Basic pie chart`_ and the original image:\n\n.. _Basic pie chart: https://matplotlib.org/gallery/pie_and_polar_charts/pie_features.html#sphx-glr-gallery-pie-and-polar-charts-pie-features-py\n.. image:: https://matplotlib.org/_images/sphx_glr_pie_features_0011.png\n   :width: 350\n\n4. Q/A\n=======\n\n5. CHANGLOG\n=============\n\n1.0 Initial upload;\n\n1.0.3 Now Gnuplot().plot()/splot() supplot set options as parameters.\n\n1.0.7 The pyplot.plot() now can accept both string and pandas.Dataframe as the\nfirst parameter, Further more we need pandas installed at first.\n\n1.0.11 Fix the bug: gnuplot.multiplot() doesn't work.\n\n1.0.15 1) Add an example of comparing the object-oriented interface call and\nglobal class-less function call in multiplot() in multiplot() in\nmultiplot() in multiplot(). 2) remove some duplicate setting line.\n\n1.0.19 Add a log options to enable the log when run the script.\n\n1.1 Upgrade to 1.1: 1) Submodule pyplot is depreciated. 2) To plot python generated\ndata we use gnuplot.plot_data() and gnuplot.splot_data().\n\n\n1.1.2 Enhancement: If it's multiplot mode, automatically call the following\nGnuplot to unset the label:\n\n    g.unset('for [i=1:200] label i')\n\n1.1.3 Enhancement: When plotting the python generated data, we set the\nseperator to \",\" for easy using it in csv file.\n1.1.5 Bug fix: on some case it exit exceptionally.\n1.1.8 Remove some Chinese comments to remove the \"UnicodeDecodeError\" for some users.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.gnuplot.info",
    "keywords": "gnuplot,pandas",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-gnuplot",
    "package_url": "https://pypi.org/project/py-gnuplot/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-gnuplot/",
    "project_urls": {
      "Homepage": "http://www.gnuplot.info"
    },
    "release_url": "https://pypi.org/project/py-gnuplot/1.1.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "py-gnuplot is a python plot tools based on gnuplot.",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10628978,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c98e0a206b23e3544f8de6cbf52a06a93c116f190bc3ac3268c3118624672b01",
          "md5": "54e7e5724a14d629b756a1be78de58e8",
          "sha256": "335f13d379bd148b040b6d98354593fe0126bf569b0adc618f4d137f8ed1aa8b"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "54e7e5724a14d629b756a1be78de58e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19288,
        "upload_time": "2020-05-17T14:51:18",
        "upload_time_iso_8601": "2020-05-17T14:51:18.796076Z",
        "url": "https://files.pythonhosted.org/packages/c9/8e/0a206b23e3544f8de6cbf52a06a93c116f190bc3ac3268c3118624672b01/py-gnuplot-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40be01b026a5dd4d5b27e313598c32897c77dd80552fc8c8f038a98a2c87e1f5",
          "md5": "8e9db9b2b96c82b21b31a68272f972a5",
          "sha256": "d19f3db9f76afa8a45ce61050a756ca0b5e95c9b80b9b02a778e315e43a3d244"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8e9db9b2b96c82b21b31a68272f972a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19313,
        "upload_time": "2020-05-17T14:55:50",
        "upload_time_iso_8601": "2020-05-17T14:55:50.010212Z",
        "url": "https://files.pythonhosted.org/packages/40/be/01b026a5dd4d5b27e313598c32897c77dd80552fc8c8f038a98a2c87e1f5/py-gnuplot-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a203c544be1a43a50198491f652e7d7cb9ebfa8916aabf511d3c6bead37519b6",
          "md5": "cb95377fc00a0470d6186416a6194a79",
          "sha256": "739e8a6a3ff5533f105ca93c2d17d66cd99bf1299b148f883b85cf02030bc576"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cb95377fc00a0470d6186416a6194a79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26404,
        "upload_time": "2020-05-17T15:00:24",
        "upload_time_iso_8601": "2020-05-17T15:00:24.981047Z",
        "url": "https://files.pythonhosted.org/packages/a2/03/c544be1a43a50198491f652e7d7cb9ebfa8916aabf511d3c6bead37519b6/py-gnuplot-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "181f409be00dec2d213c37038bc7129b17aea950ba78eaa01aedd59b19b071d1",
          "md5": "f15b181481ab71e7c921653f4183a48c",
          "sha256": "7e840091dc5b8868b3fce9e6f533f33f57919362e4e0518a85daf8fece54e2c5"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f15b181481ab71e7c921653f4183a48c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26407,
        "upload_time": "2020-05-17T15:18:19",
        "upload_time_iso_8601": "2020-05-17T15:18:19.361547Z",
        "url": "https://files.pythonhosted.org/packages/18/1f/409be00dec2d213c37038bc7129b17aea950ba78eaa01aedd59b19b071d1/py-gnuplot-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85fda10dabf517cc047968559ad85510a06198bfdd73671d5db9449689eda37c",
          "md5": "06d2ec15e83ff99932d38c753c77150d",
          "sha256": "a49874b31e7df7b8a0afc8966c71ed2f44d2f604d1bfbb742e1d855c2c67f049"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "06d2ec15e83ff99932d38c753c77150d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31309,
        "upload_time": "2020-05-18T07:38:52",
        "upload_time_iso_8601": "2020-05-18T07:38:52.239631Z",
        "url": "https://files.pythonhosted.org/packages/85/fd/a10dabf517cc047968559ad85510a06198bfdd73671d5db9449689eda37c/py-gnuplot-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede1621b097a46ec306f62ede922d99e3d65b5d77f9b9a7dd109f61712847a66",
          "md5": "5c62b9cb9f439c6aae5310fe0f37d382",
          "sha256": "d2f615b0d9113ff450910503ee93f9118bee0158eaeaf209c1ae666bd43ae5c0"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5c62b9cb9f439c6aae5310fe0f37d382",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28778,
        "upload_time": "2020-05-18T14:22:42",
        "upload_time_iso_8601": "2020-05-18T14:22:42.039535Z",
        "url": "https://files.pythonhosted.org/packages/ed/e1/621b097a46ec306f62ede922d99e3d65b5d77f9b9a7dd109f61712847a66/py-gnuplot-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc528fdbbfef48fa9db8b0ef0de20a32bfdf3f6321d869d9e756e5954b784278",
          "md5": "99e4a8bf0203b41b7639e546103ffeaf",
          "sha256": "1a7c7f4ccb277cdcdde1215e4e37463392d076c974c95d08593b21ac225ab352"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "99e4a8bf0203b41b7639e546103ffeaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33035,
        "upload_time": "2020-05-19T10:06:51",
        "upload_time_iso_8601": "2020-05-19T10:06:51.926447Z",
        "url": "https://files.pythonhosted.org/packages/cc/52/8fdbbfef48fa9db8b0ef0de20a32bfdf3f6321d869d9e756e5954b784278/py-gnuplot-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd5626f5e9b99e0a676bc9feba966b577386e03c713eb3ab1f27367111b6f19d",
          "md5": "679d82d4f1bb1f0e9af33fa72a5563bc",
          "sha256": "2b9e773ec62664d26e8646c465de0b08a7c6abf14f155973d7d0b1d2fbe29a79"
        },
        "downloads": -1,
        "filename": "py-gnuplot-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "679d82d4f1bb1f0e9af33fa72a5563bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25025,
        "upload_time": "2020-05-19T14:33:51",
        "upload_time_iso_8601": "2020-05-19T14:33:51.878554Z",
        "url": "https://files.pythonhosted.org/packages/dd/56/26f5e9b99e0a676bc9feba966b577386e03c713eb3ab1f27367111b6f19d/py-gnuplot-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f382e7345667fc20e7b29aef99ce163498efb52f4203cea5d316a64c55c4b34",
          "md5": "cb85d816dd3f07d480db9dfeeb06355a",
          "sha256": "06bbd88401563d309f87b4a2e9442534b41432c998ab87960aede2e880e98701"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb85d816dd3f07d480db9dfeeb06355a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26142,
        "upload_time": "2020-05-20T04:06:07",
        "upload_time_iso_8601": "2020-05-20T04:06:07.135810Z",
        "url": "https://files.pythonhosted.org/packages/7f/38/2e7345667fc20e7b29aef99ce163498efb52f4203cea5d316a64c55c4b34/py-gnuplot-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f2cc64498ee8510f675840fadcbf5e1123451ac7728e5af7e19a95e790154ec",
          "md5": "4d17fe08d847d2a54be6916650a937b7",
          "sha256": "db4b3e4ad01f3ce9d2e20429c8d1a8348944d05d4a70d5c077e2199603ebc0cf"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d17fe08d847d2a54be6916650a937b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33299,
        "upload_time": "2020-05-20T04:23:26",
        "upload_time_iso_8601": "2020-05-20T04:23:26.658750Z",
        "url": "https://files.pythonhosted.org/packages/1f/2c/c64498ee8510f675840fadcbf5e1123451ac7728e5af7e19a95e790154ec/py-gnuplot-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f54a00af945ce27034d657b1fcf47292a305e30f6931a481977979c1a6a53ab",
          "md5": "106394c020361921112478f07bdeb17e",
          "sha256": "ed0f5fbab813145433f9f653d111e158c08c307ec6f3c59558f7d4d1e98a733c"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "106394c020361921112478f07bdeb17e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32752,
        "upload_time": "2020-05-25T11:57:56",
        "upload_time_iso_8601": "2020-05-25T11:57:56.760076Z",
        "url": "https://files.pythonhosted.org/packages/4f/54/a00af945ce27034d657b1fcf47292a305e30f6931a481977979c1a6a53ab/py-gnuplot-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce76ec4ef59f0254261d95c30cc493eb4c5e3b9eba92f733357bfe8b68589089",
          "md5": "8bc3b8aba16c401a05eb4416b05b527e",
          "sha256": "b7ff813c09a02ac4da8f4175424b231e9a44bc64e74c0e0cd08a07ee46d5d180"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "8bc3b8aba16c401a05eb4416b05b527e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32862,
        "upload_time": "2020-05-27T03:20:39",
        "upload_time_iso_8601": "2020-05-27T03:20:39.421061Z",
        "url": "https://files.pythonhosted.org/packages/ce/76/ec4ef59f0254261d95c30cc493eb4c5e3b9eba92f733357bfe8b68589089/py-gnuplot-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c203ea2e9c9c96167a2174eedef535a98c4c7d8686af53b24bf156e8db004e9b",
          "md5": "c6ac189fdc3899d2f316d871ac05cdbc",
          "sha256": "14cbed6c7af5a7026e5832a9983c4f0c472bdac531daab1155672badf14d646d"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "c6ac189fdc3899d2f316d871ac05cdbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35594,
        "upload_time": "2020-05-28T02:17:12",
        "upload_time_iso_8601": "2020-05-28T02:17:12.270003Z",
        "url": "https://files.pythonhosted.org/packages/c2/03/ea2e9c9c96167a2174eedef535a98c4c7d8686af53b24bf156e8db004e9b/py-gnuplot-1.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cb4d831ee327f8dc90b7cb0fa93da0c6c410a6a8fb0ca226f53a2759c491954",
          "md5": "dc9f6018dd4a1bbf4d7c68d52ea6bff1",
          "sha256": "4ddcc2c40cd69966a46df2bc3633f758f241ea09873c88b15d311b73cea20210"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "dc9f6018dd4a1bbf4d7c68d52ea6bff1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35618,
        "upload_time": "2020-05-28T02:19:27",
        "upload_time_iso_8601": "2020-05-28T02:19:27.502373Z",
        "url": "https://files.pythonhosted.org/packages/4c/b4/d831ee327f8dc90b7cb0fa93da0c6c410a6a8fb0ca226f53a2759c491954/py-gnuplot-1.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3a80f17755667782222e19fc6c4bae3e9b2d0fad4c0e7aeedc3aca103514173",
          "md5": "43b6fe926bb29eaf14537c61db9f7fe5",
          "sha256": "0aac6ba81bd4f7330615a49138591c0f36f7a7dff134b0925a920419e7fa5df3"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "43b6fe926bb29eaf14537c61db9f7fe5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37947,
        "upload_time": "2020-05-29T02:31:12",
        "upload_time_iso_8601": "2020-05-29T02:31:12.898569Z",
        "url": "https://files.pythonhosted.org/packages/a3/a8/0f17755667782222e19fc6c4bae3e9b2d0fad4c0e7aeedc3aca103514173/py-gnuplot-1.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0328a540a5d9c843d02696df0b3093cfde2b81393be192d40ef9d90f6d75a072",
          "md5": "27ec12ee6cf0b5ae5b8d8fc733f4becc",
          "sha256": "a67355261415525ee50f443a5242e1fd59cc286c9c6adacf7d83274454ef11e9"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "27ec12ee6cf0b5ae5b8d8fc733f4becc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37442,
        "upload_time": "2020-05-31T04:23:31",
        "upload_time_iso_8601": "2020-05-31T04:23:31.499172Z",
        "url": "https://files.pythonhosted.org/packages/03/28/a540a5d9c843d02696df0b3093cfde2b81393be192d40ef9d90f6d75a072/py-gnuplot-1.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e42b3af4cda06a2e1792c3a25f3f22a3a859d73dd983f756ebc264d1b655bb7",
          "md5": "61369034099e1d86da45ebb26b4bc086",
          "sha256": "c30e791d7c763523f506a1cae08aa7e2d9594e84025c3fabf910162dd49f9c84"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "61369034099e1d86da45ebb26b4bc086",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38928,
        "upload_time": "2020-05-31T04:31:32",
        "upload_time_iso_8601": "2020-05-31T04:31:32.479828Z",
        "url": "https://files.pythonhosted.org/packages/1e/42/b3af4cda06a2e1792c3a25f3f22a3a859d73dd983f756ebc264d1b655bb7/py-gnuplot-1.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cb578daca885b51426fc237a78b73ff0a4cc81a655b725096767074dd24146c",
          "md5": "7f2395fa8ba2b10fb7df9e14d9ef514f",
          "sha256": "fc8e4de7da7d8e1fe5e001151b30dfa576ded83fb95a35764e14eb9d1659716e"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "7f2395fa8ba2b10fb7df9e14d9ef514f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39158,
        "upload_time": "2020-06-01T01:03:30",
        "upload_time_iso_8601": "2020-06-01T01:03:30.355228Z",
        "url": "https://files.pythonhosted.org/packages/6c/b5/78daca885b51426fc237a78b73ff0a4cc81a655b725096767074dd24146c/py-gnuplot-1.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "152c7c1524730dceafba8c6db227ce6e5e860d33315fc742ddebf6164ca7b61e",
          "md5": "c8486707a88fd53ee437d18cb8836bf8",
          "sha256": "f80a343e53f4e69eac45b360a7f4f12dfd91dd6fbe229d834b261efa60a709b5"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "c8486707a88fd53ee437d18cb8836bf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38330,
        "upload_time": "2020-06-01T03:00:54",
        "upload_time_iso_8601": "2020-06-01T03:00:54.190776Z",
        "url": "https://files.pythonhosted.org/packages/15/2c/7c1524730dceafba8c6db227ce6e5e860d33315fc742ddebf6164ca7b61e/py-gnuplot-1.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11dfb9f791619819d7c8029e81e13dc63fb8e609e0128677170b97db4baa51b7",
          "md5": "7c27da6295df38861c11f5f8888ff18f",
          "sha256": "b31b1e31bb8936fbab537ebd4543e9161f420a1bec6e6cc295b95e1c91af29c2"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "7c27da6295df38861c11f5f8888ff18f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38959,
        "upload_time": "2020-06-03T12:24:58",
        "upload_time_iso_8601": "2020-06-03T12:24:58.184762Z",
        "url": "https://files.pythonhosted.org/packages/11/df/b9f791619819d7c8029e81e13dc63fb8e609e0128677170b97db4baa51b7/py-gnuplot-1.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "218916bc1a6038a9409068db0878824223c2cb0b51de262e74157725ab5f4554",
          "md5": "6f353626ffeea051ba3d0afb0e7cf48d",
          "sha256": "7a2aff715dec66192c33226edc410bf3bf5a67c337f9ef735316ba35ccfe6758"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6f353626ffeea051ba3d0afb0e7cf48d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34273,
        "upload_time": "2020-05-21T10:00:18",
        "upload_time_iso_8601": "2020-05-21T10:00:18.558317Z",
        "url": "https://files.pythonhosted.org/packages/21/89/16bc1a6038a9409068db0878824223c2cb0b51de262e74157725ab5f4554/py-gnuplot-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88817ac4e6f0d9698b9d196722f61588425e45e0b6a918a7b9ac17424807784a",
          "md5": "a86d06ba89defb66c11d7fa506e7ebd9",
          "sha256": "228ac204d22a9442099b533cf207ec15246b800adb9d72a3524edc8eea4db9bc"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a86d06ba89defb66c11d7fa506e7ebd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34487,
        "upload_time": "2020-05-22T08:57:18",
        "upload_time_iso_8601": "2020-05-22T08:57:18.189536Z",
        "url": "https://files.pythonhosted.org/packages/88/81/7ac4e6f0d9698b9d196722f61588425e45e0b6a918a7b9ac17424807784a/py-gnuplot-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cc41e4f79de552e82441ab832a06705e4d564f7b870f629a81144a504ddaecf",
          "md5": "0d03343785b87f40019a26bd94d99aac",
          "sha256": "1bb301583d80a059b9db26a441cd8bb1492d55271ecd48e03adc34f14c22d217"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0d03343785b87f40019a26bd94d99aac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35625,
        "upload_time": "2020-05-23T14:34:55",
        "upload_time_iso_8601": "2020-05-23T14:34:55.911455Z",
        "url": "https://files.pythonhosted.org/packages/6c/c4/1e4f79de552e82441ab832a06705e4d564f7b870f629a81144a504ddaecf/py-gnuplot-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "589454f3cab7ae70d124f0d38a123c6ab064528d85cfd0496e5721e5353b55d7",
          "md5": "ebc7a086d66937fbccf6a92d4c9db1fa",
          "sha256": "c932ff3390dc210e43810df02c49a0d9377749fa3aba98ad4e98039c0b1e7d81"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ebc7a086d66937fbccf6a92d4c9db1fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35203,
        "upload_time": "2020-05-23T15:11:55",
        "upload_time_iso_8601": "2020-05-23T15:11:55.765551Z",
        "url": "https://files.pythonhosted.org/packages/58/94/54f3cab7ae70d124f0d38a123c6ab064528d85cfd0496e5721e5353b55d7/py-gnuplot-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3938b69b91e2ffa0e8299046699c16a915567236d24b048aa476826c045eb532",
          "md5": "1cd98400903c35c0526d237da2399ecf",
          "sha256": "59406ae4277cc8b350725263dd88e86758bd4321417a52325b6c7cd914534e1a"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1cd98400903c35c0526d237da2399ecf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35628,
        "upload_time": "2020-05-23T15:54:43",
        "upload_time_iso_8601": "2020-05-23T15:54:43.667518Z",
        "url": "https://files.pythonhosted.org/packages/39/38/b69b91e2ffa0e8299046699c16a915567236d24b048aa476826c045eb532/py-gnuplot-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c18e3767a8ccef50f2d275eda4c5e77f55859132421bc2e3dd24aa1b0339477",
          "md5": "0e7cb272eaa61925e109778be7ec56a4",
          "sha256": "d9f6624581fdbf11ac33afa5b86e16d07f5cf84e87aeb1b899a17fb8182a8388"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0e7cb272eaa61925e109778be7ec56a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36218,
        "upload_time": "2020-05-23T23:23:49",
        "upload_time_iso_8601": "2020-05-23T23:23:49.914515Z",
        "url": "https://files.pythonhosted.org/packages/3c/18/e3767a8ccef50f2d275eda4c5e77f55859132421bc2e3dd24aa1b0339477/py-gnuplot-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb004dd8c9711a70cb8dd9b8d28d543c7de0be1dff1ab4fbb844856e6c693841",
          "md5": "a2bdb0b641527eb487629172513079b0",
          "sha256": "8f01e1398dc521d5b99b3f781c4cd7837bcaba3b9fff09d1468c2bbb8d6f3032"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a2bdb0b641527eb487629172513079b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36456,
        "upload_time": "2020-05-24T03:29:43",
        "upload_time_iso_8601": "2020-05-24T03:29:43.134402Z",
        "url": "https://files.pythonhosted.org/packages/cb/00/4dd8c9711a70cb8dd9b8d28d543c7de0be1dff1ab4fbb844856e6c693841/py-gnuplot-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ac1dc3596dac6eefc6f7c91a8f52b4049ab462f9f4e1b28900ec02b5a148078",
          "md5": "1df8a3259036aea06f0a4ce24881b512",
          "sha256": "8d051b62d96e65d0f602284092d0a4b783054b9e543df909cea84f98beff1ee1"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "1df8a3259036aea06f0a4ce24881b512",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40003,
        "upload_time": "2020-05-25T07:59:20",
        "upload_time_iso_8601": "2020-05-25T07:59:20.897474Z",
        "url": "https://files.pythonhosted.org/packages/4a/c1/dc3596dac6eefc6f7c91a8f52b4049ab462f9f4e1b28900ec02b5a148078/py-gnuplot-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299bc4cb6a9eb1022c89db7fae8556b920f9fb27642b888bcbc7fc92523593b8",
          "md5": "edad3c35c1fdc4369d3ec7b04ec40289",
          "sha256": "2c3db213956ef580e055abfdd15dc63dc61089d43a777309e41a858d2748f536"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "edad3c35c1fdc4369d3ec7b04ec40289",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35663,
        "upload_time": "2020-06-05T02:30:21",
        "upload_time_iso_8601": "2020-06-05T02:30:21.885643Z",
        "url": "https://files.pythonhosted.org/packages/29/9b/c4cb6a9eb1022c89db7fae8556b920f9fb27642b888bcbc7fc92523593b8/py-gnuplot-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "949d999f4c225c5f2ff41af882255a9ef1c58e92e488ee334dbdb9062de3b46f",
          "md5": "d22b5ba3e968da78627b4132b2d217b2",
          "sha256": "33ef779e8158a3625bab3294d6d80532e7aaa53c5f084fdb62c9689cb9712759"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d22b5ba3e968da78627b4132b2d217b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35686,
        "upload_time": "2020-06-06T14:10:30",
        "upload_time_iso_8601": "2020-06-06T14:10:30.375864Z",
        "url": "https://files.pythonhosted.org/packages/94/9d/999f4c225c5f2ff41af882255a9ef1c58e92e488ee334dbdb9062de3b46f/py-gnuplot-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b3889e9413c093df9c74937180783648dc838180a0528e732556f0809194bb3",
          "md5": "e56bd7a746d7d8c6d7337be86ba6f41e",
          "sha256": "785b398b06e220003896c6e0cd974094e7607a89c0347d4f36696fdfcdb63ce8"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e56bd7a746d7d8c6d7337be86ba6f41e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35400,
        "upload_time": "2020-06-08T09:46:42",
        "upload_time_iso_8601": "2020-06-08T09:46:42.750902Z",
        "url": "https://files.pythonhosted.org/packages/4b/38/89e9413c093df9c74937180783648dc838180a0528e732556f0809194bb3/py-gnuplot-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a236ecebd017f0c53f010e121e2da9ae2119b044ae65fcc1dafac71fdd40dde1",
          "md5": "642b642831587bd94e43a3c7921884e2",
          "sha256": "4fe2637790fa65fa4a1b555ef185d975eaf45dfe5f19b16c5e6ec5902c7d99c2"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "642b642831587bd94e43a3c7921884e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36997,
        "upload_time": "2020-06-12T08:50:02",
        "upload_time_iso_8601": "2020-06-12T08:50:02.432218Z",
        "url": "https://files.pythonhosted.org/packages/a2/36/ecebd017f0c53f010e121e2da9ae2119b044ae65fcc1dafac71fdd40dde1/py-gnuplot-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8af6a1e98bfc5b72ad9f54e5b20f0070e58f25f9f1fff1900220f530936a95",
          "md5": "27823c161d868fbd2d640dff2568fbcb",
          "sha256": "8f75779150da3f5e6f76b6b19d806596b15acfd51b00eae7815235a17bd61d1e"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "27823c161d868fbd2d640dff2568fbcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36928,
        "upload_time": "2020-06-12T09:01:15",
        "upload_time_iso_8601": "2020-06-12T09:01:15.680153Z",
        "url": "https://files.pythonhosted.org/packages/bb/8a/f6a1e98bfc5b72ad9f54e5b20f0070e58f25f9f1fff1900220f530936a95/py-gnuplot-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9274a7b2bd5037792d224ec3bfb72156c8f0f7d5dc8d2767b8773d2eafb5af1c",
          "md5": "df3bd63daf91d3e1a34b779546ca8482",
          "sha256": "af7ab35a173cb1a6f6be123fc8a4bda410110755d898fdccf68227e93c1bdd97"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "df3bd63daf91d3e1a34b779546ca8482",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38326,
        "upload_time": "2020-06-15T07:02:36",
        "upload_time_iso_8601": "2020-06-15T07:02:36.114548Z",
        "url": "https://files.pythonhosted.org/packages/92/74/a7b2bd5037792d224ec3bfb72156c8f0f7d5dc8d2767b8773d2eafb5af1c/py-gnuplot-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f45cb425b4acab80419a9fd9dc83cc7d6885b95ae3225e32bf392775f78430",
          "md5": "ca87e4f976afa4763964be996dc19e34",
          "sha256": "aa46f53ee41297f5436bb5a1fb453892ffe286fb79fc7babe63653258ad2ec46"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ca87e4f976afa4763964be996dc19e34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40843,
        "upload_time": "2020-06-19T10:45:03",
        "upload_time_iso_8601": "2020-06-19T10:45:03.958777Z",
        "url": "https://files.pythonhosted.org/packages/e4/f4/5cb425b4acab80419a9fd9dc83cc7d6885b95ae3225e32bf392775f78430/py-gnuplot-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba65c45ef99617d0fd5b9fd032f917763d7a6f663d5a1911e793712d762c3647",
          "md5": "4a19adb1c5934543e9e4b1e62f9af580",
          "sha256": "f89e144a284e8bbcb403e2be925ee97ee273a0bc1ed7787a913c21e46c9b0fa9"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "4a19adb1c5934543e9e4b1e62f9af580",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41579,
        "upload_time": "2020-07-14T07:57:21",
        "upload_time_iso_8601": "2020-07-14T07:57:21.799634Z",
        "url": "https://files.pythonhosted.org/packages/ba/65/c45ef99617d0fd5b9fd032f917763d7a6f663d5a1911e793712d762c3647/py-gnuplot-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e3f2da7ee9232f8102ccbdef80b681d98ab286edd11b2320632f943c7828899",
          "md5": "7d2a6529b05b69121c6948dbc43bb73d",
          "sha256": "9c1404de6c27c76a5f43418a04c76c7706eb5238ba89781babae14280bfd1ada"
        },
        "downloads": -1,
        "filename": "py-gnuplot-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7d2a6529b05b69121c6948dbc43bb73d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41028,
        "upload_time": "2021-06-12T03:53:01",
        "upload_time_iso_8601": "2021-06-12T03:53:01.911343Z",
        "url": "https://files.pythonhosted.org/packages/1e/3f/2da7ee9232f8102ccbdef80b681d98ab286edd11b2320632f943c7828899/py-gnuplot-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e3f2da7ee9232f8102ccbdef80b681d98ab286edd11b2320632f943c7828899",
        "md5": "7d2a6529b05b69121c6948dbc43bb73d",
        "sha256": "9c1404de6c27c76a5f43418a04c76c7706eb5238ba89781babae14280bfd1ada"
      },
      "downloads": -1,
      "filename": "py-gnuplot-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "7d2a6529b05b69121c6948dbc43bb73d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 41028,
      "upload_time": "2021-06-12T03:53:01",
      "upload_time_iso_8601": "2021-06-12T03:53:01.911343Z",
      "url": "https://files.pythonhosted.org/packages/1e/3f/2da7ee9232f8102ccbdef80b681d98ab286edd11b2320632f943c7828899/py-gnuplot-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}