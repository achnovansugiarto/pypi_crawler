{
  "info": {
    "author": "Roman Grigoriev",
    "author_email": "hjklvfr@list.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# pdf2img\nport to python 2\n\nA python (3.5+) module that wraps pdftoppm and pdftocairo to convert PDF to a PIL Image object\n\n## How to install\n\n`pip install pdf2image`\n\n### Windows\n\nWindows users will have to build or download poppler for Windows. I recommend [@oschwartz10612 version](https://github.com/oschwartz10612/poppler-windows/releases/) which is the most up-to-date. You will then have to add the `bin/` folder to [PATH](https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/) or use `poppler_path = r\"C:\\path\\to\\poppler-xx\\bin\" as an argument` in `convert_from_path`.\n\n### Mac\n\nMac users will have to install [poppler for Mac](http://macappstore.org/poppler/).\n\n### Linux\n\nMost distros ship with `pdftoppm` and `pdftocairo`. If they are not installed, refer to your package manager to install `poppler-utils`\n\n### Platform-independant (Using `conda`)\n\n1. Install poppler: `conda install -c conda-forge poppler`\n2. Install pdf2image: `pip install pdf2image`\n\n## How does it work?\n\n`from pdf2image import convert_from_path, convert_from_bytes`\n\n```py\nfrom pdf2image.exceptions import (\n    PDFInfoNotInstalledError,\n    PDFPageCountError,\n    PDFSyntaxError\n)\n```\n\nThen simply do:\n\n```py\nimages = convert_from_path('/home/belval/example.pdf')\n```\n\nOR\n\n```py\nimages = convert_from_bytes(open('/home/belval/example.pdf', 'rb').read())\n```\n\nOR better yet\n\n```py\nimport tempfile\n\nwith tempfile.TemporaryDirectory() as path:\n    images_from_path = convert_from_path('/home/belval/example.pdf', output_folder=path)\n    # Do something here\n```\n\n`images` will be a list of PIL Image representing each page of the PDF document.\n\nHere are the definitions:\n\n`convert_from_path(pdf_path, dpi=200, output_folder=None, first_page=None, last_page=None, fmt='ppm', jpegopt=None, thread_count=1, userpw=None, use_cropbox=False, strict=False, transparent=False, single_file=False, output_file=str(uuid.uuid4()), poppler_path=None, grayscale=False, size=None, paths_only=False, use_pdftocairo=False, timeout=600)`\n\n`convert_from_bytes(pdf_file, dpi=200, output_folder=None, first_page=None, last_page=None, fmt='ppm', jpegopt=None, thread_count=1, userpw=None, use_cropbox=False, strict=False, transparent=False, single_file=False, output_file=str(uuid.uuid4()), poppler_path=None, grayscale=False, size=None, paths_only=False, use_pdftocairo=False, timeout=600)`\n\n## Need help?\n\nUse the [mattermost chat](https://mattermost.belval.org/signup_user_complete/?id=3anaj34563rqjg4xm5tdcmu7qa) to ask questions on the helpdesk and get direct support.\n\n## What's new?\n\n- Add `timeout` parameter which raises `PDFPopplerTimeoutError` after the given number of seconds.\n- Add `use_pdftocairo` parameter which forces `pdf2image` to use `pdftocairo`. Should improve performance.\n- Fixed a bug where using `pdf2image` with multiple threads (but not multiple processes) would cause and exception\n- `jpegopt` parameter allows for tuning of the output JPEG when using `fmt=\"jpeg\"` (`-jpegopt` in pdftoppm CLI) (Thank you @abieler)\n- `pdfinfo_from_path` and `pdfinfo_from_bytes` which expose the output of the pdfinfo CLI\n- `paths_only` parameter will return image paths instead of Image objects, to prevent OOM when converting a big PDF\n- `size` parameter allows you to define the shape of the resulting images (`-scale-to` in pdftoppm CLI)\n    - `size=400`Â will fit the image to a 400x400 box, preserving aspect ratio\n    - `size=(400, None)` will make the image 400 pixels wide, preserving aspect ratio\n    - `size=(500, 500)` will resize the image to 500x500 pixels, not preserving aspect ratio\n- `grayscale` parameter allows you to convert images to grayscale (`-gray` in pdftoppm CLI)\n- `single_file` parameter allows you to convert the first PDF page only, without adding digits at the end of the `output_file`\n- Allow the user to specify poppler's installation path with `poppler_path`\n\n## Performance tips\n\n- Using an output folder is significantly faster if you are using an SSD. Otherwise i/o usually becomes the bottleneck.\n- Using multiple threads can give you some gains but avoid more than 4 as this will cause i/o bottleneck (even on my NVMe SSD!).\n- If i/o is your bottleneck, using the JPEG format can lead to significant gains.\n- PNG format is pretty slow, this is because of the compression.\n- If you want to know the best settings (most settings will be fine anyway) you can clone the project and run `python tests.py` to get timings.\n\n## Limitations / known issues\n\n- A relatively big PDF will use up all your memory and cause the process to be killed (unless you use an output folder)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Belval/pdf2image",
    "keywords": "pdf image png jpeg jpg convert",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pdf2img",
    "package_url": "https://pypi.org/project/pdf2img/",
    "platform": "",
    "project_url": "https://pypi.org/project/pdf2img/",
    "project_urls": {
      "Homepage": "https://github.com/Belval/pdf2image"
    },
    "release_url": "https://pypi.org/project/pdf2img/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A wrapper around the pdftoppm and pdftocairo command line tools to convert PDF to a PIL Image list.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9866948,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88f615c0e5825c2702d8a6b5cd3256f97505e2ca201da59ff21f32a963d90edf",
          "md5": "5176beac0b6bc855ebabf68cb2dc1a7f",
          "sha256": "10065d69274d768814406ed2c0305d514feea6d728b25c519baac30b2dd1da78"
        },
        "downloads": -1,
        "filename": "pdf2img-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5176beac0b6bc855ebabf68cb2dc1a7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8476,
        "upload_time": "2021-03-24T13:16:12",
        "upload_time_iso_8601": "2021-03-24T13:16:12.606220Z",
        "url": "https://files.pythonhosted.org/packages/88/f6/15c0e5825c2702d8a6b5cd3256f97505e2ca201da59ff21f32a963d90edf/pdf2img-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91eab09760cb556b11e87f8e8f933f2ed6644db85caf5d9f4fa0493357ff0cac",
          "md5": "881d7e326d98ecccea3d1dfd1808d5e5",
          "sha256": "05995d59f45af03639793fc2ae7c7343f62c2f3791a0085cfd73ed39d3a4a42f"
        },
        "downloads": -1,
        "filename": "pdf2img-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "881d7e326d98ecccea3d1dfd1808d5e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8486,
        "upload_time": "2021-03-24T13:31:57",
        "upload_time_iso_8601": "2021-03-24T13:31:57.967998Z",
        "url": "https://files.pythonhosted.org/packages/91/ea/b09760cb556b11e87f8e8f933f2ed6644db85caf5d9f4fa0493357ff0cac/pdf2img-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f251b7d80905b2562e71af2c6473c5684feedb4e4269a900e5f9bb444f26ccf3",
          "md5": "717a35f765b3f3726596abc38407f95c",
          "sha256": "3695ddd081bf66c8919224aec7c6faa753ccdae211dafc2aeeba1750a2a5f907"
        },
        "downloads": -1,
        "filename": "pdf2img-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "717a35f765b3f3726596abc38407f95c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8486,
        "upload_time": "2021-03-24T14:45:54",
        "upload_time_iso_8601": "2021-03-24T14:45:54.526444Z",
        "url": "https://files.pythonhosted.org/packages/f2/51/b7d80905b2562e71af2c6473c5684feedb4e4269a900e5f9bb444f26ccf3/pdf2img-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f251b7d80905b2562e71af2c6473c5684feedb4e4269a900e5f9bb444f26ccf3",
        "md5": "717a35f765b3f3726596abc38407f95c",
        "sha256": "3695ddd081bf66c8919224aec7c6faa753ccdae211dafc2aeeba1750a2a5f907"
      },
      "downloads": -1,
      "filename": "pdf2img-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "717a35f765b3f3726596abc38407f95c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8486,
      "upload_time": "2021-03-24T14:45:54",
      "upload_time_iso_8601": "2021-03-24T14:45:54.526444Z",
      "url": "https://files.pythonhosted.org/packages/f2/51/b7d80905b2562e71af2c6473c5684feedb4e4269a900e5f9bb444f26ccf3/pdf2img-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}