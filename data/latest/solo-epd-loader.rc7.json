{
  "info": {
    "author": "Jan Gieseler",
    "author_email": "jan.gieseler@utu.fi",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "solo-epd-loader\n===============\n\n|pypi Version| |conda version| |license| |python version| |zenodo doi|\n\n.. |pypi Version| image:: https://img.shields.io/pypi/v/solo-epd-loader?style=flat&logo=pypi\n   :target: https://pypi.org/project/solo-epd-loader/\n.. |conda version| image:: https://img.shields.io/conda/vn/conda-forge/solo-epd-loader?style=flat&logo=anaconda\n   :target: https://anaconda.org/conda-forge/solo-epd-loader/\n.. |license| image:: https://img.shields.io/conda/l/conda-forge/solo-epd-loader?style=flat\n   :target: https://github.com/jgieseler/solo-epd-loader/blob/main/LICENSE.rst\n.. |python version| image:: https://img.shields.io/pypi/pyversions/solo-epd-loader?style=flat&logo=python\n.. |zenodo doi| image:: https://zenodo.org/badge/446889843.svg\n   :target: https://zenodo.org/badge/latestdoi/446889843\n\nPython data loader for Solar Orbiter's (SolO) `Energetic Particle Detector (EPD) <http://espada.uah.es/epd/>`_. At the moment provides level 2 (l2) and low latency (ll) data (`more details on data levels here <http://espada.uah.es/epd/EPD_data_overview.php>`_) obtained through CDF files from ESA's `Solar Orbiter Archive (SOAR) <http://soar.esac.esa.int/soar>`_ for the following sensors:\n\n- Electron Proton Telescope (EPT)\n- High Energy Telescope (HET)\n- SupraThermal Electrons and Protons (STEP)\n\nCurrent caveats:\n\n- Only the standard ``rates`` data products are supported (i.e., no ``burst`` or ``high cadence`` data).\n- Only electrons, protons and alpha particles are processed (i.e., for HET He3, He4, C, N, O, Fe are omitted at the moment).\n- For STEP, the sectored data is not yet available, and data is only available until Oct 2021 due to the change of the data product (will be updated soon).\n- The Suprathermal Ion Spectrograph (SIS) is not yet included. \n\nDisclaimer\n----------\nThis software is provided \"as is\", with no guarantee. It is no official data source, and not officially endorsed by the corresponding instrument teams. **Please always refer to the** `official EPD data description <http://espada.uah.es/epd/EPD_data.php>`_ **before using the data!**\n\nInstallation\n------------\n\nsolo_epd_loader requires python >= 3.6.\n\nIt can be installed either from `PyPI <https://pypi.org/project/solo-epd-loader/>`_ using:\n\n.. code:: bash\n\n    pip install solo-epd-loader\n\nor from `Anaconda <https://anaconda.org/conda-forge/solo-epd-loader/>`_ using:\n\n.. code:: bash\n\n    conda install -c conda-forge solo-epd-loader\n\nUsage\n-----\n\nThe standard usecase is to utilize the ``epd_load`` function, which\nreturns Pandas dataframe(s) of the EPD measurements and a dictionary\ncontaining information on the energy channels.\n\n.. code:: python\n\n   from solo_epd_loader import epd_load\n\n   df_1, df_2, energies = \\\n       epd_load(sensor, level, startdate, enddate=None, viewing=None, path=None, autodownload=False)\n\nInput\n~~~~~\n\n-  ``sensor``: ``'ept'``, ``'het'``, or ``'step'`` (string)\n-  ``level``: ``'ll'`` or ``'l2'`` (string)\n-  ``startdate``, ``enddate``: Datetime object (e.g., ``dt.date(2021,12,31)`` or ``dt.datetime(2021,4,15)``) or integer of the form yyyymmdd with empty positions filled with zeros, e.g. ``20210415`` (if no ``enddate`` is provided, ``enddate = startdate`` will be used)\n-  ``viewing``: ``'sun'``, ``'asun'``, ``'north'``, ``'south'`` (string) or ``None``; not\n   needed for ``sensor = 'step'``\n-  ``path``: directory in which Solar Orbiter data is/should be\n   organized; e.g. ``'/home/userxyz/solo/data/'`` (string). See `Data folder structure`_ for more details.\n-  ``autodownload``: if ``True`` will try to download missing data files\n   from SOAR (bolean)\n\nReturn\n~~~~~~\n\n-  For ``sensor`` = ``'ept'`` or ``'het'``:\n\n   1. Pandas dataframe with proton fluxes and errors (for EPT also alpha\n      particles) in ‘particles / (s cm^2 sr MeV)’\n   2. Pandas dataframe with electron fluxes and errors in ‘particles /\n      (s cm^2 sr MeV)’\n   3. Dictionary with energy information for all particles:\n\n      -  String with energy channel info\n      -  Value of lower energy bin edge in MeV\n      -  Value of energy bin width in MeV\n\n-  For ``sensor`` = ``'step'``:\n\n   1. Pandas dataframe with fluxes and errors in ‘particles / (s cm^2 sr\n      MeV)’\n   2. Dictionary with energy information for all particles:\n\n      -  String with energy channel info\n      -  Value of lower energy bin edge in MeV\n      -  Value of energy bin width in MeV\n\nData folder structure\n---------------------\n\nThe ``path`` variable provided to the module should be the base\ndirectory where the corresponding cdf data files should be placed in\nsubdirectories. First subfolder defines the data product ``level``\n(``l2`` or ``low_latency`` at the moment), the next one the\n``instrument`` (so far only ``epd``), and finally the ``sensor``\n(``ept``, ``het`` or ``step``).\n\nFor example, the folder structure could look like this:\n``/home/userxyz/solo/data/l2/epd/het``. In this case, you should call\nthe loader with ``path='/home/userxyz/solo/data'``; i.e., the base\ndirectory for the data.\n\nYou can use the (automatic) download function described in the following\nsection to let the subfolders be created initially automatically. NB: It might\nbe that you need to run the code with *sudo* or *admin* privileges in order to\nbe able to create new folders on your system.\n\nData download within Python\n---------------------------\n\nWhile using ``epd_load()`` to obtain the data, one can choose to automatically\ndownload missing data files from `SOAR <http://soar.esac.esa.int/soar>`_\ndirectly from within python. They are saved in the folder provided by the\n``path`` argument (see above). For that, just add ``autodownload=True`` to the\nfunction call:\n\n.. code:: python\n\n   from solo_epd_loader import epd_load\n\n   df_protons, df_electrons, energies = \\\n       epd_load(sensor='het', level='l2', startdate=20200820,\n                enddate=20200821, viewing='sun',\n                path='/home/userxyz/solo/data/', autodownload=True)\n\n   # plot protons and alphas\n   ax = df_protons.plot(logy=True, subplots=True, figsize=(20,60))\n   plt.show()\n\n   # plot electrons\n   ax = df_electrons.plot(logy=True, subplots=True, figsize=(20,60))\n   plt.show()\n\nNote: The code will always download the *latest version* of the file\navailable at SOAR. So in case a file ``V01.cdf`` is already locally\npresent, ``V02.cdf`` will be downloaded nonetheless.\n\nExample 1 - low latency data\n----------------------------\n\nExample code that loads low latency (ll) electron and proton (+alphas)\nfluxes (and errors) for EPT NORTH telescope from Apr 15 2021 to Apr 16\n2021 into two Pandas dataframes (one for protons & alphas, one for\nelectrons). In general available are ‘sun’, ‘asun’, ‘north’, and ‘south’\nviewing directions for ‘ept’ and ‘het’ telescopes of SolO/EPD.\n\n.. code:: python\n\n   from matplotlib import pyplot as plt\n   from solo_epd_loader import epd_load\n\n   df_protons, df_electrons, energies = \\\n       epd_load(sensor='ept', level='ll', startdate=20210415,\n                enddate=20210416, viewing='north',\n                path='/home/userxyz/solo/data/')\n\n   # plot protons and alphas\n   ax = df_protons.plot(logy=True, subplots=True, figsize=(20,60))\n   plt.show()\n\n   # plot electrons\n   ax = df_electrons.plot(logy=True, subplots=True, figsize=(20,60))\n   plt.show()\n\nExample 2 - level 2 data\n------------------------\n\nExample code that loads level 2 (l2) electron and proton (+alphas)\nfluxes (and errors) for HET SUN telescope from Aug 20 2020 to Aug 20\n2020 into two Pandas dataframes (one for protons & alphas, one for\nelectrons).\n\n.. code:: python\n\n   from matplotlib import pyplot as plt\n   from solo_epd_loader import epd_load\n\n   df_protons, df_electrons, energies = \\\n       epd_load(sensor='het', level='l2', startdate=20200820,\n                enddate=20200821, viewing='sun',\n                path='/home/userxyz/solo/data/')\n\n   # plot protons and alphas\n   ax = df_protons.plot(logy=True, subplots=True, figsize=(20,60))\n   plt.show()\n\n   # plot electrons\n   ax = df_electrons.plot(logy=True, subplots=True, figsize=(20,60))\n   plt.show()\n\nExample 3 - partly reproducing `Fig. 2 <https://www.aanda.org/articles/aa/full_html/2021/12/aa39883-20/F2.html>`_ from Gómez-Herrero et al. 2021 [#]_\n-----------------------------------------------------------------------------------------------------------------------------------------------------\n\n.. code:: python\n\n   from matplotlib import pyplot as plt\n   from solo_epd_loader import epd_load\n   import numpy as np\n\n   # set your local path here\n   lpath = '/home/userxyz/solo/data'\n\n   # load ept sun viewing data\n   df_protons_ept, df_electrons_ept, energies_ept = \\\n      epd_load(sensor='ept', level='l2', startdate=20200708, \n               enddate=20200724, viewing='sun', path=lpath, autodownload=True)\n\n   # load step data             \n   df_step, energies_step = \\\n      epd_load(sensor='step', level='l2', startdate=20200708,\n               enddate=20200724, path=lpath, autodownload=True)\n\n   # change time resolution to get smoother curve (resample with mean)\n   resample = '60min'\n\n   fig, axs = plt.subplots(2, sharex=True, figsize=(8, 10), dpi=200)\n   axs[0].set_prop_cycle('color', plt.cm.Oranges_r(np.linspace(0,1,7)))\n   axs[1].set_prop_cycle('color', plt.cm.winter(np.linspace(0,1,7)))\n\n   # plot selection of ept electron channels\n   for channel in [0, 8, 16, 26]:\n      df_electrons_ept['Electron_Flux'][f'Electron_Flux_{channel}'].resample(resample).mean().plot(\n         ax = axs[0], logy=True, label='EPT '+energies_ept[\"Electron_Bins_Text\"][channel][0])\n\n   # plot selection of step ion channels\n   for channel in [8, 17, 33]:\n      df_step['Magnet_Flux'][channel].resample(resample).mean().plot(\n         ax = axs[1], logy=True, label='STEP '+energies_step[\"Bins_Text\"][channel][0])\n\n   # plot selection of ept ion channels\n   for channel in [6, 22, 32, 48]:\n      df_protons_ept['Ion_Flux'][f'Ion_Flux_{channel}'].resample(resample).mean().plot(\n         ax = axs[1], logy=True, label='EPT '+energies_ept[\"Ion_Bins_Text\"][channel][0])\n\n   axs[0].set_ylim([0.3, 4e6])\n   axs[1].set_ylim([0.01, 5e8])\n\n   axs[0].set_ylabel(\"Electron flux\\n\"+r\"(cm$^2$ sr s MeV)$^{-1}$\")\n   axs[1].set_ylabel(\"Ion flux\\n\"+r\"(cm$^2$ sr s MeV)$^{-1}$\")\n   axs[0].legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n   axs[1].legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n   plt.subplots_adjust(hspace=0)\n   fig.savefig(\"gh2021_fig_2.png\", bbox_inches = \"tight\")\n   plt.close('all')\n\n**NB: This is just an approximate reproduction with different energy\nchannels, different time resolution, and different viewing direction!\nNote also that the STEP data can not be used straightforwardly.**\n|Figure|\n\nExample 4 - partly reproducing `Fig. 2e <https://www.aanda.org/articles/aa/full_html/2021/12/aa40940-21/F2.html>`_ from Wimmer-Schweingruber et al. 2021 [#]_ \n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n.. code:: python\n\n   from matplotlib import pyplot as plt\n   from solo_epd_loader import epd_load\n   import datetime\n   import pandas as pd\n\n   # set your local path here\n   lpath = '/home/userxyz/solo/data'\n\n   # load data\n   df_protons_sun, df_electrons_sun, energies = \\\n       epd_load(sensor='ept', level='l2', startdate=20201210,\n                enddate=20201211, viewing='sun',\n                path=lpath, autodownload=True)\n   df_protons_asun, df_electrons_asun, energies = \\\n       epd_load(sensor='ept', level='l2', startdate=20201210,\n                enddate=20201211, viewing='asun',\n                path=lpath, autodownload=True)\n   df_protons_south, df_electrons_south, energies = \\\n       epd_load(sensor='ept', level='l2', startdate=20201210,\n                enddate=20201211, viewing='south',\n                path=lpath, autodownload=True)\n   df_protons_north, df_electrons_north, energies = \\\n       epd_load(sensor='ept', level='l2', startdate=20201210,\n                enddate=20201211, viewing='north',\n                path=lpath, autodownload=True)\n\n   # plot mean intensities of two energy channels; 'channel' defines the lower one\n   channel = 6\n   ax = pd.concat([df_electrons_sun['Electron_Flux'][f'Electron_Flux_{channel}'],\n                   df_electrons_sun['Electron_Flux'][f'Electron_Flux_{channel+1}']],\n                   axis=1).mean(axis=1).plot(logy=True, label='sun', color='#d62728')\n   ax = pd.concat([df_electrons_asun['Electron_Flux'][f'Electron_Flux_{channel}'],\n                   df_electrons_asun['Electron_Flux'][f'Electron_Flux_{channel+1}']],\n                   axis=1).mean(axis=1).plot(logy=True, label='asun', color='#ff7f0e')\n   ax = pd.concat([df_electrons_north['Electron_Flux'][f'Electron_Flux_{channel}'],\n                   df_electrons_north['Electron_Flux'][f'Electron_Flux_{channel+1}']],\n                   axis=1).mean(axis=1).plot(logy=True, label='north', color='#1f77b4')\n   ax = pd.concat([df_electrons_south['Electron_Flux'][f'Electron_Flux_{channel}'],\n                   df_electrons_south['Electron_Flux'][f'Electron_Flux_{channel+1}']],\n                   axis=1).mean(axis=1).plot(logy=True, label='south', color='#2ca02c')\n\n   plt.xlim([datetime.datetime(2020, 12, 10, 23, 0), \n             datetime.datetime(2020, 12, 11, 12, 0)])\n\n   ax.set_ylabel(\"Electron flux\\n\"+r\"(cm$^2$ sr s MeV)$^{-1}$\")\n   plt.title('EPT electrons ('+str(energies['Electron_Bins_Low_Energy'][channel])\n             + '-' + str(energies['Electron_Bins_Low_Energy'][channel+2])+' MeV)')\n   plt.legend()\n   plt.show()\n\n**NB: This is just an approximate reproduction; e.g., the channel\ncombination is a over-simplified approximation!** |image1|\n\nReferences\n----------\n\n.. [#] First near-relativistic solar electron events observed by EPD onboard Solar Orbiter, Gómez-Herrero et al., A&A, 656 (2021) L3, https://doi.org/10.1051/0004-6361/202039883\n\n.. [#] First year of energetic particle measurements in the inner heliosphere with Solar Orbiter’s Energetic Particle Detector, Wimmer-Schweingruber et al., A&A, 656 (2021) A22, https://doi.org/10.1051/0004-6361/202140940\n\n.. |Figure| image:: https://github.com/jgieseler/solo-epd-loader/raw/main/examples/gh2021_fig_2.png\n.. |image1| image:: https://github.com/jgieseler/solo-epd-loader/raw/main/examples/ws2021_fig_2d.png\n\nLicense\n-------\n\nThis project is Copyright (c) Jan Gieseler and licensed under\nthe terms of the BSD 3-clause license. This package is based upon\nthe `Openastronomy packaging guide <https://github.com/OpenAstronomy/packaging-guide>`_\nwhich is licensed under the BSD 3-clause license. See the licenses folder for\nmore information.\n\nAcknowledgements\n----------------\n\nThe development of this software has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 101004159 (SERPENTINE).\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jgieseler/solo-epd-loader",
    "keywords": "",
    "license": "BSD 3-clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "solo-epd-loader",
    "package_url": "https://pypi.org/project/solo-epd-loader/",
    "platform": null,
    "project_url": "https://pypi.org/project/solo-epd-loader/",
    "project_urls": {
      "Homepage": "https://github.com/jgieseler/solo-epd-loader"
    },
    "release_url": "https://pypi.org/project/solo-epd-loader/0.1.11/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Data loader for Solar Orbiter/EPD energetic charged particle sensors EPT, HET, and STEP.",
    "version": "0.1.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15399510,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb0c0e77ae95f953fa36b64be5733d4703ad4662438b408d3d5aa162d8ca6c83",
          "md5": "49653c765b583e3c0cbeb88b0ce3f492",
          "sha256": "62ad63237543bafcce82a5636c2aae6b17863e04ea91fda90b7c10b8821f439a"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "49653c765b583e3c0cbeb88b0ce3f492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 255265,
        "upload_time": "2022-01-12T15:21:51",
        "upload_time_iso_8601": "2022-01-12T15:21:51.898675Z",
        "url": "https://files.pythonhosted.org/packages/bb/0c/0e77ae95f953fa36b64be5733d4703ad4662438b408d3d5aa162d8ca6c83/solo_epd_loader-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46b5e51d028d571c7148ee7b9231673f89a66153176793766a35cd687a45b34d",
          "md5": "f8ab75b21472b178cf9b644a94d53464",
          "sha256": "e0a5a2e6f84ea3090f139d4abc799f1b94903e8a2e3d2aa672a34c94e948a8cc"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f8ab75b21472b178cf9b644a94d53464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1616680,
        "upload_time": "2022-05-20T07:43:16",
        "upload_time_iso_8601": "2022-05-20T07:43:16.870310Z",
        "url": "https://files.pythonhosted.org/packages/46/b5/e51d028d571c7148ee7b9231673f89a66153176793766a35cd687a45b34d/solo_epd_loader-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "068fb7bfb641f8e6ed3a65beff9ca9f8a95311cda3f6cc8c443bd90cdf208085",
          "md5": "5127af63706e8ba1216f786ae3e03469",
          "sha256": "3344e7584e822bc19d061c5477d9b912dd0db722cab807bf480c9abf89443186"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "5127af63706e8ba1216f786ae3e03469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1624334,
        "upload_time": "2022-10-13T14:10:05",
        "upload_time_iso_8601": "2022-10-13T14:10:05.556743Z",
        "url": "https://files.pythonhosted.org/packages/06/8f/b7bfb641f8e6ed3a65beff9ca9f8a95311cda3f6cc8c443bd90cdf208085/solo_epd_loader-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99e6630214cd70f2c6c11e34890c063da833b56ce6a2d829211eaee1333aa647",
          "md5": "0669752fd5e702032efe0d5654da804e",
          "sha256": "553f97e4b80f4ff111f987b843431409ca271d9e67cab6aece0abc55cb466c61"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0669752fd5e702032efe0d5654da804e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 602846,
        "upload_time": "2022-01-26T15:54:29",
        "upload_time_iso_8601": "2022-01-26T15:54:29.220569Z",
        "url": "https://files.pythonhosted.org/packages/99/e6/630214cd70f2c6c11e34890c063da833b56ce6a2d829211eaee1333aa647/solo_epd_loader-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1050b6e35f3e8fd3c3b89fad42b438c8306af28754cf2f60cb2d1330244e370",
          "md5": "da53d1c9d16c43394a152d66fa7bdcd4",
          "sha256": "5ee1a66c2e4738892a0f7cf64dd5d2b5fa856e1738ff6ff61b9b49ff5a719fb0"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "da53d1c9d16c43394a152d66fa7bdcd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 603703,
        "upload_time": "2022-03-02T13:34:11",
        "upload_time_iso_8601": "2022-03-02T13:34:11.901851Z",
        "url": "https://files.pythonhosted.org/packages/d1/05/0b6e35f3e8fd3c3b89fad42b438c8306af28754cf2f60cb2d1330244e370/solo_epd_loader-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6936003b45134be1e12abebe77c1847d51111b53981e8f591e697f74cd662e7",
          "md5": "90c2b9d7899523bc96391b68bf68fcc7",
          "sha256": "e08d729d9a549caa831fc5e1de7ed568d2a49cb8e4f88b1e91a13fd64d122cfe"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "90c2b9d7899523bc96391b68bf68fcc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1615019,
        "upload_time": "2022-03-29T15:34:28",
        "upload_time_iso_8601": "2022-03-29T15:34:28.001427Z",
        "url": "https://files.pythonhosted.org/packages/a6/93/6003b45134be1e12abebe77c1847d51111b53981e8f591e697f74cd662e7/solo_epd_loader-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bacd63c679d659a63f587470ac4f7e7d3123ef00eca80b2712f859282fac189a",
          "md5": "73ade9a63d0aa1ca2e4cdca90830a7fb",
          "sha256": "8faef8f1591a3e40f85b0db04e132bdddcbd726f81772b898d9d0934cd291863"
        },
        "downloads": -1,
        "filename": "solo_epd_loader-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "73ade9a63d0aa1ca2e4cdca90830a7fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1615178,
        "upload_time": "2022-03-30T13:44:53",
        "upload_time_iso_8601": "2022-03-30T13:44:53.429434Z",
        "url": "https://files.pythonhosted.org/packages/ba/cd/63c679d659a63f587470ac4f7e7d3123ef00eca80b2712f859282fac189a/solo_epd_loader-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "068fb7bfb641f8e6ed3a65beff9ca9f8a95311cda3f6cc8c443bd90cdf208085",
        "md5": "5127af63706e8ba1216f786ae3e03469",
        "sha256": "3344e7584e822bc19d061c5477d9b912dd0db722cab807bf480c9abf89443186"
      },
      "downloads": -1,
      "filename": "solo_epd_loader-0.1.11.tar.gz",
      "has_sig": false,
      "md5_digest": "5127af63706e8ba1216f786ae3e03469",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1624334,
      "upload_time": "2022-10-13T14:10:05",
      "upload_time_iso_8601": "2022-10-13T14:10:05.556743Z",
      "url": "https://files.pythonhosted.org/packages/06/8f/b7bfb641f8e6ed3a65beff9ca9f8a95311cda3f6cc8c443bd90cdf208085/solo_epd_loader-0.1.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}