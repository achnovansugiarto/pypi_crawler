{
  "info": {
    "author": "Tzu-ping Chung",
    "author_email": "uranusjr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# `websockets-routes`\n\n`websockets` [does not do routing](https://github.com/aaugustin/websockets/issues/311), and I don't like Sanic, so I rolled my own.\n\nRouting backed by [`Routes`](https://routes.readthedocs.io/en/latest/).\n\n\n## Usage\n\nDecorate your handlers by path, and serve the router.\n\n```python\nimport asyncio\n\nimport websockets\nimport websockets_routes\n\nrouter = websockets_routes.Router()\n\n@router.route(\"/thing/\")\nasync def thing_list(ws, path):\n    ...\n\nstart_server = websockets.serve(router.handle, ...)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(start_server)\nloop.run_forever()\n```\n\nBy default, connections are closed immediately with 4040 if the URL does not match any of the registered routes.\n\n\n### Block connections during handshake\n\nThe router has its own `serve()` method that overrides the `process_request()`\nhook, making the server return an HTTP 404 during the handshake phase instead:\n\n```python\nstart_server = router.serve(...)\n```\n\nThis way, a non-matching client never connects to the websocket handler at all.\n\nThe override is implemented via a custom [WebSocket protocol], so you can\nsubclass that if you need further customisation:\n\n```python\nclass MyProtocol(websockets_routes.Protocol):\n    ...\n\nstart_server = websockets.serve(\n    router,\n    ...,\n    create_protocol=MyProtocol,\n    ...,\n)\n```\n\n[WebSocket protocol]: https://websockets.readthedocs.io/en/stable/cheatsheet.html?highlight=protocol#server\n\n\n### Access route parameters\n\nThe handler's second parameter is a `RoutedPath` instead of a plain `str`. This is a `str` subclass, so you can do anything you could as in `websockets`. There is one additional attribute, `params`, that allows you to access the matched route parameters.\n\n```python\n@router.route(\"/thing/{id}\")\nasync def thing_detail(ws, path):\n    # Asumming this is accessed with \"/thing/123\".\n    await ws.send(path)  # This sends a text frame \"/thing/123\".\n    await ws.send(path.params[\"id\"])  # Text frame \"123\".\n```\n\n\n### Per-view handshake hooks\n\nDecorate a class to provide per-view validation and additional processing:\n\n```python\nimport http\n\n@router.route(\"/thing/{id}\")\nclass ThingDetail:\n    async def process_request(self, path, headers):\n        thing_id = path.params[\"id\"]\n        thing = get_thing_or_none(thing_id)\n        if thing is not None:\n            # Pass additional context to handle().\n            path.context[\"thing\"] = thing\n            return None\n        message = f\"thing {thing_id!r} not found\\n\"\n        return (http.HTTPStatus.NOT_FOUND, [], message.encode(\"utf-8\"))\n\n    async def handle(self, ws, path):\n        \"\"\"Now this is only called if thing is found.\n        \"\"\"\n        thing = path.context[\"thing\"]  # Retrieve the context to use.\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uranusjr/websockets-routes/",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "websockets-routes",
    "package_url": "https://pypi.org/project/websockets-routes/",
    "platform": "",
    "project_url": "https://pypi.org/project/websockets-routes/",
    "project_urls": {
      "Homepage": "https://github.com/uranusjr/websockets-routes/"
    },
    "release_url": "https://pypi.org/project/websockets-routes/0.2/",
    "requires_dist": [
      "routes",
      "websockets",
      "pytest ; extra == \"test\"",
      "pytest-asyncio ; extra == \"test\""
    ],
    "requires_python": ">=3.6",
    "summary": "Routing support for websockets.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8521784,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ef540ec2e814d8fd40019d0154ad31787fc83586809666edf14959f7f632f50",
          "md5": "2806754a74374ac786f58e4521c6cb0a",
          "sha256": "5113ff0de2de62979f6aba4c090adb1f20a56533936d53810b70113e8ba18960"
        },
        "downloads": -1,
        "filename": "websockets_routes-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2806754a74374ac786f58e4521c6cb0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3294,
        "upload_time": "2020-08-11T11:20:28",
        "upload_time_iso_8601": "2020-08-11T11:20:28.547541Z",
        "url": "https://files.pythonhosted.org/packages/5e/f5/40ec2e814d8fd40019d0154ad31787fc83586809666edf14959f7f632f50/websockets_routes-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c7b4a95d12280bba7ab4bf17a4b0fbd886ac13d65c0151c399a8ac86be08244",
          "md5": "1776f88845c12f3e0c14358194212242",
          "sha256": "6e28388da1bda313f6dc7d59f4410a3c88515255fb41ecd2a8ba4fdf404d7b55"
        },
        "downloads": -1,
        "filename": "websockets_routes-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1776f88845c12f3e0c14358194212242",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3624,
        "upload_time": "2020-08-11T11:20:31",
        "upload_time_iso_8601": "2020-08-11T11:20:31.908135Z",
        "url": "https://files.pythonhosted.org/packages/0c/7b/4a95d12280bba7ab4bf17a4b0fbd886ac13d65c0151c399a8ac86be08244/websockets_routes-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6db244ee377156bf25a4cb017b449aba9946ececf01099129cfbb8ff2cf13d97",
          "md5": "b7f7aebfc5b6aa39d65ec14830085259",
          "sha256": "883fa232a4e2fc9178dcc41de0ddefb03350f8c33c54e799cee07de5c5cffe4d"
        },
        "downloads": -1,
        "filename": "websockets_routes-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7f7aebfc5b6aa39d65ec14830085259",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4016,
        "upload_time": "2020-10-28T10:06:53",
        "upload_time_iso_8601": "2020-10-28T10:06:53.086883Z",
        "url": "https://files.pythonhosted.org/packages/6d/b2/44ee377156bf25a4cb017b449aba9946ececf01099129cfbb8ff2cf13d97/websockets_routes-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d24e27a88c490fb00dfd0a428c99931fb7478fec07fbf70a60e8cf29795b214",
          "md5": "cfa57d412d6107173e9f132e39bab35c",
          "sha256": "20b6cb3f5ef29c6f6ae812e78b1550c2e99de2db64fe1b6a67d3204601f11f5f"
        },
        "downloads": -1,
        "filename": "websockets-routes-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cfa57d412d6107173e9f132e39bab35c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4314,
        "upload_time": "2020-10-28T10:06:59",
        "upload_time_iso_8601": "2020-10-28T10:06:59.263694Z",
        "url": "https://files.pythonhosted.org/packages/8d/24/e27a88c490fb00dfd0a428c99931fb7478fec07fbf70a60e8cf29795b214/websockets-routes-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6db244ee377156bf25a4cb017b449aba9946ececf01099129cfbb8ff2cf13d97",
        "md5": "b7f7aebfc5b6aa39d65ec14830085259",
        "sha256": "883fa232a4e2fc9178dcc41de0ddefb03350f8c33c54e799cee07de5c5cffe4d"
      },
      "downloads": -1,
      "filename": "websockets_routes-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7f7aebfc5b6aa39d65ec14830085259",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4016,
      "upload_time": "2020-10-28T10:06:53",
      "upload_time_iso_8601": "2020-10-28T10:06:53.086883Z",
      "url": "https://files.pythonhosted.org/packages/6d/b2/44ee377156bf25a4cb017b449aba9946ececf01099129cfbb8ff2cf13d97/websockets_routes-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d24e27a88c490fb00dfd0a428c99931fb7478fec07fbf70a60e8cf29795b214",
        "md5": "cfa57d412d6107173e9f132e39bab35c",
        "sha256": "20b6cb3f5ef29c6f6ae812e78b1550c2e99de2db64fe1b6a67d3204601f11f5f"
      },
      "downloads": -1,
      "filename": "websockets-routes-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cfa57d412d6107173e9f132e39bab35c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4314,
      "upload_time": "2020-10-28T10:06:59",
      "upload_time_iso_8601": "2020-10-28T10:06:59.263694Z",
      "url": "https://files.pythonhosted.org/packages/8d/24/e27a88c490fb00dfd0a428c99931fb7478fec07fbf70a60e8cf29795b214/websockets-routes-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}