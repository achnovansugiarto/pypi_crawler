{
  "info": {
    "author": "James Saryerwinnie, Springcomp",
    "author_email": "js@jamesls.com, springcomp@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "JMESPath Community\n==================\n\n\n.. image:: https://badges.gitter.im/Join Chat.svg\n   :target: https://gitter.im/jmespath/chat\n\n\nJMESPath (pronounced \"james path\") allows you to declaratively specify how to\nextract elements from a JSON document.\n\nJMESPath Community is an unofficial community effort to promote improvements\nand updates to the JMESPath language specification.\n\nFor example, given this document::\n\n    {\"foo\": {\"bar\": \"baz\"}}\n\nThe jmespath expression ``foo.bar`` will return \"baz\".\n\nJMESPath also supports:\n\nReferencing elements in a list.  Given the data::\n\n    {\"foo\": {\"bar\": [\"one\", \"two\"]}}\n\nThe expression: ``foo.bar[0]`` will return \"one\".\nYou can also reference all the items in a list using the ``*``\nsyntax::\n\n   {\"foo\": {\"bar\": [{\"name\": \"one\"}, {\"name\": \"two\"}]}}\n\nThe expression: ``foo.bar[*].name`` will return [\"one\", \"two\"].\nNegative indexing is also supported (-1 refers to the last element\nin the list).  Given the data above, the expression\n``foo.bar[-1].name`` will return \"two\".\n\nThe ``*`` can also be used for hash types::\n\n   {\"foo\": {\"bar\": {\"name\": \"one\"}, \"baz\": {\"name\": \"two\"}}}\n\nThe expression: ``foo.*.name`` will return [\"one\", \"two\"].\n\n\nInstallation\n============\n\nYou can install JMESPath Community from PyPI with:\n\n.. code:: bash\n\n    pip install jmespath-community\n\n\nAPI\n===\n\nThe ``jmespath.py`` library has two functions\nthat operate on python data structures.  You can use ``search``\nand give it the jmespath expression and the data:\n\n.. code:: python\n\n    >>> import jmespath\n    >>> path = jmespath.search('foo.bar', {'foo': {'bar': 'baz'}})\n    'baz'\n\nSimilar to the ``re`` module, you can use the ``compile`` function\nto compile the JMESPath expression and use this parsed expression\nto perform repeated searches:\n\n.. code:: python\n\n    >>> import jmespath\n    >>> expression = jmespath.compile('foo.bar')\n    >>> expression.search({'foo': {'bar': 'baz'}})\n    'baz'\n    >>> expression.search({'foo': {'bar': 'other'}})\n    'other'\n\nThis is useful if you're going to use the same jmespath expression to\nsearch multiple documents.  This avoids having to reparse the\nJMESPath expression each time you search a new document.\n\nOptions\n-------\n\nYou can provide an instance of ``jmespath.Options`` to control how\na JMESPath expression is evaluated.  The most common scenario for\nusing an ``Options`` instance is if you want to have ordered output\nof your dict keys.  To do this you can use either of these options:\n\n.. code:: python\n\n    >>> import jmespath\n    >>> jmespath.search('{a: a, b: b}',\n    ...                 mydata,\n    ...                 jmespath.Options(dict_cls=collections.OrderedDict))\n\n\n    >>> import jmespath\n    >>> parsed = jmespath.compile('{a: a, b: b}')\n    >>> parsed.search(mydata,\n    ...               jmespath.Options(dict_cls=collections.OrderedDict))\n\n\nJMESPath used to support a special case `json-value` syntax to represent a\nJSON string literal, but this was being deprecated following\n`JEP-12\n<https://github.com/jmespath-community/jmespath.spec/blob/main/jep-012-raw-string-literals.md>`__\nand its `raw-string` literal syntax.\n\n.. code:: python\n\n    >>> import jmespath\n    >>> jmespath.search(\"`foo`\"', {})\n    jmespath.exceptions.LexerError: Bad jmespath expression: Bad token %s `foo`:\n    `foo`\n    ^\n\nWhile JMESPath Community now fully deprecates this legacy syntax of providing\na JSON literal string with elided double quotes, you can still opt-in to parse\nlegacy syntax, by specifying the ``enable_legacy_literals`` flag to the\n``Options`` object.\n\n.. code:: python\n\n    >>> import jmespath\n    >>> jmespath.search(\"`foo`\"',\n    ...                 mydata,\n    ...                 jmespath.Options(enable_legacy_literals=True))\n    'foo'\n\n\n    >>> import jmespath\n    >>> parsed = jmespath.compile(\"`foo`\",\n    ...               jmespath.Options(enable_legacy_literals=True))\n    >>> parsed.search(mydata)\n    'foo'\n\n\nCustom Functions\n~~~~~~~~~~~~~~~~\n\nThe JMESPath language has numerous\n`built-in functions\n<https://jmespath.site/main/#functions>`__, but it is\nalso possible to add your own custom functions.  Keep in mind that\ncustom function support in jmespath.py is experimental and the API may\nchange based on feedback.\n\n**If you have a custom function that you've found useful, consider submitting\nit to jmespath.site and propose that it be added to the JMESPath language.**\nYou can submit proposals\n`here <https://github.com/jmespath-community/jmespath.spec/issues>`__.\n\nTo create custom functions:\n\n* Create a subclass of ``jmespath.functions.Functions``.\n* Create a method with the name ``_func_<your function name>``.\n* Apply the ``jmespath.functions.signature`` decorator that indicates\n  the expected types of the function arguments.\n* Provide an instance of your subclass in a ``jmespath.Options`` object.\n\nBelow are a few examples:\n\n.. code:: python\n\n    import jmespath\n    from jmespath import functions\n\n    # 1. Create a subclass of functions.Functions.\n    #    The function.Functions base class has logic\n    #    that introspects all of its methods and automatically\n    #    registers your custom functions in its function table.\n    class CustomFunctions(functions.Functions):\n\n        # 2 and 3.  Create a function that starts with _func_\n        # and decorate it with @signature which indicates its\n        # expected types.\n        # In this example, we're creating a jmespath function\n        # called \"unique_letters\" that accepts a single argument\n        # with an expected type \"string\".\n        @functions.signature({'types': ['string']})\n        def _func_unique_letters(self, s):\n            # Given a string s, return a sorted\n            # string of unique letters: 'ccbbadd' ->  'abcd'\n            return ''.join(sorted(set(s)))\n\n        # Here's another example.  This is creating\n        # a jmespath function called \"my_add\" that expects\n        # two arguments, both of which should be of type number.\n        @functions.signature({'types': ['number']}, {'types': ['number']})\n        def _func_my_add(self, x, y):\n            return x + y\n\n    # 4. Provide an instance of your subclass in a Options object.\n    options = jmespath.Options(custom_functions=CustomFunctions())\n\n    # Provide this value to jmespath.search:\n    # This will print 3\n    print(\n        jmespath.search(\n            'my_add(`1`, `2`)', {}, options=options)\n    )\n\n    # This will print \"abcd\"\n    print(\n        jmespath.search(\n            'foo.bar | unique_letters(@)',\n            {'foo': {'bar': 'ccbbadd'}},\n            options=options)\n    )\n\nAgain, if you come up with useful functions that you think make\nsense in the JMESPath language (and make sense to implement in all\nJMESPath libraries, not just python), please let us know at\n`jmespath.site <https://github.com/jmespath-community/jmespath.spec/discussions>`__.\n\n\nSpecification\n=============\n\nIf you'd like to learn more about the JMESPath language, you can check out\nthe `JMESPath tutorial <https://jmespath.site/main/#tutorial>`__.  Also check\nout the `JMESPath examples page <https://jmespath.site/main/#examples>`__ for\nexamples of more complex jmespath queries.\n\nThe grammar is specified using ABNF, as described in\n`RFC4234 <http://www.ietf.org/rfc/rfc4234.txt>`_.\nYou can find the most up to date\n`grammar for JMESPath here <https://jmespath.site/main/#spec-grammar>`__.\n\nYou can read the full\n`JMESPath specification here <https://jmespath.site/main/#specification>`__.\n\n\nTesting\n=======\n\nIn addition to the unit tests for the jmespath modules,\nthere is a ``tests/compliance`` directory that contains\n.json files with test cases.  This allows other implementations\nto verify they are producing the correct output.  Each json\nfile is grouped by feature.\n\n\nDiscuss\n=======\n\nJoin us on our `Gitter channel <https://gitter.im/jmespath/chat>`__\nif you want to chat or if you have any questions.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jmespath-community/jmespath.py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jmespath-community",
    "package_url": "https://pypi.org/project/jmespath-community/",
    "platform": null,
    "project_url": "https://pypi.org/project/jmespath-community/",
    "project_urls": {
      "Homepage": "https://github.com/jmespath-community/jmespath.py"
    },
    "release_url": "https://pypi.org/project/jmespath-community/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "JSON Matching Expressions",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16035576,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc4dbeef127c7077be3436f0a60397b2060820b1b1f6809ec2cbb8aa2f97e4f3",
          "md5": "ebb53cb8572673a00d056d00f0281a48",
          "sha256": "b0731af5e478f9265c4021feeaf44b5079473af71fb949fd1a773939e5ee6a49"
        },
        "downloads": -1,
        "filename": "jmespath_community-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebb53cb8572673a00d056d00f0281a48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28304,
        "upload_time": "2022-12-08T14:00:14",
        "upload_time_iso_8601": "2022-12-08T14:00:14.745193Z",
        "url": "https://files.pythonhosted.org/packages/cc/4d/beef127c7077be3436f0a60397b2060820b1b1f6809ec2cbb8aa2f97e4f3/jmespath_community-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8414add35f1fa44865e5e08149709177799519465ecb5d3ddf511ac8d98c37c",
          "md5": "da9aa940868b50a091cbab91172c62b0",
          "sha256": "99f22f13a1b0bf7f806dfdbeaa17d9da24aab99f7a8f5e4edc70c9fc3e04271e"
        },
        "downloads": -1,
        "filename": "jmespath-community-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da9aa940868b50a091cbab91172c62b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25347,
        "upload_time": "2022-12-08T14:00:16",
        "upload_time_iso_8601": "2022-12-08T14:00:16.557559Z",
        "url": "https://files.pythonhosted.org/packages/d8/41/4add35f1fa44865e5e08149709177799519465ecb5d3ddf511ac8d98c37c/jmespath-community-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9cbe7af4630efa008028f226d4dd1fca3337e1cb2ba0d6891f03d5b4f8bd339",
          "md5": "f3b32015dd6b845be43cfc64e56317aa",
          "sha256": "aa9a0f38e1e26f3c0ce363e9cfa415a487b01c1ee6593aced429d075e671b0ff"
        },
        "downloads": -1,
        "filename": "jmespath_community-1.1.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3b32015dd6b845be43cfc64e56317aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26460,
        "upload_time": "2022-11-02T12:48:39",
        "upload_time_iso_8601": "2022-11-02T12:48:39.631895Z",
        "url": "https://files.pythonhosted.org/packages/d9/cb/e7af4630efa008028f226d4dd1fca3337e1cb2ba0d6891f03d5b4f8bd339/jmespath_community-1.1.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a64b5068678adbab213289162e88c7555b18d1f65c2e0e86caf718fc2dc1ec6",
          "md5": "40d91c181a74408f11df844223291d76",
          "sha256": "795635c35b2bc22035770c1cc53e4a4e6a7920c2f3e5641ea998c36cac5454dd"
        },
        "downloads": -1,
        "filename": "jmespath-community-1.1.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "40d91c181a74408f11df844223291d76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23828,
        "upload_time": "2022-11-02T12:39:56",
        "upload_time_iso_8601": "2022-11-02T12:39:56.513034Z",
        "url": "https://files.pythonhosted.org/packages/4a/64/b5068678adbab213289162e88c7555b18d1f65c2e0e86caf718fc2dc1ec6/jmespath-community-1.1.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d007c167ecd8415f45e9dc70240fb0613b13268ffa9718c46d69e0b055aa9082",
          "md5": "6a1e8f84fd1c38f5333e0c27d8b2c412",
          "sha256": "192e9c68e62141b584948387906fae81d67ab85c868730177d4d57beec5af438"
        },
        "downloads": -1,
        "filename": "jmespath_community-1.1.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a1e8f84fd1c38f5333e0c27d8b2c412",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28337,
        "upload_time": "2022-11-19T07:24:49",
        "upload_time_iso_8601": "2022-11-19T07:24:49.654270Z",
        "url": "https://files.pythonhosted.org/packages/d0/07/c167ecd8415f45e9dc70240fb0613b13268ffa9718c46d69e0b055aa9082/jmespath_community-1.1.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67124e39463d7c536c59a69806a3dfc7c568164d12d48e6c1fb2268955421fdc",
          "md5": "44c042bca57cdc3eae1a9d619e41626e",
          "sha256": "bfd3b76dc66f03ddf2a84c2e7147730ca08fff71115057cd9b148f0bd77c06d1"
        },
        "downloads": -1,
        "filename": "jmespath-community-1.1.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "44c042bca57cdc3eae1a9d619e41626e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25343,
        "upload_time": "2022-11-19T07:24:51",
        "upload_time_iso_8601": "2022-11-19T07:24:51.389323Z",
        "url": "https://files.pythonhosted.org/packages/67/12/4e39463d7c536c59a69806a3dfc7c568164d12d48e6c1fb2268955421fdc/jmespath-community-1.1.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc4dbeef127c7077be3436f0a60397b2060820b1b1f6809ec2cbb8aa2f97e4f3",
        "md5": "ebb53cb8572673a00d056d00f0281a48",
        "sha256": "b0731af5e478f9265c4021feeaf44b5079473af71fb949fd1a773939e5ee6a49"
      },
      "downloads": -1,
      "filename": "jmespath_community-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ebb53cb8572673a00d056d00f0281a48",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 28304,
      "upload_time": "2022-12-08T14:00:14",
      "upload_time_iso_8601": "2022-12-08T14:00:14.745193Z",
      "url": "https://files.pythonhosted.org/packages/cc/4d/beef127c7077be3436f0a60397b2060820b1b1f6809ec2cbb8aa2f97e4f3/jmespath_community-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8414add35f1fa44865e5e08149709177799519465ecb5d3ddf511ac8d98c37c",
        "md5": "da9aa940868b50a091cbab91172c62b0",
        "sha256": "99f22f13a1b0bf7f806dfdbeaa17d9da24aab99f7a8f5e4edc70c9fc3e04271e"
      },
      "downloads": -1,
      "filename": "jmespath-community-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "da9aa940868b50a091cbab91172c62b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 25347,
      "upload_time": "2022-12-08T14:00:16",
      "upload_time_iso_8601": "2022-12-08T14:00:16.557559Z",
      "url": "https://files.pythonhosted.org/packages/d8/41/4add35f1fa44865e5e08149709177799519465ecb5d3ddf511ac8d98c37c/jmespath-community-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}