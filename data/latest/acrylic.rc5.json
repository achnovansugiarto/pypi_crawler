{
  "info": {
    "author": "Arsh",
    "author_email": "hi@prdx.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# <img src=\"https://user-images.githubusercontent.com/15089721/85012237-5cdae100-b180-11ea-8fc2-9946de05653b.png\" alt=\"logo\" width=70% />\n\n![PyPI](https://img.shields.io/pypi/v/acrylic)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/acrylic)\n![PyPI - License](https://img.shields.io/pypi/l/acrylic)\n\nHave you ever wanted a simple and intuitive way to work with colors in python? Then this library is for you! `acrylic` is a python package that you can use to manage colors, convert between different color formats, and work with color schemes and palettes.\n\nCurrently supported color formats are:  \n`rgb`, `hsl`, `hsv`, `ryb`, `hex`, `name`\n\nSmall example:  \n```python\nfrom acrylic import Color, RANDOM\n\n#  Define a color using rgb values\norange = Color(rgb=[247, 177, 79])\n\n#  Use saturation from that color to create a new random color with hsv\nrandom_color = Color(hsv=[RANDOM, orange.hsv.s, 98])\n\n#  Print the random color's value in hex\nprint(random_color.hex)  # Output: '#50FAF0'\n```\ncheck out [more examples](https://github.com/prdx23/acrylic#example-usecases)\nbelow.\n\n`acrylic` also has support for [color\nschemes](https://github.com/prdx23/acrylic/wiki/Color-Schemes), support for more\ncolor schemes and functions to generate color palettes will be added in the\nfuture.\n```python\ncomplementary = cyan.scheme(Schemes.COMPLEMENTARY)\nshades = cyan.scheme(Schemes.SHADES)\ncolor_palette = [cyan, *complementary, *shades]\n```\nMore about color schemes [here](https://github.com/prdx23/acrylic/wiki/Color-Schemes)\n\n## How to Install\n`acrylic` can be installed using pip:\n```shell\npip install acrylic\n```\nIt has no dependencies and works with Python >=3.6\n\n## Documentation\n\n### Defining Colors\n\nYou can create a new color like this:\n```python\nfrom acrylic import Color\ncyan = Color(rgb=[83, 237, 229])\n```\n\nThe same syntax can be used to give input in any of the supported color formats. Currently supported formats are `rgb`, `hsv`, `hsl`, `hex` and `ryb`. Example:\n```python\ncolor = Color(rgb=[127, 255, 212])\ncolor = Color(hsl=[160, 100, 75])\ncolor = Color(hsv=[160, 50, 100])\ncolor = Color(hex='#7fffd4')\ncolor = Color(name='aquamarine')\ncolor = Color(ryb=[0, 77, 128])\n```\n- All values for `rgb` and `ryb` should be between `0` - `255`  \n- The value of hue for `hsv` and `hsl` should be between `0.0` - `360.0` and the other two components should be between `0.0` - `100.0`.  \n- Values for `hex` should be a string representing 6-digit hex number  \n- Values for `name` should be a string representing a valid CSS3 color name  \n\n### Converting between color formats\n\nAny instance of `Color()` is automatically converted to every supported color format when its created, so there is no need to manually convert from one format to another. For any color, no matter how it was created, you can get its value in any format like this:\n\n```python\ncyan = Color(rgb=[83, 237, 229])\nprint(cyan.rgb)\nprint(cyan.hsv)\nprint(cyan.hsl)\nprint(cyan.hex)\nprint(cyan.name)\nprint(cyan.ryb)\n```\n\nThis makes converting from say `rgb` to `hsl` as easy as doing:\n```python\nhsl_values = Color(rgb=[83, 237, 229]).hsl\n```\n\n### Accessing values of colors\n\nWhen accessing these attributes for a color, it returns the values back as a `namedtuple` instance. This behaves exactly as a normal `tuple` would, but has an added benefit that its values can be accessed directly via the dot notation. Example:\n```python\n>>> cyan = Color(rgb=[83, 237, 229])\n>>> cyan.rgb  # returns a namedtuple containing the values\nRgb(r=83, g=237, b=229)\n>>> [x for x in cyan.rgb]  # can be iterated over like a normal tuple\n[83, 237, 229]\n>>> cyan.rgb[1]  # items can be accessed via index\n237\n>>> r, g, b = cyan.rgb  # items can be unpacked\n>>> cyan.rgb.r, cyan.rgb.g  # items can also be accessed via their name\n(83, 237)\n```\n\n\n### Additional ways to define a color\n\nIn addition to the default way to create a color, `Color()` offers additional methods that would enhance your ability to create colors. \n\nFor example, to create a random color:\n```python\nfrom acrylic import Color, RANDOM\nrandom_color = Color(rgb=RANDOM)\n```\n\nCreating a color with a random hue, but fixed saturation and value:\n```python\nrandom_hue = Color(hsv=[RANDOM, 65, 95])\n```\n(for aesthetically pleasing random colors, check [example 2](https://github.com/prdx23/acrylic#example-usecases) below)\n\nAny of the components can be given as a list of 2 values like `[a, b]` instead of a single value. When given a range, a value `a <= value <= b` will randomly be picked for that component. For example to create a cyan color where saturation is randomly picked between 30 to 70:\n```python\nrandom_cyan = Color(hsv=[176, (30, 70), 95])\n```\n\nGiving both values for a range isn't required, you can use this to just set the upper or lower limit by setting the other half to `RANDOM`:\n```python\nrandom_cyan = Color(hsv=[176, (RANDOM, 70), 95])\nrandom_cyan = Color(hsv=[176, (30, RANDOM), 95])\n```\n\n### Note: Immutability and Hashibility\n\n- All instances of colors are immutable, meaning their values can't be changed once they are defined. This means that each instance of `Color()` represents a specific color and will always represent that color. If you feel the need to modify a color, this can easily be done as:\n  ```python\n  old_color = Color(rgb=[83, 237, 229])\n  #  change hue, but not saturation or value\n  new_color = Color(hsv=[230, old_color.hsv.s, old_color.hsv.v])\n  ```\n- All instances of colors are also hashable. They can be safely used as keys for `dict()`s and can be added to `set()` to efficiently find unique colors or to test membership.\n  ```python\n  >>> colors = {Color(hex='#7fffd4'): 'Can be used in dict() keys!'}\n  >>> Color(name='aquamarine') in colors\n  True\n  >>> colors[Color(rgb=[127, 255, 212])]\n  'Can be used in dict() keys!'\n  ```\n- As a result of colors being immutable and hashable, colors that represent the same `RGB` values will always be unambiguously equal to each other. This prevents a lot of bugs that can randomly appear when working with float `hsv`/`hsl` values and removes the inconsistencies in the conversion algorithm that converts between `rgb` and `hsv`/`hsl`. An example that demonstrates this:\n  ```python\n  >>> Color(hsl=[236.94, 9.29, 84.54]) == Color(hsl=[240.0, 8.86, 84.51])\n  True\n  ```\n  This results in `True` because both of these `hsl` values map to the same `rgb` value `(212, 212, 219)` and thus represent the same color.\n\n### Color schemes\n\nThe `Color()` class also provides some convenience functions to work with color schemes. In the future, these would also be used to build color palettes. For now, the corresponding colors from a color scheme for a specific color can be generated like this:\n```python\nfrom acrylic import Color, Schemes\ncyan = Color(rgb=[83, 237, 229])\n\ncomplementary_color = cyan.scheme(Schemes.COMPLEMENTARY)\ncyan_triads = cyan.scheme(Schemes.TRIADIC)\ncyan_shades = cyan.scheme(Schemes.SHADES)\n```\n\nTaking inspiration from traditional art where most of these color schemes originated from, these are calculated using the `ryb`(red-yellow-blue) color wheel by default. To use the `rgb`(red-green-blue) color wheel instead you can pass `in_rgb=True` to the `.scheme()` function. \n\nFor a list of all the available color schemes and their explanations, check **[this page](https://github.com/prdx23/acrylic/wiki/Color-Schemes)**.\n\n## Example Usecases\n\n1. Create a color using `RGB`, use its saturation to create a new color, and print its value as a hex string:\n    ```python\n    orange = Color(rgb=[247, 177, 79])\n    cyan = Color(hsv=[176.5, orange.hsv.s, 98])\n    print(cyan.hex)  # Output: '#50FAF0'\n    ```\n\n2. Generating random aesthetically pleasing colors, which for example can be used to color the default profile pictures for users of an app\n    ```python\n    def aesthetic_color():\n        return Color(hsl=[RANDOM, (65, RANDOM), (60, 75)])\n    ```\n    (If you have ever tried generating random colors by randomizing `rgb` values, you would know how badly that works)\n\n3. Finding unique colors:\n    ```python\n    test_set = set([\n        Color(rgb=[61, 245, 245]), Color(hex='#3DF5F5'),\n        Color(hsl=[180, 89.8, 60]), Color(hsl=[179.8, 90.2, 60.1]) \n    ])\n    print(test_set)  # Output: {Color(rgb=(61, 245, 245))}\n    ```\n    The set contains only one color as all those colors map to the same `rgb` values.\n\n4. Sorting all the pixels in an image horizontally by hue: \n    ```python\n    from acrylic import Color\n    from PIL import Image\n\n    orignal_image = Image.open('test.jpg')\n    sorted_img = orignal_image.copy()\n    pixels = orignal_image.load()\n\n    for y in range(sorted_image.height):\n          row = [Color(rgb=pixels[n, y]) for n in range(sorted_image.width)]\n          sorted_row = sorted(row, key=lambda c: c.hsl.h)\n          for x, c in enumerate(sorted_row):\n              sorted_image.putpixel((x, y), c.rgb)\n    ```\n    This example also illustrates how easy it is to integrate `acrylic` with other libraries and seamlessly switch between `rgb` and `hsl`\n\n## Contributions\nAll contributions to `acrylic` are welcome and appreciated! Ways in which you can contribute are:\n- Report an issue ([here](https://github.com/prdx23/acrylic/issues))\n- Raise a pull request ([here](https://github.com/prdx23/acrylic/pulls))\n- Request new features\n- Spread the word about `acrylic`!\n\n## License\n**MIT License**: Copyright (c) 2020 - 2022 Arsh  \n[License.txt](https://github.com/prdx23/acrylic/blob/master/LICENSE.txt)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/prdx23/acrylic",
    "keywords": "color colors scheme palette rgb hsv hsl ryb hex colour colours",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "acrylic",
    "package_url": "https://pypi.org/project/acrylic/",
    "platform": null,
    "project_url": "https://pypi.org/project/acrylic/",
    "project_urls": {
      "Homepage": "https://github.com/prdx23/acrylic",
      "Source": "https://github.com/prdx23/acrylic",
      "Tracker": "https://github.com/prdx23/acrylic/issues"
    },
    "release_url": "https://pypi.org/project/acrylic/0.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A simple and intuitive library to work with colors in python",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14022052,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a89effa90bd6dc3c096a2749ab15c18306ab4f416092cabec5e25a58830e38c",
          "md5": "01d3354d6297daa20acf3aa99ac30638",
          "sha256": "aa1d22c64292a238896988ca677d473c303dfab1943351ad22bd597be7873d19"
        },
        "downloads": -1,
        "filename": "acrylic-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01d3354d6297daa20acf3aa99ac30638",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10457,
        "upload_time": "2020-06-15T21:37:17",
        "upload_time_iso_8601": "2020-06-15T21:37:17.974507Z",
        "url": "https://files.pythonhosted.org/packages/4a/89/effa90bd6dc3c096a2749ab15c18306ab4f416092cabec5e25a58830e38c/acrylic-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9101cc3e7bdcb908dcf239e0a7c30257ae803e5969ad684a234645bde1edc1a",
          "md5": "4711343150899ac324a97bfd88d88028",
          "sha256": "0ecf53dd2c6a59d017d65c5eda0cbd229898d4e4a15372e97acdd8272f1b5d2d"
        },
        "downloads": -1,
        "filename": "acrylic-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4711343150899ac324a97bfd88d88028",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10310,
        "upload_time": "2020-06-15T21:37:20",
        "upload_time_iso_8601": "2020-06-15T21:37:20.213335Z",
        "url": "https://files.pythonhosted.org/packages/c9/10/1cc3e7bdcb908dcf239e0a7c30257ae803e5969ad684a234645bde1edc1a/acrylic-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9eb1bcb36468f4c77438580a940b5e3a4c33bd85e8d3eaf7b829a741d268a7c4",
          "md5": "289b916526a94d3d21f3ec39655da33d",
          "sha256": "d3aceade3d77d4084c6f92069ef147f3a0826d30c84b0c1c073332324d4b1366"
        },
        "downloads": -1,
        "filename": "acrylic-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "289b916526a94d3d21f3ec39655da33d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11748,
        "upload_time": "2020-06-17T15:47:28",
        "upload_time_iso_8601": "2020-06-17T15:47:28.033245Z",
        "url": "https://files.pythonhosted.org/packages/9e/b1/bcb36468f4c77438580a940b5e3a4c33bd85e8d3eaf7b829a741d268a7c4/acrylic-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c61fbcf74697da801933b24b114cad3759487729653ed814bcf6e558350c3463",
          "md5": "b4b76ed646f865622d1eac0cb512bbcf",
          "sha256": "36b9a4ea0e127cd47daa5949536a789278bf95a2889b7761086940bb7c94e04d"
        },
        "downloads": -1,
        "filename": "acrylic-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b4b76ed646f865622d1eac0cb512bbcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14268,
        "upload_time": "2020-06-17T15:48:32",
        "upload_time_iso_8601": "2020-06-17T15:48:32.340485Z",
        "url": "https://files.pythonhosted.org/packages/c6/1f/bcf74697da801933b24b114cad3759487729653ed814bcf6e558350c3463/acrylic-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91b8694ae96862fe37823012bfb0956ca626f3ab3b4f8e72036db7e500618158",
          "md5": "02b563afe7450b2a3fd24c362c90ae71",
          "sha256": "4aa50564d1bde726a2c164f3c68fe927403436de98d5e0bd93c6c3ec315a27b1"
        },
        "downloads": -1,
        "filename": "acrylic-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02b563afe7450b2a3fd24c362c90ae71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11745,
        "upload_time": "2020-07-06T15:00:53",
        "upload_time_iso_8601": "2020-07-06T15:00:53.901537Z",
        "url": "https://files.pythonhosted.org/packages/91/b8/694ae96862fe37823012bfb0956ca626f3ab3b4f8e72036db7e500618158/acrylic-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5688a20810767411e6270ff72ce6d642548d4c37a9172fad71c89aa6b8e13039",
          "md5": "2a5f0d9131d53953ed78cd5dd472e934",
          "sha256": "75a31dfd7a08e03a546f855d359c0989ba614a428fde1d09b4e9051125f14168"
        },
        "downloads": -1,
        "filename": "acrylic-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2a5f0d9131d53953ed78cd5dd472e934",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14261,
        "upload_time": "2020-07-06T15:00:55",
        "upload_time_iso_8601": "2020-07-06T15:00:55.698798Z",
        "url": "https://files.pythonhosted.org/packages/56/88/a20810767411e6270ff72ce6d642548d4c37a9172fad71c89aa6b8e13039/acrylic-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "432a2e1a5ba6506ec25946f2975bdb03c7c4733e011bc6e0560e0f194560f55e",
          "md5": "9ffa4734912c3953d02b1cd2a77945ad",
          "sha256": "69da08992f6e361fcbc0baf263e05ce76c2f0d7f779ba4dc79feeb5296e2036a"
        },
        "downloads": -1,
        "filename": "acrylic-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ffa4734912c3953d02b1cd2a77945ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15223,
        "upload_time": "2021-09-16T20:18:45",
        "upload_time_iso_8601": "2021-09-16T20:18:45.642340Z",
        "url": "https://files.pythonhosted.org/packages/43/2a/2e1a5ba6506ec25946f2975bdb03c7c4733e011bc6e0560e0f194560f55e/acrylic-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6af0ff7bea61ecdbc214ed35dc080e4d97d5958d3bb401f34a1740a2b6363727",
          "md5": "7cc323c92f769ae8a93d2b4ea65339ec",
          "sha256": "e77d4368f4bd7d39ec230ffdab65f23646e8582a1d5ed052d2b11e6e00d19082"
        },
        "downloads": -1,
        "filename": "acrylic-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cc323c92f769ae8a93d2b4ea65339ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16390,
        "upload_time": "2021-09-16T20:18:47",
        "upload_time_iso_8601": "2021-09-16T20:18:47.892864Z",
        "url": "https://files.pythonhosted.org/packages/6a/f0/ff7bea61ecdbc214ed35dc080e4d97d5958d3bb401f34a1740a2b6363727/acrylic-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a64ec4ca3c567a0a3477e0300c5ce45c337b80382722bf72d3e50ef639ba12a",
          "md5": "c755efc5326b7a319fe35380c3bf0b9b",
          "sha256": "4197498e79d8ea8ffe92664b0013bb04853ff46b86257803f8f9fea1022f218b"
        },
        "downloads": -1,
        "filename": "acrylic-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c755efc5326b7a319fe35380c3bf0b9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15223,
        "upload_time": "2022-06-03T08:43:39",
        "upload_time_iso_8601": "2022-06-03T08:43:39.600671Z",
        "url": "https://files.pythonhosted.org/packages/6a/64/ec4ca3c567a0a3477e0300c5ce45c337b80382722bf72d3e50ef639ba12a/acrylic-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcccaf11b47a96d36ae16bcba6e27674acf63155e4fd8f73fd6d00362a7facfa",
          "md5": "8510d294c92a746722b278d9a01c3a02",
          "sha256": "ebc353ca7b0acde6b54c16f6537eb50c583154f5521bced974a8ad3b1c567dd0"
        },
        "downloads": -1,
        "filename": "acrylic-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8510d294c92a746722b278d9a01c3a02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16354,
        "upload_time": "2022-06-03T08:43:42",
        "upload_time_iso_8601": "2022-06-03T08:43:42.812132Z",
        "url": "https://files.pythonhosted.org/packages/dc/cc/af11b47a96d36ae16bcba6e27674acf63155e4fd8f73fd6d00362a7facfa/acrylic-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a64ec4ca3c567a0a3477e0300c5ce45c337b80382722bf72d3e50ef639ba12a",
        "md5": "c755efc5326b7a319fe35380c3bf0b9b",
        "sha256": "4197498e79d8ea8ffe92664b0013bb04853ff46b86257803f8f9fea1022f218b"
      },
      "downloads": -1,
      "filename": "acrylic-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c755efc5326b7a319fe35380c3bf0b9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15223,
      "upload_time": "2022-06-03T08:43:39",
      "upload_time_iso_8601": "2022-06-03T08:43:39.600671Z",
      "url": "https://files.pythonhosted.org/packages/6a/64/ec4ca3c567a0a3477e0300c5ce45c337b80382722bf72d3e50ef639ba12a/acrylic-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcccaf11b47a96d36ae16bcba6e27674acf63155e4fd8f73fd6d00362a7facfa",
        "md5": "8510d294c92a746722b278d9a01c3a02",
        "sha256": "ebc353ca7b0acde6b54c16f6537eb50c583154f5521bced974a8ad3b1c567dd0"
      },
      "downloads": -1,
      "filename": "acrylic-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8510d294c92a746722b278d9a01c3a02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16354,
      "upload_time": "2022-06-03T08:43:42",
      "upload_time_iso_8601": "2022-06-03T08:43:42.812132Z",
      "url": "https://files.pythonhosted.org/packages/dc/cc/af11b47a96d36ae16bcba6e27674acf63155e4fd8f73fd6d00362a7facfa/acrylic-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}