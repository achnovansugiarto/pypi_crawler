{
  "info": {
    "author": "vojtech",
    "author_email": "petru.vojtech@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Easy permissions\nDefine user permissions and resource access simply and efficiently.\n\n## Installation\n```bash\npip install ezperm\n```\n\n## Usage & examples\n### General case\nAssume we are in charge of a superhero team. We have a list of heroes, and we want to define permissions for them.\nOur hero model might look like this:\n```python\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass Hero:\n    name: str\n    age: int\n    permissions: list['Permissions']\n```\nAfter a while of working with our heroes, we realize that some of them are terrible cooks. We want to define a permission\nthat will allow only some of them to cook or bake. \n\nThis can be done by extending the `PermissionEnum` class and defining a `_has_perm`\nmethod that will check if the hero has the permission.\n#### Permission enums\n```python\nimport ezperm\n\nclass Permissions(ezperm.PermissionEnum):\n    CAN_COOK = 'CAN_COOK'\n    CAN_BAKE = 'CAN_BAKE'\n    \n    def _has_perm(self, hero: Hero) -> bool:\n        return self.value in hero.permissions\n```\nNow lets use our permissions in the code:\n```python\n# Define some heroes\nironman = Hero('Ironman', 45, [Permissions.CAN_COOK, Permissions.CAN_BAKE])\ndeadpool = Hero('Deadpool', 30, [Permissions.CAN_BAKE])\nhulk = Hero('Hulk', 55, [])\n\n# Check if the hero has a permission\nPermissions.CAN_COOK(ironman)  # ➞ True\nPermissions.CAN_COOK(deadpool)  # ➞ False\nPermissions.CAN_COOK(hulk)  # ➞ False\n```\nIt is possible to use `&` _(logical and)_, `|` _(logical or)_ or `~` _(negation)_ operators to combine permissions:\n```python\n(Permissions.CAN_COOK & Permissions.CAN_BAKE)(ironman)  # ➞ True\n(Permissions.CAN_COOK & Permissions.CAN_BAKE)(deadpool)  # ➞ False\n(Permissions.CAN_COOK | Permissions.CAN_BAKE)(hulk)  # ➞ False\n~(Permissions.CAN_COOK | Permissions.CAN_BAKE)(hulk)  # ➞ True\n(~Permissions.CAN_COOK & Permissions.CAN_BAKE)(deadpool)  # ➞ True\n```\n\n#### Dynamic permissions\nUsing the `@permission` decorator, we can also define dynamic permissions that will check if the hero has a permission based on some other condition, or define a permission as a combination of other permissions.\n```python\nclass Permissions(ezperm.PermissionEnum):\n    CAN_COOK = 'CAN_COOK'\n    CAN_BAKE = 'CAN_BAKE'\n    \n    def _has_perm(self, hero: Hero) -> bool:\n        return self.value in hero.permissions\n    \n    ### ↓ NEW ↓ ###\n    @ezperm.permission\n    def is_worthy(hero: Hero) -> bool:\n        return hero.name == 'Thor'\n    \n    @ezperm.permission\n    def is_old(hero: Hero) -> bool:\n        return hero.age > 50\n\n    @ezperm.permission\n    def can_use_oven(hero: Hero) -> bool:\n        return (Permissions.CAN_COOK | Permissions.CAN_BAKE)(hero)\n```\nThese permissions can be used in the same way as the static ones:\n```python\nPermissions.is_worthy(ironman)  # ➞ False\n(Permissions.CAN_COOK | PERMISSIONS.is_worthy)(ironman)  # ➞ True\n```\n\n\n### Django integration\n#### Installation\n```bash\npip install ezperm[django]\n```\n\nezperm comes with a couple of tools to help with Django integration. Its use is entirely optional, and you can use ezperm and Django without it.\n\nFirst, lets update our `Permissions` and `Hero` classes in our example:\n```python\nimport ezperm.django\n\nfrom django.db import models\nfrom django.contrib.postgres.fields import ArrayField\n\n\nclass Permissions(ezperm.PermissionEnum, models.TextChoices):\n    ... # same as before\n\n\nclass Hero(ezperm.django.PermissionsMixin, models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n    permissions = ArrayField(\n        base_field=models.CharField(\n            max_length=255,\n            choices=Permissions.choices,\n        ),\n        default=list,\n    )\n```\nNote, that we've inherited the `Permissions` from Django's `TextChoices` in order to use it as a `choices` argument for the `permissions` field.\nMoreover, we've added the `PermissionsMixin` to our `Hero` model, which overrides the `has_perms` and `has_perm` method.\n\nNow lets define a view which will allow access only to worthy or old heroes:\n```python\nfrom django.views.generic import View\nfrom ezperm.django.views import PermissionRequiredMixin\n\n\nclass CookView(PermissionRequiredMixin, View):\n    permission_required = Permissions.CAN_COOK | Permissions.is_worthy\n    \n    def get(self, request):\n        return HttpResponse('You can cook!')\n```\n\n\n## Contributing\nPull requests for any improvements are welcome.\n\n[Poetry](https://github.com/sdispater/poetry) is used to manage dependencies.\nTo get started follow these steps:\n\n```shell\ngit clone https://github.com/VojtechPetru/ezperm.git\ncd ezperm\npoetry install\npoetry run pytest\n```\n\n## Links\n- Repository: https://github.com/VojtechPetru/ezperm\n- Issue tracker: https://github.com/VojtechPetru/ezperm/issues. \nIn case of sensitive bugs (e.g. security vulnerabilities) please contact me at _petru.vojtech@gmail.com_ directly.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VojtechPetru/ezperm",
    "keywords": "permissions,django",
    "license": "LICENSE.md",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ezperm",
    "package_url": "https://pypi.org/project/ezperm/",
    "platform": null,
    "project_url": "https://pypi.org/project/ezperm/",
    "project_urls": {
      "Homepage": "https://github.com/VojtechPetru/ezperm",
      "Repository": "https://github.com/VojtechPetru/ezperm"
    },
    "release_url": "https://pypi.org/project/ezperm/0.1.1/",
    "requires_dist": [
      "django (>=2.2,<4.2) ; extra == \"django\""
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Permissions made easy",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17487596,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82221936ce6189ed83a9df1f0c6fedcd4a6415763395e9af220127da8e6f8e84",
          "md5": "51e307165feb503c5a2bdf44dea7dd18",
          "sha256": "2f1a616fedb4d17f852d96d36a3114895c384d8be56c3fe027e14ac63f650a8e"
        },
        "downloads": -1,
        "filename": "ezperm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51e307165feb503c5a2bdf44dea7dd18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 5042,
        "upload_time": "2023-03-29T03:32:27",
        "upload_time_iso_8601": "2023-03-29T03:32:27.693099Z",
        "url": "https://files.pythonhosted.org/packages/82/22/1936ce6189ed83a9df1f0c6fedcd4a6415763395e9af220127da8e6f8e84/ezperm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0857916688fa709ae595a4c444f711bc289990a710f3a564a661ced43f6f0a92",
          "md5": "e25a0447e37131a3162e0d44eeb022c4",
          "sha256": "5f94cb52b8e45469c82ed89aa9ca4020ee653def500d7fdab9de820c517bf242"
        },
        "downloads": -1,
        "filename": "ezperm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e25a0447e37131a3162e0d44eeb022c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 3342,
        "upload_time": "2023-03-29T03:32:29",
        "upload_time_iso_8601": "2023-03-29T03:32:29.318157Z",
        "url": "https://files.pythonhosted.org/packages/08/57/916688fa709ae595a4c444f711bc289990a710f3a564a661ced43f6f0a92/ezperm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "846b532955016f800e81f6b022842570cc1105cca979e782a1536fe8471e382b",
          "md5": "7080005c1c506503aa64745449835dff",
          "sha256": "7951db573e1575fe83b54cf55699bda8ebb2ebda34b0a7e8ef3a4a3ac5b7960e"
        },
        "downloads": -1,
        "filename": "ezperm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7080005c1c506503aa64745449835dff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6912,
        "upload_time": "2023-03-29T03:47:26",
        "upload_time_iso_8601": "2023-03-29T03:47:26.987331Z",
        "url": "https://files.pythonhosted.org/packages/84/6b/532955016f800e81f6b022842570cc1105cca979e782a1536fe8471e382b/ezperm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab39cd5d91f21db2c184864ffde734e0287f6a2dc013ba6aae5c322b3f9a55d1",
          "md5": "fa8fc11f135db89fd4aaf5722bcde509",
          "sha256": "bbbdad4773bf011b919d5d07a6c29ed75322f82e83b1cc717e8c5330fd6f663c"
        },
        "downloads": -1,
        "filename": "ezperm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa8fc11f135db89fd4aaf5722bcde509",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 5197,
        "upload_time": "2023-03-29T03:47:28",
        "upload_time_iso_8601": "2023-03-29T03:47:28.664988Z",
        "url": "https://files.pythonhosted.org/packages/ab/39/cd5d91f21db2c184864ffde734e0287f6a2dc013ba6aae5c322b3f9a55d1/ezperm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "846b532955016f800e81f6b022842570cc1105cca979e782a1536fe8471e382b",
        "md5": "7080005c1c506503aa64745449835dff",
        "sha256": "7951db573e1575fe83b54cf55699bda8ebb2ebda34b0a7e8ef3a4a3ac5b7960e"
      },
      "downloads": -1,
      "filename": "ezperm-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7080005c1c506503aa64745449835dff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 6912,
      "upload_time": "2023-03-29T03:47:26",
      "upload_time_iso_8601": "2023-03-29T03:47:26.987331Z",
      "url": "https://files.pythonhosted.org/packages/84/6b/532955016f800e81f6b022842570cc1105cca979e782a1536fe8471e382b/ezperm-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab39cd5d91f21db2c184864ffde734e0287f6a2dc013ba6aae5c322b3f9a55d1",
        "md5": "fa8fc11f135db89fd4aaf5722bcde509",
        "sha256": "bbbdad4773bf011b919d5d07a6c29ed75322f82e83b1cc717e8c5330fd6f663c"
      },
      "downloads": -1,
      "filename": "ezperm-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fa8fc11f135db89fd4aaf5722bcde509",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 5197,
      "upload_time": "2023-03-29T03:47:28",
      "upload_time_iso_8601": "2023-03-29T03:47:28.664988Z",
      "url": "https://files.pythonhosted.org/packages/ab/39/cd5d91f21db2c184864ffde734e0287f6a2dc013ba6aae5c322b3f9a55d1/ezperm-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}