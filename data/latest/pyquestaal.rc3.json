{
  "info": {
    "author": "Santosh Kumar Radha",
    "author_email": "srr70@case.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# PyQUESTAAL\n\n[![DOI](https://zenodo.org/badge/258655688.svg)](https://zenodo.org/badge/latestdoi/258655688)\n\nThis is a calculator class that has been written to interface calculations done using [QUESTAAL](http://questaal.org) with highthroughput calculators like [ASE](https://wiki.fysik.dtu.dk/ase/). \n\n>Note: The module can be used as a stand alone python controller for questaal jobs as well.\n\n### Features\n\n  - make symmetry line files supported by QUESTAAL on the fly with a given structure\n  - plot bands directly *(requires plotquestaal.py)*\n  - relaxations included\n  - can read forces from output files\n  - Control number of processors\n\n\n\n### Installation\n 1. Copy the files lmf.py to the working directory\n 2. Import them and use !\n 3. Make sure \"lmf\" is recognizable in the path and also modify the type of mpi call. default \"mpirun\"\n \n### Examples\nSimple example usage shown in \t[simple_examples.ipynb](https://github.com/santoshkumarradha/pyquestaal/blob/pyquestaal/simple_example.ipynb) \nComprehensive example shown in [ tutorial_example.ipynb](https://github.com/santoshkumarradha/pyquestaal/blob/pyquestaal/tutorial_example.ipynb)\n\nTo use it with ASE, one can do something like\n```python\nfrom lmf import lmf #load the lmf calculator\nimport numpy as np\nfrom ase.io import read\nfrom ase.units import kJ\nfrom ase.eos import EquationOfState\nfrom ase import Atoms\nfrom ase.io.trajectory import Trajectory\ndef test():\n    a = 4.0  # approximate lattice constant\n    b = a / 2\n    ag = Atoms('Ag',\n               cell=[(0, b, b), (b, 0, b), (b, b, 0)],\n               pbc=1,\n               calculator=lmf()) # Use QUESTAAL's LMF as calculator\n    cell = ag.get_cell()\n    traj = Trajectory('Ag.traj', 'w')\n    for x in np.linspace(0.95, 1.05, 5):\n        ag.set_cell(cell * x, scale_atoms=True)\n        ag.get_potential_energy()\n        traj.write(ag)\n    \n\n    configs = read('Ag.traj@0:5')  # read 5 configurations\n    # Extract volumes and energies:\n    volumes = [ag.get_volume() for ag in configs]\n    energies = [ag.get_potential_energy() for ag in configs]\n    eos = EquationOfState(volumes, energies)\n    v0, e0, B = eos.fit()\n    print(B / kJ * 1.0e24, 'GPa')\n    eos.plot('Ag-eos.png')\ntest()\n```\n### Citation\n\nIf you find this work useful, please cite using\n```\n@misc{https://doi.org/10.5281/zenodo.4292415,\n  doi = {10.5281/ZENODO.4292415},\n  url = {https://zenodo.org/record/4292415},\n  author = {Radha, Santosh Kumar},\n  title = {pyQuestaal: An python interface or Questaal quantum codes.},\n  publisher = {Zenodo},\n  year = {2020},\n  copyright = {Open Access}\n}\n```\n\n### To Do\n   - control over all variables\n   - Interface with pyamtgen\n   - Add the developed lattice relaxation module which uses Genetic Algorithm\n   - Make more standalone\n   - More complex parser for questaal output (look for questaal-reader repo)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/santoshkumarradha/pyquestaal",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyquestaal",
    "package_url": "https://pypi.org/project/pyquestaal/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyquestaal/",
    "project_urls": {
      "Homepage": "https://github.com/santoshkumarradha/pyquestaal"
    },
    "release_url": "https://pypi.org/project/pyquestaal/0.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "Python class to interface with QUESTAAL Quantum codes which is a suite of electronic structure programs.",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14335188,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fadc8d657bb5333f9f37590530f82adbd18b6eed0fd7104927bcf6147731dcc6",
          "md5": "a00bfce0cd2c235151f201b81b908d31",
          "sha256": "a9b2cac8a7f2678309b83949b9205973b1586183a995c01b1f1d9c524c7e1586"
        },
        "downloads": -1,
        "filename": "pyquestaal-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a00bfce0cd2c235151f201b81b908d31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 3682,
        "upload_time": "2022-07-04T23:39:25",
        "upload_time_iso_8601": "2022-07-04T23:39:25.150440Z",
        "url": "https://files.pythonhosted.org/packages/fa/dc/8d657bb5333f9f37590530f82adbd18b6eed0fd7104927bcf6147731dcc6/pyquestaal-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c4904e3c5faf9293f0cefa66fa0f19415ba5261ab76af8f7d6fb7192e0ee060",
          "md5": "9524402883ec9e91df14bcbde30cd5ac",
          "sha256": "a810e376d36d695ce8318069d355c31266b19e7c9774042d4bff1b072fb8940a"
        },
        "downloads": -1,
        "filename": "pyquestaal-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9524402883ec9e91df14bcbde30cd5ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 6454,
        "upload_time": "2022-07-05T00:11:11",
        "upload_time_iso_8601": "2022-07-05T00:11:11.760848Z",
        "url": "https://files.pythonhosted.org/packages/8c/49/04e3c5faf9293f0cefa66fa0f19415ba5261ab76af8f7d6fb7192e0ee060/pyquestaal-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4159b9007d02aa7ab7db0ae979fca0da891ee17ad98861954c0e66fded927d6e",
          "md5": "daac411c6dc19de945f1c87fcdf068b4",
          "sha256": "61e2094bf94f31fe4f3a3eedbab29c33a542d0a2ebcb169feec2ceee1bdb1e40"
        },
        "downloads": -1,
        "filename": "pyquestaal-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "daac411c6dc19de945f1c87fcdf068b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 6432,
        "upload_time": "2022-07-05T00:12:43",
        "upload_time_iso_8601": "2022-07-05T00:12:43.299052Z",
        "url": "https://files.pythonhosted.org/packages/41/59/b9007d02aa7ab7db0ae979fca0da891ee17ad98861954c0e66fded927d6e/pyquestaal-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4159b9007d02aa7ab7db0ae979fca0da891ee17ad98861954c0e66fded927d6e",
        "md5": "daac411c6dc19de945f1c87fcdf068b4",
        "sha256": "61e2094bf94f31fe4f3a3eedbab29c33a542d0a2ebcb169feec2ceee1bdb1e40"
      },
      "downloads": -1,
      "filename": "pyquestaal-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "daac411c6dc19de945f1c87fcdf068b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 6432,
      "upload_time": "2022-07-05T00:12:43",
      "upload_time_iso_8601": "2022-07-05T00:12:43.299052Z",
      "url": "https://files.pythonhosted.org/packages/41/59/b9007d02aa7ab7db0ae979fca0da891ee17ad98861954c0e66fded927d6e/pyquestaal-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}