{
  "info": {
    "author": "Christopher",
    "author_email": "cpsuperstoreinc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# ProbDistro\nA Python package for handling various continuous and discrete random variables, including normal/gauss, binomial, poisson, and more!\n\n**Contents:**\n- [Available Distributions](#available-distributions)\n  - [Discrete Distribution](#discrete)\n  - [Continuous Distribution](#continuous)\n- [Usage](#usage)\n  - [Discrete Distribution](#discrete-distribution)\n  - [Continuous Distribution](#continuous-distribution)\n  - [Converting Between Distributions](#converting-between-distributions)\n- [Random Variables](#random-variables)\n  - [Jointly Distributed Random Variables](#jointly-distributed-random-variables)\n- [Bug Tracker](#bug-tracker)\n\n## Available Distributions\nThe following is a list of discrete and continuous distributions this library has to offer\n\n### Discrete\nA discrete distribution is when there are countably many outcomes (example, any integer of 0 or higher, or any integer between 5 and 10)\n\n#### Bernoulli\nA discrete random variable which can be used to represent the outcome of a single yes/no experiment. \nIt has a probability of success \"p\"\n\n#### Binomial\nA discrete random variable which can be used to represent the outcome of \"n\" yes/no experiments\nwith \"p\" probability of success, and \"1 - p\" (or q) probability of failure\n\n#### Geometric\nA discrete random variable which can be used to represent 2 situations.\n     \n1. `include_success_trial = True` - the number of trials which are needed to obtain exactly 1 success. Supports set {1, 2, 3, 4, ...}.\nFor example, if the probability is 0.25 for an x value of 3, this indicates there is a 25% chance of receiving\nno successes until the third trial where the first success is obtained\n3. `include_success_trial = False` - the number of failures before the first success\n        supports set {0, 1, 2, 3, ...}\n\n#### Hypergeometric\nA discrete random variable which can be used to represent the probability of receiving \"x\" successes in\n\"n\" dependent draws from a finite population without replacement (draws are not independent of each other)\nfrom a total population of \"N\" which contains \"K\" success states\n\n#### Poisson\nA discrete random variable which can be used to represent the probability of \"x\" events occurring in\na given time interval, provided they arrive with a mean rate of \"rate\", and arrivals are independent\n\n### Continuous\nA continuous distribution is when there are uncountably many outcomes (example, any real number of 0 or higher, or any real number between 5 and 10)\n\n#### Exponential\nA continuous random variable representing the probability of time between events of a Poisson distribution\n(Occurs independently, continuously, and at an average rate)\n\n#### Normal\nA continuous random variable representing a bell curve distribution, which is ubiquitous.\n\n#### Uniform\nA continuous random variable representing equally likely outcomes between \"a\" and \"b\"\n\n## Usage\nSimply instantiate the desired distribution, and use its methods to perform the desired calculations.\n\nFor example, with a Poisson distribution\n\n```python\nimport ProbDistro\n\np = ProbDistro.Poisson(0.75)\n\n# print the probability 5 or fewer events will occur\nprint(p.less_than_equals(5))\n\n# print the probability exactly 2 events will occur\nprint(p(5))\n```\n\nOr, to convert one distribution to another:\n\n```python\nimport ProbDistro\n\np = ProbDistro.Binomial(200, 0.02)\n\n# convert the binomial distribution to normal distribution\nn = ProbDistro.conversion.binomial_to_normal(p)\n\n# calculate the value of the normal distro at 5 on the CDF and PDF functions\nprint(n.cdf(5))\nprint(n.pdf(5))\n```\n\n### Discrete Distribution\nAll continuous distributions extend the `BaseDiscreteDistribution` class. This enforces each discrete distribution to implement the following methods:\n\n#### cdf(x: float) -> float:\nReturns the value of the cumulative distribution function at `x`\n\n#### pmf(x: float) -> float:\nReturns the value of the probability mass function at `x`\n\n#### equals(x: float) -> float:\nAn alias for the `pmf` method\n\n#### expected_value() -> float:\nReturns the expected value of the distribution\n\n#### variance() -> float:\nReturns the variance of the distribution\n\n#### less_than(x: float) -> float:\nReturns the probability of being less than `x` \n\n#### less_than_equals(x: float) -> float:\nReturns the probability of being less than or equal to `x` \n\n#### greater_than(x: float) -> float:\nReturns the probability of being greater than `x` \n\n#### greater_than_equals(x: float) -> float:\nReturns the probability of being greater than or equal to `x` \n\n#### mean() -> float:\nReturns the mean value of the distribution. This is an alias for the `expected_value` method.\n\n#### standard_deviation() -> float:\nReturns the standard deviation of the distribution.\n\n#### between(upper: float, lower: float):\nReturns the probability of being between the upper and lower bounds. Entering the upper bound as the lower bound will result in a negative probability.\n\n#### cdf_range(x: typing.Iterable):\nReturns a list containing the value of the CDF at every value in the provided iterable (list, range, set, tuple, etc.)\n\n#### pmf_range(x: typing.Iterable):\nReturns a list containing the value of the PMF at every value in the provided iterable (list, range, set, tuple, etc.)\n\n#### to_discrete_random_variable(start: float = None, stop: float = None, step: float = None) -> DiscreteRandomVariable:\nReturns a discrete random variable representation of this distribution. `Start` is the first value to be included, and `stop` is the last. Intervals of `step` are used.\n\nNote that depending on the distribution, you may not need to specify all three. \nIn all cases, the default step is 1, and the start will be the first value in the range of supported values.\n\nFor distributions such as Binomial or Hypergeometric, the range of x values has an upper bound, and so that upper limit is the default for `stop`\n\nFor distributions such as Geometric or Poisson, x is unbound so you will need to specify the upper limit.\n\nIn all cases, the `correct_probabilities` class method is used during conversion, so the probabilities do not necessarily need to add up to 1 (which will be the case with an unbound random variable)\n\n### Continuous Distribution\nAll continuous distributions extend the `BaseDiscreteDistribution` class. This enforces each discrete distribution to implement the following methods:\n\n#### cdf(self, x: float) -> float:\nReturns the value of the cumulative distribution function at `x`\n\n#### pdf(self, x: float) -> float:\nReturns the value of the probability density function at `x`\n\n#### equals(self, x: float) -> float:\nReturns 0\n\n#### expected_value(self) -> float:\nReturns the expected value of the distribution\n\n#### variance(self) -> float:\nReturns the variance of the distribution\n\n#### less_than(self, x: float) -> float:\nReturns the probability of being less than `x` \n\n#### less_than_equals(self, x: float) -> float:\nReturns the probability of being less than or equal to `x` \n\n#### greater_than(self, x: float) -> float:\nReturns the probability of being greater than `x` \n\n#### greater_than_equals(self, x: float) -> float:\nReturns the probability of being greater than or equal to `x` \n\n#### mean(self) -> float:\nReturns the mean value of the distribution. This is an alias for the `expected_value` method.\n\n#### standard_deviation(self) -> float:\nReturns the standard deviation of the distribution.\n\n#### between(self, upper: float, lower: float):\nReturns the probability of being between the upper and lower bounds. Entering the upper bound as the lower bound will result in a negative probability.\n\n#### cdf_range(self, x: typing.Iterable):\nReturns a list containing the value of the CDF at every value in the provided iterable (list, range, set, tuple, etc.)\n\n#### pdf_range(self, x: typing.Iterable):\nReturns a list containing the value of the PDF at every value in the provided iterable (list, range, set, tuple, etc.)\n\n### Converting Between Distributions\nProbDistro includes a set of functions for converting between different types of distributions. \nEach method uses the same signature where the sole parameter is the distribution to be converted, and the return value is the converted target distribution.\n\nFor example, converting a binomial distribution (discrete) to a normal distribution (continuous)\n```python\nimport ProbDistro\n\nbinomial = ProbDistro.Binomial(200, 0.02)\n\nnormal = ProbDistro.conversion.binomial_to_normal(binomial)\n```\n\nThe following is a list of available conversions:\n- binomial to normal\n- normal to binomial\n- bernoulli to binomial\n- binomial to bernoulli\n- binomial to poisson\n- exponential to poisson\n- poisson to exponential\n- exponential to geometric\n- geometric to exponential\n\n## Random Variables\nProbDistro also supports random variables. This can be thought of as a table, like so:\n\n| x      | 1   | 2    | 3     | 4     |\n|--------|-----|------|-------|-------|\n| p(X=x) | 0.5 | 0.25 | 0.125 | 0.125 |\n\nWhere the first row contains every possible outcome of the random variable, \nand p(X=x) is the probability that each of those events occur. \nBy law of total probability, all the probabilities MUST add up to 1.\n\nThis table should be thought of as the PMF as a discrete random variable, where the probability of 1 is 0.5 \nand the probability of 4 is 0.125.\n\nTo create a random variable which represents the above table, the following code can be used:\n\n```python\nimport ProbDistro\n\nrv = ProbDistro.DiscreteRandomVariable([1, 2, 3, 4], [0.5, 0.25, 0.125, 0.125])\n```\n\nNote that the values of x must be ordered from smallest to largest, and the probabilities must be arranged to match the order of the x values.\n\nThe `DiscreteRandomVariable` also extends the `BaseDiscreteDistribution` class, so it implements each of the methods \nlisted under [Discrete Distribution](#discrete-distribution) (including `to_discrete_random_variable` which allows you to \ncreate a subset of this distribution of x values between `start` and `stop`) \n\nIf the probabilities do not add up to 1 (rounded to 10 digits to account for floating point errors), the \n`correct_probabilities` class method can be used to correct the probabilities and make their sum equal 1:\n\n```python\nimport ProbDistro\n\nrv = ProbDistro.DiscreteRandomVariable.correct_probabilities([1, 2, 3], [0.5, 0.25, 0.125])\n\nprint(rv)\n```\n\nOutput:\n```\n<DiscreteRandomVariableDistribution x=[1, 2, 3] px=[0.5714285714285714, 0.2857142857142857, 0.14285714285714285]>\n```\n\nFinally, if the data is in a dictionary, the `from_dict` class method can be used:\n\n```python\nimport ProbDistro\n\nrv = ProbDistro.DiscreteRandomVariable.from_dict({1: 0.5, 2: 0.25, 3: 0.125, 4: 0.125})\n```\n\nOr if the probabilities do not add up to 1:\n```python\nimport ProbDistro\n\nrv = ProbDistro.DiscreteRandomVariable.from_dict({1: 0.5, 2: 0.25, 3: 0.125}, correct=True)\n```\n\n### Jointly Distributed Random Variables\nIf you have 2 or more discrete random variables, ProbDistro allows you to perform operations on them as if there were a joint distribution. For example:\n\n```python\nfrom ProbDistro import DiscreteRandomVariable\n\na = DiscreteRandomVariable([1, 2, 3, 4], [0.5, 0.25, 0.125, 0.125])\nb = DiscreteRandomVariable([2, 4, 6], [0.3, 0.6, 0.1])\n\n# returns P(a=1 and b=4)\nprint(a.p_and(a(1), b(4)))\n\n# returns P(a=1 or b=4)\nprint(a.p_or(a(1), b(4)))\n\n# returns P(a=1 or b=4), assuming a and b are disjoint\nprint(a.p_disjoint_or(a(1), b(4)))\n\n# returns P(a=1 | b=4)\nprint(a.p_given(a(1), b(4)))\n```\n\nNote that each of these operations are static methods, so the following code is equally valid\n```python\nfrom ProbDistro import DiscreteRandomVariable\n\na = DiscreteRandomVariable([1, 2, 3, 4], [0.5, 0.25, 0.125, 0.125])\nb = DiscreteRandomVariable([2, 4, 6], [0.3, 0.6, 0.1])\n\n# returns P(a=1 and b=4)\nprint(DiscreteRandomVariable.p_and(a(1), b(4)))\n\n# returns P(a=1 or b=4)\nprint(DiscreteRandomVariable.p_or(a(1), b(4)))\n\n# returns P(a=1 or b=4), assuming a and b are disjoint\nprint(DiscreteRandomVariable.p_disjoint_or(a(1), b(4)))\n\n# returns P(a=1 | b=4)\nprint(DiscreteRandomVariable.p_given(a(1), b(4)))\n```\n\nThis is not limited to `a=1` and `b=4`. The `less_than`, `greater_than` and other methods of that nature can also be used in place of a(1) (or a.equals(1)):\n\n```python\nfrom ProbDistro import DiscreteRandomVariable\n\na = DiscreteRandomVariable([1, 2, 3, 4], [0.5, 0.25, 0.125, 0.125])\nb = DiscreteRandomVariable([2, 4, 6], [0.3, 0.6, 0.1])\n\n# returns P(a > 1 and b<=4)\nprint(DiscreteRandomVariable.p_and(a.greater_than(1), b.less_than_equals(4)))\n```\n\nFor improved readability, the following methods are also available, which are aliases of the above methods:\n - `intersection` - Alias for`p_and`\n - `union` - Alias for `p_or`\n - `disjoint_union` - Alias for `p_disjoint_or`\n\nAdditionally, there exist other operations of jointly distributed random variables:\n\n#### Joint Distribution Table\nTo generate a joint distribution table, the following code is used:\n```python\nfrom ProbDistro import DiscreteRandomVariable\n\na = DiscreteRandomVariable([1, 2, 3, 4], [0.5, 0.25, 0.125, 0.125])\nb = DiscreteRandomVariable([2, 4, 6], [0.3, 0.6, 0.1])\n\na.jointly_distributed_table(b)\n```\n\nWhich returns the following 2d list:\n```\n[\n  [0.15, 0.075, 0.0375, 0.0375], \n  [0.3,  0.15,  0.075,  0.075 ], \n  [0.05, 0.025, 0.0125, 0.0125]\n]\n```\n\nWhere the values of `a` are placed along the top, and values of `b` are moving downwards.\nThe array can be interpreted as the following table:\n\n| b \\ a | 1    | 2     | 3      | 4      |\n|-------|------|-------|--------|--------|\n| 2     | 0.15 | 0.075 | 0.0375 | 0.0375 |\n| 4     | 0.3  | 0.15  | 0.075  | 0.075  |\n| 6     | 0.05 | 0.025 | 0.0125 | 0.0125 |\n\nAnd if we were to add the cells containing the marginal probabilities, we can restore the original probabilities given to the constructor:\n\n| b \\ a  | 1    | 2     | 3      | 4      | p(B=b) |\n|--------|------|-------|--------|--------|--------|\n| 2      | 0.15 | 0.075 | 0.0375 | 0.0375 | 0.3    |\n| 4      | 0.3  | 0.15  | 0.075  | 0.075  | 0.6    |\n| 6      | 0.05 | 0.025 | 0.0125 | 0.0125 | 0.1    |\n| p(A=a) | 0.5  | 0.25  | 0.125  | 0.125  | 1      |\n\n#### Covariance\nThe covariance can be calculated through the following command:\n\n```python\nfrom ProbDistro import DiscreteRandomVariable\n\na = DiscreteRandomVariable([1, 2], [0.4, 0.6])\nb = DiscreteRandomVariable([2, 3, 4], [0.3, 0.2, 0.5])\n\nprint(a.covariance(b))\n```\n\nOutput:\n```\n1.7763568394002505e-15\n```\n\n#### Correlation\nThe correlation can be calculated through the following command:\n\n```python\nfrom ProbDistro import DiscreteRandomVariable\n\na = DiscreteRandomVariable([1, 2], [0.4, 0.6])\nb = DiscreteRandomVariable([2, 3, 4], [0.3, 0.2, 0.5])\n\nprint(a.correlation(b))\n```\n\nOutput:\n```\n1.8809278223539317e-15\n```\n\n## Bug Tracker\nTo report bugs or leave feedback, please visit our bug tracker at \nhttps://github.com/CPSuperstore/ProbDistro/issues\n\nThanks for using ProbDistro\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CPSuperstore/ProbDistro",
    "keywords": "PROBABILITY,DISTRIBUTION,NORMAL,UNIFORM,GAUSS,POISSON,BINOMIAL,BERNOULLI,GEOMETRIC,HYPERGEOMETRIC",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ProbDistro",
    "package_url": "https://pypi.org/project/ProbDistro/",
    "platform": null,
    "project_url": "https://pypi.org/project/ProbDistro/",
    "project_urls": {
      "Bug Tracker": "https://github.com/CPSuperstore/ProbDistro/issues",
      "Documentation": "https://github.com/CPSuperstore/ProbDistro",
      "Homepage": "https://github.com/CPSuperstore/ProbDistro"
    },
    "release_url": "https://pypi.org/project/ProbDistro/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python package for handeling various continous and discrete randcom variables, including normal/gauss, binomial, poisson, and more",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13682159,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8835ad3970df9fad1948451d0650f3210f15c2f295ea323ed2b1fa235c8ad7bb",
          "md5": "c32eea1c1cdda3c35aa43a62973e3ab1",
          "sha256": "7593c7ba1be7586180b64f931ccd05f8a4bd6d71a2f389927e5dde00bb5336f6"
        },
        "downloads": -1,
        "filename": "ProbDistro-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c32eea1c1cdda3c35aa43a62973e3ab1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11140,
        "upload_time": "2022-04-26T15:22:05",
        "upload_time_iso_8601": "2022-04-26T15:22:05.964899Z",
        "url": "https://files.pythonhosted.org/packages/88/35/ad3970df9fad1948451d0650f3210f15c2f295ea323ed2b1fa235c8ad7bb/ProbDistro-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce98de56dc4d3a72d98e304b417583b0d8a76be8416757fbf48c8f89f1d63c11",
          "md5": "530581fe32d66b00a9ab653801c9aa03",
          "sha256": "fa522ad1a3ee15375da098a0f9b299bc7d5ea1a26e1681d0f92be4f3b61ed744"
        },
        "downloads": -1,
        "filename": "ProbDistro-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "530581fe32d66b00a9ab653801c9aa03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7383,
        "upload_time": "2022-04-26T15:22:07",
        "upload_time_iso_8601": "2022-04-26T15:22:07.746757Z",
        "url": "https://files.pythonhosted.org/packages/ce/98/de56dc4d3a72d98e304b417583b0d8a76be8416757fbf48c8f89f1d63c11/ProbDistro-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8d34b2eb72378f76e59003116f5ee483d92d673715bae3bf9da1577869c277f",
          "md5": "39eefc0a14a79ab5bd9596958f01531d",
          "sha256": "1fcfbe209ae574bca4c6e6fc93f024007a68589ea1c8b379722a369ef6a2efc5"
        },
        "downloads": -1,
        "filename": "ProbDistro-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39eefc0a14a79ab5bd9596958f01531d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16692,
        "upload_time": "2022-05-01T18:38:05",
        "upload_time_iso_8601": "2022-05-01T18:38:05.903980Z",
        "url": "https://files.pythonhosted.org/packages/e8/d3/4b2eb72378f76e59003116f5ee483d92d673715bae3bf9da1577869c277f/ProbDistro-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bbff1f0e2af857a96e2efca5478f09ef5af9022e58e6ac208d3d579a72eaed4",
          "md5": "05acc7ce6467e2c5dfb12fdd5abe03ba",
          "sha256": "b211a6b7119f72a424789b0a24de78eafc9fb200d3c2e12bcd55d35747e80681"
        },
        "downloads": -1,
        "filename": "ProbDistro-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "05acc7ce6467e2c5dfb12fdd5abe03ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15677,
        "upload_time": "2022-05-01T18:38:08",
        "upload_time_iso_8601": "2022-05-01T18:38:08.181220Z",
        "url": "https://files.pythonhosted.org/packages/7b/bf/f1f0e2af857a96e2efca5478f09ef5af9022e58e6ac208d3d579a72eaed4/ProbDistro-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8d34b2eb72378f76e59003116f5ee483d92d673715bae3bf9da1577869c277f",
        "md5": "39eefc0a14a79ab5bd9596958f01531d",
        "sha256": "1fcfbe209ae574bca4c6e6fc93f024007a68589ea1c8b379722a369ef6a2efc5"
      },
      "downloads": -1,
      "filename": "ProbDistro-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "39eefc0a14a79ab5bd9596958f01531d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16692,
      "upload_time": "2022-05-01T18:38:05",
      "upload_time_iso_8601": "2022-05-01T18:38:05.903980Z",
      "url": "https://files.pythonhosted.org/packages/e8/d3/4b2eb72378f76e59003116f5ee483d92d673715bae3bf9da1577869c277f/ProbDistro-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bbff1f0e2af857a96e2efca5478f09ef5af9022e58e6ac208d3d579a72eaed4",
        "md5": "05acc7ce6467e2c5dfb12fdd5abe03ba",
        "sha256": "b211a6b7119f72a424789b0a24de78eafc9fb200d3c2e12bcd55d35747e80681"
      },
      "downloads": -1,
      "filename": "ProbDistro-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "05acc7ce6467e2c5dfb12fdd5abe03ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15677,
      "upload_time": "2022-05-01T18:38:08",
      "upload_time_iso_8601": "2022-05-01T18:38:08.181220Z",
      "url": "https://files.pythonhosted.org/packages/7b/bf/f1f0e2af857a96e2efca5478f09ef5af9022e58e6ac208d3d579a72eaed4/ProbDistro-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}