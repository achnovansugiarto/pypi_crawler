{
  "info": {
    "author": "Roy",
    "author_email": "wjjroy@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "talos project[^ 1]\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n![](https://img.shields.io/badge/language-python-orang.svg)\n![](https://img.shields.io/pypi/dm/talos-api?style=flat)\n\n=======================\n\n[TOC]\n\n\n\n## 特性\n\nhttps://gitee.com/wu.jianjun/talos/tree/master/release\n\n项目是主要基于falcon和SQLAlchemy封装，提供常用的项目工具，便于用户编写API服务\n项目提供了工具talos_generator，可以自动为您生成基于talos的api应用，并且目录结构基于python标准包管理\n\n* 基于falcon，高效\n* 使用SQLAlchemy作为数据库后端，快速切换数据库\n* 项目生成工具\n* 快速RESTful CRUD API开发\n* filters，pagination，orders支持\n* validation数据校验\n* 异步任务集成[celery]\n* 定时任务集成[celery]\n* 频率限制\n* 国际化i18n支持\n* SMTP邮件、AD域、CSV导出、缓存等常用模块集成\n\n首先setup.py install 安装talos,运行talos生成工具生成项目\n\n\n\n## 项目生成\n\n安装talos后，会生成talos_generator工具，此工具可以为用户快速生成业务代码框架\n\n```bash\n> talos_generator\n> 请输入项目生成目录：./\n> 请输入项目名称(英)：cms\n> 请输入生成类型[project,app,其他内容退出]：project\n> 请输入项目版本：1.2.4\n> 请输入项目作者：Roy\n> 请输入项目作者Email：roy@test.com\n> 请输入项目启动配置目录：./etc #此处填写默认配置路径，相对路径是相对项目文件夹，也可以是绝对路径\n> 请输入项目DB连接串：postgresql+psycopg2://postgres:123456@127.0.0.1/testdb [SQLAlchemy的DB连接串]\n### 创建项目目录：./cms\n### 创建项目：cms(1.2.4)通用文件\n### 创建启动服务脚本\n### 创建启动配置：./etc/cms.conf\n### 创建中间件目录\n### 完成\n> 请输入生成类型[project,app,其他内容退出]：app # 生成的APP用于编写实际业务代码，或手动编写\n### 请输入app名称(英)：user\n### 创建app目录：./cms/cms/apps\n### 创建app脚本：user\n### 完成\n> 请输入生成类型[project,app,其他内容退出]：\n```\n\n项目生成后，修改配置文件，比如**./etc/cms.conf的application.names配置，列表中加入\"cms.apps.user\"即可启动服务器进行调试**\n\n\n\n\n## 开发调试\n启动项目目录下的server/simple_server.py即可进行调试\n\n\n\n## 生产部署\n  - 源码打包\n\n```bash\npip install wheel\npython setup.py bdist_wheel\npip install cms-1.2.4-py2.py3-none-any.whl\n```\n\n  - 启动服务：\n\n```bash\n# Linux部署一般配置文件都会放在/etc/cms/下，包括cms.conf和gunicorn.py文件\n# 并确保安装gunicorn\npip install gunicorn\n# 步骤一，导出环境变量：\nexport CMS_CONF=/etc/cms/cms.conf\n# 步骤二，\ngunicorn --pid \"/var/run/cms.pid\" --config \"/etc/cms/gunicorn.py\" \"cms.server.wsgi_server:application\"\n```\n\n\n\n## API开发引导\n\n### 基础开发步骤\n\n#### 设计数据库\n\n略(talos要求至少有一列唯一性，否则无法提供item型操作)\n\n#### 导出数据库模型\n\ntalos中使用的是SQLAlchemy，使用表操作需要将数据库导出为python对象定义，这样做的好处是\n\n1. 确定表结构，形成应用代码与数据库之间的版本对应\n2. 便于编程中表达数据库操作，而并非使用字符串\n3. SQLAlchemy的多数据库支持，强大的表达能力\n\n```bash\npip install sqlacodegen\nsqlacodegen postgresql+psycopg2://postgres:123456@127.0.0.1/testdb --outfile models.py\n```\n\n生成的models.py内容大致如下：\n\n```python\n# coding=utf-8\n\nfrom __future__ import absolute_import\n\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nmetadata = Base.metadata\n\nclass User(Base):\n    __tablename__ = 'user'\n\n    id = Column(String(36), primary_key=True)\n    name = Column(String(63), nullable=False)\n```\n\n当然这个导出操作如果在足够熟悉的情况下可以手动编写，不需要导出工具\n\n#### 数据库模型类的魔法类\n\n将导出的文件表内容复制到cms.db.models.py中，并为每个表设置DictBase基类继承\n\nmodels.py文件中，每个表对应着一个class，这使得我们在开发业务处理代码时能明确表对应的处理，但在接口返回中，我们通常需要转换为json，因而，我们需要为models.py中的每个表的类增加一个继承关系，以便为它提供转换的支持\n\n处理完后的models.py文件如下：\n\n```python\n# coding=utf-8\n\nfrom __future__ import absolute_import\n\nfrom sqlalchemy import String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom talos.db.dictbase import DictBase\n\nBase = declarative_base()\nmetadata = Base.metadata\n\nclass User(Base, DictBase):\n    __tablename__ = 'user'\n\n    id = Column(String(36), primary_key=True)\n    name = Column(String(63), nullable=False)\n\nclass UserPhoneNum(Base, DictBase):\n    __tablename__ = 'user_phone'\n\n    user_id = Column(String(63), nullable=False, primary_key=True)\n    phone = Column(String(63), nullable=False, primary_key=True)\n    description = Column(String(255), nullable=True)\n```\n\n继承了这个类之后，不仅提供了转换接口json的能力，还提供了字段提取的能力，此处没有指定字段提取，则意味着默认使用表的所有字段（list和被其他表外键引用时默认不包含外键字段），如果需要自定义字段，可以在类中配置字段提取：\n\n```python\nclass User(Base, DictBase):\n    __tablename__ = 'user'\n    # 用于控制获取列表时字段返回\n    attributes = ['id', 'name']\n    # 用于控制获取详情时字段返回\n    detail_attributes = attributes\n    # 用于控制被其他资源外键引用时字段返回\n    summary_attributes = ['name']\n\n    id = Column(String(36), primary_key=True)\n    name = Column(String(63), nullable=False)\n```\n**指定attributes/detail_attributes/summary_attributes是非常有效的字段返回控制手段，减少返回的信息，可以减少服务器传输的压力，不仅如此，如果此处有外键relationship时，指定各attributes属性还可以有效的控制数据库对于外键的查询效率** [^ 9]\n\n> 扩展阅读：\n>\n> 一个较为常见的场景，某系统设计有数据库表如下：\n> User -> PhoneNum/Addresses, 一个用户对应多个电话号码以及多个地址\n> Tag，标签表，一个资源可对应多个标签\n> Region -> Tag，地域表，一个地域有多个标签\n> Resource -> Region/Tag，资源表，一个资源属于一个地域，一个资源有多个标签\n>\n> 用models表示大致如下：\n>\n> ```python\n> class Address(Base, DictBase):\n>     __tablename__ = 'address'\n>     attributes = ['id', 'location', 'user_id']\n>     detail_attributes = attributes\n>     summary_attributes = ['location']\n> \n>     id = Column(String(36), primary_key=True)\n>     location = Column(String(255), nullable=False)\n>     user_id = Column(ForeignKey(u'user.id'), nullable=False)\n> \n>     user = relationship(u'User')\n>     \n> class PhoneNum(Base, DictBase):\n>     __tablename__ = 'phone'\n>     attributes = ['id', 'number', 'user_id']\n>     detail_attributes = attributes\n>     summary_attributes = ['number']\n> \n>     id = Column(String(36), primary_key=True)\n>     number = Column(String(255), nullable=False)\n>     user_id = Column(ForeignKey(u'user.id'), nullable=False)\n> \n>     user = relationship(u'User')\n>     \n> class User(Base, DictBase):\n>     __tablename__ = 'user'\n>     attributes = ['id', 'name', 'addresses', 'phonenums']\n>     detail_attributes = attributes\n>     summary_attributes = ['name']\n> \n>     id = Column(String(36), primary_key=True)\n>     name = Column(String(255), nullable=False)\n>     \n>     addresses = relationship(u'Address', back_populates=u'user', lazy=False, uselist=True, viewonly=True)\n>     phonenums = relationship(u'PhoneNum', back_populates=u'user', lazy=False, uselist=True, viewonly=True)\n>     \n> class Tag(Base, DictBase):\n>     __tablename__ = 'tag'\n>     attributes = ['id', 'res_id', 'key', 'value']\n>     detail_attributes = attributes\n>     summary_attributes = ['key', 'value']\n> \n>     id = Column(String(36), primary_key=True)\n>     res_id = Column(String(36), nullable=False)\n>     key = Column(String(36), nullable=False)\n>     value = Column(String(36), nullable=False)\n> \n> class Region(Base, DictBase):\n>     __tablename__ = 'region'\n>     attributes = ['id', 'name', 'desc', 'tags', 'user_id', 'user']\n>     detail_attributes = attributes\n>     summary_attributes = ['name', 'desc']\n> \n>     id = Column(String(36), primary_key=True)\n>     name = Column(String(255), nullable=False)\n>     desc = Column(String(255), nullable=True)\n>     user_id = Column(ForeignKey(u'user.id'), nullable=True)\n>     user = relationship(u'User')\n> \n>     tags = relationship(u'Tag', primaryjoin='foreign(Region.id) == Tag.res_id',\n>         lazy=False, viewonly=True, uselist=True)\n> \n> class Resource(Base, DictBase):\n>     __tablename__ = 'resource'\n>     attributes = ['id', 'name', 'desc', 'tags', 'user_id', 'user', 'region_id', 'region']\n>     detail_attributes = attributes\n>     summary_attributes = ['name', 'desc']\n> \n>     id = Column(String(36), primary_key=True)\n>     name = Column(String(255), nullable=False)\n>     desc = Column(String(255), nullable=True)\n>     user_id = Column(ForeignKey(u'user.id'), nullable=True)\n>     region_id = Column(ForeignKey(u'region.id'), nullable=True)\n>     user = relationship(u'User')\n>     region = relationship(u'region')\n> \n>     tags = relationship(u'Tag', primaryjoin='foreign(Resource.id) == Tag.res_id',\n>         lazy=False, viewonly=True, uselist=True)\n> ```\n>\n> 如上，user作为最底层的资源，被region引用，而region又被resource使用，导致层级嵌套极多，在SQLAlchmey中，如果希望快速查询一个列表资源，一般而言我们会在relationship中加上lazy=False，这样就可以让信息在一次sql查询中加载出来，而不是每次访问外键属性再发起一次查询。问题在于，lazy=False时sql被组合为一个SQL语句，relationship每级嵌套会被展开，实际数据库查询结果将是乘数级：num_resource\\*num_resource_user\\*num_resource_user_address\\*num_resource_user_phonenum\\*num_region\\*num_region_user_address\\*num_region_user_phonenum...\n>\n> 较差的情况下可能回导致resource表只有1k数量级，而本次查询结果却是1000 \\* 1k级\n> 通常我们加载resource时，我们并不需要region.user、region.tags、user.addresses、user.phonenums等信息，通过指定summary_attributes来防止数据过载（需要启用CONF.dbcrud.dynamic_relationship，默认启用），这样我们得到的SQL查询是非常快速的，结果集也保持和resource一个数量级\n\n\n\n#### 增删改查的资源类\n\n在cms.db中新增resource.py文件，内容如下：\n\n```python\n# coding=utf-8\n\nfrom __future__ import absolute_import\n\nfrom talos.db.crud import ResourceBase\n\nfrom cms.db import models\n\n\nclass User(ResourceBase):\n    orm_meta = models.User\n    _primary_keys = 'id'\n\n\nclass UserPhoneNum(ResourceBase):\n    orm_meta = models.UserPhoneNum\n    _primary_keys = ('user_id', 'phone')\n```\n\n完成此项定义后，我们可以使用resource.User来进行用户表的增删改查，而这些功能都是ResourceBase默认提供的能力\n可以看到我们此处定义了orm_meta和_primary_keys两个类属性，除此以外还有更多类属性可以帮助我们快速配置应用逻辑\n\n| 类属性                          | 默认值 | 描述                                                         |\n| ------------------------------- | ------ | ------------------------------------------------------------ |\n| orm_meta                        | None   | 资源操作的SQLAlchmey Model类[表]                             |\n| orm_pool                        | None   | 指定资源使用的数据库连接池，默认使用defaultPool，实例初始化参数优先于本参数 |\n| _dynamic_relationship           | None   | 是否根据Model中定义的attribute自动改变load策略，不指定则使用配置文件默认(True) |\n| _dynamic_load_method            | None   | 启用动态外键加载策略时，动态加载外键的方式，默认None，即使用全局配置（全局配置默认joinedload） <br/> joinedload 简便，在常用小型查询中响应优于subqueryload  <br/>subqueryload 在大型复杂(多层外键)查询中响应优于joinedload |\n| _detail_relationship_as_summary | None   | 资源get获取到的第一层级外键字段级别是summary级，则设置为True，否则使用配置文件默认(False) |\n| _primary_keys                   | 'id'   | 表对应的主键列，单个主键时，使用字符串，多个联合主键时为字符串列表，这个是业务主键，意味着你可以定义和数据库主键不一样的字段（前提是要确定这些字段是有唯一性的） |\n| _default_filter                 | {}     | 默认过滤查询，常用于软删除，比如数据删除我们在数据库字段中标记为is_deleted=True，那么我们再次list，get，update，delete的时候需要默认过滤这些数据的，等价于默认带有where is_delete = True |\n| _default_order                  | []     | 默认排序，查询资源时被应用，('name', '+id', '-status'), +表示递增，-表示递减，默认递增 |\n| _validate                       | []     | 数据输入校验规则，为talos.db.crud.ColumnValidator对象列表    |\n\n一个validate示例如下：\n\n```python\n   ColumnValidator(field='id',\n                   validate_on=['create:M']),\n   ColumnValidator(field='name',\n                   rule='1, 63',\n                   rule_type='length',\n                   validate_on=['create:M', 'update:O']),\n   ColumnValidator(field='enabled',\n                   rule=validator.InValidator(['true', 'false', 'True', 'False'])\n                   converter=converter.BooleanConverter(),\n                   validate_on=['create:M', 'update:O']),\n```\n\nColumnValidator可以定义的属性如下：\n\n| 属性         | 类型                                           | 描述                                                         |\n| ------------ | ---------------------------------------------- | ------------------------------------------------------------ |\n| field        | 字符串                                         | 字段名称                                                     |\n| rule         | validator对象 或 校验类型rule_type所需要的参数 | 当rule是validator类型对象时，忽略 rule_type参数              |\n| rule_type    | 字符串                                         | 用于快速定义校验规则，默认regex，可选类型有callback，regex，email，phone，url，length，in，notin，integer，float，type |\n| validate_on  | 数组                                           | 校验场景和必要性, eg. ['create: M', 'update:O']，表示此字段在create函数中为必要字段，update函数中为可选字段，也可以表示为['*:M']，表示任何情况下都是必要字段(**默认**) |\n| error_msg    | 字符串                                         | 错误提示信息，默认为'%(result)s'，即validator返回的报错信息，用户可以固定字符串或使用带有%(result)s的模板字符串 |\n| converter    | converter对象                                  | 数据转换器，当数据被校验后，可能需要转换为固定类型后才能进行编程处理，转换器可以为此提供自动转换，比如用户输入为'2018-01-01 01:01:01'字符串时间，程序需要为Datetime类型，则可以使用DateTimeConverter进行转换 |\n| orm_required | 布尔值                                         | 控制此字段是否会被传递到数据库SQL中去                        |\n| aliases      | 数组                                           | 字段的别名，比如接口升级后为保留前向兼容，老字段可以作为别名指向到新名称上 |\n| nullable     | 布尔值                                         | 控制此字段是否可以为None，**默认False**                      |\n\nCRUD使用方式:\n\n```python\nresource.User().create({'id': '1', 'name': 'test'})\nresource.User().list()\nresource.User().list({'name': 'test'})\nresource.User().list({'name': {'ilike': 'na'}}, offset=0, limit=5)\nresource.User().count()\nresource.User().count({'name': 'test'})\nresource.User().count({'name': {'ilike': 'na'}})\nresource.User().get('1')\nresource.User().update('1', {'name': 'test1'})\nresource.User().delete('1')\nresource.UserPhoneNum().get(('1', '10086'))\nresource.UserPhoneNum().delete(('1', '10086'))\n```\n\n内部查询通过组装dict来实现过滤条件，filter在表达 == 或 in 列表时，可以直接使用一级字段即可，如\nname等于test：{'name': 'test'}\nid在1,2,3,4内：{'id': ['1', '2', '3', '4']}\n\n更复杂的查询需要通过嵌套dict来实现[^ 5]：\n- 简单组合：{'字段名称': {'过滤条件1': '值', '过滤条件2': '值'}}\n\n- 简单\\$or+组合查询：{'\\$or': [{'字段名称': {'过滤条件': '值'}}, {'字段名称': {'过滤条件1': '值', '过滤条件2': '值'}}]}\n\n- 简单\\$and+组合查询：{'\\$and': [{'字段名称': {'过滤条件': '值'}}, {'字段名称': {'过滤条件1': '值', '过滤条件2': '值'}}]}\n\n- 复杂\\$and+\\$or+组合查询：\n  {'\\$and': [\n  ​               {'\\$or': [{'字段名称': '值'}, {'字段名称': {'过滤条件1': '值', '过滤条件2': '值'}}]}, \n  ​               {'字段名称': {'过滤条件1': '值', '过滤条件2': '值'}}\n  ]}\n\n- relationship复杂查询(>=v1.3.6)：\n\n  假定有User(用户)，Article(文章)，Comment(评论/留言)表，Article.owner引用User， Article.comments引用Comment，Comment.user引用User\n\n  查询A用户发表的文章中，存在B用户的评论，且评论内容包含”你好“\n\n  Article.list({'owner_id': 'user_a', 'comments': {'content': {'ilike': '你好', 'user': {'id': 'user_b'}}}})\n\n| 过滤条件 | 值类型          | 含义                                                           |\n| -------- | --------------- | -------------------------------------------------------------- |\n| like      | string         | 模糊查询，包含条件                                          |\n| ilike     | string         | 同上，不区分大小写                                             |\n| starts    | string         | 模糊查询，以xxxx开头                                           |\n| istarts   | string         | 同上，不区分大小写                                             |\n| ends      | string         | 模糊查询，以xxxx结尾                                           |\n| iends     | string         | 同上，不区分大小写                                             |\n| in        | list           | 精确查询，条件在列表中                                         |\n| nin       | list           | 精确查询，条件不在列表中                                       |\n| eq        | 根据字段类型   | 等于                                                           |\n| ne        | 根据字段类型   | 不等于                                                         |\n| lt        | 根据字段类型   | 小于                                                           |\n| lte       | 根据字段类型   | 小于等于                                                       |\n| gt        | 根据字段类型   | 大于                                                           |\n| gte       | 根据字段类型   | 大于等于                                                       |\n| nlike     | string         | 模糊查询，不包含                                               |\n| nilike    | string         | 同上，不区分大小写                                             |\n| null      | 任意           | 是NULL，等同于{'eq': None}，null主要提供HTTP API中使用                   |\n| nnull     | 任意           | 不是NULL，等同于{'ne': None}，nnull主要提供HTTP API中使用                  |\n| hasany       | string/list[string] | *JSONB专用*   包含任意key，如['a','b', 'c'] hasany ['a','d'] |\n| hasall       | string/list[string] | *JSONB专用*   包含所有key，如['a','b', 'c'] hasall ['a','c'] |\n| within       | list/dict | *JSONB专用*   被指定json包含在内                             |\n| nwithin      | list/dict | *JSONB专用*   不被指定json包含在内                           |\n| include      | list/dict | *JSONB专用*   包含指定的json                                 |\n| ninclude     | list/dict | *JSONB专用*   不包含指定的json                               |\n\n\n过滤条件可以根据不同的数据类型生成不同的查询语句，varchar类型的in是 IN ('1', '2') , inet类型的in是<<=cidr\n\n一般类型的eq是col='value'，bool类型的eq是col is TRUE，详见talos.db.filter_wrapper\n\n#### 业务api控制类\n\napi的模块为：cms.apps.user.api\n\nresource处理的是DB的CRUD操作，但往往业务类代码需要有复杂的处理逻辑，并且涉及多个resource类的相互操作，因此需要封装api层来处理此类逻辑，此处我们示例没有复杂逻辑，直接沿用定义即可\n\n```python\nUser = resource.User\nUserPhoneNum = resource.UserPhoneNum\n```\n\n#### Collection和Item Controller\n\nController模块为：cms.apps.user.controller\n\nController被设计分类为Collection和Item 2种，分别对应RESTFul的URL操作，我们先看一个常见的URL设计和操作\n\n```bash\nPOST   /v1/users    创建用户\nGET    /v1/users    查询用户列表\nPATCH  /v1/users/1  更新用户1的信息\nDELETE /v1/users/1  删除用户1的信息\nGET    /v1/users/1  获取用户1的详情\n```\n\n根据当前的URL规律我们可以吧创建和查询列表作为一个封装（CollectionController），而更新，删除，获取详情作为一个封装（ItemController），而同样的，对于这样的标准操作，talos同样提供了魔法般的定义\n\n```python\nclass CollectionUser(CollectionController):\n    name = 'cms.users'\n    resource = api.User\n\nclass ItemUser(ItemController):\n    name = 'cms.user'\n    resource = api.User\n```\n\n#### route路由映射\n\nroute模块为：cms.apps.user.route\n\n提供了Controller后，我们还需要将其与URL路由进行映射才能调用，route模块中，必须有add_routes函数，注册app的时候会默认寻找这个函数来注册路由\n\n```python\ndef add_routes(api):\n    api.add_route('/v1/users', controller.CollectionUser())\n    api.add_route('/v1/users/{rid}', controller.ItemUser())\n```\n\n#### 配置启动加载app\n\n我们在引导开始时创建的项目配置文件存放在./etc中，所以我们的配置文件在./etc/cms.conf，修改\n\n```javascript\n...\n\"application\": {\n        \"names\": [\n            \"cms.apps.user\"]\n},\n...\n```\n\n#### 启动调试或部署\n\n在源码目录中有server包，其中simple_server是用于开发调试用，不建议在生产中使用\n\npython simple_server.py\n\n#### 测试API\n\n启动后我们的服务已经可以对外输出啦！\n\n那么我们的API到底提供了什么样的能力呢？我们以user作为示例展示\n\n创建\n\n```\nPOST /v1/users\nContent-Type: application/json;charset=UTF-8\nHost: 127.0.0.1:9002\n\n{\n    \"id\": \"1\",\n    \"name\": \"test\"\n}\n```\n\n查询列表\n\n```\nGET /v1/users\nHost: 127.0.0.1:9002\n\n{\n    \"count\": 1,\n    \"data\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"test\"\n        }\n    ]\n}\n```\n\n关于查询列表，我们提供了强大的查询能力，可以满足大部分的查询场景\n\n获取**列表(查询)的接口**可以使用Query参数过滤，使用过滤字段=xxx 或 字段__查询条件=xxx方式传递\n\n- **过滤条件**\n\n     eg.\n\n     ```bash\n     # 查询name字段等于abc\n     name=abc\n     # 查询name字段包含abc\n     name__icontains=abc\n     # 查询name字段在列表[a, b, c]值内\n     name=a&name=b&name=c \n     # 或 \n     name__in=a&name__in=b&name__in=c\n     # 查询name字段在列表值内\n     name[0]=a&name[1]=b&name[2]=c \n     # 或 \n     name__in[0]=a&name__in[1]=b&name__in[2]=c\n     ```\n\n     同时支持全拼条件和缩写条件查询：\n\n\n| 全拼条件     | 缩写条件 | 含义                                                         |\n| ------------ | -------- | ------------------------------------------------------------ |\n| N/A          |          | 精确查询，完全等于条件，如果多个此条件出现，则认为条件在列表中 |\n| contains     | like     | 模糊查询，包含条件                                           |\n| icontains    | ilike    | 同上，不区分大小写                                           |\n| startswith   | starts   | 模糊查询，以xxxx开头                                         |\n| istartswith  | istarts  | 同上，不区分大小写                                           |\n| endswith     | ends     | 模糊查询，以xxxx结尾                                         |\n| iendswith    | iends    | 同上，不区分大小写                                           |\n| in           | in       | 精确查询，条件在列表中                                       |\n| notin        | nin      | 精确查询，条件不在列表中                                     |\n| equal        | eq       | 等于                                                         |\n| notequal     | ne       | 不等于                                                       |\n| less         | lt       | 小于                                                         |\n| lessequal    | lte      | 小于等于                                                     |\n| greater      | gt       | 大于                                                         |\n| greaterequal | gte      | 大于等于                                                     |\n| excludes     | nlike    | 模糊查询，不包含                                             |\n| iexcludes    | nilike   | 同上，不区分大小写                                           |\n| null         | null     | 是NULL                                                       |\n| notnull      | nnull    | 不是NULL                                                     |\n| hasany       | hasany   | *JSONB专用*   包含任意key，如['a','b', 'c'] hasany ['a','d'] |\n| hasall       | hasall   | *JSONB专用*   包含所有key，如['a','b', 'c'] hasall ['a','c'] |\n| within       | within   | *JSONB专用*   被指定json包含在内                             |\n| nwithin      | nwithin  | *JSONB专用*   不被指定json包含在内                           |\n| include      | include  | *JSONB专用*   包含指定的json                                 |\n| ninclude     | ninclude | *JSONB专用*   不包含指定的json                               |\n\n\n\n字段支持：普通column字段、relationship字段(single or list)、JSONB[^ 4]\n\n假设有API对应如下表字段\n\n```python\nclass User(Base, DictBase):\n    __tablename__ = 'user'\n\n    id = Column(String(36), primary_key=True)\n    name = Column(String(36), nullable=False)\n    department_id = Column(ForeignKey(u'department.id'), nullable=False)\n    items = Column(JSONB, nullable=False)\n\n    department = relationship(u'Department', lazy=False)\n    addresses = relationship(u'Address', lazy=False, back_populates=u'user', uselist=True, viewonly=True)\n\nclass Address(Base, DictBase):\n    __tablename__ = 'address'\n\n    id = Column(String(36), primary_key=True)\n    location = Column(String(36), nullable=False)\n    user_id = Column(ForeignKey(u'user.id'), nullable=False)\n    items = Column(JSONB, nullable=False)\n\n    user = relationship(u'User', lazy=True)\n\nclass Department(Base, DictBase):\n    __tablename__ = 'department'\n\n    id = Column(String(36), primary_key=True)\n    name = Column(String(36), nullable=False)\n    user_id = Column(ForeignKey(u'user.id'), nullable=False)\n```\n\n可以这样构造过滤条件\n\n/v1/users?name=小明\n\n/v1/users?department.name=业务部\n\n/v1/users?addresses.location__icontains=广东省\n\n/v1/users?addresses.items.key__icontains=temp\n\n/v1/users?items.0.age=60 # items = [{\"age\": 60, \"sex\": \"male\"}, {...}]\n\n/v1/users?items.age=60 # items = {\"age\": 60, \"sex\": \"male\"}\n\n> v1.2.0  起不支持的column或condition会触发ResourceBase._unsupported_filter(query, idx, name, op, value)函数，函数默认返回参数query以忽略未支持的过滤(兼容以前版本行为)，用户可以自行重载函数以实现自定义行为\n>\n> v1.2.2  unsupported_filter会默认构造一个空查询集，即不支持的column或condition会致使返回空结果\n\n\n\n\n- **偏移量与数量限制**\n\n     查询返回列表时，通常需要指定偏移量以及数量限制\n\n     eg. \n\n     ```bash\n     __offset=10&__limit=20\n     ```\n\n     代表取偏移量10，限制20条结果\n\n- **排序**\n\n     排序对某些场景非常重要，可以免去客户端很多工作量\n\n     ```bash\n     __orders=name,-env_code\n     ```\n\n     多个字段排序以英文逗号间隔，默认递增，若字段前面有-减号则代表递减\n\n     ```\n       PS：我可以使用+name代表递增吗？\n\n       可以，但是HTTP URL中+号实际上的空格的编码，如果传递__orders=+name,-env_code，在HTTP中实际等价于__orders=空格name,-env_code, 无符号默认递增，因此无需多传递一个+号，传递字段即可\n     ```\n\n- **字段选择**\n\n     接口返回中，如果字段信息太多，会导致传输缓慢，并且需要客户端占用大量内存处理\n\n     ```bash\n     __fields=name,env_code\n     ```\n\n     可以指定返回需要的字段信息，或者干脆不指定，获取所有服务器支持的字段\n\n\n### 进阶开发\n\n#### 用户输入校验\n\n用户输入的数据，不一定是完全正确的，每个数据都需要校验后才能进行存储和处理，在上面已经提到过使用ColumnValidator来进行数据校验，这里主要是解释详细的校验规则和行为\n\n1. ColumnValidator被默认集成在ResourceBase中，所以会自动进行校验判断\n\n2. 未定义_validate时，将不启用校验，信任所有输入数据\n\n3. 未定义的字段在清洗阶段会被忽略\n\n4. 校验的关键函数为ResourceBase.validate\n\n   ```python\n   @classmethod\n   def validate(cls, data, situation, orm_required=False, validate=True, rule=None):\n       \"\"\"\n       验证字段，并返回清洗后的数据\n\n       * 当validate=False，不会对数据进行校验，仅返回ORM需要数据\n       * 当validate=True，对数据进行校验，并根据orm_required返回全部/ORM数据\n\n       :param data: 清洗前的数据\n       :type data: dict\n       :param situation: 当前场景\n       :type situation: string\n       :param orm_required: 是否ORM需要的数据(ORM即Model表定义的字段)\n       :type orm_required: bool\n       :param validate: 是否验证规则\n       :type validate: bool\n       :param rule: 规则配置\n       :type rule: dict\n       :returns: 返回清洗后的数据\n       :rtype: dict\n       \"\"\"\n   ```\n\n   *validate_on为什么是填写：create:M或者update:M，因为validate按照函数名进行场景判定，在ResourceBase.create函数中，默认将situation绑定在当前函数，即 'create'，update同理，而M代表必选，O代表可选*\n\n5. 当前快速校验规则rule_type不能满足时，请使用Validator对象，内置Validator对象不能满足需求时，可以定制自己的Validator，Validator的定义需要满足2点：\n\n   从NullValidator中继承\n\n   重写validate函数，函数接受一个参数，并且返回True作为通过校验，返回错误字符串代表校验失败\n\n6. Converter同上\n\n#### 多数据库支持 [^ 7]\n\n默认情况下，项目只会生成一个数据库连接池：对应配置项CONF.db.xxxx，若需要多个数据库连接池，则需要手动指定配置文件\n\n```\n\"dbs\": {\n    \"read_only\": {\n        \"connection\": \"sqlite:///tests/a.sqlite3\"\n    },\n    \"other_cluster\": {\n        \"connection\": \"sqlite:///tests/b.sqlite3\"\n    }\n},\n```\n\n使用方式也简单，如下，生效优先级为：实例化参数 > 类属性orm_pool > defaultPool\n\n```python\n# 1. 在类属性中指定 \nclass Users(ResourceBase):\n    orm_meta = models.Users\n    orm_pool = pool.POOLS.read_only\n\n# 2. 实例化时指定\nUsers(dbpool=pool.POOLS.readonly)\n\n# 3. 若都不指定，默认使用defaultPool，即CONF.db配置的连接池\n```\n\n\n\n\n#### DB Hook操作\n\n##### 简单hooks\n\n在db创建一个记录时，假设希望id是自动生成的UUID，通常这意味着我们不得不重写create函数：\n\n```python\nclass User(ResourceBase):\n    orm_meta = models.User\n    _primary_keys = 'id'\n\n    def create(self, resource, validate=True, detail=True):\n        resource['id'] = uuid.uuid4().hex\n        super(User, self).create(resource, validate=validate, detail=validate)\n```\n\n这样的操作对于我们而言是很笨重的，甚至create的实现比较复杂，让我们不希望到create里面去加这些不是那么关键的代码，对于这些操作，talos分成了2种场景，_before_create, _addtional_create，根据名称我们能知道，它们分别代表\n\ncreate执行开始前：常用于一些数据的自动填充\n\ncreate执行后但未提交：常用于强事务控制的操作，可以使用同一个事务进行操作以便一起提交或回滚\n\n同理还有update，delete\n\n同样的list和count都有_addtional_xxxx钩子\n\n##### 动态hooks\n\n以上的hooks都是类成员函数代码定义的，当使用者想要临时增加一个hook的时候呢，或者根据某个条件判断是否使用一个hook时，我们需要一种更动态的hook来支持，目前只有list和count支持此类hooks\n\nlist,count的hook的函数定义为：function(query, filters)，需要return 处理后的query\n\neg. self.list(hooks=[lambda q,f: return q])\n\n##### 自定义query\n\n在更复杂的场景下我们封装的操作函数可能无法达到目的，此时可以使用底层的SQLAlchemy Query对象来进行处理，比如在PG中INET类型的比较操作：\n\n一个场景：我们不希望用户新增的子网信息与现有子网重叠\n\n```python\nquery = self._get_query(session)\nquery = query.filter(self.orm_meta.cidr.op(\">>\")(\n    subnet['cidr']) | self.orm_meta.cidr.op(\"<<\")(subnet['cidr']))\nif query.one_or_none():\n    raise ConflictError()\n```\n\n#### 会话重用和事务控制\n\n在talos中，每个ResourceBase对象都可以申请会话和事务，而且可以接受一个已有的会话和事务对象，在使用完毕后talos会自动帮助你进行回滚/提交/关闭，这得益与python的with子句\n\n```python\nu = User()\nwith u.transaction() as session:\n    u.update(...)\n    # 事务重用, 可以查询和变更操作, with子句结束会自动提交，异常会自动回滚\n    UserPhone(transaction=session).delete(...)\n    UserPhone(transaction=session).list(...)\nwith u.get_session() as session:\n    # 会话重用, 可以查询\n    UserPhone(session=session).list(...)\n```\n\n#### 缓存\n\n##### 配置和使用\n\n默认配置为进程内存，超时60秒\n\n```python\n'cache': {\n        'type': 'dogpile.cache.memory',\n        'expiration_time': 60\n}\n```\n\n缓存后端支持取决于dogpile模块，可以支持常见的memcache，redis等\n\n如：redis\n\n```python\n\"cache\": {\n        \"type\": \"dogpile.cache.redis\",\n        \"expiration_time\": 6,\n        \"arguments\": {\n            \"host\": \"127.0.0.1\",\n            \"password\": \"football\",\n            \"port\": 1234,\n            \"db\": 0,\n            \"redis_expiration_time\": 60,\n            \"distributed_lock\": true\n        }\n    }\n```\n\n使用方式\n\n```python\nfrom talos.common import cache\n\ncache.get(key, exipres=None)\ncache.set(key, value)\ncache.validate(value)\ncache.get_or_create(key, creator, expires=None)\ncache.delete(key)\n```\n\n\n\n#### 异步任务\n\n##### 定义异步任务\n\n> talos >=1.3.0 send_callback函数，移除了timeout，增加了request_context，为requests请求参数的options的字典，eg.{'timeout': 3}\n\n> talos >=1.3.0 回调函数参数，移除了request和response的强制参数定义，保留data和url模板强制参数，如果callback(with_request=True)，则回调函数需定义如下，with_response同理\n>\n> @callback('/add/{x}/{y}', with_request=True):\n>\n> def add(data, x, y, request):\n>\n> ​    pass\n\n> talos >=1.3.0 被callback装饰的回调函数，均支持本地调用/快速远程调用/send_callback调用\n>\n> talos <1.3.0支持本地调用/send_callback调用\n>\n>     本地调用：\n>     add(data, x, y)，可以作为普通本地函数调用(注：客户端运行）\n>        \n>     send_callback远程调用方式(x,y参数必须用kwargs形式传参)：\n>     send_callback(None, add, data, x=1, y=7)\n>        \n>     快速远程调用：\n>     支持设置context，baseurl进行调用，context为requests库的额外参数，比如headers，timeout，verify等，baseurl默认为配置项的public_endpoint(x,y参数必须用kwargs形式传参)\n>        \n>     test.remote({'val': '123'}, x=1, y=7)\n>     test.context(timeout=10, params={'search': 'me'}).remote({'val': '123'}, x=1, y=7)\n>     test.context(timeout=10).baseurl('http://clusterip.of.app.com').remote({'val': '123'}, x=1, y=7)\n\n建立workers.app_name.tasks.py用于编写远程任务\n建立workers.app_name.callback.py用于编写远程调用\ntask.py任务示例\n\n```python\nfrom talos.common import celery\nfrom talos.common import async_helper\nfrom cms.workers.app_name import callback\n@celery.app.task\ndef add(data, task_id):\n    result = {'result': data['x'] + data['y']}\n\n    # 这里还可以通知其他附加任务,当需要本次的一些计算结果来启动二次任务时使用\n    # 接受参数：task调用函数路径 & 函数命名参数(dict)\n    # async_helper.send_task('cms.workers.app_name.tasks.other_task', kwargs={'result': result, 'task_id': task_id})\n\n   # 异步任务中默认不启用数据库连接，因此需要使用远程调用callback方式进行数据读取和回写\n   # 如果想要使用db功能，需要修改cms.server.celery_worker文件的代码,移除 # base.initialize_db()的注释符号\n\n   # send callback的参数必须与callback函数参数匹配(request，response除外)\n   # url_base为callback实际运行的服务端api地址，eg: http://127.0.0.1:9000\n   # update_task函数接受data和task_id参数，其中task_id必须为kwargs形式传参\n   # async_helper.send_callback(url_base, callback.update_task,\n   #                             data,\n   #                            task_id=task_id)\n   # remote_result 对应数据为update_task返回的 res_after\n   remote_result = callback.update_task.remote(result, task_id=task_id)\n   # 此处是异步回调结果，不需要服务器等待或者轮询，worker会主动发送进度或者结果，可以不return\n   # 如果想要使用return方式，则按照正常celery流程编写代码\n   return result\n```\n\ncallback.py回调示例 (callback不应理解为异步任务的回调函数，泛指talos的通用rpc远程调用，只是目前框架内主要使用方是异步任务)\n```python\nfrom talos.common import async_helper\n# data是强制参数，task_id为url强制参数(如果url没有参数，则函数也无需task_id)\n# task_id为url强制参数，默认类型是字符串(比如/callback/add/{x}/{y}，函数内直接执行x+y结果会是字符串拼接，因为由于此参数从url中提取，所以默认类型为str，需要特别注意)\n@async_helper.callback('/callback/add/{task_id}')\ndef update_task(data, task_id):\n    # 远程调用真正执行方在api server服务，因此默认可以使用数据库操作\n    res_before,res_after = task_db_api().update(task_id, data)\n    # 函数可返回可json化的数据，并返回到调用客户端去\n    return res_after\n```\n\nroute中注册回调函数，否则无法找到此远程调用\n```python\nfrom talos.common import async_helper\nfrom project_name.workers.app_name import callback\n\ndef add_route(api):\n    async_helper.add_callback_route(api, callback.callback_add)\n```\n\n启动worker\n  celery -A cms.server.celery_worker worker --autoscale=50,4 --loglevel=DEBUG -Q your_queue_name\n\n调用\n  add.delay('id', 1, 1)\n  会有任务发送到worker中，然后woker会启动一个other_task任务，并回调url将结果发送会服务端\n\n  (如果API模块有统一权限校验，请注意放行）\n\n\n\n##### 异步任务配置\n\n依赖：\n​    库：\n​        celery\n\n​    配置：\n\n```\n{\n        ...\n        \"celery\": {\n            \"worker_concurrency\": 8,\n            \"broker_url\": \"pyamqp://guest@127.0.0.1//\",\n            \"result_backend\": \"redis://127.0.0.1\",\n            \"imports\": [\n                \"project_name.workers.app_name.tasks\"\n            ],\n            \"task_serializer\": \"json\",\n            \"result_serializer\": \"json\",\n            \"accept_content\": [\"json\"],\n            \"worker_prefetch_multiplier\": 1,\n            \"task_routes\": {\n                \"project_name.workers.*\": {\"queue\": \"your_queue_name\",\n                                        \"exchange\": \"your_exchange_name\",\n                                        \"routing_key\": \"your_routing_name\"}\n            }\n        },\n        \"worker\": {\n            \"callback\": {\n                \"strict_client\": true,\n                \"allow_hosts\": [\"127.0.0.1\"]\n            }\n        }\n}\n```\n\n\n\n\n\n#### 定时任务[^ 2]\n\ntalos中你可以使用原生celery的定时任务机制，也可以使用talos中提供的扩展定时任务(TScheduler)，扩展的定时任务可以在5s(可通过beat_max_loop_interval来修改这个时间)内发现定时任务的变化并刷新调度，从而提供动态的定时任务，而定时任务的来源可以从配置文件，也可以通过自定义的函数中动态提供\n\n> 原生celery的scheduler是不支持动态定时任务的\n\n> 使用原生celery定时任务因为talos配置项为json数据而无法提供复杂类型的schedule，当然也可以使用add_periodic_task来解决，但会降低我们使用的便利性\n>\n> 这些问题在talos扩展定时任务中得以解决\n\n##### 静态配置定时任务：\n\n使用最原始的celery定时任务配置，最快捷的定时任务例子[^ 3]：\n\n```json\n    \"celery\": {\n        \"worker_concurrency\": 8,\n        \"broker_url\": \"pyamqp://test:test@127.0.0.1//\",\n        ...\n        \"beat_schedule\": {\n            \"test_every_5s\": {\n                \"task\": \"cms.workers.periodic.tasks.test_add\",\n                \"schedule\": 5,\n                \"args\": [3,6] \n            }\n        }\n```\n\n启动beat： celery -A cms.server.celery_worker beat --loglevel=DEBUG\n\n启动worker：celery -A cms.server.celery_worker worker --loglevel=DEBUG -Q cms-dev-queue\n\n可以看到每5s，beat会发送一个任务，worker会接收此任务进行处理，从而形成定时任务\n\n使用过原生celery的人可能看出这里存在的问题：crontab是对象，json配置是无法传递，只能配置简单的间隔任务，确实，缺省情况下由于配置文件格式的原因无法提供更高级的定时任务配置，所以talos提供了自定义的Scheduler：TScheduler，这个调度器可以从配置文件中解析interval、crontab类型的定时任务，从而覆盖更广泛的需求，而使用也非常简单：\n\n```json\n\"celery\": {\n    \"worker_concurrency\": 8,\n    \"broker_url\": \"pyamqp://test:test@127.0.0.1//\",\n    ...\n    \"beat_schedule\": {\n        \"test_every_5s\": {\n            \"task\": \"cms.workers.periodic.tasks.test_add\",\n            \"schedule\": 5,\n            \"args\": [3,6] \n        },\n        \"test_every_123s\": {\n            \"type\": \"interval\",\n            \"task\": \"cms.workers.periodic.tasks.test_add\",\n            \"schedule\": \"12.3\",\n            \"args\": [3,6] \n        },\n        \"test_crontab_simple\": {\n            \"type\": \"crontab\",\n            \"task\": \"cms.workers.periodic.tasks.test_add\",\n            \"schedule\": \"*/1\",\n            \"args\": [3,6] \n        },\n        \"test_crontab\": {\n            \"type\": \"crontab\",\n            \"task\": \"cms.workers.periodic.tasks.test_add\",\n            \"schedule\": \"1,13,30-45,50-59/2 *1 * * *\",\n            \"args\": [3,6] \n        }\n    }\n```\n依然是在配置文件中定义，多了一个type参数，用于帮助调度器解析定时任务，此外还需要指定使用talos的TScheduler调度器，比如配置中指定:\n\n```\n\"celery\": {\n    \"worker_concurrency\": 8,\n    \"broker_url\": \"pyamqp://test:test@127.0.0.1//\",\n    ...\n    \"beat_schedule\": {...}\n    \"beat_scheduler\": \"talos.common.scheduler:TScheduler\"\n```\n\n或者命令行启动时指定：\n\n启动beat： celery -A cms.server.celery_worker beat --loglevel=DEBUG -S talos.common.scheduler:TScheduler \n\n启动worker：celery -A cms.server.celery_worker worker --loglevel=DEBUG -Q cms-dev-queue\n\n除了type，TScheduler的任务还提供了很多其他的扩展属性，以下是属性以及其描述\n\n```\nname:           string, 唯一名称\ntask:           string, 任务模块函数\n[description]:  string, 备注信息\n[type]:         string, interval 或 crontab, 默认 interval\nschedule:       string/int/float/schedule eg. 1.0,'5.1', '10 *' , '*/10 * * * *' \nargs:           tuple/list, 参数\nkwargs:         dict, 命名参数\n[priority]:     int, 优先级, 默认5\n[expires]:      int, 单位为秒，当任务产生后，多久还没被执行会认为超时\n[enabled]:      bool, True/False, 默认True\n[max_calls]:    None/int, 最大调度次数, 默认None无限制\n[last_updated]: Datetime, 任务最后更新时间，常用于判断是否有定时任务需要更新\n```\n\n\n\n##### 动态配置定时任务：\n\nTScheduler的动态任务仅限用户自定义的所有schedules\n所有定时任务 = 配置文件任务 + add_periodic_task任务 + hooks任务，hooks任务可以通过相同name来覆盖已存在配置中的任务，否则相互独立\n\n- 使用TScheduler预留的hooks进行动态定时任务配置(推荐方式)：\n\n  TScheduler中预留了2个hooks：talos_on_user_schedules_changed/talos_on_user_schedules\n\n  **talos_on_user_schedules_changed**钩子用于判断是否需要更新定时器，钩子被执行的最小间隔是beat_max_loop_interval(如不设置默认为5s)\n\n  钩子定义为callable(scheduler)，返回值是True/False\n\n  **talos_on_user_schedules**钩子用于提供新的定时器字典数据\n\n  钩子定义为callable(scheduler)，返回值是字典，全量的自定义动态定时器\n\n  我们来尝试提供一个，每过13秒自动生成一个全新定时器的代码\n\n  以下是cms.workers.periodic.hooks.py的文件内容\n\n  ```python\n  import datetime\n  from datetime import timedelta\n  import random\n\n  # talos_on_user_schedules_changed, 用于判断是否需要更新定时器\n  # 默认每5s调用一次\n  class ChangeDetection(object):\n      '''\n      等价于函数，只是此处我们需要保留_last_modify属性所以用类来定义callable\n      def ChangeDetection(scheduler):\n          ...do something...\n      '''\n      def __init__(self, scheduler):\n          self._last_modify = self.now()\n      def now(self):\n          return datetime.datetime.now()\n      def __call__(self, scheduler):\n          now = self.now()\n          # 每过13秒定义定时器有更新\n          if now - self._last_modify >= timedelta(seconds=13):\n              self._last_modify = now\n              return True\n          return False\n\n  # talos_on_user_schedules, 用于提供新的定时器字典数据\n  # 在talos_on_user_schedules_changed hooks返回True后被调用\n  class Schedules(object):\n      '''\n      等价于函数\n      def Schedules(scheduler):\n          ...do something...\n      '''\n      def __init__(self, scheduler):\n          pass\n      def __call__(self, scheduler):\n          interval = random.randint(1,10)\n          name = 'dynamic_every_%s s' % interval\n          # 生成一个纯随机的定时任务\n          return {name: {'task': 'cms.workers.periodic.tasks.test_add', 'schedule': interval, 'args': (1,3)}}\n  ```\n\n  配置文件如下：\n\n  ```json\n      \"celery\": {\n          ...\n          \"beat_schedule\": {\n              \"every_5s_max_call_2_times\": {\n                  \"task\": \"cms.workers.periodic.tasks.test_add\",\n                  \"schedule\": \"5\",\n                  \"max_calls\": 2,\n                  \"enabled\": true,\n                  \"args\": [1, 3]\n              }\n          },\n          \"talos_on_user_schedules_changed\":[\n              \"cms.workers.periodic.hooks:ChangeDetection\"],\n          \"talos_on_user_schedules\": [\n              \"cms.workers.periodic.hooks:Schedules\"]\n      },\n  ```\n\n  得到的结果是，一个每5s，最多调度2次的定时任务；一个每>=13s自动生成的随机定时任务\n\n- 使用官方的setup_periodic_tasks进行动态配置\n\n  见celery文档\n\n  截止2018.11.13 celery 4.2.0在定时任务中依然存在问题，使用官方建议的on_after_configure动态配置定时器时，定时任务不会被触发：[GitHub Issue 3589](https://github.com/celery/celery/issues/3589)\n\n  ```\n  @celery.app.on_after_configure.connect\n  def setup_periodic_tasks(sender, **kwargs):\n      sender.add_periodic_task(3.0, test.s('add every 3s by add_periodic_task'), name='add every 3s by add_periodic_task')\n\n  @celery.app.task\n  def test(arg):\n      print(arg)\n  ```\n\n而测试以下代码有效，可以使用以下方法：\n\n```\n@celery.app.on_after_finalize.connect\ndef setup_periodic_tasks(sender, **kwargs):\n    sender.add_periodic_task(3.0, test.s('add every 3s by add_periodic_task'), name='add every 3s by add_periodic_task')\n\n@celery.app.task\ndef test(arg):\n    print(arg)\n```\n\n#### 频率限制\n\n##### controller & 中间件 频率限制\n\n主要用于http接口频率限制\n\n    基本使用步骤：\n\n    - 在controller上配置装饰器\n    - 将Limiter配置到启动中间件\n\n    装饰器通过管理映射关系表LIMITEDS，LIMITEDS_EXEMPT来定位用户设置的类实例->频率限制器关系，\n    频率限制器是实例级别的，意味着每个实例都使用自己的频率限制器\n\n    频率限制器有7个主要参数：频率设置，关键限制参数，限制范围，是否对独立方法进行不同限制, 算法，错误提示信息, hit函数\n\n    :param limit_value: 频率设置：格式[count] [per|/] [n (optional)][second|minute|hour|day|month|year]\n    :param key_function: 关键限制参数：默认为IP地址(支持X-Forwarded-For)，自定义函数：def key_func(req) -> string\n    :param scope: 限制范围空间：默认python类完整路径，自定义函数def scope_func(request) -> string\n    :param per_method: 指定是否根据每个HTTP方法区分频率限制，默认True\n    :param strategy: 算法：支持fixed-window、fixed-window-elastic-expiry、moving-window\n    :param message: 错误提示信息：错误提示信息可接受3个格式化（limit，remaining，reset）内容\n    :param hit_func: 函数定义为def hit(controller, request) -> bool，为True时则触发频率限制器hit，否则忽略\n\n> PS：真正的频率限制范围 = 关键限制参数(默认IP地址) + 限制范围(默认python类完整路径) + 方法名(如果区分独立方法)，当此频率范围被命中后才会触发频率限制\n\n\n\n\n\n###### 静态频率限制(配置/代码)\n\n**controller级的频率限制**\n\n```python\n# coding=utf-8\n\nimport falcon\nfrom talos.common import decorators as deco\nfrom talos.common import limitwrapper\n\n# 快速自定义一个简单支持GET、POST请求的Controller\n# add_route('/things', ThingsController())\n\n@deco.limit('1/second')\nclass ThingsController(object):\n    def on_get(self, req, resp):\n        \"\"\"Handles GET requests, using 1/second limit\"\"\"\n        resp.body = ('It works!')\n    def on_post(self, req, resp):\n        \"\"\"Handles POST requests, using global limit(if any)\"\"\"\n        resp.body = ('It works!')\n```\n\n###### 全局级的频率限制\n\n```json\n{\n    \"rate_limit\": {\n        \"enabled\": true,\n        \"storage_url\": \"memory://\",\n        \"strategy\": \"fixed-window\",\n        \"global_limits\": \"5/second\",\n        \"per_method\": true,\n        \"header_reset\": \"X-RateLimit-Reset\",\n        \"header_remaining\": \"X-RateLimit-Remaining\",\n        \"header_limit\": \"X-RateLimit-Limit\"\n    }\n}\n```\n\n###### 基于中间件动态频率限制\n\n以上的频率限制都是预定义的，无法根据具体参数进行动态的更改，而通过重写中间件的get_extra_limits函数，我们可以获得动态追加频率限制的能力\n\n```python\nclass MyLimiter(limiter.Limiter):\n    def __init__(self, *args, **kwargs):\n        super(MyLimiter, self).__init__(*args, **kwargs)\n        self.mylimits = {'cms.apps.test1': [wrapper.LimitWrapper('2/second')]}\n    def get_extra_limits(self, request, resource, params):\n        if request.method.lower() == 'post':\n            return self.mylimits['cms.apps.test1']\n\n```\n\n频率限制默认被加载在了系统的中间件中，如果不希望重复定义中间件，可以在cms.server.wsgi_server中修改项目源代码：\n\n```python\napplication = base.initialize_server('cms',\n                                     ...\n                                     middlewares=[\n                                         globalvars.GlobalVars(),\n                                         MyLimiter(),\n                                         json_translator.JSONTranslator()],\n                                     override_middlewares=True)\n```\n\n##### 函数级频率限制\n\n```python\nfrom talos.common import decorators as deco\n\n@deco.flimit('1/second')\ndef test():\n    pass\n```\n\n\n\n    用于装饰一个函数表示其受限于此调用频率\n    当装饰类成员函数时，频率限制范围是类级别的，意味着类的不同实例共享相同的频率限制，\n    如果需要实例级隔离的频率限制，需要手动指定key_func，并使用返回实例标识作为限制参数\n\n    :param limit_value: 频率设置：格式[count] [per|/] [n (optional)][second|minute|hour|day|month|year]\n    :param scope: 限制范围空间：默认python类/函数完整路径 or 自定义字符串.\n    :param key_func: 关键限制参数：默认为空字符串，自定义函数：def key_func(*args, **kwargs) -> string\n    :param strategy: 算法：支持fixed-window、fixed-window-elastic-expiry、moving-window\n    :param message: 错误提示信息：错误提示信息可接受3个格式化（limit，remaining，reset）内容\n    :param storage: 频率限制后端存储数据，如: memory://, redis://:pass@localhost:6379\n    :param hit_func: 函数定义为def hit(result) -> bool（参数为用户函数执行结果，若delay_hit=False，则参数为None），为True时则触发频率限制器hit，否则忽略\n    :param delay_hit: 默认在函数执行前测试频率hit(False)，可以设置为True将频率测试hit放置在函数执行后，搭配hit_func\n                       使用，可以获取到函数执行结果来控制是否执行hit\n关于函数频率限制模块更多用例，请见单元测试tests.test_limit_func\n\n#### 数据库版本管理\n\n修改models.py为最终目标表模型，运行命令：\n\nalembic revision --autogenerate -m \"add table: xxxxx\"\n\n备注不支持中文, autogenerate用于生成upgrade，downgrade函数内容，生成后需检查升级降级函数是否正确\n\n升级：alembic upgrade head\n\n降级：alembic downgrade base\n\nhead指最新版本，base指最原始版本即models第一个version，更多升级降级方式如下：\n\n- alembic upgrade +2 升级2个版本\n\n- alembic downgrade -1 回退一个版本\n\n- alembic upgrade ae10+2 升级到ae1027a6acf+2个版本\n\n```python\n# alembic 脚本内手动执行sql语句\nop.execute('raw sql ...')\n```\n\n\n\n\n#### 单元测试\n\ntalos生成的项目预置了一些依赖要求，可以更便捷的使用pytest进行单元测试，如需了解更详细的单元测试编写指导，请查看pytest文档\n\n> python setup.py test\n\n可以简单从命令行输出中查看结果，或者从unit_test_report.html查看单元测试报告，从htmlcov/index.html中查看覆盖测试报告结果\n\n示例可以从talos源码的tests文件夹中查看\n\n```bash\n$ tree tests\ntests\n├── __init__.py\n├── models.py\n├── test_db_filters.py\n├── unittest.conf\n├── unittest.sqlite3\n└── ...\n\n```\n\n单元测试文件以test_xxxxxx.py作为命名\n\n## Sphinx注释文档\n\nSphinx的注释格式这里不再赘述，可以参考网上文档教程，talos内部使用的注释文档格式如下：\n\n```\n    \"\"\"\n    函数注释文档\n\n    :param value: 参数描述\n    :type value: 参数类型\n    :returns: 返回值描述\n    :rtype: `bytes`/`str` 返回值类型\n    \"\"\"\n```\n\n\n\n- 安装sphinx\n\n- 在工程目录下运行：\n\n  sphinx-quickstart docs\n\n  - root path for the documentation [.]: docs\n  - Project name: cms\n  - Author name(s): Roy\n  - Project version []: 1.0.0\n  - Project language [en]: zh_cn\n  - autodoc: automatically insert docstrings from modules (y/n) [n]: y\n\n- 可选的风格主题，推荐sphinx_rtd_theme，需要pip install sphinx_rtd_theme\n\n- 修改docs/conf.py\n\n  ```python\n  # import os\n  # import sys\n  # sys.path.insert(0, os.path.abspath('.'))\n  import os\n  import sys\n  sys.path.insert(0, os.path.abspath('..'))\n\n  import sphinx_rtd_theme\n  html_theme = \"sphinx_rtd_theme\"\n  html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n  ```\n\n- 生成apidoc sphinx-apidoc -o docs/ ./cms\n\n- 生成html：\n\n  - cd docs\n  - make.bat html\n  - 打开docs/_build/html/index.html\n\n## 国际化i18n\n\n同样以cms项目作为例子\n\n### 提取待翻译\n\n```bash\n# 需要翻译项目的语言\nfind /usr/lib/python2.7/site-packages/cms/ -name \"*.py\" >POTFILES.in\n# 需要翻译talos的语言\nfind /usr/lib/python2.7/site-packages/talos/ -name \"*.py\" >>POTFILES.in\n# 提取为cms.po\nxgettext --default-domain=cms --add-comments --keyword=_ --keyword=N_ --files-from=POTFILES.in --from-code=UTF8\n```\n\n\n\n### 合并已翻译\n\n```bash\nmsgmerge cms-old.po cms.po -o cms.po\n```\n\n\n\n### 翻译\n\n可以使用如Poedit的工具帮助翻译\n\n(略)\n\n### 编译发布\n\nWindows：使用Poedit工具，则点击保存即可生成cms.mo文件\n\nLinux：msgfmt --output-file=cms.mo cms.po\n\n将mo文件发布到\n\n/etc/{\\$your_project}/locale/{\\$lang}/LC_MESSAGES/\n\n{\\$lang}即配置项中的language\n\n\n\n## 日志配置\n\n### 配置指引\n\n全局日志配置为log对象，默认使用WatchedFileHandler进行日志处理，而文件则使用path配置，如果希望全局日志中使用自定义的Handler，则path参数是可选的\n\n全局日志通常可以解决大部分场景，但有时候，我们希望不同模块日志输出到不同文件中，可以使用：loggers，子日志配置器，其参数可完全参考log全局日志参数（除gunicorn_access，gunicorn_error），通过name指定捕获模块，并可以设置propagate拦截不传递到全局日志中\n\n不论全局或子级日志配置，都可以指定使用其他handler，并搭配handler_args自定义日志使用方式，指定的方式为：package.module:ClassName，默认时我们使用WatchedFileHandler，因为日志通常需要rotate，我们希望日志模块可以被无缝切割轮转而不影响应用，所以这也是我们没有将内置Handler指定为RotatingFileHandler的原因，用户需要自己使用操作系统提供的logrotate能力进行配置。\n\n以下是一个常用的日志配置，全局日志记录到server.log，而模块cms.apps.filetransfer日志则单独记录到transfer.log文件，相互不影响\n\n```json\n\"log\": {\n    \"gunicorn_access\": \"./access.log\",\n    \"gunicorn_error\": \"./error.log\",\n    \"path\": \"./server.log\",\n    \"level\": \"INFO\",\n    \"format_string\": \"%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s:%(lineno)d [-] %(message)s\",\n    \"date_format_string\": \"%Y-%m-%d %H:%M:%S\",\n    \"loggers\": [\n        {\n            \"name\": \"cms.apps.filetransfer\",\n         \t\"level\": \"INFO\",\n         \t\"path\": \"./transfer.log\",\n            \"propagate\": false\n        }\n    ]\n}\n```\n\n\n\n其详细参数说明如下：\n\n| 路径               | 类型   | 描述                                                         | 默认值                                                       |\n| ------------------ | ------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| gunicorn_access    | string | 使用gunicorn时，access日志路径                               | ./access.log                                                 |\n| gunicorn_error     | string | 使用gunicorn时，error日志路径                                | ./error.log                                                  |\n| log_console        | bool   | 是否将本日志重定向到标准输出                                 | True                                                         |\n| path               | string | 日志路径，默认使用WatchedFileHandler，当指定handler时此项无效 | ./server.log                                                 |\n| level              | string | 日志级别(ERROR，WARNING，INFO，DEBUG)                        | INFO                                                         |\n| handler            | string | 自定义的Logger类，eg: logging.handlers:SysLogHandler，定义此项后会优先使用并忽略默认的log.path参数，需要使用handler_args进行日志初始化参数定义 |                                                              |\n| handler_args       | list   | 自定义的Logger类的初始化参数，eg: []                         | []                                                           |\n| format_string      | string | 日志字段配置                                                 | %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s:%(lineno)d [-] %(message)s |\n| date_format_string | string | 日志时间格式                                                 | %Y-%m-%d %H:%M:%S                                            |\n| name               | string | 全局log中无此参数，仅用于loggers子日志配置器上，表示捕获的日志模块路径 |                                                              |\n| propagate          | bool   | 全局log中无此参数，仅用于loggers子日志配置器上，表示日志是否传递到上一级日志输出 | True                                                         |\n\n\n\n## 工具库\n\n### 带宽限速\n\nlinux系统端口带宽限速：talos.common.bandwidth_limiter:BandWidthLimiter\n\n传输流带宽限速：未提供\n\n### 格式转换\n\n#### 表格导出\n\ncsv：talos.common.exporter:export_csv\n\nxlsx：未提供\n\n#### dict转xml\n\ntalos.core.xmlutils:toxml\n\nxmlutils作为core模块的一份子，很重要的一点是：必须保证足够的扩展性，其提供了自定义类型的转换钩子\n\n```python\ntest = {'a': 1, 'b': 1.2340932, 'c': True, 'd': None, 'e': 'hello <world />', 'f': {\n    'k': 'v', 'm': 'n'}, 'g': [1, '2', False, None, {'k': 'v', 'm': [1, 2, 3]}],\n    'h': et.Element('root')}\ntoxml(test, \n      attr_type=True,\n      hooks={'etree': {'render': lambda x: x.tag, 'hit': lambda x: isinstance(x, et.Element)}})\n```\n\n输出结果：\n\n```xml\n\n```\n\n默认情况下，所有未定义的类型，都会被default_render（实际上就是str() ）进行转换渲染\n\nhooks中定义的etree是作为xml的节点type属性输出，hit函数是用于判定定义的类型归属，render用于提取对象内容\n\n\n\n### 登录认证\n\nLdap认证：talos.common.ldap_util:Ldap\n\n授权校验：talos.core.acl:Registry\n\nacl模块提供了扩展于RBAC的授权模式：policy概念对应角色(支持角色继承)，allow/deny对应一个权限规则，传统RBAC将角色与用户绑定即完成授权，但acl模块中，我们认为权限不是固定的，在不同的场景中，用户可以有不同的角色，来执行不同的动作，我们将场景定义为template(场景模板)，假定某用户在操作广州的资源时，可以获得最大的admin权限，而操作上海的资源时只有readonly角色权限\n\n```python\naccess = Registry()\naccess.add_policy('readonly')\naccess.add_policy('manage', parents=('readonly',))\naccess.add_policy('admin', parents=('manage',))\naccess.allow('readonly', 'resource.list')\naccess.allow('manage', 'resource.create')\naccess.allow('manage', 'resource.update')\naccess.allow('manage', 'resource.delete')\naccess.allow('admin', 'auth.manage')\n# bind user1 with policies: (GZ, admin), (SH, readonly)\n# get current region: SH\nassert access.is_allowed([('GZ', 'admin'), ('SH', 'readonly')], 'SH', 'resource.create') is not True\n# bind user2 with policies: (*, manage)\n# get current region: SH\nassert access.is_allowed([('*', 'manage')], 'SH', 'resource.create') is True\n```\n\n如上所示template(场景模板)是可以模糊匹配的，其默认匹配规则如下（匹配函数可以通过Registry更改）：\n\n| Pattern  | Meaning                            |\n| -------- | ---------------------------------- |\n| `*`      | matches everything                 |\n| `?`      | matches any single character       |\n| `[seq]`  | matches any character in *seq*     |\n| `[!seq]` | matches any character not in *seq* |\n\n如此一来我们便可以便捷实现一个基于场景的角色权限校验。\n\n### SMTP邮件发送\n\ntalos.common.mailer:Mailer\n\n### 实用小函数\n\ntalos.core.utils\n\n## 配置项\n\ntalos提供了一个类字典的属性访问配置类\n1. 当属性是标准变量命名且非预留函数名时，可直接a.b.c方式访问\n2. 否则可以使用a['b-1'].c访问(item方式访问时会返回Config对象)\n3. 当属性值刚好Config已存在函数相等时，将进行函数调用而非属性访问！！！\n   保留函数名如下：set_options，from_files，iterkeys，itervalues，iteritems，keys，values，items，get，to_dict，_opts，python魔法函数\n\n比如{\n​        \"my_config\": {\"from_files\": {\"a\": {\"b\": False}}}\n​    }\n无法通过CONF.my_config.from_files来访问属性，需要稍作转换：CONF.my_config['from_files'].a.b 如此来获取，talos会在项目启动时给予提示，请您关注[^ 8]\n\n### 预渲染项\n\ntalos中预置了很多控制程序行为的配置项，可以允许用户进行相关的配置：全局配置、启动服务配置、日志配置、数据库连接配置、缓存配置、频率限制配置、异步和回调配置\n\n此外，还提供了配置项variables拦截预渲染能力[^ 6], 用户可以定义拦截某些配置项，并对其进行修改/更新（常用于密码解密）,然后对其他配置项的变量进行渲染替换，使用方式如下：\n\n```json\n{\n    \"variables\": {\"db_password\": \"MTIzNDU2\", \"other_password\": \"...\"}\n    \"db\": {\"connection\": \"mysql://test:${db_password}@127.0.0.1:1234/db01\"}\n}\n```\n\n如上，variables中定义了定义了db_password变量(**必须在variables中定义变量**)，并再db.connection进行变量使用(**除variables以外其他配置项均可使用\\${db_password}变量进行待渲染**)\n\n在您自己的项目的server.wsgi_server 以及 server.celery_worker代码开始位置使用如下拦截：\n\n```python\nimport base64\nfrom talos.core import config\n\n@config.intercept('db_password', 'other_password')\ndef get_password(value, origin_value):\n    '''value为上一个拦截器处理后的值（若此函数为第一个拦截器，等价于origin_value）\n       origin_value为原始配置文件的值\n       没有拦截的变量talos将自动使用原始值，因此定义一个拦截器是很关键的\n       函数处理后要求必须返回一个值\n    '''\n    # 演示使用不安全的base64，请使用你认为安全的算法进行处理\n    return base64.b64decode(origin_value)\n\n\n```\n\n> 为什么要在server.wsgi_server 以及 server.celery_worker代码开始位置拦截？\n>\n> 因为配置项为预渲染，即程序启动时，就将配置项正确渲染到变量中，以便用户代码能取到正确的配置值，放到其他位置会出现部分代码得到处理前值，部分代码得到处理后值，结果将无法保证一致，因此server.wsgi_server 以及 server.celery_worker代码开始位置设置拦截是非常关键的\n\n\n\n### 配置项\n\n| 路径                                   | 类型   | 描述                                                         | 默认值                                                       |\n| -------------------------------------- | ------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| host                                   | string | 主机名                                                       | 当前主机名                                                   |\n| language                               | string | 系统语言翻译                                                 | en                                                           |\n| locale_app                             | string | 国际化locale应用名称                                         | 当前项目名                                                   |\n| locale_path                            | string | 国际化locale文件路径                                         | ./etc/locale                                                 |\n| variables                              | dict   | 可供拦截预渲染的变量名及其值                                 | {}                                                           |\n| controller.list_size_limit_enabled     | bool   | 是否启用全局列表大小限制                                     | False                                                        |\n| controller.list_size_limit             | int    | 全局列表数据大小，如果没有设置，则默认返回全部，如果用户传入limit参数，则以用户参数为准 | None                                                         |\n| controller.criteria_key.offset         | string | controller接受用户的offset参数的关键key值                    | __offset                                                     |\n| controller.criteria_key.limit          | string | controller接受用户的limit参数的关键key值                     | __limit                                                      |\n| controller.criteria_key.orders         | string | controller接受用户的orders参数的关键key值                    | __orders                                                     |\n| controller.criteria_key.fields         | string | controller接受用户的fields参数的关键key值                    | __fields                                                     |\n| override_defalut_middlewares           | bool   | 覆盖系统默认加载的中间件                                     | Flase                                                        |\n| server                                 | dict   | 服务监听配置项                                               |                                                              |\n| server.bind                            | string | 监听地址                                                     | 0.0.0.0                                                      |\n| server.port                            | int    | 监听端口                                                     | 9001                                                         |\n| server.backlog                         | int    | 监听最大队列数                                               | 2048                                                         |\n| log                                    | dict   | 日志配置项                                                   |                                                              |\n| log.log_console                        | bool   | 是否将日志重定向到标准输出                                   | True                                                         |\n| log.gunicorn_access                    | string | gunicorn的access日志路径                                     | ./access.log                                                 |\n| log.gunicorn_error                     | string | gunicorn的error日志路径                                      | ./error.log                                                  |\n| log.path                               | string | 全局日志路径，默认使用WatchedFileHandler，当指定handler时此项无效 | ./server.log                                                 |\n| log.level                              | string | 日志级别                                                     | INFO                                                         |\n| log.handler[^ 7]                       | string | 自定义的Logger类，eg: logging.handlers:SysLogHandler，定义此项后会优先使用并忽略默认的log.path |                                                              |\n| log.handler_args[^ 7]                  | list   | 自定义的Logger类的初始化参数，eg: []                         |                                                              |\n| log.format_string                      | string | 日志字段配置                                                 | %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s:%(lineno)d [-] %(message)s |\n| log.date_format_string                 | string | 日志时间格式                                                 | %Y-%m-%d %H:%M:%S                                            |\n| log.loggers                            | list   | 模块独立日志配置，列表每个元素是dict: [{\"name\": \"cms.test.api\", \"path\": \"api.log\"}] |                                                              |\n| log.loggers.name                       | string | 模块名称路径，如cms.apps.test，可以被重复定义使用            |                                                              |\n| log.loggers.level                      | string | 参考log.level                                                |                                                              |\n| log.loggers.path                       | string | 参考log.path                                                 |                                                              |\n| log.loggers.handler[^ 7]               | string | 参考log.handler                                              |                                                              |\n| log.loggers.handler_args[^ 7]          | list   | 参考log.handler_args                                         |                                                              |\n| log.loggers.propagate[^ 7]             | bool   | 是否传递到上一级日志配置                                     |                                                              |\n| log.loggers.log_console[^ 7]           | bool   | 参考log.log_console                                          |                                                              |\n| log.loggers.format_string[^ 7]         | string | 参考log.format_string                                        |                                                              |\n| log.loggers.date_format_string[^ 7]    | string | 参考log.date_format_string                                   |                                                              |\n| db                                     | dict   | 默认数据库配置项，用户可以自行定义其他DB配置项，但需要自己初始化DBPool对象(可以参考DefaultDBPool进行单例控制) |                                                              |\n| db.connection                          | string | 连接字符串                                                   |                                                              |\n| db.pool_size                           | int    | 连接池大小                                                   | 3                                                            |\n| db.pool_recycle                        | int    | 连接最大空闲时间，超过时间后自动回收                         | 3600                                                         |\n| db.pool_timeout                        | int    | 获取连接超时时间，单位秒                                     | 5                                                            |\n| db.max_overflow                        | int    | 突发连接池扩展大小                                           | 5                                                            |\n| dbs[^ 7]                               | dict   | 额外的数据库配置项，{name: {db conf...}}，配置项会被初始化到pool.POOLS中，并以名称作为引用名，示例见进阶开发->多数据库支持 |                                                              |\n| dbcrud                                 | dict   | 数据库CRUD控制项                                             |                                                              |\n| dbcrud.unsupported_filter_as_empty     | bool   | 当遇到不支持的filter时的默认行为，1是返回空结果，2是忽略不支持的条件，由于历史版本的行为默认为2，因此其默认值为False，即忽略不支持的条件 | False                                                        |\n| dbcrud.dynamic_relationship            | bool   | 是否启用ORM的动态relationship加载技术，启用后可以通过models.attributes来控制外键动态加载，避免数据过载导致查询缓慢 | True                                                         |\n| dbcrud.dynamic_load_method             | string | 启用ORM的动态relationship加载技术后，可指定加载方式：joinedload，subqueryload，selectinload，immediateload<br/>**joinedload**：使用outer join将所有查询连接为一个语句，结果集少时速度最快，随着结果集和级联外键数量的增加，字段的展开会导致数据极大而加载缓慢<br/>**subqueryload**：比较折中的方式，使用外键独立sql查询，结果集少时速度较快，随着结果集和级联外键数量的增加，速度逐步优于joinedload<br/>**selectinload**：类似subqueryload，但每个查询使用结果集的主键组合为in查询，速度慢<br/>**immediateload**：类似SQLAlchemy的select懒加载，每行的外键单独使用一个查询，速度最慢<br/> | joinedload                                                   |\n| dbcrud.detail_relationship_as_summary  | bool   | 控制获取详情时，下级relationship是列表级或摘要级，False为列表级，True为摘要级，默认False | False                                                        |\n| cache                                  | dict   | 缓存配置项                                                   |                                                              |\n| cache.type                             | string | 缓存后端类型                                                 | dogpile.cache.memory                                         |\n| cache.expiration_time                  | int    | 缓存默认超时时间，单位为秒                                   | 3600                                                         |\n| cache.arguments                        | dict   | 缓存额外配置                                                 | None                                                         |\n| application                            | dict   |                                                              |                                                              |\n| application.names                      | list   | 加载的应用列表，每个元素为string，代表加载的app路径          | []                                                           |\n| rate_limit                             | dict   | 频率限制配置项                                               |                                                              |\n| rate_limit.enabled                     | bool   | 是否启用频率限制                                             | False                                                        |\n| rate_limit.storage_url                 | string | 频率限制数据存储计算后端                                     | memory://                                                    |\n| rate_limit.strategy                    | string | 频率限制算法，可选fixed-window，fixed-window-elastic-expiry，moving-window | fixed-window                                                 |\n| rate_limit.global_limits               | string | 全局频率限制(依赖于全局中间件)，eg. 1/second; 5/minute       | None                                                         |\n| rate_limit.per_method                  | bool   | 是否为每个HTTP方法独立频率限制                               | True                                                         |\n| rate_limit.header_reset                | string | HTTP响应头，频率重置时间                                     | X-RateLimit-Reset                                            |\n| rate_limit.header_remaining            | string | HTTP响应头，剩余的访问次数                                   | X-RateLimit-Remaining                                        |\n| rate_limit.header_limit                | string | HTTP响应头，最大访问次数                                     | X-RateLimit-Limit                                            |\n| celery                                 | dict   | 异步任务配置项                                               |                                                              |\n| celery.talos_on_user_schedules_changed | list   | 定时任务变更判断函数列表\"talos_on_user_schedules_changed\":[\"cms.workers.hooks:ChangeDetection\"], |                                                              |\n| celery.talos_on_user_schedules         | list   | 定时任务函数列表\"talos_on_user_schedules\": [\"cms.workers.hooks:AllSchedules\"] |                                                              |\n| worker                                 | dict   | 异步工作进程配置项                                           |                                                              |\n| worker.callback                        | dict   | 异步工作进程回调控制配置项                                   |                                                              |\n| worker.callback.strict_client          | bool   | 异步工作进程认证时仅使用直连IP                               | True                                                         |\n| worker.callback.allow_hosts            | list   | 异步工作进程认证主机IP列表，当设置时，仅允许列表内worker调用回调 | None                                                         |\n| worker.callback.name.%s.allow_hosts    | list   | 异步工作进程认证时，仅允许列表内worker调用此命名回调         | None                                                         |\n\n\n\n## CHANGELOG\n\n1.3.6:\n\n- 更新：[crud] relationship的多属性 & 多级嵌套 查询支持\n- 修复：[utils] http模块的i18n支持\n\n1.3.5:\n\n- 修复：[crud] _addtional_update的after_update参数取值无效问题\n\n1.3.4:\n- 修复：[crud] update & delete时带入default_orders报错问题\n\n1.3.3:\n\n- 更新：[config] 优化config.item效率\n- 更新：[crud] 优化deepcopy导致的效率问题\n- 更新：[utils] 优化utils.get_function_name效率\n- 更新：[crud] 提供register_filter支持外部filter注册\n- 修复：[crud] any_orm_data返回字段不正确问题\n\n1.3.2:\n\n- 更新：[i18n] 支持多语言包加载，并默认第一语言（language: [en, zh, zh-CN,...]）\n- 修复：[crud] update relationship后返回的对象不是最新信息问题\n\n1.3.1:\n\n- 更新：[db] models动态relationship加载，效率提升(CONF.dbcrud.dynamic_relationship，默认已启用)，并可以指定load方式(默认joinedload)\n\n- 更新：[db] 支持设定获取资源detail级时下级relationship指定列表级 / 摘要级(CONF.dbcrud.detail_relationship_as_summary)\n\n- 更新：[test]动态relationship加载/装饰器/异常/缓存/导出/校验器/控制器模块等大量单元测试\n\n- 更新**[breaking]**：[controller]_build_criteria的supported_filters由fnmatch更改为re匹配方式\n  > 由fnmatch更改为re匹配，提升效率，也提高了匹配自由度\n  >\n  > 如果您的项目中使用了supported_filters=['name\\_\\_\\*']类似的指定支持参数，需要同步更新代码如：['name\\_\\_.\\*']\n  >\n  > 如果仅使用过supported_filters=['name']类的指定支持参数，则依然兼容无需更改\n\n- 更新：[controller]_build_criteria支持unsupported_filter_as_empty配置(启用时，不支持参数将导致函数返回None)\n\n- 更新：[controller]增加redirect重定向函数\n\n- 修复：[controller]支持原生falcon的raise HTTPTemporaryRedirect(...)形式重定向\n\n- 修复：[util] xmlutils的py2/py3兼容问题\n\n- 修复：[schedule] TScheduler概率丢失一个max_interval时间段定时任务问题\n\n- 修复：[middleware]falcon>=2.0 且使用wsgiref.simple_server时block问题\n\n1.3.0:\n\n- 新增：[db] 多数据库连接池配置支持(CONF.dbs)\n- 新增：[worker] 远程调用快捷模式(callback.remote(...))\n- 新增：[cache] 基于redis的分布式锁支持(cache.distributed_lock)\n- 新增：[exception] 抛出异常可携带额外数据(raise Error(exception_data=...),  e.to_dict())\n- 更新：[exception] 默认捕获所有异常，返回统一异常结构\n- 更新：[exception] 替换异常序列化to_xml库，由dicttoxml库更换为talos.core.xmlutils，提升效率，支持更多扩展\n- 更新：[template] 生成模板：requirements，wsgi_server，celery_worker\n- 更新：[base] 支持falcon 2.0\n- 更新：[log] 支持自定义handler的log配置\n- 更新：[util] 支持协程级别的GLOABLS(支持thread/gevent/eventlet类型的worker)\n- 修复：[base] 单元素的query数组错误解析为一个元素而非数组问题\n- 修复：[util] exporter对异常编码的兼容问题\n- 修复：[crud] create/update重复校验输入值\n\n1.2.3:\n\n- 优化：[config] 支持配置项变量/拦截/预渲染(常用于配置项的加解密) \n\n1.2.2:\n\n- 优化：[util] 频率限制，支持类级/函数级频率限制，更多复杂场景 \n- 优化：[test] 完善单元测试 \n- 优化：[base] JSONB复杂查询支持 \n- 优化：[base] 一些小细节\n\n1.2.1：\n- 见 [tags](https://gitee.com/wu.jianjun/talos/tags)\n\n...\n\n\n\n[^ 1]: 本文档基于v1.1.8版本，并增加了后续版本的一些特性描述\n[^ 2]: v1.1.9版本中新增了TScheduler支持动态的定时任务以及更丰富的配置定义定时任务\n[^ 3]: v1.1.8版本中仅支持这类简单的定时任务\n[^ 4]: v1.2.0版本增加了__fields字段选择 以及 null, notnull, nlike, nilike的查询条件 以及 relationship查询支持\n[^ 5]: v1.2.0版本新增\\$or,\\$and查询支持\n[^ 6]: v1.2.3版本后开始支持\n[^ 7]: v1.3.0版本新增多数据库连接池支持以及日志handler选项\n[^ 8]: v1.3.0版本新增了Config项加载时的warnings，以提醒用户此配置项正确访问方式\n[^ 9]: v1.3.1版本更新了relationship的动态加载技术，可根据设定的attributes自动加速查询(默认启用)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/wu.jianjun/talos",
    "keywords": "talos automation restful rest api celery sqlalchemy falcon",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "talos-api",
    "package_url": "https://pypi.org/project/talos-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/talos-api/",
    "project_urls": {
      "Homepage": "https://gitee.com/wu.jianjun/talos"
    },
    "release_url": "https://pypi.org/project/talos-api/1.3.6/",
    "requires_dist": [
      "falcon (==2.0.0)",
      "six (>=1.9.0)",
      "SQLAlchemy (<2.0,>=1.1.0)",
      "mako",
      "requests",
      "limits",
      "celery (<5.0.0)",
      "dogpile.cache",
      "ipaddress ; python_version < \"3.3\"",
      "pytest ; extra == 'testing'",
      "pytest-runner ; extra == 'testing'",
      "pytest-html ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest-mock ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "A Falcon Base, Powerful RESTful API Framework, with SQLAlchemy integrated",
    "version": "1.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12197016,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e0011110a4ec178a85b962eaa20bd553560e13c001c15267879968491df7ba9",
          "md5": "e1ae6c363e27673dd026d36389389de8",
          "sha256": "b05442e27e78484981e65de469986dc5bc76f50fba754c20c9c5ba6d44f6eda0"
        },
        "downloads": -1,
        "filename": "talos_api-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1ae6c363e27673dd026d36389389de8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 111598,
        "upload_time": "2019-01-24T06:21:39",
        "upload_time_iso_8601": "2019-01-24T06:21:39.235736Z",
        "url": "https://files.pythonhosted.org/packages/9e/00/11110a4ec178a85b962eaa20bd553560e13c001c15267879968491df7ba9/talos_api-1.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69d9344c6a4f68d6a1afbe8066eb57b35478691e191633dd1e555b77bce8e125",
          "md5": "d71b47fcf102d5d2a3187fa5370aa68b",
          "sha256": "9f16e07da5ad9ebe4931e7d514f584760741b0f5909894df4a9d55044819b5e0"
        },
        "downloads": -1,
        "filename": "talos-api-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d71b47fcf102d5d2a3187fa5370aa68b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 111389,
        "upload_time": "2019-01-24T06:21:41",
        "upload_time_iso_8601": "2019-01-24T06:21:41.792091Z",
        "url": "https://files.pythonhosted.org/packages/69/d9/344c6a4f68d6a1afbe8066eb57b35478691e191633dd1e555b77bce8e125/talos-api-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f569d079e7d49aa3072ac316888876341c5a83bb75f0cd9509240e5efe20c9f3",
          "md5": "3e38ed1eeb5f867b8004704178350b27",
          "sha256": "d4808add646b544f3535057400eaefe079bee77d4cf3bc5f8faeceacb8a3139d"
        },
        "downloads": -1,
        "filename": "talos_api-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e38ed1eeb5f867b8004704178350b27",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 112505,
        "upload_time": "2019-02-12T06:05:11",
        "upload_time_iso_8601": "2019-02-12T06:05:11.284168Z",
        "url": "https://files.pythonhosted.org/packages/f5/69/d079e7d49aa3072ac316888876341c5a83bb75f0cd9509240e5efe20c9f3/talos_api-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24689c535071fba47d99ffae4c8aa8814a2804512be8313ed2c41e0c93084f44",
          "md5": "87249b3db5af8d43153a2ab02fe33587",
          "sha256": "046d67f71bf856b4458163dbfb5d4754533841a3f548e66a04f92247331effb4"
        },
        "downloads": -1,
        "filename": "talos-api-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87249b3db5af8d43153a2ab02fe33587",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 112832,
        "upload_time": "2019-02-12T06:05:17",
        "upload_time_iso_8601": "2019-02-12T06:05:17.615385Z",
        "url": "https://files.pythonhosted.org/packages/24/68/9c535071fba47d99ffae4c8aa8814a2804512be8313ed2c41e0c93084f44/talos-api-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53f4e66a36966fac8ebe237b1c3cfbb2de883952ee4468384b9b63fa9db24a5a",
          "md5": "09e97d1414c15c516f84f7786d3d8fdf",
          "sha256": "17d033c70c97d675efa9fd67ba8ced8f7ba4b5f2fe231b271e3e2e72d61feeca"
        },
        "downloads": -1,
        "filename": "talos_api-1.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09e97d1414c15c516f84f7786d3d8fdf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 103193,
        "upload_time": "2019-04-11T16:10:58",
        "upload_time_iso_8601": "2019-04-11T16:10:58.471801Z",
        "url": "https://files.pythonhosted.org/packages/53/f4/e66a36966fac8ebe237b1c3cfbb2de883952ee4468384b9b63fa9db24a5a/talos_api-1.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e00366c009692156ae7b09f129da91d7c4eca4de947de89ce091f1bec1f6774",
          "md5": "5f876ba7f501c823eaefa8bea0571190",
          "sha256": "8aaf2ce0058ef62c208bb441e5b32fdeae53f3fefd5ef2be6ce1e3e30eb80efc"
        },
        "downloads": -1,
        "filename": "talos-api-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5f876ba7f501c823eaefa8bea0571190",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 120331,
        "upload_time": "2019-04-11T16:11:00",
        "upload_time_iso_8601": "2019-04-11T16:11:00.410124Z",
        "url": "https://files.pythonhosted.org/packages/7e/00/366c009692156ae7b09f129da91d7c4eca4de947de89ce091f1bec1f6774/talos-api-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19be454aef1ae55e5de382caa4d1e63d31a689901c4ec045ae9d5153665a0bc4",
          "md5": "3e2c8d6b8fa9bced0c293518f12c98d7",
          "sha256": "7ad2f78001c68de92eedcbf4ca5f3a71d05fda414d78a52ea63dc2c5c7ff8af3"
        },
        "downloads": -1,
        "filename": "talos_api-1.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e2c8d6b8fa9bced0c293518f12c98d7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 108178,
        "upload_time": "2019-11-01T02:33:58",
        "upload_time_iso_8601": "2019-11-01T02:33:58.303582Z",
        "url": "https://files.pythonhosted.org/packages/19/be/454aef1ae55e5de382caa4d1e63d31a689901c4ec045ae9d5153665a0bc4/talos_api-1.2.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c144e17b7840e64e2366db27174f2cb3f438a785728c009195a5532586ed84",
          "md5": "24fdf484ff791884d2531d80aeb465be",
          "sha256": "e814398610383c6c8f11c423b81a135c2cd8dbcf4a81d55a71eef7c3bf556e16"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24fdf484ff791884d2531d80aeb465be",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 118552,
        "upload_time": "2019-11-24T11:19:02",
        "upload_time_iso_8601": "2019-11-24T11:19:02.938919Z",
        "url": "https://files.pythonhosted.org/packages/45/c1/44e17b7840e64e2366db27174f2cb3f438a785728c009195a5532586ed84/talos_api-1.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39a780eba5b8eefe1eba7c6a2a9cd19d0ed55d797f30b2cb668640713f72c1d0",
          "md5": "2494244daf602386aa1cf0a8fb9999de",
          "sha256": "805c6a6b067c220e50a1a4be5a035486edcff6acc199ad4880c7c4fcfba4f35c"
        },
        "downloads": -1,
        "filename": "talos-api-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2494244daf602386aa1cf0a8fb9999de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 138872,
        "upload_time": "2019-11-24T11:19:06",
        "upload_time_iso_8601": "2019-11-24T11:19:06.030034Z",
        "url": "https://files.pythonhosted.org/packages/39/a7/80eba5b8eefe1eba7c6a2a9cd19d0ed55d797f30b2cb668640713f72c1d0/talos-api-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37039e2bce96473d00b7c7d462e15d0fed03e1ad91f8c3ac515b436ee4ff3599",
          "md5": "1d0105bd5755b74d9d02694ead00c615",
          "sha256": "f649d3faad0af203ae79715dc45a2f0eeeadc1406d54c5ba91bf4013d2bad20b"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d0105bd5755b74d9d02694ead00c615",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 125017,
        "upload_time": "2020-01-21T09:21:16",
        "upload_time_iso_8601": "2020-01-21T09:21:16.800579Z",
        "url": "https://files.pythonhosted.org/packages/37/03/9e2bce96473d00b7c7d462e15d0fed03e1ad91f8c3ac515b436ee4ff3599/talos_api-1.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0fd095d9ce424a645e47032db72b2067da790ade8fbda21669f9e15a3dbeaa0",
          "md5": "8142c57ba8c99cbfa84980e99aecdeec",
          "sha256": "f1e16b42d226026a75e6ff0a74a00a203ce5ab40f21a612498c2a812186cee30"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8142c57ba8c99cbfa84980e99aecdeec",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 126837,
        "upload_time": "2020-04-20T03:05:50",
        "upload_time_iso_8601": "2020-04-20T03:05:50.812911Z",
        "url": "https://files.pythonhosted.org/packages/a0/fd/095d9ce424a645e47032db72b2067da790ade8fbda21669f9e15a3dbeaa0/talos_api-1.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2723d24568cf1a0292b9e95b2b5c2aef2590eab296580228b8d2c261a8c7082b",
          "md5": "d1ad2da6dcc6716d1abfb37a439ed67f",
          "sha256": "a7faec873065b7b0980190bc1e97eb1c946f26cca44c9a4468164476fbc2679d"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1ad2da6dcc6716d1abfb37a439ed67f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 127450,
        "upload_time": "2020-11-03T03:42:21",
        "upload_time_iso_8601": "2020-11-03T03:42:21.973128Z",
        "url": "https://files.pythonhosted.org/packages/27/23/d24568cf1a0292b9e95b2b5c2aef2590eab296580228b8d2c261a8c7082b/talos_api-1.3.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b524c248cce42c875aeb58a996538e5d30cd7050fd2647312282176f87dbd022",
          "md5": "6d5dd6e15739ebd79f97c3a4c095cccb",
          "sha256": "d7a7379ea4b032ad61b2d22319b3d73146ccc4d0ec834d3c81463e52aa29ef42"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d5dd6e15739ebd79f97c3a4c095cccb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 127586,
        "upload_time": "2020-11-18T10:07:51",
        "upload_time_iso_8601": "2020-11-18T10:07:51.078868Z",
        "url": "https://files.pythonhosted.org/packages/b5/24/c248cce42c875aeb58a996538e5d30cd7050fd2647312282176f87dbd022/talos_api-1.3.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be1ce7ae9620c66be35b1720b199fbfb073a21ef3c191d463ec60ef740fd473",
          "md5": "01fd403a1d4442a4e5f3bea6dbef7f96",
          "sha256": "d15e2cfc9937ce861fff7e62a08a10fb0b61359335acd8021130ca59b24eb32b"
        },
        "downloads": -1,
        "filename": "talos-api-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "01fd403a1d4442a4e5f3bea6dbef7f96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 161666,
        "upload_time": "2020-11-18T10:07:54",
        "upload_time_iso_8601": "2020-11-18T10:07:54.060332Z",
        "url": "https://files.pythonhosted.org/packages/3b/e1/ce7ae9620c66be35b1720b199fbfb073a21ef3c191d463ec60ef740fd473/talos-api-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "613cf3fe221065981035fe92aac2ad4005430af50d57ab88b1b3ff017cb1c238",
          "md5": "eb06f6b4254699bbea272fe56651ef7c",
          "sha256": "2fda726da4da9d149d4b15622e333f028182f77a9b7f0dcbc575ed86466ac2a7"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb06f6b4254699bbea272fe56651ef7c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 127647,
        "upload_time": "2020-12-09T07:50:03",
        "upload_time_iso_8601": "2020-12-09T07:50:03.616455Z",
        "url": "https://files.pythonhosted.org/packages/61/3c/f3fe221065981035fe92aac2ad4005430af50d57ab88b1b3ff017cb1c238/talos_api-1.3.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1166ea4996451956339dad3d2c4bbafc455b51c4b687c6474104296ebf4c5f90",
          "md5": "d5b8e1865afd5b4a598b7a3de592c77e",
          "sha256": "f568e088f355006cb8deb663e5426a0db8130919f9b787573c050fc83914e891"
        },
        "downloads": -1,
        "filename": "talos-api-1.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d5b8e1865afd5b4a598b7a3de592c77e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 161843,
        "upload_time": "2020-12-09T07:50:06",
        "upload_time_iso_8601": "2020-12-09T07:50:06.493555Z",
        "url": "https://files.pythonhosted.org/packages/11/66/ea4996451956339dad3d2c4bbafc455b51c4b687c6474104296ebf4c5f90/talos-api-1.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3cb3f8ff334a5b0fdc65c19e09ed5121fdce47d66d8d88d4d73dc7976c1d735",
          "md5": "00842e8a88470cdfdef4a3c842e46432",
          "sha256": "c0cb9906e931acb91bf63fa8946ad9209afbba349be6254451ed9b4ad3ee7b40"
        },
        "downloads": -1,
        "filename": "talos_api-1.3.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00842e8a88470cdfdef4a3c842e46432",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 128548,
        "upload_time": "2021-12-03T02:27:36",
        "upload_time_iso_8601": "2021-12-03T02:27:36.611621Z",
        "url": "https://files.pythonhosted.org/packages/c3/cb/3f8ff334a5b0fdc65c19e09ed5121fdce47d66d8d88d4d73dc7976c1d735/talos_api-1.3.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3170fba8b06b5238b10b66f4ed827e777e1d9f81dcb1b88da98514f296a14bc7",
          "md5": "dc14681e41059b7308f6a910d0840ae4",
          "sha256": "ac8386e35cc01ee7a5cadacfe193390cb72b2d52c8e9b51af1547f45534e32e0"
        },
        "downloads": -1,
        "filename": "talos-api-1.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "dc14681e41059b7308f6a910d0840ae4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 162501,
        "upload_time": "2021-12-03T02:27:39",
        "upload_time_iso_8601": "2021-12-03T02:27:39.779987Z",
        "url": "https://files.pythonhosted.org/packages/31/70/fba8b06b5238b10b66f4ed827e777e1d9f81dcb1b88da98514f296a14bc7/talos-api-1.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3cb3f8ff334a5b0fdc65c19e09ed5121fdce47d66d8d88d4d73dc7976c1d735",
        "md5": "00842e8a88470cdfdef4a3c842e46432",
        "sha256": "c0cb9906e931acb91bf63fa8946ad9209afbba349be6254451ed9b4ad3ee7b40"
      },
      "downloads": -1,
      "filename": "talos_api-1.3.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "00842e8a88470cdfdef4a3c842e46432",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 128548,
      "upload_time": "2021-12-03T02:27:36",
      "upload_time_iso_8601": "2021-12-03T02:27:36.611621Z",
      "url": "https://files.pythonhosted.org/packages/c3/cb/3f8ff334a5b0fdc65c19e09ed5121fdce47d66d8d88d4d73dc7976c1d735/talos_api-1.3.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3170fba8b06b5238b10b66f4ed827e777e1d9f81dcb1b88da98514f296a14bc7",
        "md5": "dc14681e41059b7308f6a910d0840ae4",
        "sha256": "ac8386e35cc01ee7a5cadacfe193390cb72b2d52c8e9b51af1547f45534e32e0"
      },
      "downloads": -1,
      "filename": "talos-api-1.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "dc14681e41059b7308f6a910d0840ae4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 162501,
      "upload_time": "2021-12-03T02:27:39",
      "upload_time_iso_8601": "2021-12-03T02:27:39.779987Z",
      "url": "https://files.pythonhosted.org/packages/31/70/fba8b06b5238b10b66f4ed827e777e1d9f81dcb1b88da98514f296a14bc7/talos-api-1.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}