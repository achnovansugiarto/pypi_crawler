{
  "info": {
    "author": "Kiruse",
    "author_email": "kiruse@kiruse.dev",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# AsyncRateLimiter\n*AsyncIO*-enabled rate limiter - limit the rate of API calls!\n\nPublic APIs such as [Wiktionary](https://wiktionary.org) may apply rate limits at which one may call any part of their API. A generous API will inform you of this rate limit through a well structured error. Other cases, however, may not be so graceous. It may respond with a general purpose status code 500; a generic, non-informative HTML error page; or even outright close the connection lacking any response whatsoever. For these cases, a rate limiter can help avoid triggering such a response altogether.\n\n*AsyncRateLimiter* is partly inspired by [ratelimiter](https://github.com/RazerM/ratelimiter). The main difference is that *AsyncRateLimiter* is designed for asynchronous usage, whereas *ratelimiter* is designed for sequential API calls - further wrap-around code is needed to enable asynchronous code. *AsyncRateLimiter* integrates with *AsyncIO* for convenience.\n\n## Installation\nSimply install via `pip install asyncratelimiter`\n\n## Dependencies\nThere is a single dependency for convenience: [requests](https://github.com/psf/requests)\n\n# Styles\n*AsyncRateLimiter* supports two distinct usage styles:\n\n1. Threaded style - incorporates sequential APIs such as *requests* with rate-limited AsyncIO\n2. Async style - limits calls to AsyncIO-based APIs\n\n## Threaded Style\nThreaded style revolves around the `ThreadedRateLimiter.dispatch(fun, /, *args, **kwargs)` method. `fun` is enqueued with Python's standard `concurrent.futures.ThreadPoolExecutor`, which is particularly useful to dispatch multiple I/O-dependent tasks and waiting on their completion simultaneously.\n\n```python\nfrom asyncratelimiter import ThreadedRateLimiter\nimport asyncio\n\nasync def main():\n    with ThreadedRateLimiter(max_rate=10, interval=1) as limiter:\n        futures = []\n        for _ in range(100):\n            futures.append(limiter.dispatch())\nasyncio.run(main())\n```\n\n### Requests Integration\nA simple derivation of `ThreadedRateLimiter` exposing `get`, `post`, `put`, `delete`, and `request` methods; one may still access `ThreadedRateLimiter.dispatch` as normal.\n\n```python\nfrom asyncratelimiter import RequestLimiter\nimport asyncio\n\nasync def main():\n    futures = []\n    with RequestLimiter(max_rate=10, interval=2) as requests:\n        for _ in range(100):\n            futures.append(requests.get('https://google.com'))\n        await asyncio.gather(*futures)\n        # Should take ~18-20 seconds - the last batch need not necessarily take the full 2s interval\nasyncio.run(main())\n```\n\n## Async Style\nAsync style behaves much like *ratelimiter*, except AsyncIO-integrated.\n\n```python\nfrom asyncratelimiter import AsyncRateLimiter\nimport asyncio\n\nasync def foo():\n    return 42\n\nasync def main():\n    ratelimiter = AsyncRateLimiter(max_rate=10, interval=1)\n    for _ in range(100):\n        async with ratelimiter:\n            await foo()\nasyncio.run(main())\n```\n\nFor concurrently running tasks, async style still exposes a `dispatch(aw: Awaitable)` method:\n\n```python\nfrom asyncratelimiter import AsyncRateLimiter\nimport asyncio\n\nasync def foo(delay: float):\n    await asyncio.sleep(delay)\n    return 42\n\nasync def main():\n    ratelimiter = AsyncRateLimiter(max_rate=10, interval=1)\n    aws = []\n    for _ in range(100):\n        aws.append(ratelimiter.dispatch(foo(0.5)))\n    await asyncio.gatcher(*aws)\n```\n\n# License\nMIT License\n\nCopyright (c) 2021 Kiruse\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kiruse/PyAsyncRateLimiter",
    "keywords": "asyncio,rate limiter,requests",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncratelimiter",
    "package_url": "https://pypi.org/project/asyncratelimiter/",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncratelimiter/",
    "project_urls": {
      "Homepage": "https://github.com/Kiruse/PyAsyncRateLimiter"
    },
    "release_url": "https://pypi.org/project/asyncratelimiter/1.0.0/",
    "requires_dist": [
      "requests (>=2.0)",
      "pytest (>=6) ; extra == 'test'",
      "pytest-asyncio (>=0.15) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "\"AsyncIO-enabled rate limiter - limit the rate of API calls!\"",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11351929,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a922a8208925695f8161029c8dcd8b01b20de9607332d588a962d3b5b2cbd8ef",
          "md5": "c9d4221762d4fb47a31c01e04edb8b2d",
          "sha256": "b22e80110bae6c959f770ee1daf1627e1fe7bdfe9d66953dc937aeac67f2b048"
        },
        "downloads": -1,
        "filename": "asyncratelimiter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9d4221762d4fb47a31c01e04edb8b2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5669,
        "upload_time": "2021-09-02T21:38:51",
        "upload_time_iso_8601": "2021-09-02T21:38:51.079467Z",
        "url": "https://files.pythonhosted.org/packages/a9/22/a8208925695f8161029c8dcd8b01b20de9607332d588a962d3b5b2cbd8ef/asyncratelimiter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83feaca69a09973ef3fa56efec3c91d13ef8a3fb56fb6abf139d7c92fab0c82b",
          "md5": "3ecfefdca908d2b492cafff2535fa65d",
          "sha256": "b9e57d1a5f4281353cbaa59381bae72118e58b621f1982917d16dede3dd49f59"
        },
        "downloads": -1,
        "filename": "asyncratelimiter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3ecfefdca908d2b492cafff2535fa65d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5785,
        "upload_time": "2021-09-02T21:38:52",
        "upload_time_iso_8601": "2021-09-02T21:38:52.818782Z",
        "url": "https://files.pythonhosted.org/packages/83/fe/aca69a09973ef3fa56efec3c91d13ef8a3fb56fb6abf139d7c92fab0c82b/asyncratelimiter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a922a8208925695f8161029c8dcd8b01b20de9607332d588a962d3b5b2cbd8ef",
        "md5": "c9d4221762d4fb47a31c01e04edb8b2d",
        "sha256": "b22e80110bae6c959f770ee1daf1627e1fe7bdfe9d66953dc937aeac67f2b048"
      },
      "downloads": -1,
      "filename": "asyncratelimiter-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c9d4221762d4fb47a31c01e04edb8b2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5669,
      "upload_time": "2021-09-02T21:38:51",
      "upload_time_iso_8601": "2021-09-02T21:38:51.079467Z",
      "url": "https://files.pythonhosted.org/packages/a9/22/a8208925695f8161029c8dcd8b01b20de9607332d588a962d3b5b2cbd8ef/asyncratelimiter-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83feaca69a09973ef3fa56efec3c91d13ef8a3fb56fb6abf139d7c92fab0c82b",
        "md5": "3ecfefdca908d2b492cafff2535fa65d",
        "sha256": "b9e57d1a5f4281353cbaa59381bae72118e58b621f1982917d16dede3dd49f59"
      },
      "downloads": -1,
      "filename": "asyncratelimiter-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3ecfefdca908d2b492cafff2535fa65d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5785,
      "upload_time": "2021-09-02T21:38:52",
      "upload_time_iso_8601": "2021-09-02T21:38:52.818782Z",
      "url": "https://files.pythonhosted.org/packages/83/fe/aca69a09973ef3fa56efec3c91d13ef8a3fb56fb6abf139d7c92fab0c82b/asyncratelimiter-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}