{
  "info": {
    "author": "A. Adiby",
    "author_email": "aliadiby@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# xml2df\nConvert XML file to a pandas dataframe. This package flattens the XML structure and creates a list of dictionaries that is then transformed to a dataframe.\n\nrequirement: pandas\n\nThe code is available in the xml2df.py\nRunning the file will allow you to process the example.xml file:\n\ndef main():\n    document = ET.parse(\"example.xml\")\n    \n    # batched elements is a list containing all the nodes who's children are of the same instance\n\n    batched_elements = [\"publish_date\", \"author_details\"]\n \n    df_result = xml2df(document, \"book\", batched_elements)\n    print(df_result.head(5))\n    \nThe file contains several functions to process your XML file. Please find the descriptions below:\n\n### xml2df function:\n\n    This function runs the xml_flatten function to supply us with a flat structure result, the result of the xml_flatten function is then\n        modified to join all existing lists to strings. If you do not need this final modification, please consider using the xml_flatten\n        function instead which takes the same arguments.\n    xml_document: the xml document to be processed\n    root_node: specify the root node to begin drilldown\n    batched_elements: as described in info allows you to identify batched nodes. For batched nodes, the xml.text is requested for all its\n        child nodes. If any child nodes have their own children, this function will iter over all children and get their texts as well.\n        Please note that when a the children have their own child node, they will ALSO be treated as a regular node and get their own values\n        in a separate column.\n        example:\n            <book>\n                <publication_date version=\"1\">\n                    <year>2020</year>\n                    <month>05</month>\n                    <day>11</day>\n                </publication_date>\n                <publication_date version=\"2\">\n                    <year>2020</year>\n                    <month>05</month>\n                    <day>11</day>\n                </publication_date>\n                <author>\n                    John Doe\n                </author>\n            </book>\n            To keep the subinstances of publication date as a whole, \"publication_date\" must be added to the batched_elements list\n            leave empty if you don't need this\n    unique_results: default set to True, set  to False if you need to get all results and not only unique results (applies set function)\n    join_separator: default set to \";\". modify this if you want the lists to be joined with any other separator\n\n\n### xml_flatten function:\n\n    This function, given the root node, will drill down the elements and flatten the xml.\n    xml_document: the xml document to be processed\n    root_node: specify the root node to begin drilldown\n    batched_elements: as described in info allows you to identify batched nodes. For batched nodes, the xml.text is requested for all its\n        child nodes. If any child nodes have their own children, this function will iter over all children and get their texts as well.\n        Please note that when a the children have their own child node, they will ALSO be treated as a regular node and get their own values\n        in a separate column\n\n\n### get_flat_children function:\n\n    This function will simply iterate over every node until there are no child nodes found. At this point the function will\n        create a dictionary that saves the value of the node text along with the full attribute (name=value).\n        format is then {\"nodeparent_nodechild\": \"attribute_name=attribute_value|node_text\"}. \n        Please note that only attributes belonging to the leaves (nodes without children) is retrieved. in case of batched \n        elements the attributes of the batch node are retrieved.\n    batched_elements: please refer to the full explanation in xml2df function.\n    result_dict: dictionary to aggregates the results.\n    root: initially, the value supplied will be used to start the drilldown. when this function calls itself, the root will be changed\n        to its children.\n    prev_root: default set to empty string. do not modify unless you want all column names to start with a given string.\n    attribute_separator: default set to \"|\". This separator is used to explicitly distinguish attributes from values in the final string.\n    batch_result_separator: default set to \" - \". This value can be modified to change the join string on the batched results.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/aadiby/xml2df/archive/0.14.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aadiby/xml2df.git",
    "keywords": "XML,DataFrame,DF,pandas,flat,ETL",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xml2df",
    "package_url": "https://pypi.org/project/xml2df/",
    "platform": "",
    "project_url": "https://pypi.org/project/xml2df/",
    "project_urls": {
      "Download": "https://github.com/aadiby/xml2df/archive/0.14.tar.gz",
      "Homepage": "https://github.com/aadiby/xml2df.git"
    },
    "release_url": "https://pypi.org/project/xml2df/0.14/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Convert XML file to a pandas dataframe. This package flattens the XML structure and creates a list of dictionaries that is then transformed to a dataframe.",
    "version": "0.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8917278,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c72c440795a00e63f636a40ba61426f4b50db8460a0bfdde1d0bc099cb79a74a",
          "md5": "9df543f6d6acca688a99ac53f1c8e0f0",
          "sha256": "32f3cee912ec967ef3e58125a312ea43a49958fb8cc3e2613d9d36bc661d46b8"
        },
        "downloads": -1,
        "filename": "xml2df-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9df543f6d6acca688a99ac53f1c8e0f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3336,
        "upload_time": "2020-12-16T20:33:25",
        "upload_time_iso_8601": "2020-12-16T20:33:25.183683Z",
        "url": "https://files.pythonhosted.org/packages/c7/2c/440795a00e63f636a40ba61426f4b50db8460a0bfdde1d0bc099cb79a74a/xml2df-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc7c9597303a18b1edecb87f32622a79b657367810a6beca0f5c38c67d60f55d",
          "md5": "4b4911eec8d345f83930bebe8b5daa6a",
          "sha256": "56496565ab3aa8e1ae195ce08ef94544fb258cccec2b9cdc694c7bcbbeb87b6b"
        },
        "downloads": -1,
        "filename": "xml2df-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "4b4911eec8d345f83930bebe8b5daa6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3341,
        "upload_time": "2020-12-16T20:33:58",
        "upload_time_iso_8601": "2020-12-16T20:33:58.871673Z",
        "url": "https://files.pythonhosted.org/packages/cc/7c/9597303a18b1edecb87f32622a79b657367810a6beca0f5c38c67d60f55d/xml2df-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "972a319e46176e655a021d1af0a06d896d0674e104e77e0ca7af68530b73c7a1",
          "md5": "5af5f58d60b5d86078284eed550356b2",
          "sha256": "db7e112bfcfd94dba6210ceb1e7e5afd3c9ff45658245a43449cf5b8fbb62404"
        },
        "downloads": -1,
        "filename": "xml2df-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "5af5f58d60b5d86078284eed550356b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4188,
        "upload_time": "2020-12-16T20:51:22",
        "upload_time_iso_8601": "2020-12-16T20:51:22.847522Z",
        "url": "https://files.pythonhosted.org/packages/97/2a/319e46176e655a021d1af0a06d896d0674e104e77e0ca7af68530b73c7a1/xml2df-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b77bd1a89d05451f0c100ea0b8d538253082acbaaa8a53f07d851ac7efbd6a0a",
          "md5": "42ab1cf6c5c6315b6e6a90f7f811db1b",
          "sha256": "90e9a40bec5828318ec1c4a06258ab0b3384673fa84b0b762d523d692392d5e8"
        },
        "downloads": -1,
        "filename": "xml2df-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "42ab1cf6c5c6315b6e6a90f7f811db1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4160,
        "upload_time": "2020-12-16T21:09:55",
        "upload_time_iso_8601": "2020-12-16T21:09:55.670291Z",
        "url": "https://files.pythonhosted.org/packages/b7/7b/d1a89d05451f0c100ea0b8d538253082acbaaa8a53f07d851ac7efbd6a0a/xml2df-0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b77bd1a89d05451f0c100ea0b8d538253082acbaaa8a53f07d851ac7efbd6a0a",
        "md5": "42ab1cf6c5c6315b6e6a90f7f811db1b",
        "sha256": "90e9a40bec5828318ec1c4a06258ab0b3384673fa84b0b762d523d692392d5e8"
      },
      "downloads": -1,
      "filename": "xml2df-0.14.tar.gz",
      "has_sig": false,
      "md5_digest": "42ab1cf6c5c6315b6e6a90f7f811db1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4160,
      "upload_time": "2020-12-16T21:09:55",
      "upload_time_iso_8601": "2020-12-16T21:09:55.670291Z",
      "url": "https://files.pythonhosted.org/packages/b7/7b/d1a89d05451f0c100ea0b8d538253082acbaaa8a53f07d851ac7efbd6a0a/xml2df-0.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}