{
  "info": {
    "author": "Thomas Roder",
    "author_email": "roder.thomas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "## Credit\n\nThis is heavily based on the work of [painyeph](https://github.com/painyeph/FishersExactTest).\n\nI basically added numba compilation and easier installation. Nevertheless, it makes a big difference speed-wise!\n\n## Installation\n\n```bash\npip install git+https://github.com/MrTomRod/fast-fisher\n\n# or\n\npip install fast-fisher  # from https://pypi.org/project/fast-fisher/\n```\n\n## Usage\n\n**Recommended usage:**\n\n```python\nfrom fast_fisher import fast_fisher_exact, odds_ratio\n\na, b, c, d = 15, 32, 25, 46\n\npvalue = fast_fisher_exact(a, b, c, d, alternative='two-sided')\nodds = odds_ratio(a, b, c, d)\n```\n\n**Alternative usages:**\n\n`fast_fisher_exact_compatibility` has the same syntax as `scipy.stats.fisher_exact`.\n\n```python\nfrom math import isclose\nfrom scipy.stats import fisher_exact\nfrom fast_fisher import fast_fisher_exact_compatibility\n\ntable = [[15, 32], [25, 46]]\n\nfor alternative in ['two-sided', 'less', 'greater']:\n    odds_s, pval_s = fisher_exact(table, alternative)\n    odds_f, pval_f = fast_fisher_exact_compatibility(table, alternative)\n    assert odds_s == odds_f\n    assert isclose(pval_s, pval_f)  # not always true!\n```\n\n### Advanced Usage\n\n| test type    | p-value                                                | -log( p-value )                                              | -log10( p-value )                                                  |\n|--------------|--------------------------------------------------------|--------------------------------------------------------------|--------------------------------------------------------------------|\n| left-tailed  | `test1l(a, b, c, d)` or `test2l(a, a+b, a+c, a+b+c+d)` | `mlnTest1l(a, b, c, d)` or `mlnTest2l(a, a+b, a+c, a+b+c+d)` | `mlog10Test1l(a, b, c, d)` or `mlog10Test2l(a, a+b, a+c, a+b+c+d)` |\n| right-tailed | `test1r(a, b, c, d)` or `test2r(a, a+b, a+c, a+b+c+d)` | `mlnTest1r(a, b, c, d)` or `mlnTest2r(a, a+b, a+c, a+b+c+d)` | `mlog10Test1r(a, b, c, d)` or `mlog10Test2r(a, a+b, a+c, a+b+c+d)` |\n| two-tailed   | `test1t(a, b, c, d)` or `test2t(a, a+b, a+c, a+b+c+d)` | `mlnTest1t(a, b, c, d)` or `mlnTest2t(a, a+b, a+c, a+b+c+d)` | `mlog10Test1t(a, b, c, d)` or `mlog10Test2t(a, a+b, a+c, a+b+c+d)` |\n| all          | `test1(a, b, c, d)` or `test2(a, a+b, a+c, a+b+c+d)`   | `mlnTest1(a, b, c, d)` or `mlnTest2(a, a+b, a+c, a+b+c+d)`   | `mlog10Test1(a, b, c, d)` or `mlog10Test2(a, a+b, a+c, a+b+c+d)`   |\n\n## Speed\n\nComparison of \n- `scipy.stats.fisher_exact` ([scipy docs](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html))\n- `fast_fisher.fast_fisher_python` (this library)\n- `fast_fisher.fast_fisher_compiled` (this library, compiled using numba)\n- `fast_fisher.fast_fisher_cpython` (this library, compiled using cython)\n- `fisher.pvalue` (from [brentp/fishers_exact_test](https://github.com/brentp/fishers_exact_test))\n\nSee `benchmark.py`.\n\n|      a |      b |      c |      d |    test type |     scipy |  f_python | f_compiled |   f_cython |     brentp |\n|-------:|-------:|-------:|-------:|-------------:|----------:|----------:|-----------:|-----------:|-----------:|\n|      8 |      2 |      1 |      5 |  left-tailed |    130 us |      3 us |       0 us |       0 us |       0 us |\n|      8 |      2 |      1 |      5 | right-tailed |    124 us |      3 us |       0 us |       0 us |       0 us |\n|      8 |      2 |      1 |      5 |   two-tailed |    895 us |      6 us |       1 us |       1 us |       0 us |\n|     10 |    100 |     10 |    100 |  left-tailed |    143 us |     10 us |       1 us |       1 us |       0 us |\n|     10 |    100 |     10 |    100 | right-tailed |    147 us |     12 us |       1 us |       1 us |       1 us |\n|     10 |    100 |     10 |    100 |   two-tailed |    198 us |     18 us |       2 us |       2 us |       1 us |\n|     10 |   1000 |  10000 | 100000 |  left-tailed |    139 us |     11 us |       1 us |       1 us |     110 us |\n|    100 |   1000 |  10000 | 100000 | right-tailed |    238 us |     78 us |       6 us |       6 us |     142 us |\n|    100 |   1000 |  10000 | 100000 |   two-tailed |    186 us |    137 us |      11 us |      11 us |     136 us |\n|  10000 |    100 |   1000 | 100000 |  left-tailed |   1010 us |      8 us |       1 us |       1 us |    1486 us |\n|  10000 |    100 |   1000 | 100000 | right-tailed |    150 us |      6 us |       1 us |       1 us |    1495 us |\n|  10000 |    100 |   1000 | 100000 |   two-tailed |  63192 us |    768 us |      55 us |      58 us |    1459 us |\n|  10000 |  10000 |  10000 |  10000 |  left-tailed |    967 us |    338 us |      27 us |      28 us |    2808 us |\n|  10000 |  10000 |  10000 |  10000 | right-tailed |    969 us |    344 us |      27 us |      28 us |    2820 us |\n|  10000 |  10000 |  10000 |  10000 |   two-tailed |    177 us |    689 us |      54 us |      61 us |    2952 us |\n\nWhile numba seems be marginally faster than the cython, cython is a much better build dependency. Therefore, by default, \nonly the cython version is installed.\n\n## Precision\n\n```python\nfrom numpy import log10, isinf\nfrom scipy.stats import fisher_exact\nfrom fast_fisher import fast_fisher\n\nscipy_fisher = lambda t: fisher_exact([[t[0], t[1]], [t[2], t[3]]])[1]\n\nprint(f\"{'contingency table':<30} {'fast -log10(pvalue)':<21} {'scipy -log10(pvalue)'}\")\nfor exponent in range(0, 16):\n    table = (100, 1, 10, 10 ** exponent)\n    fast_mlog = fast_fisher.mlog10Test1t(*table)\n    scipy_mlog = -log10(scipy_fisher(table))\n\n    if isinf(scipy_mlog):\n        scipy_mlog = 'failed to compute'\n\n    print(f\"{str(table):<30} {fast_mlog:<21} {scipy_mlog}\")\n```\n\n```text\ncontingency table              fast -log10(pvalue)   scipy -log10(pvalue)\n(100, 1, 10, 1)                0.7268124553699258    0.7268124553698625\n(100, 1, 10, 10)               7.831294376070296     7.831294376070258\n(100, 1, 10, 100)              46.49556750272154     46.4955675027216\n(100, 1, 10, 1000)             128.93472935802276    128.93472935802373\n(100, 1, 10, 10000)            226.62104816785       226.62104816785057\n(100, 1, 10, 100000)           326.3812661048001     failed to compute\n(100, 1, 10, 1000000)          426.35719912501844    failed to compute\n(100, 1, 10, 10000000)         526.3547915160074     failed to compute\n(100, 1, 10, 100000000)        626.3545507841483     failed to compute\n(100, 1, 10, 1000000000)       726.3545273226812     failed to compute\n(100, 1, 10, 10000000000)      826.3545146294285     failed to compute\n(100, 1, 10, 100000000000)     926.354158998833      failed to compute\n(100, 1, 10, 1000000000000)    1026.3583095975994    failed to compute\n(100, 1, 10, 10000000000000)   1126.3427388160835    failed to compute\n(100, 1, 10, 100000000000000)  1226.447616894783     failed to compute\n<input>:11: RuntimeWarning: divide by zero encountered in log10\nTraceback (most recent call last):\n  File \"/usr/lib64/python3.10/code.py\", line 90, in runcode\n    exec(code, self.locals)\n  File \"<input>\", line 10, in <module>\n  File \"fast_fisher/fast_fisher_cython.pyx\", line 236, in fast_fisher.fast_fisher_cython.mlog10Test1t\n    cpdef inline double mlog10Test1t(long long a, long long b, long long c, long long d) except *:\n  File \"fast_fisher/fast_fisher_cython.pyx\", line 237, in fast_fisher.fast_fisher_cython.mlog10Test1t\n    return mlnTest2t(a, a + b, a + c, a + b + c + d) / LN10\n  File \"fast_fisher/fast_fisher_cython.pyx\", line 195, in fast_fisher.fast_fisher_cython.mlnTest2t\n    raise OverflowError('the grand total of contingency table is too large')\nOverflowError: the grand total of contingency table is too large\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrtomrod/fast_fisher",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fast-fisher",
    "package_url": "https://pypi.org/project/fast-fisher/",
    "platform": "",
    "project_url": "https://pypi.org/project/fast-fisher/",
    "project_urls": {
      "Homepage": "https://github.com/mrtomrod/fast_fisher"
    },
    "release_url": "https://pypi.org/project/fast-fisher/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Calculate Fisher's exact test very quickly.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12676698,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6987339842d3b5f41a0a576aab225665ee9d9fe79e03af7fde9d322d8bf3b84",
          "md5": "2c29625f67082bf8c1d94e798839ab27",
          "sha256": "33f53db6a284593590b89ca959bcc30e61c057c6cf639796829905fddca785a4"
        },
        "downloads": -1,
        "filename": "fast_fisher-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c29625f67082bf8c1d94e798839ab27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6899,
        "upload_time": "2022-01-18T11:28:59",
        "upload_time_iso_8601": "2022-01-18T11:28:59.634855Z",
        "url": "https://files.pythonhosted.org/packages/a6/98/7339842d3b5f41a0a576aab225665ee9d9fe79e03af7fde9d322d8bf3b84/fast_fisher-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb67901849443952375b43eec9ec45e330b85e7dd12982f295c54f1065aeaf91",
          "md5": "b025934bd60d7c66cf273c59f8073dd5",
          "sha256": "9d3c70a0cf1f1d5023eeb9b317584a6a85414624d965e5bdc4abdd6253e3edc0"
        },
        "downloads": -1,
        "filename": "fast_fisher-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b025934bd60d7c66cf273c59f8073dd5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8009,
        "upload_time": "2022-01-19T13:59:04",
        "upload_time_iso_8601": "2022-01-19T13:59:04.710646Z",
        "url": "https://files.pythonhosted.org/packages/cb/67/901849443952375b43eec9ec45e330b85e7dd12982f295c54f1065aeaf91/fast_fisher-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c07536815bf66c212d256d8290903ca367e9d9afed7ef582b1e84ab2a837d2c",
          "md5": "6cb47525dcded29dc6ac49db93ac834e",
          "sha256": "8722c6722abebf8fef9031707c76851876c6909be43f327e5e3261269a6585de"
        },
        "downloads": -1,
        "filename": "fast_fisher-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6cb47525dcded29dc6ac49db93ac834e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49620,
        "upload_time": "2022-01-24T14:51:22",
        "upload_time_iso_8601": "2022-01-24T14:51:22.730364Z",
        "url": "https://files.pythonhosted.org/packages/0c/07/536815bf66c212d256d8290903ca367e9d9afed7ef582b1e84ab2a837d2c/fast_fisher-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32860d98d38da6c8272c20423b657126b154af321df4352c6388b1ea3217a551",
          "md5": "cf3fde3755e55bbdf1cf784b4e68c553",
          "sha256": "63722ad813d420b003040fc3daf128dde66c2b4364b74fc348cfaca107e28ebb"
        },
        "downloads": -1,
        "filename": "fast_fisher-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cf3fde3755e55bbdf1cf784b4e68c553",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50447,
        "upload_time": "2022-01-24T14:54:39",
        "upload_time_iso_8601": "2022-01-24T14:54:39.101142Z",
        "url": "https://files.pythonhosted.org/packages/32/86/0d98d38da6c8272c20423b657126b154af321df4352c6388b1ea3217a551/fast_fisher-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32860d98d38da6c8272c20423b657126b154af321df4352c6388b1ea3217a551",
        "md5": "cf3fde3755e55bbdf1cf784b4e68c553",
        "sha256": "63722ad813d420b003040fc3daf128dde66c2b4364b74fc348cfaca107e28ebb"
      },
      "downloads": -1,
      "filename": "fast_fisher-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "cf3fde3755e55bbdf1cf784b4e68c553",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50447,
      "upload_time": "2022-01-24T14:54:39",
      "upload_time_iso_8601": "2022-01-24T14:54:39.101142Z",
      "url": "https://files.pythonhosted.org/packages/32/86/0d98d38da6c8272c20423b657126b154af321df4352c6388b1ea3217a551/fast_fisher-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}