{
  "info": {
    "author": "vladislavburch",
    "author_email": "vladislavburch17@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Programming Language :: Python :: 3"
    ],
    "description": "#\n\n.. raw:: html\n\n   <p align=\"center\">\n\nListBot\n\n.. raw:: html\n\n   <p align=\"center\">\n\nA simple bot for Telegram.\n\n|Build Status| |PyPI| |Codacy grade|\n\n-  `Скачать и установить <#скачать>`__\n-  `Цель <#цель>`__\n-  `Основные определения <#основные-определения>`__\n-  `Введение <#введение>`__\n-  `Требования к проекту <#требования-к-проекту>`__\n-  `Проектирование системы <#проектирование-системы>`__\n\n   -  `Технические аспекты <#технические-аспекты>`__\n   -  `Логические аспекты <#логические-аспекты>`__\n\n-  `Выбор технологий <#выбор-технологий>`__\n\n   -  `Выбор языка программирования <#выбор-языка-программирования>`__\n   -  `Выбор используемых библиотек <#выбор-используемых-библиотек>`__\n\n-  `Описание технический решений <#описание-технических-решений>`__\n-  `Заключение <#заключение>`__\n-  `Список используемых источников <#список-используемых-источников>`__\n\nСкачать\n-------\n\n Есть три варианта установки данной программы: 1. Просто перейти по\n`ссылке <https://telegram.me/MDFileBot>`__ и начать общение с ботом.\nЭтот вариант для тех, кто хочет просто пользоваться ботом 2. С помощью\n``pip``\n\n::\n\n    $ pip install ListBot\n\n3. С помощью ``git``\n\n::\n\n    $ git clone https://vladislavburch/listbot.git\n    $ cd listbot\n    $ python setup.py install\n\nЦель\n----\n\n Главной целью курсового проекта является реализация telegram-бота для\nполучения с помощью него расписания занятий. Так же целью явлется\nнаучиться создавать и документировать ботов для telegram, написанных на\nязыке программирования python. ## Основные определения *Telegram* —\nбесплатный кроссплатформенный мессенджер для смартфонов и других\nустройств, позволяющий обмениваться текстовыми сообщениями и\nмедиафайлами различных форматов.\n\n*Бот* — специальная программа, выполняющая автоматически и/или по\nзаданному расписанию какие-либо действия через интерфейсы,\nпредназначенные для людей.\n\n*Unit-тесты* - процесс в программировании, который позволяет проверить\nисходный код на корректность, а также дает возможность разработчику\nудостовериться в том, что внесенные изменения не привели к появлению\nошибок в уже протестированных местах программы. ## Введение Сейчас,\nкогда  IT-технологии развиваются с невообразимой скоростью, скорость\nжизни тоже изменилась. Необходимость быстрого и удобного программного\nобеспечения, позволяющего производить рутинные действия вместо или\nвместе с человеком чувствуется как никогда. Боты решают проблему\nоптимизации времени. Маленькие программы, которые выигрывают *пару\nминут* и несколько байт памяти приобрели ценность.\n\nКак одно из рутинных занятий можно выделить проверку расписания. Часто\nстуденты для этого заходят на сайт МГТУ или фотографируют его в начале\nсеместра. Это неудобно по нескольким причинам: во первых, загрузка\nстраниц в интернете *съедает* много трафика, а фотографии память на\nтелефоне. Во-вторых, прогрузка страниц - это долго, так же как и поиск\nфотографии в телефоне, особенно фотографии, сделанной в начале семестра.\nListBot ест меньше трафика и памяти, к тому же он значительно быстрее.\n\nСуществует несколько вариантов просмотра расписания, но самым популярным\nявляется картинка. Но есть несколько минусов именно этого способа\nпросмотра: использование оперативной памяти телефона и длительность\nзагрузки. ListBot Отправляет расписание списком, иначе говоря текстовым\nсообщением, что позволяет не засорять память, выигрывая во времени. ##\nТребования к проекту 1. [x] Простой интерфейс Причина: облегчение работы\nс пользователем 2. [x] Наличие документации Причина: наличие у\nпользователя возможности узнать всю информацию о программе, а так же\nвозможность обратной связи с пользователем 3. [x] Наличие нескольких\nвариантов скачивания и/или установки Причина: ориентация на\nпользователей, использующих разное ПО и обладающих разным уровнем знаний\nв области IT. ## Проектирование системы Схему работы telegram-боты можно\nразделить на две части: 1. Технические аспекты 2. Логические аспекты ###\nТехнические аспекты Здесь стоит поговорить о том, как именно бот\nреализует взаимодействие с интернетом, а в частности с telegram.\nОсновным для работы бота является метод **get_updates()**.\n\nПри загрузке страницы https://api.telegram.org/botToken/getupdates мы\nсталкиваемся с тем, как бот реагирует на какие-то обновления. То есть\nесли прислать боту сообщение, на странице метода **get_updates()** это\nотобразится.\n\nПринцип работы бота прост, он смотрит на эту страницу и как-то реагирует\nна полученное изменение.\n\nТеперь подробнее: все изменения на странице метода отображаются в виде\n*json-объектов*. Подробнее о них вы можете найти\n`тут <https://ru.wikipedia.org/wiki/JSON>`__. Для того, чтобы\nзапрограммировать бота на определленую реакцию, вызываемую определенным\nсообщением необходимо это сообщение *вытащить* из json-объекта. Есть\nнесколько способов это сделать: 1. Традиционным образом То есть взять\nвсе json-объекты ``all_updates = bot.get_updates()`` А затем выделить из\nних последний ``last_update = all_updates[len(all_updates)-1]`` Неудобно\nи громоздко использовать модуль ``requests`` или ``re``, поэтому в своей\nпрограмме я пользуюсь API для telegram-ботов, которое называется\ntelebot. Это позволяет сделать простые элементы бота более компактными.\nAPI устанавливается как модуль для python, об этом написано в\nприложении.\n\nИтак, наш вариант выглядит так:\n``@bot.message_handler(content_types=['text']) def handle_text(message):     if (message.text == 'Hi') or (message.text == 'Hello'):         answer = constants.content[0]         bot.send_message(message.chat.id, answer)``\nЗдесь написано, что если поле ``text`` json-объекта последнего\nобновления содержит строку *Hi* или *Hello*, то бот отправляет\nпользователю, который прислал это сообщение ответ. Сам ответ находится в\nотдельном файле: ``~/listbot/import/constants.py`` Для того, чтобы\nотправить сообщение бот использует метод **send_message(‘CHAT_ID’,string\ns)** И этот метод представляется в виде ссылки\nhttps://api.telegram.org/botToken/sendmessage с дополнительными\nпараметрами ``CHAT_ID`` и ``string s``, то есть куда (в какой чат) и что\nотправить.\n\nЛогические аспекты\n~~~~~~~~~~~~~~~~~~\n\n Здесь речь пойдет о том, каким образом бот отвечает на определенные\nкоманды и запросы: Команды - это сообщения, которые вы пишете боту,\nначинающиеся со знака ``/``. Бот реагирует на 6 команд:\n\n``/start``\n\n``/list``\n\n``/timetable``\n\n``/download``\n\n``/help``\n\n``/site``\n\nПри распознавании команды ``/start`` бот здоровается с пользователем и\nпредлагает либо загрузить расписание группы ИУ8-33, либо оставить это\nполе свободным.\n\nПри распознавании команды ``/list`` бот выводит полный список команд, на\nкоторые он умеет отвечать.\n\nПри распознавании команды ``/timetable`` бот выводит расписание,\nзагруженное на данный момент.\n\nПри распознавании команды ``/download`` бот загружает расписание ИУ8-33\nс сайта МГТУ им. Баумана\n\nПри разпознавании команды ``/help`` бот предлагает пользователю перейти\nна сайт `GitHub <https://github.com/vladislavburch/listbot>`__ для\nполучения большего количества информации о принципе работы бота.\n\nПри распознавании команды ``/site`` бот предлагает пользователю перейти\nна сайт МГТУ, чтобы посмотреть расписание\n\nНо, как мы знаем, бот умеет реагировать не только на команды, но и на\nобычные текстовые запросы, о чем он нам говорит ещё в самом начале\nработы с ним.\n\nЗдесь все проще:\n\n*При получении сообщения с днем недели, бот присылает расписание занятий\nна этот день.*\n\nДиалог с пользователем бот реализует через кнопки\n(``telebot.types.KeyboardButton``), что упрощает регистрацию следующих\nшагов пользователя.\n\nВыбор технологий\n----------------\n\n ### Выбор языка программирования Для курсового проекта при выборе языка\nпрограммирования было произведено сравнение между двумя языками\nпрограммирования: *“Python”* и *“C++”*.\n\n**“Python”** - высокоуровневый интерпретируемый язык программирования,\nпреимущества которого заключаются в следующих характеристиках: -\nдинамическая типизация - автоматическое управление памятью - механизм\nобработки исключений - простой синтаксис кода - большое количество\nсторонних библиотек Отрицательной чертой данного языка программирования\nявляется его *производительность*.\n\n**“C++”** - компилируемый, сильно типизированный язык программирования,\nплюсы которого проявляются в нижеперечисленных характеристиках: -\nвысокая производительность - возможность работы на низком уровне с\nпамятью, адресами, портами. - кросс-платформенность Из минусов стоит\nотметить: - строгую типизацию сложность привязывания библиотек.\n\nДля данного курсового проекта необходимо, чтобы для языка\nпрограммирования было предоставлено Telegram API для написания\nтелеграмм-бота и его функционала. Помимо Telegram API, должна\nприсутствовать библиотека для работы с базой данных. А также следует\nотметить, что к проекту нет требований к производительности. Именно\nпоэтому для данного курсового проекта был выбран язык программирования –\n«Python».\n\nВыбор используемых библиотек\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n Список библиотек, использованных в проекте 1. telebot 2. unittest 3. os\n## Описание технических решений\n\nРабота проводилась в среде разработки PyCharm. Модули там подключаются\nпросто, через ``Настройки`` -> ``Интерпретатор python`` и т. д.\nТрудности поначалу возникли с интерпретатором: ``default`` python на\nмаке версии меньше 3. Я установил новый и согласовал его с PyCharm.\n\n*Вторая трудность* возникла при выявлении багов у бота. Как найти и\nустранить все, если брать во внимание не только ошибки кода, но и\nлогические и графические ошибки? Выход нашелся не сразу. Я запустил\nглобальное beta-тестирование, в котором принимали участие мои друзья,\nзнакомые, одногруппники и т. д.\n\nРеализовать beta-тестирование с отслеживаемыми результатами оказалось\nлегко, стоило только написать процедуру:\n\n::\n\n    def log(message, answer):\n        print('\\n------')\n        from datetime import datetime\n        print(datetime.now())\n        print(\"Message from {0} {1}. (id = {2})\\nText - {3}\\nChat_id {4} \".format(message.from_user.first_name,\n                                                                       message.from_user.last_name,\n                                                                       str(message.from_user.id),\n                                                                       message.text,\n                                                                       str(message.chat.id)))\n        print(\"Answer - \", answer)\n\nА затем вставить её в бота:\n\n::\n\n    ....................................\n    @bot.message_handler(content_types=['text'])\n    def handle_text(message):\n        if (message.text == 'Hi') or (message.text == 'Hello'):\n            answer = constants.content[0]\n            bot.send_message(message.chat.id, answer)\n            log(message, answer)\n        elif (message.text == 'Monday') or message.text == 'monday' or message.text == 'mon' or message.text == 'Mon' or message.text == 'Понедельник':\n            answer = constants.content[1]\n            bot.send_message(message.chat.id, answer)\n            log(message, answer)\n      .....................................\n\nЧто давало мне результаты выполнения команд ботом, и избавляло\nbeta-тестеров от copy-past’a мне в сообщения.\n\n**NOTA BENE** Участники были предупреждены, что я буду видеть все их\nзапросы.\n\n*Третья возникшая проблема* связана с тестами: осталось так и не\nреализовано автоматизированное тестирование поведения бота. Трудности\nвозникли из-за отсутствия в ``Travis-CI`` модуля telebot.\n\nЗаключение\n----------\n\nВ ходе работы над курсовым проектом был реализован бот для telegram,\nиспользованы такие ресурсы как ``GitHub``,\\ ``Travis-CI``, ``PyPI``,\n``telebotApi``, ``Codacy``. Было получено много знаний о принципе работы\nтаких приложений, о документации и тестировании.\n\nСписок использыемых источников\n------------------------------\n\n`TelegramBots API documentation <https://core.telegram.org/bots/api>`__\n`CheeseShop\nTutorial <https://wiki.python.org/moin/CheeseShopTutorial>`__\n`Хабрахабр <https://habrahabr.ru/post/316666/>`__\n`Telebot <https://github.com/eternnoir/pyTelegramBotAPI>`__\n\n.. |Build Status| image:: https://travis-ci.org/VladislavBurch/ListBot.svg?branch=master\n   :target: https://travis-ci.org/VladislavBurch/ListBot\n.. |PyPI| image:: https://img.shields.io/pypi/v/nine.svg\n   :target: https://pypi.python.org/pypi/ListBot/\n.. |Codacy grade| image:: https://img.shields.io/codacy/grade/e27821fb6289410b8f58338c7e0bc686.svg\n   :target: https://www.codacy.com/app/VladislavBurch/ListBot/dashboard",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vladislavburch/ListBot",
    "keywords": "telegram bot",
    "license": "GPL2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ListBot",
    "package_url": "https://pypi.org/project/ListBot/",
    "platform": "",
    "project_url": "https://pypi.org/project/ListBot/",
    "project_urls": {
      "Homepage": "https://github.com/vladislavburch/ListBot"
    },
    "release_url": "https://pypi.org/project/ListBot/1.0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Telegram bot",
    "version": "1.0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3495095,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0215b1f5f3ab89d93c44b299e356c8b8583bfbd69fe6ab5e87b0b2600f398be",
          "md5": "995ff9ff649a66c24ea033e19a5a5747",
          "sha256": "52f353fa737812dd6df493e70b9d1955b92793cf96937aa3c57c4fa43dd6cd95"
        },
        "downloads": -1,
        "filename": "ListBot-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "995ff9ff649a66c24ea033e19a5a5747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1229,
        "upload_time": "2017-12-22T22:52:06",
        "upload_time_iso_8601": "2017-12-22T22:52:06.518631Z",
        "url": "https://files.pythonhosted.org/packages/d0/21/5b1f5f3ab89d93c44b299e356c8b8583bfbd69fe6ab5e87b0b2600f398be/ListBot-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d17d85fb10f47d6b9fc3ecfc5ea4ad504bb9bcd55e72b65a66523b0cc1b30a65",
          "md5": "d9d4cb6b40d6da7b90d149674ccd129a",
          "sha256": "91591ac944bcfefe4292d0e8f455b4908bfa26094e9da73ce82e9133418242b5"
        },
        "downloads": -1,
        "filename": "ListBot-1.0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d9d4cb6b40d6da7b90d149674ccd129a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8627,
        "upload_time": "2018-01-16T19:46:13",
        "upload_time_iso_8601": "2018-01-16T19:46:13.174820Z",
        "url": "https://files.pythonhosted.org/packages/d1/7d/85fb10f47d6b9fc3ecfc5ea4ad504bb9bcd55e72b65a66523b0cc1b30a65/ListBot-1.0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d17d85fb10f47d6b9fc3ecfc5ea4ad504bb9bcd55e72b65a66523b0cc1b30a65",
        "md5": "d9d4cb6b40d6da7b90d149674ccd129a",
        "sha256": "91591ac944bcfefe4292d0e8f455b4908bfa26094e9da73ce82e9133418242b5"
      },
      "downloads": -1,
      "filename": "ListBot-1.0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d9d4cb6b40d6da7b90d149674ccd129a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8627,
      "upload_time": "2018-01-16T19:46:13",
      "upload_time_iso_8601": "2018-01-16T19:46:13.174820Z",
      "url": "https://files.pythonhosted.org/packages/d1/7d/85fb10f47d6b9fc3ecfc5ea4ad504bb9bcd55e72b65a66523b0cc1b30a65/ListBot-1.0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}