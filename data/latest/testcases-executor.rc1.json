{
  "info": {
    "author": "JBthePenguin",
    "author_email": "jbthepenguin@netcourrier.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Build Status](https://travis-ci.com/JBthePenguin/TestCasesExecutor.svg?branch=master)](https://travis-ci.com/JBthePenguin/TestCasesExecutor) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/3a8b61108c5c4b6188ffa3396433ced9)](https://www.codacy.com/manual/JBthePenguin/TestCasesExecutor?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=JBthePenguin/TestCasesExecutor&amp;utm_campaign=Badge_Grade) ![GitHub top language](https://img.shields.io/github/languages/top/JBthePenguin/TestCasesExecutor) ![GitHub repo size](https://img.shields.io/github/repo-size/JBthePenguin/TestCasesExecutor) [![python](https://img.shields.io/badge/python-3.8-yellow.svg)](https://www.python.org/downloads/) [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-black.svg)](https://www.gnu.org/licenses/gpl-3.0)\n# TestCasesExecutor\nExecute configured groups of TestCases (subclasses of [unittest.TestCase](https://docs.python.org/3.8/library/unittest.html#unittest.TestCase)), display human readable result in terminal, ordered by group and testcase, and generate a html file report.\n\n## Install\n```sh\n$ pip install testcases_executor\n```\nThis also install [Jinja2](https://palletsprojects.com/p/jinja/) used to generate html report.\n\n## Config\n![Structure example](https://raw.githubusercontent.com/JBthePenguin/TestCasesExecutor/master/screenshots/structure.png)\n\nCreate a file named ***testcases.py*** in the root directory of your project.  \nInside it, import yours *TestCases* and make a list (or tuple) named **groups** that is made up of tuples, each representing a *group*. For example:\n``` python\nfrom your_app.test_script import TCaseOne, TCaseTwo, TCaseThree, TCaseFour\ngroups = [  # or (\n    ('Group one', 'one', [TCaseThree, TCaseTwo]),  # or (TCaseThree, TCaseTwo)),\n    ('Group two', 'two', [TCaseOne, TCaseFour]),  # or (TCaseOne, TCaseFour)),\n]  # or )\n```\n\n### Constraints\n*   **groups** must be a *list* or a *tuple*.\n\n*   **groups's item** (group's representation) must be a *tuple*.\n\n*   **each tuple** must contain *3 items*:\n    *   **group's name** must be a *string*.\n    *   **argument's name** used to run all group's testcases *string without space*.\n    *   **[unittest.TestCase](https://docs.python.org/3.8/library/unittest.html#unittest.TestCase) subclasses** must be a *list* or a *tuple*.\n\n*   **group and argument names**, **[unittest.TestCase](https://docs.python.org/3.8/library/unittest.html#unittest.TestCase) subclass** must *used once*.\n\n## Usage\n```sh\n$ python -m testcases_executor\n```\nThis run **all tests**, display **result in terminal** before generate, in the root directory, the **html report file** named *tc_executor_report.html*. It's possible to customize the command with following availabe arguments.\n### Available arguments\n*   Options\n    *   **-h, --help**: *display help message.*\n    *   **-o, --open**: *open html report in browser after test.*\n\n*   Tests selection\n    *   **-group_argument_name**: run all *group's testcases's tests*.\n    *   **-TestCaseName**:(without parameter) run all *testcase's tests*.\n    *   **-TestCaseName**:(with test's names in parameter) run *desired tests*.\n\nSome examples:\n```sh\n$ python -m testcases_executor -two\n$ python -m testcases_executor -one -TCaseFour -o\n$ python -m testcases_executor -TCaseTwo test_one -TCaseOne test_three\n...\n```\n\n## Result's screenshots\n### Terminal\n![Terminal group one](https://raw.githubusercontent.com/JBthePenguin/TestCasesExecutor/master/screenshots/terminal_one.png)\n![Terminal group two](https://raw.githubusercontent.com/JBthePenguin/TestCasesExecutor/master/screenshots/terminal_two.png)\n![Terminal errors](https://raw.githubusercontent.com/JBthePenguin/TestCasesExecutor/master/screenshots/terminal_three.png)\n### Html Report\nIt use [Bootstrap4](https://getbootstrap.com/), [jQuery](https://jquery.com/) and [Fontawesome icons](https://fontawesome.com/v4.7.0/icons/) (via [stackpath cdn](https://www.stackpath.com/open-source/)).\n\n![Html report](https://raw.githubusercontent.com/JBthePenguin/TestCasesExecutor/master/screenshots/html_report.png)\n\n*Click on table's lines to see tests's infos.*\n\n![Html errors](https://raw.githubusercontent.com/JBthePenguin/TestCasesExecutor/master/screenshots/html_errors.png)\n\n## Test\nFor the same reasons that meeting your future self would cause a spacio temporal shock, testing a tester using this same tester would cause a spacio testorial shock. So above all, don't.  \nRun **testcases_executor.tests**, using [unittest](https://docs.python.org/3.8/library/unittest.html#module-unittest):\n```sh\n$ python -m unittest testcases_executor.tests -v\n```\n:+1: *[HtmlTestRunner](https://github.com/oldani/HtmlTestRunner) was a great inspiration, so thank you for that.*\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JBthePenguin/TestCasesExecutor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "testcases-executor",
    "package_url": "https://pypi.org/project/testcases-executor/",
    "platform": "",
    "project_url": "https://pypi.org/project/testcases-executor/",
    "project_urls": {
      "Homepage": "https://github.com/JBthePenguin/TestCasesExecutor"
    },
    "release_url": "https://pypi.org/project/testcases-executor/1.0.0/",
    "requires_dist": [
      "jinja2"
    ],
    "requires_python": ">=3.8",
    "summary": "Executor of unittest.TestCase subclasses ordered by groups.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7443081,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e83b6830d01023b120a4bd18dd30fae8f790f9db6ad5967be4a24947e3db027",
          "md5": "1c3c96c095a95483151fbfe324ea7b3c",
          "sha256": "b56ba43500ead9ee94acd41543b9a44c328198d08e0970d1b26599ffdf3ca316"
        },
        "downloads": -1,
        "filename": "testcases_executor-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c3c96c095a95483151fbfe324ea7b3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 51208,
        "upload_time": "2020-06-10T12:56:30",
        "upload_time_iso_8601": "2020-06-10T12:56:30.894935Z",
        "url": "https://files.pythonhosted.org/packages/3e/83/b6830d01023b120a4bd18dd30fae8f790f9db6ad5967be4a24947e3db027/testcases_executor-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c66a36d9647c396349ad38827174ab309d598344a3e1ebdf78886686c12f2c77",
          "md5": "c4f5e6265ba26c0c21c5036b4fac16c7",
          "sha256": "b069e80727bad3e9ebae6486f80b88f7e7a779ae5dee222117d16665894391ff"
        },
        "downloads": -1,
        "filename": "testcases_executor-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4f5e6265ba26c0c21c5036b4fac16c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29064,
        "upload_time": "2020-06-10T12:56:33",
        "upload_time_iso_8601": "2020-06-10T12:56:33.323333Z",
        "url": "https://files.pythonhosted.org/packages/c6/6a/36d9647c396349ad38827174ab309d598344a3e1ebdf78886686c12f2c77/testcases_executor-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e83b6830d01023b120a4bd18dd30fae8f790f9db6ad5967be4a24947e3db027",
        "md5": "1c3c96c095a95483151fbfe324ea7b3c",
        "sha256": "b56ba43500ead9ee94acd41543b9a44c328198d08e0970d1b26599ffdf3ca316"
      },
      "downloads": -1,
      "filename": "testcases_executor-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c3c96c095a95483151fbfe324ea7b3c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 51208,
      "upload_time": "2020-06-10T12:56:30",
      "upload_time_iso_8601": "2020-06-10T12:56:30.894935Z",
      "url": "https://files.pythonhosted.org/packages/3e/83/b6830d01023b120a4bd18dd30fae8f790f9db6ad5967be4a24947e3db027/testcases_executor-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c66a36d9647c396349ad38827174ab309d598344a3e1ebdf78886686c12f2c77",
        "md5": "c4f5e6265ba26c0c21c5036b4fac16c7",
        "sha256": "b069e80727bad3e9ebae6486f80b88f7e7a779ae5dee222117d16665894391ff"
      },
      "downloads": -1,
      "filename": "testcases_executor-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c4f5e6265ba26c0c21c5036b4fac16c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 29064,
      "upload_time": "2020-06-10T12:56:33",
      "upload_time_iso_8601": "2020-06-10T12:56:33.323333Z",
      "url": "https://files.pythonhosted.org/packages/c6/6a/36d9647c396349ad38827174ab309d598344a3e1ebdf78886686c12f2c77/testcases_executor-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}