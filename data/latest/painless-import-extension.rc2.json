{
  "info": {
    "author": "thautwarm",
    "author_email": "twshere@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "## PIE\n\n[![PyPI version](https://img.shields.io/pypi/v/painless-import-extension.svg)](https://pypi.org/project/painless-import-extension)\n[![Build Status](https://travis-ci.com/thautwarm/PIE.svg?branch=master)](https://travis-ci.com/thautwarm/PIE)\n[![codecov](https://codecov.io/gh/thautwarm/PIE/branch/master/graph/badge.svg)](https://codecov.io/gh/thautwarm/PIE)\n[![MIT License](https://img.shields.io/badge/license-MIT-Green.svg?style=flat)](https://github.com/thautwarm/EBNFParser/blob/boating-new/LICENSE)\n\n\n## Installation & Documentation\n\n`pip install painless-import-extension`.\n\nBasically there's only one thing exported from package `pie`:\n\n```python\nfrom pie import LoaderForBetterLife\n```\n\nIt's an abstract generic type. When you want to load a file to type `A`,\nwrite such a loader:\n\n```python\nclass ALoader(LoaderForBetterLife[A]):\n    pass\n```\n\n**IDEs and static type checkers will help you to finish the following steps of implementing your expecting loader, and this is what I'd call a documentation here.**\n\n\n### Motivation\n\nFuck it, I must say something at first.\n\nOnce you use the Python import hooks to support files with extensions other than '.py',\nyou will feel extremely disgusting, and if you're expert enough to use Python internal stuffs\nto track the implementation of `PathFinder.find_spec`(usually `sys.meta_path[2].find_spec` or  `sys.meta_path[1].find_spec`),\nthe awfulness of the module finding mechanism will lead you to a strong suspicion of the reliability of Python `import` statements,\nand finally, likely to bring about the crash of one's faith in writing reliable codes.\n\nI for one encountered this, and fortunately I didn't jump down from my dormitory after working with that for months(and knew it for years).\n\nHence, I realized that it should be my duty to keep people away from being killed when working with Python's module finding mechanism,\nwhich might save several people's lives.\n\n\n### What is PIE?\n\nPIE, aka **painless-import-extension**, is not aimed at providing a higher level interface of Python's\nimport system, but is actually useful for solving most of the related problems.\n\nTechnically, PIE \"did nothing\", all the codes involved in this project are so far pretty easy,\nthat even a newbie to Python could understand it thoroughly with any question. However,\nPIE is useful, because it shows a **healthy mental model** for using Python import system,\nin a simplest way, and also a most practical way if you want to use the same module file search strategy of Python's.\n\nFor instance, if you want to import `data.json` via PIE, other than the JSON file,\nyou should also prepare a file with just suffix changed to `.py`(hence you got `data.py`), and\nfill the following contents:\n\n```python\nfrom pie.json_loader import JsonLoader\n\ndata = JsonLoader(__file__, __name__).load()\n```\n\nwhere, `JsonLoader(__file__, __name__).load()` will load the JSON data.\n\nLooks trivial? Yes, that's expected, and I'm telling you that this way is powerful,\nand subtly, much more powerful than `json.load(pathlib.Path(__file__).with_suffix('.json').open())`.\n\n### A PIE loader, and what happened when invoking `LoaderForBetterLife.load()`?\n\nGiven such a file directory:\n\n```\n- proj\n    - data.json\n    - data.py\n```\n\nAnd we fill `data.py` with \n\n```python\nfrom pie.json_loader import JsonLoader\n\ndata = JsonLoader(__file__, __name__).load()\n```\n\nNext, when you're import `proj.data`,\n\n- for the first time,\n  things similar to `json.load` happened, JSON is loaded from `data.json`.\n  However, a default caching system is introduced, and when you exit\n  current Python interpreter, and reopen the interpreter to import\n  `proj.data`\n\n- for the second time, `json.load` might not be invoked.\n    There're some cases:\n    - when `proj/data.json` doesn't exist, we'll get the JSON\n      from a binary file cached on disk.\n    - when `proj/data.json` exists, we'll check if the content\n      of `proj/data.json` has changed. If true, we import `proj/data.json`\n      just as what we did at the first time; otherwise, we use the cached\n      binary contents.\n\nThings become quite useful when you're loading DSLs(domain specific languages),\nor other programming languages that compile to the Python.\n\nFor example, we give an implementation of loading the script of [muridesu](https://github.com/LanguageAsGarbage/muridesu-lang) language(Python 3.7 only).\n\nCheck `test/zenzen_muridesu.py`, note that if you're using an IDE,\nyou will have a good experience of auto completion and static checking\ndue to our thorough support of Python type hints.\n\n```python\nfrom pathlib import Path\nfrom typing import Union, Tuple\nfrom muridesu.parse_stmts import parse_stmts as parse\nfrom pie import LoaderForBetterLife\nfrom types import CodeType\nimport marshal\n\n\nclass MuridesuLoader(LoaderForBetterLife[CodeType]):\n    def source_to_prog(self, src: bytes, path: Path):\n        mod = parse(src.decode('utf8'), str(path.absolute()))\n        code = compile(mod, self.file.with_suffix(self.suffix()), 'exec')\n        return code\n\n    def load_program(self, b: bytes):\n        return marshal.loads(b)\n\n    def dump_program(self, prog: CodeType):\n        return marshal.dumps(prog)\n\n    def suffix(self) -> Union[str, Tuple[str, ...]]:\n        return '.muridesu'\n\n\nexec(MuridesuLoader(__file__, __name__).load(), globals())\n```\n\nIn `test/zenzen_muridesu.muridesu`, write down\n```\nclass Animal {\n    func bark(self){\n        print(\"hoho\")\n    }\n}\n\nclass Dog <: Animal {\n    bark = fn (self) -> {\n        print(\"dogy\")\n    }\n}\n\nlist(\n    map(\n        fn (it) -> {\n            print(it.__class__)\n            it.bark()\n        },\n        [Dog(), Animal()]\n    )\n)\n```\n\nImporting `test/zenzen_muridesu.py` will give following STD output:\n\n```\n<class '__main__.Dog'>\ndogy\n<class '__main__.Animal'>\nhoho\n```\n\n### Conclusion\n\nMake sure if you really want to introduce the complexity of `importlib`?\n\nWhen you just need searching extension files just as searching normal python files,\nuse PIE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thautwarm/painless-import-extension",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "painless-import-extension",
    "package_url": "https://pypi.org/project/painless-import-extension/",
    "platform": "any",
    "project_url": "https://pypi.org/project/painless-import-extension/",
    "project_urls": {
      "Homepage": "https://github.com/thautwarm/painless-import-extension"
    },
    "release_url": "https://pypi.org/project/painless-import-extension/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6638800,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed288f860191629c6f56615909a6d16003c50fb685eecc85250bf3158e556fc5",
          "md5": "9b2f94ea902c44f1a5ec3465c0c21e96",
          "sha256": "d15d34341fa974519273b0f8468a6ab3866ba381e63a47fa16de24c7f917cd95"
        },
        "downloads": -1,
        "filename": "painless_import_extension-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b2f94ea902c44f1a5ec3465c0c21e96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7435,
        "upload_time": "2020-02-11T12:10:36",
        "upload_time_iso_8601": "2020-02-11T12:10:36.820439Z",
        "url": "https://files.pythonhosted.org/packages/ed/28/8f860191629c6f56615909a6d16003c50fb685eecc85250bf3158e556fc5/painless_import_extension-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f68fb3e6e8a161988b68a7f20b20f9e2dbc51ab87ebb794b5eda40c240b9c293",
          "md5": "0ba2e29541b05f901c079abb9655cb35",
          "sha256": "ec39cee8bd202ea005f0f0fc398f447ccab30b1a9268e400bc65f37005dc66db"
        },
        "downloads": -1,
        "filename": "painless_import_extension-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ba2e29541b05f901c079abb9655cb35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 7634,
        "upload_time": "2020-02-16T04:54:51",
        "upload_time_iso_8601": "2020-02-16T04:54:51.449946Z",
        "url": "https://files.pythonhosted.org/packages/f6/8f/b3e6e8a161988b68a7f20b20f9e2dbc51ab87ebb794b5eda40c240b9c293/painless_import_extension-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f68fb3e6e8a161988b68a7f20b20f9e2dbc51ab87ebb794b5eda40c240b9c293",
        "md5": "0ba2e29541b05f901c079abb9655cb35",
        "sha256": "ec39cee8bd202ea005f0f0fc398f447ccab30b1a9268e400bc65f37005dc66db"
      },
      "downloads": -1,
      "filename": "painless_import_extension-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ba2e29541b05f901c079abb9655cb35",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 7634,
      "upload_time": "2020-02-16T04:54:51",
      "upload_time_iso_8601": "2020-02-16T04:54:51.449946Z",
      "url": "https://files.pythonhosted.org/packages/f6/8f/b3e6e8a161988b68a7f20b20f9e2dbc51ab87ebb794b5eda40c240b9c293/painless_import_extension-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}