{
  "info": {
    "author": "Olivier Ma",
    "author_email": "olivier.ma.dq@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# molmapnets\n> Neural networks for regression and classification for molecular data, using MolMap generated features.\n\n\n```python\n#all_slow\n```\n\nThis package implements the neural network architects originally presented in the [MolMap](https://github.com/shenwanxiang/bidd-molmap) package, with two important differences:\n\n- The package is written using literate programming so all functionalities are written and tested in Jupyter notebooks, and the implementation, testing, and documentation are done together at the same time. You can find the documentation on the [package website](https://riversdark.github.io/molmapnets/).\n- The models are implemented in PyTorch.\n\n## Install\n\nFirst you need to install MolMap and ChemBench (you can find the detailed installation guide [here](https://github.com/shenwanxiang/bidd-molmap#installation)), then simply\n\n`pip install molmapnets`\n\n## How to use the package\n\nWe need `ChemBench` for the datasets, `MolMap` for feature extraction, and finally `molmapnets` for the neural networks.\n\n```python\nfrom chembench import dataset\nfrom molmap import MolMap\n```\n\n    RDKit WARNING: [13:50:43] Enabling RDKit 2019.09.3 jupyter extensions\n\n\n```python\nfrom molmapnets.data import SingleFeatureData, DoubleFeatureData\nfrom molmapnets.models import MolMapRegression\n```\n\nAnd for model training we also need `torch`\n\n```python\nimport torch\nfrom torch import nn, optim\nfrom torch.utils.data import Dataset, DataLoader, random_split\ntorch.set_default_dtype(torch.float64)\n```\n\nLoad and process data, using the `eSOL` dataset here for regression\n\n```python\ndata = dataset.load_ESOL()\n```\n\n    total samples: 1128\n\n\n```python\ndescriptor = MolMap(ftype='descriptor', metric='cosine',)\n```\n\n```python\ndescriptor.fit(verbose=0, method='umap', min_dist=0.1, n_neighbors=15,)\n```\n\n    2021-07-23 13:50:53,798 - INFO - [bidd-molmap] - Applying grid feature map(assignment), this may take several minutes(1~30 min)\n    2021-07-23 13:50:56,904 - INFO - [bidd-molmap] - Finished\n\n\nfeature extraction\n\n```python\nX = descriptor.batch_transform(data.x)\n```\n\n    100%|##########| 1128/1128 [06:08<00:00,  2.78it/s]\n\n\nPrepare data for model training\n\n```python\nesol = SingleFeatureData(data.y, X)\n```\n\nTrain, validation, and test split\n\n```python\ntrain, val, test = random_split(esol, [904,112,112], generator=torch.Generator().manual_seed(7))\n```\n\nBatch data loader\n\n```python\ntrain_loader = DataLoader(train, batch_size=8, shuffle=True)\nval_loader = DataLoader(val, batch_size=8, shuffle=True)\ntest_loader = DataLoader(test, batch_size=8, shuffle=True)\n```\n\nInitialise model\n\n```python\nmodel = MolMapRegression()\n\nepochs = 5\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\noptimizer = optim.Adam(model.parameters(), lr=0.001)\ncriterion = nn.MSELoss()\n```\n\nTrain model. The users are encouraged to tweak the training loop to achieve better performance\n\n```python\nfor epoch in range(epochs):\n\n    running_loss = 0.0\n    for i, (xb, yb) in enumerate(train_loader):\n\n        xb, yb = xb.to(device), yb.to(device)\n\n        # zero gradients\n        optimizer.zero_grad()\n\n        # forward propagation\n        pred = model(xb)\n\n        # loss calculation\n        loss = criterion(pred, yb)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n\n    print('[Epoch: %2d] Training loss: %.3f' %\n          (epoch + 1, running_loss / (i+1)))\n\nprint('Training finished')\n```\n\n    /Users/olivier/opt/anaconda3/envs/molmap/lib/python3.6/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  ../c10/core/TensorImpl.h:1156.)\n      return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n\n\n    [Epoch:  1] Training loss: 4.530\n    [Epoch:  2] Training loss: 1.803\n    [Epoch:  3] Training loss: 1.541\n    [Epoch:  4] Training loss: 1.209\n    [Epoch:  5] Training loss: 1.092\n    Training finished\n\n\nPlease refer to the package documentation for more detailed usage.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/riversdark/molmapnets/tree/master/",
    "keywords": "MolMap Molecular",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "molmapnets",
    "package_url": "https://pypi.org/project/molmapnets/",
    "platform": "",
    "project_url": "https://pypi.org/project/molmapnets/",
    "project_urls": {
      "Homepage": "https://github.com/riversdark/molmapnets/tree/master/"
    },
    "release_url": "https://pypi.org/project/molmapnets/0.0.1/",
    "requires_dist": [
      "pip",
      "packaging",
      "numpy",
      "scipy",
      "pandas",
      "scikit-learn",
      "seaborn",
      "torch",
      "torchvision"
    ],
    "requires_python": ">=3.6",
    "summary": "Neural networks for MolMap generated features",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10984277,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5560b629469949fc63aa837443cb4e1b93d95d8e345f386d8062c8ce284c509",
          "md5": "d80ef689ff329deba2f2ffef4681332d",
          "sha256": "b468f5b03c2de5fe1e0cba81809d27fcf92d7b535ad868f963b4ad0b241869da"
        },
        "downloads": -1,
        "filename": "molmapnets-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d80ef689ff329deba2f2ffef4681332d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10984,
        "upload_time": "2021-07-23T07:38:14",
        "upload_time_iso_8601": "2021-07-23T07:38:14.228651Z",
        "url": "https://files.pythonhosted.org/packages/a5/56/0b629469949fc63aa837443cb4e1b93d95d8e345f386d8062c8ce284c509/molmapnets-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c89c5322af9575d37a7677431cbcc113c24c0e086fc1ae282acc404984b2b7ba",
          "md5": "4c098de2b92bc3ffedba49e38582f44f",
          "sha256": "2a50600cb3fecad274a719533e82ac391eadd3bd6d9120a745a5d84d7a557efd"
        },
        "downloads": -1,
        "filename": "molmapnets-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c098de2b92bc3ffedba49e38582f44f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14146,
        "upload_time": "2021-07-23T07:38:16",
        "upload_time_iso_8601": "2021-07-23T07:38:16.452291Z",
        "url": "https://files.pythonhosted.org/packages/c8/9c/5322af9575d37a7677431cbcc113c24c0e086fc1ae282acc404984b2b7ba/molmapnets-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5560b629469949fc63aa837443cb4e1b93d95d8e345f386d8062c8ce284c509",
        "md5": "d80ef689ff329deba2f2ffef4681332d",
        "sha256": "b468f5b03c2de5fe1e0cba81809d27fcf92d7b535ad868f963b4ad0b241869da"
      },
      "downloads": -1,
      "filename": "molmapnets-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d80ef689ff329deba2f2ffef4681332d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10984,
      "upload_time": "2021-07-23T07:38:14",
      "upload_time_iso_8601": "2021-07-23T07:38:14.228651Z",
      "url": "https://files.pythonhosted.org/packages/a5/56/0b629469949fc63aa837443cb4e1b93d95d8e345f386d8062c8ce284c509/molmapnets-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c89c5322af9575d37a7677431cbcc113c24c0e086fc1ae282acc404984b2b7ba",
        "md5": "4c098de2b92bc3ffedba49e38582f44f",
        "sha256": "2a50600cb3fecad274a719533e82ac391eadd3bd6d9120a745a5d84d7a557efd"
      },
      "downloads": -1,
      "filename": "molmapnets-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4c098de2b92bc3ffedba49e38582f44f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14146,
      "upload_time": "2021-07-23T07:38:16",
      "upload_time_iso_8601": "2021-07-23T07:38:16.452291Z",
      "url": "https://files.pythonhosted.org/packages/c8/9c/5322af9575d37a7677431cbcc113c24c0e086fc1ae282acc404984b2b7ba/molmapnets-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}