{
  "info": {
    "author": "David Carli-Arnold",
    "author_email": "davocarli@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# hintcast\nDecorators that allow for automatic type-casting of arguments for a function or strict enforcement of type hints.\n\n## Usage Summary\nImport whatever decorators you want with an import statement like `from hintcast import cast_hints, strict_hints`.\n\n### Casting Types\n- To add automated type-casting to your function/method, use the `@cast_hints` decorator for your method. If a type cannot be cast, a warning will be logged.\n- To attempt to cast but raise a TypeError exception if unable to, pass the keyword argument \"strict\". E.g. `@cast_hints(strict=True)`.\n- To pass `None` values without casting, pass the keyword argument \"cast_none\". E.g. `@cast_hints(cast_none=False)`.\n\n### Enforcing strict types\n- You can also use the `@strict_hints` decorator. This will NOT attempt to cast the types, but will raise a ValueError if a type not matching your hint is passed.\n\n\n\n## Usage Examples\n### Casting Types\n\n```\nfrom hintcast import cast_hints\n\n@cast_hints\ndef add_two(num: int, text: str):\n    print(repr(num+2))\n    print(repr(text+\"2\"))\n```\nOutput\n```\n>>> add_two(\"3\", 3)\n5\n'32'\n>>> add_two(\"3\", None)\n5\n'None2'\n```\n\n### Casting types without casting NoneType\n```\nfrom hintcast import cast_hints\n\n@cast_hints(cast_none=False)\ndef add_two(num: int, text: str):\n  print(repr(num+2))\n  print(repr(text+\"2\"))\n```\nOutput\n```\n>>> add_two(\"3\", 3)\n5\n'32'\n>>> add_two(\"3\", None)\n5\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n```\n### Casting types and raising TypeError when type could not be cast\n```\nfrom hintcast import cast_hints\n\n@cast_hints(strict=True)\ndef add_two(num: int, text: str):\n  print(repr(num+2))\n  print(repr(tex+\"2\"))\n```\nOutput\n```\n>>> add_two(\"3\", 3)\n5\n'32'\n>>> add_two(\"test\", 3)\nTypeError: Could not convert num to <class 'int'>. invalid literal for int() with base 10: 'test'\n```\n### Enforcing strict typing without casting\n```\nfrom hintcast import strict_hints\n\n@strict_hints\ndef add_two(num: int, text: str):\n  print(repr(num+2))\n  print(repr(text+\"2\"))\n```\nOutput\n```\n>>> add_two(\"3\", 3)\nTypeError: num is not of type <class 'int'>\n>>> add_two(3, 3)\nTypeError: text is not of type <class 'str'>\n```\n\n## Future Development Plans\n- Test support for all primitive types\n- Add support for checking function return type hints\n- Add support for built-in non-primitive data structures such as arrays, lists, etc.\n- Add support for hinting of types within lists, dictionaries, etc.\n- Add ability to enforce typing project-wide\n\nWhen all of the functionality above has been implemented and tested, the version number will be incremented to 1.0.0 and this project will leave beta status.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davocarli/hintcast",
    "keywords": "casting,typecast,type-cast,type-hints,hints,types,python,decorator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hintcast",
    "package_url": "https://pypi.org/project/hintcast/",
    "platform": "",
    "project_url": "https://pypi.org/project/hintcast/",
    "project_urls": {
      "Homepage": "https://github.com/davocarli/hintcast"
    },
    "release_url": "https://pypi.org/project/hintcast/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Decorators that allow for automatic type-casting of arguments for a function or strict enforcement of type hints.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12955354,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4fc4e333b15069e462749aa091af0d1aae444eb73aa450c0d8f0363fa25171a",
          "md5": "c0d06c25882182d061b336f375fcd625",
          "sha256": "57bccbd67d0d368d2974a619e9cd8eedfbbc1422a9e544349e787916ad3dca72"
        },
        "downloads": -1,
        "filename": "hintcast-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0d06c25882182d061b336f375fcd625",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3906,
        "upload_time": "2022-02-21T01:49:50",
        "upload_time_iso_8601": "2022-02-21T01:49:50.716233Z",
        "url": "https://files.pythonhosted.org/packages/e4/fc/4e333b15069e462749aa091af0d1aae444eb73aa450c0d8f0363fa25171a/hintcast-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf4310887a3d78fc08c643a0e3e6e76a2e7232ddebf64f23cf2bbc55841bcb0d",
          "md5": "194412ede78054a546b09e89daf3034d",
          "sha256": "f345fcdcc0d81b3222f9de0598d2421a4af182942b1f2b6a5726a933b104c4f1"
        },
        "downloads": -1,
        "filename": "hintcast-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "194412ede78054a546b09e89daf3034d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3873,
        "upload_time": "2022-02-21T01:49:52",
        "upload_time_iso_8601": "2022-02-21T01:49:52.291352Z",
        "url": "https://files.pythonhosted.org/packages/bf/43/10887a3d78fc08c643a0e3e6e76a2e7232ddebf64f23cf2bbc55841bcb0d/hintcast-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4fc4e333b15069e462749aa091af0d1aae444eb73aa450c0d8f0363fa25171a",
        "md5": "c0d06c25882182d061b336f375fcd625",
        "sha256": "57bccbd67d0d368d2974a619e9cd8eedfbbc1422a9e544349e787916ad3dca72"
      },
      "downloads": -1,
      "filename": "hintcast-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c0d06c25882182d061b336f375fcd625",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3906,
      "upload_time": "2022-02-21T01:49:50",
      "upload_time_iso_8601": "2022-02-21T01:49:50.716233Z",
      "url": "https://files.pythonhosted.org/packages/e4/fc/4e333b15069e462749aa091af0d1aae444eb73aa450c0d8f0363fa25171a/hintcast-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf4310887a3d78fc08c643a0e3e6e76a2e7232ddebf64f23cf2bbc55841bcb0d",
        "md5": "194412ede78054a546b09e89daf3034d",
        "sha256": "f345fcdcc0d81b3222f9de0598d2421a4af182942b1f2b6a5726a933b104c4f1"
      },
      "downloads": -1,
      "filename": "hintcast-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "194412ede78054a546b09e89daf3034d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3873,
      "upload_time": "2022-02-21T01:49:52",
      "upload_time_iso_8601": "2022-02-21T01:49:52.291352Z",
      "url": "https://files.pythonhosted.org/packages/bf/43/10887a3d78fc08c643a0e3e6e76a2e7232ddebf64f23cf2bbc55841bcb0d/hintcast-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}