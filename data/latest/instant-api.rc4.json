{
  "info": {
    "author": "Alex Hall",
    "author_email": "alex.mojaki@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Server"
    ],
    "description": "<p align=\"center\">\n  <img src=\"images/tin.png\" width=\"256px\" height=\"256px\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n    <a href=\"https://travis-ci.org/alexmojaki/instant_api\"><img src=\"https://travis-ci.org/alexmojaki/instant_api.svg?branch=master\" alt=\"Build Status\"></a>\n    <a href=\"https://coveralls.io/github/alexmojaki/instant_api?branch=master\"><img src=\"https://coveralls.io/repos/github/alexmojaki/instant_api/badge.svg?branch=master\" alt=\"Coverage Status\"></a>\n    <a href=\"https://pypi.python.org/pypi/instant_api\"><img src=\"https://img.shields.io/pypi/pyversions/instant_api.svg\" alt=\"Supports Python versions 3.7+\"></a>\n\n# instant_api\n\nInstantly create an HTTP API with automatic type conversions, JSON RPC, and a Swagger UI. All the boring stuff is done for you, so you can focus on the interesting logic while having an awesome API. Just add methods!\n\n  * [Installation](#installation)\n  * [Basic usage](#basic-usage)\n     * [Talking to the API with instant_client](#talking-to-the-api-with-instant_client)\n  * [Using method paths instead of JSON-RPC](#using-method-paths-instead-of-json-rpc)\n     * [HTTP status codes](#http-status-codes)\n  * [Global API configuration](#global-api-configuration)\n  * [Handling errors](#handling-errors)\n  * [Attaching methods](#attaching-methods)\n     * [Customising method paths in the Swagger UI](#customising-method-paths-in-the-swagger-ui)\n        * [Setting attributes directly](#setting-attributes-directly)\n        * [Setting summary and description via the docstring](#setting-summary-and-description-via-the-docstring)\n  * [Customising global request and method handling](#customising-global-request-and-method-handling)\n  * [Authentication](#authentication)\n  * [Dependencies](#dependencies)\n  * [Why use this library?](#why-use-this-library)\n\n## Installation\n\n    pip install instant-api\n\nOr to also install the corresponding Python client:\n\n    pip install 'instant-api[client]'\n\n## Basic usage\n\nJust write some Python functions or methods and decorate them. Parameters and the return value need type annotations so that they can be converted to and from JSON for you. You can use dataclasses for complex values.\n\n```python\nfrom dataclasses import dataclass\nfrom flask import Flask\nfrom instant_api import InstantAPI\n\napp = Flask(__name__)\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n\n@InstantAPI(app)\nclass Methods:\n    def translate(self, p: Point, dx: int, dy: int) -> Point:\n        \"\"\"Move a point by dx and dy.\"\"\"\n        return Point(p.x + dx, p.y + dy)\n\n    def scale(self, p: Point, factor: int) -> Point:\n        \"\"\"Scale a point away from the origin by factor.\"\"\"\n        return Point(p.x * factor, p.y * factor)\n\nif __name__ == '__main__':\n    app.run()\n```\n\nVisit http://127.0.0.1:5000/apidocs/ for a complete Swagger GUI to try out the API interactively:\n\n![Swagger overview](images/swagger_overview.png)\n\n### Talking to the API with `instant_client`\n\nIf you need a Python client, I highly recommend the companion library [instant_client](https://github.com/alexmojaki/instant_client). It handles data conversion on the client side and works well with developer tools. Basic usage looks like:\n\n```python\nfrom server import Methods, Point  # the classes we defined above\nfrom instant_client import InstantClient\n\n# The type hint is a lie, but your linter/IDE doesn't know that!\nmethods: Methods = InstantClient(\"http://127.0.0.1:5000/api/\", Methods()).methods\n\nassert methods.scale(Point(1, 2), factor=3) == Point(3, 6)\n```\n\nThat looks a lot like it just called `Methods.scale()` directly, which is the point (no pun intended), but under the hood it did in fact send an HTTP request to the server.\n\n## Using method paths instead of JSON-RPC\n\nThe API is automatically available in two flavours, and clients can choose which way they prefer to communicate:\n\n1. The central JSON-RPC endpoint, which follows the JSON-RPC protocol spec exactly, and is easiest to use with standard client libraries.\n2. Method paths, which make it slightly easier for humans to write requests manually (especially in the Swagger GUI) and use the features of HTTP more.\n\nTo make a request to a method path, include the method name at the end of the URL, and just send the parameters object in the JSON body. Here's what such a call looks like:\n\n```python\nimport requests\n\nresponse = requests.post(\n    'http://127.0.0.1:5000/api/scale',\n    json={\n        'p': {'x': 1, 'y': 2}, \n        'factor': 3,\n    },\n)\n\nassert response.json()['result'] == {'x': 3, 'y': 6}\n```\n\nThe response will be a complete JSON-RPC response as if you had made a full JSON-RPC request. In particular it will either have a `result` or an `error` key.\n\n### HTTP status codes\n\nThe central JSON-RPC endpoint will always (unless a request is not authenticated, [see below](#authentication)) return the code HTTP status code 200 (OK), even if there's an error, as standard clients expect that.\n\nSince the method paths are not quite JSON-RPC, they may return a different code in case of errors. In particular an invalid request will lead to a 400 and an unhandled error inside a method will cause a 500.\n\nIf you [raise an `InstantError`](#handling-errors) inside a method, you can give it an `http_code`, e.g. `raise InstantError(..., http_code=404)`. This will become the HTTP status code *only if the method was called by the method path, not the JSON-RPC endpoint*.\n\n## Global API configuration\n\nThe `InstantAPI` class requires a Flask app and has the following optional keyword-only parameters:\n\n- `path` is a string (default `'/api/'`) which is the endpoint that will be added to the app for the JSON RPC. There will also be a path for each method based on the function name, e.g. `/api/scale` and `/api/translate` - see [Using method paths instead of JSON-RPC](#using-method-paths-instead-of-json-rpc). Specify a different string to change all of these paths.\n- `swagger_kwargs` is a dictionary (default empty) of keyword arguments to pass to the `flasgger.Swagger` constructor that is called with the app. For example, you can customise the Swagger UI by [passing a dictionary to `config`](https://github.com/flasgger/flasgger#customize-default-configurations):\n\n```python\napi = InstantAPI(app, swagger_kwargs={\"config\": {\"specs_route\": \"/my_apidocs/\", ...}})\n```\n\n## Handling errors\n\nWhen the server encounters an error, the response will contain an `error` key (instead of a `result`) with an object containing `code`, `data`, and `message`. For example, if a method is given invalid parameters, the details of the error (either a `TypeError` or a marshmallow `ValidationError`) will be included in the response. The error code will be `-32602`. The response JSON looks like this:\n\n```json\n{\n  \"error\": {\n    \"code\": -32602,\n    \"data\": {\n      \"p\": {\n        \"y\": [\n          \"Not a valid integer.\"\n        ]\n      }\n    },\n    \"message\": \"marshmallow.exceptions.ValidationError: {'p': {'y': ['Not a valid integer.']}}\"\n  },\n  \"id\": 0,\n  \"jsonrpc\": \"2.0\"\n}\n```\n\nYou can find more details, including the standard error codes for some typical errors, in the [JSON-RPC protocol spec](https://www.jsonrpc.org/specification#error_object).\n\nTo return your own custom error information, raise an `InstantError` in your method, e.g:\n\n```python\nfrom instant_api import InstantAPI, InstantError\n\n@InstantAPI(app)\nclass Methods:\n    def find_thing(self, thing_id: int) -> Thing:\n        ...\n        raise InstantError(\n            code=123,\n            message=\"Thing not found anywhere at all\",\n            data=[\"not here\", \"or here\"],\n        )\n```\n\nThe response will then be:\n\n```json\n{\n  \"error\": {\n    \"code\": 123,\n    \"data\": [\n      \"not here\",\n      \"or here\"\n    ],\n    \"message\": \"Thing not found anywhere at all\"\n  },\n  \"id\": 0,\n  \"jsonrpc\": \"2.0\"\n}\n```\n\nThe HTTP status code depends on which flavour of the API you use - see [this section](#http-status-codes).\n\n## Attaching methods\n\nInstances of `InstantAPI` can be called with functions, classes, or arbitrary objects to add methods to the API. For functions and classes, the instance can be used as a decorator to call it.\n\nDecorating a single function adds it as an API method, as you'd expect. The function itself should not be a method of a class, since there is no way to provide the first argument `self`.\n\nCalling `InstantAPI` with an object will search through all its attributes and add to the API all functions (including bound methods) whose name doesn't start with an underscore (`_`).\n\nDecorating a class will construct an instance of the class without arguments and then call the resulting object as described above. This means it will add bound methods, so the `self` argument is ignored.\n\nSo given `api = InstantAPI(app)`, all of these are equivalent:\n\n```python\n@api\ndef foo(bar: Bar) -> Spam:\n    ...\n\napi(foo)\n\n@api\nclass Methods:\n    def foo(self, bar: Bar) -> Spam:\n        ...\n\napi(Methods)\n\napi(Methods())\n```\n\nIf a function is missing a type annotation for any of its parameters or for the return value, an exception will be raised. If you don't want a method to be added to the API, prefix its name with an underscore, e.g. `def _foo(...)`.\n\n### Customising method paths in the Swagger UI\n\n#### Setting attributes directly\n\nFor each method, a [`flasgger.SwaggerView`](https://github.com/flasgger/flasgger#using-marshmallow-schemas) will be created.\nYou can customise the view by passing a dictionary of class attributes\nin the argument `swagger_view_attrs` of the decorator.\nFor example:\n\n```python\n@api(swagger_view_attrs={\"tags\": [\"Stuff\"]})\ndef foo(...)\n```\n\nThis will put `foo` in the `Stuff` section of the Swagger UI.\n\nNote that the below is invalid syntax [before Python 3.9](https://www.python.org/dev/peps/pep-0614/):\n\n```python\n@InstantAPI(app)(swagger_view_attrs={\"tags\": [\"Stuff\"]})\ndef foo(...)\n```\n\n#### Setting summary and description via the docstring\n\nIf a method has a docstring, its first line will be the `summary`\nin the OpenAPI spec of the method path, visible in the overview in the Swagger UI.\nThe remaining lines will become the `description`,\nvisible when the path is expanded in the UI.\n\n## Customising global request and method handling\n\nTo directly control how requests are handled, create a subclass of `InstantAPI` and override one of these methods:\n\n- `handle_request(self, method)` is the entrypoint which converts a raw flask request to a response. If `method` is None, the request was made to the generic JSON-RPC path. Otherwise `method` is a string with the method name at the end of the request path.\n- `call_method(self, func, *args, **kwargs)` calls the API method `func` with the given arguments. The arguments here are not yet deserialized according to the function type annotations.\n\nUnless you're doing something very weird, remember to call the parent method with `super()` somewhere.\n\n## Authentication\n\nTo require authentication for requests:\n\n1. Create a subclass of `InstantAPI`.\n2. Override the method `def is_authenticated(self):`.\n3. Return a boolean: `True` if a user should have access (based on the global Flask `request` object), `False` if they should be denied.\n4. Use an instance of your subclass to decorate methods.\n\nUnauthenticated requests will receive a 403 response with a non-JSON body.\n\n## Dependencies\n\n- [**`datafunctions`**](https://github.com/alexmojaki/datafunctions) (which in turn uses [`marshmallow`](https://marshmallow.readthedocs.io/)) is used by both `instant_api` and `instant_client` to transparently handle conversion between JSON and Python classes on both ends.\n- [**Flasgger**](https://github.com/flasgger/flasgger) provides the Swagger UI.\n- [**`json-rpc`**](https://github.com/pavlov99/json-rpc) handles the protocol.\n\nBecause other libraries do so much of the work, `instant_api` itself is a very small library, essentially contained in [one little file](https://github.com/alexmojaki/instant_api/blob/master/instant_api/instant_api.py). You can probably read the source code pretty easily and adapt it to your needs.\n\n## Why use this library?\n\nThis library takes obvious inspiration from [FastAPI](https://github.com/tiangolo/fastapi). So why did I write this, and why might you want to use it?\n\n- It's really great with [`instant_client`](https://github.com/alexmojaki/instant_client), which lets you feel like you're calling methods locally (and your IDE helps you as if you are) even though they're executed remotely.\n- It's easier to set up, as you don't have to specify paths or HTTP methods. If you group everything into a class, you just have to decorate the whole thing once. It's almost the minimum amount of boilerplate possible.\n- JSON-RPC is pretty cool.\n    - It's a popular, standard protocol that has client libraries written in many languages.\n    - It lets you do bulk requests: send an array of requests, get an array of responses back.\n    - It supports notifications for when you don't care about the result.\n- It's great when you want to work with Flask (e.g. to use other Flask libraries), or more generally if you want a WSGI application without having to embed it inside FastAPI.\n\n  When my use case for this popped up, I considered FastAPI, but being able to use Flask (specifically Plotly Dash) was a hard requirement. The API was only a small part of a larger project, so I didn't want FastAPI to be 'in charge'.\n\n  I tried looking through the source code of FastAPI to extract the bits I needed, like generating the Swagger spec from type annotations, but the code is very complicated and this wasn't worth it. So I wrote my own version where the dependencies do the hard work like that in a nice modular manner. What's left is a small, readable library that largely just wires other stuff together. This way if someone else is in the same situation as me where they have slightly different needs, it's now feasible for them to adapt the source code.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/alexmojaki/instant_api",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "instant-api",
    "package_url": "https://pypi.org/project/instant-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/instant-api/",
    "project_urls": {
      "Homepage": "http://github.com/alexmojaki/instant_api"
    },
    "release_url": "https://pypi.org/project/instant-api/0.2.0/",
    "requires_dist": [
      "flasgger",
      "json-rpc",
      "datafunctions",
      "apispec",
      "instant-client[requests] ; extra == 'client'",
      "pytest ; extra == 'tests'",
      "instant-client[requests] ; extra == 'tests'",
      "littleutils ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Instantly create an HTTP API with automatic type conversions, JSON RPC, and a Swagger UI. Just add methods!",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7614075,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bc99d2fec5a3003794d2d0462b95c7770a9abb2fdc6a9be7287fdfd2e097a11",
          "md5": "6b4c82b09df05edfbf9b6ebf8b27d6b3",
          "sha256": "76a85bb723ecb0b8923e28b94a746b82586ca8ef01eb7fbb3b25e1d25dbf6b30"
        },
        "downloads": -1,
        "filename": "instant_api-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b4c82b09df05edfbf9b6ebf8b27d6b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9482,
        "upload_time": "2020-05-09T18:31:43",
        "upload_time_iso_8601": "2020-05-09T18:31:43.831967Z",
        "url": "https://files.pythonhosted.org/packages/6b/c9/9d2fec5a3003794d2d0462b95c7770a9abb2fdc6a9be7287fdfd2e097a11/instant_api-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d1bd7fbae137eb3119688ada240d49abcaa6011d2ac535220e6e63ad44c0fc3",
          "md5": "c1977ccdda71d7caa9e1cf2efcf6f810",
          "sha256": "e90355d0a697856d25342012df1ab6191535f7bc1d42549e04b6b24dbba73a67"
        },
        "downloads": -1,
        "filename": "instant_api-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1977ccdda71d7caa9e1cf2efcf6f810",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9489,
        "upload_time": "2020-05-09T19:21:51",
        "upload_time_iso_8601": "2020-05-09T19:21:51.327495Z",
        "url": "https://files.pythonhosted.org/packages/3d/1b/d7fbae137eb3119688ada240d49abcaa6011d2ac535220e6e63ad44c0fc3/instant_api-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e10f277ad408fd9745a7089a7c81fefea248d0eee8b35a91f3f4591762d5135",
          "md5": "baa90c43be4c9c342d73d075a41b717c",
          "sha256": "6595a4d2e7f4eb38edbe20de9f76f1e2618f02701098e7996e55d1d73602e835"
        },
        "downloads": -1,
        "filename": "instant_api-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "baa90c43be4c9c342d73d075a41b717c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11507,
        "upload_time": "2020-06-07T13:54:56",
        "upload_time_iso_8601": "2020-06-07T13:54:56.814700Z",
        "url": "https://files.pythonhosted.org/packages/1e/10/f277ad408fd9745a7089a7c81fefea248d0eee8b35a91f3f4591762d5135/instant_api-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c48b34f5e8500dd547dcec9eef9e95e43acbf147b95d47a9847c5f66b590ffb0",
          "md5": "0b51f92c77008544db88a4f65f548e95",
          "sha256": "634856d58b05b22985e92bf0356489b66eae0b446be7bf0b6e608b059ecdd252"
        },
        "downloads": -1,
        "filename": "instant_api-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b51f92c77008544db88a4f65f548e95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12373,
        "upload_time": "2020-07-02T11:56:11",
        "upload_time_iso_8601": "2020-07-02T11:56:11.005456Z",
        "url": "https://files.pythonhosted.org/packages/c4/8b/34f5e8500dd547dcec9eef9e95e43acbf147b95d47a9847c5f66b590ffb0/instant_api-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c48b34f5e8500dd547dcec9eef9e95e43acbf147b95d47a9847c5f66b590ffb0",
        "md5": "0b51f92c77008544db88a4f65f548e95",
        "sha256": "634856d58b05b22985e92bf0356489b66eae0b446be7bf0b6e608b059ecdd252"
      },
      "downloads": -1,
      "filename": "instant_api-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0b51f92c77008544db88a4f65f548e95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12373,
      "upload_time": "2020-07-02T11:56:11",
      "upload_time_iso_8601": "2020-07-02T11:56:11.005456Z",
      "url": "https://files.pythonhosted.org/packages/c4/8b/34f5e8500dd547dcec9eef9e95e43acbf147b95d47a9847c5f66b590ffb0/instant_api-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}