{
  "info": {
    "author": "S√∂ren Rif√©",
    "author_email": "sorenrife@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "<img src=\"https://user-images.githubusercontent.com/55748056/172958283-fa9b17c3-16a5-49e7-9a12-3d33dc5b6f6d.png\" width=\"300\">\n    \nDory\n====\n\nDory is a **Python3.8+** out-of-the box smart cache library. It simplifies multiple cache features and brings [Bloats](#Bloats) to the table, a tool designed to make smarter your application cache.\n\n&nbsp; | Badges\n--- | ---\nBuild | [![tests](https://github.com/sorenrife/dory/actions/workflows/test.yaml/badge.svg?branch=master&event=push)](https://github.com/sorenrife/dory/actions/workflows/test.yaml) [![build/deploy](https://github.com/sorenrife/dory/actions/workflows/deploy.yaml/badge.svg)](https://github.com/sorenrife/dory/actions/workflows/deploy.yaml) [![codecov](https://codecov.io/gh/sorenrife/dory/branch/master/graph/badge.svg?token=72DJGGO049)](https://codecov.io/gh/sorenrife/dory)\nDocs | [![documentation](https://img.shields.io/badge/dory-docs-FF274D)](https://sorenrife.gitbook.io/dory/)\nPackage | [![PyPi](https://img.shields.io/pypi/v/dory-cache.svg?color=blue)](https://pypi.python.org/pypi/dory-cache/) [![PyPi versions](https://img.shields.io/pypi/pyversions/dory-cache.svg?color=blue)](https://pypi.python.org/pypi/dory-cache/) [![code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\nSupport | [![buy-me-a-coffee](https://img.shields.io/badge/-buy_me_a%C2%A0coffee-gray?logo=buy-me-a-coffee)](https://www.buymeacoffee.com/sorenrife)\n\n## Table of content\n\n- [Installation](#Installation)\n- [Features](#Features)\n    - [Cache utils](#Cache-utils)\n    - [Bloats](#Bloats)\n- [Usage](#Usage)\n    - [Examples](#Examples)\n- [Roadmap](#Roadmap)\n- [Contributing](#Contributing)\n\n## Installation\n\nInstallation is as simple as:\n\n```bash\npip install dory-cache\n```\n\n## Features\n\n### Cache utils\n\n**Dory** simplifies several cache utilities with an out-of-the-box interface. For example, a decorator to cache views comfortably:\n\n```python\n@api.get('/foo')\n@dory.cache(key='foo', timeout=timedelta(hours=1))\ndef foo(request):\n    \"\"\"\n    Render a Foo\n    \"\"\"\n    ...\n\n```\n\nMore about it on the [docs](https://sorenrife.gitbook.io/dory/) üî•\n\n### Bloats\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/55748056/173080628-aafb7b87-67c4-4181-9619-01ee7a4126bc.png\" width=\"300\">\n</p>\n<p align=\"center\"><i>Porcupinefish have the ability to inflate their bodies by swallowing water or air, thereby becoming rounder.</i></p>\n<br>\n\n`Bloats` responds to the necessity to have a solid and clean way to define cache usage and to permit an smart cache approach to your system.\nThe main idea behind it is that a `Bloat` has the ability to `inflate` -as a Porcupinefish does- meaning that has the ability to cache a `key/value` given a certain configuration.\nAlso, has the ability to `deflate` meaning exactly the contrary, that deletes the given `key/value` from the cache. Having a `Bloat` decoupled gives the application the ability to interact with the cache in a comfortable way around all the project.\n\n\nFor example, let's pretend that we have a model called `Product` wich can be either renderizer or edited.  \n\n```python\nclass Product(Model):\n    \"\"\"\n    Store information about a Product\n    \"\"\"\n    id: int = PrimaryKey()\n    name: str = Text()\n    description: str = Text()\n```\n\nSo, to improve the `Product` performance we cache the `Product` serialization view *(GET /product)*.\n\n```python\n@api.get('/product/<id>')\n@dory.cache(key=lambda request, id: \"product:%s\" % id, timeout=timedelta(hours=1))\ndef get_product(request, id) -> Response:\n    \"\"\"\n    Serialize a Product\n    \"\"\"\n    ...\n```\n\nNow everything works faster and as expected, but we did not contemplate that since the `Product` can be edited *(POST /product)*, we could have cached an outdated version of the `Product`, so we need a way to force the cache to refresh itself. This is where **Bloats** come in handy!  \n\nInstead of caching the view with a custom key, decouple the cache configuration on a `Bloat`:\n\n```python\nclass Product(dory.Bloat):\n    \"\"\"\n    Product's bloat\n    \"\"\"\n    prefix: str = 'product'\n    key: str\n    \n    timeout: timedelta = timedelta(hours=1)\n    enabled: bool = True\n    \n    def __init__(product_id: int):\n        self.key = '%s' % product_id\n```\n\n```python\n@api.get('/product/<id>')\n@bloats.Product.cache(args=lambda request, id: dict(product_id=id))\ndef get_product(request, id) -> Response:\n    \"\"\"\n    Serialize a Product\n    \"\"\"\n    ...\n```\n\nAnd now, when a `Product` is edited, you can force the view to refresh the cache using the `Bloat` as a middle-man.\n\n```python\n@api.post('/product/<id>')\ndef edit_product(request, id):\n    \"\"\"\n    Edit a Product\n    \"\"\"\n    # edit the product\n    services.product.edit(request.body)\n    # clean up outdated cache\n    bloats.Product(product_id=id).deflate()\n```\n\nNow your cache will always be in sync and it'll be configured in a cleaner way! üî•\n\n## Roadmap\n\n- [ ] **Cache utils** (See [Cache utils](#Cache-utils))\n    - [ ] **Cache decorator**   \n    - [ ] **Ratelimit**\n- [ ] **Bloats üê°** (See [Bloats](#Bloats))\n- [ ] **Django signals**\n    ```python\n    class Product(models.Model, dory.django.BloatModel):\n        \"\"\"\n        Store information about a Product\n        \"\"\"\n        id: int\n        name: str = m.CharField(max_length=24)\n        description: str = m.TextField()\n    ```\n    \n    ```python\n    @api.get('/product/<id>')\n    @bloats.Product.cache(args=lambda request, id: dict(product_id=id), deflate_on=models.Product.post_save)\n    def get_product(request, id):\n        \"\"\"\n        Serialize a Product\n        \"\"\"\n        ...\n    ```\n- [ ] **Bloats v2**\n    - The v2 of the `Bloats` will implement the method `.reflate()`, capable not only to `deflate` the current `Bloat` but to `inflate` it again. The design is still a `WIP`.\n\n## Contributing\n\nSuggestions and contributions are extremely welcome! ‚ù§Ô∏è  \nJust open an issue or a PR, and I'll respond as soon as I can.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sorenrife/dory",
    "keywords": "dory smart cache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dory-cache",
    "package_url": "https://pypi.org/project/dory-cache/",
    "platform": null,
    "project_url": "https://pypi.org/project/dory-cache/",
    "project_urls": {
      "Homepage": "https://github.com/sorenrife/dory"
    },
    "release_url": "https://pypi.org/project/dory-cache/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14103707,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec8e52dcfffd555aa2fb51ad541839a41b9e06e84f382653affb0fc4b392d918",
          "md5": "7d67583ca81d052a5012591f91ef41bd",
          "sha256": "e62196ae8ad5fbdf45badae280edb66fb44396621ff5b0fb7d6ff82cad9ef028"
        },
        "downloads": -1,
        "filename": "dory-cache-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d67583ca81d052a5012591f91ef41bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4975,
        "upload_time": "2022-06-12T00:00:29",
        "upload_time_iso_8601": "2022-06-12T00:00:29.321480Z",
        "url": "https://files.pythonhosted.org/packages/ec/8e/52dcfffd555aa2fb51ad541839a41b9e06e84f382653affb0fc4b392d918/dory-cache-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec8e52dcfffd555aa2fb51ad541839a41b9e06e84f382653affb0fc4b392d918",
        "md5": "7d67583ca81d052a5012591f91ef41bd",
        "sha256": "e62196ae8ad5fbdf45badae280edb66fb44396621ff5b0fb7d6ff82cad9ef028"
      },
      "downloads": -1,
      "filename": "dory-cache-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7d67583ca81d052a5012591f91ef41bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 4975,
      "upload_time": "2022-06-12T00:00:29",
      "upload_time_iso_8601": "2022-06-12T00:00:29.321480Z",
      "url": "https://files.pythonhosted.org/packages/ec/8e/52dcfffd555aa2fb51ad541839a41b9e06e84f382653affb0fc4b392d918/dory-cache-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}