{
  "info": {
    "author": "gonza",
    "author_email": "matgonzalez@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# aiopyo365\n\nAsync wrapper for Python >= 3.8 around [Microsoft v1.0 graph API](https://learn.microsoft.com/en-us/graph/api/overview?view=graph-rest-1.0&preserve-view=true).\n\n\n## Installation\n\n`pip install aiopyo365`\n\n\n## Requirements\n\npython 3.8 or greater\n\n### Application registration\nMicrosoft Graph APi requires to be authentificated. You will need to \nhave a [registred application](https://learn.microsoft.com/en-us/graph/auth-register-app-v2) in Azure that will provide you: \n* client id \n* client secret\n\nYou will also need to have the [required permissions](https://learn.microsoft.com/en-us/graph/permissions-reference) to be able to interact with  [the desired ressources](https://learn.microsoft.com/en-us/graph/api/overview?view=graph-rest-1.0&preserve-view=true). \n\n\n## Installation\n#TODO\n\n## Authentification\n\nTo authentificate you can use the `GraphAuthProvider` class in the `providers.auth module`.\n\nhere is how to use this class. it assumes that you have set the folowing environnement variables :\n\n* CLIENT_ID\n* CLIENT_SECRET\n* TENANT_ID\n\nThe class provide a method to fetch the token in the\nform of a `dict`.\n\n```python\nimport asyncio\nfrom aiopyo365.providers.auth import GraphAuthProvider\n\nasync def fetch_auth_header():\n    auth_provider =  GraphAuthProvider(\n            client_id=os.environ[\"CLIENT_ID\"],\n            client_secret=os.environ[\"CLIENT_SECRET\"],\n            tenant_id=os.environ[\"TENANT_ID\"],\n        )\n    return await auth_provider.auth()\n\n\nif __name__ == '__main__':\n    auth_header = asyncio.run(fetch_auth_header())\n    print(auth_header)\n\n\n# output : {\"authorization\": \"<token type> <token>\"}\n```\n\n## Ressources\nThe library tries to resemble the organization of the graph API documentation.\n\nfor instance in the Graph documentation you will find the [`DriveItems`](https://learn.microsoft.com/en-us/graph/api/resources/driveitem?view=graph-rest-1.0) under the `Files` section.  \nIn  `aiopyo365`: \n```python\nfrom aiopyo365.ressources.files import DriveItems\n```\nIf you want to work directly with ressources class you will need to instanciate a `aiohttp session` with `auth header` and instanciate the client class.\n\n```python\nimport asyncio\nimport aiohttp\nfrom aiopyo365.ressources.files import DriveItems\n\nasync def upload_smallfile(content,file_name):\n    auth_provider =  GraphAuthProvider(\n            client_id=os.environ[\"CLIENT_ID\"],\n            client_secret=os.environ[\"CLIENT_SECRET\"],\n            tenant_id=os.environ[\"TENANT_ID\"],\n        )\n    auth_header = await auth_provider.auth()\n    session = await aiohttp.ClientSession(headers=auth_header)\n    drive_items_client = DriveItems(base_url=\"url\", session=session)\n    await drive_items_client.upload_small_file(content, file_name)\n    \n```\nYou can also use factories\nto work with variant of ressources\nhere we work with a driveItems dedicated to SharePoint (site).\n\n```python\nimport asyncio\nimport aiohttp\nimport os\nfrom aiopyo365.providers.auth import GraphAuthProvider\nfrom aiopyo365.factories.drive_items import DriveItemsSitesFactory\n\nasync def upload_smallfile(content,file_name):\n    auth_provider =  GraphAuthProvider(\n            client_id=os.environ[\"CLIENT_ID\"],\n            client_secret=os.environ[\"CLIENT_SECRET\"],\n            tenant_id=os.environ[\"TENANT_ID\"],\n        )\n    auth_header = await auth_provider.auth()\n    session = await aiohttp.ClientSession(headers=auth_header)\n    drive_items_client = DriveItemsSitesFactory(site_id=\"site_id\").create(session=session)\n    await drive_items_client.upload_small_file(content, file_name)\n    \n```\n\n## Services\n\n`aiopyo365` provide also service class that encapsulate many ressource to match business logic. It hides dealing with instanciate class client and so on.\nLet's reuse the upload of a file example from above and use the `SharePointService`\n\n```python\nimport os\nfrom aiopyo365.providers.auth import GraphAuthProvider\nfrom aiopyo365.services.sharepoint import SharePointService\n\nasync def upload_smallfile(content,file_name):\n    auth_provider =  GraphAuthProvider(\n            client_id=os.environ[\"CLIENT_ID\"],\n            client_secret=os.environ[\"CLIENT_SECRET\"],\n            tenant_id=os.environ[\"TENANT_ID\"],\n        )\n    async with SharePointService(auth_provider,\"SHAREPOINT_HOSTNAME\",\"SHAREPOINT_SITE\") as sharepoint:\n        resp = await sharepoint.upload(\n            small_file_path, \"small_file\", conflict_behavior=\"replace\"\n        )\n        assert resp[\"createdDateTime\"]\n    \n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiopyo365",
    "package_url": "https://pypi.org/project/aiopyo365/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiopyo365/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/aiopyo365/0.1.1a0/",
    "requires_dist": [
      "aiohttp (>=3.8.3,<4.0.0)"
    ],
    "requires_python": ">=3.8.1,<4.0",
    "summary": "",
    "version": "0.1.1a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17053387,
  "releases": {
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2f67e784ae82ff652586e791eb2a91fbd01e807f3d8b9840f0edbf2b6d5037a",
          "md5": "7101750325c8814afe41988d50620ef9",
          "sha256": "cbe059d82bec1f2fc2c30bdcd91b004b7510aaf3d9c9a4b467046933c1052a4c"
        },
        "downloads": -1,
        "filename": "aiopyo365-0.1.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7101750325c8814afe41988d50620ef9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1,<4.0",
        "size": 9499,
        "upload_time": "2023-02-26T22:01:15",
        "upload_time_iso_8601": "2023-02-26T22:01:15.006562Z",
        "url": "https://files.pythonhosted.org/packages/b2/f6/7e784ae82ff652586e791eb2a91fbd01e807f3d8b9840f0edbf2b6d5037a/aiopyo365-0.1.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6790421dcd8df2723dbf6d4b0f716e4bbc246400cd9069bccab0ddf681d75834",
          "md5": "e8a1475814f45b6cbb925b294c3dcfdf",
          "sha256": "8a4626cdb8047db5bee3ff61b1b30eaec0f6b3ed75d9218115b5c0373baa688d"
        },
        "downloads": -1,
        "filename": "aiopyo365-0.1.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8a1475814f45b6cbb925b294c3dcfdf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1,<4.0",
        "size": 7953,
        "upload_time": "2023-02-26T22:01:16",
        "upload_time_iso_8601": "2023-02-26T22:01:16.880668Z",
        "url": "https://files.pythonhosted.org/packages/67/90/421dcd8df2723dbf6d4b0f716e4bbc246400cd9069bccab0ddf681d75834/aiopyo365-0.1.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2f67e784ae82ff652586e791eb2a91fbd01e807f3d8b9840f0edbf2b6d5037a",
        "md5": "7101750325c8814afe41988d50620ef9",
        "sha256": "cbe059d82bec1f2fc2c30bdcd91b004b7510aaf3d9c9a4b467046933c1052a4c"
      },
      "downloads": -1,
      "filename": "aiopyo365-0.1.1a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7101750325c8814afe41988d50620ef9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1,<4.0",
      "size": 9499,
      "upload_time": "2023-02-26T22:01:15",
      "upload_time_iso_8601": "2023-02-26T22:01:15.006562Z",
      "url": "https://files.pythonhosted.org/packages/b2/f6/7e784ae82ff652586e791eb2a91fbd01e807f3d8b9840f0edbf2b6d5037a/aiopyo365-0.1.1a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6790421dcd8df2723dbf6d4b0f716e4bbc246400cd9069bccab0ddf681d75834",
        "md5": "e8a1475814f45b6cbb925b294c3dcfdf",
        "sha256": "8a4626cdb8047db5bee3ff61b1b30eaec0f6b3ed75d9218115b5c0373baa688d"
      },
      "downloads": -1,
      "filename": "aiopyo365-0.1.1a0.tar.gz",
      "has_sig": false,
      "md5_digest": "e8a1475814f45b6cbb925b294c3dcfdf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1,<4.0",
      "size": 7953,
      "upload_time": "2023-02-26T22:01:16",
      "upload_time_iso_8601": "2023-02-26T22:01:16.880668Z",
      "url": "https://files.pythonhosted.org/packages/67/90/421dcd8df2723dbf6d4b0f716e4bbc246400cd9069bccab0ddf681d75834/aiopyo365-0.1.1a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}