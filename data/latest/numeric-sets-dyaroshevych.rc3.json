{
  "info": {
    "author": "Dmytro Yaroshevych",
    "author_email": "dyaroshevych@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# numeric_sets\n\nAllows you to perform all operations on sets of numeric intervals.\n\n## Usage example\n\nImport classes from the main module of the package into your Python script.\n\n```python3\nfrom numeric_sets.main import Interval, NumericSet\n\nmain.main()\n```\n\nFeel free to perform any operation!\n\n```python3\nmyset_1 = NumericSet()\n\nmyset_1.add(Interval(2, 4, True, True))  # [2, 4]\nmyset_1.add(Interval(5, 7))  # (5, 7)\nmyset_1.add(Interval(8, 10, is_end_inclusive=True))  # (8, 10]\n\nmyset_2 = NumericSet()\n\nmyset_2.add(Interval(2, 5))  # (2, 5)\nmyset_2.add(Interval(6, 9))  # (6, 9)\n\nunion = myset_1.union(\n    myset_2)  # [2, 5) + (5, 10]\n```\n\n## Methods description\n\n### Interval class\n\n#### get_formatted\n\nReturns formatted interval as a string.\n\n```python3\nmy_interval = Interval(2, 5, is_start_inclusive=True)\n\nmy_interval.get_formatted()\n```\n\n##### Return\n\nInterval as a formatted string.\n\n#### is_overlapping\n\nDetermines whether the interval overlaps with the given interval.\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = Interval(4, 8)\n\nmy_interval_1.is_overlapping(my_interval_2)\n```\n\n##### Arguments\n\n- **interval** a numeric interval\n\n##### Return\n\nTrue if intervals overlap, False otherweise.\n\n#### is_almost_overlapping\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = Interval(4, 8)\n\nmy_interval_1.is_almost_overlapping(my_interval_2)\n```\n\nDetermines whether the interval almost overlaps with the given interval.\n\n##### Arguments\n\n- **interval** a numeric interval\n\n##### Return\n\nTrue if intervals almost overlap, False otherweise.\n\n#### includes\n\nDetermines whether the interval includes the given point.\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = Interval(4, 8)\n\nmy_interval_1.includes(my_interval_2)\n```\n\n##### Arguments\n\n- **point** a numeric point\n\n##### Return\n\nTrue if the interval includes the given point, False otherweise.\n\n#### copy\n\nCopies the interval.\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = my_interval_1.copy()\n```\n\n##### Return\n\nA copy of the interval.\n\n#### difference `[static]`\n\nReturns the difference between two given intervals.\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = Interval(4, 8)\n\ndiff = Interval.difference(my_interval_1, my_interval_2)\n```\n\n##### Arguments\n\n- **interval_1** a numeric interval\n- **interval_2** a numeric interval\n\n##### Return\n\nDifference between two given intervals.\n\n#### intersection `[static]`\n\nReturns the intersection of two given intervals.\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = Interval(4, 8)\n\nintersection = Interval.intersection(my_interval_1, my_interval_2)\n```\n\n##### Arguments\n\n- **interval_1** a numeric interval\n- **interval_2** a numeric interval\n\n##### Return\n\nIntersection of two given intervals.\n\n#### union `[static]`\n\nReturns the union of two given intervals.\n\n```python3\nmy_interval_1 = Interval(2, 5)\nmy_interval_2 = Interval(4, 8)\n\nunion = Interval.union(my_interval_1, my_interval_2)\n```\n\n##### Arguments\n\n- **interval_1** a numeric interval\n- **interval_2** a numeric interval\n\n##### Return\n\nUnion of two given intervals.\n\n### NumericSet methods\n\n#### get_left_intervals\n\nConstructs a list of intervals to the left from the interval.\n\n```python3\nmyset = NumericSet([Interval(3, 5), Interval(10, 12)])\n\n\nleft = myset.get_left_intervals((6, 8))\n```\n\n##### Arguments\n\n- **interval** a numeric interval\n\n##### Return\n\nA list of intervals to the left from the interval.\n\n#### get_right_intervals\n\nConstructs a list of intervals to the right from the interval.\n\n```python3\nmyset = NumericSet([Interval(3, 5), Interval(10, 12)])\n\n\nright = myset.get_right_intervals((6, 8))\n```\n\n##### Arguments\n\n- **interval** a numeric interval\n\n##### Return\n\nA list of intervals to the right from the interval.\n\n#### add\n\nAdds a numeric interval to the set.\n\n```python3\nmyset = NumericSet()\n\nmyset.add(Interval(3, 5))\nmyset.add(Interval(10, 12))\n```\n\n##### Arguments\n\n- **interval** a numeric interval\n\n#### clear\n\nClears the set from all numeric intervals.\n\n```python3\nmyset = NumericSet()\n\nmyset.add(Interval(3, 5))\nmyset.add(Interval(10, 12))\n\nmyset.clear()\n```\n\n#### copy\n\nCopies the numeric set.\n\n```python3\nmyset = NumericSet()\n\nmyset.add(Interval(3, 5))\nmyset.add(Interval(10, 12))\n\ncopy = myset.copy()\n```\n\n##### Return\n\nA copy of the numric set.\n\n#### difference\n\nConstructs a set representing the difference between the set and the given set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\ndiff = myset_1.difference(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n##### Return\n\nThe difference between the set and the given set.\n\n#### difference_update\n\nConstructs a set representing the difference between the set and the given set and updates the set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nmyset_1.difference_update(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n#### intersection\n\nConstructs a set representing the intersection of the set and the given set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nintersection = myset_1.intersection(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n##### Return\n\nThe intersection of the set and the given set.\n\n#### intersection_update\n\nConstructs a set representing the intersection of the set and the given set and updates the set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nmyset_1.intersection_update(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n#### issubset\n\nDetermines whether the set is a subset of the given set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4)])\n\nis_subset = myset_2.is_subset(myset_1)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n##### Return\n\nTrue if the interval is a subset of the given interval, False otherweise.\n\n#### issuperset\n\nDetermines whether the set is a superset of the given set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4)])\n\nis_superset = myset_1.is_superset(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n##### Return\n\nTrue if the interval is a superset of the given interval, False otherweise.\n\n#### pop\n\nRemoves the rightmost interval if such exists.\n\n```python3\nmyset = NumericSet([Interval(3, 5), Interval(10, 12)])\n\nlast_interval = myset.pop()\n```\n\n##### Return\n\nThe rightmost interval if such exists, None otherwise.\n\n#### remove\n\nRemoves a numeric interval from the numeric set.\n\n```python3\nmyset = NumericSet([Interval(3, 5), Interval(10, 12)])\n\nmyset.remove(Interval(2, 4))\n```\n\n##### Arguments\n\n- **interval** a numeric interval\n\n#### symmetric_difference\n\nConstructs a set representing the symmetric difference of two sets.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nsymmetric_diff = myset_1.symmetric_difference(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n##### Return\n\nThe symmetric difference of the set and the given set.\n\n#### symmetric_difference_update\n\nConstructs a set representing the symmetric difference of the set and the given set and updates the set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nmyset_1.symmetric_difference_update(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n#### union\n\nConstructs a set representing the union of two sets.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nunion = myset_1.union(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n##### Return\n\nThe union of the set and the given set.\n\n#### update\n\nConstructs a set representing the union of the set and the given set and updates the set.\n\n```python3\nmyset_1 = NumericSet([Interval(3, 5), Interval(10, 12)])\nmyset_2 = NumericSet([Interval(2, 4), Interval(11, 15)])\n\nmyset_1.update(myset_2)\n```\n\n##### Arguments\n\n- **numeric_set** a numeric set\n\n#### is_empty\n\nDetermines whether a set of intervals is empty.\n\n```python3\nmyset = NumericSet([Interval(3, 5))])\n\nis_empty = myset_1.is_empty()\n```\n\n##### Return\n\nTrue if the set is empty, False otherweise.\n\n#### save\n\nSaves a set of numeric intervals in the given file.\n\n```python3\nmyset = NumericSet([Interval(3, 5))])\n\nmyset_1.save('myset_1.txt')\n```\n\n##### Arguments\n\n- **filename** the name of the file\n\n#### read `[static]`\n\nReads a set of numerical intervals from the given file.\n\n```python3\nmyset = NumericSet.read('myset_1.txt')\n```\n\n##### Arguments\n\n- **filename** the name of the file\n\n## Meta\n\nDmytro Yaroshevych â€“ dyaroshevych@gmail.com\n\nDistributed under the MIT license. See `LICENSE` for more information.\n\n[https://github.com/dyaroshevych/numeric_sets](https://github.com/dyaroshevych/numeric_sets)\n\n## Contributing\n\n1. Fork it (<https://github.com/dyaroshevych/numeric_sets/fork>)\n2. Create your feature branch (`git checkout -b feature/fooBar`)\n3. Commit your changes (`git commit -am 'Add some fooBar'`)\n4. Push to the branch (`git push origin feature/fooBar`)\n5. Create a new Pull Request\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dyaroshevych/numeric_sets",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "numeric-sets-dyaroshevych",
    "package_url": "https://pypi.org/project/numeric-sets-dyaroshevych/",
    "platform": "",
    "project_url": "https://pypi.org/project/numeric-sets-dyaroshevych/",
    "project_urls": {
      "Homepage": "https://github.com/dyaroshevych/numeric_sets"
    },
    "release_url": "https://pypi.org/project/numeric-sets-dyaroshevych/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A package for performing operations on numeric sets",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9097885,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41da11683f04c7cf2f72ed1c9f616419c93901139ad732b7a6e8be22d1cf591b",
          "md5": "3e2d27b9b6be6b0f69e9067fa65dec55",
          "sha256": "ea12e8170d7e8878c88fa1597ea7e9cfb3f18287d96ad220e7d90bd781a0aa87"
        },
        "downloads": -1,
        "filename": "numeric_sets_dyaroshevych-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e2d27b9b6be6b0f69e9067fa65dec55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6261,
        "upload_time": "2021-01-10T13:27:33",
        "upload_time_iso_8601": "2021-01-10T13:27:33.669842Z",
        "url": "https://files.pythonhosted.org/packages/41/da/11683f04c7cf2f72ed1c9f616419c93901139ad732b7a6e8be22d1cf591b/numeric_sets_dyaroshevych-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "661e2745793aa5394d676014d903762770c9564b1ccd66604cbe5b50a87f4b1b",
          "md5": "3dbb7cf0d2f664a64fb8767026de3fdf",
          "sha256": "631bdd4ec6218964c2dfc9185cf4b559f4c46859e4c36790b680acc928c575fb"
        },
        "downloads": -1,
        "filename": "numeric_sets_dyaroshevych-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3dbb7cf0d2f664a64fb8767026de3fdf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 5210,
        "upload_time": "2021-01-10T13:27:34",
        "upload_time_iso_8601": "2021-01-10T13:27:34.911575Z",
        "url": "https://files.pythonhosted.org/packages/66/1e/2745793aa5394d676014d903762770c9564b1ccd66604cbe5b50a87f4b1b/numeric_sets_dyaroshevych-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a7ca8ef99373d9ee1409a9ae0a9557908de637cdb0c82995a62f25ebe82aae3",
          "md5": "1bc4817a9c190e4c0d55438543d73fbc",
          "sha256": "f2f4daee670a6eab5c462e5ac781b6d537bbee030b4becac8d380e6718c77f29"
        },
        "downloads": -1,
        "filename": "numeric_sets_dyaroshevych-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bc4817a9c190e4c0d55438543d73fbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7112,
        "upload_time": "2021-01-10T14:41:58",
        "upload_time_iso_8601": "2021-01-10T14:41:58.877088Z",
        "url": "https://files.pythonhosted.org/packages/5a/7c/a8ef99373d9ee1409a9ae0a9557908de637cdb0c82995a62f25ebe82aae3/numeric_sets_dyaroshevych-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "070c918e111dd24ada4cfee4b482c3e3101c1ebf73ff4d55514e37a2be850f08",
          "md5": "6830faaaeb492419333d309e3090311b",
          "sha256": "5b22d0c4db02bdbfe0e14d6df253c9bbcb76a08b79096c8ece231f6c2e8e9932"
        },
        "downloads": -1,
        "filename": "numeric_sets_dyaroshevych-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6830faaaeb492419333d309e3090311b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7496,
        "upload_time": "2021-01-10T14:42:00",
        "upload_time_iso_8601": "2021-01-10T14:42:00.720917Z",
        "url": "https://files.pythonhosted.org/packages/07/0c/918e111dd24ada4cfee4b482c3e3101c1ebf73ff4d55514e37a2be850f08/numeric_sets_dyaroshevych-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83eece9770fe1f79dcdff7271bc17d4405150ddebd5bd7826bce4683a4ea3a03",
          "md5": "f75ee4c13d6b48628b853ca4ea0b9d2e",
          "sha256": "77f956ed809446042b4bd3e3d6772853177b8ae8b898d6166f46c3b5d4faaf48"
        },
        "downloads": -1,
        "filename": "numeric_sets_dyaroshevych-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f75ee4c13d6b48628b853ca4ea0b9d2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7488,
        "upload_time": "2021-01-10T14:57:58",
        "upload_time_iso_8601": "2021-01-10T14:57:58.897653Z",
        "url": "https://files.pythonhosted.org/packages/83/ee/ce9770fe1f79dcdff7271bc17d4405150ddebd5bd7826bce4683a4ea3a03/numeric_sets_dyaroshevych-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed5549a6622d2e774385377d0f00b7c38c345b5cc71ca32e0861ca03ba0cb9dd",
          "md5": "e8ab6c3acbc77a09aa36b99258139bb7",
          "sha256": "a7b4a587d6002544d868fb9ada106d2cb0d0107df6c03cf7654a7d84ac04728e"
        },
        "downloads": -1,
        "filename": "numeric_sets_dyaroshevych-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e8ab6c3acbc77a09aa36b99258139bb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8452,
        "upload_time": "2021-01-10T14:58:00",
        "upload_time_iso_8601": "2021-01-10T14:58:00.720564Z",
        "url": "https://files.pythonhosted.org/packages/ed/55/49a6622d2e774385377d0f00b7c38c345b5cc71ca32e0861ca03ba0cb9dd/numeric_sets_dyaroshevych-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83eece9770fe1f79dcdff7271bc17d4405150ddebd5bd7826bce4683a4ea3a03",
        "md5": "f75ee4c13d6b48628b853ca4ea0b9d2e",
        "sha256": "77f956ed809446042b4bd3e3d6772853177b8ae8b898d6166f46c3b5d4faaf48"
      },
      "downloads": -1,
      "filename": "numeric_sets_dyaroshevych-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f75ee4c13d6b48628b853ca4ea0b9d2e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7488,
      "upload_time": "2021-01-10T14:57:58",
      "upload_time_iso_8601": "2021-01-10T14:57:58.897653Z",
      "url": "https://files.pythonhosted.org/packages/83/ee/ce9770fe1f79dcdff7271bc17d4405150ddebd5bd7826bce4683a4ea3a03/numeric_sets_dyaroshevych-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed5549a6622d2e774385377d0f00b7c38c345b5cc71ca32e0861ca03ba0cb9dd",
        "md5": "e8ab6c3acbc77a09aa36b99258139bb7",
        "sha256": "a7b4a587d6002544d868fb9ada106d2cb0d0107df6c03cf7654a7d84ac04728e"
      },
      "downloads": -1,
      "filename": "numeric_sets_dyaroshevych-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e8ab6c3acbc77a09aa36b99258139bb7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 8452,
      "upload_time": "2021-01-10T14:58:00",
      "upload_time_iso_8601": "2021-01-10T14:58:00.720564Z",
      "url": "https://files.pythonhosted.org/packages/ed/55/49a6622d2e774385377d0f00b7c38c345b5cc71ca32e0861ca03ba0cb9dd/numeric_sets_dyaroshevych-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}