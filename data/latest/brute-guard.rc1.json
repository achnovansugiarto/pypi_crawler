{
  "info": {
    "author": "Igor Rodrigues Sousa Silva",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# BruteGuard\n\n- A Lightweight tool for preventing Brute Force Attacks.\n\n## Features\n\n- [Introduction](#introduction)\n- [sqlite3](#sqlite3)\n    - [Examples](#examples)\n        - [Block IPs](#block-ips)\n        - [Block usernames](#block-usernames)\n    - [Attributes](#attributes)\n    - [Default configs](#default-configurations)\n- [Control object](#control-object)\n\n## Introduction\n\n- The goal of this tool is to block IPs or usernames that try to access some resource and fail consecutively in a time range.\n \n- Currently this tool support the follow databases: \n    - [sqlite3](https://www.sqlite.org/docs.html)\n\n\n### SQLite3\n\nBlock brute force attacks using sqlite3 under the hood.\n\n#### Examples\n\n##### Block IPs\n\n- Below is an example that blocks a specific IP that fails 4 times (```failures```) consecutively in an interval of 1 second (```failure_time```). Each blocked IP will be blocked by 1 second (```blocked_expires_at```):\n\n```python\nimport time\n\nfrom brute_guard.sqlite3 import BruteGuard\n\nbg = BruteGuard(\n    blocked_expires_at=\"+1 second\",\n    failure_time=\"-1 second\",\n    failures=4,\n    database_url=\"/tmp/bg.sqlite\"\n)\nbg.control.create_tables() # Create table if exists\n\nattacker_ip = \"10.10.10.10\"\n\n# Registering fail access\nbg.ip.access(\"fake-user1\", attacker_ip, success=False)\nbg.ip.access(\"fake-user2\", attacker_ip, success=False)\nbg.ip.access(\"some-user\", attacker_ip, success=False)\nbg.ip.access(\"some-user\", attacker_ip, success=False)\n\n\nif bg.ip.is_blocked(attacker_ip):\n    print(f'\"{attacker_ip}\" is blocked.')\n\nprint(\"Sleeping 1 second\")\ntime.sleep(1)\n\n\nif bg.ip.is_blocked(attacker_ip) is False:\n    print(f'\"{attacker_ip}\" is allow.')\n```\n\n##### Block usernames\n\n- Below is an example that blocks a specific username that fails 3 times (```failures```) consecutively in an interval of 2 seconds (```failure_time```). Each blocked IP will be blocked by 2 seconds (```blocked_expires_at```):\n\n```python\nimport time\n\nfrom brute_guard.sqlite3 import BruteGuard\n\nbg = BruteGuard(\n    blocked_expires_at=\"+2 second\",\n    failure_time=\"-2 second\",\n    failures=3,\n    database_url=\"/tmp/bg.sqlite\"\n)\nbg.control.create_tables() # Create table if exists\n\nusername = \"some.username\"\n\n# Registering fail access\nbg.user.access(username, \"3.10.24.4\", success=False)\nbg.user.access(username, \"3.10.12.4\", success=False)\nbg.user.access(username, \"4.15.10.4\", success=False)\n\n\nif bg.user.is_blocked(username):\n    print(f'\"{username}\" is blocked.')\n\n\nprint(\"Sleeping 2 second\")\ntime.sleep(2)\n\n\nif bg.user.is_blocked(username) is False:\n    print(f'\"{username}\" is allow.')\n```\n\n\n### Attributes\n\n```python\n@dataclass\nclass BruteGuard:\n    access_expires_at: str = \"+1 day\"\n    blocked_expires_at: str = \"+1 hour\"\n    failure_time: str = \"-10 second\"\n    failures: int = 8\n    purge_time: Optional[timedelta] = timedelta(minutes=60)\n    database_url: str = \"/tmp/db.sqlite\"\n```\n\n- **access_expires_at**: Time value for to expire access data using SQLite3 [Modifiers](https://www.sqlite.org/lang_datefunc.html) pattern. You must use a plus signal because the record will expire in the future.\n    - Examples: \"+1 day\" | \"+2 day\" | etc.\n\n- **blocked_expires_at**: Time value for to expire access data using SQLite3 [Modifiers](https://www.sqlite.org/lang_datefunc.html) pattern. You must use a plus signal because the record will expire in the future.\n    - Examples: \"+1 hour\" | \"+4 hour\" | etc.\n\n- **failures**: The amount of accepted consecutive failures. \n\n- **failure_time**: Time interval for verifying the consecutive failures.\n    - Examples: \"-5 second\" | \"-10 second\" | etc.\n\n- **purge_time**: Define time to purge expired data.\n    - If you use this configuration in the next **access** will be executed a delete (with vacuum) of expired data.\n    - To disable this expiration, set **purge_time** to **None**.\n\n- **database_url**: Connection string for use in ```connect``` function. There is no any treatment in this value before passing to connect function, so, you can use any value accepted by  [connect](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect) function.\n    - We recommend that you use a database in a file.\n    - We do not recommend that you use a memory database because if you start a multiprocessing application each process will have a different database.\n\n**Note**: **failures** and **failure_time** defines the following: If an IP (or username) fails consecutively **failures** times in the last **failure_time** (interval time) this IP will be blocked.\n\n\n#### Default configurations\n\n- [*synchronous = off*](https://www.sqlite.org/pragma.html#pragma_synchronous)\n- [*auto_vacuum = 1*](https://www.sqlite.org/pragma.html#pragma_auto_vacuum)\n- [*cache_size = 2000*](https://www.sqlite.org/pragma.html#pragma_cache_size)\n\n### Control object\n\n- This object is used to control some operations in the database.\n\n```python\nfrom brute_guard.sqlite3 import BruteGuard\n\nbg = BruteGuard()\nbg.control.create_tables()\nbg.control.drop_tables()\nbg.control.purge_all()\nbg.control.purge_expired()\n```\n- **create_tables**: Create ```access``` table and ```blocked``` table if not exist.\n- **drop_tables**: Drop ```access``` table and ```blocked``` table if exist.\n- **purge_all**: Purge all data from ```access``` table and ```blocked``` table.\n- **purge_expired**: Purge all expired data from ```access``` table and ```blocked``` table.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "security brute force attack authentications auth cybersecurity",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "brute-guard",
    "package_url": "https://pypi.org/project/brute-guard/",
    "platform": null,
    "project_url": "https://pypi.org/project/brute-guard/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/brute-guard/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A Lightweight tool for preventing Brute Force Attacks",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15322193,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dffa7db3bfab0d7cf6072ac8987d2a8ab2cbd41c01d29ce5551b9f26d401ce79",
          "md5": "fc1926aae2677aa8fa4ba6c6c5a62186",
          "sha256": "31938a92833fabb26df41329048a7f7b4649981ed22f45d7a6933d13196d5aa1"
        },
        "downloads": -1,
        "filename": "brute_guard-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc1926aae2677aa8fa4ba6c6c5a62186",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7661,
        "upload_time": "2022-10-06T11:29:35",
        "upload_time_iso_8601": "2022-10-06T11:29:35.272888Z",
        "url": "https://files.pythonhosted.org/packages/df/fa/7db3bfab0d7cf6072ac8987d2a8ab2cbd41c01d29ce5551b9f26d401ce79/brute_guard-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dffa7db3bfab0d7cf6072ac8987d2a8ab2cbd41c01d29ce5551b9f26d401ce79",
        "md5": "fc1926aae2677aa8fa4ba6c6c5a62186",
        "sha256": "31938a92833fabb26df41329048a7f7b4649981ed22f45d7a6933d13196d5aa1"
      },
      "downloads": -1,
      "filename": "brute_guard-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc1926aae2677aa8fa4ba6c6c5a62186",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7661,
      "upload_time": "2022-10-06T11:29:35",
      "upload_time_iso_8601": "2022-10-06T11:29:35.272888Z",
      "url": "https://files.pythonhosted.org/packages/df/fa/7db3bfab0d7cf6072ac8987d2a8ab2cbd41c01d29ce5551b9f26d401ce79/brute_guard-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}