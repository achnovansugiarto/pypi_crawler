{
  "info": {
    "author": "",
    "author_email": "Tomio13 <haraszti@dwi.rwth-aachen.de>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pubchem tools\nis a small packet to query the pubchem APIs. For simple and easy access,\none can use the pubchempy library.\nIt is not as nice as pubchempy neither so complete, but works well for\nthings like finding CAS numbers, safety codes, and anything one knows in\nthe record.\nKey point: it works with pulling the record, not querying it every time\none asks a question.\n\n## pubchem has two interfaces\nActually the PUG-RES API is available two ways:\n * [to query a compound by name](https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/)\n * [or to get a full record in JSON format](https://pubchem.ncbi.nlm.nih.gov/rest/pug\\_view/data/compound/{res[0]}/JSON/?response\\_type=display)\n\nand they provide slightly different facilities.\nUsing the former, one can get simple answer to things like:\nwhat is the CID (or pubchem ID) of compound 'a'?\nThe latter fetches the full record in a hierarchic JSON object.\n\n## using only pug\nTrying the various output methods did not provide a response as rich as\nthe pug\\_view did. Thus, the double call is important at the moment.\n\n# Handling the JSON hierarchy\nOne thing to do is to pick out the internal lists of dicts to\nsome objects, e.g. turning them to dicts. Then a crawler\nacross the dict structure can discover information we need.\nWe use the dictDigUtils, a c.a. 5 kB set of functions help digging the\nhierarchy returned by the json python library.\n\nLists are:\n* Section\n* Value\n* StringWithMarkup\n* Number\n* Boolean\n\nFuncitons like clean\\_section help managing this.\n\nA Pubchem class is formed which has simple get\\_value calls to provide\nparameters, such as molecular\\_weight, molecular\\_formula, etc.\n\n# full record\nis available as the \\_record\\_ private variable. Some parts are simplified\nduring the processing to remove formating instructions, not needed\nhere.\nYou can always use:\n\n```python\na = Pubchem('your molecule')\nget_value('Molecular Weight', a._record_)\n```\n\nto query into the record. dictDigUtils can provide you dict\\_list\\_keys\nto discover possible keys within.\n\n# names and synonyms\nThe PUG-RES API will recognize any names what is listed in the synonym list,\nthus one needs no other trics to find the material. However, foreign names\nmay be encoded e.g. the German Ã¤ as ae.\nNow the list of synonyms is available as the synonyms element of the class.\n\n# InChi\nThere are two fields coming from Pubchem:\n * InChI key\n * InChI, which is indicated with InChi= in the text\n\n# density\nThe data set may contain several versions of this, and unfortunately\nit is not really uniform across the chemicals.\nThere are:\n - a number\n - a number and unit\n - < a value\n - reference to a table image\n - a text describing value ranges and conditions\nSo, for now, the function just returns the list it finds.\n\nA bit more generic solution is to allow a filter in the general searc.\nThis is now the get_value_filtered() function, which handles the density\nand the CAS numbers. For density, use a cut for vapor values. Others did\nnot work, because they were listed under the same key.\n\n1.0.9: bugfix a typo in pubchem.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pubchemTool",
    "package_url": "https://pypi.org/project/pubchemTool/",
    "platform": null,
    "project_url": "https://pypi.org/project/pubchemTool/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pubchemTool/1.0.9/",
    "requires_dist": [
      "dictDigUtils"
    ],
    "requires_python": "",
    "summary": "",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16474303,
  "releases": {
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bab9e1efdd329b1542d898a3512aebb99f76ac10cdedf594e2a4f586b75b2ab",
          "md5": "2fc6ed6fa07a1d266193d16ce3daa435",
          "sha256": "02ab41ef2710ba0654d888297a06a65dd3c97479f49b4173e5b4e4179fd380fc"
        },
        "downloads": -1,
        "filename": "pubchemTool-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fc6ed6fa07a1d266193d16ce3daa435",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7269,
        "upload_time": "2023-01-18T16:44:13",
        "upload_time_iso_8601": "2023-01-18T16:44:13.605495Z",
        "url": "https://files.pythonhosted.org/packages/8b/ab/9e1efdd329b1542d898a3512aebb99f76ac10cdedf594e2a4f586b75b2ab/pubchemTool-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d78784448180e71b3e348df43d08b3474e8c197593ca8e1ac29b9c9035465519",
          "md5": "511f896da6b4bb5a3749d930d9bc8a53",
          "sha256": "6df341efcbf6e44054350ee66993da5ff5b082e34891c0611ed702e78139542d"
        },
        "downloads": -1,
        "filename": "pubchemTool-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "511f896da6b4bb5a3749d930d9bc8a53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7004,
        "upload_time": "2023-01-18T16:44:14",
        "upload_time_iso_8601": "2023-01-18T16:44:14.867505Z",
        "url": "https://files.pythonhosted.org/packages/d7/87/84448180e71b3e348df43d08b3474e8c197593ca8e1ac29b9c9035465519/pubchemTool-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bab9e1efdd329b1542d898a3512aebb99f76ac10cdedf594e2a4f586b75b2ab",
        "md5": "2fc6ed6fa07a1d266193d16ce3daa435",
        "sha256": "02ab41ef2710ba0654d888297a06a65dd3c97479f49b4173e5b4e4179fd380fc"
      },
      "downloads": -1,
      "filename": "pubchemTool-1.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2fc6ed6fa07a1d266193d16ce3daa435",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7269,
      "upload_time": "2023-01-18T16:44:13",
      "upload_time_iso_8601": "2023-01-18T16:44:13.605495Z",
      "url": "https://files.pythonhosted.org/packages/8b/ab/9e1efdd329b1542d898a3512aebb99f76ac10cdedf594e2a4f586b75b2ab/pubchemTool-1.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d78784448180e71b3e348df43d08b3474e8c197593ca8e1ac29b9c9035465519",
        "md5": "511f896da6b4bb5a3749d930d9bc8a53",
        "sha256": "6df341efcbf6e44054350ee66993da5ff5b082e34891c0611ed702e78139542d"
      },
      "downloads": -1,
      "filename": "pubchemTool-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "511f896da6b4bb5a3749d930d9bc8a53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7004,
      "upload_time": "2023-01-18T16:44:14",
      "upload_time_iso_8601": "2023-01-18T16:44:14.867505Z",
      "url": "https://files.pythonhosted.org/packages/d7/87/84448180e71b3e348df43d08b3474e8c197593ca8e1ac29b9c9035465519/pubchemTool-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}