{
  "info": {
    "author": "iwishiwasaneagle",
    "author_email": "jh.ewers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent"
    ],
    "description": "# pytest-extra-markers\n[![CI](https://github.com/iwishiwasaneagle/pytest-extra-markers/actions/workflows/CI.yml/badge.svg)](https://github.com/iwishiwasaneagle/pytest-extra-markers/actions/workflows/CI.yml) [![CD](https://github.com/iwishiwasaneagle/pytest-extra-markers/actions/workflows/CD.yml/badge.svg)](https://github.com/iwishiwasaneagle/pytest-extra-markers/actions/workflows/CD.yml)\n\nA [pytest](https://docs.pytest.org) plugin to dynamically skip tests based on [marks](https://docs.pytest.org/en/latest/reference/reference.html#marks)\n\n## Installation\n\n```bash\npip install git+https://github.com/iwishiwasaneagle/pytest-extra-markers@master\n```\n\n## Usage\n\nConsider the following test scenario:\n\n```python\nimport pytest\n\n\n# A\ndef test_speedy_unit_test():\n    ...\n\n\n# B\n@pytest.mark.integration\ndef test_integration_test():\n    ...\n\n\n# C\n@pytest.mark.slow_integration\ndef test_super_slow_integration_test():\n    ...\n```\n\nYou want to quickly run all your quick unit tests before committing. Then, after you are happy that the changes haven't messed up any unit tests you want to run the integration tests, and then after that your *super* slow integration tests. This would look like:\n\n```bash\npytest\npytest --only-integration\npytest --only-slow-integration\n```\n\nIn theory, your quick unit tests give you feedback instantly about anything that's been\nbroken by your changes. After that, the slower integration tests can be run to have a\nmore broad check.\n\n> **Author's note**\n> My use cases is mainly for simulations, so the `--only-slow-integration` flag\n> can sometimes take tens of minutes to run whereas an integration test might take\n> milliseconds. Therefore, I made the distinction between the two.\n\n## CLI Flags\n\n| Flag                     | Description                           |\n|--------------------------|---------------------------------------|\n| `--with-integration`      | Run all unit + integration tests      |\n| `--with-slow-integration` | Run all unit + slow integration tests |\n| `--only-integration`      | Only run integration tests            |\n| `--only-slow-integration` | Only run slow integration tests       |\n\n## Todo\n\n- [ ] Publish to PyPi\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iwishiwasaneagle/pytest-extra-markers/",
    "keywords": "",
    "license": "GPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-extra-markers",
    "package_url": "https://pypi.org/project/pytest-extra-markers/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/pytest-extra-markers/",
    "project_urls": {
      "Changelog": "https://github.com/iwishiwasaneagle/pytest-extra-markers/blob/master/CHANGELOG.md",
      "Homepage": "https://github.com/iwishiwasaneagle/pytest-extra-markers/",
      "Issue Tracker": "https://github.com/iwishiwasaneagle/pytest-extra-markers/issues/",
      "Source": "https://github.com/iwishiwasaneagle/pytest-extra-markers/"
    },
    "release_url": "https://pypi.org/project/pytest-extra-markers/1.0.0/",
    "requires_dist": [
      "pytest",
      "importlib-metadata ; python_version < \"3.8\""
    ],
    "requires_python": ">=3.9",
    "summary": "Additional pytest markers to dynamically enable/disable tests viia CLI flags",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17164749,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94355ae7452dc0f8e877511e7db80e173721509b52c9996cf9aebaf7ba034197",
          "md5": "7bde80ecb9ef0ac371c357c80a9c4fd5",
          "sha256": "1a09dba8e47d628239c7472aaac874ca9ff23d0a963363288ee1058a4729fa6b"
        },
        "downloads": -1,
        "filename": "pytest_extra_markers-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bde80ecb9ef0ac371c357c80a9c4fd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 14972,
        "upload_time": "2023-03-05T15:05:25",
        "upload_time_iso_8601": "2023-03-05T15:05:25.277926Z",
        "url": "https://files.pythonhosted.org/packages/94/35/5ae7452dc0f8e877511e7db80e173721509b52c9996cf9aebaf7ba034197/pytest_extra_markers-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94355ae7452dc0f8e877511e7db80e173721509b52c9996cf9aebaf7ba034197",
        "md5": "7bde80ecb9ef0ac371c357c80a9c4fd5",
        "sha256": "1a09dba8e47d628239c7472aaac874ca9ff23d0a963363288ee1058a4729fa6b"
      },
      "downloads": -1,
      "filename": "pytest_extra_markers-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7bde80ecb9ef0ac371c357c80a9c4fd5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 14972,
      "upload_time": "2023-03-05T15:05:25",
      "upload_time_iso_8601": "2023-03-05T15:05:25.277926Z",
      "url": "https://files.pythonhosted.org/packages/94/35/5ae7452dc0f8e877511e7db80e173721509b52c9996cf9aebaf7ba034197/pytest_extra_markers-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}