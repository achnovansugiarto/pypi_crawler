{
  "info": {
    "author": "Libro.org",
    "author_email": "admin@libro.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# About\n\nA collection of tools Libro.org uses to produce its ebooks, including basic setup of ebooks, text processing, and build tools.\n\nForked from [Standard Ebooks tools](https://github.com/standardebooks/tools).\n\nInstalling this toolset using `pipx` makes the `libro` command line executable available. Its various commands are described below, or you can use `libro help` to list them.\n\n[![Project Status: WIP – Initial development is in progress, but there has not yet been a stable, usable release suitable for the public.](https://www.repostatus.org/badges/latest/wip.svg)](https://www.repostatus.org/#wip)\n\n# Project status\n\n|          Feature          | Status |\n| :-----------------------: | ------ |\n| adapt commands to Spanish | WIP    |\n|    Libro.org skeleton     | WIP    |\n|     shell completions     | TO-DO  |\n\n# Installation\n\nThe toolset requires Python >= 3.6.\n\nTo install the toolset locally for development and debugging, see [Installation for Developers](#installation-for-developers).\n\n## Ubuntu 20.04 (Trusty) users\n\n```shell\n# Install some pre-flight dependencies.\nsudo apt install -y calibre default-jre git python3-dev python3-pip python3-venv\n\n# Install pipx.\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n\n# Install the toolset.\npipx install libro-org\n```\n\n### Optional: Install shell completions\n\n```shell\n# Install ZSH completions.\nsudo ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/zsh/_se /usr/share/zsh/vendor-completions/_se && hash -rf && compinit\n\n# Install Bash completions.\nsudo ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/bash/se /usr/share/bash-completion/completions/se\n\n# Install Fish completions.\nsudo ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/fish/se $HOME/.config/fish/completions/se.fish\n```\n\n## Fedora users\n\n```shell\n# Install some pre-flight dependencies.\nsudo dnf install calibre git java-1.8.0-openjdk python3-devel vim\n\n# Install pipx.\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n\n# Install the toolset.\npipx install libro-org\n```\n\n### Optional: Install shell completions\n\n```shell\n# Install ZSH completions.\nsudo ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/zsh/_se /usr/share/zsh/vendor-completions/_se && hash -rf && compinit\n\n# Install Bash completions.\nsudo ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/bash/se /usr/share/bash-completion/completions/se\n\n# Install Fish completions.\nsudo ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/fish/se $HOME/.config/fish/completions/se.fish\n```\n\n## macOS users (up to macOS 10.15)\n\nThese instructions were tested on macOS 10.12 to 10.16, on Intel macs.\n\n1. Install the [Homebrew package manager](https://brew.sh). Or, if you already have it installed, make sure it’s up to date:\n\n   ```shell\n   brew update\n   ```\n\n2. Install dependencies:\n\n   ```shell\n   # Install some pre-flight dependencies.\n   brew install cairo calibre git openjdk pipx python\n   pipx ensurepath\n   sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk\n\n   # Install the toolset.\n   pipx install libro-org\n\n   # Optional: Bash users who have set up bash-completion via brew can install tab completion.\n   ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/bash/se $(brew --prefix)/etc/bash_completion.d/se\n\n   # Optional: Fish users can install tab completion.\n   ln -s $HOME/.local/pipx/venvs/standardebooks/lib/python3.*/site-packages/se/completions/fish/se $HOME/.config/fish/completions/se.fish\n   ```\n\n## OpenBSD 6.6 Users\n\nThese instructions were tested on OpenBSD 6.6, but may also work on the 6.5 release as well.\n\n1.  Create a text file to feed into `pkg_add` called `~/standard-ebooks-packages`. It should contain the following:\n\n        ```shell\n        py3-pip--\n        py3-virtualenv--\n        py3-gitdb--\n        jdk--%11\n        calibre--\n        git--\n        vim--\n        ```\n\n    Optionally, replace `vim--` with `vim--gtk3` to include gvim for its Unicode editing features.\n\n2.  Install dependencies using `doas pkg_add -ivl ~/standard-ebooks-packages`. Follow linking instructions provided by `pkg_add` to save keystrokes, unless you want to have multiple python versions and pip versions. In my case, I ran `doas ln -sf /usr/local/bin/pip3.7 /usr/local/bin/pip`.\n\n3.  Add `~/.local/bin` to your path.\n\n4.  Run `pip install --user pipx`\n\n5.  If you’re using `ksh` from base and have already added `~/.local/bin`, you can skip `pipx ensurepath` because this step is for `bash` users.\n\n6.  The rest of the process is similar to that used on other platforms:\n\n    ```shell\n    # Install the toolset.\n    pipx install libro-org\n    ```\n\n## Installation for developers\n\nIf you want to work on the toolset source, it’s helpful to tell `pipx` to install the package in “editable” mode. This will allow you to edit the source of the package live and see changes immediately, without having to uninstall and re-install the package.\n\nTo do that, follow the general installation instructions above; but instead of doing `pipx install libro-org`, do the following:\n\n```shell\ngit clone https://github.com/Libro-Org/tools.git\npipx install --editable ./tools\n```\n\nNow the `libro` binary is in your path, and any edits you make to source files in the `tools/` directory are immediately reflected when executing the binary.\n\n### Running commands on the entire corpus\n\nAs a developer, it’s often useful to run an `libro` command like `libro lint` or `libro build` on the entire corpus for testing purposes. This can be very time-consuming in a regular invocation (like `libro lint /path/to/ebook/repos/*`), because each argument is processed sequentially. Instead of waiting for a single invocation to process all of its arguments sequentially, use [GNU Parallel](https://www.gnu.org/software/parallel/) to start multiple invocations in parallel, with each one processing a single argument. For example:\n\n```shell\n# Slow, each argument is processed in sequence\nse lint /path/to/ebook/repos/*\n\n# Fast, multiple invocations each process a single argument in parallel\nexport COLUMNS; parallel --keep-order se lint ::: /path/to/ebook/repos/*\n```\n\nThe toolset tries to detect when it’s being invoked from `parallel`, and it adjusts its output to accomodate.\n\nWe export `COLUMNS` because `libro lint` needs to know the width of the terminal so that it can format its tabular output correctly. We pass the `--keep-order` flag to output results in the order we passed them in, which is useful if comparing the results of multiple runs.\n\n### Linting with `pylint` and `mypy`\n\nBefore we can use `pylint` or `mypy` on the toolset source, we have to inject them into the venv `pipx` created for the `libro-org` package:\n\n```shell\npipx inject libro-org pylint mypy\n```\n\nThen make sure to call the `pylint` and `mypy` binaries that `pipx` installed in the `libro-org` venv, _not_ any other globally-installed binaries:\n\n```shell\ncd /path/to/tools/repo\n$HOME/.local/pipx/venvs/libro-org/bin/pylint se\n```\n\n### Testing with `pytest`\n\nSimilar to `pylint`, the `pytest` command can be injected into the venv `pipx` created for the `standardebooks` package:\n\n```shell\npipx inject libro-org pytest\n```\n\nThe tests are executed by calling `pytest` from the top level or your tools repo:\n\n```shell\ncd /path/to/tools/repo\n$HOME/.local/pipx/venvs/libro-org/bin/pytest\n```\n\n#### Adding tests\n\nTests are added under the `tests` directory. Most of the tests are based around the idea of having “golden” output files. Each command is run against a set of input files and then the resulting output files are compared against the resulting golden files. The test fails if the output files do not match the golden files. The data files can be found in the `tests/data` directory.\n\nA custom test flag `--save-golden-files` has been added to automatically update the the golden files for the tests (in an `out` directory for the command).\n\nThe usual test development process is:\n\n1. Update `in` files with new test data and/or change the command implementation.\n2. Run `pytest` and see some tests fail.\n3. Run `pytest --save-golden-files` and then diff the data directory to ensure that the `out` files are as expected.\n4. Commit changes (including new `out` contents).\n\nAnother custom test flag `--save-new-draft` is also available. This flag is used to update the book skeleton, generated by the `libro create-draft` command, that is used as input for the other tests. Whenever the draft contents change (e.g. edits to the `core.css` file) the `tests/data/draft` files should be updated by calling `pytest --save-new-draft`.\n\n### Code style\n\n- In general we follow a relaxed version of [PEP 8](https://www.python.org/dev/peps/pep-0008/). In particular, we use tabs instead of spaces, and there is no line length limit.\n\n- Always use the `regex` module instead of the `re` module.\n\n# Help wanted\n\nWe need volunteers to take the lead on the following goals:\n\n- Add more test cases to the test framework.\n\n- Figure out if it’s possible to install Bash/ZSH completions using setup.py, _without_ root; this may not be possible?\n\n- Writing installation instructions for Bash and ZSH completions for MacOS.\n\n- Currently we install the whole Calibre package, which is very big, but it’s only used to convert epub to azw3. Can we inline Calibre’s azw3 conversion code in the `./vendor/` directory, to avoid having to install the entire package as a big dependency?\n\n# Tool descriptions\n\n- ### `libro build`\n\n  Build an ebook from a Standard Ebook source directory.\n\n- ### `libro build-images`\n\n  Build ebook cover and titlepage images in a Standard Ebook source directory and place the output in DIRECTORY/src/epub/images/.\n\n- ### `libro clean`\n\n  Prettify and canonicalize individual XHTML, SVG, or CSS files, or all XHTML, SVG, or CSS files in a source directory. Note that this only prettifies the source code; it doesn’t perform typography changes.\n\n- ### `libro compare-versions`\n\n  Use Firefox to render and compare XHTML files in an ebook repository. Run on a dirty repository to visually compare the repository’s dirty state with its clean state. If a file renders differently, place screenshots of the new, original, and diff (if available) renderings in the current working directory. A file called diff.html is created to allow for side-by-side comparisons of original and new files.\n\n- ### `libro create-draft`\n\n  Create a skeleton of a new Standard Ebook.\n\n- ### `libro dec2roman`\n\n  Convert a decimal number to a Roman numeral.\n\n- ### `libro extract-ebook`\n\n  Extract an EPUB, MOBI, or AZW3 ebook into ./FILENAME.extracted/ or a target directory.\n\n- ### `libro find-mismatched-diacritics`\n\n  Find words with mismatched diacritics in Standard Ebook source directories. For example, `cafe` in one file and `café` in another.\n\n- ### `libro help`\n\n  List available SE commands.\n\n- ### `libro hyphenate`\n\n  Insert soft hyphens at syllable breaks in an XHTML file.\n\n- ### `libro interactive-sr`\n\n  Use Vim to perform an interactive search and replace on a list of files. Use y/n/a to confirm (y) or reject (n) a replacement, or to replace (a)ll.\n\n- ### `libro lint`\n\n  Check for various Standard Ebooks style errors.\n\n- ### `libro make-url-safe`\n\n  Make a string URL-safe.\n\n- ### `libro modernize-spelling`\n\n  Modernize spelling of some archaic words, and replace words that may be archaically compounded with a dash to a more modern spelling. For example, replace `ash-tray` with `ashtray`.\n\n- ### `libro prepare-release`\n\n  Calculate work word count, insert release date if not yet set, and update modified date and revision number.\n\n- ### `libro print-manifest`\n\n  Print the <manifest> element for the given Standard Ebooks source directory to standard output, for use in that directory’s content.opf.\n\n- ### `libro print-spine`\n\n  Print the <spine> element for the given Standard Ebooks source directory to standard output, for use in that directory’s content.opf.\n\n- ### `libro print-title`\n\n  Print the expected value for an XHTML file’s `<title>` element.\n\n- ### `libro print-toc`\n\n  Build a table of contents for an SE source directory and print to stdout.\n\n- ### `libro recompose-epub`\n\n  Recompose a Standard Ebooks source directory into a single HTML5 file, and print to standard output.\n\n- ### `libro renumber-endnotes`\n\n  Renumber all endnotes and noterefs sequentially from the beginning.\n\n- ### `libro reorder-endnotes`\n\n  Increment the specified endnote and all following endnotes by 1.\n\n- ### `libro roman2dec`\n\n  Convert a Roman numeral to a decimal number.\n\n- ### `libro semanticate`\n\n  Apply some scriptable semantics rules from the Standard Ebooks semantics manual to a Standard Ebook source directory.\n\n- ### `libro split-file`\n\n  Split an XHTML file into many files at all instances of `<!--se:split-->`, and include a header template for each file.\n\n- ### `libro titlecase`\n\n  Convert a string to titlecase.\n\n- ### `libro typogrify`\n\n  Apply some scriptable typography rules from the Standard Ebooks typography manual to a Standard Ebook source directory.\n\n- ### `libro unicode-names`\n\n  Display Unicode code points, descriptions, and links to more details for each character in a string. Useful for differentiating between different flavors of spaces, dashes, and invisible characters like word joiners.\n\n- ### `libro version`\n\n  Print the version number and exit.\n\n- ### `libro word-count`\n\n  Count the number of words in an HTML file and optionally categorize by length.\n\n- ### `libro xpath`\n\n  Print the results of an xpath expression evaluated against a set of XHTML files. The default namespace is removed.\n\n# What a Libro.org source directory looks like\n\nMany of these tools act on Libro.org source directories. Such directories have a consistent minimal structure:\n\n    .\n    |-images/\n    |--cover.jpg\n    |--cover.source.jpg\n    |--cover.svg\n    |--titlepage.svg\n    |-src/\n    |--epub/\n    |---css/\n    |----core.css\n    |----local.css\n    |----se.css\n    |---images/\n    |----cover.svg\n    |----titlepage.svg\n    |---text/\n    |----colophon.xhtml\n    |----imprint.xhtml\n    |----titlepage.xhtml\n    |----uncopyright.xhtml\n    |---content.opf\n    |---onix.xml\n    |---toc.xhtml\n    |--META-INF/\n    |---container.xml\n    |--mimetype\n    |-LICENSE.md\n\n`./images/` contains source images for the cover and titlepages, as well as ebook-specific source images. Source images should be in their maximum available resolution, then compressed and placed in `./src/epub/images/` for distribution.\n\n`./src/epub/` contains the actual epub files.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://libro.org",
    "keywords": "ebooks epub",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libro-org",
    "package_url": "https://pypi.org/project/libro-org/",
    "platform": "",
    "project_url": "https://pypi.org/project/libro-org/",
    "project_urls": {
      "Homepage": "https://libro.org",
      "Source": "https://github.com/Libro-Org/tools/"
    },
    "release_url": "https://pypi.org/project/libro-org/0.3/",
    "requires_dist": [
      "cairosvg (==2.5.2)",
      "chardet (==3.0.4)",
      "cssselect (==1.1.0)",
      "cssutils (==1.0.2)",
      "ftfy (==5.8)",
      "gitpython (==3.1.11)",
      "importlib-resources (==1.0.2)",
      "lxml (==4.6.3)",
      "natsort (==7.1.0)",
      "pillow (==8.1.1)",
      "psutil (==5.8.0)",
      "pyopenssl (==20.0.0)",
      "pyphen (==0.10.0)",
      "regex (==2020.11.13)",
      "requests (==2.25.0)",
      "rich (==9.4.0)",
      "roman (==3.3.0)",
      "selenium (==3.141.0)",
      "smartypants (==2.0.1)",
      "tinycss2 (==1.1.0)",
      "titlecase (==0.13.0)",
      "unidecode (==1.2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "The toolset used to produce Libro.org epub ebooks.",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11118644,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fff61b03a886ec4aa900e6e19c87c7ec676a604639ec87dff83326511d191fa",
          "md5": "c5b174af2f0e761416bea3acee98a9ef",
          "sha256": "fe29a3a0aa972f5f01ac49e618bc4cbc01a55ed4aa9d3cc44a7ce60e2c3300bf"
        },
        "downloads": -1,
        "filename": "libro_org-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5b174af2f0e761416bea3acee98a9ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12902346,
        "upload_time": "2021-05-11T22:31:57",
        "upload_time_iso_8601": "2021-05-11T22:31:57.069068Z",
        "url": "https://files.pythonhosted.org/packages/8f/ff/61b03a886ec4aa900e6e19c87c7ec676a604639ec87dff83326511d191fa/libro_org-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9058b04bbb3af24fb9ac548abd3a77adc3920ba01596cf5ab4e8360e0448a2f4",
          "md5": "ce67c0fb005ed9c8a8762cc7fb589eca",
          "sha256": "855e981d71afb012fbed77c81b967599510b07a8e8af08ed4557136468956984"
        },
        "downloads": -1,
        "filename": "libro_org-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce67c0fb005ed9c8a8762cc7fb589eca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12842934,
        "upload_time": "2021-05-11T22:32:00",
        "upload_time_iso_8601": "2021-05-11T22:32:00.021794Z",
        "url": "https://files.pythonhosted.org/packages/90/58/b04bbb3af24fb9ac548abd3a77adc3920ba01596cf5ab4e8360e0448a2f4/libro_org-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74fe05ac6c968dfa749cec0c1298e2fdcaa5e4447fd73c3a6d9b5d1c40372e38",
          "md5": "691699d8443c0b6edfb5c6aead779918",
          "sha256": "d10482659fbb972f0e8fd7c83956910873b0806b0999722012ee7956cdc64108"
        },
        "downloads": -1,
        "filename": "libro_org-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "691699d8443c0b6edfb5c6aead779918",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12893212,
        "upload_time": "2021-07-13T10:43:10",
        "upload_time_iso_8601": "2021-07-13T10:43:10.315747Z",
        "url": "https://files.pythonhosted.org/packages/74/fe/05ac6c968dfa749cec0c1298e2fdcaa5e4447fd73c3a6d9b5d1c40372e38/libro_org-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6da7511621c9bba4823429cd56dbb238ca05b1f7bd9661f77578e502641a8ef8",
          "md5": "fcd62acb90deb9aed06276212bf084d3",
          "sha256": "51b26dd053ec7e4b5367b5b74597b2e6b01be3d833c16cf0a6c672857324c050"
        },
        "downloads": -1,
        "filename": "libro_org-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fcd62acb90deb9aed06276212bf084d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12841002,
        "upload_time": "2021-07-13T10:43:13",
        "upload_time_iso_8601": "2021-07-13T10:43:13.525038Z",
        "url": "https://files.pythonhosted.org/packages/6d/a7/511621c9bba4823429cd56dbb238ca05b1f7bd9661f77578e502641a8ef8/libro_org-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49f6bdb563dbe95744711096bdca3b5f2814d9bdecaa4eb655c72b5fde396935",
          "md5": "36d00e9551eb2bccf6730d350ec5bbd1",
          "sha256": "2337f169910a900e1919b0a6e2af108778c8d53aebcb049c699332f247b1cd11"
        },
        "downloads": -1,
        "filename": "libro_org-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36d00e9551eb2bccf6730d350ec5bbd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12893955,
        "upload_time": "2021-08-07T16:49:10",
        "upload_time_iso_8601": "2021-08-07T16:49:10.944572Z",
        "url": "https://files.pythonhosted.org/packages/49/f6/bdb563dbe95744711096bdca3b5f2814d9bdecaa4eb655c72b5fde396935/libro_org-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea3eac0bea9e331f3e16df04a3d8dcc766b8d73fc62a81e9d1c1948ec02a76bd",
          "md5": "bb6293a46d5ba14ac1ee9a981ec9f6b5",
          "sha256": "ee52e67679f6b1b25dd66b898ffad8091a964180a15be4862a841ab21222e3d7"
        },
        "downloads": -1,
        "filename": "libro_org-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb6293a46d5ba14ac1ee9a981ec9f6b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12841310,
        "upload_time": "2021-08-07T16:50:45",
        "upload_time_iso_8601": "2021-08-07T16:50:45.166833Z",
        "url": "https://files.pythonhosted.org/packages/ea/3e/ac0bea9e331f3e16df04a3d8dcc766b8d73fc62a81e9d1c1948ec02a76bd/libro_org-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49f6bdb563dbe95744711096bdca3b5f2814d9bdecaa4eb655c72b5fde396935",
        "md5": "36d00e9551eb2bccf6730d350ec5bbd1",
        "sha256": "2337f169910a900e1919b0a6e2af108778c8d53aebcb049c699332f247b1cd11"
      },
      "downloads": -1,
      "filename": "libro_org-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36d00e9551eb2bccf6730d350ec5bbd1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12893955,
      "upload_time": "2021-08-07T16:49:10",
      "upload_time_iso_8601": "2021-08-07T16:49:10.944572Z",
      "url": "https://files.pythonhosted.org/packages/49/f6/bdb563dbe95744711096bdca3b5f2814d9bdecaa4eb655c72b5fde396935/libro_org-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea3eac0bea9e331f3e16df04a3d8dcc766b8d73fc62a81e9d1c1948ec02a76bd",
        "md5": "bb6293a46d5ba14ac1ee9a981ec9f6b5",
        "sha256": "ee52e67679f6b1b25dd66b898ffad8091a964180a15be4862a841ab21222e3d7"
      },
      "downloads": -1,
      "filename": "libro_org-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bb6293a46d5ba14ac1ee9a981ec9f6b5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12841310,
      "upload_time": "2021-08-07T16:50:45",
      "upload_time_iso_8601": "2021-08-07T16:50:45.166833Z",
      "url": "https://files.pythonhosted.org/packages/ea/3e/ac0bea9e331f3e16df04a3d8dcc766b8d73fc62a81e9d1c1948ec02a76bd/libro_org-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}