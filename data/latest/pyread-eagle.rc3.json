{
  "info": {
    "author": "",
    "author_email": "Kyle Oman <kyle.a.oman@durham.ac.uk>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Read routines for Peano-Hilbert key sorted Eagle snapshots\nPure-python port of J. Helly's [read_eagle](https://github.com/jchelly/read_eagle).\n\n### Quickstart\n\nIf you're used to using the original `read_eagle`, all you should need to do is change import statements from `import read_eagle` to `import pyread_eagle as read_eagle`, or similar (`from pyread_eagle import EagleSnapshot`, etc.). Existing scripts should work seamlessly with this change.\n\n### Installation\nInstall from pip with:\n - 'pip install pyread_eagle'\n\nInstall from github:\n - Download via web UI, or 'git clone https://github.com/kyleaoman/pyread_eagle.git'\n - Install dependencies if necessary (see 'setup.py'), some may be found in other repositories by kyleaoman.\n - Global install (Linux): \n   - cd to directory with 'setup.py'\n   - run 'sudo pip install -e .' (-e installs via symlink, so pulling repository will do a 'live' update of the installation)\n - User install (Linux):\n   - cd to directory with 'setup.py'\n   - ensure '~/lib/python3.7/site-packages' or similar is on your PYTHONPATH (e.g. 'echo $PYTHONPATH'), if not, add it (perhaps in .bash_profile or similar)\n   - run 'pip install --prefix ~ -e .' (-e installs via symlink, so pulling repository will do a 'live' update of the installation)\n - cd to a directory outside the module and launch python; you should be able to do 'from pyread_eagle import *'\n \nAlternately, pip can retrieve and install the version on github directly:\n - 'pip3 install git+https://github.com/kyleaoman/pyread_eagle.git'\n\n### Documentation\n\nThe documentation below is adapted from the original [read_eagle readme file](https://github.com/jchelly/read_eagle/blob/master/README).\n\nThese routines can be used if Gadget was run with the `-DEAGLE_SORT_OUTPUT`\nflag enabled. They provide a quick way to read in spatial regions\nwithout having to read all the data or even open all of the files.\n\nIt works by splitting the simulation volume into a grid and ensuring\nthat particles in the same grid cell are stored consecutively in the \nsnapshot files. Some extra datasets are added to the snapshot which\nspecify which grid cells are stored in which files and the location\nof the start of each cell in the file.\n\nThe procedure to read in data is as follows:\n\n- Open the snapshot by specifying the name of one file\n- Flag the grid cells to be read in by calling `select_region` one or\n  more times.\n- Call `read_dataset` once for each quantity to be read, specifying\n  which particle type to read and the hdf5 dataset name.\n\nYou can then either close/delete the snapshot object or call `clear_selection` to\nread in a different region.\n\nAny of the datasets in the `PartTypeX` groups can be read in. The code\nmakes no assumptions about what datasets are present in the snapshot.\n\nUnlike the original `read_eagle`, this version is written directly in python\nand therefore does not depend on having a properly configured C compiler\nor hdf5 libraries, all that is needed is python, numpy and h5py.\n\nPython2 is not supported. I *think* `pyread_eagle` will run in python2.7,\nbut since python2 is deprecated as of Jan 2020, I have not and have no intention\nto test this.\n\n### Simple example usage\n\n```\nfrom pyread_eagle import EagleSnapshot\n\nsnap = EagleSnapshot(\"./snap_020.0.hdf5\")\nsnap.select_region(4.0, 5.0, 2.0, 3.0, 3.0, 4.0)\nxyz = snap.read_dataset(0, \"Coordinates\")\nids = snap.read_dataset(0, \"ParticleIDs\")\ndel snap\n```\n\n### Speed\n\n`pyread_eagle` is comparable in speed to `read_eagle`. The actual read_dataset calls\nvary depending on the region (how contiguous it is in the dataset) between very roughly 2x faster\nand 5x slower than the C version. Given the limited flexibility of the `h5py` API, I believe it\nwill be difficult to speed this up further.\n\n### Error handling\n\nIf a routine fails it will raise an exception. Because of differences in \nthe structure of the code relative to `read_eagle`, not all the same sanity\nchecks are made, not all the same errors can arise, and therefore not all\nthe same error messages may appear. I have also chosen to be more lax and\nnot try to catch every edge case by hand, rather letting failures happen\nand be reported organically by the underlying python libraries. Please\nreport any errors whose messages are obscure, and of course any bugs.\n\n### Random sampling\n\nNote that the output of pyread_eagle will differ from the original version\nwhen the sampling rate is set < 1.0. In the original version, a subsample\nwas drawn by comparing a pseudo-random number to the sampling rate for each\nparticle. This resulted in a subsample of *approximately* the requested\nfraction of particles. Since the seed was set explicitly, the results were\nreproducible. Since pyread_eagle uses the numpy PRNG, the output cannot\nmatch what would be obtained using the C PRNG. Instead, a random sample of\nconsistent length is drawn (the seed is still set explicitly, so results\nremain reproducible run-to-run), equal to floor(number of particle * sampling rate),\nevaluated *file-by-file*. So, the overall total number of particles times the\nsampling rate will not always be equal to the length of the output array,\ndue to rounding errors (the largest possible difference is the number\nof files in the snapshot).\n\n### Description of the routines and parameters\n\n#### Open snapshot\n\n`snap = pyread_eagle.EagleSnapshot(fname, verbose=False)`\n\nThis opens the snapshot which contains the specified file. Closing\nexplicitly is not necessary: in python the snapshot will be automatically \ndeallocated once there are no more references to it.\n\nParameters\n  - `fname`: name of any one file in the snapshot\n  - `verbose`: if `True`, print extra messages during function calls (default: False)\n\nReturn value\n  An instance of the `EagleSnapshot` class\n\n#### Close snapshot\n\n`del snap`\n`snap.close()`\n\nDeallocates memory associated with the snap object.\nNot strictly necessary - will happen automatically when the snap variable goes\nout of scope. Attempting to call methods of a closed snapshot raises an\n`EagleSnapshotClosedException`.\n\n#### Region selection\n\n`snap.select_region(xmin, xmax, ymin, ymax, zmin, zmax)`\n\nAll grid cells overlapping the specified region are flagged to be read\nin by subsequent `read_dataset calls`. You can call `select_region` multiple\ntimes to make oddly shaped or disjoint selections.\n\nIf selected regions overlap or the same region is selected multiple times\nparticles in these regions will still only be read in once.\n\nParameters\n  - `xmin`: the minimum x coordinate of the region to read\n  - `xmax`: the maximum x coordinate of the region to read\n  - `ymin`: the minimum y coordinate of the region to read\n  - `ymax`: the maximum y coordinate of the region to read\n  - `zmin`: the minimum z coordinate of the region to read\n  - `zmax`: the maximum z coordinate of the region to read\n\n`snap.select_grid_cells(ixmin, ixmax, iymin, iymax, izmin, izmax)`\n\nAll grid cells in the specified range of grid coordinates are flagged to\nbe read in by subsequent `read_dataset` calls. You can call `select_grid_cells`\nmultiple times to make oddly shaped or disjoint selections.\n\nThe coordinates ixmin, ixmax etc are integer coordinates in the hash grid,\nstarting from zero. The maximum coordinate is `(2**hashbits)-1`. The value of\nhashbits is stored in `snap.hashbits`.\n\nIf selected regions overlap or the same region is selected multiple times\nparticles in these regions will still only be read in once.\n\nParameters\n  - `ixmin`: the minimum x coordinate of the region to read\n  - `ixmax`: the maximum x coordinate of the region to read\n  - `iymin`: the minimum y coordinate of the region to read\n  - `iymax`: the maximum y coordinate of the region to read\n  - `izmin`: the minimum z coordinate of the region to read\n  - `izmax`: the maximum z coordinate of the region to read\n  \n`snap.select_rotated_region(centre, xvec, yvec, zvec, length)`\n\nSelects a box-shaped region rotated relative to the simulation box axes.\nThe `[xyz]vec` parameters should be a set of mutually orthogonal unit vectors\ndefining the axes of the box to be selected.\n\nParameters\n  - `centre`: coordinate centre of the region to select, shape (3, )\n  - `xvec`: selection box 'x' unit vector in simulation box coordinates, shape (3, )\n  - `yvec`: selection box 'y' unit vector in simulation box coordinates, shape (3, )\n  - `zvec`: selection box 'z' unit vector in simulation box coordinates, shape (3, )\n  - `length`: selection box lengths (not half-length) along each axis, shape (3, )\n\n#### Count particles\n\n`n = snap.count_particles(itype)`\n\nThis returns the number of particles of the specified type which will be\nread by the next `read_dataset` call. Note that only whole grid cells can\nbe read so some particles outside the selected region may be read in.\nThese are included in the count.\n\nIn python this routine is not usually needed, but it is included for\ncompatibility with codes formerly using the read_eagle python wrapper.\n\nParameters\n  - `itype`: which particle type to count (integer, `0-5`)\n\nReturn value\n  The number of particles to be read in\n\n#### Get particle locations\n\n`file_index, file_offset = snap.get_particle_locations(itype)`\n\nThis returns two arrays which each have one element for each selected\nparticle. `file_index` contains the index of the file each particle is in.\n`file_offset` contains the position in the file, numbering from zero.\n\nParameters\n  - `itype`: which particle type to count (integer, `0-5`)\n\nReturn value\n  `file_index`  - integer array with index of the file containing each particle\n  `file_offset` - integer array with position of each particle in its file\n\n\n#### Read datasets\n\n`data = snap.read_dataset(itype, name)`\n\nThis reads in the specified dataset for all particles of type itype in the\nselected region(s). Use repeated calls to read in multiple datasets.\n\nThe type of array you get back reflects the type of the dataset in the file.\n\nParameters\n  - `itype`: which particle type to read (integer, `0-5`)\n  - `name`: the HDF5 name of the dataset, relative to the `PartTypeX` group\n\nReturn value\n  The contents of the dataset for the selected particles\n  \n`data = snap.read_extra_dataset(itype, name, basename)`\n\nThis is the same as `read_dataset`, except that it reads from a set of\n\"auxiliary files\" comprised of the same number of parts as the snapshot and \nwhich contain additional datasets with the same sorting, distribution across\nfiles, etc. as the datasets in the main snapshot files.\n\nParameters\n  - `itype`: which particle type to read (integer, `0-5`)\n  - `name`: the HDF5 name of the dataset, relative to the `PartTypeX` group\n  - `basename`: name (including path, if necessary) of the auxiliary files, omitting the `.X.hdf5` portion\n\n#### Clear selection\n\n`snap.clear_selection()`\n\nThis clears the flags which specify which grid cells should be\nread in on the next read_dataset() call. If you've already read\nin a region and you want to read a different region you should call \nclear_selection() before calling select_region() again.\n\n\n#### Split selection\n\n`snap.split_selection(ThisTask, NTask)`\n\nThis is for use in MPI programs to allow parallel I/O.\nWhen running under MPI all read_eagle routines are collective -\nthey must be called on all processes.\n\nThe procedure to read a region in parallel is as follows:\n\n1. All processes open the snapshot\n2. All processes select the SAME region\n3. Call `split_selection`. This causes each processor to select\n   a subset of the originally selected particles.\n4. Call `read_dataset()` on all processors to read the required \n   quantities\n\nThis results in all of the particles in the specified region \nbeing read in exactly once with the data spread across the MPI \nprocesses.\n\nI have not made any attempt to use pyread_eagle with e.g. mpi4py\nor other MPI-ish implementations in python. If you succeed in this,\nplease get in touch!\n\nParameters\n  - `ThisTask`: rank of this process in an MPI program\n  - `NTask`: number of processes in an MPI program\n\n#### Set sampling rate\n\n`snap.set_sampling_rate(rate)`\n\nIf rate is set < 1 before reading datasets, a random subsample\nof particles will be read, with the fraction of particles read\nset by the rate. See the note on random subsamples (above).\n\nParameters\n  - `rate`: fraction of particles to be read (rate >= 1 for all particles)\n  \n#### List datasets\n\n`dsets = snap.datasets(itype)`\n\nReturns a list of the available datasets for a given particle type.\nThis can be iterated to read all datasets, for instance.\n\nParameters\n  - `itype`: which particle type to read (integer, `0-5`)\n  \n \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyread-eagle",
    "package_url": "https://pypi.org/project/pyread-eagle/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyread-eagle/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kyleaoman/pyread_eagle/issues",
      "Homepage": "https://github.com/kyleaoman/pyread_eagle"
    },
    "release_url": "https://pypi.org/project/pyread-eagle/1.0.2/",
    "requires_dist": [
      "numpy",
      "h5py"
    ],
    "requires_python": ">=3.7",
    "summary": "Pure-python port of J. Helly's read_eagle.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17322490,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31e1a66868a319f690cebd91f34cfd5279fc2d928661bcd757b307bb12a4a57c",
          "md5": "de209f861563fe4026215ffc86cd92a3",
          "sha256": "a78b6f899928db61073a5fe6148fbbcd398ed15285da018908c87376b8eb6541"
        },
        "downloads": -1,
        "filename": "pyread_eagle-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de209f861563fe4026215ffc86cd92a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23898,
        "upload_time": "2023-03-15T14:51:56",
        "upload_time_iso_8601": "2023-03-15T14:51:56.053334Z",
        "url": "https://files.pythonhosted.org/packages/31/e1/a66868a319f690cebd91f34cfd5279fc2d928661bcd757b307bb12a4a57c/pyread_eagle-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "661645e3d677bd97e924be3d0be034addfb406d05e6670e0cfba23924da19b60",
          "md5": "590fcba73f72f95ded9712c0e514257c",
          "sha256": "83a76234fac0917bcca9b1b8dd96ea3b68d6ace471358fb8ddbb4365f3c31035"
        },
        "downloads": -1,
        "filename": "pyread_eagle-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "590fcba73f72f95ded9712c0e514257c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29353,
        "upload_time": "2023-03-15T14:51:58",
        "upload_time_iso_8601": "2023-03-15T14:51:58.600102Z",
        "url": "https://files.pythonhosted.org/packages/66/16/45e3d677bd97e924be3d0be034addfb406d05e6670e0cfba23924da19b60/pyread_eagle-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6613db60be9d1aaf6287fc283e201ee726884bbde175536de8f14badedf7490",
          "md5": "6599f10ed52566f8ee8d5b448ba08479",
          "sha256": "c968cc901828dbb32a6495b4267c75e6f1f5fcb7b6272903b4b90f4a85e868d8"
        },
        "downloads": -1,
        "filename": "pyread_eagle-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6599f10ed52566f8ee8d5b448ba08479",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23934,
        "upload_time": "2023-03-15T14:53:27",
        "upload_time_iso_8601": "2023-03-15T14:53:27.567619Z",
        "url": "https://files.pythonhosted.org/packages/d6/61/3db60be9d1aaf6287fc283e201ee726884bbde175536de8f14badedf7490/pyread_eagle-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02f36eb9f7dc9e7cfe09083da53d9d8753ea83b7b2e210e5d16d3f447d23c834",
          "md5": "59cb988f9bf0ac229d340bd56b863423",
          "sha256": "6a218eb974a12d738cc255708ba34dfd9ea5e4a754a4c7c7c136950917780312"
        },
        "downloads": -1,
        "filename": "pyread_eagle-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "59cb988f9bf0ac229d340bd56b863423",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29373,
        "upload_time": "2023-03-15T14:53:29",
        "upload_time_iso_8601": "2023-03-15T14:53:29.314851Z",
        "url": "https://files.pythonhosted.org/packages/02/f3/6eb9f7dc9e7cfe09083da53d9d8753ea83b7b2e210e5d16d3f447d23c834/pyread_eagle-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e28a4d6cae735fc3513b2694f73389d3d63937791b26e7d795f2d07bab869f55",
          "md5": "20ce393969c6c0f816722c9b8cc7049e",
          "sha256": "64fd340da6aad150dd338759008afc68c815b89aa714e7b081a94d1708f14ca4"
        },
        "downloads": -1,
        "filename": "pyread_eagle-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20ce393969c6c0f816722c9b8cc7049e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23928,
        "upload_time": "2023-03-16T17:34:10",
        "upload_time_iso_8601": "2023-03-16T17:34:10.170939Z",
        "url": "https://files.pythonhosted.org/packages/e2/8a/4d6cae735fc3513b2694f73389d3d63937791b26e7d795f2d07bab869f55/pyread_eagle-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d21ffa6e669134db0c0ffa7421efacf8de143ffa27df60d0f54433e5d47c2ba6",
          "md5": "9317e514e3a2011af05203dd0d355e8d",
          "sha256": "f6b43fc1319fcc5b53eee56f4dc024b534fd966623e8119b6832896a3e0772f0"
        },
        "downloads": -1,
        "filename": "pyread_eagle-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9317e514e3a2011af05203dd0d355e8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29361,
        "upload_time": "2023-03-16T17:34:12",
        "upload_time_iso_8601": "2023-03-16T17:34:12.355961Z",
        "url": "https://files.pythonhosted.org/packages/d2/1f/fa6e669134db0c0ffa7421efacf8de143ffa27df60d0f54433e5d47c2ba6/pyread_eagle-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e28a4d6cae735fc3513b2694f73389d3d63937791b26e7d795f2d07bab869f55",
        "md5": "20ce393969c6c0f816722c9b8cc7049e",
        "sha256": "64fd340da6aad150dd338759008afc68c815b89aa714e7b081a94d1708f14ca4"
      },
      "downloads": -1,
      "filename": "pyread_eagle-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20ce393969c6c0f816722c9b8cc7049e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23928,
      "upload_time": "2023-03-16T17:34:10",
      "upload_time_iso_8601": "2023-03-16T17:34:10.170939Z",
      "url": "https://files.pythonhosted.org/packages/e2/8a/4d6cae735fc3513b2694f73389d3d63937791b26e7d795f2d07bab869f55/pyread_eagle-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d21ffa6e669134db0c0ffa7421efacf8de143ffa27df60d0f54433e5d47c2ba6",
        "md5": "9317e514e3a2011af05203dd0d355e8d",
        "sha256": "f6b43fc1319fcc5b53eee56f4dc024b534fd966623e8119b6832896a3e0772f0"
      },
      "downloads": -1,
      "filename": "pyread_eagle-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9317e514e3a2011af05203dd0d355e8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29361,
      "upload_time": "2023-03-16T17:34:12",
      "upload_time_iso_8601": "2023-03-16T17:34:12.355961Z",
      "url": "https://files.pythonhosted.org/packages/d2/1f/fa6e669134db0c0ffa7421efacf8de143ffa27df60d0f54433e5d47c2ba6/pyread_eagle-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}