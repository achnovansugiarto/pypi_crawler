{
  "info": {
    "author": "Moses Wynn",
    "author_email": "mail@moseswynn.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# python-playvox\n\npython-playvox is a simple API wrapper for the Playvox REST API.\n\nDocumentation for the Playvox API can be found [here.](https://developers.playvox.com/restapis/#/introduction/api-reference)\n\nPlease note, this wrapper is in beta and has not been fully tested.\n\n## Usage\nTo instantiate the API wrapper you will need the subdomain for your your API uid and your API key.\n\n```python\nfrom python_playvox import Playvox\n\nsubdomain = 'mysubdomain'\nuid = 'my-playvox-uid'\nkey = 'my-playvox-key'\n\npv = Playvox(subdomain, uid, key)\n```\n\nThis will create an instance of the wrapper that makes calls to 'https://mysubdomain.playvox.com/api/v1/' and authenticates with your playvox uid and key.\n\n## Methods\n\n  - [pv.coaching.get(**kwargs):](#pvcoachinggetkwargs)\n  - [pv.learning.get(**kwargs):](#pvlearninggetkwargs)\n  - [pv.campaign.get(**kwargs):](#pvcampaigngetkwargs)\n  - [pv.campaign.vars(campaign_id)](#pvcampaignvarscampaign_id)\n  - [pv.campaign.users(campaign_id)](#pvcampaignuserscampaign_id)\n  - [pv.campaign.send_data(campaign_id, data)](#pvcampaignsend_datacampaign_id-data)\n  - [pv.calibration.get(**kwargs)](#pvcalibrationgetkwargs)\n  - [pv.evaluation.get(**kwargs)](#pvevaluationgetkwargs)\n  - [pv.scorecard.get(**kwargs)](#pvscorecardgetkwargs)\n  - [pv.team.get(**kwargs)](#pvteamgetkwargs)\n  - [pv.team.new(name, description, team_leaders, users)](#pvteamnewname-description-team_leaders-users)\n  - [pv.team.update(team_id, **kwargs)](#pvteamupdateteam_id-kwargs)\n  - [pv.team.add_user(team_id, user_id)](#pvteamadd_userteam_id-user_id)\n  - [pv.team.remove_user(team_id, user_id)](#pvteamremove_userteam_id-user_id)\n  - [pv.team.delete(team_id)](#pvteamdeleteteam_id)\n  - [pv.user.get(**kwargs)](#pvusergetkwargs)\n  - [pv.user.new(first_name, last_name, username, email, password, **kwargs)](#pvusernewfirst_name-last_name-username-email-password-kwargs)\n  - [pv.user.update(user_id, **kwargs)](#pvuserupdateuser_id-kwargs)\n  - [pv.user.deactivate(user_id, deactivation_type, reason)](#pvuserdeactivateuser_id-deactivation_type-reason)\n  - [pv.user.activate(user_id)](#pvuseractivateuser_id)\n  - [pv.role.get(**kwargs)](#pvrolegetkwargs)\n  - [pv.integration.get()](#pvintegrationget)\n  - [pv.integration.new(name, description, data_storage_minutes)](#pvintegrationnewname-description-data_storage_minutes)\n  - [pv.integration.update(integration_id, **kwargs)](#pvintegrationupdateintegration_id-kwargs)\n  - [pv.integration.delete(integration_id)](#pvintegrationdeleteintegration_id)\n  - [pv.integration.add_metadata(integration_id, field_id, m_type, allowed, required, available_in):](#pvintegrationadd_metadataintegration_id-field_id-m_type-allowed-required-available_in)\n  - [pv.integration.update_metadata(integration_id, metadata_id, **kwargs):](#pvintegrationupdate_metadataintegration_id-metadata_id-kwargs)\n  - [pv.integration.delete_metadata(integration_id, metadata_id)](#pvintegrationdelete_metadataintegration_id-metadata_id)\n  - [pv.interaction.get(integration_id)](#pvinteractiongetintegration_id)\n  - [pv.interaction.add(integration_id, interaction_id, assignee_id, custom_metadata)](#pvinteractionaddintegration_id-interaction_id-assignee_id-custom_metadata)\n  - [pv.interaction.update(integration_id, interaction_id, data)](#pvinteractionupdateintegration_id-interaction_id-data)\n  - [pv.interaction.delete(integration_id, interaction_id)](#pvinteractiondeleteintegration_id-interaction_id)\n  - [pv.interaction.get_comments(interaction_id)](#pvinteractionget_commentsinteraction_id)\n  - [pv.interaction.add_comment(interaction_id, body, comment_type, author_id, comment_dt=None)](#pvinteractionadd_commentinteraction_id-body-comment_type-author_id-comment_dtnone)\n  - [pv.interaction.update_comment(interaction_id, comment_id, body, comment_dt=None)](#pvinteractionupdate_commentinteraction_id-comment_id-body-comment_dtnone)\n  - [pv.delete_comment(interaction_id, comment_id)](#pvdelete_commentinteraction_id-comment_id)\n  - [pv.interaction.bulk_add(integration_id, interactions)](#pvinteractionbulk_addintegration_id-interactions)\n  - [pv.interaction.bulk_status(job_id)](#pvinteractionbulk_statusjob_id)\n\n#### pv.coaching.get(**kwargs):\n\nParameters:\n\n- include(string): use include='all' to include all coaching related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of coaching data that match the specified parameters*\n\n#### pv.learning.get(**kwargs):\n\nParameters:\n\n- include(string): use include='all' to include all learning related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of learnings data that match the specified parameters*\n\n#### pv.campaign.get(**kwargs):\n\nParameters:\n\n- include(string): use include='all' to include all campaign related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of campaign data that match the specified parameters*\n\n#### pv.campaign.vars(campaign_id)\n\nParameters:\n\n- campaign_id(string) *required*: campaign ID to pull vars data for\n\n*Returns a dict containing vars data for the specified campaign*\n\n#### pv.campaign.users(campaign_id)\n\nParameters:\n\n- campaign_id(string) *required*: campaign ID to pull users data for\n\n*Returns a dict containing users data for the specified campaign*\n\n#### pv.campaign.send_data(campaign_id, data)\n\nParameters:\n\n- campaign_id(string) *required*: id of campaign to send campaign metric data to\n- data(dict or list[dict]) *required*: metric data to add to the campaign\n\n*Returns True if the data was successfully added, otherwise an error is raised*\n\n#### pv.calibration.get(**kwargs)\n\nParameters:\n\n- include(string): use include='all' to include all calibration related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of calibration data that match the specified parameters*\n\n#### pv.evaluation.get(**kwargs)\n\nParameters:\n\n- include(string): use include='all' to include all evaluation related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of evaluation data that match the specified parameters*\n\n#### pv.scorecard.get(**kwargs)\n\nParameters:\n\n- include(string): use include='all' to include all scorecard related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of scorecard data that match the specified parameters*\n\n#### pv.team.get(**kwargs)\n\nParameters:\n\n- include(string): use include='all' to include all team related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of team data that match the specified parameters*\n\n#### pv.team.new(name, description, team_leaders, users)\n\nParameters:\n\n- name(string) *required*: name of the new team\n- description(string): description of the new team\n- team_leaders(list) *required*: a list of the user ids of team leaders\n- users(list): a list of the user ids of team members\n\n*Returns the id of the newly created team*\n\n#### pv.team.update(team_id, **kwargs)\n\nParameters:\n\n- team_id(string) *required*: the id of the team to be updated\n- name(string): the new name of the team\n- description(string): the new description for the team\n- team_leader_id(list): a list of user ids for team leaders to replace the current list\n- users(list): a list of user ids for users to replace the current list\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.team.add_user(team_id, user_id)\n\nParameters:\n\n- team_id(string) *required*: the id of the team the user will be added to\n- user_id(string) *required*: the id of the user that will be added to the team\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.team.remove_user(team_id, user_id)\n\nParameters:\n\n- team_id(string) *required*: the id of the team that the user will be removed from\n- user_id(string) *required*: the id of the user that will be removed from the team\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.team.delete(team_id)\n\nParameters:\n\n- team_id(string) *required*: the id of the team that will be deleted\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.user.get(**kwargs)\n\nParameters:\n\n- include(string): use include='all' to include all user related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict containing user data for the specified parameters*\n\n#### pv.user.new(first_name, last_name, username, email, password, **kwargs)\n\nParameters:\n\n - first_name(string) *required*: the new user's first name\n - last_name(string) *required*: the new user's last name\n - username(string) *required*: the username that the new user will login with\n - email(string) *required*: the new user's email address\n - password(string) *required*: the new user's password\n   - at least 10 characters\n   - 1 numer required\n   - 1 uppercase letter required\n   - 1 lowercase letter required\n- integrations_{integration_name}(string): the user's integration ID for the specified integration, acceptable integration names include:\n  - five9\n  - zendesk\n  - salesforce\n  - livechat\n  - ringcentral\n  - intercom\n  - freshdesk\n  - talkdesk\n  - sopim\n  - kustomer\n  - helpscout\n  - helpshift\n\n*Returns the id of the new user*\n\n#### pv.user.update(user_id, **kwargs)\n\nParameters:\n\n- user_id(string) *required*: the id of the user to be updated\n- name(string): the new first name for the specified user\n- last_name(string): the new last name for the specified user\n- integrations_{integration_name}(string): the user's integration ID for the specified integration, acceptable integration names include:\n  - five9\n  - zendesk\n  - salesforce\n  - livechat\n  - ringcentral\n  - intercom\n  - freshdesk\n  - talkdesk\n  - sopim\n  - kustomer\n  - helpscout\n  - helpshift\n\n*Returns True if the user was updated successfully, otherwise an error will be raised*\n\n#### pv.user.deactivate(user_id, deactivation_type, reason)\n\nParameters:\n\n- user_id(string) *required*: the id of the user to be deactivated\n- deactivation_type(string) *required*: the type of deactivation\n- reason(string) *required*: the reason the user is being deactivated\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.user.activate(user_id)\n\nParameters:\n\n- user_id(string) *required*: the id of a previously deactivated user to be activated\n\n*Returns True if succesful, otherwise an error will be raised*\n\n#### pv.role.get(**kwargs)\n\nParameters:\n\n- include(string): use include='all' to include all role related objects information\n- page(int): page number for data pagination\n- per_page(int): number of resources per page for data pagination\n- query(string): JSON specifying resource filters\n- fields(string): comma separated list of fields to be returned from the resource\n- sort(string): comma separated list of sort attributes. Use + as prefix for ascending and - as prefix for descending\n\n*Returns a dict of role data that match the specified parameters*\n\n#### pv.integration.get()\n\n*Returns all available integrations*\n\n#### pv.integration.new(name, description, data_storage_minutes)\n\nParameters:\n\n- name(string) *required*: name for the new integration\n- description(string) *required*: description for the new integration\n- data_storage_minutes(int) *required*: the time in minutes to retain data from the integration\n  - Max: 129600(90 days)\n\n*Returns the id of the newly created integration*\n\n#### pv.integration.update(integration_id, **kwargs)\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration to be updated\n- name(string): a new name for the integration\n- description(string): a new description for the integration\n- data_storage_minutes(int): the time in minutes to retain data from the integration\n  - Max: 129600(90 days)\n\n*Returns True if the specified integration is updated successfully, otherwise an error will be raised*\n\n#### pv.integration.delete(integration_id)\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration to be deleted\n\n*Returns True if the specified integration is deleted successfully, otherwise an error will be raised*\n\n#### pv.integration.add_metadata(integration_id, field_id, m_type, allowed, required, available_in):\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration that the metadata field will be added to\n- field_id(string) *required*: name to identify the metadata field\n  - Minimum 3 characters\n  - Maximum 30 characters\n  - Accepts only a-z and underscores\n- m_type(string) *required*: the type of the field, allowed values:\n  - string\n  - integer\n  - float\n  - list\n  - boolean\n  - datetime\n- allowed(list) *required*: the allowed values that the filed will accept\n- required(boolean) *required*: specifies whether or not the field is required\n- available_in(list[string]): specifies if the field can be filtered or shown in related data, accepts:\n  - 'filters'\n  - 'display'\n\n*Returns the id of the new metadata field if successful, otherwise an error will be raised*\n\n#### pv.integration.update_metadata(integration_id, metadata_id, **kwargs):\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration that the target metadata field exists on\n- metadata_id(string) *required*: the id of the metadata field that will be updated\n- field_id(string): name to identify the metadata field\n  - Minimum 3 characters\n  - Maximum 30 characters\n  - Accepts only a-z and underscores\n- m_type(string): the type of the field, allowed values:\n  - string\n  - integer\n  - float\n  - list\n  - boolean\n  - datetime\n- allowed(list): the allowed values that the filed will accept\n- required(boolean): specifies whether or not the field is required\n- available_in(list[string]): specifies if the field can be filtered or shown in related data, accepts:\n  - 'filters'\n  - 'display'\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.integration.delete_metadata(integration_id, metadata_id)\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration that the target metadata field exists on\n- metadata_id(string) *required*: the id of the metadata field to be deleted\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.interaction.get(integration_id)\n\nParameters:\n\n- integration_id(string) *required* The id of the integration to get integrations for.\n\n*Returns all interactions for the specified integration*\n\n#### pv.interaction.add(integration_id, interaction_id, assignee_id, custom_metadata)\n\nParameters:\n\n- integration_id(string) *required*: The id of the integration the interaction will be added to.\n- interaction_id(string): The id of your external system\n  - Max length: 68 characters\n- assignee_id(string): The id of the user on the external system (should match email or username in playvox)\n- custom_metadata(dict) *required*: The payload of all the metadata fields defined on the integration\n\n*Returns the id of the new interaction*\n\n#### pv.interaction.update(integration_id, interaction_id, data)\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration the target interaction exists on\n- interaction_id(string) *required*: the id of the interaction to be updated\n- data(dict) *required*: The payload of the metadata fields to be updated\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.interaction.delete(integration_id, interaction_id)\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration the target interaction exists on\n- interaction_id(string) *required*: the id of the interaction to be deleted\n\n*Returns True if successful, otherwise an error will be raised*\n\n#### pv.interaction.get_comments(interaction_id)\n\nParameters:\n\n- interaction_id(string) *required*: the id of the interaction to get comments for\n\n*Returns all comments associated with the interaction*\n\n#### pv.interaction.add_comment(interaction_id, body, comment_type, author_id, comment_dt=None)\n\nParameters:\n\n- interaction_id(string) *required*: the id of the interaction the comment will be added to\n- body(string) *required*: the body of the comment\n- comment_type(string) *required*: the type of comment, accepts:\n  - 'customer_comment'\n  - 'agent_comment'\n  - 'internal_note'\n- author_id(string) *required*: the username or email of the author on playvox\n- comment_dt(datetime): the time that the comment was added to the interaction, defaults to current time if not specified\n\n*Returns the id of the newly created comment*\n\n#### pv.interaction.update_comment(interaction_id, comment_id, body, comment_dt=None)\n\nParameters:\n\n- interaction_id(string) *required*: the id of the interaction that the comment is associated with\n- comment_id(string) *required*: the id of the comment to be updated\n- body(string) *required*: the new body of the comment\n- comment_dt(datetime): the time that the comment was updated, defaults to current time if not specified\n\n*Returns True if the comment is updated successfully, otherwise an error will be raised*\n\n#### pv.delete_comment(interaction_id, comment_id)\n\nParameters:\n\n- interaction_id(string) *required*: the id of the interaction that the target comment is associated with\n- comment_id(string) *required*: the id of the comment to be deleted\n\n*Returns True if the comment is deleted successfully, otherwise an error will be raised*\n\n#### pv.interaction.bulk_add(integration_id, interactions)\n\nParameters:\n\n- integration_id(string) *required*: the id of the integration that the interactions will be added to\n- interactions(dict) *required*: the interactions to be added to the integration, for more information see the [Playvox API Documentation](https://developers.playvox.com/restapis/#/reference/0/bulk-interactions/create)\n\n*Returns the job id of the bulk job*\n\n#### pv.interaction.bulk_status(job_id)\n\nParameters:\n\n- job_id(string) *required*: the id of the bulk job to check the status of\n\n*Returns status information on the specified bulk job*\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.moseswynn.com/moseswynn/python-playvox",
    "keywords": "playvox,API,wrapper",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-playvox",
    "package_url": "https://pypi.org/project/python-playvox/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-playvox/",
    "project_urls": {
      "Homepage": "https://git.moseswynn.com/moseswynn/python-playvox"
    },
    "release_url": "https://pypi.org/project/python-playvox/0.2.1/",
    "requires_dist": [
      "requests (>=2.23.0,<3.0.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "A Python wrapper for the Playvox REST API.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7330624,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a19e5c0c5ba7c98250c90c726aec16b57c39534f94cc9458667677a84edfdef9",
          "md5": "ef410a7cdc451319494ae603b39ec6f4",
          "sha256": "4ef8b46402f54c92057b91490dc1956a8745b7ab1052ad850053f621b7b211de"
        },
        "downloads": -1,
        "filename": "python_playvox-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef410a7cdc451319494ae603b39ec6f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3132,
        "upload_time": "2020-04-24T14:43:22",
        "upload_time_iso_8601": "2020-04-24T14:43:22.226506Z",
        "url": "https://files.pythonhosted.org/packages/a1/9e/5c0c5ba7c98250c90c726aec16b57c39534f94cc9458667677a84edfdef9/python_playvox-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e78875ba38f0c109b978801c85e3edea103e04f687de6c73d3be9d017704deee",
          "md5": "cdaf0ac96962d6f33910e3afa4d58bb7",
          "sha256": "ebec2335074be861c9bf69538b96c8c68a4932abe26c851b56f2df743b8941af"
        },
        "downloads": -1,
        "filename": "python-playvox-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cdaf0ac96962d6f33910e3afa4d58bb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3437,
        "upload_time": "2020-04-24T14:43:20",
        "upload_time_iso_8601": "2020-04-24T14:43:20.121438Z",
        "url": "https://files.pythonhosted.org/packages/e7/88/75ba38f0c109b978801c85e3edea103e04f687de6c73d3be9d017704deee/python-playvox-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26ef943a331dc77a199eb4066d5f8e020b4861ea68fd8c51c9024a5c2455f00b",
          "md5": "b7439e57658474f4f991baca797abebe",
          "sha256": "b3e6720d02f490280c91893406ba259ba0ab38c398808fbc2391f03f7cdb4fff"
        },
        "downloads": -1,
        "filename": "python_playvox-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7439e57658474f4f991baca797abebe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3132,
        "upload_time": "2020-04-24T15:06:42",
        "upload_time_iso_8601": "2020-04-24T15:06:42.821403Z",
        "url": "https://files.pythonhosted.org/packages/26/ef/943a331dc77a199eb4066d5f8e020b4861ea68fd8c51c9024a5c2455f00b/python_playvox-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b6c21c88935955d6b40343f7f6e92d965fa654fd98cdac00b100a16ec9995fb",
          "md5": "d6a36fbc82b2a08104aba3ad8ac0334a",
          "sha256": "c4e83c7a91637be8b553964ab377d3ee380d2a868b980e01a9bebf34b4b279c8"
        },
        "downloads": -1,
        "filename": "python-playvox-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d6a36fbc82b2a08104aba3ad8ac0334a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3429,
        "upload_time": "2020-04-24T15:06:41",
        "upload_time_iso_8601": "2020-04-24T15:06:41.725993Z",
        "url": "https://files.pythonhosted.org/packages/4b/6c/21c88935955d6b40343f7f6e92d965fa654fd98cdac00b100a16ec9995fb/python-playvox-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1d4665a0492ddeece021562a38d0fb1271dd6b7b1791af65aa6d9b41f0fc83b",
          "md5": "a7a740c1ccbb383e292b920171a2a23f",
          "sha256": "e8c61e40dc96e8ed1017c7728bc417ccc2bd992b61c699d37484f64328cf9160"
        },
        "downloads": -1,
        "filename": "python_playvox-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7a740c1ccbb383e292b920171a2a23f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3122,
        "upload_time": "2020-04-24T15:34:54",
        "upload_time_iso_8601": "2020-04-24T15:34:54.175610Z",
        "url": "https://files.pythonhosted.org/packages/f1/d4/665a0492ddeece021562a38d0fb1271dd6b7b1791af65aa6d9b41f0fc83b/python_playvox-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23d3c87c051fdea83f7c86cc1e2d75f3e564ee3361773b2a5f7fd21c98c6ed53",
          "md5": "988c98488de24ecfd5504e0027f90e91",
          "sha256": "12ee20a7538f930f72dd3cdbe7a783db87ca02c951a2b334b4b1876d90da3095"
        },
        "downloads": -1,
        "filename": "python-playvox-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "988c98488de24ecfd5504e0027f90e91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3416,
        "upload_time": "2020-04-24T15:34:53",
        "upload_time_iso_8601": "2020-04-24T15:34:53.044267Z",
        "url": "https://files.pythonhosted.org/packages/23/d3/c87c051fdea83f7c86cc1e2d75f3e564ee3361773b2a5f7fd21c98c6ed53/python-playvox-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48fdf281b6a12d62996818f91e184b36c34f2a1cc870988c9b8afd723a7551d3",
          "md5": "1cd46d95855bc8e8225912d1b26733b0",
          "sha256": "10f5681707ddc5bc35d8990ceade1995c0ba06d48921ab3d61c80f3a174e3477"
        },
        "downloads": -1,
        "filename": "python_playvox-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cd46d95855bc8e8225912d1b26733b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3183,
        "upload_time": "2020-04-24T19:18:01",
        "upload_time_iso_8601": "2020-04-24T19:18:01.303316Z",
        "url": "https://files.pythonhosted.org/packages/48/fd/f281b6a12d62996818f91e184b36c34f2a1cc870988c9b8afd723a7551d3/python_playvox-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb6b39a8c2cf1c5f140693fe7ac80159117348d1092b61d5b180180fa220cdb0",
          "md5": "57ddcea32fe31a7bd5b3d9a30ad4e5c4",
          "sha256": "0377d803dabe0c67d83818b0b614c9ef294b366d54dae368d826727f7cced02b"
        },
        "downloads": -1,
        "filename": "python-playvox-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "57ddcea32fe31a7bd5b3d9a30ad4e5c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3530,
        "upload_time": "2020-04-24T19:18:00",
        "upload_time_iso_8601": "2020-04-24T19:18:00.301883Z",
        "url": "https://files.pythonhosted.org/packages/bb/6b/39a8c2cf1c5f140693fe7ac80159117348d1092b61d5b180180fa220cdb0/python-playvox-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb7df50f491ad0ff43f971bdc00e0a3d976c11c1af73382254adefaee8953beb",
          "md5": "cbc90bf143fe8326e75b767b359d29c7",
          "sha256": "83dc5c9d1909c88b617e060f42a76aad18ecd049a79c76fcc46fa0c211108758"
        },
        "downloads": -1,
        "filename": "python_playvox-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbc90bf143fe8326e75b767b359d29c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 3130,
        "upload_time": "2020-04-29T18:34:22",
        "upload_time_iso_8601": "2020-04-29T18:34:22.557152Z",
        "url": "https://files.pythonhosted.org/packages/eb/7d/f50f491ad0ff43f971bdc00e0a3d976c11c1af73382254adefaee8953beb/python_playvox-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e335abd51f914e72e936100cc20b3c3b700136c7c6bb81807123fb1aa35f63b",
          "md5": "5c4a8ce4495fcc929ca95b098a9c7184",
          "sha256": "9a6b86681409412d33a572e5f9106c9a27dd37085b599934317fba75dec77603"
        },
        "downloads": -1,
        "filename": "python-playvox-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5c4a8ce4495fcc929ca95b098a9c7184",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 3427,
        "upload_time": "2020-04-29T18:34:21",
        "upload_time_iso_8601": "2020-04-29T18:34:21.634530Z",
        "url": "https://files.pythonhosted.org/packages/8e/33/5abd51f914e72e936100cc20b3c3b700136c7c6bb81807123fb1aa35f63b/python-playvox-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2cf390d6e8f1acd57af496861093c19100bb0c2ce5de5213d3fe2ff1e5b6408",
          "md5": "cfdb6900959961dd69181cc869d50ccd",
          "sha256": "c0135fb8e5a7587a804de04b919a8f9f7c201ea84e24d7376864c9dcf2e342e5"
        },
        "downloads": -1,
        "filename": "python_playvox-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfdb6900959961dd69181cc869d50ccd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 10135,
        "upload_time": "2020-05-26T20:26:56",
        "upload_time_iso_8601": "2020-05-26T20:26:56.116530Z",
        "url": "https://files.pythonhosted.org/packages/f2/cf/390d6e8f1acd57af496861093c19100bb0c2ce5de5213d3fe2ff1e5b6408/python_playvox-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccc2022e705b1c48acf1cc34ceffc6ddc6a2d09a5d21de0e98490af855598649",
          "md5": "cbc1d88613300828abd3eb1c0f9712cf",
          "sha256": "59266f787a7b773c443b65eec1ab0cfa6e6586b6902e81ef375513d8b5e85f7c"
        },
        "downloads": -1,
        "filename": "python-playvox-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cbc1d88613300828abd3eb1c0f9712cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 12969,
        "upload_time": "2020-05-26T20:26:54",
        "upload_time_iso_8601": "2020-05-26T20:26:54.662461Z",
        "url": "https://files.pythonhosted.org/packages/cc/c2/022e705b1c48acf1cc34ceffc6ddc6a2d09a5d21de0e98490af855598649/python-playvox-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "193c07caf007cd02f110854e67c00dd1ef74df3cbf7a26994766efa4d1ef866f",
          "md5": "4d0aace76f9b8ce63e7c0757c89f29a7",
          "sha256": "7af9c9b18acd32f6e53197121cfdc6c06f08546af5e63d19868f12dfaa422746"
        },
        "downloads": -1,
        "filename": "python_playvox-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d0aace76f9b8ce63e7c0757c89f29a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 9037,
        "upload_time": "2020-05-26T20:58:08",
        "upload_time_iso_8601": "2020-05-26T20:58:08.498135Z",
        "url": "https://files.pythonhosted.org/packages/19/3c/07caf007cd02f110854e67c00dd1ef74df3cbf7a26994766efa4d1ef866f/python_playvox-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29a81ac7483998db9b8fcdb492ea2bdd3e3bd2c513c7aeb622322ece92176c93",
          "md5": "a77454836c1b4eb8b91911da936db42a",
          "sha256": "ce86016d3d9db39ec124e6faf420721c171c60b88303e745f758a9af766d84bd"
        },
        "downloads": -1,
        "filename": "python-playvox-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a77454836c1b4eb8b91911da936db42a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 11165,
        "upload_time": "2020-05-26T20:58:07",
        "upload_time_iso_8601": "2020-05-26T20:58:07.447161Z",
        "url": "https://files.pythonhosted.org/packages/29/a8/1ac7483998db9b8fcdb492ea2bdd3e3bd2c513c7aeb622322ece92176c93/python-playvox-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "193c07caf007cd02f110854e67c00dd1ef74df3cbf7a26994766efa4d1ef866f",
        "md5": "4d0aace76f9b8ce63e7c0757c89f29a7",
        "sha256": "7af9c9b18acd32f6e53197121cfdc6c06f08546af5e63d19868f12dfaa422746"
      },
      "downloads": -1,
      "filename": "python_playvox-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d0aace76f9b8ce63e7c0757c89f29a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 9037,
      "upload_time": "2020-05-26T20:58:08",
      "upload_time_iso_8601": "2020-05-26T20:58:08.498135Z",
      "url": "https://files.pythonhosted.org/packages/19/3c/07caf007cd02f110854e67c00dd1ef74df3cbf7a26994766efa4d1ef866f/python_playvox-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29a81ac7483998db9b8fcdb492ea2bdd3e3bd2c513c7aeb622322ece92176c93",
        "md5": "a77454836c1b4eb8b91911da936db42a",
        "sha256": "ce86016d3d9db39ec124e6faf420721c171c60b88303e745f758a9af766d84bd"
      },
      "downloads": -1,
      "filename": "python-playvox-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a77454836c1b4eb8b91911da936db42a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 11165,
      "upload_time": "2020-05-26T20:58:07",
      "upload_time_iso_8601": "2020-05-26T20:58:07.447161Z",
      "url": "https://files.pythonhosted.org/packages/29/a8/1ac7483998db9b8fcdb492ea2bdd3e3bd2c513c7aeb622322ece92176c93/python-playvox-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}