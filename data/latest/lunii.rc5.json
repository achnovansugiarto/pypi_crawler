{
  "info": {
    "author": "Bastien Saidi",
    "author_email": "saidibastien@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Education",
      "Topic :: Multimedia",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Emulators"
    ],
    "description": "# Lumiios\n\nLumiios is a Python program that allows you to manage and emulate the Lunii StoryTeller. With Lumiios, you can easily parse every story in your device and get details about each one.\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Device-level methods](#device-level-methods)\n  - [Story-level methods](#story-level-methods)\n  - [Playing stories](#playing-stories)\n- [Contributing](#contributing)\n\n## Installation\n\nLumiios is available under PyPi! You can install it by:\n```bash\npip install lunii\n```\n\nOr alternatively you can:\n```bash\npip install git+https://github.com/bastien8060/Lumiios\n```\n\n## Usage\n\n### Device-level methods\nTo use Lumiios, you need to create an instance of the Device class by passing in the folder mountpoint or dump location of your Lunii StoryTeller. Once you have a Device instance, you can call its methods to get information about the stories on your device.\n\n```python\nfrom lunii import Device\n\ndevice = Device('/media/lunii')\n\n# get the serial number of the Lunii StoryTeller\nsnu = device.snu\n\n# get the major and minor firmware version of the Lunii StoryTeller\nfw_vers_major = device.fw_vers_major\nfw_vers_minor = device.fw_vers_minor\n\nprint(f'Lunii StoryTeller SNU: {snu}')\nprint(f'Lunii StoryTeller Firmware Version: {fw_vers_major}.{fw_vers_minor}')\n```\n\n### Story-level methods\n\nYou can also parse the stories on your device and get information about each one, as well as read them fully in the next release.\n\n```python\n# parse all stories\ndevice.parse_stories()\n\nstory = device.stories[0]\n\nversion = story.version\ntitle = story.title\nauthorized = story.authorized # True if story is authorized by the Lunii StoryTeller (checksum is valid)\nnight_mode = story.night_mode # True if the story is Night Mode compatible\n\nif authorized:\n    print(f'Version: {version}')\n    print(f'Title: {title}')\n    print(f'Night Mode: {night_mode}')\nelse:\n    print(f'Story {title} is not authorized')\n\n```\n\nYou can also parse a single story by passing in the UUID of the story. This is useful if you have a lot of stories on your device.\n\n```python\n# get the list of stories installed on the Lunii StoryTeller\nstory_uuid = device.story_list[0]\n\n# parse a single story\nstory = device.parse_story(story_uuid)\n```\n\nLumiios also allows you to read the cover audio of a story. \n\n```python\n# get the cover audio of a story\ncover_audio = story.cover_audio\n\nprint(f'Cover audio content type: {cover_audio.audio_type}')\n\nprint('Playing cover audio...')\ncover_audio.play()\nwhile cover_audio.is_playing():\n    time.sleep(0.1)\ncover_audio.release()\n\n\n# saving it\nwith open('cover_audio.mp3', 'wb') as f:\n    f.write(cover_audio.content)\n```\n\n### Playing stories\n\nLumiios also allows you to play stories on your Lunii StoryTeller. This is done by creating a StoryPlayer instance with a Story instance. You can then play the story by calling the play() method.\n\n```python\nfrom lunii import StoryPlayer\n\nstory_player = StoryPlayer(story)\n# this will block until the story is finished playing\nstory_player.play()\n\nprint(\"Player History: {}\".format(story_player.node_history))\n```\nOr you can interact with the story programmatically by passing interactive=False and callbacks to the StoryPlayer constructor.\n\n```python\n\ndef display_cb(image:ImageAsset):\n    with open('image.png', 'wb') as f:\n        f.write(image.content)\n    # or display the image in a terminal: image.show()\n\ndef audio_cb(audio:AudioAsset):\n    with open('audio.mp3', 'wb') as f:\n        f.write(audio.content)\n    # or play the audio with vlc: audio.play()\n\nstory_player = StoryPlayer(story, interactive=False, display_cb=display_cb, audio_cb=audio_cb)\nstory_player.play() # blocks until the story is finished playing\n```\n\nyou can run the play() method in a separate thread to allow the story to play in the background. These are the methods you can use to interact with the story:\n\n```python\nfrom lunii.utils import Buttons\n\nstory_player.play() # starts playing the story\nstory_player.walk_back() # goes back to the previous node\nreset_to_node(0) # resets the story to the node #0 so the start of the story\nstory_player.playing # returns True if the story is playing and False if it has finished \n\nbuttons = [Buttons.PLUS, Buttons.MINUS, Buttons.HOME, buttons.OK]\nstory_player.feed_input(buttons[0]) # feeds the story with the buttons pressed\n```\n\n\n> Note: The StoryPlayer class is still in development and is not fully functional yet.\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nIf you find a bug or have a feature request, please open an issue on GitHub.\n\nIf you want to contribute to Lumiios, please open a pull request on GitHub.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bastien8060/lumiios",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lunii",
    "package_url": "https://pypi.org/project/lunii/",
    "platform": null,
    "project_url": "https://pypi.org/project/lunii/",
    "project_urls": {
      "Homepage": "https://github.com/bastien8060/lumiios"
    },
    "release_url": "https://pypi.org/project/lunii/0.2.1a1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python package for working with Lunii devices, and emulating them",
    "version": "0.2.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17205740,
  "releases": {
    "0.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15feac751b75cdba59ee7b30d2c3cbf9b243d214adf650ebc4b4e58121cbc2d8",
          "md5": "afedf09b62ca39df2cebd51ae9604b20",
          "sha256": "b4bd5b8d9f9b4699eb9c483bfc62eed3c7f1de41abe2ace534a5aa3624adfca1"
        },
        "downloads": -1,
        "filename": "lunii-0.1.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "afedf09b62ca39df2cebd51ae9604b20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32241,
        "upload_time": "2023-03-07T12:33:00",
        "upload_time_iso_8601": "2023-03-07T12:33:00.906436Z",
        "url": "https://files.pythonhosted.org/packages/15/fe/ac751b75cdba59ee7b30d2c3cbf9b243d214adf650ebc4b4e58121cbc2d8/lunii-0.1.0a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa8535b5244602bba71faec90b1d92c6c28837043aa16b0449956ed9d2887ad5",
          "md5": "34cf35ad2ef662c0d263ff9612439c74",
          "sha256": "cc85a9cedd9fe9c0db78e9e4ba6a822f20096df267a5becf381652eb38226f37"
        },
        "downloads": -1,
        "filename": "lunii-0.1.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "34cf35ad2ef662c0d263ff9612439c74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34119,
        "upload_time": "2023-03-07T14:38:25",
        "upload_time_iso_8601": "2023-03-07T14:38:25.272498Z",
        "url": "https://files.pythonhosted.org/packages/fa/85/35b5244602bba71faec90b1d92c6c28837043aa16b0449956ed9d2887ad5/lunii-0.1.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ed71d089c72d023834ce4c7074038e367bda4b1e6ddef7383a1c25eab796eec",
          "md5": "711f0116222bb9f59fe0f75f0793892c",
          "sha256": "41875edb41ce4228b8e077ddcf65a15fb3a57bc3d01de0fce1970498cd077825"
        },
        "downloads": -1,
        "filename": "lunii-0.1.1a2.tar.gz",
        "has_sig": false,
        "md5_digest": "711f0116222bb9f59fe0f75f0793892c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34124,
        "upload_time": "2023-03-07T15:20:32",
        "upload_time_iso_8601": "2023-03-07T15:20:32.101207Z",
        "url": "https://files.pythonhosted.org/packages/7e/d7/1d089c72d023834ce4c7074038e367bda4b1e6ddef7383a1c25eab796eec/lunii-0.1.1a2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aa8e6fc945a055b426a49da8e963992cc2bbad91c1445f8913b4d4ec67b26d5",
          "md5": "44d4d7d25b3ff0c8ad78a1a25c47245a",
          "sha256": "e4803c5c489588ea4a23ad25c7c29464645b4b80289204cec057a01c38787d8d"
        },
        "downloads": -1,
        "filename": "lunii-0.2.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "44d4d7d25b3ff0c8ad78a1a25c47245a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34426,
        "upload_time": "2023-03-07T16:39:43",
        "upload_time_iso_8601": "2023-03-07T16:39:43.027203Z",
        "url": "https://files.pythonhosted.org/packages/4a/a8/e6fc945a055b426a49da8e963992cc2bbad91c1445f8913b4d4ec67b26d5/lunii-0.2.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "354062c0eb49b45109f553a913c5409f966233893f1c6be2b8777a5058d7c94d",
          "md5": "f22a4a0ae99288e2c512d5ae4a463143",
          "sha256": "12b4813cf5588675b1480961dec0e2dbd587d34089ae998eabff28c38bfa7b6b"
        },
        "downloads": -1,
        "filename": "lunii-0.2.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "f22a4a0ae99288e2c512d5ae4a463143",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35336,
        "upload_time": "2023-03-08T11:21:42",
        "upload_time_iso_8601": "2023-03-08T11:21:42.938458Z",
        "url": "https://files.pythonhosted.org/packages/35/40/62c0eb49b45109f553a913c5409f966233893f1c6be2b8777a5058d7c94d/lunii-0.2.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "354062c0eb49b45109f553a913c5409f966233893f1c6be2b8777a5058d7c94d",
        "md5": "f22a4a0ae99288e2c512d5ae4a463143",
        "sha256": "12b4813cf5588675b1480961dec0e2dbd587d34089ae998eabff28c38bfa7b6b"
      },
      "downloads": -1,
      "filename": "lunii-0.2.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "f22a4a0ae99288e2c512d5ae4a463143",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35336,
      "upload_time": "2023-03-08T11:21:42",
      "upload_time_iso_8601": "2023-03-08T11:21:42.938458Z",
      "url": "https://files.pythonhosted.org/packages/35/40/62c0eb49b45109f553a913c5409f966233893f1c6be2b8777a5058d7c94d/lunii-0.2.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}