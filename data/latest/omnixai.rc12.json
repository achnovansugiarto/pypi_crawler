{
  "info": {
    "author": "Wenzhuo Yang, Hung Le, Tanmay Shivprasad Laud, Silvio Savarese, Steven C.H. Hoi",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<p align=\"center\">\n    <br>\n    <img src=\"https://github.com/salesforce/OmniXAI/raw/main/docs/_static/logo_small.png\" width=\"400\"/>\n    <br>\n<p>\n\n# OmniXAI: A Library for Explainable AI\n<div align=\"center\">\n  <a href=\"#\">\n  <img src=\"https://img.shields.io/badge/Python-3.7, 3.8, 3.9, 3.10-blue\">\n  </a>\n  <a href=\"https://pypi.python.org/pypi/omnixai\">\n  <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/omnixai.svg\"/>\n  </a>\n  <a href=\"https://opensource.salesforce.com/OmniXAI\">\n  <img alt=\"Documentation\" src=\"https://github.com/salesforce/OmniXAI/actions/workflows/docs.yml/badge.svg\"/>\n  </a>\n  <a href=\"https://pepy.tech/project/omnixai\">\n  <img alt=\"Downloads\" src=\"https://pepy.tech/badge/omnixai\">\n  </a>\n  <a href=\"https://arxiv.org/abs/2206.01612\">\n  <img alt=\"DOI\" src=\"https://zenodo.org/badge/DOI/10.48550/ARXIV.2206.01612.svg\"/>\n  </a>\n</div>\n\n## Table of Contents\n1. [Introduction](#introduction)\n2. [Installation](#installation)\n3. [Getting Started](#getting-started)\n4. [Documentation](https://opensource.salesforce.com/OmniXAI/latest/index.html)\n5. [Tutorials](https://opensource.salesforce.com/OmniXAI/latest/tutorials.html)\n6. [Deployment](#deployment)\n7. [Dashboard Demo](https://sfr-omnixai-demo.herokuapp.com/)\n8. [How to Contribute](https://opensource.salesforce.com/OmniXAI/latest/omnixai.html#how-to-contribute)\n9. [Technical Report and Citing OmniXAI](#technical-report-and-citing-omnixai)\n\n\n## Introduction\n\nOmniXAI (short for Omni eXplainable AI) is a Python machine-learning library for explainable AI (XAI), offering omni-way explainable AI and interpretable \nmachine learning capabilities to address many pain points in explaining decisions made by machine learning \nmodels in practice. OmniXAI aims to be a one-stop comprehensive library that makes explainable AI easy for \ndata scientists, ML researchers and practitioners who need explanation for various types of data, models and \nexplanation methods at different stages of ML process:\n![alt text](https://github.com/salesforce/OmniXAI/raw/main/docs/_static/ml_pipeline.png)\n\nOmniXAI includes a rich family of explanation methods integrated in a unified interface, which \nsupports multiple data types (tabular data, images, texts, time-series), multiple types of ML models \n(traditional ML in Scikit-learn and deep learning models in PyTorch/TensorFlow), and a range of diverse explaination \nmethods including \"model-specific\" and \"model-agnostic\" methods (such as feature-attribution explanation, \ncounterfactual explanation, gradient-based explanation, feature visualization, etc). For practitioners, OmniXAI provides an easy-to-use \nunified interface to generate the explanations for their applications by only writing a few lines of \ncodes, and also a GUI dashboard for visualization for obtaining more insights about decisions.\n\nThe following table shows the supported explanation methods and features in our library.\nWe will continue improving this library to make it more comprehensive in the future.\n\n|          Method           |  Model Type   | Explanation Type | EDA | Tabular | Image | Text | Timeseries | \n:-------------------------:|:-------------:|:----------------:|:---:|:-------:|:-----:| :---: | :---:\n|     Feature analysis      |      NA       |      Global      |  ✅  |         |       |      |      |\n|     Feature selection     |      NA       |      Global      |  ✅  |         |       |      |      |\n|    Prediction metrics     |   Black box   |      Global      |     |    ✅    |   ✅   | ✅   |  ✅  |\n|       Bias metrics        |   Black box   |      Global      |     |    ✅    |       |      |      |\n| Partial dependence plots  |   Black box   |      Global      |     |    ✅    |       |      |      |\n| Accumulated local effects |   Black box   |      Global      |     |    ✅    |       |      |      |\n|   Sensitivity analysis    |   Black box   |      Global      |     |    ✅    |       |      |      |\n|  Permutation explanation  |   Black box   |      Global      |     |    ✅    |       |      |      |\n|   Feature visualization   |  Torch or TF  |      Global      |     |         |   ✅   |      |      |\n|       Feature maps        |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|           LIME            |   Black box   |      Local       |     |    ✅    |   ✅   | ✅   |      |\n|           SHAP            |  Black box*   |      Local       |     |    ✅    |   ✅   | ✅   |  ✅  |\n|         What-if           |  Black box    |      Local       |     |    ✅    |       |      |     |\n|    Integrated gradient    |  Torch or TF  |      Local       |     |    ✅    |   ✅   | ✅   |      |\n|      Counterfactual       |  Black box*   |      Local       |     |    ✅    |   ✅   | ✅   |  ✅  |\n|  Contrastive explanation  |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|   Grad-CAM, Grad-CAM++    |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|         Score-CAM         |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|         Layer-CAM         |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|      Smooth gradient      |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|  Guided backpropagation   |  Torch or TF  |      Local       |     |         |   ✅   |      |      |\n|    Learning to explain    |   Black box   |      Local       |     |    ✅    |   ✅   | ✅   |      |\n|       Linear models       | Linear models | Global and Local |     |    ✅    |       |      |      |\n|        Tree models        |  Tree models  | Global and Local |     |    ✅    |       |      |      |\n\n*SHAP* accepts black box models for tabular data, PyTorch/Tensorflow models for image data, transformer models\nfor text data. *Counterfactual* accepts black box models for tabular, text and time-series data, and PyTorch/Tensorflow models for\nimage data.\n\nThis [table](https://opensource.salesforce.com/OmniXAI/latest/index.html#comparison-with-competitors) \nshows the comparison between our toolkit/library and other existing XAI toolkits/libraries\nin literature.\n\n## Installation\n\nYou can install ``omnixai`` from PyPI by calling ``pip install omnixai``. You may install from source by\ncloning the OmniXAI repo, navigating to the root directory, and calling\n``pip install .``, or ``pip install -e .`` to install in editable mode. You may install additional dependencies:\n\n- **For plotting & visualization**: Calling ``pip install omnixai[plot]``, or ``pip install .[plot]`` from the\n  root directory of the repo.\n- **For vision tasks**: Calling ``pip install omnixai[vision]``, or ``pip install .[vision]`` from the\n  root directory of the repo.\n- **For NLP tasks**: Calling ``pip install omnixai[nlp]``, or ``pip install .[nlp]`` from the\n  root directory of the repo.\n- **Install all the dependencies**: Calling ``pip install omnixai[all]``, or ``pip install .[all]`` from the\n  root directory of the repo.\n\n## Getting Started\n\nFor example code and an introduction to the library, see the Jupyter notebooks in\n[tutorials](https://opensource.salesforce.com/OmniXAI/latest/tutorials.html), and the guided walkthrough\n[here](https://opensource.salesforce.com/OmniXAI/latest/index.html). A dashboard demo can be found [here](https://sfr-omnixai-demo.herokuapp.com/).\n\nSome examples:\n1. [Tabular classification](https://github.com/salesforce/OmniXAI/blob/main/tutorials/tabular_classification.ipynb)\n2. [Tabular regression](https://github.com/salesforce/OmniXAI/blob/main/tutorials/tabular_regression.ipynb)\n3. [Image classification](https://github.com/salesforce/OmniXAI/blob/main/tutorials/vision.ipynb)\n4. [Text classification](https://github.com/salesforce/OmniXAI/blob/main/tutorials/nlp_imdb.ipynb)\n5. [Time-series anomaly detection](https://github.com/salesforce/OmniXAI/blob/main/tutorials/timeseries.ipynb)\n6. [Vision-language tasks](https://github.com/salesforce/OmniXAI/blob/main/tutorials/vision/gradcam_vlm.ipynb)\n7. [Ranking tasks](https://github.com/salesforce/OmniXAI/blob/main/tutorials/tabular/ranking.ipynb)\n8. [Feature visualization](https://github.com/salesforce/OmniXAI/blob/main/tutorials/vision/feature_visualization_torch.ipynb)\n9. [Check feature maps](https://github.com/salesforce/OmniXAI/blob/main/tutorials/vision/feature_map_torch.ipynb)\n\nTo get started, we recommend the linked tutorials in [tutorials](https://opensource.salesforce.com/OmniXAI/latest/tutorials.html).\nIn general, we recommend using `TabularExplainer`, `VisionExplainer`,\n`NLPExplainer` and `TimeseriesExplainer` for tabular, vision, NLP and time-series tasks, respectively, and using\n`DataAnalyzer` and `PredictionAnalyzer` for feature analysis and prediction result analysis.\nThese classes act as the factories of the individual explainers supported in OmniXAI, providing a simpler\ninterface to generate multiple explanations. To generate explanations, you only need to specify\n\n- **The ML model to explain**: e.g., a scikit-learn model, a tensorflow model, a pytorch model or a black-box prediction function.\n- **The pre-processing function**: i.e., converting raw input features into the model inputs.\n- **The post-processing function (optional)**: e.g., converting the model outputs into class probabilities.\n- **The explainers to apply**: e.g., SHAP, MACE, Grad-CAM.\n\nBesides using these classes, you can also create a single explainer defined in the `omnixai.explainers` package, e.g.,\n`ShapTabular`, `GradCAM`, `IntegratedGradient` or `FeatureVisualizer`.\n\nLet's take the income prediction task as an example.\nThe [dataset](https://archive.ics.uci.edu/ml/datasets/adult) used in this example is for income prediction.\nWe recommend using data class `Tabular` to represent a tabular dataset. To create a `Tabular` instance given a pandas\ndataframe, you need to specify the dataframe, the categorical feature names (if exists) and the target/label\ncolumn name (if exists).\n\n```python\nfrom omnixai.data.tabular import Tabular\n# Load the dataset\nfeature_names = [\n   \"Age\", \"Workclass\", \"fnlwgt\", \"Education\",\n   \"Education-Num\", \"Marital Status\", \"Occupation\",\n   \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\",\n   \"Capital Loss\", \"Hours per week\", \"Country\", \"label\"\n]\ndf = pd.DataFrame(\n  np.genfromtxt('adult.data', delimiter=', ', dtype=str),\n  columns=feature_names\n)\ntabular_data = Tabular(\n   df,\n   categorical_columns=[feature_names[i] for i in [1, 3, 5, 6, 7, 8, 9, 13]],\n   target_column='label'\n)\n```\n\nThe package `omnixai.preprocessing` provides several useful preprocessing functions\nfor a `Tabular` instance. `TabularTransform` is a special transform designed for processing tabular data.\nBy default, it converts categorical features into one-hot encoding, and keeps continuous-valued features.\nThe  method ``transform`` of `TabularTransform` transforms a `Tabular` instance to a numpy array.\nIf the `Tabular` instance has a target/label column, the last column of the numpy array\nwill be the target/label. You can apply any customized preprocessing functions instead of using `TabularTransform`. \nAfter data preprocessing, let's train a XGBoost classifier for this task.\n\n```python\nfrom omnixai.preprocessing.tabular import TabularTransform\n# Data preprocessing\ntransformer = TabularTransform().fit(tabular_data)\nclass_names = transformer.class_names\nx = transformer.transform(tabular_data)\n# Split into training and test datasets\ntrain, test, train_labels, test_labels = \\\n    sklearn.model_selection.train_test_split(x[:, :-1], x[:, -1], train_size=0.80)\n# Train an XGBoost model (the last column of `x` is the label column after transformation)\nmodel = xgboost.XGBClassifier(n_estimators=300, max_depth=5)\nmodel.fit(train, train_labels)\n# Convert the transformed data back to Tabular instances\ntrain_data = transformer.invert(train)\ntest_data = transformer.invert(test)\n```\n\nTo initialize `TabularExplainer`, the following parameters need to be set:\n\n- ``explainers``: The names of the explainers to apply, e.g., [\"lime\", \"shap\", \"mace\", \"pdp\"].\n- ``data``: The data used to initialize explainers. ``data`` is the training dataset for training the\n  machine learning model. If the training dataset is too large, ``data`` can be a subset of it by applying\n  `omnixai.sampler.tabular.Sampler.subsample`.\n- ``model``: The ML model to explain, e.g., a scikit-learn model, a tensorflow model or a pytorch model.\n- ``preprocess``: The preprocessing function converting the raw inputs (A `Tabular` instance) into the inputs of ``model``.\n- ``postprocess`` (optional): The postprocessing function transforming the outputs of ``model`` to a\n  user-specific form, e.g., the predicted probability for each class. The output of `postprocess` should be a numpy array.\n- ``mode``: The task type, e.g., \"classification\" or \"regression\".\n\nThe preprocessing function takes a `Tabular` instance as its input and outputs the processed features that\nthe ML model consumes. In this example, we simply call ``transformer.transform``. If you use some customized transforms \non pandas dataframes, the preprocess function has this format: `lambda z: some_transform(z.to_pd())`. If the output of ``model``\nis not a numpy array, ``postprocess`` needs to be set to convert it into a numpy array.\n\n```python\nfrom omnixai.explainers.tabular import TabularExplainer\n# Initialize a TabularExplainer\nexplainer = TabularExplainer(\n  explainers=[\"lime\", \"shap\", \"mace\", \"pdp\", \"ale\"], # The explainers to apply\n  mode=\"classification\",                             # The task type\n  data=train_data,                                   # The data for initializing the explainers\n  model=model,                                       # The ML model to explain\n  preprocess=lambda z: transformer.transform(z),     # Converts raw features into the model inputs\n  params={\n     \"mace\": {\"ignored_features\": [\"Sex\", \"Race\", \"Relationship\", \"Capital Loss\"]}\n  }                                                  # Additional parameters\n)\n```\n\nIn this example, LIME, SHAP and MACE generate local explanations while PDP (partial dependence plot)\ngenerates global explanations. ``explainer.explain`` returns the local explanations generated by the\nthree methods given the test instances, and ``explainer.explain_global`` returns the global explanations\ngenerated by PDP. `TabularExplainer` hides all the details behind the explainers, so we can simply call\nthese two methods to generate explanations.\n\n```python\n# Generate explanations\ntest_instances = test_data[:5]\nlocal_explanations = explainer.explain(X=test_instances)\nglobal_explanations = explainer.explain_global(\n    params={\"pdp\": {\"features\": [\"Age\", \"Education-Num\", \"Capital Gain\",\n                                 \"Capital Loss\", \"Hours per week\", \"Education\",\n                                 \"Marital Status\", \"Occupation\"]}}\n)\n```\n\nSimilarly, we create a `PredictionAnalyzer` for computing performance metrics for this classification task. \nTo initialize `PredictionAnalyzer`, the following parameters need to be set:\n\n- `mode`: The task type, e.g., \"classification\" or \"regression\".\n- `test_data`: The test dataset, which should be a `Tabular` instance.\n- `test_targets`: The test labels or targets. For classification, ``test_targets`` should be integers \n  (processed by a LabelEncoder) and match the class probabilities returned by the ML model.\n- `preprocess`: The preprocessing function converting the raw data (a `Tabular` instance) into the inputs of `model`.\n- `postprocess` (optional): The postprocessing function transforming the outputs of ``model`` to a user-specific form, \n  e.g., the predicted probability for each class. The output of `postprocess` should be a numpy array.\n\n```python\nfrom omnixai.explainers.prediction import PredictionAnalyzer\n\nanalyzer = PredictionAnalyzer(\n    mode=\"classification\",\n    test_data=test_data,                           # The test dataset (a `Tabular` instance)\n    test_targets=test_labels,                      # The test labels (a numpy array)\n    model=model,                                   # The ML model\n    preprocess=lambda z: transformer.transform(z)  # Converts raw features into the model inputs\n)\nprediction_explanations = analyzer.explain()\n```\n\nGiven the generated explanations, we can launch a dashboard (a Dash app) for visualization by setting the test\ninstance, the local explanations, the global explanations, the prediction metrics, the class names, and additional\nparameters for visualization (optional). If you want \"what-if\" analysis, you can set the ``explainer`` parameter\nwhen initializing the dashboard. For \"what-if\" analysis, OmniXAI also allows you to set a second explainer\nif you want to compare different models.\n\n```python\nfrom omnixai.visualization.dashboard import Dashboard\n# Launch a dashboard for visualization\ndashboard = Dashboard(\n   instances=test_instances,                        # The instances to explain\n   local_explanations=local_explanations,           # Set the local explanations\n   global_explanations=global_explanations,         # Set the global explanations\n   prediction_explanations=prediction_explanations, # Set the prediction metrics\n   class_names=class_names,                         # Set class names\n   explainer=explainer                              # The created TabularExplainer for what if analysis\n)\ndashboard.show()                                    # Launch the dashboard\n```\n\nAfter opening the Dash app in the browser, we will see a dashboard showing the explanations:\n![alt text](https://github.com/salesforce/OmniXAI/raw/main/docs/_static/demo.gif)\n\nFor vision tasks, the same interface is used to create explainers and generate explanations. \nLet's take an image classification model as an example.\n\n```python\nfrom omnixai.explainers.vision import VisionExplainer\nfrom omnixai.visualization.dashboard import Dashboard\n\nexplainer = VisionExplainer(\n    explainers=[\"gradcam\", \"lime\", \"ig\", \"ce\", \"feature_visualization\"],\n    mode=\"classification\",\n    model=model,                   # An image classification model, e.g., ResNet50\n    preprocess=preprocess,         # The preprocessing function\n    postprocess=postprocess,       # The postprocessing function\n    params={\n        # Set the target layer for GradCAM\n        \"gradcam\": {\"target_layer\": model.layer4[-1]},\n        # Set the objective for feature visualization\n        \"feature_visualization\": \n          {\"objectives\": [{\"layer\": model.layer4[-3], \"type\": \"channel\", \"index\": list(range(6))}]}\n    },\n)\n# Generate explanations of GradCAM, LIME, IG and CE\nlocal_explanations = explainer.explain(test_img)\n# Generate explanations of feature visualization\nglobal_explanations = explainer.explain_global()\n# Launch the dashboard\ndashboard = Dashboard(\n    instances=test_img,\n    local_explanations=local_explanations,\n    global_explanations=global_explanations\n)\ndashboard.show()\n```\n\nThe following figure shows the dashboard of these explanations:\n![alt text](https://github.com/salesforce/OmniXAI/raw/main/docs/_static/demo_vision.gif)\n\nFor NLP tasks and time-series forecasting/anomaly detection, OmniXAI also provides the same interface\nto generate and visualize explanations. This figure shows a dashboard example of text classification\nand time-series anomaly detection:\n![alt text](https://github.com/salesforce/OmniXAI/raw/main/docs/_static/demo_nlp_ts.gif)\n\n## Deployment\n\nThe explainers in OmniXAI can be easily deployed via [BentoML](https://github.com/bentoml/BentoML). \nBentoML is a popular open-source unified model serving framework, supporting multiple platforms including\nAWS, GCP, Heroku, etc. We implemented the BentoML-format interfaces for OmniXAI so that users only need\nfew lines of code to deploy their selected explainers. \n\nLet's take the income prediction task as an example. Given the trained model and the initialized explainer, \nyou only need to save the explainer in the BentoML local model store:\n\n```python\nfrom omnixai.explainers.tabular import TabularExplainer\nfrom omnixai.deployment.bentoml.omnixai import save_model\n\nexplainer = TabularExplainer(\n  explainers=[\"lime\", \"shap\", \"mace\", \"pdp\", \"ale\"],\n  mode=\"classification\",\n  data=train_data,\n  model=model,\n  preprocess=lambda z: transformer.transform(z),\n  params={\n     \"mace\": {\"ignored_features\": [\"Sex\", \"Race\", \"Relationship\", \"Capital Loss\"]}\n  }\n)\nsave_model(\"tabular_explainer\", explainer)\n```\n\nAnd then create a file (e.g., service.py) for the ML service code:\n\n```python\nfrom omnixai.deployment.bentoml.omnixai import init_service\n\nsvc = init_service(\n    model_tag=\"tabular_explainer:latest\",\n    task_type=\"tabular\",\n    service_name=\"tabular_explainer\"\n)\n```\n\nThe `init_service` function defines two API endpoints, i.e., `/predict` for model predictions and `/explain` for\ngenerating explanations. You can start an API server locally to test the service code above:\n\n```python\nbentoml serve service:svc --reload\n```\n\nThe endpoints can be accessed locally:\n\n```python\nimport requests\nfrom requests_toolbelt.multipart.encoder import MultipartEncoder\n\ndata = '[\"39\", \"State-gov\", \"77516\", \"Bachelors\", \"13\", \"Never-married\", ' \\\n       '\"Adm-clerical\", \"Not-in-family\", \"White\", \"Male\", \"2174\", \"0\", \"40\", \"United-States\"]'\n\n# Test the prediction endpoint\nprediction = requests.post(\n    \"http://0.0.0.0:3000/predict\",\n    headers={\"content-type\": \"application/json\"},\n    data=data\n).text\n\n# Test the explanation endpoint\nm = MultipartEncoder(\n    fields={\n        \"data\": data,\n        \"params\": '{\"lime\": {\"y\": [0]}}',\n    }\n)\nresult = requests.post(\n    \"http://0.0.0.0:3000/explain\",\n    headers={\"Content-Type\": m.content_type},\n    data=m\n).text\n\n# Parse the results\nfrom omnixai.explainers.base import AutoExplainerBase\nexp = AutoExplainerBase.parse_explanations_from_json(result)\nfor name, explanation in exp.items():\n    explanation.ipython_plot()\n```\n\nYou can build Bento for deployment by following the steps shown in the \n[BentoML repo](https://github.com/bentoml/BentoML#how-it-works). For more examples, please\ncheck [Tabular](https://github.com/salesforce/OmniXAI/tree/main/omnixai/tests/deployment/bentoml/tabular), \n[Vision](https://github.com/salesforce/OmniXAI/tree/main/omnixai/tests/deployment/bentoml/vision), \n[NLP](https://github.com/salesforce/OmniXAI/tree/main/omnixai/tests/deployment/bentoml/nlp).\n\n## How to Contribute\n\nWe welcome the contribution from the open-source community to improve the library!\n\nTo add a new explanation method/feature into the library, please follow the template and steps demonstrated in this \n[documentation](https://opensource.salesforce.com/OmniXAI/latest/omnixai.html#how-to-contribute).\n\n## Technical Report and Citing OmniXAI\nYou can find more details in our technical report: [https://arxiv.org/abs/2206.01612](https://arxiv.org/abs/2206.01612)\n\nIf you're using OmniXAI in your research or applications, please cite using this BibTeX:\n```\n@article{wenzhuo2022-omnixai,\n  author    = {Wenzhuo Yang and Hung Le and Silvio Savarese and Steven Hoi},\n  title     = {OmniXAI: A Library for Explainable AI},\n  year      = {2022},\n  doi       = {10.48550/ARXIV.2206.01612},\n  url       = {https://arxiv.org/abs/2206.01612},\n  archivePrefix = {arXiv},\n  eprint    = {206.01612},\n}\n```\n\n## Contact Us\nIf you have any questions, comments or suggestions, please do not hesitate to contact us at omnixai@salesforce.com.\n\n## License\n[BSD 3-Clause License](LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/salesforce/omnixai",
    "keywords": "XAI Explainable AI Explanation",
    "license": "3-Clause BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "omnixai",
    "package_url": "https://pypi.org/project/omnixai/",
    "platform": null,
    "project_url": "https://pypi.org/project/omnixai/",
    "project_urls": {
      "Homepage": "https://github.com/salesforce/omnixai"
    },
    "release_url": "https://pypi.org/project/omnixai/1.2.5/",
    "requires_dist": [
      "numpy (>=1.17)",
      "pandas (>=1.1.0)",
      "scikit-learn (<1.2,>=0.24)",
      "scipy (>=1.5.0)",
      "scikit-image (>=0.17.2)",
      "matplotlib",
      "pillow (<10.0)",
      "lime",
      "shap (>=0.40.0)",
      "SALib",
      "hnswlib (>=0.5.0)",
      "dill",
      "tqdm",
      "wheel",
      "packaging",
      "ipython (!=8.7.0)",
      "tabulate",
      "statsmodels (>=0.10.1)",
      "plotly (>=4) ; extra == 'all'",
      "dash (>=2.0) ; extra == 'all'",
      "dash-bootstrap-components (>=1.0) ; extra == 'all'",
      "jupyter-dash (>=0.4) ; extra == 'all'",
      "torch (>=1.7) ; extra == 'all'",
      "torchvision (>=0.8.1) ; extra == 'all'",
      "opencv-python-headless (>=4.4) ; extra == 'all'",
      "nltk (>=3.4.5) ; extra == 'all'",
      "polyjuice-nlp ; extra == 'all'",
      "bentoml (>=1.0.0) ; extra == 'all'",
      "bentoml (>=1.0.0) ; extra == 'bentoml'",
      "nltk (>=3.4.5) ; extra == 'nlp'",
      "polyjuice-nlp ; extra == 'nlp'",
      "plotly (>=4) ; extra == 'plot'",
      "dash (>=2.0) ; extra == 'plot'",
      "dash-bootstrap-components (>=1.0) ; extra == 'plot'",
      "jupyter-dash (>=0.4) ; extra == 'plot'",
      "torch (>=1.7) ; extra == 'vision'",
      "torchvision (>=0.8.1) ; extra == 'vision'",
      "opencv-python-headless (>=4.4) ; extra == 'vision'"
    ],
    "requires_python": ">=3.7,<4",
    "summary": "OmniXAI: An Explainable AI Toolbox",
    "version": "1.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16742796,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c18ed8be738c5ab4ad3b7b8c1540fc93ab6f791d9ea1262738a00811d62c1ff",
          "md5": "7bc24edfe8a104479ef5cd6bee27da08",
          "sha256": "16de48c1dafa401c1ed878308e70e9e41aa9f01f3997adf52f4e55c7c9717db9"
        },
        "downloads": -1,
        "filename": "omnixai-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bc24edfe8a104479ef5cd6bee27da08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 360600,
        "upload_time": "2022-06-10T02:14:17",
        "upload_time_iso_8601": "2022-06-10T02:14:17.784422Z",
        "url": "https://files.pythonhosted.org/packages/1c/18/ed8be738c5ab4ad3b7b8c1540fc93ab6f791d9ea1262738a00811d62c1ff/omnixai-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15fc28b4ba29ca08707dd051409ecba76e7cabfa0a6a478d5b696850e44f5de6",
          "md5": "cb9c187076cc91c439a46865887d1dfd",
          "sha256": "8b11a6808f3cd908f11c6c3b67aaa9de0d2200016fd1c9845c02f3c99d98ac63"
        },
        "downloads": -1,
        "filename": "omnixai-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb9c187076cc91c439a46865887d1dfd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 237230,
        "upload_time": "2022-06-10T02:14:19",
        "upload_time_iso_8601": "2022-06-10T02:14:19.710916Z",
        "url": "https://files.pythonhosted.org/packages/15/fc/28b4ba29ca08707dd051409ecba76e7cabfa0a6a478d5b696850e44f5de6/omnixai-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f64e2ea2938d83846fdc32680c88bfa8fb3ff7e337430fe4d2f9639a2eab0dcf",
          "md5": "f005838e9fdcbc9efa5794da860ef524",
          "sha256": "eece024e45e1ad82c1dc73be39973b7ee94302d090bf14c853d226e7edab98da"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f005838e9fdcbc9efa5794da860ef524",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 390883,
        "upload_time": "2022-07-11T06:24:21",
        "upload_time_iso_8601": "2022-07-11T06:24:21.685001Z",
        "url": "https://files.pythonhosted.org/packages/f6/4e/2ea2938d83846fdc32680c88bfa8fb3ff7e337430fe4d2f9639a2eab0dcf/omnixai-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3868a4a0f8e25daa8f20b190e2380094c895adaa8121db0270ea6ecff83953f1",
          "md5": "e66fe04c090317af6c761167e69d4b06",
          "sha256": "5b537828cc4562e60bedfe235990aaef99b57e8ff34c33d0e1e5ca7541ed0fdc"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e66fe04c090317af6c761167e69d4b06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 248840,
        "upload_time": "2022-07-11T06:24:23",
        "upload_time_iso_8601": "2022-07-11T06:24:23.501817Z",
        "url": "https://files.pythonhosted.org/packages/38/68/a4a0f8e25daa8f20b190e2380094c895adaa8121db0270ea6ecff83953f1/omnixai-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30a3cf3dffe3388d10d2ed2f2c6143218fce547e86c878a3184c7ea4f47e0802",
          "md5": "be4767ce1bcda136c707a3f19e63ba75",
          "sha256": "77b422f925779ff23229ea7b6d760aea70af466b92998147a2f1a8e353507901"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be4767ce1bcda136c707a3f19e63ba75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 398089,
        "upload_time": "2022-07-22T04:29:54",
        "upload_time_iso_8601": "2022-07-22T04:29:54.563622Z",
        "url": "https://files.pythonhosted.org/packages/30/a3/cf3dffe3388d10d2ed2f2c6143218fce547e86c878a3184c7ea4f47e0802/omnixai-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38abf00b55b8066fa1e772ea5b1dd97e459cf59a42ab9c1cf78c3e50a1eed7a9",
          "md5": "73659bae939266694bf4589ecfbaf0f8",
          "sha256": "4183b8c4ac6193210e9a41f1aaa2321778a787b78eb77c66d61dde39b0aaa587"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73659bae939266694bf4589ecfbaf0f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 253298,
        "upload_time": "2022-07-22T04:29:56",
        "upload_time_iso_8601": "2022-07-22T04:29:56.473018Z",
        "url": "https://files.pythonhosted.org/packages/38/ab/f00b55b8066fa1e772ea5b1dd97e459cf59a42ab9c1cf78c3e50a1eed7a9/omnixai-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ac32ef64a8291e7fbcc484b356d204eb278e51be821889733dd3ccd80bd5309",
          "md5": "143556cc59bd02091494c78a499a3f24",
          "sha256": "4eadd2e9fca32586fe44f9fdf70376b5f041f469a410ae250ae7e4d9078e15e0"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "143556cc59bd02091494c78a499a3f24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 399805,
        "upload_time": "2022-07-26T06:28:01",
        "upload_time_iso_8601": "2022-07-26T06:28:01.917448Z",
        "url": "https://files.pythonhosted.org/packages/0a/c3/2ef64a8291e7fbcc484b356d204eb278e51be821889733dd3ccd80bd5309/omnixai-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e433e1b0cd5250a19e09a95dabf981b9a0457b2fc82d5315dc7e21e6e570b17",
          "md5": "0bf2b755823558a0c9dd26e8efaebced",
          "sha256": "24f758e3c8881bf751cb6786c9c2f21fc529d832f19a7a536f5297f77784c122"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0bf2b755823558a0c9dd26e8efaebced",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 254623,
        "upload_time": "2022-07-26T06:28:03",
        "upload_time_iso_8601": "2022-07-26T06:28:03.501379Z",
        "url": "https://files.pythonhosted.org/packages/5e/43/3e1b0cd5250a19e09a95dabf981b9a0457b2fc82d5315dc7e21e6e570b17/omnixai-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f348ce6c085165c56faadfc0b758e2b29920543025f2deef0259aa659fadbce6",
          "md5": "3905933e513aa5cd73a11de1b548602d",
          "sha256": "610a1a1defa92d4a28c4b9db1f79b56be4d278d5921269f407dae24e870bef6c"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3905933e513aa5cd73a11de1b548602d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 412911,
        "upload_time": "2022-08-05T08:08:59",
        "upload_time_iso_8601": "2022-08-05T08:08:59.601180Z",
        "url": "https://files.pythonhosted.org/packages/f3/48/ce6c085165c56faadfc0b758e2b29920543025f2deef0259aa659fadbce6/omnixai-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "647bac83abc57bb044189cdb3821eac63f87c1e054a9ca666249c69fe6b482f2",
          "md5": "8197050828d6919f7eb99b8289364afd",
          "sha256": "0940a160be9265d9bfc00f3a6a7019cc05e40afcb77b0ad489ee61114b9f989d"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8197050828d6919f7eb99b8289364afd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 261156,
        "upload_time": "2022-08-05T08:09:01",
        "upload_time_iso_8601": "2022-08-05T08:09:01.077946Z",
        "url": "https://files.pythonhosted.org/packages/64/7b/ac83abc57bb044189cdb3821eac63f87c1e054a9ca666249c69fe6b482f2/omnixai-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9e7c6f29406382c5f5755d10eb4bfc2c508c188955c090119f0427e58f91ec2",
          "md5": "ca2c501f7ab9c5d4573c3da3ebfe424f",
          "sha256": "1b1175edc4f53fe642c703256a5cf9b2fac4ba7df94e5723911bae4a018c7f97"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca2c501f7ab9c5d4573c3da3ebfe424f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 436774,
        "upload_time": "2022-08-25T12:51:37",
        "upload_time_iso_8601": "2022-08-25T12:51:37.177201Z",
        "url": "https://files.pythonhosted.org/packages/d9/e7/c6f29406382c5f5755d10eb4bfc2c508c188955c090119f0427e58f91ec2/omnixai-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "555544d427a34ce7cac9479d8b4b20a61095af58ee9ef55a8e0653bb8cd32be0",
          "md5": "c6422c7408fcde9eebf3651880572e84",
          "sha256": "3c9f5f552abc1cacf031dfe0738eb3b9287dcaca0ae66e1f604685b0e906c8cc"
        },
        "downloads": -1,
        "filename": "omnixai-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c6422c7408fcde9eebf3651880572e84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 275364,
        "upload_time": "2022-08-25T12:51:38",
        "upload_time_iso_8601": "2022-08-25T12:51:38.741162Z",
        "url": "https://files.pythonhosted.org/packages/55/55/44d427a34ce7cac9479d8b4b20a61095af58ee9ef55a8e0653bb8cd32be0/omnixai-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c23e2ddeeae7bc92addd50ea70d07081401e6b8d23fa14b468a4e04804c54bb",
          "md5": "a3f8bf3ebbad278f53062b1534afafe0",
          "sha256": "53d10ce40d55ae9f9ac2f5972757ce81d1ea6846d7d6b4deca32c991e00cbd55"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3f8bf3ebbad278f53062b1534afafe0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 465331,
        "upload_time": "2022-09-08T14:18:25",
        "upload_time_iso_8601": "2022-09-08T14:18:25.661596Z",
        "url": "https://files.pythonhosted.org/packages/4c/23/e2ddeeae7bc92addd50ea70d07081401e6b8d23fa14b468a4e04804c54bb/omnixai-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a96dbbeb63e54440740e9a66b50140db3195217e981b76d74c122f86d5d324a",
          "md5": "de171ec52e707c7a6f250eded0ec39ef",
          "sha256": "e3fe075ecfa4cd09462c4afd74bb107407f22a3ed554c432dcfb563616c37ef9"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de171ec52e707c7a6f250eded0ec39ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 288259,
        "upload_time": "2022-09-08T14:18:27",
        "upload_time_iso_8601": "2022-09-08T14:18:27.261288Z",
        "url": "https://files.pythonhosted.org/packages/2a/96/dbbeb63e54440740e9a66b50140db3195217e981b76d74c122f86d5d324a/omnixai-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b22916b17d337279b757bec0662f89831f3021a860b5cb32fea38e7c2df49f74",
          "md5": "bef720b959eefcc951b53891c52c1287",
          "sha256": "0d4190d83e8ce8efd77fa8f6c7fafb52dd621ad8cd755f5cbd6519da93267a4c"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bef720b959eefcc951b53891c52c1287",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 487741,
        "upload_time": "2022-09-16T05:58:48",
        "upload_time_iso_8601": "2022-09-16T05:58:48.704682Z",
        "url": "https://files.pythonhosted.org/packages/b2/29/16b17d337279b757bec0662f89831f3021a860b5cb32fea38e7c2df49f74/omnixai-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af6bfc41ebbaed8546ba40a8fac706a5c16ec38e08130eb91d10cf71f9c3247",
          "md5": "e5107708abe82ced0ac3260e051ea2b2",
          "sha256": "82f3e1783c24a3236f24ea0a16413196bf2f12c39ea481c6766f33d17bc236aa"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5107708abe82ced0ac3260e051ea2b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 296266,
        "upload_time": "2022-09-16T05:58:50",
        "upload_time_iso_8601": "2022-09-16T05:58:50.756945Z",
        "url": "https://files.pythonhosted.org/packages/2a/f6/bfc41ebbaed8546ba40a8fac706a5c16ec38e08130eb91d10cf71f9c3247/omnixai-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09331ba9660ce6a8daaec45414bab1c4486482c45d2662fd39a5688873b2e567",
          "md5": "f02a13c55242db675137d3b0009f2305",
          "sha256": "2fc8504f0af30e912eac4277d3c5ae899029dc95e9dde6462b45227e1977ae86"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f02a13c55242db675137d3b0009f2305",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 512410,
        "upload_time": "2022-10-25T10:01:34",
        "upload_time_iso_8601": "2022-10-25T10:01:34.481301Z",
        "url": "https://files.pythonhosted.org/packages/09/33/1ba9660ce6a8daaec45414bab1c4486482c45d2662fd39a5688873b2e567/omnixai-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "176e265ecabdd71796fce2f59e2b303b21c8a29b4b17ad74bd34cf1cec869527",
          "md5": "94eff6d511d516a3258bc9058a3e886f",
          "sha256": "b9b4868ecf8b924a757b9d0ba370acb4836ce61d915f531d653a7b45d3459e67"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "94eff6d511d516a3258bc9058a3e886f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 309468,
        "upload_time": "2022-10-25T10:01:36",
        "upload_time_iso_8601": "2022-10-25T10:01:36.247299Z",
        "url": "https://files.pythonhosted.org/packages/17/6e/265ecabdd71796fce2f59e2b303b21c8a29b4b17ad74bd34cf1cec869527/omnixai-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaf111c9f9c7ac780ede5c632ff44d52012c30f1c7ba6173eefba9c314cef56d",
          "md5": "e1e19f444739bfa09430794d6c8452ee",
          "sha256": "97b1401b46e1314694aded0b2ce934cc307fff8f15adcd5610418a8db0c25664"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1e19f444739bfa09430794d6c8452ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 521147,
        "upload_time": "2022-11-22T09:46:08",
        "upload_time_iso_8601": "2022-11-22T09:46:08.109209Z",
        "url": "https://files.pythonhosted.org/packages/ea/f1/11c9f9c7ac780ede5c632ff44d52012c30f1c7ba6173eefba9c314cef56d/omnixai-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f9e33c493d6d1f94dae12b80657b7134dcdf9f36ac36c67d6da170ff7008688",
          "md5": "22b11019d0554cc3a184929e66b6960f",
          "sha256": "2f8c9ed9ae3977b19f3fcd40a33a56b94fabc76ee63652c101dcaa39db40ba98"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "22b11019d0554cc3a184929e66b6960f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 312541,
        "upload_time": "2022-11-22T09:46:09",
        "upload_time_iso_8601": "2022-11-22T09:46:09.884204Z",
        "url": "https://files.pythonhosted.org/packages/6f/9e/33c493d6d1f94dae12b80657b7134dcdf9f36ac36c67d6da170ff7008688/omnixai-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d54ab3c3f384b096c0aff250542c40b1ed015417af43e53ca7ac9028980383",
          "md5": "b191a7c2ef316245a7be0d34f33ddc56",
          "sha256": "4fd960d338c6323981b08dc78ae5e3dbafd7801b2d89472086176f812649d44f"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b191a7c2ef316245a7be0d34f33ddc56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 528174,
        "upload_time": "2023-01-03T04:13:00",
        "upload_time_iso_8601": "2023-01-03T04:13:00.204902Z",
        "url": "https://files.pythonhosted.org/packages/15/d5/4ab3c3f384b096c0aff250542c40b1ed015417af43e53ca7ac9028980383/omnixai-1.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1c561a8824de4f2c550ea6cc1b74b043aaea2dd757dc9d0cdee77ee70697932",
          "md5": "c5dab521dfe0cd5a4589c5a0f06f534c",
          "sha256": "8b24c622a1e3f3c65007b339fe3da29f66e0df44db18289aeff3f21c0f683614"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c5dab521dfe0cd5a4589c5a0f06f534c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 316780,
        "upload_time": "2023-01-03T04:13:01",
        "upload_time_iso_8601": "2023-01-03T04:13:01.914728Z",
        "url": "https://files.pythonhosted.org/packages/e1/c5/61a8824de4f2c550ea6cc1b74b043aaea2dd757dc9d0cdee77ee70697932/omnixai-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2daccc6cd82fd2379aa716bc55675c4cf9f7c13f960e303b601749cb11b84e72",
          "md5": "87b5709fcae402ec5c34bae4b3ed89c5",
          "sha256": "550a40821ee9fdf8858b68dac75f48a499d7db5855c35ecb36be68557db5b69d"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87b5709fcae402ec5c34bae4b3ed89c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4",
        "size": 534946,
        "upload_time": "2023-02-08T06:57:41",
        "upload_time_iso_8601": "2023-02-08T06:57:41.924824Z",
        "url": "https://files.pythonhosted.org/packages/2d/ac/cc6cd82fd2379aa716bc55675c4cf9f7c13f960e303b601749cb11b84e72/omnixai-1.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdbe8cd2e70e5f78731d812361b59a59d058108377f45b01be01fc10775883ec",
          "md5": "d02b00e151240db3ee3541854ceee783",
          "sha256": "e7f9906017d83255791a502168325df143fba1a9bd967bdc45264cc843c0966d"
        },
        "downloads": -1,
        "filename": "omnixai-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d02b00e151240db3ee3541854ceee783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4",
        "size": 321623,
        "upload_time": "2023-02-08T06:57:43",
        "upload_time_iso_8601": "2023-02-08T06:57:43.995718Z",
        "url": "https://files.pythonhosted.org/packages/fd/be/8cd2e70e5f78731d812361b59a59d058108377f45b01be01fc10775883ec/omnixai-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2daccc6cd82fd2379aa716bc55675c4cf9f7c13f960e303b601749cb11b84e72",
        "md5": "87b5709fcae402ec5c34bae4b3ed89c5",
        "sha256": "550a40821ee9fdf8858b68dac75f48a499d7db5855c35ecb36be68557db5b69d"
      },
      "downloads": -1,
      "filename": "omnixai-1.2.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "87b5709fcae402ec5c34bae4b3ed89c5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4",
      "size": 534946,
      "upload_time": "2023-02-08T06:57:41",
      "upload_time_iso_8601": "2023-02-08T06:57:41.924824Z",
      "url": "https://files.pythonhosted.org/packages/2d/ac/cc6cd82fd2379aa716bc55675c4cf9f7c13f960e303b601749cb11b84e72/omnixai-1.2.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdbe8cd2e70e5f78731d812361b59a59d058108377f45b01be01fc10775883ec",
        "md5": "d02b00e151240db3ee3541854ceee783",
        "sha256": "e7f9906017d83255791a502168325df143fba1a9bd967bdc45264cc843c0966d"
      },
      "downloads": -1,
      "filename": "omnixai-1.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d02b00e151240db3ee3541854ceee783",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4",
      "size": 321623,
      "upload_time": "2023-02-08T06:57:43",
      "upload_time_iso_8601": "2023-02-08T06:57:43.995718Z",
      "url": "https://files.pythonhosted.org/packages/fd/be/8cd2e70e5f78731d812361b59a59d058108377f45b01be01fc10775883ec/omnixai-1.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}