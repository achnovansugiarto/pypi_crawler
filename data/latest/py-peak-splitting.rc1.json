{
  "info": {
    "author": "D.J.M. Fallais",
    "author_email": "dominik.fallais@vub.be",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# py_peak_splitting\n\n## Description\nThis package contains an implementation for the random telegraph noise (RTN) removal tools as outlined in: \n\n*__Multi-level RTN removal tools for dynamic FBG strain measurements corrupted by peak splitting artefacts__*\n\nThe aim of this project is to find a pragmatic but effective way to remove jumps which offset the signal over a certain \namount of time, by a  certain amplitude. The article presents two methods which both follow the same principle: \n\n> __The problem of denoising a signal containing jumps is translated into detecting and  replacing outliers in the corresponding difference signal; once the outlier detection and replacement has been done, the cumulative sum of the de-noised difference signal is computed to arrive back at a de-noised version of the original signal__. \n\nA typical case of measurement data containing jumps can be seen in Figure 1, which shows a corrupted signal before \n(black) and after noise removal (blue). \n\n<center><img src=\"./demo/static_files/th_rec_sep_annotated.png\" width=\"750\"></center>\n<center> Figure 1. Left: Raw signal before (black) and after removing RTN/peak-splitting artefacts (blue). Right: \nZoom-in on smaller data subset, as well as corresponding difference samples with annotations for nominal samples \n(blue), outliers (red) and outlier replacements (green). Note that mean value of the de-noised signal has not been set \nto value which represents a realistic mean value of the raw signal. </center>\n\n\n__For more detailed information on the two algorithms contained in this package, it is referred the accompanying \npublication, which can be read <ins>*here*</ins>__\n\n\n## Background and motivation\n\nStrain  measurements  using  Fiber  Bragg  (FBG)  optical  sensors  are becoming more and more popular. However, in some\n cases these measurements can become corrupted by sudden jumps in the signal, which offset the signal over the course \nof  e.g. several seconds. These jumps are caused by a defect in the FBG itself which is referred to as peak-splitting. \nThe effects of peak-splitting artefacts on FBG strain measurements bear similarities with an additive multi-level \ntelegraph noise process, in which the amplitudes and occurrences of the jumps are related to fiber deformation states. \n\nJumps in measurement data, as shown in Figure 2, can severely limit the quality or usability of data. Figure 2 shows two \nraw signals with different levels of jump amplitudes relative to nominal difference between subsequent samples; the \nblue annotations indicate jumps which can be clearly separated from nominal samples, whereas the red annotations \nillustrate the case in which jump levels are not as straight forward to detect. The considered noise type cannot be \nremoved by classical linear filters (e.g. a n'th order Butterworth filter). The presence of jumps in data motivates \nthe need for a pre-processing tool which allows to effectively remove RTN noise.  \n\n\n<center><img src=\"./demo/static_files/Jumps_annotated.png\" width=\"750\"></center>\n<center> Figure 2. Multi level telegraph noise / peak splitting artefacts. Left: two raw signals containing artefacts of \ndifferent severity. Upper right:  large jump amplitudes in comparison with differences between subsequent signal \nsamples. Lower right: jump amplitudes in same order of magnitude as difference samples. </center>\n\nThe principal idea presented in the accompanying publication is to translate the de-noising of the raw signal containing\n jumps, into the problem of de-noising a sample wise difference signal containing outliers. The latter is shown Figure \n3,  which also shows the corresponding histograms hinting at the distribution of the nominal and outlying difference \nsamples. The blue and red annotations clearly indicate the outlying difference samples corresponding to relative large and \nsmall jumps respectively.\n\n<center><img src=\"./demo/static_files/differences_annotated.png\" width=\"750\"></center>\n<center> Figure 3. Sample wise difference signals corresponding to signals presented in Fig. 2. The annotations high \nlight outlying difference samples which are attributed to RTN / peak splitting artefacts. </center>\n\nIn order to de-noise the difference signal, an outlier detection scheme will be used to label difference samples \ncorresponding to a jump in the data as an outlier.  After the outlier detection step, all outliers will be replaced by \nestimates. Once the de-noising process is completed, the cumulative sum is used to obtain a realization of the de-noised\n raw signal. If needed, the reconstructed signal can be corrected for a drift as well as a mean value, by maximizing \nthe overlap between the raw and reconstructed signals. \n\n\nAs mentioned, the accompanying article presents two methods which follow the outlined principle. Although sharing the \nunderlying principle, they are different in the way they try to discriminate between nominal samples and outliers, as \nwell  as in sample subset selection for the replacement of individual outliers. The first method is based on using a threshold \nfilter for outlier detection; the high level working principle of the method is described as follows: \n- Compute the sample wise difference signal\n- Derive an outlier threshold level from the histogram of difference samples\n- Replace outliers in difference signal using a linear regression on an outlier specific buffer (which does not \ncontain outliers).\n- Take the cumulative sum \n- If necessary, apply drift and mean correction \n\nAs an alternative to defining a single threshold based on the full signal, the second methods is aimed at defining \nthreshold levels on shorter segments of the signal. The outlier detection step is based on a Hampel filter. The \nhigh-level working principle is outlined as follows: \n- Compute the sample wise difference signal\n- Segment the data into short segments and compute segment wise threshold levels based on a scale estimate for the \nsegment's standard deviation. \n- Perform outlier detection on individual segments \n- Replace outliers in segments using a linear regression (after removing outliers from segment).\n- Take the cumulative sum \n- If necessary, apply drift and mean correction     \n\nBasic use of both methods is outlined in section 1.4. A more elaborate demonstration can be found in the jupyter \nnotebooks contained in '''./py_peak_splitting/demo/ ''' or using the Binder which can be found __*here*__.\n\n## Installation requirements\npy_peak_splitting is written for Python 3.6+. Downloading Anaconda3 is recommended for users not familiar with Python \ndevelopment. The numpy, scipy and matplotlib package are required to use all functionalities of the threshold filter \nbased reconstruction method, which includes an option to visualise threshold levels and overlay a kernel density estimate.\nThe Hampel based reconstruction method only requires the numpy pacakage. \n\nThe py_peak_splitting package can be installed using one of the methods listed below:\n\n### Install using Pip (Recommended)\n- Open a terminal or command line interface (or an anaconda prompt, if you're using anaconda) \n-  run: ```pip install py_peak_splitting ```\n- The download and install should start\n\n\n### Manual install\n- Download or clone the package to a desired location on your machine\n- Extract the zip file at that particular location  \n- Open a terminal or command line interface (or an anaconda prompt, if you are using anaconda) \n- Set the current directory of the terminal/command line interface to the package's root: \nPATH_TO_PACKAGE_LOCATION/py_peak_splitting \n- run: ``` python install .setup.py```\n- The installation should start\n\n## Basic examples\nThis section contains the most basic usage examples. More elaborate examples are presented in a Binder which can be \nfound *__here__*. For this section a dummy variable, ```a```, holding a 1-dimensional numpy array with corrupted \nmeasurements will be used:\n\n```python\ntype(a) \n>> numpy.ndarray\n\na.shape\n>> (60000,)\n```\n\n### Basic example Hampel filter based reconstruction methods: \n```python\nfrom py_peak_splitting.hampel_filter import Hampel as Ha\n\nh = Ha(a, th='sig', th_val= 3, re='plf', nperseg=50)\nrec = h.reconstruction         \nclu = h.clusters\nlab = h.labels\n```\n###  Basic example Threshold filter based reconstruction methods: \n\n```python\nfrom py_peak_splitting.th_filter import ThFilter as Th\n\nth = Th(arr=a)  \nthv = th.estimate_th(aggressive=True, th=500, plot=False)\nrec, clu, lab = th.recon_th(th=thv, method='polyfit', nbuffer=25)\nrec = rec.flatten()\n```\n# License\npy_peak_splitting is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons \nAttribution-NonCommercial-ShareAlike 4.0 International License</a>. Please check the license terms below and in the license file.\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" \nstyle=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />\n\n# Disclaimer\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OWI-Lab/py_peak_splitting",
    "keywords": "engineering,peak-splitting,RTN,hampel,threshold",
    "license": "Creative Commons BY-SA 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-peak-splitting",
    "package_url": "https://pypi.org/project/py-peak-splitting/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-peak-splitting/",
    "project_urls": {
      "Homepage": "https://github.com/OWI-Lab/py_peak_splitting"
    },
    "release_url": "https://pypi.org/project/py-peak-splitting/0.0.2/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "plotly",
      "sklearn"
    ],
    "requires_python": "",
    "summary": "Utilities to de-noise time series from random telegraph noise / peak splitting artefacts",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11159307,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b8d7a2024a685f5e048c27067da0ae1cd1ab40860e0bda0f2860784ea8565be",
          "md5": "2293be105f61c56e5536b0cbf67b8224",
          "sha256": "fb5731539ba0bf47e05a137f209a2bee5eb9ebd556aaf15a53dbcf833abd3e80"
        },
        "downloads": -1,
        "filename": "py_peak_splitting-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2293be105f61c56e5536b0cbf67b8224",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23592,
        "upload_time": "2021-08-02T17:15:59",
        "upload_time_iso_8601": "2021-08-02T17:15:59.122425Z",
        "url": "https://files.pythonhosted.org/packages/1b/8d/7a2024a685f5e048c27067da0ae1cd1ab40860e0bda0f2860784ea8565be/py_peak_splitting-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e20286195557d27db7c5a20fdf313a14a1b04e007135cdb0c2b116620b600c4f",
          "md5": "5848faeb56b185862eaee479f293924c",
          "sha256": "42884075547898420f4f380e8a1500430c89bf2cc862e7a686d8fd993fab48b0"
        },
        "downloads": -1,
        "filename": "py_peak_splitting-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5848faeb56b185862eaee479f293924c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25253,
        "upload_time": "2021-08-02T17:16:00",
        "upload_time_iso_8601": "2021-08-02T17:16:00.101578Z",
        "url": "https://files.pythonhosted.org/packages/e2/02/86195557d27db7c5a20fdf313a14a1b04e007135cdb0c2b116620b600c4f/py_peak_splitting-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b8d7a2024a685f5e048c27067da0ae1cd1ab40860e0bda0f2860784ea8565be",
        "md5": "2293be105f61c56e5536b0cbf67b8224",
        "sha256": "fb5731539ba0bf47e05a137f209a2bee5eb9ebd556aaf15a53dbcf833abd3e80"
      },
      "downloads": -1,
      "filename": "py_peak_splitting-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2293be105f61c56e5536b0cbf67b8224",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23592,
      "upload_time": "2021-08-02T17:15:59",
      "upload_time_iso_8601": "2021-08-02T17:15:59.122425Z",
      "url": "https://files.pythonhosted.org/packages/1b/8d/7a2024a685f5e048c27067da0ae1cd1ab40860e0bda0f2860784ea8565be/py_peak_splitting-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e20286195557d27db7c5a20fdf313a14a1b04e007135cdb0c2b116620b600c4f",
        "md5": "5848faeb56b185862eaee479f293924c",
        "sha256": "42884075547898420f4f380e8a1500430c89bf2cc862e7a686d8fd993fab48b0"
      },
      "downloads": -1,
      "filename": "py_peak_splitting-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5848faeb56b185862eaee479f293924c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25253,
      "upload_time": "2021-08-02T17:16:00",
      "upload_time_iso_8601": "2021-08-02T17:16:00.101578Z",
      "url": "https://files.pythonhosted.org/packages/e2/02/86195557d27db7c5a20fdf313a14a1b04e007135cdb0c2b116620b600c4f/py_peak_splitting-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}