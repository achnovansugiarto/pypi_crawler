{
  "info": {
    "author": "evtn",
    "author_email": "courage@evtn.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "Dynamic grammar generator for [Lark parsing toolkit](https://github.com/lark-parser/lark)\n\n# Why?\n\nWhile writing EBNF by hand is a preferred approach for most use cases (because of rich syntax), it's only viable for static grammars.    \nIf your grammar is variable (e.g. based on some kind of configuration), it should be built with code on the fly.    \nAs per [lark#439](https://github.com/lark-parser/lark/issues/439), no API for grammar exists, so building a string is only solution (it's pretty fast though).\n\n**This README implies you are familiar with Lark and Lark EBNF.**    \n\n# Basic usage\n\n```python\nfrom lark_dynamic import *\n\ng = Grammar()\n\ng.DIGIT = g.NONZERO | \"0\"\ng.NONZERO = Range(\"1\", \"9\")\ng.INTEGER = makeBoolVariable(\n    \"zero_leading_numbers\", \n    true=Many(g.DIGIT), \n    false=(g.NONZERO, Some(g.DIGIT))\n)\ng.FLOAT[2] = Group(g.INTEGER, \".\", Some(g.DIGIT)) | (\".\", Many(g.DIGIT))\n\ng.number = Alias.integer(g.INTEGER) | Alias.float(g.FLOAT)\n\nprint(g.generate(zero_leading_numbers=False))\nprint(g.generate(zero_leading_numbers=True))\n```\n\nWhich outputs:    \n*zero_leading_numbers=False*:    \n```\nDIGIT: NONZERO | \"0\"\nNONZERO: \"1\"..\"9\"\nINTEGER: ( NONZERO ( DIGIT )* )\nFLOAT.2: ( INTEGER \".\" ( DIGIT )* ) | ( \".\" ( DIGIT )+ )\n\nnumber: INTEGER -> integer | FLOAT -> float\n```\n\n*zero_leading_numbers=True*    \n```\nDIGIT: NONZERO | \"0\"\nNONZERO: \"1\"..\"9\"\nINTEGER: ( DIGIT )+\nFLOAT.2: ( INTEGER \".\" ( DIGIT )* ) | ( \".\" ( DIGIT )+ )\n\nnumber: INTEGER -> integer | FLOAT -> float\n```\n\n# Getting started\n\nInstall with:\n\n`python -m pip install lark-dynamic`\n\nTo create a grammar, you need to create `Grammar` object:\n```python\nfrom lark_dynamic import * # it is recommended to create grammar in a separate file, so * import is fine\n\ng = Grammar() # short name is convenient\n```\n\nThen write rules and terminals:\n\n```python\n# this is a terminal (uppercase)\ng.NUMBER = RegExp(r'[0-9]+')\ng.SIGN = Literal(\"+\") | \"-\" # first (or second) string needs to be wrapped into a Literal to support |\ng.test = Maybe(g.SIGN), Many(g.TEST)\n```\n\n# Reference\n\nAll code snippets use this setup:\n```python\nfrom lark_dynamic import *\ng = Grammar()\n```\n\n## Grammar\n\nMain object, stores rules, terminals, templates and directives\n\nTo create a rule, you can use a shorthand:\n\n```python\ng.any_lowercase_identifier = ... # rule contents here\n```\n\nSame for terminal:\n\n```python\ng.ANY_UPPERCASE_IDENTIFIER = ... # terminal contents here\n```\n\nTo create a template (`name{arg1, arg2} = ...`) you need to use `[]`:\n\n```python\ng.template_name[g.arg1, g.arg2] = ... # template contents here\n```\n\nDirectives have different syntaxes, so no special shorthand is present:\n\n```python\ng.make_directive(\"name\", \"directive contents here\")\n```\n\nTo build grammar, you need to call `.generate(**context)`:\n\n```python\ng.generate(some_variable=True) # variables are discussed below\n```\n\n## Variable\n\nSince the purpose of the module is to create grammars dynamically, this class exists.    \nIt takes a function, which accepts one argument (context) - a dictionary of everything passed to `.generate()`.    \nFunction sould return anything renderable (e.g. a token or a tuple of tokens):\n\n```python\ndef integer_term(context):\n    if context.get(\"zero_leading_numbers\"):\n        return Many(g.DIGIT)\n    return g.NONZERO, Some(g.DIGIT)\n\ng.DIGIT = g.NONZERO | \"0\"\ng.NONZERO = Range(\"1\", \"9\")\ng.INTEGER = Variable(integer_term)\ng.FLOAT[2] = Group(g.INTEGER, \".\", Some(g.DIGIT)) | (\".\", Many(g.DIGIT))\n\ng.number = Alias.integer(g.INTEGER) | Alias.float(g.FLOAT)\n```\n*(this is an example from Basic usage section rewritten to use Variable)*\n\n### BoolVariable and makeBoolVariable\n\nCommon use case for Variable is to render different content based on a boolean key (such as in Basic usage example).    \n`BoolVariable` makes it more convenient:\n\n```python\ndef integer_term(zln):\n    if zln:\n        return Many(g.DIGIT)\n    return g.NONZERO, Some(g.DIGIT)\n\ng.DIGIT = g.NONZERO | \"0\"\ng.NONZERO = Range(\"1\", \"9\")\ng.INTEGER = BoolVariable(integer_term, key=\"zero_leading_numbers\")\ng.FLOAT[2] = Group(g.INTEGER, \".\", Some(g.DIGIT)) | (\".\", Many(g.DIGIT))\n\ng.number = Alias.integer(g.INTEGER) | Alias.float(g.FLOAT)\n```\n\n`makeBoolVariable` goes even further, providing arguments for `True` and `False` values:\n\n```python\ng.DIGIT = g.NONZERO | \"0\"\ng.NONZERO = Range(\"1\", \"9\")\ng.INTEGER = makeBoolVariable(\n    \"zero_leading_numbers\", \n    true=Many(g.DIGIT), \n    false=(g.NONZERO, Some(g.DIGIT))\n)\ng.FLOAT[2] = Group(g.INTEGER, \".\", Some(g.DIGIT)) | (\".\", Many(g.DIGIT))\n\ng.number = Alias.integer(g.INTEGER) | Alias.float(g.FLOAT)\n```\n\n## Literal\n\nUsed for literal strings:\n\n```python\ng.hello = Literal(\"Hello\"), Literal(\"World\")\n```\nyields:\n\n```\nhello: \"Hello\" \"World\"\n```\n\nIn most cases you can just use a string. Explicit `Literal(...)` is needed to support `|` (see [Combinators/Option](#option-usage-rules))\n\n### Using regexp flags on Literal\n\n```python\ng.hello = Literal(\"Hello\").si, Literal(\"World\").i\n```\nyields:\n```\nhello: \"Hello\"si \"World\"i\n```\n\n## Combinators\n\n### Maybe (aka QuestionMark)\n\nCorresponds to `?` combinator in Lark:\n\n```python\ng.hello = \"Hello\", Maybe(\",\"), \"World\", QuestionMark(\"!\") # QuestionMark is just an alias for Maybe\n```\nyields:\n\n```\nhello: \"Hello\" (\",\")? \"World\" (\"!\")?\n```\n\n### Some (aka Star)\n\nCorresponds to `*` combinator in Lark:\n\n```python\ng.hello = \"Hello\", Maybe(\",\"), \"World\", Some(\"!\")\n```\nyields:\n\n```\nhello: \"Hello\" (\",\")? \"World\" (\"!\")*\n```\n\n### Many (aka Plus)\n\nCorresponds to `+` combinator in Lark:\n\n```python\ng.POSITION = Literal(\"two number 9s\") | \"a number 9 large\" | \"a number 6 with extra dip\" | \"a number 7\" | \"two number 45s\" | \"one with cheese\" | \"a large soda\"\n\ng.order = \"I'll have \", g.position, Many(\", \", g.position), Maybe(\", and \", g.position)\ng.position = g.POSITION\n```\nyields:\n\n```\nPOSITION: \"two number 9s\" | \"a number 9 large\" | \"a number 6 with extra dip\" | \"a number 7\" | \"two number 45s\" | \"one with cheese\" | \"a large soda\"\n\norder: \"I'll have \" position ( \", \" position )+ ( \", and \" position )?\nposition: POSITION\n```\n\n### Optional (aka Brackets)\n\nCorresponds to `[...]` combinator in Lark:\n\n```python\ng.hello = \"Hello\", Optional(\",\"), \"World\", [\"!\"]\n```\nyields:\n\n```\nhello: \"Hello\" [\",\"] \"World\" [\"!\"]\n```\n\nCan also be written as `[...]` (as a list, basically), but be aware of [`|` usage rules (below)](#option-usage-rules)\n\n### Option \n\nCorresponds to `|` combinator in Lark:\n\n```python\ng.hello = \"Hello\", Maybe(\",\"), (Option(\"World\", \"dlroW\"), ), Some(\"!\") # note Option is placed inside a tuple, (explained below)\n```\nyields:\n\n```\nhello: \"Hello\" (\",\")? (\"World\" | \"dlroW\") (\"!\")*\n```\n\nCan also be written as `|`:\n```python\ng.hello = \"Hello\", Maybe(\",\"), (Literal(\"World\") | \"dlroW\", ), Some(\"!\") # note Literal (explained below)\n```\n\n#### Option usage rules\n\n**`|` priority in Lark is higher than in Python:**\n\n`Maybe(\",\"), Option(\"World\", \"dlroW\"), Maybe(\"!\")`    \nyields    \n`(\",\")? \"World\" | \"dlroW\" (\"!\")?`    \nwhich, in turn, is equal to    \n`(\",\"? \"World\") | (\"dlroW\" \"!\"?)`    \n\nYou should wrap option with any other combinator (e.g. `Group()` or tuple. Remember that `(x)` is not a tuple) or just use `OptionG`.    \nThe reason why default `Option` doesn't do this is that wrapping top-level option in parens would break alias creation.\n\n**`|` operator would not work with python built-in types (str, list or tuple)**\n\nYou need at least one `Token` (rule, combinator, literal etc.) on either side of `|` for it to work.\n\n### Group (aka Parens)\n\nCorresponds to `(...)` combinator in Lark:\n\n```python\ng.hello = \"Hello\", Group(Maybe(\",\"), \"World\"), (Some(\"!\"), )\n```\nyields:\n\n```\nhello: \"Hello\" ((\",\")? \"World\") ((\"!\")*)\n```\n\nCan also be written as `(...)` (as a tuple, basically), but be aware of [`|` usage rules](#option-usage-rules)    \n`Some`, `Many` and `Maybe` also will render in parenthesis by default to avoid combinator collision (e.g. to avoid rendering `((\"!\")+)?` as `\"!\"+?` which is invalid).\n\n### SomeSeparated and ManySeparated\n\nCorrespond to `content (sep, content)*` and `content (sep, content)+` patterns, respectively:\n\n```python\ng.POSITION = Literal(\"two number 9s\") | \"a number 9 large\" | \"a number 6 with extra dip\" | \"a number 7\" | \"two number 45s\" | \"one with cheese\" | \"a large soda\"\ng._COMMA = \",\", Maybe(g.WS)\ng.WS = \" \"\n\ng.order = \"I'll have \", SomeSeparated(g._COMMA, g.position), Maybe(g._COMMA, \"and \", g.position)\ng.position = g.POSITION\n```\nyields:\n\n```\nPOSITION: \"two number 9s\" | \"a number 9 large\" | \"a number 6 with extra dip\" | \"a number 7\" | \"two number 45s\" | \"one with cheese\" | \"a large soda\"\n_COMMA: \",\" ( WS )?\nWS: \" \"\n\norder: \"I'll have \" (position ( _COMMA position )*) ( _COMMA \"and \" position )?\nposition: POSITION\n```\n\n## RegExp\n\nCorresponds to Lark regexp syntax (`/content/flags`):\n\n```python\ng.WORD = RegExp(r\"\\w+\") # flags are provided as a second argument (e.g. RegExp(r\"\\w+\", \"is\")) \ng.some_phrase = g.WORD, Maybe(\",\"), g.WORD, Some(\"!\")\n```\nyields:\n```\nWORD: /\\w+/\n\nsome_phrase: WORD ( \",\" )? WORD ( \"!\" )*\n```\n\n## Repeat\n\nCorresponds to Lark repeat syntax: `item ~ n` and `item ~ n..m`:\n\n```python\ng.three_lemons = Repeat(\"Lemon\", 3)\ng.three_to_five_apples = Repeat(\"Lemon\", [3, 5])\n```\nyields:\n```\nthree_lemons: ( \"Lemon\" ) ~ 3\nthree_to_five_apples: ( \"Lemon\" ) ~ 3..5\n```\n\n## Prerendered\n\nIf you want to insert a prerendered content into a rule/terminal/template, you can use `Prerendered`:\n\n```python\ng.hello = \"Hello\", Prerendered('((\",\")? \"World\")'), Some(\"!\")\n```\nyields:\n\n```\nhello: \"Hello\" ((\",\")? \"World\") (\"!\")*\n```\n\n### Empty\n\nSometimes (when using Variable) you'll need to render nothing.    \nIt can be achieved with `Prerendered(\"\")`, or its alias, `Empty`\n\n## Modifiers\n\nRule and terminal modifiers (such as `?` and `!`) can be used with `Modifier` class (**works only on top level of rule/terminal**):\n\n```python\ng.parens = Modifier.INLINE_SINGLE(\"(\", g.word, \")\")\ng.word = g.WORD\ng.WORD = RegExp(r\"\\w+\")\n```\nyields:\n```\nWORD: /\\w+/\n\n?parens: \"(\" word \")\"\nword: WORD\n```\n\n# Priority\n\nTo use terminal/rule priority, you can use `[priority]` notation (similar to templates, but with a number):\n\n```python\ng.DIGIT = g.NONZERO | \"0\"\ng.NONZERO = Range(\"1\", \"9\")\ng.INTEGER = g.NONZERO, Some(g.DIGIT)\ng.FLOAT[2] = Group(g.INTEGER, \".\", Some(g.DIGIT)) | (\".\", Many(g.DIGIT))\n\ng.number = Alias.integer(g.INTEGER) | Alias.float(g.FLOAT)\n```\nyields:\n```\nDIGIT: NONZERO | \"0\"\nNONZERO: \"1\"..\"9\"\nINTEGER: NONZERO ( DIGIT )*\nFLOAT.2: ( INTEGER \".\" ( DIGIT )* ) | ( \".\" ( DIGIT )+ )\n\nnumber: INTEGER -> integer | FLOAT -> float\n```\n\n\n# Advanced usage\n\n`Grammar` object can be edited after its creation.\n\nFirst, you need to get a grammar wrapper: `wrapper = grammar.use_wrapper()`\n\n\n## Get a definition\n\n\n```python\n\ng = Grammar()\n\n\ng.HELLO = \"Hello\"\n\nwrapper = g.use_wrapper()\n\nprint(wrapper.get_def(\"HELLO\")) \n\n# prints\n# RuleDef(\n#     \"Hello\"\n# )\n\n``` \n\n## Replace definition contents\n\n\n```python\n\ng = Grammar()\n\ng.HELLO = \"Hello\"\n\nwrapper = g.use_wrapper()\nwrapper.replace(\"HELLO\", \"World\")\n\n\nprint(wrapper.get_def(\"HELLO\")) \n\n# prints\n# RuleDef(\n#     \"World\"\n# )\n\n``` \n\n## Edit definition\n\n\n```python\n\ng = Grammar()\n\ng.HELLO = \"Hello\"\n\nwrapper = g.use_wrapper()\nwrapper.edit(\"HELLO\", priority=10)\n\n\nprint(wrapper.get_def(\"HELLO\")) \n\n# prints\n# RuleDef(\n#     \"World\"\n# )\n\n``` \n\n## Extend definition\n\n\n```python\n\ng = Grammar()\n\ng.HELLO = \"Hello\"\n\nwrapper = g.use_wrapper()\nwrapper.extend(\"HELLO\", \"World\")\n\n\nprint(wrapper.get_def(\"HELLO\")) \n\n# prints\n# RuleDef(\n#     Option(\n#         \"Hello\"\n#         \"World\"\n#     )\n# )\n\n``` \n\n## Getting all definitions / directives\n\nYou can get dictionaries with rules, terminals, templates, or a list of all directives with a wrapper:\n\n```python\n\ng = Grammar()\nwrapper = g.use_wrapper()\n\nwrapper.rules\nwrapper.terminals\nwrapper.templates\nwrapper.directives\n```\n\n\n## Why a wrapper?\n\nBecause grammar object itself is used to create definitions with arbitrary names. Creating methods with common names would easily create a problem:\n\n\n```python\ng = Grammar()\n\ng.edit = \"EDIT\", Some(\"blah\")\ng.save = \"SAVE\", Some(Option(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"))\n\ng.command = Option(g.edit, g.save) # g.edit used here as a rule, not method\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/courage-py/lark-dynamic",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lark-dynamic",
    "package_url": "https://pypi.org/project/lark-dynamic/",
    "platform": null,
    "project_url": "https://pypi.org/project/lark-dynamic/",
    "project_urls": {
      "Homepage": "https://github.com/courage-py/lark-dynamic"
    },
    "release_url": "https://pypi.org/project/lark-dynamic/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Dynamic grammar generator for Lark parsing toolkit",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14251380,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8923891ba0603442d37a8446cc606fd4693ec95eb0c946e28c72549c4370f2f5",
          "md5": "46a55c2b01d8b2a4a0719bc0edbf910f",
          "sha256": "2a80435c847f9a42947790cf5aa3a857641489d5b29c776539e816d28c4274e1"
        },
        "downloads": -1,
        "filename": "lark_dynamic-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46a55c2b01d8b2a4a0719bc0edbf910f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8217,
        "upload_time": "2021-12-20T01:58:03",
        "upload_time_iso_8601": "2021-12-20T01:58:03.480746Z",
        "url": "https://files.pythonhosted.org/packages/89/23/891ba0603442d37a8446cc606fd4693ec95eb0c946e28c72549c4370f2f5/lark_dynamic-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2579ab2e5eda060cb00e7065c1b45019fa37b1947e18c04ed2154600f1f579a1",
          "md5": "4e89a1839b01cc8f93f026c8caeabd89",
          "sha256": "01ffb6fa4d3329cf3604201211c1796561e4b0b2b93f786b0010d5d84de0f352"
        },
        "downloads": -1,
        "filename": "lark_dynamic-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4e89a1839b01cc8f93f026c8caeabd89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8306,
        "upload_time": "2021-12-20T02:02:46",
        "upload_time_iso_8601": "2021-12-20T02:02:46.331965Z",
        "url": "https://files.pythonhosted.org/packages/25/79/ab2e5eda060cb00e7065c1b45019fa37b1947e18c04ed2154600f1f579a1/lark_dynamic-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84a693daa5f4c5199000735888383275244f9246aa16587c7af49adb25048848",
          "md5": "328eaa1436eab96c14a780a16a63716e",
          "sha256": "eeecea8b33b3c4bc95d4664055c63d1ccc89739d06211e146667faf5728ce3ae"
        },
        "downloads": -1,
        "filename": "lark_dynamic-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "328eaa1436eab96c14a780a16a63716e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8370,
        "upload_time": "2022-01-02T08:37:01",
        "upload_time_iso_8601": "2022-01-02T08:37:01.732587Z",
        "url": "https://files.pythonhosted.org/packages/84/a6/93daa5f4c5199000735888383275244f9246aa16587c7af49adb25048848/lark_dynamic-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcb13a97872dd1b8ff503ba79cda4a008cd21f722239031b04128031e939d627",
          "md5": "5be181c59e1d8f95aa1ca0ad13cf9f41",
          "sha256": "fe748490c9aa3c45ac68ea1789a8e5f083633a2b7362f8cb6aa41b2acf498829"
        },
        "downloads": -1,
        "filename": "lark_dynamic-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5be181c59e1d8f95aa1ca0ad13cf9f41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8302,
        "upload_time": "2022-06-26T14:38:46",
        "upload_time_iso_8601": "2022-06-26T14:38:46.084914Z",
        "url": "https://files.pythonhosted.org/packages/bc/b1/3a97872dd1b8ff503ba79cda4a008cd21f722239031b04128031e939d627/lark_dynamic-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6206d716896a592eb4ca04683b32a457fcace0909d11960be939561e193a8912",
          "md5": "b6c82dd0c942e2ad2a7384a16189a0ad",
          "sha256": "283f84f788cb2e359ff935fe7b1e27b3c75130c573fcbca586a916e2e48dc034"
        },
        "downloads": -1,
        "filename": "lark_dynamic-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b6c82dd0c942e2ad2a7384a16189a0ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10471,
        "upload_time": "2022-06-26T15:49:45",
        "upload_time_iso_8601": "2022-06-26T15:49:45.125167Z",
        "url": "https://files.pythonhosted.org/packages/62/06/d716896a592eb4ca04683b32a457fcace0909d11960be939561e193a8912/lark_dynamic-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6206d716896a592eb4ca04683b32a457fcace0909d11960be939561e193a8912",
        "md5": "b6c82dd0c942e2ad2a7384a16189a0ad",
        "sha256": "283f84f788cb2e359ff935fe7b1e27b3c75130c573fcbca586a916e2e48dc034"
      },
      "downloads": -1,
      "filename": "lark_dynamic-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b6c82dd0c942e2ad2a7384a16189a0ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10471,
      "upload_time": "2022-06-26T15:49:45",
      "upload_time_iso_8601": "2022-06-26T15:49:45.125167Z",
      "url": "https://files.pythonhosted.org/packages/62/06/d716896a592eb4ca04683b32a457fcace0909d11960be939561e193a8912/lark_dynamic-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}