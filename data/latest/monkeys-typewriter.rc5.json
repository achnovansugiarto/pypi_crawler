{
  "info": {
    "author": "Adam Green",
    "author_email": "adam@tryal.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Monkey's Typewriter (mnkytw)\n\n![logo](/images/mnkytw_logo.png)\n\nMonkey's Typewriter is a PEG parsing framework for Python designed for simplicity, ease of understanding and liberal intepretation of PEG expression grammars. It is zero dependency and uses python's internal `re` regex library for matching axiomatic elements and then 3 complex matchers to allow you to express your grammars\n\n## Pros and Cons\n\n- Pro: The entire library is 6 files (ignoring examples and module files), and consists of only 6 classes and two functions to make writing easy\n- Pro: You can write the grammars in an object oriented way, declaring your own custom matcher classes, allowing you spread your parser across multiple files, and unit test individual smaller matchers\n- Con: This library does not perfectly conform to PEG parsing standards, for example, left recursion can be made to work using custom matchers\n- Con: This library does not have complex quantification expressions, in-built zero-consumption negative lookahead expressions etc. They're fairly easily implementable, but not available as standard\n- Con: No in-built whitespace handling. If you can think of an elegant way to do it that doesn't add too much overhead to the library, post a suggestion in the issues.\n- Con (maybe Pro): A custom matcher can accidentally (or intentionally) backtrack if it chooses too, this can result in unexpected behaviour though because by default our classes assume no backtracking\n\n\n## Getting Started\nMonkey's Typewriter is a framework, because you have to build your own custom Matcher classes to achieve complex and custom parsing tress. Lets take a look at a simple example to begin with. We will build a parser that can parse expressions such as `3+4+5` giving us a tree where `lhs = 3, symbol = \"+\", rhs = { lhs = 4, symbol = \"+\", rhs = 5}`\n\nThis framework is similar to PEG.js in that you can customise the tokens we return for matches, meaning you can achieve a much more informative tree, more quickly and easily by configuring tokens as they're parsed\n\nLet's begin by defining an Integer Matcher, we could write\n\n```python\nimport mnkytw\nInteger = mnkytw.MatchAlternation([\n    mnkytw.RegexMatch(r\"[1-9][0-9]*\"),\n    mnkytw.LiteralMatch(\"0\")\n])\n\nmnkytw.parse(\"42\", Integer)\n```\n\nHowever, when this is parsed, what we'll get back is the string `\"42\"` which, I mean sure it's a basic parser, but it doesn't really achieve anything. Instead lets cast it, and create a dict object for it to identify the token type\n\nInstead of just using our existing match classes, we'll wrap it in it's own match class and implement some custom parsing logic\n\n```python\nimport mnkytw\n\nclass IntegerMatch:\n    def __init__(self):\n        self.matcher = mnkytw.MatchAlternation([\n            mnkytw.RegexMatch(r\"[1-9][0-9]*\"),\n            mnkytw.LiteralMatch(\"0\")\n        ])\n\n    def parser(self, body : str, hard_fail = True):\n        # call the matcher\n        result = self.matcher.parser(body, hard_fail)\n        # if there's no result\n        if not result:\n            # just return it because it's a false value\n            return result\n        #if it does have a result though\n        return [{\n            #cast the match to an integer\n            'val': int(result[0]),\n            #add some extra sugar like a type and the type name\n            'type': 'integer'\n        }, result[1]] # always return the cursor position, otherwise you'll get backtracking\n\n    #We should provide to_string and __str__ methods if we want to print our matchers\n    def to_string(self, call_count = 0):\n        return self.matcher.to_string(call_count)\n    \n    def __str__(self):\n        return self.to_string()\n\nInteger = IntegerMatch()\n\nprint(mnkytw.peg_parse(\"23\", Integer))\n# {\n#   'val': '23',\n#   'type': 'integer'\n# }\n```\n\nA lot is going on above, but it's still fairly straight-forward. Firstly we create a class, and set `self.matcher` to the integer matcher we previously wrote. We then write a custom `parser` function that calls the matcher we just declared, but takes the tokenised result of that match, and casts it to an integer and then passes it up to the caller\n\nWhat this essentially is a glorified function curry, where we build a faux-matcher that sits between the matcher we built using our base classes, and the `peg_parse` function provided by `mnkytw`.\n\nYou'll notice that we have to declare two string conversion functions. Because you can declare recursive matchers, when you string cast a matcher, it's possible for the string cast function to get stuck in an infinite loop. To prevent this you should use `mnkytw.to_string(matcher)` to convert a matcher to string, it will mark any second level recursions with a `...` to imply recursion\n\nFinally, we want to declare a recursive matcher that can parse something like `\"3+4+5\"`.\n\nLet's begin by defining the set of operator symbols that are valid\n\n```python\nimport mnkytw\n\nOperators = mnkytw.MatchAlternation([\n    mnkytw.LiteralMatch(\"+\"),\n    mnkytw.LiteralMatch(\"-\"),\n    mnkytw.LiteralMatch(\"*\"),\n    mnkytw.LiteralMatch(\"/\")\n])\n\n```\n\nWe don't need to define a custom class here, because all we really want is the symbol, there's no need to intercept parsing that we don't want to modify the token result of\n\nNow lets declare a recursive matcher called OperationMatch\n\n```python\nimport mnkytw\n\nclass OperationMatch:\n    def __init__(self):\n        # Match either\n        self.matcher = mnkytw.MatchAlternation([\n            mnkytw.MatchJoin([\n                # An integer\n                Integer,\n                # followed by a symbol\n                Operators,\n                # followed by this matcher\n                self\n            ]),\n            # or an integer\n            Integer\n        ])\n    \n    def parser(self, body : str, hard_fail = True):\n        result = self.matcher.parser(body, hard_fail)\n        if not result:\n            return result\n        # if the token matched was not a list, then it can't be\n        # the MatchJoin that was matched (because a MatchJoin is always a list)\n        if type(result[0]) is not list:\n            # The only alternative is that it matched the Integer alternative so \n            # just pass that token up as is\n            return result\n        return [{\n            'lhs': result[0][0], # the first part of the list will be the integer matched\n            'symbol': result[0][1], # the second part matched will be a list\n            'rhs': result[0][2] # the third part will be the tail recursion, it could be an\n            #integer or another Operation but either way it doesn't matter because it's still the RHS\n        }, result[1]]\n\n    def to_string(self, call_count = 0):\n        return self.matcher.to_string(call_count)\n    \n    def __str__(self):\n        return self.to_string()\n\nOperation = OperationMatch()\n\nprint(mnkytw.peg_parse(\"3+4\", Operation))\n# {\n#   'lhs': {\n#       'val': 3,\n#       'type': 'integer'\n#   },\n#   symbol: '+',\n#   'rhs': {\n#       'val': 4,\n#       'type': 'integer'\n#   }\n# }\n```\n\nIn the example above, we use a little more logic in how we parse tokens, this time we're using what the token returned is to decide if further processing is required. In this case we know that the only circumstance in which the token returned is a list is if it's found a symbol in the middle. The return type of base classes can be found in the documentation\n\nFor this reason you should try to keep your grammar as decomposed as possible, to avoid the risk of making false assumptions about the typing of your more complex token result. \n\n## Reference\n\n### `mnkytw.LiteralMatch`\n\nThe `LiteralMatch` class matches a string, and nothing else. A `LiteralMatch` takes a string as it's only constructor argument then attempts to match that when `parser` is called\n\n```python\nimport mnkytw\n\nHello = mnkytw.LiteralMatch(\"hello\")\n\nprint(Hello.parser(\"hello\", False))\n# (\"hello\", 5)\nprint(Hello.parser(\"goodbye\", False))\n# False\nprint(Hello.parser(\"hello hello\", False))\n# (\"hello\", 5)\n# it ignores the second hello, it greedy matches but does not fail if it doesn't fully match\nprint(Hello.parser(\"goodbye\", True))\n# throws a ValueError\n\nprint(mnkyt.peg_parse(\"hello hello\", Hello))\n# False \n# because peg_parse expects a complete match to the string, not just a start anchored substring\n\n```\n\n### `mnkytw.RegexMatch`\n\nThe `RegexMatch` class matches a regex. A `RegexMatch` takes a Regex string as it's only constructor argument then uses this when parsing the text body. Because this is just a wrapper around Python's Regex Library, it's possible to implement some backtracking and various other complex matching patterns. \n\nThis isn't recommended, because the more complex Regex you define, the harder you make it to debug. You should focus on making your Regex declaration axiomatic (i.e. matching only one axiomatic element). In certain cases, it may be more readable to use a `MatchAlternation` and a set of `LiteralMatch` declarations to express the pattern you're aiming to match.\n\n```python\nimport mnkytw\n\nFloatingPoint = mnkytw.RegexMatch(r\"[0-9]+\\.[0-9]*[1-9]\")\n\nprint(FloatingPoint.parser(\"3.141\", False))\n# ('3.141', 5)\n```\n\n### `mnkytw.MatchAlternation`\n\nThe `MatchAlternation` class is the Monkey's Typewriter disjunction. That is to say, it will attempt to match one of the listed matches starting at the top of the list and working down e.g.\n\n```python\nimport mnkytw\nMatchFewest1s = mnkytw.MatchAlternation([\n    mnkytw.LiteralMatch(\"1\"), # this literal will be matched first\n    mnkytw.LiteralMatch(\"11\"), # this match will be matched second\n    mnkytw.LiteralMatch(\"111\"), # this will be matched third\n    mnkytw.RegexMatch(r\"1*\"), # this will be matched last\n])\n\nprint(MatchFewest1s.parser(\"111111\", False))\n# ('1', 1)\n\n```\n\nIn the example above, because `\"1\"` matched first, it matched that and returned. Even though the last RegexMatch would have matched the most of the string (i.e. all of it), the MatchAlternation will take the first positive match in the list.\n\nAs a result, your alternations should be setup with this in mind e.g.\n\n```python\nimport mnkytw\nMatchAsMany1sUpToThree = mnkytw.MatchAlternation([\n    mnkytw.LiteralMatch(\"111\"), # this will be matched first\n    mnkytw.LiteralMatch(\"11\"), # this match will be matched second\n    mnkytw.LiteralMatch(\"1\"), # this literal will be matched third\n])\n\nprint(MatchAsMany1sUpToThree.parser(\"111111\", False))\n# ('111', 3)\n\n```\n\nNow that we've re-ordered our `MatchAlternation` list, it's testing the three `1`s first and so consuming that.\n\n### `mnkytw.MatchJoin`\nThe `MatchJoin` is Monkey's Typewriter's Conjunction class. Essentially, it forces multiple matchers to join together. This can be used to express more complex expressions composed of multiple matchers.\n\n```python\nimport mnkytw\n\ntwoOrThree = mnkytw.MatchAlternation([\n    mnkytw.LiteralMatch(\"2\"),\n    mnkytw.LiteralMatch(\"3\"),\n])\nfourOrFive = mnkytw.MatchAlternation([\n    mnkytw.LiteralMatch(\"4\"),\n    mnkytw.LiteralMatch(\"5\"),\n])\n\ntwoOrThreeAndFourOrFive = mnkytw.MatchJoin([\n    twoOrThree,\n    fourOrFive\n])\n\nprint(twoOrThreeAndFourOrFive.parser(\"24\", False))\n# (['2', '4'], 2)\nprint(twoOrThreeAndFourOrFive.parser(\"34\", False))\n# (['3', '4'], 2)\nprint(twoOrThreeAndFourOrFive.parser(\"356\", False))\n# (['3', '5'], 2)\n\nprint(twoOrThreeAndFourOrFive.parser(\"156\", False))\n# False\n\n```\n\nA `MatchJoin` returns a list of the tokens it matched, in the case above, we provided two matchers, and it matched each once, except in the last example, because the first digit was a `1` not a `2` or `3`. \n\nNote, that if you write a custom Matcher you return result may also be a list. Whilst none of the library logic makes the assumption that only `MatchJoin` (and `MatchQuantity`) return lists, we do use it in some of our examples. If you return a list as your token, then you will need to work out an alternative way of distinguishing the result of a `MatchJoin` from your own custom matchers.\n\n### `mnkytw.MatchQuantity`\n\nThe `MatchQuantity` class is our quantified match class. essentially, allowing you specify a minimum (and optional maximum) number of times a given matcher should be matched. The `MatchQuantity` class returns a list of tokens matched.\n\n```python\nimport mnkytw\n\nmatchNoMoreThanFive3s = mnkytw.MatchQuantity(\n    mnkytw.LiteralMatch(\"3\"),\n    0, #Can match no threes\n    5 # match at most 5 threes\n)\n\nprint(matchNoMoreThanFive3s.parser(\"33\", False))\n# (['3', '3'], 2)\n\nprint(matchNoMoreThanFive3s.parser(\"333333\", False))\n# (['3', '3', '3', '3', '3'], 5)\n\nprint(matchNoMoreThanFive3s.parser(\"343\", False))\n# (['3'], 1)\n\nprint(matchNoMoreThanFive3s.parser(\"245\", False))\n# ([], 0)\n\n```\n\nThis class can act as an optional match class and \"+\" match class simply by writing `mnkytw.MatchQuantity(your_matcher, 0, 1)` `mnkytw.MatchQuantity(your_matcher, 1)`. The maximum value is optional and if unset we will assume you want to match until first failure or end of input.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://tryal.ai/",
    "keywords": "PEG,parser,grammar",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monkeys-typewriter",
    "package_url": "https://pypi.org/project/monkeys-typewriter/",
    "platform": "",
    "project_url": "https://pypi.org/project/monkeys-typewriter/",
    "project_urls": {
      "Homepage": "https://tryal.ai/"
    },
    "release_url": "https://pypi.org/project/monkeys-typewriter/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Monkey's Typewriter PEG parser",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9044202,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e72b7bcf26e8e349f0ddb1445ca4529a6ff4266c9122826df49ac3749c4e66c1",
          "md5": "15db920489242343ee09a7a64161b4ab",
          "sha256": "9f68d3c5de05401682151c6e7481746be1240705dbbc8ca133c78c28a405af62"
        },
        "downloads": -1,
        "filename": "monkeys-typewriter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15db920489242343ee09a7a64161b4ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8841,
        "upload_time": "2020-12-23T23:16:39",
        "upload_time_iso_8601": "2020-12-23T23:16:39.569290Z",
        "url": "https://files.pythonhosted.org/packages/e7/2b/7bcf26e8e349f0ddb1445ca4529a6ff4266c9122826df49ac3749c4e66c1/monkeys-typewriter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5e5360d18f20ed6fac50a7ea3c8b5ff4bdc7b73af5079a6f68b2a483c3abb9",
          "md5": "9e2d0c9d425d23c31bbc72053ba21778",
          "sha256": "6b38692bf9c7fd61c1f4ce11c447a8696b0dc9ac2fe3702c8f3f4a5e9281725f"
        },
        "downloads": -1,
        "filename": "monkeys-typewriter-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e2d0c9d425d23c31bbc72053ba21778",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14172,
        "upload_time": "2020-12-23T23:22:29",
        "upload_time_iso_8601": "2020-12-23T23:22:29.338709Z",
        "url": "https://files.pythonhosted.org/packages/3a/5e/5360d18f20ed6fac50a7ea3c8b5ff4bdc7b73af5079a6f68b2a483c3abb9/monkeys-typewriter-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c844fd9a4a6773f26c75ddccf6780ce8d6ca10f9dedc0a321983f10eb9d8f098",
          "md5": "e3a91be9c6e0d9d9491dff9b43382201",
          "sha256": "6165831736080212c4ef36a14c55a3b9ca36e1529f9ec93b87cb0bcfaa31631f"
        },
        "downloads": -1,
        "filename": "monkeys-typewriter-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e3a91be9c6e0d9d9491dff9b43382201",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13663,
        "upload_time": "2021-01-02T15:51:58",
        "upload_time_iso_8601": "2021-01-02T15:51:58.142309Z",
        "url": "https://files.pythonhosted.org/packages/c8/44/fd9a4a6773f26c75ddccf6780ce8d6ca10f9dedc0a321983f10eb9d8f098/monkeys-typewriter-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a595a19164eee75b9f2cbed043348951d9d099b39800328d9a026bd1b15b99c",
          "md5": "3029a8be622c7397467fb258d694b970",
          "sha256": "d067a1645f489a6b71db578b87b3d34a1ddbb9273378947611f9556527b3a616"
        },
        "downloads": -1,
        "filename": "monkeys-typewriter-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3029a8be622c7397467fb258d694b970",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14314,
        "upload_time": "2021-01-02T15:56:02",
        "upload_time_iso_8601": "2021-01-02T15:56:02.124974Z",
        "url": "https://files.pythonhosted.org/packages/7a/59/5a19164eee75b9f2cbed043348951d9d099b39800328d9a026bd1b15b99c/monkeys-typewriter-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b97c1a54d5ef22039e6800e2ddb91359719d6ca2c83b9be873237cad5f2388ad",
          "md5": "d164878caa6589c2fc2e7b94254e33e9",
          "sha256": "3f00d84cf580426b02897cf332af860e601fbdf8f10fe513d80f233d8a390f8c"
        },
        "downloads": -1,
        "filename": "monkeys-typewriter-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d164878caa6589c2fc2e7b94254e33e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14324,
        "upload_time": "2021-01-03T20:56:35",
        "upload_time_iso_8601": "2021-01-03T20:56:35.157976Z",
        "url": "https://files.pythonhosted.org/packages/b9/7c/1a54d5ef22039e6800e2ddb91359719d6ca2c83b9be873237cad5f2388ad/monkeys-typewriter-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b97c1a54d5ef22039e6800e2ddb91359719d6ca2c83b9be873237cad5f2388ad",
        "md5": "d164878caa6589c2fc2e7b94254e33e9",
        "sha256": "3f00d84cf580426b02897cf332af860e601fbdf8f10fe513d80f233d8a390f8c"
      },
      "downloads": -1,
      "filename": "monkeys-typewriter-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d164878caa6589c2fc2e7b94254e33e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14324,
      "upload_time": "2021-01-03T20:56:35",
      "upload_time_iso_8601": "2021-01-03T20:56:35.157976Z",
      "url": "https://files.pythonhosted.org/packages/b9/7c/1a54d5ef22039e6800e2ddb91359719d6ca2c83b9be873237cad5f2388ad/monkeys-typewriter-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}