{
  "info": {
    "author": "Vitaly Khudobakhshov",
    "author_email": "vitaly.khudobakhshov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Typedparse\n\nWhat is typedparse? It is a lightweight parser for command-line options based on type hints. Typedparse uses the argparse\npackage as the backend. So you don't need to define parsers and subparsers by yourself anymore. Just write clean, typed,\nand documented code; typedparse will do all work for you.\n\n```python\nimport typedparse\nfrom typing import Optional\n\n\ndef main(file: str, number: Optional[int] = 6):\n    \"\"\"Display first lines of a file.\n\n    Args:\n        file: file to display\n        number: number of lines to display\n    \"\"\"\n    with open(file, \"r\") as f:\n        for i in range(0, number):\n            print(f.readline(), end=\"\")\n\n\nif __name__ == \"__main__\":\n    typedparse.parse(main, generate_short_flags=True)\n```\n\nHere is a small example that emulates the standard `head` command. Here you need only specify types and default values\nfor the function's formal parameters and pass them into the `parse` function. You also have to specify the docstring for\nthe function it will be used to generate help. In this case we also use `generate_short_flags=True` to generate short flags.\nThat's it.\n\nIf we run the program with one argument `-h` or `--help`, it produces the following output:\n\n```\nusage: head.py [-h] [--number [NUMBER]] file\n\npositional arguments:\n  file                  file to display\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --number [NUMBER], -n [NUMBER]\n                        number of lines to display\n```\n\nTypedparse heavily relies on not only type hints but [docstring_parser](https://github.com/rr-/docstring_parser)\npackage. So it supports all popular documentation styles, but you need to be sure your docstring is well-formed\naccording to the style you chose. This means you can skip the long description but can't skip the short one and\nparameters' description.\n\n## Installation\n\nTypedparse is available as a regular PyPI package. To install it, simply type:\n\n```bash\npip install typedparse\n```\n\n## Positional and optional arguments\n\nThe separation of positional and optional arguments in the function definition and command-line arguments is slightly\ndifferent because it allows for a default value. In typedparse, we use Optional type to distinguish positional and\noptional arguments:\n\n```python\nfrom typing import Optional\n\n\ndef main(foo: str, bar: Optional[str] = \"bar\"):\n    ...\n```\n\nIn this example, `foo` is a positional argument, and `bar` is optional with the default value \"bar\". You can add default\nvalue for positional arguments too, e.g. `def main(foo: str = \"foo\", ...)`.\n\n## Types of arguments\n\nFor any argument, we must specify the type using a type hint for a certain formal parameter. It can be the built-in\nPython type like `int`, `float` or `str`. Or any user-defined class with a constructor that accepts a string argument.\nFor example, we can use `Path` instead of `str` type for filenames and paths.\n\n## Short flags\n\nTo introduce a short flag, one can use a decorator `options` for the functions:\n\n```python\nimport typedparse\nfrom typing import Optional\n\n\n@typedparse.options(bar=\"-b\")\ndef main(foo: str, bar: Optional[str] = \"bar\"):\n    ...\n```\n\nOf course, it makes sense only for optional arguments. Now it will work with both\n`--bar` and `-b` flags.\n\nTo use only the short flag, the simplest way to do it is `@options(bar=[\"-b\"])`. You can also use another name for the\nlong flag by the same trick: `bar=[\"--box\"]`\nor use both `bar=[\"-b\", \"--box\"]`. It will affect only the command line arguments but not the function's formal\nparameters.\n\nThere is an option to generate short flags automatically for all optional arguments. To do so\nuse `generate_short_flags=True` as the second argument in `parse` function.\n\nOf course, you can combine both methods. In this case, the generator will use information about used flags during the\ngenerating process. The general algorithm tries to use the first character of the formal parameter as a short flag. If\nthe flag is in use, it tries to use the second character and so on.\n\n## Subparsers\n\nTypedparse supports a hierarchy of parsers in a very natural way. You can combine functions in classes, classes in\nlists. Consider the following example:\n\n```python\nimport typedparse\nfrom typing import Optional\n\n\nclass CliExample:\n\n    def add(self, name: str, email: Optional[str] = None):\n        ...\n\n    def remove(self, name: str):\n        ...\n\n\nif __name__ == \"__main__\":\n    typedparse.parse(CliExample())\n```\n\nThere are two commands here:  `add` and `remove` with their own set of arguments. \n*Methods started from underscore will be ignored by the parser*. Typical usage will look like:\n\n```bash\npython commands.py add john --email john@mycompany.com\n```\n\nSo, the `name` parameter will be bound to `john`, and the `email` will be bound to `john@mycompany.com`.\nIf the class construction doesn't have parameters, you can pass the class itself \ninto the `parse` function instead of the object: `typedparse.parse(CliExample)`.\n\nMethods \n\nActually, you don't need a class if you want to create sub-commands. You can use \na list of functions instead:\n\n```python\nimport typedparse\nfrom typing import Optional\n\ndef add(name: str, email: Optional[str] = None):\n    ...\n\ndef remove(name: str):\n    ...\n\nif __name__ == \"__main__\":\n    typedparse.parse([add, remove])\n```\n\n## List arguments\n\nList arguments are supported out of the box in typedparse:\n\n```python\nfrom typing import List\n\n\ndef main(numbers: List[int]):\n    ...\n```\n\nBut there are two possible issues here:\n\n- By default, the number of arguments in the list is at least one. This is equivalent to `nargs=\"+\"` in argparse\n  package.\n- It may be inconvenient to have the displayed name\n  (meta variable in terms of argparse) the same as the corresponding formal parameter. It will look\n  like `numbers [numbers ...]` if we would try to display help.\n\nHow to manage that? For the second case, we can rename the formal parameter or use `@options(flags=[\"number\"])` to make\nit singular. If we want to allow an empty list, we can specify it in the following\nway `@options(numbers={\"nargs\": \"*\"})`. We also can combine these two options if we want:\n\n```python\nimport typedparse\nfrom typing import List\n\n\n@typedparse.options(numbers={\n    \"flags\": [\"number\"],\n    \"nargs\": \"*\"\n})\ndef main(numbers: List[int]):\n    \"\"\"My brand new CLI\n\n    Args:\n        numbers: a list of numbers\n    \"\"\"\n    ...\n```\n\n## Custom types\n\nIf you want to parse arguments to your own types, you can do that in the following manner:\n\n```python\nimport typedparse\nfrom typing import Optional\n\n\ndef to_int(s: str) -> int:\n    if s.startswith(\"0x\"):\n        return int(s, 16)\n    elif s.startswith(\"0\"):\n        return int(s, 8)\n\n    return int(s, 10)\n\n\n@typedparse.options(test={\n    \"type\": to_int\n})\ndef main(test: Optional[int] = 0):\n    ...\n```\n\nIn this example, we use a custom function to convert string arguments to integers, which supports hexadecimal and octal\nrepresentations.\n\n## Kebab case vs. snake case arguments\n\nFrom the version 0.2 typedparse uses kebab case for long optional flags, so \n`my_long_flag: Optional[bool]` will become `--my-long-flag`. You can use snake case,\nif you want by setting `snake_case_flags` to true in the `parse` function.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/khud/typedparse",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "typedparse",
    "package_url": "https://pypi.org/project/typedparse/",
    "platform": "",
    "project_url": "https://pypi.org/project/typedparse/",
    "project_urls": {
      "Homepage": "https://github.com/khud/typedparse"
    },
    "release_url": "https://pypi.org/project/typedparse/0.3/",
    "requires_dist": [
      "docstring-parser"
    ],
    "requires_python": "",
    "summary": "Parser for command-line options based on type hints",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9174668,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30e443288214aa85b383d47a2bd6217ffee4fef1edfd78f923bcafb4795e0f37",
          "md5": "85ad989ba0889fa0a03f8c7feb4e291c",
          "sha256": "976392e4bbb2b46f42868a01b88a3492c82a7ccaa4a7b2e5cb4746b5d1cd2c50"
        },
        "downloads": -1,
        "filename": "typedparse-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85ad989ba0889fa0a03f8c7feb4e291c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11564,
        "upload_time": "2020-12-22T18:34:37",
        "upload_time_iso_8601": "2020-12-22T18:34:37.070276Z",
        "url": "https://files.pythonhosted.org/packages/30/e4/43288214aa85b383d47a2bd6217ffee4fef1edfd78f923bcafb4795e0f37/typedparse-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "248da1aa9ce5aa572df510238e564c79aed2250a807347c83f11c034cf8ce438",
          "md5": "019b33879e30b5a85f8f1721dae7da60",
          "sha256": "8fb8e2de4336bdabe8351be65f095436c1e785fc9b5712635fe3117353e4eefe"
        },
        "downloads": -1,
        "filename": "typedparse-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "019b33879e30b5a85f8f1721dae7da60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7413,
        "upload_time": "2020-12-22T18:34:38",
        "upload_time_iso_8601": "2020-12-22T18:34:38.170827Z",
        "url": "https://files.pythonhosted.org/packages/24/8d/a1aa9ce5aa572df510238e564c79aed2250a807347c83f11c034cf8ce438/typedparse-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23eee787065a40a46adfc376cb83c6cca3ad41542d8068245f937c54e1e6b2ff",
          "md5": "7ef458ee777ca2b35159b2cfd78bd4b7",
          "sha256": "6fcc92d968b465ddedb681e02dfe8db2e5fcfd97b952c6f725ac474834fd4994"
        },
        "downloads": -1,
        "filename": "typedparse-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ef458ee777ca2b35159b2cfd78bd4b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12242,
        "upload_time": "2020-12-31T11:25:52",
        "upload_time_iso_8601": "2020-12-31T11:25:52.094602Z",
        "url": "https://files.pythonhosted.org/packages/23/ee/e787065a40a46adfc376cb83c6cca3ad41542d8068245f937c54e1e6b2ff/typedparse-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7392d8e8ed415744d1318d041bb1a4bfbc77a668a566b36b724802b6c30e2881",
          "md5": "dc5d5445e82a11b497805c4109d4a72f",
          "sha256": "771faf9c68a9726ee8f0a8a879dbe1d700e260a58657a6838ce928266372357d"
        },
        "downloads": -1,
        "filename": "typedparse-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc5d5445e82a11b497805c4109d4a72f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8266,
        "upload_time": "2020-12-31T11:25:53",
        "upload_time_iso_8601": "2020-12-31T11:25:53.528106Z",
        "url": "https://files.pythonhosted.org/packages/73/92/d8e8ed415744d1318d041bb1a4bfbc77a668a566b36b724802b6c30e2881/typedparse-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83f517dc716d4521e4255d1dae04426db68fff9c11249c6fed85d9697d0e609c",
          "md5": "bc3df1c57ebc8f686bb531ae2a6858ee",
          "sha256": "8ec64e7977b151faacfb12a0ed4050f182c8f0d5f3fbc3d9e41df11f2727c6c5"
        },
        "downloads": -1,
        "filename": "typedparse-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc3df1c57ebc8f686bb531ae2a6858ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12282,
        "upload_time": "2020-12-31T12:44:01",
        "upload_time_iso_8601": "2020-12-31T12:44:01.573775Z",
        "url": "https://files.pythonhosted.org/packages/83/f5/17dc716d4521e4255d1dae04426db68fff9c11249c6fed85d9697d0e609c/typedparse-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a18a9e661904f7a5174921869eafb59839e98364a3e4bbfa121a1a66237f49d3",
          "md5": "f59e724b8cc942bbb3d4ef5ae1f37f7c",
          "sha256": "18fa819ca3f385058c9bf7efd4fb6bdbbcb806fde094838ce111c53316bb42d2"
        },
        "downloads": -1,
        "filename": "typedparse-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f59e724b8cc942bbb3d4ef5ae1f37f7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8276,
        "upload_time": "2020-12-31T12:44:02",
        "upload_time_iso_8601": "2020-12-31T12:44:02.872154Z",
        "url": "https://files.pythonhosted.org/packages/a1/8a/9e661904f7a5174921869eafb59839e98364a3e4bbfa121a1a66237f49d3/typedparse-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea5d00e7b75d71a637d89e32028e7fb0d40290587e81225166b8b28462a67f6e",
          "md5": "3d34cf967198f4726e1243d73b07020f",
          "sha256": "d880ca644376f30a98747ef7a36945a372cd02e1828869fc08cfd8fa342580e4"
        },
        "downloads": -1,
        "filename": "typedparse-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d34cf967198f4726e1243d73b07020f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12368,
        "upload_time": "2021-01-19T18:51:37",
        "upload_time_iso_8601": "2021-01-19T18:51:37.609999Z",
        "url": "https://files.pythonhosted.org/packages/ea/5d/00e7b75d71a637d89e32028e7fb0d40290587e81225166b8b28462a67f6e/typedparse-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "603e3f350450810b4a8e8d0f7900cd1c689ed2618fdff328aa1bd4f071ae035b",
          "md5": "59e43779c374e9cd1aa63194773bdf98",
          "sha256": "456ef1a584f56bbb67c8b0d40868cdb5cde7c47179c82a681cd3757a76f4493d"
        },
        "downloads": -1,
        "filename": "typedparse-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "59e43779c374e9cd1aa63194773bdf98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8382,
        "upload_time": "2021-01-19T18:51:38",
        "upload_time_iso_8601": "2021-01-19T18:51:38.853235Z",
        "url": "https://files.pythonhosted.org/packages/60/3e/3f350450810b4a8e8d0f7900cd1c689ed2618fdff328aa1bd4f071ae035b/typedparse-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea5d00e7b75d71a637d89e32028e7fb0d40290587e81225166b8b28462a67f6e",
        "md5": "3d34cf967198f4726e1243d73b07020f",
        "sha256": "d880ca644376f30a98747ef7a36945a372cd02e1828869fc08cfd8fa342580e4"
      },
      "downloads": -1,
      "filename": "typedparse-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d34cf967198f4726e1243d73b07020f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12368,
      "upload_time": "2021-01-19T18:51:37",
      "upload_time_iso_8601": "2021-01-19T18:51:37.609999Z",
      "url": "https://files.pythonhosted.org/packages/ea/5d/00e7b75d71a637d89e32028e7fb0d40290587e81225166b8b28462a67f6e/typedparse-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "603e3f350450810b4a8e8d0f7900cd1c689ed2618fdff328aa1bd4f071ae035b",
        "md5": "59e43779c374e9cd1aa63194773bdf98",
        "sha256": "456ef1a584f56bbb67c8b0d40868cdb5cde7c47179c82a681cd3757a76f4493d"
      },
      "downloads": -1,
      "filename": "typedparse-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "59e43779c374e9cd1aa63194773bdf98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8382,
      "upload_time": "2021-01-19T18:51:38",
      "upload_time_iso_8601": "2021-01-19T18:51:38.853235Z",
      "url": "https://files.pythonhosted.org/packages/60/3e/3f350450810b4a8e8d0f7900cd1c689ed2618fdff328aa1bd4f071ae035b/typedparse-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}