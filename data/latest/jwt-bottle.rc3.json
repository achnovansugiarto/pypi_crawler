{
  "info": {
    "author": "Afonso Medeiros",
    "author_email": "afonso.b.medeiros@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Plugin que implementa autenticação com JWT para o aplicações Bottle.\n\n### Instalação.\n\nÉ necessário instalar `bottle` (por se tratar de um plugin para aplicações com bottle) em seguida pode realizar a instalação do plugin.\n\n```sh\n$ pip install bottle\n$ pip install jwt_token\n```\n\nCaso aconteça algum erro com relação a importação de módulo do python-jose ou pycrypto, pode instalar os pacotes abaixo também.\n\n```sh\n$ pip install python-jose\n$ pip install pycrypto\n```\n\nExemplo de uso simples:\n\n```py\nimport bottle\nfrom jwt_bottle import JWTPlugin, auth_required, BaseAuth\nfrom peewee import (SqliteDatabase, Model, CharField,\n                    DateField, DoesNotExist) # aqui utilizei o peewee, mas a escolha é livre.\nfrom passlib.hash import pbkdf2_sha512 as hsh # aqui utilizei o passlib, mas a escolha é livre.\nfrom hashlib import md5\n\n\ndb = SqliteDatabase(\":memory:\")\n\n\nclass Users(Model):\n    \"\"\"Classe usuário.\n    \"\"\"\n    name = CharField(max_length=50)\n    last_name = CharField(max_length=50)\n    email = CharField(max_length=200)\n    password = CharField(max_length=300)\n    birthday = DateField()\n\n    def gen_hash(self):\n        _secret = md5(\"123456\".encode()).hexdigest()\n        _password = md5(self.password.encode()).hexdigest()\n        self.password = hsh.hash(_secret+_password)\n\n    def verify(self, password):\n        _secret = md5(\"123456\".encode()).hexdigest()\n        _password = md5(password.encode()).hexdigest()\n        return hsh.verify(_secret+_password, self.password)\n\n    class Meta:\n        database = db\n\n\nclass Auth(BaseAuth):\n    \"\"\"Classe para autenticação.\n    Precisa conter um método estático chamado authenticate e outro\n    chamado get_user. Também deve herdar de jwt_bottle.BaseAuth.\n\n    Os parametros de authenticate ficam a critério do método post.\n\n    O padrão é receber uma requisição POST enviando dados no formato JSON.\n    Esses dados são empacotados no argumento kwargs do método authenticate.\n\n    para identificar o usuário é necessário realizar a consulta utilizando\n    um ID.\n    \"\"\"\n\n    @staticmethod\n    def authenticate(*args, **kwargs):\n        \"\"\"Método para autenticação, aqui utilizei uma classe chamada\n        Users implementada com o ORM peewee e uma simples regra de \n        autenticação apresentada pelo Eduardo Mendes.\n        link: https://www.youtube.com/watch?v=ieGA91ExOH0\n\n        Returns:\n            Users: dicionário contendo id para gerar o token.\n            OBS: é necessário possuir um atributo \"id\" para gerar o token.\n        \"\"\"\n        try:\n            if \"email\" in kwargs and \"password\" in kwargs:\n                user = Users.get(Users.email==kwargs['email'])\n                if user.verify(kwargs['password']):\n                    return user\n            return None\n        except DoesNotExist as err:\n            return {\"erro\": f\"Usuário {kwargs['email']} não localizado\"}\n\n    @staticmethod\n    def get_user(*args, **kwargs):\n        \"\"\"Classe para resgatar usuario autenticado\n        utilizando a decodificação de um token.\n\n        Args:\n            user_id ([int]): identificador do usuário.\n\n        Returns:\n            Users: retorna usuário autenticado pelo Token.\n        \"\"\"\n        try:\n            user = Users.get_by_id(kwargs[\"id\"])\n            if user:\n                return user\n            return None\n        except DoesNotExist as err:\n            return {}\n\n\n\napp = bottle.Bottle()\n\nconfigs = [\n    {'model': Auth, 'endpoint': '/auth', 'auth_name': \"auth\", 'refresh_name': 'refresh'}\n]\n\"\"\"\n    Sobre configs:\n    Trata-se de uma lista de dicionários que contém informações para construção da rota e mecânica entre um request e uma autenticação.\n    É necessário conter:\n        model -> Objeto utilizado para autenticação, no nosso caso a classe Auth.\n        endpoint -> endereçamento da rota de autenticação.\n        auth_name -> trada-se do nome que será dado a função que lidará com processo de montagem e geração do token, caso utilize mais de 1 item dentro de config lembrar que auth name deve ser diferente para cada item.\n        refresh_name -> trada-se do nome que será dado a função que lidará com processo de atualização e geração de novo token, caso utilize mais de 1 item dentro de config lembrar que refresh name deve ser diferente para cada item.\n\n\"\"\"\n\njwt = JWTPlugin(\"abcde\", configs=configs, payload=['id', 'email', 'name'])\n\"\"\"\n    Atributo payload:\n    uma lista de parametros na qual a classe de controle (neste exemplo, class User) possuirá e deverão ser inclusos no payload, lembre-se de nunca incluír dados sensíveis ou protegidos, como documentos ou senhas.\n\"\"\"\n\napp.install(jwt)\n\n\n@auth_required\n@app.get(\"/user\")\ndef index(user):\n    return f\"Usuario: {user.name}\"\n\n\nif __name__ == \"__main__\":\n    Users.create_table()\n    user = Users(name=\"Afonso\", last_name=\"Medeiros\", email=\"afonso@afonso.com\", password=\"123456\", birthday=\"2020-01-01\")\n    user.gen_hash()\n    user.save()\n\n    app.run(debug=True, reloader=True)\n```\n\nTeste efetuado utilizando httpie, para instalar basta executar `pip install httpie`\n\n```sh\n# /auth é o endpoint padrão para autenticar.\n$ http POST http://127.0.0.1:8080/auth email=afonso@afonso.com password=123456\n\nHTTP/1.0 200 OK\nContent-Length: 128\nContent-Type: application/json\nDate: Sun, 12 Jul 2020 03:59:19 GMT\nServer: WSGIServer/0.2 CPython/3.8.2\n\n{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZXhwIjoxNTk0NTI5OTU5fQ.1hmo_Fkg7-OKs0VDDil6dUnDv5FvmIkIYAjl6nzewwY\"\n}\n\n$ http http://127.0.0.1:8080/user Authorization:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZXhwIjoxNTk0NTI5OTU5fQ.1hmo_Fkg7-OKs0VDDil6dUnDv5FvmIkIYAjl6nzewwY\n\nHTTP/1.0 200 OK\nContent-Length: 15\nContent-Type: text/html; charset=UTF-8\nDate: Sun, 12 Jul 2020 04:01:09 GMT\nServer: WSGIServer/0.2 CPython/3.8.2\n\nUsuario: Afonso\n```\n\nÉ necessário implementar uma classe para a autenticação do usuário, essa classe vai carregar as regras de autenticação de cada aplicação, no caso do exemplo Criei uma classe `Auth` que seguindo a regra implementa dois métodos estáticos `authenticate` e `get_user`. Os métodos podem receber qualquer parametro para autenticação o que flexibiliza como realizar o POST com os dados do usuário e recuperar estes dados.\n\nO método authenticate deve retornar um objeto que possua como atributos os itens passados como payloads, caso nenhum payload seja passado será feita a tentativa de utilizar o atributo id para gerar o token, caso a classe também não possua um atributo id uma exceção será levantada.\n\nCom a mudança feita não é mais obrigatório o uso de uma classe peewee Model, agora pode utilizar o ORM que quiser e implementar sua própria forma de authenticar um usuário.\n\nExemplo com duas formas de autenticação:\n\n```py\nimport bottle\nfrom jwt_bottle import JWTPlugin, auth_required, BaseAuth\nfrom peewee import (SqliteDatabase, Model, CharField,\n                    DateField, DoesNotExist) # aqui utilizei o peewee, mas a escolha é livre.\nfrom passlib.hash import pbkdf2_sha512 as hsh # aqui utilizei o passlib, mas a escolha é livre.\nfrom hashlib import md5\n\n\ndb = SqliteDatabase(\":memory:\")\n\n\nclass Users(Model):\n    \"\"\"Classe usuário.\n    \"\"\"\n    name = CharField(max_length=50)\n    last_name = CharField(max_length=50)\n    email = CharField(max_length=200)\n    password = CharField(max_length=300)\n    birthday = DateField()\n\n    def gen_hash(self):\n        _secret = md5(\"123456\".encode()).hexdigest()\n        _password = md5(self.password.encode()).hexdigest()\n        self.password = hsh.hash(_secret+_password)\n\n    def verify(self, password):\n        _secret = md5(\"123456\".encode()).hexdigest()\n        _password = md5(password.encode()).hexdigest()\n        return hsh.verify(_secret+_password, self.password)\n\n    class Meta:\n        database = db\n\n\nclass Auth(BaseAuth):\n    \"\"\"Classe para autenticação.\n    Precisa conter um método estático chamado authenticate e outro\n    chamado get_user.\n\n    Os parametros de authenticate ficam a critério do método post.\n\n    O padrão é receber uma requisição POST enviando dados no formato JSON.\n    Esses dados são empacotados no argumento kwargs do método authenticate.\n\n    para identificar o usuário é necessário realizar a consulta utilizando\n    um ID.\n    \"\"\"\n\n    @staticmethod\n    def authenticate(*args, **kwargs):\n        \"\"\"Método para autenticação, aqui utilizei uma classe chamada\n        Users implementada com o ORM peewee e uma simples regra de \n        autenticação apresentada pelo Eduardo Mendes.\n        link: https://www.youtube.com/watch?v=ieGA91ExOH0\n\n        Returns:\n            Users: dicionário contendo id para gerar o token.\n            OBS: é necessário possuir um atributo \"id\" para gerar o token.\n        \"\"\"\n        try:\n            if \"email\" in kwargs and \"password\" in kwargs:\n                user = Users.get(Users.email==kwargs['email'])\n                if user.verify(kwargs['password']):\n                    return user\n            return None\n        except DoesNotExist as err:\n            return {\"erro\": f\"Usuário {kwargs['email']} não localizado\"}\n\n    @staticmethod\n    def get_user(*args, **kwargs):\n        \"\"\"Classe para resgatar usuario autenticado\n        utilizando a decodificação de um token.\n\n        Args:\n            user_id ([int]): identificador do usuário.\n\n        Returns:\n            Users: retorna usuário autenticado pelo Token.\n        \"\"\"\n        try:\n            user = Users.get_by_id(kwargs[\"id\"])\n            if user:\n                return user\n            return None\n        except DoesNotExist as err:\n            return {}\n\nclass AdminAuth(BaseAuth):\n    \"\"\"Classe para autenticação.\n    Precisa conter um método estático chamado authenticate e outro\n    chamado get_user.\n\n    Os parametros de authenticate ficam a critério do método post.\n\n    O padrão é receber uma requisição POST enviando dados no formato JSON.\n    Esses dados são empacotados no argumento kwargs do método authenticate.\n\n    para identificar o usuário é necessário realizar a consulta utilizando\n    um ID.\n    \"\"\"\n\n    @staticmethod\n    def authenticate(*args, **kwargs):\n        \"\"\"Método para autenticação, aqui utilizei uma classe chamada\n        Users implementada com o ORM peewee e uma simples regra de \n        autenticação apresentada pelo Eduardo Mendes.\n        link: https://www.youtube.com/watch?v=ieGA91ExOH0\n\n        Returns:\n            Users: dicionário contendo id para gerar o token.\n            OBS: é necessário possuir um atributo \"id\" para gerar o token.\n        \"\"\"\n        try:\n            if \"name\" in kwargs:\n                user = Users.get(Users.name == kwargs['name'])\n                return user\n            return None\n        except DoesNotExist as err:\n            return {\"erro\": f\"Usuário {kwargs['email']} não localizado\"}\n\n    @staticmethod\n    def get_user(*args, **kwargs):\n        \"\"\"Classe para resgatar usuario autenticado\n        utilizando a decodificação de um token.\n\n        Args:\n            user_id ([int]): identificador do usuário.\n\n        Returns:\n            Users: retorna usuário autenticado pelo Token.\n        \"\"\"\n        try:\n            if \"name\" in kwargs:\n                user = Users.get(Users.name == kwargs['name'])\n                return user\n            return None\n        except DoesNotExist as err:\n            return {\"erro\": f\"Usuário {kwargs['email']} não localizado\"}\n\n\n\napp = bottle.Bottle()\n\nconfigs = [\n    {'model': Auth, 'endpoint': '/auth', 'auth_name': \"auth\", 'refresh_name': 'refresh'},\n    {'model': AdminAuth, 'endpoint': '/admin/auth', 'auth_name': 'admin_auth', 'refresh_name': 'refresh_admin'}\n]\n\njwt = JWTPlugin(\"abcde\", configs=configs, payload=['id', 'email', 'name'])\n\napp.install(jwt)\n\n\n@auth_required\n@app.get(\"/user\")\ndef index(user):\n    return f\"Usuario: {user.name}\"\n\n\nif __name__ == \"__main__\":\n    Users.create_table()\n    user = Users(name=\"Afonso\", last_name=\"Medeiros\", email=\"afonso@afonso.com\", password=\"123456\", birthday=\"2020-01-01\")\n    user.gen_hash()\n    user.save()\n\n    app.run(debug=True, reloader=True)\n```\n\nTestes usando httpie:\n```sh\n$ http POST http://127.0.0.1:8080/auth email=afonso@afonso.com password=123456HTTP/1.0 200 OKContent-Length: 768Content-Type: application/jsonDate: Wed, 31 Mar 2021 20:51:49 GMT\nServer: WSGIServer/0.2 CPython/3.8.5\n\n{\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZm9uc29AYWZvbnNvLmNvbSIsIm5hbWUiOiJBZm9uc28iLCJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNk1Td2laVzFoYVd3aU9pSmhabTl1YzI5QVlXWnZibk52TG1OdmJTSXNJbTVoYldVaU9pSkJabTl1YzI4aWZRLjVHOUROZzZDSGR3dzlMVnE1S1B3Z2VBZkJxbi1FNUg3dndFVjczQ2RQbEkifQ.JK42DVJM4DVaNI5qmFzj92sAoUPC5Ir8Ya4H5L86aPU\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZm9uc29AYWZvbnNvLmNvbSIsIm5hbWUiOiJBZm9uc28iLCJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNk1Td2laVzFoYVd3aU9pSmhabTl1YzI5QVlXWnZibk52TG1OdmJTSXNJbTVoYldVaU9pSkJabTl1YzI4aWZRLjVHOUROZzZDSGR3dzlMVnE1S1B3Z2VBZkJxbi1FNUg3dndFVjczQ2RQbEkifQ.JK42DVJM4DVaNI5qmFzj92sAoUPC5Ir8Ya4H5L86aPU\"\n}\n\n$ http http://127.0.0.1:8080/user Authorization:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZm9uc29AYWZvbnNvLmNvbSIsIm5hbWUiOiJBZm9uc28iLCJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNk1Td2laVzFoYVd3aU9pSmhabTl1YzI5QVlXWnZibk52TG1OdmJTSXNJbTVoYldVaU9pSkJabTl1YzI4aWZRLjVHOUROZzZDSGR3dzlMVnE1S1B3Z2VBZkJxbi1FNUg3dndFVjczQ2RQbEkifQ.JK42DVJM4DVaNI5qmFzj92sAoUPC5Ir8Ya4H5L86aPU\nHTTP/1.0 200 OKContent-Length: 15\nContent-Type: text/html; charset=UTF-8\nDate: Wed, 31 Mar 2021 20:52:43 GMT\nServer: WSGIServer/0.2 CPython/3.8.5\n\nUsuario: Afonso\n\n$ http POST http://127.0.0.1:8080/auth/refresh Refresh-Jwt:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZm9uc29AYWZvbnNvLmNvbSIsIm5hbWUiOiJBZm9uc28iLCJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNk1Td2laVzFoYVd3aU9pSmhabTl1YzI5QVlXWnZibk52TG1OdmJTSXNJbTVoYldVaU9pSkJabTl1YzI4aWZRLjVHOUROZzZDSGR3dzlMVnE1S1B3Z2VBZkJxbi1FNUg3dndFVjczQ2RQbEkifQ.JK42DVJM4DVaNI5qmFzj92sAoUPC5Ir8Ya4H5L86aPU\nHTTP/1.0 200 OK\nContent-Length: 768\nContent-Type: application/json\nDate: Wed, 31 Mar 2021 21:02:49 GMT\nServer: WSGIServer/0.2 CPython/3.8.5\n\n{\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZm9uc29AYWZvbnNvLmNvbSIsIm5hbWUiOiJBZm9uc28iLCJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNk1Td2laVzFoYVd3aU9pSmhabTl1YzI5QVlXWnZibk52TG1OdmJTSXNJbTVoYldVaU9pSkJabTl1YzI4aWZRLjVHOUROZzZDSGR3dzlMVnE1S1B3Z2VBZkJxbi1FNUg3dndFVjczQ2RQbEkifQ.JK42DVJM4DVaNI5qmFzj92sAoUPC5Ir8Ya4H5L86aPU\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZm9uc29AYWZvbnNvLmNvbSIsIm5hbWUiOiJBZm9uc28iLCJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNk1Td2laVzFoYVd3aU9pSmhabTl1YzI5QVlXWnZibk52TG1OdmJTSXNJbTVoYldVaU9pSkJabTl1YzI4aWZRLjVHOUROZzZDSGR3dzlMVnE1S1B3Z2VBZkJxbi1FNUg3dndFVjczQ2RQbEkifQ.JK42DVJM4DVaNI5qmFzj92sAoUPC5Ir8Ya4H5L86aPU\"\n}\n```\n\nCódigo baseado na lib: https://github.com/agile4you/bottle-jwt\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/afonsomedeiros/jwt_bottle",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "JWT-Bottle",
    "package_url": "https://pypi.org/project/JWT-Bottle/",
    "platform": "",
    "project_url": "https://pypi.org/project/JWT-Bottle/",
    "project_urls": {
      "Homepage": "https://github.com/afonsomedeiros/jwt_bottle"
    },
    "release_url": "https://pypi.org/project/JWT-Bottle/2021.4.1/",
    "requires_dist": [
      "python-jose",
      "pycrypto (==2.6.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Plugin to make authentication with JWT.",
    "version": "2021.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9942771,
  "releases": {
    "2020.7.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6769387f7be5c948069c7ea9966ec97c8954dfba08a8b27bc9d0394c4985b9fc",
          "md5": "7af23da377a149fb7b0ad759b4c9ddd4",
          "sha256": "3fb7398cfef424392812391584f080940ea23123022582e3ec3964b0a01045dc"
        },
        "downloads": -1,
        "filename": "JWT_Bottle-2020.7.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7af23da377a149fb7b0ad759b4c9ddd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6941,
        "upload_time": "2020-07-12T22:27:01",
        "upload_time_iso_8601": "2020-07-12T22:27:01.745561Z",
        "url": "https://files.pythonhosted.org/packages/67/69/387f7be5c948069c7ea9966ec97c8954dfba08a8b27bc9d0394c4985b9fc/JWT_Bottle-2020.7.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c8718d0c36e365bfafc23c5e130e20b17a16b8e8660be49a460b6bf9f46fed6",
          "md5": "8534c703b577453907dacb34e3581a39",
          "sha256": "244f6e16e6cd6a365b4cebdec60b9e674eb44d61159ceca7862f268eb6928d43"
        },
        "downloads": -1,
        "filename": "JWT-Bottle-2020.7.12.tar.gz",
        "has_sig": false,
        "md5_digest": "8534c703b577453907dacb34e3581a39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5917,
        "upload_time": "2020-07-12T22:27:04",
        "upload_time_iso_8601": "2020-07-12T22:27:04.180974Z",
        "url": "https://files.pythonhosted.org/packages/1c/87/18d0c36e365bfafc23c5e130e20b17a16b8e8660be49a460b6bf9f46fed6/JWT-Bottle-2020.7.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cae825a1af76d80747802ed8b51482457f77209b124e849516e951d94d7d02f",
          "md5": "2dca221e438c90fb14657eebb3423995",
          "sha256": "71fc18e300c10803467346744d1fdd291ced663f5de201686a25568d5c76e81f"
        },
        "downloads": -1,
        "filename": "JWT_Bottle-2021.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dca221e438c90fb14657eebb3423995",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6991,
        "upload_time": "2021-01-04T03:44:34",
        "upload_time_iso_8601": "2021-01-04T03:44:34.416721Z",
        "url": "https://files.pythonhosted.org/packages/8c/ae/825a1af76d80747802ed8b51482457f77209b124e849516e951d94d7d02f/JWT_Bottle-2021.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3838cca4aebeebcc31abc761d1f0dff2de7c463d6f7aba4cedbf2b1bb2739573",
          "md5": "fef9cf9a861048a8cffa99faf4b977a1",
          "sha256": "72bbfe5c7ce58095a36ed74bb234222478f1982626e7f840cde916e86fe7757e"
        },
        "downloads": -1,
        "filename": "JWT-Bottle-2021.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fef9cf9a861048a8cffa99faf4b977a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6014,
        "upload_time": "2021-01-04T03:44:35",
        "upload_time_iso_8601": "2021-01-04T03:44:35.514917Z",
        "url": "https://files.pythonhosted.org/packages/38/38/cca4aebeebcc31abc761d1f0dff2de7c463d6f7aba4cedbf2b1bb2739573/JWT-Bottle-2021.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0304442d6ab25449efb9f1acd882593f582ee5bd2aaad862f8d5dcf04e74269",
          "md5": "9bdd880f11d14c39a9684dbbc656f2e8",
          "sha256": "3830ace8ecd801b53c98f2396b9b9d6d0f3e175545da43398986a7ed64994bbc"
        },
        "downloads": -1,
        "filename": "JWT_Bottle-2021.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bdd880f11d14c39a9684dbbc656f2e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8414,
        "upload_time": "2021-04-01T03:19:00",
        "upload_time_iso_8601": "2021-04-01T03:19:00.652329Z",
        "url": "https://files.pythonhosted.org/packages/c0/30/4442d6ab25449efb9f1acd882593f582ee5bd2aaad862f8d5dcf04e74269/JWT_Bottle-2021.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51d91294b917bff46d65fe99fa791e1330c976ab49ecbd453edf6e10db1558eb",
          "md5": "27f3cf2f058382619f28d0f7e66c824f",
          "sha256": "8986adc73f0dc151900d0be6a485a8a941d58b695ac9c28fc245d16e56b781ed"
        },
        "downloads": -1,
        "filename": "JWT-Bottle-2021.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "27f3cf2f058382619f28d0f7e66c824f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7861,
        "upload_time": "2021-04-01T03:19:02",
        "upload_time_iso_8601": "2021-04-01T03:19:02.397088Z",
        "url": "https://files.pythonhosted.org/packages/51/d9/1294b917bff46d65fe99fa791e1330c976ab49ecbd453edf6e10db1558eb/JWT-Bottle-2021.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0304442d6ab25449efb9f1acd882593f582ee5bd2aaad862f8d5dcf04e74269",
        "md5": "9bdd880f11d14c39a9684dbbc656f2e8",
        "sha256": "3830ace8ecd801b53c98f2396b9b9d6d0f3e175545da43398986a7ed64994bbc"
      },
      "downloads": -1,
      "filename": "JWT_Bottle-2021.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bdd880f11d14c39a9684dbbc656f2e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8414,
      "upload_time": "2021-04-01T03:19:00",
      "upload_time_iso_8601": "2021-04-01T03:19:00.652329Z",
      "url": "https://files.pythonhosted.org/packages/c0/30/4442d6ab25449efb9f1acd882593f582ee5bd2aaad862f8d5dcf04e74269/JWT_Bottle-2021.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51d91294b917bff46d65fe99fa791e1330c976ab49ecbd453edf6e10db1558eb",
        "md5": "27f3cf2f058382619f28d0f7e66c824f",
        "sha256": "8986adc73f0dc151900d0be6a485a8a941d58b695ac9c28fc245d16e56b781ed"
      },
      "downloads": -1,
      "filename": "JWT-Bottle-2021.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "27f3cf2f058382619f28d0f7e66c824f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7861,
      "upload_time": "2021-04-01T03:19:02",
      "upload_time_iso_8601": "2021-04-01T03:19:02.397088Z",
      "url": "https://files.pythonhosted.org/packages/51/d9/1294b917bff46d65fe99fa791e1330c976ab49ecbd453edf6e10db1558eb/JWT-Bottle-2021.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}