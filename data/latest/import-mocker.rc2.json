{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python Import Mocker\n\nThe [Python Import Mocker](https://pypi.org/project/import-mocker/) provides an\neasy way to import a module and mock its dependencies in an isolated way.\nThe mocking of the dependencies will apply only to the current import and will\nnot affect the global module namespace.\n\n## Quick Start\n\n### Install\n\n```bash\npip install import-mocker\n```\n\n### Mock imports\n\n```py\nfrom import_mocker import ImportMocker\n\nmodules_to_mock = ['B', 'C']\nimocker = ImportMocker(modules_to_mock)\nA = imocker.import_module('A')\n```\n\n### Verify behavior on mocked modules\n\n```py\nmocks = imocker.get_mocks()\nb_mock = mocks['B']\nb_mock.some_method.assert_called()\n```\n\n### Reset mocked modules\n\n```py\nimocker.reset_mock('B')\nimocker.reset_mocks()\n```\n\n### Execute code within a mocked module context\n\nThis is useful when the code to execute will perform an inline `import`.\n\n```py\nimocker.execute(lambda: function_that_calls_inline_import(x, y, z=4))\n```\n\n## Rationale\n\nWhen unit testing in Python we couldn't find a way to easily mock imports\nwithout affecting the global scope and without having to carefully mock and\nde-mock the imported modules.\n\nThis was a problem for us because we needed to test some files, and then mock\nthose same files when testing other files, and we can't control the order in\nwhich the tests are executed. Here is an example:\n\n```py\n# ***** SOURCE CODE *****\n# FILE: A.py\nimport B\nimport C\nimport D\n...\n\n# FILE: B.py\nimport C\nimport D\n...\n\n\n# ***** TESTS *****\n# FILE: test_a.py\n# We need to mock B, and C, and the real version of D\nfrom importlib import reload\nfrom unittest import mock\nsys.modules[\"B\"] = mock.Mock()\nsys.modules[\"C\"] = mock.Mock()\n\nimport D\nD = reload(D) # Make sure we get the real module if D was mocked before\n\nimport A # this line recursively imports B, C, and D\nA = reload(A) # Make sure the correct mocks are used if A was mocked before\n\n...\n\n# FILE: test_b.py\n# We need to mock only D, and need the real version of C\nfrom importlib import reload\nfrom unittest import mock\nsys.modules[\"D\"] = mock.Mock()\n\nimport C # Make sure the correct mocks are used if C was mocked before\nC = reload(C)\nimport B # Make sure the correct mocks are used if B was mocked before\nB = reload(B)\n\n```\n\nAs it can be seen, this can get very verbose, especially when dependencies start\nto grow and we need different configurations for mocking.\n\nThis is why we created Python Import Mocker, to greately simplify this process\nwithout having to reinvent the wheel every time. We hope you find this as useful\nas we did ðŸ˜€.\n\n## Example\n\nFollowing the example given in the [previous section](#Rationale),\nhere is how the Python Import Mocker would be used:\n\n```py\n# ***** SOURCE CODE *****\n# FILE: A.py\nimport B\nimport C\nimport D\n...\n\n# FILE: B.py\nimport C\nimport D\n...\n\n\n# ***** TESTS USING PYTHON IMPORT MOCKER *****\n# FILE: test_a.py\n# We need to mock B and C\nfrom unittest import mock\nfrom import_mocker import ImportMocker\n\nmodules_to_mock = ['B', 'C']\nimocker = ImportMocker(modules_to_mock)\nA = imocker.import_module('A')\n...\n\ndef my_test_01():\n    # Do something and verify B and C\n    imocker.reset_mocks()\n    execute_code()\n    mocks = imocker.get_mocks()\n    b_mock = mocks['B']\n    b_mock.some_method.assert_called()\n    ...\n    \n    # Do something else and verify C\n    imocker.reset_mock('C')\n    execute_mode_code()\n    c_mock = imocker.get_mock('C')\n    c_mock.some_method.assert_called_once()\n    ...\n...\n\n# FILE: test_b.py\n# We need to mock only D, and need the real version of C\nfrom import_mocker import ImportMocker\n\nmodules_to_mock = ['D']\nimocker = ImportMocker(modules_to_mock)\nB = imocker.import_module('B')\n...\n\n```\n\n**Note:** You can find more practical examples in the test files.\n\n## API\n\nThese are the functions provided by the `ImportMocker` class.\n\n### `import_module(module_to_import: str)`\n\nImports `module_to_import` inside a context that that returns the mocked modules\nwhen they are imported, all other imports will work normally.\n\nIf `module_to_import` was previously imported, then it's reloaded so that its\nimported modules can be mocked again.\n\n### `import_modules(modules_to_import: List[str])`\n\nUses the same logic of `import_module` but receives a list of module names to\nimport and returns a list with the imported modules in the same order.\n\n### `execute(function, *args, **kwargs)`\n\nExecutes a function inside a context that returns the mocked modules when they\nare imported, all other imports will work normally. `*args` and `**kwargs` are the\narguments to pass down to `function`.\n\nThis is useful when you are testing code that has `import` statements inside\na function, and you want to mock those imports.\n\nIMPORTANT: If a module has been previously imported outside the current instance\nof the `ImportMocker`, it will not be re imported when executing the function.\n\n### `get_mocks()`\n\nGets a copy of the dictionary containing all the mocked modules.\n\n### `get_mock(mock_name: str)`\n\nGets the specified mocked module.\n\n### `reset_mocks()`\n\nResets all the mocked modules to their original state.\n\n### `reset_mock(mock_name: str)`\n\nResets the specified mocked module to its original state.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit <https://cla.opensource.microsoft.com>.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microsoft/python-import-mocker",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "import-mocker",
    "package_url": "https://pypi.org/project/import-mocker/",
    "platform": null,
    "project_url": "https://pypi.org/project/import-mocker/",
    "project_urls": {
      "Bug Tracker": "https://github.com/microsoft/python-import-mocker/issues",
      "Homepage": "https://github.com/microsoft/python-import-mocker"
    },
    "release_url": "https://pypi.org/project/import-mocker/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Easily import a module and mock its dependencies in an isolated way.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13844828,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "348cd2499f97c60bc51fd0f5aa50b48cfaecda2c65cb197f9d668a9e3a75bdb8",
          "md5": "3480b67c6712de45ff3aa6420eb4caf8",
          "sha256": "56dd2ddd0ce13cf8f3bac16110788742cab19489e4ad7bb57b32707bcec5b0f0"
        },
        "downloads": -1,
        "filename": "import_mocker-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3480b67c6712de45ff3aa6420eb4caf8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 5824,
        "upload_time": "2022-03-23T17:28:40",
        "upload_time_iso_8601": "2022-03-23T17:28:40.576295Z",
        "url": "https://files.pythonhosted.org/packages/34/8c/d2499f97c60bc51fd0f5aa50b48cfaecda2c65cb197f9d668a9e3a75bdb8/import_mocker-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "909bcb720cbbe8b9b5228aaaa7f694ad0f2f4a17da3ac2d568ef4c84c925ba50",
          "md5": "5988ad685ac322a5017d36554b56b4ce",
          "sha256": "0e1d07587d69bfc474e593e39f216f08022a8fc7c2e48cd30ef7e897e17e9ef0"
        },
        "downloads": -1,
        "filename": "import-mocker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5988ad685ac322a5017d36554b56b4ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5252,
        "upload_time": "2022-03-23T17:28:41",
        "upload_time_iso_8601": "2022-03-23T17:28:41.998402Z",
        "url": "https://files.pythonhosted.org/packages/90/9b/cb720cbbe8b9b5228aaaa7f694ad0f2f4a17da3ac2d568ef4c84c925ba50/import-mocker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6be9be903a6ec47660ab08b354a944f19eaa22b5669eb7dbf2738d8dea0a9023",
          "md5": "a1253d75c54b428ebfb448d2b56e1991",
          "sha256": "5a22a5efce86f1a83b83c72e2d582229adb26a94f3dd61b65d41f498744623a0"
        },
        "downloads": -1,
        "filename": "import_mocker-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1253d75c54b428ebfb448d2b56e1991",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 5892,
        "upload_time": "2022-05-17T18:31:05",
        "upload_time_iso_8601": "2022-05-17T18:31:05.171173Z",
        "url": "https://files.pythonhosted.org/packages/6b/e9/be903a6ec47660ab08b354a944f19eaa22b5669eb7dbf2738d8dea0a9023/import_mocker-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae6d109bf8ffe0a5ce87b6d00a0b8e378273ba04aa84ad063c96fe08a18c77f7",
          "md5": "2df41d4dbd31a1f8486191cbbdc7148e",
          "sha256": "a56b3a6a037f42d85bbdd73fc4b6beecd32ba33fecdc4c1b2f424ca20a522c47"
        },
        "downloads": -1,
        "filename": "import-mocker-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2df41d4dbd31a1f8486191cbbdc7148e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5304,
        "upload_time": "2022-05-17T18:31:06",
        "upload_time_iso_8601": "2022-05-17T18:31:06.836764Z",
        "url": "https://files.pythonhosted.org/packages/ae/6d/109bf8ffe0a5ce87b6d00a0b8e378273ba04aa84ad063c96fe08a18c77f7/import-mocker-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6be9be903a6ec47660ab08b354a944f19eaa22b5669eb7dbf2738d8dea0a9023",
        "md5": "a1253d75c54b428ebfb448d2b56e1991",
        "sha256": "5a22a5efce86f1a83b83c72e2d582229adb26a94f3dd61b65d41f498744623a0"
      },
      "downloads": -1,
      "filename": "import_mocker-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a1253d75c54b428ebfb448d2b56e1991",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 5892,
      "upload_time": "2022-05-17T18:31:05",
      "upload_time_iso_8601": "2022-05-17T18:31:05.171173Z",
      "url": "https://files.pythonhosted.org/packages/6b/e9/be903a6ec47660ab08b354a944f19eaa22b5669eb7dbf2738d8dea0a9023/import_mocker-0.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae6d109bf8ffe0a5ce87b6d00a0b8e378273ba04aa84ad063c96fe08a18c77f7",
        "md5": "2df41d4dbd31a1f8486191cbbdc7148e",
        "sha256": "a56b3a6a037f42d85bbdd73fc4b6beecd32ba33fecdc4c1b2f424ca20a522c47"
      },
      "downloads": -1,
      "filename": "import-mocker-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2df41d4dbd31a1f8486191cbbdc7148e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 5304,
      "upload_time": "2022-05-17T18:31:06",
      "upload_time_iso_8601": "2022-05-17T18:31:06.836764Z",
      "url": "https://files.pythonhosted.org/packages/ae/6d/109bf8ffe0a5ce87b6d00a0b8e378273ba04aa84ad063c96fe08a18c77f7/import-mocker-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}