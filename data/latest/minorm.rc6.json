{
  "info": {
    "author": "Campos Ilya",
    "author_email": "camposylia@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "MinORM\n======\n\nA minimalistic ORM with basic features.\n\nInspired by Django ORM.\n\nWhat's the point?\n-----------------\nMinORM was designed as minimalistic ORM, to be as simple as possible.\nIt's not production-ready solution, rather a proof of concept. The goal is to demonstrate example of an ORM,\nmore-less applicable for usage, that could be created with python in a short term of time.\n\nUsage\n-----\nDB Connection\n*************\n\nEstablish connection to database by calling :code:`.connect()` method of :code:`connector` object, with certain db handler.\n\nConnecting to sqlite database:\n\n.. code:: python\n\n    from minorm import connector, SQLiteSpec\n\n    connector.connect(SQLiteSpec('example.db'))\n\nConnecting to postgresql database (requires psycopg2 to be installed):\n\n.. code:: python\n\n    from minorm import connector, PostgreSQLSpec\n\n    connection_string = \"host=localhost port=5432 dbname=mydb user=admin password=secret\"\n    connector.connect(PostgreSQLSpec(connection_string))\n\nClose connection by calling :code:`.disconnect()` method:\n\n.. code:: python\n\n    connector.disconnect()\n\nModels\n******\n\nCreate a model class that represents a single table in a database:\n\n.. code:: python\n\n    from minorm import Model\n    from minorm.fields import CharField, IntegerField\n\n    class Person(Model):\n        name = CharField(max_length=120)\n        age = IntegerField()\n\nIt's possible to create a new table in a database:\n\n.. code:: python\n\n    Person.create_table()\n\nOr to use existing one, by set table name in model meta:\n\n.. code:: python\n\n    class Book(Model):\n        title = CharField(max_length=90)\n\n        class Meta:\n            table_name = \"some_table\"\n\nIt's possible to drop a table:\n\n.. code:: python\n\n    Person.drop_table()\n\nCreate a new instance or update existing one in db by calling :code:`save` method:\n\n.. code:: python\n\n    person = Person()\n    person.name = \"John\" # set field values as attributes\n    person.age = 33\n    person.save()\n\n    book = Book(title=\"foobar\")  # or pass it in init method\n    book.save()\n\nRemove a row from db by calling :code:`delete` method:\n\n.. code:: python\n\n    person.delete()\n\nCreate a model with foreign relation by using :code:`ForeignKey` field:\n\n.. code:: python\n\n    class Book(Model):\n        title = CharField(max_length=90)\n        author = ForeignKey(Person)\n\nPass an instance of related model when saving a new one:\n\n.. code:: python\n\n    book = Book(title=\"foobar\", author=person)\n    book.save()\n\nQueryset methods\n****************\nUse queryset, accessible by model's :code:`qs` property, to perform db operations on multiple rows:\n\n:code:`filter(**lookups)`:\n    Filter query, result will contain only items that matches all lookups:\n\n    .. code:: python\n\n        # user type is \"member\" AND age > 18\n        filtered_qs = Person.qs.filter(user_type='member', age__gt=18)\n\n    List of supported lookup expressions:\n\n    - :code:`lt`, :code:`lte` - less than (or equal)\n    - :code:`gt`, :code:`gte` - greater than (or equal)\n    - :code:`neq` - not equal\n    - :code:`in` - checks if value is between given options\n    - :code:`startswith`, :code:`endswith`, :code:`contains` - check inclusion of a string\n\n    It's also possible to filter by foreign relation fields:\n\n    .. code:: python\n\n        qs = Book.qs.filter(author__name=\"Mark Twain\")  # will perform join of `author` table\n\n\n:code:`aswell(**lookups)`:\n    Make query result to include items that also matches lookups listed in the method:\n\n    .. code:: python\n\n        # age > 18 OR user is admin\n        filtered_qs = Person.qs.filter(age__gt=18).aswell(user_type=\"admin\")\n\n:code:`order_by(*fields)`:\n    Set ordering of queried rows. Use :code:`-` prefix to reverse order:\n\n    .. code:: python\n\n        Book.qs.order_by('created')  # for oldest to newest\n        Person.qs.order_by('-id')  # reverse ordering by id\n\nSlicing (limit number of row):\n    it's possible to limit number of selected rows by using slices:\n\n    .. code:: python\n\n        persons = Person.qs[:3]  # will limit results number to 3 items\n\n\n:code:`all()`:\n    Get a copy of the queryset:\n\n    .. code:: python\n\n        qs = Person.qs.filter(age=42)\n        new_qs = qs.all()  # a copy of filtered qs\n\n:code:`values(*fields)`:\n    Prepare qs to get rows as dictionaries with fields, passed to the method:\n\n    .. code:: python\n\n        qs = Book.qs.values('title', 'author__name')  # items will be dicts with this two keys\n\n:code:`exists()`:\n    Return boolean, that indicates presence of rows that match filters:\n\n    .. code:: python\n\n        Person.qs.filter(name=\"mike\").exists()  # True if there is such name, otherwise False\n        Book.qs.exists()  # check if there is at least one row in the table\n\n:code:`get(**lookups)`:\n    Get single row as an instance of the model class:\n\n    .. code:: python\n\n        person = Person.qs.get(id=7)  # model instance object\n        book = Book.qs.get(pk=7)  # you could use `pk` instead of pk field name\n\n    raises :code:`Model.DoesNotExists` if corresponding row not found in db,\n    and :code:`MultipleQueryResult` if more than one row matches query filters.\n\n:code:`fetch()`:\n    Get all rows as a list of namedtuple objects:\n\n    .. code:: python\n\n        persons = Person.qs.fetch()  # list of namedtuples\n        adults = Person.qs.filter(age__gte=18).fetch()\n\nIterating queryset:\n    Queryset supports iterator interface, so it's possible to iterate results:\n\n    .. code:: python\n\n        for adult in Persons.qs.filter(age__gte=18):\n            print(adult.pk, adult.name)  # each item is a model instance\n\n\n:code:`create(**field_values)`:\n    Create a new instance in db:\n\n    .. code:: python\n\n        person = Person.qs.create(name=\"John\", age=33)\n\n    is a shortcut for two calls:\n\n    .. code:: python\n\n        person = Person(name=\"John\", age=33)\n        person.save()\n\n:code:`update(**field_values)`:\n    Update field values of existing rows in db:\n\n    .. code:: python\n\n        Book.qs.filter(price__lt=200).update(price=250)\n\n\n:code:`delete()`:\n    Remove all rows of queryset from db:\n\n    .. code:: python\n\n        Product.qs.filter(created__lt=date(2020, 11, 10)).delete()\n\n:code:`bulk_create(instances)`:\n    Create multiple instances in one db query:\n\n    .. code:: python\n\n        Book.qs.bulk_create([\n            Book(title=\"foo\", author=1),\n            Book(title=\"bar\", author=2),\n            Book(title=\"baz\", author=1),\n        ])  # creates all these books in one query\n\n\n:code:`select_related(*fk_fields)`:\n    Prepare queryset to perform select query with join of foreign relation:\n\n    .. code:: python\n\n        for book in Book.qs.select_related('author'):\n            # without select_related call, each related object hits db\n            author = book.author\n            print(book.title, author.name)\n\nTransactions support\n********************\nIt's possible to perform multiple model/queryset operations in transaction by using `transaction` module:\n\n.. code:: python\n\n    from minorm import transaction\n\n    with transaction.atomic():\n        # all db operations inside `atomic` block will run in one transaction\n        author = Person.objects.create(name=\"Steven King\", age=19)\n        Book.objects.create(title=\"The Dark Tower: The Gunslinger\", author=author)\n\nIt's also possible to manually commit/rollback changes inside transaction block:\n\n.. code:: python\n\n    with transaction.atomic():\n        instance.save()  # instance is set for saving in transaction\n        if want_to_keep:\n            transaction.commit()  # permanently save instance in db\n        else:\n            transaction.rollback()  # remove instance from saving\n\n        # do more stuff if it's required\n\n\nTODO\n----\n* add more model fields\n* test Postgresql support\n* add basic aggregation functions (SUM, COUNT, etc)\n\nRunning tests\n-------------\nTo run tests, create virtual environment and then run:\n\n.. code:: bash\n\n    make test\n\nLicense\n-------\nThe MIT License (MIT)\n\n\nContributed by `Campos Ilya`_\n\n.. _Campos Ilya: https://github.com/EliasCampos\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EliasCampos/minorm",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minorm",
    "package_url": "https://pypi.org/project/minorm/",
    "platform": "",
    "project_url": "https://pypi.org/project/minorm/",
    "project_urls": {
      "Homepage": "https://github.com/EliasCampos/minorm"
    },
    "release_url": "https://pypi.org/project/minorm/0.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A minimalistic ORM with basic features.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9827930,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e61ae08b51c3d2282d2b5f8ad2205113d134084feb9ecf4034fa351a1a3518f",
          "md5": "fb57f85c63ca0c0c9684008d74875452",
          "sha256": "6ee0827a8b24e563ca573e4eed6e637ecdadf2ccda7fc2ddf41a0bde8c29dbbe"
        },
        "downloads": -1,
        "filename": "minorm-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb57f85c63ca0c0c9684008d74875452",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13712,
        "upload_time": "2021-01-02T22:45:05",
        "upload_time_iso_8601": "2021-01-02T22:45:05.759694Z",
        "url": "https://files.pythonhosted.org/packages/9e/61/ae08b51c3d2282d2b5f8ad2205113d134084feb9ecf4034fa351a1a3518f/minorm-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf992324b0cade681fa7cd3898c205cf28f1c938657a1d09d5662d438fdfb5a9",
          "md5": "f8659cb37138ada964e2281864cf8c95",
          "sha256": "7cb7a437acfbf392da4d4654030d4fc1e4286adf2d54fe8ffb26d7b168c0c3fa"
        },
        "downloads": -1,
        "filename": "minorm-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f8659cb37138ada964e2281864cf8c95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13669,
        "upload_time": "2021-01-02T22:45:07",
        "upload_time_iso_8601": "2021-01-02T22:45:07.511534Z",
        "url": "https://files.pythonhosted.org/packages/bf/99/2324b0cade681fa7cd3898c205cf28f1c938657a1d09d5662d438fdfb5a9/minorm-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "522bd4dad764b5cd8102e1ef6246af255027117b5d80c1824d88759490f66b21",
          "md5": "0e113c541f89c251dc510b6237796a27",
          "sha256": "4a95be469605f5aecc8f18114796d5bbceef079dd4beb6127d94c8cc48a5ab26"
        },
        "downloads": -1,
        "filename": "minorm-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e113c541f89c251dc510b6237796a27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14130,
        "upload_time": "2021-01-12T02:45:02",
        "upload_time_iso_8601": "2021-01-12T02:45:02.728412Z",
        "url": "https://files.pythonhosted.org/packages/52/2b/d4dad764b5cd8102e1ef6246af255027117b5d80c1824d88759490f66b21/minorm-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daba5c051ec119042c5594564619c1e6293a4dffd9730f5e8a886729437bf224",
          "md5": "00b765bdbb004dd6220fc02312e59191",
          "sha256": "5b63dda285ffa1857d4566ac58df8e5526a27fa3d6f4daa9efaff78e852cedbe"
        },
        "downloads": -1,
        "filename": "minorm-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00b765bdbb004dd6220fc02312e59191",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14095,
        "upload_time": "2021-01-12T02:45:04",
        "upload_time_iso_8601": "2021-01-12T02:45:04.266505Z",
        "url": "https://files.pythonhosted.org/packages/da/ba/5c051ec119042c5594564619c1e6293a4dffd9730f5e8a886729437bf224/minorm-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f08eeca52000b0fa2c6d2c1c72a6e04275b1421d37717d20b734d971146f458f",
          "md5": "e201bdf99b9d79782f61aa4ca9e70f8a",
          "sha256": "ac3759beb9651e14c9a078b45539fbe9526199432e84ddfa3a761033050d990b"
        },
        "downloads": -1,
        "filename": "minorm-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e201bdf99b9d79782f61aa4ca9e70f8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14517,
        "upload_time": "2021-01-16T12:18:11",
        "upload_time_iso_8601": "2021-01-16T12:18:11.906058Z",
        "url": "https://files.pythonhosted.org/packages/f0/8e/eca52000b0fa2c6d2c1c72a6e04275b1421d37717d20b734d971146f458f/minorm-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9ff8d0158ccec1fdb6303f9f67a8db67f8660f864b250876aa266fc8994ad76",
          "md5": "2bb2d4e4a09af387593327de342d629a",
          "sha256": "88a767d7a58913f060f07e27fda2bc4a2ab2588add80ea51d95559d0ad57abe3"
        },
        "downloads": -1,
        "filename": "minorm-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2bb2d4e4a09af387593327de342d629a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14466,
        "upload_time": "2021-01-16T12:18:13",
        "upload_time_iso_8601": "2021-01-16T12:18:13.549020Z",
        "url": "https://files.pythonhosted.org/packages/b9/ff/8d0158ccec1fdb6303f9f67a8db67f8660f864b250876aa266fc8994ad76/minorm-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc7adfc5c7289bea1e2a16b804503dc5da8541ec007d15a5c2e2046e8975567c",
          "md5": "2b5bdb2597c4882b3aadbf48ef7f90b3",
          "sha256": "3d421f27925c3a89ffcf5ffe5222bf82a23ea690f1d4bd074e9f56e0f06f8d11"
        },
        "downloads": -1,
        "filename": "minorm-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b5bdb2597c4882b3aadbf48ef7f90b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14529,
        "upload_time": "2021-01-16T12:50:31",
        "upload_time_iso_8601": "2021-01-16T12:50:31.104585Z",
        "url": "https://files.pythonhosted.org/packages/dc/7a/dfc5c7289bea1e2a16b804503dc5da8541ec007d15a5c2e2046e8975567c/minorm-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c40f91f90042895c7a9140b4dc08fce643d4320bf0ad7d0fb9852f4768039cba",
          "md5": "085f4ed835f4927043acab36ff8c5274",
          "sha256": "f95b21257cfa5f9b31bf9f90e0b4f832793bc62cd8c5d69917b3be59b9f408d0"
        },
        "downloads": -1,
        "filename": "minorm-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "085f4ed835f4927043acab36ff8c5274",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14473,
        "upload_time": "2021-01-16T12:50:32",
        "upload_time_iso_8601": "2021-01-16T12:50:32.552537Z",
        "url": "https://files.pythonhosted.org/packages/c4/0f/91f90042895c7a9140b4dc08fce643d4320bf0ad7d0fb9852f4768039cba/minorm-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02775a1ebef34076a196819656cba66aa32178e7562034d960f22db34990cca3",
          "md5": "9fbe322b8c8fefdc747753b2576a95ce",
          "sha256": "6862fcfced58e3a8253cf2ca90e271d0f135b9817963f62491cafe04c4518b67"
        },
        "downloads": -1,
        "filename": "minorm-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fbe322b8c8fefdc747753b2576a95ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16948,
        "upload_time": "2021-01-23T13:37:13",
        "upload_time_iso_8601": "2021-01-23T13:37:13.900401Z",
        "url": "https://files.pythonhosted.org/packages/02/77/5a1ebef34076a196819656cba66aa32178e7562034d960f22db34990cca3/minorm-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "678c13f94fe0a3a0bfa90b76d8e67984e3d8e67a1cb3ab89523df2fb984fbc28",
          "md5": "c2b27d54f15a8a74380c8036de56b48e",
          "sha256": "7dd8e4d36bee59fd5c92cc90db2c8d7a6979b854790666f450a1f41de2420727"
        },
        "downloads": -1,
        "filename": "minorm-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2b27d54f15a8a74380c8036de56b48e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16924,
        "upload_time": "2021-01-23T13:37:15",
        "upload_time_iso_8601": "2021-01-23T13:37:15.544787Z",
        "url": "https://files.pythonhosted.org/packages/67/8c/13f94fe0a3a0bfa90b76d8e67984e3d8e67a1cb3ab89523df2fb984fbc28/minorm-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8860ef4d8c3f3b2d802467b9e415bf7d807cb2782cd74ebd1fc0ae9861021d93",
          "md5": "fd5045a2a7c7357ef3a01560d5e67671",
          "sha256": "24bf6405dd0439f47eb82fb5ad72bdb57473ae28d4f2d715e74d4581abd9f22c"
        },
        "downloads": -1,
        "filename": "minorm-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd5045a2a7c7357ef3a01560d5e67671",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17721,
        "upload_time": "2021-03-20T08:33:17",
        "upload_time_iso_8601": "2021-03-20T08:33:17.852064Z",
        "url": "https://files.pythonhosted.org/packages/88/60/ef4d8c3f3b2d802467b9e415bf7d807cb2782cd74ebd1fc0ae9861021d93/minorm-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7db0d256dd7ff6d9c6bed342a7815af3ed97e01a98fa5c7d92a439684f28cc20",
          "md5": "1c992afd463c7258c05db5de1e4bafda",
          "sha256": "308cb000b3017d478fb06731c6d20d8d5e2fcbe23f4674c80d8231a1da59eb5a"
        },
        "downloads": -1,
        "filename": "minorm-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1c992afd463c7258c05db5de1e4bafda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17442,
        "upload_time": "2021-03-20T08:33:19",
        "upload_time_iso_8601": "2021-03-20T08:33:19.448865Z",
        "url": "https://files.pythonhosted.org/packages/7d/b0/d256dd7ff6d9c6bed342a7815af3ed97e01a98fa5c7d92a439684f28cc20/minorm-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8860ef4d8c3f3b2d802467b9e415bf7d807cb2782cd74ebd1fc0ae9861021d93",
        "md5": "fd5045a2a7c7357ef3a01560d5e67671",
        "sha256": "24bf6405dd0439f47eb82fb5ad72bdb57473ae28d4f2d715e74d4581abd9f22c"
      },
      "downloads": -1,
      "filename": "minorm-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd5045a2a7c7357ef3a01560d5e67671",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17721,
      "upload_time": "2021-03-20T08:33:17",
      "upload_time_iso_8601": "2021-03-20T08:33:17.852064Z",
      "url": "https://files.pythonhosted.org/packages/88/60/ef4d8c3f3b2d802467b9e415bf7d807cb2782cd74ebd1fc0ae9861021d93/minorm-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7db0d256dd7ff6d9c6bed342a7815af3ed97e01a98fa5c7d92a439684f28cc20",
        "md5": "1c992afd463c7258c05db5de1e4bafda",
        "sha256": "308cb000b3017d478fb06731c6d20d8d5e2fcbe23f4674c80d8231a1da59eb5a"
      },
      "downloads": -1,
      "filename": "minorm-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1c992afd463c7258c05db5de1e4bafda",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17442,
      "upload_time": "2021-03-20T08:33:19",
      "upload_time_iso_8601": "2021-03-20T08:33:19.448865Z",
      "url": "https://files.pythonhosted.org/packages/7d/b0/d256dd7ff6d9c6bed342a7815af3ed97e01a98fa5c7d92a439684f28cc20/minorm-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}