{
  "info": {
    "author": "pye, Sean",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "dinkum\n======\n\nTools for interacting with ‘dinkum binary data’ formatted files.\n\nInstallation:\n=============\n\n-  install conda/miniconda\n-  clone the repository onto your computer and cd into the directory\n\nIf you want to install dinkum environment.\n\n::\n\n   -- from inside the cloned repository directory run `conda env create -f environment.yml`, it will read environment.yml\n\nand automatically install the dependencies, and create environment\nliberdade\n\n::\n\n   -- if dinkum env already exist, use `conda env update -f=environment.yml` for update environment dependencies\n\n   -- source activate dinkum\n\nIf you want to install dinkum as library\n\n::\n\n   pip install git+https://gitlab.oceantrack.org/ocean-gliders-canada/dinkum.git\n\nUsage:\n======\n\nFirst import the library\n\n``import dinkum``\n\n| **dinkum2ascii**\n| Decode a Dinkum Binary Data file or all Dinkum Binary Data under the\n  specific directory. and convert it to ascii file into the given\n  output_dir\n  ``dinkum.dinkum2ascii(sample_file_directory_path, cache_directory_path, output_path)``\n\n| **dinkum2dicts**\n| Decode a Dinkum Binary Data file or all Dinkum Binary Data under the\n  specific directory.\n| Return a list of python dictionaries, which looks like {‘cache’:cache,\n  ‘data’:data, ‘header’:header}\n| ``res = dinkum.dinkum2dicts(sample_file_directory_path, cache_path)``\n| res looks like [dict1, dict2, dict3] (if under input dir has three\n  Dinkum Binary files)\n| dict1 looks like\n| {\n| \\* ‘cache’: (list)[ - {‘index’: ‘0’, ‘unit’: ‘cc’, ‘sensor_name’:\n  ‘c_ballact_bpumped’, ‘transmitted’: ‘T’, number_of_bytes’: ‘4’,\n  ‘sensor_number’: ‘60’},\n| - {‘index’: ‘1’, ‘unit’: ‘x’, ‘sensor_name’: ‘c_ballact_bpumped’,\n  ‘transmitted’: ‘T’, ‘number_of_bytes’: ‘4’, ‘sensor_number’: ‘117’},\n| - …\n| ],\n| \\* ‘data’: (list) [\n| - [233.0, ‘NaN’, ‘NaN’, 0.0, ‘NaN’,‘NaN’, 2, …],\n| - [‘NaN’, ‘NaN’, ‘NaN’, 0.0, ‘NaN’,‘NaN’, ‘NaN’, …],\n| - …\n| ],\n| \\* ‘header’: (dict){\n| - ‘all_sensors’: ‘F’,\n| - ‘dbd_lable’: ‘DBD(dinkum_library_data)file’,\n| - ‘encoding_ver’: ‘5’,\n| - …\n| }\n\n}\n\n| **dinkum2pandas**\n| Decode a Dinkum Binary Data file or all Dinkum Binary Data under the\n  specific directory.\n| Return a list of pandas dataframe, column names format\n  sensor_name(unit)\n| with_unit (bool parameter, default set to false): whether the output\n  pandas with unit\n| appending (bool parameter, default set to false): whether the merge\n  output pandas together\n| (flight files merge with flight files, and sci files merge with sci\n  files)\n| if appending set to True, then will return two pandas:\n| one for all flight flies pandas merge together, and one for all sci\n  files merge together\n| ``res = dinkum.dinkum2pandas(sample_file_directory_path, cache_path, with_unit=False, appending=False)``\n| res looks like [df1, df2, df3] (if under input dir has three Dinkum\n  Binary files)\n| each dataframe looks like:\n\n== ================== ============== ============== =\n\\  sci_m_present_time sci_water_cond sci_water_temp …\n== ================== ============== ============== =\n0  timestamp          s/m            degc           …\n1  1528669160.1608582 2.9354474656   7.356734       …\n…  …                  …              …              …\n== ================== ============== ============== =\n\n| **dbd_asc2dict** Conver DBD asc file to python dictionary, which looks\n  like {‘data’: dstruct, ‘meta’: meta}\n| column_output=[] to specified the coloumns of data in the result\n  (include all coloumns by default)\n| ``res = dbd_asc2dict(dbd_asc_name, column_output=[])``\n| res looks like\n| { \\* ‘data’: (list)[ - [‘2’, ‘233’, ‘0’, ‘-1’, …], - [‘NaN’, ‘NaN’,\n  ‘NaN’, ‘NaN’, …], - … ],\n| \\* ‘meta’: (dict){ - ‘num_segments’: ‘1’, - ‘all_sensor’: ‘1’, -\n  ‘dbd_label’: ‘DBD_SAC’, - ‘columns’: (list)[ - [‘cc_bpump_mode’,\n  ‘cc_bpump_value’, ‘cc_depth_state_mode’, ‘cc_final_bpump_value’, …], -\n  [‘enum’, ‘X’, ‘enum’, ‘enum’, ‘X’, ‘enum’, …], - [‘1’, ‘4’, ‘1’, ‘1’,\n  ‘4’, ‘1’, …] ] - ….\n\n::\n\n   }\n\n}\n\n| **dinkumMergeAscii**\n| Merge flight file and sci file by timestamp\n| Files that need to merge should have same file name but different\n  extension\n| ``res = dinkumMergeAscii(source_directory_or_file_list, output_directory=None)``\n| merge ascii flight file and sci file by timestamp (flight’s\n  m_present_time with sci’s sci_m_present_time)\n\n============== ==================\nm_present_time sci_m_present_time\n============== ==================\ndbd            ebd\nsbd            tbd\n============== ==================\n\n| eg: merge file1.dbd with file1.ebd, file2.sbd with file2.tbd\n| input could be a source_directory or a list include ascii file paths\n  (eg:[file1.dbd, file1.ebd])\n| return a list of python dictionaries\n| or convert dicts to ascii file into the given output_dir (if output\n  path was specified)\n| res looks like [dict1, dict2, dict3] (if under input dir has three\n  pair ascii flight & sci files)\n| dict looks like\n| { \\* ‘data’: (list)[ - [‘2’, ‘233’, ‘0’, ‘-1’, …], - [‘NaN’, ‘NaN’,\n  ‘NaN’, ‘NaN’, …], - … ],\n| \\* ‘meta’: (dict){ - ‘num_segments’: ‘1’, - ‘all_sensor’: ‘1’, -\n  ‘dbd_label’: ‘DBD_SAC’, - ‘columns’: (list)[ - [‘cc_bpump_mode’,\n  ‘cc_bpump_value’, ‘cc_depth_state_mode’, ‘cc_final_bpump_value’, …], -\n  [‘enum’, ‘X’, ‘enum’, ‘enum’, ‘X’, ‘enum’, …], - [‘1’, ‘4’, ‘1’, ‘1’,\n  ‘4’, ‘1’, …] ] - ….\n\n::\n\n   }\n\n}\n\n| **dinkumMergeBinary**\n| Input could be a source_directory or a list include file paths\n| First decode the binary file(s) under (source_directory/decode_result)\n| And then return a list of python dictionaries that merge flight file\n  with science file timestamp\n| or convert dicts to ascii file into the given output_dir (if output\n  path was specified)\n| merge binary files by timestamp (flight’s m_present_time with sci’s\n  sci_m_present_time)\n\n============== ==================\nm_present_time sci_m_present_time\n============== ==================\ndbd            ebd\nsbd            tbd\n============== ==================\n\n| ``res = dinkumMergeBinary(source_directory, cache_directory, destination_dictory)``\n| res looks like [dict1, dict2, dict3] (if under input dir has three\n  pair binary flight & sci files) dict looks like\n| { \\* ‘data’: (list)[ - [‘2’, ‘233’, ‘0’, ‘-1’, …], - [‘NaN’, ‘NaN’,\n  ‘NaN’, ‘NaN’, …], - … ],\n| \\* ‘meta’: (dict){ - ‘num_segments’: ‘1’, - ‘all_sensor’: ‘1’, -\n  ‘dbd_label’: ‘DBD_SAC’, - ‘columns’: (list)[ - [‘cc_bpump_mode’,\n  ‘cc_bpump_value’, ‘cc_depth_state_mode’, ‘cc_final_bpump_value’, …], -\n  [‘enum’, ‘X’, ‘enum’, ‘enum’, ‘X’, ‘enum’, …], - [‘1’, ‘4’, ‘1’, ‘1’,\n  ‘4’, ‘1’, …] ] - ….\n\n::\n\n   }\n\n}\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ceotr.ocean.dal.ca/",
    "keywords": "",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dinkum",
    "package_url": "https://pypi.org/project/dinkum/",
    "platform": null,
    "project_url": "https://pypi.org/project/dinkum/",
    "project_urls": {
      "Homepage": "https://ceotr.ocean.dal.ca/"
    },
    "release_url": "https://pypi.org/project/dinkum/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Some functions for interacting with [destmn]bd files in Python. Intent is to return a usable data object.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15511493,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98cfaa097c95667c2a89d459f1d262d1d2d65a5cfc2d4a9427c8d7ad85200e5c",
          "md5": "b1e140e817f6f2c752e4d0d2a0c419eb",
          "sha256": "aceb75914b13fb98fc414d9fadacb056464b502dda8695312006982ee40e91bf"
        },
        "downloads": -1,
        "filename": "dinkum-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b1e140e817f6f2c752e4d0d2a0c419eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 31768,
        "upload_time": "2022-10-24T16:51:14",
        "upload_time_iso_8601": "2022-10-24T16:51:14.179815Z",
        "url": "https://files.pythonhosted.org/packages/98/cf/aa097c95667c2a89d459f1d262d1d2d65a5cfc2d4a9427c8d7ad85200e5c/dinkum-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98cfaa097c95667c2a89d459f1d262d1d2d65a5cfc2d4a9427c8d7ad85200e5c",
        "md5": "b1e140e817f6f2c752e4d0d2a0c419eb",
        "sha256": "aceb75914b13fb98fc414d9fadacb056464b502dda8695312006982ee40e91bf"
      },
      "downloads": -1,
      "filename": "dinkum-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b1e140e817f6f2c752e4d0d2a0c419eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 31768,
      "upload_time": "2022-10-24T16:51:14",
      "upload_time_iso_8601": "2022-10-24T16:51:14.179815Z",
      "url": "https://files.pythonhosted.org/packages/98/cf/aa097c95667c2a89d459f1d262d1d2d65a5cfc2d4a9427c8d7ad85200e5c/dinkum-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}