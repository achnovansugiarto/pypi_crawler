{
  "info": {
    "author": "Muhammad Asad",
    "author_email": "muhammad.asad@kcl.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Efficient implementation of Haar-like features using Convolution\nThis repository implements Haar-Like features using convolutions in PyTorch. \n\nWithin the repository, implementation is provided for the following:\n- **2D Haar-Like features** for Grayscale images following method from: Viola, Paul, and Michael Jones. \"Rapid object detection using a boosted cascade of simple features.\" Proceedings of the 2001 IEEE computer society conference on computer vision and pattern recognition. CVPR 2001. Vol. 1. Ieee, 2001.\n![haar3d](https://raw.githubusercontent.com/masadcv/PyTorchHaarFeatures/master/data/diagrams-Haar2D.png)\n\n\n- **3D Haar-Like features** for 3D image data, e.g. medical images, following method from: Jung, Florian, Matthias Kirschner, and Stefan Wesarg. \"A generic approach to organ detection using 3d haar-like features.\" Bildverarbeitung f√ºr die Medizin 2013. Springer, Berlin, Heidelberg, 2013. 320-325.\n![haar3d](https://raw.githubusercontent.com/masadcv/PyTorchHaarFeatures/master/data/diagrams-HaarHor3D.png)\n\nBoth 2D and 3D versions of Haar-Like features have been implemented using convolutions in PyTorch and hence can be embedded into a given network where hand-crafted Haar-Like features are needed.\n\nReference code from https://github.com/rohitghosh/3DViolaJones helped us in initial understanding of Haar-Like features, which led to our implementation using PyTorch, where a few more features were added for 3d Haar-Like case. \n\n## Installation\nThis package can be installed as: \n\n`pip install torchhaarfeatures`\n\nor \n\n`pip install git+https://github.com/masadcv/PyTorchHaarFeatures`\n\n## Examples\nUsage examples are provided in example python files within the repository.\n\nA simple example (`example.py`) usage following a PyTorch usage format:\n\n```\nimport torchhaarfeatures\nimport torch\n\nhaarfeat3d = torchhaarfeatures.HaarFeatures3d(kernel_size=(9, 9, 9), stride=1)\noutput_haar3d = haarfeat3d(torch.rand(size=(1, 1, 128, 128, 128)))\n\nprint(output_haar3d.shape)\n\nhaarfeat2d = torchhaarfeatures.HaarFeatures2d(kernel_size=(9, 9), stride=1)\noutput_haar2d = haarfeat2d(torch.rand(size=(1, 1, 128, 128)))\nprint(output_haar2d.shape)\n```\n\nMore advanced usage embedded Haar-Like layers (`example2d_learning.py`) are feature extractor:\n```\nclass MyCatSegnentorHaarlike(nn.Module):\n    def __init__(\n        self,\n        kernel_size=6,\n        hidden_layers=[32, 16],\n        num_classes=2,\n        haar_padding=\"same\",\n    ):\n        super().__init__()\n        self.haarfeatureextactor = torchhaarfeatures.HaarFeatures2d(\n            kernel_size=kernel_size,\n            padding=haar_padding,\n            stride=1,\n            padding_mode=\"zeros\",\n        )\n        in_channels_current_layer = self.haarfeatureextactor.out_channels\n        \n        self.classifier = []\n        for hlayer in hidden_layers:\n            self.classifier.append(\n                nn.Sequential(\n                    *[\n                        nn.Conv2d(\n                            in_channels=in_channels_current_layer,\n                            out_channels=hlayer,\n                            kernel_size=1,\n                            stride=1,\n                            padding=\"same\",\n                        ),\n                        nn.ReLU(),\n                        nn.Dropout2d(p=0.3),\n                    ]\n                )\n            )\n            in_channels_current_layer = hlayer\n\n        # add final layer\n        self.classifier.append(\n            nn.Conv2d(\n                in_channels=in_channels_current_layer,\n                out_channels=num_classes,\n                kernel_size=1,\n                stride=1,\n            )\n        )\n        self.classifier = nn.Sequential(*self.classifier)\n\n    def forward(self, x):\n        x = self.haarfeatureextactor(x)\n        x = self.classifier(x)\n        return x   \n```\n\n![image](https://raw.githubusercontent.com/masadcv/PyTorchHaarFeatures/master/data/example2d_learning_figure_1.png)\n\n## Citation\nIf you use our code, please consider citing our paper:\n\n```\nAsad, Muhammad, Lucas Fidon, and Tom Vercauteren. \n\"ECONet: Efficient Convolutional Online Likelihood Network for Scribble-based Interactive Segmentation.\" \narXiv preprint arXiv:2201.04584 (2022).\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/masadcv/PyTorchHaarFeatures",
    "keywords": "haar-like 2d 3d medical features hand-crafted",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchhaarfeatures",
    "package_url": "https://pypi.org/project/torchhaarfeatures/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchhaarfeatures/",
    "project_urls": {
      "Homepage": "http://github.com/masadcv/PyTorchHaarFeatures"
    },
    "release_url": "https://pypi.org/project/torchhaarfeatures/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Haar-like features using PyTorch",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13190056,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e705a3784f1f73968a5404795905855e31bc65c9f787b3ae2b82939111babe00",
          "md5": "5780ba58fbf8b6f98eb477bb0b945ccc",
          "sha256": "5b441156e2be9915112cd0ca8c9fae710fcae683d506771929d68bc270ce0a0f"
        },
        "downloads": -1,
        "filename": "torchhaarfeatures-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5780ba58fbf8b6f98eb477bb0b945ccc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5658,
        "upload_time": "2022-03-16T04:06:55",
        "upload_time_iso_8601": "2022-03-16T04:06:55.164711Z",
        "url": "https://files.pythonhosted.org/packages/e7/05/a3784f1f73968a5404795905855e31bc65c9f787b3ae2b82939111babe00/torchhaarfeatures-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e705a3784f1f73968a5404795905855e31bc65c9f787b3ae2b82939111babe00",
        "md5": "5780ba58fbf8b6f98eb477bb0b945ccc",
        "sha256": "5b441156e2be9915112cd0ca8c9fae710fcae683d506771929d68bc270ce0a0f"
      },
      "downloads": -1,
      "filename": "torchhaarfeatures-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5780ba58fbf8b6f98eb477bb0b945ccc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5658,
      "upload_time": "2022-03-16T04:06:55",
      "upload_time_iso_8601": "2022-03-16T04:06:55.164711Z",
      "url": "https://files.pythonhosted.org/packages/e7/05/a3784f1f73968a5404795905855e31bc65c9f787b3ae2b82939111babe00/torchhaarfeatures-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}