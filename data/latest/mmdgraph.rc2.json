{
  "info": {
    "author": "Gareth W. Peters",
    "author_email": "\"Ragnar L. Gudmundarson\" <ragnarlevigud@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MMDGraph\n\n## What is this package for?\n\nThis package contains code to perform kernel two-sample hypothesis testing on samples of graphs. The code additionally allows for estimation of graphs from a real data matrix.\n\n\n## How to install\n\n<code> pip install MMDGraph </code>\n\n## Usage\n\nWe will go thorugh multiple scenariros: The case when the user has it own networkx graphs, when they are estimated from data matricies, using different kernels and using different MMD estimators.\n\n\n```python\nimport numpy as np\nimport networkx as nx\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport MMDGraph as mg\n```\n\n### Fit when H1 true, different edge probability\n\nStart by creating sample graphs\n\n\n```python\n\nn1 = n2 = 50\ng1 = [nx.fast_gnp_random_graph(30,0.3) for _ in range(n1)]\ng2 = [nx.fast_gnp_random_graph(30,0.4) for _ in range(n2)]\nfor j in range(len(g1)):\n    nx.set_node_attributes(g1[j],  {key: str(value) for key, value in dict(g1[j].degree).items()} , 'label')\nfor j in range(len(g2)):\n    nx.set_node_attributes(g2[j], {key: str(value) for key, value in dict(g2[j].degree).items()}, 'label')\n\n```\n\nPerformd mmd test using various kernels\n\n\n```python\n# Random Walk\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 6, c = 0.001)\nprint(f\" RW_ARKU_plus {MMD_out.p_values}\")\n```\n\n    C:\\Users\\User\\Code\\MMDGraph\\MMDGraph\\kernels\\RandomWalk.py:560: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      return scipy.sparse.csr_matrix(nx.adjacency_matrix(G ,weight=edge_attr), dtype=np.float64)\n    \n\n     RW_ARKU_plus {'MMD_u': 0.0}\n    \n\n\n```python\n# RW kernel with labels, we just need to find the unique labels first\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'RW_ARKL', mmd_estimators = 'MMD_u', r = 4, c = 1e-3,node_label = 'label',\n                                    unique_node_labels= set(np.concatenate([list(nx.get_node_attributes(g, 'label').values())for g in g1+g2])))\nprint(f\" RW_ARKL {MMD_out.p_values}\")\n\n```\n\n    Using label as node labels\n     RW_ARKL {'MMD_u': 0.0}\n    \n\n\n```python\n# GNTK kernel\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'GNTK', mmd_estimators = 'MMD_u', num_layers = 2, num_mlp_lauers = 2, jk = True, scale = 'uniform')\nprint(f\" GNTK {MMD_out.p_values}\")\n```\n\n    100%|███████████████████████████████████████████████████████████████████████████| 5050/5050.0 [00:11<00:00, 457.40it/s]\n    \n\n     GNTK {'MMD_u': 0.0}\n    \n\n\n```python\n# WWL kernel\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'WWL', mmd_estimators = 'MMD_u', discount = 0.1, h = 2, node_label = 'label')\nprint(f\" WWL {MMD_out.p_values}\")\n```\n\n    Using label as node labels\n     WWL {'MMD_u': 0.0}\n    \n\n\n```python\n# Deep Kernel without the deepness\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'DK', mmd_estimators = 'MMD_u', type = 'wl', wl_it = 4, node_label = 'label')\nprint(f\" ML DK {MMD_out.p_values}\")\n```\n\n    Using label as node labels\n     ML DK {'MMD_u': 0.0}\n    \n\n\n```python\n\n# Deep kernel with deepness, user has to install gensim, this might take some time, can try to increase number of workers\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'DK', mmd_estimators = 'MMD_u', type = 'wl', wl_it = 4, opt_type = 'word2vec', node_label = 'label', workers = 10)\nprint(f\" Deep DK {MMD_out.p_values}\")\n```\n\n    Using label as node labels\n     Deep DK {'MMD_u': 0.0}\n    \n\n\n```python\n# Grakel kernel example\nkernel = [{\"name\": \"weisfeiler_lehman\", \"n_iter\": 1}, {\"name\": \"vertex_histogram\"}]\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = kernel, mmd_estimators = 'MMD_u', node_label = 'label')\nprint(f\" WL {MMD_out.p_values}\")\n```\n\n    Using label as node labels\n    label\n     WL {'MMD_u': 0.0}\n    \n\n\n```python\n# Grakel propagation\nkernel = [ {\"name\":\"propagation\", 't_max':5, 'w':0.1, 'M':\"TV\"}]\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = kernel, mmd_estimators = 'MMD_u', node_label = 'label')\nprint(f\" propagation {MMD_out.p_values}\")\n\n```\n\n    Using label as node labels\n    label\n     propagation {'MMD_u': 0.0}\n    \n\n### Using different MMD estimators\n\nWe can also use other MMD estimators\n\n\n```python\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1, G2 = g2, kernel = 'RW_ARKU_plus', mmd_estimators = ['MMD_u', 'MMD_b', 'MMD_l', 'MONK_EST'], r = 2, c = 0.001, Q = 5)\nprint(f\" RW_ARKU_plus {MMD_out.p_values}\")\n```\n\n    C:\\Users\\User\\Code\\MMDGraph\\MMDGraph\\kernels\\RandomWalk.py:560: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      return scipy.sparse.csr_matrix(nx.adjacency_matrix(G ,weight=edge_attr), dtype=np.float64)\n    \n\n     RW_ARKU_plus {'MMD_u': 0.0, 'MMD_b': 0.0, 'MMD_l': 0.0, 'MONK_EST': 0.0}\n    \n\n### H1 true different weights\n\n\n```python\nn1 = n2 = 50\ng1_weights = [nx.fast_gnp_random_graph(30,0.3, seed = 42) for _ in range(n1)]\ng2_weight = [nx.fast_gnp_random_graph(30,0.3, seed = 50) for _ in range(n2)]\n\n\nfor j in range(len(g1_weights)):\n    nx.set_node_attributes(g1_weights[j],  {key: str(value) for key, value in dict(g1_weights[j].degree).items()} , 'label')\nfor j in range(len(g2_weight)):\n    nx.set_node_attributes(g2_weight[j], {key: str(value) for key, value in dict(g2_weight[j].degree).items()}, 'label')\n\n\ndef edge_dist(loc, scale ):\n    from scipy.stats import uniform\n    return np.random.normal(loc = loc, scale = scale)# uniform.rvs(size=1,  loc = loc , scale = scale)[0]\ndef add_weight(G, loc, scale ):\n    edge_w = dict()\n    for e in G.edges():\n        edge_w[e] = edge_dist(loc, scale)\n    return edge_w\n\n\nfor G in g1_weights:\n    nx.set_edge_attributes(G, add_weight(G, loc = 0.5, scale = 1), \"weight\")\nfor G in g2_weight:\n    nx.set_edge_attributes(G, add_weight(G, loc = 0.5, scale = 4), \"weight\")\n\n```\n\n\n```python\n# Random Walk\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_weights, G2 = g2_weight, kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 2, c = 0.001, edge_attr = 'weight')\nprint(f\" RW_ARKU_plus {MMD_out.p_values}\")\n```\n\n    Using weight as edge attributes\n     RW_ARKU_plus {'MMD_u': 0.0}\n    \n\n\n```python\n# Random Walk weights ignored, should not reject\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_weights, G2 = g2_weight, kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 2, c = 0.001, edge_attr = None)\nprint(f\" propagation {MMD_out.p_values}\")\n```\n\n     propagation {'MMD_u': 0.0}\n    \n\n\n```python\n# Grakel pyramid\nkernel = [{\"name\": \"pyramid_match\", \"L\": 6, \"d\":6, 'with_labels':False}]\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_weights, G2 = g2_weight, kernel = kernel, mmd_estimators = 'MMD_u', edge_attr = 'weight')\nprint(f\" pyramid_match {MMD_out.p_values}\")\n```\n\n    Using weight as edge attributes\n    None\n     pyramid_match {'MMD_u': 0.001}\n    \n\n\n```python\n# propagation, needs node attribute or label \nkernel = [ {\"name\":\"propagation\", 't_max':5, 'w':0.01, 'M':\"TV\"}]\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_weights, G2 = g2_weight, kernel = kernel, mmd_estimators = 'MMD_u', edge_attr = 'weight', node_label = 'label')\nprint(f\" propagation {MMD_out.p_values}\")\n```\n\n    Using weight as edge attributes\n    Using label as node labels\n    label\n     propagation {'MMD_u': 0.0}\n    \n\n ### H1 true different attributes\n\n\n```python\n\nn1 = n2 = 50\ng1_attr = [nx.fast_gnp_random_graph(30,0.2,seed=42) for _ in range(n1)]\ng2_attr = [nx.fast_gnp_random_graph(30,0.2,seed=50) for _ in range(n2)]\nfor j in range(len(g1_attr)):\n    nx.set_node_attributes(g1_attr[j], dict( ( (i, np.random.normal(loc = 0, scale = 0.1, size = (1,))) for i in range(len(g1_attr[j])) ) ), 'attr')\nfor j in range(len(g2_attr)):\n    nx.set_node_attributes(g2_attr[j], dict( ( (i, np.random.normal(loc = 0.1, scale = 0.1, size = (1,))) for i in range(len(g2_attr[j])) ) ), 'attr')\n\n```\n\n\n```python\n# Random Walk with weights and node attributes\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_attr, G2 = g2_attr, kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 4, c = 0.01, node_attr = 'attr')\nprint(f\" RW_ARKU_plus {MMD_out.p_values}\")\n```\n\n    Using attr as node attributes\n     RW_ARKU_plus {'MMD_u': 0.0}\n    \n\n\n```python\n# GNTK with node attributes\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_attr, G2 = g2_attr, kernel = 'GNTK', mmd_estimators = 'MMD_u', num_layers = 2, num_mlp_lauers = 2, jk = True, scale = 'uniform', node_attr = 'attr')\nprint(f\" GNTK {MMD_out.p_values}\")\n```\n\n    Using attr as node attributes\n    \n\n    100%|██████████████████████████████████████████████████████████████████████████| 5050/5050.0 [00:03<00:00, 1274.23it/s]\n    \n\n     GNTK {'MMD_u': 0.0}\n    \n\n\n```python\n# Grakel propagation\nkernel = [ {\"name\":\"propagation\", 't_max':5, 'w':0.1, 'M':\"L1\",'with_attributes':True}]\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_attr, G2 = g2_attr, kernel = kernel, mmd_estimators = 'MMD_u', discount = 0.1, h = 2, node_attr = 'attr')\nprint(f\" Propagation {MMD_out.p_values}\")\n```\n\n    Using attr as node attributes\n    attr\n     Propagation {'MMD_u': 0.0}\n    \n\n### Different edge labels\n\nThe RW kernel can take different edge labels\n\n\n```python\nn1 = n2 = 50\ng1_edge = [nx.fast_gnp_random_graph(30,0.2,seed=42) for _ in range(n1)]\ng2_edge = [nx.fast_gnp_random_graph(30,0.2,seed=50) for _ in range(n2)]\nfor j in range(len(g1_edge)):\n    nx.set_edge_attributes(g1_edge[j], {(i,k):np.random.choice(['a','b'], p = [0.6,0.4]) for i,k in g1_edge[j].edges }, 'edge_label')\nfor j in range(len(g2_edge)):\n    nx.set_edge_attributes(g2_edge[j], {(i,k):np.random.choice(['a','b'], p = [0.7,0.3]) for i,k in g2_edge[j].edges }, 'edge_label')\n\n\nfor j in range(len(g1_edge)):\n    nx.set_node_attributes(g1_edge[j], {i:np.random.choice(['a','b'], p = [0.6,0.4]) for i in range(g1_edge[j].number_of_nodes()) }, 'label')\nfor j in range(len(g2_edge)):\n    nx.set_node_attributes(g2_edge[j], {i:np.random.choice(['a','b'], p = [0.7,0.3]) for i in range(g2_edge[j].number_of_nodes()) }, 'label')\n\n\n\n\n```\n\n\n```python\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_edge, G2 = g2_edge, kernel = 'RW_ARKU_edge', mmd_estimators = 'MMD_u', r = 4, c = 1e-3,edge_label = 'label',\n                                    unique_edge_labels= ['a', 'b'])\nprint(f\" RW_ARKU_edge {MMD_out.p_values}\")\n\n```\n\n    Using label as edge labels\n    \n\n    C:\\Users\\User\\Code\\MMDGraph\\MMDGraph\\kernels\\RandomWalk.py:624: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      A[idx] = scipy.sparse.csr_matrix(nx.adjacency_matrix(G_tmp, weight=edge_attr), dtype=np.float64)\n    \n\n     RW_ARKU_edge {'MMD_u': 0.0}\n    \n\n# Directed Graphs\n\nThe RW kernel can take directed graphs\n\n\n\n\n```python\nn1 = n2 = 50\ng1_di = [nx.fast_gnp_random_graph(30,0.2,seed=42) for _ in range(n1)]\ng2_di = [nx.fast_gnp_random_graph(30,0.2,seed=50) for _ in range(n2)]\n\nfor j in range(len(g1_di)):\n    nx.set_node_attributes(g1_di[j], {i:np.random.choice(['a','b'], p = [0.6,0.4]) for i in range(g1_di[j].number_of_nodes()) }, 'label')\nfor j in range(len(g2_di)):\n    nx.set_node_attributes(g2_di[j], {i:np.random.choice(['a','b'], p = [0.7,0.3]) for i in range(g2_di[j].number_of_nodes()) }, 'label')\n\nfor j in range(len(g1_di)):\n    g1_di[j] = nx.DiGraph(g1_di[j])\nfor j in range(len(g2_di)):\n    g2_di[j] = nx.DiGraph(g2_di[j])\n\nfor j in range(len(g1_di)):\n    edges= list(g1_di[j].edges())\n    for e,u in edges:\n        if np.random.uniform() <0.3:\n            g1_di[j].remove_edge(e,u)\nfor j in range(len(g2_di)):\n    edges= list(g2_di[j].edges())\n    for e,u in edges:\n        if np.random.uniform() <0.4:\n            g2_di[j].remove_edge(e,u)\n\n\n\n\n\n```\n\n\n```python\nMMD_out = mg.MMD()\nMMD_out.fit(G1 = g1_di, G2 = g2_di, kernel = 'RW_ARKU', mmd_estimators = 'MMD_u', r = 4, c = 1e-3)\nprint(f\" RW_ARKU_edge {MMD_out.p_values}\")\n\n```\n\n    C:\\Users\\User\\Code\\MMDGraph\\MMDGraph\\kernels\\RandomWalk.py:540: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      A = nx.adjacency_matrix(G ,weight=self.edge_attr)# scipy.sparse.csr_matrix(nx.adjacency_matrix(G ,weight=edge_attr), dtype=np.float64)\n    \n\n     RW_ARKU_edge {'MMD_u': 0.002}\n    \n\n### Two data matrices different structure\nIt is possible to estimate graphs from data matrices\n\n\n```python\nG = nx.fast_gnp_random_graph(11, 0.25, seed = 42)\nassert nx.is_connected(G)\n\nfor e in G.edges():\n    if np.random.uniform() <0.1:\n        w = np.random.uniform(low = 0.1, high = 0.3)\n        G.edges[e[0], e[1]]['weight'] = -w\n    else:\n        w = np.random.uniform(low = 0.1, high = 0.3)\n        G.edges[e[0], e[1]]['weight'] = w\n\nA = np.array(nx.adjacency_matrix(G).todense())\nnp.fill_diagonal(A, np.sum(np.abs(A), axis = 1)+0.1)\n\nA_s = A.copy()\nA_s[7,4] = 0\nA_s[4,7] = 0\nA_s[5,2] = 0\nA_s[2,5] = 0\n\n\nX1 = np.random.multivariate_normal(np.zeros(11),np.linalg.inv(A), size = 5000)\nX2 = np.random.multivariate_normal(np.zeros(11),np.linalg.inv(A_s), size = 5000)\n```\n\n    C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_25260\\3751381554.py:12: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      A = np.array(nx.adjacency_matrix(G).todense())\n    \n\n\n```python\n# window size = 200 so 5000/200 = 25 graphs in each sample\n# Random Walk\nMMD_out = mg.MMD()\nMMD_out.estimate_graphs(X1,X2,window_size=200, alpha = np.exp(np.linspace(-5,-2,100)),beta = 0.5, nonparanormal=False,scale = False)\nMMD_out.fit( kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 5, c = 0.1, edge_attr = 'weight')\nprint(MMD_out.p_values)\n\n\n```\n\n    Using weight as edge attributes\n    \n\n    C:\\Users\\User\\Code\\MMDGraph\\MMDGraph\\kernels\\RandomWalk.py:560: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      return scipy.sparse.csr_matrix(nx.adjacency_matrix(G ,weight=edge_attr), dtype=np.float64)\n    \n\n    {'MMD_u': 0.0}\n    \n\n\n```python\n# We can set node labels as degree (or define our own labelling, see below)\nMMD_out = mg.MMD()\nkernel = [{\"name\": \"weisfeiler_lehman\", \"n_iter\": 2}, {\"name\": \"vertex_histogram\"}]\nMMD_out.estimate_graphs(X1,X2,window_size=400, alpha = np.exp(np.linspace(-5,-2,100)),beta = 0.5, nonparanormal=False,scale = False, set_labels=\"degree\")\nMMD_out.fit( kernel = kernel, mmd_estimators = 'MMD_u',  edge_attr = 'weight')\nprint(MMD_out.p_values)\n```\n\n    Using weight as edge attributes\n    Using label as node labels\n    label\n    {'MMD_u': 0.03}\n    \n\n\n```python\nnp.fill_diagonal(A_s,0)\nfig, ax = plt.subplots(2,2,figsize = (10,10))\npos = nx.kamada_kawai_layout(G, weight = None)\nnx.draw(G, pos = pos, ax = ax[0,0])\nnx.draw(nx.from_numpy_array(A_s), pos = pos, ax = ax[0,1])\nnx.draw(MMD_out.G1[3], pos = pos, ax = ax[1,0])\nnx.draw(MMD_out.G2[3], pos = pos, ax = ax[1,1])\nax[0,0].set_title(\"Sample 1 true precision structure\")\nax[0,1].set_title(\"Sample 2 true precision structure\")\nax[1,0].set_title(\"One estimated precision structure from sample 1\")\nax[1,1].set_title(\"One estimated precision structure from sample 2\")\n```\n\n\n\n\n    Text(0.5, 1.0, 'One estimated precision structure from sample 2')\n\n\n\n\n    \n![png](README_files/README_41_1.png)\n    \n\n\n### Two data matrices same structure different attributes\nIt is possible to estimate the graphs beforehand and apply a function to get node attributes\n\n\n```python\nG = nx.fast_gnp_random_graph(11, 0.25, seed = 42)\nassert nx.is_connected(G)\n\nfor e in G.edges():\n    if np.random.uniform() <0.1:\n        w = np.random.uniform(low = 0.1, high = 0.3)\n        G.edges[e[0], e[1]]['weight'] = -w\n    else:\n        w = np.random.uniform(low = 0.1, high = 0.3)\n        G.edges[e[0], e[1]]['weight'] = w\n\nA = np.array(nx.adjacency_matrix(G).todense())\nnp.fill_diagonal(A, np.sum(np.abs(A), axis = 1)+0.1)\n\n\nX1 = np.random.multivariate_normal(np.zeros(11),np.linalg.inv(A), size = 10000)\nX2 = np.random.multivariate_normal(np.ones(11),np.linalg.inv(A), size = 10000)\n```\n\n    C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_25260\\3274406453.py:12: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      A = np.array(nx.adjacency_matrix(G).todense())\n    \n\n\n```python\n# Random Walk, with attributes, should reject. , the class will use the node label name 'attr'\ndef attr_function(X):\n    return np.expand_dims(np.mean(X,axis = 0),axis=1)\n\nMMD_out = mg.MMD()\nMMD_out.estimate_graphs(X1,X2,window_size=400, alpha = np.exp(np.linspace(-5,-2,100)),beta = 0.5, nonparanormal=False,scale = False, set_attributes = attr_function)\nMMD_out.fit( kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 5, c = 0.1, edge_attr = 'weight', node_attr = 'attr')\nprint(MMD_out.p_values)\n```\n\n    Using weight as edge attributes\n    Using attr as node attributes\n    \n\n    C:\\Users\\User\\Code\\MMDGraph\\MMDGraph\\kernels\\RandomWalk.py:560: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n      return scipy.sparse.csr_matrix(nx.adjacency_matrix(G ,weight=edge_attr), dtype=np.float64)\n    \n\n    {'MMD_u': 0.0}\n    \n\n\n```python\n# If we do not give attributes in this case the test should not reject\nMMD_out_no_attr = mg.MMD()\nMMD_out_no_attr.fit(G1= MMD_out.G1, G2 = MMD_out.G2, kernel = 'RW_ARKU_plus', mmd_estimators = 'MMD_u', r = 5, c = 0.1, edge_attr = 'weight')\nprint(MMD_out_no_attr.p_values)\n```\n\n    Using weight as edge attributes\n    {'MMD_u': 0.332}\n    \n\n\n```python\n# We can also try to make a label function, has to be a dictionary, the class will use the node label name 'label'\ndef label_function(X):\n    m = np.mean(X,axis = 0)\n    return {i:str(np.round(m[i],1)) for i in range(len(m))}\n\nkernel = [{\"name\": \"weisfeiler_lehman\", \"n_iter\": 2}, {\"name\": \"vertex_histogram\"}]\nMMD_out = mg.MMD()\nMMD_out.estimate_graphs(X1,X2,window_size=400, alpha = np.exp(np.linspace(-5,-2,100)),beta = 0.5, nonparanormal=False,scale = False, set_labels= label_function)\nMMD_out.fit(kernel = kernel, mmd_estimators = 'MMD_u', node_label = 'label')\nprint(MMD_out.p_values)\n```\n\n    Using label as node labels\n    label\n    {'MMD_u': 0.0}\n    \n\n\n```python\n# We can also define labels using a dict\nlabel_dict = {'1':{j:i for j,i in enumerate(['a']*6 + ['b']*5)}, \n              '2':{j:i for j,i in enumerate(['a']*4 + ['b']*7)}}\nkernel = [{\"name\": \"weisfeiler_lehman\", \"n_iter\": 2}, {\"name\": \"vertex_histogram\"}]\nMMD_out = mg.MMD()\nMMD_out.estimate_graphs(X1,X2,window_size=400, alpha = np.exp(np.linspace(-5,-2,100)),beta = 0.5, nonparanormal=False,scale = False, set_labels= label_dict)\nMMD_out.fit(kernel = kernel, mmd_estimators = 'MMD_u', node_label = 'label')\nprint(MMD_out.p_values)\n```\n\n    Using label as node labels\n    label\n    {'MMD_u': 0.0}\n    \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MMDGraph",
    "package_url": "https://pypi.org/project/MMDGraph/",
    "platform": null,
    "project_url": "https://pypi.org/project/MMDGraph/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/MMDGraph/0.0.1/",
    "requires_dist": [
      "networkx>=2.7.1",
      "numpy~=1.21.0",
      "scikit-learn>=1.0.2",
      "scipy>=1.8.0",
      "tqdm>=4.63.1"
    ],
    "requires_python": ">=3.7",
    "summary": "A package for comparing two-sample of graphs",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15778593,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c68e81f7c402b2e338466370695c940dd76f938575c208aa785621ebc7e000d",
          "md5": "40b1d3ed0e0801f51617d9f022c81814",
          "sha256": "d6d89d7ffe22bc0c71d898825fa198e4431ef76981c029b94fbf7446bb153e1e"
        },
        "downloads": -1,
        "filename": "mmdgraph-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40b1d3ed0e0801f51617d9f022c81814",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28331,
        "upload_time": "2022-11-13T14:31:10",
        "upload_time_iso_8601": "2022-11-13T14:31:10.692543Z",
        "url": "https://files.pythonhosted.org/packages/1c/68/e81f7c402b2e338466370695c940dd76f938575c208aa785621ebc7e000d/mmdgraph-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b76fcffb68763ed2ea1232aa4b6f0ec5058e09cf0c22af93e7b92eba4143c20",
          "md5": "f1ab3d494370081eea3afc4073cce5fe",
          "sha256": "53749e1ecb4c8443575688330149692f96a53cbe33f3b52aed20cea1d55c007f"
        },
        "downloads": -1,
        "filename": "mmdgraph-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1ab3d494370081eea3afc4073cce5fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 330108,
        "upload_time": "2022-11-13T14:31:13",
        "upload_time_iso_8601": "2022-11-13T14:31:13.741443Z",
        "url": "https://files.pythonhosted.org/packages/3b/76/fcffb68763ed2ea1232aa4b6f0ec5058e09cf0c22af93e7b92eba4143c20/mmdgraph-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec833395b6a403613f3ed7d524719ddc31830bcda5a9f9642de18d3197e36add",
          "md5": "32d1c79c53bc2e385e405463e002323b",
          "sha256": "8feccf9d95783e0e2ba19fc8ab568e3c9fb056746910ccaf767a64d9270bd9ea"
        },
        "downloads": -1,
        "filename": "mmdgraph-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32d1c79c53bc2e385e405463e002323b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28217,
        "upload_time": "2022-11-15T16:58:14",
        "upload_time_iso_8601": "2022-11-15T16:58:14.580998Z",
        "url": "https://files.pythonhosted.org/packages/ec/83/3395b6a403613f3ed7d524719ddc31830bcda5a9f9642de18d3197e36add/mmdgraph-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b4d7c784a20c7de037801242fe9d21291dad029fb5a3346f6fc6aed60d854af",
          "md5": "2fc86aa6961561d8b270e5e11a7b8340",
          "sha256": "fd89ed85c340d5a0e3a67a2376cf99c52b428193d95aa692fd528efccd6d74ec"
        },
        "downloads": -1,
        "filename": "mmdgraph-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2fc86aa6961561d8b270e5e11a7b8340",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 476306,
        "upload_time": "2022-11-15T16:58:18",
        "upload_time_iso_8601": "2022-11-15T16:58:18.345629Z",
        "url": "https://files.pythonhosted.org/packages/3b/4d/7c784a20c7de037801242fe9d21291dad029fb5a3346f6fc6aed60d854af/mmdgraph-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec833395b6a403613f3ed7d524719ddc31830bcda5a9f9642de18d3197e36add",
        "md5": "32d1c79c53bc2e385e405463e002323b",
        "sha256": "8feccf9d95783e0e2ba19fc8ab568e3c9fb056746910ccaf767a64d9270bd9ea"
      },
      "downloads": -1,
      "filename": "mmdgraph-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "32d1c79c53bc2e385e405463e002323b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 28217,
      "upload_time": "2022-11-15T16:58:14",
      "upload_time_iso_8601": "2022-11-15T16:58:14.580998Z",
      "url": "https://files.pythonhosted.org/packages/ec/83/3395b6a403613f3ed7d524719ddc31830bcda5a9f9642de18d3197e36add/mmdgraph-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b4d7c784a20c7de037801242fe9d21291dad029fb5a3346f6fc6aed60d854af",
        "md5": "2fc86aa6961561d8b270e5e11a7b8340",
        "sha256": "fd89ed85c340d5a0e3a67a2376cf99c52b428193d95aa692fd528efccd6d74ec"
      },
      "downloads": -1,
      "filename": "mmdgraph-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2fc86aa6961561d8b270e5e11a7b8340",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 476306,
      "upload_time": "2022-11-15T16:58:18",
      "upload_time_iso_8601": "2022-11-15T16:58:18.345629Z",
      "url": "https://files.pythonhosted.org/packages/3b/4d/7c784a20c7de037801242fe9d21291dad029fb5a3346f6fc6aed60d854af/mmdgraph-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}