{
  "info": {
    "author": "Bardia Barabadi",
    "author_email": "bardiabarabadi@uvic.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "# UVic MUSE\n\nAn application for streaming from MUSE headsets to MATLAB and other \nplatforms. \n\n## Requirements\n\nThe code relies on [pygatt](https://github.com/peplin/pygatt) for BLE communication \n    and [pylsl](https://github.com/chkothe/pylsl) for Muse streaming. For the best result use [BLED112](http://www.farnell.com/datasheets/2674198.pdf?_ga=2.79024144.587051681.1584504877-1039421750.1584504877&_gac=1.255907449.1584504893.Cj0KCQjw6sHzBRCbARIsAF8FMpWVas72rjYW8HkIbpjfUe97CBonZR71Yi22iGbSvDSER9rcJJ1JbqsaAit0EALw_wcB).\nWe highly recommend installing on a virtual environment (VE). You can build and manage those VEs using [Anaconda](https://www.anaconda.com/), \n        the instructions to install and setup a conda environment is described [here](https://docs.anaconda.com/anaconda/install/).\n\n\n\n**Compatible with Python 3.x**\n\n**Compatible with MUSE _MU-02_ and _MU-03_**\n\n_Note: if you run into any issues, first check out out Common Issues\nand then the Issues section of [this](https://github.com/bardiabarabadi/uvicMUSE) repository_\n\n## Getting Started\n\nTo stream from MUSE to MATLAB ro other platforms, a _Streamer_ application is required. \nTransmitted data from _Streamer_ side then can be received and used by the _Receiver_ application. \nTake a look at this chart below:\n\n\n![Top](image.png)\n\nThis project has two sections, first, *UVic MUSE* that connects to MUSE \nover Bluetooth and streams its data over UDP and LSL.\nSecond, a MATLAB toolbox (and `MuseUdp.m`) that allows the user to receive \n*UVic MUSE* transmitted data over UDP protocol. \nIn the following sections we go through installation and usage of *UVic MUSE*\nand then explain about part two, MuseUdp.   \n\n### UVic MUSE Installation\n\nOn Windows we suggest the user to install Anaconda and run all of the following commands\n(including optional commands) in an Anaconda Prompt. You may need to install\n [Microsoft Visual C++ Build Tools](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017) (~1GB) from microsoft website if you don't use Anaconda.\n \nOn MacOS and linux, install Anaconda (or miniconda), \nopen a terminal, and follow these commands:\n\n**If you don't want to use a virtual environment, use Terminal (Linux and OSx) \nor Command Prompt (Windows) and skip the optional steps.**\n\n(optinal) Create a new conda environment.\n    \n    conda create --name muse_env python=3.7\n    \n(optinal) Activate conda environment\n    \n    conda activate muse_env\n    \nInstall dependencies\n\n    pip install pylsl pygatt # For Windows and MacOS\n    pip install pylsl==1.10.5 pygatt # For Linux\n          \n    \nInstall UVicMUSE using `pip`\n\n    pip install --upgrade uvicmuse\n    \n\n\n    \n#### Running UVicMUSE:\n\nTo run and use *UVic MUSE* open a Terminal (Linux & OSx) or Command Prompt (Windows)\nand type in the commands below:\n\n(optional) Activate the virtual environment\n    \n    conda activate muse_env\n\nRun UVicMUSE:\n    \n    uvicmuse\n    \n**If you manage to install UVicMUSE without conda in Windows, you can run it by opening the start menu\nand typing uvicmuse**\n\n#### GUI: \n\n![Top](uvicmuse_.png)\n\n#### Streaming Procedure:\nFollow steps shown below to stream the MUSE sensory data. Remember to correctly specify the **Required Entries** variables\nbefore moving on to the next step. \n\n1. Search to get a list of available MUSEs\n2. Connect to one of the MUSEs. **Required Entries** = Checkboxes (UDP, LSL, EEG, PPG, ACC, GYRO) \n3. Start Streaming over UDP and LSL (if enabled). **Required Entries** = Filters (Highpass, Lowpass, Notch)\n\nNotes:\n* Stopping the stream won't disconnect the MUSE (use this feature for changing filters configurations)\n* Search is required after disconnecting from a MUSE \n\n\n## Receiver Toolbox (MuseUdp)\n\nIn this section we explain the methods available in the MATLAB toolbox. The main responsibility of a receiver\nis to connect to UDP socket (same socket as UVic MUSE) and receive data that is being transmitted from MUSE device.\n\n#### MATLAB Toolbox\n\nDonwload [MuseUdp Toolbox](https://www.mathworks.com/matlabcentral/fileexchange/74583-museudp) from MATLAB file exchange. \nOpen and install the toolbox on MATLAB. Moreover, you need to install [Instrument Control Toolbox](https://www.mathworks.com/products/instrument.html)\n to establish UDP connections.\n \nTo see all of the available methods (functions), create an object from MuseUdp and call methods for it:\n\n    mu = MuseUdp();\n    methods(mu);\n\nTo get a single sample from UVic MUSE use:\n    \n    mu = MuseUdp();\n    [data, timestamp, success] = mu.get_xxx_sample()\n\nRepace `xxx`with `eeg`, `ppg`, `acc` or `gyro`. The sampled data may have different size according to `xxx`, `eeg` has 5 \nchannels per sample, the rest of the sensors return 3 channels data. \n\nTo read sampled data in chunks, you need to specify the chunk size and call `mu.get_xxx_chunk(###)`, replace `xxx` with sensor type\nand `###` with the chunk size. The output size, `size(data)`, will be `[chunk_size, 5]` for `eeg` and `[chunk_size, 3]` for others. \n\n*Note: since the buffer size is limited for UDP protocols, each sample of `eeg` contains four bytes for timestamp and\n4 * 5 = 20 bytes for data (24B total). Since default buffer size in UDP is 1kB, one cannot get a chunk larger that 40 samples.\nWe suggest using multiple instances of `get_xxx_chunk()`, but you can change the buffer size by calling the function below:\n    \n    mu.set_udp_buffer_size(2048) % 2kB buffer\n\n## Issues\n\nOn MacOSx: Application crashes after running:\n\n    pip uninstall serial pyserial\n    conda uninstall serial pyserial\n    pip install pyserial esptool\n\n## Citing UVicMUSE\n\n```\n@misc{UVicMUSE,\n  author       = {Bardia Barabadi, Jamieson Fregeau},\n  title        = {uvic-muse},\n  month        = March,\n  year         = 2020,\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "muse lsl eeg ble neuroscience matlab UDP",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uvicmuse-dongle",
    "package_url": "https://pypi.org/project/uvicmuse-dongle/",
    "platform": "",
    "project_url": "https://pypi.org/project/uvicmuse-dongle/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/uvicmuse-dongle/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Stream and visualize EEG data from the Muse headset.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8486041,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e829e7d6f011ba4bbaa0ea76f781cf66ea406aca03a28d12096426be4cb6025",
          "md5": "3c4d87e0b21e39740b375fa4e6747b9f",
          "sha256": "b6e8c9bc12fdc62c7ef345559b443d325a30aba659a8c7cc3702bae26b67ff0d"
        },
        "downloads": -1,
        "filename": "uvicmuse-dongle-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c4d87e0b21e39740b375fa4e6747b9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 709216,
        "upload_time": "2020-10-23T18:19:35",
        "upload_time_iso_8601": "2020-10-23T18:19:35.582796Z",
        "url": "https://files.pythonhosted.org/packages/9e/82/9e7d6f011ba4bbaa0ea76f781cf66ea406aca03a28d12096426be4cb6025/uvicmuse-dongle-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e829e7d6f011ba4bbaa0ea76f781cf66ea406aca03a28d12096426be4cb6025",
        "md5": "3c4d87e0b21e39740b375fa4e6747b9f",
        "sha256": "b6e8c9bc12fdc62c7ef345559b443d325a30aba659a8c7cc3702bae26b67ff0d"
      },
      "downloads": -1,
      "filename": "uvicmuse-dongle-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3c4d87e0b21e39740b375fa4e6747b9f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 709216,
      "upload_time": "2020-10-23T18:19:35",
      "upload_time_iso_8601": "2020-10-23T18:19:35.582796Z",
      "url": "https://files.pythonhosted.org/packages/9e/82/9e7d6f011ba4bbaa0ea76f781cf66ea406aca03a28d12096426be4cb6025/uvicmuse-dongle-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}