{
  "info": {
    "author": "Andreas Hulm",
    "author_email": "andreas.hulm@cup.uni-muenchen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Adaptive Sampling\n=================\n\nThis package implements various sampling algorithms for the calculation of free energy profiles of molecular transitions. \n\n## Available sampling methods include:\n*\tAdaptive Biasing Force (ABF) method [1] \n\t\n* \tExtended-system ABF (eABF) [2]\n\n\t* On-the-fly free energy estimate from the Corrected Z-Averaged Restraint (CZAR) [2]\n\t\n\t* Application of Multistate Bannett's Acceptance Ratio (MBAR) [3] to recover full statistical information in post-processing [4]\n\t\n* \tWell-Tempered Metadynamics (WTM) [5] and WTM-eABF [6]\n\n* \tGaussian-accelerated MD (GaMD) [7] and GaWTM-eABF [8]\n\n## Install:\nTo install adaptive_sampling type:\n```shell\n$ pip install adaptive-sampling\n```\n\n\n## Requirements:\n* python >= 3.8\n* numpy >= 1.19\n* torch >= 1.10\n* scipy >= 1.7\n\n## Basic Usage:\nTo use adaptive sampling with your MD code of choice add a function called `get_sampling_data()` to the corresponding python interface that returns an object containing all required data. Hard-coded dependencies can be avoided by wrapping the `adaptive_sampling` import in a `try/except` clause:\n\n```python\nclass MD:\n    # Your MD code\n    ...\n\n    def get_sampling_data(self):\n        try:\n            from adaptive_sampling.interface.sampling_data import SamplingData\n\n            mass   = ...\n            coords = ...\n            forces = ...\n            epot   = ...\n            temp   = ...\n            natoms = ...\n            step   = ...\n            dt     = ...\n\n            return SamplingData(mass, coords, forces, epot, temp, natoms, step, dt)\n        except ImportError as e:\n            raise NotImplementedError(\"`get_sampling_data()` is missing `adaptive_sampling` package\") from e\n```\nThe bias force on atoms in the N-th step can be obtained by calling `step_bias()` on any sampling algorithm:\n```python\nfrom adaptive_sampling.sampling_tools import *\n\n# initialize MD code\nthe_md = MD(...)\n\n# collective variable\natom_indices = [0, 1] \nminimum   = 1.0  # Angstrom\nmaximum   = 3.5  # Angstrom\nbin_width = 0.1  # Angstrom \ncollective_var = [[\"distance\", atom_indices, minimum, maximum, bin_width]]\n\n# extended-system eABF \next_sigma = 0.1  # thermal width of coupling between CV and extended variable in Angstrom\next_mass = 20.0  # mass of extended variable \nthe_bias = eABF(\n    ext_sigma, \n    ext_mass, \n    the_md, \n    collective_var, \n    output_freq=10, \n    f_conf=100, \n    equil_temp=300.0\n)\n\nfor md_step in range(steps):\n    # propagate langevin dynamics and calc forces \n    ... \n    bias_force = eABF.step_bias(write_output=True, write_traj=True)\n    the_md.forces += bias_force\n    ...\n    # finish md_step\n```\nThis automatically writes an on-the-fly free energy estimate in the output file and all necessary data for post-processing in a trajectory file.\nFor extended-system dynamics unbiased statistical weights of individual frames can be obtained using the MBAR estimator:\n```python\nimport numpy as np\nfrom adaptive_sampling.processing_tools import mbar\n\ntraj_dat = np.loadtxt('CV_traj.dat', skiprows=1)\next_sigma = 0.1    # thermal width of coupling between CV and extended variable \n\n# grid for free energy profile can be different than during sampling\nminimum   = 1.0     \nmaximum   = 3.5    \nbin_width = 0.1    \ngrid = np.arange(minimum, maximum, bin_width)\n\ncv = traj_dat[:,1]  # trajectory of collective variable\nla = traj_dat[:,2]  # trajectory of extended system\n\n# run MBAR and compute free energy profile and probability density from statistical weights\ntraj_list, indices, meta_f = mbar.get_windows(grid, cv, la, ext_sigma, equil_temp=300.0)\n\nexp_U, frames_per_traj = mbar.build_boltzmann(\n    traj_list, \n    meta_f, \n    equil_temp=300.0\n)\n\nweights = mbar.run_mbar(\n    exp_U,\n    frames_per_traj \n    max_iter=10000,\n    conv=1.0e-7,\n    conv_errvec=1.0,\n    outfreq=100,\n)\n\npmf, rho = mbar.pmf_from_weights(grid, cv[indices], weights, equil_temp=300.0)\n```\n\n## Documentation:\nCode documentation can be created with pdoc3:\n```shell\n$ pip install pdoc3\n$ pdoc --html adaptive_sampling -o doc/\n```\n## References:\n1.  Comer et. al., J. Phys. Chem. B (2015); <https://doi.org/10.1021/jp506633n> \n2.  Lesage et. al., J. Phys. Chem. B (2017); <https://doi.org/10.1021/acs.jpcb.6b10055>\n3.  Shirts et. al., J. Chem. Phys. (2008); <https://doi.org/10.1063/1.2978177>\n4.  Hulm et. al., J. Chem. Phys. (2022); <https://doi.org/10.1063/5.0095554>\n5.  Barducci et. al., Phys. rev. lett. (2008); <https://doi.org/10.1103/PhysRevLett.100.020603>\n6.  Fu et. al., J. Phys. Chem. Lett. (2018); <https://doi.org/10.1021/acs.jpclett.8b01994>\n7.  Miao et. al., J. Chem. Theory Comput. (2015); <https://doi.org/10.1021/acs.jctc.5b00436>\n8.  Chen et. al., J. Chem. Theory Comput. (2021); <https://doi.org/10.1021/acs.jctc.1c00103>\n\n## This and Related Work:\n1.  Hulm et. al., J. Chem. Phys. (2022); <https://doi.org/10.1063/5.0095554>\n2.  Dietschreit et al., J. Chem. Phys., 157, 084113 (2022).; <https://aip.scitation.org/doi/10.1063/5.0102075>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ochsenfeld-lab/adaptive_sampling/archive/refs/tags/v2.0.3.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ochsenfeld-lab/adaptive_sampling",
    "keywords": "computational chemistry,molecular dynamics,free energy,chemical reactions",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adaptive-sampling",
    "package_url": "https://pypi.org/project/adaptive-sampling/",
    "platform": null,
    "project_url": "https://pypi.org/project/adaptive-sampling/",
    "project_urls": {
      "Download": "https://github.com/ochsenfeld-lab/adaptive_sampling/archive/refs/tags/v2.0.3.zip",
      "Homepage": "https://github.com/ochsenfeld-lab/adaptive_sampling"
    },
    "release_url": "https://pypi.org/project/adaptive-sampling/2.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Sampling algorithms for molecular transitions",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15384033,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0663ae44d86e84ba47c195e5d39135ddb5849a6a5a7d1799cfa7e3549d9f402a",
          "md5": "6dd18790c4bb52fc0dd87b7c25f4c2cc",
          "sha256": "36b1f32c1019df603701b1bebb294cbe655a03a0e11b6d3be8190408f52ddb10"
        },
        "downloads": -1,
        "filename": "adaptive_sampling-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6dd18790c4bb52fc0dd87b7c25f4c2cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4640,
        "upload_time": "2022-06-07T15:54:26",
        "upload_time_iso_8601": "2022-06-07T15:54:26.707950Z",
        "url": "https://files.pythonhosted.org/packages/06/63/ae44d86e84ba47c195e5d39135ddb5849a6a5a7d1799cfa7e3549d9f402a/adaptive_sampling-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3419687fd2edcf073da94c07538882589ed296e25d9dc0fdbf499249ef66dd20",
          "md5": "f0525078c6d7eb6d460364bc1228f4d8",
          "sha256": "836da61a16946e386110930a3b81b33d2822af92e184a0c722e3dbc66839bc2f"
        },
        "downloads": -1,
        "filename": "adaptive_sampling-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f0525078c6d7eb6d460364bc1228f4d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34882,
        "upload_time": "2022-10-12T08:27:08",
        "upload_time_iso_8601": "2022-10-12T08:27:08.973975Z",
        "url": "https://files.pythonhosted.org/packages/34/19/687fd2edcf073da94c07538882589ed296e25d9dc0fdbf499249ef66dd20/adaptive_sampling-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27e50de80820f5c3492d7ea197ca4e719bdf98ae5d4d2da464eff5f8b825b7ff",
          "md5": "3b3fd3ac81ff32b2cbd8d9ce1ec83fa6",
          "sha256": "b23941320b6983f3f64f729a274c53ad47164eaaabeb67d22c95e5fada94c427"
        },
        "downloads": -1,
        "filename": "adaptive_sampling-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b3fd3ac81ff32b2cbd8d9ce1ec83fa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34892,
        "upload_time": "2022-10-12T08:58:42",
        "upload_time_iso_8601": "2022-10-12T08:58:42.898639Z",
        "url": "https://files.pythonhosted.org/packages/27/e5/0de80820f5c3492d7ea197ca4e719bdf98ae5d4d2da464eff5f8b825b7ff/adaptive_sampling-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73d97f40c66de6427bb1acf435e84dc9686cc5900f08566bfacc7f81baf64ad9",
          "md5": "d2d2e4e9bdd9d4fa7ebc2099b9d4cf25",
          "sha256": "98536a63b50cf2e5486bbd441afa919266ef658458cab0277cc37d6af4ab17a6"
        },
        "downloads": -1,
        "filename": "adaptive_sampling-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d2d2e4e9bdd9d4fa7ebc2099b9d4cf25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34893,
        "upload_time": "2022-10-12T09:06:48",
        "upload_time_iso_8601": "2022-10-12T09:06:48.224108Z",
        "url": "https://files.pythonhosted.org/packages/73/d9/7f40c66de6427bb1acf435e84dc9686cc5900f08566bfacc7f81baf64ad9/adaptive_sampling-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a85cbb2cbf914a05e294f21782fab4ebff1605b59299fea9955f6c15573c9a3",
          "md5": "f030b1ef7f48bef228781135a67f1c74",
          "sha256": "1dbb323c9f7446a09e76105f9ecad21e8b941957719cb356a4ea471f00ff8922"
        },
        "downloads": -1,
        "filename": "adaptive_sampling-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f030b1ef7f48bef228781135a67f1c74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37094,
        "upload_time": "2022-10-12T09:18:36",
        "upload_time_iso_8601": "2022-10-12T09:18:36.067040Z",
        "url": "https://files.pythonhosted.org/packages/3a/85/cbb2cbf914a05e294f21782fab4ebff1605b59299fea9955f6c15573c9a3/adaptive_sampling-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a85cbb2cbf914a05e294f21782fab4ebff1605b59299fea9955f6c15573c9a3",
        "md5": "f030b1ef7f48bef228781135a67f1c74",
        "sha256": "1dbb323c9f7446a09e76105f9ecad21e8b941957719cb356a4ea471f00ff8922"
      },
      "downloads": -1,
      "filename": "adaptive_sampling-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f030b1ef7f48bef228781135a67f1c74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37094,
      "upload_time": "2022-10-12T09:18:36",
      "upload_time_iso_8601": "2022-10-12T09:18:36.067040Z",
      "url": "https://files.pythonhosted.org/packages/3a/85/cbb2cbf914a05e294f21782fab4ebff1605b59299fea9955f6c15573c9a3/adaptive_sampling-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}