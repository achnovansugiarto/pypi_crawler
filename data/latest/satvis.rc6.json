{
  "info": {
    "author": "",
    "author_email": "Dylan Penn <dylanrpenn@vt.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2"
    ],
    "description": "# **satvis**: A satellite visibility calculator.\n## Description\n*satvis* is a small library of functions used to calculate line-of-sight (LOS) visibility between spacecraft and plot access windows.\nThe core functions that the library is based on are implementations of algorithms developed by J. A. Lawton and Salvatore Alfano et. al. Visibility windows are represented as `IntervalTree`s.\nAccess windows are plotted using *matplotlib*.\n\n## Install\n```\npip install satvis\n```\n\n## Visibility Function Examples\nThe module `visibility_func.py` contains the basic building blocks of the module, including the visibility function algorithm developed by Lawton and Alfano.\nImport the functions used in the following examples with:\n\n```python\nfrom visibility_func import visibilityFunc, isVis, zeroCrossingFit\n```\n\n### Example 1\n\nTo calculate the visibility between two Earth-centered-inertial (ECI) points:\n\n```python\nearth_radius = 6378 # km\nextra_height = 0 # km\nr1 = array([[earth_radius + 400, 0, 0]]).transpose() # position of object 1\nr2 = array([[earth_radius, 0, 0]]).transpose() # position of object 2\n\n[vis, phi, a1, a2] = visibilityFunc(r1, r2, earth_radius, extra_height)\nprint(vis)\nprint(phi)\nprint(a1)\nprint(a2)\n\n# Prints:\n# 0.3451182504723773\n# 0.00014753614577624565\n# 0.34526578661815355\n# 0.0\n```\n\nwhere `vis` is the value of the visibility function, `phi` is the angle (in radians) drawn between the two Earth-centered-inertial points, and `a1` and `a2` are intermediate construction angles.\nA value of `vis`>0 means that the two points have a direct LOS to each other.\n\n### Example 2\nIf you just want to know if two points are visible to each other in a binary fashion, use `isVis`:\n\n```python\n[vis_bool] = isVis(r1, r2, earth_radius, extra_height)\nprint(vis_bool)\n# True\n```\n\n### Example 3\nA series of visibility function values can be represented as a couple of `ndarray`s or an `IntervalTree` via the `zeroCrossingFit` function.\nThis is handy if you want to calculate visibility windows between two objects.\n\n```python\nt = array([0, 1, 2, 3, 4]) # time vector\nvis = array([-1, -0.1, 0.5, 4, 2]) # objects become visible to each other between t[1] and t[2]\n[crossings, rise_set, vis_tree] = zeroCrossingFit(vis, t)\nprint(crossings)\nprint(rise_set)\nprint(vis_tree)\n\n# Prints:\n# [1.40896106] \n# [1.]\n# tree=IntervalTree([Interval(1.4089610649024726, 4)])\n```\n\nwhere `crossings` is a list of times at which the visibility function value crosses zero, `rise_set` indicates the direction of the crossing (1=rise, -1=set), and `tree` is an `IntervalTree` indicating time windows during which the visibility function value is positive.\nSee [the IntervalTree package](https://github.com/chaimleib/intervaltree) on GitHub for details on its structure.\n\n### Example 4\nIf the two objects never see each other, the returned arrays and `IntervalTree` are empty.\n\n```python\nvis = array([-1, -0.1, -0.5, -4, -2]) \n[crossings, rise_set, vis_tree] = zeroCrossingFit(vis, t)\nprint(crossings)\nprint(rise_set)\nprint(vis_tree)\n# Prints:\n# []\n# []\n# IntervalTree()\n```\n\n### Example 5\nYou can assign an identifier to `Interval`s within an `IntervalTree`.\nThis is useful if you combine multiple `IntervalTree`s representing more than two objects.\n\n```python\nvis1 = array([-1, -0.1, 0.5, 4, 2])\nvis2 = array([-2, -1, -0.5, 1, 1.1]) \n[_, _, vis_tree1] = zeroCrossingFit(vis1, t, \"pair1\")\n[_, _, vis_tree2] = zeroCrossingFit(vis2, t, \"pair2\")\ncombined_tree = vis_tree1 | vis_tree2\nprint(vis_tree1)\nprint(vis_tree2)\nprint(combined_tree)\n# Prints:\n# tree=IntervalTree([Interval(1.4089610649024726, 4, 'pair1)])\n# tree=IntervalTree([Interval(2.328702338492417, 4, 'pair2')])\n# IntervalTree([Interval(1.4089610649024726, 4, 'pair1'), Interval(2.328702338492417, 4, 'pair2')])\n\n```\n\n## Visibility History Examples\nThe `vis_history.py` module contains functions to calculate the visibility function value as a time history for multiple sensors and targets. \nThe functions in these examples can be imported with:\n\n```python\nfrom vis_history import getVisHist\n```\n\n### Example 1\nTo get an `IntervalTree` and `ndarray` of the visibility history between a single sensor and target, define the target and sensor ids, their state histories, a time vector, and the radius of the planetoid.\n\n```python\nRE = 6371  # Earth radius, km\ntime = [0, 1, 2, 3]  # units don't matter\n\n# Having the ids in lists may seem redundant for now, but will make sene in later examples\ntarget_id = [{\"id\": \"T1\"}]\nsensor_id = [{\"id\": \"S1\"}]\n\n# The third dimension is trivial in this example, but will be expanded in later examples\nstates_target = zeros([len(time), 6, 1])  # (T, 6, 1) array, ECI frame\nstates_sensor = zeros([len(time), 6, 1])  # (T, 6, 1) array, ECI frame\n\n# The sensor and target are moving in the +I direction over time, with the sensor always being further away from the Earth\nstates_target[:, 0, 0] = array([8000, 9000, 10000, 11000]) # km\nstates_sensor[:, 0, 0] = 1.1 * array([8000, 9000, 10000, 11000])  # km\n\ntree, vis = getVisHist(\n    targets=target_id,\n    sensors=sensor_id,\n    x_targets=states_target,\n    x_sensors=states_sensor,\n    time=time,\n    planet_radius=RE,\n)\nprint(tree)\nprint(vis)\n# Prints:\n# IntervalTree([Interval(0, 3, {'target_id': 'T1', 'sensor_id': 'S1'})])\n# [[[1.41076435 1.6559796  1.83313801 1.96935546]]]\n```\n\nNote that the 2nd dimension of the sensor and target states is 6.\nThe first 3 elements of this dimension are position, the last 3 elements are velocity, both in the ECI frame.\nVelocity is irrelevant for the calculation, but we leave it in the argument to be consistent with the definition of a *state vector* in orbital dynamics.\nAlso note that the dimensions of both the states and time array are arbitrary.\nAs long as you are consistent and the states are in the ECI frame, units don't matter.\n\nAlso note that the target and sensor ids are just items in `dict`s; you can have other entries in the target/sensor `dict`s, just as long as one of the keys is `\"id\"`.\n\nHow to interpret these outputs?\n- `tree (IntervalTree)`: In the interval from 0-3 along `time`, target `T1` and sensor `S1` can see each other.\n- `vis (ndarray)`: The value of the visibility function is increasing over time, and is greater than 0 the entire length of `time`.\n\n\n### Example 2\nNow for a more interesting example.\nThis time we have 2 sensors and 3 targets.\n\n```python\n# time vector\ntime = [0, 1, 2, 3]\n# create dummy target/sensor dicts\nsensor_dicts = [\n    {\"id\": \"A\"},  # ids can be `str`...\n    {\"id\": \"B\"},\n]\ntarget_dicts = [\n    {\"id\": 1},  # ... or any format.\n    {\"id\": 2},\n    {\"id\": 3},\n]\n# create dummy state history\nstates_targets = zeros([len(t1), 6, 3])\nstates_sensors = zeros([len(t1), 6, 2])\n\n# Build state histories for the following:\n# Visible to each other:\n#   # Target 1 / Sensor A\n#   # Target 2 / Sensor B\n#   # Target 3 / Sensor B\n# Not visible to each other:\n#   # Target 1 / Sensor B\n#   # Target 2 / Sensor A\n#   # Target 3 / Sensor A\n\n# Positions must be greater than Earth radius to get through\n# visibilityFunc error check. Velocities aren't used so set to zero.\nstates_targets[:, 0, 0] = array([8000, 9000, 10000, 11000])\nstates_targets[:, 0, 1] = -1 * array([8000, 9000, 10000, 11000])\nstates_targets[:, 0, 2] = -1 * array([8000, 9000, 10000, 11000])\n\nstates_sensors[:, 0, 0] = 1.1 * array([8000, 9000, 10000, 11000])\nstates_sensors[:, 0, 1] = -1.1 * array([8000, 9000, 10000, 11000])\n\ntree, vis = getVisHist(\n    targets=target_dicts,\n    sensors=sensor_dicts,\n    x_targets=states_targets,\n    x_sensors=states_sensors,\n    time=time,\n    planet_radius=RE,\n)\nprint(f\"tree ={tree})\nprint(f\"vis = {vis})\n# Prints:\n# tree = IntervalTree([Interval(0, 3, {'target_id': 3, 'sensor_id': 'B'}), Interval(0, 3, {'target_id': 1, 'sensor_id': 'A'}), Interval(0, 3, {'target_id': 2, 'sensor_id': 'B'})])\n# vis = \n# [[[ 1.41076435  1.6559796   1.83313801  1.96935546]\n#   [-1.7308283  -1.48561305 -1.30845464 -1.17223719]\n#   [-1.7308283  -1.48561305 -1.30845464 -1.17223719]]\n# \n#  [[-1.7308283  -1.48561305 -1.30845464 -1.17223719]\n#   [ 1.41076435  1.6559796   1.83313801  1.96935546]\n#   [ 1.41076435  1.6559796   1.83313801  1.96935546]]]\n```\n\nBefore we examine the outputs, note the format of sensor/target id.\nNote that the value of \"id\" can be any format; here we are using `str`s and `int`s, but you can use anything.\n\nNow onto the outputs.\nFirst let's look at `tree`:\n- Target `3`/sensor `B`, target `1`/sensor `A`, and target `2`/sensor `B` can see each other from 0-3.\n- There are no `Interval`s in the `IntervalTree` for target `1`/sensor `B`, target `2`/sensor `A`, or target `3`/sensor `A`; none of these target/sensor pairs can see each other over `time`.\n- Note that the order of `Interval`s in `tree` are not time-ordered; this is because `IntervalTree`s do *not* preserve order.\n- The order of arrays in `vis` corresponds to the order of inputs in `targets` and `sensors`.\n\nNow we examine `vis`:\n- The output `vis` array is (M, N, T), where M is the number of sensors, N is the number of targets, and T is the length of the time array.\n- Looking at the upper 3x4 array block, we see that all the entries in row 0 (1.41, 1.65, ...) are positive.\nThis corresponds to target `1`/sensor `A` being visible to each other.\n- Conversely, all of the entries in row 1 of the upper block (-1.73, -1.48, ...) are negative.\nThis corresponds to target `2`/sensor `A` ***not*** being visible to each other.\n- The lower array block corresponds to sensor `B`.\n\n## Schedule Plots Examples\nAccess windows between sensors and targets can be plotted using `plotSchedule`.\nImport the functions used in the following examples with:\n\n```python\n# local imports\nfrom schedule_plots import plotSchedule\nfrom int_tree_converter import intTree2WindowList\n\n# 3rd-party imports\nfrom intervaltree import Interval, IntervalTree\n```\n\n### Example 1\n`plotSchedule` requires a specifically-formatted `ndarray` that is not easily human-readable.\nTo convert from the easyish-to-read output of `getVisHist` to something that `plotSchedule` can interpret, we use the converter function `intTree2WindowList`. \n\n```python\n# Build a simple IntervalTree\ntree = IntervalTree([Interval(0, 3, {'target_id': 3, 'sensor_id': 'B'}), Interval(0, 3, {'target_id': 1, 'sensor_id': 'A'}), Interval(0, 3, {'target_id': 2, 'sensor_id': 'B'})])\n\n# Convert IntervalTree\n[windows, sensor_ids, target_ids] = intTree2WindowList(schedule_tree=tree)\nprint(windows)\nprint(sensor_ids)\nprint(target_ids)\n# Prints:\n# [[[(0, 3)], [], []], [[], [(0, 3)], [(0, 3)]]]\n# ['A', 'B']\n# [1, 2, 3]\n```\n\nThe sensor and target ids are used for debugging, and generally ignored when using `intTree2WindowList`.\n`windows` is formatted such that `plotSchedule` can accept it as an argument.\n\n### Example 2: Basic Plot\nNow to generate a schedule plot. \nBefore calling `plotSchedule`, create a *matplotlib* figure, which is passed in as an argument.\n\n```python\nf = plt.figure()\navail = [\n            [[(2, 1)], [(4, 1)]],  # access windows for Sensor A\n            [[], [(2, 3)]]  #  access windows for Sensor B\n        ]\ntarget_labels = ['1', '2']\nsensor_labels = ['A', 'B']\nf = plotSchedule(\n    availability=avail,\n    target_labels=target_labels,\n    sensor_labels=sensor_labels,\n    fig=f\n    )\nplt.show()\n```\n\nThe above code outputs this figure:\n![](pics/plot_basic.png)\n\n### Example 3: Scheduled Plot\nThere are optional arguments to `plotSchedule` that show a \"scheduled\" sensor-target pairs as well as availability.\n\n```python\nf = plt.figure()\navail = [\n            [[(2, 1)], [(4, 1)]],  # access windows for Sensor A\n            [[], [(2, 3)]]  #  access windows for Sensor B\n        ]\nsched = [\n            [[(2, 0.5)], []],  # schedule for Sensor A\n            [[], [(3, 1)]], #  schedule for Sensor B\n        ]  \ntarget_labels = ['1', '2']\nsensor_labels = ['A', 'B']\nf = plotSchedule(\n    availability=avail,\n    target_labels=target_labels,\n    sensor_labels=sensor_labels,\n    fig=f,\n    scheduled=sched,\n    scheduled_targ_labels=target_labels,\n    scheduled_sensor_labels=sensor_labels,\n    )\nplt.show()\n```\n\nThe above code outputs this figure:\n![](pics/plot_scheduled.png)\n\n## Citations:\n- Alfano, Salvatore & Jr, Negron, & Moore, Jennifer. (1992). Rapid Determination of Satellite Visibility Periods. Journal of The Astronautical Sciences. Vol. 40, April-June, pp 281-296. \n- Lawton, J. A.. (1987). Numerical Method for Rapidly Determining Satellite-Satellite and Satellite-Ground Station In-View Periods. Journal of Guidance, Navigation and Control. Vol. 10, January-February, pp. 32-36\n- Chaim Leib Halbert's IntervalTree package on GitHub, https://pypi.org/project/intervaltree/#description\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2022 Dylan R. Penn  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "satvis",
    "package_url": "https://pypi.org/project/satvis/",
    "platform": null,
    "project_url": "https://pypi.org/project/satvis/",
    "project_urls": {
      "Homepage": "https://github.com/dylan906/satvis"
    },
    "release_url": "https://pypi.org/project/satvis/0.1.5/",
    "requires_dist": [
      "matplotlib (>=3.5)",
      "intervaltree (>=3.1)",
      "numpy",
      "flake8 ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "flake8-bugbear (==22.4.25) ; extra == 'dev'",
      "flake8-builtins (==1.5.3) ; extra == 'dev'",
      "flake8-docstrings (==1.6.0) ; extra == 'dev'",
      "flake8-plugin-utils (==1.3.2) ; extra == 'dev'",
      "flake8-pytest-style (==1.6.0) ; extra == 'dev'",
      "flake8-rst-docstrings (==0.2.6) ; extra == 'dev'",
      "black (>=22.3.0) ; extra == 'dev'",
      "isort[colors] ; extra == 'dev'"
    ],
    "requires_python": ">=2.8.5",
    "summary": "Satellite LOS visibility calculator",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17293012,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "833a46cf937892d2baf6b5ba74eb69cbaaf20dbfc87d858bdb62c2b9fb25ae1a",
          "md5": "689f4ba695594b5dbec6156a185411db",
          "sha256": "19c2a5d8266ab8184a725dd984019995e4acde563712088ad3b6e03dc86b8a6d"
        },
        "downloads": -1,
        "filename": "satvis-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "689f4ba695594b5dbec6156a185411db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.8.5",
        "size": 13493,
        "upload_time": "2022-11-15T18:15:10",
        "upload_time_iso_8601": "2022-11-15T18:15:10.477537Z",
        "url": "https://files.pythonhosted.org/packages/83/3a/46cf937892d2baf6b5ba74eb69cbaaf20dbfc87d858bdb62c2b9fb25ae1a/satvis-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d66574eeffd952353214e75b1b659d24d535c101e9ce477c03e07dea30faa614",
          "md5": "6d92ec4951a9120e11509ef8e8c4c1bf",
          "sha256": "21ab5aedbd69cdf5406183dc513957dca5ce579176595c107112f7cd3b81173e"
        },
        "downloads": -1,
        "filename": "satvis-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d92ec4951a9120e11509ef8e8c4c1bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.8.5",
        "size": 14021,
        "upload_time": "2022-11-15T18:15:13",
        "upload_time_iso_8601": "2022-11-15T18:15:13.598342Z",
        "url": "https://files.pythonhosted.org/packages/d6/65/74eeffd952353214e75b1b659d24d535c101e9ce477c03e07dea30faa614/satvis-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfd458ee26cde2757520472af72293781ddf8d97ac39baf3be27ed8921f3798d",
          "md5": "fea3e424c433d6ca87a0d5c2d7fb8fd7",
          "sha256": "2b9b4da32bcd9505949141dea3fc2fd9ecb00cd59cfc0fcfe2428a608afe9a70"
        },
        "downloads": -1,
        "filename": "satvis-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fea3e424c433d6ca87a0d5c2d7fb8fd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.8.5",
        "size": 13482,
        "upload_time": "2022-11-15T19:40:33",
        "upload_time_iso_8601": "2022-11-15T19:40:33.509309Z",
        "url": "https://files.pythonhosted.org/packages/bf/d4/58ee26cde2757520472af72293781ddf8d97ac39baf3be27ed8921f3798d/satvis-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33daf632d2e1789eed6a7dca8b179602347d67ad3443cfa70b9b2cbfcb4508ed",
          "md5": "bbe773d21ca6e100c604f1e109619eef",
          "sha256": "6f45ea52cd4757aa471ca98523ca64638be9f434701cba25ec7c9f3705c91dbf"
        },
        "downloads": -1,
        "filename": "satvis-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bbe773d21ca6e100c604f1e109619eef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.8.5",
        "size": 14033,
        "upload_time": "2022-11-15T19:40:35",
        "upload_time_iso_8601": "2022-11-15T19:40:35.447738Z",
        "url": "https://files.pythonhosted.org/packages/33/da/f632d2e1789eed6a7dca8b179602347d67ad3443cfa70b9b2cbfcb4508ed/satvis-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d129e8e435ae15e1eb6106c8495df49980e91e8056e418ca48033f444d757251",
          "md5": "35c8a3f54088ec39421eda511e4335f4",
          "sha256": "6fc172b4666eeec8ac1e9553b02c5820f67132bc835928d68a9a6f6421531d8e"
        },
        "downloads": -1,
        "filename": "satvis-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35c8a3f54088ec39421eda511e4335f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.8.5",
        "size": 16152,
        "upload_time": "2022-11-16T21:36:20",
        "upload_time_iso_8601": "2022-11-16T21:36:20.759719Z",
        "url": "https://files.pythonhosted.org/packages/d1/29/e8e435ae15e1eb6106c8495df49980e91e8056e418ca48033f444d757251/satvis-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a5358862c882cfbd80a6699e22dbc9d9defc410e69a2dcb77f74fd0511e9867",
          "md5": "651bc5f3a8f142cff012c23e2173a5a0",
          "sha256": "c721a41fb98de6359d7106babfb74d34a5d164bd01bafaa565c9254713b41362"
        },
        "downloads": -1,
        "filename": "satvis-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "651bc5f3a8f142cff012c23e2173a5a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.8.5",
        "size": 19087,
        "upload_time": "2022-11-16T21:36:22",
        "upload_time_iso_8601": "2022-11-16T21:36:22.923178Z",
        "url": "https://files.pythonhosted.org/packages/4a/53/58862c882cfbd80a6699e22dbc9d9defc410e69a2dcb77f74fd0511e9867/satvis-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "699f210792ab2ce4c7c0bee941faefb8d8b00798b041c5da8799703373dbbb8d",
          "md5": "053d37582da58b71d8a310ee86771480",
          "sha256": "f98f6493f6a5e65e167645c2d478f5ad106f7cabc296d1f14ec679d29b2f72e9"
        },
        "downloads": -1,
        "filename": "satvis-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "053d37582da58b71d8a310ee86771480",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.8.5",
        "size": 16256,
        "upload_time": "2022-12-15T17:16:04",
        "upload_time_iso_8601": "2022-12-15T17:16:04.456212Z",
        "url": "https://files.pythonhosted.org/packages/69/9f/210792ab2ce4c7c0bee941faefb8d8b00798b041c5da8799703373dbbb8d/satvis-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da196bd6799955aa357be573899317e728d45f59049eed92dad0b2fd89e63ae3",
          "md5": "1e67f9bb7658786e1392280a5a010d71",
          "sha256": "c844a2f67b2a66a22c013d71a1b5ca9329d37743475bb018bb4f9bd235bdc820"
        },
        "downloads": -1,
        "filename": "satvis-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1e67f9bb7658786e1392280a5a010d71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.8.5",
        "size": 19211,
        "upload_time": "2022-12-15T17:16:06",
        "upload_time_iso_8601": "2022-12-15T17:16:06.504606Z",
        "url": "https://files.pythonhosted.org/packages/da/19/6bd6799955aa357be573899317e728d45f59049eed92dad0b2fd89e63ae3/satvis-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cd9cf027687c9e8b1b4720de71b822cdd5953fa1b4336703e618fb86712cdf7",
          "md5": "903a5366d1f95245b094d8c8146773fb",
          "sha256": "d837e46a6222524b56674a6fd0aeb00262dd01c48276af3b4c6329af8acc7677"
        },
        "downloads": -1,
        "filename": "satvis-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "903a5366d1f95245b094d8c8146773fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.8.5",
        "size": 16502,
        "upload_time": "2022-12-16T19:36:00",
        "upload_time_iso_8601": "2022-12-16T19:36:00.303330Z",
        "url": "https://files.pythonhosted.org/packages/4c/d9/cf027687c9e8b1b4720de71b822cdd5953fa1b4336703e618fb86712cdf7/satvis-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43b163db650191ffddcf25e5f33428964f0d209acbe17ec19b8a58f3d29c9a2b",
          "md5": "11ba82f182e7df31e42f6632050f7ec1",
          "sha256": "b77f36cf2065963f8e0b40c9fff2a0f2c2fa8150476da186b1231bf67305ee5d"
        },
        "downloads": -1,
        "filename": "satvis-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "11ba82f182e7df31e42f6632050f7ec1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.8.5",
        "size": 19486,
        "upload_time": "2022-12-16T19:36:02",
        "upload_time_iso_8601": "2022-12-16T19:36:02.076810Z",
        "url": "https://files.pythonhosted.org/packages/43/b1/63db650191ffddcf25e5f33428964f0d209acbe17ec19b8a58f3d29c9a2b/satvis-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aee7b06f8abb25dbee9d8a26dbb95f5a759b5c687de9fe7c719de84c4e72a51",
          "md5": "4eb15e967bd518b2b4d66ca59c152d54",
          "sha256": "74ed50b320b5162cae7f7df2a4b363ec812ff022cdd10402a0d62a4448572af2"
        },
        "downloads": -1,
        "filename": "satvis-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4eb15e967bd518b2b4d66ca59c152d54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.8.5",
        "size": 16516,
        "upload_time": "2023-03-14T20:05:33",
        "upload_time_iso_8601": "2023-03-14T20:05:33.906462Z",
        "url": "https://files.pythonhosted.org/packages/8a/ee/7b06f8abb25dbee9d8a26dbb95f5a759b5c687de9fe7c719de84c4e72a51/satvis-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4404d53a6530703f5933ee37138ed53deb25f7fe254d76a25d03998ec519594",
          "md5": "91719c117fa7e43e106c743573617170",
          "sha256": "4210e837fb221212f0fa3e551d226417ef9e1e4d51d9d58040ca0d20227ee9cf"
        },
        "downloads": -1,
        "filename": "satvis-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "91719c117fa7e43e106c743573617170",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.8.5",
        "size": 22336,
        "upload_time": "2023-03-14T20:05:35",
        "upload_time_iso_8601": "2023-03-14T20:05:35.929641Z",
        "url": "https://files.pythonhosted.org/packages/e4/40/4d53a6530703f5933ee37138ed53deb25f7fe254d76a25d03998ec519594/satvis-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8aee7b06f8abb25dbee9d8a26dbb95f5a759b5c687de9fe7c719de84c4e72a51",
        "md5": "4eb15e967bd518b2b4d66ca59c152d54",
        "sha256": "74ed50b320b5162cae7f7df2a4b363ec812ff022cdd10402a0d62a4448572af2"
      },
      "downloads": -1,
      "filename": "satvis-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4eb15e967bd518b2b4d66ca59c152d54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.8.5",
      "size": 16516,
      "upload_time": "2023-03-14T20:05:33",
      "upload_time_iso_8601": "2023-03-14T20:05:33.906462Z",
      "url": "https://files.pythonhosted.org/packages/8a/ee/7b06f8abb25dbee9d8a26dbb95f5a759b5c687de9fe7c719de84c4e72a51/satvis-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4404d53a6530703f5933ee37138ed53deb25f7fe254d76a25d03998ec519594",
        "md5": "91719c117fa7e43e106c743573617170",
        "sha256": "4210e837fb221212f0fa3e551d226417ef9e1e4d51d9d58040ca0d20227ee9cf"
      },
      "downloads": -1,
      "filename": "satvis-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "91719c117fa7e43e106c743573617170",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.8.5",
      "size": 22336,
      "upload_time": "2023-03-14T20:05:35",
      "upload_time_iso_8601": "2023-03-14T20:05:35.929641Z",
      "url": "https://files.pythonhosted.org/packages/e4/40/4d53a6530703f5933ee37138ed53deb25f7fe254d76a25d03998ec519594/satvis-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}