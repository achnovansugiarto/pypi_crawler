{
  "info": {
    "author": "Vincent Mallet, Jean-Philippe Vert",
    "author_email": "vincent.mallet96@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Equi-RC : Equivariant layers for RC-complement symmetry in DNA sequence data\n\nThis is a repository that implements the layers as described in \"Reverse-Complement Equivariant Networks for DNA \nSequences\" ([see paper](https://proceedings.neurips.cc/paper/2021/hash/706608cfdbcc1886bb7eea5513f90133-Abstract.html))\nin Keras and Pytorch.\n\n## Setup and notes\nFirst, install Keras or Pytorch. Then you can install our package with pip, by running :\n```\npip install equirc\n```\n\nThis package includes both versions (PyTorch and Keras) of the code. To use, for instance the PyTorch layers,\njust specify it in the import :\n\n```\nfrom equirc.pytorch_rclayers import RegToRegConv\n```\n\n## Summary of the paper\n\nThe DNA molecule contains two strands, each composed of a chain of nucleotides A, C, T and G. These strands\nare complimentary : As and Cs are always paired with Ts and Gs respectively. Therefore, to represent a DNA molecule, one\ncan *arbitrarily* choose a strand and then encode the chain for instance in one hot encoding. The biological way to \naccess this information, sequencing, yields the two possible representations. For ML tasks on the whole DNA (the two \nstrands), such as molecule binding to the double helix, one want to have a stable prediction over the two possible \nrepresentations of the input.\n\nTo find all possible networks satisfying this condition, we frame this into group theory. Indeed, given a sequence s, \napplying the reverse complement operation twice falls back onto s : RC(RC(s)) = s.\nTherefore, this operation is a representation of the group Z2. To also have stability over the translation, we extend \nthis group to the product Z x Z2. Then, we leverage the framework of equivariance :\n\n![Equivariance](figs/equivariant_dna.jpg)\n\nLet X1 and X2 be two spaces with group actions π1 and π2, respectively. A function Φ going from X1 to X2 is said to be \nequivariant if Φ o π1 = π2 o Φ. This means that applying the group action π1 on an input x, and then going through Φ\nyields the same result as first going through Φ and then applying π2. Equivariant functions can be composed, making it \nsuitable for the design of deep learning layers.\n\nWe know what the input group action π0 on one-hot encoded DNA matrices is : we permute the channels A and C into T and G\nand we reverse the sequence order. We need to also structure each intermediate spaces of our network with a group action.\nThis is similar to choosing the number of feature maps at each layer, except that beyond choosing only the dimension, we\nalso choose how the group will affect each column (the features at each point). Then a mathematical tool known as the \ninduced representation extends this action on the columns onto the action on the whole matrix.\n\nOnce equipped with these representations, our paper finds all possible equivariant linear Φ and all non linear pointwise\nΦ when the input and output representations are the same. We then show that previous methods, such as RCPS, are special\ncases of this general setting. We also implement equivariant k-merisation and equivariant BatchNorm.\n\nFinally we empirically investigate the efficiency of our networks. We show that having access to a larger functional \nspace yields better performance, but do not find that a specific equivariant parametric function behaves consistently\nbetter than others. This advocates for tuning these new hyperparameters onto the validation set, enabling to achieve\nthe best results.\n\n## Practical design of equivariant networks\n\nAll the possible representations are described in the paper, but the practical ones to use are mostly of two types : \n- 'Irrep', with a and b two integers : a dimensions are unaffected by the group action and b dimensions see their signs\nflipped.\n- 'Reg' are regular layers : upon group action the column is reversed.\n\nThe a_n are of the dimensions of type +1, the b_n of type -1. The reg_in, reg_out arguments should be understood as the \nnumber of cycles and thus correspond to half the total dimension. For instance, in the input, we have 4 nucleotides and \nreg=2. For technical reasons (the formalism of continuous convolution as opposed to matrix multiplication), one need to\nuse only odd kernel sizes to ensure a strict equivariance. \n\nThe layers name and parameters should be quite explicit, for instance the IrrepToRegConv is a linear layer going from a\nspace structured with the Irrep action to one structured with an Irrep action. This layer takes as parameters a_in and \nb_in which are the a and b dimensions of its input as well as reg_out which corresponds to its output group action.\nThe other layers (BatchNorm, Kmers) also follow this nomenclature. For the non linearities, you can directly use the \nones native to your framework, following the rules of theorem 3. A practical implementation is to use any non linearity\nin spaces with a 'Reg' structure, and odd non linearities such as tanh in spaces structured with Irrep spaces. We found\nnetworks that balance a and b to perform better.\n\n## Examples\n### Keras\nThis class used for the Binary Prediction task is implemented as an example.\nOne can refer to this implementation and for testing, simply run :\n```\npython keras_example.py\n```\n\n### Pytorch\nThe equivalent class is also written in Pytorch, and can be ran with :\n```\npython pytorch_example.py\n```\n\n## Acknowlegements\n\nWe want to thank Hannah Zhou, Avanti Shrikumar and Anshul Kundaje for precious discussions.\nWe also thank Guillaume Bouvier and the CBIO members for advice.\n\n## Contact\n\nPlease feel free to reach out by sending an email to vincent.mallet96@gmail.com or opening issues.\n\n## Cite\n\nIf you want to cite this tool, please use :\n```\n@article{mallet2021reverse,\n  title={Reverse-Complement Equivariant Networks for DNA Sequences},\n  author={Mallet, Vincent and Vert, Jean-Philippe},\n  journal={bioRxiv},\n  year={2021},\n  publisher={Cold Spring Harbor Laboratory}\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Vincentx15/Equi-RC",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "equirc",
    "package_url": "https://pypi.org/project/equirc/",
    "platform": "",
    "project_url": "https://pypi.org/project/equirc/",
    "project_urls": {
      "Homepage": "https://github.com/Vincentx15/Equi-RC"
    },
    "release_url": "https://pypi.org/project/equirc/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Reverse Complement Equivariant Layers",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12254409,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8493a8377a888fb09760145ac60191d1e42577dcb10140700892dd7e4861f58",
          "md5": "31aa6a2f57568281be1fd354f1657070",
          "sha256": "a2d688885323a71188746c8f363497009fcd9538db444ab2c724b9a59c01c49c"
        },
        "downloads": -1,
        "filename": "equirc-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31aa6a2f57568281be1fd354f1657070",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21557,
        "upload_time": "2021-12-09T10:55:14",
        "upload_time_iso_8601": "2021-12-09T10:55:14.909038Z",
        "url": "https://files.pythonhosted.org/packages/d8/49/3a8377a888fb09760145ac60191d1e42577dcb10140700892dd7e4861f58/equirc-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63766c3c39c98976ca14c24c2e6dbf2bb0b037a85642f1d6dbafff96b40d1c89",
          "md5": "04721b2b45a176195269bb11e70f8828",
          "sha256": "1d1ee3c6669bf506a4cee5731a1237650862ad317be661a9147ac5cef43b8b3f"
        },
        "downloads": -1,
        "filename": "equirc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04721b2b45a176195269bb11e70f8828",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23211,
        "upload_time": "2021-12-09T10:55:16",
        "upload_time_iso_8601": "2021-12-09T10:55:16.184549Z",
        "url": "https://files.pythonhosted.org/packages/63/76/6c3c39c98976ca14c24c2e6dbf2bb0b037a85642f1d6dbafff96b40d1c89/equirc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8493a8377a888fb09760145ac60191d1e42577dcb10140700892dd7e4861f58",
        "md5": "31aa6a2f57568281be1fd354f1657070",
        "sha256": "a2d688885323a71188746c8f363497009fcd9538db444ab2c724b9a59c01c49c"
      },
      "downloads": -1,
      "filename": "equirc-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31aa6a2f57568281be1fd354f1657070",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21557,
      "upload_time": "2021-12-09T10:55:14",
      "upload_time_iso_8601": "2021-12-09T10:55:14.909038Z",
      "url": "https://files.pythonhosted.org/packages/d8/49/3a8377a888fb09760145ac60191d1e42577dcb10140700892dd7e4861f58/equirc-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63766c3c39c98976ca14c24c2e6dbf2bb0b037a85642f1d6dbafff96b40d1c89",
        "md5": "04721b2b45a176195269bb11e70f8828",
        "sha256": "1d1ee3c6669bf506a4cee5731a1237650862ad317be661a9147ac5cef43b8b3f"
      },
      "downloads": -1,
      "filename": "equirc-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04721b2b45a176195269bb11e70f8828",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23211,
      "upload_time": "2021-12-09T10:55:16",
      "upload_time_iso_8601": "2021-12-09T10:55:16.184549Z",
      "url": "https://files.pythonhosted.org/packages/63/76/6c3c39c98976ca14c24c2e6dbf2bb0b037a85642f1d6dbafff96b40d1c89/equirc-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}