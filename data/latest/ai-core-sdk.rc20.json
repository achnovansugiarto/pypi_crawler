{
  "info": {
    "author": "SAP SE",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Legal Industry",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: Microsoft :: Windows :: Windows 7",
      "Operating System :: Microsoft :: Windows :: Windows 8",
      "Operating System :: Microsoft :: Windows :: Windows 8.1",
      "Operating System :: Microsoft :: Windows :: Windows Server 2008",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# SAP AI Core SDK\n\nThe SAP AI Core SDK is a Python-based SDK that lets you access SAP AI Core using Python methods and data structures. It provides tools that help you to manage your scenarios and workflows in SAP AI Core.\n\n\nThe SAP AI Core SDK can be used to interact with SAP AI Core. It provides access to all public lifecycle and administration APIs.\n\nFor example:\n\n* You can execute pipelines as a batch job to preprocess or train your models, or perform batch inference.\n\n* You can deploy Ð° trained machine learning model as a web service to serve inference requests with high performance.\n\n* You can register your own Docker registry, synchronize your AI content from your own git repository, and register your own object store for training data and trained models.\n\n* You can log metrics within a workflow execution using the SDK. You can use the same code for tracking metrics in both your local environment and in the workflow execution (production).\n\n> **Note**\n>\n> Note that executing online inference is not part of SAP AI Core SDK.\n>\n> Metrics persistence is not currently available in your local environment using the SDK. However, it is available in your productive workflow execution.\n\n## Example Usage\n\nThe SDK can, for instance, be used in a Jupyter notebook for convenient interaction with SAP AI Core in a test or development context.\n\nHere are a few examples how to use the SDK. For details on the methods, please refer to the html documentation provided in the `/docs` folder of the wheel file.\n\n### Import Definitions\n\n```python\nfrom ai_core_sdk.ai_core_v2_client import AICoreV2Client\n```\n\n## Create Client\n\n```python\nclient = AICoreV2Client(base_url=AI_API_BASE,\n                        auth_url=AUTH_URL,\n                        client_id=CLIENT_ID,\n                        client_secret=CLIENT_SECRET,\n                        resource_group=resource_group_id)\n```\n\n### Create New Resource Group\n\n```python\nresource_group_create = client.resource_groups.create(resource_group_id=resource_group_id)\nprint(resource_group_create.resource_group_id)\nresource_group_details = client.resource_groups.get(resource_group_id=resource_group_id)\nprint(f\"{resource_group_details.status_message} \\n{resource_group_details.resource_group_id}\")\n```\n\n### Create Object Store Secret\n\n```python\n# access key and secret are assumed to reside in environment variables OSS_KEY and OSS_SECRET\nobject_store_secret_create = client.object_store_secrets.create(\n            name=\"default\",\n            type=\"S3\",\n            bucket=\"<your S3 bucket>\",\n            endpoint=\"<your S3 host>\",\n            path_prefix=\"<your path prefix in S3>\", region=\"<your S3 region>\",\n            data={\"AWS_ACCESS_KEY_ID\": os.environ.get(\"OSS_KEY\"),\n            \"AWS_SECRET_ACCESS_KEY\": os.environ.get(\"OSS_SECRET\")})\n\nsecret_get = client.object_store_secrets.get(name=\"default\")\nprint(f\"{secret_get.metadata}\")\n```\n\n### List Scenarios\n\n```python\nscenarios = client.scenario.query()\nfor scenario in scenarios.resources:\n    print(f\"{scenario.name} {scenario.id}\")\n```\n\n## AICore Content Packages\n\nai-core-sdk provides a command-line utility as well as a python library to use AICore content packages.\n\n### Installation\n\nThe content functionality should be installed as an optional dependency of ai-core-sdk:\n\n```bash\npip install ai-core-sdk[aicore-content]\n```\n\nContent packages use Metaflow's Argo Workflows plugin to generate templates for AICore and hence Metaflow should be also configured.\nRun a configuration wizzard:\n\n```bash\nmetaflow configure kubernetes\n```\n\nor create a simple configuration file `~/.metaflowconfig/config.json` with a link to the configured in AICore object store:\n\n```bash\n{\n    \"METAFLOW_DEFAULT_DATASTORE\": \"s3\",\n    \"METAFLOW_DATASTORE_SYSROOT_S3\": \"s3://<bucket>/<prefix>\"\n}\n```\n\nSee [Configuring Metaflow](https://outerbounds.com/docs/configure-metaflow) for more details.\n\n### Discover Content Packages and their Content\n\n**CLI**\n\nEcho descriptions of all packages from all registires:\n\n```bash\naicore-content list\n```\n\nTo add custom content package spec the environment variable `AI_CORE_CONTENT_SPECS` ([`.env`](https://pypi.org/project/python-dotenv/) file is also supported ) or the `-c <path to content spec py/yaml>` option can be used:\n\n```bash\naicore-content -c ai_core_content_spec.py list\nexport AI_CORE_CONTENT_SPECS=$PWD/ai_core_content_spec.py && aicore-content show\necho \"AI_CORE_CONTENT_SPECS=$PWD/ai_core_content_spec.py\" >> .env && aicore-content show\n```\n\n**Python**\n\nAll packages:\n\n```python\nfrom ai_core_sdk.content import get_content_packages # function to fetch a list of all packages from all registries\n\nfor content_pkg in get_content_packages().values():\n    content_pkg.print() # print more details for each package\n```\n\nThe content specs can also be used directly:\n\n```python\nfrom content_package.ai_core_content_spec import package_spec_obj\npackage_spec_obj.print()\n```\n\nA content packages consists of multiple *workflows*. **Workflows** can be AI Core **Executions** or **Deployments**.\n\n**CLI**\n\nList of all workflows available:\n\n```bash\naicore-content list <name of the package>\n```\n\nDetails of a specific workflow:\n\n```bash\naicore-content show <name of the package> <name of the workflow>\n```\n\n**Python**\n\nAll packages:\n\n```python\nfrom ai_core_sdk.content import get_content_packages # function to fetch a list of all packages from all registries\n\npackage = [*get_content_packages().values()][0] # Get a ContentPackage object\nworkflows = package.workflows # get all workflows from a package\nfor flow in workflows:\n    flow.print(compact=True) # Print a compact description of the workflow\nfor flow in workflows:\n    flow.print(compact=False) # Print a detailed description of the workflow.\n```\n\nWhen using `python` a package can also directly used from the `ContentPackage` file without registering:\n\n```python\n# Load the object from the submodule\nfrom content_package.ai_core_content_spec import package_spec_obj\n[*package_spec_obj.workflows.values()][0].print(compact=True)\n\n# create the object from content package spec yaml\nfrom ai_core_sdk.content import ContentPackage\n\npackage_spec_obj = ContentPackage.from_yaml('<path to package spec yaml>')\n[*package_spec_obj.workflows.values()][0].print(compact=True)\n\n# load content package specs from .py file\nfrom ai_core_sdk.content import get_content_packages_from_py_file\nlist_of_package_specs = get_content_packages_from_py_file('<path to package spec py>') # a .py file can contain multiple package specs\nfor package_spec_obj in list_of_package_specs:\n    [*package_spec_obj.workflows.values()][0].print(compact=True)\n```\n\n### User's workflow configuration\n\nEvery AICore template has a section with a user-specific information, i.e. scenario, docker repo, secret names, etc.  To generate a template from a content package with user settings, user should create a *workflow configuration*.  This is a yaml file with a following structure:\n\n```bash\n.contentPackage: my-package\n.workflow: my-package-workflow\n.dockerType: gpu\n\nname: \"my-executable-id\"\nlabels:\n  scenarios.ai.sap.com/id: \"my-scenario-id\"\n  ai.sap.com/version: \"0.0.1\"\nannotations:\n  scenarios.ai.sap.com/name: \"my-scenario-name\"\n  executables.ai.sap.com/description: \"My description\"\n  executables.ai.sap.com/name: \"my-executable-name\"\nimage: \"my-docker-image\"\nimagePullSecret: \"my-docker-registry-secret\"\nobjectStoreSecret: \"default-object-store-secret\"\n```\n\nIn this config the target content package and workflow can be referenced using the keys `.package` and `.workflow`. If provided those references are used to create the image and template. If not provided the package and the workflow have to be specified with `--package` and `--workflow` options (see following sections for details).\n\n### Create Docker images\n\nTo run an execution or start a deployment, at least one docker image is needed. Required docker images could be generated through the CLI/Python calls. Both run a `docker build` internally.\n\n**CLI**\n\nTo create docker images:\n\n```bash\naicore-content create-image [--package=<package name>] [--workflow=<workflow name>] <workflow config>\n```\nThe command-line options `--package` and `--workflow` overwrite valudes from the worfklow config.\n\nThe building process has to be followed by a `docker push -t <generated-image>` to push the container to the registry.\n\n**Python**\n\nThe workflow objects got a function `.create_image(...)`:\n\n```python\nworkflow = content_package_spec_obj['batch_processing'] # fetch the workflow object using its name\ndocker_tag = 'my-very-own-docker.repo/sap-cv-batch-processing:0.0.1'\nworkflow_config = 'my-config.yaml'\nwith open(workflow_config) as stream\n    workflow_config = yaml.load(stream)\ncmd = workflow.create_image(workflow_config, return_cmd=True) # perform a dry run and return the cmd\nprint(cmd)\nworkflow.create_image(workflow_config) # actually build the docker container\nos.system(f'docker push {workflow_config[\"image\"]}') # push the container\n```\n\n### Create AI Core Templates\n\nThe template creation is similar for Execution and Deployment templates.\n\n#### Create Execution Templates\n\nTo create execution templates the [metaflow argo plugin](https://pypi.org/project/sap-ai-core-metaflow/) is used.\n\n**CLI**\n\nWorkflow templates need a workflow config to be provided to the `create-template` subcommand.\n\n```bash\naicore-content create-template [--package=<package name>] [--workflow=<workflow name>] <workflow config> -o <path to output template.json>\n```\n\n**Python**\n\nThe workflow config for execution templates has to be provided to the workflows's `.create_template(...)` function. The output file can be specified through the keyword parameter `target_file`:\n\n```python\nworkflow.create_template('my-workflow-config.yaml', target_file='workflow-template.json')\n```\n\n**Additonal Options**\n\nAdditional arguments can be defined in the workflow config under the key `additionalOptions`.\n\n```yaml\n...\nadditionalOptions:\n    workflow: # list of strings passed as workflow options\n        ...\n    metaflow: # list of strings passed as metaflow options\n        - --package-suffixes=.py,.sh\n```\n\nStrings in the `workflow`/`metaflow` pasted into these positions:\n\n```bash\npython -m flow [metaflow] argo create [workflow]\n```\n\nTo check the resulting call an `--dry-run`(CLI)/`return_cmd=True`(Python) option is availble. Alternativly the subcommand `aicore-content <package name> metaflow-cli <workflow name>` or `workflow.raw_metaflow_cli(...)`. Every input after the command is directly passed to the underlying `python -m <flow>` call.\n\n#### Create Serving Templates\n\n**CLI**\n\nServing templates also need a *workflow config* to be passed to the `create-template` subcommand.\n\n```bash\naicore-content create-template [--package=<package name>] [--workflow=<workflow name>] <workflow config> -o <path to output template.yaml>\n```\n\n**Python**\n\nThe workflow config has to be provided to the workflows's `.create_template(...)` function. The output file can be specified through the keyword parameter `target_file`:\n\n```python\nworkflow.create_template('my-workflow-config.yaml', target_file='serving-template.yaml')\n```\n\n### Content Package Creation\n\nA content package needs two additional files: the `ContentPackage` file and a workflows yaml.\n\n#### `ContentPackage`\n\nContent package are defined in a `ContentPackage` instance. This instance can either be loaded from a `.py`file or can be created from a yaml. A typical `.py` file looks like this:\n\n```python\nimport pathlib\nimport yaml\nfrom ai_core_sdk.content import ContentPackage\n\nHERE = pathlib.Path(__file__).parent\n\nworkflow_yaml = HERE / 'workflows.yaml'\nwith workflow_yaml.open() as stream:\n    workflows = yaml.safe_load(stream)\n\nspec = ContentPackage(\n    name='my-package name', # name of the package and the aicore-content cli subcommand\n    workflows_base_path=workflow_yaml.parent, # Base paths for all relative paths in the workflow dict\n    workflows=workflows,\n    description='This is an epic content package.', # Package description\n    examples=HERE / 'examples', # Folder to package related examples [optional]\n    version='0.0.1' # Version of the package\n)\n```\n\nIf the package is to be distributed as a python module via Nexus or PyPI and the content package spec python file should be included in the package as `ai_core_content_spec.py`. This allows the CLI to find the package without additional configuration efforts and creates a subcommand using the name from the `ContentPackage.name` attribute.\n\n##### Examples\n\nExamples for the content package can copy by the consumer to a directory using the command `aicore-content examples <package name> <target folder>`. This command creates the target folder and copies all files from the paths set in the `ContentPackage`. If no path is set or the path does not exists the `examples` subcommand is not created.\n\n##### Version\n\nCurrently the version in the `ContentPackage` is passed to the docker build call as  `--build-arg pkg_version==={version}`. In the `Dockerfile` this build argument can be used to build the docker container using the local version of the package. This is useful for content packages distributed as module through Nexus or PyPI:\n\n```Dockerfile\nFROM pytorch/pytorch\nARG pkg_version=\nENV pkg_version=$pkg_version\n...\nRUN python -m pip install sap-computer-vision-package${pkg_version}\n```\n\n#### Workflows File\n\nThe second mandatory file a workflows yaml. This yaml is used to define workflows and is structed like a dictionary:\nEntries of the dict look like this:\n\n```Yaml\nname-of-the-workflow:\n    description: >\n        Description text [optional]\n    dockerfile: ...\n    type: ExecutionMetaflow/DeploymentYAML\n    [... more type specific fields]\n```\n\nIt is important that all paths in the workflow yaml are specified as paths relative to the workflow yaml`s path. This also means that all files must be located in the same folder or in subfolders.\n\n#### Dockerfiles\n\nThe dockerfile entry can either be a single:\n\n```Yaml\ndockerfile: train_workflow/Dockerfile\n```\n\nor a dictionary of paths:\n\n```Yaml\ndockerfile:\n    cpu: train_workflow/Dockerfile\n    gpu: train_workflow/Dockerfile\n```\n\nThis allows to define different Docker container for different node types or multiple containers for cases where different steps use different containers. The different dockerfile can be selected using the option/argument `docker_type` when running the build docker command/function.\n\n#### Types\n\nCurrently two types of workflows are supported:\n\n* `ExecutionMetaflow`: exections defined as metaflow flowspecs\n* `DeploymentYaml`: deployment defined as yamls\n\n##### ExecutionMetaflow\n\nAdditional fields for a `ExecutionMetaflow` entry are\n\n* `py`: path to the python file containing the `metaflow.FlowSpec` class\n* `className`: name of the `metaflow.FlowSpec` class\n* `additionalOptions` (optional): The section is identical to the `additionalOptions` from the workflow configs.\n\n```Yaml\ntrain-workflow:\n    description: >\n        Description text [optional]\n    dockerfile:\n        cpu: train/Dockerfile\n        cpu: train/DockerfileGPU\n    type: ExecutionMetaflow\n    py: train/flow.py\n    className: TrainingFlow\n    additionalOptions:\n        annotations:\n            artifacts.ai.sap.com/datain.kind: dataset\n            artifacts.ai.sap.com/trainedmodel.kind: model\n        labels:\n            ...\n        workflow: # list of strings passed as workflow options\n            ...\n        metaflow: # list of strings passed as metaflow options (only valid for ExecutionMetaflow)\n            - --package-suffixes=.py,.sh\n```\n\n##### DeploymentYaml\n\nAdditional fields:\n\n* `yaml`: contains a path to a Deployment Template.\n\n```Yaml\nmy_deployment:\n  type: DeploymentYaml\n  yaml: deploy/template.yaml\n  dockerfile: deploy/Dockerfile\n```\n\nA Deployment Template is a regular Serving Template.  Data from `name`, `annotations` and `labels` fields from a user-defined\nworkflow config would replace correspondent attributes in the template.\nIn addition, variables `$image` and `$imagePullSecret` will be replaced with the values from the workflow config.\n\n```Yaml\napiVersion: ai.sap.com/v1alpha1\nkind: ServingTemplate\nmetadata:\n  name: my-serving\n  annotations:\n    executables.ai.sap.com/name: my-serving\n    executables.ai.sap.com/description: \"My model serving\"\n  labels:\n    ai.sap.com/version: \"0.0.1\"\nspec:\n  template:\n    apiVersion: serving.kserve.io/v1beta1\n    metadata:\n      labels: |\n        ai.sap.com/resourcePlan: \"infer.s\"\n    spec: |\n      predictor:\n         imagePullSecrets:\n         - name: $imagePullSecret\n         containers:\n         - name: kserve-container\n           image: $image\n```\n\n##### `ContentPackage` from yaml\n\nThe specification of a content package and of the workflows can also be merged into a single yaml file:\n\n```yaml\nname: test-spec-yaml\nexamples: examples\ndescription: |\n  this is a test.\nshow_files:\n  test: SHOW_FILE\nworkflows:\n  test_execution:\n    type: ExecutionMetaflow\n    className: TestPipeline\n    py: train/flow.py\n    dockerfile:\n      cpu: train/Dockerfile\n      gpu: train/DockerfileGPU\n    annotations:\n      artifacts.ai.sap.com/datain.kind: dataset\n      artifacts.ai.sap.com/trainedmodel.kind: model\n    metaflow:\n      - --package-suffixes=.py,.s\n```\n\nCurrently there is no discovery mechanism for yaml specs.\n\nThey either have to be consumed in python:\n\n```python\nfrom ai_core_sdk.content import ContentPackage\ncontent_package = ContentPackage.from_yaml(spec_yaml)\n```\n\nor made available to the CLI through the `aicore-content -c <path to the spec yaml> ...` option or through the `AI_CORE_CONTENT_SPECS` environment variable.\n\n## Tracking\n\n The tracking module of the SAP AI Core SDK can be used to log metrics in both your local environment, and productive workflow executions. Metrics persistence is currently available in your productive environment.\n\n Here are a few code samples demonstrating how to use the SDK for metrics tracking.\n\n\n### Modify Metrics\n\n ```\n from ai_core_sdk.tracking import Tracking\n\n from ai_core_sdk.models import Metric, MetricTag, MetricCustomInfo\n\n tracking_client = Tracking()\n\n tracking_client.modify(\n    tags = [\n        # list\n        MetricTag(name=\"Our Team Tag\", value=\"Tutorial Team\"),\n        MetricTag(name=\"Stage\", value=\"Development\")\n    ],\n    metrics = [\n        Metric(\n            name=\"Training Loss\",\n            value=np.finfo(np.float64).max,\n            timestamp= datetime.now().utcnow(),\n            step = 1, # denotes epoch 1\n            labels = []\n        )\n    ],\n    custom_info = [\n        # list of Custom Information\n         MetricCustomInfo(\n             name = \"My Classification Report\",\n             # you may convert anything to string and store it\n             value = str('''{\n                 \"Cats\": {\n                     \"Precision\": 75,\n                     \"Recall\": 74\n                 },\n                 \"Dogs\": {\n                     \"Precision\": 85,\n                     \"Recall\": 84\n                 }\n             }''')\n        )\n    ]\n )\n\n ```\n\n ### Log Metrics\n\n ```\n tracking_client.log_metrics(\n    metrics = [\n        Metric(\n            name=\"Training Loss\",\n            value=float(86.99),\n            timestamp= datetime.now().utcnow(),\n            step = 1, # denotes epoch 1\n            labels = []\n        ),\n    ],\n )\n\n ```\n\n ### Set Tags\n\n ```\n tracking_client.set_tags(\n    tags = [\n        # list\n        MetricTag(name=\"Our Team Tag\", value=\"Tutorial Team\"),\n        MetricTag(name=\"Stage\", value=\"Development\")\n    ]\n )\n\n ```\n\n ### Set Custom Info\n\n ```\n tracking_client.set_custom_info(\n    custom_info = [\n        # list of Custom Information\n         MetricCustomInfo(\n             name = \"My Classification Report\",\n             # you may convert anything to string and store it\n             value = str('''\n             {\n                 \"Cats\": {\n                     \"Precision\": 75,\n                     \"Recall\": 74\n                 },\n                 \"Dogs\": {\n                     \"Precision\": 85,\n                     \"Recall\": 84\n                 }\n             }\n             '''\n             )\n        ),\n    ]\n )\n\n ```\n  ### Query Metrics\n\n ```\n metrics_response = tracking_client.query(execution_ids = [\n    \"test_execution_id\"    # Change this with the training execution id\n ])\n ```\n\n  ### Delete Metrics\n\n ```\n metrics_response = tracking_client.delete(execution_id = \"test_execution_id\") # Change this with the actual execution id\n ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/ai-core-sdk",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.sap.com/",
    "keywords": "SAP AI Core SDK,SAP AI Core API,SAP AI Core",
    "license": "SAP DEVELOPER LICENSE AGREEMENT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ai-core-sdk",
    "package_url": "https://pypi.org/project/ai-core-sdk/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/ai-core-sdk/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/ai-core-sdk",
      "Homepage": "https://www.sap.com/"
    },
    "release_url": "https://pypi.org/project/ai-core-sdk/1.19.2/",
    "requires_dist": [
      "ai-api-client-sdk (==1.26.2)",
      "sap-ai-core-metaflow[kubernetes] (~=1.1.1) ; extra == 'aicore-content'",
      "click (~=8.0.4) ; extra == 'aicore-content'",
      "awscli (~=1.22.94) ; extra == 'aicore-content'",
      "python-dotenv (~=0.19.2) ; extra == 'aicore-content'",
      "sap-ai-core-metaflow[kubernetes] (~=1.1.1) ; extra == 'all'",
      "click (~=8.0.4) ; extra == 'all'",
      "awscli (~=1.22.94) ; extra == 'all'",
      "python-dotenv (~=0.19.2) ; extra == 'all'"
    ],
    "requires_python": ">=3.7",
    "summary": "SAP AI Core SDK",
    "version": "1.19.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17493851,
  "releases": {
    "1.10.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1b066b9e4dbc35a1bb31dd07902e89c0ace4f529b974ba5bb9ecbfec2415caa",
          "md5": "2b222f33573d6cbcbf9cebc9c6214b49",
          "sha256": "12a64ba95df86ec6fb099d04d43d5b9143ad4284a821432c5a7a5b96a22f6c31"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.10.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b222f33573d6cbcbf9cebc9c6214b49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 81622,
        "upload_time": "2022-04-11T08:02:08",
        "upload_time_iso_8601": "2022-04-11T08:02:08.130186Z",
        "url": "https://files.pythonhosted.org/packages/a1/b0/66b9e4dbc35a1bb31dd07902e89c0ace4f529b974ba5bb9ecbfec2415caa/ai_core_sdk-1.10.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dc15540a3f34ff9050a1ba9f56186005d26a0692752ab1b1e56b2c68fff3132",
          "md5": "d4f476a58038b1728853715d3a6f6212",
          "sha256": "2cb50d3bb33b1fbcd889774669df6b5ffafa5a0f6bf845e0f6eac1c9f6804cac"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4f476a58038b1728853715d3a6f6212",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83108,
        "upload_time": "2022-05-09T13:59:01",
        "upload_time_iso_8601": "2022-05-09T13:59:01.613871Z",
        "url": "https://files.pythonhosted.org/packages/4d/c1/5540a3f34ff9050a1ba9f56186005d26a0692752ab1b1e56b2c68fff3132/ai_core_sdk-1.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.13.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48eee354f6bc65c503d607baa4be1668a3c1714757464b4e3f4170edd5f88736",
          "md5": "33d4a838a06711d409302122d14e5bd3",
          "sha256": "a8c5ab6ed61ad6ef9b14de8d196e1f58cd602cddc2f2c30e7b747a6e3391806a"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.13.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33d4a838a06711d409302122d14e5bd3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 104081,
        "upload_time": "2022-06-09T09:59:20",
        "upload_time_iso_8601": "2022-06-09T09:59:20.817580Z",
        "url": "https://files.pythonhosted.org/packages/48/ee/e354f6bc65c503d607baa4be1668a3c1714757464b4e3f4170edd5f88736/ai_core_sdk-1.13.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.13.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38cca13677a194fe69adbebfece992c76504edc84651fcfa8c0539b9b1794408",
          "md5": "246fbf7bc8fce2de4cd212fd72bed462",
          "sha256": "e0dc0a5eb2b7621d613454fbd47c619e11213a2138f38a8700df001a7c2bdee2"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.13.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "246fbf7bc8fce2de4cd212fd72bed462",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 114673,
        "upload_time": "2022-06-15T10:21:06",
        "upload_time_iso_8601": "2022-06-15T10:21:06.356697Z",
        "url": "https://files.pythonhosted.org/packages/38/cc/a13677a194fe69adbebfece992c76504edc84651fcfa8c0539b9b1794408/ai_core_sdk-1.13.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.13.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55329b3f111282294e48b8a17ecfa9819b5688f7645d18bfc7474bdf97dcf8c9",
          "md5": "494f89bbe0f908d38c5c2e2a42c5980a",
          "sha256": "14e59c29246d77fd8cf20781fc8781cbafa4747e38263e61e9cdaf5a88198ebe"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.13.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "494f89bbe0f908d38c5c2e2a42c5980a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 118839,
        "upload_time": "2022-06-30T13:54:31",
        "upload_time_iso_8601": "2022-06-30T13:54:31.649725Z",
        "url": "https://files.pythonhosted.org/packages/55/32/9b3f111282294e48b8a17ecfa9819b5688f7645d18bfc7474bdf97dcf8c9/ai_core_sdk-1.13.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.14.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d6ee0358d3164568646494ea1770f888ef2e2763fb77b9158558be6da37aec7",
          "md5": "977d184f46a114f6eb5608fab087f5bc",
          "sha256": "8a55bbe9734d2d25615e00b5161b4458d45f307cd64090f9dfff48431295f690"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.14.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "977d184f46a114f6eb5608fab087f5bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 127968,
        "upload_time": "2022-07-21T12:50:42",
        "upload_time_iso_8601": "2022-07-21T12:50:42.534477Z",
        "url": "https://files.pythonhosted.org/packages/2d/6e/e0358d3164568646494ea1770f888ef2e2763fb77b9158558be6da37aec7/ai_core_sdk-1.14.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.15.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "987e8409f26956d978ce6a01700a133c6c693f84e922e2a56c1ce4a9bfca30a8",
          "md5": "7eb6cec4f37160888bc2285ae4311507",
          "sha256": "57aace2536202d0e7fb072eaf84b61fb05d15a522165f0f3b7fa5468b6db7a8b"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.15.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7eb6cec4f37160888bc2285ae4311507",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 129281,
        "upload_time": "2022-08-02T08:42:49",
        "upload_time_iso_8601": "2022-08-02T08:42:49.132641Z",
        "url": "https://files.pythonhosted.org/packages/98/7e/8409f26956d978ce6a01700a133c6c693f84e922e2a56c1ce4a9bfca30a8/ai_core_sdk-1.15.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.16.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55e3b94ddee97c49ed6f75752181f6af687f11dac8153c5b5958d97e299b514",
          "md5": "adbbc05a927271f1623b4d96313dad24",
          "sha256": "54961bbaf5f99a0c1c57fd2f2e4a4fe6adadf0aceaf54cc7fbe2c50a400f8fdc"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.16.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adbbc05a927271f1623b4d96313dad24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 129298,
        "upload_time": "2022-09-02T21:39:43",
        "upload_time_iso_8601": "2022-09-02T21:39:43.990605Z",
        "url": "https://files.pythonhosted.org/packages/e5/5e/3b94ddee97c49ed6f75752181f6af687f11dac8153c5b5958d97e299b514/ai_core_sdk-1.16.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.17.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7d94e16e8df460791727644e19e5c54e95e696e7631f48e7d3cdfca0277d662",
          "md5": "9f04aeb3f4f4e37601c81d6d4c4705c6",
          "sha256": "c6b251a3ce0a0aefe7f41a79d305df0f1cc7a18930bef71fccfc509098acbbb4"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.17.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f04aeb3f4f4e37601c81d6d4c4705c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 128069,
        "upload_time": "2022-09-29T08:42:50",
        "upload_time_iso_8601": "2022-09-29T08:42:50.285152Z",
        "url": "https://files.pythonhosted.org/packages/f7/d9/4e16e8df460791727644e19e5c54e95e696e7631f48e7d3cdfca0277d662/ai_core_sdk-1.17.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.18.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8309ef4fcd08227d6d08436cda496067e347855d91aeb109f3889f15c4bb9dd0",
          "md5": "6437ff079ac5620d61ca4fa3b9f2b84f",
          "sha256": "eb3b43ef1ee4ecc22cdb009b48680ae07a3cdd24c10987f9c7d84d7bfb5890d1"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.18.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6437ff079ac5620d61ca4fa3b9f2b84f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 128666,
        "upload_time": "2022-12-07T13:20:05",
        "upload_time_iso_8601": "2022-12-07T13:20:05.221930Z",
        "url": "https://files.pythonhosted.org/packages/83/09/ef4fcd08227d6d08436cda496067e347855d91aeb109f3889f15c4bb9dd0/ai_core_sdk-1.18.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.19.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66ff2e28a3e181618e7177089a1340a854c615b6f00d0c49efe5da077865f71e",
          "md5": "53172b233bc779635f2bd4b1e72e8209",
          "sha256": "c53d325bf25737508dceb2859e5f18b1906e9e8d39cf802b0ebd0e53b376a616"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.19.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53172b233bc779635f2bd4b1e72e8209",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 131699,
        "upload_time": "2023-02-16T13:46:29",
        "upload_time_iso_8601": "2023-02-16T13:46:29.382252Z",
        "url": "https://files.pythonhosted.org/packages/66/ff/2e28a3e181618e7177089a1340a854c615b6f00d0c49efe5da077865f71e/ai_core_sdk-1.19.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.19.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a7ad4a0e5539ba09c5d5b280dbe43ef77f5b1a51460c46c4e6a30556d7cf54",
          "md5": "1daa31afd554c783c58089ed55a96f96",
          "sha256": "b4ef6180bdd3afe789efeeea6f067d60eac5e217e2578cadd31d215d83d93a2a"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.19.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1daa31afd554c783c58089ed55a96f96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 137409,
        "upload_time": "2023-03-29T12:55:31",
        "upload_time_iso_8601": "2023-03-29T12:55:31.012986Z",
        "url": "https://files.pythonhosted.org/packages/d9/a7/ad4a0e5539ba09c5d5b280dbe43ef77f5b1a51460c46c4e6a30556d7cf54/ai_core_sdk-1.19.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "682e0d9724e4be9126bc8d3ca82fc09d71ef7760b37054f964d3ba8cd6317cb8",
          "md5": "562d7b65934a84ac97ca5045eaf97b64",
          "sha256": "5b99a2337d6a74cfa01b1e791063df556ba088cc6e3f4c347c3595c269098083"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.5.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "562d7b65934a84ac97ca5045eaf97b64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 48304,
        "upload_time": "2021-11-29T08:22:00",
        "upload_time_iso_8601": "2021-11-29T08:22:00.114760Z",
        "url": "https://files.pythonhosted.org/packages/68/2e/0d9724e4be9126bc8d3ca82fc09d71ef7760b37054f964d3ba8cd6317cb8/ai_core_sdk-1.5.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "830ad3131a3e09286d804093b3042983d61b6002cf5e167f06975739545a8b2b",
          "md5": "288528fa03a55ef0f02de1dde3159d70",
          "sha256": "37294edf4295392ac779d367406098653f0176a60a31f6b98b4c3f488da2cf8d"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.5.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "288528fa03a55ef0f02de1dde3159d70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 48327,
        "upload_time": "2021-12-06T14:31:55",
        "upload_time_iso_8601": "2021-12-06T14:31:55.539074Z",
        "url": "https://files.pythonhosted.org/packages/83/0a/d3131a3e09286d804093b3042983d61b6002cf5e167f06975739545a8b2b/ai_core_sdk-1.5.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd94527373c2889840affd592ee9469078213206e9d1eb4bb37e68b02b15b7b8",
          "md5": "8fd869fef9a71ced82d057e047e03919",
          "sha256": "e5a0c5ed954dc5a7a5111d2ed8a1c4e3da85a446b877c96008eb5f73ae1e497c"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.5.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fd869fef9a71ced82d057e047e03919",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29922,
        "upload_time": "2021-12-13T10:34:31",
        "upload_time_iso_8601": "2021-12-13T10:34:31.600062Z",
        "url": "https://files.pythonhosted.org/packages/bd/94/527373c2889840affd592ee9469078213206e9d1eb4bb37e68b02b15b7b8/ai_core_sdk-1.5.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88d2acd16fd92f117a1e327702ca4c76881e4c01b7dfa9dc1470ebb02f942ea1",
          "md5": "63be24d6fc6550dff0f57d4b60960913",
          "sha256": "190169fc8bd6649137a8589e129f4f4e281de0b6b2398bde296d5384335c217b"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.5.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63be24d6fc6550dff0f57d4b60960913",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 81044,
        "upload_time": "2022-02-01T10:51:30",
        "upload_time_iso_8601": "2022-02-01T10:51:30.959646Z",
        "url": "https://files.pythonhosted.org/packages/88/d2/acd16fd92f117a1e327702ca4c76881e4c01b7dfa9dc1470ebb02f942ea1/ai_core_sdk-1.5.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "583d16d913835db878677b3f95227716828ad5d6dc248635c3ad7d0a2c4d9610",
          "md5": "68a47850223d7f09dc26ecb0b11ebd41",
          "sha256": "d6c10874ef09126fd14e1f727827be634c161e684095b057d154ad6096347d34"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68a47850223d7f09dc26ecb0b11ebd41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 81467,
        "upload_time": "2022-02-02T13:18:08",
        "upload_time_iso_8601": "2022-02-02T13:18:08.457783Z",
        "url": "https://files.pythonhosted.org/packages/58/3d/16d913835db878677b3f95227716828ad5d6dc248635c3ad7d0a2c4d9610/ai_core_sdk-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dacf085f871d39c928648dfc6f6887d37753d092d3553d2bc81b8ce28590105",
          "md5": "72dd83559e449d453851432458c400b6",
          "sha256": "5d894c98adaafc4440f44cf1366d99cdc8796cc7b107f861c2d5f6383482d889"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72dd83559e449d453851432458c400b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 81525,
        "upload_time": "2022-02-15T15:02:48",
        "upload_time_iso_8601": "2022-02-15T15:02:48.876519Z",
        "url": "https://files.pythonhosted.org/packages/6d/ac/f085f871d39c928648dfc6f6887d37753d092d3553d2bc81b8ce28590105/ai_core_sdk-1.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9cb060bfe9fbb2f81c911a9a8eace15f785945e65167802c85efd5c35b8df56",
          "md5": "f1ef96da0aafa9eafe0a69d9b8c19514",
          "sha256": "fac4f2f7c69f5aa597a9f396db5bba716369b2699159e69ea3d36461d9c04914"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1ef96da0aafa9eafe0a69d9b8c19514",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82852,
        "upload_time": "2022-02-21T13:13:17",
        "upload_time_iso_8601": "2022-02-21T13:13:17.716460Z",
        "url": "https://files.pythonhosted.org/packages/a9/cb/060bfe9fbb2f81c911a9a8eace15f785945e65167802c85efd5c35b8df56/ai_core_sdk-1.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba87b8474d8104e70c126ccbbf8f70dd59da08ff2e9fc8ae474da03cebddba0",
          "md5": "de9a845fb8e8e962046b399ef51cd997",
          "sha256": "cca437d3a38d5d6fb5eaf48e0590f3e241069d6c0a3c0cce2785beee069fa786"
        },
        "downloads": -1,
        "filename": "ai_core_sdk-1.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de9a845fb8e8e962046b399ef51cd997",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82995,
        "upload_time": "2022-03-07T14:33:35",
        "upload_time_iso_8601": "2022-03-07T14:33:35.119288Z",
        "url": "https://files.pythonhosted.org/packages/6b/a8/7b8474d8104e70c126ccbbf8f70dd59da08ff2e9fc8ae474da03cebddba0/ai_core_sdk-1.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9a7ad4a0e5539ba09c5d5b280dbe43ef77f5b1a51460c46c4e6a30556d7cf54",
        "md5": "1daa31afd554c783c58089ed55a96f96",
        "sha256": "b4ef6180bdd3afe789efeeea6f067d60eac5e217e2578cadd31d215d83d93a2a"
      },
      "downloads": -1,
      "filename": "ai_core_sdk-1.19.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1daa31afd554c783c58089ed55a96f96",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 137409,
      "upload_time": "2023-03-29T12:55:31",
      "upload_time_iso_8601": "2023-03-29T12:55:31.012986Z",
      "url": "https://files.pythonhosted.org/packages/d9/a7/ad4a0e5539ba09c5d5b280dbe43ef77f5b1a51460c46c4e6a30556d7cf54/ai_core_sdk-1.19.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}