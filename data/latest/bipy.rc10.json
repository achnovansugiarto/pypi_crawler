{
  "info": {
    "author": "Adrien Schurger-Foy",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# BIpy package\n\nPython package to help build experiments at the Brain Institute. It’s main purpose is to help using the real-time BCI.\n\n\n## Module contents\n\nBCI:<br>\nbci.classifier_process.run_classifier<br>\nbci.classifier_process.ClassifierProcess\n\nbci.inlets.WindowInlet<br>\nbci.inlets.ClassifierInlet\n\nbci.models.DummyClassifier<br>\nbci.models.get_trained_CSP_LDA\n\nbci.stims.NeuroFeedbackStim\n\nbci.training_session.TraininSession\n\nData Processing:<br>\ndata_processing.default_instructed_trigmap<br>\ndata_processing.default_free_trigmap<br>\ndata_processing.fc_c_cp_1through6<br>\ndata_processing.organize_xdf<br>\ndata_processing.get_sliding_window_partition<br>\ndata_processing.lowpass_filter<br>\ndata_processing.LowpassWrapper\n\nSession:<br>\nsession.Session\n\nOther:<br>\nelectrode_info.csv<br>\nelectrode_info.json\n\n\n### Example usage of Session\n```python\n    from BIpy.sesssion import Session\n    import random\n    import numpy as np\n\n    # [OMITTED]: Psychopy stuff such as making window, stims...\n\n    def instructions(logger):\n        # display some instructions\n        text_stim.draw()\n        win.flip()\n        event.waitKeys()\n        # hide this trial so it doesn't show up in the saved csv file\n        logger.hide_trial()\n\n    def discrimination_RT_trial(logger):\n        # wait for keypress to start trial\n        event.waitKeys()\n\n        # present fixation cross (random amount of time)\n        cross.draw()\n        win.flip()\n        core.wait(random.uniform(1,2))\n\n        # present l/r arrow at random\n        is_left = random.choice([0,1])\n        if is_left:\n            left_arrow.draw()\n        else:\n            right_arrow.draw()\n\n        # get reaction time\n        win.flip()\n        key_pressed, RT = event.waitKeys(keyList=['0', '1'], timeStamped=core.Clock())[0]\n\n        # log key pressed, RT, and which arrow was displayed to a csv file\n        info = {'RT': RT, 'key_pressed': key_pressed, 'is_left': is_left}\n        logger.log(info)\n\n        # get current block and trial number\n        current_block_num, current_trial_num = logger.get_current()\n        # get all past trials this block\n        past_trials = logger.log_history[current_block_num][:current_trial_num]\n        # get average past correct reaction time for the current block\n        mean_rt = np.mean([ trial['rt'] for trial past_trials if str(trial['is_left']) == trial['key_pressed'] ])\n\n        # display feedback to the participant\n        if str(is_left) != key_pressed:\n            text_stim.text = 'Wrong side!'\n        elif RT > mean_rt:\n            text_stim.text = 'Slower than average'\n        else:\n            text_stim.text = 'Faster than average'\n\n        text_stim.draw()\n        win.flip()\n        core.wait(1)\n\n\n\n\n    # set up trials and blocks\n    # first block will just be instructions \n    instruction_block = [instructions]\n    # second block will be 4 discrimination RT trials\n    trial_block = [discrimination_RT_trial, discrimination_RT_trial, discrimination_RT_trial, discrimination_RT_trial]\n    blocks = [instruction_block, trial_block]\n\n    # some info about the experiment we might want saved\n    refresh_rate = win.monitorFramePeriod\n    sess_id = input('Enter session id:')\n    info = {'sess_id': sess_id, 'refresh_rate': refresh_rate}\n\n    session = Session(info, blocks)\n    session.run()\n\n    # exit Psychopy\n    win.close()\n    core.quit()\n```\n\n### Example usage of BCI\n```python\n    import BYpy.bci as bci\n    import numpy as np\n    from Psychopy import event, core, visual\n    from pylsl import resolve_stream, StreamInlet\n    # do Psychopy stuff\n    win = visual.Window(monitor='testMonitor', fullscr=True)\n    text_stim = visual.TextStim(win, color='grey')\n\n\n    # train classifier on previously recorded data\n    data = np.load('some_data.npy')\n    labels = np.load('some_labels.npy')\n\n    clf = bci.models.get_trained_CSP_LDA(data, labels)\n\n    # start a classifier process that runs in the background, \n    # in_source_id='myuid323457' corresponds to the stream of data from dry eeg that will be classified via CSP + LDA\n    # window_size=500 means the classifier will use the past 500 samples from the dry eeg as input\n    clfproc = bci.classifier_process.ClassifierProcess(clf, in_source_id='myuid323457', out_source_id='classifier_output', window_size=500)\n\n    # listen to the output of the classifier\n    inlet = bci.inlets.ClassifierInlet(source_id='classifier_output')\n\n    for _ in range(100):\n        # get a new sample from the classifer every second for 100 seconds\n        core.wait(1)\n        sample, timestamp = inlet.pull_sample()\n\n        # display the classifier's prediction on screen\n        text_stim.text = str(sample)\n        text_stim.draw()\n        win.flip()\n\n    \n    # stop the classifier process, if not it could keep running in the background indefinetly\n    clfproc.kill()\n    clfproc.join()\n    clfproc.close()\n\n    # exit Psychopy\n    win.close()\n    core.quit()\n```\n\n### Example usage of TrainingSession\n```python\n    from training_session import TrainingSession\n    from psychopy import visual, core\n\n    win = visual.Window(monitor='testMonitor', fullscr=True)\n\n    sess = TrainingSession(win, iterations=5, trials_per_iteration=20)\n\n    sess.run()\n    win.close()\n    core.quit()\n```\n\n\n\n## Submodules\n\n## BIpy.data_processing module\n\n\n### class BIpy.data_processing.LowpassWrapper(lowcut=70, sf=500, order=6, axis=2)\nBases: `sklearn.base.TransformerMixin`\n\nWrapper class for using lowpass_filter in an sklearn pipeline\n\nfit_transform(data)\n\n    Low pass filters data\n\ntransform(data) = fit_transform\n\n    Also low pass filters data\n\n\n#### \\__init__(lowcut=70, sf=500, order=6, axis=2)\nlowcut\n\n    Upper limit in hz, above which frequencies are filtered out.\n    Default 70\n\nsf\n\n    Sampling frequency, defualt 500\n\norder\n\n    Passed to scipy.signal.butter, default 6\n\naxis\n\n    Axis along which the filter is performed, with axis=2 it can filter the entire data cube at once\n    Default 2, and default should always be used with input data shape (trials, channels, time)\n\n\n### BIpy.data_processing.get_sliding_window_partition(data, labels, window_size, step=1)\nSplits data into several windows. Deprecated (waste of memory)\n\ndata\n\n    EEG data with shape (trials, channels, time)\n\nlabels\n\n    1d array of integer labels corresponding to left/right\n\nwindow_size\n\n    Size in samples (not time) of the windows the data will be split into\n    If window_size corresponds to the number of recorded samples per trial, the function returns the input data and labels unchaged\n\nstep\n\n    Step size of the sliding window\n\nwindowed_data\n\n    Array of shape (windows, channels, time)\n\nwindowed_labels\n\n    1d array of labels corresponding to each window\n\n\n### BIpy.data_processing.get_windows(data, labels, window_size, step_size)\nSplits data into several windows\n\ndata\n\n    EEG data with shape (trials, channels, time)\n\nlabels\n\n    1d array of integer labels corresponding to left/right\n\nwindow_size\n\n    Size in samples (not time) of the windows the data will be split into\n    If window_size corresponds to the number of recorded samples per trial, the function returns the input data and labels unchaged\n\nstep\n\n    Step size of the sliding window\n\nwindowed_data\n\n    Array of shape (windows, channels, time)\n\nwindowed_labels\n\n    1d array of labels corresponding to each window\n\n\n### BIpy.data_processing.lowpass_filter(data, lowcut=70, sf=500, order=6, axis=2)\nLow pass filter\n\ndata\n\n    Shape (trials, channels, time)\n\nlowcut\n\n    Upper limit in hz, above which frequencies are filtered out.\n    Default 70\n\nsf\n\n    Sampling frequency, defualt 500\n\norder\n\n    Passed to scipy.signal.butter, default 6\n\naxis\n\n    Axis along which the filter is performed, with axis=2 it can filter the entire data cube at once\n    Default 2, and default should always be used with input data shape (trials, channels, time)\n\ny\n\n    Filtered data, of same shape as input\n\n\n### BIpy.data_processing.organize_xdf(xdf_filename, trial_duration, gelled_indeces=[5, 6, 7, 10, 11, 21, 22, 24, 27, 28, 38, 39, 40, 42, 53, 55, 56, 57], stim_channel=67, instructed_trigger_map={'instructed_left': 12, 'instructed_right': 13})\nFunction to organize motor imagery xdf data into labeled epochs. Does not support free trials\n\nFree tip: avoid using xdf data wherever possible\n\nxdf_filename\n\n    The file location of the xdf data to load and organize\n\ntrial_duration\n\n    The duration in seconds of each motor imagery trial\n\ngelled_indeces\n\n    The indices of relevant electrodes, the data from all other electrodes will be discarded.\n    By default fc_c_cp_1through6, the indeces corresponding to electrodes fc, c, and cp 1 through 6, found to be most useful for BCI\n    Index <=> electrode mappings can be found in BIpy.electrode_info.csv\n\nstim_channel\n\n    The channel used for triggers/events, by default 67\n\ninstructed_trigger_map\n\n    Trigger/event values for instructed left/right motor imagery trials, with keys instructed_left, instructed_right\n    and int or list of int values\n\norganized_data\n\n    Numpy array of shape (trials, channels, time) containing extracted epochs\n\nlabels\n\n    Numpy array of shape (trials,) where labels[trial_num] corresponds to organized_data[trial_num]\n    The labels are integers corresponing to instructed_trigger_map[instructed_left] and instructed_trigger_map[instructed_right]\n\n\n### BIpy.data_processing.sliding_window_iter(total_size, window_size)\nHelper function to get a sliding window view of indexes\n\n## BIpy.session module\n\n\n### class BIpy.session.Session(info, blocks, use_json=False, hide_info=False, suppress_save=False)\nBases: `object`\n\nA class that handles the execution and data collection of a Psychopy experiment\n\ninfo\n\n    Information about the session, ex: {‘session_id’: 1234}\n\nblocks\n\n    List of blocks, each block a list of trials, each trial a function that takes exactly one input: ‘logger’\n    each trial function should execute the intended trial\n\nuse_json\n\n    Flag to indicate whether or not to save data to json on calling save()\n\nto_hide\n\n    List of trials to be ignored when saving to csv\n\nlog_history\n\n    Used to store trial data on call of log()\n\n_iq\n\n    Index queue, list of tuples corresponding to the indeces of each trial function in blocks\n\nrun\n\n    Iterates through and runs all trial functions of blocks in order\n\nlog(to_log: dict, save_to_file=True)\n\n    Stores to_log in log_history[current_block_num][current_trial_num]\n\nhide_trial\n\n    Marks current trial to be ignored when saving to csv\n\nsave\n\n    Attempts to find an apropriate filename, and calls save_to_csv(filename)\n    if use_json is True, also calls save_to_json(filename)\n\nsave_to_csv(filename)\n\n    Saves the Session’s info, and log_history to filename in csv format\n\nget_current\n\n    Returns the current block and trial nuber\n\nsave_to_json(filename)\n\n    Saves as much information about the current Session object as possible to filename in json format\n\n\n#### \\__init__(info, blocks, use_json=False, hide_info=False, suppress_save=False)\ninfo\n\n    Information about the session, ex: {‘session_id’: 1234}\n\nblocks\n\n    List of blocks, each block a list of trials, each trial a function that takes exactly one input: ‘logger’\n    each trial function should execute the intended trial\n\nuse_json\n\n    Flag to indicate whether or not to save data to json on calling save()\n\nsuppress_save\n\n    Flag to indicate log() calls should never save to file save to file\n\nhide_info\n\n    Flag to indicate if ‘info’ should be saved to csv\n\n\n#### get_current()\nReturns the current block and trial nuber: tuple (block, trial)\n\n\n#### hide_trial()\nMarks current trial to be ignored when saving to csv\n\n\n#### log(to_log, save_to_file=True)\nStores to_log in log_history[current_block_num][current_trial_num]\n\nto_log: dict\n\n    Python dict with information to save from the current trial, ex: {‘RT’: .129486}\n\nsave_to_file: bool, defaul=True\n\n    Flag to save data to file\n    this can take time so set to False if you want to log some data but the current trial needs strict timing,\n    then call Session.save() a the end of the experiment\n\n\n#### run()\nIterates through and runs all trial functions of blocks in order\n\n\n#### save()\nAttempts to find an apropriate filename, and calls save_to_csv(filename)\n\nIf self.use_json is True, also calls save_to_json(filename)\n\n\n#### save_to_csv(filename)\nSaves the Session’s info, and log_history to filename in csv format\n\nfilename : str\n\n\n#### save_to_json(filename)\nSaves as much information about the current Session object as possible to filename in json format\n\nfilename : str\n\n\n### BIpy.session.is_jsonable(x)\n\n\n## BIpy.bci.classifier_process module\n\n\n### BIpy.bci.classifier_process.ClassifierProcess(clf, in_source_id='myuid323457', out_source_id='classifier_output', stream_no=0, window_size=500)\nReturns a multiprocessing.process of run_classifier\n\nclf\n\n    Classifier to run\n\nin_source_id\n\n    Pylsl stream source_id of incoming data to be fed to the classifier\n\n        Default myuid323457 - dry EEG, for ActiChamp use 17010768\n\nout_source_id\n\n    Pylsl stream source_id for output of the classifier\n    Default ‘classifier_output’\n\nstrem_no\n\n    Index of the stream. Should be 0 or 1, ask Tian for help on this\n    Default 0\n\nwindow_size\n\n    Number of samples required as input to the provided classifier clf\n    If None, the function will attenpt to get this from clf.window_size\n    Default None\n\nmultiprocessing.process() of BIpy.classifier_process.run_classifier()\n\n\n### BIpy.bci.classifier_process.run_classifier(clf, in_source_id='myuid323457', out_source_id='classifier_output', stream_no=0, window_size=None)\nRuns a real-time classifier untill killed\n\nclf\n\n    Classifier to run. Must be able to take the output of WindowInlet.pull_window() as input to clf.predict_proba(), \n    and clf.predict_proba(data) must output a single float\n\nin_source_id\n\n    Pylsl stream source_id of incoming data to be fed to the classifier\n\n        Default myuid323457 - dry EEG, for ActiChamp use 17010768\n\nout_source_id\n\n    Pylsl stream source_id for output of the classifier\n\nstrem_no\n\n    Index of the stream. Should be 0 or 1, ask Tian for help on this\n    Default 0\n\nwindow_size\n\n    Number of samples required as input to the provided classifier clf\n    If None, the function will attenpt to get this from clf.window_size\n\nFor every input recieved, immediately pushes the provided classifiers output (predict_proba(data)) to lsl\n\n## BIpy.bci.inlets module\n\n\n### class BIpy.bci.inlets.ClassifierInlet(source_id='classifier_output')\nBases: `object`\n\nA class used like a pylsl inlet, but made for getting the output of a real-time classifier\n\ninlet\n\n    Pylsl inlet from which the output of a classifier is pulled\n\npull_sample\n\n    returns inlet.pull_sample()\n\n\n#### \\__init__(source_id='classifier_output')\nsource_id\n\n    Pylsl stream source_id for incoming data\n    Default ‘classifier_output’\n\n\n#### pull_sample()\nreturns inlet.pull_sample()\n\n\n### class BIpy.bci.inlets.WindowInlet(source_id='myuid323457', stream_no=0, window_size=500)\nBases: `object`\n\nA class used like a pylsl inlet, but that returns window_size past samples on each pull_window\nAttributes\n———-\ninlet : pylsl.StreamInlet\n\n> Pylsl inlet from which real-time EEG data is pulled\n\nwindow_size\n\n    Width in samples (not seconds) of the sliding window\n\nwindow\n\n    List of window_size last samples pulled from inlet\n\npull_window\n\n    Pulls the last window_size from inlet\n\n\n#### \\__init__(source_id='myuid323457', stream_no=0, window_size=500)\n> source_id\n\n>     Pylsl stream source_id of incoming data buffered for sliding window\n>     Default myuid323457 - dry EEG, for ActiChamp use 17010768\n\n> stream_no\n\n>     Index of the stream. Should be 0 or 1, ask Tian for help on this\n>     Default 0\n\n> window_size\n\n>     Number of past samples returned on call of pull_window\n>     Default 500\n\n> transpose_output\n\n>     If True transposes the output of the window so that it has the shape expected by mne’s CSP\n\n\n#### pull_window(window_size=None, timeout=0.25)\nPulls the last window_size samples from inlet\n\nwindow_size\n\n    Width in samples (not seconds) of the sliding window\n    If None, uses self.window_siz, Default None\n\ntimeout\n\n    Timeout in seconds passed to pylsl.inlet.pull_chunk\n    Default .25\n\nwindow\n\n    list of window_size last samples pulled from inlet\n\n## BIpy.bci.models module\n\n\n### class BIpy.bci.models.DummyClassifier()\nBases: `object`\n\nDummy classifier for testing purpose\n\n\n#### \\__init__()\n\n#### predict_proba(data)\nreturns input[0]\n\n\n### class BIpy.bci.models.WrappedCSPLDAClassifier(data_channels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], window_size=1000, preprocessing=<BIpy.data_processing.LowpassWrapper object>)\nBases: `object`\n\nWrapper class for using an sklearn csp+lda pipeline in a BIpy.bci.ClassifierProcess\n\npredict_proba(self, window: np.array)\n\n    takes the output form a WindowInlet and returns the probability (according to the csp+lda classifier) that the right hand was imagined\n\ndef fit(self, data, labels):\n\n    calls fit(data, labels) on the csp+lda classifier\n\n\n#### \\__init__(data_channels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], window_size=1000, preprocessing=<BIpy.data_processing.LowpassWrapper object>)\ndata_channels\n\n    Channels that the classifier should use as input\n\nwindow_size\n\n    number of samples of eeg data the classifier should use as input\n\npreprocessing\n\n    Step added to the start of the csp+lda sklearn pipeline\n\n\n#### fit(data, labels)\ncalls fit(data, labels) on the csp+lda classifier\n\n\n#### predict_proba(window)\ntakes the output form a WindowInlet and returns the probability (according to the csp+lda classifier) that the right hand was imagined\n\n\n### BIpy.bci.models.get_trained_CSP_LDA(data, labels, window_size=None, preprocessing=<BIpy.data_processing.LowpassWrapper object>, step_size=None)\nReturns a trained sklearn pipeline of [csp, lda]\n\ndata\n\n    Data to train the classifier on\n    Shape (trials, channels, time)\n\nlabels\n\n    1d array of labels to the training data\n\nwindow_size\n\n    Size in samples (not seconds) the classifier should be trained on\n    If None, the function will trian with each entire trial as input\n    Default None\n\npreprocessing\n\n    Preprocessing step to add at the beggining of the sklearn pipeline\n    Default BIpy.preprocessing.LowpassWraspper()\n\nstep_size\n\n    Stride/step size passed to BIpy.data_processing.get_windows()\n    If None, classifier will be trained on raw data and get_windows() is never used\n\nclf\n\n    A trained csp + lda Pipeline\n\n## BIpy.bci.stims module\n\n\n### class BIpy.bci.stims.NeuroFeedbackStim(win, resolution)\nBases: `object`\n\nProgress bar style stim for displaying classifier output to the subject\n\ndraw(self, porportion=None)\n\n    draws the stim\n\n\n#### \\__init__(win, resolution)\nwin\n\n    window in which the stim will be drawn\n\nresolution\n\n    number of segments in on each side of the “progress bar”\n\n\n#### draw(proportion=None)\ndraws the stim\n\nproportion\n\n    value between 0 and 1. At 0 the “progress bar” reaches all the way to the left, and at 1 it reaches the right\n\n## BIpy.bci.training_session module\n\n\n### BIpy.bci.training_session.TrainingSession(win, iterations, trials_per_iteration, clf=<BIpy.bci.models.WrappedCSPLDAClassifier object>, trial_duration=4, sampling_rate=500, data_channels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], window_size=500, step_size=100, eeg_source_id='myuid323457', eeg_stream_no=0, resolution=6)\nReturns a Session object that runs an iterative training session.\n\nThe returned Session performs a block of neurofeedback trials, then re-trains the classifier on the newly collected data and runs a new block of neurofeedback trials. The EEG data, classifier predictions and true labels are saved to files. The defaults of this function are suitable for dry EEG\n\nwin\n\n    window in which the session will occur\n\niterations\n\n    number of blocks/ number of times the classifier is re-trained on new data\n\ntrials_per_iteration\n\n    number of trials per block\n\nclf\n\n    the classifier used to predict left/right motor imagery\n\ntrial_duration\n\n    duration in seconds of each trial\n\nsampling_rate\n\n    sampling rate of data sent to the EEG lsl stream\n\ndata_channels\n\n    indeces of the electrode channels the classifier should use as input\n\nwindow_size: int, default 500\n\n    number of samples the given classifier should take as input at once\n\nstep_size\n\n    the given classifier is trained on multiple windows spanning the data collected in one trial. step_size is the gap (in samples) between the start of each window.\n    if one trial contains 800 samples of eeg data, the window size is 400 and the step size is 200, then the classifier will be trained using 3 windows for each trial: samples 0-400, 200-600, and 400-800\n    the window size, step size and samples per trial need not line up perfectly, all data will be used for training regardless (but the last step size will differ from the rest)\n\neeg_source_id\n\n    Pylsl stream source_id of incoming eeg data to be fed to the classifier\n    Default myuid323457 - dry EEG, for ActiChamp use 17010768\n\neeg_stream_no\n\n    Index of the stream. Should be 0 or 1, ask Tian for help on this\n\nresolution\n\n    number of segments in on each side of the BIpy.bci.stims.NeuroFeedbackStim displayed on screen\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BIpy",
    "package_url": "https://pypi.org/project/BIpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/BIpy/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/BIpy/1/",
    "requires_dist": [
      "numpy (==1.20.3)",
      "pylsl (==1.13.6)",
      "psychopy (==2021.2.0)",
      "mne (==0.23.0)",
      "pyxdf (==1.16.3)",
      "scikit-learn (==0.24.2)"
    ],
    "requires_python": "",
    "summary": "py for BI",
    "version": "1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11213845,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c50738ab2eaaa88e0c755e7120f83b7380bfc1305a0d52867eaf207c07f20a09",
          "md5": "8de3a3c5a10b98d810cc1c0be5684f32",
          "sha256": "9d2c4165914ad76f464b1368764ed48ed7f788e97bdbb43c8e132a227bc8086d"
        },
        "downloads": -1,
        "filename": "BIpy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8de3a3c5a10b98d810cc1c0be5684f32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5716,
        "upload_time": "2021-06-15T01:44:33",
        "upload_time_iso_8601": "2021-06-15T01:44:33.796126Z",
        "url": "https://files.pythonhosted.org/packages/c5/07/38ab2eaaa88e0c755e7120f83b7380bfc1305a0d52867eaf207c07f20a09/BIpy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4952d4a4245dca2d1973778e5891e752e6aad50ffde9fdc75a653d690c9f70b9",
          "md5": "c891c0963ca0e32e2eb758b334104570",
          "sha256": "e3ea8a63c22e14bb6b5339d3beee083a6d2243d1e3312519257bd10f8277ba94"
        },
        "downloads": -1,
        "filename": "BIpy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c891c0963ca0e32e2eb758b334104570",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7180,
        "upload_time": "2021-06-15T01:59:17",
        "upload_time_iso_8601": "2021-06-15T01:59:17.445644Z",
        "url": "https://files.pythonhosted.org/packages/49/52/d4a4245dca2d1973778e5891e752e6aad50ffde9fdc75a653d690c9f70b9/BIpy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bc9c3628dbc27308d7a5b18ef2e8b6ec8333e0b0a24af49720f404c23f046ac",
          "md5": "5e750dc3b4d9281a0f841f5f0b9a6513",
          "sha256": "a83afe7a2711305df30fbf52ba7100eba8dd9b9a3a720d6c2eb2d0cc2180c82f"
        },
        "downloads": -1,
        "filename": "BIpy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e750dc3b4d9281a0f841f5f0b9a6513",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11966,
        "upload_time": "2021-06-21T01:18:28",
        "upload_time_iso_8601": "2021-06-21T01:18:28.133200Z",
        "url": "https://files.pythonhosted.org/packages/7b/c9/c3628dbc27308d7a5b18ef2e8b6ec8333e0b0a24af49720f404c23f046ac/BIpy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b8f4e91a8287a29d3304e944f6eb06678f2d16fd6d677dcbf1f93ced4921b29",
          "md5": "7e98dd8f5cf447ab0b51e09bd301e07c",
          "sha256": "d40ebbf3a49994e98e245c9b24a0f18fee9731755f4038a824561db7f35af802"
        },
        "downloads": -1,
        "filename": "BIpy-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e98dd8f5cf447ab0b51e09bd301e07c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12109,
        "upload_time": "2021-06-29T16:40:16",
        "upload_time_iso_8601": "2021-06-29T16:40:16.046780Z",
        "url": "https://files.pythonhosted.org/packages/5b/8f/4e91a8287a29d3304e944f6eb06678f2d16fd6d677dcbf1f93ced4921b29/BIpy-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a069ba5d7d01093e9ca7bc2dfc2d6cdf0bfd7be6f360ab4642ef6d113e8386b",
          "md5": "f9c268d5606263518b4190d10f78f58f",
          "sha256": "ee565eeaf50d64c9243377e607d2b4e0b49507449d34b48945698608152b517b"
        },
        "downloads": -1,
        "filename": "BIpy-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9c268d5606263518b4190d10f78f58f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12141,
        "upload_time": "2021-06-29T16:54:56",
        "upload_time_iso_8601": "2021-06-29T16:54:56.794337Z",
        "url": "https://files.pythonhosted.org/packages/5a/06/9ba5d7d01093e9ca7bc2dfc2d6cdf0bfd7be6f360ab4642ef6d113e8386b/BIpy-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab2e8c449dff82f082368c32cba18fe4d7332f8c9148e4adc443c413593c5f36",
          "md5": "72e77c3a9155edfdc35a6194b4400b12",
          "sha256": "bf10ec85d5986dfc71989f329fe6f0fd17791068e34058f600f2a5f14dd18178"
        },
        "downloads": -1,
        "filename": "BIpy-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72e77c3a9155edfdc35a6194b4400b12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12177,
        "upload_time": "2021-06-29T17:19:18",
        "upload_time_iso_8601": "2021-06-29T17:19:18.045052Z",
        "url": "https://files.pythonhosted.org/packages/ab/2e/8c449dff82f082368c32cba18fe4d7332f8c9148e4adc443c413593c5f36/BIpy-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49bbd13c7e9996e18fd6a2fab963fc615836b91c77272a26e5cf05fbbd8ab8c1",
          "md5": "2fe37166d3c14a9beb2b73163927cd6d",
          "sha256": "a2ef10da6b3c9e1702341b8bb3286ac4025c34a39b00047f26691c817f2f1960"
        },
        "downloads": -1,
        "filename": "BIpy-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fe37166d3c14a9beb2b73163927cd6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12176,
        "upload_time": "2021-06-29T17:23:46",
        "upload_time_iso_8601": "2021-06-29T17:23:46.350783Z",
        "url": "https://files.pythonhosted.org/packages/49/bb/d13c7e9996e18fd6a2fab963fc615836b91c77272a26e5cf05fbbd8ab8c1/BIpy-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88c85e62becfd560fa253157cc61abd49eda93ab3887a1fb8876f25d0b849223",
          "md5": "1c97b155158f479f3223f6366b9095db",
          "sha256": "8c62fbb634af6439f964132df935e8c1e07829df536b9d65292103002bda5c9f"
        },
        "downloads": -1,
        "filename": "BIpy-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c97b155158f479f3223f6366b9095db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12177,
        "upload_time": "2021-06-29T17:27:31",
        "upload_time_iso_8601": "2021-06-29T17:27:31.744671Z",
        "url": "https://files.pythonhosted.org/packages/88/c8/5e62becfd560fa253157cc61abd49eda93ab3887a1fb8876f25d0b849223/BIpy-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "436420a2cb0674f419866c1942d8ca638f9794935192a1d7e04937f20fc0b8e0",
          "md5": "231158d66931bddfe3a2daf96151a469",
          "sha256": "a03e6796f5dbffb69672cdf2984df0059ffb733a6eb369241ede821c86dcbd77"
        },
        "downloads": -1,
        "filename": "BIpy-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "231158d66931bddfe3a2daf96151a469",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12515,
        "upload_time": "2021-07-07T17:18:03",
        "upload_time_iso_8601": "2021-07-07T17:18:03.378782Z",
        "url": "https://files.pythonhosted.org/packages/43/64/20a2cb0674f419866c1942d8ca638f9794935192a1d7e04937f20fc0b8e0/BIpy-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88804f28989938706aa36820c5298f139b1f384afafd3564e086f2f542223f82",
          "md5": "0f4635395036c506c3cb47bea5d5a5bf",
          "sha256": "cc2f29912751ff104a3671788004dbdd4ea50ee5235e90779086c1cd3587521c"
        },
        "downloads": -1,
        "filename": "BIpy-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f4635395036c506c3cb47bea5d5a5bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22800,
        "upload_time": "2021-08-18T18:42:38",
        "upload_time_iso_8601": "2021-08-18T18:42:38.163216Z",
        "url": "https://files.pythonhosted.org/packages/88/80/4f28989938706aa36820c5298f139b1f384afafd3564e086f2f542223f82/BIpy-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88804f28989938706aa36820c5298f139b1f384afafd3564e086f2f542223f82",
        "md5": "0f4635395036c506c3cb47bea5d5a5bf",
        "sha256": "cc2f29912751ff104a3671788004dbdd4ea50ee5235e90779086c1cd3587521c"
      },
      "downloads": -1,
      "filename": "BIpy-1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0f4635395036c506c3cb47bea5d5a5bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22800,
      "upload_time": "2021-08-18T18:42:38",
      "upload_time_iso_8601": "2021-08-18T18:42:38.163216Z",
      "url": "https://files.pythonhosted.org/packages/88/80/4f28989938706aa36820c5298f139b1f384afafd3564e086f2f542223f82/BIpy-1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}