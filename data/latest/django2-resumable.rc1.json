{
  "info": {
    "author": "Valerio Maggio",
    "author_email": "valeriomaggio@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Django 2.x Resumable (`django-resumable`)\n\n``django2-resumable`` provides **Django 2.1** backend stuff (e.g. `ModelFields`, `Forms`, `staticfiles`) \nto integrates [`resumable.js`](<https://github.com/23/Resumable.js>) in Django apps and admin.\n\nThis projects build on the original `django-resumable` by [jeanphix](https://github.com/jeanphix/django-resumable), which (_afaik_) it \nis not maintained anymore, and does not support Django 2.x - _main\nreason why I ended up developing this in the first place_ (ed.)\n\n#### `ICYM`:\n\n(from the [documentation](https://github.com/23/resumable.js/blob/master/README.md))\n\n>Resumable.js is a JavaScript library providing multiple simultaneous, stable and \n>resumable uploads via the [`HTML5 File API`](http://www.w3.org/TR/FileAPI/).\n>\n>The library is designed to introduce fault-tolerance into the upload of large files through HTTP. \n>This is done by splitting each file into small chunks. \n>Then, whenever the upload of a chunk fails, uploading is retried until the procedure completes. \n>This allows uploads to automatically resume uploading after a network connection \n>is lost either locally or to the server. \n>Additionally, it allows for users to pause, resume and even recover uploads without \n>losing state because only the currently uploading chunks will be aborted, not the entire upload.\n>\n>Resumable.js does not have any external dependencies other than the `HTML5 File API`. \n>This is relied on for the ability to chunk files into smaller pieces. \n>Currently, this means that support is widely available in to Firefox 4+, Chrome 11+, \n>Safari 6+ and Internet Explorer 10+.\n\n\n## Installation\n\n* ``pip install django2-resumable``\n* Add ``django2_resumable`` to your ``INSTALLED_APPS``\n\n## How to use\n\n### Views\n\nIn order to enable asynchronous files upload files, you must define an endpoint that will deal\nwith uploaded file chunks:\n\n```Python\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('resumable_upload/', include('django2_resumable.urls')),\n]\n```\n\nBy default, the `resume-upload` view is provided with no restriction on the accesses\n(i.e. no `login_required` nor `staff_member_required`). \n\nTo enable the view on restricted levels of permissions, urls should be modified accordingly:\n\n```Python\n\nfrom django.contrib.auth.views import login_required\n# To enable view in AdminForm\nfrom django.contrib.admin.views.decorators import staff_member_required\n\nfrom django2_resumable.views import resumable_upload\nfrom django.urls import path\n\nurlpatterns = [\n    path('resumable-upload', login_required(resumable_upload), \n         name='resumable-upload'),\n    path('admin-resumable-upload', staff_member_required(resumable_upload), \n         name='admin-resumable-upload'),\n]\n\n```\n\n### Model\n\n`django2-resumable` provides a `ResumableFileField` that can be easily \nintegrated in your Model class:\n\n```Python\n\nfrom django.db import models\nfrom django2_resumable.fields import ResumableFileField\n\nclass MyModel(models.Model):\n    file = ResumableFileField(chunks_upload_to='resumable_chunks', **kwargs)\n```\n\nThe `ResumableFileField` field extends the default `django.core.fields.FielField` by including \nan additional parameter, namely `chunks_upload_to` specifying the path in the `MEDIA_ROOT` in which\ntemporary chunks will be uploaded. Once the upload is complete, the file will be \nautomatically moved to the `upload_to` destination folder (if any).\n \n\n### Form\n\nIf you want to handle resumable upload within your forms, \nyou can use the `FormResumableFileField`:\n\n```Python\nfrom django.forms import Form\nfrom django2_resumable.forms import FormResumableFileField\n\n\nclass ResumableForm(Form):\n    file = FormResumableFileField()\n        \n```\n\nIt is as simple as that: \n`FormResumableFileField` simply extends the core `django.forms.FileField` by injecting the\n`django_resumable.widgets.ResumableWidget`.\nThis widget is the default widget mapped by default to `ResumableFileField` instances \n(see `django_resumable.fields.ResumableFileField.formfield` method). \n\n\n### Additional Settings\n\n``django2-resumable`` comes with some extendable settings allowing for additional setup:\n\n- `RESUMABLE_SUBDIR`: Directory in `MEDIA_ROOT` in which chunks will be uploaded. This settings will be \n                      overriden by any `chunks_upload_to` options specified at the time of definition of \n                      `ResumableFileField` within Django Model.\n                    \n- `RESUMABLE_STORAGE`: (default `django.core.files.storage.FileSystemStorage`)\n                       Django Storage class to be used to handle the uploads.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/leriomaggio/django2-resumable",
    "keywords": "",
    "license": "MIT licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django2-resumable",
    "package_url": "https://pypi.org/project/django2-resumable/",
    "platform": "",
    "project_url": "https://pypi.org/project/django2-resumable/",
    "project_urls": {
      "Homepage": "https://github.com/leriomaggio/django2-resumable"
    },
    "release_url": "https://pypi.org/project/django2-resumable/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django 2.x resumable uploads",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7168686,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7efeb029170a9a4c6784a860dd95208643520f10410d6a2d4ba4e71c9241a0eb",
          "md5": "7746e64503d5b6713b585ed037de6fe7",
          "sha256": "ff42358f470438e42f70da2b9b4ca360928c0277f46133d6c72b2469c384fd88"
        },
        "downloads": -1,
        "filename": "django2-resumable-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7746e64503d5b6713b585ed037de6fe7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7589,
        "upload_time": "2020-05-05T00:31:37",
        "upload_time_iso_8601": "2020-05-05T00:31:37.872327Z",
        "url": "https://files.pythonhosted.org/packages/7e/fe/b029170a9a4c6784a860dd95208643520f10410d6a2d4ba4e71c9241a0eb/django2-resumable-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7efeb029170a9a4c6784a860dd95208643520f10410d6a2d4ba4e71c9241a0eb",
        "md5": "7746e64503d5b6713b585ed037de6fe7",
        "sha256": "ff42358f470438e42f70da2b9b4ca360928c0277f46133d6c72b2469c384fd88"
      },
      "downloads": -1,
      "filename": "django2-resumable-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7746e64503d5b6713b585ed037de6fe7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7589,
      "upload_time": "2020-05-05T00:31:37",
      "upload_time_iso_8601": "2020-05-05T00:31:37.872327Z",
      "url": "https://files.pythonhosted.org/packages/7e/fe/b029170a9a4c6784a860dd95208643520f10410d6a2d4ba4e71c9241a0eb/django2-resumable-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}