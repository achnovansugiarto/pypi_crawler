{
  "info": {
    "author": "David Woodburn",
    "author_email": "david.woodburn@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# *A*nimated Scalable *V*ector *G*raphics (SVG)\n\nThis library provides an easy way to make animations using the scalable vector\ngraphics (SVG) format.  SVG is a web-standard format and can be opened by all\nmodern web browsers.  An SVG can often be placed wherever any other image type\ncan be placed.  Even many email clients can view SVG animations.  This format\nprovides an easy way for others to view an animation without requiring any\nadditional software installation.\n\n## Shapes\n\nFirst, create your shapes with the `shape` class.  A shape object can be\ninitialized with the following parameters:\n\n-   `x` **: float or array, default 0.0**\n        x values of the shape or the x-axis radius of an ellipse.\n-   `y` **: float or array, default 0.0**\n        y values of the shape or the y-axis radius of an ellipse.\n-   `stroke` **: float or array, default 1.0**\n        Stroke width or animated widths.\n-   `color` **: float or array, default 0x000000**\n        Stroke or fill color or animated colors.  It is a fill color or colors\n        if `stroke` is a scalar zero.\n-   `alpha` **: float or array, default 1.0**\n        Opacity or animated opacity values.  A 0.0 means fully transparent and a\n        1.0 means fully opaque.\n-   `dur` **: float, default 1.0**\n        Animation duration in seconds.\n\nHere is an example:\n\n```python\ntheta = [2*m.pi*n/(100 - 1) for n in range(100)]\nstroke = [0.5 + 0.3*m.sin(2*t) for t in theta]\ncolor = [(cl(t) << 16) +\n        (cl(t - 120*m.pi/180) << 8) +\n        (cl(t + 120*m.pi/180)) for t in theta]\nalpha = [0.6 + 0.4*m.cos(6*t) for t in theta]\ntri = avg.shape([-1.0, 1.0, 0.0, -1.0], [-0.866, -0.866, 0.866, -0.866],\n        stroke=stroke, color=color, alpha=alpha, dur=10)\n```\n\nIn this example, the stroke, color, and alpha have all been made to change over\nthe period of 10 seconds.  The `cl( )` is just a custom triangle function.\n\n## Frames\n\nSecond, place shapes or other frames into frames.  The `frame` class provides\nthe following initialization parameters:\n\n-   `objs` **: shape or frame or list of such**\n        A single shape or frame object or a list of such objects.\n-   `x` **: float or array_like, default 0.0**\n        x-axis values of translation of the objects within the frame.\n-   `y` **: float or array_like, default 0.0**\n        y-axis values of translation of the objects within the frame.\n-   `ang` **: float or array_like, default 0.0**\n        Angles of rotation of the objects within the frame in degrees.\n-   `scale` **: float or array_like, default 1.0**\n        Scaling factors of the objects within the frame.\n-   `dur` **: float, default 1.0**\n        Animation duration in seconds.\n\nHere is an example:\n\n```python\nx = [2*m.sin(3*t) for t in theta]\ny = [-m.cos(3*t) for t in theta]\nang = [-3*t*180/m.pi for t in theta]\nscale = [1 + 0.5*m.sin(2*t) for t in theta]\nfrm = avg.frame(tri, x, y, ang, scale, dur=10)\n```\n\nSo, the `tri` shape will move to the postions `(x, y)`, rotate to the angles\n`ang`, and scale by `scale`.  You can put multiple shapes and frames into\nanother frame.  Suppose `a` and `b` are shapes and `C`, `D`, and `E` are frames.\nThese can be put into another frame as follows:\n\n```python\nfrm = avg.frame([a, b, C, D, E], x, y, dur=10)\n```\n\n## Animate\n\nWhen you have finished defining all your shapes and frames, you can create the\nanimation file using the `animate` function.  This function takes the following\nparamters:\n\n-   `obj` **: shape object, frame object, or list of such objects**\n        The data to create an animation.\n-   `filename` **: string, default 'ani.svg'**\n        The desired name of output file.  End it with '.svg' in order for\n        your system to know which application to use to open it.\n-   `x_lim` **: array, default [-1, 1]**\n        A list of the minimum and maximum x values to display in the animation.\n-   `y_lim` **: array, default [-1, 1]**\n        A list of the minimum and maximum y values to display in the animation.\n-   `width` **: float, default 640**\n        Desired width of the animation image in pixels.  This is also used in\n        determining the scaling factor for the dimensions of the image.  If not\n        specified, the image will actually automatically scale to fit the size\n        of the browser window.\n-   `progress` **: bool, default False**\n        Flag to show progress bar.\n\nHere is an example:\n\n```python\navg.animate(frm, x_lim=[-3, 3], y_lim=[-3, 3])\n```\n\nNote that not specifying the width will make the image scale to the size of its\ncontainer, like the browser window.  However, it also means that parts of the\nanimation can sometimes be viewable outside the limits specified.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/davidwoodburn/avg",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "avg",
    "package_url": "https://pypi.org/project/avg/",
    "platform": null,
    "project_url": "https://pypi.org/project/avg/",
    "project_urls": {
      "Homepage": "https://gitlab.com/davidwoodburn/avg"
    },
    "release_url": "https://pypi.org/project/avg/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Animated Scalable Vector Graphics",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16232560,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e04ed34251d23505d4e42d7338ad9bdfe97e35f54ce26539bdc236d36d2f553",
          "md5": "bd2bba48c9d08b11ff451597676c61a7",
          "sha256": "7e272aa791ac11b09901bb5339aa8668274b765f042e6d26165e3c0d07ff1ff8"
        },
        "downloads": -1,
        "filename": "avg-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd2bba48c9d08b11ff451597676c61a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9873,
        "upload_time": "2022-12-17T23:28:16",
        "upload_time_iso_8601": "2022-12-17T23:28:16.435658Z",
        "url": "https://files.pythonhosted.org/packages/2e/04/ed34251d23505d4e42d7338ad9bdfe97e35f54ce26539bdc236d36d2f553/avg-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a6b7c2a0b04dcbcca1cd184f17796319aedf23d1913745900c992a8821392ae",
          "md5": "08fcb253c04835557cd4315b79e72436",
          "sha256": "3513f2f36ae055b93c7cff147c9b74c32a03ede67380c620681ad0762c5911a7"
        },
        "downloads": -1,
        "filename": "avg-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "08fcb253c04835557cd4315b79e72436",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10202,
        "upload_time": "2022-12-17T23:28:18",
        "upload_time_iso_8601": "2022-12-17T23:28:18.592478Z",
        "url": "https://files.pythonhosted.org/packages/2a/6b/7c2a0b04dcbcca1cd184f17796319aedf23d1913745900c992a8821392ae/avg-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6488fa8deb95456749d80a0b64c70d401139a4c32372ef31243cb0a97c81e8c",
          "md5": "9736116f656b56e2b7cf0c58f263c0e7",
          "sha256": "6954c8ed0c5ee8e493bedd0fa06b69257187d7b7241d60fc98cfb107e5615f46"
        },
        "downloads": -1,
        "filename": "avg-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9736116f656b56e2b7cf0c58f263c0e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9464,
        "upload_time": "2022-12-27T21:19:40",
        "upload_time_iso_8601": "2022-12-27T21:19:40.577801Z",
        "url": "https://files.pythonhosted.org/packages/c6/48/8fa8deb95456749d80a0b64c70d401139a4c32372ef31243cb0a97c81e8c/avg-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1708b3bdc58ab1b63873f388c4bec8abcefb9a665c87f86e34ab6760ab8efff2",
          "md5": "c61fc5e99fd35d9732a0ed0191548f6c",
          "sha256": "f3ac280b0b58c1a13439818e93ce23518b3989b1963637b1de48a00341d9cdfb"
        },
        "downloads": -1,
        "filename": "avg-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c61fc5e99fd35d9732a0ed0191548f6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10265,
        "upload_time": "2022-12-27T21:19:42",
        "upload_time_iso_8601": "2022-12-27T21:19:42.883333Z",
        "url": "https://files.pythonhosted.org/packages/17/08/b3bdc58ab1b63873f388c4bec8abcefb9a665c87f86e34ab6760ab8efff2/avg-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6488fa8deb95456749d80a0b64c70d401139a4c32372ef31243cb0a97c81e8c",
        "md5": "9736116f656b56e2b7cf0c58f263c0e7",
        "sha256": "6954c8ed0c5ee8e493bedd0fa06b69257187d7b7241d60fc98cfb107e5615f46"
      },
      "downloads": -1,
      "filename": "avg-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9736116f656b56e2b7cf0c58f263c0e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9464,
      "upload_time": "2022-12-27T21:19:40",
      "upload_time_iso_8601": "2022-12-27T21:19:40.577801Z",
      "url": "https://files.pythonhosted.org/packages/c6/48/8fa8deb95456749d80a0b64c70d401139a4c32372ef31243cb0a97c81e8c/avg-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1708b3bdc58ab1b63873f388c4bec8abcefb9a665c87f86e34ab6760ab8efff2",
        "md5": "c61fc5e99fd35d9732a0ed0191548f6c",
        "sha256": "f3ac280b0b58c1a13439818e93ce23518b3989b1963637b1de48a00341d9cdfb"
      },
      "downloads": -1,
      "filename": "avg-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c61fc5e99fd35d9732a0ed0191548f6c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10265,
      "upload_time": "2022-12-27T21:19:42",
      "upload_time_iso_8601": "2022-12-27T21:19:42.883333Z",
      "url": "https://files.pythonhosted.org/packages/17/08/b3bdc58ab1b63873f388c4bec8abcefb9a665c87f86e34ab6760ab8efff2/avg-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}