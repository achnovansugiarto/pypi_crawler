{
  "info": {
    "author": "Abedy Nganga",
    "author_email": "abedy.nganga@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2",
      "Framework :: Django :: 3",
      "Framework :: Django :: 4",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "===================\nPackage Overview\n===================\n\nThis package provides an easy way to optimize JQuery Datatables in Django through Serverside Rendering.\n\nAll you have to do is to create a new view, configure the model to be used and the columns to be rendered, and you're all set!\n\nSupported features are **pagination**, **column ordering**, **row value customization**, and **global search** (not restricted to a specific column). The searching function can find values in any string-convertible field, and also searched with choice descriptions of predefined choices fields.\n\nForeign key fields can be used, provided that a QuerySet-like access path (i.e. model2__field) is given in the configuration.\n\nQuick start\n-----------\n\n1. Create a view that inherits the ```DatatablesServerSideView``` mixin::\n\n    from datatables_optimization.mixins import DatatablesServerSideView\n    from django.contrib.humanize.templatetags.humanize import intcomma # For demo purposes\n\n    class ApplicationsListServerSideView(DatatablesServerSideView):\n        \"\"\"\n        View will render serverside processing for the **Application** model.\n        \"\"\"\n        model = Application\n        columns = ['full_name', 'admission_number', 'category', 'amount']\n\n        searchable_columns = ['full_name', 'admission_number']\n\n        foreign_fields = {'category': 'category__name'}\n\n        def customize_row(self, row, obj):\n            # Here we customize the amount\n            row['awarded_amount'] = intcomma(obj.amount)\n            \n        def get_initial_queryset(self):\n            qs = super(ApplicationsListServerSideView,\n                        self).get_initial_queryset()\n\n            # Customize Queryset as deemed appropriate\n\n            return qs\n\n\n2. Add a ```URL Path``` that points to our view::\n\n    urlpatterns = [\n        # Other paths...\n        path('applications/serverside/', ApplicationsListServerSideView.as_view(),\n            name='applications-list-serverside'),\n    ]\n\n\n3. Add the Serverside processing in your DataTables template::\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css\">\n        </head>\n        <body>\n            <h1>List of Application</h1>\n            <hr>\n            <table id=\"table\">\n                <thead>\n                    <tr>\n                        <th>Full Name</th>\n                        <th>Adm. Number</th>\n                        <th>Category</th>\n                        <th>Amount</th>\n                    </tr>\n                </thead>\n                <tbody></tbody>\n            </table>\n\n            <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\" integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\" crossorigin=\"anonymous\"></script>\n            <sscript src=\"https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js\"></script>\n\n            <script>\n                $(document).ready(function () {\n                    /* Here begins the DataTable configuration. */\n                    $('#table').DataTable({\n                        /* Tell the DataTable that we need server-side processing. */\n                        serverSide: true,\n                        /* Set up the data source */\n                        ajax: {\n                            url: \"{% url \"applications-list-serverside\" %}\"\n                        },\n                        /* And set up the columns. Note that they must be identified by a \"name\" attribute,\n                        with the value matching the columns in your Django view. The \"data\" attribute selects which record value will be used,\n                        and should be the same value than for the \"name\" attribute. */\n                        columns: [\n                            {name: \"full_name\", data: \"full_name\"},\n                            {name: \"admission_number\", data: \"admission_number\"},\n                            {name: \"category\", data: \"category\"},\n                            {name: \"amount\", data: \"amount\"},\n                        ]\n                    });\n                });\n            </script>\n        </body>\n    </html>\n\n\nThe view will return a ```HTTPResponseBadRequest``` if the request is not an ```AJAX``` request, or if params seem to be malformed. Else you should have your datatable serverside processing working just fine.\n\nHappy Development!",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/abedyngash/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-datatables-optimization",
    "package_url": "https://pypi.org/project/django-datatables-optimization/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-datatables-optimization/",
    "project_urls": {
      "Homepage": "https://gitlab.com/abedyngash/"
    },
    "release_url": "https://pypi.org/project/django-datatables-optimization/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django package that provides an easy way to optimize JQuery Datatables in Django through Serverside Rendering.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13418000,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "913c65e73f8f76cb3cacab078fbdf56853db46068f23cc33acec9c3f49e7a8f6",
          "md5": "60fa45a33e19f1314d9ac6e1f67f4fa9",
          "sha256": "bc43428156a8bc9e63a161b1e99f850a90240087dd190578ad859d5e8e2f2129"
        },
        "downloads": -1,
        "filename": "django-datatables-optimization-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60fa45a33e19f1314d9ac6e1f67f4fa9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7704,
        "upload_time": "2022-04-05T17:25:31",
        "upload_time_iso_8601": "2022-04-05T17:25:31.250548Z",
        "url": "https://files.pythonhosted.org/packages/91/3c/65e73f8f76cb3cacab078fbdf56853db46068f23cc33acec9c3f49e7a8f6/django-datatables-optimization-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "913c65e73f8f76cb3cacab078fbdf56853db46068f23cc33acec9c3f49e7a8f6",
        "md5": "60fa45a33e19f1314d9ac6e1f67f4fa9",
        "sha256": "bc43428156a8bc9e63a161b1e99f850a90240087dd190578ad859d5e8e2f2129"
      },
      "downloads": -1,
      "filename": "django-datatables-optimization-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "60fa45a33e19f1314d9ac6e1f67f4fa9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7704,
      "upload_time": "2022-04-05T17:25:31",
      "upload_time_iso_8601": "2022-04-05T17:25:31.250548Z",
      "url": "https://files.pythonhosted.org/packages/91/3c/65e73f8f76cb3cacab078fbdf56853db46068f23cc33acec9c3f49e7a8f6/django-datatables-optimization-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}