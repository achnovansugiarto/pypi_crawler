{
  "info": {
    "author": "Gagan Deep",
    "author_email": "support@openwisp.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: System :: Networking"
    ],
    "description": "======================\nOpenWISP Notifications\n======================\n\n.. image:: https://github.com/openwisp/openwisp-notifications/workflows/OpenWISP%20CI%20Build/badge.svg?branch=master\n   :target: https://github.com/openwisp/openwisp-notifications/actions?query=workflow%3A%22OpenWISP+CI+Build%22\n   :alt: CI build status\n\n.. image:: https://coveralls.io/repos/github/openwisp/openwisp-notifications/badge.svg?branch=master\n   :target: https://coveralls.io/github/openwisp/openwisp-notifications?branch=master\n   :alt: Test Coverage\n\n.. image:: https://img.shields.io/librariesio/github/openwisp/openwisp-notifications\n   :target: https://libraries.io/github/openwisp/openwisp-notifications#repository_dependencies\n   :alt: Dependency monitoring\n\n.. image:: https://img.shields.io/gitter/room/nwjs/nw.js.svg\n   :target: https://gitter.im/openwisp/general\n   :alt: chat\n\n.. image:: https://badge.fury.io/py/openwisp-notifications.svg\n   :target: http://badge.fury.io/py/openwisp-notifications\n   :alt: Pypi Version\n\n.. image:: https://pepy.tech/badge/openwisp-notifications\n   :target: https://pepy.tech/project/openwisp-notifications\n   :alt: downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: code style: black\n\n------------\n\n.. figure:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/notification-demo.gif\n   :align: center\n\n**OpenWISP Notifications** provides email and web notifications for\n`OpenWISP <http://openwisp.org>`_.\n\nIts main goal is to allow the other OpenWISP modules to notify users about\nmeaningful events that happen in their network.\n\n**For a more complete overview of the OpenWISP modules and architecture**,\nsee the\n`OpenWISP Architecture Overview\n<https://openwisp.io/docs/general/architecture.html>`_.\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nAvailable features\n------------------\n\n- `Sending notifications <#sending-notifications>`_\n- `Web notifications <#web-notifications>`_\n- `Email notifications <#email-notifications>`_\n- `Notification types <#notification-types>`_\n- `Registering new notification types <#registering--unregistering-notification-types>`_\n- `User notification preferences <#notification-preferences>`_\n- `Silencing notifications for specific objects temporarily or permanently <#silencing-notifications-for-specific-objects-temporarily-or-permanently>`_\n- `Automatic cleanup of old notifications <#scheduled-deletion-of-notifications>`_\n- `Configurable host for API endpoints <#openwisp_notifications_host>`_\n\nInstallation instructions\n-------------------------\n\nInstall stable version from pypi\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install openwisp-notifications\n\nInstall development version\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/openwisp-notifications/tarball/master\n\nAlternatively, you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/openwisp-notifications#egg=openwisp_notifications\n\nInstalling for development\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe use Redis as celery broker (you can use a different broker if you want).\nThe recommended way for development is running it using Docker so you will need to\n`install docker and docker-compose <https://docs.docker.com/engine/install/>`_ beforehand.\n\nIn case you prefer not to use Docker you can\n`install Redis from your repositories <https://redis.io/download>`_, but keep in mind that\nthe version packaged by your distribution may be different.\n\nInstall SQLite:\n\n.. code-block:: shell\n\n    sudo apt install sqlite3 libsqlite3-dev openssl libssl-dev\n\nFork and clone the forked repository:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/openwisp-notifications\n\nNavigate into the cloned repository:\n\n.. code-block:: shell\n\n    cd openwisp-notifications/\n\nSetup and activate a virtual-environment. (we'll be using  `virtualenv <https://pypi.org/project/virtualenv/>`_)\n\n.. code-block:: shell\n\n    python -m virtualenv env\n    source env/bin/activate\n\nUpgrade the following base python packages:\n\n.. code-block:: shell\n\n    pip install -U pip wheel setuptools\n\nInstall development dependencies:\n\n.. code-block:: shell\n\n    pip install -e .\n    pip install -r requirements-test.txt\n    npm install -g jslint stylelint\n\nStart Redis using docker-compose:\n\n.. code-block:: shell\n\n    docker-compose up -d\n\nCreate a database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch the development server:\n\n.. code-block:: shell\n\n    ./manage.py runserver\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun celery  worker (separate terminal window is needed):\n\n.. code-block:: shell\n\n    # (cd tests)\n    celery -A openwisp2 worker -l info\n\nRun tests with:\n\n.. code-block:: shell\n\n    # run qa checks\n    ./run-qa-checks\n\n    # standard tests\n    ./runtests.py\n\n    # tests for the sample app\n    SAMPLE_APP=1 ./runtests.py\n\n    # If you running tests on PROD environment\n    ./runtests.py --exclude skip_prod\n\nWhen running the last line of the previous example, the environment variable ``SAMPLE_APP`` activates\nthe sample app in ``/tests/openwisp2/`` which is a simple django app that extends ``openwisp-notifications``\nwith the sole purpose of testing its extensibility, for more information regarding this concept,\nread the following section.\n\nSetup (integrate into an existing Django project)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``INSTALLED_APPS`` in ``settings.py`` should look like the following:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'django.contrib.sites',\n        'django_extensions',\n        'allauth',\n        'allauth.account',\n        'allauth.socialaccount',\n        # rest framework\n        'rest_framework',\n        'rest_framework.authtoken',\n        'drf_yasg',\n        'django_filters',\n        'openwisp_users',\n        # notifications module\n        'openwisp_notifications',\n        # add openwisp theme\n        # (must be loaded here)\n        'openwisp_utils.admin_theme',\n        'django.contrib.admin',\n        # channels\n        'channels',\n    ]\n\n**Note**: ``openwisp_utils.admin_theme`` and ``django.contrib.admin`` should always\nfollow ``openwisp_notifications`` in ``INSTALLED_APPS`` as shown in the example above.\nIt might result in undesired behavior otherwise, e.g. notification bell not being\nshown on admin site.\n\nAdd ``notification_api_settings`` context processor:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            # ...\n            'OPTIONS': {\n                # ...\n                'context_processors': [\n                    # ...\n                    'openwisp_notifications.context_processors.notification_api_settings',\n                    # ...\n                ],\n            },\n        },\n    ]\n\n``urls.py``:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from django.urls import include, path\n    from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('api/v1/', include(('openwisp_users.api.urls', 'users'), namespace='users')),\n        path('', include('openwisp_notifications.urls', namespace='notifications')),\n    ]\n\n    urlpatterns += staticfiles_urlpatterns()\n\nAdd routes for websockets:\n\n.. code-block:: python\n\n    # In yourproject/asgi.py\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from django.core.asgi import get_asgi_application\n    from openwisp_notifications.websockets.routing import get_routes\n\n    application = ProtocolTypeRouter(\n        {'websocket': AuthMiddlewareStack(URLRouter(get_routes()))}\n    )\n\nConfigure caching (you may use a different cache storage if you want):\n\n.. code-block:: python\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis.cache.RedisCache',\n            'LOCATION': 'redis://localhost/0',\n            'OPTIONS': {\n                'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n            }\n        }\n    }\n\n    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n    SESSION_CACHE_ALIAS = 'default'\n\nConfigure celery:\n\n.. code-block:: python\n\n    # Here we are showing how to configure celery with Redis but you can\n    # use other brokers if you want, consult the celery docs\n    CELERY_BROKER_URL = 'redis://localhost/1'\n\nConfigure celery beat:\n\n.. code-block:: python\n\n    CELERY_BEAT_SCHEDULE = {\n        'delete_old_notifications': {\n            'task': 'openwisp_notifications.tasks.delete_old_notifications',\n            'schedule': timedelta(days=1),\n            'args': (90,),\n        },\n    }\n\n**Note**: You will only need to add ``CELERY_BEAT_SCHEDULE`` setting if you want\nautomatic deletion of old notifications. Please read\n`Scheduled deletion of notifications <#scheduled-deletion-of-notifications>`_\nsection to learn more about this feature.\n\nIf you decide to use redis (as shown in these examples), make sure the python\ndependencies are installed in your system:\n\n.. code-block:: shell\n\n    pip install redis django-redis\n\nConfigure ``ASGI_APPLICATION``:\n\n.. code-block:: python\n\n    ASGI_APPLICATION = 'yourproject.asgi.application'\n\nConfigure channel layers (you may use a `different channel layer <https://channels.readthedocs.io/en/latest/topics/channel_layers.html#configuration>`_):\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        'default': {\n            'BACKEND': 'channels_redis.core.RedisChannelLayer',\n            'CONFIG': {\n                'hosts': ['redis://localhost/7'],\n            },\n        },\n    }\n\nWhile development, you can configure it to localhost as shown below:\n\n.. code-block:: python\n\n    INTERNAL_IPS = ['127.0.0.1']\n\nRun migrations\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\n**Note**: Running migrations is also required for creating `notification settings <#notification-preferences>`_\napart from creating database schema.\n\nSending notifications\n---------------------\n\nNotifications can be created using the ``notify`` signal. Eg:\n\n.. code-block:: python\n\n    from django.contrib.auth import get_user_model\n    from swapper import load_model\n\n    from openwisp_notifications.signals import notify\n\n    User = get_user_model()\n    Group = load_model('openwisp_users', 'Group')\n    admin = User.objects.get(email='admin@admin.com')\n    operators = Group.objects.get(name='Operator')\n\n    notify.send(\n        sender=admin,\n        recipient=operators,\n        description=\"Test Notification\",\n        verb=\"Test Notification\",\n        email_subject='Test Email Subject',\n        url='https://localhost:8000/admin',\n    )\n\nThe above code snippet creates and sends a notification to all users belonging to the ``Operators``\ngroup if they have opted-in to receive notifications. Non-superusers receive notifications\nonly for organizations which they are a member of.\n\n**Note**: If recipient is not provided, it defaults to all superusers. If the target is provided, users\nof same organization of the target object are added to the list of recipients given that they have staff\nstatus and opted-in to receive notifications.\n\nThe complete syntax for ``notify`` is:\n\n.. code-block:: python\n\n    notify.send(\n        actor,\n        recipient,\n        verb,\n        action_object,\n        target,\n        level,\n        description,\n        **kwargs\n    )\n\n**Note**: Since ``openwisp-notifications`` uses ``django-notifications`` under the hood, usage of the\n``notify signal`` has been kept unaffected to maintain consistency with ``django-notifications``.\nYou can learn more about accepted parameters from `django-notifications documentation\n<https://github.com/django-notifications/django-notifications#generating-notifications>`_.\n\nAdditional ``notify`` keyword arguments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+-------------------+-------------------------------------------------------------------+\n| **Parameter**     | **Description**                                                   |\n+-------------------+-------------------------------------------------------------------+\n| ``email_subject`` | Sets subject of email notification to be sent.                    |\n|                   |                                                                   |\n|                   | Defaults to the notification message.                             |\n+-------------------+-------------------------------------------------------------------+\n| ``url``           | Adds a URL in the email text, eg:                                 |\n|                   |                                                                   |\n|                   | ``For more information see <url>.``                               |\n|                   |                                                                   |\n|                   | Defaults to ``None``, meaning the above message would             |\n|                   | not be added to the email text.                                   |\n+-------------------+-------------------------------------------------------------------+\n| ``type``          | Set values of other parameters based on registered                |\n|                   | `notification types <#notification-types>`_                       |\n|                   |                                                                   |\n|                   | Defaults to ``None`` meaning you need to provide other arguments. |\n+-------------------+-------------------------------------------------------------------+\n\nWeb Notifications\n-----------------\n\n*Openwisp Notifications* send a web notification to the recipients through\ndjango's admin site. Following are the components which allows browsing\nweb notifications:\n\nNotification Widget\n~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/notification-widget.gif\n   :align: center\n\nA javascript widget has been added to make consuming notifications easy for users.\nThe notification widget provides following features:\n\n- A minimalistic UI to help getting things done quickly.\n- Dynamically loading notifications with infinite scrolling to prevent unnecessary\n  network requests.\n- Option to filter unread notifications.\n- Option to mark all notifications as read on a single click.\n\nNotification Toasts\n~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/notification-toast.gif\n   :align: center\n\nA notification toast delivers notifications at real-time. This allows\nusers to read notifications without even opening the notification widget.\nA notification bell is also played to alert each time a notification is\ndisplayed through notification toast.\n\nEmail Notifications\n-------------------\n\n.. figure:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/email-template.png\n\nAlong with web notifications *OpenWISP Notifications* also sends email notifications\nleveraging the `openwisp-utils send_email feature\n<https://github.com/openwisp/openwisp-utils#openwisp-utils-admin-theme-email-send-email>`_.\n\n\nNotification Cache\n------------------\n\nIn a typical OpenWISP installation, ``actor``, ``action_object`` and ``target`` objects are same\nfor a number of notifications. To optimize database queries, these objects are cached using\n`Django's cache framework <https://docs.djangoproject.com/en/3.0/topics/cache/>`_.\nThe cached values are updated automatically to reflect actual data from database. You can control\nthe duration of caching these objects using\n`OPENWISP_NOTIFICATIONS_CACHE_TIMEOUT setting <#OPENWISP_NOTIFICATIONS_CACHE_TIMEOUT>`_.\n\nCache invalidation\n~~~~~~~~~~~~~~~~~~\n\nThe function ``register_notification_cache_update`` can be used to register a signal of a model which is being used as an\n``actor``, ``action_object`` and ``target`` objects. As these values are cached for the optimization purpose so their cached\nvalues are need to be changed when they are changed. You can register any signal you want which will delete the cached value.\nTo register a signal you need to include following code in your ``apps.py``.\n\n.. code-block:: python\n\n    from django.db.models.signals import post_save\n    from swapper import load_model\n\n    def ready(self):\n        super().ready()\n\n        # Include lines after this inside\n        # ready function of you app config class\n        from openwisp_notifications.handlers import register_notification_cache_update\n\n        model = load_model('app_name', 'model_name')\n        register_notification_cache_update(model, post_save, dispatch_uid=\"myapp_mymodel_notification_cache_invalidation\")\n\n**Note**: You need to import ``register_notification_cache_update`` inside the ``ready`` function or\nyou can define another funtion to register signals which will be called in ``ready`` and then it will be\nimported in this function. Also ``dispatch_uid`` is unique identifier of a signal. You can pass any\nvalue you want but it needs to be unique. For more details read `preventing duplicate signals section of Django documentation <https://docs.djangoproject.com/en/dev/topics/signals/#preventing-duplicate-signals>`_\n\nNotification Types\n------------------\n\n**OpenWISP Notifications** simplifies configuring individual notification by\nusing notification types. You can think of a notification type as a template\nfor notifications.\n\nThese properties can be configured for each notification type:\n\n+------------------------+----------------------------------------------------------------+\n| **Property**           | **Description**                                                |\n+------------------------+----------------------------------------------------------------+\n| ``level``              | Sets ``level`` attribute of the notification.                  |\n+------------------------+----------------------------------------------------------------+\n| ``verb``               | Sets ``verb`` attribute of the notification.                   |\n+------------------------+----------------------------------------------------------------+\n| ``verbose_name``       | Sets display name of notification type.                        |\n+------------------------+----------------------------------------------------------------+\n| ``message``            | Sets ``message`` attribute of the notification.                |\n+------------------------+----------------------------------------------------------------+\n| ``email_subject``      | Sets subject of the email notification.                        |\n+------------------------+----------------------------------------------------------------+\n| ``message_template``   | Path to file having template for message of the notification.  |\n+------------------------+----------------------------------------------------------------+\n| ``email_notification`` | Sets preference for email notifications. Defaults to ``True``. |\n+------------------------+----------------------------------------------------------------+\n| ``web_notification``   | Sets preference for web notifications. Defaults to ``True``.   |\n+------------------------+----------------------------------------------------------------+\n\n**Note**: A notification type configuration should contain atleast one of ``message`` or ``message_template``\nsettings. If both of them are present, ``message`` is given preference over ``message_template``.\n\nDefining ``message_template``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can either extend default message template or write your own markdown formatted message template\nfrom scratch. An example to extend default message template is shown below.\n\n.. code-block:: django\n\n    # In templates/your_notifications/your_message_template.md\n    {% extends 'openwisp_notifications/default_message.md' %}\n    {% block body %}\n        [{{ notification.target }}]({{ notification.target_link }}) has malfunctioned.\n    {% endblock body %}\n\n**Note**: You can access all attributes of the notification using ``notification`` variables in your message\ntemplate as shown above. Additional attributes ``actor_link``, ``action_link`` and ``target_link`` are\nalso available for providing hyperlinks to respective object.\n\n**Note**: After writing code for registering or unregistering notification types, it is recommended to run\ndatabase migrations to create `notification settlings <#notification-preferences>`_ for these notification types.\n\nRegistering / Unregistering Notification Types\n----------------------------------------------\n\n**OpenWISP Notifications** provides registering and unregistering notifications through utility functions\n``openwisp_notifications.types.register_notification_type`` and ``openwisp_notifications.types.unregister_notification_type``.\nUsing these functions you can register or unregister notification types from your code.\n\nregister_notification_type\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis function is used to register a new notification type from your code.\n\nSyntax:\n\n.. code-block:: python\n\n    register_notification_type(type_name, type_config, models)\n\n+---------------+-------------------------------------------------------------+\n| **Parameter** | **Description**                                             |\n+---------------+-------------------------------------------------------------+\n| type_name     | A ``str`` defining name of the notification type.           |\n+---------------+-------------------------------------------------------------+\n| type_config   | A ``dict`` defining configuration of the notification type. |\n+---------------+-------------------------------------------------------------+\n| models        | An optional ``list`` of models that can be associated with  |\n|               | the notification type.                                      |\n+---------------+-------------------------------------------------------------+\n\nAn example usage has been shown below.\n\n.. code-block:: python\n\n    from openwisp_notifications.types import register_notification_type\n    from django.contrib.auth import get_user_model\n\n    User = get_user_model()\n\n    # Define configuration of your notification type\n    custom_type = {\n        'level': 'info',\n        'verb': 'added',\n        'verbose_name': 'device added',\n        'message': '[{notification.target}]({notification.target_link}) was {notification.verb} at {notification.timestamp}',\n        'email_subject' : '[{site.name}] A device has been added',\n        'web_notification': True,\n        'email_notification': True,\n    }\n\n    # Register your custom notification type\n    register_notification_type('custom_type', custom_type, models=[User])\n\n**Note**: It will raise ``ImproperlyConfigured`` exception if a notification type is already registered\nwith same name(not to be confused with ``verbose_name``).\n\n**Note**: You can use ``site`` and ``notification`` variables while defining ``message`` and\n``email_subject`` configuration of notification type. They refer to objects of\n``django.contrib.sites.models.Site`` and ``openwisp_notifications.models.Notification`` respectively.\nThis allows you to use any of their attributes in your configuration. Similarly to ``message_template``,\n``message`` property can also be formatted using markdown.\n\nunregister_notification_type\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis function is used to unregister a notification type from anywhere in your code.\n\nSyntax:\n\n.. code-block:: python\n\n    unregister_notification_type(type_name)\n\n+---------------+---------------------------------------------------+\n| **Parameter** | **Description**                                   |\n+---------------+---------------------------------------------------+\n| type_name     | A ``str`` defining name of the notification type. |\n+---------------+---------------------------------------------------+\n\nAn example usage is shown below.\n\n.. code-block:: python\n\n    from openwisp_notifications.types import unregister_notification_type\n\n    # Unregister previously registered notification type\n    unregister_notification_type('custom type')\n\n**Note**: It will raise ``ImproperlyConfigured`` exception if the concerned\nnotification type is not registered.\n\nPassing extra data to notifications\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf needed, additional data, not known beforehand, can be included in the notification message.\n\nA perfect example for this case is an error notification, the error message will vary\ndepending on what has happened, so we cannot know until the notification is generated.\n\nHere's how to do it:\n\n.. code-block:: python\n\n    from openwisp_notifications.types import register_notification_type\n\n    register_notification_type('error_type', {\n        'verbose_name': 'Error',\n        'level': 'error',\n        'verb': 'error',\n        'message': 'Error: {error}',\n        'email_subject': 'Error subject: {error}',\n    })\n\nThen in the application code:\n\n.. code-block:: python\n\n    from openwisp_notifications.signals import notify\n\n    try:\n        operation_which_can_fail()\n    except Exception as error:\n        notify.send(\n            type='error_type',\n            sender=sender,\n            error=str(error)\n        )\n\n**Note**: It is recommended that all notification types are registered or\nunregistered in ``ready`` method of your Django application's ``AppConfig``.\n\nNotification Preferences\n------------------------\n\n.. image:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/notification-settings.png\n\n*OpenWISP Notifications* allows users to select their preferred way of receiving notifications.\nUsers can choose from web or email notifications. These settings have been categorized\nover notification type and organization, therefore allowing users to only receive notifications\nfrom selected organization or notification type.\n\nNotification settings are automatically created for all notification types and organizations for all users.\nWhile superusers can add or delete notification settings for everyone, staff users can only modify their\npreferred ways for receiving notifications. With provided functionality, users can choose to receive both\nweb and email notifications or only web notifications. Users can also stop receiving notifications\nby disabling both web and email option for a notification setting.\n\n**Note**: If a user has not configured their email or web preference for a particular notification setting,\nthen ``email_notification`` or ``web_notification`` option of concerned notification type will be used\nrespectively.\n\nDeleting Notification Preferences\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDeleting the notification preferences is an advanced option. Users should turn off web and email\nnotifications instead of deleting notification preferences. Deleted notification preferences\nmay be re-created automatically if the system needs it.\n\nSilencing notifications for specific objects temporarily or permanently\n-----------------------------------------------------------------------\n\n.. image:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/silence-notifications.png\n   :align: center\n\n*OpenWISP Notifications* allows users to silence all notifications generated by\nspecific objects they are not interested in for a desired period of time or even permanently,\nwhile other users will keep receiving notifications normally.\n\nUsing the widget on an object's admin change form, a user can disable all notifications\ngenerated by that object for a day, week, month or permanently.\n\n**Note**: This feature requires configuring\n`\"OPENWISP_NOTIFICATIONS_IGNORE_ENABLED_ADMIN\" <#openwisp_notifications_ignore_enabled_admin>`_\nto enable the widget in the admin section of the required models.\n\nScheduled deletion of notifications\n-----------------------------------\n\n*OpenWISP Notifications* provides a celery task to automatically delete\nnotifications older than a pre-configured number of days. In order to run this\ntask periodically, you will need to configure ``CELERY_BEAT_SCHEDULE`` setting as shown\nin `setup instructions <#setup-integrate-into-an-existing-django-project>`_.\n\nThe celery task takes only one argument, i.e. number of days. You can provide\nany number of days in `args` key while configuring ``CELERY_BEAT_SCHEDULE`` setting.\n\nE.g., if you want notifications older than 10 days to get deleted automatically,\nthen configure ``CELERY_BEAT_SCHEDULE`` as follows:\n\n.. code-block:: python\n\n    CELERY_BEAT_SCHEDULE = {\n        'delete_old_notifications': {\n            'task': 'openwisp_notifications.tasks.delete_old_notifications',\n            'schedule': timedelta(days=1),\n            'args': (10,), # Here we have defined 10 instead of 90 as shown in setup instructions\n        },\n    }\n\nPlease refer to `\"Periodic Tasks\" section of Celery's documentation <https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html>`_\nto learn more.\n\nSettings\n--------\n\n``OPENWISP_NOTIFICATIONS_HOST``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+---------+----------------------------------------+\n| type    | ``str``                                |\n+---------+----------------------------------------+\n| default | Any domain defined in ``ALLOWED_HOST`` |\n+---------+----------------------------------------+\n\nThis setting defines the domain at which API and Web Socket communicate for\nworking of notification widget.\n\n**Note**: You don't need to configure this setting if you\ndon't host your API endpoints on a different sub-domain.\n\nIf your root domain is ``example.com`` and API and Web Socket are hosted at\n``api.example.com``, then configure setting as follows:\n\n.. code-block:: python\n\n    OPENWISP_NOTIFICATIONS_HOST = 'https://api.example.com'\n\nThis feature requires you to allow `CORS <https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS>`_\non your server. We use ``django-cors-headers`` module to easily setup CORS headers.\nPlease refer `django-core-headers' setup documentation <https://github.com/adamchainz/django-cors-headers#setup>`_.\n\nConfigure ``django-cors-headers`` settings as follows:\n\n.. code-block:: python\n\n    CORS_ALLOW_CREDENTIALS = True\n    CORS_ORIGIN_WHITELIST = ['https://www.example.com']\n\nConfigure Django's settings as follows:\n\n.. code-block:: python\n\n    SESSION_COOKIE_DOMAIN = 'example.com'\n    CSRF_COOKIE_DOMAIN = 'example.com'\n\nPlease refer to `Django's settings documentation <https://docs.djangoproject.com/en/3.0/ref/settings/>`_\nfor more information on ``SESSION_COOKIE_DOMAIN`` and ``CSRF_COOKIE_DOMAIN`` settings.\n\n``OPENWISP_NOTIFICATIONS_SOUND``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+---------+-------------------------------------------------------------------------------------------+\n| type    | ``str``                                                                                   |\n+---------+-------------------------------------------------------------------------------------------+\n| default | `notification_bell.mp3 <https://github.com/openwisp/openwisp-notifications/tree/master/ \\ |\n|         | openwisp_notifications/static/openwisp-notifications/audio/notification_bell.mp3>`_       |\n+---------+-------------------------------------------------------------------------------------------+\n\nThis setting defines notification sound to be played when notification is received\nin real-time on admin site.\n\nProvide a relative path (hosted on your webserver) to audio file as show below.\n\n.. code-block:: python\n\n    OPENWISP_NOTIFICATIONS_SOUND = 'your-appname/audio/notification.mp3'\n\n``OPENWISP_NOTIFICATIONS_CACHE_TIMEOUT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+---------+-----------------------------------+\n| type    | ``int``                           |\n+---------+-----------------------------------+\n| default | ``172800`` `(2 days, in seconds)` |\n+---------+-----------------------------------+\n\nIt sets the number of seconds the notification contents should be stored in the cache.\nIf you want cached notification content to never expire, then set it to ``None``.\nSet it to ``0`` if you don't want to store notification contents in cache at all.\n\n``OPENWISP_NOTIFICATIONS_IGNORE_ENABLED_ADMIN``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+-----------+-----------+\n|   type    |  ``list`` |\n+-----------+-----------+\n|  default  |  []       |\n+-----------+-----------+\n\nThis setting enables the widget which allows users to\n`silence notifications for specific objects temporarily or permanently. <#silencing-notifications-for-specific-objects-temporarily-or-permanently>`_\nin the change page of the specified ``ModelAdmin`` classes.\n\nE.g., if you want to enable the widget for objects of ``openwisp_users.models.User``\nmodel, then configure the setting as following:\n\n.. code-block:: python\n\n    OPENWISP_NOTIFICATIONS_IGNORE_ENABLED_ADMIN = ['openwisp_users.admin.UserAdmin']\n\n``OPENWISP_NOTIFICATIONS_POPULATE_PREFERENCES_ON_MIGRATE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+---------+----------+\n| type    | ``bool`` |\n+---------+----------+\n| default | ``True`` |\n+---------+----------+\n\nThis setting allows to disable creating `notification preferences <#notification-preferences>`_\non running migrations.\n\n``OPENWISP_NOTIFICATIONS_NOTIFICATION_STORM_PREVENTION``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen the system starts creating a lot of notifications because of a\ngeneral network outage (e.g.: a power outage, a global misconfiguration),\nthe notification storm prevention mechanism avoids the constant displaying\nof new notification alerts as well as their sound, only the notification\ncounter will continue updating periodically, although it won't emit any\nsound or create any other visual element until the\nnotification storm is over.\n\nThis setting allows tweaking how this mechanism works.\n\nThe default configuration is as follows:\n\n.. code-block:: python\n\n    OPENWISP_NOTIFICATIONS_NOTIFICATION_STORM_PREVENTION = {\n        # Time period for tracking burst of notifications (in seconds)\n        'short_term_time_period': 10,\n        # Number of notifications considered as a notification burst\n        'short_term_notification_count': 6,\n        # Time period for tracking notifications in long time interval (in seconds)\n        'long_term_time_period': 180,\n        # Number of notifications in long time interval to be considered as a notification storm\n        'long_term_notification_count': 30,\n        # Initial time for which notification updates should be skipped (in seconds)\n        'initial_backoff': 1,\n        # Time by which skipping of notification updates should be increased (in seconds)\n        'backoff_increment': 1,\n        # Maximum interval after which the notification widget should get updated (in seconds)\n        'max_allowed_backoff': 15,\n    }\n\nExceptions\n----------\n\n``NotificationRenderException``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    openwisp_notifications.exceptions.NotificationRenderException\n\nRaised when notification properties(``email`` or ``message``) cannot be rendered from\nconcerned *notification type*. It sub-classes ``Exception`` class.\n\nIt can be raised due to accessing non-existing keys like missing related objects\nin ``email`` or ``message`` setting of concerned *notification type*.\n\nREST API\n--------\n\nLive documentation\n~~~~~~~~~~~~~~~~~~\n\n.. image:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/api-docs.png\n\nA general live API documentation (following the OpenAPI specification) is available at ``/api/v1/docs/``.\n\nBrowsable web interface\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://github.com/openwisp/openwisp-notifications/raw/docs/docs/images/api-ui.png\n\nAdditionally, opening any of the endpoints `listed below <#list-of-endpoints>`_\ndirectly in the browser will show the `browsable API interface of Django-REST-Framework\n<https://www.django-rest-framework.org/topics/browsable-api/>`_,\nwhich makes it even easier to find out the details of each endpoint.\n\nAuthentication\n~~~~~~~~~~~~~~\n\nSee openwisp-users: `authenticating with the user token\n<https://github.com/openwisp/openwisp-users#authenticating-with-the-user-token>`_.\n\nWhen browsing the API via the `Live documentation <#live-documentation>`_\nor the `Browsable web interface <#browsable-web-interface>`_, you can use\nthe session authentication by logging in the django admin.\n\nPagination\n~~~~~~~~~~\n\nThe *list* endpoint support the ``page_size`` parameter that allows paginating\nthe results in conjunction with the ``page`` parameter.\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/?page_size=10\n    GET /api/v1/notifications/notification/?page_size=10&page=2\n\nList of endpoints\n~~~~~~~~~~~~~~~~~\n\nSince the detailed explanation is contained in the `Live documentation <#live-documentation>`_\nand in the `Browsable web page <#browsable-web-interface>`_ of each endpoint,\nhere we'll provide just a list of the available endpoints,\nfor further information please open the URL of the endpoint in your browser.\n\nList user's notifications\n#########################\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/\n\nMark all user's notifications as read\n#####################################\n\n.. code-block:: text\n\n    POST /api/v1/notifications/notification/read/\n\nGet notification details\n########################\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/{pk}/\n\nMark a notification read\n########################\n\n.. code-block:: text\n\n    PATCH /api/v1/notifications/notification/{pk}/\n\nDelete a notification\n#####################\n\n.. code-block:: text\n\n    DELETE /api/v1/notifications/notification/{pk}/\n\nList user's notification setting\n################################\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/user-setting/\n\nGet notification setting details\n################################\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/user-setting/{pk}/\n\nUpdate notification setting details\n###################################\n\n.. code-block:: text\n\n    PATCH /api/v1/notifications/notification/user-setting/{pk}/\n\nList user's object notification setting\n#######################################\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/ignore/\n\nGet object notification setting details\n#######################################\n\n.. code-block:: text\n\n    GET /api/v1/notifications/notification/ignore/{app_label}/{model_name}/{object_id}/\n\nCreate object notification setting\n##################################\n\n.. code-block:: text\n\n    PUT /api/v1/notifications/notification/ignore/{app_label}/{model_name}/{object_id}/\n\nDelete object notification setting\n##################################\n\n.. code-block:: text\n\n    DELETE /api/v1/notifications/notification/ignore/{app_label}/{model_name}/{object_id}/\n\n\nManagement Commands\n-------------------\n\n``populate_notification_preferences``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis command will populate notification preferences for all users for organizations\nthey are member of.\n\nExample usage:\n\n.. code-block:: shell\n\n    # cd tests/\n    ./manage.py populate_notification_preferences\n\n**Note**: Before running this command make sure that the celery broker is\nrunning and **reachable** by celery workers.\n\n``create_notification``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThis command will create a dummy notification with ``default`` notification type\nfor the members of ``default`` organization.\nThis command is primarily provided for the sole purpose of testing notification\nin development only.\n\nExample usage:\n\n.. code-block:: shell\n\n    # cd tests/\n    ./manage.py create_notification\n\nExtending openwisp-notifications\n--------------------------------\n\nOne of the core values of the OpenWISP project is `Software Reusability <http://openwisp.io/docs/general/values.html#software-reusability-means-long-term-sustainability>`_,\nfor this reason *OpenWISP Notifications* provides a set of base classes which can be imported, extended\nand reused to create derivative apps.\n\nIn order to implement your custom version of *openwisp-notifications*, you need to perform the steps\ndescribed in the rest of this section.\n\nWhen in doubt, the code in `test project <https://github.com/openwisp/openwisp-notifications/tree/master/tests/openwisp2/>`_\nand `sample_notifications <https://github.com/openwisp/openwisp-notifications/tree/master/tests/openwisp2/sample_notifications/>`_\nwill guide you in the correct direction: just replicate and adapt that code to get a basic derivative of\n*openwisp-notifications* working.\n\n**Premise**: if you plan on using a customized version of this module, we suggest to start with it since\nthe beginning, because migrating your data from the default module to your extended version may be time\nconsuming.\n\n1. Initialize your custom module\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe first thing you need to do in order to extend *openwisp-notifications* is create a new django app which\nwill contain your custom version of that *openwisp-notifications* app.\n\nA django app is nothing more than a `python package <https://docs.python.org/3/tutorial/modules.html#packages>`_\n(a directory of python scripts), in the following examples we'll call this django app as ``mynotifications``\nbut you can name it how you want:\n\n.. code-block:: shell\n\n    django-admin startapp mynotifications\n\nKeep in mind that the command mentioned above must be called from a directory which is available in your\n`PYTHON_PATH <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH>`_ so that you can then import\nthe result into your project.\n\nNow you need to add ``mynotifications`` to ``INSTALLED_APPS`` in your ``settings.py``, ensuring also that\n``openwisp_notifications`` has been removed:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ... other apps ...\n        # 'openwisp_notifications',        <-- comment out or delete this line\n        'mynotifications',\n    ]\n\nFor more information about how to work with django projects and django apps, please refer to the\n`django documentation <https://docs.djangoproject.com/en/dev/intro/tutorial01/>`_.\n\n2. Install ``openwisp-notifications``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall (and add to the requirement of your project) *openwisp-notifications*:\n\n.. code-block:: shell\n\n    pip install -U https://github.com/openwisp/openwisp-notifications/tarball/master\n\n3. Add ``EXTENDED_APPS``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = ['openwisp_notifications']\n\n4. Add ``openwisp_utils.staticfiles.DependencyFinder``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to ``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n5. Add ``openwisp_utils.loaders.DependencyLoader``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES`` in your ``settings.py``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\n6. Inherit the AppConfig class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the following files in the sample app of the test project:\n\n- `sample_notifications/__init__.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/__init__.py>`_.\n- `sample_notifications/apps.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/apps.py>`_.\n\nFor more information regarding the concept of ``AppConfig`` please refer to the\n`\"Applications\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/applications/>`_.\n\n7. Create your custom models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor the purpose of showing an example, we added a simple \"details\" field to the\n`models of the sample app in the test project <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/models.py>`_.\n\nYou can add fields in a similar way in your ``models.py`` file.\n\n**Note**: For doubts regarding how to use, extend or develop models please refer to\nthe `\"Models\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/db/models/>`_.\n\n8. Add swapper configurations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    # Setting models for swapper module\n    OPENWISP_NOTIFICATIONS_NOTIFICATION_MODEL = 'mynotifications.Notification'\n    OPENWISP_NOTIFICATIONS_NOTIFICATIONSETTING_MODEL = 'mynotifications.NotificationSetting'\n    OPENWISP_NOTIFICATIONS_IGNOREOBJECTNOTIFICATION_MODEL = 'mynotifications.IgnoreObjectNotification'\n\n9. Create database migrations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate and apply database migrations::\n\n    ./manage.py makemigrations\n    ./manage.py migrate\n\nFor more information, refer to the\n`\"Migrations\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/>`_.\n\n10. Create your custom admin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRefer to the `admin.py file of the sample app <https://github.com/openwisp/openwisp-notifications/tests/openwisp2/sample_firmware_upgrader/admin.py>`_.\n\nTo introduce changes to the admin, you can do it in two main ways which are described below.\n\n**Note**: For more information regarding how the django admin works, or how it can be customized,\nplease refer to `\"The django admin site\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_.\n\n1. Monkey patching\n##################\n\nIf the changes you need to add are relatively small, you can resort to monkey patching.\n\nFor example:\n\n.. code-block:: python\n\n    from openwisp_notifications.admin import NotificationSettingInline\n\n    NotificationSettingInline.list_display.insert(1, 'my_custom_field')\n    NotificationSettingInline.ordering = ['-my_custom_field']\n\n2. Inheriting admin classes\n###########################\n\nIf you need to introduce significant changes and/or you don't want to resort to\nmonkey patching, you can proceed as follows:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from openwisp_notifications.admin import (\n        NotificationSettingInline as BaseNotificationSettingInline,\n    )\n    from openwisp_notifications.swapper import load_model\n\n    NotificationSetting = load_model('NotificationSetting')\n\n    admin.site.unregister(NotificationSettingAdmin)\n    admin.site.unregister(NotificationSettingInline)\n\n\n    @admin.register(NotificationSetting)\n    class NotificationSettingInline(BaseNotificationSettingInline):\n        # add your changes here\n        pass\n\n11. Create root URL configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `urls.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/urls.py>`_\nfile in the test project.\n\nFor more information about URL configuration in django, please refer to the\n`\"URL dispatcher\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n12. Create root routing configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `routing.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/routing.py>`_\nfile in the test project.\n\nFor more information about URL configuration in django, please refer to the\n`\"Routing\" section in the Channels documentation <https://channels.readthedocs.io/en/latest/topics/routing.html>`_.\n\n13. Create celery.py\n~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `celery.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/celery.py>`_\nfile in the test project.\n\nFor more information about the usage of celery in django, please refer to the\n`\"First steps with Django\" section in the celery documentation <https://docs.celeryproject.org/en/master/django/first-steps-with-django.html>`_.\n\n14. Import Celery Tasks\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following in your settings.py to import celery tasks from ``openwisp_notifications`` app.\n\n.. code-block:: python\n\n    CELERY_IMPORTS = ('openwisp_notifications.tasks',)\n\n15. Register Template Tags\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you need to use template tags of *openwisp_notifications*, you will need to register as shown in\n`\"templatetags/notification_tags.py\" of sample_notifications\n<https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/templatetags/notification_tags.py>`_.\n\nFor more information about template tags in django, please refer to the\n`\"Custom template tags and filters\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n16. Register Notification Types\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can register notification types as shown in the `section for registering notification types <#register_notification_type>`_.\n\nA reference for registering a notification type is also provided in\n`sample_notifications/apps.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/apps.py>`_.\nThe registered notification type of ``sample_notifications`` app is used for creating notifications\nwhen an object of ``TestApp`` model is created. You can use\n`sample_notifications/models.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/models.py>`_\nas reference for your implementation.\n\n17. Import the automated tests\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen developing a custom application based on this module, it's a good idea to import and run the base tests\ntoo, so that you can be sure the changes you're introducing are not breaking some of the existing feature\nof openwisp-notifications.\n\nIn case you need to add breaking changes, you can overwrite the tests defined in the base classes to test\nyour own behavior.\n\nSee the `tests of the sample_notifications\n<https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/tests.py>`_\nto find out how to do this.\n\n**Note**: Some tests will fail if ``templatetags`` and ``admin/base.html`` are not configured properly.\nSee preceeding sections to configure them properly.\n\nOther base classes that can be inherited and extended\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following steps are not required and are intended for more advanced customization.\n\nAPI views\n#########\n\nThe API view classes can be extended into other django applications as well. Note\nthat it is not required for extending openwisp-notifications to your app and this change\nis required only if you plan to make changes to the API views.\n\nCreate a view file as done in `sample_notifications/views.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/views.py>`_\n\nFor more information regarding Django REST Framework API views, please refer to the\n`\"Generic views\" section in the Django REST Framework documentation <https://www.django-rest-framework.org/api-guide/generic-views/>`_.\n\nWeb Socket Consumers\n####################\n\nThe Web Socket Consumer classes can be extended into other django applications as well. Note\nthat it is not required for extending openwisp-notifications to your app and this change\nis required only if you plan to make changes to the consumers.\n\nCreate a consumer file as done in `sample_notifications/consumers.py <https://github.com/openwisp/openwisp-notifications/blob/master/tests/openwisp2/sample_notifications/consumers.py>`_\n\nFor more information regarding Channels' Consumers, please refer to the\n`\"Consumers\" section in the Channels documentation <https://channels.readthedocs.io/en/latest/topics/consumers.html>`_.\n\nContributing\n------------\n\nPlease read the `OpenWISP contributing guidelines <http://openwisp.io/docs/developer/contributing.html>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/openwisp-notifications/blob/master/LICENSE>`_.\n\nSupport\n-------\n\nSee `OpenWISP Support Channels <http://openwisp.org/support.html>`_.\n\nAttributions\n------------\n\nIcons\n~~~~~\n\n`Icons <https://github.com/openwisp/openwisp-notifications/tree/master/openwisp_notifications/static/openwisp-notifications/images/icons/>`_\nused are taken from `Font Awesome <https://fontawesome.com/>`_ project.\n\nLICENSE: `https://fontawesome.com/license <https://fontawesome.com/license>`_\n\nSound\n~~~~~\n\n`Notification sound <https://github.com/openwisp/openwisp-notifications/tree/master/openwisp_notifications/static/openwisp-notifications/audio>`_\nis taken from `Notification Sounds <https://notificationsounds.com/>`_.\n\nLICENSE: `Creative Commons Attribution license <https://creativecommons.org/licenses/by/4.0/legalcode>`_\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/openwisp-notifications/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://openwisp.org",
    "keywords": "django,netjson,notification,openwisp,monitoring",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openwisp-notifications",
    "package_url": "https://pypi.org/project/openwisp-notifications/",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/openwisp-notifications/",
    "project_urls": {
      "Download": "https://github.com/openwisp/openwisp-notifications/releases",
      "Homepage": "http://openwisp.org"
    },
    "release_url": "https://pypi.org/project/openwisp-notifications/1.0.3/",
    "requires_dist": [
      "django-notifications-hq (~=1.7.0)",
      "channels (~=3.0.2)",
      "openwisp-users (~=1.0.0)",
      "openwisp-utils[celery,rest] (~=1.0.1)",
      "markdown (~=3.2.0)"
    ],
    "requires_python": "",
    "summary": "Notifications module of OpenWISP",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14641268,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d394d77e4cb7d4a8181fd6112cb801e854f97830d62a04c9bbf829a926479797",
          "md5": "522c051ca1c4532c4e2a98d6ae3637fc",
          "sha256": "68399da531324a95e76cc9f7856ecabae2d0b68f31b0317fad593da7073a0e44"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "522c051ca1c4532c4e2a98d6ae3637fc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 147032,
        "upload_time": "2020-09-02T01:22:12",
        "upload_time_iso_8601": "2020-09-02T01:22:12.815531Z",
        "url": "https://files.pythonhosted.org/packages/d3/94/d77e4cb7d4a8181fd6112cb801e854f97830d62a04c9bbf829a926479797/openwisp_notifications-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e696bbccaec11a81709eb5d31700fb5209e71f1d883b15a288ef0a77ec75b42d",
          "md5": "6d3c4676c4ccaa4a12e0f3cdc5e180e1",
          "sha256": "3287dc185e6bb4dc1358f9150c95eefc1bcb6fd58b884878998a679b2f2a4889"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "6d3c4676c4ccaa4a12e0f3cdc5e180e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 157705,
        "upload_time": "2020-09-02T01:22:22",
        "upload_time_iso_8601": "2020-09-02T01:22:22.032896Z",
        "url": "https://files.pythonhosted.org/packages/e6/96/bbccaec11a81709eb5d31700fb5209e71f1d883b15a288ef0a77ec75b42d/openwisp-notifications-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae84b8a49a84d8146355cb5749472ff75ca08789fb823e7769be49eed9503ec7",
          "md5": "377d82fca9b4bdda3594c9e2836dd482",
          "sha256": "1ed9695c716322ab988cda77ea5c0ec24520f2ff07e1f1ceb87eb9b4b15c7fee"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "377d82fca9b4bdda3594c9e2836dd482",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 158969,
        "upload_time": "2020-09-17T12:19:51",
        "upload_time_iso_8601": "2020-09-17T12:19:51.334989Z",
        "url": "https://files.pythonhosted.org/packages/ae/84/b8a49a84d8146355cb5749472ff75ca08789fb823e7769be49eed9503ec7/openwisp_notifications-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51d5643d702ad72b044068128347480de823f27fcdfae9414c22e0f3c6caebf6",
          "md5": "b9152a916eb55e80a5c66a3cfdd9229e",
          "sha256": "d3991c0622253d5fa1ce8862a91941ca2fb172daeb2f9720adc3cbd02738ff82"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9152a916eb55e80a5c66a3cfdd9229e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 159111,
        "upload_time": "2020-10-18T11:28:14",
        "upload_time_iso_8601": "2020-10-18T11:28:14.847395Z",
        "url": "https://files.pythonhosted.org/packages/51/d5/643d702ad72b044068128347480de823f27fcdfae9414c22e0f3c6caebf6/openwisp_notifications-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67a5f9a4f54ca3dd631fb02a76b5b26c534a5c29588c489abf1728f055a6e818",
          "md5": "1255e8271c7c91cec7cfa0ef5e9a021e",
          "sha256": "49a72ae398094b0621cf1297068835571177ae09452d9d30d639933b67a8d22d"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1255e8271c7c91cec7cfa0ef5e9a021e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 166511,
        "upload_time": "2020-10-18T11:28:18",
        "upload_time_iso_8601": "2020-10-18T11:28:18.322094Z",
        "url": "https://files.pythonhosted.org/packages/67/a5/f9a4f54ca3dd631fb02a76b5b26c534a5c29588c489abf1728f055a6e818/openwisp-notifications-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cffb5ec0c9a9a10d9fadfcf3cd4531aada6fae26ba70b18276d0535207d1f953",
          "md5": "437d29f0d8521229d2628bdaeeece74f",
          "sha256": "10ae6e79bb792687757f9a83f127d9c50800b270606cb5783f49e576da4c9ff1"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "437d29f0d8521229d2628bdaeeece74f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 160683,
        "upload_time": "2020-11-20T22:18:49",
        "upload_time_iso_8601": "2020-11-20T22:18:49.226786Z",
        "url": "https://files.pythonhosted.org/packages/cf/fb/5ec0c9a9a10d9fadfcf3cd4531aada6fae26ba70b18276d0535207d1f953/openwisp_notifications-0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56659e41557dcfccbfbe30c1fc3cd475e62849c3b3591ea31f66a18eaf44ba13",
          "md5": "3fd27e1e9424c769b268d868369ffd17",
          "sha256": "3ac9d7740fc156ba0057d5cf12f23e55c03a70ba26b405da52d8e1204a171050"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fd27e1e9424c769b268d868369ffd17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 168056,
        "upload_time": "2020-11-20T22:18:52",
        "upload_time_iso_8601": "2020-11-20T22:18:52.839302Z",
        "url": "https://files.pythonhosted.org/packages/56/65/9e41557dcfccbfbe30c1fc3cd475e62849c3b3591ea31f66a18eaf44ba13/openwisp-notifications-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "759df0b8360ac32f21e556a105362cb677893d24ea859bfeb57bd2aee84e880e",
          "md5": "1c76189696df8a7bba26ddfb0ae2b157",
          "sha256": "45370fffa4562f333ad7e416b37aea9d4a3e0b29b08d364b1e46fc2941a409fa"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "1c76189696df8a7bba26ddfb0ae2b157",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 157205,
        "upload_time": "2022-04-28T20:16:48",
        "upload_time_iso_8601": "2022-04-28T20:16:48.800608Z",
        "url": "https://files.pythonhosted.org/packages/75/9d/f0b8360ac32f21e556a105362cb677893d24ea859bfeb57bd2aee84e880e/openwisp_notifications-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0a9492712d26ba921378627968062ec2e75923c80910f7378f7a7356c2ef86d",
          "md5": "6a9f23fe834b144e3d097a5b99739b62",
          "sha256": "fdf4026dcf61c87ecc2bb35a065dffcfea060f8def486715f0e4169559cdded1"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "6a9f23fe834b144e3d097a5b99739b62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 165427,
        "upload_time": "2022-04-28T20:16:58",
        "upload_time_iso_8601": "2022-04-28T20:16:58.226808Z",
        "url": "https://files.pythonhosted.org/packages/b0/a9/492712d26ba921378627968062ec2e75923c80910f7378f7a7356c2ef86d/openwisp-notifications-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba9f712c9801a03d36a55a88495954fc0e0c051231a6af980bf80a1a79c9df99",
          "md5": "a48511dcb65576864df72c98a20f14ac",
          "sha256": "58fe1e166b4d6fa69e6280dda7b7a2f313caba9d34dff5c1432bf76acb8516d9"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a48511dcb65576864df72c98a20f14ac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 157258,
        "upload_time": "2022-06-09T17:39:17",
        "upload_time_iso_8601": "2022-06-09T17:39:17.551503Z",
        "url": "https://files.pythonhosted.org/packages/ba/9f/712c9801a03d36a55a88495954fc0e0c051231a6af980bf80a1a79c9df99/openwisp_notifications-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f2841802dabc631e317a0831edd2c93e3f28e0fc964f58fec9475e9beeaa473",
          "md5": "eb8557323bc608c2a2764272d987c438",
          "sha256": "fbb6267b78e732e8078c9967e0defac324a2b4bfabf655b06bf6caf058f02d0f"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb8557323bc608c2a2764272d987c438",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 165212,
        "upload_time": "2022-06-09T17:39:21",
        "upload_time_iso_8601": "2022-06-09T17:39:21.975806Z",
        "url": "https://files.pythonhosted.org/packages/6f/28/41802dabc631e317a0831edd2c93e3f28e0fc964f58fec9475e9beeaa473/openwisp-notifications-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "618c8b17955d666576181b5097b425d10edd86c993f0bd8bbe315f108e4a500a",
          "md5": "5b9795edd369d883dc03f3f785fc2262",
          "sha256": "37448680ddd981f0e4439084c52fee7b780054a005f3de6815b8abd3423a444e"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b9795edd369d883dc03f3f785fc2262",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 157259,
        "upload_time": "2022-07-01T15:16:19",
        "upload_time_iso_8601": "2022-07-01T15:16:19.912687Z",
        "url": "https://files.pythonhosted.org/packages/61/8c/8b17955d666576181b5097b425d10edd86c993f0bd8bbe315f108e4a500a/openwisp_notifications-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72a35cd047cfbeb61534039c284914d10e6650e29fe77cb4d4159f4c94a967e4",
          "md5": "0443ffa7c5815475d567fc16ff83468f",
          "sha256": "8145479f815a64ab25277451f6b6b9c0652825bd9594b43e8fd267b679960714"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0443ffa7c5815475d567fc16ff83468f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 165300,
        "upload_time": "2022-07-01T15:16:24",
        "upload_time_iso_8601": "2022-07-01T15:16:24.114164Z",
        "url": "https://files.pythonhosted.org/packages/72/a3/5cd047cfbeb61534039c284914d10e6650e29fe77cb4d4159f4c94a967e4/openwisp-notifications-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39c1eaf3abbaade35927007e10b7632cce4c16c22aac79d501a7cbcdab3e4a0e",
          "md5": "515ea9436ad4c7b41a61d621e0870c9f",
          "sha256": "bc670c4f92d30a7dae96cbeb8fdd9329c3cf8be3b994f77a1529c2f1c27fce82"
        },
        "downloads": -1,
        "filename": "openwisp_notifications-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "515ea9436ad4c7b41a61d621e0870c9f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 157467,
        "upload_time": "2022-08-03T11:55:17",
        "upload_time_iso_8601": "2022-08-03T11:55:17.961509Z",
        "url": "https://files.pythonhosted.org/packages/39/c1/eaf3abbaade35927007e10b7632cce4c16c22aac79d501a7cbcdab3e4a0e/openwisp_notifications-1.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8def466df3fc41c57b92bf7ad97814fed4b799b6053d1f29a6710dbfed2fa348",
          "md5": "0d3ee7661c87d587b4a2042fb0ae3e7a",
          "sha256": "79c5835af6951fed5b8fac5752d0a0e3b67441eca42d8c635727b4c31d28008a"
        },
        "downloads": -1,
        "filename": "openwisp-notifications-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0d3ee7661c87d587b4a2042fb0ae3e7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 165758,
        "upload_time": "2022-08-03T11:55:21",
        "upload_time_iso_8601": "2022-08-03T11:55:21.340955Z",
        "url": "https://files.pythonhosted.org/packages/8d/ef/466df3fc41c57b92bf7ad97814fed4b799b6053d1f29a6710dbfed2fa348/openwisp-notifications-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39c1eaf3abbaade35927007e10b7632cce4c16c22aac79d501a7cbcdab3e4a0e",
        "md5": "515ea9436ad4c7b41a61d621e0870c9f",
        "sha256": "bc670c4f92d30a7dae96cbeb8fdd9329c3cf8be3b994f77a1529c2f1c27fce82"
      },
      "downloads": -1,
      "filename": "openwisp_notifications-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "515ea9436ad4c7b41a61d621e0870c9f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 157467,
      "upload_time": "2022-08-03T11:55:17",
      "upload_time_iso_8601": "2022-08-03T11:55:17.961509Z",
      "url": "https://files.pythonhosted.org/packages/39/c1/eaf3abbaade35927007e10b7632cce4c16c22aac79d501a7cbcdab3e4a0e/openwisp_notifications-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8def466df3fc41c57b92bf7ad97814fed4b799b6053d1f29a6710dbfed2fa348",
        "md5": "0d3ee7661c87d587b4a2042fb0ae3e7a",
        "sha256": "79c5835af6951fed5b8fac5752d0a0e3b67441eca42d8c635727b4c31d28008a"
      },
      "downloads": -1,
      "filename": "openwisp-notifications-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0d3ee7661c87d587b4a2042fb0ae3e7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 165758,
      "upload_time": "2022-08-03T11:55:21",
      "upload_time_iso_8601": "2022-08-03T11:55:21.340955Z",
      "url": "https://files.pythonhosted.org/packages/8d/ef/466df3fc41c57b92bf7ad97814fed4b799b6053d1f29a6710dbfed2fa348/openwisp-notifications-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}