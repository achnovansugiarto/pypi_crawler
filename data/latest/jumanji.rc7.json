{
  "info": {
    "author": "InstaDeep",
    "author_email": "hello@instadeep.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\">\n    <a href=\"docs/img/jumanji_logo.png\">\n        <img src=\"docs/img/jumanji_logo.png\" alt=\"Jumanji logo\" width=\"50%\"/>\n    </a>\n</p>\n\n[![Python Versions](https://img.shields.io/pypi/pyversions/jumanji.svg?style=flat-square)](https://www.python.org/doc/versions/)\n[![PyPI Version](https://badge.fury.io/py/jumanji.svg)](https://badge.fury.io/py/jumanji)\n[![Tests](https://github.com/instadeepai/jumanji/actions/workflows/tests_linters.yml/badge.svg)](https://github.com/instadeepai/jumanji/actions/workflows/tests_linters.yml)\n[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![MyPy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-orange.svg)](https://opensource.org/licenses/Apache-2.0)\n\n[**Environments**](#environments-)\n| [**Installation**](#installation-)\n| [**Quickstart**](#quickstart-)\n| [**Training**](#training-%EF%B8%8F)\n| [**Citation**](#citing-jumanji-%EF%B8%8F)\n| [**Docs**](https://instadeepai.github.io/jumanji)\n---\n\n\n<p float=\"left\" align=\"center\">\n  <img src=\"docs/env_anim/connector.gif\" alt=\"Connector\" width=\"30%\" />\n  <img src=\"docs/env_anim/snake.gif\" alt=\"Snake\" width=\"30%\" />\n  <img src=\"docs/env_anim/cleaner.gif\" alt=\"Cleaner\" width=\"30%\" />\n  <img src=\"docs/env_anim/job_shop.gif\" alt=\"JobShop\" width=\"30%\" />\n  <img src=\"docs/env_anim/bin_pack.gif\" alt=\"BinPack\" width=\"30%\" />\n  <img src=\"docs/env_anim/cvrp.gif\" alt=\"CVRP\" width=\"30%\" />\n  <img src=\"docs/env_anim/rubiks_cube.gif\" alt=\"RubiksCube\" width=\"30%\" />\n  <img src=\"docs/env_anim/game_2048.gif\" alt=\"Game2048\" width=\"30%\" />\n  <img src=\"docs/env_anim/minesweeper.gif\" alt=\"Minesweeper\" width=\"30%\" />\n</p>\n\n\n\n## Welcome to the Jungle! üå¥\n\nJumanji is a suite of diverse and challenging reinforcement learning (RL) environments written in\nJAX.\n\nJumanji is helping pioneer a new wave of hardware-accelerated research and development in the\nfield of RL. Jumanji's high-speed environments enable faster iteration and large-scale\nexperimentation while simultaneously reducing complexity. Originating in the Research Team at\n[InstaDeep](https://www.instadeep.com/), Jumanji is now developed jointly with the open-source\ncommunity. To join us in these efforts, reach out, raise issues and read our\n[contribution guidelines](https://github.com/instadeepai/jumanji/blob/main/CONTRIBUTING.md) or just\n[star](https://github.com/instadeepai/jumanji) üåü to stay up to date with the latest developments!\n\n### Goals üöÄ\n\n1. Provide a simple, well-tested API for JAX-based environments.\n2. Make research in RL more accessible.\n3. Facilitate the research on RL for problems in the industry and help close the gap between\nresearch and industrial applications.\n4. Provide environments whose difficulty can be scaled to be arbitrarily hard.\n\n### Overview ü¶ú\n\n- ü•ë **Environment API**: core abstractions for JAX-based environments.\n- üïπÔ∏è **Environment Suite**: a collection of RL environments ranging from simple games to NP-hard\ncombinatorial problems.\n- üç¨ **Wrappers**: easily connect to your favourite RL frameworks and libraries such as\n[Acme](https://github.com/deepmind/acme),\n[Stable Baselines3](https://github.com/DLR-RM/stable-baselines3),\n[RLlib](https://docs.ray.io/en/latest/rllib/index.html), [OpenAI Gym](https://github.com/openai/gym)\nand [DeepMind-Env](https://github.com/deepmind/dm_env) through our `dm_env` and `gym` wrappers.\n- üéì **Examples**: guides to facilitate Jumanji's adoption and highlight the added value of\nJAX-based environments.\n- üèéÔ∏è **Training:** example agents that can be used as inspiration for the agents one may implement\nin their research.\n\n\n## Environments üåç\n\nJumanji provides a diverse range of environments ranging from simple games to NP-hard combinatorial\nproblems.\n\n| Environment                              | Category | Registered Version(s)                                | Source                                                                                           | Description                                                            |\n|------------------------------------------|----------|------------------------------------------------------|--------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| üî¢ Game2048                              | Logic  | `Game2048-v0`                                        | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/logic/game_2048/)   | [doc](https://instadeepai.github.io/jumanji/environments/game_2048/)   |\n| üí£ Minesweeper                           | Logic    | `Minesweeper-v0`                                     | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/logic/minesweeper/) | [doc](https://instadeepai.github.io/jumanji/environments/minesweeper/) |\n| üé≤ RubiksCube                            | Logic    | `RubiksCube-v0`<br/>`RubiksCube-partly-scrambled-v0` | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/logic/rubiks_cube/) | [doc](https://instadeepai.github.io/jumanji/environments/rubiks_cube/) |\n| üì¶ BinPack (3D BinPacking Problem)       | Packing  | `BinPack-v1`                                         | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/packing/bin_pack/)  | [doc](https://instadeepai.github.io/jumanji/environments/bin_pack/)    |\n| üè≠ JobShop (Job Shop Scheduling Problem) | Packing  | `JobShop-v0`                                         | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/packing/job_shop/)  | [doc](https://instadeepai.github.io/jumanji/environments/job_shop/)    |\n| üéí Knapsack                              | Packing  | `Knapsack-v1`                                        | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/packing/knapsack/)  | [doc](https://instadeepai.github.io/jumanji/environments/knapsack/)    |\n| üßπ Cleaner                               | Routing  | `Cleaner-v0`                                         | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/routing/cleaner/)   | [doc](https://instadeepai.github.io/jumanji/environments/cleaner/)     |\n| :link: Connector                         | Routing  | `Connector-v0`                                       | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/routing/connector/) | [doc](https://instadeepai.github.io/jumanji/environments/connector/)   |\n| üöö CVRP (Capacitated Vehicle Routing Problem)  | Routing  | `CVRP-v1`                                            | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/routing/cvrp/)      | [doc](https://instadeepai.github.io/jumanji/environments/cvrp/)        |\n| :mag: Maze   | Routing  | `Maze-v0`                                            | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/routing/maze/)      | [doc](https://instadeepai.github.io/jumanji/environments/maze/)        |\n| üêç Snake                                       | Routing  | `Snake-v1`                                           | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/routing/snake/)     | [doc](https://instadeepai.github.io/jumanji/environments/snake/)       |\n| üì¨ TSP (Travelling Salesman Problem)           | Routing  | `TSP-v1`                                             | [code](https://github.com/instadeepai/jumanji/tree/main/jumanji/environments/routing/tsp/)       | [doc](https://instadeepai.github.io/jumanji/environments/tsp/)         |\n\n\n## Installation üé¨\n\nYou can install the latest release of Jumanji from PyPI:\n```bash\npip install jumanji\n```\nAlternatively, you can install the latest development version directly from GitHub:\n```bash\npip install git+https://github.com/instadeepai/jumanji.git\n```\nJumanji has been tested on Python 3.8 and 3.9.\nNote that because the installation of JAX differs depending on your hardware accelerator,\nwe advise users to explicitly install the correct JAX version (see the\n[official installation guide](https://github.com/google/jax#installation)).\n\n**Rendering:** Matplotlib is used for rendering all the environments. To visualize the environments\nyou will need a GUI backend. For example, on Linux, you can install Tk via:\n`apt-get install python3-tk`, or using conda: `conda install tk`. Check out\n[Matplotlib backends](https://matplotlib.org/stable/users/explain/backends.html) for a list of\nbackends you can use.\n\n\n## Quickstart ‚ö°\n\nRL practitioners will find Jumanji's interface familiar as it combines the widely adopted\n[OpenAI Gym](https://github.com/openai/gym) and\n[DeepMind Environment](https://github.com/deepmind/dm_env) interfaces. From OpenAI Gym, we adopted\nthe idea of a `registry` and the `render` method, while our `TimeStep` structure is inspired by\nDeepMind Environment.\n\n### Basic Usage üßë‚Äçüíª\n\n```python\nimport jax\nimport jumanji\n\n# Instantiate a Jumanji environment using the registry\nenv = jumanji.make('Snake-v1')\n\n# Reset your (jit-able) environment\nkey = jax.random.PRNGKey(0)\nstate, timestep = jax.jit(env.reset)(key)\n\n# (Optional) Render the env state\nenv.render(state)\n\n# Interact with the (jit-able) environment\naction = env.action_spec().generate_value()          # Action selection (dummy value here)\nstate, timestep = jax.jit(env.step)(state, action)   # Take a step and observe the next state and time step\n```\n\n- `state` represents the internal state of the environment: it contains all the information required\nto take a step when executing an action. This should **not** be confused with the `observation`\ncontained in the `timestep`, which is the information perceived by the agent.\n- `timestep` is a dataclass containing `step_type`, `reward`, `discount`, `observation` and\n`extras`. This structure is similar to\n[`dm_env.TimeStep`](https://github.com/deepmind/dm_env/blob/master/docs/index.md) except for the\n`extras` field that was added to allow users to log environments metrics that are neither part of\nthe agent's observation nor part of the environment's internal state.\n\n### Advanced Usage üßë‚Äçüî¨\n\nBeing written in JAX, Jumanji's environments benefit from many of its features including\nautomatic vectorization/parallelization (`jax.vmap`, `jax.pmap`) and JIT-compilation (`jax.jit`),\nwhich can be composed arbitrarily.\nWe provide an example of a more advanced usage in the\n[advanced usage guide](https://instadeepai.github.io/jumanji/guides/advanced_usage/).\n\n### Registry and Versioning üìñ\n\nLike OpenAI Gym, Jumanji keeps a strict versioning of its environments for reproducibility reasons.\nWe maintain a registry of standard environments with their configuration.\nFor each environment, a version suffix is appended, e.g. `Snake-v1`.\nWhen changes are made to environments that might impact learning results,\nthe version number is incremented by one to prevent potential confusion.\nFor a full list of registered versions of each environment, check out\n[the documentation](https://instadeepai.github.io/jumanji/environments/tsp/).\n\n\n## Training üèéÔ∏è\n\nTo showcase how to train RL agents on Jumanji environments, we provide a random agent and a vanilla\nactor-critic (A2C) agent. These agents can be found in\n[jumanji/training/](https://github.com/instadeepai/jumanji/tree/main/jumanji/training/).\n\nBecause the environment framework in Jumanji is so flexible, it allows pretty much any problem to\nbe implemented as a Jumanji environment, giving rise to very diverse observations. For this reason,\nenvironment-specific networks are required to capture the symmetries of each environment.\nAlongside the A2C agent implementation, we provide examples of such environment-specific\nactor-critic networks in\n[jumanji/training/networks](https://github.com/instadeepai/jumanji/tree/main/jumanji/training/networks/).\n\n> ‚ö†Ô∏è The example agents in `jumanji/training` are **only** meant to serve as inspiration for how one\n> can implement an agent. Jumanji is first and foremost a library of environments - as such, the\n> agents and networks will **not** be maintained to a production standard.\n\nFor more information on how to use the example agents, see the\n[training guide](https://instadeepai.github.io/jumanji/guides/training/).\n\n\n## Contributing ü§ù\n\nContributions are welcome! See our issue tracker for\n[good first issues](https://github.com/instadeepai/jumanji/labels/good%20first%20issue). Please read\nour [contributing guidelines](https://github.com/instadeepai/jumanji/blob/main/CONTRIBUTING.md) for\ndetails on how to submit pull requests, our Contributor License Agreement, and community guidelines.\n\n\n## Citing Jumanji ‚úèÔ∏è\n\nIf you use Jumanji in your work, please cite the library using:\n```\n@software{jumanji2023github,\n  author = {Cl√©ment Bonnet and Daniel Luo and Donal Byrne and Sasha Abramowitz\n        and Vincent Coyette and Paul Duckworth and Daniel Furelos-Blanco and\n        Nathan Grinsztajn and Tristan Kalloniatis and Victor Le and Omayma Mahjoub\n        and Laurence Midgley and Shikha Surana and Cemlyn Waters and Alexandre Laterre},\n  title = {Jumanji: a Suite of Diverse and Challenging Reinforcement Learning Environments in JAX},\n  url = {https://github.com/instadeepai/jumanji},\n  version = {0.2.1},\n  year = {2023},\n}\n```\n\n\n## See Also üîé\n\nOther works have embraced the approach of writing RL environments in JAX.\nIn particular, we suggest users check out the following sister repositories:\n\n- ü§ñ [Qdax](https://github.com/adaptive-intelligent-robotics/QDax) is a library to accelerate\nQuality-Diversity and neuro-evolution algorithms through hardware accelerators and parallelization.\n- ü¶æ [Brax](https://github.com/google/brax) is a differentiable physics engine that simulates\nenvironments made up of rigid bodies, joints, and actuators.\n- üèãÔ∏è‚Äç [Gymnax](https://github.com/RobertTLange/gymnax) implements classic environments including\nclassic control, bsuite, MinAtar and a collection of meta RL tasks.\n- üå≥ [Evojax](https://github.com/google/evojax) provides tools to enable neuroevolution algorithms\nto work with neural networks running across multiple TPU/GPUs.\n\n\n## Acknowledgements üôè\n\nThe development of this library was supported with Cloud TPUs\nfrom Google's [TPU Research Cloud](https://sites.research.google/trc/about/) (TRC) üå§.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/instadeepai/jumanji/",
    "keywords": "reinforcement-learning python jax",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jumanji",
    "package_url": "https://pypi.org/project/jumanji/",
    "platform": null,
    "project_url": "https://pypi.org/project/jumanji/",
    "project_urls": {
      "Homepage": "https://github.com/instadeepai/jumanji/"
    },
    "release_url": "https://pypi.org/project/jumanji/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A suite of diverse and challenging RL environments in JAX",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17383356,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b85da1356947b6671a215d982011896fd654d87fc2e12b5d85eaec3b5abdc86e",
          "md5": "5d6990bc6e86e521b8ed4a16ff92f731",
          "sha256": "04cce35f56bc14a33d18e2ca3db6c5528364eacf3b4d38fedd375d90326000b3"
        },
        "downloads": -1,
        "filename": "jumanji-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d6990bc6e86e521b8ed4a16ff92f731",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 72378,
        "upload_time": "2022-08-31T14:33:31",
        "upload_time_iso_8601": "2022-08-31T14:33:31.119665Z",
        "url": "https://files.pythonhosted.org/packages/b8/5d/a1356947b6671a215d982011896fd654d87fc2e12b5d85eaec3b5abdc86e/jumanji-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a501c3830a8702d0ff79b4c108ded211d6f7b575abf06aab5785a68269453270",
          "md5": "815200112ef0bc26b5adba7ed0b08846",
          "sha256": "567fbc1509e62c65b625edb8f211a4e442b2a89d813bed0ce32e78f52ae29501"
        },
        "downloads": -1,
        "filename": "jumanji-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "815200112ef0bc26b5adba7ed0b08846",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 72369,
        "upload_time": "2022-08-31T17:21:38",
        "upload_time_iso_8601": "2022-08-31T17:21:38.523346Z",
        "url": "https://files.pythonhosted.org/packages/a5/01/c3830a8702d0ff79b4c108ded211d6f7b575abf06aab5785a68269453270/jumanji-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f37b1537b89b923111ee6e051199140c28dae53e4abd97ed270155b5c6f69e4",
          "md5": "b18f8b81de55e28374f3f56f7da27d61",
          "sha256": "6d0dfdc896c8df5b3ab00f383d9c5c06fa2b155a9faf92d5989b6982c5345de7"
        },
        "downloads": -1,
        "filename": "jumanji-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b18f8b81de55e28374f3f56f7da27d61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 76252,
        "upload_time": "2022-11-16T11:35:26",
        "upload_time_iso_8601": "2022-11-16T11:35:26.127860Z",
        "url": "https://files.pythonhosted.org/packages/1f/37/b1537b89b923111ee6e051199140c28dae53e4abd97ed270155b5c6f69e4/jumanji-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76be7cd16a158db17c62cb08e7230ceda1f40d2eb5eb4a6ad5b185dfb09ef47e",
          "md5": "fde04d6b36e0e1ee0d0b7fd43148b45c",
          "sha256": "53be805f79682b23161fc1cd31f5ac8b2aac301f8e0d44b38da251ced06ef548"
        },
        "downloads": -1,
        "filename": "jumanji-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fde04d6b36e0e1ee0d0b7fd43148b45c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 76249,
        "upload_time": "2022-11-16T13:01:23",
        "upload_time_iso_8601": "2022-11-16T13:01:23.704555Z",
        "url": "https://files.pythonhosted.org/packages/76/be/7cd16a158db17c62cb08e7230ceda1f40d2eb5eb4a6ad5b185dfb09ef47e/jumanji-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75f46bec66d9236de565de344fefc4d9d19ac578ed6c1bc44d339a591eea561e",
          "md5": "d231fd72b44c673522b576d2225a9b36",
          "sha256": "dd1771cb5e52f3c446ab067c741b25795232fd3225ea6b6492a3e234bb30c822"
        },
        "downloads": -1,
        "filename": "jumanji-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d231fd72b44c673522b576d2225a9b36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 77176,
        "upload_time": "2023-01-04T18:06:23",
        "upload_time_iso_8601": "2023-01-04T18:06:23.725377Z",
        "url": "https://files.pythonhosted.org/packages/75/f4/6bec66d9236de565de344fefc4d9d19ac578ed6c1bc44d339a591eea561e/jumanji-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9da4d31f67e649166efdc0f72d99707234e3475dd53d5c78aba7461d6c7c80e",
          "md5": "4fe3264d970c461399d14d04005b52d1",
          "sha256": "bc964f5e997e1949b980dbc47d9c00e12c193be6e480b7009d337210d713afe7"
        },
        "downloads": -1,
        "filename": "jumanji-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4fe3264d970c461399d14d04005b52d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 76996,
        "upload_time": "2023-02-22T16:01:36",
        "upload_time_iso_8601": "2023-02-22T16:01:36.431365Z",
        "url": "https://files.pythonhosted.org/packages/a9/da/4d31f67e649166efdc0f72d99707234e3475dd53d5c78aba7461d6c7c80e/jumanji-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec3d28cc347ca764bd31dc9b07a7443b5677ac511a3e9d1a98416fa4a95da5ed",
          "md5": "dc6d8d355b0c9325fc62b499626b82df",
          "sha256": "42f4e5691bde3fb8cf1a1fc340584b9cbd4aec155901aaf4d6e79a70c98bddc7"
        },
        "downloads": -1,
        "filename": "jumanji-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc6d8d355b0c9325fc62b499626b82df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 155774,
        "upload_time": "2023-03-21T17:11:56",
        "upload_time_iso_8601": "2023-03-21T17:11:56.392964Z",
        "url": "https://files.pythonhosted.org/packages/ec/3d/28cc347ca764bd31dc9b07a7443b5677ac511a3e9d1a98416fa4a95da5ed/jumanji-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec3d28cc347ca764bd31dc9b07a7443b5677ac511a3e9d1a98416fa4a95da5ed",
        "md5": "dc6d8d355b0c9325fc62b499626b82df",
        "sha256": "42f4e5691bde3fb8cf1a1fc340584b9cbd4aec155901aaf4d6e79a70c98bddc7"
      },
      "downloads": -1,
      "filename": "jumanji-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dc6d8d355b0c9325fc62b499626b82df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 155774,
      "upload_time": "2023-03-21T17:11:56",
      "upload_time_iso_8601": "2023-03-21T17:11:56.392964Z",
      "url": "https://files.pythonhosted.org/packages/ec/3d/28cc347ca764bd31dc9b07a7443b5677ac511a3e9d1a98416fa4a95da5ed/jumanji-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}