{
  "info": {
    "author": "Flatiron Health Data Tooling",
    "author_email": "data-tooling@flatiron.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# ast-refactor\n\nApply structured migrations to existing python source code easily.\n\nThis is intended to be used to migrate from older code patterns\nto modern supported ones.  \n\nFor library authors this can assist in providing migration tools so that \nusers can migrate to newer versions of your library more easily.  \n\nast-refactor *will* modify your source code if you run it, so be sure to \nrun it on a repository that doesn't have code that is not checked in.\n\n## Why?\n\nWhen dealing with large codebases it is common to encounter code that is using libraries in ways that are deprecated \n(or removed) in newer versions of those libraries.\n\nFor example you have the following code that uses an older version of pandas (<0.17)\n\n```python\ndf = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n                          \"bar\", \"bar\", \"bar\", \"bar\"],\n                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n                          \"one\", \"one\", \"two\", \"two\"],\n                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n                          \"small\", \"large\", \"small\", \"small\",\n                          \"large\"],\n                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n\ntable = (pd\n    .pivot_table(\n        df, \n        rows=['A', 'B'], \n        cols=['C'], \n        values='D',\n        aggfunc=np.sum)\n    .sort(\"large\")\n)       \n```\n\nThe second statement uses two pandas functions with deprecated keyword arguments.  You can obviously fix this by hand, but if you have lots of code this is tedious and error prone.\n\n`ast-refactor` provides you the tools to automatically convert that second statement into something that will work for modern versions of pandas.\n\n```python\ntable = (pd\n    .pivot_table(\n        df, \n        index=['A', 'B'], \n        columns=['C'], \n        values='D',\n        aggfunc=np.sum)\n    .sort_values(\"large\")\n)   \n```\n\nThis is intended as a tool to help library author and owners of large codebases migrate source code easily.\n\n## Usage\n\nFor detailed usage documentation see [usage docs](https://github.com/flatironhealth/ast-refactor/blob/master/doc/using.md) and \n[writing a migrator](https://github.com/flatironhealth/ast-refactor/blob/master/doc/writing_a_migrator.md) and \n\n### as a python cli\n\nThe easiest way to install this tool is using\n[pipx](https://pipxproject.github.io/pipx/).\n\n```bash\n$ pipx install \\\n    ast-refactor\n\n$ ast-refactor run some/path/or/file\n```\n\n### as a docker container\n\nAlternatively you can run it from a docker container\n\n```bash\n$ docker run \\\n    -e UID=$(id -u) \\\n    -e GID=$(id -u) \\\n    -v /some/path/or/file:/work \\\n    flatironhealth/ast-refactor \\\n    run \\\n    /work\n```\n\n## Building\n\n### locally\n\n```bash\n$ pip install .\n$ ast-refactor some/path/or/file\n```\n\n### docker\n\n```bash\ndocker build -t ast-refactor .\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flatironhealth/ast-refactor",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ast-refactor",
    "package_url": "https://pypi.org/project/ast-refactor/",
    "platform": "",
    "project_url": "https://pypi.org/project/ast-refactor/",
    "project_urls": {
      "Homepage": "https://github.com/flatironhealth/ast-refactor"
    },
    "release_url": "https://pypi.org/project/ast-refactor/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Transform code using the power of the Python AST",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6335224,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0203a5b219d1b248d409da3cb914a3d71c7a75196f0aabc82f36fac50ee0b411",
          "md5": "90b81e41932b466d4c15f3f0767376d3",
          "sha256": "729722b83e9af55a7b0b99f8f01abd4357b5ec5842cbe615d74ce32326cfa301"
        },
        "downloads": -1,
        "filename": "ast-refactor-0.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "90b81e41932b466d4c15f3f0767376d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7512,
        "upload_time": "2019-12-19T21:02:33",
        "upload_time_iso_8601": "2019-12-19T21:02:33.331433Z",
        "url": "https://files.pythonhosted.org/packages/02/03/a5b219d1b248d409da3cb914a3d71c7a75196f0aabc82f36fac50ee0b411/ast-refactor-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0203a5b219d1b248d409da3cb914a3d71c7a75196f0aabc82f36fac50ee0b411",
        "md5": "90b81e41932b466d4c15f3f0767376d3",
        "sha256": "729722b83e9af55a7b0b99f8f01abd4357b5ec5842cbe615d74ce32326cfa301"
      },
      "downloads": -1,
      "filename": "ast-refactor-0.1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "90b81e41932b466d4c15f3f0767376d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7512,
      "upload_time": "2019-12-19T21:02:33",
      "upload_time_iso_8601": "2019-12-19T21:02:33.331433Z",
      "url": "https://files.pythonhosted.org/packages/02/03/a5b219d1b248d409da3cb914a3d71c7a75196f0aabc82f36fac50ee0b411/ast-refactor-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}