{
  "info": {
    "author": "Mike M",
    "author_email": "stopthisworldplease@outlook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Unofficial asynchronous python client for Huobi\n\n[![CI](https://github.com/sometastycake/asynchuobi/actions/workflows/ci.yml/badge.svg)](https://github.com/sometastycake/asynchuobi/actions/workflows/ci.yml)\n[![Python: versions](\nhttps://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-blue)]()\n\n## Official documentation\n[Documentation](https://huobiapi.github.io/docs/spot/v1/en/#change-log)\n\n## Install\n\n```bash\npip install asynchuobi\n```\n\n## Generic API\n\n```python\nfrom asynchuobi.api.clients.generic import GenericHuobiClient\n\n\nasync def main():\n    async with GenericHuobiClient() as client:\n        current_timestamp = await client.get_current_timestamp()\n        trading_symbols = await client.get_all_supported_trading_symbols()\n        system_status = await client.get_system_status()\n```\n\n## Market API\n\n```python\nfrom asynchuobi.api.clients.market import MarketHuobiClient\nfrom asynchuobi.enums import CandleInterval\n\n\nasync def main():\n    async with MarketHuobiClient() as client:\n        candles = await client.get_candles('btcusdt', CandleInterval.min_1)\n        orderbook = await client.get_market_depth('btcusdt')\n        recent_trades = await client.get_most_recent_trades('btcusdt')\n```\n\n## Subuser API\n\n```python\nfrom asynchuobi.api.clients.subuser import SubUserHuobiClient\nfrom asynchuobi.enums import ApiKeyPermission\n\n\nasync def main():\n    async with SubUserHuobiClient(\n        access_key='access_key',\n        secret_key='secret_key',\n    ) as client:\n        subusers = await client.get_sub_users_list()\n        for subuser in subusers['data']:\n            keys = await client.api_key_query(subuser['uid'])\n            status = await client.get_sub_user_status(subuser['uid'])\n            balance = await client.get_account_balance_of_sub_user(subuser['uid'])\n            api_key = await client.sub_user_api_key_creation(\n                sub_uid=subuser['uid'],\n                note='Test api',\n                permissions=[ApiKeyPermission.readOnly, ApiKeyPermission.trade],\n            )\n```\n\n## Wallet API\n\n```python\nfrom asynchuobi.api.clients.wallet import WalletHuobiClient\n\n\nasync def main():\n    async with WalletHuobiClient(\n        access_key='access_key',\n        secret_key='secret_key',\n    ) as client:\n        deposit_address = await client.query_deposit_address('usdt')\n        withdraw_address = await client.query_withdraw_address('usdt')\n        withdraw_response = await client.create_withdraw_request(\n            address='address',\n            currency='usdt',\n            amount=10\n        )\n```\n\n## Account API\n\n```python\nfrom asynchuobi.api.clients.account import AccountHuobiClient\nfrom asynchuobi.enums import AccountTypeCode, Sort\n\n\nasync def main():\n    async with AccountHuobiClient(\n        access_key='access_key',\n        secret_key='secret_key',\n    ) as client:\n        accounts = await client.accounts()\n        for account in accounts['data']:\n            balances = await client.account_balance(account_id=account['id'])\n            history = await client.get_account_history(\n                account_id=account['id'],\n                currency='usdt',\n                transact_types=['deposit', 'withdraw'],\n                sorting=Sort.desc,\n            )\n\n        for account_type in (AccountTypeCode.spot, AccountTypeCode.flat):\n            total_valuation = await client.get_total_valuation_of_platform_assets(\n                account_type_code=account_type,\n                valuation_currency='BTC',\n            )\n```\n\n## Orders API\n\n```python\nfrom asynchuobi.api.clients.order import OrderHuobiClient\nfrom asynchuobi.enums import OrderType\n\nasync def main():\n    async with OrderHuobiClient(\n            access_key='access_key',\n            secret_key='secret_key'\n    ) as client:\n        response = await client.new_order(\n            account_id=account_id,\n            symbol='dogeusdt',\n            order_type=OrderType.buy_limit,\n            amount=20,\n            price=0.0660,\n        )\n        if response['status'] == 'ok':\n            order_id = response['data']\n            cancelling = await client.cancel_order(\n                order_id=order_id,\n            )\n    \n        active_orders = await client.get_all_open_orders()\n        order_detail = await client.get_order_detail_by_client_order_id(\n            client_order_id=client_order_id,\n        )\n```\n\n## Margin API\n\n```python\nfrom asynchuobi.api.clients.margin import MarginHuobiClient\n\n\nasync def main():\n    async with MarginHuobiClient(\n        access_key='access_key',\n        secret_key='secret_key',\n    ) as client:\n        cross_margin_balance = await client.get_balance_of_cross_margin_account()\n        isolated_margin_balance = await client.get_balance_of_isolated_margin_account(\n            symbol='btcusdt',\n        )\n```\n\n\n## WebSocket\n\nClient supports retrieving information about market data, such as candles, orderbook, trade details.\n\n### Usage\n\n```python\nfrom asynchuobi.enums import CandleInterval\nfrom asynchuobi.ws.ws_client import WSHuobiMarket\n\n\nasync def main():\n    async with WSHuobiMarket() as ws:\n        await ws.candlestick('btcusdt', CandleInterval.min_1).sub()\n        await ws.market_stats('btcusdt').sub()\n        await ws.market_ticker_info('btcusdt').sub()\n        await ws.orderbook('btcusdt').sub()\n        async for message in ws:\n            ...\n```\n\nYou can define callbacks which will called when message was received from websocket\n\n```python\nfrom typing import Dict\n\nfrom asynchuobi.exceptions import WSHuobiError\nfrom asynchuobi.ws.ws_client import WSHuobiMarket\n\n\ndef callback(msg: Dict):\n    print(msg)\n\n\ndef error(e: WSHuobiError):\n    print(e)\n\n\nasync def orderbook():\n    async with WSHuobiMarket() as ws:\n        await ws.orderbook('btcusdt').sub(callback=callback)\n        await ws.run_with_callbacks(error_callback=error)\n```\n\nYou can also define async callback\n\n### Retrieving information about account balance changing and about orders\n\nAuthentication is required\n\n```python\nfrom asynchuobi.ws.ws_client import WSHuobiAccount\n\n\nasync def main():\n    async with WSHuobiAccount('access_key', 'secret_key') as ws:\n        await ws.subscribe_account_change()\n        await ws.subscribe_order_updates('btcusdt')\n        async for message in ws:\n            ...\n```\n\nWith callbacks\n\n```python\nfrom asynchuobi.ws.ws_client import WSHuobiAccount\nfrom asynchuobi.exceptions import WSHuobiError\n\n\ndef callback(message: dict):\n    print(message)\n\n\ndef error(e: WSHuobiError):\n    print(e)\n\n\nasync def main():\n    async with WSHuobiAccount('access_key', 'secret_key') as ws:\n        await ws.subscribe_account_change(\n            callback=callback,\n        )\n        await ws.run_with_callbacks(error_callback=error)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sometastycake/asynchuobi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asynchuobi",
    "package_url": "https://pypi.org/project/asynchuobi/",
    "platform": null,
    "project_url": "https://pypi.org/project/asynchuobi/",
    "project_urls": {
      "Homepage": "https://github.com/sometastycake/asynchuobi"
    },
    "release_url": "https://pypi.org/project/asynchuobi/0.0.1/",
    "requires_dist": [
      "aiohttp (>=3.8.3)",
      "pydantic (>=1.10.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Unofficial asynchronous python client for Huobi cryptoexchange",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16325479,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31db5d49c03b4bfb66f505bc076658c6a23d3455112776de9e407a13a4253947",
          "md5": "451001c4901e150929b6b43ae605e771",
          "sha256": "80083f01b459a1282cff498206d9f6cbdbe41d85ea34dc749803da9e5592b8b4"
        },
        "downloads": -1,
        "filename": "asynchuobi-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "451001c4901e150929b6b43ae605e771",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27307,
        "upload_time": "2023-01-06T01:48:24",
        "upload_time_iso_8601": "2023-01-06T01:48:24.704368Z",
        "url": "https://files.pythonhosted.org/packages/31/db/5d49c03b4bfb66f505bc076658c6a23d3455112776de9e407a13a4253947/asynchuobi-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50450cc853aec9e1d8ae32d3bf94dc0ace11bb01d8908be498c33186e62e4cf5",
          "md5": "8ed09c64b8fc2958e9bcfa120ce4b534",
          "sha256": "196aff4058ac83e27ac5afa03f0191df737950416b3606b99c9ffa26800cde4a"
        },
        "downloads": -1,
        "filename": "asynchuobi-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ed09c64b8fc2958e9bcfa120ce4b534",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20075,
        "upload_time": "2023-01-06T01:48:26",
        "upload_time_iso_8601": "2023-01-06T01:48:26.780726Z",
        "url": "https://files.pythonhosted.org/packages/50/45/0cc853aec9e1d8ae32d3bf94dc0ace11bb01d8908be498c33186e62e4cf5/asynchuobi-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31db5d49c03b4bfb66f505bc076658c6a23d3455112776de9e407a13a4253947",
        "md5": "451001c4901e150929b6b43ae605e771",
        "sha256": "80083f01b459a1282cff498206d9f6cbdbe41d85ea34dc749803da9e5592b8b4"
      },
      "downloads": -1,
      "filename": "asynchuobi-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "451001c4901e150929b6b43ae605e771",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 27307,
      "upload_time": "2023-01-06T01:48:24",
      "upload_time_iso_8601": "2023-01-06T01:48:24.704368Z",
      "url": "https://files.pythonhosted.org/packages/31/db/5d49c03b4bfb66f505bc076658c6a23d3455112776de9e407a13a4253947/asynchuobi-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50450cc853aec9e1d8ae32d3bf94dc0ace11bb01d8908be498c33186e62e4cf5",
        "md5": "8ed09c64b8fc2958e9bcfa120ce4b534",
        "sha256": "196aff4058ac83e27ac5afa03f0191df737950416b3606b99c9ffa26800cde4a"
      },
      "downloads": -1,
      "filename": "asynchuobi-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8ed09c64b8fc2958e9bcfa120ce4b534",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20075,
      "upload_time": "2023-01-06T01:48:26",
      "upload_time_iso_8601": "2023-01-06T01:48:26.780726Z",
      "url": "https://files.pythonhosted.org/packages/50/45/0cc853aec9e1d8ae32d3bf94dc0ace11bb01d8908be498c33186e62e4cf5/asynchuobi-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}