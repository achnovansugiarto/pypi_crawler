{
  "info": {
    "author": "Eitan Hemed",
    "author_email": "Eitan.Hemed@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ROBUSTA \r\n\r\n### Author: [Eitan Hemed](mailto:Eitan.Hemed@gmail.com)\r\n\r\nrobusta is a statistics package in Python3 providing an interface to \r\nmany common statistical analyses, performed using through [R](https://www.r-project.org/)\r\nand [RPY2](https://github.com/rpy2/rpy2).  \r\n\r\n\r\n**PLEASE NOTE** robusta is under active development and is supplied as-is with no guarantees.\r\n\r\n\r\n## Installation\r\n\r\nInstall with pip using `pip install robusta-stats`, see also [Installation](https://eitanhemed.github.io/robusta/_build/html/Installation.html).\r\n\r\n## Documentation\r\n\r\nSee [here](https://eitanhemed.github.io/robusta/_build/html/index.html).\r\n\r\n## Usage\r\n\r\n#### For the most recent, thorough tutorial in the different features of robusta, head on to [Google Colab](https://colab.research.google.com/drive/1jmwYpEGcpFr4CF6ZA5HMiQ2LcHbZqzO_?usp=sharing). \r\n\r\nSome of the features are shown below.\r\n\r\n### Importing the library and loading data\r\nThis could take ~15 seconds as many R libraries are imported under the hood. If you begin with an empty R environment the first you import robusta should take at least a couple of minutes, as R dependencies will be installed.\r\n\r\n\r\n```python\r\nimport robusta as rst\r\n```\r\n\r\nFirst, define a helper function used to pretty-print output of dataframes when converting the notebook to .md ([credit](https://gist.github.com/rgerkin/af5b27a0e30531c30f2bf628aa41a553)).\r\n\r\n\r\n```python\r\nfrom tabulate import tabulate\r\nimport IPython.display as d\r\n\r\ndef md_print_df(df):\r\n    md = tabulate(df, headers='keys', tablefmt='pipe')\r\n    md = md.replace('|    |','| %s |' % (df.index.name if df.index.name else ''))\r\n    return d.Markdown(md)\r\n```\r\n\r\nFirst off, we need data. Using robusta we can import R built-in and some imported datasets. You can get a full list of the datasets, similarly to calling to `data()` with no input arguments in R.\r\n\r\n\r\n```python\r\nmd_print_df(rst.get_available_datasets().tail())\r\n```\r\n\r\n\r\n\r\n\r\n|     | Package   | Item                  | Description                                                                                  |\r\n|----:|:----------|:----------------------|:---------------------------------------------------------------------------------------------|\r\n| 284 | ARTool    | Higgins1990Table5     | Split-plot Experiment Examining Effect of Moisture and Fertilizer on Dry Matter in Peat Pots |\r\n| 285 | ARTool    | Higgins1990Table1.art | Aligned Rank Transformed Version of Higgins1990Table1                                        |\r\n| 286 | ARTool    | Higgins1990Table1     | Synthetic 3x3 Factorial Randomized Experiment                                                |\r\n| 287 | ARTool    | ElkinABC              | Synthetic 2x2x2 Within-Subjects Experiment                                                   |\r\n| 288 | ARTool    | ElkinAB               | Synthetic 2x2 Within-Subjects Experiment                                                     |\r\n\r\n\r\n\r\nWe can import a dataset using `rst.load_dataset`\r\n\r\n\r\n```python\r\niris = rst.load_dataset('iris')\r\nmd_print_df(iris.head())\r\n```\r\n\r\n\r\n\r\n\r\n|  |   dataset_rownames |   Sepal.Length |   Sepal.Width |   Petal.Length |   Petal.Width | Species   |\r\n|---:|-------------------:|---------------:|--------------:|---------------:|--------------:|:----------|\r\n|  0 |                  1 |            5.1 |           3.5 |            1.4 |           0.2 | setosa    |\r\n|  1 |                  2 |            4.9 |           3   |            1.4 |           0.2 | setosa    |\r\n|  2 |                  3 |            4.7 |           3.2 |            1.3 |           0.2 | setosa    |\r\n|  3 |                  4 |            4.6 |           3.1 |            1.5 |           0.2 | setosa    |\r\n|  4 |                  5 |            5   |           3.6 |            1.4 |           0.2 | setosa    |\r\n\r\n\r\n\r\n### Running statistical analyses\r\n\r\nAnalyses are performed through using designated model objects that also store the . The model objects are returned through calls to the function API. In this example we create a model (`m`) object by calling `t2samples`. `m` will be used to fit the statistical model, returning the `results` object.\r\n\r\nHere is a paired-samples t-test using the Students' sleep dataset previously loaded:\r\n\r\n\r\n```python\r\n# Create the model\r\nm = rst.groupwise.T2Samples(\r\n    data=rst.load_dataset('sleep'), independent='group', \r\n    dependent='extra', subject='ID', paired=True, tail='less')\r\n\r\n# Dataframe format of the results\r\nmd_print_df(m.report_table())\r\n\r\n```\r\n\r\n\r\n\r\n\r\n|  |        t |   df |    p-value |   Cohen-d Low |   Cohen-d |   Cohen-d High |\r\n|---:|---------:|-----:|-----------:|--------------:|----------:|---------------:|\r\n|  1 | -4.06213 |    9 | 0.00141645 |      -2.11801 |  -1.28456 |      -0.414622 |\r\n\r\n\r\n\r\n\r\n```python\r\n# Textual report of the results - copy and paste into your results section!\r\nm.report_text()\r\n```\r\n\r\n\r\n\r\n\r\n    't(9) = -4.06, p = 0.001'\r\n\r\n\r\n\r\nWe can reset the models in order to update the model parameters and re-fit it. In this example, we run the same model an an independent samples t-test:\r\n\r\n\r\n```python\r\nm.reset(paired=False, assume_equal_variance=True, refit=True)\r\nmd_print_df(m.report_table())\r\n```\r\n\r\n\r\n\r\n\r\n|  |        t |   df |   p-value |   Cohen-d Low |   Cohen-d |   Cohen-d High |\r\n|---:|---------:|-----:|----------:|--------------:|----------:|---------------:|\r\n|  1 | -1.86081 |   18 | 0.0395934 |      -1.73882 | -0.832181 |      0.0954595 |\r\n\r\n\r\n\r\n#### Bayesian t-tests\r\n`bayes_t2samples` and `bayes_t1sample` allow you to calculate Bayes factors or sample from the posterior distribution:\r\n\r\n\r\n```python\r\nm = rst.groupwise.BayesT2Samples(\r\n        data=rst.load_dataset('mtcars'), subject='dataset_rownames',\r\n        dependent='mpg', independent='am', prior_scale=0.5,\r\n        paired=False)\r\n\r\nmd_print_df(m.report_table())\r\n```\r\n\r\n\r\n\r\n\r\n|  | model       |      bf |       error |\r\n|---:|:------------|--------:|------------:|\r\n|  0 | Alt., r=0.5 | 71.3861 | 7.97835e-07 |\r\n\r\n\r\n\r\n\r\n```python\r\n# Test different null intervals and prior values:\r\nm.reset(prior_scale=0.1, null_interval=[0, 0.5], refit=True)\r\nprint(f'{m.report_text()}\\n\\n')\r\nmd_print_df(m.report_table())\r\n\r\n```\r\n\r\n    Alt., r=0.1 [BF1:0 = 18.64, Error = 0.001%]\r\n\r\n|  | model       |      bf |       error |\r\n|---:|:------------|--------:|------------:|\r\n|  0 | Alt., r=0.1 | 18.6411 | 2.33663e-05 |\r\n\r\n\r\n\r\n#### Analysis of variance\r\nuse `Anova` to run between, within or mixed-design ANOVA, we load the anxiety dataset for the next demonstrations. \r\n\r\nFor non-parametric ANOVAs see `KruskalWallisTest`, `FriedmanTest` and `AlignedRanksTest`\r\n\r\n\r\n\r\n```python\r\n# Load the dataset and modify it from a 'wide' to 'long' format dataframe\r\nanxiety = rst.load_dataset('anxiety').set_index(['id', 'group']\r\n                                           ).filter(regex='^t[1-3]$').stack().reset_index().rename(\r\n    columns={0: 'score',\r\n             'level_2': 'time'})\r\nmd_print_df(anxiety.head())\r\n\r\n```\r\n\r\n\r\n\r\n\r\n|  |   id | group   | time   |   score |\r\n|---:|-----:|:--------|:-------|--------:|\r\n|  0 |    1 | grp1    | t1     |    14.1 |\r\n|  1 |    1 | grp1    | t2     |    14.4 |\r\n|  2 |    1 | grp1    | t3     |    14.1 |\r\n|  3 |    2 | grp1    | t1     |    14.5 |\r\n|  4 |    2 | grp1    | t2     |    14.6 |\r\n\r\n\r\n\r\n\r\n```python\r\nm = rst.groupwise.Anova(\r\n        data=anxiety, subject='id',\r\n        dependent='score', between='group', within='time')\r\nmd_print_df(m.report_table())\r\n```\r\n\r\n    R[write to console]: Contrasts set to contr.sum for the following variables: group\r\n\r\n|  | Term       |   p-value |   Partial Eta-Squared |      F |   df1 |   df2 |\r\n|---:|:-----------|----------:|----------------------:|-------:|------:|------:|\r\n|  1 | group      |     0.019 |                 0.172 |   4.35 |  2    | 42    |\r\n|  2 | time       |     0.001 |                 0.904 | 394.91 |  1.79 | 75.24 |\r\n|  3 | group:time |     0.001 |                 0.84  | 110.19 |  3.58 | 75.24 |\r\n\r\n\r\n\r\nSimilarly, we run the model usign only the between subject term (`group`). As the model was already generated we can simpyl drop the within-subject term:\r\n\r\n\r\n```python\r\nm.reset(within=None, refit=True)\r\nmd_print_df(m.report_table())\r\n```\r\n\r\n    R[write to console]: Contrasts set to contr.sum for the following variables: group\r\n\r\n|  | Term   |   p-value |   Partial Eta-Squared |    F |   df1 |   df2 |\r\n|---:|:-------|----------:|----------------------:|-----:|------:|------:|\r\n|  1 | group  |     0.019 |                 0.172 | 4.35 |     2 |    42 |\r\n\r\n\r\n\r\nR and many other statistical packages (e.g., [statsmodels](https://www.statsmodels.org/stable/index.html) support a formula interface to fit statistical models. Here it is shown that a model can also be specified by the formula kwargs rather than specifying `dependent`, `between` etc. The formula indicates that the score column is regressed by the time variable, with observations nested within the id column.\r\n\r\n```python\r\nm.reset(formula='score~time|id', refit=True)\r\nmd_print_df(m.report_table())\r\n```\r\n\r\n|  | Term   |   p-value |   Partial Eta-Squared |     F |   df1 |   df2 |\r\n|---:|:-------|----------:|----------------------:|------:|------:|------:|\r\n|  1 | time   |     0.001 |                 0.601 | 66.23 |  1.15 | 50.55 |\r\n\r\nWe can also run a similar, bayesian ANOVA using `BayesAnova` comparing the\r\nspecified terms to the null model:\r\n\r\n```python\r\nm = rst.groupwise.BayesAnova(data=anxiety, within='time',\r\n                             dependent='score', subject='id')\r\nmd_print_df(m.report_table())\r\n```\r\n\r\n\r\n\r\n\r\n|  | model   |      bf |       error |\r\n|---:|:--------|--------:|------------:|\r\n|  0 | time    | 496.129 | 7.82496e-05 |\r\n\r\n\r\n\r\n## Work in progress and planned features\r\n\r\nrobusta includes several other features that are either under development or planned for the future.\r\n\r\n\r\n<ins>Currently under work<ins>\r\n- Regressions and correlations modules\r\n  \r\n<ins>Planned<ins>\r\n- Sequential analysis plots (inspired by [JASP](https://jasp-stats.org/))\r\n\r\n## How to contribute\r\n\r\nAll help is welcome, but currently there are no specific guidelines. Please contact [Eitan Hemed](mailto:Eitan.Hemed@gmail.com)\r\n\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/EitanHemed/robusta",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EitanHemed/robusta",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "robusta-stats",
    "package_url": "https://pypi.org/project/robusta-stats/",
    "platform": null,
    "project_url": "https://pypi.org/project/robusta-stats/",
    "project_urls": {
      "Download": "https://github.com/EitanHemed/robusta",
      "Homepage": "https://github.com/EitanHemed/robusta"
    },
    "release_url": "https://pypi.org/project/robusta-stats/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7.10, <=3.9.12",
    "summary": "Statistical analysis package in Python",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13675355,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5258312301058c9f22ac52ebc2f9a657cffea2db81c593836741c383f0c03db",
          "md5": "305a4737c8ae7a7fcf0e399d2ec8441b",
          "sha256": "df2f647bbc7d9b80d331408004707d5bd3e92803c94ca73174b07218435e6352"
        },
        "downloads": -1,
        "filename": "robusta_stats-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "305a4737c8ae7a7fcf0e399d2ec8441b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10",
        "size": 18022,
        "upload_time": "2021-09-10T08:35:27",
        "upload_time_iso_8601": "2021-09-10T08:35:27.675277Z",
        "url": "https://files.pythonhosted.org/packages/a5/25/8312301058c9f22ac52ebc2f9a657cffea2db81c593836741c383f0c03db/robusta_stats-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9be90176859bd1c8e3e1b23718ea6035509605d7701841f3600eed239c6e231e",
          "md5": "81c75957af5545a706a3e79cd10c74ab",
          "sha256": "5ab07d9aff4aeacfea13eeaca07c0fae2148bc53be07100b4530e1779b31da35"
        },
        "downloads": -1,
        "filename": "robusta_stats-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81c75957af5545a706a3e79cd10c74ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10",
        "size": 46688,
        "upload_time": "2021-09-10T20:11:27",
        "upload_time_iso_8601": "2021-09-10T20:11:27.188597Z",
        "url": "https://files.pythonhosted.org/packages/9b/e9/0176859bd1c8e3e1b23718ea6035509605d7701841f3600eed239c6e231e/robusta_stats-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df9f8e4cedd404b7d4e6d100bd39b9effd7f1e1a928c640549bdc3f183a780ad",
          "md5": "f9aa56390323f9bfec6ff155f1cfce2b",
          "sha256": "c5361551498241bcae691347fab177cafe0499f9ab56a5745022d97f4b515f7b"
        },
        "downloads": -1,
        "filename": "robusta_stats-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9aa56390323f9bfec6ff155f1cfce2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.10",
        "size": 62681,
        "upload_time": "2021-09-12T09:20:43",
        "upload_time_iso_8601": "2021-09-12T09:20:43.384232Z",
        "url": "https://files.pythonhosted.org/packages/df/9f/8e4cedd404b7d4e6d100bd39b9effd7f1e1a928c640549bdc3f183a780ad/robusta_stats-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5862d327e8be8d7517e289a4fb2ca9911722c7ca1c74ebba148ce5c84d23a9b3",
          "md5": "81632ca2c8d153101a69e41f5c5adbed",
          "sha256": "7f80c0cded155d5a9d1add29055e19bcd77901ba1a76cf5455690520345ae8e5"
        },
        "downloads": -1,
        "filename": "robusta_stats-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "81632ca2c8d153101a69e41f5c5adbed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10",
        "size": 57882,
        "upload_time": "2021-09-12T09:20:45",
        "upload_time_iso_8601": "2021-09-12T09:20:45.167539Z",
        "url": "https://files.pythonhosted.org/packages/58/62/d327e8be8d7517e289a4fb2ca9911722c7ca1c74ebba148ce5c84d23a9b3/robusta_stats-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd5deea5d008ea5e8a781ea12ca77c156c8c6948ac7f99f3fdc63ea7b30d95d5",
          "md5": "4baf19cff518f3628e1bcccd4406eee3",
          "sha256": "504389c04f80d823150e37834b4862ff22c6093c036796b1b82ca9f85b570989"
        },
        "downloads": -1,
        "filename": "robusta_stats-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4baf19cff518f3628e1bcccd4406eee3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.10, <=3.9.12",
        "size": 61300,
        "upload_time": "2022-04-30T16:11:18",
        "upload_time_iso_8601": "2022-04-30T16:11:18.142995Z",
        "url": "https://files.pythonhosted.org/packages/fd/5d/eea5d008ea5e8a781ea12ca77c156c8c6948ac7f99f3fdc63ea7b30d95d5/robusta_stats-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd5deea5d008ea5e8a781ea12ca77c156c8c6948ac7f99f3fdc63ea7b30d95d5",
        "md5": "4baf19cff518f3628e1bcccd4406eee3",
        "sha256": "504389c04f80d823150e37834b4862ff22c6093c036796b1b82ca9f85b570989"
      },
      "downloads": -1,
      "filename": "robusta_stats-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4baf19cff518f3628e1bcccd4406eee3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.10, <=3.9.12",
      "size": 61300,
      "upload_time": "2022-04-30T16:11:18",
      "upload_time_iso_8601": "2022-04-30T16:11:18.142995Z",
      "url": "https://files.pythonhosted.org/packages/fd/5d/eea5d008ea5e8a781ea12ca77c156c8c6948ac7f99f3fdc63ea7b30d95d5/robusta_stats-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}