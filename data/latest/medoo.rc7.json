{
  "info": {
    "author": "pwwang",
    "author_email": "pwwang@pwwang.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pymedoo - A lightweight database framework for python\n\nit's inspired by [Medoo][1] for PHP and [Records][7] for python.\n\n[![Pypi][8]][15]\n[![Github][9]][16]\n[![Codacy][10]][17]\n[![Codacy coverage][11]][17]\n![Building][12]\n\n## Install\n\n```bash\npip install medoo\n```\n\n## Required packages for databases\n\n| Database | Package   | Install |\n|----------|---------  | --------|\n| sqlite   | [sqlite3][2]   | `pip install medoo[sqlite]` |\n| mysql    | ~~[pymysql][3]~~(dropped) Use [mysql.connector][13] instead. See [#6][14] | `pip install medoo[mysql]` |\n| pgsql    | [psycopg2][4]  | `pip install medoo[pgsql]` |\n| mssql    | [pymssql][5]   | `pip install medoo[mssql]` |\n| oracle   | [cx_Oracle][6] | `pip install medoo[oracle]` |\n\nInstall forr all supported databases:\n\n```bash\npip install medoo[all]\n```\n\n## Get started\n\n### SELECT\n\n```python\nfrom medoo import Medoo\n\n# For other arguments, please refer to the original connect function of each client.\nme = Medoo(dbtype = 'sqlite', database = 'file:///path/to/test.sqlite')\n\n# SELECT * FROM \"Customers\"\nrs = me.select('Customers')\n\nprint(rs.export('csv', delimiter = '\\t'))\n```\n\n|CustomerID|CustomerName|ContactName|Address|City|PostalCode|Country|\n|-|-|-|-|-|-|-|\n|1|Alfreds Futterkiste|Maria Anders|Obere Str. 57|Berlin|12209|Germany|\n|2|Ana Trujillo Emparedados y helados|Ana Trujillo|Avda. de la Constitución 2222|México D.F.|5021|Mexico|\n|3|Antonio Moreno Taquería|Antonio Moreno|Mataderos 2312|México D.F.|5023|Mexico|\n|4|Around the Horn|Thomas Hardy|120 Hanover Sq.|London|WA1 1DP|UK|\n|5|Berglunds snabbköp|Christina Berglund|Berguvsvägen 8|Luleå|S-958 22|Sweden|\n\n```python\n# SELECT \"CustomerID\",\"CustomerName\" FROM \"Customers\"\nme.select('Customers', 'CustomerID, CustomerName')\nme.select('Customers', ['CustomerID', 'CustomerName'])\n\n# SELECT \"C\".\"CustomerID\" AS \"CustomerID\",\"C\".\"CustomerName\" AS \"name\" FROM \"Customers\" AS \"C\"\nme.select('Customers(C)', ['C.CustomerID(id)', 'C.CustomerName(name)'])\n\n# SELECT DISTINCT \"Country\" FROM \"Customers\"\nme.select('Customers', 'Country', distinct = True)\n\n# SELECT COUNT(\"CustomerID\") FROM \"Customers\"\nme.select('Customers', 'CustomerID|COUNT')\n\n# SELECT COUNT(DISTINCT \"CustomerID\") AS \"c\" FROM \"Customers\"\nme.select('Customers', 'CustomerID|.COUNT(c)')\n\n# SELECT \"CustomerID\"+1 FROM \"Customers\"\nfrom medoo import Field, Raw\nme.select('Customers', Field('CustomerID')+1)\n\n# SELECT 'Name: ' || CustomerName AS name FROM \"Customers\"\nrs = me.select('Customers', Raw(\"'Name: ' || CustomerName AS name\"))\nfor r in rs: print(r.name)\n```\n\n```\nName: Alfreds Futterkiste\nName: Ana Trujillo Emparedados y helados\nName: Antonio Moreno Taquería\nName: Around the Horn\nName: Berglunds snabbköp\n```\n\n### WHERE\n\n#### Single condition\n\n```python\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" = 1\nme.select('Customers', where = {'CustomerID': 1})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" < 3\nme.select('Customers', where = {'CustomerID[<]': 3})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (1,2,3)\nme.select('Customers', where = {'CustomerID': (1,2,3)})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerName\" LIKE '%b%' OR \"CustomerName\" LIKE '%c%'\nme.select('Customers', where = {'CustomerName[~]': ('a', 'b')})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" BETWEEN 1 AND 3\nme.select('Customers', where = {'CustomerID[<>]': (1,3)})\n\n# SELECT * FROM \"Customers\" WHERE NOT \"CustomerID\" BETWEEN 1 AND 3\nme.select('Customers', where = {'!CustomerID[<>]': (1,3)})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IS NULL\nme.select('Customers', where = {'CustomerID[is]': None}) # where = {'id[==]': None}\n\n# SELECT * FROM \"Customers\" WHERE INSTR(\"CustomerName\", 'Antonio')\nme.select('Customers', where = {Raw('INSTR(\"CustomerName\", \\'Antonio\\')'):None})\n```\n\n#### Compond\n\n```python\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (1,2,3) AND \"CustomerName\" LIKE '%b%'\nme.select('Customers', where = {\n    'CustomerID': (1,2,3),\n    'CustomerName[~]': 'b'\n})\n# SELECT * FROM \"Customers\"\n# WHERE (\"CustomerID\" IN (1,2,3) AND \"CustomerName\" LIKE '%b%') AND\n# (\"CustomerName\" = 'cd' OR \"CustomerID\" = 2) AND\n# (\"CustomerID\" < 3 AND NOT \"CustomerName\" = 'bc')\nme.select('Customers', where = {\n    'AND': {\n        'CustomerID': (1,2,3),\n        'CustomerName[~]': 'b'\n    },\n    'OR': {\n        'CustomerName': 'cd',\n        'CustomerID': 2\n    },\n    # you can use comment to distinguish multiple ANDs and ORs\n    'AND #2': {\n        'CustomerID[<]': 3,\n        '!CustomerName': 'bc'\n    }\n})\n```\n\n#### Modifier\n\n```python\n# SELECT * FROM \"Customers\" ORDER BY \"CustomerID\" DESC, \"CustomerName\" ASC LIMIT 2 OFFSET 1\n# MSSQL:\n# SELECT * FROM \"Customers\" ORDER BY \"CustomerID\" DESC, \"CustomerName\" ASC\n# OFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY\nme.select('Customers', where = {\n    'ORDER': {'CustomerID': 'desc', 'CustomerName': 'asc'},\n    'LIMIT': (2, 1)\n})\n\n# SELECT COUNT(\"CustomerID\") AS \"c\",\"CustomerName\" FROM \"Customers\" GROUP BY \"Country\" HAVING \"CustomerID\" > 1\nme.select('Customers', 'CustomerID|count(c), CustomerName', where = {\n    'GROUP': 'Country',\n    'HAVING': {'CustomerID[>]': 1}\n})\n```\n\n### Using subquery\n\n```python\nprint(me.select('Orders').export('csv', delimiter = '\\t'))\n```\n\n|OrderID|CustomerID|OrderDate|\n|-|-|-|\n|10308|2|1996-09-18|\n|10309|37|1996-09-19|\n|10310|77|1996-09-20|\n\n```python\n# SELECT * FROM \"Customers\" AS \"C\",(SELECT \"CustomerID\" FROM \"Orders\") AS \"O\"\n#   WHERE \"C\".\"CustomerID\" = \"O\".\"CustomerID\"\nme.select([\n    'Customers(C)', # the first table\n    me.builder.select('Orders', 'CustomerID', sub = 'O')\n], where = {\n    'C.CustomerID': Field('O.CustomerID')\n})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (SELECT \"CustomerID\" FROM \"Orders\")\nme.select('Customers', where = {\n    'CustomerID': me.builder.select('Orders', 'CustomerID')\n})\n```\n\n### JOIN\n\n```python\n# SELECT \"O\".\"OrderID\",\"C\".\"CustomerName\",\"O\".\"OrderDate\" FROM \"Orders\" AS \"O\"\n#   INNER JOIN \"Customers\" AS \"C\" ON \"C\".\"CustomerID\"=\"O\".\"CustomerID\"\nme.select('Orders(O)', 'O.OrderID,C.CustomerName,O.OrderDate', join = {\n    'Customers(C)': 'CustomerID'\n})\n\n# equivalent to\nme.select('Orders(O)', 'O.OrderID,C.CustomerName,O.OrderDate', join = {\n    '[><]Customers(C)': 'CustomerID'\n})\n# [>] LEFT JOIN, [<] RIGHT JOIN [<>] FULL OUTER JOIN\n\n# Join on multiple columns (same in different tables)\n# join = { '[><]Customers(C)': ['CustomerID', 'OtherColumn'] }\n\n# Join on different columns: JOIN \"Customers\" AS \"C\" ON \"C\".\"CustomerID\"=\"O\".\"OtherID\"\n# join = { '[><]Customers(C)': {'CustomerID', 'OtherID'} }\n\n# You can join multiple tables, use OrderedDict if you want to keep the order.\n```\n\n### UNION\n\n```python\n# SELECT \"CustomerID\" FROM \"Customers\" UNION SELECT \"CustomerID\" FROM \"Orders\"\nme.union(\n    me.builder.select('Customers', 'CustomerID'),\n    me.builder.select('Orders', 'CustomerID')\n)\n\n# SELECT \"CustomerID\" FROM \"Customers\" UNION ALL SELECT \"CustomerID\" FROM \"Orders\"\nme.union(\n    me.builder.select('Customers', 'CustomerID'),\n    me.builder.select('Orders', 'CustomerID', sub = True)\n)\n```\n\n### Records\n\n`Medoo.select` and `Medoo.union` return a collection of records, which is basically a generator, but you can still get items from it, as it will consume the generate if necessary. The idea is borrowed from [Records][7].\n\n```python\nrecords = me.select('Customers', 'CustomerID(id)')\nrecord  = records.first() # <Record {'id': 1}>\n\n# equivalent to\nrecord  = records[0]\n\n# you may also select other rows: records[1], records[2]\n# or return all rows:\nprint(records.all())\n\n# you can also export the records\n# this is the courtesy from tablib (https://github.com/kennethreitz/tablib)\n# check the kwargs with its documentation\nprint(records.export('csv', delimiter = '\\t'))\n\n# You can also apply tablib's other function on the data:\n# records.tldata.<function>(<args>)\n\n# to get the value of each field from a record:\nprint(record[0]) # 1\nprint(record['id']) # 1\nprint(record.id) # 1\nprint(record.as_dict()) # {'id': 1}\n```\n\n### INSERT\n\n```python\n# INSERT INTO \"Orders\" (\"OrderID\",\"CustomerID\",\"OrderDate\") VALUES (1,2,'1999-09-09'),(2,8,'2001-10-12')\nme.insert(\n    'Orders', # table\n    'OrderID, CustomerID, OrderDate', # fields\n    (1,2,'1999-09-09'), # values\n    (2,8,'2001-10-12')\n    # ...\n)\n# get the last insert row id\nprint(me.id()) # 5\n\n# INSERT INTO \"Orders\" (\"OrderID\",\"CustomerID\",\"OrderDate\") VALUES (1,2,'1999-09-09'),(2,8,'2001-10,12')\nme.insert(\n    'Orders', # table\n    {'OrderID': 1, 'CustomerID': 2, 'OrderDate': '1999-09-09'}, # fields with the first value\n    (2,8,'2001-10-12')\n    # ...\n)\nme.insert(\n    'Orders', # table\n    {'OrderID': 1, 'CustomerID': 2, 'OrderDate': '1999-09-09'}, # fields with the first value\n    {'OrderID': 2, 'CustomerID': 8, 'OrderDate': '2001-10-12'}  # specify the fields as well\n    # ...\n)\n# Or if your values have all the fields\n# INSERT INTO \"Orders\" VALUES (1,2,'1999-09-09'),(2,8,'2001-10-12')\nme.insert(\n    'Orders', # table\n    (1,2,'1999-09-09')\n    (2,8,'2001-10-12')\n    # ...\n)\n\n# You may hold the changes until all data inserted\nme.insert(..., commit = False)\nme.insert(..., commit = False)\nme.insert(..., commit = False)\nme.insert(..., commit = False)\nme.commit()\n# This applies with UPDATE and DELETE as well.\n```\n\n### UPDATE\n\n```python\n# UPDATE \"Orders\" SET \"CustomerID\"=10 WHERE \"OrderID\" = 2\nme.update(\n    'Orders', # table\n    data  = {'CustomerID': 10},\n    where = {'OrderID': 2}\n)\n# UPDATE \"Orders\" SET \"CustomerID\"=\"CustomerID\"+1 WHERE \"OrderID\" = 2\nme.update(\n    'Orders', # table\n    data  = {'CustomerID[+]': 1},\n    where = {'OrderID': 2}\n)\n```\n\n### DELETE\n\n```python\n# DELETE FROM \"Orders\" WHERE \"OrderID\" = 2\nme.delete('Orders', where = {'OrderID': 2})\n```\n\n### Other functions of `Medoo`\n\n```python\n# Fetch a single value\nme.get('Customers', 'CustomerID', where = {'CustomerName': 'Around the Horn'}) # == 1\n\n# Check if a record exists\nme.has('Customers', where = {'CustomerID': 10}) # == False\n\n# Return the last query\nme.last() # SELECT * FROM \"Customers\" WHERE \"CustomerID\" = 10\n\n# Show all the queries bound with `me`\n\n# You have to passing `logging = True` to `Medoo(..., logging = True)`\nme.log()\n\n# Return the errors\nme.error()\n\n# Submit an SQL query\nme.query(sql, commit = True)\n```\n\n### Extending `pymedoo`\n\n`pymedoo` is highly extendable, including the operators in `WHERE` conditions and `UPDATE SET` clause, `JOIN` operators, and some functions such as how to quote the table names, field names and values. All of these have been defined with `Dialect` class, what you need to do is just extend this class and specify it to the `Medoo` instance.\nFor example, let's define a case-insensitive `LIKE` operator using a shortcut `~~`:\n\n```python\nfrom medoo import Medoo, Dialect\n\nclass MyDialect(Dialect):\n    OPERATOR_MAP = {\n        '~~': 'ilike'\n    }\n\n    @classmethod\n    def ilike(klass, field, value):\n        # support single value\n        if not isinstance(value, list):\n            value = [value]\n\n        terms = [\n            \"UPPER({}) LIKE UPPER({})\".format(field, klass.value(v)) # quote the value\n            for v in value\n        ]\n        # use OR to connect\n        return ' OR '.join(terms)\n\n# tell medoo to use this dialect\nme = Medoo(...)\nme.dialect(MyDialect)\n\n# SELECT * FROM \"Customers\" WHERE UPPER(\"CustomerName\") LIKE UPPER('%an%')\nrecords = me.select('Customers', where = {\n    'CustomerName[~~]': '%an%'\n})\nprint(records.export('csv', delimiter = '\\t'))\n```\n\n|CustomerID|CustomerName|ContactName|Address|City|PostalCode|Country|\n|-|-|-|-|-|-|-|\n|2|Ana Trujillo Emparedados y helados|Ana Trujillo|Avda. de la Constitución 2222|México D.F.|5021|Mexico|\n|3|Antonio Moreno Taquería|Antonio Moreno|Mataderos 2312|México D.F.|5023|Mexico|\n\n[1]: https://medoo.in/\n[2]: https://docs.python.org/2/library/sqlite3.html\n[3]: https://github.com/PyMySQL/PyMySQL\n[4]: http://initd.org/psycopg/docs/\n[5]: http://www.pymssql.org/en/stable/\n[6]: https://oracle.github.io/python-cx_Oracle/\n[7]: https://github.com/kennethreitz/records\n[8]: https://img.shields.io/pypi/v/medoo.svg?style=flat-square\n[9]: https://img.shields.io/github/tag/pwwang/pymedoo.svg?style=flat-square\n[10]: https://img.shields.io/codacy/grade/c049a2bf5ca84484b885cfbfedc27eab.svg?style=flat-square\n[11]: https://img.shields.io/codacy/coverage/c049a2bf5ca84484b885cfbfedc27eab.svg?style=flat-square\n[12]: https://img.shields.io/github/workflow/status/pwwang/pymedoo/Build%20and%20Deploy?style=flat-square\n[13]: https://dev.mysql.com/doc/connector-python/en/\n[14]: https://github.com/pwwang/pymedoo/issues/6\n[15]: https://pypi.org/project/pymedoo/\n[16]: https://github.com/pwwang/pymedoo\n[17]: https://app.codacy.com/gh/pwwang/pymedoo\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pwwang/pymedoo",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medoo",
    "package_url": "https://pypi.org/project/medoo/",
    "platform": null,
    "project_url": "https://pypi.org/project/medoo/",
    "project_urls": {
      "Homepage": "https://github.com/pwwang/pymedoo",
      "Repository": "https://github.com/pwwang/pymedoo"
    },
    "release_url": "https://pypi.org/project/medoo/0.1.2/",
    "requires_dist": [
      "mysql-connector-python (>=8,<9); extra == \"all\" or extra == \"mysql\"",
      "psycopg2 (>=2,<3); extra == \"all\" or extra == \"postgresql\"",
      "pymssql (>=2,<3); extra == \"all\" or extra == \"mssql\"",
      "cx-Oracle (>=8,<9); extra == \"all\" or extra == \"oracle\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "A lightweight database framework for python",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15732840,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6207ddb83d12e374e8b7196a3839483a558a61dfec8be1d08cf861eea9ca9e92",
          "md5": "3bc74fc8fea94d33fb22383245bff3ec",
          "sha256": "c29a97230cb734a46542d00d825e0fdeab583ec61b3516d2a1c286fe756d69a3"
        },
        "downloads": -1,
        "filename": "medoo-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bc74fc8fea94d33fb22383245bff3ec",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14076,
        "upload_time": "2018-07-17T21:12:45",
        "upload_time_iso_8601": "2018-07-17T21:12:45.348033Z",
        "url": "https://files.pythonhosted.org/packages/62/07/ddb83d12e374e8b7196a3839483a558a61dfec8be1d08cf861eea9ca9e92/medoo-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3454a301e098172dc0f3aa2f3668c2b48ac1d6aa7cfe0d9c02fa6f3f4e96e0cd",
          "md5": "0afabdc43b309942539f30bd69e2b0b4",
          "sha256": "cb44327f2b225c09e7f901284945d27649ac35c5c1a3871c4e5470feb44ae47c"
        },
        "downloads": -1,
        "filename": "medoo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0afabdc43b309942539f30bd69e2b0b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14186,
        "upload_time": "2018-07-17T21:12:46",
        "upload_time_iso_8601": "2018-07-17T21:12:46.483809Z",
        "url": "https://files.pythonhosted.org/packages/34/54/a301e098172dc0f3aa2f3668c2b48ac1d6aa7cfe0d9c02fa6f3f4e96e0cd/medoo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d7e509501e6a5ab6af7d022a7326baed2ae3cb738e33cb09d3d085f953844a4",
          "md5": "91318658f701f09268595de7c3920943",
          "sha256": "74dbea6cd13fd85bcf07f5db74bfbe12ba6ef3eda7b7ab9f1de5fed03aac88d7"
        },
        "downloads": -1,
        "filename": "medoo-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91318658f701f09268595de7c3920943",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15634,
        "upload_time": "2019-05-17T04:31:09",
        "upload_time_iso_8601": "2019-05-17T04:31:09.771986Z",
        "url": "https://files.pythonhosted.org/packages/5d/7e/509501e6a5ab6af7d022a7326baed2ae3cb738e33cb09d3d085f953844a4/medoo-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27467b887e9d3365ff7514e081a724603b212fcbcbff907284ed79daea2beb57",
          "md5": "14f345cf3f586ec88d0194333ed11b1a",
          "sha256": "150fa3662b08e619d8e502dd8e535668cf16ebd36606daba39c3bef6ed57275c"
        },
        "downloads": -1,
        "filename": "medoo-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "14f345cf3f586ec88d0194333ed11b1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14839,
        "upload_time": "2019-05-17T04:31:11",
        "upload_time_iso_8601": "2019-05-17T04:31:11.261711Z",
        "url": "https://files.pythonhosted.org/packages/27/46/7b887e9d3365ff7514e081a724603b212fcbcbff907284ed79daea2beb57/medoo-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32a80adfd441bb773316b1cef6e28b55a1fcc79e63146552c8c648bc74965df5",
          "md5": "64dcaea2a34563e265c83f32dd5ace0b",
          "sha256": "eb6a72ede390107779700c610076d6c85baddff462a4ccd6595419e5225324be"
        },
        "downloads": -1,
        "filename": "medoo-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64dcaea2a34563e265c83f32dd5ace0b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15322,
        "upload_time": "2019-06-11T00:58:11",
        "upload_time_iso_8601": "2019-06-11T00:58:11.970871Z",
        "url": "https://files.pythonhosted.org/packages/32/a8/0adfd441bb773316b1cef6e28b55a1fcc79e63146552c8c648bc74965df5/medoo-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "710931839d9a71b8a6a51b41a7903c228a7175ebabf96bb9e5825aeb7a8cac02",
          "md5": "0731887e92ec8e37c2b115c768347353",
          "sha256": "b9f182ec0f0b905068ed0f19454127d4d0fc444f4c9bd9ecff6c4d37ff87f724"
        },
        "downloads": -1,
        "filename": "medoo-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0731887e92ec8e37c2b115c768347353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14884,
        "upload_time": "2019-06-11T00:58:13",
        "upload_time_iso_8601": "2019-06-11T00:58:13.543369Z",
        "url": "https://files.pythonhosted.org/packages/71/09/31839d9a71b8a6a51b41a7903c228a7175ebabf96bb9e5825aeb7a8cac02/medoo-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a50a1c5d0353f7cbfda98610a02416d1c71cf5013b0c6aee8c5a9113b8ed1f6",
          "md5": "786469ad4ca60654b466726eacadcb59",
          "sha256": "8b67fa1c4a869a753f0f99604d2ec5eee6fcf3c949abaf3bfb2f44a76d452650"
        },
        "downloads": -1,
        "filename": "medoo-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "786469ad4ca60654b466726eacadcb59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 21470,
        "upload_time": "2021-03-15T22:40:48",
        "upload_time_iso_8601": "2021-03-15T22:40:48.209040Z",
        "url": "https://files.pythonhosted.org/packages/7a/50/a1c5d0353f7cbfda98610a02416d1c71cf5013b0c6aee8c5a9113b8ed1f6/medoo-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da315a9f0a057c332509e47a1e41ede0ac4e867e02f38c0b9445f4ef176f1290",
          "md5": "b8cf720575a9787660e10b0ab8513e0b",
          "sha256": "c3a93e1e01ef18764dc8cbc792e667492205a5315e29d6ac694cac4b4814fc4e"
        },
        "downloads": -1,
        "filename": "medoo-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "b8cf720575a9787660e10b0ab8513e0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 22954,
        "upload_time": "2021-03-15T22:40:49",
        "upload_time_iso_8601": "2021-03-15T22:40:49.782939Z",
        "url": "https://files.pythonhosted.org/packages/da/31/5a9f0a057c332509e47a1e41ede0ac4e867e02f38c0b9445f4ef176f1290/medoo-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "982b05b11c1d319e3e124da307ff466f0ce4f19976645d0d79400cb6bcc33b0b",
          "md5": "b460a41c36c801eacc1ee38a71f5b42b",
          "sha256": "c594304845435237af93b51b23c191c31f5b05b2f1433d672cf1b9536f4f3d0a"
        },
        "downloads": -1,
        "filename": "medoo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b460a41c36c801eacc1ee38a71f5b42b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21632,
        "upload_time": "2022-05-13T04:59:00",
        "upload_time_iso_8601": "2022-05-13T04:59:00.191692Z",
        "url": "https://files.pythonhosted.org/packages/98/2b/05b11c1d319e3e124da307ff466f0ce4f19976645d0d79400cb6bcc33b0b/medoo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fd622184e1ad0dd2ab7a0562504a12c93b726015a51ca6c5940263e7ee55850",
          "md5": "b2d52d7161b62f4fb78d9549a6925933",
          "sha256": "bb36751b49c5d0c28d0acdec87f1754b38ee122927331871ca9bdbded84c66e0"
        },
        "downloads": -1,
        "filename": "medoo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b2d52d7161b62f4fb78d9549a6925933",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23338,
        "upload_time": "2022-05-13T04:59:02",
        "upload_time_iso_8601": "2022-05-13T04:59:02.303045Z",
        "url": "https://files.pythonhosted.org/packages/2f/d6/22184e1ad0dd2ab7a0562504a12c93b726015a51ca6c5940263e7ee55850/medoo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d587425a041ae98177202e57176d23fdca58a2aab9f2e871c414091843212c2",
          "md5": "f2abec351186769d382415d81b6d213f",
          "sha256": "0ec4fb3f410e18c8d176802f7c7175e339b01e6500ff4ce1b9408795611708d9"
        },
        "downloads": -1,
        "filename": "medoo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2abec351186769d382415d81b6d213f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21625,
        "upload_time": "2022-10-18T23:24:27",
        "upload_time_iso_8601": "2022-10-18T23:24:27.508893Z",
        "url": "https://files.pythonhosted.org/packages/5d/58/7425a041ae98177202e57176d23fdca58a2aab9f2e871c414091843212c2/medoo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8acfc4eec99689aeee674a0c590a8a6efe60cbd196a6f9482beb35a32c795ac5",
          "md5": "a8d49b5b4f7b235ea442e580e6a75065",
          "sha256": "5ad17965c44f9de9bc12e7a2867362c6ea2dfe38e738c2b4d0f234424af22d95"
        },
        "downloads": -1,
        "filename": "medoo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a8d49b5b4f7b235ea442e580e6a75065",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23240,
        "upload_time": "2022-10-18T23:24:30",
        "upload_time_iso_8601": "2022-10-18T23:24:30.160419Z",
        "url": "https://files.pythonhosted.org/packages/8a/cf/c4eec99689aeee674a0c590a8a6efe60cbd196a6f9482beb35a32c795ac5/medoo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d844b9cda5e4d6fe4d11d8e79dabe746f9e1a88d3402281626aa14d2e3b9c6",
          "md5": "6991decab98926ad4bb4c2d18cc38e6d",
          "sha256": "b1b9950e42f7180459ab5fb7d992cd32075f531b082e591c9b1937c68f93f383"
        },
        "downloads": -1,
        "filename": "medoo-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6991decab98926ad4bb4c2d18cc38e6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21724,
        "upload_time": "2022-11-11T06:50:15",
        "upload_time_iso_8601": "2022-11-11T06:50:15.799986Z",
        "url": "https://files.pythonhosted.org/packages/b4/d8/44b9cda5e4d6fe4d11d8e79dabe746f9e1a88d3402281626aa14d2e3b9c6/medoo-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7e27bc6980c933a43c3863f59120a28446a4ec650e34133ae403ae488cf5363",
          "md5": "d825d46c7cb025dc78a7d4ec51f20a77",
          "sha256": "c30dc72d33504ad29fa0f1f64dca5fb11846d87a7fb31e2bb97adb96c19414e3"
        },
        "downloads": -1,
        "filename": "medoo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d825d46c7cb025dc78a7d4ec51f20a77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23328,
        "upload_time": "2022-11-11T06:50:18",
        "upload_time_iso_8601": "2022-11-11T06:50:18.492726Z",
        "url": "https://files.pythonhosted.org/packages/c7/e2/7bc6980c933a43c3863f59120a28446a4ec650e34133ae403ae488cf5363/medoo-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4d844b9cda5e4d6fe4d11d8e79dabe746f9e1a88d3402281626aa14d2e3b9c6",
        "md5": "6991decab98926ad4bb4c2d18cc38e6d",
        "sha256": "b1b9950e42f7180459ab5fb7d992cd32075f531b082e591c9b1937c68f93f383"
      },
      "downloads": -1,
      "filename": "medoo-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6991decab98926ad4bb4c2d18cc38e6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 21724,
      "upload_time": "2022-11-11T06:50:15",
      "upload_time_iso_8601": "2022-11-11T06:50:15.799986Z",
      "url": "https://files.pythonhosted.org/packages/b4/d8/44b9cda5e4d6fe4d11d8e79dabe746f9e1a88d3402281626aa14d2e3b9c6/medoo-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7e27bc6980c933a43c3863f59120a28446a4ec650e34133ae403ae488cf5363",
        "md5": "d825d46c7cb025dc78a7d4ec51f20a77",
        "sha256": "c30dc72d33504ad29fa0f1f64dca5fb11846d87a7fb31e2bb97adb96c19414e3"
      },
      "downloads": -1,
      "filename": "medoo-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d825d46c7cb025dc78a7d4ec51f20a77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 23328,
      "upload_time": "2022-11-11T06:50:18",
      "upload_time_iso_8601": "2022-11-11T06:50:18.492726Z",
      "url": "https://files.pythonhosted.org/packages/c7/e2/7bc6980c933a43c3863f59120a28446a4ec650e34133ae403ae488cf5363/medoo-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}