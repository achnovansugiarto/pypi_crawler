{
  "info": {
    "author": "Jose Tiago Macara Coutinho",
    "author_email": "coutinhotiago@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Sardana Streams\n\n![Pypi python versions][pypi-python-versions]\n![Pypi version][pypi-version]\n![Pypi status][pypi-status]\n![License][license]\n\nSardana data streaming infrastucture. Comprises:\n\n* [x] [redis] based sardana scan recorder\n* Client recorders:\n  * [x] generic scan stream client (library)\n  * [ ] SPEC recorder daemon\n  * [ ] HDF5 recorder daemon\n  * [ ] Scan GUI\n\n## Installation\n\nFrom within your favorite python environment:\n\n```bash\n$ pip install sardana-streams\n```\n\n## Usage\n\nThe name [acme](https://en.wikipedia.org/wiki/Acme_Corporation) used in the\nfollowing examples represents a fictional corporation that features prominently\nin the Road Runner cartoons.\n\n### Configuration\n\nActivate sardana redis recorder:\n\n* Put the installation directory where the `sardana_streams/recorder`\n  resides in **RecorderPath** tango property of the MacroServer.\n  (ex: `/usr/local/lib/python3.5/dist-packages/sardana_streams/recorder`)\n* From spock:\n  * activate the recorder with: `senv DataRecorder \"['RedisRecorder']\"`\n  * configure the recorder with\n    `senv RedisRecorder \"{'host': 'acme.org', 'port': 7379, 'db': 1}\"`\n    (replace `host`, `port` and `db` with your own)\n\nThe `RedisRecorder` env can be a string or a dictionary identifying the Redis\ndatabase.\n\nIn case a string is given, it recognizes the same format *url* argument from\n[redis.from_url()](https://redis-py.readthedocs.io/en/stable/#redis.from_url).\n\nIn case a dict is given it recognizes the same keyword arguments as\n[redis.from_url()](https://redis-py.readthedocs.io/en/stable/#redis.from_url)\nplus:\n* `TTL`: scan time to live in seconds (defaults to **one week**)\n* `key_prefix`: scan key prefix (defaults to `<macro server name>:sardana:scan`)\n\n### Example\n\nHere is a simple example of a client which simply listens to scan events and\nprints them on screen:\n\n```python\nimport contextlib\n\nimport redis\nfrom sardana_streams.client import ScanStream\n\ndb = redis.from_url('redis://acme.org:7379/1')\nprefix = \"acme:sardana:scan\"\nstream = ScanStream(db, prefix)\nwith contextlib.closing(stream):\n    for event in stream:\n        print(event)\n```\n\n[pypi-python-versions]: https://img.shields.io/pypi/pyversions/sardana-streams.svg\n[pypi-version]: https://img.shields.io/pypi/v/sardana-streams.svg\n[pypi-status]: https://img.shields.io/pypi/status/sardana-streams.svg\n[license]: https://img.shields.io/pypi/l/sardana-streams.svg\n[redis]: https://redis.io",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ALBA-Synchrotron/sardana-streams",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sardana-streams",
    "package_url": "https://pypi.org/project/sardana-streams/",
    "platform": "",
    "project_url": "https://pypi.org/project/sardana-streams/",
    "project_urls": {
      "Documentation": "https://github.com/ALBA-Synchrotron/sardana-streams",
      "Homepage": "http://github.com/ALBA-Synchrotron/sardana-streams",
      "Source": "https://github.com/ALBA-Synchrotron/sardana-streams"
    },
    "release_url": "https://pypi.org/project/sardana-streams/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Distributed sardana recorder",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9195859,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92e54b1010132e2596a6831cec90b04f352dc587036bdfea3359f3802d6464f3",
          "md5": "1bf70655601076a2e1ab820766755b48",
          "sha256": "e7516ba4ebe2ab328450b897feeded18840db832897ca2228e5a0a56f303e0b9"
        },
        "downloads": -1,
        "filename": "sardana-streams-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1bf70655601076a2e1ab820766755b48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6563,
        "upload_time": "2021-01-21T18:38:07",
        "upload_time_iso_8601": "2021-01-21T18:38:07.209159Z",
        "url": "https://files.pythonhosted.org/packages/92/e5/4b1010132e2596a6831cec90b04f352dc587036bdfea3359f3802d6464f3/sardana-streams-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92e54b1010132e2596a6831cec90b04f352dc587036bdfea3359f3802d6464f3",
        "md5": "1bf70655601076a2e1ab820766755b48",
        "sha256": "e7516ba4ebe2ab328450b897feeded18840db832897ca2228e5a0a56f303e0b9"
      },
      "downloads": -1,
      "filename": "sardana-streams-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1bf70655601076a2e1ab820766755b48",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 6563,
      "upload_time": "2021-01-21T18:38:07",
      "upload_time_iso_8601": "2021-01-21T18:38:07.209159Z",
      "url": "https://files.pythonhosted.org/packages/92/e5/4b1010132e2596a6831cec90b04f352dc587036bdfea3359f3802d6464f3/sardana-streams-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}