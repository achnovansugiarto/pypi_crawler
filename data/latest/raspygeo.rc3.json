{
  "info": {
    "author": "Daniel Philippus",
    "author_email": "daniel@dphilippus.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "# RaspyGeo\r\nAutomated geometry scenario runner (loosely analogous to the Geometry Editor tool) for HEC-RAS.  Depends on Raspy (`raspy-auto` on PyPI).  Works for steady-state simulations.\r\n\r\n# Usage\r\n\r\nScenario running is fully automated through `run`.  The HEC-RAS project must\r\nalready be set up with a reference (baseline) geometry **and** a new (scenario)\r\ngeometry file, and the current plan must be set up to run the scenario geometry.\r\nThen, the user specifies:\r\n\r\n- HEC-RAS project path, which needs to be a full path, not relative\r\n- Input (baseline) geometry file, which can be a relative path\r\n- Output (scenario) geometry file, which can be a relative path\r\n- Scenario data output file, which will contain shear, velocity, and depth\r\nfor main channel and overbanks\r\n- Data retrieval locations, which is a list of lists: `[[identifier, river, reach, rs]]`, where\r\n`identifier` is the user's name for the spot and the rest are HEC-RAS location\r\ninformation.\r\n- Number of flow profiles being modeled (steady state)\r\n- Scenario specification\r\n- [Optional] HEC-RAS version (default: \"507\", for 5.0.7; 6.3.1 would be \"631\", etc.)\r\n\r\nThe complicated part is the scenario specification.  This is set up as nested\r\ndictionaries.  The outer dictionary is scenarios, where the key is the name\r\nof the scenario (do not use any commas).  The inner dictionaries have the keys\r\nas `River Name,Reach Name` (no separating spaces, etc), and the values are the\r\nactual geometry specifications.  These are simply functions that take a `Reach`\r\nobject (see `hecgeo.py`) and return an updated `Reach`; the user can specify\r\nthis however they wish.\r\n\r\nThe default approach is to design functions that can be passed to\r\n`Reach.adjust_geometry` and to specify datum adjustments with `Reach.adjust_datums`.\r\nBoth of these modify any\r\ncross-sections either within a given stretch of the reach or for the whole reach.\r\nGeometry adjustment functions receive coordinates, roughness locations, and bank\r\nstations and return the same.  In the provided coordinates, the low point is zero\r\nelevation and the left edge is station zero; offsets and datums are stored and\r\nadded back in before writing.\r\n\r\nCoordinates are formatted as `[(station, elevation)]`.  Roughness is, as HEC-RAS\r\nhandles it, applied from the left point going rightwards, and formatted as\r\n`[(station, new roughness)]`.  The bank stations are just `[left, right]`.\r\n\r\nSpecifying geometry modifiers can be quite complicated.  Look at `geofun.py` for\r\nsome examples.  Two modifier functions are provided by default: `set_afp` and\r\n`set_lfc`, which are tailored to the developer's use case.  LFC specifies a\r\nlow-flow channel, or trapezoidal channel within the main channel.  AFP specifies\r\nan LFC which then has a wider flat floodplain, active floodplain (AFP), around\r\nit.  These are both meant to cut/fill into existing geometry and then daylight.\r\nIt would be much more straightforward to design, for example, a constant shape\r\nthat ignores the original channel or just adjusts width based on it, etc.  The\r\ncomplications mainly have to do with connecting the new design with the old.\r\n\r\nUsing `set_afp`, a full example is included below.  This would work similarly\r\nwith the user's own geometry functions.\r\n\r\n```\r\nfrom RaspyGeo import set_afp, run, parse\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\nrpath = r\"C:\\Users\\dphilippus\\longpathstuff\\TestProj\\test.prj\"\r\ningeo = \"TestProj/test.g02\"\r\noutgeo = \"TestProj/test.g01\"\r\noutpath = \"output.txt\"\r\n\r\n\r\ndef buildscen(bwidth, tdatum):\r\n    return lambda geo: geo.adjust_datums(0, tdatum).adjust_geometry(\r\n        set_afp(bwidth, 1, 2, lambda x: 0.5*x, 3, 0.05, 0.05, 0.035, 0.035))\r\n\r\n\r\ndef prepscens(bwidth, tdatum):\r\n    return {\r\n        \"RiverOne,Lower\": buildscen(bwidth, tdatum),\r\n        \"RiverOne,Upper\": buildscen(bwidth*0.75, tdatum*2)\r\n        }\r\n\r\n\r\nscens = {\"Width %d Datum %d\" % (w, d): prepscens(w, d) for w in range(1, 6)\r\n         for d in [1, 2, 3]}\r\n\r\n# [[identifier, river, reach, rs]]\r\nlocations = [\r\n    ['R1U', 'RiverOne', 'Upper', '2200'],\r\n    ['R1L', 'RiverOne', 'Lower', '401'],\r\n    ['TH', 'Thingy', 'OnlyOne', '100']\r\n    ]\r\n\r\nnprof = 10\r\n\r\n\r\ndef runner():\r\n    run(rpath, ingeo, outgeo, outpath, locations, nprof, scens)\r\n```\r\n\r\n# Bugs\r\n\r\nNote that HEC-RAS geometry files can have various optional components that I\r\nmay not have tested for, and these may produce odd crashes or similar.  If you\r\nare running into such a bug, please attach the relevant geometry input file to\r\nthe Issue.\r\n\r\n# Summary\r\n\r\nThe idea is to be able to automatically run through (and retrieve results for) many iterations of some geometry scenario in HEC-RAS.  This can be partially automated (editing the geometry) with the Geometry Editor, but that built-in tool, while very useful, is also quite limited and still requires a manual edit-run-analyze workflow.\r\n\r\nThe Geometry Editor is the best approach if you have a handful of scenarios, and RaspyGeo does not aim to compete with it.  However, that workflow becomes a major bottleneck when that scales to dozens or hundreds of variations, especially when those require complex modifications to datum, bank stations, etc, followed by exporting and post-processing data.  This project is in response to the developer spending far too much time running geometry scenarios for research.\r\n\r\nSo the plan is, the user specifies:\r\n\r\n- Scenario location (i.e. reach and river stations)\r\n- Data retrieval location\r\n- Datum adjustments at both ends; for now, just linearly interpolate the adjustment\r\n- New geometry\r\n- Slope-to-daylight\r\n\r\nRaspyGeo runs the specified scenarios, then retrieves profile data.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/quantum-dan/RaspyGeo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RaspyGeo",
    "package_url": "https://pypi.org/project/RaspyGeo/",
    "platform": null,
    "project_url": "https://pypi.org/project/RaspyGeo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/quantum-dan/RaspyGeo/issues",
      "Homepage": "https://github.com/quantum-dan/RaspyGeo"
    },
    "release_url": "https://pypi.org/project/RaspyGeo/0.0.3/",
    "requires_dist": [
      "raspy-auto (>=1.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Automated geometry scenario runner (loosely analogous to the Geometry Editor tool) for HEC-RAS",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17500257,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d139494f2b08f7d48d4df5e9bc349886ae59b67230edc1289cf860ae27beefa",
          "md5": "d770a4f51caddd964d75123008a16af1",
          "sha256": "aee8350735cca314f748aed1569989bebcebd955f85487b2508db85335a1ead2"
        },
        "downloads": -1,
        "filename": "RaspyGeo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d770a4f51caddd964d75123008a16af1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30964,
        "upload_time": "2023-03-28T20:32:01",
        "upload_time_iso_8601": "2023-03-28T20:32:01.274321Z",
        "url": "https://files.pythonhosted.org/packages/8d/13/9494f2b08f7d48d4df5e9bc349886ae59b67230edc1289cf860ae27beefa/RaspyGeo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7806bfafc3eee8e6cad549b553068eca21b1e35f76a172077dd33e035637d4e3",
          "md5": "e1480c4656c71012a4e3dc9d2fbe9e95",
          "sha256": "72af89cd2ea82a26c9c389a0cffd73c82d3c3fde719f9d5f9f39fc73d8fba298"
        },
        "downloads": -1,
        "filename": "RaspyGeo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e1480c4656c71012a4e3dc9d2fbe9e95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29772,
        "upload_time": "2023-03-28T20:32:03",
        "upload_time_iso_8601": "2023-03-28T20:32:03.599693Z",
        "url": "https://files.pythonhosted.org/packages/78/06/bfafc3eee8e6cad549b553068eca21b1e35f76a172077dd33e035637d4e3/RaspyGeo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5f7030990d7690d15b1813c647d72ca2611a574125df54ac940292e6878cf67",
          "md5": "ad9845dc5d8fe0e7c8288437af64c25d",
          "sha256": "36865a981ad117663590419576730323903104ab3f5cd888948ed003f9209df5"
        },
        "downloads": -1,
        "filename": "RaspyGeo-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad9845dc5d8fe0e7c8288437af64c25d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31264,
        "upload_time": "2023-03-29T20:57:42",
        "upload_time_iso_8601": "2023-03-29T20:57:42.580644Z",
        "url": "https://files.pythonhosted.org/packages/a5/f7/030990d7690d15b1813c647d72ca2611a574125df54ac940292e6878cf67/RaspyGeo-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9af5de51422ad0772aba182e79ea88de53d24ab2c153b55ac6b3c35eb570ec6d",
          "md5": "fe68d55d03b96335531e1b4d70e1f757",
          "sha256": "f9f636d629becede45fffec019885cb58e6c0ef143a8019e60340c5aea5c3e4e"
        },
        "downloads": -1,
        "filename": "RaspyGeo-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fe68d55d03b96335531e1b4d70e1f757",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30196,
        "upload_time": "2023-03-29T20:57:44",
        "upload_time_iso_8601": "2023-03-29T20:57:44.502844Z",
        "url": "https://files.pythonhosted.org/packages/9a/f5/de51422ad0772aba182e79ea88de53d24ab2c153b55ac6b3c35eb570ec6d/RaspyGeo-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c8b90799c78add2d54ccdd0aad23cb28cffebc733c55da85e39827497d39333",
          "md5": "b2000d3ffea6f57fce8d22d4d7eecbea",
          "sha256": "c97a677dd458a806e125c2521e053e55e5dff78565c8d302a61fab0f23c9eca1"
        },
        "downloads": -1,
        "filename": "RaspyGeo-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2000d3ffea6f57fce8d22d4d7eecbea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31292,
        "upload_time": "2023-03-29T21:38:35",
        "upload_time_iso_8601": "2023-03-29T21:38:35.053572Z",
        "url": "https://files.pythonhosted.org/packages/8c/8b/90799c78add2d54ccdd0aad23cb28cffebc733c55da85e39827497d39333/RaspyGeo-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf60ae459d1056c2d877738fb36d7c98267270aa4bb5ad03ab03de25ef1b04f",
          "md5": "fd5e47c5e30014e059f09ac1565d93ac",
          "sha256": "6a3113a2570fbc98fbc98dfe7d491cb2d546ee3d8e2f97f429802cdce40668da"
        },
        "downloads": -1,
        "filename": "RaspyGeo-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fd5e47c5e30014e059f09ac1565d93ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30226,
        "upload_time": "2023-03-29T21:38:37",
        "upload_time_iso_8601": "2023-03-29T21:38:37.126212Z",
        "url": "https://files.pythonhosted.org/packages/1c/f6/0ae459d1056c2d877738fb36d7c98267270aa4bb5ad03ab03de25ef1b04f/RaspyGeo-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c8b90799c78add2d54ccdd0aad23cb28cffebc733c55da85e39827497d39333",
        "md5": "b2000d3ffea6f57fce8d22d4d7eecbea",
        "sha256": "c97a677dd458a806e125c2521e053e55e5dff78565c8d302a61fab0f23c9eca1"
      },
      "downloads": -1,
      "filename": "RaspyGeo-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2000d3ffea6f57fce8d22d4d7eecbea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 31292,
      "upload_time": "2023-03-29T21:38:35",
      "upload_time_iso_8601": "2023-03-29T21:38:35.053572Z",
      "url": "https://files.pythonhosted.org/packages/8c/8b/90799c78add2d54ccdd0aad23cb28cffebc733c55da85e39827497d39333/RaspyGeo-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cf60ae459d1056c2d877738fb36d7c98267270aa4bb5ad03ab03de25ef1b04f",
        "md5": "fd5e47c5e30014e059f09ac1565d93ac",
        "sha256": "6a3113a2570fbc98fbc98dfe7d491cb2d546ee3d8e2f97f429802cdce40668da"
      },
      "downloads": -1,
      "filename": "RaspyGeo-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "fd5e47c5e30014e059f09ac1565d93ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30226,
      "upload_time": "2023-03-29T21:38:37",
      "upload_time_iso_8601": "2023-03-29T21:38:37.126212Z",
      "url": "https://files.pythonhosted.org/packages/1c/f6/0ae459d1056c2d877738fb36d7c98267270aa4bb5ad03ab03de25ef1b04f/RaspyGeo-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}