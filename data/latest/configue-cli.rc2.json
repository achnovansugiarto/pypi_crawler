{
  "info": {
    "author": "",
    "author_email": "Illuin Technology <contact@illuin.tech>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Typing :: Typed"
    ],
    "description": "# Configue CLI\n\nA [configue](https://github.com/illuin-tech/configue) extension that adds the ability to dynamically configure your application via the command line.\n\nConfigue CLI overlaps in functionality with [Hydra](https://hydra.cc/) but without all the unnecessary boilerplate and with the benefit of being compatible with `configue`.\n\n#### Table of contents\n\n- [Installation](#installation)\n- [Quick start](#quick-start)\n- [Inspection of the configuration state](#inspection-of-the-configuration-state)\n- [Configuration from the command line](#configuration-from-the-command-line)\n- [Configuration with YAML files](#configuration-with-yaml-files)\n- [Exporting the final configuration](#exporting-the-final-configuration)\n- [Unstructured configuration](#unstructured-configuration)\n- [Configuring the logging](#configuring-the-logging)\n- [Integration with Skypilot](#integration-with-skypilot)\n\n## Installation\n\nTo install the library, use\n\n```shell\npip install configue-cli\n```\n\nTo develop locally, clone the repository and use\n\n```shell\npip install -r requirements-dev.txt\n```\n\n## Quick start\n\nWith `configue-cli`, configurations are defined with structured and arbitrarily nested Python objects (both native dataclasses and `attr` dataclasses are supported and can be nested).\n\n```python\nimport dataclasses\nimport attrs\n\n\n@dataclasses.dataclass\nclass DatasetConfig:\n    name: str\n    n_samples: int = 10_000\n\n\n@dataclasses.dataclass\nclass OptimizerConfig:\n    learning_rate: float = 0.001\n    weight_decay: float = 1e-2\n\n\n@attrs.define\nclass ModelConfig:\n    name: str\n    batch_size: int = 12\n    optimizer: OptimizerConfig = attrs.Factory(\n        lambda self: OptimizerConfig(learning_rate=0.001 * self.batch_size), takes_self=True\n    )\n\n\n@dataclasses.dataclass\nclass ExperimentConfig:\n    model: ModelConfig\n    dataset: DatasetConfig\n```\n\nThese objects are injected at configuration time in your application entrypoint by the `inject_from_cli` decorator. To use `configue-cli`, simply wrap a [click](https://github.com/pallets/click) entrypoint with the `configue_cli.click.inject_from_cli` decorator and provide a target type to be injected.\n\n```python\nimport click\nfrom configue_cli.click import inject_from_cli\n\n@click.command()\n@inject_from_cli(ExperimentConfig)\ndef main(config: ExperimentConfig) -> None:\n    print(\"Passed configuration: \", config)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nTo display a help message, use the following:\n\n```shell\npython main.py --help\n```\n\n## Inspection of the configuration state\n\nTo visually inspect your application configuration state, use the following command:\n\n```shell\n$ python main.py --dry-run\n\n╭─ Configuration helper ────────────────────────────────╮\n│                                                       │\n│  model                                                │\n│  ├── (): __main__.ModelConfig                         │\n│  ├── name: Missing                                    │\n│  ├── batch_size: 12                                   │\n│  └── optimizer                                        │\n│      ├── (): __main__.OptimizerConfig                 │\n│      ├── learning_rate: 0.012                         │\n│      └── weight_decay: 0.01                           │\n│                                                       │\n│  dataset                                              │\n│  ├── (): __main__.DatasetConfig                       │\n│  ├── name: Missing                                    │\n│  └── n_samples: 10000                                 │\n│                                                       │\n╰───────────────────────────────────────────────────────╯\n```\n\nThis is useful to quickly identify which parameters are not yet defined (those marked with a `Missing`) and which values are used in the other parameters without inspecting the code.\n\n## Configuration from the command line\n\nParameters can be specified from the command line using dotted notation.\n\n```shell\n$ python main.py model.name=camembert-base dataset.name=fquad model.batch_size=48\n\n╭─ Configuration ───────────────────────────────────────────────────────────────────────────╮\n│                                                                                           │\n│  model                                                                                    │\n│  ├── (): __main__.ModelConfig                                                             │\n│  ├── name: camembert-base                                                                 │\n│  ├── batch_size: 48                                                                       │\n│  └── optimizer                                                                            │\n│      ├── (): __main__.OptimizerConfig                                                     │\n│      ├── learning_rate: 0.048                                                             │\n│      └── weight_decay: 0.01                                                               │\n│                                                                                           │\n│  dataset                                                                                  │\n│  ├── (): __main__.DatasetConfig                                                           │\n│  ├── name: fquad                                                                          │\n│  └── n_samples: 10000                                                                     │\n│                                                                                           │\n╰───────────────────────────────────────────────────────────────────────────────────────────╯\nPassed configuration: ExperimentConfig(model=ModelConfig(name='camembert-base', batch_size=48, optimizer=OptimizerConfig(learning_rate=0.048, weight_decay=0.01)), dataset=DatasetConfig(name='fquad', n_samples=10000))\n```\n\nAny missing required parameter at configuration time will result in an exception:\n\n```shell\n$ python main.py model.batch_size=3\n\nTraceback (most recent call last):\n  ...\nconfigue_cli.core.exceptions.MissingMandatoryValueError: Missing mandatory value: dataset.name\n```\n\n## Configuration with YAML files\n\nAny parameter can be overridden using a `configue` compliant YAML file. Suppose the model is configured in the following `model.yml` file:\n\n```yaml\nmodel:\n  (): __main__.ModelConfig\n  name: camembert-large\n  batch_size: 72\n  optimizer:\n    (): __main__.OptimizerConfig\n    learning_rate: 0.01\n    weight_decay: 0.0\n```\n\nThis configuration file can be loaded from the CLI using the `-c` flag:\n\n```shell\n$ python main.py -c model.yml --dry-run\n\n╭─ Configuration helper ────────────────────────────────────╮\n│                                                           │\n│  model                                                    │\n│  ├── (): __main__.ModelConfig                             │\n│  ├── name: camembert-large                                │\n│  ├── batch_size: 72                                       │\n│  └── optimizer                                            │\n│      ├── (): __main__.OptimizerConfig                     │\n│      ├── learning_rate: 0.01                              │\n│      └── weight_decay: 0.0                                │\n│                                                           │\n│  dataset                                                  │\n│  ├── (): __main__.DatasetConfig                           │\n│  ├── name: Missing                                        │\n│  └── n_samples: 10000                                     │\n│                                                           │\n╰───────────────────────────────────────────────────────────╯\n```\n\nMultiple configuration files can be used simultaneously, the final configuration is assembled by merging all files in the order they are provided. For instance, let's suppose we have the following `large_batch.yml` file:\n\n```yaml\nmodel:\n  batch_size: 512\n```\n\nThis file can be merged into our previous configuration using the following:\n\n```shell\n$ python main.py -c model.yml -c large_batch.yml --dry-run \n\n╭─ Configuration helper ────────────────────────────────────╮\n│                                                           │\n│  model                                                    │\n│  ├── (): __main__.ModelConfig                             │\n│  ├── name: camembert-large                                │\n│  ├── batch_size: 512                                      │\n│  └── optimizer                                            │\n│      ├── (): __main__.OptimizerConfig                     │\n│      ├── learning_rate: 0.01                              │\n│      └── weight_decay: 0.0                                │\n│                                                           │\n│  dataset                                                  │\n│  ├── (): __main__.DatasetConfig                           │\n│  ├── name: Missing                                        │\n│  └── n_samples: 10000                                     │\n│                                                           │\n╰───────────────────────────────────────────────────────────╯\n```\n\nParameters specified with the command line take precedence over the ones specified in YAML files:\n\n```shell\n$ python main.py model.batch_size=32 -c model.yml -c large_batch.yml --dry-run\n\n╭─ Configuration helper ────────────────────────────────────╮\n│                                                           │\n│  model                                                    │\n│  ├── (): __main__.ModelConfig                             │\n│  ├── name: camembert-large                                │\n│  ├── batch_size: 32                                       │\n│  └── optimizer                                            │\n│      ├── (): __main__.OptimizerConfig                     │\n│      ├── learning_rate: 0.01                              │\n│      └── weight_decay: 0.0                                │\n│                                                           │\n│  dataset                                                  │\n│  ├── (): __main__.DatasetConfig                           │\n│  ├── name: Missing                                        │\n│  └── n_samples: 10000                                     │\n│                                                           │\n╰───────────────────────────────────────────────────────────╯\n```\n\nThis feature encourages a modular configuration pattern where different subparts of the application (the model and the dataset in this example) are configured in separate YAML files and are dynamically assembled at configuration time. Different variations of these subparts can easily be assembled. All arguments can be overridden using the command line without having to edit the config files.\n\n## Exporting the final configuration\n\nTo ease reproducibility, the final configuration used for the run can be exported by using the `-o` flag and specifying an output YAML file:\n\n```shell\n$ python main.py dataset.name=hello-world -c model.yml -c large_batch.yml -o output.yml\n\n╭─ Configuration ───────────────────────────────────────────╮\n│                                                           │\n│  model                                                    │\n│  ├── (): __main__.ModelConfig                             │\n│  ├── name: camembert-large                                │\n│  ├── batch_size: 512                                      │\n│  └── optimizer                                            │\n│      ├── (): __main__.OptimizerConfig                     │\n│      ├── learning_rate: 0.01                              │\n│      └── weight_decay: 0.0                                │\n│                                                           │\n│  dataset                                                  │\n│  ├── (): __main__.DatasetConfig                           │\n│  ├── name: hello-world                                    │\n│  └── n_samples: 10000                                     │\n│                                                           │\n╰───────────────────────────────────────────────────────────╯\nPassed configuration ExperimentConfig(model=ModelConfig(name='camembert-large', batch_size=512, optimizer=OptimizerConfig(learning_rate=0.01, weight_decay=0.0)), dataset=DatasetConfig(name='hello-world', n_samples=10000))\n\n$ cat output.yml\nmodel:\n  (): __main__.ModelConfig\n  name: camembert-large\n  batch_size: 512\n  optimizer:\n    (): __main__.OptimizerConfig\n    learning_rate: 0.01\n    weight_decay: 0.0\ndataset:\n  (): __main__.DatasetConfig\n  name: hello-world\n  n_samples: 10000\n```\n\n## Unstructured configuration\n\nIt is possible to use the `inject_from_cli` decorator without specifying a target type:\n\n```python\n@click.command()\n@inject_from_cli()\ndef main(config: configue_cli.core.dict_config.DictConfig) -> None:\n    ...\n```\n\nIn that case, the wrapped entrypoint will be passed a `configue_cli.core.dict_config.DictConfig` object upon injection.\n\n## Configuring the logging\n\nTo load a [logging configuration](https://docs.python.org/3/library/logging.config.html) located under the `\"logging\"` key in your final configuration, use the following:\n\n```python\n@click.command()\n@inject_from_cli(ExperimentConfig, logging_config_path=\"logging\")\ndef main(config: ExperimentConfig) -> None:\n    ...\n```\n\n## Integration with Skypilot\n\n[SkyPilot](https://github.com/skypilot-org/skypilot) is a framework for easily running jobs on any cloud through a unified interface. Any function decorated with `inject_from_cli` can easily be executed remotely by providing a Skypilot configuration.\n\nThe following configuration defines a job to be executed in a SkyPilot cluster named `test-cluster`. The job is defined under the `task` key, we refer to the [SkyPilot YAML specification](https://skypilot.readthedocs.io/en/latest/reference/yaml-spec.html) for more details on this section.\n\nThe Python command and all its arguments are captured and interpolated inside the `run` command, respectively in a `{command}` and `{parameters}` placeholder.\n\n```yaml\n# skypilot.yml\nskypilot:\n  cluster-name: test-cluster\n  task:\n    resources:\n      cloud: gcp\n      accelerators: K80:1\n    workdir: .\n    setup: |\n      echo 'Setup the job...'\n    run: |\n      set -e\n      cd ~/sky_workdir\n      {command} {parameters}\n```\n\nTo load the SkyPilot configuration in your final configuration, use the following:\n\n```python\n@click.command()\n@inject_from_cli(ExperimentConfig, skypilot_config_path=\"skypilot\")\ndef main(config: ExperimentConfig) -> None:\n    ...\n```\n\nAs with the other arguments, all SkyPilot configuration arguments can be redefined on the fly:\n\n```shell\npython main.py -c skypilot.yml skypilot.cluster-name=another-cluster\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Illuin Technology <contact@illuin.tech>",
    "name": "configue-cli",
    "package_url": "https://pypi.org/project/configue-cli/",
    "platform": "any",
    "project_url": "https://pypi.org/project/configue-cli/",
    "project_urls": {
      "homepage": "https://github.com/illuin-tech/configue-cli",
      "repository": "https://github.com/illuin-tech/configue-cli"
    },
    "release_url": "https://pypi.org/project/configue-cli/0.2.0/",
    "requires_dist": [
      "attrs (>=22.0.0)",
      "click (>=8.0.0)",
      "configue (>=4.0.0)",
      "pyyaml (>=5.1.0)",
      "rich (>=13.0.0)",
      "skypilot (==0.2.5) ; (python_version < \"3.11\") and extra == 'skypilot'"
    ],
    "requires_python": ">=3.7",
    "summary": "A configue extension that adds the ability to dynamically configure your application via the command line.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17543388,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40cebeb783711621a75ea4cd688ce2b984a36ef2c2d12cc487a972d3f81c7728",
          "md5": "1b415902b2a1ce424a965b835a2bcbc7",
          "sha256": "aec45afe6158b7e3dc051d76e31da4944562375c920b87de916f136ce12cba72"
        },
        "downloads": -1,
        "filename": "configue_cli-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b415902b2a1ce424a965b835a2bcbc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15633,
        "upload_time": "2023-03-31T10:44:46",
        "upload_time_iso_8601": "2023-03-31T10:44:46.997054Z",
        "url": "https://files.pythonhosted.org/packages/40/ce/beb783711621a75ea4cd688ce2b984a36ef2c2d12cc487a972d3f81c7728/configue_cli-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56da26f3e9fa6bbef17b6d2943a502469576fa0133642320f6a1b18cb627aab6",
          "md5": "caf1e699920a1c529e4a3f31fc0fadb6",
          "sha256": "438b5d217738572b0da7b00ac4a4acf250c25387e607eba2ae21d3a61812e647"
        },
        "downloads": -1,
        "filename": "configue-cli-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "caf1e699920a1c529e4a3f31fc0fadb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23977,
        "upload_time": "2023-03-31T10:44:48",
        "upload_time_iso_8601": "2023-03-31T10:44:48.634563Z",
        "url": "https://files.pythonhosted.org/packages/56/da/26f3e9fa6bbef17b6d2943a502469576fa0133642320f6a1b18cb627aab6/configue-cli-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e9f6475ac72e8bd76cb3a491c48f94fbbff824b19e29007e9d75427e2878979",
          "md5": "0a3b15097aaf0ae703e6fd86b8ec55ce",
          "sha256": "4a2e88f5d51bedb4b6eae85cadeb28b512fab1418964bbfe0df83ddcf8d0eac2"
        },
        "downloads": -1,
        "filename": "configue_cli-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a3b15097aaf0ae703e6fd86b8ec55ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15604,
        "upload_time": "2023-04-01T22:10:29",
        "upload_time_iso_8601": "2023-04-01T22:10:29.322234Z",
        "url": "https://files.pythonhosted.org/packages/2e/9f/6475ac72e8bd76cb3a491c48f94fbbff824b19e29007e9d75427e2878979/configue_cli-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31f8bca091a70a5bf1586436d200edbda9eafe50a93c2ccf6afd43f0f43ab9bc",
          "md5": "df9723d834804a65053f96f746baca86",
          "sha256": "9193767ed33215cf9f3e22722294a636a0d90f82e4a076a6c0b73a49ccd653ad"
        },
        "downloads": -1,
        "filename": "configue-cli-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "df9723d834804a65053f96f746baca86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21817,
        "upload_time": "2023-04-01T22:10:31",
        "upload_time_iso_8601": "2023-04-01T22:10:31.312772Z",
        "url": "https://files.pythonhosted.org/packages/31/f8/bca091a70a5bf1586436d200edbda9eafe50a93c2ccf6afd43f0f43ab9bc/configue-cli-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e9f6475ac72e8bd76cb3a491c48f94fbbff824b19e29007e9d75427e2878979",
        "md5": "0a3b15097aaf0ae703e6fd86b8ec55ce",
        "sha256": "4a2e88f5d51bedb4b6eae85cadeb28b512fab1418964bbfe0df83ddcf8d0eac2"
      },
      "downloads": -1,
      "filename": "configue_cli-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a3b15097aaf0ae703e6fd86b8ec55ce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15604,
      "upload_time": "2023-04-01T22:10:29",
      "upload_time_iso_8601": "2023-04-01T22:10:29.322234Z",
      "url": "https://files.pythonhosted.org/packages/2e/9f/6475ac72e8bd76cb3a491c48f94fbbff824b19e29007e9d75427e2878979/configue_cli-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31f8bca091a70a5bf1586436d200edbda9eafe50a93c2ccf6afd43f0f43ab9bc",
        "md5": "df9723d834804a65053f96f746baca86",
        "sha256": "9193767ed33215cf9f3e22722294a636a0d90f82e4a076a6c0b73a49ccd653ad"
      },
      "downloads": -1,
      "filename": "configue-cli-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "df9723d834804a65053f96f746baca86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21817,
      "upload_time": "2023-04-01T22:10:31",
      "upload_time_iso_8601": "2023-04-01T22:10:31.312772Z",
      "url": "https://files.pythonhosted.org/packages/31/f8/bca091a70a5bf1586436d200edbda9eafe50a93c2ccf6afd43f0f43ab9bc/configue-cli-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}