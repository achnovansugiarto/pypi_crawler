{
  "info": {
    "author": "Piotr Muras",
    "author_email": "piotrekm7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Service Configurator\n[![Coverage Status](https://coveralls.io/repos/github/piotrekm7/service-configurator/badge.svg)](https://coveralls.io/github/piotrekm7/service-configurator)\n\nService Configurator is a python library created for managing settings and secrets for your service.\n\n## Installation\n\nUse package manager pip to install service-configurator.\n\n```bash\npip install service-configurator\n```\n\n## Usage\n\n### Creating settings classes\n\nAll settings classes should derive from BaseSettings or its subclass.\n\n```python\nfrom configurator import BaseSettings, Integer, String\n\n\nclass MySettings(BaseSettings):\n    user_id = Integer()\n    password = String()\n\n\nconfig = MySettings()\n\nconfig.user_id = 10\nconfig.password = '123'\n\nprint(f'User: {config.user_id} logged with password: {config.password}')\n```\n\nSettings class could have other settings objects as members.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var1 = Integer()\n\n\nclass MySettings2(BaseSettings):\n    my_settings = MySettings()\n    var2 = Integer()\n```\n\nInheriting from another settings class is also possible. Subclass treats parent's settings as its own.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass ParentSettings(BaseSettings):\n    var1 = Integer()\n\n\nclass MySettings(ParentSettings):\n    var2 = Integer()\n```\n\nequals\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var1 = Integer()\n    var2 = Integer()\n```\n\n### Available settings fields\n\nAll implemented settings fields are presented below.\n\n```python\nfrom configurator import BaseSettings, Integer, PositiveInteger, String, Email, Boolean, Float, Url\n\n\nclass MySettings(BaseSettings):\n    var1 = Integer()\n    var2 = PositiveInteger()\n    var3 = String()\n    var4 = Email()\n    var5 = Boolean()\n    var6 = Float()\n    var7 = Url()\n```\n\nRemember to always include parentheses () when creating settings fields.\n\n### Optional fields and default values\n\nSetting fields can be marked as optional using required parameter. In addition to that default value can be set, the\ndefault value is returned if field wasn't modified. When these arguments are not provided field is required and it's\ndefault value is field type specific.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var = Integer(required=False, default=50)\n```\n\n### Importing settings\n\nYou can import settings using:\n\n- python dict object\n- json file\n- yaml file\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var = Integer()\n\n\nconfig = MySettings()\n\nconfig.from_dict({'var': 12})\nconfig.from_json('file.json')\nconfig.from_yaml('file.yaml')\n```\n\nWhen importing from python dict object you can use partial_update argument if you don't want to provide all required\nvalues, which could be useful when unit testing. By default, an exception is thrown if required values are missing. This\noption is not accessible for json and yaml imports.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var1 = Integer()\n    var2 = Integer()\n\n\nconfig = MySettings()\n\nconfig.from_dict({'var1': 12}, partial_update=True)\n```\n\n### Exporting settings\n\nSimilar to import you have few export options:\n\n- python dict object\n- json file\n- yaml file\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var = Integer()\n\n\nconfig = MySettings()\nconfig.var = 10\n\nconfig.to_dict()  # {'var': 10}\nconfig.to_json('file.json')\nconfig.to_yaml('file.yaml')\n```\n\nYaml files are recommended option for storing your configuration.\n\n### Generating template files\n\nTemplate/skeleton config file can be simply generated by creating a new instance of a settings class and using export\nmethod.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var = Integer()\n\n\nconfig = MySettings()\n\nconfig.to_json('file.json.skel')\nconfig.to_yaml('file.yaml.skel')\n```\n\n### Setting and getting single field\n\nIf you want get or set single attribute you can access is as normal class member.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var = Integer()\n\n\nconfig = MySettings()\n\nconfig.var = 4\nprint(config.var)  # prints 4\n```\n\n### Private settings fields\n\nIf you add a non-field member to your config class, it won't be exported or imported. However you can still use it as a\nnormal class member.\n\n```python\nfrom configurator import BaseSettings, Integer\n\n\nclass MySettings(BaseSettings):\n    var = Integer(default=5)\n    multiplier = 2\n\n    def multiply(self):\n        return self.var * self.multiplier\n\n\nconfig = MySettings()\nprint(config.multiply())  # prints 10\nconfig.to_dict()  # {'var': 5}\n```\n\n### Handling exceptions\n\nConfigurator throws following exceptions when something goes wrong:\n\n- ValidationError - provided value didn't pass validation checks for the field\n- SettingsError - a generic Settings error, read an error message for more information\n\n```python\nfrom configurator import BaseSettings, PositiveInteger, ValidationError, SettingsError\n\n\nclass MySettings(BaseSettings):\n    var = PositiveInteger()\n\n\nconfig = MySettings()\n\ntry:\n    config.var = -1\nexcept ValidationError as ex:\n    # ValidationError -1 can't be assigned to PositiveInteger\n    print(f'Validation error: {ex}')\n\ntry:\n    config.from_dict({})\nexcept SettingsError as ex:\n    # SettingsError missing required field 'var'\n    print(f'Settings error: {ex}')\n```\n\nExceptions shouldn't pass silently.\n\n### Utility classes\n\nFor commonly used sets of settings utility classes were implemented to avoid unnecessary code repetition in multiple\nservices.\n\nAll currently implemented utility classes are presented below. Check docs for class destiny.\n\n```python\nfrom configurator import BaseSettings\nfrom configurator.utils import OracleConnectorSettings, BoxSettings\n\n\nclass MySettings(BaseSettings):\n    oracle_db = OracleConnectorSettings()\n    box = BoxSettings()\n```\n\n### Complete example\n\n```python\nfrom configurator import BaseSettings, String, Email\nfrom configurator.utils import OracleConnectorSettings\n\n\nclass MySettings(BaseSettings):\n    api_key = String()\n    report_email = Email(required=False)\n    oracle_db = OracleConnectorSettings()\n\n\nconfig = MySettings()\nconfig.from_yaml('config.yml')\n```\n\n#### `config.yaml`\n\n```yaml\napi_key: '123qwerty'\noracle_db:\n  host: 'http://localhost'\n  password: 'pass123'\n  port: 1521\n  sid: 'db2'\n  user: 'admin'\nreport_email: 'report@example.com'\n\n```\n\n## Contributing\n\n### Creating new settings fields\n\n- All fields classes are located in the `fields.py` file.\n- Every field should be inherited from `Field` class or its subclass.\n- All fields should implement `default`, `type`, and `validate`, unless it's implemented in parent class and changes\n  aren't needed\n\nExample field classes:\n\n```python\n# implemented in fields.py\n\nclass String(Field):\n    \"\"\"\n    Class for string type fields.\n    \"\"\"\n    type_ = str\n    default = ''\n\n\nclass Email(String):\n    \"\"\"\n    Class for email fields.\n    \"\"\"\n\n    def validate(self, value: str) -> str:\n        \"\"\"Validates email using simple regex.\"\"\"\n        value = super().validate(value)\n        regex = re.compile(r'^\\S+@\\S+\\.\\S+$')\n        if regex.fullmatch(value) is None:\n            raise ValidationError('Provided string is not a valid email.')\n        return value\n\n```\n\n### Creating new utility settings\n\nCommon sets of parameters used in many services shouldn't be copy-pasted. Instead, a new utility class should be created\nin a `utils.py`. Create the utility class as a normal settings class.\n\n```python\n# implemented in utils.py\n\nclass OracleConnectorSettings(BaseSettings):\n    \"\"\"Setting required for connection to oracle database.\"\"\"\n    host = Url()\n    port = Integer()\n    user = String()\n    password = String()\n    sid = String()\n\n    def get_connection_url(self):\n        \"\"\"Get connection url for sql alchemy\"\"\"\n        return f\"oracle://{self.user}:{self.password}@{self.host}:{self.port}/{self.sid}\"\n```\n\n### Additional things to consider\n\n- Every class and function should be documented. In addition to that run pydoc3 to generate html documentation after\n  modifications.\n  ```bash\n  pdoc --html -o docs configurator\n  ```\n- Test coverage of this package is 100% try your best to not lower it.\n- Update `__all__` in `__init__.py` if needed\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/piotrekm7/service-configurator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "service-configurator",
    "package_url": "https://pypi.org/project/service-configurator/",
    "platform": null,
    "project_url": "https://pypi.org/project/service-configurator/",
    "project_urls": {
      "Homepage": "https://github.com/piotrekm7/service-configurator"
    },
    "release_url": "https://pypi.org/project/service-configurator/1.0.0/",
    "requires_dist": [
      "pyyaml (>=6.0.0)"
    ],
    "requires_python": ">=3.8.1",
    "summary": "A package for storing service config and secrets",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13920955,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9d3c232e4574926ddb4c12a48233132c56c35cec31323399cf8ac7bc5c8aa57",
          "md5": "d813cf55eb2251820c1d7540ec6b9009",
          "sha256": "c13a959592a6b26c9af1edbdb75266ab1087f38b06dfb0dc5d0f7c2386f8dcea"
        },
        "downloads": -1,
        "filename": "service_configurator-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d813cf55eb2251820c1d7540ec6b9009",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 8495,
        "upload_time": "2022-05-24T13:08:05",
        "upload_time_iso_8601": "2022-05-24T13:08:05.579629Z",
        "url": "https://files.pythonhosted.org/packages/d9/d3/c232e4574926ddb4c12a48233132c56c35cec31323399cf8ac7bc5c8aa57/service_configurator-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7ad30d3c03d55ec991930bfc552ff94baab81a3fc3a1fdc34d84d334548d33f",
          "md5": "5e349240726dd59eea3b416d205a31b8",
          "sha256": "1fb7effb7519c4bc0e5796737b1f566493c5c92ddc31da39ee60dc84f809b312"
        },
        "downloads": -1,
        "filename": "service-configurator-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e349240726dd59eea3b416d205a31b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.1",
        "size": 7512,
        "upload_time": "2022-05-24T13:08:07",
        "upload_time_iso_8601": "2022-05-24T13:08:07.602280Z",
        "url": "https://files.pythonhosted.org/packages/c7/ad/30d3c03d55ec991930bfc552ff94baab81a3fc3a1fdc34d84d334548d33f/service-configurator-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9d3c232e4574926ddb4c12a48233132c56c35cec31323399cf8ac7bc5c8aa57",
        "md5": "d813cf55eb2251820c1d7540ec6b9009",
        "sha256": "c13a959592a6b26c9af1edbdb75266ab1087f38b06dfb0dc5d0f7c2386f8dcea"
      },
      "downloads": -1,
      "filename": "service_configurator-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d813cf55eb2251820c1d7540ec6b9009",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1",
      "size": 8495,
      "upload_time": "2022-05-24T13:08:05",
      "upload_time_iso_8601": "2022-05-24T13:08:05.579629Z",
      "url": "https://files.pythonhosted.org/packages/d9/d3/c232e4574926ddb4c12a48233132c56c35cec31323399cf8ac7bc5c8aa57/service_configurator-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7ad30d3c03d55ec991930bfc552ff94baab81a3fc3a1fdc34d84d334548d33f",
        "md5": "5e349240726dd59eea3b416d205a31b8",
        "sha256": "1fb7effb7519c4bc0e5796737b1f566493c5c92ddc31da39ee60dc84f809b312"
      },
      "downloads": -1,
      "filename": "service-configurator-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5e349240726dd59eea3b416d205a31b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.1",
      "size": 7512,
      "upload_time": "2022-05-24T13:08:07",
      "upload_time_iso_8601": "2022-05-24T13:08:07.602280Z",
      "url": "https://files.pythonhosted.org/packages/c7/ad/30d3c03d55ec991930bfc552ff94baab81a3fc3a1fdc34d84d334548d33f/service-configurator-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}