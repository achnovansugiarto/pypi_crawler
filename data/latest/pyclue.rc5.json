{
  "info": {
    "author": "Liu Shaoweihua",
    "author_email": "liushaoweihua@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyCLUE\n\nPython toolkit for Chinese Language Understanding Evaluation benchmark.\n\n中文语言理解测评基准的Python工具包，快速测评代表性数据集、基准（预训练）模型，并针对自己的数据选择合适的基准（预训练）模型进行快速应用。\n\n## 安装PyCLUE\n\n现在，可以通过pip安装PyCLUE:\n\n```bash\npip install PyCLUE \n```\n\n## 使用PyCLUE\n\n### 分类/句子对 任务\n\n#### 快速测评CLUE数据集\n\n以下以在CPU/GPU上运行为例，完整例子可参见`PyCLUE/examples/classifications/run_clue_task.py`。在TPU上运行的例子参照`PyCLUE/examples/classifications/run_clue_task_tpu.py`。\n\n```python\n# 指定使用的GPU，如无GPU则不指定\nimport os\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\n\n# 导入分类/句子对测评任务相关组件\nfrom PyCLUE.tasks.run_classifier import clue_tasks, configs\n```\n\n其中，`clue_tasks`函数接受测评任务的`dict`类型参数，`configs`为测评任务的`dict`类型参数，默认值和说明如下：\n\n```json\n{\n    # 测评任务名\n    #     CLUE benchmark: afqmc, cmnli, copa, csl, iflytek, tnews, wsc\n    #     chineseGLUE: bq, xnli, lcqmc, inews, thucnews\n    \"task_name\": \"afqmc\",\n    # 预训练语言模型\n    #     如果该参数为None，需要指定vocab_file, bert_config_file和init_checkpoint三参数。\n    #     或者可以直接指定以下基准（预训练）模型：\n    #         bert, bert_wwm_ext, albert_xlarge, albert_large, albert_base, albert_base_ext,\n    #         albert_small, albert_tiny, roberta, roberta_wwm_ext, roberta_wwm_ext_large\n    \"pretrained_lm_name\": \"bert\",\n    # 执行内容\n    \"do_train\": true,\n    \"do_eval\": true,\n    \"do_predict\": true,\n    # 数据路径\n    #     如不指定，则默认为：PyCLUE/datasets\n    #     路径中的文件后缀名可接受 \"txt\", \"tsv\", \"json\"等\n    #     如果 do_train = True，数据目录中应至少包含train文件，前缀名为\"train\"\n    #     如果 do_eval = True，数据目录中应至少包含dev文件，前缀名为\"dev\"\n    #     如果 do_predict = True，数据目录中应至少包含test文件，前缀名为\"test\"\n    \"data_dir\": null,\n    # 输出结果保存路径\n    #     如不指定，则默认为：PyCLUE/task_outputs\n    #     包含训练的模型文件，tf_record数据以及输出的验证结果dev_results.txt/test_results.txt/test_results.tsv\n    \"output_dir\": null,\n    # 自行指定预训练语言模型三参数\n    \"vocab_file\": null,\n    \"bert_config_file\": null,\n    \"init_checkpoint\": null,\n    # 训练参数\n    \"do_lower_case\": true,\n    \"max_seq_length\": 128,\n    \"train_batch_size\": 8,\n    \"eval_batch_size\": 8,\n    \"predict_batch_size\": 8,\n    \"learning_rate\": 2e-05,\n    \"num_train_epochs\": 1,\n    \"warmup_proportion\": 0.1,\n    \"save_checkpoints_steps\": 1000,\n    \"iterations_per_loop\": 1000,\n    # TPU选项\n    \"use_tpu\": false,\n    \"tpu_name\": null,\n    \"tpu_zone\": null,\n    \"gcp_project\": null,\n    \"master\": null,\n    \"num_tpu_cores\": 8,\n    # 是否输出训练过程\n    \"verbose\": 0\n}\n```\n\n执行以下评测过程：\n\n```python\n# task_name\nconfigs[\"task_name\"] = \"wsc\"\n\n# pretrained_lm_name\nconfigs[\"pretrained_lm_name\"] = \"bert\"\n\n# actions\nconfigs[\"do_train\"] = True\nconfigs[\"do_eval\"] = True\nconfigs[\"do_predict\"] = True\n\n# train parameters\nconfigs[\"max_seq_length\"] = 128\nconfigs[\"train_batch_size\"] = 8\nconfigs[\"learning_rate\"] = 2e-5\nconfigs[\"warmup_proportion\"] = 0.1\nconfigs[\"num_train_epochs\"] = 50\n\n# show training process\nconfigs[\"verbose\"] = 0\n\nwsc_result = clue_tasks(configs)\nprint(wsc_result)\n```\n\n测评结果由`clue_tasks`返回，形式如下：\n\n```json\n{\n    # 验证集指标结果\n    \"dev_res\":{\n        \"eval_accuracy\": \"\",\n        \"eval_loss\": \"\",\n        \"global_step\": \"\",\n        \"loss\": \"\"\n    },\n    # 测试集指标结果（部分测试集有label，具有参考意义；部分则没有label，无参考意义）\n    \"test_res\":{\n        \"eval_accuracy\": \"\",\n        \"eval_loss\": \"\",\n        \"global_step\": \"\",\n        \"loss\": \"\"\n    },\n    # 测试集预测结果\n    \"test_outputs\": [\n        {\n            \"guid\": \"test-0\",\n            \"text_a\": \"\",\n            \"text_b\": \"\",\n            \"label\": \"\"\n        },\n        ...\n    ]\n}\n```\n\n测评结果同时保存在`configs`中指定的输出目录`${output_dir}/classifications/${task_name}/${pretrained_lm_name}`中，如本例的`PyCLUE/task_outputs/classifications/wsc/bert`中。其中`dev_results.txt`保存了验证集的指标结果，`test_results.txt`保存了测试集的指标结果（部分测试集有label，具有参考意义；部分则没有label，无参考意义）。`test_results.tsv`则保存了测试集的预测结果，具体形式如下：\n\n```json\n{\"guid\": \"test-0\", \"text_a\": \"_毛德和朵拉_看到火车冲过大草原，引擎上冒着滚滚黑烟。从远处就能听见它们的轰鸣声和狂野而清晰的汽笛声。当[它们]行进到近处时，马都跑开了。\", \"text_b\": null, \"label\": \"false\"}\n{\"guid\": \"test-1\", \"text_a\": \"毛德和朵拉看到_火车_冲过大草原，引擎上冒着滚滚黑烟。从远处就能听见它们的轰鸣声和狂野而清晰的汽笛声。当[它们]行进到近处时，马都跑开了。\", \"text_b\": null, \"label\": \"false\"}\n{\"guid\": \"test-2\", \"text_a\": \"毛德和朵拉看到火车冲过大草原，引擎上冒着滚滚_黑烟_。从远处就能听见它们的轰鸣声和狂野而清晰的汽笛声。当[它们]行进到近处时，马都跑开了。\", \"text_b\": null, \"label\": \"false\"}\n{\"guid\": \"test-3\", \"text_a\": \"毛德和朵拉看到火车冲过大草原，引擎上冒着滚滚黑烟。从远处就能听见它们的_轰鸣声_和狂野而清晰的汽笛声。当[它们]行进到近处时，马都跑开了。\", \"text_b\": null, \"label\": \"false\"}\n{\"guid\": \"test-4\", \"text_a\": \"毛德和朵拉看到火车冲过大草原，引擎上冒着滚滚黑烟。从远处就能听见它们的轰鸣声和狂野而清晰的_汽笛声_。当[它们]行进到近处时，马都跑开了。\", \"text_b\": null, \"label\": \"false\"}\n{\"guid\": \"test-5\", \"text_a\": \"毛德和朵拉看到火车冲过大草原，引擎上冒着滚滚黑烟。从远处就能听见它们的轰鸣声和狂野而清晰的汽笛声。当[它们]行进到近处时，_马_都跑开了。\", \"text_b\": null, \"label\": \"false\"}\n```\n\n#### 应用于自定义数据集\n\n以下以在CPU/GPU上运行为例，完整例子可参见`PyCLUE/examples/classifications/run_user_task.py`。在TPU上运行的例子参照`PyCLUE/examples/classifications/run_user_task_tpu.py`。\n\n```python\n# 指定使用的GPU，如无GPU则不指定\nimport os\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"\n\n# 导入分类/句子对测评任务相关组件\nfrom PyCLUE.tasks.run_classifier import user_tasks, configs\n\n# task_name: default is \"user_defined_task\"\nconfigs[\"task_name\"] = \"\" \n\n# pretrained_lm_name\nconfigs[\"pretrained_lm_name\"] = \"bert\"\n\n# actions\nconfigs[\"do_train\"] = True\nconfigs[\"do_eval\"] = True\nconfigs[\"do_predict\"] = True\n\n# data_dir\nconfigs[\"data_dir\"] = \"my_file_path\"\n\n# data configs\nconfigs[\"labels\"] = [\"0\", \"1\"]\n# label_, text_a_column , text_b_column & delimiter:\n#     examples_1，txt文件，分隔符为_!_，句子对任务：\n#         0_!_我想要回家_!_我准备回家\n#         1_!_我想要回家_!_我准备吃饭\n#     >> label_column = 0, text_a_column = 1, text_b_column = 2, delimiter = \"_!_\"\n#     examples_2，tsv文件，分隔符为\\t，分类任务：\n#         0\\t我很生气\n#         1\\t我很开心\n#     >> label_column = 0, text_a_column = 1, text_b_column = None, delimiter = \"\\t\"\n#     examples_3，json文件，句子对任务：\n#         {\"label\": 0, \"sentence1\": \"我想要回家\", \"sentence2\": \"我很生气\"}\n#     >> label_column = \"label\", text_a_column = \"sentence1\", text_b_column = \"sentence2\", delimiter = None\nconfigs[\"label_column\"] = \"\"\nconfigs[\"text_a_column\"] = \"\"\nconfigs[\"text_b_column\"] = \"\"\nconfigs[\"delimiter\"] = \"\"\n# ignore_header\n#     是否丢弃第一行（往往是第一行为各列说明的时候设置为True）\nconfigs[\"ignore_header\"] = False\n# min_seq_length\n#     删除最小句长小于min_seq_length的训练数据\nconfigs[\"min_seq_length\"] = 3\n# file_type\n#     数据文件后缀名，可以为 \"txt\", \"tsv\", \"json\"\nconfigs[\"file_type\"] = \"\"\n\n# output_dir\nconfigs[\"output_dir\"] = \"\"\n\n# 预训练语言模型组件\n#     如果 pretrained_lm_name 不为 None, 以下部分不需要指定。\nconfigs[\"vocab_file\"] = \"vocab.txt\"\nconfigs[\"bert_config_file\"] = \"XXX_config.json\"\nconfigs[\"init_checkpoint\"] = \"XXX_model.ckpt\"\n\n# train parameters\nconfigs[\"max_seq_length\"] = 128\nconfigs[\"train_batch_size\"] = 8\nconfigs[\"learning_rate\"] = 2e-5\nconfigs[\"warmup_proportion\"] = 0.1\nconfigs[\"num_train_epochs\"] = 50\n\n# show training process\nconfigs[\"verbose\"] = 0\n\nmy_result = user_tasks(configs)\nprint(my_result)\n```\n\n结果的输出和保存形式与测评CLUE数据集时一致。\n\n### 阅读理解任务\n\n#### 快速测评CLUE数据集\n\n即将加入。\n\n#### 应用于自定义数据集\n\n即将j加入。\n\n### 命名实体识别任务\n\n#### 快速测评CLUE数据集\n\n即将加入。\n\n#### 应用于自定义数据集\n\n即将j加入。\n\n## 基准（预训练）模型\n\n**现已支持以下模型：**\n\n1. [BERT-base](https://github.com/google-research/bert)\n2. [BERT-wwm-ext](https://github.com/ymcui/Chinese-BERT-wwm)\n3. [albert_xlarge](https://github.com/brightmart/albert_zh)\n4. [albert_large](https://github.com/brightmart/albert_zh)\n5. [albert_base](https://github.com/brightmart/albert_zh)\n6. [albert_base_ext](https://github.com/brightmart/albert_zh)\n7. [albert_small](https://github.com/brightmart/albert_zh)\n8. [albert_tiny](https://github.com/brightmart/albert_zh)\n9. [roberta](https://github.com/brightmart/roberta_zh)\n10. [roberta_wwm_ext](https://github.com/ymcui/Chinese-BERT-wwm)\n11. [roberta_wwm_ext_large](https://github.com/ymcui/Chinese-BERT-wwm)\n\n即将加入：\n\n1. [XLNet_mid](https://github.com/ymcui/Chinese-PreTrained-XLNet)\n2. [ERNIE_base](https://github.com/PaddlePaddle/ERNIE)\n\n## 支持任务类型\n\n### 分类任务\n\n**现已支持以下数据集：**\n\n#### CLUEBenchmark任务\n\n参考：https://github.com/CLUEbenchmark/CLUE\n\n1. **AFQMC 蚂蚁金融语义相似度**\n\n   ```\n   数据量：训练集（34334）验证集（4316）测试集（3861）\n        例子：\n        {\"sentence1\": \"双十一花呗提额在哪\", \"sentence2\": \"里可以提花呗额度\", \"label\": \"0\"}\n        每一条数据有三个属性，从前往后分别是 句子1，句子2，句子相似度标签。其中label标签，1 表示sentence1和sentence2的含义类似，0表示两个句子的含义不同。\n   ```\n\n2. **TNEWS' 今日头条中文新闻（短文本）分类 Short Text Classificaiton for News**\n\n   ```\n   数据量：训练集(266,000)，验证集(57,000)，测试集(57,000)\n        例子：\n        {\"label\": \"102\", \"label_des\": \"news_entertainment\", \"sentence\": \"江疏影甜甜圈自拍，迷之角度竟这么好看，美吸引一切事物\"}\n        每一条数据有三个属性，从前往后分别是 分类ID，分类名称，新闻字符串（仅含标题）。\n   ```\n\n3. **IFLYTEK' 长文本分类 Long Text classification**\n\n   该数据集共有1.7万多条关于app应用描述的长文本标注数据，包含和日常生活相关的各类应用主题，共119个类别：\"打车\":0,\"地图导航\":1,\"免费WIFI\":2,\"租车\":3,….,\"女性\":115,\"经营\":116,\"收款\":117,\"其他\":118(分别用0-118表示)。\n\n   ```\n   数据量：训练集(12,133)，验证集(2,599)，测试集(2,600)\n       例子：\n       {\"label\": \"110\", \"label_des\": \"社区超市\", \"sentence\": \"朴朴快送超市创立于2016年，专注于打造移动端30分钟即时配送一站式购物平台，商品品类包含水果、蔬菜、肉禽蛋奶、海鲜水产、粮油调味、酒水饮料、休闲食品、日用品、外卖等。朴朴公司希望能以全新的商业模式，更高效快捷的仓储配送模式，致力于成为更快、更好、更多、更省的在线零售平台，带给消费者更好的消费体验，同时推动中国食品安全进程，成为一家让社会尊敬的互联网公司。,朴朴一下，又好又快,1.配送时间提示更加清晰友好2.保障用户隐私的一些优化3.其他提高使用体验的调整4.修复了一些已知bug\"}\n       每一条数据有三个属性，从前往后分别是 类别ID，类别名称，文本内容。\n   ```\n\n4. **CMNLI 语言推理任务 Chinese Multi-Genre NLI**\n\n   CMNLI数据由两部分组成：XNLI和MNLI。数据来自于fiction，telephone，travel，government，slate等，对原始MNLI数据和XNLI数据进行了中英文转化，保留原始训练集，合并XNLI中的dev和MNLI中的matched作为CMNLI的dev，合并XNLI中的test和MNLI中的mismatched作为CMNLI的test，并打乱顺序。该数据集可用于判断给定的两个句子之间属于蕴涵、中立、矛盾关系。\n\n   ```\n   数据量：train(391,782)，matched(12,426)，mismatched(13,880)\n       例子：\n       {\"sentence1\": \"新的权利已经足够好了\", \"sentence2\": \"每个人都很喜欢最新的福利\", \"label\": \"neutral\"}\n       每一条数据有三个属性，从前往后分别是 句子1，句子2，蕴含关系标签。其中label标签有三种：neutral，entailment，contradiction。\n   ```\n\n5. **COPA 因果推断-中文版 Choice of Plausible Alternatives**\n\n   自然语言推理的数据集，给定一个假设以及一个问题表明是因果还是影响，并从两个选项中选择合适的一个。遵照原数据集，我们使用了acc作为评估标准。\n\n   ```\n   数据量：训练集(400)，验证集(100)，测试集(500)\n       例子： \n       {\"idx\": 7, \"premise\": \"那人在杂货店买东西时打折了。\", \"choice0\": \"他向收银员打招呼。\", \"choice1\": \"他用了一张优惠券。\", \"question\": \"cause\", \"label\": 1}\n       其中label的标注，0表示choice0，1 表示choice1。原先的COPA数据集是英文的，我们使用机器翻译以及人工翻译的方法，并做了些微的用法习惯上的调整，并根据中文的习惯进行了标注，得到了这份数据集。\n   ```\n\n6. **WSC Winograd模式挑战中文版 The Winograd Schema Challenge,Chinese Version**\n\n   威诺格拉德模式挑战赛是图灵测试的一个变种，旨在判定AI系统的常识推理能力。参与挑战的计算机程序需要回答一种特殊但简易的常识问题：代词消歧问题，即对给定的名词和代词判断是否指代一致。\n\n   ```\n   数据量：训练集(532)，验证集(104)，测试集(143) \n   例子：\n   {\"target\": \n       {\"span2_index\": 28, \n        \"span1_index\": 0, \n        \"span1_text\": \"马克\", \n        \"span2_text\": \"他\"\n       }, \n        \"idx\": 0, \n        \"label\": \"false\", \n        \"text\": \"马克告诉皮特许多关于他自己的谎言，皮特也把这些谎言写进了他的书里。他应该多怀疑。\"\n   }\n       其中label标签，true表示指代一致，false表示指代不一致。\n   ```\n\n7. **CSL 论文关键词识别 Keyword Recognition**\n\n   中文科技文献数据集包含中文核心论文摘要及其关键词。 用tf-idf生成伪造关键词与论文真实关键词混合，生成摘要-关键词对，关键词中包含伪造的则标签为0。\n\n   ```\n   数据量：训练集(20,000)，验证集(3,000)，测试集(3,000)\n       例子： \n       {\"id\": 1, \"abst\": \"为解决传统均匀FFT波束形成算法引起的3维声呐成像分辨率降低的问题,该文提出分区域FFT波束形成算法.远场条件下,以保证成像分辨率为约束条件,以划分数量最少为目标,采用遗传算法作为优化手段将成像区域划分为多个区域.在每个区域内选取一个波束方向,获得每一个接收阵元收到该方向回波时的解调输出,以此为原始数据在该区域内进行传统均匀FFT波束形成.对FFT计算过程进行优化,降低新算法的计算量,使其满足3维成像声呐实时性的要求.仿真与实验结果表明,采用分区域FFT波束形成算法的成像分辨率较传统均匀FFT波束形成算法有显著提高,且满足实时性要求.\", \"keyword\": [\"水声学\", \"FFT\", \"波束形成\", \"3维成像声呐\"], \"label\": \"1\"}\n       每一条数据有四个属性，从前往后分别是 数据ID，论文摘要，关键词，真假标签。\n   ```\n\n#### ChineseGLUE任务\n\n参考：https://github.com/ChineseGLUE/ChineseGLUE\n\n1. **LCQMC口语化描述的语义相似度任务 Semantic Similarity Task**\n\n   输入是两个句子，输出是0或1。其中0代表语义不相似，1代表语义相似。\n\n   ```\n   数据量：训练集(238,766)，验证集(8,802)，测试集(12,500)\n       例子： \n        1.聊天室都有哪些好的 [分隔符] 聊天室哪个好 [分隔符] 1\n        2.飞行员没钱买房怎么办？ [分隔符] 父母没钱买房子 [分隔符] 0\n   ```\n\n2. **XNLI语言推断任务 Natural Language Inference**\n\n   跨语言理解的数据集，给定一个前提和假设，判断这个假设与前提是否具有蕴涵、对立、中性关系。\n\n   ```\n   数据量：训练集(392,703)，验证集(2,491)，测试集(5,011)\n       例子： \n        1.从 概念 上 看 , 奶油 收入 有 两 个 基本 方面 产品 和 地理 .[分隔符] 产品 和 地理 是 什么 使 奶油 抹 霜 工作 . [分隔符] neutral\n        2.我们 的 一个 号码 会 非常 详细 地 执行 你 的 指示 [分隔符] 我 团队 的 一个 成员 将 非常 精确 地 执行 你 的 命令  [分隔符] entailment\n\n       原始的XNLI覆盖15种语言（含低资源语言）。我们选取其中的中文，并将做格式转换，使得非常容易进入训练和测试阶段。\n   ```\n\n3. **INEWS 互联网情感分析任务 Sentiment Analysis for Internet News**\n\n   ```\n   数据量：训练集(5,356)，验证集(1,000)，测试集(1,000)     \n       例子：\n       1_!_00005a3efe934a19adc0b69b05faeae7_!_九江办好人民满意教育_!_近3年来，九江市紧紧围绕“人本教育、公平教育、优质教育、幸福教育”的目标，努力办好人民满意教育，促进了义务教育均衡发展，农村贫困地区办学条件改善。目前，该市特色教育学校有70所 ......\n       每行为一条数据，以_!_分割的个字段，从前往后分别是情感类别，数据id，新闻标题，新闻内容\n   ```\n\n5. **BQ 智能客服问句匹配 Question Matching for Customer Service**\n\n   该数据集是自动问答系统语料，共有120,000对句子对，并标注了句子对相似度值，取值为0或1（0表示不相似，1表示相似）。数据中存在错别字、语法不规范等问题，但更加贴近工业场景。\n\n   ```\n   数据量：训练集(100,000)，验证集(10,000)，测试集(10,000)\n       例子： \n        1.我存钱还不扣的 [分隔符] 借了每天都要还利息吗 [分隔符] 0\n        2.为什么我的还没有额度 [分隔符] 为啥没有额度！！ [分隔符] 1\n   ```\n\n6. **THUCNEWS 长文本分类 Long Text classification**\n\n   该数据集共有4万多条中文新闻长文本标注数据，共14个类别: \"体育\":0, \"娱乐\":1, \"家居\":2, \"彩票\":3, \"房产\":4, \"教育\":5, \"时尚\":6, \"时政\":7, \"星座\":8, \"游戏\":9, \"社会\":10, \"科技\":11, \"股票\":12, \"财经\":13。\n\n   ```\n   数据量：训练集(33,437)，验证集(4,180)，测试集(4,180)\n       例子： \n    11_!_科技_!_493337.txt_!_爱国者A-Touch MK3533高清播放器试用　　爱国者MP5简介:　　\"爱国者\"北京华旗资讯，作为国内知名数码产品制>造商。1993年创立于北京中关村，是一家致力于......\n    每行为一条数据，以_!_分割的个字段，从前往后分别是 类别ID，类别名称，文本ID，文本内容。\n   ```\n\n### 阅读理解任务\n\n即将加入。\n\n### 命名实体识别任务\n\n即将加入。\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ChineseGLUE/PyCLUE",
    "keywords": "",
    "license": "",
    "maintainer": "CLUE",
    "maintainer_email": "chineseGLUE@163.com",
    "name": "PyCLUE",
    "package_url": "https://pypi.org/project/PyCLUE/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyCLUE/",
    "project_urls": {
      "Homepage": "https://github.com/ChineseGLUE/PyCLUE"
    },
    "release_url": "https://pypi.org/project/PyCLUE/2019.12.5/",
    "requires_dist": [
      "tensorflow",
      "requests",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Python toolkit for Chinese Language Understanding Evaluation benchmark.",
    "version": "2019.12.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7267208,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52bc9290424fc7abe03345f49fa0c896258fc51c407a530d88f297e84fd9c5e4",
          "md5": "8a7dd7ba3bc249a34757175a031f1e94",
          "sha256": "f9f29b57cd8c776a0b3aac452f40f0051ffcecee00cc8d5683c2e5c2b9769692"
        },
        "downloads": -1,
        "filename": "PyCLUE-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a7dd7ba3bc249a34757175a031f1e94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 85526,
        "upload_time": "2020-05-10T05:53:58",
        "upload_time_iso_8601": "2020-05-10T05:53:58.189123Z",
        "url": "https://files.pythonhosted.org/packages/52/bc/9290424fc7abe03345f49fa0c896258fc51c407a530d88f297e84fd9c5e4/PyCLUE-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6525804f41402b928cbbbb02c803ef391c6f5bf4fbf0611721f55b3823be3f3b",
          "md5": "97864ee5d07f22c0edb7ffac40d15bee",
          "sha256": "77d5759d5fd6a3d34b7689e752e7f325e76928b21d6bb608d8189e4f9cbb1236"
        },
        "downloads": -1,
        "filename": "PyCLUE-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97864ee5d07f22c0edb7ffac40d15bee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69181,
        "upload_time": "2020-05-10T05:53:59",
        "upload_time_iso_8601": "2020-05-10T05:53:59.552105Z",
        "url": "https://files.pythonhosted.org/packages/65/25/804f41402b928cbbbb02c803ef391c6f5bf4fbf0611721f55b3823be3f3b/PyCLUE-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "292422f0b2eda510a251e1fd7a8a78b1558f2f11d43b96a6319c8d111a0d6ffb",
          "md5": "b575289c9921c818665b5c899bd4a1f9",
          "sha256": "2cebff3044df0bfbda8d8d342e8a051b15b44ec9ba404073261cb941da1e00be"
        },
        "downloads": -1,
        "filename": "PyCLUE-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b575289c9921c818665b5c899bd4a1f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 85525,
        "upload_time": "2020-05-18T03:25:36",
        "upload_time_iso_8601": "2020-05-18T03:25:36.404322Z",
        "url": "https://files.pythonhosted.org/packages/29/24/22f0b2eda510a251e1fd7a8a78b1558f2f11d43b96a6319c8d111a0d6ffb/PyCLUE-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18d2c627fd5808be2f477cd9afa71a545c3439dfbb7f74536b1b64370ea47ae5",
          "md5": "187b3962641f1fed220347796a890c74",
          "sha256": "0019bc85c7c6f80a5fc1452e9408a107f7e0e048d716603dc92eb46614707874"
        },
        "downloads": -1,
        "filename": "PyCLUE-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "187b3962641f1fed220347796a890c74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69202,
        "upload_time": "2020-05-18T03:25:37",
        "upload_time_iso_8601": "2020-05-18T03:25:37.849716Z",
        "url": "https://files.pythonhosted.org/packages/18/d2/c627fd5808be2f477cd9afa71a545c3439dfbb7f74536b1b64370ea47ae5/PyCLUE-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cf6dea2676de449a7d06e96ce7e6632da9ca3a6fe928ecd49db0535d6bacae8",
          "md5": "90b16cbf966d8dabdaf8b356461f8415",
          "sha256": "e45e37e59d784bc422589df1e12b5081f4acc2355aa540fd2c9b3ccc61f40b88"
        },
        "downloads": -1,
        "filename": "PyCLUE-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90b16cbf966d8dabdaf8b356461f8415",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 85552,
        "upload_time": "2020-05-18T10:21:41",
        "upload_time_iso_8601": "2020-05-18T10:21:41.960221Z",
        "url": "https://files.pythonhosted.org/packages/2c/f6/dea2676de449a7d06e96ce7e6632da9ca3a6fe928ecd49db0535d6bacae8/PyCLUE-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af4261de724aca9e361e84159e8d50c8f9bec05e3ff0a3825a709293025d9f73",
          "md5": "be8946bd2421f0483f9d28237914b731",
          "sha256": "b40e0db1e39439d0f8fe735c92edbf3829b0ab76980f58d32d8961a721f23a61"
        },
        "downloads": -1,
        "filename": "PyCLUE-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be8946bd2421f0483f9d28237914b731",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 69239,
        "upload_time": "2020-05-18T10:21:43",
        "upload_time_iso_8601": "2020-05-18T10:21:43.540152Z",
        "url": "https://files.pythonhosted.org/packages/af/42/61de724aca9e361e84159e8d50c8f9bec05e3ff0a3825a709293025d9f73/PyCLUE-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.12.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be97dde05bcbd0a1e7ebbc8659459686d485395eebbb6fa435253c1dd9498adc",
          "md5": "8d95c51142920b8764f672402b0bb24f",
          "sha256": "20f6b0797a795441d0660b003ccf2bd65a5fe087f2783c2b4a8000e69d555a01"
        },
        "downloads": -1,
        "filename": "PyCLUE-2019.12.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d95c51142920b8764f672402b0bb24f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8859,
        "upload_time": "2019-12-04T13:31:28",
        "upload_time_iso_8601": "2019-12-04T13:31:28.173660Z",
        "url": "https://files.pythonhosted.org/packages/be/97/dde05bcbd0a1e7ebbc8659459686d485395eebbb6fa435253c1dd9498adc/PyCLUE-2019.12.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec5b60de651674beabe75cd2b088b7055e7daff0dbcf3fbddfe3860af81ec296",
          "md5": "e164943aa6540172bdd1e9fec34cbd1e",
          "sha256": "91ba7a7f6840d1b759943f6d5fcdacdc60b4c54af75b487a87eadde25ebb753b"
        },
        "downloads": -1,
        "filename": "PyCLUE-2019.12.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e164943aa6540172bdd1e9fec34cbd1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 253038,
        "upload_time": "2019-12-04T13:31:31",
        "upload_time_iso_8601": "2019-12-04T13:31:31.445983Z",
        "url": "https://files.pythonhosted.org/packages/ec/5b/60de651674beabe75cd2b088b7055e7daff0dbcf3fbddfe3860af81ec296/PyCLUE-2019.12.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2019.12.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a3d29783e97d1bdc8288791a499f55caa1a6793de65dacd0a4edd15b56c2c6a",
          "md5": "7d945a362f2177e73ddea25e7892ad73",
          "sha256": "601a6a50862013b645be671375c1b07ca4bdceb5d9efaf0fa114fe420e21c69c"
        },
        "downloads": -1,
        "filename": "PyCLUE-2019.12.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d945a362f2177e73ddea25e7892ad73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9712,
        "upload_time": "2019-12-05T09:45:34",
        "upload_time_iso_8601": "2019-12-05T09:45:34.658874Z",
        "url": "https://files.pythonhosted.org/packages/6a/3d/29783e97d1bdc8288791a499f55caa1a6793de65dacd0a4edd15b56c2c6a/PyCLUE-2019.12.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5dea6117c78188d6953fa032e902a47b6fa2d1608f4f7deaaad59480b839e61",
          "md5": "77556c88172c17c4e9b9740763c1b9e0",
          "sha256": "67eaa950fe1ed2061075137741496a0b84c40dca2c43c1bc732ed1850179824f"
        },
        "downloads": -1,
        "filename": "PyCLUE-2019.12.5.tar.gz",
        "has_sig": false,
        "md5_digest": "77556c88172c17c4e9b9740763c1b9e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 556820,
        "upload_time": "2019-12-05T09:45:37",
        "upload_time_iso_8601": "2019-12-05T09:45:37.631008Z",
        "url": "https://files.pythonhosted.org/packages/c5/de/a6117c78188d6953fa032e902a47b6fa2d1608f4f7deaaad59480b839e61/PyCLUE-2019.12.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a3d29783e97d1bdc8288791a499f55caa1a6793de65dacd0a4edd15b56c2c6a",
        "md5": "7d945a362f2177e73ddea25e7892ad73",
        "sha256": "601a6a50862013b645be671375c1b07ca4bdceb5d9efaf0fa114fe420e21c69c"
      },
      "downloads": -1,
      "filename": "PyCLUE-2019.12.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d945a362f2177e73ddea25e7892ad73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9712,
      "upload_time": "2019-12-05T09:45:34",
      "upload_time_iso_8601": "2019-12-05T09:45:34.658874Z",
      "url": "https://files.pythonhosted.org/packages/6a/3d/29783e97d1bdc8288791a499f55caa1a6793de65dacd0a4edd15b56c2c6a/PyCLUE-2019.12.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5dea6117c78188d6953fa032e902a47b6fa2d1608f4f7deaaad59480b839e61",
        "md5": "77556c88172c17c4e9b9740763c1b9e0",
        "sha256": "67eaa950fe1ed2061075137741496a0b84c40dca2c43c1bc732ed1850179824f"
      },
      "downloads": -1,
      "filename": "PyCLUE-2019.12.5.tar.gz",
      "has_sig": false,
      "md5_digest": "77556c88172c17c4e9b9740763c1b9e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 556820,
      "upload_time": "2019-12-05T09:45:37",
      "upload_time_iso_8601": "2019-12-05T09:45:37.631008Z",
      "url": "https://files.pythonhosted.org/packages/c5/de/a6117c78188d6953fa032e902a47b6fa2d1608f4f7deaaad59480b839e61/PyCLUE-2019.12.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}