{
  "info": {
    "author": "Ettore Aquino",
    "author_email": "ettore@ettoreaquino.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/acopoweropt.svg)](https://badge.fury.io/py/acopoweropt)\n\n# Ant Colony Power Systems Optimizer\n\nThis library aims to provide a tool to obtain an optimal dispach of a Power System comprised of Thermal Generation Units. The approach combines the Ant Colony Optimizer with a non-linear solver provided by CVXOPT.\n\n> This is an under development library\n\n## Installation instructions\n\n### PyPi\nA pre-built binary wheel package can be installed using pip:\n```sh\npip install acopoweropt\n```\n\n### Poetry\nPoetry is a tool for dependency management and packaging in Python. `acopoweropt` can be installed in a poetry managed project:\n```sh\npoetry add acopoweropt\n```\n\n## Usage\nFrom a domain perspective, there should be a complete decoupling between an Ant Colony and a Power System, after all ants do not have knowledge of power systems. This approach, although more elegant, is far from trivial to be implemented, mainly because the __enviroment__ where the ants would look for food gets deeply entangled with the domain. For example, the modeling of pheromone matrix for the traveler salesman might not be adequate for a Power Systems Unit Commitment problem.\n\nFor that reason, the initial approach was to create two main _Entities_: A `Power System` and a `PowerColony`, where the first must be a Power System which can be solved by a mathematical method and the second should be an Ant Colony initialized to seek optimal results of a Power System problem.\n\nSince the dispatch of \"multi operative zone\" Thermal Generation Units (TGUs) bring non-linearities to the formulation, obtaining a global optimal financial dispach of the system is not a trivial task. The Ant Colony algorithm came in hand as a tool to iteractively seek a global optimal result without having to rely on brute computational force.\n\n### Defining Systems\nThe systems configuration should be defined in the [`systems.json`](systems.json) file. In the example provided, 3 systems where defined: 's10', 's15' and 's40', the names were chosen for convention and will be used by the `PowerSystem` class to initialize the desired configuration.\n\n\n#### Example\n\nThe code below samples a possible configuration which can be used to operate the system and solves this configuration.\n\n```python\nfrom acopoweropt import system\n\n# Instance a PowerSystem class from a configuration file where 's10` defines a system configuration\nPSystem = system.PowerSystem(name='s10')\n\n# Randomly selects a possible system operation (there are cases where more than a single unit can be operated in diferent configurations)\noperation = PSystem.sample_operation()\n\n# Solve the Economic Dispatch of the units of a specific configuration of the system, in this case, let's use the previously sampled one:\nsolution = PSystem.solve(operation=operation)\n\n# Prints total financial cost of the operation\nprint(\"Total Financial Cost: {}\".format(solution.get('Ft')))\n\n# Prints the operation with its power dispach values\nprint(solution.get('operation'))\n```\n\nAnother option is to bring your own sequence of operative zones (1 for each TGU) and build the operation data from it:\n\n```python\nfrom acopoweropt import system\n\n# Intance a PowerSystem class from a configuration file where 's10` defines a system configuration\nPSystem = system.PowerSystem(name='s10')\n\n# Define a sequence of operative zones for each of the 10 TGUs\nopzs = [2, 3, 1, 2, 1, 1, 3, 1, 1, 3]\n\n# Build a configuration that represents such sequence of operative zones\noperation = PSystem.get_operation(operative_zones=opzs)\n\n# Solve the Economic Dispatch of the specific configuration:\nsolution = PSystem.solve(operation=operation)\n\n# Prints total financial cost of the operation\nprint(\"Total Financial Cost: {}\".format(solution.get('Ft')))\n\n# Prints the operation with its power dispach values\nprint(solution.get('operation'))\n```\n\n### Defining Power Colonies\nAn Ant Colony should seek for a global optimal solution or \"the optimal source of food\". The algorithm was proposed by Marco Dorigo, check [Wiki](https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms) for more details.\n\n#### Example\n\nThe code below initializes a PowerColony with a desired PowerSystem as the \"environment\" for the ants to seek their food. Once instantiated, the PowerColony immediately unleashes their ants for a first seek for solutions, therefore `PowerColony.paths` and `PowerColony.pheromone` can be observed.\n\n```python\nfrom acopoweropt import colony, system\n\nPSystem = system.PowerSystem(name='s15')\nPColony = colony.PowerColony(n_ants=100,\n                            pheromone_evp_rate={'worst': 0.75, 'mean': 0.25, 'best': 0.05},\n                            power_system=PSystem)\n```\n\nNow a PowerColony can seek for optimal sources of food:\n```python\nPColony.seek(max_iter=20, power_system=PSystem, show_progress=True)\n\nax = PColony.paths.groupby('iteration').distance.min().plot(y='distance')\n\nPColony.create_pheromone_movie(duration=0.25)\n```\n\n## License\n\nSee the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ettoreaquino/acopoweropt",
    "keywords": "power systems,optimization,python,ant-colony",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "acopoweropt",
    "package_url": "https://pypi.org/project/acopoweropt/",
    "platform": "",
    "project_url": "https://pypi.org/project/acopoweropt/",
    "project_urls": {
      "Homepage": "https://github.com/ettoreaquino/acopoweropt",
      "Repository": "https://github.com/ettoreaquino/acopoweropt"
    },
    "release_url": "https://pypi.org/project/acopoweropt/0.3.1/",
    "requires_dist": [
      "pandas (>=1.2.4,<2.0.0)",
      "cvxopt (>=1.2.6,<2.0.0)",
      "matplotlib (>=3.4.2,<4.0.0)",
      "seaborn (>=0.11.1,<0.12.0)",
      "PyQt5 (>=5.15.4,<6.0.0)",
      "imageio (>=2.9.0,<3.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Ant Colony Power Systems Optimizer",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10680837,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fa800e754a39147aea594fbcb744a08d469aa878f2b1fe3ac62b6b9d7344448",
          "md5": "065b82f3ee4fe50ba0c14c5f867aecdc",
          "sha256": "5d230d2ef251feaff348416004ae37d544a9165f330dc7ce8149c136ec34c3ed"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "065b82f3ee4fe50ba0c14c5f867aecdc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 2914,
        "upload_time": "2021-06-12T18:42:06",
        "upload_time_iso_8601": "2021-06-12T18:42:06.037762Z",
        "url": "https://files.pythonhosted.org/packages/5f/a8/00e754a39147aea594fbcb744a08d469aa878f2b1fe3ac62b6b9d7344448/acopoweropt-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72bd4e76d1b7a652e13f37b1a7ed04438d167ea7ac07b5d1ae259064c6bf0589",
          "md5": "115e5b72e0bb671c5f7c658d00952055",
          "sha256": "780ea3183017e7a5c1eea463e53973e9426e37013fba1ad0c8639c265ed46300"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "115e5b72e0bb671c5f7c658d00952055",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 3278,
        "upload_time": "2021-06-12T18:42:07",
        "upload_time_iso_8601": "2021-06-12T18:42:07.643172Z",
        "url": "https://files.pythonhosted.org/packages/72/bd/4e76d1b7a652e13f37b1a7ed04438d167ea7ac07b5d1ae259064c6bf0589/acopoweropt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ce5acd089e6af6b5d09efb289e165116831635b84284be06d778e277231c693",
          "md5": "e768b7085037f7be0e29de969e3b58a8",
          "sha256": "cb4e439c4d03cd5965f2f7a6574390400cfcca61f00204aba8de102c887f829c"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e768b7085037f7be0e29de969e3b58a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 5749,
        "upload_time": "2021-06-14T01:29:20",
        "upload_time_iso_8601": "2021-06-14T01:29:20.655789Z",
        "url": "https://files.pythonhosted.org/packages/2c/e5/acd089e6af6b5d09efb289e165116831635b84284be06d778e277231c693/acopoweropt-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa5251193ede67d35d264376e2e78f9c08a450ae6deaaacdc407085ba2d750a9",
          "md5": "536c7c5923ffe70dcb0702739d3ec8bf",
          "sha256": "887c9b9a542e324e57f1cc8bf960a3f1e71bcda4c43025605cbdc948a5c03878"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "536c7c5923ffe70dcb0702739d3ec8bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 6372,
        "upload_time": "2021-06-14T01:29:22",
        "upload_time_iso_8601": "2021-06-14T01:29:22.354635Z",
        "url": "https://files.pythonhosted.org/packages/aa/52/51193ede67d35d264376e2e78f9c08a450ae6deaaacdc407085ba2d750a9/acopoweropt-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7eb9bb75f9ed6c75333c53722c10a7499f2ad9ad2760835749f37b5e0471464",
          "md5": "50d34e7d4e9385e334d80cdc51f739a8",
          "sha256": "78f3e3043f5505e6477c2c76845105fc08da98ef1eb12ed7af0560b8c3766108"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50d34e7d4e9385e334d80cdc51f739a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7116,
        "upload_time": "2021-06-15T00:46:38",
        "upload_time_iso_8601": "2021-06-15T00:46:38.818885Z",
        "url": "https://files.pythonhosted.org/packages/c7/eb/9bb75f9ed6c75333c53722c10a7499f2ad9ad2760835749f37b5e0471464/acopoweropt-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21a2f5567df16bc0f544e07937f21b0b6db5de4edd928f5940ae0bac54a203a5",
          "md5": "b5b26c13c333952d52ad58126359c5c9",
          "sha256": "562a49df06f7e234c3bf7d0bc5c1d52359bd13a4e6498c6ac8e982f2344fc143"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5b26c13c333952d52ad58126359c5c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8847,
        "upload_time": "2021-06-15T00:46:40",
        "upload_time_iso_8601": "2021-06-15T00:46:40.718586Z",
        "url": "https://files.pythonhosted.org/packages/21/a2/f5567df16bc0f544e07937f21b0b6db5de4edd928f5940ae0bac54a203a5/acopoweropt-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05b51bc975dff9a6badebf6b4f61b005bed237505bc1b05d45828e0ee8c69c2d",
          "md5": "d598511aa1f47e9ee09034324fdcbcc1",
          "sha256": "857ffe5dc78bac18d7805ab311c3f2f41c9e42bddf7886f238ef731a5b08b0a0"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d598511aa1f47e9ee09034324fdcbcc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7916,
        "upload_time": "2021-06-16T04:37:32",
        "upload_time_iso_8601": "2021-06-16T04:37:32.405779Z",
        "url": "https://files.pythonhosted.org/packages/05/b5/1bc975dff9a6badebf6b4f61b005bed237505bc1b05d45828e0ee8c69c2d/acopoweropt-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd35f2cf035c18ea2cf988fe7cc6f5c5a559de6acfb2d9cbcca5200aa864ab08",
          "md5": "e33491ee4584ce71d6e0245ff5fd6a49",
          "sha256": "274de4729a0df9f5ca778f55bc1ef26f379809edbbc2c2ee44a75654bc6b123d"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e33491ee4584ce71d6e0245ff5fd6a49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 10001,
        "upload_time": "2021-06-16T04:37:33",
        "upload_time_iso_8601": "2021-06-16T04:37:33.782789Z",
        "url": "https://files.pythonhosted.org/packages/fd/35/f2cf035c18ea2cf988fe7cc6f5c5a559de6acfb2d9cbcca5200aa864ab08/acopoweropt-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "727c94e62abf3f367592e2d0f769c5ce2aebc76af42481adaa0653a1218c5ec3",
          "md5": "8d9de6a4931f72c20af5585b2da5b3ea",
          "sha256": "28cbd45d35df7b1a0d06b760ec45daa9025d66145db1106a6e857fa8d27139b4"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d9de6a4931f72c20af5585b2da5b3ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 10074,
        "upload_time": "2021-06-18T03:17:39",
        "upload_time_iso_8601": "2021-06-18T03:17:39.622850Z",
        "url": "https://files.pythonhosted.org/packages/72/7c/94e62abf3f367592e2d0f769c5ce2aebc76af42481adaa0653a1218c5ec3/acopoweropt-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3724746d9a83d681d6ef2d2f71b23510881d99064c290b2dafdbb847143bc1e9",
          "md5": "bc728920fd1f384541b2f9bffb1c50d8",
          "sha256": "b9d1321ca57f8c57b727374814923b4e96cefcda9f892317863e4fb94ad81317"
        },
        "downloads": -1,
        "filename": "acopoweropt-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc728920fd1f384541b2f9bffb1c50d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12229,
        "upload_time": "2021-06-18T03:17:41",
        "upload_time_iso_8601": "2021-06-18T03:17:41.436754Z",
        "url": "https://files.pythonhosted.org/packages/37/24/746d9a83d681d6ef2d2f71b23510881d99064c290b2dafdbb847143bc1e9/acopoweropt-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "727c94e62abf3f367592e2d0f769c5ce2aebc76af42481adaa0653a1218c5ec3",
        "md5": "8d9de6a4931f72c20af5585b2da5b3ea",
        "sha256": "28cbd45d35df7b1a0d06b760ec45daa9025d66145db1106a6e857fa8d27139b4"
      },
      "downloads": -1,
      "filename": "acopoweropt-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d9de6a4931f72c20af5585b2da5b3ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 10074,
      "upload_time": "2021-06-18T03:17:39",
      "upload_time_iso_8601": "2021-06-18T03:17:39.622850Z",
      "url": "https://files.pythonhosted.org/packages/72/7c/94e62abf3f367592e2d0f769c5ce2aebc76af42481adaa0653a1218c5ec3/acopoweropt-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3724746d9a83d681d6ef2d2f71b23510881d99064c290b2dafdbb847143bc1e9",
        "md5": "bc728920fd1f384541b2f9bffb1c50d8",
        "sha256": "b9d1321ca57f8c57b727374814923b4e96cefcda9f892317863e4fb94ad81317"
      },
      "downloads": -1,
      "filename": "acopoweropt-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bc728920fd1f384541b2f9bffb1c50d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 12229,
      "upload_time": "2021-06-18T03:17:41",
      "upload_time_iso_8601": "2021-06-18T03:17:41.436754Z",
      "url": "https://files.pythonhosted.org/packages/37/24/746d9a83d681d6ef2d2f71b23510881d99064c290b2dafdbb847143bc1e9/acopoweropt-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}