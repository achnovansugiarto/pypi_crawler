{
  "info": {
    "author": "David Gibbs,Michael Strasser",
    "author_email": "gibbsdavidl@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# gssnng\n\n**Try it out!  ===>>>**  [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/Gibbsdavidl/gssnng/blob/main/notebooks/gssnng_quick_start.ipynb)\n\n**See the paper ===>>>** [bioRxiv](https://www.biorxiv.org/content/10.1101/2022.11.29.518384v1)\n\nGene Set Scoring on the Nearest Neighbor Graph (gssnng) for Single Cell RNA-seq (scRNA-seq).\n\nThe problem:  The sparsity of scRNA-seq data creates a poor overlap with many gene sets, \nwhich in turn makes gene set scoring difficult. \n\nThe GSSNNG method is based on using the nearest neighbor graph of cells for data smoothing. This essentially creates \nmini-pseudobulk expression profiles for each cell, which can be scored by using single sample gene set scoring \nmethods often associated with bulk RNA-seq. \n\nNearest neighbor graphs (NNG) are constructed based on user defined groups (see the 'groupby' parameter below). \nThe defined groups can be processed in parallel, speeding up the calculations. For example, a NNG could be \nconstructed within each cluster or jointly by cluster *and* sample. Smoothing can be performed using either the \nadjacency matrix (all 1s) or the weighted graph to give less weight to more distant cells.\n\nThis package works with AnnData objects stored as h5ad files. Expression values are taken from adata.X.\nFor creating groups, up to four categorical variables can be used, which are found in the adata.obs table.\n\nScoring functions work with ranked or unranked data (**\"your mileage may vary\"**):\n\nSome method references (singscore, RBO) are below.\n\n```\n    singscore:            Normalised mean (median centered) ranks (requires ranked data)\n    \n    ssgsea:               The well known single sample GSEA.\n        \n    rank_biased_overlap:  RBO, Weighted average of agreement between sorted ranks and gene set.\n\n    robust_std:     Med(x-med / mad), median of robust standardized values (recommend unranked).\n    \n    mean_z:         Mean( (x - mean)/stddv ), average z score. (recommend unranked).\n    \n    average_score:  Mean ranks or counts     \n    \n    median_score:   Median of counts or ranks\n    \n    summed_up:      Sum up the ranks or counts.\n```\n\n## Installation from PyPI\n```\npip3 install gssnng\n```\n\n\n## Installation from GitHub\n\n```\n# also gets you the demo data and some gene sets.\ngit clone https://github.com/Gibbsdavidl/gssnng\n\npip install -e gssnng\n```\n\n## Example script\n\nCopy the script out from the cloned repo and run, check the paths if you get an error.\n\n```\n cp gssnng/gssnng/test/example_script.py  .\n \n python3.8 test_gssnng.py\n```\n\n\n## Usage \n\nSee gssnng/notebooks for examples on all methods\n\n1. Read in an AnnData object using scanpy (an h5ad file).\n\n2. Get your gene sets formatted as a .gmt file. (default is undirected, can take _UP,  _DN, and split gene sets _UP+_DN)\n\n3. Score cells, each gene set will show up as a column in adata.obs.\n\n```\nfrom gssnng import score_cells\n\nq = sc.read_h5ad('gssnng/gssnng/test/data/pbmc3k_processed.h5ad')\n\nsc.pp.neighbors(q, n_neighbors=32)\n\nscore_cells.with_gene_sets(adata=q,                            # AnnData object\n                            gene_set_file='cibersort_lm22.gmt', # File path of gene sets\n                            groupby='louvain',                  # Will sample neighbors within this group\n                            smooth_mode='connectivity',         # Smooths matrix using distance weights from NN graph.\n                            recompute_neighbors=0,              # Rebuild nearest neighbor graph with groups, 0 turns off function\n                            score_method='singscore',           # Method of scoring\n                            method_params={'normalization':'theoretical'},  # Special parameters for some methods \n                            samp_neighbors=27,                  # Number of sampled neighbors for pseudobulk\n                            ranked=True,                        # Use ranked data, True or False\n                            cores=8)                            # Groups are scored in parallel.\n    \n\nsc.pl.umap(q, color=['louvain','T.cells.CD8.up'], wspace=0.35)\n```\n\n## Parameters\n\n    adata:  AnnData object from scanpy.read_*\n    AnnData containing the cells to be scored\n\n    gene_set_file: str[path]\n    The gene set file with list of gene sets, gmt, one per line. See `this definition <https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats#GMT:_Gene_Matrix_Transposed_file_format_.28.2A.gmt.29>`_ .\n\n    groupby: [str, list, dict]\n    either a column label in adata.obs, and all categories taken, or a dict specifies one group.\n    SEE DESCRIPTION BELOW\n\n    smooth_mode: \"adjacency\" or \"connectivity\",\n    Dictates how to use the neighborhood graph.\n    `adjacency` weights all neighbors equally, `connectivity` weights close neighbors more\n\n    recompute_neighbors: int\n    should neighbors be recomputed within each group, 0 for no, >0 for yes and specifies N\n\n    score_method: str\n    which scoring method to use\n\n    method_params: dict\n    python dict with XGBoost params.\n\n    samp_neighbors: int\n    number of neighbors to sample\n\n    ranked: bool\n    whether the gene expression counts should be rank ordered\n\n    cores: int\n    number of parallel processes to work through groupby groups\n\n## Groupby\n\nThe specific neighborhood for each cell can be controlled by using the groupby parameter. In the example\nabove, by setting groupby='louvain', only cells within a louvain cluster will be considered as being part of the\nneighborhood and will available for sampling.\nGroupby specifies a column name that's found in the AnnData.obs table, and it can also take a list of column names.\nIn that case, cells will be grouped as the intersection of categories. For example, using groupby=['louvain','phenotype']\nwill take cells that are first in a given louvain cluster and then also in a given phenotype group. By also setting\nthe recompute_neighbors, the nearest neighbor graph is recomputed within this subset of cells. Controlling the\nneighborhood leads to more controlled smoothing of the count matrix and is more suitable for downstream comparisons.\n\n## Gene sets\n\nWe are following the MSigDB nomenclature, where gene sets default to undirected, but can be marked with the suffix \"_UP\"\n(example: CD8_signature_UP or CD8.signature.up).  In this case, when data is ranked, genes with higher expression have larger ranks. If the \ngene set has suffix \"_DN\" (example: CD8_signature_DN or CD8.signature.dn), then lowest expressed genes have largest ranks. In the \nuse of singscore or Z scores, the undirected case is based on absolute values, so either direction, in the extreme, will result in a large score.\n\n## Method options\n\nSome methods have some additional options. They are passed as a dictionary, method_params={param_name: param_value}.\n\n    singscore:  {'normalization': 'theoretical'}, {'normalization': 'standard'}\n\nThe singscore manuscript describes the theoretical method of standarization which involves determining the theoretical max and minimum ranks for the given gene set.\n\n    ssGSEA: {'omega': 0.25}\n    \nThe ssGSEA method uses this parameter as a exponent to the ranks.\n\n    rank_biased_overlap:  {'rbo_depth': n}  (n: int)\n\nHere, n is the depth that is decended down the ranks, where at each step, the overlap with the gene set is measured and added to the score.\n\n*The following methods do not have additional options.*\n\n    robust_std\n    mean_z\n    average_score\n    median_score\n    summed_up\n\n## References\n\nrank biased overlap:  https://arxiv.org/pdf/1408.3587.pdf\n\nsingscore:  https://pubmed.ncbi.nlm.nih.gov/30400809/\n\nssGSEA: https://gsea-msigdb.github.io/ssGSEA-gpmodule/v10/index.html\n\nanndata: https://anndata.readthedocs.io/en/latest/\n\nMSigDB: https://www.gsea-msigdb.org/gsea/msigdb/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gibbsdavidl/gssnng",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gssnng",
    "package_url": "https://pypi.org/project/gssnng/",
    "platform": null,
    "project_url": "https://pypi.org/project/gssnng/",
    "project_urls": {
      "Homepage": "http://github.com/gibbsdavidl/gssnng"
    },
    "release_url": "https://pypi.org/project/gssnng/0.2.6.2/",
    "requires_dist": [
      "pandas",
      "numpy",
      "matplotlib",
      "seaborn",
      "scipy",
      "statsmodels",
      "scanpy",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "Gene Set Scoring on the Nearest Neighbor Graph (gssnng)",
    "version": "0.2.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17371697,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ecbf6abd3a8aa290c6ce733a22cbe39753737c09dc46a99c5c36eae37c60f98",
          "md5": "5e7e4dfeaf0ba0134bc05251f073253c",
          "sha256": "5e8e487693ccb8c14fc44bf3b87cd7627593d1181be09b750da1432c2281abd9"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e7e4dfeaf0ba0134bc05251f073253c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15130,
        "upload_time": "2022-10-29T00:28:16",
        "upload_time_iso_8601": "2022-10-29T00:28:16.725159Z",
        "url": "https://files.pythonhosted.org/packages/8e/cb/f6abd3a8aa290c6ce733a22cbe39753737c09dc46a99c5c36eae37c60f98/gssnng-0.2.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19658eba8221f8a2483937e7a95891337218a056615c87b3344c2757c56f549d",
          "md5": "61be9333d0d374b563df959347b0c0d5",
          "sha256": "3190bf4904b86917fef2ff643fb7c2e47d4e0b243c9483dd10b6aec83cab0b35"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "61be9333d0d374b563df959347b0c0d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24597084,
        "upload_time": "2022-10-29T00:28:30",
        "upload_time_iso_8601": "2022-10-29T00:28:30.891079Z",
        "url": "https://files.pythonhosted.org/packages/19/65/8eba8221f8a2483937e7a95891337218a056615c87b3344c2757c56f549d/gssnng-0.2.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "461528d8e9a0c14c49803fa105c6b215ae4ebb5cc01ca511d88bacc0fa225831",
          "md5": "f14710086beb007726ad3a680ced1c82",
          "sha256": "4e885ef9c67f615a21a8972bcac21cb6a8386a497eef497be1d5bfcc98f3445c"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f14710086beb007726ad3a680ced1c82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16029,
        "upload_time": "2023-03-21T00:57:50",
        "upload_time_iso_8601": "2023-03-21T00:57:50.365051Z",
        "url": "https://files.pythonhosted.org/packages/46/15/28d8e9a0c14c49803fa105c6b215ae4ebb5cc01ca511d88bacc0fa225831/gssnng-0.2.5-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bfd7f00092f8a865a9560e1ad6f1b52967b27e04b08a49b124007fb346280f5",
          "md5": "2f0c7c51fb40cf719f1b2ccf10e09be8",
          "sha256": "7e2d288984d0cf50f8e4eba5f70e2491620afd0b15474316b3e76b4f729027cf"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2f0c7c51fb40cf719f1b2ccf10e09be8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17379,
        "upload_time": "2023-03-21T00:57:58",
        "upload_time_iso_8601": "2023-03-21T00:57:58.299789Z",
        "url": "https://files.pythonhosted.org/packages/8b/fd/7f00092f8a865a9560e1ad6f1b52967b27e04b08a49b124007fb346280f5/gssnng-0.2.5.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ee07fbe5ffd03db66a859e668e3227f7eeaedc94e8997edd11b29fce84f9c12",
          "md5": "0d50f933c427c11fdec185dbf1819e6a",
          "sha256": "db301b82df578132e62611987826e036ca21f9a75b995a190799e0c0618fc19f"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d50f933c427c11fdec185dbf1819e6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16030,
        "upload_time": "2023-03-21T00:57:52",
        "upload_time_iso_8601": "2023-03-21T00:57:52.059545Z",
        "url": "https://files.pythonhosted.org/packages/7e/e0/7fbe5ffd03db66a859e668e3227f7eeaedc94e8997edd11b29fce84f9c12/gssnng-0.2.6-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e0e7fdd849a8ebf7c8e27f601c83f5cb28d77adad63848e9f3725be8dd68029",
          "md5": "b2218326f155da154c0be0297438f783",
          "sha256": "ba2bcf25dd92f6aca043f3bf62c9e872041ab07ea3f319cea87b104c153b1666"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b2218326f155da154c0be0297438f783",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17372,
        "upload_time": "2023-03-21T00:58:04",
        "upload_time_iso_8601": "2023-03-21T00:58:04.749869Z",
        "url": "https://files.pythonhosted.org/packages/1e/0e/7fdd849a8ebf7c8e27f601c83f5cb28d77adad63848e9f3725be8dd68029/gssnng-0.2.6.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.2.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e00abee2bec022829c080375cee189a5d53353596c0c4701faea2d3d3a3a21bf",
          "md5": "3c1d688c179a70fab11c28d6f53d2664",
          "sha256": "c1a848cac6242f0ecfad3511b63b7b31040c70e51b904ad5b1e967823002f923"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c1d688c179a70fab11c28d6f53d2664",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16050,
        "upload_time": "2023-03-21T00:57:54",
        "upload_time_iso_8601": "2023-03-21T00:57:54.152941Z",
        "url": "https://files.pythonhosted.org/packages/e0/0a/bee2bec022829c080375cee189a5d53353596c0c4701faea2d3d3a3a21bf/gssnng-0.2.6.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81fd463cf3ff6bec2081fe19663ca24adcc7b1aab4a9de2a773d14a90522ac2f",
          "md5": "a20e0f9118849be05d24f874f8422172",
          "sha256": "7f762de5d7884210d6127154b030ab6f88b0674335b0f9774ef667ce9f3ed887"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a20e0f9118849be05d24f874f8422172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17377,
        "upload_time": "2023-03-21T00:58:00",
        "upload_time_iso_8601": "2023-03-21T00:58:00.515038Z",
        "url": "https://files.pythonhosted.org/packages/81/fd/463cf3ff6bec2081fe19663ca24adcc7b1aab4a9de2a773d14a90522ac2f/gssnng-0.2.6.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.2.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ff4b206072a1a201386ccb042e6c5e71d95b73b140b061b36cdef039c156631",
          "md5": "de8f59c9490270239fc3af9f53196bb4",
          "sha256": "b125f85040e38c382fc82d2289610cc877aa88ce2371cf7184a035cbf5d14f4c"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.6.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de8f59c9490270239fc3af9f53196bb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16052,
        "upload_time": "2023-03-21T00:57:56",
        "upload_time_iso_8601": "2023-03-21T00:57:56.302265Z",
        "url": "https://files.pythonhosted.org/packages/3f/f4/b206072a1a201386ccb042e6c5e71d95b73b140b061b36cdef039c156631/gssnng-0.2.6.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be2a31c4d2c5602b26937fe681dcd8b67f16a8caa1d7293b20d5c7236abceb42",
          "md5": "ffd00567bf2e95811755809cba2757be",
          "sha256": "e88f0e1bb8cd62dfc2ba924c82d35b14a52f3df390943b183006e579e769d88b"
        },
        "downloads": -1,
        "filename": "gssnng-0.2.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ffd00567bf2e95811755809cba2757be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17375,
        "upload_time": "2023-03-21T00:58:02",
        "upload_time_iso_8601": "2023-03-21T00:58:02.692225Z",
        "url": "https://files.pythonhosted.org/packages/be/2a/31c4d2c5602b26937fe681dcd8b67f16a8caa1d7293b20d5c7236abceb42/gssnng-0.2.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ff4b206072a1a201386ccb042e6c5e71d95b73b140b061b36cdef039c156631",
        "md5": "de8f59c9490270239fc3af9f53196bb4",
        "sha256": "b125f85040e38c382fc82d2289610cc877aa88ce2371cf7184a035cbf5d14f4c"
      },
      "downloads": -1,
      "filename": "gssnng-0.2.6.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "de8f59c9490270239fc3af9f53196bb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16052,
      "upload_time": "2023-03-21T00:57:56",
      "upload_time_iso_8601": "2023-03-21T00:57:56.302265Z",
      "url": "https://files.pythonhosted.org/packages/3f/f4/b206072a1a201386ccb042e6c5e71d95b73b140b061b36cdef039c156631/gssnng-0.2.6.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be2a31c4d2c5602b26937fe681dcd8b67f16a8caa1d7293b20d5c7236abceb42",
        "md5": "ffd00567bf2e95811755809cba2757be",
        "sha256": "e88f0e1bb8cd62dfc2ba924c82d35b14a52f3df390943b183006e579e769d88b"
      },
      "downloads": -1,
      "filename": "gssnng-0.2.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ffd00567bf2e95811755809cba2757be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17375,
      "upload_time": "2023-03-21T00:58:02",
      "upload_time_iso_8601": "2023-03-21T00:58:02.692225Z",
      "url": "https://files.pythonhosted.org/packages/be/2a/31c4d2c5602b26937fe681dcd8b67f16a8caa1d7293b20d5c7236abceb42/gssnng-0.2.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}