{
  "info": {
    "author": "Daichi Yoshikawa",
    "author_email": "daichi.yoshikawa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "dnnet\n=====\nImplementation of Deep Neural Network with numpy.\n**Now dnnet can run with GPU through cupy.**\n\ndnnet provides high-level API to define and run neural network model.\nUser can turn on/off GPU layer-wise, that is, you can compute convolution layer with GPU, activation layer with CPU, and dropout layer with CPU, for example.\n\n# Table of Contents\n* Brief tour of dnnet; Introduce small examples, supported methodologies\n* Installation\n* Example; Run sample scripts\n* Use in your project\n\n\n# Brief tour of dnnet\n## Quick glance of usage\n\nUser can creates instance of NeuralNetwork, add layer one by one,<br>\nfinalize model, set optimizer, execute model fitting, and save model.\n\nIn the below, some arguments are not specified to simplify the example.\n```\nfrom dnnet.neuralnet import NeuralNetwork\nfrom dnnet.training.optimizer import AdaGrad\nfrom dnnet.training.weight_initialization import DefaultInitialization, He\nfrom dnnet.training.loss_function import MultinomialCrossEntropy\nfrom dnnet.layers.activation import Activation, ActivationLayer\nfrom dnnet.layers.affine import AffineLayer\nfrom dnnet.layers.batch_norm import BatchNormLayer\nfrom dnnet.layers.convolution import ConvolutionLayer\nfrom dnnet.layers.dropout import DropoutLayer\n\n\n# Load x, y here\n\nmodel = NeuralNetwork(input_shape=(1, 28, 28), dtype=np.float32)\n\nmodel.add(ConvolutionLayer(filter_shape=(32, 3, 3))\nmodel.add(BatchNormLayer())\nmodel.add(ActivationLayer(activation=Activation.Type.relu))\nmodel.add(DropoutLayer(drop_ratio=0.25))\n\nmodel.add(AffineLayer(output_shape=10)\nmodel.add(ActivationLayer(activation=Activation.Type.softmax)\nmodel.compile()\n\noptimizer = AdaGrad(learning_rate=1e-3, weight_decay=1e-3)\nlearning_curve = model.fit(\n    x=x, y=y, epochs=5, batch=size=100, optimizer=optimizer,\n    loss_function=MultinomialCrossEntropy())\nmodel.save(path='./data/output', name='my_cnn.dat')\n```\n\nUser can also load model, and predict output.\n```\nmodel.load(path='./data/output', name='my_cnn.dat')\ny = model.predict(x)\n```\n\nGPU is easily enabled. Do the follows at the top of your script.\n```\nfrom dnnet.config import Config\nConfig.enable_gpu()\n```\n\nIf GPU is enabled but you'd like to turn it off for some specific layers, you can use force_cpu flag. Here, ConvolutionLayer and AffineLayer don't have the flag.\n```\nfrom dnnet.config import Config\nConfig.enable_gpu()\n\n# Do something here.\n\n# AffineLayer uses GPU.\nmodel.add(AffineLayer(output=512, weight_initialization=He()))\n# BatchNormLayer uses CPU regardless of Config.enable_gpu().\nmodel.add(BatchNormLayer(force_cpu=True))\n```\n\n\n## Supported Methods\n### Layers\n* Affine\n* Convolution\n* Activation\n* Pool\n* Batch Normalization\n* Dropout\n\n### Activation Functions\n* Sigmoid\n* ReLU\n* ELU\n* Tanh\n* Softmax\n\n### Optimization Methods\n* SGD\n* Momentum\n* AdaGrad\n* Adam\n* AdaDelta\n* RMSProp\n\n### Weight Initialization Methods\n* Xavier's method\n* He's method\n* Default\n\n### Loss Functions\n* MultinomialCrossEntropy for multinomial classification.\n* BinomialCrossEntropy for binary classification.\n* SquaredError for regression.\n\n\n# Installation\n## Requisites\n* python 3.4 or later\n* numpy 1.12.0 or later\n* matplotlib\n\nIf you'd like to use GPU, you need to install the follows additionally.\n* CUDA (eg. CUDA 10.0)\n* CuDNN (eg. CuDNN7.6.5)\n* cupy (eg. cupy-cuda100==7.0.0)\n\n## Install dnnet by pip.\n```\npip install dnnet\n```\n\n## Install dnnet from source.\ndnnet doesn't require any complicated path-settings.<br>\nYou just download scripts from github, place it wherever you like,<br>\nand you add some lines like below in your scripts.\n\n```\nimport sys\nsys.path.append('<path-to-dnnet-root-dir>')\n\nfrom dnnet.neuralnet import NeuralNetwork\n```\n\n## Setup environment from scratch (Optional)\nIn this section, setting up python environment from scratch is described.<br>\n\"From scratch\" means that you're supposed to use brand-new computer,<br>\nno python packages (even python itself!) and relevant libraries are installed.\n\nIt may also be useful when you start new python project. In this case,<br>\nyou will partially execute the following steps.\n\n### Setup Python Virtual Environment\n#### Assumption\n* Use python3\n* Make directory for pyenv in \"/home/<user-name>/Documents\"\n* Root directory of your python virtual env is in \"/home/<user-name>/Work/py352_ws\"\n* \"/home/<user-name>/Work/py352_ws/\" is your working directory\n\n#### Setup procedure\n* Install required packages\n```\n$ sudo apt-get install git gcc make openssl libssl-dev libbz2-dev libreadline-dev libsqlite3-dev\n```\n\n* Install tkinter(This is required to use matplotlib in virtualenv)\n```\n$ sudo apt-get install python3-tk python-tk tk-dev\n```\n\n* Install pyenv\n```\n   $ cd ~\n   $ git clone git://github.com/yyuu/pyenv.git ./pyenv\n   $ mkdir -p ./pyenv/versions ./pyenv/shims\n```\n\n* Set paths\nAdd the following description in ~/.bashrc\n```\nexport PYENV_ROOT=${HOME}/Documents/pyenv\nif [ -d \"${PYENV_ROOT}\" ]; then\n  export PATH=${PYENV_ROOT}/bin:$PATH\n  eval \"$(pyenv init -)\"\nfi\n```\n\nAnd then execute the follows.\n```\n   $ exec $SHELL -l\n   $ . ~/.bashrc\n```\n\n* Install pyenv-virtualenv\n```\n   $ cd $PYENV_ROOT/plugins\n   $ git clone git://github.com/yyuu/pyenv-virtualenv.git\n```\n\n* Install python 3.5.2\n```\n   $ pyenv install 3.5.2\n```\n\n* Setup local pyenv\n```\n   $ mkdir -p ~/Work/py352_ws\n   $ pyenv virtualenv 3.5.2 <name of this environment>\n```\n<name of this environment> can be like py352_env, python3_env, or anything you like.<br>\nHere, it's assumed that you named the environment as \"py352_env\".\n```\n   $ cd ~/Work/py352_ws\n   $ pyenv local py352_env\n   $ pip install --upgrade pip\n```\n\n\n# Example\n## MNIST\n* Run neural network for mnist.\n```\ncd <path-to-dnnet>/examples/mnist\npython mnist.py\n```\n\nIf you get an error \"ImportError: Python is not installed as a framework.\",\nit might be because of matplotlib issue.(This happened to me when working with MacOS.)\n\nIn the case, please try the follow.\n```\ncd ~/.matplotlib\necho \"backend: TkAgg\" >> matplotlibrc\n```\n\n\n# Usage in your project\n## If you pip installed dnnet\n```\nfrom dnnet.neuralnet import NeuralNetwork\n```\n\n## If you git cloned dnnet\n```\nimport sys\nsys.path.append('<path-to-dnnet-root-dir>')\n\nfrom dnnet.neuralnet import NeuralNetwork\n```\n\nFor example, if dnnet directory is in ~/Work/dnnet,\ndo like below.\n```\nimport os\nimport sys\nsys.path.append(os.path.join(os.getenv('HOME'), 'Work/dnnet'))\n\nfrom dnnet.neuralnet import NeuralNetwork\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/daichi-yoshikawa/dnnet",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnnet",
    "package_url": "https://pypi.org/project/dnnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/dnnet/",
    "project_urls": {
      "Homepage": "https://github.com/daichi-yoshikawa/dnnet"
    },
    "release_url": "https://pypi.org/project/dnnet/0.10.1/",
    "requires_dist": [
      "numpy (>=1.12.0)"
    ],
    "requires_python": ">=3.4",
    "summary": "Deep Neural Network.",
    "version": "0.10.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6421767,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab32de66821e93c572dc075f8a39b73cca0f0e118aecc6f94122b01cbba1817e",
          "md5": "7a0d214692028262d4268a9dc213ab71",
          "sha256": "014535fad558881a4c9a334f7929307f223ce88291cd9f1f36452d1835ef1569"
        },
        "downloads": -1,
        "filename": "dnnet-0.10.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a0d214692028262d4268a9dc213ab71",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4",
        "size": 34130,
        "upload_time": "2020-01-09T11:03:48",
        "upload_time_iso_8601": "2020-01-09T11:03:48.983171Z",
        "url": "https://files.pythonhosted.org/packages/ab/32/de66821e93c572dc075f8a39b73cca0f0e118aecc6f94122b01cbba1817e/dnnet-0.10.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba8bd414049b976aec0bef86f7f6f3e37bf25fbe33d212d36f58fd6f3808ea2",
          "md5": "0f09c0a98eeff1fb6611c9f5b11e5217",
          "sha256": "d0bc3f8d3f2a902b5148a9ab93d64e3c593fe946cdf25adee156a9c2c22807d0"
        },
        "downloads": -1,
        "filename": "dnnet-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f09c0a98eeff1fb6611c9f5b11e5217",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 25547,
        "upload_time": "2020-01-09T11:03:50",
        "upload_time_iso_8601": "2020-01-09T11:03:50.267591Z",
        "url": "https://files.pythonhosted.org/packages/6b/a8/bd414049b976aec0bef86f7f6f3e37bf25fbe33d212d36f58fd6f3808ea2/dnnet-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38131713b213e67405bbcaf1c9bc5def9ef6510d8aca4b239a1162b17c3ff3fa",
          "md5": "c97b1531acab3706907f0ec647e81dc6",
          "sha256": "b4b19f527d6700abeb66dc583a64872b5c82f457e33085b836d9f81582a72ee5"
        },
        "downloads": -1,
        "filename": "dnnet-0.10.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c97b1531acab3706907f0ec647e81dc6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4",
        "size": 34110,
        "upload_time": "2020-01-09T11:34:52",
        "upload_time_iso_8601": "2020-01-09T11:34:52.713044Z",
        "url": "https://files.pythonhosted.org/packages/38/13/1713b213e67405bbcaf1c9bc5def9ef6510d8aca4b239a1162b17c3ff3fa/dnnet-0.10.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63831dd4ebfa7aaec4fd398591ef573495d6a4d4b70ae7f438bbf553514b9b9a",
          "md5": "1c78062f6d03f1491f103d989b0b04b0",
          "sha256": "94ee958b07439a6c6c09d35a29ac7e8227357e0eeca740837dff80f6986c064c"
        },
        "downloads": -1,
        "filename": "dnnet-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1c78062f6d03f1491f103d989b0b04b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 25559,
        "upload_time": "2020-01-09T11:34:54",
        "upload_time_iso_8601": "2020-01-09T11:34:54.684427Z",
        "url": "https://files.pythonhosted.org/packages/63/83/1dd4ebfa7aaec4fd398591ef573495d6a4d4b70ae7f438bbf553514b9b9a/dnnet-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de9d9165add37b7670a69ffc066bd63572dd7e2ff537b8c9987c6c7786b330ac",
          "md5": "8cf2968d56563c1a574535bfc81fa492",
          "sha256": "e4af8dd9a5704e70c7b961ec4f9502d4988d5ab7d6d087279b3aab7413d67c03"
        },
        "downloads": -1,
        "filename": "dnnet-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8cf2968d56563c1a574535bfc81fa492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 22806,
        "upload_time": "2019-03-02T23:19:28",
        "upload_time_iso_8601": "2019-03-02T23:19:28.033503Z",
        "url": "https://files.pythonhosted.org/packages/de/9d/9165add37b7670a69ffc066bd63572dd7e2ff537b8c9987c6c7786b330ac/dnnet-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e09f82f6b3f539e906abc8cb0357212134f4bf2e333f23ffe233187b339ce191",
          "md5": "2dce5184320c34760c0c331b6d460eab",
          "sha256": "feea5df84ef2773548733bbae655753ce54e8a688c89291a82c717a5d3fa1301"
        },
        "downloads": -1,
        "filename": "dnnet-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2dce5184320c34760c0c331b6d460eab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 23920,
        "upload_time": "2019-03-05T02:11:09",
        "upload_time_iso_8601": "2019-03-05T02:11:09.171600Z",
        "url": "https://files.pythonhosted.org/packages/e0/9f/82f6b3f539e906abc8cb0357212134f4bf2e333f23ffe233187b339ce191/dnnet-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38131713b213e67405bbcaf1c9bc5def9ef6510d8aca4b239a1162b17c3ff3fa",
        "md5": "c97b1531acab3706907f0ec647e81dc6",
        "sha256": "b4b19f527d6700abeb66dc583a64872b5c82f457e33085b836d9f81582a72ee5"
      },
      "downloads": -1,
      "filename": "dnnet-0.10.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c97b1531acab3706907f0ec647e81dc6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.4",
      "size": 34110,
      "upload_time": "2020-01-09T11:34:52",
      "upload_time_iso_8601": "2020-01-09T11:34:52.713044Z",
      "url": "https://files.pythonhosted.org/packages/38/13/1713b213e67405bbcaf1c9bc5def9ef6510d8aca4b239a1162b17c3ff3fa/dnnet-0.10.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63831dd4ebfa7aaec4fd398591ef573495d6a4d4b70ae7f438bbf553514b9b9a",
        "md5": "1c78062f6d03f1491f103d989b0b04b0",
        "sha256": "94ee958b07439a6c6c09d35a29ac7e8227357e0eeca740837dff80f6986c064c"
      },
      "downloads": -1,
      "filename": "dnnet-0.10.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1c78062f6d03f1491f103d989b0b04b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 25559,
      "upload_time": "2020-01-09T11:34:54",
      "upload_time_iso_8601": "2020-01-09T11:34:54.684427Z",
      "url": "https://files.pythonhosted.org/packages/63/83/1dd4ebfa7aaec4fd398591ef573495d6a4d4b70ae7f438bbf553514b9b9a/dnnet-0.10.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}