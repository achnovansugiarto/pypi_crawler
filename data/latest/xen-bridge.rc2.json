{
  "info": {
    "author": "Frederic98",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# XEN Bridge\nAn object-oriented Xen API for python\n\nTested on XCP-ng, but should also work on XenServer\n\n**Install** from pypi using `pip install xen-bridge`\n\n## Usage\n```python\nfrom xenbridge import XenConnection\n\nxen = XenConnection('http://XEN_HOSTNAME', 'root', 'password')\n\nxoa_vm = xen.VM.get_by_uuid('UUID_OF_VM')\n# Or by name-label:\n# xoa_vm = xen.VM.get_by_name_label('XOA')[0]\n\nprint(f'{xoa_vm.name_label} ({xoa_vm.uuid})')\nprint(f'VM is a template: {xoa_vm.is_a_template}')\nxoa_vm.name_description = 'This is a VM'\nxoa_vm.start()      # Spin up the VM\n```\n\n### Exceptions\nWhile calling API methods, XEN might return an error. When this happens, a `XenError` is raised. When catching the exception, the error code can be accessed through the `error_code` attribute\n```python\n# Assuming VM is already running:\ntry:\n    xoa_vm.start()      # Should throw an error\nexcept xenbridge.XenError as e:\n    print(e.error_code)     # Prints 'VM_BAD_POWER_STATE'\n```\n## How it works\nFirstly, `xenboject.py` defines some helper functions and baseclasses for the endpoints that do the actual work of calling the XMLRPC API and casting the data to the corresponding types.  \n\nFor each class, there is a file corresponding to that class - for example, `vm.py`. In here, a class that defines the methods and properties can be found. All methods are wrapped using the `@XenMethod` decorator that copies the function's signature and replaces its functionality.\n```python\nclass VM(XenObject):\n    @XenMethod\n    def start(self, start_paused: bool, force: bool) -> None:\n        \"\"\"Start the specified VM.  This function can only be called with the VM is in the\n        Halted State.\"\"\"\n    power_state: VmPowerState = XenProperty(XenProperty.READONLY)\n```\nAs the API responds with a string for numbers, enums and Xen objects, the return type annotations are used to cast the objects to the correct type.\n\nThe XenConnection class is the object that is used to interact with the API\n\n## Missing methods\nAll API methods are generated from the [XenAPI documentation](https://xapi-project.github.io/xen-api/) using `docscraper.py`. If there is a method that is missing, you can either:\n- Add it to the corresponding class in the module yourself\n- Call it using the class's `call(methodname, *args)` method and manually cast it to the correct data type\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Frederic98/xen_bridge",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xen-bridge",
    "package_url": "https://pypi.org/project/xen-bridge/",
    "platform": "",
    "project_url": "https://pypi.org/project/xen-bridge/",
    "project_urls": {
      "Homepage": "https://github.com/Frederic98/xen_bridge"
    },
    "release_url": "https://pypi.org/project/xen-bridge/0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "an object-oriented Xen API for python",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11904047,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a0ffb7101bf4073c21af8d3324af013fddde63daf2fc084ef7f042edec1d92",
          "md5": "a2488d343380ed42515aa4f2491c0c5b",
          "sha256": "df201b09cd0aa749d7d6ce125165b0cc9ec684bfaa68b91bb7ef7f9fa542859a"
        },
        "downloads": -1,
        "filename": "xen-bridge-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2488d343380ed42515aa4f2491c0c5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 52647,
        "upload_time": "2021-05-17T12:00:03",
        "upload_time_iso_8601": "2021-05-17T12:00:03.977977Z",
        "url": "https://files.pythonhosted.org/packages/08/a0/ffb7101bf4073c21af8d3324af013fddde63daf2fc084ef7f042edec1d92/xen-bridge-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43c7f49d1f5681bf80c09ccacb1d5593bf6b154b054e12b9111525581ea6c286",
          "md5": "2b86eb61655ab4ea82590be937666070",
          "sha256": "37ea4b952f8e9447224d3143e5b1a5d1a9d1dc4aceea73ebb704635ea2f07587"
        },
        "downloads": -1,
        "filename": "xen_bridge-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b86eb61655ab4ea82590be937666070",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 101009,
        "upload_time": "2021-11-02T14:51:09",
        "upload_time_iso_8601": "2021-11-02T14:51:09.236932Z",
        "url": "https://files.pythonhosted.org/packages/43/c7/f49d1f5681bf80c09ccacb1d5593bf6b154b054e12b9111525581ea6c286/xen_bridge-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2247d0acfb389438bde3ae1d416b7a07e2e8aae0934118561582cbc5161e73c7",
          "md5": "c4e89dc65e241b782d6baa7974d1039e",
          "sha256": "26d9a3fa5303ef9a89e8225d761fd26eb28ff00790b4a1812528d6fc63f8fd33"
        },
        "downloads": -1,
        "filename": "xen-bridge-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c4e89dc65e241b782d6baa7974d1039e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 56134,
        "upload_time": "2021-11-02T14:51:10",
        "upload_time_iso_8601": "2021-11-02T14:51:10.363074Z",
        "url": "https://files.pythonhosted.org/packages/22/47/d0acfb389438bde3ae1d416b7a07e2e8aae0934118561582cbc5161e73c7/xen-bridge-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43c7f49d1f5681bf80c09ccacb1d5593bf6b154b054e12b9111525581ea6c286",
        "md5": "2b86eb61655ab4ea82590be937666070",
        "sha256": "37ea4b952f8e9447224d3143e5b1a5d1a9d1dc4aceea73ebb704635ea2f07587"
      },
      "downloads": -1,
      "filename": "xen_bridge-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2b86eb61655ab4ea82590be937666070",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 101009,
      "upload_time": "2021-11-02T14:51:09",
      "upload_time_iso_8601": "2021-11-02T14:51:09.236932Z",
      "url": "https://files.pythonhosted.org/packages/43/c7/f49d1f5681bf80c09ccacb1d5593bf6b154b054e12b9111525581ea6c286/xen_bridge-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2247d0acfb389438bde3ae1d416b7a07e2e8aae0934118561582cbc5161e73c7",
        "md5": "c4e89dc65e241b782d6baa7974d1039e",
        "sha256": "26d9a3fa5303ef9a89e8225d761fd26eb28ff00790b4a1812528d6fc63f8fd33"
      },
      "downloads": -1,
      "filename": "xen-bridge-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c4e89dc65e241b782d6baa7974d1039e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 56134,
      "upload_time": "2021-11-02T14:51:10",
      "upload_time_iso_8601": "2021-11-02T14:51:10.363074Z",
      "url": "https://files.pythonhosted.org/packages/22/47/d0acfb389438bde3ae1d416b7a07e2e8aae0934118561582cbc5161e73c7/xen-bridge-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}