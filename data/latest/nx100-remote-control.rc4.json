{
  "info": {
    "author": "norkator",
    "author_email": "nitramite@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# Motoman NX100 - Remote Control\n\nYaskawa Motoman NX100 industrial robot remote control ability research for machine vision control development. \nSee [Youtube demo video](https://youtu.be/9swshogfL1c).\n\nActual tasks will be here [Uenian33 - nx100_robotic_tasks](https://github.com/uenian33/nx100_robotic_tasks).\n\n\nTable of contents\n=================\n* [Documents](#documents)\n    * [Youtube videos](#youtube-videos)\n* [Infrastructure](#infrastructure)\n* [NX100 Configs](#nx100-configs)\n* [Install](#install)\n* [Lint, Test, Build](#lint-test-build)\n* [Programs](#programs)\n* [MoveL](#movel)\n* [MoveJ](#movej)\n* [Arduino gripper](#arduino-gripper)\n    * [Ladder changes](#ladder-changes)\n    * [Python sample](#python-sample)\n    * [Arduino code](#arduino-code)\n    * [Sketch](#sketch)\n* [Releasing](#releasing)\n\n\n\nDocuments\n============\nDocuments for development\n\n* [Uenian33 - nx100_robotic_tasks](https://github.com/uenian33/nx100_robotic_tasks)\n    * End goal. This repository will be control origin for this robot in the future.\n* [Ethernet Server Function Manual](https://drive.google.com/file/d/11TY9v_Tb5k23DTz9VuEBmj-vJE5Fmc4R/view) \n    * This document has information about http socket working.\n* [Concurrent I/O Manual](https://drive.google.com/file/d/1Dhij10r6Mk60-kloPwJcXpPA7n-u2KN2/view?usp=sharing)\n    * Remote IO signal outputs, inputs, all other IO signals and ladder programming information.\n\n\nYoutube videos\n-----\nThese videos are part of documentation.\n* [Youtube first demo promo](https://youtu.be/9swshogfL1c) related to remote control software side.\n* [Custom hardware Gripper](https://youtu.be/Cx4sLZeZK_E) related to first test of working gripper.\n* [Calibrating and testing ML pipeline](https://youtu.be/NBE9e7AJw6I) related to first tests with machine learning based control.\n\n\nInfrastructure\n============\nThis is planned infrastructure for robot project with computing server.<br>\n![infra-image](doc/hardware_network.png) \n\n\nNX100 Configs\n============\n```diff\n- Do changes with your own risk! in case you brick your robot or your setup is different and it doesn't work. I cannot help.\n```\n1. Log into NX100 with Yaskawa emperor password from security menu. Same menu as you use to login to maintenance mode.\n   ```\n   System info -> Security -> Select Management Mode ->\n   But do not enter Management Mode password but instead Yaskawa emperor password.\n   ```\n   Do your own research to find required password.\n2. Enable following FD parameters  \n   All supported parameters list: [NX100 / NXC100 PARAMETER LIST](https://drive.google.com/file/d/1YA_C3Vg_eh7pp0q-liEpeXLgl6D-lV0I/view?usp=sharing)\n   ```\n   FD078 => bit set to 1 (Ethernet WWW)\n   ```\n3. Connect ethernet cable.\n   ```\n   LAN0 (next to serial COM port) \n   ```\n   LAN1 should be occupied by default, that wire goes to pendant.\n   ![pc-cards](doc/nx100_cards.jpg)\n4. Specify ethernet configuration ip, mask, default gateway.\n   ```\n   1. Power off NX100 -> press down pendant \"MAIN MENU\" button while powering on NX100\n   2. Release \"MAIN MENU\" after seeing Motoman screen on pendant.\n   3. Login with Yaskawa emperor password from System -> Security.\n   4. SYSTEM -> SETUP -> OPTION FUNCTION -> TCP -> \"USED\"\n   5. SYSTEM -> SETUP -> OPTION FUNCTION -> NETWORK -> Give details.\n   6. Under network also find HOST SETUP -> Provide address details.\n   7. See that your changes have been saved.\n   8. Reboot NX100 and ping your NX100 ip address.\n   9. Test out this library.\n   ```\n\n\nInstall\n============\n\n1. Install or upgrade existing package\n   ```shell script\n   pip install nx100-remote-control\n   pip install --upgrade nx100-remote-control\n   ```\n2. You can change robot parameters via importing nx100_remote_control.\n   ```python\n   import nx100_remote_control\n   \n   nx100_remote_control.NX100_IP_ADDRESS = '192.168.2.28'\n   nx100_remote_control.NX100_TCP_PORT = 80\n   \n   nx100_remote_control.MOCK_RESPONSE = False  \n   ```\n3. Import available contents like below examples or run web server. \n    * Web interface opens from `http://localhost:8080/` which looks something like this in below image.\n   ```python\n   import nx100_remote_control\n   from nx100_remote_control.module import WebServer\n   \n   nx100_remote_control.MOCK_RESPONSE = True \n   \n   WebServer.run(addr=\"localhost\", port=8080)\n   ```\n   * Use MOCK_RESPONSE = True to run without attached robot.\n   * Replace \"localhost\" with \"0.0.0.0\" to make web server available to local network devices.\n\n![web-interface-image](doc/web_img.png) \n\n\nLint, Test, Build\n============\nMust have installed: `pip install flake8 pytest`  \nLint: `flake8 ./nx100_remote_control --count --select=E9,F63,F7,F82 --show-source --statistics`  \nTest: `pytest`  \nBuild: `python -m build`  \n\n\nPrograms\n============\n\n`Testing.py` => Used for development and testing individual commands.   \n`XboxController.py` => As name says, can use controller to control robot, just demo.  \n\n\nMoveL\n============\nQuick sample for MovL command to do linear movement with robot. \nSee MoveL object for more details or read `Ethernet Server Function Manual`.\n\n```python\nfrom nx100_remote_control.module import Commands, Utils\nfrom nx100_remote_control.objects import MoveL\n\nCommands.write_linear_move(MoveL.MoveL(\n    MoveL.MoveL.motion_speed_selection_posture_speed,\n    5,\n    MoveL.MoveL.coordinate_specification_base_coordinate,\n    353.769, 202.779, 120.658,\n    -1.34, 35.78, 27.84,\n    Utils.binary_to_decimal(0x00000001),\n    0, 0, 0, 0, 0, 0, 0\n))\n```\nUse MoveL.MoveL object to see options for `motion_speed_selection_` and for `coordinate_specification_`\n\nThen to wait for move to be completed you can use callback function as example:\n\n```python\nfrom nx100_remote_control.module import Commands, Utils\nfrom nx100_remote_control.objects import MoveL\n\ndef callback_success():\n    print('MoveL position has been reached')\n\ndef callback_failed():\n    print('MoveL error or position not reached on given timeout')\n\nmove_l = MoveL.MoveL(\n    MoveL.MoveL.motion_speed_selection_posture_speed,\n    5,\n    MoveL.MoveL.coordinate_specification_base_coordinate,\n    353.769, 202.779, 120.658,\n    -1.34, 35.78, 27.84,\n    Utils.binary_to_decimal(0x00000001),\n    0, 0, 0, 0, 0, 0, 0\n)\n    \nCommands.robot_in_target_point_callback(\n    move_l=move_l, timeout=10, _callback_success=callback_success, _callback_failed=callback_failed\n)\n```\n\nSo this will exec `_callback_success` if position reached in given timeout or run `_callback_failed` if not.\n\nAnother commander class way\n\n```python\nfrom nx100_remote_control.module import LinearMove, Utils\nfrom nx100_remote_control.objects import MoveL\n    \nmove_l = MoveL.MoveL(\n    MoveL.MoveL.motion_speed_selection_posture_speed,\n    5,\n    MoveL.MoveL.coordinate_specification_base_coordinate,\n    352.769, 202.779, 120.658,\n    -1.34, 35.78, 27.84,\n    Utils.binary_to_decimal(0x00000001),\n    0, 0, 0, 0, 0, 0, 0\n)\n\nlinear_move = LinearMove.LinearMove()\nlinear_move.go(move_l=move_l, wait=True, poll_limit_seconds=10)\nprint('finished')\n```\n\n\nMoveJ\n============\nQuick sample for MovJ command to do joint motion movement with robot. \nRead `Ethernet Server Function Manual` for more details about MOVJ\n\n```diff\n- !!! BE CAREFUL WITH MOVJ COMMAND AND IT'S SPEED SETTING !!!\n```\n* Speed is given as percentage from 1 to 100.\n* Start running it with lower speed. \n\n```python\nfrom nx100_remote_control.module import JointMove, Utils\nfrom nx100_remote_control.objects import MoveJ\n    \nmove_j = MoveJ.MoveJ(\n    25,  # speed %\n    MoveJ.MoveJ.coordinate_specification_base_coordinate,\n    352.769, 202.779, 120.658,\n    -1.34, 35.78, 27.84,\n    Utils.binary_to_decimal(0x00000001),\n    0, 0, 0, 0, 0, 0, 0\n)\nlinear_move = JointMove.JointMove()\nlinear_move.go(move_j=move_j, wait=True, poll_limit_seconds=10)\nprint('finished')\n```\n\n\nArduino gripper\n============\nArduino folder contains code and sketch for custom Gripper integrated for NX100 Motoman.\n\n\nLadder changes\n-------\nNX100 ladder config had by default GRP meaning grouped signals so had to ungroup them\nto gain access to output relay #30052\n![ladder-config](arduino/ladder_config.jpg) \n\nIdea here was that I needed to be able to control relay #30052\nwith stock #10022 universal output signal but also with network input #22012 signal\nand this needed STR + NOT handling for both cases (see image ladder line 0359)\n\n\nPython sample\n-------\nWork in progress with gripper.\n\n```python\nfrom nx100_remote_control.module import Gripper\n\nGripper.write_gripper_close()\nGripper.write_gripper_open()\nGripper.read_gripper_closed_command_register()\nGripper.read_gripper_acknowledge()\nGripper.read_gripper_hit()\n```\n\n\nArduino code\n-------\nObvious bits are one input and two outputs. Hardware \ndecisions don't matter, code can be changed accordingly.\n\n* PC817 is used to bring NX100 IO card UNIVERSAL OUTPUT signal as input for Arduino.\n* Two relays are used to short circuit NX100 input signal line's to switch on/off \nUNIVERSAL INPUT signal.\n\n\n\nSketch\n-------\n\n![Electrical-drawing](./arduino/GripperSketch_bb.png)\n\nCustom part sources\n* [L298 Stepper Driver](https://forum.fritzing.org/uploads/short-url/cOmtO5zuLdoAiea5hppdo0YsU1N.fzpz)\n* [LM2596 Step Down Module](https://forum.fritzing.org/uploads/default/original/2X/8/876018ce35bcc333dd7083f3bbbc5dcc86a9fb20.fzpz)\n* [PC817 Opto-isolator](https://github.com/RafaGS/Fritzing/blob/master/Sharp%20PC817.fzpz)\n* [HC-SR04 Sonar](https://fritzing-data.s3.eu-central-1.amazonaws.com/0ec82cd976950bb5439acdd825c9c8c1.fzpz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA2HCNQME5J5JNR5LX%2F20210612%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20210612T133948Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&X-Amz-Signature=368c32cdbce2a5ce10266e8599b724db47e37fa24c7fefffe923d4e05937c0f1)\n\n\nReleasing\n============\n```diff\n- Remember to increment setup.cfg version before release tag!\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/norkator/nx100-remote-control",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nx100-remote-control",
    "package_url": "https://pypi.org/project/nx100-remote-control/",
    "platform": "",
    "project_url": "https://pypi.org/project/nx100-remote-control/",
    "project_urls": {
      "Homepage": "https://github.com/norkator/nx100-remote-control",
      "Issues": "https://github.com/norkator/nx100-remote-control/issues"
    },
    "release_url": "https://pypi.org/project/nx100-remote-control/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Motoman NX100 remote control ability research library",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10828308,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19c96237d07d618e3c969b1d0d210d6ecb2df122406737d345c5c1ed77c99507",
          "md5": "e1bf44eb52d9f370f363b655ecc25298",
          "sha256": "a798d0aec2de6dff3fa70242198d61225500d6df683ae7de3c1f0e4f7a1a5173"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1bf44eb52d9f370f363b655ecc25298",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31144,
        "upload_time": "2021-06-26T11:28:54",
        "upload_time_iso_8601": "2021-06-26T11:28:54.994245Z",
        "url": "https://files.pythonhosted.org/packages/19/c9/6237d07d618e3c969b1d0d210d6ecb2df122406737d345c5c1ed77c99507/nx100_remote_control-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83f35a1130bbadd15d5ee17197116601d1aacae4a5bd14dbafa662c1868486cc",
          "md5": "347b15a3dc20fdeae1091d2811225652",
          "sha256": "dbac53c55f2ffce442370476d9b5bcc7ed7f4c7d52157ef6a09252f81dff35f1"
        },
        "downloads": -1,
        "filename": "nx100-remote-control-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "347b15a3dc20fdeae1091d2811225652",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29221,
        "upload_time": "2021-06-26T11:28:56",
        "upload_time_iso_8601": "2021-06-26T11:28:56.636825Z",
        "url": "https://files.pythonhosted.org/packages/83/f3/5a1130bbadd15d5ee17197116601d1aacae4a5bd14dbafa662c1868486cc/nx100-remote-control-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56843522c16ec7d3a7b2343b7464b27e47ce2852476e8028468b56f05a33b73c",
          "md5": "96ead4d280ab3d30713688cc6b56342e",
          "sha256": "89201d1ebdafade00bdda71b1ff1e0f8e86d0f391e89009e877e271d8c27634a"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96ead4d280ab3d30713688cc6b56342e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31353,
        "upload_time": "2021-06-26T12:40:36",
        "upload_time_iso_8601": "2021-06-26T12:40:36.530792Z",
        "url": "https://files.pythonhosted.org/packages/56/84/3522c16ec7d3a7b2343b7464b27e47ce2852476e8028468b56f05a33b73c/nx100_remote_control-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f04f79c6b705121bb7b0e7e1ab86d49682a918e686722da90ed966a7d51e1125",
          "md5": "c3dc60442e064c0c7cf55bb3c88b66bc",
          "sha256": "e16458f1ca3c7b5f3a380e0cdb303bfba8e0cca23a82ee4f50ea20fbb96b8239"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3dc60442e064c0c7cf55bb3c88b66bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29214,
        "upload_time": "2021-06-26T12:40:37",
        "upload_time_iso_8601": "2021-06-26T12:40:37.914174Z",
        "url": "https://files.pythonhosted.org/packages/f0/4f/79c6b705121bb7b0e7e1ab86d49682a918e686722da90ed966a7d51e1125/nx100_remote_control-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d481b543db455f675ad04f5239e5ca98aee4f6a43ce97656c80997be88803c70",
          "md5": "cc5d7c4f03119500c4803cacd5d7c330",
          "sha256": "f4589cd4712ae7a51df890d36d0e7c092787f0e28e4abb7d5a0646428d0a3138"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc5d7c4f03119500c4803cacd5d7c330",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33248,
        "upload_time": "2021-07-03T21:32:05",
        "upload_time_iso_8601": "2021-07-03T21:32:05.458538Z",
        "url": "https://files.pythonhosted.org/packages/d4/81/b543db455f675ad04f5239e5ca98aee4f6a43ce97656c80997be88803c70/nx100_remote_control-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f39325bf3ac74ec8965f3a7dd904d201e25b823d4baa4792b6abc7b3ba8dda9",
          "md5": "f8ffd9e447bb93713585d088f38aeb71",
          "sha256": "ae7ea226a5b814c471c16f93330c10695acc663c81acc1c11370c5f1db5df533"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8ffd9e447bb93713585d088f38aeb71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30077,
        "upload_time": "2021-07-03T21:32:06",
        "upload_time_iso_8601": "2021-07-03T21:32:06.614197Z",
        "url": "https://files.pythonhosted.org/packages/0f/39/325bf3ac74ec8965f3a7dd904d201e25b823d4baa4792b6abc7b3ba8dda9/nx100_remote_control-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9aac06217fb857e6ece5d3510d6ac0e500507d3964584ce6ea1d46485758036",
          "md5": "f1486c36c51d6c079f0af4510bcea8cd",
          "sha256": "9d9110093333c54231c50338a27fb17fc7cbcbd3ea720baf78e2cfdf8b2df2f2"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1486c36c51d6c079f0af4510bcea8cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34009,
        "upload_time": "2021-07-05T18:30:41",
        "upload_time_iso_8601": "2021-07-05T18:30:41.141368Z",
        "url": "https://files.pythonhosted.org/packages/d9/aa/c06217fb857e6ece5d3510d6ac0e500507d3964584ce6ea1d46485758036/nx100_remote_control-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a22940251e962d7ef4f27219d4d02a8e13979c1df5e1b47d7ddf6cbab35f567",
          "md5": "9381c2d3afca26cc2e0da8efa65799e8",
          "sha256": "690d5e2815de9898f09e502046801d1320afdd51039c09b33754c062118f2acf"
        },
        "downloads": -1,
        "filename": "nx100_remote_control-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9381c2d3afca26cc2e0da8efa65799e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31493,
        "upload_time": "2021-07-05T18:30:42",
        "upload_time_iso_8601": "2021-07-05T18:30:42.398966Z",
        "url": "https://files.pythonhosted.org/packages/8a/22/940251e962d7ef4f27219d4d02a8e13979c1df5e1b47d7ddf6cbab35f567/nx100_remote_control-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9aac06217fb857e6ece5d3510d6ac0e500507d3964584ce6ea1d46485758036",
        "md5": "f1486c36c51d6c079f0af4510bcea8cd",
        "sha256": "9d9110093333c54231c50338a27fb17fc7cbcbd3ea720baf78e2cfdf8b2df2f2"
      },
      "downloads": -1,
      "filename": "nx100_remote_control-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1486c36c51d6c079f0af4510bcea8cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34009,
      "upload_time": "2021-07-05T18:30:41",
      "upload_time_iso_8601": "2021-07-05T18:30:41.141368Z",
      "url": "https://files.pythonhosted.org/packages/d9/aa/c06217fb857e6ece5d3510d6ac0e500507d3964584ce6ea1d46485758036/nx100_remote_control-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a22940251e962d7ef4f27219d4d02a8e13979c1df5e1b47d7ddf6cbab35f567",
        "md5": "9381c2d3afca26cc2e0da8efa65799e8",
        "sha256": "690d5e2815de9898f09e502046801d1320afdd51039c09b33754c062118f2acf"
      },
      "downloads": -1,
      "filename": "nx100_remote_control-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9381c2d3afca26cc2e0da8efa65799e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 31493,
      "upload_time": "2021-07-05T18:30:42",
      "upload_time_iso_8601": "2021-07-05T18:30:42.398966Z",
      "url": "https://files.pythonhosted.org/packages/8a/22/940251e962d7ef4f27219d4d02a8e13979c1df5e1b47d7ddf6cbab35f567/nx100_remote_control-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}