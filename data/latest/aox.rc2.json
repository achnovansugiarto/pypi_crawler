{
  "info": {
    "author": "Costas Basdekis",
    "author_email": "costas@basdekis.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Typing :: Typed"
    ],
    "description": "# aox - Python Advent of Code Submissions helper\n\n![Tests](https://github.com/costas-basdekis/aox/workflows/Tests/badge.svg)\n[![AOX version](https://pypip.in/v/aox/badge.png)](https://pypi.org/project/aox/)\n![AOX downloads](https://pypip.in/d/aox/badge.png)\n\nAOX was created with the following ideals:\n\n1. I wanted to be able to run tests for each challenge\n2. I didn't want to write the same code to load the input, run the tests, and\nprint the result\n3. I wanted all of my challenges to have the same structure\n\nThe main feature of AOX is auto-creating the boilerplate for each challenge,\n\nCurrently only Python>=3.7 is supported.\n\n[aoc]: https://adventofcode.com/\n\n## Quick start\n\nInstall `aox` (Python>=3.7 needed):\n\n```shell script\npip install aox\n```\n\nCreate your settings:\n\n```shell script\naox init-settings\n```\n\nEdit `.aox/sensitive_user_settings.py` to put your AOC session token\n\n```python\n# Copy-paste from your browser cookies\nAOC_SESSION_ID = \"...\"\n```\n\nThe following creates the boilerplate, and downloads your input:\n\n```shell script\naox add 2020 1 a\n```\n\nEdit the file to solve the challenge (your input is automatically passed\nin), and return the solution inside the `Challenge.solve` body:\n\n```python\nclass Challenge(BaseChallenge):\n    def solve(self, _input, debugger):\n         return your_awesome_calculations(_input)\n```\n\nIf you want to check it works you can run it:\n\n```shell script\naox challenge 2020 1 a run\n```\n\nWhen you're happy with the result, submit it:\n\n```shell script\naox challenge 2020 1 a submit --yes\n```\n\nIt will run your code, take the result, and submit it! If it's successful:\nhurray! Time to solve part B with:\n\n```shell script\naox add 2020 1 b\n```\n\nAnd so on\n\n## Features\n\n#### Custom boilerplate\n\nIf you always want to import certain libraries (eg `itertools`, `functools`,\nyour own `utils` library), you can create a template, so that you don't have to\nwrite the same things again and again:\n```python\n#!/usr/bin/env python3\nimport aox.challenge\nimport my_useful_utils\nimport itertools, functools\nimport re\n\n\nclass Challenge(aox.challenge.BaseChallenge):\n    ...\n\n...\n```\n\nCheck the [boilerplate customisation](#boilerplate-customisation) for more\ndetails.\n\n#### Testing, running, debugging, interactive challenges\n\nI've found that writing small [doctests] makes it much easier to develop\nsolutions for AOC, especially when they become more complicated.\n\nAOX automatically picks up all doctests in a challenge and runs them if you run\n`aox challenge <year> <day> <part> test`.\n\nIt also prints your solution when you run\n`aox challenge <year> <day> <part> run`. If you add the `--debug` flag, then you\ncan use the `debugger` parameter to your `Challenge.solve` method, which is\nuseful when you want to print diagnostic stats:\n```python\nclass Challenge(BaseChallenge):\n  def solve(self, _input, debugger):\n    # Print something, if debugging is enable, and enough\n    # time has passed from the previous print statement\n    debugger.report_if(\n        \"Many many lines of debug information\")\n    # By default there is a 5s interval between printing\n    # To change that, use the --debug-interval/-i flag\n    debugger.report_if(\n        \"You won't see this\")    \n    # After enough time, `report_if` will print\n    time.sleep(5)\n    # To print something expensive, first check:\n    if debugger.should_report():\n      debugger.report(\n        \"Some expensive calculation:\", expensive_calculation())\n    # Debug through an iterable\n    for index in range(10):\n      debugger.step()\n      debugger.report_if(f\"looking at index {index}\")\n      ...\n    # Also helpers to step through an iterable\n    for index in debugger.stepping(range(10)):\n      debugger.report_if(f\"looking at index {index}\")\n      ...\n    # Or through a while loop\n    value = 0\n    while debugger.step_if(value < 3):\n      value += 1\n      debugger.report_if(f\"checking value {value}\")\n      ...\n    return 6 * 7\n```\nTo see more information check the [Debugger documentation]\n\n`aox challenge <year> <day> <part> run` will print:\n```\nSolution: 42 (in 0.0s)\n```\nWhile `aox challenge <year> <day> <part> run --debug` will print:\n```\nMany many lines of debug information\nThat you don't want to read every time\nSolution: 42 (in 0.0s)\n```\n\nSome challenges require you to interact with a program you're emulating, eg\n[2019/15/A] or [2019/25/A], so before you write an automated solution, you might\nelect to add an interactive mode. Other times, it's useful to be able to\ninteractively explore the problem space. To do that, simply add a `play` method\nto your challenge, and run `aox challenge <year> <day> <part> play`:\n```python\nclass Challenge(BaseChallenge):\n  def play(self):\n    _input = self.input\n    while True:\n      command = click.prompt(\"Enter u for up, d for down, q to quit\")\n      if command == 'u':\n        ...\n```\n\nBy default, if you don't specify a mode, AOX will first test and then run your\nsolution with `aox challenge <year> <day> <part>`:\n```python\n4 tests in 1 modules passed in 0.02s\nSolution: 1234567 (in 0.0s)\n```\n\n[doctests]: https://docs.python.org/3/library/doctest.html\n[2019/15/A]: https://adventofcode.com/2019/day/15\n[2019/25/A]: https://adventofcode.com/2019/day/25\n[Debugger documentation]: #debugging-your-code\n\n#### Debugging your code\n\nSometimes you need to see some details about the process you're running, and\nthat could mean printing some info in the console, especially if you have a very\ninefficient algorithm. The `Debugger` class, that is passed in as `debugger` in\nthe `Challenge.solve` method, provides some very useful functionality:\n\n> `if debugger:` or `if debugger.enabled:`\n\nThis allows you to only do something if you passed `--debug`/`-d` as an argument\n\n> `debugger.step_count`, `debugger.step_count_since_last_report`,\n`debugger.step_frequency`, and `debugger.step_frequency_since_last_report`\n\nYou inspect how many steps total/per second have you performed since the\nstart/last time you reported.\n\n> `if debugger.should_report(): debugger.report(...)` or\n> `debugger.report_if(...)`\n\nAdvance the step count once, and print something to the console, if the debugger\nis enabled, and enough time has passed since the last reporting (default is\n`5s`, controlled by the `--debug-interval`/`-i` flag).\n\n> `debugger.default_report()` and `debugger.default_report_if()`\n\nSimilar to the above, but it uses the formatting function from the\n`DEFAULT_DEBUGGER_REPORT_FORMAT` to include some useful data in the output.\n\nIf your calculations run through nested function calls, you can also provide\nadditional info, by using `debugger.extra_report_formats`, or using the\n`debugger.adding_extra_report_format` context manager:\n\n```python\ndef level_1(data, debugger):\n    def report_x(_, message):\n        return f\"x: {x}\"\n    # Will print: 'start x'\n    debugger.default_report(\"start x\")\n    total = 0\n    for x in range(10000000):\n        with debugger.adding_extra_report_format(report_x):\n            # Will print: 'x: 0, start y'\n            debugger.default_report(\"start y\")\n            total += level_2(data[x], debugger)\ndef level_2(data, debugger):\n    def report_y(_, message):\n        return f\"y: {y}\"\n    total = 0\n    for y in range(10000000):\n        with debugger.adding_extra_report_format(report_y):\n            # Will print: 'x: 0, y: 0, start z'\n            debugger.default_report(\"start z\")\n            total += level_3(data[y], debugger)\n    return total\ndef level_3(data, debugger):\n    total = 0\n    for z in range(10000000):\n        total += data[z]['a'] * data[z]['b']\n        # Will print: 'x: 0, y: 0, z: 0'\n        debugger.default_report_if(f\"z: {z}\")\n    return total\n```\n\n> `debugger.duration_since_start` and `debugger.duration_since_last_report`, as\n> well as `debugger.pretty_duration_*` and `debugger.get_pretty_duration_*()`\n\nYou can get the duration since the start/last report, which would be the number\nof seconds since then. Since these are fine precision floats, you would like to\nuse the `pretty_*` property to get a nice `3h5m2s`\nrendition of time, or the `get_pretty_*` methods to control how many `digits` do\nof precision do you want to include in the seconds eg `3h5m2s.23`.\n\n> `debugger.step()`, `debugger.stepping()`, and `debugger.step_if()`\n\nIt signifies that you have performed a number of steps (by default 1).\n\nThere are two helper methods:\n\n```python3\n# Step for each item in the passed in iterable\nfor item in debugger.stepping(['a', 'b', 'c']):\n  ...\n\n# Step for each truthy value\nvalue = 0\nwhile debugger.step_if(value < 3):\n  value += 1\n  ...\n```\n\n#### Reading your stars\n\nTo keep track how many and which stars you have, you can add your auth\ncredentials (check [Session Cookie](#session-cookie) for details), and use\n`aox fetch` to refresh the stars cache. Then you can see them either via `aox`\nor `aox list`:\n```\nFound 4 years with code and 162 stars:\n  * 2020: 25 days with code and 50 stars\n  * 2019: 25 days with code and 47 stars\n  * 2018: 25 days with code and 34 stars\n  * 2017: 25 days with code and 41 stars\n```\nOr for a particular year with `aox list 2019`:\n```\nFound 25 days with code in 2019 with 47 stars:\n  * 25*!, 24**, 23**, 22*x, 21**, 20**, 19**, 18**, 17**, 16*x, 15**, 14**, 13**, 12**, 11**, 10**, 9**, 8**, 7**, 6**, 5**, 4**, 3**, 2**, 1**\n```\n\n#### Displaying your swag\n\nYou might be proud of how many stars you've gotten over the years, or you might\nwant to keep track of which challenges do you still have to solve. In any case,\nAOX provides the ability to display star & code summaries in your README\nautomatically.\n\nThe way you can display these are customisable, by creating a new\n`aox.summaries.BaseSummary` sub-class, and there are two default summaries\nbuilt-in:\n\n**Event summary**\n\nSimply add the following lines in your README:\n```markdown\n[//]: # (event-summary-start)\n[//]: # (event-summary-end)\n```\n\nAnd after every `aox update-readme` you should see something like this:\n\n| Total | 2020 | 2019 | 2018 | 2017 |\n| --- | --- | --- | --- | --- |\n| 162 :star: | 50 :star: :star: | 47 :star: | 34 :star: :star: | 41 :star: :star: |\n\n**Submissions summary**\n\nAdd the following lines in your README:\n```markdown\n[//]: # (submissions-start)\n[//]: # (submissions-end)\n```\n\nAnd after every `aox update-readme` you should see something like this:\n\n|       | 2020                                                 | 2019                                                             |\n|  ---: | :---:                                                | :---:                                                            |\n|       | [Code][co-20]    &             [Challenges][ch-20]   | [Code][co-19]    &                         [Challenges][ch-19]   |\n|       | 50 :star: :star:                                     | 47 :star: / 2 :x: / 1 :grey_exclamation:                         |\n|  1    | [Code][co-20-01] :star: :star: [Challenge][ch-20-01] | [Code][co-19-01] :star: :star:             [Challenge][ch-19-01] |\n|  2    | [Code][co-20-02] :star: :star: [Challenge][ch-20-02] | [Code][co-19-02] :star: :star:             [Challenge][ch-19-02] |\n| ...   | ...                                                  | ...                                                              |\n| 24    | [Code][co-20-24] :star: :star: [Challenge][ch-20-24] | [Code][co-19-24] :star: :star:             [Challenge][ch-19-24] |\n| 25    | [Code][co-20-25] :star: :star: [Challenge][ch-20-25] | [Code][co-19-25] :star: :grey_exclamation: [Challenge][ch-19-25] |\n\n**Your custom summary**\n\nSimple override and register your summary class:\n```python\nfrom aox.summary import BaseSummary, summary_registry\n\n@summary_registry.register\nclass MyCustomSummary(BaseSummary):\n    # Don't forget to set your prefix\n    marker_prefix = \"my-custom\"\n\n    def generate(self, combined_info):\n      years_with_stars_or_code = [\n        year\n        for year, year_info in combined_info.year_infos.items()\n        if year_info.has_code or year_info.stars\n      ]\n      return (\n        \"Your custom markdown using stars & code info:\\n\"\n        f\"You have stars or code in {len(years_with_stars_or_code)} years\\n\"\n        f\"In 2020 you had {combined_info.year_infos[2020].stars} :star:\\n\"\n      )\n```\n\nDon't forget to import your module, which can easily be done in your settings:\n```python\nEXTRA_MODULE_IMPORTS = ['my_custom_summary']\n```\n\nAnd to add the following lines in your README:\n```markdown\n[//]: # (my-custom-start)\n[//]: # (my-custom-end)\n```\n\nAnd after every `aox update-readme` you should see something like this:\n\n```markdown\nYour custom markdown using stars & code info:\nYou have stars or code in 2 years\nIn 2020 you had 50 :star:\n```\n\n### Settings\n\nAfter `aox init-settings`, you'll have an `.aox` folder in your repo:\n\n```\n.aox\n├──.gitignore\n├──sensitive_user_settings.py\n├──site_data.json\n└──user_settings.py\n```\n\nYou should edit `sensitive_user_settings.py` to put the authentication cookie\nfor your account, to allow AOX access your AOC stats:\n\n```python\nAOC_SESSION_ID = (\n    \"a-very-long-hex-string\"\n    \"that-you-can-get-from-your-browser\"\n)\n```\n\nYou can find it in the `Application` tab (eg in Chrome), and you should not\ncommit that file in git, as it contains your secrets.\n\n`site_data.json` is the cache of the AOC stars, from the last time you did\n`aox fetch`. If you want all the data that AOX uses you can use `aox dump`.\n\nNow, you can customise your experience in `user_settings.py`:\n\n#### Session Cookie\n\nSimply load it from your not-git-commited file\n```python\nAOC_SESSION_ID = sensitive_user_settings.AOC_SESSION_ID\n```\n\n#### Challenges code location\n\nWhere do your challenges live? The default boilerplate structure is\n`<repo-root>/year_<year>/day_<day>/part_<part>.py`, so you don't have to change\nthis:\n```python\nCHALLENGES_ROOT = repo_root\nCHALLENGES_MODULE_NAME_ROOT = None  # Top module\n```\n If you want to use a different folder, eg\n`<repo-root>/my/challenges/year_<year>/day_<day>/part_<part>.py`, you can do:\n```python\nCHALLENGES_ROOT = repo_root.joinpath('my', 'challenges')\nCHALLENGES_MODULE_NAME_ROOT = 'my.challenges'  # Module prefix\n```\n\n#### Boilerplate customisation\n\nBy default, boilerplate is structure as mentioned above:\n```python\nCHALLENGES_BOILERPLATE = \"aox.boilerplate.DefaultBoilerplate\"\n```\n\nThe most common use case is to create a template file with eg custom imports:\n```python\n#!/usr/bin/env python3\nimport aox.challenge\nimport my_useful_utils\nimport itertools, functools\nimport re\n\n\nclass Challenge(aox.challenge.BaseChallenge):\n    ...\n\n...\n```\nAnd then change the example part path:\n```python\nfrom aox.boilerplate import DefaultBoilerplate\nCHALLENGES_BOILERPLATE = DefaultBoilerplate(\n    example_part_path=repo_root.joinpath('my_custom_example_part.py'),\n)\n```\nOr for more complex customisation, eg if you want a different structure (eg\n`<repo-root>/<year>_<day>_<part>.py`), you can sub-class\n`aox.boilerplate.BaseBoilerplate`, which AOX uses to know where to find your\ncode:\n```python\nimport aox.boilerplate\nclass MyCustomBoilerplate(aox.boilerplate.DefaultBoilerplate):\n    ...\n```\nAnd use it:\n```python\nCHALLENGES_BOILERPLATE = \"my_custom_boilerplate.MyCustomBoilerplate\"\n```\n\n#### Default format\n\nTo avoid repeating yourself every time you want to print something out, you can\ndefine (or use the default) formatter function to add some standard details:\n\n```python\ndef verbose_debugger_format(debugger: 'Debugger', message: str) -> str:\n    return (\n        f\"Step: {debugger.step_count}, {message}, time: \"\n        f\"{debugger.pretty_duration_since_start}, total steps/s: \"\n        f\"{debugger.step_frequency}, recent steps/s: \"\n        f\"{debugger.step_frequency_since_last_report}\"\n    )\n\n\nDEFAULT_DEBUGGER_REPORT_FORMAT = verbose_debugger_format\n```\n\nIf you want to customise it:\n\n```python\ndef custom_debugger_format(debugger: 'Debugger', message: str) -> str:\n    return (\n        f\"Custom format, delta time is \"\n        f\"{debugger.pretty_duration_since_last_report} for {message}\"\n    )\n\n\nDEFAULT_DEBUGGER_REPORT_FORMAT = custom_debugger_format\n```\n\n#### Site data cache\n\nThere is no reason to change this, and by default it lives in the `.aox` folder.\nIn case you want it somewhere else (eg your home directory), you can replace\nthis (remembering to use `Path`).\n```python\n# Save this info in my home directory\nSITE_DATA_PATH = Path.home().joinpath('aoc_site_data.json')\n```\n\n#### README location\n\nIf you want AOX to put a summary of your stars in markdown, you can use this to\nspecify your README path\n```python\nREADME_PATH = repo_root.joinpath('README.md')\n```\n\n#### Custom settings\n\nIf you want to keep some extra settings, you can add them to\n`.aox/user_settings.py`, and you can access them via the `settings.module`\nattribute:\n\n```python\nMY_CUSTOM_SETTING = \"foo\"\n```\n\n```python\nfrom aox.settings import settings_proxy\n# Make sure to always use `settings_proxy()`\nprint(settings_proxy().module.MY_CUSTOM_SETTING)\n```\n\n## Contributing:\n\nPlease see the relevant section in [aox](./aox)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/costas-basdekis/aox",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aox",
    "package_url": "https://pypi.org/project/aox/",
    "platform": "",
    "project_url": "https://pypi.org/project/aox/",
    "project_urls": {
      "Homepage": "https://github.com/costas-basdekis/aox"
    },
    "release_url": "https://pypi.org/project/aox/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AdventOfCode Submissions Framework",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12267916,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ce6f37b0a62a160918ba4e25ee379d4624684996150f496a1e7964790f3a45b",
          "md5": "5cf6313d8d8f26a066e37b17c9750fdf",
          "sha256": "29254ae9de64d54aff44caac6ff200057fadb4251e864f3ffb3ddb36b1c909c0"
        },
        "downloads": -1,
        "filename": "aox-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cf6313d8d8f26a066e37b17c9750fdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61617,
        "upload_time": "2021-12-03T04:01:00",
        "upload_time_iso_8601": "2021-12-03T04:01:00.108965Z",
        "url": "https://files.pythonhosted.org/packages/9c/e6/f37b0a62a160918ba4e25ee379d4624684996150f496a1e7964790f3a45b/aox-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12939e1b668f1d5b8d4898c09f29eb0b8036ffbd10c10cb16376dd97dd7770d6",
          "md5": "7e343be9ebf6de134ece162340713f5a",
          "sha256": "94edce5f5d12c9a1845d7352815a01b8125892bd807c5ea8c39e46e37e214af9"
        },
        "downloads": -1,
        "filename": "aox-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e343be9ebf6de134ece162340713f5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55489,
        "upload_time": "2021-12-03T04:01:01",
        "upload_time_iso_8601": "2021-12-03T04:01:01.468887Z",
        "url": "https://files.pythonhosted.org/packages/12/93/9e1b668f1d5b8d4898c09f29eb0b8036ffbd10c10cb16376dd97dd7770d6/aox-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "637d8fa3dd3b3868c57a81e4751472fe1e72876c35cb7016f4ec557c502de0c0",
          "md5": "62539f2b5a5124a23bc521dd007d22db",
          "sha256": "bb98ff0c0d3e96956ad031bcb0f0d4b7835c5fa63aad5bb6cabefb1a2ca19f76"
        },
        "downloads": -1,
        "filename": "aox-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62539f2b5a5124a23bc521dd007d22db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61611,
        "upload_time": "2021-12-10T14:28:22",
        "upload_time_iso_8601": "2021-12-10T14:28:22.529586Z",
        "url": "https://files.pythonhosted.org/packages/63/7d/8fa3dd3b3868c57a81e4751472fe1e72876c35cb7016f4ec557c502de0c0/aox-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58066cb70134c6c3eeb01e582686c65c399c122ad063cd35eb9f457d4d208b7c",
          "md5": "b8eaf14c964a53879cb5cfe428b44626",
          "sha256": "4fd324f214b15638a8cf91c444837b2fe11e8a011753c22cec502aa339defe85"
        },
        "downloads": -1,
        "filename": "aox-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8eaf14c964a53879cb5cfe428b44626",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55475,
        "upload_time": "2021-12-10T14:28:23",
        "upload_time_iso_8601": "2021-12-10T14:28:23.895300Z",
        "url": "https://files.pythonhosted.org/packages/58/06/6cb70134c6c3eeb01e582686c65c399c122ad063cd35eb9f457d4d208b7c/aox-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "637d8fa3dd3b3868c57a81e4751472fe1e72876c35cb7016f4ec557c502de0c0",
        "md5": "62539f2b5a5124a23bc521dd007d22db",
        "sha256": "bb98ff0c0d3e96956ad031bcb0f0d4b7835c5fa63aad5bb6cabefb1a2ca19f76"
      },
      "downloads": -1,
      "filename": "aox-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62539f2b5a5124a23bc521dd007d22db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 61611,
      "upload_time": "2021-12-10T14:28:22",
      "upload_time_iso_8601": "2021-12-10T14:28:22.529586Z",
      "url": "https://files.pythonhosted.org/packages/63/7d/8fa3dd3b3868c57a81e4751472fe1e72876c35cb7016f4ec557c502de0c0/aox-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58066cb70134c6c3eeb01e582686c65c399c122ad063cd35eb9f457d4d208b7c",
        "md5": "b8eaf14c964a53879cb5cfe428b44626",
        "sha256": "4fd324f214b15638a8cf91c444837b2fe11e8a011753c22cec502aa339defe85"
      },
      "downloads": -1,
      "filename": "aox-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b8eaf14c964a53879cb5cfe428b44626",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55475,
      "upload_time": "2021-12-10T14:28:23",
      "upload_time_iso_8601": "2021-12-10T14:28:23.895300Z",
      "url": "https://files.pythonhosted.org/packages/58/06/6cb70134c6c3eeb01e582686c65c399c122ad063cd35eb9f457d4d208b7c/aox-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}