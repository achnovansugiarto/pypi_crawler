{
  "info": {
    "author": "Laurent Van Acker",
    "author_email": "laurent@pozyx.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Pozyx-Python-library\n====================\nA Python library to work with the pozyx indoor positioning system over USB.\n\nThis library works with both Python 2 and 3.\n\nNOTE: Temporary version with I2C support, needs testing.\n\nPrerequisites\n-------------\n* Download and install Python. On Windows, make your life easier and make sure Python is in your PATH. A recommended install is therefore the `Anaconda Suite <https://www.continuum.io/downloads>`_ by Continuum. If you're going to follow the tutorials, you'll need to install Python 3 for the python-osc support.\n* Install the PySerial package. If you have pip installed, you can do this by writing ``pip install pyserial`` in your command line interface (cmd on Windows).\n* **Windows only** install `ST's virtual COM driver <http://www.st.com/content/st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-utilities/stsw-stm32102.html>`_. After running this installer, please run the correct driver package for your system, located in \"C:\\\\Program Files (x86)\\\\STMicroelectronics\\\\Software\\\\Virtual comport driver\". Choose Win7 if you run Windows 7 or older. Choose Win8 for Windows 8 or newer. Run \"dpinst_amd64.exe\" on a 64-bit system, \"dpinst_x86.exe\"on a 32-bit system.\n\nInstalling this package\n-----------------------\nJust run ``pip install pypozyx``\n\nPyPozyx is now installed. To check whether it is: if you followed all the steps correctly, and know which port your Pozyx is on, the following code should work:\n\n.. code:: python\n\n  from pypozyx import PozyxSerial\n  port = 'COMX' # on UNIX systems this will be '/dev/ttyACMX'\n  p = PozyxSerial(port)\n\n\nIf your port is correct and the serial connection to the Pozyx isn't used by other software, this will run without any errors.\n\nBut! How do I know what port my Pozyx is on?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* You can see the COM ports on your system easily using Python with: ``python -c \"from pypozyx import *;list_serial_ports()\"``\n\n* **NEW** You can quickly find whether there's a recognized Pozyx device using: ``python -c \"from pypozyx import *;print(get_first_pozyx_serial_port())\"``\n\n\nDocumentation and examples\n--------------------------\nYou can find the Python tutorials on our site. You probably got here from `the getting started page <https://www.pozyx.io/Documentation/Tutorials/getting_started/Python>`_\n\nDocumentation can be found `here <https://www.pozyx.io/Documentation/Datasheet/python>`_.\n\n* This was originally a port of the Pozyx's Arduino library, so most of the `Arduino Library Documentation <https://www.pozyx.io/Documentation/Datasheet/arduino>`_ is transformable to this. The major difference is that you don't ever again need to pass along the length of the data you're reading/writing. This is taken care of by the library through the Data and SingleRegister classes like so:\n\n.. code:: python\n\n  whoami = SingleRegister()\n  pozyx.regRead(POZYX_WHO_AM_I, whoami) # which is pozyx.getWhoAmI(whoami)\n\n* `SingleRegister(value=0, size=1, signed=1)` is basically an instance `Data([0], 'B')`, which functions as a single uint8_t. If you want to make your custom data, for a single register you can adapt the size and signed parameters, and for larger data structures you can use your own data formats. `Data([0]*3, 'BHI')`, for example, creates a structure of 1 uint8_t, uint16_t and uint32_t. Writing and reading data using this example as a parameter will automatically read/write 7 bytes worth of data. To specify your own data formats, check the `struct package documentation for Python 3 <https://docs.python.org/3.5/library/struct.html#format-characters>`_ or `Python 2 <https://docs.python.org/2/library/struct.html>`_.\n\n* A more pythonic library would be nice, but isn't in the works.\n\n\nMore usage examples can be found in the `useful <https://github.com/pozyxLabs/Pozyx-Python-library/tree/master/useful>`_ and `tutorials <https://github.com/pozyxLabs/Pozyx-Python-library/tree/master/tutorials>`_ folders of the repository.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/pozyxLabs/Pozyx-Python-library/archive/v1.3.10.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/frantp/Pozyx-Python-library",
    "keywords": "pozyx,serial,positioning,localisation",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypozyx-i2c",
    "package_url": "https://pypi.org/project/pypozyx-i2c/",
    "platform": "",
    "project_url": "https://pypi.org/project/pypozyx-i2c/",
    "project_urls": {
      "Download": "https://github.com/pozyxLabs/Pozyx-Python-library/archive/v1.3.10.tar.gz",
      "Homepage": "https://github.com/frantp/Pozyx-Python-library"
    },
    "release_url": "https://pypi.org/project/pypozyx-i2c/1.3.10/",
    "requires_dist": [
      "pyserial (>=3.0smbus2>=0.3.0)"
    ],
    "requires_python": "",
    "summary": "Python library for Pozyx devices",
    "version": "1.3.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6267102,
  "releases": {
    "1.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4a36546bec62eba578a0391be85a8cded3614140ba3e9c3710919bf77002e87",
          "md5": "58d0d1db754b3b1e8fd1175afa9b2b71",
          "sha256": "b029cc499d0d489f6a1acb16cfa3f3b214c5d3f8b97bf31e29313a34eefbef85"
        },
        "downloads": -1,
        "filename": "pypozyx_i2c-1.3.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58d0d1db754b3b1e8fd1175afa9b2b71",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 55819,
        "upload_time": "2019-12-09T13:02:33",
        "upload_time_iso_8601": "2019-12-09T13:02:33.238697Z",
        "url": "https://files.pythonhosted.org/packages/d4/a3/6546bec62eba578a0391be85a8cded3614140ba3e9c3710919bf77002e87/pypozyx_i2c-1.3.10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4a36546bec62eba578a0391be85a8cded3614140ba3e9c3710919bf77002e87",
        "md5": "58d0d1db754b3b1e8fd1175afa9b2b71",
        "sha256": "b029cc499d0d489f6a1acb16cfa3f3b214c5d3f8b97bf31e29313a34eefbef85"
      },
      "downloads": -1,
      "filename": "pypozyx_i2c-1.3.10-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58d0d1db754b3b1e8fd1175afa9b2b71",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 55819,
      "upload_time": "2019-12-09T13:02:33",
      "upload_time_iso_8601": "2019-12-09T13:02:33.238697Z",
      "url": "https://files.pythonhosted.org/packages/d4/a3/6546bec62eba578a0391be85a8cded3614140ba3e9c3710919bf77002e87/pypozyx_i2c-1.3.10-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}