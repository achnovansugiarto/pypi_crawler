{
  "info": {
    "author": "Sergiu Popescu",
    "author_email": "popescunsergiu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "************************\npytest-selenium-enhancer\n************************\n\n\npytest-selenium-enhancer is a plugin for pytest_ that provides enhanced webdriver functionality by dynamically\nadding methods to:\n- remote.webdriver.Webdriver\n- remote.webdriver.WebElement\n\nIt provides a set of commands to enable testing of WebComponents_ and Visual Regression Testing\n\n.. contents:: **Table of Contents**\n    :depth: 4\n\nRequirements\n============\n\nFollowing prerequisites are needed in order to use pytest-selenium-enhancer:\n\n- numpy\n- opencv-python >= 4.2.0.32\n- pillow >= 7.0.0\n- Python >= 3.7.5\n- pytest >= 5.3.0\n- pytest-variables >= 1.9.0\n- requests\n- selenium >= 3.141.0\n\nInstallation\n============\n\nTo install pytest-selenium-enhancer:\n\n.. code-block::\n\n  pip install pytest-selenium-enhancer\n\nFeatures and Usage\n==================\n\nCustom Commands\n---------------\n\nAdding custom commands\n^^^^^^^^^^^^^^^^^^^^^^\n\nCustom commands have to be added to the WebDriver and WebElement before they are used within the test project.\nList of built-in fixtures:\n.. code-block::\n\n    selenium_patcher\n        # Adds the predefined CustomCommands to WebDriver and WebElement\n\nTo extend the browser instance with own set of commands, the decorator *add_method* is here to help.\n.. code-block::\n\n    @pytest.fixture(scope='session')\n    def my_custom_commands():\n        @add_method(WebElement)\n        def wait_and_click(self, timeout):\n            \"\"\"Waits for a given period of time then clicks the element\n            \"\"\"\n            sleep(timeout)\n            self.click()\n\nTo add the command to WebElement simply add the fixture as param to the browser function\nExample of usage for the built-in fixture *selenium_patcher* and your defined fixture *my_custom_commands*:\n.. code-block::\n\n    @pytest.fixture(scope=\"function\")\n    def driver(variables, env_variables, selenium_patcher, my_custom_commands):\n        from selenium import webdriver\n        _driver = webdriver.Remote(\n            command_executor='https://%s:%s@hub-cloud.browserstack.com/wd/hub'\n                            % (env_variables.bs_username, env_variables.bs_key),\n            desired_capabilities=variables['capabilities'])\n        yield _driver\n        _driver.close()\n\nThe plugin provides a set of custom commands to use for browser testing with pytest_\n\nBuild in remote.Webdriver Custom Commands\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nshadow_find_element WebDriver\n+++++++++++++++++++++++++++++\n\n    Returns an element of a DOM subtree by given selector\n\n    *Usage*\n    .. code-block::\n\n        browser.shadow_find_element(selector)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"selector\", \"(obj:CSS Selector)\", \"CSS Selector as described here_\"\n\n    *Example*\n    .. code-block::\n\n        browser.shadow_find_element('custom-login-component')\n\nshadow_cascade_find_element WebDriver\n+++++++++++++++++++++++++++++++++++++\n\n    Returns an element of a DOM subtree by given list of selectors\n\n    *Usage*\n    .. code-block::\n\n        browser.shadow_cascade_find_element(selectors)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"selectors\", \"(obj:CSS Selector), n (obj:CSS Selector)\", \"CSS Selectors as described here_\"\n\n    *Example*\n    .. code-block::\n\n        browser.shadow_cascade_find_element('custom-login-component', 'custom-login-form', 'custom-field')\n\nshadow_find_elements WebDriver\n++++++++++++++++++++++++++++++\n\n    Returns a list of elements of a DOM subtree by given of selector\n\n    *Usage*\n    .. code-block::\n\n        browser.shadow_find_elements(selector)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"selectors\", \"(obj:CSS Selector)\", \"CSS Selectors as described here_\"\n\n    *Example*\n    .. code-block::\n\n        browser.shadow_cascade_find_element('custom-login-component')\n\nget_full_page_screenshot_as_base64 WebDriver\n++++++++++++++++++++++++++++++++++++++++++++\n\n    Gets full page screenshot of current page by automatically scroll the full width and height of the page\n        *NOTE:* Does not work for infinite scrolling pages\n\n    *Usage*\n    .. code-block::\n\n        browser.get_full_page_screenshot_as_base64(elements_to_hide, device_offset)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"elements_to_hide\", \"(obj)\", \"{'top': [sticky top elements that you want to hide after first horizontal scroll], 'all':[elements that you want to completely hide], 'bottom': [sticky bottom elements that you want to show only after first horizontal scroll]}\"\n        \"device_offset\", \"(int)\", \"iOS only. Used to define the height of the browser upper controls. Safari iOS browser controls are part of the screenshot taken by selenium so we want not to have them into a full page screenshot\"\n\n    *Example*\n    .. code-block::\n\n        elements_to_hide = {\n            \"start\": [self.get_header()._banner] if self.page_name is 'home_page'] else [],\n            \"all\": [],\n            \"end\": [self.get_persistent_isi()._component_container]\n        }\n        browser.get_full_page_screenshot_as_base64(elements_to_hide, 284)\n\nget_full_page_screenshot_as_png WebDriver\n+++++++++++++++++++++++++++++++++++++++++\n\n    Gets full page screenshot of current page by automatically scroll the full width and height of the page\n        *NOTE:* Does not work for infinite scrolling pages\n\n    *Usage*\n    .. code-block::\n\n        browser.get_full_page_screenshot_as_png(image_path, elements_to_hide, device_offset)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"image_path\", \"(str)\", \"Full path of the location to where to save the screenshot\"\n        \"elements_to_hide\", \"(obj)\", \"{'top': [sticky top elements that you want to hide after first horizontal scroll], 'all':[elements that you want to completely hide], 'bottom': [sticky bottom elements that you want to show only after first horizontal scroll]}\"\n        \"device_offset\", \"(int)\", \"iOS only. Used to define the height of the browser upper controls. Safari iOS browser controls are part of the screenshot taken by selenium so we want not to have them into a full page screenshot\"\n\n    *Example*\n    .. code-block::\n\n        elements_to_hide = {\n            \"start\": [self.get_header()._banner] if self.page_name is 'home_page'] else [],\n            \"all\": [],\n            \"end\": [self.get_persistent_isi()._component_container]\n        }\n        browser.get_full_page_screenshot_as_png(image_path, elements_to_hide, 284)\n\nBuild in remote.WebElement Custom Commands\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nshadow_find_element WebElement\n++++++++++++++++++++++++++++++\n\n    Returns a child element of a DOM subtree by given selector\n\n    *Usage*\n    .. code-block::\n\n        element.shadow_find_element(selector)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"selector\", \"(obj:CSS Selector)\", \"CSS Selector as described here_\"\n\n    *Example*\n    .. code-block::\n\n        custom_login_component = browser.find_element_by_tag_name('custom-login-component')\n        custom_login_component.shadow_find_element('custom-login-component')\n\nshadow_cascade_find_element WebElement\n++++++++++++++++++++++++++++++++++++++\n\n    Returns a child element of a DOM subtree by given list of selectors\n\n    *Usage*\n    .. code-block::\n\n        element.shadow_cascade_find_element(selectors)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"selectors\", \"(obj:CSS Selector), n (obj:CSS Selector)\", \"CSS Selectors as described here_\"\n\n    *Example*\n    .. code-block::\n\n        custom_login_component = browser.find_element_by_tag_name('custom-login-component')\n        custom_login_component.shadow_cascade_find_element('custom-login-component', 'custom-login-form', 'custom-field')\n\nshadow_find_elements WebElement\n+++++++++++++++++++++++++++++++\n\n    Returns a list of children elements of a DOM subtree by given of selector\n\n    *Usage*\n    .. code-block::\n\n        element.shadow_find_elements(selector)\n\n    *Parameters*\n    .. csv-table::\n\n        :header: \"Name\", \"Type\", \"Details\"\n        :widths: 20, 30, 50\n\n        \"selectors\", \"(obj:CSS Selector)\", \"CSS Selectors as described here_\"\n\n    *Example*\n    .. code-block::\n\n        custom_login_component = browser.find_element_by_tag_name('custom-login-component')\n        custom_login_component.shadow_cascade_find_element('custom-login-component')\n\nIf you want to know more about WebComponents_ and ShadowRoot_\n\n\n**NOTE:** For the above examples, the following piece of HTML, as seen in `Developer Tools`_, was considered:\n.. code-block::\n\n    <custom-login-component>\n        #shadowRoot (open)\n        <custom-login-form>\n            #shadowRoot (open)\n            <custom-field type=\"text\">\n                #shadowRoot (open)\n                <input></input>\n            </custom-field>\n            <custom-field type=\"password\">\n                #shadowRoot (open)\n                <input></input>\n            </custom-field>\n            <custom-button>Login\n                #shadowRoot (open)\n                <button></button>\n            </custom-button>\n        </custom-login-form>\n    </custom-login-component>\n\nCustom Waits\n------------\n\nwait_for_element_present\n^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_element_visible\n^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_element_not_visible\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_element_clickable\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_child_element_visible\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_child_element_not_visible\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_the_attribute_value\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_for_the_attribute_contain_value\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTODO\n\nwait_until\n^^^^^^^^^^\nTODO\n\nContributing\n============\n\nWe welcome contributions.\n\nTo learn more, see Contributing_\n\nE2E testing is brought to you by BrowserStack_.\n\n.. image:: https://github.com/popescunsergiu/pytest-selenium-enhancer/raw/master/.github/BrowserStack-logo.png\n    :alt: BrowserStack\n    :target: https://browserstack.com\n\nResources\n=========\n\n- `Release Notes`_\n- `Issue Tracker`_\n- Code_\n\n.. _pytest: http://pytest.org\n\n.. _WebComponents: https://developer.mozilla.org/en-US/docs/Web/Web_Components\n\n.. _here: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\n\n.. _ShadowRoot: https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\n.. _Developer Tools: https://developers.google.com/web/tools/chrome-devtools\n\n.. _Contributing: https://github.com/pytest-dev/pytest-selenium-enhancer/blob/master/.github/CONTRIBUTING.rst\n.. _BrowserStack: https://browserstack.com\n\n.. _Release Notes:  https://github.com/popescunsergiu/pytest-selenium-enhancer/blob/master/CHANGES.rst\n.. _Issue Tracker: https://github.com/popescunsergiu/pytest-selenium-enhancer/issues\n.. _Code: https://github.com/popescunsergiu/pytest-selenium-enhancer",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/popescunsergiu/pytest-selenium-enhancer/archive/v1.7.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/popescunsergiu/pytest-selenium-enhancer",
    "keywords": "py.test pytest qa",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-selenium-enhancer",
    "package_url": "https://pypi.org/project/pytest-selenium-enhancer/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-selenium-enhancer/",
    "project_urls": {
      "Download": "https://github.com/popescunsergiu/pytest-selenium-enhancer/archive/v1.7.0.tar.gz",
      "Homepage": "https://github.com/popescunsergiu/pytest-selenium-enhancer"
    },
    "release_url": "https://pypi.org/project/pytest-selenium-enhancer/1.7.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "pytest plugin for Selenium",
    "version": "1.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13661649,
  "releases": {
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83ea51a3939d51922f439ee420493bf3c61d37e1d9133a963aa18c101286ddaa",
          "md5": "712607babd601b7a95601e85707286c2",
          "sha256": "3884aa5bd46df7874d83562cc96dcf8b2a5a613edeca05994230839df469c559"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "712607babd601b7a95601e85707286c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7533,
        "upload_time": "2020-04-01T21:05:13",
        "upload_time_iso_8601": "2020-04-01T21:05:13.865922Z",
        "url": "https://files.pythonhosted.org/packages/83/ea/51a3939d51922f439ee420493bf3c61d37e1d9133a963aa18c101286ddaa/pytest-selenium-enhancer-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e506b7c9f645c563aa02aa2ae07950f82034d088376f56acac818b7986ca796b",
          "md5": "60c8e37c1e0fd405d54e6e58e0d03a72",
          "sha256": "879f8ba01304f2a591c3fc7c91c5445424df8562063da026045d151c82462c61"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60c8e37c1e0fd405d54e6e58e0d03a72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7572,
        "upload_time": "2020-04-01T21:36:44",
        "upload_time_iso_8601": "2020-04-01T21:36:44.103323Z",
        "url": "https://files.pythonhosted.org/packages/e5/06/b7c9f645c563aa02aa2ae07950f82034d088376f56acac818b7986ca796b/pytest-selenium-enhancer-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a037b955b198bf30fbb3af3b5a1a253374a12dba4cab609dc3e2fc51061aaf21",
          "md5": "a0bc24dc2f43c4568ddb2f8c8da63122",
          "sha256": "fcfdee5ae64ae6d896f9141afb221e0c1780a0f721db88a797578b0b2c73133a"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a0bc24dc2f43c4568ddb2f8c8da63122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7580,
        "upload_time": "2020-04-01T21:40:48",
        "upload_time_iso_8601": "2020-04-01T21:40:48.856429Z",
        "url": "https://files.pythonhosted.org/packages/a0/37/b955b198bf30fbb3af3b5a1a253374a12dba4cab609dc3e2fc51061aaf21/pytest-selenium-enhancer-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22ad379afad138747d84157e7af8e32090608ef1f603118a8490bfce074d2a51",
          "md5": "48a1023917a3bac354f7194418e2a640",
          "sha256": "da783c5979db5ea67bd6c86de19f2e55b84561be0f3273b0bf6bcaedf5b9b335"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "48a1023917a3bac354f7194418e2a640",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7550,
        "upload_time": "2020-04-09T13:22:59",
        "upload_time_iso_8601": "2020-04-09T13:22:59.542408Z",
        "url": "https://files.pythonhosted.org/packages/22/ad/379afad138747d84157e7af8e32090608ef1f603118a8490bfce074d2a51/pytest-selenium-enhancer-1.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd42ff721eef8e3d6462403610db88cfedf9d074310dd636c599860962b19c82",
          "md5": "0b5b6c6d4904735090b6fdcdeb88d355",
          "sha256": "13f4ccac605190abe5089c0172830b27ccf2188b8c77059b805866368f5b8e86"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0b5b6c6d4904735090b6fdcdeb88d355",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7628,
        "upload_time": "2020-04-09T13:23:00",
        "upload_time_iso_8601": "2020-04-09T13:23:00.943740Z",
        "url": "https://files.pythonhosted.org/packages/dd/42/ff721eef8e3d6462403610db88cfedf9d074310dd636c599860962b19c82/pytest-selenium-enhancer-1.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "849fcac67da8b697a23c9daf82bc80916c49175f2879daeea88a36dde73db4c1",
          "md5": "0052be340a9b0b353229af0383a6b366",
          "sha256": "cd60f34a844fda0c4a9aa5a64d03cc4b814c3ca0080d4d3869ef13fdf2050bd4"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0052be340a9b0b353229af0383a6b366",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10377,
        "upload_time": "2020-04-17T21:11:40",
        "upload_time_iso_8601": "2020-04-17T21:11:40.694148Z",
        "url": "https://files.pythonhosted.org/packages/84/9f/cac67da8b697a23c9daf82bc80916c49175f2879daeea88a36dde73db4c1/pytest-selenium-enhancer-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc881dec12d4be95c2930d0587de59a9fbf29b1876caf0156b8afc58508712a",
          "md5": "6c8711896925695167c3dd8d0f94da26",
          "sha256": "a27bc969c681f74ae4124995c3e5c915e35d010c8d0fa3e1a1c62f2d5d65e063"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c8711896925695167c3dd8d0f94da26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10920,
        "upload_time": "2020-04-20T20:14:28",
        "upload_time_iso_8601": "2020-04-20T20:14:28.562840Z",
        "url": "https://files.pythonhosted.org/packages/6d/c8/81dec12d4be95c2930d0587de59a9fbf29b1876caf0156b8afc58508712a/pytest-selenium-enhancer-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36adf0020d73541c04c3422688948b35db59099d4d699091867103f11884a9cd",
          "md5": "28308418aa4449c0dcaeeaa5dfe9501e",
          "sha256": "8df1d8f3b83ddfbbb7e4b0ecde1589226f62ec5510a4b8013f6d1202ad31ef9d"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "28308418aa4449c0dcaeeaa5dfe9501e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10916,
        "upload_time": "2020-07-23T14:03:12",
        "upload_time_iso_8601": "2020-07-23T14:03:12.818182Z",
        "url": "https://files.pythonhosted.org/packages/36/ad/f0020d73541c04c3422688948b35db59099d4d699091867103f11884a9cd/pytest-selenium-enhancer-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9be2248e9fa6f0f1dd7f4fd58bff087252fd91f344774315bd1f0244829895d7",
          "md5": "084175bd0427918f648a285bd92062fb",
          "sha256": "7215afe96b224792ab721eeeccaa6b123a7e1f41b458bf94fe4e4c8373ee15db"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "084175bd0427918f648a285bd92062fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11490,
        "upload_time": "2021-12-16T11:34:43",
        "upload_time_iso_8601": "2021-12-16T11:34:43.405811Z",
        "url": "https://files.pythonhosted.org/packages/9b/e2/248e9fa6f0f1dd7f4fd58bff087252fd91f344774315bd1f0244829895d7/pytest-selenium-enhancer-1.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28b4b8e5f70ef4620e9bfc00f042b2c4391761c0aeed56b6c13b104f34874620",
          "md5": "36a24912d535b93d0d39bc538697c6eb",
          "sha256": "773494dbc362ad9e1946d48c76206ee76af1ae60d5e26bdd9699cfaa31430785"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36a24912d535b93d0d39bc538697c6eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10465,
        "upload_time": "2020-08-10T10:03:29",
        "upload_time_iso_8601": "2020-08-10T10:03:29.298864Z",
        "url": "https://files.pythonhosted.org/packages/28/b4/b8e5f70ef4620e9bfc00f042b2c4391761c0aeed56b6c13b104f34874620/pytest-selenium-enhancer-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6cbd5530f74675a8849655d1a9379874e3d83a51b876997d1796ff7b2fbe4a6",
          "md5": "aee0a9d381d12f0a58a0b1ba14f431f4",
          "sha256": "18c535156c7cd318fe3ef0961c3d08eadc5b5dfb2c7590f947ab260f2a50478a"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aee0a9d381d12f0a58a0b1ba14f431f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10922,
        "upload_time": "2020-10-09T13:22:41",
        "upload_time_iso_8601": "2020-10-09T13:22:41.045638Z",
        "url": "https://files.pythonhosted.org/packages/d6/cb/d5530f74675a8849655d1a9379874e3d83a51b876997d1796ff7b2fbe4a6/pytest-selenium-enhancer-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1908a7a8004d6b50373e4369b2a61f71f15bd6ba85059fc26b69bf0dfe3df6a0",
          "md5": "cb310c26445bcc24ba90bb51f9e0ce0f",
          "sha256": "03a4fefab1929e41b7ec80bb37787ee0d88def220d3a08260ecb270473efb678"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cb310c26445bcc24ba90bb51f9e0ce0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10931,
        "upload_time": "2020-11-26T22:27:30",
        "upload_time_iso_8601": "2020-11-26T22:27:30.357888Z",
        "url": "https://files.pythonhosted.org/packages/19/08/a7a8004d6b50373e4369b2a61f71f15bd6ba85059fc26b69bf0dfe3df6a0/pytest-selenium-enhancer-1.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f68b732881772aebb39091a70027ec3b92fdad8b6d0b9024dfb0b251d0ba3a12",
          "md5": "67972476c7f2ee21440b0f9ba3a7759e",
          "sha256": "2b0add61e17cfcba223d3b22d7fbc628499de1bb9785fa626506118f8933c1b3"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67972476c7f2ee21440b0f9ba3a7759e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11507,
        "upload_time": "2021-12-16T11:39:36",
        "upload_time_iso_8601": "2021-12-16T11:39:36.223128Z",
        "url": "https://files.pythonhosted.org/packages/f6/8b/732881772aebb39091a70027ec3b92fdad8b6d0b9024dfb0b251d0ba3a12/pytest-selenium-enhancer-1.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e369607d93a13307a1914042408a82abdc3dbffc01fd1d0d9fdf7a348a73cb0f",
          "md5": "9a7b1bf37ca47b1d1a675d3ce6a3e467",
          "sha256": "8c0628733a54b4ba7f02e9b8da83241746c48770e4fbdad36b98b142026c1c4c"
        },
        "downloads": -1,
        "filename": "pytest-selenium-enhancer-1.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a7b1bf37ca47b1d1a675d3ce6a3e467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11489,
        "upload_time": "2022-04-29T06:41:07",
        "upload_time_iso_8601": "2022-04-29T06:41:07.810462Z",
        "url": "https://files.pythonhosted.org/packages/e3/69/607d93a13307a1914042408a82abdc3dbffc01fd1d0d9fdf7a348a73cb0f/pytest-selenium-enhancer-1.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e369607d93a13307a1914042408a82abdc3dbffc01fd1d0d9fdf7a348a73cb0f",
        "md5": "9a7b1bf37ca47b1d1a675d3ce6a3e467",
        "sha256": "8c0628733a54b4ba7f02e9b8da83241746c48770e4fbdad36b98b142026c1c4c"
      },
      "downloads": -1,
      "filename": "pytest-selenium-enhancer-1.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9a7b1bf37ca47b1d1a675d3ce6a3e467",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11489,
      "upload_time": "2022-04-29T06:41:07",
      "upload_time_iso_8601": "2022-04-29T06:41:07.810462Z",
      "url": "https://files.pythonhosted.org/packages/e3/69/607d93a13307a1914042408a82abdc3dbffc01fd1d0d9fdf7a348a73cb0f/pytest-selenium-enhancer-1.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}