{
  "info": {
    "author": "Rolando Rio Garaboa",
    "author_email": "rolandorio06@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# easy_mvp\n\n## Description\n\n**easy_mvp** is a package that makes it easy to build desktop applications\nusing **MVP** pattern, **Python** and **PyQt5**. This is achieved by using\na set of classes and practices similar to those used in the **Android framework**.\n\nThe basic idea behind this package is to open a presenter from\nanother presenter and that the new presenter fills the window for\ncomplete. This is similar to **Android applications**, which\nwhen opening a new **Activity**, they replace the old one with the new one.\nIf the Back button is pressed, then the new **Activity** is removed\nand the old one reappears on the screen. This gives the impression\nthat there is a **stack of Activity**.\n\nIn addition, **easy_mvp** offers the possibility of doing the above **in more than\na window**, since desktop applications are very different to **Android apps**.\n\n## Installation\n\nTo install this package you need to have **Python** installed in your system.\nThen you can run this command to install this package:\n\n````shell script\npip install easy_mvp\n````\n\n\n## Explaining the mechanism\n\nThe following explanations are reflected in ``demo.py`` program.\n\n### The application model created by **easy_mvp** is like this:\n\n![App Manager and windows](https://github.com/R0land013/easy-mvp/blob/master/readme_img/app_manager_and_windows.png?raw=true)\n\nThe **ApplicationManager** class is the **entry point** of the program. This\nclass is the one that knows the windows, creates them and destroys them. Each\nwindow holds a **stack of presenters**. In this way it is implemented\nthe same behavior that Android applications have. Class\n**Intent** is used to **transition** from one presenter to another,\nregardless of whether the new presenter is started in a new window.\n\n\n### The behavior of the windows is represented as follows:\n\n![Window with its internal stack presenter](https://github.com/R0land013/easy-mvp/blob/b2c8ba51e5315679848925967611e1e5931871dd/readme_img/window_with_its_internal_stack.png?raw=true)\n\nAs you can see the **window has a stack of presenters**, the\nwhich are attached to their views, therefore **all the\npresenters must possess a view**. Again we can see that the class\n**Intent** is the one that allows to add a new **pair of presenter-view**\nto the window stack. For this mechanism to work, the presenter\nclasses must **inherit from the AbstractPresenter** class.\n\n**AbstractPresenter** has several methods to open new presenters,\nclose the current presenter and to handle certain flows within the\napplication, such as when a presenter is going to be initialized, hidden,\nor closed.\n\n\n### The flow of events in a class that inherits from AbstractPresenter is like this:\n\n![flow_of_calls_on_presenter](https://github.com/R0land013/easy-mvp/blob/b2c8ba51e5315679848925967611e1e5931871dd/readme_img/flow_of_calls_on_presenter.png?raw=true)\n\nThe **_on_initialize** method is the first method called in the **AbstractPresenter** class.\nHere the instance variables of the presenter must be initialized. Also, you must\ncreate the instance of the view that corresponds to the presenter. Once created,\nthe view instance must be set with the **_set_view(view)** method, from\nthis way the view is made accessible to the rest of the classes in **easy_mvp environment**.\nThe view can be obtained with the **get_view** method of **AbstractPresenter**, if it was set\nby **_set_view(view)** first.\n\nThe **on_view_shown** method is called just after the presenter view\nis displayed in the graphical interface. In this method the data should be loaded,\nand the tables and forms filled.\n\nIf on the presenter whose view is visible, **_open_other_presenter** is called\nthen another presenter will be created, and this presenter will go to the top of the\n**stack of presenters**, and its view will be the only one visible in the graphical interface.\nThe view of presenter that called **_open_other_presenter** will no longer be visible.\nBefore this last occurs, the calling presenter will receive control of the program\nwith the method **on_view_covered**.\n\nIf now the top presenter calls _**close_this_presenter**, then the\npresenter view just below it will be visible again, and the\npresenter will receive control of the main thread via **on_view_discovered**.\nIn this method the view should be updated due to some change in the model.\n\nWhen the presenter at the top of the stack calls **_close_this_presenter**\nreceives the control with the **on_closing_presenter** method. In this method\nresources should be released and observers removed. After the call to\n**on_closing_presenter** the presenter and the view of the presenter will be\nremoved, and it will happen what it has been explained previously.\nIt should be noted that if the presenter who closes is the\nonly one that exists in the entire application, that is, there is only one\nwindow, and it owns only a presenter then the application will close with\nthe **status code 0**. To close the program with different code, use the **exit_app**\nmethod of AbstractPresenter.\n\n\n### Receiving data from presenters\n\nA presenter can receive data from another presenter that it has created,\nif the second one is closed using the **_close_this_presenter_with_result(result_data: dict, result: str = Intent.NO_RESULT)**\nmethod. In this way, the presenter that is below in the stack receives control of the\nprogram via **on_view_discovered_with_result(action: str, data: dict, result: str)** instead of\n**on_view_discovered**. The action parameter is the action that was passed to the **Intent** when\nit was ordered to open the new presenter. The result_data is a **Python dictionary** that the\npresenter who was on top can pass through\n**_close_this_presenter_with_result(result_data: dict, result: str = Intent.NO_RESULT)**. The result string can be used\nto tell the below presenter what happened on top presenter. In this way the below presenter can take different decisions\ndepending on the result returned by top presenter.\n\n\n### Managing global data\n\nData can be created to be accessible throughout the entire application. This is\naccomplished with the **set_global_data(key: str, data)** and **get_global_data(key: str)**\nmethods of **AbstractPresenter**. You can also check if a global data exists with the method\n**has_global_data(key: str)**, which returns True if it exists and False otherwise.\n\n\n## Knowing Intent in depth\n\nAs explained **Intent** is what makes it possible to open new presenters. You can specify\nthat the new presenter must be opened on a new window using\n**use_new_window(use_new_window: bool = False)**. You can also specify that\nif a new window is to be opened, then make it modal or not with the method\n**use_modal(self, modal: bool = False)**.\n\nAn intent can be specified with an action with **set_action(action: str)**, like so\nthe new presenter may behave differently depending on the action received.\n\n**Intent** also allows data to be passed to a new presenter via **set_data(data: dict)**.\nTo see examples of how **Intent** is used, check out the ``demo.py`` program.\n\n\n## Acting when user closes window\n\nIf the user clicks the close window button then all presenters in the\npresenter stack of the window will receive the **on_window_closing(self)**\ncall. The first presenter to receive the call will be the one which is\non the stack top, the next to receive the call will be the below presenter.\nThis flow of calls will occur all the way down through the window stack.\nWhen all presenters have executed **on_window_closing(self)** then the\nwindow will be closed. If the window that is being closing has child\nwindows, then all its children will receive the **on_window_closing(self)**\ncalls in the same way the parent window received it.\n\nThis method is useful to close database connections, close files and\nstop threads. All you must close goes here.\n\n\n\n## Customize window title\n\nEvery presenter can change the window title. This is useful because each presenter will do\na different task, and therefore you would like to change the title of the window depending\non it.\n\nYou can reimplement the method **get_default_window_title(self)** to set a custom\nwindow title. You only have to set **return 'My custom window title'** in the method's\nbody. This method will be called before the presenter receives the\n***on_view_show***, ***on_view_discovered*** and ***on_view_discovered_with_result*** calls.\nBy default, this method returns the *'No Title, reimplement get_default_window_title'* string.\n\n\nBut if you want more power on changing the window title you can use the\n**_set_window_title(self, window_title: str)** to immediately change it. After calling\nthis method the window title can be replaced automatically if the presenter who set it is popped,\nor if a new presenter is added on top. This will happen because of the calls to\n**get_default_window_title(self)** on below presenter or on the new presenter respectively,\nduring the **easy-mvp** event flow.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/R0land013/easy-mvp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easy-mvp",
    "package_url": "https://pypi.org/project/easy-mvp/",
    "platform": null,
    "project_url": "https://pypi.org/project/easy-mvp/",
    "project_urls": {
      "Homepage": "https://github.com/R0land013/easy-mvp"
    },
    "release_url": "https://pypi.org/project/easy-mvp/0.1.1/",
    "requires_dist": [
      "PyQt5 (>=5.15.6)"
    ],
    "requires_python": "",
    "summary": "Construct MVP PyQt5 application easily",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16129101,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc1cc6e4c18ae9affb032d969abec116ad87e233e782262bfffcbf845eb66a3e",
          "md5": "282b8cfc1c412c67dc1e5579e1743c19",
          "sha256": "5717f475b263281910afba94a7cc324e71479bf436a2a109da4aae5e816beab7"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "282b8cfc1c412c67dc1e5579e1743c19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8497,
        "upload_time": "2022-06-14T20:27:21",
        "upload_time_iso_8601": "2022-06-14T20:27:21.631160Z",
        "url": "https://files.pythonhosted.org/packages/fc/1c/c6e4c18ae9affb032d969abec116ad87e233e782262bfffcbf845eb66a3e/easy_mvp-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aad5210304b2d52b5cfd2d24dff540dcadff5852500077736b933112b66b8cd",
          "md5": "8cee0c81a73e65d8de4c327c5a08ffac",
          "sha256": "48759732a9dbeaff00836c71e00f974560646a14b3de3bb4f0d1b206e27cbf61"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8cee0c81a73e65d8de4c327c5a08ffac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9785,
        "upload_time": "2022-06-14T20:27:23",
        "upload_time_iso_8601": "2022-06-14T20:27:23.243022Z",
        "url": "https://files.pythonhosted.org/packages/4a/ad/5210304b2d52b5cfd2d24dff540dcadff5852500077736b933112b66b8cd/easy_mvp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feb28305cf345ad374a7b7031d76ebb211bfe2bccfc6f6f189ad4f609c35aab0",
          "md5": "b87811a044baa859af2bfa9440f62adb",
          "sha256": "23a70e4c17e2f351a66fd66726089644edb26cb2ef72a3f401a1140888ff09e7"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b87811a044baa859af2bfa9440f62adb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8647,
        "upload_time": "2022-06-20T19:02:04",
        "upload_time_iso_8601": "2022-06-20T19:02:04.182621Z",
        "url": "https://files.pythonhosted.org/packages/fe/b2/8305cf345ad374a7b7031d76ebb211bfe2bccfc6f6f189ad4f609c35aab0/easy_mvp-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f990b5e10fe6317bcced6d7c97f77e8b43c4323355e5f1f012f1fe37d83bfad",
          "md5": "67d7eeffdaf2ecb82432c0b23da494bf",
          "sha256": "05c84a2161ba215470870522044f5646c2ba6471cc2e1d26729b40d89267fc17"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "67d7eeffdaf2ecb82432c0b23da494bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9956,
        "upload_time": "2022-06-20T19:02:07",
        "upload_time_iso_8601": "2022-06-20T19:02:07.339769Z",
        "url": "https://files.pythonhosted.org/packages/6f/99/0b5e10fe6317bcced6d7c97f77e8b43c4323355e5f1f012f1fe37d83bfad/easy_mvp-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1848584a91599b5f0ca4a9852ed567642a7a70e0f2d656d3e29275409fba6e36",
          "md5": "e3ed062bdd4bbf2a0475bc602fc60cdd",
          "sha256": "450375454a8455e545f9f732a2e04db4b5c51892d01cb3655cc624d9227f9edf"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3ed062bdd4bbf2a0475bc602fc60cdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8847,
        "upload_time": "2022-08-11T17:32:17",
        "upload_time_iso_8601": "2022-08-11T17:32:17.409243Z",
        "url": "https://files.pythonhosted.org/packages/18/48/584a91599b5f0ca4a9852ed567642a7a70e0f2d656d3e29275409fba6e36/easy_mvp-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daf6c4c9528e4b0230ac941534409e8d0eae3bbac5d51664f2d3ddce3c3b5952",
          "md5": "668b6a0e17b8e1b55067f01137412b85",
          "sha256": "ed01e95c860f8cdec86bc1ea81cdde4651582f725934c8b96c1d6c907a4f0b44"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "668b6a0e17b8e1b55067f01137412b85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9972,
        "upload_time": "2022-08-11T17:32:18",
        "upload_time_iso_8601": "2022-08-11T17:32:18.885070Z",
        "url": "https://files.pythonhosted.org/packages/da/f6/c4c9528e4b0230ac941534409e8d0eae3bbac5d51664f2d3ddce3c3b5952/easy_mvp-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd5d6ef6d9a1508b9a2136cb349cc73422bf4907892f443443d3f95540ac36a0",
          "md5": "924497b4a95f628471a4f98d77f23966",
          "sha256": "891d539dfc732b8308441ae671e4edefed6de5bde082d13b9ff8083e95e7f360"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "924497b4a95f628471a4f98d77f23966",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9578,
        "upload_time": "2022-09-23T19:54:39",
        "upload_time_iso_8601": "2022-09-23T19:54:39.927210Z",
        "url": "https://files.pythonhosted.org/packages/dd/5d/6ef6d9a1508b9a2136cb349cc73422bf4907892f443443d3f95540ac36a0/easy_mvp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae8eab734a909ea72ba0332f65153a3a5ebd577f0568cb2ab74910464578d9ad",
          "md5": "b8352aa6d9ecbb8cf77e85a317b84df1",
          "sha256": "52cfeb58728a90f1cc73ffbd6a650a313630fa64204d2b3c4497869d3fde10ff"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b8352aa6d9ecbb8cf77e85a317b84df1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11282,
        "upload_time": "2022-09-23T19:54:44",
        "upload_time_iso_8601": "2022-09-23T19:54:44.085919Z",
        "url": "https://files.pythonhosted.org/packages/ae/8e/ab734a909ea72ba0332f65153a3a5ebd577f0568cb2ab74910464578d9ad/easy_mvp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aad15f4ed28018014b2a51f89fa91fd90b22c5a13dfe2dd48beb9d40d684947c",
          "md5": "d1c7d56d7677cf5bff9579850cbb418d",
          "sha256": "0f4e6f5f92192af982a3c26aff882f213cf29f8f4282a7482dc3b7568be6d5eb"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1c7d56d7677cf5bff9579850cbb418d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9563,
        "upload_time": "2022-12-16T18:22:36",
        "upload_time_iso_8601": "2022-12-16T18:22:36.608971Z",
        "url": "https://files.pythonhosted.org/packages/aa/d1/5f4ed28018014b2a51f89fa91fd90b22c5a13dfe2dd48beb9d40d684947c/easy_mvp-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55b5510aad6885123567cc541f651ccd0404470e968486779d04031c55524bec",
          "md5": "3d43d6443d1a543d804f8e0f81a35011",
          "sha256": "2b9b2b81e3e3f162966d84ea4c6f58077e2fb84c01d669564ec12e28204b5858"
        },
        "downloads": -1,
        "filename": "easy_mvp-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d43d6443d1a543d804f8e0f81a35011",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11111,
        "upload_time": "2022-12-16T18:22:38",
        "upload_time_iso_8601": "2022-12-16T18:22:38.197632Z",
        "url": "https://files.pythonhosted.org/packages/55/b5/510aad6885123567cc541f651ccd0404470e968486779d04031c55524bec/easy_mvp-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aad15f4ed28018014b2a51f89fa91fd90b22c5a13dfe2dd48beb9d40d684947c",
        "md5": "d1c7d56d7677cf5bff9579850cbb418d",
        "sha256": "0f4e6f5f92192af982a3c26aff882f213cf29f8f4282a7482dc3b7568be6d5eb"
      },
      "downloads": -1,
      "filename": "easy_mvp-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1c7d56d7677cf5bff9579850cbb418d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9563,
      "upload_time": "2022-12-16T18:22:36",
      "upload_time_iso_8601": "2022-12-16T18:22:36.608971Z",
      "url": "https://files.pythonhosted.org/packages/aa/d1/5f4ed28018014b2a51f89fa91fd90b22c5a13dfe2dd48beb9d40d684947c/easy_mvp-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55b5510aad6885123567cc541f651ccd0404470e968486779d04031c55524bec",
        "md5": "3d43d6443d1a543d804f8e0f81a35011",
        "sha256": "2b9b2b81e3e3f162966d84ea4c6f58077e2fb84c01d669564ec12e28204b5858"
      },
      "downloads": -1,
      "filename": "easy_mvp-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3d43d6443d1a543d804f8e0f81a35011",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11111,
      "upload_time": "2022-12-16T18:22:38",
      "upload_time_iso_8601": "2022-12-16T18:22:38.197632Z",
      "url": "https://files.pythonhosted.org/packages/55/b5/510aad6885123567cc541f651ccd0404470e968486779d04031c55524bec/easy_mvp-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}