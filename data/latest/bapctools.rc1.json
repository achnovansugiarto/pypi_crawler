{
  "info": {
    "author": "Ragnar Groot Koerkamp",
    "author_email": "ragnar.grootkoerkamp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# BAPCtools\n\n[![pipeline status](https://gitlab.com/ragnar.grootkoerkamp/BAPCtools/badges/master/pipeline.svg)](https://gitlab.com/ragnar.grootkoerkamp/BAPCtools/commits/master)\n\nBAPCtools is a tool for creating and developing problems following the\nCLICS (DOMjudge/Kattis) problem format specified [here](https://clics.ecs.baylor.edu/index.php?title=Problem_format).\n\nThe aim of this tool is to run all necessary compilation, validation, and\ntesting commands while working on an ICPC-style problem.\nIdeally one should never have to manually run any compilation or testing command themselves.\n\nI'm interested to know who's using this, so feel free to inform me (e.g. via an issue) if so ;)\nThe current state is relatively stable, but things do change from time to\ntime since I'm not aware of usage outside of BAPC yet.\n\n## Installation\n\nYou can install the [bapctools-git AUR\npackage](https://aur.archlinux.org/packages/bapctools-git/), mirrored\n[here](https://github.com/RagnarGrootKoerkamp/bapctools-git), or use the [Docker\nimage](#Docker).\n\nOtherwise, clone this repository and install the required dependencies manually.\n(If you know how to make a Debian package, feel free to help out.)\n\n- Python 3 (>= 3.6).\n- The [yaml library](https://pyyaml.org/wiki/PyYAMLDocumentation) via `pip install pyyaml` or the `python[3]-yaml` Arch Linux package.\n- The [colorama library](https://pypi.org/project/colorama/) via `pip install colorama` or the `python[3]-colorama` Arch Linux package.\n- The `argcomplete` library for command line argument completion. Install via\n  `python[3]-argcomplete`.\n\n  - Note that actually using `argcomplete` is optional, but recommended.\n    Detailed instructions are [here](https://argcomplete.readthedocs.io/en/latest/).\n\n    TL;DR: Put `eval \"$(register-python-argcomplete[3] tools.py)\"` in your `.bashrc` or `.zshrc`.\n\nOptional dependencies, required for some subcommands:\n\n- The [ruamel.yaml library](https://pypi.org/project/ruamel.yaml/) via `pip install ruamel.yaml` or the `python[3]-ruamel-yaml` Arch Linux package.\n  - This is only needed for commands that update `generators.yaml`.\n- The `latexmk` and `pdflatex` commands, provided by `texlive-bin` on Arch Linux and\n  potentially some specific LaTeX packages (like tikz) provided by\n  `texlive-extra`.\n  These are only needed for building `pdf` files, not for `run` and `validate` and such.\n\nAfter cloning the repository, symlink [bin/tools.py](bin/tools.py) to somewhere in your `$PATH`. E.g., if `~/bin/` is in your `$PATH`, you can do:\n\n```\n% ln -s ~/git/BAPCtools/bin/tools.py ~/bin/bt\n```\n\n### Windows\n\nFor Windows, you'll need the following in your\n`path`:\n\n- `Python` for Python 3\n- `g++` to compile C++\n- `javac` and `java` to compile and run `java`.\n\nResource limits (memory limit/hard cpu time limit) are also not supported.\n\nBAPCtools makes use of symlinks for building programs. By default users are not allowed to create symlinks on Windows.\nThis can be fixed by enabling Developer Mode on Windows (Only works for Windows 10, version 1703 or newer).\n\n(TODO: Copy instead of symlink files when symlinking is not allowed.)\n\n### Docker\n\nA docker image containing this git repo and dependencies, together with commonly\nused languages, is provided at\n[ragnargrootkoerkamp/bacptools](https://hub.docker.com/r/ragnargrootkoerkamp/bapctools).\nThis version may be somewhat outdated. Ping me if you'd like it to be updated.\n\nThis image can be used for e.g.:\n\n- running CI on your repo. Also see `bt gitlabci` which generates a\n  `.gitlab-ci.yaml` file. Make sure to clear the entrypoint, e.g. `entrypoint: [\"\"]`.\n- running `bt` on your local problems. Use this command to mount your local\n  directory into the docker image and run a command on it:\n  ```\n  docker run -v $PWD:/data --rm -it ragnargrootkoerkamp/bapctools <bt subcommands>\n  ```\n\n## Usage\n\nBAPCtools can be run either from a problem directory or a contest directory. This\nis automatically detected by searching for the `problem.yaml` file.\n\nThe most common commands and options to use on an existing repository are:\n\n- [`bt run [-v] [submissions [submissions ...]] [testcases [testcases ...]]`](#run)\n- [`bt test <submission> [--interactive | --samples | [testcases [testcases ...]]]`](#test)\n- [`bt generate [-v] [--jobs JOBS]`](#generate)\n- [`bt validate [-v] [--remove | --move-to DIR] [testcases [testcases ...]]`](#validate)\n- [`bt pdf [-v]`](#pdf)\n\nThe list of all available commands and options is at [doc/commands.md#synopsis](doc/commands.md#synopsis),\nand more information regarding the implementation is at [doc/implementation_notes.md](doc/implementation_notes.md).\n\n### Run\n\n- `bt run [-v] [submissions [submissions ...]] [testcases [testcases ...]]`\n\nWithout arguments, the `run` command runs all submissions against all testcases.\nSpecify one or more submissions and one or more testcases to only run the given submissions against the given testcases.\n\nBefore running the given submissions, this command first makes sure that all generated testcases are up to date (in case `generators/generators.yaml` was found).\n\n![run](doc/images/run.gif)\n\nBy default, `bt run` only prints one summary line per submission, and one additional line for each testcase with an unexpected result. Use `-v` to print one line per testcase instead.\n\n![run -v](doc/images/run-v.gif)\n\n### Test\n\n- `bt test <submission> [--samples | [testcases [testcases ...]]]`\n\nUse the `test` command to run a single submission on some testcases. The submission `stdout` and `stderr` are printed to the terminal instead of verified as an answer file.\nUse `--samples` to run on the samples, or pass a list of testcases or directories containing testcases. Use `--interactive`/`-i` to run in interactive mode, where console input is forwarded to the submission.\nThis rebuilds and reruns the program until either `control-C` or `control-D` is pressed. It's also possible to supply the test case on the command line directly using e.g. `< /path/to/file.in` or `<<< \"10 20\"`.\n\n![test](doc/images/test.png)\n\n### Generate\n\n- `bt generate [-v] [--jobs JOBS]`\n\nUse the `generate` command to generate the testcases specified in `generators/generators.yaml`. See [doc/generators.md](doc/generators.md) for the specification of `generators.yaml` and see [doc/commands.md#generate](doc/commands.md#generate) for the full list of arguents.\nUse `-j 0` to disable running multiple jobs in parallel (the default is `4`).\n\n![generate](./doc/images/generate.gif)\n\n### Validate\n\n- `bt validate [-v] [--remove | --move-to DIR] [testcases [testcases ...]]`\n\nValidate all the `.in` and `.ans` for all (given) testcases. It runs all validators from `input_validators` and `output_validators`.\n\nValidators can be one of\n\n- a single-file program.\n- a multi-file program with all files in a common directory.\n- a .ctd CheckTestData file (this needs the `checktestdata` executable in your `$PATH`).\n- a .viva file.\n\nYou can use `--remove` to delete all failing testcases or `--move <dir>` to move\nthem to a separate directory.\n\n![validator](./doc/images/validate.png)\n\n### Pdf\n\n- `bt pdf [-v]`\n\nUse this command to compile the `problem.pdf` from the `problem_statement/problem.en.tex` LaTeX statement.\n`problem.pdf` is written to the problem directory itself.\n\nThis can also be used to create the contest pdf by running it from the contest directory.\n\n## Contributing / Style guide\n\n- The python code in the repository is formatted using [black](https://github.com/psf/black).\n  To enable the pre-commit hook, install [pre-commit](https://pre-commit.com/)\n  with `pip` or your package manager (Arch: `python-pre-commit`) and run\n  `pre-commit install` from the repository root. All python code will now automatically be formatted\n  on each commit.\n\n- Imports are usually ordered with system libraries first, followed by a\n  newline, followed by local includes. Both groups are sorted alphabetically,\n  and `import` comes before `from ... import`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ragnargrootkoerkamp/bapctools",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bapctools",
    "package_url": "https://pypi.org/project/bapctools/",
    "platform": "",
    "project_url": "https://pypi.org/project/bapctools/",
    "project_urls": {
      "Homepage": "https://github.com/ragnargrootkoerkamp/bapctools"
    },
    "release_url": "https://pypi.org/project/bapctools/0.1/",
    "requires_dist": [
      "yaml",
      "colorama",
      "argcomplete",
      "ruamel-yaml",
      "python-version (>=\"3\")"
    ],
    "requires_python": "",
    "summary": "Tools for developing ICPC-style programming contest problems.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11808491,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6227dd93645594415e229777b1a5b2c006d2dc6a10716c1a4dc66a421014a0e7",
          "md5": "623b3422f46b1a283a015882b2bfdd4a",
          "sha256": "f65e3987def397e6fbb13eed82aeaff66f4ed273c486e606c5e8fad33b836e08"
        },
        "downloads": -1,
        "filename": "bapctools-0.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "623b3422f46b1a283a015882b2bfdd4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23097,
        "upload_time": "2021-10-22T22:38:58",
        "upload_time_iso_8601": "2021-10-22T22:38:58.314934Z",
        "url": "https://files.pythonhosted.org/packages/62/27/dd93645594415e229777b1a5b2c006d2dc6a10716c1a4dc66a421014a0e7/bapctools-0.1.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d6262410930545e1f501b7e5c1e63f7798d95f3a7238bdf2bcc9dc4fdbebc5d",
          "md5": "aeec6a46cbaafe16882de87fc3e8a8cd",
          "sha256": "31deb1bec6b2fd67289cb3878edc9c68a6d009d3e7d5a81b70e1e70472c8e3c4"
        },
        "downloads": -1,
        "filename": "bapctools-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aeec6a46cbaafe16882de87fc3e8a8cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16996,
        "upload_time": "2021-10-22T22:38:24",
        "upload_time_iso_8601": "2021-10-22T22:38:24.193567Z",
        "url": "https://files.pythonhosted.org/packages/5d/62/62410930545e1f501b7e5c1e63f7798d95f3a7238bdf2bcc9dc4fdbebc5d/bapctools-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6227dd93645594415e229777b1a5b2c006d2dc6a10716c1a4dc66a421014a0e7",
        "md5": "623b3422f46b1a283a015882b2bfdd4a",
        "sha256": "f65e3987def397e6fbb13eed82aeaff66f4ed273c486e606c5e8fad33b836e08"
      },
      "downloads": -1,
      "filename": "bapctools-0.1.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "623b3422f46b1a283a015882b2bfdd4a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23097,
      "upload_time": "2021-10-22T22:38:58",
      "upload_time_iso_8601": "2021-10-22T22:38:58.314934Z",
      "url": "https://files.pythonhosted.org/packages/62/27/dd93645594415e229777b1a5b2c006d2dc6a10716c1a4dc66a421014a0e7/bapctools-0.1.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d6262410930545e1f501b7e5c1e63f7798d95f3a7238bdf2bcc9dc4fdbebc5d",
        "md5": "aeec6a46cbaafe16882de87fc3e8a8cd",
        "sha256": "31deb1bec6b2fd67289cb3878edc9c68a6d009d3e7d5a81b70e1e70472c8e3c4"
      },
      "downloads": -1,
      "filename": "bapctools-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aeec6a46cbaafe16882de87fc3e8a8cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16996,
      "upload_time": "2021-10-22T22:38:24",
      "upload_time_iso_8601": "2021-10-22T22:38:24.193567Z",
      "url": "https://files.pythonhosted.org/packages/5d/62/62410930545e1f501b7e5c1e63f7798d95f3a7238bdf2bcc9dc4fdbebc5d/bapctools-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}