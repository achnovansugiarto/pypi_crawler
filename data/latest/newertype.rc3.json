{
  "info": {
    "author": "Evan Williams",
    "author_email": "ejw@fig.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# newertype\n\nAn Implementation of the NewType Pattern for Python that works in dynamic contexts.\n\n## What is it?\n\n`NewerType` is a package that provides a semi-transparent wrapper to an existing type that allows it to be used\nmostly as if it's just the wrapped type, but which allows type checking as if it's a distinct type at runtime.\n\nWith the addition to Python of [PEP 483](https://peps.python.org/pep-0483/),\n[PEP 484](https://peps.python.org/pep-0484/), & the\n[typing](https://docs.python.org/3/library/typing.html#module-typing) package, Python added support for type\nhints. That included an implementation of the Haskell [`newtype`](https://wiki.haskell.org/Newtype) which was\ncleverly called `NewType`.\nAs explained in [the documentation](https://docs.python.org/3/library/typing.html#typing.NewType),\nPython's `NewType` is, like most of the\ntyping library, meant for use by static type checkers. This means that, when the code is running, the _Newness_ of\nthe type is erased, leaving just the wrapped type & no way to tell that there was ever a `Newtype`, either by\nthe code or by Python itself.\n\n`NewerType` provides the same kind of wrapper as `NewType`, but allows (& enforces) type checking at runtime.\nthis means, for example, that if you wrap an `int` in a `NewerType`, you can do all of the arithmetic &\ncomparison operations on an instance of that type that you could with a normal `int` with either different\ninstances of that type, or `int`s. But you will not be able to mix _different_ `NewerType`s, even if they\nall wrap `int`s.\n\nThis allows you to never have to worry if you are adding `Miles` to `Kilometers`, or mixing up a `UserName`\nwith a `Password`.\n\n### Main Features\n\n* A wrapper that allows dynamic type checking while mostly not getting in the way\n* Carries type information with the object so you can always use `isinstace()` or `type()` to know what it is\n* Forwards the magic methods from the wrapped object so things like arithmetic or indexing work\n* Allows you to customize what methods are forwarded\n* No dependencies!\n\n## Installation\n\nCurrent stable version:\n```shell\npip install newertype\n```\n\nNewest thing on GitHub:\n```shell\npip install git+https://github.com/evanjpw/newertype.git\n```\n\n## Usage\n\nBasic usage:\n\n```python\nfrom newertype import NewerType\n\nAType = NewerType(\"AType\", int)  # `AType` is a new type that wraps an int\na_type = AType(14)  # Make an instance of this new type\nisinstance(a_type, AType)  # `a_type` is an `AType`\n# Returns: True\nisinstance(a_type, int)  # `a_type` is _NOT_ an `int`\n# Returns: False\nstr(a_type.__class__.__name__) == \"AType\"\n# Returns: True\n```\n\nYou can use the new type as if it's the wrapped type:\n\n```python\nAType = NewerType(\"AType\", int)  # Let's make some types!\na_type_1 = AType(7)\na_type_2 = AType(7)  # Two different instances with the same class\na_type_1 == a_type_2  # You can compare them as if they were just `int`s\n# Returns: True\n\nEType = NewerType(\"EType\", int)\ne_type_1 = EType(7)\ne_type_2 = EType(14)\ne_type_2 > e_type_1  # All of the `int` operations work\n# Returns: True\na_type_1 == e_type_1  # But different types are not equal, even if the wrapped value is\nReturns: False\n\nIType = NewerType(\"IType\", int)\nJType = NewerType(\"JType\", int)\ni_type_1 = IType(7)\ni_type_2 = IType(14)\ni_type_1 + i_type_2  # Arithmetic works!\n# Returns: 21\n\nj_type_1 = JType(7)\ni_type_1 + j_type_1  # But not if you try to mix `NewerType`s\n# \"TypeError: unsupported operand type(s) for +: 'IType' and 'JType'\"\nint(i_type_1) < int(i_type_2)  # Conversions that work for the inner type work also\n# Returns: True\n```\n\nAccessing the wrapped data directly:\n\n```python\na_type = AType(14)\na_type.inner  # the `inner` property gets the contained value\n# Returns: 14\na_type.inner = 27  # `inner` can also be used to modify the value\na_type.inner\n# Returns: 27\n```\n\nThe \"truthiness\" & string representations are sensible:\n\n```python\nSType = NewerType(\"SType\", float)\ns_type = SType(2.71828182845904523536028747135266249775724709369995)\nstr(s_type)\n# Returns: \"SType(2.718281828459045)\"\nrepr(s_type)\n# Returns: \"SType(2.718281828459045)\"\nbool(s_type)\n# Returns: True\nbytes(s_type)  # `bytes()` only works if it works with the wrapped type\n# \"TypeError: cannot convert 'float' object to bytes\"\n\ns_type.inner = 0.0\nbool(s_type)\n# Returns: False\n```\n\nWhat about forwarding your own methods on your own classes? NewerType can handle that:\n\n```python\n# First, define a class. It can have the standard indexing methods, but also some unique ones:\nclass Forwardable(UserDict):\n    def forwarded(self, value):\n        return value\n\n    def also_forwarded(self, key):\n        return self[key]\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __setitem__(self, key, value):\n        super().__setitem__(key, value)\n\n# The normal behavior is for NewerType to forward the standard methods but ignore the custom ones:\nFO1Type = NewerType(\"FO1Type\", Forwardable)\nfo1_type_1 = FO1Type(Forwardable())\nfo1_type_1[\"a\"] = 5  # `__setitem__` is a standard method, so it's forwarded\nfo1_type_1[\"a\"]  # So is `__getitem__`\n# Returns: 5\nfo1_type_1.forwarded(5)  # But unique methods are not forwarded\n# \"AttributeError: FO1Type' object has no attribute 'forwarded'\"\n\n# We can use \"extra_forwards\" to specify the additional methods we'd like to forward:\nFO2Type = NewerType(\n    \"FO2Type\", Forwardable, extra_forwards=[\"forwarded\", \"also_forwarded\"]\n)\nfo2_type_1 = FO2Type(Forwardable())\nfo2_type_1[\"e\"] = 7  # This continues to work\nfo2_type_1[\"e\"]  # As does this\n# Returns: 7\nfo2_type_1.also_forwarded(\"e\")  # But now this works also!\n# Returns: 7\n\n# But what if we _don't_ want to forward the standard methods? Use \"no_def_forwards\":\nFO3Type = NewerType(\n    \"FO3Type\", Forwardable, extra_forwards=[\"also_forwarded\"], no_def_forwards=True\n)\nfo3_type_1 = FO3Type(Forwardable())\nfo3_type_1.inner[\"g\"] = 8\nfo3_type_1.also_forwarded(\"g\")  # The extra methods continue to work\n# Returns: 8\nfo3_type_1[\"g\"]  # But the standard ones don't (unless we specifically mention them in \"extra_forwards\")\n# \"TypeError: 'FO3Type' object is not subscriptable\"\n```\n\n## TBD\n\n* The `bytes()` built-in currently just forces all wrapped `str` objects to \"utf-8\" as an encoding.\n If you need a *different* encoding, use `bytes()` of `.inner`.\n* There are a *bunch* more methods that should be in the whitelist for forwarding. That's a work in progress.\n\n## Project Resources\n\n* Documentation - TBD\n* Issue tracker - TBD\n* Source code - TBD\n* Change log - TBD\n\n## License\n\nLicensed under the [MIT LICENSE](https://www.mit.edu/~amini/LICENSE.md)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evanjpw/newertype",
    "keywords": "python,typechecker,typing,typehints,runtime",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "newertype",
    "package_url": "https://pypi.org/project/newertype/",
    "platform": null,
    "project_url": "https://pypi.org/project/newertype/",
    "project_urls": {
      "Homepage": "https://github.com/evanjpw/newertype",
      "Repository": "https://github.com/evanjpw/newertype"
    },
    "release_url": "https://pypi.org/project/newertype/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "An Implementation of the NewType Pattern for Python that works in dynamic contexts.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16175141,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "788acf296e9351d52f7c9fdc2a32bb7c3fe8ed9cbc1a7c6b528c29d740e3a75c",
          "md5": "38aef3265ecae59d4b4b548325b182ae",
          "sha256": "5f7debd4ba8b7de0453be45aa6627be66dc70107656d0a721b5fc8899a3b11a0"
        },
        "downloads": -1,
        "filename": "newertype-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38aef3265ecae59d4b4b548325b182ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6126,
        "upload_time": "2022-12-20T01:28:08",
        "upload_time_iso_8601": "2022-12-20T01:28:08.779583Z",
        "url": "https://files.pythonhosted.org/packages/78/8a/cf296e9351d52f7c9fdc2a32bb7c3fe8ed9cbc1a7c6b528c29d740e3a75c/newertype-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e14f9414e2dd41990e4f801a8ced52ad1433255b8d9dda87bc4618d2d2cadaed",
          "md5": "9803ae0cf67ec07fe3c9871f8cc4e159",
          "sha256": "30771a9119b7a688bcd99bd03e2dea1e6c3fe2083e16ddcc53ea0dcc8703a15c"
        },
        "downloads": -1,
        "filename": "newertype-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9803ae0cf67ec07fe3c9871f8cc4e159",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 5741,
        "upload_time": "2022-12-20T01:28:10",
        "upload_time_iso_8601": "2022-12-20T01:28:10.577973Z",
        "url": "https://files.pythonhosted.org/packages/e1/4f/9414e2dd41990e4f801a8ced52ad1433255b8d9dda87bc4618d2d2cadaed/newertype-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f082a4aba1c2d0152d16ac329c317cda42bd1effe6be7d1cd518271e969a6537",
          "md5": "a2cecc6007777558bdd6379f8ca3e97b",
          "sha256": "d2a471fbbd6f6932276a0b40addab3dc930f8bc93a801eae9be4279b233788ce"
        },
        "downloads": -1,
        "filename": "newertype-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2cecc6007777558bdd6379f8ca3e97b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6715,
        "upload_time": "2022-12-20T03:51:55",
        "upload_time_iso_8601": "2022-12-20T03:51:55.437710Z",
        "url": "https://files.pythonhosted.org/packages/f0/82/a4aba1c2d0152d16ac329c317cda42bd1effe6be7d1cd518271e969a6537/newertype-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a919ec46f60334efca5f9d0132301a3f70c6bf87879fd13cc7c7e18709683e09",
          "md5": "35a2a5f3db1a83b38482372988d25d90",
          "sha256": "d50e38698cda073eec7524ca5ab38df2cc85551f105a00b9bdba5a313738141e"
        },
        "downloads": -1,
        "filename": "newertype-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "35a2a5f3db1a83b38482372988d25d90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 6538,
        "upload_time": "2022-12-20T03:51:57",
        "upload_time_iso_8601": "2022-12-20T03:51:57.156358Z",
        "url": "https://files.pythonhosted.org/packages/a9/19/ec46f60334efca5f9d0132301a3f70c6bf87879fd13cc7c7e18709683e09/newertype-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e66cd22e00a4be91457aca6facc2a8d9689cbde1aa89c239583c81546efb259b",
          "md5": "b2bb571062f776752a44bbe9e7b762e1",
          "sha256": "b4322dd10795ff92705dde3c47a9516b394a20edfe6ae98f0f9b9e7f8dfc643d"
        },
        "downloads": -1,
        "filename": "newertype-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2bb571062f776752a44bbe9e7b762e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6854,
        "upload_time": "2022-12-21T16:09:48",
        "upload_time_iso_8601": "2022-12-21T16:09:48.369660Z",
        "url": "https://files.pythonhosted.org/packages/e6/6c/d22e00a4be91457aca6facc2a8d9689cbde1aa89c239583c81546efb259b/newertype-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58caa89e59b8c7a2749df90326d6899e002e56d003652f02c560c72d313dc9dc",
          "md5": "76ead8b39553e1bfa705217a9250a620",
          "sha256": "bc401b792db609f74bd142da3544936861a6072d84ccd39c8c3985a2a0cae0fb"
        },
        "downloads": -1,
        "filename": "newertype-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "76ead8b39553e1bfa705217a9250a620",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 6781,
        "upload_time": "2022-12-21T16:09:49",
        "upload_time_iso_8601": "2022-12-21T16:09:49.928938Z",
        "url": "https://files.pythonhosted.org/packages/58/ca/a89e59b8c7a2749df90326d6899e002e56d003652f02c560c72d313dc9dc/newertype-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e66cd22e00a4be91457aca6facc2a8d9689cbde1aa89c239583c81546efb259b",
        "md5": "b2bb571062f776752a44bbe9e7b762e1",
        "sha256": "b4322dd10795ff92705dde3c47a9516b394a20edfe6ae98f0f9b9e7f8dfc643d"
      },
      "downloads": -1,
      "filename": "newertype-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2bb571062f776752a44bbe9e7b762e1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 6854,
      "upload_time": "2022-12-21T16:09:48",
      "upload_time_iso_8601": "2022-12-21T16:09:48.369660Z",
      "url": "https://files.pythonhosted.org/packages/e6/6c/d22e00a4be91457aca6facc2a8d9689cbde1aa89c239583c81546efb259b/newertype-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58caa89e59b8c7a2749df90326d6899e002e56d003652f02c560c72d313dc9dc",
        "md5": "76ead8b39553e1bfa705217a9250a620",
        "sha256": "bc401b792db609f74bd142da3544936861a6072d84ccd39c8c3985a2a0cae0fb"
      },
      "downloads": -1,
      "filename": "newertype-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "76ead8b39553e1bfa705217a9250a620",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 6781,
      "upload_time": "2022-12-21T16:09:49",
      "upload_time_iso_8601": "2022-12-21T16:09:49.928938Z",
      "url": "https://files.pythonhosted.org/packages/58/ca/a89e59b8c7a2749df90326d6899e002e56d003652f02c560c72d313dc9dc/newertype-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}