{
  "info": {
    "author": "moomoohk",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Human Machine Interfaces",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# aiocorenlp\n\nHigh-fidelity `asyncio` capable Stanford [CoreNLP](https://github.com/stanfordnlp/CoreNLP/) library.\n\nHeavily based on [ner](https://github.com/dat/pyner) and [nltk](https://github.com/nltk/nltk).\n\n## Rationale and differences from `nltk`\nFor every tag operation (in other words, every call to `StanfordTagger.tag*`), `nltk` runs a Stanford JAR (`stanford-ner.jar`/`stanford-postagger.jar`) in a newly spawned Java subprocess. \nIn order to pass the input text to these JARs, `nltk` first writes it to a `tempfile` and includes its path in the Java command line using the `-textFile` flag.\n\nThis method works well in sequential applications, however once scaled up by concurrency and stress problems begin to arise:\n\n1. Python's `tempfile.mkstemp` doesn't work very well on Windows to begin with and starts to break down under stress.\n   * Calls to `tempfile.mkstemp` start to fail which in turn results in Stanford code failing (no input file to read).\n   * Temporary files get leaked resulting in negative impact on disk usage.\n2. Repeated calls to `subprocess` mean:\n   * Multiple Java processes run in parallel causing negative impact on CPU and memory usage.\n   * OS-level subprocess and Java startup code has to be run every time causing additional negative impact on CPU usage.\n\nAll this causes unnecessary slowdown and bad reliability to user-written code.\n\nPatching `nltk`'s code to use `tempfile.TemporaryDirectory` instead of `tempfile.mkstemp` seemed to resolve issue 1 but issue 2 would require more work. \n\nThis library runs the Stanford code in a server mode and sends input text over TCP, meaning:\n\n1. Filesystem operations and temporary files/directories are avoided entirely.\n2. There's no need to run a Java subprocess more than once.\n3. The only synchronization bottleneck is offloaded to Java's `SocketServer` class which is used in the Stanford code.\n4. CPU, memory and disk usage is greatly reduced.\n\n### Differences from `ner`\n* `asyncio` support.\n* [Method name mangling](https://docs.python.org/3/tutorial/classes.html#private-variables) is inexplicably enabled in the [`ner.client.NER` class](https://https://github.com/dat/pyner/blob/master/ner/client.py), making subclassing not practical.\n* The ner library appears to be abandoned.\n\n### Differences from [`stanza`](https://github.com/stanfordnlp/stanza)\n* `asyncio` support.\n* Stanza aims to provide a wider range of uses.\n\n## Basic Usage\n\n```pycon\n>>> from aiocorenlp import ner_tag\n>>> await ner_tag(\"I complained to Microsoft about Bill Gates.\")\n[('O', 'I'), ('O', 'complained'), ('O', 'to'), ('ORGANIZATION', 'Microsoft'), ('O', 'about'), ('PERSON', 'Bill'), ('PERSON', 'Gates.')]\n```\n\nThis usage doesn't require interfacing with the server and socket directly and is suitable for low frequency/one-time tagging.\n\n## Advanced Usage\n\nTo fully take advantage of this library's benefits the `AsyncNerServer` and `AsyncPosServer` classes should be used:\n```python\nfrom aiocorenlp.async_ner_server import AsyncNerServer\nfrom aiocorenlp.async_corenlp_socket import AsyncCorenlpSocket\n\nserver = AsyncNerServer()\nport = server.start()\nprint(f\"Server started on port {port}\")\n\nsocket: AsyncCorenlpSocket = server.get_socket()\n\nwhile True:\n    text = input(\"> \")\n    if text == \"exit\":\n        break\n\n    print(await socket.tag(text))\n\nserver.stop()\n```\n\nContext manager is supported as well: \n```python\nfrom aiocorenlp.async_ner_server import AsyncNerServer\n\nserver: AsyncNerServer\nasync with AsyncNerServer() as server:\n    socket = server.get_socket()\n    \n    while True:\n        text = input(\"> \")\n        if text == \"exit\":\n            break\n    \n        print(await socket.tag(text))\n```\n\n## Configuration\n\nAs seen above, all classes and functions this library exposes may be used without arguments (default values).\n\nOptionally, the following arguments may be passed to `AsyncNerServer` (and by extension `ner_tag`/`pos_tag`):\n\n* `port`: Server bind port. Leave `None` for random port.\n* `model_path`: Path to language model. Leave `None` to let `nltk` find the model (supports `STANFORD_MODELS` environment variable).\n* `jar_path`: Path to `stanford-*.jar`. Leave `None` to let `nltk` find the jar (supports `STANFORD_POSTAGGER` environment variable, for NER as well).\n* `output_format`: Output format. See `OutputFormat` enum for values. Default is `slashTags`. \n* `encoding`: Output encoding.\n* `java_options`: Additional JVM options.\n\nIt is not possible to configure the server bind interface. This is a limitation imposed by the Stanford code.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moomoohk/aiocorenlp",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiocorenlp",
    "package_url": "https://pypi.org/project/aiocorenlp/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiocorenlp/",
    "project_urls": {
      "Homepage": "https://github.com/moomoohk/aiocorenlp"
    },
    "release_url": "https://pypi.org/project/aiocorenlp/1.0.2/",
    "requires_dist": [
      "nltk"
    ],
    "requires_python": ">=3.10",
    "summary": "Asyncio support for Stanford CoreNLP",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15734102,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0debf3b48a46132a4a1a7fc3813b91d43a4552f130d2506f93950a996d2b7a76",
          "md5": "b269cc17b4193c305d09e84ac3651969",
          "sha256": "a9b1b17d2ec12a949a9f5a6168234793c5b3c8af826f1f244934bc3c60d09bbb"
        },
        "downloads": -1,
        "filename": "aiocorenlp-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b269cc17b4193c305d09e84ac3651969",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 9230,
        "upload_time": "2022-11-05T23:46:02",
        "upload_time_iso_8601": "2022-11-05T23:46:02.970268Z",
        "url": "https://files.pythonhosted.org/packages/0d/eb/f3b48a46132a4a1a7fc3813b91d43a4552f130d2506f93950a996d2b7a76/aiocorenlp-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27c272f464b27818c06f0570fbf866cc702f5257da407f1bb825a301ceb83005",
          "md5": "326ed4427f2c8f4062513bf45769dd5d",
          "sha256": "61bd576a6c6147027860abe37ae16cff59ee0f6f44d4c78515ce0b759b1aeb73"
        },
        "downloads": -1,
        "filename": "aiocorenlp-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "326ed4427f2c8f4062513bf45769dd5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 9696,
        "upload_time": "2022-11-05T23:46:04",
        "upload_time_iso_8601": "2022-11-05T23:46:04.595165Z",
        "url": "https://files.pythonhosted.org/packages/27/c2/72f464b27818c06f0570fbf866cc702f5257da407f1bb825a301ceb83005/aiocorenlp-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55fbe15be76fc602ed7ae9bcedb83b03fb72d8a39e4e1d09e26230ea6405e6a",
          "md5": "9965bbd3f23077afe24f620a84744834",
          "sha256": "32937b053fd3baeb7c09876fa280485c1ffe8596656e44447263513b00e8dbec"
        },
        "downloads": -1,
        "filename": "aiocorenlp-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9965bbd3f23077afe24f620a84744834",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 9367,
        "upload_time": "2022-11-11T10:08:03",
        "upload_time_iso_8601": "2022-11-11T10:08:03.065382Z",
        "url": "https://files.pythonhosted.org/packages/e5/5f/be15be76fc602ed7ae9bcedb83b03fb72d8a39e4e1d09e26230ea6405e6a/aiocorenlp-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "290adb0cba09f29d0f87f5ddc40f176a997dfe3b6308c7efcc08ddd09b99fb6e",
          "md5": "7af6d799eb63e1639951661963b34232",
          "sha256": "ecafeb9a0320562bbe1ff91b2dd5f6050a5756191aa6b1b997029e7caa74a544"
        },
        "downloads": -1,
        "filename": "aiocorenlp-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7af6d799eb63e1639951661963b34232",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 9865,
        "upload_time": "2022-11-11T10:08:04",
        "upload_time_iso_8601": "2022-11-11T10:08:04.143154Z",
        "url": "https://files.pythonhosted.org/packages/29/0a/db0cba09f29d0f87f5ddc40f176a997dfe3b6308c7efcc08ddd09b99fb6e/aiocorenlp-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e55fbe15be76fc602ed7ae9bcedb83b03fb72d8a39e4e1d09e26230ea6405e6a",
        "md5": "9965bbd3f23077afe24f620a84744834",
        "sha256": "32937b053fd3baeb7c09876fa280485c1ffe8596656e44447263513b00e8dbec"
      },
      "downloads": -1,
      "filename": "aiocorenlp-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9965bbd3f23077afe24f620a84744834",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 9367,
      "upload_time": "2022-11-11T10:08:03",
      "upload_time_iso_8601": "2022-11-11T10:08:03.065382Z",
      "url": "https://files.pythonhosted.org/packages/e5/5f/be15be76fc602ed7ae9bcedb83b03fb72d8a39e4e1d09e26230ea6405e6a/aiocorenlp-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "290adb0cba09f29d0f87f5ddc40f176a997dfe3b6308c7efcc08ddd09b99fb6e",
        "md5": "7af6d799eb63e1639951661963b34232",
        "sha256": "ecafeb9a0320562bbe1ff91b2dd5f6050a5756191aa6b1b997029e7caa74a544"
      },
      "downloads": -1,
      "filename": "aiocorenlp-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7af6d799eb63e1639951661963b34232",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 9865,
      "upload_time": "2022-11-11T10:08:04",
      "upload_time_iso_8601": "2022-11-11T10:08:04.143154Z",
      "url": "https://files.pythonhosted.org/packages/29/0a/db0cba09f29d0f87f5ddc40f176a997dfe3b6308c7efcc08ddd09b99fb6e/aiocorenlp-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}