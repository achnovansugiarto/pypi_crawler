{
  "info": {
    "author": "Saifeddine ALOUI",
    "author_email": "aloui.saifeddine@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SQTUI\nSafe QT User Interface.\n\nThis is a little library I've developed in order to wrap arount Qt for python libraries.\nThis librarty enables the user to seemlessly develop Qt applications with PyQt5 or PySide or in future versions other libraries without the need to change the coding.\n\n## Motivation\n\nPyQt5 is one of the best libraries I've worked with, it is opensource and enables fast and easy to use graphical interface developement.\n\nThe problem with PyQt is its licence. The licence of PyQt is GPL 3.0 which is a contaminating licence. This translates to a contamination of your own code with the GPL licence obliging you to apply all GPL details on your code, includig full access to your software code in all cases. The only way to get around this is to buy a comercial licence from [https://riverbankcomputing.com/commercial/pyqt](https://riverbankcomputing.com/commercial/pyqt).\n\nWhile this is a good thing in some sense, sometimes, you want to keep your application licence separate from the libraries licence. For example, I do like the MIT licence and use it in all my opensource code because it is opensource but gives the liberty to reuse my code without imposing any restrictions on the apps that may use my library.\n\nOther liraries such as PySide, have a little different syntax for example to load UI files or to to declare the signals. In the other hand PySide2 is under L-GPL licence, which is not as contaminating as the GPL if you don't link the library statically in your code. It still have some constraints. For example you must give your user the possibility to change the library and even use another one. And you need to link it to your final executable dynamically. **If you link it statically to your software, it contaminates it and you have to open you software as the L-GPL licence requests**. \n\nSQTUI is the answer i propose to all this. First, it has a unified coding style independently from the library behind. It enables you to code in a consistant way, and automatically select the library you want to use. This has multiple advantages:\n- First, you get to choose if you want to have the GPL licence or no\n- You are complient with the L-GPL requirements if you opt with using PySide and link it dyunamically to your software using for example PyInstaller.\n- You can compile your code using pyinstaller using pyside as backend and hide some portions that may be protected with patents or simply you want to keep secret while respecting the licences requirements. (Dynamic linking is required in this case).\n- You can easily switch the library whenever you want.\n- You code the same way. You just need to install the backend library of your choice and everything is done automatically\n\nI hope that this library help others who loves using python but want to have more freedom on their licence. I encourage people to use opensource and share their code as much as possible.\n\n**For those working in comercial companies, please consider buying the comercial Qt licence as it gives you more support and rewards the developers who created this wonderful tool.**\n\nConsider using this library especially for keeping your licence free of GPL 3 contamination and give yourself the choice to use one library or another.\n\n## Licence\n\nThis library is distributed under MIT licence since we do not distribute the backend libraries with it. If you opt in using pyqt5 as backend then your app is GPL 3.0 and everything gets contaminated. If you opt to use PySide **And opt to ling you code dynamically**, you get to keep your licence and you'll notice no difference as SQTUI does the translation between the two libraries seemlessly.\n\n## How to install\nSimply install it from pypi :\n```\npip install sqtui\n```\nPlease notice that we didn't add neither PyQt5 nor PySide to our requirements, so when you install sqtui, you need then to install one of the two supported libraries.\n\n1- for pyqt5 :\n```\npip install pyqt5\n```\n\n2- for pyside2 :\n```\npip install pyside2\n```\n\n## Usage\n### Classical Way (code)\nJust import the classical pyqt5 or pyside2 libraries from sqtui instead of importing them from one or the other.\n\nFor example, here is an example of importing the most used modules :\n```python\nfrom sqtui import QtCore, QtGui, QtWidgets, QtOpenGL\n```\n\nThen use them normally for example :\n\n```python\nclass MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        \"\"\"Creates a QMainWindow class\n        \"\"\"\n        QtWidgets.QMainWindow.__init__(self)\n        self.btn = QtWidgets.QPushButton(\"Hello\")\n        self.setCentralWidget(self.btn)\n        self.setMinimumWidth(500)\n        self.setWindowTitle(\"Hello SQTUI\")\n        self.btn.clicked.connect(self.helloPressed)\n        self.show()\n\n    def helloPressed(self):\n        \"\"\" A slot triggered by pressing the Hello button\n        \"\"\"\n        QtWidgets.QMessageBox.information(self, \"Hello SQTUI\", \"Hello SQTUI\")\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication.instance()\n    if not app: # sinon on crÃ©e une instance de QApplication\n        app = QtWidgets.QApplication([])\n    ui = MainWindow()\n    sys.exit(app.exec_())\n```\n\nAdvice : Only import the modules you need\n\n### Qt designer Way\nDesigning the UI using a graphical interface speeds up the developement and saves time. If you have access to QtDesigner software, then you may use PyQt5 or PySide to load the file and use it directly. Unfortunately, the two libraries have different approaches to doing this.\n\nTo make this operation simple and transparent for users, SQTUI provides a wrapper class called UIC. UIC has a static method loadUi that can be used to load the ui files using the same syntax. No need to learn how PyQt5 is doing it or how PySide2 is doing it :\n\n```python\nfrom sqtui import QtWidgets, QtCore, UIC\nfrom pathlib import Path\n\n\nclass Container():\n    def __init__(self):\n        \"\"\"Creates a Container for the window to be loaded from the .ui file\n        \"\"\"\n        self.window = UIC.loadUi(Path(__file__).parent/\"hello_sqtui.ui\", QtWidgets.QMainWindow)\n        self.window.btn.clicked.connect(self.helloPressed)\n        self.window.show()\n\n    def helloPressed(self):\n        \"\"\" A slot triggered by pressing the Hello button\n        \"\"\"\n        QtWidgets.QMessageBox.information(self.window, \"Hello SQTUI\", \"Hello SQTUI\")\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication.instance()\n    if not app: # sinon on crÃ©e une instance de QApplication\n        app = QtWidgets.QApplication([])\n    ui = Container()\n    sys.exit(app.exec_())\n```\n\nHere for example, we have a QMainWindow interface with a button called btn. you can access any object inside the window using self.window.<the name of the object>. You can connect some slots to the signals and so. Check out the examples directory for more details.\n\n## Building custom signals\n\nOne difference between pyqt5 and pyside2 is the signal naming. in pyqt5 signals are of type pyqtSignal found in qtcore package. In pyside, it is named Signal in QtCore package.\n\nAs Signal seems more neutral, I've chosen to go with that naming. Now whether you use PyQT5 or PySide, the naming is the same (Signal).\nYou can use signals to communicate between threads and the main thread that manages the UI.\n\nIn the following example, we create a thread that sends a count down message to the ui which displays it on the QLabel object, then when it is done, it emits another signal. The slot shows a messagebox telling the user that the countdown is done.\n\nWhile this is not a very useful example, it illustrates how signals and slots come in handy when using multi threading. And having a single \n\n```python\nfrom sqtui import QtCore, QtWidgets, Signal\nimport time\n\nclass MainWindow(QtWidgets.QMainWindow):\n    thread_sent_count = Signal(int)\n    thread_sent_done = Signal()\n\n    def __init__(self):\n        \"\"\"Creates a QMainWindow class\n        \"\"\"\n        QtWidgets.QMainWindow.__init__(self)\n        self.lbl=QtWidgets.QLabel(f\"Counter from another thread : {0}\")\n        self.lbl.setStyleSheet(\"font-size:24px;\")\n        self.setCentralWidget(self.lbl)\n        self.setMinimumWidth(500)\n        self.setWindowTitle(\"Signal slot test\")\n        self.thread_sent_count.connect(self.count)\n        self.thread_sent_done.connect(self.done)\n        self.some_thread = QtCore.QThread()\n        self.some_thread.run=self.run\n        self.some_thread.start()\n        self.show()\n\n    def run(self):\n        \"\"\"Thread funtion\n        \"\"\"\n        self.thread_sent_count.emit(5)\n        time.sleep(1)\n        self.thread_sent_count.emit(4)\n        time.sleep(1)\n        self.thread_sent_count.emit(3)\n        time.sleep(1)\n        self.thread_sent_count.emit(2)\n        time.sleep(1)\n        self.thread_sent_count.emit(1)\n\n        # Send hello to main thread\n        self.thread_sent_done.emit()\n        # That's it\n\n\n    def count(self, count:int):\n        \"\"\" A slot triggered by emitting thread_sent_count signal while sending an integer\n        \"\"\"\n        self.lbl.setText(f\"Counter from another thread : {count}\")\n\n\n    def done(self):\n        \"\"\" A slot triggered by emitting thread_sent_hello signal\n        \"\"\"\n        QtWidgets.QMessageBox.information(self, \"Done\", \"Countdown is done\")\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication.instance()\n    if not app: # sinon on crÃ©e une instance de QApplication\n        app = QtWidgets.QApplication([])\n    ui = MainWindow()\n    sys.exit(app.exec_())\n\n```\n\n## PyQtGraph \n\npyqtgraph is a powerful scientific graphs plotter tool. It is more useful when it comes to plotting fast realtime data than matplotlib.\nYou can use pyqtgraph along with sqtui as pyqtgraph actually support using either of pyqt5 and pyside.\n\npyqtgraph needs this environment variable to be set correctly to select the right backend:\n- PYQTGRAPH_QT_LIB\n\nSQTUI, does this automatically, when it identifies the installed library, it sets this variable. So all you have to do is first import sqtui then import pyqtgraph.\n\n\nIn the following example, you'll need to install pyqtgraph and numpy. (use pip as shown for other libraries in How to install section)\n\n```python\nimport sys\nfrom sqtui import QtWidgets\nimport pyqtgraph as pg\nimport numpy as np\n\nclass MainWindow(QtWidgets.QMainWindow):\n    def __init__(self):\n        \"\"\"Creates a QMainWindow class\n        \"\"\"\n        QtWidgets.QMainWindow.__init__(self)\n        self.plt = pg.PlotWidget(title=\"Three plot curves\")\n        x = np.arange(1000)\n        y = np.random.normal(size=(3, 1000))\n        for i in range(3):\n            self.plt.plot(x, y[i], pen=(i,3))  ## setting pen=(i,3) automaticaly creates three different-colored pens\n        self.setCentralWidget(self.plt)\n        self.setMinimumWidth(500)\n        self.setWindowTitle(\"Hello PyQtGraph\")\n        self.show()\n\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication.instance()\n    if not app: # sinon on crÃ©e une instance de QApplication\n        app = QtWidgets.QApplication([])\n    ui = MainWindow()\n    sys.exit(app.exec_())\n\n```\n## Manually select the desired backbone\nUsing sqtui allows you to select pyqt5 or pyside2 by setting an environment variable at the beginning of your python code. The rest of the coding will be transparent.\n\n```python\nos.environ['PYQTGRAPH_QT_LIB']=\"PySide2\"\n```\n\nWe use the same environment variable used by PYQTGRAPH to avoid having two different environment variables and to synchronize stqui and pyqtgraph on the basme backbone.\n# Changelog\n## V0.0.3 : 15/09/2021\n- Reorganized code\n- Enable manual selection of the backbone library\n- Updated README\n## V0.0.2 : 28/05/2021\n- Added examples\n- Added pyqtgraph integration\n- Updated README\n\n## V0.0.1 : 28/05/2021\n- Initial code\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ParisNeo/SQTUI",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqtui",
    "package_url": "https://pypi.org/project/sqtui/",
    "platform": "",
    "project_url": "https://pypi.org/project/sqtui/",
    "project_urls": {
      "Homepage": "https://github.com/ParisNeo/SQTUI"
    },
    "release_url": "https://pypi.org/project/sqtui/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Safe QT, a QT wrapper for automatic selection of python QT libs (PyQt, PySide)",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12281449,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e23ef784205ca0b4ecd696a1ede1b74ddf344c53c8db0c58577f3042dcda54f6",
          "md5": "32a1984cc626d235701316eadb458f25",
          "sha256": "299e764dc7b199b578720a14596f14ccbe00240dffc14c1b259e7e5b45282f67"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32a1984cc626d235701316eadb458f25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4342,
        "upload_time": "2021-05-27T20:58:49",
        "upload_time_iso_8601": "2021-05-27T20:58:49.104797Z",
        "url": "https://files.pythonhosted.org/packages/e2/3e/f784205ca0b4ecd696a1ede1b74ddf344c53c8db0c58577f3042dcda54f6/sqtui-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6c1e715667fb4ac6e99b9c8bc3588a31275fe493c9e7b226b66b551ba587202",
          "md5": "b184b6d4dfef6910b6d35ff22768b361",
          "sha256": "ad2ad40310f1a40135a8bb91412f706c1d242ea728eab01e4b7d3cf04357bcee"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b184b6d4dfef6910b6d35ff22768b361",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2987,
        "upload_time": "2021-05-27T20:58:50",
        "upload_time_iso_8601": "2021-05-27T20:58:50.666982Z",
        "url": "https://files.pythonhosted.org/packages/e6/c1/e715667fb4ac6e99b9c8bc3588a31275fe493c9e7b226b66b551ba587202/sqtui-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3466897766d2b1087523bbff3f077f2b448ada5afc3cc308ce7ee5fb1628299d",
          "md5": "5c2576ebdf4be74d357bfbe06b646c68",
          "sha256": "2f4e7c003fd4e00e31c96463b129c8df830ac7ea068932fcb8b15867f8746d5d"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c2576ebdf4be74d357bfbe06b646c68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7364,
        "upload_time": "2021-05-27T23:12:27",
        "upload_time_iso_8601": "2021-05-27T23:12:27.887793Z",
        "url": "https://files.pythonhosted.org/packages/34/66/897766d2b1087523bbff3f077f2b448ada5afc3cc308ce7ee5fb1628299d/sqtui-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b63aea4774067a36d7b4bdb1adbac5660e4320703382dd8d71415e4fd896159",
          "md5": "3ef02c53e976e141b157b8ab0fa78ed0",
          "sha256": "c2429e58a158121e82a85d04ded1253f4564b9909603d970dc47872e07a849d4"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ef02c53e976e141b157b8ab0fa78ed0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7232,
        "upload_time": "2021-05-27T23:12:29",
        "upload_time_iso_8601": "2021-05-27T23:12:29.573696Z",
        "url": "https://files.pythonhosted.org/packages/8b/63/aea4774067a36d7b4bdb1adbac5660e4320703382dd8d71415e4fd896159/sqtui-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37dfa52e188b3a4bdc34aa6309da28fc3b76e0bc662578508695b8c545218619",
          "md5": "f679080d1901a8b16729fe109f235857",
          "sha256": "8eda991ae2938578c4787c7fdfe5787b55ab683c0ab57b7839c359d1dd5c9e09"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f679080d1901a8b16729fe109f235857",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7520,
        "upload_time": "2021-06-06T20:41:34",
        "upload_time_iso_8601": "2021-06-06T20:41:34.098527Z",
        "url": "https://files.pythonhosted.org/packages/37/df/a52e188b3a4bdc34aa6309da28fc3b76e0bc662578508695b8c545218619/sqtui-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd381c066ed18f8e398775345cb19a3f737746877055ce135d992f91839f0a0d",
          "md5": "c7b80737bb31a4de37cb998cee663493",
          "sha256": "8b9834e0475768a5cec7be0d52f5b2129fef60bef4285503a8b611c224795e97"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c7b80737bb31a4de37cb998cee663493",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7387,
        "upload_time": "2021-06-06T20:41:35",
        "upload_time_iso_8601": "2021-06-06T20:41:35.364890Z",
        "url": "https://files.pythonhosted.org/packages/cd/38/1c066ed18f8e398775345cb19a3f737746877055ce135d992f91839f0a0d/sqtui-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d69a72b40b4033bc6275fac3b5299083bc2735fb9e709da890feb9ac7cb611",
          "md5": "e01fe361dfc1b78285825501f3bd9fe5",
          "sha256": "fb5ec0945e5a3f556421fbb37e66f8120f255f512957b3711b3cb74db62fe155"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e01fe361dfc1b78285825501f3bd9fe5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7678,
        "upload_time": "2021-11-18T20:54:03",
        "upload_time_iso_8601": "2021-11-18T20:54:03.385551Z",
        "url": "https://files.pythonhosted.org/packages/32/d6/9a72b40b4033bc6275fac3b5299083bc2735fb9e709da890feb9ac7cb611/sqtui-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c22f811c5c975aeef22a88507a09a5ffa39428e24ab02fbc5ec08d216d1d306d",
          "md5": "87656f791dbc2da08791481a62dd4c3b",
          "sha256": "4c8ca534b584c8a5ff02879253dc85380bd77058866b34539dbadc10887afd3c"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "87656f791dbc2da08791481a62dd4c3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7579,
        "upload_time": "2021-11-18T20:54:05",
        "upload_time_iso_8601": "2021-11-18T20:54:05.321015Z",
        "url": "https://files.pythonhosted.org/packages/c2/2f/811c5c975aeef22a88507a09a5ffa39428e24ab02fbc5ec08d216d1d306d/sqtui-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e91c7e4a194db4dc201d0767ba4cc4ccd05631fe60e300487662c0cee5557f72",
          "md5": "1c5a0ef9d1ac3e4967ce7e9478e94ce0",
          "sha256": "61f147029836db53f788204d5e1bd08f4c696d5b7e8dd4a87972f1fe5eeef64e"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c5a0ef9d1ac3e4967ce7e9478e94ce0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7880,
        "upload_time": "2021-12-12T14:28:35",
        "upload_time_iso_8601": "2021-12-12T14:28:35.200894Z",
        "url": "https://files.pythonhosted.org/packages/e9/1c/7e4a194db4dc201d0767ba4cc4ccd05631fe60e300487662c0cee5557f72/sqtui-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1614aa24eaf326e87f95bb9ab87e347f94cf68a7cbe4a8d710b25b3151188c11",
          "md5": "c9c0a4d8390cf903290f7dbd026182da",
          "sha256": "7752952be0cc2a86ebbed3aa0ed7f48b674504b201de4ce774e3dc50e4939434"
        },
        "downloads": -1,
        "filename": "sqtui-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c9c0a4d8390cf903290f7dbd026182da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7843,
        "upload_time": "2021-12-12T14:28:37",
        "upload_time_iso_8601": "2021-12-12T14:28:37.611206Z",
        "url": "https://files.pythonhosted.org/packages/16/14/aa24eaf326e87f95bb9ab87e347f94cf68a7cbe4a8d710b25b3151188c11/sqtui-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e91c7e4a194db4dc201d0767ba4cc4ccd05631fe60e300487662c0cee5557f72",
        "md5": "1c5a0ef9d1ac3e4967ce7e9478e94ce0",
        "sha256": "61f147029836db53f788204d5e1bd08f4c696d5b7e8dd4a87972f1fe5eeef64e"
      },
      "downloads": -1,
      "filename": "sqtui-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c5a0ef9d1ac3e4967ce7e9478e94ce0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7880,
      "upload_time": "2021-12-12T14:28:35",
      "upload_time_iso_8601": "2021-12-12T14:28:35.200894Z",
      "url": "https://files.pythonhosted.org/packages/e9/1c/7e4a194db4dc201d0767ba4cc4ccd05631fe60e300487662c0cee5557f72/sqtui-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1614aa24eaf326e87f95bb9ab87e347f94cf68a7cbe4a8d710b25b3151188c11",
        "md5": "c9c0a4d8390cf903290f7dbd026182da",
        "sha256": "7752952be0cc2a86ebbed3aa0ed7f48b674504b201de4ce774e3dc50e4939434"
      },
      "downloads": -1,
      "filename": "sqtui-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c9c0a4d8390cf903290f7dbd026182da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7843,
      "upload_time": "2021-12-12T14:28:37",
      "upload_time_iso_8601": "2021-12-12T14:28:37.611206Z",
      "url": "https://files.pythonhosted.org/packages/16/14/aa24eaf326e87f95bb9ab87e347f94cf68a7cbe4a8d710b25b3151188c11/sqtui-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}