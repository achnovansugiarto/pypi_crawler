{
  "info": {
    "author": "Simeon Simeonov",
    "author_email": "sgs@pichove.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# sgs-pycycle\n\nsgs-pycycle is a pure Python 3 client and object-mapper for Oslo Bysykkel.\n\nIt requires no additional libraries.\n\n\n## General\n\nThe main reason for writing this library was a simple academic task.\n\nSince the name `pycycle` was already taken, I decided to namespace it.\n\nI hope that somebody will find it useful.\n\n\n## Requirements\n\n- Python >=3.6 with corresponding `setuptools`\n\n\n## Installation\n\nIf one wants to install the package in a convenient way as an unprivileged\nuser the easiest way is to use `virtualenv` that is part of Python 3.\n\n   ```bash\n   python -m venv venvSGSPycycle\n   source venvSGSPycycle/bin/activate\n   ```\n\nor if using MS Windows\n\n   ```bash\n   C:\\Users\\'Username'\\path\\to\\venvSGSPycycle\\Scripts\\activate.bat\n   ```\n\nThat will install and load the virtual environment\nNow one can choose one of the methods described bellow.\n\n\n### pip (pypi)\n\nThe easiest way is to install the package directly from pypi.org\n\n   ```bash\n   pip install sgs-pycycle\n   ```\n\n\n### Manual\n\n   ```bash\n   git clone https://github.com/sgs-test/sgs-pycycle.git\n   ```\n\nOne can simply install in a virtual-environment or as a privileged user by:\n\n   ```bash\n   cd sgs-pycycle\n   python setup.py install\n   ```\n\nor one can add a symlink or copy `sgs-pycycle/sgs_pycycle` into any directory\nthat is included in the PYTHONPATH environmental variable or create own\ndirectory.\n\n   ```bash\n   mkdir mypythonpathdir\n   export PYTHONPATH=/full/path/to/mypythonpathdir\n   cp -R sgs-pycycle/sgs_pycycle /full/path/to/mypythonpathdir/\n   ```\n\nThis latest method also eliminates the need for `setuptools`, but will not add\nthe dedicated executable `sgs_pycycle`. Still the CLI interface can be accessed\nas shown bellow.\n\nCheck if everything works by typing:\n\n   ```bash\n   python -m sgs_pycycle -h\n   ```\n\n\n## Overview and technical design\n\nThe main goals when considering the technical design were:\n\n### Portability\n\nAlthough there are several Python libraries that simplify the HTTP request as well\nas handling the responses like `requests` and `pydantic` for object mapping,\nI decided to use only the standard Python modules to make installation and\nusage as simple as possible.\n\n\n### Simplicity\n\nThere are many possible improvements (some of them listed bellow), but I made a\nconscious decision to only stick with the provided task.\n\n\n### Object-oriented design and extensibility\n\nMaking HTTP requests and processing data is a relatively simple task.\nI wanted to provide a small set of objects (Station and StationCollection) in\norder to make the use of this client library easier to extend.\nInstead of using the provided CLI interface, it is now quite easy to use the\nclient library in f.i. web application or GUI application.\nIn addition using a simple object mapper is more elegant and intuitive than\nsimply manipulating JSON structures.\n\n\n## Examples\n\n### CLI\n\nThe CLI interface can be accessed in two ways.\n\n   ```bash\n   python -m sgs_pycycle -h\n   ```\n\nor if sgs-pycycle was installed using `setuptools`, there will also be a\nbinary called `sgs_pycycle`. Hence\n\n   ```bash\n   sgs_pycycle -h\n   ```\n\nwill yield the same result and display a summery of all available CLI options.\n\n   ```bash\n   python -m sgs_pycycle -l\n   sgs_pycycle -l\n   ```\n\nwill display all stations with id, name, number of docks available, number\nof bikes available.\n\n   ```bash\n   python -m sgs_pycycle -l -k name\n   sgs_pycycle -l -k name\n   ```\n\nwill produce the same content, only order the stations by name.\n\nAll station attributes can be used for sorting, given that string attributes\nwill be sorted as strings (f.i. '98' > '1654').\n\n   ```bash\n   python -m sgs_pycycle -l -c user-testapp\n   sgs_pycycle -l -c user-testapp\n   ```\n\nwill call the API using 'user-testapp' as Client-Identifier.\n\n\n### Using the library directly\n\nUsing the library directly provides more possibilities and makes it possible\nto embed the client into a web-application or even a GUI application.\n\n   ```python\n   import sgs_pycycle\n\n   # Auto discovery URL and identity\n   A_D_URL = 'https://gbfs.urbansharing.com/oslobysykkel.no/gbfs.json'\n   CLIENT_IDENTITY = 'user-testapp'\n\n   # create a Client object\n   client = sgs_pycycle.Client(A_D_URL, CLIENT_IDENTITY)\n\n   # fetch the entire collection\n   try:\n       collection = client.get_station_collection()\n   except sgs_pycycle.ClientConnectionError as e:\n       # ... unable to connect routines and messages\n       pass\n   len(collection)  # amount of stations\n\n   # print the last_reported value for each station\n   for station in collection:\n       print(f'{station.name} - {station.last_reported}')\n\n   # sort the stations by name\n   collection.sort_by_key('name')\n   for station in collection:\n       # prints id, name, number of docks available, number of bikes available\n       print(station)\n   ```\n\n\n## Todo\n\nIncomplete list of possible future improvements:\n\n- unit tests\n\n- caching by using the `last_updated` and `last_reported` attributes for better performance\n\n- extended StationCollection API, fetching a single Station, advanced sorting..\n\n- translation / locale support\n\n- API documentation with Sphinx\n\n- Better error reporting and sanity checking\n\n- Formatting output for CLI (header, even spacing, etc...)\n\n- More CLI parameters (socket timeout, SSL context, etc...)\n\n\n## Author\n\nSimeon Simeonov - sgs @ Freenode\n\n\n## [License](https://github.com/sgs-test/sgs-pycycle/blob/master/LICENSE)\n\nCopyright (c) 2020, Simeon Simeonov\nAll rights reserved.\n\n[Licensed](https://github.com/sgs-test/sgs-pycycle/blob/master/LICENSE) under the BSD 2-clause.\nSPDX-License-Identifier: BSD-2-Clause-FreeBSD\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sgs-test/sgs-pycycle",
    "keywords": "oslo bikes bicycle api",
    "license": "BSD 2-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sgs-pycycle",
    "package_url": "https://pypi.org/project/sgs-pycycle/",
    "platform": "",
    "project_url": "https://pypi.org/project/sgs-pycycle/",
    "project_urls": {
      "Bug Reports": "https://github.com/sgs-test/sgs-pycycle/issues",
      "Homepage": "https://github.com/sgs-test/sgs-pycycle",
      "Source": "https://github.com/sgs-test/sgs-pycycle"
    },
    "release_url": "https://pypi.org/project/sgs-pycycle/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python client and object-mapper for the Oslo Bysykkel API",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8054060,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fa98db2d7c1c49b9bebc30729dad9fc67d89184a6b168345c9e329a0b8d87fd",
          "md5": "0e363d6581384b0e727a1dc87a52078a",
          "sha256": "fa1996e96642209e36a0b235ce11e234127509f427349770644fef8af633d803"
        },
        "downloads": -1,
        "filename": "sgs_pycycle-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e363d6581384b0e727a1dc87a52078a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13704,
        "upload_time": "2020-08-27T18:59:03",
        "upload_time_iso_8601": "2020-08-27T18:59:03.048888Z",
        "url": "https://files.pythonhosted.org/packages/0f/a9/8db2d7c1c49b9bebc30729dad9fc67d89184a6b168345c9e329a0b8d87fd/sgs_pycycle-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41143261b4ec9f63cab283b64046dd86e0ab99fb47617ab24fd7e7a5ffca0880",
          "md5": "e0511ddd13308087a2d6808b356152eb",
          "sha256": "27c68908e33b13b8810e1339d6e01fc1db249cdbed89759b1314ec8406e0c401"
        },
        "downloads": -1,
        "filename": "sgs-pycycle-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0511ddd13308087a2d6808b356152eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11363,
        "upload_time": "2020-08-27T18:59:05",
        "upload_time_iso_8601": "2020-08-27T18:59:05.535779Z",
        "url": "https://files.pythonhosted.org/packages/41/14/3261b4ec9f63cab283b64046dd86e0ab99fb47617ab24fd7e7a5ffca0880/sgs-pycycle-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0fa98db2d7c1c49b9bebc30729dad9fc67d89184a6b168345c9e329a0b8d87fd",
        "md5": "0e363d6581384b0e727a1dc87a52078a",
        "sha256": "fa1996e96642209e36a0b235ce11e234127509f427349770644fef8af633d803"
      },
      "downloads": -1,
      "filename": "sgs_pycycle-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e363d6581384b0e727a1dc87a52078a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13704,
      "upload_time": "2020-08-27T18:59:03",
      "upload_time_iso_8601": "2020-08-27T18:59:03.048888Z",
      "url": "https://files.pythonhosted.org/packages/0f/a9/8db2d7c1c49b9bebc30729dad9fc67d89184a6b168345c9e329a0b8d87fd/sgs_pycycle-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41143261b4ec9f63cab283b64046dd86e0ab99fb47617ab24fd7e7a5ffca0880",
        "md5": "e0511ddd13308087a2d6808b356152eb",
        "sha256": "27c68908e33b13b8810e1339d6e01fc1db249cdbed89759b1314ec8406e0c401"
      },
      "downloads": -1,
      "filename": "sgs-pycycle-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e0511ddd13308087a2d6808b356152eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11363,
      "upload_time": "2020-08-27T18:59:05",
      "upload_time_iso_8601": "2020-08-27T18:59:05.535779Z",
      "url": "https://files.pythonhosted.org/packages/41/14/3261b4ec9f63cab283b64046dd86e0ab99fb47617ab24fd7e7a5ffca0880/sgs-pycycle-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}