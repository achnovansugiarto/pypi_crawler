{
  "info": {
    "author": "Eoin Noble",
    "author_email": "eoin@eoinnoble.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Freely Distributable",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "# Python ABC\n\n[![Python 3.9.5](https://img.shields.io/badge/python-3.9.5-blue.svg)][1]\n\nA python implementation of [the ABC Software metric][2]:\n\n> The ABC software metric was introduced by Jerry Fitzpatrick in 1997 to overcome the drawbacks of the LOC. The metric defines an ABC score as a triplet of values that represent the size of a set of source code statements. An ABC score is calculated by counting the number of assignments (A), number of branches (B), and number of conditionals (C) in a program. ABC score can be applied to individual methods, functions, classes, modules or files within a program.\n\nFitzpatrick's original paper is, at the time of writing, only [available via the Wayback\nMachine][3], so [a copy of it is included in this repo][4] as well.\n\nThe paper lists the counting rules for C, C++ and Java, so here are the rules this repo uses for\nPython:\n\n- Add one to the assignment count when:\n  - Occurrence of an assignment operator (excluding default parameter assignments).\n- Add one to the branch count when:\n  - Occurrence of a function call/await or a class method call/await.\n  - Occurrence of a class instantiation.\n- Add one to the condition count when:\n  - Occurrence of a conditional operator.\n  - Occurrence of the following keywords: `else`, `elif`, `except`.\n  - Occurrence of an `assert` statement without a conditional operator.\n\n## Usage\n\nInstall the requirements in your virtual environment of choice, then you can see the command line\narguments that are available:\n\n```bash\n$ python -m python_abc --help\nusage: python_abc [-h] [--debug DEBUG] [--sort SORT] [--verbose VERBOSE] path\n\nA python implementation of the ABC Software metric: https://en.wikipedia.org/wiki/ABC_Software_Metric\n\npositional arguments:\n  path               path to directory or file\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --debug DEBUG      display AST output for each element in the parsed tree\n  --sort SORT        sort files from highest to lowest magnitude\n  --verbose VERBOSE  display marked-up file\n```\n\nGiven `file.py` that contains the following text:\n\n```python\nif a and b:\n    print(a)\nelse:\n    print(b)\n\na = sum(i for i in range(1000) if i % 3 == 0 and i % 5 == 0)\n\ndef f(n):\n    def inner(n):\n        return n ** 2\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    elif n < 5:\n        return (n - 1) ** 2\n    return n * pow(inner(n), f(n - 1), n - 3)\n```\n\nYou can get the barebones output as follows:\n\n```bash\n$ python -m python_abc /path/to/file.py\n/path/to/file.py         <1, 7, 10> (12.2)\n```\n\nPassing the `verbose` flag will give more detail:\n\n```bash\n$ python -m python_abc file.py --verbose=true\ncc    | if a and b:\nb     |     print(a)\nc     | else:\nb     |     print(b)\n      |\nabbcc | a = sum(i for i in range(1000) if i % 3 == 0 and i % 5 == 0)\n      |\n      | def f(n):\n      |     def inner(n):\n      |         return n ** 2\nc     |     if n == 0:\n      |         return 1\ncc    |     elif n == 1:\n      |         return n\ncc    |     elif n < 5:\n      |         return (n - 1) ** 2\nbbb   |     return n * pow(inner(n), f(n - 1), n - 3)\nfile.py          <1, 7, 10> (12.2)\n```\n\nIf you want to inspect the abstract syntax tree for the file you can pass the `debug` flag, which\nwill print out each node from the tree and the vector that resulted from it.\n\nThe `path` argument can also be a path to a directory, in which case all Python files in that\ndirectory (and its sub-directories) will be scanned, at which point it can be useful to pass the\n`sort` flag to rank the files by ABC magnitude:\n\n```bash\n$ python -m python_abc . --sort\n./calculate.py                              <18, 56, 23> (63.2)\n./vector.py                                 <12, 23, 11> (28.2)\n./main.py                                    <10, 23, 8> (26.3)\n./tests/test_vector.py                       <4, 19, 10> (21.8)\n./tests/__init__.py                           <4, 12, 1> (12.7)\n./tests/test_radon_test_cases.py                <1, 2, 1> (2.4)\n./tests/test_calculate_condition.py             <1, 2, 1> (2.4)\n./tests/test_calculate_empty.py                 <1, 2, 1> (2.4)\n./tests/test_calculate_assignment.py            <1, 2, 1> (2.4)\n./tests/test_calculate_branch.py                <1, 2, 1> (2.4)\n```\n\nFinally you can pass a `cores` argument to tell the library how many CPU cores to use. By\ndefault the library will try to use all the cores that are available on your machine.\n\n[1]: https://www.python.org/downloads/release/python-395/\n[2]: https://en.wikipedia.org/wiki/ABC_Software_Metric\n[3]: https://web.archive.org/web/20210606115110/https://www.softwarerenovation.com/ABCMetric.pdf\n[4]: https://github.com/eoinnoble/python-abc/blob/main/ABCMetric.pdf",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eoinnoble/python-abc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-abc",
    "package_url": "https://pypi.org/project/python-abc/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-abc/",
    "project_urls": {
      "Homepage": "https://github.com/eoinnoble/python-abc"
    },
    "release_url": "https://pypi.org/project/python-abc/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python implementation of the ABC Software metric",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14252804,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e955a32710e8de2d195d2cd49a0d6fe3aeff594eb956d60c163dc324598be88f",
          "md5": "40932506a7b1b2f795be6f2a34ead488",
          "sha256": "adabbf79afe44f18f0d48c57058e94285fa179bc4f9dbb452dafdc9f72fce9a6"
        },
        "downloads": -1,
        "filename": "python_abc-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40932506a7b1b2f795be6f2a34ead488",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7519,
        "upload_time": "2021-09-19T15:27:27",
        "upload_time_iso_8601": "2021-09-19T15:27:27.683381Z",
        "url": "https://files.pythonhosted.org/packages/e9/55/a32710e8de2d195d2cd49a0d6fe3aeff594eb956d60c163dc324598be88f/python_abc-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dff222c4a100cd240ee54c3dd7d16e61f02397a0295d9a2c36cdd8bd3e55528",
          "md5": "27fb4ba892181d9c4cd270c64a5fe424",
          "sha256": "ce986a210a49531297199ebd08870554bdf0fee8f206ca5ef5f0d028b7821e70"
        },
        "downloads": -1,
        "filename": "python-abc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "27fb4ba892181d9c4cd270c64a5fe424",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7352,
        "upload_time": "2021-09-19T15:27:29",
        "upload_time_iso_8601": "2021-09-19T15:27:29.077210Z",
        "url": "https://files.pythonhosted.org/packages/4d/ff/222c4a100cd240ee54c3dd7d16e61f02397a0295d9a2c36cdd8bd3e55528/python-abc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e35973ccea7302dfe994331e2824bfc8cc4e4c8ba7f0b9d1f16bcda5ef26a3",
          "md5": "ac059f6103feb9045b0b95ef797a554a",
          "sha256": "90017d09fbac7bde4b64b2c7e1b5d22da9055b64b821d1a2b4dc805b450b251a"
        },
        "downloads": -1,
        "filename": "python-abc-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac059f6103feb9045b0b95ef797a554a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7423,
        "upload_time": "2022-06-26T21:36:06",
        "upload_time_iso_8601": "2022-06-26T21:36:06.156883Z",
        "url": "https://files.pythonhosted.org/packages/17/e3/5973ccea7302dfe994331e2824bfc8cc4e4c8ba7f0b9d1f16bcda5ef26a3/python-abc-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17e35973ccea7302dfe994331e2824bfc8cc4e4c8ba7f0b9d1f16bcda5ef26a3",
        "md5": "ac059f6103feb9045b0b95ef797a554a",
        "sha256": "90017d09fbac7bde4b64b2c7e1b5d22da9055b64b821d1a2b4dc805b450b251a"
      },
      "downloads": -1,
      "filename": "python-abc-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac059f6103feb9045b0b95ef797a554a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7423,
      "upload_time": "2022-06-26T21:36:06",
      "upload_time_iso_8601": "2022-06-26T21:36:06.156883Z",
      "url": "https://files.pythonhosted.org/packages/17/e3/5973ccea7302dfe994331e2824bfc8cc4e4c8ba7f0b9d1f16bcda5ef26a3/python-abc-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}