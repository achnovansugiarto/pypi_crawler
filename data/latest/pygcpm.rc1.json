{
  "info": {
    "author": "Matthew Knight James",
    "author_email": "mattkjames7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyGCPM\n\nPyGCPM is a Python 3 wrapper for the Global Core Plasma Model\n(Gallagher et al., 2000). This module uses version 2.4 from\nhttps://plasmasphere.nasa.gov/models/\n\nThe original code has been modified slightly such that it produces less \noutput to the terminal and the path of the data files used is passed \nthrough a C wrapper so that the Fortran code is able to find them.\n\nIt's also worth noting that the IGRF component of the model needs \nupdating - strange things may happen with years beyond ~2010. I will\nfix this.\n\n## Installation\n\nUsing `pip`:\n\n```bash\npython3 -m pip install PyGCPM --user\n```\n\nor,\n\n```bash\npip3 install PyGCPM --user\n```\n\nFrom this repo:\n\n```\ngit clone https://github.com/mattkjames7/PyGCPM.git\ncd PyGCPM/\npython3 setup.py install --user\n```\n\n## Usage\n\nSo far, there are only two working functions - `GCPM` and `PlotEqSlice`,\nthe `PlotMLTSlice` function is doing odd things. It's worth noting that\nthis model will take some time to run with large numbers of points.\n\n### `GCPM`\n\nThis function takes in position in the Solar Magnetospheric (SM) \ncoordinate system, along with a date and a time then produces a model\noutput for each position.\n\n```python\nimport PyGCPM\nne,nH,nHe,nO = PyGCPM.GCPM(x,y,z,Date,ut,Kp=Kp,Verbose=Verbose)\n```\n\nWhere the inputs are:\n\n| Variable | Data Type | Description | \n|:--:|:---:|:---|\n| `x` | `float` or `numpy.ndarray` | Scalar or array _x_ position(s) in _R<sub>E</sub>_ |\n| `y` | `float` or `numpy.ndarray` | Scalar or array _y_ position(s) in _R<sub>E</sub>_ |\n| `z` | `float` or `numpy.ndarray` | Scalar or array _z_ position(s) in _R<sub>E</sub>_ |\n| `Date` | `int` or `numpy.ndarray` | Integer date in format yyyymmdd - if provided with a scalar then all positions will use the same date, otherwise an array can be provided for a time series |\n| `ut` | `float` or `numpy.ndarray` | Floating point hours where `ut = hh + mm/60 + ss/3600`. As with `Date` - if provided with a scalar then all positions will use the same time, otherwise an array can be provided for a time series |\n| `Kp` | `float` or `numpy.ndarray` | (optional) Kp index, as with `Date` and `ut` - this can be a scalar or an array |\n| `Verbose` | `bool` | (optional) If `True` then the function will display its progress in the terminal |\n\nFunction outputs:\n\n| Variable | Data Type | Description | \n|:--:|:---:|:---|\n| `ne` | `float32` | Electron density at each position (cm<sup>-3</sup>) |\n| `nH` | `float32` | Proton density at each position (cm<sup>-3</sup>)  |\n| `nHe` | `float32` | Helium ion density at each position (cm<sup>-3</sup>)  |\n| `nO` | `float32` | Oxygen ion density at each position (cm<sup>-3</sup>)  |\n\n\n### `PlotEqSlice`\n\nThis function will plot a slice through the SM equator (_z<sub>SM</sub>_ = 0).\n\n```python\nimport PyGCPM\nPyGCPM.PlotEqSlice(Date,ut,Parameter='ne',Rmax=10.0,dR=0.5,Kp=1.0,fig=None,\n\t\tmaps=[1,1,0,0],zlog=True,cmap='gnuplot',scale=None,Verbose=False)\n```\n\n| Variable | Data Type | Description | \n|:--:|:---:|:---|\n| `Date` | `int` | Integer date in format yyyymmdd |\n| `ut` | `float` | Floating point hours where `ut = hh + mm/60 + ss/3600` |\n| `Parameter` | `str` | String containing the name of the parameter to plot: `'ne'|'nH'|'nHe'|'nO'` |\n| `Rmax` | `float` | This defines the maximum postion along _x_ and _y_ axes to calculate the model at - the _x_ and _y_ limits of the plot are `(-Rmax,Rmax)` and `(Rmax,-Rmax)`, respectively |\n| `dR` | `float` | The plot is a grid - this is the size of a grid box in _R<sub>E</sub>_ |\n| `Kp` | `float` | Kp index |\n| `fig` | `object` or `None` | If `None` - a new plot is created; if set to an instance of `matplotlib.pyplot`, then the current figure is used and a new subplot is created within; if a `matplotlib.pyplot.Axes` instance is used then plotting is done on the current axes |\n| `maps` | `list` or `tuple` | This defines the number of subplots and the position of the current plot: `maps = [xmaps,ymaps,xmap,ymap]` |\n| `zlog` | `bool` | If True, the color scale is logarithmic |\n| `cmap` | `str` | String containing the name of the colormap to use (alternatively provide the colormap object itself) |\n| `scale` | `list`, `tuple` or `None` | If `None` then the limits of the color scale are detemined automatically. If `list` or `tuple` then these should contain two elements defining the minimum and maximum scale limits. |\n| `Verbose` | `bool` | If `True` then the function will display its progress in the terminal |\n\n\n\n## References\n\nGallagher, D. L., Craven, P. D., & Comfort, R. H. (2000, aug). Global core plasma model.\nJ. Geophys. Res. Sp. Phys., 105(A8), 18819â€“18833. doi: 10.1029/1999JA000241\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mattkjames7/PyGCPM",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyGCPM",
    "package_url": "https://pypi.org/project/PyGCPM/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyGCPM/",
    "project_urls": {
      "Homepage": "https://github.com/mattkjames7/PyGCPM"
    },
    "release_url": "https://pypi.org/project/PyGCPM/0.0.1/",
    "requires_dist": [
      "numpy",
      "DateTimeTools (>=0.0.6)",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "Python wrapper for the Global Core Plasma Model",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7402887,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa14170b77109852fc87171f588c23f1c8fe6a9c592e18666cb116bcab4c8515",
          "md5": "fc154d9e910ac4fbdfb9851f48e230f7",
          "sha256": "6369410b2c29bdd3c6cec3c0e6d72dd0512fd5a564a72eb1e94fe90417a6e6ad"
        },
        "downloads": -1,
        "filename": "PyGCPM-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc154d9e910ac4fbdfb9851f48e230f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4442601,
        "upload_time": "2020-06-05T09:17:32",
        "upload_time_iso_8601": "2020-06-05T09:17:32.478926Z",
        "url": "https://files.pythonhosted.org/packages/aa/14/170b77109852fc87171f588c23f1c8fe6a9c592e18666cb116bcab4c8515/PyGCPM-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa14170b77109852fc87171f588c23f1c8fe6a9c592e18666cb116bcab4c8515",
        "md5": "fc154d9e910ac4fbdfb9851f48e230f7",
        "sha256": "6369410b2c29bdd3c6cec3c0e6d72dd0512fd5a564a72eb1e94fe90417a6e6ad"
      },
      "downloads": -1,
      "filename": "PyGCPM-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fc154d9e910ac4fbdfb9851f48e230f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4442601,
      "upload_time": "2020-06-05T09:17:32",
      "upload_time_iso_8601": "2020-06-05T09:17:32.478926Z",
      "url": "https://files.pythonhosted.org/packages/aa/14/170b77109852fc87171f588c23f1c8fe6a9c592e18666cb116bcab4c8515/PyGCPM-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}