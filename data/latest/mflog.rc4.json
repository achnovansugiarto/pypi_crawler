{
  "info": {
    "author": "Fabien MARTY",
    "author_email": "fabien.marty@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mflog\n\n[//]: # (automatically generated from https://github.com/metwork-framework/github_organization_management/blob/master/common_files/README.md)\n\n**Status (master branch)**\n\n\n\n[![GitHub CI](https://github.com/metwork-framework/mflog/workflows/CI/badge.svg?branch=master)](https://github.com/metwork-framework/mflog/actions?query=workflow%3ACI&branch=master)\n[![Maintenance](https://github.com/metwork-framework/resources/blob/master/badges/maintained.svg)]()\n\n\n\n\n## What is it ?\n\nIt is an opinionated python (structured) logging library built on [structlog](https://www.structlog.org/)\nfor the [MetWork Framework](http://metwork-framework.org) (but it can be used in any context).\n\n> Structured logging means that you donâ€™t write hard-to-parse and hard-to-keep-consistent prose in your logs but that you log events that happen in a context instead.\n> - https://www.structlog.org/en/stable/why.html\n\nExample:\n\n```python\n\nfrom mflog import get_logger\n\n# Get a logger\nlog = get_logger(\"foo.bar\")\n\n# Bind some attributes to the logger depending on the context\nlog = log.bind(user=\"john\")\nlog = log.bind(user_id=123)\n\n# [...]\n\n# Log something\nlog.warning(\"user logged in\", happy=True, another_key=42)\n```\n\nOn `stderr`, you will get:\n\n```\n2019-01-28T07:52:42.903067Z  [WARNING] (foo.bar#7343) user logged in {another_key=42 happy=True user=john user_id=123}\n```\n\nOn `json output file`, you will get:\n\n```json\n{\n    \"timestamp\": \"2019-01-28T08:16:40.047710Z\",\n    \"level\": \"warning\",\n    \"name\": \"foo.bar\",\n    \"pid\": 29317,\n    \"event\": \"user logged in\",\n    \"another_key\": 42,\n    \"happy\": true,\n    \"user\": \"john\",\n    \"user_id\": 123\n}\n```\n\nIf the [python/rich library](https://github.com/willmcgugan/rich) is installed (this is not a\nmandatory requirement) and if the output is a real terminal (and not a redirection or a pipe),\nthe library will automatically configure a fancy color output (of course you can disable it if\nyou don't like):\n\nWith following demo python program:\n```python\nimport mflog\n\n# Get a logger\nlogger = mflog.get_logger(\"foobar\")\n\n# Bind two context variables to this logger\nlogger = logger.bind(user_id=1234, is_logged=True)\n\n# Log something\nlogger.info(\"This is an info message\", special_value=\"foo\")\nlogger.critical(\"This is a very interesting critical message\")\n\n# Let's play with exception\ntry:\n    # Just set a variable to get a demo of locals variable dump\n    var = {\"key1\": [1, 2, 3], \"key2\": \"foobar\"}\n    1/0\nexcept Exception:\n    logger.exception(\"exception raised (a variables dump should follow)\")\n\n```\n\nYou will get this color ouput:\n\n![color output](./demo/demo.png)\n\n## (opinionated) Choices and Features\n\n- we use main ideas from `structlog` library\n- we log `[DEBUG]` and `[INFO]` messages on `stdout` (in a human friendly way)\n- we log `[WARNING]`, `[ERROR]` and `[CRITICAL]` on `stderr` (in a human friendly way)\n- (and optionally) we log all messages (worse than a minimal configurable level) in a configurable file in `JSON` (for easy automatic parsing)\n- (and optionally) we send all messages (worse than a minimal configurable level) to an UDP syslog server (in JSON or in plain text)\n- we can configure a global minimal level to ignore all messages below\n- we reconfigure automatically python standard logging library to use `mflog`\n- Unicode and Bytes messages are supported (in Python2 and Python3)\n- good support for exceptions (with backtraces)\n- override easily minimal levels (for patterns of logger names) programmatically or with plain text configuration files\n- if the [python/rich library](https://github.com/willmcgugan/rich) is installed (this is not a mandatory requirement) and if the output is a real terminal (and not a redirection), the library will automatically configure a fancy color output (can be really useful but of course you can disable this feature if you don't like it)\n\n## How to use ?\n\nA `mflog` logger can be used as a standard `logging` logger.\n\nFor example:\n\n```python\n# Import\nfrom mflog import get_logger\n\n# Get a logger\nx = get_logger(\"foo.bar\")\n\n# Usage\nx.warning(\"basic message\")\nx.critical(\"message with templates: %i, %s\", 2, \"foo\")\nx.debug(\"message with key/values\", foo=True, bar=\"string\")\n\ntry:\n    1/0\nexcept Exception:\n    x.exception(\"we catched an exception with automatic traceback\")\n\nx = x.bind(context1=\"foo\")\nx = x.bind(context2=\"bar\")\nx.info(\"this is a contexted message\", extra_var=123)\n```\n\n## How to configure ?\n\n### In python\n\n```python\nimport mflog\n\n# Configure\nmflog.set_config(minimal_level=\"DEBUG\", json_minimal_level=\"WARNING\",\n                 json_file=\"/foo/bar/my_output.json\")\n\n# Get a logger\nx = mflog.get_logger(\"foo.bar\")\n\n# [...]\n```\n\n### With environment variables\n\n```bash\n\n$ export MFLOG_MINIMAL_LEVEL=\"DEBUG\"\n$ export MFLOG_JSON_MINIMAL_LEVEL=\"WARNING\"\n$ export MFLOG_JSON_FILE=\"/foo/bar/my_output.json\"\n\n$ python\n\n>>> import mflog\n>>>\n>>> # Get a logger\n>>> x = mflog.get_logger(\"foo.bar\")\n>>>\n>>> # [...]\n```\n\n### Note\n\nWhen you get a `mflog` logger, if default configuration is applied automatically\nif not set manually before.\n\n## How to override minimal level for a specific logger\n\nIf you have a \"noisy\" specific logger, you can override its minimal log level.\n\nThe idea is to configure this in a file like this:\n\n```\n# lines beginning with # are comments\n\n# this line say 'foo.bar' logger will have a minimal level of WARNING\nfoo.bar => WARNING\n\n# this line say 'foo.*' loggers will have a minimal level of DEBUG\n# (see python fnmatch for accepted wildcards)\nfoo.* => DEBUG\n\n# The first match wins\n```\n\nThen, you can use\n\n```python\n\n# yes we use a list here because you can use several files\n# (the first match wins)\nmflog.set_config([...], override_files=[\"/full/path/to/your/override.conf\"])\n```\n\nor\n\n```\n# if you want to provide multiple files, use ';' as a separator\nexport MFLOG_MINIMAL_LEVEL_OVERRIDE_FILES=/full/path/to/your/override.conf\n```\n\n## Link with standard python logging library\n\nWhen you get a `mflog` logger or when you call `set_config()` function,\nthe standard python `logging` library is reconfigured to use `mflog`.\n\nExample:\n\n```python\nimport logging\nimport mflog\n\n# standard use of logging library\nx = logging.getLogger(\"standard.logger\")\nprint(\"<output of the standard logging library>\")\nx.warning(\"foo bar\")\nprint(\"</output of the standard logging library>\")\n\n# we set the mflog configuration\nmflog.set_config()\n\n# now logging library use mflog\nprint()\nprint(\"<output of the standard logging library through mflog>\")\nx.warning(\"foo bar\")\nprint(\"</output of the standard logging library through mflog>\")\n```\n\nOutput:\n\n```\n<output of the standard logging library>\nfoo bar\n</output of the standard logging library>\n\n<output of the standard logging library through mflog>\n2019-01-29T09:32:37.093240Z  [WARNING] (standard.logger#15809) foo bar\n</output of the standard logging library through mflog>\n```\n\n## mflog loggers API\n\n### `.debug(message, *args, **kwargs)`\n\nLog the given message as `[DEBUG]`.\n\n- `*args` can be used for placeholders (to format the given message)\n- `**kwargs` can be used for key/values (log context).\n\nExamples:\n\n```python\nfrom mflog import get_logger\n\nx = get_logger('my.logger')\nx.debug(\"my debug message with placeholders: %s and %i\", \"foo\", 123,\n        key1=\"value1, key2=True, key5=123)\n```\n\n### `.info(message, *args, **kwargs)`\n\nSame as `.debug` but with `[INFO]` severity level.\n\n### `.warning(message, *args, **kwargs)`\n\nSame as `.debug` but with `[WARNING]` severity level.\n\n### `.error(message, *args, **kwargs)`\n\nSame as `.debug` but with `[ERROR]` severity level.\n\n### `.critical(message, *args, **kwargs)`\n\nSame as `.debug` but with `[CRITICAL]` severity level.\n\n### `.exception(message, *args, **kwargs)`\n\nSame as `.error` (so with `[ERROR]` severity level) but we automatically add\nthe current stacktrace in the message through special key/values.\n\n### `.bind(**new_values)`\n\nReturn a new logger with `**new_values` added to the existing ones\n(see examples at the beginning).\n\n### `.unbind(*keys)`\n\nReturn a new logger with `*keys` removed from the context.\nIt raises `KeyError` if the key is not part of the context.\n\n### `.try_unbind(*keys)`\n\nLike `.unbind` but best effort:  missing keys are ignored.\n\n### `.die(optional_message, *args, **kwargs)`\n\nSame as `.exception()` but also do a `.dump_locals()` call and exit the program\nwith `sys.exit(1)`.\n\n### `.dump_locals()`\n\nDump locals variables on `stderr` (for debugging).\n\n### `mflog.*`\n\nAll previous loggers method are also available in `mflog` module.\n\nExample:\n\n```python\n\nimport mflog\n\nmflog.warning(\"this is a warning message\", context1=\"foobar\", user_id=123)\n```\n\n## FAQ\n\n## If I want to use mflog inside my library ?\n\nIf you write a library and if you want to use `mflog`, use `mflog` normally.\nYou just should avoid to call `set_config()` inside your library.\n\n\n## Do you have \"thread local context mode\" ?\n\nThis mode is explained [here](https://www.structlog.org/en/stable/thread-local.html).\n\nYou have to understand what you are doing.\n\nIf you want to use it, just add `thread_local_context=True` to your `set_config()`\ncall. And you can use `.new(**new_values)` on mflog loggers to clear context\nand binds some initial values.\n\n\n## Can I globally add an extra context to each log line ?\n\nIf you add `extra_context_func=your_python_func` to your `set_config()` call,\nand if `your_python_func` returns a dict of key/values as strings when called\nwith no argument, these key/values will be added to your log context.\n\nAnother way to do that without even calling `set_config()` is to define\nan environment variable called `MFLOG_EXTRA_CONTEXT_FUNC` containing the\nfull path to your python func.\n\nFull example:\n\n```bash\n# in shell\nexport MFLOG_EXTRA_CONTEXT_FUNC=\"mflog.unittests.extra_context\"\n```\n\nthen, in your python interpreter:\n\n```python\n>>> from mflog import get_logger\n>>> get_logger(\"foo\").info(\"bar\")\n2019-04-11T07:32:53.517260Z     [INFO] (foo#15379) bar {extra_context_key1=extra_context_value1 extra_context_key2=extra_context_value2}\n```\n\nHere is the code of `mflog.unittests.extra_context`:\n\n```python\ndef extra_context():\n    return {\"extra_context_key1\": \"extra_context_value1\",\n            \"extra_context_key2\": \"extra_context_value2\"}\n```\n\n## Can I filter some context keys in stdout/stderr output (but keep them in json output) ?\n\nYes, add `json_only_keys=[\"key1\", \"key2\"]` to your `set_config()` call or use\n`MFLOG_JSON_ONLY_KEYS=key1,key2` environment variable.\n\n## What about if I don't want to redirect standard python `logging` to `mflog` ?\n\nYou can add `standard_logging_redirect=False` in your `set_config()` call\nof set `MFLOG_STANDARD_LOGGING_REDIRECT=0` environment variable.\n\n## Can I silent a specific noisy logger?\n\nYou can use `override_files` feature to do that or you can also use the\n`mflog.add_override` function.\n\nFor example:\n\n```python\nimport mflog\n\n# for all mylogger.* loggers (fnmatch pattern), the minimal level is CRITICAL\nmflog.add_override(\"mylogger.*\", CRITICAL)\n\n# Not very interesting but this call will be ignored\nmflog.get_logger(\"mylogger.foo\").warning(\"foo\")\n```\n\n## How can I use syslog logging?\n\nYou can configure it with these keyword arguments during `set_config()` call:\n\n- `syslog_minimal_level`: `WARNING`, `CRITICAL`...\n- `syslog_address`: `null` (no syslog (defaut)), `127.0.0.1:514` (send packets to 127.0.0.1:514), `/dev/log` (unix socket)...\n- `syslog_format`: `msg_only` (default) or `json`\n\nor with corresponding env vars:\n\n- `MFLOG_SYSLOG_MINIMAL_LEVEL`\n- `MFLOG_SYSLOG_ADDRESS`\n- `MFLOG_SYSLOG_FORMAT`\n\n## How to disable the fancy color output?\n\nThis feature is automatically enabled when:\n\n- [python/rich](https://github.com/willmcgugan/rich) library is installed\n- the corresponding output (stdout, stderr) is a real terminal (and not a redirection to a file)\n\nBut you can manually disable it by adding `fancy_output=False` to your `set_config()`.\n\n## Coverage\n\nSee [Coverage report](https://metwork-framework.org/pub/misc/mflog/coverage/)\n\n\n\n\n\n\n## Contributing guide\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\n\n\n## Code of Conduct\n\nSee [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) file.\n\n\n\n## Sponsors\n\n*(If you are officially paid to work on MetWork Framework, please contact us to add your company logo here!)*\n\n[![logo](https://raw.githubusercontent.com/metwork-framework/resources/master/sponsors/meteofrance-small.jpeg)](http://www.meteofrance.com)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/metwork-framework/mflog",
    "keywords": "",
    "license": "BSD 3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mflog",
    "package_url": "https://pypi.org/project/mflog/",
    "platform": "",
    "project_url": "https://pypi.org/project/mflog/",
    "project_urls": {
      "Homepage": "https://github.com/metwork-framework/mflog"
    },
    "release_url": "https://pypi.org/project/mflog/0.1.0/",
    "requires_dist": [
      "structlog (>=19.1.0)",
      "six"
    ],
    "requires_python": ">=2.7",
    "summary": "opinionated python (structured) logging library built on structlog",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9075843,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "139aec686f847424952d6c2baf803f663dc9b66ef6a8570d2e5e17e8bd2591c0",
          "md5": "3fccaf4d95256b1b88d26c85266564b5",
          "sha256": "a27cff2b31828aafe8a5276a51405b340415cec25578ab1626fb00cc4c6e13e7"
        },
        "downloads": -1,
        "filename": "mflog-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fccaf4d95256b1b88d26c85266564b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 14363,
        "upload_time": "2020-05-06T13:04:33",
        "upload_time_iso_8601": "2020-05-06T13:04:33.154824Z",
        "url": "https://files.pythonhosted.org/packages/13/9a/ec686f847424952d6c2baf803f663dc9b66ef6a8570d2e5e17e8bd2591c0/mflog-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32ca8baa2e09ed83c529769659e0dc27502e223505b64058143e2f47520827e8",
          "md5": "47769e77555fbdfcf9ac56d6df46380b",
          "sha256": "80f19647eafe99602cd5a97b9f9ffbf2be4d7b9812f015e7474059b4bdb50163"
        },
        "downloads": -1,
        "filename": "mflog-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "47769e77555fbdfcf9ac56d6df46380b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 16229,
        "upload_time": "2020-05-06T13:04:34",
        "upload_time_iso_8601": "2020-05-06T13:04:34.156090Z",
        "url": "https://files.pythonhosted.org/packages/32/ca/8baa2e09ed83c529769659e0dc27502e223505b64058143e2f47520827e8/mflog-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0a6760754ce74bc9eef8e1bcf8cd5304d1b72f7d378434a8fe442cac1175d96",
          "md5": "8e632520f817c4ad8bc67cac9483484f",
          "sha256": "089d2ad08f6f91418bf0371738eafec23df43dcba27b3dbb99d29fec92248e60"
        },
        "downloads": -1,
        "filename": "mflog-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e632520f817c4ad8bc67cac9483484f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 16160,
        "upload_time": "2020-05-25T14:00:26",
        "upload_time_iso_8601": "2020-05-25T14:00:26.343030Z",
        "url": "https://files.pythonhosted.org/packages/f0/a6/760754ce74bc9eef8e1bcf8cd5304d1b72f7d378434a8fe442cac1175d96/mflog-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5d1fe3edd380014571969c231484c707c59c8216a47be3de80986cc69b240e2",
          "md5": "0e429f949bf5a75ccb9e14ce562fff8c",
          "sha256": "4943516720942d5b187d1a3e166c0fd7e157764bcd3ed32cc32478447ad0c318"
        },
        "downloads": -1,
        "filename": "mflog-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0e429f949bf5a75ccb9e14ce562fff8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 18725,
        "upload_time": "2020-05-25T14:00:27",
        "upload_time_iso_8601": "2020-05-25T14:00:27.420061Z",
        "url": "https://files.pythonhosted.org/packages/d5/d1/fe3edd380014571969c231484c707c59c8216a47be3de80986cc69b240e2/mflog-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ca6070e7044b2a064a66d4cfcaa88151a403d38d5d9325558b622f796802567",
          "md5": "113cd7e3d3fa111b64d31e5cc89713e8",
          "sha256": "76814d2b59dc6167b0a2454348a5b19e567c0f6164468ae61911b78d3d0dc4ba"
        },
        "downloads": -1,
        "filename": "mflog-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "113cd7e3d3fa111b64d31e5cc89713e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 16655,
        "upload_time": "2020-11-16T10:52:34",
        "upload_time_iso_8601": "2020-11-16T10:52:34.401235Z",
        "url": "https://files.pythonhosted.org/packages/5c/a6/070e7044b2a064a66d4cfcaa88151a403d38d5d9325558b622f796802567/mflog-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "243db3218e526af53f0be1a1686496708e821789369596615484ecc0628fa2fa",
          "md5": "8e48305093730941f33de38fc9f5c044",
          "sha256": "39af9a073d340cf641ee8333b3431768f0d2faab5ab00c462c6e7467f20710c2"
        },
        "downloads": -1,
        "filename": "mflog-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8e48305093730941f33de38fc9f5c044",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 21300,
        "upload_time": "2020-11-16T10:52:35",
        "upload_time_iso_8601": "2020-11-16T10:52:35.714985Z",
        "url": "https://files.pythonhosted.org/packages/24/3d/b3218e526af53f0be1a1686496708e821789369596615484ecc0628fa2fa/mflog-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2f864db4c47d4c0e5571d9968a2832997b76d1561fe0e5ddee360c48c3fe545",
          "md5": "e3182b14860d61887931dfc0a37b58be",
          "sha256": "07430ab3a427e022a4cb95c9c1f08f5ec93134bb06049aae56c0e4734713c5ec"
        },
        "downloads": -1,
        "filename": "mflog-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3182b14860d61887931dfc0a37b58be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 16682,
        "upload_time": "2021-01-07T09:59:21",
        "upload_time_iso_8601": "2021-01-07T09:59:21.559732Z",
        "url": "https://files.pythonhosted.org/packages/a2/f8/64db4c47d4c0e5571d9968a2832997b76d1561fe0e5ddee360c48c3fe545/mflog-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3130a8060dbbb060b714ab4a92fb6a76804fb94d3c64110f3301dc90f4a2f806",
          "md5": "167046b4048670db33fe11a21e5df212",
          "sha256": "96c9ee279b65f9b377a62e522819743bd8b9e84ad26183d5b6bcd2d80dbb036c"
        },
        "downloads": -1,
        "filename": "mflog-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "167046b4048670db33fe11a21e5df212",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 21316,
        "upload_time": "2021-01-07T09:59:22",
        "upload_time_iso_8601": "2021-01-07T09:59:22.683264Z",
        "url": "https://files.pythonhosted.org/packages/31/30/a8060dbbb060b714ab4a92fb6a76804fb94d3c64110f3301dc90f4a2f806/mflog-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2f864db4c47d4c0e5571d9968a2832997b76d1561fe0e5ddee360c48c3fe545",
        "md5": "e3182b14860d61887931dfc0a37b58be",
        "sha256": "07430ab3a427e022a4cb95c9c1f08f5ec93134bb06049aae56c0e4734713c5ec"
      },
      "downloads": -1,
      "filename": "mflog-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e3182b14860d61887931dfc0a37b58be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 16682,
      "upload_time": "2021-01-07T09:59:21",
      "upload_time_iso_8601": "2021-01-07T09:59:21.559732Z",
      "url": "https://files.pythonhosted.org/packages/a2/f8/64db4c47d4c0e5571d9968a2832997b76d1561fe0e5ddee360c48c3fe545/mflog-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3130a8060dbbb060b714ab4a92fb6a76804fb94d3c64110f3301dc90f4a2f806",
        "md5": "167046b4048670db33fe11a21e5df212",
        "sha256": "96c9ee279b65f9b377a62e522819743bd8b9e84ad26183d5b6bcd2d80dbb036c"
      },
      "downloads": -1,
      "filename": "mflog-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "167046b4048670db33fe11a21e5df212",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 21316,
      "upload_time": "2021-01-07T09:59:22",
      "upload_time_iso_8601": "2021-01-07T09:59:22.683264Z",
      "url": "https://files.pythonhosted.org/packages/31/30/a8060dbbb060b714ab4a92fb6a76804fb94d3c64110f3301dc90f4a2f806/mflog-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}