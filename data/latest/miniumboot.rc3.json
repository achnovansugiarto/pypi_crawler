{
  "info": {
    "author": "shigebeyond",
    "author_email": "772910474@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "[GitHub](https://github.com/shigebeyond/MiniumBoot) | [Gitee](https://gitee.com/shigebeyond/MiniumBoot)\n\n# MiniumBoot - yaml驱动Minium测试\n\n## 概述\nMinium是微信小程序的自动化测试工具，但是要写python代码；\n\n考虑到部分测试伙伴python能力不足，因此扩展Minium，支持通过yaml配置测试步骤;\n\n框架通过编写简单的yaml, 就可以执行一系列复杂的微信小程序操作步骤, 如点击/输入/移动/上下滑/左右滑/放大缩小/提取变量/打印变量等，极大的简化了伙伴编写自动化测试脚本的工作量与工作难度，大幅提高人效；\n\n框架通过提供类似python`for`/`if`/`break`语义的步骤动作，赋予伙伴极大的开发能力与灵活性，能适用于广泛的测试场景。\n\n框架提供`include`机制，用来加载并执行其他的步骤yaml，一方面是功能解耦，方便分工，一方面是功能复用，提高效率与质量，从而推进测试整体的工程化。\n\n## 特性\n1. 基于 Minium 1.2.8, Minium要求使用python3.8以上;\n2. 支持通过yaml来配置执行的步骤，简化了自动化测试开发:\n每个步骤可以有多个动作，但单个步骤中动作名不能相同（yaml语法要求）;\n动作代表小程序上的一种操作，如tap/swipe/scoll等等;\n3. 支持复杂的手势: 移动/上下滑/左右滑/放大缩小/多个点组成的移动轨迹等;\n4. 支持提取器\n5. 支持校验器\n6. 支持类似python`for`/`if`/`break`语义的步骤动作，灵活适应各种场景\n7. 支持`include`引用其他的yaml配置文件，以便解耦与复用\n\n## todo\n1. 支持更多的动作\n\n## 安装\n1. 安装 minium\n```\npip3 install https://minitest.weixin.qq.com/minium/Python/dist/minium-latest.zip\n```\n\n2. 安装 MiniumBoot\n```\npip3 install MiniumBoot\n```\n\n安装后会生成命令`MiniumBoot`;\n\n注： 对于深度deepin-linux系统，生成的命令放在目录`~/.local/bin`，建议将该目录添加到环境变量`PATH`中，如\n```\nexport PATH=\"$PATH:/home/shi/.local/bin\"\n```\n\n## 使用\n1. 修改配置文件(yml)中的 `init_driver` 动作的参数, 如平台、项目路径、开发者工具cli路径等\n\n2. 使用\n```\n# 1 执行单个文件\nMiniumBoot 步骤配置文件.yml\n\n# 2 执行多个文件\nMiniumBoot 步骤配置文件1.yml 步骤配置文件2.yml ...\n\n# 3 执行单个目录, 即执行该目录下所有的yml文件\nMiniumBoot 步骤配置目录\n\n# 4 执行单个目录下的指定模式的文件\nMiniumBoot 步骤配置目录/step-*.yml\n```\n\n## 步骤配置文件及demo\n用于指定多个步骤, 示例见源码 [example](https://github.com/shigebeyond/MiniumBoot/tree/main/example) 目录下的文件;\n\n顶级的元素是步骤;\n\n每个步骤里有多个动作(如sleep)，如果动作有重名，就另外新开一个步骤写动作，这是由yaml语法限制导致的，但不影响步骤执行。\n\n[demo](https://github.com/shigebeyond/MiniumBoot/blob/main/example/)\n\n[demo视频](https://www.zhihu.com/zvideo/1542517561199009793)\n\n## 查找元素的方法\n参考[Page.get_element()](https://minitest.weixin.qq.com/#/minium/Python/api/Page?id=get_element)\n1. id: 根据 name 属性值来查找\n2. css: 根据 css selector 来查找 \n3. xpath: 根据 xpath 来查找\n\n## 配置详解\n支持通过yaml来配置执行的步骤;\n\n每个步骤可以有多个动作，但单个步骤中动作名不能相同（yaml语法要求）;\n\n动作代表 Minium 上的一种操作，如tap/swipe/scoll等等;\n\n下面详细介绍每个动作:\n\n1. init_driver: 初始化driver, 必须定义在第一个步骤中的第一个动作\n```yaml\n# 初始化driver\n- init_driver:\n    debug_mode: debug\n    enable_app_log: true\n    # windows cli: F:\\微信web开发者工具\\cli.bat auto --project \"F:\\project\\jym_wechat\" --auto-port 9420\n    project_path: F:\\project\\jym_wechat\n    dev_tool_path: F:\\微信web开发者工具\\cli.bat \n    app: wx\n    close_ide: false\n    test_port: 9420\n    assert_capture: true\n    use_push: true\n    auto_relaunch: true\n    request_timeout: 60\n    remote_connect_timeout: 300\n#    account_info:\n#      wx_nick_name: locker\n#      open_id: o6zAJs_pwr**********aROZDjiw\n    platform: ide # 小程序运行的平台，可选值为：ide, Android, IOS\n    # 当 platform = Android 时\n#    device_desire:\n#      serial: f978cc97 # Android设备号 adb devices查看\n#      uiautomator: UiAutomator2\n    # 当 platform = IOS 时\n#    device_desire:\n#      wda_project_path: /Users/sherlock/.npm-global/lib/node_modules/appium/node_modules/appium-webdriveragent\n#      os_type: ios\n#      device_info:\n#        udid: aee531018e668ff1aad*************2924e8\n#        model: iPhone 6\n#        version: 12.2.5\n#        name: sherlock's iPhone\n```\n\n2. close_driver: 关闭driver\n```yaml\nclose_driver:\n```\n\n3. sleep: 线程睡眠; \n```yaml\nsleep: 2 # 线程睡眠2秒\n```\n\n4. print: 打印, 支持输出变量/函数; \n```yaml\n# 调试打印\nprint: \"总申请数=${dyn_data.total_apply}, 剩余份数=${dyn_data.quantity_remain}\"\n```\n\n变量格式:\n```\n$msg 一级变量, 以$为前缀\n${data.msg} 多级变量, 用 ${ 与 } 包含\n```\n\n函数格式:\n```\n${random_str(6)} 支持调用函数，目前仅支持以下几个函数: random_str/random_int/random_element/incr\n```\n\n函数罗列:\n```\nrandom_str(n): 随机字符串，参数n是字符个数\nrandom_int(n): 随机数字，参数n是数字个数\nrandom_element(var): 从list中随机挑选一个元素，参数var是list类型的变量名\nincr(key): 自增值，从1开始，参数key表示不同的自增值，不同key会独立自增\n```\n\n5. input_by_id: 填充 id 指定的输入框; \n```yaml\ninput_by_id:\n  # 输入框id: 填充的值(支持写变量)\n  'name': '18877310999'\n```\n\n6. input_by_css: 填充 css selector 指定的输入框; \n```yaml\ninput_by_css:\n  # 输入框css selector模式: 填充的值(支持写变量)\n  '#account': '18877310999'\n```\n\n7. input_by_xpath: 填充 xpath 指定的输入框; \n```yaml\ninput_by_xpath:\n  # 输入框xpath路径: 填充的值(支持写变量)\n  \"//input[@id='account']\": '18877310999'\n```\n\n8. hide_keyboard: 隐藏键盘\n```yaml\nhide_keyboard:\n```\n\n9. page_scroll: 滚动页面(传y坐标/位置在屏幕中比例)\n```yaml\n# 滚动到绝对位置\npage_scroll: 200 # y坐标, 单位px\npage_scroll: 20% # 位置在屏幕中比例\n# 滚动到相对位置：相对于上一次位置的相对位移\npage_scroll: +200 # y位移\npage_scroll: -20% # 位移在屏幕中比例\n```\n\n10. page_scroll_top: 滚动到页面顶部\n```yaml\npage_scroll_top: \n```\n\n11. page_scroll_bottom: 滚动到页面底部\n```yaml\npage_scroll_bottom: \n```\n\n12. scroll_by: 滚动某元素(传元素+坐标), 注意在基础库v2.23.4版本后支持\n```yaml\nscroll_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n    # 移动的位置/位移\n    pos: 100,200 # 绝对位置(坐标)\n    pos: +100,-200 # 相对位移\n    pos: +30%,50% # 元素高度的比例\n```\n\n13. scroll_up_by: 向上滚动元素, 注意在基础库v2.23.4版本后支持\n```yaml\nscroll_up_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n    \n14. scroll_down_by: 向下滚动元素, 注意在基础库v2.23.4版本后支持\n```yaml\nscroll_down_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n    \n15. scroll_left_by: 向左滚动元素, 注意在基础库v2.23.4版本后支持\n```yaml\nscroll_left_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n    \n16. scroll_right_by: 向右滚动元素, 注意在基础库v2.23.4版本后支持\n```yaml\nscroll_right_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n\n17. swiper_by: 切换 swiper 容器当前的页面\n```yaml\nswiper_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n    # 页面序号, 从0开始\n    index: 2\n```\n\n18. long_press_by: 长按某元素\n```yaml\nlong_press_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n\n19. tap: 敲击屏幕(传坐标)\n```yaml\ntap: 200,200\n```\n\n20. tap_by: 敲击元素\n```yaml\ntap_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    xpath: //view[@id='btn']\n    # 耗时秒数, 可省, 可用于模拟长按\n    duration: 10\n```\n\n21. click_by/click_by_if_exist: 点击元素; \n```yaml\nclick_by:\n  # 元素查找方式(id/css/xpath多选一) : 查找的值\n  xpath: //view[@id='btn']\n```\n\n如果点击之前要先判断元素是否存在，则换用 click_by_if_exist\n\n22. allow: 处理授权弹窗-允许某权限\n```yaml\nallow: login # 授权类型\n```\n\n| 授权类型 | 描述 |\n| ------------ | ------------ | \n| authorize | 处理授权确认弹框 |\n| login | 处理微信登陆确认弹框 |\n| get_user_info | 处理获取用户信息确认弹框 |\n| get_location | 处理获取位置信息确认弹框 |\n| get_we_run_data | 处理获取微信运动数据确认弹框 |\n| record | 处理录音确认弹框 |\n| write_photos_album | 处理保存相册确认弹框 |\n| camera | 处理使用摄像头确认弹框 |\n| get_user_phone | 处理获取用户手机号码确认弹框 |\n| send_subscribe_message | 允许发送订阅消息 |\n| get_we_run_data | 处理获取微信运动数据确认弹框 |\n\n23. forbid: 处理授权弹窗-禁止某权限\n```yaml\nforbid: login # 授权类型\n```\n\n授权类型, 参考上一节`allow`动作\n\n24. handle_modal: 点击弹窗的按钮\n```yaml\nhandle_modal: # 按钮文本，可省，默认为\"确定\"\nhandle_modal: 确定\nhandle_modal: 取消\n```\n\n25. deactive: 使微信进入后台一段时间, 再切回前台\n```yaml\ndeactive:\n```\n\n26. set_orientation: 设置屏幕方向\n```yaml\nset_orientation: true # 是否竖屏, 否则横屏\n```\n\n27. set_location: 设置地理位置\n```yaml\nset_location: 49,123 # 纬度,经度\n```\n\n28. screenshot: 整个窗口截图存为png; \n```yaml\nscreenshot:\n    save_dir: downloads # 保存的目录，默认为 downloads\n    save_file: test.png # 保存的文件名，默认为:时间戳.png\n```\n\n29. call_wx_method: 调用微信函数, 返回值放到变量`return_val`\n```yaml\ncall_wx_method: scanCode\n```\n\n30. call_page_method: 调用页面函数, 返回值放到变量`return_val`\n```yaml\ncall_page_method: getTabBar\n```\n\n31. goto: 跳转到指定页面, 但是不能跳到 tabbar 页面\n```yaml\ngoto: /pages/home/index # 页面url\n```\n\n32. switch_tab: 跳转到 tabBar 页面, 并关闭其他所有非 tabBar 页面\n```yaml\nswitch_tab: /pages/home/index # 页面url\nswitch_tab: 1 # 页面序号, 从0开始\n```\n\n33. execute_js: 执行js; \n```yaml\nexecute_js: console.log('hello world')\n```\n\n34. back: 返回键; \n```yaml\nback: \n```\n\n35. get_clipboard: 读剪切板内容; \n```yaml\nget_clipboard: name # 参数为记录剪切板内容的变量名\n```\n\n36. set_clipboard: 写剪切板内容; \n```yaml\nset_clipboard: hello world $name # 参数是写入内容，可带参数\n```\n\n37. push_file:推文件到手机上, 即写手机上文件; \n```yaml\npush_file:\n    to: /storage/emulated/0/documents/test/a.txt # 写入的手机上的文件\n    from: a.txt # 写入内容的本地来源文件\n```\n\n38. pull_file:从手机中拉文件, 即读手机上的文件; \n```yaml\npull_file:\n    from: /storage/emulated/0/documents/test/a.txt # 读取的手机上的文件\n    to: a.txt # 写入的本地文件\nprint: $content\n```\n\n39. pull_down_refresh: 下拉刷新\n```yaml\npull_down_refresh:\n```\n\n40. vibrate: 震动\n```yaml\nvibrate: true # 是否长震,否则短震\n```\n\n41. scan_code: 扫码\n```yaml\nscan_code:\n```\n\n42. send_sms:发送短信; \n```yaml\nsend_sms:\n    phone: 13475556022\n    content: hello $name\n```\n\n43. print_system_info: 打印系统信息\n```yaml\nprint_system_info:\n```\n\n44. print_all_pages: 打印所有页面\n```yaml\nprint_all_pages:\n```\n\n45. print_current_page: 打印当前页面\n```yaml\nprint_current_page:\n```\n\n46. for: 循环; \nfor动作下包含一系列子步骤，表示循环执行这系列子步骤；变量`for_i`记录是第几次迭代（从1开始）\n```yaml\n# 循环3次\nfor(3) :\n  # 每次迭代要执行的子步骤\n  - swipe_down:\n    sleep: 2\n\n# 循环list类型的变量urls\nfor(urls) :\n  # 每次迭代要执行的子步骤\n  - swipe_down:\n    sleep: 2    \n\n# 无限循环，直到遇到跳出动作\n# 有变量for_i记录是第几次迭代（从1开始）\nfor:\n  # 每次迭代要执行的子步骤\n  - break_if: for_i>2 # 满足条件则跳出循环\n    swipe_down:\n    sleep: 2\n```\n\n47. once: 只执行一次，等价于 `for(1)`; \nonce 结合 moveon_if，可以模拟 python 的 `if` 语法效果\n```yaml\nonce:\n  # 每次迭代要执行的子步骤\n  - moveon_if: for_i<=2 # 满足条件则往下走，否则跳出循环\n    swipe_down:\n    sleep: 2\n```\n\n48. break_if: 满足条件则跳出循环; \n只能定义在for/once循环的子步骤中\n```yaml\nbreak_if: for_i>2 # 条件表达式，python语法\n```\n\n49. moveon_if: 满足条件则往下走，否则跳出循环; \n只能定义在for/once循环的子步骤中\n```yaml\nmoveon_if: for_i<=2 # 条件表达式，python语法\n```\n\n50. moveon_if_exist_by: 如果检查元素存在 则往下走，否则跳出循环; \n只能定义在for/once循环的子步骤中\n```yaml\nmoveon_if_exist_by:\n    id: button1\n```\n\n51. break_if_exist_by: 如果检查元素存在 则跳出循环，否则往下走; \n只能定义在for/once循环的子步骤中\n```yaml\nbreak_if_exist_by:\n    id: button1\n```\n\n52. include: 包含其他步骤文件，如记录公共的步骤，或记录配置数据(如用户名密码); \n```yaml\ninclude: part-common.yml\n```\n\n53. set_vars: 设置变量; \n```yaml\nset_vars:\n  name: shi\n  password: 123456\n  birthday: 5-27\n```\n\n54. print_vars: 打印所有变量; \n```yaml\nprint_vars:\n```\n\n55. base_url: 设置基础url\n```yaml\nbase_url: https://www.taobao.com/\n```\n\n56. get: 发get请求, 但无跳转; \n```yaml\nget:\n    url: $dyn_data_url # url,支持写变量\n    extract_by_eval:\n      dyn_data: \"json.loads(response.text[16:-1])\" # 变量response是响应对象\n```\n\n57. post: 发post请求, 但无跳转; \n```yaml\npost:\n    url: http://admin.jym1.com/store/add_store # url,支持写变量\n    is_ajax: true\n    data: # post的参数\n      # 参数名:参数值\n      store_name: teststore-${random_str(6)}\n      store_logo_url: '$img'\n```\n\n58. upload: 上传文件; \n```yaml\nupload: # 上传文件/图片\n    url: http://admin.jym1.com/upload/common_upload_img/store_img\n    files: # 上传的多个文件\n      # 参数名:文件本地路径\n      file: /home/shi/fruit.jpeg\n    extract_by_jsonpath:\n      img: $.data.url\n```\n\n59. download: 下载文件; \n变量`download_file`记录最新下载的单个文件\n```yaml\ndownload:\n    url: https://img.alicdn.com/tfscom/TB1t84NPuL2gK0jSZPhXXahvXXa.jpg_q90.jpg\n    save_dir: downloads # 保存的目录，默认为 downloads\n    save_file: test.jpg # 保存的文件名，默认为url中最后一级的文件名\n```\n\n60. exec: 执行命令, 可用于执行 HttpBoot/SeleniumBoot/AppiumBoot/MiniumBoot 等命令，以便打通多端的用例流程\n```yaml\nexec: ls\nexec: SeleniumBoot test.yml\n```\n\n## 校验器\n主要是为了校验页面或响应的内容, 根据不同场景有2种写法\n```\n1. 针对当前页面, 那么校验器作为普通动作来写\n2. 针对 get/post/upload 有发送http请求的动作, 那么校验器在动作内作为普通属性来写\n```\n\n不同校验器适用于不同场景\n| 校验器 | 当前页面场景 | http请求场景 |\n| ------------ | ------------ | ------------ |\n| validate_by_id | Y | N |\n| validate_by_css | Y | Y |\n| validate_by_xpath | Y | Y |\n| validate_by_jsonpath | N | Y |\n\n1. validate_by_id:\n从当前页面中校验 id 对应的元素的值\n```yaml\nvalidate_by_id:\n  \"cat_demo_text\": # 元素的id\n    '=': 'Hello world' # 校验符号或函数: 校验的值\n```\n\n2. validate_by_css: \n从html响应中校验类名对应的元素的值\n```yaml\nvalidate_by_css:\n  '#id': # 元素的css selector 模式\n    '>': 0 # 校验符号或函数: 校验的值, 即 id 元素的值>0\n  '#goods_title':\n    contains: 衬衫 # 即 title 元素的值包含'衬衫'\n```\n\n3. validate_by_xpath: \n从当前页面或html响应中校验 xpath 路径对应的元素的值\n```yaml\nvalidate_by_xpath:\n  \"//view[@id='goods_id']\": # 元素的xpath路径\n    '>': 0 # 校验符号或函数: 校验的值, 即 id 元素的值>0\n  \"//view[@id='goods_title']\":\n    contains: 衬衫 # 即 title 元素的值包含'衬衫'\n```\n\n4. validate_by_jsonpath: \n从json响应中校验 多层属性 的值\n```yaml\nvalidate_by_jsonpath:\n  '$.data.goods_id':\n     '>': 0 # 校验符号或函数: 校验的值, 即 id 元素的值>0\n  '$.data.goods_title':\n    contains: 衬衫 # 即 title 元素的值包含'衬衫'\n```\n\n#### 校验符号或函数\n1. `=`: 相同\n2. `>`: 大于\n3. `<`: 小于\n4. `>=`: 大于等于\n5. `<=`: 小于等于\n6. `contains`: 包含子串\n7. `startswith`: 以子串开头\n8. `endswith`: 以子串结尾\n9. `regex_match`: 正则匹配\n10. `exist`: 元素存在\n11. `not_exist`: 元素不存在\n\n## 提取器\n主要是为了从页面或响应中提取变量, 根据不同场景有2种写法\n```\n1. 针对当前页面, 那么提取器作为普通动作来写\n2. 针对 get/post/upload 有发送http请求的动作, 那么提取器在动作内作为普通属性来写\n```\n\n不同校验器适用于不同场景\n| 校验器 | 页面场景 | http请求场景 |\n| ------------ | ------------ | ------------ |\n| extract_by_id | Y | N |\n| extract_by_css | Y | Y |\n| extract_by_xpath | Y | Y |\n| extract_by_jsonpath | N | Y |\n| extract_by_eval | Y | Y |\n\n1. extract_by_id:\n从当前页面中解析 id 对应的元素的值\n```yaml\nextract_by_id:\n  # 变量名: 元素id\n  goods_id: \"cat_demo_text\"\n```\n\n2. extract_by_css:\n从当前页面或html响应中解析 css selector 模式指定的元素的值\n```yaml\nextract_by_css:\n  # 变量名: css selector 模式\n  goods_id: #goods_id\n  url: image::attr(src) # 获得<image>的src属性\n```\n\n3. extract_by_xpath:\n从当前页面或html响应中解析 xpath 路径指定的元素的值\n```yaml\nextract_by_xpath:\n  # 变量名: xpath路径\n  goods_id: //view[@id='goods_id']\n  url: //image/@src # 获得<image>的src属性\n```\n\n4. extract_by_jsonpath:\n从json响应中解析 多层属性 的值\n```yaml\nextract_by_jsonpath:\n  # 变量名: json响应的多层属性\n  img: $.data.url\n```\n\n5. extract_by_eval:\n使用 `eval(表达式)` 执行表达式, 并将执行结果记录到变量中\n```yaml\nextract_by_eval:\n    # 变量名: 表达式（python语法）\n    dyn_data: \"json.loads(response.text[16:-1])\" # 变量response是响应对象\n```\n\n## 存疑的动作\n> 注: 以下动作是用来触发滑动手势, 是根据minium官方api `move()/touchstart()/touchmove()/touchend()`封装的, 但我测试时发现移动失败, 因此这部分官方api应该是无效的, 等啥时候有效就可以启用\n\n1. swipe: 屏幕横扫(传坐标)\n```yaml\nswipe: \n    from: 100,100 # 起点坐标\n    to: 200,200 # 终点坐标\n    duration: 2 # 耗时秒数, 可省\n```\n\n2. swipe_up: 上滑(传比例)\n```yaml\nswipe_up: 0.55 # 移动幅度比例(占屏幕高度的比例)\nswipe_up: # 默认移动幅度比例为0.5\n```\n\n3. swipe_down: 下滑(传比例)\n```yaml\nswipe_down: 0.55 # 移动幅度比例(占屏幕高度的比例)\nswipe_down: # 默认移动幅度比例为0.5\n```\n\n4. swipe_left: 左滑(传y坐标)\n```yaml\nswipe_left: 100 # y坐标\nswipe_left: # 默认y坐标为中间\n```\n\n5. swipe_right: 右滑(传y坐标)\n```yaml\nswipe_right: 100 # y坐标\nswipe_right: # 默认y坐标为中间\n```\n\n6. swipe_vertical: 垂直方向(上下)滑动(传比例)\n```yaml\nswipe_vertical: 0.2,0.7 # y轴起点/终点位置在屏幕的比例，如 0.2,0.7，即y轴上从屏幕0.2比例处滑到0.7比例处\n```\n\n7. swipe_horizontal: 水平方向(左右)滑动(传比例)\n```yaml\nswipe_horizontal: 0.2,0.7 # x轴起点/终点位置在屏幕的比例，如 0.2,0.7，即x轴上从屏幕0.2比例处滑到0.7比例处\n```\n\n8. move_by: 移动某元素(pos传坐标序列); \n```yaml\nmove_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //movable-view[@id='line']\n    # 坐标序列，坐标之间使用;分割，如x1,y1;x2,y2\n    pos: '800,1600;100,1600;100,600;800,600;360,600;360,1100'\n```\n\n9. zoom_in: 放大页面\n```yaml\nzoom_in: \n```\n\n10. zoom_out: 缩小页面\n```yaml\nzoom_out: \n```\n\n11. zoom_in_by: 放大某元素\n```yaml\nzoom_in_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n\n12. zoom_out_by: 缩小某元素\n```yaml\nzoom_out_by:\n    # 元素查找方式(id/css/xpath多选一) : 查找的值\n    #id: line\n    xpath: //view[@id='line']\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shigebeyond/MiniumBoot",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MiniumBoot",
    "package_url": "https://pypi.org/project/MiniumBoot/",
    "platform": null,
    "project_url": "https://pypi.org/project/MiniumBoot/",
    "project_urls": {
      "Homepage": "https://github.com/shigebeyond/MiniumBoot"
    },
    "release_url": "https://pypi.org/project/MiniumBoot/1.0.2/",
    "requires_dist": [
      "lxml (==4.9.1)",
      "pyutilb (>=1.0.5)"
    ],
    "requires_python": ">=3.6",
    "summary": "MiniumBoot: make an easy way (yaml) to wechat miniprogram automation testing",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973700,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c80d31d5d0be91590bf17002bba80d25536a61703b47a30a74066dcf35b99a8",
          "md5": "c27569db13f81fc1363a28794844e27a",
          "sha256": "9d55f7bb24d171d3148faa5de2caa49a92069b54f78f553e3e9e94542b9e9823"
        },
        "downloads": -1,
        "filename": "MiniumBoot-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c27569db13f81fc1363a28794844e27a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24627,
        "upload_time": "2022-08-15T07:16:38",
        "upload_time_iso_8601": "2022-08-15T07:16:38.333217Z",
        "url": "https://files.pythonhosted.org/packages/7c/80/d31d5d0be91590bf17002bba80d25536a61703b47a30a74066dcf35b99a8/MiniumBoot-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09320ee71d26c5553087540f52dbad852db446a0cb255dbf3bc452c47f2f22c7",
          "md5": "5c644349473f5750fd00a7f96dbdaa24",
          "sha256": "01e73a587697bc9fe6197e40a2a82d5cf6d412ae19cb7425015233a40e7bbfaf"
        },
        "downloads": -1,
        "filename": "MiniumBoot-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c644349473f5750fd00a7f96dbdaa24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22816,
        "upload_time": "2022-08-15T07:16:41",
        "upload_time_iso_8601": "2022-08-15T07:16:41.112887Z",
        "url": "https://files.pythonhosted.org/packages/09/32/0ee71d26c5553087540f52dbad852db446a0cb255dbf3bc452c47f2f22c7/MiniumBoot-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f695f0357e56641ad914082006968e54ff7bbd52aa9ffc823c11e5c4363b8326",
          "md5": "1851e1aad46955fd6e68519920bddcce",
          "sha256": "387a194054ad65abfcbd1c573ad0aafa512017b60e2456b0ee2fc6b423809af1"
        },
        "downloads": -1,
        "filename": "MiniumBoot-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1851e1aad46955fd6e68519920bddcce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24946,
        "upload_time": "2022-08-18T08:14:06",
        "upload_time_iso_8601": "2022-08-18T08:14:06.706449Z",
        "url": "https://files.pythonhosted.org/packages/f6/95/f0357e56641ad914082006968e54ff7bbd52aa9ffc823c11e5c4363b8326/MiniumBoot-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c26ad7ca82012a002e088dea7b0b81cb8a6da9dcf6e824ab4cd11b9ac699e410",
          "md5": "ff26249dcc2fe1d9c2fbe17f4ccb62d8",
          "sha256": "e163270b53e684f16577e3d73c07a95bb77ab904e536078e647ee1631a616299"
        },
        "downloads": -1,
        "filename": "MiniumBoot-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff26249dcc2fe1d9c2fbe17f4ccb62d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30591,
        "upload_time": "2022-08-18T08:14:09",
        "upload_time_iso_8601": "2022-08-18T08:14:09.782813Z",
        "url": "https://files.pythonhosted.org/packages/c2/6a/d7ca82012a002e088dea7b0b81cb8a6da9dcf6e824ab4cd11b9ac699e410/MiniumBoot-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9066d073d16b89e87448f3a22cc85d8236ac617749b39b038a7c29bb7d8d2550",
          "md5": "4f4af3156a1a813d8c3a3f70ad5dadf0",
          "sha256": "f0e18fae1afc73e0612e31a04fa5cdeb30787b6dd708d25c566a71a21a2b7231"
        },
        "downloads": -1,
        "filename": "MiniumBoot-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f4af3156a1a813d8c3a3f70ad5dadf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24344,
        "upload_time": "2023-02-22T09:22:33",
        "upload_time_iso_8601": "2023-02-22T09:22:33.083050Z",
        "url": "https://files.pythonhosted.org/packages/90/66/d073d16b89e87448f3a22cc85d8236ac617749b39b038a7c29bb7d8d2550/MiniumBoot-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c566073553490a48d4a2b11b8014688c90a876c5fe6b9644c4fdf1f9a0a718c3",
          "md5": "b3ed4743ce4c9a7fb7f3e0811cd84b5b",
          "sha256": "de6e86528334b32f32717b8978d756f6a398ed417b87efa225261a6f5bb1a5d8"
        },
        "downloads": -1,
        "filename": "MiniumBoot-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b3ed4743ce4c9a7fb7f3e0811cd84b5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22520,
        "upload_time": "2023-02-22T09:22:35",
        "upload_time_iso_8601": "2023-02-22T09:22:35.268514Z",
        "url": "https://files.pythonhosted.org/packages/c5/66/073553490a48d4a2b11b8014688c90a876c5fe6b9644c4fdf1f9a0a718c3/MiniumBoot-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9066d073d16b89e87448f3a22cc85d8236ac617749b39b038a7c29bb7d8d2550",
        "md5": "4f4af3156a1a813d8c3a3f70ad5dadf0",
        "sha256": "f0e18fae1afc73e0612e31a04fa5cdeb30787b6dd708d25c566a71a21a2b7231"
      },
      "downloads": -1,
      "filename": "MiniumBoot-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f4af3156a1a813d8c3a3f70ad5dadf0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24344,
      "upload_time": "2023-02-22T09:22:33",
      "upload_time_iso_8601": "2023-02-22T09:22:33.083050Z",
      "url": "https://files.pythonhosted.org/packages/90/66/d073d16b89e87448f3a22cc85d8236ac617749b39b038a7c29bb7d8d2550/MiniumBoot-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c566073553490a48d4a2b11b8014688c90a876c5fe6b9644c4fdf1f9a0a718c3",
        "md5": "b3ed4743ce4c9a7fb7f3e0811cd84b5b",
        "sha256": "de6e86528334b32f32717b8978d756f6a398ed417b87efa225261a6f5bb1a5d8"
      },
      "downloads": -1,
      "filename": "MiniumBoot-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b3ed4743ce4c9a7fb7f3e0811cd84b5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22520,
      "upload_time": "2023-02-22T09:22:35",
      "upload_time_iso_8601": "2023-02-22T09:22:35.268514Z",
      "url": "https://files.pythonhosted.org/packages/c5/66/073553490a48d4a2b11b8014688c90a876c5fe6b9644c4fdf1f9a0a718c3/MiniumBoot-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}