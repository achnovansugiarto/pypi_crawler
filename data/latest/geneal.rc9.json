{
  "info": {
    "author": "Diogo Matos Chaves",
    "author_email": "di.matoschaves@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GeneAl\n\n![build_badge](https://github.com/diogomatoschaves/geneal/workflows/build/badge.svg)\n[![codecov](https://codecov.io/gh/diogomatoschaves/geneal/branch/master/graph/badge.svg)](https://codecov.io/gh/diogomatoschaves/geneal)\n[![PyPI version](https://badge.fury.io/py/geneal.svg)](https://badge.fury.io/py/geneal)\n\n`geneal` is a python library implementing genetic algorithms (GAs). It has functionality for both binary and continuous GA,\nas well as specific use case applications such as a solver for the\n[Travelling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem). \n\n## Installation\n\n```\n$ pip install geneal\n```\n\n## Usage\n\n`geneal` provides 2 main GA solver classes, `BinaryGenAlgSolver` and `ContinuousGenAlgSolver` \nfor binary and continuous problem formulations respectively. The library is set up in such a way that all problems\nhave to be a maximization, and hence, the fitness functions need to be adjusted accordingly.\n\n### Binary GA\n\nThe binary GA class can be customized by the input variables provided on its initialization. \nThe minimum required arguments to provide at the initialization are the number of genes on each individual's\nchromosome, and the fitness function to be maximized. \n\nAn example is shown below.\n\n```python\n\nfrom geneal.genetic_algorithms import BinaryGenAlgSolver\nfrom geneal.applications.fitness_functions.binary import fitness_functions_binary\n\nsolver = BinaryGenAlgSolver(\n    n_genes=3, # number of variables defining the problem\n    fitness_function=fitness_functions_binary(1), # fitness function to be maximized\n)\n\nsolver.solve()\n\n```\n\nThe above call will perform the optimization with the default parameters, which will most likely have to be adjusted for\neach individual problem at hand. The algorithm parameters can be customized as shown below.\n\n```python\nfrom geneal.genetic_algorithms import BinaryGenAlgSolver\nfrom geneal.applications.fitness_functions.binary import fitness_functions_binary\n\nsolver = BinaryGenAlgSolver(\n    n_genes=3,\n    fitness_function=fitness_functions_binary(1), \n    n_bits=1, # number of bits describing each gene (variable)\n    pop_size=10, # population size (number of individuals)\n    max_gen=500, # maximum number of generations\n    mutation_rate=0.05, # mutation rate to apply to the population\n    selection_rate=0.5, # percentage of the population to select for mating\n    selection_strategy=\"roulette_wheel\", # strategy to use for selection. see below for more details\n)\n\nsolver.solve()\n\n```\n\n### Continuous GA\n\nFollowing a similar pattern as the binary GA solver, the parameters of the continuous GA can be adjusted at initialization.\nAs a bare minimum, the number of variables and the fitness function to maximize must be provided, as shown below.\n\n```python\n\nfrom geneal.genetic_algorithms import ContinuousGenAlgSolver\nfrom geneal.applications.fitness_functions.continuous import fitness_functions_continuous\n\nsolver = ContinuousGenAlgSolver(\n    n_genes=4, # number of variables defining the problem\n    fitness_function=fitness_functions_continuous(3), # fitness function to be maximized\n)\n\nsolver.solve()\n\n```\n\nIn order to customize the continuous GA solver further, more arguments can be passed at initialization.\n\n```python\n\nfrom geneal.genetic_algorithms import ContinuousGenAlgSolver\nfrom geneal.applications.fitness_functions.continuous import fitness_functions_continuous\n\nsolver = ContinuousGenAlgSolver(\n    n_genes=4,\n    fitness_function=fitness_functions_continuous(3),\n    pop_size=10, # population size (number of individuals)\n    max_gen=200, # maximum number of generations\n    mutation_rate=0.1, # mutation rate to apply to the population\n    selection_rate=0.6, # percentage of the population to select for mating\n    selection_strategy=\"roulette_wheel\", # strategy to use for selection. see below for more details\n)\n\nsolver.solve()\n\n```\n\nA notable difference to the binary GA solver is the fact that we can customize the input space of the problem\nby defining if the problem is of type `int` or `float`, and defining an overall minimum and maximum values for each\nvariable (or for all at once).\n\n```python\n\nfrom geneal.genetic_algorithms import ContinuousGenAlgSolver\nfrom geneal.applications.fitness_functions.continuous import fitness_functions_continuous\n\nsolver = ContinuousGenAlgSolver(\n    n_genes=4, \n    fitness_function=fitness_functions_continuous(3),\n    pop_size=10,\n    max_gen=200,\n    mutation_rate=0.1,\n    selection_rate=0.6,\n    selection_strategy=\"roulette_wheel\",\n    problem_type=float, # Defines the possible values as float numbers\n    variables_limits=(-10, 10) # Defines the limits of all variables between -10 and 10. \n                               # Alternatively one can pass an array of tuples defining the limits\n                               # for each variable: [(-10, 10), (0, 5), (0, 5), (-20, 20)]\n)\n\nsolver.solve()\n\n```\n\n### selection strategy\n\nIt is possible to choose the selection strategy that the algorithm will use to select the parents that will \nbe used for generating new offsprings for the next generation. The options are:\n\n- `roulette_wheel`\n- `random`\n- `two_by_two`\n- `tournament`\n\n**roulette wheel**\n\nThis selection strategy orders the individuals in the selection pool by probability, with the fittest individuals\nhaving higher odds of being selected. \n\n**random**\n\nThis selection procedure selects randomly individuals from the selection pool, following in essence a similar procedure\nas the roulette wheel, but with the same probabilities for each individual.\n\n**two_by_two**\n\nThis strategy groups the individuals in the mating pool 2 by 2, from top to bottom.\n\n**tournament**\n\nThis strategy will select 3 individuals candidates for each parent position, which are then sorted by their fitness\nand from which the fittest one is selected.\n\n## Specific Applications\n\nIn the real world, there's usually the need to adapt a genetic algorithm implementation to each individual problem.\nThus, `geneal` offers the user a level of customization that aims to be both versatile and relatively simple. For that,\none just has to create a class which inherits from the `BinaryGenAlgSolver` or `ContinuousGenAlgSolver`\nbase classes, and on which some overriding methods are defined. This allows the user to control the main steps of a GA:\n\n- fitness function\n- population initialization\n- mating between individuals (creation of offsprings)\n- mutation of the population\n \nA boilerplate template of such a class is shown below:\n\n```python\nfrom geneal.genetic_algorithms import ContinuousGenAlgSolver, BinaryGenAlgSolver\n\n\nclass TemplateChildClass(ContinuousGenAlgSolver, BinaryGenAlgSolver):\n    def __init__(self, *args, **kwargs):\n        BinaryGenAlgSolver.__init__(self, *args, **kwargs)\n        ContinuousGenAlgSolver.__init__(self, *args, **kwargs)\n\n    def fitness_function(self, chromosome):\n        \"\"\"\n        Implements the logic that calculates the fitness\n        measure of an individual.\n\n        :param chromosome: chromosome of genes representing an individual\n        :return: the fitness of the individual\n        \"\"\"\n        pass\n\n    def initialize_population(self):\n        \"\"\"\n        Initializes the population of the problem\n\n        :param pop_size: number of individuals in the population\n        :param n_genes: number of genes representing the problem. In case of the binary\n        solver, it represents the number of genes times the number of bits per gene\n        :return: a numpy array with a randomized initialized population\n        \"\"\"\n        pass\n\n    def create_offspring(\n        self, first_parent, sec_parent, crossover_pt, offspring_number\n    ):\n        \"\"\"\n        Creates an offspring from 2 parents. It uses the crossover point(s)\n        to determine how to perform the crossover\n\n        :param first_parent: first parent's chromosome\n        :param sec_parent: second parent's chromosome\n        :param crossover_pt: point(s) at which to perform the crossover\n        :param offspring_number: whether it's the first or second offspring from a pair of parents.\n        Important if there's different logic to be applied to each case.\n        :return: the resulting offspring.\n        \"\"\"\n        pass\n\n    def mutate_population(self, population, n_mutations):\n        \"\"\"\n        Mutates the population according to a given user defined rule.\n\n        :param population: the population at a given iteration\n        :param n_mutations: number of mutations to be performed. This number is \n        calculated according to mutation_rate, but can be adjusted as needed inside this function\n        :return: the mutated population\n        \"\"\"\n        pass\n\n```\n\n### Travelling Salesman Problem\n\nOne of the possible applications of genetic algorithms is to the \n[Travelling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem). This problem is NP hard,\nas the number of possible solutions grows with the factorial of the number of variables, and therefore, genetic algorithms \nare a good fit for approximating solutions to these problems.\n\nAs this particular problem has its own sets of constraints, a specific class adapted to this problem is provided\nin `TravellingSalesmanProblemSolver`, which can be used out of the box to virtually\nall problems of this kind. As a minimum input, this class requires the user to provide a \n[networkx](https://networkx.github.io/documentation/stable/) undirected graph containing all the nodes\nrepresenting the problem and with each node connected to every other node by edges with the respective \nassociated cost (weight). To build this graph, one can use the `create_graph` method, as shown below:\n\n```python\nimport turf\n\nfrom geneal.applications.tsp.helpers import create_graph\nfrom geneal.applications.tsp.examples.world_capitals import world_capitals_dict\n\nG = create_graph(\n    world_capitals_dict, # a python dictionary containing the nodes as keys\n    turf.distance, # function to use to calculate distance between nodes\n    lon=lambda x: x[\"CapitalLongitude\"], # lambda function on how to retrieve the longitude\n    lat=lambda x: x[\"CapitalLatitude\"], # lambda function on how to retrieve the latitude\n)\n\n```\n\nAfter having a built graph, one can pass it directly to `TravellingSalesmanProblemSolver`, and the number of genes\nwill be automatically retrieved from the number of nodes in the graph.\n\n```python\nfrom geneal.applications.tsp.travelling_salesman_problem import TravellingSalesmanProblemSolver\nfrom geneal.applications.tsp.examples.world_capitals.graph import G\n\ntsp_solver = TravellingSalesmanProblemSolver(graph=G)\n```\n\nAgain, one can control the solver parameters as before, by providing them on the initialization:\n\n```python\nfrom geneal.applications.tsp.travelling_salesman_problem import TravellingSalesmanProblemSolver\nfrom geneal.applications.tsp.examples.world_capitals.graph import G\n\ntsp_solver = TravellingSalesmanProblemSolver(\n    graph=G,\n    pop_size=10, # population size (number of individuals)\n    max_gen=500, # maximum number of generations\n    mutation_rate=0.05, # mutation rate to apply to the population\n    selection_rate=0.5, # percentage of the population to select for mating\n    selection_strategy=\"tournament\", # strategy to use for selection.\n    mutation_strategy=\"random_inversion\" # strategy to use for mutation. see below for more details.\n)\n```\n\n**specific TSP parameters**\n\nBeing a particular use case for genetic algorithms, the Travelling Salesman Problem has also specific settings that\nallow the user to control the convergence for each use case. One of such parameters is `mutation_strategy`, which \ncan be one of the following:\n\n- `2-opt`,\n- `random_swap`,\n- `random_inversion`,\n- `random_gene_nearest_neighbour`,\n- `worst_gene_random`,\n- `worst_gene_nearest_neighbour`,\n- `select_any_mutation`,\n\nBelow some brief explanation is given on each of the options:\n\n**2-opt**\n\nIt performs a 2-opt mutation on a tour. It selects randomly 2 edges from the tour and combines the resulting sub tours\nby swapping them. More details can be found [here](https://en.wikipedia.org/wiki/2-opt).\n\n**random swap**\n\nA random swap mutation will choose randomly 2 genes from a given tour and swap them around. This is the\nkind of mutation that most closely resembles a typical genetic algorithm mutation.\n\n**random inversion**\n\nA random inversion swap will choose a consecutive subset from the tour and reverse it. The size of the subset is also\nchosen randomly. \n\n**random gene nearest neighbour**\n\nThis is a knowledge-based mutation, where a randomly selected gene is shifted next to its closest neighbour. \nMore details can be found in point [4.2.7](https://arxiv.org/pdf/1801.02827.pdf).\n\n**worst gene random mutation**\n\nThis is again a knowledge-based mutation, where a randomly selected gene is swapped with the gene contributing \nmost to the cost of the tour. More details can be found in point [4.2.3](https://arxiv.org/pdf/1801.02827.pdf).\n\n**worst gene random mutation**\n\nThis is again a knowledge-based mutation, where gene contributing most to the total cost of the tour\nis moved next to one of its neighbours. More details can be found in point [4.2.4](https://arxiv.org/pdf/1801.02827.pdf)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/diogomatoschaves/geneal",
    "keywords": "genetic algorithms,ga,optimization,genetic programming",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "geneal",
    "package_url": "https://pypi.org/project/geneal/",
    "platform": null,
    "project_url": "https://pypi.org/project/geneal/",
    "project_urls": {
      "Homepage": "https://github.com/diogomatoschaves/geneal"
    },
    "release_url": "https://pypi.org/project/geneal/0.4.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Python Genetic Algorithms library",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13108005,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "338bd8b0481fda50a51e674777468b1fce2aba5f2e8e7756cbe46d2baf425913",
          "md5": "e597444bb5d5c6524d8622675b0c24d9",
          "sha256": "3731b9131335c315f588e5c6ab14ccd62c2ead2a65dae65cd67a2141d93d0418"
        },
        "downloads": -1,
        "filename": "geneal-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e597444bb5d5c6524d8622675b0c24d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14906,
        "upload_time": "2020-06-05T13:41:57",
        "upload_time_iso_8601": "2020-06-05T13:41:57.910279Z",
        "url": "https://files.pythonhosted.org/packages/33/8b/d8b0481fda50a51e674777468b1fce2aba5f2e8e7756cbe46d2baf425913/geneal-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a2ae318000f1a25d3bdfe6cd5a72dfc8cb16a71800fd0dbf7978196bdf9429c",
          "md5": "5631d95c1294787bd140402aa2dd8133",
          "sha256": "2572609fc13f65c56544d74a8f3bf2a356c518a32ec613a59e8cdac6456555c3"
        },
        "downloads": -1,
        "filename": "geneal-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5631d95c1294787bd140402aa2dd8133",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22161,
        "upload_time": "2020-06-11T16:42:53",
        "upload_time_iso_8601": "2020-06-11T16:42:53.866780Z",
        "url": "https://files.pythonhosted.org/packages/8a/2a/e318000f1a25d3bdfe6cd5a72dfc8cb16a71800fd0dbf7978196bdf9429c/geneal-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d9467d3ee162ab117da6dfc5aba2ad3643bcbf8545a423e9adc5c9421f40d8a",
          "md5": "052dd045d20f2e1cc05709499bfa075d",
          "sha256": "41b0cbaaf196a555890e87f297316f18ed7a3a994034ceaca178d70191314f39"
        },
        "downloads": -1,
        "filename": "geneal-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "052dd045d20f2e1cc05709499bfa075d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22195,
        "upload_time": "2020-06-19T16:28:28",
        "upload_time_iso_8601": "2020-06-19T16:28:28.079511Z",
        "url": "https://files.pythonhosted.org/packages/5d/94/67d3ee162ab117da6dfc5aba2ad3643bcbf8545a423e9adc5c9421f40d8a/geneal-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e227489e41d1284318a27bc0d796b7e61cdb83759bda98a6f173a80952b9c21",
          "md5": "12f73c24c36ba6480e604ad8c2481221",
          "sha256": "8a6479bb684d09b2a0d58ccaa156d0e2fb6e16a25a2ece7964e47f4fa0889448"
        },
        "downloads": -1,
        "filename": "geneal-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "12f73c24c36ba6480e604ad8c2481221",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22244,
        "upload_time": "2020-06-19T16:35:57",
        "upload_time_iso_8601": "2020-06-19T16:35:57.503798Z",
        "url": "https://files.pythonhosted.org/packages/4e/22/7489e41d1284318a27bc0d796b7e61cdb83759bda98a6f173a80952b9c21/geneal-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2745f560291b6df6edf1c6e06f1bc8da2bfad693ef3be0d264640051df40d34",
          "md5": "1f151fa55134945d9eb76dc2aa4918d3",
          "sha256": "a673d91a4297cd2d868767d31b05796329f159c18a300aae559b6e94704ea89c"
        },
        "downloads": -1,
        "filename": "geneal-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f151fa55134945d9eb76dc2aa4918d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22579,
        "upload_time": "2020-06-21T17:29:11",
        "upload_time_iso_8601": "2020-06-21T17:29:11.353818Z",
        "url": "https://files.pythonhosted.org/packages/f2/74/5f560291b6df6edf1c6e06f1bc8da2bfad693ef3be0d264640051df40d34/geneal-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e63060cfa447e6e5e76f0277853f316aefba454fe9671a2351bacac3a05aebd3",
          "md5": "19776e2574f780b437eba0dfb4abd7c7",
          "sha256": "097fc8a42425c8d3c2c5ceb907fefcdc38b5d4b6f8d7389fa4f64b83f4627e83"
        },
        "downloads": -1,
        "filename": "geneal-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "19776e2574f780b437eba0dfb4abd7c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22587,
        "upload_time": "2020-06-22T19:01:36",
        "upload_time_iso_8601": "2020-06-22T19:01:36.863413Z",
        "url": "https://files.pythonhosted.org/packages/e6/30/60cfa447e6e5e76f0277853f316aefba454fe9671a2351bacac3a05aebd3/geneal-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd35d5a04c69089abb487ab1a9171af7effc0378c72787af0fb60567b63f4195",
          "md5": "22609d22cb9e7c9e156f3023d8e0a6f0",
          "sha256": "995c11fb9b88eff58b3aff5d93dc120502ca5bfae322398447906e5fd31799d8"
        },
        "downloads": -1,
        "filename": "geneal-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "22609d22cb9e7c9e156f3023d8e0a6f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22904,
        "upload_time": "2020-06-25T21:27:07",
        "upload_time_iso_8601": "2020-06-25T21:27:07.931090Z",
        "url": "https://files.pythonhosted.org/packages/fd/35/d5a04c69089abb487ab1a9171af7effc0378c72787af0fb60567b63f4195/geneal-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6298e9f911126aa0d164f956694b749bb0326ece769350a827eb075f4971f53",
          "md5": "6d031d8141f09d3bee96b0c50b9352be",
          "sha256": "36d2bd122bcaa5e4893acb4819089f98816bcefd52939ad4f430036340ada404"
        },
        "downloads": -1,
        "filename": "geneal-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d031d8141f09d3bee96b0c50b9352be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22951,
        "upload_time": "2021-03-11T16:34:32",
        "upload_time_iso_8601": "2021-03-11T16:34:32.054993Z",
        "url": "https://files.pythonhosted.org/packages/e6/29/8e9f911126aa0d164f956694b749bb0326ece769350a827eb075f4971f53/geneal-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca25e9b1ea1319938d940973ba58359f5138960a2e86a7c315720a55bc92141b",
          "md5": "ab40e13699863ba380516e61f86052f6",
          "sha256": "74cbb1f000c70842a77e7a39630036e77e127aba134ea2fab74a5a3b5e53cef7"
        },
        "downloads": -1,
        "filename": "geneal-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ab40e13699863ba380516e61f86052f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 22098,
        "upload_time": "2022-03-08T00:21:19",
        "upload_time_iso_8601": "2022-03-08T00:21:19.066782Z",
        "url": "https://files.pythonhosted.org/packages/ca/25/e9b1ea1319938d940973ba58359f5138960a2e86a7c315720a55bc92141b/geneal-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca25e9b1ea1319938d940973ba58359f5138960a2e86a7c315720a55bc92141b",
        "md5": "ab40e13699863ba380516e61f86052f6",
        "sha256": "74cbb1f000c70842a77e7a39630036e77e127aba134ea2fab74a5a3b5e53cef7"
      },
      "downloads": -1,
      "filename": "geneal-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ab40e13699863ba380516e61f86052f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 22098,
      "upload_time": "2022-03-08T00:21:19",
      "upload_time_iso_8601": "2022-03-08T00:21:19.066782Z",
      "url": "https://files.pythonhosted.org/packages/ca/25/e9b1ea1319938d940973ba58359f5138960a2e86a7c315720a55bc92141b/geneal-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}