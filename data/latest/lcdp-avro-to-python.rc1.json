{
  "info": {
    "author": "Scott Rothbarth",
    "author_email": "srserves85@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "==============\navro-to-python\n==============\n\navro-to-python is a light tool for compiling avro schema files (.avsc) to python classes making using avro schemata easy.\n\n\n* Free software: MIT license\n* Documentation: https://avro-to-python.readthedocs.io.\n\nInstallation\n^^^^^^^^^^^^\n\nPip install (recommended)\n-------------------------\nTo install avro-to-python, run this command in your terminal:\n\n.. code-block:: console\n\n    $ pip install avro-to-python\n\nInstall From Source ()\n----------------------\n\nThe sources for avro-to-python can be downloaded source as well.\n\nClone the public repository:\n\n.. code-block:: console\n\n    $ git clone git://github.com/srserves85/avro-to-python\n\n\nOnce you have a copy of the source, you can install it with:\n\n\n.. code-block:: console\n\n    $ python setup.py install\n\nor\n\n.. code-block:: console\n\n    $ pip install -e .\n\n\nExamples\n^^^^^^^^\n\nMajority of the use of avro-to-python is assumed to be used as a cli, but you can still import and use the python classes under the hood as well.\n\nCLI (without --pip)\n-------------------\nTo use the cli, here is the available cli commands:\n\n.. code-block:: bash\n\n    avro-to-python [source] [target]\n        Options:\n            --pip TEXT              make package pip installable using this name\n            --top_level_package     override top level package name (optional)\n            --author TEXT           author name of the pip installable package\n            --package_version TEXT  version of the pip intallable package  [default: 0.1.0]\n            --help                  Show this message and exit\n\n\nThe above will compile the avsc files and convert the to python classes found in [path_to_target_directory]\n\nAn example of doing this is the following:\n\n.. code-block:: bash\n\n    avro-to-python [path_to_source_avsc_files] [path_to_target_directory]\n\n\nIf you run the above on a valid avro avsc file, you should then be able to import them as you would in the avro idl namespace Here is an example of a single avsc record from the namespace: *name.space* and name: *RecordClass*:\n\n.. code-block:: python\n\n    from name.space import RecordClass\n\n    record = RecordClass({'foo': True, 'bar': 'true', 'baz': 10, 'food': 'CHOCOLATE'})\n\nTips: To generate classes in a subpackage of your existing application set the \"--top_level_package\" flags to your subpackage name:\n\n.. code-block:: bash\n\n    avro-to-python [path_to_source_avsc_files] [path_to_my_subpackage_directory] --top_level_package my.subpackage\n\n.. code-block:: python\n\n    from my.subpackage.name.space import RecordClass\n\n    record = RecordClass({'foo': True, 'bar': 'true', 'baz': 10, 'food': 'CHOCOLATE'})\n\nCLI (with --pip)\n----------------\nYou can also choose to make compiled avro packages ***pip installable*** by adding the \"--pip\" flags. An example of this is the following:\n.. code-block:: bash\n\n    avro-to-python [path_to_source_avsc_files] [path_to_target_directory] --pip test_avro\n\nBy running this, you should be able to pip install the above package you created from the target directory you specified by running:\n\n.. code-block:: bash\n\n    pip install -e path_to_target_directory\n\nNow that you have the package installed, you can import it by it's package name and namespace. Here is the same example of the same avsc from above, only with a pip package of *test_avro*:\n\n.. code-block:: python\n\n    from test_avro.name.space import RecordClass\n\n    record = RecordClass({'foo': True, 'bar': 'true', 'baz': 10, 'food': 'CHOCOLATE'})\n\nYou can customize the top level package name *test_avro*, modifying the \"--top_level_package\" flags:\n\n.. code-block:: bash\n\n    avro-to-python [path_to_source_avsc_files] [path_to_target_directory] --pip test_avro --top_level_package event\n\n.. code-block:: python\n\n    from event.name.space import RecordClass\n\n    record = RecordClass({'foo': True, 'bar': 'true', 'baz': 10, 'food': 'CHOCOLATE'})\n\n\navro-to-python in a Script\n--------------------------\nYou can also use the reader and writer packages in avro-to-python as you would any other python package. Avro to python is split between a *reader* and *writer* classes. avro-to-python treates namespaces as acyclic trees and uses depth first search to ensure no duplication or namespace collisions on read and write. An example useage is below:\n\n.. code-block:: python\n\n    from avro_to_python.reader import AvscReader\n    from avro_to_python.writer import AvroWriter\n\n    # initialize the reader object\n    reader = AvscReader(directory='tests/avsc/records/')\n\n    # generate the acyclic tree object\n    reader.read()\n\n    # initialize the writer object\n    writer = AvroWriter(reader.file_tree, pip='test_pip')\n\n    # compile python files using 'tests/test_records as the namespace root'\n    writer.write(root_dir='tests/test_records')\n\n\n\nRoadmap\n^^^^^^^\n\nReader\n\n- [X] Create Namespace Trees on nested namespaces\n- [X] Read Record and Enum File\n- [X] Primitive types\n- [X] Array Types\n- [X] Union types\n- [X] References to other files\n- [X] Map Types\n- [ ] Logical Types (Currently just converts to primitive types)\n\nWriter\n\n- [X] Base Schema Writer\n- [X] Base Record Schema\n- [X] Base Enum Schema\n- [X] Primitive Types Schema\n- [X] Array Types Schema\n- [X] Union Types Schema\n- [X] Map Types\n- [ ] Logical Types Schema (Currently just converts to primitive types)\n- [X] Add configs to pip install package\n\nCLI\n\n- [X] Wrap Writer and Reader into one cli commmit\n- [X] Add pip install option (would include all files to pip install compiled package)\n- [ ] Add better --help documentation\n\nDocumentation\n\n- [ ] Document reader class\n- [ ] Document writer class\n- [ ] Document cli\n\n\n=======\nHistory\n=======\n\n0.3.3 (2022-01-26)\n^^^^^^^^^^^^^^^^^^\n\n* Fix array reference handling.\n\n\n0.3.2 (2021-11-16)\n^^^^^^^^^^^^^^^^^^\n\n* Add map type to unions.\n\n\n0.3.1 (2020-06-10)\n^^^^^^^^^^^^^^^^^^\n\n* First release on PyPI.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LeComptoirDesPharmacies/avro-to-python",
    "keywords": "avro-to-python",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lcdp-avro-to-python",
    "package_url": "https://pypi.org/project/lcdp-avro-to-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/lcdp-avro-to-python/",
    "project_urls": {
      "Homepage": "https://github.com/LeComptoirDesPharmacies/avro-to-python"
    },
    "release_url": "https://pypi.org/project/lcdp-avro-to-python/0.3.3.post6/",
    "requires_dist": null,
    "requires_python": ">3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
    "summary": "avro-to-python is a light tool for compiling avro schema files (.avsc) to python classes making using avro schemata easy.",
    "version": "0.3.3.post6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14092225,
  "releases": {
    "0.3.3.post6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23f9f2eb13e0ff1c87d3811d2e646f937082a672022bf322083100de64877a57",
          "md5": "3ff32df48fd23526580b8f33a00c5a6e",
          "sha256": "1ffa90210447d3b201572d539f1457acfb45c65712a9b34ca24ba7ce7027f335"
        },
        "downloads": -1,
        "filename": "lcdp_avro_to_python-0.3.3.post6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ff32df48fd23526580b8f33a00c5a6e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 33496,
        "upload_time": "2022-06-10T08:53:14",
        "upload_time_iso_8601": "2022-06-10T08:53:14.904425Z",
        "url": "https://files.pythonhosted.org/packages/23/f9/f2eb13e0ff1c87d3811d2e646f937082a672022bf322083100de64877a57/lcdp_avro_to_python-0.3.3.post6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeb05b2ebed1235d4673139d578fa9a8bd1440adafd044a3993e8dff35ff97d3",
          "md5": "57e8c2d47fd0e810c59e92bc4b9f29d5",
          "sha256": "d850b0165f08dc00d051b782a65e862afdf257505f8cc03dc4f948f6b33fa57b"
        },
        "downloads": -1,
        "filename": "lcdp_avro_to_python-0.3.3.post6.tar.gz",
        "has_sig": false,
        "md5_digest": "57e8c2d47fd0e810c59e92bc4b9f29d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
        "size": 35440,
        "upload_time": "2022-06-10T08:53:16",
        "upload_time_iso_8601": "2022-06-10T08:53:16.283701Z",
        "url": "https://files.pythonhosted.org/packages/ae/b0/5b2ebed1235d4673139d578fa9a8bd1440adafd044a3993e8dff35ff97d3/lcdp_avro_to_python-0.3.3.post6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23f9f2eb13e0ff1c87d3811d2e646f937082a672022bf322083100de64877a57",
        "md5": "3ff32df48fd23526580b8f33a00c5a6e",
        "sha256": "1ffa90210447d3b201572d539f1457acfb45c65712a9b34ca24ba7ce7027f335"
      },
      "downloads": -1,
      "filename": "lcdp_avro_to_python-0.3.3.post6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ff32df48fd23526580b8f33a00c5a6e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
      "size": 33496,
      "upload_time": "2022-06-10T08:53:14",
      "upload_time_iso_8601": "2022-06-10T08:53:14.904425Z",
      "url": "https://files.pythonhosted.org/packages/23/f9/f2eb13e0ff1c87d3811d2e646f937082a672022bf322083100de64877a57/lcdp_avro_to_python-0.3.3.post6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aeb05b2ebed1235d4673139d578fa9a8bd1440adafd044a3993e8dff35ff97d3",
        "md5": "57e8c2d47fd0e810c59e92bc4b9f29d5",
        "sha256": "d850b0165f08dc00d051b782a65e862afdf257505f8cc03dc4f948f6b33fa57b"
      },
      "downloads": -1,
      "filename": "lcdp_avro_to_python-0.3.3.post6.tar.gz",
      "has_sig": false,
      "md5_digest": "57e8c2d47fd0e810c59e92bc4b9f29d5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.5, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
      "size": 35440,
      "upload_time": "2022-06-10T08:53:16",
      "upload_time_iso_8601": "2022-06-10T08:53:16.283701Z",
      "url": "https://files.pythonhosted.org/packages/ae/b0/5b2ebed1235d4673139d578fa9a8bd1440adafd044a3993e8dff35ff97d3/lcdp_avro_to_python-0.3.3.post6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}