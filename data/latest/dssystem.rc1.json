{
  "info": {
    "author": "Rafi Mochamad Fahreza",
    "author_email": "prokodingproject@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "## About this package\n\nThe basic concept **SAW method** is to find the sum of the weighted performance rating for each alternative on all attributes. **SAW** method requires a **process** of normalizing the decision matrix (X) to a scale that can be compared with all the ratings of existing alternatives.\n\n### Depedencies\n* Python >= 3\n* numpy\n* pandas\n\n### Function\n\n**init (data,weights, non_beneficial = None)** \n\n> Initializer provides 2 required parameters and 1 optional parameter, data is the dataset with DataFrame format, weights is the values that provided to get a optimal alternative, non_beneficial is the column that has type \"cost\", not benefit.\n\n**getDecisionMatrix** \n\n> Function that return formatted matrix from dataset\n\n**normalize** \n\n> Function that return normalized matrix from decision matrix\n\n**createDecision** \n\n> Function that return the list of alternative's score\n\n**getChosenOneByIndex** \n\n> Function that return the chosen one from the alternatives\n\n\n### Example case\nWe will simulate \"Selection of land - Water resources management\" which has 4 criteria(s) : Rainfall, Drainage, Usage of land, Tophography. Usage of land is the only one non beneficial criteria.\n* In this case we'll use the weight values like this : \n> [0.25, 0.25, 0.25, 0.25]\n* The example dataset that we had\n> [[25,  67,  7,  20],  \n    [21,  78,  6,  24],  \n    [19,  53,  5,  33],\n    [22,  25,  2,  31]]\n### Example of code\n```\nfrom dssystem.method import SimpleAdditiveWeighted\nimport numpy as np\nimport pandas as pd\ndataset = pd.DataFrame({\"Rainfall\" : [25, 21, 19, 22],\n\t\t\t\t\t\t\"Drainage\" : [67, 78, 53, 25],\n\t\t\t\t\t\t\"Usage of land\" : [7, 6, 5, 2],\n\t\t\t\t\t\t\"Tophography\" : [20, 24, 33, 31]}, \n\t\t\t\t\t\tindex=[\"L1\",\"L2\",\"L3\",\"L4\"])\n\t\t\t\t\t\t\nmethod = SimpleAdditiveWeighted(dataset, [.25, .25 , .25, .25], [\"Usage of land\"])\nprint(method.getChosenOneByIndex()) #to get chosen alternative name\nprint(method.getDecisionMatrix()) #to get decision matrix\nprint(method.normalize()) #to get normalized decision matrix\nprint(method.createDecision()) #to get list of alternative's score\n```\n\n## Example of output\n```\nL4 #L4 is the chosen one\n\n#output of the decision matrix\n[[25 67  7 20]\n [21 78  6 24]\n [19 53  5 33]\n [22 25  2 31]]\n\n#output of normalized decision matrix\n[[1.   0.86 0.29 0.61]\n [0.84 1.   0.33 0.73]\n [0.76 0.68 0.4  1.  ]\n [0.88 0.32 1.   0.94]]\n\n#output of list of alternative's score\n[0.69 0.72 0.71 0.79]\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "algorithm,dss,decision",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dssystem",
    "package_url": "https://pypi.org/project/dssystem/",
    "platform": "",
    "project_url": "https://pypi.org/project/dssystem/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dssystem/0.1.5/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "The basic concept SAW method is to find the sum of the weighted performance rating for each alternative on all attributes. SAW method requires a process of normalizing the decision matrix (X) to a scale that can be compared with all the ratings of existing alternatives.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10260279,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "680494595d78fef50b7114c5a8d35efc698960da65df75e0357315dd8c2d5101",
          "md5": "ca9365955617e5df76a75c262d33b7d7",
          "sha256": "b0ae9d77c1bfe7172e04f7659129afefe91f7a58c0d5dfbc0a8af38130fcb671"
        },
        "downloads": -1,
        "filename": "dssystem-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ca9365955617e5df76a75c262d33b7d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4386,
        "upload_time": "2021-05-04T22:53:36",
        "upload_time_iso_8601": "2021-05-04T22:53:36.320809Z",
        "url": "https://files.pythonhosted.org/packages/68/04/94595d78fef50b7114c5a8d35efc698960da65df75e0357315dd8c2d5101/dssystem-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "680494595d78fef50b7114c5a8d35efc698960da65df75e0357315dd8c2d5101",
        "md5": "ca9365955617e5df76a75c262d33b7d7",
        "sha256": "b0ae9d77c1bfe7172e04f7659129afefe91f7a58c0d5dfbc0a8af38130fcb671"
      },
      "downloads": -1,
      "filename": "dssystem-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ca9365955617e5df76a75c262d33b7d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 4386,
      "upload_time": "2021-05-04T22:53:36",
      "upload_time_iso_8601": "2021-05-04T22:53:36.320809Z",
      "url": "https://files.pythonhosted.org/packages/68/04/94595d78fef50b7114c5a8d35efc698960da65df75e0357315dd8c2d5101/dssystem-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}