{
  "info": {
    "author": "Evgeniy Blinov",
    "author_email": "zheni-b@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Astrologic - автоматическая оптимизация кода на уровне AST\n\n\nПакет Astrologic содержит ряд инструментов, позволяющих \"в рантайме\" оптимизировать работу ваших функций или даже конструировать новые функции. Все это достигается за счет парсинга и преобразования [AST](https://docs.python.org/3/library/ast.html) исходной функции. Парсинг происходит полностью \"под капотом\" и невидим для пользователя.\n\n\n## Оглавление\n\n- [**Дисклеймер**](#дисклеймер)\n- [**Как это работает**](#как-это-работает)\n- [**Установка**](#установка)\n- [**Включаем и отключаем блоки кода**](#включаем-и-отключаем-блоки-кода)\n- [**Оптимизируем хвостовую рекурсию**](#оптимизируем-хвостовую-рекурсию)\n- [**Инлайним функции**](#инлайним-функции)\n\n\n## Дисклеймер\n\nВсе, что вы найдете в данном пакете - это демонстрация концепций. Существует огромное количество весьма разумных причин, почему код из данной библиотеки, или из других, содержащих подобные хаки, не должен использоваться в \"реальности\". Как минимум, манипуляции с AST приводят к тому, что у вас начинает реально исполняться совершенно не тот код, который вы видите в файлах проекта. Средства интроспекции Python тоже совершенно не ожидают таких усовершенствований и могут давать ложную информацию.\n\nКроме того, большинство предложенных здесь оптимизаций фактически бесполезны. Они оптимизируют вещи, которые, как правило, отъедают совсем немного машинного времени, однако это происходит за счет значительного увеличения времени инициализации объектов в модулях программы.\n\nЕсли уж вы по собственной глупости решите практически использовать данную библиотеку, пожалуйста, хорошо тестируйте свой код. Иногда вы можете столкнуться с совершенно неожиданным его поведением. Учитывайте, что предложенные здесь функции плохо протестированы (ввиду чисто демонстрационных целей их написания), и содержащиеся в них потенциальные баги могут удивить даже автора.\n\n\n## Как это работает\n\nИнтерпретация программы на Python происходит в несколько [этапов](https://habr.com/ru/company/otus/blog/442252/). Если коротко: сначала файл считывается и разбивается на токены, затем из считанных токенов составляется [абстрактное синтаксическое дерево](https://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%BE%D0%B5_%D1%81%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE), на основе дерева компилируется [байт-код](https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B9%D1%82-%D0%BA%D0%BE%D0%B4#:~:text=%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80%20Clipper%20%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%B5%D1%82%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D0%BD%D1%8F%D0%B5%D0%BC%D1%8B%D0%B9%20%D1%84%D0%B0%D0%B9%D0%BB,%2C%20%D1%81%D0%BE%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%89%D0%B8%D0%B5%20%D0%B1%D0%B0%D0%B9%D1%82%2D%D0%BA%D0%BE%D0%B4%20Java.), ну и тот уже в итоге выполняется виртуальной машиной.\n\nМы не внедряемся в этот процесс, а обходим его. К сожалению, после компиляции байт-кода, абстрактное синтаксическое дерево не сохраняется, поэтому, если мы хотим его как-то исправить, нам надо проделать весь путь заново: получить исходный код, построить на его основе AST, скорректировать AST как нам требуется и скомпилировать из него байт-код.\n\nВстроенные [средства интроспекции](https://docs.python.org/3/library/inspect.html) позволяют нам извлечь из объекта функции [текст ее исходного кода](https://docs.python.org/3/library/inspect.html#inspect.getsource). Этот текст мы скармливаем функции [```ast.parse()```](https://docs.python.org/3/library/ast.html#ast.parse) и получаем уже нужный нам объект дерева, с которым дальше будем производить все оптимизации. Пакет [ast](https://docs.python.org/3/library/ast.html) также предоставляет готовые классы для обхода дерева и замены отдельных нод, чем мы и пользуемся. После всех манипуляций мы скармливаем уже видоизмененное дерево встроенной функции [```compile()```](https://docs.python.org/3/library/functions.html#compile), чтобы получить порцию байт-кода. Байт-код мы выполняем через [```exec()```](https://docs.python.org/3/library/functions.html#exec), передав туда словарь \"пространства имен\". ```exec()``` выполняет код инициализации функции как бы в отдельном \"виртуальном\" модуле. После выполнения инициализации мы достаем функции по имени из переданного в ```exec()``` словаря. Инициализация некоторых функций дергает дополнительные объекты из глобального пространства имен, поэтому, если попытаться выполнить их инициализацию в \"голом\"\nмодуле, мы получим ожидаемое исключение. Чтобы этого избежать, мы предварительно вручную (при помощи [```importlib```](https://docs.python.org/3/library/importlib.html)) импортируем модуль, из которого извлечена обрабатываемая нами функция, и все его содержимое перекладываем в тот самый словарь, что мы передаем ```exec()``` в качестве \"пространства имен\".\n\nИсходя уже из описания процесса ясно, что у него не может не быть побочных эффектов. Вот некоторые из них:\n\n1. Когда мы добавляем новые ноды в AST, они лишены привязки к конкретным строкам исходного кода. Если там случится исключение, в полученном трейсбэке вы получите искаженную информацию.\n\n2. Все эти повторные парсинги-компиляции довольно ресурсоемки.\n\n3. Как выяснилось опытным путем, директива ```global``` в измененных таким образом функциях работает не совсем ожидаемым образом. Она указывает на соответствующую переменную в том \"виртуальном\" модуле, что был для нее создан при выполнении инициализации через ```exec()```. Вы можете воздействовать из своей функции на глобальную переменную там, в то время как глобальная переменная с тем же именем в том модуле, где фактически расположен исходный код вашей функции, никак затронута не будет.\n\n4. Фактически выполняется не тот код, что написан в вашем коде. Это, собственно, самая большая проблема. Вся суть программирования заключается в том, что вы пишете код и машина __его__ выполняет. А тут она выполняет что-то другое, и вы толком не знаете, что (если хотите таки посмотреть, что именно выполнится, передайте в любой из декораторов данной библиотеки аргумент ```debug_mode_on=True```, тогда в консоли вы увидите текст функции, которая была сгенерирована после изменения AST).\n\n5. Это не будет работать с функциями из замыканий.\n\n6. Особенность конкретно данной реализации, но не технологии в принципе. Модифицирующий декоратор должен быть первым в списке декораторов. Кроме того, все декораторы и строка с объявлением функции должны быть однострочными.\n\nЭто значительные минусы, и, как вы могли прочитать в [дисклеймере](#дисклеймер), я считаю их достаточным основанием, чтобы никогда в практическом смысле не использовать модификации AST. Однако это не мешает нам в развлекательных целях создавать \"магию\".\n\n\n## Установка\n\nУстановите Astrologic через [pip](https://pypi.org/project/astrologic/):\n\n```\n$ pip install astrologic\n```\n\n\n## Включаем и отключаем блоки кода\n\nПростейшим из декораторов библиотеки Astrologic является ```@switcher```. Вот пример его использования:\n\n```python\nfrom astrologic import switcher\n\n\n@switcher(a=False, b=True)\ndef function():\n  print('begin')\n  if a:\n    print('block a')\n  if b:\n    print('block b')\n  print('end')\n\nfunction() # Что будет выведено? Проверьте сами!\n```\n\n```@switcher``` проходится по унарным условиям (условиям, в которых только один операнд). Если название переменной, которая фигурирует в данном условии, присутствует в именованных аргументах самого декоратора, он делает одну из двух вещей. Если именованный аргумент равен True, он достает данный блок кода из условия заменяет им само условие. Если аргумент равен False, он удаляет условие вместе с блоком кода. То есть функция из примера выше превращается в:\n\n```python\n# Тот код, который будет исполнен на машине. Блок кода \"if a:\" полностью вырезан, а блок \"if b:\" вытащен из проверки, в то время как сама проверка тоже вырезана.\ndef function():\n  print('begin')\n  print('block b')\n  print('end')\n```\n\nИспользовать данный декоратор вы можете, к примеру, чтобы избежать каких-то проверок в вашем коде, основанных на константах. При инициализации функций в начале работы интерпретатора вы указываете, какие блоки кода вам нужны. По сути, if'ы в данном случае служат не по прямому назначению, а работают разметкой кода.\n\nПоскольку ```@switcher``` редактирует функции на уровне AST, в некоторых случаях применение декоратора может ускорить ваш код, полностью убрав ненужные операции из реально исполняемого машиной кода.\n\nУ ```@switcher``` есть ряд ограничений и правил использования, которые необходимо учитывать:\n\n- Декоратор ```@switcher``` должен быть первым в списке декораторов, все остальные можно накладывать только поверх. Если не соблюсти это правило, декораторы, лежащие под ```@switcher```, могут просто исчезнуть, будто их не было.\n\n- Никаких else или else if у блоков if, которыми вы управляете через декоратор! У прочих блоков if использовать else можно, поскольку они никаких не модифицируются.\n\n## Оптимизируем хвостовую рекурсию\n\nЕще один крутой трюк с AST - автоматическая оптимизация [хвостовой рекурсии](https://ru.wikipedia.org/wiki/%D0%A5%D0%B2%D0%BE%D1%81%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F). Для этого нам понадобится декоратор ```@no_recursion```:\n\n\n```python\nfrom astrologic import no_recursion\n\ncounter = 0\n\n@no_recursion\ndef recursion():\n    global counter\n    counter += 1\n    if counter != 10000000:\n        return recursion()\n    return counter\n\nprint(recursion()) # Попробуйте выполнить это сами!\n```\n\nКак вы, вероятно, знаете, максимальная глубина рекурсии в Python ограничена, и обычно составляет около 1000. Однако код из этого примера отработает и вернет корректный результат, поскольку декоратор ```@no_recursion``` автоматически преобразовал рекурсивный код в итеративный. В отличие от других [решений](https://github.com/0scarB/tail-recursive) данной задачи, здесь не потребовалась менять исходный код функции, кроме как навешиванием на нее декоратора.\n\nНадо сказать, против автоматической оптимизации хвостовой рекурсии [высказывался](http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html) даже сам [Гвидо Ван Россум](https://en.wikipedia.org/wiki/Guido_van_Rossum). Его доводы довольно весомы, но они относятся, прежде всего, к внедрению данной возможности непосредственно в интерпретатор. Сделать такую оптимизацию бесшовной, с учетом интерпретируемой и гибкой природы Python, действительно невозможно. Однако это не мешает нам сделать это, пойдя на некоторые ограничения.\n\n\n<details>\n<summary>Вот они:</summary>\n\n- Поддерживается только обычная хвостовая рекурсия. Она выглядит вот так:\n\n```python\ndef function():\n  return function()\n```\n\n  Функция вызывает сама себя в блоке return и никак иначе. Никакие другие кейсы, включая, скажем, перекрестную рекурсию (это когда функция А вызывает функцию Б, а та, в свою очередь - функцию А), не покрываются.\n\n- За рекурсию принимается вызов объекта с тем же именем, какое название у функции. Вызов того же имени от другого объекта будет принят за рекурсию!\n\n```python\ndef function():\n  return obj.function() # Декоратор примет это за рекурсию, хотя, очевидно, obj.function != function.\n```\n\n- Внутри функции нельзя использовать имена ```is_recursion``` и ```superfunction```. Особенности реализации. Остальные имена можно.\n\n- Стек-трейсы, как и предупреждал Гвидо, могут не совсем корректно отражать реальность.\n\n</details>\n\n\n## Инлайним функции\n\nСледующая оптимизация - инлайновые функции. В данном пакете это работает немного иначе, чем вы, вероятно, ожидаете, если знаете про [такую возможность](https://en.cppreference.com/w/c/language/inline) в C++. Здесь метка ```inline``` вешается не на ту функцию, которую мы инлайним, а на ту, __в__ которую.\n\n```python\nfrom astrologic import inline\n\n\ndef a(c):\n    d = c\n    print(d)\n\n@inline('a')\ndef b():\n    print('lol')\n    c = 'kek'\n    a(c)\n\nb()\n```\n\nНа этом примере мы инлайним функцию a() в функцию b(). Имена функций, которые мы инлайним, должны быть перечислены при вызове декоратора ```@inline```.\n\nПо итогу код из примера преобразовывается примерно вот в это:\n\n```python\ndef b():\n    print('lol')\n    c = 'kek'\n    generated_ddea0cfb886b422891e7643ff31efbfa = c\n    d = generated_ddea0cfb886b422891e7643ff31efbfa\n    print(d)\n```\n\nСодержимое функции a() \"вклеивается\" в функцию b(), с попутным разрешением возможного конфликта имен.\n\n<details>\n<summary>Ограничения:</summary>\n\nУ функций, которые мы инлайним, не должно быть именованных параметров. Мне просто лень это прикручивать, для демонстрации возможности хватит и текущей версии.\n\n</details>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pomponchik/astrologic",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "astrologic",
    "package_url": "https://pypi.org/project/astrologic/",
    "platform": "",
    "project_url": "https://pypi.org/project/astrologic/",
    "project_urls": {
      "Homepage": "https://github.com/pomponchik/astrologic"
    },
    "release_url": "https://pypi.org/project/astrologic/0.0.4/",
    "requires_dist": [
      "astunparse (==1.6.3)"
    ],
    "requires_python": "",
    "summary": "Автоматическая оптимизация кода на уровне АСТ",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9850970,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c58dfdf7b678d7170c7fce597d991970135be1710b1816ff879b7d489822a597",
          "md5": "55fe2c3e2dca90442cf94f82ebbe4041",
          "sha256": "89a94345ca067c9f6b1b680471d03bc55a53564e75041d8e3c98f33d3defe824"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55fe2c3e2dca90442cf94f82ebbe4041",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8118,
        "upload_time": "2021-03-20T01:23:54",
        "upload_time_iso_8601": "2021-03-20T01:23:54.549941Z",
        "url": "https://files.pythonhosted.org/packages/c5/8d/fdf7b678d7170c7fce597d991970135be1710b1816ff879b7d489822a597/astrologic-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c7556e6c3f37c3e8d4c1c14182c20055a31af21d12f9207a0dc52a8af6d0e1e",
          "md5": "0e5797774f7ce569a6fb433037c178cd",
          "sha256": "220795367304ecc50a23f849fce1120c9d207d557ce6f58753ebf1128f7315c5"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e5797774f7ce569a6fb433037c178cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8135,
        "upload_time": "2021-03-20T01:23:55",
        "upload_time_iso_8601": "2021-03-20T01:23:55.995265Z",
        "url": "https://files.pythonhosted.org/packages/6c/75/56e6c3f37c3e8d4c1c14182c20055a31af21d12f9207a0dc52a8af6d0e1e/astrologic-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac115fc00568387af7237e2f6fd4ea8b6e33b89ac42ae9faf75e3bac3e0f7c0f",
          "md5": "33008217eefe37134fb23fb1764f6f8e",
          "sha256": "f45f937e852d8485e8eada995199f7ef5032eb115eb8ce15389d909b7b17493e"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33008217eefe37134fb23fb1764f6f8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13651,
        "upload_time": "2021-03-23T02:52:38",
        "upload_time_iso_8601": "2021-03-23T02:52:38.802781Z",
        "url": "https://files.pythonhosted.org/packages/ac/11/5fc00568387af7237e2f6fd4ea8b6e33b89ac42ae9faf75e3bac3e0f7c0f/astrologic-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa8504fb3a14c9bfa5962d9fc76157f8dd2a8bfd91d9049c040f314fda6d1cd4",
          "md5": "b14bf242ed68937cc0f6f50d9a9f0524",
          "sha256": "cb5f276b7df08d210e99e247fd922c43a474a7eaa94d522d68566d9469d73cba"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b14bf242ed68937cc0f6f50d9a9f0524",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18075,
        "upload_time": "2021-03-23T02:52:41",
        "upload_time_iso_8601": "2021-03-23T02:52:41.278734Z",
        "url": "https://files.pythonhosted.org/packages/fa/85/04fb3a14c9bfa5962d9fc76157f8dd2a8bfd91d9049c040f314fda6d1cd4/astrologic-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8748f75f228b0b6e31ad6b8f531ee7bc6cdc2ec309d788672e0be1691d7df1f",
          "md5": "7113fd9bec5987280bf3214a9f0424ac",
          "sha256": "8482c0e7fb17b2a1e7233bc482e6db75d636d2e87b5a5dfa84c9c9a18f5d928e"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7113fd9bec5987280bf3214a9f0424ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13742,
        "upload_time": "2021-03-23T03:16:48",
        "upload_time_iso_8601": "2021-03-23T03:16:48.364809Z",
        "url": "https://files.pythonhosted.org/packages/c8/74/8f75f228b0b6e31ad6b8f531ee7bc6cdc2ec309d788672e0be1691d7df1f/astrologic-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ea0e270c010542bd18db2d36486bf00a74a13417c088e5142fe256414cbc482",
          "md5": "83fe1b25537b322e617b93252837c83e",
          "sha256": "c7ff9c9ed1098715b2f444ba5c5b6f9924b138afdc831f13dcedf1d8591ccc41"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "83fe1b25537b322e617b93252837c83e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18061,
        "upload_time": "2021-03-23T03:16:51",
        "upload_time_iso_8601": "2021-03-23T03:16:51.133133Z",
        "url": "https://files.pythonhosted.org/packages/9e/a0/e270c010542bd18db2d36486bf00a74a13417c088e5142fe256414cbc482/astrologic-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a64d7b0e5ef085d9e194a0600fe227f4bfb5205761263643128c37ddb95e3d4",
          "md5": "cc2f095610775c2c71d8598b64f2644b",
          "sha256": "c7e3eddb43ec82f646936d00591323fd861db7660769e63e826b9393681c9b9d"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc2f095610775c2c71d8598b64f2644b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13743,
        "upload_time": "2021-03-23T03:20:38",
        "upload_time_iso_8601": "2021-03-23T03:20:38.152603Z",
        "url": "https://files.pythonhosted.org/packages/3a/64/d7b0e5ef085d9e194a0600fe227f4bfb5205761263643128c37ddb95e3d4/astrologic-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6525929756c6fdda886eda22a1a775bc457979fd604ad1d1f24144c75df03e72",
          "md5": "ea628c5ddb5b8b22f3ed3b7ca9593033",
          "sha256": "8af0b3896fd3b7413e3db6664c26fb128ca7176043132c71ec0368d75738eb60"
        },
        "downloads": -1,
        "filename": "astrologic-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ea628c5ddb5b8b22f3ed3b7ca9593033",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18067,
        "upload_time": "2021-03-23T03:20:55",
        "upload_time_iso_8601": "2021-03-23T03:20:55.400710Z",
        "url": "https://files.pythonhosted.org/packages/65/25/929756c6fdda886eda22a1a775bc457979fd604ad1d1f24144c75df03e72/astrologic-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a64d7b0e5ef085d9e194a0600fe227f4bfb5205761263643128c37ddb95e3d4",
        "md5": "cc2f095610775c2c71d8598b64f2644b",
        "sha256": "c7e3eddb43ec82f646936d00591323fd861db7660769e63e826b9393681c9b9d"
      },
      "downloads": -1,
      "filename": "astrologic-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cc2f095610775c2c71d8598b64f2644b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13743,
      "upload_time": "2021-03-23T03:20:38",
      "upload_time_iso_8601": "2021-03-23T03:20:38.152603Z",
      "url": "https://files.pythonhosted.org/packages/3a/64/d7b0e5ef085d9e194a0600fe227f4bfb5205761263643128c37ddb95e3d4/astrologic-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6525929756c6fdda886eda22a1a775bc457979fd604ad1d1f24144c75df03e72",
        "md5": "ea628c5ddb5b8b22f3ed3b7ca9593033",
        "sha256": "8af0b3896fd3b7413e3db6664c26fb128ca7176043132c71ec0368d75738eb60"
      },
      "downloads": -1,
      "filename": "astrologic-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ea628c5ddb5b8b22f3ed3b7ca9593033",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18067,
      "upload_time": "2021-03-23T03:20:55",
      "upload_time_iso_8601": "2021-03-23T03:20:55.400710Z",
      "url": "https://files.pythonhosted.org/packages/65/25/929756c6fdda886eda22a1a775bc457979fd604ad1d1f24144c75df03e72/astrologic-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}