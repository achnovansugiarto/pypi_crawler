{
  "info": {
    "author": "Thomas Ott",
    "author_email": "tommy.ott617@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Scientific/Engineering :: Hydrology"
    ],
    "description": "# stormcatchments\n[![PyPi](https://img.shields.io/pypi/v/stormcatchments.svg)](https://pypi.python.org/pypi/stormcatchments)\n\n## Stormwater network aware catchment delineation\n\nConverts existing stormwater infrastucture GIS feature data (points and lines) into a\n```networkx``` directed graph (```DiGraph```) object, then utilizes the ```DiGraph``` to\nincorporate subsurface flows into urban stormwater catchment delineation.\n\nDependencies of ```stormcatchments``` include:\n- [```geopandas```](https://github.com/geopandas/geopandas)\n- [```networkx```](https://github.com/networkx/networkx)\n- [```pysheds```](https://github.com/mdbartos/pysheds)\n- [```rtree```](https://github.com/Toblerity/rtree)\n\nSimilar libraries/projects:\n- [```s2g```](https://github.com/caesar0301/s2g)\n- [```networkx``` module ```nx_shp.py```](https://github.com/networkx/networkx/blob/6e20b952a957af820990f68d9237609198088816/networkx/readwrite/nx_shp.py)\n\n\n## Installation\n\nTo install from PyPI:\n```\npip install stormcatchments\n```\n\n## Input data requirements\n\nTo utilize this package, you need both **point** and **line** spatial data, which could represent a network of catchbasins and stormlines. The file format does not matter as long as it can be successfully read into a ```geopandas.GeoDataFrame```. The line data must connect to the points, and lines must have verticies snapped to the points.\n\nThis was initially developed for [Vermont Agency of Natural Resources stormwater infrastructure dataset](https://gis-vtanr.hub.arcgis.com/maps/VTANR::stormwater-infrastructure/explore?location=43.609172%2C-72.968811%2C14.15). However, the package is intended to generalize to any infrastructure dataset that meets these basic requirements.\n\n\n## Example Usage\n\n### Imports\n```python\nimport geopandas as gpd\nimport stormcatchments as sc\n```\n### Read infrastructure data\n```python\nstorm_lines = gpd.read_file('tests/test_data/johnson_vt/storm_lines.shp')\nstorm_lines.set_index('OBJECTID', inplace=True)\nstorm_pts = gpd.read_file('tests/test_data/johnson_vt/storm_pts.shp')\nstorm_pts.set_index('OBJECTID', inplace=True)\n```\n### Initialize Network object and resolve directions\n```python\n# storm_pts contains a column \"Type\" with integer values describing what type of \n# structure each point represents\nsinks = [2, 8] # Corresponds to catchbasins and culvert inlets\nsources = [5, 9] # Corresponds to outfalls and culvert outlets\n\nnet = sc.Network(\n  storm_lines, storm_pts, type_column='Type', sink_types=sinks, source_types=sources\n)\n```\nRefer to [Mapping flow sinks and sources](#mapping-flow-sinks-and-sources) below for more information on initializing a ```Network```\n### Resolve flow directions of the Network\n```python\nnet.resolve_directions(method='from_sources', verbose=True)\n```\nOutput:\n```\nAdding edges...\nSuccesfully resolved direction for 202 edges\n```\nRefer to [Determining subsurface flow direction](#determining-subsurface-flow-direction) below for more information of resolving ```Network``` directions\n### Preprocess terrain data\n```python\ngrid, fdir, acc = sc.terrain.preprocess_dem('tests/test_data/johnson_vt/dem.tif')\n```\nNote that ```sc.terrain.preprocess_dem()``` uses default settings for ```pysheds```. It's worth experimenting with this step to try and improve results with your DEM.\n### Initialize Delineate object and get a stormcatchment\n```python\ngrid_epsg = 6589\ndelin = sc.Delineate(net, grid, fdir, acc, grid_epsg)\n\n# (x, y) coordinates in same CRS as grid\npour_pt = (484636, 237170)\n# get stormcatchment using the default accumulation threshold\nstormcatchment = delin.get_stormcatchment(pour_pt, acc_thresh=1000)\n```\n### Also get the original catchment (network unaware) to compare results\n```python\ncatchment = sc.delineate.get_catchment(\n  pour_pt, grid, fdir, acc, grid_epsg, acc_thresh=1000\n)\n```\n### Plot original catchment in blue and stormcatchment in orange\nThis uses the built-in ```net.draw()``` method, which adds a ```contextily``` basemap when ```add_basemap=True```. Note that the orange stormcatchment incorporates a large hillside \nthat pipes to the pour point.\n```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12, 12))\nstormcatchment.plot(ax=ax, ec='orange', fc='orange', alpha=0.5, linewidth=3)\ncatchment.plot(ax=ax, ec='blue', fc='blue', alpha=0.5, linewidth=3)\nnet.draw(ax=ax, add_basemap=True)\n```\n![Plot of catchment and stormcatchment](img/example_stormcatchment.png)\n\n\n## Mapping flow sinks and sources\n\nFlow sinks are where flow can enter a subsurface system (such as a catchbasin). Flow sources are where flow can exit a subsurface system (such as an outfall). Initializing the ```network.Network``` requires either:\n- Manually setting two ```bool``` columns in the point ```GeoDataFrame```, named ```IS_SINK``` and ```IS_SOURCE``` that are set to ```True``` if a point falls into either category.\n- Defining a ```type_column``` in the point data, then supplying a ```list``` of ```sink_types``` and a ```list``` of ```source_types``` to lookup in the ```type_column```. This will then be mapped onto two ```bool``` columns in the point data named ```IS_SINK``` and ```IS_SOURCE```.\n\n\n## Determining subsurface flow direction\n\nResolving the flow direction of subsurface stormwater networks, which is done during ```network.Network.resolve_directions()```, can be done in three ways:\n1) ```from_sources```: This is the default. This method traces networks upstream from their discharge points. This assumes that subnetworks are comprised of one or more flow sinks that flow to a single flow source. If multiple flow sources are connected to a given flow sink, this method will run into issues since determining which flow source is the terminal node in the graph would need to incorporate pipe elevation data somehow.\n2) ```vertex_order```: This defines the subsurface flow direction using the order of verticies in the line data (flowing from the first to last vertex).\n3) ```vertex_order_r```: This is the same as above, but in reverse (flowing from last to first vertex).\n\nTwo other potential methods that are not yet implemented are:\n- Using surface elevation data as an analog for for subsurface pipe elevations. In flat urban settings this would likely have a lot of issues/inaccuracies.\n- Using pipe invert data from the attributes of point or line data. This would require manual preparation by the user but would be the most accurate method.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/t-ott/stormcatchments",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stormcatchments",
    "package_url": "https://pypi.org/project/stormcatchments/",
    "platform": null,
    "project_url": "https://pypi.org/project/stormcatchments/",
    "project_urls": {
      "Homepage": "https://github.com/t-ott/stormcatchments"
    },
    "release_url": "https://pypi.org/project/stormcatchments/0.3.1/",
    "requires_dist": [
      "geopandas",
      "networkx",
      "pysheds",
      "rtree",
      "contextily ; extra == 'basemap'",
      "pytest ; extra == 'dev'",
      "matplotlib ; extra == 'plotting'"
    ],
    "requires_python": ">=3.8",
    "summary": "Stormwater network aware catchment delineation",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15981399,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a00d347b97dcaaec8bba6d1fab578bb15303a526ea9d0b298dc89b57a921af24",
          "md5": "91eb7b1d67ed38b14d6326218f62d6dd",
          "sha256": "8436d058bb22df7881a181cfe18226c2b9c91f4999db0e4dd2db14ac55541ba4"
        },
        "downloads": -1,
        "filename": "stormcatchments-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91eb7b1d67ed38b14d6326218f62d6dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25446,
        "upload_time": "2022-12-02T12:07:32",
        "upload_time_iso_8601": "2022-12-02T12:07:32.968637Z",
        "url": "https://files.pythonhosted.org/packages/a0/0d/347b97dcaaec8bba6d1fab578bb15303a526ea9d0b298dc89b57a921af24/stormcatchments-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17e7bd6bc738dc1a6438346be6ef48fdf20f66f59dab06feffac30125da471ea",
          "md5": "e385b39cdcd3aae56a9b233cf35d5287",
          "sha256": "30cf0a591778279e0ab2258c5cb5b3ec8958337c1580a84797b8f51f0e1bd05f"
        },
        "downloads": -1,
        "filename": "stormcatchments-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e385b39cdcd3aae56a9b233cf35d5287",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9318975,
        "upload_time": "2022-12-02T12:07:44",
        "upload_time_iso_8601": "2022-12-02T12:07:44.585401Z",
        "url": "https://files.pythonhosted.org/packages/17/e7/bd6bc738dc1a6438346be6ef48fdf20f66f59dab06feffac30125da471ea/stormcatchments-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299416cc1bb6dae6aafa6849d59ade278e6bd00c87bc19dd9b8ba3f473df5ca6",
          "md5": "11790d46935b28ebd0418d59267525b7",
          "sha256": "376239484a7495f69c4b93ac8f9a461ccdb050ab10de3c117d1b8fc86bc4ba40"
        },
        "downloads": -1,
        "filename": "stormcatchments-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11790d46935b28ebd0418d59267525b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25446,
        "upload_time": "2022-12-03T21:54:16",
        "upload_time_iso_8601": "2022-12-03T21:54:16.239858Z",
        "url": "https://files.pythonhosted.org/packages/29/94/16cc1bb6dae6aafa6849d59ade278e6bd00c87bc19dd9b8ba3f473df5ca6/stormcatchments-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1586fa5808227c7059fbde32463c22694c6a9ce9df676c52a483b7384b56040f",
          "md5": "2f2a47ad5ea9d33b169589add4c1a944",
          "sha256": "b4002d9cf5a675b64ecf701dac278cb6d28dd22d082b7af191e9a9be29fb10c9"
        },
        "downloads": -1,
        "filename": "stormcatchments-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2f2a47ad5ea9d33b169589add4c1a944",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7631436,
        "upload_time": "2022-12-03T21:54:27",
        "upload_time_iso_8601": "2022-12-03T21:54:27.028045Z",
        "url": "https://files.pythonhosted.org/packages/15/86/fa5808227c7059fbde32463c22694c6a9ce9df676c52a483b7384b56040f/stormcatchments-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "299416cc1bb6dae6aafa6849d59ade278e6bd00c87bc19dd9b8ba3f473df5ca6",
        "md5": "11790d46935b28ebd0418d59267525b7",
        "sha256": "376239484a7495f69c4b93ac8f9a461ccdb050ab10de3c117d1b8fc86bc4ba40"
      },
      "downloads": -1,
      "filename": "stormcatchments-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11790d46935b28ebd0418d59267525b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 25446,
      "upload_time": "2022-12-03T21:54:16",
      "upload_time_iso_8601": "2022-12-03T21:54:16.239858Z",
      "url": "https://files.pythonhosted.org/packages/29/94/16cc1bb6dae6aafa6849d59ade278e6bd00c87bc19dd9b8ba3f473df5ca6/stormcatchments-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1586fa5808227c7059fbde32463c22694c6a9ce9df676c52a483b7384b56040f",
        "md5": "2f2a47ad5ea9d33b169589add4c1a944",
        "sha256": "b4002d9cf5a675b64ecf701dac278cb6d28dd22d082b7af191e9a9be29fb10c9"
      },
      "downloads": -1,
      "filename": "stormcatchments-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2f2a47ad5ea9d33b169589add4c1a944",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7631436,
      "upload_time": "2022-12-03T21:54:27",
      "upload_time_iso_8601": "2022-12-03T21:54:27.028045Z",
      "url": "https://files.pythonhosted.org/packages/15/86/fa5808227c7059fbde32463c22694c6a9ce9df676c52a483b7384b56040f/stormcatchments-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}