{
  "info": {
    "author": "Spandan Bemby",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Text Walker\n\n![tests](https://github.com/spandanb/textwalker/actions/workflows/run-tests.yml/badge.svg)\n![tests](https://github.com/spandanb/textwalker/actions/workflows/python-package.yml/badge.svg)\n![tests](https://github.com/spandanb/textwalker/actions/workflows/publish-package.yml/badge.svg)\n[![codecov](https://codecov.io/gh/spandanb/textwalker/branch/main/graph/badge.svg?token=SXS209QVCC)](https://codecov.io/gh/spandanb/textwalker)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## [Documentation](http://www.spandanbemby.com/textwalker/)\n\n## Getting Started\n\n`textwalker` is a simple utility to incrementally parse (un|semi)structured text.\n\nThe `textwalker` API emulates how a complex regular expression is iteratively constructed.\nTypically, when constructing a regex, I'll construct a part of it; test it and build the next part.\n\nConsider trying to parse an SQL table definition:\n\n```\n>>> text = \"\"\"CREATE TABLE dbo.car_inventory\n(\n    cp_car_sk        integer               not null,\n    cp_car_make_id   char(16)              not null,\n)\nWITH (OPTION (STATS = ON))\"\"\"\n\n>>> from text_walker import TextWalker\n>>> tw = TextWalker(text)\n\n>>> tw.walk('CREATE')\n>>> tw.walk('TABLE')\n```\nThe `TextWalker` class is initialized with the `text` to parse. \nThe `walk(pattern)` method consumes and returns the `pattern`. Here, the return value is the literal matched. \nThis `pattern` can be a string representing a:\n- literal, e.g. `foo` \n- character set, with character ranges and individual characters e.g. `[a-z9]`\n- grouping, e.g. `(foo)+`\n\nSee supported grammar [here](#section-grammar).\n\nInternally, when `walk` is invoked the `TextWalker` tracks how much of the input text has been matched. \n\nThis is essentially, the key thought behind the design: by making the text parsing stateful, it can be done incrementally, and this reduces the complexity of the expression for matching text and allows combining with python text processing capabilities.\n\n```\n>>> table_name_match = tw.walk('dbo.[a-z0-9_]+')\n>>> tablename = table_ame_match.replace('dbo.', '')\n>>> print(f'table name is {tablename}')\n\ntable name is car_inventory\n\n>>> tw.walk('\\(')\n\n# now print column names\n>>> cols_text, _ = tw.walk_until('WITH')\n>>> for col_def in cols_text.split(','):\n        col_name = col_def.strip().split(' ')[0]\n        print(f'column name is: {}')\n\ncolumn name is cp_car_sk\ncolumn name is cp_car_make_id\n```\n\nOr trying to parse a phone number, e.g.\n\n```\n>>> from textwalker import TextWalker\n>>> text = \"(+1)123-456-7890\"\n>>> tw = TextWalker(text)\n>>> area_code = tw.walk('(\\\\(\\\\+[0-9]+\\\\))?')\n>>> print(f'area code is {area_code}')\n```\n\nNote, special characters need to be escaped in all contexts.\n\n```\n>>> steps = tw.walk_many(['[0-9]{3,3}', '\\\\-', '[0-9]{3,3}', '\\\\-', '[0-9]{4,4}'])\n>>> print(f'first 3 digits are {steps[0]}; next 3 digits are {steps[2]}; last 3 digits are {steps[4]}')\nfirst 3 digits are 123; next 3 digits are 456; last 3 digits are 7890\n```\n## More Examples \nSee more examples in `.\\examples`\n\n## Installation\nTextwalker is available on PyPI:\n```\npython -m pip install textwalker\n```\n\n## [Grammar](#section-grammar)\n\n### Literals\n\n- Can be any literal string\n```\nfoo\nbar \n123\nx?\n```\n- Can have quantifiers\n\n### Character Sets\n- A character set is defined within a pair of left and right square brackets, `[...]`\n- Can contain ranges, specified via a dash, `[a-z]` or individual chars `[a-z8]`\n- Support quantifiers, `[0-9]{1,3}`\n- NOTE: There are no predefined ranges!\n\n### Groups\n- A group is defined with a pair of parentheses `(...)`\n- A group can contain `Literals`, `Character Sets` and arbitrarily nested `Groups`, `(hello[a-zA-z]+)*`\n\n### Quantifiers\n- zero or more `*`\n- zero or one `?`\n- one or more `+`\n- range `{1,3}`\n\n\n### Special Characters\n- Special characters (below) need to be escaped in all contexts.\n```\n\"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"-\", \"+\", \"*\", \"?\"\n```\n- To escape a character it must be escaped with a double backslash, e.g. left parentheses\n`\\\\(`\n- This need two backslashes, because a single `\\ ` is treated by the python interpreter as an escape on the following character.\n- Even in cases, where a special character is unambiguously non-special, e.g. `[*]`, can only mean match the literal `*` character, it must still be escaped. `[*]` is an invalid expression. \n\n### Limitations/Gotchas/Notes\n- The matching semantics are such that a pattern must fully match to be considered a match. For the `walk` methods `None` means not a match. This is different from a match of zero length, e.g. `(foo)?`   \n- If a quantifier is not specified it must have exactly one match.\n- charset ranges match depend on how lexical comparison is implemented in python\n- only supports case-sensitive search\n- all operators are greedy. This is noteworthy, because in some cases, a non-greedy match on a sub-group would lead to match on the entire e.g. if matching `(ab)*ab`, the text `abab` will be a non match, since the subexpression `(ab)*` will consume the entire text. This can be avoided by, e.g. `(ab){1,1}ab` would match `abab`\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/spandanb/textwalker",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "textwalker",
    "package_url": "https://pypi.org/project/textwalker/",
    "platform": "",
    "project_url": "https://pypi.org/project/textwalker/",
    "project_urls": {
      "Homepage": "https://github.com/spandanb/textwalker"
    },
    "release_url": "https://pypi.org/project/textwalker/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Utility to incrementally parse text",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10291405,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "422fec923968555a80afb68c991d74438ca7d1ac9ad76ed9a201decbb4045646",
          "md5": "a3bb957137dd5182aa98f7cf722c12ef",
          "sha256": "29dc5513f3cc860dc40f9d64147f41146ff08a1a5053bf574aa87f5a500f5024"
        },
        "downloads": -1,
        "filename": "textwalker-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3bb957137dd5182aa98f7cf722c12ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2001,
        "upload_time": "2021-05-04T23:06:54",
        "upload_time_iso_8601": "2021-05-04T23:06:54.090919Z",
        "url": "https://files.pythonhosted.org/packages/42/2f/ec923968555a80afb68c991d74438ca7d1ac9ad76ed9a201decbb4045646/textwalker-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "434400fee88501a11f55a441348ff3c12b0109616aa9959ffd35448f4f2e5f06",
          "md5": "1d54c15b571139e0b24e24d4dbd36b7d",
          "sha256": "698064a4460324d773ab7ae3ef82c963ddc3b70eefb2422e4a51bcac9e4c35d7"
        },
        "downloads": -1,
        "filename": "textwalker-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d54c15b571139e0b24e24d4dbd36b7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2433,
        "upload_time": "2021-05-04T23:06:56",
        "upload_time_iso_8601": "2021-05-04T23:06:56.713717Z",
        "url": "https://files.pythonhosted.org/packages/43/44/00fee88501a11f55a441348ff3c12b0109616aa9959ffd35448f4f2e5f06/textwalker-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b7d61a376740da5708e0d6e3b75d6cd8b8911c0cf7236be6fb7ca5a0864507f",
          "md5": "bc80948780c43fafebda15563f19987f",
          "sha256": "2e0b9cbad46154be963833a4b6697eae24c8e8aac97252efd278dafacd3e205b"
        },
        "downloads": -1,
        "filename": "textwalker-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc80948780c43fafebda15563f19987f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4178,
        "upload_time": "2021-05-07T23:00:13",
        "upload_time_iso_8601": "2021-05-07T23:00:13.167135Z",
        "url": "https://files.pythonhosted.org/packages/7b/7d/61a376740da5708e0d6e3b75d6cd8b8911c0cf7236be6fb7ca5a0864507f/textwalker-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aed484ec16c3a6fadc6c5daa133aec25511512b91f89c79ef74fd09b0466341c",
          "md5": "492a8be76558cd696c443022a8b44e58",
          "sha256": "18eb2994ce32acc6480095349f2f07d9b0b281b602c5dc1ad38f4abdf5f6e5f7"
        },
        "downloads": -1,
        "filename": "textwalker-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "492a8be76558cd696c443022a8b44e58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4703,
        "upload_time": "2021-05-07T23:00:14",
        "upload_time_iso_8601": "2021-05-07T23:00:14.172572Z",
        "url": "https://files.pythonhosted.org/packages/ae/d4/84ec16c3a6fadc6c5daa133aec25511512b91f89c79ef74fd09b0466341c/textwalker-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b7d61a376740da5708e0d6e3b75d6cd8b8911c0cf7236be6fb7ca5a0864507f",
        "md5": "bc80948780c43fafebda15563f19987f",
        "sha256": "2e0b9cbad46154be963833a4b6697eae24c8e8aac97252efd278dafacd3e205b"
      },
      "downloads": -1,
      "filename": "textwalker-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bc80948780c43fafebda15563f19987f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4178,
      "upload_time": "2021-05-07T23:00:13",
      "upload_time_iso_8601": "2021-05-07T23:00:13.167135Z",
      "url": "https://files.pythonhosted.org/packages/7b/7d/61a376740da5708e0d6e3b75d6cd8b8911c0cf7236be6fb7ca5a0864507f/textwalker-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aed484ec16c3a6fadc6c5daa133aec25511512b91f89c79ef74fd09b0466341c",
        "md5": "492a8be76558cd696c443022a8b44e58",
        "sha256": "18eb2994ce32acc6480095349f2f07d9b0b281b602c5dc1ad38f4abdf5f6e5f7"
      },
      "downloads": -1,
      "filename": "textwalker-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "492a8be76558cd696c443022a8b44e58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4703,
      "upload_time": "2021-05-07T23:00:14",
      "upload_time_iso_8601": "2021-05-07T23:00:14.172572Z",
      "url": "https://files.pythonhosted.org/packages/ae/d4/84ec16c3a6fadc6c5daa133aec25511512b91f89c79ef74fd09b0466341c/textwalker-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}