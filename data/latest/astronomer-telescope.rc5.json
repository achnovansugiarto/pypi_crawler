{
  "info": {
    "author": "telescope",
    "author_email": "cse@astronomer.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "  [![Build status](https://github.com/astronomer/telescope/workflows/build/badge.svg?branch=main&event=push)](https://github.com/astronomer/telescope/actions?query=workflow%3Alint-test-build-release)\n  [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n  [![Security: bandit](https://img.shields.io/badge/security-bandit-green.svg)](https://github.com/PyCQA/bandit)\n  [![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/astronomer/telescope/blob/main/.pre-commit-config.yaml)\n  [![Semantic Versions](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--versions-e10079.svg)](https://github.com/astronomer/telescope/releases)\n\n# Telescope\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/astronomer/telescope/main/astro.png\" alt=\"Astronomer Telescope Logo\" />\n</p>\n\n# What is it?\n\nTelescope is a tool to observe distant (or local!) Airflow installations, and gather metadata or other required data.\n\nIt is a CLI that runs on your workstation and accesses remote Airflows to collect a common set of data.\n\nOptionally, it can be installed and run as an Airflow plugin.\n\nTelescope has been purpose-built to help administrators understand their Airflow installations and provide metadata to assist with migrations.\n\n**Main features**\n- Analyze your Airflow deployment and execution environment to provide a snapshot of all configurations.\n- Summarizes Airflow-specific settings (variables, connections, pools, etc.)\n- Generates a report of runtime configurations (airflow.cfg)\n- Generates a DAGs report including code quality metrics, execution statistics and more.\n- Can be run on most deployment environments (Docker, Kubernetes, SSH Remote) and Airflow versions.\n- Security and anonymity are built-in.\n  - Kubernetes and airflow.cfg sensitive values are redacted.\n  - Individual user information and secrets are never accessed.\n  - Reports can be parameterized to obfuscate DAG IDs and filenames.\n\n# Installation Method 1) via Binary\n\nFind and download the executable in [the Telescope Release for the correct version](https://github.com/astronomer/telescope/releases/latest)\n\n- **for Linux (x86_64)**\n```shell\nwget https://github.com/astronomer/telescope/releases/latest/download/telescope-linux-x86_64\nchmod +x telescope-linux-x86_64\n```\n\n- **for Mac (x86_64, not M1 or ARM)**\n```shell\nwget https://github.com/astronomer/telescope/releases/latest/download/telescope-darwin-x86_64\nchmod +x telescope-darwin-x86_64\n```\nNote: For Mac, you will get a Security error when you first run Telescope via the CLI binary - you can bypass this in `System Preferences -> Security & Privacy -> General` and hitting `Allow` \n\n- **for Windows (x86_64)**\n```shell\nwget https://github.com/astronomer/telescope/releases/latest/download/telescope-mingw64_nt-10.0-20348-x86_64.exe\nchmod +x telescope-mingw64_nt-10.0-20348-x86_64.exe\n```\n\n# Installation Method 2) via PIP\n*Note: PIP installation requires Python >= 3.7*\n\n*optionally*, create a virtualenv called `venv` (or anything else ) in the current directory for easy cleanup\n```shell\npython -m venv venv\nsource venv/bin/activate\n```\n\nInstall Telescope using Pip from Github\n\n```shell\npython -m pip install astronomer-telescope \n```\n\n# Quickstart - Kubernetes Autodiscovery Assessment Mode\n\nThis will work if your Airflows are in Kubernetes and were deployed with one of the major Helm charts (\nand `component=scheduler` is used to identify the schedulers). It will use Helm to interrogate the installation, and\nconnect to the Airflow schedulers to gather metadata\n\n```shell\ntelescope --kubernetes --organization-name <My Organization>\n```\nYou should now have a file ending in `*.data.json` - which is an intermediate data payload\n\n# Quickstart - SSH Assessment Mode\nThis will work if your Airflows are on hosts accessible via SSH and SSH is configured to connect to all of these hosts.\nYou can pass any configuration option that a [Fabric Connection object](https://docs.fabfile.org/en/stable/api/connection.html#module-fabric.connection) can take\nCreate a `hosts.yaml` file, like this, enumerating every host:\n```shell\nssh:\n  - host: airflow.foo1.bar.com\n  - host: root@airflow.foo2.bar.com\n  - host: airflow.foo3.bar.com\n    user: root\n    connect_kwargs: {\"key_filename\":\"/full/path/to/id_rsa\"}\n```\n\n```shell\ntelescope -f hosts.yaml --organization-name <My Organization>\n```\nYou should now have a file ending in `*.data.json` - which is an intermediate data payload\n\n# Data Collected\nThe following Data is collected:\n\n## `cluster_info`\nWhen run using `kubernetes`, cluster info is attained from the Nodes - including allocated and max CPU and Memory, number of nodes, and kubelet version\n\n## `verify`\nWhen run using `kubernetes`, Helm chart information for charts named like `astronomer` or `airflow` is fetched, sensitive values are redacted.\n\n## `Airflow Report`\nThis information is saved under the `airflow_report` key, under the `host_type` key and the host key. E.g. `kubernetes.mynamespace|myhost-1234-xyz.airflow_report` or `ssh.my_hostname.airflow_report`\n\nUsing python `airflow_report.pyz` is downloaded and executed on the remote host (the host or container running the airflow scheduler). The performance impact of this report is negligible\n- `airflow.version.version` output to determine Airflow's version\n- `airflow.providers_manager.ProvidersManager`'s output, to determine what providers and versions are installed\n- `socket.gethostname()` to determine the hostname\n- `pkg_resources` to determine installed python packages and versions\n- `airflow.configuration.conf` to determine Airflow configuration settings and what is modified from defaults. Sensitive values are redacted\n- `os.environ` to determine what airflow settings, variables, and connections are set via ENV vars. Names only\n- the `pools` table is retrieved to list Airflow pools and sizes from the Airflow metadata db\n- the `dag` table is inspected from the Airflow metadata db\n  - `dags` are read off disk to attain variable and connection names, utilizing the filepath from the `dags` table\n- the `connection` table is fetched from the Airflow metadata db\n- the `variable` table is fetched from the Airflow metadata db\n- the `ab_user` table is fetched from the Airflow metadata db\n- the `task_instance` table is analyzed from the Airflow metadata db\n\n# Usage\n```shell\n$ telescope --help\nUsage: telescope [OPTIONS]\n\n  Telescope - A tool to observe distant (or local!) Airflow installations, and\n  gather usage metadata\n\nOptions:\n  --version                     Show the version and exit.\n  --local                       Airflow Reporting for local Airflow  [default:\n                                False]\n  --docker                      Autodiscovery and Airflow reporting for local\n                                Docker  [default: False]\n  --kubernetes                  Autodiscovery and Airflow reporting for\n                                Kubernetes  [default: False]\n  -l, --label-selector TEXT     Label selector for Kubernetes Autodiscovery\n                                [default: component=scheduler]\n  --dag-obfuscation             Obfuscate DAG IDs and filenames, keeping first\n                                and last 3 chars; my-dag-name => my-*****ame\n                                [default: False]\n  --dag-obfuscation-fn TEXT     Obfuscate DAG IDs, defining a custom function\n                                that takes a string and returns a string;\n                                'lambda x: x[-5:]' would return only the last\n                                five letters of the DAG ID and fileloc\n  -f, --hosts-file PATH         Hosts file to pass in various types of hosts\n                                (ssh, kubernetes, docker) - See README.md for\n                                sample\n  -p, --parallelism INTEGER     How many cores to use for multiprocessing\n                                [default: (Number CPU)]\n  -n, --organization-name TEXT  Denote who this report belongs to, e.g. a\n                                company name\n  -o, --data-file PATH          Data file to write intermediate gathered data,\n                                can be '-' for stdout\n  --help                        Show this message and exit.\n```\n\n# Requirements\n## Locally - via PIP\n- Python >=3.7\n- `pip`\n\n## Locally - Docker or Kubernetes or SSH Airflow Assessment modes\n- **Docker**: Permissions to Exec Containers, `docker.sock` Access locally\n- **Kubernetes**: Permission to List Nodes and Exec in Pods, `KUBECONFIG` set locally\n- **SSH**: Credentials to connect to all hosts, SSH Access configured locally\n- **Local**: Permission to execute Python locally\n\n## Remote Airflow Requirements\n- Airflow Scheduler >1.10.5\n- Python 3.x\n- Postgresql/Mysql/Sqlite Metadata Database (support not guaranteed for other backing databases)\n- **Kubernetes**: Kubernetes Scheduler has label `component=scheduler` (or `--label-selector` specified)\n- `github.com` access\n\n# Input\n## Local autodiscovery\nEither use `--local` or have an empty `local` key in your hosts file to enable autodiscovery.\nAutodiscovery simply runs the Airflow Report as a process, assuming that an Airflow Scheduler is being run\non the current node.\n\n## Docker autodiscovery\nEither use `--docker` or have an empty `docker` key in your hosts file to enable autodiscovery.\nAutodiscovery searches for containers running locally that contain \"scheduler\" in the name and returns\nthe container_id\n\n- `hosts.yaml`\n```\ndocker:\n```\n\n## Kubernetes autodiscovery\nEither use `--kubernetes` or an empty `kubernetes` in your hosts file to enable autodiscovery.\nAutodiscovery searches for pods running in the Kubernetes cluster defined by `KUBEPROFILE`\nin any namespace, that contain the label `component=scheduler` (or another label defined by `--label-selector`),\nand returns the namespace, name, and container (`scheduler`)\n\n- `hosts.yaml`\n```\nkubernetes:\n```\n\n## Example `hosts.yaml` input\nuse `-f hosts.yaml`\n```\nlocal:\n\ndocker:\n  - container_id: demo9b25c0_scheduler_1\n\nkubernetes:\n  - namespace: astronomer-amateur-cosmos-2865\n    name: amateur-cosmos-2865-scheduler-bfcfbd7b5-dvqqr\n    container: scheduler\n\nssh:\n  - host: airflow.foo1.bar.com\n  - host: root@airflow.foo2.bar.com\n  - host: airflow.foo3.bar.com\n    user: root\n    connect_kwargs: {\"key_filename\":\"/full/path/to/id_rsa\"}\n```\n\n# Output\n## `*.data.json`\nThe name of this file can vary depending on what options were passed to the tool.\nThere is an intermediate output ending in `*.data.json` which contains all data gathered, and is utilized to generate the report outputs.\n\n### Output file includes the following sections:\n\n| Report                    | Description                                                                              |\n|---------------------------|------------------------------------------------------------------------------------------|\n| airflow version report    | Airflow Deployment version                                                               |\n| configuration report      | Airflow runtime configuration (airflow.cfg)                                              |\n| connections report        | List of all Airflow connections (IDs only)                                               |\n| dags report               | List of DAGs, including code quality metrics                                             |\n| env vars report           | List of airflow-related environment variables                                            |\n| hostname report           | Airflow Hostname configuration                                                           |\n| installed packages report | List of all installed packages                                                           |\n| pools report              | List of Airflow pools and associated configuration                                       |\n| providers report          | List of all installed providers                                                          |\n| usage stats report        | Execution statistics (success & failures) over the last 1, 7, 30, 365 days and all time. |\n| user report               | Number of active users over the last 1, 7, 30 and 365 days                               |\n| variables report          | List of all Airflow variables (keys only)                                                |\n\n\n# Extra Functionality\n## Label Selection\n`--label-selector` allows Kubernetes Autodiscovery to locate Airflow Deployments with alternate key/values.\nThe default is `component=scheduler`, however, if your Airflows contain `role=scheduler` instead, you would\nuse `--label-selector \"role=scheduler\"`.\n\n## Airflow Report Command\n`TELESCOPE_AIRFLOW_REPORT_CMD` can be set, normally the default is\n```shell\npython -W ignore -c \"import runpy,os;from urllib.request import urlretrieve as u;a='airflow_report.pyz';u('https://github.com/astronomer/telescope/releases/latest/download/'+a,a);runpy.run_path(a);os.remove(a)\"\n```\n\nThis can be used, for instance, if there is no access to Github on the remote box, or a custom directory is needed to run,\nor environment activation is required ahead of time.\n\nIf your `python` is called something other than `python` (e.g. `python3`):\n```shell\nTELESCOPE_AIRFLOW_REPORT_CMD=$(cat <<'EOF'\npython3 -W ignore -c \"import runpy,os;from urllib.request import urlretrieve as u;a='airflow_report.pyz';u('https://github.com/astronomer/telescope/releases/latest/download/airflow_report.pyz',a);runpy.run_path(a);os.remove(a)\"\nEOF\n) telescope -f hosts.yaml \n```\n\nor if you need to activate a `python` (such as with RedHat Linux) prior to running, and want to copy the telescope Manifest up to the host independently:\n```shell\nscp airflow_report.pyz remote_user@remote_host:airflow_report.pyz\nTELESCOPE_AIRFLOW_REPORT_CMD=\"scl enable rh-python36 python -W ignore -c 'import runpy;a=\\'airflow_report.pyz\\';runpy.run_path(a);os.remove(a)'\" telescope -f hosts.yaml\n```\n\n## DAG Obfuscation\n`DAG ID` and `fileloc` can be obfuscated with the `--dag-obfuscation` command.\nThe default obfuscation keeps the first 3 and last 3 characters and adds a fixed width of `******`. e.g.\n```text\nmy-dag-name => my-*****ame\n```\n\n### Custom Obfuscation Function\nIf a different obfuscation function is desired, a `--dag-obfuscation-function` can be passed,\nwhich needs to be a python function that evaluates to `(str) -> str`. E.g.\n```shell\n--dag-obfuscation-fn=\"lambda x: x[-5:]\"\n```\nwould return only the last five letters of `dag_id` and `fileloc`. E.g.\n```\ndag_id=\"hello_world\" -> \"world\"\nfileloc=\"/a/b/c/d/filepath.py\" -> \"th.py\"\n```\n\n## Optional Environmental Variables\n- `TELESCOPE_KUBERNETES_METHOD=kubectl` - to run with kubectl instead of the python SDK (often for compatibility reasons)\n- `TELESCOPE_REPORT_RELEASE_VERSION=x.y.z` - can be a separate telescope semver release number, to control which report gets run\n- `TELESCOPE_KUBERNETES_AIRGAPPED=true` - executes the airflow report in airgapped mode (i.e copies report binary from local to pod)\n- `LOG_LEVEL=DEBUG` - can be any support Python logging level `[CRITICAL, FATAL, ERROR, WARN, WARNING, INFO, DEBUG, NOTSET]`\n- `TELESCOPE_SHOULD_VERIFY=false` - turn off helm chart collection - required to gather some data about Airflow in Kubernetes\n\n# Alternative Methods \nTelescope can also be installed as an Airflow plugin and has an `AeroscopeOperator` \nThis is helpful in instances where shell access is unable to be acquired - such as with Google Cloud Composer (GCC) or AWS' Managed Apache Airflow (MWAA).\n\nTo install Telescope this way, please review instructions [here](./aeroscope/README.md).\n\n\n# Install from Source\nIf neither the [pip installation method](#installation-method-2-via-pip)\nor [binary installation](#installation-method-1-via-binary)\nmethods work - you can download the source and execute directly as a python module\n\n## As a zip\n```shell\nwget https://github.com/astronomer/telescope/archive/refs/heads/main.zip && unzip main.zip\ncd telescope-main\npython -m telescope ...\n```\n\n## With git\n```shell\ngit clone https://github.com/astronomer/telescope.git\ncd telescope\npython -m telescope ...\n```\n\n# Compatibility Matrix\nTelescope is being tested against the following Airflow versions:\n```shell\n\"apache/airflow:2.3.4\"\n\"apache/airflow:2.2.4\"\n\"apache/airflow:2.1.3\"\n\"apache/airflow:1.10.15\"\n\"apache/airflow:1.10.10\"\n\"bitnami/airflow:1.10.2\"\n```\n\nTelescope is tested with the following Metadata Database Backends:\n- (automated) PostgreSQL, SQLite\n- (manually) MySQL, SQLServer\n\nTelescope is tested on the following versions of Python:\n```\n\"3.5\", \"3.9\", \"3.10\"\n```\n\nTelescope is tested on the following Operating Systems:\n- Ubuntu\n- Mac (arm64, amd64)\n- Windows\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/astronomer/telescope",
    "keywords": "",
    "license": "Proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "astronomer-telescope",
    "package_url": "https://pypi.org/project/astronomer-telescope/",
    "platform": null,
    "project_url": "https://pypi.org/project/astronomer-telescope/",
    "project_urls": {
      "Homepage": "https://github.com/astronomer/telescope",
      "Repository": "https://github.com/astronomer/telescope"
    },
    "release_url": "https://pypi.org/project/astronomer-telescope/3.1.0/",
    "requires_dist": [
      "importlib_metadata (>=4.5.0,<5.0.0); python_version < \"3.8\"",
      "rich (>=11.1.0,<12.0.0)",
      "kubernetes (>=21.7,<22.0)",
      "fabric (>=2.6.0,<3.0.0)",
      "docker (>=5.0.3,<6.0.0)",
      "invoke (>=1.6.0,<2.0.0)",
      "PyYAML (>=6.0,<7.0)",
      "click (>=8.0.3,<9.0.0)",
      "lazyimport (>=0.0.4,<0.0.5)",
      "halo (>=0.0.31,<0.0.32)",
      "retrying (>=1.3.3,<2.0.0)"
    ],
    "requires_python": ">=3.6.2,<3.11",
    "summary": "A tool to observe distant (or local!) Airflow installations, and gather metadata or other required data.",
    "version": "3.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15767566,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "205b9410a5c536a362216322996af454ccad3fdd33d2d87967546dd3d1bed3ad",
          "md5": "46ba726a7673c82b0439f41183bc428c",
          "sha256": "ecf85ec546af3046aade99415eceb2b9a0e09ddaf573f4141b0b7e608164f47d"
        },
        "downloads": -1,
        "filename": "astronomer-telescope-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46ba726a7673c82b0439f41183bc428c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<3.11",
        "size": 24415,
        "upload_time": "2022-09-30T19:42:01",
        "upload_time_iso_8601": "2022-09-30T19:42:01.628259Z",
        "url": "https://files.pythonhosted.org/packages/20/5b/9410a5c536a362216322996af454ccad3fdd33d2d87967546dd3d1bed3ad/astronomer-telescope-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd3372b7201686de6ae4f880202eb3b06756e511bab4988ba9e3b0b2bc7cb401",
          "md5": "94b99d377d038147e6ee8f73cfd98b64",
          "sha256": "9b8b5bce289d221f535050e24e7d6a0f150bf69b83358e178bff60046d40b69f"
        },
        "downloads": -1,
        "filename": "astronomer-telescope-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94b99d377d038147e6ee8f73cfd98b64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<3.11",
        "size": 24421,
        "upload_time": "2022-09-30T16:34:53",
        "upload_time_iso_8601": "2022-09-30T16:34:53.693215Z",
        "url": "https://files.pythonhosted.org/packages/bd/33/72b7201686de6ae4f880202eb3b06756e511bab4988ba9e3b0b2bc7cb401/astronomer-telescope-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd20f8a63046047e2563433457e5fd9b94dc8dcef6d0f5a35b723265e43e7ab4",
          "md5": "95c9f35d5a830d0ef6d8744874543087",
          "sha256": "307cb01b9d3284763604a69005a045e380455a9438e229bbccb5cb0720bbc336"
        },
        "downloads": -1,
        "filename": "astronomer-telescope-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95c9f35d5a830d0ef6d8744874543087",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<3.11",
        "size": 24426,
        "upload_time": "2022-09-30T17:23:39",
        "upload_time_iso_8601": "2022-09-30T17:23:39.331146Z",
        "url": "https://files.pythonhosted.org/packages/cd/20/f8a63046047e2563433457e5fd9b94dc8dcef6d0f5a35b723265e43e7ab4/astronomer-telescope-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30ee3923dc65c5a324e06c6f0ea2fb7b98ed6f10dc66aac9dedf7f517d879e5f",
          "md5": "4e2843b34c762da3ac01b20bcf898de8",
          "sha256": "550d41437028b33d5d248b441433beee63238311e9649e50662b09b319024334"
        },
        "downloads": -1,
        "filename": "astronomer-telescope-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4e2843b34c762da3ac01b20bcf898de8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<3.11",
        "size": 24415,
        "upload_time": "2022-09-30T20:05:20",
        "upload_time_iso_8601": "2022-09-30T20:05:20.097813Z",
        "url": "https://files.pythonhosted.org/packages/30/ee/3923dc65c5a324e06c6f0ea2fb7b98ed6f10dc66aac9dedf7f517d879e5f/astronomer-telescope-3.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d4ece93382f40d206b1b1d6c831f0960f587138214e645485e53a8b6df40eb9",
          "md5": "2a531dbfc55025359599544020c0d2f6",
          "sha256": "f67c91b82debbbafcf2586a36e1ae01bae932e49ad4d4be017ea02edff518da7"
        },
        "downloads": -1,
        "filename": "astronomer_telescope-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a531dbfc55025359599544020c0d2f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<3.11",
        "size": 24511,
        "upload_time": "2022-11-14T21:46:05",
        "upload_time_iso_8601": "2022-11-14T21:46:05.340912Z",
        "url": "https://files.pythonhosted.org/packages/4d/4e/ce93382f40d206b1b1d6c831f0960f587138214e645485e53a8b6df40eb9/astronomer_telescope-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d4ece93382f40d206b1b1d6c831f0960f587138214e645485e53a8b6df40eb9",
        "md5": "2a531dbfc55025359599544020c0d2f6",
        "sha256": "f67c91b82debbbafcf2586a36e1ae01bae932e49ad4d4be017ea02edff518da7"
      },
      "downloads": -1,
      "filename": "astronomer_telescope-3.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2a531dbfc55025359599544020c0d2f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.2,<3.11",
      "size": 24511,
      "upload_time": "2022-11-14T21:46:05",
      "upload_time_iso_8601": "2022-11-14T21:46:05.340912Z",
      "url": "https://files.pythonhosted.org/packages/4d/4e/ce93382f40d206b1b1d6c831f0960f587138214e645485e53a8b6df40eb9/astronomer_telescope-3.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}