{
  "info": {
    "author": "Fabian Ying",
    "author_email": "fabian.m.ying@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Agent-based model for COVID-19 transmission in supermarkets. \nThis code accompanies the paper [\"Modelling COVID-19 transmission in supermarkets using an agent-based model\"](https://arxiv.org/abs/2010.07868).\n\n# Installation\n\nOur package relies mainly on [SimPy](https://simpy.readthedocs.io/en/latest/), which requires Python >= 3.6.\n\n```bash\n> pip install covid19-supermarket-abm\n```  \n\n# Example\n\nIn the example below, we use the example data included in the package to simulate a day in the fictitious store\ngiven the parameters below.\n\n```python\nfrom covid19_supermarket_abm.utils.load_example_data import load_example_store_graph, load_example_paths\nfrom covid19_supermarket_abm.path_generators import get_path_generator\nfrom covid19_supermarket_abm.simulator import simulate_one_day\n\n# Set parameters\nconfig = {'arrival_rate': 2.55,  # Poisson rate at which customers arrival\n           'traversal_time': 0.2,  # mean wait time per node\n           'num_hours_open': 14,  # store opening hours\n           'infection_proportion': 0.0011,  # proportion of customers that are infectious\n         }\n\n# load synthetic data\nzone_paths = load_example_paths()\nG = load_example_store_graph()\n\n# Create a path generator which feeds our model with customer paths\npath_generator_function, path_generator_args = get_path_generator(zone_paths=zone_paths, G=G)\n\n# Simulate a day and store results in results\nresults_dict = simulate_one_day(config, G, path_generator_function, path_generator_args)\n```\n\nThe results from our simulations are stored in `results_dict`.\n\n```python\nprint(list(results_dict.keys()))\n```\nOutput:\n```python\n['num_cust', 'num_S', 'num_I', 'total_time_with_infected', 'num_contacts_per_cust', 'num_cust_w_contact', 'mean_num_cust_in_store', 'max_num_cust_in_store', 'num_contacts', 'shopping_times', 'mean_shopping_time', 'num_waiting_people', 'mean_waiting_time', 'store_open_length', 'df_num_encounters', 'df_time_with_infected', 'total_time_crowded', 'exposure_times']\n```\n\nSee below for their description.\n\nKey | Description\n------------ | -------------\n`num_cust `| Total number of customers\n`num_S` | Number of susceptible customers\n`num_I` | Number of infected customers\n`total_exposure_time` | Total exposure time\n`num_contacts_per_cust` | Number of contacts with infectious customers per susceptible customer\n`num_cust_w_contact` | Number of susceptible customers which have at least one contact with an infectious customer\n`mean_num_cust_in_store` | Mean number of customers in the store during the simulation\n`max_num_cust_in_store` | Maximum number of customers in the store during the simulation\n`num_contacts` | Total number of contacts between infectious customers and susceptible customers\n`df_num_encounters_per_node` | Dataframe which contains the the number of encounters with infectious customers for each node\n`shopping_times` | Array that contains the length of all customer shopping trips\n`mean_shopping_time` | Mean of the shopping times\n`num_waiting_people` | Number of people who are queueing outside at every minute of the simulation (when the number of customers in the store is restricted)\n`mean_waiting_time` | Mean time that customers wait before being allowed to enter (when the number of customers in the store is restricted)\n`store_open_length` | Length of the store's opening hours\n`df_exposure_time_per_node` | Dataframe containing the exposure time per node\n`total_time_crowded` | Total time that nodes were crowded (when there are more than `thres` number of customers in a node. Default value of `thres` is 3)\n`exposure_times` | List of exposure times of customers (only recording positive exposure times)\n\n # Getting started\n\n As we can see from the above example, our model requires four inputs. \n  ```python\n results_dict = simulate_one_day(config, G, path_generator_function, path_generator_args)\n```\n\n These inputs are:\n\n (1) Simulation configurations: `config`\n\n (2) A store network: `G`\n\n (3) A path generator: `path_generator_function`\n\n (4) Arguments for the path generator: `path_generator_args`\n\n We discuss each of these inputs in the following subsections.\n\n ## Simulation configurations\n\n We input the configuration using a dictionary.\n The following keys are accepted:\n\n\n ### Mandatory config keys\n\n Config key | Description\n------------ | -------------\n`arrival_rate`| Rate at which customers arrive to the store (in customers per minute)\n`traversal_time`| Mean wait time at each node (in minutes)\n`num_hours_open`| Number of hours that the store is open\n`infection_proportion`| Proportion of customers that are infected\n\n ### Optional config keys\n\n Config key | Description\n------------ | -------------\n`max_customers_in_store`| Maximum number of customers allowed in store (Default: `None`, i.e., disabled)\n `with_node_capacity` | Set to `True` to limit the number of customers in each node. (Default: `False`). WARNING: This may cause simulations not to terminate due to gridlocks. \n `node_capacity` | The number of customers allowed in each node, if  `with_node_capacity` is set to `True`. (Default: `2`)\n `logging_enabled` | Set to `True` to start logging simulations. (Default: `False`). The logs can be accessed in `results_dict['logs']`. Also if sanity checks fail, logs will be saved to file. \n\n\n ## Store network\n\n We use the [NetworkX](https://networkx.org/documentation/stable/) package to create our store network.\n\n First, we need to specify the (x,y) coordinates of each node. \n So in a very simple example, we have four nodes, arranged in a square at with coordinates (0,0), (0,1), (1,0), and (1,1).   \n\n ```python\npos = {0: (0,0), 1: (0,1), 2: (1,0), 3: (1,1)}\n``` \nNext, we need to specify the edges in the network; in other words, which nodes are connected to each other.\n\n ```python\nedges = [(0,1), (1,3), (0,2), (2,3)]\n```\n\n We create the graph as follows.\n ```python\nfrom covid19_supermarket_abm.utils.create_store_network import create_store_network\nG = create_store_network(pos, edges)\n```\n\n To visualize your network, you can use `nx.draw_networkx`:\n ```python\nimport networkx as nx\nnx.draw_networkx(G, pos=pos, node_color='y')\n```\n ## Path generator and arguments\n\nThe path generator is what its name suggests: \nIt is a [generator](https://wiki.python.org/moin/Generators) that yields full customer paths.\n\nThere are two* path generators implemented in this package.\n\n(1) Empirical path generator\n\n(2) Synthetic path generator\n\nYou can also implement your own path generator and pass it.\n\nTo use one of the implemented path generators, \nit is often easiest to use the `get_path_generator` function from the `covid19_supermarket_abm.path_generators` module.\n\n```python\nfrom covid19_supermarket_abm.path_generators import get_path_generator\npath_generator_function, path_generator_args = get_path_generator(path_generation, **args) \n```\n\n\\*There is a [third generator](https://github.com/fabianying/covid19-supermarket-abm/blob/12504eabfad03e2ffe0a6c9aac230d19e24c492a/covid19_supermarket_abm/path_generators.py#L196) implemented, but for most purposes, the first two are likely preferable.\n\n### Empirical path generator \nThe empirical path generator takes as input a list of full paths \n(which can be empirical paths or synthetically created paths) and yields random paths from that list.\nNote that all paths must be valid paths in the store network or the simulation will fail at runtime.\n\nTo use it, simply \n```python\nfrom covid19_supermarket_abm.path_generators import get_path_generator\nfull_paths = [[0, 1, 3], [0, 2, 3]]  # paths in the store network\npath_generator_function, path_generator_args = get_path_generator(path_generation='empirical', full_paths=full_paths) \n```\n\nAlternatively, you can input a list of what we call *zone paths* and the store network `G`.\nA zone path is a sequence of nodes that a customer visits, but where consecutive nodes in the sequence need not be adjacent.\nIn the paper, this sequence represents the item locations of where a customer bought items along with the \nentrance, till and exit node that they visited.\nThe `get_path_generator` function automatically converts these zone paths to full paths by choosing shortest paths between\nconsecutive nodes in the zone path.\n\n```python\nfrom covid19_supermarket_abm.path_generators import get_path_generator\nzone_paths = [[0, 3], [0, 2, 1], [0, 3, 2]]  # note that consecutive nodes need not be adjacent!\npath_generator_function, path_generator_args = get_path_generator(path_generation='empirical', G=G, zone_paths=zone_paths)\n```\n\n ### Synthetic path generator\n\n\n The synthetic path generator yields random paths as follows.\n\n (1) First, it samples the size K of the shopping basket using a [log-normal](https://en.wikipedia.org/wiki/Log-normal_distribution)\n  random variable with parameter `mu` and `sigma` \n (the mean and standard deviation of the underlying normal distribution).\n (See [Sorensen et al, 2017](https://www.sciencedirect.com/science/article/abs/pii/S0969698916303186))\n\n (2) Second, it chooses a random entrance node as the first node $v_1$ in the path.\n\n (3) Third, it samples K random item nodes, chosen uniformly at random with replacement from item_nodes, which we denote by\n $v_2, ... v_{K+1}$.\n\n (4) Fourth, it samples a random till node and exit node, which we denote by $v_{K+2}$ and $v_{K+3}$.\n The sequence $v_1, ..., v_{K+3}$ is a node sequence where the customer bought items, along the the entrance, till and exit\n nodes that they visited.\n\n (5) Finally, we convert this sequence to a full path on the network using the shortest paths between consecutive nodes\n in the sequence.\n\n For more information, see the Data section in our [paper](https://arxiv.org/pdf/2010.07868.pdf).\n\n ```python\nfrom covid19_supermarket_abm.path_generators import get_path_generator\nfrom covid19_supermarket_abm.utils.create_synthetic_baskets import get_all_shortest_path_dicts\nimport networkx as nx\nentrance_nodes = [0]\ntill_nodes = [2]\nexit_nodes = [3]\nitem_nodes = [1]\nmu = 0.07\nsigma = 0.76\nshortest_path_dict = get_all_shortest_path_dicts(G)\nsynthetic_path_generator_args = [mu, sigma, entrance_nodes, till_nodes, exit_nodes, item_nodes, shortest_path_dict]\npath_generator_function, path_generator_args = get_path_generator(path_generation='synthetic',\n                                                            synthetic_path_generator_args=synthetic_path_generator_args)\n```\n\n Note that this path generator may be quite slow. In the paper, we first pre-generated paths 100,000 paths \n and then used the Empirical path generator with the pre-generated paths.  \n\n # Questions?\n\n This is work in progress, but feel free to ask any questions by raising an issue or contacting me directly under \n [fabian.m.ying@gmail.com](fabian.m.ying@gmail.com).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fabianying/covid19-supermarket-abm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "covid19-supermarket-abm",
    "package_url": "https://pypi.org/project/covid19-supermarket-abm/",
    "platform": "",
    "project_url": "https://pypi.org/project/covid19-supermarket-abm/",
    "project_urls": {
      "Homepage": "https://github.com/fabianying/covid19-supermarket-abm"
    },
    "release_url": "https://pypi.org/project/covid19-supermarket-abm/0.0.5/",
    "requires_dist": [
      "pandas (>=0.24.2)",
      "numpy (>=1.16.2)",
      "simpy (>=4.0.1)",
      "matplotlib (>=3.1.0)",
      "networkx (>=2.5)",
      "tqdm",
      "pyarrow (>=0.16.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Agent-based model for Covid-19 transmission in supermarkets",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9801023,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2780930beeebbd02741cd1bf953b6d28f5f645457a2be149fea4f0e0c8c71d1",
          "md5": "bd31e8c8098c9e0e335248fc9a729d28",
          "sha256": "79f2720bc5b6b55ef754926514dc7172e40afd7452bc5db79e435939f69fdf45"
        },
        "downloads": -1,
        "filename": "covid19_supermarket_abm-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd31e8c8098c9e0e335248fc9a729d28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64486,
        "upload_time": "2020-10-12T20:05:56",
        "upload_time_iso_8601": "2020-10-12T20:05:56.806456Z",
        "url": "https://files.pythonhosted.org/packages/a2/78/0930beeebbd02741cd1bf953b6d28f5f645457a2be149fea4f0e0c8c71d1/covid19_supermarket_abm-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f1662d3b72f7470984c0f44ed1c11673eabd2deb56e93ca737f8937c138a04e",
          "md5": "34a2481e87d3caaf0518c86d8c38ed79",
          "sha256": "5fef7f366d019b192ba44f91cb35b6b8b45b476052426f8a7c6d08e30af2aa4c"
        },
        "downloads": -1,
        "filename": "covid19-supermarket-abm-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "34a2481e87d3caaf0518c86d8c38ed79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48215,
        "upload_time": "2020-10-12T20:05:59",
        "upload_time_iso_8601": "2020-10-12T20:05:59.813067Z",
        "url": "https://files.pythonhosted.org/packages/4f/16/62d3b72f7470984c0f44ed1c11673eabd2deb56e93ca737f8937c138a04e/covid19-supermarket-abm-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed3e9851b2119b6642e728d3d04b234a4eeb0e5632f650906ec91e3273118846",
          "md5": "c2eda7c180ccfc7a5944c24b5ef41d71",
          "sha256": "435aa170dba1ece3ed126e95775c2d9cdb189e30d086bdd31327696863466f6a"
        },
        "downloads": -1,
        "filename": "covid19_supermarket_abm-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2eda7c180ccfc7a5944c24b5ef41d71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64486,
        "upload_time": "2020-10-12T20:07:44",
        "upload_time_iso_8601": "2020-10-12T20:07:44.295469Z",
        "url": "https://files.pythonhosted.org/packages/ed/3e/9851b2119b6642e728d3d04b234a4eeb0e5632f650906ec91e3273118846/covid19_supermarket_abm-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f313f5ac41a48bb240a82318243883280e58ff1cc873296db4e01bfe6f9773c8",
          "md5": "3f0fa0ac0966b736c3169380be02830a",
          "sha256": "151ae80b989eb01cae0d158227a30d29058e7e3005a8679a04cdc086e8d86f39"
        },
        "downloads": -1,
        "filename": "covid19-supermarket-abm-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3f0fa0ac0966b736c3169380be02830a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48213,
        "upload_time": "2020-10-12T20:07:45",
        "upload_time_iso_8601": "2020-10-12T20:07:45.735691Z",
        "url": "https://files.pythonhosted.org/packages/f3/13/f5ac41a48bb240a82318243883280e58ff1cc873296db4e01bfe6f9773c8/covid19-supermarket-abm-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deec2a9aa8e766c8ddf05a0c6adb9b2f551b0eb3cf0e0fc962c1775310eec604",
          "md5": "4db5af3089005ae696bfb76fd55610dc",
          "sha256": "3f641d141fed7190023935ffbacb0f13536fde196fa9a97bab9a4d668890f325"
        },
        "downloads": -1,
        "filename": "covid19_supermarket_abm-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4db5af3089005ae696bfb76fd55610dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 64516,
        "upload_time": "2020-10-16T16:03:52",
        "upload_time_iso_8601": "2020-10-16T16:03:52.955259Z",
        "url": "https://files.pythonhosted.org/packages/de/ec/2a9aa8e766c8ddf05a0c6adb9b2f551b0eb3cf0e0fc962c1775310eec604/covid19_supermarket_abm-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "188cfb4cb34ff6339eae1a28a01870ec4c3ce99e5fee3ae90cb05b85c1b31e4d",
          "md5": "994a0eb5adc566be901ebbc53be6526c",
          "sha256": "7735e530fb47a4bf2d5e8dcd752bdc56dec5057469e88c0a39f10086229b749b"
        },
        "downloads": -1,
        "filename": "covid19-supermarket-abm-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "994a0eb5adc566be901ebbc53be6526c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 48260,
        "upload_time": "2020-10-16T16:03:54",
        "upload_time_iso_8601": "2020-10-16T16:03:54.792377Z",
        "url": "https://files.pythonhosted.org/packages/18/8c/fb4cb34ff6339eae1a28a01870ec4c3ce99e5fee3ae90cb05b85c1b31e4d/covid19-supermarket-abm-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc9684e8d8635b1a3593b45867d3d5121574fb411da92be81b9d6f9971395a6b",
          "md5": "ee13e922ac6a27177faebc929faebf72",
          "sha256": "95a1313b04dc24774001c961f1b82e1c76db646e8059010e32231187f53e8d7a"
        },
        "downloads": -1,
        "filename": "covid19_supermarket_abm-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee13e922ac6a27177faebc929faebf72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72615,
        "upload_time": "2021-03-11T09:12:20",
        "upload_time_iso_8601": "2021-03-11T09:12:20.720777Z",
        "url": "https://files.pythonhosted.org/packages/cc/96/84e8d8635b1a3593b45867d3d5121574fb411da92be81b9d6f9971395a6b/covid19_supermarket_abm-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01368017bc15c739f53cd277893abc246ece7c561d3e6d44449ea9d263b32589",
          "md5": "9777f0942b7a2176a9c633423303eb49",
          "sha256": "7d81e8abb6bcafd261003e15b7ef23e2b850f7b75b73dbccb24df2ad40897d99"
        },
        "downloads": -1,
        "filename": "covid19-supermarket-abm-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9777f0942b7a2176a9c633423303eb49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 55543,
        "upload_time": "2021-03-11T09:12:22",
        "upload_time_iso_8601": "2021-03-11T09:12:22.954877Z",
        "url": "https://files.pythonhosted.org/packages/01/36/8017bc15c739f53cd277893abc246ece7c561d3e6d44449ea9d263b32589/covid19-supermarket-abm-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8649bb9166d86d49b19d9c2587938478f4c7aa81d989bb808238485ce1e1781",
          "md5": "6ceb50e05c8a42120f880b338f2a49b4",
          "sha256": "311d91a5af405b8af24db3431410f01d81e32bd5f5c014b4bd33cd690398ddab"
        },
        "downloads": -1,
        "filename": "covid19_supermarket_abm-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ceb50e05c8a42120f880b338f2a49b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72694,
        "upload_time": "2021-03-17T19:56:43",
        "upload_time_iso_8601": "2021-03-17T19:56:43.100739Z",
        "url": "https://files.pythonhosted.org/packages/b8/64/9bb9166d86d49b19d9c2587938478f4c7aa81d989bb808238485ce1e1781/covid19_supermarket_abm-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d922c947c4dd56c7251d60fe933a820144ad508058ea25787ece90f7a209c1d",
          "md5": "278d4e157e94fdf1264964f3e0288bb6",
          "sha256": "628107f4491ef0c718c7ff19ebab0e5c8f8e868277426cd39245a485092c2971"
        },
        "downloads": -1,
        "filename": "covid19-supermarket-abm-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "278d4e157e94fdf1264964f3e0288bb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 55629,
        "upload_time": "2021-03-17T19:56:46",
        "upload_time_iso_8601": "2021-03-17T19:56:46.351926Z",
        "url": "https://files.pythonhosted.org/packages/7d/92/2c947c4dd56c7251d60fe933a820144ad508058ea25787ece90f7a209c1d/covid19-supermarket-abm-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8649bb9166d86d49b19d9c2587938478f4c7aa81d989bb808238485ce1e1781",
        "md5": "6ceb50e05c8a42120f880b338f2a49b4",
        "sha256": "311d91a5af405b8af24db3431410f01d81e32bd5f5c014b4bd33cd690398ddab"
      },
      "downloads": -1,
      "filename": "covid19_supermarket_abm-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ceb50e05c8a42120f880b338f2a49b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 72694,
      "upload_time": "2021-03-17T19:56:43",
      "upload_time_iso_8601": "2021-03-17T19:56:43.100739Z",
      "url": "https://files.pythonhosted.org/packages/b8/64/9bb9166d86d49b19d9c2587938478f4c7aa81d989bb808238485ce1e1781/covid19_supermarket_abm-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d922c947c4dd56c7251d60fe933a820144ad508058ea25787ece90f7a209c1d",
        "md5": "278d4e157e94fdf1264964f3e0288bb6",
        "sha256": "628107f4491ef0c718c7ff19ebab0e5c8f8e868277426cd39245a485092c2971"
      },
      "downloads": -1,
      "filename": "covid19-supermarket-abm-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "278d4e157e94fdf1264964f3e0288bb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 55629,
      "upload_time": "2021-03-17T19:56:46",
      "upload_time_iso_8601": "2021-03-17T19:56:46.351926Z",
      "url": "https://files.pythonhosted.org/packages/7d/92/2c947c4dd56c7251d60fe933a820144ad508058ea25787ece90f7a209c1d/covid19-supermarket-abm-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}