{
  "info": {
    "author": "",
    "author_email": "Jan-Michael Rye <jan-michael.rye@inria.fr>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "---\ntitle: README\nauthor: Jan-Michael Rye\n---\n\n![Hydronaut logo](https://gitlab.inria.fr/jrye/hydronaut/-/raw/main/img/hydronaut_logo.svg)\n\n# Synopsis\n\nHydronaut is a framework for exploring the depths of hyperparameter space with [Hydra](https://hydra.cc/docs/intro/) and [MLflow](https://mlflow.org/). Its goal is to encourage and facilitate the use of these tools while handling the sometimes unexpected complexity of using them together. Users benefit from both without having to worry about the implementation and are thus able to focus on developing their models.\n\nHydra allows the user to organize all hyperparameters via simple YAML files with support for runtime overrides via the command-line. It also allows the user to explore the hyperparameter space with automatic sweeps that are easily parallelized. These sweeps can either explore all possible parameter combinations or they can use any of the [optimizing sweepers supported by Hydra](https://hydra.cc/docs/intro/) such as the [Optuna Sweeper plugin](https://hydra.cc/docs/plugins/optuna_sweeper/). The hyperparameters used for every run are automatically saved for future reference and reproducibility.\n\nMLflow is a platform for tracking experiments and their results, among other things. The library provides numerous [logging functions](https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.log_artifact) to track hyperparameters, metrics, artifacts and models of every run so that nothing is ever lost or forgotten. The results can be readily perused, compared and managed via both command-line and web interfaces. It can also be used to push trained models to registries to share with others.\n\n# Installation\n\nInstall the [Hydronaut package](https://pypi.org/project/hydronaut) from the [Python Package Index](https://pypi.org/) using any standard Python package manager, e.g.\n\n~~~sh\n# Uncomment the following 2 lines to create and activate a virtual environment.\n# python -m venv venv\n# source venv/bin/activate\npip3 install --upgrade hydronaut\n~~~\n\nIt can also be installed from source with any standard Python package manager that supports [pyproject.toml](https://peps.python.org/pep-0621/) files. For example, to install it with pip, either locally or in a virtual environment, run the following commands:\n\n~~~sh\ngit clone --recursive https://gitlab.inria.fr/jrye/hydronaut\ncd hydronaut\n# Uncomment the following 2 lines to create and activate a virtual environment.\n# python -m venv venv\n# source venv/bin/activate\npip install --upgrade .\n~~~\n\nNote that the Hydronaut Git repository contains Git submodules. It should be recursively cloned with `git clone --recursive https://gitlab.inria.fr/jrye/hydronaut` to check out all requirements. Alternatively, after cloning the repository non-recursively one can run `git submodule update --init --recursive` to fully initialize the repository. This can also be accomplished with the script [hydronaut-initialize.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-initialize.sh), which is provided for convenience.\n\nThe project also provides the script [hydronaut-install_in_venv.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-install_in_venv.sh) which can be used to install the package in a virtual environment. Internally, the script uses `pip-install.sh` from the utility-scripts submodule which can circumvent a bug in the way that`hatch-vcs` handles Git submodules.\n\n## Submodules\n\n* [utility-scripts](https://gitlab.inria.fr/jrye/utility-scripts) - Required for some of the scripts included in the Git repository but not required for the Python package itself.\n\n\n# Usage\n\nThere are only two requirements for running an experiment with Hydronaut:\n\n* A Hydra YAML configuration file.\n* A subclass of the Hydronaut `Experiment` class, which is defined in [hydronaut.experiment](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/src/hydronaut/experiment.py).\n\nOnce the configuration file and `Experiment` subclass have been created, the experiment can be run with `hydronaut-run` or `hydronaut-run_in_venv.sh` (see below).\n\n\n## Tutorials\n\nA series of Jupyter notebooks has been prepared to serve as an introduction and a tutorial to Hydronaut. The Git repository is available [here](https://gitlab.inria.fr/jrye/hydronaut-tutorial) and the exported slides are available [here](https://jrye.gitlabpages.inria.fr/hydronaut-tutorial/).\n\n\n## Examples\n\nExamples of varying complexity are provided in the [examples directory](https://gitlab.inria.fr/jrye/hydronaut/-/tree/main/examples). The [dummy example](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/examples/dummy/README.md) provides the simplest albeit least interesting example of a minimal setup. Peruse the others to get an idea of how to create more interesting experiments.\n\n\n## Hydra Configuration File\n\nBy default, Hydronaut expects a Hydra configuration file at the subpath `conf/config.yaml` relative to the current working directory. A different configuration file can be specified by setting the `HYDRONAUT_CONFIG` environment variable if necessary. The value of this variable will be interpreted as a subpath within the `conf` directory of the working directory. For example, `export HYDRONAUT_CONFIG=config-test.yaml` will load `conf/config-test.yaml` relative to the current directory.\n\nHydronaut uses [Hydra](https://hydra.cc/), which in turn uses [OmegaConf](https://github.com/omry/omegaconf) configuration files. The [Hydra start guide](https://hydra.cc/docs/intro/) provides a good and quick introduction to the functionality provided by Hydra. The basic idea is that you should set all of your experiment's parameters in the configuration file and then retrieve them from the configuration object in your code. This will grant the following advantages:\n\n* All parameters can be modified in one place without changing the code.\n* All parameters can be overridden from the command line.\n* The effects of different parameters and parameter combinations can be explored automatically using Hydra's sweeper plugins, including automatic optimization.\n* The exact parameters used for each run are stored systematically in structured output files along with all artifacts and metrics that your experiment creates.\n* Only a single object needs to be passed around in your code instead of an ever-changing list of parameters.\n\nIn addition to the reserved Hydra fields (`hydra`, `defaults`), Hydronaut adds an `experiment` field with some required values:\n\n~~~yaml\nexperiment:\n  name: <experiment name>                # required\n  description: <experiment description>  # required\n  exp_class: <module>:<class>            # required\n  params: <experiment parameters>\n  python:\n    paths: <list of directories to add to the Python system path>\n  mlflow: <MLflow configuration>\n  environment: <dict of environment variable names and values>\n~~~\n\nIt is strongly recommended that all experiment parameters be nested under `experiment.params` but this is not enforced programmatically unless `experiment/hf_experiment` is added to the `defaults` list in the configuration file.\n\nThe best way to get started is to browse the [tutorial](https://gitlab.inria.fr/jrye/hydronaut-tutorial) and peruse the configuration files in the provided [examples](https://gitlab.inria.fr/jrye/hydronaut/-/tree/main/examples). `hydronaut-init` can also be used to initialize a directory for a new experiment. It will create a configuration file and a subclass of the `Experiment` class that the user can use as a starting point. It accepts some options for initializing the configuration file with settings for sweepers and launchers. See `hydronaut-init --help` for details. \n\nFor further details, consult the [Hydra](https://hydra.cc/docs/intro/) and [OmegaConf](https://omegaconf.readthedocs.io/en/) documentation, e.g.\n\n* [command-line flags](https://hydra.cc/docs/advanced/hydra-command-line-flags/)\n* [defaults list](https://hydra.cc/docs/advanced/defaults_list/)\n* [extending configs](https://hydra.cc/docs/patterns/extending_configs/)\n* [extended override syntax](https://hydra.cc/docs/1.2/advanced/override_grammar/extended/)\n* [override syntax](https://hydra.cc/docs/advanced/override_grammar/basic/)\n* [tab completion](https://hydra.cc/docs/tutorials/basic/running_your_app/tab_completion/)\n* [variable interpolation](https://omegaconf.readthedocs.io/en/latest/usage.html#variable-interpolation)\n\n\n### Environment Variable Configuration\n\nEnvironment variables can be defined in the configuration file under `experiment.environment`. This should be a dictionary mapping environment variable names (strings) to values (strings). These settings will only take effect after the Hydra configuration file is loaded but before MLflow is initialized and can thus be used to configure MLflow (see below).\n\n~~~yaml\nexperiment:\n    # ...\n    environment:\n        # e.g.\n        MLFLOW_TRACKING_URI: https://example.com/mlflow/\n        MLFLOW_TRACKING_PASSWORD: gToVTMvhH0C6B6yR\n        # ...\n~~~\n\n### MLflow Configuration\n\nTracking, artifact and registry servers for MLflow are configured via environment variables. These can either be set by the user prior to invoking `hydronaut-run` or via the configuration file as explained above. The configuration is exactly the same as when using MLflow directly.\n\nIn addition to the environment variables supported by MLflow and its eventual dependencies such as Boto3 (required for AWS support), the configuration file can also be used to pass additional arguments to [mlflow.start_run](https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=start_run#mlflow.start_run) via the field `experiment.mlflow.start_run`. This must be a dictionary mapping valid `start_run` keyword argument names to their values, e.g.\n\n~~~yaml\nexperiment:\n    # ...\n    mlflow:\n        start_run:\n            tags:\n                tag1: one\n                tag2: two\n~~~\n\n#### Standard Environment Variables\n\nThe user should consult the relevant documentation for supported environment variables, e.g.\n\n* [MLflow Tracking](https://mlflow.org/docs/latest/tracking.html)\n* [Boto3 environment variables for AWS credentials](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#environment-variables)\n\nFor example, to set up a remote tracking server with an S3 artifact server backend, the following environment variables may be required:\n\n* MLFLOW_TRACKING_URI\n* MLFLOW_TRACKING_USERNAME\n* MLFLOW_TRACKING_PASSWORD\n* MLFLOW_S3_ENDPOINT_URL\n* AWS_ACCESS_KEY_ID\n* AWS_SECRET_ACCESS_KEY\n* AWS_DEFAULT_REGION\n* AWS_SESSION_TOKEN\n\nThe specific requirements will depend on the target setup.\n\n#### Custom Environment Variables\n\n* `MLFLOW_REGISTRY_URI`: If set, the value will be used to configure the MLflow registry URI, which otherwise defaults to the value of the tracking URI.\n\n### Resolvers\n\nResolvers are functions that can be used to insert values into fields of the configuration file, such as the current date (`${now:%Y-%m-%d}`) or the number of available CPU cores (`${n_cpu:}`). Hydronaut provides some custom resolvers in addition to the ones provided by [OmegaConf](https://omegaconf.readthedocs.io/en/latest/custom_resolvers.html#built-in-resolvers) and [Hydra](https://hydra.cc/docs/configure_hydra/intro/#resolvers-provided-by-hydra). \n\n\n| Resolver | Description |\n| :-- | :-- |\n| n_cpu | The number of available logical CPUs: `${n_cpu:}`. An optional argument may also be given to divide the number of available CPUs by an integer, which may be useful when assigning CPUs to jobs, e.g. `${n_cpu: 4}` or `{n_cpu: ${n_jobs}}`. |\n| n_gpu_pytorch | The number of available GPUs to PyTorch: `${n_gpu_pytorch:}`. If PyTorch is not installed then this will always return 0. This resolver accepts a divisor with the same interpretation as `n_cpu`. |\n| max | Returns the maximum value of its arguments: `${max: ${n_cpu:} ${n_gpu_pytorch}}`. |\n| min | Returns the minimum value of its arguments: `${min: ${n_cpu:} ${n_gpu_pytorch}}`. |\n\nSee [hydronaut.hydra.resolvers](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/src/hydronaut/hydra/resolvers.py) for implementation details and comments.\n\n\n## Experiment Subclasses\n\nHydronaut will invoke a subclass of [hydronaut.experiment.Experiment](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/src/hydronaut/experiment.py) as an entry point to the user's code. The only thing that the user must define in their subclass is the `__call__()` method (see below). It is entirely up to the user what this function does as only the return value will be used by Hydronaut. The user can invoke other Python code, external commands, remote services, etc.\n\nThe configuration object will be available through the parent class's `config` attribute, from which the user should retrieve the hyperparameters defined in the configuration file.\n\nHere are the main methods of interest to users when subclassing the `Experiment` class:\n\n* `__call__()` (required) - This method accepts no arguments and returns 1 or more float values which should represent the target score or loss of the experiment. The return value will be tracked in MLflow under the name \"Objective Value\" and it will be the value optimized by any configured optimizers. When returning multiple values, the optimizer must be configured accordingly. For example, see the Optuna plugin's [Multi-Objective Optimization example](https://hydra.cc/docs/plugins/optuna_sweeper/#example-2--multi-objective-optimization).\n\n* `setup()` (optional) - This method accepts no arguments and returns None. It should be used to prepare everything needed before invoking `__call__()`, such as downloading and preparing datasets, initializing remote resources, etc.\n\n* `__init__(config)` (optional) - This method accepts the Hydra/OmegaConf configuration object and returns None. If overridden, it should invoke `super().__init__(config)` to ensure proper setup.\n\nThe parent `Experiment` class also provides several MLflow logging methods for convenience. These are documented [here](https://jrye.gitlabpages.inria.fr/hydronaut/hydronaut.html#module-hydronaut.experiment).\n\nHydronaut will determine which `Experiment` subclass to load via the configuration file's `experiment.exp_class` field. The value of this field is a string with the format `<module>:<class>` where `<module>` is the Python module containing the subclass and `<class>` is its name. Python modules and packages that are not already on the system path can be made importable by adding their containing directories to the `experiment.python.paths` list in the configuration file.\n\nSee the [dummy example](https://gitlab.inria.fr/jrye/hydronaut/-/tree/main/examples/dummy) for an example of a very simple configuration file and `Experiment` subclass with only one module. The other examples and the [tutorial](https://gitlab.inria.fr/jrye/hydronaut-tutorial) will demonstrate real-life examples.\n\n\n## Commands\n\nThe following commands are installed with the Python package.\n\n\n### hydronaut-run\n\nRun `hydronaut-run` (equivalent to `python -m hydronaut.run`) in the working directory to load the configuration file and run the experiment. After the script has started, run `mlflow ui` in the same directory and then open the URL that it shows in a web browser. All of the experiments results will appear under the name given to the experiment in the configuration file.\n\n`hydronaut-run` accepts all of [Hydra's command-line flags](https://hydra.cc/docs/advanced/hydra-command-line-flags/). For example, to show Hydra information, run `hydronaut-run --info`.\n\n~~~sh\n# Usage:\nhydronaut-run [<hydra arguments>]\n\n# For example:\nhydronaut-run --cfg job\nhydronaut-run --multirun experiment.params.foo=42\n~~~\n\n\n\n### hydronaut-init\n\nHydronaut also provides a script named `hydronaut-init` which will generate a commented configuration file and an Experiment subclass skeleton under the current working directory which can be used as a starting point for a new experiment.\n\nSee `hydronaut-init --help` for available options.\n\n\n\n## API Documentation\n\nThe [Sphinx](https://www.sphinx-doc.org/en/master/)-generated online API documentation is available here: <https://jrye.gitlabpages.inria.fr/hydronaut/>.\n\n\n\n## Scripts\n\nThe following convenience scripts are provided in the source repository for common operations.\n\n### hydronaut-initialize.sh\n\n[hydronaut-initialize.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-initialize.sh) is just a convenience script for recursively checking out the submodules. It may be extended later.\n\n~~~sh\n# Usage:\nhydronaut-initialize.sh\n~~~\n\n\n\n### hydronaut-install_in_venv.sh\n\n[hydronaut-install_in_venv.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-install_in_venv.sh) will install Hydronaut in a virtual environment. If the virtual environment does not exist then it will be created.\n\nSee `hydronaut-install_in_venv.sh -h` for details.\n\n\n\n\n### hydronaut-lint.sh\n\n[hydronaut-lint.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-lint.sh) will report warnings and errors in the Hydronaut source files and examples.\n\n~~~sh\n# Usage:\nhydronaut-lint.sh\n~~~\n\n\n\n### hydronaut-rsync-results.sh\n\n[hydronaut-rsync-results.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-rsync-results.sh) will transfer files that result from an experiment in the source directory to a destination using rsync. It can be used to retrieve results from a cluster, for example.\n\n~~~sh\n# Usage:\nhydronaut-rsync-results.sh [<rsync options>] <rsync destination>\n~~~\n\n\n\n### hydronaut-run_in_venv.sh\n\n[hydronaut-run_in_venv.sh](https://gitlab.inria.fr/jrye/hydronaut/-/blob/main/scripts/hydronaut-run_in_venv.sh) is a wrapper around `hydronaut-run` that will first set up a virtual environment and install Hydronaut before running `hydronaut-run` in the current directory. If the current directory contains a `pyproject.toml` or `requirements.txt` file, they will also be installed in the virtual environment before running `hydronaut-run`.\n\nSee `hydronaut-run_in_venv.sh -h` for details.\n\n\n## MLflow\n\nHydronaut only uses a fraction of the full functionality of MLflow. For example, beyond tracking your experiments, it can also be used to package and distribute your code via standard platforms to facilitate collaboration with others. The interested user should consult the [MLflow documentation](https://mlflow.org/docs/latest/index.html) to get an idea of what is possible.\n\nMost of the MLflow functionality is available via the [command-line interface](https://mlflow.org/docs/latest/cli.html) (`mlflow`). For additional functionality the user may also be interested in [MLflow Extra](https://gitlab.inria.fr/jrye/mlflow-extra).\n\n### Useful Examples\n\n~~~sh\n# Find an experiment ID.\nmlflow experiments search\n\n# Export all of its parameters and metrics to a CSV file\nmlflow experiments csv -x <ID>\n~~~\n\n\n# Troubleshooting\n\n## CUDA/NVCC Errors With PyTorch\n\nCheck that the version of PyTorch is compatible with the one installed on the system:\n\n~~~sh\n# System CUDA version\nnvcc -V\n\n# PyTorch CUDA version\npython -c 'import torch; print(torch.version.cuda)'\n~~~\n\nIf the versions are mismatched, consult the [PyTorch Start Locally guide](https://pytorch.org/get-started/locally/) for commands to install a compatible version in a virtual environment. If PyTorch is already installed in the current (virtual) environment, append `--upgrade` to the install command (e.g. `pip install --upgrade ...`).\n\n## Hydra Joblib Launcher Plugin And PyTorch DataLoader Threads\n\nThe [Hydra Joblib Launcher plugin](https://hydra.cc/docs/plugins/joblib_launcher/) is currently not compatible with [PyTorch DataLoader worker processes](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader). Either disable the Joblib launcher or set the number of worker processes to 0 when instantiating DataLoaders (`num_workers=0`).\n\n## Hydra Configuration In Subprocesses\n\nDue to limitations in Hydra's support for subprocesses, it is usually necessary to re-initialize the Hydra configuration in subprocesses such as PyTorch DataLoaders running as separate workers. Hydronaut provides the [configure_hydra](https://jrye.gitlabpages.inria.fr/hydronaut/hydronaut.hydra.html?highlight=configure_hydra#hydronaut.hydra.config.configure_hydra) function to facilitate this.\n\n~~~python\nfrom hydronaut.hydra.config import configure_hydra\n# ...\nconfigure_hydra(from_env=True)\n~~~\n\nThe configuration uses environment variables that are set during initialization of the [Experiment](https://jrye.gitlabpages.inria.fr/hydronaut/hydronaut.html?highlight=experiment#hydronaut.experiment.Experiment) base class.\n\n## YAML Errors When Sweeping Strings\n\nAttempting to sweep strings from the configuration file, for example with\n\n~~~yaml\nhydra:\n  sweeper:\n    params:\n      ++experiment.params.foo: \"a b\", \"c d\", \"e f\"\n~~~\n\nwill result in YAML block-parsing errors:\n\n~~~\nyaml.parser.ParserError: while parsing a block mapping\n  in ...\nexpected <block end>, but found ','\n  in ...\n~~~\n\nThis occurs due to a limitation of the YAML parser used by Hydra, which expected the rest of the line to be a string value when the value starts with a quotation mark. Either remove the quotes from the value and use \"\\\\\" to escape special characters and spaces (e.g. `++experiment.params.foo: a\\ b, c\\ d, e\\ f`), or use the `choice` function (e.g. `++experiment.params.foo: choice(\"a b\", \"c d\", \"e f\")`). The `choice` sweep function is documented [here](https://hydra.cc/docs/1.2/advanced/override_grammar/extended/#sweeps).\n\n# Further Reading\n\n## Optuna\n\n* [Optuna website](https://optuna.org/)\n* [Hydra Optuna Sweeper plugin documentation](https://hydra.cc/docs/plugins/optuna_sweeper/)\n* [Multi-objective Optimization with Optuna](https://hydra.cc/docs/plugins/optuna_sweeper/#example-2--multi-objective-optimization)\n\n## PyTorch Lighting\n\n* [Introduction](https://towardsdatascience.com/from-pytorch-to-pytorch-lightning-a-gentle-introduction-b371b7caaf09)\n* [Callbacks](https://pytorch-lightning.readthedocs.io/en/stable/extensions/callbacks.html)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hydronaut",
    "package_url": "https://pypi.org/project/hydronaut/",
    "platform": null,
    "project_url": "https://pypi.org/project/hydronaut/",
    "project_urls": {
      "Documentation": "https://jrye.gitlabpages.inria.fr/hydronaut/",
      "Source": "https://gitlab.inria.fr/jrye/hydronaut"
    },
    "release_url": "https://pypi.org/project/hydronaut/2023.10/",
    "requires_dist": [
      "hydra-colorlog",
      "hydra-core",
      "hydra-joblib-launcher",
      "hydra-optuna-sweeper",
      "mlflow",
      "optuna",
      "pytorch-lightning; extra == 'full'",
      "torch; extra == 'full'"
    ],
    "requires_python": ">=3.6",
    "summary": "A framework for exploring the depths of hyperparameter space with Hydra and MLflow.",
    "version": "2023.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17430159,
  "releases": {
    "2023.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0c095e34762a3156b070014d641b9d807e7de3e39a4188fa2c1d0fa63411c88",
          "md5": "dd3ad4be6924218c1a5045d90c9ad12b",
          "sha256": "fb0c2e59c5aa3d9d4e3898db5305516e0297c747926083e50bd1425e9100029f"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd3ad4be6924218c1a5045d90c9ad12b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25682,
        "upload_time": "2023-01-13T23:30:23",
        "upload_time_iso_8601": "2023-01-13T23:30:23.465199Z",
        "url": "https://files.pythonhosted.org/packages/c0/c0/95e34762a3156b070014d641b9d807e7de3e39a4188fa2c1d0fa63411c88/hydronaut-2023.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49fefeae0f4316d7614376af77fb9d13e3b6f58d6068098fc6c67a0c8c5cb443",
          "md5": "fc7b0a972e7ce090b09e72c9244889d2",
          "sha256": "0487ae24ac4e15144a411ea11cf20afa963015e7efab75c61957416892b7eb3b"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc7b0a972e7ce090b09e72c9244889d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30877,
        "upload_time": "2023-01-13T23:30:25",
        "upload_time_iso_8601": "2023-01-13T23:30:25.145003Z",
        "url": "https://files.pythonhosted.org/packages/49/fe/feae0f4316d7614376af77fb9d13e3b6f58d6068098fc6c67a0c8c5cb443/hydronaut-2023.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d92dbaa87c491c1b2f303c0ae96900333fb4c29ef36b71ae06dfbc7746e9545",
          "md5": "b98e528a4fb6ba94ba632768e45af03a",
          "sha256": "916f662a034e5a5e2d516f80b18a66f4d9f0a42f56ee3e1f539e0afb3aeddb84"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b98e528a4fb6ba94ba632768e45af03a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28577,
        "upload_time": "2023-03-24T11:19:52",
        "upload_time_iso_8601": "2023-03-24T11:19:52.534065Z",
        "url": "https://files.pythonhosted.org/packages/3d/92/dbaa87c491c1b2f303c0ae96900333fb4c29ef36b71ae06dfbc7746e9545/hydronaut-2023.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ef4d2df715add53ae8fccafb3bdd912fbf98371cc01ae797f786e0044ecf776",
          "md5": "f1a6d425e404bba8ea48b1ba8b957a70",
          "sha256": "403b1f94be7d2d068d2058544704f79c42c876ebc24b764661d2e27224a48858"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f1a6d425e404bba8ea48b1ba8b957a70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34715,
        "upload_time": "2023-03-24T11:19:54",
        "upload_time_iso_8601": "2023-03-24T11:19:54.729189Z",
        "url": "https://files.pythonhosted.org/packages/6e/f4/d2df715add53ae8fccafb3bdd912fbf98371cc01ae797f786e0044ecf776/hydronaut-2023.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c143d7f0bead9da73bd530f63c9f6650de4e78426e4cd417b8294373af779281",
          "md5": "6434ba680ed716d5c501c5f255195cb1",
          "sha256": "5dc1bbc73c1d09e3ef8bf04bfc42e0f8569e66f28051e8aff66ddb0904602925"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6434ba680ed716d5c501c5f255195cb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25698,
        "upload_time": "2023-01-14T13:14:09",
        "upload_time_iso_8601": "2023-01-14T13:14:09.387267Z",
        "url": "https://files.pythonhosted.org/packages/c1/43/d7f0bead9da73bd530f63c9f6650de4e78426e4cd417b8294373af779281/hydronaut-2023.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "295342f177034ed9c91319f7c7bfc92dde4308fc81b59e8b021e2b7bf4279b21",
          "md5": "397df235a6c9e9ffcad531c899869fdd",
          "sha256": "f781e71a0d721589757c0fb4982095e3d7e3c9a2b9c705657a0ec5fe9e4d3dbf"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.2.tar.gz",
        "has_sig": false,
        "md5_digest": "397df235a6c9e9ffcad531c899869fdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31094,
        "upload_time": "2023-01-14T13:14:11",
        "upload_time_iso_8601": "2023-01-14T13:14:11.150471Z",
        "url": "https://files.pythonhosted.org/packages/29/53/42f177034ed9c91319f7c7bfc92dde4308fc81b59e8b021e2b7bf4279b21/hydronaut-2023.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b70cce6065379630c215fb4db188c26bd14f0f720b2716b0af5b56a22ca00ea8",
          "md5": "3217ebffe0dd39657f233b369c3a5e45",
          "sha256": "1754f13c534057afb8f91e8c7bae5e7bbddc8bd36abf814646304975b60a6a0f"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3217ebffe0dd39657f233b369c3a5e45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25753,
        "upload_time": "2023-01-16T13:48:24",
        "upload_time_iso_8601": "2023-01-16T13:48:24.066611Z",
        "url": "https://files.pythonhosted.org/packages/b7/0c/ce6065379630c215fb4db188c26bd14f0f720b2716b0af5b56a22ca00ea8/hydronaut-2023.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1de63b815ac13e40155c4d8394337cb9c024cc64d169e967658a076eb80fce79",
          "md5": "e564d7d8d2f1537ec496af0f50520d0e",
          "sha256": "5e469edbd337b4c51a8eb8e9cc990efb0842cd45463123bbd313b0f0af5fa8f8"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e564d7d8d2f1537ec496af0f50520d0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30518,
        "upload_time": "2023-01-16T13:48:26",
        "upload_time_iso_8601": "2023-01-16T13:48:26.239071Z",
        "url": "https://files.pythonhosted.org/packages/1d/e6/3b815ac13e40155c4d8394337cb9c024cc64d169e967658a076eb80fce79/hydronaut-2023.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bff464ae74029ea3d244a2baeb12708e6d97fc7992094e12636bde22a934adf",
          "md5": "df4873e67519c0d187376944887b71a2",
          "sha256": "cc013090f9f46bd95d45dad1c5299ef563bab1618726268d93025226d2c0cf98"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df4873e67519c0d187376944887b71a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25754,
        "upload_time": "2023-01-17T08:18:57",
        "upload_time_iso_8601": "2023-01-17T08:18:57.118916Z",
        "url": "https://files.pythonhosted.org/packages/4b/ff/464ae74029ea3d244a2baeb12708e6d97fc7992094e12636bde22a934adf/hydronaut-2023.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85667d9c1d48a10b83baae33e05e735a718e3bc79a0a3f26e70387fd1b186fd9",
          "md5": "49e0f5886b422a929c7396424305b5e1",
          "sha256": "4afd83689d25f8089211d0f07fa7f61cabbe34123e86d0a15376f5f8a65cefcb"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.4.tar.gz",
        "has_sig": false,
        "md5_digest": "49e0f5886b422a929c7396424305b5e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31942,
        "upload_time": "2023-01-17T08:18:59",
        "upload_time_iso_8601": "2023-01-17T08:18:59.073912Z",
        "url": "https://files.pythonhosted.org/packages/85/66/7d9c1d48a10b83baae33e05e735a718e3bc79a0a3f26e70387fd1b186fd9/hydronaut-2023.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7304ad648e74326d65d9caa5af9be0db2757c614ebcc655659766071e9bf7a50",
          "md5": "54ef1d2b583371a1dd1de8cc750d9666",
          "sha256": "4aa5d2a2ff6c6b54cc827fe5ede21c21a9a857776536f0898e68d79205e715ec"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54ef1d2b583371a1dd1de8cc750d9666",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27539,
        "upload_time": "2023-01-18T17:28:40",
        "upload_time_iso_8601": "2023-01-18T17:28:40.126132Z",
        "url": "https://files.pythonhosted.org/packages/73/04/ad648e74326d65d9caa5af9be0db2757c614ebcc655659766071e9bf7a50/hydronaut-2023.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96ca39dc5867a654cddf8a86f5c572211071a883d689b1b3301a4a3fe0682865",
          "md5": "17318448ad759f22f1b0682fea41b2e1",
          "sha256": "7eea4fe957009563432bdc27a1f7e140789cb05b7a3107cbc64a2b20145b2ffa"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.5.tar.gz",
        "has_sig": false,
        "md5_digest": "17318448ad759f22f1b0682fea41b2e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33617,
        "upload_time": "2023-01-18T17:28:41",
        "upload_time_iso_8601": "2023-01-18T17:28:41.768971Z",
        "url": "https://files.pythonhosted.org/packages/96/ca/39dc5867a654cddf8a86f5c572211071a883d689b1b3301a4a3fe0682865/hydronaut-2023.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84600fdecc0105f6f3e10c85f2cbba2c07376a7f59a64b892ae289a75c1d4bec",
          "md5": "05fa02da61e94b3dec79ee89ff48dcc4",
          "sha256": "e6476e46fcd469f8bee57a406644d70fbbc8864b2551b0063c27bc94516b53b1"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05fa02da61e94b3dec79ee89ff48dcc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27918,
        "upload_time": "2023-01-31T11:11:04",
        "upload_time_iso_8601": "2023-01-31T11:11:04.350363Z",
        "url": "https://files.pythonhosted.org/packages/84/60/0fdecc0105f6f3e10c85f2cbba2c07376a7f59a64b892ae289a75c1d4bec/hydronaut-2023.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbd61d87bc1a9606977eb8999ceb40b58a8f9de3dfc21214d36c7b35adcd5114",
          "md5": "89075ad3aa096eac44a23393dcd8677a",
          "sha256": "2ffd2e441586836c5210d41d66570d71439041e100d9cecf05cd1bedfadf4c59"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.6.tar.gz",
        "has_sig": false,
        "md5_digest": "89075ad3aa096eac44a23393dcd8677a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33933,
        "upload_time": "2023-01-31T11:11:06",
        "upload_time_iso_8601": "2023-01-31T11:11:06.585567Z",
        "url": "https://files.pythonhosted.org/packages/bb/d6/1d87bc1a9606977eb8999ceb40b58a8f9de3dfc21214d36c7b35adcd5114/hydronaut-2023.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60475dd5f055afcce625f17324e0aeb4b51c72374d5b8d12b19eaf89de7dea21",
          "md5": "674da4f5e030a032ef2b181d920da01d",
          "sha256": "9dfd2f4ce768c2ed278ff66bf081bc418281f7382d9af9c11a3eb894d8edf403"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "674da4f5e030a032ef2b181d920da01d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28277,
        "upload_time": "2023-02-13T19:19:48",
        "upload_time_iso_8601": "2023-02-13T19:19:48.228485Z",
        "url": "https://files.pythonhosted.org/packages/60/47/5dd5f055afcce625f17324e0aeb4b51c72374d5b8d12b19eaf89de7dea21/hydronaut-2023.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92bb91ad7f77f3fcf87ceec9ce43e4088422f35633d6d2fc185267e16fc85175",
          "md5": "4d5cd0a80906835018fdc9528ed1af73",
          "sha256": "facd286672e72e049468556fa03974b6b5b3dbc022aac05381c9354648a9affb"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.7.tar.gz",
        "has_sig": false,
        "md5_digest": "4d5cd0a80906835018fdc9528ed1af73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34353,
        "upload_time": "2023-02-13T19:19:49",
        "upload_time_iso_8601": "2023-02-13T19:19:49.664155Z",
        "url": "https://files.pythonhosted.org/packages/92/bb/91ad7f77f3fcf87ceec9ce43e4088422f35633d6d2fc185267e16fc85175/hydronaut-2023.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3f22c5511b62b0ce2088ab91782cb0b68b4e3ec706e9c271ea66b7b08dc0554",
          "md5": "f2de5c66054f8cf10eecebfe22c62d69",
          "sha256": "e71880cdcdff19826d239c29527a948bcef96e431eafa571852e6147be560798"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2de5c66054f8cf10eecebfe22c62d69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28274,
        "upload_time": "2023-03-22T14:02:53",
        "upload_time_iso_8601": "2023-03-22T14:02:53.706878Z",
        "url": "https://files.pythonhosted.org/packages/e3/f2/2c5511b62b0ce2088ab91782cb0b68b4e3ec706e9c271ea66b7b08dc0554/hydronaut-2023.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d7eb225a7a7a2ffb86b4ed3fe056e172c078f041e79eabad986817c4a68a007",
          "md5": "5319fa48d70f9971e2c5ed583966ee35",
          "sha256": "48ca6761b29c4000f97ab48d4e3952b4faa19d1cfffce223a82e4c8fa8dbbe9c"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5319fa48d70f9971e2c5ed583966ee35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34407,
        "upload_time": "2023-03-22T14:02:55",
        "upload_time_iso_8601": "2023-03-22T14:02:55.720775Z",
        "url": "https://files.pythonhosted.org/packages/9d/7e/b225a7a7a2ffb86b4ed3fe056e172c078f041e79eabad986817c4a68a007/hydronaut-2023.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2023.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c32ca92dc9e62318acb6a580c3d6c7493c4ee977598766629438ae01fa6afd4",
          "md5": "8a6a5f8099759a687a05398b2536dfb4",
          "sha256": "019e4483a1998bf965eeeeccee1f12bd92a863a95f9a87044fadd3af7db0ae82"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a6a5f8099759a687a05398b2536dfb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28272,
        "upload_time": "2023-03-22T23:09:51",
        "upload_time_iso_8601": "2023-03-22T23:09:51.043955Z",
        "url": "https://files.pythonhosted.org/packages/6c/32/ca92dc9e62318acb6a580c3d6c7493c4ee977598766629438ae01fa6afd4/hydronaut-2023.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d59c4998d8baa4060422ab6762f749beca1991fee8049c534d779d8abda658d",
          "md5": "e01efeb17e21031fa5379b26e452edfe",
          "sha256": "6cd32699c84741ceeee168bd8c5db2281df14b4227d5bffadaa639ae389a4b0b"
        },
        "downloads": -1,
        "filename": "hydronaut-2023.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e01efeb17e21031fa5379b26e452edfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34412,
        "upload_time": "2023-03-22T23:09:54",
        "upload_time_iso_8601": "2023-03-22T23:09:54.221248Z",
        "url": "https://files.pythonhosted.org/packages/3d/59/c4998d8baa4060422ab6762f749beca1991fee8049c534d779d8abda658d/hydronaut-2023.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d92dbaa87c491c1b2f303c0ae96900333fb4c29ef36b71ae06dfbc7746e9545",
        "md5": "b98e528a4fb6ba94ba632768e45af03a",
        "sha256": "916f662a034e5a5e2d516f80b18a66f4d9f0a42f56ee3e1f539e0afb3aeddb84"
      },
      "downloads": -1,
      "filename": "hydronaut-2023.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b98e528a4fb6ba94ba632768e45af03a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28577,
      "upload_time": "2023-03-24T11:19:52",
      "upload_time_iso_8601": "2023-03-24T11:19:52.534065Z",
      "url": "https://files.pythonhosted.org/packages/3d/92/dbaa87c491c1b2f303c0ae96900333fb4c29ef36b71ae06dfbc7746e9545/hydronaut-2023.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ef4d2df715add53ae8fccafb3bdd912fbf98371cc01ae797f786e0044ecf776",
        "md5": "f1a6d425e404bba8ea48b1ba8b957a70",
        "sha256": "403b1f94be7d2d068d2058544704f79c42c876ebc24b764661d2e27224a48858"
      },
      "downloads": -1,
      "filename": "hydronaut-2023.10.tar.gz",
      "has_sig": false,
      "md5_digest": "f1a6d425e404bba8ea48b1ba8b957a70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34715,
      "upload_time": "2023-03-24T11:19:54",
      "upload_time_iso_8601": "2023-03-24T11:19:54.729189Z",
      "url": "https://files.pythonhosted.org/packages/6e/f4/d2df715add53ae8fccafb3bdd912fbf98371cc01ae797f786e0044ecf776/hydronaut-2023.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}