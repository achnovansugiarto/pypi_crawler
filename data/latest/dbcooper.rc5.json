{
  "info": {
    "author": "Michael Chow",
    "author_email": "mc_al_github@fastmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# dbcooper-py\n\n[![CI](https://github.com/machow/dbcooper-py/actions/workflows/ci.yml/badge.svg)](https://github.com/machow/dbcooper-py/actions/workflows/ci.yml)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/machow/dbcooper-py/HEAD)\n\nThe dbcooper package turns a database connection into a collection of functions,\nhandling logic for keeping track of connections and letting you take advantage of\nautocompletion when exploring a database.\n\nIt's especially helpful to use when authoring database-specific Python packages,\nfor instance in an internal company package or one wrapping a public data source.\n\nFor the R version see [dgrtwo/dbcooper](https://github.com/dgrtwo/dbcooper).\n\n## Installation\n\n```\npip install dbcooper\n```\n\n## Example\n\n### Initializing the functions\n\nThe dbcooper package asks you to create the connection first.\nAs an example, we'll use the Lahman baseball database package (`lahman`).\n\n\n```python\nfrom sqlalchemy import create_engine\nfrom dbcooper.data import lahman_sqlite\n\n# connect to sqlite\nengine = create_engine(\"sqlite://\")\n\n# load the lahman data into the \"lahman\" schema\nlahman_sqlite(engine)\n```\n\nNext we'll set up dbcooper\n\n\n```python\nfrom dbcooper import DbCooper\n\ndbc = DbCooper(engine)\n```\n\nThe `DbCooper` object contains two important things:\n\n* Accessors to fetch specific tables.\n* Functions for interacting with the underlying database.\n\n### Using table accessors\n\nIn the example below, we'll use the `\"Lahman\".\"Salaries\"` table as an example.\nBy default, dbcooper makes this accessible as `.lahman_salaries`.\n\n**Plain** `.lahman_salaries` prints out table and column info, including types and descriptions.\n\n\n```python\n# show table and column descriptions\ndbc.lahman_salaries\n```\n\n\n\n\n<h3> salaries </h3>\n<p> (No table description.) </p>\n<table>\n<thead>\n<tr><th>name    </th><th>type  </th><th>description  </th></tr>\n</thead>\n<tbody>\n<tr><td>index   </td><td>BIGINT</td><td>             </td></tr>\n<tr><td>yearID  </td><td>BIGINT</td><td>             </td></tr>\n<tr><td>teamID  </td><td>TEXT  </td><td>             </td></tr>\n<tr><td>lgID    </td><td>TEXT  </td><td>             </td></tr>\n<tr><td>playerID</td><td>TEXT  </td><td>             </td></tr>\n<tr><td>salary  </td><td>BIGINT</td><td>             </td></tr>\n</tbody>\n</table>\n\n\n\nNote that sqlite doesn't support table and columnn descriptions, so these sections\nare empty.\n\n**Calling** `.lahman_salaries()` fetches a lazy version of the data.\n\n\n\n```python\ndbc.lahman_salaries()\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n       index  yearID teamID lgID   playerID  salary\n    0      0    1985    ATL   NL  barkele01  870000\n    1      1    1985    ATL   NL  bedrost01  550000\n    2      2    1985    ATL   NL  benedbr01  545000\n    3      3    1985    ATL   NL   campri01  633333\n    4      4    1985    ATL   NL  ceronri01  625000\n    # .. may have more rows\n\n\n\nNote that this data is a siuba `LazyTbl` object, which you can use to analyze the data.\n\n\n```python\nfrom siuba import _, count\n\ndbc.lahman_salaries() >> count(over_100k = _.salary > 100_000)\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n       over_100k      n\n    0       True  25374\n    1      False   1054\n    # .. may have more rows\n\n\n\n### Using database functions\n\n* `.list()`: Get a list of tables\n* `.tbl()`: Access a table that can be worked with using `siuba`.\n* `.query()`: Perform a SQL query and work with the result.\n* `._engine`: Get the underlying sqlalchemy engine.\n\nFor instance, we could start by finding the names of the tables in the Lahman database.\n\n\n```python\ndbc.list()\n```\n\n\n\n\n    ['lahman.allstar_full',\n     'lahman.appearances',\n     'lahman.awards_managers',\n     'lahman.awards_players',\n     'lahman.awards_share_managers',\n     'lahman.awards_share_players',\n     'lahman.batting',\n     'lahman.batting_post',\n     'lahman.college_playing',\n     'lahman.fielding',\n     'lahman.fielding_of',\n     'lahman.fielding_ofsplit',\n     'lahman.fielding_post',\n     'lahman.hall_of_fame',\n     'lahman.home_games',\n     'lahman.managers',\n     'lahman.managers_half',\n     'lahman.parks',\n     'lahman.people',\n     'lahman.pitching',\n     'lahman.pitching_post',\n     'lahman.salaries',\n     'lahman.schools',\n     'lahman.series_post',\n     'lahman.teams',\n     'lahman.teams_franchises',\n     'lahman.teams_half']\n\n\n\nWe can access one of these tables with `dbc.tbl()`, then put it through any kind\nof siuba operation.\n\n\n```python\ndbc.tbl(\"Salaries\")\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n       index  yearID teamID lgID   playerID  salary\n    0      0    1985    ATL   NL  barkele01  870000\n    1      1    1985    ATL   NL  bedrost01  550000\n    2      2    1985    ATL   NL  benedbr01  545000\n    3      3    1985    ATL   NL   campri01  633333\n    4      4    1985    ATL   NL  ceronri01  625000\n    # .. may have more rows\n\n\n\n\n```python\nfrom siuba import _, count\ndbc.tbl(\"Salaries\") >> count(_.yearID, sort=True)\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n       yearID     n\n    0    1999  1006\n    1    1998   998\n    2    1995   986\n    3    1996   931\n    4    1997   925\n    # .. may have more rows\n\n\n\nIf you'd rather start from a SQL query, use the `.query()` method.\n\n\n```python\ndbc.query(\"\"\"\n    SELECT\n        playerID,\n        sum(AB) as AB\n    FROM Batting\n    GROUP BY playerID\n\"\"\")\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n        playerID     AB\n    0  aardsda01      4\n    1  aaronha01  12364\n    2  aaronto01    944\n    3   aasedo01      5\n    4   abadan01     21\n    # .. may have more rows\n\n\n\nFor anything else you might want to do, the sqlalchemy Engine object is available.\nFor example, the code below shows how you can set its `.echo` attribute, which\ntells sqlalchemy to provide useful logs.\n\n\n```python\ndbc._engine.echo = True\ntable_names = dbc.list()\n```\n\n    2022-03-20 22:49:37,553 INFO sqlalchemy.engine.Engine PRAGMA database_list\n    2022-03-20 22:49:37,554 INFO sqlalchemy.engine.Engine [raw sql] ()\n    2022-03-20 22:49:37,555 INFO sqlalchemy.engine.Engine SELECT name FROM \"main\".sqlite_master WHERE type='table' ORDER BY name\n    2022-03-20 22:49:37,555 INFO sqlalchemy.engine.Engine [raw sql] ()\n    2022-03-20 22:49:37,556 INFO sqlalchemy.engine.Engine SELECT name FROM \"lahman\".sqlite_master WHERE type='table' ORDER BY name\n    2022-03-20 22:49:37,557 INFO sqlalchemy.engine.Engine [raw sql] ()\n\n\nNote that the log messages above show that the `.list()` method executed two queries:\nOne to list tables in the \"main\" schema (which is empty), and one to list tables\nin the \"lahman\" schema.\n\n## Advanced Configuration\n\n> ⚠️: These behaviors are well tested, but dbcooper's internals and API may change.\n\ndbcooper can be configured in three ways, each corresponding to a class interface:\n\n* **TableFinder**: Which tables will be used by `dbcooper`.\n* **AccessorBuilder**: How table names are turned into accessors.\n* **DbcDocumentedTable**: The class that defines what an accessor will return.\n\n\n```python\nfrom sqlalchemy import create_engine\nfrom dbcooper.data import lahman_sqlite\nfrom dbcooper import DbCooper, AccessorBuilder\n\nengine = create_engine(\"sqlite://\")\nlahman_sqlite(engine)\n```\n\n### Excluding a schema\n\n\n```python\nfrom dbcooper import TableFinder\n\nfinder = TableFinder(exclude_schemas=[\"lahman\"])\ndbc_no_lahman = DbCooper(engine, table_finder=finder)\ndbc_no_lahman.list()\n```\n\n\n\n\n    []\n\n\n\n### Formatting table names\n\n\n```python\nfrom dbcooper import AccessorBuilder\n\n# omits schema, and keeps only table name\n# e.g. `salaries`, rather than `lahman_salaries`\nbuilder = AccessorBuilder(format_from_part=\"table\")\n\ntbl_flat = DbCooper(engine, accessor_builder=builder)\ntbl_flat.salaries()\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n       index  yearID teamID lgID   playerID  salary\n    0      0    1985    ATL   NL  barkele01  870000\n    1      1    1985    ATL   NL  bedrost01  550000\n    2      2    1985    ATL   NL  benedbr01  545000\n    3      3    1985    ATL   NL   campri01  633333\n    4      4    1985    ATL   NL  ceronri01  625000\n    # .. may have more rows\n\n\n\n### Grouping tables by schema\n\n\n```python\nfrom dbcooper import AccessorHierarchyBuilder\n\ntbl_nested = DbCooper(engine, accessor_builder=AccessorHierarchyBuilder())\n\n# note the form: <schema>.<table>\ntbl_nested.lahman.salaries()\n```\n\n\n\n\n    # Source: lazy query\n    # DB Conn: Engine(sqlite://)\n    # Preview:\n       index  yearID teamID lgID   playerID  salary\n    0      0    1985    ATL   NL  barkele01  870000\n    1      1    1985    ATL   NL  bedrost01  550000\n    2      2    1985    ATL   NL  benedbr01  545000\n    3      3    1985    ATL   NL   campri01  633333\n    4      4    1985    ATL   NL  ceronri01  625000\n    # .. may have more rows\n\n\n\n### Don't show table documentation\n\n\n```python\nfrom dbcooper import DbcSimpleTable\n\ndbc_no_doc = DbCooper(engine, table_factory=DbcSimpleTable)\ndbc_no_doc.lahman_salaries\n```\n\n\n\n\n    DbcSimpleTable(..., 'salaries', 'lahman')\n\n\n\nNote that sqlalchemy dialects like `snowflake-sqlalchemy` cannot look up things\nlike table and column descriptions as well as other dialects, so `DbcSimpleTable`\nmay be needed to connect to snowflake (see [this issue](https://github.com/snowflakedb/snowflake-sqlalchemy/issues/276)).\n\n## Developing\n\n```shell\n# install with development dependencies\npip install -e .[dev]\n\n# or install from requirements file\npip install -r requirements/dev.txt\n```\n\n### Test\n\n```shell\n# run all tests, see pytest section of pyproject.toml\npytest\n\n# run specific backends\npytest -m 'not snowflake and not bigquery'\n\n# stop on first failure, drop into debugger\npytest -x --pdb\n```\n\n### Release\n\n```shell\n# set version number\ngit tag v0.0.1\n\n# (optional) push to github\ngit push origin --tags\n\n# check version\npython -m setuptools_scm\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/machow/template-python-pkg",
    "keywords": "template,packaging",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbcooper",
    "package_url": "https://pypi.org/project/dbcooper/",
    "platform": null,
    "project_url": "https://pypi.org/project/dbcooper/",
    "project_urls": {
      "Homepage": "https://github.com/machow/template-python-pkg"
    },
    "release_url": "https://pypi.org/project/dbcooper/0.0.5/",
    "requires_dist": [
      "siuba (>=0.2.0)",
      "sqlalchemy",
      "tabulate",
      "jupytext ; extra == 'binder'",
      "lahman ; extra == 'binder'",
      "pip-tools ; extra == 'dev'",
      "importlib-resources ; extra == 'dev'",
      "ipykernel ; extra == 'dev'",
      "pydata-sphinx-theme ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-dotenv ; extra == 'dev'",
      "sqlalchemy-bigquery ; extra == 'dev'",
      "sphinx (~=4.4.0) ; extra == 'dev'",
      "snowflake-sqlalchemy ; extra == 'dev'",
      "psycopg2-binary ; extra == 'dev'",
      "pymysql ; extra == 'dev'",
      "jupytext ; extra == 'dev'"
    ],
    "requires_python": ">3.8",
    "summary": "Short description of the package.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17415918,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3006a84ee13685373b414f23ee1593e431738349be7245fc067b206d0f915f6f",
          "md5": "36e497fad6fb767c479b7b902308cb6c",
          "sha256": "a61e8e973e6b9d6177d84da902a3d6496abe30a3fcfb4ad5a33e5e6e636ee34a"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36e497fad6fb767c479b7b902308cb6c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.8",
        "size": 12735,
        "upload_time": "2022-03-20T20:48:10",
        "upload_time_iso_8601": "2022-03-20T20:48:10.372247Z",
        "url": "https://files.pythonhosted.org/packages/30/06/a84ee13685373b414f23ee1593e431738349be7245fc067b206d0f915f6f/dbcooper-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16f5a4fba2f0bb865af52965d4c4efafba1f968cb6557bb134a03356b43a68d6",
          "md5": "cb049bc797bd5c95b1957935c38a470b",
          "sha256": "1db8d75b6aa2a9d8491727bde8f3dd0f67005cdc7105e67e33cffe24bdd63952"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cb049bc797bd5c95b1957935c38a470b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.8",
        "size": 12349,
        "upload_time": "2022-03-20T20:48:11",
        "upload_time_iso_8601": "2022-03-20T20:48:11.934922Z",
        "url": "https://files.pythonhosted.org/packages/16/f5/a4fba2f0bb865af52965d4c4efafba1f968cb6557bb134a03356b43a68d6/dbcooper-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d39160742569fcbf90a52bf8f4a8d858d705db9c3d0a7f8e2b43e9ef08ba3a5",
          "md5": "90c7d22238dd00030a882f2c19e0dec5",
          "sha256": "66c380be7c8d3bca10cfe2a3e6f49ab8298928c3c905ca153cb3397a04b2eb77"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90c7d22238dd00030a882f2c19e0dec5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.8",
        "size": 12732,
        "upload_time": "2022-03-20T21:01:30",
        "upload_time_iso_8601": "2022-03-20T21:01:30.876525Z",
        "url": "https://files.pythonhosted.org/packages/2d/39/160742569fcbf90a52bf8f4a8d858d705db9c3d0a7f8e2b43e9ef08ba3a5/dbcooper-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db613d3d80848d875be27e064866b7262ae97fb3988f4ee8e6842581ffc08add",
          "md5": "ba2246f54f2deca5ff1bd7ee92118a83",
          "sha256": "c190933c00e48c5bc1d0c52baa8c1db65fc4b1df5ee00057dc6db7f9681da04c"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ba2246f54f2deca5ff1bd7ee92118a83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.8",
        "size": 12356,
        "upload_time": "2022-03-20T21:01:32",
        "upload_time_iso_8601": "2022-03-20T21:01:32.263990Z",
        "url": "https://files.pythonhosted.org/packages/db/61/3d3d80848d875be27e064866b7262ae97fb3988f4ee8e6842581ffc08add/dbcooper-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "399eda342062e3c09455bf189d74432d3f4920815f63524f3a955ed0f5b0b441",
          "md5": "eaccdfe2f1f3e3022f4156f51292dc1b",
          "sha256": "38ca8410a5f175a1526bcb7f2ff0f721134396b1c625c47ed52b6d75424e54d9"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eaccdfe2f1f3e3022f4156f51292dc1b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.8",
        "size": 16377,
        "upload_time": "2022-03-21T14:30:52",
        "upload_time_iso_8601": "2022-03-21T14:30:52.988242Z",
        "url": "https://files.pythonhosted.org/packages/39/9e/da342062e3c09455bf189d74432d3f4920815f63524f3a955ed0f5b0b441/dbcooper-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a7e5696f904866036343d72c84f9a0eb25bd26c078da59b4a564f5935a0195c",
          "md5": "2ead3baf37c210c0e9ecc6dab225c1eb",
          "sha256": "bde9330b441e4052ed80ff7cd36b91f778ae301d00f886e000eb8972a3c6cd3b"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ead3baf37c210c0e9ecc6dab225c1eb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.8",
        "size": 16606,
        "upload_time": "2022-06-09T00:01:50",
        "upload_time_iso_8601": "2022-06-09T00:01:50.879372Z",
        "url": "https://files.pythonhosted.org/packages/3a/7e/5696f904866036343d72c84f9a0eb25bd26c078da59b4a564f5935a0195c/dbcooper-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35d1774923736a545620c41ca94cd8d1df4a632455b0c0a08bcd891ce1585a59",
          "md5": "e068c01c0334c8f157d8ad3e68b0e574",
          "sha256": "5cb97156503561dffb19505cdb423d614778388a43560eda873dab8e31fd92c1"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e068c01c0334c8f157d8ad3e68b0e574",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.8",
        "size": 18877,
        "upload_time": "2022-06-09T00:01:52",
        "upload_time_iso_8601": "2022-06-09T00:01:52.436991Z",
        "url": "https://files.pythonhosted.org/packages/35/d1/774923736a545620c41ca94cd8d1df4a632455b0c0a08bcd891ce1585a59/dbcooper-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbb30472f06cd2009cfe15dca94c1f02d199464ef61a696f37a5edc16c98141e",
          "md5": "9ba453ea52107d95953fe31dac3e0bda",
          "sha256": "93aa999f5003b16e8929f1170ecbf90701602aeaf082df69713b131f2e4e845d"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ba453ea52107d95953fe31dac3e0bda",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">3.8",
        "size": 16615,
        "upload_time": "2023-03-23T13:39:15",
        "upload_time_iso_8601": "2023-03-23T13:39:15.791611Z",
        "url": "https://files.pythonhosted.org/packages/bb/b3/0472f06cd2009cfe15dca94c1f02d199464ef61a696f37a5edc16c98141e/dbcooper-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd30a2020c9858e622012859d8c8a49f36fce922fe58b8b4e6f940fbe3d9874e",
          "md5": "678c641ceca66c3681f017bf046d9a61",
          "sha256": "4c5684716dc3955a43f562738861a82d391554c1e3e41bf07769455973dc036c"
        },
        "downloads": -1,
        "filename": "dbcooper-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "678c641ceca66c3681f017bf046d9a61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.8",
        "size": 18880,
        "upload_time": "2023-03-23T13:39:17",
        "upload_time_iso_8601": "2023-03-23T13:39:17.684792Z",
        "url": "https://files.pythonhosted.org/packages/dd/30/a2020c9858e622012859d8c8a49f36fce922fe58b8b4e6f940fbe3d9874e/dbcooper-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbb30472f06cd2009cfe15dca94c1f02d199464ef61a696f37a5edc16c98141e",
        "md5": "9ba453ea52107d95953fe31dac3e0bda",
        "sha256": "93aa999f5003b16e8929f1170ecbf90701602aeaf082df69713b131f2e4e845d"
      },
      "downloads": -1,
      "filename": "dbcooper-0.0.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ba453ea52107d95953fe31dac3e0bda",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">3.8",
      "size": 16615,
      "upload_time": "2023-03-23T13:39:15",
      "upload_time_iso_8601": "2023-03-23T13:39:15.791611Z",
      "url": "https://files.pythonhosted.org/packages/bb/b3/0472f06cd2009cfe15dca94c1f02d199464ef61a696f37a5edc16c98141e/dbcooper-0.0.5-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd30a2020c9858e622012859d8c8a49f36fce922fe58b8b4e6f940fbe3d9874e",
        "md5": "678c641ceca66c3681f017bf046d9a61",
        "sha256": "4c5684716dc3955a43f562738861a82d391554c1e3e41bf07769455973dc036c"
      },
      "downloads": -1,
      "filename": "dbcooper-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "678c641ceca66c3681f017bf046d9a61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.8",
      "size": 18880,
      "upload_time": "2023-03-23T13:39:17",
      "upload_time_iso_8601": "2023-03-23T13:39:17.684792Z",
      "url": "https://files.pythonhosted.org/packages/dd/30/a2020c9858e622012859d8c8a49f36fce922fe58b8b4e6f940fbe3d9874e/dbcooper-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}