{
  "info": {
    "author": "",
    "author_email": "Martin Zuber <martin.zuber@sap.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Typing :: Typed"
    ],
    "description": "Pandas Type Checks\n==================\n\n[![Build Status](https://dev.azure.com/martin-zuber/pandas-type-checks/_apis/build/status/mzuber.pandas-type-checks?branchName=main)](https://dev.azure.com/martin-zuber/pandas-type-checks/_build/latest?definitionId=1&branchName=main)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=mzuber_pandas-type-checks&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=mzuber_pandas-type-checks)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=mzuber_pandas-type-checks&metric=coverage)](https://sonarcloud.io/summary/new_code?id=mzuber_pandas-type-checks)\n[![PyPI Version](https://img.shields.io/pypi/v/pandas-type-checks)](https://pypi.org/project/pandas-type-checks/)\n[![PyPI Wheel](https://img.shields.io/pypi/wheel/pandas-type-checks)](https://pypi.org/project/pandas-type-checks/)\n\nA Python library providing means for structural type checking of Pandas data frames and series:\n- A decorator `pandas_type_check` for specifying and checking the structure of Pandas `DataFrame` and `Series`\n  arguments and return values of a function.\n- Support for \"non-strict\" type checking. In this mode data frames can contain columns which are not part of the type\n  specification against which they are checked. Non-strict type checking in that sense allows a form of structural\n  subtyping for data frames.\n- Configuration options to raise exceptions for type errors or alternatively log them.\n- Configuration option to globally enable/disable the type checks. This allows users to enable the type checking\n  functionality in e.g. only testing environments.\n\nThis library focuses on providing utilities to check the structure (i.e. columns and their types) of Pandas data frames\nand series arguments and return values of functions. For checking individual data frame and series values, including\nformulating more sophisticated constraints on column values, [Pandera](https://github.com/unionai-oss/pandera) is a\ngreat alternative.\n\nInstallation\n------------\n\nPackages for all released versions are available at the\n[Python Package Index (PyPI)](https://pypi.org/project/pandas-type-checks) and can be installed with `pip`:\n\n```\npip install pandas-type-checks\n```\n\nThe library can also be installed with support for additional functionality:\n\n```\npip install pandas-type-checks[pandera] # Support for Pandera data frame and series schemas\n```\n\nUsage Example\n-------------\n\nThe function `filter_rows_and_remove_column` is annotated with type check hints for the Pandas `DataFrame` and `Series`\narguments and return value of the function:\n\n```python\nimport pandas as pd\nimport numpy as np\nimport pandas_type_checks as pd_types\n\n@pd_types.pandas_type_check(\n    pd_types.DataFrameArgument('data', {\n        'A': np.dtype('float64'),\n        'B': np.dtype('int64'),\n        'C': np.dtype('bool')\n    }),\n    pd_types.SeriesArgument('filter_values', 'int64'),\n    pd_types.DataFrameReturnValue({\n        'B': np.dtype('int64'),\n        'C': np.dtype('bool')\n    })\n)\ndef filter_rows_and_remove_column(data: pd.DataFrame, filter_values: pd.Series) -> pd.DataFrame:\n    return data[data['B'].isin(filter_values.values)].drop('A', axis=1)\n```\n\nApplying the function `filter_rows_and_remove_column` to a filter values `Series` with the wrong type will result in a\n`TypeError` exception with a detailed type error message:\n\n```python\ntest_data = pd.DataFrame({\n    'A': pd.Series(1, index=list(range(4)), dtype='float64'),\n    'B': np.array([1, 2, 3, 4], dtype='int64'),\n    'C': np.array([True] * 4, dtype='bool')\n})\ntest_filter_values_with_wrong_type = pd.Series([3, 4], dtype='int32')\n\nfilter_rows_and_remove_column(test_data, test_filter_values_with_wrong_type)\n```\n\n```\nTypeError: Pandas type error in function 'filter_rows_and_remove_column'\nType error in argument 'filter_values':\n\tExpected Series of type 'int64' but found type 'int32'\n```\n\nApplying the function `filter_rows_and_remove_column` to a data frame with a wrong column type and a missing column\nwill result in a `TypeError` exception with a detailed type error message:\n\n```python\ntest_data_with_wrong_type_and_missing_column = pd.DataFrame({\n    'A': pd.Series(1, index=list(range(4)), dtype='float64'),\n    'B': np.array([1, 2, 3, 4], dtype='int32')\n})\ntest_filter_values = pd.Series([3, 4], dtype='int64')\n\nfilter_rows_and_remove_column(test_data_with_wrong_type_and_missing_column, test_filter_values)\n```\n\n```\nTypeError: Pandas type error in function 'filter_rows_and_remove_column'\nType error in argument 'data':\n    Expected type 'int64' for column B' but found type 'int32'\n    Missing column in DataFrame: 'C'\nType error in return value:\n    Expected type 'int64' for column B' but found type 'int32'\n    Missing column in DataFrame: 'C'\n```\n\nConfiguration\n-------------\n\nThe global configuration object `pandas_type_checks.config` can be used to configure the behavior of the library:\n- `config.enable_type_checks` (`bool`): Flag for enabling/disabling type checks for specified arguments and return\n  values. This flag can be used to globally enable or disable the type checker in certain environments.\n\n  Default: `True`\n- `config.strict_type_checks` (`bool`): Flag for strict type check mode. If strict type checking is enabled data frames\n  cannot contain columns which are not part of the type specification against which they are checked. Non-strict type\n  checking in that sense allows a form of structural subtyping for data frames.\n\n  Default: `False`\n- `config.log_type_errors` (`bool`): Flag indicating that type errors for Pandas dataframes or series values should be\n  logged instead of raising a `TypeError` exception. Type errors will be logged with log level `ERROR`.\n\n  Default: `False`\n- `config.logger` (`logging.Logger`): Logger to be used for logging type errors when the `log_type_errors` flag is enabled.\n  When no logger is specified via the configuration a built-in default logger is used.\n\nPandera Support\n---------------\n\nThis library can be installed which additional support for [Pandera](https://github.com/unionai-oss/pandera):\n\n```\npip install pandas-type-checks[pandera]\n```\n\nIn this case Pandera [DataFrameSchema](https://pandera.readthedocs.io/en/stable/reference/generated/pandera.schemas.DataFrameSchema.html)\nand [SeriesSchema](https://pandera.readthedocs.io/en/stable/reference/generated/pandera.schemas.SeriesSchema.html)\ncan be used as type specifications for data frame and series arguments and return values.\n\n```python\nimport pandas as pd\nimport pandera as pa\nimport numpy as np\nimport pandas_type_checks as pd_types\n\n@pd_types.pandas_type_check(\n    pd_types.DataFrameArgument('data',\n                               pa.DataFrameSchema({\n                                 'A': pa.Column(np.dtype('float64'), checks=pa.Check.le(10.0)),\n                                 'B': pa.Column(np.dtype('int64'), checks=pa.Check.lt(2)),\n                                 'C': pa.Column(np.dtype('bool'))\n                               })),\n    pd_types.SeriesArgument('filter_values', 'int64'),\n    pd_types.DataFrameReturnValue({\n        'B': np.dtype('int64'),\n        'C': np.dtype('bool')\n    })\n)\ndef filter_rows_and_remove_column(data: pd.DataFrame, filter_values: pd.Series) -> pd.DataFrame:\n    return data[data['B'].isin(filter_values.values)].drop('A', axis=1)\n```\n\nReferences\n----------\n\n* [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html)\n* [Python Packaging User Guide](https://packaging.python.org/en/latest/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Pandas,type check",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pandas-type-checks",
    "package_url": "https://pypi.org/project/pandas-type-checks/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pandas-type-checks/",
    "project_urls": {
      "Source Code": "https://github.com/mzuber/pandas-type-checks"
    },
    "release_url": "https://pypi.org/project/pandas-type-checks/1.1.1/",
    "requires_dist": [
      "pandas (>=1.1.0)",
      "pandera (>=0.12.0) ; extra == 'pandera'"
    ],
    "requires_python": ">=3.8",
    "summary": "Structural type checking for Pandas data frames.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15034778,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14793b8cb327aa6c90cc42e0b34042a184a7e8ed17e20dba0ac1d330569126bf",
          "md5": "61adffef0c8fc5f1891228a77ac29861",
          "sha256": "00227518fa3653ecebde77e867542d74e8f0d63c8e67628c326e274c773bcf48"
        },
        "downloads": -1,
        "filename": "pandas_type_checks-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61adffef0c8fc5f1891228a77ac29861",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9468,
        "upload_time": "2022-08-25T15:36:26",
        "upload_time_iso_8601": "2022-08-25T15:36:26.745730Z",
        "url": "https://files.pythonhosted.org/packages/14/79/3b8cb327aa6c90cc42e0b34042a184a7e8ed17e20dba0ac1d330569126bf/pandas_type_checks-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec94b1e8614f8f9575a0f18bfc4fb123a97b532b95064c2b8be0058b505b5d27",
          "md5": "4827f6c888075c9e5926989b9fdbc684",
          "sha256": "70eed95ceb421d1b3533434c800135b8792ecd226a130348c2d530ae81469676"
        },
        "downloads": -1,
        "filename": "pandas-type-checks-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4827f6c888075c9e5926989b9fdbc684",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10191,
        "upload_time": "2022-08-25T15:36:28",
        "upload_time_iso_8601": "2022-08-25T15:36:28.457367Z",
        "url": "https://files.pythonhosted.org/packages/ec/94/b1e8614f8f9575a0f18bfc4fb123a97b532b95064c2b8be0058b505b5d27/pandas-type-checks-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "855e0c517ed7e96d4bebde89c5ac13f8a0d9c658b31a661bcf8b16a5e500a0a6",
          "md5": "66ca139be03be9c5d0a78ac123599312",
          "sha256": "fa188b1f9a3b921511dae85bc9d0a6d2a65c6648facce9d05bb571a0ce73f030"
        },
        "downloads": -1,
        "filename": "pandas_type_checks-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66ca139be03be9c5d0a78ac123599312",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11098,
        "upload_time": "2022-09-08T15:18:20",
        "upload_time_iso_8601": "2022-09-08T15:18:20.655307Z",
        "url": "https://files.pythonhosted.org/packages/85/5e/0c517ed7e96d4bebde89c5ac13f8a0d9c658b31a661bcf8b16a5e500a0a6/pandas_type_checks-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fccb23e31a6082fbafbca2fa3d43dec14e10e0e28cdf338b459a110981fba07b",
          "md5": "c2a7b3de595fcaff617b5fe9084f50aa",
          "sha256": "e98bdfd200b2754ef0f2287d50f72b6dfcb125fc66149a19b653be4bc65df7d1"
        },
        "downloads": -1,
        "filename": "pandas-type-checks-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2a7b3de595fcaff617b5fe9084f50aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11872,
        "upload_time": "2022-09-08T15:18:22",
        "upload_time_iso_8601": "2022-09-08T15:18:22.243033Z",
        "url": "https://files.pythonhosted.org/packages/fc/cb/23e31a6082fbafbca2fa3d43dec14e10e0e28cdf338b459a110981fba07b/pandas-type-checks-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "855e0c517ed7e96d4bebde89c5ac13f8a0d9c658b31a661bcf8b16a5e500a0a6",
        "md5": "66ca139be03be9c5d0a78ac123599312",
        "sha256": "fa188b1f9a3b921511dae85bc9d0a6d2a65c6648facce9d05bb571a0ce73f030"
      },
      "downloads": -1,
      "filename": "pandas_type_checks-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66ca139be03be9c5d0a78ac123599312",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 11098,
      "upload_time": "2022-09-08T15:18:20",
      "upload_time_iso_8601": "2022-09-08T15:18:20.655307Z",
      "url": "https://files.pythonhosted.org/packages/85/5e/0c517ed7e96d4bebde89c5ac13f8a0d9c658b31a661bcf8b16a5e500a0a6/pandas_type_checks-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fccb23e31a6082fbafbca2fa3d43dec14e10e0e28cdf338b459a110981fba07b",
        "md5": "c2a7b3de595fcaff617b5fe9084f50aa",
        "sha256": "e98bdfd200b2754ef0f2287d50f72b6dfcb125fc66149a19b653be4bc65df7d1"
      },
      "downloads": -1,
      "filename": "pandas-type-checks-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c2a7b3de595fcaff617b5fe9084f50aa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 11872,
      "upload_time": "2022-09-08T15:18:22",
      "upload_time_iso_8601": "2022-09-08T15:18:22.243033Z",
      "url": "https://files.pythonhosted.org/packages/fc/cb/23e31a6082fbafbca2fa3d43dec14e10e0e28cdf338b459a110981fba07b/pandas-type-checks-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}