{
  "info": {
    "author": "Leif denby",
    "author_email": "l.c.denby@leeds.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Studying convective organisation with neural networks\n\nThis repository contains code to generate training data, train and interprete\nthe neural network used in [L. Denby\n(2020)](https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2019GL085190)\ncollected in a python module called `convml_tt`. From version `v0.7.0` it\nwas rewritten to use [pytorch-lightning](https://pytorchlightning.ai/) rather\nthan [fastai v1](https://fastai1.fast.ai/) to adopt best-practices and make it\neasier to modify and carry out further research on the technique.\n\n## Getting started\n\nTo use the `convml_tt` codebase you will first need to install\n[pytorch](https://pytorch.org/) which can most easily by done with\n[conda](https://www.anaconda.com/distribution/) (or use\n[mamba](https://github.com/conda-forge/miniforge#mambaforge) which is `conda`\nre-implemented in c++ and is orders of magnitude faster - once installed just\nreplace `conda` with `mamba` in the commands below).\n\n1. Once conda is installed you can create a conda environment:\n\n```bash\nconda create -n convml-tt\nconda activate convml-tt\n```\n\nInto this conda environment you the need to install pytorch. Depending on\nwhether you have access to a GPU or not you will need to install different\npytorch packages:\n\n2a. For GPU-based trained and inference:\n\n```bash\nconda install pytorch \"torchvision>=0.4.0\" pytorch-cuda -c pytorch -c nvidia\n```\n\n(to check that is working you can run `python -c 'import torch; print(torch.cuda.is_available())'`)\n\n2b. For CPU-based training and inference:\n\n```bash\nconda install pytorch \"torchvision>=0.4.0\" cpuonly -c pytorch\n```\n\n3. With the environment set up and pytorch installed you can now install\n   `convml-tt` directly from [pypi](https://pypi.org/) using pip (note if you\n   are planning on modifying the `convml-tt` functionality you will want to\n   download the `convml-tt` source code and install from a local copy instead\n   of from pypi. See [development instructions]() for more details):\n\n```bash\npython -m pip install convml-tt\n```\n\nYou will now have `convml-tt` available whenever you activate the `convml-tt`\nconda environment. You will have the *base* components of `convml-tt`\ninstalled which enable training the model on a existing triplet-dataset\nand making predictions with a trained model. Functionality to create training\ndata is contained in a separate package called\n[convml-data](https://github.com/convml/convml-data)\n\n\n## Training\n\nBelow are details on how to obtain training data and how to train the model\n\n### Training data\n\n### Example dataset\n\nA few example training datasets can be downloaded using the following\ncommand\n\n```bash\npython -m convml_tt.data.examples\n```\n\n### Model training\n\nYou can use the CLI (Command Line Interface) to train the model\n\n```bash\npython -m convml_tt.trainer data_dir\n```\n\nwhere `data_dir` is the path of the dataset you want to use. There are a number\nof optional command flags available, for example to train with one GPU use\nthe training process to [weights & biases](https://wandb.ai) use\n`--log-to-wandb`. For a list of all the available flags use the `-h`.\n\nTraining can also be done interactively in for example a jupyter notebook, you\ncan see some simple examples how what commands to use by looking at the\nautomated tests in [tests/](tests/).\n\nFinally there detailed notes on how to train on the ARC3 HPC cluster at\nUniversity of Leeds are in [doc/README.ARC3.md](doc/README.ARC3.md), on the\n[JASMIN](doc/README.JASMIN.md) analysis cluster and on\n[Google Colab](https://colab.research.google.com/drive/18Hmik9Nacqo-29b16hgQ3XfPum1lHdCO?usp=sharing).\n\n# Model interpretation\n\nThere are currently two types of plots that I use for interpreting the\nembeddings that the model produces. These are a dendrogram with examples\nplotted for each class of the leaf nodes of the dendrogram and a scatter plot\nof two dimensions annotated with example tiles so the actual tiles can be\nvisualised.\n\nThere is an example of how to make these plots and how to easily generate an\nembedding (or encoding) vector for each example tile in\n`example_notebooks/model_interpretation`. Again this notebook expects the\ndirectory layout mentioned above.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/convml/convml_tt",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "convml-tt",
    "package_url": "https://pypi.org/project/convml-tt/",
    "platform": null,
    "project_url": "https://pypi.org/project/convml-tt/",
    "project_urls": {
      "Homepage": "https://github.com/convml/convml_tt"
    },
    "release_url": "https://pypi.org/project/convml-tt/0.13.1/",
    "requires_dist": [
      "xarray",
      "netCDF4",
      "matplotlib",
      "pytorch-lightning (>=1.2.0)",
      "kornia (>=0.5.0)",
      "scikit-learn",
      "seaborn",
      "parse",
      "jupyter",
      "scikit-image",
      "antialiased-cnns (>=0.3)",
      "torchvision (>=0.4.0)",
      "semver",
      "statsmodels",
      "pytest ; extra == 'dev'",
      "nbval ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "luigi ; extra == 'pipeline'",
      "luigi ; extra == 'sattiles'",
      "cartopy ; extra == 'sattiles'",
      "satpy ; extra == 'sattiles'",
      "esmpy ; extra == 'sattiles'",
      "xesmf ; extra == 'sattiles'",
      "convml-data (>=0.2.0) ; extra == 'sattiles'",
      "pytest ; extra == 'test'",
      "nbval ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Neural Network based study of convective organisation",
    "version": "0.13.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17294017,
  "releases": {
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ef6800740704a5de497613c6be3f7a779be7f9c505d4dc01a82259978265b21",
          "md5": "39a7a6e279046a54ad04c1132960bad4",
          "sha256": "70e8260596a43c2533ba1961e489228576f3dd6bcdef6b4d2e65caccc49454de"
        },
        "downloads": -1,
        "filename": "convml_tt-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39a7a6e279046a54ad04c1132960bad4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 81079,
        "upload_time": "2022-03-22T13:45:15",
        "upload_time_iso_8601": "2022-03-22T13:45:15.073749Z",
        "url": "https://files.pythonhosted.org/packages/2e/f6/800740704a5de497613c6be3f7a779be7f9c505d4dc01a82259978265b21/convml_tt-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5d53724049f37eef5c5fb77f6fb9e24ae0f977367f00e9649202401091d374d",
          "md5": "45b6465fff9836a332619bad63c834ac",
          "sha256": "18cafe95eabb8740aeb73f62c6db87db8406db3d26a338ee82d75ae29ad22d74"
        },
        "downloads": -1,
        "filename": "convml_tt-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45b6465fff9836a332619bad63c834ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 84152,
        "upload_time": "2022-09-12T14:09:32",
        "upload_time_iso_8601": "2022-09-12T14:09:32.691166Z",
        "url": "https://files.pythonhosted.org/packages/a5/d5/3724049f37eef5c5fb77f6fb9e24ae0f977367f00e9649202401091d374d/convml_tt-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7c09d2555728f4feb34f947316fbdce1482594b95854ba08bd25a075a0e2a48",
          "md5": "b03cf31746a16e9b1af5ae556f3e6765",
          "sha256": "04d50301f3c07ee2ee34f7e1cceed1604cfbf2ba9ea20ac0b075cd8e0a883968"
        },
        "downloads": -1,
        "filename": "convml_tt-0.13.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b03cf31746a16e9b1af5ae556f3e6765",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 84647,
        "upload_time": "2023-03-14T20:30:39",
        "upload_time_iso_8601": "2023-03-14T20:30:39.955107Z",
        "url": "https://files.pythonhosted.org/packages/a7/c0/9d2555728f4feb34f947316fbdce1482594b95854ba08bd25a075a0e2a48/convml_tt-0.13.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7c09d2555728f4feb34f947316fbdce1482594b95854ba08bd25a075a0e2a48",
        "md5": "b03cf31746a16e9b1af5ae556f3e6765",
        "sha256": "04d50301f3c07ee2ee34f7e1cceed1604cfbf2ba9ea20ac0b075cd8e0a883968"
      },
      "downloads": -1,
      "filename": "convml_tt-0.13.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b03cf31746a16e9b1af5ae556f3e6765",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 84647,
      "upload_time": "2023-03-14T20:30:39",
      "upload_time_iso_8601": "2023-03-14T20:30:39.955107Z",
      "url": "https://files.pythonhosted.org/packages/a7/c0/9d2555728f4feb34f947316fbdce1482594b95854ba08bd25a075a0e2a48/convml_tt-0.13.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}