{
  "info": {
    "author": "Alexander Geiseler",
    "author_email": "don-alejandrino@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# rt_opt: Run-and-tumble global optimizer\n\nMetaheuristic global optimization algorithm combining a bacterial run-and-tumble chemotactic search\n(see, e.g., [here](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5418374/)) with a local,\ngradient-based search around the best minimum candidate points.\nThe algorithm's goal is to find the global minimum of an objective function f over a (possibly\nbounded) region Ω, that is, to find\n\n<p align=\"center\">\nmin f(x), x ∈ Ω, <br/>\nf: Ω ⊂ ℝ<sup>n</sup> → ℝ.\n</p>\n\nFor the local, gradient-based search, a bounded BFGS algorithm is used.\n\nSince the chemotactic search becomes more and more ineffective with increasing problem\ndimensionality,\n[Sequential Random Embeddings](http://www.lamda.nju.edu.cn/huyq/papers/ijcai16-sre.pdf) are used\nto solve the optimization problem once its dimensionality exceeds a given threshold. The idea of\nSequential Random Embeddings is basically to reduce high-dimensional problems to low-dimensional\nones by embedding the original, high-dimensional search space ℝ<sup>n</sup> into a low dimensional\none, ℝ<sup>m</sup>, by sequentially applying the random linear transformation\n\n<p align=\"center\">\nx<sub>0</sub> = 0<br>\nx<sub>k+1</sub> = α<sub>k+1</sub>x<sub>k</sub> + A • y<sub>k+1</sub>,<br>\nx ∈ ℝ<sup>n</sup>,&nbsp;&nbsp;&nbsp;&nbsp;y ∈ ℝ<sup>m</sup>,&nbsp;&nbsp;&nbsp;&nbsp;\nA ∈ N(0, 1)<sup>n×m</sup>,&nbsp;&nbsp;&nbsp;&nbsp;α ∈ ℝ,\n</p>\n\nand minimizing the objective function f(α<sub>k+1</sub>x<sub>k</sub> + A • y<sub>k+1</sub>) w.r.t.\n(α<sub>k+1</sub>, y<sub>k+1</sub>) for each k in a given range.\n\n## Installation\nrt_opt can be most conveniently installed via pip:\n```\npip install rt_opt\n```\n\n## Usage\nFor a quick start, try to find the global minimum of the\n[Eggholder function](https://www.sfu.ca/~ssurjano/egg.html) within the default square\nx<sub>i</sub> ∈ [-512, 512] ∀ i = 1, 2:\n```\nimport time\n\nimport numpy as np\n\nfrom rt_opt.optimizer import optimize\nfrom rt_opt.testproblems import Eggholder\n\n\nproblem = Eggholder()\nbox_bounds = np.vstack((problem.bounds.lower, problem.bounds.upper)).T\nstart = time.time()\nret = optimize(problem.f, bounds=box_bounds)\nend = time.time()\n\nprint(f'Function minimum found at x = {ret.x}, yielding f(x) = {ret.fun}.')\nprint(f'Optimization took {end - start:.3f} seconds.')\nprint(f'Optimization error is {np.abs(ret.fun - problem.min.f)}.')\n\n\n\n>>> Function minimum found at x = [512.         404.23180623], yielding f(x) = -959.6406627208495.\n>>> Optimization took 0.097 seconds.\n>>> Optimization error is 1.3642420526593924e-12.\n```\n\n### Non-rectangular bounds\nIf your optimization problem involves an arbitrary, non-rectangular bounded domain, you may as well\nprovide a custom bounds callback. Every such callback must return a tuple (x_projected, bounds_hit),\nwhere x_projected is the input variable x projected to the defined search region. That is, if x is\nwithin this region, it is returned unchanged, whereas if it is outside this region, it is projected\nto the region's boundaries. The second output, bounds_hit, indicates whether the boundary has been\nhit for each component of x. If, for example, x is three-dimensional and has hit the search region's\nboundaries in x<sub>1</sub> and x<sub>2</sub>, but not in x<sub>3</sub>,\nbounds_hit = [True, True, False]. Here, we define a \"boundary hit\" in any component of x in the\nfollowing way:<br>\nbounds_hit[i] = True iff either x + δê<sub>i</sub> or x - δê<sub>i</sub> is outside\nthe defined search domain ∀ δ ∈ ℝ⁺, where ê<sub>i</sub> is the i-th unit vector.\n\nIn the following example, we try to find the global minimum of the Eggholder function within a\ncircle with radius 512 around the origin:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom rt_opt.optimizer import optimize\nfrom rt_opt.testproblems import Eggholder\n\n\nRADIUS = 512\n\n\ndef bounds_circle(x):\n    \"\"\"\n    Callback function for defining a circular bounded domain with a given radius around the origin.\n    \"\"\"\n\n    bounds_hit = np.zeros(len(x), dtype=bool)\n    if np.sqrt(np.sum(np.square(x))) > RADIUS:  # x outside of the circle\n        x = x / (np.sqrt(np.sum(np.square(x)))) * RADIUS\n        bounds_hit = np.ones(len(x), dtype=bool)\n\n    return x, bounds_hit\n\n\ndef gridmap2d(fun, x_specs, y_specs):\n    \"\"\"\n    Helper function for plotting the objective function.\n    \"\"\"\n\n    grid_x = np.linspace(*x_specs)\n    grid_y = np.linspace(*y_specs)\n    arr_z = np.empty(len(grid_x) * len(grid_y))\n    i = 0\n    for y in grid_y:\n        for x in grid_x:\n            arr_z[i] = fun(np.array([x, y]))\n            i += 1\n    arr_x, arr_y = np.meshgrid(grid_x, grid_y)\n    arr_z.shape = arr_x.shape\n    return arr_x, arr_y, arr_z\n\n\nproblem = Eggholder()\nret = optimize(problem.f, x0=[0, 0], bounds=bounds_circle, domain_scale=RADIUS)\n\nprint(f'Function minimum found at x = {ret.x}, yielding f(x) = {ret.fun}.')\n\n# Plot objective function and optimizer traces\nfig, ax = plt.subplots()\nX, Y, Z = gridmap2d(problem.f, (-512, 512, 100), (-512, 512, 100))\ncp = ax.contourf(X, Y, Z, levels=20)\nax.set_xlim([-512, 512])\nax.set_ylim([-512, 512])\nfig.colorbar(cp)\nfor single_trace in ret.trace.transpose(1, 0, 2):\n    ax.plot(single_trace[:, 0], single_trace[:, 1], 'o', c='white', ms=0.4)\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title(f'Problem: Eggholder', fontsize=10)\nplt.show()\n\n\n\n>>> Function minimum found at x = [418.56055019 171.04305027], yielding f(x) = -629.6336812770477.\n```\n![Example Trace](demo/example_trace.png)\n\n## Performance\nFor a performance comparison of rt_opt with other global optimization algorithms, namely\n*differential_evolution* and *dual_annealing* from scipy, as well as dlib's\n[LIPO]( http://blog.dlib.net/2017/12/a-global-optimization-algorithm-worth.html )-based\n*find_min_global*, see [here](demo/results). The comparison results were obtained by running\n[demo.py](demo/demo.py), where each of these four algorithms was evaluated 100 times with default\nparameters on a couple of 2D and 15D test functions (details on these functions can be found \n[here](https://en.wikipedia.org/wiki/Test_functions_for_optimization)).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/don-alejandrino/rt_opt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rt-opt",
    "package_url": "https://pypi.org/project/rt-opt/",
    "platform": "",
    "project_url": "https://pypi.org/project/rt-opt/",
    "project_urls": {
      "Bug Tracker": "https://github.com/don-alejandrino/rt_opt/issues",
      "Homepage": "https://github.com/don-alejandrino/rt_opt"
    },
    "release_url": "https://pypi.org/project/rt-opt/0.1.1/",
    "requires_dist": [
      "numpy (==1.19.5)",
      "scipy (==1.6.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Metaheuristic global optimization algorithm",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11499754,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a8e3365ab98c374fcb977139063348e309476c0d43609ad4e5a5fc6c47dce9a",
          "md5": "0f8b6ac9070f51616b0841175a129b92",
          "sha256": "f0eb401699868f5ed7c8e0e1a8c1f8c1e9fb62823db2a069e1ad17c19cb39eac"
        },
        "downloads": -1,
        "filename": "rt_opt-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f8b6ac9070f51616b0841175a129b92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22030,
        "upload_time": "2021-03-24T13:42:25",
        "upload_time_iso_8601": "2021-03-24T13:42:25.809744Z",
        "url": "https://files.pythonhosted.org/packages/0a/8e/3365ab98c374fcb977139063348e309476c0d43609ad4e5a5fc6c47dce9a/rt_opt-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6813d44465711e9b3d82a147e2940e3fd27752b7246302a93a96f4dc39e42a76",
          "md5": "63c87695498467d50448658b34529909",
          "sha256": "16d9ec60fe3e7515c530e0a6e5f924613a13d3dee4842764563291df43e37b65"
        },
        "downloads": -1,
        "filename": "rt_opt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63c87695498467d50448658b34529909",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21514,
        "upload_time": "2021-03-24T13:42:26",
        "upload_time_iso_8601": "2021-03-24T13:42:26.988562Z",
        "url": "https://files.pythonhosted.org/packages/68/13/d44465711e9b3d82a147e2940e3fd27752b7246302a93a96f4dc39e42a76/rt_opt-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7454ebe5bc27fd449e5b22ec16f18c1b22798eae0e54e1f2b693942f8bd6f091",
          "md5": "e2ed64474357253baa870ccdbb1984fc",
          "sha256": "319389b651181b1bfe432a9b91dbdd4b25cd6542bc2f3a7c939f364914a90815"
        },
        "downloads": -1,
        "filename": "rt_opt-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2ed64474357253baa870ccdbb1984fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21906,
        "upload_time": "2021-09-20T16:18:07",
        "upload_time_iso_8601": "2021-09-20T16:18:07.616741Z",
        "url": "https://files.pythonhosted.org/packages/74/54/ebe5bc27fd449e5b22ec16f18c1b22798eae0e54e1f2b693942f8bd6f091/rt_opt-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eed8e34dfc92179d3492ffd7da8dcdc0979af60f8845dc895ad3b2de158b7e70",
          "md5": "51e0452aba4d02ee2add34df443bfc13",
          "sha256": "61157a81df0b2e68d8d5cee5a0ffd981f3b325fe8cf9c53e1afa783375d02a4c"
        },
        "downloads": -1,
        "filename": "rt_opt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51e0452aba4d02ee2add34df443bfc13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21683,
        "upload_time": "2021-09-20T16:18:09",
        "upload_time_iso_8601": "2021-09-20T16:18:09.302801Z",
        "url": "https://files.pythonhosted.org/packages/ee/d8/e34dfc92179d3492ffd7da8dcdc0979af60f8845dc895ad3b2de158b7e70/rt_opt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7454ebe5bc27fd449e5b22ec16f18c1b22798eae0e54e1f2b693942f8bd6f091",
        "md5": "e2ed64474357253baa870ccdbb1984fc",
        "sha256": "319389b651181b1bfe432a9b91dbdd4b25cd6542bc2f3a7c939f364914a90815"
      },
      "downloads": -1,
      "filename": "rt_opt-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2ed64474357253baa870ccdbb1984fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 21906,
      "upload_time": "2021-09-20T16:18:07",
      "upload_time_iso_8601": "2021-09-20T16:18:07.616741Z",
      "url": "https://files.pythonhosted.org/packages/74/54/ebe5bc27fd449e5b22ec16f18c1b22798eae0e54e1f2b693942f8bd6f091/rt_opt-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eed8e34dfc92179d3492ffd7da8dcdc0979af60f8845dc895ad3b2de158b7e70",
        "md5": "51e0452aba4d02ee2add34df443bfc13",
        "sha256": "61157a81df0b2e68d8d5cee5a0ffd981f3b325fe8cf9c53e1afa783375d02a4c"
      },
      "downloads": -1,
      "filename": "rt_opt-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "51e0452aba4d02ee2add34df443bfc13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21683,
      "upload_time": "2021-09-20T16:18:09",
      "upload_time_iso_8601": "2021-09-20T16:18:09.302801Z",
      "url": "https://files.pythonhosted.org/packages/ee/d8/e34dfc92179d3492ffd7da8dcdc0979af60f8845dc895ad3b2de158b7e70/rt_opt-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}