{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<img src=\"https://raw.githubusercontent.com/huggingface/setfit/main/assets/setfit.png\">\n\n<p align=\"center\">\n    🤗 <a href=\"https://huggingface.co/setfit\" target=\"_blank\">Models & Datasets</a> | 📖 <a href=\"https://huggingface.co/blog/setfit\" target=\"_blank\">Blog</a> | 📃 <a href=\"https://arxiv.org/abs/2209.11055\" target=\"_blank\">Paper</a>\n</p>\n\n# SetFit - Efficient Few-shot Learning with Sentence Transformers\n\nSetFit is an efficient and prompt-free framework for few-shot fine-tuning of [Sentence Transformers](https://sbert.net/). It achieves high accuracy with little labeled data - for instance, with only 8 labeled examples per class on the Customer Reviews sentiment dataset, SetFit is competitive with fine-tuning RoBERTa Large on the full training set of 3k examples 🤯!\n\n\nCompared to other few-shot learning methods, SetFit has several unique features:\n\n* 🗣 **No prompts or verbalisers:** Current techniques for few-shot fine-tuning require handcrafted prompts or verbalisers to convert examples into a format that's suitable for the underlying language model. SetFit dispenses with prompts altogether by generating rich embeddings directly from text examples.\n* 🏎 **Fast to train:** SetFit doesn't require large-scale models like T0 or GPT-3 to achieve high accuracy. As a result, it is typically an order of magnitude (or more) faster to train and run inference with.\n* 🌎 **Multilingual support**: SetFit can be used with any [Sentence Transformer](https://huggingface.co/models?library=sentence-transformers&sort=downloads) on the Hub, which means you can classify text in multiple languages by simply fine-tuning a multilingual checkpoint.\n\n## Installation\n\nDownload and install `setfit` by running:\n\n```bash\npython -m pip install setfit\n```\n\nIf you want the bleeding-edge version, install from source by running:\n\n```bash\npython -m pip install git+https://github.com/huggingface/setfit.git\n```\n\n## Usage\n\nThe examples below provide a quick overview on the various features supported in `setfit`. For more examples, check out the [`notebooks`](https://github.com/huggingface/setfit/tree/main/notebooks) folder.\n\n\n### Training a SetFit model\n\n`setfit` is integrated with the [Hugging Face Hub](https://huggingface.co/) and provides two main classes:\n\n* `SetFitModel`: a wrapper that combines a pretrained body from `sentence_transformers` and a classification head from either [`scikit-learn`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html) or [`SetFitHead`](https://github.com/huggingface/setfit/blob/main/src/setfit/modeling.py) (a differentiable head built upon `PyTorch` with similar APIs to `sentence_transformers`).\n* `SetFitTrainer`: a helper class that wraps the fine-tuning process of SetFit.\n\nHere is an end-to-end example using a classification head from `scikit-learn`:\n\n\n```python\nfrom datasets import load_dataset\nfrom sentence_transformers.losses import CosineSimilarityLoss\n\nfrom setfit import SetFitModel, SetFitTrainer, sample_dataset\n\n\n# Load a dataset from the Hugging Face Hub\ndataset = load_dataset(\"sst2\")\n\n# Simulate the few-shot regime by sampling 8 examples per class\ntrain_dataset = sample_dataset(dataset[\"train\"], label_column=\"label\", num_samples=8)\neval_dataset = dataset[\"validation\"]\n\n# Load a SetFit model from Hub\nmodel = SetFitModel.from_pretrained(\"sentence-transformers/paraphrase-mpnet-base-v2\")\n\n# Create trainer\ntrainer = SetFitTrainer(\n    model=model,\n    train_dataset=train_dataset,\n    eval_dataset=eval_dataset,\n    loss_class=CosineSimilarityLoss,\n    metric=\"accuracy\",\n    batch_size=16,\n    num_iterations=20, # The number of text pairs to generate for contrastive learning\n    num_epochs=1, # The number of epochs to use for contrastive learning\n    column_mapping={\"sentence\": \"text\", \"label\": \"label\"} # Map dataset columns to text/label expected by trainer\n)\n\n# Train and evaluate\ntrainer.train()\nmetrics = trainer.evaluate()\n\n# Push model to the Hub\ntrainer.push_to_hub(\"my-awesome-setfit-model\")\n\n# Download from Hub and run inference\nmodel = SetFitModel.from_pretrained(\"lewtun/my-awesome-setfit-model\")\n# Run inference\npreds = model([\"i loved the spiderman movie!\", \"pineapple on pizza is the worst 🤮\"])\n```\n\nHere is an end-to-end example using `SetFitHead`:\n\n\n```python\nfrom datasets import load_dataset\nfrom sentence_transformers.losses import CosineSimilarityLoss\n\nfrom setfit import SetFitModel, SetFitTrainer, sample_dataset\n\n\n# Load a dataset from the Hugging Face Hub\ndataset = load_dataset(\"sst2\")\n\n# Simulate the few-shot regime by sampling 8 examples per class\ntrain_dataset = sample_dataset(dataset[\"train\"], label_column=\"label\", num_samples=8)\neval_dataset = dataset[\"validation\"]\n\n# Load a SetFit model from Hub\nmodel = SetFitModel.from_pretrained(\n    \"sentence-transformers/paraphrase-mpnet-base-v2\",\n    use_differentiable_head=True,\n    head_params={\"out_features\": num_classes},\n)\n\n# Create trainer\ntrainer = SetFitTrainer(\n    model=model,\n    train_dataset=train_dataset,\n    eval_dataset=eval_dataset,\n    loss_class=CosineSimilarityLoss,\n    metric=\"accuracy\",\n    batch_size=16,\n    num_iterations=20, # The number of text pairs to generate for contrastive learning\n    num_epochs=1, # The number of epochs to use for contrastive learning\n    column_mapping={\"sentence\": \"text\", \"label\": \"label\"} # Map dataset columns to text/label expected by trainer\n)\n\n# Train and evaluate\ntrainer.freeze() # Freeze the head\ntrainer.train() # Train only the body\n\n# Unfreeze the head and freeze the body -> head-only training\ntrainer.unfreeze(keep_body_frozen=True)\n# or\n# Unfreeze the head and unfreeze the body -> end-to-end training\ntrainer.unfreeze(keep_body_frozen=False)\n\ntrainer.train(\n    num_epochs=25, # The number of epochs to train the head or the whole model (body and head)\n    batch_size=16,\n    body_learning_rate=1e-5, # The body's learning rate\n    learning_rate=1e-2, # The head's learning rate\n    l2_weight=0.0, # Weight decay on **both** the body and head. If `None`, will use 0.01.\n)\nmetrics = trainer.evaluate()\n\n# Push model to the Hub\ntrainer.push_to_hub(\"my-awesome-setfit-model\")\n\n# Download from Hub and run inference\nmodel = SetFitModel.from_pretrained(\"lewtun/my-awesome-setfit-model\")\n# Run inference\npreds = model([\"i loved the spiderman movie!\", \"pineapple on pizza is the worst 🤮\"])\n```\n\nBased on our experiments, `SetFitHead` can achieve similar performance as using a `scikit-learn` head. We use `AdamW` as the optimizer and scale down learning rates by 0.5 every 5 epochs. For more details about the experiments, please check out [here](https://github.com/huggingface/setfit/pull/112#issuecomment-1295773537). We recommend using a large learning rate (e.g. `1e-2`) for `SetFitHead` and a small learning rate (e.g. `1e-5`) for the body in your first attempt.\n\n### Training on multilabel datasets\n\nTo train SetFit models on multilabel datasets, specify the `multi_target_strategy` argument when loading the pretrained model:\n\n#### Example using a classification head from `scikit-learn`:\n\n```python\nfrom setfit import SetFitModel\n\nmodel = SetFitModel.from_pretrained(\n    model_id,\n    multi_target_strategy=\"one-vs-rest\",\n)\n```\n\nThis will initialise a multilabel classification head from `sklearn` - the following options are available for `multi_target_strategy`:\n\n* `one-vs-rest`: uses a `OneVsRestClassifier` head.\n* `multi-output`: uses a `MultiOutputClassifier` head.\n* `classifier-chain`: uses a `ClassifierChain` head.\n\nFrom here, you can instantiate a `SetFitTrainer` using the same example above, and train it as usual.\n\n#### Example using the differentiable `SetFitHead`:\n\n```python\nfrom setfit import SetFitModel\n\nmodel = SetFitModel.from_pretrained(\n    model_id,\n    multi_target_strategy=\"one-vs-rest\"\n    use_differentiable_head=True,\n    head_params={\"out_features\": num_classes},\n)\n```\n**Note:** If you use the differentiable `SetFitHead` classifier head, it will automatically use `BCEWithLogitsLoss` for training. The prediction involves a `sigmoid` after which probabilities are rounded to 1 or 0. Furthermore, the `\"one-vs-rest\"` and `\"multi-output\"` multi-target strategies are equivalent for the differentiable `SetFitHead`.\n\n### Zero-shot text classification\n\nSetFit can also be applied to scenarios where no labels are available. To do so, create a synthetic dataset of training examples:\n\n```python\nfrom datasets import Dataset\nfrom setfit import get_templated_dataset\n\ncandidate_labels = [\"negative\", \"positive\"]\ntrain_dataset = get_templated_dataset(candidate_labels=candidate_labels, sample_size=8)\n```\n\nThis will create examples of the form `\"This sentence is {}\"`, where the `{}` is filled in with one of the candidate labels. From here you can train a SetFit model as usual:\n\n```python\nfrom setfit import SetFitModel, SetFitTrainer\n\nmodel = SetFitModel.from_pretrained(\"sentence-transformers/paraphrase-mpnet-base-v2\")\ntrainer = SetFitTrainer(\n    model=model,\n    train_dataset=train_dataset\n)\ntrainer.train()\n```\n\nWe find this approach typically outperforms the [zero-shot pipeline](https://huggingface.co/docs/transformers/v4.24.0/en/main_classes/pipelines#transformers.ZeroShotClassificationPipeline) in 🤗 Transformers (based on MNLI with Bart), while being 5x faster to generate predictions with.\n\n\n### Running hyperparameter search\n\n`SetFitTrainer` provides a `hyperparameter_search()` method that you can use to find good hyperparameters for your data. To use this feature, first install the `optuna` backend:\n\n```bash\npython -m pip install setfit[optuna]\n```\n\nTo use this method, you need to define two functions:\n\n* `model_init()`: A function that instantiates the model to be used. If provided, each call to `train()` will start from a new instance of the model as given by this function.\n* `hp_space()`: A function that defines the hyperparameter search space.\n\nHere is an example of a `model_init()` function that we'll use to scan over the hyperparameters associated with the classification head in `SetFitModel`:\n\n```python\nfrom setfit import SetFitModel\n\ndef model_init(params):\n    params = params or {}\n    max_iter = params.get(\"max_iter\", 100)\n    solver = params.get(\"solver\", \"liblinear\")\n    params = {\n        \"head_params\": {\n            \"max_iter\": max_iter,\n            \"solver\": solver,\n        }\n    }\n    return SetFitModel.from_pretrained(\"sentence-transformers/paraphrase-albert-small-v2\", **params)\n```\n\nSimilarly, to scan over hyperparameters associated with the SetFit training process, we can define a `hp_space()` function as follows:\n\n```python\ndef hp_space(trial):  # Training parameters\n    return {\n        \"learning_rate\": trial.suggest_float(\"learning_rate\", 1e-6, 1e-4, log=True),\n        \"num_epochs\": trial.suggest_int(\"num_epochs\", 1, 5),\n        \"batch_size\": trial.suggest_categorical(\"batch_size\", [4, 8, 16, 32, 64]),\n        \"seed\": trial.suggest_int(\"seed\", 1, 40),\n        \"num_iterations\": trial.suggest_categorical(\"num_iterations\", [5, 10, 20]),\n        \"max_iter\": trial.suggest_int(\"max_iter\", 50, 300),\n        \"solver\": trial.suggest_categorical(\"solver\", [\"newton-cg\", \"lbfgs\", \"liblinear\"]),\n    }\n```\n\n**Note:** In practice, we found `num_iterations` to be the most important hyperparameter for the contrastive learning process.\n\nThe next step is to instantiate a `SetFitTrainer` and call `hyperparameter_search()`:\n\n```python\nfrom datasets import Dataset\nfrom setfit import SetFitTrainer\n\ndataset = Dataset.from_dict(\n            {\"text_new\": [\"a\", \"b\", \"c\"], \"label_new\": [0, 1, 2], \"extra_column\": [\"d\", \"e\", \"f\"]}\n        )\n\ntrainer = SetFitTrainer(\n    train_dataset=dataset,\n    eval_dataset=dataset,\n    model_init=model_init,\n    column_mapping={\"text_new\": \"text\", \"label_new\": \"label\"},\n)\nbest_run = trainer.hyperparameter_search(direction=\"maximize\", hp_space=hp_space, n_trials=20)\n```\n\nFinally, you can apply the hyperparameters you found to the trainer, and lock in the optimal model, before training for\na final time.\n\n```python\ntrainer.apply_hyperparameters(best_run.hyperparameters, final_model=True)\ntrainer.train()\n```\n\n## Compressing a SetFit model with knowledge distillation\n\nIf you have access to unlabeled data, you can use knowledge distillation to compress a trained SetFit model into a smaller version. The result is a model that can run inference much faster, with little to no drop in accuracy. Here's an end-to-end example (see our paper for more details):\n\n```python\nfrom datasets import load_dataset\nfrom sentence_transformers.losses import CosineSimilarityLoss\n\nfrom setfit import SetFitModel, SetFitTrainer, DistillationSetFitTrainer, sample_dataset\n\n# Load a dataset from the Hugging Face Hub\ndataset = load_dataset(\"ag_news\")\n\n# Create a sample few-shot dataset to train the teacher model\ntrain_dataset_teacher = sample_dataset(dataset[\"train\"], label_column=\"label\", num_samples=16)\n# Create a dataset of unlabeled examples to train the student\ntrain_dataset_student = dataset[\"train\"].shuffle(seed=0).select(range(500))\n# Dataset for evaluation\neval_dataset = dataset[\"test\"]\n\n# Load teacher model\nteacher_model = SetFitModel.from_pretrained(\n    \"sentence-transformers/paraphrase-mpnet-base-v2\"\n)\n\n# Create trainer for teacher model\nteacher_trainer = SetFitTrainer(\n    model=teacher_model,\n    train_dataset=train_dataset_teacher,\n    eval_dataset=eval_dataset,\n    loss_class=CosineSimilarityLoss,\n)\n\n# Train teacher model\nteacher_trainer.train()\n\n# Load small student model\nstudent_model = SetFitModel.from_pretrained(\"paraphrase-MiniLM-L3-v2\")\n\n# Create trainer for knowledge distillation\nstudent_trainer = DistillationSetFitTrainer(\n    teacher_model=teacher_model,\n    train_dataset=train_dataset_student,\n    student_model=student_model,\n    eval_dataset=eval_dataset,\n    loss_class=CosineSimilarityLoss,\n    metric=\"accuracy\",\n    batch_size=16,\n    num_iterations=20,\n    num_epochs=1,\n)\n\n# Train student with knowledge distillation\nstudent_trainer.train()\n```\n\n\n## Reproducing the results from the paper\n\nWe provide scripts to reproduce the results for SetFit and various baselines presented in Table 2 of our paper. Check out the setup and training instructions in the `scripts/` directory.\n\n## Developer installation\n\nTo run the code in this project, first create a Python virtual environment using e.g. Conda:\n\n```bash\nconda create -n setfit python=3.9 && conda activate setfit\n```\n\nThen install the base requirements with:\n\n```bash\npython -m pip install -e '.[dev]'\n```\n\nThis will install `datasets` and packages like `black` and `isort` that we use to ensure consistent code formatting.\n\n### Formatting your code\n\nWe use `black` and `isort` to ensure consistent code formatting. After following the installation steps, you can check your code locally by running:\n\n```\nmake style && make quality\n```\n\n\n\n## Project structure\n\n```\n├── LICENSE\n├── Makefile        <- Makefile with commands like `make style` or `make tests`\n├── README.md       <- The top-level README for developers using this project.\n├── notebooks       <- Jupyter notebooks.\n├── final_results   <- Model predictions from the paper\n├── scripts         <- Scripts for training and inference\n├── setup.cfg       <- Configuration file to define package metadata\n├── setup.py        <- Make this project pip installable with `pip install -e`\n├── src             <- Source code for SetFit\n└── tests           <- Unit tests\n```\n\n## Related work\n* [jxpress/setfit-pytorch-lightning](https://github.com/jxpress/setfit-pytorch-lightning) - A PyTorch Lightning implementation of SetFit.\n\n## Citation\n\n```@misc{https://doi.org/10.48550/arxiv.2209.11055,\n  doi = {10.48550/ARXIV.2209.11055},\n  url = {https://arxiv.org/abs/2209.11055},\n  author = {Tunstall, Lewis and Reimers, Nils and Jo, Unso Eun Seo and Bates, Luke and Korat, Daniel and Wasserblat, Moshe and Pereg, Oren},\n  keywords = {Computation and Language (cs.CL), FOS: Computer and information sciences, FOS: Computer and information sciences},\n  title = {Efficient Few-Shot Learning Without Prompts},\n  publisher = {arXiv},\n  year = {2022},\n  copyright = {Creative Commons Attribution 4.0 International}}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/SetFit/setfit/tags",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SetFit/setfit",
    "keywords": "nlp,machine learning,fewshot learning,transformers",
    "license": "Apache 2.0",
    "maintainer": "Lewis Tunstall, Tom Aarsen",
    "maintainer_email": "lewis@huggingface.co",
    "name": "setfit",
    "package_url": "https://pypi.org/project/setfit/",
    "platform": null,
    "project_url": "https://pypi.org/project/setfit/",
    "project_urls": {
      "Download": "https://github.com/SetFit/setfit/tags",
      "Homepage": "https://github.com/SetFit/setfit"
    },
    "release_url": "https://pypi.org/project/setfit/0.6.0/",
    "requires_dist": [
      "datasets (>=2.3.0)",
      "sentence-transformers (>=2.2.1)",
      "evaluate (>=0.3.0)",
      "datasets (==2.3.0) ; extra == 'compat_tests'",
      "sentence-transformers (==2.2.1) ; extra == 'compat_tests'",
      "evaluate (==0.3.0) ; extra == 'compat_tests'",
      "pytest ; extra == 'compat_tests'",
      "pytest-cov ; extra == 'compat_tests'",
      "onnxruntime ; extra == 'compat_tests'",
      "onnx ; extra == 'compat_tests'",
      "skl2onnx ; extra == 'compat_tests'",
      "hummingbird-ml ; extra == 'compat_tests'",
      "openvino (>=2022.3) ; extra == 'compat_tests'",
      "flake8 ; extra == 'dev'",
      "optuna ; extra == 'dev'",
      "tabulate ; extra == 'dev'",
      "skl2onnx ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "openvino (>=2022.3) ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "onnx ; extra == 'dev'",
      "onnxruntime ; extra == 'dev'",
      "black ; extra == 'dev'",
      "hummingbird-ml ; extra == 'dev'",
      "onnxruntime ; extra == 'onnx'",
      "onnx ; extra == 'onnx'",
      "skl2onnx ; extra == 'onnx'",
      "onnxruntime ; extra == 'openvino'",
      "onnx ; extra == 'openvino'",
      "skl2onnx ; extra == 'openvino'",
      "hummingbird-ml ; extra == 'openvino'",
      "openvino (>=2022.3) ; extra == 'openvino'",
      "optuna ; extra == 'optuna'",
      "black ; extra == 'quality'",
      "flake8 ; extra == 'quality'",
      "isort ; extra == 'quality'",
      "tabulate ; extra == 'quality'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "onnxruntime ; extra == 'tests'",
      "onnx ; extra == 'tests'",
      "skl2onnx ; extra == 'tests'",
      "hummingbird-ml ; extra == 'tests'",
      "openvino (>=2022.3) ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Efficient few-shot learning with Sentence Transformers",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16746675,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5c0db1785f653a3fe44710b01ff271812e26b953122343cffbd8aaf216005c8",
          "md5": "a018fb210b9fccc53fe0d18dd2d61318",
          "sha256": "b6bd2a44ddcaa2500c3bfada9d979cab18983a0274d9d22d6f02ab81e8c74a23"
        },
        "downloads": -1,
        "filename": "setfit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a018fb210b9fccc53fe0d18dd2d61318",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11011,
        "upload_time": "2022-07-08T09:24:47",
        "upload_time_iso_8601": "2022-07-08T09:24:47.576925Z",
        "url": "https://files.pythonhosted.org/packages/d5/c0/db1785f653a3fe44710b01ff271812e26b953122343cffbd8aaf216005c8/setfit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0321aeac52e0e61f3984bddda572fab1b6c392d9122fedbab774d6724b05aa1b",
          "md5": "8e381a051b2379cde26b13f60a4c3182",
          "sha256": "21f1db35235948756da8dbe9f529fdc6ea4e5d3782704cd2c152a6552f5929df"
        },
        "downloads": -1,
        "filename": "setfit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e381a051b2379cde26b13f60a4c3182",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9159,
        "upload_time": "2022-07-08T09:24:49",
        "upload_time_iso_8601": "2022-07-08T09:24:49.691614Z",
        "url": "https://files.pythonhosted.org/packages/03/21/aeac52e0e61f3984bddda572fab1b6c392d9122fedbab774d6724b05aa1b/setfit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1ff6e46bd9fc22f68848ed5f6d192ebefe902ffb13eb1888b31ee5f44fa3208",
          "md5": "e59f228df47cc2c57fec5cc7944b8dee",
          "sha256": "50e0a65bbe8eacfdfca2d8268f488f93792d449b6504e9486bbc5582d598da9c"
        },
        "downloads": -1,
        "filename": "setfit-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e59f228df47cc2c57fec5cc7944b8dee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13720,
        "upload_time": "2022-09-19T11:11:31",
        "upload_time_iso_8601": "2022-09-19T11:11:31.764785Z",
        "url": "https://files.pythonhosted.org/packages/a1/ff/6e46bd9fc22f68848ed5f6d192ebefe902ffb13eb1888b31ee5f44fa3208/setfit-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a570f0f3a2418b31dbea8d20ef626009ae0063d4214e4bb534abade994a65691",
          "md5": "c24c626edc10664df367364cf99a5638",
          "sha256": "7196bcaeb92808c2b32f3cde84cf7ffde3a32fc7acfc5d116322dc5a4618a3ff"
        },
        "downloads": -1,
        "filename": "setfit-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c24c626edc10664df367364cf99a5638",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14110,
        "upload_time": "2022-09-19T11:11:33",
        "upload_time_iso_8601": "2022-09-19T11:11:33.650140Z",
        "url": "https://files.pythonhosted.org/packages/a5/70/f0f3a2418b31dbea8d20ef626009ae0063d4214e4bb534abade994a65691/setfit-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f29866734ce1048a8296be4bc02091d59c39bade28a9dc0970ea1cddd21916",
          "md5": "fdacc263922d4c464ac6219e20e69d8c",
          "sha256": "3935b93eb77f200abe98779e6aa5ec75dd176794d83d4574a68c1739bd61b949"
        },
        "downloads": -1,
        "filename": "setfit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdacc263922d4c464ac6219e20e69d8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17705,
        "upload_time": "2022-10-04T07:17:50",
        "upload_time_iso_8601": "2022-10-04T07:17:50.343502Z",
        "url": "https://files.pythonhosted.org/packages/21/f2/9866734ce1048a8296be4bc02091d59c39bade28a9dc0970ea1cddd21916/setfit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2c3e8d7b76166853441a5688f530c583e29d0b6a0d81752af4cda4ee13656e5",
          "md5": "037cf09136d0b26b68d7f9ff8f7241dc",
          "sha256": "ad44321fade05c20e160671c087543aaa7c838dcd8d17e5e67cd2fff185105f0"
        },
        "downloads": -1,
        "filename": "setfit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "037cf09136d0b26b68d7f9ff8f7241dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18801,
        "upload_time": "2022-10-04T07:17:52",
        "upload_time_iso_8601": "2022-10-04T07:17:52.357643Z",
        "url": "https://files.pythonhosted.org/packages/a2/c3/e8d7b76166853441a5688f530c583e29d0b6a0d81752af4cda4ee13656e5/setfit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "510e5e957f5acef7b833db5ef95aae0a513c51c172d368aa4e3f0139f9edda7f",
          "md5": "94af8dfed56e633bc415f43930926225",
          "sha256": "14695912bc13d9be82ee24ea2488bf47640e975cb6921ff4cabe2b17a01e25ae"
        },
        "downloads": -1,
        "filename": "setfit-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94af8dfed56e633bc415f43930926225",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17705,
        "upload_time": "2022-10-06T10:37:07",
        "upload_time_iso_8601": "2022-10-06T10:37:07.566368Z",
        "url": "https://files.pythonhosted.org/packages/51/0e/5e957f5acef7b833db5ef95aae0a513c51c172d368aa4e3f0139f9edda7f/setfit-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d9af759a5f9dc3b8647c5708ebf7b552af8dee04ddd65e3c77190086cc0b78c",
          "md5": "1192a00715b7dd9e837c24b58859c58f",
          "sha256": "471cf2a299d970f59f372058c518887e46cbdd3dec99b6845990eb3957043f18"
        },
        "downloads": -1,
        "filename": "setfit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1192a00715b7dd9e837c24b58859c58f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18803,
        "upload_time": "2022-10-06T10:37:09",
        "upload_time_iso_8601": "2022-10-06T10:37:09.417794Z",
        "url": "https://files.pythonhosted.org/packages/3d/9a/f759a5f9dc3b8647c5708ebf7b552af8dee04ddd65e3c77190086cc0b78c/setfit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70815d11a0a5223ee360a5e8760b356c83730c01251a07008eb4ea1c76ace8e6",
          "md5": "dbdead7f633068897695df732046b8eb",
          "sha256": "98bc2e957d6348397708a7f787a97a6bec9baf50027311475c0aeb3ee45a768b"
        },
        "downloads": -1,
        "filename": "setfit-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbdead7f633068897695df732046b8eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21237,
        "upload_time": "2022-10-11T15:39:40",
        "upload_time_iso_8601": "2022-10-11T15:39:40.941126Z",
        "url": "https://files.pythonhosted.org/packages/70/81/5d11a0a5223ee360a5e8760b356c83730c01251a07008eb4ea1c76ace8e6/setfit-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c57a5962ea6ba77494137d9716724bc735f3398d138770c2a5a6204baa73737",
          "md5": "7355e2694b3ef582adef72ed90982bd9",
          "sha256": "51fc568148b27f0146d185f12d291e10b6a4f2040dc931a95f31ca3764e80297"
        },
        "downloads": -1,
        "filename": "setfit-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7355e2694b3ef582adef72ed90982bd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22922,
        "upload_time": "2022-10-11T15:39:43",
        "upload_time_iso_8601": "2022-10-11T15:39:43.279022Z",
        "url": "https://files.pythonhosted.org/packages/1c/57/a5962ea6ba77494137d9716724bc735f3398d138770c2a5a6204baa73737/setfit-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "371769d13001770e2cadb4a385c48fc98a988e440b1525290c51d0565bb126a5",
          "md5": "bdb89eedfc6f756025a48e94b7c1a265",
          "sha256": "4dedf123a34f88b7f496b1c8d34720fb0277c3493071108187a7fdf04003c758"
        },
        "downloads": -1,
        "filename": "setfit-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdb89eedfc6f756025a48e94b7c1a265",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21676,
        "upload_time": "2022-10-14T10:44:32",
        "upload_time_iso_8601": "2022-10-14T10:44:32.559723Z",
        "url": "https://files.pythonhosted.org/packages/37/17/69d13001770e2cadb4a385c48fc98a988e440b1525290c51d0565bb126a5/setfit-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79e21fee2879a718a56a7087af79d422fc4c1f3cf137c16e4b25b770934c2ac1",
          "md5": "64d2eb0f331543102b0ad3ebc8136d71",
          "sha256": "e283bea2402eb4449d5c556eee74959ddb330f858675604037100ec47190ac08"
        },
        "downloads": -1,
        "filename": "setfit-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "64d2eb0f331543102b0ad3ebc8136d71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23652,
        "upload_time": "2022-10-14T10:44:34",
        "upload_time_iso_8601": "2022-10-14T10:44:34.702010Z",
        "url": "https://files.pythonhosted.org/packages/79/e2/1fee2879a718a56a7087af79d422fc4c1f3cf137c16e4b25b770934c2ac1/setfit-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c22f90aea4e7be7c80c975846f8e151898a1f69ffa0f4d5fdb07f5d11a9d718",
          "md5": "8f2e0589106af8fed9c04e89d29603ad",
          "sha256": "7a178a01eb8d2c22f9e4564d7d7a9562e7fd743552010e25f0163a408fca810f"
        },
        "downloads": -1,
        "filename": "setfit-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f2e0589106af8fed9c04e89d29603ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31877,
        "upload_time": "2022-11-08T14:11:13",
        "upload_time_iso_8601": "2022-11-08T14:11:13.519527Z",
        "url": "https://files.pythonhosted.org/packages/0c/22/f90aea4e7be7c80c975846f8e151898a1f69ffa0f4d5fdb07f5d11a9d718/setfit-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43a6324e8e54883b5b0d5a9d6aa5f57901aabe5f0e14c32a52c9c6e774fd5d1e",
          "md5": "0c7e10e8d3b42ea5f5c8a2b64dc26a44",
          "sha256": "06e2e18e2fcea377a574e6fa707f7b409aa744ad4a6b7bf03fe35f3e39b87f47"
        },
        "downloads": -1,
        "filename": "setfit-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c7e10e8d3b42ea5f5c8a2b64dc26a44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34343,
        "upload_time": "2022-11-08T14:11:15",
        "upload_time_iso_8601": "2022-11-08T14:11:15.841915Z",
        "url": "https://files.pythonhosted.org/packages/43/a6/324e8e54883b5b0d5a9d6aa5f57901aabe5f0e14c32a52c9c6e774fd5d1e/setfit-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b22ccec75cc81ad2246355f0049be192c1d63bf01fdd73d7ec6a00cc2cf2e012",
          "md5": "547ed5ae332237cd12908071d37a5bc2",
          "sha256": "30eabfe1ecab410ef77b023f0ad338ba486b7fa64482ad98aae7097ea3b16c1e"
        },
        "downloads": -1,
        "filename": "setfit-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "547ed5ae332237cd12908071d37a5bc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31932,
        "upload_time": "2022-11-08T15:24:53",
        "upload_time_iso_8601": "2022-11-08T15:24:53.105775Z",
        "url": "https://files.pythonhosted.org/packages/b2/2c/cec75cc81ad2246355f0049be192c1d63bf01fdd73d7ec6a00cc2cf2e012/setfit-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc7d6fa3652f1eba38a3222030d3b1169826711d24c8985dbae0dfbee947661f",
          "md5": "b3c36ca3e073f302bba5f6e55c6b5f4a",
          "sha256": "298f3687767d256464b7898344c2d9fc3c26edff027606a5a10f6df1a77505ca"
        },
        "downloads": -1,
        "filename": "setfit-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b3c36ca3e073f302bba5f6e55c6b5f4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33569,
        "upload_time": "2022-11-08T15:24:55",
        "upload_time_iso_8601": "2022-11-08T15:24:55.387242Z",
        "url": "https://files.pythonhosted.org/packages/fc/7d/6fa3652f1eba38a3222030d3b1169826711d24c8985dbae0dfbee947661f/setfit-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0a0e2421009c6a1d7278ab55cf5e03ccc5e91276b56056eb54bd8d47a5fd374",
          "md5": "2a102abadabe5a9b7a5bcb4f99dd10a2",
          "sha256": "2854800c6a3eb55dfb5f08d54f4f3122102650c391d7c968b00f3f9693b3e4a5"
        },
        "downloads": -1,
        "filename": "setfit-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a102abadabe5a9b7a5bcb4f99dd10a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40764,
        "upload_time": "2022-12-14T14:58:49",
        "upload_time_iso_8601": "2022-12-14T14:58:49.178838Z",
        "url": "https://files.pythonhosted.org/packages/b0/a0/e2421009c6a1d7278ab55cf5e03ccc5e91276b56056eb54bd8d47a5fd374/setfit-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4d1e2c5c5484b0e22c2f795cfc8c9ffb92e2d2f02b5aa0dd7bc93952293e9ca",
          "md5": "8fd7b67bc76fbc535f5dce5994882e09",
          "sha256": "6624c8335776207872d8ffd034b2f604e994603351aaf9e878342f96a4494f61"
        },
        "downloads": -1,
        "filename": "setfit-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8fd7b67bc76fbc535f5dce5994882e09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39720,
        "upload_time": "2022-12-14T14:58:51",
        "upload_time_iso_8601": "2022-12-14T14:58:51.885580Z",
        "url": "https://files.pythonhosted.org/packages/c4/d1/e2c5c5484b0e22c2f795cfc8c9ffb92e2d2f02b5aa0dd7bc93952293e9ca/setfit-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd6006c033a28e0d5bc960b982240cd27872fa231bf5948a19f75dee06e11d9c",
          "md5": "6cb3126041c47e970e24b340d42fa4cd",
          "sha256": "a1bfa911c1f970956eed719559f3b4ec575d2ff0889651d9929d8b84ff55dd8a"
        },
        "downloads": -1,
        "filename": "setfit-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cb3126041c47e970e24b340d42fa4cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44406,
        "upload_time": "2023-02-08T13:39:18",
        "upload_time_iso_8601": "2023-02-08T13:39:18.241230Z",
        "url": "https://files.pythonhosted.org/packages/dd/60/06c033a28e0d5bc960b982240cd27872fa231bf5948a19f75dee06e11d9c/setfit-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b5f15e95f2cb864d412cd2c7b4b4fd6152baa6802b2c87d69dfed06f684112f",
          "md5": "e4c5b487effdd462a9ce2986cee61eff",
          "sha256": "6849d9232d3f82f00458ac77c604d841dd92b8e8fb4c64aefa4e5ea5e2a5ad98"
        },
        "downloads": -1,
        "filename": "setfit-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e4c5b487effdd462a9ce2986cee61eff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43401,
        "upload_time": "2023-02-08T13:39:20",
        "upload_time_iso_8601": "2023-02-08T13:39:20.440674Z",
        "url": "https://files.pythonhosted.org/packages/4b/5f/15e95f2cb864d412cd2c7b4b4fd6152baa6802b2c87d69dfed06f684112f/setfit-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd6006c033a28e0d5bc960b982240cd27872fa231bf5948a19f75dee06e11d9c",
        "md5": "6cb3126041c47e970e24b340d42fa4cd",
        "sha256": "a1bfa911c1f970956eed719559f3b4ec575d2ff0889651d9929d8b84ff55dd8a"
      },
      "downloads": -1,
      "filename": "setfit-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6cb3126041c47e970e24b340d42fa4cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 44406,
      "upload_time": "2023-02-08T13:39:18",
      "upload_time_iso_8601": "2023-02-08T13:39:18.241230Z",
      "url": "https://files.pythonhosted.org/packages/dd/60/06c033a28e0d5bc960b982240cd27872fa231bf5948a19f75dee06e11d9c/setfit-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b5f15e95f2cb864d412cd2c7b4b4fd6152baa6802b2c87d69dfed06f684112f",
        "md5": "e4c5b487effdd462a9ce2986cee61eff",
        "sha256": "6849d9232d3f82f00458ac77c604d841dd92b8e8fb4c64aefa4e5ea5e2a5ad98"
      },
      "downloads": -1,
      "filename": "setfit-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e4c5b487effdd462a9ce2986cee61eff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43401,
      "upload_time": "2023-02-08T13:39:20",
      "upload_time_iso_8601": "2023-02-08T13:39:20.440674Z",
      "url": "https://files.pythonhosted.org/packages/4b/5f/15e95f2cb864d412cd2c7b4b4fd6152baa6802b2c87d69dfed06f684112f/setfit-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}