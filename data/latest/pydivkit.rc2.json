{
  "info": {
    "author": "Vladislav Bakaev",
    "author_email": "bakaev-vlad@yandex-team.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: User Interfaces",
      "Typing :: Typed"
    ],
    "description": "PyDIVKit examples\n=================\n\nThis library is designed to work with [DivKit](http://divkit.tech/) with python.\n\nFeatures:\n* Declarative and imperative DivKit blocks definition\n* Native Type-hints support\n* Complete object-oriented API\n* IDE type checks and suggestions\n\nObject construction\n-------------------\n\nThe main idea is to provide a tool for creating blocks using Python objects.\n\n```python\nimport json\nimport pydivkit as dk\n\ncontainer = dk.DivContainer(\n    items=[\n        dk.DivGallery(\n            items=[\n                dk.DivText(text=\"Hello from pydivkit\")\n            ]\n        )\n    ]\n)\n\nprint(json.dumps(container.dict(), indent=1))\n# {\n#  \"type\": \"container\",\n#  \"items\": [\n#   {\n#    \"type\": \"gallery\",\n#    \"items\": [\n#     {\n#      \"type\": \"text\",\n#      \"text\": \"Hello from pydivkit\"\n#     }\n#    ]\n#   }\n#  ]\n# }\n```\n\nSlider example\n--------------\n\nFollowing code is a rewritten slider example using pydivkit.\n\n```python\nimport pydivkit as dk\n\n\nslider = dk.DivData(\n    log_id=\"sample_card\",\n    states=[\n        dk.DivDataState(\n            state_id=0,\n            div=dk.DivSlider(\n                width=dk.DivMatchParentSize(),\n                max_value=10,\n                min_value=1,\n                thumb_style=dk.DivShapeDrawable(\n                    color=\"#00b300\",\n                    stroke=dk.DivStroke(\n                        color=\"#ffffff\",\n                        width=3,\n                    ),\n                    shape=dk.DivRoundedRectangleShape(\n                        item_width=dk.DivFixedSize(value=32),\n                        item_height=dk.DivFixedSize(value=32),\n                        corner_radius=dk.DivFixedSize(value=100)\n                    ),\n                ),\n                track_active_style=dk.DivShapeDrawable(\n                    color=\"#00b300\",\n                    shape=dk.DivRoundedRectangleShape(\n                        item_height=dk.DivFixedSize(value=6)\n                    )\n                ),\n                track_inactive_style=dk.DivShapeDrawable(\n                    color=\"#20000000\",\n                    shape=dk.DivRoundedRectangleShape(\n                        item_height=dk.DivFixedSize(value=6)\n                    )\n                )\n            )\n        )\n    ]\n)\n\n```\n\nThis example might be serialised like this:\n\n```python\nimport json\n\nprint(json.dumps(slider.dict(), indent=1))\n# {\n#  \"log_id\": \"sample_card\",\n#  \"states\": [\n#   {\n#    \"div\": {\n#     \"type\": \"slider\",\n#     \"max_value\": 10,\n#     \"min_value\": 1,\n#     \"thumb_style\": {\n#      \"type\": \"shape_drawable\",\n#      \"color\": \"#00b300\",\n#      \"shape\": {\n#       \"type\": \"rounded_rectangle\",\n#       \"corner_radius\": {\n#        \"type\": \"fixed\",\n#        \"value\": 100\n#       },\n#       \"item_height\": {\n#        \"type\": \"fixed\",\n#        \"value\": 32\n#       },\n#       \"item_width\": {\n#        \"type\": \"fixed\",\n#        \"value\": 32\n#       }\n#      },\n#      \"stroke\": {\n#       \"color\": \"#ffffff\",\n#       \"width\": 3\n#      }\n#     },\n#     \"track_active_style\": {\n#      \"type\": \"shape_drawable\",\n#      \"color\": \"#00b300\",\n#      \"shape\": {\n#       \"type\": \"rounded_rectangle\",\n#       \"item_height\": {\n#        \"type\": \"fixed\",\n#        \"value\": 6\n#       }\n#      }\n#     },\n#     \"track_inactive_style\": {\n#      \"type\": \"shape_drawable\",\n#      \"color\": \"#20000000\",\n#      \"shape\": {\n#       \"type\": \"rounded_rectangle\",\n#       \"item_height\": {\n#        \"type\": \"fixed\",\n#        \"value\": 6\n#       }\n#      }\n#     },\n#     \"width\": {\n#      \"type\": \"match_parent\"\n#     }\n#    },\n#    \"state_id\": 0\n#   }\n#  ]\n# }\n```\n\nTemplating and DRY\n------------------\n\nOf course, manually building blocks from your code every time is boring. \nSo, the first idea is to move the initialization of DivKit objects \ninto functions.\n\n```python\n# Naive DRY example which strictly non-recommended\nimport pydivkit as dk\n\n\ndef get_size(value: int = 32) -> dk.DivFixedSize:\n    return dk.DivFixedSize(value=value)\n\n\ndef get_shape() -> dk.DivShape:\n    return dk.DivShape(\n        item_width=get_size(),\n        item_height=get_size(),\n        corner_radius=get_size(100)\n    )\n\n    \nslider_shape = get_shape()\n\nslider = dk.DivData(\n    log_id=\"sample_card\",\n    states=[\n        dk.DivDataState(\n            # other arguments\n            div=dk.DivSlider(\n                thumb_style=dk.DivShapeDrawable(\n                    shape=slider_shape,\n                    # other arguments\n                ),\n                # other arguments\n            )\n        )\n    ]\n)\n```\n\nLooks a little better, but this approach doesn't scale well. To simplify layout \nand save traffic, DivKit has templates. This is a way to layout similar elements\nwithout having to declare the complete json, but just declare a template and use\nthis many times in similar items.\n\n**PyDivKit supports defining templates through the inheritance.**\n\nLet's define an example card:\n\n```python\nimport json\n\nimport pydivkit as dk\n\n\nclass CategoriesItem(dk.DivContainer):\n    \"\"\"\n    Class inherited from dk.DivContainer will have a template\n    \"\"\"\n\n    # Special object for mark this fields a DivKit field in template\n    icon_url: str = dk.Field()\n    text: str = dk.Field()\n\n    # Set defaults layout for in the template\n    width = dk.DivWrapContentSize()\n    background = [dk.DivSolidBackground(color=\"#f0f0f0\")]\n    content_alignment_vertical = dk.DivAlignmentVertical.CENTER\n    orientation = dk.DivContainerOrientation.HORIZONTAL\n    paddings = dk.DivEdgeInsets(left=12, right=12, top=10, bottom=10)\n    border = dk.DivBorder(corner_radius=12)\n    items = [\n        dk.DivImage(\n            width=dk.DivFixedSize(value=20),\n            height=dk.DivFixedSize(value=20),\n            margins=dk.DivEdgeInsets(right=6),\n\n            # Special object Ref it's a reference for Field property\n            image_url=dk.Ref(icon_url),\n        ),\n        dk.DivText(\n            width=dk.DivWrapContentSize(),\n            max_lines=1,\n\n            # Special object Ref it's a reference for Field property\n            text=dk.Ref(text),\n        ),\n    ]\n\n\nBASE_URL = \"https://leonardo.edadeal.io/dyn/re/segments/level1/96\"\n\n\n# So after class definition you might use all the `Field` marked property\n# names as an argument.\n\ngallery = dk.DivGallery(\n    items=[\n        CategoriesItem(\n            text=\"Food\", icon_url=f\"{BASE_URL}/food.png\",\n        ),\n        CategoriesItem(\n            text=\"Alcohol\", icon_url=f\"{BASE_URL}/alcohol.png\",\n        ),\n        CategoriesItem(\n            text=\"Household\", icon_url=f\"{BASE_URL}/household.png\",\n        ),\n    ]\n)\n\nprint(json.dumps(dk.make_div(gallery), indent=1, ensure_ascii=False))\n# {\n#  \"templates\": {\n#   \"__main__.CategoriesItem\": {\n#    \"type\": \"container\",\n#    \"background\": [\n#     {\n#      \"type\": \"solid\",\n#      \"color\": \"#f0f0f0\"\n#     }\n#    ],\n#    \"border\": {\n#     \"corner_radius\": 12\n#    },\n#    \"content_alignment_vertical\": \"center\",\n#    \"items\": [\n#     {\n#      \"type\": \"image\",\n#      \"height\": {\n#       \"type\": \"fixed\",\n#       \"value\": 20\n#      },\n#      \"$image_url\": \"icon_url\",\n#      \"margins\": {\n#       \"right\": 6\n#      },\n#      \"width\": {\n#       \"type\": \"fixed\",\n#       \"value\": 20\n#      }\n#     },\n#     {\n#      \"type\": \"text\",\n#      \"max_lines\": 1,\n#      \"$text\": \"text\",\n#      \"width\": {\n#       \"type\": \"wrap_content\"\n#      }\n#     }\n#    ],\n#    \"orientation\": \"horizontal\",\n#    \"paddings\": {\n#     \"bottom\": 10,\n#     \"left\": 12,\n#     \"right\": 12,\n#     \"top\": 10\n#    },\n#    \"width\": {\n#     \"type\": \"wrap_content\"\n#    }\n#   }\n#  },\n#  \"card\": {\n#   \"log_id\": \"card\",\n#   \"states\": [\n#    {\n#     \"div\": {\n#      \"type\": \"gallery\",\n#      \"items\": [\n#       {\n#        \"type\": \"__main__.CategoriesItem\",\n#        \"icon_url\": \"https://leonardo.edadeal.io/dyn/re/segments/level1/96/food.png\",\n#        \"text\": \"Food\"\n#       },\n#       {\n#        \"type\": \"__main__.CategoriesItem\",\n#        \"icon_url\": \"https://leonardo.edadeal.io/dyn/re/segments/level1/96/alcohol.png\",\n#        \"text\": \"Alcohol\"\n#       },\n#       {\n#        \"type\": \"__main__.CategoriesItem\",\n#        \"icon_url\": \"https://leonardo.edadeal.io/dyn/re/segments/level1/96/household.png\",\n#        \"text\": \"Household\"\n#       }\n#      ]\n#     },\n#     \"state_id\": 0\n#    }\n#   ]\n#  }\n# }\n```\n\nTemplate names\n--------------\n\nBy default, templates are collecting by the metaclass into shared storage when \nthe class is declaring at import time, and have the \nformat `{module_name}.{class_name}`.\n\nThe following example, sure will not occur in the wild, shows a warning if \nsuddenly the names of the classes, and hence the templates, conflict.\n\n```python\nimport pydivkit as dk\n\n\nclass MyTemplate(dk.DivContainer):\n    width = dk.DivWrapContentSize()\n\n\nclass MyTemplate(dk.DivContainer):\n    pass\n\n# RuntimeWarning: Template 'test.MyTemplate' already defined in \n# <class 'test.MyTemplate'> and will be replaced to <class 'test.MyTemplate'>\n```\n\nAlso, if you do not want to show the structure of your project to the outside, \nor for some reason you need to make the example above clean, you can rename the\ntemplate by declaring a special attribute `__template_name__`\n\n```python\nimport pydivkit as dk\n\n\nclass MyTemplate(dk.DivContainer):\n    width = dk.DivWrapContentSize()\n\nprint(MyTemplate.template_name)\n# >>> test.MyTemplate\n\nclass MyTemplate(dk.DivContainer):\n    __template_name__ = \"MyTemplate2\"\n\nprint(MyTemplate.template_name)\n# >>> MyTemplate2\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/divkit/divkit/tree/main/json-builder/python",
    "keywords": "divkit,sdk",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydivkit",
    "package_url": "https://pypi.org/project/pydivkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydivkit/",
    "project_urls": {
      "Homepage": "https://github.com/divkit/divkit/tree/main/json-builder/python",
      "Repository": "https://github.com/divkit/divkit/tree/main/json-builder/python"
    },
    "release_url": "https://pypi.org/project/pydivkit/13.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "DivKit python library",
    "version": "13.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15554101,
  "releases": {
    "13.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "075ab43a799333d513adb6c7036601e81e3d02de50967bada10de8851d70d8c4",
          "md5": "3b9ab3c9b53cb947de0d491a56815a68",
          "sha256": "e1cd789788f01f1b539f831c9fb06a0011cce4b7038e926548f518f15f3e04eb"
        },
        "downloads": -1,
        "filename": "pydivkit-13.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b9ab3c9b53cb947de0d491a56815a68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 66763,
        "upload_time": "2022-10-27T14:40:11",
        "upload_time_iso_8601": "2022-10-27T14:40:11.808015Z",
        "url": "https://files.pythonhosted.org/packages/07/5a/b43a799333d513adb6c7036601e81e3d02de50967bada10de8851d70d8c4/pydivkit-13.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "13.0.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39200274299422683139ecd4071c329b4b59db54830412e9a8b01a14cb516847",
          "md5": "38fff5903a1defee9bd5a5218d684adc",
          "sha256": "acc2c42857e6bdfa0cc8b40aeac12c4db429e6903d7881e5bb59e0c45b14df21"
        },
        "downloads": -1,
        "filename": "pydivkit-13.0.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38fff5903a1defee9bd5a5218d684adc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 105606,
        "upload_time": "2022-10-27T12:24:17",
        "upload_time_iso_8601": "2022-10-27T12:24:17.475256Z",
        "url": "https://files.pythonhosted.org/packages/39/20/0274299422683139ecd4071c329b4b59db54830412e9a8b01a14cb516847/pydivkit-13.0.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef79abae05ce4a5a90230a9b5946c4bce4e22bba13a994b959d6a16b0b546baf",
          "md5": "c1952a3a869bc91d185a863589b9c62b",
          "sha256": "c677b365dcc9e3e9573ceed13fba14d64c4bca7acea1aaf35db237c6c4d1c2e6"
        },
        "downloads": -1,
        "filename": "pydivkit-13.0.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "c1952a3a869bc91d185a863589b9c62b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 67487,
        "upload_time": "2022-10-27T12:24:19",
        "upload_time_iso_8601": "2022-10-27T12:24:19.058411Z",
        "url": "https://files.pythonhosted.org/packages/ef/79/abae05ce4a5a90230a9b5946c4bce4e22bba13a994b959d6a16b0b546baf/pydivkit-13.0.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "075ab43a799333d513adb6c7036601e81e3d02de50967bada10de8851d70d8c4",
        "md5": "3b9ab3c9b53cb947de0d491a56815a68",
        "sha256": "e1cd789788f01f1b539f831c9fb06a0011cce4b7038e926548f518f15f3e04eb"
      },
      "downloads": -1,
      "filename": "pydivkit-13.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3b9ab3c9b53cb947de0d491a56815a68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 66763,
      "upload_time": "2022-10-27T14:40:11",
      "upload_time_iso_8601": "2022-10-27T14:40:11.808015Z",
      "url": "https://files.pythonhosted.org/packages/07/5a/b43a799333d513adb6c7036601e81e3d02de50967bada10de8851d70d8c4/pydivkit-13.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}