{
  "info": {
    "author": "Kyle Brown",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Refcursed\n\nRefcursed is a library for the things you can, but should not, do with the ability to determine the number of current references to any object.\nAt import time, the library emits a warning because really what are you doing.\n\n# Use Cases\n\n## Bringing balance to the universe\n\nDid you know that the Python runtime knows how many references to `True` and `False` exist at any given time?\n\nHave you ever wanted to bring balance to your programs and know that they're just as `True` as they are `False`?\n\nLook no further! Refcursed provides one simple function you can call to right the universe.\n\n```py\nimport refcursed\nrefcursed.balance_bool()\n```\n\n## Unit testing\n\nHave you ever wanted to make sure that you code you're calling isn't creating extra aliases to a certain value?\n\nNow you can! With the new `expect_ref_delta` context manager (compare to `pytest.raises`), you can write unit tests that ensure exactly the amount of references you expect to be added/removed are.\n\n```py\nfrom refcursed import expect_ref_delta\n\nmy_list = []\nwith expect_ref_delta(201, delta=2):\n    my_list.append(201)\n    my_list.append(201)\n```\n\nIf you want to check multiple at the same time, we even have a pluralized version.\n```py\nfrom refcursed import expect_ref_deltas\n\nmy_list = []\nwith expect_ref_deltas([201, 220], delta=1):\n    my_list.append(201)\n    my_list.append(220)\n```\n\n## Counting sort but ~~better~~ worse\n\nThe thing about counting sort is that you have to have counters for your different values. This is really silly though, because the runtime has counters for all of them anyway, the refcount. Our state of the art counting sort implementation uses those counters instead of its own for... performance?\n\n```py\nimport refcursed\nresult = refcursed.refcounting_sort([4, 4, 4, 3, 2, 1, 1])\nassert result = [1, 1, 2, 3, 4, 4, 4]\n```\n\n## Counting values\n\nThe same mechanism that lets us perform counting sort, taking refcounts before and after deleting things, allows us to count arbitrary lists contents as well.\n\n```py\nimport refcursed\nresult = refcursed.count_values([4, 4, 4, 3, 2, 1, 1])\nassert result == {\n    1: 2,\n    2: 1,\n    3: 1,\n    4: 3\n}\n```\n\n## Comparing and Sorting by refcount\n\nThe library also provides utilities for comparing the refcounts of two values and sorting sequences of values by refcount.\n\n```py\nimport refcursed\nassert refcursed.sort_refcount([1, 2, 3]) == ... # varies\nassert refcursed.compare_refcounts(1, 2) == ... #varies\n```\n\nSee the [integers](#int-and-bool-interning) section to find out why these are subtly non-trivial.\n\n\n# Considerations, Caveats, and Curiosities\n\nMost of the characteristics of `sys.getrefcount` are intuitive and you might guess, but others you may not.\n\n## `str` Interning\n\nStrings in Python sometimes act as separate objects that don't `is` compare true and don't have the same refcount, but some are the same and do. The latter case is due to interning, where Python stores one `str` object for multiple (potentially independent) instances of the same string value.\n\nInterning sometimes happens automatically, like in string literals, and can also be done manual, using `sys.intern`. Be aware of when interning is/isn't happening and how that may affect the behavior of refcounting.\n\n## `int` and `bool` Interning\n\nSimilarly to strings, integers and boolean values are also interned but following different rules. Any time an integer (within some size limit) is returned by an arithmetic operation, Python pulls the correct integer object from a table instead of creating a new one incrementing the count for that integer. Booleans work much the same way but are always interned because there are only two possible values.\n\nOne fun quirk of this is that the integers returned by `sys.getrefcount` can be interned and increment the refcount for that integer. Under very specific circumstances this can change the outcome of a comparison.\n\n```py\n# If B is equal to the integer that is the refcount of A\n# and B is a small enough integer to be automatically interned\n# and the refcount of B is one less than the refcount of A,\n# then even though A had a larger refcount the act of observing them\n# has made them equal and this condition will fail.\nassert sys.getrefcount(A) > sys.getrefcount(B)\n```\n\nThis may sound very precise and very unlikely, but it really isn't.\nIt can easily occur whenever sorting or comparing small integer values by refcount.\nFor robustness, all comparisons in the refcursed library either use `float(sys.getrefcount(...))` to store refcounts without modifying others or compensate for the case above.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kylebrown9/refcursed",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "refcursed",
    "package_url": "https://pypi.org/project/refcursed/",
    "platform": null,
    "project_url": "https://pypi.org/project/refcursed/",
    "project_urls": {
      "Homepage": "https://github.com/Kylebrown9/refcursed"
    },
    "release_url": "https://pypi.org/project/refcursed/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for cursed refcount-based utilities",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13384930,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74ab57a9672f377ffe999e662c6fe0ea98d9ec19e6d7542851ddd153bdc91f22",
          "md5": "a0773c154fa53f65c9e4c697a23c7847",
          "sha256": "f6773a7b4ac85a727f32d8782b4839265009533ce4ec26ad548b1b1135866d40"
        },
        "downloads": -1,
        "filename": "refcursed-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0773c154fa53f65c9e4c697a23c7847",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5725,
        "upload_time": "2022-04-01T16:49:34",
        "upload_time_iso_8601": "2022-04-01T16:49:34.481511Z",
        "url": "https://files.pythonhosted.org/packages/74/ab/57a9672f377ffe999e662c6fe0ea98d9ec19e6d7542851ddd153bdc91f22/refcursed-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5864ce3ee1279eb1be291cfe1dd1ca449784d085b923c5b0040718188541bca3",
          "md5": "a4ec06337f42882f35d79c9c70677f67",
          "sha256": "7b16dd9957851cdedf67de790efdd5fc04cb126b004dda2d5a958adc16168bb4"
        },
        "downloads": -1,
        "filename": "refcursed-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a4ec06337f42882f35d79c9c70677f67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5611,
        "upload_time": "2022-04-01T16:49:36",
        "upload_time_iso_8601": "2022-04-01T16:49:36.491068Z",
        "url": "https://files.pythonhosted.org/packages/58/64/ce3ee1279eb1be291cfe1dd1ca449784d085b923c5b0040718188541bca3/refcursed-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdcc01eac46ddf43397fb315a74781931030f40101344bfdc4e89c493aad151b",
          "md5": "677f70bf277da53a8be5a709e6967451",
          "sha256": "116ae8f162472de86ed6f1cf5d4d13321db143fc78587cddf6e97767f3e32cd9"
        },
        "downloads": -1,
        "filename": "refcursed-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "677f70bf277da53a8be5a709e6967451",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5730,
        "upload_time": "2022-04-02T16:06:39",
        "upload_time_iso_8601": "2022-04-02T16:06:39.516557Z",
        "url": "https://files.pythonhosted.org/packages/bd/cc/01eac46ddf43397fb315a74781931030f40101344bfdc4e89c493aad151b/refcursed-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e1375840a5f1a70f6884a3b75e0ca4e89bfe08eff110efd7f3968cd66a0ea21",
          "md5": "df2e33fe1ed8d1c853f828965433a355",
          "sha256": "d9d74052b5d5900efc8b743034b87ca6f21737d21433a4fba5ad8befa128fcc2"
        },
        "downloads": -1,
        "filename": "refcursed-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df2e33fe1ed8d1c853f828965433a355",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5646,
        "upload_time": "2022-04-02T16:06:40",
        "upload_time_iso_8601": "2022-04-02T16:06:40.976948Z",
        "url": "https://files.pythonhosted.org/packages/7e/13/75840a5f1a70f6884a3b75e0ca4e89bfe08eff110efd7f3968cd66a0ea21/refcursed-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bdcc01eac46ddf43397fb315a74781931030f40101344bfdc4e89c493aad151b",
        "md5": "677f70bf277da53a8be5a709e6967451",
        "sha256": "116ae8f162472de86ed6f1cf5d4d13321db143fc78587cddf6e97767f3e32cd9"
      },
      "downloads": -1,
      "filename": "refcursed-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "677f70bf277da53a8be5a709e6967451",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5730,
      "upload_time": "2022-04-02T16:06:39",
      "upload_time_iso_8601": "2022-04-02T16:06:39.516557Z",
      "url": "https://files.pythonhosted.org/packages/bd/cc/01eac46ddf43397fb315a74781931030f40101344bfdc4e89c493aad151b/refcursed-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e1375840a5f1a70f6884a3b75e0ca4e89bfe08eff110efd7f3968cd66a0ea21",
        "md5": "df2e33fe1ed8d1c853f828965433a355",
        "sha256": "d9d74052b5d5900efc8b743034b87ca6f21737d21433a4fba5ad8befa128fcc2"
      },
      "downloads": -1,
      "filename": "refcursed-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "df2e33fe1ed8d1c853f828965433a355",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5646,
      "upload_time": "2022-04-02T16:06:40",
      "upload_time_iso_8601": "2022-04-02T16:06:40.976948Z",
      "url": "https://files.pythonhosted.org/packages/7e/13/75840a5f1a70f6884a3b75e0ca4e89bfe08eff110efd7f3968cd66a0ea21/refcursed-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}