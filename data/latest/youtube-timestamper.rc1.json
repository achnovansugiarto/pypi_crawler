{
  "info": {
    "author": "Guru Ilangovan",
    "author_email": "ilangurudev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "youtube_timestamper\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n## Install\n\n``` sh\npip install youtube-timestamper\n```\n\n## How to use\n\nIn this example, we look at [Sanyam Bhutani’s interview of Kaggle legend\nChris Deotte](https://www.youtube.com/watch?v=QGCvycOXs2M).\n\nThis interview contains a wealth of knowledge but it’s not timestamped\nwith chapter divisions. This library can help create timestamped\nchapters by picking out the questions in Question-Answer style videos.\n\nTo start, simply import\n[`YoutubeTimestamper`](https://ilangurudev.github.io/youtube-timestamper/core.html#youtubetimestamper)\nfrom `youtube_timestamper.core` and pass in a youtube video url.\n\n``` python\nfrom youtube_timestamper.core import YoutubeTimestamper\n```\n\n    /home/ilangurudev/anaconda3/envs/ds/lib/python3.9/site-packages/transformers/pipelines/token_classification.py:135: UserWarning: `grouped_entities` is deprecated and will be removed in version v5.0.0, defaulted to `aggregation_strategy=\"none\"` instead.\n      warnings.warn(\n\n``` python\nyt_ts = YoutubeTimestamper(\"https://www.youtube.com/watch?v=QGCvycOXs2M\")\n```\n\n``` python\nyt_ts.suggest_question_timestamps(next_q_thresh=20)\n```\n\n    /home/ilangurudev/anaconda3/envs/ds/lib/python3.9/site-packages/transformers/pipelines/base.py:1036: UserWarning: You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset\n      warnings.warn(\n\n    00:00:00 Introduction\n    00:01:08 how did he transition into data science and cargill and his journey on kaggle?\n    00:02:23 can you tell us a bit more about that, chris, now that you remember of it the secret?\n    00:02:48 did you get your invite to the fight clubs yet, or can you share a bit about those?\n    00:04:44 then i, um i graduated with a bachelor's degree in mathematics and then, um, immediately afterwards, i?\n    00:07:19 when did kaggle come into the picture? when did you find your addiction for kagan?\n    00:08:28 you know you build a model and is your model more accurate than the other guy's model?\n    00:10:15 how did you go from just starting your journey to today being the forex grandmaster? how would you advise? what should they read? what should they learn? do you think there's such a list?\n    00:11:49 was it part of the enjoyment process, just getting involved, or were you making a conscious effort to? you know, maybe list down points where you need to improve?\n    00:12:40 and even if a competition or something looks similar to a previous one, i say to myself: you know, what new angle can i do here? you know what new thing can i learn?\n    00:13:49 any favorite battle stories you that you might remember?\n    00:14:33 so there's many competitions and you see the leaderboard and there's a bunch of scores and there's, you know, the top 50, they have a little bit of a jump, and there's and people in the forum say: you know magic, what's the magic?\n    00:16:03 um, do you, do you have any uh, rigid approach to competitions now, or did you compete in any in parallel, or do you just stick to one? and what's your approach in general to competitions now?\n    00:22:05 so, and that's something that i also enjoy very much- on the flip side, do you feel you're also losing a competitive edge?\n    00:25:45 thank you, um, what advice would you have for uh, newbies who are looking to write kernels?\n    00:30:58 what, what advice would you have for them? they're just chasing uh, maybe the title, since it's gamified, does it annoy you? do you have any uh advice for such people?\n    00:32:51 uh, any favorite memories from discussions that you might have?\n    00:34:37 and then someone says, wow, that's awesome, hey, have you thought about doing this?\n    00:35:35 um, what advice would you have for people who people, many people, seek teaming up because they may be asking to just compete by themselves? but what teaming advice would you have for people in general? or what's your strategy?\n    00:38:47 what's your reason for investing so much time into kagan?\n    00:38:58 you know people might see it and say, why is he doing so much for the community? you know, how have i, how have i, you know, learned these ideas so well?\n    00:43:49 pandas build psychic learn, okay, uh, but what, what the wrap is team doing is?\n    00:45:38 is the desk data plotted on top of the train data or is the test data over here? like: is this group of images the same as this group of images?\n    00:47:11 how do you, chris, how do you manage your time? what's, what's your secret to time management?\n    00:49:44 but, as i said, you know, if someone's like, hey, can you? you know, can you follow the?\n    00:50:30 uh, is it okay if we do a quick rapid fire questions? uh, a set of questions? so what would you like? so, would you like to me give short answers?\n    00:51:12 okay, a favorite course that you've taught? uh, i'm not sure if you've taught a few or was it just a single one? oh, okay, yeah, so, uh, favorite course?\n    00:52:11 do you know that? the derivative is exactly what your brain uses for you to learn something?\n    00:52:38 okay, um, favorite algorithm?\n    00:52:54 it's just how do you classify this guy? well, how do you class with this data point?\n    00:53:55 okay, um, favorite competition that you've taken part in?\n    00:55:20 you're refreshing your computer, refreshing your computer, how did i do? how did i do? it's unbelievable, right?\n    01:00:28 um, what would be your favorite spot to surf? wait, favorite what sport? to windsurf?\n    01:01:24 uh, your favorite way to unwind, uh, from data science or kaggle?\n\n    Created using youtube-timestamper - https://ilangurudev.github.io/youtube-timestamper/\n\n------------------------------------------------------------------------\n\nA nice starting point! As we can see,\n\n-   The suggestions contain *all questions* - that means the\n    interviewee’s questions too (*and then someone says, wow, that’s\n    awesome, hey, have you thought about doing this?*).\n-   Sometimes the questions don’t provide the complete context - they\n    look like tarantino chapter titles. (*i mean, how does a computer\n    know how to draw dogs?*)\n-   The questions are too long and need to be summarized. (*how did you\n    go from just starting your journey to today being the forex\n    grandmaster? how would you advise? what should they read? what\n    should they learn? do you think there’s such a list?*)\n-   The youtube transcripts also contain a ton of typos (*kagan, forex\n    grandmaster*)\n-   Sometimes some questions are missed - the model is not perfect.\n\nBut I can just edit these timestamps and clean them up quickly manually\nas opposed tostarting from scratch. I remove\n\n-   Irrelevant questions\n-   Summarize questions neatly (and sometimes go back to the video to\n    get enough context)\n-   Correct typos\n-   Look for large gaps where there are no chapters and manually insert\n    titles if need be.\n\n00:00:00 Introduction<br /> 00:02:23 Secret to Kaggle Success<br />\n00:02:48 Exclusive Kaggle Fight Club Invites LOL<br /> 00:04:21 Life\nleading up to Kaggle<br /> 00:07:19 Beginning of addiction to\nKaggle<br /> 00:10:15 Journey to 4x Grandmaster and Tips<br /> 00:11:49\nMotivation to Kaggle - Fun or Improvement<br /> 00:13:39 Favorite battle\nstories<br /> 00:16:03 Approach to Competitions<br /> 00:25:45 Advice\nfor newbies looking to write kernels<br /> 00:30:58 Advice for people\nwho span kaggle forums in search of titles<br /> 00:32:51 Favorite\nmemories from discussions<br /> 00:35:35 Teaming Strategy and\nAdvice<br /> 00:38:47 Reason for investing so much time into\nKaggle<br /> 00:43:30 Rapids<br /> 00:47:11 Secret to time\nmanagement<br /> 00:50:30 Rapid Fire<br /> 00:51:12 Favorite Course that\nyou’ve taught<br /> 00:52:38 Favorite Algorithm<br /> 00:53:55 Favorite\nCompetition so far<br /> 01:00:28 Favorite spot to surf<br /> 01:01:24\nFavorite way to unwind from data science and Kaggle<br />\n\nCreated using youtube-timestamper -\nhttps://ilangurudev.github.io/youtube-timestamper/\n\nNow simply copy paste as a comment in the video!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ilangurudev/youtube-timestamper/",
    "keywords": "nbdev",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "youtube-timestamper",
    "package_url": "https://pypi.org/project/youtube-timestamper/",
    "platform": null,
    "project_url": "https://pypi.org/project/youtube-timestamper/",
    "project_urls": {
      "Homepage": "https://github.com/ilangurudev/youtube-timestamper/"
    },
    "release_url": "https://pypi.org/project/youtube-timestamper/0.0.1/",
    "requires_dist": [
      "fastcore",
      "youtube-transcript-api",
      "deepmultilingualpunctuation",
      "spacy",
      "sentencepiece",
      "protobuf (==3.20)",
      "nb-black ; extra == 'dev'",
      "nbdev ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "A python library to automatically create timestamps for youtube interview videos using NLP.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14916535,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d2d0fd75c1a5dd763112ea2c93720907dd54d34cd1e3777607af0aab8d53e59",
          "md5": "3377f4019910701f7f26c0c159a6dd49",
          "sha256": "1a7753861c56ce56b046c1bd9f91af074c45cc0c4cd0b326cd2da6c59c54fccf"
        },
        "downloads": -1,
        "filename": "youtube_timestamper-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3377f4019910701f7f26c0c159a6dd49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11778,
        "upload_time": "2022-08-28T19:34:01",
        "upload_time_iso_8601": "2022-08-28T19:34:01.170686Z",
        "url": "https://files.pythonhosted.org/packages/9d/2d/0fd75c1a5dd763112ea2c93720907dd54d34cd1e3777607af0aab8d53e59/youtube_timestamper-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2df338ebbcf3e23646b965132c92ad7a174786de9f2068b6bfe4c47c5877729",
          "md5": "91625ab600de898593b2f28788ab637c",
          "sha256": "65a3bc8143fbccb3693f4371b233e76ba6964d18af9d5a1aa747815a150cd48a"
        },
        "downloads": -1,
        "filename": "youtube-timestamper-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "91625ab600de898593b2f28788ab637c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15353,
        "upload_time": "2022-08-28T19:34:03",
        "upload_time_iso_8601": "2022-08-28T19:34:03.533524Z",
        "url": "https://files.pythonhosted.org/packages/c2/df/338ebbcf3e23646b965132c92ad7a174786de9f2068b6bfe4c47c5877729/youtube-timestamper-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d2d0fd75c1a5dd763112ea2c93720907dd54d34cd1e3777607af0aab8d53e59",
        "md5": "3377f4019910701f7f26c0c159a6dd49",
        "sha256": "1a7753861c56ce56b046c1bd9f91af074c45cc0c4cd0b326cd2da6c59c54fccf"
      },
      "downloads": -1,
      "filename": "youtube_timestamper-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3377f4019910701f7f26c0c159a6dd49",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11778,
      "upload_time": "2022-08-28T19:34:01",
      "upload_time_iso_8601": "2022-08-28T19:34:01.170686Z",
      "url": "https://files.pythonhosted.org/packages/9d/2d/0fd75c1a5dd763112ea2c93720907dd54d34cd1e3777607af0aab8d53e59/youtube_timestamper-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2df338ebbcf3e23646b965132c92ad7a174786de9f2068b6bfe4c47c5877729",
        "md5": "91625ab600de898593b2f28788ab637c",
        "sha256": "65a3bc8143fbccb3693f4371b233e76ba6964d18af9d5a1aa747815a150cd48a"
      },
      "downloads": -1,
      "filename": "youtube-timestamper-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "91625ab600de898593b2f28788ab637c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15353,
      "upload_time": "2022-08-28T19:34:03",
      "upload_time_iso_8601": "2022-08-28T19:34:03.533524Z",
      "url": "https://files.pythonhosted.org/packages/c2/df/338ebbcf3e23646b965132c92ad7a174786de9f2068b6bfe4c47c5877729/youtube-timestamper-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}