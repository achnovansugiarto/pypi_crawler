{
  "info": {
    "author": "John Crawford",
    "author_email": "jtcrwfrd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyLOOKinRemote\nUnofficial Python module for interacting with LOOKin Remote devices, largely using LOOKin's API:\n\n- https://look-in.club/en/support/api\n\n## To Use\n\nUse this class to interact with a LOOKin Remote device.  For example:\n\n      from pylookinremote import LOOKinRemote\n\n      devs = LOOKinRemote.findInNetwork()\n      for dev in devs:\n          meteoSensorMeas = dev.sensor('Meteo')\n          temp_C = meteoSensorMeas['Temperature']\n          temp_F = LOOKinRemote.celsius2Fahrenheit(meteoSensorMeas['Temperature'])\n          humidityRel = meteoSensorMeas['Humidity']\n          print(f'{dev!s} is reporting: {temp_C}°C/{temp_F:0.1f}°F and {humidityRel}%RH')\n\nThis generates the output:\n\n      Starting search for available LOOKinRemote devices...\n      ...Device Found at 192.168.0.123...\n      ...Device Found at 192.168.0.234...\n      ...Search complete!  Found 2 LOOKin Remote devices.\n      LOOKinRemote(192.168.0.123) is reporting: 20.7°C/69.3°F and 53.6%RH\n      LOOKinRemote(192.168.0.234) is reporting: 21.0°C/69.8°F and 61.3%RH\n\n## To Install\n\n1. Install from PyPI using `pip`:\n    - Linux:  `pip install pyLOOKinRemote`\n    - Windows:  `py -m pip install pyLOOKinRemote`\n\n## To Uninstall\n\n1. Uninstall using `pip`:\n    - Linux:  `pip uninstall pyLOOKinRemote`\n    - Windows:  `py -m pip uninstall pyLOOKinRemote`\n\n## Auxiliary Data File\n\nOn-device function storage doesn't appear to be working right now, so this\nscript allows you to save and load function data through a JSON file instead.\n\n## Learning Remote Commands\n\nThis module offers an automated IR command learning method.\n\n      from pylookinremote import LOOKinRemote\n\n      auxDataFilePath='./auxData.json'  #File to save function data in.\n      dev = LOOKinRemote('192.168.0.123', auxDataFilePath)\n      remoteUUID = '1234'  #ID of the IR remote on the LOOKin Remote.\n      newIRFunction = IRRemoteFunction.fromIRSensor(dev, 'myNewFunctionName')  #The \"Learn IR Command\" routine.\n      if newIRFunction is not None:  #Capture was successful.\n          try:  #The LOOKin Remote can get unstable during captures of long IR sequences, throwing connection errors.\n              remote = dev.remoteFromUUID(remoteUUID)\n              remote.functionUpdate(newIRFunction)\n          except:  #Dump the JSON on error so it can be manually added and all that effort isn't lost.\n              print(f'ERROR while saving function:  newIRFunction = {newIRFunction.toJSON()!r}')\n\nExecuting the above script will generate something like the following (IR sequences have been shortened for this example):\n\n      Learning new IR remote function 'myNewFunctionName'...\n      ...Please trigger the desired IR remote function repeatedly on the target LOOKin Remote...\n      Running sensor dump for 300 seconds...\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': '00', 'Raw': '470 -390 470 -390 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '0'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 470 -390 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1630995857'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 470 -390 440 -420 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1631003614'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 470 -390 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1631009781'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      Connection Reset!  The device might be restarting due to a crash.\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 440 -420 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1631017192'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      Connection Reset!  The device might be restarting due to a crash.\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': '00', 'Raw': '470 -390 440 -420 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '0'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      Connection Reset!  The device might be restarting due to a crash.\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '3510 -1690 470 -1260 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1630870829'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      Connection Reset!  The device might be restarting due to a crash.\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': '00', 'Raw': '470 -390 470 -390 470 -390 470 -390 440 -410 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '0'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 470 -390 470 -390 470 -390 440 -410 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1630892222'}\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      _get - url='http://192.168.0.123/sensors/IR'\n      {'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 470 -390 470 -390 470 -390 440 -420 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1630900942'}\n      ...Sensor dump finished.  10 signals detected.\n      ...capture complete!  You can stop triggering the IR remote.\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 584<=>308 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 584<=>308 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 100% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 100% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 584<=>308 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 100% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 584<=>308 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 584<=>308 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 38% SIMILAR; LENGTH 144<=>308 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 100% SIMILAR; LENGTH 144<=>144 IS SAME; MATCH!\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 144<=>584 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 144<=>584 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 38% SIMILAR; LENGTH 308<=>144 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 308<=>584 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 41% SIMILAR; LENGTH 308<=>584 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 144<=>584 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 24% SIMILAR; LENGTH 144<=>584 IS DIFFERENT; NOT A MATCH\n      IR COMMANDS ARE 100% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!\n      Found 2 groups of commands.\n\n\n\n      SUCCESS capturing command!  Command selected with 6 matches out of 10 total signals detected.\n      _get - url='http://192.168.0.123/data'\n      _get - url='http://192.168.0.123/data/2345'\n      _get - url='http://192.168.0.123/data/3456'\n      _get - url='http://192.168.0.123/data/1234'\n      _get - url='http://192.168.0.123/data/4567'\n      Error writing function to device; saving to auxiliary data file...\n      ...Done!\n      _get - url='http://192.168.0.123/data/1234'\n\nWhat's happening here is that the Python code is monitoring the data being captured by the LOOKin Remote's IR sensor and then processes the data to generate what it believes is the desired remote function.\n\n- `Running sensor dump for 300 seconds...`\n    - Monitors the LOOKin Remote's IR sensor for 5 minutes or until 10 IR signals have been captured.\n- `_get - url='http://192.168.0.123/sensors/IR'`\n    - This is a debug message printed every time the script talks to the device.  It is currently enabled to help the user visually see that the device is or is not responding.\n- `Connection Reset!  The device might be restarting due to a crash.`\n    - Indicates the communications with the LOOKin Remote failed, either from a timeout or from the connection being reset.  Usually, this is caused by the LOOKin Remote becoming unstable; long IR sequences seemed to be especially good at causing the LOOKin Remote grief.\n- `{'IsRepeated': '0', 'Protocol': 'FF', 'Raw': '470 -390 470 -390 470 -390 470 -390 470 -390 470 -45000', 'RepeatPause': '0', 'RepeatSignal': '', 'Signal': '0', 'Updated': '1630995857'}`\n    - The raw IR sensor data received from the LOOKin Remote.  The length of this will vary significantly depending on the type of command/remote you're using.\n- `...Sensor dump finished.  10 signals detected.` & `...capture complete!  You can stop triggering the IR remote.`\n    - Indicates the IR sensor monitoring has concluded, either due to 300 seconds having passed or 10 IR signals found.\n- `IR COMMANDS ARE 99% SIMILAR; LENGTH 584<=>584 IS SAME; MATCH!` & `IR COMMANDS ARE 24% SIMILAR; LENGTH 584<=>144 IS DIFFERENT; NOT A MATCH`\n    - This is the debug output of the IR signal correlation routine.  Similar/identical IR signals are grouped together to help the script determine what is the most likely IR signal.\n- `Found 2 groups of commands.`\n    - Indicates how many groupings of similar commands were found.  In this case, the Python code has determined that 2 different types of IR commands were read by the IR sensor.  Groups below a certain size (e.g. just 1 signal) will be ignored.\n- `SUCCESS capturing command!  Command selected with 6 matches out of 10 total signals detected.`\n    - Indicates success/failure in identifying the IR command.  `10` indicates the total number of commands captured, and `6` indicates how many signals out of those `10` were similar.  Ultimately, the IR command selected is the one with the largest grouping.\n- `_get - url='http://192.168.0.123/data'` & `_get - url='http://192.168.0.123/data/1234'`\n    - Debug statements from the script trying to write the function to the LOOKin Remote.\n- `Error writing function to device; saving to auxiliary data file...`\n    - Indicates the writing of the function to the LOOKin Remote failed.  This is usually due to a `500 Internal Server Error` being returned by the LOOKin Remote in response to the \"Create Function\" call.\n    - As indicated, if you supplied an auxiliary data file then the remote command will be stored there instead.\n- `...Done!`\n    - Indicates the process of storing the learned IR command has completed.\n\n## Using Remote Commands\n\nThis module can trigger remote functions both on the LOOKin Remote device and stored in an auxiliary data file:\n\n      from pylookinremote import LOOKinRemote\n\n      auxDataFilePath='./auxData.json'  #File that saved function data is in.\n      dev = LOOKinRemote('192.168.0.123', auxDataFilePath)\n      remoteUUID = '1234'  #ID of the IR remote on the LOOKin Remote.\n      remoteFunctionName = 'myFunctionName'  #`str` name of the function to trigger.\n      remote = dev.remoteFromUUID(remoteUUID)\n      remote.functionTrigger(remoteFunctionName)\n\nFunctions defined on the LOOKin Remote device will take precedence over the auxiliary data file.\n\n## Available Methods\n\nEverything is centered around the `LOOKinRemote` class, instantiated either by `LOOKinRemote('192.168.0.123')` or the class method `LOOKinRemote.findInNetwork()`.\n\nI strongly recommend using `help(LOOKinRemote)` in Python and/or looking at the source code in \"pylookinremote.py\" for the most accurate documentation, but here is the list at the time of this writing:\n\n### Class `pylookinremote.LOOKinRemote`\n\nThe core class.  Each instance of this object represents a single LOOKin Remote device.\n\nThe most common way to get these objects is either by:\n\n      auxDataFilePath='./auxData.json'  #File that saved function data is/will-be in.\n      remotes = LOOKinRemote.findInNetwork(auxDataFilePath=auxDataFilePath)  #`list` of `LOOKinRemote` objects.\n      remote = remotes[0]\n\n...or by:\n\n      auxDataFilePath='./auxData.json'  #File that saved function data is/will-be in.\n      ipOrDNSAddr = '192.168.0.123'\n      remote = remote.LOOKinRemote(ipOrDNSAddr, auxDataFilePath)  #Single `LOOKinRemote` object.\n\n#### Public Attributes/Methods\n\n`temp_F = LOOKinRemote.celsius2Fahrenheit(temp_C)`\n:   Static Method.  Returns `temp_C` in degrees Fahrenheit.\n\n`temp_C = LOOKinRemote.fahrenheit2Celsius(temp_F)`\n:   Static Method.  Returns `temp_F` in degrees Celsius.\n\n`remotes = LOOKinRemote.findInNetwork(timeout_sec=10, auxDataFilePath=None)`\n:   Class method.  Searches the network for `timeout_sec` seconds for available LOOKin Remote devices and returns a list of `LOOKinRemote` objects.  Requires that `zeroconf` library be installed.  If `auxDataFilePath` is defined, a file will be opened/created there to store/retrieve IR function data.\n\n`remote = LOOKinRemote('192.168.0.123', auxDataFilePath=None)\n:   Constructor accepting an `str` IP or DNS address.  If `auxDataFilePath` is defined, a file will be opened/created there to store/retrieve IR function data.\n\n`remote.api_*_DEL`\n:   Methods that map directly to LOOKin Device API `DEL` calls as defined by LOOKin:  https://look-in.club/en/support/api .\n\n`remote.api_*_GET`\n:   Methods that map directly to LOOKin Device API `GET` calls as defined by LOOKin:  https://look-in.club/en/support/api .\n\n`remote.api_*_POST`\n:   Methods that map directly to LOOKin Device API `POST` calls as defined by LOOKin:  https://look-in.club/en/support/api .\n\n`remote.api_*_PUT`\n:   Methods that map directly to LOOKin Device API `PUT` calls as defined by LOOKin:  https://look-in.club/en/support/api .\n\n`remote.commandEventLocalRemote(uuid, functionCode, signalID=0xFF)`\n:   Triggers a \"localremote\" command event with `functionCode` and `signalID`.\n\n`remote.commandEventNEC1(uuid, functionCode, signalID=0xFF)`\n:   Triggers an \"NEC1\" command event with `signal`.\n\n`remote.commandEventNECX(signal)`\n:   Triggers an \"NECx\" command event with `signal`.\n\n`remote.commandEventProntoHEX(signal)`\n:   Triggers a \"ProntoHEX\" command event.\n\n`remote.commandEventRaw(signal, freqCarrier_Hz=38000)`\n:   Triggers a \"raw\" command event.\n\n`remote.commandEvents(command)`\n:   Returns the remote's available events for `command`.\n\n`remote.commandEventSaved(signalID)`\n:   Triggers a \"saved\" command event with `signalID`.\n\n`remote.commands()`\n:   Returns the remote's available command classes.\n\n`remote.remoteCreate(name, irRemoteType, extra='', uuid=None)`\n:   Creates a new IR remote definition on the device.\n\n`remote.remoteFromUUID(uuid)`\n:   Returns a new `IRRemote` object for the remote matching `uuid`.\n\n`remote.remotes()`\n:   Returns the remote's saved IR remotes.\n\n`remote.remotesData()`\n:   Returns the general data for all saved remotes.\n\n`remote.remotesDelete(uuids)`\n:   Deletes the IR remotes `uuids` from the device.\n\n`remote.remotesDeleteAll(*, yesIWantToDoThis=False)`\n:   Deletes all saved IR remotes from the device.\n\n`remote.sensor(name)`\n:   Returns the remote's sensor information.\n\n`remote.sensorDump(name, period, duration, maxSignals=None)`\n:   Polls the `name` sensor for `duration` seconds and `period` seconds between calls.  Terminates early if `maxSignals` have been received.  Returns a `list` of data for all the non-empty captures (only \"IR\" sensor supported right now).\n\n`remote.sensorNames()`\n:   Returns the remote's available sensors.\n\n### Class `pylookinremote.IRRemote`\n\nBase class for objects returned by `pylookinremote.LOOKinRemote.remotes()`.  Users will rarely instantiate this class themselves.\n\nThe most common way to get these objects is either by:\n\n      irRemotes = remote.remotes()  #`list` of `IRRemote` objects.\n\n...or by:\n\n      uuid = '1234'\n      irRemote = remote.remoteFromUUID(uuid)  #Single `IRRemote` object, or `None` if `uuid` didn't match.\n\n#### Public Attributes/Methods\n\n`irRemote.uuid`\n:   `str` UUID of the remote on the LOOKin Remote device.\n\n`irRemote.name`\n:   `str` name of the remote on the LOOKin Remote device.\n\n`irRemote.rType`\n:   Type of the remote as an instance of `pylookinremote.IRRemote.TYPE`.\n\n`irRemote.updated`\n:   `datetime.datetime` object reprenting the last time the remote was modified on the LOOKinRemote device.\n\n`irRemote.functions`\n:   `dict` mapping `str` function names to `pylookinremote.IRRemoteFunction` objects.\n\n`irRemote = pylookinremote.IRRemote(lookinRemote, uuid, rootData=None, auxDataFilePath=None)`\n:   Constructor initializing the object.  `lookinRemote` is a `LOOKinRemote` object.  `uuid` is the `str` UUID of this remote on `lookinRemote`.\n\n`irRemote.details()`\n:   Returns this remote's details.\n\n`irRemote.delete()`\n:   Deletes this IR remote from the device.\n\n`irRemote.functionCreate(irRemoteFunction)`\n:   Creates a function on the remote device using the data in `irRemoteFunction`.  `irRemoteFunction` should be a `pylookinremote.IRRemoteFunction` object.\n\n`irRemote.functionDelete(functionName)`\n:   Deletes the function `functionName` from the device.\n\n`irRemote.functionExists(functionName)`\n:   Returns `True` if a function named `functionName` is defined.\n\n`irRemote.functionTrigger(functionName)`\n:   Triggers the function `functionName`.  The exact behavior depends on the type of function.\n\n`irRemote.functionUpdate(irRemoteFunction, upsert=True)`\n:   Updates the function definition for `irRemoteFunction`, a `pylookinremote.IRRemoteFunction` object.  If `upsert` is true, will create the function if it doesn't currently exist.\n\n`irRemote.toJSON()`\n:   Returns a JSON-compatible data structure that represents this object.\n\n`irRemote.update(name=None, irRemoteType=None, extra=None)`\n:   Updates the IR remote definition for `uuid` on the device.  `None` values will be unmodified.\n\n### Class `pylookinremote.IRRemote.TYPE`\n\nEnum of possible IR Remote Types.\n\n#### Public Attributes/Methods\n\n`pylookinremote.IRRemote.TYPE.CUSTOM`\n:   `CUSTOM` remote type.\n\n`pylookinremote.IRRemote.TYPE.TV`\n:   `TV` remote type.\n\n`pylookinremote.IRRemote.TYPE.MEDIA`\n:   `MEDIA` remote type.\n\n`pylookinremote.IRRemote.TYPE.LIGHT`\n:   `LIGHT` remote type.\n\n`pylookinremote.IRRemote.TYPE.HUMIDIFIER_DEHUMIDIFIER`\n:   `HUMIDIFIER_DEHUMIDIFIER` remote type.\n\n`pylookinremote.IRRemote.TYPE.AIRPURIFIER`\n:   `AIRPURIFIER` remote type.\n\n`pylookinremote.IRRemote.TYPE.ROBOVACUUMCLEANER`\n:   `ROBOVACUUMCLEANER` remote type.\n\n`pylookinremote.IRRemote.TYPE.DATADEVICEFAN`\n:   `DATADEVICEFAN` remote type.\n\n`pylookinremote.IRRemote.TYPE.AIRCONDITIONER`\n:   `AIRCONDITIONER` remote type.  Remotes of this type should always be instances of `pylookinremote.ACRemote`, a subclass of `pylookinremote.IRRemote`.\n\n### Class `pylookinremote.ACRemote`\n\nSubclass of `pylookinremote.IRRemote` that provides air conditioner/heat pump functions.\n\nObtain the same way as `pylookinremote.IRRemote` objects:\n\n      irRemotes = remote.remotes()  #Any remotes with type `pylookinremote.IRRemote.TYPE.AIRCONDITIONER` will `ACRemote` objects instead of standard `IRRemote` objects.\n      acRemotes = [irRemote for irRemote in irRemotes if isinstance(irRemote, pylookinremote.ACRemote]\n\n...or by:\n\n      uuid = '1234'\n      irRemote = remote.remoteFromUUID(uuid)  #Will be an `ACRemote` object if the target remote has the type `pylookinremote.IRRemote.TYPE.AIRCONDITIONER`.\n      acRemote = irRemote if isinstance(irRemote, pylookinremote.ACRemote) else None\n\n#### Public Attributes/Methods\n\n`acRemote.operatingModeSet(operatingMode)`\n:   Tells the device to switch operating mode to `operatingMode`.  `operatingMode` should be an instance of `pylookinremote.ACRemote.OPERATINGMODE`.\n\n`acRemote.tempSet(temp_C)`\n:   Tells the device to target the Celsius temperature `temp_C`.\n\n`acRemote.tempSetF(temp_F)`\n:   Tells the device to target the Fahrenheit temperature `temp_F`.\n\n`acRemote.fanSpeedModeSet(fanSpeedMode)`\n:   Tells the device to use `fanSpeedMode`.  `fanSpeedMode` should be an instance of `pylookinremote.ACRemote.FANSPEEDMODE`.\n\n`acRemote.swingModeSet(swingMode)`\n:   Tells the device to use `swingMode`.  `swingMode` should be an instance of `pylookinremote.ACRemote.SWINGMODE`.\n\n`acRemote.statusGet(refresh=False)`\n:   Returns the current status of the device.  Will return the cached state unless `refresh` is `True`.\n\n`acRemote.statusRefresh()`\n:   Requests the current status from the device.\n\n`acRemote.statusSet(status)`\n:   Modifies the device's status to match `status`.  `status` should be an instance of `pylookinremote.ACRemote.Status`.\n\n### Class `pylookinremote.ACRemote.OPERATINGMODE`\n\nEnum of available air conditioner/heat pump operating modes.\n\n#### Public Attributes/Methods\n\n`pylookinremote.ACRemote.OPERATINGMODE.OFF`\n:   Air conditioner is off.\n\n`pylookinremote.ACRemote.OPERATINGMODE.AUTO`\n:   Air conditioner is on auto.\n\n`pylookinremote.ACRemote.OPERATINGMODE.COOL`\n:   Air conditioner is cooling.\n\n`pylookinremote.ACRemote.OPERATINGMODE.HEAT`\n:   Air conditioner is heating.\n\n### Class `pylookinremote.ACRemote.FANSPEEDMODE`\n\nEnum of available air conditioner/heat pump fan speed modes.\n\n#### Public Attributes/Methods\n\n`pylookinremote.ACRemote.FANSPEEDMODE.MINIMUM`\n:   Air conditiner fan speed is at minimum speed.\n\n`pylookinremote.ACRemote.FANSPEEDMODE.MEDIUM`\n:   Air conditiner fan speed is at a moderate speed.\n\n`pylookinremote.ACRemote.FANSPEEDMODE.MAXIMUM`\n:   Air conditiner fan speed is at maximum speed.\n\n`pylookinremote.ACRemote.FANSPEEDMODE.AUTO`\n:   Air conditioner fan speed is automatic.\n\n### Class `pylookinremote.ACRemote.SWINGMODE`\n\nEnum of available air conditioner/heat pump diffuser swing modes.\n\n#### Public Attributes/Methods\n\nNo modes appear to be working right now (at least for my devices), so all are marked as `UNDEFINED`.\n\n### Class `pylookinremote.ACRemote.Status`\n\nClass representing a status of the air conditioner/heat pump device.\n\nThis is typically obtained by:\n\n      acStatus = acRemote.statusGet()\n\n#### Public Attributes/Methods\n\n`acStatus.operatingMode`\n:   Instance of `pylookinremote.ACRemote.OPERATINGMODE`.\n\n`acStatus.tempTarget_C`\n:   Target temperature in degrees Celsius.\n\n`acStatus.tempTarget_F`\n:   Target temperature in degrees Fahrenheit.\n\n`acStatus.fanSpeedMode`\n:   Instance of `pylookinremote.ACRemote.FANSPEEDMODE`.\n\n`acStatus.swingMode`\n:   Instance of `pylookinremote.ACRemote.SWINGMODE`.\n\n`acStatus = pylookinremote.ACRemote.Status(operatingMode, tempTarget_C, fanSpeedMode, swingMode)`\n:   Constructor.\n\n`acStatus = pylookinremote.ACRemote.Status.fromStatusBytes(statusBytes)`\n:   Class method.  Creates an instance of this class using the data contained in `statusBytes`.\n\n`acStatus.operatingModeSet(operatingMode)`\n:   Sets this object's operating mode to `operatingMode`.\n\n`acStatus.tempTargetSet(tempTarget_C)`\n:   Sets this object's target temperature to `tempTarget_C` (Celsius).\n\n`acStatus.tempTargetSet_F(tempTarget_F)`\n:   Sets this object's target temperature to `tempTarget_F` (Fahrenheit).\n\n`acStatus.toStatusBytes()`\n:   Returns the 16-bit integer with the appropriate status bytes for this object.\n\n`acStatus.fanSpeedModeSet(fanSpeedMode)`\n:   Sets this object's fan speed to `fanSpeedMode`.\n\n`acStatus.swingModeSet(swingMode)`\n:   Sets this object's swing mode to `swingMode`.\n\n### Class `pylookinremote.IRRemoteFunction`\n\nClass representing a function of an IR Remote.\n\nThis is typically obtained by:\n\n      irFunctions = irRemote.functions()\n      irFunction = irFunctions['myFunctionName']\n\n#### Public Attributes/Methods\n\n`irFunction.name`\n:   `str` name of the function.\n\n`irFunction.functionType`\n:   Type of the function as an instance of `pylookinremote.IRRemoteFunction.TYPE`.\n\n`irFunction.irCommands`\n:   `tuple` of `pylookinremote.IRRemoteCommand` objects.  `None` indicates the commands are stored on the LOOKin Remote device.\n\n`irFunction = pylookinremote.IRRemoteFunction.fromJSON(jsonData)`\n:   Static method.  Creates a new `IRRemoteFunction` object from the given `jsonData`.\n\n`irFunction = pylookinremote.IRRemoteFunction.fromIRSensor(lookinRemote, functionName, functionType=TYPE.SINGLE)`\n:   Static method.  Creates/\"Learns\" a new `IRRemoteFunction` object from IR sequences detected by the given `lookinRemote`'s IR sensor.  This is a function that requires guided user interaction with the LOOKin Remote device.\n\n`irFunction = pylookinremote.IRRemoteFunction(functionName, irRemoteCommands, functionType=TYPE.SINGLE)`\n:   Constructor.  `functionName` should be a `str` name for the function.  `irRemoteCommands` should be either an iterable of `IRRemoteCommand` objects or a single `IRRemoteCommand` object.  `functionType` should be a value from `IRRemoteFunction.TYPE`.\n\n`irFunction.toJSON()`\n:   Returns this object serialized into a JSON-compatible data structure.\n\n`irFunction.trigger(lookinRemote)`\n:   Triggers this function on the given `lookinRemote`.\n\n### Class `pylookinremote.IRRemoteCommand.TYPE`\n\nEnum of possible IR Remote Function types.\n\n#### Public Attributes/Methods\n\n`pylookinremote.IRRemoteFunction.TYPE.SINGLE`\n:   `SINGLE` function type.\n\n`pylookinremote.IRRemoteFunction.TYPE.TOGGLE`\n:   `TOGGLE` remote type.\n\n### Class `pylookinremote.IRRemoteCommand`\n\nBase class for IR Remote Commands.  This is not useful until it is subclassed.\n\nThis is typically obtained by:\n\n      irFunctions = irRemote.functions()\n      irFunction = irFunctions['myFunctionName']\n      irCommands = irFunction.irCommands\n      irCommand = irCommands[0]\n\n...or by direct construction of one of its subclasses:\n\n      irCommandRaw = pylookinremote.IRRemoteCommandRaw('470 -390 470 -390 470 -390 470 -390 470 -390 470 -45000')\n\n#### Public Attributes/Methods\n\n`irCommand.typeName`\n:   `str` name of the command type.\n\n`irCommand = pylookinremote.IRRemoteCommand.fromJSON(jsonData)`\n:   Static method.  Creates a new `IRRemoteCommand` object--or one of its appropriate subclasses--from the given `jsonData`.\n\n`irCommand = pylookinremote.IRRemoteCommand.fromIRSensorData(jsonSensorData)`\n:   Static method.  Creates a new `IRRemoteCommand` object--or one of its appropriate subclasses--from the given `jsonSensorData`.  `jsonSensorData` should be as it was returned by `LOOKinRemote.sensor('IR')`.  Only \"raw\" commands are currently supported.\n\n`irCommand = pylookinremote.IRRemoteCommand(typeName)`\n:   Constructor.  `typeName` should be a `str` name for the command type (e.g. \"raw\").\n\n`irCommand.toJSON()`\n:   Returns a JSON-compatible data structure that represents this object.\n\n`irCommand.trigger(lookinRemote)`\n:   Triggers this command on the given `lookinRemote`.\n\n### Class `pylookinremote.IRRemoteCommandUndefined`\n\nRepresents an undefined-type remote command.\n\n#### Public Attributes/Methods\n\n`irCommand.data`\n:   Python `object` of relevant data.\n\n`irCommand = pylookinremote.IRRemoteCommandUndefined(typeName, data)`\n:   Constructor.  `typeName` should be a `str` name for the command type (e.g. \"raw\"), and `data` can be anything.\n\n`irCommand.toJSON()`\n:   Returns a JSON-compatible data structure that represents this object.\n\n`irCommand.trigger(lookinRemote)`\n:   Triggers this command on the given `lookinRemote`.\n\n### Class `pylookinremote.IRRemoteCommandRaw`\n\nRepresents a raw-type remote command sequence.\n\n#### Public Attributes/Methods\n\n`irCommandRaw = pylookinremote.IRRemoteCommandRaw(sequence, freqCarrier_Hz=38000)`\n:   Constructor.  `sequence` should be an IR command sequence either as a `str` or iterable of `int`s.\n\n`irCommandRaw.isSimilar(rhs)`\n:   Returns `True` if `rhs` is similar to this object; `False` otherwise.\n\n`len(irCommandRaw)`\n:   Returns the length of the stored IR sequence.\n\n`irCommandRaw.toJSON()`\n:   Returns a JSON-compatible data structure that represents this object.\n\n`irCommandRaw.toLOOKinRemoteAPIJSON()`\n:   Returns a JSON-compatible data structure that represents this object appropriately for the LOOKin Device API.\n\n`irCommandRaw.trigger(lookinRemote)`\n:   Triggers this command on the given `lookinRemote`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/defcello/pyLOOKinRemote",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyLOOKinRemote",
    "package_url": "https://pypi.org/project/pyLOOKinRemote/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyLOOKinRemote/",
    "project_urls": {
      "Bug Tracker": "https://github.com/defcello/pyLOOKinRemote/issues",
      "Homepage": "https://github.com/defcello/pyLOOKinRemote"
    },
    "release_url": "https://pypi.org/project/pyLOOKinRemote/2021.11.25/",
    "requires_dist": [
      "zeroconf"
    ],
    "requires_python": ">=3.8",
    "summary": "Unofficial Python module for interacting with LOOKin Remote devices, largely using LOOKin's API.",
    "version": "2021.11.25",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12126433,
  "releases": {
    "2021.11.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da1f9ba4481890e1aec5f4ba8d8015996716ab99a29e9e06aa65776c64b71497",
          "md5": "81de620822e76d80faeafcae1a393599",
          "sha256": "3e7095e690e4985ec3526ce91580f7fbab5b3cb6a664fbcad5fd7a406b007d41"
        },
        "downloads": -1,
        "filename": "pyLOOKinRemote-2021.11.25.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81de620822e76d80faeafcae1a393599",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23024,
        "upload_time": "2021-11-25T21:41:34",
        "upload_time_iso_8601": "2021-11-25T21:41:34.535088Z",
        "url": "https://files.pythonhosted.org/packages/da/1f/9ba4481890e1aec5f4ba8d8015996716ab99a29e9e06aa65776c64b71497/pyLOOKinRemote-2021.11.25.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37a6cae70b691265faea206f3cdbe2761a30d67ffb294ffa717641141fe297cf",
          "md5": "c870c306c653ac159a3e5f6219b4c6e3",
          "sha256": "d0f4ad76a0460d5822dfb6c6a55adb07905b30453c82c39a5bc376d35d1eb014"
        },
        "downloads": -1,
        "filename": "pyLOOKinRemote-2021.11.25.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c870c306c653ac159a3e5f6219b4c6e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34552,
        "upload_time": "2021-11-25T21:41:35",
        "upload_time_iso_8601": "2021-11-25T21:41:35.806631Z",
        "url": "https://files.pythonhosted.org/packages/37/a6/cae70b691265faea206f3cdbe2761a30d67ffb294ffa717641141fe297cf/pyLOOKinRemote-2021.11.25.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da1f9ba4481890e1aec5f4ba8d8015996716ab99a29e9e06aa65776c64b71497",
        "md5": "81de620822e76d80faeafcae1a393599",
        "sha256": "3e7095e690e4985ec3526ce91580f7fbab5b3cb6a664fbcad5fd7a406b007d41"
      },
      "downloads": -1,
      "filename": "pyLOOKinRemote-2021.11.25.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81de620822e76d80faeafcae1a393599",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23024,
      "upload_time": "2021-11-25T21:41:34",
      "upload_time_iso_8601": "2021-11-25T21:41:34.535088Z",
      "url": "https://files.pythonhosted.org/packages/da/1f/9ba4481890e1aec5f4ba8d8015996716ab99a29e9e06aa65776c64b71497/pyLOOKinRemote-2021.11.25.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37a6cae70b691265faea206f3cdbe2761a30d67ffb294ffa717641141fe297cf",
        "md5": "c870c306c653ac159a3e5f6219b4c6e3",
        "sha256": "d0f4ad76a0460d5822dfb6c6a55adb07905b30453c82c39a5bc376d35d1eb014"
      },
      "downloads": -1,
      "filename": "pyLOOKinRemote-2021.11.25.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c870c306c653ac159a3e5f6219b4c6e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 34552,
      "upload_time": "2021-11-25T21:41:35",
      "upload_time_iso_8601": "2021-11-25T21:41:35.806631Z",
      "url": "https://files.pythonhosted.org/packages/37/a6/cae70b691265faea206f3cdbe2761a30d67ffb294ffa717641141fe297cf/pyLOOKinRemote-2021.11.25.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}