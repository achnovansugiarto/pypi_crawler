{
  "info": {
    "author": "Chris Fiege",
    "author_email": "python@pengutronix.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)"
    ],
    "description": "Welcome to usbsdmux\n===================\n\n|license|\n|pypi|\n\nPurpose\n-------\nThis software is used to control a special piece of hardware called usb-sd-mux from the command line or python.\n\nThe usb-sd-mux is build around a `Microchip USB2642 <http://www.microchip.com/wwwproducts/en/USB2642>`_ card reader. Thus most of this software deals with interfacing this device using Linux ioctls().\n\nThis software is aimed to be used with `Labgrid <https://github.com/labgrid-project/labgrid>`_. But it can also be used stand-alone or in your own applications.\n\nHigh-Level Functions\n--------------------\nusbsdmux provides the following functions:\n\n* Multiplexing the SD-Card to either DUT, Host or disconnect with ``usbsdmux``\n* Writing the Configuration-EEPROM of the USB2642 from the command line to customize the representation of the USB device: ``usbsdmux-configure``\n\n\nLow-Level Functions\n-------------------\nUnder the hood this tool provides interfaces to access the following features of the Microchip USB2642:\n\n* Accessing the auxiliary I2C bus with write and write-read transactions with up to 512 bytes of payload using a simple python interface.\n* Writing an I2C Configuration-EEPROM on the configuration I2C.\n  This is done using an undocumented command that was reverse-engineered from Microchip's freely available EOL-Tools.\n\nQuickstart\n----------\n\nCreate and activate a virtualenv for usbsdmux:\n\n.. code-block:: bash\n\n   $ virtualenv -p python3 venv\n   $ source venv/bin/activate\n\nInstall usbsdmux into the virtualenv:\n\n.. code-block:: bash\n\n   $ pip install usbsdmux\n\nNow you can run ``usbsdmux -h`` to get a list of possible\ncommand invocations:\n\n.. code-block:: text\n\n   $ usbsdmux -h\n   usage: usbsdmux [-h] SG {get,dut,client,host,off}\n\n   positional arguments:\n     SG                    /dev/sg* to use\n     {get,dut,client,host,off}\n\t\t\t   Action:\n\t\t\t   get - return selected mode\n\t\t\t   dut - set to dut mode\n\t\t\t   client - set to dut mode (alias for dut)\n\t\t\t   host - set to host mode\n\t\t\t   off - set to off mode\n\n   optional arguments:\n     -h, --help            show this help message and exit\n\nUsing as root\n-------------\nIf you just want to try the USB-SD-Mux (or maybe if it is just ok for you) you\ncan just use ``usbsdmux`` as root.\n\nIf you have installed this tool inside a virtualenv you can just call the\nshell-wrapper along with the appropriate `/dev/sg*` device path:\n\n.. code-block:: bash\n\n   sudo /path/to/virtualenv/bin/usbsdmux /dev/sg0 dut\n   sudo /path/to/virtualenv/bin/usbsdmux /dev/sg0 host\n\nUsing as normal user / Reliable names\n-------------------------------------\n\nThe example udev-rule in ``contib/udev/99-usbsdmux.rules`` serves two purposes:\n\n* Allow users currently logged into the system and users in the\n  ``plugdev`` group [1]_ to access connected USB-SD-Muxes.\n* Create a reliable path in the filesystem to access specific\n  USB-SD-Muxes based on their pre-programmed unique serial number.\n  This is useful when multiple USB-SD-Muxes are connect to a system,\n  as the enumeration-order, and thus the ``/dev/sg*`` numbering,\n  may differ between reboots.\n  The serial number is printed on a label attached to the device.\n\nUsers of a Debian based distribution [1]_ can install the udev rule\nby cloning this repository and copying it to the appropriate location\nand reloading the active udev rules:\n\n.. code-block:: bash\n\n   $ git clone \"https://github.com/linux-automation/usbsdmux.git\"\n   $ sudo cp usbsdmux/contrib/udev/99-usbsdmux.rules /etc/udev/rules.d/\n   $ sudo udevadm control --reload-rules\n\nAfter reattaching the USB-SD-Mux you should get a list of connected USB-SD-Muxes,\nbased on their unique serial numbers, by listing the contents of\nthe ``/dev/usb-sd-mux/`` directory:\n\n.. code-block:: bash\n\n    $ ls -l /dev/usb-sd-mux/\n    total 0\n    lrwxrwxrwx 1 root plugdev 6 Mar 31 11:21 id-000000000042 -> ../sg3\n    lrwxrwxrwx 1 root plugdev 6 Mar 27 00:33 id-000000000078 -> ../sg2\n    lrwxrwxrwx 1 root plugdev 6 Mar 24 09:51 id-000000000378 -> ../sg1\n\n.. [1] The ``plugdev`` group is used in Debian and Debian based distributions\n       (like Ubuntu and Linux Mint) to grant access to pluggable gadgets.\n       Depending on your Linux distribution you may want to create/use another\n       group for this purpose and adapt the ``udev`` rule accordingly.\n\nTroubleshooting\n---------------\n\n* Some single board computers, especially Raspberry Pi model 4s, do not work with\n  new/fast micro SD cards, due to drive strength issues at high frequencies.\n  Use old and slow micro SD cards with these devices.\n  Another workaround is the replacement of resistors ``R101`` and ``R102`` with 0Î©\n  parts. This modifications does however void the EMC compliance statement provided\n  by the Linux Automation GmbH.\n* Some usecases, like hard to reach connectors or full-size SD cards, necessitate the\n  use of adapters or extension cables, leading to the same drive strength issues\n  and require the same workarounds as documented above.\n* In order for the ``/dev/sg*`` device to appear the ``sg`` kernel module needs to be loaded\n  into the kernel. This is usually done automatically by ``udev`` once the USB-SD-Mux is connected.\n  To manually load the kernel module run ``sudo modprobe sg``.\n\n.. |license| image:: https://img.shields.io/badge/license-LGPLv2.1-blue.svg\n    :alt: LGPLv2.1\n    :target: https://raw.githubusercontent.com/linux-automation/usbsdmux/master/COPYING\n\n.. |pypi| image:: https://img.shields.io/pypi/v/usbsdmux.svg\n    :alt: pypi.org\n    :target: https://pypi.org/project/usbsdmux\n\nContributing\n------------\n\nThank you for thinking about contributing to this project!\nChanges should be submitted via a\n`Github pull request <https://github.com/linux-automation/usbsdmux/pulls>`_.\n\nThis project uses the `Developer's Certificate of Origin 1.1\n<https://developercertificate.org/>`_ with the same `process\n<https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin>`_\nas used for the Linux kernel:\n\n  Developer's Certificate of Origin 1.1\n\n  By making a contribution to this project, I certify that:\n\n  (a) The contribution was created in whole or in part by me and I\n      have the right to submit it under the open source license\n      indicated in the file; or\n\n  (b) The contribution is based upon previous work that, to the best\n      of my knowledge, is covered under an appropriate open source\n      license and I have the right under that license to submit that\n      work with modifications, whether created in whole or in part\n      by me, under the same open source license (unless I am\n      permitted to submit under a different license), as indicated\n      in the file; or\n\n  (c) The contribution was provided directly to me by some other\n      person who certified (a), (b) or (c) and I have not modified\n      it.\n\n  (d) I understand and agree that this project and the contribution\n      are public and that a record of the contribution (including all\n      personal information I submit with it, including my sign-off) is\n      maintained indefinitely and may be redistributed consistent with\n      this project or the open source license(s) involved.\n\nThen you just add a line (using ``git commit -s``) saying:\n\n  Signed-off-by: Random J Developer <random@developer.example.org>\n\nusing your real name (sorry, no pseudonyms or anonymous contributions).",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pengutronix/usbsdmux",
    "keywords": "",
    "license": "LGPL-2.1-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "usbsdmux",
    "package_url": "https://pypi.org/project/usbsdmux/",
    "platform": "",
    "project_url": "https://pypi.org/project/usbsdmux/",
    "project_urls": {
      "Homepage": "https://github.com/pengutronix/usbsdmux"
    },
    "release_url": "https://pypi.org/project/usbsdmux/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tool to control an usb-sd-mux from the command line",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10964577,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25eceb304cd1da4a6316de30e3018891667891a9fccff88f558d2047360005ce",
          "md5": "1b8faf63666325b17e841071a5631a15",
          "sha256": "691dbe8420f0528db490cb8c936192e32ff202436c8dea544e7d03c12e3d2b56"
        },
        "downloads": -1,
        "filename": "usbsdmux-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1b8faf63666325b17e841071a5631a15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26042,
        "upload_time": "2019-12-16T14:47:15",
        "upload_time_iso_8601": "2019-12-16T14:47:15.850777Z",
        "url": "https://files.pythonhosted.org/packages/25/ec/eb304cd1da4a6316de30e3018891667891a9fccff88f558d2047360005ce/usbsdmux-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d09f2cb02c98522cae406b0b423e2106adc116f92735f6fa036d1c731928de3f",
          "md5": "deb9d5c0e5c7897fedbf24d0c4b6a291",
          "sha256": "f86b69bb2e29fac59b8ac1b000668c0385535214bc28159073ece35d632846f3"
        },
        "downloads": -1,
        "filename": "usbsdmux-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "deb9d5c0e5c7897fedbf24d0c4b6a291",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26020,
        "upload_time": "2019-12-16T14:56:57",
        "upload_time_iso_8601": "2019-12-16T14:56:57.218485Z",
        "url": "https://files.pythonhosted.org/packages/d0/9f/2cb02c98522cae406b0b423e2106adc116f92735f6fa036d1c731928de3f/usbsdmux-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdda15e52b9d47180d7fcd219abf772a1601ab1bc11e64ca03bcede96126ec60",
          "md5": "3ee56bebe3a028dda6d793d42ef3f855",
          "sha256": "2ee59b4c62d0e78c08dbe5ad16583ef691b251abcbbb29b58565179d74066d54"
        },
        "downloads": -1,
        "filename": "usbsdmux-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3ee56bebe3a028dda6d793d42ef3f855",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26582,
        "upload_time": "2019-12-16T15:02:33",
        "upload_time_iso_8601": "2019-12-16T15:02:33.991554Z",
        "url": "https://files.pythonhosted.org/packages/fd/da/15e52b9d47180d7fcd219abf772a1601ab1bc11e64ca03bcede96126ec60/usbsdmux-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "232c7af1e27488e415b8ea13a45fd0f91f74dc9c1dfa6b2b2100326f47fb7862",
          "md5": "fcec7c44778d546dc00f71901fc36c69",
          "sha256": "c9d0d44aa05363ada23ad59d82b161daaacef4b322f8e098230e6b7a1eaea080"
        },
        "downloads": -1,
        "filename": "usbsdmux-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcec7c44778d546dc00f71901fc36c69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29246,
        "upload_time": "2021-04-08T14:29:44",
        "upload_time_iso_8601": "2021-04-08T14:29:44.663517Z",
        "url": "https://files.pythonhosted.org/packages/23/2c/7af1e27488e415b8ea13a45fd0f91f74dc9c1dfa6b2b2100326f47fb7862/usbsdmux-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cff8b40f5c4f602b11b896b4cc15673d5185f6fcb01e9eee3720894e9b0f044b",
          "md5": "f0b93e84f71e578ba47182a40487f107",
          "sha256": "802c704798f1ce41f6d81ea7c41c007741e9c163088ffce9e5544e274216abb7"
        },
        "downloads": -1,
        "filename": "usbsdmux-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f0b93e84f71e578ba47182a40487f107",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31194,
        "upload_time": "2021-07-21T08:31:08",
        "upload_time_iso_8601": "2021-07-21T08:31:08.899199Z",
        "url": "https://files.pythonhosted.org/packages/cf/f8/b40f5c4f602b11b896b4cc15673d5185f6fcb01e9eee3720894e9b0f044b/usbsdmux-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cff8b40f5c4f602b11b896b4cc15673d5185f6fcb01e9eee3720894e9b0f044b",
        "md5": "f0b93e84f71e578ba47182a40487f107",
        "sha256": "802c704798f1ce41f6d81ea7c41c007741e9c163088ffce9e5544e274216abb7"
      },
      "downloads": -1,
      "filename": "usbsdmux-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f0b93e84f71e578ba47182a40487f107",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31194,
      "upload_time": "2021-07-21T08:31:08",
      "upload_time_iso_8601": "2021-07-21T08:31:08.899199Z",
      "url": "https://files.pythonhosted.org/packages/cf/f8/b40f5c4f602b11b896b4cc15673d5185f6fcb01e9eee3720894e9b0f044b/usbsdmux-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}