{
  "info": {
    "author": "Todd Francis DeLuca",
    "author_email": "todddeluca@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "## Introduction\n\nVagrantPy is a python module that provides a _thin_ wrapper around the\n`vagrant` command line executable, allowing programmatic control of Vagrant\nvirtual machines (boxes).  This module is useful for:\n\n- Starting a Vagrant virtual machine (VM) (`up`).\n- Terminating a Vagrant VM (`destroy`).\n- Halting a Vagrant VM without destroying it (`halt`).\n- Querying the status of a VM or VMs (`status`).\n- Getting ssh configuration information useful for SSHing into the VM. (`host`, `port`, ...)\n- Running `vagrant` commands in a multi-VM environment\n  (http://vagrantup.com/v1/docs/multivm.html) by using `vm_name` parameter.\n- Initializing the VM based on a named base box, using init().\n- Adding, Removing, and Listing boxes (`box add`, `box remove`, `box list`).\n- Provisioning VMs - up() accepts options like `no_provision`, `provision`, and `provision_with`, and there is a `provision()` method.\n- Using sandbox mode from the Sahara gem (https://github.com/jedi4ever/sahara).\n\nThis project began because I wanted python bindings for Vagrant so I could\nprogrammatically access my vagrant box using Fabric.  Drop me a line to let me\nknow how you use vagrantpy.  I'd love to share more use cases.  -Todd DeLuca\n\n\n## Versioning and API Stability\n\nThis package is _beta_ and its API is not guaranteed to be stable.  The API\nattempts to be congruent with the `vagrant` API terminology, to facilitate\nknowledge transfer for users already familiar with Vagrant.  Over time, the\nvagrantpy API has changed to better match the underling `vagrant` CLI and\nto evolve with the changes in that CLI.\n\nThe package version numbering is in the form `0.X.Y`.  The initial `0` reflects\nthe _beta_ nature of this project.  The number `X` is incremented when\nbackwards-incompatible changes occur.  The number `Y` is incremented when\nbackwards-compatible features or bug fixes are added.\n\n\n## Requirements\n\n- Vagrant 1.4 or greater (currently tested with 1.7.2).  Using the latest\n  version of Vagrant is strongly recommended.\n- Vagrant requires VirtualBox, VMWare, or another supported provider.\n- Python 2.7 (the only version this package has been tested with.) or Python\n  3.3 or higher.\n- The Sahara gem for Vagrant is optional.  It will allow you to use\n  `SandboxVagrant`.\n\n\n## Installation\n\n### Install from pypi.python.org\n\nDownload and install vagrantpy:\n\n    pip install vagrantpy\n\n### Install from github.com\n\nClone and install vagrantpy\n\n    cd ~\n    git clone https://github.com/vagrantpy/vagrantpy.git\n    cd vagrantpy\n    python setup.py install\n\n\n## Usage\n\nA contrived example of starting a vagrant box (using a Vagrantfile from the\ncurrent directory) and running a fabric task on it:\n\n    import vagrant\n    from fabric.api import env, execute, task, run\n\n    @task\n    def mytask():\n        run('echo $USER')\n\n\n    v = vagrant.Vagrant()\n    v.up()\n    env.hosts = [v.user_hostname_port()]\n    env.key_filename = v.keyfile()\n    env.disable_known_hosts = True # useful for when the vagrant box ip changes.\n    execute(mytask) # run a fabric task on the vagrant host.\n\nAnother example showing how to use vagrant multi-vm feature with fabric:\n\n    import vagrant\n    from fabric.api import *\n\n    @task\n    def start(machine_name):\n       \"\"\"Starts the specified machine using vagrant\"\"\"\n       v = vagrant.Vagrant()\n       v.up(vm_name=machine_name)\n       with settings(host_string= v.user_hostname_port(vm_name=machine_name),\n                     key_filename = v.keyfile(vm_name=machine_name),\n                     disable_known_hosts = True):\n            run(\"echo hello\")\n\nBy default python vagrant instances are quiet, meaning that they capture stdout\nand stderr.  For a \"loud\" instance, use `vagrant.Vagrant(quiet_stdout=False)`.\nSet `quiet_stderr=False` for an even louder version.\n\n### Interacting With the Vagrant Subprocess\n\nThe `Vagrant` class works by executing `vagrant` commands in a subprocess and\ninterpreting the output.  Depending on the needs of the user, the communication\nto and from the subprocess can be tailored by altering its environment and\nwhere it sends its stdout and stderr.\n\n#### Silencing the Stdout or Stderr of the Vagrant Subprocess\n\nThe stdout and stderr of the underlying vagrant process can be silenced by\nusing the `out_cm` and `err_cm` parameters, or by using the `quiet_stdout` and\n`quiet_stderr` parameters of `Vagrant.__init__`.  \n\nUsing `out_cm` and `err_cm` to redirect stdout and stderr to `/dev/null`:\n\n    v = vagrant.Vagrant(out_cm=vagrant.devnull_cm, err_cm=vagrant.devnull_cm)\n    v.up() # normally noisy\n\nUsing `quiet_stdout` and `quiet_stderr` to redirect stdout and stderr to\n`/dev/null`:\n\n    v = vagrant.Vagrant(quiet_stdout=True, quiet_stderr=True)\n    v.up() # normally noisy\n\nThese are functionally equivalent.\n\n#### Logging the Stdout or Stderr of the Vagrant Subprocess\n\nA user might wish to direct the stdout and stderr of a vagrant subprocess to\na file, perhaps to log and analyze the results of an automated process.  This\ncan be accomplished using the `out_cm` and `err_cm` parameters of\n`Vagrant.__init__`.\n\nFor example, log the stdout and stderr of the subprocess to the file\n'deployment.log':\n\n    log_cm = vagrant.make_file_cm('deployment.log')\n    v = vagrant.Vagrant(out_cm=log_cm, err_cm=log_cm)\n    v.up() # normally noisy\n\n#### Altering the Environment of the Vagrant Subprocess\n\nIt's possible to communicate with the Vagrant subprocess using environment\nvariables. The `Vagrantfile` could expect environment variables to be present\nand act accordingly. The environment variables can be set by `vagrantpy`.\n\n```python\nimport vagrant\n\nv = vagrant.Vagrant()\n\nos_env = os.environ.copy()\nos_env['USE_NFS'] = '1'\n\nv.env = os_env\nv.up()  # will pass env to the vagrant subprocess\n```\n\nAlternatively, the environment can be passed at instantiation time.\n\n```python\nimport vagrant\n\nos_env = os.environ.copy()\nos_env['USE_NFS'] = '1'\n\nv = vagrant.Vagrant(env=env)\nassert v.env is env  # True\nv.up()  # will pass env to the vagrant subprocess\n```\n\n## Contribute\n\nIf you use python and vagrant and this project does not do what you want,\nplease open an issue or a pull request on github at\nhttps://github.com/vagrantpy/vagrantpy.\n\nPlease see CHANGELOG.md for a detailed list of contributions and authors.\n\nWhen making a pull request, please include unit tests that test your changes\nand make sure any existing tests still work.  See the Testing section below.\n\n\n## Testing\n\nRunning the full suite of tests might take 10 minutes or so.  It involves\ndownloading boxes and starting and stopping virtual machines several times.\n\nRun the tests from the top-level directory of the repository:\n\n    nosetests\n\nHere is an example of running an individual test:\n\n    nosetests tests.test_vagrant:test_boxes\n\n\nManual test of functionality for controlling where the vagrant subcommand\noutput is sent -- console or devnull:\n\n    >>> import vagrant\n    >>> import os\n    >>> vagrantfile = '/Users/tfd/proj/vagrantpy/tests/vagrantfiles/single_box'\n    >>> # Demonstrate a quiet Vagrant.  Equivalent to out_cm=vagrant.devnull_cm\n    ... v1 = vagrant.Vagrant(vagrantfile)\n    >>> v1.destroy() # output to /dev/null\n    >>> # Demonstrate a loud Vagrant.  Equivalent to out_cm=vagrant.stdout_cm\n    ... v2 = vagrant.Vagrant(vagrantfile, quiet_stdout=False)\n    >>> v2.destroy() # stdout sent to console\n    ==> default: VM not created. Moving on...\n    >>> # Demonstrate that out_cm takes precedence over quiet_stdout=True\n    ... v3 = vagrant.Vagrant(vagrantfile, out_cm=vagrant.stdout_cm)\n    >>> v3.destroy() # output to console\n    ==> default: VM not created. Moving on...\n    >>> # Demonstrate a quiet Vagrant using devnull_cm directly\n    ... v4 = vagrant.Vagrant(vagrantfile, out_cm=vagrant.devnull_cm)\n    >>> v4.destroy() # output to console\n    >>> \n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vagrantpy/vagrantpy",
    "keywords": "python virtual machine box vagrant virtualbox vagrantfile",
    "license": "MIT",
    "maintainer": "David McCheyne",
    "maintainer_email": "davidmccheyne@gmail.com",
    "name": "vagrantpy",
    "package_url": "https://pypi.org/project/vagrantpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/vagrantpy/",
    "project_urls": {
      "Homepage": "https://github.com/vagrantpy/vagrantpy"
    },
    "release_url": "https://pypi.org/project/vagrantpy/0.6.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python bindings for interacting with Vagrant virtual machines.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6462788,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64b3c8351cb7a650d535c9abe723f9086302ae34f8f1f75a1b2a88da5e3dc1b3",
          "md5": "62babc53b9a92c0c4299a7b1f284b277",
          "sha256": "dbe70ea11db76bea9c367c8de633a58f4c11f1932ff4c83cdebeb571f73a6de1"
        },
        "downloads": -1,
        "filename": "vagrantpy-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62babc53b9a92c0c4299a7b1f284b277",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18113,
        "upload_time": "2020-01-16T01:46:51",
        "upload_time_iso_8601": "2020-01-16T01:46:51.453734Z",
        "url": "https://files.pythonhosted.org/packages/64/b3/c8351cb7a650d535c9abe723f9086302ae34f8f1f75a1b2a88da5e3dc1b3/vagrantpy-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "929a3ee52235ccb3f4eb6a15f137171e419a9acd6c319f078e58df6df9de7617",
          "md5": "f38413f014815e1480a4b2f392c0fb06",
          "sha256": "80d63da4de80e557eca08cc847335a4980f0162032ed99f9643eddcc52f6c48e"
        },
        "downloads": -1,
        "filename": "vagrantpy-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f38413f014815e1480a4b2f392c0fb06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29582,
        "upload_time": "2020-01-16T01:46:54",
        "upload_time_iso_8601": "2020-01-16T01:46:54.025736Z",
        "url": "https://files.pythonhosted.org/packages/92/9a/3ee52235ccb3f4eb6a15f137171e419a9acd6c319f078e58df6df9de7617/vagrantpy-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64b3c8351cb7a650d535c9abe723f9086302ae34f8f1f75a1b2a88da5e3dc1b3",
        "md5": "62babc53b9a92c0c4299a7b1f284b277",
        "sha256": "dbe70ea11db76bea9c367c8de633a58f4c11f1932ff4c83cdebeb571f73a6de1"
      },
      "downloads": -1,
      "filename": "vagrantpy-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62babc53b9a92c0c4299a7b1f284b277",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18113,
      "upload_time": "2020-01-16T01:46:51",
      "upload_time_iso_8601": "2020-01-16T01:46:51.453734Z",
      "url": "https://files.pythonhosted.org/packages/64/b3/c8351cb7a650d535c9abe723f9086302ae34f8f1f75a1b2a88da5e3dc1b3/vagrantpy-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "929a3ee52235ccb3f4eb6a15f137171e419a9acd6c319f078e58df6df9de7617",
        "md5": "f38413f014815e1480a4b2f392c0fb06",
        "sha256": "80d63da4de80e557eca08cc847335a4980f0162032ed99f9643eddcc52f6c48e"
      },
      "downloads": -1,
      "filename": "vagrantpy-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f38413f014815e1480a4b2f392c0fb06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29582,
      "upload_time": "2020-01-16T01:46:54",
      "upload_time_iso_8601": "2020-01-16T01:46:54.025736Z",
      "url": "https://files.pythonhosted.org/packages/92/9a/3ee52235ccb3f4eb6a15f137171e419a9acd6c319f078e58df6df9de7617/vagrantpy-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}