{
  "info": {
    "author": "Erik Dunteman",
    "author_email": "erik@banana.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# server\n\nAn HTTP server designed for AI\n\n### Quickstart\n\nInstall the Banana server package\n\n```bash\npip3 install banana-server\n```\n\nCreate a python file called `main.py` with this:\n\n```python\nfrom banana_server import Banana\n\napp = Banana(\"server\")\n\n@app.init\ndef init():\n    model = \"my pytorch model\"\n    app.optimize(model)\n\n    return app.set_cache({\n        \"model\": model,\n        \"hello\": \"world\"\n    })\n\n@app.handler\ndef handler(cache, json_in) -> dict:\n    print(\"cache:\", cache)\n    print(\"json_in:\", json_in)\n    return {\"json\": \"out\"}\n\napp.serve()\n```\n\nRun it with\n\n```bash\npython3 main.py\n```\n\nTest the running server with\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"test\"}' http://localhost:8000\n```\n\n# Documentation\n\n### banana_server.Banana\n\n```python\nfrom banana_server import Banana\n\napp = Banana(\"server\")\n```\n\nThis instantiates your HTTP app, similar to popular frameworks like [Flask](https://flask.palletsprojects.com/en/2.2.x/_)\n\nThis HTTP server is production-ready out of the box.\n\n### @app.init\n\n```python\n@app.init\ndef init():\n    model = \"my pytorch model\"\n    app.optimize(model)\n\n    return app.set_cache({\n        \"model\": model,\n        \"hello\": \"world\"\n    })\n```\n\nThe `@app.init` decorated function runs once on server startup, and is used to load any reuseable, heavy objects such as:\n\n- Your AI model, loaded to GPU\n- Tokenizers\n- Precalculated embeddings\n\nOnce initialized, you must save those variables to the cache with `app.set_cache({})` so they can be referenced later.\n\nThere may only be one `@app.init` function.\n\n### @app.handler\n\n```python\n@app.handler\ndef handler(cache, json_in) -> dict:\n    print(\"cache:\", cache)\n    print(\"json_in:\", json_in)\n    return {\"json\": \"out\"}\n```\n\nThe `@app.handler` decorated function runs for every http call, and is used to run inference or training workloads against your model(s).\n\n| Arg     | Type | Description                                                                                       |\n| ------- | ---- | ------------------------------------------------------------------------------------------------- |\n| cache   | dict | The app's cache, set with set_cache()                                                             |\n| json_in | dict | The json body of the input call. If using the Banana client SDK, this is the same as model_inputs |\n\n| Return Val | Type | Description                                                                                              |\n| ---------- | ---- | -------------------------------------------------------------------------------------------------------- |\n| json_out   | dict | The json body to return to the client. If using the Banana client SDK, this is the same as model_outputs |\n\nThere may only be one `@app.handler` function.\n\n### app.set_cache()\n\n```python\napp.set_cache({})\n```\n\n`app.set_cache` saves the input dictionary to the app's cache, for reuse in future calls. It may be used in both the `@app.init` and `@app.handler` functions.\n\n`app.set_cache` overwrites any preexisting cache.\n\n### app.get_cache()\n\n```python\ncache = app.get_cache()\n```\n\n`app.get_cache` fetches the dictionary to the app's cache. This value is automatically provided for you as the `cache` argument in the `@app.handler` function.\n\n### app.optimize(model)\n\n```python\nmodel # some pytorch model\napp.optimize(model)\n```\n\n`app.optimize` is a feature specific to users hosting on [Banana's serverless GPU infrastructure](https://banana.dev). It is run during buildtime rather than runtime, and is used to locate the model(s) to be targeted for Banana's Fastboot optimization.\n\nMultiple models may be optimized. Only Pytorch models are currently supported.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.banana.dev",
    "keywords": "Banana server,HTTP server,Banana,Framework",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "banana-server",
    "package_url": "https://pypi.org/project/banana-server/",
    "platform": null,
    "project_url": "https://pypi.org/project/banana-server/",
    "project_urls": {
      "Homepage": "https://www.banana.dev"
    },
    "release_url": "https://pypi.org/project/banana-server/0.0.1/",
    "requires_dist": [
      "sanic (<=22.0.0)"
    ],
    "requires_python": "",
    "summary": "The banana package is a python client to interact with your machine learning models hosted on Banana",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17078336,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7dc145db7bf4d680e65b6abd395403609af5cf948a150582e48c0ccdf1a1aff",
          "md5": "b78558f1ad7ce811db4673580842933d",
          "sha256": "9188af5d1f56c4f7caaebc40a9a7ea90b8ea7ea052aec9b977d7468fe0a2b12f"
        },
        "downloads": -1,
        "filename": "banana_server-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b78558f1ad7ce811db4673580842933d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7730,
        "upload_time": "2023-02-28T07:22:41",
        "upload_time_iso_8601": "2023-02-28T07:22:41.877081Z",
        "url": "https://files.pythonhosted.org/packages/b7/dc/145db7bf4d680e65b6abd395403609af5cf948a150582e48c0ccdf1a1aff/banana_server-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dda84d1f5b2301b4c5af841af2afc54a8abc52e5f5dacfea64cbe3b30224a587",
          "md5": "51850890424f6b39d900373ea0e417d9",
          "sha256": "1d62dc83ccbe890a54714d8adec49b2523d36dc43e60e1f60690328134baef5b"
        },
        "downloads": -1,
        "filename": "banana_server-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51850890424f6b39d900373ea0e417d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7467,
        "upload_time": "2023-02-28T07:22:43",
        "upload_time_iso_8601": "2023-02-28T07:22:43.519776Z",
        "url": "https://files.pythonhosted.org/packages/dd/a8/4d1f5b2301b4c5af841af2afc54a8abc52e5f5dacfea64cbe3b30224a587/banana_server-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7dc145db7bf4d680e65b6abd395403609af5cf948a150582e48c0ccdf1a1aff",
        "md5": "b78558f1ad7ce811db4673580842933d",
        "sha256": "9188af5d1f56c4f7caaebc40a9a7ea90b8ea7ea052aec9b977d7468fe0a2b12f"
      },
      "downloads": -1,
      "filename": "banana_server-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b78558f1ad7ce811db4673580842933d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7730,
      "upload_time": "2023-02-28T07:22:41",
      "upload_time_iso_8601": "2023-02-28T07:22:41.877081Z",
      "url": "https://files.pythonhosted.org/packages/b7/dc/145db7bf4d680e65b6abd395403609af5cf948a150582e48c0ccdf1a1aff/banana_server-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dda84d1f5b2301b4c5af841af2afc54a8abc52e5f5dacfea64cbe3b30224a587",
        "md5": "51850890424f6b39d900373ea0e417d9",
        "sha256": "1d62dc83ccbe890a54714d8adec49b2523d36dc43e60e1f60690328134baef5b"
      },
      "downloads": -1,
      "filename": "banana_server-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "51850890424f6b39d900373ea0e417d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7467,
      "upload_time": "2023-02-28T07:22:43",
      "upload_time_iso_8601": "2023-02-28T07:22:43.519776Z",
      "url": "https://files.pythonhosted.org/packages/dd/a8/4d1f5b2301b4c5af841af2afc54a8abc52e5f5dacfea64cbe3b30224a587/banana_server-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}