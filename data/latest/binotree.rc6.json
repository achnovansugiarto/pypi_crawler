{
  "info": {
    "author": "Espen Hamre",
    "author_email": "devespen@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Binomial Tree for Options Pricing\n### Motivation:\nStarted as a project for learning in relation to school but turned out as a tool that \ncould be useful for more.\n\n## What does it do?\nThis class will construct/calculate/make/whatever a binomial tree with given parameters \nand calculate option prices for both American and European Call and Put options.\n\n- The class will make tree objects with Dataframe representation \n(except for non-recombining trees).\n- The `write()` method will generate an Excel file with the result.\n\n### Dividends\nThe class can take dividends into account (dividend yield **and** discrete dividends). \nIt has 2 ways of solving for discrete dividends, the 'F solution' and 'non-recombining'.\n\n#### F solution\nSubtracts the present value from current spot, and makes binomial tree based on this\n'pre-paid forward'. \n\n#### Non-recombining tree\nAs the name suggests, the tree does not recombine after dividend payout and calculates\nthe option premium as normal (assumes that we can trade just before and after \nstock goes ex-div)\n\n***\n\n# Installation and import\n### Installation\nThe project can be installed from [pip](https://pypi.org/project/binotree/) with the command:  \n`pip install binotree`  \n\n***\n\n## Quickstart\n### Passing arguments\n```python\nimport binotree as bt\n\n\nparameters = dict(fname = 'NormalTree', \n                  spot = 50, strike = 50, \n                  T = 3/12, dt = 1/12, dtfreq = 'm',\n                  vola = 0.30, r = 0.03)\n\ntreeObject = bt.tree(params = parameters)\n```\n\n\\\nThe class can also take in the parameters directly as keywords:\n```python\nimport binotree as bt\n\n\ntreeObject = bt.tree(fname = 'NormalTree', \n                     spot = 50, strike = 50, \n                     T = 3/12, dt = 1/12, dtfreq = 'm',\n                     vola = 0.30, r = 0.03)\n```\n\n\\\nIn the case of both a parameters dictionary and keywords, the two will merge, \nand keywords will override any conflicting parameters:\n```python\nimport binotree as bt\n\n\nparameters = dict(fname = 'NormalTree', \n                  spot = 50, strike = 50, \n                  T = 3/12, dt = 1/12, dtfreq = 'm',\n                  vola = 0.30, r = 0.03)\n\ntreeObject = bt.tree(params = parameters, vola = 0.20)\n```\n(here the vola specification from the dictionary will be replaced with 0.20)\n\n## Access the binomial tree from console\nEuropean call/put and american call/put are all calculated by default \n(can be changed through the `maketrees` parameter).  \nThe *bt.tree* object will store a tree object for each option type calculated.  \nAccess the european call tree as such:\n```python\ntreeObject.ecTree\n```\n```\n        dt ->      0/12      1/12      2/12      3/12\n         Spot                                  64.834\n  [Intrinsic]                                [14.834]\n    (Premium)                                (14.834)\n                                    59.4555          \n                                   [9.4555]          \n                                   (9.5803)          \n                          54.5232             54.5232\n                         [4.5232]            [4.5232]\n                         (5.8343)            (4.5232)\n                   50.0                50.0          \n                  [0.0]               [0.0]          \n               (3.4209)            (2.2235)          \n                          45.8521             45.8521\n                            [0.0]               [0.0]\n                          (1.093)               (0.0)\n                                    42.0483          \n                                      [0.0]          \n                                      (0.0)          \n                                                38.56\n                                                [0.0]\n                                                (0.0)\n```\n\\\nIn case your tree is too big for a proper representation in the console, \nyou can access any node you want by calling the tree object:  \n```python\ntreeObject.ecTree(up = 1, down = 0)\n```\n```\n{'Spot': 54.5232,\n 'Intrinsic': 4.5232,\n 'Premium': 5.8343,\n 'Delta': 0.7781,\n 'Bond': -36.5877}\n```\n\n## Write to excel file\nSimply call the `write()` method to write to excel file. Pass the `direc` parameter \nin construction to specify directory \n(if none is passed, the working directory is used).\n```python\nimport binotree as bt\n\n\nparameters = dict(fname = 'NormalTree', \n                  spot = 50, strike = 50, \n                  T = 3/12, dt = 1/12, dtfreq = 'm',\n                  vola = 0.30, r = 0.03)\n\ntreeObject = bt.tree(params = parameters, direc = 'your/directory/here')\n\ntreeObject.write()\n\n# The following print message will show where your file was made:\n# File was made at: 'your/directory/here/NormalTree.xlsx\n```\nThe file should look something like this:  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/excelDemo.png\" width=\"75%\" height=\"75%\">  \n(each option type is given its own sheet in the excel file)\n\n***\n\n# Full parameter specification\n[Parameters specification](docs/parameters.md)\n\n***\n\n# How to pass parameters/arguments:\nThere are 2 ways of parsing arguments:\n1. A dictionary\n2. Keyword arguments (kwargs)\n   \nIf both a dictionary and keyword arguments are parsed they will join together. \nKeyword arguments will override any parameters passed in both the dictionary and \nas keyword arguments.\n\n***\n\n# Which parameters to pass:\n*If nothing is passed, the `help()` method will print help for specifying parameters*  \n\n\n## Spot and strike\n#### Both must be passed\n- `spot`\n- `strike`\n\n***\n\n## Time and period specification\nMust be in terms of years (e.g., maturity in 6 months would be *T = 6/12* ).  \nThe variable `dtfreq` can be passed as a string (`'d'`, `'w'`, or `'m'`) for\nprettier formatting in output.\n#### 2 of 3 must be passed   \n- `T`\n- `dt`\n- `periods`\n\n***\n\n## Interest rate, dividend yield, and continuous compounding\n#### 0 of 3 *must* be passed\n- `r`\n- `rcont`\n- `divyield`\n\n***\n\n## Volatility and up/down movements\n#### 1 of 3 must be passed\n- `vola`\n- `u`\n- `d`\n\nFor custom function for calculating up/down movements, \nsee [udfunc specification](docs/parameters.md#udfunc).\n\n***\n\n## Dividends\n#### 0 of 2 *must* be passed\n- `discdiv`\n- `nonrec`\n\n***\n\n## Directory for Excel output\n#### 0 of 4 *must* be passed\n- `direc`\n- `folname`\n- `fname` \n- `write`\n\n***\n\n## Various\n#### 0 of 5 *must* be passed\n- `collapsed`\n- `maketrees`\n- `headerformat`\n- `rounding`\n- `makedfs`\n- `portfolios`\n- `showIntrinsic`\n\n***\n\n# Examples of use\n### imports\n\n```python\nimport binotree as bt\n```\n\n***\n\n## Normal tree\nSimple 3-period binomial tree:\n\n```python\nparsNormal = dict(fname = 'NormalTree', \n                  spot = 100, strike = 95, \n                  dt = 1/12, periods = 3, \n                  vola = 0.20, r = 0.05, \n                  showIntrinsic = True, # True is default\n                  dtfreq = 'm', rounding = 4)  \n\nbinoNormal = bt.tree(params = parsNormal)\n```\n\n### Tree preview\nThe binomial tree for the European Call is accessed by `binoNormal.ecTree`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/dfTreeDemo.png\" width=\"65%\" height=\"65%\">\n\n### Callable tree\nIn case your binomial tree is big and won't print neatly you can access each node by \ncalling the tree object with `up` and `down` passed:  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/treeCall.png\" width=\"50%\" height=\"50%\">\n\n### `write()` method\ntyping `binoNormal.write()` in the console an Excel file will be generated. Either in the\ncurrent working directory, or passed directory through the `direc` parameter.  \nThe location of the file should be printed.  \n```python\nbinoNormal.write(fname_override = 'NEW_FILENAME',\n                 width = int(\"{your file window width}\"), height = int(\"{file window height}\"))\n```\n`File was made at: {your directory here}/NEW_FILENAME.xlsx`  \n\\\n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/excelDemo.png\" width=\"75%\" height=\"75%\">\n\n***\n\n## Plotting methods\nThe plotting methods can take in keywords to alter the original parameters\n\n\\\n**Plotting deltas w.r.t. current spot:**\n### `binoNormal.ecPlotDeltas()`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/deltaPlotDemo.png\" width=\"70%\" height=\"60%\">\n\n\n\\\nChanging periods for plot to make it smoother:\n### `binoNormal.ecPlotDeltas(periods = 30)`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/deltaPlotPeriodsDemo.png\" width=\"70%\" height=\"70%\">\n\n\n\\\n**Plotting price w.r.t. current spot:**\n### `binoNormal.ecPlotPrice()`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/pricePlotDemo.png\" width=\"70%\" height=\"70%\">\n\n\n\\\nChanging strike for plot:\n### `binoNormal.ecPlotPrice(strike = 40)`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/pricePlotStrikeDemo.png\" width=\"70%\" height=\"70%\">\n\n\n\\\n**Plotting price w.r.t. periods used in binomial tree:**\n### `binoNormal.ecPlotPeriods()`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/periodsPlotDemo.png\" width=\"70%\" height=\"70%\">\n\n\n\\\n**Plotting binomial spot tree with distribution of last period:**\n### `binoNormal.plotSpots()`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/spotsPlotDemo.png\" width=\"70%\" height=\"70%\">\n\n\n\\\nChanging number of periods in tree (with `T` remaining the same)\n### `binoNormal.plotSpots(periods = 30)`  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/spotsPlot30Demo.png\" width=\"70%\" height=\"70%\">\n\n\n***\n\n## Replicating `portfolios`\nThe program calculates option prices in each node through risk-neutral pricing, \nthen calculates the replicating portfolios after (it was faster that way).  \nAny difference between the risk-neutral pricing result, and the replicating portfolio pricing should\nonly be due to rounding errors.  \n\nSetting the `portoflios` parameter to `True` will include the replicating portfolios as\nseparate sheets in the Excel file. (This will slow down excecution, especially if `periods` is high)\n\n```python\nbinoNormal = bt.tree(params = parsNormal, \n                     rounding = 2, \n                     portfolios = True,  \n                     write = True # setting write to True makes an Excel file from construction\n                     )\n```  \n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/excelPortDemo.png\">  \n**! The errors are to be fixed !** \n\n***\n\n# Discrete dividends\nDiscrete dividends can be passed through the `discdiv` parameter:  \n```python\ndiscdiv = [(1/12, 2)]\n```\n\n## F tree\nFor discrete dividends, the F solution will be the default as it is faster than nonrec:\n\n```python\nparsF = dict(fname = 'Ftree', \n             spot = 50, strike = 50, \n             dt = 1/12, periods = 3, \n             vola = 0.30, r = 0.03, \n             dtfreq = 'm')\n\nbinoF = bt.tree(params = parsF, \n                discdiv = [(1/12, 2)])\n```\n\n***\n\n## Non-recombining tree\nFor discrete dividends -> non-recombining tree.  \nObtained by passing `nonrec` as `True`\n\n```python\nparsNonrec = dict(fname = 'nonrecTree',  \n                  spot = 50, strike = 50,  \n                  dt = 1/12, periods = 3,  \n                  vola = 0.30, r = 0.03,  \n                  dtfreq = 'm')\n\nbinoNonrec = bt.tree(params = parsNonrec, \n                     discdiv = [(1/12, 2)], nonrec = True)\n\nbinoNonrec.write()\n```\n<img src=\"https://raw.githubusercontent.com/EHamre/optionsBinoTree/main/docs/images/nonrecExcelDemo.png\" width=\"85%\" height=\"85%\">  \n\n\n***\n\n# Object as callable\nThe tree object is callable, meaning an instance of the object can be \nused as a function.  \nThis can be handy for getting values in loops or quickly getting new values without \nre-specifying all the parameters.  \nAs a default the class will make american call and put, aswell as european call and put, \nunless the `maketrees` keyword states otherwise. If only one or some specific option types\nare needed, it would be more efficient to specify which types to make.\n\n### Example:\n*As periods becomes large (i.e., dt becomes small), the rounding parameter needs to be \nsufficiently large to avoid miscalculation.*\n```python\npars = dict(fname = 'myTree', \n            spot = 50, strike = 50, \n            dt = 1/12, periods = 3, \n            vola = 0.30, r = 0.03, \n            dtfreq = 'm', rounding = 8)\n\nbinoNormal = bt.tree(params = pars, \n                     maketrees = ['ec', 'ep'])\n\nec_ep_50periods = binoNormal(['ecOptionPrice', 'epOptionPrice'], periods = 50)  \n```\n```python\nec_ep_50periods = {'ecOptionPrice': 3.15373942, \n                   'epOptionPrice': 2.78014216}\n```  \n\nReturns the european call and put price with all parameters remaining the same, \nexcept periods being 50.  \n\n\n### In a loop:\n```python\necList = []\n\nfor i in range(1, 100):\n    ecList.append(binoNormal(['ecOptionPrice'], maketrees = ['ec'], periods = i))\n```\nMakes a list of the european call price.\n\n\n\n***\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EHamre/optionsBinoTree",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "binotree",
    "package_url": "https://pypi.org/project/binotree/",
    "platform": "",
    "project_url": "https://pypi.org/project/binotree/",
    "project_urls": {
      "Homepage": "https://github.com/EHamre/optionsBinoTree"
    },
    "release_url": "https://pypi.org/project/binotree/1.0.5/",
    "requires_dist": [
      "scipy",
      "seaborn",
      "matplotlib",
      "pandas",
      "XlsxWriter",
      "numpy"
    ],
    "requires_python": ">=3.7",
    "summary": "class for creating binomial trees for options pricing",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11376641,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f72e4dafb041ec087ce493aa5f87cd0f981b848afb9bec4c8ea7486d9f625c8",
          "md5": "b4fdd33f67514804a5858fa84ce65671",
          "sha256": "8ce3b13b28345baf87a1b90f54ac73ab80133a4c58bac5770ab6ce8666b6705a"
        },
        "downloads": -1,
        "filename": "binotree-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4fdd33f67514804a5858fa84ce65671",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2342559,
        "upload_time": "2021-07-24T17:20:50",
        "upload_time_iso_8601": "2021-07-24T17:20:50.498379Z",
        "url": "https://files.pythonhosted.org/packages/7f/72/e4dafb041ec087ce493aa5f87cd0f981b848afb9bec4c8ea7486d9f625c8/binotree-1.0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "faulty code"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6a50ab79e91a86038aed0870451a18230b015466ab2ebdcddb8226d4bf80d6f",
          "md5": "10e040fa3acd49deadc1d75875806263",
          "sha256": "3b0ecc82d3e1af9584410836b400460172dc4a31a813e9e00a774528ff2c6240"
        },
        "downloads": -1,
        "filename": "binotree-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10e040fa3acd49deadc1d75875806263",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2333329,
        "upload_time": "2021-07-24T17:20:53",
        "upload_time_iso_8601": "2021-07-24T17:20:53.365382Z",
        "url": "https://files.pythonhosted.org/packages/d6/a5/0ab79e91a86038aed0870451a18230b015466ab2ebdcddb8226d4bf80d6f/binotree-1.0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "faulty code"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19fa39ad8c2a25e8631e84037b10818e699a9235a3fafe3ec755a1d532c34e4f",
          "md5": "c5eaf68986f43990e6e687c10543e185",
          "sha256": "28d2727a271435286eacc370e9085d142459fc18bfb0f5e31d6ee66cefa73097"
        },
        "downloads": -1,
        "filename": "binotree-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5eaf68986f43990e6e687c10543e185",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2343493,
        "upload_time": "2021-07-28T17:51:48",
        "upload_time_iso_8601": "2021-07-28T17:51:48.278171Z",
        "url": "https://files.pythonhosted.org/packages/19/fa/39ad8c2a25e8631e84037b10818e699a9235a3fafe3ec755a1d532c34e4f/binotree-1.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "faulty code"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c196dfefc6b97f9287b13d2981db3d7b74184eebb1ffc9618e8e3f6315f9bdd",
          "md5": "85c23c16b33392a214f5c3777fa76ffb",
          "sha256": "990d8780569198aa3c07a12ee22eb3b649940a28417f830213d5879e46255f3e"
        },
        "downloads": -1,
        "filename": "binotree-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "85c23c16b33392a214f5c3777fa76ffb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2334684,
        "upload_time": "2021-07-28T17:51:50",
        "upload_time_iso_8601": "2021-07-28T17:51:50.221644Z",
        "url": "https://files.pythonhosted.org/packages/6c/19/6dfefc6b97f9287b13d2981db3d7b74184eebb1ffc9618e8e3f6315f9bdd/binotree-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "faulty code"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e32332815697d738178193f22de597ce1d237ddeca02762917603f0608b8aae2",
          "md5": "5e3097d07618273b4e33e54e412af146",
          "sha256": "8c56eca94fe374258e8515eacf9bcc0b778cc4ed7709fc8b887dd3654e9da538"
        },
        "downloads": -1,
        "filename": "binotree-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e3097d07618273b4e33e54e412af146",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2343464,
        "upload_time": "2021-07-28T19:06:49",
        "upload_time_iso_8601": "2021-07-28T19:06:49.011953Z",
        "url": "https://files.pythonhosted.org/packages/e3/23/32815697d738178193f22de597ce1d237ddeca02762917603f0608b8aae2/binotree-1.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "requirements too specific"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98e54c05fab052f13e2cdd96f88228624feda0b09992f221866295158fb84778",
          "md5": "66dc6a9b13318b06d332619292114311",
          "sha256": "deec907484760f144c9f82ce941eb93626b2e7b8a255bdd307a4777d60ffcb4a"
        },
        "downloads": -1,
        "filename": "binotree-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66dc6a9b13318b06d332619292114311",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2334642,
        "upload_time": "2021-07-28T19:06:51",
        "upload_time_iso_8601": "2021-07-28T19:06:51.655204Z",
        "url": "https://files.pythonhosted.org/packages/98/e5/4c05fab052f13e2cdd96f88228624feda0b09992f221866295158fb84778/binotree-1.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": "requirements too specific"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "349f5c0588c93dcb572678485d28bf4feb6fa4366d65cb85ab6320ceb95bba69",
          "md5": "208ffbbb081bea62ab473cb5090e8b3b",
          "sha256": "567e7bf26b719c89b18f059d60491e982fad57a65273d21e9b18af8840bd36a8"
        },
        "downloads": -1,
        "filename": "binotree-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "208ffbbb081bea62ab473cb5090e8b3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2343207,
        "upload_time": "2021-07-30T10:11:52",
        "upload_time_iso_8601": "2021-07-30T10:11:52.128937Z",
        "url": "https://files.pythonhosted.org/packages/34/9f/5c0588c93dcb572678485d28bf4feb6fa4366d65cb85ab6320ceb95bba69/binotree-1.0.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bb298c23ef8d08016c6eb353fdbd2bc90e061c82e93e648d3922a209ae19eb5",
          "md5": "8f5f51c9a7340b92ec9abed03f31c1ed",
          "sha256": "f3d7fe377f79fd3eea2b52cdbeb08c8c5da62998bd972df7f423d337c456bf71"
        },
        "downloads": -1,
        "filename": "binotree-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8f5f51c9a7340b92ec9abed03f31c1ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2334112,
        "upload_time": "2021-07-30T10:11:55",
        "upload_time_iso_8601": "2021-07-30T10:11:55.887391Z",
        "url": "https://files.pythonhosted.org/packages/2b/b2/98c23ef8d08016c6eb353fdbd2bc90e061c82e93e648d3922a209ae19eb5/binotree-1.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "455061762e2aac2996000ba9d678ec05f3ab025367e18167219c3ddfe063fffe",
          "md5": "e795a2db3925a4841cc775f45e637868",
          "sha256": "0cd51917af15427b94215be03b3cba72b3eb284a5ee315faa8ecfacb1853375a"
        },
        "downloads": -1,
        "filename": "binotree-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e795a2db3925a4841cc775f45e637868",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2343365,
        "upload_time": "2021-08-21T11:06:07",
        "upload_time_iso_8601": "2021-08-21T11:06:07.605436Z",
        "url": "https://files.pythonhosted.org/packages/45/50/61762e2aac2996000ba9d678ec05f3ab025367e18167219c3ddfe063fffe/binotree-1.0.4-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "245b8c6d7225b3350775c5a3d0daec1ce9da1ba4227be5dfb3a1984ffdab8921",
          "md5": "e65774162a5b3aef61efea3c8824821c",
          "sha256": "91aa94c30ab3a815b42f194c35a826171b36014c2b8d4ff78857d4c603d9463f"
        },
        "downloads": -1,
        "filename": "binotree-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e65774162a5b3aef61efea3c8824821c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2334257,
        "upload_time": "2021-08-21T11:06:09",
        "upload_time_iso_8601": "2021-08-21T11:06:09.868803Z",
        "url": "https://files.pythonhosted.org/packages/24/5b/8c6d7225b3350775c5a3d0daec1ce9da1ba4227be5dfb3a1984ffdab8921/binotree-1.0.4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e5d48ae98482ba9dfe72bef8f55515ba1ad7330eb4ab621cce84344b9eaaa25",
          "md5": "10d318cb5a5313169761752077a18798",
          "sha256": "43c299217c880f0785df09da28249c1c20404ae7e4e66776523b627d364fa9c1"
        },
        "downloads": -1,
        "filename": "binotree-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10d318cb5a5313169761752077a18798",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2343373,
        "upload_time": "2021-09-06T12:57:19",
        "upload_time_iso_8601": "2021-09-06T12:57:19.089750Z",
        "url": "https://files.pythonhosted.org/packages/3e/5d/48ae98482ba9dfe72bef8f55515ba1ad7330eb4ab621cce84344b9eaaa25/binotree-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04bdc47070ec2555018371e41ec4bcfb92103c5fb6cf06bf25fbeb18dbfd5be4",
          "md5": "23711ed08e462ff021de8da6cb3949c6",
          "sha256": "e3cfea222b8bb7f542ffc87be3c6df7518d79ade86e37eb9d2ca740e3d15d817"
        },
        "downloads": -1,
        "filename": "binotree-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "23711ed08e462ff021de8da6cb3949c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2334269,
        "upload_time": "2021-09-06T12:57:20",
        "upload_time_iso_8601": "2021-09-06T12:57:20.943109Z",
        "url": "https://files.pythonhosted.org/packages/04/bd/c47070ec2555018371e41ec4bcfb92103c5fb6cf06bf25fbeb18dbfd5be4/binotree-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e5d48ae98482ba9dfe72bef8f55515ba1ad7330eb4ab621cce84344b9eaaa25",
        "md5": "10d318cb5a5313169761752077a18798",
        "sha256": "43c299217c880f0785df09da28249c1c20404ae7e4e66776523b627d364fa9c1"
      },
      "downloads": -1,
      "filename": "binotree-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10d318cb5a5313169761752077a18798",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 2343373,
      "upload_time": "2021-09-06T12:57:19",
      "upload_time_iso_8601": "2021-09-06T12:57:19.089750Z",
      "url": "https://files.pythonhosted.org/packages/3e/5d/48ae98482ba9dfe72bef8f55515ba1ad7330eb4ab621cce84344b9eaaa25/binotree-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04bdc47070ec2555018371e41ec4bcfb92103c5fb6cf06bf25fbeb18dbfd5be4",
        "md5": "23711ed08e462ff021de8da6cb3949c6",
        "sha256": "e3cfea222b8bb7f542ffc87be3c6df7518d79ade86e37eb9d2ca740e3d15d817"
      },
      "downloads": -1,
      "filename": "binotree-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "23711ed08e462ff021de8da6cb3949c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2334269,
      "upload_time": "2021-09-06T12:57:20",
      "upload_time_iso_8601": "2021-09-06T12:57:20.943109Z",
      "url": "https://files.pythonhosted.org/packages/04/bd/c47070ec2555018371e41ec4bcfb92103c5fb6cf06bf25fbeb18dbfd5be4/binotree-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}