{
  "info": {
    "author": "yashbharadwaj",
    "author_email": "yashbharadwaj@urbancompany.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Table of Contents\n=================\n\n-  `Table of Contents <#table-of-contents>`__\n-  `Ghostbuster <#ghostbuster>`__\n\n   -  `The problem <#the-problem>`__\n   -  `Project Features <#project-features>`__\n   -  `Installing Ghostbuster <#installing-ghostbuster>`__\n   -  `Using Ghostbuster <#using-ghostbuster>`__\n   -  `Example Output <#example-output>`__\n   -  `Setting up your AWS accounts <#setting-up-your-aws-accounts>`__\n   -  `Setting up Cloudflare\n      (Optional) <#setting-up-cloudflare-optional>`__\n   -  `Authors <#authors>`__\n   -  `License <#license>`__\n\nGhostbuster\n===========\n\nEliminate dangling elastic IPs by performing analysis on your resources\nwithin all your AWS accounts.\n\nGhostbuster obtains all the DNS records present in all of your AWS\naccounts (Route53), and can optionally take in records via CSV input, or\nvia Cloudflare.\n\nAfter these records are collected, Ghostbuster iterates through all of\nyour AWS Elastic IPs and Network Interface Public IPs and collects this\ndata.\n\nBy having a complete picture of the DNS records (from route53, file\ninput or cloudflare) and having a complete picture of the AWS IPs owned\nby your organization, this tool can detect subdomains that are pointing\nto dangling elastic IPs (IPs you no longer own).\n\nThe problem\n-----------\n\nWhen you are deploying infrastructure to AWS, you may spin up EC2\ninstances which have an IP associated with them. When you create DNS\nrecords pointing to these IPs, but forget to remove the DNS records\nafter the EC2 instance has been given a new IP or destroyed, you are\nsusceptible to subdomain takeover attacks.\n\nThere has been a great amount of research done on elastic IP takeovers,\nwhere it is possible for attackers to continually claim elastic IPs\nuntil they obtain an IP associated with a subdomain of the company they\nare targeting.\n\nWhile AWS frequently bans accounts that are attempting to perform this\nattack pattern, no long term fix has been released by AWS.\n\nThe impact of dangling elastic IP subdomain takeover attacks are more\nserious than a typical subdomain takeover where you can only control the\ncontent being served. With dangling elastic IP takeovers, it is possible\nfor an attacker to do the following:\n\n-  Claim SSL certificates for the subdomain\n-  Listen for traffic on all ports (potentially discovering sensitive\n   information still being sent to the subdomain)\n-  Run server-side scripts with the ability to steal HTTPOnly cookies,\n   typically leading to a one-click account takeover attack when cookies\n   are scoped to ``*.domain.com``\n\nProject Features\n----------------\n\n-  Dynamically iterates through each AWS profile configured in\n   ``.aws/config``\n-  Pulls A records from AWS Route53\n-  Pulls A records from Cloudflare (optional)\n-  Pulls A records from CSV input (optional)\n-  Iterate through all regions, a single region, or a comma delimitted\n   list of regions\n-  Obtains all Elastic IPs associated with all of your AWS accounts\n-  Obtains all Public IPs associated with all of your AWS accounts\n-  Cross checks the DNS records, with IPs owned by your organization to\n   detect potential takeovers\n-  Slack Webhook support to send notifications of takeovers\n\n**Important:**\n\nIn order for this tool to be effective, it must have a complete picture\nof your AWS environment. If it does not have a complete picture, it will\nlead to false positive findings.\n\nInstalling Ghostbuster\n----------------------\n\nInstalling Ghostbuster is as simple as running:\n``pip install ghostbuster``. The CLI tool will then be accessible via\nthe ``ghostbuster`` command.\n\nThis requires a Python 3.x environment.\n\nUsing Ghostbuster\n-----------------\n\n::\n\n   ❯ ghostbuster scan aws --help                                                                                                                                                                     \n   Usage: ghostbuster scan aws [OPTIONS]\n\n     Scan for dangling elastic IPs inside your AWS accounts.\n\n   Options:\n     --profile TEXT          Specify a specific AWS profile to run ghostbuster\n                             on.\n\n     --skipascii             Skip printing the ASCII art when starting up\n                             Ghostbuster.\n\n     --slackwebhook TEXT     Specify a Slack webhook URL to send notifications\n                             about potential takeovers.\n\n     --records PATH          Manually specify DNS records to check against.\n                             Ghostbuster will check these IPs after checking\n                             retrieved DNS records. See records.csv for an\n                             example.\n\n     --cloudflaretoken TEXT  Pull DNS records from Cloudflare, provide a CF API\n                             token.\n\n     --allregions            Run on all regions.\n     --exclude TEXT          Comma delimited list of profile names to exclude.\n     --regions TEXT          Comma delimited list of regions to run on.\n     --help                  Show this message and exit.\n\n**Example Commands**\n\nRun Ghostbuster with access to Cloudflare DNS records, send\nnotifications to a Slack webhook, iterate through every AWS profile\nconfigured in ``.aws/config or .aws/credentials`` for all AWS regions\n\n::\n\n   ❯ ghostbuster scan aws --cloudflaretoken APIKEY --slackwebhook https://hooks.slack.com/services/KEY --allregions\n\nRun Ghostbuster with a manually input list of subdomain A records (see\n``records.csv`` in this repo for example file):\n\n::\n\n   ❯ ghostbuster scan aws --records records.csv\n\nYou can specify specific regions using ``--regions`` set to a comma\ndelimited list of regions i.e. ``us-east-1,us-west-1``.\n\nExample Output\n--------------\n\n::\n\n   ❯ ghostbuster scan aws --cloudflaretoken whougonnacall\n   Obtaining all zone names from Cloudflare.\n   Obtaining DNS A records for all zones from Cloudflare.\n   Obtained 33 DNS A records so far.\n   Obtaining Route53 hosted zones for AWS profile: default.\n   Obtaining Route53 hosted zones for AWS profile: account-five.\n   Obtaining Route53 hosted zones for AWS profile: account-four.\n   Obtaining Route53 hosted zones for AWS profile: account-four-deploy.\n   Obtaining Route53 hosted zones for AWS profile: account-two-deploy.\n   Obtaining Route53 hosted zones for AWS profile: account-one-deploy.\n   Obtaining Route53 hosted zones for AWS profile: account-three-deploy.\n   Obtaining Route53 hosted zones for AWS profile: account-six.\n   Obtaining Route53 hosted zones for AWS profile: account-seven.\n   Obtaining Route53 hosted zones for AWS profile: account-one.\n   Obtained 124 DNS A records so far.\n   Obtaining EIPs for region: us-east-1, profile: default\n   Obtaining IPs for network interfaces for region: us-east-1, profile: default\n   Obtaining EIPs for region: us-east-1, profile: account-five\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-five\n   Obtaining EIPs for region: us-east-1, profile: account-four\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-four\n   Obtaining EIPs for region: us-east-1, profile: account-four-deploy\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-four-deploy\n   Obtaining EIPs for region: us-east-1, profile: account-two-deploy\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-two-deploy\n   Obtaining EIPs for region: us-east-1, profile: account-one-deploy\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-one-deploy\n   Obtaining EIPs for region: us-east-1, profile: account-three-deploy\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-three-deploy\n   Obtaining EIPs for region: us-east-1, profile: account-six\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-six\n   Obtaining EIPs for region: us-east-1, profile: account-seven\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-seven\n   Obtaining EIPs for region: us-east-1, profile: account-one\n   Obtaining IPs for network interfaces for region: us-east-1, profile: account-one\n   Obtained 415 unique elastic IPs from AWS.\n\n\n   Takeover possible: {'name': 'takeover.assetnotecloud.com', 'records': ['52.54.24.193']}\n\nSetting up your AWS accounts\n----------------------------\n\nThe first step is creating keys or roles in your AWS accounts that grant\nthe privileges necessary to read Route53 records and describe elastic\naddresses and EC2 network interfaces.\n\n1. To create a new IAM user in AWS, visit the following URL:\n   https://console.aws.amazon.com/iam/home#/users$new?step=details\n2. Choose ``Access key - Programmatic access`` only, and click\n   ``Next: Permissions``.\n3. Click ``Attach existing policies directly`` and then click\n   ``Create policy``.\n4. Click ``JSON`` and then paste in the following policy:\n\n::\n\n   {\n       \"Version\": \"2012-10-17\",\n       \"Statement\": [\n           {\n               \"Sid\": \"GhostbusterPolicy\",\n               \"Effect\": \"Allow\",\n               \"Action\": [\n                   \"ec2:DescribeAddresses\",\n                   \"ec2:DescribeNetworkInterfaces\",\n                   \"route53:ListResourceRecordSets\",\n                   \"route53:ListHostedZonesByName\",\n                   \"route53:GetTrafficPolicyInstance\",\n                   \"route53:GetTrafficPolicy\"\n               ],\n               \"Resource\": \"*\"\n           }\n       ]\n   }\n\n5.  Click ``Next: Tags`` and then ``Next: Review``.\n6.  Set the name of the policy to be ``GhostbusterPolicy``.\n7.  Click ``Create Policy``.\n8.  Go to\n    https://console.aws.amazon.com/iam/home#/users$new?step=permissions&accessKey&userNames=ghostbuster&permissionType=policies\n9.  Select ``GhostbusterPolicy``.\n10. Click ``Next: Tags`` and then ``Next: Review``.\n11. Click on ``Create user`` and setup the AWS credentials in your\n    ``.aws/credentials`` file.\n\nRepeat the above steps for each AWS account you own.\n\nThis tool will work with however you’ve setup your AWS configuration\n(multiple keys, or cross-account assume role profiles). This is managed\nby boto3, the library used to interface with AWS.\n\nAn example configuration looks like this:\n\n``.aws/credentials``:\n\n::\n\n   [default]\n   aws_access_key_id = AKIAIII...\n   aws_secret_access_key = faAaAaA...\n\n``.aws/config``:\n\n::\n\n   [default]\n   output = table\n   region = us-east-1\n\n   [profile account-one]\n   role_arn = arn:aws:iam::911111111113:role/Ec2Route53Access\n   source_profile = default\n   region = us-east-1\n\n   [profile account-two]\n   role_arn = arn:aws:iam::911111111112:role/Ec2Route53Access\n   source_profile = default\n   region = us-east-1\n\n   [profile account-three]\n   region = us-east-1\n   role_arn = arn:aws:iam::911111111111:role/Ec2Route53Access\n   source_profile = default\n\nAlternatively, instead of having roles which are assumed, you can also\nconfigure the ``.aws/credentials`` file to have a list of profiles and\nassocaited keys with scoped access.\n\nOnce your AWS configuration has been set with all the accounts in your\nAWS environment, you can then run the tool using the following command:\n\nSetting up Cloudflare (Optional)\n--------------------------------\n\nIf you want Ghostbuster to pull in all the A records that you have set\nin Cloudflare, you will have to setup an API token that can read zones.\n\nhttps://dash.cloudflare.com/profile/api-tokens\n\nSetup a Cloudflare API token like shown in the screenshot below:\n\n.. image:: screenshots/cloudflare.png\n\nOnce you have obtained this API token, make a note of it somewhere\n(password manager). In order to use it with Ghostbuster, pass it in via\nthe ``cloudflaretoken`` argument.\n\nAuthors\n-------\n\n-  **Shubham Shah** - *Initial work* -\n   `github <https://github.com/infosec-au>`__\n\nSee also the list of\n`contributors <https://github.com/assetnote/ghostbuster/contributors>`__\nwho participated in this project.\n\nLicense\n-------\n\nGNU Affero General Public License\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.urbanclap.com/urbanclap/dangling-dns-service/tree/ghostbuster_merge",
    "keywords": "",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ghostbusterV3",
    "package_url": "https://pypi.org/project/ghostbusterV3/",
    "platform": null,
    "project_url": "https://pypi.org/project/ghostbusterV3/",
    "project_urls": {
      "Homepage": "https://gitlab.urbanclap.com/urbanclap/dangling-dns-service/tree/ghostbuster_merge"
    },
    "release_url": "https://pypi.org/project/ghostbusterV3/0.0.9/",
    "requires_dist": null,
    "requires_python": ">=0.0.1",
    "summary": "Eliminate dangling elastic IPs by performing analysis on your resources within all your AWS accounts.",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13860177,
  "releases": {
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b309c7f15a4e363ffbace882e8c658318cb919dfd60fed47d4ca870642f0108",
          "md5": "107d06cf2be2cdd5b0c627e6b38658a2",
          "sha256": "b1c1c98a48144c66678b8b58b731720c891fa8962fff2aaab49c99b1040078a0"
        },
        "downloads": -1,
        "filename": "ghostbusterV3-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "107d06cf2be2cdd5b0c627e6b38658a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=0.0.1",
        "size": 27938,
        "upload_time": "2022-05-19T02:45:56",
        "upload_time_iso_8601": "2022-05-19T02:45:56.884267Z",
        "url": "https://files.pythonhosted.org/packages/8b/30/9c7f15a4e363ffbace882e8c658318cb919dfd60fed47d4ca870642f0108/ghostbusterV3-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b309c7f15a4e363ffbace882e8c658318cb919dfd60fed47d4ca870642f0108",
        "md5": "107d06cf2be2cdd5b0c627e6b38658a2",
        "sha256": "b1c1c98a48144c66678b8b58b731720c891fa8962fff2aaab49c99b1040078a0"
      },
      "downloads": -1,
      "filename": "ghostbusterV3-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "107d06cf2be2cdd5b0c627e6b38658a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=0.0.1",
      "size": 27938,
      "upload_time": "2022-05-19T02:45:56",
      "upload_time_iso_8601": "2022-05-19T02:45:56.884267Z",
      "url": "https://files.pythonhosted.org/packages/8b/30/9c7f15a4e363ffbace882e8c658318cb919dfd60fed47d4ca870642f0108/ghostbusterV3-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}