{
  "info": {
    "author": "David Briant",
    "author_email": "dangermouseb@forwarding.cc",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "## coppertop - piping and multi-dispatch for python\n\nCoppertop provides a bones-style aggregation manipulation experience in python via the following:\n\n* partial (application of) functions\n* piping syntax\n* multiple-dispatch\n* type system with primitives, intersections, unions, products, exponentials, overloads and type schemas thus \n  allowing Python to be a library implementation language for bones\n* immutable updates\n* contextual scope\n* and an embryonic [core library](https://github.com/DangerMouseB/coppertop-bones-demo/tree/main/src/dm/dm/core) of common pipeable functions \n\n\n<br>\n\n### Partial (application of) functions\n\nBy decorating a function with @coppertop (and importing _) we can easily create partial functions, for example:\n\nsyntax: `f(_, a)` -> `f(_)`  \\\nwhere `_` is used as a sentinel place-holder for arguments yet to be confirmed (TBC)\n\n```\nfrom coppertop.pipe import *\n\n@coppertop\ndef appendStr(x, y):\n    assert isinstance(x, str) and isinstance(y, str)\n    return x + y\n\nappendWorld = appendStr(_, \" world!\")\n\nassert appendWorld(\"hello\") == \"hello world!\"\n```\n\n<br>\n\n\n### Piping syntax\n\nThe @coppertop function decorator also extends functions with the `>>` operator\nand so allows code to be written in a more essay style format - i.e. left-to-right and \ntop-to-bottom. The idea is to make it easy to express the syntax (aka sequence) of a solution.\n\n\n<br>\n\n#### unary style - takes 1 piped argument and 0+ called arguments\n\nsyntax: `A >> f(args)` -> `f(args)(A)`\n\n```\nfrom dm.std import anon\n\n@coppertop\ndef addOne(x):\n    return x + 1\n\n1 >> addOne\n\"hello\" >> appendStr(_,\" \") >> appendStr(_, \"world!\")\n\n1 >> anon(lambda x: x +1)\n```\n\n<br>\n\n#### binary style - takes 2 piped argument and 0+ called arguments\n\nsyntax: `A >> f(args) >> B` -> `f(args)(A, B)`\n\n```\nfrom coppertop.core import NotYetImplemented\nfrom dm.std import each, inject\n\n@coppertop(style=binary)\ndef add(x, y):\n    return x + y\n\n@coppertop(style=binary)\ndef op(x, action, y):\n    if action == \"+\":\n        return x + y\n    else:\n        raise NotYetImplemented()\n\n1 >> add >> 1\n1 >> op(_,\"+\",_) >> 1\n[1,2] >> each >> (lambda x: x + 1)\n[1,2,3] >> inject(_,0,_) >> (lambda x,y: x + y)\n```\n\n<br>\n\n#### ternary style - takes 3 piped argument and 0+ called arguments\n\nsyntax: `A >> f(args) >> B >> C` -> `f(args)(A, B, C)`\n\n```\nfrom dm.std import both, check, equal\n\n[1,2] >> both >> (lambda x, y: x + y) >> [3,4] >> check >> equal >> [4, 6]\n```\n\n<br> \n\n#### as an exercise for the reader\n```\n[1,2] >> both >> (lambda x, y: x + y) >> [3,4] \n   >> each >> (lambda x: x * 2)\n   >> inject(_,1,_) >> (lambda x,y: x * y)\n   >> addOne >> addOne >> addOne\n   >> to(_,str) >> appendStr(\" red balloons go by\")\n   >> check >> equal >> ???\n```\n\n<br>\n\n\n### Multiple-dispatch\n\nJust redefine functions with different type annotations. Missing annotations are taken as \nfallback wildcards. Class inheritance is ignored when matching caller and function signatures.\n\n```\n@coppertop\ndef addOne(x:idx) -> idx:\n    return x + 1\n    \n@coppertop\ndef addOne(x:str) -> str:\n    return x + 'One'\n    \n@coppertop\ndef addOne(x):                 # fallback\n    if isinstance(x, list):\n        return x + [1]\n    else:\n        raise NotYetImplemented()\n\n1 >> addOne >> check >> equal >> 2\n'Three Two ' >> addOne >> check >> equal >> 'Three Two One'\n[0] >> addOne >> check >> equal >> [0, 1]\n```\n\n<br>\n\n\n### Type system\n\nAs an introduction, consider:\n\n```\nfrom ribs.types import BTAtom, S, num, idx, str, O\nnum = BTAtom.ensure('num')      # nominal\n_ccy = BTAtom.ensure('_ccy')    # nominal\nccy = num & _ccy                # intersection\nccy + null                      # union\nccy * idx * str             # tuple (sequence of types)\nS(name=str, age=num)          # struct\nN ** ccy                        # collection of ccy accessed by an ordinal (N)\nstr ** ccy                    # collection of ccy accessed by a python string\n(num*num) ^ num                 # (num, num) -> num - a function\nT, T1, T2, ...                  # type variable - to be inferred at build time\n\nI(domestic=ccy&T, foreign=ccy&T)  # named intersection (aka discrimated type)\n```\n\n<br>\n\n\n### Example - Cluedo notepad\n\nSee [algos.py](https://github.com/DangerMouseB/coppertop-bones-demo/blob/main/src/dm/examples/cluedo/algos.py), where \nwe track a game of Cluedo and make inferences for who did it. See [games.py](https://github.com/DangerMouseB/coppertop-bones-demo/blob/main/src/dm/dm/examples/cluedo/games.py) \nfor example game input.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DangerMouseB/coppertop-bones",
    "keywords": "piping,pipeline,pipe,functional",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coppertop-bones",
    "package_url": "https://pypi.org/project/coppertop-bones/",
    "platform": null,
    "project_url": "https://pypi.org/project/coppertop-bones/",
    "project_urls": {
      "Homepage": "https://github.com/DangerMouseB/coppertop-bones"
    },
    "release_url": "https://pypi.org/project/coppertop-bones/2022.7.30/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Piping and multi-dispatch for python",
    "version": "2022.7.30",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14600304,
  "releases": {
    "2022.7.30": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "642e2504ec57f09370f56b3edf99b6e2c171a68414fff7616f8e60a4eb84d679",
          "md5": "0013649b32de75cf5ea221ec836cf37c",
          "sha256": "ce3fd6be841170979d30fa9b0b2cd244a24768c822b202074c509c3540c3f59d"
        },
        "downloads": -1,
        "filename": "coppertop-bones-2022.7.30.tar.gz",
        "has_sig": false,
        "md5_digest": "0013649b32de75cf5ea221ec836cf37c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 41444,
        "upload_time": "2022-07-30T18:37:56",
        "upload_time_iso_8601": "2022-07-30T18:37:56.065319Z",
        "url": "https://files.pythonhosted.org/packages/64/2e/2504ec57f09370f56b3edf99b6e2c171a68414fff7616f8e60a4eb84d679/coppertop-bones-2022.7.30.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "642e2504ec57f09370f56b3edf99b6e2c171a68414fff7616f8e60a4eb84d679",
        "md5": "0013649b32de75cf5ea221ec836cf37c",
        "sha256": "ce3fd6be841170979d30fa9b0b2cd244a24768c822b202074c509c3540c3f59d"
      },
      "downloads": -1,
      "filename": "coppertop-bones-2022.7.30.tar.gz",
      "has_sig": false,
      "md5_digest": "0013649b32de75cf5ea221ec836cf37c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 41444,
      "upload_time": "2022-07-30T18:37:56",
      "upload_time_iso_8601": "2022-07-30T18:37:56.065319Z",
      "url": "https://files.pythonhosted.org/packages/64/2e/2504ec57f09370f56b3edf99b6e2c171a68414fff7616f8e60a4eb84d679/coppertop-bones-2022.7.30.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}