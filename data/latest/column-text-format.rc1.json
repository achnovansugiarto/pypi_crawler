{
  "info": {
    "author": "Clark Fitzgerald, Julian Hernandez, Shawheen Naderi",
    "author_email": "notsetupyet@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Programming Language :: Python",
      "Topic :: System :: Filesystems"
    ],
    "description": "# Search times\n\n- Searched 1 columns with 431644 rows in 0.26 seconds\n- Searched 2 columns with 431644 rows in 0.39 seconds\n- Searched 3 columns with 431644 rows in 0.51 seconds\n- Searched 4 columns with 431644 rows in 0.61 seconds\n- Searched 5 columns with 431644 rows in 0.69 seconds\n- Searched 6 columns with 431644 rows in 0.92 seconds\n- Searched 7 columns with 431644 rows in 1.04 seconds\n- Searched 8 columns with 431644 rows in 1.34 seconds\n- Searched 9 columns with 431644 rows in 1.66 seconds\n- Searched 10 columns with 431644 rows in 1.83 seconds\n- Searched 11 columns with 431644 rows in 1.96 seconds\n- Searched 12 columns with 431644 rows in 2.11 seconds\n- Searched 13 columns with 431644 rows in 2.29 seconds\n- Searched 14 columns with 431644 rows in 2.39 seconds\n- Searched 15 columns with 431644 rows in 2.47 seconds\n\n# Conversion times\n- name\t\t\t\t\t\t\t\tstart size\ttime\n- ignore_country_classification.csv\t4257    \t0.02\n- ignore_goods_classification.csv \t239619  \t0.07\n- ignore_gsquarterlySeptember20.csv\t73824486\t20.65\n- ignore_services_classification.csv\t2828\t\t0.02\n- ignore_test.csv\t\t\t\t\t\t82533516\t47.74\n\n# End User Manual\n\nHow would I like use this code?\n\nSuppose I have a table called `people` stored in CTF.\n\nTODO: Define and describe `people` table.\n\n```bash\n$ cat people.csv\nnames       age\nShawheen    21\nJulian      20\nClark       34\n```\n\nI want to access a column called `names` from this table.\n\n```SQL\nSELECT names FROM people\n```\n\nAssume that `people` is a directory containing the CTF data.\n\n```python\nimport CTF\n\nnames = CTF.load_column(\"people\", \"names\")\n```\n\nTODO: look at `load_column`, see what the most common name is for reading / loading data.\nHow closely can we copy `csv` from the standard library?\n\nUse case: it would be great if we could access the data as a stream, without necessarily loading everything in memory.\nWe can get this feature by having `names` be an iterator or generator over the column values.\n\nExample processing names:\n\n```\nfrom Collections import Counter\n\ncounts = Counter(names)\n```\n\n## Use case 2 - column types\n\n```\nage = CTF.load_column(\"people\", \"age\")\n```\n\n`age` should generate integer values corresponding to each entry of the `age` column.\nCTF knows that the `age` column means integer because of the metadata file in the `people` directory.\nTODO: link to W3 standard.\n\n```\n# User should not write this- it's just the idea we want\ndef create_age():\n    for x in [21, 20, 34]:\n        yield x\n\nage = create_age()\n\n# User can do something like this:\n>>> list(age)\n[21, 20, 34]\n```\n\n\n## Use case 3 - compatibility with `csv`\n\n```\nimport csv\n\n# Referring to file `people.csv` in CSV format\nr = csv.reader(\"people.csv\")\n\n# Referring to directory `people` in CTF format\nr2 = CTF.reader(\"people\")\n```\n\n`r2` should essentially be a drop in replacement for `r`.\n\n```\nfor row in r:\n    process(row)\n```\n\nTODO: Process a csv file using Python's `csv` package- any kind of data analysis is fine.\nFor example, find the set of all values in one column.\n\n# Python notes\nI used this link for helping me construct the iterable.\n[Python special methods](https://levelup.gitconnected.com/python-dunder-methods-ea98ceabad15)\n[W3C metadata](https://www.w3.org/TR/tabular-metadata/)\n\n# Outline\n- Ctf modeled after csv and/or dictionary\n    - [ ] Should Ctf be accessed with a reader like csv or through itself like a dictionary\n    - [x] Column accessed with [\"column_name\"]\n    - [ ] Can convert a csv file to ctf\n    - [ ] Reader runs like csv reader returning iterable rows\n    - [ ] class Row to give a guide for adding new columns using values from metadata.json\n    - [ ] Use custom exceptions\n    - [ ] Get type from metadata.json or autodetect\n\n```python\nwith Ctf.open() as ctf_file:\n    ctf_file[\"column\"]\n    for row in ctf_file:\n        print(row)\n```\n\n```python\nCtf.open()\nCtf.close()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://packages.python.org/an_example_pypi_project",
    "keywords": "Tabular data access",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "column-text-format",
    "package_url": "https://pypi.org/project/column-text-format/",
    "platform": "",
    "project_url": "https://pypi.org/project/column-text-format/",
    "project_urls": {
      "Homepage": "http://packages.python.org/an_example_pypi_project"
    },
    "release_url": "https://pypi.org/project/column-text-format/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Unfilled description",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9760945,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14658ff9b2d95e5815814e2066bb6bff5909f506ef61859f38adaf6d9bb10cb3",
          "md5": "7e3666fa86d42aa2bc97bb1be2371169",
          "sha256": "f15dbb7b96554dcaf7cf40e31ef41a4a1b019f4cc27f5a6c984290cf0095ef08"
        },
        "downloads": -1,
        "filename": "column_text_format-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e3666fa86d42aa2bc97bb1be2371169",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2885,
        "upload_time": "2021-03-13T15:21:41",
        "upload_time_iso_8601": "2021-03-13T15:21:41.378297Z",
        "url": "https://files.pythonhosted.org/packages/14/65/8ff9b2d95e5815814e2066bb6bff5909f506ef61859f38adaf6d9bb10cb3/column_text_format-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d5ecab3a389cf527cb5bab19e89ee58c912e25ec8592051fd0d5d7904a035a3",
          "md5": "0d22bd0c5027a5217702f6ff9cfff6d3",
          "sha256": "e942e29e91883526bcca9a8b01ca542fbd573fdf0954e6488675d44a47a7ef5e"
        },
        "downloads": -1,
        "filename": "column-text-format-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0d22bd0c5027a5217702f6ff9cfff6d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3559,
        "upload_time": "2021-03-13T15:21:42",
        "upload_time_iso_8601": "2021-03-13T15:21:42.697395Z",
        "url": "https://files.pythonhosted.org/packages/9d/5e/cab3a389cf527cb5bab19e89ee58c912e25ec8592051fd0d5d7904a035a3/column-text-format-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14658ff9b2d95e5815814e2066bb6bff5909f506ef61859f38adaf6d9bb10cb3",
        "md5": "7e3666fa86d42aa2bc97bb1be2371169",
        "sha256": "f15dbb7b96554dcaf7cf40e31ef41a4a1b019f4cc27f5a6c984290cf0095ef08"
      },
      "downloads": -1,
      "filename": "column_text_format-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7e3666fa86d42aa2bc97bb1be2371169",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 2885,
      "upload_time": "2021-03-13T15:21:41",
      "upload_time_iso_8601": "2021-03-13T15:21:41.378297Z",
      "url": "https://files.pythonhosted.org/packages/14/65/8ff9b2d95e5815814e2066bb6bff5909f506ef61859f38adaf6d9bb10cb3/column_text_format-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d5ecab3a389cf527cb5bab19e89ee58c912e25ec8592051fd0d5d7904a035a3",
        "md5": "0d22bd0c5027a5217702f6ff9cfff6d3",
        "sha256": "e942e29e91883526bcca9a8b01ca542fbd573fdf0954e6488675d44a47a7ef5e"
      },
      "downloads": -1,
      "filename": "column-text-format-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0d22bd0c5027a5217702f6ff9cfff6d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3559,
      "upload_time": "2021-03-13T15:21:42",
      "upload_time_iso_8601": "2021-03-13T15:21:42.697395Z",
      "url": "https://files.pythonhosted.org/packages/9d/5e/cab3a389cf527cb5bab19e89ee58c912e25ec8592051fd0d5d7904a035a3/column-text-format-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}