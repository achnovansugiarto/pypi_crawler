{
  "info": {
    "author": "Ibragim Abubakarov",
    "author_email": "ibragim.ai95@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: File Transfer Protocol (FTP)",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Downloader light\n================\n\n> Lightweight python library that let's you download and process files concurrently.  \n> This package was developed to allows serverless deployment.\n\n#### Dependencies\n> Installed automatically with **pip**\n- requests\n- pysftp\n\n\n * [Installation](#installation)\n * [Usage examples](#usage-examples)\n\n## Installation\n```bash\npip install downloader-light\n```\n\n## Usage examples\nDownload and upload files to AWS S3\n**For this to work, AWS CLI must be configured**\n```python\nfrom blackfeed.downloader import Downloader\nfrom blackfeed.adapter.s3 import S3Adapter\n\nqueue = [\n    {\n        'url': 'https://www.example.com/path/to/image.jpg', # Required\n        'destination': 'some/key/image.jpg' # S3 key - Required\n    },{\n        'url': 'https://www.example.com/path/to/image2.jpg',\n        'destination': 'some/key/image2.jpg'\n    }\n]\n\ndownloader = Downloader(\n    S3Adapter(bucket='bucketname'),\n    multi=True, # If true, uploads files to images to S3 with multithreading\n    stateless=False # If set to False, it generates and stores md5 hashes of files in a file\n    state_id='flux_states' # name of the file where hashes will be stored (states.txt) not required\n    bulksize=200 # Number of concurrent downloads\n)\ndownloader.process(queue)\nstats = downloader.get_stats() # Returns a dict with information about the process\n```\n\n### Download files with states\nLoading states can be useful if you don't want to re-download the same file twice.\n```python\nfrom blackfeed.downloader import Downloader\nfrom blackfeed.adapter.s3 import S3Adapter\n\nqueue = [\n...\n]\n\ndownloader = Downloader(\n    S3Adapter(bucket='bucketname'),\n    multi=True,\n    stateless=False,\n    state_id='filename'\n)\n\n# You can add a callback function if needed\n# This function will be called after each bulk is processed\ndef callback(responses):\n    # response: {\n    #    'destination': destination of the file can be local or can be S3 key,\n    #    'url': URL from where the file was downloaded,\n    #    'httpcode': HTTP code returned by the server,\n    #    'status': True|False,\n    #    'content-type': Mime type of the downloaded resource Example: image/jpeg\n    # }\n    # responses: response[]\n\n    pass # Your logic\n\ndownloader.set_callback(callback)\n\ndownloader.load_states('filename') # This will load states from \"filename.txt\"\ndownloader.process(queue)\nstats = downloader.get_stats() # Statistics\n```\n\n## ElasticDownloader\n> Let's you to download/retrieve files from FTP, SFTP and HTTP/S servers easily.\n\n### Examples\n#### Downloading file from FTP\n```python\nfrom blackfeed.elasticdownloader import ElasticDownloader\n\nuri = 'ftp://user:password@ftp.server.com/path/to/file.csv'\n\nretriever = ElasticDownloader()\nres = retriever.download(uri, localpath='/tmp/myfile.csv') # localfile is optional\n# .download() function returns False if there was an error or return the local path of the downloaded file if it was a success.\nprint(res)\n```\n```bash\n/tmp/myfile.csv\n```\n\n### Retrieving binary content of file from FTP\n```python\nfrom blackfeed.elasticdownloader import ElasticDownloader\n\nuri = 'ftp://user:password@ftp.server.com/path/to/file.csv'\n\nretriever = ElasticDownloader()\nres = retriever.retrieve(uri) # Return type: io.BytesIO | False\n\nwith open('/tmp/myfile.csv', 'wb') as f:\n    f.write(res.getvalue())\n```\n**ElasticDownloader** can handle FTP, SFTP and HTTP URIs automatically.\nUse the method **download** to download file locally and use the **retrieve** method to get the binary content of a file.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ibragim64/python-downloader-light",
    "keywords": "",
    "license": "",
    "maintainer": "Ibragim Abubakarov",
    "maintainer_email": "ibragim.ai95@gmail.com",
    "name": "downloader-light",
    "package_url": "https://pypi.org/project/downloader-light/",
    "platform": "",
    "project_url": "https://pypi.org/project/downloader-light/",
    "project_urls": {
      "Homepage": "https://github.com/ibragim64/python-downloader-light"
    },
    "release_url": "https://pypi.org/project/downloader-light/0.0.2/",
    "requires_dist": [
      "pysftp",
      "requests"
    ],
    "requires_python": "",
    "summary": "Lightweight python package that allows the download of thousands of files concurrently.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10022877,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "689f437b75b8385c1fa78ee1f4de361d8cfcd22de42f6dcd716907d83ba25e49",
          "md5": "57cb4c8374f1e23083b2c3a1425662b9",
          "sha256": "f8c84c8fb2b55dcf761ecd89e77c48c3d067e8de494f82d9c090acd86ac6e4bc"
        },
        "downloads": -1,
        "filename": "downloader_light-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57cb4c8374f1e23083b2c3a1425662b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10443,
        "upload_time": "2021-04-04T20:02:19",
        "upload_time_iso_8601": "2021-04-04T20:02:19.311456Z",
        "url": "https://files.pythonhosted.org/packages/68/9f/437b75b8385c1fa78ee1f4de361d8cfcd22de42f6dcd716907d83ba25e49/downloader_light-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fcfc30800526b2eb73a4f35c2a1dd4b89a8e0b4c758c3df712542bcc043f16d",
          "md5": "2f05a3b2cb7ebd86c6de3bbe9e1bf2ae",
          "sha256": "dcdff4bf37184835a778a028b742d89162ac5d82b4cfc5ee9eed7961dc385be1"
        },
        "downloads": -1,
        "filename": "downloader_light-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f05a3b2cb7ebd86c6de3bbe9e1bf2ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10434,
        "upload_time": "2021-04-09T22:45:40",
        "upload_time_iso_8601": "2021-04-09T22:45:40.635505Z",
        "url": "https://files.pythonhosted.org/packages/2f/cf/c30800526b2eb73a4f35c2a1dd4b89a8e0b4c758c3df712542bcc043f16d/downloader_light-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fcfc30800526b2eb73a4f35c2a1dd4b89a8e0b4c758c3df712542bcc043f16d",
        "md5": "2f05a3b2cb7ebd86c6de3bbe9e1bf2ae",
        "sha256": "dcdff4bf37184835a778a028b742d89162ac5d82b4cfc5ee9eed7961dc385be1"
      },
      "downloads": -1,
      "filename": "downloader_light-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2f05a3b2cb7ebd86c6de3bbe9e1bf2ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10434,
      "upload_time": "2021-04-09T22:45:40",
      "upload_time_iso_8601": "2021-04-09T22:45:40.635505Z",
      "url": "https://files.pythonhosted.org/packages/2f/cf/c30800526b2eb73a4f35c2a1dd4b89a8e0b4c758c3df712542bcc043f16d/downloader_light-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}