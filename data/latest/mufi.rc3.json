{
  "info": {
    "author": "Maksim Terpilowski,",
    "author_email": "maximtrp@gmail.com,",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Home Automation",
      "Topic :: Internet",
      "Topic :: Text Processing :: General"
    ],
    "description": "# Mufi üêú\n\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/34ab4af51dad4b118f945591ee8846e0)](https://www.codacy.com/gh/maximtrp/mufi/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=maximtrp/mufi&amp;utm_campaign=Badge_Grade)\n![PyPI](https://img.shields.io/pypi/v/mufi?label=pypi&logo=python&logoColor=white)\n[![Downloads](https://static.pepy.tech/personalized-badge/mufi?period=total&units=international_system&left_color=grey&right_color=green&left_text=downloads)](https://pepy.tech/project/mufi)\n\n**Mufi** is a command-line **mu**sic **fi**nder written in Python with a bit of Javascript. It is capable of finding albums of various styles, genres, moods (even random, using command-line args). Basically, it uses Allmusic and Last.fm to get brief music information.\n\n**Mufi** comes with two command-line tools:\n\n1. `mufi`: finding albums by style, genre, date, mood.\n2. `mufi-recs`: getting personal recommendations from Last.fm.\n\n## Dependencies\n\nMufi depends heavily on [Selenium](https://pypi.org/project/selenium/) and Chrome WebDriver.\n\n## Installation\n\n```bash\npip install mufi\n```\n\nOr you can install from this git repo:\n\n```bash\npip install git+https://github.com/maximtrp/mufi\n```\n\nTo use `mufi-recs` command, you need to provide your Last.fm login data. Mufi reads it from `~/.lastfm` and `~/.config/mufi/.lastfm` files. Just say:\n\n```bash\necho login password > ~/.lastfm\n```\n\n## Usage\n\n### mufi\n\n```bash\n$ mufi -h\nusage: mufi [-h] [-d DATE] [-g GENRE] [-m MOODS] [-n ALBUMS_NUM] [-r RATING]\n            [-s STYLE] [-v] [-o {album,year,rating}] [-x] [--and] [--asc]\n            [-k SAMPLE_NUM] [--random-album] [--random-style] [--random-genre]\n\nMufi finds albums by style, genre, date, or mood üêú\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DATE               date interval, e.g. 2010-2019\n  -g GENRE              genres, e.g. rock electronic\n  -m MOODS              moods, e.g. sad\n  -n ALBUMS_NUM         number of albums to get (default: 1)\n  -r RATING             rating interval (1-5), e.g. \"3.5 5\"\n  -s STYLE              styles, e.g. \"blues rock,indie\"\n  -v                    verbose\n\nsorting/matching arguments:\n  -o {album,year,rating}\n                        sorting criteria\n  -x                    strictness level for style/genre matching\n  --and                 AND logic (default is OR logic)\n  --asc                 ascending sort\n\nrandomizer arguments:\n  -k SAMPLE_NUM         number of random styles/genres to get (default: 1)\n  --random-album        get random album\n  --random-style        get random style\n  --random-genre        get random genre\n```\n\n### mufi-recs\n\n```bash\n$ mufi-recs -h\nusage: mufi-recs [-h] [-a] [-l] [-n NUMBER] [-o ORDERBY] [-s] [-v]\n\nMufi fetches your recommendations from last.fm üêú\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -a          recommended artists (default)\n  -l          recommended albums\n  -n NUMBER   results number\n  -o ORDERBY  sort by: none, random (default), name, listeners\n  -s          show similar/context\n  -v          verbose\n```\n\n## Examples\n\n### Defaults\n\nIf executed without arguments, *mufi* selects a random style and fetches just one album from Allmusic.\n\n```bash\n$ mufi\nDierks Bentley - Up on the Ridge (2010) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n```\n\n### Selecting 3 random styles and 5 random albums\n\n```bash\n$ mufi --random-style -k 3 -n 5\nBruce Springsteen - Nebraska (1982) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\nBilly Bragg - Life's a Riot with Spy vs Spy (1983) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\nBruce Springsteen - The Ghost of Tom Joad (1995) ‚ãÜ‚ãÜ‚ãÜ\nLucinda Williams - Lucinda Williams (1988) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\nThe Avett Brothers - Magpie and the Dandelion (2013) ‚ãÜ‚ãÜ‚ãÜ\n```\n\nIt will not output the names of styles that were selected randomly. To get all this info, you need to use `-vv` flag. See below.\n\n### Verbosity\n\nYou can tell mufi to be verbose (albums list will become numbered, and artist names will be in bold style):\n\n```bash\n$ mufi -v\n[1] Kenny Neal - Hooked On Your Love (2010) ‚ãÜ‚ãÜ‚ãÜ\n```\n\nOr even more verbose (mufi will tell you what it is doing):\n\n```bash\n$ mufi -vv\nSelected styles: Indie Rock\n\n[1] The Smashing Pumpkins - Mellon Collie and the Infinite Sadness (1995) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n```\n\n### Getting random albums of certain styles\n\n```bash\n$ mufi -s \"blues rock\" -n 5 -vv\nSelected styles: Blues-Rock\n\n[1] The Jimi Hendrix Experience / Jimi Hendrix - Are You Experienced? (1967) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n[2] The Jimi Hendrix Experience / Jimi Hendrix - Electric Ladyland (1968) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n[3] The Jimi Hendrix Experience / Jimi Hendrix - Axis: Bold as Love (1967) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n[4] Jimi Hendrix / The Jimi Hendrix Experience - Smash Hits (1969) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n[5] Jimi Hendrix - First Rays of the New Rising Sun (1997) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n```\n\n### Strictness level\n\nLet's begin with a simple example.\n\n```bash\n$ mufi -s \"afro\" -vv\nSelected styles: Afro-Brazilian OR Afro-Peruvian OR Afro-Pop OR Afro-beat OR Afro-Cuban Jazz OR Afro-Colombian OR Afro-Cuban\n\n[1] Vinicius Cantu√°ria / Bill Frisell - L√°grimas Mexicanas (2011) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n```\n\nWe just passed one word \"afro\" and *mufi* selected all the styles that at least partially matched it. *Mufi* can behave a bit smarter. There are 5 strictness levels for style/genre matching. Here is the whole search algorithm works. First, the input string is split by a comma or semicolon (if any). We get a list of substrings for matching styles/genres. Next, the searching function tries to match each style in database to each of these substrings using the strictness level:\n\n* Default: substring is further split by non-word characters and if anything\n\nSee the following examples. Selecting all styles that contain `afro` substring:\n\nSelecting just Afro-pop:\n\n```bash\n$ mufi -s \"afro pop\" -vv\nSelected styles: Afro-Pop\n\n[1] Fela Kuti - Koola Lobitos/The '69 Los Angeles Sessions (2001) ‚ãÜ‚ãÜ‚ãÜ‚ãÜ\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/maximtrp/mufi,",
    "keywords": "python music cli",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mufi",
    "package_url": "https://pypi.org/project/mufi/",
    "platform": "",
    "project_url": "https://pypi.org/project/mufi/",
    "project_urls": {
      "Homepage": "http://github.com/maximtrp/mufi,"
    },
    "release_url": "https://pypi.org/project/mufi/0.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mufi: simple music finder for command-line",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9683511,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "702ccd5e5523857d5a32e5eda0021ce92d227c5caca1b6b026e475197d90ecd3",
          "md5": "cdc5d882f0fa00e359a5ee4a4aab445c",
          "sha256": "9c567542f410b8336b17a8ba1f3dec525a1d00a389d4d7ef20ab50c86882ae99"
        },
        "downloads": -1,
        "filename": "mufi-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdc5d882f0fa00e359a5ee4a4aab445c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21764,
        "upload_time": "2019-07-14T10:53:01",
        "upload_time_iso_8601": "2019-07-14T10:53:01.378366Z",
        "url": "https://files.pythonhosted.org/packages/70/2c/cd5e5523857d5a32e5eda0021ce92d227c5caca1b6b026e475197d90ecd3/mufi-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73bd83b8b28fb5a322cb9ff5331bb9bdef8ff779a5869ca0ade3db7ebd090f7e",
          "md5": "efe4f6401ab042c493b9be53335716fe",
          "sha256": "d9d092424bbc750cf64c33279f076de35832a8fb8f5cc9fb013dcefe0a441730"
        },
        "downloads": -1,
        "filename": "mufi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efe4f6401ab042c493b9be53335716fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9428,
        "upload_time": "2019-07-14T10:53:04",
        "upload_time_iso_8601": "2019-07-14T10:53:04.372593Z",
        "url": "https://files.pythonhosted.org/packages/73/bd/83b8b28fb5a322cb9ff5331bb9bdef8ff779a5869ca0ade3db7ebd090f7e/mufi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79e6f12b0c6b936ba45562f81c11f910a7db4939a221597df1c753eac1ca1c7b",
          "md5": "bd447d069e4129f44b86954859eeec6d",
          "sha256": "097a325dd05dcc2f1ce23b7e5d8edf0b97f3337693a41d71ebde2b98c23b650f"
        },
        "downloads": -1,
        "filename": "mufi-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd447d069e4129f44b86954859eeec6d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 21970,
        "upload_time": "2019-08-23T04:42:16",
        "upload_time_iso_8601": "2019-08-23T04:42:16.856595Z",
        "url": "https://files.pythonhosted.org/packages/79/e6/f12b0c6b936ba45562f81c11f910a7db4939a221597df1c753eac1ca1c7b/mufi-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14282d6a50bf2f4e15e232d8d90ac011e1bf64ce3039f1a2ee0698f556a3258a",
          "md5": "d239f1ddff2ef14fd71fe85fbade2b18",
          "sha256": "a4a019f930c426d9e3575ebe4f81872fb6aa399d4cdf03c2d42460ca8e1fcc83"
        },
        "downloads": -1,
        "filename": "mufi-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d239f1ddff2ef14fd71fe85fbade2b18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9644,
        "upload_time": "2019-08-23T04:42:18",
        "upload_time_iso_8601": "2019-08-23T04:42:18.354681Z",
        "url": "https://files.pythonhosted.org/packages/14/28/2d6a50bf2f4e15e232d8d90ac011e1bf64ce3039f1a2ee0698f556a3258a/mufi-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "082a34405f3ce094df2f368ddb94e3bbf1ce666c6f59a4f7708600b02e4734ff",
          "md5": "577581947b2fbdd2607b4b39506df197",
          "sha256": "9b29be63b992e7e37b0591dcf8f086cd99a4150ad69a7f291241cda014a3e1db"
        },
        "downloads": -1,
        "filename": "mufi-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "577581947b2fbdd2607b4b39506df197",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24560,
        "upload_time": "2021-03-06T11:21:11",
        "upload_time_iso_8601": "2021-03-06T11:21:11.110474Z",
        "url": "https://files.pythonhosted.org/packages/08/2a/34405f3ce094df2f368ddb94e3bbf1ce666c6f59a4f7708600b02e4734ff/mufi-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "082a34405f3ce094df2f368ddb94e3bbf1ce666c6f59a4f7708600b02e4734ff",
        "md5": "577581947b2fbdd2607b4b39506df197",
        "sha256": "9b29be63b992e7e37b0591dcf8f086cd99a4150ad69a7f291241cda014a3e1db"
      },
      "downloads": -1,
      "filename": "mufi-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "577581947b2fbdd2607b4b39506df197",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24560,
      "upload_time": "2021-03-06T11:21:11",
      "upload_time_iso_8601": "2021-03-06T11:21:11.110474Z",
      "url": "https://files.pythonhosted.org/packages/08/2a/34405f3ce094df2f368ddb94e3bbf1ce666c6f59a4f7708600b02e4734ff/mufi-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}