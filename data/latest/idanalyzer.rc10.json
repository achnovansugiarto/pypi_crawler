{
  "info": {
    "author": "ID Analyzer",
    "author_email": "<support@idanalyzer.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Security"
    ],
    "description": "\n# ID Analyzer Python SDK\nThis is a python SDK library for [ID Analyzer Identity Verification APIs](https://www.idanalyzer.com), though all the APIs can be called with without the SDK using simple HTTP requests as outlined in the [documentation](https://developer.idanalyzer.com), you can use this SDK to accelerate server-side development.\n\nWe strongly discourage users to connect to ID Analyzer API endpoint directly from client-side applications that will be distributed to end user, such as mobile app, or in-browser JavaScript. Your API key could be easily compromised, and if you are storing your customer's information inside Vault they could use your API key to fetch all your user details. Therefore, the best practice is always to implement a client side connection to your server, and call our APIs from the server-side.\n\n## Installation\nInstall through PIP\n\n```shell\npip install idanalyzer\n```\n\n## Core API\n\n[ID Analyzer Core API](https://www.idanalyzer.com/products/id-analyzer-core-api.html) allows you to perform OCR data extraction, facial biometric verification, identity verification, age verification, document cropping, document authentication (fake ID check), and paperwork automation using an ID image (JPG, PNG, PDF accepted) and user selfie photo or video. Core API has great global coverage, supporting over 98% of the passports, driver licenses and identification cards currently being circulated around the world.\n\n![Sample ID](https://www.idanalyzer.com/img/sampleid1.jpg)\n\nThe sample code below will extract data from this sample Driver License issued in California, compare it with a [photo of Lena](https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png), and check whether the ID is real or fake.\n\n```python\nimport idanalyzer\n\ntry:\n    # Initialize Core API with your api key and region (US/EU)\n    coreapi = idanalyzer.CoreAPI(\"Your API Key\", \"US\")\n\n    # Raise exceptions for API level errors\n    coreapi.throw_api_exception(True)\n\n    # enable document authentication using quick module\n    coreapi.enable_authentication(True, 'quick')\n\n    # perform scan\n    response = coreapi.scan(document_primary=\"https://www.idanalyzer.com/img/sampleid1.jpg\", biometric_photo=\"https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png\")\n\n    # All the information about this ID will be returned in response dictionary\n    print(response)\n\n    # Print document holder name\n    if response.get('result'):\n        data_result = response['result']\n        print(\"Hello your name is {} {}\".format(data_result['firstName'],data_result['lastName']))\n\n    # Parse document authentication results\n    if response.get('authentication'):\n        authentication_result = response['authentication']\n        if authentication_result['score'] > 0.5:\n            print(\"The document uploaded is authentic\")\n        elif authentication_result['score'] > 0.3:\n            print(\"The document uploaded looks little bit suspicious\")\n        else:\n            print(\"The document uploaded is fake\")\n\n    # Parse biometric verification results\n    if response.get('face'):\n        face_result = response['face']\n        if face_result['isIdentical']:\n            print(\"Face verification PASSED!\")\n        else:\n            print(\"Face verification FAILED!\")\n\n        print(\"Confidence Score: \"+face_result['confidence'])\n\nexcept idanalyzer.APIError as e:\n    # If API returns an error, catch it\n    details = e.args[0]\n    print(\"API error code: {}, message: {}\".format(details[\"code\"], details[\"message\"]))\n\nexcept Exception as e:\n    print(e)\n```\n\nYou could also set additional parameters before performing ID scan:\n\n```python\ncoreapi.enable_vault(True,False,False,False)  # enable vault cloud storage to store document information and image\ncoreapi.set_biometric_threshold(0.6) # make face verification more strict\ncoreapi.enable_authentication(True, 2) # check if document is real using module v2\ncoreapi.enable_barcode_mode(False) # disable OCR and scan for AAMVA barcodes only\ncoreapi.enable_image_output(True,True,\"url\") # output cropped document and face region in URL format\ncoreapi.enable_dualside_check(True) # check if data on front and back of ID matches\ncoreapi.set_vault_data(\"user@example.com\",12345,\"AABBCC\") # store custom data into vault\ncoreapi.restrict_country(\"US,CA,AU\") # accept documents from United States, Canada and Australia\ncoreapi.restrict_state(\"CA,TX,WA\") # accept documents from california, texas and washington\ncoreapi.restrict_type(\"DI\") # accept only driver license and identification card\ncoreapi.set_ocr_image_resize(0) # disable OCR resizing\ncoreapi.verify_expiry(True) # check document expiry\ncoreapi.verify_age(\"18-120\") # check if person is above 18\ncoreapi.verify_dob(\"1990/01/01\") # check if person's birthday is 1990/01/01\ncoreapi.verify_document_number(\"X1234567\") # check if the person's ID number is X1234567\ncoreapi.verify_name(\"Elon Musk\") # check if the person is named Elon Musk\ncoreapi.verify_address(\"123 Sunny Rd, California\") # check if address on ID matches with provided address\ncoreapi.verify_postcode(\"90001\") # check if postcode on ID matches with provided postcode\ncoreapi.enable_aml_check(True)  # enable AML/PEP compliance check\ncoreapi.set_aml_database(\"global_politicians,eu_meps,eu_cors\")  # limit AML check to only PEPs\ncoreapi.enable_aml_strict_match(True)  # make AML matching more strict to prevent false positives\ncoreapi.generate_contract(\"Template ID\", \"PDF\", {\"email\":\"user@example.com\"}); # generate a PDF document autofilled with data from user ID\n```\n\nTo **scan both front and back of ID**:\n\n```python\nresponse = coreapi.scan(document_primary=\"id_front.jpg\", document_secondary=\"id_back.jpg\")\n```\n\nTo perform **biometric video verification**:\n\n```python\nresponse = coreapi.scan(document_primary=\"id_front.jpg\", biometric_video=\"face_video.mp4\", biometric_video_passcode=\"1234\")\n```\n\nCheck out sample response array fields visit [Core API reference](https://developer.idanalyzer.com/coreapi.html##readingresponse).\n\n## DocuPass API\n\n[DocuPass](https://www.idanalyzer.com/products/docupass.html) allows you to verify your users without designing your own web page or mobile UI. A unique DocuPass URL can be generated for each of your users and your users can verify their own identity by simply opening the URL in their browser. DocuPass URLs can be directly opened using any browser,  you can also embed the URL inside an iframe on your website, or within a WebView inside your iOS/Android/Cordova mobile app.\n\n![DocuPass Screen](https://www.idanalyzer.com/img/docupassliveflow.jpg)\n\nDocuPass comes with 4 modules and you need to [choose an appropriate DocuPass module](https://www.idanalyzer.com/products/docupass.html) for integration.\n\nTo start, we will assume you are trying to **verify one of your user that has an ID of \"5678\"** in your own database, we need to **generate a DocuPass verification request for this user**. A unique **DocuPass reference code** and **URL** will be generated.\n\n```python\nimport idanalyzer\n\ntry:\n    # Initialize Core API with your api key and region (US/EU)\n    docupass = idanalyzer.DocuPass(\"Your API Key\", \"Your Company Name Inc.\", \"US\")\n\n    # Raise exceptions for API level errors\n    docupass.throw_api_exception(True)\n\n    # We need to set an identifier so that we know internally who we are verifying,\n    # this string will be returned in the callback. You can use your own user/customer id.\n    docupass.set_custom_id(\"5678\")\n\n    # Enable vault cloud storage to store verification results\n    docupass.enable_vault(True)\n\n    # Set a callback URL where verification results will be sent,\n    # you can use docupass_callback.php under this folder as a template\n    docupass.set_callback_url(\"https://www.your-website.com/docupass_callback.php\")\n\n    # We want DocuPass to return document image and user face image in URL format.\n    docupass.set_callback_image(True, True, 1)\n\n    # We will do a quick check on whether user have uploaded a fake ID\n    docupass.enable_authentication(True, \"quick\", 0.3)\n\n    # Enable photo facial biometric verification with threshold of 0.5\n    docupass.enable_face_verification(True, 1, 0.5)\n\n    # Users will have only 1 attempt for verification\n    docupass.set_max_attempt(1)\n\n    # We want to redirect user back to your website when they are done with verification\n    docupass.set_redirection_url(\"https://www.your-website.com/verification_succeeded.html\",\n                                 \"https://www.your-website.com/verification_failed.html\")\n\n    # Create a mobile verification session for this user\n    response = docupass.create_mobile()\n\n    # Create Live Mobile Module\n    # docupass.create_live_mobile()\n\n    # Create URL Redirection Module\n    # docupass.create_redirection()\n\n    # Create Iframe Module\n    # docupass.create_iframe()\n\n    print(response)\n\n    print(\"Scan the QR Code below to verify your identity: \")\n    print(response['qrcode'])\n    print(\"Or open your mobile browser and type in: \")\n    print(response['url'])\n\nexcept idanalyzer.APIError as e:\n    # If API returns an error, catch it\n    details = e.args[0]\n    print(\"API error code: {}, message: {}\".format(details[\"code\"], details[\"message\"]))\n\nexcept Exception as e:\n    print(e)\n```\n\nIf you are looking to embed DocuPass into your mobile application, simply embed `$result['url']` inside a WebView. To tell if verification has been completed monitor the WebView URL and check if it matches the URLs set in setRedirectionURL. (DocuPass Live Mobile currently cannot be embedded into native iOS App due to OS restrictions, you will need to open it with Safari)\n\nCheck out additional DocuPass settings:\n\n```python\ndocupass.set_reusable(True) # allow docupass URL/QR Code to be used by multiple users\ndocupass.set_language(\"en\") # override auto language detection\ndocupass.set_qrcode_format(\"000000\",\"FFFFFF\",5,1) # generate a QR code using custom colors and size\ndocupass.set_welcome_message(\"We need to verify your driver license before you make a rental booking with our company.\") # Display your own greeting message\ndocupass.set_logo(\"https://www.your-website.com/logo.png\") # change default logo to your own\ndocupass.hide_branding_logo(True) # hide footer logo\ndocupass.restrict_country(\"US,CA,AU\") # accept documents from United States, Canada and Australia\ndocupass.restrict_state(\"CA,TX,WA\") # accept documents from california, texas and washington\ndocupass.restrict_type(\"DI\") # accept only driver license and identification card\ndocupass.verify_expiry(True) # check document expiry\ndocupass.verify_age(\"18-120\") # check if person is above 18\ndocupass.verify_dob(\"1990/01/01\") # check if person's birthday is 1990/01/01\ndocupass.verify_document_number(\"X1234567\") # check if the person's ID number is X1234567\ndocupass.verify_name(\"Elon Musk\") # check if the person is named Elon Musk\ndocupass.verify_address(\"123 Sunny Rd, California\") # Check if address on ID matches with provided address\ndocupass.verify_postcode(\"90001\") # check if postcode on ID matches with provided postcode\ndocupass.set_custom_html_url(\"https://www.yourwebsite.com/docupass_template.html\") # use your own HTML/CSS for DocuPass page\ndocupass.sms_verification_link(\"+1333444555\")  # Send verification link to user's mobile phone\ndocupass.enable_phone_verification(True)  # get user to input their own phone number for verification\ndocupass.verify_phone(\"+1333444555\")  # verify user's phone number you already have in your database\ndocupass.enable_aml_check(True)  # enable AML/PEP compliance check\ndocupass.set_aml_database(\"global_politicians,eu_meps,eu_cors\")  # limit AML check to only PEPs\ndocupass.enable_aml_strict_match(True)  # make AML matching more strict to prevent false positives\ndocupass.generate_contract(\"Template ID\", \"PDF\", {\"somevariable\": \"somevalue\"}) # automate paperwork by generating a document autofilled with ID data\ndocupass.sign_contract(\"Template ID\", \"PDF\", {\"somevariable\": \"somevalue\"}) # get user to review and sign legal document prefilled with ID data\n```\n\nNow you should write a **callback script** or a **webhook**, to receive the verification results.  Visit [DocuPass Callback reference](https://developer.idanalyzer.com/docupass_callback.html) to check out the full payload returned by DocuPass. Callback script is generally programmed in a server environment and is beyond the scope of this guide, you can check out our [PHP SDK](https://github.com/idanalyzer/id-analyzer-php-sdk) for creating a callback script in PHP.\n\nFor the final step, you could create two web pages (URLS set via `set_redirection_url`) that display the results to your user. DocuPass reference will be passed as a GET parameter when users are redirected, for example: https://www.your-website.com/verification_succeeded.php?reference=XXXXXXXXX, you could use the reference code to fetch the results from your database. P.S. We will always send callbacks to your server before redirecting your user to the set URL.\n\n## DocuPass Signature API\n\nYou can get user to review and remotely sign legal document in DocuPass without identity verification, to do so you need to create a DocuPass Signature session.\n\n```python\n# Initialize DocuPass API with your api key and region (US/EU)\ndocupass = idanalyzer.DocuPass(\"Your API Key\", \"Your Company Name Inc.\", \"US\")\n\n# Raise exceptions for API level errors\ndocupass.throw_api_exception(True)\n\n# We need to set an identifier so that we know internally who is signing the document,\n# this string will be returned in the callback. You can use your own user/customer id.\ndocupass.set_custom_id(\"CUSTOMER1234\")\n\n# Enable vault cloud storage to store signed document\ndocupass.enable_vault(True)\n\n# Set a callback URL where signed document will be sent,\n# you can use docupass_callback.php under this folder as a template to receive the result\ndocupass.set_callback_url(\"https://www.your-website.com/docupass_callback.php\")\n\n# We want to redirect user back to your website when they are done with document signing,\n# there will be no fail URL unlike identity verification\ndocupass.set_redirection_url(\"https://www.your-website.com/document_signed.html\", \"\")\n\n\"\"\" More parameters\ndocupass.set_reusable(True) # allow docupass URL/QR Code to be used by multiple users\ndocupass.set_language(\"en\") # override auto language detection\ndocupass.set_qrcode_format(\"000000\",\"FFFFFF\",5,1) # generate a QR code using custom colors and size\ndocupass.hide_branding_logo(True) # hide footer logo\ndocupass.set_custom_html_url(\"https://www.yourwebsite.com/docupass_template.html\") # use your own HTML/CSS for DocuPass page\ndocupass.sms_contract_link(\"+1333444555\")  # Send signing link to user's mobile phone\n\"\"\"\n\n#Assuming in your contract template you have a dynamic field %{email} and you want to fill it with user email\nprefill = {\n    \"email\": \"user@example.com\"\n}\n\n# Create a signature session for this user\nresponse = docupass.create_signature(\"Template ID\", \"PDF\", prefill)\n\nprint(response)\n\nprint(\"Scan the QR Code below to sign document: \")\nprint(response['qrcode'])\nprint(\"Or open your mobile browser and navigate to: \")\nprint(response['url'])\n```\n\nOnce user has reviewed and signed the document, the signed document will be sent back to your server using callback under the `contract.document_url` field, the contract will also be saved to vault if you have enabled vault.\n\n## Vault API\n\nID Analyzer provides free cloud database storage (Vault) for you to store data obtained through Core API and DocuPass. You can set whether you want to store your user data into Vault through `enable_vault` while making an API request with PHP SDK. Data stored in Vault can be looked up through [Web Portal](https://portal.idanalyzer.com) or via Vault API.\n\nIf you have enabled Vault, Core API and DocuPass will both return a vault entry identifier string called `vaultid`,  you can use the identifier to look up your user data:\n\n```python\nimport idanalyzer\n\ntry:\n    # Initialize Core API with your api key and region (US/EU)\n    vault = idanalyzer.Vault(\"Your API Key\", \"US\")\n\n    # Get vault item with vault ID\n    response = vault.get(\"Vault_id\")\n\n    print(response)\n\nexcept idanalyzer.APIError as e:\n    # If API returns an error, catch it\n    details = e.args[0]\n    print(\"API error code: {}, message: {}\".format(details[\"code\"], details[\"message\"]))\nexcept Exception as e:\n    print(e)\n```\n\nYou can also list some of the items in your vault: \n\n```python\n# List 5 items created on or after 2021/02/25\n# sort result by first name in ascending order, starting from first item.\nresponse = vault.list(filter=[\"createtime>=2021/02/25\"], orderby=\"firstName\", sort=\"ASC\", limit=5, offset=0)\n```\n\n\nAlternatively, you may have a DocuPass reference code which you want to search through vault to check whether user has completed identity verification:\n\n```python\nresponse = vault.list(filter=[\"docupass_reference=XXXXXXXXXXXXX\"])\n```\n\nLearn more about [Vault API](https://developer.idanalyzer.com/vaultapi.html).\n\n## AML API\n\nID Analyzer provides Anti-Money Laundering AML database consolidated from worldwide authorities,  AML API allows our subscribers to lookup the database using either a name or document number. It allows you to instantly check if a person or company is listed under **any kind of sanction, criminal record or is a politically exposed person(PEP)**, as part of your **AML compliance KYC**. You may also use automated check built within Core API and DocuPass.\n\n```python\nimport idanalyzer\n\ntry:\n    # Initialize AML API with your api key and region (US/EU)\n    aml = idanalyzer.AMLAPI(\"Your API Key\", \"US\")\n\n    # Raise exceptions for API level errors\n    aml.throw_api_exception(True)\n\n    # Set AML database to only search the PEP category\n    aml.set_aml_database(\"global_politicians,eu_cors,eu_meps\")\n\n    # Search for a politician\n    response1 = aml.search_by_name(\"Joe Biden\")\n\n    print(response1)\n\n    # Set AML database to all databases\n    aml.set_aml_database(\"\")\n\n    # Search for a sanctioned ID number\n    response2 = aml.search_by_id_number(\"AALH750218HBCLPC02\")\n\n    print(response2)\n\nexcept idanalyzer.APIError as e:\n    # If API returns an error, catch it\n    details = e.args[0]\n    print(\"API error code: {}, message: {}\".format(details[\"code\"], details[\"message\"]))\nexcept Exception as e:\n    print(e)\n```\n\nLearn more about [AML API](https://developer.idanalyzer.com/amlapi.html).\n\n## Demo\n\nCheck out **/demo** folder for more Python demos.\n\n## SDK Reference\n\nCheck out [ID Analyzer Python SDK Reference](https://idanalyzer.github.io/id-analyzer-python/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.idanalyzer.com",
    "keywords": "id card,driver license,passport,id verification,identification card,identity document,mrz,pdf417,aamva,aml,pep,sign document",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "idanalyzer",
    "package_url": "https://pypi.org/project/idanalyzer/",
    "platform": "",
    "project_url": "https://pypi.org/project/idanalyzer/",
    "project_urls": {
      "Homepage": "https://www.idanalyzer.com"
    },
    "release_url": "https://pypi.org/project/idanalyzer/1.2.2/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "ID Analyzer API client library, scan and verify global passport, driver license and identification card.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10088722,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be592bd9b7258cdaa915cb14719d418ee5211abb43f749e16ad65bc087a6a25f",
          "md5": "74cd673b6c85f579ccd660d6c557b9b8",
          "sha256": "5f34004b8e5a89628601c0d07e0072729f5531de5a09ab79b44e0c51b8ae9c70"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74cd673b6c85f579ccd660d6c557b9b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14317,
        "upload_time": "2021-03-03T17:37:54",
        "upload_time_iso_8601": "2021-03-03T17:37:54.378743Z",
        "url": "https://files.pythonhosted.org/packages/be/59/2bd9b7258cdaa915cb14719d418ee5211abb43f749e16ad65bc087a6a25f/idanalyzer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcf0cdc3cd674b0812bd8540e2cad17a4af20a8b7a7c69321c1efd7b2711e77a",
          "md5": "2622b21548e8ed8eb1f237df7bc37d6e",
          "sha256": "fe6379702449a537aa3c5a0d9a6074d8b54d3bffdd172259a6947cf87dfa27f9"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2622b21548e8ed8eb1f237df7bc37d6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14318,
        "upload_time": "2021-03-03T18:29:58",
        "upload_time_iso_8601": "2021-03-03T18:29:58.315301Z",
        "url": "https://files.pythonhosted.org/packages/dc/f0/cdc3cd674b0812bd8540e2cad17a4af20a8b7a7c69321c1efd7b2711e77a/idanalyzer-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c8500487fee8cda34efffdcba1d69f0cbdc2f184fe70300c625b29c3349ae4",
          "md5": "f71040d69e6193d48fe505b438930c76",
          "sha256": "d764030639abdd26dcb1df956b66cba73bbc32cd53faf891656a6ba887539083"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f71040d69e6193d48fe505b438930c76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14371,
        "upload_time": "2021-03-04T11:57:34",
        "upload_time_iso_8601": "2021-03-04T11:57:34.471856Z",
        "url": "https://files.pythonhosted.org/packages/45/c8/500487fee8cda34efffdcba1d69f0cbdc2f184fe70300c625b29c3349ae4/idanalyzer-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bd3896a7f9b5aa14f2d685a2b8ba082576d3647acf021a0b19ed5678af029ce",
          "md5": "bce7d811a7e85b7f1a938affbd9f5c4e",
          "sha256": "f6aa528e1f941e02966652fe40b944d75ac0952bf0747f85b04a5c66821a17cc"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bce7d811a7e85b7f1a938affbd9f5c4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14502,
        "upload_time": "2021-03-05T17:28:43",
        "upload_time_iso_8601": "2021-03-05T17:28:43.164046Z",
        "url": "https://files.pythonhosted.org/packages/2b/d3/896a7f9b5aa14f2d685a2b8ba082576d3647acf021a0b19ed5678af029ce/idanalyzer-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea3071618aa99dc660232b9be3dd681a7453c73f702297b743ab6495d79b9caf",
          "md5": "96069546dcc38ba7e15e57de2fcd5d95",
          "sha256": "7ec19f534159b1ddf99f58f51fae8be31bcc8610b20e32cb5d235ea8ed3799c7"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96069546dcc38ba7e15e57de2fcd5d95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14547,
        "upload_time": "2021-03-05T17:31:09",
        "upload_time_iso_8601": "2021-03-05T17:31:09.038513Z",
        "url": "https://files.pythonhosted.org/packages/ea/30/71618aa99dc660232b9be3dd681a7453c73f702297b743ab6495d79b9caf/idanalyzer-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0ac30862fef3a09c0c8416957f5391aad5a47a4c9832842611abbc50438df82",
          "md5": "f173b0b6994235671115e60b8725a51c",
          "sha256": "f3897f96bc086734598795cfa2c7fcd955587b9db46054d647cf5586426d4eca"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f173b0b6994235671115e60b8725a51c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20563,
        "upload_time": "2021-03-05T18:02:49",
        "upload_time_iso_8601": "2021-03-05T18:02:49.485695Z",
        "url": "https://files.pythonhosted.org/packages/c0/ac/30862fef3a09c0c8416957f5391aad5a47a4c9832842611abbc50438df82/idanalyzer-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "007591456c33a1d1a69433beadba20d82f00c199e5649cfc56fc0e3e67858876",
          "md5": "873c733beec7838b9b10960c8eefc805",
          "sha256": "10a496664a0104c3d9c3b1b3ad1fab1b98c2e6b4cfe84a46dc54f6e6c0fef78a"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.0.55-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "873c733beec7838b9b10960c8eefc805",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14537,
        "upload_time": "2021-03-05T18:07:27",
        "upload_time_iso_8601": "2021-03-05T18:07:27.329748Z",
        "url": "https://files.pythonhosted.org/packages/00/75/91456c33a1d1a69433beadba20d82f00c199e5649cfc56fc0e3e67858876/idanalyzer-1.0.55-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dae59b87a114c0e7847175f94f857b6033c0b9081dad6be27884076b3df019f",
          "md5": "dea3b64747c071cf0b187ca4547bd4cc",
          "sha256": "89c655a3726a49f9c763575009ae2aa4c35b33d7105d16f444104c67684949f1"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dea3b64747c071cf0b187ca4547bd4cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14817,
        "upload_time": "2021-03-21T20:08:36",
        "upload_time_iso_8601": "2021-03-21T20:08:36.859587Z",
        "url": "https://files.pythonhosted.org/packages/8d/ae/59b87a114c0e7847175f94f857b6033c0b9081dad6be27884076b3df019f/idanalyzer-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bab3e3675f301070da5eea3a03c7e294793732d2ab062442c300d875a9a805f1",
          "md5": "5e6d08e144a48df654a71b973b041dbd",
          "sha256": "74aa15c7d35aa21a23ca294fa78679b3b854ec39537b0c9561ba009f3ebfaa5e"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e6d08e144a48df654a71b973b041dbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16987,
        "upload_time": "2021-04-05T21:55:14",
        "upload_time_iso_8601": "2021-04-05T21:55:14.435336Z",
        "url": "https://files.pythonhosted.org/packages/ba/b3/e3675f301070da5eea3a03c7e294793732d2ab062442c300d875a9a805f1/idanalyzer-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb71006e0b391997d8b3e3b7d6b6a038cf070974eb120be8619e7799f233a9b8",
          "md5": "6f15ff80c1414cca90837ea4bfef4fe9",
          "sha256": "600b0d36497335f1bb801353200feddf8dc5b95af39c90242266900d9771fd02"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f15ff80c1414cca90837ea4bfef4fe9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17056,
        "upload_time": "2021-04-09T18:21:07",
        "upload_time_iso_8601": "2021-04-09T18:21:07.021181Z",
        "url": "https://files.pythonhosted.org/packages/eb/71/006e0b391997d8b3e3b7d6b6a038cf070974eb120be8619e7799f233a9b8/idanalyzer-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b2e18f06e2d11981aad39282fd035439cdaa2cec6c14f7f9cecd4f5fdd14963",
          "md5": "d6d8e68d1f455aaf4bc2b0b44dc989f1",
          "sha256": "af00fa68b9a6676b1592e38b0f8ba925705ad48f0fc3f63356eda2644f22a10d"
        },
        "downloads": -1,
        "filename": "idanalyzer-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6d8e68d1f455aaf4bc2b0b44dc989f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18090,
        "upload_time": "2021-04-16T21:13:36",
        "upload_time_iso_8601": "2021-04-16T21:13:36.201893Z",
        "url": "https://files.pythonhosted.org/packages/6b/2e/18f06e2d11981aad39282fd035439cdaa2cec6c14f7f9cecd4f5fdd14963/idanalyzer-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b2e18f06e2d11981aad39282fd035439cdaa2cec6c14f7f9cecd4f5fdd14963",
        "md5": "d6d8e68d1f455aaf4bc2b0b44dc989f1",
        "sha256": "af00fa68b9a6676b1592e38b0f8ba925705ad48f0fc3f63356eda2644f22a10d"
      },
      "downloads": -1,
      "filename": "idanalyzer-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6d8e68d1f455aaf4bc2b0b44dc989f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18090,
      "upload_time": "2021-04-16T21:13:36",
      "upload_time_iso_8601": "2021-04-16T21:13:36.201893Z",
      "url": "https://files.pythonhosted.org/packages/6b/2e/18f06e2d11981aad39282fd035439cdaa2cec6c14f7f9cecd4f5fdd14963/idanalyzer-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}