{
  "info": {
    "author": "Studer Innotec SA",
    "author_email": "develop@studer-innotec.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Package **xcom485i**\r\n=========================\r\n\r\nPython library to access Studer-Innotec Xcom-485i device through Modbus RTU over a serial port\r\n\r\nPrerequisites\r\n----------------\r\n\r\nPlease read the complete documentation available on : `Studer Innotec SA`_ *-> Support -> Download Center -> Software and Updates -> Communication protocols Xcom-CAN*\r\n\r\nGetting Started\r\n----------------\r\n\r\n1. Package installation\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n.. code-block:: console\r\n\r\n    $ pip install xcom485i\r\n\r\n2. Hardware installation\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n- Connect your *Xcom-485i* (Studer side) to your installation using the cable provided with the device\r\n- Connect your *Xcom-485i* (External side) to your controller (personal computer, Raspberry Pi, etc.) using a *USB* to *RS-485* adapter\r\n- Please refer to the *Xcom-485i* manual for more information about commissioning the device\r\n\r\n3. Serial configuration\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nThis package rely on `pyserial`_ standard package, in order to use the **xcom485i** package make sure to instantiate it like :\r\n\r\n.. code-block:: python\r\n\r\n    import serial\r\n\r\n    serial_port = serial.Serial(SERIAL_PORT_NAME, SERIAL_PORT_BAUDRATE, parity=serial.PARITY_EVEN, timeout=1)\r\n\r\n- where `SERIAL_PORT_NAME` is your serial port interface, for example set it to *'COM4'* (string argument) when using *Windows* otherwise you may set it to *'/dev/ttyUSB0/'* on *Linux*\r\n- where `SERIAL_PORT_BAUDRATE` is the baudrate used by your serial port interface (must be set to 9600, 19200, 38400 or 115200 according to *Xcom-485i* dip-switches)\r\n\r\n**Xcom-485i Dip switches baud rate selection**\r\n\r\n=====   =====   ===========\r\nN째 7    N째 8    Baudrate\r\n=====   =====   ===========\r\nOFF     OFF     9600   bps\r\nOFF     ON      19200  bps\r\nON      OFF     38400  bps\r\nON      ON      115200 bps\r\n=====   =====   ===========\r\n\r\n4. Address offset\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nSet the modbus offset corresponding to the internal dip-switches of your *Xcom-485i* device, it must be set to 0, 32, 64 or 128.\r\n\r\nIt is done when instantiate the *Xcom485i* class like :\r\n\r\n.. code-block:: python\r\n\r\n    xcom485i = Xcom485i(serial_port, OFFSET, debug=True)\r\n\r\n- where `serial_port` is the previously created object with *Serial*\r\n- where `OFFSET` is your actual modbus address offset set by the dip-switches inside your *Xcom-485i*\r\n- where `debug` enables you to get some useful console information for debugging purpose\r\n\r\n**Xcom-485i Dip switches address offset selection**\r\n\r\n=====   =====   ===============   ==============\r\nN째 1    N째 2    Address offset    Address range\r\n=====   =====   ===============   ==============\r\nOFF     OFF     0                 1 to 63\r\nOFF     ON      32                33 to 95\r\nON      OFF     64                65 to 127\r\nON      ON      128               129 to 192\r\n=====   =====   ===============   ==============\r\n\r\n5. Run an example from `/examples` folder\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nGo to */examples* folder with a terminal and execute this script\r\n\r\n.. code-block:: console\r\n\r\n    $ python ex_read_info.py\r\n\r\nCheck `client file`_ to understand it.\r\n\r\n6. Open documentation\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nOpen documentation from `Read The Docs`_\r\n\r\nWarnings\r\n----------------\r\n\r\n- **Please** check carefully the serial configuration, the *Xcom-485i* dip-switches configuration as well as the jumper for D+, D- and GND signals\r\n- **Use** devices addresses generated into `addresses file`_\r\n- It is strongly recommended **NOT** to spam the *Xcom-485i* with multiple requests. The correct way to communicate with the *Xcom-485i* is to send a request and to **wait** for the response before sending the next request. If no response comes from the *Xcom-485i* after a delay of 1 second, we can consider that the timeout is over and another request can be send. It is also how *Modbus RTU* is intended to work.\r\n\r\nAuthors\r\n----------------\r\n\r\n**Studer Innotec SA** - *Initial work* - `Studer Innotec SA`_\r\n\r\nLicense\r\n----------------\r\n\r\nThis project is licensed under the MIT License - see the `LICENSE`_ file for details\r\n\r\n.. External References:\r\n.. _Studer Innotec SA: https://www.studer-innotec.com\r\n.. _addresses file: https://xcom485i.readthedocs.io/en/latest/addresses.html\r\n.. _client file: https://xcom485i.readthedocs.io/en/latest/client.html\r\n.. _Read The Docs: https://xcom485i.readthedocs.io/en/latest/index.html\r\n.. _LICENSE: https://xcom485i.readthedocs.io/en/latest/license.html\r\n.. _pyserial: https://pyserial.readthedocs.io/en/latest/shortintro.html\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/studer-innotec/xcom485i",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "develop@studer-innotec.com",
    "name": "xcom485i",
    "package_url": "https://pypi.org/project/xcom485i/",
    "platform": null,
    "project_url": "https://pypi.org/project/xcom485i/",
    "project_urls": {
      "Documentation": "https://xcom485i.readthedocs.io/en/latest/index.html",
      "Homepage": "https://github.com/studer-innotec/xcom485i",
      "Issues tracker": "https://github.com/studer-innotec/xcom485i/issues",
      "Source Code": "https://github.com/studer-innotec/xcom485i"
    },
    "release_url": "https://pypi.org/project/xcom485i/0.9.3/",
    "requires_dist": [
      "uModbus (==1.0.3)",
      "pyserial (>=3.4)"
    ],
    "requires_python": ">=3.6.8",
    "summary": "Package that let easily interact with the Xcom-485i device over Modbus RTU",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16100763,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54a2beba763b5a69c5cec31d3076268f9cb5095f970e500a6186889a8135f4fe",
          "md5": "a4f5a01760c5d73dd308ec31c46f82c1",
          "sha256": "1ebd34c7d5b56d5cafe244ec6cedbdc917ba5c3f95e5f2363898a36036c0d3d2"
        },
        "downloads": -1,
        "filename": "xcom485i-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4f5a01760c5d73dd308ec31c46f82c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 9063,
        "upload_time": "2020-03-17T10:03:55",
        "upload_time_iso_8601": "2020-03-17T10:03:55.266945Z",
        "url": "https://files.pythonhosted.org/packages/54/a2/beba763b5a69c5cec31d3076268f9cb5095f970e500a6186889a8135f4fe/xcom485i-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91303ed630c037aa4cdbfbd0591b30e35d5c57820da034895464292a81e76fdc",
          "md5": "a5146b872986e1e468b7db5d0bcff7a2",
          "sha256": "7c516e5b4119ce56887882946535ec6612d07940521c2f8ebe396d1a9f7c2be8"
        },
        "downloads": -1,
        "filename": "xcom485i-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a5146b872986e1e468b7db5d0bcff7a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 10174,
        "upload_time": "2020-03-17T10:03:57",
        "upload_time_iso_8601": "2020-03-17T10:03:57.689823Z",
        "url": "https://files.pythonhosted.org/packages/91/30/3ed630c037aa4cdbfbd0591b30e35d5c57820da034895464292a81e76fdc/xcom485i-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddfba6d649a796ddf2263de62da20edb1c3fbbebf59dea71ef8fae2d1a6b6608",
          "md5": "28e07a72d996af7f3046bafac20b3686",
          "sha256": "0f773857f383de059b53858727e9ef471968b5928f460f2e7edcdb1dff7b0e8c"
        },
        "downloads": -1,
        "filename": "xcom485i-0.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28e07a72d996af7f3046bafac20b3686",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 9706,
        "upload_time": "2022-12-14T14:27:14",
        "upload_time_iso_8601": "2022-12-14T14:27:14.320918Z",
        "url": "https://files.pythonhosted.org/packages/dd/fb/a6d649a796ddf2263de62da20edb1c3fbbebf59dea71ef8fae2d1a6b6608/xcom485i-0.9.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e0523ed456de6d2e47bb5b657b4ac786d596059190b019dd77ec0d866183238",
          "md5": "e6229eb43b479a620bded3638ea7faeb",
          "sha256": "b214755faad847bb0c101eea234836a3448c9ba1d3f3583ca896198c0fa0caba"
        },
        "downloads": -1,
        "filename": "xcom485i-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e6229eb43b479a620bded3638ea7faeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 11005,
        "upload_time": "2022-12-14T14:27:16",
        "upload_time_iso_8601": "2022-12-14T14:27:16.486954Z",
        "url": "https://files.pythonhosted.org/packages/0e/05/23ed456de6d2e47bb5b657b4ac786d596059190b019dd77ec0d866183238/xcom485i-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddfba6d649a796ddf2263de62da20edb1c3fbbebf59dea71ef8fae2d1a6b6608",
        "md5": "28e07a72d996af7f3046bafac20b3686",
        "sha256": "0f773857f383de059b53858727e9ef471968b5928f460f2e7edcdb1dff7b0e8c"
      },
      "downloads": -1,
      "filename": "xcom485i-0.9.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28e07a72d996af7f3046bafac20b3686",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.8",
      "size": 9706,
      "upload_time": "2022-12-14T14:27:14",
      "upload_time_iso_8601": "2022-12-14T14:27:14.320918Z",
      "url": "https://files.pythonhosted.org/packages/dd/fb/a6d649a796ddf2263de62da20edb1c3fbbebf59dea71ef8fae2d1a6b6608/xcom485i-0.9.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e0523ed456de6d2e47bb5b657b4ac786d596059190b019dd77ec0d866183238",
        "md5": "e6229eb43b479a620bded3638ea7faeb",
        "sha256": "b214755faad847bb0c101eea234836a3448c9ba1d3f3583ca896198c0fa0caba"
      },
      "downloads": -1,
      "filename": "xcom485i-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e6229eb43b479a620bded3638ea7faeb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.8",
      "size": 11005,
      "upload_time": "2022-12-14T14:27:16",
      "upload_time_iso_8601": "2022-12-14T14:27:16.486954Z",
      "url": "https://files.pythonhosted.org/packages/0e/05/23ed456de6d2e47bb5b657b4ac786d596059190b019dd77ec0d866183238/xcom485i-0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}