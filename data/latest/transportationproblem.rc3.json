{
  "info": {
    "author": "CDFMLR",
    "author_email": "cdfmlr@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TransportationProblem\n 求解产销平衡的运输问题。\n\n## Getting Started\n\nInstall this package:\n\n```shell\n$ pip install TransportationProblem\n```\n\nUtilize it to solve a transportation problem:\n\n```python\n>>> import transportation_problem as tp\n>>> s = [('A1', 14), ('A2', 27), ('A3', 19)]\t# 产地\n>>> d = [('B1', 22), ('B2', 13), ('B3', 12), ('B4', 13)]\t# 销地\n>>> c = [[6, 7, 5, 3], [8, 4, 2, 7], [5, 9, 10, 6]]\t# 运价\n>>> p = tp.TransportationProblem(s, d, c)\n>>> r = p.solve()\n>>> print(r)\nTransportation problem optimized successfully. Result cost (total): 232.0\n      运量\t      B1\t      B2\t      B3\t      B4\t\n      A1\t     1.0\t     0.0\t     0.0\t    13.0\t\n      A2\t     2.0\t    13.0\t    12.0\t     0.0\t\n      A3\t    19.0\t     0.0\t     0.0\t     0.0\t\n```\n\n\n\n## 产销平衡的运输问题\n\n> 设某种物品有m个产地A1, A2，· · ·, Am，各产地的产量分别是a1, a2, · · ·, am；有n个销地B1，B2，· · ·，Bn，各个销地的销量分别为b1，b2，· · ·，bn。假定从产地Ai(i=1,2,· · ·,m)向销地Bj(j=1,2,· · ·,n)运输单位物品的运价为c_ij，问怎么调运这些物品才能使总运费最小？\n\n若在这个运输问题中，各产地产量之和等于各销地销量之和，则称该运输问题**产销平衡**。\n\n要解决一个非产销平衡的运输问题，往往需要人工对问题做出调整，使其成为产销平衡的运输问题，然后才能求解。所以我们只考虑产销平衡的运输问题的求解方法。\n\n则称该运输问题**产销平衡**。\n\n对于一个产销平衡的运输问题，已知的信息可以用下表表示：\n\n| 产地\\销地 |   B1 | · · ·  | Bn   |        产量         |\n| :-------: | ---: | :----: | :--- | :-----------------: |\n|    A1     | c_11 | · · ·  | c_1n |         a1          |\n|     :     |    : | (运价) | :    |          :          |\n|    Am     | c_m1 | · · ·  | c_mn |         am          |\n|   销量    |   b1 | · · ·  | bn   | sum(a_i) ==sum(b_j) |\n\n这样的运输问题，是一类具有特殊结构的[线性规划](https://baike.baidu.com/item/线性规划/1661606)问题，所以我们完全可以采用 [单纯形法](https://baike.baidu.com/item/单纯形法/8580570) 求解。\n\n### 单纯形解法\n\n一个产销平衡的运输问题可以转化为如下线性规划问题：\n\n$$\n\\min z = \\sum_{i=1}^m\\sum_{j=1}^n c_{ij}x_{ij}\\\\\ns.t. \\left\\{\\begin{array}{l}\n\\sum_{j=1}^n x_{ij} = a_i\\\\\n\\sum_{i=1}^m x_{ij} = b_j\\\\\nx_{ij} \\ge 0\n\\end{array}\\right.\n$$\n\n对此线性规划问题使用单纯形算法求解即可得到最优运输方案（如果可行）。\n\n由于这个方法只是对单纯形算法的简单应用，在该项目中不做实现。但我在我的单纯形算法项目 [SimplexLinprog](https://github.com/cdfmlr/SimplexLinprog) 中给出了这一解法的实现：\n\n- https://github.com/cdfmlr/SimplexLinprog/blob/master/transportation_problem.py\n\n由于运输问题的特殊性，我们可以将单纯性法简化，用表格来处理。这个解法称为「表上作业法」。\n\n### 表上作业法\n\n该项目实现了使用表上作业法对产销平衡的运输问题的最优化求解。表上作业法的步骤如下：\n\n|        | 描述                                                         | 方法                             |\n| ------ | :----------------------------------------------------------- | -------------------------------- |\n| 第一步 | 求初始基行可行解(初始调运方案)                               | 最小元素法、 西北角法、 伏格尔法 |\n| 第二步 | 求检验数并判断是否得到最优解. 当非基变量的检验数`σ_ij≥0`时得到最优解， 若存在检验数`σ_ij <0`，说明还没有达到最优，转第三步. | 闭回路法、 位势法                |\n| 第三步 | 调整运量，即基变换. 选一个变量出基，对原运量进行调整得到新的基可行解，转第二步. | 闭回路调整法                     |\n\n各步骤中具体的实现方法有：\n\n- 求初始基行可行解\n  - **最小元素法**：从运价最小的地方开始供应(调运)，然后次小， 直到最后供完为止。\n  - **西北角法(或左上角法)**：从西北角（左上角）格开始，在格内的右下角标上允许取得的最大数；然后按行（列）标下一格的数；若某行（列）的产量（销量）已满足，则把该行（列）的其他格划去；如此进行下去，直至得到一个基本可行解的方法。\n  - **伏格尔法**：\n    1. 从运价表中分别计算出各行和各列的最小运费和次最小运费的差额，并填入该表的最右列和最下行。\n    2. 再从差额最大的行或列中找出最小运价确定供需关系和供需数量（有相同最小运价时，供需数量尽可能大！）。当产地或销地中有一方数量供应完毕或得到满足时，划去运价表中对应的行或列。重复1）和2）， 直到找出初始运输方案为止。\n- 求检验数，判断是否得到最优解\n  - **闭回路法**：这种方法需要对每一个空格寻找一条闭回路，并根据闭回路求出每个空格的检验数。当运输问题中m和n较大时，计算检验数的工作量很大。\n  - **位势法**：先对初始调运方案求出位势，然后求各空格的检验数。当所有的检验数均为非负时，就得到最优方案。\n- 调整运量\n  - **闭回路调整法**：从检验数为负的空格出发，作闭回路，作进一步调整。\n\n## 表上作业法的实现\n\n### 框架设计\n\n首先，将「表上作业法」的步骤抽象如下：\n\n| 步骤                               | 抽象类                    | 具体实现子类                                                 |\n| ---------------------------------- | ------------------------- | ------------------------------------------------------------ |\n| 求初始基行可行解                   | `TransportationIniter`    | 最小元素法`MinimumElementIniter`;<br />西北角法`NorthwestCornerIniter`;<br />伏格尔法`VogelIniter` |\n| 求检验数，<br />判断是否达到最优解 | `TransportationChecker`   | 位势法`PotentialChecker`;<br />闭回路法(这个效率不高，没太大意义，所以暂未实现) |\n| 调整运量                           | `TransportationOptimizer` | 闭回路调整法`ClosedLoopAdjustmentOptimizer`                  |\n\n为了实现闭回路调整法`ClosedLoopAdjustmentOptimizer`，我们还需要实现「闭回路」的表示：\n\n- 闭回路的节点 `ClosedLoopNode`\n- 找闭回路的方法 `ClosedLoopMethod`\n\n![屏幕快照 2020-04-17 12.06.27](https://tva1.sinaimg.cn/large/007S8ZIlgy1gdwmwzweyej30u00xv129.jpg)\n\n再看运输问题的表达：\n\n我设计了一个 `TransportationProblem` 类来表示一个运输问题。它具有属性：\n\n- supply: 产地: `[('name', 产量), ...]`\n- demand: 销地: `[('name', 销量), ...]`\n- costs:  运价: `[[1, 2, 3, ...], [4, 5, 6, ...], ...]`\n- result: 运输问题求解结果，在调用 `transportationProblem.solve(...)` ，求解成功后才有非 None 值。\n\n`TransportationProblem` 只有一个 `solve()` 方法，调用这个方法来对运输问题求解，这个方法需要给定表上作业法的各个步骤要使用的具体方法。也就是说，需要传入 `TransportationIniter`、`TransportationChecker`、`TransportationOptimizer` 的子类各一个作为参数。\n\n若求解成功，则 `solve()` 会返回一个 `TransportationResult` 对象，这个对象中包含了:\n\n- 求解结果（运量表）：`transportation`\n- 总的运输成本：`total_cost`\n- 一个原问题的引用： `problem`\n\n同时，`TransportationResult` 重写了 `__str__()`，可以用 `print(transportationResult)` 打印出一张漂亮的运量表。\n\n![image-20200417115548306](https://tva1.sinaimg.cn/large/007S8ZIlgy1gdwmkgq1odj30jy09mq3u.jpg)\n\n### 具体算法\n\n这些涉及到的大部分算法还是比较简单的。\n\n其中比较复杂的就是「闭回路」的寻找，这个东西还是有很多种方法可以解决的。我写了一个递归回溯的算法（这有点类似于我们做游戏的时候写敌人AI移动脚本里用的一些方法），从各种方面来看，这其实都不是一个很好的算法，但是它比较有趣。\n\n具体各个算法的实现，可以参考这张思维导图：\n\n![image-20200417155635563](https://tva1.sinaimg.cn/large/007S8ZIlgy1gdwtiyiouaj30xt0u012c.jpg)\n\n（图片不清晰可以看如下大纲）\n\n#### 1. 求初始基行可行解\n\n**最小元素法**:\n\n- 将运价从小到大排序\n- 从最小元素开始填运量\n\n\t- 1. 获取最小元素坐标\n\t- 2. 检查有没有\"划掉\"，即对应supply、demand是否为0\n\t- 3. 没划掉，则分配这个位置的运量\n\n- 直到所有supply、demand值都为0\n\n**伏格尔法**:\n\n- 获取行、列差额\n\n\t- 1. 找出行/列中最低、次低cost\n\t- 2. 返回 diff = 次低 - 最低\n\t- 3. 若某行/列已经被\"划掉\"，则返回中对应的值为 -1\n\n- 找出最大差额所在的行/列\n- 安排这个行/列里最低运价处的运量\n\n**西北角法**:\n\n- 从西北角，即 (r, c) = (0, 0) 开始处理\n- 安排(r, c)处运量\n- 安排后如果行满足了(划掉行)则r+1\n如果列满足了(划掉列)则c+1\n\n- 直到(r, c)达到可取的最大值（右下角）\n\n#### 2. 求检验数, 判断是否达到最优解\n\n**位势法**:\n\n- 初始化位势u、v\n- 对基变量：$\\sigma_{ij} = c_{ij} - (u_i + v_j) = 0$，求出 u 和 v\n- 计算非基变量检验数: $\\sigma_{ij} = c_{ij} - (u_i + v_j)$\n- 若所有的检验数均为非负时，就得到最优方案。\n\n#### 3. 调整运量\n\n**闭回路调整法**:\n\n- 找出所有<0的检验数，\n选其中最小的\n- 找这个最小的检验数处开始的一条闭回路\n\n\t- 一步一步递归\n\n\t\t- 1. 看看有没走完闭回路\n\n\t\t\t- 如果上一步的行/列不等于起点的行/列，\n而现在这一步的行/列不等于起点的行/列，\n就说明“走完了”（可以连起一条闭回路）\n\t\t\t- 走完了就记录当前节点，返回并通知递归的上一层记录它的自己（沿着递归走来的路径把整条闭回路记录下来）\n\n\t\t- 2. 没走完，则求出上一步的「方向」\n\t\t- 3. 查找如果不转向继续往前走下去可能的下一个「落脚点」\n\n\t\t\t- 「落脚点」即从当前点(作业表的某一单元格)向“前方”画射线，射线上若有基变量则可作为一个落脚点\n\n\t\t- 4. 查找如果转90度，可能的「落脚点」\n\t\t- 5. 从 3、4 中找到的所有可能落脚点中一个个走了试试看\n\n\t\t\t- 递归，下一步\n\t\t\t- 等递归返回回来了\n\n\t\t\t\t- 若返回中携带表示成功走完的flag，\n则记录自己这一步所处的位置，\n返回上一层（也携带表示成功走完的flag）\n\t\t\t\t- 若返回中携带的是表示这条路走不通的失败flag，则继续尝试走下一个可能落脚点\n\n\t\t- 6. 如果尝试了所有可能落脚点，都不可行，则说明上就一步走错了\n\n\t\t\t- 回溯\n\n\t\t\t\t- 返回表示这条路走不通的失败flag\n\n- 在闭回路对运量进行调整\n\n\t- 算出闭回路中下标(从0开始，0是检验数<0的非基变量)为奇数处的运量的最小值min_trans\n\t- 调整，沿着闭回路将运价加/减min_trans.\n下标从0开始，所以是偶加奇减\n(如：0+, 1-, 2+, 3-)\n\n## 接口使用\n\n接口的使用还是比较简单的，直接看一个例子：\n\n已知如下产销平衡运输问题，\n\n| 产地\\销地 | B1   | B2   | B3   | B4   | 产量 |\n| --------- | ---- | ---- | ---- | ---- | ---- |\n| A1        | 6    | 7    | 5    | 3    | 14   |\n| A2        | 8    | 4    | 2    | 7    | 27   |\n| A3        | 5    | 9    | 10   | 6    | 19   |\n| 销量      | 22   | 13   | 12   | 13   |      |\n\n编写驱动脚本（注意保证 `transportation_problem` 在导入路径中！）：\n\n```python\nimport transportation_problem as tp\n\n# 定义产地、产量\ns = [('A1', 14), ('A2', 27), ('A3', 19)]\n# 定义售量、销量\nd = [('B1', 22), ('B2', 13), ('B3', 12), ('B4', 13)]\n# 运价表\nc = [[6, 7, 5, 3], [8, 4, 2, 7], [5, 9, 10, 6]]\n\n# 初始化运输问题对象\np = tp.TransportationProblem(s, d, c)\n# 求解，使用西北角法初始化，位势法检验，闭回路法优化调整\nr = p.solve(tp.NorthwestCornerIniter, tp.PotentialChecker, tp.ClosedLoopAdjustmentOptimizer)\n\n# 输出解\nprint(r)\n```\n\n运行，得到输出的最优运量表：\n\n```\nTransportation problem optimized successfully. Result cost (total): 232.0\n      运量\t      B1\t      B2\t      B3\t      B4\t\n      A1\t     1.0\t     0.0\t     0.0\t    13.0\t\n      A2\t     2.0\t    13.0\t    12.0\t     0.0\t\n      A3\t    19.0\t     0.0\t     0.0\t     0.0\t\n```\n\n当然，在日常使用中，我们（一般情况下）不想自己指定方法，所以 `solve` 方法的实现是带有默认参数的：\n\n```python\ndef solve(self, initer_class=MinimumElementIniter, checker_class=PotentialChecker, optimizer_class=ClosedLoopAdjustmentOptimizer):\n    pass\n```\n\n使用默认参数，代码可以更加简洁：\n\n```python\nimport transportation_problem as tp\n\ns = [('A1', 14), ('A2', 27), ('A3', 19)]\nd = [('B1', 22), ('B2', 13), ('B3', 12), ('B4', 13)]\nc = [[6, 7, 5, 3], [8, 4, 2, 7], [5, 9, 10, 6]]\n\np = tp.TransportationProblem(s, d, c)\nr = p.solve()\t# 默认最小元素法初始化，位势法检验，闭回路法优化调整\nprint(r)\n```\n\n**另一个例子**：\n\n再看一个产销不平衡问题，来自清华大学《􏰄􏰅􏰆􏰄􏰅􏰆运筹学 第四版》的习题。产销不平衡首先要转化为产销平衡问题才能开始求解：\n\n![IMG_0B78AC4053D1-1](https://tva1.sinaimg.cn/large/007S8ZIlgy1gdx6l6qtzkj30v90jsk0g.jpg)\n\n编写代码，求解 `表4-28` 的最优调运方案：\n\n```python\nimport transportation_problem as tp\n\nspy = [('A', 400), ('B', 450), ('C', 70)]\ndmd = [('甲', 290), ('甲\\'', 30), ('乙', 250), ('丙', 270), ('丙\\'', 80)]\ncst = [[15, 15, 18, 22, 22], [21, 21, 25, 16, 16], [999, 0, 999, 999, 0]]\n\npbm = tp.TransportationProblem(spy, dmd, cst)\nres = pbm.solve(tp.VogelIniter)\t\t# 伏格尔法初始化\n\nprint(res)\n```\n\n对于 M，我们编程时可以给定一个对于当前问题来说充分大的值即可。具体到这个问题中，`999` 已经足够大。\n\n当然，你也可以使用一个无穷 (`numpy.inf`) 来表示 M，这样也能求出最优方案，不过 `inf` 值会导致程序无法自动求出最小运价（输出中会显示`Result cost (total): nan`），所以不推荐这样：\n\n```\nimport numpy as np\n...\ncst = [[15, 15, 18, 22, 22], [21, 21, 25, 16, 16], [np.inf, 0, np.inf, np.inf, 0]]\n...\n```\n\n运行，得到结果：\n\n```\nTransportation problem optimized successfully. Result cost (total): 14650.0\n      运量\t       甲\t      甲'\t       乙\t       丙\t      丙'\t\n       A\t   150.0\t     0.0\t   250.0\t     0.0\t     0.0\t\n       B\t   140.0\t     0.0\t     0.0\t   270.0\t    40.0\t\n       C\t     0.0\t    30.0\t     0.0\t     0.0\t    40.0\t\n```\n\n输出的运量表即为最优调运方案，最小运价为 14650.0 万元。\n\n## 开放源代码\n\nMIT License\n\nCopyright (c) 2020 CDFMLR",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cdfmlr/TransportationProblem/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TransportationProblem",
    "package_url": "https://pypi.org/project/TransportationProblem/",
    "platform": "",
    "project_url": "https://pypi.org/project/TransportationProblem/",
    "project_urls": {
      "Homepage": "https://github.com/cdfmlr/TransportationProblem/"
    },
    "release_url": "https://pypi.org/project/TransportationProblem/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "求解产销平衡的运输问题。",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7180310,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99b183caed87847e5e47c16b93dbfdbf0ef8a1cf32e26b3dc2d4076300470753",
          "md5": "c08cb71be04914cce2f4d04d4e0aa570",
          "sha256": "2cb0669107e4f59c2e679ace5099badef2f0c4e46c6b9df1e18911d906828da9"
        },
        "downloads": -1,
        "filename": "TransportationProblem-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c08cb71be04914cce2f4d04d4e0aa570",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12252,
        "upload_time": "2020-05-06T13:14:53",
        "upload_time_iso_8601": "2020-05-06T13:14:53.455033Z",
        "url": "https://files.pythonhosted.org/packages/99/b1/83caed87847e5e47c16b93dbfdbf0ef8a1cf32e26b3dc2d4076300470753/TransportationProblem-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4e4344fbc3921c230b07e7d1471c89c0b3d57c90b992a402a631d40cff81dff",
          "md5": "2241358bf13df09618e7c970b8399010",
          "sha256": "3a424d35c4213f42e8f1a9be1e3a2028323284f403ec72a3dc018b16a629af27"
        },
        "downloads": -1,
        "filename": "TransportationProblem-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2241358bf13df09618e7c970b8399010",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14569,
        "upload_time": "2020-05-06T13:17:39",
        "upload_time_iso_8601": "2020-05-06T13:17:39.980577Z",
        "url": "https://files.pythonhosted.org/packages/c4/e4/344fbc3921c230b07e7d1471c89c0b3d57c90b992a402a631d40cff81dff/TransportationProblem-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e76b097441a1173642ec0ea0e48fb838d022cb994b35eb79463e904fedb3cb92",
          "md5": "236027d0ec0c2cab6f7b000165cb3112",
          "sha256": "8eebb2c1f4f90a5d2b06d49b03deb3de29f553d3fda4505dd78e56ef4b9796d3"
        },
        "downloads": -1,
        "filename": "TransportationProblem-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "236027d0ec0c2cab6f7b000165cb3112",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14766,
        "upload_time": "2020-05-06T13:33:40",
        "upload_time_iso_8601": "2020-05-06T13:33:40.301725Z",
        "url": "https://files.pythonhosted.org/packages/e7/6b/097441a1173642ec0ea0e48fb838d022cb994b35eb79463e904fedb3cb92/TransportationProblem-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e76b097441a1173642ec0ea0e48fb838d022cb994b35eb79463e904fedb3cb92",
        "md5": "236027d0ec0c2cab6f7b000165cb3112",
        "sha256": "8eebb2c1f4f90a5d2b06d49b03deb3de29f553d3fda4505dd78e56ef4b9796d3"
      },
      "downloads": -1,
      "filename": "TransportationProblem-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "236027d0ec0c2cab6f7b000165cb3112",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14766,
      "upload_time": "2020-05-06T13:33:40",
      "upload_time_iso_8601": "2020-05-06T13:33:40.301725Z",
      "url": "https://files.pythonhosted.org/packages/e7/6b/097441a1173642ec0ea0e48fb838d022cb994b35eb79463e904fedb3cb92/TransportationProblem-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}