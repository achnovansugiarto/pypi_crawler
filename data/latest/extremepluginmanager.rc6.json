{
  "info": {
    "author": "CPSuperstore",
    "author_email": "cpsuperstoreinc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Desktop Environment",
      "Topic :: Games/Entertainment",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "# Extreme Plugin Manager\r\nA library for effortlessly enabling and managing plugins in your Python application.\r\n\r\nThis library provides you with complete control over which objects your plugins can and can not access.\r\n\r\nAdditionally, this library provides powerful tools such as the ability to reroute all plugin STDOUT and easily spawn different types of background tasks.\r\n\r\n## Contents\r\n- [Installation](#Installation)\r\n- [Usage](#Usage)\r\n  - [The `ExtremePluginManager` Class](#the-extremepluginmanager-class)\r\n  - [The `Plugin` Class](#the-plugin-class)\r\n  - [The `BaseThread` Class](#the-basethread-class)\r\n  - [Plugin Conversions](#plugin-conversions)\r\n- [Plugin Creation Guide](#plugin-creation-guide)\r\n  - [Rerouting STDOUT](#rerouting-stdout)\r\n- [Limitations](#limitations)\r\n\r\n## Installation\r\n```shell\r\npip install ExtremePluginManager\r\n```\r\n\r\n## Usage\r\nTo start, you will simply need to instantiate the `ExtremePluginManager` class like so:\r\n\r\n```python\r\nimport ExtremePluginManager\r\n\r\nmanager = ExtremePluginManager.ExtremePluginManager(\"plugins\")\r\n```\r\n\r\n### The `ExtremePluginManager` Class\r\nThis class takes one mandatory, and several optional parameters.\r\n- `plugin_directory: path` - The path to where plugins are to be stored (mandatory)\r\n- `create_dir: bool = False` - If the plugin directory does not exist and this is `True`, it will be created, otherwise `ValueError` will be raised. \r\n- `plugin_register_filename: str = \"plugins.json\"` - The name of the file to track which plugins are installed/enabled. This is automatically created in the `plugin_directory`\r\n- `start_event: str = \"on_start\"` - The name of the plugin function which will be triggered when the plugin is loaded. This event is managed automatically.\r\n- `end_event: str = \"on_stop\"` - The name of the plugin function which will be triggered when the plugin is unloaded/stopped. This event is managed automatically.\r\n- `builtin_funcs: dict = None` - A dictionary of custom builtin values to pass into each plugin. The key is the code reference name and the value is the object itself. These values can be variables or pointers to functions. Plugins can not access any objects from your project outside this dictionary.\r\n\r\nThe `ExtremePluginManager` class also contains helpful methods. Please only use getters/setters to update properties instead of the private attributes (prefixed with an underscore `_`):\r\n- `reload_plugins()` - Reloads all plugins from disk and triggers the `start_event`. This can be a useful tool for plugin developers as they can reload their plugin from inside your app instead of needing to close and re-open each time.\r\n- `on_plugin_load(plugin)` - This is an event which can be overridden. Each time a plugin reads the code file from disk and executes, this event is triggered.\r\n- `execute_event(event: str, *args, **kwargs)` - Calls the function `event` in each plugin and passes in the `*args` and `**kwargs` parameters. This is how you trigger different plugin events. Plugins do not need to implement all of these functions, but you should keep a list of the available functions for your documentation. \r\n- `execute_end_event()` - Triggers the `end_event` event for all plugins\r\n- `execute_start_event()` - Triggers the `start_event` event for all plugins\r\n- `search_by_id(plugin_id: str)` - Returns the plugin (as a `Plugin` object) with the corresponding `plugin_id` (set in the plugin config file)\r\n- `search_by_attribute(info_attribute: str, value, default=None)` - Returns a list of plugins  (as a `Plugin` object) which have the attribute `info_attribute` with the `value`. Use `default` for a default value in the event not all plugins will have the attribute\r\n- `install_plugin(path: path, enable: bool = True, overwrite: bool = True)` - Installs the plugin at the specified path to the plugin directory. If `enable` is `True` then the plugin will also be enabled and `start_event` will be triggered. If `overwrite` is set to `False` and a plugin already exists with the same name, an exception will be raised.\r\n- `uninstall_plugin(plugin_id: str, remove_files: bool = True)` - Uninstalls a plugin with the ID `plugin_id`. If `remove_files` is `True` then the files will be deleted as well (this can not be undone). If `False` then the plugin file will remain but would have been removed from the registry so will not load until it is installed once again.\r\n- `create_template_plugin(plugin_id: str, enable: bool = True) -> str` - Creates a template plugin in the directory format. Both the filename and plugin ID will be set to `plugin_id`. If `enable` is `True` then the template plugin will also be enabled. The full path to the plugin will then be returned. \r\n- `enable_plugin(plugin_id: str)` - Marks the plugin with the ID `plugin_id` to enabled and triggers the `start_event` event\r\n- `disable_plugin(plugin_id: str)` - Marks the plugin with the ID `plugin_id` to disabled and triggers the `end_event` event\r\n- `set_plugin_state(plugin_id: str, state: bool)` - Marks the plugin with the ID `plugin_id` to `state` and triggers the corresponding event\r\n- `get_plugin_register()`  - Returns the current state of the plugin register\r\n- `get_plugin_directory()`  - Returns the path to the directory where the plugins are kept\r\n\r\n### The `Plugin` Class\r\nA plugin can be in a few different formats but regardless of the format, the `Plugin` class exposes the same methods. Most of these methods are also available to the plugin code. You can obtain this instance by using one of the search functions in the `ExtremePluginManager` class\r\n- `reload()` - Reloads the plugin code but **DOES NOT** trigger the `start_event`\r\n- `read_file(self, path: path, encoding: str = \"utf-8\") -> str` - Reads the file located at `path` and returns the contents as a string (decoded with `encoding` - used for plaintext files). Note that `path` should be relative to the root directory of your plugin.\r\n- `read_file_bytes(self, path: path) -> bytes` - Reads the file located at `path` and returns as bytes (used for binary files). Note that `path` should be relative to the root directory of your plugin. \r\n- `write_file(self, path: path, contents: str, encoding: str = \"utf-8\")` - Writes `contents` to the files (encoded using `encoding`) to the file located at `path`. Note that `path` should be relative to the root directory of your plugin.\r\n- `write_file_bytes(self, path: path, contents: bytes)` - Writes `contents` into the file located at `path` (used for binary files). Note that `path` should be relative to the root directory of your plugin.\r\n- `remove_file(self, path: path)` - Removes the file located at `path`. Note that `path` should be relative to the root directory of your plugin.\r\n- `execute_event(event: str, *args, **kwargs)` - Executes the plugin function called `event` passing in `*args` and `**kwargs`\r\n- `kill()` - This method prevents the plugin from having future events triggerd and will no longer be visible to plugin searches. This will trigger the `end_event`\r\n\r\n### The `BaseThread` Class\r\nThis class extends the `threadding.Thread` class but has three additional methods. This class is created when a plugin calls one of `start_background_task`, `start_delayed_task`, or `start_interval_task`.\r\n- `get_name() -> str` - Returns the name of the thread\r\n- `set_name(name: str)` - Sets the name of the thread\r\n- `kill()` - Terminates the thread immediately by raising a `ThreadKilledException`\r\n\r\n### Plugin Conversions\r\nPlugin formats can easily be converted between each other. The following conversion functions are availible:\r\n```python\r\nimport ExtremePluginManager\r\n\r\n# convert directory format to zip format\r\n# you can optionally specify `zip_format` parameter to set the resulting format\r\n# can be \"zip\", \"tar\", \"gztar\",\"bztar\", or \"xztar\".\r\nExtremePluginManager.converter.directory_to_zip(\"src_directory\", \"dst_zip\")\r\n\r\n# convert zip format to directory format\r\nExtremePluginManager.converter.zip_to_directory(\"dst_zip\", \"src_directory\")\r\n```\r\n\r\n## Plugin Creation Guide\r\nIt should be noted that the `end_event` is automatically triggered when the application terminates.\r\n\r\nIn addition to the builtins you have provided in the constructor, the following builtins are available by default.\r\n- `read_file(self, path: path, encoding: str = \"utf-8\") -> str` - Reads the file located at `path` and returns the contents as a string (decoded with `encoding` - used for plaintext files). Note that `path` should be relative to the root directory of your plugin.\r\n- `read_file_bytes(self, path: path) -> bytes` - Reads the file located at `path` and returns as bytes (used for binary files). Note that `path` should be relative to the root directory of your plugin. \r\n- `write_file(self, path: path, contents: str, encoding: str = \"utf-8\")` - Writes `contents` to the files (encoded using `encoding`) to the file located at `path`. Note that `path` should be relative to the root directory of your plugin.\r\n- `write_file_bytes(self, path: path, contents: bytes)` - Writes `contents` into the file located at `path` (used for binary files). Note that `path` should be relative to the root directory of your plugin.\r\n- `remove_file(self, path: path)` - Removes the file located at `path`. Note that `path` should be relative to the root directory of your plugin.\r\n- `info()` - Returns a dictionary representing the contents of the plugin's `info.json`\r\n- `plugin_manager` - An attribute which is a reference to the `ExtremePluginManager` which contains this object\r\n- `plugin` - An attribute which is a reference to the actual `Plugin` class instance\r\n- `start_background_task(target: callable, *args, **kwargs)` - Calls the function `target` (please only pass in function references) with the parameters `*args`, and `**kwargs` to be run asynchronously\r\n- `start_delayed_task(delay: float, target: callable, *args, **kwargs)` - Calls the function `target` (please only pass in function references) with the parameters `*args`, and `**kwargs` to be run asynchronously after `delay` seconds have passed\r\n- `start_interval_task(interval: float, target: callable, *args, **kwargs)` - Calls the function `target` (please only pass in function references) with the parameters `*args`, and `**kwargs` to be run asynchronously every `interval` seconds\r\n\r\n### Rerouting STDOUT\r\nIf you add a builtin with the reference name of `print` which takes the parameters `*args, sep=' ', end='\\n', file=None` then all calls to `print` will be sent here instead of the default function. \r\nYou can then do what you wish with the output.\r\n\r\n## Limitations\r\nIf you attempt to reference a builtin value for your plugin with an IDE such as `PyCharm`, it will flag the value as unknown. This is because we inject these values into the Python compiler at runtime.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CPSuperstore/ExtremePluginManager",
    "keywords": "Plugin,Manager",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ExtremePluginManager",
    "package_url": "https://pypi.org/project/ExtremePluginManager/",
    "platform": null,
    "project_url": "https://pypi.org/project/ExtremePluginManager/",
    "project_urls": {
      "Bug Tracker": "https://github.com/CPSuperstore/ExtremePluginManager/issues",
      "Homepage": "https://github.com/CPSuperstore/ExtremePluginManager"
    },
    "release_url": "https://pypi.org/project/ExtremePluginManager/1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A powerful library for managing plugins in your Python application.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15739302,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6535ca523b0bf66106ea7e978a4e66342c1e843321549d02bf8be789f98e6564",
          "md5": "bd8de179309720e9a8e853638b1099b4",
          "sha256": "88bbf288f2c12bcf50a2afa15317bc7c3c50345b849d2f1c1836e935dcf09f8e"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd8de179309720e9a8e853638b1099b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8329,
        "upload_time": "2022-09-10T18:32:58",
        "upload_time_iso_8601": "2022-09-10T18:32:58.000033Z",
        "url": "https://files.pythonhosted.org/packages/65/35/ca523b0bf66106ea7e978a4e66342c1e843321549d02bf8be789f98e6564/ExtremePluginManager-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cbb59ca1ac1d42f809d0cbcde5e12dd70dd4a26c430de418c37f0a35dca6eb1",
          "md5": "705a73a209d8f992827a0066f7dd661b",
          "sha256": "991f978f28b9ad38b94884e800495244ed7e8d77796552bef7b335d47e3d848c"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "705a73a209d8f992827a0066f7dd661b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7532,
        "upload_time": "2022-09-10T18:33:00",
        "upload_time_iso_8601": "2022-09-10T18:33:00.033372Z",
        "url": "https://files.pythonhosted.org/packages/1c/bb/59ca1ac1d42f809d0cbcde5e12dd70dd4a26c430de418c37f0a35dca6eb1/ExtremePluginManager-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66b9a6d3e4b595d0b230a8f581c959ddb4356c2bf461dfd379c5b2961722c846",
          "md5": "153b20a72c371196376ffa977835ea9b",
          "sha256": "dcea23ab4c430db1d7386b83b8015f250e038cd9a006baba23bc0973f061838d"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "153b20a72c371196376ffa977835ea9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14713,
        "upload_time": "2022-11-08T22:16:41",
        "upload_time_iso_8601": "2022-11-08T22:16:41.239289Z",
        "url": "https://files.pythonhosted.org/packages/66/b9/a6d3e4b595d0b230a8f581c959ddb4356c2bf461dfd379c5b2961722c846/ExtremePluginManager-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2d54426661c9e307e6b5f330f0ee7846c9ac440f9add76555e2ebe98b45f2c5",
          "md5": "68d65cd163532edfed9b65c8e588862f",
          "sha256": "c118b68655033088e7cf5f5160b5e1cdb5b4ac6276d3eff889f08fed5d9883d2"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68d65cd163532edfed9b65c8e588862f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10502,
        "upload_time": "2022-11-08T22:16:43",
        "upload_time_iso_8601": "2022-11-08T22:16:43.107851Z",
        "url": "https://files.pythonhosted.org/packages/d2/d5/4426661c9e307e6b5f330f0ee7846c9ac440f9add76555e2ebe98b45f2c5/ExtremePluginManager-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0f018b5777de38b2735dc08da90b83e3349972681c13a53f432f309b7a2b21a",
          "md5": "518b0123ade92b2c84970164ace1c604",
          "sha256": "376335c16d2c39b049eb628a3ee62bb9eb362bdbe8306d2d21d7bae4a3230b4d"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "518b0123ade92b2c84970164ace1c604",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14890,
        "upload_time": "2022-11-09T20:56:59",
        "upload_time_iso_8601": "2022-11-09T20:56:59.205293Z",
        "url": "https://files.pythonhosted.org/packages/d0/f0/18b5777de38b2735dc08da90b83e3349972681c13a53f432f309b7a2b21a/ExtremePluginManager-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48e0883c85d3bc5b6d3f18f818abf070f49a2284e4b73530d5363b400ee06cbd",
          "md5": "37a6809cbe4e929ace5582ff62a83ccd",
          "sha256": "241cc2d5259b0b6c5ac456e644a7395940cd5981d2f0c54b1df08180e865dcd6"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37a6809cbe4e929ace5582ff62a83ccd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10699,
        "upload_time": "2022-11-09T20:57:01",
        "upload_time_iso_8601": "2022-11-09T20:57:01.216301Z",
        "url": "https://files.pythonhosted.org/packages/48/e0/883c85d3bc5b6d3f18f818abf070f49a2284e4b73530d5363b400ee06cbd/ExtremePluginManager-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "167a669c80afd0f30cd3800511785bc2d797922efd3045d36f0f7f812a5cffaf",
          "md5": "f05364cdff53ff75922597ef869766ef",
          "sha256": "06199baf809215c3c0b23056e1d0f666f946b93825bad620991d068587f482fb"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f05364cdff53ff75922597ef869766ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14899,
        "upload_time": "2022-11-11T20:17:21",
        "upload_time_iso_8601": "2022-11-11T20:17:21.628087Z",
        "url": "https://files.pythonhosted.org/packages/16/7a/669c80afd0f30cd3800511785bc2d797922efd3045d36f0f7f812a5cffaf/ExtremePluginManager-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b130b09904294a97d1d7ef6ab214865140ba90d0aac7c3dff376aca8715be5e",
          "md5": "08c4767e9ebd37c35871159705f1b02f",
          "sha256": "d90d51356eb40b841c8da2b7979010b4b8c860e4405a5b106514466059086362"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "08c4767e9ebd37c35871159705f1b02f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10707,
        "upload_time": "2022-11-11T20:17:23",
        "upload_time_iso_8601": "2022-11-11T20:17:23.276192Z",
        "url": "https://files.pythonhosted.org/packages/1b/13/0b09904294a97d1d7ef6ab214865140ba90d0aac7c3dff376aca8715be5e/ExtremePluginManager-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68bf3e96aa96a5ad78fbb479939e3721b28d65e7e3698d612a1b9d88cb568e9a",
          "md5": "dbb45c0c08effd0836dd2b0929ac9fe5",
          "sha256": "775f3af9d448d657c1f4dd042c955b3d5117002c9ca015da9b56e3c62b59687a"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbb45c0c08effd0836dd2b0929ac9fe5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14889,
        "upload_time": "2022-11-11T20:20:14",
        "upload_time_iso_8601": "2022-11-11T20:20:14.300943Z",
        "url": "https://files.pythonhosted.org/packages/68/bf/3e96aa96a5ad78fbb479939e3721b28d65e7e3698d612a1b9d88cb568e9a/ExtremePluginManager-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8de2f127ee70781ce934ca6ba09ce3254a3cf85c1c437218132773642f4f639",
          "md5": "6b928c5683c1f941e80c3ad5ff82d3fe",
          "sha256": "d6471fa00809d8f29189d46201ce2332321d59add6e116cab5f7830910911512"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6b928c5683c1f941e80c3ad5ff82d3fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10667,
        "upload_time": "2022-11-11T20:20:16",
        "upload_time_iso_8601": "2022-11-11T20:20:16.391966Z",
        "url": "https://files.pythonhosted.org/packages/b8/de/2f127ee70781ce934ca6ba09ce3254a3cf85c1c437218132773642f4f639/ExtremePluginManager-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e31391f14f58cebda4a40de30fd1b3acdd1a416f7b83a0f15f6e76955163bf9",
          "md5": "5687c6abc6a72f230f2592d0dd3aa80f",
          "sha256": "cbd0fb3b0ccde73a6bc40c3bdaaf8f80517f1901c7e83a33ad8c8844010b5fa2"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5687c6abc6a72f230f2592d0dd3aa80f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14921,
        "upload_time": "2022-11-11T20:27:52",
        "upload_time_iso_8601": "2022-11-11T20:27:52.467814Z",
        "url": "https://files.pythonhosted.org/packages/1e/31/391f14f58cebda4a40de30fd1b3acdd1a416f7b83a0f15f6e76955163bf9/ExtremePluginManager-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d9948686bd658574b8f50e89a8b13beef72047d23ade6155d776bbb46cf7886",
          "md5": "e67dbe003d8b81bce77c54c607766935",
          "sha256": "2031a5fefd1c01ff1dec76f0a925af2994204716a2534950a21ea5e627176d76"
        },
        "downloads": -1,
        "filename": "ExtremePluginManager-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e67dbe003d8b81bce77c54c607766935",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10737,
        "upload_time": "2022-11-11T20:27:53",
        "upload_time_iso_8601": "2022-11-11T20:27:53.965902Z",
        "url": "https://files.pythonhosted.org/packages/6d/99/48686bd658574b8f50e89a8b13beef72047d23ade6155d776bbb46cf7886/ExtremePluginManager-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e31391f14f58cebda4a40de30fd1b3acdd1a416f7b83a0f15f6e76955163bf9",
        "md5": "5687c6abc6a72f230f2592d0dd3aa80f",
        "sha256": "cbd0fb3b0ccde73a6bc40c3bdaaf8f80517f1901c7e83a33ad8c8844010b5fa2"
      },
      "downloads": -1,
      "filename": "ExtremePluginManager-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5687c6abc6a72f230f2592d0dd3aa80f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14921,
      "upload_time": "2022-11-11T20:27:52",
      "upload_time_iso_8601": "2022-11-11T20:27:52.467814Z",
      "url": "https://files.pythonhosted.org/packages/1e/31/391f14f58cebda4a40de30fd1b3acdd1a416f7b83a0f15f6e76955163bf9/ExtremePluginManager-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d9948686bd658574b8f50e89a8b13beef72047d23ade6155d776bbb46cf7886",
        "md5": "e67dbe003d8b81bce77c54c607766935",
        "sha256": "2031a5fefd1c01ff1dec76f0a925af2994204716a2534950a21ea5e627176d76"
      },
      "downloads": -1,
      "filename": "ExtremePluginManager-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e67dbe003d8b81bce77c54c607766935",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10737,
      "upload_time": "2022-11-11T20:27:53",
      "upload_time_iso_8601": "2022-11-11T20:27:53.965902Z",
      "url": "https://files.pythonhosted.org/packages/6d/99/48686bd658574b8f50e89a8b13beef72047d23ade6155d776bbb46cf7886/ExtremePluginManager-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}