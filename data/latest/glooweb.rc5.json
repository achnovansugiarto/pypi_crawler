{
  "info": {
    "author": "gloo",
    "author_email": "gloo.luo@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "致力于restful风格api开发的轻量web框架glooweb\n\n#### 一、开始\n\n安装\n\n```shell\npip install glooweb\n```\n\n简单使用\n\n```python\nfrom glooweb import Gloo， Response\n\n\n# 实例化一个app对象\napp = Gloo()\n\n# 创建一个路由对象,需要传入一个路由前缀参数\napi = Gloo.Router(\"/api\")\n# 将路由注册进应用\napp.register(api)\n\n\n# 定义视图函数\n@api.get(\"/index\")  # 当路径为/api/index, 并且method为get时访问这个视图函数\ndef index(request):  # 视图函数需要两个参数，上下文ctx, request请求对象\n    return Response(\"<h1>index page</h1>\")  # 返回一个Response对象，也可直接返回一个字符串，当然这里不建议您这样做，因为当你使用响应拦截器时可能会出现异常情况。\n\n\nif __name__ == '__main__':\n    app.runserver()  # 默认以127.0.0.1:9999运行\n```\n\n浏览器中访问127.0.0.1:9999/api/index\n\n![glooweb01](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124003939TIM%E5%9B%BE%E7%89%8720191124082009.png)\n\n#### 二、视图\n\n基本视图\n\n```python\napp = Gloo()\napi = app.Router(\"/api\")\napp.register(api)\n\n@api.get(\"/index\")\ndef index(request):  # glooweb视图需要提供一个参数request\n    return Response(\"<h1>index page</h1>\")\n```\n\n返回json\n\n```python\nfrom glooweb import Gloo, jsonify, Response\n\n\napp = Gloo()\napi = app.Router(\"/api\")\napp.register(api)\n\n\n@api.get(\"/index\")\ndef index(request):\n    return jsonify(errno=0, errmsg=\"SUCCESSFUL\")  # 使用jsonify方法返回json格式的数据\n```\n\n浏览器中访问127.0.0.1:9999/api/index\n\n![glooweb02](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124003946TIM%E5%9B%BE%E7%89%8720191124082002.png)\n\n返回其它状态码的视图\n\n```python\nfrom glooweb import Gloo, jsonify, Response\n\n\napp = Gloo()\napi = app.Router(\"/api\")\napp.register(api)\n\n\n@api.get(\"/index\")\ndef index(request):\n    content = \"<h1 style='color: red'>404 Not Fount</h1>\"\n    return Response(content, \"404 NOT FOUND\", content_type=\"text/html\")  # 参数status控制响应的状态码信息， content_type控制响应的mime类型\n```\n\n浏览器中访问127.0.0.1:9999/api/index\n\n![glooweb03](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124004000TIM%E5%9B%BE%E7%89%8720191124081957.png)\n\n获取请求参数\n\n```python\nfrom glooweb import Gloo, jsonify, Response\n\n\napp = Gloo()\napi = app.Router(\"/api\")\napp.register(api)\n\n\n@api.get(\"/index\")\ndef index(request):\n    id_ = request.GET.get(\"id\", None)\n    name = request.GET.get(\"name\", None)\n    email = request.GET.get(\"email\", None)\n\n    data = dict(id=id_, name=name, email=email)\n\n    return jsonify(errno=0, data=data)\n```\n\n浏览器中访问127.0.0.1:9999/api/index?id=100&name=gloo&email=***\n\n![glooweb04](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124004011TIM%E5%9B%BE%E7%89%8720191124081953.png)\n\n为了更好支持restful风格的接口开发，您还可以使用post等其它method请求\n```python\nfrom glooweb import Gloo, jsonify, Response\n\n\napp = Gloo()\napi = app.Router(\"/api\")\napp.register(api)\n\n\n@api.post(\"/index\")  # post请求\ndef index(request):\n\tid_ = request.POST.get(\"id\", None)\n    name = request.POST.get(\"name\", None)\n    email = request.POST.get(\"email\", None)\n\n    data = dict(id=id_, name=name, email=email)\n    \n    return jsonify(errno=0, data=data)\n```\n\n使用postman测试post请求\n\n![glooweb05](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124004023TIM%E5%9B%BE%E7%89%8720191124081947.png)\n\nglooweb还支持put, delete, head请求方法，使用方法类似\n\n类视图，glooweb 0.1.7版本新增类视图功能\n```python\nfrom glooweb import Gloo, Response, jsonify\nfrom glooweb import View\nimport simplejson\n\n\napp = Gloo()\napi = Gloo.Router('/api')\napp.register(api)\n\n\nclass Index(View):  # 类视图需要继承自View类\n    api = api  # 需传入一个api参数，且api为Gloo.Router对象\n    route_name = \"\"  # route_name路由地址, 当route_name未定义或为false时，路由地址为当前类名小写\n\n    def get(self, request):  # 当路由为route_name且method为GET时访问这个视图\n        return Response(\"Index GET\")\n\n    def post(self, request):  # 当路由为route_name且method为POST时访问这个视图\n        print(self.route_name)\n        payload = simplejson.loads(request.body)\n        return jsonify(data=payload)\n\n    def put(self, request):  # 当路由为route_name且method为PUT时访问这个视图\n        return Response(\"Index PUT\")\n\n    def delete(self, request):  # 当路由为route_name且method为DELETE时访问这个视图\n        return Response(\"Index DELETE\")\n\n\nif __name__ == '__main__':\n    app.runserver()\n```\n浏览器中访问127.0.01/api/index\n![glooweb00](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191128122119TIM%E5%9B%BE%E7%89%8720191128202037.png)\n使用postman测试post请求\n![glooweb00](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191128122226TIM%E5%9B%BE%E7%89%8720191128202048.png)\n使用postman测试put请求\n![glooweb00](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191128122856TIM%E5%9B%BE%E7%89%8720191128202839.png)\n使用postman测试delete请求\n![glooweb00](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191128122329TIM%E5%9B%BE%E7%89%8720191128202053.png)\n\n#### 三、路由\n\n提取URL参数\n\n需求 \n\nurl为/product9999需要将产品ID提取出来\n\n```python\n# 定义视图函数\n@api.get(\"/product{id:int}\")  # {id:int}匹配整形字符串\ndef product(request):\n    print(request.vars.id)  # 访问url中的id的内容\n    return f\"<h1>product {request.vars.id}</h1>\"\n```\n\nint匹配整形\n\nword匹配一个单词\n\nstr匹配一个字符串\n\nfloat匹配浮点型\n\nany匹配任意字符\n\n浏览器中访问127.0.01/api/product9999\n\n![glooweb06](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124010341TIM%E5%9B%BE%E7%89%8720191124090208.png)\n\n#### 四、拦截器\n\n路由拦截器\n\n```python\n# 定义视图函数\n@api.get(\"/product/{id:int}\")  # 当路径为/api/index, 并且method为get时访问这个视图函数\ndef product(request):  # 视图函数需要两个参数，上下文ctx, request请求对象\n    print(\"视图函数\")\n    return f\"<h1>product {request.vars.id}</h1>\"\n\n\n@api.reg_pre_interceptor\ndef pre_product(request):\n    print(\"视图函数响应之前\")\n    return request\n\n\n@api.reg_post_interceptor\ndef post_product(ctx, request, response):\n    print(\"视图函数响应之后\")\n    return response\n```\n\n运行结果\n\n```shell\n视图函数响应之前\n视图函数\n视图函数响应之后\n127.0.0.1 - - [15/Oct/2019 18:04:15] \"GET /api/product/123 HTTP/1.1\" 200 20\n```\n\n路由拦截器只对当前路由有效\n\n全局拦截器\n\n```python\n# 定义视图函数\n@api.get(\"/product/{id:int}\")  # 当路径为/api/index, 并且method为get时访问这个视图函数\ndef product(request):  # 视图函数需要两个参数，上下文ctx, request请求对象\n    print(\"视图函数\")\n    return f\"<h1>product {request.vars.id}</h1>\"\n\n\n@api.reg_pre_interceptor\ndef pre_product(request):\n    print(\"视图函数响应之前\")\n    return request\n\n\n@api.reg_post_interceptor\ndef post_product(request, response):\n    print(\"视图函数响应之后\")\n    return response\n\n\n@Gloo.reg_pre_interceptor\ndef pre(request):\n    print(\"全局响应前视图\")\n    return request\n\n\n@Gloo.reg_post_interceptor\ndef post(request, response):\n    print(\"全局响应后视图\")\n    return response\n```\n\n运行结果\n\n拦截器及视图函数执行流程\n\n```shell\n全局响应前视图\n视图函数响应之前\n视图函数\n视图函数响应之后\n全局响应后视图\n127.0.0.1 - - [15/Oct/2019 18:55:21] \"GET /api/product/123 HTTP/1.1\" 200 20\n```\n\n#### 五、上下文\n\n使用上下为程序扩展第三方功能\n\n```python\nfrom glooweb import Gloo, jsonify, Response\nimport simplejson\n\napp = Gloo()\n\n\n@app.extend(\"load\")  # 使用app.extend装饰器扩展全局上下文，name参数不传入的话默认使用函数名\ndef load(bytes_):  # 使用simplejson加载bytes类型\n    return simplejson.loads(bytes_)\n\n\napi = app.Router(\"/api\")\napp.register(api)\n\n\n@api.post(\"/index\")\ndef index(request):\n    data = api.ctx.load(request.body)  # api.ctx使用路由上下文，api.ctx找不到时会去全局上下文中找，路由上下文优先级大于全局\n    return jsonify(errno=0, data=data)\n\n\nif __name__ == '__main__':\n    app.runserver()\n```\n\n使用postman测试\n\n![glooweb07](https://images.cnblogs.com/cnblogs_com/colden/1598697/o_191124005825TIM%E5%9B%BE%E7%89%8720191124081935.png)\n\n\n\n#### 六、模板\n\nglooweb是一个专注于api接口开发的轻量web框架，已不再提供过时的模板技术。如果您要使用的话可为您的应用扩展jijia2模块。\n\n#### 七、模型\n\n模型建议使用ORM框架，[SQLALCHEMY](https://docs.sqlalchemy.org/)，glooweb对此没有做更多封装。\n\n#### 最后\n\nGloo在今后的很长一段时间里会使用和维护这个框架，如果您在使用glooweb框架时碰到了问题，或者您有一些好的建议。欢迎至件gloo88@yeah.net",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "api,web",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "glooweb",
    "package_url": "https://pypi.org/project/glooweb/",
    "platform": "",
    "project_url": "https://pypi.org/project/glooweb/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/glooweb/0.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple web framework based on WSGI protocol",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6213983,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8e45bfde94e43487094b35d67a0215d3a245f15814a3a921b3241d02906fb27",
          "md5": "49202224db5268935b161264a3f44027",
          "sha256": "f4747e6edcc1985696cfa0dba100dbd7ac02cad8a9b681949e3867c6cf30007d"
        },
        "downloads": -1,
        "filename": "glooweb-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49202224db5268935b161264a3f44027",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3142,
        "upload_time": "2019-10-12T05:18:38",
        "upload_time_iso_8601": "2019-10-12T05:18:38.214029Z",
        "url": "https://files.pythonhosted.org/packages/e8/e4/5bfde94e43487094b35d67a0215d3a245f15814a3a921b3241d02906fb27/glooweb-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4ac6d5736062d35df4ad4a2f4ee6e1e88b112f0e43d5af7122f4883ad8d7346",
          "md5": "4a3debde47069b6bcc3bf46b6edbd1fb",
          "sha256": "480479cf0a939852597bf09a86b17f96da573fb4f01dcb253658ce9d8e0d4c5c"
        },
        "downloads": -1,
        "filename": "glooweb-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4a3debde47069b6bcc3bf46b6edbd1fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4272,
        "upload_time": "2019-10-15T12:23:43",
        "upload_time_iso_8601": "2019-10-15T12:23:43.148554Z",
        "url": "https://files.pythonhosted.org/packages/f4/ac/6d5736062d35df4ad4a2f4ee6e1e88b112f0e43d5af7122f4883ad8d7346/glooweb-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1433fed4e13e1cd5bf5cf229c7e847c469232b5d6109d9fd567ffab5526bab6c",
          "md5": "f63aeb549aff6e89df6a4b187aeb64d3",
          "sha256": "d23d9abbfeacd4a21be83456fb0339126f0a992ce94c48a4319895a8489c06ff"
        },
        "downloads": -1,
        "filename": "glooweb-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f63aeb549aff6e89df6a4b187aeb64d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7495,
        "upload_time": "2019-11-24T02:13:33",
        "upload_time_iso_8601": "2019-11-24T02:13:33.265526Z",
        "url": "https://files.pythonhosted.org/packages/14/33/fed4e13e1cd5bf5cf229c7e847c469232b5d6109d9fd567ffab5526bab6c/glooweb-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa420c5fcbfce838e9f62403ca7a204c60f345044eb7a2e243ee439fa517b900",
          "md5": "adc12bc696c107dc25d5924b0360236f",
          "sha256": "1761377db026174d7fe4d23c23a2ab3ae387273507734e5580bf5496c0010376"
        },
        "downloads": -1,
        "filename": "glooweb-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "adc12bc696c107dc25d5924b0360236f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7525,
        "upload_time": "2019-11-25T09:39:25",
        "upload_time_iso_8601": "2019-11-25T09:39:25.193456Z",
        "url": "https://files.pythonhosted.org/packages/aa/42/0c5fcbfce838e9f62403ca7a204c60f345044eb7a2e243ee439fa517b900/glooweb-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2088d450259eb03f3eccd8c780554a3bb6607b61ab666472d25787662c0fcdd9",
          "md5": "c4f0af29ed82aacba952ae11a0bd24f1",
          "sha256": "782dd158080bd62dc40996d52fb86ea5d50b0e994b9abffe8b81794166b6843e"
        },
        "downloads": -1,
        "filename": "glooweb-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c4f0af29ed82aacba952ae11a0bd24f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8357,
        "upload_time": "2019-11-28T12:33:00",
        "upload_time_iso_8601": "2019-11-28T12:33:00.190575Z",
        "url": "https://files.pythonhosted.org/packages/20/88/d450259eb03f3eccd8c780554a3bb6607b61ab666472d25787662c0fcdd9/glooweb-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2088d450259eb03f3eccd8c780554a3bb6607b61ab666472d25787662c0fcdd9",
        "md5": "c4f0af29ed82aacba952ae11a0bd24f1",
        "sha256": "782dd158080bd62dc40996d52fb86ea5d50b0e994b9abffe8b81794166b6843e"
      },
      "downloads": -1,
      "filename": "glooweb-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "c4f0af29ed82aacba952ae11a0bd24f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8357,
      "upload_time": "2019-11-28T12:33:00",
      "upload_time_iso_8601": "2019-11-28T12:33:00.190575Z",
      "url": "https://files.pythonhosted.org/packages/20/88/d450259eb03f3eccd8c780554a3bb6607b61ab666472d25787662c0fcdd9/glooweb-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}