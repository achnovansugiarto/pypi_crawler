{
  "info": {
    "author": "Morepath developers",
    "author_email": "morepath@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": ".. image:: https://github.com/morepath/more.jwtauth/workflows/CI/badge.svg?branch=master\n   :target: https://github.com/morepath/more.jwtauth/actions?workflow=CI\n   :alt: CI Status\n\n.. image:: https://img.shields.io/pypi/v/more.jwtauth.svg\n  :target: https://pypi.org/project/more.jwtauth/\n\n.. image:: https://img.shields.io/pypi/pyversions/more.jwtauth.svg\n  :target: https://pypi.org/project/more.jwtauth/\n\n\nmore.jwtauth: JWT Authentication integration for Morepath\n=========================================================\n\nOverview\n--------\n\nThis is a Morepath_ authentication extension for the JSON Web Token (JWT)\nAuthentication.\n\nFor more information about JWT, see:\n\n-  `JSON Web Token draft`_ - the official JWT draft\n-  `Auth with JSON Web Tokens`_ - an interesting blog post by José Padilla\n\nTo access resources using JWT Access Authentication, the client must have\nobtained a JWT to make signed requests to the server.\nThe Token can be opaque to client, although, unless it is encrypted,\nthe client can read the claims made in the token.\n\nJWT validates the authenticity of the claimset using the signature.\n\nThis plugin uses the `PyJWT library`_ from José Padilla for verifying JWTs.\n\nIntroduction\n------------\n\nThe general workflow of JWT Access Authentication:\n    * After the client has sent the login form we check if the user\n      exists and if the password is valid.\n    * In this case more.jwtauth generates a JWT token including all\n      information in a claim set and send it back to the client inside\n      the HTTP authentication header.\n    * The client stores it in some local storage and send it back in the\n      authentication header on every request.\n    * more.jwtauth validates the authenticity of the claim set using the\n      signature included in the token.\n    * The logout should be handled by the client by removing the token and\n      making some cleanup depending on the implementation.\n\nYou can include all necessary information about the identity in the token\nso JWT Access Authentication can be used by a stateless service e.g. with\nexternal password validation.\n\n\nRequirements\n------------\n\n-  Python (3.6, 3.7, 3.8, 3.9)\n-  morepath (>= 0.19)\n-  PyJWT (2.4.0)\n-  optional: cryptography (>= 3.3.2)\n\n.. Note::\n   If you want to use another algorithm than HMAC (HS*), you need to install\n   cryptography.\n   On some systems this can be a little tricky. Please follow the instructions\n   in https://cryptography.io/en/latest/installation.\n\n\nInstallation\n------------\n\nYou can use pip for installing more.jwtauth:\n\n* ``pip install -U more.jwtauth[crypto]`` - for installing with cryptography\n* ``pip install -U more.jwtauth`` - installing without cryptography\n\n\nUsage\n-----\n\nFor a basic setup just set the necessary settings including a key or key file\nand pass them to JWTIdentityPolicy:\n\n.. code-block:: python\n\n    import morepath\n    from more.jwtauth import JWTIdentityPolicy\n\n\n    class App(morepath.App):\n        pass\n\n\n    @App.setting_section(section=\"jwtauth\")\n    def get_jwtauth_settings():\n        return {\n            # Set a key or key file.\n            'master_secret': 'secret',\n\n            # Adjust the settings which you need.\n            'leeway': 10\n        }\n\n\n    @App.identity_policy()\n    def get_identity_policy(settings):\n        # Get the jwtauth settings as a dictionary.\n        jwtauth_settings = settings.jwtauth.__dict__.copy()\n\n        # Pass the settings dictionary to the identity policy.\n        return JWTIdentityPolicy(**jwtauth_settings)\n\n\n    @App.verify_identity()\n    def verify_identity(identity):\n        # As we use a token based authentication\n        # we can trust the claimed identity.\n        return True\n\nThe login can be done in the standard Morepath way. You can add extra\ninformation about the identity, which will be stored in the JWT token\nand can be accessed through the morepath.Identity object:\n\n.. code-block:: python\n\n    class Login:\n        pass\n\n\n    @App.path(model=Login, path='login')\n    def get_login():\n        return Login()\n\n\n    @App.view(model=Login, request_method='POST')\n    def login(self, request):\n        username = request.POST['username']\n        password = request.POST['password']\n\n        # Here you get some extra user information.\n        email = request.POST['email']\n        role = request.POST['role']\n\n        # Do the password validation.\n        if not user_has_password(username, password):\n            raise HTTPProxyAuthenticationRequired('Invalid username/password')\n\n        @request.after\n        def remember(response):\n            # We pass the extra info to the identity object.\n            identity = morepath.Identity(username, email=email, role=role)\n            request.app.remember_identity(response, request, identity)\n\n        return \"You're logged in.\"  # or something more fancy\n\nDon't use reserved claim names as \"iss\", \"aud\", \"exp\", \"nbf\", \"iat\", \"jti\",\n\"refresh_until\", \"nonce\" or the user_id_claim (default: \"sub\", see settings_).\nThey will be silently ignored.\n\nAdvanced:\n    For testing or if we want to use some methods of the JWTIdentityPolicy\n    class directly we can pass the settings as arguments to the class:\n\n    .. code-block:: python\n\n        identity_policy = JWTIdentityPolicy(\n            master_secret='secret',\n            leeway=10\n        )\n\n\nRefreshing the token\n--------------------\n\nThere are some risks related with using long-term tokens:\n\n* If you use a stateless solution the token contains user data which\n  could not be up-to-date anymore.\n* If a token get compromised there's no way to destroy sessions server-side.\n\nA solution is to use short-term tokens and refresh them either just before\nthey expire or even after until the ``refresh_until`` claim not expires.\n\nTo help you with this more.jwtauth has a refresh API, which uses 4 settings:\n\n* ``allow_refresh``: Enables the token refresh API when True.\n    Default is False\n* ``refresh_delta``: The time delta in which the token can be refreshed\n    considering the leeway.\n    Default is 7 days. When None you can always refresh the token.\n* ``refresh_nonce_handler``: Either dotted path to callback function or the\n    callback function itself, which receives the current request and the userid\n    as arguments and returns a nonce which will be validated before refreshing.\n    When None no nonce will be created or validated for refreshing.\n* ``verify_expiration_on_refresh``: If False, expiration_delta for the JWT\n    token will not be checked during refresh. Otherwise you can refresh the\n    token only if it's not yet expired. Default is False.\n\nWhen refreshing is enabled by setting ``refresh_delta`` the token can get\n2 additional claims:\n\n* ``refresh_until``: Timestamp until which the token can be refreshed.\n* ``nonce``: The nonce which was generated by ``refresh_nonce_handler``.\n\nSo when you want to refresh your token, either because it has expires or\njust before, you should adjust your jwtauth settings:\n\n.. code-block:: python\n\n    @App.setting_section(section=\"jwtauth\")\n    def get_jwtauth_settings():\n        return {\n            # Set a key or key file.\n            'master_secret': 'secret',\n            'allow_refresh': True,\n            'refresh_delta': 300,\n            'refresh_nonce_handler': 'yourapp.handler.refresh_nonce_handler'\n        }\n\nAlternatively you can set the ``refresh_nonce_handler`` by decorating\na closure which returns the handler function:\n\n.. code-block:: python\n\n  from .app import App\n  from .model import User\n\n\n  @App.setting(section=\"jwtauth\", name=\"refresh_nonce_handler\")\n  def get_handler():\n    def refresh_nonce_handler(request, userid):\n        # This returns a nonce from the user endity\n        # which can just be an UUID you created before.\n        return User.get(username=userid).nonce\n      return refresh_nonce_handler\n\nAfter you can send a request to the refresh end-point for refreshing the token:\n\n.. code-block:: python\n\n  from  morepath import Identity\n  from more.jwtauth import (\n      verify_refresh_request, InvalidTokenError, ExpiredSignatureError\n  )\n\n  from .app import App\n  from .model import User\n\n\n  class Refresh:\n      pass\n\n\n  @App.path(model=Refresh, path='refresh')\n  def get_refresh():\n      return Refresh()\n\n\n  @App.view(model=Refresh)\n  def refresh(self, request):\n      try:\n          # Verifies if we're allowed to refresh the token.\n          # In this case returns the userid.\n          # If not raises exceptions based on InvalidTokenError.\n          # If expired this is a ExpiredSignatureError.\n          username = verify_refresh_request(request)\n      except ExpiredSignatureError:\n          @request.after\n          def expired_nonce_or_token(response):\n              response.status_code = 403\n          return \"Your session has expired.\"\n      except InvalidTokenError:\n          @request.after\n          def invalid_token(response):\n              response.status_code = 403\n          return \"Could not refresh your token.\"\n      else:\n          # get user info from the database to update the claims\n          User.get(username=username)\n\n          @request.after\n          def remember(response):\n              # create the identity with the userid and updated user info\n              identity = Identity(\n                  username, email=user.email, role=user.role\n              )\n              # create the updated token and set it in the response header\n              request.app.remember_identity(response, request, identity)\n\n          return \"Token sucessfully refreshed.\"\n\nSo now on every token refresh the user data gets updated.\n\nWhen using the refresh_nonce_handler, you can just change the nonce\nif the token gets compromised, e.g. by storing a new UUID in the user\nendity, and the existing tokens will not be refreshed anymore.\n\nExceptions\n~~~~~~~~~~\n\nWhen refreshing the token fails, an exception is raised.\nAll exceptions are subclasses of ``more.jwtauth.InvalidTokenError``,\nso you can catch them with ``except InvalidTokenError``.\nFor each exception a description of the failure is added.\nThe following exceptions could be raised:\n\n* **InvalidTokenError**: A plain InvalidTokenError is used when the\n  refreshing API is disabled, the JWT token could not be found or\n  the refresh nonce is invalid.\n* **ExpiredSignatureError**: when the ``refresh_until`` claim has expired\n  or when the JWT token has expired in case ``verify_expiration_on_refresh`` is enabled.\n* **MissingRequiredClaimError**: When the ``refresh_until`` claim is\n  missing if a ``refresh_delta`` was provided or when the ``nonce``\n  claim is missing if ``refresh_nonce_handler`` is in use.\n* **DecodeError**: When the JWT token could not be decoded.\n\n\nSettings\n--------\n\nThere are some settings that you can override. Here are all the defaults:\n\n.. code-block:: python\n\n    @App.setting_section(section=\"jwtauth\")\n    def get_jwtauth_settings():\n        return {\n            'master_secret': None,\n            'private_key': None,\n            'private_key_file': None,\n            'public_key': None,\n            'public_key_file': None,\n            'algorithm': \"HS256\",\n            'expiration_delta': datetime.timedelta(minutes=30),\n            'leeway': 0,\n            'allow_refresh': False,\n            'refresh_delta': timedelta(days=7),\n            'refresh_nonce_handler': None,\n            'verify_expiration_on_refresh': False,\n            'issuer': None,\n            'auth_header_prefix': \"JWT\",\n            'userid_claim': \"sub\"\n        }\n\nThe following settings are available:\n\nmaster_secret\n  A secret known only by the server, used for the default HMAC (HS*) algorithm.\n  Default is None.\n\nprivate_key\n  An Elliptic Curve or an RSA private_key used for the EC (EC*)\n  or RSA (PS*/RS*) algorithms. Default is None.\n\nprivate_key_file\n  A file holding an Elliptic Curve or an RSA encoded (PEM/DER) private_key.\n  Default is None.\n\npublic_key\n  An Elliptic Curve or an RSA public_key used for the EC (EC*) or RSA (PS*/RS*)\n  algorithms. Default is None.\n\npublic_key_file\n  A file holding an Elliptic Curve or an RSA encoded (PEM/DER) public_key.\n  Default is None.\n\nalgorithm\n  The algorithm used to sign the key.\n  Defaults is HS256.\n\nexpiration_delta\n  Time delta from now until the token will expire. Set to None to disable.\n  This can either be a datetime.timedelta or the number of seconds.\n  Default is 30 minutes.\n\nleeway\n  The leeway, which allows you to validate an expiration time which is in the\n  past, but not very far. To use either as a datetime.timedelta or the number\n  of seconds. Defaults is 0.\n\nallow_refresh\n  Setting to True enables the refreshing API.\n  Default is False\n\nrefresh_delta\n  A time delta in which the token can be refreshed considering the leeway.\n  This can either be a datetime.timedelta or the number of seconds.\n  Default is 7 days. When None you can always refresh the token.\n\nrefresh_nonce_handler\n  Dotted path to callback function, which receives the userid as argument and\n  returns a nonce which will be validated before refreshing.\n  When None no nonce will be created or validated for refreshing.\n  Default is None.\n\nverify_expiration_on_refresh\n  If False, expiration_delta for the JWT token will not be checked during\n  refresh. Otherwise you can refresh the token only if it's not yet expired.\n  Default is False.\n\nissuer\n  This is a string that will be checked against the iss claim of the token.\n  You can use this e.g. if you have several related apps with exclusive user\n  audience. Default is None (do not check iss on JWT).\n\nauth_header_prefix\n  You can modify the Authorization header value prefix that is required to be\n  sent together with the token. The default value is JWT.\n  Another common value used for tokens is Bearer.\n\nuserid_claim\n  The claim, which contains the user id.\n  The default claim is 'sub'.\n\nThe library takes either a master_secret or private_key/public_key pair.\nIn the later case the algorithm must be an EC*, PS* or RS* version.\n\n\nAlgorithms\n----------\n\nThe JWT spec supports several algorithms for cryptographic signing.\nThis library currently supports:\n\nHS256\n   HMAC using SHA-256 hash algorithm (default)\n\nHS384\n   HMAC using SHA-384 hash algorithm\n\nHS512\n   HMAC using SHA-512 hash algorithm\n\nES256 [1]_\n   ECDSA signature algorithm using SHA-256 hash algorithm\n\nES384 [1]_\n   ECDSA signature algorithm using SHA-384 hash algorithm\n\nES512 [1]_\n   ECDSA signature algorithm using SHA-512 hash algorithm\n\nPS256 [1]_\n   RSASSA-PSS signature using SHA-256 and MGF1 padding with SHA-256\n\nPS384 [1]_\n   RSASSA-PSS signature using SHA-384 and MGF1 padding with SHA-384\n\nPS512 [1]_\n   RSASSA-PSS signature using SHA-512 and MGF1 padding with SHA-512\n\nRS256 [1]_\n   RSASSA-PKCS1-v1_5 signature algorithm using SHA-256 hash algorithm\n\nRS384 [1]_\n   RSASSA-PKCS1-v1_5 signature algorithm using SHA-384 hash algorithm\n\nRS512 [1]_\n   RSASSA-PKCS1-v1_5 signature algorithm using SHA-512 hash algorithm\n\n.. [1] The marked algorithms require more.jwtauth to be installed\n       with its ``crypto`` dependencies::\n\n         $ pip install -U more.jwtauth[crypto]\n\n       See Installation_ for details. In case of problems be sure\n       to have read the note in the Requirements_ section.\n\n\nDeveloping more.jwtauth\n=======================\n\nInstall more.jwtauth for development\n------------------------------------\n\nClone more.jwtauth from github::\n\n.. code-block:: console\n\n  $ git clone git@github.com:morepath/more.jwtauth.git\n\nIf this doesn't work and you get an error 'Permission denied (publickey)',\nyou need to upload your ssh public key to github_.\n\nThen go to the more.jwtauth directory::\n\n.. code-block:: console\n\n  $ cd more.jwtauth\n\nMake sure you have virtualenv_ installed.\n\nCreate a new virtualenv for Python 3 inside the more.jwtauth directory::\n\n.. code-block:: console\n\n  $ virtualenv -p python3 env/py3\n\nActivate the virtualenv::\n\n.. code-block:: console\n\n  $ source env/py3/bin/activate\n\nMake sure you have recent setuptools and pip installed::\n\n.. code-block:: console\n\n  $ pip install -U setuptools pip\n\nInstall the various dependencies and development tools from\ndevelop_requirements.txt::\n\n.. code-block:: console\n\n  $ pip install -Ur develop_requirements.txt\n\nFor upgrading the requirements just run the command again.\n\n.. note::\n\n   The following commands work only if you have the virtualenv activated.\n\nInstall pre-commit hook for Black integration\n---------------------------------------------\n\nWe're using Black_ for formatting the code and it's recommended to\ninstall the `pre-commit hook`_ for Black integration before committing::\n\n  $ pre-commit install\n\n.. _`pre-commit hook`: https://black.readthedocs.io/en/stable/version_control_integration.html\n\nRunning the tests\n-----------------\n\nYou can run the tests using `py.test`_::\n\n.. code-block:: console\n\n  $ py.test\n\nTo generate test coverage information as HTML do::\n\n.. code-block:: console\n\n  $ py.test --cov --cov-report html\n\nYou can then point your web browser to the ``htmlcov/index.html`` file\nin the project directory and click on modules to see detailed coverage\ninformation.\n\n.. _`py.test`: http://pytest.org/latest/\n\nBlack\n-----\n\nTo format the code with the `Black Code Formatter`_ run in the root directory::\n\n  $ black .\n\nBlack has also `integration`_ for the most popular editors.\n\n.. _`Black Code Formatter`: https://black.readthedocs.io\n.. _`integration`: https://black.readthedocs.io/en/stable/editor_integration.html\n\nVarious checking tools\n----------------------\n\nflake8_ is a tool that can do various checks for common Python\nmistakes using pyflakes_, check for PEP8_ style compliance and\ncan do `cyclomatic complexity`_ checking. To do pyflakes and pep8\nchecking do::\n\n.. code-block:: console\n\n  $ flake8 more.jwtauth\n\nTo also show cyclomatic complexity, use this command::\n\n.. code-block:: console\n\n  $ flake8 --max-complexity=10 more.jwtauth\n\nTox\n---\n\nWith tox you can test Morepath under different Python environments.\n\nWe have Travis continuous integration installed on Morepath's github\nrepository and it runs the same tox tests after each checkin.\n\nFirst you should install all Python versions which you want to\ntest. The versions which are not installed will be skipped. You should\nat least install Python 3.7 which is required by flake8, coverage and\ndoctests.\n\nOne tool you can use to install multiple versions of Python is pyenv_.\n\nTo find out which test environments are defined for Morepath in tox.ini run::\n\n.. code-block:: console\n\n  $ tox -l\n\nYou can run all tox tests with::\n\n.. code-block:: console\n\n  $ tox\n\nYou can also specify a test environment to run e.g.::\n\n.. code-block:: console\n\n  $ tox -e py37\n  $ tox -e pep8\n  $ tox -e coverage\n\n\n.. _Morepath: http://morepath.readthedocs.org\n.. _JSON Web Token draft:\n    http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html\n.. _Auth with JSON Web Tokens:\n    http://jpadilla.com/post/73791304724/auth-with-json-web-tokens\n.. _PyJWT library: http://github.com/progrium/pyjwt\n.. _github: https://help.github.com/articles/generating-an-ssh-key\n.. _virtualenv: https://pypi.python.org/pypi/virtualenv\n.. _flake8: https://pypi.python.org/pypi/flake8\n.. _pyflakes: https://pypi.python.org/pypi/pyflakes\n.. _pep8: http://www.python.org/dev/peps/pep-0008/\n.. _`cyclomatic complexity`:\n    https://en.wikipedia.org/wiki/Cyclomatic_complexity\n.. _pyenv: https://github.com/yyuu/pyenv\n\n\nCHANGES\n=======\n\n0.13 (2022-06-19)\n-----------------\n\n- Remove obsolete decoding of encoded token.\n\n- Upgrade PyJWT and Cryptography dependencies.\n\n- Drop support for Python 3.5.\n\n- Add support for Python 3.9.\n\n- Use GitHub Actions for CI.\n\n\n0.12 (2020-04-26)\n-----------------\n\n- **Removed**: Removed support for Python 2 and Python 3.4.\n  \n  You have to upgrade to Python 3 if you want to use this version.\n\n- Added support for Python 3.7 and 3.8 and PyPy 3.6.\n\n- Make Python 3.7 the default testing environment.\n\n- Upgrade PyJWT to version 1.7.1 and cryptography to version 2.9.2.\n\n- Add integration for the Black code formatter.\n\n\n0.11 (2018-01-18)\n-----------------\n\n- Remove support for Python 3.3 and add support for Python 3.6.\n- Upgrade PyJWT to version 1.5.3 and cryptography to version 2.1.4.\n\n\n0.10 (2017-12-08)\n-----------------\n\n- **Breaking:** Add request parameter to refresh_nonce_handler (see issue `#8`_).\n\n.. _#8: https://github.com/morepath/more.jwtauth/issues/8\n\n\n0.9 (2017-03-02)\n----------------\n\n- **New:** Add an API to refresh the JWT token (see issue `#6`_).\n\n  This implement adding 4 new settings:\n\n  * ``allow_refresh``: Enables the token refresh API when True.\n  * ``refresh_delta``: The time delta in which the token can be refreshed\n    considering the leeway.\n  * ``refresh_nonce_handler``: Dotted path to callback function, which receives\n    the userid as argument and returns a nonce which will be validated before\n    refreshing.\n  * ``verify_expiration_on_refresh``: If False, expiration_delta for the JWT\n    token will not be checked during refresh.\n    Otherwise you can refresh the token only if it's not yet expired.\n\n  It also adds 2 claims to the token when refreshing is enabled:\n\n  * ``refresh_until``: Timestamp until which the token can be refreshed.\n  * ``nonce``: The nonce which was returned by ``refresh_nonce_handler``.\n\n  For details see README.rst.\n\n- **Removed:** The ``verify_expiration`` setting has been removed as it was\n  mainly for custom handling of token refreshing, which is now obsolete.\n\n- Pass algorithm explicit to ``jwt.decode()`` to avoid some vulnerabilities.\n  For details see the blog post by Tim McLean about some\n  \"`Critical vulnerabilities in JSON Web Token libraries`_\".\n\n- Allow expiration_delta and leeway as number of seconds in addition to\n  datetime.timedelta.\n\n- Some code cleanup and refactoring.\n\n.. _#6: https://github.com/morepath/more.jwtauth/issues/6\n.. _Critical vulnerabilities in JSON Web Token libraries:\n  https://www.chosenplaintext.ca/2015/03/31/jwt-algorithm-confusion.html\n\n\n0.8 (2016-10-21)\n----------------\n\n- We now use virtualenv and pip instead of buildout to set up the\n  development environment. A development section has been\n  added to the README accordingly.\n- Review and optimize the tox configuration.\n- Upgrade to PyJWT 1.4.2 and Cryptography 1.5.2.\n\n\n0.7 (2016-07-20)\n----------------\n\n- Upgrade to Morepath 0.15.\n- Upgrade to PyJWT 1.4.1 and Cryptography 1.4.\n- Add testenv for Python 3.5 and make it the default test environment.\n- Change author to \"Morepath developers\".\n- Clean up classifiers.\n\n\n0.6 (2016-05-19)\n----------------\n\n- Make Cryptography optional.\n\n  **Breaking Change:** For using other algorithms than HMAC you now need\n  to install the ``crypto`` dependencies explicitly. Read the note in the\n  Requirements section and the new Installation section of README.rst.\n\n- Add an Installation section to the README.\n- Refactor the cryptography test suite.\n\n\n0.5 (2016-04-25)\n----------------\n\n- Adding some tests.\n- Increase coverage to 100%.\n- Add travis-ci and tox integration.\n- Some clean-up.\n- Upgrade to Morepath 0.14.\n- Some improvements to the setup and release workflow.\n\n\n\n0.4 (2016-04-13)\n----------------\n\n- Upgrade to Morepath 0.13.2 and update the tests.\n- Upgrade PyJWT to 1.3.0 and cryptography to 1.3.1.\n- Make it a PyPI package and release it. Fixes Issue #1.\n\n\n0.3 (2016-04-13)\n----------------\n\n- Upgrade PyJWT to 1.4.0 and cryptography to 0.9.1.\n- Python 3.2 is no longer a supported platform. This version of Python is rarely used.\n  PyUsers affected by this should upgrade to 3.3+.\n- Some cleanup.\n\n0.2 (2015-06-29)\n----------------\n\n- Integrate the set_jwt_auth_header function into the identity policy as remember method.\n\n- Add support for PS256, PS384, and PS512 algorithms.\n\n- Pass settings directly as arguments to the JWTIdentityPolicy class with the possibility\n  to override them with Morepath settings using the method introduced in Morepath 0.11.\n\n- Remove JwtApp as now we use JWTIdentityPolicy directly without inherit from JwtApp.\n\n- Add a Introduction and Usage section to README.\n\n- Integrate all functions as methods in the JWTIdentityPolicy Class.\n\n- Refactor the test suite.\n\n\n0.1 (2015-04-15)\n----------------\n\n- Initial public release.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morepath/more.jwtauth",
    "keywords": "morepath JWT identity authentication",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "more.jwtauth",
    "package_url": "https://pypi.org/project/more.jwtauth/",
    "platform": null,
    "project_url": "https://pypi.org/project/more.jwtauth/",
    "project_urls": {
      "Homepage": "https://github.com/morepath/more.jwtauth"
    },
    "release_url": "https://pypi.org/project/more.jwtauth/0.13/",
    "requires_dist": [
      "morepath (>=0.19)",
      "PyJWT (==2.4.0)",
      "pytest-cov ; extra == 'coverage'",
      "cryptography (>=3.3.2) ; extra == 'crypto'",
      "black (==22.3.0) ; extra == 'lint'",
      "flake8 (==4.0.1) ; extra == 'lint'",
      "pyupgrade (==2.34.0) ; extra == 'lint'",
      "isort (==5.10.1) ; extra == 'lint'",
      "pytest (>=2.9.1) ; extra == 'test'",
      "pytest-remove-stale-bytecode ; extra == 'test'",
      "WebTest (>=2.0.14) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "JWT Access Auth Identity Policy for Morepath",
    "version": "0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14179735,
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b837aa11de696929027e30c60d957cab21b4986d55d27fa72da160c279fe4ca",
          "md5": "575c967de489402573fed09304f6a901",
          "sha256": "ccc8567e5899fc7567a1440787054300112f70573e362d9e48cb3adc07ac7fdd"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "575c967de489402573fed09304f6a901",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 32056,
        "upload_time": "2017-12-08T21:49:52",
        "upload_time_iso_8601": "2017-12-08T21:49:52.515174Z",
        "url": "https://files.pythonhosted.org/packages/7b/83/7aa11de696929027e30c60d957cab21b4986d55d27fa72da160c279fe4ca/more.jwtauth-0.10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ec839574650486586f734246461a5ce7e00299a083cbb8bc0bac4fc04b6ae81",
          "md5": "4d6dff68727531b9b00126b5fdf7ca8f",
          "sha256": "b9714e2a5385c3232c5e2d259e965eb8ca74b865c16863cbd798e64cadafbf7c"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "4d6dff68727531b9b00126b5fdf7ca8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29892,
        "upload_time": "2017-12-08T21:49:55",
        "upload_time_iso_8601": "2017-12-08T21:49:55.399858Z",
        "url": "https://files.pythonhosted.org/packages/5e/c8/39574650486586f734246461a5ce7e00299a083cbb8bc0bac4fc04b6ae81/more.jwtauth-0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2b6324c784d7b31e1ed6b665f9b18da2bf89749cdf0ec8a2bc224c8bc33a6f1",
          "md5": "029791e3f66ba3d149d13c038ef28c21",
          "sha256": "40d01e0c048ae5f9a91730ada9aae1c9290c36b936f8a69b0f5bece3ec21f8fb"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "029791e3f66ba3d149d13c038ef28c21",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 32157,
        "upload_time": "2018-01-18T14:24:09",
        "upload_time_iso_8601": "2018-01-18T14:24:09.318173Z",
        "url": "https://files.pythonhosted.org/packages/d2/b6/324c784d7b31e1ed6b665f9b18da2bf89749cdf0ec8a2bc224c8bc33a6f1/more.jwtauth-0.11-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cbb32abeaec162e67366c8afa26adc83631e96e64b0fcd39d283bf8bb3e2b09",
          "md5": "926cbdf648ee062936bb34035cc90c64",
          "sha256": "58a4492de60a90b4621248369a1fbde4f91c37408ee28ccea059beb2a735d6ff"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "926cbdf648ee062936bb34035cc90c64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30039,
        "upload_time": "2018-01-18T14:24:11",
        "upload_time_iso_8601": "2018-01-18T14:24:11.551286Z",
        "url": "https://files.pythonhosted.org/packages/2c/bb/32abeaec162e67366c8afa26adc83631e96e64b0fcd39d283bf8bb3e2b09/more.jwtauth-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98aadc957abcd835f7e94759eb2efe0cb882d953fa56409cbb3f9fff414c361f",
          "md5": "8c21252be97ccb1a76da90648afa434b",
          "sha256": "d3deca774e7a65817ebe335f84dfcca89aeb748936fc18647bba38855f545ffe"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c21252be97ccb1a76da90648afa434b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24886,
        "upload_time": "2020-04-26T12:23:07",
        "upload_time_iso_8601": "2020-04-26T12:23:07.720544Z",
        "url": "https://files.pythonhosted.org/packages/98/aa/dc957abcd835f7e94759eb2efe0cb882d953fa56409cbb3f9fff414c361f/more.jwtauth-0.12-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e91fe47e5d973d9e85a99e7001c63764d3dc9c3b6c918d59d678ffe5ca8012f2",
          "md5": "32d76885184a9b4ba606c3a45abfd56c",
          "sha256": "474ed044e1ea358063f924ef1525dfb3f0537c5c8a753067908404114a46da8b"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "32d76885184a9b4ba606c3a45abfd56c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31723,
        "upload_time": "2020-04-26T12:23:09",
        "upload_time_iso_8601": "2020-04-26T12:23:09.820227Z",
        "url": "https://files.pythonhosted.org/packages/e9/1f/e47e5d973d9e85a99e7001c63764d3dc9c3b6c918d59d678ffe5ca8012f2/more.jwtauth-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9df54d68aec01fda73f79d6ab23cc5a52016214c096cf00bd1b800d439d2b69",
          "md5": "c25d7e2a8d20b60b378bd5fd42e06245",
          "sha256": "5d5ee5702caf829cdd4b61b2c33682249ba61bc1b2ce3c57aa3ab66724ba9c61"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c25d7e2a8d20b60b378bd5fd42e06245",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25043,
        "upload_time": "2022-06-19T18:47:36",
        "upload_time_iso_8601": "2022-06-19T18:47:36.085121Z",
        "url": "https://files.pythonhosted.org/packages/d9/df/54d68aec01fda73f79d6ab23cc5a52016214c096cf00bd1b800d439d2b69/more.jwtauth-0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23d676a10a86cedbc60d331d97fe2c4cbabf0f3f3c31af17cc178e8f87e8c0f3",
          "md5": "0267f898d0581f2ec2926f8472f1bef1",
          "sha256": "b0dbf994384356212e152e2f2a1521f000d58495a5c2eaf7620e1b95e8fb68c9"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "0267f898d0581f2ec2926f8472f1bef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31304,
        "upload_time": "2022-06-19T18:47:39",
        "upload_time_iso_8601": "2022-06-19T18:47:39.496894Z",
        "url": "https://files.pythonhosted.org/packages/23/d6/76a10a86cedbc60d331d97fe2c4cbabf0f3f3c31af17cc178e8f87e8c0f3/more.jwtauth-0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e3ae5afbc78f096872e2a620a86b7dcd6cfa0fef64708ce1f15cee24d8e7bf6",
          "md5": "ed669a7d7ead9666901b882861523d9f",
          "sha256": "c568507e8a98d80639ee46f7b03db68358728b94935a3305a2821431020b12e9"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed669a7d7ead9666901b882861523d9f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19036,
        "upload_time": "2016-04-13T20:00:35",
        "upload_time_iso_8601": "2016-04-13T20:00:35.377222Z",
        "url": "https://files.pythonhosted.org/packages/3e/3a/e5afbc78f096872e2a620a86b7dcd6cfa0fef64708ce1f15cee24d8e7bf6/more.jwtauth-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdf1066dd40defae7963fc98ed9dc7654102033244c7b8ff299f16f1cbfab392",
          "md5": "b9140ba1db5b3eda34030d6a63ee3991",
          "sha256": "bd311fc1c14093cb08803f61dd111d12945321cd4b2084da51c5f9ae23fe6458"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b9140ba1db5b3eda34030d6a63ee3991",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19773,
        "upload_time": "2016-04-13T20:00:50",
        "upload_time_iso_8601": "2016-04-13T20:00:50.076659Z",
        "url": "https://files.pythonhosted.org/packages/fd/f1/066dd40defae7963fc98ed9dc7654102033244c7b8ff299f16f1cbfab392/more.jwtauth-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8a72fa16431b5466b705aa8e90afa51b943ef16d0d6c091e99d7f5c9fe46733",
          "md5": "7205eec79106ffd19e662be5cafdca96",
          "sha256": "1b4d8a3ee8aa92a9d0986dc2b61c938f5869425fae6844c759f41f32d205a7b8"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7205eec79106ffd19e662be5cafdca96",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 19236,
        "upload_time": "2016-04-25T19:57:48",
        "upload_time_iso_8601": "2016-04-25T19:57:48.460186Z",
        "url": "https://files.pythonhosted.org/packages/d8/a7/2fa16431b5466b705aa8e90afa51b943ef16d0d6c091e99d7f5c9fe46733/more.jwtauth-0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44ef534546c5401dc0399ef4773ccfb64982a520f8fbe3a68e91258dcf1392b2",
          "md5": "63b11cdffe294c8452dcb61de250e172",
          "sha256": "10b9e8c55fc8c46a1e81afb45be7e6def029814f72ad63e29f3825651d5fab34"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "63b11cdffe294c8452dcb61de250e172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18692,
        "upload_time": "2016-04-25T19:57:58",
        "upload_time_iso_8601": "2016-04-25T19:57:58.998158Z",
        "url": "https://files.pythonhosted.org/packages/44/ef/534546c5401dc0399ef4773ccfb64982a520f8fbe3a68e91258dcf1392b2/more.jwtauth-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8937c45744e5b4c5d94fe0779468296217d87a36344b8ff55bc9a2736828b74e",
          "md5": "0937f1e0124001890d748fc8af23a3a6",
          "sha256": "933e0236dd70afe20aac0f3be46fe3a3fc50d13916bce75bb44c60ec60000f85"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0937f1e0124001890d748fc8af23a3a6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20702,
        "upload_time": "2016-05-19T20:42:39",
        "upload_time_iso_8601": "2016-05-19T20:42:39.264921Z",
        "url": "https://files.pythonhosted.org/packages/89/37/c45744e5b4c5d94fe0779468296217d87a36344b8ff55bc9a2736828b74e/more.jwtauth-0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02186561545009288316efcf6ed09a0736418aa4ec5c5bf0ed00d8364dcad48c",
          "md5": "5d5dd70670a3f0d943fe204d2cdf90c9",
          "sha256": "367c1328ea16f30f00298a8811bc1c28823dd26c8b81a18add8c057d104f81a7"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5d5dd70670a3f0d943fe204d2cdf90c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19788,
        "upload_time": "2016-05-19T20:42:54",
        "upload_time_iso_8601": "2016-05-19T20:42:54.548284Z",
        "url": "https://files.pythonhosted.org/packages/02/18/6561545009288316efcf6ed09a0736418aa4ec5c5bf0ed00d8364dcad48c/more.jwtauth-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd648a7afa46433ed7e84d1ee2c6da56145d315889fa4f5faf83c829809c5993",
          "md5": "67fb1500dbe8645d0cf68edca71f3c4b",
          "sha256": "f79654282e026baebb507e160e9386102a0f3183f8ab3ff546be80179f0ad2b1"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67fb1500dbe8645d0cf68edca71f3c4b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20695,
        "upload_time": "2016-07-20T20:02:43",
        "upload_time_iso_8601": "2016-07-20T20:02:43.521760Z",
        "url": "https://files.pythonhosted.org/packages/fd/64/8a7afa46433ed7e84d1ee2c6da56145d315889fa4f5faf83c829809c5993/more.jwtauth-0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1fa04733328852d85fbec500d0d8dfd4c9173e18eb3f1c666f085a52ac47acc",
          "md5": "94b251bd7eba084474d67e7881e461c6",
          "sha256": "f46bac4eccba23a46e4b540f4c4f2fd6a50a21692bdd5cfb13ac863164197beb"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "94b251bd7eba084474d67e7881e461c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19769,
        "upload_time": "2016-07-20T20:02:50",
        "upload_time_iso_8601": "2016-07-20T20:02:50.687441Z",
        "url": "https://files.pythonhosted.org/packages/d1/fa/04733328852d85fbec500d0d8dfd4c9173e18eb3f1c666f085a52ac47acc/more.jwtauth-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44c90878d94c71cfa8c3f298e41825647c69ff41fc4655764f59cba1d595814a",
          "md5": "39cfbdd861e5bfb38da62d3873038a7f",
          "sha256": "d8e75365107dfb0c093f651f087a05db09f7926ded96d7a4228d960bb105d87a"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39cfbdd861e5bfb38da62d3873038a7f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23060,
        "upload_time": "2016-10-20T23:21:40",
        "upload_time_iso_8601": "2016-10-20T23:21:40.368126Z",
        "url": "https://files.pythonhosted.org/packages/44/c9/0878d94c71cfa8c3f298e41825647c69ff41fc4655764f59cba1d595814a/more.jwtauth-0.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "037223e731bd2e3bfc8108b63119b09b70a80eff7fcb283784fee17830c84ddb",
          "md5": "70bb346714b32c018d133e68558661f6",
          "sha256": "202328a2ab9c04e1329212ba52121d3643f3d7d8871ffe7ab8b5af447ba1ef77"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "70bb346714b32c018d133e68558661f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18957,
        "upload_time": "2016-10-20T23:21:50",
        "upload_time_iso_8601": "2016-10-20T23:21:50.397383Z",
        "url": "https://files.pythonhosted.org/packages/03/72/23e731bd2e3bfc8108b63119b09b70a80eff7fcb283784fee17830c84ddb/more.jwtauth-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3d2c3d23dd95d05fe55484ac4684d1ecbc250509d8ba201c521d7228cfc18db",
          "md5": "c2ddeb5ddd21b83827877d730cea7ee8",
          "sha256": "3abb05644fd7ae436bc7a42f9216474b9ecb27137c6a8716440b8903abc638ae"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2ddeb5ddd21b83827877d730cea7ee8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 31843,
        "upload_time": "2017-03-02T22:55:52",
        "upload_time_iso_8601": "2017-03-02T22:55:52.477321Z",
        "url": "https://files.pythonhosted.org/packages/e3/d2/c3d23dd95d05fe55484ac4684d1ecbc250509d8ba201c521d7228cfc18db/more.jwtauth-0.9-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "024918f6c05de97016f457fc578ee82198e0c6eb4ecea6e96672305fbdd3108a",
          "md5": "fd78b1148c79acaae10370b2d0920e06",
          "sha256": "b6208ec28c0afc3179c04fa43106d0fbbd24c76966086cc731b3097666d5d9b3"
        },
        "downloads": -1,
        "filename": "more.jwtauth-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "fd78b1148c79acaae10370b2d0920e06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29647,
        "upload_time": "2017-03-02T22:55:59",
        "upload_time_iso_8601": "2017-03-02T22:55:59.429389Z",
        "url": "https://files.pythonhosted.org/packages/02/49/18f6c05de97016f457fc578ee82198e0c6eb4ecea6e96672305fbdd3108a/more.jwtauth-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9df54d68aec01fda73f79d6ab23cc5a52016214c096cf00bd1b800d439d2b69",
        "md5": "c25d7e2a8d20b60b378bd5fd42e06245",
        "sha256": "5d5ee5702caf829cdd4b61b2c33682249ba61bc1b2ce3c57aa3ab66724ba9c61"
      },
      "downloads": -1,
      "filename": "more.jwtauth-0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c25d7e2a8d20b60b378bd5fd42e06245",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25043,
      "upload_time": "2022-06-19T18:47:36",
      "upload_time_iso_8601": "2022-06-19T18:47:36.085121Z",
      "url": "https://files.pythonhosted.org/packages/d9/df/54d68aec01fda73f79d6ab23cc5a52016214c096cf00bd1b800d439d2b69/more.jwtauth-0.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23d676a10a86cedbc60d331d97fe2c4cbabf0f3f3c31af17cc178e8f87e8c0f3",
        "md5": "0267f898d0581f2ec2926f8472f1bef1",
        "sha256": "b0dbf994384356212e152e2f2a1521f000d58495a5c2eaf7620e1b95e8fb68c9"
      },
      "downloads": -1,
      "filename": "more.jwtauth-0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "0267f898d0581f2ec2926f8472f1bef1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31304,
      "upload_time": "2022-06-19T18:47:39",
      "upload_time_iso_8601": "2022-06-19T18:47:39.496894Z",
      "url": "https://files.pythonhosted.org/packages/23/d6/76a10a86cedbc60d331d97fe2c4cbabf0f3f3c31af17cc178e8f87e8c0f3/more.jwtauth-0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}