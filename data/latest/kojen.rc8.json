{
  "info": {
    "author": "kohjaen",
    "author_email": "koh.jaen@yahoo.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![CI](https://github.com/kohjaen/kojen/workflows/CI/badge.svg)\n\n# Description\n\nKojen is a protocol (C++), state-machine(C++/C#/Python) and Class (C++/C# from UML) code-generation tool written in Python and existing within the Python Package Index (PyPi). Python >= 3.6.8 is supported. To install run ```python -m pip install kojen```.  \n\nThe default generated state-machine uses the fast and lightweight single-header-file-only [boost sml](https://boost-ext.github.io/sml/). It is linked to the repository as a git sub-module for an out-the-box solution. This is suitable for both embedded and PC applications using C++14 and higher.\n\nFor state-machines and software-architecture-from-UML-model : user-code is preserved within special comment tags. Should you change the name of tags that had code within them, on the next generation a new text file prepended with ```.Lostcode``` will be output next to the original source file with all the code that was lost. The main concept is that code-generation is a manually-initiated process and exists within a hand-crafted source-repository. The intention is to be able to manually program in all auto-generated state-machine / Class Diagram output source files, and preserve hand-crafted code within those files when system requirements change. Its not intended to disassociate the programmer from the code (like most CASE tools). Typically after the Design phase code-generation is done first in the initial implementation phase (and maybe a few more times until things are as they should be) and then development is done the usual way. Naturally in time further changes/additions can be done in the model (Updating the 'diagrams' first) and their changes propagated to code by generation : this also allows for updates to the design (from Model -> Code) in a non-intrusive manner. Protocols and their unit tests are the only files which require no hand-coding.\n\nUnit testing : Tests for protocols are generated, and tests for state-machines too (but those require some hand-coding, code preservation applies). The included testing framework is extremely light-weight and great for embedded (and PC) applications : [minunit](https://github.com/kohjaen/minunit) is used for this and it is also linked to the repository as a git sub-module. The original fork of minunit is a C-based single header file, but some improvements have been made (not possible with C) so it now consists of a single header and a single cpp file. It contains a test-runner which will run all registered test-suites.\n\nIt currently supports Windows/Linux/MacOS and FreeRTOS and includes multi-threading components (threads/queues/dispatchers/fixed-block-memory-allocators as well as stl-with-fixed-block-mem-allocator wrappers for no spurious heap usage and much faster STL containers) that works on all platforms by including CMake configuration files in generated outputs.\n\nMessage Queues use move-semantics and are thus platform independant and adding a new RTOS will only require adding a 'condition variable' like synchronization mechanism for that RTOS (the provided example of how it is done with FreeRTOS can be followed).\n\n# Quickstart\n## Example folder\n\nThe git repository has a fully functional example (which is used in the CI), including CMake integration. An executable is generated and that runs all unit tests. Feel free to go straight there. The example is described below.\n\n## Protocol\n### Input\nIn a folder where you will execute your project from, create the interface definition file `MyInterface.py`.\n\nIn your interface definition file `MyInterface.py` create a function `CreateInterface()` that returns a  `kojen.Interface` object. \n\nHere is an example of what is permissible in an interface. For messages, make sure each has a unique message-id (second parameter after the name in the constructor)\n```python\nfrom kojen.kojentypes import *\n\ndef CreateInterface():\n    sCustomStruct = Struct('sCustomStruct')\n    sCustomStruct.AddType('m_Member1','uint16')\n    sCustomStruct.AddType('m_Member2','uint16')\n    sCustomStruct.AddType('m_Member3','uint32')\n\n    MsgSomeCMD = Message('MsgSomeCMD',0x01)\n    MsgSomeCMD.AddType('m_Member1','uint8')\n\n    MsgSomeCMDRSP = Message('MsgSomeCMDRSP',0x02)\n    MsgSomeCMDRSP.AddStruct('mStructMember1',sCustomStruct)\n    MsgSomeCMDRSP.AddType('m_Member2','uint8')\n\n    MsgSomeREQ = Message('MsgSomeREQ',0x03)\n    MsgSomeREQ.AddType('m_Member1','uint8')\n\n    #Array of type : Not supported by ARM due to dynamic memory allocation requirements\n    MsgSomeREQRSP = Message('MsgSomeREQRSP',0x04)\n    MsgSomeREQRSP.AddStruct('mStructMember1',sCustomStruct)\n    MsgSomeREQRSP.AddType('m_Member2','uint8')\n    MsgSomeREQRSP.AddArrayOfType('mArrayMember3','double')\n\n\n    MsgSomeUnsolicitedData = Message('MsgSomeUnsolicitedData',0x05)\n    MsgSomeUnsolicitedData.AddArrayOfStruct('mStructArrayMember1',sCustomStruct)\n\n    #\n    # Includes : Enums and defines ...\n    #\n    Type = Enum(\"Type\")\n    Type.Add(\"kOne\", 0)\n    Type.Add(\"kTwo\", 1)\n\n    Revision = Enum(\"Revision\")\n    Revision.Add(\"kVersion1\", 0)\n    Revision.Add(\"kVersion2\", 1)\n    Revision.Add(\"kVersion3\", 2)\n\n    interface = Interface('IMyInterfaceIO')\n\n    interface.AddEnum(Type)\n    interface.AddEnum(Revision)\n\n    interface.AddHashDefine(\"THREE\", 3)\n    interface.AddHashDefine(\"PI\", 3.14159265359)\n\n    interface.AddStruct(sCustomStruct)\n    interface.AddMessage(MsgSomeCMD)\n    interface.AddMessage(MsgSomeCMDRSP)\n    interface.AddMessage(MsgSomeREQ)\n    interface.AddMessage(MsgSomeREQRSP)\n    interface.AddMessage(MsgSomeUnsolicitedData)\n\n    return interface\n```\n\nThen, create a file `Generate.py`.\n\n\n```python\nimport kojen.Generate as Generate\nimport os\n\nauthor = \"myname@mydomain.com\"\ngroup  = \"MY_PACKAGE\"\nbrief  = \"An example demonstrating protocol code-generation abilities.\"\nnamespacename = \"ExampleIO\"\nclassname = \"CExampleIF\"\ndeclspec = \"\" # your define for symbol export/import in C++ e.g. MY_PROJECT_API\noutputdir = os.path.join(os.path.abspath(os.path.dirname(__file__)), os.path.join(\"autogen\",\"protocol\"))\nprotocolfile = os.path.join(os.path.abspath(os.path.dirname(__file__)), \"MyInterface.py\")\nGenerate.Protocol(outputdir, protocolfile, namespacename, classname, declspec, author, group, brief)\n```\n\nExecute `Generate.py` using python. Your C++ code should be in the folder **./autogen/protocol**.\n\n> **Please note** : you may include this code in a library, and thus want to export some of the generated features.\n> Typically somewhere in a common header of your C++ code, you would have declared something like\n\n```cplusplus\n#ifdef MY_PROJECT_EXPORTS\n#\tdefine MY_PROJECT_API __declspec(dllexport)\n#else\n#\tdefine MY_PROJECT_API __declspec(dllimport)\n#endif\n```\n\n> You should thus pass **MY_PROJECT_API** as the *declspec* argument to the generator.\n\n### Output\n\nThere will be several files in the output folder.\n\n* allplatforms *(folder containing required framework files)*\n* CExampleIF.h *(contains all factories to create messages which automatically and correctly fill in the headers, as well as serialization to/from bytestreams.)\n* CExampleIF.cpp\n* CExampleIFDefines.h *(contains all enums and defines)\n* CExampleIFReceiver.h *(contains a derivable class that received fully constructed messages. Override receive functions to handle them as per need.)\n* CExampleIFReceiver.cpp\n* CExampleIFStructs.h *(contains all structs)\n* CExampleIFTests.cpp *(contains all unit tests)\n* CExampleIFTransmitter.h *(contains all functions to transmit fully constructed messages. Highly advices to use the autogenerated factories.)\n* CExampleIFTransmitter.cpp\n* MsgHeader.h\n\nThe following class diagram explains roughly where focus should be when implementing for actual integration into the real system.\n\n<!---![Image of necessary classes](kojen/docs/images/ProtocolClassDiagram.PNG) ... doesnt work on PyPi!--->\n![Image of necessary classes](https://raw.githubusercontent.com/kohjaen/kojen/master/kojen/docs/images/ProtocolClassDiagram.PNG)\n\n*IConnection* is the interface to derive from for your actual physical layer for an embedded platform. If you use boost on x86/x64, in the 'allplatforms' directory exist classes for substituting this with a TCPConnection, UDPConnection and SerialPort.\nHave a good look at the unit tests, this shows roughly how to derive from it and connect everything up, albeit creating a loopback connection, and implementing uncessary routing as the interface for the tests have a special requirement.\n\nA summary to link it up:\n* Create a derived IConnection that knows how to send and receive physical layer data.\n* Create a generated Transmitter, passing it a pointer to this connection.\n* Create a generated Receiver\n* Set the Receiver to the derived IConnection. You will then get messages in the message receiving functions...override the correct ones to handle them.\n* Use the Transmitter to send.\n\n## State Machine in C++\n### Requrements\n- Don't forget to update your git submodules when checking out.\n### Input\nThe following diagram defines (roughly) a state machine for a CD player.\n\n<!---![Image of CD Player](kojen/docs/images/StateMachine.PNG)--->\n\n![Image of necessary classes](https://raw.githubusercontent.com/kohjaen/kojen/master/kojen/docs/images/StateMachine.PNG)\n\nThis state machine can be represented by the following transition table in python (format : 'startstate', 'event', 'nextstate', 'action', 'guard'):\n\n```python\n#\n# StartState    Event                     NextState     Action                 Guard\n#\n 'StateStop',  'EventOpen',              'StateOpen',  'OnOpenDrive',         'None'\n 'StateStop',  'EventPlay',              'StatePlay',  'OnPlayTrack',         'GuardCDInside'\n 'StateOpen',  'EventOpen',              'StateStop',  'OnCloseDrive',        'None'\n 'StatePlay',  'EventPlay',              'StatePause', 'OnPause',             'None'\n 'StatePlay',  'EventEndOfTrack',        'None',       'OnPlayNextTrack',     'GuardCDHasMoreTracks'\n 'StatePlay',  'EventEndOfTrack',        'StateStop',  'OnStop',              'GuardCDHasNoMoreTracks'\n 'StatePlay',  'EventSkipNextTrack',     'None',       'OnPlayNextTrack',     'GuardCDHasMoreTracks'\n 'StatePlay',  'EventSkipPreviousTrack', 'None',       'OnPlayPreviousTrack', 'GuardCDHasPreviousTrack'\n 'StatePlay',  'EventStop',              'StateStop',  'OnStop',              'None'\n 'StatePause', 'EventPlay',              'StatePlay',  'OnPlayTrack',         'None'\n 'StatePause', 'EventAfter10Minutes',    'StateStop',  'OnStop',              'None'\n```\n\nCreate a file `Generate.py` (or add your state machine to the one already present in your project) :\n\n```python\nfrom kojen import Generate\nfrom kojen.kojentypes import *\n\n#\n# Generate Statemachine (from TransitionTable)\n#\n\n# For playing a track the tracknumber should be parameterized.\nEventPlay = Struct('EventPlay')\nEventPlay.AddType('m_track_no','uint16_t')\n\neventsinterface = Interface('params')\neventsinterface.AddStruct(EventPlay)\n\n# Optional features\neventsinterface.AddUserTag(\"StateMachineThread\", 1) # 0 = SM runs on caller thread, 1 = SM runs on its own thread. Default is 1.\neventsinterface.AddUserTag(\"Verbose\", 1)            # 0 = No printouts, 1 = printouts. Default is 1.\n\n# Transition Table.\ntransition_table = []\n#                         StartState    Event                     NextState     Action                 Guard\ntransition_table.append(['StateStop',  'EventOpen',              'StateOpen',  'OnOpenDrive',         'None'                   ])\ntransition_table.append(['StateStop',  'EventPlay',              'StatePlay',  'OnPlayTrack',         'GuardCDInside'          ]) \ntransition_table.append(['StateOpen',  'EventOpen',              'StateStop',  'OnCloseDrive',        'None'                   ]) \ntransition_table.append(['StatePlay',  'EventPlay',              'StatePause', 'OnPause',             'None'                   ])\ntransition_table.append(['StatePlay',  'EventEndOfTrack',        'None',       'OnPlayNextTrack',     'GuardCDHasMoreTracks'   ])\ntransition_table.append(['StatePlay',  'EventEndOfTrack',        'StateStop',  'OnStop',              'GuardCDHasNoMoreTracks' ])\ntransition_table.append(['StatePlay',  'EventSkipNextTrack',     'None',       'OnPlayNextTrack',     'GuardCDHasMoreTracks'   ]) \ntransition_table.append(['StatePlay',  'EventSkipPreviousTrack', 'None',       'OnPlayPreviousTrack', 'GuardCDHasPreviousTrack'])\ntransition_table.append(['StatePlay',  'EventStop',              'StateStop',  'OnStop',              'None'                   ])\ntransition_table.append(['StatePause', 'EventPlay',              'StatePlay',  'OnPlayTrack',         'None'                   ])\ntransition_table.append(['StatePause', 'EventAfter10Minutes',    'StateStop',  'OnStop',              'None'                   ])\n\nauthor = \"myname@mydomain.com\"\ngroup  = \"MY_PACKAGE\"\nbrief  = \"An example demonstrating state-machine code-generation abilities.\"\n\neventsinterface = None\nnamespacename = \"CDPlayerSM\"\nstatemachinenameprefix = \"CDPlayer\"\ndeclspec = \"\"\noutputdir = \"autogen/state_machine\"\ntemplatedir = \"\" # defaults are for 'SML'\nGenerate.StateMachine(outputdir, transition_table, eventsinterface, namespacename, statemachinenameprefix, declspec, author, group, brief, templatedir)\n```\n\nExecute `Generate.py` using python. Your C++ code should be generated to the configured folder **./autogen/state_machine**.\n\n> **Please note** : you may may wish to parameterize events in your statemachine. An event is of type `kojen.Struct` in a `kojen.Interface` object. \n> Simply follow the quickstart for protocols, creating and returning an interface : your Event structs need to have the exact same name as defined in the transition table.\n> You should thus pass your interface object  as the *eventsinterface* argument to the generator instead of **None**.\n\n### Output\n\nThere will be several files in the output folder.\n\n* allplatforms *(folder containing framework files for standalone solution)*\n* CDPlayerStateMachine.h\n* CDPlayerStateMachineImpl_SML.cpp *(all state machine code generated for boost-sml)*  \n* ICDPlayerController.h\n* Test.CDPlayerStateMachine.cpp\n\nThe following class diagram explains roughly where focus should be when implementing for test-driven development as well as for actual integration into the real system.\n\n<!---![Image of necessary classes](kojen/docs/images/StateMachineClassDiagram.PNG)--->\n![Image of necessary classes](https://raw.githubusercontent.com/kohjaen/kojen/master/kojen/docs/images/StateMachineClassDiagram.PNG)\n\nWhite classes are auto-generated, and have code-preservation features. Grey is what you have to manually create, and implement for integration into your real system.\n\nAll required functionality for your system should be implemented in the **Controller** classes, being the base-class *ICDPlayerController*, the derived *C_My_CDPlayerController* and the derived test class *CTestCDPlayerController*.\n\nIt is critical that as much of the 'business logic' is put into the base class *IPlayerController*, and tested using the *CTestCDPlayerController* in the unit-tests as possible, such that the actual integrated *C_My_CDPlayerController* uses unit-tested business logic, with a good example of how its intended to work in the unit tests...as well as for regression testing and continuous integration.\n\nAs the state-machine-implementation uses the controller base class, the following construction is valid for unit tests and system integration by substituting the correct controller:\n\n```cplusplus\n  CTestCDPlayerController controller;\n  auto* sm = ICDPlayerStateMachine::Create(controller);\n```\n\nAll state queries and event triggering are done using the ```sm``` instance.\n\nDue to the use of move-semantics, parameterized event structs are unique_ptr's (allocated in fixed-blocks for embedded applications) and thus once an event is triggered those pointers are no longer valid in the calling context.\n\n## State Machine in C#\n\nSimilar to the above example, the only difference is the Generate call to use.\n\n```python\n   ...\n   Generate.StateMachine_CSHARP(...)\n   ...\n```\n\n## State Machine in Python\n\nSimilar to the above example, the only difference is the Generate call to use.\n\n```python\n    ...\n   Generate.StateMachine_PYTHON(...)\n   ...\n```\n\n<!---\n### Deferred Events\n\nDeferred events are supported in SML and MSM state machines.\n\nIn the example CD player statemachine this use-case could be pressing 'play' whilst the tray is closing : the close button will be pressed, and the tray will start closing, however the software trigger for *EventOpen* will only occur on the interrupt signalling that the tray actuator has completed either opening/closing the tray. \nThis can take up to several seconds. In that time, the 'play' button could be pressed. \n\nThe desired behaviour would be that once the tray is closed, the CD starts playing.\n\nThis can be achieved by manually adding the correct deferred event in the *CDPlayerStateMachineImpl_SML.cpp* in the code preservation tags at the end of the transition table:\n\n```cplusplus\n/// {{{USER_DEFERRED_EVENTS}}}\n, StateOpen + event<EventPlay> / defer\n/// {{{USER_DEFERRED_EVENTS}}}\n```\n\nFor *boost::msm* this can be achieved by manually adding the correct deferred event in code preservation tags in the state struct for *StateOpen* in *CDPlayerStateMachineImpl_SML.cpp* :\n\n```cplusplus\n/// {{{USER_StateOpen_DEFERRED_EVENTS}}}\ntypedef boost::mpl::vector<EventPlay> deferred_events;\n/// {{{USER_StateOpen_DEFERRED_EVENTS}}} \n```\n\nI believe this will also allow the sequence of 'play' then 'close' to work.\n--->\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kohjaen/kojen",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kojen",
    "package_url": "https://pypi.org/project/kojen/",
    "platform": null,
    "project_url": "https://pypi.org/project/kojen/",
    "project_urls": {
      "Homepage": "https://github.com/kohjaen/kojen"
    },
    "release_url": "https://pypi.org/project/kojen/1.2.29/",
    "requires_dist": [
      "cogapp (>=3.0.0)"
    ],
    "requires_python": ">=3.6.8",
    "summary": "Code generation tools.",
    "version": "1.2.29",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17449882,
  "releases": {
    "1.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afa34d010710bfd2add35136040df2c23df92589f1b898ed757bfd8bb263d081",
          "md5": "8d9a5dcf32001ab3f461d855412bc9f5",
          "sha256": "997ef4a35049be24763e0998f3b900e33e3e7e7f4aff4bf9bbb1131726e4d00c"
        },
        "downloads": -1,
        "filename": "kojen-1.1.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d9a5dcf32001ab3f461d855412bc9f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 280759,
        "upload_time": "2022-06-14T18:28:05",
        "upload_time_iso_8601": "2022-06-14T18:28:05.935890Z",
        "url": "https://files.pythonhosted.org/packages/af/a3/4d010710bfd2add35136040df2c23df92589f1b898ed757bfd8bb263d081/kojen-1.1.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e8c0b1850f0e763e6cc55e7859c1dae5302f51bc0626475101502924c556afb",
          "md5": "472ba2dcd4802efd478e8c27bc6aaa84",
          "sha256": "a9f0dced34b3575043f590b4aed8f7ca863214ca04caac3ae22b41ab30e239bd"
        },
        "downloads": -1,
        "filename": "kojen-1.1.22.tar.gz",
        "has_sig": false,
        "md5_digest": "472ba2dcd4802efd478e8c27bc6aaa84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 94429,
        "upload_time": "2022-06-14T18:28:07",
        "upload_time_iso_8601": "2022-06-14T18:28:07.896897Z",
        "url": "https://files.pythonhosted.org/packages/8e/8c/0b1850f0e763e6cc55e7859c1dae5302f51bc0626475101502924c556afb/kojen-1.1.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e6914ac11494a564d840fa622af188378dd29eb7d8a7b3136815d2ca35d8753",
          "md5": "656119f71dd746cef758f821a385ab1c",
          "sha256": "6e56d84c23bb855a01be730eaa524d414f19adaaa305e08a3aadd5a8a1a76b1d"
        },
        "downloads": -1,
        "filename": "kojen-1.1.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "656119f71dd746cef758f821a385ab1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 281821,
        "upload_time": "2022-07-08T12:37:48",
        "upload_time_iso_8601": "2022-07-08T12:37:48.881688Z",
        "url": "https://files.pythonhosted.org/packages/4e/69/14ac11494a564d840fa622af188378dd29eb7d8a7b3136815d2ca35d8753/kojen-1.1.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f55380254190a5da7dd733c5310f729ca46cd926445211028c528de16f90ba99",
          "md5": "00c83d8f0376f982d61de839489454c9",
          "sha256": "7b595df8cb6be1b2210ee878ce72d90005ccbdf496b5c76ef085c2730b2401e4"
        },
        "downloads": -1,
        "filename": "kojen-1.1.23.tar.gz",
        "has_sig": false,
        "md5_digest": "00c83d8f0376f982d61de839489454c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 95598,
        "upload_time": "2022-07-08T12:37:50",
        "upload_time_iso_8601": "2022-07-08T12:37:50.340504Z",
        "url": "https://files.pythonhosted.org/packages/f5/53/80254190a5da7dd733c5310f729ca46cd926445211028c528de16f90ba99/kojen-1.1.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9776ba004201f1edbb4003013521973f745d1faa06dc1cf1c79cd3503604a68b",
          "md5": "1084048dc5981babed5e7ef27a57444d",
          "sha256": "afc3239b31ff17280b485ac3abe07e8534576659fff6ffbc9dc06905121b90f7"
        },
        "downloads": -1,
        "filename": "kojen-1.1.24-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1084048dc5981babed5e7ef27a57444d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 311624,
        "upload_time": "2022-07-17T16:04:47",
        "upload_time_iso_8601": "2022-07-17T16:04:47.328503Z",
        "url": "https://files.pythonhosted.org/packages/97/76/ba004201f1edbb4003013521973f745d1faa06dc1cf1c79cd3503604a68b/kojen-1.1.24-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caa2a6c491afe659bff33800e10d2ba5284fabdd8ec22bfabe68ee1587ef0b81",
          "md5": "6c688bcdc811b23bdf4ce6f8497e80bd",
          "sha256": "a4cdbb203608ff7bbaac77094ff4a843c48e713aaf77eaacc30d966ea33520ff"
        },
        "downloads": -1,
        "filename": "kojen-1.1.24.tar.gz",
        "has_sig": false,
        "md5_digest": "6c688bcdc811b23bdf4ce6f8497e80bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 94308,
        "upload_time": "2022-07-17T16:04:49",
        "upload_time_iso_8601": "2022-07-17T16:04:49.226242Z",
        "url": "https://files.pythonhosted.org/packages/ca/a2/a6c491afe659bff33800e10d2ba5284fabdd8ec22bfabe68ee1587ef0b81/kojen-1.1.24.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8d446d30c053e876e530435c3d126bcba8e20998d7c3fc234bafc0eb573e7c4",
          "md5": "8101d8569b68b9e682b45deabd7abf47",
          "sha256": "2cc6beeccf7a7f728ec1de3b46be173c478f384b7559359e60e7ac2941db320b"
        },
        "downloads": -1,
        "filename": "kojen-1.1.25-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8101d8569b68b9e682b45deabd7abf47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 310984,
        "upload_time": "2022-08-08T16:05:16",
        "upload_time_iso_8601": "2022-08-08T16:05:16.983178Z",
        "url": "https://files.pythonhosted.org/packages/a8/d4/46d30c053e876e530435c3d126bcba8e20998d7c3fc234bafc0eb573e7c4/kojen-1.1.25-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6376851cd5b733c2bd2ce7b452c11d5ad83ac65401b9904b63cb2d8a8ff02a83",
          "md5": "283aad51515d3d07af6652ddc8b2f22b",
          "sha256": "34057214bac48071dbd55352303857a48141bad3aa1c1dbd2fdc0fc94a4c0bc9"
        },
        "downloads": -1,
        "filename": "kojen-1.1.25.tar.gz",
        "has_sig": false,
        "md5_digest": "283aad51515d3d07af6652ddc8b2f22b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 93122,
        "upload_time": "2022-08-08T16:05:18",
        "upload_time_iso_8601": "2022-08-08T16:05:18.826466Z",
        "url": "https://files.pythonhosted.org/packages/63/76/851cd5b733c2bd2ce7b452c11d5ad83ac65401b9904b63cb2d8a8ff02a83/kojen-1.1.25.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdf55137303ff391aabe5992cef3d94ad5d6bb30ccc3d3ab6671e03cea9546d6",
          "md5": "6e65bc3f7f09eab08edfa4f7dc558560",
          "sha256": "95a3150fc34d6b867b6b5d218bc26ee0fd8207f8b43dff998612302e773a96f4"
        },
        "downloads": -1,
        "filename": "kojen-1.1.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e65bc3f7f09eab08edfa4f7dc558560",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 311161,
        "upload_time": "2022-12-09T07:48:12",
        "upload_time_iso_8601": "2022-12-09T07:48:12.900569Z",
        "url": "https://files.pythonhosted.org/packages/cd/f5/5137303ff391aabe5992cef3d94ad5d6bb30ccc3d3ab6671e03cea9546d6/kojen-1.1.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7096f810fefc530fb54275ba8fbc23de49c10ee8acdcf054329b0d64f866240b",
          "md5": "07747e5398751a5e04ee3ce1cc4fe4ea",
          "sha256": "cb7ded16547f490fad537ed33adab022acbc5afefb7e9b0854fb8bf377e233c0"
        },
        "downloads": -1,
        "filename": "kojen-1.1.26.tar.gz",
        "has_sig": false,
        "md5_digest": "07747e5398751a5e04ee3ce1cc4fe4ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 93340,
        "upload_time": "2022-12-09T07:48:15",
        "upload_time_iso_8601": "2022-12-09T07:48:15.144162Z",
        "url": "https://files.pythonhosted.org/packages/70/96/f810fefc530fb54275ba8fbc23de49c10ee8acdcf054329b0d64f866240b/kojen-1.1.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c19fd36a7e079b71b3c9e4294ac4adc0c2e1ca0b4cd8484afcbb92093c8e6583",
          "md5": "588a6f3725a988b13d89565fad894073",
          "sha256": "3a5355694f54edc546b74e9bd9827c153dcd1a2ce4025c051cd205793d248706"
        },
        "downloads": -1,
        "filename": "kojen-1.1.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "588a6f3725a988b13d89565fad894073",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 311122,
        "upload_time": "2023-01-09T13:25:46",
        "upload_time_iso_8601": "2023-01-09T13:25:46.885961Z",
        "url": "https://files.pythonhosted.org/packages/c1/9f/d36a7e079b71b3c9e4294ac4adc0c2e1ca0b4cd8484afcbb92093c8e6583/kojen-1.1.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50391268c825a9ab3b8609ed6b79a062cb396931fdb4dc5a67f5276f1c4425fe",
          "md5": "fcec04f3537bed762b20fc9e49a48aa6",
          "sha256": "b5425fd58b14a5cb22b90528da36949417204bf691f9c2fcd8a8dbf9e269716b"
        },
        "downloads": -1,
        "filename": "kojen-1.1.27.tar.gz",
        "has_sig": false,
        "md5_digest": "fcec04f3537bed762b20fc9e49a48aa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 93331,
        "upload_time": "2023-01-09T13:25:48",
        "upload_time_iso_8601": "2023-01-09T13:25:48.422691Z",
        "url": "https://files.pythonhosted.org/packages/50/39/1268c825a9ab3b8609ed6b79a062cb396931fdb4dc5a67f5276f1c4425fe/kojen-1.1.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d68de8fac1a0e7833201181031cd11679618564dbc061a835e1afbcda94971f2",
          "md5": "3545e13dc6ba5d8d0b58d99c1d55c2a7",
          "sha256": "103b02bdd067da3a05470e38c81daf5bb95c79b5e3c23fcf0f72922382936fb9"
        },
        "downloads": -1,
        "filename": "kojen-1.1.28-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3545e13dc6ba5d8d0b58d99c1d55c2a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 312845,
        "upload_time": "2023-03-06T20:55:36",
        "upload_time_iso_8601": "2023-03-06T20:55:36.942216Z",
        "url": "https://files.pythonhosted.org/packages/d6/8d/e8fac1a0e7833201181031cd11679618564dbc061a835e1afbcda94971f2/kojen-1.1.28-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2687ce7914077275b7650cccdadf04317ca717a4ca74c3ce4805ad4a65aa1dad",
          "md5": "df9add73fa57f003a5a283b4a78ff813",
          "sha256": "78314f85ebe7b96f2b816f420a452d43577c69b9d5e66d2939e7d5328cd6dab3"
        },
        "downloads": -1,
        "filename": "kojen-1.1.28.tar.gz",
        "has_sig": false,
        "md5_digest": "df9add73fa57f003a5a283b4a78ff813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 94956,
        "upload_time": "2023-03-06T20:55:38",
        "upload_time_iso_8601": "2023-03-06T20:55:38.229819Z",
        "url": "https://files.pythonhosted.org/packages/26/87/ce7914077275b7650cccdadf04317ca717a4ca74c3ce4805ad4a65aa1dad/kojen-1.1.28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.29": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42e4af019c5c1074718f77d699cf5dd95c1bf1f6542fe4421277aaad72504ee8",
          "md5": "3e4f95ae25df0ad34d2a880d83d9d9ea",
          "sha256": "e7a2263ef41a4dcb73afb3ab8792251be8984343f2beb8784e39f38d2da9a457"
        },
        "downloads": -1,
        "filename": "kojen-1.2.29-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e4f95ae25df0ad34d2a880d83d9d9ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.8",
        "size": 296903,
        "upload_time": "2023-03-26T13:25:30",
        "upload_time_iso_8601": "2023-03-26T13:25:30.388458Z",
        "url": "https://files.pythonhosted.org/packages/42/e4/af019c5c1074718f77d699cf5dd95c1bf1f6542fe4421277aaad72504ee8/kojen-1.2.29-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db0fbd8098b82d9f03d830d7cc00b6fb3e9ef268ebe527cbea33a493b15dbd72",
          "md5": "810b682338688c4aa4f9fcd49c863e1f",
          "sha256": "a155c8fa9b2d85d7c1e9773d6d11ec11bef31c21ad24210a841e85cc4a085650"
        },
        "downloads": -1,
        "filename": "kojen-1.2.29.tar.gz",
        "has_sig": false,
        "md5_digest": "810b682338688c4aa4f9fcd49c863e1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.8",
        "size": 88889,
        "upload_time": "2023-03-26T13:25:32",
        "upload_time_iso_8601": "2023-03-26T13:25:32.400735Z",
        "url": "https://files.pythonhosted.org/packages/db/0f/bd8098b82d9f03d830d7cc00b6fb3e9ef268ebe527cbea33a493b15dbd72/kojen-1.2.29.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42e4af019c5c1074718f77d699cf5dd95c1bf1f6542fe4421277aaad72504ee8",
        "md5": "3e4f95ae25df0ad34d2a880d83d9d9ea",
        "sha256": "e7a2263ef41a4dcb73afb3ab8792251be8984343f2beb8784e39f38d2da9a457"
      },
      "downloads": -1,
      "filename": "kojen-1.2.29-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e4f95ae25df0ad34d2a880d83d9d9ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.8",
      "size": 296903,
      "upload_time": "2023-03-26T13:25:30",
      "upload_time_iso_8601": "2023-03-26T13:25:30.388458Z",
      "url": "https://files.pythonhosted.org/packages/42/e4/af019c5c1074718f77d699cf5dd95c1bf1f6542fe4421277aaad72504ee8/kojen-1.2.29-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db0fbd8098b82d9f03d830d7cc00b6fb3e9ef268ebe527cbea33a493b15dbd72",
        "md5": "810b682338688c4aa4f9fcd49c863e1f",
        "sha256": "a155c8fa9b2d85d7c1e9773d6d11ec11bef31c21ad24210a841e85cc4a085650"
      },
      "downloads": -1,
      "filename": "kojen-1.2.29.tar.gz",
      "has_sig": false,
      "md5_digest": "810b682338688c4aa4f9fcd49c863e1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.8",
      "size": 88889,
      "upload_time": "2023-03-26T13:25:32",
      "upload_time_iso_8601": "2023-03-26T13:25:32.400735Z",
      "url": "https://files.pythonhosted.org/packages/db/0f/bd8098b82d9f03d830d7cc00b6fb3e9ef268ebe527cbea33a493b15dbd72/kojen-1.2.29.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}