{
  "info": {
    "author": "So1n",
    "author_email": "so1n897046026@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# protobuf_to_pydantic\nGenerate the `pydantic.Base Model` class (and the corresponding source code) with parameter verification function through the Protobuf file\n\n> NOTE:\n>  - Only supports proto3\n\n[中文文档](https://github.com/so1n/protobuf_to_pydantic/blob/master/README_ZH.md)\n# 1.Installation\n```bash\npip install protobuf_to_pydantic\n```\n\n# 2.Quick Start\n`protobuf_to_pydantic` currently has two methods to generate `pydantic.BaseModel` objects through Protobuf files,\nThe first method is to generate the corresponding `Python` code file through the Protobuf file in the form of a plugin.\nThe second method is to generate the corresponding `pydantic.BaseModel` object based on the `Message` object at runtime.\n\n## 2.1.Directly generate `pydantic.BaseModel` code files through plugins\n### 2.1.1.Use of plugin\nThe plugin method is the most recommended way to use `protobuf-to-pydantic`,\nit supports the most complete functions, and it is also very simple to use, assuming that the code corresponding to the Protobuf file is usually generated by the following command:\n```bash\npython -m grpc_tools.protoc -I. example.proto\n```\nThen after installing `protobuf-to-pydantic`, can use the `--protobuf-to-pydantic out` option to use `protobuf-to-pydantic`, the command is as follows:\n```bash\npython -m grpc_tools.protoc -I. --protobuf-to-pydantic_out=. example.proto\n```\n> Note: The `protobuf-to-pydantic` plugin depends on `mypy-protobuf`, please install `mypy-protobuf` through the command `python -m pip install protobuf-to-pydanitc[mypy-protobuf]`.\n\nAmong them, `--protobuf-to-pydantic out=.` indicates the use of the `prorobuf-to-pydanitc` plugin, and declares that the output location of the `protobuf-to-pydantic` plugin is `.` (indicating the use of `grpc tools.proto ` to use the output path),\nIn this way, the `protobuf-to-pydantic` plugin will write its own generated content in the corresponding file (the file name ends with `p2p.py`), such as `protobuf-to-pydantic` is `example.proto `The generated code file is named `example_p2p.py`\n\n> Note: If `isort` and `black` are installed in the current `Python` environment, then `protobuf-to-pydantic` will format the generated code through `isort` and `black`.\n### 2.1.2.Plugin configuration\n`protobuf-to-pydantic` supports configuration functions by reading a `Python` file.\nDevelopers first need to create a configuration file in the current path of the running command, the file name is `plugin_config.py`, and write the following code:\n```Python\nimport logging\nfrom typing import List, Type\n\nfrom google.protobuf.any_pb2 import Any  # type: ignore\nfrom pydantic import confloat, conint\nfrom pydantic.fields import FieldInfo\n\nfrom protobuf_to_pydantic.gen_model import DescTemplate\n\n# Configure the log output format and log level of the plugin, which is very useful when debugging\nlogging.basicConfig(format=\"[%(asctime)s %(levelname)s] %(message)s\", datefmt=\"%y-%m-%d %H:%M:%S\", level=logging.DEBUG)\n\n\nclass CustomerField(FieldInfo):\n    pass\n\n\ndef customer_any() -> Any:\n    return Any  # type: ignore\n\n\n# For the configuration of the local template, see the use of the local template for details\nlocal_dict = {\n    \"CustomerField\": CustomerField,\n    \"confloat\": confloat,\n    \"conint\": conint,\n    \"customer_any\": customer_any,\n}\n# Specifies the start of key comments\ncomment_prefix = \"p2p\"\n# Specify the class of the template, you can extend the template by inheriting this class, see the chapter on custom templates for details\ndesc_template: Type[DescTemplate] = DescTemplate\n# Specify the protobuf files of which packages to ignore, and the messages of the ignored packages will not be parsed\nignore_pkg_list: List[str] = [\"validate\", \"p2p_validate\"]\n```\nNext, change `--protobuf-to-pydantic out=.` in the command to `--protobuf-to-pydantic out=config path=plugin config.py:.`, as follows:\n```bash\npython -m grpc_tools.protoc -I. --protobuf-to-pydantic_out=config_path=plugin_config.py:. example.proto\n```\nAmong them, `config path=plugin_config.py` on the left side of `:` indicates that the configuration file path to be read is `plugin_config.py`, and the right side of `:` still declares the output of the `protobuf-to-pydantic` plugin The position is `.`.\nIn this way, the `protobuf-to-pydantic` plugin can be loaded into the configuration file specified by the developer when it is running, and then run according to the configuration defined by the configuration file.\n\n## 2.2.Generate a `pydantic.BaseModel` object at runtime\n`protobuf_to_pydantic` can generate the corresponding `pydantic.BaseModel` object based on the `Message` object at runtime。\n\nFor example, the `UserMessage` in the following Protobuf file named `demo.proto`:\n```protobuf\n// path: ./demo.proto\nsyntax = \"proto3\";\npackage user;\n\nenum SexType {\n  man = 0;\n  women = 1;\n}\n\nmessage UserMessage {\n  string uid=1;\n  int32 age=2;\n  float height=3;\n  SexType sex=4;\n  bool is_adult=5;\n  string user_name=6;\n}\n```\nThrough `grpc_tools.protoc`, the corresponding `Python` code can be generated according to the Protobuf file (the file name at this time is `demo_pb2.py`),\nand the `msg_to_pydantic_model` method of `protobuf_to_pydantic` can read the generated Proto file at runtime Message object data,\nand generate the corresponding `pydantic.BaseModel` object:\n\n```Python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom . import demo_pb2\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(demo_pb2.UserMessage)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n\n# output\n# {\n#   'uid': FieldInfo(default='', extra={}),\n#   'age': FieldInfo(default=0, extra={}),\n#   'height': FieldInfo(default=0.0, extra={}),\n#   'sex': FieldInfo(default=0, extra={}),\n#   'is_adult': FieldInfo(default=False, extra={}),\n#   'user_name': FieldInfo(default='', extra={})\n#  }\n```\nThrough the output results, it can be found that the generated `pydantic.BaseModel` object also contains `uid`, `age`, `height`, `sex`, `is adult` and `user name` fields, and their corresponding `default` The information is consistent with the `UserMessage` in the Protobuf file.\n\nIn addition to generating the corresponding `pydantic.BaseModel` object at runtime, `protobuf-to-pydantic` also supports converting the `pydantic.BaseModel` object to the corresponding `Python` code text at runtime (only compatible with `protobuf_to_pydantic `generated `pydantic.BaseModel` object).\nAmong them, the `pydantic_model_to_py_code` method of `protobuf_to_pydantic` is used to generate code text, and the `pydantic_model_to_py_file` method of `protobuf_to_pydantic` is used to generate code files,\nthe sample code of `pydantic_model_to_py_file` method of `protobuf_to_pydantic` is as follows:\n```Python\nfrom protobuf_to_pydantic import msg_to_pydantic_model, pydantic_model_to_py_file\n\n# import protobuf gen python obj\nfrom example.example_proto_python_code.example_proto.demo import demo_pb2\n\npydantic_model_to_py_file(\n    \"./demo_gen_code.py\",\n    msg_to_pydantic_model(demo_pb2.NestedMessage),\n)\n```\nThe code will first convert `demo_pb2.NestedMessage` into a `pydantic.BaseModel` object, and then the generated object will be converted into the corresponding code content by the `pydantic_model_to_py_file` method and written to `demo_gen_code.py` file.\nIt should be noted that if `protobuf_to_pydantic` checks that `isort` and `black` are installed in the current environment, they will be used to format the generated code by default.\n\n## 2.3.Parameter verification\nThe `Message` object generated according to the Protobuf file will only carry a small amount of information. This is because the ordinary Protobuf file does not have enough parameter verification related information, which requires us to improve the parameter verification information of the `Message` object through some additional ways.\nCurrently `protobuf_to_pydantic` supports multiple ways to obtain other information of the Message, so that the generated `pydantic.BaseModel` object has the function of parameter verification.\n\n> NOTE:\n>  - 1.The text annotation function is not the focus of subsequent function development, and the P2P mode is recommended。\n>  - 2.Plugin mode only supports PGV and P2P mode\n\n### 2.3.1.Text annotation\nDevelopers can write comments that meet the requirements of `protobuf_to_pydantic` for each field in the Protobuf file to provide parameter verification information for `protobuf_to_pydantic`, such as the following example:\n```protobuf\nsyntax = \"proto3\";\npackage user;\n\nenum SexType {\n  man = 0;\n  women = 1;\n}\n\n// user info\nmessage UserMessage {\n  // p2p: {\"miss_default\": true, \"example\": \"10086\"}\n  // p2p: {\"title\": \"UID\"}\n  string uid=1; // p2p: {\"description\": \"user union id\"}\n  // p2p: {\"example\": 18, \"title\": \"use age\", \"ge\": 0}\n  int32 age=2;\n  // p2p: {\"ge\": 0, \"le\": 2.5}\n  float height=3;\n  SexType sex=4;\n  bool is_adult=5;\n  // p2p: {\"description\": \"user name\"}\n  // p2p: {\"default\": \"\", \"min_length\": 1, \"max_length\": \"10\", \"example\": \"so1n\"}\n  string user_name=6;\n}\n```\nIn this example, each annotation that can be used by `protobuf_to_pydantic` starts with `p2p:` (supports customization) and is followed by a complete Json string. If you are familiar with the usage of `pydantic`, you can find This Json string contains the verification information corresponding to `pydantic.Field`. For example, the `uid` field in `UserMessage` contains a total of 4 pieces of information as follows：\n\n| Column       | Meaning                                                                               |\n|--------------|---------------------------------------------------------------------------------------|\n| miss_default | Indicates that the generated field does not have a default value                      |\n| example      | An example value representing the generated field is 10086                            |\n| title        | Indicates that the schema name of the field is UID                                    |\n | description  | The schema documentation for the representation field is described as `user_union_id` |\n\n> Note:\n>   - 1.Currently only single-line comments are supported and comments must be a complete Json data (no line breaks).\n>   - 2.multi line comments are not supported。\n\nWhen these annotations are written, `protobuf_to_pydantic` will bring the corresponding information for each field when converting the Message into the corresponding `Pydantic.BaseModel` object, as follows:\n\n```python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom example.example_proto_python_code.example_proto.demo import demo_pb2\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(demo_pb2.UserMessage, parse_msg_desc_method=demo_pb2)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n# output\n# {\n#   'uid': FieldInfo(default=PydanticUndefined, title='UID', description='user union id', extra={'example': '10086'}),\n#   'age': FieldInfo(default=0, title='use age', ge=0, extra={'example': 18}),\n#   'height': FieldInfo(default=0.0, ge=0, le=2, extra={}),\n#   'sex': FieldInfo(default=0, extra={}),\n#   'is_adult': FieldInfo(default=False, extra={}),\n#   'user_name': FieldInfo(default='', description='user name', min_length=1, max_length=10, extra={'example': 'so1n'})\n# }\n```\nIt can be seen from the output results that the output fields carry the corresponding information. In addition, the difference between this code and the above is that the `msg_to_pydantic_model` function sets a keyword parameter named `parse_msg_desc_method` and its value is `demo_pb2`, which enables `protobuf_to_pydantic` to obtain additional information for each field in the Message object through comments in the `.pyi` file of the `demo_pb2` module.\n\n> Note：This function requires the use of the [mypy-protobuf](https://github.com/nipunn1313/mypy-protobuf) plugin when generating the corresponding `Python` code from the Protobuf file, and the specified output path of the pyi file is the same as the generated `Python` code path to take effect at the same time.\n\nIn addition to obtaining comments through the `.pyi` file, `protobuf_to_pydantic` also supports setting the value of `parse_msg_desc_method` to the root directory path specified when the Message object is generated, so that `protobuf_to_pydantic` can parse the comments of the Protobuf file corresponding to the Message object. getting information。\n\n\nFor example, the project structure of the `protobuf_to_pydantic` sample code is as follows:\n```bash\n./protobuf_to_pydantic/\n├── example/\n│ ├── python_example_proto_code/\n│ └── example_proto/\n├── protobuf_to_pydantic/\n└── /\n```\n\nThe Protobuf file is stored in the `example/example_proto` folder, and then run the following command in the `example` directory to generate the `Python` code file corresponding to Protobuf:\n```bash\ncd example\n\npython -m grpc_tools.protoc\n  --python_out=./python_example_proto_code \\\n  --grpc_python_out=./python_example_proto_code \\\n  -I. \\\n```\nThen the path to be filled in at this time is `./protobuf_to_pydantic/example`, the code is as follows：\n\n```python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom example.example_proto_python_code.example_proto.demo import demo_pb2\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(\n    demo_pb2.UserMessage, parse_msg_desc_method=\"./protobuf_to_pydantic/example\"\n)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n# output\n# {\n#   'uid': FieldInfo(default=PydanticUndefined, title='UID', description='user union id', extra={'example': '10086'}),\n#   'age': FieldInfo(default=0, title='use age', ge=0, extra={'example': 18}),\n#   'height': FieldInfo(default=0.0, ge=0, le=2, extra={}),\n#   'sex': FieldInfo(default=0, extra={}),\n#   'is_adult': FieldInfo(default=False, extra={}),\n#   'user_name': FieldInfo(default='', description='user name', min_length=1, max_length=10, extra={'example': 'so1n'})\n# }\n```\nFrom the result, it can be seen that the information carried by the field is the same as the result obtained by the module\n> NOTE: This method requires [lark](https://github.com/lark-parser/lark) to be installed in advance and the Protobuf file must exist in the running project.\n\n### 2.3.2.PGV(protoc-gen-validate)\nCurrently, the commonly used object validation method in the Protobuf ecosystem is to directly use the [protoc-gen-validate](https://github.com/envoyproxy/protoc-gen-validate) project, while [protoc-gen-validate](https://github.com/envoyproxy/protoc-gen-validate) project also supports multiple languages, and most Protobuf developers will write `pgv` rules once so that different languages support the same validation rules.\n\nAnd `protobuf-to-pydantic` also supports parsing the verification rules of `pgv` so that the generated `pydantic.BaseModel` class has corresponding verification logic,\nIt is very simple to use `Pgv` verification rules in `protobuf_to_pydantic`. First, you need to write the corresponding `Pgv` rules in the Protobuf file, and then fill in `parse_msg_desc_method` when converting through `msg_to_pydantic_model` method The value is `PGV`, the code is as follows:\n```Python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel\n\n# import protobuf gen python obj\nfrom example.example_proto_python_code.example_proto.validate import demo_pb2\n\nUserModel: Type[BaseModel] = msg_to_pydantic_model(\n    demo_pb2.FloatTest, parse_msg_desc_method=\"PGV\"\n)\nprint(\n    {\n        k: v.field_info\n        for k, v in UserModel.__fields__.items()\n    }\n)\n# output\n# {\n#   'const_test': FieldInfo(default=1.0, const=True, extra={}),\n#   'range_e_test': FieldInfo(default=0.0, ge=1, le=10, extra={}),\n#   'range_test': FieldInfo(default=0.0, gt=1, lt=10, extra={}),\n#   'in_test': FieldInfo(default=0.0, extra={'in': [1.0, 2.0, 3.0]}),\n#   'not_in_test': FieldInfo(default=0.0, extra={'not_in': [1.0, 2.0, 3.0]}),\n#   'ignore_test': FieldInfo(default=0.0, extra={})\n# }\n```\n\n> Note:\n>  - 1.For the usage of `Pgv`, see: [protoc-gen-validate doc](https://github.com/bufbuild/protoc-gen-validate/blob/main/README.md#constraint-rules)\n>  - 2.Need to install `Pgv` through `pip install protoc_gen_validate` Or download [validate.proto](https://github.com/so1n/protobuf_to_pydantic/blob/master/example/example_proto/common/validate.proto) to the protobuf directory in the project to write pgv rules in the Protobuf file.\n\n\n### 2.2.3.P2p\nThe verification rules of `Pgv` are written in the Option attribute of each field of `Message`, and there are better code specifications, so the readability of Protobuf files carrying `Pgv` verification rules is higher than that of Protobuf carrying comments At the same time, when writing `Pgv` rules, you can also experience the convenience brought by IDE auto-completion, but it only supports verification-related logic, and the feature richness is not as good as the file comment mode.\n\nThe `P2P` mode is an extension of the `PGV` mode, which incorporates some functions of text annotations. This mode satisfies the customization of the attributes of each `Field` in most `pydantic.BaseModel`, such as the following Protobuf file:\n```protobuf\nsyntax = \"proto3\";\npackage p2p_validate_test;\n\nimport \"example_proto/common/p2p_validate.proto\";\n\n\nmessage FloatTest {\n  float const_test = 1 [(p2p_validate.rules).float.const = 1];\n  float range_e_test = 2 [(p2p_validate.rules).float = {ge: 1, le: 10}];\n  float range_test = 3[(p2p_validate.rules).float = {gt: 1, lt: 10}];\n  float in_test = 4[(p2p_validate.rules).float = {in: [1,2,3]}];\n  float not_in_test = 5[(p2p_validate.rules).float = {not_in: [1,2,3]}];\n  float default_test = 6[(p2p_validate.rules).float.default = 1.0];\n  float not_enable_test = 7[(p2p_validate.rules).float.enable = false];\n  float default_factory_test = 8[(p2p_validate.rules).float.default_factory = \"p2p@builtin|float\"];\n  float miss_default_test = 9[(p2p_validate.rules).float.miss_default = true];\n  float alias_test = 10 [(p2p_validate.rules).float.alias = \"alias\"];\n  float desc_test = 11 [(p2p_validate.rules).float.description = \"test desc\"];\n  float multiple_of_test = 12 [(p2p_validate.rules).float.multiple_of = 3.0];\n  float example_test = 13 [(p2p_validate.rules).float.example = 1.0];\n  float example_factory = 14 [(p2p_validate.rules).float.example_factory = \"p2p@builtin|float\"];\n  float field_test = 15[(p2p_validate.rules).float.field = \"p2p@local|CustomerField\"];\n  float type_test = 16[(p2p_validate.rules).float.type = \"p2p@local|confloat\"];\n  float title_test = 17 [(p2p_validate.rules).float.title = \"title_test\"];\n}\n```\n`protobuf_to_pydantic` can read the generated Message object at runtime and generate a `pydantic.BaseModel` object with the corresponding information:\n\n```python\nfrom typing import Type\nfrom protobuf_to_pydantic import msg_to_pydantic_model\nfrom pydantic import BaseModel, confloat\nfrom pydantic.fields import FieldInfo\n\n# import protobuf gen python obj\nfrom example.example_proto_python_code.example_proto.p2p_validate import demo_pb2\n\n\nclass CustomerField(FieldInfo):\n    pass\n\n\nDemoModel: Type[BaseModel] = msg_to_pydantic_model(\n    demo_pb2.FloatTest,\n    local_dict={\"CustomerField\": CustomerField, \"confloat\": confloat},\n)\nprint(\n    {\n        k: v.field_info\n        for k, v in DemoModel.__fields__.items()\n    }\n)\n# output:\n# {\n#   'const_test': FieldInfo(default=1.0, const=True, extra={}),\n#   'range_e_test': FieldInfo(default=0.0, ge=1, le=10, extra={}),\n#   'range_test': FieldInfo(default=0.0, gt=1, lt=10, extra={}),\n#   'in_test': FieldInfo(default=0.0, extra={'in': [1.0, 2.0, 3.0]}),\n#   'not_in_test': FieldInfo(default=0.0, extra={'not_in': [1.0, 2.0, 3.0]}),\n#   'default_test': FieldInfo(default=1.0, extra={}),\n#   'default_factory_test': FieldInfo(default=PydanticUndefined, default_factory=<class 'float'>, extra={}),\n#   'miss_default_test': FieldInfo(extra={}),\n#   'alias_test': FieldInfo(default=0.0, alias='alias', alias_priority=2, extra={}),\n#   'desc_test': FieldInfo(default=0.0, description='test desc', extra={}),\n#   'multiple_of_test': FieldInfo(default=0.0, multiple_of=3, extra={}),\n#   'example_test': FieldInfo(default=0.0, extra={'example': 1.0}),\n#   'example_factory': FieldInfo(default=0.0, extra={'example': <class 'float'>}),\n#   'field_test': CustomerField(default=0.0, extra={}),\n#   'type_test': FieldInfo(default=0.0, extra={}),\n#   'title_test': FieldInfo(default=0.0, title='title_test', extra={})\n#   }\n```\nIt is worth noting that this code does not explicitly specify that the value of `parse_msg_desc_method` is `p2p`, because `p2p` is already the default rule of `protobuf_to_pydantic`.\n\n> Note: See the template chapter for the usage of `local_dict`\n\n > Note:\n>  - 1.See the template chapter for the usage of `local_dict`\n>  - 2.If the reference to the Proto file fails, you need to download [p2p_validate.proto](https://github.com/so1n/protobuf_to_pydantic/blob/master/protos/protobuf_to_pydantic/protos/p2p_validate.proto) in the project and use it in the Protobuf file。\n\n\n\n\n### 2.3.3.Other parameter support\nIn addition to the parameters of `FieldInfo`, the file comment mode and `p2p` mode of `protobuf_to_pydantic` also support the following parameters:\n- miss_default：By default, the default value of each field in the corresponding `pydantic.BaseModel` object is the same as the default value of each field in the Message, but when `miss default` is `true`, the setting of the default value will be canceled .\n- enable: By default, `pydantic.BaseModel` will convert every field in the Message. If some fields do not want to be converted, you can set `enable` to `false`\n- const: Specifies the value of the field's constant. Note: The const of `pydantic.BaseModel` only supports bool variables. When `const` is `True`, the accepted value can only be the value set by `default`, and the default value carried by the Message generated by protobuf corresponds to The null value of type does not match `pydantic.BaseModel`, so `protobuf_to_pydantic` makes some changes to the input of this value, but after `const` sets the value, the `cost` property in the generated field is `True` `, and `default` becomes the corresponding value of the setting.\n- type: To expand the current type, for example, if you want to increase the verification of the bank card number through the `pydantic.types.Payment Card Number` type, you can specify the field type as `Payment Card Number` by the following method:\n  ```protobuf\n  message UserPayMessage {\n    string bank_number=1; // p2p: {\"type\": \"p2p@import|pydantic.types|PaymentCardNumber\"}\n  }\n  ```\n\n> Note:\n>   If you don't know `pydantic`, you can use the following two URLs to learn what parameters Field supports:\n>\n>   - https://pydantic-docs.helpmanual.io/usage/types/#constrained-types\n>\n>   - https://pydantic-docs.helpmanual.io/usage/schema/#field-customization\n\n### 2.3.4.Template\nIn some cases, the value we fill in is a method or function of a certain library in `Python` (such as the value of `type` parameter and `default_factory` parameter), which cannot be realized through Json syntax。\nAt this time, template parameters can be used to solve the corresponding problems. Currently `protobuf_to_pydantic` supports a variety of template parameters。\n\n> Note:The `p2p` string at the beginning of the template can be defined by the comment prefix variable\n\n\n#### 2.3.4.1.`p2p@import`\nThis template is used to indicate that the value is a variable under other modules. The specific usage method is as follows:\n```protobuf\n// comment example\nmessage UserPayMessage {\n  string bank_number=1; // p2p: {\"type\": \"p2p@import|pydantic.types|PaymentCardNumber\"}\n}\n\n// p2p example\nmessage UserPayMessage {\n  string bank_number=1[(p2p_validate.rules).string.type = \"p2p@import|pydantic.types|PaymentCardNumber\"];\n}\n\n// p2p other example\n// Since the imported type happens to belong to the `pydantic.types` module, string.pydantic type can be used directly in `p2p` mode\nmessage UserPayMessage {\n  string bank_number=1[(p2p_validate.rules).string.pydantic_type = \"PaymentCardNumber\"];\n}\n```\n\nThe syntax in the format of `p2p{template method}|{module to be imported: A}|{variable in the module: B}` is used here, which means that `B` object needs to be imported and applied through `from A import B` ,\nThrough the definition of the template, `protobuf_to_pydantic` will convert the corresponding Message into the following `pydantic.BaseModel`:\n```python\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n# p2p@import|pydantic.types|PaymentCardNumber\nfrom pydantic.types import PaymentCardNumber\n\nclass UserPayMessage(BaseModel):\n    bank_number: PaymentCardNumber = FieldInfo(default=\"\", extra={})\n```\n\n#### 2.3.4.2.`p2p@import_instance`\nThe `p2p@import` template just imports and uses the variables of a certain library, while `p2p@import instance` imports the class of a certain library first,\nand finally instantiates it with the specified parameters. The method of use is as follows:\n```protobuf\nmessage AnyTest {\n  google.protobuf.Any default_test = 23 [\n    (p2p_validate.rules).any.default = 'p2p@import_instance|google.protobuf.any_pb2|Any|{\"type_url\": \"type.googleapis.com/google.protobuf.Duration\"}'\n\n  ];\n}\n```\nHere is the `p2p{template method}|{module to be imported}|{corresponding class}|{corresponding parameter}` syntax, through the definition of the template, `protobuf_to_pydantic` will convert the corresponding Message is the following `pydantic.BaseModel` object:\n```python\nfrom google.protobuf.any_pb2 import Any as AnyMessage\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n\n\nclass AnyTest(BaseModel):\n    default_test: AnyMessage = FieldInfo(\n        default=AnyMessage(type_url=\"type.googleapis.com/google.protobuf.Duration\")\n    )\n```\n\n#### 2.3.4.3.`p2p@local`\nThis template is used to introduce user-defined variables. The syntax in the format `{template method}|{local variable to be used}` is used here, as follows:\n```protobuf\n// comment example\nmessage UserPayMessage {\n  google.protobuf.Timestamp exp=1; // p2p: {\"default_factory\": \"p2p@local|exp_time\"}\n}\n// p2p example\nmessage UserPayMessage {\n  google.protobuf.Timestamp exp=1[(p2p_validate.rules).timestamp.default_factory= \"p2p@local|exp_time\"];\n}\n```\nThen register the corresponding value through the parameter `local_dict` when calling the `msg_to_pydantic_model` method. The fake code is as follows:\n```Python\nimport time\n\n\ndef exp_time() -> float:\n  return time.time()\n\nmsg_to_pydantic_model(\n    demo_pb2.NestedMessage,\n    local_dict={\"exp_time\": exp_time},  # <----\n)\n```\nIn this way, `protobuf_to_pydantic` can generate a `pydantic.BaseModel` object that meets the requirements:\n```python\nfrom datetime import datetime\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n\nfrom . import exp_time\n\nclass UserPayMessage(BaseModel):\n    exp: datetime = FieldInfo(default_factory=exp_time, extra={})\n```\n\n> Note: See the sample code for specific calling and generation methods.\n\n#### 2.3.4.4.`p2p@builtin`\nWhen the variable to be used comes from a built-in function, this template can be used directly (it can be considered as a simplified version of the `p2p@local` template), and the syntax is as follows:\n```protobuf\n// comment example\nmessage UserPayMessage {\n  google.protobuf.Timestamp exp=1; // p2p: {\"type\": \"p2p@builtin|float\"}\n}\n\n// p2p example\nmessage UserPayMessage {\n  google.protobuf.Timestamp exp=1[(p2p_validate.rules).timestamp.type= \"p2p@builtin|float\"];\n}\n```\nIn this way, `protobuf_to_pydantic` can generate a `pydantic.BaseModel` object that meets the requirements:\n```python\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n\n\nclass UserPayMessage(BaseModel):\n    exp: float = FieldInfo()\n```\n#### 2.3.4.5.Custom template\nCurrently, `protobuf_to_pydantic` only supports several templates. If you have more template requirements, you can extend the template by inheriting the `DescTemplate` class.\nFor example, there is a strange requirement that the default value of the field is the timestamp when the Message object is generated as a `pydantic.BaseModel` object, but the timestamp has two versions, one version has a timestamp of length 10 and the other has a length of 13, so write the following Protobuf file:\n```protobuf\nmessage TimestampTest{\n  int32 timestamp_10 = 1[(p2p_validate.rules).int32.default = \"p2p@timestamp|10\"];\n  int32 timestamp_13 = 2[(p2p_validate.rules).int32.default = \"p2p@timestamp|13\"];\n}\n```\nThis file uses the custom `p2p@timestamp|{x}` syntax, where `x` only has two values of 10 and 13, and then you can write code according to this template behavior, the code is as follows:\n```python\nimport time\nfrom typing import Any, List\nfrom protobuf_to_pydantic.gen_model import DescTemplate\n\n\nclass CustomDescTemplate(DescTemplate):\n    def template_timestamp(self, template_var_list: List[str]) -> Any:\n        timestamp: float = time.time()\n        length: str = template_var_list[0]\n        if length == \"10\":\n            return int(timestamp)\n        elif length == \"13\":\n            return int(timestamp * 100)\n        else:\n            raise KeyError(f\"timestamp template not support value:{length}\")\n\n\nfrom .demo_pb2 import TimestampTest # fake code\nfrom protobuf_to_pydantic import msg_to_pydantic_model\n\nmsg_to_pydantic_model(\n    TimestampTest,\n    desc_template=CustomDescTemplate\n)\n```\nThis code first creates a `CustomDescTemplate` class inherited from `DescTemplate`, and this class adds a `template_timestamp` method to match the syntax of `p2p@timestamp`,\nThen specify the template class as `CustomDescTemplate` through the `desc_template` key parameter in `msg_to_pydantic_model`, so that `msg_to_pydantic_model` will generate the following code (assuming the code generated when the timestamp is 1600000000 ):\n```python\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\n\nclass TimestampTest(BaseModel):\n    timestamp_10: int = FieldInfo(default=1600000000)\n    timestamp_13: int = FieldInfo(default=1600000000000)\n```\n\n## 3.example\n`protobuf_to_pydantic` provides some simple sample code, the following is the path of the sample code and protobuf file, just for reference:\n\n| Implication                           | Example Protobuf                                                                            | Example code                                                                         |\n|------------------------------|---------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|\n| Generate Model code with validation rules based on p2p schema | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/example_proto/p2p_validate | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/p2p_validate_example |\n| Generate the basic Model code               | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/example_proto/demo         | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/simple_example      |\n| Generate Model code with validation rules from .pyi files     | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/example_proto/demo         | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/text_comment_example |\n| Generate Model code with validation rules from protobuf files | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/example_proto/validate     | https://github.com/so1n/protobuf_to_pydantic/tree/master/example/validate_example    |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/so1n/protobuf_to_pydantic",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "protobuf-to-pydantic",
    "package_url": "https://pypi.org/project/protobuf-to-pydantic/",
    "platform": null,
    "project_url": "https://pypi.org/project/protobuf-to-pydantic/",
    "project_urls": {
      "Homepage": "https://github.com/so1n/protobuf_to_pydantic",
      "Repository": "https://github.com/so1n/protobuf_to_pydantic"
    },
    "release_url": "https://pypi.org/project/protobuf-to-pydantic/0.1.6.1/",
    "requires_dist": [
      "pydantic (>=1.9.1,<2.0.0)",
      "grpcio-tools (>=1.40.0,<2.0.0)",
      "lark (>=1.1.2,<2.0.0) ; extra == \"lark\" or extra == \"all\"",
      "mypy-protobuf (>=3.2.0,<4.0.0) ; extra == \"mypy-protobuf\" or extra == \"all\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Convert Protobuf-generated Python objects to Pydantic.BaseModel objects with parameter checksum",
    "version": "0.1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16868880,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8998715f0c1643fecec51f9c148bdbf58a233388062d74e80d2ada13bfb21145",
          "md5": "f937e9c846f176d74f9314c6f7d8f47e",
          "sha256": "7ab72afb6e508e13635a44633e9cb2b77308597a06cc68b04cce50ce8aaee844"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f937e9c846f176d74f9314c6f7d8f47e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 19567,
        "upload_time": "2022-06-29T14:55:47",
        "upload_time_iso_8601": "2022-06-29T14:55:47.049947Z",
        "url": "https://files.pythonhosted.org/packages/89/98/715f0c1643fecec51f9c148bdbf58a233388062d74e80d2ada13bfb21145/protobuf_to_pydantic-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9cd4158181a7190b1b1cb790e63aaff4c680a98567bb3f399e663d97b6fa28",
          "md5": "86fd0669e9151be7077f42597fecae41",
          "sha256": "b4069c481b7b0d333c754664440bc6573b7f01e9caaa90cc2820a3a2bef9c9ab"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86fd0669e9151be7077f42597fecae41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 21547,
        "upload_time": "2022-06-29T14:55:49",
        "upload_time_iso_8601": "2022-06-29T14:55:49.663152Z",
        "url": "https://files.pythonhosted.org/packages/2c/9c/d4158181a7190b1b1cb790e63aaff4c680a98567bb3f399e663d97b6fa28/protobuf_to_pydantic-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "184745dfb58554639eea72591452b2a289cd84effb62c8e885804d3138973da3",
          "md5": "5b13a12334be98f6e71ce43f912f430e",
          "sha256": "c30109cb8149b991d6fd49fb28a8fcf9de4f7486dc692f159e4e1822f510c794"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b13a12334be98f6e71ce43f912f430e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 21414,
        "upload_time": "2022-07-04T02:57:20",
        "upload_time_iso_8601": "2022-07-04T02:57:20.310719Z",
        "url": "https://files.pythonhosted.org/packages/18/47/45dfb58554639eea72591452b2a289cd84effb62c8e885804d3138973da3/protobuf_to_pydantic-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5e0ba6bdc511b42b31427bbd1561f343e5e288b08991f70e128ba091f5d3d55",
          "md5": "4f806449accd0d9fd524e84f96542226",
          "sha256": "a19c4892669f537d860ec45058a818f12d692dd325a59ac77e710ae97b2afc30"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4f806449accd0d9fd524e84f96542226",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23949,
        "upload_time": "2022-07-04T02:57:23",
        "upload_time_iso_8601": "2022-07-04T02:57:23.409989Z",
        "url": "https://files.pythonhosted.org/packages/d5/e0/ba6bdc511b42b31427bbd1561f343e5e288b08991f70e128ba091f5d3d55/protobuf_to_pydantic-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5485fd45e58d31caebfa573b3cbca9639b524760696bcf396e6eca3f20752f04",
          "md5": "3271b06b6f1e01528b2add272442bfb7",
          "sha256": "fb79f532e54f4d3703e36be44411770757fb22dec3ac7d1b5dabe741c6c32cf1"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3271b06b6f1e01528b2add272442bfb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 46392,
        "upload_time": "2022-08-20T18:48:47",
        "upload_time_iso_8601": "2022-08-20T18:48:47.843060Z",
        "url": "https://files.pythonhosted.org/packages/54/85/fd45e58d31caebfa573b3cbca9639b524760696bcf396e6eca3f20752f04/protobuf_to_pydantic-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bebae2490bf1604ea6fe061e0ec1dada84dad84a3bf141982309d9efe8d0f07e",
          "md5": "ebefbfd966375fe084e66576d084a08f",
          "sha256": "50462cc280f8b75b547eacac33ffc67efce3c7e30079e8e891a23fb24c0c207d"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ebefbfd966375fe084e66576d084a08f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 48547,
        "upload_time": "2022-08-20T18:48:50",
        "upload_time_iso_8601": "2022-08-20T18:48:50.584882Z",
        "url": "https://files.pythonhosted.org/packages/be/ba/e2490bf1604ea6fe061e0ec1dada84dad84a3bf141982309d9efe8d0f07e/protobuf_to_pydantic-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e187bfada84b118c75a3077518912b123ea3f3a9ea0b5e55a82e4f4a91c23822",
          "md5": "513c1ae0e15dec6b4b7d2b5187676059",
          "sha256": "1c4d1879755e68dfc5c733d544db5f9b9cf7a1cc042691de24501fe7192c1f18"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "513c1ae0e15dec6b4b7d2b5187676059",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 46405,
        "upload_time": "2022-08-20T19:05:14",
        "upload_time_iso_8601": "2022-08-20T19:05:14.941961Z",
        "url": "https://files.pythonhosted.org/packages/e1/87/bfada84b118c75a3077518912b123ea3f3a9ea0b5e55a82e4f4a91c23822/protobuf_to_pydantic-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "585c7e26bbffc3029e594b7c31dc2d2f679582242c69e4247d1d8789728867dc",
          "md5": "5042954f85246632eee1b47581d7fc57",
          "sha256": "03f572301420e2ca9ae93c5f892137bce45131e1e0c5f02aafd2b7190854496b"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5042954f85246632eee1b47581d7fc57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 48847,
        "upload_time": "2022-08-20T19:05:17",
        "upload_time_iso_8601": "2022-08-20T19:05:17.287856Z",
        "url": "https://files.pythonhosted.org/packages/58/5c/7e26bbffc3029e594b7c31dc2d2f679582242c69e4247d1d8789728867dc/protobuf_to_pydantic-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b26200e9ff66ff369041ee04610d897488f6ce2e0e5c5ae5208926c52aa79b49",
          "md5": "3190ed56c4f359dad5894bdb727f6217",
          "sha256": "fc978da3ce3f8538a9a8d59e34db96e021d78f614401b1d8fb63ca26bf9f1c0e"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3190ed56c4f359dad5894bdb727f6217",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 37956,
        "upload_time": "2022-08-23T02:29:38",
        "upload_time_iso_8601": "2022-08-23T02:29:38.584741Z",
        "url": "https://files.pythonhosted.org/packages/b2/62/00e9ff66ff369041ee04610d897488f6ce2e0e5c5ae5208926c52aa79b49/protobuf_to_pydantic-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6554bf27ace37050cc367153e94f115a3e25cd91fcf9146025fd23f493d3f1f",
          "md5": "d69bc43cd85f77bf94af58f33efd8b75",
          "sha256": "4f94a8166537897179109198ce3ad1dcf5d646c910362273d130b8fd1f938b74"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d69bc43cd85f77bf94af58f33efd8b75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 40905,
        "upload_time": "2022-08-23T02:29:41",
        "upload_time_iso_8601": "2022-08-23T02:29:41.191197Z",
        "url": "https://files.pythonhosted.org/packages/e6/55/4bf27ace37050cc367153e94f115a3e25cd91fcf9146025fd23f493d3f1f/protobuf_to_pydantic-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "049f42838ebe0ae0595dd2157034bb3159538c194adac5cb2c281a67396df462",
          "md5": "b9afcf32ff2274046576c0994a7841bb",
          "sha256": "91ad01dfb0d4e5cb20a067a5e6446bc011eb455ea6452ebff21ead5e005f80ec"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9afcf32ff2274046576c0994a7841bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 37975,
        "upload_time": "2022-08-23T08:47:47",
        "upload_time_iso_8601": "2022-08-23T08:47:47.911051Z",
        "url": "https://files.pythonhosted.org/packages/04/9f/42838ebe0ae0595dd2157034bb3159538c194adac5cb2c281a67396df462/protobuf_to_pydantic-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aaf89bb48a03fae5ae1867dfea6b2768fe4ed178ab31ae441270b2ec9bb643e",
          "md5": "e4176965956ddceec54c3c9307fd7dd6",
          "sha256": "f3269876f6f4b8db4706295bceec0a0c23336854326ba2523e4296c0a34eb5d4"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e4176965956ddceec54c3c9307fd7dd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 40924,
        "upload_time": "2022-08-23T08:47:50",
        "upload_time_iso_8601": "2022-08-23T08:47:50.672883Z",
        "url": "https://files.pythonhosted.org/packages/4a/af/89bb48a03fae5ae1867dfea6b2768fe4ed178ab31ae441270b2ec9bb643e/protobuf_to_pydantic-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ac01341397965b2c7d5a801dae6b0340f63cade6ef9a4a0ed48ebe121897328",
          "md5": "d3fe3901ca314ca89829dc5720dac8f1",
          "sha256": "ad2cef10b23ea36d4bb92a2c242194012a345afc84189dc80fca7475fb127f83"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3fe3901ca314ca89829dc5720dac8f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 56442,
        "upload_time": "2022-08-23T08:53:25",
        "upload_time_iso_8601": "2022-08-23T08:53:25.414629Z",
        "url": "https://files.pythonhosted.org/packages/5a/c0/1341397965b2c7d5a801dae6b0340f63cade6ef9a4a0ed48ebe121897328/protobuf_to_pydantic-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f19ea9f1f8807eda33fe5271539d472a30fb5f359f4481209b7043c051304ce3",
          "md5": "315c4e40d8a713bc6098732d1ef8c177",
          "sha256": "e16265839cc5cc64ed9b95ceafca191d567e9c76e9368a6976cb33ceeb6f82fb"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "315c4e40d8a713bc6098732d1ef8c177",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 58193,
        "upload_time": "2022-08-23T08:53:28",
        "upload_time_iso_8601": "2022-08-23T08:53:28.289518Z",
        "url": "https://files.pythonhosted.org/packages/f1/9e/a9f1f8807eda33fe5271539d472a30fb5f359f4481209b7043c051304ce3/protobuf_to_pydantic-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0d4a99de5dfef3521ee7f351458f8029a6be3bd5d3b69df249a3bf66cb21cda",
          "md5": "6b9a993662d9f8ad79990ffddec27085",
          "sha256": "e1e3571a0d0f6c155a6515d5818636b610ce6195be600b3d562ddfded1c82223"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b9a993662d9f8ad79990ffddec27085",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 56524,
        "upload_time": "2022-12-01T07:45:03",
        "upload_time_iso_8601": "2022-12-01T07:45:03.468177Z",
        "url": "https://files.pythonhosted.org/packages/d0/d4/a99de5dfef3521ee7f351458f8029a6be3bd5d3b69df249a3bf66cb21cda/protobuf_to_pydantic-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a169b12d7bbb7c620ac5942659f8e6403235009e223a3ba7aebc1d948d12f15",
          "md5": "3098fc2e6d907f632292e85ff63302cf",
          "sha256": "ab7cd06206507a71800f543ca0ac4dbe57375790a8ab617a5bb1e60f3ecec96f"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3098fc2e6d907f632292e85ff63302cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 58172,
        "upload_time": "2022-12-01T07:45:05",
        "upload_time_iso_8601": "2022-12-01T07:45:05.817571Z",
        "url": "https://files.pythonhosted.org/packages/0a/16/9b12d7bbb7c620ac5942659f8e6403235009e223a3ba7aebc1d948d12f15/protobuf_to_pydantic-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bdc0d66f06620609d31261f1ac5a92720a14a6fd45e4b0d5462fc6a8c0c8d4c",
          "md5": "f626e11219baf1d3e2a1451756cfb8b0",
          "sha256": "bfa2dfe235cfbadd060f7641c96b7f0e5311617c52dd5f1a23205be4ca530931"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f626e11219baf1d3e2a1451756cfb8b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 56540,
        "upload_time": "2022-12-01T08:02:08",
        "upload_time_iso_8601": "2022-12-01T08:02:08.825874Z",
        "url": "https://files.pythonhosted.org/packages/0b/dc/0d66f06620609d31261f1ac5a92720a14a6fd45e4b0d5462fc6a8c0c8d4c/protobuf_to_pydantic-0.1.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85f745a62580fb320933fe6da948fe67cfd352b9079f5b010d3bb1038e1df13c",
          "md5": "d9840549c47e5867895aeb3707ef389d",
          "sha256": "9d5120fe2102447f352cfaf17f5446d7b629b6731e91a9ad1bb89cb0ddfaf7dc"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d9840549c47e5867895aeb3707ef389d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 58187,
        "upload_time": "2022-12-01T08:02:11",
        "upload_time_iso_8601": "2022-12-01T08:02:11.781641Z",
        "url": "https://files.pythonhosted.org/packages/85/f7/45a62580fb320933fe6da948fe67cfd352b9079f5b010d3bb1038e1df13c/protobuf_to_pydantic-0.1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1501b1f2e0457ef7ce15493c839100aa746ed8e66b309408678e11543682d5ba",
          "md5": "00c099b1a049c207ba33a630575a1232",
          "sha256": "f1f51e458027cfe9e9675580d33035d44487726bbdac7ea2f1ac473a209d7132"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00c099b1a049c207ba33a630575a1232",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 91643,
        "upload_time": "2022-12-29T07:42:11",
        "upload_time_iso_8601": "2022-12-29T07:42:11.282448Z",
        "url": "https://files.pythonhosted.org/packages/15/01/b1f2e0457ef7ce15493c839100aa746ed8e66b309408678e11543682d5ba/protobuf_to_pydantic-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbea238659af0269d660bbe058996f4954b23c2a8e48690ce391b0a4c18cbfc3",
          "md5": "4d48b806c16840f09eb47c474ba2d9f8",
          "sha256": "add696717edb83b392d0a476470b9e03ef02daa2ccd356f1e8fd7fcb44693170"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4d48b806c16840f09eb47c474ba2d9f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 97339,
        "upload_time": "2022-12-29T07:42:13",
        "upload_time_iso_8601": "2022-12-29T07:42:13.723489Z",
        "url": "https://files.pythonhosted.org/packages/fb/ea/238659af0269d660bbe058996f4954b23c2a8e48690ce391b0a4c18cbfc3/protobuf_to_pydantic-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "254c6b60c0bf1c7b256a5fe1737e4211043b8a65eaa72b9270c30d8b4194afd4",
          "md5": "f76d6eb8dbbf1faa8f780c4bd6a26e85",
          "sha256": "763facb1d30698a8e30c0373584d442d48009a0fffe507aa47eed20005d7e229"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f76d6eb8dbbf1faa8f780c4bd6a26e85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 91725,
        "upload_time": "2023-02-15T09:57:27",
        "upload_time_iso_8601": "2023-02-15T09:57:27.438161Z",
        "url": "https://files.pythonhosted.org/packages/25/4c/6b60c0bf1c7b256a5fe1737e4211043b8a65eaa72b9270c30d8b4194afd4/protobuf_to_pydantic-0.1.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38c18895ae8d5e58b88dffb734d786d2e7fc385f53656bdbdf9ff86776268bfc",
          "md5": "79ed452212783d9c49cb8c32910aef72",
          "sha256": "401db2e51615e2a350ac6c804bdeaf7fd8c831c5b3ddfbd3f38eb2bc9a2bb9c7"
        },
        "downloads": -1,
        "filename": "protobuf_to_pydantic-0.1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "79ed452212783d9c49cb8c32910aef72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 97197,
        "upload_time": "2023-02-15T09:57:29",
        "upload_time_iso_8601": "2023-02-15T09:57:29.683067Z",
        "url": "https://files.pythonhosted.org/packages/38/c1/8895ae8d5e58b88dffb734d786d2e7fc385f53656bdbdf9ff86776268bfc/protobuf_to_pydantic-0.1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "254c6b60c0bf1c7b256a5fe1737e4211043b8a65eaa72b9270c30d8b4194afd4",
        "md5": "f76d6eb8dbbf1faa8f780c4bd6a26e85",
        "sha256": "763facb1d30698a8e30c0373584d442d48009a0fffe507aa47eed20005d7e229"
      },
      "downloads": -1,
      "filename": "protobuf_to_pydantic-0.1.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f76d6eb8dbbf1faa8f780c4bd6a26e85",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 91725,
      "upload_time": "2023-02-15T09:57:27",
      "upload_time_iso_8601": "2023-02-15T09:57:27.438161Z",
      "url": "https://files.pythonhosted.org/packages/25/4c/6b60c0bf1c7b256a5fe1737e4211043b8a65eaa72b9270c30d8b4194afd4/protobuf_to_pydantic-0.1.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38c18895ae8d5e58b88dffb734d786d2e7fc385f53656bdbdf9ff86776268bfc",
        "md5": "79ed452212783d9c49cb8c32910aef72",
        "sha256": "401db2e51615e2a350ac6c804bdeaf7fd8c831c5b3ddfbd3f38eb2bc9a2bb9c7"
      },
      "downloads": -1,
      "filename": "protobuf_to_pydantic-0.1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "79ed452212783d9c49cb8c32910aef72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 97197,
      "upload_time": "2023-02-15T09:57:29",
      "upload_time_iso_8601": "2023-02-15T09:57:29.683067Z",
      "url": "https://files.pythonhosted.org/packages/38/c1/8895ae8d5e58b88dffb734d786d2e7fc385f53656bdbdf9ff86776268bfc/protobuf_to_pydantic-0.1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}