{
  "info": {
    "author": "Roy Zheng",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Build Status](https://travis-ci.org/wontonst/distributed-counter-py.svg?branch=initial)](https://travis-ci.org/wontonst/distributed-counter-py)\n[![Documentation Status](https://readthedocs.org/projects/distributed-counter-py/badge/?version=latest)](http://distributed-counter-py.readthedocs.io/en/latest/?badge=latest)\n\n# Overview\n\n`distributed_counter` is a python package for maintaining counters across clusters of computers.\nIt leverages [AWS DynamoDB](https://aws.amazon.com/dynamodb) for storage and atomicity of the counter.\n\n# Installation\n\n`distributed_counter` is compatible with `python2` and `python3`.\nSimply use `pip` to install.\n\n```\npip install distributed_counter\n```\n\nYou'll also want to set up your [aws configurations](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html).\n\n# Usage\n\nThe interface for `distributed_counter` is very simple.\nEverything is done through the `DistributedCounter` class.\nTo instantiate:\n\n```\nfrom distributed_counter import DistributedCounter\n\ncounter = DistributedCounter('my_dynamo_table_name')\n```\n\nYou can pass anything in `kwargs` to DistributedCounter and they will be propagated to the boto3 Session, e.g.\n\n```\ncounter = DistributedCounter('mytable', region_name='us-west-1', aws_access_key_id='somekey',\n                             aws_secret_access_key='somesecret')\n```\n\nThere are also special parameters `config` and `endpoint_url` which get passed to the\nDynamoDB ServiceResource. \n\n## Table Creation\n\nThe dynamodb table has one HASH key called `key`. You can create the table yourself, or you can use `create_table`.\n\n```\ncounter.create_table()\n```\n\n`distributed_counter` is smart enough to wait for the table to finish creation on your next call to the table.\n\n## Getting/Setting\n\nNext, you can set a key using `put` and get it with `get`:\n\n```\ncounter.put('mykey', 0)\ncounter.get('mykey')\n0\n```\n\n## Increment/Decrementing\n\nFinally, you can `increment`/`decrement`.\n\n```\ncounter.increment('mykey', 10)\n10\ncounter.increment('mykey', 5)\n15\ncounter.decrement('mykey', 14)\n1\n```\n\nNote that the returned value is the new value.\n\nYou can use `increment`/`decrement` with a default.\nThis is the same as doing a `put` then an `increment`/`decrement`.\n\n```\ncounter.increment('nonexistantkey', 0, 0)\n0\ncounter.increment('someotherkey', 0, 10)\n10\ncounter.increment('yetanotherkey', 1, 10)\n11\n```\n\n## Example Use\n\nLet's say we want to run a function every 100 calls to an API.\nIn your API, you can put:\n\n```\nif not counter.increment('mykey', 1) % 100:\n    run_function()\n    counter.decrement('mykey', 100)\n```\n\nThis guarantees that no matter how many servers you have, every 100 calls to your API will run your function.\n\nThe modulo is used instead of `==` because there is a corner case where hypothetically you could increment to 200 before\nthe decrement finishes.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wontonst/distributed-counter-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "distributed-counter",
    "package_url": "https://pypi.org/project/distributed-counter/",
    "platform": "",
    "project_url": "https://pypi.org/project/distributed-counter/",
    "project_urls": {
      "Homepage": "https://github.com/wontonst/distributed-counter-py"
    },
    "release_url": "https://pypi.org/project/distributed-counter/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "distributed increment/decrement counter leveraging dynamodb",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7019112,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ba9a47ba93cd91ff82d5924d40ee53ce57ba24ecd6e40893c2f088ea2ba230a",
          "md5": "8be4f6f3ffe97569d17325c8c51163da",
          "sha256": "248dedb9d25b6c9bab819813a6191d907e9794512b66f6fe670eb6a083b0b46d"
        },
        "downloads": -1,
        "filename": "distributed_counter-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8be4f6f3ffe97569d17325c8c51163da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3356,
        "upload_time": "2018-04-12T21:09:03",
        "upload_time_iso_8601": "2018-04-12T21:09:03.607008Z",
        "url": "https://files.pythonhosted.org/packages/1b/a9/a47ba93cd91ff82d5924d40ee53ce57ba24ecd6e40893c2f088ea2ba230a/distributed_counter-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "157d95c7522717ad1c2e9d6fe7965f06d8b10b99779b99c3643fc132700bb1a7",
          "md5": "b25cc34365dec31306d4a6234eee7be0",
          "sha256": "fcd0b029643fb537c77e8f9470aecd2a3d15c0a05714eb0c590430fa3faa4701"
        },
        "downloads": -1,
        "filename": "distributed_counter-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b25cc34365dec31306d4a6234eee7be0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3297,
        "upload_time": "2018-04-17T18:20:25",
        "upload_time_iso_8601": "2018-04-17T18:20:25.554336Z",
        "url": "https://files.pythonhosted.org/packages/15/7d/95c7522717ad1c2e9d6fe7965f06d8b10b99779b99c3643fc132700bb1a7/distributed_counter-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70f7bdf2d62e068abd3da01e63825fc58deb2a37fc0c5e00350c8095ae9fe5f4",
          "md5": "adb54601d8ddce8426e7c3675c874ca3",
          "sha256": "6ee478bd1d4e3fcf9b59c10d7622b3067e7c690cf9cf7e1633090f141cf00dcf"
        },
        "downloads": -1,
        "filename": "distributed_counter-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "adb54601d8ddce8426e7c3675c874ca3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4807,
        "upload_time": "2020-04-14T18:18:19",
        "upload_time_iso_8601": "2020-04-14T18:18:19.672329Z",
        "url": "https://files.pythonhosted.org/packages/70/f7/bdf2d62e068abd3da01e63825fc58deb2a37fc0c5e00350c8095ae9fe5f4/distributed_counter-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70f7bdf2d62e068abd3da01e63825fc58deb2a37fc0c5e00350c8095ae9fe5f4",
        "md5": "adb54601d8ddce8426e7c3675c874ca3",
        "sha256": "6ee478bd1d4e3fcf9b59c10d7622b3067e7c690cf9cf7e1633090f141cf00dcf"
      },
      "downloads": -1,
      "filename": "distributed_counter-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "adb54601d8ddce8426e7c3675c874ca3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4807,
      "upload_time": "2020-04-14T18:18:19",
      "upload_time_iso_8601": "2020-04-14T18:18:19.672329Z",
      "url": "https://files.pythonhosted.org/packages/70/f7/bdf2d62e068abd3da01e63825fc58deb2a37fc0c5e00350c8095ae9fe5f4/distributed_counter-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}