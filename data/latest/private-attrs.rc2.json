{
  "info": {
    "author": "Fernando Enzo Guarini",
    "author_email": "fernandoenzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# private-attrs\n\n[![PyPI](https://img.shields.io/pypi/v/private-attrs?label=latest)](https://pypi.org/project/private-attrs/)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/private-attrs)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/private-attrs)\n![PyPI - Status](https://img.shields.io/pypi/status/private-attrs)\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/fernandoenzo/private-attrs)\n[![GitHub last commit](https://img.shields.io/github/last-commit/fernandoenzo/private-attrs)](https://github.com/fernandoenzo/private-attrs)\n[![Build Status](https://img.shields.io/travis/com/fernandoenzo/private-attrs?label=tests)](https://travis-ci.com/fernandoenzo/private-attrs)\n![Maintenance](https://img.shields.io/maintenance/yes/2020)\n\nThis little library, consisting of a single module, provides support for easy addition of **truly private attributes**\n inside classes, which are totally unreachable from outside the class definition, **as in C++ private clause**.\n\n## Table of contents\n\n<!--ts-->\n  * [Installation](#installation)\n  * [Usage](#usage)\n      * [A simple example](#a-simple-example)\n      * [An example with proxy=True](#an-example-with-proxytrue)\n  * [A word about compiling](#a-word-about-compiling)\n  * [Contributing](#contributing)\n  * [License](#license)\n<!--te-->\n\n## Installation\n\nUse the package manager [**pip**](https://pip.pypa.io/en/stable/) to install **private-attrs**.\n\n```bash\npip3 install private-attrs\n```\n\n## Usage\n\nThis is a simple schema on how a custom class could use private attributes.\n```python\nfrom private_attrs import PrivateAttrs\n\ndef MyClass():\n    p = PrivateAttrs()\n\n    class MyClass:\n        def __init__(self):\n            p.register_instance(self)\n            \n        # From now on, we'll define our public attrs with 'self.attr' syntax as usual,\n        # and private ones with 'p.attr' or 'p.attr_static'.\n\n        def __del__(self):\n            p.delete(self)\n\n    MyClass.__qualname__ = 'MyClass'    \n\n    return MyClass\n\nMyClass = MyClass()  # override the function definition\n```\nAs you can see, we first need to define the class inside a function. Outside that class, but inside the function scope, we\n instantiate a `PrivateAttrs` object.  \n\nNow, inside `MyClass`, if we plan to have private instance attributes, and not just static ones, it's mandatory to\n register, in the `__init__()` method, the instance by calling the `register_instance()` function.\n\nFinally we return `MyClass` and we override the function definition.\n- - -\n\n#### A simple example\n\nLet's now dive into a more complete example:\n\n```python\nfrom private_attrs import PrivateAttrs\n\ndef Person():\n    p = PrivateAttrs()\n\n    class Person:\n        def __init__(self, name, social_security_number):\n            p.register_instance(self)\n            self.name = name\n            p.ssn = social_security_number\n\n        @property\n        def ssn(self):\n            return p.ssn\n\n        def __eq__(self, other):\n            return self.ssn == other.ssn\n\n        def __hash__(self):\n            return hash(self.ssn)\n\n        def __str__(self):\n            return f\"{self.name} - {self.ssn}\"\n\n        def __del__(self):\n            p.delete(self)\n\n    Person.__qualname__ = 'Person'\n\n    return Person\n\nPerson = Person()\n```\nAlthough a person can change their name, surname or even their sex, it's really unlikely (not to say impossible) for someone\n to change their social security number (SSN).\n\nThat's why we store the SSN as a private attribute, safe, unmodifiable, and we can rely on it to compare whether two people\n are the same person.\n- - -\n\n\n#### An example with proxy=True\n\nIf we are working with the Python `multiprocessing` library and we want to create a class with private attributes that are\n accessible and modifiable from different running processes (we already know that, unlike threads, processes don't share\n  memory space), we need to instantiate the `PrivateAttrs` object with the argument `proxy = True`.  \n\nLet's see an example:\n\n```python\nfrom private_attrs import PrivateAttrs\n\n\ndef Person():\n    p = PrivateAttrs(proxy=True)\n\n    class Person:\n        def __init__(self, name, social_security_number):\n            p.register_instance(self)\n            self.name = name\n            p.cell_phones = p.manager.list()\n            p.ssn = social_security_number\n\n        @property\n        def ssn(self):\n            return p.ssn\n\n        @property\n        def cell_phones(self):\n            return tuple(p.cell_phones)\n\n        def add_cell_phone(self, phone):\n            p.cell_phones.append(phone)\n\n        def __str__(self):\n            return f\"{self.name} - {self.ssn} - {self.cell_phones}\"\n\n        def __del__(self):\n            p.delete(self)\n\n        def __getstate__(self):\n            state = dict(self.__dict__)\n            state['private'] = p.getstate(self)\n            return state\n\n        def __setstate__(self, state):\n            private = state.pop('private')\n            p.setstate(private, self)\n            self.__dict__ = state\n\n    Person.__qualname__ = 'Person'    \n\n    return Person\n\nPerson = Person()\n```\n\nBy doing this, all the private attributes that we store are automatically available in all processes, and you can modify\n them from anyone.\n\nPay particular attention to certain specific attributes that need to be instantiated using the `Manager` class, such as\n lists or dictionaries. Fortunately, there is an attached manager object in the `PrivateAttrs` class to simplify life for\n  the programmer.\n \nAlso be aware of the need to define `__getstate__()` and `__setstate__()` magic methods as you see them so the class can be\n correctly serialized and deserialized with all its private attributes when shared between processes.\n\nYou should know that, the way we wrote this `Person` class, it's impossible for other processes to modify the public \n `name` attribute and make that change visible for the rest. This is because this attribute has not been instantiated with\n  `Manager.Value()` nor inside a `Manager.Namespace()` or similar.\n\nOne possible workaround if you don't want to use the mentioned methods for storing shared simple attributes like `str` or\n `int` would be to make them private and then make a getter (`@property`) and a setter for each one. So the former\n  `Person` class would look like this:\n\n```python\nclass Person:\n    def __init__(self, name, social_security_number):\n        p.register_instance(self)\n        p.name = name\n        p.cell_phones = p.manager.list()\n        p.ssn = social_security_number\n\n    @property\n    def name(self):\n        return p.name\n\n    @name.setter\n    def name(self, name):\n        p.name = name\n\n    @property\n    def ssn(self):\n        return p.ssn\n\n    @property\n    def cell_phones(self):\n        return tuple(p.cell_phones)\n\n    def add_cell_phone(self, phone):\n        p.cell_phones.append(phone)\n\n    def __str__(self):\n        return f\"{self.name} - {self.ssn} - {self.cell_phones}\"\n\n    def __del__(self):\n        p.delete(self)\n\n    def __getstate__(self):\n        state = dict(self.__dict__)\n        state['private'] = p.getstate(self)\n        return state\n\n    def __setstate__(self, state):\n        private = state.pop('private')\n        p.setstate(self, private)\n        self.__dict__ = state\n```\n\n## A word about compiling\n\nIf you plan to compile your program or library using a tool like Cython, Nuitka or similar, you should know that\n private-attrs uses the Python `inspect` module to provide the developer with a friendly interface, which does not\n behave as usual when the program is compiled to C. All you have to do to avoid compilation problems is to use the\n explicit private attribute getter and setter instead of the implicit declarations, only for non-static private attributes.\n\nFor example, replace this:\n\n```python\nclass Person:\n    \n    @property\n    def name(self):\n        return p.name\n\n    @name.setter\n    def name(self, name):\n        p.name = name\n```\n\nFor this\n\n```python\nclass Person:\n    \n    @property\n    def name(self):\n        return p.get_private_attr(self, 'name')\n\n    @name.setter\n    def name(self, name):\n        p.set_private_attr(self, 'name', name)\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\n![PyPI - License](https://img.shields.io/pypi/l/private-attrs)\n\nThis library is licensed under the\n [GNU General Public License v3 or later (GPLv3+)](https://choosealicense.com/licenses/gpl-3.0/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/fernandoenzo/private-attrs/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fernandoenzo/private-attrs/",
    "keywords": "attr attribute private static",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "private-attrs",
    "package_url": "https://pypi.org/project/private-attrs/",
    "platform": "",
    "project_url": "https://pypi.org/project/private-attrs/",
    "project_urls": {
      "Download": "https://github.com/fernandoenzo/private-attrs/",
      "Homepage": "https://github.com/fernandoenzo/private-attrs/",
      "Source": "https://github.com/fernandoenzo/private-attrs/"
    },
    "release_url": "https://pypi.org/project/private-attrs/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "This module provides support for easy addition of private attributes inside your custom objects, which are totally unreachable from outside the class definition, as in C++ 'private' clause.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12802037,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92607402f987e96d33c143b06722555d2690d6e9eba7e805c25622e7668280a9",
          "md5": "20355d7fc69c14dce10e4e91b142f8a2",
          "sha256": "1d6edf2b3be0c69431211517d240a2d46095eb6fc68609c2ad5ab953f6d79364"
        },
        "downloads": -1,
        "filename": "private_attrs-1.0.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "20355d7fc69c14dce10e4e91b142f8a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18273,
        "upload_time": "2020-05-20T23:15:34",
        "upload_time_iso_8601": "2020-05-20T23:15:34.315779Z",
        "url": "https://files.pythonhosted.org/packages/92/60/7402f987e96d33c143b06722555d2690d6e9eba7e805c25622e7668280a9/private_attrs-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81fa2eececd8e3cca4b89c2faa6db9f38dcdc06facd054c12e71cc1da45415d5",
          "md5": "504f920c7d513bffb33998078d6dd3f0",
          "sha256": "a9fc5244753db56e86dc3af027fcb7abdc0c2be4eb6c76e257abf2c1108a6430"
        },
        "downloads": -1,
        "filename": "private-attrs-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "504f920c7d513bffb33998078d6dd3f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6525,
        "upload_time": "2020-05-20T23:15:36",
        "upload_time_iso_8601": "2020-05-20T23:15:36.136717Z",
        "url": "https://files.pythonhosted.org/packages/81/fa/2eececd8e3cca4b89c2faa6db9f38dcdc06facd054c12e71cc1da45415d5/private-attrs-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b187df296f7a0b671395a471b28604f534c8199dba8c4fbd080ca2f073056cd8",
          "md5": "373f9aec0502f148b3bb444751aa076c",
          "sha256": "624be3ae4974371b17fef009b37d3f842246dc977a66e9a18adb7e851800b42e"
        },
        "downloads": -1,
        "filename": "private_attrs-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "373f9aec0502f148b3bb444751aa076c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18560,
        "upload_time": "2022-02-06T11:11:58",
        "upload_time_iso_8601": "2022-02-06T11:11:58.570790Z",
        "url": "https://files.pythonhosted.org/packages/b1/87/df296f7a0b671395a471b28604f534c8199dba8c4fbd080ca2f073056cd8/private_attrs-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc3a9d8f55ed61215c3454174942d73614c68fc5aacf7c3bd1d87e4a4614351a",
          "md5": "b26edc1db9ead1ee84057815b47333f6",
          "sha256": "617be45f9900fed9830d1c4a9c976d6694864cec17c1efe13af1ff7f134959c4"
        },
        "downloads": -1,
        "filename": "private-attrs-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b26edc1db9ead1ee84057815b47333f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18115,
        "upload_time": "2022-02-06T11:11:59",
        "upload_time_iso_8601": "2022-02-06T11:11:59.873980Z",
        "url": "https://files.pythonhosted.org/packages/dc/3a/9d8f55ed61215c3454174942d73614c68fc5aacf7c3bd1d87e4a4614351a/private-attrs-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b187df296f7a0b671395a471b28604f534c8199dba8c4fbd080ca2f073056cd8",
        "md5": "373f9aec0502f148b3bb444751aa076c",
        "sha256": "624be3ae4974371b17fef009b37d3f842246dc977a66e9a18adb7e851800b42e"
      },
      "downloads": -1,
      "filename": "private_attrs-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "373f9aec0502f148b3bb444751aa076c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18560,
      "upload_time": "2022-02-06T11:11:58",
      "upload_time_iso_8601": "2022-02-06T11:11:58.570790Z",
      "url": "https://files.pythonhosted.org/packages/b1/87/df296f7a0b671395a471b28604f534c8199dba8c4fbd080ca2f073056cd8/private_attrs-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc3a9d8f55ed61215c3454174942d73614c68fc5aacf7c3bd1d87e4a4614351a",
        "md5": "b26edc1db9ead1ee84057815b47333f6",
        "sha256": "617be45f9900fed9830d1c4a9c976d6694864cec17c1efe13af1ff7f134959c4"
      },
      "downloads": -1,
      "filename": "private-attrs-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b26edc1db9ead1ee84057815b47333f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 18115,
      "upload_time": "2022-02-06T11:11:59",
      "upload_time_iso_8601": "2022-02-06T11:11:59.873980Z",
      "url": "https://files.pythonhosted.org/packages/dc/3a/9d8f55ed61215c3454174942d73614c68fc5aacf7c3bd1d87e4a4614351a/private-attrs-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}