{
  "info": {
    "author": "Erik Moqvist",
    "author_email": "erik.moqvist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "|appveyor|_\n|coverage|_\n|nala|_\n\nAbout\n=====\n\nCAN BUS tools in Python 3.\n\n- `DBC`_, `KCD`_, SYM, ARXML 4 and CDD file parsing.\n\n- CAN message encoding and decoding.\n\n- Simple and extended signal multiplexing.\n\n- Diagnostic DID encoding and decoding.\n\n- ``candump`` output decoder.\n\n- Node `tester`_.\n\n- `C` source code generator.\n\n- CAN bus monitor.\n\n- Graphical plots of signals.\n\nProject homepage: https://github.com/eerimoq/cantools\n\nDocumentation: https://cantools.readthedocs.io\n\nInstallation\n============\n\n.. code-block:: python\n\n    pip install cantools\n\nExample usage\n=============\n\nScripting\n---------\n\nThe example starts by parsing a `small DBC-file`_ and printing its\nmessages and signals.\n\n.. code-block:: python\n\n   >>> import cantools\n   >>> from pprint import pprint\n   >>> db = cantools.database.load_file('tests/files/dbc/motohawk.dbc')\n   >>> db.messages\n   [message('ExampleMessage', 0x1f0, False, 8, 'Example message used as template in MotoHawk models.')]\n   >>> example_message = db.get_message_by_name('ExampleMessage')\n   >>> pprint(example_message.signals)\n   [signal('Enable', 7, 1, 'big_endian', False, 1.0, 0, 0.0, 0.0, '-', False, None, {0: 'Disabled', 1: 'Enabled'}, None),\n    signal('AverageRadius', 6, 6, 'big_endian', False, 0.1, 0, 0.0, 5.0, 'm', False, None, None, ''),\n    signal('Temperature', 0, 12, 'big_endian', True, 0.01, 250, 229.53, 270.47, 'degK', False, None, None, None)]\n\nThe example continues `encoding`_ a message and sending it on a CAN\nbus using the `python-can`_ package.\n\n.. code-block:: python\n\n   >>> import can\n   >>> can_bus = can.interface.Bus('vcan0', bustype='socketcan')\n   >>> data = example_message.encode({'Temperature': 250.1, 'AverageRadius': 3.2, 'Enable': 1})\n   >>> message = can.Message(arbitration_id=example_message.frame_id, data=data)\n   >>> can_bus.send(message)\n\nAlternatively, a message can be encoded using the `encode_message()`_\nmethod on the database object.\n\nThe last part of the example receives and `decodes`_ a CAN message.\n\n.. code-block:: python\n\n   >>> message = can_bus.recv()\n   >>> db.decode_message(message.arbitration_id, message.data)\n   {'AverageRadius': 3.2, 'Enable': 'Enabled', 'Temperature': 250.09}\n\nSee `examples`_ for additional examples.\n\nCommand line tool\n-----------------\n\nThe decode subcommand\n^^^^^^^^^^^^^^^^^^^^^\n\nDecode CAN frames captured with the Linux program ``candump``.\n\n.. code-block:: text\n\n   $ candump vcan0 | cantools decode tests/files/dbc/motohawk.dbc\n     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::\n   ExampleMessage(\n       Enable: 'Enabled' -,\n       AverageRadius: 0.0 m,\n       Temperature: 255.92 degK\n   )\n     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::\n   ExampleMessage(\n       Enable: 'Enabled' -,\n       AverageRadius: 0.0 m,\n       Temperature: 255.92 degK\n   )\n     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::\n   ExampleMessage(\n       Enable: 'Enabled' -,\n       AverageRadius: 0.0 m,\n       Temperature: 255.92 degK\n   )\n\nAlternatively, the decoded message can be printed on a single line:\n\n.. code-block:: text\n\n   $ candump vcan0 | cantools decode --single-line tests/files/dbc/motohawk.dbc\n     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)\n     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)\n     vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)\n\nThe plot subcommand\n^^^^^^^^^^^^^^^^^^^\n\nThe plot subcommand is similar to the decode subcommand but messages are visualized using `matplotlib`_ instead of being printed to stdout.\n\n.. code-block:: bash\n\n    $ cat candump-2021-01-04_180521.log\n    (1609779922.655421) vcan0 00000343#B204B9049C049C04\n    (1609779922.655735) vcan0 0000024A#120527052E051905\n    (1609779923.657524) vcan0 00000343#C404C404CB04C404\n    (1609779923.658086) vcan0 0000024A#8B058B058B059205\n    (1609779924.659912) vcan0 00000343#5C04790479045504\n    (1609779924.660471) vcan0 0000024A#44064B0659064406\n    (1609779925.662277) vcan0 00000343#15040704F203F203\n    (1609779925.662837) vcan0 0000024A#8B069906A706A706\n    (1609779926.664191) vcan0 00000343#BC03B503A703BC03\n    (1609779926.664751) vcan0 0000024A#A006A706C406C406\n\n    $ cat candump-2021-01-04_180521.log | cantools plot tests/files/dbc/abs.dbc\n\n.. image:: docs/plot-1.png\n\nIf you don't want to show all signals you can select the desired signals with command line arguments.\nA ``*`` can stand for any number of any character, a ``?`` for exactly one arbitrary character.\nSignals separated by a ``-`` are displayed in separate subplots.\nOptionally a format can be specified after a signal, separated by a colon.\n\n.. code-block:: bash\n\n    $ cat candump-2021-01-04_180521.log | cantools plot tests/files/dbc/abs.dbc '*33.*fl:-<' '*33.*fr:->' - '*33.*rl:-<' '*33.*rr:->'\n\n.. image:: docs/plot-2.png\n\nFor more information see\n\n.. code-block:: bash\n\n    $ cantools plot --help\n\nThe dump subcommand\n^^^^^^^^^^^^^^^^^^^\n\nDump given database in a human readable format:\n\n.. code-block:: text\n\n   $ cantools dump tests/files/dbc/motohawk.dbc\n   ================================= Messages =================================\n\n     ------------------------------------------------------------------------\n\n     Name:       ExampleMessage\n     Id:         0x1f0\n     Length:     8 bytes\n     Cycle time: - ms\n     Senders:    PCM1\n     Layout:\n\n                             Bit\n\n                7   6   5   4   3   2   1   0\n              +---+---+---+---+---+---+---+---+\n            0 |<-x|<---------------------x|<--|\n              +---+---+---+---+---+---+---+---+\n                |                       +-- AverageRadius\n                +-- Enable\n              +---+---+---+---+---+---+---+---+\n            1 |-------------------------------|\n              +---+---+---+---+---+---+---+---+\n            2 |----------x|   |   |   |   |   |\n        B     +---+---+---+---+---+---+---+---+\n        y               +-- Temperature\n        t     +---+---+---+---+---+---+---+---+\n        e   3 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            4 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            5 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            6 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            7 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n\n     Signal tree:\n\n       -- {root}\n          +-- Enable\n          +-- AverageRadius\n          +-- Temperature\n\n     Signal choices:\n\n       Enable\n           0 Disabled\n           1 Enabled\n\n     ------------------------------------------------------------------------\n\nThe generate C source subcommand\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGenerate `C` source code from given database.\n\nThe generated code contains:\n\n- Message `structs`_.\n\n- Message `pack`_ and `unpack`_ functions.\n\n- Signal `encode`_ and `decode`_ functions.\n\n- Frame id, length, type, cycle time and signal choices `defines`_.\n\nKnown limitations:\n\n- The maximum signal size is 64 bits, which in practice is never\n  exceeded.\n\nBelow is an example of how to generate C source code from a\ndatabase. The database is ``tests/files/dbc/motohawk.dbc``.\n\n.. code-block:: text\n\n   $ cantools generate_c_source tests/files/dbc/motohawk.dbc\n   Successfully generated motohawk.h and motohawk.c.\n\nSee `motohawk.h`_ and `motohawk.c`_ for the contents of the generated\nfiles.\n\nIn the next example we use ``--database-name`` to set a custom\nnamespace for all generated types, defines and functions. The output\nfile names are also changed by this option.\n\n.. code-block:: text\n\n   $ cantools generate_c_source --database-name my_database_name tests/files/dbc/motohawk.dbc\n   Successfully generated my_database_name.h and my_database_name.c.\n\nSee `my_database_name.h`_ and `my_database_name.c`_ for the contents\nof the generated files.\n\nIn the last example we use ``--no-floating-point-numbers`` to generate\ncode without floating point types, i.e. ``float`` and ``double``.\n\n.. code-block:: text\n\n   $ cantools generate_c_source --no-floating-point-numbers tests/files/dbc/motohawk.dbc\n   Successfully generated motohawk.h and motohawk.c.\n\nSee `motohawk_no_floating_point_numbers.h`_ and\n`motohawk_no_floating_point_numbers.c`_ for the contents of the\ngenerated files.\n\nOther C code generators:\n\n- http://www.coderdbc.com\n\n- https://github.com/howerj/dbcc\n\n- https://github.com/lonkamikaze/hsk-libs/blob/master/scripts/dbc2c.awk\n\n- https://sourceforge.net/projects/comframe/\n\nThe monitor subcommand\n^^^^^^^^^^^^^^^^^^^^^^\n\nMonitor CAN bus traffic in a text based user interface.\n\n.. code-block:: text\n\n   $ cantools monitor tests/files/dbc/motohawk.dbc\n\n.. image:: https://github.com/eerimoq/cantools/raw/master/docs/monitor.png\n\nThe menu at the bottom of the monitor shows the available commands.\n\n- Quit: Quit the monitor. Ctrl-C can be used as well.\n\n- Filter: Only display messages matching given regular\n  expression. Press <Enter> to return to the menu from the filter\n  input line.\n\n- Play/Pause: Toggle between playing and paused (or running and freezed).\n\n- Reset: Reset the monitor to its initial state.\n\nContributing\n============\n\n#. Fork the repository.\n\n#. Install prerequisites.\n\n   .. code-block:: text\n\n      pip install -r requirements.txt\n\n#. Implement the new feature or bug fix.\n\n#. Implement test case(s) to ensure that future changes do not break\n   legacy.\n\n#. Run the tests.\n\n   .. code-block:: text\n\n      make test\n\n#. Create a pull request.\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/eerimoq/cantools?svg=true\n.. _appveyor: https://ci.appveyor.com/project/eerimoq/cantools/branch/master\n\n.. |coverage| image:: https://coveralls.io/repos/github/eerimoq/cantools/badge.svg?branch=master\n.. _coverage: https://coveralls.io/github/eerimoq/cantools\n\n.. |nala| image:: https://img.shields.io/badge/nala-test-blue.svg\n.. _nala: https://github.com/eerimoq/nala\n\n.. _small DBC-file: https://github.com/eerimoq/cantools/blob/master/tests/files/dbc/motohawk.dbc\n\n.. _motohawk.dbc: https://github.com/eerimoq/cantools/blob/master/tests/files/dbc/motohawk.dbc\n\n.. _python-can: https://python-can.readthedocs.io/en/master/\n\n.. _DBC: http://www.socialledge.com/sjsu/index.php?title=DBC_Format\n\n.. _KCD: https://github.com/julietkilo/kcd\n\n.. _tester: http://cantools.readthedocs.io/en/latest/#cantools.tester.Tester\n\n.. _encoding: http://cantools.readthedocs.io/en/latest/#cantools.database.can.Message.encode\n\n.. _encode_message(): http://cantools.readthedocs.io/en/latest/#cantools.database.can.Database.encode_message\n\n.. _decodes: http://cantools.readthedocs.io/en/latest/#cantools.database.can.Database.decode_message\n\n.. _examples: https://github.com/eerimoq/cantools/blob/master/examples\n\n.. _structs: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L58\n\n.. _pack: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L88\n\n.. _unpack: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L102\n\n.. _encode: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L116\n\n.. _decode: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L125\n\n.. _defines: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L42\n\n.. _motohawk.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h\n\n.. _motohawk.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.c\n\n.. _my_database_name.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/my_database_name.h\n\n.. _my_database_name.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/my_database_name.c\n\n.. _motohawk_no_floating_point_numbers.h: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.h\n\n.. _motohawk_no_floating_point_numbers.c: https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.c\n\n.. _matplotlib: https://matplotlib.org/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lagerdata/cantools",
    "keywords": "can,can bus,dbc,kcd,automotive",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lager-cantools",
    "package_url": "https://pypi.org/project/lager-cantools/",
    "platform": "",
    "project_url": "https://pypi.org/project/lager-cantools/",
    "project_urls": {
      "Homepage": "https://github.com/lagerdata/cantools"
    },
    "release_url": "https://pypi.org/project/lager-cantools/36.1.0/",
    "requires_dist": [
      "bitstruct (>=6.0.0)",
      "python-can (>=2.2.0)",
      "textparser (>=0.21.1)",
      "diskcache",
      "argparse-addons"
    ],
    "requires_python": "",
    "summary": "CAN BUS tools.",
    "version": "36.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9111379,
  "releases": {
    "36.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d360fb72416be669c4cbdf98c656a4eaa22c0feb733ee8416445b70ce482044a",
          "md5": "9e863bd3aebff7b355d0afd2eb6ccd2e",
          "sha256": "917c7bec122a88ef8ff27e9c8917c3d96c9a4b49ffdb1d7329107d82f249f882"
        },
        "downloads": -1,
        "filename": "lager_cantools-36.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e863bd3aebff7b355d0afd2eb6ccd2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 81924,
        "upload_time": "2021-01-12T04:26:31",
        "upload_time_iso_8601": "2021-01-12T04:26:31.906367Z",
        "url": "https://files.pythonhosted.org/packages/d3/60/fb72416be669c4cbdf98c656a4eaa22c0feb733ee8416445b70ce482044a/lager_cantools-36.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cacb8818473450872c2de184664501212d2639cfbe34abf508f2b41e0f2da45",
          "md5": "21e88ce426eebbb97df89bae00b89277",
          "sha256": "c5d81ad3e345ae9a3db4258488e87adf150eeb9222af4e5559d506dc056d4a33"
        },
        "downloads": -1,
        "filename": "lager-cantools-36.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21e88ce426eebbb97df89bae00b89277",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72118,
        "upload_time": "2021-01-12T04:26:33",
        "upload_time_iso_8601": "2021-01-12T04:26:33.424900Z",
        "url": "https://files.pythonhosted.org/packages/7c/ac/b8818473450872c2de184664501212d2639cfbe34abf508f2b41e0f2da45/lager-cantools-36.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d360fb72416be669c4cbdf98c656a4eaa22c0feb733ee8416445b70ce482044a",
        "md5": "9e863bd3aebff7b355d0afd2eb6ccd2e",
        "sha256": "917c7bec122a88ef8ff27e9c8917c3d96c9a4b49ffdb1d7329107d82f249f882"
      },
      "downloads": -1,
      "filename": "lager_cantools-36.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9e863bd3aebff7b355d0afd2eb6ccd2e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 81924,
      "upload_time": "2021-01-12T04:26:31",
      "upload_time_iso_8601": "2021-01-12T04:26:31.906367Z",
      "url": "https://files.pythonhosted.org/packages/d3/60/fb72416be669c4cbdf98c656a4eaa22c0feb733ee8416445b70ce482044a/lager_cantools-36.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7cacb8818473450872c2de184664501212d2639cfbe34abf508f2b41e0f2da45",
        "md5": "21e88ce426eebbb97df89bae00b89277",
        "sha256": "c5d81ad3e345ae9a3db4258488e87adf150eeb9222af4e5559d506dc056d4a33"
      },
      "downloads": -1,
      "filename": "lager-cantools-36.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "21e88ce426eebbb97df89bae00b89277",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 72118,
      "upload_time": "2021-01-12T04:26:33",
      "upload_time_iso_8601": "2021-01-12T04:26:33.424900Z",
      "url": "https://files.pythonhosted.org/packages/7c/ac/b8818473450872c2de184664501212d2639cfbe34abf508f2b41e0f2da45/lager-cantools-36.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}