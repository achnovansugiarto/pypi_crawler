{
  "info": {
    "author": "Jip J. Dekker",
    "author_email": "jip.dekker@monash.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MiniZinc Bench\n\nThis is a small collection of scripts that allow you to run benchmarks on a set\nof MiniZinc instance using MiniZinc Python. The process is split into several\nsteps to be easily customisable to different kinds of possible benchmarks.\n\n> Currently, the only supported way of running benchmarks is through\n> [SLURM](https://slurm.schedmd.com/). Other methods may become available in the\n> future.\n\n## Preparation\n\n1. Create a CSV file for the MiniZinc instances containing _problem_, _model_,\n   _data_file_. If you store the instances in the MiniZinc benchmarks\n   repository structure, then you can use the `mzn-bench collect-instances`\n   command:\n   ```bash\n   mzn-bench collect-instances <directory> > instances.csv\n   ```\n2. Instantiate a benchmarking environment. This environment should at least\n   contain a Python virtual environment with _mzn-bench_ and your benchmarking\n   scripts, but you can also set up environmental variables, like `PATH`, and\n   load cluster modules. The following script, `bench_env.sh`,\n   provides an example environment that can be loaded using `source bench_env.sh`:\n\n   ```bash\n   if [[ \"${BASH_SOURCE[0]}\" = \"${0}\" ]]; then\n       >&2 echo \"Remember: you need to run me as 'source ${0}', not execute it!\"\n       exit\n   fi\n\n   # Create or activate Python virtual environment\n   if [ -d venv ]; then\n       source venv/bin/activate\n   else\n      python3 -m venv venv\n       source venv/bin/activate\n       python3 -m pip install mzn-bench\n   fi\n\n   # Set other environment variables and load cluster modules\n   module load MiniZinc/2.4.3\n   ```\n\n3. Create a benchmarking script. This script will contain the configuration of\n   where the instance file is located, what MiniZinc/Solver configurations to\n   run for every instance, and how the benchmark runner itself should be\n   configured. The script mainly consists of a call to `schedule` in\n   `mzn_bench`. For example a benchmarking script that runs Gecode and\n   Chuffed for 20 minutes might look like this:\n\n   ```python\n   from datetime import timedelta\n   from pathlib import Path\n\n   import minizinc\n\n   from mzn_bench import Configuration, schedule\n\n   schedule(\n       instances=Path(\"./instances.csv\"),\n       timeout=timedelta(minutes=20),\n       configurations=[\n           Configuration(name=\"Gecode\", solver=minizinc.Solver.lookup(\"gecode\")),\n           Configuration(name=\"Chuffed\", solver=minizinc.Solver.lookup(\"chuffed\")),\n       ],\n       nodelist=[\"critical001\"],\n   )\n   ```\n\nThese are all the possible arguments to `schedule`:\n\n- `instances: Path` - The path to the instances file.\n- `timeout: timedelta` - The timeout set for the MiniZinc process.\n- `configurations: Iterable[Configuration]` - MiniZinc solving configurations\n  (see below for details).\n- `nodelist: Iterable[str]` - A list of nodes on which SLURM is allowed to\n  schedule the tasks.\n- `output_dir: Path = Path.cwd() / \"results\"` - The directory in which the raw\n  results will be placed. This directory will be created if it does not yet\n  exist.\n- `job_name: str = \"MiniZinc Benchmark\"` - The SLURM job name.\n- `cpus_per_task: int = 1` - The number of CPU cores required for each task.\n- `memory: int = 4096` - The maximum memory used for each task.\n- `debug: bool = False` - Directly capture the output of individual jobs\n  and store them in a `./logs/` directory.\n- `wait: bool = False` - The scheduling process will wait for all jobs to\n  finish.\n\nA `Configuration` object has the following attributes:\n\n- `name: str` - Configuration name used in the output.\n- `solver: minizinc.Solver` - MiniZinc Python solver configuration.\n- `minizinc: Optional[Path] = None` - Path to a specific MiniZinc executable.\n  If `None` is provided, then the first `minizinc` executable on the `PATH`\n  will be used.\n- `processes: Optional[int] = None` - Number of processes to be used by the\n  solver.\n- `random_seed: Optional[int] = None` - Random seed to be used by the solver.\n- `free_search: bool = False` - Solver can determine its own search heuristic.\n- `optimisation_level: Optional[int] = None` - MiniZinc compilation\n  optimisation level, e.g., `-O3`.\n- `other_flags: Dict[str, Any] = field(default_factory=dict)` - A mapping of\n  flag name to value of other flags to be provided to the compiler/solver\n- `extra_data: Dict[str, Any] = field(default_factory=dict)` - Extra data to be\n  added when using a specific Configuration. Internally this will be used by\n  MiniZinc Python's `__setitem__` method on the generated instances. If data\n  needs the value of an identifier internal to MiniZinc, then please use an\n  `DZNExpression` object (e.g., `{\"preferred_encoding\": DZNExpression(\"UNARY\")}`).\n\n## Schedule SLURM jobs\n\nThe job now has to be started on the cluster with the right number of tasks\n(one for every instance/solver combination). Luckily, the benchmarking script\nthat you've created in the previous step should take care of all of this.\nSo once we ensure that our environment is ready for ou benchmark, we can\nexecute our script and our job will be scheduled.\n\nFor example, if we had created a script `bench_env.sh` with our benchmarking\nenvironment and a script `start_bench.py` with our `schedule` call, then the\nfollowing code should schedule our job:\n\n```bash\nsource bench_env.sh\npython start_bench.py\n```\n\nYou can keep track of the status of your job using the `squeue` command.\n\n**WARNING:** Once the job has started the CSV file containing the instances and\nthe instance files themselves should not be changed or moved until the full\nbenchmark is finished. This could causes error or, even worse, inconsistent\nresults.\n\n**Note:** If you find a mistake after you have scheduled your job, then you\nshould cancel the job as soon as possible. This can be done by using the\n`scancel` command. This command will take the `job_id`, shown when your job is\nscheduled, as an argument.\n\n## Collect information\n\nOnce the job is finished, it is time to get your data wrangling pants on! This\nrepository contains some scripts that might be helpful in locating and\nformatting the information that you need. Some scripts might be used directly\nwhile other might need some customising to fit your purpose. Note that these\nscripts might require some extra dependencies. For this reason, these scripts\nare not expected to work unless this package is installed as\n`pip install mzn-bench[scripts]`.\nThis allows us to install a minimal version on the running cluster and this\nmore complete version locally while processing the data.\n\n### General aggregation\n\nThe following scripts can help gather the raw `*_stats.yml`/`*_sol.yml` files\nand combine them for further use:\n\n- `mzn-bench collect-objectives <result_dir> <objectives.csv>` -\n  This script gathers all objective value information given by MiniZinc and the\n  used solvers and combines it into a single CSV file.\n- `mzn-bench collect-statistics <result_dir> <statistics.csv>` -\n  This script gathers all statistical information given by MiniZinc and the used\n  solvers and combines it into a single CSV file.\n\n### Tabulation\n\nThe following scripts filter and tabulate specific statistics.\n\n- `mzn-bench report-status <statistics.csv>` - This script will report the\n  number of occurrences of the various solving status of your MiniZinc tasks.\n  Please consult the `-h` flag to display all options.\n\n### Solution checking\n\nThe `mzn-bench check-solutions` command takes the solutions output during run\nand feeds them back into the model to check that the result is satisfiable.\nIt also stores the objective and satisfiability information to be used when\nchecking statuses. The `-c` option can be used to set how many solutions\nto check (zero to check all solutions).\n\n```bash\n# Check three solutions from each instance\nmzn-bench check-solutions -c 3 ./results\n```\n\nThis requires the problem `.mzn` and `.dzn` files from the benchmark run to be\navailable in order to run the checker. The `--base-dir <DIR>` option can be used\nto specify a root directory relative to which the file names in the\n`*_sol.yml` files are resolved.\n\n### Status checking\n\nThe `mzn-bench check-statuses` command takes the results from `check-solutions`\ncommand above (which must be run first) and then checks for any solvers which\nhave either\n\n- Falsely claimed optimality - where optimality was found by a solver, but a\n  better objective was found elsewhere and verified to be correct.\n- Falsely claimed unsatisfiability - where unsatisfiability was found by a\n  solver, but another solver has given a correct solution for the instance.\n\n### Graph generation\n\nThere are a number of plotting helper functions available in\n`mzn_bench.analysis.plot`. In order to use these, you must enable the\nplotting features with `pip install mzn-bench[plotting]`. These use the\n[Bokeh](https://bokeh.org/) visualisation library to provide interactive plots.\n\nThe `read_csv` function returns a tuple of [pandas](https://pandas.pydata.org/)\ndata frames containing objective and statistics data for plotting or further\ndata analysis.\n\n```py\nfrom mzn_bench.analysis.collect import read_csv\nfrom mzn_bench.analysis.plot import plot_all_instances\nfrom bokeh.plotting import show\n\n# Read CSVs generated by mzn-bench collect-result as pandas dataframes\nobjs, stats = read_csv(\"objectives.csv\", \"statistics.csv\")\n\n# Grid plot giving objective values over time, or time to solve\n# (depending on instance type)\nshow(plot_all_instances(objs, stats))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.minizinc.org/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mzn-bench",
    "package_url": "https://pypi.org/project/mzn-bench/",
    "platform": "",
    "project_url": "https://pypi.org/project/mzn-bench/",
    "project_urls": {
      "Homepage": "https://www.minizinc.org/",
      "Source": "https://github.com/MiniZinc/mzn-bench"
    },
    "release_url": "https://pypi.org/project/mzn-bench/0.1.0/",
    "requires_dist": [
      "minizinc",
      "ruamel.yaml",
      "click (<8,>=7)",
      "pandas (<2,>=1.1) ; extra == 'plotting'",
      "bokeh (>=2.2.3) ; extra == 'plotting'",
      "tabulate ; extra == 'scripts'",
      "pytest (<7,>=6) ; extra == 'scripts'"
    ],
    "requires_python": ">=3.6",
    "summary": "SLURM scheduling functionality and a collection of scripts to process the resulting data.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9358110,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "972f0b600e2e986f96d55bf2625973b56e88bb512746484a5d9661b249e1c88a",
          "md5": "b08f56671c685a10ad52e3faa8a77fb4",
          "sha256": "104be87909490ce37b9bec4d51f8c031b0510807f5f2b8cbb3bacd015e9760a2"
        },
        "downloads": -1,
        "filename": "mzn_bench-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b08f56671c685a10ad52e3faa8a77fb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17993,
        "upload_time": "2021-02-08T00:18:10",
        "upload_time_iso_8601": "2021-02-08T00:18:10.252373Z",
        "url": "https://files.pythonhosted.org/packages/97/2f/0b600e2e986f96d55bf2625973b56e88bb512746484a5d9661b249e1c88a/mzn_bench-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2647e1c7da1777b3941fb69467ffdc4debeede04fb11d21482044181ccfe3450",
          "md5": "34ee9b699a6c8a73d288f8efc8adfefb",
          "sha256": "d5b6f924463535da9b219e4bb87bfae24ad2f212d31b26e4a6922d8193e756aa"
        },
        "downloads": -1,
        "filename": "mzn-bench-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34ee9b699a6c8a73d288f8efc8adfefb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21102,
        "upload_time": "2021-02-08T00:18:12",
        "upload_time_iso_8601": "2021-02-08T00:18:12.191401Z",
        "url": "https://files.pythonhosted.org/packages/26/47/e1c7da1777b3941fb69467ffdc4debeede04fb11d21482044181ccfe3450/mzn-bench-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "972f0b600e2e986f96d55bf2625973b56e88bb512746484a5d9661b249e1c88a",
        "md5": "b08f56671c685a10ad52e3faa8a77fb4",
        "sha256": "104be87909490ce37b9bec4d51f8c031b0510807f5f2b8cbb3bacd015e9760a2"
      },
      "downloads": -1,
      "filename": "mzn_bench-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b08f56671c685a10ad52e3faa8a77fb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17993,
      "upload_time": "2021-02-08T00:18:10",
      "upload_time_iso_8601": "2021-02-08T00:18:10.252373Z",
      "url": "https://files.pythonhosted.org/packages/97/2f/0b600e2e986f96d55bf2625973b56e88bb512746484a5d9661b249e1c88a/mzn_bench-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2647e1c7da1777b3941fb69467ffdc4debeede04fb11d21482044181ccfe3450",
        "md5": "34ee9b699a6c8a73d288f8efc8adfefb",
        "sha256": "d5b6f924463535da9b219e4bb87bfae24ad2f212d31b26e4a6922d8193e756aa"
      },
      "downloads": -1,
      "filename": "mzn-bench-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34ee9b699a6c8a73d288f8efc8adfefb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21102,
      "upload_time": "2021-02-08T00:18:12",
      "upload_time_iso_8601": "2021-02-08T00:18:12.191401Z",
      "url": "https://files.pythonhosted.org/packages/26/47/e1c7da1777b3941fb69467ffdc4debeede04fb11d21482044181ccfe3450/mzn-bench-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}