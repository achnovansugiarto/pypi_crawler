{
  "info": {
    "author": "Andrei S. Pavlov",
    "author_email": "ndrw.pvlv@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Timench\n**Timench** is a small framework for measure execution time of one function, multiple functions and some code with context \n\n## Internal variables\nTimench has three internal dicts:\n- Timench.funcs = {case_name: func} - for storage funcs for measurement by case name\n- Timench.times = {case_name: [time1, time2, ]} - for storage measurement time (as list) by case name\n- Timench.reports = {case_name: 'report'} for storage for measurement reports (as string) by case name\n\n## Usage\n### 1. Time measurement of single function run\nFor example let's try to measure run time of time.sleep() function\n```python\ntmnch = Timench()\ncase_name = 'sleep_1sec'\ntmnch.add_func(case_name, time.sleep)  # Add function with case name to benchmark list\n```\nNow we can set args for time.sleep(*args) and run benchmark\n```python\nrepeats = 10  # Count of repeats\nsleep_time = 1.0  # args of time.sleep(sleep_time)\ntmnch.run(case_name, repeats, sleep_time)  # Run benchmark\nprint(tmnch.get_report(case_name))  # Print benchmark report\n```\nand write report to txt-file\n```python\ntmnch.write_reports('example_1_report.txt')\n```\n\n### 2. Time measurement of multiple functions run. \n\nMy favorite way of Timench usage is compare execution time of different code with same features. Here is basic setup of example:\n```python\nimport time\n\nfrom timench import Timench\n\ntmnch = Timench()\nrepeats = 10\nenv_args = {  # dict structure: {case_name: [args, kwargs] of function func(*args, **kwargs), }\n    'sleep_1s': [[1.0, ], None],\n    'sleep_2s': [[2.0, ], None],\n    'sleep_3s': [[3.0, ], None]\n}\n\nfor case_name in env_args:  # # Add functions to benchmark list\n    tmnch.add_func(case_name, time.sleep)\n```\nRun all benchmarks:\n```python\ntmnch.multiple_run(repeats, env_args)   # Run multiple benchmarks\n```\nOutput reports to terminal and txt-file:\n```python\nfor case_name in env_args:\n    print(tmnch.get_report(case_name))  # Print to terminal all reports\n\ntmnch.write_reports('example_2_report.txt')  # Write all reports to txt-file\n```\n\n### 3. Context usage\nSometimes we need to know execution times of code without function creation and benchmark setup.\n\nLet's look to simple example:\n```python\nimport time\n\nfrom timench import Timench\n\nwith Timench():  # Just wrap your code with Timench\n    time.sleep(1.0)\n```\n\n## Full examples\n\n### Example 1. Time measurement of function single run\n```python\nimport time\n\nfrom timench import Timench\n\ntmnch = Timench()\ncase_name = 'sleep_1sec'  # Set run case name\nrepeats = 10  # Count of repeats\nsleep_time = 1.0  # args of time.sleep(sleep_time)\n\ntmnch.add_func(case_name, time.sleep)  # Add function to benchmark list\n\ntmnch.run(case_name, repeats, sleep_time)  # Run benchmark\nprint(tmnch.get_report(case_name))  # Print benchmark report\n\ntmnch.write_reports('example_1_report.txt')  # Write all reports to txt-file\n```\nOutput example:\n```\nCase: sleep_1sec\n---\nFunction: sleep\nTotal time = 10.0128 sec\nBest loop time = 1.00024 sec\nAverage loop time = 1.00128 sec\nRepeats = 10\n```\n\n### Example 2. Time measurement of multiple functions run\n```python\nimport time\n\nfrom timench import Timench\n\ntmnch = Timench()\nrepeats = 10\nenv_args = {  # dict structure: {case_name: [args, kwargs] of function func(*args, **kwargs), }\n    'sleep_1s': [[1.0, ], None],\n    'sleep_2s': [[2.0, ], None],\n    'sleep_3s': [[3.0, ], None]\n}\n\nfor case_name in env_args:  # # Add functions to benchmark list\n    tmnch.add_func(case_name, time.sleep)\n\ntmnch.multiple_run(repeats, env_args)  # Run multiple benchmarks\n\nfor case_name in env_args:\n    print(tmnch.get_report(case_name))  # Print to terminal all reports\n\ntmnch.write_reports('example_2_report.txt')  # Write all reports to txt-file\n```\nOutput example:\n```\nCase: sleep_1s\n---\nFunction: sleep\nTotal time = 10.1691 sec\nBest loop time = 1.00017 sec\nAverage loop time = 1.01691 sec\nRepeats = 10\n\nCase: sleep_2s\n---\nFunction: sleep\nTotal time = 20.0776 sec\nBest loop time = 2.00185 sec\nAverage loop time = 2.00776 sec\nRepeats = 10\n\nCase: sleep_3s\n---\nFunction: sleep\nTotal time = 30.0205 sec\nBest loop time = 3.00012 sec\nAverage loop time = 3.00205 sec\nRepeats = 10\n```\n### Example 3. Time measurement with context execution\n```python\nimport time\n\nfrom timench import Timench\n\nwith Timench():  # Run time measurement for some code\n    time.sleep(1.0)\n    time.sleep(2.0)\n    time.sleep(3.0)\n```\nOutput example:\n```\nRun time = 6.00682 sec\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ndrwpvlv/timench/archive/refs/tags/0.2.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ndrwpvlv/timench",
    "keywords": "time,measure execution time,measure time",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "timench",
    "package_url": "https://pypi.org/project/timench/",
    "platform": "",
    "project_url": "https://pypi.org/project/timench/",
    "project_urls": {
      "Download": "https://github.com/ndrwpvlv/timench/archive/refs/tags/0.2.0.tar.gz",
      "Homepage": "https://github.com/ndrwpvlv/timench"
    },
    "release_url": "https://pypi.org/project/timench/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Timench is a small framework for measure execution time of one function, multiple functions and code",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10748081,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c49353b82987b8234061fc404ab2073c4ae0391a2b532e02eeea2ce5113a821f",
          "md5": "00a51da958e5205e211751ba74a1d98f",
          "sha256": "869488ec62804becb5f30a7c64574e863d482c6aed33b06f68a27c615c5d2894"
        },
        "downloads": -1,
        "filename": "timench-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00a51da958e5205e211751ba74a1d98f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5072,
        "upload_time": "2021-06-06T22:27:22",
        "upload_time_iso_8601": "2021-06-06T22:27:22.056909Z",
        "url": "https://files.pythonhosted.org/packages/c4/93/53b82987b8234061fc404ab2073c4ae0391a2b532e02eeea2ce5113a821f/timench-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fef14db94abca75dfa361d03be3e06c84e3028aa75bd1b8fa00f172b2a934ef7",
          "md5": "bedc640d68d08d3089751e7e8f6441c6",
          "sha256": "d16cbe43f0816d8bb00fe9d04d7b2f7b78f0d59f1eff3c5c5bba6b7c5a1e105b"
        },
        "downloads": -1,
        "filename": "timench-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bedc640d68d08d3089751e7e8f6441c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4339,
        "upload_time": "2021-06-06T22:27:23",
        "upload_time_iso_8601": "2021-06-06T22:27:23.550196Z",
        "url": "https://files.pythonhosted.org/packages/fe/f1/4db94abca75dfa361d03be3e06c84e3028aa75bd1b8fa00f172b2a934ef7/timench-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4bc1bcf6fc04167ed497073b9914606212d8ae1cd586d9e8d2414c2f53f0a16",
          "md5": "9217560caa4d7ea454621d07193a0e9a",
          "sha256": "3a0ba657fd9dd973ddf6925d08dd37b91425122d288ec1f3f5d4ad573a0206bc"
        },
        "downloads": -1,
        "filename": "timench-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9217560caa4d7ea454621d07193a0e9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5072,
        "upload_time": "2021-06-25T23:54:18",
        "upload_time_iso_8601": "2021-06-25T23:54:18.245622Z",
        "url": "https://files.pythonhosted.org/packages/f4/bc/1bcf6fc04167ed497073b9914606212d8ae1cd586d9e8d2414c2f53f0a16/timench-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d4690c313e7b7a5c5fa5b2f54d5646f8be8f6633992a5c256656b86cbb00511",
          "md5": "3d23cbf0ad88a76cf136570853b9f0b5",
          "sha256": "ea2ba6f4f371603cd0486a67e9b8352fb7658fb65676770787d0d6a33f6b3fde"
        },
        "downloads": -1,
        "filename": "timench-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d23cbf0ad88a76cf136570853b9f0b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4333,
        "upload_time": "2021-06-25T23:54:19",
        "upload_time_iso_8601": "2021-06-25T23:54:19.941765Z",
        "url": "https://files.pythonhosted.org/packages/3d/46/90c313e7b7a5c5fa5b2f54d5646f8be8f6633992a5c256656b86cbb00511/timench-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4bc1bcf6fc04167ed497073b9914606212d8ae1cd586d9e8d2414c2f53f0a16",
        "md5": "9217560caa4d7ea454621d07193a0e9a",
        "sha256": "3a0ba657fd9dd973ddf6925d08dd37b91425122d288ec1f3f5d4ad573a0206bc"
      },
      "downloads": -1,
      "filename": "timench-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9217560caa4d7ea454621d07193a0e9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5072,
      "upload_time": "2021-06-25T23:54:18",
      "upload_time_iso_8601": "2021-06-25T23:54:18.245622Z",
      "url": "https://files.pythonhosted.org/packages/f4/bc/1bcf6fc04167ed497073b9914606212d8ae1cd586d9e8d2414c2f53f0a16/timench-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d4690c313e7b7a5c5fa5b2f54d5646f8be8f6633992a5c256656b86cbb00511",
        "md5": "3d23cbf0ad88a76cf136570853b9f0b5",
        "sha256": "ea2ba6f4f371603cd0486a67e9b8352fb7658fb65676770787d0d6a33f6b3fde"
      },
      "downloads": -1,
      "filename": "timench-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3d23cbf0ad88a76cf136570853b9f0b5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4333,
      "upload_time": "2021-06-25T23:54:19",
      "upload_time_iso_8601": "2021-06-25T23:54:19.941765Z",
      "url": "https://files.pythonhosted.org/packages/3d/46/90c313e7b7a5c5fa5b2f54d5646f8be8f6633992a5c256656b86cbb00511/timench-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}