{
  "info": {
    "author": "Khoa Le, Hai Ho, Stefan Karolcik, Heloise Greeff",
    "author_email": "khoaldv@oucru.org, haihb@oucru.org, s.karolcik@imperial.ac.uk, heloise.greeff@eng.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Vital_sqi: Signal quality control of physiological signals\n\n[![Build Status](https://travis-ci.com/meta00/vital_sqi.svg?token=CDjcmJqzLe7opuWagsPJ&branch=main)](https://travis-ci.com/meta00/vital_sqi)\n[![codecov](https://codecov.io/gh/meta00/vital_sqi/branch/main/graph/badge.svg?token=6RV5BUK340)](https://codecov.io/gh/meta00/vital_sqi)\n[![Documentation Status](https://readthedocs.org/projects/vitalsqi/badge/?version=latest)](https://vitalsqi.readthedocs.io/en/latest/?badge=latest)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n# Description\nVital_sqi is a Python package for signal quality index (SQI) extraction and quality assignment \nfor ECG and PPG waveforms. The package provides:\n\n1. Support PPG and ECG waveforms in various data formats extracted from wearables.\n2. Unified point of access for the current state-of-the-art SQIs: standard statistics, HRV, RR interval, and waveform based SQIs.\n3. Rule-based classification of signal quality using user-defined thresholds for the extracted SQIs per signal segment.\n4. Pipeline and GUIs for SQI extraction and quality assignment. \n\n# Prerequisites and Installation\n\nThe package works with `Python 3.7` and `Python 3.8`.\n\n```cmd\npip install vital_sqi\n```\n\n# Getting started\nThe package is built around three classes: `SignalSQI` `Rule` `Ruleset`\n\n1. `signal_obj` `SignalSQI` object, has the following attributes:\n    - `signal_obj.signal` containing waveform data (pandas dataframe).\n    - `signal_obj.sampling_rate` containing sampling rate, either input by user or automatically inferred from the waveform.\n    - `signal_obj.sqis` containing SQIs (pandas dataframe) that are derived by functions of `vital_sqi.sqi` modules or an \n    external table, with SQI values as columns and signal segments as rows. After signal classification, decision of\n      `accept` or `reject` for each signal segment is in `decision` column. If signal segmentation is done with the package,\n      the table will contain also coordinates in column `start` and `end`.\n    - `signal_obj.rules` and `signal_obj.ruleset` containing a list of `rules` and a `ruleset` used for signal classification.\n2. `rules` list of `Rule` objects, in which each corresponds to an SQI and contains thresholds for quality assignment. \n    Rules could be read into `signal_obj` from `.json` file in the following format:\n  ```python\n    \"test_sqi\": {\n        \"name\": \"test_sqi\",\n        \"def\": [\n            {\"op\": \">\", \"value\": \"10\", \"label\": \"reject\"},\n            {\"op\": \">=\", \"value\": \"3\", \"label\": \"accept\"},\n            {\"op\": \"<\", \"value\": \"3\", \"label\": \"reject\"}],\n        \"desc\": \"\",\n        \"ref\": \"\"\n  }\n  ```\n3. `ruleset` object of class `Ruleset` contains a set of selected `rules` (selected from the list of rules in `signal_obj.rule`) and the order to apply them in quality \nassignment (see schema below). Notice that this is not a tree-based classification.\n\n![Example of a rule set](images/resize_sample_rule_chart.png \"Example of a rule set\")\n\n## Pipelines\nThe package includes two pipelines for ECG (similarly for PPG) data as follows:\n- `vital_sqi.pipeline_highlevel.get_ecg_sqis` to extract SQIs for ECG segments.\n  ```python\n    from vital_sqi.pipeline.pipeline_highlevel import *\n    from vital_sqi.data.signal_sqi_class import SignalSQI\n    import os\n    file_in = os.path.abspath('tests/test_data/example.edf')\n    sqi_dict = os.path.abspath('tests/test_data/sqi_dict.json')\n    segments, signal_sqi_obj = get_ecg_sqis(file_in, sqi_dict, 'edf')\n  ```  \n\n- `vital_sqi.pipeline_highlevel.get_qualified_ecg` to extract SQIs, use those to classify ECG signal as `accept` or\n  `reject` using user-defined thresholds. The `rules` and `ruleset` are defined in json format. Templates are found in \n  `vital_sqi/resource` folder: `sqi_dict.json` for `rules` and `rule_dict_test.json` for `ruleset`. \n  ```python\n    from vital_sqi.pipeline.pipeline_highlevel import *\n    from vital_sqi.data.signal_sqi_class import SignalSQI\n    import os\n    file_in = os.path.abspath('tests/test_data/example.edf')\n    sqi_dict = os.path.abspath('tests/test_data/sqi_dict.json')\n    rule_dict_filename = os.path.abspath('tests/test_data/rule_dict_test.json')\n    ruleset_order = {3: 'skewness_1', 2: 'entropy', 1: 'perfusion'}\n    output_dir = tempfile.gettempdir()\n    signal_obj = get_qualified_ecg(file_name=file_in,\n                        sqi_dict_filename=sqi_dict,\n                        file_type='edf', duration=30,\n                        rule_dict_filename=rule_dict_filename,\n                        ruleset_order=ruleset_order,\n                        output_dir=output_dir)\n  ```\n\nWe also provide an GUI to easily define `rule` and `ruleset`, and execute them with an input SQI table (Help - hyperlink to readthedocs)\n\n## Main steps\nFollowing are the main steps to use the package for SQI extraction and signal classification. For details, see the \n[documentation](https://vitalsqi.readthedocs.io/en/latest/).\n\n**1. Reading/Writing** \n\nSignal waveform is read into an object of `SignalSQI` class and written to the following format using `vital_sqi.data` \nmodule.\n   - ECG: EDF, MIT (physio.net), csv.\n   - PPG: csv.\nClassified segments are written to csv files using `vital_sqi.preprocess.segment_split.save_segment`\n\n**2.Preprocessing and segmentation**\n   `vital_sqi.preprocessing` allows doing:\n- Several signal preprocessing steps such as trimming, tapering, smoothing, bandpass filter etc. For PPG, \nit is possible to filter the signal based on columns such as SpO2, perfusion, etc.\n- Signal segmentation has two options: splitting by duration and by beat (which includes beat detection).\n\n**3. SQI extraction**\n\nThe implemented SQIs, `vital_sqi.sqi` module, are divided into 4 groups: \n- Standard statistics SQIs such as kurtosis, skewness, entropy, etc.\n- Heart rate variability (HRV) based SQIs such as sdnn, sdsd, rmssd, etc.\n- RR interval-based SQIs such as ectopic, correlogram, msq, etc.\n- Waveform-based SQIs: dtw, qrs_energy, qrs_a etc.\n\nThe function `vital_sqi.pipeline_function.extract_sqi` is used to extract a number of SQIs from segments. The requested SQIs\nare defined in a json file called SQI dictionary. We provide a dictionary template for all implemented SQIs, with default \nparameters, in `vital_sqi/resource/sqi_dict.json`.\n\n**4. Quality classification**\n\nThe package allows making rule set from SQIs and user-defined thresholds for quality classification. A segment assigned \nas `accept` pass all rules in the set, otherwise `reject`. Rules in the set have ordered, which might help to \nimprove speed.\n\nWe ran brute force threshold searching for an in-house PPG dataset (generated with Smartcare, doubly annotated \nby domain experts) to obtain a set of recommended thresholds, as found in `resource/rule_dict.json`.\n\n# References\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meta00/vital_sqi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Hai Ho, Khoa Le",
    "maintainer_email": "haihb@oucru.org, khoaldv@oucru.org",
    "name": "vital-sqi",
    "package_url": "https://pypi.org/project/vital-sqi/",
    "platform": null,
    "project_url": "https://pypi.org/project/vital-sqi/",
    "project_urls": {
      "Homepage": "https://github.com/meta00/vital_sqi"
    },
    "release_url": "https://pypi.org/project/vital-sqi/0.1.0/",
    "requires_dist": [
      "librosa (>=0.9.2)",
      "heartpy (>=1.2.6)",
      "pmdarima (>=1.8.0)",
      "hrv-analysis (>=1.0.3)",
      "matplotlib (>=3.3.3)",
      "numpy (>=1.20.2)",
      "pandas (>=1.1.5)",
      "plotly (>=4.14.3)",
      "scikit-learn (>=0.24.1)",
      "scipy (>=1.6.0)",
      "statsmodels (>=0.12.1)",
      "tqdm (>=4.56.0)",
      "py-ecg-detectors (>=1.0.2)",
      "pyEDFlib (>=0.1.20)",
      "pycwt (>=0.3.0a22)",
      "wfdb (>=3.3.0)",
      "datetimerange (>=1.0.0)",
      "dateparser (>=1.0.0)",
      "openpyxl (>=3.0.7)",
      "pyflowchart (>=0.1.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "Signal quality control pipeline for electrocardiogram and photoplethysmogram",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14724955,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddfed92eefec35114c1a6c97e4865e5469b1aa5ae570615af3bd5922daa47581",
          "md5": "2cb48a92aceff6be9d213d64cc4704e8",
          "sha256": "a02a1e35a0bdf9b850b4dee194ce9780c2339510493c4da88dd8a036fd16646f"
        },
        "downloads": -1,
        "filename": "vital_sqi-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cb48a92aceff6be9d213d64cc4704e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65326,
        "upload_time": "2022-08-11T04:14:20",
        "upload_time_iso_8601": "2022-08-11T04:14:20.343386Z",
        "url": "https://files.pythonhosted.org/packages/dd/fe/d92eefec35114c1a6c97e4865e5469b1aa5ae570615af3bd5922daa47581/vital_sqi-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48369586d39a2dfd278d03d961bdd76c2e116ea166fe95cf52331adeb82f467e",
          "md5": "9223c1ab361ddd5fdaed86828f27c39f",
          "sha256": "ac5cb46626881a19dc3ca8f98b459844a01e063529c543719529d7560e593f9a"
        },
        "downloads": -1,
        "filename": "vital_sqi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9223c1ab361ddd5fdaed86828f27c39f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 56069,
        "upload_time": "2022-08-11T04:14:22",
        "upload_time_iso_8601": "2022-08-11T04:14:22.871993Z",
        "url": "https://files.pythonhosted.org/packages/48/36/9586d39a2dfd278d03d961bdd76c2e116ea166fe95cf52331adeb82f467e/vital_sqi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddfed92eefec35114c1a6c97e4865e5469b1aa5ae570615af3bd5922daa47581",
        "md5": "2cb48a92aceff6be9d213d64cc4704e8",
        "sha256": "a02a1e35a0bdf9b850b4dee194ce9780c2339510493c4da88dd8a036fd16646f"
      },
      "downloads": -1,
      "filename": "vital_sqi-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2cb48a92aceff6be9d213d64cc4704e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 65326,
      "upload_time": "2022-08-11T04:14:20",
      "upload_time_iso_8601": "2022-08-11T04:14:20.343386Z",
      "url": "https://files.pythonhosted.org/packages/dd/fe/d92eefec35114c1a6c97e4865e5469b1aa5ae570615af3bd5922daa47581/vital_sqi-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48369586d39a2dfd278d03d961bdd76c2e116ea166fe95cf52331adeb82f467e",
        "md5": "9223c1ab361ddd5fdaed86828f27c39f",
        "sha256": "ac5cb46626881a19dc3ca8f98b459844a01e063529c543719529d7560e593f9a"
      },
      "downloads": -1,
      "filename": "vital_sqi-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9223c1ab361ddd5fdaed86828f27c39f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 56069,
      "upload_time": "2022-08-11T04:14:22",
      "upload_time_iso_8601": "2022-08-11T04:14:22.871993Z",
      "url": "https://files.pythonhosted.org/packages/48/36/9586d39a2dfd278d03d961bdd76c2e116ea166fe95cf52331adeb82f467e/vital_sqi-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}