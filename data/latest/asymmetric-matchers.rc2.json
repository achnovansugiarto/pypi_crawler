{
  "info": {
    "author": "Lucas Duailibe",
    "author_email": "lucasds@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# asymmetric-matchers\n\n[![CI](https://github.com/duailibe/asymmetric-matchers/actions/workflows/ci.yaml/badge.svg)](https://github.com/duailibe/asymmetric-matchers/actions/workflows/ci.yaml)\n[![PyPI](https://img.shields.io/pypi/v/asymmetric-matchers)](https://pypi.org/project/asymmetric-matchers)\n[![codecov](https://codecov.io/gh/duailibe/asymmetric-matchers/branch/main/graph/badge.svg?token=imWUVBB86f)](https://codecov.io/gh/duailibe/asymmetric-matchers)\n\n\nA collection of asymmetric matchers in Python for testing or general uses.\n\n## What are asymmetric matchers?\n\nAn asymmetric matcher is an object that can be compared equally to a variety of other objects. Practically speaking, it's useful to test if a value satisfies a set of rules, but not an equality comparison.\n\nPopular examples are the asymmetric matchers present in the [Jasmine](https://jasmine.github.io/) and [Jest](https://jestjs.io) (JavaScript testing frameworks.)\n\n## Example\n\nSay we have a function similar that calls an external API:\n\n```python\ndef get_user(user_id: str, fields: List[str]) -> User:\n    fields = add_default_fields(fields)\n    return external_api.get_user({user_id: user_id, fields: fields})\n```\n\nAnd we want to write a test that asserts the `external_api.get_user()` was called with the correct arguments:\n\n```python\ndef test_external_get_user_is_called():\n    with mock.patch(\"external_api.get_user\") as ext_mock:\n        get_user(\"abc4321\", [\"name\", \"profile_picture\"])\n        ext_mock.assert_called_once_with(\"abc4321\", [\"name\", \"profile_picture\"])\n```\n\nIt doesn't work because we don't know what are the default fields added and perhaps the context of this specific test is not concerned on the behavior of the `add_default_fields` function. So we write more specific assertions:\n\n```python\ndef test_external_get_user_is_called():\n    with mock.patch(\"external_api.get_user\") as ext_mock:\n        get_user(\"abc4321\", [\"name\", \"profile_picture\"])\n\n        ext_mock.assert_called_once()\n        args = ext_mock.call_args[0]\n        assert args[0] == \"abc4321\"\n        assert \"name\" in args[1]\n        assert \"profile_picture\" in args[1]\n```\n\nGreat! Now we're testing exactly what we want, but it's not as straight-forward to a future reader what exactly we want to test.\n\nThat's where an asymmetric tester is useful. We can rewrite this test as:\n\n```python\nfrom asymmetric_matchers import list_containing\n\n\ndef test_external_get_user_is_called():\n    with mock.patch(\"external_api.get_user\") as ext_mock:\n        get_user(\"abc4321\", [\"name\", \"profile_picture\"])\n\n        ext_mock.assert_called_once_with(\n            \"abc4321\", list_containing([\"name\", \"profile_picture\"])\n        )\n```\n\nVery nice! Now it's more clear what's our intent with this test to future readers.\n\nIt's very useful in situations when we can combine two or more matchers. One example is to test that a dict contains a specific key and its value is a list that contains some elements:\n\n```python\nassert \"fields\" in some_dict\nassert \"name\" in some_dict[\"fields\"]\nassert \"profile_picture\" in some_dict[\"fields\"]\n\n# using asymmetric matchers\n\nassert some_dict == dict_containing(\n    {\"fields\": list_containing([\"name\", \"profile_picture\"])}\n)\n```\n\n## API\n\n- **`anything()`**\n\n  Matcher is equal to any value, except `None`.\n\n  ```python\n  plugin_mock.assert_called_once_with(\"app_name\", anything(), True)\n  ```\n\n  It's similar to [`unittest.mock.ANY`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.ANY).\n\n- **`string_matching(str_or_pattern)`**\n\n  Matcher is equal to a string that matches the pattern (using `re.search`).\n\n  ```python\n  assert generate_id() == string_matching(r\"[a-z]{4}[0-9}3\")\n  ```\n\n- **`list_containing(expected)`**\n\n  Matcher is equal to a list that contains all items from `expected`.\n\n  ```python\n  assert fields == list_containing([\"name\", \"profile_pic\"])\n  ```\n\n- **`dict_containing(expected)`**\n\n  Matcher is equal to a dict that contains all keys from `expected` and their values match.\n\n  ```python\n  assert request_dict == dict_containing({\"user_id\": \"abc123\"})\n  ```\n\n## License\n\n[Apache-2.0 License](./LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/duailibe/asymmetric-matchers",
    "keywords": "testing asymmetric matchers",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asymmetric-matchers",
    "package_url": "https://pypi.org/project/asymmetric-matchers/",
    "platform": "",
    "project_url": "https://pypi.org/project/asymmetric-matchers/",
    "project_urls": {
      "Bug Tracker": "https://github.com/duailibe/asymmetric-matchers/issues",
      "Documentation": "https://github.com/duailibe/asymmetric-matchers",
      "Homepage": "https://github.com/duailibe/asymmetric-matchers",
      "Source Code": "https://github.com/duailibe/asymmetric-matchers"
    },
    "release_url": "https://pypi.org/project/asymmetric-matchers/0.2.0/",
    "requires_dist": null,
    "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
    "summary": "Asymmetric matchers for testing",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12669803,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5851ad3584af593d7488b39b230f5029f5ac7cae12d35514fa0916056094b76b",
          "md5": "ae3a8bffad3769b117195989f4922309",
          "sha256": "0cdd91ba8beac8f8d0ebb48ebed9c360091b7cf7fd668c3a9cb2a7b27a7f56f4"
        },
        "downloads": -1,
        "filename": "asymmetric_matchers-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae3a8bffad3769b117195989f4922309",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7875,
        "upload_time": "2021-12-09T23:57:04",
        "upload_time_iso_8601": "2021-12-09T23:57:04.485281Z",
        "url": "https://files.pythonhosted.org/packages/58/51/ad3584af593d7488b39b230f5029f5ac7cae12d35514fa0916056094b76b/asymmetric_matchers-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "387ae483b02bf24f36fa2fed3b3d3f5be2f12ad2b26a0fd04fb88f11e2b7d41a",
          "md5": "3653e41927b6648a446bbe8a4d197ca4",
          "sha256": "90922fac4848230f2d2a43b591631c79f6de70b6fe318d53567287957dec50ca"
        },
        "downloads": -1,
        "filename": "asymmetric_matchers-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3653e41927b6648a446bbe8a4d197ca4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7548,
        "upload_time": "2021-12-09T23:57:06",
        "upload_time_iso_8601": "2021-12-09T23:57:06.420248Z",
        "url": "https://files.pythonhosted.org/packages/38/7a/e483b02bf24f36fa2fed3b3d3f5be2f12ad2b26a0fd04fb88f11e2b7d41a/asymmetric_matchers-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc0c596db878372a3225e052b3912b863fa7f4507ca09cda9dcf1adb31783423",
          "md5": "bf3b2f131236cdfbe7e85ceca6e8bd07",
          "sha256": "4875fc2f69c321643cd11f4b8eb49a2fa123fbeff28edfafa2e339053a6d6978"
        },
        "downloads": -1,
        "filename": "asymmetric_matchers-0.2.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf3b2f131236cdfbe7e85ceca6e8bd07",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
        "size": 7880,
        "upload_time": "2022-01-24T01:50:17",
        "upload_time_iso_8601": "2022-01-24T01:50:17.930454Z",
        "url": "https://files.pythonhosted.org/packages/cc/0c/596db878372a3225e052b3912b863fa7f4507ca09cda9dcf1adb31783423/asymmetric_matchers-0.2.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "106ccfa42f6560735d1d74af64e9517ab69ea5331f8efc1b39290f67207488b6",
          "md5": "d12fcc25a138bae0de925bead3473232",
          "sha256": "4469e13de8ee0d68c057c024260268385edde1cc8f7bfbc96b21a182ff27fc7b"
        },
        "downloads": -1,
        "filename": "asymmetric_matchers-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d12fcc25a138bae0de925bead3473232",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
        "size": 7893,
        "upload_time": "2022-01-24T01:50:19",
        "upload_time_iso_8601": "2022-01-24T01:50:19.750866Z",
        "url": "https://files.pythonhosted.org/packages/10/6c/cfa42f6560735d1d74af64e9517ab69ea5331f8efc1b39290f67207488b6/asymmetric_matchers-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25a0f9a42a7c99f34866b77fbac4ecbbc8463efe44973c0f061650f6cbe65d8c",
          "md5": "4d41388c21483d20b3836d8d68aff19f",
          "sha256": "1104565c31f94a3aa1d44cc5e7e88ade968b1dd5072e017fa96895947f814da8"
        },
        "downloads": -1,
        "filename": "asymmetric_matchers-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d41388c21483d20b3836d8d68aff19f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
        "size": 7808,
        "upload_time": "2022-01-24T01:50:21",
        "upload_time_iso_8601": "2022-01-24T01:50:21.246056Z",
        "url": "https://files.pythonhosted.org/packages/25/a0/f9a42a7c99f34866b77fbac4ecbbc8463efe44973c0f061650f6cbe65d8c/asymmetric_matchers-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc0c596db878372a3225e052b3912b863fa7f4507ca09cda9dcf1adb31783423",
        "md5": "bf3b2f131236cdfbe7e85ceca6e8bd07",
        "sha256": "4875fc2f69c321643cd11f4b8eb49a2fa123fbeff28edfafa2e339053a6d6978"
      },
      "downloads": -1,
      "filename": "asymmetric_matchers-0.2.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "bf3b2f131236cdfbe7e85ceca6e8bd07",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
      "size": 7880,
      "upload_time": "2022-01-24T01:50:17",
      "upload_time_iso_8601": "2022-01-24T01:50:17.930454Z",
      "url": "https://files.pythonhosted.org/packages/cc/0c/596db878372a3225e052b3912b863fa7f4507ca09cda9dcf1adb31783423/asymmetric_matchers-0.2.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "106ccfa42f6560735d1d74af64e9517ab69ea5331f8efc1b39290f67207488b6",
        "md5": "d12fcc25a138bae0de925bead3473232",
        "sha256": "4469e13de8ee0d68c057c024260268385edde1cc8f7bfbc96b21a182ff27fc7b"
      },
      "downloads": -1,
      "filename": "asymmetric_matchers-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d12fcc25a138bae0de925bead3473232",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
      "size": 7893,
      "upload_time": "2022-01-24T01:50:19",
      "upload_time_iso_8601": "2022-01-24T01:50:19.750866Z",
      "url": "https://files.pythonhosted.org/packages/10/6c/cfa42f6560735d1d74af64e9517ab69ea5331f8efc1b39290f67207488b6/asymmetric_matchers-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25a0f9a42a7c99f34866b77fbac4ecbbc8463efe44973c0f061650f6cbe65d8c",
        "md5": "4d41388c21483d20b3836d8d68aff19f",
        "sha256": "1104565c31f94a3aa1d44cc5e7e88ade968b1dd5072e017fa96895947f814da8"
      },
      "downloads": -1,
      "filename": "asymmetric_matchers-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d41388c21483d20b3836d8d68aff19f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
      "size": 7808,
      "upload_time": "2022-01-24T01:50:21",
      "upload_time_iso_8601": "2022-01-24T01:50:21.246056Z",
      "url": "https://files.pythonhosted.org/packages/25/a0/f9a42a7c99f34866b77fbac4ecbbc8463efe44973c0f061650f6cbe65d8c/asymmetric_matchers-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}