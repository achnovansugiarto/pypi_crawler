{
  "info": {
    "author": "zhangpengfei",
    "author_email": "1241833581@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## 模型算法平台\n### 文件结构\n\n#### data:数据存储\n\n- feature_platform:特征处理\n- Fill：缺失值填充\n- Scale：特征标准化\n- Bins：分箱\n- Encoder：特征编码\n#### metric_platform:评估模块\n- null_rate：缺失率\n- iv_score：iv值\n- desc：特征描述\n\n1. ClassificationMetric：分类模型评估\n- auc_score\n- ks_score\n- f1_score\n- precision_recall_curve：精准率和召回率曲线\n\n2. RegressionMetric：回归模型评估\n- mean_absolute_error\n- mean_squared_error\n- mean_squared_log_error\n#### model:模型模块\n\n1. ClassificationModel：分类模型\n- lr\n- xgb\n- svm\n- rf\n- gbdt\n- gbdt+lr\n- rf+lr\n- xgb+lr\n- lgb+lr\n#### util：工具模块\n- load_data：加载文件数据\n- prob_to_score：概率转换为分数\n- save_model：模型保存\n- load_model：模型加载\n### 使用说明\n根据electric_eel.py生成ElectricEel对象\n- 特征处理\n配置feature_config，调用feature_fit()函数进行特征处理，返回处理后的特征及相关信息\n- 模型训练\n配置train_config，调用model_train()函数，进行模型训练，该步骤的特征数据可依赖上一步特征处理后的数据，也可以自定义数据。如果配置特征重要性，会返回特征重要性\n- 模型测试\n调用model_test()函数，进行模型测试，该步骤依赖于上一步产生的模型，及第一步的特征处理，返回预测值以及相应的评测结果\n- 模型预测\n输入原始特征，依赖于第一步产生的特征处理及第二步模型训练，进行预测\n- 特征输出\n如果仅需要进行特征处理，则在第一步完成后，即可，调用feature_transform()输入原始特征即可输出处理后的特征  \n\n### 配置说明\n**feature_config**\n\n```\n{\n    \"feature\": \"dataframe或者filepath：训练数据,必填\",\n    \"num_col\": \"list：数值型特征名列表,必填\",\n    \"cate_col\": \"list：类别型特征名列表,必填\",\n    \"target_col\": \"str：目标列名,选填\",\n    \"model_type\":\"str：classification:分类，regression:回归,必填\",\n    \"metric\": {特征评估，必填\n        \"null_rate\":\"bool:是否计算缺失率,选填\",\n        \"iv\":\"bool:是否计算IV值,选填\",\n        \"describe\":\"bool:是否获取特征描述信息,选填\"\n    },\n    \"preprocessing\": {特征处理，必填\n        \"fill\": {数据填充，选填\n            \"method\": \"str:填充方式，simple：简单采样,KNN：knn算法采样填充，default:simple，选填\",\n            \"fill_cate\": \"bool 类别型特征是否填充，default:True，选填\",\n            \"fill_value\": \"dict 指定特征列的填充值，default:None，选填\",\n            \"num_sample_strategy\": \"str  数值型填充方式，mean：平均值，median：中位数，most_frequent：频率，default:median，选填\",\n            \"cate_sample_strategy\": \"str 类别型填充方式，most_frequent：频率，default:most_frequent，选填\",\n            \"n_neighbors\": \"int knn采样邻居个数，default：5，选填\"\n        },\n        \"scale\": {标准化，选填\n            \"method\": \"str 选择处理方式，max_abs_scaler，min_max_scaler，standard_scaler，default:standard_scaler，选填\",\n            \"scale_col\": \"list 需要标准化的特征列，default：数值型特征列:，选填\"\n        },\n        \"bins\": {分箱，选填\n            \"bin_col\": \"list 需要分箱的特征列，default：数值型特征列:，选填\",\n            \"n_bins\": \"int or array-like of shape (n_features,), default=5，选填\",\n            \"encode\": \"用来编码转换结果的方法。{‘onehot’, ‘onehot-dense’, ‘ordinal’}, default=’onehot’,选填\n                        'onehot'。用one-hot编码对转换后的结果进行编码，并返回一个稀疏矩阵。忽略的特征总是向右叠加。\n                        'onehot-dense'。对转换后的结果进行单热编码，并返回一个密集数组。忽略的特征总是堆积在右边。\n                        'ordinal'。返回编码为整数的bin标识符。\",\n            \"strategy\": \"用来定义分仓宽度的策略。{‘uniform’, ‘quantile’, ‘kmeans’}, default=’quantile’，选填\n                        'uniform'。每个特征中的所有箱体都有相同的宽度。\n                        ‘quantile’。每个特征中的所有分仓都有相同的点数。\n                        'kmeans'。每个bin中的值都有相同的一维k-means集群的最近中心。\"\n        },\n        \"encoder\": {编码，选填\n            \"encoder_col\": \"list 需要编码的特征列，default：类别型特征列，选填\",\n            \"method\": \"str:one-hot or ordinal，default：one-hot:，选填\"\n        }\n    }\n}\n```\n**train_config**\n```\n{\n    \"algorithm\": \"str:模型，{'xgb','lr','svm','rf','gbdt','gbdt+lr','rf+lr','xgb+lr'，'lgb+lr'},必填\",\n    \"feature\": \"dataframe：特征数据,必填\",\n    \"target_col\": \"str：目标列名,选填\",\n    \"model_type\":\"str：classification:分类，regression:回归,必填\",\n    \"params\": \"dick：第一模型参数,必填\",\n    \"params2\":\"dick：组合模型中第二模型参数,必填\",\n    \"verbose\": \"bool:是否显示日志，default:True,选填\",\n    \"feature_importance\": \"bool:是否计算特征重要性，default:True,选填\"\n}\n```\n\n### 回归测试报告\n正例：1，负例：0\n\n该报告主要针对业务人员，对模型整体效果进行说明，\n该报告会对整个测试集产生的测试结果（预测概率）进行区间划分，对各个区间段的区分情况进行统计，生成如下几个指标：\n- 拒绝率：低于该阈值的用户占比\n- 拒绝分数：该分段的阈值\n- 拒绝误判率：低于该阈值的用户中实际为正例的占比，（应该为1被判定为0）\n- 通过正判率：高于该阈值的用户中实际为正例的占比，（应该为1也被判定为1）\n- 分档通过率：在该分档区间（当前阈值和下一个阈值）实际是正例的占比\n- 分档个数：在该区间的用户量\n- 拒绝误判累计占比：低于该阈值的用户中预测为负例占实际正例的比例\n- 拒绝正判累计占比：低于该阈值的用户中预测为负例占实际负例的比例\n- 通过误判累计占比：高于该阈值的用户中预测为正例占实际负例的比例\n- 通过正判累计占比：高于该阈值的用户中预测为正例占实际正例的比例\n- K-S：拒绝正判累计占比 - 拒绝误判累计占比\n- 分档通过占比：在该分档区间实际正例的占比\n- 分档拒绝占比：在该分档区间实际负例的占比\n- 分档通过人数：在该分档区间实际正例的用户数\n- 分档拒绝人数：在该分档区间实际负例的用户数\n\n**用例参考example.py文件**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.ty.ink/zhangpengfei/electric-eel",
    "keywords": "model-electriceel,scikit-learn,model,feature,metric",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "electriceel",
    "package_url": "https://pypi.org/project/electriceel/",
    "platform": "",
    "project_url": "https://pypi.org/project/electriceel/",
    "project_urls": {
      "Homepage": "https://git.ty.ink/zhangpengfei/electric-eel"
    },
    "release_url": "https://pypi.org/project/electriceel/0.0.1/",
    "requires_dist": [
      "lightgbm (==3.3.2)",
      "numpy (==1.21.2)",
      "pandas (==1.3.4)",
      "Pillow (==8.4.0)",
      "scikit-learn (==1.0.2)",
      "tables (==3.6.1)",
      "xgboost (==1.5.0)"
    ],
    "requires_python": ">=3",
    "summary": "Model electriceel for model feature metric",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12860328,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2850a576fda6e3069c030b81b789f406a8b085d7c77b59f002699ab451a5ecc7",
          "md5": "10160253a81f57b11f6636862466a233",
          "sha256": "31de38713ff476c683f6b096b1b45e27f17cdecf9b1fae5950dae8b33fea76b5"
        },
        "downloads": -1,
        "filename": "electriceel-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10160253a81f57b11f6636862466a233",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 32026,
        "upload_time": "2022-02-11T11:22:24",
        "upload_time_iso_8601": "2022-02-11T11:22:24.226208Z",
        "url": "https://files.pythonhosted.org/packages/28/50/a576fda6e3069c030b81b789f406a8b085d7c77b59f002699ab451a5ecc7/electriceel-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2850a576fda6e3069c030b81b789f406a8b085d7c77b59f002699ab451a5ecc7",
        "md5": "10160253a81f57b11f6636862466a233",
        "sha256": "31de38713ff476c683f6b096b1b45e27f17cdecf9b1fae5950dae8b33fea76b5"
      },
      "downloads": -1,
      "filename": "electriceel-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10160253a81f57b11f6636862466a233",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 32026,
      "upload_time": "2022-02-11T11:22:24",
      "upload_time_iso_8601": "2022-02-11T11:22:24.226208Z",
      "url": "https://files.pythonhosted.org/packages/28/50/a576fda6e3069c030b81b789f406a8b085d7c77b59f002699ab451a5ecc7/electriceel-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}