{
  "info": {
    "author": "Tetsu Takaishi",
    "author_email": "te2fm.t@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Lisp",
      "Programming Language :: Python :: 2",
      "Programming Language :: Scheme",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "======\nLizpop \n======\n\nLizpop is Scheme interpreter in Python.\n    \nInstallation\n============\n\nRequirements:\n\n  Lizpop requires Python 2.5 or later, but does not work in Python3.\n\nTo install:\n\n  Simply run ``python setup.py install``. \n\n  e.g. ::\n\n  $ tar zxvf lizpop-0.4.0.tar.gz \n  $ cd lizpop-0.4.0\n  $ sudo python setup.py install\n\nUsage\n=====\nTo run interactively::\n\n  $ python -O -m lizpop.run\n\nTo run a Scheme script in a file::\n\n  $ python -O -m lizpop.run yourfile.scm\n\nFor more info about command-line options::\n\n  $ python -O -m lizpop.run -h\n\nFeatures\n========\n\nSubset of Scheme R5RS\n\n  See the `Restrictions`_ section for more details.\n\nHas interfaces to Python\n\n  e.g. ::\n\n    $ cat helloworld.py \n    def hello(s=\"world\"):\n      return u\"Hello %s!\" % s.capitalize()\n\n    $ python -O -m lizpop.run\n    > (define *helloworld* (import \"helloworld\"))\n    > (define hello (attr *helloworld* 'hello))\n    > (hello \"friends\")\n    \"Hello Friends!\"\n\n\n  For more details, See the **IFPY.rst** file in this package.\n\nRegular Expression literal.\n\n  The following literal is a Regular Expression Object. ::\n\n    #/PATTERN/FLAGS\n      PATTERN:   Regular expression pattern\n      FLAGS:     Regular expression flags.\n        i-- ignore case  m-- multi-line  s-- dot matches all\n        u-- Unicode dependent  L-- locale dependent  x-- verbose\n\n  Examples ::\n\n    ;; A simple matching\n    > (re-search #/(\\d+):(\\d+)/ \"Aug 14\")  ;; not match\n    #f \n    > (re-search #/(\\d+):(\\d+)/ \"Aug 14 08:30\") ;; match\n    <_sre.SRE_Match object at ...>\n\n    ;; Get subgroup\n    > (re-group (re-search #/(\\d+):(\\d+)/ \"Aug 14 08:30\") 1 2)\n    (\"08\" \"30\")\n\n    ;; Replace string\n    > (re-gsub #/<(\\/?)h\\d>/i \"<\\\\1H3>\" \"<h1>Features:</h1>\")\n    \"<H3>Features:</H3>\"\n    > \n\n  For more info, run ``help`` procedure. ::\n \n    e.g.   \n    > (help-list #/(^re-)|(regex)/)\n    > (help re-match re-search re-group re-gsub)\n\nSupports multi-byte characters\n\n  Only utf-8 encoding now.\n\nEML(EMbedded Lizpop)\n\n  EML is a template language for embedding Lizpop code in text file.\n\n  EML has the following simple specifications.\n\n  * ``%>STRING<%`` is a new string literal, but escape sequences \n    in STRING (such as \\\\n and \\\\u3055)  are not decoded.\n\n  * Implicitly, ``%>`` is added to the beginning of the input-port.\n\n  * Implicitly, ``<%`` is added to the end of the input-port.\n\n    Note: These ideas are inspired by BRL ( http://brl.sourceforge.net/ ).\n\n  To run EML, use ``-eml`` as command line option. ::\n\n    e.g. \n    python -m lizpop.run -eml yourfile.eml\n\n  A simple example ::\n\n    $ cat gcdlcm.eml\n    <% (define numlist (map string->number *args*)) %>\n    GCD of <% numlist %> is <%(apply gcd numlist)%>.\n    LCM of <% numlist %> is <%(apply lcm numlist)%>.\n\n    $ python -m lizpop.run -eml gcdlcm.eml -- 1533 37303 4307\n    GCD of (1533 37303 4307) is 73.\n    LCM of (1533 37303 4307) is 6602631.\n\n  For more examples: \n\n    please run ``(help load-eml)`` to see its help message.\n\n  Note: ```lizpop + apache2 + mod_wsgi```\n\n    See the ``wsgi_sample/application.wsgi`` file included in this package.\n\nHelp function\n\n  Lizpop has a help-function, it displays documentation for the given\n  procedures or macros.\n\n  Usage: \n\n    (help var ...)\n\n    (help-list regex-pattern)\n\n    e.g. ::\n\n      > (help invoke)\n      Procedure: (invoke OBJ MESSAGE ARGS ... )\n        Invokes the OBJ's method named MESSAGE with ARGS ...\n        .........................................................\n\n  However, for now, the help documentation is provided only for the\n  Python-Interface related functions.\n\n  For more info, run ``(help)`` and ``(help help-list)``.\n\n  **Note**:\n    I'm not good at English. So help messages may include some\n    errors or unnatural expressions in English.\n\nRestrictions\n============\n\nHygienic macros are not supported.\n\n  ``define-syntax`` ``syntax-rules``, and ``let-syntax`` are not implemented.\n\n  Instead, traditional(non-hygienic) macros can be used.\n    => run ``(help define-macro)``\n\nStrings are not mutable.\n\n  Lizpop strings are implemented as Python unicode-string objects\n  which are immutable. so, ``string-set!`` and ``string-fill!`` don't work.\n\n``call/cc`` and ``dynamic-wind`` are only partially implemented.\n\n  Lizpop does not support full continuation.\n\n  Lizpop's ``call-with-current-continuation`` is upward-only and\n  non-reentrant. So, it can be used for non-local-exit, but cannot\n  be used for co-routines or backtracking.\n\nComplex numbers and Fractional numbers are not supported.\n\n``null-environment`` and ``scheme-report-environment`` are not implemented.\n\n    For more info, run (help eval).",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/lizpop/",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lizpop",
    "package_url": "https://pypi.org/project/lizpop/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lizpop/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/lizpop/"
    },
    "release_url": "https://pypi.org/project/lizpop/0.4.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Scheme interpreter in Python",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 751595,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13c4ab509b1052d3e50b31b1ca64d565cc2cc34464bb776313d176ef0bf66ae7",
          "md5": "99108d2a04cefdf67ab6ad5603810c8d",
          "sha256": "66cfed98d5b4bbc204e2fda20b3e988f002699355152542e9613a7fd8d8baf82"
        },
        "downloads": -1,
        "filename": "lizpop-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99108d2a04cefdf67ab6ad5603810c8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66983,
        "upload_time": "2012-04-04T08:40:55",
        "upload_time_iso_8601": "2012-04-04T08:40:55.928057Z",
        "url": "https://files.pythonhosted.org/packages/13/c4/ab509b1052d3e50b31b1ca64d565cc2cc34464bb776313d176ef0bf66ae7/lizpop-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13c4ab509b1052d3e50b31b1ca64d565cc2cc34464bb776313d176ef0bf66ae7",
        "md5": "99108d2a04cefdf67ab6ad5603810c8d",
        "sha256": "66cfed98d5b4bbc204e2fda20b3e988f002699355152542e9613a7fd8d8baf82"
      },
      "downloads": -1,
      "filename": "lizpop-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "99108d2a04cefdf67ab6ad5603810c8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 66983,
      "upload_time": "2012-04-04T08:40:55",
      "upload_time_iso_8601": "2012-04-04T08:40:55.928057Z",
      "url": "https://files.pythonhosted.org/packages/13/c4/ab509b1052d3e50b31b1ca64d565cc2cc34464bb776313d176ef0bf66ae7/lizpop-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}