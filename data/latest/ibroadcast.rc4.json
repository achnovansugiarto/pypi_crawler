{
  "info": {
    "author": "Curtis Rueden",
    "author_email": "ctrueden@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Multimedia :: Sound/Audio"
    ],
    "description": "# iBroadcast Python client\n\nThis Python package provides a client for working with your\n[iBroadcast](https://www.ibroadcast.com/) music collection.\n\n## Setup\n\n### Stable version\n\nTo install the latest release into your local environment:\n```\npip install ibroadcast\n```\n\n### Development version\n\nTo install the latest development version from source:\n```\ngit clone https://github.com/ctrueden/ibroadcast-python\ncd ibroadcast-python\npip install -e .\n```\n\n## Usage\n\n### Connect\n\nTo connect to iBroadcast, create an `ibroadcast.iBroadcast` object with your\nlogin credentials:\n\n```python\n>>> import ibroadcast\n>>> username = 'chuckles@example.com'\n>>> password = 'HappyClown123'\n>>> ib = ibroadcast.iBroadcast(username, password)\n```\n\n### Query tracks\n\nTrack data can be found in `ib.tracks`.\n\nHere is an example that lists tracks from the year 1984:\n\n```python\n>>> from pprint import pprint\n>>> tracks_from_1984 = [track for (trackid, track) in ib.tracks.items() if track['year'] == 1984]\n>>> pprint(tracks_from_1984)\n[{'album_id': 49436760,\n  'artist_id': 17407280,\n  'artwork_id': 1892638,\n  'enid': 0,\n  'file': '/128/a8b/567/150924731',\n  'genre': 'Pop',\n  'length': 205,\n  'path': 'music/Artists/Kansas/(1984) The Best of Kansas',\n  'plays': 1,\n  'rating': 0,\n  'replay_gain': '0.5',\n  'size': 3572231,\n  'title': 'Dust in the Wind',\n  'track': 4,\n  'trashed': False,\n  'type': 'audio/mpeg3',\n  'uid': '',\n  'uploaded_on': '2020-12-10',\n  'uploaded_time': '16:09:59',\n  'year': 1984},\n {'album_id': 49438358,\n  'artist_id': 17407663,\n  'artwork_id': 465315,\n  'enid': 0,\n  'file': '/128/962/d79/150926596',\n  'genre': 'New Wave, Post-Punk, Rock, Funk',\n  'length': 307,\n  'path': 'music/Artists/Talking Heads/(1984) Stop Making Sense',\n  'plays': 1,\n  'rating': 0,\n  'replay_gain': '0.8',\n  'size': 6510922,\n  'title': 'Girlfriend Is Better',\n  'track': 5,\n  'trashed': False,\n  'type': 'audio/mpeg3',\n  'uid': '',\n  'uploaded_on': '2020-12-10',\n  'uploaded_time': '16:14:56',\n  'year': 1984}]\n```\n\n### Query albums\n\nAlbum data can be found in `ib.albums`.\n\nHere is an example that lists albums from the year 1984:\n\n```python\n>>> albums_from_1984 = [album for (albumid, album) in ib.albums.items() if album['year'] == 1984]\n>>> pprint(albums_from_1984)\n[{'artist_id': 17407663,\n  'disc': 1,\n  'name': 'Stop Making Sense',\n  'rating': 0,\n  'tracks': [189817292],\n  'trashed': False,\n  'year': 1984},\n {'artist_id': 17407280,\n  'disc': 1,\n  'name': 'The Best of Kansas',\n  'rating': 0,\n  'tracks': [189815191],\n  'trashed': False,\n  'year': 1984}]\n```\n\n### Query artists\n\nArtist data can be found in `ib.artists`.\n\nHere is an example that lists artists with more than 170 tracks:\n\n```python\n>>> [artist['name'] for artist in ib.artists.values() if len(artist['tracks']) >= 170]\n['Scooter', 'Megadeth', 'Bad Religion', 'Metallica', 'Green Day']\n```\n\n### Query playlists\n\nPlaylist data can be found in `ib.playlists`.\n\nHere is an example that lists the names of all playlists:\n\n```python\n>>> [playlist['name'] for playlist in ib.playlists.values()]\n['Jonathan Hall', 'Army of Hardcore', 'Most Recent Uploads', 'Recently Played', 'Stand Up', 'Roads Untraveled', 'The Storm', 'Thumbs Up']\n```\n\nHere's an example that lists the track names of a particular playlist:\n\n```python\n>>> def track2string(ib, track):\n...   title = track['title']\n...   artistid = track['artist_id']\n...   artist = ib.artist(artistid)\n...   return f\"{artist['name']} - {title}\"\n...\n>>> thumbsup = next(pl for pl in ib.playlists.values() if pl['name'] == 'Thumbs Up')\n>>> for trackid in thumbsup['tracks']:\n...   track = ib.track(trackid)\n...   print(track2string(ib, track))\n...\nOzzy Osbourne - I Don't Know\nELLEGARDEN - Mr. Feather\nThe Dreaming - Become Like You\nRMB - Everything (Can't Hide version)\nLinkin Park - The Catalyst\nBreathe Carolina - Blackout\nLady Gaga - Swine\nAdam Lambert - Feeling Good\nVirtual Riot - Energy Drink\nJim Yosef - Link\nMDK - Hyper Beam\nHybrid - I Know\n```\n\n### Query tags\n\nTag data can be found in `ib.tags`.\n\nHere is an example that lists all tracks tagged \"favorites\" from 2010 or later:\n\n```python\n>>> favorite_trackids = next(tag['tracks'] for tag in ib.tags.values() if tag['name'] == 'favorites')\n>>> for trackid in favorite_trackids:\n...   track = ib.track(trackid)\n...   year = track['year']\n...   if year < 2010: continue\n...   print(f\"[{year}] {track2string(ib, track)}\")\n...\n[2010] Bad Religion - Only Rain\n[2016] Green Day - Still Breathing\n[2012] The Offspring - Dirty Magic\n[2012] Imagine Dragons - Radioactive\n[2013] All Time Low - Fool's Holiday\n[2013] Michael Bublé - It's a Beautiful Day\n[2010] Kerry Ellis - Defying Gravity\n[2010] Glee Cast - Defying Gravity\n[2013] Kristen Anderson‐Lopez & Robert Lopez - Let It Go\n[2014] The Glitch Mob feat. Aja Volkman - Our Demons\n[2012] Great Big Sea - Run Runaway\n[2010] Andrew Lippa - Happy / Sad\n```\n\n### Available iBroadcast API methods\n\n```python\n>>> help(ib)\nHelp on iBroadcast in module ibroadcast object:\n\nclass iBroadcast(builtins.object)\n |  iBroadcast(username, password, log=None, client='ibroadcast-python', version='1.1.0')\n |\n |  Class for making iBroadcast requests.\n |\n |  Adapted from ibroadcast-uploader.py at <https://project.ibroadcast.com/>.\n |\n |  Methods defined here:\n |\n |  __init__(self, username, password, log=None, client='ibroadcast-python', version='1.1.0')\n |      Initialize self.  See help(type(self)) for accurate signature.\n |\n |  addtracks(self, playlistid, trackids)\n |      Add tracks to the given playlist.\n |\n |      Unlike settracks, this operation will append to, not overwrite,\n |      the playlist's tracks.\n |\n |      :param playlistid: ID of the playlist to update.\n |      :param trackids: List of IDs for the tracks to be added.\n |\n |      Raises:\n |          ServerError on problem updating the playlist\n |\n |  album(self, albumid)\n |      Get the album object with the given ID.\n |\n |      :param albumid: ID of the album to retrieve.\n |      :return: The album object.\n |\n |  artist(self, artistid)\n |      Get the artist object with the given ID.\n |\n |      :param artistid: ID of the artist to retrieve.\n |      :return: The artist object.\n |\n |  createplaylist(self, name, description='', sharable=False, mood=None)\n |      Create a playlist.\n |\n |      :param name: Name of the playlist to create.\n |      :param description: Description of the playlist.\n |      :param sharable: Whether to make the playlist sharable and publicly viewable.\n |      :param mood: Mood to use for autopopulating tracks:\n |                   None, Party, Dance, Workout, Relaxed, or Chill.\n |      :return: ID of newly created playlist.\n |\n |      Raises:\n |          ServerError on problem creating the playlist\n |\n |  createtag(self, tagname)\n |      Create a tag.\n |\n |      :param tagname: Name of the tag to create.\n |      :return: ID of newly created tag.\n |\n |      Raises:\n |          ServerError on problem creating the tag\n |\n |  deleteplaylist(self, playlistid)\n |      Delete a playlist.\n |\n |      :param playlistid: ID of the playlist to delete.\n |\n |      Raises:\n |          ServerError on problem deleting the playlist\n |\n |  extensions(self)\n |      Get file extensions for supported audio formats.\n |\n |  gettags(self, trackid)\n |      Get the tags for the given track.\n |\n |      :param trackid: ID of the track in question.\n |      :return: List of tag IDs.\n |\n |  istagged(self, tagid, trackid)\n |      Get whether the specified track has the given tag.\n |\n |      :param tagid: ID of the tag in question.\n |      :param trackid: ID of the track in question.\n |      :return: True iff the track is tagged with that tag.\n |\n |  isuploaded(self, filepath)\n |      Get whether a given file is already uploaded to the iBroadcast server.\n |\n |      :param filepath: Path to the file to check.\n |\n |      Raises:\n |          ServerError on problem downloading remote MD5 checksums\n |\n |  playlist(self, playlistid)\n |      Get the playlist object with the given ID.\n |\n |      :param playlistid: ID of the playlist to retrieve.\n |      :return: The playlist object.\n |\n |  refresh(self)\n |      Download library data: albums, artists, tracks, etc.\n |\n |      Raises:\n |          ServerError on problem completing the request\n |\n |  settracks(self, playlistid, trackids)\n |      Update the given playlist to consist of the specified tracks.\n |\n |      Unlike addtracks, this operation will overwrite, not append to,\n |      the playlist's tracks.\n |\n |      :param playlistid: ID of the playlist to update.\n |      :param trackids: List of IDs for the playlist tracks.\n |\n |      Raises:\n |          ServerError on problem updating the playlist\n |\n |  tag(self, tagid)\n |      Get the tag object with the given ID.\n |\n |      :param tagid: ID of the tag to retrieve.\n |      :return: The tag object.\n |\n |  tagtracks(self, tagid, trackids, untag=False)\n |      Apply or remove the given tag to the specified tracks.\n |\n |      :param tagid: ID of the tag to apply.\n |      :param trackids: List of IDs for the tracks to tag.\n |      :param untag: If true, remove the tag rather than applying it.\n |\n |      Raises:\n |          ServerError on problem tagging/untagging the tracks\n |\n |  token(self)\n |      Get the authentication token for the current session.\n |\n |  track(self, trackid)\n |      Get the track object with the given ID.\n |\n |      :param trackid: ID of the track to retrieve.\n |      :return: The track object.\n |\n |  trash(self, trackids)\n |      Move the given tracks to the trash.\n |\n |      :param trackids: List of IDs for the tracks to tag.\n |\n |      Raises:\n |          ServerError on problem trashing the tracks\n |\n |\n |  upload(self, filepath, label=None, force=False)\n |      Upload the given file to iBroadcast, if it isn't there already.\n |\n |      :param filepath: Path to the file for upload.\n |      :param label: Human-readable file string (e.g., without problematic\n |                    special characters) to use when logging messages about\n |                    this operation, or None to use the file path directly.\n |      :param force: Upload the file even if checksum is already present.\n |      :return: Track ID of the uploaded file, or None if no upload occurred.\n |\n |      Raises:\n |          ServerError on problem completing the request\n |\n |  user_id(self)\n |      Get the user_id for the current session.\n```\n\n## Getting help\n\nFile an issue in the\n[issue tracker](https://github.com/ctrueden/ibroadcast-python/issues).\n\n## Contributing\n\nPRs welcome! ^.~\n\n### Testing changes\n\nThis project has no unit tests, but there are integration tests.\nThey require a valid username and password to iBroadcast.\nAll of the integration tests are read-only.\n\n```shell\n$ python tests/integration.py\nINFO:root:Please enter iBroadcast credentials:\nUsername: chuckles@example.com\nPassword:\nINFO:root:Logging in as chuckles@example.com...\nINFO:root:ok\nINFO:root:Login successful - user_id: 12345\nINFO:root:Downloading library data...\nINFO:root:Checked 995 albums totaling 5951 tracks.\n.INFO:root:Checked 1790 artists totaling 5951 tracks.\n...INFO:root:Downloading MD5 checksums...\nINFO:root:Returning list of md5 checksums from server\n.INFO:root:Checked 8 playlists totaling 1691 tracks.\n.INFO:root:Checked 17 tags totaling 2208 tracks.\nINFO:root:Checked 5951 tracks.\n..\n----------------------------------------------------------------------\nRan 10 tests in 0.567s\n\nOK\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ctrueden/ibroadcast-python",
    "keywords": "",
    "license": "Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ibroadcast",
    "package_url": "https://pypi.org/project/ibroadcast/",
    "platform": "ALL",
    "project_url": "https://pypi.org/project/ibroadcast/",
    "project_urls": {
      "Homepage": "https://github.com/ctrueden/ibroadcast-python"
    },
    "release_url": "https://pypi.org/project/ibroadcast/1.1.2/",
    "requires_dist": [
      "requests (>=2.24.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "iBroadcast Python client",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15001527,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19209585a906a9fdb29b06c33b5d0b3388df6ff1f5d845da643efc61fc85abbd",
          "md5": "3155f9d400558c3db0c7353fafb4846d",
          "sha256": "cd44bffd0003498d9edf481c6de29d6d8559030a0478ff7d2608e349050553ae"
        },
        "downloads": -1,
        "filename": "ibroadcast-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3155f9d400558c3db0c7353fafb4846d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10939,
        "upload_time": "2021-08-19T03:25:14",
        "upload_time_iso_8601": "2021-08-19T03:25:14.571608Z",
        "url": "https://files.pythonhosted.org/packages/19/20/9585a906a9fdb29b06c33b5d0b3388df6ff1f5d845da643efc61fc85abbd/ibroadcast-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9681cd0f681ceb0c38bce298a046ded92b3ef0005852b62e2174780172cda1b8",
          "md5": "97dd4512473983909574299a8e14ecb5",
          "sha256": "e1fba967b5eaa0f65146cf2fee1a6c3737855f84daa72238f2bf89c700e02b37"
        },
        "downloads": -1,
        "filename": "ibroadcast-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97dd4512473983909574299a8e14ecb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11517,
        "upload_time": "2021-08-20T03:40:48",
        "upload_time_iso_8601": "2021-08-20T03:40:48.725810Z",
        "url": "https://files.pythonhosted.org/packages/96/81/cd0f681ceb0c38bce298a046ded92b3ef0005852b62e2174780172cda1b8/ibroadcast-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "793d4f613425a6dbce6520aa0fa2d2ff50d0673faa172703b2a1072aa769726c",
          "md5": "feaa0e85ead218fa896ad1eac60b4492",
          "sha256": "12693b9bd8c65c9ec04fb639491da2bd53a8b254156d880410d5458903b72da2"
        },
        "downloads": -1,
        "filename": "ibroadcast-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "feaa0e85ead218fa896ad1eac60b4492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12762,
        "upload_time": "2021-08-26T03:57:35",
        "upload_time_iso_8601": "2021-08-26T03:57:35.648724Z",
        "url": "https://files.pythonhosted.org/packages/79/3d/4f613425a6dbce6520aa0fa2d2ff50d0673faa172703b2a1072aa769726c/ibroadcast-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "beaa87ab165b297b11e59149cec55ef8cecab11e0017ec13aa4191dda70ae5a5",
          "md5": "8261decb96dbb6c15d4fc972fe0c96c3",
          "sha256": "8ad64b6dff4d0da065c09b8a6a257469058da641b4ac24abe7178905e0f4ecbd"
        },
        "downloads": -1,
        "filename": "ibroadcast-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8261decb96dbb6c15d4fc972fe0c96c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9964,
        "upload_time": "2022-09-06T00:55:30",
        "upload_time_iso_8601": "2022-09-06T00:55:30.484932Z",
        "url": "https://files.pythonhosted.org/packages/be/aa/87ab165b297b11e59149cec55ef8cecab11e0017ec13aa4191dda70ae5a5/ibroadcast-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7501d50425f7124484b20f20a0be6f3e1d2344e5eaf5df144665d3f6bdd2a236",
          "md5": "a11083b0f0bf3166000bfdaf3e01276f",
          "sha256": "70670e113ffcdf439e9b0dc961c0d1c5b01875b52128d4e836826a78265f3b87"
        },
        "downloads": -1,
        "filename": "ibroadcast-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a11083b0f0bf3166000bfdaf3e01276f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11759,
        "upload_time": "2022-09-06T00:55:32",
        "upload_time_iso_8601": "2022-09-06T00:55:32.337524Z",
        "url": "https://files.pythonhosted.org/packages/75/01/d50425f7124484b20f20a0be6f3e1d2344e5eaf5df144665d3f6bdd2a236/ibroadcast-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "beaa87ab165b297b11e59149cec55ef8cecab11e0017ec13aa4191dda70ae5a5",
        "md5": "8261decb96dbb6c15d4fc972fe0c96c3",
        "sha256": "8ad64b6dff4d0da065c09b8a6a257469058da641b4ac24abe7178905e0f4ecbd"
      },
      "downloads": -1,
      "filename": "ibroadcast-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8261decb96dbb6c15d4fc972fe0c96c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9964,
      "upload_time": "2022-09-06T00:55:30",
      "upload_time_iso_8601": "2022-09-06T00:55:30.484932Z",
      "url": "https://files.pythonhosted.org/packages/be/aa/87ab165b297b11e59149cec55ef8cecab11e0017ec13aa4191dda70ae5a5/ibroadcast-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7501d50425f7124484b20f20a0be6f3e1d2344e5eaf5df144665d3f6bdd2a236",
        "md5": "a11083b0f0bf3166000bfdaf3e01276f",
        "sha256": "70670e113ffcdf439e9b0dc961c0d1c5b01875b52128d4e836826a78265f3b87"
      },
      "downloads": -1,
      "filename": "ibroadcast-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a11083b0f0bf3166000bfdaf3e01276f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11759,
      "upload_time": "2022-09-06T00:55:32",
      "upload_time_iso_8601": "2022-09-06T00:55:32.337524Z",
      "url": "https://files.pythonhosted.org/packages/75/01/d50425f7124484b20f20a0be6f3e1d2344e5eaf5df144665d3f6bdd2a236/ibroadcast-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}