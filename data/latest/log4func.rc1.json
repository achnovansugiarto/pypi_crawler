{
  "info": {
    "author": "bugph0bia",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Logging"
    ],
    "description": "log4func\n===\n\n![Software Version](http://img.shields.io/badge/Version-v0.1.0-green.svg?style=flat)\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)\n\n[Japanese Page](./README.ja.md)\n\n## Overview\nLog helpers for functions and methods.\n\n## License\n[MIT License](./LICENSE)\n\n## Installation\n### pip\n```\npip install log4func\n```\n\n### github\n```\npip install git+https://github.com/bugph0bia/log4func.git\n```\n\n## Usage\n### `@log_start_end`\nDecorator that logs out the start and end of the target function.  \nLog output using the function passed as argument.  \n\n#### Parameter\n\n- `logging_func` (Callable): Log output function, must be able to accept an argument of type `str` and log it. Can be `print` or `logging` module's `debug`, `info`, and more.\n- `with_start` (bool): Toggles whether or not the start log is output. Default is `True`.\n- `with_end` (bool): Toggles whether or not the end log is output. Default is `True`.\n\n#### Example\n```py\n@log_start_end(print)\ndef foo(a, b):\n    print(f'calc {a} + {b}')\n    return a + b\n\nfoo(1, 2)\n```\n\nOutput  \n```sh\nfoo start\ncalc 1 + 2\nfoo end\n```\n\n### `@log_args_return`\nDecorator that logs real arguments and return values of the target function.  \nLog output using the function passed as argument.  \n\n#### Parameter\n\n- `logging_func` (Callable): Log output function, must be able to accept an argument of type `str` and log it. Can be `print` or `logging` module's `debug`, `info`, and more.\n- `with_args` (bool): Toggles whether or not the arguments log is output. Default is `True`.\n- `with_return` (bool): Toggles whether or not the return log is output. Default is `True`.\n- `oneline` (bool): Toggles whether or not logs are combined into a single line. Default is `False`.\n\n#### Example\n```py\n@log_args_return(print)\ndef foo(a, b):\n    print(f'calc {a} + {b}')\n    return a + b\n\nfoo(1, b=2)\n```\n\nOutput  \n```sh\nfoo args:\n  1\n  b=2\ncalc 1 + 2\nfoo return:\n  3\n```\n\n```py\n@log_args_return(print, oneline=True)\ndef foo(a, b):\n    print(f'calc {a} + {b}')\n    return a + b\n\nfoo(1, b=2)\n```\n\nOutput  \n```sh\nfoo args: 1, b=2\ncalc 1 + 2\nfoo return: 3\n```\n\n### `@log_traceback`\nDecorator that logs out a traceback of exceptions raised by the target function.  \nLog output using the function passed as argument.  \n\nTraceback is output to the screen by default, but it is useful if you want to keep it in a file. (e.g. in the logging module)  \n\n#### Parameter\n\n- `logging_func` (Callable): Log output function, must be able to accept an argument of type `str` and log it. Can be `print` or `logging` module's `debug`, `info`, and more.\n\n#### Note\n\n- The part that `log4func.log_traceback` wraps is also output to traceback.\n\n#### Example\n```py\n@log_traceback(print)\ndef foo(a, b):\n    return a / b\n\nfoo(1, 0)\n```\n\nOutput  \n```sh\nTraceback (most recent call last):\nFile \"...\\log4func.py\", line 184, in wrapper\n    decorated_func(*args, **kwargs)\nFile \"...\\test.py\", line 2, in foo\n    a / b\nZeroDivisionError: division by zero\n```\n\n### `@wraps_logging_params`\nDecorator that allows the original function name to be output when the function name is logged in the decorator.  \n\n#### Supplemental Explanation\n\nThere is a problem that if you apply your own decorator to a function, the function name of the decorator becomes the function name of the original function when you get the original function name with `func.__name__`.\nTo solve this problem, you can apply `@functool.wraps` decorator to your own decorator.\n\nSimilarly, if you apply your own decorator to a function, the function name (`%(funcName)s`) output inside the original function using the logging module will be the decorator's function name.\nTo solve this problem, you can apply `@log4func.wraps_logging_params` decorator to your own decorator.\n\n### Note\n- If used with `@classmethod` or `@staticmethod`, it must be an inner decorator.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bugph0bia/log4func",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "log4func",
    "package_url": "https://pypi.org/project/log4func/",
    "platform": null,
    "project_url": "https://pypi.org/project/log4func/",
    "project_urls": {
      "Homepage": "https://github.com/bugph0bia/log4func"
    },
    "release_url": "https://pypi.org/project/log4func/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "logging helper for functions and methods",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15742718,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bea069a80e89728a34ebce45ca33b6724ccd69545a41d8326a98f71d84faa4ea",
          "md5": "85226cc84e0b90791cd643f0982b88f7",
          "sha256": "6dfe154ff81d9fdf2089373f54dcc9dda6b09abf06a186967f47b4f477a9b632"
        },
        "downloads": -1,
        "filename": "log4func-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85226cc84e0b90791cd643f0982b88f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4916,
        "upload_time": "2022-11-12T07:31:40",
        "upload_time_iso_8601": "2022-11-12T07:31:40.336587Z",
        "url": "https://files.pythonhosted.org/packages/be/a0/69a80e89728a34ebce45ca33b6724ccd69545a41d8326a98f71d84faa4ea/log4func-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bea069a80e89728a34ebce45ca33b6724ccd69545a41d8326a98f71d84faa4ea",
        "md5": "85226cc84e0b90791cd643f0982b88f7",
        "sha256": "6dfe154ff81d9fdf2089373f54dcc9dda6b09abf06a186967f47b4f477a9b632"
      },
      "downloads": -1,
      "filename": "log4func-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "85226cc84e0b90791cd643f0982b88f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4916,
      "upload_time": "2022-11-12T07:31:40",
      "upload_time_iso_8601": "2022-11-12T07:31:40.336587Z",
      "url": "https://files.pythonhosted.org/packages/be/a0/69a80e89728a34ebce45ca33b6724ccd69545a41d8326a98f71d84faa4ea/log4func-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}