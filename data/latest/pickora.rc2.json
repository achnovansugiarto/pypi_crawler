{
  "info": {
    "author": "splitline",
    "author_email": "tbsthitw@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pickora 🐰\n\nA small compiler that can convert Python scripts to pickle bytecode. \n\n## Requirements\n\n- Python 3.8+\n\nNo third-party modules are required.\n\n## Quick Start\n\n### Installation\n\n**Using pip:**\n\n```sh\n$ pip install pickora\n```\n\n**From source:**\n\n```sh\n$ git clone https://github.com/splitline/Pickora.git\n$ cd Pickora\n$ python setup.py install\n```\n\n### Basic Usage\n\n**Compile from a string:**\n\n```sh\n$ pickora -c 'from builtins import print; print(\"Hello, world!\")' -o output.pkl\n$ python -m pickle output.pkl # load the pickle bytecode\nHello, world!\nNone\n```\n\n**Compile from a file:**\n\n```sh\n$ echo 'from builtins import print; print(\"Hello, world!\")' > hello.py\n$ pickora hello.py # output compiled pickle bytecode to stdout directly\nb'\\x80\\x04\\x95(\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08builtins\\x8c\\x05print\\x93\\x94\\x94h\\x01\\x8c\\rHello, world!\\x85R.'\n```\n\n## Usage\n\n```\nusage: pickora [-h] [-c CODE] [-p PROTOCOL] [-e] [-O] [-o OUTPUT] [-d] [-r]\n               [-f {repr,raw,hex,base64,none}]\n               [source]\n\nA toy compiler that can convert Python scripts into pickle bytecode.\n\npositional arguments:\n  source                source code file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CODE, --code CODE  source code string\n  -p PROTOCOL, --protocol PROTOCOL\n                        pickle protocol\n  -e, --extended        enable extended syntax (trigger find_class)\n  -O, --optimize        optimize pickle bytecode (with pickletools.optimize)\n  -o OUTPUT, --output OUTPUT\n                        output file\n  -d, --disassemble     disassemble pickle bytecode\n  -r, --run             run (load) pickle bytecode immediately\n  -f {repr,raw,hex,base64,none}, --format {repr,raw,hex,base64,none}\n                        output format, none means no output\n\nBasic usage: `pickora samples/hello.py` or `pickora --code 'print(\"Hello, world!\")' --extended`\n```\n\n## Supported Syntax\n\n### Basic Syntax (achived by only using `pickle` opcodes)\n- Basic types: int, float, bytes, string, dict, list, set, tuple, bool, None\n- Assignment: `val = dict_['x'] = obj.attr = 'meow'`\n- Augmented assignment: `x += 1`\n- Named assignment: `(x := 1337)`\n- Unpacking: `a, b, c = 1, 2, 3`\n- Function call: `f(arg1, arg2)`\n  - Doesn't support keyword argument.\n- Import\n  - `from module import things` (directly using `STACK_GLOBALS` bytecode)\n- Macros (see below for more details)\n  - `STACK_GLOBAL`\n  - `GLOBAL`\n  - `INST`\n  - `OBJ`\n  - `NEWOBJ`\n  - `NEWOBJ_EX`\n  - `BUILD`\n\n\n### Extended Syntax (enabled by `-e` / `--extended` option)\n> Note: All extended syntaxes are implemented by importing other built-in modules. So with this option will trigger `find_class` when loading the pickle bytecode.\n\n- Attributes: `obj.attr` (using `builtins.getattr` only when you need to \"load\" an attribute)\n- Operators (using `operator` module)\n  - Binary operators: `+`, `-`, `*`, `/` etc.\n  - Unary operators: `not`, `~`, `+val`, `-val`\n  - Compare: `0 < 3 > 2 == 2 > 1` (using `builtins.all` for chained comparing)\n  - Subscript: `list_[1:3]`, `dict_['key']` (using `builtins.slice` for slice)\n  - Boolean operators (using `builtins.next`, `builtins.filter`)\n    - and: using `operator.not_`\n    - or: using `operator.truth`\n    - `(a or b or c)` -> `next(filter(truth, (a, b, c)), c)`\n    - `(a and b and c)` -> `next(filter(not_, (a, b, c)), c)`\n- Import\n  - `import module` (using `importlib.import_module`)\n- Lambda\n  - `lambda x,y=1: x+y`\n  - Using `types.CodeType` and `types.FunctionType`\n  - [Known bug] If any global variables are changed after the lambda definition, the lambda function won't see those changes.\n\n\n## Macros\n\nThere are currently 4 macros available: `STACK_GLOBAL`, `GLOBAL`, `INST` and `BUILD`.\n\n### `STACK_GLOBAL(modname: Any, name: Any)`\n\n**Example:**\n```python\nfunction_name = input(\"> \") # > system\nfunc = STACK_GLOBAL('os', function_name) # <built-in function system>\nfunc(\"date\") # Tue Jan 13 33:33:37 UTC 2077\n```\n\n**Behaviour:**\n1. PUSH modname\n2. PUSH name\n3. STACK_GLOBAL\n\n### `GLOBAL(modname: str, name: str)`\n\n**Example:**\n```python\nfunc = GLOBAL(\"os\", \"system\") # <built-in function system>\nfunc(\"date\") # Tue Jan 13 33:33:37 UTC 2077\n```\n\n**Behaviour:**\n\nSimply write this piece of bytecode: `f\"c{modname}\\n{name}\\n\"`\n\n### `INST(modname: str, name: str, args: tuple[Any])`\n\n**Example:**\n```python\ncommand = input(\"cmd> \") # cmd> date\nINST(\"os\", \"system\", (command,)) # Tue Jan 13 33:33:37 UTC 2077\n```\n\nBehaviour:\n1. PUSH a MARK\n2. PUSH `args` by order\n3. Run this piece of bytecode: `f'i{modname}\\n{name}\\n'`\n\n### `BUILD(inst: Any, state: Any, slotstate: Any)`\n\n> `state` is for `inst.__setstate__(state)` and `slotstate` is for setting attributes.\n\n**Example:**\n```python\nfrom collections import _collections_abc\nBUILD(_collections_abc, None, {'__all__': ['ChainMap', 'Counter', 'OrderedDict']})\n```\n\n**Behaviour:**\n\n1. PUSH `inst`\n2. PUSH `(state, slotstate)` (tuple)\n3. PUSH `BUILD`\n\n## FAQ\n\n### What is pickle?\n\n[RTFM](https://docs.python.org/3/library/pickle.html).\n\n### Why?\n\nIt's cool.\n\n### Is it useful?\n\nNo, not at all, it's definitely useless.\n\n### So, is this garbage?\n\nYep, it's cool garbage.\n\n### Would it support syntaxes like `if` / `while` / `for` ?\n\nNo. All pickle can do is just simply define a variable or call a function, so this kind of syntax wouldn't exist.\n\nBut if you want to do things like:\n```python\nans = input(\"Yes/No: \")\nif ans == 'Yes':\n  print(\"Great!\")\nelif ans == 'No':\n  exit()\n```\nIt's still achievable! You can rewrite your code like this:\n\n```python\nfrom functools import partial\ncondition = {'Yes': partial(print, 'Great!'), 'No': exit}\nans = input(\"Yes/No: \")\ncondition.get(ans, repr)()\n```\nta-da!\n\nFor the loop syntax, you can try to use `map` / `starmap` /  `reduce` etc .\n\nAnd yes, you are right, it's functional programming time!\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/splitline/Pickora",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pickora",
    "package_url": "https://pypi.org/project/pickora/",
    "platform": null,
    "project_url": "https://pypi.org/project/pickora/",
    "project_urls": {
      "Homepage": "https://github.com/splitline/Pickora"
    },
    "release_url": "https://pypi.org/project/pickora/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A toy compiler that can convert Python scripts into pickle bytecode.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16934723,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f1b07d6fee755c47bc3bdb73a44559a81b3bc7b3c8e32ac2e2e00a9f7b768c1",
          "md5": "aedb74e87b2e198cc1f5528ccd68cb7a",
          "sha256": "456124e34a366b777b3b12c13bb42eff7f0ddd5d7b8044eca9e6736663329f4b"
        },
        "downloads": -1,
        "filename": "pickora-1.0.0-py3.9.egg",
        "has_sig": false,
        "md5_digest": "aedb74e87b2e198cc1f5528ccd68cb7a",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": ">=3.8",
        "size": 19242,
        "upload_time": "2023-02-19T21:31:26",
        "upload_time_iso_8601": "2023-02-19T21:31:26.646033Z",
        "url": "https://files.pythonhosted.org/packages/3f/1b/07d6fee755c47bc3bdb73a44559a81b3bc7b3c8e32ac2e2e00a9f7b768c1/pickora-1.0.0-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "186ecbf6a770a7cd146b3e2f988ae696c1e3de252493e8b1db21dfd37fcd1a38",
          "md5": "166a40c3a2f225abf519c4fb00552434",
          "sha256": "e189ec974198a4186c8c6ef6b2a68b929e1f20caf557d4a6e823d2813b8b295a"
        },
        "downloads": -1,
        "filename": "pickora-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "166a40c3a2f225abf519c4fb00552434",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10471,
        "upload_time": "2023-02-19T21:31:24",
        "upload_time_iso_8601": "2023-02-19T21:31:24.810326Z",
        "url": "https://files.pythonhosted.org/packages/18/6e/cbf6a770a7cd146b3e2f988ae696c1e3de252493e8b1db21dfd37fcd1a38/pickora-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65f12da5298b5481ba64581986eec8d69eba9d8fd2cafb88d6c7df9114a211b0",
          "md5": "bf723373094ff3dd6d329ecb0d131a07",
          "sha256": "24fbf103356d3492fda56ebe2b99e239cf66a2d33e89400cf1cb44482c6672cb"
        },
        "downloads": -1,
        "filename": "pickora-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf723373094ff3dd6d329ecb0d131a07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9480,
        "upload_time": "2023-02-19T21:31:28",
        "upload_time_iso_8601": "2023-02-19T21:31:28.003719Z",
        "url": "https://files.pythonhosted.org/packages/65/f1/2da5298b5481ba64581986eec8d69eba9d8fd2cafb88d6c7df9114a211b0/pickora-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5de01fecb56973c4017492b88c7552e17f8b662afe51e493e4010108e7a930c3",
          "md5": "95999f6edd5f7045fb066796b8ca6e0e",
          "sha256": "158d1d6a5df22e0905450a9147fbb63ac29795c30c42f4a6362efe51c8fee6d4"
        },
        "downloads": -1,
        "filename": "pickora-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95999f6edd5f7045fb066796b8ca6e0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10524,
        "upload_time": "2023-02-19T23:34:37",
        "upload_time_iso_8601": "2023-02-19T23:34:37.522066Z",
        "url": "https://files.pythonhosted.org/packages/5d/e0/1fecb56973c4017492b88c7552e17f8b662afe51e493e4010108e7a930c3/pickora-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc7bb19dada2ddfd6705089d6a268351ddf24b550af1cdaca3ef3c32ba89aa14",
          "md5": "dc7c67ea51e3eed70b9c1f84b992c466",
          "sha256": "98cec52e66c4e7fc45d824e77b56a31af7cb03239855fecd35ba8cca1cbf40d0"
        },
        "downloads": -1,
        "filename": "pickora-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc7c67ea51e3eed70b9c1f84b992c466",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11691,
        "upload_time": "2023-02-19T23:34:39",
        "upload_time_iso_8601": "2023-02-19T23:34:39.194800Z",
        "url": "https://files.pythonhosted.org/packages/dc/7b/b19dada2ddfd6705089d6a268351ddf24b550af1cdaca3ef3c32ba89aa14/pickora-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5de01fecb56973c4017492b88c7552e17f8b662afe51e493e4010108e7a930c3",
        "md5": "95999f6edd5f7045fb066796b8ca6e0e",
        "sha256": "158d1d6a5df22e0905450a9147fbb63ac29795c30c42f4a6362efe51c8fee6d4"
      },
      "downloads": -1,
      "filename": "pickora-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95999f6edd5f7045fb066796b8ca6e0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10524,
      "upload_time": "2023-02-19T23:34:37",
      "upload_time_iso_8601": "2023-02-19T23:34:37.522066Z",
      "url": "https://files.pythonhosted.org/packages/5d/e0/1fecb56973c4017492b88c7552e17f8b662afe51e493e4010108e7a930c3/pickora-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc7bb19dada2ddfd6705089d6a268351ddf24b550af1cdaca3ef3c32ba89aa14",
        "md5": "dc7c67ea51e3eed70b9c1f84b992c466",
        "sha256": "98cec52e66c4e7fc45d824e77b56a31af7cb03239855fecd35ba8cca1cbf40d0"
      },
      "downloads": -1,
      "filename": "pickora-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dc7c67ea51e3eed70b9c1f84b992c466",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 11691,
      "upload_time": "2023-02-19T23:34:39",
      "upload_time_iso_8601": "2023-02-19T23:34:39.194800Z",
      "url": "https://files.pythonhosted.org/packages/dc/7b/b19dada2ddfd6705089d6a268351ddf24b550af1cdaca3ef3c32ba89aa14/pickora-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}