{
  "info": {
    "author": "Luke Burden",
    "author_email": "lukeburden@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Django Konst\n\n[![](https://img.shields.io/pypi/v/django-konst.svg)](https://pypi.python.org/pypi/django-konst/)\n[![](https://img.shields.io/badge/license-MIT-blue.svg)](https://pypi.python.org/pypi/django-konst/)\n[![CircleCI](https://circleci.com/gh/lukeburden/django-konst.svg?style=svg)](https://circleci.com/gh/lukeburden/django-konst)\n[![Codecov](https://codecov.io/gh/lukeburden/django-konst/branch/master/graph/badge.svg)](https://codecov.io/gh/lukeburden/django-konst)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n\n## django-konst\n\n`django-konst` is a utility for Django that makes the definition, use and storage of both integer and string based constants easy and readable. It avoids passing of constants\ninto template contexts and makes evaluation concise and readable.\n\nIt also makes exposure of these constants via forms and DRF serializers simple.\n\n### Definition ###\n\nConstants can be defined with friendly names, backed by either integers or text.\n\n#### Constants ####\n\n```python\nfrom konst import Constant\n\n# states backed by integers\nstates = Constants(\n    Constant(pending=0),\n    Constant(active=1),\n    Constant(inactive=2)\n)\n\n# and another set of constants backed by strings\ncolours = Constants(\n    Constant(red=\"FF0000\"),\n    Constant(green=\"00FF00\"),\n    Constant(yellow=\"FFFF80\"),\n    Constant(white=\"FFFFFF\")\n)\n\n```\n\n#### Constant groups ####\n\nAt times, it will be necessary to group constants and test membership within that group.\nTo achieve this, `django-konst` provides a `ConstantGroup` class.\n\n```python\nfrom konst import Constant, ConstantGroup\n\n# states backed by integers\nstates = Constants(\n    Constant(active=0),\n    Constant(cancelled_ontime=1),\n    Constant(cancelled_late=2),\n    ConstantGroup(\n        \"cancelled\",\n        (\"cancelled_ontime\", \"cancelled_late\")\n    )\n)\n\n```\n\n#### Within a model ####\n\nWhile not strictly necessary, it is advisable to effectively namespace your constants\nby defining them in the scope of a model definition. This means you have your constants\nwherever you have the model class, as well as any model instance.\n\n\n```python\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom konst import Constant, ConstantGroup, Constants\nfrom konst.models.fields import (\n    ConstantChoiceCharField,\n    ConstantChoiceField\n)\n\nclass Apple(models.Model):\n\n    purposes = Constants(\n        Constant(cooking=0, label=_(\"Cook me!\")),\n        Constant(eating=1, label=_(\"Eat me!\")),\n        Constant(juicing=2, label=_(\"Juice me!\")),\n        Constant(ornamental=3, label=_(\"Just look how pretty I am!\")),\n        ConstantGroup(\n            \"culinary\", (\"cooking\", \"eating\", \"juicing\")\n        )\n    )\n    colours = Constants(\n        Constant(red=\"FF0000\", label=_(\"red\")),\n        Constant(green=\"00FF00\", label=_(\"green\")),\n        Constant(yellow=\"FFFF80\", label=_(\"yellow\")),\n        Constant(white=\"FFFFFF\", label=_(\"white\")),\n    )\n\n    name = models.CharField(max_length=30)\n    purpose = ConstantChoiceField(constants=purposes)\n    colour = ConstantChoiceCharField(constants=colours, max_length=30)\n\n```\n\n\n### Use ###\n\nThe entire point of this library is to make the use of constants defined in this way\neasy and concise.\n\n#### In code ####\n\n```python\napple = Apple.objects.get(name='Granny Smith')\napple.purpose.cooking\nTrue\napple.colour.red\nTrue\napple.colour.green\nFalse\n\n# we don't care about the specific purpose, just whether it is as food\n# or not, so use the ConstantGroup!\napple.purpose.culinary\nTrue\n\n```\n\n#### In templates ####\n\n```\n{% if apple.purpose.eating %}\n    You should bite this {{ apple.name }}!\n{% endif %}\n```\n\n#### With Django's ORM ####\n\n```python\nred_apples = Apple.objects.filter(colour=Apple.colours.red)\nculinary_apples = Apple.objects.filter(\n    purpose__in=Apple.purposes.culinary\n)\n\n```\n\n#### With Django Rest Framework ####\n\nUsing the `konst.extras.drf.fields.ConstantChoiceField` serializer field with the\nDjango Rest Framework it is possible to both output and receive constant values.\n\n```python\nfrom konst.extras.drf.fields import ConstantChoiceField\n\nfrom rest_framework import serializers\n\n\nclass AppleSerializer(serializers.ModelSerializer):\n\n    purpose = ConstantChoiceField(Apple.purposes)\n    colour = ConstantChoiceField(Apple.colours)\n\n    class Meta:\n        model = Apple\n        fields = (\n            \"name\", \"purpose\", \"colour\"\n        )\n\n\n# let's see how it handles bad values\nserializer = AppleSerializer(\n    data={\n        \"name\": \"Fuji\",\n        \"colour\": \"blue\",\n        \"purpose\": \"dicing\"\n    }\n)\nserializer.is_valid()\nFalse\nserializer.errors\n{\n    'colour': [u'\"blue\" is not a valid choice.'],\n    'purpose': [u'\"dicing\" is not a valid choice.']\n}\n\n\n# and now how it handles some good values\nserializer = AppleSerializer(\n    data={\n        \"name\": \"Fuji\",\n        \"colour\": \"red\",\n        \"purpose\": \"eating\"\n    }\n)\nserializer.is_valid()\nTrue\n\n\n# let's create a database entry!\ninstance = serializer.save()\n\n\n# and now our instance can be interacted with neatly\ninstance.colour.red\nTrue\n\n\n# finally, let's see how this looks when rendering JSON\nAppleSerializer(instance=instance).data\n{\n    \"name\": \"Fuji\",\n    \"colour\": \"red\",\n    \"purpose\": \"eating\"\n}\n\n```\n\n## Gotchas\n\n### Setting a field on a model to the value of a constant rather than the Constant object\n\nWhen the Django ORM instantiates a model instance from the database, it will ensure that any `ConstantChoiceField` or `ConstantChoiceCharField` fields have values set to `Constant` instances.\n\nIf you create or modify a model instance using a raw, hard-coded constant value, you're likely to hit errors along the lines of \"AttributeError: 'int' object has no attribute 'attribute-name'\".\n\nTake the example below where the caller sets the colour of a model instance to the underlying value for the `Constant`:\n\n```python\napple = Apple.objects.get(name='Granny Smith')\napple.purpose = 1  # constant for `eating` .. I know, who on earth would eat a granny smith straight up?!\napple.save()\n```\n\nDjango will happily persist the data correctly, but let's say you have a `post_save` signal (or any other code, really) that does something further with the instance:\n\n```python\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\nfrom .models import Apple\n\n@receiver(post_save, sender=Apple)\ndef apple_updated_receiver(sender, instance, created, *args, **kwargs):\n    if not created and instance.purpose.eating:\n        print(f\"Oh my, {instance.name} is now for eating!\")\n\n```\n\nThis code will sadly raise `AttributeError: 'int' object has no attribute 'purpose'`, as `instance.purpose` is just the integer we set it to before saving.\n\nThe good news is that you can avoid this by *always* setting `django-konst` fields on instances to `Constant` instances such that downstream code can happily handle the instance as if it'd come straight out of the database:\n\n```python\napple = Apple.objects.get(name='Granny Smith')\napple.purpose = Apple.purposes.eating\napple.save()\n```\n\nRegardless of whether you're using `django-konst` for your constants, it's good practice to not hard-code constant values in order to avoid subtle mistakes and to ease changes in the future.\n\n\n## Contribute\n\n`django-konst` supports a variety of Python and Django versions. It's best if you test each one of these before committing. Our [Circle CI Integration](https://circleci.com) will test these when you push but knowing before you commit prevents from having to do a lot of extra commits to get the build to pass.\n\n### Environment Setup\n\nIn order to easily test on all these Pythons and run the exact same thing that CI will execute you'll want to setup [pyenv](https://github.com/yyuu/pyenv) and install the Python versions outlined in [tox.ini](tox.ini).\n\nIf you are on Mac OS X, it's recommended you use [brew](http://brew.sh/). After installing `brew` run:\n\n```bash\nbrew install pyenv pyenv-virtualenv pyenv-virtualenvwrapper\n```\n\nNext, install the various python versions we want to test against and create a virtualenv specifically for `django-konst`:\n\n```bash\npyenv install 3.6.10\npyenv install 3.7.6\npyenv install 3.8.1\npyenv virtualenv 3.8.1 konst\npyenv activate konst\npip install detox\npyenv shell konst 3.6.10 3.7.6\n```\n\nNow ensure the `konst` virtualenv is activated, make the other python versions also on our path, and run the tests!\n\n\n```bash\npyenv shell konst 3.6.10 3.7.6\ndetox\n```\n\nThis will execute the test environments in parallel as defined in the `tox.ini`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lukeburden/django-konst",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-konst",
    "package_url": "https://pypi.org/project/django-konst/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-konst/",
    "project_urls": {
      "Homepage": "https://github.com/lukeburden/django-konst"
    },
    "release_url": "https://pypi.org/project/django-konst/2.0.0/",
    "requires_dist": [
      "django (>=2.2)"
    ],
    "requires_python": "",
    "summary": "Convenient constants fields for Django",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6722252,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32737110478a4a40c2650e04e46086da6ffc790e16ab90eb8d0804fa1447300c",
          "md5": "ab032e3e6bf87d7fbfda55a8d10960fb",
          "sha256": "0911ac4e229eb0681183e691b8f4bd1bf3e6ec553c7493b223fd36366a51ed5f"
        },
        "downloads": -1,
        "filename": "django_konst-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab032e3e6bf87d7fbfda55a8d10960fb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10801,
        "upload_time": "2017-11-19T23:16:29",
        "upload_time_iso_8601": "2017-11-19T23:16:29.580490Z",
        "url": "https://files.pythonhosted.org/packages/32/73/7110478a4a40c2650e04e46086da6ffc790e16ab90eb8d0804fa1447300c/django_konst-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a53eb702a79258dce91003c408eb58446a1438025a8f59cb5190224c56d5c20e",
          "md5": "c8f100ee6b7cb4015ff320be9c34c429",
          "sha256": "d7183a7575a6c6e7cb47d683305adf1ebdf77a222bc6401056ca744525235667"
        },
        "downloads": -1,
        "filename": "django_konst-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8f100ee6b7cb4015ff320be9c34c429",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12759,
        "upload_time": "2019-08-01T22:55:06",
        "upload_time_iso_8601": "2019-08-01T22:55:06.993502Z",
        "url": "https://files.pythonhosted.org/packages/a5/3e/b702a79258dce91003c408eb58446a1438025a8f59cb5190224c56d5c20e/django_konst-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4d28d1d4c6e09dcb314ce3e2f7f3cca3a50e398ec5a998ae246fc10ab9ed8ed",
          "md5": "d5485b538d4d8269aeee4538665cbbcb",
          "sha256": "6cfa4b50bbab9c162bd95fabd8cb5c505ad8499968849f18d425d8119f7f4e57"
        },
        "downloads": -1,
        "filename": "django-konst-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5485b538d4d8269aeee4538665cbbcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9808,
        "upload_time": "2019-08-01T22:55:08",
        "upload_time_iso_8601": "2019-08-01T22:55:08.640534Z",
        "url": "https://files.pythonhosted.org/packages/a4/d2/8d1d4c6e09dcb314ce3e2f7f3cca3a50e398ec5a998ae246fc10ab9ed8ed/django-konst-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3decd9827d648e224678581f87bfd9fcbfceeb7484ea853ef5609a893374ebd4",
          "md5": "d5a1472ae18a5ab420859ec5d8cd1fdf",
          "sha256": "7e6406b1032121de97157c6d2264826c53c3cf8a8219e4e36907697f44876f30"
        },
        "downloads": -1,
        "filename": "django_konst-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5a1472ae18a5ab420859ec5d8cd1fdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12686,
        "upload_time": "2019-11-06T23:19:22",
        "upload_time_iso_8601": "2019-11-06T23:19:22.075843Z",
        "url": "https://files.pythonhosted.org/packages/3d/ec/d9827d648e224678581f87bfd9fcbfceeb7484ea853ef5609a893374ebd4/django_konst-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc92a9b5d7fc8426484c74e8ca8da890fe3f382ce4bfd049359a1b678cffaff",
          "md5": "ee5c61eb829972e719b7b4508d238e22",
          "sha256": "b7d4cc09a91b06378233fa89dc2cec45738a68e6edc45693dae14bd7237c908f"
        },
        "downloads": -1,
        "filename": "django-konst-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ee5c61eb829972e719b7b4508d238e22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9750,
        "upload_time": "2019-11-06T23:19:23",
        "upload_time_iso_8601": "2019-11-06T23:19:23.315404Z",
        "url": "https://files.pythonhosted.org/packages/6d/c9/2a9b5d7fc8426484c74e8ca8da890fe3f382ce4bfd049359a1b678cffaff/django-konst-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5a0b71559906a9428294b38564c583314fe4829ceeb2ab0bafe3fca182801c7",
          "md5": "0badc9ce6e5ac880c0a7fd84ebdb9fa6",
          "sha256": "ecf6111e194658af714abf682182ddc4c24f4c0506ad9b202033ed16d09d32f6"
        },
        "downloads": -1,
        "filename": "django_konst-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0badc9ce6e5ac880c0a7fd84ebdb9fa6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13415,
        "upload_time": "2020-02-29T01:56:57",
        "upload_time_iso_8601": "2020-02-29T01:56:57.573309Z",
        "url": "https://files.pythonhosted.org/packages/b5/a0/b71559906a9428294b38564c583314fe4829ceeb2ab0bafe3fca182801c7/django_konst-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "866983a4fad274fd20f38a046f1e3d803d8b04eed00fdd71f2cec8dc655f00ec",
          "md5": "2ccf0c6791cda003dba23c7f520f52ea",
          "sha256": "789301f4e1fd4492f5e305ad4c26cda807104def025d83ebb6be592d1807058f"
        },
        "downloads": -1,
        "filename": "django-konst-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ccf0c6791cda003dba23c7f520f52ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10573,
        "upload_time": "2020-02-29T01:56:59",
        "upload_time_iso_8601": "2020-02-29T01:56:59.267499Z",
        "url": "https://files.pythonhosted.org/packages/86/69/83a4fad274fd20f38a046f1e3d803d8b04eed00fdd71f2cec8dc655f00ec/django-konst-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5a0b71559906a9428294b38564c583314fe4829ceeb2ab0bafe3fca182801c7",
        "md5": "0badc9ce6e5ac880c0a7fd84ebdb9fa6",
        "sha256": "ecf6111e194658af714abf682182ddc4c24f4c0506ad9b202033ed16d09d32f6"
      },
      "downloads": -1,
      "filename": "django_konst-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0badc9ce6e5ac880c0a7fd84ebdb9fa6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13415,
      "upload_time": "2020-02-29T01:56:57",
      "upload_time_iso_8601": "2020-02-29T01:56:57.573309Z",
      "url": "https://files.pythonhosted.org/packages/b5/a0/b71559906a9428294b38564c583314fe4829ceeb2ab0bafe3fca182801c7/django_konst-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "866983a4fad274fd20f38a046f1e3d803d8b04eed00fdd71f2cec8dc655f00ec",
        "md5": "2ccf0c6791cda003dba23c7f520f52ea",
        "sha256": "789301f4e1fd4492f5e305ad4c26cda807104def025d83ebb6be592d1807058f"
      },
      "downloads": -1,
      "filename": "django-konst-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2ccf0c6791cda003dba23c7f520f52ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10573,
      "upload_time": "2020-02-29T01:56:59",
      "upload_time_iso_8601": "2020-02-29T01:56:59.267499Z",
      "url": "https://files.pythonhosted.org/packages/86/69/83a4fad274fd20f38a046f1e3d803d8b04eed00fdd71f2cec8dc655f00ec/django-konst-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}