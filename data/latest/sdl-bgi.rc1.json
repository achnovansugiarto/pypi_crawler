{
  "info": {
    "author": "",
    "author_email": "\"Guido Gonzato, PhD\" <guido.gonzato@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: zlib/libpng License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# About\n\n`SDL_bgi` is a graphics library (`GRAPHICS.H`) for C, C++,\nWebAssembly, and Python. It's based on SDL2 and it's portable on many\nplatforms.\n\nIts name refers to BGI, the Borland Graphics Interface that was the\n'de facto' standard in PC graphics back in DOS days; it was made\npopular by Borland Turbo C/C++ compilers. I wrote `SDL_bgi` because I\nwanted a simple to use but fast graphics library for my experiments\nwith fractals and cellular automata, using the BGI syntax I'm used to.\n\n`SDL_bgi` is functionally compatible with the BGI implementation in\nTurbo C 2.01 and Borland C++ 1.0; for instance, it compiles and runs\nthe original `bgidemo.c`. `SDL_bgi` also provides nearly full\ncompatibility with another BGI implementation, WinBGIm (see links\nbelow). One of the aims of `SDL_bgi` is the preservation of old\nsoftware written for BGI; but not only that.\n\n`SDL_bgi` provides graphics primitives, and is much easier to use than\nplain SDL2; it should be especially useful for beginners, i.e. in\nintroductory programming courses. `SDL_bgi` is pretty fast, and in\naddition to BGI compatibility it provides extensions for ARGB colours,\nmouse support, vector fonts, and multiple windows. Native SDL2\nfunctions can be used alongside `SDL_bgi` functions. `SDL_bgi` can\nalso be used in programs written in C++ or Python.\n\n`SDL_bgi` is written in C, and it should compile on any platform\nsupported by SDL2. It has been tested on GNU/Linux, MS Windows (MSYS2\nand Mingw-w64, CodeBlocks, Dev-C++), macOS (High Sierra and Catalina),\nRaspios (ARM, i386), and WebAssembly (Emscripten). A few example\nprograms in C and Python are provided in the `demo/` directory.\n\n\n## Requirements\n\nThe C version requires the SDL2 library development packages. The\nPython module requires the `SDL_bgi` binaries and the SDL2 library\nbinaries.\n\n\n## How to Install\n\nOnce the dependencies above are met, just do:\n\n```\n$ pip install sdl_bgi\n```\n\n# How to use `SDL_bgi` in Python programs\n\nPlease make sure that you installed the `SDL_bgi` binaries for your\nplatform before proceeding.\n\n\n## Implementation Details\n\n`SDL_bgi` Python bindings are implemented via\nthe [ctypes](https://docs.python.org/3/library/ctypes.html) library.\nIn general:\n\n- functions in Python have the same name as their C counterparts;\n\n- constants and enums are implemented as variables;\n\n- standard C types (`int`, `float`, `char *`, etc.) are mapped to\n  Python types;\n\n- structs are available as `ctypes` classes that have the same name\nand field names. For example:\n\n\\small\n\n```\nC struct                     Python class\n--------                     ------------\nstruct arccoordstype {       class arccoordstype (Structure):\n  int x;                         _fields_ = [ (\"x\", c_int),    \n  int y;                                      (\"y\", c_int),    \n  int xstart;                                 (\"xstart\", c_int)\n  int ystart;                                 (\"ystart\", c_int)\n  int xend;                                   (\"xend\", c_int), \n  int yend;                                   (\"yend\", c_int) ]\n};\n```\n\\normalsize\n\n\nThere are minor differences explained below.\n\n\n## Syntax differences\n\n`ctypes` implements new types that are mapped to equivalent Python\ntypes; for example, `c_int` is equivalent to `int`. Please refer to\n`ctypes`'\n[Reference](https://docs.python.org/3/library/ctypes.html#fundamental-data-types).\n\n2D arrays can be implemented via [Numpy](https://numpy.org/); please\nsee for example `demo/life.py` or `demo/buffers_numpy.py`. Strictly\nspeaking, Numpy is not required; but working with arrays without it is\na pain.\n\nMemory buffers, used for example by `getimage()` or `getbuffer()`, are\nimplemented using function `create_string_buffer()`.\n\nThe `byref()` function can be used to pass variables by reference, as\nin the following functions:\n\n\\small\n\n```\n# void detectgraph (int *graphdriver, int *graphmode);\ngraphdriver, graphmode = c_int (), c_int ()\ndetectgraph (byref (graphdriver), byref (graphmode))\nprint (\"graphdriver, graphmode: \", graphdriver.value, graphmode.value)\n\n# void getarccoords (struct arccoordstype *arccoords);\nac = arccoordstype ()\ngetarccoords (byref (ac))\nprint (\"x, y, xstart, ystart, xend, yend: \", ac.x, ac.y, \n        ac.xstart, ac.ystart, ac.xend, ac.yend)\n\n# void getaspectratio (int *xasp, int *yasp);\nxasp, yasp = c_int (), c_int ()\ngetaspectratio (byref (xasp), byref (yasp))\nprint (\"xasp, yasp: \", xasp.value, yasp.value)\n\n# void getfillsettings (struct fillsettingstype *fillinfo);\nfillinfo = fillsettingstype ()\ngetfillsettings (byref (fillinfo))\nprint (\"pattern, color: \", fillinfo.pattern, fillinfo.color)\n\n# void getimage ()\nisize = imagesize (0, 0, len, 16)\nimage = create_string_buffer (isize)\ngetimage (0, 0, len, 16, image)\n\n# void getlinesettings (struct linesettingstype *lineinfo);\nlineinfo = linesettingstype ()\ngetlinesettings (byref (lineinfo))\nprint (\"linestyle, thickness: \", ls.linestyle, ls.thickness)\n\n# void getmoderange (int graphdriver, int *lomode, int *himode);\nlomode, himode = c_int (), c_int ()\ngetmoderange (0, byref (lomode), byref (himode))\nprint (\"lomode, himode: \", lomode.value, lomode.value)\n\n# void getmouseclick (int btn, int *x, int *y);\nkind, x, y = c_int (), c_int (), c_int ()\ngetmouseclick (kind, byref (x), byref (y))\nprint (\"mouse x, mouse y: \", x.value, y.value)\n\n# void getscreensize (int x, int y);\nx, y = c_int (), c_int ()\ngetscreensize (byref (x), byref (y))\nprint (\"size x, size y: \", x, y)\n```\n\n\\normalsize\n\n## Pythonic Syntax\n\nThe following functions provide a more Pytonic syntax that only uses\nstandard Python types:\n\n\\small\n\n```\n# void detectgraph (int *graphdriver, int *graphmode);\ngraphdriver, graphmode = detectgraph ()\nprint (\"graphdriver, graphmode: \", graphdriver, graphmode);\n\n# void getarccoords (struct arccoordstype *arccoords);\nac = arccoordstype ()\nac = getarccoords ()\nprint (\"x, y, xstart, ystart, xend, yend: \", ac.x, ac.y, \n        ac.xstart, ac.ystart, ac.xend, ac.yend)\n\n# void getaspectratio (int *xasp, int *yasp);\nxasp, yasp = getaspectratio ()\nprint (\"xasp, yasp: \", xasp, yasp)\n\n# void getfillsettings (struct fillsettingstype *fillinfo);\nfs = fillsettingstype ()\nfs = getfillsettings ()\nprint (\"pattern, color: \", fs.pattern, fs.color)\n\n# void getlinesettings (struct linesettingstype *lineinfo);\nls = linesettingstype ()\nls = getlinesettings ()\nprint (\"linestyle, thickness: \", ls.linestyle, ls.thickness)\n\n# void getmoderange (int graphdriver, int *lomode, int *himode);\nlomode, himode = getmoderange ()\nprint (\"lomode, himode: \", lomode, lomode)\n\n# void getmouseclick (int btn, int *x, int *y);\nx, y = getmouseclick (WM_LBUTTONDOWN)\nprint (\"mouse x, mouse y: \", x, y)\n\n# void getscreensize (int x, int y);\nx, y = getscreensize ()\nprint (\"size x, size y: \", x, y)\n\n# void initgraph (int *graphdriver, int *graphmode, char *pathtodriver)\ninitgraph ()\n```\n\n\\normalsize\n\n## Helper Functions\n\nThe following functions can be useful:\n\n`list2vec (list)`: converts a Python list of integers to a vector;\nused for example by `drawpoly()`\n\n`vec2buf (vector)`: returns a string buffer that contains the values\nstored in `vector`. This is a 1-dimensional array that can be obtained\nfrom a Numpy 2D array 'matrix' with `reshape (matrix, -1)`.\n\n`sizeofint ()`: equivalent to C `sizeof (int)`. Please note that this\nis not the same as `sys.getsizeof()`!\n\n\n## Missing Features\n\nSDL2-based variables `bgi_window`, `bgi_renderer`, `bgi_texture`,\n`PALETTE_SIZE`, and function `copysurface()` are not available.\n\n\n## Speeding Things Up\n\nPython is an interpreted language, and its performance is quite poor\nif compared to compiled code. The [PyPy](https://www.pypy.org)\ninterpreter should make Python code run faster, but `SDL_bgi` programs\nrun much slower with PyPy than with CPython. Another Python\nimplementation, [Pyston](https://www.pyston.org), actually runs\n`SDL_bgi` programs definitely faster than CPython.\n\nTo give your programs a real boost, I strongly suggest that module\n[Numba](https://numba.pydata.org/) be used. Numba is a high\nperformance Python JIT compiler that can translate a large subset of\nPython and NumPy code into fast machine code. It uses simple function\ndecorators; please have a look at `demo/mandelbrot.py` to see how it\nworks.\n\n\n## Making Standalone Binaries\n\nTo deploy a Python program as a standalone executable file, you may use \n[PyInstaller](https://pyinstaller.org) or [Nuitka](https://nuitka.net/).\n\n### Pyinstaller\n\nRun it as in the following example:\n\n```\ntest$ pyinstaller -F fern.py \n121 INFO: PyInstaller: 5.4.1\n121 INFO: Python: 3.10.4\n...\n7373 INFO: Building EXE from EXE-00.toc completed successfully.\ntest$ _\n```\n\nThe resulting executable will be created in directory `dist/`.\n\n### Nuitka\n\nRun it as in the following example:\n\n```\ntest$ nuitka3 --onefile --remove-output fern.py\nNuitka-Options:INFO: Used command line options: --onefile \\\n  --remove-output fern.py\nNuitka:INFO: Starting Python compilation with Nuitka '1.1.3' \\\n  on Python '3.10' commercial grade 'not installed'.\n...\nNuitka:INFO: Successfully created 'fern.bin'.\ntest$ _\n```\n\nWhen run on Windows, you get `fern.exe` and `fern.cmd`, which is a\nbatch file that sets up the proper runtime environment for the\nexecutable. Run `fern.cmd` to start the program; on MSYS2, use:\n\n```\ntest$ start fern.cmd\n```\n\nOn my GNU/Linux Mint 20.2 box, Nuitka creates a much smaller\nexecutable than Pyinstaller does.\n\n\n# Links\n\n0. `SDL_bgi` home page:\n   <https://sdl-bgi.sourceforge.io/>;\n   <https://pypi.org/project/sdl-bgi>\n\n1. The SDL library:\n   <https://www.libsdl.org/>\n\n2. BGI on Wikipedia:\n   <https://en.wikipedia.org/wiki/Borland_Graphics_Interface>\n\n3. WinBGIm, a BGI port for Windows:\n   <https://winbgim.codecutter.org/>\n\n4. Xbgi, a BGI XLib port:\n   <http://libxbgi.sourceforge.net/>\n\n5. PyEasyGraphics, a BGI-like Python port:\n   <https://github.com/royqh1979/PyEasyGraphics>\n\n6. Borland Turbo C 2.01 online emulator:\n   <https://archive.org/details/msdos_borland_turbo_c_2.01>\n\nThis library is released under the Zlib license; please see the\nenclosed file LICENSE.\n\nBrought to you by Guido Gonzato, PhD\n<guido dot gonzato at gmail dot com>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "BGI,GRAPHICS.H,SDL2",
    "license": "// ZLib License  Copyright (c) 2014-2021 Guido Gonzato, PhD  This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.  Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sdl-bgi",
    "package_url": "https://pypi.org/project/sdl-bgi/",
    "platform": null,
    "project_url": "https://pypi.org/project/sdl-bgi/",
    "project_urls": {
      "Homepage": "https://sdl-bgi.sourceforge.io/"
    },
    "release_url": "https://pypi.org/project/sdl-bgi/3.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "SDL2-based 'GRAPHICS.H' implementation",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16099769,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1fe7308eac32f45c819c0e5c777fdd90e6c461f1335a0639d5a2445e9971006",
          "md5": "98f75e2f3aeb4e5f8e08cf8faff0a08e",
          "sha256": "498d07d2bfa19bc897401703535abdeb0552f51df476df97bc6d0dfe961d0a37"
        },
        "downloads": -1,
        "filename": "sdl_bgi-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98f75e2f3aeb4e5f8e08cf8faff0a08e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17635,
        "upload_time": "2022-12-14T12:40:49",
        "upload_time_iso_8601": "2022-12-14T12:40:49.562504Z",
        "url": "https://files.pythonhosted.org/packages/b1/fe/7308eac32f45c819c0e5c777fdd90e6c461f1335a0639d5a2445e9971006/sdl_bgi-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08b2385ae5ac5d9a5dd31ecca3810e98ea53716d00aeaa625a02e70707dee4bf",
          "md5": "e277d0674d7222c1670f600f7643d472",
          "sha256": "e9a11daa5bb9f7c89a7336e2c10b4a0c62562b87101ceeb8648ef0cea444b34e"
        },
        "downloads": -1,
        "filename": "sdl_bgi-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e277d0674d7222c1670f600f7643d472",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29468,
        "upload_time": "2022-12-14T12:40:51",
        "upload_time_iso_8601": "2022-12-14T12:40:51.459507Z",
        "url": "https://files.pythonhosted.org/packages/08/b2/385ae5ac5d9a5dd31ecca3810e98ea53716d00aeaa625a02e70707dee4bf/sdl_bgi-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1fe7308eac32f45c819c0e5c777fdd90e6c461f1335a0639d5a2445e9971006",
        "md5": "98f75e2f3aeb4e5f8e08cf8faff0a08e",
        "sha256": "498d07d2bfa19bc897401703535abdeb0552f51df476df97bc6d0dfe961d0a37"
      },
      "downloads": -1,
      "filename": "sdl_bgi-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98f75e2f3aeb4e5f8e08cf8faff0a08e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17635,
      "upload_time": "2022-12-14T12:40:49",
      "upload_time_iso_8601": "2022-12-14T12:40:49.562504Z",
      "url": "https://files.pythonhosted.org/packages/b1/fe/7308eac32f45c819c0e5c777fdd90e6c461f1335a0639d5a2445e9971006/sdl_bgi-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08b2385ae5ac5d9a5dd31ecca3810e98ea53716d00aeaa625a02e70707dee4bf",
        "md5": "e277d0674d7222c1670f600f7643d472",
        "sha256": "e9a11daa5bb9f7c89a7336e2c10b4a0c62562b87101ceeb8648ef0cea444b34e"
      },
      "downloads": -1,
      "filename": "sdl_bgi-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e277d0674d7222c1670f600f7643d472",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 29468,
      "upload_time": "2022-12-14T12:40:51",
      "upload_time_iso_8601": "2022-12-14T12:40:51.459507Z",
      "url": "https://files.pythonhosted.org/packages/08/b2/385ae5ac5d9a5dd31ecca3810e98ea53716d00aeaa625a02e70707dee4bf/sdl_bgi-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}