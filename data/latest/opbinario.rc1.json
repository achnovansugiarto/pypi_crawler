{
  "info": {
    "author": "David Marcos",
    "author_email": "david.marcos54321@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "opbinario\n===========\n\n### Este pacote tem como objetivo oferecer funções para realização de operações com numeros binarios como: converção de bases, operações aritimeticas e operações logicas entre numeros binarios.\n\n## Instalação\n    pip install opbinario\n\n# Exemplos de Uso:\n## Importando pacote:\n    from opbinario.opbinario import opbinario\n\n## Convertendo um numero decimal para binario:\n##### Para converter um numero para binario podemos utilizar a função opbinario.bin(), esta função recebe um numero decimal positivo e retorna o numero convertido para binario.\n    opbinario.bin(10)\n\n\n## Convertendo um numero binario para decimal:\n##### Para converter um numero binario para decimal podemos utilizar a função opbinario.dec(), esta função recebe uma string contendo um numero binario e retorna o numero convertido para decimal.\n    opbinario.dec('101')\n\n## Convertendo uma string para binario:\n##### Para converter uma string para binario podemos utilizar a função opbinario.strbin(), esta função recebe uma string e retorna a string convertida em binario.\n    opbinario.strbin('hello world')\n\n## Convertendo um numero binario para string:\n##### Para converter um numero binario para string podemos utilizar a função opbinario.binstr(), esta função recebe uma string contendo um numero binario ou um conjunto de numeros binarios separados por espaço e converte o numero binario para caracteres ou conjunto de caracteres.\n    opbinario.binstr('1001101 1010011')\n\n## Convertendo um numero decimal ou binario para octal:\n##### Para converter um numero decimal ou binario para octal podemos utilizar a função opbinario.oct(), esta função recebe um numero decimal positivo ou uma string contendo um numero binario e converte o numero decimal ou binario para octal.\n    opbinario.oct(71)\n    opbinario.oct('111001')\n\n## Convertendo um numero decimal ou binario para hexadecimal:\n##### Para converter um numero decimal ou binario para hexadecimal podemos utilizar a função opbinario.hex(), esta função recebe um numero decimal positivo ou uma string contendo um numero binario e converte o numero decimal ou binario para hexadecimal.\n    opbinario.hex(71)\n    opbinario.hex('01110001')\n\n\n## Somando dois numeros binarios:\n##### Para somar numeros binarios podemos utilizar a função opbinario.somabin(), esta função recebe dois numeros binarios e realiza a soma dos valores e retorna o resultado da operação.\n    opbinario.somabin('1010','101')\n\n## Subtraindo dois numeros binarios:\n##### Para subtrair numeros binarios podemos utilizar a função opbinario.subbin(), esta função recebe dois numeros binarios e realiza a subtração dos valores e retorna o resultado da operação.\n    opbinario.subbin('1010','101')\n\n## Multiplicando dois numeros binarios:\n##### Para multiplicar numeros binarios podemos utilizar a função opbinario.multbin(), esta função recebe dois numeros binarios e realiza a multiplicação dos valores e retorna o resultado da operação.\n    opbinario.multbin('1010','101')\n\n## Dividindo dois numeros binarios:\n##### Para dividir numeros binarios podemos utilizar a função opbinario.divbin(), esta função recebe dois numeros binarios e realiza a divisão dos valores e retorna o resultado da operação.\n    opbinario.divbin('1010','101')\n\n\n## Realizando operação AND entre dois numeros binarios:\n##### Para realizando operação AND entre dois numeros binarios podemos utilizar a função opbinario.And(), esta função recebe dois numeros binarios e realiza a operação logica AND entre os valores e retorna o resultado da operação.\n    opbinario.And('1010','101')\n\n## Realizando operação OR entre dois numeros binarios:\n##### Para realizando operação Or entre dois numeros binarios podemos utilizar a função opbinario.Or(), esta função recebe dois numeros binarios e realiza a operação logica OR entre os valores e retorna o resultado da operação\n    opbinario.Or('1010','101')\n\n## Realizando operação Xor entre dois numeros binarios:\n##### Para realizando operação Xor entre dois numeros binarios podemos utilizar a função opbinario.Xor(), esta função recebe dois numeros binarios e realiza a operação logica XOR entre os valores e retorna o resultado da operação.\n    opbinario.Xor('1010','101')\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/David-Marcoss/Opbinario",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opbinario",
    "package_url": "https://pypi.org/project/opbinario/",
    "platform": null,
    "project_url": "https://pypi.org/project/opbinario/",
    "project_urls": {
      "Homepage": "https://github.com/David-Marcoss/Opbinario"
    },
    "release_url": "https://pypi.org/project/opbinario/0.0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Pacote para realização de opereções com numeros binarios",
    "version": "0.0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13752273,
  "releases": {
    "0.0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26d4f49871d03c73e3b09dda36c95b8510c87458b81b3ca4a15ab5fe7dbcdde9",
          "md5": "f549bd71eee6af1a97c1dd0836a377bc",
          "sha256": "4c2c9d39e485430ce27c3b413f07a4f717efa6acb880ceb4a59cb0b5a455fcd9"
        },
        "downloads": -1,
        "filename": "opbinario-0.0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f549bd71eee6af1a97c1dd0836a377bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5013,
        "upload_time": "2022-05-08T23:16:31",
        "upload_time_iso_8601": "2022-05-08T23:16:31.268705Z",
        "url": "https://files.pythonhosted.org/packages/26/d4/f49871d03c73e3b09dda36c95b8510c87458b81b3ca4a15ab5fe7dbcdde9/opbinario-0.0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de3f91c82c761ea8e51fbbc39809de3130baa89af961d87c3f03e28e70cd0170",
          "md5": "6a31347012e16cdfb7e4fe3459e458e6",
          "sha256": "85256ba54445a66f113fa990071f3c681db30e6021f4fc0b53ea29dcb207cbec"
        },
        "downloads": -1,
        "filename": "opbinario-0.0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a31347012e16cdfb7e4fe3459e458e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4688,
        "upload_time": "2022-05-08T23:16:33",
        "upload_time_iso_8601": "2022-05-08T23:16:33.030110Z",
        "url": "https://files.pythonhosted.org/packages/de/3f/91c82c761ea8e51fbbc39809de3130baa89af961d87c3f03e28e70cd0170/opbinario-0.0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26d4f49871d03c73e3b09dda36c95b8510c87458b81b3ca4a15ab5fe7dbcdde9",
        "md5": "f549bd71eee6af1a97c1dd0836a377bc",
        "sha256": "4c2c9d39e485430ce27c3b413f07a4f717efa6acb880ceb4a59cb0b5a455fcd9"
      },
      "downloads": -1,
      "filename": "opbinario-0.0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f549bd71eee6af1a97c1dd0836a377bc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 5013,
      "upload_time": "2022-05-08T23:16:31",
      "upload_time_iso_8601": "2022-05-08T23:16:31.268705Z",
      "url": "https://files.pythonhosted.org/packages/26/d4/f49871d03c73e3b09dda36c95b8510c87458b81b3ca4a15ab5fe7dbcdde9/opbinario-0.0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de3f91c82c761ea8e51fbbc39809de3130baa89af961d87c3f03e28e70cd0170",
        "md5": "6a31347012e16cdfb7e4fe3459e458e6",
        "sha256": "85256ba54445a66f113fa990071f3c681db30e6021f4fc0b53ea29dcb207cbec"
      },
      "downloads": -1,
      "filename": "opbinario-0.0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6a31347012e16cdfb7e4fe3459e458e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 4688,
      "upload_time": "2022-05-08T23:16:33",
      "upload_time_iso_8601": "2022-05-08T23:16:33.030110Z",
      "url": "https://files.pythonhosted.org/packages/de/3f/91c82c761ea8e51fbbc39809de3130baa89af961d87c3f03e28e70cd0170/opbinario-0.0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}