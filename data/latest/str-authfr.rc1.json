{
  "info": {
    "author": "Mohammad Khorasani",
    "author_email": "khorasani.mohammad@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# Streamlit-Authenticator [![Downloads](https://pepy.tech/badge/streamlit-authenticator)](https://pepy.tech/project/streamlit-authenticator) \r\n<!--- [![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/khorasani) --->\r\n**A secure authentication module to validate user credentials in a Streamlit application.**\r\n\r\n<a href=\"https://amzn.to/3eQwEEn\"><img src=\"https://raw.githubusercontent.com/mkhorasani/streamlit_authenticator_test/main/Web%20App%20Web%20Dev%20with%20Streamlit%20-%20Cover.png\" width=\"300\" height=\"450\"> \r\n \r\n###### _To learn more please refer to my book [Web Application Development with Streamlit](https://amzn.to/3eQwEEn)._\r\n\r\n  \r\n## Installation\r\n\r\nStreamlit-Authenticator is distributed via [PyPI](https://pypi.org/project/streamlit-authenticator/):\r\n\r\n```python\r\npip install streamlit-authenticator\r\n```\r\n\r\n## Example\r\n\r\nUsing Streamlit-Authenticator is as simple as importing the module and calling it to verify your predefined users' credentials.\r\n\r\n```python\r\nimport streamlit as st\r\nimport streamlit_authenticator as stauth\r\n```\r\n\r\n### 1. Hashing passwords\r\n\r\n* Initially create a YAML configuration file and define your users' credentials (names, usernames, and plain text passwords). In addition, enter a name, random key, and number of days to expiry for a JWT cookie that will be stored on the client's browser to enable passwordless reauthentication. If you do not require reauthentication, you may set the number of days to expiry to 0. Finally, define a list of preauthorized emails of users who can register and add their credentials to the configuration file with the use of the **register_user** widget.\r\n\r\n```python\r\ncredentials:\r\n  usernames:\r\n    jsmith:\r\n      email: jsmith@gmail.com\r\n      name: John Smith\r\n      password: 123 # To be replaced with hashed password\r\n    rbriggs:\r\n      email: rbriggs@gmail.com\r\n      name: Rebecca Briggs\r\n      password: 456 # To be replaced with hashed password\r\ncookie:\r\n  expiry_days: 30\r\n  key: some_signature_key\r\n  name: some_cookie_name\r\npreauthorized:\r\n  emails:\r\n  - melsby@gmail.com\r\n```\r\n\r\n* Then use the Hasher module to convert the plain text passwords into hashed passwords.\r\n\r\n```python\r\nhashed_passwords = stauth.Hasher(['123', '456']).generate()\r\n```\r\n\r\n* Finally replace the plain text passwords in the configuration file with the hashed passwords.\r\n\r\n### 2. Creating a login widget\r\n\r\n* Subsequently import the configuration file into your script and create an authentication object.\r\n\r\n```python\r\nwith open('../config.yaml') as file:\r\n    config = yaml.load(file, Loader=SafeLoader)\r\n\r\nauthenticator = stauth.Authenticate(\r\n    config['credentials'],\r\n    config['cookie']['name'],\r\n    config['cookie']['key'],\r\n    config['cookie']['expiry_days'],\r\n    config['preauthorized']\r\n)\r\n```\r\n\r\n* Then finally render the login module as follows. Here you will need to provide a name for the login form, and specify where the form should be located i.e. main body or sidebar (will default to main body).\r\n\r\n```python\r\nname, authentication_status, username = authenticator.login('Login', 'main')\r\n```\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/login_form.PNG)\r\n\r\n### 3. Authenticating users\r\n\r\n* You can then use the returned name and authentication status to allow your verified user to proceed to any restricted content. In addition, you have the ability to add an optional logout button at any location on your main body or sidebar (will default to main body).\r\n\r\n```python\r\nif authentication_status:\r\n    authenticator.logout('Logout', 'main')\r\n    st.write(f'Welcome *{name}*')\r\n    st.title('Some content')\r\nelif authentication_status == False:\r\n    st.error('Username/password is incorrect')\r\nelif authentication_status == None:\r\n    st.warning('Please enter your username and password')\r\n```\r\n\r\n* Should you require access to the persistent name, authentication status, and username variables, you may retrieve them through Streamlit's session state using **st.session_state[\"name\"]**, **st.session_state[\"authentication_status\"]**, and **st.session_state[\"username\"]**. This way you can use Streamlit-Authenticator to authenticate users across multiple pages.\r\n\r\n```python\r\nif st.session_state[\"authentication_status\"]:\r\n    authenticator.logout('Logout', 'main')\r\n    st.write(f'Welcome *{st.session_state[\"name\"]}*')\r\n    st.title('Some content')\r\nelif st.session_state[\"authentication_status\"] == False:\r\n    st.error('Username/password is incorrect')\r\nelif st.session_state[\"authentication_status\"] == None:\r\n    st.warning('Please enter your username and password')\r\n```\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/logged_in.PNG)\r\n\r\n* Or prompt an unverified user to enter a correct username and password.\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/incorrect_login.PNG)\r\n\r\n* Please note that logging out will revert the authentication status to **None** and will delete the associated reauthentication cookie as well.\r\n\r\n### 4. Creating a password reset widget\r\n\r\n* You may use the **reset_password** widget to allow a logged in user to modify their password as shown below.\r\n\r\n```python\r\nif authentication_status:\r\n    try:\r\n        if authenticator.reset_password(username, 'Reset password'):\r\n            st.success('Password modified successfully')\r\n    except Exception as e:\r\n        st.error(e)\r\n```\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/reset_password.PNG)\r\n\r\n### 5. Creating a new user registration widget\r\n\r\n* You may use the **register_user** widget to allow a user to sign up to your application as shown below. If you require the user to be preauthorized, set the **preauthorization** argument to True and add their email to the **preauthorized** list in the configuration file. Once they have registered, their email will be automatically removed from the **preauthorized** list in the configuration file. Alternatively, to allow anyone to sign up, set the **preauthorization** argument to False.\r\n\r\n```python\r\ntry:\r\n    if authenticator.register_user('Register user', preauthorization=False):\r\n        st.success('User registered successfully')\r\nexcept Exception as e:\r\n    st.error(e)\r\n```\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/register_user.PNG)\r\n\r\n### 6. Creating a forgot password widget\r\n\r\n* You may use the **forgot_password** widget to allow a user to generate a new random password. This password will be automatically hashed and saved in the configuration file. The widget will return the username, email, and new random password of the user which should then be transferred to them securely.\r\n\r\n```python\r\ntry:\r\n    username_forgot_pw, email_forgot_password, random_password = authenticator.forgot_password('Forgot password')\r\n    if username_forgot_pw:\r\n        st.success('New password sent securely')\r\n        # Random password to be transferred to user securely\r\n    elif username_forgot_pw == False:\r\n        st.error('Username not found')\r\nexcept Exception as e:\r\n    st.error(e)\r\n```\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/forgot_password.PNG)\r\n\r\n### 7. Creating a forgot username widget\r\n\r\n* You may use the **forgot_username** widget to allow a user to retrieve their forgotten username. The widget will return the username and email of the user which should then be transferred to them securely.\r\n\r\n```python\r\ntry:\r\n    username_forgot_username, email_forgot_username = authenticator.forgot_username('Forgot username')\r\n    if username_forgot_username:\r\n        st.success('Username sent securely')\r\n        # Username to be transferred to user securely\r\n    elif username_forgot_username == False:\r\n        st.error('Email not found')\r\nexcept Exception as e:\r\n    st.error(e)\r\n```\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/forgot_username.PNG)\r\n\r\n### 8. Creating an update user details widget\r\n\r\n* You may use the **update_user_details** widget to allow a logged in user to update their name and/or email. The widget will automatically save the updated details in both the configuration file and reauthentication cookie.\r\n\r\n```python\r\nif authentication_status:\r\n    try:\r\n        if authenticator.update_user_details(username, 'Update user details'):\r\n            st.success('Entries updated successfully')\r\n    except Exception as e:\r\n        st.error(e)\r\n```\r\n\r\n![](https://github.com/mkhorasani/Streamlit-Authenticator/blob/main/graphics/update_user_details.PNG)\r\n\r\n### 9. Updating the configuration file\r\n\r\n* Please ensure that the configuration file is resaved anytime the credentials are updated or whenever the **reset_password**, **register_user**, **forgot_password**, or **update_user_details** widgets are used.\r\n\r\n```python\r\nwith open('../config.yaml', 'w') as file:\r\n    yaml.dump(config, file, default_flow_style=False)\r\n```\r\n\r\n## Credits\r\n- Mohamed Abdou for the highly versatile cookie manager in [Extra-Streamlit-Components](https://github.com/Mohamed-512/Extra-Streamlit-Components).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Python,Streamlit,Authentication,Components",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ",
    "maintainer": "",
    "maintainer_email": "Arsène BAKANDAKAN <contactjrdk@gmail.com>",
    "name": "str-authFr",
    "package_url": "https://pypi.org/project/str-authFr/",
    "platform": null,
    "project_url": "https://pypi.org/project/str-authFr/",
    "project_urls": {
      "homepage": "https://github.com/mkhorasani/Streamlit-Authenticator"
    },
    "release_url": "https://pypi.org/project/str-authFr/2022.0.1/",
    "requires_dist": [
      "PyJWT (>=2.3.0)",
      "bcrypt (>=3.1.7)",
      "PyYAML (>=5.3.1)",
      "streamlit (>=0.86)",
      "extra-streamlit-components (>=0.1.55)"
    ],
    "requires_python": ">=3.6",
    "summary": "A secure authentication module to validate user credentials in a Streamlit application created by Mohammad Khorasani with widgets texts translated in french",
    "version": "2022.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16205801,
  "releases": {
    "2022.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "182db7c270ddd856b8dbaa06cd09709aceb1674801b42264713e83d885ee164c",
          "md5": "9b8dfba24c3b822b01d3b0cf8a742ed4",
          "sha256": "a688d460cce3e3eb2d28d83d90a2d3c07dfbafbfd6f9c4e56812039b15caec34"
        },
        "downloads": -1,
        "filename": "str_authFr-2022.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b8dfba24c3b822b01d3b0cf8a742ed4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18387,
        "upload_time": "2022-12-24T16:39:18",
        "upload_time_iso_8601": "2022-12-24T16:39:18.510946Z",
        "url": "https://files.pythonhosted.org/packages/18/2d/b7c270ddd856b8dbaa06cd09709aceb1674801b42264713e83d885ee164c/str_authFr-2022.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e32a158babcfa4b631e33c0803b7c9d126328ebc6d7c950bc9a4fe862acd7f09",
          "md5": "fbde6365ba7c37b61a887b869d1d093e",
          "sha256": "04e300822b1a4df003f87d0c2090e2a03623f5107a93836196fe939ebbf21621"
        },
        "downloads": -1,
        "filename": "str-authFr-2022.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fbde6365ba7c37b61a887b869d1d093e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20711,
        "upload_time": "2022-12-24T16:39:20",
        "upload_time_iso_8601": "2022-12-24T16:39:20.637708Z",
        "url": "https://files.pythonhosted.org/packages/e3/2a/158babcfa4b631e33c0803b7c9d126328ebc6d7c950bc9a4fe862acd7f09/str-authFr-2022.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "182db7c270ddd856b8dbaa06cd09709aceb1674801b42264713e83d885ee164c",
        "md5": "9b8dfba24c3b822b01d3b0cf8a742ed4",
        "sha256": "a688d460cce3e3eb2d28d83d90a2d3c07dfbafbfd6f9c4e56812039b15caec34"
      },
      "downloads": -1,
      "filename": "str_authFr-2022.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b8dfba24c3b822b01d3b0cf8a742ed4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18387,
      "upload_time": "2022-12-24T16:39:18",
      "upload_time_iso_8601": "2022-12-24T16:39:18.510946Z",
      "url": "https://files.pythonhosted.org/packages/18/2d/b7c270ddd856b8dbaa06cd09709aceb1674801b42264713e83d885ee164c/str_authFr-2022.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e32a158babcfa4b631e33c0803b7c9d126328ebc6d7c950bc9a4fe862acd7f09",
        "md5": "fbde6365ba7c37b61a887b869d1d093e",
        "sha256": "04e300822b1a4df003f87d0c2090e2a03623f5107a93836196fe939ebbf21621"
      },
      "downloads": -1,
      "filename": "str-authFr-2022.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fbde6365ba7c37b61a887b869d1d093e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20711,
      "upload_time": "2022-12-24T16:39:20",
      "upload_time_iso_8601": "2022-12-24T16:39:20.637708Z",
      "url": "https://files.pythonhosted.org/packages/e3/2a/158babcfa4b631e33c0803b7c9d126328ebc6d7c950bc9a4fe862acd7f09/str-authFr-2022.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}