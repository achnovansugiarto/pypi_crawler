{
  "info": {
    "author": "DoronZ",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "- [Description](#description)\n- [Example](#example)\n- [Installation](#installation)\n- [How to use](#how-to-use)\n    * [Starting a Hilda shell](#starting-a-hilda-shell)\n        + [Bare mode](#bare-mode)\n        + [Remote mode](#remote-mode)\n    * [Commands](#commands)\n    * [Symbol objects](#symbol-objects)\n    * [Globalized symbols](#globalized-symbols)\n        - [Searching for the right symbol](#searching-for-the-right-symbol)\n\n        + [Objective-C Classes](#objective-c-classes)\n    * [Objective-C Objects](#objective-c-objects)\n    * [Using snippets](#using-snippets)\n    * [Contributing](#contributing)\n\n# Description\n\nHilda is a debugger which combines both the power of LLDB and iPython for easier debugging.\n\nThe name originates from the TV show \"Hilda\", which is the best friend of\n[Frida](https://frida.re/). Both Frida and Hilda are meant for pretty much the same purpose, except Hilda takes the\nmore \"\ndebugger-y\" approach (based on LLDB).\n\nCurrently, the project is intended for iOS/OSX debugging, but in the future we will possibly add support for the\nfollowing platforms as well:\n\n* Linux\n* Android\n\nSince LLDB allows abstraction for both platform and architecture, it should be possible to make the necessary changes\nwithout too many modifications.\n\nPull requests are more than welcome 😊.\n\nIf you need help or have an amazing idea you would like to suggest, feel free\nto [start a discussion 💬](https://github.com/doronz88/hilda/discussions).\n\n# Example\n\n![](gifs/example.gif)\n\nMore examples can be found under the [gifs folder](gifs/).\n\n# Installation\n\nRequirements for remote iOS device (not required for debugging a local OSX process):\n\n* Jailbroken iOS device\n* `debugserver` in device's PATH\n    * [You can use this tool in order to obtain the binary](https://github.com/doronz88/debugserver-deploy)\n    * After re-signing with new entitlements, you can put the binary in the following path: `/usr/bin/debugserver`\n\nIn order to install please run:\n\n```shell\nxcrun python3 -m pip install --user -U hilda\n```\n\n*⚠️ Please note that Hilda is installed on top of XCode's python so LLDB will be able to use its features.*\n\n# How to use\n\n## Starting a Hilda shell\n\n### Bare mode\n\nUse \"Bare mode\" to get a \"bare-bones\" lldb shell, whereas hilda plugin is already loaded and ready to start. This mode\nis useful when you need to have custom commands for attaching to the target process (for example when debugging OSX\nprocesses).\n\nTo start this mode simply use:\n\n```shell\nhilda bare\n```\n\nPlease refer to the following help page if you require help on the command available to you within the lldb shell:\n\n[lldb command map](https://lldb.llvm.org/use/map.html).\n\nAs a cheatsheet, connecting to a remote platform like so:\n\n```shell\nplatform connect connect://ip:port\n```\n\n... and attaching to a local process:\n\n```shell\nprocess attach -n proccess_name\nprocess attach -p proccess_pid\n```\n\nWhen you are ready, just execute `hilda` to move to Hilda's iPython shell.\n\n### Remote mode\n\nThis mode will auto-connect to the remote device and attach to your target process assuming you are trying to debug a\nremote jailbroken iOS device.\n\nPlease note the following:\n* script assumes the connected device already **has a running ssh server**, which doesn't require a password (you can use\n`ssh-copy-id` to achieve this).\n\nFrom this point the flow diverges into 2 flows:\n\n### The connected device is connected to the network via `internet sharing` with your computer\nRun the following command:\n```shell\nhilda remote PROCESS_NAME SSH_PORT\n``` \n\n### The connected device is connected via Wi-Fi\n\nFor this to work, you will need to make sure of the following:\n  * Find your cellphone IP address (Settings -> Wi-Fi -> network info -> IP Address).\n  * Once you found it, run the following command:\n      ```shell\n      hilda remote PROCESS_NAME SSH_PORT --hostname <DEVICE_IP_ADDRESS>\n      ```\n\n## Commands\n\nCommands are just global python functions you can access any time. It's really advised to first get a good overview over\nthem before start using, so you take full advantage of everything Hilda has to offer.\n\nGiven below is a list of them:\n\n```\n👾 hd - Print an hexdump of given buffer\n👾 lsof - Get dictionary of all open FDs\n👾 bt - Print an improved backtrace.\n👾 disable_jetsam_memory_checks - Disable jetsam memory checks, prevent raising:\n    `error: Execution was interrupted, reason: EXC_RESOURCE RESOURCE_TYPE_MEMORY (limit=15 MB, unused=0x0).`\n    when evaluating expression.\n👾 symbol - Get symbol object for a given address\n👾 objc_symbol - Get objc symbol wrapper for given address\n👾 inject - Inject a single library into currently running process\n👾 rebind_symbols - Reparse all loaded images symbols\n👾 poke - Write data at given address\n👾 peek - Read data at given address\n👾 peek_str - Peek a buffer till null termination\n👾 stop - Stop process.\n👾 cont - Continue process.\n👾 detach - Detach from process.\n    Useful in order to exit gracefully so process doesn't get killed\n    while you exit\n👾 disass - Print disassembly from a given address\n👾 file_symbol - Calculate symbol address without ASLR\n👾 get_register - Get value for register by its name\n👾 set_register - Set value for register by its name\n👾 objc_call - Simulate a call to an objc selector\n👾 call - Call function at given address with given parameters\n👾 monitor - Monitor every time a given address is called\n    The following options are available:\n        regs={reg1: format}\n            will print register values\n\n            Available formats:\n                x: hex\n                s: string\n                cf: use CFCopyDescription() to get more informative description of the object\n                po: use LLDB po command\n                User defined function, will be called like `format_function(hilda_client, value)`.\n\n            For example:\n                regs={'x0': 'x'} -> x0 will be printed in HEX format\n        expr={lldb_expression: format}\n            lldb_expression can be for example '$x0' or '$arg1'\n            format behaves just like 'regs' option\n        retval=format\n            Print function's return value. The format is the same as regs format.\n        stop=True\n            force a stop at every hit\n        bt=True\n            print backtrace\n        cmd=[cmd1, cmd2]\n            run several LLDB commands, one by another\n        force_return=value\n            force a return from function with the specified value\n        name=some_value\n            use `some_name` instead of the symbol name automatically extracted from the calling frame\n        override=True\n            override previous break point at same location\n👾 show_current_source - print current source code if possible\n👾 finish - Run current frame till its end.\n👾 step_into - Step into current instruction.\n👾 step_over - Step over current instruction.\n👾 remove_all_hilda_breakpoints - Remove all breakpoints created by Hilda\n👾 remove_hilda_breakpoint - Remove a single breakpoint placed by Hilda\n👾 force_return - Prematurely return from a stack frame, short-circuiting exection of newer frames and optionally\n    yielding a specified value.\n👾 proc_info - Print information about currently running mapped process.\n👾 print_proc_entitlements - Get the plist embedded inside the process' __LINKEDIT section.\n👾 bp - Add a breakpoint\n👾 show_hilda_breakpoints - Show existing breakpoints created by Hilda.\n👾 show_commands - Show available commands.\n👾 save - Save loaded symbols map (for loading later using the load() command)\n👾 load - Load an existing symbols map (previously saved by the save() command)\n👾 po - Print given object using LLDB's po command\n    Can also run big chunks of native code:\n\n    po('NSMutableString *s = [NSMutableString string]; [s appendString:@\"abc\"]; [s description]')\n👾 globalize_symbols - Make all symbols in python's global scope\n👾 jump - jump to given symbol\n👾 lldb_handle_command - Execute an LLDB command\n    For example:\n        lldb_handle_command('register read')\n👾 objc_get_class - Get ObjC class object\n👾 CFSTR - Create CFStringRef object from given string\n👾 ns - Create NSObject from given data\n👾 from_ns - Create python object from NS object.\n👾 evaluate_expression - Wrapper for LLDB's EvaluateExpression.\n    Used for quick code snippets.\n\n    Feel free to use local variables inside the expression using format string.\n    For example:\n        currentDevice = objc_get_class('UIDevice').currentDevice\n        evaluate_expression(f'[[{currentDevice} systemName] hasPrefix:@\"2\"]')\n👾 import_module - Import & reload given python module (intended mainly for external snippets)\n👾 set_evaluation_unwind - Set whether LLDB will attempt to unwind the stack whenever an expression evaluation error occurs.\n    Use unwind() to restore when an error is raised in this case.\n👾 get_evaluation_unwind - Get evaluation unwind state.\n    When this value is True, LLDB will attempt unwinding the stack on evaluation errors.\n    Otherwise, the stack frame will remain the same on errors to help you investigate the error.\n👾 set_evaluation_ignore_breakpoints - Set whether to ignore breakpoints while evaluating expressions\n👾 get_evaluation_ignore_breakpoints - Get evaluation \"ignore-breakpoints\" state.\n👾 unwind - Unwind the stack (useful when get_evaluation_unwind() == False)\n```\n\nIn order to view them within Hilda, please execute:\n\n```python\nshow_commands()\n```\n\nIf you just want help for a specific one... Hmm.. for example the `stop` command, you can just use IPython's\ncapabilities:\n\n```python\n# execute the following to print the command's documentation\nstop?\n```\n\n## Symbol objects\n\nIn Hilda, almost everything is wrapped using the `Symbol` Object. Symbol is just a nicer way for referring to addresses\nencapsulated with an object allowing to deref the memory inside, or use these addresses as functions.\n\nIn order to create a symbol from a given address, please use:\n\n```python\ns = symbol(0x12345678)\n\n# the Symbol object extends `int`\nTrue == isinstance(s, int)\n\n# print print the un-shifted file address \n# (calculating the ASLR shift for you, so you can just view it in IDA)\nprint(s.file_address)\n\n# or.. if you know the file address, but don't wanna mess\n# with ASLR calculations\ns = file_symbol(0x12345678)\n\n# peek(/read) 20 bytes of memory\nprint(s.peek(20))\n\n# write into this memory\ns.poke('abc')\n\n# let LLDB print-object (it should guess the type automatically\n# based on its memory layout)\nprint(s.po())\n\n# or you can help LLDB with telling it its type manually\nprint(s.po('char *'))\n\n# jump to `s` as a function, passing (1, \"string\") as its args \ns(1, \"string\")\n\n# change the size of each item_size inside `s` for derefs\ns.item_size = 1\n\n# *(char *)s = 1\ns[0] = 1\n\n# *(((char *)s)+1) = 1\ns[1] = 1\n\n# symbol inherits from int, so all int operations apply\ns += 4\n\n# change s item size back to 8 to store pointers\ns.item_size = 8\n\n# *(intptr_t *)s = 1\ns[0] = 1\n\n# storing the return value of the function executed at `0x11223344`\n# into `*s`\ns[0] = symbol(0x11223344)()  # calling symbols also returns symbols \n\n# attempt to resolve symbol's name\nprint(symbol(0x11223344).lldb_symbol)\n\n# monitor each time a symbol is called into console and print its backtrace (`bt` option)\n# this will create a scripted breakpoint which prints your desired data and continue\ns.monitor(bt=True)\n\n# you can also:\n#   bt -> view the backtrace\n#   regs -> view registers upon each call in your desired format\n#   retval -> view the return value upon each call in your desired format\n#   cmd -> execute a list of LLDB commands on each hit\ns.monitor(regs={'x0': 'x'},  # print `x0` in HEX form\n          retval='po',  # use LLDB's `po` for printing the returned value\n          bt=True,  # view backtrace (will also resolve ASLR addresses for you)\n          cmd=['thread list'],  # show thread list \n          )\n\n# we can also just `force_return` with a hard-coded value to practically disable \n# a specific functionality\ns.monitor(force_return=0)  # cause the function to always return `0`\n\n# as for everything, if you need help understanding each such feature, \n# simply execute the following to view its help (many such features even contain examples) \ns.monitor?\n\n# create a scripted_breakpoint manually\ndef scripted_breakpoint(hilda, *args):\n    # like everything in hilda, registers are also\n    # just simple `Symbol` objects, so feel free to \n    # use them to your heart's content :)\n    if hilda.registers.x0.peek(4) == b'\\x11\\x22\\x33\\x44':\n        hilda.registers.x0 = hilda.symbols.malloc(200)\n        hilda.registers.x0.poke(b'\\x22' * 200)\n\n    # just continue the process\n    hilda.cont()\n\n\ns.bp(scripted_breakpoint)\n```\n\n## Globalized symbols\n\nUsually you would want/need to use the symbols already mapped into the currently running process. To do so, you can\naccess them using `symbols.<symbol-name>`. The `symbols` global object is of type `SymbolsJar`, which is a wrapper\nto `dict` for accessing all exported symbols. For example, the following will generate a call to the exported\n`malloc` function with `20` as its only argument:\n\n```python\nx = symbols.malloc(20)\n```\n\nYou can also just write their name as if they already were in the global scope. Hilda will check if no name collision\nexists, and if so, will perform the following lazily for you:\n\n```python\nx = malloc(20)\n\n# is equivalent to:\nmalloc = symbols.malloc\nx = malloc(20)\n```\n\n#### Searching for the right symbol\n\nSometimes you don't really know where to start your research. All you have is just theories of how your desired exported\nsymbol should be called (if any).\n\nFor that reason alone, we have the `rebind_symbols()`\ncommand - to help you find the symbol you are looking for.\n\n```python\nrebind_symbols()  # this might take some time\n\n# find all symbols prefixed as `mem*` AND don't have `cpy`\n# in their name\njar = symbols.startswith('mem') - symbols.find('cpy')\n\n# filter only symbols of type \"code\" (removing data global for example)\njar = jar.code()\n\n# monitor every time each one is called, print its `x0` in HEX\n# form and show the backtrace\njar.monitor(regs={'x0': 'x'}, bt=True)\n```\n\n### Objective-C Classes\n\nThe same as symbols applies to Objective-C classes name resolution. You can either:\n\n```python\nd = NSDictionary.new()  # call its `new` selector\n\n# which is equivalent to:\nNSDictionary = objc_get_class('NSDictionary')\nd = NSDictionary.new()\n```\n\nThis is possible only since `NSDictionary` is exported. In case it is not, you must call `objc_get_class()` explicitly.\n\nAs you can see, you can directly access all the class' methods.\n\nPlease look what more stuff you can do as shown below:\n\n```python\n# show the class' ivars\nprint(NSDictionary.ivars)\n\n# show the class' methods\nprint(NSDictionary.methods)\n\n# show the class' proprties\nprint(NSDictionary.properties)\n\n# view class' selectors which are prefixed with 'init'\nprint(NSDictionary.symbols_jar.startswith('-[NSDictionary init'))\n\n# you can of course use any of `SymbolsJar` over them, for example:\n# this will `po` (print object) all those selectors returned value\nNSDictionary.symbols_jar.startswith('-[NSDictionary init').monitior(retval='po')\n\n# monitor each time any selector in NSDictionary is called\nNSDictionary.monitor()\n\n# `force_return` for some specific selector with a hard-coded value (4)\nNSDictionary.get_method('valueForKey:').address.monitor(force_return=4)\n\n# capture the `self` object at the first hit of any selector\n# `True` for busy-wait for object to be captured\ndictionary = NSDictionary.capture_self(True)\n\n# print a colored and formatted version for class layout\ndictionary.show()\n```\n\n## Objective-C Objects\n\nIn order to work with ObjC objects, each symbol contains a property called\n`objc_symbol`. After calling, you can work better with each object:\n\n```python\ndict = NSDictionary.new().objc_symbol\ndict.show()  # print object layout\n\n# just like class, you can access its ivars, method, etc...\nprint(dict.ivars)\n\n# except now they have values you can view\nprint(dict._ivarName)\n\n# or edit\ndict._ivarName = value\n\n# and of course you can call the object's methods\n# hilda will checks if the method returned an ObjC object:\n#   - if so, call `objc_symbol` upon it for you\n#   - otherwise, leave it as a simple `Symbol` object\narr = dict.objectForKey_('keyContainingNSArray')\n\n# you can also call class-methods\n# hilda will call it using either the instance object,\n# or the class object respectively of the use\nnewDict = dict.dictionary()\n\n# print the retrieved object\nprint(arr.po())\n```\n\nAlso, working with Objective-C objects like this can be somewhat exhausting, so we created the `ns` and `from_ns`\ncommands so you are able to use complicated types when parsing values and passing as arguments:\n\n```python\nimport datetime\n\n# using the `ns` command we can just pass a python-native dictionary\nfunction_requiring_a_specfic_dictionary(ns({\n    'key1': 'string',  # will convert to NSString\n    'key2': True,  # will convert to NSNumber\n    'key3': b'1234',  # will convert to NSData\n    'key4': datetime.datetime(2021, 1, 1)  # will convert to NSDate\n}))\n\n# and also parse one\nnormal_python_dict = from_ns(ns({\n    'key1': 'string',  # will convert to NSString\n    'key2': True,  # will convert to NSNumber\n    'key3': b'1234',  # will convert to NSData\n    'key4': datetime.datetime(2021, 1, 1)  # will convert to NSDate\n}))\n```\n\nOn last resort, if the object is not serializable for this to work, you can just run pure Objective-C code:\n\n```python\n# let LLDB compile and execute the expression\nabc_string = evaluate_expression('[NSString stringWithFormat:@\"abc\"]')\n\n# will print \"abc\"\nprint(abc_string.po())\n```\n\n## Using snippets\n\nSnippets are extensions for normal functionality used as quick cookbooks for day-to-day tasks of a debugger.\n\nThey all use the following concept to use:\n\n```python\nfrom hilda.snippets import snippet_name\n\nsnippet_name.do_domething()  \n```\n\nFor example, XPC sniffing can be done using:\n\n```python\nfrom hilda.snippets import xpc\n\nxpc.sniff_all()\n```\n\nThis will monitor all XPC related traffic in the given process.\n\n## Contributing\n\nPlease run the tests as follows before submitting a PR:\n\n```shell\nxcrun python3 -m tests aggregated <ssh_port>\n\n# wait for lldb shell prompt\n\nrun_tests\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/doronz88/hilda",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hilda",
    "package_url": "https://pypi.org/project/hilda/",
    "platform": null,
    "project_url": "https://pypi.org/project/hilda/",
    "project_urls": {
      "Homepage": "https://github.com/doronz88/hilda",
      "hilda": "https://github.com/doronz88/hilda"
    },
    "release_url": "https://pypi.org/project/hilda/0.1.1/",
    "requires_dist": [
      "tqdm",
      "docstring-parser",
      "coloredlogs",
      "hexdump",
      "ipython",
      "click",
      "objc-types-decoder",
      "construct",
      "pymobiledevice3",
      "cached-property",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "LLDB wrapped and empowered by iPython's features",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16170202,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cf6f777f20ce4e592908b202c55122613b41e4015119680e75b10124bc81b91",
          "md5": "c8a3c14f79df28ab8eec6d92cde1ab7d",
          "sha256": "a7419e09766885341159cd010a5b7c3642ea5847c031b0ce1470d9314a20b254"
        },
        "downloads": -1,
        "filename": "hilda-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8a3c14f79df28ab8eec6d92cde1ab7d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43018,
        "upload_time": "2021-12-13T08:32:25",
        "upload_time_iso_8601": "2021-12-13T08:32:25.011247Z",
        "url": "https://files.pythonhosted.org/packages/8c/f6/f777f20ce4e592908b202c55122613b41e4015119680e75b10124bc81b91/hilda-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "080bbd8f8226c3d09a2e002236f5561cc828c321c8a070eb6398b279c3053a5c",
          "md5": "d1d6a1649f1f0e4cac60cc52b720fbee",
          "sha256": "bc2ef57de5e547bad35163ee4fa4e24577426c24d563eea8e2549e64d3420293"
        },
        "downloads": -1,
        "filename": "hilda-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1d6a1649f1f0e4cac60cc52b720fbee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41387,
        "upload_time": "2021-12-13T08:32:26",
        "upload_time_iso_8601": "2021-12-13T08:32:26.363713Z",
        "url": "https://files.pythonhosted.org/packages/08/0b/bd8f8226c3d09a2e002236f5561cc828c321c8a070eb6398b279c3053a5c/hilda-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02363a7d9d3aae22852ae525aa32c9afb0a95b3343ba49631b2f19717a6936f4",
          "md5": "fd41b2bb0fb541afe6eb7d0d63463e3b",
          "sha256": "194476de7a4783219957aafa556ba09902cbe9a355533ef21d889ac0223a12eb"
        },
        "downloads": -1,
        "filename": "hilda-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd41b2bb0fb541afe6eb7d0d63463e3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56886,
        "upload_time": "2022-09-19T19:07:16",
        "upload_time_iso_8601": "2022-09-19T19:07:16.096950Z",
        "url": "https://files.pythonhosted.org/packages/02/36/3a7d9d3aae22852ae525aa32c9afb0a95b3343ba49631b2f19717a6936f4/hilda-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42cf835c01cb2c171cf3ce0951095e349fc6b2dee9d319182f8f773029fc8598",
          "md5": "8539ba714531849b4b7f8979a5e9870c",
          "sha256": "74ec3a3083889682d27f5cd0b214d040db0d4d7c4d811220e2cee2a444a700b5"
        },
        "downloads": -1,
        "filename": "hilda-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "8539ba714531849b4b7f8979a5e9870c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55334,
        "upload_time": "2022-09-19T19:07:18",
        "upload_time_iso_8601": "2022-09-19T19:07:18.014203Z",
        "url": "https://files.pythonhosted.org/packages/42/cf/835c01cb2c171cf3ce0951095e349fc6b2dee9d319182f8f773029fc8598/hilda-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5abff2d9fec684e07943252f7a2088277835617f16bab75cb442975853c4a949",
          "md5": "827ee2495fb0cfdfd58668f613fe7c5a",
          "sha256": "a29f5f210760b79fa8df75e0ac00e4233d0cddabc6bfaf0c8a4d8c6ada9b735b"
        },
        "downloads": -1,
        "filename": "hilda-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "827ee2495fb0cfdfd58668f613fe7c5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43818,
        "upload_time": "2021-12-14T15:19:54",
        "upload_time_iso_8601": "2021-12-14T15:19:54.970436Z",
        "url": "https://files.pythonhosted.org/packages/5a/bf/f2d9fec684e07943252f7a2088277835617f16bab75cb442975853c4a949/hilda-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bb539f607f88c109768da989a2d2c2c22b4b912bc83f0303f0ddf5e28de9e41",
          "md5": "f7f07296a9c140beb3684fde1c64cbbe",
          "sha256": "4b335962565818c0863aab0a8d4f46fcdb9aea6406f7b45d31e9c29f7afbe3c2"
        },
        "downloads": -1,
        "filename": "hilda-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f7f07296a9c140beb3684fde1c64cbbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42279,
        "upload_time": "2021-12-14T15:19:56",
        "upload_time_iso_8601": "2021-12-14T15:19:56.240610Z",
        "url": "https://files.pythonhosted.org/packages/6b/b5/39f607f88c109768da989a2d2c2c22b4b912bc83f0303f0ddf5e28de9e41/hilda-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5211a5abe152a50877918b868635ec30a6e3d4154b41617385a2049e4bf0023a",
          "md5": "431cac4dcb1f7a4cdf3fcf3457b7077f",
          "sha256": "b4476f9cabac3710e0e4cee7ffcabd707110758dfe7cf2cccced3081a770e09e"
        },
        "downloads": -1,
        "filename": "hilda-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "431cac4dcb1f7a4cdf3fcf3457b7077f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44564,
        "upload_time": "2022-01-09T15:59:53",
        "upload_time_iso_8601": "2022-01-09T15:59:53.675713Z",
        "url": "https://files.pythonhosted.org/packages/52/11/a5abe152a50877918b868635ec30a6e3d4154b41617385a2049e4bf0023a/hilda-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1482295388fa4acf1697884ba77d39583a405f187f938a8b30f53f9bb6eb07d2",
          "md5": "8ce029b5f0757193f6986746f2c42fa7",
          "sha256": "389608a31d2041ca535bca2b3573e75f8ac468c8c72fb917e4d5f5bb70b36931"
        },
        "downloads": -1,
        "filename": "hilda-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8ce029b5f0757193f6986746f2c42fa7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43421,
        "upload_time": "2022-01-09T15:59:55",
        "upload_time_iso_8601": "2022-01-09T15:59:55.033699Z",
        "url": "https://files.pythonhosted.org/packages/14/82/295388fa4acf1697884ba77d39583a405f187f938a8b30f53f9bb6eb07d2/hilda-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3f4e68881901d6334da87b595c5d0dba9b27835c9ee2e466989419fe56ce0db",
          "md5": "5d62ef537b5b94280196a3a3b6df66cd",
          "sha256": "0984bd85363853c564e1905ea1d5795fc3bd7cfa71fdda4f9ec7796ad845c2bd"
        },
        "downloads": -1,
        "filename": "hilda-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d62ef537b5b94280196a3a3b6df66cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56754,
        "upload_time": "2022-01-13T08:57:53",
        "upload_time_iso_8601": "2022-01-13T08:57:53.208401Z",
        "url": "https://files.pythonhosted.org/packages/a3/f4/e68881901d6334da87b595c5d0dba9b27835c9ee2e466989419fe56ce0db/hilda-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68a57c20d77823a3bca964cfd76f064838be528281d2610504995ea75888f254",
          "md5": "e67044293c4459e487bda278fd1ea740",
          "sha256": "1ed6a74ee7ab12df224663f13fdb50772750fcf8b2b3d4291415626f23639d82"
        },
        "downloads": -1,
        "filename": "hilda-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e67044293c4459e487bda278fd1ea740",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55104,
        "upload_time": "2022-01-13T08:57:55",
        "upload_time_iso_8601": "2022-01-13T08:57:55.317019Z",
        "url": "https://files.pythonhosted.org/packages/68/a5/7c20d77823a3bca964cfd76f064838be528281d2610504995ea75888f254/hilda-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0680966661bb117fbdcc38c2c23174ee3475a2d8fe433b57b23f70b35b862ac8",
          "md5": "e08dc4d38db9e9ced8349af43a31aff4",
          "sha256": "28aaffaae224df8dc675b44b4c144ae159fdc9534d87b1db8c4f178cfc982069"
        },
        "downloads": -1,
        "filename": "hilda-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e08dc4d38db9e9ced8349af43a31aff4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56774,
        "upload_time": "2022-02-18T16:42:38",
        "upload_time_iso_8601": "2022-02-18T16:42:38.688716Z",
        "url": "https://files.pythonhosted.org/packages/06/80/966661bb117fbdcc38c2c23174ee3475a2d8fe433b57b23f70b35b862ac8/hilda-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91399f771ee1339af0ad7d508b0fccaac845656e19ae32fb340db2dba2ee5fd2",
          "md5": "68803dd5e0e6ee634542fbd35f2dcc3b",
          "sha256": "84d5fc3ce70aae85657a69223ce92680f555379095c9b241a67078ae6d835127"
        },
        "downloads": -1,
        "filename": "hilda-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "68803dd5e0e6ee634542fbd35f2dcc3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55119,
        "upload_time": "2022-02-18T16:42:40",
        "upload_time_iso_8601": "2022-02-18T16:42:40.589429Z",
        "url": "https://files.pythonhosted.org/packages/91/39/9f771ee1339af0ad7d508b0fccaac845656e19ae32fb340db2dba2ee5fd2/hilda-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "292962db676cf56949b82933321f9deb8e4b63ba8d4217cdb0c4a4874fd2c1b4",
          "md5": "9db06b7588d1e20f6b9e162cc68126e0",
          "sha256": "93ce038bc974b0b84af2b63fd663f67674b91e468a0e2b3855e24341e4621cb0"
        },
        "downloads": -1,
        "filename": "hilda-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9db06b7588d1e20f6b9e162cc68126e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56771,
        "upload_time": "2022-06-22T09:52:49",
        "upload_time_iso_8601": "2022-06-22T09:52:49.477557Z",
        "url": "https://files.pythonhosted.org/packages/29/29/62db676cf56949b82933321f9deb8e4b63ba8d4217cdb0c4a4874fd2c1b4/hilda-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e181bff0bf9df5efaeed0ff7cb7506641250e5e358bfc6138b09cbad44f6faa3",
          "md5": "1b138971fe35f5720002049125c61b66",
          "sha256": "bf09cf374ad4e11f8365bdcbaab5016d0c410357a82201baccd07061438a1e12"
        },
        "downloads": -1,
        "filename": "hilda-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1b138971fe35f5720002049125c61b66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55265,
        "upload_time": "2022-06-22T09:52:51",
        "upload_time_iso_8601": "2022-06-22T09:52:51.714123Z",
        "url": "https://files.pythonhosted.org/packages/e1/81/bff0bf9df5efaeed0ff7cb7506641250e5e358bfc6138b09cbad44f6faa3/hilda-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09e02438fbdb3b46a055ff8a263518d9e44b0d6c2f16369c99d0a8d21e92d65c",
          "md5": "e512bebd7707108f615810df138734dd",
          "sha256": "7bd5e89b302628034ac895577a69f304829ed7347ae0f81fb7f986e5c16f4716"
        },
        "downloads": -1,
        "filename": "hilda-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e512bebd7707108f615810df138734dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56809,
        "upload_time": "2022-07-20T14:12:29",
        "upload_time_iso_8601": "2022-07-20T14:12:29.768181Z",
        "url": "https://files.pythonhosted.org/packages/09/e0/2438fbdb3b46a055ff8a263518d9e44b0d6c2f16369c99d0a8d21e92d65c/hilda-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b6d82514c344a9b5a668777506bdb2ae936c0775130824e2e0a86a37d45e31",
          "md5": "d43339294fba926fb434c0f71e00e027",
          "sha256": "6a8430266a4efdd53b72c19ba6689c667b109598dcebfdb84d844c75dcf4aabe"
        },
        "downloads": -1,
        "filename": "hilda-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d43339294fba926fb434c0f71e00e027",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55287,
        "upload_time": "2022-07-20T14:12:32",
        "upload_time_iso_8601": "2022-07-20T14:12:32.140131Z",
        "url": "https://files.pythonhosted.org/packages/24/b6/d82514c344a9b5a668777506bdb2ae936c0775130824e2e0a86a37d45e31/hilda-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47e0910ab34ef80fc409f5fa35b2fed64122fd54f182808576cc6d4ebb6480d7",
          "md5": "2a89c57d5846ac4d1db52f8a5d1e588b",
          "sha256": "15c2a35dbe38ec17fa9abe31e87234438a8c4e8a1026047aabc634bbf632f85e"
        },
        "downloads": -1,
        "filename": "hilda-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a89c57d5846ac4d1db52f8a5d1e588b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56829,
        "upload_time": "2022-07-20T17:20:34",
        "upload_time_iso_8601": "2022-07-20T17:20:34.815279Z",
        "url": "https://files.pythonhosted.org/packages/47/e0/910ab34ef80fc409f5fa35b2fed64122fd54f182808576cc6d4ebb6480d7/hilda-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "344053fce93278cba5aa177991352ff45bc38ac4f1b39d742163009de513de3d",
          "md5": "a36f4707244c1e829d6a84c3917c2eea",
          "sha256": "189ab6ceb0d2184b80f29f0b8b4d0044f43c3a74a6e735022b655d8e0fc5732f"
        },
        "downloads": -1,
        "filename": "hilda-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a36f4707244c1e829d6a84c3917c2eea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55309,
        "upload_time": "2022-07-20T17:20:36",
        "upload_time_iso_8601": "2022-07-20T17:20:36.827351Z",
        "url": "https://files.pythonhosted.org/packages/34/40/53fce93278cba5aa177991352ff45bc38ac4f1b39d742163009de513de3d/hilda-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64c83104f050d78f681e4ea20e7eee84abc72fecb17ae8dd60510c6d01e18f49",
          "md5": "ef6ebe9f93d2871ed0be99b7c4f99758",
          "sha256": "9ac50258b2eb3fe9f64ca118341dea741ceff7d7c7fe42254ad6968ccce794b6"
        },
        "downloads": -1,
        "filename": "hilda-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef6ebe9f93d2871ed0be99b7c4f99758",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56879,
        "upload_time": "2022-09-13T11:45:07",
        "upload_time_iso_8601": "2022-09-13T11:45:07.223678Z",
        "url": "https://files.pythonhosted.org/packages/64/c8/3104f050d78f681e4ea20e7eee84abc72fecb17ae8dd60510c6d01e18f49/hilda-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93c3b0fa9074c49ed196d62bcdc990344857485d4feda23073a70978adb8a879",
          "md5": "8d09ff809824512ae446dc1116b3a8ff",
          "sha256": "b8f48b523846a413ae52a29d074180d5559837ba18efca04d2e34dd6c46b9609"
        },
        "downloads": -1,
        "filename": "hilda-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8d09ff809824512ae446dc1116b3a8ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55332,
        "upload_time": "2022-09-13T11:45:09",
        "upload_time_iso_8601": "2022-09-13T11:45:09.486970Z",
        "url": "https://files.pythonhosted.org/packages/93/c3/b0fa9074c49ed196d62bcdc990344857485d4feda23073a70978adb8a879/hilda-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d941386fbb396af7e92d3cff8139e3cb62104ddf8c116d725558fe60a507ce5",
          "md5": "0dab94c013d86213f88e8191c818391c",
          "sha256": "28712f512e4b7e7996fbb8f79a5035d8c376b0857e3acedb195a93dbdd6ce2a0"
        },
        "downloads": -1,
        "filename": "hilda-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dab94c013d86213f88e8191c818391c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56878,
        "upload_time": "2022-09-20T06:25:32",
        "upload_time_iso_8601": "2022-09-20T06:25:32.863344Z",
        "url": "https://files.pythonhosted.org/packages/4d/94/1386fbb396af7e92d3cff8139e3cb62104ddf8c116d725558fe60a507ce5/hilda-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a28523e8105dfd870451fbadf360905f6fb353b750989c425745d6e7ec3eb1b3",
          "md5": "b64ef5ae6c764af834aeca3ee8455621",
          "sha256": "65b31675320a3e7607b2677036ee8bfcc6f5a5c00ec8141d28e8e4a41d62e077"
        },
        "downloads": -1,
        "filename": "hilda-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b64ef5ae6c764af834aeca3ee8455621",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55340,
        "upload_time": "2022-09-20T06:25:35",
        "upload_time_iso_8601": "2022-09-20T06:25:35.523658Z",
        "url": "https://files.pythonhosted.org/packages/a2/85/23e8105dfd870451fbadf360905f6fb353b750989c425745d6e7ec3eb1b3/hilda-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0c26751434f1ba6fab3b52dca3c9a91b4891d366867b63433c2fc2011bf03a3",
          "md5": "38424f9ca65dfc0a29cd5d392ac01c76",
          "sha256": "8f3cc0d14661c546dec46e1ad25ffc78bf390463dddf7c976cad632e697cdacd"
        },
        "downloads": -1,
        "filename": "hilda-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38424f9ca65dfc0a29cd5d392ac01c76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56995,
        "upload_time": "2022-12-21T06:09:36",
        "upload_time_iso_8601": "2022-12-21T06:09:36.137084Z",
        "url": "https://files.pythonhosted.org/packages/b0/c2/6751434f1ba6fab3b52dca3c9a91b4891d366867b63433c2fc2011bf03a3/hilda-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "225ba4e35148226967a484d930c58a73013463cf8fa85e8d60c2864772be46c2",
          "md5": "6c145efd109ce4063748accac72692c9",
          "sha256": "b7813557fdf28a7164b0304bbae481a5d2a121c2135a3a5a051c9c82b39dbd72"
        },
        "downloads": -1,
        "filename": "hilda-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c145efd109ce4063748accac72692c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55426,
        "upload_time": "2022-12-21T06:09:37",
        "upload_time_iso_8601": "2022-12-21T06:09:37.878991Z",
        "url": "https://files.pythonhosted.org/packages/22/5b/a4e35148226967a484d930c58a73013463cf8fa85e8d60c2864772be46c2/hilda-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0c26751434f1ba6fab3b52dca3c9a91b4891d366867b63433c2fc2011bf03a3",
        "md5": "38424f9ca65dfc0a29cd5d392ac01c76",
        "sha256": "8f3cc0d14661c546dec46e1ad25ffc78bf390463dddf7c976cad632e697cdacd"
      },
      "downloads": -1,
      "filename": "hilda-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38424f9ca65dfc0a29cd5d392ac01c76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 56995,
      "upload_time": "2022-12-21T06:09:36",
      "upload_time_iso_8601": "2022-12-21T06:09:36.137084Z",
      "url": "https://files.pythonhosted.org/packages/b0/c2/6751434f1ba6fab3b52dca3c9a91b4891d366867b63433c2fc2011bf03a3/hilda-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "225ba4e35148226967a484d930c58a73013463cf8fa85e8d60c2864772be46c2",
        "md5": "6c145efd109ce4063748accac72692c9",
        "sha256": "b7813557fdf28a7164b0304bbae481a5d2a121c2135a3a5a051c9c82b39dbd72"
      },
      "downloads": -1,
      "filename": "hilda-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6c145efd109ce4063748accac72692c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55426,
      "upload_time": "2022-12-21T06:09:37",
      "upload_time_iso_8601": "2022-12-21T06:09:37.878991Z",
      "url": "https://files.pythonhosted.org/packages/22/5b/a4e35148226967a484d930c58a73013463cf8fa85e8d60c2864772be46c2/hilda-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}