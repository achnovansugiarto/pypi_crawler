{
  "info": {
    "author": "Vidit Sarkar",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Torch Describe\n\n## Describe PyTorch model in PyTorch way\n\nIf you want Keras style `model.summary()` then [torchsummary][torchsummary-link] is there. But it only tells you how tensors flows through your model. It does not tell you the real structure of your model (if you know what I mean).\n\nIn that case `print(model)` does a decent job. But it does not prints more information about model. That is where `torchdescribe` comes in.\n\n## Install\n\n* Using `pip`,\n    ```\n    pip install torchdescribe\n    ```\n\n* From command line run,\n    ```\n    $ git clone https://github.com/vidit1999/pytorch-describe\n    $ cd pytorch-describe\n    $ python setup.py install\n    ```\n\n## Usage\n```py\nfrom torchdescribe import describe\n\ninput_shape = ... # input_shape(s) of model\n\nclass Model(nn.Module):\n    def __init__(self,...):\n        super(Model, self).__init__()\n\n        ...\n        # model attribute definations\n\n    ...\n    #  model methods\n    ...\n\nmodel = Model()\ndescribe(model, input_shape)\n```\n\n## Examples\n\n1. ### **CNN for MNIST Classification**\n    ```py\n    import torch\n    import torch.nn as nn\n\n    from torchdescribe import describe\n\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\n    class CNN(nn.Module):\n        def __init__(self):\n            super(CNN, self).__init__()\n            self.conv1 = nn.Conv2d(1, 32, kernel_size=5)\n            self.conv2 = nn.Conv2d(32, 32, kernel_size=5)\n            self.conv3 = nn.Conv2d(32,64, kernel_size=5)\n            self.fc1 = nn.Linear(3*3*64, 256)\n            self.fc2 = nn.Linear(256, 10)\n\n        def forward(self, x):\n            x = torch.relu(self.conv1(x))\n            x = torch.relu(torch.max_pool2d(self.conv2(x), 2))\n            x = torch.relu(torch.max_pool2d(self.conv3(x),2))\n            x = x.view(-1,3*3*64 )\n            x = torch.relu(self.fc1(x))\n            x = self.fc2(x)\n            return torch.log_softmax(x, dim=1)\n\n    cnn = CNN().to(device)\n    describe(model=cnn, input_shape=(1, 28, 28), batch_size=1000)\n    ```\n    ```\n    -------------------------------------------------------------\n                             CNN\n    -------------------------------------------------------------\n    =============================================================\n\n    CNN(\n        (conv1): Conv2d(1, 32, kernel_size=(5, 5), stride=(1, 1))\n        (conv2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1))\n        (conv3): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1))\n        (fc1): Linear(in_features=576, out_features=256, bias=True)\n        (fc2): Linear(in_features=256, out_features=10, bias=True)\n    )\n\n    =============================================================\n    -------------------------------------------------------------\n    Total parameters : 228,010\n    Trainable parameters : 228,010\n    Non-trainable parameters : 0\n    -------------------------------------------------------------\n    Model device : CPU\n    Batch size : 1000\n    Input shape : (1000, 1, 28, 28)\n    Output shape : (1000, 10)\n    Input size (MB) : 2.99\n    Forward/backward pass size (MB) : 257.97\n    Params size (MB) : 0.87\n    Estimated Total Size (MB) : 261.83\n    -------------------------------------------------------------\n    ```\n\n1. ### **VGG-16**\n    ```py\n    import torch\n    from torchvision import models\n    from torchdescribe import describe\n\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    vgg16 = models.vgg16().to(device)\n\n    describe(vgg16, (3, 224, 224), 100)\n    ```\n    ```\n    ------------------------------------------------------------------------------------\n                                            VGG\n    ------------------------------------------------------------------------------------\n    ====================================================================================\n\n    VGG(\n        (features): Sequential(\n            (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (1): ReLU(inplace=True)\n            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (3): ReLU(inplace=True)\n            (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n            (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (6): ReLU(inplace=True)\n            (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (8): ReLU(inplace=True)\n            (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n            (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (11): ReLU(inplace=True)\n            (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (13): ReLU(inplace=True)\n            (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (15): ReLU(inplace=True)\n            (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n            (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (18): ReLU(inplace=True)\n            (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (20): ReLU(inplace=True)\n            (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (22): ReLU(inplace=True)\n            (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n            (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (25): ReLU(inplace=True)\n            (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (27): ReLU(inplace=True)\n            (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n            (29): ReLU(inplace=True)\n            (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n        )\n        (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n        (classifier): Sequential(\n            (0): Linear(in_features=25088, out_features=4096, bias=True)\n            (1): ReLU(inplace=True)\n            (2): Dropout(p=0.5, inplace=False)\n            (3): Linear(in_features=4096, out_features=4096, bias=True)\n            (4): ReLU(inplace=True)\n            (5): Dropout(p=0.5, inplace=False)\n            (6): Linear(in_features=4096, out_features=1000, bias=True)\n        )\n    )\n\n    ====================================================================================\n    ------------------------------------------------------------------------------------\n    Total parameters : 138,357,544\n    Trainable parameters : 138,357,544\n    Non-trainable parameters : 0\n    ------------------------------------------------------------------------------------\n    Model device : CPU\n    Batch size : 100\n    Input shape : (100, 3, 224, 224)\n    Output shape : (100, 1000)\n    Input size (MB) : 57.42\n    Forward/backward pass size (MB) : 21878.87\n    Params size (MB) : 527.79\n    Estimated Total Size (MB) : 22464.08\n    ------------------------------------------------------------------------------------\n    ```\n1. ### **Multiple Inputs**\n    ```py\n    import torch\n    import torch.nn as nn\n    from torchdescribe import describe\n\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\n    class Net(nn.Module):\n        def __init__(self):\n            super(Net, self).__init__()\n            self.layers = nn.Sequential(\n                nn.Conv2d(1, 16, kernel_size=4, stride=2, padding=1),\n                nn.ReLU(),\n                nn.Flatten(),\n            )\n\n        def forward(self, x, y):\n            a = self.layers(x)\n            b = self.layers(y)\n            return a, b\n\n\n    net = Net().to(device)\n    describe(net, [(1, 16, 16), (1, 28, 28)], 500)\n    ```\n    ```\n    -------------------------------------------------------------------------\n                                    Net\n    -------------------------------------------------------------------------\n    =========================================================================\n\n    Net(\n        (layers): Sequential(\n            (0): Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n            (1): ReLU()\n            (2): Flatten(start_dim=1, end_dim=-1)\n        )\n    )\n\n    =========================================================================\n    -------------------------------------------------------------------------\n    Total parameters : 272\n    Trainable parameters : 272\n    Non-trainable parameters : 0\n    -------------------------------------------------------------------------\n    Model device : CPU\n    Batch size : 500\n    Input shape : [(500, 1, 16, 16), (500, 1, 28, 28)]\n    Output shape : [(500, 1024), (500, 3136)]\n    Input size (MB) : 1.98\n    Forward/backward pass size (MB) : 63.48\n    Params size (MB) : 0.00\n    Estimated Total Size (MB) : 65.46\n    -------------------------------------------------------------------------\n    ```\n\n1. ### **To Suppress Errors**\n    ```py\n    import torch\n    import torch.nn as nn\n    from torchdescribe import describe\n\n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\n    class RNN(nn.Module):\n        def __init__(self):\n            super(RNN, self).__init__()\n            self.hidden_size = 20\n\n            self.embedding = nn.Embedding(10, 20)\n            self.gru = nn.GRU(20, 20)\n\n        def forward(self, input, hidden):\n            embedded = self.embedding(input).view(1, 1, -1)\n            output = embedded\n            output, hidden = self.gru(output, hidden)\n            return output, hidden\n\n\n    rnn = RNN().to(device)\n    describe(rnn, (3, 6), suppress_error=True)\n    ```\n    ```\n    --------------------------------------------------\n                        RNN\n    --------------------------------------------------\n    ==================================================\n\n    RNN(\n        (embedding): Embedding(10, 20)\n        (gru): GRU(20, 20)\n    )\n\n    ==================================================\n    --------------------------------------------------\n    Total parameters : 2,720\n    Trainable parameters : 2,720\n    Non-trainable parameters : 0\n    --------------------------------------------------\n    Model device : CPU\n    Batch size : 1\n    Input shape : (1, 3, 6)\n    Output shape : []\n    Input size (MB) : -1\n    Forward/backward pass size (MB) : -1\n    Params size (MB) : 0.01\n    Estimated Total Size (MB) : -1\n    --------------------------------------------------\n    ```\n\n## References\n* For Model Size Estimation help is taken from [here][model-size-estimation].\n* This project is inspired by [torchsummary][torchsummary-link].\n\n\n[torchsummary-link]: https://github.com/sksq96/pytorch-summary\n[model-size-estimation]: https://github.com/sksq96/pytorch-summary/blob/master/torchsummary/torchsummary.py\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vidit1999/pytorch-describe",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchdescribe",
    "package_url": "https://pypi.org/project/torchdescribe/",
    "platform": "",
    "project_url": "https://pypi.org/project/torchdescribe/",
    "project_urls": {
      "Homepage": "https://github.com/vidit1999/pytorch-describe"
    },
    "release_url": "https://pypi.org/project/torchdescribe/0.0.1/",
    "requires_dist": [
      "torch"
    ],
    "requires_python": ">=3.6",
    "summary": "Describe PyTorch model in PyTorch way",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10151943,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f237b1dc6e5cd5834174cd11d178912348af77ca3968449fe698ce80e314b25",
          "md5": "8412366f7a435d458386eccdb78edada",
          "sha256": "0b9762e3f0b4d4f59d067a0db1e6635ea0ccb0089f7d9da577786572bce775c6"
        },
        "downloads": -1,
        "filename": "torchdescribe-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8412366f7a435d458386eccdb78edada",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7024,
        "upload_time": "2021-04-23T14:22:51",
        "upload_time_iso_8601": "2021-04-23T14:22:51.242786Z",
        "url": "https://files.pythonhosted.org/packages/5f/23/7b1dc6e5cd5834174cd11d178912348af77ca3968449fe698ce80e314b25/torchdescribe-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f5c7a61464235d1f3cfbfe8558e8509d3aa0f0e2dd4f6a1d77f9961897b8cbe",
          "md5": "b475d2386006f3d4392eb37f65a2d2f3",
          "sha256": "7ab92d6fb95a12f8c4565a7e177ca93484c40ec83ae4b7f96dd6dd69622d3010"
        },
        "downloads": -1,
        "filename": "torchdescribe-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b475d2386006f3d4392eb37f65a2d2f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8963,
        "upload_time": "2021-04-23T14:22:52",
        "upload_time_iso_8601": "2021-04-23T14:22:52.826893Z",
        "url": "https://files.pythonhosted.org/packages/0f/5c/7a61464235d1f3cfbfe8558e8509d3aa0f0e2dd4f6a1d77f9961897b8cbe/torchdescribe-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f237b1dc6e5cd5834174cd11d178912348af77ca3968449fe698ce80e314b25",
        "md5": "8412366f7a435d458386eccdb78edada",
        "sha256": "0b9762e3f0b4d4f59d067a0db1e6635ea0ccb0089f7d9da577786572bce775c6"
      },
      "downloads": -1,
      "filename": "torchdescribe-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8412366f7a435d458386eccdb78edada",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7024,
      "upload_time": "2021-04-23T14:22:51",
      "upload_time_iso_8601": "2021-04-23T14:22:51.242786Z",
      "url": "https://files.pythonhosted.org/packages/5f/23/7b1dc6e5cd5834174cd11d178912348af77ca3968449fe698ce80e314b25/torchdescribe-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f5c7a61464235d1f3cfbfe8558e8509d3aa0f0e2dd4f6a1d77f9961897b8cbe",
        "md5": "b475d2386006f3d4392eb37f65a2d2f3",
        "sha256": "7ab92d6fb95a12f8c4565a7e177ca93484c40ec83ae4b7f96dd6dd69622d3010"
      },
      "downloads": -1,
      "filename": "torchdescribe-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b475d2386006f3d4392eb37f65a2d2f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8963,
      "upload_time": "2021-04-23T14:22:52",
      "upload_time_iso_8601": "2021-04-23T14:22:52.826893Z",
      "url": "https://files.pythonhosted.org/packages/0f/5c/7a61464235d1f3cfbfe8558e8509d3aa0f0e2dd4f6a1d77f9961897b8cbe/torchdescribe-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}