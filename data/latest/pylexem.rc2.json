{
  "info": {
    "author": "k.r. goger",
    "author_email": "k.r.goger+pylexem@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\n# pylexem - lexeme analysis scanner tokenizer\n\n`pylexem` is a 1-to-1 scanner and tokenizer with no-loss of information. \n\nif required extra whitespace information can be removed from the token stream easily (see sample).\n\n`pylexem` will create Token or \n[`Lexeme`](https://en.wikipedia.org/wiki/Lexical_analysis#Lexeme)\nwhere each token has a value and annotation depending on the matched lexical rule.\n\ninternally a look-ahead is used to produce the right lexeme\n\n\n# how to create / use lexical analysis rules\n\nlexical analysis is done by well formed rules where the  best one \n(greedy one) is used to produce the exact lexem.\n\nso it doesnt matter in which order rules are placed in the definition.\n\nE.G. the result of performing the rules for '=' and '==' will produce always the right '==' lexem\noutput when scanning an '==' from the stream since there is a look-ahead performed internally\nfor finding the greedy solution.\n\nfor creating custom lex rules refer also to the predefined set here: \n[`utils.py`](https://github.com/kr-g/pylexem/blob/main/pylexem/utils.py)\n\n\n# how to use\n\nrefer to [`sample.py`](https://github.com/kr-g/pylexem/blob/main/sample.py)\n\nrefer also to test cases in [`tests`](https://github.com/kr-g/pylexem/blob/main/tests)\n\n\ncode: (e.g.)\n\n\n    def test_float(self):\n        inp_text = \"\"\"\n            0. +0. .0 +.0 0.0 +0.1 0.0e-1 +0.0e-1 0.0e1 .0e1 -.0e1\n            \"\"\"\n        stream = self.lexx.tokenize(inp_text)\n        self.stream = Sanitizer().whitespace(stream)\n\n        res = list(map(lambda x: float(x[0]), self.stream))\n\n        self.assertEqual(\n            res,\n            [0.0, +0.0, 0.0, +0.0, 0.0, +0.1, 0.0e-1, +0.0e-1, 0.0e1, 0.0e1, -0.0e1],\n        )\n    \n\nor:\n\n        inp_text = \"\"\"\n            0. +0. .0 +.0 0.0 +0.1 0.0e-1 +0.0e-1 0.0e1 .0e1 -.0e1\n            \"\"\"\n        stream = self.lexx.tokenize(inp_text)\n        #self.stream = Sanitizer().whitespace(stream)\n    \n        for tok in self.stream:\n            print(tok)\n\n\n                ('\\n', 'LF')\n                ('0.', 'FLOAT')\n                (' ', 'BLANK')\n                ('+0.', 'FLOAT')\n                (' ', 'BLANK')\n                ('.0', 'FLOAT')\n                (' ', 'BLANK')\n                ('+.0', 'FLOAT')\n                (' ', 'BLANK')\n                ('0.0', 'FLOAT')\n                (' ', 'BLANK')\n                ('+0.1', 'FLOAT')\n                (' ', 'BLANK')\n                ('0.0e-1', 'FLOAT')\n                (' ', 'BLANK')\n                ('+0.0e-1', 'FLOAT')\n                (' ', 'BLANK')\n                ('0.0e1', 'FLOAT')\n                (' ', 'BLANK')\n                ('.0e1', 'FLOAT')\n                (' ', 'BLANK')\n                ('-.0e1', 'FLOAT')\n                ('\\n', 'LF')\n\n\nor another sample output (without coding):\n\n\n                ('\\n', 'LF')\n                ('    ', 'TABED') # 4 BLANK are replaced by 1 Token 'TABED'\n                ('    ', 'TABED') # dont like this TABED Token here? \n                ('    ', 'TABED') # dont add it to the lexer, then 4 BLANK are produced\n                ('-112', 'INT')\n                (' ', 'BLANK')\n                ('+110', 'INT')\n                (' ', 'BLANK')\n                ('110', 'UINT')  # UINT is different from INT !!!\n                (' ', 'BLANK')\n                ('\\n', 'LF')\n                ('    ', 'TABED')\n                ('    ', 'TABED')\n                ('    ', 'TABED')\n                ('(-2+1j)', 'COMPLEX_NUM') # new in version v0.0.2\n   \n\n# Platform\n\nTested on Python3, and Linux.\n\n\n# Development status\n\nalpha state.\nthe API or logical call flow might change without prior notice.\n\nread [`CHANGELOG`](https://github.com/kr-g/pylexem/blob/main/CHANGELOG.MD)\nfor latest, or upcoming news.\n\n\n# installation\n    \navailable on pypi. install with:\n\n    python3 -m pip install pylexem",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kr-g/pylexem",
    "keywords": "lex lexer lexem scanner tokenizer",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylexem",
    "package_url": "https://pypi.org/project/pylexem/",
    "platform": "",
    "project_url": "https://pypi.org/project/pylexem/",
    "project_urls": {
      "Homepage": "https://github.com/kr-g/pylexem"
    },
    "release_url": "https://pypi.org/project/pylexem/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "pylexem - python lexem analysis scanner tokenizer",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9969581,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dd6f95eaf893801a8eb26b5c216f1064b299b53a720253d8c88f765c704beba",
          "md5": "749f57575a73ad9faa5bec0bd00dee07",
          "sha256": "7dc0d6fe3dbfef1bcc3baf1b2410fd1ac4cb16976478855f5e080f6207eb2038"
        },
        "downloads": -1,
        "filename": "pylexem-0.0.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "749f57575a73ad9faa5bec0bd00dee07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13720,
        "upload_time": "2020-12-14T17:32:56",
        "upload_time_iso_8601": "2020-12-14T17:32:56.220214Z",
        "url": "https://files.pythonhosted.org/packages/5d/d6/f95eaf893801a8eb26b5c216f1064b299b53a720253d8c88f765c704beba/pylexem-0.0.1.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "180655341a5726443f01d3300389b8f179603f70dc0581810654b4f63381417c",
          "md5": "02d7ac38654f18bd6a5c2153e1b00421",
          "sha256": "25dfc4eae64091672ec0b7fd923712e7cc1cac81064a92fef0555cb0fdd38088"
        },
        "downloads": -1,
        "filename": "pylexem-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02d7ac38654f18bd6a5c2153e1b00421",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19186,
        "upload_time": "2020-12-14T17:32:54",
        "upload_time_iso_8601": "2020-12-14T17:32:54.161526Z",
        "url": "https://files.pythonhosted.org/packages/18/06/55341a5726443f01d3300389b8f179603f70dc0581810654b4f63381417c/pylexem-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97c11cb561652e8025098e19427c412adc25db47238a4506527b8725c021c938",
          "md5": "c9d21ce4a226693b998429afff0d778b",
          "sha256": "f68ca3af154d60b6b3faeda617046bc7f18a01e5ad9cb7a9de0f964635000493"
        },
        "downloads": -1,
        "filename": "pylexem-0.0.2.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "c9d21ce4a226693b998429afff0d778b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14232,
        "upload_time": "2021-04-04T07:55:46",
        "upload_time_iso_8601": "2021-04-04T07:55:46.613678Z",
        "url": "https://files.pythonhosted.org/packages/97/c1/1cb561652e8025098e19427c412adc25db47238a4506527b8725c021c938/pylexem-0.0.2.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97c11cb561652e8025098e19427c412adc25db47238a4506527b8725c021c938",
        "md5": "c9d21ce4a226693b998429afff0d778b",
        "sha256": "f68ca3af154d60b6b3faeda617046bc7f18a01e5ad9cb7a9de0f964635000493"
      },
      "downloads": -1,
      "filename": "pylexem-0.0.2.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "c9d21ce4a226693b998429afff0d778b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14232,
      "upload_time": "2021-04-04T07:55:46",
      "upload_time_iso_8601": "2021-04-04T07:55:46.613678Z",
      "url": "https://files.pythonhosted.org/packages/97/c1/1cb561652e8025098e19427c412adc25db47238a4506527b8725c021c938/pylexem-0.0.2.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}