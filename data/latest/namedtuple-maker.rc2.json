{
  "info": {
    "author": "Timothy Hull",
    "author_email": "timothyhull@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# `namedtuple` Maker\n\n![GitHub Actions Status](https://img.shields.io/github/workflow/status/wwt/devasc-data-formats/Markdown%20Linting?logo=github \"GitHub Actions Status\")\n\n## Easily Convert Python iterable objects into `namedtuple` objects\n\n### Contents\n\n- [Capabilities](#capabilities \"Capabilities\")\n- [Requirements](#requirements \"Requirements\")\n- [Installation](#installation \"Installation\")\n- [Usage](#usage \"Usage\")\n- [Background](#background \"Background\")\n- [`namedtuple` objects and The Zen of Python](#namedtuple-objects-and-the-zen-of-python \"The Zen of Python\")\n\n---\n\n### Capabilities\n\n- Converts Python iterable objects (`list`, `tuple`, `set`, etc.) into a `namedtuple` objects using a decorator function, **so you don't have to rewrite code that already returns iterable objects**.\n\n- Gathers `namedtuple` attribute names via either a `kwarg` in a decorated function or using prompts to collect attribute names.\n\n- Automatically corrects attribute name entries that would be invalid.\n\n---\n\n### Requirements\n\n- Python 3.9+\n\n---\n\n### Installation\n\nInstall via Python pip:\n\n```bash\npip install namedtuple-maker\n```\n\n---\n\n### Usage\n\n#### Usage as a Decorator\n\n<details><summary><b>Click to expand and view a decorator example</b></summary>\n\n1. Create an iterable object:\n\n    ```python\n    my_favorites = (\n        'pizza',\n        'summer',\n        'too personal'\n    )\n    ```\n\n2. Import the `convert_to_namedtuple` decorator function:\n\n    ```python\n    from namedtuple_maker.namedtuple_maker import named_tuple_converter\n    ```\n\n3. Create a function that returns an iterable object, and decorate that function with the `convert_to_namedtuple` decorator function:\n\n    ```python\n    @named_tuple_converter\n    def tuple_to_namedtuple(\n        iterable_input=my_favorites,\n        attribute_names=None\n    ):\n\n        return iterable_input\n    ```\n\n4. Call the `tuple_to_namedtuple` function:\n    - Pass an iterable object (the default `my_favorites` object, in this example) to the `iterable_input` parameter.\n    - By default, you will receive a prompt to provide an attribute name for each iterable input value.\n    - You may instead pass a separate iterable object of attribute names to the `attribute_names` parameter.\n\n    <details><summary>Option #1 - Enter attribute names using prompts:</summary>\n\n    ```python\n    # Call the tuple_to_namedtuple function and fill the attribute name prompts\n    my_named_favorites = tuple_to_namedtuple()\n    ```\n\n    ```text\n    Enter an attribute name for the value \"pizza\": food\n    Enter an attribute name for the value \"summer\": season\n    Enter an attribute name for the value \"too personal\": sports team\n    ```\n\n    </details>\n\n    <details><summary>Option #2 - Pass an iterable object of attribute names to the `attribute_names` parameter:</summary>\n\n    ```python\n    # Create an iterable object with attribute names\n    my_attributes = (\n        'food',\n        'season',\n        'sports team'\n    )\n\n    # Call the make_named_tuple function and pass in the attribute names\n    my_named_favorites = tuple_to_namedtuple(\n        attribute_names=my_attributes\n    )\n    ```\n\n    </details>\n\n5. Display the resulting `namedtuple` object:\n\n    ```python\n    print(my_named_favorites)\n    ```\n\n6. Observe the `print` function output:\n\n    ```text\n    NamedTuple(food='pizza', season='summer', sports_team='too personal')\n    ```\n\n</details>\n\n---\n\n#### Usage as a Function\n\n<details><summary><b>Click to expand and view a function usage example</b></summary>\n\n1. Create an iterable object:\n\n    ```python\n    my_favorites = (\n        'pizza',\n        'summer',\n        'too personal'\n    )\n    ```\n\n2. Import the `make_named_tuple` function:\n\n    ```python\n    from namedtuple_maker.namedtuple_maker import make_named_tuple\n    ```\n\n3. Call the `make_named_tuple` function:\n    - Pass an iterable object (the default `my_favorites` object, in this example) to the `iterable_input` parameter.\n    - By default, you will receive a prompt to provide an attribute name for each iterable input value.\n    - You may instead pass a separate iterable object of attribute names to the `attribute_names` parameter.\n\n    <details><summary>Option #1 - Enter attribute names using prompts:</summary>\n\n    ```python\n    # Call the make_named_tuple function and fill the attribute name prompts\n    my_named_favorites = make_named_tuple(\n        iterable_input=my_favorites\n    )\n    ```\n\n    ```text\n    Enter an attribute name for the value \"pizza\": food\n    Enter an attribute name for the value \"summer\": season\n    Enter an attribute name for the value \"too personal\": sports team\n    ```\n\n    </details>\n\n    <details><summary>Option #2 - Pass an iterable object of attribute names to the `attribute_names` parameter:</summary>\n\n    ```python\n    # Create an iterable object with attribute names\n    my_attributes = (\n        'food',\n        'season',\n        'sports team'\n    )\n\n    # Call the make_named_tuple function and pass in the attribute names\n    my_named_favorites = make_named_tuple(\n        iterable_input=my_favorites,\n        attribute_names=my_attributes\n    )\n    ```\n\n    </details>\n\n4. Display the resulting `namedtuple` object:\n\n    ```python\n    print(my_named_favorites)\n    ```\n\n5. Observe the `print` function output:\n\n    ```text\n    NamedTuple(food='pizza', season='summer', sports_team='too personal')\n    ```\n\n</details>\n\n---\n\n### Background\n\nPython `tuple` objects are great, right?  So are `list`, `set`, and many other iterable Python objects. However, accessing the values of an iterable object using arbitrary index numbers can make code difficult to read.  For example, the following `list` object stores data about the foods I might eat in a given day:\n\n```python\nmy_meals = [\n    'pizza',\n    'blueberry pancakes',\n    'granola',\n    'fruit smoothie',\n    'rice and beans'\n]\n```\n\nLet's say that I want to access values in the `list` object named `my_food`. I can do that by referencing one or more numeric **list indices** like this:\n\n```python\nprint('My Meals')\nprint('--------')\nprint(f'Breakfast: {my_meals[1]}\\n'\n      f'Snack: {my_meals[3]}\\n'\n      f'Lunch: {my_meals[4]}')\n```\n\nThe resulting output from this code is:\n\n```text\nMy Meals\n--------\nBreakfast: blueberry pancakes\nSnack: fruit smoothie\nLunch: rice and beans\n```\n\nThat works just fine, although it's not terribly intuitive to associate a `list` (or `tuple`) **index number** with a certain meal of the day, since this `list` doesn't have meals in any particular order. The list index assigned to each meal is _arbitrary_.\n\n---\n\n### The Python `namedtuple` Function\n\nThe `collections` module in the Python Standard Library includes the [`namedtuple` function](https://docs.python.org/3/library/collections.html#collections.namedtuple), which allows you to, as the name implies, create tuple-like objects with values that you can reference by name.  What does that mean, practically? Well, it means you can access the values in an iterable object by an _explicit_ **attribute name** that is much more meaningful than an _arbitrary_ **index number**.\n\nFor example, I'll recreate the `my_meals` data using a `namedtuple` object:\n\n1. First, import the `namedtuple` function from the `collections` module:\n\n    ```python\n    from collections import namedtuple\n    ```\n\n2. Next, create a new object type using the `namedtuple` function.\n    - Think of a `namedtuple` object like a `class` object with named attributes, but no methods.\n    - The `typename` parameter is an arbitrary name for the object class.\n    - The `field_names` parameter defines the attribute names for the new object.\n\n    ```python\n    Meals = namedtuple(\n        typename='Meals',\n        field_names=[\n            'breakfast',\n            'snack',\n            'lunch',\n            'dinner',\n            'dessert'\n        ]\n    )\n    ```\n\n3. Now, create an instance of the `Meals` object, and assign the individual foods to each of the named attributes (specified by the `field_names` parameter):\n\n    ```python\n    my_meals = Meals(\n        breakfast='blueberry pancakes',\n        snack='fruit smoothie',\n        lunch='rice and beans',\n        dinner='pizza',\n        dessert='granola'\n    )\n    ```\n\nWhen I want to access or display data from the `namedtuple` object named `my_meals`, my code will look something like this:\n\n```python\nprint('My Meals')\nprint('--------')\nprint(f'Breakfast: {my_meals.breakfast}\\n'\n      f'Snack: {my_meals.snack}\\n'\n      f'Lunch: {my_meals.lunch}')\n```\n\nThe result from this code looks exactly like it did in the first example:\n\n```text\nMy Meals\n--------\nBreakfast: blueberry pancakes\nSnack: fruit smoothie\nLunch: rice and beans\n```\n\nThe key difference between the `list` example and the `namedtuple` example is, accessing the values in the `namedtuple` object uses _explicit_ **named attributes** (`my_meals.lunch`), rather than _arbitrary_ **index numbers** (`my_meals[4]`).\n\nFor me, it's much easier to remember that the food I ate for breakfast is accessible as `my_foods.breakfast` within a `namedtuple` object, than it is to remember an arbitrary `list` index value like `my_foods[3]`.\n\n---\n\n### `namedtuple` objects and The Zen of Python\n\nThe [Zen of Python](https://www.python.org/dev/peps/pep-0020/ \"Zen of Python\") is a great guide for how to write clean and effective Python code. Below is an extract of some of the lines in the output of an `import this` command.\n\nThe intent of the `named-tuplemaker` package is to help Python developers write code that improves compliance with The Zen of Python by making it simple and easy to access iterable object values by _explicit_ **attribute names**, rather than _arbitrary_ **index numbers**.\n\n```text\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\n...\nReadability counts.\n...\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/timothyhull/namedtuple-maker",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "namedtuple-maker",
    "package_url": "https://pypi.org/project/namedtuple-maker/",
    "platform": "",
    "project_url": "https://pypi.org/project/namedtuple-maker/",
    "project_urls": {
      "Homepage": "https://github.com/timothyhull/namedtuple-maker"
    },
    "release_url": "https://pypi.org/project/namedtuple-maker/1.0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easily convert iterable objects into `namedtuple` objects.",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11392871,
  "releases": {
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c0590cc4cdf1c085587adb77cca6e059e10cb8b38cdfb8b7da64eb63c096994",
          "md5": "d835d2bc29d87c6300ea96710c29bc7e",
          "sha256": "5d6a139de3a3b65b2891e0c514d1e1adf9177bcf9cfa2dfb200f128fdb1bb04e"
        },
        "downloads": -1,
        "filename": "namedtuple_maker-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d835d2bc29d87c6300ea96710c29bc7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10592,
        "upload_time": "2021-08-31T18:59:23",
        "upload_time_iso_8601": "2021-08-31T18:59:23.214925Z",
        "url": "https://files.pythonhosted.org/packages/8c/05/90cc4cdf1c085587adb77cca6e059e10cb8b38cdfb8b7da64eb63c096994/namedtuple_maker-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a42f332512ae91801081c17c66fb5ccc9847d6c4747b183945e600529f0471a",
          "md5": "543d9dbe84e15dfb34a78e5c9cce301d",
          "sha256": "8502cf157c498f7cc91ccb59c72a59ccbdcd71012c006df6e90ab05df741cf3d"
        },
        "downloads": -1,
        "filename": "namedtuple-maker-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "543d9dbe84e15dfb34a78e5c9cce301d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10332,
        "upload_time": "2021-08-31T18:59:25",
        "upload_time_iso_8601": "2021-08-31T18:59:25.166330Z",
        "url": "https://files.pythonhosted.org/packages/7a/42/f332512ae91801081c17c66fb5ccc9847d6c4747b183945e600529f0471a/namedtuple-maker-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22459e92915e1c54d0951a334f91c0db80c00e88c4800da46082a20db7188169",
          "md5": "65eee4aeff770a5bf40790c8df338dc3",
          "sha256": "027ae2d81a972b357708dfee04e94876a6bf7ac9ec1d713de065d97c9202f728"
        },
        "downloads": -1,
        "filename": "namedtuple_maker-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65eee4aeff770a5bf40790c8df338dc3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10637,
        "upload_time": "2021-09-08T05:47:45",
        "upload_time_iso_8601": "2021-09-08T05:47:45.620126Z",
        "url": "https://files.pythonhosted.org/packages/22/45/9e92915e1c54d0951a334f91c0db80c00e88c4800da46082a20db7188169/namedtuple_maker-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a42ceef7ccbd777d64f1ec2cd9f39a734e0224c4da226046833736d4235a88f2",
          "md5": "538bd84a5a62f4c380a13349d57a1dca",
          "sha256": "1024d212fee484446ade99ca57867b7baa2a84cc9d34effa39df72346a7b24c5"
        },
        "downloads": -1,
        "filename": "namedtuple-maker-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "538bd84a5a62f4c380a13349d57a1dca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10395,
        "upload_time": "2021-09-08T05:47:46",
        "upload_time_iso_8601": "2021-09-08T05:47:46.942783Z",
        "url": "https://files.pythonhosted.org/packages/a4/2c/eef7ccbd777d64f1ec2cd9f39a734e0224c4da226046833736d4235a88f2/namedtuple-maker-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22459e92915e1c54d0951a334f91c0db80c00e88c4800da46082a20db7188169",
        "md5": "65eee4aeff770a5bf40790c8df338dc3",
        "sha256": "027ae2d81a972b357708dfee04e94876a6bf7ac9ec1d713de065d97c9202f728"
      },
      "downloads": -1,
      "filename": "namedtuple_maker-1.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65eee4aeff770a5bf40790c8df338dc3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10637,
      "upload_time": "2021-09-08T05:47:45",
      "upload_time_iso_8601": "2021-09-08T05:47:45.620126Z",
      "url": "https://files.pythonhosted.org/packages/22/45/9e92915e1c54d0951a334f91c0db80c00e88c4800da46082a20db7188169/namedtuple_maker-1.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a42ceef7ccbd777d64f1ec2cd9f39a734e0224c4da226046833736d4235a88f2",
        "md5": "538bd84a5a62f4c380a13349d57a1dca",
        "sha256": "1024d212fee484446ade99ca57867b7baa2a84cc9d34effa39df72346a7b24c5"
      },
      "downloads": -1,
      "filename": "namedtuple-maker-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "538bd84a5a62f4c380a13349d57a1dca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10395,
      "upload_time": "2021-09-08T05:47:46",
      "upload_time_iso_8601": "2021-09-08T05:47:46.942783Z",
      "url": "https://files.pythonhosted.org/packages/a4/2c/eef7ccbd777d64f1ec2cd9f39a734e0224c4da226046833736d4235a88f2/namedtuple-maker-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}