{
  "info": {
    "author": "chrstphr",
    "author_email": "corelay@j0d.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# CoRelAy &ndash; Composing Relevance Analysis\n\n![CoRelAy Logo](docs/images/corelay-logo.png)\n\n[![Documentation Status](https://readthedocs.org/projects/corelay/badge/?version=latest)](https://corelay.readthedocs.io/en/latest/?badge=latest)\n[![tests](https://github.com/virelay/corelay/actions/workflows/tests.yml/badge.svg)](https://github.com/virelay/corelay/actions/workflows/tests.yml)\n[![PyPI Version](https://img.shields.io/pypi/v/corelay)](https://pypi.org/project/corelay/)\n[![License](https://img.shields.io/pypi/l/corelay)](https://github.com/virelay/corelay/blob/master/COPYING.LESSER)\n\nCoRelAy is a tool to compose small-scale (single-machine) analysis pipelines.\nPipelines are designed with a number of steps (Task) with default operations (Processor).\nAny step of the pipeline may then be indiviually changed by assigning a new operator (Processor).\nProcessors have Params which define their operation.\n\nCoRelAy was created to quickly implement pipelines to generate analysis data\nwhich can then be visualized using ViRelAy.\n\nIf you find CoRelAy useful for your research, why not cite our related [paper](https://arxiv.org/abs/2106.13200):\n```\n@article{anders2021software,\n      author  = {Anders, Christopher J. and\n                 Neumann, David and\n                 Samek, Wojciech and\n                 MÃ¼ller, Klaus-Robert and\n                 Lapuschkin, Sebastian},\n      title   = {Software for Dataset-wide XAI: From Local Explanations to Global Insights with {Zennit}, {CoRelAy}, and {ViRelAy}},\n      journal = {CoRR},\n      volume  = {abs/2106.13200},\n      year    = {2021},\n}\n```\n\n## Documentation\nThe latest documentation is hosted at\n[corelay.readthedocs.io](https://corelay.readthedocs.io/en/latest/).\n\n\n## Install\nCoRelAy may be installed using pip with\n```shell\n$ pip install corelay\n```\n\nTo install optional HDBSCAN and UMAP support, use\n```shell\n$ pip install corelay[umap,hdbscan]\n```\n\n## Usage\nExamples to highlight some features of **CoRelAy** can be found in `example/`.\n\nWe mainly use HDF5 files to store results. The structure used by **ViRelAy** is documented in the **ViRelAy**\nrepository at `docs/database_specification.md`. An example to create HDF5 files which can be used with **ViRelAy** is\nshown in `example/hdf5_structure.py`\n\nTo do a full SpRAy analysis which can be visualized with **ViRelAy**, an advanced script can be found in\n`example/virelay_analysis.py`.\n\nThe following shows the contents of `example/memoize_spectral_pipeline.py`:\n\n```python\n'''Example using memoization to store (intermediate) results.'''\nimport time\n\nimport h5py\nimport numpy as np\n\nfrom corelay.base import Param\nfrom corelay.processor.base import Processor\nfrom corelay.processor.flow import Sequential, Parallel\nfrom corelay.pipeline.spectral import SpectralClustering\nfrom corelay.processor.clustering import KMeans\nfrom corelay.processor.embedding import TSNEEmbedding, EigenDecomposition\nfrom corelay.io.storage import HashedHDF5\n\n\n# custom processors can be implemented by defining a function attribute\nclass Flatten(Processor):\n    def function(self, data):\n        return data.reshape(data.shape[0], np.prod(data.shape[1:]))\n\n\nclass SumChannel(Processor):\n    # parameters can be assigned by defining a class-owned Param instance\n    axis = Param(int, 1)\n    def function(self, data):\n        return data.sum(1)\n\n\nclass Normalize(Processor):\n    def function(self, data):\n        data = data / data.sum((1, 2), keepdims=True)\n        return data\n\n\ndef main():\n    np.random.seed(0xDEADBEEF)\n    fpath = 'test.analysis.h5'\n    with h5py.File(fpath, 'a') as fd:\n        # HashedHDF5 is an io-object that stores outputs of Processors based on hashes in hdf5\n        iobj = HashedHDF5(fd.require_group('proc_data'))\n\n        # generate some exemplary data\n        data = np.random.normal(size=(64, 3, 32, 32))\n        n_clusters = range(2, 20)\n\n        # SpectralClustering is an Example for a pre-defined Pipeline\n        pipeline = SpectralClustering(\n            # processors, such as EigenDecomposition, can be assigned to pre-defined tasks\n            embedding=EigenDecomposition(n_eigval=8, io=iobj),\n            # flow-based Processors, such as Parallel, can combine multiple Processors\n            # broadcast=True copies the input as many times as there are Processors\n            # broadcast=False instead attempts to match each input to a Processor\n            clustering=Parallel([\n                Parallel([\n                    KMeans(n_clusters=k, io=iobj) for k in n_clusters\n                ], broadcast=True),\n                # io-objects will be used during computation when supplied to Processors\n                # if a corresponding output value (here identified by hashes) already exists,\n                # the value is not computed again but instead loaded from the io object\n                TSNEEmbedding(io=iobj)\n            ], broadcast=True, is_output=True)\n        )\n        # Processors (and Params) can be updated by simply assigning corresponding attributes\n        pipeline.preprocessing = Sequential([\n            SumChannel(),\n            Normalize(),\n            Flatten()\n        ])\n\n        start_time = time.perf_counter()\n\n        # Processors flagged with \"is_output=True\" will be accumulated in the output\n        # the output will be a tree of tuples, with the same hierachy as the pipeline\n        # (i.e. clusterings here contains a tuple of the k-means outputs)\n        clusterings, tsne = pipeline(data)\n\n        # since we memoize our results in a hdf5 file, subsequent calls will not compute\n        # the values (for the same inputs), but rather load them from the hdf5 file\n        # try running the script multiple times\n        duration = time.perf_counter() - start_time\n        print(f'Pipeline execution time: {duration:.4f} seconds')\n\n\nif __name__ == '__main__':\n    main()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/virelay/corelay",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "corelay",
    "package_url": "https://pypi.org/project/corelay/",
    "platform": null,
    "project_url": "https://pypi.org/project/corelay/",
    "project_urls": {
      "Homepage": "https://github.com/virelay/corelay"
    },
    "release_url": "https://pypi.org/project/corelay/0.2.1/",
    "requires_dist": [
      "h5py (>=2.9.0)",
      "matplotlib (>=3.0.3)",
      "numpy (>=1.16.3)",
      "scikit-learn (>=0.20.3)",
      "scipy (>=1.2.1)",
      "Click (>=7.0)",
      "scikit-image (>=0.18.0)",
      "metrohash-python (>=1.1.3.post2)",
      "sphinx-copybutton (>=0.4.0) ; extra == 'docs'",
      "sphinx-rtd-theme (>=1.0.0) ; extra == 'docs'",
      "sphinxcontrib.datatemplates (>=0.9.0) ; extra == 'docs'",
      "sphinxcontrib.bibtex (>=2.4.1) ; extra == 'docs'",
      "hdbscan (>=0.8.22) ; extra == 'hdbscan'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "umap-learn (>=0.3.9) ; extra == 'umap'"
    ],
    "requires_python": ">=3.7",
    "summary": "Quickly compose single-machine analysis pipelines.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14200100,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1c3be29fb4f70aac0d6eae597738613503411196b6ca5e3a9b5980d4ec9fa50",
          "md5": "105d2793d93c519141e6f44a160e50e4",
          "sha256": "5f50e7bcfc090d986a71fe4bcf51a9d87113f44d2212e7efeeea0aa0bdccfe59"
        },
        "downloads": -1,
        "filename": "corelay-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "105d2793d93c519141e6f44a160e50e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 44623,
        "upload_time": "2021-06-29T09:51:13",
        "upload_time_iso_8601": "2021-06-29T09:51:13.054788Z",
        "url": "https://files.pythonhosted.org/packages/b1/c3/be29fb4f70aac0d6eae597738613503411196b6ca5e3a9b5980d4ec9fa50/corelay-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9074766e82b15fddad98bf52ddd5fcd9888c4501435044a61ecc6f6ad08b065a",
          "md5": "3075723b390088aa6993784093f23735",
          "sha256": "1d53df6840d79e328cadb9bde99671e28381326249ff3b1166f533ade1868627"
        },
        "downloads": -1,
        "filename": "corelay-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3075723b390088aa6993784093f23735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62595,
        "upload_time": "2021-06-29T09:51:14",
        "upload_time_iso_8601": "2021-06-29T09:51:14.511878Z",
        "url": "https://files.pythonhosted.org/packages/90/74/766e82b15fddad98bf52ddd5fcd9888c4501435044a61ecc6f6ad08b065a/corelay-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de7a03ffe5cdefbd16ea1082dfad104c5898e652a86b7843d5a68553998c19e1",
          "md5": "c4df79a02db4ed9171f1f97f647b74c8",
          "sha256": "e8d8f8391d0938a0d5dafe73c4643d402cc2b0f1d5354083a5d92f6ef8f2d1fa"
        },
        "downloads": -1,
        "filename": "corelay-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4df79a02db4ed9171f1f97f647b74c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 45036,
        "upload_time": "2022-06-21T15:04:18",
        "upload_time_iso_8601": "2022-06-21T15:04:18.021700Z",
        "url": "https://files.pythonhosted.org/packages/de/7a/03ffe5cdefbd16ea1082dfad104c5898e652a86b7843d5a68553998c19e1/corelay-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5045ad26be750b012570af9e766d7d71fad7cbd431054d96a3255bf732c18949",
          "md5": "6aa53a73bad3c5195991efd419c641d8",
          "sha256": "3d5113fbc50c5c9fd102ad1b18c7f620584cdcc02486f65625586eb3620f4280"
        },
        "downloads": -1,
        "filename": "corelay-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6aa53a73bad3c5195991efd419c641d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 154123,
        "upload_time": "2022-06-21T15:04:19",
        "upload_time_iso_8601": "2022-06-21T15:04:19.708519Z",
        "url": "https://files.pythonhosted.org/packages/50/45/ad26be750b012570af9e766d7d71fad7cbd431054d96a3255bf732c18949/corelay-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de7a03ffe5cdefbd16ea1082dfad104c5898e652a86b7843d5a68553998c19e1",
        "md5": "c4df79a02db4ed9171f1f97f647b74c8",
        "sha256": "e8d8f8391d0938a0d5dafe73c4643d402cc2b0f1d5354083a5d92f6ef8f2d1fa"
      },
      "downloads": -1,
      "filename": "corelay-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4df79a02db4ed9171f1f97f647b74c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 45036,
      "upload_time": "2022-06-21T15:04:18",
      "upload_time_iso_8601": "2022-06-21T15:04:18.021700Z",
      "url": "https://files.pythonhosted.org/packages/de/7a/03ffe5cdefbd16ea1082dfad104c5898e652a86b7843d5a68553998c19e1/corelay-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5045ad26be750b012570af9e766d7d71fad7cbd431054d96a3255bf732c18949",
        "md5": "6aa53a73bad3c5195991efd419c641d8",
        "sha256": "3d5113fbc50c5c9fd102ad1b18c7f620584cdcc02486f65625586eb3620f4280"
      },
      "downloads": -1,
      "filename": "corelay-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6aa53a73bad3c5195991efd419c641d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 154123,
      "upload_time": "2022-06-21T15:04:19",
      "upload_time_iso_8601": "2022-06-21T15:04:19.708519Z",
      "url": "https://files.pythonhosted.org/packages/50/45/ad26be750b012570af9e766d7d71fad7cbd431054d96a3255bf732c18949/corelay-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}