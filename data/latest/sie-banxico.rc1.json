{
  "info": {
    "author": "Dillan Aguirre Sedeño",
    "author_email": "dillan.as22@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sie_banxico #\n\nA python class for the Economic Information System (SIE) [API of Banco de México](https://www.banxico.org.mx/SieAPIRest/service/v1/?locale=en).\n\nArgs:\n    token (str): A query token from Banco de México\n    id_series (list): A list with the economic series id or with the series id range to query.  ** A list must be given even though only one serie is consulted.\n    language (str): Language of the obtained information. 'en' (default) for english or 'es' for spanish\n\nNotes: \n    (1) In order to retrive information from the SIE API, a query token is required. The token can be requested [here](https://www.banxico.org.mx/SieAPIRest/service/v1/token)\n    (2) Each economic serie is related to an unique ID. The full series catalogue can be consulted [here](https://www.banxico.org.mx/SieAPIRest/service/v1/doc/catalogoSeries) \n\n## Pypi Installation ##\n\n```python\npip install sie_banxico\n```\n\n## SIEBanxico Class Instance ##\n\nQuerying Monetary Aggregates M1 (SF311408) and M2 (SF311418) Data\n\n```python\n >>> from api_banxico import SIEBanxico\n >>> api = SIEBanxico(token = token, id_series = ['SF311408' ,'SF311418'], language = 'en')\n```\n\n## Class documentation and attributes ##\n\n```python\n>>> api.__doc__\n'Returns the full class documentation'\n>>> api.token\n'1b7da065cf574289a2cb511faeXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' # This is an example token\n>>> api.series\n'SF311408,SF311418'\n```\n\n## Methods for modify the arguments of the object ##\n### set_token: Change the current query token ###\n\n```python\n>>> api.set_token(token = new_token)\n```\n\n### set_id_series: Allows to change the series to query ###\n\n```python\n>>> api.append_id_series(id_series = ['SF311412'])\n>>> api.series\n'SF311408,SF311418,SF311412'\n```\n\n### append_id_series: Allows to update the series to query ###\n\n```python\n>>> api.set_id_series(id_series='SF311408-SF311418')\n>>> api.series\n'SF311408-SF311418'\n```\n\n## GET Request Methods ##\n\n```python\n>>> api = SIEBanxico(token = token, id_series = ['SF311408' ,'SF311418']\n```\n\n### get_metadata: Allows to consult metadata of the series ###\n        Allows to consult metadata of the series.\n        Returns:\n            dict: json response format\n\n```python\n>>> api.get_metadata()\n{'bmx': {'series': [{'idSerie': 'SF311418', 'titulo': 'Monetary Aggregates M2 = M1 + monetary instruments held by residents', 'fechaInicio': '12/01/2000', 'fechaFin': '11/01/2021', 'periodicidad': 'Monthly', 'cifra': 'Stocks', 'unidad': 'Thousands of Pesos', 'versionada': False}, {'idSerie': 'SF311408', 'titulo': 'Monetary Aggregates M1', 'fechaInicio': '12/01/2000', 'fechaFin': '11/01/2021', 'periodicidad': 'Monthly', 'cifra': 'Stocks', 'unidad': 'Thousands of Pesos', 'versionada': False}]}}\n```\n\n### get_lastdata: Returns the most recent published data ###\nReturns the most recent published data for the requested series.\n        Args:\n            pct_change (str, optional): None (default) for levels, \"PorcObsAnt\" for change rate compared to the previous observation, \"PorcAnual\" for anual change rate, \"PorcAcumAnual\" for annual acummulated change rate.\n        Returns:\n            dict: json response format\n\n```python\n>>> api.get_lastdata()\n{'bmx': {'series': [{'idSerie': 'SF311418', 'titulo': 'Monetary Aggregates M2 = M1 + monetary instruments held by residents', 'datos': [{'fecha': '01/11/2021', 'dato': '11,150,071,721.09'}]}, {'idSerie': 'SF311408', 'titulo': 'Monetary Aggregates M1', 'datos': [{'fecha': '01/11/2021', 'dato': '6,105,266,291.65'}]}]}}\n```\n\n### get_timeseries: Allows to consult time series data ###\n        Allows to consult the whole time series data, corresponding to the period defined between the initial date and the final date in the metadata.\n        Args:\n            pct_change (str, optional): None (default) for levels, \"PorcObsAnt\" for change rate compared to the previous observation, \"PorcAnual\" for anual change rate, \"PorcAcumAnual\" for annual acummulated change rate.\n        Returns:\n            dict: json response format\n\n```python\n>>> api.get_timeseries(pct_change='PorcAnual')\n{'bmx': {'series': [{'idSerie': 'SF311418',\n    'titulo': 'Monetary Aggregates M2 = M1 + monetary instruments held by residents',\n    'datos': [{'fecha': '01/12/2001', 'dato': '12.89'},\n     {'fecha': '01/01/2002', 'dato': '13.99'},\n     ...\n     {'fecha': '01/11/2021', 'dato': '13.38'}],\n     'incrementos': 'PorcAnual'}]}}\n```\n\n### get_timeseries_range: Returns the data for the period defined ###\n        Returns the data of the requested series, for the defined period.\n        Args:\n            init_date (str): The date on which the period of obtained data starts. The date must be sent in the format yyyy-mm-dd. If the given date is out of the metadata time range, the oldest value is returned.\n            end_date (str): The date on which the period of obtained data concludes. The date must be sent in the format yyyy-mm-dd. If the given date is out of the metadata time range, the most recent value is returned.\n            pct_change (str, optional): None (default) for levels, \"PorcObsAnt\" for change rate compared to the previous observation, \"PorcAnual\" for anual change rate, \"PorcAcumAnual\" for annual acummulated change rate.     \n        Returns:\n            dict: json response format\n\n```python\n>>> api.get_timeseries_range(init_date='2000-12-31', end_date='2004-04-01')\n{'bmx': {'series': [{'idSerie': 'SF311408',\n    'titulo': 'Monetary Aggregates M1',\n    'datos': [{'fecha': '01/01/2001', 'dato': '524,836,129.99'},\n     {'fecha': '01/02/2001', 'dato': '517,186,605.97'},\n     ...\n     {'fecha': '01/04/2004', 'dato': '2,306,755,672.89'}]}]}}\n```\n## Pandas integration for data manipulation (and further analysis) ##\nAll the request methods returns a response in json format that can be used with other Python libraries.\n\nThe response for the api.get_timeseries_range(init_date='2000-12-31', end_date='2004-04-01') is a nested dictionary, so we need to follow a path to extract the specific values for the series and then transform the data into a pandas object; like a Serie or a DataFrame. For example:\n\n```python\ndata = api.get_timeseries_range(init_date='2000-12-31', end_date='2004-04-01')\n\n# Extract the Monetary Aggregate M1 data\ndata['bmx']['series'][0]['datos']\n[{'fecha': '01/01/2001', 'dato': '524,836,129.99'},\n ...\n {'fecha': '01/04/2004', 'dato': '799,774,807.43'}]\n\n# Transform the data into a pandas DataDrame\nimport pandas as pd\ndf = pd.DataFrame(timeseries_range['bmx']['series'][0]['datos'])\ndf.head()\n        fecha            dato\n0  01/01/2001  524,836,129.99\n1  01/02/2001  517,186,605.97\n2  01/03/2001  509,701,873.04\n3  01/04/2001  511,952,430.01\n4  01/05/2001  514,845,459.96\n```\n\nAnother useful pandas function to transform json formats into a dataframe is 'json_normalize':\n\n```python\ndf = pd.json_normalize(timeseries_range['bmx']['series'], record_path = 'datos', meta = ['idSerie', 'titulo'])\ndf['titulo'] = df['titulo'].apply(lambda x: x.replace('Monetary Aggregates M2 = M1 + monetary instruments held by residents', 'Monetary Aggregates M2'))\ndf.head()\n        fecha            dato   idSerie                  titulo\n0  01/01/2001  524,836,129.99  SF311408  Monetary Aggregates M1\n1  01/02/2001  517,186,605.97  SF311408  Monetary Aggregates M1\n2  01/03/2001  509,701,873.04  SF311408  Monetary Aggregates M1\n3  01/04/2001  511,952,430.01  SF311408  Monetary Aggregates M1\n4  01/05/2001  514,845,459.96  SF311408  Monetary Aggregates M1\ndf.tail()\n         fecha              dato   idSerie                  titulo\n75  01/12/2003  2,331,594,974.69  SF311418  Monetary Aggregates M2\n76  01/01/2004  2,339,289,328.74  SF311418  Monetary Aggregates M2\n77  01/02/2004  2,285,732,239.36  SF311418  Monetary Aggregates M2\n78  01/03/2004  2,312,217,167.10  SF311418  Monetary Aggregates M2\n79  01/04/2004  2,306,755,672.89  SF311418  Monetary Aggregates M2\n```\n\n## Licence ##\nThe MIT License (MIT)\n\n## By ##\nDillan Aguirre Sedeño\n(dillan.as22@gmail.com)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DillanAS/sie_banxico",
    "keywords": "python,api,economic data,banxico,mexico",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sie-banxico",
    "package_url": "https://pypi.org/project/sie-banxico/",
    "platform": "",
    "project_url": "https://pypi.org/project/sie-banxico/",
    "project_urls": {
      "Connect with me!": "https://www.linkedin.com/in/dillanas22/",
      "Homepage": "https://github.com/DillanAS/sie_banxico",
      "Source": "https://github.com/DillanAS/",
      "Tracker": "https://github.com/DillanAS/sie_banxico/issues"
    },
    "release_url": "https://pypi.org/project/sie-banxico/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A python class for the Economic Information System (SIE) API of Banco de México.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12455459,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1be3e66b06977f428190a7b1e08cfe33483ac2d38e8e0472818ffaa8cd023ac",
          "md5": "68d0955b25755cd97cdd400fe03d1df8",
          "sha256": "8f0d7df1e9a7f78eafcdec7aab635018eadf82af4e7ee0beb2c8748a14412214"
        },
        "downloads": -1,
        "filename": "sie_banxico-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68d0955b25755cd97cdd400fe03d1df8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6940,
        "upload_time": "2022-01-02T00:18:03",
        "upload_time_iso_8601": "2022-01-02T00:18:03.066842Z",
        "url": "https://files.pythonhosted.org/packages/c1/be/3e66b06977f428190a7b1e08cfe33483ac2d38e8e0472818ffaa8cd023ac/sie_banxico-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3461a45213ed5b660f321b0d83e8eb5e4db16354f7f33e6790f2cfcb60cdf6df",
          "md5": "74bf736eb9daf3a802c345d90529ffcf",
          "sha256": "0d6d089934ba8a21e287ff46a37afc7b6c9a89521c245edbea4c6b18dcfd6beb"
        },
        "downloads": -1,
        "filename": "sie_banxico-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "74bf736eb9daf3a802c345d90529ffcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6389,
        "upload_time": "2022-01-02T00:18:05",
        "upload_time_iso_8601": "2022-01-02T00:18:05.749349Z",
        "url": "https://files.pythonhosted.org/packages/34/61/a45213ed5b660f321b0d83e8eb5e4db16354f7f33e6790f2cfcb60cdf6df/sie_banxico-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1be3e66b06977f428190a7b1e08cfe33483ac2d38e8e0472818ffaa8cd023ac",
        "md5": "68d0955b25755cd97cdd400fe03d1df8",
        "sha256": "8f0d7df1e9a7f78eafcdec7aab635018eadf82af4e7ee0beb2c8748a14412214"
      },
      "downloads": -1,
      "filename": "sie_banxico-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68d0955b25755cd97cdd400fe03d1df8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6940,
      "upload_time": "2022-01-02T00:18:03",
      "upload_time_iso_8601": "2022-01-02T00:18:03.066842Z",
      "url": "https://files.pythonhosted.org/packages/c1/be/3e66b06977f428190a7b1e08cfe33483ac2d38e8e0472818ffaa8cd023ac/sie_banxico-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3461a45213ed5b660f321b0d83e8eb5e4db16354f7f33e6790f2cfcb60cdf6df",
        "md5": "74bf736eb9daf3a802c345d90529ffcf",
        "sha256": "0d6d089934ba8a21e287ff46a37afc7b6c9a89521c245edbea4c6b18dcfd6beb"
      },
      "downloads": -1,
      "filename": "sie_banxico-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "74bf736eb9daf3a802c345d90529ffcf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6389,
      "upload_time": "2022-01-02T00:18:05",
      "upload_time_iso_8601": "2022-01-02T00:18:05.749349Z",
      "url": "https://files.pythonhosted.org/packages/34/61/a45213ed5b660f321b0d83e8eb5e4db16354f7f33e6790f2cfcb60cdf6df/sie_banxico-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}