{
  "info": {
    "author": "Microsoft Corporation",
    "author_email": "azpysdkhelp@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Azure Communication Chat Package client library for Python\n\nThis package contains a Python SDK for Azure Communication Services for Chat.\nRead more about Azure Communication Services [here](https://docs.microsoft.com/azure/communication-services/overview)\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-chat) | [Package (Pypi)](https://pypi.org/project/azure-communication-chat/) | [API reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-communication-chat/1.0.0b5/index.html) | [Product documentation](https://docs.microsoft.com/azure/communication-services/)\n\n# Getting started\n\n## Prerequisites\n\n- Python 2.7, or 3.6 or later is required to use this package.\n- A deployed Communication Services resource. You can use the [Azure Portal](https://docs.microsoft.com/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp) or the [Azure PowerShell](https://docs.microsoft.com/powershell/module/az.communication/new-azcommunicationservice) to set it up.\n\n## Install the package\n\nInstall the Azure Communication Service Chat SDK.\n\n```bash\npip install --pre azure-communication-chat\n```\n\n## User Access Tokens\n\nUser access tokens enable you to build client applications that directly authenticate to Azure Communication Services. You can generate these tokens with azure.communication.identity module, and then use them to initialize the Communication Services SDKs. Example of using azure.communication.identity:\n\n```bash\npip install --pre azure-communication-identity\n```\n\n```python\nfrom azure.communication.identity import CommunicationIdentityClient\nidentity_client = CommunicationIdentityClient.from_connection_string(\"<connection string of your Communication service>\")\nuser = identity_client.create_user()\ntokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\ntoken = tokenresponse.token\n```\n\nThe `user` created above will be used later, because that user should be added as a participant of new chat thread when you creating\nit with this token. It is because the initiator of the create request must be in the list of the participants of the chat thread.\n\n## Create the Chat Client\n\nThis will allow you to create, get, list or delete chat threads.\n\n```python\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential\n\n# Your unique Azure Communication service endpoint\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n```\n\n## Create Chat Thread Client\n\nThe ChatThreadClient will allow you to perform operations specific to a chat thread, like send message, get message, update\nthe chat thread topic, add participants to chat thread, etc.\n\nYou can get it by creating a new chat thread using ChatClient:\n\n```python\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\nAdditionally, the client can also direct so that the request is repeatable; that is, if the client makes the\nrequest multiple times with the same Idempotency-Token and it will get back an appropriate response without\nthe server executing the request multiple times. The value of the Idempotency-Token is an opaque string\nrepresenting a client-generated, globally unique for all time, identifier for the request.\n\n```python\ncreate_chat_thread_result = chat_client.create_chat_thread(\n    topic,\n    thread_participants=thread_participants,\n    idempotency_token=idempotency_token\n)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\nAlternatively, if you have created a chat thread before and you have its thread_id, you can create it by:\n\n```python\nchat_thread_client = chat_client.get_chat_thread_client(thread_id) # thread_id is the id of an existing chat thread\n```\n\n# Key concepts\n\nA chat conversation is represented by a chat thread. Each user in the thread is called a thread participant.\nThread participants can chat with one another privately in a 1:1 chat or huddle up in a 1:N group chat.\nUsers also get near real-time updates for when others are typing and when they have read the messages.\n\nOnce you initialized a `ChatClient` class, you can do the following chat operations:\n\n## Create, get, update, and delete threads\n\nPerform CRD(Create-Read-Delete) operations on threads\n\n```Python\ncreate_chat_thread(topic, **kwargs)\nlist_chat_threads(**kwargs)\ndelete_chat_thread(thread_id, **kwargs)\n```\n\nOnce you initialized a `ChatThreadClient` class, you can do the following chat operations:\n\n## Update thread\n\nPerform Update operation on thread topic\n\n```python\nupdate_topic(topic, **kwargs)\n```\n\n## Get Chat thread properties\n```python\nget_properties(**kwargs)\n```\n\n## Send, get, update, and delete messages\n\nPerform CRUD(Create-Read-Update-Delete) operations on messages\n\n```Python\nsend_message(content, **kwargs)\nget_message(message_id, **kwargs)\nlist_messages(**kwargs)\nupdate_message(message_id, content, **kwargs)\ndelete_message(message_id, **kwargs)\n```\n\n## Get, add, and remove participants\n\nPerform CRD(Create-Read-Delete) operations on thread participants\n\n```Python\nlist_participants(**kwargs)\nadd_participants(thread_participants, **kwargs)\nremove_participant(participant_identifier, **kwargs)\n```\n\n## Send typing notification\n\nNotify the service of typing notification\n\n```python\nsend_typing_notification(**kwargs)\n```\n\n## Send and get read receipt\n\nNotify the service that a message is read and get list of read messages.\n\n```Python\nsend_read_receipt(message_id, **kwargs)\nlist_read_receipts(**kwargs)\n```\n\n# Examples\n\nThe following sections provide several code snippets covering some of the most common tasks, including:\n\n- [Thread Operations](#thread-operations)\n- [Message Operations](#message-operations)\n- [Thread Participant Operations](#thread-participant-operations)\n- [Events Operations](#events-operations)\n\n## Thread Operations\n\n### Create a thread\n\nUse the `create_chat_thread` method to create a chat thread.\n\n- Use `topic`, required, to give a thread topic;\n- Use `thread_participants`, optional, to provide a list the `ChatParticipant` to be added to the thread;\n    - `user`, required, it is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user()\n      from User Access Tokens\n    <!-- [User Access Tokens](#user-access-tokens) -->\n    - `display_name`, optional, is the display name for the thread participant.\n    - `share_history_time`, optional, time from which the chat history is shared with the participant.\n- Use `idempotency_token`, optional, to specify the unique identifier for the request.\n\n\n`CreateChatThreadResult` is the result returned from creating a thread, you can use it to fetch the `id` of\nthe chat thread that got created. This `id` can then be used to fetch a `ChatThreadClient` object using\nthe `get_chat_thread_client` method. `ChatThreadClient` can be used to perform other chat operations to this chat thread.\n\n```Python\n# Without idempotency_token and thread_participants\ntopic = \"test topic\"\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n```\n\n```Python\n# With idempotency_token and thread_participants\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.chat import ChatParticipant, ChatClient, CommunicationTokenCredential\nimport uuid\nfrom datetime import datetime\n\n# create an user\nidentity_client = CommunicationIdentityClient.from_connection_string('<connection_string>')\nuser = identity_client.create_user()\n\n# user access tokens\ntokenresponse = identity_client.get_token(user, scopes=[\"chat\"])\ntoken = tokenresponse.token\n\n## OR pass existing user\n# from azure.communication.chat import CommunicationUserIdentifier\n# user_id = 'some_user_id'\n# user = CommunicationUserIdentifier(user_id)\n\n# create the chat_client\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n# modify function to implement customer logic\ndef get_unique_identifier_for_request(**kwargs):\n    res = uuid.uuid4()\n    return res\n\ntopic = \"test topic\"\nthread_participants = [ChatParticipant(\n    identifier=user,\n    display_name='name',\n    share_history_time=datetime.utcnow()\n)]\n\n# obtains idempotency_token using some customer logic\nidempotency_token = get_unique_identifier_for_request()\n\ncreate_chat_thread_result = chat_client.create_chat_thread(\n    topic,\n    thread_participants=thread_participants,\n    idempotency_token=idempotency_token)\nthread_id = create_chat_thread_result.chat_thread.id\n\n# fetch ChatThreadClient\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\n# Additionally, you can also check if all participants were successfully added or not\n# and subsequently retry adding the failed participants again\ndef decide_to_retry(error, **kwargs):\n    \"\"\"\n    Insert some custom logic to decide if retry is applicable based on error\n    \"\"\"\n    return True\n\nretry = [thread_participant for thread_participant, error in create_chat_thread_result.errors if decide_to_retry(error)]\nif retry:\n    chat_thread_client.add_participants(retry)\n```\n\n\n### Get a thread\n\nUse `get_properties` method retrieves a `ChatThreadProperties` from the service; `thread_id` is the unique ID of the thread.\n\n```Python\nchat_thread_properties = chat_thread_client.get_properties()\n```\n\n### List chat threads\nUse `list_chat_threads` method retrieves the list of created chat threads\n\n- Use `results_per_page`, optional, The maximum number of messages to be returned per page.\n- Use `start_time`, optional, The start time where the range query.\n\nAn iterator of `[ChatThreadItem]` is the response returned from listing threads\n\n```python\nfrom azure.communication.chat import ChatClient, CommunicationTokenCredential\nfrom datetime import datetime, timedelta\n\ntoken = \"<token>\"\nendpoint = \"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nchat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\nstart_time = datetime.utcnow() - timedelta(days=2)\n\nchat_threads = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)\nfor chat_thread_item_page in chat_threads.by_page():\n    for chat_thread_item in chat_thread_item_page:\n        print(\"thread id:\", chat_thread_item.id)\n```\n\n### Update a thread topic\n\nUse `update_topic` method to update a thread's properties. `topic` is used to describe the change of the thread topic\n- Use `topic` to give thread a new topic;\n\n```python\ntopic = \"new topic\"\nchat_thread_client.update_topic(topic=topic)\n\nchat_thread = chat_thread_client.get_properties(thread_id)\n\nassert chat_thread.topic == topic\n```\n\n### Delete a thread\n\nUse `delete_chat_thread` method to delete a thread; `thread_id` is the unique ID of the thread.\n- Use `thread_id`, required, to specify the unique ID of the thread.\n```Python\nchat_client.delete_chat_thread(thread_id=thread_id)\n```\n\n## Message Operations\n\n### Send a message\n\nUse `send_message` method to sends a message to a thread identified by `thread_id`.\n\n- Use `content`, required, to provide the chat message content.\n- Use `chat_message_type`, optional, to provide the chat message type. Possible values include: `ChatMessageType.TEXT`,\n  `ChatMessageType.HTML`, `'text'`, `'html'`; if not specified, `ChatMessageType.TEXT` will be set\n- Use `sender_display_name`,optional, to specify the display name of the sender, if not specified, empty name will be set\n\n`SendChatMessageResult` is the response returned from sending a message, it contains an id, which is the unique ID of the message.\n\n```Python\nfrom azure.communication.chat import ChatMessageType\n\ntopic = \"test topic\"\ncreate_chat_thread_result = chat_client.create_chat_thread(topic)\nthread_id = create_chat_thread_result.chat_thread.id\nchat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\ncontent='hello world'\nsender_display_name='sender name'\nchat_message_type = ChatMessageType.TEXT\n\n# without specifying sender_display_name and chat_message_type\nsend_message_result = chat_thread_client.send_message(content)\nsend_message_result_id = send_message_result.id\nprint(\"Message sent: id: \", send_message_result_id)\n\n# specifying sender_display_name and chat_message_type\nsend_message_result_w_type = chat_thread_client.send_message(\n            content,\n            sender_display_name=sender_display_name,\n            chat_message_type=chat_message_type # equivalent to chat_message_type = 'text'\n)\nsend_message_result_w_type_id = send_message_result_w_type.id\nprint(\"Message sent: id: \", send_message_result_w_type_id)\n```\n\n### Get a message\n\nUse `get_message` method retrieves a message from the service; `message_id` is the unique ID of the message.\n- Use `message_id`,required, to specify message id of an existing message\n`ChatMessage` is the response returned from getting a message, it contains an id, which is the unique ID of the message, and other fields please refer to azure.communication.chat.ChatMessage\n\n```python\nchat_message = chat_thread_client.get_message(message_id=send_message_result_id)\nprint(\"get_chat_message succeeded, message id:\", chat_message.id, \"content: \", chat_message.content)\n```\n\n### List messages\n\nUse `list_messages` method retrieves messages from the service.\n- Use `results_per_page`, optional, The maximum number of messages to be returned per page.\n- Use `start_time`, optional, The start time where the range query.\n\nAn iterator of `[ChatMessage]` is the response returned from listing messages\n\n```Python\nfrom datetime import datetime, timedelta\n\nstart_time = datetime.utcnow() - timedelta(days=1)\n\nchat_messages = chat_thread_client.list_messages(results_per_page=1, start_time=start_time)\nfor chat_message_page in chat_messages.by_page():\n    for chat_message in chat_message_page:\n        print(\"ChatMessage: Id=\", chat_message.id, \"; Content=\", chat_message.content.message)\n```\n\n### Update a message\n\nUse `update_message` to update a message identified by threadId and messageId.\n- Use `message_id`,required, is the unique ID of the message.\n- Use `content`, optional, is the message content to be updated; if not specified it is assigned to be empty\n\n```Python\ncontent = \"updated message content\"\nchat_thread_client.update_message(send_message_result_id, content=content)\n\nchat_message = chat_thread_client.get_message(message_id=send_message_result_id)\n\nassert chat_message.content.message == content\n```\n\n### Delete a message\n\nUse `delete_message` to delete a message.\n- Use `message_id`, required, is the unique ID of the message.\n\n```python\nchat_thread_client.delete_message(message_id=send_message_result_id)\n```\n\n## Thread Participant Operations\n\n### List thread participants\n\nUse `list_participants` to retrieve the participants of the thread.\n- Use `results_per_page`, optional, The maximum number of participants to be returned per page.\n- Use `skip`, optional, to skips participants up to a specified position in response.\n\nAn iterator of `[ChatParticipant]` is the response returned from listing participants\n\n```python\nchat_participants = chat_thread_client.list_participants(results_per_page=5, skip=5)\nfor chat_participant_page in chat_participants.by_page():\n    for chat_participant in chat_participant_page:\n        print(\"ChatParticipant: \", chat_participant)\n```\n\n### Add thread participants\n\nUse `add_participants` method to add thread participants to the thread.\n\n- Use `thread_participants`, required, to list the `ChatParticipant` to be added to the thread;\n  - `user`, required, it is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user() from User Access Tokens\n  <!-- [User Access Tokens](#user-access-tokens) -->\n  - `display_name`, optional, is the display name for the thread participant.\n  - `share_history_time`, optional, time from which the chat history is shared with the participant.\n\nA `list(tuple(ChatParticipant, ChatError))` is returned. When participant is successfully added,\nan empty list is expected. In case of an error encountered while adding participant, the list is populated\nwith the failed participants along with the error that was encountered.\n\n```Python\nfrom azure.communication.identity import CommunicationIdentityClient\nfrom azure.communication.chat import ChatParticipant\nfrom datetime import datetime\n\n# create 2 users\nidentity_client = CommunicationIdentityClient.from_connection_string('<connection_string>')\nnew_users = [identity_client.create_user() for i in range(2)]\n\n# # conversely, you can also add an existing user to a chat thread; provided the user_id is known\n# from azure.communication.chat import CommunicationUserIdentifier\n#\n# user_id = 'some user id'\n# user_display_name = \"Wilma Flinstone\"\n# new_user = CommunicationUserIdentifier(user_id)\n# participant = ChatParticipant(\n#     identifier=new_user,\n#     display_name=user_display_name,\n#     share_history_time=datetime.utcnow())\n\nparticipants = []\nfor _user in new_users:\n  chat_participant = ChatParticipant(\n    identifier=_user,\n    display_name='Fred Flinstone',\n    share_history_time=datetime.utcnow()\n  )\n  participants.append(chat_participant)\n\nresponse = chat_thread_client.add_participants(thread_participants=participants)\n\ndef decide_to_retry(error, **kwargs):\n    \"\"\"\n    Insert some custom logic to decide if retry is applicable based on error\n    \"\"\"\n    return True\n\n# verify if all users has been successfully added or not\n# in case of partial failures, you can retry to add all the failed participants\nretry = [p for p, e in response if decide_to_retry(e)]\nif retry:\n    chat_thread_client.add_participants(retry)\n```\n\n### Remove thread participant\n\nUse `remove_participant` method to remove thread participant from the thread identified by threadId.\n`identifier` is the `CommunicationUserIdentifier` you created by CommunicationIdentityClient.create_user() from `azure-communication-identity`\n<!-- [User Access Tokens](#user-access-tokens)  -->\nand was added into this chat thread.\n- Use `identifier` to specify the `CommunicationUserIdentifier` you created\n```python\nchat_thread_client.remove_participant(identifier=new_user)\n\n# # conversely you can also do the following; provided the user_id is known\n# from azure.communication.chat import CommunicationUserIdentifier\n#\n# user_id = 'some user id'\n# chat_thread_client.remove_participant(identifier=CommunicationUserIdentifier(new_user))\n\n```\n\n## Events Operations\n\n### Send typing notification\n\nUse `send_typing_notification` method to post a typing notification event to a thread, on behalf of a user.\n\n```Python\nchat_thread_client.send_typing_notification()\n```\n\n### Send read receipt\n\nUse `send_read_receipt` method to post a read receipt event to a thread, on behalf of a user.\n- Use `message_id` to specify the id of the message whose read receipt is to be sent\n```python\ncontent='hello world'\nsend_message_result = chat_thread_client.send_message(content)\nsend_message_result_id = send_message_result.id\nchat_thread_client.send_read_receipt(message_id=send_message_result_id)\n```\n\n### List read receipts\n\nUse `list_read_receipts` method retrieves read receipts for a thread.\n- Use `results_per_page`, optional, The maximum number of read receipts to be returned per page.\n- Use `skip`,optional, to skips read receipts up to a specified position in response.\n\nAn iterator of `[ChatMessageReadReceipt]` is the response returned from listing read receipts\n\n```python\nread_receipts = chat_thread_client.list_read_receipts(results_per_page=5, skip=5)\n\nfor read_receipt_page in read_receipts.by_page():\n    for read_receipt in read_receipt_page:\n        print(read_receipt)\n        print(read_receipt.sender)\n        print(read_receipt.chat_message_id)\n        print(read_receipt.read_on)\n```\n\n## Sample Code\n\nThese are code samples that show common scenario operations with the Azure Communication Chat client library.\nThe async versions of the samples (the python sample files appended with `_async`) show asynchronous operations,\nand require Python 3.6 or later.\nBefore run the sample code, refer to Prerequisites\n<!-- [Prerequisites](#Prerequisites) -->\nto create a resource, then set some Environment Variables\n\n```bash\nset AZURE_COMMUNICATION_SERVICE_ENDPOINT=\"https://<RESOURCE_NAME>.communcationservices.azure.com\"\nset COMMUNICATION_SAMPLES_CONNECTION_STRING=\"<connection string of your Communication service>\"\n\npip install azure-communication-identity\n\npython samples\\chat_client_sample.py\npython samples\\chat_client_sample_async.py\npython samples\\chat_thread_client_sample.py\npython samples\\chat_thread_client_sample_async.py\n```\n\n# Troubleshooting\n\nRunning into issues? This section should contain details as to what to do there.\n\n# Next steps\n\nMore sample code should go [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/communication/azure-communication-chat/samples), along with links out to the appropriate example tests.\n\n# Contributing\n\nIf you encounter any bugs or have suggestions, please file an issue in the [Issues](<https://github.com/Azure/azure-sdk-for-python/issues>) section of the project.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Ftemplate%2Fazure-template%2FREADME.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Azure/azure-sdk-for-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-communication-chat",
    "package_url": "https://pypi.org/project/azure-communication-chat/",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-communication-chat/",
    "project_urls": {
      "Homepage": "https://github.com/Azure/azure-sdk-for-python"
    },
    "release_url": "https://pypi.org/project/azure-communication-chat/1.1.0/",
    "requires_dist": [
      "azure-core (<2.0.0,>=1.11.0)",
      "msrest (>=0.6.0)",
      "six (>=1.11.0)",
      "azure-communication-nspkg ; python_version<'3.0'",
      "typing ; python_version<'3.5'",
      "typing-extensions ; python_version<'3.8'"
    ],
    "requires_python": "",
    "summary": "Microsoft Azure Communication Chat Client Library for Python",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11472927,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "944c4e71a9aacb7821154ab9cb8be6b94ce3a50fb54fb6acdce71967f93f203b",
          "md5": "dcbb29306de8a0a9cc52d433eb053e9a",
          "sha256": "079bc48daf91936cc376130f02d0ad7d2023e0b5ac0ccb0f6116834eb875a3aa"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcbb29306de8a0a9cc52d433eb053e9a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 67205,
        "upload_time": "2021-04-20T23:12:59",
        "upload_time_iso_8601": "2021-04-20T23:12:59.258292Z",
        "url": "https://files.pythonhosted.org/packages/94/4c/4e71a9aacb7821154ab9cb8be6b94ce3a50fb54fb6acdce71967f93f203b/azure_communication_chat-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e78ea22ecc0834ad41dcffd5651a9801e5a81a2ac278edc41ba356e3564e106",
          "md5": "761bb88e1564b850b4ec34e8d6983750",
          "sha256": "d0f1d772a42bd265c35e13a893895f7f1e61dcea791689a17eb70dbf2ae059c0"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "761bb88e1564b850b4ec34e8d6983750",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 120632,
        "upload_time": "2021-04-20T23:13:01",
        "upload_time_iso_8601": "2021-04-20T23:13:01.539983Z",
        "url": "https://files.pythonhosted.org/packages/0e/78/ea22ecc0834ad41dcffd5651a9801e5a81a2ac278edc41ba356e3564e106/azure-communication-chat-1.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0a6704b4a4b11159ff8215151f962c9d095bcd17ca958af3e2099a5436981d6",
          "md5": "b1f1718f881a8368907b3d1150f6b2f2",
          "sha256": "a0cf970c3f089d58dbae9dc8fa04d339c498b52a41f3e29e25c212e053311107"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.0.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1f1718f881a8368907b3d1150f6b2f2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 51584,
        "upload_time": "2020-09-22T06:05:47",
        "upload_time_iso_8601": "2020-09-22T06:05:47.829024Z",
        "url": "https://files.pythonhosted.org/packages/f0/a6/704b4a4b11159ff8215151f962c9d095bcd17ca958af3e2099a5436981d6/azure_communication_chat-1.0.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "215760f00decd8209e0e72a2ddc293efdab4fc20dcecead56a775c928a4e1a0a",
          "md5": "93078adfe276b38931a7bd28d0093f76",
          "sha256": "2cc2238d5920140d76e2c7c209dbf19eff4784088009f72d073b0ced0fee3486"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.0.0b1.zip",
        "has_sig": false,
        "md5_digest": "93078adfe276b38931a7bd28d0093f76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 91339,
        "upload_time": "2020-09-22T06:05:52",
        "upload_time_iso_8601": "2020-09-22T06:05:52.127294Z",
        "url": "https://files.pythonhosted.org/packages/21/57/60f00decd8209e0e72a2ddc293efdab4fc20dcecead56a775c928a4e1a0a/azure-communication-chat-1.0.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1738bfd170c4dbda1e91f71871e3a2a844ef26183304aa0c738089c8cf57988c",
          "md5": "b128bb9ddd05c7b3911513fed69873a8",
          "sha256": "47572aba18bfcbf8a15d35788e4a7e27d6cb2c14239fb1d34f582d25d1ca6ccd"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.0.0b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b128bb9ddd05c7b3911513fed69873a8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 51622,
        "upload_time": "2020-10-05T22:21:11",
        "upload_time_iso_8601": "2020-10-05T22:21:11.689133Z",
        "url": "https://files.pythonhosted.org/packages/17/38/bfd170c4dbda1e91f71871e3a2a844ef26183304aa0c738089c8cf57988c/azure_communication_chat-1.0.0b2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68d0bf33bceed54fb10f1ac35ebd945aecdd37f9b9705f2867331bced1f83847",
          "md5": "fc94b48d40cbd16837e1c38bcb4680d6",
          "sha256": "c3c1737947721c996e02537a7c8d45fa8b8207d7eedce98867db61487d790204"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.0.0b2.zip",
        "has_sig": false,
        "md5_digest": "fc94b48d40cbd16837e1c38bcb4680d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 91356,
        "upload_time": "2020-10-05T22:21:13",
        "upload_time_iso_8601": "2020-10-05T22:21:13.490853Z",
        "url": "https://files.pythonhosted.org/packages/68/d0/bf33bceed54fb10f1ac35ebd945aecdd37f9b9705f2867331bced1f83847/azure-communication-chat-1.0.0b2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e593d15d5291b44d044492f8da5ce7a4b8773b8bf562f468dec18e87b5419b3f",
          "md5": "3ff52375432f353463810aedad7e4750",
          "sha256": "a7248b216a2500e96f8ad095cafbf2d3d103b0adca41c0627f11df564bba72f1"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.0.0b3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ff52375432f353463810aedad7e4750",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 51615,
        "upload_time": "2020-11-17T19:51:14",
        "upload_time_iso_8601": "2020-11-17T19:51:14.514027Z",
        "url": "https://files.pythonhosted.org/packages/e5/93/d15d5291b44d044492f8da5ce7a4b8773b8bf562f468dec18e87b5419b3f/azure_communication_chat-1.0.0b3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e575eec3858a404f679baadb978935c2e7c081f67d705cb7d1262b21fbbeae1",
          "md5": "11dbd2e08a06036d7bb27f57c3ad19f4",
          "sha256": "ab5f0008ed7339f8b0d4798a4859631fb53a7e66633e52ec843b236990002f09"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.0.0b3.zip",
        "has_sig": false,
        "md5_digest": "11dbd2e08a06036d7bb27f57c3ad19f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 91394,
        "upload_time": "2020-11-17T19:51:16",
        "upload_time_iso_8601": "2020-11-17T19:51:16.829611Z",
        "url": "https://files.pythonhosted.org/packages/2e/57/5eec3858a404f679baadb978935c2e7c081f67d705cb7d1262b21fbbeae1/azure-communication-chat-1.0.0b3.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7eceb19a6c1c04a308d39239f6938c99266cb4d3a45b67308a5a7a3cbc8aafc",
          "md5": "7fb68fbd100a09a665e1daf56a4a9fdc",
          "sha256": "eb3dda46df3570f3f74727a9d9e459702e8981572cc493851df7b1c4d5a698e0"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.0.0b4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fb68fbd100a09a665e1daf56a4a9fdc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 64932,
        "upload_time": "2021-02-10T02:41:48",
        "upload_time_iso_8601": "2021-02-10T02:41:48.858699Z",
        "url": "https://files.pythonhosted.org/packages/a7/ec/eb19a6c1c04a308d39239f6938c99266cb4d3a45b67308a5a7a3cbc8aafc/azure_communication_chat-1.0.0b4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d03c0dd413576fa377601848a84b9ac6c729de9dab62aaf22b4be0ac0bb398df",
          "md5": "b4cd40a9b69d33b5203ea7a021c67e16",
          "sha256": "152bdee1a81929806df3911dbca16028c81a9ceef7df930cc800f3ccfcbb18b1"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.0.0b4.zip",
        "has_sig": false,
        "md5_digest": "b4cd40a9b69d33b5203ea7a021c67e16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 111841,
        "upload_time": "2021-02-10T02:41:51",
        "upload_time_iso_8601": "2021-02-10T02:41:51.701096Z",
        "url": "https://files.pythonhosted.org/packages/d0/3c/0dd413576fa377601848a84b9ac6c729de9dab62aaf22b4be0ac0bb398df/azure-communication-chat-1.0.0b4.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed49f4340650bfc200412e1390fa51dca5807f60e4daa5a8f116dcee713a0e06",
          "md5": "11746c635a7e09222194a7722b08bc9d",
          "sha256": "ff102fbec8d04a9d180e57b3ab713153f5cee6f987d24c0d4b42d365a16780cb"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.0.0b5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11746c635a7e09222194a7722b08bc9d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 67089,
        "upload_time": "2021-03-10T01:16:53",
        "upload_time_iso_8601": "2021-03-10T01:16:53.289761Z",
        "url": "https://files.pythonhosted.org/packages/ed/49/f4340650bfc200412e1390fa51dca5807f60e4daa5a8f116dcee713a0e06/azure_communication_chat-1.0.0b5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6ff5ff202edd4c87573ffb016ed2b891823ded82f347c4f74e29d600818e52c",
          "md5": "ef76afb76be4151df7f9929d65da287e",
          "sha256": "e88bc87fd9de3e3629d9059a10b0d32f875ef4486f8c41b1c4941b53bb6ddf86"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.0.0b5.zip",
        "has_sig": false,
        "md5_digest": "ef76afb76be4151df7f9929d65da287e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 120719,
        "upload_time": "2021-03-10T01:16:55",
        "upload_time_iso_8601": "2021-03-10T01:16:55.714387Z",
        "url": "https://files.pythonhosted.org/packages/c6/ff/5ff202edd4c87573ffb016ed2b891823ded82f347c4f74e29d600818e52c/azure-communication-chat-1.0.0b5.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58f80ca8b8116f84221ba0ac870ea6adbccbb4c2bbf0dc1196ed40a75c1c5876",
          "md5": "a03a6e6da9a9ebbf58669fc9db2b37b9",
          "sha256": "4ffec2373064193ce8b367b93a0b334d195db5fdd6db84698cb638cebf3e63a6"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a03a6e6da9a9ebbf58669fc9db2b37b9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 68010,
        "upload_time": "2021-09-16T23:48:01",
        "upload_time_iso_8601": "2021-09-16T23:48:01.538855Z",
        "url": "https://files.pythonhosted.org/packages/58/f8/0ca8b8116f84221ba0ac870ea6adbccbb4c2bbf0dc1196ed40a75c1c5876/azure_communication_chat-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b55b3c38c0f07f50f1a7877f088a63b27733fa36ca835609459bcf0aefec2571",
          "md5": "f930a0a72f27a1aacc690df01993e0be",
          "sha256": "8fbe5e03209b6a5476817775834654a25281cc2738ce38931cfecd45b4436c49"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.1.0.zip",
        "has_sig": false,
        "md5_digest": "f930a0a72f27a1aacc690df01993e0be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 122432,
        "upload_time": "2021-09-16T23:48:04",
        "upload_time_iso_8601": "2021-09-16T23:48:04.185456Z",
        "url": "https://files.pythonhosted.org/packages/b5/5b/3c38c0f07f50f1a7877f088a63b27733fa36ca835609459bcf0aefec2571/azure-communication-chat-1.1.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ffcc172c7c6e7ae72f567ea0c0c8fd71de26677a225ff222d1eebfc7e018b10",
          "md5": "27da68bd2cffbdd2b032d24cffe35a0d",
          "sha256": "ce51e229405ab728575f3da87bee7b0d775351be9187a25dadf48fbcf7860ca1"
        },
        "downloads": -1,
        "filename": "azure_communication_chat-1.1.0b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27da68bd2cffbdd2b032d24cffe35a0d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 68082,
        "upload_time": "2021-08-16T18:19:57",
        "upload_time_iso_8601": "2021-08-16T18:19:57.147481Z",
        "url": "https://files.pythonhosted.org/packages/2f/fc/c172c7c6e7ae72f567ea0c0c8fd71de26677a225ff222d1eebfc7e018b10/azure_communication_chat-1.1.0b1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a63d5162d005f7b04627511ab83f411b609bf3bb3c7a24d97dc5eb35eab69549",
          "md5": "cd526e0c70b260b3ead365ccd26b227b",
          "sha256": "e024cf1658fbc102fcfb4971d7880098c1f6cf0868f48947dc322d444fd6f034"
        },
        "downloads": -1,
        "filename": "azure-communication-chat-1.1.0b1.zip",
        "has_sig": false,
        "md5_digest": "cd526e0c70b260b3ead365ccd26b227b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 122815,
        "upload_time": "2021-08-16T18:19:59",
        "upload_time_iso_8601": "2021-08-16T18:19:59.184897Z",
        "url": "https://files.pythonhosted.org/packages/a6/3d/5162d005f7b04627511ab83f411b609bf3bb3c7a24d97dc5eb35eab69549/azure-communication-chat-1.1.0b1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58f80ca8b8116f84221ba0ac870ea6adbccbb4c2bbf0dc1196ed40a75c1c5876",
        "md5": "a03a6e6da9a9ebbf58669fc9db2b37b9",
        "sha256": "4ffec2373064193ce8b367b93a0b334d195db5fdd6db84698cb638cebf3e63a6"
      },
      "downloads": -1,
      "filename": "azure_communication_chat-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a03a6e6da9a9ebbf58669fc9db2b37b9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 68010,
      "upload_time": "2021-09-16T23:48:01",
      "upload_time_iso_8601": "2021-09-16T23:48:01.538855Z",
      "url": "https://files.pythonhosted.org/packages/58/f8/0ca8b8116f84221ba0ac870ea6adbccbb4c2bbf0dc1196ed40a75c1c5876/azure_communication_chat-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b55b3c38c0f07f50f1a7877f088a63b27733fa36ca835609459bcf0aefec2571",
        "md5": "f930a0a72f27a1aacc690df01993e0be",
        "sha256": "8fbe5e03209b6a5476817775834654a25281cc2738ce38931cfecd45b4436c49"
      },
      "downloads": -1,
      "filename": "azure-communication-chat-1.1.0.zip",
      "has_sig": false,
      "md5_digest": "f930a0a72f27a1aacc690df01993e0be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 122432,
      "upload_time": "2021-09-16T23:48:04",
      "upload_time_iso_8601": "2021-09-16T23:48:04.185456Z",
      "url": "https://files.pythonhosted.org/packages/b5/5b/3c38c0f07f50f1a7877f088a63b27733fa36ca835609459bcf0aefec2571/azure-communication-chat-1.1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}