{
  "info": {
    "author": "Yousof Bader Yousof",
    "author_email": "phyous1010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "Installtion\r\n\r\nNeeded packages before install Sqlite3En package:\r\n\r\nFirst you need to install cryptography package \r\n\r\n\tpip install cryptography\r\n\r\nThen you can  install Sqlite3En package \r\n\r\n\tpip install Sqlite3En\r\n\r\nSqlite3En has been tested only on python 2.7 \r\n\r\nIt works only on an existing DB that you want to encrypt \r\n\r\nUsage or how to use Sqlite3En ?\r\n\r\nImporting: \r\n\r\n\tfrom Sqlite3En import Sqlite3En\r\n\r\nTo encrypt an existing DB you can use this function :\r\n\r\n\tSqlite3En.Encrypt_existing_DB_By_Password (Exist_DB_Path , Exist_DB_Name ,Exist_Table_Name , password = 'password' )\r\n\r\nExist_DB_Path : is DB path which you want to encrypr |example('BDfolder\\\\')\r\n\r\nExist_DB_Name : is the name of DB you want to encrypr |example('test.db')\r\n\r\nExist_Table_Name : is the name of the table inside the DB you want to encrypt |examole('TableTest')\r\n\r\npassword : is the password which will be used to encrypt DB |example('password')\r\n\r\nIt is important to make folder that contain only one DB which you want to encrypt \r\nso if you have more than one DB  you want to encrypt you have to make folders for every single\r\nDB and then encrypt them all one by one\r\n\r\nfor example if you have 2 DBs First.db and Sec.db and you want to encrypt both of them \r\nyou have to add Firsr.db in a folder and Sec.db in a other folder : \r\n\r\n\tDBfile1/First.db\r\n\tDBfile2/Sec.db\r\n\r\nThen you have to encrypt them one by one.\r\n\r\nExample :\r\n\r\n\tSqlite3En.Encrypt_existing_DB_By_Password ('DBfile1\\\\' , 'First.db' ,'Table_Name' , password = 'password' )\r\n\tSqlite3En.Encrypt_existing_DB_By_Password ('DBfile2\\\\' , 'Sec.db' ,'Table_Name' , password = 'password' )\r\n\r\nAnd it is important in each folder to have just the DB inside it without any other files or folders.\r\n\r\nThe result files of encryption are (.Kn files).\r\n\r\nFor example :\r\n\r\n\tFirst.db after encrypt it the result files are\r\n\t\tFirst1.Kn\r\n\t\tFirst2.Kn\r\n\t\tFirst3.Kn and so on \r\n\r\n\tSec.db result files are\r\n\t\tSec1.Kn\r\n\t\tSec2.Kn\r\n\t\tSec3.Kn\r\n\t\tSec4.Kn and so on\r\n\r\n\r\nTo open an encrypt DB you can use the function:\r\n\r\n\tSqlite3En.Open_Encrypted_DB_By_Password (Encryp_DB_Path_Name,Orgenal_DB_Name,Orgenal_DB_Table_Name,Memory_conn , password = 'password' )\r\n\r\nEncryp_DB_Path_Name : is the path where (.Kn files) are.\r\n\r\nOrgenal_DB_Name : is the name of DB befor encrypt.\r\n\r\nOrgenal_DB_Table_Name : is the name of DB's table befor encrypt.\r\n\r\nMemory_conn : is a sqlite3 connection to in :memory: (will talk about it later).\r\n\r\npassword : is the password which used to encrypt the DB .\r\n\r\nIt is important DB path or folder to have only the encrypted DB files you want to open (.Kn files).\r\n\r\nDo not mix more than one encrypted DB files (.Kn files)  together into one folder\r\nand do not mix (.Kn files) with any kind of other files or folders into one folder or the same folder. \r\n\r\nBefore using Open_Encrypted_DB_By_Password function\r\nyou have to make a connect to in :memory: db \r\nusing this function :\r\n\r\n\tMemory_conn = sqlite3.connect(\":memory:\")\r\n\r\n\r\nYou can add more than one DB to that connection(in :memory: - Memory_conn) as new table and use it, by using this function :\r\n\r\n\tSqlite3En.Add_Encrypted_DB_By_Password (Encryp_DB_Path_Name,Orgenal_DB_Name,Orgenal_DB_Table_Name,Memory_conn,Trg1,Trg2,Trg3, password = 'password' )\r\n\r\n\r\nEncryp_DB_Path_Name : is the path where (.Kn files) are\r\n\r\nOrgenal_DB_Name : is the name of DB befor encrypt\r\n\r\nOrgenal_DB_Table_Name : is the name of DB's table befor encrypt\r\n\r\nMemory_conn : is a sqlite3 connection to in :memory: (will talk about it later)\r\n\r\nTrg1 , Trg2 and Trg3 : are table TRIGGERS names , you can use any 3 difrent Names |example('t1','t2','t3').\r\n\r\nBe careful that if you add more than 2 DBs you have to use diferent TRIGGERS names every time |example fist add TRIGGERS ('t1','t2','t3') ,secend add TRIGGERS ('t4','t5','t6')\r\n\r\npassword : is the password which used to encrypt the DB \r\n\r\nSave changes \r\n\r\n3 kinds of operation on an encrypted DB can be saved \r\n\r\ninsert\r\n\r\nupdate\r\n\r\nand delete \r\n\r\nSo when you do any of that operation on DB you have to use this function:\r\n\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,Orgenal_DB_Name,Orgenal_DB_Table_Name,DB_Path,password = 'password' ,salt = 'a48detSckiYod67f')\r\n\r\nMemory_conn: is a sqlite3 connection to in :memory:\r\n\r\nOrgenal_DB_Name : is the name of DB befor encrypt\r\n\r\nOrgenal_DB_Table_Name : is the name of DB's table befor encrypt\r\n\r\nDB_Path : is the path where (.Kn files) are\r\n\r\npassword : is the password which used to encrypt the DB \r\n\r\nSome examples:\r\n\r\nIf you want to open 2 encrypted DBs (First.db and Sec.db) :\r\nfiles of First.db after encrypted  will be :\r\n\r\n\tFirst1.Kn\r\n\tFirst2.Kn\r\n\tFirst3.Kn and so on \r\n\r\nAll this files must be in one folder alone\r\n\r\n\tDBfile1/First1.Kn\r\n\tDBfile1/First2.Kn\r\n\tDBfile1/First3.Kn\r\n\r\nSec.db encrypted files must be in other folder alone too : \r\n\r\n\tDBfile2/Sec1.Kn\r\n\tDBfile2/Sec2.Kn\r\n\tDBfile2/Sec3.Kn\r\n\tDBfile2/Sec4.Kn\r\n\r\nTo open this 2 encrypted DBs :\r\n\r\n\tMemory_conn = sqlite3.connect(\":memory:\")\r\n\tSqlite3En.Open_Encrypted_DB_By_Password ('DBfile1\\\\','First.db','Table_Name1',Memory_conn , password = 'password' )\r\n\tSqlite3En.Add_Encrypted_DB_By_Password ('DBfile2\\\\','Sec.db','Table_Name2',Memory_conn,'t1','t2','t3', password = 'password' )\r\n\r\nTo insert new value in first DB:\r\n\r\n\tMemory_conn.execute(\"INSERT INTO Table_Name1 (ID,NAME,AGE) VALUES (1, 'sam', 35)\");\r\n\tMemory_conn.commit()\r\n\r\nAfter that you have to save that insert : \r\n\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,'First.db','Table_Name1','DBfile1\\\\',password = 'password' )\r\n\r\nTo insert value in Sec DB :\r\n\r\n\tMemory_conn.execute(\"INSERT INTO Table_Name2 (ID,NAME,AGE) VALUES (1, 'yous', 29)\");\r\n\tMemory_conn.commit()\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,'Sec.db','Table_Name2','DBfile2\\\\',password = 'password' )\r\n\r\n\r\nTo update value in First DB :\r\n\r\n\tMemory_conn.execute(\"UPDATE Table_Name1 set AGE = 36 where ID = 1\")\r\n\tMemory_conn.commit()\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,'First.db','Table_Name1','DBfile1\\\\',password = 'password' )\r\n\r\nTo update value in Sec DB :\r\n\r\n\tMemory_conn.execute(\"UPDATE Table_Name2 set AGE = 30 where ID = 1\")\r\n\tMemory_conn.commit()\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,'Sec.db','Table_Name2','DBfile2\\\\',password = 'password' )\r\n\r\nTo delete value in First DB:\r\n\r\n\tMemory_conn.execute('DELETE FROM Table_Name1 WHERE ID =1')\r\n\tMemory_conn.commit()\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,'First.db','Table_Name1','DBfile1\\\\',password = 'password' )\r\n\r\nTo delete value in Sec DB :\r\n\r\n\tMemory_conn.execute('DELETE FROM Table_Name2 WHERE ID =1')\r\n\tMemory_conn.commit()\r\n\tSqlite3En.Save_Change_On_EnDB_By_Password(Memory_conn,'Sec.db','Table_Name2','DBfile2\\\\',password = 'password' )\r\n\r\n\r\nNotes:\r\n1- Do not close Memory_conn while your program is runing if you close Memory_conn then \r\nall opened DBs (by Open_Encrypted_DB_By_Password function and Add_Encrypted_DB_By_Password function) \r\nwill be closed too.\r\n\r\n2- If you have one DB contain more than one table and you want to encrypt it you have to encrypt each table alone.\r\n\r\nFor example :\r\n\r\nIf you want to encrypt DB named MultyTable.db\r\nWhich have 2 tables F1Table and F2Table .\r\n\r\nTo encrypt it copy MultyTable.db into 2 folders:\r\n\r\n\tF1folder/MultyTable.db\r\n\tF2folder/MultyTable.db\r\n\r\nRename one of them (here will rename MultyTable.db which is into F2folder) :\r\n\r\n\tF1folder/MultyTable.db\r\n\tF2folder/MultyTableC.db\r\n\r\nThen encrypt each table alone:\r\n\r\n\tSqlite3En.Encrypt_existing_DB_By_Password ('F1folder\\\\' , 'MultyTable.db' ,'F1Table' , password = 'password' )\r\n\tSqlite3En.Encrypt_existing_DB_By_Password ('F2folder\\\\' , 'MultyTableC.db' ,'F2Table' , password = 'password' )\r\n\r\nTo open:\r\n\r\nRemove MultyTable.db and MultyTable2.db from their folders (you have to remember not to mix (.Kn files) with any kind of other files or folders). \r\n\r\nThen:\r\n\r\n\tMemory_conn = sqlite3.connect(\":memory:\")\r\n\tSqlite3En.Open_Encrypted_DB_By_Password ('F1folder\\\\','MultyTable.db','F1Table',Memory_conn , password = 'password' )\r\n\tSqlite3En.Add_Encrypted_DB_By_Password ('F2folder\\\\','MultyTableC.db','F2Table',Memory_conn,'t1','t2','t3', password = 'password' )\r\n\r\n\r\nTo see source code :\r\n\r\nhttps://github.com/yous1010/Sqlite3En_python/tree/master\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yous1010/Sqlite3En_python/tree/master",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Sqlite3En",
    "package_url": "https://pypi.org/project/Sqlite3En/",
    "platform": null,
    "project_url": "https://pypi.org/project/Sqlite3En/",
    "project_urls": {
      "Bug Tracker": "https://github.com/yous1010/Sqlite3En_python/issues",
      "Homepage": "https://github.com/yous1010/Sqlite3En_python/tree/master"
    },
    "release_url": "https://pypi.org/project/Sqlite3En/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16358458,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1033df134bea97a0f813ed2bc3a60452590dff959996f9fadbd5598e99d18e4",
          "md5": "9e7a5a38543e710af148dde90c1089a3",
          "sha256": "4dabf13d11fd12ea95a0a07b16a45e3a76862c228b423b3ca6dd287d844ece68"
        },
        "downloads": -1,
        "filename": "Sqlite3En-0.0.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e7a5a38543e710af148dde90c1089a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=2.7",
        "size": 8527,
        "upload_time": "2023-01-02T10:54:06",
        "upload_time_iso_8601": "2023-01-02T10:54:06.080454Z",
        "url": "https://files.pythonhosted.org/packages/f1/03/3df134bea97a0f813ed2bc3a60452590dff959996f9fadbd5598e99d18e4/Sqlite3En-0.0.5-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "209815a8b29a1dc703e30d3f84eef5f9d8b7b250e3d81e3074cc7c62ca2ea0ef",
          "md5": "3cfba9de2e4cc568ed03e15634f6313e",
          "sha256": "98fea7789e1141739ab7b64419988cdf308e05b4fa4679364f2a2c822f586b91"
        },
        "downloads": -1,
        "filename": "Sqlite3En-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3cfba9de2e4cc568ed03e15634f6313e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 10873,
        "upload_time": "2023-01-02T10:54:08",
        "upload_time_iso_8601": "2023-01-02T10:54:08.312126Z",
        "url": "https://files.pythonhosted.org/packages/20/98/15a8b29a1dc703e30d3f84eef5f9d8b7b250e3d81e3074cc7c62ca2ea0ef/Sqlite3En-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38848d88fdab83ee200b80ef9ba175bf2aa0982f8e1aed963f405cdb7209d4e9",
          "md5": "78dafb7ba188c3986beea1a61c17d82a",
          "sha256": "a4d29f42a2ae774f7e57bf71da56afff7a202fdead1b37345fad881a7b38d671"
        },
        "downloads": -1,
        "filename": "Sqlite3En-0.0.7-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "78dafb7ba188c3986beea1a61c17d82a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": ">=2.7",
        "size": 8648,
        "upload_time": "2023-01-09T10:49:30",
        "upload_time_iso_8601": "2023-01-09T10:49:30.339785Z",
        "url": "https://files.pythonhosted.org/packages/38/84/8d88fdab83ee200b80ef9ba175bf2aa0982f8e1aed963f405cdb7209d4e9/Sqlite3En-0.0.7-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfc761b151277f383701589d88fdac760f35cf12dfe1146ffee5da2ccbccba9c",
          "md5": "f9e29b9c48b7bece1856db6dc87a6b8b",
          "sha256": "2d59106151ab0210ab60b685762730207d48523429cd74623ca574e0b58c1a31"
        },
        "downloads": -1,
        "filename": "Sqlite3En-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f9e29b9c48b7bece1856db6dc87a6b8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 11034,
        "upload_time": "2023-01-09T10:49:32",
        "upload_time_iso_8601": "2023-01-09T10:49:32.973543Z",
        "url": "https://files.pythonhosted.org/packages/df/c7/61b151277f383701589d88fdac760f35cf12dfe1146ffee5da2ccbccba9c/Sqlite3En-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38848d88fdab83ee200b80ef9ba175bf2aa0982f8e1aed963f405cdb7209d4e9",
        "md5": "78dafb7ba188c3986beea1a61c17d82a",
        "sha256": "a4d29f42a2ae774f7e57bf71da56afff7a202fdead1b37345fad881a7b38d671"
      },
      "downloads": -1,
      "filename": "Sqlite3En-0.0.7-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "78dafb7ba188c3986beea1a61c17d82a",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": ">=2.7",
      "size": 8648,
      "upload_time": "2023-01-09T10:49:30",
      "upload_time_iso_8601": "2023-01-09T10:49:30.339785Z",
      "url": "https://files.pythonhosted.org/packages/38/84/8d88fdab83ee200b80ef9ba175bf2aa0982f8e1aed963f405cdb7209d4e9/Sqlite3En-0.0.7-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfc761b151277f383701589d88fdac760f35cf12dfe1146ffee5da2ccbccba9c",
        "md5": "f9e29b9c48b7bece1856db6dc87a6b8b",
        "sha256": "2d59106151ab0210ab60b685762730207d48523429cd74623ca574e0b58c1a31"
      },
      "downloads": -1,
      "filename": "Sqlite3En-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "f9e29b9c48b7bece1856db6dc87a6b8b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 11034,
      "upload_time": "2023-01-09T10:49:32",
      "upload_time_iso_8601": "2023-01-09T10:49:32.973543Z",
      "url": "https://files.pythonhosted.org/packages/df/c7/61b151277f383701589d88fdac760f35cf12dfe1146ffee5da2ccbccba9c/Sqlite3En-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}