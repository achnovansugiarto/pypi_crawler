{
  "info": {
    "author": "Microchip Technology",
    "author_email": "support@microchip.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# pysequansutils\npysequansutils provides tools for the Sequans Monarch 2 platform which is used on Microchip cellular IoT development boards.\n\n![PyPI - Format](https://img.shields.io/pypi/format/pysequansutils)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pysequansutils)\n![PyPI - License](https://img.shields.io/pypi/l/pysequansutils)\n\n## Usage\npysequansutils can be used as a command-line interface or a library\n\npysequansutils comes bundled with a dup file for a full upgrade of the Sequans Monarch 2 platform.  This dup file can be found in the fw folder of the package.\n\n## Command-line interface\npysequansutils is a multi-layered command-line interface meaning that there are several commands each\nwith its own actions and options.\n\nGetting help:\n```bash\npysequans --help\n```\nGetting help for specific command (in this example the `upgrade` command):\n```bash\npysequans upgrade --help\n```\nThe amount of logging is controlled by the -v/--verbose option:\n```bash\npysequans -v info\n```\nPossible log levels are `debug`, `info`, `warning`, `error`, `critical`.  Default is `info`.\n\nPrint version info and exit:\n```bash\npysequans -V\n```\nPrint release info and exit:\n```bash\npysequans -R\n```\n### Commands for upgrading the firmware of a Sequans Monarch2 platform\nDo a full upgrade of Sequans Monarch 2 platform using the bundled firmware.  This will only upgrade the firmware if the bundled firmware is newer than the current firmware of the Monarch2 platform.\n```bash\npysequans upgrade full\n```\nDo a forced full upgrade/downgrade of Sequans Monarch 2 platform, disregarding the version check\n```bash\npysequans upgrade full --force\n```\nDo a full upgrade with a specified firmware file.\nNote that this command will not do any version checking of the provided firmware vs the current active firmware,\ni.e. the provided firmware will always be programmed in the Sequans Monarch 2 platform.\n```bash\npysequans upgrade full -fw myfirmware.dup\n```\nRead out current firmware version of Sequans Monarch 2 platform and print together with the bundled firmware version\n```bash\npysequans upgrade report\n```\n### Commands for managing storage of certificates and private keys in Sequans Monarch2 platform\nThere are 20 non-volatile memory (NVM) storage slots available, numbered 0-19, each slot can hold a single private key and a certificate (bundle). Some of these slots are reserved for Sequans internal use, this utility will not allow to modify (write or erase) these, but they can be read. It is not required to erase a slot prior to writing, new content will replace previous content.\n\nFor certificates, multiple files may be written to a slot, and will be concatenated to a bundle and written to the NVM slot. This can be done either by specifying multiple `-f file` options, or `-f folder` referring to a folder containing only certificate files, or a combination of the two. For private keys, only a single file is allowed. All input files must be in PEM format.\n\nBe advised that NVM slots 18 and 19 are used by the IoT provisioning tool (`iotprovision`) to store device and Root CA certificates for cloud provider, respectively. It is therefore recommended to avoid using these slots for other purposes (Mosquitto, HTTPS, etc) because these slots will be overwritten whenever the provisioning tool is used.\n\nUpload a single certificate file to NVM slot 16\n```bash\npysequans nvm write 16 --certificate -f mycert.pem\n```\nUpload all certificate files in a folder and write as a bundle to NVM slot 17\n```bash\npysequans nvm write 17 --certificate -f my_certs_folder\n```\nUpload 3 individual certificate files and write as a bundle to NVM slot 17\n```bash\npysequans nvm write 17 --certificate -f cert1.pem -f cert2.pem -f cert3.pem\n```\nUpload private key file to NVM slot 16\n```bash\npysequans nvm write 16 --private-key -f private_key.pem\n```\nErase private key in slot 17. Note that this command will fail if the private key slot is already empty.\n```bash\npysequans nvm erase 17 --private-key\n```\nRead certificate in slot 18. Note that this command will fail if the certificate slot is empty. The readout format presented by Sequans Monarch2 platform is for informational purposes only, it is not suitable for downloading certificates or private keys from the NVM.\n```bash\npysequans nvm read 18 --certificate\n\n```\n## Sequans Monarch2 platform security profiles\nSecurity profiles define security-related attributes used by secure protocols like HTTPS or MQTT with TLS enabled. When setting up or using these protocols, security profile is referred to by a numeric security profile ID (`spId`). There are 6 security profiles numbered 1-6. Unsecured connections like plain HTTP don't need a security profile.\n\nSecurity profile 1 is set up by the provisioning tool (`iotprovison`) for cloud providers, and it is not recommended using it for other purposes. In Microchip-provided cellular demo firmwares, security profile 1 is used for AWS or Azure IoT cloud connection,  profile 2 is used for general secured MQTT, and security profile 3 is used for HTTPS. If you plan to use the kit for anything else than cloud provider provisioned for with `iotprovision`, you need to set up a security profile as described below.\n\nSecurity profile setup is typically the next step after storing certificate(s) and private key (if any) using the pysequans NVM commands described in the previous section.\n\n### Connect to kit using a terminal program\nPysequans has no built-in features to manage security profiles yet, so this must be done by means of using an external terminal program to connect to the kit and enter raw modem commands. Any terminal program capable of connecting to a serial port can be used.\n\nIf you don't have a favorite terminal program already installed, use `pyserial-miniterm` which is provided as a dependency when `pysequansutils` is installed. Set baud rate to 115200 for the provisioning firmware, and enable local echo (aka half duplex) to see what you are typing.\n\nYou need to have the Microchip provisioning firmware programmed into your kit, if you have used the `pysequans` command already with your kit, this will be the case.\n\nTo connect to the kit using pyserial-miniterm, use the following command:\n```bash\npyserial-miniterm <port> 115200 --echo\n```\nThe name of the serial port can be determined with our `pykitinfo` utility, or using `pyserial-ports`.\nWhen connected, you will be talking to our provisioning firmware, you need to activate bridge mode in order to talk to the modem:\n```bash\nMC+BRIDGEMODE\n```\nwhich should respond with `OK`. You are now ready to type in modem commands. Modem commands are not case sensitive, but are shown in upper case here. To check that you are talking to the modem, try the `ATI` command, it shows information about modem and firmware version:\n```\nATI\n\nSEQUANS Communications\nGM02S\nUE8.0.5.11\n\nOK\n```\nIn order to get somewhat more informative error messages than just `ERROR` from the modem, in interactive sessions it is recommended to set error verbosity level to maximum before proceeding, using command `AT+CMEE`:\n```\nAT+CMEE=2\n\nOK\n\n```\n### Setting up security profile using AT+SQNSPCFG modem command\n\nTHe modem command to manage security profiles is `AT+SQNSPCFG`. You can use `AT+SQNSPCFG=?` to get a usage summary:\n```\nAT+SQNSPCFG=?\n\n+SQNSPCFG: (1-6),(0-3,255),(\"0x1301;0x1302;0x1303<...>\"),(0x00-0xFF),(0-19),(0-19),(0-19),,,(0,1),(0,1),(0-UINT_MAX)\n\n```\nThe parameters are described below. Parameters are separated with `\",\"`, unused parameters can be skipped with double comma (`\",,\"`)\n```bash\nAT+SQNSPCFG=<spId>       # Security profile ID (1-6)\n[,<version>,             # SSL/TLS protocol <version> to use (0-3 => TLS v.1.0 - 1.3), 255 to reset (clear) the security profile\n[<cipherSpecs>,          # List of cipher suites (<cipherSpecs>) to be used for SSL/TLS connection security settings negotiation\n[<certValidLevel>,       # Server certificate validation level <certValidLevel>: 0=None, bit 0=1: Check against root CA certificates, bit 2=1: verify server URL against certificate common name\n[<caCertificateID>,      # NVM slot containing Root CA certificate(s) for server validation\n[<clientCertificateID>,  # NVM slot containing certificate to be used for client authentication\n[<clientPrivateKeyID>,   # NVM slot containing client private key\n[<psk>,                  # Pre-shared key <psk> used for connection\n[<pskIdentity>,          # Pre-shared key identity <pskIdentity> used for connection\n[<storageId>,            # <storageId> used to identify whether the private key is stored in NVM or HCE (Hardware Crypto Engine)\n[<resume>,               # Attempt to resume the previous security session if possible.\n[<lifetime>]]]]]]]]]     # TLS session maximum lifetime\n```\nThe parameters most commonly used are: `spId`, `version` (=2 or 3), `certValidLevel` (=1), `caCertificateID`, `clientCertificateID`, `storageId`. If NVM private key is used (`storageId` == 0), `clientPrivateKeyID` also needs to be set.\n\nContent of security profiles may be viewed by using `AT+SQNSPCFG` command without parameters:\n```\nAT+SQNSPCFG\n\n+SQNSPCFG: 1,2,\"0xC02B\",1,19,18,0,\"\",\"\",1,0,0\n+SQNSPCFG: 2,2,\"\",0,,,,\"\",\"\",0,0,0\n+SQNSPCFG: 3,2,\"\",1,5,,,\"\",\"\",0,0,0\n```\n\n### Examples\nSet up security profile 2 to use TLS 1.2, root CA certificates in slot 17, device certificate in slot 16, certificate generated from ECC public key (typical setup for Mosquitto test):\n```\nAT+SQNSPCFG=2,2,\"\",1,17,16,,\"\",\"\",1\n\n+SQNSPCFG: 2,2,\"\",1,17,16,,\"\",\"\",1,0,0\n\nOK\n```\nSet up security profile 3 to use TLS 1.2, root CA certificates in slot 15 (typical setup for HTTPS):\n```\nAT+SQNSPCFG=3,2,\"\",1,15,,,\"\",\"\"\n\n+SQNSPCFG: 3,2,\"\",1,15,,,\"\",\"\",0,0,0\n\nOK\n```\n\n## Library\npysequansutils is a collection of utilities and it can be used as a library by accessing the individual modules.\n\n### Logging\nThis package uses the Python logging module for publishing log messages to library users.\nA basic configuration can be used (see example below), but for best results a more thorough configuration is\nrecommended in order to control the verbosity of output from dependencies in the stack which also use logging.\nSee logging.yaml which is included in the package (although only used for CLI).\n```python\n# pysequansutils uses the Python logging module\nimport logging\nlogging.basicConfig(format=\"%(levelname)s: %(message)s\", level=logging.WARNING)\n```\n\n### Do a full upgrade with bundled firmware\nThe `upgrade` module contains functions to do full firmware upgrades. For example:\n```python\nfrom pysequansutils.upgrade import full_upgrade\nupgraded, active_version = full_upgrade()\nif upgraded:\n    print(f\"Successfully upgraded firmware to version '{active_version}'\")\nelse:\n    print(f\"Upgrade skipped. Current version is '{active_version}'\")\n```\n### Write certificate data to a NVM slot\nThe `nvmstorage` module contains functions to access NVM storage slots. Note that most argument validation is done in the CLI, in particular protection of the reserved slots, so unless the Sequans Monarch2 platform enforces this protection, which it does not at the time of writing, the user of this API must do so using the list AVAILABLE_NVM_SLOTS defined in the module.\n```python\nimport pysequansutils.nvmstorage as nvm\nfrom pysequansutils.pysequans_errors import PysequansError\n...\nif slot in nvm.AVAILABLE_NVM_SLOTS:\n    try:\n        nvm.write_slot(atdriver, slot, nvm.NVM_CERTIFICATE, data)\n    except PysequansError as e:\n        ...\nelse:\n    raise ValueError(f'Illegal NVM slot: {slot}')\n```\n\n\n## Notes for Linux® systems\nThis package uses pyedbglib and other libraries for USB transport and some udev rules are required.\nFor details see the pyedbglib package: https://pypi.org/project/pyedbglib\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://iot.microchip.com/avr-iot-cellular-mini",
    "keywords": "Microchip,Cellular,Modem,AVR-IoT,Sequans",
    "license": "Sequans Proprietary / MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysequansutils",
    "package_url": "https://pypi.org/project/pysequansutils/",
    "platform": null,
    "project_url": "https://pypi.org/project/pysequansutils/",
    "project_urls": {
      "Homepage": "https://iot.microchip.com/avr-iot-cellular-mini"
    },
    "release_url": "https://pypi.org/project/pysequansutils/2.1.4.11/",
    "requires_dist": [
      "pyyaml",
      "pyedbglib (>=2.22.*)",
      "pykitcommander (>=2.7*)",
      "pylint ; extra == 'dev'",
      "mock ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Tools for the Sequans Monarch 2 platform.",
    "version": "2.1.4.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15540560,
  "releases": {
    "0.1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66bf2699ae523e614e400aea8ff53f83a982301f55b6df96b0871b430c684396",
          "md5": "58705a67e1a5d2317156c99eec5a78c3",
          "sha256": "03b55f5802822b572041efbdef76313f2c1b565eba8fa49f29ffcfde812737dd"
        },
        "downloads": -1,
        "filename": "pysequansutils-0.1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58705a67e1a5d2317156c99eec5a78c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2249,
        "upload_time": "2022-04-26T09:50:49",
        "upload_time_iso_8601": "2022-04-26T09:50:49.687831Z",
        "url": "https://files.pythonhosted.org/packages/66/bf/2699ae523e614e400aea8ff53f83a982301f55b6df96b0871b430c684396/pysequansutils-0.1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee197686d61a5bf99251dc825098e088ab23584c94df35ca902a2b482a943629",
          "md5": "e6751fbb0c271b6d1a857fd8b2e77e6b",
          "sha256": "b00de70a2bfa3ad1f6a69c697205aad1b1b5cbe401cedb55be88c2785166364e"
        },
        "downloads": -1,
        "filename": "pysequansutils-1.0.3.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6751fbb0c271b6d1a857fd8b2e77e6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3621806,
        "upload_time": "2022-06-30T12:32:01",
        "upload_time_iso_8601": "2022-06-30T12:32:01.384609Z",
        "url": "https://files.pythonhosted.org/packages/ee/19/7686d61a5bf99251dc825098e088ab23584c94df35ca902a2b482a943629/pysequansutils-1.0.3.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.4.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69ffe6104dc811fffe02ef37167f44ff72200fc38b7423e8807610f6ad303bcd",
          "md5": "7aafdea6f27525086b5d8c7ce05ac199",
          "sha256": "d362c5ed687af86259285f18ba923120163fa0659093c63ad7574838ffc0eec8"
        },
        "downloads": -1,
        "filename": "pysequansutils-2.1.4.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7aafdea6f27525086b5d8c7ce05ac199",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3635544,
        "upload_time": "2022-10-26T17:39:37",
        "upload_time_iso_8601": "2022-10-26T17:39:37.454445Z",
        "url": "https://files.pythonhosted.org/packages/69/ff/e6104dc811fffe02ef37167f44ff72200fc38b7423e8807610f6ad303bcd/pysequansutils-2.1.4.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69ffe6104dc811fffe02ef37167f44ff72200fc38b7423e8807610f6ad303bcd",
        "md5": "7aafdea6f27525086b5d8c7ce05ac199",
        "sha256": "d362c5ed687af86259285f18ba923120163fa0659093c63ad7574838ffc0eec8"
      },
      "downloads": -1,
      "filename": "pysequansutils-2.1.4.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7aafdea6f27525086b5d8c7ce05ac199",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3635544,
      "upload_time": "2022-10-26T17:39:37",
      "upload_time_iso_8601": "2022-10-26T17:39:37.454445Z",
      "url": "https://files.pythonhosted.org/packages/69/ff/e6104dc811fffe02ef37167f44ff72200fc38b7423e8807610f6ad303bcd/pysequansutils-2.1.4.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}