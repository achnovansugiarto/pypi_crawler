{
  "info": {
    "author": "Daniel Fairhead",
    "author_email": "danthedeckie@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# mdspec\n\"Declarative Model Specifications, from markdown-ish plain text files\"\n\nLooking at defining models / object specification in \"plain text\"\nfor working w/ designers &amp; clients. \n\nThis is very much a hacky work-in-progress, / working out loud playground at the moment. \n\n# The big idea:\nTests in Python or JS are great, but not accessible to non-coders.\nFeatures need to be defined somehow, and agreed between parties.\n\nGerkin is alright for describing functional requirements - but the whole\nidea of \"given/when/then\" is very process oriented - whereas on \nDjango / Wagtail / CMS based sites often have many objects defined\nwhich automatically implement a tonne of features. (ie, A Page model\nwith a few fields).\n\nThey're implemented declaratively, not functionally.\n\nCould we have something similar to gerkin for models / blocks that are declarative\nnot functional?\n\nAnd could we use a declarative style of specification, but in a plain-english type\nof format to facilitate that in a way that's easy to understand & share betweeen\ntechies & non-techies?\n\n## Example:\n(syntax subject to change)\n\n```markdown\n# HomePage\nHomePage is a Page Type.\nIt has these fields:\n - title: required, text, maximum 100 characters\n - banner: image, optional\n - banner: text, optional\n - contents (the main contents of the page...)\n\nThe contents field is a StreamField.\nIt has these blocks:\n - richtext\n - image\n - raw-html\n - contact-form\n\n## Block definitions...\n\nrichtext is a Wagtail Block.\nIt has these fields:\n - contents\n - style\n\nimage is a Wagtail Block.\nIt has these fields:\n - image (the link to the image itself...)\n - caption\n - link\n\n...\n```\n\nWhich, in theory, is relatively easy to understand for non-techies,\nand renders nicely as markdown.  It can be rendered out, signed off,\netc.\n\nIt's structured though, so it can be parsed (by this project) into\nsomething we can then travese / execute as part of CI / tests.\n\nit results in something like:\n```json\n{\n    \"_name\": \"HomePage\",\n    \"_type\": \"Page\",\n    \"fields\": [\n        [\"title\", \"required\", \"text\", \"maximum 100 characters\"],\n        [\"banner\", \"image\", \"optional\"],\n        [\"contents\"]\n    ]\n},\n\n{\n    \"_name\": \"contents\",\n    \"_type\": \"StreamField\",\n    \"blocks\": [\n        [\"richtext\"]\n        [\"image\"]\n        [\"raw-html\"]\n        ...\n    ]\n},\n\n...\n```\netc.  (Example, not actual format.  But structured something like that...)\n\nNow we have that specification as (dict / JSON / structured) objects,\nit's pretty easy to write tests that automatically find each defined page type,\ncheck that it has all required fields, or whatever.\n\nWe could also have tests that check that the admin page for each page\ntype actually has all of those fields as form fields in the admin.\n\nOnce you get to anywhere where logic is involved (eg, templates, output)\nthen switching to gerken based cases makes a lot more sense, this\nspec type would just be for things which are structurely \"defined\" rather\nthan functionally implemented... (if that makes sense?)\n\n## Thoughts:\n\n- anything in brakets (like this) is considered a comment, and ignored?\n- markdown titles are ignored too.\n- how can we have nice sections for random implementaion notes?\n  maybe use markdown quotation `> text` blocks?  Should those be\n  stored to use as docstrings in generation? or better not?\n\n# to play:\n\n\n```sh\npython3 mdspec/parser.py examples/pages.md\n```\nand it should output a structured version of the contents.\n(There will be tests run with `make test` too - WIP...)\n\n# What could we do with this?\n\n- Use it just as a structured way to define models / pages / etc.\n- Get sign off from different teams (BE / FE / Design / client...)\n- Run acceptance tests automatically off the structured data.\n- Generate initial model python code / tests / templates / etc?\n\n# Example thoughts:\n\n```markdown\nTeamPage is a Page Type\nit has these fields:\n - title\n - top_contents\n - below_contents\nit has these connections:\n - team: Person, many via \"TeamPerson\"\n```\n\nHow much worse is this in gerkin?\n\n```gerkin\nScenario:\n  Given an Index Page\n   When I add a child page\n   Then I should be able to add a TeamPage\n```\nand\n```gerkin\nGiven a TeamPage\n When I edit it in wagtail\n Then I should be able to edit the title field\n  And I should be able to edit the top_contents field\n  ...\n```\nhm... it's so verbose.  But functional spec.\n\nI guess with this kind of declarative spec, we can pass that into other tests?\n```gerkin\n Given <pagetype>\n  When I edit it in wagtail\n  Then I should be able to edit all defined fields\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdspec",
    "package_url": "https://pypi.org/project/mdspec/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdspec/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mdspec/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "Declarative plain-text specifications for objects",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16900962,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aa0442ea36d7d3dd55d11b3d6a27591040b20d611fcd554e008c22c7f8f2a0b",
          "md5": "5afdbbbb55b3abe865ced0b5afa7c755",
          "sha256": "b05a0a8cb5e3d6702e64ee601b286fe95d7a5bb5b202ec80c745ad1d01878daa"
        },
        "downloads": -1,
        "filename": "mdspec-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5afdbbbb55b3abe865ced0b5afa7c755",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 4749,
        "upload_time": "2023-02-03T15:57:47",
        "upload_time_iso_8601": "2023-02-03T15:57:47.118448Z",
        "url": "https://files.pythonhosted.org/packages/4a/a0/442ea36d7d3dd55d11b3d6a27591040b20d611fcd554e008c22c7f8f2a0b/mdspec-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c2c7becbc4c601dbf5d4fb2b79f99283ac2cd035105205f641fec9ea9ee07a4",
          "md5": "a912c55a4001c5e861e76314edaac580",
          "sha256": "b2f4cf148f20dd319225af7fc2ea14843fef8067b9333175102c96b482e61dfa"
        },
        "downloads": -1,
        "filename": "mdspec-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a912c55a4001c5e861e76314edaac580",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 4810,
        "upload_time": "2023-02-03T15:57:48",
        "upload_time_iso_8601": "2023-02-03T15:57:48.392969Z",
        "url": "https://files.pythonhosted.org/packages/9c/2c/7becbc4c601dbf5d4fb2b79f99283ac2cd035105205f641fec9ea9ee07a4/mdspec-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fce887319067aad856cb147ef1c54afa70278cab89f7ae33b8d185aca76e9774",
          "md5": "a6254c1e98d775723796594fd438f07e",
          "sha256": "681c949fc3830376215a656b4ae3b5c3f6047527d392e7e64865915ea23e0499"
        },
        "downloads": -1,
        "filename": "mdspec-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6254c1e98d775723796594fd438f07e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 4997,
        "upload_time": "2023-02-17T10:00:30",
        "upload_time_iso_8601": "2023-02-17T10:00:30.266503Z",
        "url": "https://files.pythonhosted.org/packages/fc/e8/87319067aad856cb147ef1c54afa70278cab89f7ae33b8d185aca76e9774/mdspec-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74da1d80cd8598611fde7c68e256a6bf207e6b31981f63966d9fbf8b0cd3f9d6",
          "md5": "cc35e438d51fe771880d8bba66430e31",
          "sha256": "ad3823a4726c9fdf488c8bfd65a51c0cd5efc7ab1f80faa0936b1d643ef635be"
        },
        "downloads": -1,
        "filename": "mdspec-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc35e438d51fe771880d8bba66430e31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 5471,
        "upload_time": "2023-02-17T10:00:31",
        "upload_time_iso_8601": "2023-02-17T10:00:31.424560Z",
        "url": "https://files.pythonhosted.org/packages/74/da/1d80cd8598611fde7c68e256a6bf207e6b31981f63966d9fbf8b0cd3f9d6/mdspec-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fce887319067aad856cb147ef1c54afa70278cab89f7ae33b8d185aca76e9774",
        "md5": "a6254c1e98d775723796594fd438f07e",
        "sha256": "681c949fc3830376215a656b4ae3b5c3f6047527d392e7e64865915ea23e0499"
      },
      "downloads": -1,
      "filename": "mdspec-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6254c1e98d775723796594fd438f07e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 4997,
      "upload_time": "2023-02-17T10:00:30",
      "upload_time_iso_8601": "2023-02-17T10:00:30.266503Z",
      "url": "https://files.pythonhosted.org/packages/fc/e8/87319067aad856cb147ef1c54afa70278cab89f7ae33b8d185aca76e9774/mdspec-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74da1d80cd8598611fde7c68e256a6bf207e6b31981f63966d9fbf8b0cd3f9d6",
        "md5": "cc35e438d51fe771880d8bba66430e31",
        "sha256": "ad3823a4726c9fdf488c8bfd65a51c0cd5efc7ab1f80faa0936b1d643ef635be"
      },
      "downloads": -1,
      "filename": "mdspec-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cc35e438d51fe771880d8bba66430e31",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 5471,
      "upload_time": "2023-02-17T10:00:31",
      "upload_time_iso_8601": "2023-02-17T10:00:31.424560Z",
      "url": "https://files.pythonhosted.org/packages/74/da/1d80cd8598611fde7c68e256a6bf207e6b31981f63966d9fbf8b0cd3f9d6/mdspec-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}