{
  "info": {
    "author": "",
    "author_email": "Carlo Tasca <c.tasca.tif@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# The Innovation Factory Python Package\n\n## Python version\nPython 3.8.9\n\n## Dependencies\n- Fabric 2: https://www.fabfile.org/\n- Docker SDK for Python: https://pypi.org/project/docker/ https://docker-py.readthedocs.io/en/stable/index.html\n- Python Hosts: https://pypi.org/project/python-hosts/\n- Emoji: https://pypi.org/project/emoji/\n\n## Installation\nMake sure you have installed all the dependency packages on your system.</br>\nClone the repository in your python installation site-packages directory.</br>\nFor example on MAC OS sites-packages directory would be found in /Users/xxxxx/Library/Python/x.x/lib/python/site-packages.\n\n## Remote task output example\n- Defined in project's fabfile.py file\n```python\n@task\ndef rmGenerated(context):\n    \"\"\"\n    Remotely delete magento generated directory\n    \"\"\"\n    magento.delete_generated(c, magento_root)\n```\n- Defined in tif package bin/magento.py\n```python\ndef delete_generated(c : Connection, magento_root : string, command_prefix=\"\"):\n    with c.cd(magento_root):\n        confirm = cli.cli_confirm(\"You are about to empty the generated directory, Are you sure?\")\n        if (confirm == \"y\"):\n            command = \"rm -rf generated/*\"\n            Logger().log(\"Running command '{}'\".format(command))\n            c.run(CommandPrefix(command, command_prefix).prefix_command())\n            cli.puts(\".:~ Done\")\n        else:\n            cli.puts(\"!!! Aborted\")\n```\n\n![Screenshot 2022-08-19 at 11 48 25](https://user-images.githubusercontent.com/1621171/185595530-bfb85ffc-97bc-4cf2-a88a-a7d5a34c485a.png)\n\n## Docker exec command on a running container\n- Defined in project's fabfile.py file\n\n```python\nfrom tif.docker.service import *\nfrom tif.cli.options import Options\n\ndocker_services = Service(docker_root)\n\n@task\ndef dockerExec(context, confirm = False):\n    \"\"\"\n    Execute a given command in chosen docker container\n    \"\"\"\n    docker_services.exec(Options(), confirm_prompt=confirm)\n```\n\n- Defined in tif package docker/service.py Service class\n\n```python\ndef exec(self, options, command = None, confirm_prompt = True):\n        \"\"\"\n        Exec a command in chosen container. Expect Options object from tif.cli.options module\n        \"\"\"\n        container_choice = options.docker_container_chooser(self, confirm_prompt=confirm_prompt)\n        if not command:\n            command = cli.prompt(\">>> Enter command to execute: \")\n        command = self.command(container_choice, command.strip())\n        run(command, pty=True)\n        \ndef command(self, container : string, command : string):\n        \"\"\"\n        Returns formatted command to execute on a docker container\n        \"\"\"\n        return \"docker exec -it {} bash -c \\\"{}\\\"\".format(container, command)\n```\n\n- Defined in tif package cli/options.py module Options class\n\n```python\ndef docker_container_chooser(self, service : Service, confirm_prompt = True) -> string:\n        containers = service.containers_dictionary()\n        containers[str(len(containers) + 1)] = \"Exit\"\n        self.options = containers\n        return self.render(input_text=\"Choose a container: \", confirm_prompt=confirm_prompt)\n```\n\n![Screenshot_2022-08-20_at_15_57_16](https://user-images.githubusercontent.com/1621171/185750140-46b4ecf5-fc52-451d-9313-f45bc6494297.png)\n\nAlternatively define a specific task in a project's fabfile.py\n\n```python\nfrom invoke import run\nfrom tif.docker.service import *\n\ndocker_services = Service(docker_root)\nphp_fpm_container_name = docker_services.container_name_search(\"php-fpm\")\n\n@task\ndef lcf(context):\n    \"\"\"\n    Execute bin/magento cache flush command in php-fpm docker container\n    \"\"\"\n    command = docker_services.command(php_fpm_container_name, \"bin/magento c:f\")\n    run(command, pty=True)\n\n```\n\n![Screenshot_2022-08-20_at_16_46_33](https://user-images.githubusercontent.com/1621171/185752611-7bb6b314-a696-4b78-9c26-300e5816d955.png)\n\n\n## Running a Fabric task from a list of connections\n\n![Screenshot_2022-08-20_at_16_35_31](https://user-images.githubusercontent.com/1621171/185751919-e261e941-531e-4413-8ef2-a073af0c64d2.png)\n\n\n## fabfile.py example\n```python\nfrom fabric.connection import *\nfrom fabric.tasks import *\nfrom tif.fabric import cli\nfrom tif.git import operations as git\nfrom tif.sql import operations as sql\nfrom tif.files import operations as files\nfrom tif.composer import operations as composer\nfrom tif.bin import magento\n\nhost = \"\"\nuser = \"\"\nhome_dir = \"\"\nmagento_root = \"\"\nlocal_magento_root = \"\"\nrepo = \"\"\n\nc = Connection(host, user=user)\n\n# ------------------------------------------------------------\n# Remote tasks\n# ------------------------------------------------------------\n\n@task\ndef ls(context):\n    \"\"\"\n    Remotely list directory content\n    \"\"\"\n    files.ls_dir(c, magento_root)\n\n@task\ndef listCommands(context):\n    \"\"\"\n    Remotely list bin/magento avaialable commands\n    \"\"\"\n    magento.list_commands(c, magento_root)\n\n@task\ndef cloneRepo(context):\n    \"\"\"\n    Remotely clones magento repository\n    \"\"\"\n    git.clone_repo(c, magento_root, repo)\n\n@task\ndef switchBranch(context):\n    \"\"\"\n    Remotely switch git branch (git checkout)\n    \"\"\"\n    git.switch_branch(c, magento_root)\n\n@task\ndef gb(context):\n    \"\"\"\n    Remotely execute git branch command\n    \"\"\"\n    git.branch(c, magento_root)\n\n@task\ndef gmerge(context):\n    \"\"\"\n    Remotely execute git merge origin/<branch> command. Before fetch is executed\n    \"\"\"\n    git.origin_merge(c, magento_root)\n\n@task\ndef importDb(context):\n    \"\"\"\n    Remotely import database dump\n    \"\"\"\n    sql.import_db(c, home_dir)\n\n@task\ndef gunzip(context):\n    \"\"\"\n    Remotely execute gunzip command\n    \"\"\"\n    files.gunzip(c, home_dir)\n\n@task\ndef composerInstall(context):\n    \"\"\"\n    Remotely execute composer install command\n    \"\"\"\n    composer.install(c, magento_root)\n\n@task\ndef installMagento(context):\n    \"\"\"\n    Remotely execute bin/magento setup:install command\n    \"\"\"\n    magento.install(c, magento_root)\n\n@task\ndef runCronGroup(context):\n    \"\"\"\n    Remotely execute bin/magento cron:run --group <group> command\n    \"\"\"\n    magento.run_cron_group(c, magento_root)\n\n@task\ndef runCron(context):\n    \"\"\"\n    Remotely execute bin/magento cron:run command\n    \"\"\"\n    magento.run_cron(c, magento_root)\n\n@task\ndef catLog(context):\n    \"\"\"\n    CD into var/log directory and prompt for log file to cat\n    \"\"\"\n    magento.cat_log(c, magento_root)\n\n\n@task\ndef command(context):\n    \"\"\"\n    Remotely execute bin/magento command (command to be entered in prompt)\n    \"\"\"\n    magento.run(c, magento_root)\n\n@task\ndef rmGenerated(context):\n    \"\"\"\n    Remotely delete magento generated directory\n    \"\"\"\n    magento.delete_generated(c, magento_root)\n\n@task\ndef diCompile(context):\n    \"\"\"\n    Remotely execute bin/magento setup:di:compile command\n    \"\"\"\n    magento.di_compile(c, magento_root)\n\n@task\ndef moduleEnable(context):\n    \"\"\"\n    Remotely execute bin/magento module:enable command\n    \"\"\"\n    magento.module_enable(c, magento_root)\n\n@task\ndef setupUpgrade(context):\n    \"\"\"\n    Remotely execute bin/magento setup:upgrade command\n    \"\"\"\n    magento.setup_upgrade(c, magento_root)\n\n@task\ndef fetch(context):\n    \"\"\"\n    Remotely execute git fetch command\n    \"\"\"\n    git.fetch(c, magento_root)\n\n@task\ndef pull(context):\n    \"\"\"\n    Remotely execute git pull branch from origin command. Automatically detects branch to pull.\n    \"\"\"\n    git.pull(c, magento_root)\n\n@task\ndef pullBranch(context):\n    \"\"\"\n    Remotely execute git pull branch from origin command. Prompts for branch to pull from origin.\n    \"\"\"\n    git.pull_branch(c, magento_root)\n\n@task\ndef cc(context):\n    \"\"\"\n    Remotely execute bin/magento cache:clean command\n    \"\"\"\n    magento.cache_clean(c, magento_root)\n\n@task\ndef cf(context):\n    \"\"\"\n    Remotely execute bin/magento cache:flush command\n    \"\"\"\n    magento.cache_flush(c, magento_root)\n\n@task\ndef th(context):\n    \"\"\"\n    Remotely execute bin/magento dev:template-hints enable/disable command\n    \"\"\"\n    magento.template_hints(c, magento_root)\n\n@task\ndef whitelist(context):\n    \"\"\"\n    Remotely execute bin/magento setup:db-declaration:generate-whitelist --module-name command\n    \"\"\"\n    magento.generate_whitelist(c, magento_root)\n\n@task\ndef gs(context):\n    \"\"\"\n    Remotely execute git status\n    \"\"\"\n    git.status(c, magento_root)\n\n@task\ndef diff(context):\n    \"\"\"\n    Remotely execute git diff command\n    \"\"\"\n    git.diff(c, magento_root)\n\n@task\ndef checkoutF(context):\n    \"\"\"\n    Remotely execute git checkout -- <file> command\n    \"\"\"\n    git.file_checkout(c, magento_root)\n\n@task\ndef gai(context):\n    \"\"\"\n    Remotely execute git add -i command\n    \"\"\"\n    git.add_iteractive(c, magento_root)\n\n@task\ndef gc(context):\n    \"\"\"\n    Remotely execute git commit command\n    \"\"\"\n    git.commit(c, magento_root)\n\n@task\ndef gp(context):\n    \"\"\"\n    Remotely execute git push origin command\n    \"\"\"\n    git.push(c, magento_root)\n\n@task\ndef greset(context):\n    \"\"\"\n    Remotely execute git reset --hard HEAD command\n    \"\"\"\n    git.reset_head(c, magento_root)\n\n@task\ndef grm(context):\n    \"\"\"\n    Remotely execute recursively git rm <file>\n    \"\"\"\n    git.remove(c, magento_root)\n\n@task\ndef gl(context, logs = \"-5\"):\n    \"\"\"\n    Remotely execute git log. Expect parameter 'logs' for -p parameter. Default -5.\n    \"\"\"\n    git.log(c, magento_root, logs)\n\n@task\ndef rm(context):\n    \"\"\"\n    Remotely execute rm command for a file or directory\n    \"\"\"\n    files.rm(c, magento_root)\n\n@task\ndef get(context):\n    \"\"\"\n    Remotely execute file transfer to local file system\n    \"\"\"\n    files.get(c)\n\n# ------------------------------------------------------------\n# Local tasks. All start with \"l\"\n# ------------------------------------------------------------\n\n@task\ndef lCloneRepo(context):\n    \"\"\"\n    Locally execute git clone command\n    \"\"\"\n    git.clone_repo(context, local_magento_root, repo)\n\n@task\ndef lSwitchBranch(context):\n    \"\"\"\n    Locally switch git branch (git checkout)\n    \"\"\"\n    git.switch_branch(context, local_magento_root)\n\n@task\ndef lgnb(context):\n    \"\"\"\n    Locally creates new branch\n    \"\"\"\n    git.new_branch(context, local_magento_root)\n\n@task\ndef lgai(context):\n    \"\"\"\n    Locally execute git add -i command\n    \"\"\"\n    git.add_iteractive(context, local_magento_root)\n\n@task\ndef lstash(context):\n    \"\"\"\n    Locally execute git stash command\n    \"\"\"\n    git.stash(context, local_magento_root)\n\n@task\ndef lstashp(context):\n    \"\"\"\n    Locally execute git stash pop command\n    \"\"\"\n    git.stash_pop(context, local_magento_root)\n\n@task\ndef lstashd(context):\n    \"\"\"\n    Locally execute git stash drop command\n    \"\"\"\n    git.stash_drop(context, local_magento_root)\n\n@task\ndef lstashl(context):\n    \"\"\"\n    Locally execute git stash list command\n    \"\"\"\n    git.stash_list(context, local_magento_root)\n\n@task\ndef lpull(context):\n    \"\"\"\n    Locally execute git pull branch from origin command. Automatically detects branch to pull.\n\n    \"\"\"\n    git.pull(context, local_magento_root)\n\n@task\ndef lPullBranch(context):\n    \"\"\"\n    Locally execute git pull branch from origin command. Prompts for branch to pull from origin.\n    \"\"\"\n    git.pull_branch(context, magento_root)\n\n@task\ndef lgp(context):\n    \"\"\"\n    Locally execute git push origin command\n    \"\"\"\n    git.push(context, local_magento_root)\n\n@task\ndef lgs(context):\n    \"\"\"\n    Locally execute git status\n    \"\"\"\n    git.status(context, local_magento_root)\n\n@task\ndef lgl(context, logs = \"-5\"):\n    \"\"\"\n    Locally execute git log. Expect parameter 'logs' for -p parameter. Default -5.\n    \"\"\"\n    git.log(context, local_magento_root, logs)\n\n@task\ndef lfetch(context):\n    \"\"\"\n    Locally execute git fetch command\n    \"\"\"\n    git.fetch(context, local_magento_root)\n\n@task\ndef lgmerge(context):\n    \"\"\"\n    Locally execute git merge origin/<branch> command. Before fetch is executed\n    \"\"\"\n    git.origin_merge(context, magento_root)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tif",
    "package_url": "https://pypi.org/project/tif/",
    "platform": null,
    "project_url": "https://pypi.org/project/tif/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ctasca/tif/issues",
      "Homepage": "https://github.com/ctasca/tif"
    },
    "release_url": "https://pypi.org/project/tif/3.0.1/",
    "requires_dist": [
      "docker>=6.0.0",
      "emoji>=2.2.0",
      "fabric>=2.7.1",
      "python-hosts>=1.0.3"
    ],
    "requires_python": ">=3.6",
    "summary": "TIF Python Package",
    "version": "3.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16649633,
  "releases": {
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2a99e420f5babc4f622df7a7073ba4978d77d11499a91f96cd422f20d2b458",
          "md5": "16fad9f3cc8683ff97ecfccbb6f64094",
          "sha256": "bcd41d9f3dc3998d8eead397925b4922c7c3fc0ac93dee2912858708812391af"
        },
        "downloads": -1,
        "filename": "tif-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16fad9f3cc8683ff97ecfccbb6f64094",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16983,
        "upload_time": "2023-02-01T11:20:55",
        "upload_time_iso_8601": "2023-02-01T11:20:55.085512Z",
        "url": "https://files.pythonhosted.org/packages/ff/2a/99e420f5babc4f622df7a7073ba4978d77d11499a91f96cd422f20d2b458/tif-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b719255520f8c11f00fdce5ea917c360db8d04ddcff174f152c30bc9ffa3180d",
          "md5": "35790227f41848247f417bb832e72e59",
          "sha256": "eea41af0bea3882714eacbf9708fcf75115e50dfa51f6effa9faee1cb2df3f01"
        },
        "downloads": -1,
        "filename": "tif-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "35790227f41848247f417bb832e72e59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11574,
        "upload_time": "2023-02-01T11:21:05",
        "upload_time_iso_8601": "2023-02-01T11:21:05.522671Z",
        "url": "https://files.pythonhosted.org/packages/b7/19/255520f8c11f00fdce5ea917c360db8d04ddcff174f152c30bc9ffa3180d/tif-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff2a99e420f5babc4f622df7a7073ba4978d77d11499a91f96cd422f20d2b458",
        "md5": "16fad9f3cc8683ff97ecfccbb6f64094",
        "sha256": "bcd41d9f3dc3998d8eead397925b4922c7c3fc0ac93dee2912858708812391af"
      },
      "downloads": -1,
      "filename": "tif-3.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16fad9f3cc8683ff97ecfccbb6f64094",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16983,
      "upload_time": "2023-02-01T11:20:55",
      "upload_time_iso_8601": "2023-02-01T11:20:55.085512Z",
      "url": "https://files.pythonhosted.org/packages/ff/2a/99e420f5babc4f622df7a7073ba4978d77d11499a91f96cd422f20d2b458/tif-3.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b719255520f8c11f00fdce5ea917c360db8d04ddcff174f152c30bc9ffa3180d",
        "md5": "35790227f41848247f417bb832e72e59",
        "sha256": "eea41af0bea3882714eacbf9708fcf75115e50dfa51f6effa9faee1cb2df3f01"
      },
      "downloads": -1,
      "filename": "tif-3.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "35790227f41848247f417bb832e72e59",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11574,
      "upload_time": "2023-02-01T11:21:05",
      "upload_time_iso_8601": "2023-02-01T11:21:05.522671Z",
      "url": "https://files.pythonhosted.org/packages/b7/19/255520f8c11f00fdce5ea917c360db8d04ddcff174f152c30bc9ffa3180d/tif-3.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}