{
  "info": {
    "author": "Tomáš Opletal",
    "author_email": "t.opletal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Django Model Mutations\n\nThis package adds Mutation classes that make creating graphene mutations with django models easier using Django Rest Framework serializers. It extends graphene Mutation class in a similar way to Django Rest Framework views or original Django views.\n\nIt also provides easy way to add permissions checks or ensure logged-in user, as well as easy way to override or add funcionality similar to django forms or rest framework views - such as ```get_queryset()``` or ```save()``` functions.\n\nThere is also advanced error reporting from rest framework, that returns non-valid fields and error messages.\n\nInspired by [Saleor](https://github.com/mirumee/saleor), [graphene-django-extras](https://github.com/eamigo86/graphene-django-extras/tree/master/graphene_django_extras) and [django-rest-framework](https://github.com/encode/django-rest-framework)\n\n## Installation\n```\npip install django-model-mutations\n```\n\n\n## Basic Usage\nMain classes that this package provides:\n\n| mutations | mixins |\n| ------ | ------ |\n|CreateModelMutation|LoginRequiredMutationMixin|\n|CreateBulkModelMutation|\n|UpdateModelMutation|\n|UpdateBulkModelMutation|\n|DeleteModelMutation|\n|DeleteBulkModelMutation|\n\n\n#### Django usage\nInput type (Arguments) is generated from serializer fields  \nReturn type is retrieved by model from global graphene registry, you just have to import it as in example\n```python\nfrom django_model_mutations import mutations, mixins\nfrom your_app.types import UserType  # important to import types to register in global registry\nfrom your_app.serializers import UserSerializer\n\n\n# Create Mutations\n# use mixins.LoginRequiredMutationMixin to ensure only logged-in user can perform this mutation\n# MAKE SURE this mixin is FIRST in inheritance order\nclass UserCreateMutation(mixins.LoginRequiredMutationMixin, mutations.CreateModelMutation):\n    class Meta:\n        serializer_class = UserSerializer\n        # OPTIONAL META FIELDS:\n        permissions = ('your_app.user_permission',) # OPTIONAL: specify user permissions\n        lookup_field = 'publicId'  # OPTIONAL: specify database lookup column, default is 'id' or 'ids'\n        return_field_name = 'myUser' # OPTIONAL: specify return field name, default is model name\n        input_field_name = 'myUser' # OPTIONAL: specify input field name, defauls is 'input'\n        \n\nclass UserBulkCreateMutation(mutations.CreateBulkModelMutation):\n    class Meta:\n        serializer_class = UserSerializer\n\n\n# Update Mutations\nclass UserUpdateMutation(mutations.UpdateModelMutation):\n    class Meta:\n        serializer_class = UserSerializer\n\n# WARNING: Bulk update DOES NOT USE serializer, due to limitations of rest framework serializer. \n# Instead specify model and argument fields by yourself.\nclass UserBulkUpdateMutation(mutations.UpdateBulkModelMutation):\n    class Arguments:\n        is_active = graphene.Boolean()\n\n    class Meta:\n        model = User\n\n# Delete Mutations\n# delete mutations doesn't use serializers, as there is no need\nclass UserDeleteMutation(mutations.DeleteModelMutation):\n    class Meta:\n        model = User\n\nclass UserBulkDeleteMutation(mutations.DeleteBulkModelMutation):\n    class Meta:\n        model = User\n\n\n# Add to graphene schema as usual\nclass Mutation(graphene.ObjectType):\n    user_create = UserCreateMutation.Field()\n    ....\n\nschema = graphene.Schema(mutation=Mutation)\n```\n\n\n#### GraphQl usage\nThe generated GraphQl schema can be modified with ```Meta``` fields as described above in ```UserCreateMutation```.\n\nBy default all mutations have ```errors``` field with ```field``` and ```messages``` that contain validation errors from rest-framework serializer or lookup errors. For now permission denied and other exceptions will not use this error reporting, but a default one, for usage see tests.\n```graphql\n# default argument name is input\n# default return field name is model name\nmutation userCreate (input: {username: \"myUsername\"}) {\n    user {\n        id\n        username\n    }\n    errors {\n        field\n        messages\n    }\n}\n\n\n# Bulk operations return 'count' and errors\nmutation userCreate (input: {username: \"myUsername\"}) {\n    count\n    errors {\n        field\n        messages\n    }\n}\n\n# update mutations\n# update and delete mutations by default specify lookup field 'id' or 'ids' for bulk mutations\nmutation {\n    userUpdate (id: 2, input: {username:\"newUsername\"} ) {\n        user {\n            id\n            username\n        }  \n        errors {\n            field\n            messages\n        }\n    } \n}   \n\n\nmutation {\n    userBulkUpdate (ids: [2, 3], isActive: false ) {\n        count\n        errors {\n           field\n           messages\n        }\n    }\n}  \n\n\n# delete mutations\nmutation {\n    userDelete (id: 1) {\n        user {\n            id\n        }\n        errors {\n           field\n           messages\n        }\n    }\n}  \n\n\nmutation {\n    userBulkDelete (ids: [1, 2, 3]) {\n        count\n        errors {\n           field\n           messages\n        }\n    }\n}  \n```\n\n### Adding funcionality\nAll classes are derived from ```graphene.Mutation```. When you want to override some major functionality, the best place probabably is ```perform_mutate```, which is called after permission checks from graphene ```mutate```.  \n\nIn general probably the main functions that you want to override are: ```save()``` and ```get_object()``` for single object mutations or ```get_queryset()``` for bulk mutations.  \n```get_object``` or ```get_queryset``` you should override to add more filters for fetching the object.   \n```save``` performs final save/update/delete to database and you can add additional fields there.\n\nExamples:\n```python\n# lets only update users that are inactive and add some random field\nclass UserUpdateInactiveMutation(mutations.UpdateModelMutation):\n    class Meta:\n        model = User\n\n    @classmethod\n    def get_object(cls, object_id, info, **input):\n    # can get the object first and then check\n        obj = super(UserUpdateInactiveMutation, cls).get_object(object_id, info, **input)\n        if obj.is_active:\n            return None\n        return obj\n\n    @classmethod\n    def save(cls, serializer, root, info, **input):\n        saved_object = serializer.save(updated_by=info.context.user)\n        return cls.return_success(saved_object)\n\n\n# same but for bulk mutation we have to override get_queryset\nclass UserBulkUpdateInactiveMutation(mutations.UpdateBulkModelMutation):\n    class Meta:\n        model = User\n\n    @classmethod\n    def get_queryset(cls, object_ids, info, **input):\n        qs = super(UserBulkUpdateInactiveMutation, cls).get_queryset(object_ids, info, **input)\n        qs.filter(is_active=False)\n        return qs\n```\n\nFor the whole function flow, please check the Base models in ```django_model_mutations\\mutations.py```.\nIt was inspired by rest framework, so you can find functions like ```get_serializer_kwargs```, ```get_serializer```, ```validate_instance``` (for example here you can override default ```ValidationError``` exception and return None if you don't want exception of non existing id lookup etc.)\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/topletal/django-model-mutations",
    "keywords": "GRAPHENE,GRAPHENE-DJANGO,GRAPHQL,DJANGO,MODELS,API",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-model-mutations",
    "package_url": "https://pypi.org/project/django-model-mutations/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-model-mutations/",
    "project_urls": {
      "Homepage": "https://github.com/topletal/django-model-mutations"
    },
    "release_url": "https://pypi.org/project/django-model-mutations/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Graphene Django mutations for Django models made easier",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6155163,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b4cd5e8eca4626945ab8d1cad56170eace3ff3df2a6e50d33010386478c3a23",
          "md5": "2cae452b9b88dae40470f8fe64d1ecd9",
          "sha256": "61a04969a4203211fc1be55aec0d0a3c59b9b220375d2d5db6eccd214632d6db"
        },
        "downloads": -1,
        "filename": "django-model-mutations-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2cae452b9b88dae40470f8fe64d1ecd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3901,
        "upload_time": "2019-11-18T10:33:37",
        "upload_time_iso_8601": "2019-11-18T10:33:37.360410Z",
        "url": "https://files.pythonhosted.org/packages/7b/4c/d5e8eca4626945ab8d1cad56170eace3ff3df2a6e50d33010386478c3a23/django-model-mutations-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c562cd946821035aa4f72a613ac30655d4c864048bb268d8cf1c91fce61a7f89",
          "md5": "bae177aad93d8c1689b997ada77779b4",
          "sha256": "6d19ab7045750374140e547f77b157e6c62d1310d59e5f1fd041ac7705982e2d"
        },
        "downloads": -1,
        "filename": "django-model-mutations-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bae177aad93d8c1689b997ada77779b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7807,
        "upload_time": "2019-11-18T10:55:31",
        "upload_time_iso_8601": "2019-11-18T10:55:31.772967Z",
        "url": "https://files.pythonhosted.org/packages/c5/62/cd946821035aa4f72a613ac30655d4c864048bb268d8cf1c91fce61a7f89/django-model-mutations-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c562cd946821035aa4f72a613ac30655d4c864048bb268d8cf1c91fce61a7f89",
        "md5": "bae177aad93d8c1689b997ada77779b4",
        "sha256": "6d19ab7045750374140e547f77b157e6c62d1310d59e5f1fd041ac7705982e2d"
      },
      "downloads": -1,
      "filename": "django-model-mutations-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bae177aad93d8c1689b997ada77779b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7807,
      "upload_time": "2019-11-18T10:55:31",
      "upload_time_iso_8601": "2019-11-18T10:55:31.772967Z",
      "url": "https://files.pythonhosted.org/packages/c5/62/cd946821035aa4f72a613ac30655d4c864048bb268d8cf1c91fce61a7f89/django-model-mutations-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}