{
  "info": {
    "author": "",
    "author_email": "Nico Schlömer <nico.schloemer@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: Other/Proprietary License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Utilities"
    ],
    "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/orthopy\"><img alt=\"orthopy\" src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/orthopy-logo-with-text.png\" width=\"30%\"></a>\n  <p align=\"center\">All about orthogonal polynomials.</p>\n</p>\n\n[![PyPi Version](https://img.shields.io/pypi/v/orthopy.svg?style=flat-square)](https://pypi.org/project/orthopy)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/orthopy.svg?style=flat-square)](https://pypi.org/pypi/orthopy/)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/orthopy.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/orthopy)\n[![Downloads](https://pepy.tech/badge/orthopy/month?style=flat-square)](https://pepy.tech/project/orthopy)\n\n<!--[![PyPi downloads](https://img.shields.io/pypi/dm/orthopy.svg?style=flat-square)](https://pypistats.org/packages/orthopy)-->\n\n[![Discord](https://img.shields.io/static/v1?logo=discord&logoColor=white&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/hnTJ5MRX2Y)\n[![orthogonal](https://img.shields.io/badge/orthogonal-yes-ff69b4.svg?style=flat-square)](https://github.com/nschloe/orthopy)\n\northopy provides various orthogonal polynomial classes for\n[lines](#line-segment--1-1-with-weight-function-1-x%CE%B1-1-x%CE%B2),\n[triangles](#triangle-42),\n[disks](#disk-s2),\n[spheres](#sphere-u2),\n[n-cubes](#n-cube-cn),\n[the nD space with weight function exp(-r<sup>2</sup>)](#nd-space-with-weight-function-exp-r2-enr2)\nand more.\nAll computations are done using numerically stable recurrence schemes. Furthermore, all\nfunctions are fully vectorized and can return results in _exact arithmetic_.\n\n### Installation\n\nInstall orthopy [from PyPI](https://pypi.org/project/orthopy/) with\n\n```\npip install orthopy\n```\n\n### How to get a license\n\nLicenses for personal and academic use can be purchased\n[here](https://buy.stripe.com/aEUg1H38OgDw5qMfZ3).\nYou'll receive a confirmation email with a license key.\nInstall the key with\n\n```\nplm add <your-license-key>\n```\n\non your machine and you're good to go.\n\nFor commerical use, please contact support@mondaytech.com.\n\n### Basic usage\n\nThe main function of all submodules is the iterator `Eval` which evaluates the series of\northogonal polynomials with increasing degree at given points using a recurrence\nrelation, e.g.,\n\n```python\nimport orthopy\n\nx = 0.5\n\nevaluator = orthopy.c1.legendre.Eval(x, \"classical\")\nfor _ in range(5):\n     print(next(evaluator))\n```\n\n```python\n1.0          # P_0(0.5)\n0.5          # P_1(0.5)\n-0.125       # P_2(0.5)\n-0.4375      # P_3(0.5)\n-0.2890625   # P_4(0.5)\n```\n\nOther ways of getting the first `n` items are\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = Eval(x, \"normal\")\nvals = [next(evaluator) for _ in range(n)]\n\nimport itertools\nvals = list(itertools.islice(Eval(x, \"normal\"), n))\n```\n\nInstead of evaluating at only one point, you can provide any array for `x`; the\npolynomials will then be evaluated for all points at once. You can also use sympy for\nsymbolic computation:\n\n```python\nimport itertools\nimport orthopy\nimport sympy\n\nx = sympy.Symbol(\"x\")\n\nevaluator = orthopy.c1.legendre.Eval(x, \"classical\")\nfor val in itertools.islice(evaluator, 5):\n     print(sympy.expand(val))\n```\n\n```\n1\nx\n3*x**2/2 - 1/2\n5*x**3/2 - 3*x/2\n35*x**4/8 - 15*x**2/4 + 3/8\n```\n\nAll `Eval` methods have a `scaling` argument which can have three values:\n\n- `\"monic\"`: The leading coefficient is 1.\n- `\"classical\"`: The maximum value is 1 (or (n+alpha over n)).\n- `\"normal\"`: The integral of the squared function over the domain is 1.\n\nFor univariate (\"one-dimensional\") integrals, every new iteration contains one function.\nFor bivariate (\"two-dimensional\") domains, every level will contain one function more\nthan the previous, and similarly for multivariate families. See the tree plots below.\n\n### Line segment (-1, +1) with weight function (1-x)<sup>α</sup> (1+x)<sup>β</sup>\n\n| <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/legendre.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/chebyshev1.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/chebyshev2.svg\" width=\"100%\"> |\n| :---------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------: |\n|                                            Legendre                                             |                                            Chebyshev 1                                            |                                            Chebyshev 2                                            |\n\nJacobi, Gegenbauer (α=β), Chebyshev 1 (α=β=-1/2), Chebyshev 2 (α=β=1/2), Legendre\n(α=β=0) polynomials.\n\n<!--pytest.mark.skip-->\n\n```python\nimport orthopy\n\northopy.c1.legendre.Eval(x, \"normal\")\northopy.c1.chebyshev1.Eval(x, \"normal\")\northopy.c1.chebyshev2.Eval(x, \"normal\")\northopy.c1.gegenbauer.Eval(x, \"normal\", lmbda)\northopy.c1.jacobi.Eval(x, \"normal\", alpha, beta)\n```\n\nThe plots above are generated with\n\n```python\nimport orthopy\n\northopy.c1.jacobi.show(5, \"normal\", 0.0, 0.0)\n# plot, savefig also exist\n```\n\nRecurrence coefficients can be explicitly retrieved by\n\n```python\nimport orthopy\n\nrc = orthopy.c1.jacobi.RecurrenceCoefficients(\n    \"monic\",  # or \"classical\", \"normal\"\n    alpha=0, beta=0, symbolic=True\n)\nprint(rc.p0)\nfor k in range(5):\n    print(rc[k])\n```\n\n```\n1\n(1, 0, None)\n(1, 0, 1/3)\n(1, 0, 4/15)\n(1, 0, 9/35)\n(1, 0, 16/63)\n```\n\n### 1D half-space with weight function x<sup>α</sup> exp(-r)\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/e1r.svg\" width=\"45%\">\n\n(Generalized) Laguerre polynomials.\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = orthopy.e1r.Eval(x, alpha=0, scaling=\"normal\")\n```\n\n### 1D space with weight function exp(-r<sup>2</sup>)\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/e1r2.svg\" width=\"45%\">\n\nHermite polynomials come in two standardizations:\n\n- `\"physicists\"` (against the weight function `exp(-x ** 2)`\n- `\"probabilists\"` (against the weight function `1 / sqrt(2 * pi) * exp(-x ** 2 / 2)`\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = orthopy.e1r2.Eval(\n    x,\n    \"probabilists\",  # or \"physicists\"\n    \"normal\"\n)\n```\n\n#### Associated Legendre \"polynomials\"\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/associated-legendre.svg\" width=\"45%\">\n\nNot all of those are polynomials, so they should really be called associated Legendre\n_functions_. The <i>k</i>th iteration contains _2k+1_ functions, indexed from\n_-k_ to _k_. (See the color grouping in the above plot.)\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = orthopy.c1.associated_legendre.Eval(\n    x, phi=None, standardization=\"natural\", with_condon_shortley_phase=True\n)\n```\n\n### Triangle (_T<sub>2</sub>_)\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/triangle-tree.png\" width=\"40%\">\n\northopy's triangle orthogonal polynomials are evaluated in terms of [barycentric\ncoordinates](https://en.wikipedia.org/wiki/Barycentric_coordinate_system), so the\n`X.shape[0]` has to be 3.\n\n```python\nimport orthopy\n\nbary = [0.1, 0.7, 0.2]\nevaluator = orthopy.t2.Eval(bary, \"normal\")\n```\n\n### Disk (_S<sub>2</sub>_)\n\n| <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/disk-xu-tree.png\" width=\"70%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/disk-zernike-tree.png\" width=\"70%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/disk-zernike2-tree.png\" width=\"70%\"> |\n| :------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------: |\n|                                                 Xu                                                 |                      [Zernike](https://en.wikipedia.org/wiki/Zernike_polynomials)                       |                                                Zernike 2                                                 |\n\northopy contains several families of orthogonal polynomials on the unit disk: After\n[Xu](https://arxiv.org/abs/1701.02709),\n[Zernike](https://en.wikipedia.org/wiki/Zernike_polynomials), and a simplified version\nof Zernike polynomials.\n\n```python\nimport orthopy\n\nx = [0.1, -0.3]\n\nevaluator = orthopy.s2.xu.Eval(x, \"normal\")\n# evaluator = orthopy.s2.zernike.Eval(x, \"normal\")\n# evaluator = orthopy.s2.zernike2.Eval(x, \"normal\")\n```\n\n### Sphere (_U<sub>3</sub>_)\n\n<img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/sph-tree.png\" width=\"50%\">\n\nComplex-valued _spherical harmonics,_ plotted with\n[cplot](https://github.com/nschloe/cplot/) coloring (black=zero, green=real positive,\npink=real negative, blue=imaginary positive, yellow=imaginary negative). The functions\nin the middle are real-valued. The complex angle takes _n_ turns on the <i>n</i>th\nlevel.\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = orthopy.u3.EvalCartesian(\n    x,\n    scaling=\"quantum mechanic\"  # or \"acoustic\", \"geodetic\", \"schmidt\"\n)\n\nevaluator = orthopy.u3.EvalSpherical(\n    theta_phi,  # polar, azimuthal angles\n    scaling=\"quantum mechanic\"  # or \"acoustic\", \"geodetic\", \"schmidt\"\n)\n```\n\nTo generate the above plot, write the tree mesh to a file\n\n```python\nimport orthopy\n\northopy.u3.write_tree(\"u3.vtk\", 5, \"quantum mechanic\")\n```\n\nand open it with [ParaView](https://www.paraview.org/). Select the _srgb1_ data set and\nturn off _Map Scalars_.\n\n### _n_-Cube (_C<sub>n</sub>_)\n\n| <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/c1.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/c2.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/c3.png\" width=\"100%\"> |\n| :---------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------: |\n|                                 C<sub>1</sub> (Legendre)                                  |                                       C<sub>2</sub>                                       |                                       C<sub>3</sub>                                       |\n\nJacobi product polynomials.\nAll polynomials are normalized on the n-dimensional cube. The dimensionality is\ndetermined by `X.shape[0]`.\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = orthopy.cn.Eval(X, alpha=0, beta=0)\nvalues, degrees = next(evaluator)\n```\n\n### <i>n</i>D space with weight function exp(-r<sup>2</sup>) (_E<sub>n</sub><sup>r<sup>2</sup></sup>_)\n\n| <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/e1r2.svg\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/e2r2.png\" width=\"100%\"> | <img src=\"https://raw.githubusercontent.com/sigma-py/orthopy/assets/e3r2.png\" width=\"100%\"> |\n| :-----------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------: |\n|                           _E<sub>1</sub><sup>r<sup>2</sup></sup>_                           |                           _E<sub>2</sub><sup>r<sup>2</sup></sup>_                           |                           _E<sub>3</sub><sup>r<sup>2</sup></sup>_                           |\n\nHermite product polynomials.\nAll polynomials are normalized over the measure. The dimensionality is determined by\n`X.shape[0]`.\n\n<!--pytest.mark.skip-->\n\n```python\nevaluator = orthopy.enr2.Eval(\n    x,\n    standardization=\"probabilists\"  # or \"physicists\"\n)\nvalues, degrees = next(evaluator)\n```\n\n### Other tools\n\n- Generating recurrence coefficients for 1D domains with\n  [Stieltjes](https://github.com/nschloe/orthopy/wiki/Generating-1D-recurrence-coefficients-for-a-given-weight#stieltjes),\n  [Golub-Welsch](https://github.com/nschloe/orthopy/wiki/Generating-1D-recurrence-coefficients-for-a-given-weight#golub-welsch),\n  [Chebyshev](https://github.com/nschloe/orthopy/wiki/Generating-1D-recurrence-coefficients-for-a-given-weight#chebyshev), and\n  [modified\n  Chebyshev](https://github.com/nschloe/orthopy/wiki/Generating-1D-recurrence-coefficients-for-a-given-weight#modified-chebyshev).\n\n- The the sanity of recurrence coefficients with test 3 from [Gautschi's article](https://doi.org/10.1007/BF02218441):\n  computing the weighted sum of orthogonal polynomials:\n  <!--pytest.mark.skip-->\n\n  ```python\n  orthopy.tools.gautschi_test_3(moments, alpha, beta)\n  ```\n\n- [Clenshaw algorithm](https://en.wikipedia.org/wiki/Clenshaw_algorithm) for\n  computing the weighted sum of orthogonal polynomials:\n  <!--pytest.mark.skip-->\n  ```python\n  vals = orthopy.c1.clenshaw(a, alpha, beta, t)\n  ```\n\n### Relevant publications\n\n- [Robert C. Kirby, Singularity-free evaluation of collapsed-coordinate orthogonal polynomials, ACM Transactions on Mathematical Software (TOMS), Volume 37, Issue 1, January 2010](https://doi.org/10.1145/1644001.1644006)\n- [Abedallah Rababah, Recurrence Relations for Orthogonal Polynomials on Triangular Domains, MDPI Mathematics 2016, 4(2)](https://doi.org/10.3390/math4020025)\n- [Yuan Xu, Orthogonal polynomials of several variables, arxiv.org, January 2017](https://arxiv.org/abs/1701.02709)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "orthopy",
    "package_url": "https://pypi.org/project/orthopy/",
    "platform": null,
    "project_url": "https://pypi.org/project/orthopy/",
    "project_urls": {
      "Homepage": "https://github.com/sigma-py/orthopy",
      "Issues": "https://github.com/sigma-py/orthopy/issues"
    },
    "release_url": "https://pypi.org/project/orthopy/0.9.7/",
    "requires_dist": [
      "x21 (>=0.4.10,<0.5.0)",
      "numpy",
      "python-license-manager",
      "sympy",
      "cplot",
      "matplotlib",
      "matplotx",
      "meshio ; extra == 'all'",
      "meshzoo ; extra == 'all'"
    ],
    "requires_python": ">=3.7",
    "summary": "Orthogonal polynomials for Python",
    "version": "0.9.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17104072,
  "releases": {
    "0.8.90": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f32a8f79d833dca88227d8d17d3f122dfb6c4cddc7a9fcc7a728a347370c89a0",
          "md5": "5653d4bdd7799ab84adf1e60ba9dea1e",
          "sha256": "b3d765741e72cdc2e9736f07b43dbe94539b9397ede749a9c765b6f840888622"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.90-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5653d4bdd7799ab84adf1e60ba9dea1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 282228,
        "upload_time": "2022-04-18T17:55:50",
        "upload_time_iso_8601": "2022-04-18T17:55:50.391618Z",
        "url": "https://files.pythonhosted.org/packages/f3/2a/8f79d833dca88227d8d17d3f122dfb6c4cddc7a9fcc7a728a347370c89a0/orthopy-0.8.90-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.91": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4636b542ca7e071c0b76ffde871fd238574c934a21e5d37d8553ce62ced2c132",
          "md5": "06edc34d8fe162263dd2b64066086814",
          "sha256": "f35229ab5899a15d9bdd3e33e0730e08b47347d9ac12395621813f8538b79db7"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.91-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06edc34d8fe162263dd2b64066086814",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 282119,
        "upload_time": "2022-05-26T10:51:23",
        "upload_time_iso_8601": "2022-05-26T10:51:23.861334Z",
        "url": "https://files.pythonhosted.org/packages/46/36/b542ca7e071c0b76ffde871fd238574c934a21e5d37d8553ce62ced2c132/orthopy-0.8.91-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.92": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f382c5f74c540741b289f1aa082216de0491ceca6cc0cb3ba93937a17b6b70cf",
          "md5": "e148b311058ee742da0124337015f821",
          "sha256": "6ca4307b03e8d90058ddba5595e64547c0c47633b382de7669de80208d7c3972"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.92-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e148b311058ee742da0124337015f821",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 280131,
        "upload_time": "2022-06-20T11:28:52",
        "upload_time_iso_8601": "2022-06-20T11:28:52.674806Z",
        "url": "https://files.pythonhosted.org/packages/f3/82/c5f74c540741b289f1aa082216de0491ceca6cc0cb3ba93937a17b6b70cf/orthopy-0.8.92-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.93": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0e9bff7a29d310c0126d61bc1a4783e2b4bdb958304c66bda781852c97347ed",
          "md5": "cabb73d74ffb5e1cd5c16b1ff000c8d7",
          "sha256": "31f3db6306110abf65d6ae3c30f6fddac750dc813de29dc22b14a6b4bb6a0316"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.93-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cabb73d74ffb5e1cd5c16b1ff000c8d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 279311,
        "upload_time": "2022-12-31T16:03:34",
        "upload_time_iso_8601": "2022-12-31T16:03:34.073034Z",
        "url": "https://files.pythonhosted.org/packages/a0/e9/bff7a29d310c0126d61bc1a4783e2b4bdb958304c66bda781852c97347ed/orthopy-0.8.93-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.95": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1cf077b98c18e9098f8d32f1073fa680b2548c171316e520216c24d16251f31",
          "md5": "c1a75e1876313c002c13c7c70154cef2",
          "sha256": "e50440973af02ccf80ba0dbc422b2c75e79f9397d09426ca4133a24bfd93335a"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.95-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1a75e1876313c002c13c7c70154cef2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 278971,
        "upload_time": "2023-01-10T11:27:48",
        "upload_time_iso_8601": "2023-01-10T11:27:48.458886Z",
        "url": "https://files.pythonhosted.org/packages/a1/cf/077b98c18e9098f8d32f1073fa680b2548c171316e520216c24d16251f31/orthopy-0.8.95-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.96": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10656a859cdde6c144df191ad16b1fc02da6ca3882f4f6102cd239edb8452f64",
          "md5": "9042450687ec905143727ca49301b28b",
          "sha256": "726dca8c7aaaa615c5274829461d5da3ed442892ee36bac201416227746d6088"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.96-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9042450687ec905143727ca49301b28b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 110490,
        "upload_time": "2023-01-18T20:48:34",
        "upload_time_iso_8601": "2023-01-18T20:48:34.085584Z",
        "url": "https://files.pythonhosted.org/packages/10/65/6a859cdde6c144df191ad16b1fc02da6ca3882f4f6102cd239edb8452f64/orthopy-0.8.96-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.97": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83fed88fef680d932168df5fcffd1d97af83f8a842866dffb72a8ad0c5376ce6",
          "md5": "4014e1130562b5257ac3b09563033e2a",
          "sha256": "b880094db65236a2b4dd61ee892430f3ca225c4225d7d9456d4cc17c45f7dc05"
        },
        "downloads": -1,
        "filename": "orthopy-0.8.97-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4014e1130562b5257ac3b09563033e2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 110531,
        "upload_time": "2023-01-31T22:26:54",
        "upload_time_iso_8601": "2023-01-31T22:26:54.526224Z",
        "url": "https://files.pythonhosted.org/packages/83/fe/d88fef680d932168df5fcffd1d97af83f8a842866dffb72a8ad0c5376ce6/orthopy-0.8.97-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baa39956824c77e0c5428c3f3c10d6dad3732114bea80ff0033b5d18c26e0b38",
          "md5": "6b10bb38ea1be6815dedddd5066b609b",
          "sha256": "cd72603497b002a1d7ceffe3f94358f90fb2d81068867169b8fe5e806189ee61"
        },
        "downloads": -1,
        "filename": "orthopy-0.9.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b10bb38ea1be6815dedddd5066b609b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 75007,
        "upload_time": "2023-03-01T01:08:06",
        "upload_time_iso_8601": "2023-03-01T01:08:06.375958Z",
        "url": "https://files.pythonhosted.org/packages/ba/a3/9956824c77e0c5428c3f3c10d6dad3732114bea80ff0033b5d18c26e0b38/orthopy-0.9.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "baa39956824c77e0c5428c3f3c10d6dad3732114bea80ff0033b5d18c26e0b38",
        "md5": "6b10bb38ea1be6815dedddd5066b609b",
        "sha256": "cd72603497b002a1d7ceffe3f94358f90fb2d81068867169b8fe5e806189ee61"
      },
      "downloads": -1,
      "filename": "orthopy-0.9.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b10bb38ea1be6815dedddd5066b609b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 75007,
      "upload_time": "2023-03-01T01:08:06",
      "upload_time_iso_8601": "2023-03-01T01:08:06.375958Z",
      "url": "https://files.pythonhosted.org/packages/ba/a3/9956824c77e0c5428c3f3c10d6dad3732114bea80ff0033b5d18c26e0b38/orthopy-0.9.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}