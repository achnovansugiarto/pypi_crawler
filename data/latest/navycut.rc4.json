{
  "info": {
    "author": "Aniket Sarkar",
    "author_email": "aniketsarkar@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Navycut\n\n<img src=\"https://raw.githubusercontent.com/flaskAio/navycut/main/logos/navycut_logo.png\">\n<br>\n\n# Downloads\n[![Downloads](https://pepy.tech/badge/navycut)](https://pepy.tech/project/navycut) [![Downloads](https://pepy.tech/badge/navycut/month)](https://pepy.tech/project/navycut/month) [![Downloads](https://pepy.tech/badge/navycut/week)](https://pepy.tech/project/navycut/week)\n<br>\n\n#### contributor wanted : feel free to contact me at aniketsarkar@yahoo.com\n\nNavycut is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Thanks for checking it out.\n\nIt's actually a Full Stack web framework using <a href=\"https://flask.palletsprojects.com\">Flask(werkzeug)</a> as backend wsgi server and try to deliver the service and api like Django.\n\nThe official documentation is online at <a href=\"navycut.github.io\">navycut.github.io</a>.\n\n### Basic installation\n    Use the package manager [pip](https://pypi.org/project/navycut/) to install navycut.\n\n```bash\npython3 -m pip install navycut\n```\n    Install from source code\n\n```bash\ngit clone https://github.com/flaskAio/navycut.git && cd navycut/\npython3 setup.py install\n```\n\n### check for installation\n```bash\nnavycut --version\n0.0.5\n```\n\n### Introduction to Navycut\nNavycut promises to deliver the fullstack service using the following features:\n\n<ul>\n    <li>Customished ORM using SQLAlchemy.</li>\n        <ul>\n            <li>It's comes with all the sqlalchemy features with some extra features.</li>\n            <li>It's have the own Image, Json, Text, Integer, String and many others fileds like Django ORM has.</li>\n            <li>Some fileds have the default choices system to add value by providing a tuple data like Django ORM.</li>\n        </ul>\n    <li>Inbuild Admin system using flask-admin. So all the flask-admin features are applicable here.</li>\n    <li>Inbuild authentication stystem using flask-login.</li>\n    <li>Form system using wt-forms.</li>\n    <li>SMTP mail integration using flask-mail.</li>\n    <li>Flask-migrate to migrate the database.</li>\n    <li>Custom app features like django.</li>\n    <li>ExpressJs like view functions to provide more interactive service.</li>\n</ul>\n\n### if you need any help to understand the command line, please try following\n```bash\nnavycut --help\nor\nnavycut [COMMAND] --help\n```\n\n### create the first project\n```bash\nnavycut createproject blog\n```\nThis command will create a project directory containing the basic files created by navycut at the specified location.\n\nThe directory structure will be:\n\n```text\nblog\n├── blog\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── test.py\n│   └── wsgi.py\n├── templates\n│   └── README.md\n├── manage.py\n```\n\n### start the development server\n\n```bash\npython manage.py runserver\nor \npython manage.py runserver 0.0.0.0:8000 # to start a server on different port\n```\nThis command will start the development server on localhost:8888 or the provided address.\nNow you should create an app to start writing the urls and appropriate views function.\n\n### create the first app\n\n```bash\npython manage.py createapp blogapp\n```\nThis command will create an app directory containg some navycut specified file at the project directory location.\n\nThe app folder structure will be:\n```bash\nblogapp\n├── admin.py\n├── __init__.py\n├── models.py\n├── sister.py\n├── urls.py\n└── views.py\n```\nNow the Project folder structure will be:\n```bash\nblog\n├── blog\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── test.py\n│   └── wsgi.py\n├── blogapp\n│   ├── admin.py\n│   ├── __init__.py\n│   ├── models.py\n│   ├── sister.py\n│   ├── urls.py\n│   └── views.py\n├── templates\n|   └── README.md\n├── manage.py\n```\nnow you need to register the newly created app with the project.\nTo do this you must perform the following steps.\n<br>\n\n* open the directory containing the same name with project.\n* open settings.py file.\n* Now findout the block called `INSTALLED_APPS`.\n* Under this `INSTALLED_APPS` list add your app.\n* Suppose your app name is `blogapp` then add the following line under `INSTALLED_APPS`:\n\"blogapp.sister.BlogappSister\".\n<br>\n\nYour settings.py file should look like this:\n\n```python\nINSTALLED_APPS = [\n    \"navycut.orm.sqla\",\n    \"navycut.contrib.cors\",\n    \"navycut.contrib.auth\",\n    \"navycut.contrib.mail\",\n    \"navycut.contrib.admin\",\n    \"navycut.helpers.upload_server\",\n    \"blogapp\"\n]\n```\n\n### All available command you must know to work with Navycut\n* to know more about the available commands:\n```bash\nnavycut --help\n```\n* to create a project directory at the present location:\n```bash\nnavycut createproject project_name\n```\n* to create a app inside the project directory:\n```bash\ncd project_name\npython manage.py createapp app_name\n```\n* to migrate the database:\n```bash\npython manage.py migrate\n```\n* to apply the migration to the database:\n```bash\npython manage.py makemigrations\n```\n* to create the superuser to access the admin:\n```bash\npython manage.py createsuperuser\n```\n* to start the interactive development server\n```bash\npython manage.py runserver\n```\n\n### Introduction to the model layer\n\n```python\nfrom navycut.orm import sql\nfrom datetime import datetime\n\nclass Blog(sql.Model):\n    id = sql.fields.Integer(pk=True)\n    title = sql.fields.Char(max_length=50)\n    body = sql.fields.Text(required=True)\n    image = sql.fields.Image(required=True)\n    created_at = sql.fields.DateTime(default=datetime.now)\n    author_ptr_id = sql.fields.ForeignKey(\"Author\")\n\nclass Author(sql.Model):\n    id = sql.fields.Integer(pk=True)\n    name = sql.fields.Char(max_length=100, required=True)\n    image = sql.fields.Image(required=True)\n    blog = sql.fields.OneToMany(\"Blog\")\n\n```\n### Introduction to the Urls and Views Layer\n\n```python\n# urls.py\nfrom navycut.urls import path, url, include\nfrom . import views\n\n\"\"\"\nThe default url_prefix is the app name i.e \"/blog\" for this case.\nIf you want to change it and use your own customized name then\nplese update the url_prefix for a particular app on the sister.py file\nunder the AppSister class.\n\"\"\"\n\nurlpatterns = [\n    path('/', views.BlogView, name='blog-index'),\n    url('/<int:id>', views.blog_detail, name='blog-detail'),\n    url('/search/?id=1', views.blog_search, name='blog-search'),\n\tinclude('/polls', 'polls.urls') # include urlpatterns from another app\n]\n```\n```python\n# views.py\n\nfrom navycut.urls import MethodView\nfrom .models import Blog\n\n\"\"\"\nHere you can use views method like expressJs.\nJust simply pass the request and response object as\narguments of the view function.\n\"\"\"\nclass BlogView(MethodView):\n    def get(self):\n        blogs = Blog.query.all()\n        return self.render('blog/blog_listing.html', {'blogs': blogs})\n\ndef blog_details(req, res, id):\n    blog = Blog.query.get(id)\n\treturn res.json(blog)\n\ndef blog_search(req, res):\n    id = int(req.args.get('id'))\n    blog = Blog.query.get(id)\n\treturn res.json(blog)\n```\n\n### The templating view using Jinja2 Templating Engine\n\n```html\n<html>\n  <head>\n    <title>Blog Listing</title>\n  </head>\n  <body>\n    <h1>All Blogs</h1>\n    <ul>\n    {% for blog in blogs %}\n      <li>\n        <h2>{{ blog.name }}</h2>\n        <img src=\"{{blog.image}}\">\n      </li>\n    {% endfor %}\n    </ul>\n</body>\n```\n\n### Fully functional form using WTForms\n\n```python\nfrom navycut.contrib import forms\n\nclass RegistrationForm(forms.Form):\n    username = forms.StringField('Username', [forms.validators.Length(min=4, max=25)])\n    email = forms.StringField('Email Address', [forms.validators.Length(min=6, max=35)])\n    password = forms.PasswordField('New Password', [\n        forms.validators.DataRequired(),\n        forms.validators.EqualTo('confirm', message='Passwords must match')\n    ])\n    confirm = forms.PasswordField('Repeat Password')\n    accept_tos = forms.BooleanField('I accept the TOS', [forms.validators.DataRequired()])\n```\n\n## Inbuild Authentication system using Flask-Login\n\n```python\nfrom navycut.auth import login_required, current_user, group_required\nfrom navycut.http import JsonResponse\nfrom navycut.urls import MethodView\n\nclass AuthView(MethodView):\n    @login_required\n    def get(self):\n        return JsonResponse(logged_in_username=current_user.username)\n\n@login_required\n@group_required('super_admin')\ndef get_data(req, res):\n    return res.json(username=req.user.username) # current_user == req.user\n```\n\n# Customized Inbuild Admin Panel using Flask-Admin\n\n```python\nfrom navycut.admin import admin\nfrom navycut.admin.site.views import NCAdminModelView\nfrom .models import Blog, Author\n\nclass AuthorAdminModelView(NCAdminModelView):\n    \"\"\"Customize the look of the auto-generated admin for the Member model\"\"\"\n    excluded_fields = ['name',]\n\nadmin.register_model(Blog) # Use the default options\nadmin.register_model(Author, AuthorAdminModelView)  # Use the customized options\n```\n\n# Development\n\n### Sponsors\n\n<a href=\"https://liberapay.com/aniketsarkar\" target=\"_blank\">\n<img src=\"https://www.worldfuturecouncil.org/wp-content/uploads/2018/09/Donate-Button-HEART.png\" height=\"50px\" width=\"100px\"/>\n</a>\n<br/>\n\n##### If you are from India, You can donate directly Using VPA(UPI):\n\n    my vpa id: aniketsarkar@ybl\n<a href=\"https://cdn.worldvectorlogo.com/logos/phonepe-1.svg\">\n<img src=\"https://download.logo.wine/logo/PhonePe/PhonePe-Logo.wine.png\" height=\"120px\" width=\"180px\">\n</a>\n<br>\n<a href=\"https://paytm.me/vA-DF7O\">\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Paytm_Logo_%28standalone%29.svg/1200px-Paytm_Logo_%28standalone%29.svg.png\" height=\"50px\" width=\"100px\">\n</a>\n\n### Contributors\n\n<a href=\"https://github.com/flaskAio/navycut/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=flaskAio/navycut\" />\n</a>\n\n### How to contribute\n\n* Fork and clone this repository\n* Make some changes as required\n* Write unit test to showcase its functionality\n* Submit a pull request under `main` branch\n\n### How to run this project on your local machine\n\n* Fork and clone this repository\n* Create a virtual environment using python virtualenv module on the project root directory.\n* Activate the virtual environment and install the package dependencies mentioned on `requirements.txt` file.\n* Now run this command : `python setup.py install`. This command will install `navycut` on the virtual environment. \n* Make any changes on your local code.\n* Run again the command : `python setup.py install`.\n* Now create a separate project inside the example folder and start testing for your code changes.\n* If you face any difficulties to perform the above steps, then plese contact me at: `aniketsarkar@yahoo.com`.\n\n# License\n\nGNU General Public License v3 or later (GPLv3+)\n\nCopyright (c) 2021 navycut(aniketsarkar@yahoo.com)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flaskAio/navycut",
    "keywords": "flask,django,Navycut",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Navycut",
    "package_url": "https://pypi.org/project/Navycut/",
    "platform": "any",
    "project_url": "https://pypi.org/project/Navycut/",
    "project_urls": {
      "Homepage": "https://github.com/flaskAio/navycut"
    },
    "release_url": "https://pypi.org/project/Navycut/0.0.5/",
    "requires_dist": [
      "Flask-Admin (>=1.5.8)",
      "Flask-Bootstrap (>=3.3.7.1)",
      "Flask-Cors (>=3.0.10)",
      "flask-mailman (>=0.3.0)",
      "Flask-Login (>=0.5.0)",
      "Flask-Migrate (>=2.7.0)",
      "Flask-SQLAlchemy (>=2.5.1)",
      "Flask-WTF (>=0.15.1)",
      "nc-console (>=0.0.4)",
      "python-dotenv (>=0.17.1)",
      "SQLAlchemy-JSONField (>=1.0.0)",
      "WTForms (<=2.3.3)",
      "WTForms-SQLAlchemy (>=0.2)",
      "pillow (>=8.3.0)",
      "Flask-Express (>=0.1.1)"
    ],
    "requires_python": ">=3.6,<4",
    "summary": "Fullstack web framework using flask",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11820343,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46600634772faa1719f0884a5f7d838d5d6901097ebacb2dd8304d06ecba7243",
          "md5": "d9f80a33e0b2f61a54a194034600fe15",
          "sha256": "aa42c585cf30628e75a57775a0787852be0d7c443dec7729aedd37bafcd80f34"
        },
        "downloads": -1,
        "filename": "Navycut-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d9f80a33e0b2f61a54a194034600fe15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 359573,
        "upload_time": "2021-08-02T11:33:22",
        "upload_time_iso_8601": "2021-08-02T11:33:22.739182Z",
        "url": "https://files.pythonhosted.org/packages/46/60/0634772faa1719f0884a5f7d838d5d6901097ebacb2dd8304d06ecba7243/Navycut-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f32827b151d4ece21756757fcb0a55d5e0d4db8cb8db49088f474327709f552d",
          "md5": "3f8f26fb1f116b918966867e5cae5d53",
          "sha256": "295cba09d6ecbb863e3b64cff58723ba5c63f2593ba2f1f904ca846091ee3e9d"
        },
        "downloads": -1,
        "filename": "Navycut-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3f8f26fb1f116b918966867e5cae5d53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 359619,
        "upload_time": "2021-08-02T14:42:50",
        "upload_time_iso_8601": "2021-08-02T14:42:50.799719Z",
        "url": "https://files.pythonhosted.org/packages/f3/28/27b151d4ece21756757fcb0a55d5e0d4db8cb8db49088f474327709f552d/Navycut-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeed4cc2ca7ad688a59b52548b07bf2b284c5d9d5e3acc1de833687662cc92f5",
          "md5": "f0f5a8e6ad0520dd90ddcd308f60ec4e",
          "sha256": "65e0071a2bd62510434e688fed6006d8447dd19e416016f1bf525ee4b8a2bce2"
        },
        "downloads": -1,
        "filename": "Navycut-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0f5a8e6ad0520dd90ddcd308f60ec4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 396677,
        "upload_time": "2021-10-25T03:26:51",
        "upload_time_iso_8601": "2021-10-25T03:26:51.500604Z",
        "url": "https://files.pythonhosted.org/packages/ee/ed/4cc2ca7ad688a59b52548b07bf2b284c5d9d5e3acc1de833687662cc92f5/Navycut-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a9fc204b3f438273515fbff4d9e5ddd0497cf232143519fbb072a5b8b1c8d5f",
          "md5": "eaaab499f2a0b4d0f38cf888ed407008",
          "sha256": "198a76b123970895d9aa4ea527577f470663ec124010999783bd66dcc859f9e3"
        },
        "downloads": -1,
        "filename": "Navycut-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "eaaab499f2a0b4d0f38cf888ed407008",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 365115,
        "upload_time": "2021-10-25T03:26:54",
        "upload_time_iso_8601": "2021-10-25T03:26:54.968885Z",
        "url": "https://files.pythonhosted.org/packages/5a/9f/c204b3f438273515fbff4d9e5ddd0497cf232143519fbb072a5b8b1c8d5f/Navycut-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1982411300dd540ba7d69f234d31dd1eb5480b4c26a3ddc4911952beb5f3cb7c",
          "md5": "b0e3387bb476af1f83cdb20adefbb557",
          "sha256": "8fc0e3f7e0042ca8c802121385f56b17c49765041873f08d00e256f99937350d"
        },
        "downloads": -1,
        "filename": "Navycut-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0e3387bb476af1f83cdb20adefbb557",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4",
        "size": 396835,
        "upload_time": "2021-10-25T07:01:22",
        "upload_time_iso_8601": "2021-10-25T07:01:22.822118Z",
        "url": "https://files.pythonhosted.org/packages/19/82/411300dd540ba7d69f234d31dd1eb5480b4c26a3ddc4911952beb5f3cb7c/Navycut-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3eccb48b2161b36fa347dae29cd3f585708e27953c247c4e3efefc3c7640268",
          "md5": "c6ae856fa4827c955296f12ee51334b8",
          "sha256": "e967d1e3f5b7909b8203c226fb61378da7170127269adaf997a9575a37facc50"
        },
        "downloads": -1,
        "filename": "Navycut-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c6ae856fa4827c955296f12ee51334b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4",
        "size": 365395,
        "upload_time": "2021-10-25T07:01:27",
        "upload_time_iso_8601": "2021-10-25T07:01:27.008886Z",
        "url": "https://files.pythonhosted.org/packages/d3/ec/cb48b2161b36fa347dae29cd3f585708e27953c247c4e3efefc3c7640268/Navycut-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1982411300dd540ba7d69f234d31dd1eb5480b4c26a3ddc4911952beb5f3cb7c",
        "md5": "b0e3387bb476af1f83cdb20adefbb557",
        "sha256": "8fc0e3f7e0042ca8c802121385f56b17c49765041873f08d00e256f99937350d"
      },
      "downloads": -1,
      "filename": "Navycut-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0e3387bb476af1f83cdb20adefbb557",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4",
      "size": 396835,
      "upload_time": "2021-10-25T07:01:22",
      "upload_time_iso_8601": "2021-10-25T07:01:22.822118Z",
      "url": "https://files.pythonhosted.org/packages/19/82/411300dd540ba7d69f234d31dd1eb5480b4c26a3ddc4911952beb5f3cb7c/Navycut-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3eccb48b2161b36fa347dae29cd3f585708e27953c247c4e3efefc3c7640268",
        "md5": "c6ae856fa4827c955296f12ee51334b8",
        "sha256": "e967d1e3f5b7909b8203c226fb61378da7170127269adaf997a9575a37facc50"
      },
      "downloads": -1,
      "filename": "Navycut-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c6ae856fa4827c955296f12ee51334b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4",
      "size": 365395,
      "upload_time": "2021-10-25T07:01:27",
      "upload_time_iso_8601": "2021-10-25T07:01:27.008886Z",
      "url": "https://files.pythonhosted.org/packages/d3/ec/cb48b2161b36fa347dae29cd3f585708e27953c247c4e3efefc3c7640268/Navycut-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}