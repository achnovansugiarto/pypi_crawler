{
  "info": {
    "author": "silkyanteater",
    "author_email": "cyclopesrufus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# QuickParse\nSimple command line argument parser for Python\n\n## Example\n\n`list_things.py`:\n```python\nfrom quickparse import QuickParse\n\ndef list_things(a_list, quickparse):\n    if quickparse.numeric:\n        if isinstance(quickparse.numeric, tuple):\n            print(', '.join(map(str, a_list[:quickparse.numeric[-1]])))\n        else:\n            print(', '.join(map(str, a_list[:quickparse.numeric])))\n    else:\n        print(\"How many items? Give a numeric value like '-3'\")\n\ncommands_config = {\n    'ls': list_things,\n    '': lambda: print(\"Command is missing, use 'ls'\"),\n}\n\nthings = ['apple', 'banana', 'blueberry', 'orange', 'pear', 'pineapple']\n\nQuickParse(commands_config).execute(things)\n```\n\nRun it:\n```sh\n$ python list_things.py ls -5\napple, banana, blueberry, orange, pear\n```\n\nThe way it works:\n- `commands_config` tells QuickParse to look for `ls` as a command and call `list_things` on it - when no commands show help\n- QuickParse parses arguments as normal while `ls` is privileged as a command\n- QuickParse finds `-5` so it adds as `quickparse.numeric = 5` (`quickparse` being the `QuickParse` instance that otherwise would come as `quickparse = QuickParse(commands_config)`)\n- QuickParse sees `list_things` being associated to `ls`, so `quickparse.execute(things)` calls it, passing on the arguments of `execute(..)` - one positional argument in this case\n- since `list_things` expects a named argument `quickparse`, QuickParse makes sure it passes on the reference to its own instance of `quickparse`\n- if there are multiple numeric flags are given all are passed down with `quickparse.numeric` in a tuple\n\n## GNU Argument Syntax implementation with extensions\nGNU Argument Syntax: https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\n\n### Extensions\n#### Numeric '-' values\n```bash\n$ my_cmd -12\n```\n#### Numeric '+' values\n```bash\n$ my_cmd +12\n```\n#### Long '-' options - only with explicit config\n```bash\n$ my_cmd -list\n```\nBy default it becomes `-l -i -s -t`, but adding `QuickParse(options_config = [ ('-list', ) ])` will stop unpacking.\n#### Long '+' options by default\n```bash\n$ my_cmd +list\n```\n#### Equivalent options - using options_config\n```bash\n$ my_cmd -l\n```\nis equivalent to\n```bash\n$ my_cmd --list\n```\nif adding `QuickParse(options_config = [ ('-l', '--list') ])`\n#### Command-subcommand hierarchy and function bindings - using commands_config\nDefining a random sample from `git` looks like this:\n```python\ncommands_config = {\n    '': do_show_help,\n    'commit': do_commit,\n    'log': do_log,\n    'stash': {\n        '': do_stash,\n        'list': do_stash_list,\n    }\n}\n\noptions_config = [\n    ('-a', '--all'),\n]\n\nQuickParse(commands_config, options_config).execute()\n```\nCommands are called according to commands_config.  \nThat is `$ git log -3` calls `do_log`  \n`do_log` may look like this:\n```python\ndef do_log(quickparse):\n    print(get_log_entries()[:quickparse.numeric])\n```\nIf there is a named argument in `do_log`'s signature called `quickparse`, the instance coming from `QuickParse(commands_config, options_config)` is passed down holding all the results of parsing.  \nParsing happens by using the defaults and applying what `options_config` adds to it.\n\n## Argument Formats\n| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Argument&nbsp;Format&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Example&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Remarks |\n| --- | --- | --- |\n| `-<number>` | `$ my_cmd -12` | (default) |\n| `+<number>` | `$ my_cmd +12` | (default) |\n| `-<single_letter>` | `$ my_cmd -x` | (default) |\n| `+<single_letter>` | `$ my_cmd +x` | (default) |\n| `-<single_letter><value>` | `$ my_cmd -nFoo` | unpacking is the default: -n -F -o<br>`options_config` needs a type entry saying it expects a value (other than bool) |\n| `+<single_letter><value>` | `$ my_cmd +nFoo` | unpacking is the default: +n +F +o<br>`options_config` needs a type entry saying it expects a value (other than bool) |\n| `-<single_letter>=<value>` | `$ my_cmd -n=Foo` | (default) |\n| `+<single_letter>=<value>` | `$ my_cmd +n=Foo` | (default) |\n| `-<single_letter> <value>` | `$ my_cmd -n Foo` | `options_config` needs a type entry saying it expects a value (other than bool) |\n| `+<single_letter> <value>` | `$ my_cmd +n Foo` | `options_config` needs a type entry saying it expects a value (other than bool) |\n| `-<letters>` | `$ my_cmd -abc` | unpacking is the default: -a -b -c<br>if in `options_config` it's taken as `-abc` |\n| `+<letters>` | `$ my_cmd +abc` | unpacking is the default: +a +b +c<br>if in `options_config` it's taken as `+abc` |\n| `-<letters>=<value>` | `$ my_cmd -name=Foo` | (default) |\n| `+<letters>=<value>` | `$ my_cmd +name=Foo` | (default) |\n| `--<letters>` | `$ my_cmd --list` | (default) |\n| `--<letters>=<value>` | `$ my_cmd --message=Bar` | (default) |\n| `--<letters> <value>` | `$ my_cmd --message Bar` | `options_config` needs a type entry saying it expects a value (other than bool) |\n| `--` | `$ my_cmd -- --param-anyway` | parameters delimiter<br>(default) |\n\n`<letters>` means [a-zA-Z] and '-'s not in the first place\n\n### An argument like '-a*' gets unpacked if...\n- '-a' is not defined to expect a value\n- the '*' part has only letters, not '-' or '='\n\n### How to change the interpretation of `-swing`\nIt can mean (default):  \n`-s -w -i -n -g`  \nor  \n`-s wing` / `-s=wing`  \nTo acheve the latter make the parser aware that '-s' expects a `str` value:\n```python\noptions_config = [\n    ('-s', str),\n]\n```\n\n### Make the parser aware that an option expects a value after a space\nAdd type explicitly in `options_config`.  \nFor just getting as it is add `str`.\n\n### How to define option types\nUse build-in types like `int` or `float`, or create a callable that raises exceptions.  \nUsing `bool` is a special case: parser will not expect a value but explicitly adds an error if one provided.\n\n### How to add empty value to an option\n`--option=`\nSome commands support '-' as empty value like `curl -C - -O http://domanin.com/`  \nTo avoid ambiguities this syntax is not supported.  \nUse `--option=` instead.\n\n## How to define options\n`options_test.py`:\n```python\nfrom quickparse import QuickParse\n\noptions_config = [\n    ('-u', '--utc', '--universal'),\n    ('-l', '--long'),\n    ('-n', '--name', str),\n]\n\nquickparse = QuickParse(options_config=options_config)\n\nprint(f'quickparse.options: {quickparse.options}')\nprint(f'quickparse.errors: {quickparse.errors}')\n```\n\nRun it:\n```bash\n$ python options_test.py\nquickparse.options: {}\nquickparse.errors: {}\n\n$ python options_test.py -u\nquickparse.options: {'-u': True, '--utc': True, '--universal': True}\nquickparse.errors: {}\n\n$ python options_test.py -ul\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True}\nquickparse.errors: {}\n\n$ python options_test.py -uln\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '-n': True, '--name': True}\nquickparse.errors: {'-n': {'type': 1, 'message': \"No value got for '-n/--name' - validator: str\"}, '--name': {'type': 1, 'message': \"No value got for '-n/--name' - validator: str\"}}\n\n$ python options_test.py -ul -nthe_name\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '-n': 'the_name', '--name': 'the_name'}\nquickparse.errors: {}\n\n$ python options_test.py -ul -n the_name\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '-n': 'the_name', '--name': 'the_name'}\nquickparse.errors: {}\n\n$ python options_test.py -ul -n=the_name\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '-n': 'the_name', '--name': 'the_name'}\nquickparse.errors: {}\n\n$ python options_test.py -ul --name the_name\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '--name': 'the_name', '-n': 'the_name'}\nquickparse.errors: {}\n\n$ python options_test.py -ul --name=the_name\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '--name': 'the_name', '-n': 'the_name'}\nquickparse.errors: {}\n```\n\n## Test your command line arguments\n`quickparse_test_args.py` (committed in the repo):\n```python\nfrom pprint import pformat\n\nfrom quickparse import QuickParse\n\n\ndef do_show_help():\n    print(\"Executing 'do_show_help'...\")\n\ndef do_commit():\n    print(\"Executing 'do_commit'...\")\n\ndef do_log(quickparse):\n    print(\"Executing 'do_log'...\")\n\ndef do_stash():\n    print(\"Executing 'do_stash'...\")\n\ndef do_stash_list():\n    print(\"Executing 'do_stash_list'...\")\n\ncommands_config = {\n    '': do_show_help,\n    'commit': do_commit,\n    'log': do_log,\n    'stash': {\n        '': do_stash,\n        'list': do_stash_list,\n    }\n}\n\noptions_config = [\n    ('-m', '--message', str),\n    ('-p', '--patch'),\n]\n\n\nquickparse = QuickParse(commands_config, options_config)\n\n\nprint(f'Commands:\\n{pformat(quickparse.commands)}')\nprint(f'Parameters:\\n{pformat(quickparse.parameters)}')\nprint(f'Options:\\n{pformat(quickparse.options)}')\nprint(f'\\'-\\' numeric argument:\\n{pformat(quickparse.numeric)}')\nprint(f'\\'+\\' numeric argument:\\n{pformat(quickparse.plusnumeric)}')\nprint(f'Functions to call:\\n{pformat(quickparse.to_execute)}')\n\nquickparse.execute()\n```\n\n## Error handling\n\nIf the parser parameters 'commands_config' or 'options_config' are not valid, ValueError is rased from the underlying AssertionError.  \nIf the arguments are not compliant with the config (e.g. no value provided for an option that requires one) then no exceptions are raised but an `errors` list is populated on the `QuickParse` object.\n\nSee the error object again from `options_test.py`\n\n```bash\n$ python options_test.py -uln\nquickparse.options: {'-u': True, '--utc': True, '--universal': True, '-l': True, '--long': True, '-n': True, '--name': True}\nquickparse.errors: {'-n': {'type': 1, 'message': \"No value got for '-n/--name' - validator: str\"}, '--name': {'type': 1, 'message': \"No value got for '-n/--name' - validator: str\"}}\n```\n\n`quickparse.errors` dict is about validation of options. These are the types:\n```python\nERROR_TYPE_VALIDATION = 0\nERROR_VALUE_NOT_FOUND = 1\nERROR_INCOMPLETE_COMMAND = 2\n```\n\nquickparse.has_errors is also available to check if any errors occurred.\n\n## Validation\nWell, I still need to elaborate the docs on this but here is a quick example snippet.  \n```python\nquickparse.validate({\n    'parameters': { 'mincount': 1, },\n    'options': {\n        'mandatory': '--branch',\n        'optional': '--stage',\n    },\n    'numeric': { 'maxcount': 0 },\n    'plusnumeric': { 'maxcount': 0 },\n})\nassert 'parameters.mincount' not in quickparse.errors, f'Add a target'\nassert not quickparse.has_errors, '\\n'.join(quickparse.error_messages)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/silkyanteater/quickparse",
    "keywords": "command line,argument,parser",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quickparse",
    "package_url": "https://pypi.org/project/quickparse/",
    "platform": "",
    "project_url": "https://pypi.org/project/quickparse/",
    "project_urls": {
      "Homepage": "https://github.com/silkyanteater/quickparse",
      "Repository": "https://github.com/silkyanteater/quickparse"
    },
    "release_url": "https://pypi.org/project/quickparse/0.9.1/",
    "requires_dist": null,
    "requires_python": ">=3.5,<4.0",
    "summary": "Simple command line argument parser for Python",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9542718,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "372ead4181c1b8bcff2462b76b8f8813ec9bb460a278ec6c920bd7ebb1d706f2",
          "md5": "9e4d704a474791ac9a1d191fc8df5a3d",
          "sha256": "cbc6363b968b094faf8355634dd4e2a4dfb1eb62bddf6967b7603bc9bc030c6b"
        },
        "downloads": -1,
        "filename": "quickparse-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e4d704a474791ac9a1d191fc8df5a3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5,<4.0",
        "size": 10910,
        "upload_time": "2021-02-14T16:09:49",
        "upload_time_iso_8601": "2021-02-14T16:09:49.571644Z",
        "url": "https://files.pythonhosted.org/packages/37/2e/ad4181c1b8bcff2462b76b8f8813ec9bb460a278ec6c920bd7ebb1d706f2/quickparse-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "362d70925110c93cc1f88aea514740c3ffba627f188c166528399c624487fed4",
          "md5": "de1651c002b1bc9d967432d12e54e7d6",
          "sha256": "4f248d1cf58280781dfc032d1e52b0147a21baf4620fb6a25d017f28c6fcba50"
        },
        "downloads": -1,
        "filename": "quickparse-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de1651c002b1bc9d967432d12e54e7d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5,<4.0",
        "size": 13797,
        "upload_time": "2021-02-14T16:09:50",
        "upload_time_iso_8601": "2021-02-14T16:09:50.965391Z",
        "url": "https://files.pythonhosted.org/packages/36/2d/70925110c93cc1f88aea514740c3ffba627f188c166528399c624487fed4/quickparse-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "266f60e2cb2845a6bc0cce6b24ce3a4a150e653c5ea89c8dc40fe11f76032a6e",
          "md5": "6b091819f5827bb033519dfad86e9edf",
          "sha256": "4578732e6ecbf3dfb54f5900ac825c9548efc02606339c7fcc3d9071be3b8cf5"
        },
        "downloads": -1,
        "filename": "quickparse-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b091819f5827bb033519dfad86e9edf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5,<4.0",
        "size": 11253,
        "upload_time": "2021-02-27T16:11:05",
        "upload_time_iso_8601": "2021-02-27T16:11:05.694345Z",
        "url": "https://files.pythonhosted.org/packages/26/6f/60e2cb2845a6bc0cce6b24ce3a4a150e653c5ea89c8dc40fe11f76032a6e/quickparse-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72cdf1c04e06c3cfb7e65368490f828002438a4c4680c3f245c865150d29a4be",
          "md5": "0866ec465c1528ced824b67724cbaf72",
          "sha256": "86d4b923378a40b3ff030af3b3f7769a6ef4f6ac29eb261d06acfcc0190f4ec5"
        },
        "downloads": -1,
        "filename": "quickparse-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0866ec465c1528ced824b67724cbaf72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5,<4.0",
        "size": 14420,
        "upload_time": "2021-02-27T16:11:07",
        "upload_time_iso_8601": "2021-02-27T16:11:07.191079Z",
        "url": "https://files.pythonhosted.org/packages/72/cd/f1c04e06c3cfb7e65368490f828002438a4c4680c3f245c865150d29a4be/quickparse-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "266f60e2cb2845a6bc0cce6b24ce3a4a150e653c5ea89c8dc40fe11f76032a6e",
        "md5": "6b091819f5827bb033519dfad86e9edf",
        "sha256": "4578732e6ecbf3dfb54f5900ac825c9548efc02606339c7fcc3d9071be3b8cf5"
      },
      "downloads": -1,
      "filename": "quickparse-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b091819f5827bb033519dfad86e9edf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5,<4.0",
      "size": 11253,
      "upload_time": "2021-02-27T16:11:05",
      "upload_time_iso_8601": "2021-02-27T16:11:05.694345Z",
      "url": "https://files.pythonhosted.org/packages/26/6f/60e2cb2845a6bc0cce6b24ce3a4a150e653c5ea89c8dc40fe11f76032a6e/quickparse-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72cdf1c04e06c3cfb7e65368490f828002438a4c4680c3f245c865150d29a4be",
        "md5": "0866ec465c1528ced824b67724cbaf72",
        "sha256": "86d4b923378a40b3ff030af3b3f7769a6ef4f6ac29eb261d06acfcc0190f4ec5"
      },
      "downloads": -1,
      "filename": "quickparse-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0866ec465c1528ced824b67724cbaf72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5,<4.0",
      "size": 14420,
      "upload_time": "2021-02-27T16:11:07",
      "upload_time_iso_8601": "2021-02-27T16:11:07.191079Z",
      "url": "https://files.pythonhosted.org/packages/72/cd/f1c04e06c3cfb7e65368490f828002438a4c4680c3f245c865150d29a4be/quickparse-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}