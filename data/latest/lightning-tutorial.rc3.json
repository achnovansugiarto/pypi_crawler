{
  "info": {
    "author": "Michael E. Vinyard - Harvard University - Massachussetts General Hospital - Broad Institute of MIT and Harvard",
    "author_email": "mvinyard@broadinstitute.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# ⚡ lightning-tutorial\n\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/lightning-tutorial.svg)](https://pypi.python.org/pypi/lightning-tutorial/)\n[![PyPI version](https://badge.fury.io/py/lightning-tutorial.svg)](https://badge.fury.io/py/lightning-tutorial)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n### Installation of the partner package\n\n```BASH\npip install lightning-tutorial\n```\n\n### Table of contents\n\n* [PyTorch Datasets and DataLoaders](#pytorch-datasets-and-dataloaders)\n    * Key module: `torch.utils.data.Dataset`\n    * Key module: `torch.utils.data.DataLoader`\n    * Other essential functions\n    \n* [Single-cell data structures meet pytorch: `torch-adata`](#single-cell-data-structures-meet-pytorch-torch-adata)\n* [Lightning basics and the `LightningModule`](#lightning-basics-and-the-lightningmodule)\n* [`LightningDataModule`](#lightningdatamodule)\n\n\n## PyTorch Datasets and DataLoaders\n\n### Key module: `torch.utils.data.Dataset`\n\nThe `Dataset` module is an overwritable python module. You can modify it at will as long as you maintain the following three class methods:\n1. `__init__`\n2. `__len__`\n3. `__getitem__`\n\nThese are name-specific handles used by `torch` under the hood when passing data through a model.\n\n```python\nfrom torch.utils.data import Dataset\n\nclass TurtleData(Dataset):\n    def __init__(self):\n        \"\"\"\n        here we should pass requisite arguments\n        that enable __len__() and __getitem__()\n        \"\"\"\n        \n    def __len__(self):\n        \"\"\"\n        Returns the length/size/# of samples in the dataset.\n        e.g., a 20,000 cell dataset would return `20_000`.\n        \"\"\"\n        return # len\n    \n    def __getitem__(self, idx):\n        \"\"\"\n        Subset and return a batch of the data.\n        \n        `idx` is the batch index (# of idx values = batch size). \n        Maximum `idx` passed is <= `self.__len__()`\n        \"\"\"\n        return # sampled data\n```\n\n* [Fantastic PyTorch `Dataset` tutorial from Stanford](https://stanford.edu/~shervine/blog/pytorch-how-to-generate-data-parallel)\n\n* **Try it for yourself!** [**Colab `Dataset` tutorial notebook**](https://colab.research.google.com/github/mvinyard/lightning-tutorial/blob/main/notebooks/tutorial_nb.01.pytorch_datasets.ipynb)\n\n\n### Key module: `torch.utils.data.DataLoader`\n\nSimilar to the usefulness of `AnnData`, the `Dataset` module creates a base unit for distributing and handling data. We can then take advantage of several torch built-ins to enable not only more organized, but faster data processing.\n\n```python\nfrom torch.utils.data import DataLoader\n\ndataset = TurtleData()\ndata_size = dataset.__len__()\nprint(data_size)\n```\n```\n20_000\n```\n\n### Other essential functions\n\n```python\nfrom torch.utils.data import random_split\n\ntrain_dataset, val_dataset = random_split(dataset, [18_000, 2_000])\n\n# this can then be fed to a DataLoader, as above\ntrain_loader = DataLoader(train_dataset)\nval_loader = DataLoader(val_dataset)\n```\n\n### Useful tutorials and documentation\n\n* **Parent module**: [`torch.utils.data`](https://pytorch.org/docs/stable/data.html)\n* **[Datasets and DataLoaders tutorial](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html)**\n\n[☝️ back to table of contents](#table-of-contents)\n\n## Single-cell data structures meet pytorch: `torch-adata`\n# ![torch-adata-logo](https://github.com/mvinyard/torch-adata/blob/main/docs/imgs/torch-adata.logo.large.svg)\n\n*Create pytorch Datasets from* [`AnnData`](https://anndata.readthedocs.io/en/latest/)\n\n### Installation\n- **Note**: This is already done for you, if you've installed this tutorials associated package\n```\npip install torch-adata\n```\n\n<a href=\"https://github.com/mvinyard/torch-adata/\" ><img alt=\"torch-adata-concept-overview\" src=\"https://github.com/mvinyard/torch-adata/blob/main/docs/imgs/torch-adata.concept_overview.svg\" width=\"600\" /></a>\n\n### Example use of the base class\n\nThe base class, `AnnDataset` is a subclass of the widely-used `torch.utils.data.Dataset`. \n\n```python\nimport anndata as a\nimport torch_adata\n\nadata = a.read_h5ad(\"/path/to/data.h5ad\")\ndataset = torch_adata.AnnDataset(adata)\n```\n\nReturns sampled data `X_batch` as a `torch.Tensor`.\n```python\n# create a dummy index\nidx = np.random.choice(range(dataset.__len__()), 5)\nX_batch = dataset.__getitem__(idx)\n```\n\n#### `TimeResolvedAnnDataset`\n\nSpecialized class for time-resolved datasets. A subclass of the class, `AnnDataset`.\n\n```python\nimport anndata as a\nimport torch_adata as ta\n\nadata = a.read_h5ad(\"/path/to/data.h5ad\")\ndataset = torch_adata.TimeResolvedAnnDataset(adata, time_key=\"Time point\")\n```\n\n[☝️ back to table of contents](#table-of-contents)\n\n\n## Lightning basics and the [`LightningModule`](https://pytorch-lightning.readthedocs.io/en/stable/common/lightning_module.html)\n\n\n```python\nfrom pytorch_lightning imoport LightningModule\n\nclass YourSOTAModel(LightningModule):\n    def __init__(self,\n                 net,\n                 optimizer_kwargs={\"lr\":1e-3},\n                 scheduler_kwargs={},\n                ):\n        super().__init__()\n        \n        self.net = net\n        self.optimizer_kwargs = optimizer_kwargs\n        self.scheduler_kwargs = scheduler_kwargs\n        \n        \n    def forward(self, batch):\n        \n        x, y = batch\n        \n        y_hat = self.net(x)\n        loss  = LossFunc(y_hat, y)\n        \n        return y_hat, loss\n        \n    def training_step(self, batch, batch_idx):\n        \n        y_hat, loss = self.forward(batch)\n        \n        return loss.sum()\n    \n    def validation_step(self, batch, batch_idx):\n        \n        y_hat, loss = self.forward(batch)\n        \n        return loss.sum()\n    \n    def test_step(self, batch, batch_idx):\n        \n        y_hat, loss = self.forward(batch)\n        \n        return loss.sum()\n    \n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(self.parameters(), **self._optim_kwargs)\n        scheduler = torch.optim.lr_scheduler.StepLR(optimizer(), **self._scheduler_kwargs)\n        \n        return [optimizer, ...], [scheduler, ...]\n```\n\n#### Additional useful documentation and standalone tutorials\n\n* [Lightning in 15 minutes](https://pytorch-lightning.readthedocs.io/en/stable/starter/introduction.html)\n* [Logging metrics at each epoch](https://pytorch-lightning.readthedocs.io/en/stable/common/lightning_module.html#train-epoch-level-metrics)\n\n[☝️ back to table of contents](#table-of-contents)\n\n\n## [`LightningDataModule`](https://pytorch-lightning.readthedocs.io/en/stable/notebooks/lightning_examples/datamodules.html)\n\n**Purpose**: Make your model independent of a given dataset, while at the same time making your dataset reproducible and perhaps just as important: **easily shareable**.\n\n```python\nfrom pytorch_lightning import LightningDataModule\nfrom torch.data.utils import DataLoader\n\nclass YourDataModule(LightningDataModule):\n    \n    def __init__(self):\n        # define any setup computations\n        \n    def prepare_data(self):        \n        # download data if applicable\n        \n    def setup(self, stage):\n        # assign data to `Dataset`(s)\n        \n    def train_dataloader(self):\n        return DataLoader(self.train_dataset, batch_size=self.batch_size, num_workers=self.num_workers)\n        \n    def val_dataloader(self):\n        return DataLoader(self.val_dataset, batch_size=self.batch_size, num_workers=self.num_workers)\n        \n    def test_dataloader(self):\n        return DataLoader(self.test_dataset, batch_size=self.batch_size, num_workers=self.num_workers)\n        \n```\n\nWhen it comes to actually using one of these, it looks something like the following:\n\n```python\n# Init the LightningDataModule as well as the LightningModel\ndata = YourDataModule()\nmodel = YourLightningModel()\n\n# Define trainer\ntrainer = Trainer(accelerator=\"auto\", devices=1)\n\n# Ultimately, both  model and data are passed as an arg to trainer.fit\ntrainer.fit(model, data)\n```\n\n* [Official `LightningDataModule` documentation](https://pytorch-lightning.readthedocs.io/en/stable/notebooks/lightning_examples/datamodules.html)\n\n\nHere's an example of a `LightningDataModule` implemented in practice, using the LARRY single-cell dataset: [**link**](https://github.com/mvinyard/LARRY-dataset). Initial downloading and formatting occurs only once but takes several minutes so we will leave it outside the scope of this tutorial.\n\n[☝️ back to table of contents](#table-of-contents)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mvinyard/vinplots",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lightning-tutorial",
    "package_url": "https://pypi.org/project/lightning-tutorial/",
    "platform": null,
    "project_url": "https://pypi.org/project/lightning-tutorial/",
    "project_urls": {
      "Homepage": "https://github.com/mvinyard/vinplots"
    },
    "release_url": "https://pypi.org/project/lightning-tutorial/0.0.2/",
    "requires_dist": [
      "torch (>=1.12.1)",
      "pytorch-lightning (>=1.7.4)",
      "scanpy (>=1.9.1)",
      "nb-black (>=0.7)",
      "torch-adata (>=0.0.12)",
      "vinplots (>=0.0.72)",
      "torch-composer (>=0.0.3)",
      "larry-dataset (>=0.0.1)"
    ],
    "requires_python": ">3.7.0",
    "summary": "pytorch-lightning tutorial",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15086938,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ae8d7d3c61e85197dd8289f8d1dada3069ab419e012ee52fff0f6369e6f9ce7",
          "md5": "82dc053ae84eb91f9ecb5c44cbdeb048",
          "sha256": "cd1a877859c4f2eae311a7f3a5f71192824de83cdf03a8a0674adb899d98ecde"
        },
        "downloads": -1,
        "filename": "lightning_tutorial-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82dc053ae84eb91f9ecb5c44cbdeb048",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7.0",
        "size": 2434,
        "upload_time": "2022-09-06T00:21:35",
        "upload_time_iso_8601": "2022-09-06T00:21:35.454121Z",
        "url": "https://files.pythonhosted.org/packages/8a/e8/d7d3c61e85197dd8289f8d1dada3069ab419e012ee52fff0f6369e6f9ce7/lightning_tutorial-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "398e960b39af0a92074d3f82ff83e5cd7693fd5f438552e565e2d9d510515dc9",
          "md5": "b006806ca9a4079e50dfc757d7e9c1fe",
          "sha256": "f0c712517c88b81b83e9be0ea350721582cc5503e4b6e5f295f2591824daf97e"
        },
        "downloads": -1,
        "filename": "lightning-tutorial-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b006806ca9a4079e50dfc757d7e9c1fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7.0",
        "size": 2070,
        "upload_time": "2022-09-06T00:21:36",
        "upload_time_iso_8601": "2022-09-06T00:21:36.958222Z",
        "url": "https://files.pythonhosted.org/packages/39/8e/960b39af0a92074d3f82ff83e5cd7693fd5f438552e565e2d9d510515dc9/lightning-tutorial-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ced5aeb8095ab8e4e477f49373cd7eacc30aa93c8ff0245c623f77c008ffd788",
          "md5": "4c9f601bf6de4ceb3c922157cd1ab0cb",
          "sha256": "e186dfbf2b53b0f8fb464cab1a4e8027fbc81ef14f6e2f7a1d2cd19f8408c514"
        },
        "downloads": -1,
        "filename": "lightning_tutorial-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c9f601bf6de4ceb3c922157cd1ab0cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7.0",
        "size": 5475,
        "upload_time": "2022-09-14T04:33:07",
        "upload_time_iso_8601": "2022-09-14T04:33:07.286521Z",
        "url": "https://files.pythonhosted.org/packages/ce/d5/aeb8095ab8e4e477f49373cd7eacc30aa93c8ff0245c623f77c008ffd788/lightning_tutorial-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95a9634c9e1c5e70b89c833d548100009487bbe91e4a49599d5096d4d0e94f6e",
          "md5": "e69bac18cf335eedbec04e65480ac4e4",
          "sha256": "d04754ee7d51a1540fa99aa122445c8d44a1cc70cff425d415e75ebbf8a2e0a8"
        },
        "downloads": -1,
        "filename": "lightning-tutorial-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e69bac18cf335eedbec04e65480ac4e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7.0",
        "size": 5309,
        "upload_time": "2022-09-14T04:33:08",
        "upload_time_iso_8601": "2022-09-14T04:33:08.749737Z",
        "url": "https://files.pythonhosted.org/packages/95/a9/634c9e1c5e70b89c833d548100009487bbe91e4a49599d5096d4d0e94f6e/lightning-tutorial-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9eb7656ba3abc165f7b47cd713abde3c5204903f86b70238c7639473403b968",
          "md5": "385e05e49d6a348e9bf646810f38815a",
          "sha256": "f487cdfe9b850d7be83bb5605cbdab3619647f28e0a3d6a3e41e2c8a52c6d245"
        },
        "downloads": -1,
        "filename": "lightning_tutorial-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "385e05e49d6a348e9bf646810f38815a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.7.0",
        "size": 6819,
        "upload_time": "2022-09-14T04:41:23",
        "upload_time_iso_8601": "2022-09-14T04:41:23.713241Z",
        "url": "https://files.pythonhosted.org/packages/c9/eb/7656ba3abc165f7b47cd713abde3c5204903f86b70238c7639473403b968/lightning_tutorial-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "420f67ba40262b7af0143741a1c72cc52af302a585c11de7ce552965600da777",
          "md5": "0fa1d77e28fad645e749188fb5dcbf33",
          "sha256": "8b2bdfc5124431893dca0dc51807dabc858399ec65041b7ab34a17ecb35bf524"
        },
        "downloads": -1,
        "filename": "lightning-tutorial-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0fa1d77e28fad645e749188fb5dcbf33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7.0",
        "size": 6464,
        "upload_time": "2022-09-14T04:41:25",
        "upload_time_iso_8601": "2022-09-14T04:41:25.164355Z",
        "url": "https://files.pythonhosted.org/packages/42/0f/67ba40262b7af0143741a1c72cc52af302a585c11de7ce552965600da777/lightning-tutorial-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9eb7656ba3abc165f7b47cd713abde3c5204903f86b70238c7639473403b968",
        "md5": "385e05e49d6a348e9bf646810f38815a",
        "sha256": "f487cdfe9b850d7be83bb5605cbdab3619647f28e0a3d6a3e41e2c8a52c6d245"
      },
      "downloads": -1,
      "filename": "lightning_tutorial-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "385e05e49d6a348e9bf646810f38815a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.7.0",
      "size": 6819,
      "upload_time": "2022-09-14T04:41:23",
      "upload_time_iso_8601": "2022-09-14T04:41:23.713241Z",
      "url": "https://files.pythonhosted.org/packages/c9/eb/7656ba3abc165f7b47cd713abde3c5204903f86b70238c7639473403b968/lightning_tutorial-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "420f67ba40262b7af0143741a1c72cc52af302a585c11de7ce552965600da777",
        "md5": "0fa1d77e28fad645e749188fb5dcbf33",
        "sha256": "8b2bdfc5124431893dca0dc51807dabc858399ec65041b7ab34a17ecb35bf524"
      },
      "downloads": -1,
      "filename": "lightning-tutorial-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0fa1d77e28fad645e749188fb5dcbf33",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.7.0",
      "size": 6464,
      "upload_time": "2022-09-14T04:41:25",
      "upload_time_iso_8601": "2022-09-14T04:41:25.164355Z",
      "url": "https://files.pythonhosted.org/packages/42/0f/67ba40262b7af0143741a1c72cc52af302a585c11de7ce552965600da777/lightning-tutorial-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}