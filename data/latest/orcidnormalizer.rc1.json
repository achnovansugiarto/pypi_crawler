{
  "info": {
    "author": "JT",
    "author_email": "justus.taeger@helmholtz-muenchen.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# 1. OrcidNormalizer\n\nMaintainer: taeger@dzd-ev.de  \nStatus: RC1\n\nThe purpose for this module is to normalize [ORCID](https://orcid.org/)s and bring them into a coherent (and thefore the official) ISNI format:\n\nhttp://orcid.org/0000-0000-0000-000(0/X)\n\nWhat is [ORCID](https://info.orcid.org/what-is-orcid/)?\n\n# 2. Table of content\n\n- [1. OrcidNormalizer](#1-orcidnormalizer)\n- [2. Table of content](#2-table-of-content)\n- [3. Introduction](#3-introduction)\n  - [3.1. Overview](#31-overview)\n  - [3.2. Problems](#32-problems)\n  - [3.3. Solution](#33-solution)\n- [4. Usage](#4-usage)\n  - [4.1 Install](#41-install)\n  - [4.2 Apply](#42-apply)\n  - [4.3 API](#43-api)\n    - [Orcid.uri - Uniform Resource Identifier](#orciduri---uniform-resource-identifier)\n    - [Orcid.urn - Uniform Resource Name](#orcidurn---uniform-resource-name)\n    - [Orcid.is_valid()](#orcidis_valid)\n    - [Orcid.RAISE_EXCEPTION_ON_UNPARSABLE_ORCID_STRING](#orcidraise_exception_on_unparsable_orcid_string)\n    - [Orcid.RETURN_VAL_ON_UNPARSABLE](#orcidreturn_val_on_unparsable)\n\n# 3. Introduction\n\n## 3.1. Overview\n\nThis small python project is part of our [pipeline](https://git.connect.dzd-ev.de/dzdconnectpipeline/pipeline) to integrate a large number of PUBMED-articles (free database for medical journal articles etc.) into a database. ORCID stands for 'Open Researcher and Contributor ID' and is used to accurately connect an author to their work. This is usefull/important in cases where two or more researchers/scients share the same the name, which leads to the problem which author wrote which paper. \n\n## 3.2. Problems\n\nWhen registering your article at PUBMED the ORCID-parameter is an optional textfield, which leads to multiple challenges. Due to the fact that we are dealing with user input everything is possible, from no numbers, to email addresses to abstracts etc. Therefore a tool to clean valid entries and skip invalid entries seems usefull.\n\n## 3.3. Solution\n\nFor the sake of performance the tests that are performed on the entry are fairly simple and straight forward. \n\nRemember: The officials ORCID consists of 16 digits in groups of 4 or 15 digits and an 'X' due to the checksum. If you are interested you can refer to the following documentaion: why ['X'](https://support.orcid.org/hc/en-us/articles/360053289173-Why-does-my-ORCID-iD-have-an-X-) and how to calculate the [checksum](https://support.orcid.org/hc/en-us/articles/360006897674-Structure-of-the-ORCID-Identifier)\n\n- If the input is not a string the input is invalid\n- If there are more than 16 digits in the input string the input is invalid\n- If there are 16 or more digits and an 'x' or 'X' **anywhere** in the input the input is invalid\n- If there is an 'x' or 'X' somewhere in the input the 'x'/'X' will be used as the checksum test (last digit) of the input\n- If there are less digits the input is padded left with 0s\n\nInput Examples \n\nvalid:\n\n- OrcidID(\"http://orcid.org/0000-0001-5000-0074\") --> valid \n- OrcidID(\"0001-5000-0074\") --> valid, padded with 0s \n- OrcidID(\"0001-5000-0074 peter123@net\") --> vaild 15 digits + padding\n\ninvalid (will raise ValueError):\n\n- OrcidID(\"http://orcid.org/0000-0001-5000-0074-0235\") --> invalid, too many digits\n- OrcidID(\"http://orcid.org/0000-0001-5000-0074 pete123@mail.net\") --> invalid, too many digits \n- OrcidID(\"http://orcid.org/0000-0001-5000-0074X\") --> invalid, too many digits and 'x'/'X' \n- OrcidID(1234123412341234) --> invalid, input is not a string\n\n---\n\nThe valid inputs will then be tested via checksum test (https://support.orcid.org/hc/en-us/articles/360006897674-Structure-of-the-ORCID-Identifier) \nThe chance of a false positive is 1 in 11\n\n\n\n# 4. Usage\n\nRequirements: \n\n* Python3 with pip installed\n\n## 4.1 Install\n\n`pip3 install OrcidNormalizer`\n\n## 4.2 Apply\nCreate an instance for every orcid id and normalize the input\n\n```python\nfrom OrcidNormalizer import Orcid\n\nid = OrcidID(\"0000000150000074\")\nid.uri()\n\n> \"https://orcid.org/0000-0001-5000-0074\"\n```\n\n## 4.3 API\n\n### Orcid.uri - Uniform Resource Identifier\n\nReturn the full [INSI](https://en.wikipedia.org/wiki/International_Standard_Name_Identifier) formated OCRID\n\n```python\nfrom OrcidNormalizer import Orcid\n\nid = Orcid(\"0000000150000074\")\nid.uri()\n```\n> https://orcid.org/0000-0001-5000-0074\n\n\n### Orcid.urn - Uniform Resource Name\n\nReturn the Uniform Resource Name part only\n\n```python\nfrom OrcidNormalizer import Orcid\n\nid = Orcid(\"0000000150000074\")\nid.uri()\n```\n> 0000-0001-5000-0074\n### Orcid.is_valid()\n\nDoes a checksum validation according to https://support.orcid.org/hc/en-us/articles/360006897674-Structure-of-the-ORCID-Identifier#checksum\n\n```python\nfrom OrcidNormalizer import Orcid\n\nid = Orcid(\"https://orcid.org/1-5000-0074\")\nid.is_valid()\n```\n> True\n\n### Orcid.RAISE_EXCEPTION_ON_UNPARSABLE_ORCID_STRING\n\nIf a string is unparsable `OrcidNormalizer`.`Orcid` will raise an exception. In large batch operations it can be conveineint to override this behaviour. Set to `False` to return `OrcidNormalizer`.`Orcid`.`RETURN_VAL_ON_UNPARSABLE` instead of raising an exception.\n\n### Orcid.RETURN_VAL_ON_UNPARSABLE\n\nSee `Orcid`.`RAISE_EXCEPTION_ON_UNPARSABLE_ORCID_STRING`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.connect.dzd-ev.de/dzdpythonmodules/dzdutils",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OrcidNormalizer",
    "package_url": "https://pypi.org/project/OrcidNormalizer/",
    "platform": null,
    "project_url": "https://pypi.org/project/OrcidNormalizer/",
    "project_urls": {
      "Homepage": "https://git.connect.dzd-ev.de/dzdpythonmodules/dzdutils"
    },
    "release_url": "https://pypi.org/project/OrcidNormalizer/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Tool no normalize orcids",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13759332,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18dcb0eabc437296dd8267420a2ee7125057259dfbff8ec9b35d0a2a8f645b9",
          "md5": "aa7035016920521a0bcb6ed4529ef70b",
          "sha256": "7cd12f6193204f99019f831eb113ea47099a10a4149362b2d34322236892399e"
        },
        "downloads": -1,
        "filename": "OrcidNormalizer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa7035016920521a0bcb6ed4529ef70b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5659,
        "upload_time": "2022-05-09T14:12:02",
        "upload_time_iso_8601": "2022-05-09T14:12:02.771810Z",
        "url": "https://files.pythonhosted.org/packages/b1/8d/cb0eabc437296dd8267420a2ee7125057259dfbff8ec9b35d0a2a8f645b9/OrcidNormalizer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5884fb390c72b20bc0846038a18d09ca7439a56874c89af3429ad27105360562",
          "md5": "521f3e757eaf3528a557b2578c4aea5b",
          "sha256": "82c280e8cc997ff85ee3652d2f3e6ad3b6c730439eeab786e77c28b71eaf606b"
        },
        "downloads": -1,
        "filename": "OrcidNormalizer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "521f3e757eaf3528a557b2578c4aea5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8165,
        "upload_time": "2022-05-09T14:12:04",
        "upload_time_iso_8601": "2022-05-09T14:12:04.542879Z",
        "url": "https://files.pythonhosted.org/packages/58/84/fb390c72b20bc0846038a18d09ca7439a56874c89af3429ad27105360562/OrcidNormalizer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b18dcb0eabc437296dd8267420a2ee7125057259dfbff8ec9b35d0a2a8f645b9",
        "md5": "aa7035016920521a0bcb6ed4529ef70b",
        "sha256": "7cd12f6193204f99019f831eb113ea47099a10a4149362b2d34322236892399e"
      },
      "downloads": -1,
      "filename": "OrcidNormalizer-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aa7035016920521a0bcb6ed4529ef70b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5659,
      "upload_time": "2022-05-09T14:12:02",
      "upload_time_iso_8601": "2022-05-09T14:12:02.771810Z",
      "url": "https://files.pythonhosted.org/packages/b1/8d/cb0eabc437296dd8267420a2ee7125057259dfbff8ec9b35d0a2a8f645b9/OrcidNormalizer-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5884fb390c72b20bc0846038a18d09ca7439a56874c89af3429ad27105360562",
        "md5": "521f3e757eaf3528a557b2578c4aea5b",
        "sha256": "82c280e8cc997ff85ee3652d2f3e6ad3b6c730439eeab786e77c28b71eaf606b"
      },
      "downloads": -1,
      "filename": "OrcidNormalizer-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "521f3e757eaf3528a557b2578c4aea5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8165,
      "upload_time": "2022-05-09T14:12:04",
      "upload_time_iso_8601": "2022-05-09T14:12:04.542879Z",
      "url": "https://files.pythonhosted.org/packages/58/84/fb390c72b20bc0846038a18d09ca7439a56874c89af3429ad27105360562/OrcidNormalizer-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}