{
  "info": {
    "author": "Louis Leseur",
    "author_email": "louis.leseur@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Boot",
      "Topic :: System :: Boot :: Init",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "============\ncmkinitramfs\n============\n\n|github version badge|\n|pypi version badge|\n|qa badge|\n|doc badge|\n|py version badge|\n|py implementation badge|\n\nTools to generate an initramfs from a configuration file.\n\nDocumentation is available at https://cmkinitramfs.readthedocs.io/.\n\n.. |github version badge| image:: https://badge.fury.io/gh/teapot9%2Fcmkinitramfs.svg\n   :target: https://github.com/teapot9/cmkinitramfs\n   :alt: Github repository\n\n.. |pypi version badge| image:: https://badge.fury.io/py/cmkinitramfs.svg\n   :target: https://pypi.org/project/cmkinitramfs/\n   :alt: PyPI package\n\n.. |qa badge| image:: https://github.com/teapot9/cmkinitramfs/actions/workflows/qa.yml/badge.svg\n   :target: https://github.com/teapot9/cmkinitramfs/actions/workflows/qa.yml\n   :alt: Quality assurance\n\n.. |doc badge| image:: https://readthedocs.org/projects/cmkinitramfs/badge/?version=latest\n   :target: https://cmkinitramfs.readthedocs.io/en/latest/\n   :alt: Documentation status\n\n.. |py version badge| image:: https://img.shields.io/pypi/pyversions/cmkinitramfs.svg\n   :alt: Python version\n\n.. |py implementation badge| image:: https://img.shields.io/pypi/implementation/cmkinitramfs.svg\n   :alt: Python implementation\n\nAbout\n=====\n\nThis project provides three main executables:\n``cmkinit``, ``cmkcpiodir`` and ``cmkcpiolist``.\n\n``cmkinit`` builds an init script from a configuration file.\n\n``cmkcpiodir`` and ``cmkcpiolist`` build an initramfs,\nincluding the init script, from the same configuration file.\n``cmkcpiodir`` builds the initramfs into a directory on a filesystem,\nand generates the CPIO archive from it.\n``cmkcpiolist`` builds a CPIO list, using the same format as Linux kernel's\n``gen_init_cpio`` utility, and generates the CPIO archive using\n``gen_init_cpio``. See `the corresponding Linux kernel documentation`__\nfor more information.\n\n.. __: https://www.kernel.org/doc/html/latest/filesystems/ramfs-rootfs-initramfs.html\n\n\nInstallation\n============\n\nCompatibility\n-------------\n\nPython version: this library is compatible with\n**Python â‰¥ 3.7**.\n\nPython implementation: this library is compatible with\n**CPython** and **PyPy**.\n\nDependencies\n------------\n\nPython dependencies:\n\n - bin (mkcpiodir and mkcpiolist) dependencies:\n\n   - ``pyelftools``\n\n - Documentation:\n\n   - ``sphinx``\n   - ``sphinx_rtd_theme``\n\n - Tests:\n\n   - QA:\n\n     - ``flake8``\n     - ``mypy``\n     - ``tox``\n\nOther dependencies:\n\n - initramfs (mkcpiodir and mkcpiolist) dependencies:\n\n   - ``loadkeys`` (kbd)\n   - ``busybox``\n   - ``modinfo`` (kmod, busybox)\n\n - mkcpiodir dependencies:\n\n   - ``find`` (findutils, busybox)\n   - ``cpio`` (cpio, busybox)\n\n - mkcpiolist dependencies:\n\n   - ``gen_init_cpio`` (linux kernel, linux-misc-apps)\n\nInstall\n-------\n\nInstall from pypi:\n\n.. code-block:: console\n\n   $ pip install cmkinitramfs\n\nInstall from source with setup.py:\n\n.. code-block:: console\n\n   $ git clone https://github.com/teapot9/cmkinitramfs.git\n   $ cd cmkinitramfs\n   $ python3 setup.py install\n\nInstall from source with pip:\n\n.. code-block:: console\n\n   $ git clone https://github.com/teapot9/cmkinitramfs.git\n   $ cd cmkinitramfs\n   $ pip3 install .\n\n\nConfiguration\n=============\n\nThe configuration file is in an *ini* format.\n\nEach section defines a data source, the section name is the data identifier.\n\nSome options expects a data source as input, there are several data identifier\nformats:\n\n - ``DATA=data-name``: data defined in the section with the same name.\n - ``data-name``: same as ``DATA=data-name``.\n - ``PATH=/path/foo/bar``: data at the path ``/path/foo/bar``, this can\n   be a directory, a file, or a block device.\n - ``/absolute/path``: same as ``PATH=/absolute/path``.\n - ``UUID=1234-5678``: filesystem with UUID ``1234-5678``.\n - ``LABEL=foo``: filesystem with label ``foo``.\n - ``PARTUUID=1234-5678``: partition with UUID ``1234-5678``.\n - ``PARTLABEL=foo``: partition with label ``foo``.\n\nDEFAULT section\n---------------\n\nThis section has default values for other sections, as well as\nglobal configuration.\n\n - ``root`` (mandatory): Data identifier for the data to use as new root.\n\n - ``mountpoints`` (optional): Comma separated list of data identifier\n   to load in addition of rootfs.\n\n - ``keymap`` (optional): Boolean value defining if a keymap should be\n   loaded. If set to ``no``, all ``keymap-*`` configurations will be ignored.\n   Defaults to ``no``.\n\n - ``keymap-src`` (optional): Path of the keymap file to use. If not\n   specified but ``keymap`` is ``yes``, the converted keymap should already\n   exists at ``keymap-path``.\n\n - ``keymap-path`` (optional): Path where the binary keymap will be\n   generated (generated from ``keymap-src``).\n   Defaults to ``/tmp/keymap.bmap``.\n\n - ``keymap-dest`` (optional): Path of the keymap file within the initramfs.\n   Defaults to ``/root/keymap.bmap``.\n\n - ``init-path`` (optional): Path where the init script will be generated\n   (generated from ``cmkinitramfs.init.mkinit()``).\n   Defaults to ``/tmp/init.sh``.\n\n - ``files`` (optional): Additional files to include in the initramfs.\n   Each item is separated by a newline. Format: ``source:destination``\n   (e.g. ``files = /root/foo:/root/bar`` copy the file ``foo`` in the initramfs\n   renaming it ``bar``). If no destination is given, the file will be copied\n   to the same path as ``source`` in the initramfs. ``source`` can be an\n   absolute or relative path, ``destination`` must be an absolute path\n   within the initramfs.\n\n - ``execs`` (optional): Additional executables to include in the initramfs.\n   Same format as ``files``, except that ``source`` will also be searched\n   in directories from the ``PATH`` environment variable.\n\n - ``libs`` (optional): Additional libraries to include in the initramfs.\n   Same format as ``files``, except that ``source`` will also be searched\n   in directories from ``/etc/ld.so.conf`` and the ``LD_LIBRARY_PATH``\n   environment variable.\n\n - ``busybox`` (optional): Additional executables to include in the initramfs.\n   Each item is separated by a newline. Format: ``exec``:\n   name of the command (basename).\n   If busybox provides the command, they will not be added. Otherwise,\n   the executable is searched in ``PATH``.\n\n - ``cmkcpiodir-default-opts`` (optional): Options to append to the\n   ``cmkcpiodir`` command line.\n\n - ``cmkcpiolist-default-opts`` (optional): Options to append to the\n   ``cmkcpiolist`` command line.\n\n - ``modules`` (optional): Kernel modules to load in the initramfs.\n   One module per line, each line with the module name followed by the\n   module parameters (e.g. ``mymodule foo=bar``).\n\n - ``scripts`` (optional): User scripts to run at a given breakpoint.\n   One user script per line with the format ``breakpoint:script``.\n   The script ``script`` will be run at the breakpoint ``breakpoint``.\n   A list of available breakpoints is available in\n   ``cmkinitramfs.init.Breakpoint``.\n   These scripts will be run wether the breakpoint is enabled or not.\n   Example: ``init: ls /dev``: run ``ls /dev`` after initialization.\n\nLUKS data sections\n------------------\n\nLUKS device to open.\n\n - ``type = luks`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``source`` (mandatory): Data identifier of the data to unlock.\n\n - ``name`` (mandatory): Name to use for the luks device, this will be\n   used by cryptsetup.\n\n - ``key`` (optional): Data identifier for the LUKS key.\n\n - ``header`` (optional): Data identifier for the LUKS header.\n\n - ``discard`` (optional): Enable discards. Boolean value (yes/no).\n\nLVM data sections\n-----------------\n\nLVM logical volume to load.\n\n - ``type = lvm`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``vg-name`` (mandatory): Volume group name.\n\n - ``lv-name`` (mandatory): Logical volume name.\n\nMount data sections\n-------------------\n\nFilesystem to mount.\n\n - ``type = mount`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``source`` (optional): Data identifier for the filesystem to mount.\n   If not set, it will set the source to \"none\" (e.g. for TMPFS).\n\n - ``mountpoint`` (mandatory): Path where the filesystem will be mounted.\n\n - ``filesystem`` (mandatory): Which filesystem to use, option passed\n   to ``mount -t filesystem``.\n\n - ``options`` (optional): Mount options, defaults to ``ro``. Note for ZFS:\n   if the ``mountpoint`` property is not set to ``legacy``, the ``zfsutil``\n   option is required.\n\nMD data sections\n----------------\n\nMD RAID data to load.\n\n - ``type = md`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``name`` (mandatory): Name of the MD RAID, this will be used by mdadm.\n\n - ``source`` (mandatory): New line separated data identifiers of the\n   sources to use. Multiple block devices can be specified, or the\n   UUID of the MD RAID.\n\nClone data sections\n-------------------\n\nClone a source to a destination.\n\n - ``type = clone`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``source`` (mandatory): Data identifier for the source of the clone.\n\n - ``destination`` (mandatory): Data identifier of the destination\n   of the clone.\n\nZFS pool sections\n-----------------\n\nImport a ZFS pool.\n\n - ``type = zfspool`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``pool`` (mandatory): Pool name.\n\n - ``cache`` (optional): Data identifier of the ZFS cache file (must be present\n   in the initramfs).\n\nZFS crypt sections\n------------------\n\nUnlock an encrypted ZFS dataset.\n\n - ``type = zfscrypt`` (mandatory).\n\n - |need|\n\n - |load-need|\n\n - ``pool`` (optional): Data identifier of the parent pool (defaults to same\n   as pool name).\n\n - ``dataset`` (mandatory): Name of the dataset to unlock.\n\n - ``key`` (optional): Data identifier of a keyfile to use.\n\n.. |need| replace:: ``need`` (optional): Hard dependencies: comma separated\n   list of data identifiers. Those dependencies are required to load\n   *and* use the data.\n\n.. |load-need| replace:: ``load-need`` (optional): Load dependencies: comma\n   separated list of data identifiers. Those dependencies are only required\n   to load the data, they can be unloaded when the data has been successfully\n   loaded. (e.g. A LUKS key, an archive to decompress.)\n\n\nUsage\n=====\n\nKernel command-line parameters\n------------------------------\n\nThe init script will check the kernel cmdline for known parameters.\n\n - ``debug``: Same as ``rd.debug``.\n - ``init=<path to init>``: Set the init process to run after the initramfs.\n - ``quiet``: Same as ``rd.quiet``.\n - ``rd.break=<breakpoint>``: Drop into a shell at a given point.\n   See ``cmkinitramfs.init.Breakpoint``.\n - ``rd.debug``: Show debugging informations.\n - ``rd.panic``: On fatal error: cause a kernel panic rather than droping\n   into a shell.\n - ``rd.quiet``: Reduce log shown on console.\n\nFor more details, see ``cmkinitramfs.init.do_cmdline``.\n\ncmkinit\n-------\n\n.. code-block:: console\n\n   $ cmkinit --help\n   usage: cmkinit [-h] [--version]\n\n   Build an init script\n\n   optional arguments:\n     -h, --help  show this help message and exit\n     --version   show program's version number and exit\n\nRunning ``cmkinit`` will generate an init script and output it to stdout.\nNo options are available, everything is defined in the configuration file.\nThe ``CMKINITCFG`` environment variable may be defined to use a custom\nconfiguration file.\n\ncmkcpiodir\n----------\n\n.. code-block:: console\n\n   $ cmkcpiodir --help\n   usage: cmkcpiodir [-h] [--version] [--debug] [--verbose] [--quiet]\n                     [--output OUTPUT] [--binroot BINROOT] [--kernel KERNEL]\n                     [--only-build-archive | --only-build-directory] [--keep]\n                     [--clean] [--build-dir BUILD_DIR]\n\n   Build an initramfs using a directory.\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --version             show program's version number and exit\n     --debug, -d           debugging mode: non-root, implies -k\n     --verbose, -v         be verbose\n     --quiet, -q           be quiet (can be repeated)\n     --output OUTPUT, -o OUTPUT\n                           set the output of the CPIO archive\n     --binroot BINROOT, -r BINROOT\n                           set the root directory for binaries (executables and\n                           libraries)\n     --kernel KERNEL, -K KERNEL\n                           set the target kernel version of the initramfs,\n                           defaults to the running kernel\n     --only-build-archive, -c\n                           only build the CPIO archive from an existing initramfs\n                           directory\n     --only-build-directory, -D\n                           only build the initramfs directory, implies -k\n     --keep, -k            keep the created initramfs directory\n     --clean, -C           overwrite temporary directory if it exists, use\n                           carefully\n     --build-dir BUILD_DIR, -b BUILD_DIR\n                           set the location of the initramfs directory\n\nRunning ``cmkcpiodir`` will generate the initramfs in a directory, then\nit will create the CPIO archive from this directory.\n``cmkcpiodir`` requires root privileges when run in non-debug mode,\nsee the ``do_nodes`` options of\n``cmkinitramfs.initramfs.Initramfs.build_to_directory()``.\n\ncmkcpiolist\n-----------\n\n.. code-block:: console\n\n   $ cmkcpiolist --help\n   usage: cmkcpiolist [-h] [--version] [--debug] [--verbose] [--quiet]\n                      [--output OUTPUT] [--binroot BINROOT] [--kernel KERNEL]\n                      [--only-build-archive | --only-build-list] [--keep]\n                      [--cpio-list CPIO_LIST]\n\n   Build an initramfs using a CPIO list\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --version             show program's version number and exit\n     --debug, -d           debugging mode: non-root, implies -k\n     --verbose, -v         be verbose\n     --quiet, -q           be quiet (can be repeated)\n     --output OUTPUT, -o OUTPUT\n                           set the output of the CPIO archive\n     --binroot BINROOT, -r BINROOT\n                           set the root directory for binaries (executables and\n                           libraries)\n     --kernel KERNEL, -K KERNEL\n                           set the target kernel version of the initramfs,\n                           defaults to the running kernel\n     --only-build-archive, -c\n                           only build the CPIO archive from an existing CPIO list\n     --only-build-list, -L\n                           only build the CPIO list, implies -k\n     --keep, -k            keep the created CPIO list\n     --cpio-list CPIO_LIST, -l CPIO_LIST\n                           set the location of the CPIO list\n\nRunning ``cmkcpiolist`` will generate an initramfs CPIO list in a file,\nthen it will create the CPIO archive from this list with ``gen_init_cpio``.\n``cmkcpiolist`` does not require root privileges.\n\nfindlib\n-------\n\n.. code-block:: console\n\n   $ findlib --help\n   usage: findlib [-h] [--verbose] [--quiet] [--version]\n                  [--compatible COMPATIBLE] [--root ROOT] [--null] [--glob]\n                  LIB [LIB ...]\n\n   Find a library on the system\n\n   positional arguments:\n     LIB                   library to search\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --verbose, -v         be verbose\n     --quiet, -q           be quiet (can be repeated)\n     --version             show program's version number and exit\n     --compatible COMPATIBLE, -c COMPATIBLE\n                           set a binary the library must be compatible with\n     --root ROOT, -r ROOT  set the root directory to search for the library\n     --null, -0            paths will be delemited by null characters instead of\n                           newlines\n     --glob, -g            library names are glob patterns\n\n``findlib`` will search the absolute path of a library on the system.\nIt will search in directories from ``/etc/ld.so.conf``, ``LD_LIBRARY_PATH``,\nand default library paths (see ``cmkinitramfs.bin.find_lib()`` and\n``cmkinitramfs.bin.find_lib_iter()``).\n\n\nExamples\n========\n\nCommand-line interface\n----------------------\n\n.. code-block:: console\n\n   $ cmkcpiodir\n\n..\n\n - Creates init script in ``/tmp/init.sh``.\n - If enabled, builds binary keymap in ``/tmp/keymap.bmap``.\n - Builds initramfs in ``/tmp/initramfs`` (disable this step with\n   ``--only-build-archive``).\n - Builds CPIO archive from ``/tmp/initramfs`` to ``/usr/src/initramfs.cpio``\n   (disable this step with ``--only-build-directory``).\n - Cleanup ``/tmp/initramfs`` directory (disable with ``--keep``).\n\n.. code-block:: console\n\n   $ cmkcpiolist\n\n..\n\n - Creates init script in ``/tmp/init.sh``.\n - If enabled, builds binary keymap in ``/tmp/keymap.bmap``.\n - Builds CPIO list in ``/tmp/initramfs.list`` (disable this step with\n   ``--only-build-archive``).\n - Builds CPIO archive from ``/tmp/initramfs.list``\n   to ``/usr/src/initramfs.cpio`` (disable this step with\n   ``--only-build-list``).\n\n.. code-block:: console\n\n   $ findlib 'libgcc_s.so.1'\n   /usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/libgcc_s.so.1\n\n..\n\n - Searches the ``libgcc_s.so.1`` library on the system and prints it\n   to stdout.\n\n.. code-block:: console\n\n   $ findlib -g 'libgcc_s.*'\n   /usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/libgcc_s.so.1\n   /lib64/libgcc_s.so.1\n   /lib64/libgcc_s.so.1\n\n..\n\n - Search any library matching ``libgcc_s.*`` on the system and prints them\n   to stdout.\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/teapot9/fand",
    "keywords": "initramfs,initramfs-generator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmkinitramfs",
    "package_url": "https://pypi.org/project/cmkinitramfs/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/cmkinitramfs/",
    "project_urls": {
      "Homepage": "https://github.com/teapot9/fand"
    },
    "release_url": "https://pypi.org/project/cmkinitramfs/0.2.2/",
    "requires_dist": [
      "pyelftools",
      "sphinx ; extra == 'doc'",
      "sphinx-rtd-theme ; extra == 'doc'",
      "flake8 ; extra == 'qa'",
      "mypy ; extra == 'qa'",
      "tox ; extra == 'qa'"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "A customizable simple initramfs generator",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12252746,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f03d84e7ec4eab28b544d00bbb5dc2a0395549dd58e2adbffd302e5c712e2cb",
          "md5": "96f01545e3efbbcb859f45986e542585",
          "sha256": "cd4e376b654543b8726de5279666f2ae4df170b638ad24be97fe8597b6d4743a"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96f01545e3efbbcb859f45986e542585",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17786,
        "upload_time": "2020-10-02T05:19:04",
        "upload_time_iso_8601": "2020-10-02T05:19:04.190976Z",
        "url": "https://files.pythonhosted.org/packages/8f/03/d84e7ec4eab28b544d00bbb5dc2a0395549dd58e2adbffd302e5c712e2cb/cmkinitramfs-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfed3eb4c10f289fcd72408857ef4f904dc273386057cd267e1b11f3059fbb78",
          "md5": "69556e533ec788424780bed048109982",
          "sha256": "6352ebc73804e9a52d21ea8eebdb8b7f7624090cde968b5d43012d1b1565a968"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69556e533ec788424780bed048109982",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16697,
        "upload_time": "2020-10-02T05:19:06",
        "upload_time_iso_8601": "2020-10-02T05:19:06.440461Z",
        "url": "https://files.pythonhosted.org/packages/df/ed/3eb4c10f289fcd72408857ef4f904dc273386057cd267e1b11f3059fbb78/cmkinitramfs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5127a5512ea35ae60168befd2b6ec54c04f040ace976e501a98d8785b112dd1",
          "md5": "27e56e2e11b4936fe864433dd67657be",
          "sha256": "f8501b8cd2334a422f9aa8639b7e88f5124d3d2ab08230ed79dbf03d765afba0"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27e56e2e11b4936fe864433dd67657be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 54964,
        "upload_time": "2021-05-23T19:32:42",
        "upload_time_iso_8601": "2021-05-23T19:32:42.720668Z",
        "url": "https://files.pythonhosted.org/packages/a5/12/7a5512ea35ae60168befd2b6ec54c04f040ace976e501a98d8785b112dd1/cmkinitramfs-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03ee727c89b99f522dd09576f825d4e4c0537b14a020bebbe96d6848b518461",
          "md5": "fe440c8e23ccf87a5565fce786463b19",
          "sha256": "bda7fac07453782204020e0d23df4224430866fc73061fcdfc81ca8f142c2a17"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe440c8e23ccf87a5565fce786463b19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 43621,
        "upload_time": "2021-05-23T19:32:44",
        "upload_time_iso_8601": "2021-05-23T19:32:44.377759Z",
        "url": "https://files.pythonhosted.org/packages/f0/3e/e727c89b99f522dd09576f825d4e4c0537b14a020bebbe96d6848b518461/cmkinitramfs-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d70aebe22ff1d9f6a8a3a5f7d48a1c9ac0670f4034eebbd0ecdd345056ec23dc",
          "md5": "63af3a9ee8885eac47ee07e7832da02a",
          "sha256": "65733c6676a3769ab28673f225cad76da4486eee63eef02090c286031c07a647"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63af3a9ee8885eac47ee07e7832da02a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 39565,
        "upload_time": "2021-11-01T07:44:01",
        "upload_time_iso_8601": "2021-11-01T07:44:01.553127Z",
        "url": "https://files.pythonhosted.org/packages/d7/0a/ebe22ff1d9f6a8a3a5f7d48a1c9ac0670f4034eebbd0ecdd345056ec23dc/cmkinitramfs-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e01d0f3fef302442fe032b06204fc227146de3fb1d802746e0e5eb302d421db3",
          "md5": "35a5a56ddcfa6b65121029364947aeb8",
          "sha256": "e5b30f7ad61b0c19f73d16d9bd088ee5545bb56bce7635fe2b10d03c81048d00"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "35a5a56ddcfa6b65121029364947aeb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 45401,
        "upload_time": "2021-11-01T07:44:02",
        "upload_time_iso_8601": "2021-11-01T07:44:02.883982Z",
        "url": "https://files.pythonhosted.org/packages/e0/1d/0f3fef302442fe032b06204fc227146de3fb1d802746e0e5eb302d421db3/cmkinitramfs-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "481ae2c1365bb1e522a1d13b897e1321190e82510560f45aa2c88a6399fab210",
          "md5": "70cc93e02797ce7138468bdc96f6a49f",
          "sha256": "03a644f84af3fd163514d0404c5c11e32b497a8eb68a5ba5f091cdec780252c2"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70cc93e02797ce7138468bdc96f6a49f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 39587,
        "upload_time": "2021-12-09T07:40:21",
        "upload_time_iso_8601": "2021-12-09T07:40:21.990313Z",
        "url": "https://files.pythonhosted.org/packages/48/1a/e2c1365bb1e522a1d13b897e1321190e82510560f45aa2c88a6399fab210/cmkinitramfs-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3192b7cab5fedab62bc949bfbe7d2c2ce6ec8b89e3fad27b6e4cef734442e379",
          "md5": "06b0a543654b1f8819f7006a0eb3e85d",
          "sha256": "5310270162185317e90ab412772d5c62dca4863b8f84f964abc6c2eeaf74b1aa"
        },
        "downloads": -1,
        "filename": "cmkinitramfs-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "06b0a543654b1f8819f7006a0eb3e85d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 45444,
        "upload_time": "2021-12-09T07:40:23",
        "upload_time_iso_8601": "2021-12-09T07:40:23.926023Z",
        "url": "https://files.pythonhosted.org/packages/31/92/b7cab5fedab62bc949bfbe7d2c2ce6ec8b89e3fad27b6e4cef734442e379/cmkinitramfs-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "481ae2c1365bb1e522a1d13b897e1321190e82510560f45aa2c88a6399fab210",
        "md5": "70cc93e02797ce7138468bdc96f6a49f",
        "sha256": "03a644f84af3fd163514d0404c5c11e32b497a8eb68a5ba5f091cdec780252c2"
      },
      "downloads": -1,
      "filename": "cmkinitramfs-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70cc93e02797ce7138468bdc96f6a49f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 39587,
      "upload_time": "2021-12-09T07:40:21",
      "upload_time_iso_8601": "2021-12-09T07:40:21.990313Z",
      "url": "https://files.pythonhosted.org/packages/48/1a/e2c1365bb1e522a1d13b897e1321190e82510560f45aa2c88a6399fab210/cmkinitramfs-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3192b7cab5fedab62bc949bfbe7d2c2ce6ec8b89e3fad27b6e4cef734442e379",
        "md5": "06b0a543654b1f8819f7006a0eb3e85d",
        "sha256": "5310270162185317e90ab412772d5c62dca4863b8f84f964abc6c2eeaf74b1aa"
      },
      "downloads": -1,
      "filename": "cmkinitramfs-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "06b0a543654b1f8819f7006a0eb3e85d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 45444,
      "upload_time": "2021-12-09T07:40:23",
      "upload_time_iso_8601": "2021-12-09T07:40:23.926023Z",
      "url": "https://files.pythonhosted.org/packages/31/92/b7cab5fedab62bc949bfbe7d2c2ce6ec8b89e3fad27b6e4cef734442e379/cmkinitramfs-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}