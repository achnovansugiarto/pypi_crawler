{
  "info": {
    "author": "Sangeeth Saravanaraj",
    "author_email": "sangeeth@riptideio.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Riptide Cloud API\n\n## Installing\n\n`riptide-cloud` is available using pip.\n\n```.env\npip install riptide-cloud\n```\n\n## Introduction\n\nThe APIs provided as part of the `riptide-cloud` package can be used to read\nthe following information.\n\n - `entity` (like `site`, `equipments`, `points`, etc),\n - `alarms` (a.k.a. `alerts`),\n - `history` (past data about any entity),\n - `watch` (list of entities that you are interested in watching), etc.\n\nPlease note that the APIs can only be used to `read` information from the\nRiptide cloud. No `write`/`create` is allowed (except `watch` where you are\nallowed to `create` one-or-more watches to monitor points at the real-time).\n\nThe request and response payload are in `JSON` format. So the `content-type`\nin the header would be `application/json`.\n\n## RiptideCloudApp\n\nCreate a `JSON` file with the following contents:\n\n```json\n{\n  \"auth\": \"Basic\",\n  \"username\": \"<username>\",\n  \"password\": \"<password>\"\n}\n```\n\n`username` and `password` should be a valid username and password provided\nto you for accessing Riptide cloud.\n\nSay you save this file as `riptide.json` and the full path to this file is\n`/tmp/riptide.json`.\n\nCreate an instance of `RiptideCloudApp` with `config_file=/tmp/riptide.json`\n\n```python\nfrom riptide.cloud.app import RiptideCloudApp\n\nrca = RiptideCloudApp(config_file=\"/tmp/riptide.json\")\n```\n\nNOTE: For all interactions with riptide cloud, you will use the\n`RiptideCloudApp` instance `rca`.\n\n\n## Entity\n\nEntity APIs can be invoked as follows:\n\n- `rca.entity.get_entity(uri=<uri>)`\n- `rca.entity.get_entity_tag(uri=<uri>, name=<tag-name>)`\n- `rca.entity.get_entity_tags(uri=<uri>)`\n- `rca.entity.entity_read_override(uri=<uri>)`\n- `rca.entity.entity_read_override_at(uri=<uri>, level=<priority-level>)`\n\n`<uri>` in the above API calls are called as `Riptide Entity URI`. Riptide\nuses `uri` (Uniform Resource Identifier) to represent `site`, `equipments`\nand `points` in the following way.\n\n```.env\n/<customer-name>/<site-name>[/<path-to-equipment>]/<equipment-name>/properties/<property-type>/<property-name>[/presentValue | priorityArray[/<priorityLevel>]]\n```\n\nThe following are some of the examples.\n\n```.env\n/McDonalds/San Bernardino/Weather/properties/AI/Temperature\n```\n\n- `customer-name` is `McDonalds`\n- `site-name` is `San Bernardino`\n- `equipment-name` is `Weather`\n- `property-type` is `AI`\n- `property-name` is `Temperature`\n\n---\n\n```.env\n/McDonalds/San Bernardino/HVAC/Outdoor Unit - 05/properties/AI/Target Condensing Temperature\n```\n\n- `customer-name` is `McDonalds`\n- `site-name` is `San Bernardino`\n- `path-to-equipment` is `HVAC`\n- `equipment-name` is `Outdoor Unit - 05`\n- `property-type` is `AI`\n- `property-name` is `Target Condensing Temperature`\n\n---\n\n```.env\n/McDonalds/San Bernardino/HVAC/Indoor Unit - 11/properties/AO/Set Temperature/priorityArray/10\n```\n\n- `customer-name` is `McDonalds`\n- `site-name` is `San Bernardino`\n- `path-to-equipment` is `HVAC`\n- `equipment-name` is `Indoor Unit - 11`\n- `property-type` is `AO`\n- `property-name` is `Set Temperature`\n- `priority-level` is `10`\n\nThe following are syntactically valid examples.\n\n- `/McDonalds/San Bernardino/HVAC/Indoor Unit - 11/properties/AO/Set Temperature/priorityArray/10`\n- `/McDonalds/San Bernardino/HVAC/Indoor Unit - 11/properties/AO/Set Temperature/priorityArray`\n- `/McDonalds/San Bernardino/HVAC/Indoor Unit - 11/properties/AO/Set Temperature/presentValue`\n- `/McDonalds/San Bernardino/HVAC/Indoor Unit - 11/properties/AO/Set Temperature`\n- `/McDonalds/San Bernardino/HVAC/Indoor Unit - 11`\n- `/McDonalds/San Bernardino/HVAC`\n- `/McDonalds/San Bernardino` *\n- `/McDonalds` *\n\n`* -> NOT RECOMMENDED`\n\nMost of the `entity` APIs takes the entity url as input. The output of these\n APIs varies based on the entity `url`.\n\nFor example:\n\n - `/priorityArray` would give the following output.\n\n```json\n{'1': None,\n '10': None,\n '11': None,\n '12': None,\n '13': None,\n '14': 73,\n '15': None,\n '16': None,\n '2': None,\n '3': None,\n '4': None,\n '5': None,\n '6': 73.5,\n '7': None,\n '8': None,\n '9': 75,\n 'relinquish': None}\n```\n\n - `/presentValue` would give the following output.\n\n```json\n21.3\n```\n\n\n## Alarm\n\nAlarm APIs can be invoked as follows:\n\n- `rca.alarms.get_alarm(uuids, context)`\n- `rca.alarms.get_alarm_history(uuids, context, start, end)`\n\nTo get more help on these APIs, you could type the following in your Python\nterminal.\n\n```python\nhelp(rca.alarms.get_alarm)\nhelp(rca.alarms.get_alarm_history)\n```\n\n## History\n\nRiptide cloud offers the following flavors of historic data.\n\n- `Raw Historic Data` : The value of a point as recorded at the site at\nvarious instances of time.\n\n- `Interpolated Historic Data` : The value of a point as recorded at the site\nat various instances of time and also the estimated or interpolated values\nof the point for the missing periods by using re-sampling technique.\n\n- `Rolled-up Historic Data` : The value of point condensed for a time period\n(e.g. 1 day, 10 days, 1 week and so on).\n\n- `Digested Historic Data` : The value of a point summarized over a period of\nperiod of time (e.g. mean, sum, median and so on). This also allows user\nto apply a function on every value of a point like say add, subtract etc.\n\nHistory APIs can be invoked as follows:\n\n- `rca.history.get_history(identifiers=[uri1, uri2 ... ], start=<datetime>,\nstop=<datetime>)`\n\nFew important points to NOTE:\n- `identifiers` are entity property uri's. It must not be site or equipment\nuri's but only point uri's.\n- Maximum number of `identifiers` that are allowed per API call is 50.\n- `start` and `end` accepts only `datetime` objects; `start` should be\nlesser-than-or-equal-to `end` but must not exceed 31 days.\n\nTo get more help on the above API, you could type the following in your\nPython terminal.\n\n```python\nhelp(rca.history.get_history)\n```\n\n## Watch\n\nYou can create a watch and then interacts with that watch to obtain the\nlatest readings associated with a group of entity properties.\n\nWatch APIs can be invoked as follows:\n\n- `rca.watch.create_watch(identifiers=[uri1, uri2 ... ])`\n- `rca.watch.get_watches()`\n- `rca.watch.poll_watch(watch_id=<watch-id>)`\n- `rca.watch.poll_watch_changed(watch_id=<watch-id>)`\n- `rca.watch.delete_watch(watch_id=<watch-id>)`\n- `rca.watch.read_present_value(identifier=<entity-property-uri>)`\n\nTo get more help on the above API, you could type the following in your\nPython terminal.\n\n```python\nhelp(rca.watch.create_watch)\nhelp(rca.watch.get_watches)\nhelp(rca.watch.poll_watch)\nhelp(rca.watch.poll_watch_changed)\nhelp(rca.watch.delete_watch)\nhelp(rca.watch.read_present_value)\n```\n\n## Support\n\nFor any support, please reach out to `support@riptideio.com`\n\n\n# __END__\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "riptide alarm entity watch history IoT cloud",
    "license": "MIT",
    "maintainer": "Sangeeth Saravanaraj",
    "maintainer_email": "sangeeth@riptideio.com",
    "name": "riptide-cloud",
    "package_url": "https://pypi.org/project/riptide-cloud/",
    "platform": "",
    "project_url": "https://pypi.org/project/riptide-cloud/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/riptide-cloud/0.0.2/",
    "requires_dist": [
      "requests (==2.24.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Riptide Cloud API.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8011405,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68789e58eb2a4a832974bbc93e6b2ace321dd552c1dc303edde57326602bc71b",
          "md5": "5805b3f46a5fde7442b98f185bfdbb94",
          "sha256": "a10c45a72f7373828b5c6f696209276626ed30c26e0cbe70e2eab68e22dcec26"
        },
        "downloads": -1,
        "filename": "riptide_cloud-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5805b3f46a5fde7442b98f185bfdbb94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10793,
        "upload_time": "2020-08-03T13:47:58",
        "upload_time_iso_8601": "2020-08-03T13:47:58.546780Z",
        "url": "https://files.pythonhosted.org/packages/68/78/9e58eb2a4a832974bbc93e6b2ace321dd552c1dc303edde57326602bc71b/riptide_cloud-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b75a287da7b3e4b42c28b5e857abc09956d774bcd2a304eb9ee7534e03ba5b0",
          "md5": "45e6ad03276301ea54702a587c182361",
          "sha256": "28e082756a1a9d6933a83f5b2fbd07312f022849c8dfef6ae0913f9d60f2c1b7"
        },
        "downloads": -1,
        "filename": "riptide-cloud-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "45e6ad03276301ea54702a587c182361",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10766,
        "upload_time": "2020-08-03T13:48:09",
        "upload_time_iso_8601": "2020-08-03T13:48:09.050972Z",
        "url": "https://files.pythonhosted.org/packages/6b/75/a287da7b3e4b42c28b5e857abc09956d774bcd2a304eb9ee7534e03ba5b0/riptide-cloud-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c689845a38a49bd3c8a40a1fca6583029560d8697ae6178d5a793a2ad5bc5c02",
          "md5": "c5b1a39ed0b2537137d3a75f8b0a7099",
          "sha256": "d518a34947d8bc55eb88d386c5c34334ce16e0f7d9c1bfa8b7d200bcb6ca06a3"
        },
        "downloads": -1,
        "filename": "riptide_cloud-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5b1a39ed0b2537137d3a75f8b0a7099",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10788,
        "upload_time": "2020-08-21T10:00:19",
        "upload_time_iso_8601": "2020-08-21T10:00:19.954903Z",
        "url": "https://files.pythonhosted.org/packages/c6/89/845a38a49bd3c8a40a1fca6583029560d8697ae6178d5a793a2ad5bc5c02/riptide_cloud-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64dc32008c42885ed2a1bf5766b65c7f5420a0b8b0961d0dc0cb5ec30f28cf5b",
          "md5": "3191861fbaf6c145cdba8b9c24ff42ce",
          "sha256": "0e4343049301d08b00ee8683f4f757061ea302ffaea5207a2737f6726c38fed0"
        },
        "downloads": -1,
        "filename": "riptide-cloud-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3191861fbaf6c145cdba8b9c24ff42ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10761,
        "upload_time": "2020-08-21T10:00:23",
        "upload_time_iso_8601": "2020-08-21T10:00:23.937037Z",
        "url": "https://files.pythonhosted.org/packages/64/dc/32008c42885ed2a1bf5766b65c7f5420a0b8b0961d0dc0cb5ec30f28cf5b/riptide-cloud-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c689845a38a49bd3c8a40a1fca6583029560d8697ae6178d5a793a2ad5bc5c02",
        "md5": "c5b1a39ed0b2537137d3a75f8b0a7099",
        "sha256": "d518a34947d8bc55eb88d386c5c34334ce16e0f7d9c1bfa8b7d200bcb6ca06a3"
      },
      "downloads": -1,
      "filename": "riptide_cloud-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c5b1a39ed0b2537137d3a75f8b0a7099",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10788,
      "upload_time": "2020-08-21T10:00:19",
      "upload_time_iso_8601": "2020-08-21T10:00:19.954903Z",
      "url": "https://files.pythonhosted.org/packages/c6/89/845a38a49bd3c8a40a1fca6583029560d8697ae6178d5a793a2ad5bc5c02/riptide_cloud-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64dc32008c42885ed2a1bf5766b65c7f5420a0b8b0961d0dc0cb5ec30f28cf5b",
        "md5": "3191861fbaf6c145cdba8b9c24ff42ce",
        "sha256": "0e4343049301d08b00ee8683f4f757061ea302ffaea5207a2737f6726c38fed0"
      },
      "downloads": -1,
      "filename": "riptide-cloud-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3191861fbaf6c145cdba8b9c24ff42ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10761,
      "upload_time": "2020-08-21T10:00:23",
      "upload_time_iso_8601": "2020-08-21T10:00:23.937037Z",
      "url": "https://files.pythonhosted.org/packages/64/dc/32008c42885ed2a1bf5766b65c7f5420a0b8b0961d0dc0cb5ec30f28cf5b/riptide-cloud-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}