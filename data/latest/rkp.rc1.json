{
  "info": {
    "author": "Lennard Epping, Felix Hartkopf",
    "author_email": "EppingL@rki.de, HartkopfF@rki.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Relative K-mer Project\n\n## Abstract\n\n### WGS analysis reveals extended natural transformation in Campylobacter impacting diagnostics and the pathogens adaptive potential. \n### Running title: WGS analysis of Campylobacter hybrid strains\n\n### Julia C. Golz 1a, Lennard Epping 2#, Marie-Theres Knüver 1a, Maria Borowiak 1b, Felix Hartkopf 2, Carlus Deneke 1b, Burkhard Malorny 1b, Torsten Semmler 2, Kerstin Stingl 1a*\n\n1 German Federal Institute for Risk Assessment, Department of Biological Safety, a National Reference Laboratory for *Campylobacter*, b Study Centre for Genome Sequencing and Analysis, Berlin, Germany\n2 Robert Koch Institute, Microbial Genomics, Berlin, Germany  \n\n\\# sharing first author  \n\\* corresponding author\n\nIn the past decade, *Campylobacter* infections are getting more common worldwide. These infections can lead to diarrhea, abdominal pain, fever, headache, nausea, and/or vomiting and pose a serious danger for public health.  This sparked efforts to improve prevention, treatment and reduce transmissions. As further stated by Kaakoush et al. [1], the main risks are the consumption of animal products and water, contact with animals and international travels. \n\nAs the threat to public health differs among *Campylobacter* species, it is important to identify dangerous *Campylobacter* species and investigate their characteristics in genotype and phenotype. In this work, a kmer mapping approach is used to identify recombination events and involved genes to describe hybrid species. Therefore, hybrids of *Campylobacter jejuni* and *Campylobacter coli* are analyzed to validate this approach and to develop a workflow that can be applied to emerging hybrids in general. This would allow a fast and reliable classification of hybrids. \n\nKMC3 [2] and BEDTools [5] are utilized to extract kmers of *Campylobacter* genomes and to calculate shared kmers of two species and their hybrids. Subsequently, these kmers can be used in combination with Blast [3] and Bowtie 2 [4] to select genes that are shared with the hybrid genomes. These genes can be grouped into batches that were involved in a single recombination event. A visualization of the gene coverage generated using R provides further information about the selected genes. \n\nThis work will provide a new generic tool for hybrid analysis that could be expanded to other bacteria and enable researchers to classify new species and recombination events in a fast and reliable manner.\n\n\n[1] Global Epidemiology of Campylobacter Infection\nNadeem O. Kaakoush, Natalia Castaño-Rodríguez, Hazel M. Mitchell, Si Ming Man\nClinical Microbiology Reviews Jun 2015, 28 (3) 687-720; DOI: 10.1128/CMR.00006-15  \n[2] Marek Kokot, Maciej Długosz, Sebastian Deorowicz, KMC 3: counting and manipulating k-mer statistics, Bioinformatics, Volume 33, Issue 17, 01 September 2017, Pages 2759–2761, https://doi.org/10.1093/bioinformatics/btx304  \n[3] Stephen F. Altschul, Warren Gish, Webb Miller, Eugene W. Myers, David J. Lipman,\nBasic local alignment search tool, Journal of Molecular Biology, Volume 215, Issue 3, 1990, Pages 403-410, ISSN 0022-2836, https://doi.org/10.1016/S0022-2836(05)80360-2.  \n[4] Langmead B, Salzberg S. Fast gapped-read alignment with Bowtie 2. Nature Methods. 2012, 9:357-359.  \n[5] Aaron R. Quinlan, Ira M. Hall, BEDTools: a flexible suite of utilities for comparing genomic features, Bioinformatics, Volume 26, Issue 6, 15 March 2010, Pages 841–842, https://doi.org/10.1093/bioinformatics/btq033\n\n## Requirements\n\n+ [Conda](https://docs.conda.io/en/latest/)\n\nor \n\n+ Python 3.X\n  + numpy = 1.17.3\n  + matplotlib = 3.1.2\n  + pandas = 0.25.3\n  + biopython = 1.76\n  + argparse = 1.4.0\n  + tqdm = 4.41.1\n+ kmc = 3.1.1\n+ bowtie2 = 2.3.5\n+ bedtools = 2.29.2\n+ r = 3.6\n  + pheatmap = 1.0.12\n  + gplots = 3.0.1.1\n+ blast = 2.9.0\n+ samtools = 1.10\n+ bedops = 2.4.37\n+ seqkit=0.11.0\n\n\n## Installation\n\n\n\n1.\n\nChange to src directory in RKP repository:\n```bash\ncd path/to/repo/src\n```\n2.\n\nCreate environment with all dependencies needed by RKP:\n```bash\nconda env create -f RKP.yaml\n```\n\n3. \n\nActivate RKP environment:\n```bash\nconda activate RKP\n```\n\n4.\n\nRun RKP:\n```bash\n python RKP.py -A <acceptor genome dir A> -B <hybrid genome dir B> -C <donor genome dir C> -k  <kmerlength> -a <acceptor treshold> -c <donor threshold> -g <acceptor reference genome fasta> -f <acceptor refernecs genome gff> -o <output directory>\n```\n\n\nRequired parameters: \n\n|  Parameter | Description  |  \n|------------|--------------|\n| -A, -C     | Two directories with genomes (.fna) of acceptor and donor | \n| -B         | Directory with genomes (.fasta) and fnn files of hybrids | \n|  -k        |  Length of kmers | \n|  -at        |  Relative amount (0 to 1) of isolates of acceptor that should have kmer x| \n|  -dt        |  Relative amount (0 to 1) of isolates of donor that should have kmer x| \n|  -g        |  acceptor reference genome | \n|  -f        |  acceptor reference gff file | \n|  -o        |  output directory| \n\n\nOptional parameters: \n\n\n|  Parameter | Description  |  \n|------------|--------------|\n| -d         | Keep all temporary files | \n|  --version |  Show version of RKP | \n|  -h        |  Show help | \n|  -t        |  number of threads, default = 8| \n\n## File structure of output\n```\noutput\n│\n│  \n│\n└───Acceptor\n│   │   (only temporary files)\n│   \n└───Hybrid\n|   │   *_iso_seq_protein.fasta\n|   |   *_iso_seq.fasta\n|   |   mapping_result_Genes_count.csv\n|   |   mapping_result_Genes_cutoff_20.csv\n|   |   mapping_result_Genes_raw.csv\n|   |   mapping_result.csv\n|   |   mapping_result.pdf\n|   |   recombination_cov_<kmerLength>_W50.pdf\n|   |   recombination_cov_<kmerLength>_W100.pdf\n|   |   recombination_cov_<kmerLength>_W200.pdf\n|   |   recombination_cov_<kmerLength>_W300.pdf\n|   |   recombination_cov_<kmerLength>_W400.pdf\n|   |   recombination_cov_<kmerLength>_W500.pdf\n|   |   Recombination_result_<kmerLength>_W50.csv\n|   |   Recombination_result_<kmerLength>_W100.csv\n|   |   Recombination_result_<kmerLength>_W200.csv\n|   |   Recombination_result_<kmerLength>_W300.csv\n|   |   Recombination_result_<kmerLength>_W400.csv\n|   |   Recombination_result_<kmerLength>_W500.csv\n|\n└───Donor\n|   │   (only temporary files)\n|\n└───RKP.log\n``` \n\n## Call structure\n\n```mermaid\ngraph TD;\n  RKP.py-->create_kmers.sh;\n  create_kmers.sh-->map_kmers.sh;\n  RKP.py-->heatmap.R;\n```\n\n## Workflow\n\n![workflow](workflow.png \"Workflow\")\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/microbial_genomics/relative-kmer-project",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RKP",
    "package_url": "https://pypi.org/project/RKP/",
    "platform": "",
    "project_url": "https://pypi.org/project/RKP/",
    "project_urls": {
      "Homepage": "https://gitlab.com/microbial_genomics/relative-kmer-project"
    },
    "release_url": "https://pypi.org/project/RKP/0.1.0/",
    "requires_dist": [
      "numpy (==1.17.3)",
      "matplotlib (==3.1.2)",
      "pandas (==0.25.3)",
      "biopython (==1.76)",
      "argparse (==1.4.0)",
      "tqdm (==4.41.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Relative K-mer Project",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6615757,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d62faa2d499a4ed803f639cc404ba3574722ce15f2cab40102078fc37cb1812a",
          "md5": "6d9b136ab7946be59326d9fc2ad45071",
          "sha256": "997c17cb4e77c45c7cb2fe16bdcb94c49fc824d556b6daf86a9e13480af6fa30"
        },
        "downloads": -1,
        "filename": "RKP-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d9b136ab7946be59326d9fc2ad45071",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29056,
        "upload_time": "2020-02-12T11:47:47",
        "upload_time_iso_8601": "2020-02-12T11:47:47.094536Z",
        "url": "https://files.pythonhosted.org/packages/d6/2f/aa2d499a4ed803f639cc404ba3574722ce15f2cab40102078fc37cb1812a/RKP-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "256f9c9a3165648fccb96d129043df3c64755ff5e43355862c9c2155bc7bc3a9",
          "md5": "8581fc3680c05d31ae00d88d6480d03b",
          "sha256": "e7cda9bae969b6f1a22cf7a96e547bd488e649f1969b8a398a344704302f58d0"
        },
        "downloads": -1,
        "filename": "RKP-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8581fc3680c05d31ae00d88d6480d03b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14656,
        "upload_time": "2020-02-12T11:47:50",
        "upload_time_iso_8601": "2020-02-12T11:47:50.135618Z",
        "url": "https://files.pythonhosted.org/packages/25/6f/9c9a3165648fccb96d129043df3c64755ff5e43355862c9c2155bc7bc3a9/RKP-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d62faa2d499a4ed803f639cc404ba3574722ce15f2cab40102078fc37cb1812a",
        "md5": "6d9b136ab7946be59326d9fc2ad45071",
        "sha256": "997c17cb4e77c45c7cb2fe16bdcb94c49fc824d556b6daf86a9e13480af6fa30"
      },
      "downloads": -1,
      "filename": "RKP-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6d9b136ab7946be59326d9fc2ad45071",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 29056,
      "upload_time": "2020-02-12T11:47:47",
      "upload_time_iso_8601": "2020-02-12T11:47:47.094536Z",
      "url": "https://files.pythonhosted.org/packages/d6/2f/aa2d499a4ed803f639cc404ba3574722ce15f2cab40102078fc37cb1812a/RKP-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "256f9c9a3165648fccb96d129043df3c64755ff5e43355862c9c2155bc7bc3a9",
        "md5": "8581fc3680c05d31ae00d88d6480d03b",
        "sha256": "e7cda9bae969b6f1a22cf7a96e547bd488e649f1969b8a398a344704302f58d0"
      },
      "downloads": -1,
      "filename": "RKP-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8581fc3680c05d31ae00d88d6480d03b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14656,
      "upload_time": "2020-02-12T11:47:50",
      "upload_time_iso_8601": "2020-02-12T11:47:50.135618Z",
      "url": "https://files.pythonhosted.org/packages/25/6f/9c9a3165648fccb96d129043df3c64755ff5e43355862c9c2155bc7bc3a9/RKP-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}