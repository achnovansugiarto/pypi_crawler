{
  "info": {
    "author": "cymoo",
    "author_email": "wakenee@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Monom: An object mapper for MongoDB with type hints\n\n## Installation\n\n```bash\n$ pip install monom\n```\n\n## About\n\nMonom is designed to manage your models clearly and easily, which is as simple and thin as possible.\n\n* schema declaration using type hints\n\n* document validation on insert and update\n\n* default value, field alias, index declaration, custom converter and validator\n\n* minimum api, least memory burden\n\n-----\n\n## A Quick Example\n\n```python\nfrom monom import *\n\nclass User(EmbeddedModel):\n    name: str\n    email: str\n\nclass Post(Model):\n    user: User\n    title: str\n    content: str\n    tags: List[str]\n    rank: int\n    visible: bool = True\n    created_on: datetime = datetime.utcnow\n    placeholder: Any\n\n    class Meta:\n        required = ['user', 'title']\n        indexes = ['title']\n        converters = {\n            'title': lambda x: x.capitalize()\n        }\n        validators = {\n            'title': lambda x: len(x) > 5\n        }\n\n    @property\n    def url(self):\n        return '/posts/' + str(self.pk)\n\n    @classmethod\n    def find_posts_by_lucy(cls):\n        return Post.find({'user.name': 'Lucy'}).sort('created_on')\n\ndb = MongoClient().get_database('demo')\nPost.set_db(db)\npost = Post(\n    user={'name': 'Lucy', 'email': 'foo@example.com'},\n    # same as the above\n    # user=User(name='Lucy', email='foo@example.com'),\n    title='hello world',\n    content='monom is awesome...',\n    tags=['life', 'art']\n)\npost.save()\nassert post.visible is True\nassert isinstance(post.user, User)\nassert post.user.name == 'Lucy'\n```\n\n-----\n\n## Guide\n\n### Connection\n\nNo extra connection methods. Just pass pymongo's `Database` instance to your model.\n\n```python\nfrom monom import Model, MongoClient\n\nclass MyModel(Model):\n    pass\n\ndb = MongoClient().get_database('demo')\nMyModel.set_db(db)\n```\n\n-----\n\n### Field Type\n\n* `str`, `int`, `float`, `bool`, `bytes`, `datetime`, `ObjectId`: you are familiar with them already\n\n* `dict`: accepts a `dict` regardless of its items\n\n* `list`: accepts a `list` regardless of its items\n\n* subclass of `EmbeddedModel`: represents MongoDB's embedded document\n\n* `List`: `List`[*the above type*] or `List`[`List`[*the above type*]] or any nested depth\n\n* `Any`: any type that can be saved into MongoDB\n\n-----\n\n### Model\n\n#### Model Instance\n\nTo create a new model object, provide values for its fields as constructor keyword arguments.\nMonom will convert and validate these values when constructing the new instance.\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    name: str\n    visible: bool = True\n\nuser = User(name='foo')\n```\n\nYou can declare a field with an initial value, which acts as the field's default value.\nIf the value is a `callable`, it will be called on each saving or inserting.\n\n#### Methods\n\n* `save(full_update=False, *kw)`\n\nSave the data into MongoDB.\n\n1. The new document will be inserted into MongoDB.\n\n2. The existing document will be updated atomically using operator '$set' and '$unset'.\n\n3. `list` mutation cannot be tracked; but you can pass an keyword argument `full_update=True` to perform a full update.\n\n```python\nfrom monom import *\n\nclass User(Model):\n    name: str\n    email: str\n    hobbits: List[str]\n    active: bool = True\n    created_on: datetime = datetime.utcnow\n\n# connect to mongodb\nUser.set_db(MongoClient().get_database('demo'))\n\n# insert a doc\nUser(name='Lucy', email='lucy@foo.com', hobbits=['music', 'sport']).save()\n\n# find a doc filtering out some fields\nuser = User.find_one({}, {'created_on': False})\n\nuser.name = 'foobar'\ndel user.email\n\n# saved with an atomic update\nuser.save()\n\nuser.hobbits.append('programming')\n# to save a doc with changed list items, you should set `full_update=True`\nuser.save(full_update=True)\n\n```\n\n* `delete(**kw)`\n\nDelete the data from MongoDB.\n\n* `pk`\n\nAn alias for the primary key (`_id` in MongoDB).\n\n* `to_dict()`\n\nReturn an ordered dict containing the instance's data with the same order as the field definition order.\n\n* `to_json(**kw)`\n\nReturn a json string. Some specific types (`ObjectId`, `datetime`, etc.) will be handled correctly.\n\n* `get(name, default=None)`\n\nReturn the value for name or default.\n\n#### Class Methods\n\n* `set_db(db)`\n\nPass a `pymongo.database.Database` to the model.\n\n* `set_collection(collection)`\n\nPass a string or a `pymongo.collection.Collection` to the model.\n\nIf it isn't called explicitly, plural form of the model's name will be the collection name.\n\n* `get_db()`\n\n* `get_collection()`\n\n#### CRUD Methods\n\nMonom adds no extra methods to operate MongoDB.\n\nIt proxies a subset of methods in `pymongo.collection:Collection`, which will perform data cleaning and convert the data from query operations to the model object.\n\n* `insert_one`, `insert_many`, `replace_one`, `update_one`, `update_many`, `find_one_and_update`, `find_one_and_replace` will perform data conversion and validation.\n\n* `find_one`, `find`, `find_one_and_delete`, `find_one_and_replace`, `find_one_and_update` will convert query results to the corresponding model instance.\n\n__`find` returns a `Cursor` of model instances instead of dicts. Before dump your documents to json, remember to do a small conversion.__\n\n```python\nfrom monom import *\n\nclass BinData(Model):\n    name: str\n    data: bytes\n\nBinData.set_db(MongoClient().get_database('demo'))\nBinData(name='foo', data=b'abc').save()\nBinData(name='bar', data=b'xyz').save()\n\njson_dumps([bd.to_dict() for bd in BinData.find()])\n# or call pymongo's methods directly\njson_dumps(BinData.get_collection().find())\n```\n\n-----\n\n#### Meta\n\nYou can add extra constraints for your models by defining an inner class named `Meta` in your model or embedded model.\n\n* `required`: the field must exist in your data\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    name: str\n    email: str\n\n    class Meta:\n        required = ['name']\n```\n\n* `validators` and `converters`\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    name: str\n    age: int\n\n    class Meta:\n        validators = {\n            'age': lambda x: x < 200\n        }\n        converters = {\n            'name': lambda x: x.strip()\n        }\n```\n\n* `aliases`: sometimes you may want to save some fields in another names\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    id: int\n    first_name: str\n\n    class Meta:\n        aliases = [\n            ('id', '_id'),\n            ('first_name', 'firstName'),\n        ]\n\nuser = User(id=42, first_name='Lucy')\nuser.id\n# 42\nuser.to_dict()\n# {'_id': 42, 'firstName': 'Lucy'}\n```\n\n* `Indexes`\n\n```python\nfrom monom import Model, DESCENDING\n\nclass FancyModel(Model):\n    class Meta:\n        indexes = [\n            'f1',  # a single key ascending index\n            ('f2', DESCENDING),  # a single key descending index\n            ['f3', 'f4'],  # a compound index both ascending\n            ['f5', ('f6', DESCENDING)],  # a compound index on 'f5' ascending and 'f6' descending\n            [('f7', DESCENDING), ('f8', DESCENDING)],  # a compound index both descending\n            {'key': 'f9', 'expire_after_seconds': 3600, 'unique': True}  # a single key ascending index with ttl and unique property\n        ]\n```\n\n__Index declaration cannot appear in embedded model.__\n\n-----\n\n#### Options\n\n* `dict_class`\n\nThe underlying data of model instance are saved in an ordered dict. You may change it to `bson.son.SON` or other compatible types.\nDefault value is `collections.OrderedDict`.\n\n* `warn_extra_data`\n\nWhether checks extra data that aren't declared in the model and emits some warnings.\nDefault value is `True`.\n\n* `auto_build_index`\n\nWhether enables auto index creation or deletion.\nYou may disable it when in production because index management may be performed as part of a deployment system.\nDefault value is `True`.\n\n__Theses options can be set on `Model` or the subclass of `Model`; if set on `Model`, all subclasses will inherit them.__\n\n```python\nfrom monom import Model\nfrom bson.son import SON\n\nModel.dict_class = SON\n\nclass User(Model):\n    name: str\n\nuser = User(name='foo')\nassert isinstance(user.to_dict(), SON)\n```\n\n-----\n\n### Helpers\n\n* `switch_db`: switch to a different database temporarily\n\n```python\nfrom monom import Model, MongoClient, switch_db\n\nclass FancyModel(Model):\n    pass\n\nfoo_db = MongoClient().get_database('foo')\nFancyModel.set_db(foo_db)\n\nbar_db = MongoClient().get_database('bar')\n\nwith switch_db(FancyModel, bar_db):\n    assert FancyModel.get_db().name == 'bar'\n```\n\n* `switch_collection`: switch to a different collection temporarily\n\n```python\nfrom monom import Model, MongoClient, switch_collection\n\nclass FancyModel(Model):\n    pass\n\ndb = MongoClient().get_database('my-db')\nFancyModel.set_db(db)\n\nwith switch_collection(FancyModel, 'foobar'):\n    assert FancyModel.get_collection().name == 'foobar'\n```\n\n### Logging\n\nIn several cases, some warnings will be emitted. If that's annoying, you can change the logger level or set a new logger.\n\n```python\nimport logging\nfrom monom import get_logger, set_logger\n\n# change level\nget_logger().setLevel(logging.ERROR)\n\n# or set a new logger\nset_logger(logging.getLogger('foobar'))\n```\n\n-----\n\n### Good Old Django-Style\n\nIf you like the classical style, here you are.\n\n```python\nfrom monom.fields import *\nfrom monom import Model, EmbeddedModel, datetime\n\nclass Comment(EmbeddedModel):\n    content = StringField()\n    created_on = DateTimeField(default=datetime.utcnow)\n\nclass Post(Model):\n    id = ObjectIdField(name='_id')\n    title = StringField(required=True, converter=lambda x: x.capitalize())\n    content = StringField(validator=lambda x: len(x) > 50)\n    comments = ArrayField(EmbeddedField(Comment))\n    rank = IntField(max_value=100)\n    visible = BooleanField(default=True)\n```\n\nUsing this style, you can pass `name` (`alias` aka), `required`, `default`, `converter`, `validator` as constructor keyword arguments.\n\n#### One-to-one match with type hints\n\n* `str` -> `StringField`\n\n* `int` -> `IntField`\n\n* `float` -> `FloatField`\n\n* `bool` -> `BooleanField`\n\n* `bytes` -> `BytesField`\n\n* `datetime` -> `DateTimeField`\n\n* `ObjectId` -> `ObjectIdField`\n\n* `dict` -> `DictField`\n\n* subclass of `EmbeddedModel` -> `EmbeddedField`\n\n* `list` -> `ListField`\n\n* `List` -> `ArrayField`\n\n* `Any` -> `AnyField`\n\n-----\n\n### Caveats\n\n* Inheritance of fields through class inheritance cannot work, for it will cause confusing relationships between model and embedded model.\n\n* You'd better not mix type-hints style with django-orm style; if you insist on that the field definition order may not be reserved.\n\n## Tests\n\nTo run the test suite, ensure you are running a local MongoDB instance on the default port and have pytest installed.\n\n```bash\n$ pytest\n```\n\n## Dependencies\n\n* Python >= 3.6\n* pymongo >= 3.7\n\n## License\n\nMIT\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cymoo/monom",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monom",
    "package_url": "https://pypi.org/project/monom/",
    "platform": "any",
    "project_url": "https://pypi.org/project/monom/",
    "project_urls": {
      "Homepage": "https://github.com/cymoo/monom"
    },
    "release_url": "https://pypi.org/project/monom/1.1.0/",
    "requires_dist": [
      "pymongo (>=3.7)",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "An object mapper for MongoDB with type hints.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6689450,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8baa0c98abcf8e3360fa4acd04a009e2f122674d2e4293ec1b73d0388f0c3e0d",
          "md5": "eb783c6b93ff1f695c4cc210ff2b0103",
          "sha256": "68eea5235af037e6762ca405fa126905534681078e114bd56b2f1f0b88e9b649"
        },
        "downloads": -1,
        "filename": "monom-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb783c6b93ff1f695c4cc210ff2b0103",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21136,
        "upload_time": "2020-02-21T12:25:44",
        "upload_time_iso_8601": "2020-02-21T12:25:44.134513Z",
        "url": "https://files.pythonhosted.org/packages/8b/aa/0c98abcf8e3360fa4acd04a009e2f122674d2e4293ec1b73d0388f0c3e0d/monom-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3b9147ce8b704d812a43b5f0d21e7ecd3fe7eb05b49d6c393b2038c3ee85542",
          "md5": "c07b36ba8c1bbb539362fb7515da11d1",
          "sha256": "ed2182db4501ab83248768ffeac47f87ab8e8bc409e1feb07af8333a944459a0"
        },
        "downloads": -1,
        "filename": "monom-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c07b36ba8c1bbb539362fb7515da11d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23324,
        "upload_time": "2020-02-21T12:25:47",
        "upload_time_iso_8601": "2020-02-21T12:25:47.615574Z",
        "url": "https://files.pythonhosted.org/packages/e3/b9/147ce8b704d812a43b5f0d21e7ecd3fe7eb05b49d6c393b2038c3ee85542/monom-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "447d03bdfd3ac245d3f07d980f879f43bff84d4274bf7a88b4c73149cbf9314d",
          "md5": "fe27a8489b10181d39c84060e8fa97e5",
          "sha256": "157e3e94ee8d0a3dee131ddd0133c6704cb51cd1a03dd6f31a7621a1b8babeb4"
        },
        "downloads": -1,
        "filename": "monom-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe27a8489b10181d39c84060e8fa97e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21131,
        "upload_time": "2020-02-24T16:09:31",
        "upload_time_iso_8601": "2020-02-24T16:09:31.719638Z",
        "url": "https://files.pythonhosted.org/packages/44/7d/03bdfd3ac245d3f07d980f879f43bff84d4274bf7a88b4c73149cbf9314d/monom-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b5aa57fdb8b0f71765afa7699b1fad1ac98abf7d09e78b3bc04a0edbd95bc17",
          "md5": "6a0112d4f359063659b82d8b58ec0d7d",
          "sha256": "e621de6caf5b2a00deef30e53dccb087265b40c204e5ced699bbb96541db0a09"
        },
        "downloads": -1,
        "filename": "monom-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a0112d4f359063659b82d8b58ec0d7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23305,
        "upload_time": "2020-02-24T16:09:34",
        "upload_time_iso_8601": "2020-02-24T16:09:34.314099Z",
        "url": "https://files.pythonhosted.org/packages/8b/5a/a57fdb8b0f71765afa7699b1fad1ac98abf7d09e78b3bc04a0edbd95bc17/monom-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "447d03bdfd3ac245d3f07d980f879f43bff84d4274bf7a88b4c73149cbf9314d",
        "md5": "fe27a8489b10181d39c84060e8fa97e5",
        "sha256": "157e3e94ee8d0a3dee131ddd0133c6704cb51cd1a03dd6f31a7621a1b8babeb4"
      },
      "downloads": -1,
      "filename": "monom-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe27a8489b10181d39c84060e8fa97e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21131,
      "upload_time": "2020-02-24T16:09:31",
      "upload_time_iso_8601": "2020-02-24T16:09:31.719638Z",
      "url": "https://files.pythonhosted.org/packages/44/7d/03bdfd3ac245d3f07d980f879f43bff84d4274bf7a88b4c73149cbf9314d/monom-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b5aa57fdb8b0f71765afa7699b1fad1ac98abf7d09e78b3bc04a0edbd95bc17",
        "md5": "6a0112d4f359063659b82d8b58ec0d7d",
        "sha256": "e621de6caf5b2a00deef30e53dccb087265b40c204e5ced699bbb96541db0a09"
      },
      "downloads": -1,
      "filename": "monom-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a0112d4f359063659b82d8b58ec0d7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23305,
      "upload_time": "2020-02-24T16:09:34",
      "upload_time_iso_8601": "2020-02-24T16:09:34.314099Z",
      "url": "https://files.pythonhosted.org/packages/8b/5a/a57fdb8b0f71765afa7699b1fad1ac98abf7d09e78b3bc04a0edbd95bc17/monom-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}