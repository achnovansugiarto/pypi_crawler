{
  "info": {
    "author": "Xiaodong DENG",
    "author_email": "xd.deng.r@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "====================================================================\n*minimalcluster* - A Minimal Cluster Computing Framework with Python\n====================================================================\n\n\"**minimal**\" here means minimal dependency or platform requirements, as well as its nature of \"minimum viable product\". It's mainly for tackling straightforward \"embarrassingly parallel\" tasks using multiple commodity machines, also a good choice for experimental and learning purposes. The idea came from `Eli Bendersky's blog <https://eli.thegreenplace.net/2012/01/24/distributed-computing-in-python-with-multiprocessing>`_\n.\n\n**minimalcluster** is built only using plain Python and its standard libraries (mainly *multiprocessing*). This brings a few advantages, including\n\n- no additional installation or configuration is needed\n\n- 100% cross-platform (you can even have Linux, MacOS, and Windows nodes within a single cluster).\n\nThis package can be used with Python 2.7+ or 3.6+. But within a cluster, you can only choose a single version of Python, either 2 or 3.\n\nFor more frameworks for parallel or cluster computing, you may also want to refer to `Parallel Processing and Multiprocessing in Python <https://wiki.python.org/moin/ParallelProcessing>`_\n.\n\n\n******************\nBenchmarking\n******************\n\n.. image:: https://raw.githubusercontent.com/XD-DENG/minimalcluster-py/master/benchmarking/benchmarking.png\n\n\n`Details <https://github.com/XD-DENG/minimalcluster-py/blob/master/benchmarking/README.md>`_\n\n******************\nUsage & Examples\n******************\n\nStep 1 - Install this package\n=============================\n\n.. code-block:: bash\n\n   pip install minimalcluster\n\nStep 2 - Start master node\n=============================\nOpen your Python terminal on your machine which will be used as **Master Node**, and run\n\n.. code:: python\n\n    from minimalcluster import MasterNode\n\n    your_host = '<your master node hostname or IP>'\n    # or use '0.0.0.0' if you have high enough privilege\n    your_port= <port to use>\n    your_authkey = '<the authkey for your cluster>'\n\n    master = MasterNode(HOST = your_host, PORT = your_port, AUTHKEY = your_authkey)\n    master.start_master_server()\n\n\nPlease note the master node will join the cluster as worker node as well by default. If you prefer otherwise, you can have argument *if_join_as_worker* in *start_master_server()* to be *False*. In addition, you can also remove it from the cluster by invoking *master.stop_as_worker()* and join as worker node again by invoking *master.join_as_worker()*.\n\n\nStep 3 - Start worker nodes\n=============================\n\nOn all your **Worker Nodes**, run the command below in your Python terminal\n\n.. code:: python\n\n    from minimalcluster import WorkerNode\n\n    your_host = '<your master node hostname or IP>'\n    your_port= <port to use>\n    your_authkey = '<the authkey for your cluster>'\n    N_processors_to_use = <how many processors on your worker node do you want to use>\n\n    worker = WorkerNode(your_host, your_port, your_authkey, nprocs = N_processors_to_use)\n\n    worker.join_cluster()\n\nNote: if your nprocs is bigger than the number of processors on your machine, it will be changed to be the number of processors.\n\nAfter the operations on the worker nodes, you can go back to your Master node and check the list of connected Worker nodes.\n\n.. code:: python\n\n    master.list_workers()\n\n\nStep 4 - Prepare environment to share with worker nodes\n=======================================================\n\nWe need to specify the task function (as well as its potential dependencies) and the arguments to share with worker nodes, including\n\n**Environment**: The environment is simply the codes that's going to run on worker nodes. There are two ways to set up environment. The first one is to prepare a separate .py file as environment file and declare all the functions you need inside, then use *master.load_envir('<path of the environment file>')* to load the environment. Another way is for simple cases. You can use *master.load_envir('<your statements>', from_file = False)* to load the environment, for example *master.load_envir(\"f = lambda x: x * 2\", from_file = False)*.\n\n**Task Function**: We need to register the task function using *master.register_target_function('<function name>')*, like *master.register_target_function(\"f\")*. Please note the task function itself must be declared in the environment file or statement.\n\n**Arguments**: The argument must be a list. It will be passed to the task function. Usage: *master.load_args(args)*. **Note the elements in list args must be unique.**\n\nStep 5 - Submit jobs\n====================\n\nNow your cluster is ready. you can try the examples below in your Python terminal on your Master node.\n\nExample 1 - Estimate value of Pi\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    envir_statement = '''\n    from random import random\n    example_pi_estimate_throw = lambda x: 1 if (random() * 2 - 1)**2 + (random() * 2 - 1)**2 < 1 else 0\n    '''\n    master.load_envir(envir_statement, from_file = False)\n    master.register_target_function(\"example_pi_estimate_throw\")\n\n    N = int(1e6)\n    master.load_args(range(N))\n\n    result = master.execute()\n\n    print(\"Pi is roughly %f\" % (4.0 * sum([x2 for x1, x2 in result.items()]) / N))\n\n\nExample 2 - Factorization\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    envir_statement = '''\n    # A naive factorization method. Take integer 'n', return list of factors.\n    # Ref: https://eli.thegreenplace.net/2012/01/24/distributed-computing-in-python-with-multiprocessing\n    def example_factorize_naive(n):\n        if n < 2:\n            return []\n        factors = []\n        p = 2\n        while True:\n            if n == 1:\n                return factors\n            r = n % p\n            if r == 0:\n                factors.append(p)\n                n = n / p\n            elif p * p >= n:\n                factors.append(n)\n                return factors\n            elif p > 2:\n                p += 2\n            else:\n                p += 1\n        assert False, \"unreachable\"\n    '''\n\n    #Create N large numbers to factorize.\n    def make_nums(N):\n        nums = [999999999999]\n        for i in range(N):\n            nums.append(nums[-1] + 2)\n        return nums\n\n    master.load_args(make_nums(5000))\n    master.load_envir(envir_statement, from_file = False)\n    master.register_target_function(\"example_factorize_naive\")\n\n    result = master.execute()\n\n    for x in result.items()[:10]: # if running on Python 3, use `list(result.items())` rather than `result.items()`\n        print(x)\n\nExample 3 - Feed multiple arguments to target function\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt's possible that you need to feed multiple arguments to target function. A small trick will be needed here: you need to wrap your arguments into a tuple, then pass the tuple to the target function as a \"single\" argument. Within your argument function, you can \"unzip\" this tuple and obtain your arguments.\n\n.. code:: python\n\n    envir_statement = '''\n    f = lambda x:x[0]+x[1]\n    '''\n    master.load_envir(envir_statement, from_file = False)\n    master.register_target_function(\"f\")\n\n    master.load_args([(1,2), (3,4), (5, 6), (7, 8)])\n\n    result = master.execute()\n\n    print(result)\n\nStep 6 - Shutdown the cluster\n==============================\n\nYou can shutdown the cluster by running\n\n.. code:: python\n\n    master.shutdown()\n\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/XD-DENG/minimalcluster-py",
    "keywords": "parallel cluster multiprocessing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minimalcluster",
    "package_url": "https://pypi.org/project/minimalcluster/",
    "platform": "",
    "project_url": "https://pypi.org/project/minimalcluster/",
    "project_urls": {
      "Homepage": "https://github.com/XD-DENG/minimalcluster-py"
    },
    "release_url": "https://pypi.org/project/minimalcluster/0.1.0.dev13/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A minimal cluster computing framework",
    "version": "0.1.0.dev13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3466570,
  "releases": {
    "0.1.0.dev10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee5cad5915b140cb123366e7fa509e61beec6623f0e9f19ff80856615dcf8780",
          "md5": "bbe69d9dc0663c063cc5126f76119047",
          "sha256": "c961c90fbd02d3fb55e018b8c8e25d7688e27857f0b134543e5d207505cd21ff"
        },
        "downloads": -1,
        "filename": "minimalcluster-0.1.0.dev10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbe69d9dc0663c063cc5126f76119047",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13313,
        "upload_time": "2017-12-16T08:05:04",
        "upload_time_iso_8601": "2017-12-16T08:05:04.459221Z",
        "url": "https://files.pythonhosted.org/packages/ee/5c/ad5915b140cb123366e7fa509e61beec6623f0e9f19ff80856615dcf8780/minimalcluster-0.1.0.dev10-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.dev11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "541996fb28aba15769080e62d05e8fe960998c58ac3d7bd89c1b4ee50b6d6591",
          "md5": "ca811a6b1141f69b06e29f7acb2ea927",
          "sha256": "0fca4408c6a8cc247d4b19d5d6f6df3d0a1ca7df6758da6c26977efd6a9dd5f7"
        },
        "downloads": -1,
        "filename": "minimalcluster-0.1.0.dev11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca811a6b1141f69b06e29f7acb2ea927",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13515,
        "upload_time": "2017-12-17T06:06:43",
        "upload_time_iso_8601": "2017-12-17T06:06:43.492427Z",
        "url": "https://files.pythonhosted.org/packages/54/19/96fb28aba15769080e62d05e8fe960998c58ac3d7bd89c1b4ee50b6d6591/minimalcluster-0.1.0.dev11-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.dev13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15e0c307375c9dfa0002672b61af8695016a66c54d5d723075a0927ecd9f383f",
          "md5": "f0be742558da8a5a3cd1a6f077712c8d",
          "sha256": "34c85045d43f8959f78037f16af3a65cee0dee85033be198679c13abf4f44d78"
        },
        "downloads": -1,
        "filename": "minimalcluster-0.1.0.dev13-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0be742558da8a5a3cd1a6f077712c8d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14625,
        "upload_time": "2018-01-06T06:53:02",
        "upload_time_iso_8601": "2018-01-06T06:53:02.406840Z",
        "url": "https://files.pythonhosted.org/packages/15/e0/c307375c9dfa0002672b61af8695016a66c54d5d723075a0927ecd9f383f/minimalcluster-0.1.0.dev13-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15e0c307375c9dfa0002672b61af8695016a66c54d5d723075a0927ecd9f383f",
        "md5": "f0be742558da8a5a3cd1a6f077712c8d",
        "sha256": "34c85045d43f8959f78037f16af3a65cee0dee85033be198679c13abf4f44d78"
      },
      "downloads": -1,
      "filename": "minimalcluster-0.1.0.dev13-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0be742558da8a5a3cd1a6f077712c8d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14625,
      "upload_time": "2018-01-06T06:53:02",
      "upload_time_iso_8601": "2018-01-06T06:53:02.406840Z",
      "url": "https://files.pythonhosted.org/packages/15/e0/c307375c9dfa0002672b61af8695016a66c54d5d723075a0927ecd9f383f/minimalcluster-0.1.0.dev13-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}