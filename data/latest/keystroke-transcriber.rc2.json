{
  "info": {
    "author": "Erik Nyquist",
    "author_email": "eknyquist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "keystroke_transcriber: records your keystrokes and writes an Arduino sketch to replay the same keystrokes\n---------------------------------------------------------------------------------------------------------\n\nIf you need to write arduino sketches for USB HID keyboard emulation (Digispark, Teensy, Ducky USB), then\nthis module might be useful to you.\n\nThis module records global keystroke events on your PC (when you tell it to),\nand uses the recorded keystroke sequence to write the sketch for you.\n\nSimply tell it which programmable USB HID keyboard platform you're using, and start\npressing keys. keystroke_transcriber will generate a sketch file for you. You can\neven choose to maintain the timing between your original keypresses, if you want.\n\nLimitations\n-----------\n\nCurrently only supports Digispark: Support for Ducky USB and Teensy devices will be coming soon\n\nInstall\n-------\n\nInstall from pypi:\n\n::\n\n    pip install keystroke_transcriber\n\nkeystroke_transcriber command-line arguments\n--------------------------------------------\n\n::\n\n    usage: keystroke_transcriber [-h] [-p {oneshot,repeat-forever,repeat-n}]\n                                 [-t {digispark}] [-o OUTPUT_FILE]\n                                 [-n REPEAT_COUNT] [-D REPEAT_DELAY_MS]\n                                 [-d EVENT_DELAY_MS] [-m] [-r RECORD_SECONDS] [-s]\n                                 [-q]\n\n    Records global keypress events until Ctrl-C is pressed (or until a fixed time\n    has elapsed), and translates them into a program that replays those keypress\n    events on some programmable USB HID device (e.g. Digispark)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p {oneshot,repeat-forever,repeat-n}, --playback-type {oneshot,repeat-forever,repeat-n}\n                            Set the playback style for recorded keystroke\n                            sequences (default: oneshot)\n      -t {digispark}, --target-type {digispark}\n                            Set the type of programmable USB HID device to\n                            generate output for (default: digispark)\n      -o OUTPUT_FILE, --output-file OUTPUT_FILE\n                            Write output to this file, instead of printing output\n                            to the terminal (default: None)\n      -n REPEAT_COUNT, --repeat-count REPEAT_COUNT\n                            Sets how many times the recorded keystroke sequence\n                            should be repeated (only used if --playback-type is\n                            repeat-n) (default: 1)\n      -D REPEAT_DELAY_MS, --repeat-delay-ms REPEAT_DELAY_MS\n                            Sets delay between recorded keystroke sequence\n                            repetitions, in milliseconds (only used if --playback-\n                            type is repeat-n or repeat-forever) (default: 0)\n      -d EVENT_DELAY_MS, --event-delay-ms EVENT_DELAY_MS\n                            Sets delay between individual keystroke events, in\n                            milliseconds (only used if --maintain-timing is False)\n                            (default: 0)\n      -m, --maintain-timing\n                            Maintain timing between recorded keystrokes (default:\n                            False)\n      -r RECORD_SECONDS, --record-seconds RECORD_SECONDS\n                            Record for this many seconds, instead of recording\n                            until Ctrl-C is seen (default: None)\n      -s, --translate-scan-codes\n                            Attempt to translate PS/2 scan codes to USB HID usage\n                            ID codes (default: True)\n      -q, --quiet-keypresses\n                            Don't print detected keypresses to the terminal\n                            (default: False)\n\n\nExample Digispark sketch generated by keystroke_transcriber\n-----------------------------------------------------------\n\nFor this example, I ran keystroke_transcriber with the following arguments to record\nkeypress events until Ctrl+C, and generate a sketch for Digispark devices:\n\n::\n\n    python -m keystroke_transcriber -p oneshot -t digispark -m\n\nThen, I performed the following keyboard / mouse actions:\n\n#. Typed Ctrl+R (to open the \"run\" program)\n#. Typed \"notepad\", followed by the Enter key (to open the Notepad application)\n#. Typed \"Hello, from keystroke_transcriber!!!!\"\n#. Clicked on the terminal window in which I originally ran keystroke_transcriber, to\n   bring it back into focus, so the Ctrl+C signal in the next step would be sent to the\n   program, instead of being sent to notepad (This step will not be recorded/replicated by\n   keystroke_transcriber, since keystroke_transcriber records keypresses and not mouse activity,\n   but it is necessary to successfully record keystroke sequences so I am including it anyway)\n#. Typed Ctrl+C (to stop the recording)\n\nAfter I pressed Ctrl+C, keystroke_transcriber provided the following Digispark sketch:\n\n::\n\n    // Auto-generated by keystroke_transcriber. Do not modify!\n\n    #include \"DigiKeyboard.h\"\n\n    #define NUM_EVENTS (83u)\n\n    // Holds all information required to replay a single keypress\n    struct key_event\n    {\n        uint8_t key;\n        uint8_t mods;\n        uint16_t delay_before_ms;\n    };\n\n    // Holds a sequence of one or more keypress events to be replayed\n    const struct key_event key_events[NUM_EVENTS] PROGMEM =\n    {\n        {0, MOD_GUI_LEFT, 0u}, {21u, MOD_GUI_LEFT, 235u}, {0, MOD_GUI_LEFT, 95u},\n        {0, 0, 47u}, {17u, 0, 284u}, {18u, 0, 46u}, {0, 0, 108u}, {23u, 0, 16u},\n        {8u, 0, 79u}, {0, 0, 78u}, {19u, 0, 47u}, {0, 0, 94u}, {4u, 0, 61u},\n        {7u, 0, 47u}, {0, 0, 93u}, {40u, 0, 188u}, {0, 0, 31u},\n        {0, MOD_SHIFT_LEFT, 710u}, {11u, MOD_SHIFT_LEFT, 141u}, {0, 0, 143u},\n        {8u, 0, 15u}, {0, 0, 63u}, {15u, 0, 15u}, {0, 0, 62u}, {15u, 0, 31u},\n        {18u, 0, 47u}, {0, 0, 142u}, {54u, 0, 63u}, {44u, 0, 46u}, {0, 0, 78u},\n        {9u, 0, 15u}, {0, 0, 94u}, {21u, 0, 78u}, {0, 0, 47u}, {18u, 0, 31u},\n        {16u, 0, 78u}, {44u, 0, 94u}, {0, 0, 125u}, {14u, 0, 94u}, {0, 0, 48u},\n        {8u, 0, 78u}, {0, 0, 31u}, {28u, 0, 62u}, {0, 0, 47u}, {22u, 0, 63u},\n        {0, 0, 31u}, {23u, 0, 173u}, {21u, 0, 30u}, {0, 0, 95u}, {18u, 0, 62u},\n        {14u, 0, 31u}, {0, 0, 79u}, {8u, 0, 30u}, {0, 0, 94u},\n        {0, MOD_SHIFT_LEFT, 46u}, {45u, MOD_SHIFT_LEFT, 31u},\n        {0, MOD_SHIFT_LEFT, 31u}, {0, 0, 62u}, {23u, 0, 141u}, {21u, 0, 61u},\n        {4u, 0, 108u}, {0, 0, 140u}, {17u, 0, 15u}, {22u, 0, 31u}, {0, 0, 47u},\n        {6u, 0, 111u}, {0, 0, 94u}, {21u, 0, 46u}, {0, 0, 47u}, {12u, 0, 31u},\n        {5u, 0, 95u}, {0, 0, 139u}, {8u, 0, 46u}, {21u, 0, 47u}, {0, 0, 109u},\n        {0, MOD_SHIFT_LEFT, 62u}, {30u, MOD_SHIFT_LEFT, 46u},\n        {0, MOD_SHIFT_LEFT, 63u}, {30u, MOD_SHIFT_LEFT, 93u},\n        {0, MOD_SHIFT_LEFT, 31u}, {30u, MOD_SHIFT_LEFT, 31u},\n        {0, MOD_SHIFT_LEFT, 46u}, {0, 0, 15u}\n    };\n\n    // Send a single keypress event to the USB host\n    void send_key_event(const struct key_event *event)\n    {\n        // millis() timestamp of the last sent event\n        static unsigned long last_event_time_ms = 0u;\n\n        unsigned long elapsed_ms = millis() - last_event_time_ms;\n\n        if (event->delay_before_ms > elapsed_ms)\n        {\n        DigiKeyboard.delay(event->delay_before_ms - elapsed_ms);\n    }\n\n    last_event_time_ms = millis();\n    DigiKeyboard.sendKeyPress(event->key, event->mods);\n\n    }\n\n    // Replay all keypress events stored in PROGMEM\n    void replay_key_events()\n    {\n        for (unsigned i = 0u; i < NUM_EVENTS; i++)\n        {\n            struct key_event event;\n\n            event.key = pgm_read_byte_near(&key_events[i].key);\n            event.mods = pgm_read_byte_near(&key_events[i].mods);\n            event.delay_before_ms = pgm_read_word_near(&key_events[i].delay_before_ms);\n\n            send_key_event(&event);\n        }\n    }\n\n    void setup()\n    {\n        replay_key_events();\n    }\n\n    void loop()\n    {\n\n        DigiKeyboard.update();\n    }\n\nIf you flash this sketch on to your Digispark, and plug the Digispark into a Windows\nPC, you will see the keyboard activity I just described, complete with the timing of my original keypresses.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eriknyquist/keystroke_transcriber",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keystroke-transcriber",
    "package_url": "https://pypi.org/project/keystroke-transcriber/",
    "platform": null,
    "project_url": "https://pypi.org/project/keystroke-transcriber/",
    "project_urls": {
      "Homepage": "https://github.com/eriknyquist/keystroke_transcriber"
    },
    "release_url": "https://pypi.org/project/keystroke-transcriber/1.0.1/",
    "requires_dist": [
      "keyboard",
      "wheel"
    ],
    "requires_python": "",
    "summary": "Records keypress events and converts them for replay on programmable USB HID devices",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13471031,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1324bd4c5d77a4b3379e0cdf7a79c10528373c04445eedfdaab85706e50f25ab",
          "md5": "aa2aa8e31b9b6495398337f63bdf42dc",
          "sha256": "9e709b739603a316b2260a180e09d26236a8faa44983665fcec87244611906a5"
        },
        "downloads": -1,
        "filename": "keystroke_transcriber-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa2aa8e31b9b6495398337f63bdf42dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16861,
        "upload_time": "2022-04-10T19:33:54",
        "upload_time_iso_8601": "2022-04-10T19:33:54.541557Z",
        "url": "https://files.pythonhosted.org/packages/13/24/bd4c5d77a4b3379e0cdf7a79c10528373c04445eedfdaab85706e50f25ab/keystroke_transcriber-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25f1360f88012a85e3d238ed552d6dc42732edd2ffc675d3e7b7131a5a742be8",
          "md5": "0d6893a0e3db158218afed6b5128dd4a",
          "sha256": "cd585efc0a461414ce5db977f27206ae05f3874446c6211e06ad4a1ab9761ed9"
        },
        "downloads": -1,
        "filename": "keystroke_transcriber-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d6893a0e3db158218afed6b5128dd4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17070,
        "upload_time": "2022-04-10T21:02:27",
        "upload_time_iso_8601": "2022-04-10T21:02:27.962538Z",
        "url": "https://files.pythonhosted.org/packages/25/f1/360f88012a85e3d238ed552d6dc42732edd2ffc675d3e7b7131a5a742be8/keystroke_transcriber-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25f1360f88012a85e3d238ed552d6dc42732edd2ffc675d3e7b7131a5a742be8",
        "md5": "0d6893a0e3db158218afed6b5128dd4a",
        "sha256": "cd585efc0a461414ce5db977f27206ae05f3874446c6211e06ad4a1ab9761ed9"
      },
      "downloads": -1,
      "filename": "keystroke_transcriber-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0d6893a0e3db158218afed6b5128dd4a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17070,
      "upload_time": "2022-04-10T21:02:27",
      "upload_time_iso_8601": "2022-04-10T21:02:27.962538Z",
      "url": "https://files.pythonhosted.org/packages/25/f1/360f88012a85e3d238ed552d6dc42732edd2ffc675d3e7b7131a5a742be8/keystroke_transcriber-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}