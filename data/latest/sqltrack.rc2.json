{
  "info": {
    "author": "",
    "author_email": "Joachim Folz <joachim.folz@dfki.de>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: SQL",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# SQLTrack\n\nSQLTrack is a set of tools to track your (machine learning)\nexperiments.\nWhile using other tools like \n[Sacred](https://github.com/IDSIA/sacred)\nor\n[mlflow tracking](https://mlflow.org/docs/latest/tracking.html),\nwe found that they limited how we could track our\nexperiments and later what analyses we could perform.\nWhat we realized is that it is ultimately futile for library\nauthors to guess how experiment data will be used.\nIf it was possible for a library to cater to every single\nuse case it would then become too bloated to use.\n\nThat is why our goal is to collect a wide variety of examples\nfor analyses and visualizations to empower our users,\ninstead of providing complex functionality in our package.\n\nTo that end, SQLTrack only provides a basic schema of\nexperiments, runs, and metrics that you can extend to suit\nyour needs, as well as some basic tools to set up the\ndatabase and store experiment data.\n\n\n\n## Getting started\n\nCurrently SQLTrack supports PostgreSQL through the psycopg driver.\nWe don't plan on adding support any other databases, except SQLite\nif there is demand for it.\nWe've tried using ORMs, but found that they made things way more\ncomplicated than they needed to be and - most importantly - they\nobfuscated the DB schema from users.\nIdeally we would use standard SQL and let users bring their own\ndatabase Python DB-API 2.0 compatible driver, but that would mean\nwe lose access to advanced features like indexable JSONB columns.\n\n\n\n### Installation\n\nSQLTrack can be installed like any other Python package,\ne.g., `pip install sqltrack`.\nBy default only core dependencies are installed,\nwhich speeds up usage in containerized environments.\nCore functionality located in the toplevel package\n`sqltrack` allows tracking experiments and working\nwith the database.\nTo use some of the convenience functions for anaylsis later,\ninstall the full package with `pip install sqltrack[full]`.\n\nOn Linux, your distribution repositories should include\na version of PostgreSQL you can use.\nWe develop against 13, but any currently supported\nversion should work.\nThere are also install instructions for\n[MacOS](https://www.postgresql.org/download/macosx/)\nand\n[Windows](https://www.postgresql.org/download/windows/).\n\n\n\n### Base schema\n\nThis is the basic schema SQLTrack defines (minus some details like indexes),\nwith tables `experiments`, `experiment_links`, `runs`,\n`run_links`, and `metrics`.\n\n`runs.status` has the custom enum type `runstatus`.\nIt behaves like text when used with the psycopg driver.\nPossible values have been lifted from Slurm job status.\n\n```SQL\nBEGIN;\n\nCREATE TABLE experiments (\n\tid BIGINT GENERATED BY DEFAULT AS IDENTITY,\n\ttime_created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n\tname TEXT NOT NULL,\n    comment TEXT,\n    tags JSONB,\n\tPRIMARY KEY (id),\n    UNIQUE(name)\n);\n\nCREATE TABLE experiment_links (\n\tfrom_id BIGINT NOT NULL,\n\tkind TEXT NOT NULL,\n    to_id BIGINT NOT NULL,\n\tPRIMARY KEY(from_id, kind, to_id),\n\tFOREIGN KEY(from_id) REFERENCES experiments(id),\n\tFOREIGN KEY(to_id) REFERENCES experiments(id)\n);\n\nCREATE TYPE runstatus AS ENUM (\n    'BOOT_FAIL',\n    'CANCELLED',\n    'CONFIGURING',\n    'COMPLETED',\n    'COMPLETING',\n    'DEADLINE',\n    'FAILED',\n    'NODE_FAIL',\n    'OUT_OF_MEMORY',\n    'PENDING',\n    'PREEMPTED',\n    'RESV_DEL_HOLD',\n    'REQUEUE_FED',\n    'REQUEUE_HOLD',\n    'REQUEUED',\n    'RESIZING',\n    'REVOKED',\n    'RUNNING',\n    'SIGNALING',\n    'SPECIAL_EXIT',\n    'STAGE_OUT',\n    'STOPPED',\n    'SUSPENDED',\n    'TIMEOUT'\n);\n\nCREATE TABLE runs (\n\tid BIGINT GENERATED BY DEFAULT AS IDENTITY,\n\texperiment_id BIGINT NOT NULL,\n\tstatus runstatus NOT NULL DEFAULT 'PENDING',\n\ttime_created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,\n\ttime_started TIMESTAMP WITH TIME ZONE,\n\ttime_updated TIMESTAMP WITH TIME ZONE,\n    comment TEXT,\n    tags JSONB,\n    args JSONB,\n    env JSONB,\n\tPRIMARY KEY(id),\n\tFOREIGN KEY(experiment_id) REFERENCES experiments(id) ON DELETE CASCADE\n);\n\nCREATE TABLE run_links (\n\tfrom_id BIGINT NOT NULL,\n\tkind TEXT NOT NULL,\n    to_id BIGINT NOT NULL,\n\tPRIMARY KEY(from_id, kind, to_id),\n\tFOREIGN KEY(from_id) REFERENCES runs(id) ON DELETE CASCADE,\n\tFOREIGN KEY(to_id) REFERENCES runs(id) ON DELETE CASCADE\n);\n\nCREATE TABLE metrics (\n\trun_id INTEGER NOT NULL,\n\tstep BIGINT NOT NULL DEFAULT 0,\n\tprogress DOUBLE PRECISION NULL DEFAULT 0.0,\n    PRIMARY KEY (run_id, step, progress),\n\tFOREIGN KEY(run_id) REFERENCES runs(id) ON DELETE CASCADE\n);\n\nEND;\n```\n\nNote that the `metrics` table doesn't contain any columns to store metrics yet.\nUsers need to add these as required.\nE.g., a script to add columns for timing, loss, and accuracy in \ntrain, validation, and test phases could look like this:\n\n```SQL\nBEGIN;\n\nALTER TABLE metrics\n\tADD COLUMN train_start TIMESTAMP WITH TIME ZONE,\n\tADD COLUMN train_end TIMESTAMP WITH TIME ZONE,\n\tADD COLUMN train_loss FLOAT,\n\tADD COLUMN train_top1 FLOAT,\n\tADD COLUMN train_top5 FLOAT,\n\tADD COLUMN val_start TIMESTAMP WITH TIME ZONE,\n\tADD COLUMN val_end TIMESTAMP WITH TIME ZONE,\n\tADD COLUMN val_loss FLOAT,\n\tADD COLUMN val_top1 FLOAT,\n\tADD COLUMN val_top5 FLOAT,\n\tADD COLUMN test_start TIMESTAMP WITH TIME ZONE,\n\tADD COLUMN test_end TIMESTAMP WITH TIME ZONE,\n\tADD COLUMN test_loss FLOAT,\n\tADD COLUMN test_top1 FLOAT,\n\tADD COLUMN test_top5 FLOAT;\n\nEND;\n```\n\nNow you might ask why we make you add columns for your metrics,\nbecause that might seem annoying and wasteful compared\nto a normalized name+value approach like what `mlflow` uses.\nBut don't worry, because PostgreSQL is smart.\nAny NULL values aren't actually stored.\nIt only stores values that are not NULL and uses a bitmap\nto keep track of them.\nAlso, each row has a fixed size header of ~23 bytes and `mlflow`\nuses one row per metric value.\nSince we store many metric values in a row we can afford\nreally large bitmaps to track those NULL values before we\ncome out worse.\n\nPut your instructions to add metrics columns etc. in a SQL\nscript file, e.g. `v001.sql`, for use later.\nAdd `v002.sql` etc. to update your schema.\n\n\n\n### Setup the database\n\nSQLTrack provides a simple tool to setup your database.\n\n```\nusage: sqltrack [-h] [-u USER] [-a HOST] [-d DATABASE] [-s SCHEMA] [-c CONFIG_PATH] {setup} ...\n\npositional arguments:\n  {setup}               Available commands.\n    setup               Setup (and update) the database.\n\noptions:\n  -h, --help            show this help message and exit\n  -u USER, --user USER  username\n  -a HOST, --host HOST  DB host (and port)\n  -d DATABASE, --database DATABASE\n                        database name\n  -s SCHEMA, --schema SCHEMA\n                        schema name\n  -c CONFIG_PATH, --config-path CONFIG_PATH\n                        path to config file\n```\n\nUser, host, database, and schema as parameters given on the command line take priority,\nbut you can also define environment variables `SQLTRACK_DSN_<PARAM>` to set them.\nMore info on available parameters can be found\n[here](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS).\nFinally, most convenient is probably to store them in a config file.\nThe default path is `./sqltrack.conf`\n\n```\nuser=<USER>\nhost=<HOST>\ndatabase=<DATABASE>\nschema=<SCHEMA>\n```\n\nThose SQL script files you created earlier?\nThis is where you use them.\nRun the setup command with them, e.g. `sqltrack setup v001.sql`.\nThis creates the base schema and updates it with your definitions.\n\n\n\n### Track an experiment\n\n```Python\nfrom random import random\nimport sqltrack\n\ndef main():\n    client = sqltrack.Client()\n    experiment = sqltrack.Experiment(client, name=\"Very science, much data\")\n    run = experiment.get_run()\n    with run.track():\n        for epoch in range(90):\n            metrics = {\"train_loss\": random(), \"train_top1\": random()}\n            run.add_metrics(step=epoch, progress=epoch/epochs, **metrics)\n```\n\n\n\n### Analyzing results\n\nThis is where it's up to you.\nWe recommend Jupyter Lab to interact with the database,\nbut plain Jupyter or alternatives like\n[Plotly Dash](https://dash.plotly.com/introduction)\nwork well too.\nLook at the examples directory in our repository to get some ideas.\nBut really, you're the experimenter,\nyou know best what to do with your data.\n\n\n\n### [Optional] Self-signed SSL certificate\n\nYou can create a SSL self-signed certificate to use with HTTPS:\n```\nopenssl req -x509 -newkey rsa:4096 -keyout jupyter.key -out jupyter.crt -sha256 -days 365 -nodes\n```\n\nStart Jupyter Lab with your certificate:\n```\njupyter-lab [options...] --certfile jupyter.crt --keyfile jupyter.key\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "SQL,postgres,PostgreSQL,machine learning,ML,experiment tracking,experiment,tracking,jupyter,jupyterlab,notebook",
    "license": "MIT License  Copyright (c) 2023 Joachim Folz  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "Joachim Folz <joachim.folz@dfki.de>",
    "name": "sqltrack",
    "package_url": "https://pypi.org/project/sqltrack/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqltrack/",
    "project_urls": {
      "Bug Reports": "https://gitlab.com/jfolz/sqltrack/-/issues",
      "Changelog": "https://gitlab.com/jfolz/sqltrack/-/blob/main/CHANGELOG",
      "Documentation": "https://gitlab.com/jfolz/sqltrack/-/blob/main/README.md",
      "Homepage": "https://gitlab.com/jfolz/sqltrack",
      "License": "https://gitlab.com/jfolz/sqltrack/-/blob/main/LICENSE",
      "Source": "https://gitlab.com/jfolz/sqltrack"
    },
    "release_url": "https://pypi.org/project/sqltrack/0.1.4/",
    "requires_dist": [
      "docopt-ng (<1.0.0,>=0.8.1)",
      "psycopg[binary] (<4.0.0,>=3.1.8)",
      "sphinx (<7.0.0,>=6.1.3) ; extra == 'docs'",
      "sphinxcontrib-programoutput (<1.0.0,>=0.17) ; extra == 'docs'",
      "nbsphinx (<1.0.0,>=0.9.0) ; extra == 'docs'",
      "furo ; extra == 'docs'",
      "humanize (<5.0.0,>=4.6.0) ; extra == 'full'",
      "ipython (<9.0.0,>=8.8.0) ; extra == 'full'",
      "ipywidgets (<9.0.0,>=8.0.4) ; extra == 'full'",
      "itables (<2.0.0,>=1.4.5) ; extra == 'full'",
      "pandas (<2.0.0,>=1.5.3) ; extra == 'full'",
      "plotly (<6.0.0,>=5.13.0) ; extra == 'full'"
    ],
    "requires_python": ">=3.7",
    "summary": "SQL-based experiment tracking",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17300945,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f5031528daf6f58260398aaebf6f89251e3293ccb762b2ff649d051e2550675",
          "md5": "e7ef201da840d2ad7c31304070765aa0",
          "sha256": "c2bf9787e8bec9162cb820ad0a276f209ebc600e7e431c4d4c932180125c52a5"
        },
        "downloads": -1,
        "filename": "sqltrack-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7ef201da840d2ad7c31304070765aa0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27342,
        "upload_time": "2023-03-10T15:13:04",
        "upload_time_iso_8601": "2023-03-10T15:13:04.526727Z",
        "url": "https://files.pythonhosted.org/packages/5f/50/31528daf6f58260398aaebf6f89251e3293ccb762b2ff649d051e2550675/sqltrack-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "399fc862f7f12be7d153b478488fcfea92946d552b2dfa306424ac0bf091be67",
          "md5": "ccc621bf559805ecb7840c2d96bcf1bc",
          "sha256": "d455f4ac0a20b0cfd4a76d0fda04c141061c8347189ea392fcba6a3729b64e67"
        },
        "downloads": -1,
        "filename": "sqltrack-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ccc621bf559805ecb7840c2d96bcf1bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27604,
        "upload_time": "2023-03-10T15:13:06",
        "upload_time_iso_8601": "2023-03-10T15:13:06.251735Z",
        "url": "https://files.pythonhosted.org/packages/39/9f/c862f7f12be7d153b478488fcfea92946d552b2dfa306424ac0bf091be67/sqltrack-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "369173dda20bd71f96474c394a69f5aa185a782966e6f182bd9e031c601034a3",
          "md5": "89bae4fb8cf495b1fd097f0fae4a832f",
          "sha256": "6acf3ed70d897562f07c4aba0d860fbaba018ee6bcfe4322c08a197066e7ec6a"
        },
        "downloads": -1,
        "filename": "sqltrack-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89bae4fb8cf495b1fd097f0fae4a832f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 27588,
        "upload_time": "2023-03-15T09:10:27",
        "upload_time_iso_8601": "2023-03-15T09:10:27.470564Z",
        "url": "https://files.pythonhosted.org/packages/36/91/73dda20bd71f96474c394a69f5aa185a782966e6f182bd9e031c601034a3/sqltrack-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba9a777c0d1278f5ad067a5c0e57842d2677ca1269a9d4e5e21324369c5fa395",
          "md5": "bdc57b01b6529cedb7099a5c4f65e12d",
          "sha256": "8177f097a0278051ea063df33cb33d399218a2fc3856a44a59f2012d4e93cf6a"
        },
        "downloads": -1,
        "filename": "sqltrack-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bdc57b01b6529cedb7099a5c4f65e12d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 27830,
        "upload_time": "2023-03-15T09:10:29",
        "upload_time_iso_8601": "2023-03-15T09:10:29.149629Z",
        "url": "https://files.pythonhosted.org/packages/ba/9a/777c0d1278f5ad067a5c0e57842d2677ca1269a9d4e5e21324369c5fa395/sqltrack-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "369173dda20bd71f96474c394a69f5aa185a782966e6f182bd9e031c601034a3",
        "md5": "89bae4fb8cf495b1fd097f0fae4a832f",
        "sha256": "6acf3ed70d897562f07c4aba0d860fbaba018ee6bcfe4322c08a197066e7ec6a"
      },
      "downloads": -1,
      "filename": "sqltrack-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89bae4fb8cf495b1fd097f0fae4a832f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 27588,
      "upload_time": "2023-03-15T09:10:27",
      "upload_time_iso_8601": "2023-03-15T09:10:27.470564Z",
      "url": "https://files.pythonhosted.org/packages/36/91/73dda20bd71f96474c394a69f5aa185a782966e6f182bd9e031c601034a3/sqltrack-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba9a777c0d1278f5ad067a5c0e57842d2677ca1269a9d4e5e21324369c5fa395",
        "md5": "bdc57b01b6529cedb7099a5c4f65e12d",
        "sha256": "8177f097a0278051ea063df33cb33d399218a2fc3856a44a59f2012d4e93cf6a"
      },
      "downloads": -1,
      "filename": "sqltrack-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "bdc57b01b6529cedb7099a5c4f65e12d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 27830,
      "upload_time": "2023-03-15T09:10:29",
      "upload_time_iso_8601": "2023-03-15T09:10:29.149629Z",
      "url": "https://files.pythonhosted.org/packages/ba/9a/777c0d1278f5ad067a5c0e57842d2677ca1269a9d4e5e21324369c5fa395/sqltrack-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}