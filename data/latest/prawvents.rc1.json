{
  "info": {
    "author": "Laurin Schmidt",
    "author_email": "laurinschmidt2001@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "<a name=\"prawvents\"></a>\n# PRAWvents, Events for PRAW\nA simple wrapper to write event-based bots with [PRAW](https://praw.readthedocs.io/en/latest).\n\n## Scope\nYou can register event handlers for everything thats based on the praw [stream_generator](https://praw.readthedocs.io/en/latest/code_overview/other/util.html#praw.models.util.stream_generator)\nAny other functionality is offered as-is, since this subclasses the main PRAW [Reddit](https://praw.readthedocs.io/en/latest/code_overview/reddit_instance.html) instance.\n\nA async version of this should be possible, but is not yet planned.\n\n# Quickstart\n\nThis is a simple bot that will print out the subreddit and the submission title for all posts in the subreddits AskReddit and pics, while skipping the existing posts in AskReddit.\nThis example assumes the presence of a [praw.ini](https://praw.readthedocs.io/en/latest/getting_started/configuration/prawini.html) in your working directory.\n```py\nfrom prawvents import EventReddit\nfrom praw import reddit\n\nr = EventReddit(user_agent=f\"ExampleBot for prawvents version (0.0.1) by /u/laundmo\") # change the description and username!\n\nsub1 = r.subreddit(\"AskReddit\")\nsub2 = r.subreddit(\"pics\")\n\ndef handle_exception(e): # very dumb exception handler\n    print(e)\n\n@r.register_event(sub1.stream.submissions, err_handler=handle_exception, skip_existing=True)\n@r.register_event(sub2.stream.submissions, err_handler=handle_exception)\ndef handle(submission: reddit.Submission):\n    print(submission.subreddit, submission.title)\n\nr.run_loop()\n```\n\n# Docs\n<a name=\"prawvents.RedditEventDecorator\"></a>\n## RedditEventDecorator Objects\n\n```python\nclass RedditEventDecorator()\n```\n\nDecorator class for event handlers.\n\n<a name=\"prawvents.RedditEventDecorator.__init__\"></a>\n#### \\_\\_init\\_\\_\n\n```python\n | __init__(reddit: praw.Reddit, stream: RStream, err_handler: Callable)\n```\n\nInitialise RedditEventDecorator.\n\n**Arguments**:\n\n- `reddit` _EventReddit_ - The `EventReddit` instance\n- `stream` _RStream_ - The stream to which the event responds.\n- `err_handler` _Callable_ - A function thats called with the exception as a argument.\n\n<a name=\"prawvents.RedditEventDecorator.__call__\"></a>\n#### \\_\\_call\\_\\_\n\n```python\n | __call__(f: Callable) -> Callable\n```\n\nSet the event handler.\n\n**Arguments**:\n\n- `f` _Callable_ - The event handler function.\n\n\n**Returns**:\n\n- `Callable` - The function.\n\n<a name=\"prawvents.EventReddit\"></a>\n## EventReddit Objects\n\n```python\nclass EventReddit(praw.Reddit)\n```\n\nMain Reddit instance, subclass of [praw.Reddit](https://praw.readthedocs.io/en/latest/code_overview/reddit_instance.html).\n\n**Arguments**:\n\n- `praw` _praw.Reddit_ - Praw Reddit superclass.\n\n<a name=\"prawvents.EventReddit.__init__\"></a>\n#### \\_\\_init\\_\\_\n\n```python\n | __init__(*args, **kwargs)\n```\n\nInitialise EventReddit. All arguments are passed through to [praw.Reddit](https://praw.readthedocs.io/en/latest/code_overview/reddit_instance.html)\n\n<a name=\"prawvents.EventReddit.register_event\"></a>\n#### register\\_event\n\n```python\n | register_event(stream: RStream, err_handler: Callable = None, **kwargs) -> RedditEventDecorator\n```\n\nRegister a event, should generally be used as a decorator like this:\n\n```py\n@r.register_event(subreddit.stream.submissions, err_handler=handle_exception)\ndef event_handler(submission):\n    pass\n```\n\n**Arguments**:\n\n- `stream` _RStream_ - The stream to which the event responds.\n- `err_handler` _Callable, optional_ - The error handler for this event. Defaults to None.\n\n\n**Returns**:\n\n- `RedditEventDecorator` - The decorator instance.\n\n<a name=\"prawvents.EventReddit.handle_exception\"></a>\n#### handle\\_exception\n\n```python\n | handle_exception(f: Callable, e: Exception)\n```\n\nHandle a Exception happening in a function f\n\n**Arguments**:\n\n- `f` _Callable_ - The function which threw the exception.\n- `e` _Exception_ - The exception which was thrown.\n\n\n**Raises**:\n\n- `e` - The Exception that was thrown.\n\n<a name=\"prawvents.EventReddit.run_stream_till_none\"></a>\n#### run\\_stream\\_till\\_none\n\n```python\n | run_stream_till_none(stream: RStream, funcs: Iterable[Callable]) -> None\n```\n\nRuns a stream until none is returned\n\n**Arguments**:\n\n- `stream` _RStream_ - The finalized stream to run.\n- `funcs` _Iterable[Callable]_ - The functions which handle this stream.\n\n<a name=\"prawvents.EventReddit.run_loop\"></a>\n#### run\\_loop\n\n```python\n | run_loop(interweave=True) -> None\n```\n\nRun the event loop. If interweave is Truthy, events from multiple streams will be mixed to ensure a single high-traffic stream cant take up the entire event loop. This is highly \nrecommended.\n\n**Arguments**:\n\n- `interweave` _bool, optional_ - Whether to interweave streams to ensure fair distribution. Defaults to True.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/laundmo/prawvents",
    "keywords": "prawvents praw reddit api wrapper",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prawvents",
    "package_url": "https://pypi.org/project/prawvents/",
    "platform": "",
    "project_url": "https://pypi.org/project/prawvents/",
    "project_urls": {
      "Homepage": "http://github.com/laundmo/prawvents"
    },
    "release_url": "https://pypi.org/project/prawvents/0.1/",
    "requires_dist": [
      "praw"
    ],
    "requires_python": "",
    "summary": "A Small wrapper for PRAW that allows for Event-based bots",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9004229,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1421d1dd051665a731c5e7deb4527b26d95f007a7d6964fdb5d6da6f2d355cb8",
          "md5": "f0b4883463e895bcbcc522596243bf53",
          "sha256": "15eb677095db1d6f765eb1c06b4d9e8fdd09a7793a105df5a9f0972b274f092a"
        },
        "downloads": -1,
        "filename": "prawvents-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0b4883463e895bcbcc522596243bf53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5687,
        "upload_time": "2020-12-29T02:23:45",
        "upload_time_iso_8601": "2020-12-29T02:23:45.272801Z",
        "url": "https://files.pythonhosted.org/packages/14/21/d1dd051665a731c5e7deb4527b26d95f007a7d6964fdb5d6da6f2d355cb8/prawvents-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c051c3814d76b52654bc142b8e199d9c7e8e5dc5bd073fe1a2d666ede96873e7",
          "md5": "9cc10b7ac923e3123f356c633b9ffd1f",
          "sha256": "95bd3fe810d78fe5181074ef52234f4ff0be646a11773260218aaa3b8bca1eaf"
        },
        "downloads": -1,
        "filename": "prawvents-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9cc10b7ac923e3123f356c633b9ffd1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4541,
        "upload_time": "2020-12-29T02:23:46",
        "upload_time_iso_8601": "2020-12-29T02:23:46.681184Z",
        "url": "https://files.pythonhosted.org/packages/c0/51/c3814d76b52654bc142b8e199d9c7e8e5dc5bd073fe1a2d666ede96873e7/prawvents-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1421d1dd051665a731c5e7deb4527b26d95f007a7d6964fdb5d6da6f2d355cb8",
        "md5": "f0b4883463e895bcbcc522596243bf53",
        "sha256": "15eb677095db1d6f765eb1c06b4d9e8fdd09a7793a105df5a9f0972b274f092a"
      },
      "downloads": -1,
      "filename": "prawvents-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0b4883463e895bcbcc522596243bf53",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5687,
      "upload_time": "2020-12-29T02:23:45",
      "upload_time_iso_8601": "2020-12-29T02:23:45.272801Z",
      "url": "https://files.pythonhosted.org/packages/14/21/d1dd051665a731c5e7deb4527b26d95f007a7d6964fdb5d6da6f2d355cb8/prawvents-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c051c3814d76b52654bc142b8e199d9c7e8e5dc5bd073fe1a2d666ede96873e7",
        "md5": "9cc10b7ac923e3123f356c633b9ffd1f",
        "sha256": "95bd3fe810d78fe5181074ef52234f4ff0be646a11773260218aaa3b8bca1eaf"
      },
      "downloads": -1,
      "filename": "prawvents-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9cc10b7ac923e3123f356c633b9ffd1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4541,
      "upload_time": "2020-12-29T02:23:46",
      "upload_time_iso_8601": "2020-12-29T02:23:46.681184Z",
      "url": "https://files.pythonhosted.org/packages/c0/51/c3814d76b52654bc142b8e199d9c7e8e5dc5bd073fe1a2d666ede96873e7/prawvents-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}