{
  "info": {
    "author": "Student.com",
    "author_email": "wearehiring@student.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "sa-filters\n==========\n\n\nFilter, sort and paginate SQLAlchemy query objects. Ideal for\nexposing these actions over a REST API.\n\nThis project is fork of sqlalchemy-filters_ with sqlalchemy 1.4 support\nand other improvements.\n\n\n.. image:: https://img.shields.io/pypi/v/sa-filters.svg\n    :target: https://pypi.org/project/sa-filters/\n\n.. image:: https://img.shields.io/pypi/pyversions/sa-filters.svg\n    :target: https://pypi.org/project/sa-filters/\n\n.. image:: https://img.shields.io/pypi/format/sa-filters.svg\n    :target: https://pypi.org/project/sa-filters/\n\n.. image:: https://github.com/slymit/sa-filters/actions/workflows/ci.yml/badge.svg?branch=main\n    :target: https://github.com/slymit/sa-filters/actions\n\n\nFiltering\n---------\n\nAssuming that we have a SQLAlchemy_ ``query`` object:\n\n.. code-block:: python\n\n    from sqlalchemy import Column, Integer, String\n    from sqlalchemy.ext.declarative import declarative_base\n\n\n    class Base(object):\n        id = Column(Integer, primary_key=True)\n        name = Column(String(50), nullable=False)\n        count = Column(Integer, nullable=True)\n\n        @hybrid_property\n        def count_square(self):\n            return self.count * self.count\n\n        @hybrid_method\n        def three_times_count(self):\n            return self.count * 3\n\n\n    Base = declarative_base(cls=Base)\n\n\n    class Foo(Base):\n\n        __tablename__ = 'foo'\n\n    # ...\n\n    query = session.query(Foo)\n\nThen we can apply filters to that ``query`` object (multiple times):\n\n.. code-block:: python\n\n    from sa_filters import apply_filters\n\n\n    # `query` should be a SQLAlchemy query or Select object\n\n    filter_spec = [{'field': 'name', 'op': '==', 'value': 'name_1'}]\n    filtered_query = apply_filters(query, filter_spec)\n\n    more_filters = [{'field': 'foo_id', 'op': 'is_not_null'}]\n    filtered_query = apply_filters(filtered_query, more_filters)\n\n    result = filtered_query.all()\n\nIt is also possible to filter queries that contain multiple models,\nincluding joins:\n\n.. code-block:: python\n\n    class Bar(Base):\n\n        __tablename__ = 'bar'\n\n        foo_id = Column(Integer, ForeignKey('foo.id'))\n\n\n.. code-block:: python\n\n    query = session.query(Foo).join(Bar)\n\n    filter_spec = [\n        {'model': 'Foo', 'field': 'name', 'op': '==', 'value': 'name_1'},\n        {'model': 'Bar', 'field': 'count', 'op': '>=', 'value': 5},\n    ]\n    filtered_query = apply_filters(query, filter_spec)\n\n    result = filtered_query.all()\n\n\n``apply_filters`` will attempt to automatically join models to ``query``\nif they're not already present and a model-specific filter is supplied.\nFor example, the value of ``filtered_query`` in the following two code\nblocks is identical:\n\n.. code-block:: python\n\n    query = session.query(Foo).join(Bar)  # join pre-applied to query\n\n    filter_spec = [\n        {'model': 'Foo', 'field': 'name', 'op': '==', 'value': 'name_1'},\n        {'model': 'Bar', 'field': 'count', 'op': '>=', 'value': 5},\n    ]\n    filtered_query = apply_filters(query, filter_spec)\n\n.. code-block:: python\n\n    query = session.query(Foo)  # join to Bar will be automatically applied\n\n    filter_spec = [\n        {'field': 'name', 'op': '==', 'value': 'name_1'},\n        {'model': 'Bar', 'field': 'count', 'op': '>=', 'value': 5},\n    ]\n    filtered_query = apply_filters(query, filter_spec)\n\nThe automatic join is only possible if SQLAlchemy_ can implictly\ndetermine the condition for the join, for example because of a foreign\nkey relationship.\n\nAutomatic joins allow flexibility for clients to filter and sort by related\nobjects without specifying all possible joins on the server beforehand. Feature\ncan be explicitly disabled by passing ``do_auto_join=False`` argument to the\n``apply_filters`` call.\n\nNote that first filter of the second block does not specify a model.\nIt is implictly applied to the ``Foo`` model because that is the only\nmodel in the original query passed to ``apply_filters``.\n\nIt is also possible to apply filters to queries defined by fields, functions or\n``select_from`` clause:\n\n.. code-block:: python\n\n    query_alt_1 = session.query(Foo.id, Foo.name)\n    query_alt_2 = session.query(func.count(Foo.id))\n    query_alt_3 = session.query().select_from(Foo).add_column(Foo.id)\n\nHybrid attributes\n^^^^^^^^^^^^^^^^^\n\nYou can filter by a `hybrid attribute`_: a `hybrid property`_ or a `hybrid method`_.\n\n.. code-block:: python\n\n    query = session.query(Foo)\n\n    filter_spec = [{'field': 'count_square', 'op': '>=', 'value': 25}]\n    filter_spec = [{'field': 'three_times_count', 'op': '>=', 'value': 15}]\n\n    filtered_query = apply_filters(query, filter_spec)\n    result = filtered_query.all()\n\n\nRestricted Loads\n----------------\n\nYou can restrict the fields that SQLAlchemy_ loads from the database by\nusing the ``apply_loads`` function:\n\n.. code-block:: python\n\n    query = session.query(Foo, Bar).join(Bar)\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']},\n        {'model': 'Bar', 'fields': ['count']}\n    ]\n    query = apply_loads(query, load_spec)  # will load only Foo.name and Bar.count\n\n\nThe effect of the ``apply_loads`` function is to ``_defer_`` the load\nof any other fields to when/if they're accessed, rather than loading\nthem when the query is executed. It only applies to fields that would be\nloaded during normal query execution.\n\n\nEffect on joined queries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe default SQLAlchemy_ join is lazy, meaning that columns from the\njoined table are loaded only when required. Therefore ``apply_loads``\nhas limited effect in the following scenario:\n\n.. code-block:: python\n\n    query = session.query(Foo).join(Bar)\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']}\n        {'model': 'Bar', 'fields': ['count']}  # ignored\n    ]\n    query = apply_loads(query, load_spec)  # will load only Foo.name\n\n\n``apply_loads`` cannot be applied to columns that are loaded as\n`joined eager loads <http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#joined-eager-loading>`_.\nThis is because a joined eager load does not add the joined model to the\noriginal query, as explained\n`here <http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#the-zen-of-joined-eager-loading>`_\n\nThe following would not prevent all columns from ``Bar`` being eagerly\nloaded:\n\n.. code-block:: python\n\n    query = session.query(Foo).options(joinedload(Foo.bar))\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']}\n        {'model': 'Bar', 'fields': ['count']}\n    ]\n    query = apply_loads(query, load_spec)\n\n.. sidebar:: Automatic Join\n\n    In fact, what happens here is that ``Bar`` is automatically joined\n    to ``query``, because it is determined that ``Bar`` is not part of\n    the original query. The ``load_spec`` therefore has no effect\n    because the automatic join results in lazy evaluation.\n\nIf you wish to perform a joined load with restricted columns, you must\nspecify the columns as part of the joined load, rather than with\n``apply_loads``:\n\n.. code-block:: python\n\n    query = session.query(Foo).options(joinedload(Bar).load_only('count'))\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']}\n    ]\n    query = apply_loads(query. load_spec)  # will load ony Foo.name and Bar.count\n\n\nSort\n----\n\n.. code-block:: python\n\n    from sa_filters import apply_sort\n\n\n    # `query` should be a SQLAlchemy query or Select object\n\n    sort_spec = [\n        {'model': 'Foo', 'field': 'name', 'direction': 'asc'},\n        {'model': 'Bar', 'field': 'id', 'direction': 'desc'},\n    ]\n    sorted_query = apply_sort(query, sort_spec)\n\n    result = sorted_query.all()\n\n\n``apply_sort`` will attempt to automatically join models to ``query`` if\nthey're not already present and a model-specific sort is supplied.\nThe behaviour is the same as in ``apply_filters``.\n\nThis allows flexibility for clients to sort by fields on related objects\nwithout specifying all possible joins on the server beforehand.\n\nHybrid attributes\n^^^^^^^^^^^^^^^^^\n\nYou can sort by a `hybrid attribute`_: a `hybrid property`_ or a `hybrid method`_.\n\n\nPagination\n----------\n\n.. code-block:: python\n\n    from sa_filters import apply_pagination\n\n\n    # `query` should be a SQLAlchemy query or Select object\n\n    query, pagination = apply_pagination(query, page_number=1, page_size=10)\n\n    page_size, page_number, num_pages, total_results = pagination\n\n    assert 10 == len(query)\n    assert 10 == page_size == pagination.page_size\n    assert 1 == page_number == pagination.page_number\n    assert 3 == num_pages == pagination.num_pages\n    assert 22 == total_results == pagination.total_results\n\nSelect object\n-------------\nYou can use ``apply_filters``, ``apply_loads``, ``apply_sort`` and ``apply_pagination``\nwith SQLAlchemy ``Select`` object:\n\n.. code-block:: python\n\n    stmt = select(Foo)\n\n    filter_spec = [{'field': 'name', 'op': '==', 'value': 'name_1'}]\n    filtered_stmt = apply_filters(stmt, filter_spec)\n\n    result = session.execute(filtered_stmt).scalars().all()\n\nNote that when using ``apply_pagination`` with ``Select`` object,\nyou must pass session argument:\n\n.. code-block:: python\n\n    stmt = select(Foo)\n\n    query, pagination = apply_pagination(stmt, page_number=1, page_size=10, session=session)\n\nFilters format\n--------------\n\nFilters must be provided in a list and will be applied sequentially.\nEach filter will be a dictionary element in that list, using the\nfollowing format:\n\n.. code-block:: python\n\n    filter_spec = [\n        {'model': 'model_name', 'field': 'field_name', 'op': '==', 'value': 'field_value'},\n        {'model': 'model_name', 'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n        # ...\n    ]\n\nThe ``model`` key is optional if the original query being filtered only\napplies to one model.\n\nIf there is only one filter, the containing list may be omitted:\n\n.. code-block:: python\n\n    filter_spec = {'field': 'field_name', 'op': '==', 'value': 'field_value'}\n\nWhere ``field`` is the name of the field that will be filtered using the\noperator provided in ``op`` (optional, defaults to ``==``) and the\nprovided ``value`` (optional, depending on the operator).\n\nYou can also specify the table name instead of the model name by specifying\nthe optional key ``table``:\n\n.. code-block:: python\n\n    filter_spec = [\n        {'table': 'table_name', 'field': 'field_name', 'op': '==', 'value': 'field_value'},\n        {'table': 'table_name', 'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n        # ...\n    ]\n\nThis is the list of operators that can be used:\n\n- ``is_null``\n- ``is_not_null``\n- ``==``, ``eq``\n- ``!=``, ``ne``\n- ``>``, ``gt``\n- ``<``, ``lt``\n- ``>=``, ``ge``\n- ``<=``, ``le``\n- ``like``\n- ``ilike``\n- ``not_ilike``\n- ``in``\n- ``not_in``\n- ``any``\n- ``not_any``\n\nany / not_any\n^^^^^^^^^^^^^\n\nPostgreSQL specific operators allow to filter queries on columns of type ``ARRAY``.\nUse ``any`` to filter if a value is present in an array and ``not_any`` if it's not.\n\nBoolean Functions\n^^^^^^^^^^^^^^^^^\n``and``, ``or``, and ``not`` functions can be used and nested within the\nfilter specification:\n\n.. code-block:: python\n\n    filter_spec = [\n        {\n            'or': [\n                {\n                    'and': [\n                        {'field': 'field_name', 'op': '==', 'value': 'field_value'},\n                        {'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n                    ]\n                },\n                {\n                    'not': [\n                        {'field': 'field_3_name', 'op': '==', 'value': 'field_3_value'}\n                    ]\n                },\n            ],\n        }\n    ]\n\n\nNote: ``or`` and ``and`` must reference a list of at least one element.\n``not`` must reference a list of exactly one element.\n\nSort format\n-----------\n\nSort elements must be provided as dictionaries in a list and will be\napplied sequentially:\n\n.. code-block:: python\n\n    sort_spec = [\n        {'model': 'Foo', 'field': 'name', 'direction': 'asc'},\n        {'model': 'Bar', 'field': 'id', 'direction': 'desc'},\n        # ...\n    ]\n\nWhere ``field`` is the name of the field that will be sorted using the\nprovided ``direction``.\n\nThe ``model`` key is optional if the original query being sorted only\napplies to one model.\n\nnullsfirst / nullslast\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    sort_spec = [\n        {'model': 'Baz', 'field': 'count', 'direction': 'asc', 'nullsfirst': True},\n        {'model': 'Qux', 'field': 'city', 'direction': 'desc', 'nullslast': True},\n        # ...\n    ]\n\n``nullsfirst`` is an optional attribute that will place ``NULL`` values first\nif set to ``True``, according to the `SQLAlchemy documentation <https://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst>`__.\n\n``nullslast`` is an optional attribute that will place ``NULL`` values last\nif set to ``True``, according to the `SQLAlchemy documentation <https://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.nullslast>`__.\n\nIf none of them are provided, then ``NULL`` values will be sorted according\nto the RDBMS being used. SQL defines that ``NULL`` values should be placed\ntogether when sorting, but it does not specify whether they should be placed\nfirst or last.\n\nEven though both ``nullsfirst`` and ``nullslast`` are part of SQLAlchemy_,\nthey will raise an unexpected exception if the RDBMS that is being used does\nnot support them.\n\nAt the moment they are\n`supported by PostgreSQL <https://www.postgresql.org/docs/current/queries-order.html>`_,\nbut they are **not** supported by SQLite and MySQL.\n\n\n\nRunning tests\n-------------\n\nThe default configuration uses **SQLite**, **MySQL** (if the driver is\ninstalled, which is the case when ``tox`` is used) and **PostgreSQL**\n(if the driver is installed, which is the case when ``tox`` is used) to\nrun the tests, with the following URIs:\n\n.. code-block:: shell\n\n    sqlite+pysqlite:///test_sa_filters.db\n    mysql+mysqlconnector://root:@localhost:3306/test_sa_filters\n    postgresql+psycopg2://postgres:@localhost:5432/test_sa_filters?client_encoding=utf8'\n\nA test database will be created, used during the tests and destroyed\nafterwards for each RDBMS configured.\n\nThere are Makefile targets to run docker containers locally for both\n**MySQL** and **PostgreSQL**, using the default ports and configuration:\n\n.. code-block:: shell\n\n    $ make mysql-container\n    $ make postgres-container\n\nTo run the tests locally:\n\n.. code-block:: shell\n\n    $ # Create/activate a virtual environment\n    $ pip install tox\n    $ tox\n\nThere are some other Makefile targets that can be used to run the tests:\n\nThere are other Makefile targets to run the tests, but extra\ndependencies will have to be installed:\n\n.. code-block:: shell\n\n    $ pip install -U --editable \".[dev,mysql,postgresql]\"\n    $ # using default settings\n    $ make test\n    $ make coverage\n\n    $ # overriding DB parameters\n    $ ARGS='--mysql-test-db-uri mysql+mysqlconnector://root:@192.168.99.100:3340/test_sa_filters' make test\n    $ ARGS='--sqlite-test-db-uri sqlite+pysqlite:///test_sa_filters.db' make test\n\n    $ ARGS='--mysql-test-db-uri mysql+mysqlconnector://root:@192.168.99.100:3340/test_sa_filters' make coverage\n    $ ARGS='--sqlite-test-db-uri sqlite+pysqlite:///test_sa_filters.db' make coverage\n\n\n\nDatabase management systems\n---------------------------\n\nThe following RDBMS are supported (tested):\n\n- SQLite\n- MySQL\n- PostgreSQL\n\n\nSQLAlchemy support\n------------------\n\nThe following SQLAlchemy_ versions are supported: ``1.4``.\n\n\nChangelog\n---------\n\nConsult the `CHANGELOG <https://github.com/slymit/sa-filters/blob/master/CHANGELOG.rst>`_\ndocument for fixes and enhancements of each version.\n\n\nLicense\n-------\n\nApache 2.0. See `LICENSE <https://github.com/slymit/sa-filters/blob/master/LICENSE>`_\nfor details.\n\n\n.. _sqlalchemy-filters: https://github.com/juliotrigo/sqlalchemy-filters\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n.. _hybrid attribute: https://docs.sqlalchemy.org/en/13/orm/extensions/hybrid.html\n.. _hybrid property: https://docs.sqlalchemy.org/en/13/orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property\n.. _hybrid method: https://docs.sqlalchemy.org/en/13/orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/slymit/sa-filters",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "slymit",
    "maintainer_email": "slymit@gmail.com",
    "name": "sa-filters",
    "package_url": "https://pypi.org/project/sa-filters/",
    "platform": null,
    "project_url": "https://pypi.org/project/sa-filters/",
    "project_urls": {
      "Homepage": "https://github.com/slymit/sa-filters"
    },
    "release_url": "https://pypi.org/project/sa-filters/1.2.0/",
    "requires_dist": [
      "sqlalchemy (>=1.4.0)",
      "pytest (>=6.2.5) ; extra == 'dev'",
      "coverage (~=5.0.4) ; extra == 'dev'",
      "sqlalchemy-utils (~=0.37.2) ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "restructuredtext-lint ; extra == 'dev'",
      "Pygments ; extra == 'dev'",
      "mysql-connector-python-rf (==2.2.2) ; extra == 'mysql'",
      "psycopg2 (==2.8.4) ; extra == 'postgresql'"
    ],
    "requires_python": "",
    "summary": "A library to filter SQLAlchemy queries.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15673440,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "604616ea4678356a7669c8a3eec84281995d72ce887cb6359ed22343cbfec284",
          "md5": "001bc55fe0b2bdbafef17398eff56906",
          "sha256": "ae3e954d5b408f4ab135c6525656902c96f31bd507ae6127a50ad5225fbb6c6d"
        },
        "downloads": -1,
        "filename": "sa_filters-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "001bc55fe0b2bdbafef17398eff56906",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14553,
        "upload_time": "2022-05-20T18:58:54",
        "upload_time_iso_8601": "2022-05-20T18:58:54.370156Z",
        "url": "https://files.pythonhosted.org/packages/60/46/16ea4678356a7669c8a3eec84281995d72ce887cb6359ed22343cbfec284/sa_filters-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeb436f888aaf73e2d5ebfb9c919db1e80afcfe6a65cae6c87f64cc051eb8d52",
          "md5": "61d6aefa122d2b7e92c1513a6dd0d53a",
          "sha256": "6ada6c6e18c0583d511e6d9ccc5be0c71eb3db57c7e8ed0d3ee4db3015a8099a"
        },
        "downloads": -1,
        "filename": "sa-filters-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61d6aefa122d2b7e92c1513a6dd0d53a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17438,
        "upload_time": "2022-05-20T18:58:56",
        "upload_time_iso_8601": "2022-05-20T18:58:56.340216Z",
        "url": "https://files.pythonhosted.org/packages/ee/b4/36f888aaf73e2d5ebfb9c919db1e80afcfe6a65cae6c87f64cc051eb8d52/sa-filters-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f59c472bac33c6f49199f1c9a8a78b0de9b8c9d9ea6e36d09905f018ba66f57a",
          "md5": "a3ae71044e3d5d4e333bb1878dc2f04f",
          "sha256": "42adc5bf9392d89006327fe6d701ba0523a38fbd3c527c8524e0108b3128582b"
        },
        "downloads": -1,
        "filename": "sa_filters-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3ae71044e3d5d4e333bb1878dc2f04f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14820,
        "upload_time": "2022-06-05T17:09:30",
        "upload_time_iso_8601": "2022-06-05T17:09:30.344938Z",
        "url": "https://files.pythonhosted.org/packages/f5/9c/472bac33c6f49199f1c9a8a78b0de9b8c9d9ea6e36d09905f018ba66f57a/sa_filters-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1adfa886ee0740fc5728893451917fcaf6d9d464a26bc4b12e013649c6a7e7cf",
          "md5": "d61d541059884b46616326b9d0f0f50b",
          "sha256": "fcadd5713b6865fe05e1aee9b1ee8e183ed034c030b07247f585a5f4b4951d5d"
        },
        "downloads": -1,
        "filename": "sa-filters-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d61d541059884b46616326b9d0f0f50b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17930,
        "upload_time": "2022-06-05T17:09:32",
        "upload_time_iso_8601": "2022-06-05T17:09:32.501477Z",
        "url": "https://files.pythonhosted.org/packages/1a/df/a886ee0740fc5728893451917fcaf6d9d464a26bc4b12e013649c6a7e7cf/sa-filters-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a726f719b9412a85c177e95cd2af7f49abdc9cd52fb599f646f77a7cd56a22f9",
          "md5": "0ca8d23d0a0d93feca68140129485523",
          "sha256": "9aa2c3f56fcce328346c217730b3efe4c2dded5e99e8f1a0fc68c1e79bda9e25"
        },
        "downloads": -1,
        "filename": "sa_filters-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ca8d23d0a0d93feca68140129485523",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15157,
        "upload_time": "2022-11-06T10:29:12",
        "upload_time_iso_8601": "2022-11-06T10:29:12.809633Z",
        "url": "https://files.pythonhosted.org/packages/a7/26/f719b9412a85c177e95cd2af7f49abdc9cd52fb599f646f77a7cd56a22f9/sa_filters-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "067da99daabef72c26b98c4a76c29260279eaada64b09f25bf549a51f70d115e",
          "md5": "a0b1293112dde22cf0b15da146e89585",
          "sha256": "fcfa55999b51ec9bb4c1a270a632c6ed1093ab167c373ca33c6dedf3bbd83727"
        },
        "downloads": -1,
        "filename": "sa-filters-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0b1293112dde22cf0b15da146e89585",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18312,
        "upload_time": "2022-11-06T10:29:14",
        "upload_time_iso_8601": "2022-11-06T10:29:14.289258Z",
        "url": "https://files.pythonhosted.org/packages/06/7d/a99daabef72c26b98c4a76c29260279eaada64b09f25bf549a51f70d115e/sa-filters-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a726f719b9412a85c177e95cd2af7f49abdc9cd52fb599f646f77a7cd56a22f9",
        "md5": "0ca8d23d0a0d93feca68140129485523",
        "sha256": "9aa2c3f56fcce328346c217730b3efe4c2dded5e99e8f1a0fc68c1e79bda9e25"
      },
      "downloads": -1,
      "filename": "sa_filters-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ca8d23d0a0d93feca68140129485523",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15157,
      "upload_time": "2022-11-06T10:29:12",
      "upload_time_iso_8601": "2022-11-06T10:29:12.809633Z",
      "url": "https://files.pythonhosted.org/packages/a7/26/f719b9412a85c177e95cd2af7f49abdc9cd52fb599f646f77a7cd56a22f9/sa_filters-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "067da99daabef72c26b98c4a76c29260279eaada64b09f25bf549a51f70d115e",
        "md5": "a0b1293112dde22cf0b15da146e89585",
        "sha256": "fcfa55999b51ec9bb4c1a270a632c6ed1093ab167c373ca33c6dedf3bbd83727"
      },
      "downloads": -1,
      "filename": "sa-filters-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a0b1293112dde22cf0b15da146e89585",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18312,
      "upload_time": "2022-11-06T10:29:14",
      "upload_time_iso_8601": "2022-11-06T10:29:14.289258Z",
      "url": "https://files.pythonhosted.org/packages/06/7d/a99daabef72c26b98c4a76c29260279eaada64b09f25bf549a51f70d115e/sa-filters-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}