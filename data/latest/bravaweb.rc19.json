{
  "info": {
    "author": "Roberto Neves",
    "author_email": "robertonsilva@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Natural Language :: Portuguese (Brazilian)",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# BravaWeb Framework for ASGI Server\n\nFramework para aplicações WEB baseada em Python3 ASGI  (_Asynchronous Server Gateway Interfac_  em  Uvicorn), com possibilidade de utilização de Template em Html (Mako Templates).\n\nVeja Documentação em:\n\nUvicorn: https://www.uvicorn.org/\nMako Templates: https://www.makotemplates.org/\n\n# Instalação\nInstalação utilizando Pip\n```bash\npip install bravaweb\n```\nGit/Clone\n```\ngit clone https://github.com/robertons/bravaweb\ncd bravaweb\npip install -r requirements.txt\npython setup.py install\n```\n\n# Primeiros Passos\n\nInicie seu projeto conforme estrutura abaixo\n\n\n```bash\napp\n├── ...\n├── configuration                           \t\t\n│   ├── __init__.py          \n│   └── api.py                   \n└── server.py\n```\n\nO arquivo de configurações deve conter os seguintes dados:\n\n| variável     \t\t  |    tipo     | obrigatório |  descrição       \t\t\t        |\n|-------------------|-------------|-------------|-------------------------------|\n| directory       \t| string      | sim         | Caminho Projeto     \t\t     \t|\n| encoding \t\t  \t  | string      | sim         | Codificação    \t\t\t\t        |\n| date_format     \t| string      | sim         | Formato data             \t\t  |\n| short_date_format | string      | sim         | Formato data curta            |\n| token \t\t\t      | string      | sim         | Token codificação Authorization Header    |\n| domains      \t\t  | array       | sim         | Domínios autorizados a acessar|\n| access_exceptions | array       | sim         | Rotas e Exceções de acesso   \t|\n| routes \t\t\t      | array       | sim         | Rotas do Projeto      \t\t    |\n\n\n```python\n\nconfiguration/__init__.py\n\n# -*- coding: utf-8 -*-\n\nfrom configuration import api\n\n```\n\n\n```python\n\nconfiguration/api.py\n\n# -*- coding: utf-8 -*-\n\nimport os\n\n# Directory\ndirectory = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))\n\n# Api Encoding\nencoding = \"utf-8\"\n\n# Date Format\ndate_format = \"%d/%m/%Y %H:%M:%S\"\nshort_date_format = \"%d/%m/%Y\"\n\n# Token Authorization\ntoken = \"JWT-Token-Project\"\n\n# Authorized Domains Origin/Referrer\ndomains = [\n    \"https://www.dominio.com.br\",\n    \"https://alias.dominio.com.br\",\n]\n\n# Exceptions Routes\naccess_exceptions = [\n\n    {'path': '(^/default/)','referer': '*'},\n\n    {'path': '(/rota/especifica/)','referer': '(^https://dominio.especifico.com.br/)'},\n\n    {'path': '*', 'referer': \"(^https://outro.dominio.com.br/)|(^https://adicional.dominio.com.br/)\"},\n]\n\nroutes = [\n    (\"{controller}/{area}/{module}/{action}/{id}\", '(^/admin/)|(^/panel/)',\n    (\"{controller}/{module}/{action}/{id}\", \"\"),\n]\n\n```\n\n**Definições:**\n\n**domains**:  lista array de strings, com domínios que tem acesso a api, o teste é feito baseado no origin e/ou referrer de cada requisição.\n\n**access_exceptions**: é possivel que algumas rotas sejam abertas para qualquer requisição, ou mesmo que alguma rota seja especifica para algum domínio. A lista deve conter um dicionário com as chaves path e referer onde:\n\n\tpath: é referente ao caminho da rota\n\treferer: origem da requisição\n\nAmbos os valores aceitam * para todos ou expressão regular para teste de string.\n\n**routes**:  lista com tuplas que definem as rotas padrões do projeto. Bravaweb esta preparado para até 4 níveis de profundidade que definem, Controlador, Area, Modulo, Ação e mais um nível **opcional** para captação de ID, a prioridade das regras é sequencial, portanto as regras específicas devem vir primeiro. A tupla é definida assim:\n\n\t0: a captação de cada parte da profundidade para carregamento\n\t1: expressão regular para identificar a regra\n\nPor padrão os valores de rota do ambiente são:\n\n    controller = None\n    area = None\n    module = \"default\"\n    action=\"index\"\n    id = None\n\nPor fim vamos  criar a execução do projeto que vai tratar as requisições e processar as rotas.\n\nO arquivo `server.py` na raiz deve ficar assim:\n\n```python\n#-*- coding: utf-8 -*-\nimport sys\n\nimport configuration\n\nfrom bravaweb import App as application\n\n```\n\nAcesse o diretório  do seu projeto, e execute o comando  de serviço do ASGI, conforme documentação do Uvicorn, no exemplo abaixo ativamos o ambiente virtual onde os pacotes estão instalados:\n\n\n```bash\\\nsource ../env/bin/activate\n\nuvicorn server:application --port 8080 --interface=asgi3 --workers 7 --proxy-headers --lifespan off --reload\n\n```\nO Resultado então será:\n\n```bash\\\nINFO: Uvicorn running on http://127.0.0.1:8080 (Press CTRL+C to quit)\nINFO: Started reloader process [82503] using statreload\nINFO: Started server process [82505]\n.\n.\n.\n```\n\nNeste momento sua aplicação estará em execução. Nós configuramos as rotas mas não desenvolvemos nenhuma delas portanto qualquer requisição na url http://127.0.0.1:8080 irá retornar 404.\n\n# Hello World\n\n\nVamos iniciar aplicando a rota default, a pasta do projeto nesse momento deverá estar assim:\n```bash\napp\n├── ...\n├── configuration                           \t\t\n│   ├── __init__.py          \n│   └── api.py        \n├── controllers\n│   └── default.py              \n└── server.py\n```\nConforme exemplificado a rota default(padrão) é\n\n    controller = None\n    area = None\n    module = \"default\"\n    action=\"index\"\n    id = None\n\n\nO arquivo ficará assim:\n\n```python\n\ncontrollers/default.py\n\n# -*- coding: utf-8 -*-\nfrom bravaweb.controller import *\n\nclass DefaultController(Controller):\n\n    @get\n    async def index(self) -> Json:\n        await View(self.enviroment, data={\"mensagem\": 'Olá Mundo'})\n\n```\n\n**Analisando a rota default:**\n\nNome do Controlador é default, por isso nome da classe é **Default**Controller, herdando o controlador do framework (Controller)\n\nO metodo de request aceito para esta rota é o GET (*@get*) , mas POST (*@post*) , PUT(*@put*) e DELETE(*@delete*) também são aceitos. Uma requisição diferente do permitido para rota retorna Erro *405: Method not allowed*\n\nO Framwork é baseado em ASGI (_Asynchronous Server Gateway Interface_) por isso ação index é assíncrona (async) .\n\nA anotação é o tipo de resultado que essa rota irá retornar, posteriormente veremos sobre os tipos, no exemplo acima utilizamos Json.\n\nTodos os dados da requisição, estão na *enviroment*, veremos mais logo a seguir.\n\n\nPara melhor compreenção sobre as rotas , vejamos os exemplos abaixo baseado no arquivo de configuração acima:\n\n# Criando e Configurando Rotas\n\nOs padrões de rota é configurado no arquivo de configurações em routes. Você provavelmente fará isso somente uma vez, ou quando for necessária a criação de rotas específicas em seu projeto.  Abaixo segue alguns exemplos baseado na configuração que apresentamos.\n\n## Exemplo 1\n\n    GET -> api.dominio.com.br/admin/catalog/products/list\n\nA regra identificada é a primeira da lista, pois o path da request inicia com */admin/* conforme expressão regular da posição [1]  da tupla em *configuration.api.routes*:\n\n    (\"{controller}/{area}/{module}/{action}/{id}\", '(^/admin/)|(^/panel/)'\n\nO resultado da captação da rota conforme posição [0] da tupla será:\n\n    controller = 'admin'\n    area = 'catalog'\n    module = 'products'\n    action = 'list'\n\nA estrutura para processamento desta rota devera ser:\n\n```bash\napp\n├── ...    \n├── controllers\n│   └── admin\n│   │\t└── catalog\n│   │\t|\t└── products.py                \n```\n\nO arquivo :\n\n```python\n\ncontrollers/admin/catalog/products.py\n\n# -*- coding: utf-8 -*-\nfrom bravaweb.controller import *\n\nclass ProductsController(Controller):\n\n    @get\n    async def list(self) -> Json:\n        await View(self.enviroment, data=[{\"prod_nome\": 'Exemplo'}])\n\n```\n\n## Exemplo 2\n\n    POST -> api.dominio.com.br/site/product/like/110\n\nA regra identificada é a default (segunda da lista), pois o path da request **não** contempla as expressões regulares anteriores :\n\n     (\"{controller}/{module}/{action}/{id}\", \"\")\n\nO resultado da captação da rota conforme posição [0] da tupla será:\n\n    controller = 'site'\n    area = None\n    module = 'product'\n    action = 'like'\n    id = 110\n\nA estrutura para processamento desta rota devera ser:\n\n```bash\napp\n├── ...    \n├── controllers\n│   └── site\n│   │\t└── product.py                \n```\n\nO arquivo:\n\n```python\n\ncontrollers/site/products.py\n\n# -*- coding: utf-8 -*-\nfrom bravaweb.controller import *\n\nclass ProductController(Controller):\n\n    @post\n    async def like(self) -> Json:\n        await View(self.enviroment, data=[{\"likes\": 535}])\n\n```\n\n# Ambiente / Enviroment\n\nA qualquer momento dentro do controlador é possivel acessar  os dados da requisição através de *self.enviroment* os dados disponíves são:\n\n|Campo  | Tipo | descrição |\n|--|--|--|\n| origin | string | Origem ou Referrer da Requisição|\n| remote_ip | string |  Ip do usuário|\n| remote_uuid | string | UUID se informado no header |\n| browser | string | Browser do usuário |\n| accept_encoding |  string | tipos de codificação aceito pelo browser |\n| method | string | metodo da requisição (GET, POST, PUT ou DELETE) |\n| response_type| string | tipo de resposta esperada para requisição|\n| authorization| string | Token JWT - Bearer enviado no Header|\n| bearer| string | Token JWT decodificado |\n| content_length| int | Tamanho da requisição |\n| get| dict | Dados enviados por querystring |\n| post| dict  | Dados enviados por post |\n| body | bytes | Bytes do corpo da requisição |\n| route | string | rota |\n| controller | string | nome controlador |\n| area  |  string | nome area do controlador |\n| module  | string |  nome modulo do controlador |\n| action  | string | nome da ação do modulo |\n| id  | string | identificador da requisição |\n\nHá disponível também, para casos de manipulação específica os dados brutos do ASGI:\n\n|Campo  | descrição |\n|--|--|\n| headers | cabeçalho da requisição |\n| scope | escopo da requisição |\n| send | conexão com navegador |\n| receive | dados recebidos  |\n\n# Entradas e Pré-condições\n\nPara maior segurança no processamento das rotas é possível e **recomendável** estabelecer as pré-condições daquela rota específica.  Caso a requisição não tenha o objeto ou objeto informado seja inválido, haverá erro de resposta com erro *412: Precondition Failed*\n\n```python\n    @post\n    async def comment(self, id_product:int, comment:string ) -> Json:\n\t    sql_query = f\"INSERT  INTO products_comments (prod_comment, id_product) VALUES ('{comment}',{id_product})\";\n\t    .\n\t\t.\n\t\t.\n        await View(self.enviroment, data=[{\"added\": true}])\n\n```\n\nCaso a request não contenha os parametros acima, a ação não será executada.\n\nÉ possível requerer objetos específicos, Bravaweb realiza o cast automático dos dados enviados, no caso datetime o parametro de conversão esta estabelecido no arquivo de configuração nos campos *date_format* e *short_date_format*.\n\n```python\nfrom datetime import datetime\nfrom decimal import Decimal\n.\n\n    @post\n    async def comment(self, id_product:int, comment:string, date:datetime, stars:Decimal) -> Json:\n\t    .\n\t\t.\n\t\t.\n\t    .\n\t\t.\n\t\t.\n        await View(self.enviroment, data=[{\"added\": true}])\n\n```\n\n#  View\n\nToda rota deve retornar uma view, que será baseada na anotação a action.\n```python\n        await View(self.enviroment, data=_response_data)\n```\n\nBravaweb possui tratamento específico para respostas Json e HTML, ambos possuem um modelo ou carregamento de  template para resposta.\n\nA View possui os seguintes campos de entrada\n\n| entrada | obrigatório | tipo | descrição\n|--|--|--|--|\n| enviorment | sim | bravaweb.enviroment | ambiente da requisição\n| data | sim | bytes-like, dict, list, string |  dados da resposta de acordo com anotação\n| success | não | boolean | sucesso na execução da action\n| token | não | string | auth token, caso não informado, havendo token no enviroment, o mesmo se repetirá\n| task | não | dict, list, string | dados sobre execução em segundo plano\n| error | não | dict, list, string | mensagem de erro\n\n\n# Anotações e Tipos de Resposta\n\n\n|tipo  | Entrada |\n|--|--|\n| Html | dict |\n| Css | bytes-like object |\n| Csv | bytes-like object |\n| JavaScript | bytes-like object |\n| Jpg | bytes-like object |\n| Json | dict, list, string |\n| Mp4 |bytes-like object  |\n| Pdf | bytes-like object |\n| Png |  bytes-like object|\n| TextPlain | bytes-like object |\n| Xml | bytes-like object |\n\n\n# Json\nO template Json é composto da seguinte forma:\n\nJson = {\n\t    \"token\": \"\",\n\t    \"success\": True,\n\t    \"date\": \"\",\n\t    \"itens\": 0,\n\t    \"data\": [],\n}\n\nOnde os dados respondidos estarão dentro de \"data\".\n```python\n    @get\n    async def index(self) -> Json:\n        await View(self.enviroment, data=[{\"added\": true}])\n```\n\n\n#  HTML e Template Mako\n\nPara mais informações sobre a criação de templates Mako acesse: https://www.makotemplates.org/\n\nA estrutura das Views HTML desenvolvidas em Mako devem estar assim:\n\n```bash\napp\n├── ...\n├── configuration                           \t\t  \n├── controllers\n├── views\n│   └── shared   \n│   |\t└── default.html              \n└── server.py\n```\n\nQuando não há uma view definida para rota, o template padrão a ser carregado será o default.\n\né possível  criar views específicas para cada rota conforme exemplo abaixo:\n\nRota: **/product/detail**\n\n```python\n    @get\n    async def index(self) -> Html:\n        await View(self.enviroment, data=[{\"added\": true}])\n```\n\n**Template:**\n\n```bash\napp\n├── ...\n├── configuration                           \t\t  \n├── controllers\n├── views\n│   └── product   \n│   |\t└── detail\n│   |\t|\t└── index.html  \n│   └── shared                \n└── server.py\n```\n\n\n# Decoradores\n\nBravaweb é compatível com encapsulamento através de decorador e a criação deve seguir o modelo abaixo:\n\n**Decorador de Método Síncrono:**\n\n```python\ndef decorator_example(f):\n    def example_decorator(cls, **args) -> f:\n        return f(cls, **args)\n    return example_decorator\n```\n\n**Decorador de Método Assíncrono:**\n\n```python\ndef decorator_example_async(f):\n    async def example_decorator(cls, **args) -> f:\n        return await f(cls, **args)\n    return example_decorator\n```\n\n**O uso do decorador em um método síncrono  ficaria assim:**\n\n```python\n    @decorator_example\n    def __init__(self):\n        .\n        .\n```\n\n**O uso do decorador em uma rota ficaria assim:**\n\n```python\n    @decorator_example_async\n    async def index(self) -> Html:\n        await View(self.enviroment, data=_response_data)\n```\n\n\n**É possível também criar decorar para um controlador inteiro, a função \"decora\" todos os métodos executáveis, observe que os métodos padrões de classe  __init__ e __del__ são métodos síncronos e por isso o decorador síncrono, e demais métodos (actions) com decorador assíncrono.**\n\n```python\ndef decorator_example_klass():\n    def decorate(cls):\n        for attr in cls.__dict__:\n            _method = getattr(cls, attr)\n            if hasattr(_method, '__call__'):\n                if attr == \"__init__\" or attr == \"__del__\":\n                    setattr(cls, attr, example_decorator(_method))\n                else:\n                    setattr(cls, attr, decorator_example_async(_method))\n        return cls\n    return decorate\n```\n\n# Erros:\n\nA qualquer momento no processamento da sua rota é possível responder  com as seguintes mensagens de erro:\n\n| Metoto | Código de Resposta  | Mensagem |\n|--|--|--|\n| NoContent | 204  | 204: No Content\n| Unauthorized | 401  | 401: Unauthorized\n| NotFound | 404  | 404: Not Found\n| NotAllowed | 405  | 405: Method not allowed\n| PreconditionFailed | 412  | 412: Precondition Failed\n| InternalError | 500  | 500: Internal Error\n\n**Exemplo requisição de um arquivo pdf:**\n\n```python\n\nimport os.path\n\n    @get\n    async def index(self, file_path:str) -> Pdf:\n\t    if os.path.exists(file_path):\n\t\t\t_file_data = open(file_path,'r')\n\t        await View(self.enviroment, data = _file_data.read())\n\t    else:\n\t\t    self.NotFound()\n```\n\n\n## License\n\nMIT",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robertons/bravaweb",
    "keywords": "asgi,wsgi,python3,web,http,framework,mysql,mariadb",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bravaweb",
    "package_url": "https://pypi.org/project/bravaweb/",
    "platform": "",
    "project_url": "https://pypi.org/project/bravaweb/",
    "project_urls": {
      "Homepage": "https://github.com/robertons/bravaweb"
    },
    "release_url": "https://pypi.org/project/bravaweb/0.0.19/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "BravaWeb Framework for ASGI Server",
    "version": "0.0.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10404628,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78d9db6c6cf0754c996cb0924d2918481e14e8bd010d24463bb6b82f8f3a671f",
          "md5": "4c88565261638ae2e3a32395949f4dae",
          "sha256": "20432f9bd8ae882ed235847e9b28f58b4ce461499fbeca20395997f96e086b96"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c88565261638ae2e3a32395949f4dae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11221,
        "upload_time": "2020-03-30T11:54:17",
        "upload_time_iso_8601": "2020-03-30T11:54:17.496625Z",
        "url": "https://files.pythonhosted.org/packages/78/d9/db6c6cf0754c996cb0924d2918481e14e8bd010d24463bb6b82f8f3a671f/bravaweb-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23fa713fea3077e5f24c7e0b8df5e5b72cb29c6d867d0f97e6920749f1ab2135",
          "md5": "92136bf76e74235db86e30d6977ee457",
          "sha256": "ca9dc029354797d2459b544536e8e2cc196190c8cac5c4fc569fe61e9c81af3c"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "92136bf76e74235db86e30d6977ee457",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25521,
        "upload_time": "2021-04-15T17:56:45",
        "upload_time_iso_8601": "2021-04-15T17:56:45.746821Z",
        "url": "https://files.pythonhosted.org/packages/23/fa/713fea3077e5f24c7e0b8df5e5b72cb29c6d867d0f97e6920749f1ab2135/bravaweb-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6d2a683530826d17110e27d073916a24e4d6c0cb023cc56d4f73d1889a4e169",
          "md5": "6d66f69345e5a171998315aae27dcdaa",
          "sha256": "27ed0f2adc5d2bb4e3e3a9722812353b3b343f583eeeb06d200dd145cff1762b"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "6d66f69345e5a171998315aae27dcdaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25504,
        "upload_time": "2021-04-19T23:09:16",
        "upload_time_iso_8601": "2021-04-19T23:09:16.940687Z",
        "url": "https://files.pythonhosted.org/packages/d6/d2/a683530826d17110e27d073916a24e4d6c0cb023cc56d4f73d1889a4e169/bravaweb-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0695fdbe7ed4ee42aceda0a289b4861d32a7adef23eba499b6d000aa47f1a108",
          "md5": "7ebf7cd7fee6356f1fe8a0557fe3bdb6",
          "sha256": "8f9aab20dc52cd3f9e8271862e78b9b503f15a6f812684d856d498ddad87c82a"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "7ebf7cd7fee6356f1fe8a0557fe3bdb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25528,
        "upload_time": "2021-04-20T22:50:12",
        "upload_time_iso_8601": "2021-04-20T22:50:12.928355Z",
        "url": "https://files.pythonhosted.org/packages/06/95/fdbe7ed4ee42aceda0a289b4861d32a7adef23eba499b6d000aa47f1a108/bravaweb-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0c092524ecf7042ef313c67a4b1c82a5d3c0ddd3bea9d07d47ab01f182b272",
          "md5": "bbb461acaaa084bd33fac1a072a5ce77",
          "sha256": "f1171f8bb39eadb819c23371328cd6d79adb1074ea940d7ddfae5d24e6ceaabb"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "bbb461acaaa084bd33fac1a072a5ce77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25540,
        "upload_time": "2021-04-26T22:02:23",
        "upload_time_iso_8601": "2021-04-26T22:02:23.714081Z",
        "url": "https://files.pythonhosted.org/packages/6d/0c/092524ecf7042ef313c67a4b1c82a5d3c0ddd3bea9d07d47ab01f182b272/bravaweb-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6338b72ad4fac692412f0e2d5cf6a10ea22a6c3dd4b65d8a77ea02739df43c79",
          "md5": "9ac123293e4e624e79d4cd99c903a48c",
          "sha256": "f7a8714282c5af18b3bb59c915f8015e94e4c38bf73127877ed181326f3c435b"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "9ac123293e4e624e79d4cd99c903a48c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25631,
        "upload_time": "2021-05-07T00:57:11",
        "upload_time_iso_8601": "2021-05-07T00:57:11.142789Z",
        "url": "https://files.pythonhosted.org/packages/63/38/b72ad4fac692412f0e2d5cf6a10ea22a6c3dd4b65d8a77ea02739df43c79/bravaweb-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aa7b488e34861822e80038bb005d2393cb3ef48ed705bb71c93c26ce49822b4",
          "md5": "deb2fa078274f054725fbd3599e36857",
          "sha256": "4ba0cc46235585ecf432f52004ee4a899f4e162c384c15ef4b872a2ad8a84b2c"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "deb2fa078274f054725fbd3599e36857",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25638,
        "upload_time": "2021-05-07T01:40:02",
        "upload_time_iso_8601": "2021-05-07T01:40:02.984553Z",
        "url": "https://files.pythonhosted.org/packages/6a/a7/b488e34861822e80038bb005d2393cb3ef48ed705bb71c93c26ce49822b4/bravaweb-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17fa6664b75159da2ad879c1cb4268580f508967534b9e990d28cdb820f04d5e",
          "md5": "6ed3e860ede123a07867d57dfa029b2a",
          "sha256": "7fb36992be957e0e6ebde7c23ea0452119db6cf894e5688cf4b7f75e84ba49ed"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "6ed3e860ede123a07867d57dfa029b2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25650,
        "upload_time": "2021-05-07T01:49:10",
        "upload_time_iso_8601": "2021-05-07T01:49:10.374996Z",
        "url": "https://files.pythonhosted.org/packages/17/fa/6664b75159da2ad879c1cb4268580f508967534b9e990d28cdb820f04d5e/bravaweb-0.0.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f46a3e9fc9f04ca8d8f2c03f4fa3a1f38c9640aa7ad4189ceea10ddf90340eea",
          "md5": "800486ba7477ed712cb22dccc28dbdba",
          "sha256": "55145e8f4dc1e623f8f531e3569bbcf56274d3c3f34cea0740ff78a5010f1202"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "800486ba7477ed712cb22dccc28dbdba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25676,
        "upload_time": "2021-05-07T01:59:51",
        "upload_time_iso_8601": "2021-05-07T01:59:51.962805Z",
        "url": "https://files.pythonhosted.org/packages/f4/6a/3e9fc9f04ca8d8f2c03f4fa3a1f38c9640aa7ad4189ceea10ddf90340eea/bravaweb-0.0.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d319b6710c97166ae1acb6e75591d75399d066d16f8422e9d85cd0ac22ebed0c",
          "md5": "7cd2e65e04e46b4f89822ffe1dcc58bd",
          "sha256": "35024e5e969ce3b380c6d6ddabecd8feb9701bc0ba15104492f980a66b18f895"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "7cd2e65e04e46b4f89822ffe1dcc58bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25707,
        "upload_time": "2021-05-13T18:08:24",
        "upload_time_iso_8601": "2021-05-13T18:08:24.095687Z",
        "url": "https://files.pythonhosted.org/packages/d3/19/b6710c97166ae1acb6e75591d75399d066d16f8422e9d85cd0ac22ebed0c/bravaweb-0.0.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10e650a54c9df0f0d476060695fdf10fdc201cf2573870f267217fe6277d9d4f",
          "md5": "2f2b8b98a6ff3b32d0fe7afcb6af0c9c",
          "sha256": "0901b2487f6c2d16b2e99e6e279c41435d96b3152c82281892bf78a986de08c1"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "2f2b8b98a6ff3b32d0fe7afcb6af0c9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25774,
        "upload_time": "2021-05-19T12:35:00",
        "upload_time_iso_8601": "2021-05-19T12:35:00.808931Z",
        "url": "https://files.pythonhosted.org/packages/10/e6/50a54c9df0f0d476060695fdf10fdc201cf2573870f267217fe6277d9d4f/bravaweb-0.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74f52c4a4ebc8cfc4e1caad8256bc69a275a72a586ca7896c14d6a141f60c739",
          "md5": "e6422cfc495c0433e581957c6c75994f",
          "sha256": "a9be89f1e36d70a56688654e7482439358b5e156b40710b8ad43a27484a286cd"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e6422cfc495c0433e581957c6c75994f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11350,
        "upload_time": "2020-03-31T01:23:21",
        "upload_time_iso_8601": "2020-03-31T01:23:21.425402Z",
        "url": "https://files.pythonhosted.org/packages/74/f5/2c4a4ebc8cfc4e1caad8256bc69a275a72a586ca7896c14d6a141f60c739/bravaweb-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb0d144e33df8c786519aa9ad4b1f094cee83023ad35e6b3c9da0f44473a093f",
          "md5": "c95be36bf3e3edd287d43e4234569292",
          "sha256": "75539235f9c1b3035c17e10b7c3154344634441843023e3e66a2c58ab97f480e"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c95be36bf3e3edd287d43e4234569292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11342,
        "upload_time": "2020-03-31T01:26:42",
        "upload_time_iso_8601": "2020-03-31T01:26:42.967606Z",
        "url": "https://files.pythonhosted.org/packages/bb/0d/144e33df8c786519aa9ad4b1f094cee83023ad35e6b3c9da0f44473a093f/bravaweb-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29d04912295b47ac273e7d7030ae056277a70f5997328b766598a981b6fd1c2f",
          "md5": "4022c5d85b90ea9d22e3d6984af8d722",
          "sha256": "e3f30ddeeb169e883742158d39ba565794828e331f8d62a3bd26efab65407ac5"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4022c5d85b90ea9d22e3d6984af8d722",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11375,
        "upload_time": "2020-03-31T15:55:08",
        "upload_time_iso_8601": "2020-03-31T15:55:08.270498Z",
        "url": "https://files.pythonhosted.org/packages/29/d0/4912295b47ac273e7d7030ae056277a70f5997328b766598a981b6fd1c2f/bravaweb-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05a315c67599782a4b74bd1da5937ca36041122cbddba1656fa3a29a9df9acd3",
          "md5": "81124432b27830c86d687ba220ce4f84",
          "sha256": "08bed0ad4d57bd39c364e5d074174b307275f4000c4523e64094934a7951d0bc"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "81124432b27830c86d687ba220ce4f84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11431,
        "upload_time": "2020-05-01T01:32:11",
        "upload_time_iso_8601": "2020-05-01T01:32:11.169151Z",
        "url": "https://files.pythonhosted.org/packages/05/a3/15c67599782a4b74bd1da5937ca36041122cbddba1656fa3a29a9df9acd3/bravaweb-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02d7a80d39a90a872bbd81f2852b8ba192519cfe9f11742d179cdedce4272746",
          "md5": "676afe478876227c0d701ee33841ac0c",
          "sha256": "10bd9d3ae8559413197a8d2f6d6f8858e30d6b5cb28cb555a3aa7e31f30e3944"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "676afe478876227c0d701ee33841ac0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11424,
        "upload_time": "2020-10-20T13:52:17",
        "upload_time_iso_8601": "2020-10-20T13:52:17.562191Z",
        "url": "https://files.pythonhosted.org/packages/02/d7/a80d39a90a872bbd81f2852b8ba192519cfe9f11742d179cdedce4272746/bravaweb-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57ff4e87720c0ea485ae3545b45b6def987647eb717087290297c1a84255fa62",
          "md5": "b318417c2d2ffe6a0ef21fde7b8052a3",
          "sha256": "50584986ed65cd9d0acf5d7f544298e44fef9607a5404ba77e1a0c5dbe61b2a9"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b318417c2d2ffe6a0ef21fde7b8052a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11408,
        "upload_time": "2020-10-20T13:59:59",
        "upload_time_iso_8601": "2020-10-20T13:59:59.114451Z",
        "url": "https://files.pythonhosted.org/packages/57/ff/4e87720c0ea485ae3545b45b6def987647eb717087290297c1a84255fa62/bravaweb-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "848b9be74131a5fd58f50d32032b2150abb1559c1ab4f2aaabf34cc086f8006a",
          "md5": "6685dcd8bdff2410bbbd4256511044ed",
          "sha256": "c2729013bc28df249181ee1b914a412967452af279e41593bb45047b50bc7387"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6685dcd8bdff2410bbbd4256511044ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12469,
        "upload_time": "2020-11-30T14:00:27",
        "upload_time_iso_8601": "2020-11-30T14:00:27.800448Z",
        "url": "https://files.pythonhosted.org/packages/84/8b/9be74131a5fd58f50d32032b2150abb1559c1ab4f2aaabf34cc086f8006a/bravaweb-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b79fb69859677b4394095fc168683cc5db815cdccf785f3d447e2e55f7439c5",
          "md5": "636472d075dd3bbb8278e378bfc773dc",
          "sha256": "78d7afeaa93a0ccec2cbcbf06df9a59363078cc440080babb5318739ed7c5203"
        },
        "downloads": -1,
        "filename": "bravaweb-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "636472d075dd3bbb8278e378bfc773dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24638,
        "upload_time": "2021-04-13T12:59:05",
        "upload_time_iso_8601": "2021-04-13T12:59:05.377362Z",
        "url": "https://files.pythonhosted.org/packages/2b/79/fb69859677b4394095fc168683cc5db815cdccf785f3d447e2e55f7439c5/bravaweb-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10e650a54c9df0f0d476060695fdf10fdc201cf2573870f267217fe6277d9d4f",
        "md5": "2f2b8b98a6ff3b32d0fe7afcb6af0c9c",
        "sha256": "0901b2487f6c2d16b2e99e6e279c41435d96b3152c82281892bf78a986de08c1"
      },
      "downloads": -1,
      "filename": "bravaweb-0.0.19.tar.gz",
      "has_sig": false,
      "md5_digest": "2f2b8b98a6ff3b32d0fe7afcb6af0c9c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25774,
      "upload_time": "2021-05-19T12:35:00",
      "upload_time_iso_8601": "2021-05-19T12:35:00.808931Z",
      "url": "https://files.pythonhosted.org/packages/10/e6/50a54c9df0f0d476060695fdf10fdc201cf2573870f267217fe6277d9d4f/bravaweb-0.0.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}