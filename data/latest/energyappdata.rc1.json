{
  "info": {
    "author": "Asmaa khorkhash",
    "author_email": "asmaakhorkhash@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "                       THIS IS A PACKAGE For creating built_in dataset to import it directly by importing it                 \r\n         this package helps any developer to import built_in, preprocessing dataset and pass it to models to use it whether \r\n         multi_variate or uni_variate timeseries forcating, this dataset about Measurements of electric power consumption in\r\n         one household with a one-minute sampling rate over a period of almost 4 years.Different electrical quantities and \r\n         some sub-metering values are available. \r\n\r\n# Installation\r\n\r\n**pip install EnergyData**\r\n\r\n# electricpower_package\r\n\r\n   * EnergyData\r\n      * __init__.py\r\n      * electricpower.py\r\n      *   data\r\n         *  householdpower.csv\r\n   * test\r\n      * __init__.py\r\n      *  test.py\r\n   * setup.py\r\n   * tox.ini\r\n   * README.md\r\n\r\n# how to use the package\r\n\r\n```\r\nfrom EnergyDataset import electricpower as pw\r\n```\r\n**Then we**\r\n\r\n``` \r\n# import load_data to get the built-in, preprocessing data by this code:\r\nX_train,X_test,Y_train,Y_test = pw.load_data()\r\n```\r\n# write functions that we will import in load_data() like:\r\n\r\n 1- train_test_split() : take data and return train_data, test_data\r\n\r\n```\r\ndef train_test_split(data_frame, test_size=0.3):\r\n        \"\"\"\r\n        :param data_frame: The whole dataframe needed to split the data\r\n        :param test_size:  setting the size of test set , initially equals 30%\r\n        :return: two sets after splitting the data , one for training and the other for testing\r\n        \"\"\"\r\n\r\n        train_size = 1 - test_size\r\n        end_idx = int(data_frame.shape[0] * train_size * 100 // 100)\r\n\r\n        train = data_frame.iloc[:end_idx, :]\r\n        test = data_frame.iloc[end_idx:, :]\r\n\r\n        return train, test\r\n```\r\n\r\n\r\n 2- scale_data() : take train_data, test_data and perform scaling on them\r\n \r\n```\r\ndef scale_data(train, test):\r\n    scaler = MinMaxScaler().fit(train)\r\n    return scaler.transform(train), scaler.transform(test), scaler\r\n```\r\n\r\n 3- univariate_splitter() : take data and return arrays of input_feature and output_feature\r\n\r\n```\r\n\r\ndef univariate_splitter(data_frame):\r\n        \"\"\"\r\n        :param df:\r\n        :return: two arrays one for features and the other for output\r\n        \"\"\"\r\n\r\n        input_features = []\r\n        ouput_feature = []\r\n\r\n        len_df = data_frame.shape[0]\r\n\r\n        for i in range(len_df):\r\n\r\n            end_idx = i + 1\r\n\r\n            if end_idx > len_df - 1:\r\n                break\r\n\r\n            input_x, output_y = data_frame[i:end_idx, 1:], data_frame[end_idx: end_idx + 1, 0]\r\n\r\n            input_features.append(input_x)\r\n            ouput_feature.append(output_y)\r\n\r\n        return np.array(input_features), np.mean(np.array(ouput_feature), axis=1)\r\n```\r\n\r\n 4- multivariate_splitter() : take data and return arrays of input_feature and output_feature:\r\n \r\n```\r\ndef multivariate_splitter(df, input_size=21, output_size=7):\r\n        \"\"\"\r\n        :param df:\r\n        :param input_size: how many samples added to each input\r\n        :param output_size: how many values will be predicted from each output\r\n        :return: two arrays one for features and the other for output\r\n        \"\"\"\r\n\r\n        input_features = []\r\n        ouput_feature = []\r\n\r\n        len_df = df.shape[0]\r\n\r\n        for i in range(len_df):\r\n\r\n            end_idx = i + input_size\r\n\r\n            if end_idx > len_df - output_size:\r\n                break\r\n\r\n            input_x, output_y = df[i:end_idx, 1:], df[end_idx: end_idx + output_size, 0]\r\n\r\n            input_features.append(input_x)\r\n            ouput_feature.append(output_y)\r\n\r\n        return np.array(input_features), np.array(ouput_feature)\r\n```   \r\n\r\n\r\n**first we read data by pkg_resources**\r\n**then we import all of these functions to load_data(), so once we import it we get data splitted,scalled and converted:**\r\n\r\n\r\n\r\n# NOTE:the __name__ variable stores the module name\r\n\r\n\r\n```\r\ndef load_data():\r\n    stream= pkg_resources.resource_stream(__name__, r'data\\householdpower.csv')\r\n    data_fram=pd.read_csv(stream,encoding='latin-1',parse_dates=['date_time'], index_col= 'date_time')\r\n    data_fram['sub_metering_remaining'] = (data_fram.Global_active_power * 1000  / 60 ) - (data_fram.Sub_metering_1 + data_fram.Sub_metering_2 + data_fram.Sub_metering_3)\r\n    data_fram = data_fram.resample('D').sum()\r\n    data_fram = data_fram.resample('D').mean()\r\n    X_train, X_test = train_test_split(data_frame=data_fram)\r\n    X_train, X_test, scaler = scale_data(train=X_train, test=X_test)\r\n    choosing=input('UNivariate or Multivariate (U or M)?')\r\n    if choosing=='U':\r\n        X_train, Y_train =univariate_splitter(X_train)\r\n        X_test, Y_test = univariate_splitter(X_test)\r\n    if choosing==\"M\":\r\n        X_train, Y_train =multivariate_splitter(X_train)\r\n        X_test, Y_test = multivariate_splitter(X_test)\r\n    return X_train,X_test,Y_train,Y_test\r\n    \r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Asmaa-khorkhash/Energydata",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EnergyAppData",
    "package_url": "https://pypi.org/project/EnergyAppData/",
    "platform": null,
    "project_url": "https://pypi.org/project/EnergyAppData/",
    "project_urls": {
      "Homepage": "https://github.com/Asmaa-khorkhash/Energydata"
    },
    "release_url": "https://pypi.org/project/EnergyAppData/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Measurements of electric power consumption in one household",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15488204,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26791ff58796e117e05378e6440d97b4a2cb2630d5320f86b6c422a93b6045d9",
          "md5": "8498eb1211b096686942143974e25e38",
          "sha256": "2cea52f8421eb61ffe37798b699bcdd71e86ca75ad5c77311e644d9f2bb271ab"
        },
        "downloads": -1,
        "filename": "EnergyAppData-0.0.1-py3.10.egg",
        "has_sig": false,
        "md5_digest": "8498eb1211b096686942143974e25e38",
        "packagetype": "bdist_egg",
        "python_version": "0.0.1",
        "requires_python": null,
        "size": 19748502,
        "upload_time": "2022-10-21T15:31:59",
        "upload_time_iso_8601": "2022-10-21T15:31:59.348437Z",
        "url": "https://files.pythonhosted.org/packages/26/79/1ff58796e117e05378e6440d97b4a2cb2630d5320f86b6c422a93b6045d9/EnergyAppData-0.0.1-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26791ff58796e117e05378e6440d97b4a2cb2630d5320f86b6c422a93b6045d9",
        "md5": "8498eb1211b096686942143974e25e38",
        "sha256": "2cea52f8421eb61ffe37798b699bcdd71e86ca75ad5c77311e644d9f2bb271ab"
      },
      "downloads": -1,
      "filename": "EnergyAppData-0.0.1-py3.10.egg",
      "has_sig": false,
      "md5_digest": "8498eb1211b096686942143974e25e38",
      "packagetype": "bdist_egg",
      "python_version": "0.0.1",
      "requires_python": null,
      "size": 19748502,
      "upload_time": "2022-10-21T15:31:59",
      "upload_time_iso_8601": "2022-10-21T15:31:59.348437Z",
      "url": "https://files.pythonhosted.org/packages/26/79/1ff58796e117e05378e6440d97b4a2cb2630d5320f86b6c422a93b6045d9/EnergyAppData-0.0.1-py3.10.egg",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}