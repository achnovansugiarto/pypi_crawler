{
  "info": {
    "author": "CÃ©sar J. Lockhart de la Rosa",
    "author_email": "lockhart@imec.be",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[//]: # (1 Project's title)\r\n# cfcapi\r\n\r\n[//]: # (2 Project description)\r\n`Python` API to interact with the Caonabo Fluidic Controller (CFC).\r\nThe CFC is a board that allows one to control a total of 50 valves to manipulate the flow of chemicals.\r\nIt is composed of five valve modules and one control module. Each valve module is composed of the following peripherals:\r\n\r\n- Darlington open collector transistor outputs with flyback protection diodes for controlling valves (10)\r\n- Input / output TTL (5.0V) digital ports (5)\r\n- Module indicator LED (1)\r\n\r\nFrom the 10 valve outputs of each valve module, 6 of them (from index 0 to 5) can drive valves of up to 0.5A,\r\nthe remaining 4 (6 to 9) can handle up to 1A. All of them can handle up to 50V.\r\n\r\nThe control module is built around an Arduino Nano 33 BLE module and is composed of the following peripherals:\r\n- Input / output CMOS (3.3V) digital ports (10)\r\n- Analog (0V to 3.3V) inputs  (7)\r\n- Module indicator RGB LED (1)\r\n\r\nThis API allows the manipulation of all these peripherals in `Python`. For more information regarding the CFC hardware please visit its [repository](https://github.imec.be/dna-storage/cfc).\r\n\r\n[//]: # (3 Table of contents)\r\n## Table of contents <a name=\"table-contents\"></a>\r\n\r\n1. [Installation and package dependencies](#installation)\r\n2. [How to use the package](#use)\r\n    + [2.1 Instantiation, initiation and closing comunication to the board.](#instantiation)\r\n    + [2.2 Working with digital Input/Ouput (IO) ports and analog ports.](#io)\r\n    + [2.3 Working with valves.](#valves)\r\n3. [API reference guide](#reference)\r\n4. [Contributors](#contributors)\r\n5. [License](#license) \r\n\r\n[//]: # (4 Package dependencies)\r\n## 1 Installation and package dependencies <a name=\"installation\"></a>\r\n\r\nThis packager requires the previous installation of the following packages:\r\n- [pyserial 3.5 (or newer)](https://pypi.org/project/pyserial/)\r\n\r\nAfer installing the dependencies, the package can be installed from the Python package index (`PyPI`) repository.\r\n\r\nIn Windows:\r\n\r\n```PowerShell\r\nC:\\> pip install --user cfcapi\r\n```\r\n\r\nor in Linux:\r\n\r\n```bash\r\n$ pip install --user cfcapi\r\n```\r\n\r\nAs an alternative, the cfcapi package (inside the `src/` folder) can be download and copied into the the main folder of the project where it will be used.\r\n\r\n[//]: # (5 How to use the package)\r\n## 2 How to use the package <a name=\"use\"></a>\r\n\r\n### 2.1 Instantiation, initiation and closing communication to the board. <a name=\"instantiation\"></a>\r\n\r\nFirst, the module must be imported:\r\n\r\n```python\r\n>>> from cfcapi import board\r\n```\r\n\r\nOnce imported the cfc class inside the module must be instantatiated to gain control to an specific CFC board.\r\nHence, the port where the CFC board is connected, as well as the ID of the board, must be specified.\r\nFor the port, the name of the port can be given such as `\"COM1\"` or `\"AUTO\"` can be used.\r\nSometimes, `\"AUTO\"` might not work due to conflict with some USB devices. \r\nIf this happens, the port will have to be passed manually. An example instantiations can be as folows:\r\n\r\n```python\r\n>>> cfc = board.cfc(port=\"AUTO\", board_id=\"000\")\r\n```\r\n\r\nOnce initiated, the following output will appear in the console:\r\n\r\n>    Caonabo Fluidic Controller (CFC) with correct ID initiated in port: COM26.  \r\n>    CFC Modules addresses: \\['2', '3', '4', '5', '6'\\]\r\n\r\nThe last line identifies the addresses of the 5 different valve modules (from 0 to 4),\r\nand should agree with the physical address configured for each module with the DIP switches.\r\nIf this does not match, communication with that module will fail. \r\nTo test that the communication to each module works the the `testModule()` method can be used.\r\nFor example:\r\n\r\n```python\r\n>>> cfc.testModules()\r\n```\r\n\r\nThe *Module indicator LEDs* of each module will turn on for 0.5s sequentially from module 0 to module 4.\r\nIf the communication to any of the module fails, the respective LED will not be turned on.\r\nThe first thing to check while debugging a possible problem is the that the physical address (set with the DIP switch)\r\nmatches with that of the firmware (the one shown when instantiating or when using the method `getAddress()`).\r\n\r\nAt the end, the instance must be properly closed to avoid leaving the serial ports open. This is done by using the `close()` method:\r\n\r\n```python\r\n>>> cfc.close()\r\n```\r\n\r\n### 2.2 Working with digital input/ouput (IO) ports and analog ports. <a name=\"io\"></a>\r\n\r\nFor working the IO ports, they first have to be configured.\r\nBy default, the digital ports of the modules (pin 10 to 14 of pin header) are configured as *inputs*.\r\nThe index for addressing the IOs of the modules is from 0 to 4 linked to physical pins 10 to 14.\r\nThe IOs of the Arduino module (D2 to D10) are also initiated as *inputs*.\r\nThe indexes to address the IOs from the Arduino module runs from 2 to 10.\r\n\r\n**To configure** the IO ports, the method `confIO(mode_list, module)` must be used.\r\nThe first parameter required is a list of integers that represents whether the pin will act as an input (0) or an output (1).\r\nThe amount of elements in the list should match the amount of IOs in the port to be configured (*i.e.*, 5 for the valve modules and 9 for the Arduino module).\r\nThe second parameter is the module: for valve modules a value between `0` to `4` (integer) can be used,\r\nand for the Arduino module the `\"A\"` character must be used.\r\nBy default (*i.e.*, if no module value is passed) the Arduino module is selected.\r\nTo configure the first three (0, 1 and 2) IO ports of module 0 as outputs, and the last two (3 and 4) as inputs the following example can be used:\r\n\r\n```python\r\n>>> cfc.confIO(mode_list=[1, 1, 1, 0, 0], module=0)\r\n```\r\n\r\nTo configure all the IOs of the Arduino module (D2 to D10) as outputs, the following example can be used:\r\n\r\n```python\r\n>>> cfc.confIO(mode_list=[1, 1, 1, 1, 1, 1, 1, 1, 1], module=\"A\")\r\n```\r\n\r\nOnce configured, the IO port can be **writen** by using the method `writeIO(ioNumber, value, module)`,\r\nor **read** using the method `readIO(ioNumber, module)`.\r\nThe parameter `ioNumber` is the number identifying the IO (from 0 to 4 for valve modules and from 2 to 10 for Arduino module).\r\nThe value parameter (only for writing) specify whether the IO port will be 1 (5V for valve modules and 3.3V for Arduino module) or 0 (GND for all modules).\r\nFinally, the module parameter (0 to 4 or \"A\") will identify the module to which the IO belongs.\r\nFor example, to write 1 to IO 0 of module 0 you can use:\r\n\r\n```python\r\n>>> cfc.writeIO(ioNumber=0, value=1, module=0)\r\n```\r\n\r\nand to read from IO D9 of the Arduino module can use:\r\n\r\n```python\r\n>>> cfc.readIO(ioNumber=9, module=\"A\")` or `>>> cfc.readIO(ioNumber=9)\r\n```\r\n\r\nThe **analog** ports in the Arduino module (A0 to A6) can be **read** using the method `analogRead(aNumber)`.\r\nThe `aNumber` parmeter is simply the number of the analog port to be read (from `0` to `6`).\r\nThe method returns a value between 0 and 1023, proportional to the voltage in the respective port (from 0 to 3.3v).\r\n\r\n### 2.3 Working with valves. <a name=\"valves\"></a>\r\n\r\nTo **set a valve** output the method `setValve(valve)` must be used, and to **to clear a valve** the method `clearValve(valve)` must be used.\r\nThe `valve` parameter is value from `0` to `49` identifiying the valve.\r\nThe first digit in the number identifies the module and second digit identifies the valve.\r\nFor example, valve `45` is valve with index `5` on module with index `4`.\r\nSimilarly, valve `3` (same as `03`) identifies the valve with index `3` in module with index `0`.\r\nFor example, setting and clearing valve 3 of module 2 can be done with:\r\n\r\n```python\r\n>>> cfc.setValve(23)\r\n```\r\n\r\nand\r\n\r\n\r\n```python\r\n>>> cfc.clearValve(23)\r\n```\r\n\r\nAdditionally, the valves can be **activated with a pulse** with the method `pulse(valve, tON, tOFF, periods)`.\r\nThe `valve` parameter is the same as for the previous methods, where `tON` and `tOFF` are use to specify\r\nthe amount of time (in seconds) that the valve will remain on and off, respectively. Parameter `tOFF` is set to `0`.\r\nThe last parameter `periods` is use to define how many times the cycle `tON` and `tOF` must be repeated.\r\nBy default, `periods` is set to 1.\r\nIf it is desired to set on valve 23 for one second the following code can be used:\r\n\r\n```python\r\n>>> cfc.pulse(valve=23, tON=1, tOFF=0, periods=1)\r\n```\r\n\r\nor\r\n\r\n```python\r\n>>> cfc.pulse(valve=23, tON=1)\r\n```\r\n \r\n[//]: # (6 API Reference Guide)\r\n## 3 API Reference Guide <a name=\"reference\"></a>\r\n\r\n|    | Method | Description | Parameters | Returns | Example |\r\n| -- |--------|-------------|------------|---------|---------|\r\n| 00 | getID | Returns the ID of the CFC board. | NA | ID (string) | `cfc.getID()` |\r\n| 01 |getAddress | Returns the address of the modules configured in the firmware. | NA | addresses (list of strings) | `cfc.getAddress()` |\r\n| 02 |rgbLED | Set status of the RGB LED in the Arduino nano 33 BLE board ON (1) or OFF (0). | r, g, b (int) | NA | `cfc.rgbLED(0,1,0)` |\r\n| 03 |confIO | Configures the IO ports available in either the arduino or the valve modules. | mode_list (str), module=\"A\" (str or int) | NA | `cfc.confIO(\"11100\",0)` |\r\n| 04 |writeIO | Write to the IO ports of the Arduino or the valve modules. | ioNumber (int), value (int - 0 or 1), module=\"A\" (int of str) | NA | `cfc.writeIO(3,1,\"A\")` |\r\n| 05 |readIO | Read the digital ports of the Arduino, or the valve modules. | ioNumber (int), module=\"A\" (int of str) |  value (int - 0 or 1) | `cfc.readIO(3,\"A\")` |\r\n| 06 |analogRead | Read the analog ports of the Arduino. *Z<sub>IN</sub>* is 10<sup>8</sup> *ohm*. | aNumber (int) | value (int - 0 to 1023) | `cfc.analogRead(2)` |\r\n| 07 |moduleLED | Manipulate the LEDs in the different valve modules of the CFC. |module, value (int) | NA | `cfc.moduleLED(0,1)` |\r\n| 08 |setValve | Set a valve on the CFC. The value can go from 0 to 49. | valve (int) | NA | `cfc.setValve(15)` |\r\n| 09 |clearValve | Clear a valve on the CFC. The value can go from 0 to 49. | valve (int) | NA | `cfc.clearValve(15)` |\r\n| 10 |pulse | Create a tren of pulses activating one of the valves. | valve, tON, tOFF=0, periods=1 (int) | NA | `cfc.pulse(15,1,0,1)` |\r\n| 11 |testModules | Activate the LED on the modules sequentially. The LED remains ON for t seconds. | t=0.5 (float) | NA | `cfc.testModules()` |\r\n| 12 | discoverPort | Discover the USB port to which the CFC is connected. | NA | port (str) | `cfc.discoverPort()` |\r\n| 13 | com | Start serial communication with the CFC. Runs once during instantiation. | port=\"NA\" (str), bit_rate=\"NA\" (str or int), board_id=\"NA\" (str), timeout=\"NA\" (Str or float) | NA | `cfc.com(\"COM4\",115200, \"000\", 1)` |\r\n| 14 | write | Write string of characters to the CFC through the serial bus. | string (str) | response (str) | `cfc.write(\"ID?\")` |\r\n| 15 | read | Read string of characters from the CFC through the serial bus. | NA | response (str) | `cfc.read()` |\r\n| 16 | acknowledgeWrite | Check for the acknowledgement response from the CFC after writing a command that does not require a return from the CFC.| NA | NA | `cfc.acknowledgeWrite()` |\r\n| 17 |close | Method to close the communication to the CFC. | NA | NA | `cfc.close()` |\r\n| 18 |open | Method to open communication to the CFC. | NA | NA | `cfc.open()` |\r\n\r\n[//]: # (7 Contributors)\r\n## 4 Contributors <a name=\"contributors\"></a>\r\n- [CÃ©sar Javier Lockhart de la Rosa (lockhart@imec.be)](https://github.imec.be/lockhart)\r\n- [Kherim Willems (kherim.willems@imec.be)](https://github.imec.be/willemsk)\r\n- [Naghmeh Fatemi (naghmeh.fatemi.ext@imec.be)](https://github.imec.be/fatemi94)\r\n\r\n[//]: # (8-License)\r\n## 5 License <a name=\"license\"></a>\r\n\r\nCopyright (c) 2022 [CÃ©sar J. Lockhart de la Rosa (lockhart@imec.be)](https://github.imec.be/lockhart)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.imec.be/dna-storage/cfcapi",
    "keywords": "fluidic controller,api,caonabo",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cfcapi",
    "package_url": "https://pypi.org/project/cfcapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/cfcapi/",
    "project_urls": {
      "Homepage": "https://github.imec.be/dna-storage/cfcapi"
    },
    "release_url": "https://pypi.org/project/cfcapi/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API for the Caonabo Fluidic Controller (CFC)",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13614333,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2059e4dd6306f077b25915e14d61ad6fd8a755e3e600262113c9488227d8e8b4",
          "md5": "a924609f6b4d322f40dcadf7d4d4a23a",
          "sha256": "59f9c1a4bc730daa8f6c956f212498895dfae23ab4c88e1e1112dfc76acf97d6"
        },
        "downloads": -1,
        "filename": "cfcapi-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a924609f6b4d322f40dcadf7d4d4a23a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15623,
        "upload_time": "2022-04-25T13:35:07",
        "upload_time_iso_8601": "2022-04-25T13:35:07.877535Z",
        "url": "https://files.pythonhosted.org/packages/20/59/e4dd6306f077b25915e14d61ad6fd8a755e3e600262113c9488227d8e8b4/cfcapi-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2059e4dd6306f077b25915e14d61ad6fd8a755e3e600262113c9488227d8e8b4",
        "md5": "a924609f6b4d322f40dcadf7d4d4a23a",
        "sha256": "59f9c1a4bc730daa8f6c956f212498895dfae23ab4c88e1e1112dfc76acf97d6"
      },
      "downloads": -1,
      "filename": "cfcapi-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a924609f6b4d322f40dcadf7d4d4a23a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15623,
      "upload_time": "2022-04-25T13:35:07",
      "upload_time_iso_8601": "2022-04-25T13:35:07.877535Z",
      "url": "https://files.pythonhosted.org/packages/20/59/e4dd6306f077b25915e14d61ad6fd8a755e3e600262113c9488227d8e8b4/cfcapi-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}