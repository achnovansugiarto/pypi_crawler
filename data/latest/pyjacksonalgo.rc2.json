{
  "info": {
    "author": "Saraei Thamer",
    "author_email": "thamer.saraei@polymtl.ca",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyJackson : Python Job Shop Scheduling Module\n\nJob Shop Scheduling Problem (JSS) with Jackson's Algorithm solving using Python >= 3.6.\n\n<div align=\"center\">\n\n[![Build status](https://github.com/th-rpy/jackson_job_shop_scheduling/workflows/build/badge.svg?branch=master&event=push)](https://github.com/th-rpy/jackson_job_shop_scheduling/actions?query=workflow%3Abuild)\n[![Python Version](https://img.shields.io/pypi/pyversions/jackson_job_shop_scheduling.svg)](https://test.pypi.org/project/PyJackson/1.3.0/)\n[![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/th-rpy/jackson_job_shop_scheduling/blob/master/.pre-commit-config.yaml)\n[![License](https://img.shields.io/github/license/th-rpy/jackson_job_shop_scheduling)](https://github.com/th-rpy/jackson_job_shop_scheduling/blob/master/LICENSE)\n\n</div>\n\n<p>\nImplementation of a mathematical model in Python to solve an assignment problem in Job Shop environments. With its respective Gantt chart.\nA job shop consists of a set of distinct machines that process jobs. Each job is a series of tasks that require use of particular machines for known durations, and which must be completed in specified order. The job shop scheduling problem is to schedule the jobs on the machines to minimize the time necessary to process all jobs (i.e, the makespan) or some other metric of productivity. Job shop scheduling is one of the classic problems in Operations Research.\n</p>\n\n## Very first steps\n\nFirst of all, you need to install a few dependencies.\n\n- [Reportlab](https://pypi.org/project/reportlab/) : for generation PDF file.\n\n```bash\npip install reportlab\n```\n\n- [numpy](https://pypi.org/project/numpy/) : for matrix operations.\n\n```bash\npip install numpy\n```\n\n- [pandas](https://pypi.org/project/pandas/) : for data manipulating.\n\n```bash\npip install pandas\n```\n\n- [matplotlib](https://pypi.org/project/matplotlib/) : for plotting Gantt Chart.\n\n```bash\npip install matplotlib\n```\n\n## ðŸš€ Features\n\n- Worked with multiple data formats: CSV, JSON and TEXT files.\n- Plotting Gantt Chart for each solution found for all sub-problems(Virtual).\n- Generate a PDF file with the Gantt Charts for each solution found for all sub-problems(Virtual) and the optimal solution as well.\n\n## Installation\n\n```bash\npip install PyJacksonAlgo==0.1.0\n```\n\n## Usage\n\n```python\nfrom jacksonpy import JacksonAlgo\n\n########################## Example using text file ##########################\n\n# Reading and manipulating data\ndata_path = \"YOUR_PATH/input.txt\"  # path to the data file\nd = JacksonAlgo.Data(data_path)  # create a Data object with the path to the data file\ndata = (\n    d.get_job_durations()\n)  # get the durations: list of list of integers [[J1, dur1, dur2, dur3], [J2, dur1, dur2, dur3] ...]\n\n# Solving the problem\nal = JacksonAlgo.JackAlgo(data)  # create a JackAlgo object with the data\n\nprint(al)  # print the problem details\n\npreparedData = al.prepareData()  # prepare the data for the algorithm\ncmaxVirtual, _, __ = al.get_cmax_virtual(\n    preparedData\n)  # get the cmaxVirtual result of the virtual sub-problems\nresult = al.solve(\n    cmaxVirtual\n)  # solve the problem and save the result in the result variable\nal.generate_pdf_file(\n    results=result\n)  # generate a pdf file with the result of the problem\n\n\n########################## Example using Json file ##########################\n\n# Reading and manipulating data\ndata_path = \"YOUR_PATH//input.json\"  # path to the data file\nd = JacksonAlgo.Data(data_path)  # create a Data object with the path to the data file\ndata = (\n    d.get_job_durations()\n)  # get the durations: list of list of integers [[J1, dur1, dur2, dur3], [J2, dur1, dur2, dur3] ...]\nprint(data)  # print the data\n\n# Solving the problem\nal = JacksonAlgo.JackAlgo(data)  # create a JackAlgo object with the data\n\nprint(al)  # print the problem details\n\npreparedData = al.prepareData()  # prepare the data for the algorithm\ncmaxVirtual, _, __ = al.get_cmax_virtual(\n    preparedData\n)  # get the cmaxVirtual result of the virtual sub-problems\nresult = al.solve(\n    cmaxVirtual\n)  # solve the problem and save the result in the result variable\nal.generate_pdf_file(\n    results=result\n)  # generate a pdf file with the result of the problem\n\n########################## Example using 2d array ##########################\n\n# Reading and manipulating data (defined as a lis of lists of integers)\ndata = [\n    [1, 7, 5, 6, 9, 10],\n    [2, 4, 6, 5, 8, 1],\n    [3, 8, 2, 4, 3, 7],\n    [4, 6, 3, 9, 7, 5],\n    [5, 5, 7, 3, 5, 9],\n]  # list of list of integers [[J1, dur1, dur2, dur3], [J2, dur1, dur2, dur3] ...]\n\n# Solving the problem\nal = JacksonAlgo.JackAlgo(data)  # create a JackAlgo object with the data\n\nprint(al)  # print the problem details\n\npreparedData = al.prepareData()  # prepare the data for the algorithm\ncmaxVirtual, _, __ = al.get_cmax_virtual(\n    preparedData\n)  # get the cmaxVirtual result of the virtual sub-problems\nresult = al.solve(\n    cmaxVirtual\n)  # solve the problem and save the result in the result variable\nal.generate_pdf_file(\n    results=result\n)  # generate a pdf file with the result of the problem\n\n########################## Example using dictionary ##########################\n\n# Reading and manipulating data (defined as a lis of lists of integers)\ndata = {\n    \"Task 1\": [3, 4, 6, 5],\n    \"Task 2\": [2, 3, 6, 9],\n    \"Task 3\": [8, 9, 2, 6],\n    \"Task 4\": [7, 6, 3, 2],\n    \"Task 5\": [3, 6, 4, 5],\n    \"Task 6\": [5, 8, 7, 9],\n}  # dictionary of lists of integers {'Task 1': [3, 4, 6, 5], 'Task 2': [2, 3, 6, 9], ...}\n\n# Solving the problem\nal = JacksonAlgo.JackAlgo(data)  # create a JackAlgo object with the data\n\nprint(al)  # print the problem details\n\npreparedData = al.prepareData()  # prepare the data for the algorithm\ncmaxVirtual, _, __ = al.get_cmax_virtual(\n    preparedData\n)  # get the cmaxVirtual result of the virtual sub-problems\nresult = al.solve(\n    cmaxVirtual\n)  # solve the problem and save the result in the result variable\nal.generate_pdf_file(\n    results=result\n)  # generate a pdf file with the result of the problem\n```\n\n## Results\n\n- <h5>Gantt Chart for the optimal solution:</h5>\n  <img alt=\"\" title=\"Gantt Diagram\" src=\"https://github.com/th-rpy/jackson_job_shop_scheduling/raw/main/example/output/ImagesOutput/Gantt_Chart_virtual1_cmax_47.png\"/>\n\n- <h5>PDF file with the Gantt Charts for each solution found for all sub-problems(Virtual):</h5>\n    <p>Please download the PDF to view it: <a href=\"https://github.com/th-rpy/jackson_job_shop_scheduling/blob/main/example/output/Algo_Cds_Output.pdf\">Download PDF</a>.</p>\n\n## ðŸ›¡ License\n\n[![License](https://img.shields.io/github/license/th-rpy/jackson_job_shop_scheduling)](https://github.com/th-rpy/jackson_job_shop_scheduling/blob/master/LICENSE)\n\nThis project is licensed under the terms of the `GNU GPL v3.0` license. See [LICENSE](https://github.com/th-rpy/jackson_job_shop_scheduling/blob/master/LICENSE) for more details.\n\n## ðŸ“ƒ Citation\n\n```bibtex\n@misc{PyJackson,\n  author = {Saraei Thamer},\n  title = {Implementation of a mathematical model in Python to solve an assignment problem in Job Shop environments. With its respective Gantt chart.},\n  Github = {th-rpy},\n  year = {2022},\n  howpublished = {\\url{https://github.com/th-rpy/jackson_job_shop_scheduling}}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/th-rpy/jackson_job_shop_scheduling",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyJacksonAlgo",
    "package_url": "https://pypi.org/project/PyJacksonAlgo/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyJacksonAlgo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/th-rpy/jackson_job_shop_scheduling/issues",
      "Homepage": "https://github.com/th-rpy/jackson_job_shop_scheduling"
    },
    "release_url": "https://pypi.org/project/PyJacksonAlgo/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python package to solve the job shop scheduling problem with Gantt chart as output",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14038702,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63c2afc4b3fbfe93fd8a7e586977d95776f855dfe4cebe0452e2c9eac63f8df5",
          "md5": "bd89d4b5ec93dbea85aa5c15e92ed709",
          "sha256": "73b9872b341485cbad4c261bfa27b820f13829b19cd1d6b7fb3c5afb16979664"
        },
        "downloads": -1,
        "filename": "PyJacksonAlgo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd89d4b5ec93dbea85aa5c15e92ed709",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24705,
        "upload_time": "2022-06-05T17:17:43",
        "upload_time_iso_8601": "2022-06-05T17:17:43.296337Z",
        "url": "https://files.pythonhosted.org/packages/63/c2/afc4b3fbfe93fd8a7e586977d95776f855dfe4cebe0452e2c9eac63f8df5/PyJacksonAlgo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acab8b379d2b3e5c8e2369619d8d5065f1f0e0565f2dbba79de3c5a26e38ad16",
          "md5": "ea40d3506f4003638719987f3f898011",
          "sha256": "9d6f59cf576d2a1e577cda05f3bb7dd945a9336222b122904789bc0809a96cd2"
        },
        "downloads": -1,
        "filename": "PyJacksonAlgo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea40d3506f4003638719987f3f898011",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23085,
        "upload_time": "2022-06-05T17:17:44",
        "upload_time_iso_8601": "2022-06-05T17:17:44.743325Z",
        "url": "https://files.pythonhosted.org/packages/ac/ab/8b379d2b3e5c8e2369619d8d5065f1f0e0565f2dbba79de3c5a26e38ad16/PyJacksonAlgo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acbc6297af52bef3990af352a430b89db84f46daca73458007a38c217432b9c8",
          "md5": "0908069388f99f3bdec5cbbdc7316842",
          "sha256": "ad63a6754f62edfeee442163567de8c708a5caed4d753e88c4850003adffacbd"
        },
        "downloads": -1,
        "filename": "PyJacksonAlgo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0908069388f99f3bdec5cbbdc7316842",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24714,
        "upload_time": "2022-06-05T17:24:59",
        "upload_time_iso_8601": "2022-06-05T17:24:59.329859Z",
        "url": "https://files.pythonhosted.org/packages/ac/bc/6297af52bef3990af352a430b89db84f46daca73458007a38c217432b9c8/PyJacksonAlgo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "156fafe2eefcf93a4f86ce1339dbb9ff2816f69ab4b5154c7b235f49b69983b0",
          "md5": "f0e9070f222ae5e75cb742e98ce0e261",
          "sha256": "3577ca96456f2252cf0197f60bed2ae359af4ce8dde7f8771823834f1e437581"
        },
        "downloads": -1,
        "filename": "PyJacksonAlgo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f0e9070f222ae5e75cb742e98ce0e261",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23090,
        "upload_time": "2022-06-05T17:25:01",
        "upload_time_iso_8601": "2022-06-05T17:25:01.054238Z",
        "url": "https://files.pythonhosted.org/packages/15/6f/afe2eefcf93a4f86ce1339dbb9ff2816f69ab4b5154c7b235f49b69983b0/PyJacksonAlgo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acbc6297af52bef3990af352a430b89db84f46daca73458007a38c217432b9c8",
        "md5": "0908069388f99f3bdec5cbbdc7316842",
        "sha256": "ad63a6754f62edfeee442163567de8c708a5caed4d753e88c4850003adffacbd"
      },
      "downloads": -1,
      "filename": "PyJacksonAlgo-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0908069388f99f3bdec5cbbdc7316842",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24714,
      "upload_time": "2022-06-05T17:24:59",
      "upload_time_iso_8601": "2022-06-05T17:24:59.329859Z",
      "url": "https://files.pythonhosted.org/packages/ac/bc/6297af52bef3990af352a430b89db84f46daca73458007a38c217432b9c8/PyJacksonAlgo-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "156fafe2eefcf93a4f86ce1339dbb9ff2816f69ab4b5154c7b235f49b69983b0",
        "md5": "f0e9070f222ae5e75cb742e98ce0e261",
        "sha256": "3577ca96456f2252cf0197f60bed2ae359af4ce8dde7f8771823834f1e437581"
      },
      "downloads": -1,
      "filename": "PyJacksonAlgo-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f0e9070f222ae5e75cb742e98ce0e261",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23090,
      "upload_time": "2022-06-05T17:25:01",
      "upload_time_iso_8601": "2022-06-05T17:25:01.054238Z",
      "url": "https://files.pythonhosted.org/packages/15/6f/afe2eefcf93a4f86ce1339dbb9ff2816f69ab4b5154c7b235f49b69983b0/PyJacksonAlgo-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}