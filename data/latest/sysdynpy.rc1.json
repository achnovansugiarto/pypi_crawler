{
  "info": {
    "author": "Tim Herker",
    "author_email": "tim.herker@stud.hs-bochum.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SysDynPy\n\n**Status**: SysDynPy was developed as a college assignment and is currently not under active development. It is provided \"as is\" for now, but can be used as a code basis for further development if needed.\n\n## Table of Contents\n- [Overview](#overview)\n- [Installation](#installation)\n- [How to get started](#how-to-get-started)\n- [Module documentation](#module-documentation)\n\n## Overview\nSysDynPy - short for *System Dynamics Python* - is a collection of Python modules\nto assist you with implementing and running System Dynamics models. It aims at providing a simple to use framework to do quick simulations.\n\nIt provides classes representing core System Dynamics objects, like Stocks and Flows, which can be instantiated, connected and configured to build a model. The prerequisite to using this library effectively is, that you already have a model in mind that you want to implement, maybe in form of a simulation diagram. Once the model is built it you can run a simulation and store the results to your filesystem for further use. In addition to that a basic way of visualization in form of line plots is provided to get a first impression of the results.\n\n## Installation\n\nThe easiest way is to install the package from PyPi:\n\n    pip install --upgrade pip\n    pip install SysDynPy\n\nThe alternative is building from source. There are multiple tools to use for this. [This tutorial](https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives) shows one possible way. You simply install the build module \n\n    python -m pip install --upgrade build\n\nand run\n\n    python -m build\n\nfrom the repositories root folder. This creates the `dist` directory, which contains the file `SysDynPy-0.1.0-py3-none-any.whl`. This file can be installed from the local filesystem with pip (make sure to navigate into the `dist` folder first):\n\n    pip install SysDynPy-0.1.0-py3-none-any.whl\n\n\n## How to get started\nThe [examples directory](examples) provides some simple models that can serve as a starting point. We will break down the code of the Lotka-Volterra model (which is a quite common example in the System Dynamics field) step by step.\nThe simulation diagram for the model we are about to implement looks like this:\n![simulation-diagram-lotka-volterra](examples/simulation-diagram-lotka-volterra.png \"simulation-diagram-lotka-volterra\").\n\nUsing the library can be split into five steps:\n\n#### 1. Creating the system\nThis step is pretty simple. We create a system so we can reference it when creating the system elements in the next step. The system keeps track of all system elements and can show them if needed by using `lv_system.show_system_elements()`.\n\n```python\nnumber_of_simulation_steps = 200\n\n# create system\nlv_system = System(\"lotka-volterra\")\n```\n\n#### 2. Creating system elements\nThis is where the system gets filled with elements. We define stocks, parameters, flows and a dynamic variable. This is what the constructor arguments mean:\n\n* **name**: A name for the element. This is used for error messages and the exporter.\n* **value**: The initial value for the element.\n* **system**: The reference to the system object.\n* **var_name**: The name of the variable the object is assigned to once it is created. This is needed to have access to the variable name in other modules (e.g. to execute the lambda expression there).\n* **calc_rule**: A lambda expression that defines how the value should be calculated.\n\nNote that parameters have a fixed value, so they don't need a calculation rule. Flows and dynamic variables have no initial value.\n\n```python\n# create elements\npredators = Stock(name=\"Predators\", value=40, system=lv_system, var_name=\"predators\",\n    calc_rule=lambda: increase_in_predators - energy_loss)\nprey = Stock(name=\"Prey\", value=500, system=lv_system, var_name=\"prey\", \n    calc_rule=lambda: increase_in_prey - decrease_in_prey)\n\nGROWTH_RATE_PREY = Parameter(name=\"GROWTH RATE PREY\", value=0.05,\nsystem=lv_system, var_name=\"GROWTH_RATE_PREY\")\nLOSS_RATE_PREY = Parameter(name=\"LOSS RATE PREY\", value=0.001,\n    system=lv_system, var_name=\"LOSS_RATE_PREY\")\nGROWTH_RATE_PREDATORS = Parameter(name=\"GROWTH RATE PREDATORS\", value=0.0002,\n    system=lv_system, var_name=\"GROWTH_RATE_PREDATORS\")\nENERGY_LOSS_RATE_PREDATORS = Parameter(name=\"ENERGY LOSS RATE PREDATORS\", value=0.1,\n    system=lv_system, var_name=\"ENERGY_LOSS_RATE_PREDATORS\")\n\nincrease_in_prey = Flow(name=\"increase in prey\", system=lv_system,\n    var_name=\"increase_in_prey\", calc_rule=lambda: GROWTH_RATE_PREY * prey)\ndecrease_in_prey = Flow(name=\"decrease in prey\", system=lv_system,\n    var_name=\"decrease_in_prey\", calc_rule=lambda: LOSS_RATE_PREY * encounters)\nincrease_in_predators = Flow(name=\"increase in predators\", system=lv_system,\n    var_name=\"increase_in_predators\", calc_rule=lambda: encounters * GROWTH_RATE_PREDATORS)\nenergy_loss = Flow(name=\"energy loss\", system=lv_system,\n    var_name=\"energy_loss\", calc_rule=lambda: ENERGY_LOSS_RATE_PREDATORS * predators)\n\nencounters = DynamicVariable(name=\"encounters\", system=lv_system, var_name=\"encounters\",\n    calc_rule=lambda: prey * predators)\n```\n\n#### 3. Connecting system elements\nMost system elements have a property named `input_elements` where we can store a list of all system elements that serve as an input for the calculation of that element (the exception to that are parameters). Like this, we create one-directional associations which are represented by arrows in the simulation diagram above.\nIt is also possible to link elements at creation time (step 2), given that the elements to link already exist. In most cases defining all elements first is easier. That way we don't have to care about the order we create elements in.\n\n```python\n# link elements\npredators.input_elements.extend([increase_in_predators, energy_loss])\nprey.input_elements.extend([increase_in_prey, decrease_in_prey])\n\nincrease_in_prey.input_elements.extend([prey, GROWTH_RATE_PREY])\ndecrease_in_prey.input_elements.extend([encounters, LOSS_RATE_PREY])\nincrease_in_predators.input_elements.extend([GROWTH_RATE_PREDATORS, encounters])\nenergy_loss.input_elements.extend([ENERGY_LOSS_RATE_PREDATORS, predators])\n\nencounters.input_elements.extend([prey, predators])\n```\n\n#### 4. Run the simulation\nNow we are ready to run a simulation. This is done with a simulator. Multiple simulators can be used for different configurations (e.g. number of simulation steps), but for now we just use one.\nOnce the simulation is done `get_simulation_results()` can be used to return the results as a dictionary.\n\n```python\n# run simulation\ns1 = Simulator(number_of_simulation_steps, \"weeks\")\ns1.run_simulation(lv_system)\n# get_simulation_results() returns a dict\n# Key = Name of the system element, Value = List of numerical values\nsim_results = s1.get_simulation_results()\n# pprint.pprint(sim_results) # print formatted results to console\n```\n\n#### 5. Save the results\nAt this point you are free to use the results however you like. As simulations can take some time saving the results for later use seems useful. With `csv` and `json` two very common formats are supported.\n`export_graph` provides a way to visualize the results. It is meant to give a first impression on how the result looks like and has limited customization options. If you need more control on how the graph looks like libraries like [Matplotlib](https://matplotlib.org/) are designed for that and provide many options. Alternatively you can import the `json` or `csv` file to other software and do the styling there.\n\n```python\n# export results to various formats\n# make sure the subfolder \"results\" exists or change the relative path\nExporter.export_data(results=sim_results, file_format=\"csv\", \\\n    system_elements=[\"Predators\", \"Prey\"], rel_path=\"./results/lotka-volterra-results.csv\")\n\nExporter.export_data(results=sim_results, file_format=\"json\", \\\n    system_elements=[\"Predators\", \"Prey\"], rel_path=\".\\\\results\\\\lotka-volterra-results.json\")\n\nExporter.export_graph(results=sim_results, file_format=\"jpg\", \\\n    system_elements=[\"Predators\", \"Prey\"], rel_path=\"results/lotka-volterra-results\", \\\n    title=\"Lotka-Volterra simulation\", label_x=\"t[weeks]\", label_y=\"Number of Animals\",\n    range_x=[0,number_of_simulation_steps], range_y=[0,600], colors=[\"red\", \"blue\"],\n    line_width=2, legend_pos=\"upper right\")\n\nExporter.export_graph(results=sim_results, file_format=\"png\", \\\n    system_elements=[\"Prey\", \"Predators\"], rel_path=\"results\\\\lotka-volterra-results\", \\\n    title=\"Lotka-Volterra simulation\", label_x=\"t[weeks]\", label_y=\"Number of Animals\",\n    range_x=[0,number_of_simulation_steps], range_y=[0,600], colors=[\"green\", \"orange\"],\n    line_width=2, legend_pos=\"upper left\")\n```\n\n## Module documentation\n\nA detailed documentation of the module API can be found [here](https://t16h05008.github.io/SysDynPy/).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/t16h05008/SysDynPy",
    "keywords": "",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SysDynPy",
    "package_url": "https://pypi.org/project/SysDynPy/",
    "platform": "",
    "project_url": "https://pypi.org/project/SysDynPy/",
    "project_urls": {
      "Homepage": "https://github.com/t16h05008/SysDynPy"
    },
    "release_url": "https://pypi.org/project/SysDynPy/0.1.0/",
    "requires_dist": [
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "A framework to build System Dynamics models",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9484133,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0520661fde37650894cafbd65d5855b2d9af89b1652b13586e0c26e88b2f2686",
          "md5": "6f232b625c2f9f8781be272bb7d94c17",
          "sha256": "62df0df4a3526da1819c2473ae3358159eba2c8446774c787cfe29069e716257"
        },
        "downloads": -1,
        "filename": "SysDynPy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f232b625c2f9f8781be272bb7d94c17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16833,
        "upload_time": "2021-02-21T23:45:44",
        "upload_time_iso_8601": "2021-02-21T23:45:44.760620Z",
        "url": "https://files.pythonhosted.org/packages/05/20/661fde37650894cafbd65d5855b2d9af89b1652b13586e0c26e88b2f2686/SysDynPy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5868d1b1d944dfe6999bf4fed993573647815646f761b73371e45577cef5fcbb",
          "md5": "17d6fd7e9b30d1e8f27ea9260ec690c2",
          "sha256": "9639ba3c14d9a7e0018041e20a92c2bd7cbbb90ce2e8644ae7b518417047abca"
        },
        "downloads": -1,
        "filename": "SysDynPy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "17d6fd7e9b30d1e8f27ea9260ec690c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12159,
        "upload_time": "2021-02-21T23:45:46",
        "upload_time_iso_8601": "2021-02-21T23:45:46.126786Z",
        "url": "https://files.pythonhosted.org/packages/58/68/d1b1d944dfe6999bf4fed993573647815646f761b73371e45577cef5fcbb/SysDynPy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0520661fde37650894cafbd65d5855b2d9af89b1652b13586e0c26e88b2f2686",
        "md5": "6f232b625c2f9f8781be272bb7d94c17",
        "sha256": "62df0df4a3526da1819c2473ae3358159eba2c8446774c787cfe29069e716257"
      },
      "downloads": -1,
      "filename": "SysDynPy-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f232b625c2f9f8781be272bb7d94c17",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16833,
      "upload_time": "2021-02-21T23:45:44",
      "upload_time_iso_8601": "2021-02-21T23:45:44.760620Z",
      "url": "https://files.pythonhosted.org/packages/05/20/661fde37650894cafbd65d5855b2d9af89b1652b13586e0c26e88b2f2686/SysDynPy-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5868d1b1d944dfe6999bf4fed993573647815646f761b73371e45577cef5fcbb",
        "md5": "17d6fd7e9b30d1e8f27ea9260ec690c2",
        "sha256": "9639ba3c14d9a7e0018041e20a92c2bd7cbbb90ce2e8644ae7b518417047abca"
      },
      "downloads": -1,
      "filename": "SysDynPy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "17d6fd7e9b30d1e8f27ea9260ec690c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12159,
      "upload_time": "2021-02-21T23:45:46",
      "upload_time_iso_8601": "2021-02-21T23:45:46.126786Z",
      "url": "https://files.pythonhosted.org/packages/58/68/d1b1d944dfe6999bf4fed993573647815646f761b73371e45577cef5fcbb/SysDynPy-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}