{
  "info": {
    "author": "Tobi Balogun",
    "author_email": "btobi49@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Webkage is a fast and lightweight Python webframework created for learning purpose only.\n\nIt was created with pure Python standard library with no external dependencies (except Jinja2).\n\nWebkage's philosophy is simlilar to that of Golang's http library. It emphasizes flexibility and full control.\n\n# Tests\n\nRelies on Pytest and Werkzeug testing client for Unit testing.\n\n```\n$ pip install werkzeug pytest\n$ cd tests\n$ pytest .\n\n```\n\n\n# Table Of Contents\n\n=====================\n\n\n* [Introduction](#introduction)\n* [Routing](#routing)\n* [Static Files](#static-files)\n* [Views](#views)\n* [Middlewares](#middlewares)\n* [Url Parameters](#url-parameters)\n* [Url Query](#url-query)\n* [Form](#form)\n* [Form Files](#form-files)\n* [Json Request & Response](#json-request--response)\n* [Session and Cookies](#sion-and-cookies)\n* [Redirects](#redirects)\n* [Templates](#templates)\n* [HTTP Request header](#http-request-header)\n* [CSRF Tokens](#csrf-tokens)\n\n\n\n## Introduction\n\nCreating a web application is simple. The developer first import an instance of the WSGI application and registers a route.\n\n\n```\napp.py\n\n\nfrom webkage.application import App\nfrom http_response import load, response\n\nApp = App()\n\ndef home(ctx):\n    resp = load(\"home.html\")\n    return response(ctx, \"200 OK\", resp)\n\n\nApp.add_path(\"/\", home)\n\n#Run server\nApp.serve()\n\n```\n\n**Always start the route pattern with \"/\"**\n\nThis would spin up a development WSGI server that listens on **127.0.0.1:8000**\n\nThis is a development server and it's not suitable for production. For a production based WSGI web server, the entry point for the WSGI App can be accessed via the `wsgi` attribute.\n\nExample using gunicorn.\n\n```\napp.py\n\n\nfrom webkage.application import App\nfrom http_response import load, response\n\nApp = App()\n\ndef home(ctx):\n    resp = load(\"home.html\")\n    return response(ctx, \"200 OK\", resp)\n\n\nApp.add_path(\"/\", home)\n\nwsgi = App.wsgi\n\n```\n\nServing the App through gunicorn:\n\n```\n$ gunicorn app:wsgi\n\n```\n\n\n## Routing\n\nIn Webkage, routes must be registered using the ```add_path``` method of the application instance. It accepts two compulsory arguments; the path and view function.\n\n\n```\napp.py\n\n...\n\ndef home(ctx):\n   ...\n\ndef login(ctx):\n   ...\n\n## Register routes\nApp.add_path(\"/\", home)\nApp.add_path(\"login/\", login)\n\n\n...\n\n```\n\nUrl parameters like id and slug can also be used in routes.\n\n\n```\napp.py\n\n...\n\nApp.add_path(\"product/:id/\", productIdDetail)\nApp.add_path(\"product/:slug/\", productSlugDetail)\n\n...\n\n```\n\nThe values of these parameters can be accessed in the view function.\n\n\n## Static Files\n\nIn Webkage, static files are served by first registering the directory from which the files will be served from. The `set_static` method is responsible for this.\n\n```\napp.py\n\nfrom webkage.application import App\n\n\n...\n\n# Serve static\nApp.set_static(\"/static/\", \"static\")\n\n...\n\n```\n\nThe first argument is the prefix of all static files to be served. The last argument is the directory from which the static files reside.\n\n\n## Views\n\nWhile registering routes, views must be assigned to the routes.\n\nA view function is a simple function with just one parameter and returns an http response using either **webkage.http_response.response** or **webkage.http_response.json_response**.\n\nBoth of these functions accept three compulsory arguments.\n\n```\napp.py\n\nfrom webkage.http_response import json_response, response, load\n\n...\n\n\ndef home(ctx):\n    resp = load(\"home.html\")\n    return response(ctx, \"200 OK\", resp)\n\n\ndef json_home(ctx):\n   resp = {\"Name\":\"Uzumaki\", \"Title\":\"Hokage\"}\n   return json_response(ctx, \"200 OK\", resp)\n\n...\n\n```\n\nThe three arguments of both response functions are context object, status code and http reponse object.\n\nList of http response codes can be accessed via http.HTTPStatus module.\n\n**response** function returns a `text/html` response while **json_response** returns a ``application/json` response to the client.\n\n\n\n## MiddleWares\n\nMiddlewares can be achieved through decorators or high level functions.\n\n```\napp.py\n\n...\n\ndef auth_middleware(func):\n   def new_view(ctx):\n      #perform actions here\n      return func(ctx)\n   return new_view\n\n\n@auth_middleware\ndef dashboard(ctx):\n   ...\n\n\nApp.add_path(\"dashboard/\", dashboard)\n\n...\n\n```\n\nOr\n\n```\napp.py\n\n...\n\ndef auth_middleware(func):\n   def new_view(ctx):\n      #perform actions here\n      return func(ctx)\n   return new_view\n\n\n\ndef dashboard(ctx):\n   ...\n\n\nApp.add_path(\"dashboard/\", auth_middleware(dashboard))\n\n...\n\n```\n\n\n## Url Parameters\n\nUrl parameters can be accessed via the Context object's `params` attribute.\n\n\n```\napp.py\n\n...\n\n\ndef product(ctx):\n   product_id = ctx.params[\"id\"]\n   ...\n\nApp.add_path(\"product/:id\", product)\n\n...\n\n```\n\n\n## Url Query \n\nUrl queries can be accessed via the Context object's `query` attribute.\n\nSame process used in accessing Url parameters.\n\n\n```\napp.py\n\n...\n\n\ndef product(ctx):\n   product_id = ctx.query[\"id\"]\n   ...\n\nApp.add_path(\"product/\", product)\n\n...\n\n```\n\n\n## Form \n\nForm values can be accessed via the context object's `form` attribute.\n\n\n```\napp.py\n\n...\n\n\ndef add_product(ctx):\n   if ctx.request[\"method\"] == \"POST\":\n      product_name = ctx.form[\"name\"]\n   ...\n\nApp.add_path(\"product/add\", add_product)\n\n...\n\n```\n\n\nFiles uploaded cannot be accessed via the `form` attribute.\n\n\n## Form Files\n\nFiles uploaded via HTTP forms can be accessed the Context object's `formFile` attribute.\n\n\n```\napp.py\n\n...\n\n\ndef new_ca(ctx):\n   csv_file = ctx.formFile[\"csv_file\"]\n   \n   #Access file's name via the filename attribute\n   with open(csv_file.filename, \"wb\") as f:\n       f.write(f.read())\n   ...\n\nApp.add_path(\"ca/add\", new_cases)\n\n...\n\n```\n\n\n## Json Request & Response\n\nJson objects can be accessed the Context object's `json` attribute; the value is a valid Python dictionary object.\n\nJson response should be done with **webkage.http_response.json_response**, else the returned response will be in \"text/html\".\n\n\n\n## Session and Cookies\n\nWebkage has no provision for File or Database based sions. It's solely a client-based one. All Cookies are HttpOnly by default.\n\n\n**Setting Cookies' value**\n\n\n```\napp.py\n\n...\n\ndef login(ctx):\n   ctx.session[\"name\"] = \"Rock Lee\"\n   ...\n\n\n```\n\n**Setting Cookies to secured only**\n\n```\napp.py\n\n...\n\ndef login(ctx):\n    ctx.session[\"name\"] = \"Sakura\"\n    ctx.secure(True)\n    ...\n\n...\n\n```\n\n**Setting Cookies To HttpOnly or not**\n\n```\napp.py\n\n...\n\ndef login(ctx):\n    ctx.session[\"user\"] = 45\n    ctx.httponly(False)\n    ...\n\n...\n\n```\n\n**Setting Cookies' expiry**\n\n```\napp.py\n\n...\n\ndef login(ctx):\n   ctx.session[\"user\"] = 56\n   ctx.will_expire(\"21 Oct 2015 07:28:00 GMT\")\n   ...\n\n...\n\n```\n\n**Flushing/Deleting Cookies' session**\n\n```\napp.py\n\n...\n\ndef logout(ctx):\n    ctx.flush()\n    ...\n\n...\n\n```\n\n## Redirects\n\nBoth Permanent and Temporary redirects can be acheived by specifying the right status code. Redirect can be acheived via **wekage.http_response.redirect**\n\n```\napp.py\n\nfrom webkage.http_response import redirect\n...\n\ndef secret(ctx):\n    return redirect(ctx, \"301\", \"/home\")\n    ...\n\n...\n\n```\n\n\n## Templates\n\nWebkage's Templates are powered by Jinja2's templating engine. Templates are expected to reside in `./templates` directory relatively to the module or file in which the views reside.\n\nAn example directory will look like:\n\n```\nprogram/\n    app.py\n    templates/\n        home.html\n\n```\n\nIn `home.html`, we might have:\n\n```\nhome.html\n\n<html>\n   <head>\n       <title>Home</title>\n   </head>\n   <body>\n       <ul>\n           {% for item in items %}\n           <li>{{ item }}</li>\n           {% endfor %}\n       </ul>\n   </body>\n</html>\n\n```\n\nIn `app.py`, we might have:\n\n```\napp.py\n\nfrom webkage.http_response, import load, response\n\n...\n\ndef items_list(ctx):\n    data = {\"items\":[\"Shuriken\", \"Wood\", \"Boot\", \"Scroll\"]}\n    resp = load(\"home.html\", data)\n    return response(ctx, \"200\", resp)\n\n...\n\n```\n\n\n## HTTP Request Header\n\nThe Context object's `request` objects contain the following keys:\n\n\n```\nctx.request[key]\n\n``` \n\n**content-length** Length of HTTP request's body.\n\n**content-type** HTTP requests' content type.\n\n**ip-address** Client's IP address.\n\n**user-agent** Client's user agent.\n\n**method** Request method. Either of POST, GET, PUT, or DELETE.\n\n**protocol** Mostly HTTP.\n\n**scheme** Http, Https, etc.\n\n\n## CSRF Tokens\n\nWebkage does not implement CSRF tokens by default, users who are not building microservices can implement a Middleware to handle this.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thelaycon/webkage",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "webkage",
    "package_url": "https://pypi.org/project/webkage/",
    "platform": "",
    "project_url": "https://pypi.org/project/webkage/",
    "project_urls": {
      "Bug Tracker": "https://github.com/thelaycon/webkage/issues",
      "Homepage": "https://github.com/thelaycon/webkage"
    },
    "release_url": "https://pypi.org/project/webkage/0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A fast micro web framework",
    "version": "0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12383203,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4254b060ced9528b8ae5ffc610bc50fbeed5736ba07bcfeef389e34ebe8ce08",
          "md5": "443b11410057395888ac614797176dc4",
          "sha256": "cbd266be09a02157f696bf57eab525a526fa9e20c0d067af104f54c34c7dae2c"
        },
        "downloads": -1,
        "filename": "webkage-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "443b11410057395888ac614797176dc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9211,
        "upload_time": "2021-11-13T09:26:25",
        "upload_time_iso_8601": "2021-11-13T09:26:25.520582Z",
        "url": "https://files.pythonhosted.org/packages/b4/25/4b060ced9528b8ae5ffc610bc50fbeed5736ba07bcfeef389e34ebe8ce08/webkage-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1987a2ac14817227ab3de68afcd851e4a304acfb9ae1bd82d9bcdd471dbcaf45",
          "md5": "2aaae7a4363de9109d1c93a533e2043e",
          "sha256": "d4150387bdf24458e356cb22406347bb6c8b8d5b4297874de5450f509e3797a4"
        },
        "downloads": -1,
        "filename": "webkage-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2aaae7a4363de9109d1c93a533e2043e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10933,
        "upload_time": "2021-11-13T09:26:28",
        "upload_time_iso_8601": "2021-11-13T09:26:28.118716Z",
        "url": "https://files.pythonhosted.org/packages/19/87/a2ac14817227ab3de68afcd851e4a304acfb9ae1bd82d9bcdd471dbcaf45/webkage-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79bcfd7090b0f09fb37671c394992be678cc5feab2b78ace91b9b533e0c65961",
          "md5": "d8cb2bfffc9cd88b7e5054d907515c10",
          "sha256": "421ec44d94c9491d3123c680df6e23af0d872514d6b99908914238d2e9b341da"
        },
        "downloads": -1,
        "filename": "webkage-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d8cb2bfffc9cd88b7e5054d907515c10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4444,
        "upload_time": "2020-10-25T11:20:54",
        "upload_time_iso_8601": "2020-10-25T11:20:54.022785Z",
        "url": "https://files.pythonhosted.org/packages/79/bc/fd7090b0f09fb37671c394992be678cc5feab2b78ace91b9b533e0c65961/webkage-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d76eb2b3af0aba4442b3290bfc0347f87c21abcdf18eafcfb087a8090dfb85be",
          "md5": "a6e7ef82462dd5fa9cc3f97b0fc478ab",
          "sha256": "a67efaeacc43039f9d3d6ee15281494c3d9ae77006ce8cb1491b08beb42b325a"
        },
        "downloads": -1,
        "filename": "webkage-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a6e7ef82462dd5fa9cc3f97b0fc478ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6920,
        "upload_time": "2020-10-29T12:02:18",
        "upload_time_iso_8601": "2020-10-29T12:02:18.365208Z",
        "url": "https://files.pythonhosted.org/packages/d7/6e/b2b3af0aba4442b3290bfc0347f87c21abcdf18eafcfb087a8090dfb85be/webkage-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02c92476146fc87d2855f9e86aa38480434a0688d50bc3f29514fdb730eb619f",
          "md5": "373d15633ca0fcf975b03329e9d7ed85",
          "sha256": "44ce8d844623d361cfe7d16d102e8d728b9291fc9944617c6aa809548a511b5b"
        },
        "downloads": -1,
        "filename": "webkage-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "373d15633ca0fcf975b03329e9d7ed85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11092,
        "upload_time": "2020-10-29T12:54:10",
        "upload_time_iso_8601": "2020-10-29T12:54:10.927189Z",
        "url": "https://files.pythonhosted.org/packages/02/c9/2476146fc87d2855f9e86aa38480434a0688d50bc3f29514fdb730eb619f/webkage-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a766aac231a876f03eea4719cc8ce45745ebbf72d189ae632feee35cd212a16",
          "md5": "2b6c1b29c783596806b3e0fe3d8d9361",
          "sha256": "0eb5736bd776609f8760c14906c7a2484c191b7d1fabf667b2e58be0ee79f74a"
        },
        "downloads": -1,
        "filename": "webkage-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2b6c1b29c783596806b3e0fe3d8d9361",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11325,
        "upload_time": "2020-10-29T16:15:37",
        "upload_time_iso_8601": "2020-10-29T16:15:37.842896Z",
        "url": "https://files.pythonhosted.org/packages/5a/76/6aac231a876f03eea4719cc8ce45745ebbf72d189ae632feee35cd212a16/webkage-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b115cb0b2ab76bf0773c648dcae60fa24b20909b5d323b1f3f0216005d11fa73",
          "md5": "eb8ec98c13e2c2516908abf2c5dac058",
          "sha256": "8db7bb1c61098899ce86ceef4a366e60574732df36f008e0ce11d000dce8d29c"
        },
        "downloads": -1,
        "filename": "webkage-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb8ec98c13e2c2516908abf2c5dac058",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9099,
        "upload_time": "2021-11-13T09:26:27",
        "upload_time_iso_8601": "2021-11-13T09:26:27.098719Z",
        "url": "https://files.pythonhosted.org/packages/b1/15/cb0b2ab76bf0773c648dcae60fa24b20909b5d323b1f3f0216005d11fa73/webkage-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de6767d463681434ad47af0c6fe37a437bae77a3f68d0170f436c35ea06d6726",
          "md5": "4b8fd4fb1949ae361234204fc21056c5",
          "sha256": "e6e88b0352024092cd68bd2b9ecd3e0e2eccb246dabe00178ed6dbf942e23349"
        },
        "downloads": -1,
        "filename": "webkage-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4b8fd4fb1949ae361234204fc21056c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10642,
        "upload_time": "2021-11-13T09:26:29",
        "upload_time_iso_8601": "2021-11-13T09:26:29.296793Z",
        "url": "https://files.pythonhosted.org/packages/de/67/67d463681434ad47af0c6fe37a437bae77a3f68d0170f436c35ea06d6726/webkage-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93a963e07779363d5e0cfd6c003b5b861d40939b857f1016f812cc53a6872118",
          "md5": "8a0284bd7a80feab8076a7a587758a19",
          "sha256": "98b8eb77271d61823df13b2598414ed72c7b12b4fd40d59e741bae6e7cc30180"
        },
        "downloads": -1,
        "filename": "webkage-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a0284bd7a80feab8076a7a587758a19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10280,
        "upload_time": "2021-12-22T17:18:13",
        "upload_time_iso_8601": "2021-12-22T17:18:13.667645Z",
        "url": "https://files.pythonhosted.org/packages/93/a9/63e07779363d5e0cfd6c003b5b861d40939b857f1016f812cc53a6872118/webkage-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8371f943e48b7c8687e00cbd8251b0ae268e8bd2fdf2380f2e97d9e75eabc84",
          "md5": "4fec87d9f44bb194396fdd4b773327d1",
          "sha256": "593f18f9c398be19800d15783a6b28bf3e96c139820bda82d60d57a4ec2377e9"
        },
        "downloads": -1,
        "filename": "webkage-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4fec87d9f44bb194396fdd4b773327d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11703,
        "upload_time": "2021-12-22T17:18:14",
        "upload_time_iso_8601": "2021-12-22T17:18:14.857064Z",
        "url": "https://files.pythonhosted.org/packages/d8/37/1f943e48b7c8687e00cbd8251b0ae268e8bd2fdf2380f2e97d9e75eabc84/webkage-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93a963e07779363d5e0cfd6c003b5b861d40939b857f1016f812cc53a6872118",
        "md5": "8a0284bd7a80feab8076a7a587758a19",
        "sha256": "98b8eb77271d61823df13b2598414ed72c7b12b4fd40d59e741bae6e7cc30180"
      },
      "downloads": -1,
      "filename": "webkage-0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a0284bd7a80feab8076a7a587758a19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10280,
      "upload_time": "2021-12-22T17:18:13",
      "upload_time_iso_8601": "2021-12-22T17:18:13.667645Z",
      "url": "https://files.pythonhosted.org/packages/93/a9/63e07779363d5e0cfd6c003b5b861d40939b857f1016f812cc53a6872118/webkage-0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8371f943e48b7c8687e00cbd8251b0ae268e8bd2fdf2380f2e97d9e75eabc84",
        "md5": "4fec87d9f44bb194396fdd4b773327d1",
        "sha256": "593f18f9c398be19800d15783a6b28bf3e96c139820bda82d60d57a4ec2377e9"
      },
      "downloads": -1,
      "filename": "webkage-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "4fec87d9f44bb194396fdd4b773327d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11703,
      "upload_time": "2021-12-22T17:18:14",
      "upload_time_iso_8601": "2021-12-22T17:18:14.857064Z",
      "url": "https://files.pythonhosted.org/packages/d8/37/1f943e48b7c8687e00cbd8251b0ae268e8bd2fdf2380f2e97d9e75eabc84/webkage-0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}