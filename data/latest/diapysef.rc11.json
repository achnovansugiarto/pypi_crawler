{
  "info": {
    "author": "Max Frank, Annie Ha, Justin Sing, Josh Charkow, Hannes Roest",
    "author_email": "hannes.rost@utoronto.ca",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\ndiapysef Vignette\n=================\n\nAuthor: Max Frank, Hannes Roest \n\nContributors: Annie Ha, Joshua Charkow, Justin Sing \n\nLast Updated: 2022-11-09\n\ndiapysef is a convenience package for working with DIA-PASEF data. It\nhas functionalities to convert Bruker raw files into a format that\nOpenMS can understand. Thus OpenSwath can be used to analyze the data\nand TOPPView can be used to visualize. diapysef itself has also some\nbasic visualization capability that allows to display the window setting\nof a DIA-PASEF run in the context of a precursor map.\n\nInstallation\n------------\n\nIf you wish to install from pyPI\n\n.. code:: bash\n\n    $ pip install diapysef\n\nIf you wish to install from source, you can do the following:\n\n.. code:: bash\n\n    $python setup.py install\n\n\nLegacy (version <= 0.3.5)\n\nWe have not uploaded this package to pyPI, since the package contains\nsome small example data and small amounts of bruker code. You can\ninstall the package through the provided wheel. Make sure you have\npython and pip installed. Then, in your terminal command prompt, run:\n\n.. code:: bash\n\n    ## Optional: if conversion with compression is required install the newest pyopenms nightly build\n    ## Otherwhise, from the folder containing the .whl file run\n    pip install diapysef-0.1-py2.py3-none-any.whl\n\nOn windows make sure that you add the Scripts/ folder of your python\ninstallation to your PATH to be able to call the command line tools from\nanywhere.\n\n\nRunning diapysef\n=================\n\n*diapysef* contains several tools and can be run via the command line, or can be used for scripting:\n\n.. code:: bash\n\n    $ diapysef --help\n\n    Found Bruker sdk. Access to the raw data is possible. \n\n    Usage: diapysef [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\n    Mobi-DIK (Ion Mobility DIA Tool-Kit) is a package for analysis of DIA data\n    coupled to ion mobility.\n\n    Visit http://openswath.org/en/latest/docs/mobi-dik.html for usage\n    instructions and help\n\n    Options:\n    --version  Show the version and exit.\n    --help     Show this message and exit.\n\n    Commands:\n    converttdftomzml     Conversion program to convert a Bruker TIMS .d...\n    export               Export a reduced targeted mzML file to a tsv file\n    prepare-coordinates  Generate peptide coordinates for targeted...\n    report               Generate a report for a specfific type of plot\n    targeted-extraction  Extract from the raw data given a set of target...\n\nConverting raw files\n====================\n\n.. code:: bash\n\n    $ diapysef converttdftomzml --help\n\n    Found Bruker sdk. Access to the raw data is possible. \n\n    Usage: diapysef converttdftomzml [OPTIONS]\n\n    Conversion program to convert a Bruker TIMS .d data file to mzML format\n\n    Options:\n    --in PATH                       The location of the directory containing raw\n                                    data (usually .d).  [required]\n    --out TEXT                      The name of the output file (mzML).\n                                    [required]\n    --merge INTEGER                 Number of consecutive frames to sum up\n                                    (squash). This is useful to boost S/N if\n                                    exactly repeated frames are measured.\n                                    [default: -1]\n    --keep_frames / --no-keep_frames\n                                    Whether to store frames exactly as measured\n                                    or split them into individual spectra by\n                                    precursor isolation window (default is to\n                                    split them - this is almost always what you\n                                    want).  [default: no-keep_frames]\n    --verbose INTEGER               Verbosity.  [default: -1]\n    --overlap INTEGER               How many overlapping windows were recorded\n                                    for the same m/z window - will split the\n                                    output into N output files.  [default: -1]\n    --framerange TEXT               The minimum and maximum Frames to convert.\n                                    Useful to only convert a part of a file.\n                                    [default: [-1, -1]]\n    --help                          Show this message and exit.\n\n\nIf you see an output like this:\n\n::\n\n    Bruker sdk not found. Some functionalities that need access to raw data will not be available. To activate that functionality place libtimsdata.so (Linux) or timsdata.dll in the src folder. \n\n    This functionality can only be carried out if the bruker sdk is present. Please install it first. The sdk can be installed by installing proteowizard(version >=3, http://proteowizard.sourceforge.net), or by placing the a library file in your path (For windows this will be timsdata.dll and for Linux libtimsdata.so).\n\n*diapysef* will attempt to install the appropriate sdk for your system to the current working directory. If this fails, you will have to manually install it yourself.\n\n.. code:: bash\n\n    diapysef converttdftomzml --in IPP_U1_B10_60min_400nL_Slot1-10_1_1192_6-16-2021.d --out test_diapysef.mzML\n    Found Bruker sdk. Access to the raw data is possible.\n\n    [2022-11-09 09:58:00] INFO: Converting IPP_U1_B10_60min_400nL_Slot1-10_1_1192_6-16-2021.d...\n    Analysis has 38269 frames.\n    100%|████████████████████████████████████████████████████████████████████████████| 38269/38269 [48:27<00:00, 13.16it/s]\n    [2022-11-09 10:46:31] INFO: Finished converting TDF data to mzML!\n\nLegacy (version <= 0.3.5)\n\nAssuming you have added the python scripts folder to your path you can\nsimply run:\n\n.. code:: bash\n\n    convertTDFtoMzML.py \n\nIf you see an output like this:\n\n::\n\n    Bruker sdk not found. Some functionalities that need access to raw data will not be available. To activate that functionality place libtimsdata.so (Linux) or timsdata.dll in the src folder. \n\n    This functionality can only be carried out if the bruker sdk is present. Please install it first. The sdk can be installed by installing proteowizard(version >=3, http://proteowizard.sourceforge.net), or by placing the a library file in your path (For windows this will be timsdata.dll and for Linux libtimsdata.so).\n\nYou will have to install a Bruker sdk that can handle TDF3.0. You can\neither place the sdk file in your working directory (safest option) or\nsomewhere in your PATH. Another option is to install the latest version\nof ProteoWizard which supports access to the bruker sdk.\n\n| Now you can run the tool without arguments to get the usage info:\n| ``bash convertTDFtoMzML.py``\n\n::\n\n    Found Bruker sdk. Access to the raw data is possible. \n\n    usage: convertTDFtoMzML.py [-h] -a ANALYSIS_DIR -o OUTPUT_FNAME\n                               [-m MERGE_SCANS] [-r FRAME_LIMIT FRAME_LIMIT]\n    convertTDFtoMzML.py: error: the following arguments are required: -a/--analysis_dir, -o/--output_name\n\n\n\nTargeted Data Extraction\n========================\n\nGenerating peptide coordinates for targeted raw data extraction\n---------------------------------------------------------------\n\nIn order to extract a targeted region of the data, you need peptide coordinates that contain the necessary m/z, RT, and ion mobility information to extract data in a targeted region.\n\n.. code:: bash\n\n    diapysef prepare-coordinates --help\n\n.. code:: bash\n\n    diapysef prepare-coordinates --in merged.osw --out peptides_coord_ex.pkl --run_id 5500589384113116496 --target_peptides '[\"T(UniMod:21)ELISVSEVHPSR\", \"TELIS(UniMod:21)VSEVHPSR\"]' \n    Bruker sdk not found. Some functionalities that need access to raw data will not be available. To activate that functionality place libtimsdata.so (Linux) or timsdata.dll in the src folder. \n\n    [2022-09-06 11:16:26] INFO: Generating coordinates...\n    [2022-09-06 11:16:26] INFO: Finished generating coordinates!\n\n**NOTE:** We specify run_id if we pass a merged osw, so that we get coordinates for a specific run with targeted RT and IM identification coordinates\n\n**NOTE:** A *merged.osw* can be obtained by an OpenMS-OpenSwathWorkflow-PyProphet workflow. See [openswath.org](openswath.org) for information on how to perform an OpenSwathWorkflow.\n\n\nIf you want to manually generate a peptide coordinate dictionary, it should look something like the following:\n\n::\n\n    peptides = { \n                'T(UniMod:21)ELISVSEVHPSR_2': {\n                        'peptide': 'T(UniMod:21)ELISVSEVHPSR', \n                        'precursor_mz': 767.3691, \n                        'charge': 2, \n                        'rt_apex': 1730.08, \n                        'im_apex': 1.026132868499893, \n                        'qvalue': 0.0, \n                        'product_mz': [496.2627, 811.4057, 910.4741, 997.5061, 1110.5902, 1223.6743], \n                        'product_charge': [1, 1, 1, 1, 1, 1], \n                        'product_annotation': ['y4^1', 'y7^1', 'y8^1', 'y9^1', 'y10^1', 'y11^1'], \n                        'product_detecting': [1, 1, 1, 1, 1, 1], \n                        'rt_boundaries': [1718.036865234375, 1751.983642578125]}, \n                    'TELIS(UniMod:21)VSEVHPSR_2': {\n                        'peptide': 'TELIS(UniMod:21)VSEVHPSR', \n                        'precursor_mz': 767.3691, \n                        'charge': 2, \n                        'rt_apex': 1905.32, \n                        'im_apex': 1.018710764387254, \n                        'qvalue': 5.231105591576423e-08, \n                        'product_mz': [344.1816, 359.2037, 724.3737, 811.4057, 910.4741, 1077.4725], \n                        'product_charge': [1, 1, 1, 1, 1, 1], \n                        'product_annotation': ['b3^1', 'y3^1', 'y6^1', 'y7^1', 'y8^1', 'y9^1'], \n                        'product_detecting': [1, 1, 1, 1, 1, 1], \n                        'rt_boundaries': [1889.531494140625, 1918.104248046875]}, \n                    'TELIS(UniMod:21)VSEVHPSR_3': {\n                        'peptide': 'TELIS(UniMod:21)VSEVHPSR', \n                        'precursor_mz': 511.9151, \n                        'charge': 3, \n                        'rt_apex': 1932.09, \n                        'im_apex': 0.819074213225268, \n                        'qvalue': 0.013292880776271469, \n                        'product_mz': [359.2037, 496.2627, 595.3311, 811.4057, 1077.4725, 1303.6406], \n                        'product_charge': [1, 1, 1, 1, 1, 1], \n                        'product_annotation': ['y3^1', 'y4^1', 'y5^1', 'y7^1', 'y9^1', 'y11^1'], \n                        'product_detecting': [1, 1, 1, 1, 1, 1], \n                        'rt_boundaries': [1917.89404296875, 1953.622314453125]}\n                }\n\n**NOTE:** we create separate coordinates for peptide ion charge states. Each precursor ion (peptide of specific charge state), will have its own nested dictionary of target coordinate paramaters. \nI.e. the peptide *T(UniMod:21)ELISVSEVHPSR* can have multiple charge states, and should be separated as *T(UniMod:21)ELISVSEVHPSR_2* and *T(UniMod:21)ELISVSEVHPSR_3* to indicated a charge 2 precursor and a charge 3 precursor respectively.\n\nNot all the values are necessary, however, the ones that are needed are: **peptide**, **precursor_mz**, **charge**, **rt_apex**, **im_apex**, **product_mz**.\n\nYou can save the dictionary to a pickle file using the following code:\n\n.. code:: bash\n\n    import pickle\n    with open(f\"peptides.pkl\", \"wb\") as output_file: pickle.dump(peptides, file=output_file, )\n\n\nTargeted Extraction of the Raw diaPASEF mzML data\n-------------------------------------------------\n\nTo reduce the raw diaPASEF data, for visualization or for preliminary algorithm development, you can perform a targeted extraction of the data to reduce the data given target coordinates \n\n.. code:: bash\n\n    $ diapysef targeted-extraction --help\n\n\n.. code:: bash\n\n    $ diapysef targeted-extraction --in IPP_M10_DIA-PaSEF_60min_Bruker10_400nL_1ul-inj-redo2_Slot2-25_1_2151.mzML --coords peptides_coord_ex.pkl --verbose 0 --mslevel [1,2] --mz_tol 20 --rt_window 50\n\n    Bruker sdk not found. Some functionalities that need access to raw data will not be available. To activate that functionality place libtimsdata.so (Linux) or timsdata.dll in the src folder. \n\n    [2022-09-07 12:07:19] INFO: Loading data...\n    [2022-09-07 12:07:46] INFO: Reducing spectra using targeted coordinates...\n    INFO: Processing..TELIS(UniMod:21)VSEVHPSR_3: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [01:13<00:00, 24.35s/it]\n    [2022-09-07 12:09:00] INFO: Finished extracting targeted spectra!\n\n\n**NOTE:** You may get a speed performance boost if you use cached mzML files (files produced from OpenSwathWorflow when using *cacheWorkingInMemory*).\n\n\nCached spectra processing is now 10 fold faster than ondisk, using `hroest/OpenMS/tree/feature/drift_time_os_spec_2 <https://github.com/hroest/OpenMS/tree/feature/drift_time_os_spec_2>`_\n\n.. image:: img/output_ondisk_vs_cache_example.png\n\nIt also now only takes 21.0601 sec to reduce the spectra from cache, vs 74.5139 sec to reduce the spectra from ondisk\n\nOn Disk Experiment\n~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    diapysef targeted-extraction --in data/raw/IPP_M10_DIA-PaSEF_60min_Bruker10_400nL_1ul-inj-redo2_Slot2-25_1_2151_MS1.mzML --coords peptides.pkl --readOptions ondisk --verbose 1 --mslevel [1] --mz_tol 20 --rt_window 40 --im_window 0.08\n    Found Bruker sdk. Access to the raw data is possible.\n\n    [2022-09-30 13:18:20] INFO: Loading data...\n    [2022-09-30 13:20:34] INFO: Reducing spectra using targeted coordinates...\n    INFO: Processing..YVC(UniMod:4)EGPSHGGLPGAS(UniMod:21)SEK_3: 100%|███████████████████████████████████████████████████████████| 54/54 [01:14<00:00, 1.38s/it]\n    [2022-09-30 13:21:48] INFO: Finished extracting targeted spectra!\n\nCached\n~~~~~~\n\n.. code:: bash\n\n    diapysef targeted-extraction --in data/raw/cached/20220928_171403_179508ef404e_1_1_ms1.mzML --coords peptides.pkl --readOptions cached --verbose 1 --mslevel [1] --mz_tol 20 --rt_window 40 --im_window 0.08\n    Found Bruker sdk. Access to the raw data is possible.\n\n    [2022-09-30 13:41:11] INFO: Loading data...\n    [2022-09-30 13:41:11] INFO: Reducing spectra using targeted coordinates...\n    INFO: Processing..YVC(UniMod:4)EGPSHGGLPGAS(UniMod:21)SEK_3: 100%|███████████████████████████| 54/54 [00:21<00:00, 2.57it/s]\n    [2022-09-30 13:41:32] INFO: Finished extracting targeted spectra!\n\n\n\nExporting reduced targeted mzML for easier data manipulation and plotting\n-------------------------------------------------------------------------\n\nWe can export the reduced mzML to a tsv file with m/z, retention time, ion mobility and intensity data as along tsv file\n\n.. code:: bash\n\n    $ diapysef export --help\n\n\n.. code:: bash\n\n    $ diapysef export --in targed_data_extraction.mzML --out extracted_data.tsv --mslevel [1,2] --verbose 10 --log_file export.log\n\n    Bruker sdk not found. Some functionalities that need access to raw data will not be available. To activate that functionality place libtimsdata.so (Linux) or timsdata.dll in the src folder. \n\n    [2022-09-07 12:09:34] INFO: Loading data...\n    100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5460/5460 [00:00<00:00, 6816.65it/s]\n    [2022-09-07 12:09:36] INFO: Finished exporting data!\n\n\nGenerating a report of RT and IM Heatmap plots\n----------------------------------------------\n\nWe can generate a 2D heatmap of the data using the report module. The current implementation is a quick plotting implementation in matplotlib. You could use other plotting tools libraries to make nice plots if you want, using the extracted_data.tsv file.\n\n.. code:: bash\n\n    $ diapysef report --help\n\n.. code:: bash\n\n    $ diapysef report --in extracted_data.tsv --out diapasef_report_rt_im.pdf \n\n    Bruker sdk not found. Some functionalities that need access to raw data will not be available. To activate that functionality place libtimsdata.so (Linux) or timsdata.dll in the src folder. \n\n    [2022-09-07 12:13:14] INFO: Generating a report of plots for a Retention Time and Ion Mobility Heatmaps...\n    INFO: Plotting..TELIS(UniMod:21)VSEVHPSR_3: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:02<00:00,  1.16it/s]\n    [2022-09-07 12:13:16] INFO: Finished generating report!\n\n.. image:: img/output_targeted_data_extraction_example.png\n\n\nData access and convenience functions\n=====================================\n\nThe rest of the tools are available as scripts but can also be used in a\nmore modular fashion from wihtin python directly. It can access raw\nfiles from both PASEF and DIA-PASEF runs and reads in some MaxQuant txt\nfiles. Since these functions do not acutally need acess to the raw data,\nthey can also be run without the sdk.\n\nObtaining a window layout file\n------------------------------\n\nThis can be done with a commandline tool:\n\n.. code:: bash\n\n    get_dia_windows.py 20180320_AnBr_SA_diaPASEF_200ng_HeLa_Rost_Method_4_a_01_A1_01_2143.d/ windows.csv\n\nOr in python:\n\n.. code:: python3\n\n    import diapysef as dp\n    \n    # Open connection to a DIA-PASEF run\n    dia = dp.TimsData(\"/media/max/D6E01AF3E01ADA17/code/dia-pasef/bruker/20180320_AnBr_SA_diaPASEF_200ng_HeLa_Rost_Method_4_a_01_A1_01_2143.d/\")\n    # Obtain the window layout from the first frames\n    win = dia.get_windows()\n    # Save as csv\n    win.to_csv(\"window_layout.csv\")\n    print(\"File Written\")\n\n\n.. parsed-literal::\n\n    File Written\n\n\nAnnotating ion mobilities\n-------------------------\n\nThis is useful to convert scan numbers which are corresponding to\ndifferent ion mobilities depending on the run to 1/K0 which is a more\nstandardized measure.\n\nThis is needed, for example, to generate a library for OpenSwath\ntargeted extraction. We can annotate Ion mobilities with 1/K0 values in\na maxquant output using the calibration information in the raw file.\n\n.. code:: bash\n\n    annotate_mq_ionmobility.py 20180309_HeLa_MQ_combined/ 20180309_TIMS1_Metab_AnBr_SA_200ng_HELA_Bremen13_14_A1_01_2129.d/ annotated1K0\n\nOr in python:\n\n.. code:: python3\n\n    import diapysef as dp\n    \n    #Open connection to the pasef data file\n    pas = dp.PasefData(\"/media/max/D6E01AF3E01ADA17/code/dia-pasef/bruker/20180309_TIMS1_Metab_AnBr_SA_200ng_HELA_Bremen13_14_A1_01_2129.d/\")\n    # Open connection to the Maxquant output from the same run\n    mq = dp.PasefMQData(\"/media/max/D6E01AF3E01ADA17/code/dia-pasef/bruker/20180309_HeLa_MQ_combined/\")\n    \n    ## Annotate all peptides\n    # Read in the allPeptides table from the output and annotate with 1/K0 using the calibration obtained from pas\n    mq.get_all_peptides()\n    mq.annotate_ion_mobility(pas)\n    #Or more directly\n    mq.get_all_peptides(pas)\n    # Save the table\n    all_pep = mq.all_peptides\n    all_pep.to_csv(\"all_peptides_1K0.csv\")\n    \n    ## Annotate evidence\n    # Read in the allPeptides table from the output and annotate with 1/K0 using the calibration obtained from pas\n    mq.get_evidence()\n    mq.annotate_ion_mobility(pas)\n    #Or more directly\n    mq.get_evidence(pas)\n    # Save the table\n    ev = mq.evidence\n    ev.to_csv(\"evidence_1K0.csv\")\n    \n\n\nPlotting window layouts\n-----------------------\n\nThe above operations let you obtain a precursor map (either with all MS1\nfeatures or with the peptide evidence) and a window layout. It is\ninformative to plot these together to get some insight into how well the\nwindows cover the precursor space.\n\nWe provide the following plotting function, as a commandline script\n\n.. code:: bash\n\n    plot_dia_windows.py window_layout.csv all_peptides_1K0.csv\n\nOr in python:\n\n.. code:: python3\n\n    import diapysef as dp\n    import pandas as pd\n    \n    dia = dp.TimsData(\"/media/max/D6E01AF3E01ADA17/code/dia-pasef/bruker/20180320_AnBr_SA_diaPASEF_200ng_HeLa_Rost_Method_4_a_01_A1_01_2143.d/\")\n    win = dia.get_windows()\n    # Diapysef saves a precursor layout from a Pasef run internally so it is possible to quickly plot windows without\n    # specifying a precursor map\n    dp.plot_window_layout(windows = win)\n    \n    # If the windows should be plotted against a certain precursor map (e.g. all_peptides obtained above) you can specify\n    # an additional dataframe\n    precursors = pd.read_csv(\"all_peptides_1K0.csv\")\n    \n    dp.plot_window_layout(windows = win, precursor_map = precursors)\n\n\n\n\n.. image:: img/output_7_0.png\n\n\n\n.. image:: img/output_7_1.png\n\nDocker image\n============\n\nThere is a docker image available on docker hub `singjust/modibik <https://hub.docker.com/r/singjust/mobidik>`_\n\n\n.. code:: bash\n\n    $ docker run -it --rm -v $PWD:/data/ singjust/mobidik:latest diapysef --help\n    Found Bruker sdk. Access to the raw data is possible. \n\n    Usage: diapysef [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\n    Mobi-DIK (Ion Mobility DIA Tool-Kit) is a package for analysis of DIA data\n    coupled to ion mobility.\n\n    Visit http://openswath.org/en/latest/docs/mobi-dik.html for usage\n    instructions and help\n\n    Options:\n    --version  Show the version and exit.\n    --help     Show this message and exit.\n\n    Commands:\n    converttdftomzml     Conversion program to convert a Bruker TIMS .d...\n    export               Export a reduced targeted mzML file to a tsv file\n    prepare-coordinates  Generate peptide coordinates for targeted...\n    report               Generate a report for a specfific type of plot\n    targeted-extraction  Extract from the raw data given a set of target...\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Roestlab/dia-pasef",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diapysef",
    "package_url": "https://pypi.org/project/diapysef/",
    "platform": null,
    "project_url": "https://pypi.org/project/diapysef/",
    "project_urls": {
      "Homepage": "https://github.com/Roestlab/dia-pasef"
    },
    "release_url": "https://pypi.org/project/diapysef/1.0.10/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Analysis, conversion and visualization of diaPASEF data.",
    "version": "1.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17501184,
  "releases": {
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34673dc7b2961c9f9c39a6e05a09b9d66a22a260e3681f65a704b8669226e5cf",
          "md5": "48c9bb68c372296a3be862b7664c48fb",
          "sha256": "3696bd9642e6e09074620dda9f9427011870917e283917888070f5e0e2d5ac0b"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48c9bb68c372296a3be862b7664c48fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 676422,
        "upload_time": "2019-06-12T20:53:36",
        "upload_time_iso_8601": "2019-06-12T20:53:36.740132Z",
        "url": "https://files.pythonhosted.org/packages/34/67/3dc7b2961c9f9c39a6e05a09b9d66a22a260e3681f65a704b8669226e5cf/diapysef-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38614fbe050f27fdce86ebdb35f444d8864b03e08efffc1b13c686585763da17",
          "md5": "d10cf3f7c37ed685e1cdf3ec02525149",
          "sha256": "2fde7e3931cd8d93948b7e72356c0c8872db6aa6085a945bb2e93e3e6e24362f"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d10cf3f7c37ed685e1cdf3ec02525149",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 672341,
        "upload_time": "2019-06-12T20:53:39",
        "upload_time_iso_8601": "2019-06-12T20:53:39.106937Z",
        "url": "https://files.pythonhosted.org/packages/38/61/4fbe050f27fdce86ebdb35f444d8864b03e08efffc1b13c686585763da17/diapysef-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "225f4144e36fc8337aaf3d712675bd7f390f564def070c828f109171c5693d3d",
          "md5": "8866a75fba8239fdf2a7c2efac7545ca",
          "sha256": "becffd8d2dbe8adea41473353f9ab38297d1ec5b6cc6f8f1477fbdfdb68344f9"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8866a75fba8239fdf2a7c2efac7545ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 679034,
        "upload_time": "2019-07-18T20:28:37",
        "upload_time_iso_8601": "2019-07-18T20:28:37.733154Z",
        "url": "https://files.pythonhosted.org/packages/22/5f/4144e36fc8337aaf3d712675bd7f390f564def070c828f109171c5693d3d/diapysef-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a97257af34b8b5fe345736a53f2ce463e377393f464234ac7d7132b5e89e1e00",
          "md5": "71316f437245551c63b4534c0d16c93d",
          "sha256": "5b588048aec83c14b87dc03848868c2115a5d9c856934c113ecf4cc1b7637720"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.5-py3.10.egg",
        "has_sig": false,
        "md5_digest": "71316f437245551c63b4534c0d16c93d",
        "packagetype": "bdist_egg",
        "python_version": "0.3.5",
        "requires_python": null,
        "size": 748873,
        "upload_time": "2022-11-30T06:37:55",
        "upload_time_iso_8601": "2022-11-30T06:37:55.291979Z",
        "url": "https://files.pythonhosted.org/packages/a9/72/57af34b8b5fe345736a53f2ce463e377393f464234ac7d7132b5e89e1e00/diapysef-0.3.5-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92ff6a2e91807f913df21fbb72a3ee1080b10cb4e0a36ee4f5ffefc2d7444c81",
          "md5": "7ecb62ab26ca09de2b4fe64f98794289",
          "sha256": "905db5042364d989ae7b736f34d768f1a2f49b955e3f079338ee82b4451ca39c"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.5-py3.9.egg",
        "has_sig": false,
        "md5_digest": "7ecb62ab26ca09de2b4fe64f98794289",
        "packagetype": "bdist_egg",
        "python_version": "0.3.5",
        "requires_python": null,
        "size": 755233,
        "upload_time": "2022-11-30T06:37:58",
        "upload_time_iso_8601": "2022-11-30T06:37:58.197562Z",
        "url": "https://files.pythonhosted.org/packages/92/ff/6a2e91807f913df21fbb72a3ee1080b10cb4e0a36ee4f5ffefc2d7444c81/diapysef-0.3.5-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "120c80a96e5cd0b1c89da0d364fc16fa40ec28834f84e69cfe19cb27a592f5dc",
          "md5": "a442bb27f9d3e9c076763a36556ef887",
          "sha256": "f5ebb03bebc0ab2338d59b1a3326dc7824bb6aac06360f1e559f8f4c27f2b21f"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a442bb27f9d3e9c076763a36556ef887",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 679389,
        "upload_time": "2020-01-10T19:17:55",
        "upload_time_iso_8601": "2020-01-10T19:17:55.810651Z",
        "url": "https://files.pythonhosted.org/packages/12/0c/80a96e5cd0b1c89da0d364fc16fa40ec28834f84e69cfe19cb27a592f5dc/diapysef-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "017107114bc9294369ae3ef2a2b64f9f436f8a14d84577ecfa9557657a8d5f5f",
          "md5": "f7edfea3e007030a671361d4ebfdebca",
          "sha256": "f7e02a8269ef94d9a0e924325043d081913fad2d48b8d9706b54fa2b92ea044b"
        },
        "downloads": -1,
        "filename": "diapysef-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f7edfea3e007030a671361d4ebfdebca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 674327,
        "upload_time": "2020-01-10T19:17:57",
        "upload_time_iso_8601": "2020-01-10T19:17:57.594169Z",
        "url": "https://files.pythonhosted.org/packages/01/71/07114bc9294369ae3ef2a2b64f9f436f8a14d84577ecfa9557657a8d5f5f/diapysef-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f3d8de36344ba67e78acfc947ddf807c45eb0e86bdc916cd25640f5c774131c",
          "md5": "26593e152d20e522d831362337273786",
          "sha256": "c9fd29913d0149551d0052062b6e156f90dd91d212a508d74325fa5edb54c10d"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26593e152d20e522d831362337273786",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 698636,
        "upload_time": "2022-11-09T21:44:03",
        "upload_time_iso_8601": "2022-11-09T21:44:03.452989Z",
        "url": "https://files.pythonhosted.org/packages/2f/3d/8de36344ba67e78acfc947ddf807c45eb0e86bdc916cd25640f5c774131c/diapysef-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d6de854db4b27915a40d43a3eaf4a2654bda800ed6e55a7e7bc7e328a821d6b",
          "md5": "885ed9ac9bc1133b95414e581d2b8420",
          "sha256": "66ec23c451f5d843b06ca15239bf5aa234c9461a8bdca1376031f2e7e7625efb"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "885ed9ac9bc1133b95414e581d2b8420",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 697055,
        "upload_time": "2022-11-09T21:44:06",
        "upload_time_iso_8601": "2022-11-09T21:44:06.239478Z",
        "url": "https://files.pythonhosted.org/packages/5d/6d/e854db4b27915a40d43a3eaf4a2654bda800ed6e55a7e7bc7e328a821d6b/diapysef-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e45b3f9bf6dc1277bb1fbdb53cece5dbe06af8e5cfa79f7c17563be085f0816",
          "md5": "8ab138722701186ed5b5f4611efd28c4",
          "sha256": "afdfbd55a8c7b33a35ec6b868e4e8edb40f6fd42f5de341ed6e8ae104792ee0d"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ab138722701186ed5b5f4611efd28c4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 721757,
        "upload_time": "2022-11-30T06:37:52",
        "upload_time_iso_8601": "2022-11-30T06:37:52.846940Z",
        "url": "https://files.pythonhosted.org/packages/7e/45/b3f9bf6dc1277bb1fbdb53cece5dbe06af8e5cfa79f7c17563be085f0816/diapysef-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c50b6d1ed6d1e4ecc36d7fdb3a041acd99e5cf800036c2a19b64cee6cebb6a",
          "md5": "4faffceb1414ab2db65bed488fd1fc11",
          "sha256": "54c9b318bd0e3df5ac29efc27ec6e959e8e9dd4f6bb9069ec3f82b52e11aaee1"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4faffceb1414ab2db65bed488fd1fc11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 714868,
        "upload_time": "2022-11-30T06:38:00",
        "upload_time_iso_8601": "2022-11-30T06:38:00.420013Z",
        "url": "https://files.pythonhosted.org/packages/45/c5/0b6d1ed6d1e4ecc36d7fdb3a041acd99e5cf800036c2a19b64cee6cebb6a/diapysef-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2660ad724832564f968473e4eafccd8088604df5062173b8a6eb53d943029d7",
          "md5": "29091018d19d70a38e5f543b974f13ae",
          "sha256": "9de7039c5d1338bdf3e70a648c8cf202e919f567e87b2579609f727e2c6fa0d4"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "29091018d19d70a38e5f543b974f13ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 710592,
        "upload_time": "2023-03-29T23:28:36",
        "upload_time_iso_8601": "2023-03-29T23:28:36.411967Z",
        "url": "https://files.pythonhosted.org/packages/b2/66/0ad724832564f968473e4eafccd8088604df5062173b8a6eb53d943029d7/diapysef-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7de86d7b8685ff6f6b65c2f3781dfcf4b1ee8dccc98277d96ecf301094245a5",
          "md5": "f632ee70f73d6b909c625d172d209b2d",
          "sha256": "af5df4ceb74587a6bef4d323b01bcc6d31d595fe415fcda83e3184a21de416db"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f632ee70f73d6b909c625d172d209b2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 697732,
        "upload_time": "2023-02-14T18:48:42",
        "upload_time_iso_8601": "2023-02-14T18:48:42.126015Z",
        "url": "https://files.pythonhosted.org/packages/f7/de/86d7b8685ff6f6b65c2f3781dfcf4b1ee8dccc98277d96ecf301094245a5/diapysef-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1157c59e0bbed1cabde9f2e61e667c0cdbc72bf5dfe46141dd2847f61b35fba",
          "md5": "d57501afd3ecac3a879015172eb817b2",
          "sha256": "fa6eaeb7ecf3f0fb627bb4fafee2f1237f70821a9b93c1e3ada3d53cdd599f6f"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d57501afd3ecac3a879015172eb817b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 703064,
        "upload_time": "2023-02-23T19:04:24",
        "upload_time_iso_8601": "2023-02-23T19:04:24.824165Z",
        "url": "https://files.pythonhosted.org/packages/e1/15/7c59e0bbed1cabde9f2e61e667c0cdbc72bf5dfe46141dd2847f61b35fba/diapysef-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddc882810cb76f44ea83aee74c585d743cf6f9d21f7cbcfef949477921449113",
          "md5": "da7028ab4994c9e140a8c833bb25c59f",
          "sha256": "373ddef4cfd83b30c9c9e345d0fff3b35362a63b0d8e83212dbf0828d708137d"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "da7028ab4994c9e140a8c833bb25c59f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 703459,
        "upload_time": "2023-02-23T19:11:16",
        "upload_time_iso_8601": "2023-02-23T19:11:16.312815Z",
        "url": "https://files.pythonhosted.org/packages/dd/c8/82810cb76f44ea83aee74c585d743cf6f9d21f7cbcfef949477921449113/diapysef-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a332c019318622142d6af621484baad748d9b4cca2488fac0465342b5048de7",
          "md5": "003dae3d3fe865ee203edd500c8b8552",
          "sha256": "52fb11720e400a61f52e3b0c1b72137e859fb644f7852802568413143eea03d7"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "003dae3d3fe865ee203edd500c8b8552",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 702890,
        "upload_time": "2023-03-01T16:51:12",
        "upload_time_iso_8601": "2023-03-01T16:51:12.783780Z",
        "url": "https://files.pythonhosted.org/packages/9a/33/2c019318622142d6af621484baad748d9b4cca2488fac0465342b5048de7/diapysef-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24d863387ada1bb69ccd71ca4b32304d836c3660dd694acd112dc9b4079aca37",
          "md5": "8e8afcb72c29db19562f11f388c31d88",
          "sha256": "436d08963439247bf8c1f707eda2b0e1f3135bc38d1c203bd06fdfe362c0d4f7"
        },
        "downloads": -1,
        "filename": "diapysef-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8e8afcb72c29db19562f11f388c31d88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 710611,
        "upload_time": "2023-03-29T23:16:46",
        "upload_time_iso_8601": "2023-03-29T23:16:46.791749Z",
        "url": "https://files.pythonhosted.org/packages/24/d8/63387ada1bb69ccd71ca4b32304d836c3660dd694acd112dc9b4079aca37/diapysef-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2660ad724832564f968473e4eafccd8088604df5062173b8a6eb53d943029d7",
        "md5": "29091018d19d70a38e5f543b974f13ae",
        "sha256": "9de7039c5d1338bdf3e70a648c8cf202e919f567e87b2579609f727e2c6fa0d4"
      },
      "downloads": -1,
      "filename": "diapysef-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "29091018d19d70a38e5f543b974f13ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 710592,
      "upload_time": "2023-03-29T23:28:36",
      "upload_time_iso_8601": "2023-03-29T23:28:36.411967Z",
      "url": "https://files.pythonhosted.org/packages/b2/66/0ad724832564f968473e4eafccd8088604df5062173b8a6eb53d943029d7/diapysef-1.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}