{
  "info": {
    "author": "Pascal Eberlein",
    "author_email": "pascal@eberlein.io",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# exceptionalpy\n## features\n- [X] exception handling decorator (ex / catch)\n- [X] timing decorator (ti / timeit)\n- [X] exception handling and timing decorator (exti / catch_timeit)\n\n- Handler\n  - [X] handle exceptions\n    - [X] print stacktrace\n    - [X] forward stacktrace to notifier\n  - [X] handle timing results of functions\n    - [ ] forward to notifier\n\n- BaseNotifier\n  - [X] provide interface for extensions\n  \n- HTTPNotifier\n  - [X] send stacktrace via POST to specified url\n  \n- SMTPNotifier\n  - [X] send stacktrace via Mail to specified email addresses\n\n- Rescuer\n  - [ ] Manager like interface for threads / processes\n  - [ ] Capture exceptions\n  \n## usage\n### basic\n\n```python\nimport time\nfrom exceptionalpy import catch, timeit, exceptionalpy_handler as handler\n\nhandler.verbose = True  # since you probably want to see your timing results\n\n\n@timeit()\ndef gotta_work_fast():\n  time.sleep(0.4)\n  \n  \n@catch()\ndef cant_fail():\n  raise ArithmeticError\n\n\ngotta_work_fast()  \n# gotta_work_fast completed in 400432710 ns | 400.43271 ms | 0.40043270999999997 s\ncant_fail()\n# prints stacktrace\nprint(\"I will still be printed.\")\nprint(\"Since the program will not exit even though an exception occurred.\")\n```\n\n### extensive guide\n```python\nimport time\nfrom exceptionalpy import ex, exceptionalpy_handler as handler\n\n# lets be verbose\nhandler.verbose = True\n# you can either just catch all exceptions with\nhandler.init()\n# and then stop again with\nhandler.deinit()\n\n\n# or you can decorate the functions of which you want the exceptions to be caught\n@ex()\ndef i_will_throw():\n  raise BaseException\n\n\n# there is also a timing decorator that catches the exception\nfrom exceptionalpy import exti\n\n\n@exti()\ndef i_take_a_moment_to_throw():\n  time.sleep(0.6)\n  print(\"Heyyyyy\")\n  raise ArithmeticError\n\n\n# if you still want to time your functions and \n# have the result be forwarded to the notifier\nfrom exceptionalpy import ti\n\n\n@ti()\ndef i_take_a_moment():\n  time.sleep(0.4)\n  print(\"Slow function here, hi\")\n  \n  \ni_take_a_moment()\n# upon successful execution, if you set the handlers verbose option to True,\n# you will see something like this\n# i_take_a_moment completed in 400432710 ns | 400.43271 ms | 0.40043270999999997 s\n# and that result will be jsonified and forwarded to the notifier\n\n# before any exceptions happen, you can also attach a notifier\nfrom exceptionalpy.HTTP import HTTPNotifier\n\nhandler.notifier = HTTPNotifier(\"https://my-server:1337/api/exceptional\", \"POST\")\n\n# or just use a completely different handler\nfrom exceptionalpy.SMTP import SMTPSHandler\n\nhandler = SMTPSHandler((\"127.0.0.1\", 25),  # which SMTP server to use\n                       \"exceptionalpy@locahost\",  # the sender address\n                       \"dev@localhost\",  # the receiver address\n                       \"There was an exception in your program\")  # the subject\n#  nothing bad will happen if you don't call\nhandler.deinit()\n# beforehand. you can do it, but it's a waste of cpu cycles.\n\ni_will_throw()\nprint(\"I will still be printed\")\ni_take_a_moment_to_throw()\nprint(\"I get printed as well since the program does not exit\")\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nbdy/exceptionalpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exceptionalpy",
    "package_url": "https://pypi.org/project/exceptionalpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/exceptionalpy/",
    "project_urls": {
      "Homepage": "https://github.com/nbdy/exceptionalpy"
    },
    "release_url": "https://pypi.org/project/exceptionalpy/0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "global exception handler with notification and timing features",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10455773,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c3affc48c2b30e60bbd236e4c91ef077d7332fa704a529a85494b671f85c622",
          "md5": "150218a14ac580f3f9878fab5f0e1c63",
          "sha256": "daeae87c752300b8d57b90a59784196a7bfb3b225d0e7833d28d6003ffb0c060"
        },
        "downloads": -1,
        "filename": "exceptionalpy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "150218a14ac580f3f9878fab5f0e1c63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3183,
        "upload_time": "2021-05-22T14:48:36",
        "upload_time_iso_8601": "2021-05-22T14:48:36.975135Z",
        "url": "https://files.pythonhosted.org/packages/8c/3a/ffc48c2b30e60bbd236e4c91ef077d7332fa704a529a85494b671f85c622/exceptionalpy-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdfc3f50ac3bbfad3440ee94a94bb3dadd7893530ddfa0390e92e8122c925054",
          "md5": "d361b50e3a2cdc9dbe129d99cbc38107",
          "sha256": "a2b5100ea63debb0383d0e6112c472eaabf022d67caa79b52daa534657b6931d"
        },
        "downloads": -1,
        "filename": "exceptionalpy-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d361b50e3a2cdc9dbe129d99cbc38107",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4252,
        "upload_time": "2021-05-24T13:23:14",
        "upload_time_iso_8601": "2021-05-24T13:23:14.774339Z",
        "url": "https://files.pythonhosted.org/packages/bd/fc/3f50ac3bbfad3440ee94a94bb3dadd7893530ddfa0390e92e8122c925054/exceptionalpy-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59dbe02dc09ff767897d3bc7390a5ba56df5fcdbc563486b477504115ae8b4d4",
          "md5": "5d599632b2da6c29fb03a2634f0d5b07",
          "sha256": "3fa691a450c60c65af5f3ec8edcc19e4afaa144d74a1858645fa1d5d416abe52"
        },
        "downloads": -1,
        "filename": "exceptionalpy-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5d599632b2da6c29fb03a2634f0d5b07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4898,
        "upload_time": "2021-05-24T13:56:25",
        "upload_time_iso_8601": "2021-05-24T13:56:25.282735Z",
        "url": "https://files.pythonhosted.org/packages/59/db/e02dc09ff767897d3bc7390a5ba56df5fcdbc563486b477504115ae8b4d4/exceptionalpy-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b833883afc56520d62af2a5f36cfa839de6557777fd0a14705347910fc1bb598",
          "md5": "c77b3e694ba1ed90f8e104db3f9955cd",
          "sha256": "9173dcda164b7ebbc521661677cb3edb0db80af0d1fc4f740b08cf6ac5a9c46d"
        },
        "downloads": -1,
        "filename": "exceptionalpy-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c77b3e694ba1ed90f8e104db3f9955cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5857,
        "upload_time": "2021-05-24T17:48:24",
        "upload_time_iso_8601": "2021-05-24T17:48:24.343225Z",
        "url": "https://files.pythonhosted.org/packages/b8/33/883afc56520d62af2a5f36cfa839de6557777fd0a14705347910fc1bb598/exceptionalpy-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b833883afc56520d62af2a5f36cfa839de6557777fd0a14705347910fc1bb598",
        "md5": "c77b3e694ba1ed90f8e104db3f9955cd",
        "sha256": "9173dcda164b7ebbc521661677cb3edb0db80af0d1fc4f740b08cf6ac5a9c46d"
      },
      "downloads": -1,
      "filename": "exceptionalpy-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c77b3e694ba1ed90f8e104db3f9955cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5857,
      "upload_time": "2021-05-24T17:48:24",
      "upload_time_iso_8601": "2021-05-24T17:48:24.343225Z",
      "url": "https://files.pythonhosted.org/packages/b8/33/883afc56520d62af2a5f36cfa839de6557777fd0a14705347910fc1bb598/exceptionalpy-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}