{
  "info": {
    "author": "Thomas Guillon, Michael Boulade, Laura Cohen, Lionel Figueroa, Jovana Krstevska , Sami Tazi",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/rte-france/relife/main/docs/_images/relife.png\n    :width: 80\n\nReLife\n======\n\nReLife is an open source Python library for asset management based on\nreliability theory and lifetime data analysis.\n\n- **Survival analysis**: non-parametric estimator (Kaplan-Meier), parametric\n  estimator (Maximum Likelihood) and regression models (Accelerated Failure Time\n  and Parametric Proportional Hazards) on left-truncated, right-censored and\n  left-censored lifetime data.\n- **Reliability theory**: optimal age of replacement for time-based mainteance\n  policy for one-cycle or infinite number of cycles, with exponential\n  discounting.\n- **Renewal theory**: expected number of events, expected total costs or\n  expected number of replacements for run-to-failures or age replacement\n  policies.\n\nInstallation\n------------\n\nFrom PyPI:\n\n.. code-block:: console\n\n    pip3 install relife\n\nDocumentation\n-------------\n\nThe official documentation is available at https://rte-france.github.io/relife/.\n\nCiting\n------\n\n.. code-block:: bibtex\n\n    @misc{relife,\n        author = {T. Guillon},\n        title = {ReLife: a Python package for asset management based on\n        reliability theory and lifetime data analysis.},\n        year = {2022},\n        journal = {GitHub},\n        howpublished = {\\url{https://github.com/rte-france/relife}},\n    }\n\nCredits\n-------\nIcon made by `Freepik <https://www.freepik.com>`_ from `Flaticon\n<https://www.flaticon.com>`_.\n\nGetting Started\n===============\n\nThe following example shows the steps to develop a preventive maintenance policy\nby age on circuit breakers:\n\n1. Perform a survival analysis on lifetime data,\n2. Compute the optimal age of replacement,\n3. Compute the expected total discounting costs and number of expected\n   replacements for the next years.\n\nSurvival analysis\n-----------------\n\nThe survival analysis is perfomed by computing the Kaplan-Meier estimator and fitting the\nparameters of a Weibull and a Gompertz distribution with the maximum likelihood\nestimator.\n\n.. code-block:: python\n\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from relife.datasets import load_circuit_breaker\n    from relife import KaplanMeier, Weibull, Gompertz, AgeReplacementPolicy\n\n    time, event, entry = load_circuit_breaker().astuple()\n    km = KaplanMeier().fit(time,event,entry)\n    weibull = Weibull().fit(time,event,entry)\n    gompertz = Gompertz().fit(time,event,entry)\n\nThe results of fitting the Weibull and Gompertz distributions are compared by\nlooking at the attributes :code:`weibull.result.AIC` and\n:code:`gompertz.result.AIC`. The Gompertz distribution gives the best fit and\nwill be chosen for the next step of the study. The code below plots the survival\nfunction obtained by the Kaplan-Meier estimator and the maximum likelihood\nestimator for the Weibull and Gompertz distributions.\n\n.. code-block:: python\n\n    km.plot()\n    weibull.plot()\n    gompertz.plot()\n    plt.xlabel('Age [year]')\n    plt.ylabel('Survival probability')\n\n.. figure:: https://raw.githubusercontent.com/rte-france/relife/main/docs/_images/survival-analysis.png\n\nOptimal age of replacement\n--------------------------\n\nWe consider 3 circuit breakers with the following parameters:\n\n- the current ages of the circuit breakers are a0 = [15, 20, 25] years,\n- the preventive costs of replacement are evaluated cp = 10 k€,\n- the failure costs (e.g. lost energy) are evaluated cf = [900, 500, 100] k€,\n- the discount rate is rate = 0.04.\n\n.. code-block:: python\n\n    a0 = np.array([15, 20, 25]).reshape(-1,1)\n    cp = 10\n    cf = np.array([900, 500, 100]).reshape(-1,1)\n    policy = AgeReplacementPolicy(gompertz, a0=a0, cf=cf, cp=cp, rate=0.04)\n    policy.fit()\n    policy.ar1, policy.ar\n\nWhere `ar1` are the time left until the first replacement, whereas `ar` is the\noptimal age of replacement for the next replacements:\n\n.. code-block:: console\n\n    (array([[10.06828465],\n            [11.5204334 ],\n            [22.58652687]]),\n     array([[20.91858994],\n            [25.54939328],\n            [41.60855399]]))\n\nThe optimal age of replacement minimizes the asymptotic expected equivalent annual\ncost. It represents the best compromise between replacement costs and the cost\nof the consequences of failure. \n\n.. code-block:: python\n\n    a = np.arange(1,100,0.1)\n    za = policy.asymptotic_expected_equivalent_annual_cost(a)\n    za_opt = policy.asymptotic_expected_equivalent_annual_cost()\n    plt.plot(a, za.T)\n    for i, ar in enumerate(policy.ar):\n        plt.scatter(ar, za_opt[i], c=f'C{i}',\n            label=f\" cf={cf[i,0]} k€, ar={ar[0]:0.1f} years\")\n    plt.xlabel('Age of preventive replacement [years]')\n    plt.ylabel('Asymptotic expected equivalent annual cost [k€]')\n    plt.legend()\n\n.. figure:: https://raw.githubusercontent.com/rte-france/relife/main/docs/_images/optimal-ages.png\n\nBudget and operations planning\n------------------------------\n\nFor budgeting, the expected total discounted costs for the 3 circuit breakers\nare computed and we can plot the total annual discounted costs for the next 30\nyears, including costs of failures and costs of preventive replacements.\n\n.. code-block:: python\n\n    dt = 0.5\n    step = int(1/dt)\n    t = np.arange(0, 30+dt, dt)\n    z = policy.expected_total_cost(t).sum(axis=0)\n    y = t[::step][1:]\n    q = np.diff(z[::step])\n    plt.bar(2020+y, q, align='edge', width=-0.8, alpha=0.8, color='C2')\n    plt.xlabel('Year')\n    plt.ylabel('Expected discounted annual cost in k€')\n\n.. figure:: https://raw.githubusercontent.com/rte-france/relife/main/docs/_images/annual-costs.png\n\nThen the total number of replacements are projected for the next 30 years.\nFailure replacements are counted separately in order to prevent and prepare the\nworkload of the maintenance teams.\n\n.. code-block::\n\n    mt = policy.expected_total_cost(t, cf=1, cp=1, rate=0).sum(axis=0)\n    mf = policy.expected_total_cost(t, cf=1, cp=0, rate=0).sum(axis=0)\n    qt = np.diff(mt[::step])\n    qf = np.diff(mf[::step])\n    plt.bar(y+2020, qt, align='edge', width=-0.8, alpha=0.8,\n        color='C1', label='all replacements')\n    plt.bar(y+2020, qf, align='edge', width=-0.8, alpha=0.8,\n        color='C0', label='failure replacements only')\n    plt.xlabel('Years')\n    plt.ylabel('Expected number of annual replacements')\n    plt.legend()\n\nThe figure shows the expected replacements for the very small sample of 3\ncircuit breakers. When the population of assets is large, the expected failure\nreplacements is a useful information to build up a stock of materials.\n\n.. figure:: https://raw.githubusercontent.com/rte-france/relife/main/docs/_images/replacements.png\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "relife",
    "package_url": "https://pypi.org/project/relife/",
    "platform": null,
    "project_url": "https://pypi.org/project/relife/",
    "project_urls": {
      "Documentation": "https://rte-france.github.io/relife/",
      "Home": "https://github.com/rte-france/relife"
    },
    "release_url": "https://pypi.org/project/relife/1.0.0/",
    "requires_dist": [
      "sphinx >= 4.4.0 ; extra == \"doc\"",
      "sphinx-book-theme >= 0.2.0 ; extra == \"doc\"",
      "pytest >=2.7.3 ; extra == \"test\"",
      "pytest-cov ; extra == \"test\""
    ],
    "requires_python": ">=3.7",
    "summary": "The relife package.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13115214,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29d7ff6abbd31bce084ca19323b6cfd05ea4cc7eccd5ec1d7e93e58f5ac43ae6",
          "md5": "36b5a419f0d2d3c1ef477b1b7e575633",
          "sha256": "9c346c8b0f3e745cad9555e0ab9dab090aa5f0f125b879e797c8f0838c5c009b"
        },
        "downloads": -1,
        "filename": "relife-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36b5a419f0d2d3c1ef477b1b7e575633",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 121921,
        "upload_time": "2022-03-08T15:54:04",
        "upload_time_iso_8601": "2022-03-08T15:54:04.623706Z",
        "url": "https://files.pythonhosted.org/packages/29/d7/ff6abbd31bce084ca19323b6cfd05ea4cc7eccd5ec1d7e93e58f5ac43ae6/relife-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1987831595296ba95d1db70147cbac48b55a990068c1008e39d68a0340395fef",
          "md5": "276fb48bfcd1faa01f3fea3bdcb07c76",
          "sha256": "e3b0b22dbffaa9e5dd8d0267b994899c2f2c7c6ba8aeb6d34c7d067273c0a4f1"
        },
        "downloads": -1,
        "filename": "relife-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "276fb48bfcd1faa01f3fea3bdcb07c76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 314662,
        "upload_time": "2022-03-08T15:54:06",
        "upload_time_iso_8601": "2022-03-08T15:54:06.755544Z",
        "url": "https://files.pythonhosted.org/packages/19/87/831595296ba95d1db70147cbac48b55a990068c1008e39d68a0340395fef/relife-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29d7ff6abbd31bce084ca19323b6cfd05ea4cc7eccd5ec1d7e93e58f5ac43ae6",
        "md5": "36b5a419f0d2d3c1ef477b1b7e575633",
        "sha256": "9c346c8b0f3e745cad9555e0ab9dab090aa5f0f125b879e797c8f0838c5c009b"
      },
      "downloads": -1,
      "filename": "relife-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36b5a419f0d2d3c1ef477b1b7e575633",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 121921,
      "upload_time": "2022-03-08T15:54:04",
      "upload_time_iso_8601": "2022-03-08T15:54:04.623706Z",
      "url": "https://files.pythonhosted.org/packages/29/d7/ff6abbd31bce084ca19323b6cfd05ea4cc7eccd5ec1d7e93e58f5ac43ae6/relife-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1987831595296ba95d1db70147cbac48b55a990068c1008e39d68a0340395fef",
        "md5": "276fb48bfcd1faa01f3fea3bdcb07c76",
        "sha256": "e3b0b22dbffaa9e5dd8d0267b994899c2f2c7c6ba8aeb6d34c7d067273c0a4f1"
      },
      "downloads": -1,
      "filename": "relife-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "276fb48bfcd1faa01f3fea3bdcb07c76",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 314662,
      "upload_time": "2022-03-08T15:54:06",
      "upload_time_iso_8601": "2022-03-08T15:54:06.755544Z",
      "url": "https://files.pythonhosted.org/packages/19/87/831595296ba95d1db70147cbac48b55a990068c1008e39d68a0340395fef/relife-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}