{
  "info": {
    "author": "Renzo Mischianti",
    "author_email": "Renzo Mischianti <renzo@mischianti.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": "ï»¿<div>\r\n<a href=\"https://www.mischianti.org/forums/forum/mischiantis-libraries/ebyte-lora-e32-uart-devices/\"><img\r\n  src=\"https://github.com/xreef/LoRa_E32_Series_Library/raw/master/resources/buttonSupportForumEnglish.png\" alt=\"Support forum EByte e32 English\"\r\n   align=\"right\"></a>\r\n</div>\r\n<div>\r\n<a href=\"https://www.mischianti.org/it/forums/forum/le-librerie-di-mischianti/ebyte-e32-dispositivi-lora-uart/\"><img\r\n  src=\"https://github.com/xreef/LoRa_E32_Series_Library/raw/master/resources/buttonSupportForumItaliano.png\" alt=\"Forum supporto EByte e32 italiano\"\r\n  align=\"right\"></a>\r\n</div>\r\n\r\n#\r\n#\r\n#\r\n\r\n# This is a porting of the Arduino library for EBYTE LoRa E32 devices to Micropython\r\n#\r\n\r\n#### A complete tutorial on my site www.mischianti.org\r\n\r\n1.  [LoRa E32 device for Arduino, esp32 or esp8266: settings and basic usage](https://www.mischianti.org/2019/10/15/lora-e32-device-for-arduino-esp32-or-esp8266-specs-and-basic-usage-part-1/)\r\n2.  [LoRa E32 device for Arduino, esp32 or esp8266: library](https://www.mischianti.org/2019/10/21/lora-e32-device-for-arduino-esp32-or-esp8266-library-part-2/)\r\n3.  [LoRa E32 device for Arduino, esp32 or esp8266: configuration](https://www.mischianti.org/2019/10/29/lora-e32-device-for-arduino-esp32-or-esp8266-configuration-part-3/)\r\n4.  [LoRa E32 device for Arduino, esp32 or esp8266: fixed transmission](https://www.mischianti.org/2019/11/10/lora-e32-device-for-arduino-esp32-or-esp8266-fixed-transmission-part-4/)\r\n5.  [LoRa E32 device for Arduino, esp32 or esp8266: power saving and sending structured data](https://www.mischianti.org/2019/12/03/lora-e32-device-for-arduino-esp32-or-esp8266-power-saving-and-sending-structured-data-part-5/)\r\n6.  [LoRa E32 device for Arduino, esp32 or esp8266: WOR (wake on radio) the microcontroller and Arduino shield](https://www.mischianti.org/2019/12/28/lora-e32-device-for-arduino-esp32-or-esp8266-wor-wake-on-radio-the-microcontroller-also-and-new-arduino-shield-part-6/)\r\n7.  [LoRa E32 device for Arduino, esp32 or esp8266: WOR (wake on radio) microcontroller and new WeMos D1 mini shield](https://www.mischianti.org/2020/01/17/lora-e32-device-for-arduino-esp32-or-esp8266-wor-wake-on-radio-microcontroller-and-new-wemos-d1-mini-shield-part-7/)\r\n\r\n### Changelog\r\n - 2023-03-21 0.0.1 Fully functional library\r\n\r\n### Library usage\r\nHere an example of constructor, you must pass the UART interface and (if you want, but It's reccomended)\r\nthe AUX pin, M0 and M1.\r\n\r\n#### Initialization\r\n\r\n```python\r\nfrom lora_e32 import LoRaE32\r\nfrom machine import UART\r\n\r\nuart2 = UART(2)\r\nlora = LoRaE32('433T20D', uart2, aux_pin=15, m0_pin=21, m1_pin=19)\r\n```\r\n#### Start the module transmission\r\n\r\n```python\r\ncode = lora.begin()\r\nprint(ResponseStatusCode.get_description(code))\r\n```\r\n\r\n#### Get Configuration\r\n\r\n```python\r\nfrom lora_e32 import LoRaE32, print_configuration, Configuration\r\nfrom lora_e32_operation_constant import ResponseStatusCode\r\n\r\ncode, configuration = lora.get_configuration()\r\n\r\nprint(ResponseStatusCode.get_description(code))\r\nprint_configuration(configuration)\r\n```\r\n\r\nThe result\r\n\r\n```\r\n----------------------------------------\r\nHEAD : 0b11000000 192\r\n\r\nAddH : 0\r\nAddL : 2\r\nChan : 23  ->  433\r\n\r\nSpeedParityBit    : 0b0  ->  8N1 (Default)\r\nSpeedUARTDatte : 0b11  ->  9600bps (default)\r\nSpeedAirDataRate  : 0b10  ->  2.4kbps (default)\r\nOptionTrans       : 0b1  ->  Fixed transmission (first three bytes can be used a\r\ns high/low address and channel)\r\nOptionPullup      : 0b1  ->  TXD, RXD, AUX are push-pulls/pull-ups (default)    \r\nOptionWakeup      : 0b0  ->  250ms (default)\r\nOptionFEC         : 0b1  ->  Turn on Forward Error Correction Switch (Default)\r\nOptionPower       : 0b0  ->  20dBm (Default)\r\n----------------------------------------\r\n```\r\n\r\n#### Set Configuration\r\n\r\n```python\r\nconfiguration_to_set = Configuration('433T20D')\r\nconfiguration_to_set.ADDL = 0x02\r\nconfiguration_to_set.OPTION.fixedTransmission = FixedTransmission.FIXED_TRANSMISSION\r\n\r\ncode, confSetted = lora.set_configuration(configuration_to_set)\r\n```\r\n\r\nThe configuration object has a lot of parameters.\r\n\r\n```python\r\nclass Configuration:\r\nclass Speed:\r\n    def __init__(self, model):\r\n        self.model = model\r\n\r\n        self.airDataRate = AirDataRate.AIR_DATA_RATE_010_24\r\n        self.uartBaudRate = UARTBaudRate.BPS_9600\r\n        self.uartParity = UARTParity.MODE_00_8N1\r\n\r\n\r\nclass Option:\r\n    def __init__(self, model):\r\n        self.model = model\r\n\r\n        self.transmissionPower = TransmissionPower(self.model).get_transmission_power().get_default_value()\r\n        self.fec = ForwardErrorCorrectionSwitch.FEC_1_ON\r\n        self.wirelessWakeupTime = WirelessWakeUpTime.WAKE_UP_250\r\n        self.ioDriveMode = IODriveMode.PUSH_PULLS_PULL_UPS\r\n        self.fixedTransmission = FixedTransmission.TRANSPARENT_TRANSMISSION\r\n\r\n\r\nclass Configuration:\r\n    def __init__(self, model):\r\n        self.HEAD = 0\r\n        self.ADDH = 0\r\n        self.ADDL = 0\r\n        self.SPED = Speed(model)\r\n        self.CHAN = 23\r\n        self.OPTION = Option(model)\r\n```\r\n\r\nI create a CONSTANTS class for each parameter, here a list:\r\nAirDataRate, UARTBaudRate, UARTParity, TransmissionPower, ForwardErrorCorrectionSwitch, WirelessWakeUpTime, IODriveMode, FixedTransmission\r\n\r\n#### Send string message\r\n\r\nHere an example of send data, you can pass a string \r\n```python\r\nlora.send_transparent_message('pippo')\r\n```\r\n\r\n```python\r\nlora.send_fixed_message(0, 2, 23, 'pippo')\r\n```\r\nHere the receiver code\r\n```python\r\nwhile True:\r\n    if lora.available() > 0:\r\n        code, value = lora.receive_message()\r\n        print(ResponseStatusCode.get_description(code))\r\n\r\n        print(value)\r\n        utime.sleep_ms(2000)\r\n```\r\n\r\nResult\r\n\r\n```\r\nSuccess!\r\npippo\r\n```\r\n\r\n#### Send dictionary message\r\n\r\nHere an example of send data, you can pass a dictionary\r\n```python\r\nlora.send_transparent_dict({'pippo': 'fixed', 'pippo2': 'fixed2'})\r\n```\r\n\r\n```python\r\nlora.send_fixed_dict(0, 0x01, 23, {'pippo': 'fixed', 'pippo2': 'fixed2'})\r\n```\r\n\r\nHere the receiver code\r\n```python\r\nwhile True:\r\n    if lora.available() > 0:\r\n        code, value = lora.receive_dict()\r\n        print(ResponseStatusCode.get_description(code))\r\n        print(value)\r\n        print(value['pippo'])\r\n        utime.sleep_ms(2000)\r\n```\r\n\r\nResult\r\n\r\n```\r\nSuccess!\r\n{'pippo': 'fixed', 'pippo2': 'fixed2'}\r\nfixed\r\n```\r\n\r\n### Wiring  \r\n\r\n#### Arduino UNO\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/LoRa_E32-TTL-100_Arduino_VD_PU_FullyConnected_bb-e1570517268668.jpg)\r\n\r\n#### Arduino MKR WiFi 1010\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/LoRa_E32-TTL-100_WemosD1_VD_PU_FullyConnected_bb-e1570517387323-768x560.jpg)\r\n\r\n#### ESP32 Dev Kit V1\r\n![](https://www.mischianti.org/wp-content/uploads/2020/08/Ebyte-LoRa-E22-device-esp32-dev-kit-v1-breadboard-full-connection.jpg)\r\n\r\n#### ESP8266 NodeMCU\r\n![](https://www.mischianti.org/wp-content/uploads/2021/12/Ebyte_LoRa_Exx_Arduino_MKR_WiFi_1010_Fully_connected_breadboard-720x624.jpg)\r\n\r\n\r\n# An Arduino UNO shield to simplify the use\r\nArduino UNO shield\r\n\r\n<img width=\"450px\" src=\"https://www.mischianti.org/wp-content/uploads/2019/12/ArduinoShieldMountedE32LoRa_min.jpg\" alt=\"\" class=\"wp-image-2155\"/>\r\n\r\nYou can order the PCB  [here](https://www.pcbway.com/project/shareproject/LoRa_E32_Series_device_Arduino_shield.html?from=mischianti05) \r\n\r\nInstruction and assembly video on 6 part of the guide\r\n\r\n# An WeMos D1 shield to simplify the use\r\nWeMos D1 shield\r\n<img width=\"450px\" src=\"https://www.mischianti.org/wp-content/uploads/2020/01/WeMosD1ShieldMountedE32LoRa_min.jpg\" alt=\"\" class=\"wp-image-2155\"/>\r\n\r\nYou can order the PCB  [here](https://www.pcbway.com/project/shareproject/LoRa_E32_Series_device_WeMos_D1_mini_shield_RF_8km_range.html?from=mischianti05) \r\n\r\n# An ESP32 shield to simplify the use\r\nESP32 shield\r\n<img width=\"450px\" src=\"https://www.mischianti.org/wp-content/uploads/2021/04/esp32-DOIT-DEV-KIT-v1-EByte-LoRa-E32-shield-main.jpg\" alt=\"\" class=\"wp-image-2155\"/>\r\n\r\nYou can order the PCB  [here](https://www.pcbway.com/project/shareproject/LoRa_ESP32_DEV_KIT_v1_shield_for_EByte_E32_E22__RF_8km_12km_range.html?from=mischianti05) \r\n\r\n\r\n\r\nInstruction and assembly video on 6 part of the guide\r\n\r\n\r\n\r\n# LoRa E32 (EBYTE LoRa SX1278/SX1276) series Library for Arduino, esp8266 and esp32-\r\n\r\nI create a library to manage EBYTE E32 series of LoRa device, very powerfull, simple and cheap device.\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/09/LoRa_E32-TTL-100.jpg)\r\n\r\nLoRa E32-TTL-100\r\n\r\nYou can find here [AliExpress (3Km device)](http://s.click.aliexpress.com/e/eOHotRkU) [AliExpress (8Km device)](http://s.click.aliexpress.com/e/qRuqOQQM)\r\n\r\nThey can work over a distance of 3000m to 8000m, and they have a lot of features and parameter.\r\n\r\nSo i create this library to simplify the usage.\r\n\r\nPlease refer to my article to get updated Schema\r\n\r\n### Library\r\n\r\nYou can find my library here.\r\n\r\nTo download.\r\n\r\nClick the DOWNLOADS button in the top right corner, rename the uncompressed folder LoRa_E32.\r\n\r\nCheck that the LoRa_E32 folder contains LoRa_E32.cpp and LoRa_E32.h.\r\n\r\nPlace the LoRa_E32 library folder your /libraries/ folder.\r\n\r\nYou may need to create the libraries subfolder if its your first library.\r\n\r\nRestart the IDE.\r\n\r\n#### Pinout\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/09/sx1278-sx1276-wireless-lora-uart-module-serial-3000m-arduino-433-rf-robotedu-1705-13-robotedu@101.jpg)\r\n\r\nE32 TTL 100\r\n\r\nYou can buy here [AliExpress](http://s.click.aliexpress.com/e/eOHotRkU)\r\n\r\n|Pin No.|Pin item|Pin direction|Pin application|\r\n|---|---|---|---|\r\n|1|M0|Inputï¼weak pull-upï¼|Work with M1 & decide the four operating modes.Floating is not allowed, can be ground.|\r\n|2|M1|Inputï¼weak pull-upï¼|Work with M0 & decide the four operating modes.Floating is not allowed, can be ground.|\r\n|3|RXD|Input|TTL UART inputs, connects to external (MCU, PC) TXD outputpin. Can be configured as open-drain or pull-up input.|\r\n|4|TXD|Output|TTL UART outputs, connects to external RXD (MCU, PC) inputpin. Can be configured as open-drain or push-pull output|\r\n|5|AUX|Output|To indicate moduleâs working status & wakes up the external MCU. During the procedure of self-check initialization, the pin outputs low level. Can be configured as open-drain output orpush-pull output (floating is allowed).|\r\n|6|VCC|Power supply 2.3V~5.5V DC|\r\n|7|GND|Ground|As you can see you can set various modes via M0 and M1 pins.|\r\n\r\n|**Mode**|**M1**|**M0**|**Explanation**|\r\n|---|---|---|---|\r\n|Normal|0|0|UART and wireless channel is good to go|\r\n|Wke-Up|0|1|Same as normal but a preamble code is added to transmitted data for waking-up the receiver.|\r\n|Power-Saving|1|0|UART is disable and wireless is on WOR(wake on radio) mode which means the device will turn on when there is data to be received. Transmission is not allowed.|\r\n|Sleep|1|1|Used in setting parameters. Transmitting and receiving disabled.|\r\n\r\nAs you can see there are some pins that can be use in a static way, but If you connect It to the library you gain in performance and you can control all mode via software, but we are going to explain better next.\r\n\r\n### Fully connected schema\r\n\r\nAs I already say Itâs not important to connect all pin to the output of microcontroller, you can put M0 and M1 pins to HIGH or LOW to get desidered configuration, and  **if you donât connect AUX the library set a reasonable delay to be sure that the operation is complete**.\r\n\r\n#### AUX pin\r\n\r\nWhen transmitting data can be used to wake up external MCU and return HIGH on data transfer finish.\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/e32auxPinOnTransmission-1024x269.jpg)\r\n\r\nLoRa E32 AUX Pin on transmission\r\n\r\nWhen receiving AUX going LOW and return HIGH when buffer is empty.\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/e32auxPinOnReception-1024x342.jpg)\r\n\r\nLoRa e32 AUX pin on reception\r\n\r\nItâs also used for self checking to restore normal operation (on power-on and sleep/program mode).\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/e32auxPinOnSelfCheck-1024x312.jpg)\r\n\r\nLoRa e32 AUX pin on self-check\r\n\r\nesp8266 connection schema is more simple because It work at the same voltage of logical communications (3.3v).\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/LoRa_E32-TTL-100_WemosD1_VD_PU_FullyConnected_bb-1024x746.jpg)\r\n\r\nLoRa E32 TTL 100 Wemos D1 fully connected\r\n\r\nItâs important to add pull-up resistor (4,7Kohm) to get good stability.\r\n\r\n|M0|D7|\r\n|---|---|\r\n|M1|D6|\r\n|RX|PIN D2 (PullUP 4,7KÎ©)|\r\n|TX|PIN D3 (PullUP 4,7KÎ©)|\r\n|AUX|D5 (Input)|VCC|\r\n|3.3v|GND|GND|\r\n\r\nArduino working voltage is 5v, so we need to add a voltage divider on RX pin M0 and M1 of LoRa module to prevent damage, you can get more information here  [Voltage divider: calculator and application](https://www.mischianti.org/2019/06/15/voltage-divider-calculator-and-application/).\r\n\r\nYou can use a 2Kohm resistor to GND and 1Kohm from signal than put together on RX.\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/LoRa_E32-TTL-100_Arduino_VD_PU_FullyConnected_bb-1024x692.jpg)\r\n\r\nLoRa E32 TTL 100 Arduino fully connected\r\n\r\n|M0|7 (Voltage divider)|\r\n|---|---|\r\n|M1|6 (Voltage divider)|\r\n|RX|PIN D2 (PullUP 4,7KÎ© & Voltage divider)|\r\n|TX|PIN D3 (PullUP 4,7KÎ©)|\r\n|AUX|5 (Input)|\r\n|VCC|3.3v|\r\n|GND|GND|\r\n\r\n#### Basic configuration option\r\n\r\n|ADDH|High address byte of module (the default 00H)|00H-FFH|\r\n|---|---|---|\r\n|ADDL|Low address byte of module (the default 00H)|00H-FFH|\r\n|SPED|Information about data rate parity bit and Air data rate|CHAN|\r\n\r\n|Communication channelï¼410M + CHAN*1Mï¼, default 17H (433MHz),  **valid only for 433MHz device**|00H-1FH|\r\n|---|---|\r\n\r\nOPTION\r\n\r\nType of transmission, pull-up settings, wake-up time, FEC, Transmission power\r\n\r\n#### SPED detail\r\n\r\nUART Parity bit:  _UART mode can be different between communication parties\r\n\r\n|7|6|UART parity bit|Const value|\r\n|---|---|---|---|---|\r\n|0|0|8N1 (default)|MODE_00_8N1|\r\n|0|1|8O1|MODE_01_8O1|\r\n|1|0|8 E1|MODE_10_8E1|\r\n|1|1|8N1 (equal to 00)|MODE_11_8N1|\r\n\r\nUART baud rate: UART baud rate can be different between communication parties, The UART baud rate has nothing to do with wireless transmission parameters & wonât affect the wireless transmit / receive features.\r\n\r\n|5|43|TTL UART baud rateï¼bpsï¼|Constant value|\r\n|---|---|---|---|\r\n|0|0|0|1200|UART_BPS_1200|\r\n|0|0|1|2400|UART_BPS_2400|\r\n|0|1|0|4800|UART_BPS_4800|\r\n|0|1|1|9600 (default)|UART_BPS_9600|\r\n|1|0|0|19200|UART_BPS_19200|\r\n|1|0|1|38400|UART_BPS_38400|\r\n|1|1|0|57600|UART_BPS_57600|\r\n|1|1|1|115200|UART_BPS_115200|\r\n\r\nAir data rate: The lower the air data rate, the longer the transmitting distance, better anti- interference performance and longer transmitting time, The air data rate must keep the same for both communication parties.\r\n\r\n|2|1|0|Air data rateï¼bpsï¼|Constant value|\r\n|---|---|---|---|---|\r\n|0|0|0|0.3k|AIR_DATA_RATE_000_03|\r\n|0|0|1|1.2k|AIR_DATA_RATE_001_12|\r\n|0|1|0|2.4k (default)|AIR_DATA_RATE_010_24|\r\n|0|1|1|4.8k|AIR_DATA_RATE_011_48|\r\n|1|0|0|9.6k|AIR_DATA_RATE_100_96|\r\n|1|0|1|19.2k|AIR_DATA_RATE_101_192|\r\n|1|1|0|19.2k (same to 101)|AIR_DATA_RATE_110_192|\r\n|1|1|1|19.2k (same to 101)|AIR_DATA_RATE_111_192|\r\n\r\n#### OPTION detail\r\n\r\nTransmission mode: in fixed transmission mode, the first three bytes of each userâs data frame can be used as high/low address and channel. The module changes its address and channel when transmit. And it will revert to original setting after complete the process.\r\n\r\n|7|Fixed transmission enabling bitï¼similar to MODBUSï¼|Constant value|\r\n|---|---|---|\r\n|0|Transparent transmission mode|FT_TRANSPARENT_TRANSMISSION|\r\n|1|Fixed transmission mode|FT_FIXED_TRANSMISSION|\r\n\r\nIO drive mode: this bit is used to the module internal pull- up resistor. It also increases the levelâs adaptability in case of open drain. But in some cases, it may need external pull-up  \r\nresistor.\r\n\r\n|6|IO drive mode ( default 1)|Constant value|\r\n|---|---|---|\r\n|1|TXD and AUX push-pull outputs, RXD pull-up inputs|IO_D_MODE_PUSH_PULLS_PULL_UPS|\r\n|0|TXDãAUX open-collector outputs, RXD open-collector inputs|IO_D_MODE_OPEN_COLLECTOR|\r\n\r\nWireless wake-up time: the transmit & receive module work in mode 0, whose delay time is invalid & can be arbitrary value, The transmitter works in mode 1 can transmit the preamble code of the corresponding time continuously, when the receiver works in mode 2, the time means the monitor interval time (wireless wake-up). Only the data from transmitter that works in mode 1 can be  \r\nreceived.\r\n\r\n|5|4|3|wireless wake-up time|Constant value|\r\n|---|---|---|---|---|\r\n|0|0|0|250ms (default)|WAKE_UP_250|\r\n|0|0|1|500ms|WAKE_UP_500|\r\n|0|1|0|750ms|WAKE_UP_750|\r\n|0|1|1|1000ms|WAKE_UP_1000|\r\n|1|0|0|1250ms|WAKE_UP_1250|\r\n|1|0|1|1500ms|WAKE_UP_1500|\r\n|1|1|0|1750ms|WAKE_UP_1750|\r\n|1|1|1|2000ms|WAKE_UP_2000|\r\n\r\nFEC: after turn off FEC, the actual data transmission rate increases while anti- interference ability decreases. Also the transmission distance is relatively short, both communication parties must keep on the same pages about turn-on or turn-off FEC.\r\n\r\n|2|FEC switch|Constant value|\r\n|---|---|---|\r\n|0|Turn off FEC|FEC_0_OFF|\r\n|1|Turn on FEC (default)|FEC_1_ON|\r\n\r\nTransmission power\r\n\r\nYou can change this set of constant by apply a define like so:\r\n\r\nApplicable for  **E32-TTL-100, E32-TTL-100S1, E32-T100S2.**  \r\nThe external power must make sure the ability of current output more than 250mA and ensure the power supply ripple within 100mV.  \r\nLow power transmission is not recommended due to its low power supply  \r\nefficiency.\r\n\r\n\r\n|1|0|Transmission power (approximation)|Constant value|\r\n|---|---|---|---|\r\n|0|0|20dBm (default)|POWER_20|\r\n|0|1|17dBm|POWER_17|\r\n|1|0|14dBm|POWER_14|\r\n|1|1|10dBm|POWER_10|\r\n\r\nApplicable for E32-TTL-500ã  \r\nThe external power must make sure the ability of current output more than 700mA and ensure the power supply ripple within 100mV.  \r\nLow power transmission is not recommended due to its low power supply efficiency.\r\n\r\n|1|0|Transmission power (approximation)|Constant value|\r\n|---|---|---|---|\r\n|0|0|27dBm (default)|POWER_27|\r\n|0|1|24dBm|POWER_24|\r\n|1|0|21dBm|POWER_21|\r\n|1|1|18dBm|POWER_18|\r\n\r\nApplicable for E32-TTL-1W, E32 (433T30S), E32 (868T30S), E32 (915T30S)  \r\nThe external power must make sure the ability of current output more than 1A and ensure the power supply ripple within 100mV.  \r\nLow power transmission is not recommended due to its low power supply  \r\nefficiency.\r\n\r\n|1|0|Transmission power (approximation)|Constant value|\r\n|---|---|---|---|\r\n|0|0|30dBm (default)|POWER_30|\r\n|0|1|27dBm|POWER_27|\r\n|1|0|24dBm|POWER_24|\r\n|1|1|21dBm|POWER_21|\r\n\r\nYou can configure Channel frequency olso with this define:\r\n\r\n\r\n\r\n#### Normal transmission mode\r\n\r\nNormal/Transparent transmission mode is used to send messages to all device with same address and channel.\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/LoRa_E32_transmittingScenarios.jpg)\r\n\r\nLoRa E32 transmitting scenarios, lines are channels\r\n\r\n\r\n#### Fixed mode instead of normal mode\r\n\r\nAt same manner I create a set of method to use with fixed transmission\r\n\r\n#### Fixed transmission\r\n\r\n**You need to change only the sending method, because the destination device donât receive the preamble with Address and Channel.**\r\n\r\n\r\nFixed transmission have more scenarios\r\n\r\n![](https://www.mischianti.org/wp-content/uploads/2019/10/LoRa_E32_transmittingScenarios.jpg)\r\n\r\n\r\n## Thanks\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xreef/EByte_LoRa_E32_micropython_library",
    "keywords": "lora,e32,ebyte,llcc68,micropython,esp32,esp8266,arduino,pico,stm32,SAMD,UART,EByte",
    "license": "The MIT License (MIT)  Copyright (c) 2017 Renzo Mischianti www.mischianti.org All right reserved.  You may copy, alter and reuse this code in any way you like, but please leave reference to www.mischianti.org in your comments if you redistribute this code.  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "Renzo Mischianti",
    "maintainer_email": "Renzo Mischianti <renzo@mischianti.org>",
    "name": "ebyte-lora-e32",
    "package_url": "https://pypi.org/project/ebyte-lora-e32/",
    "platform": null,
    "project_url": "https://pypi.org/project/ebyte-lora-e32/",
    "project_urls": {
      "Bug Tracker": "https://github.com/xreef/EByte_LoRa_E32_micropython_library/issues",
      "Documentation": "https://www.mischianti.org/category/my-libraries/lora-e32-devices/",
      "Documentazione": "https://www.mischianti.org/it/category/le-mie-librerie/dispositivi-lora-e32/",
      "Examples": "https://github.com/xreef/EByte_LoRa_E32_micropython_library/tree/main/examples",
      "Homepage": "https://github.com/xreef/EByte_LoRa_E32_micropython_library",
      "Repository": "https://github.com/xreef/EByte_LoRa_E32_micropython_library",
      "homepage": "https://www.mischianti.org"
    },
    "release_url": "https://pypi.org/project/ebyte-lora-e32/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Ebyte E32 LoRa micropython library device very cheap and very long range (from 3Km to 8Km). Arduino LoRa EBYTE E32 device library complete and tested with Arduino, esp8266, esp32, STM32 and Raspberry Pi Pico. sx1278/sx1276.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17523982,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5949a0da13900b6f6f46779b6dd7ed62c1dd302811924b5a80b7fe672579921",
          "md5": "6a25d7516dc5c8d8e73d0cb5cd1e3ca1",
          "sha256": "b0a01a561065d590c2c065c43cad39125f831b3d54aeabd4960e635acc58218a"
        },
        "downloads": -1,
        "filename": "ebyte_lora_e32-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a25d7516dc5c8d8e73d0cb5cd1e3ca1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18362,
        "upload_time": "2023-03-31T08:53:25",
        "upload_time_iso_8601": "2023-03-31T08:53:25.250836Z",
        "url": "https://files.pythonhosted.org/packages/e5/94/9a0da13900b6f6f46779b6dd7ed62c1dd302811924b5a80b7fe672579921/ebyte_lora_e32-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1837abbe9f959c3b60d5538cba49620fc46575154e8d6e45bd858505fb873c86",
          "md5": "c01bdc966ab1a6a41b2e549186570a2f",
          "sha256": "976c03457d1b083b3a275b6ab1049ddb0937e2249f1a35969d8758577d7b97d0"
        },
        "downloads": -1,
        "filename": "ebyte-lora-e32-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c01bdc966ab1a6a41b2e549186570a2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23324,
        "upload_time": "2023-03-31T08:53:26",
        "upload_time_iso_8601": "2023-03-31T08:53:26.919752Z",
        "url": "https://files.pythonhosted.org/packages/18/37/abbe9f959c3b60d5538cba49620fc46575154e8d6e45bd858505fb873c86/ebyte-lora-e32-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5949a0da13900b6f6f46779b6dd7ed62c1dd302811924b5a80b7fe672579921",
        "md5": "6a25d7516dc5c8d8e73d0cb5cd1e3ca1",
        "sha256": "b0a01a561065d590c2c065c43cad39125f831b3d54aeabd4960e635acc58218a"
      },
      "downloads": -1,
      "filename": "ebyte_lora_e32-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a25d7516dc5c8d8e73d0cb5cd1e3ca1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18362,
      "upload_time": "2023-03-31T08:53:25",
      "upload_time_iso_8601": "2023-03-31T08:53:25.250836Z",
      "url": "https://files.pythonhosted.org/packages/e5/94/9a0da13900b6f6f46779b6dd7ed62c1dd302811924b5a80b7fe672579921/ebyte_lora_e32-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1837abbe9f959c3b60d5538cba49620fc46575154e8d6e45bd858505fb873c86",
        "md5": "c01bdc966ab1a6a41b2e549186570a2f",
        "sha256": "976c03457d1b083b3a275b6ab1049ddb0937e2249f1a35969d8758577d7b97d0"
      },
      "downloads": -1,
      "filename": "ebyte-lora-e32-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c01bdc966ab1a6a41b2e549186570a2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 23324,
      "upload_time": "2023-03-31T08:53:26",
      "upload_time_iso_8601": "2023-03-31T08:53:26.919752Z",
      "url": "https://files.pythonhosted.org/packages/18/37/abbe9f959c3b60d5538cba49620fc46575154e8d6e45bd858505fb873c86/ebyte-lora-e32-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}