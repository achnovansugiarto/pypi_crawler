{
  "info": {
    "author": "13564768842",
    "author_email": "chinabluexfw@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# hehey-hcontainer\n\n#### 介绍\nhehey-hcontainer 是一个python di 容器,提供依赖注入等等功能\n\n#### 依赖以及版本要求\n- python >= 3.5\n\n#### 安装\n- 直接下载:\n```\n\n```\n- 命令安装：\n```\npip install hehey-hcontainer\n```\n#### 基础文件以目录\n\n\n#### 参数配置\n```python\nfrom hcontainer.base.Definition import Definition\nbeanConf = {\n    'class':'site.service.User.User', # 类路径\n    '_single': True, # 是否单例,默认是单例,\n    '_scope': 'app', # 对象作用域, app应用作用域，request 请求作用域\n    '_init': 'init', # 初始化方法, 对象创建后调用设置的方法(设置属性完成后调用)\n    '_args': [], # or True 构造方法参数，支持索引，关联数组\n    '_attr': [], # 类其他属性，直接注入\n    'attr1':'属性1',\n    'attr2':'属性2',\n    'attrBean':'<func::bean>',# 属性调用函数, 自动调用func函数(bean) 获取属性值,\n    'addresstBean':'<ref::address|天收你>',# 属性对应另一个bean(user),| 之后为bean 的参数\n    'attr3':Definition({\n        '_ref':'user' # attr3 为另一个bean为user的对象\n    })\n}\n\n\n```\n#### 基本示例\n- 快速使用\n```python\nfrom hcontainer.bean import BeanManager\ncomponents = {\n        # 构造器注入\n        'user':{\n            'clazz': 'site.service.User.User',\n            '_args':[\n                'hehe 小酌一杯'\n            ],\n        },\n\n        # 属性注入\n        'address':{\n            'clazz':'site.service.Address.Address',\n            'realName':'hehe',\n            'user':'<ref::user>'\n        },\n\n}\n\nbeanManager = BeanManager.make(components);\n\n# 获取bean 实例\nuser = beanManager.getBean('user')\naddress = beanManager.getBean('address')\n\n```\n\n- 属性注入\n```python\nfrom hcontainer.bean import BeanManager\nclass User:\n\n    def __init__(self,**attrs):\n    \n        self.username = ''\n        \n        if attrs:\n            #设置属性\n            pass\n            \n        return ;\n\n    def getUsername(self):\n\n        return self.username\n        \ncomponents = {\n    # 构造器注入\n    'user':{\n        'clazz': 'site.service.User.User',\n        'username':'hehe',\n    },\n}\n\n\n\nbeanManager = BeanManager.make(components);\nuser = beanManager.getBean('user')\n\n\n```\n\n- 构造参数注入\n```python\n\n# 示例1\nclass User:\n\n    def __init__(self,**attrs):\n    \n        self.username = ''\n        \n        if attrs:\n            #设置属性\n            pass\n        \n        self._init();\n        return ;\n    \n    def _init(self):\n        # 初始化操作\n        return;\n\n    def getUsername(self):\n\n        return self.username\n\n# 此配置针对构造参数只有**attrs \ncomponents = {\n    # 构造器注入\n    'user':{\n        'clazz': 'site.service.User.User',\n         '_args':True,\n        'username':'hehe',\n    },\n}\n\n# 示例2\nclass Address:\n\n    def __init__(self,address='',city = ''):\n        self.addr = address\n        self.city = city\n        self._user = None;\n\n    @property\n    def user(self):\n        return self._user\n\ncomponents = {\n    # 构造器注入\n    'user':{\n        'clazz': 'site.service.User.User',\n        '_args':[\n            '我的收货详细地址',\n            '上海'\n        ],\n    },\n}\n\n```\n\n- bean 属性值为另一bean \n```python\n\nfrom hcontainer.bean import BeanManager\n\nclass User:\n    \n    def __init__(self):\n    \n        self.username = ''\n        self.address = None;\n        return ;\n    \n    def getAddress(self):\n\n        return self.address\n\nclass Address:\n    def __init__(self,address='',city = ''):\n        self.addr = address\n        self.city = city\n\n    def getAddr(self):\n        return self.addr\n\ncomponents = {\n        'user':{\n            'clazz': 'site.service.User.User',\n            'username':\"hehe 小酌一杯\",\n            'address':'<ref::address>'\n        },\n\n        # 属性注入\n        'address':{\n            'clazz':'site.service.Address.Address',\n            'address':'深圳',\n            'city':'上海',\n        }\n}\n\nbeanManager = BeanManager.make(components);\nuser = beanManager.getBean('user')\naddress = user.getAddress()\naddress.getAddr()\n\n\n```\n\n- 初始化方法(对象创建后,自动调用指定的方法)\n```python\nclass User:\n\n    def __init__(self,**attrs):\n    \n        self.username = ''\n        \n        if attrs:\n            #设置属性\n            pass\n        \n        self._init();\n        return ;\n    \n    def _init(self):\n        # 初始化操作\n        print(\"初始化对象自动调用此方法!\")\n        return;\n\n    def getUsername(self):\n\n        return self.username\n\ncomponents = {\n    # 构造器注入\n    'user':{\n        'clazz': 'site.service.User.User',\n        '_init':\"_init\",\n        'username':'hehe',\n    },\n}\n\n\n```\n\n- 装饰器注解(id,ref)类为bean 对象\n```python\nfrom hcontainer.bean import BeanManager\nfrom hcontainer import bean\n\n@bean.id(\"addrbean\")\nclass Address:\n\n    def __init__(self,address=''):\n        self.addr = address\n\n    def getAddr(self):\n        return self.addr\n\n@bean.id(\"userbean\")\nclass User:\n\n    def __init__(self,username = 'nnnn'):\n        self.username = username\n        self.__address = None;\n    \n    @property\n    @bean.ref('addrbean',name='__address')\n    def address(self):\n        return self.__address    \n\n    def getName(self):\n\n        return self.username\n\nbeanManager = BeanManager.make();\nuser = beanManager.getBean('user')\n\n```\n\n- 创建新的bean 实例\n```python\nfrom hcontainer.bean import BeanManager\ncomponents = {\n    # 构造器注入\n    'user':{\n        'clazz': 'site.service.User.User',\n        '_init':\"_init\",\n        'username':'hehe',\n    },\n}\n\nbeanManager = BeanManager.make(components);\n# 新对象,非单例\nuser = beanManager.makeBean('user')\n\n```\n- 根据类路径创建bean 对象\n```python\nfrom hcontainer.bean import BeanManager\nbeanManager = BeanManager.make();\nuser = beanManager.getBean('site.service.User.User')\n\n```\n\n- bean 作用域\n```python\n\n\n```\n\n- 创建bean容器\n```python\nfrom hcontainer.bean import BeanManager\nbeanManager = BeanManager.make();\nrequestContainer = beanManager.makeContainer('request')\nsessionContainer = beanManager.makeContainer('session')\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/chinahehe/hehey-hcontainer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hehey-hcontainer",
    "package_url": "https://pypi.org/project/hehey-hcontainer/",
    "platform": "",
    "project_url": "https://pypi.org/project/hehey-hcontainer/",
    "project_urls": {
      "Homepage": "https://gitee.com/chinahehe/hehey-hcontainer"
    },
    "release_url": "https://pypi.org/project/hehey-hcontainer/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "hehey-hcontainer 是一个python di 容器,提供依赖注入等等功能",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6201430,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fac7c16c38fd7930846a3c9c065d76cd68c5c6bfadc5b7a33d2ef1c543e5136",
          "md5": "36939afaf9f8c770abc60ec9b0d55f3c",
          "sha256": "3962d694e5061ba41d729dd734d2e07a06fac40fd49e330be48607df33832f18"
        },
        "downloads": -1,
        "filename": "hehey-hcontainer-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36939afaf9f8c770abc60ec9b0d55f3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19377,
        "upload_time": "2019-11-26T08:23:26",
        "upload_time_iso_8601": "2019-11-26T08:23:26.882430Z",
        "url": "https://files.pythonhosted.org/packages/3f/ac/7c16c38fd7930846a3c9c065d76cd68c5c6bfadc5b7a33d2ef1c543e5136/hehey-hcontainer-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "794a232a6dbfde598c250b2c38fe5675322862a755875290cd5cac17e7028315",
          "md5": "d7dfb82704060327371b60052a8bed22",
          "sha256": "690b4c292f0ea2862c95f81061bc9d8aecda568cadc31bb63d8ba1a7b2a8a043"
        },
        "downloads": -1,
        "filename": "hehey-hcontainer-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d7dfb82704060327371b60052a8bed22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14173,
        "upload_time": "2019-11-26T14:10:21",
        "upload_time_iso_8601": "2019-11-26T14:10:21.949033Z",
        "url": "https://files.pythonhosted.org/packages/79/4a/232a6dbfde598c250b2c38fe5675322862a755875290cd5cac17e7028315/hehey-hcontainer-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "794a232a6dbfde598c250b2c38fe5675322862a755875290cd5cac17e7028315",
        "md5": "d7dfb82704060327371b60052a8bed22",
        "sha256": "690b4c292f0ea2862c95f81061bc9d8aecda568cadc31bb63d8ba1a7b2a8a043"
      },
      "downloads": -1,
      "filename": "hehey-hcontainer-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d7dfb82704060327371b60052a8bed22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14173,
      "upload_time": "2019-11-26T14:10:21",
      "upload_time_iso_8601": "2019-11-26T14:10:21.949033Z",
      "url": "https://files.pythonhosted.org/packages/79/4a/232a6dbfde598c250b2c38fe5675322862a755875290cd5cac17e7028315/hehey-hcontainer-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}