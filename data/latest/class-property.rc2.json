{
  "info": {
    "author": "Justin Engel",
    "author_email": "jtengel08@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "==============\nclass property\n==============\n\nInstall\n=======\n\n.. code-block:: bash\n\n    pip install class_property\n\n\nUtilities\n=========\n\n  * class_value - Hold a single value for a class and all instances.\n  * class_property - Like a property, but works on `MyClass.class_prop = value`\n  * metaclass - Create a metaclass that looks for class_value and class_property to register them.\n  * decorate - Decorate a class to register any class_value and class_property.\n\n**A class must use the metaclass or decorate functions.** Subclasses do not need to use decorate or metaclass.\nThe metaclass is how the class object works with the descriptor.\n\n\nRun\n===\n\nClass value usage.\n\nExample:\n\n.. code-block :: python\n\n    from class_property import class_value\n\n    # doesn't matter if class_value.decorate, class_property.decorate, or decorate (same with metaclass)\n    class MyClass(object, metaclass=class_value.metaclass()):\n        value = class_value(1)\n\n    mc = MyClass()\n    assert mc.value == 1\n    assert MyClass.value == 1\n\n    MyClass.value = 3\n    assert mc.value == 3\n    assert MyClass.value == 3\n\n    mc.value = 2\n    assert mc.value == 2\n    assert MyClass.value == 2\n\n\n    class SubClass(MyClass):\n        hello = class_value(\"World\")\n\n    sub = SubClass()\n    SubClass.hello = 'name'\n    assert sub.hello == 'name'\n    assert SubClass.hello == 'name'\n\n    sub.hello = 'John Doe'\n    assert sub.hello == 'John Doe'\n    assert SubClass.hello == 'John Doe'\n\n    sub.value = 7\n    assert SubClass.value == 7\n    assert sub.value == 7\n    assert mc.value == 7\n    assert MyClass.value == 7\n\n\nClass property usage.\n\nExample:\n\n.. code-block :: python\n\n    from class_property import class_value, class_property, decorate, metaclass\n\n    global GLOB\n    GLOB = 'Hello'\n\n    def get_glob():\n        \"\"\"Return the global GLOB value\"\"\"\n        global GLOB\n        return GLOB\n\n    def set_glob(value):\n        global GLOB\n        GLOB = value\n\n    # doesn't matter if class_value.decorate, class_property.decorate, or decorate (same with metaclass)\n    @decorate\n    class MyClass(object):\n        _VALUE = None\n\n        @class_property\n        def value(self):\n            return MyClass._VALUE\n\n        @value.setter\n        def value(self, value):\n            MyClass._VALUE = value\n\n        # Also works with no arguments\n        @class_property\n        def value2():\n            return MyClass._VALUE\n\n        @value2.setter\n        def value2(value):\n            MyClass._VALUE = value\n\n        glob = class_property(get_glob, set_glob)\n\n    mc = MyClass()\n    assert mc.value is None\n    assert MyClass.value is None\n    MyClass.value = 3\n    assert mc.value == 3\n    assert MyClass.value == 3\n    mc.value = 2\n    assert mc.value == 2\n    assert MyClass.value == 2\n\n    assert mc.value2 == 2\n    assert MyClass.value2 == 2\n    mc.value2 = 5\n    assert mc.value == 5\n    assert MyClass.value == 5\n    assert mc.value2 == 5\n    assert MyClass.value2 == 5\n\n    assert MyClass.glob == 'Hello'\n    assert mc.glob == 'Hello'\n    MyClass.glob = 'Jack'\n    assert MyClass.glob == 'Jack'\n    assert mc.glob == 'Jack'\n    mc.glob = 'Jill'\n    assert MyClass.glob == 'Jill'\n    assert mc.glob == 'Jill'\n\n\n    class SubClass(MyClass):\n        pass\n\n    sub = SubClass()\n    sub.glob = 'John'\n    assert SubClass.glob == 'John'\n    assert sub.glob == 'John'\n    assert MyClass.glob == 'John'\n    assert mc.glob == 'John'\n\n\nInheritance\n===========\n\nAfter using `decorate` or `metaclass` to create the class using a metaclass `class_value` and `class_property` work as expected.\nWhen you inherit from a `class_property` class new `class_value` and `class_property` attributes work as expected as well.\nIf you try to override a `class_value` or `class_property` things get complicated.\n\nIf you just want to change from `class_value` to a `class_property` set a new variable like normal.\nThis will override the parent class attribute as well.\n\nExample:\n\n.. code-block:: python\n\n    from class_property import class_value, class_property\n\n\n    class MyClass(object, metaclass=class_value.metaclass()):\n        value = class_value(1)\n\n\n    class SubClass(MyClass):\n        _VALUE = 2\n\n        # This replaces \"MyClass.value\". class_value/class_property uses the metaclass, so we have to replace.\n        # We can only change to a new object if we change the metaclass.\n        @class_property\n        def value(self):\n            return SubClass._VALUE\n\n        @value.setter\n        def value(self, val):\n            SubClass._VALUE = val\n\n\n    class SetValueClass(MyClass):\n        value = 3\n\n\n    # Check that SetValueClass just changes the current value\n    assert MyClass.value == 3\n    assert SubClass.value == 3\n    assert SetValueClass.value == 3\n\n    mc = MyClass()\n    mc.value = 4\n\n    sub = SubClass()\n    sub.value = 7\n    assert sub.value == 7\n    assert SubClass.value == 7\n    assert SubClass._VALUE == 7\n\n    # MyClass.value is the new class_property from SubClass, because of the shared metaclass\n    assert mc.value == 7\n    assert MyClass.value == 7\n    assert SetValueClass.value == 7\n\n\nIf you want a disconnected new `class_property` then you need a new metaclass.\n\nExample:\n\n.. code-block:: python\n\n    from class_property import class_property\n\n\n    class MyClass(object, metaclass=class_property.metaclass()):\n        _VALUE1 = 1\n\n        @class_property\n        def value(self):\n            return MyClass._VALUE1\n\n        @value.setter\n        def value(self, val):\n            MyClass._VALUE1 = val\n\n\n    class SubClass(MyClass, metaclass=class_property.metaclass(MyClass)):\n        _VALUE2 = 2\n\n        # Because we have a different metaclass `SubClass.value` is different from `MyClass.value`\n        @class_property\n        def value():\n            return SubClass._VALUE2\n\n        @value.setter\n        def value(val):\n            SubClass._VALUE2 = val\n\n\n    mc = MyClass()\n    mc.value = 4\n\n    # SubClass.value is using a different metaclass and is disconnected from MyClass\n    sub = SubClass()\n    sub.value = 7\n    assert sub.value == 7\n    assert SubClass.value == 7\n    assert SubClass._VALUE2 == 7\n\n    # MyClass.value is using a different metaclass and is disconnected from SubClass\n    assert mc.value == 4\n    assert MyClass.value == 4\n    assert MyClass._VALUE1 == 4\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/justengel/class_property/archive/v1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justengel/class_property",
    "keywords": "class property class value class_property class_value classproperty classvalue",
    "license": "Proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "class-property",
    "package_url": "https://pypi.org/project/class-property/",
    "platform": "any",
    "project_url": "https://pypi.org/project/class-property/",
    "project_urls": {
      "Download": "https://github.com/justengel/class_property/archive/v1.0.0.tar.gz",
      "Homepage": "https://github.com/justengel/class_property"
    },
    "release_url": "https://pypi.org/project/class-property/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Class property that shares the same value with the class and any instance.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9987582,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e702e413603ae591c31b476af83e164d990ca1383e842acd70b26ffc723ac45",
          "md5": "681f45abc8fee30ab53e5db5f3a9444b",
          "sha256": "7f821376cea2f19b80f53fb3313691b6b4f4ba975b6b4fc05a4cbad97104d210"
        },
        "downloads": -1,
        "filename": "class_property-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "681f45abc8fee30ab53e5db5f3a9444b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5713,
        "upload_time": "2020-03-10T18:00:24",
        "upload_time_iso_8601": "2020-03-10T18:00:24.208284Z",
        "url": "https://files.pythonhosted.org/packages/6e/70/2e413603ae591c31b476af83e164d990ca1383e842acd70b26ffc723ac45/class_property-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e72f393994379a3e979601f417d2f2d7ea95afcbcb5d837824d533d2e58d02ad",
          "md5": "8a882418410af39f792df62e9a9c203a",
          "sha256": "282a0ccf6ed14177f94b8013cd2e52db3b1443fd3317dab2e7876f08fa0ae6c0"
        },
        "downloads": -1,
        "filename": "class_property-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a882418410af39f792df62e9a9c203a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12794,
        "upload_time": "2021-04-06T15:37:12",
        "upload_time_iso_8601": "2021-04-06T15:37:12.334385Z",
        "url": "https://files.pythonhosted.org/packages/e7/2f/393994379a3e979601f417d2f2d7ea95afcbcb5d837824d533d2e58d02ad/class_property-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "447233137436b56a1bbd0451d6ac219662545b9190c97d01a4e4768de4348e18",
          "md5": "0546d7f9b8cb416ca48a350fa3845d52",
          "sha256": "91860bde16ee5fbb8ee0f04d9d276e8dd229c7e866f4cd1e4d6d2a2b21d20d3a"
        },
        "downloads": -1,
        "filename": "class_property-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0546d7f9b8cb416ca48a350fa3845d52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7954,
        "upload_time": "2021-04-06T15:37:14",
        "upload_time_iso_8601": "2021-04-06T15:37:14.437251Z",
        "url": "https://files.pythonhosted.org/packages/44/72/33137436b56a1bbd0451d6ac219662545b9190c97d01a4e4768de4348e18/class_property-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e72f393994379a3e979601f417d2f2d7ea95afcbcb5d837824d533d2e58d02ad",
        "md5": "8a882418410af39f792df62e9a9c203a",
        "sha256": "282a0ccf6ed14177f94b8013cd2e52db3b1443fd3317dab2e7876f08fa0ae6c0"
      },
      "downloads": -1,
      "filename": "class_property-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a882418410af39f792df62e9a9c203a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12794,
      "upload_time": "2021-04-06T15:37:12",
      "upload_time_iso_8601": "2021-04-06T15:37:12.334385Z",
      "url": "https://files.pythonhosted.org/packages/e7/2f/393994379a3e979601f417d2f2d7ea95afcbcb5d837824d533d2e58d02ad/class_property-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "447233137436b56a1bbd0451d6ac219662545b9190c97d01a4e4768de4348e18",
        "md5": "0546d7f9b8cb416ca48a350fa3845d52",
        "sha256": "91860bde16ee5fbb8ee0f04d9d276e8dd229c7e866f4cd1e4d6d2a2b21d20d3a"
      },
      "downloads": -1,
      "filename": "class_property-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0546d7f9b8cb416ca48a350fa3845d52",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7954,
      "upload_time": "2021-04-06T15:37:14",
      "upload_time_iso_8601": "2021-04-06T15:37:14.437251Z",
      "url": "https://files.pythonhosted.org/packages/44/72/33137436b56a1bbd0451d6ac219662545b9190c97d01a4e4768de4348e18/class_property-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}