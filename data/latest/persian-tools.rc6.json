{
  "info": {
    "author": "Ali Madihi (mrunderline)",
    "author_email": "alimadihib@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# Persian Tools\n\nAn anthology of a variety of tools for the Persian language in Python\n\n[![codecov](https://codecov.io/gh/persian-tools/py-persian-tools/branch/master/graph/badge.svg?token=0M7JehkAWU)](https://codecov.io/gh/persian-tools/py-persian-tools)\n![Tests](https://github.com/persian-tools/py-persian-tools/workflows/Test/badge.svg)\n\n## Installation\n\n`pip install persian-tools`\n\n## Modules\n\n1. [digits](#digits)\n2. [separator](#separator)\n3. [ordinal suffix](#ordinal-suffix)\n4. [bank](#bank)\n    1. [card number](#card-number)\n    2. [sheba](#sheba)\n5. [national id](#national-id)\n6. [legal id](#legal-id)\n7. [phone number](#phone-number)\n8. [bill](#bill)\n9. [plate](#plate)\n\n## Usage\nLet's take a look at what an example test case would look like using `persian-tools`.\n\n### digits\nThis module will help you to normalize digits from Persian, Arabic and English to only one of them.\n\n```python\nfrom persian_tools import digits\n\ndigits.convert_to_fa(123)          # '۱۲۳'\ndigits.convert_to_fa('123')        # '۱۲۳'\ndigits.convert_to_fa('123٤٥٦')     # '۱۲۳۴۵۶'\ndigits.convert_to_fa('sth 123٤٥٦') # 'sth ۱۲۳۴۵۶'\n\ndigits.convert_to_en('۱۲۳')        # '123'\ndigits.convert_to_en('۱۲۳٤٥٦')     # '123456'\ndigits.convert_to_en('sth ۱۲۳٤٥٦') # 'sth 123456'\n\ndigits.convert_to_ar(123)          # '۱۲۳'\ndigits.convert_to_ar('123')        # '۱۲۳'\ndigits.convert_to_ar('sth 123۴۵۶') # 'sth ۱۲۳٤٥٦'\n```\n\n`persian-tools` also, has another function to convert numbers to words; you can convert result to ordinal mode with `ordinal=True` in inputs.\n```python\nfrom persian_tools import digits\n\ndigits.convert_to_word(500443)                  # پانصد هزار و چهارصد و چهل و سه\ndigits.convert_to_word(-500443)                 # منفی پانصد هزار و چهارصد و چهل و سه\ndigits.convert_to_word(500443, ordinal=True)    # پانصد هزار و چهارصد و چهل و سوم\ndigits.convert_to_word(30000000000)             # سی میلیارد\n```\n\nto convert words to number, you can use this function with different args:\n```python\nfrom persian_tools import digits\n\ndigits.convert_from_word('منفی سه هزارمین')                        # -3000\ndigits.convert_from_word('منفی سه هزارم', digits='fa')             # -۳۰۰۰\ndigits.convert_from_word('منفی سه هزار')                           # -3000\ndigits.convert_from_word('سه هزار دویست و دوازده')                 # 3212\ndigits.convert_from_word('دوازده هزار بیست دو', separator=True)    # '12,022'\ndigits.convert_from_word('حقوق شیش صد و ۲۷ میلیون تومان سالانه')    # 627000000\n```\n\nNote: as you can see in examples, this function will remove ordinal suffix by default.\n\n### separator\nAdding or removing thousands separators will handle; default separator is ',' but can change with second input.\n\n```python\nfrom persian_tools import separator\n\nseparator.add(300)                 # '300'\nseparator.add(3000000)             # '3,000,000'\nseparator.add(3000000.0003)        # '3,000,000.0003'\nseparator.add(3000000, '/')        # '3/000/000'\nseparator.add('۳۰۰۰۰')             # '۳۰,۰۰۰'\n\nseparator.remove('300')            # '300'\nseparator.remove('3,000,000')      # '3000000'\nseparator.remove('3/000/000', '/') # '3000000'\nseparator.remove('۳۰,۰۰۰')         # '۳۰۰۰۰'\n```\n\n### ordinal suffix\nAdding or removing ordinal suffix for persian numbers in word will handle.\n\n```python\nfrom persian_tools import ordinal_suffix\n\nordinal_suffix.add('بیست')          # 'بیستم'\nordinal_suffix.add('سی و سه')       # 'سی و سوم'\nordinal_suffix.add('سی')            # 'سی اُم'\n\nordinal_suffix.remove('دومین')      # 'دو'\nordinal_suffix.remove('سی و سوم')   # 'سی و سه'\nordinal_suffix.remove('بیستم')      # 'بیست'\nordinal_suffix.remove('سی اُم')      # 'سی'\n```\n\n### bank\n#### card number\nThis module has useful functions related to bank cards number, like:\n* validating them\n* find bank data of a card number\n* extract card numbers from a text\n\n```python\nfrom persian_tools.bank import card_number\n\ncard_number.validate('6037701689095443')    # True\ncard_number.validate('6219861034529007')    # True\ncard_number.validate('6219861034529008')    # False\n\ncard_number.bank_data('6219861034529007')\n# {'nickname': 'saman', 'name': 'Saman Bank', 'persian_name': 'بانک سامان', 'card_prefix': ['621986'], 'sheba_code': ['056']}\ncard_number.bank_data('6037701689095443')\n# {'nickname': 'keshavarzi', 'name': 'Keshavarzi', 'persian_name': 'بانک کشاورزی', 'card_prefix': ['603770', '639217'], 'sheba_code': ['016']}\n\n\n\ncard_number.extract_card_numbers('''شماره کارتم رو برات نوشتم:\n                                     6219-8610-3452-9007\n                                     اینم یه شماره کارت دیگه ای که دارم\n                                    ۵۰۲۲-۲۹۱۰-۷۰۸۷-۳۴۶۶                                     \n                                    5022291070873466''',                # first argument is a text\n                                    check_validation=True,              # a boolean that define you need only valid card numbers in result, default: True\n                                    detect_bank_name=True,              # this will add bank name in result, default: False\n                                    filter_valid_card_numbers=True)     # just valid card numbers will be in result; be careful to `check_validation` be also True, default: True\n# result\n# [\n#    {'pure': '6219861034529007', 'base': '6219-8610-3452-9007', 'index': 1, 'is_valid': True,\n#     'bank_data': {\n#         'nickname': 'saman',\n#         'name': 'Saman Bank',\n#         'persian_name': 'بانک سامان',\n#         'card_prefix': ['621986'],\n#         'sheba_code': ['056'],\n#     }},\n#    {'pure': '5022291070873466', 'base': '5022291070873466', 'index': 3, 'is_valid': True,\n#     'bank_data': {\n#         'nickname': 'pasargad',\n#         'name': 'Pasargad Bank',\n#         'persian_name': 'بانک پاسارگاد',\n#         'card_prefix': ['502229', '639347'],\n#         'sheba_code': ['057'],\n#     }},\n# ]\n```\n\n#### sheba\n`sheba` module contain 2 functions:\n* validating them\n* find bank data of a sheba number\n\n```python\n\nfrom persian_tools.bank import sheba\n\nsheba.validate('IR820540102680020817909002')    # True\nsheba.validate('IR01234567890123456789')        # False\n\nsheba.bank_data('IR820540102680020817909002')\n# {\n#     'nickname': 'parsian',\n#     'name': 'Parsian Bank',\n#     'persian_name': 'بانک پارسیان',\n#     'card_prefix': ['622106', '627884'],\n#     'sheba_code': ['054'],\n#     'account_number': '020817909002',\n#     'formatted_account_number': '002-00817909-002'\n# }\n```\n\n### national id\nThis module has useful functions related to iranian national id (code-e melli), like:\n* validating them\n* generate a random one\n* find place of national id by the prefix of id\n\n```python\nfrom persian_tools import national_id\n\nnational_id.validate('0499370899')      # True\nnational_id.validate('0684159415')      # False\n\nnational_id.generate_random()           # '0458096784'\nnational_id.generate_random()           # '1156537101'\n\nnational_id.find_place('0906582709')    # {'code': ['089', '090'], 'city': 'کاشمر', 'province': 'خراسان رضوی'}\nnational_id.find_place('0643005846')    # {'code': ['064', '065'], 'city': 'بیرجند', 'province': 'خراسان جنوبی'}\n```\n\n### legal id\nThis module contains two functions to generate random iranian legal id (shenas-e melli) and validate any given id.\n\n```python\nfrom persian_tools import legal_id\n\nlegal_id.validate('10380284790')      # True\nlegal_id.validate('11053639140')      # False\n\nlegal_id.generate_random()            # '10100387143'\nlegal_id.generate_random()            # '77111986110'\n```\n\n### phone number\nThis module can validate, normalize and give you some data from a phone number.\n\n```python\nfrom persian_tools import phone_number\n\nphone_number.validate('09123456789')        # True\nphone_number.validate('+989123456789')      # True\nphone_number.validate('989123456789')       # True\nphone_number.validate('98912345678')        # False\n\nphone_number.normalize('00989022002580')    # 09022002580\nphone_number.normalize('+989022002580')     # 09022002580\nphone_number.normalize('9022002580')        # 09022002580\nphone_number.normalize('9022002580', '0')   # 09022002580\nphone_number.normalize('9022002580', '+98') # 09022002580\n\nphone_number.operator_data('09123456789')\n# {'province': ['البرز', 'زنجان', 'سمنان', 'قزوین', 'قم', 'برخی از شهرستان های استان مرکزی'], 'base': 'تهران', 'type': ['permanent'], 'operator': 'همراه اول'}\nphone_number.operator_data('09303456789')\n# {'province': [], 'base': 'کشوری', 'type': ['permanent', 'credit'], 'operator': 'ایرانسل'}\n```\n\n### bill\nWith `bill_id` and `payment_id` (or just `barcode`), you can get detail of a `bill`.\n\n```python\nfrom persian_tools import bill\n\nbill.get_detail(bill_id=7748317800142, payment_id=1770160)\n# result\n# {'amount': 1700,\n#  'barcode': '77483178001420001770160',\n#  'bill_id': 7748317800142,\n#  'is_valid': True,\n#  'is_valid_bill_id': True,\n#  'is_valid_payment_id': True,\n#  'payment_id': 1770160,\n#  'type': 'تلفن ثابت'}\n\nbill.get_detail(barcode='77483178001420001770160')\n# same result\n\n# default currency is set to Toman, but can change like as below\nbill.get_detail(barcode='77483178001420001770160', currency=bill.CURRENCY_RIAL)\n# result\n# {'amount': 17000,\n#  ...\n```\n\n### plate\nGet information(province, category, type) about vehicles plate.\n\n```python\nfrom persian_tools import plate\n\nplate.get_info('12D45147')\n# result\n# {'category': 'دیپلمات',\n#   'province': 'مرکزی',\n#   'template': '12D451ایران47',\n#   'type': 'Car'}\n\nplate.get_info('12345678')\n# result\n# {'category': None,\n#  'province': 'مرکز تهران',\n#  'template': '123-45678',\n#  'type': 'Motorcycle'}\n\nplate.is_valid('12D45147') # True\nplate.is_valid('12345678') # True\nplate.is_valid('1234567') # False\nplate.is_valid('1204567') # False\n```\n\nNote: Plates that have farsi digits in them(like: الف، ب، ص) will be returned in this template:\n\n`{first_two_digits}{plate_character}{next_three_digits}ایران{province_code}`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/persian-tools/py-persian-tools/archive/v0.0.11.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/persian-tools/py-persian-tools",
    "keywords": "digits,commas,iranian bank,card number,national id,national code,ordinal suffix",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "persian-tools",
    "package_url": "https://pypi.org/project/persian-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/persian-tools/",
    "project_urls": {
      "Download": "https://github.com/persian-tools/py-persian-tools/archive/v0.0.11.zip",
      "Homepage": "https://github.com/persian-tools/py-persian-tools"
    },
    "release_url": "https://pypi.org/project/persian-tools/0.0.11/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An anthology of a variety of tools for the Persian language in Python",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17356078,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91b6c58ab3356e4a80f659eec873613c8d6527ce53b164637e53a0773098e916",
          "md5": "59e8bc08d718e2394f5424f0eda3d080",
          "sha256": "33e908980f464ecf8747eb6cc8e7ae35bade1ac80b9b6cf5c9e53d9073c6712e"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "59e8bc08d718e2394f5424f0eda3d080",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 28542,
        "upload_time": "2021-12-03T14:03:26",
        "upload_time_iso_8601": "2021-12-03T14:03:26.969000Z",
        "url": "https://files.pythonhosted.org/packages/91/b6/c58ab3356e4a80f659eec873613c8d6527ce53b164637e53a0773098e916/persian_tools-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff11d63248ca31754d1593694dc1cabe869c5f92ed5266ff980bfdaadb92b6d8",
          "md5": "b940257f413ca9c73b43f9f9bec2d17a",
          "sha256": "13c2077e55990edf3ac70fbfa8efbaf4f5c242bcb487f219e974441e4ee1885c"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b940257f413ca9c73b43f9f9bec2d17a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34723,
        "upload_time": "2023-03-19T20:11:38",
        "upload_time_iso_8601": "2023-03-19T20:11:38.320682Z",
        "url": "https://files.pythonhosted.org/packages/ff/11/d63248ca31754d1593694dc1cabe869c5f92ed5266ff980bfdaadb92b6d8/persian_tools-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9f23abbb645cbe778924807afefb95ae44051ad60eaadd6c614b7a1f0b46c1e",
          "md5": "32ea7bb77f45e11ead83e5569c8d58cc",
          "sha256": "43995289687f1e686847333c77435a3e33722765b79ebfbf75155cf487bfb5c3"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "32ea7bb77f45e11ead83e5569c8d58cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30827,
        "upload_time": "2023-03-19T20:11:40",
        "upload_time_iso_8601": "2023-03-19T20:11:40.890114Z",
        "url": "https://files.pythonhosted.org/packages/d9/f2/3abbb645cbe778924807afefb95ae44051ad60eaadd6c614b7a1f0b46c1e/persian_tools-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3756a34a27ce180a839833b2495a8269ff175bdd8de70d7bf4031aeba3231b52",
          "md5": "13f726670dfff678efe31f4632177a37",
          "sha256": "509728e40e8ac6b687e2fb4307c832b827b342378889e6d8831eff79c73ce9b5"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "13f726670dfff678efe31f4632177a37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17157,
        "upload_time": "2021-02-20T11:26:56",
        "upload_time_iso_8601": "2021-02-20T11:26:56.124926Z",
        "url": "https://files.pythonhosted.org/packages/37/56/a34a27ce180a839833b2495a8269ff175bdd8de70d7bf4031aeba3231b52/persian_tools-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dca2fc20ca08930fde2abfb0249db411c100574e5565680bc7596df65aea4a6b",
          "md5": "203b101b83c0cda57e81fb688bb1680a",
          "sha256": "b0f492b3a3409db56e40e4244ea5177acf106f5062e2a5885178c74c76d3264e"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "203b101b83c0cda57e81fb688bb1680a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20005,
        "upload_time": "2021-02-22T19:04:01",
        "upload_time_iso_8601": "2021-02-22T19:04:01.811136Z",
        "url": "https://files.pythonhosted.org/packages/dc/a2/fc20ca08930fde2abfb0249db411c100574e5565680bc7596df65aea4a6b/persian_tools-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2372072d543555ef7843846458b21bfb93b2fea205509dbb9595f2f1a08b3d4",
          "md5": "e18811626f876a648349c37a3f26965e",
          "sha256": "336a331cb786261d84f3daeeb127e3ef0292bf25d6f54326b5210737a175016f"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e18811626f876a648349c37a3f26965e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21989,
        "upload_time": "2021-02-27T10:12:36",
        "upload_time_iso_8601": "2021-02-27T10:12:36.467510Z",
        "url": "https://files.pythonhosted.org/packages/b2/37/2072d543555ef7843846458b21bfb93b2fea205509dbb9595f2f1a08b3d4/persian_tools-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39778324faa0532d88778761669de3c58abbfbeed617cfa6a11e0abb67745940",
          "md5": "e33ac251072842bc71737a12ff73b25a",
          "sha256": "863dad2b19404979b55c2b835cd6a6e830771b93b34460d9f41e37c88952d4f7"
        },
        "downloads": -1,
        "filename": "persian_tools-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e33ac251072842bc71737a12ff73b25a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27283,
        "upload_time": "2021-03-22T13:09:47",
        "upload_time_iso_8601": "2021-03-22T13:09:47.325337Z",
        "url": "https://files.pythonhosted.org/packages/39/77/8324faa0532d88778761669de3c58abbfbeed617cfa6a11e0abb67745940/persian_tools-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff11d63248ca31754d1593694dc1cabe869c5f92ed5266ff980bfdaadb92b6d8",
        "md5": "b940257f413ca9c73b43f9f9bec2d17a",
        "sha256": "13c2077e55990edf3ac70fbfa8efbaf4f5c242bcb487f219e974441e4ee1885c"
      },
      "downloads": -1,
      "filename": "persian_tools-0.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b940257f413ca9c73b43f9f9bec2d17a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 34723,
      "upload_time": "2023-03-19T20:11:38",
      "upload_time_iso_8601": "2023-03-19T20:11:38.320682Z",
      "url": "https://files.pythonhosted.org/packages/ff/11/d63248ca31754d1593694dc1cabe869c5f92ed5266ff980bfdaadb92b6d8/persian_tools-0.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9f23abbb645cbe778924807afefb95ae44051ad60eaadd6c614b7a1f0b46c1e",
        "md5": "32ea7bb77f45e11ead83e5569c8d58cc",
        "sha256": "43995289687f1e686847333c77435a3e33722765b79ebfbf75155cf487bfb5c3"
      },
      "downloads": -1,
      "filename": "persian_tools-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "32ea7bb77f45e11ead83e5569c8d58cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30827,
      "upload_time": "2023-03-19T20:11:40",
      "upload_time_iso_8601": "2023-03-19T20:11:40.890114Z",
      "url": "https://files.pythonhosted.org/packages/d9/f2/3abbb645cbe778924807afefb95ae44051ad60eaadd6c614b7a1f0b46c1e/persian_tools-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}