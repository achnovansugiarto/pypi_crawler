{
  "info": {
    "author": "gushka",
    "author_email": "guskhka@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TronaldDump API Wrapper\n\n[Tronalddump.io](https://www.tronalddump.io/) is a free API and web archive for the dumbest things Donald Trump has ever said ...\n\nYou might want to check out the [documentation](https://docs.tronalddump.io/) for the API before working with it.\n\n## Description\n\nThe package consists of two main modules:\n- `api`: tools for accessing the API.\n- `parse`: tools for parsing retieved data.\n\n## Installation\n\nEnsure you have Python 3 and the package manager `pip` installed.\n\nInstall using pip:\n```console\n$ pip3 install tronalddumpy\n```\n\nor, you can build the latest version from source:\n```console\n$ git clone https://github.com/Gushka/tronalddump-python.git\n$ cd tronalddump-python/\n$ python3 setup.py install\n```\n\n## Basic usage\n\nImport the main modules and create a client:\n\n```python\nfrom tronalddump import api, parse\n\nclient = api.TronaldDumpAPI()\n```\nNow to access any API method we will use this client.\n\nFor example, let us get a random quote:\n\n```python\n>>> resp = client.random_quote()\n>>> resp\n<TronaldDumpResponse: 'https://www.tronalddump.io/random/quote'>\n# Get the response data:\n>>> resp.data\n{JSON}\n# Get the URL:\n>>> resp.url\n'https://www.tronalddump.io/random/quote'\n```\n\n## Parsing the JSON data\n\nUsing the TronaldDump module you also can get specific values from the API response just as easy.\n\nCreate a Parser using the JSON file-object we obtained earlier:\n\n```python\n>>> parsed = parse.Parser(resp)\n```\nNow we can extract all kinds of data from the JSON based on what the initial response type was.\n\n```python\n# Retrieve value of a quote:\n>>> parsed.value()\n\"Money was never a big motivation for me, except as a way to keep score.\"\n# Retrieve the date it was written online:\n>>> parsed.date_appeared()\ndatetime.date(2014, 9, 14)\n```\n\nThere's also a function to print into the console formatted JSON response.\n\n__Use it only for the debugging purposes.__\n\n```\n>>> parsed.printout()\n```\n\n## Documentation\n\n### *TronaldDumpAPI* class:\n\n### Tags\n\n#### **all_tags**\nRetrieves all existing tags from the API.\n```python\nTronaldDumpAPI().all_tags()\n```\n#### **find_tag**\nFinds a tag by its value. Given paramaters will be capitalized for the proper search indexing.\n```python\nTronaldDumpAPI().find_tag(value)\n```\n### Quotes\n\n#### **random_quote**\nRetrieve a random quote from Troland Dump.\n```python\nTronaldDumpAPI().random_quote()\n```\n\n#### **random_meme**\nRetrieve a random meme image with a quote Troland Dump.\n```python\nTronaldDumpAPI().random_meme(output_dir, filename=\"randommeme.png\", force_write=True)\n```\n- `output_dir`: The directory where to store the image.\n- `filename`: The name for the downloaded file. By default it's *randommeme.png*\n- `force_write`: Whether to overwrite already existing file or not. By default is set to _True_\n\n#### **search_quote**\nSearch for a quote by a query or tag. Returns one-page answer. You must pick either `query` or `tag` parameter.\nThey are interchangeble and only one may be used at a time.\n\n**TO BE IMPROVED:** For now returns only the first page of a search answer.\n\n```python\nTronaldDumpAPI().search_quote(query=None, tag=None, page=0)\n```\n- `query`: The string which will be searched for. \n- `tag`: The tag which will be searched for. \n- `page`: The number of a page that will be returned.\n\n#### **find_quote**\nFind a quote by its ID.\n```python\nTronaldDumpAPI().find_quote(id)\n```\n- `id`: The ID of a quote you're looking for.\n\n#### **quote_source**\nRetrieve the source of a quote by its ID.\n```python\nTronaldDumpAPI().quote_source(id)\n```\n- `id`: The ID of a quote source of which you're looking for.\n\n### Author\n\n#### **find_author**\nFind an author by their ID.\n```python\nTronaldDumpAPI().find_author(id)\n```\n- `id`: The ID of an author you're looking for.\n\n\n-----\n\n### *TronaldDumpParser* class:\n\n#### **printout**\nPrints the contents of given JSON object in the formatted form.\n```python\nParser().printout()\n```\n\n### Tags\n\n#### **tag_value**\nRetrieve all tags values from the given JSON object in a list.\n```python\nParser().tag_value()    \n```\n\n### Quotes\n\n#### **value**\nRetrieve the \"value\" value of a given JSON object.\n```python\nParser().value()\n```\n\n#### **author**\nRetrieve the \"author\" value of a given JSON object.\n```python\nParser().author()\n```\n\n#### **date_appeared**\nRetrieve the date when a given quote was written and published.\n```python\nParser().date_appeared()\n```\n\n#### **tags**\nRetrieve all the tags of a given quote\n```python\nParser().tags()\n```\n\n#### **quote_id**\nRetrieve the \"quote-id\" value from the JSON object\n```python\nParser().quote_id()\n```\n#### **source**\nRetrieve the source of a given quote\n```python\nParser().source()\n```\n\nFor full and more detailed information see `help()` on needed classes and functions.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Gushka/tronalddump-python",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tronald-dumpy",
    "package_url": "https://pypi.org/project/tronald-dumpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/tronald-dumpy/",
    "project_urls": {
      "Homepage": "https://github.com/Gushka/tronalddump-python"
    },
    "release_url": "https://pypi.org/project/tronald-dumpy/0.1/",
    "requires_dist": [
      "requests",
      "urllib3"
    ],
    "requires_python": ">=3.6",
    "summary": "Python wrapper for the TronaldDump API",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6669423,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d19c51a51ac0c0e09b4aa8b7cfe8e3469e39fc13fbc56a6acdf19ee363c41a29",
          "md5": "38c2afe7cb6435c87e273bc2067444fc",
          "sha256": "47b2b189dcc7f543edd471129d77b0d4cbf688219648c6eeb31f77c3a08d51d7"
        },
        "downloads": -1,
        "filename": "tronald_dumpy-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38c2afe7cb6435c87e273bc2067444fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17797,
        "upload_time": "2020-02-20T17:14:09",
        "upload_time_iso_8601": "2020-02-20T17:14:09.299961Z",
        "url": "https://files.pythonhosted.org/packages/d1/9c/51a51ac0c0e09b4aa8b7cfe8e3469e39fc13fbc56a6acdf19ee363c41a29/tronald_dumpy-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2b8a6128561f98e16619ddd1ad85c288bcc99783ca4d79114354782e812a2c",
          "md5": "a58b0825987651d06beb8e14b0015807",
          "sha256": "7fbf85558720278e5bd61ac9be7436d7c96be803aed598398ac38369a880ab71"
        },
        "downloads": -1,
        "filename": "tronald-dumpy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a58b0825987651d06beb8e14b0015807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5096,
        "upload_time": "2020-02-20T17:14:11",
        "upload_time_iso_8601": "2020-02-20T17:14:11.192741Z",
        "url": "https://files.pythonhosted.org/packages/4a/2b/8a6128561f98e16619ddd1ad85c288bcc99783ca4d79114354782e812a2c/tronald-dumpy-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d19c51a51ac0c0e09b4aa8b7cfe8e3469e39fc13fbc56a6acdf19ee363c41a29",
        "md5": "38c2afe7cb6435c87e273bc2067444fc",
        "sha256": "47b2b189dcc7f543edd471129d77b0d4cbf688219648c6eeb31f77c3a08d51d7"
      },
      "downloads": -1,
      "filename": "tronald_dumpy-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38c2afe7cb6435c87e273bc2067444fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17797,
      "upload_time": "2020-02-20T17:14:09",
      "upload_time_iso_8601": "2020-02-20T17:14:09.299961Z",
      "url": "https://files.pythonhosted.org/packages/d1/9c/51a51ac0c0e09b4aa8b7cfe8e3469e39fc13fbc56a6acdf19ee363c41a29/tronald_dumpy-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a2b8a6128561f98e16619ddd1ad85c288bcc99783ca4d79114354782e812a2c",
        "md5": "a58b0825987651d06beb8e14b0015807",
        "sha256": "7fbf85558720278e5bd61ac9be7436d7c96be803aed598398ac38369a880ab71"
      },
      "downloads": -1,
      "filename": "tronald-dumpy-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a58b0825987651d06beb8e14b0015807",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5096,
      "upload_time": "2020-02-20T17:14:11",
      "upload_time_iso_8601": "2020-02-20T17:14:11.192741Z",
      "url": "https://files.pythonhosted.org/packages/4a/2b/8a6128561f98e16619ddd1ad85c288bcc99783ca4d79114354782e812a2c/tronald-dumpy-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}