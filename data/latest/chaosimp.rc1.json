{
  "info": {
    "author": "Vasily Vasinov",
    "author_email": "vasinov@me.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Chaos Imp\n\n[![PyPI Version](https://img.shields.io/pypi/v/chaosimp.svg)](https://pypi.python.org/pypi/chaosimp)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/gitbucket/gitbucket/blob/master/LICENSE)\n\nChaos Imp is a framework for creating, executing, and running [chaos engineering](https://principlesofchaos.org/) (CE) experiments on AWS. It provides shorthand syntax to express experiment templates, executions, and automations. With just a few lines, you can define the experiment you want and model it using YAML and shell scripts. During deployment, Chaos Imp transforms and expands your YAML and shell scripts into AWS CloudFormation syntax, enabling you to run chaos experiments faster.\n\nChaos Imp uses a plethora of AWS services under the hood. It glues Systems Manager Agent (SSM), Failure Injection Simulator (FIS), Events, and Lambda APIs to create an easy-to-use tool around the following components of the CE process:\n\n- Defining infrastructure, application, and security failure injection templates.\n- Running CE experiments in a controlled way by using AWS access capabilities.\n- Automating experiments to be run continuously.\n\nWhat benefits does Chaos Imp bring to organizations when compared to SSM/FIS/Lambda?\n\n- Experiment scripts are decoupled from YAML, which means that they are much more easily editable and can be re-used across multiple experiments.\n- Templates and automations are automatically managed via CloudFormation templates, which makes it easy to control and cleanup.\n- CLI API is very minimalist. It has three namespaces for creating `templates`, running `experiments`, and setting up `automations`. No need to worry about gluing different services together and resolving IAM shenanigans.\n- Chaos Imp uses unified config file syntax. Think of it as [AWS SAM](https://aws.amazon.com/serverless/sam/) for chaos engineering.\n\n## Installation\n\nChaos Imp is a Python package. To install it run:\n\n```bash\npip install chaosimp\n```\n\nNow, you can start using scripts and classes from the `chaosimp` package. You can also run CLI commands. Chaos Imp supports four namespaces:\n\n- `config`: `get`, `list`, and `set` operations.\n- `templates`: `list`, `show`, `create`, `update`, and `delete` operations.\n- `experiments`: `get`, `get-by-id`, `list`, `start`, and `stop` operations.\n- `automations`: `list`, `show`, `create`, `update`, and `delete` operations.\n\nFor example, to list all of your templates run:\n\n```bash\nimp templates list\n```\n\nThe CLI is self-documenting, so you can learn about any command by running:\n\n```bash\nimp <COMMAND_NAME> --help\n```\n\n## Creating Experiment Templates\n\nCheck out [Chaos Imp example templates](https://github.com/chaosops-oss/chaosimp-examples) that include resource, network, and state chaos experiments.\n\nLet's create a simple experiment that stresses CPUs of several EC2 instances.\n\n### Experiment Boundaries\n\nYou can perform experiments on a variety of different AWS resources. Chaos Imp automatically translates resources defined in the YAML experiment template to [AWS FIS targets](https://docs.aws.amazon.com/fis/latest/userguide/targets.html).\n\nFor example, to target a subset of EC2 instances tagged with `imp: ec2-experiment` define the following target in `imp.yml:\n\n```yaml\nTargets:\n  - Name: \"ec2-instances\"\n    ResourceType: \"aws:ec2:instance\"\n    ResourceTags:\n      - Key: \"imp\"\n        Value: \"ec2-experiment\"\n    SelectionMode: \"ALL\"\n```\n\nThis defines a FIS target that experiment actions can be applied to.\n\n### Actions\n\nNow, let's define a custom Chaos Imp action that runs a script with `stress-ng` stressing CPUs:\n\n```yaml\nActions:\n  - Name: \"stress-cpus\"\n    Type: \"imp:run-script\"\n    Target: \"ec2-instances\"\n    Parameters:\n      Duration: \"PT1M\"\n    Document:\n      Path: \"stress-cpu.sh\"\n```\n\nThis defines a Chaos Imp action that is later translated into a FIS action. To avoid confusion, you can use all FIS action types defined in the [official documentation](https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html).\n\nChaos Imp introduces its own namespace and action type into the mix: `imp:run-script`. This action functions just like `aws:ssm:send-command` except for you can reference a local file instead of `documentArn` and `documentVersion`.\n\nNow, we just add an experiment script file `stress-cpu.sh`:\n\n```bash\n#!/bin/bash\n\nsudo yum -y install stress-ng\nstress-ng --cpu 0 --cpu-method matrixprod --cpu-load 100 -t 20s\n```\n\nThis will install `stress-ng` and apply 100% load on all CPUs for 20 seconds.\n\n### Creating a Template\n\nBefore creating a template, you have to create a role with a [policy](https://github.com/chaosops-oss/chaosimp-iam-policies/blob/master/ImpFis.json) that allows FIS to run actions.\n\nYou can reference this role with every template creation call by using `--role-arn` but it's much more convenient to store it in the local config:\n\n```bash\nimp config set TemplateRoleArn <ROLE_ARN>\n```\n\nWe are finally ready to create our first template:\n\n```bash\nimp templates create --path . cpu-stress\n```\n\n### Running Experiments\n\nBefore running an experiment on EC2 instances those instances have to be assigned a role with [a policy](https://github.com/chaosops-oss/chaosimp-iam-policies/blob/master/ImpSsm.json) that allows them to interact with SSM. This is required for all FIS SSM actions as well as Chaos Imp special actions.\n\nOnce instances are ready, you can run an experiment based on the template we created:\n\n```bash\nimp experiments start --template cpu-stress my-cpu-experiment\n```\n\nThis will create and run an experiment in FIS. If you run subsequent experiments with the same name you can list all experiment executions by running:\n\n```bash\nimp experiments get my-cpu-experiment\n```\n\nIf you are interested in the specific instance of an experiment then run:\n\n```shell\nimp experiments get-by-id <EXPERIMENT_ID>\n```\n\n### Automating Experiments\n\nExperiment automation is a work in progress. Chaos Imp uses a combination of CloudWatch Events and Lambda Functions to create automations.\n\nUnfortunately, AWS SDK is out of date in the Lambda runtime and doesn't support FIS yet, so you'll have to create a Docker image with an updated AWS SDK in it.\n\nFirst, [download](https://github.com/chaosops-oss/chaosimp/tree/master/lambda_image) `Dockerfile` and `app.py` on your machine. Then run the following commands to create and push an image to your private AWS ECR:\n\n```bash\naws ecr get-login-password | docker login --username AWS --password-stdin <AWS_ACCOUNT_ID>.dkr.ecr.<REGION>.amazonaws.com\ndocker build -t imp-automation .\ndocker tag imp-automation:latest <REPO_URL>/imp-automation:latest\ndocker push <REPO_URL>/imp-automation:latest\n```\n\nThis will become unnecessary once Lambda supports a more recent SDK.\n\nTo create an automation run:\n\n```shell\nimp automations create \\\n    --schedule=\"rate(30 minutes)\" \\\n    --template=\"cpu-stress\" \\\n    --image=<AWS_ACCOUNT_ID>.dkr.ecr.<REGION>.amazonaws.com/imp-automation:latest \\\n    cpu-stress-automation\n```\n\nThis will create a CloudWatch Event Rule that will kickoff a Lambda every 30 minutes. The Lambda starts a FIS experiment.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chaosops-oss/chaosimp",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chaosimp",
    "package_url": "https://pypi.org/project/chaosimp/",
    "platform": "",
    "project_url": "https://pypi.org/project/chaosimp/",
    "project_urls": {
      "Homepage": "https://github.com/chaosops-oss/chaosimp"
    },
    "release_url": "https://pypi.org/project/chaosimp/0.1.0/",
    "requires_dist": [
      "pyyaml (>=5)",
      "click (>=7)",
      "boto3 (>=1.17)",
      "cfn-flip (>=1)",
      "troposphere (>=2.7.1)",
      "pyhumps (>=1)"
    ],
    "requires_python": "",
    "summary": "Chaos engineering on AWS",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10089657,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af9186597cbca9361726cda5ba5f96bf4c34d4329acceb306ee07aefc3349a33",
          "md5": "63f938edf39c4af72a9693ff3a0cbe6d",
          "sha256": "2f94267ddfe2ec65fa17f432a3f89e3142d7900fb0982a483a796cbf0af58c4a"
        },
        "downloads": -1,
        "filename": "chaosimp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63f938edf39c4af72a9693ff3a0cbe6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7762,
        "upload_time": "2021-04-16T23:35:29",
        "upload_time_iso_8601": "2021-04-16T23:35:29.774993Z",
        "url": "https://files.pythonhosted.org/packages/af/91/86597cbca9361726cda5ba5f96bf4c34d4329acceb306ee07aefc3349a33/chaosimp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53745e048f9093bd971318c35a40d423aef8af856ba823896e11654249ae3ddb",
          "md5": "d26212503cf62c338c39f83a7e0dae06",
          "sha256": "aad3e4e57d270dc6866b8c266d72fdebe7b509a8e49187768389da99d49a912d"
        },
        "downloads": -1,
        "filename": "chaosimp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d26212503cf62c338c39f83a7e0dae06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4739,
        "upload_time": "2021-04-16T23:35:30",
        "upload_time_iso_8601": "2021-04-16T23:35:30.941261Z",
        "url": "https://files.pythonhosted.org/packages/53/74/5e048f9093bd971318c35a40d423aef8af856ba823896e11654249ae3ddb/chaosimp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af9186597cbca9361726cda5ba5f96bf4c34d4329acceb306ee07aefc3349a33",
        "md5": "63f938edf39c4af72a9693ff3a0cbe6d",
        "sha256": "2f94267ddfe2ec65fa17f432a3f89e3142d7900fb0982a483a796cbf0af58c4a"
      },
      "downloads": -1,
      "filename": "chaosimp-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63f938edf39c4af72a9693ff3a0cbe6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7762,
      "upload_time": "2021-04-16T23:35:29",
      "upload_time_iso_8601": "2021-04-16T23:35:29.774993Z",
      "url": "https://files.pythonhosted.org/packages/af/91/86597cbca9361726cda5ba5f96bf4c34d4329acceb306ee07aefc3349a33/chaosimp-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53745e048f9093bd971318c35a40d423aef8af856ba823896e11654249ae3ddb",
        "md5": "d26212503cf62c338c39f83a7e0dae06",
        "sha256": "aad3e4e57d270dc6866b8c266d72fdebe7b509a8e49187768389da99d49a912d"
      },
      "downloads": -1,
      "filename": "chaosimp-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d26212503cf62c338c39f83a7e0dae06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4739,
      "upload_time": "2021-04-16T23:35:30",
      "upload_time_iso_8601": "2021-04-16T23:35:30.941261Z",
      "url": "https://files.pythonhosted.org/packages/53/74/5e048f9093bd971318c35a40d423aef8af856ba823896e11654249ae3ddb/chaosimp-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}