{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "![Alt text](gtsfm-logo.png?raw=true)\n\n# Georgia Tech Structure from Motion (GTSfM) Library\n\n| Platform     | Build Status  |\n|:------------:| :-------------:|\n| Ubuntu 20.04.3 |  ![Linux CI](https://github.com/borglab/gtsfm/workflows/Unit%20tests%20and%20python%20checks/badge.svg) |\n\n### What is GTSfM?\n\nGTSfM is an end-to-end SfM pipeline based on [GTSAM](https://github.com/borglab/gtsam). GTSfM was designed from the ground-up to natively support parallel computation using [Dask](https://dask.org/).\n\n<p align=\"left\">\n  <img src=\"https://dask.org/_images/dask_horizontal_white_no_pad_dark_bg.png\" height=\"50\">\n</p>\n\n<p align=\"left\">\n  <img src=\"https://user-images.githubusercontent.com/16724970/121294002-a4d7a400-c8ba-11eb-895e-a50305c049b6.gif\" height=\"315\" title=\"Olsson Lund Dataset: Door, 12 images\">\n  <img src=\"https://user-images.githubusercontent.com/16724970/142500100-ed3bd07b-f839-488e-a01d-823a9fbeaba4.gif\" height=\"315\">\n</p>\n\n<p align=\"left\">\n  <img src=\"https://user-images.githubusercontent.com/25347892/146043166-c5a172d7-17e0-4779-8333-8cd5f088ea2e.gif\" height=\"345\" title=\"2011212_opnav_022\">\n  <img src=\"https://user-images.githubusercontent.com/25347892/146043553-5299e9d3-44c5-40a6-8ba8-ff43d2a28c8f.gif\" height=\"345\">\n</p>\n\n## License\n\nThe majority of our code is governed by a MIT license and is suitable for commercial use. However, certain implementations featured in our repo (SuperPoint, SuperGlue) are governed by a non-commercial license and may not be used commercially.\n\n## Installation\n\nGTSfM requires no compilation, as Python wheels are provided for GTSAM.\n\nTo install GTSfM, first, we need to create a conda environment.\n\n**Linux**\nOn Linux, with CUDA support:\n\n```bash\nconda env create -f environment_linux.yml\nconda activate gtsfm-v1 # you may need \"source activate gtsfm-v1\" depending upon your bash and conda set-up\n```\n\n**Mac**\nOn Mac OSX, there is no CUDA support, so run:\n\n```bash\nconda env create -f environment_mac.yml\nconda activate gtsfm-v1\n```\n\n## Completing Installation\n\nNow, install `gtsfm` as a module:\n\n```bash\npip install -e .\n```\n\nMake sure that you can run `python -c \"import gtsfm; import gtsam; print('hello world')\"` in python, and you are good to go!\n\n## Usage Guide (Running 3d Reconstruction)\n\nBefore running reconstruction, if you intend to use modules with pre-trained weights, such as SuperPoint, SuperGlue, or PatchmatchNet, please first run:\n\n```bash\n./download_model_weights.sh\n```\n\nTo run SfM with a dataset with only an image directory and EXIF, with image file names ending with \"jpg\", please create the following file structure like\n\n```\n└── {DATASET_NAME}\n       ├── images\n               ├── image1.jpg\n               ├── image2.jpg\n               ├── image3.jpg\n```\n\nand run\n\n```python\npython gtsfm/runner/run_scene_optimizer_olssonloader.py --config_name {CONFIG_NAME} --dataset_root {DATASET_ROOT} --image_extension jpg --num_workers {NUM_WORKERS}\n```\n\nFor example, if you had 4 cores available and wanted to use the Deep Front-End (recommended) on the \"door\" dataset, you should run:\n\n```bash\npython gtsfm/runner/run_scene_optimizer_olssonloader.py --dataset_root tests/data/set1_lund_door --image_extension JPG --config_name deep_front_end.yaml --num_workers 4\n```\n\n(or however many workers you desire).\n\nYou can view/monitor the distributed computation using the [Dask dashboard](http://localhost:8787/status).\n\nCurrently we require EXIF data embedded into your images (or you can provide ground truth intrinsics in the expected format for an Olsson dataset, or COLMAP-exported text data, etc)\n\nIf you would like to compare GTSfM output with COLMAP output, please run:\n\n```python\npython gtsfm/runner/run_scene_optimizer_colmaploader.py --config_name {CONFIG_NAME} --images_dir {IMAGES_DIR} --colmap_files_dirpath {COLMAP_FILES_DIRPATH} --image_extension jpg --num_workers {NUM_WORKERS} --max_frame_lookahead {MAX_FRAME_LOOKAHEAD}\n```\n\nwhere `COLMAP_FILES_DIRPATH` is a directory where .txt files such as `cameras.txt`, `images.txt`, etc have been saved.\n\nTo visualize the result using Open3D, run:\n\n```bash\npython gtsfm/visualization/view_scene.py --rendering_library open3d --rendering_style point\n```\n\nFor users that are working with the same dataset repeatedly, we provide functionality to cache front-end results for\nGTSfM for very fast inference afterwards. For more information, please refer to [`gtsfm/frontend/cacher/README.md`](https://github.com/borglab/gtsfm/tree/master/gtsfm/frontend/cacher).\n\n## Repository Structure\n\nGTSfM is designed in an extremely modular way. Each module can be swapped out with a new one, as long as it implements the API of the module's abstract base class. The code is organized as follows:\n\n- `gtsfm`: source code, organized as:\n  - `averaging`\n    - `rotation`: rotation averaging implementations ([Shonan](https://arxiv.org/abs/2008.02737), Chordal, etc)\n    - `translation`: translation averaging implementations ([1d-SFM](https://www.cs.cornell.edu/projects/1dsfm/docs/1DSfM_ECCV14.pdf), etc)\n  - `bundle`: bundle adjustment implementations\n  - `common`: basic classes used through GTSFM, such as `Keypoints`, `Image`, `SfmTrack2d`, etc\n  - `data_association`: 3d point triangulation (DLT) w/ or w/o RANSAC, from 2d point-tracks\n  - `densify`\n  - `frontend`: SfM front-end code, including:\n    - `detector`: keypoint detector implementations (DoG, etc)\n    - `descriptor`: feature descriptor implementations ([SIFT](https://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf), [SuperPoint](https://arxiv.org/abs/1712.07629) etc)\n    - `matcher`: descriptor matching implementations ([Superglue](https://arxiv.org/abs/1911.11763), etc)\n    - `verifier`: 2d-correspondence verifier implementations ([Degensac](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.466.2719&rep=rep1&type=pdf), OA-Net, etc)\n    - `cacher`: Cache implementations for different stages of the front-end.\n  - `loader`: image data loaders\n  - `utils`: utility functions such as serialization routines and pose comparisons, etc\n- `tests`: unit tests on every function and module\n\n## Contributing\n\nContributions are always welcome! Please be aware of our [contribution guidelines for this project](CONTRIBUTING.md).\n\n## Citing this work\n\nOpen-source Python implementation:\n\n```\n@misc{GTSFM,\n    author = {Ayush Baid and Travis Driver and Fan Jiang and Akshay Krishnan and John Lambert\n       and Ren Liu and Aditya Singh and Neha Upadhyay and Aishwarya Venkataramanan\n       and Sushmita Warrier and Jon Womack and Jing Wu and Xiaolong Wu and Frank Dellaert},\n    title = { {GTSFM}: Georgia Tech Structure from Motion},\n    howpublished={\\url{https://github.com/borglab/gtsfm}},\n    year = {2021}\n}\n```\n\nNote: authors are listed in alphabetical order (by last name).\n\n## Compiling Additional Verifiers\n\nOn Linux, we have made `pycolmap`'s LORANSAC available in [pypi](https://pypi.org/project/pycolmap/). However, on Mac, `pycolmap` must be built from scratch. See the instructions [here](https://github.com/borglab/gtsfm/blob/master/gtsfm/frontend/verifier/loransac.py#L10).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "computer-vision",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gtsfm",
    "package_url": "https://pypi.org/project/gtsfm/",
    "platform": null,
    "project_url": "https://pypi.org/project/gtsfm/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/gtsfm/0.2.0/",
    "requires_dist": null,
    "requires_python": ">= 3.6",
    "summary": "",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14998563,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb17349dcc68e65348845ee0e7004f476433184e59cdcc7e5e4976945542947a",
          "md5": "01beb98b0192a2db454d348e1207c899",
          "sha256": "f33cdcdfa747db4cbc3fe676c6c76c57c2ce4fd6b1184319d9d2342ef3314260"
        },
        "downloads": -1,
        "filename": "gtsfm-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01beb98b0192a2db454d348e1207c899",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.6",
        "size": 241269,
        "upload_time": "2022-09-05T16:20:34",
        "upload_time_iso_8601": "2022-09-05T16:20:34.095728Z",
        "url": "https://files.pythonhosted.org/packages/fb/17/349dcc68e65348845ee0e7004f476433184e59cdcc7e5e4976945542947a/gtsfm-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb17349dcc68e65348845ee0e7004f476433184e59cdcc7e5e4976945542947a",
        "md5": "01beb98b0192a2db454d348e1207c899",
        "sha256": "f33cdcdfa747db4cbc3fe676c6c76c57c2ce4fd6b1184319d9d2342ef3314260"
      },
      "downloads": -1,
      "filename": "gtsfm-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01beb98b0192a2db454d348e1207c899",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.6",
      "size": 241269,
      "upload_time": "2022-09-05T16:20:34",
      "upload_time_iso_8601": "2022-09-05T16:20:34.095728Z",
      "url": "https://files.pythonhosted.org/packages/fb/17/349dcc68e65348845ee0e7004f476433184e59cdcc7e5e4976945542947a/gtsfm-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}