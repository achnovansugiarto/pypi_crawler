{
  "info": {
    "author": "",
    "author_email": "Yuxin Wang <yuxinwang.dev@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# aioapcaccess\n\n[![build](https://github.com/yuxincs/aioapcaccess/actions/workflows/build.yaml/badge.svg)](https://github.com/yuxincs/aioapcaccess/actions/workflows/build.yaml?query=branch%3Amain)\n[![codecov](https://codecov.io/github/yuxincs/aioapcaccess/branch/main/graph/badge.svg?token=8zhys5YAk9)](https://codecov.io/github/yuxincs/aioapcaccess)\n[![PyPI](https://img.shields.io/pypi/v/aioapcaccess)](https://pypi.org/project/aioapcaccess/)\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![GitHub](https://img.shields.io/github/license/yuxincs/aioapcaccess)](https://github.com/yuxincs/aioapcaccess/blob/main/LICENSE)\n\nAn async implementation of [apcaccess](https://linux.die.net/man/8/apcaccess). This\nlibrary provides programmatic access to the status information provided by\n[apcupsd](http://www.apcupsd.org/) over its Network Information Server (NIS) which\nusually listens on TCP port 3551.\n\nThis project is a re-implementation of the synchronous version\n[flyte/apcaccess](https://github.com/flyte/apcaccess) using\n[asyncio](https://docs.python.org/3/library/asyncio.html), where a lot of the logic is\nborrowed and improved.\n\n# Install\n\nInstall with pip:\n\n```\n$ pip install aioapcaccess\n```\n\n# Usage\n\nThe primary API for getting the status from APCUPS is `aioapcaccess.request_status`.\nIt returns a `collections.OrderedDict` mapping from field names (e.g., \"SERIALNO\") to\ntheir values in string format. What fields are available will depend on the model of\nyour APC UPS, see [APCUPSD manual](http://www.apcupsd.org/manual/) for details.\n\nThe following example shows a typical usage of `aioapcaccess`\n\n```python\nimport asyncio\nimport aioapcaccess\n\nasync def main():\n    result = await aioapcaccess.request_status(host='localhost', port=3551)\n    print(result)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\nThe example above will print the following (prettified and simplified):\n\n```\nOrderedDict([\n  ('APC', '001,036,0879'),\n  ...,\n  ('BATTV', '13.7 Volts'),\n  ('CUMONBATT', '0 Seconds')\n))])\n```\n\nIn addition to `request_status`, we offer the following functions for advanced uses:\n\n- `aioapcaccess.request_raw_status` for getting raw (unparsed) status in `bytes`.\n- `aioapcaccess.parse_raw_status` for parsing the `bytes` to the dict shown above.\n- `aioapcaccess.split_unit` for splitting the supported unit suffix from the value\n  strings, returning a tuple `(value, unit)`. You can check `aioapcaccess.UNITS` for\n  the set of supported units. Note that units are also in the forms of strings\n  (e.g., \"Seconds\", \"Volts\"). If no valid units are found in the value strings, `unit`\n  will be `None`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioapcaccess",
    "package_url": "https://pypi.org/project/aioapcaccess/",
    "platform": null,
    "project_url": "https://pypi.org/project/aioapcaccess/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/aioapcaccess/0.2.1/",
    "requires_dist": [
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-asyncio ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Async version of apcaccess library implemented in python.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17445897,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bbf2c3f30972540c68a28db93461098a3a448c3b3450506a2ffeb00281aec65",
          "md5": "a18cfd2f4f7eb735fb334b759daf0585",
          "sha256": "f48bf2ab2c26c1a947b12405e44af4901ae55a985aa2b3d5d85a629e676411a6"
        },
        "downloads": -1,
        "filename": "aioapcaccess-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a18cfd2f4f7eb735fb334b759daf0585",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5186,
        "upload_time": "2023-02-20T01:39:32",
        "upload_time_iso_8601": "2023-02-20T01:39:32.850534Z",
        "url": "https://files.pythonhosted.org/packages/9b/bf/2c3f30972540c68a28db93461098a3a448c3b3450506a2ffeb00281aec65/aioapcaccess-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bef58e5fded93d913c4d85c7e848c10d39ad6cdeabfe17766751dc7eba81c6b",
          "md5": "35517ef939f9d5b5b891a53b3c046da9",
          "sha256": "3d8d577679c100aa048725769bc3e8682b284f227b95966e222f47c8a5829490"
        },
        "downloads": -1,
        "filename": "aioapcaccess-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35517ef939f9d5b5b891a53b3c046da9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5291,
        "upload_time": "2023-02-21T00:28:26",
        "upload_time_iso_8601": "2023-02-21T00:28:26.200703Z",
        "url": "https://files.pythonhosted.org/packages/3b/ef/58e5fded93d913c4d85c7e848c10d39ad6cdeabfe17766751dc7eba81c6b/aioapcaccess-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96292a38e2795089539a0d637f182720806134280c675de4afef2adfc67b32f2",
          "md5": "b1554f166d933663ad9d8977e9001181",
          "sha256": "f0dd962da5d607a25bb33b4ea632cafd8f59b02995e86c59929f03f8525ef362"
        },
        "downloads": -1,
        "filename": "aioapcaccess-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1554f166d933663ad9d8977e9001181",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 4687,
        "upload_time": "2023-03-26T00:29:21",
        "upload_time_iso_8601": "2023-03-26T00:29:21.666705Z",
        "url": "https://files.pythonhosted.org/packages/96/29/2a38e2795089539a0d637f182720806134280c675de4afef2adfc67b32f2/aioapcaccess-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "96292a38e2795089539a0d637f182720806134280c675de4afef2adfc67b32f2",
        "md5": "b1554f166d933663ad9d8977e9001181",
        "sha256": "f0dd962da5d607a25bb33b4ea632cafd8f59b02995e86c59929f03f8525ef362"
      },
      "downloads": -1,
      "filename": "aioapcaccess-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1554f166d933663ad9d8977e9001181",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 4687,
      "upload_time": "2023-03-26T00:29:21",
      "upload_time_iso_8601": "2023-03-26T00:29:21.666705Z",
      "url": "https://files.pythonhosted.org/packages/96/29/2a38e2795089539a0d637f182720806134280c675de4afef2adfc67b32f2/aioapcaccess-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}