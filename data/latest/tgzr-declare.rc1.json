{
  "info": {
    "author": "Damien \"dee\" Coureau",
    "author_email": "dee909@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha"
    ],
    "description": "[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# tgzr.declare\n\nComponent based UI Declaration and Rendering.\n\nFor now, Qt is the only supported backend. IMGUI is planned for later.\n\nPlease find [installation instruction](#install) at the end of this page.\n\nHere is a screenshot of the component section in Qt demo app:\n![](https://gitlab.com/tgzr/tgzr.declare/-/raw/main/docs/screenshot.PNG)\n\n### A note on `tgzr`\n\n`tgzr.declare` is part of the `tgzr` comunity powered platform but is completely independent from other `tgzr` packages and you can use it without any knowlegde of `tgzr` iteself.\n\nThat being said, `tgzr` is awesone and you should check it out ! ;)\n\nhttps://www.tgzr.org\n\n\n## Synopsis\n\nSome parts of your application will **declare** GUI using **components**, and parts\nof you application will **render** this *declaration* into an actual GUI.\n\nThe *declaration* is held on an object that you can easily dump to `dict` or `json` and re-create from `dict` or `json`.\n\nUsing a *declaration* and render your GUI gives you some nice advantages:\n- It forces the separation of the logic and the GUI since you can not declare your logic with `tgzr.declare`\n- You can build you *declaration* in a procedural way without ever subclassing or instanciating anything yourself. This is pretty enjoyable, you should try it !\n- Your *declaration* has a high abstraction level than a GUI library, giving you the opportunity to leveral and streamline the UX delivered to your users.\n- The *declaration* part and the *render* part of your application may live in different services connected thru the network (REST API, Websocket, grpc, ...)\n- Using the `include` component, you can build a main GUI composed of several sources (python plugins, other services in you distributed application, ...)\n- Since can be turn into jsaon, you can store your *declaration* in a database or in a file, and even let your users customize them !\n\n## UI Declaration\n\nIn order to declare a UI, you will use a `Schema`. \n\n> **Note**:\n    As of today, the only supported schema is called 'Default' and can be accessed as `tgzr.declare.default.schema.DefaultSchema`. This schema is supported by our Qt renderer: `tgzr.declare.qt.renderer.QtRenderer`.\n\nA `Schema` contains all the components you can use with it, along with all the parameters they support. To declare a component, you just need to call it with the parameters you want to use:\n\n```py\nfrom tgzr.declare.default.schema import DefalutSchema as s\n\nmy_button = s.Button(label='This is my button')\n\n```\n\nSome component arguments may need a structure value. For example, every widget-like component of the `DefaultSchema` have a `widget` parameter which let you control widget properties like `enabled` or `visible`. To set those, you can use a `dict`, but the easiest way is to use a dotted notation on the component declaration:\n\n```py\n\nfrom tgzr.declare.default.schema import DefalutSchema as s\n\n# This can be useful programatically:\nwidget_params = dict(enabled=False, visible=True)\nmy_button = s.Button(label='This is my button', widget=widget_params)\n\n# This is equivalent and easier when GUI is written by hand:\nmy_button = s.Button(label='This is my button', widget=widget_params)\nmy_button.widget.enabled = False\nmy_button.widget.visible = True\n\n```\n\n> Tip: Your IDE should provide completion for component names as well as component argument ! A great effort has been given for this while developing `tgzr.declare` and it is a key part in the pleasure of using it !\nIf you don't have completion, see how you can tweak your IDE configuration or consider migrating to visual code ;)\n\nIn order to build you UI you will want to place some components inside other components. This is achieved by using components as context. Here is an example using the `VBox` component which lays out its children vertically:\n\n```py\nfrom tgzr.declare.default.schema import DefalutSchema as s\n\nwith s.VBox():\n  s.Button(label='This is my button')\n\n```\n\nWhen your declaration is done, you will probably want to use it. Our first example was assigning the `Button` component to the `my_button` variable. When using a component as context, you can specify the variable to assign it to and use it later on:\n\n```py\nfrom tgzr.declare.default.schema import DefalutSchema as s\n\nwith s.VBox() as UI:\n  s.Button(label='This is my button')\n\ndo_something_with_my_ui(UI)\n```\n\nUsing this aproach gives you opportinities to split you declaration into separated reusable and potentially procedural functions.\n\nThis example has some of the GUI skiped for non-admin users, and delegates parts of the UI declaration to some plugin:\n\n\n```python\nfrom tgzr.declare.default.schema import DefaultSchema as s\n\nfrom . import admin_tools\nfrom . import business_stuff\n\ndef admin_panel(parent):\n    if admin_tools.is_user_admin():\n        s.button('Kill the server')\n\ndef add_plugin_footer():\n    s.Button(label='Submit')\n\ndef add_plugin_tab(plugin):\n    with s.Tab(label=plugin.name):\n        plugin.declare_gui(layout)\n        add_plugin_footer()\n\ndef get_ui():\n    with s.Tabs() as UI:\n        for plugin in business_stuff.loaded_plugins():\n            add_plugin_tab(parent, plugin)\n\n    return UI\n```\n\n## UI Rendering\n\nIn order to render your ui, you will use a `Renderer` and a host. \n\n> **Note**: As of today, the only provided renderer is `QtRenderer` and can be accessed as `tgzr.declare.qt.renderer.QtRenderer`. This renderer support the `DefaultSchema` we've been using in previous examples.\n\nWith the `QtRenderer`, the host can be a simple `QWidget`:\n\n```py\nfrom qtpy import QtWidgets\nfrom tgzr.declare.qt.renderer import QtRenderer\n\nfrom .gui import get_gui # a function returning you GUI declaration dict\n\n# Create you app and your host:\napp = QtWidgets.QApplication([])\nhost = QtWidgets.QWidget(None)\n\n# Create your renderer using the host widget:\nrenderer = QtRenderer(host)\n\n# render you ui, it will be contained in the host:\nrenderer.render(get_gui())\n\n```\n\nIf you're building an application with a 100% `tgzr.declare` GUI, you may want to use our Qt `App` which does all this boilerplate for you. Using the `@App.setup` decorator, you will receive the app's `QtRenderer` and have the opportunity to configure and use it:\n\n```py\nfrom tgzr.declare.qt.app import App\nfrom .gui import get_gui # a function returning you GUI declaration dict\n\nmy_app = App('My Title')\n\n@app.setup\ndef setup(renderer):\n    renderer.render(get_gui())\n\n```  \n\n## Actions\n\nSome components trigger actions. For example, the `Button` component triggers a `clicked` action. You will implement your application logic by reacting to action. \n\nTo do so, you must set *handler* functions to your `renderer`. Those function will receive many information which will help you decide what to do:\n```py\n# this is the required signature for an action handler:\ndef my_handler(renderer, key, action, context, *args, **kwargs):\n  pass\n\n# this is how you set a handler on your renderer:\nrenderer.set_handler(\n  my_handler, 'some_component_key', 'some_component_action',\n)\n\n```\n> **/!\\\\** We're still in alpha. This signature will probably changed and drop \nthe `renderer` argument.\n\nAmong the arguements received by you handler, the `key` one can be used to identify the component which triggered the action. This key can be specified in the component declaration with the `key` parameter. It defaults to the `ID` parameter, which in turn defaults to `None`.\n\nSo for example, with this declaration, your handler can act differently if the received `key` is `Ok` or `Cancel`:\n```python\nwith s.HBox():\n    s.Stretch()\n    s.Button(key='Ok')\n    s.Button(key='Cancel')\n```\n\nWhen setting handlers, you can optionnally specify the `key` and/or the `action` to indicate what you want to receive. This is handy to dispatch actions to the appropriate handler:\n\n```py\nwith s.VBox():\n    s.Toggle(label=\"Allow overwrite\")\n    s.Button('save_button', label=\"Save\")\n\ndef on_toggled(renderer, key, action, context, checked):\n    print('Toggled', key, checked)\n\ndef on_clicked(renderer, key, action, context):\n    print('clicked', key)\n\ndef on_action(renderer, key, action, context, *args, **kwargs):\n    print('Unhandled action:', key, action, args, kwargs)\n\nrenderer = QtRenderer(host)\n\n# This handler will only receive `clicked` actions:\nrenderer.set_handler(on_clicked, action='clicked')\n\n# This handler will only receive actions from the 'save_button' component:\nrenderer.set_handler(on_clicked, key='save_button')\n\n# This handler will only receive `toggled` actions:\nrenderer.set_handler(on_toggled, action='toggled')\n\n# This handler will receive all otherwise not handled actions:\nrenderer.set_handler(on_action)\n\n```\n\n> **Note**: There is a default handler in the `renderer` which will catch all unhandled actions and print the key and the action type. So you can start building your UI and use it to see what it triggers :)\n\n### The Handle component\n\nSometimes your handler code is only performing some UI related logic. In such case, you may want to define your handler direclty in the UI declaration. This is the purpose of the `Handle` component. It has a `script` parameter where you can provide a string that will be executed as python code. This script will have interesting informations and functions available (in `locals`), see its docstring for more details.\n\nFor example, this `Handle` component will enable the `Button` only if the `Toggle` value is `True`:\n\n```py\ndef add_some_ui(schema):\n    with schema.VBox():\n        schema.Toggle('Confirm', action_key='confirmation')\n        with schema.Button('Submit'):\n            schema.Bind(property_name='enabled', state_key='button_enabled')\n\n      # Initial state value:\n      schema.State(name='button_enabled', value=False)\n\n      # Handling toggle:\n      script = \"set_state('button_enabled', args[0])\"\n      schema.Handler(script=script, key='confirmation')\n```\n\n## States\n\nThe `renderer` contains a `state store`, a dict-like object which can store values associated to a string key.\n\n### Binding properties to states\n\nWhen you need to access a value from your GUI, you will *bind* a component's *property* to a `state` in the renderer's state store. This will ensure the state value and the property value are always syncronized. \n\nOnce a property is binded, you can use the `renderer` to get or set its value.\n\nThe binding is done by using a special value for a component's parameter. This value is built using `SomeSchema.Bind(property_name, state_key)`, like this:\n\n```py\nmy_button = schema.Button(\n    schema.Bind(property_name='label', state_key='my_button_label')\n)\n```\n\nSince this is a very common operation, there is a shorthand you may prefer:\n```py\nmy_button = schema.Button(label='@binded:my_button_label')\n```\n\n### Reading states\n\nOnce a property is binded, you can use the `renderer` to get or set its value.\n\nIn this example, we're using two `Input` components binded to two keys in the state store. The state store can retreive all keys starting with a prefix at once (we call this a namespace). We're leveraging this to turn all the input as the arguments of a callback function `create_user()`:\n\n```py\nfrom tgzr.declare.default.schema import DefaultSchema as s\nfrom my_business import create_user\n\nwith s.HBox() as UI:\n    s.Input('name', value='@binded:form/name')\n    s.Input('email', value='@binded:form/email')\n    s.Button('Submit')\n\ndef on_submit(renderer, key, action, context):\n    create_user_kwargs = renderer.get_states('form/'))\n    create_user(**create_user_kwargs)\n\nrenderer.set_handler(on_submit, key='Submit')\nrenderer.render(UI)\n\n```\n### Updating State\n\n`States` are also used to affect the GUI. If you change the value of a state, any `property` binded to it will update:\n\n```py\nfrom tgzr.declare.default.schema import DefaultSchema as s\n\n# Declare a disabled toggle and a disabled button with their `enabled` property \n# binded to the same state:\nwith s.VBox() as layout:\n    with layout.toggle(label='Overwrite', enable='@binded:form_ui/enabled') as toggle:\n      toggle.widget.enabled = False\n    with layout.button(label='Save', enable='@binded:form_ui/enabled') as button:\n      button.widget.enabled = False\n\nrenderer.update_states({'form_ui/enabled': False})\nrenderer.render(layout)\n\n# the ui is disabled...\n...\n...\n# later, this will enable both the toggle and the button:\nrenderer.update_states({'form_ui/enabled': True})\n\n```\n\nThis can be use on most parameters of the `components`. Not all are bindable, but their documentation will clearly identify the ones you can bind to states.\n\n>**Tip** For now, the easier way to browse component arguments is the `Documentation` view of the `GUI Editor`. See the dedicated section below...\n\n\n### Declaring States\n\nYour declaration can set state value too ! \n\nTo do so, you can use the `State` component:\n```py\nfrom tgzr.declare.default.schema import DefaultSchema as s\n\nwith s.VBox():\n  s.Input(value='@binded:form/name)\n  s.Input(value='@binded:form/email)\n\n  s.State(name='form/name', value='bob')\n  s.State(name='form/email', value='bob@bob.org')\n\n```\n\n>**Tip**: Those `State` components may be declared before or after binding to them. But declaring them before hand may reduce the number of updates on GUI startup.\n\n### State namespacing\n\nIf you are using namespaced states (state keys with a `\"/\"` in them), you may want to use the `States` component.\n\nThis is equivalent as the previous example, but the `\"form\"` namespace is written only once:\n```py\nfrom tgzr.declare.default.schema import DefaultSchema as s\n\nwith s.VBox():\n  s.Input(value='@binded:form/name)\n  s.Input(value='@binded:form/email)\n  with s.States(namespace='form'):\n    s.State(name='name', value='bob')\n    s.State(name='email', value='bob@bob.org')\n\n```\n\nUsing namespaced states is very usefull when you need to gather all the states you will use as arguments for a function or a REST call for example. In the example above, you would be able to call `renderer.get_states(prefix='form/')` and receive a dict with both the `name` and `email` keys. \n\n### Structured States\n\nSome component parameters can accept or require a value with structured data. \n\nFor example, the `columns` property of an `ItemView` can be a list of strings:\n\n```python\ncolumns = [\"Name\", \"EMail\", \"is_super_user\"]\n```\n\nor a list of columns properties:\n```python\ncolumns = [\n    dict(Label='Name', icon='fa.user'),\n    dict(Label='EMail', icon='fa.envelope'),\n    dict('is_super_user', hidden=True, icon='fa.user-plus'),\n]\n```\n\nThe `items` you want to display in the `ItemView` is even more complex !\n\nTo help you provide the appropriate data, you can use their corresponding components.\nHere is an example of `Items` and `Columns` you can use on a `ItemView`.\n```py\nfrom tgzr.declare.default.schema import DefaultSchema as s\nfrom my_business import get_user_list\n\ndef declare_view_states():\n    with s.States(namesapce='my_item_view'):\n        with s.Columns('my_columns'):\n            s.Column(label=\"Name\", icon=\"fa.user\")\n            s.Column(label=\"EMail\", icon=\"fa.envelope\")\n            s.Column(label=\"is_super_user\", hidden=True, icon='fa.user-plus')\n\n        with s.Items('my_users'):\n            for user in get_user_list():\n                with s.Item(user.user_uid) as user:\n                    s.Cell(\n                        column='Name', \n                        value=user.name, \n                        icon=user.icon,\n                    )\n                    s.Cell(\n                        column='EMail', \n                        value=user.email, \n                        background_color=user.email_color,\n                    )\n                    s.Cell(\n                        column='is_super_user', \n                        value=user.is_super_user,\n                    )\n\n```\n\n### Group\n\nWe have seen how the `States` component can be used to \"prefix\" the state you're using in a whole branch of your UI declaration.\n\nThe same can be done with the `Group` component. The difference is that it also acts on the component `actions` ! \n\nIn this example, the `Submit` button will trigger a `form/Clicked` action instead of the default `clicked` action:\n\n```py\nfrom tgzr.declare.default.schema import DefaultSchema as s\n\nwith s.VBox() as UI:\n  with s.Group(namespace='form'):\n    s.Input(value='@binded:name')\n    s.Input(value='@binded:email')\n    s.Button(label='Submit)\n\ndef on_submit(renderer, key, action, context):\n  print('Submitting:', context.get_states('form/'))\n\nrenderer.add_handler(on_submit, action='form/clicked')\n```\n\nThis is particularily useful once you start composing GUI from different source which don't want to mess with each others' states and actions.\n\n## Icons\n\nWe're using `qtawesome` for all icons.\n\n>**Note**: We might migrate to another plaform since we need icon support for other backends than qt, but we will make our best to keep the icon names compatibles and the migration frictionless.\n\nWhen you see an `icon` parameter, you must provide a valid `qtawesome` icon name (there's like 14k icons there, you should be covered ;)) \n\nSee the `qtawesome` doc for more details:\n\nhttps://github.com/spyder-ide/qtawesome#supported-fonts\n\nWe're quite found of the font awesome solid collection 5, which you can browse here:\n\nhttps://fontawesome.com/v5/search?m=free&s=solid\n\nIf you installed the Qt backend (see installation instructions below), you will also have a nice icon browser available in you virtualenv with the command: \n```\n$ qta-browser\n```\n\n## Demo\n\nYou can launch the `demo` with:\n```\npython -m tgzr.declare.qt.demo\n```\n\nIt will showcase many components with some explainations, totally worth looking at :)\n\nYou can also have a look at the `player_app` demo application, its code can be used to explore all the concepts available in the library:\n```\npython -m tgzr.declare.qt.demo.player_app\n```\n\n\n## GUI Editor\n\nWe have a rudimentary GUI editor. You can launch it with:\n```\npython -m tgzr.declare.qt.editor\n```\n\nYou will be presented with 4 panels, from left to right:\n\n![](https://gitlab.com/tgzr/tgzr.declare/-/raw/main/docs/editor_screenshot_annotations.PNG)\n\n- **Documentation**\n\n  Select a component in the component tree and its documentation will appear here.\n  Using the button at the top, you can toggle to \"Source\" mode to see the component source code.\n\n- **Declaration tree**\n\n  Right click to show a list of components to add.\n  If a component is selected, the new one will be created as a child of it.\n\n  You can drag'n'drop component to reorder and reparent them.\n\n  Right click a component to access the menu where you will be able to add/remove properties, etc...\n\n  The \">\" button at the top will load the resulting declaration to the UI view.\n\n  The \">>\" button will do the same + render this UI in the Render View.\n\n- **UI**\n\n  Here you can see and edit the UI as python code or as json (use the central button at the top to toggle between the available modes).\n\n  Using the \"<\" button at the top will load the current displayed UI in the Declaration Tree.\n\n  The \">\" button will render the current displayed UI in the Render View.\n\n- **Render**\n\n  This panel renders the UI you see in the UI panel.\n\n- **State Tree**\n\n  This is not available yet but we plan on adding a 5th panel where you'll be able to see and edit the state values in a tree.\n\n## `DefaultSchema` Component List\n\nThe lib is still in early alpha and the API **will** change. \n\nMost notably, the component list and their name in the `DefaultSchema` both need a curation. We aim at higher level components that we have today.\n\nThat being said, here is the list of components currently available in `DefaultSchema`, along with their parameters:\n\n<details>\n  <summary>Click to expand the components list</summary>\n\n    - Anchor\n        - name\n        - trigger_state\n        - effect\n\n    - Anchors\n        - name\n\n    - Bind\n        - property_name\n        - state_key\n\n    - Button\n        - label\n        - icon\n        - action_key\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Frame\n        - title\n        - checkable\n        - checked\n        - flat\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Group\n        - namespace\n        - affect_states\n        - affect_actions\n\n    - H1\n        - text\n        - word_wrap\n        - fixed_width\n\n    - H2\n        - text\n        - word_wrap\n        - fixed_width\n\n    - H3\n        - text\n        - word_wrap\n        - fixed_width\n\n    - H4\n        - text\n        - word_wrap\n        - fixed_width\n\n    - HBox\n        - debug\n        - stretch\n        - margins\n\n    - Handle\n        - script\n        - key\n        - action\n\n    - Include\n        - source_state\n        - trigger_state\n\n    - Input\n        - value\n        - action_key\n        - realtime\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - ItemView\n        - columns\n        - items\n        - multiple_selection\n        - current_item_state\n        - selected_items_state\n        - group_by\n        - auto_group_separator\n        - auto_expand_groups\n        - sortable\n        - filter\n        - use_filter\n        - decorated_root\n        - header_hidden\n        - icon_size\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Label\n        - text\n        - word_wrap\n        - fixed_width\n        - format\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Layout\n        - debug\n        - stretch\n        - margins\n        - layout_class\n        - orientation\n\n    - LayoutItem\n        - stretch\n        - alignment\n        - separator\n\n    - ListState\n        - name\n\n    - ListStateAppend\n        - value\n\n    - Markdown\n        - text\n        - min_width\n        - min_height\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Menu\n        - label\n        - icon\n        - popup_at_cursor\n        - trigger_state\n\n    - MenuAction\n        - label\n        - icon\n        - checkable\n        - checked\n        - action_key\n        - hovered_action_key\n\n    - Overlay\n        - name\n        - visible\n        - enabled\n\n    - PrintContextButton\n\n    - PrintStatesButton\n\n    - Set\n        - name\n        - value\n\n    - Splitter\n        - orientation\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - SplitterPanel\n        - layout_orientation\n        - layout_stretch\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - State\n        - name\n        - value\n\n    - States\n        - namespace\n\n    - Stretch\n\n    - Tab\n        - title\n        - icon\n        - layout_orientation\n        - layout_stretch\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Tabs\n        - closable\n        - movable\n        - current\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - Text\n        - text\n        - word_wrap\n        - fixed_width\n\n    - Toggle\n        - label\n        - value\n        - action_key\n        - widget\n        - widget\n            - widget_class\n            - enabled\n            - visible\n            - tooltip\n            - layout\n            - layout\n                - stretch\n                - alignment\n                - separator\n\n    - VBox\n        - debug\n        - stretch\n        - margins\n\n    - Widget\n        - widget_class\n        - enabled\n        - visible\n        - tooltip\n        - layout\n        - layout\n            - stretch\n            - alignment\n            - separator\n\n</details>\n\nThis list was generated by running:\n```\npython -m tgzr.declare.default.schema\n```\nYou will have the list corresponding to your version if you run this command yourself.\n## Install<a name=\"install\"></a>\n\n### For Declaration\n\nInstall the bare package if you only need to declare UIs. This install will have no dependency to any backend libraries and will be compatible with headless environments:\n\n`pip install tgzr.declare`\n\n>**Note**: With this, an ImportError could be raised when importing `tgzr.declare.qt` and anything under it. See the 'For Rendering' section below for an installation handling declaration AND rendering.\n### For Rendering\n\nInstall with some extra(s) requirement to specify the backend you want to use. For now, `Qt` is the only supported backend.\n\nIf you have a Qt wrapper install by other mean, just use the `qtpy` extra:\n\n`pip install -U tgzr.declare[qtpy]`\n\nIf you don't have any Qt wrapper installed, you can add the `PySide2` extra: \n\n`pip install -U tgzr.declare[qtpy,PySide2]`\n\nWith these, you will be able to use `tgzr.declare.qt.QtRenderer` to render your UI.\n\n>**Note**: All `tgzr.declare` installation can be used to declare some GUI, so those command actually install the declaration AND the rendering parts.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/TGZR/tgzr.declare",
    "keywords": "",
    "license": "LGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tgzr.declare",
    "package_url": "https://pypi.org/project/tgzr.declare/",
    "platform": "",
    "project_url": "https://pypi.org/project/tgzr.declare/",
    "project_urls": {
      "Homepage": "https://gitlab.com/TGZR/tgzr.declare"
    },
    "release_url": "https://pypi.org/project/tgzr.declare/0.0.1rc1/",
    "requires_dist": [
      "six",
      "pydantic",
      "PySide2 ; extra == 'pyside2'",
      "tox ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "black ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "qtpy ; extra == 'qtpy'",
      "qtawesome ; extra == 'qtpy'",
      "qt-material ; extra == 'qtpy'",
      "markdown ; extra == 'qtpy'",
      "pygments ; extra == 'qtpy'"
    ],
    "requires_python": ">=3.7",
    "summary": "Component UI",
    "version": "0.0.1rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13071745,
  "releases": {
    "0.0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf86d17b544b5849d0aab629cb2229233bb282aade8db6dd46e48995f7f87aaf",
          "md5": "e492a55882bff77d79bcc5627bdbc9ea",
          "sha256": "81124a4fc16e2e3224766dcfb4e40a5ebe7be017e0057ecac509d55491f34568"
        },
        "downloads": -1,
        "filename": "tgzr.declare-0.0.1rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e492a55882bff77d79bcc5627bdbc9ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 108858,
        "upload_time": "2022-03-03T18:44:32",
        "upload_time_iso_8601": "2022-03-03T18:44:32.694155Z",
        "url": "https://files.pythonhosted.org/packages/bf/86/d17b544b5849d0aab629cb2229233bb282aade8db6dd46e48995f7f87aaf/tgzr.declare-0.0.1rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6991f094647c77a0f4e2825f5a4357b3253485b25fd6c7140d16258c1f4f49b8",
          "md5": "155981a5a29c639037dbaee9c013a225",
          "sha256": "178478e227356f30608235e5db4e74403856e4b1a0d8a76d5fa1b7a738fe1ed0"
        },
        "downloads": -1,
        "filename": "tgzr.declare-0.0.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "155981a5a29c639037dbaee9c013a225",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 112755,
        "upload_time": "2022-03-03T18:44:36",
        "upload_time_iso_8601": "2022-03-03T18:44:36.413649Z",
        "url": "https://files.pythonhosted.org/packages/69/91/f094647c77a0f4e2825f5a4357b3253485b25fd6c7140d16258c1f4f49b8/tgzr.declare-0.0.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf86d17b544b5849d0aab629cb2229233bb282aade8db6dd46e48995f7f87aaf",
        "md5": "e492a55882bff77d79bcc5627bdbc9ea",
        "sha256": "81124a4fc16e2e3224766dcfb4e40a5ebe7be017e0057ecac509d55491f34568"
      },
      "downloads": -1,
      "filename": "tgzr.declare-0.0.1rc1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e492a55882bff77d79bcc5627bdbc9ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 108858,
      "upload_time": "2022-03-03T18:44:32",
      "upload_time_iso_8601": "2022-03-03T18:44:32.694155Z",
      "url": "https://files.pythonhosted.org/packages/bf/86/d17b544b5849d0aab629cb2229233bb282aade8db6dd46e48995f7f87aaf/tgzr.declare-0.0.1rc1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6991f094647c77a0f4e2825f5a4357b3253485b25fd6c7140d16258c1f4f49b8",
        "md5": "155981a5a29c639037dbaee9c013a225",
        "sha256": "178478e227356f30608235e5db4e74403856e4b1a0d8a76d5fa1b7a738fe1ed0"
      },
      "downloads": -1,
      "filename": "tgzr.declare-0.0.1rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "155981a5a29c639037dbaee9c013a225",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 112755,
      "upload_time": "2022-03-03T18:44:36",
      "upload_time_iso_8601": "2022-03-03T18:44:36.413649Z",
      "url": "https://files.pythonhosted.org/packages/69/91/f094647c77a0f4e2825f5a4357b3253485b25fd6c7140d16258c1f4f49b8/tgzr.declare-0.0.1rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}