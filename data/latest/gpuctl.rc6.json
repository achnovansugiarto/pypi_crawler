{
  "info": {
    "author": "Edward Yang",
    "author_email": "edwardyangyang@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# GPU Monitoring and Failure Notification/Recovery\n\n[![CircleCI](https://circleci.com/gh/Ed-Yang/gpuctl.svg?style=svg)](https://circleci.com/gh/Ed-Yang/gpuctl)\n\nWhile in minging crytocurrency with GPU, although the GPU has built-in thermal control,\nbut it might not be fitted in some environment and cause hash rate decreases or even GPU\nfaults.  This project provides a tool to:\n\n- According the detected temperature to change fan speed\n- Execute custom action scripts while current temperature of GPU(s) is over a defined threshold\n- Execute custom action scripts while current hash rate of GPU(s) is under a defined threshold\n\nCurrently, the example of action script are based on the [miner's remote managemen API](https://github.com/ethereum-mining/ethminer/blob/master/docs/API_DOCUMENTATION.md), for different miner, it might be needed to customize locally.\n\n\n## Environment and Installation\n\nIntel CPU/16G RAM\nUbuntu 18.4/Python3\n\n* Environment setup\n\n    For configuring Nvidia's GPU (ie. fan), it is needed to set the following environment.\n\n    In ~/.profile and/or ~/.bashrc, add:\n\n    ```shell\n    export DISPLAY=:0\n    export NO_AT_BRIDGE=1\n    export XAUTHORITY=/var/run/lightdm/root/:0\n    ```\n\n    In some shell script examples, it is needed to invoke the miner executive:\n\n    ```shell\n    export PHOENIX_PATH=<path-to-phoenixminer-root>\n    export NSF_PATH=<path-to-nsfxminer-root>\n    ```\n\n    and also the wallet and pool address:\n\n    ```shell\n    export ETH_WALLET=<your-ethereum-wallet-address> # 0x\n    export ETH_POOL=<your-favorite-pool> # ex. asia1.ethermine.org:4444\n    ```\n\n* Installation from PyPI\n\n    Setup Python vitual environment:\n\n    ```shell\n    cd gpuctl\n    python3 -m venv venv\n    source ./venv/bin/activate\n    ```\n\n    ```shell\n    pip insall gpuctl\n    ```\n\n* Installation from source\n\n    ```shell\n    git clone https://github.com/Ed-Yang/gpuctl\n    ```\n\n    Setup Python vitual environment:\n\n    ```shell\n    cd gpuctl\n    python3 -m venv venv\n    source ./venv/bin/activate\n    pip install -r requirements.txt\n    ```\n\n    Install gpuctl:\n\n    ```shell\n    pip install .\n    ```\n\n    After completed the above procedure, before you run the gpuctl, you only need to to run:\n\n    ```shell\n    source ./venv/bin/activate\n    ```\n\n## Interaction with miners\n\nFor the the under rate detection feature, it need to retreive the current hashrate of miner through the network management API\nof miner.\n\nThe following exapmple setup a netowrk management port on TCP port 3333.\n\n* ethminer/nsfminer, additional parameters:\n\n    --HWMON 2 --api-port -3333  \n    or  \n    --HWMON 2 --api-bind 127.0.0.1:3333  \n\n* Phoenixminer, additional parameters ([check section 3](https://bitcointalk.org/index.php?topic=2647654.0)):\n\n    -cdm 2 -cdmport 3333  \n\nTo test if the miner's network management function is correctly enabled:\n\n    ```shell\n    ./scripts/get-rate.sh 3333\n    ```\n\n* Example of script for running PhonenixMiner and nsfminer\n\nFor utilizing the miner's script, it have to define:\n\n    ```\n    export PHOENIX_PATH=<path-to-phoenixminer-root>\n    export NSF_PATH=<path-to-nsfxminer-root>\n\n    export ETH_WALLET=<your-ethereum-wallet-address> # 0x\n    export ETH_POOL=<your-favorite-pool> # ex. asia1.ethermine.org:4444\n    ```\n\n    pm-dev.sh <n>: start PhoenixMiner on device <n>, n is starting from zero\n    pm-all.sh : start PhoenixMiner all GPU devices\n    nsf-dev.sh <n>: start nsfminer on device <n>, n is starting from zero\n    nsf-all.sh : start PhoenixMiner all GPU devices\n\n## GpuCtl\n\nSome parameters are applying to every GPU on whole system (like interval, curve, etc.),\nif it is necessary to provide specific setting for a GPU, it is able to run seperate\ngpuctl instance with expected parametets.\n\n* Usage\n\n    ```shell\n    gpuctl --help\n    ```\n\n    ```shell\n    usage: gpuctl [-h] [-l] [-s SLOTS] [-a] [-n] [--interval INTERVAL]\n                [--wait WAIT] [--set-speed [0-100]] [-f FAN] [-d DELTA]\n                [--curve CURVE] [--temp TEMP] [--tas TAS] [--scan] [-v] [-V]\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -l, --list            list all GPU cards\n    -s SLOTS, --slots SLOTS\n                            use PCI slot name to locate GPU (ie.\n                            0000:01:00.0/0000:01:00.1)\n    -a, --amd             only use AMD GPU\n    -n, --nvidia          only use Nvidia GPU\n    --interval INTERVAL   monitoring interval\n    --wait WAIT           seconds before report failure\n    --set-speed [0-100]   set the fan speed (0~100)\n    -f FAN, --fan FAN     if temperature is exceed than FAN once, activate fan\n                            control (default:70)\n    -d DELTA, --delta DELTA\n                            set fan speed if temperature diff % is over DELTA\n                            (defaut:2)\n    --curve CURVE         set temp/fan-speed curve (ie. 0:0/10:10/80:100)\n    --temp TEMP           over temperature action threshold\n    --tas TAS             over temperature action script\n    --scan                list miner through network inquiry\n    -v, --verbose         show debug message\n    -V, --version         show version info\n    ```\n\n* Slot Name\n\nThe slot name of each GPU card could be found by using \"lspci -D\" command.\nIn the following output, the slot name of AMD GPU card is \"0000:01:00.0\".\n\n    ```shell\n    lspci -D\n    ```\n\n    ```shell\n    0000:01:00.0 VGA compatible controller....\n    ```\n\n* Action scripts\n\nA few examples of action script are provided for reference, besides it is feasible to write a script to send syslog, email or telegram message, etc.\n\n- scripts/gpu-failure.sh: shutdown system and schedule reboot\n- scripts/restart.sh: restart miner\n- scripts/reboot.sh: reboot rig\n\nIf a failure is detected, the gpuctl will invoke the given script with slot name as argument.\n\n\n### Examples\n\n* Example 1) List status of GPU cards \n\n    ```shell\n    gpuctl --list\n    ```\n\n    ```shell\n    ID Slot Name    Vendor   PCI-ID      Temp. Fan  PWR    Working\n    -- ------------ -------- ----------- ----- ---- ------ -------\n    1 0000:01:00.0 NVIDIA   [10DE:1C03]  54c  10%  73.63w True\n    2 0000:0b:00.0 AMD      [1002:67DF]  61c  60%  80.00w True\n    3 0000:0d:00.0 NVIDIA   [10DE:1C03]  47c   0%  76.18w True\n    ```\n\n    Retreive GPU's status through network management API:\n\n    Note, if the miner is running as root priviledge, it must invoke with \"sudo\".\n\n    ```shell\n    sudo gpuctl --scan\n    ```\n\n    ```shell\n    Miner : nsfminer-1.3.12+, tcp port: 3333, pid: 10208\n    Uptime: 960s\n    Rate(kh) Temp Fan  \n    ======== ==== ==== \n    18800  58c  11%\n    26939  60c  60%\n    19933  48c   0%\n    ```\n\n* Example 2) Set the fan speed of all GPUs to 50%\n\n    ```shell\n    sudo gpuctl --set-speed 50\n    ```\n\n    ```shell\n    ID Slot Name    Vendor   PCI-ID      Temp. Fan  PWR     Working\n    -- ------------ -------- ----------- ----- ---- ------- -------\n    1 0000:01:00.0  NVIDIA   [10DE:1C03]   61c  50%  74.76w True\n    2 0000:0b:00.0  AMD      [1002:67DF]   78c  47%  81.00w True\n    3 0000:0d:00.0  NVIDIA   [10DE:1C03]   49c  50%  72.60w True\n    ```\n\n* Example 3) If the temperature of a GPU is over 65c, activate the fan speed control for the specific GPU.\n\n    ```shell\n    sudo gpuctl --fan 65\n    ```\n\n    ```shell\n    ID Slot Name    Vendor   PCI-ID      Temp. Fan  PWR     Working\n    -- ------------ -------- ----------- ----- ---- ------- -------\n    1 0000:01:00.0 NVIDIA   [10DE:1C03]   60c  50%  76.08w True\n    2 0000:0b:00.0 AMD      [1002:67DF]   77c  80%  81.00w True\n    3 0000:0d:00.0 NVIDIA   [10DE:1C03]   49c  50%  74.41w True\n\n\n    gpuctl: started\n\n    12:22:25 INFO     query intervel: 5 wait-time: 120\n    12:22:25 INFO     temperature threshold: 85\n    12:22:25 INFO     fan control threshold: 65\n    12:22:25 INFO     script: None\n\n\n    12:22:30 INFO     [0000:0b:00.0/AMD] current temp. 75c set speed 84%\n    12:22:35 INFO     [0000:0b:00.0/AMD] current temp. 72c set speed 72%\n    12:22:50 INFO     [0000:0b:00.0/AMD] current temp. 76c set speed 84%\n    12:23:00 INFO     [0000:0b:00.0/AMD] current temp. 73c set speed 72%\n    12:23:10 INFO     [0000:0b:00.0/AMD] current temp. 70c set speed 72%\n    12:23:36 INFO     [0000:0b:00.0/AMD] current temp. 67c set speed 61%\n    ```\n\n* Example 4)  **nsfminer** If the temeprature of a GPU is over 75c for 10s, call action script \"restart.sh\" to restart miner\n\n    Note, the Phoenix might not be corectly restared through network command, so this mechanism only suitable for nsfminer.\n\n    T\n\n    ```shell\n    sudo gpuctl --temp 75 --wait 10 --tas ./scripts/restart.sh \n    ```\n\n    ```shell\n    ID Slot Name    Vendor   PCI-ID      Temp. Fan  PWR     Working\n    -- ------------ -------- ----------- ----- ---- ------- -------\n    1 0000:01:00.0 NVIDIA   [10DE:1C03]   52c  11%  73.90w True\n    2 0000:0b:00.0 AMD      [1002:67DF]   56c  60%  80.00w True\n    3 0000:0d:00.0 NVIDIA   [10DE:1C03]   46c   0%  75.48w True\n\n\n    gpuctl: started\n\n    12:49:00 INFO     query intervel: 5 wait-time: 10\n    12:49:00 INFO     temperature threshold: 75\n    12:49:00 INFO     fan control threshold: None\n    12:49:00 INFO     script: ./scripts/restart.sh\n\n\n    12:51:07 WARNING  [0000:0b:00.0/AMD] over temperature 75c, exec ./scripts/restart.sh\n    12:51:07 INFO     exec script ./scripts/restart.sh 0000:0b:00.0 no_wait False\n\n    ID Slot Name    Vendor   PCI-ID      Temp. Fan  PWR     Working\n    -- ------------ -------- ----------- ----- ---- ------- -------\n    1 0000:0b:00.0 AMD      [1002:67DF]   78c  60%  82.00w True\n    ```\n\n    In the nsfminer's terminal:\n\n    ```shell\n    12:51:07 miner API : Method miner_restart requested\n    12:51:07 miner Restart miners...\n    12:51:07 miner Shutting down miners...\n    12:51:07 miner Spinning up miners...\n    ```\n\n* Example 5) For every GPU, if its temeprature is over 75c for 10s, call failure action script\n\n    Note, invoking gpu-failure.sh will shutdown the system and schedulee to restart at 5 minutes later.\n\n    ```shell\n    sudo gpuctl --temp 75 --wait 10 --tas ./scripts/gpu-failure.sh \n    ```\n\n    ```shell\n    ID Slot Name    Vendor   PCI-ID      Temp. Fan  PWR     Working\n    -- ------------ -------- ----------- ----- ---- ------- -------\n    1 0000:01:00.0 NVIDIA   [10DE:1C03]   56c  11%  75.99w True\n    2 0000:0b:00.0 AMD      [1002:67DF]   61c  60%  81.00w True\n    3 0000:0d:00.0 NVIDIA   [10DE:1C03]   48c   0%  75.49w True\n\n\n    gpuctl: started\n\n    13:11:17 INFO     query intervel: 5 wait-time: 10\n    13:11:17 INFO     temperature threshold: 75\n    13:11:17 INFO     fan control threshold: None\n    13:11:17 INFO     script: ./scripts/gpu-failure.sh\n\n\n    13:12:23 WARNING  [0000:0b:00.0/AMD] over temperature 75c, exec ./scripts/gpu-failure.sh\n    13:12:23 INFO     exec script ./scripts/gpu-failure.sh 0000:0b:00.0 no_wait False\n    ```\n\n## EthCtl\n\n* Usage\n\n    ```shell\n    ethctl --help\n    ```\n\n    ```shell\n    usage: ethctl [-h] [-l] [-b BASE] [--interval INTERVAL] [-w WAIT] [-t TEMP]\n                [-r RATE] [--rmode RMODE] [-d DELAY] [-s SCRIPT] [-v] [-V]\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -l, --list            list all miners\n    -b BASE, --base BASE  tcp port offset, ie. device N is listened on base + N\n    --interval INTERVAL   monitoring interval\n    -w WAIT, --wait WAIT  count down interval\n    -t TEMP, --temp TEMP  over temperature action threshold\n    -r RATE, --rate RATE  under rate threshold (default: 2000 kh)\n    --rmode RMODE         failure restart, 0: none, 1: net restart, 2: kill\n    -d DELAY, --delay DELAY\n                            delay before calling the action script\n    -s SCRIPT, --script SCRIPT\n                            calling to script on failure\n    -v, --verbose         show debug message\n    -V, --version         show version info\n    ```\n\n### Examples\n\n* Example 1) List all miner with network management function enabled\n\n    ```shell\n    ethctl --list\n    ```\n\n    ```shell\n    Miner : nsfminer-1.3.12+, tcp port: 3333, pid: 19526\n    Uptime: 92100s\n    Rate(kh) Temp Fan  \n    ======== ==== ==== \n       18794  58c  50%\n       26624  62c  47%\n       19898  47c  50%\n    ```\n\n* Example 2) **PhoenixMiner** if the highest of temeprature of miner's GPU(s) is over 75c, \nor the lowest hashrate under 2 Mh/s call for 120s, \nkill the miner's process and call action script to restart miner\n\nUse PhoenixMiner 5.3b as example:\n\n    Start miner:\n\n    ```shell\n    ./scripts/pm-all.sh\n    ```\n\n    Open a new terminal and run:\n\n    ```shell\n    ethctl -t 75 -r 2000 --rmode 2 -d 120 -s ./scripts/pm-all.sh\n    ```\n\n    ```shell\n    Miner : 'PM 5.3b'   \n    Uptime: 0s\n    Rate(kh) Temp Fan  \n    ======== ==== ==== \n           0  48c  48%\n\n\n    ethctl: started\n\n    23:29:52 INFO     query intervel: 5 wait-time: 120\n    23:29:52 INFO     temperature: 75c hashrate: 2000 kh/s\n    23:29:52 INFO     restart mode: 2 script: ./scripts/pm-all.sh\n\n\n    23:30:43 INFO     add miner 'PM 5.3b - ETH':3333 pid 27381\n    23:33:20 WARNING  'PM 5.3b - ETH':3333 dev 0 rate 0 under threshold\n    23:33:20 WARNING  'PM 5.3b - ETH':3333 dev 0 temp [72] rate [0]\n    23:33:20 INFO     'PM 5.3b - ETH':3333 dev 0 restarting pid 27381 mode 2 \n    23:33:20 INFO     'PM 5.3b - ETH':3333 miner removed\n    23:33:20 INFO     'PM 5.3b - ETH':3333 delay 120 exec ./scripts/pm-all.sh 0 3333 72 0\n    ```\n\n* Example 3) **nsfminer** if the highest of temeprature of miner's GPU(s) is over 75c, \nor the lowest hashrate under 2 Mh/s call for 60s, \nrestart the miner's process\n\nUse PhoenixMiner 5.3b as example:\n\n    Start miner:\n\n    ```shell\n    ./scripts/nsf-dev.sh 1\n    ```\n\n    Open a new terminal and run:\n\n    ```shell\n    ethctl -t 75 -r 2000 --rmode 2 -w 30 --delay 120 -s ./scripts/nsf-all.sh\n    ```\n\n    ```shell\n    Miner : 'PM 5.3b'   \n    Uptime: 0s\n    Rate(kh) Temp Fan  \n    ======== ==== ==== \n        0  48c  48%\n\n\n    ethctl: started\n\n    23:29:52 INFO     query intervel: 5 wait-time: 120\n    23:29:52 INFO     temperature: 75c hashrate: 2000 kh/s\n    23:29:52 INFO     restart mode: 2 script: ./scripts/pm-all.sh\n\n\n    23:30:43 INFO     add miner 'PM 5.3b - ETH':3333 pid 27381\n    23:33:20 WARNING  'PM 5.3b - ETH':3333 dev 0 rate 0 under threshold\n    23:33:20 WARNING  'PM 5.3b - ETH':3333 dev 0 temp [72] rate [0]\n    23:33:20 INFO     'PM 5.3b - ETH':3333 dev 0 restarting pid 27381 mode 2 \n    23:33:20 INFO     'PM 5.3b - ETH':3333 miner removed\n    23:33:20 INFO     'PM 5.3b - ETH':3333 delay 120 exec ./scripts/pm-all.sh 0 3333 72 0\n    ```\n\n* Run Test Cause\n\n    ```shell\n    python3 -m unittest discover tests\n    ```\n\n## Diagnostics\n\n* Monitor AMD GPU card\n\n    ```shell\n    # HiveOS\n    sudo watch -c -n 2 amd-info\n    ```\n\n* Monitor Nvidia GPU card\n\n    ```shell\n    # HiveOS\n    sudo watch -c -n 2 nvidia-info\n    ```\n\n    or\n\n    ```shell\n    sudo watch -c -n 2 nvidia-smi\n    ```\n\n## Q/A\n\n* nvidia Unable to init server: Could not connect: Connection refused\n\n    In ~/.profile and/or ~/.bashrc, add:\n\n    ```shell\n    export DISPLAY=:0\n    export XAUTHORITY=/var/run/lightdm/root/:0\n    ```\n\n* (nvidia-settings:15781): dbind-WARNING **: 04:46:56.622....\n\n    In ~/.profile and/or ~/.bashrc, add:\n\n    ```shell\n    export NO_AT_BRIDGE=1\n    ```\n\n## Reference\n\n* [Fan controller for amdgpus](https://github.com/chestm007/amdgpu-fan.git)\n* [Ethminer's API](https://github.com/ethereum-mining/ethminer/blob/master/docs/API_DOCUMENTATION.md#list-of-requests)\n* [GPUFan](https://github.com/milani/gpufan)\n* [PyOpenCL Samples](https://github.com/virus-warnning/pyopencl_samples)\n* [Associating OpenCL device ids with GPUs](https://anteru.net/blog/2014/associating-opencl-device-ids-with-gpus/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Ed-Yang/gpuctl/archive/refs/tags/0.3.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ed-Yang/gpuctl",
    "keywords": "gpu amd nvidia ai pytorch tensorflow torch mining ethereum bitcoin cryptocurrency ethminer nsfminer phoenixminer",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gpuctl",
    "package_url": "https://pypi.org/project/gpuctl/",
    "platform": "",
    "project_url": "https://pypi.org/project/gpuctl/",
    "project_urls": {
      "Download": "https://github.com/Ed-Yang/gpuctl/archive/refs/tags/0.3.6.tar.gz",
      "Homepage": "https://github.com/Ed-Yang/gpuctl"
    },
    "release_url": "https://pypi.org/project/gpuctl/0.3.6/",
    "requires_dist": [
      "setuptools",
      "wheel",
      "pynvml"
    ],
    "requires_python": ">=3",
    "summary": "GPU contorl and failure notification/recovery",
    "version": "0.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10092836,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d12a783d166fb89ecbd158882c9b577a87479acf9bdf636c1395556d55a90551",
          "md5": "14f65e8cc59062c6add9f168babf28ba",
          "sha256": "8663665f8b969bc488e5d975fb560404521ae9698e359b7b1c2259a301fcff50"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14f65e8cc59062c6add9f168babf28ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 18744,
        "upload_time": "2021-04-11T03:41:34",
        "upload_time_iso_8601": "2021-04-11T03:41:34.429115Z",
        "url": "https://files.pythonhosted.org/packages/d1/2a/783d166fb89ecbd158882c9b577a87479acf9bdf636c1395556d55a90551/gpuctl-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1133b0cd3a0bbfe08133bc869eb7b167b1c1d3ee1bb3c9b8c8849604764b4ae7",
          "md5": "6bd0783ed9fb427180acd4dba68fa237",
          "sha256": "d2a3f74f3ce2e8b0774fcaeea4af0096a4261486cc730cffc2c649f654d78fba"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6bd0783ed9fb427180acd4dba68fa237",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 18752,
        "upload_time": "2021-04-11T06:36:22",
        "upload_time_iso_8601": "2021-04-11T06:36:22.060650Z",
        "url": "https://files.pythonhosted.org/packages/11/33/b0cd3a0bbfe08133bc869eb7b167b1c1d3ee1bb3c9b8c8849604764b4ae7/gpuctl-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0000bc2133df6bade2b5a0e7184105c29a6dfe5f462e70e34131a0d65062a58",
          "md5": "56c0983320574188e2c7eddfb8c741be",
          "sha256": "354f5ca877c7908a28fcd3dea4dde16e71a8602d0460986d305ae07188f0534a"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "56c0983320574188e2c7eddfb8c741be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 18736,
        "upload_time": "2021-04-11T06:43:41",
        "upload_time_iso_8601": "2021-04-11T06:43:41.729748Z",
        "url": "https://files.pythonhosted.org/packages/b0/00/0bc2133df6bade2b5a0e7184105c29a6dfe5f462e70e34131a0d65062a58/gpuctl-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0583c6cd573eff911b99b130d69501c92940549a4bb71c62298343054b9ad05a",
          "md5": "295018377ef90d61ea29ec84f327d1a6",
          "sha256": "26b57d98ae018dcb83cfae67bb240e4682592793df5472a2204502b81566d9f2"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "295018377ef90d61ea29ec84f327d1a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 18508,
        "upload_time": "2021-04-11T07:05:22",
        "upload_time_iso_8601": "2021-04-11T07:05:22.367738Z",
        "url": "https://files.pythonhosted.org/packages/05/83/c6cd573eff911b99b130d69501c92940549a4bb71c62298343054b9ad05a/gpuctl-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e06ef28f90a28b62ee4be4648efc9fa141a8630101e0cbc711c257e8b8d6c77",
          "md5": "c929d479395f6fb095a97d692ed486ea",
          "sha256": "93ec8ea6ccb867d70f7d152d187fb27e1d8de2cff520d477b7ec8de32bba6167"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c929d479395f6fb095a97d692ed486ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 18759,
        "upload_time": "2021-04-11T07:05:24",
        "upload_time_iso_8601": "2021-04-11T07:05:24.396819Z",
        "url": "https://files.pythonhosted.org/packages/1e/06/ef28f90a28b62ee4be4648efc9fa141a8630101e0cbc711c257e8b8d6c77/gpuctl-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69f3c3819acc9f0aee1d25e54bfd7821cbd62a1db85803fefc213c761afae13b",
          "md5": "ac53c3ab99e059a31baeb7dfe2c9efc6",
          "sha256": "88e4ec4a4e6c4302b17572f410769f95d6e234dcf9e5ec8d079ade283f01b314"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac53c3ab99e059a31baeb7dfe2c9efc6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 20680,
        "upload_time": "2021-04-14T16:22:54",
        "upload_time_iso_8601": "2021-04-14T16:22:54.014782Z",
        "url": "https://files.pythonhosted.org/packages/69/f3/c3819acc9f0aee1d25e54bfd7821cbd62a1db85803fefc213c761afae13b/gpuctl-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ba9d94522163fd7f132c967505a7c4f332858b287cd354b7b83d76cd9b854d5",
          "md5": "b0b1396d1cadebf0146bfffcda11b3eb",
          "sha256": "8f52333b6e28c9cc503d865b337ea1d4d80bde4f87778b75ca2a828d92672cc0"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b0b1396d1cadebf0146bfffcda11b3eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 20535,
        "upload_time": "2021-04-14T16:22:56",
        "upload_time_iso_8601": "2021-04-14T16:22:56.058780Z",
        "url": "https://files.pythonhosted.org/packages/9b/a9/d94522163fd7f132c967505a7c4f332858b287cd354b7b83d76cd9b854d5/gpuctl-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e042fc818a8d5cd60d584307770dc5f514d355751092baeb554aa06f199bae2b",
          "md5": "d57dee2655aadb7bad1dc96606eeea91",
          "sha256": "e841703f3ddb8bccf755280441f6f787b998d2f70068f24f4b0243ba6074baad"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d57dee2655aadb7bad1dc96606eeea91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 26724,
        "upload_time": "2021-04-17T13:34:31",
        "upload_time_iso_8601": "2021-04-17T13:34:31.850220Z",
        "url": "https://files.pythonhosted.org/packages/e0/42/fc818a8d5cd60d584307770dc5f514d355751092baeb554aa06f199bae2b/gpuctl-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baf39309d284dfee67fc4cf5972b650fea80f9f5285767abccaa9723435a0c9f",
          "md5": "15976d48e785e5e19dca8737bd830f22",
          "sha256": "d15b6397fc3923e20f1aad5c1db32a9cfc8d8c2c4279ab4adbbafa622c2960ea"
        },
        "downloads": -1,
        "filename": "gpuctl-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "15976d48e785e5e19dca8737bd830f22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 22282,
        "upload_time": "2021-04-17T13:34:33",
        "upload_time_iso_8601": "2021-04-17T13:34:33.546102Z",
        "url": "https://files.pythonhosted.org/packages/ba/f3/9309d284dfee67fc4cf5972b650fea80f9f5285767abccaa9723435a0c9f/gpuctl-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e042fc818a8d5cd60d584307770dc5f514d355751092baeb554aa06f199bae2b",
        "md5": "d57dee2655aadb7bad1dc96606eeea91",
        "sha256": "e841703f3ddb8bccf755280441f6f787b998d2f70068f24f4b0243ba6074baad"
      },
      "downloads": -1,
      "filename": "gpuctl-0.3.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d57dee2655aadb7bad1dc96606eeea91",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 26724,
      "upload_time": "2021-04-17T13:34:31",
      "upload_time_iso_8601": "2021-04-17T13:34:31.850220Z",
      "url": "https://files.pythonhosted.org/packages/e0/42/fc818a8d5cd60d584307770dc5f514d355751092baeb554aa06f199bae2b/gpuctl-0.3.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "baf39309d284dfee67fc4cf5972b650fea80f9f5285767abccaa9723435a0c9f",
        "md5": "15976d48e785e5e19dca8737bd830f22",
        "sha256": "d15b6397fc3923e20f1aad5c1db32a9cfc8d8c2c4279ab4adbbafa622c2960ea"
      },
      "downloads": -1,
      "filename": "gpuctl-0.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "15976d48e785e5e19dca8737bd830f22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 22282,
      "upload_time": "2021-04-17T13:34:33",
      "upload_time_iso_8601": "2021-04-17T13:34:33.546102Z",
      "url": "https://files.pythonhosted.org/packages/ba/f3/9309d284dfee67fc4cf5972b650fea80f9f5285767abccaa9723435a0c9f/gpuctl-0.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}