{
  "info": {
    "author": "Martin Fünffinger",
    "author_email": "martinfl633@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "PyPlanets\n=========\n\n   **Library of astronomical algorithms to compute planetary ephemeris\n   written in Python**.\n\nPyPlanets at its current state is basically a refactored version of\nPyMeeus. PyMeeus itself is a Python implementation of the astronomical\nalgorithms described in the classical book \"Astronomical Algorithms, 2nd\nEdition, Willmann-Bell Inc. (1998)\" by Jean Meeus. The original author\nof PyMeeus is Dagoberto Salazar. This fork is based on commit\n``9b25a79``\n(https://github.com/architest/pymeeus/commit/9b25a790999251afd5d68c074e144df9f74a6dfd).\n\nWhy refactor PyMeeus?\n---------------------\n\nThat’s a valid question of course, especially since no (or only little)\nfunctional enhancements are made. But that is also part of the answer.\nLooking for astronomical libraries to \"play around\", I stumbled across\nPyMeeus which really gets most of the job done. On the other hand, when\ntrying to extend PyMeeus with some features I got myself lost a bit in\nthe functional coding so I decided to restructure and refactor the code\nbase to my liking (and experience) before adding new features.\n\nMain guiding principles for refactoring have been object-orientation and\na clearer separation of concerns to ease the handling of the modules and\nfacilitate extensibility. As a side-effect it is now e.g. straight\nforward to compute e.g. the mars-centric co-ordinates of Earth for a\ngiven point in time. Well, you might correctly object here \"Why would\nsomeone require that?\", but\n\n1. it comes at no extra cost, since it’s just a side effect of object\n   orientation making it clearer, that the relative ecliptical position\n   of a planet depends on the view point and therefore is not a property\n   of a planet and\n2. maybe Elon Musk will find this useful in his new home someday (@Elon:\n   please drop me a note then).\n\nPyPlanets vs. PyMeeus - what’s the difference?\n----------------------------------------------\n\nThe most obvious difference is the file (module) structure, and an\nincreased number of modules with a lower number of lines of code in\ntotal (hopefully increasing maintainability). The higher number of\nmodules is due to\n\n-  moved VSOP87 parameters to separate files (../parameters)\n-  moved usage examples from original sources to separate modules\n   (../examples/pymeeus)\n-  added common base class for planets (Planet.py)\n-  separated class Ellipsoid and related methods from Earth.py to\n   ellipsoid.py\n-  restructured (simplified) method ``vsop_pos(...)`` of module\n   Coordinates\n\nA lot of effort has been made by Dagoberto to create meaningful tests\nand documentation for the PyMeeus library in the form of test cases,\nusage examples and inline documentation including doctests. These are\npreserved to its full extent, but needed to be updated to the new module\nstructure. Basically it boils down to three changes:\n\nReplace calls to static methods with calls to instance methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*PyMeeus:*\n\n.. code:: python\n\n   # Let's now compute the heliocentric position for a given epoch\n   epoch = Epoch(2018, 10, 27.0)\n   lon, lat, r = Mars.geometric_heliocentric_position(epoch)\n\n*PyPlanets:*\n\n.. code:: python\n\n   # Let's now compute the heliocentric position for a given epoch\n   epoch = Epoch(2018, 10, 27.0)\n   mars = Mars(epoch)\n   lon, lat, r = mars.geometric_heliocentric_position()\n\nComputation of geocentric coordinates is achieved by class Constellation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*PyMeeus:*\n\n.. code:: python\n\n   # Compute the geocentric position for 1992/12/20:\n   epoch = Epoch(1992, 12, 20.0)\n   ra, dec, elon = Mars.geocentric_position(epoch)\n\n*PyPlanets:*\n\n.. code:: python\n\n   epoch = Epoch(1992, 12, 20.0)\n   mars = Mars(epoch)\n   earth = Earth(epoch)\n   constellation = Constellation(earth, mars)\n   ra, dec, elon = constellation.geocentric_position()\n\nEspecially this change seems a bit verbose, but it is planned to a)\ngeneralize the Constellation class also to be useful for viewpoints\nother than earth and b) introduce a convenience pattern to provide the\nusual geocentric coordinates.\n\nMethod ``perihelion_aphelion(...)`` split into dedicated methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*PyMeeus:*\n\n.. code:: python\n\n   # Find the epoch of the Aphelion closer to 2032/1/1\n   epoch = Epoch(2032, 1, 1.0)\n   e = Mars.perihelion_aphelion(epoch, perihelion=False)\n\n*PyPlanets:*\n\n.. code:: python\n\n   # Find the epoch of the Aphelion closer to 2032/1/1\n   epoch = Epoch(2032, 1, 1.0)\n   e = Mars(epoch).aphelion()\n\nFunctional improvements\n~~~~~~~~~~~~~~~~~~~~~~~\n\nFor precise planetary positions it is necessary to introduce light-time\ncorrections for computed and observed positions of planets. The\ncalculation used in the PyMeeus library computes the correction once.\nWhile in most cases probably sufficient, the accuracy can be enhanced by\nrecalculating the correction factor several times until the arithmetic\nprecision of the machine is reached. Typically, about 4 - 5 iterations\nare required, not having too much impact on processing times.\n\nComparison PyMeeus / PyPlanets\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make sure refactoring didn’t break obvious things, two measures were\ntaken:\n\n-  Usage examples of PyMeeus have been outsourced to ./examples/pymeeus\n   and ported to the slightly new API. A script executes the examples\n   against the “old” and “new” API and compares the output to\n   ``stdout``.\n\n-  Tests from PyMeeus are preserved under ./tests/pymeeus and ported to\n   the slightly new API.\n\nRoadmap\n-------\n\nAmongst other things, it is planned to\n\n-  add more algorithms from Meeus’ book e.g. including ephemeris of\n   moons\n-  add some visualization options, e.g. by integrating Jupyter notebooks\n-  have a look at `Astropy <http://www.astropy.org/>`__ and find ways to\n   integrate with or benefit from\n\nInstallation\n------------\n\nThe easiest way of installing PyPlanets is using pip:\n\n.. code:: sh\n\n   pip install pyplanets\n\nOr, for a per-user installation:\n\n.. code:: sh\n\n   pip install --user pyplanets\n\nMeta\n----\n\nAuthor: Martin Fünffinger\n\nDistributed under the GNU Lesser General Public License v3 (LGPLv3). See\n``LICENSE.txt`` and ``COPYING.LESSER`` for more information.\n\nDocumentation: https://pyplanets.readthedocs.io/en/latest/\n\nGitHub: https://github.com/martin5f/pyplanets\n\nIf you have Sphinx installed, you can generate your own, latest\ndocumentation going to directory ‘docs’ and issuing:\n\n.. code:: sh\n\n   make html\n\nThen the HTML documentation pages can be found in ‘build/html’.\n\nContributing\n------------\n\nThe preferred method to contribute is through forking and pull requests:\n\n1. Fork it (https://github.com/martin5f/pyplanets/fork)\n2. Create your feature branch (``git checkout -b feature/fooBar``)\n3. Commit your changes (``git commit -am 'Add some fooBar'``)\n4. Push to the branch (``git push origin feature/fooBar``)\n5. Create a new Pull Request\n\nPlease bear in mind that PyPlanets follows the PEP8 style guide for\nPython code `(PEP8) <https://www.python.org/dev/peps/pep-0008/?>`__. We\nsuggest you install and use a linter like\n`Flake8 <http://flake8.pycqa.org/en/latest/>`__ before contributing.\n\nAdditionally, PyPlanets makes heavy use of automatic tests. As a general\nrule, every function or method added must have a corresponding test in\nthe proper place in ``tests`` directory.\n\nFinally, documentation is also a big thing here. Add proper and abundant\ndocumentation to your new code. This also includes in-line comments!!!.\n\nWhat’s new\n----------\n\n-  0.4.2\n\n   -  Initial refactoring completed, basic release and documentation workflow established.\n\n-  0.0.1 - 0.3.6 (pymeeus - previous releases)\n\n   -  See https://github.com/architest/pymeeus#whats-new\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/martin5f/pyplanets",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/martin5f/pyplanets",
    "keywords": "astronomy planets ephemeris Meeus VSOP87 module library",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyplanets",
    "package_url": "https://pypi.org/project/pyplanets/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyplanets/",
    "project_urls": {
      "Download": "https://github.com/martin5f/pyplanets",
      "Homepage": "https://github.com/martin5f/pyplanets"
    },
    "release_url": "https://pypi.org/project/pyplanets/0.4.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "PyPlanets: Object-oriented refactoring of PyMeeus, a Python library implementing astronomical algorithms.",
    "version": "0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9077993,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb90879b372b0a12d041724ca64cfa7a83c1fc4b3e96a7063cb9efcd909628b1",
          "md5": "b61e5bdad3813b962638b83dc7d48c2e",
          "sha256": "6429db308fa41e16fd6d274ee3cffbd0c433cbdabab3d2ff38c7201af92fcbdc"
        },
        "downloads": -1,
        "filename": "pyplanets-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b61e5bdad3813b962638b83dc7d48c2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 763089,
        "upload_time": "2021-01-05T00:37:33",
        "upload_time_iso_8601": "2021-01-05T00:37:33.914072Z",
        "url": "https://files.pythonhosted.org/packages/cb/90/879b372b0a12d041724ca64cfa7a83c1fc4b3e96a7063cb9efcd909628b1/pyplanets-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d28eb89640c91cfbfe86bdbc6f034789ce36c236ec54774a2db105db0e24f568",
          "md5": "168c663bd50c3cc6b64b9cf8cb7ea6e3",
          "sha256": "ac655fb898b3c801d7a26e6f958b6d82b461857ff13d5c41fa29fc210cc4a46a"
        },
        "downloads": -1,
        "filename": "pyplanets-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "168c663bd50c3cc6b64b9cf8cb7ea6e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 682275,
        "upload_time": "2021-01-06T23:42:42",
        "upload_time_iso_8601": "2021-01-06T23:42:42.105368Z",
        "url": "https://files.pythonhosted.org/packages/d2/8e/b89640c91cfbfe86bdbc6f034789ce36c236ec54774a2db105db0e24f568/pyplanets-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d6dfc2f1a7d203883aa20113ca8d628e56fcb1b1e4cfc152f2c635a45b62681",
          "md5": "2115468bae468a9a1675cc5f8847f8ca",
          "sha256": "bdfaee660156dca59e8e876b6937b9119308fefc45d67a23a1076c4293de8b83"
        },
        "downloads": -1,
        "filename": "pyplanets-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2115468bae468a9a1675cc5f8847f8ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 682388,
        "upload_time": "2021-01-07T15:30:46",
        "upload_time_iso_8601": "2021-01-07T15:30:46.325729Z",
        "url": "https://files.pythonhosted.org/packages/1d/6d/fc2f1a7d203883aa20113ca8d628e56fcb1b1e4cfc152f2c635a45b62681/pyplanets-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d6dfc2f1a7d203883aa20113ca8d628e56fcb1b1e4cfc152f2c635a45b62681",
        "md5": "2115468bae468a9a1675cc5f8847f8ca",
        "sha256": "bdfaee660156dca59e8e876b6937b9119308fefc45d67a23a1076c4293de8b83"
      },
      "downloads": -1,
      "filename": "pyplanets-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2115468bae468a9a1675cc5f8847f8ca",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 682388,
      "upload_time": "2021-01-07T15:30:46",
      "upload_time_iso_8601": "2021-01-07T15:30:46.325729Z",
      "url": "https://files.pythonhosted.org/packages/1d/6d/fc2f1a7d203883aa20113ca8d628e56fcb1b1e4cfc152f2c635a45b62681/pyplanets-0.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}