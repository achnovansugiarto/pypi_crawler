{
  "info": {
    "author": "DQinYuan",
    "author_email": "sa517067@mail.ustc.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Indexing"
    ],
    "description": "\n\nchinese_province_city_area_mapper\n==================================\n\nchinese_province_city_area_mapper：一个用于识别简体中文字符串中省，市和区并能够进行映射，检验和简单绘图的python模块\n\n举个例子::\n\n    [\"徐汇区虹漕路461号58号楼5楼\", \"泉州市洛江区万安塘西工业区\"]\n            ↓ 转换\n   |省    |市   |区    |地址                 |\n   |上海市|上海市|徐汇区|虹漕路461号58号楼5楼  |\n   |福建省|泉州市|洛江区|万安塘西工业区        |\n\n\nchinese_province_city_area_mapper: built to be recognize Chinese province,city and area in simplified Chinese string, it can automaticall map area to city \nand map city to province.\nfor example::\n\n    [\"徐汇区虹漕路461号58号楼5楼\", \"泉州市洛江区万安塘西工业区\"]\n            ↓ transform\n   |省    |市   |区    |地址                 |\n   |上海市|上海市|徐汇区|虹漕路461号58号楼5楼  |\n   |福建省|泉州市|洛江区|万安塘西工业区        |\n\n\n\n完整文档见该模块的Github，\nGitHub: `https://github.com/DQinYuan/chinese_province_city_area_mapper <https://github.com/DQinYuan/chinese_province_city_area_mapper>`_\n\n特点\n====\n\n-  基于jieba分词进行匹配，同时加入了一些额外的校验匹配逻辑保证了准确率\n\n-  因为jieba分词本身只有80%的准确率，经常会分错，所以引入了全文匹配的模式，这种模式下能够提高准确率，但会导致性能降低，关于如何开启这个模式见Github上的使用文档\n\n-  如果地址数据比较脏的，不能指望依靠这个模块达到100%的准确，本模块只能保证尽可能地提取信息，如果想要达到100%准确率的话，最好在匹配完后再人工核验一下\n\n-  自带完整的省，市，区三级地名及其经纬度的数据\n\n-  支持自定义省，市，区映射\n\n-  输出的是基于pandas的DataFrame类型的表结构，易于理解和使用\n\n-  封装了简单的绘图功能，可以很方便地进行简单的数据可视化\n\n-  MIT 授权协议\n\n安装说明\n========\n\n代码目前仅仅支持python3\n\n    pip install cpca\n\nGet Started\n============\n\n本模块中最主要的方法是cpca.transform,\n该方法可以输入任意的可迭代类型（如list，pandas的Series类型等），\n然后将其转换为一个DataFrame，下面演示一个最为简单的使用方法::\n\n    location_str = [\"徐汇区虹漕路461号58号楼5楼\", \"泉州市洛江区万安塘西工业区\", \"朝阳区北苑华贸城\"]\n    from cpca import *\n    df = transform(location_str)\n    df\n\n\n输出的结果为::\n\n         区    市      省         地址\n    0  徐汇区  上海市  上海市   虹漕路461号58号楼5楼\n    1  洛江区  泉州市  福建省   万安塘西工业区\n    2  朝阳区  北京市  北京市   北苑华贸城\n\n**全文模式**：\n\njieba分词并不能百分之百保证分词的正确性，在分词错误的情况下会造成奇怪的结果，比如下面::\n\n    location_str = [\"浙江省杭州市下城区青云街40号3楼\",\"广东省东莞市莞城区东莞大道海雅百货\"]\n    from cpca import *\n    df = transform(location_str)\n    df\n\n输出的结果为::\n\n    区    市    省            地址\n    城区  东莞市  广东省  莞大道海雅百货自然堂专柜\n    城区  杭州市  浙江省  下青云街40号3楼\n\n这种诡异的结果因为jieba本身就将词给分错了，所以我们引入了全文模式，不进行分词，直接全文匹配，使用方法如下::\n\n    location_str = [\"浙江省杭州市下城区青云街40号3楼\",\"广东省东莞市莞城区东莞大道海雅百货\"]\n    from cpca import *\n    df = transform(location_str, cut=False)\n    df\n\n输出结果::\n\n     区    市    省        地址\n   下城区  杭州市  浙江省  青云街40号3楼\n   莞城区  东莞市  广东省    大道海雅百货\n\n这些就完全正确了，不过全文匹配模式会造成效率低下，我默认会向前看8个字符(对应transform中的lookahead参数默认值为8)，这个是比较保守的，因为有的地名会比较长（比如“新疆维吾尔族自治区”），如果你的地址库中都是些短小的省市区名的话，可以选择将lookahead设置得小一点，比如::\n\n    location_str = [\"浙江省杭州市下城区青云街40号3楼\",\"广东省东莞市莞城区东莞大道海雅百货\"]\n    from cpca import *\n    df = transform(location_str, cut=False, lookahead=3)\n    df\n\n输出结果与上面一样。\n\n\n如果还想知道更多的细节，请访问该\n模块的github地址 `https://github.com/DQinYuan/chinese_province_city_area_mapper <https://github.com/DQinYuan/chinese_province_city_area_mapper>`_，\n在那里我写了更多的细节.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LanjiaoGong/chinese_province_city_area_mapper",
    "keywords": "Simplified Chinese,Chinese geographic information,Chinese province city and area recognition and map",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cpca-fix",
    "package_url": "https://pypi.org/project/cpca-fix/",
    "platform": "",
    "project_url": "https://pypi.org/project/cpca-fix/",
    "project_urls": {
      "Homepage": "https://github.com/LanjiaoGong/chinese_province_city_area_mapper"
    },
    "release_url": "https://pypi.org/project/cpca-fix/0.3.5/",
    "requires_dist": [
      "pandas (>=0.20.0)",
      "jieba (>=0.39)"
    ],
    "requires_python": "",
    "summary": "Chinese Province, City and Area Recognition Utilities",
    "version": "0.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4863820,
  "releases": {
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2878e71e215c9c909cbc13dffb1fce270a55a9c0ddf612a11ed4e28193f1303",
          "md5": "77feac2af0f73b2dc5d91f77444a371b",
          "sha256": "b6ea36a727c80eab4a13eac7e8425c426cd7b87e242f571e926e503fe01f3016"
        },
        "downloads": -1,
        "filename": "cpca_fix-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77feac2af0f73b2dc5d91f77444a371b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73793,
        "upload_time": "2019-02-25T09:52:21",
        "upload_time_iso_8601": "2019-02-25T09:52:21.158411Z",
        "url": "https://files.pythonhosted.org/packages/f2/87/8e71e215c9c909cbc13dffb1fce270a55a9c0ddf612a11ed4e28193f1303/cpca_fix-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2123cb7bf70aec4e33656232f2e9151eb1f1c42e37380fabc0583df5d098afa1",
          "md5": "bb85b54b124dbe32155ebeb542ff42cb",
          "sha256": "b8ea7c1c6df6b8b5f0b2fb0486ecb26f2ec5396289478e055dc8c69a7d3917fa"
        },
        "downloads": -1,
        "filename": "cpca_fix-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bb85b54b124dbe32155ebeb542ff42cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73652,
        "upload_time": "2019-02-25T09:52:23",
        "upload_time_iso_8601": "2019-02-25T09:52:23.815797Z",
        "url": "https://files.pythonhosted.org/packages/21/23/cb7bf70aec4e33656232f2e9151eb1f1c42e37380fabc0583df5d098afa1/cpca_fix-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2878e71e215c9c909cbc13dffb1fce270a55a9c0ddf612a11ed4e28193f1303",
        "md5": "77feac2af0f73b2dc5d91f77444a371b",
        "sha256": "b6ea36a727c80eab4a13eac7e8425c426cd7b87e242f571e926e503fe01f3016"
      },
      "downloads": -1,
      "filename": "cpca_fix-0.3.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77feac2af0f73b2dc5d91f77444a371b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 73793,
      "upload_time": "2019-02-25T09:52:21",
      "upload_time_iso_8601": "2019-02-25T09:52:21.158411Z",
      "url": "https://files.pythonhosted.org/packages/f2/87/8e71e215c9c909cbc13dffb1fce270a55a9c0ddf612a11ed4e28193f1303/cpca_fix-0.3.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2123cb7bf70aec4e33656232f2e9151eb1f1c42e37380fabc0583df5d098afa1",
        "md5": "bb85b54b124dbe32155ebeb542ff42cb",
        "sha256": "b8ea7c1c6df6b8b5f0b2fb0486ecb26f2ec5396289478e055dc8c69a7d3917fa"
      },
      "downloads": -1,
      "filename": "cpca_fix-0.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "bb85b54b124dbe32155ebeb542ff42cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 73652,
      "upload_time": "2019-02-25T09:52:23",
      "upload_time_iso_8601": "2019-02-25T09:52:23.815797Z",
      "url": "https://files.pythonhosted.org/packages/21/23/cb7bf70aec4e33656232f2e9151eb1f1c42e37380fabc0583df5d098afa1/cpca_fix-0.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}