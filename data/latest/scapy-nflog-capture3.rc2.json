{
  "info": {
    "author": "Rodolfo García Peñas (kix)",
    "author_email": "kix@kix.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Security",
      "Topic :: System :: Networking :: Monitoring",
      "Topic :: System :: Operating System Kernels :: Linux"
    ],
    "description": "scapy-nflog-capture3\n--------------------\n\nDriver for [scapy network manipulation\ntool](http://www.secdev.org/projects/scapy/) to allow capturing packets via\n[Linux NFLOG interface](http://wiki.wireshark.org/CaptureSetup/NFLOG).\n\n\n\nInstallation\n--------------------\n\nIt's a regular package for Python 3\n\nUsing [pip](http://pip-installer.org/) is the best way:\n\n\t% pip install scapy-nflog-capture3\n\nIf you don't have it, use:\n\n\t% easy_install pip\n\t% pip install scapy-nflog-capture3\n\nAlternatively ([see\nalso](http://www.pip-installer.org/en/latest/installing.html)):\n\n\t% curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\n\t% pip install scapy-nflog-capture3\n\nOr, if you absolutely must:\n\n\t% easy_install scapy-nflog-capture3\n\nBut, you really shouldn't do that.\n\nCurrent-git version can be installed like this:\n\n\t% pip install 'git+https://github.com/thekix/scapy-nflog-capture.git#egg=scapy-nflog-capture'\n\n\n### Requirements\n\n* Python 3\n* [scapy](http://www.secdev.org/projects/scapy/)\n* [CFFI](http://cffi.readthedocs.org) (for libnetfilter_log bindings)\n* [libnetfilter_log](http://netfilter.org/projects/libnetfilter_log)\n\nCFFI uses C compiler to generate bindings, so gcc (or other compiler) should be\navailable if module is being built from source or used from checkout tree.\n\n\n\nUsage\n--------------------\n\nTwo python modules are installed: scapy_nflog and nflog_ctypes.\n\nscapy_nflog has NFLOGListenSocket class (implementing SuperSocket), which can be\ninstalled as default L2 listener like this:\n\n\t>>> import scapy_nflog\n\t>>> scapy_nflog.install_nflog_listener()\n\t>>> sniff(prn=handler)\n\ninstall_nflog_listener above is a one-line function, doing `conf.L2listen =\nNFLOGListenSocket`, so if you're building custom module on scapy,\nNFLOGListenSocket class can just be passed directly to scapy internals a\nlistening socket without setting it to be default one.\n\nIDs of NFLOG queues to grab packets from can be controlled via passing optional\n\"queues\" keyword on instance init (int or a list of ints) or by overriding\ndefault \"queues\" class attribute in a subclass and setting that one as listener\nclass instead.\n\nNote that NFLOG actually returns L3 packets, so despite the listener being\ninstalled as L2 above, it will always return instances of IP class, not Ether or\nsuch.\n\n\n### Linux NFLOG\n\nNFLOG is a Linux [netfilter](http://www.netfilter.org/) subsystem target,\nsomewhat like old and simple LOG target, which dumped info for each packet to\nkmsg, but using special netlink queues to export netfilter-matched (think\n[iptables](http://www.netfilter.org/projects/iptables/index.html) rules) packets\nto userspace.\n\nTo export all sent/received packets via nflog:\n\n\tiptables -t raw -I PREROUTING -j NFLOG\n\tiptables -t raw -I OUTPUT -j NFLOG\n\nOf course, any arbitrary filters can be added there, to dump only packets\nmatching specific protocol, port or whatever arbitrary netfilter matcher - see\n[iptables manpage](http://ipset.netfilter.org/iptables.man.html) (or\niptables-extensions(8)) for the list/info on the ones shipped with mainline\nlinux.\n\nNote that it's safe to add the above catch-all rules, as with no listeners\n(nothing queries nflog for these packets), they'll just be discarded regardless\nof these rules and won't be wasting much ram, cpu or anything like that.\n\nUserspace readers (like this module) can subscribe to receive these packets,\nsetting how many bytes of these will be buffered in-kernel for later recv()\ncalls (optional \"nlbufsiz\" keyword to nflog_generator), the rest will be just\ndropped (producing python logging warning by default, unless\n`handle_overflows=False` is passed) until userspace catches up.\n\nNFLOG itself is configurable with parameters like --nflog-group and\n--nflog-range (see iptables-extensions(8)), allowing to have multiple nflog\nqueues for different apps and not passing lots of useless L7 data around.\n\nPerformance - especially coupled with in-kernel noise filtering and packet\ntruncation - seem to be more efficient than simpler approaches like using\nAF_PACKET/SOCK_RAW sockets, but it's highly unlikely to be any kind of a\nbottleneck with scapy sitting on top of it anyway.\n\nOne interesting advantage over libpcap is the ability to capture tunneled\npackets after decryption (traffic coming from ipsec, pptp, openvpn, ssh, etc) or\ntransformation (stripping of ipip wrapping, netlink re-injection and such) here.\n\n\n### nflog_cffi\n\nscapy_nflog is based on nflog_cffi module, which can be used from any python\ncode (scapy shell included):\n\n```python\nfrom nflog_cffi import NFLOG\n\n# without extra_attrs just packet payload (possibly truncated) is returned\nnflog = NFLOG().generator(0, extra_attrs=['len', 'ts'], nlbufsiz=2*2**20)\nfd = next(nflog) # netlink fd to do select/poll on, if necessary\n\n# pkt_len is the *real* length, before nflog-truncation (if any)\n# pkt_ts is the packet timestamp, as reported by kernel/lib\npkt, pkt_len, pkt_ts = next(nflog)\nprint('Got packet, len: {}, ts: {}'.format(pkt_len, pkt_ts))\n\nfor pkt, pkt_len, pkt_ts in nflog: # do stuff with each captured packet\n```\n\nModule uses libnetfilter_log via CFFI.\n\nNFLOG generator has the keywords to control parameters of netlink socket that\nare passed to libnetfilter_log, see [libnetfilter_log\ndocumentation](http://www.netfilter.org/projects/libnetfilter_log/doxygen/group__Log.html)\nfor more verbose description of these.\n\nNot all [libnetfilter_log-exposed\nattributes](http://www.netfilter.org/projects/libnetfilter_log/doxygen/group__Parsing.html)\nare exposed through bindings.\n\n\n### Acknowledgments\n\nThis source code is based in the original source code of Mike Kazantsev <mk.fraggod@gmail.com>.\nThe original source, for Python2, is at [https://github.com/mk-fg/scapy-nflog-capture](https://github.com/mk-fg/scapy-nflog-capture)\nand it was deprecated by the author.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/thekix/scapy-nflog-capture",
    "keywords": "nflog,scapy,plugin,driver,traffic,analysis,analyze,capture,dump,network,linux,security,sniffer,spoof,netfilter,iptables,xtables,filter,filtering,firewall,audit,cffi,libnetfilter_log,socket",
    "license": "WTFPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scapy-nflog-capture3",
    "package_url": "https://pypi.org/project/scapy-nflog-capture3/",
    "platform": null,
    "project_url": "https://pypi.org/project/scapy-nflog-capture3/",
    "project_urls": {
      "Homepage": "http://github.com/thekix/scapy-nflog-capture"
    },
    "release_url": "https://pypi.org/project/scapy-nflog-capture3/22.11.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Driver for scapy to allow capturing packets via Linux NFLOG interface (Python 3)",
    "version": "22.11.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15786378,
  "releases": {
    "22.11.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20b2d54437c38d725bf2040d1bda906dcb077ee23e84e12a18f0d76fe3570128",
          "md5": "3eb2431fb72e0f3f45648a65d2fcdf7e",
          "sha256": "4d652b22f5916d84560fe782722781849812cdd590d036999999fb1b9b14f6b4"
        },
        "downloads": -1,
        "filename": "scapy-nflog-capture3-22.11.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3eb2431fb72e0f3f45648a65d2fcdf7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16364,
        "upload_time": "2022-11-16T09:11:39",
        "upload_time_iso_8601": "2022-11-16T09:11:39.510294Z",
        "url": "https://files.pythonhosted.org/packages/20/b2/d54437c38d725bf2040d1bda906dcb077ee23e84e12a18f0d76fe3570128/scapy-nflog-capture3-22.11.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "22.11.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cff6ed2a6c7915c19d7186e6b959157ee7dc6c046be460a762bf5972a2bc0b0",
          "md5": "2288331d17cea71844353a7417cb9aff",
          "sha256": "fd96fd03a0feb2040efd823aad2725a1c7773a96972c99f2d73000ac9fb20010"
        },
        "downloads": -1,
        "filename": "scapy-nflog-capture3-22.11.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2288331d17cea71844353a7417cb9aff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16393,
        "upload_time": "2022-11-16T09:30:28",
        "upload_time_iso_8601": "2022-11-16T09:30:28.669300Z",
        "url": "https://files.pythonhosted.org/packages/1c/ff/6ed2a6c7915c19d7186e6b959157ee7dc6c046be460a762bf5972a2bc0b0/scapy-nflog-capture3-22.11.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cff6ed2a6c7915c19d7186e6b959157ee7dc6c046be460a762bf5972a2bc0b0",
        "md5": "2288331d17cea71844353a7417cb9aff",
        "sha256": "fd96fd03a0feb2040efd823aad2725a1c7773a96972c99f2d73000ac9fb20010"
      },
      "downloads": -1,
      "filename": "scapy-nflog-capture3-22.11.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2288331d17cea71844353a7417cb9aff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16393,
      "upload_time": "2022-11-16T09:30:28",
      "upload_time_iso_8601": "2022-11-16T09:30:28.669300Z",
      "url": "https://files.pythonhosted.org/packages/1c/ff/6ed2a6c7915c19d7186e6b959157ee7dc6c046be460a762bf5972a2bc0b0/scapy-nflog-capture3-22.11.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}