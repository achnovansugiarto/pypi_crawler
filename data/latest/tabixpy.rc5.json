{
  "info": {
    "author": "Saulo Aflitos",
    "author_email": "saulobejo@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# tabixpy\n\n![Upload Python Package](https://github.com/bejobioinformatics/tabixpy/workflows/Upload%20Python%20Package/badge.svg)\n\nTabix parser writtern in Python3.\n\n## Website\n\n<https://pypi.org/project/tabixpy/>\n\n## Install\n\n```sh\npip install tabixpy\n```\n\n## Usage\n\n```python\nimport tabixpy\ningz = \"example.vcf.gz\"\ndata = tabixpy.read_tabix(ingz)\ntabixpy.save(data, ingz, compress=True)\n```\n\n## Tabix\n\n<https://samtools.github.io/hts-specs/tabix.pdf>\n\n```text\nField                   Description                                     Type     Value\n---------------------------------------------------------------------------------------\nmagic                   Magic string                                    char[4]  TBI 1\nn_ref                   # sequences                                     int32_t\nformat                  Format (0: generic; 1: SAM; 2: VCF)             int32_t\ncol_seq                 Column for the sequence name                    int32_t\ncol_beg                 Column for the start of a region                int32_t\ncol_end                 Column for the end of a region                  int32_t\nmeta                    Leading character for comment lines             int32_t\nskip                    # lines to skip at the beginning                int32_t\nl_nm                    Length of concatenated sequence names           int32_t\nnames                   Concatenated names, each zero terminated        char[l_nm]\n======================= List of indices (n=n_ref )            =======================\n    n_bin               # distinct bins (for the binning index)         int32_t\n======================= List of distinct bins (n=n_bin)       =======================\n        bin             Distinct bin number                             uint32_t\n        n_chunk         # chunks                                        int32_t\n======================= List of chunks (n=n_chunk)            =======================\n            cnk_beg     Virtual file offset of the start of the chunk   uint64_t\n            cnk_end     Virtual file offset of the end of the chunk     uint64_t\n    n_intv              # 16kb intervals (for the linear index)         int32_t\n======================= List of distinct intervals (n=n_intv) =======================\n        ioff            File offset of the first record in the interval uint64_t\nn_no_coor (optional)    # unmapped reads without coordinates set        uint64_t\n```\n\n### Notes\n\n* The index file is BGZF compressed.\n\n* All integers are little-endian.\n\n* When (format&0x10000) is true, the coordinate follows the BED rule (i.e.\nhalf-closed-half-open and zero based); otherwise, the coordinate follows the\nGFF rule (closed and one based).\n\n* For the SAM format, the end of a region equals POS plus the reference length\nin the alignment, inferred from CIGAR. For the VCF format, the end of a region\nequals POS plus the size of the deletion.\n\n* Field col beg may equal col end, and in this case, the end of a region is\nend=beg+1.\n\n* Example:\n  * For GFF, format=0      , col seq=1, col beg=4, col end=5, meta=‘#’ and skip=0.\n  * For BED, format=0x10000, col seq=1, col beg=2, col end=3, meta=‘#’ and skip=0.\n\n* Given a zero-based, half-closed and half-open region [beg, end), the bin\nnumber is calculated with the following C function:\n\n```c\nint reg2bin(int beg, int end) {\n    --end;\n    if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);\n    if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);\n    if (beg>>20 == end>>20) return ((1<< 9)-1)/7 + (beg>>20);\n    if (beg>>23 == end>>23) return ((1<< 6)-1)/7 + (beg>>23);\n    if (beg>>26 == end>>26) return ((1<< 3)-1)/7 + (beg>>26);\n    return 0;\n}\n```\n\n* The list of bins that may overlap a region [beg, end) can be obtained with\nthe following C function:\n\n```c\n#define MAX_BIN (((1<<18)-1)/7)\nint reg2bins(int rbeg, int rend, uint16_t list[MAX_BIN]) {\n    int i = 0, k;\n    --rend;\n    list[i++] = 0;\n    for (k =    1 + (rbeg>>26); k <=    1 + (rend>>26); ++k) list[i++] = k;\n    for (k =    9 + (rbeg>>23); k <=    9 + (rend>>23); ++k) list[i++] = k;\n    for (k =   73 + (rbeg>>20); k <=   73 + (rend>>20); ++k) list[i++] = k;\n    for (k =  585 + (rbeg>>17); k <=  585 + (rend>>17); ++k) list[i++] = k;\n    for (k = 4681 + (rbeg>>14); k <= 4681 + (rend>>14); ++k) list[i++] = k;\n    return i; // #elements in list[]\n}\n```\n\n### Offset calculation\n\n```python\nblock_bytes_mask    = 0x0000000000000FFFF\nreal_file_offset    = chunk >> 16\nblock_bytes_offset  = chunk & block_bytes_mask\n```\n\n```text\nbegin\n    block             0000000000000000000000000110100011010101100111111001011010001111 450,260,604,559\n    mask              0000000000000000000000000000000000000000000000001111111111111111\n    real offset       0000000000000000000000000000000000000000011010001101010110011111       6,870,431\n    block byte offset 0000000000000000000000000000000000000000000000001001011010001111          38,543\nend\n    block             0000000000000000000000000110101001010101110101110011001010010100 456,706,699,924\n    mask              0000000000000000000000000000000000000000000000001111111111111111\n    real offset       0000000000000000000000000000000000000000011010100101010111010111       6,968,791\n    block byte offset 0000000000000000000000000000000000000000000000000011001010010100          12,948\n```\n\n### BGZIP\n\n<http://samtools.github.io/hts-specs/SAMv1.pdf>\n\n```text\nThe random access method to be described next limits the uncompressed contents\nof each BGZF block to a maximum of 216 bytes of data. Thus while ISIZE is\nstored as a uint32 t as per the gzip format, in BGZF it is limited to the range\n[0, 65536]. BSIZE can represent BGZF block sizes in the range [1, 65536],\nthough typically BSIZE will be rather less than ISIZE due to compression.\n\n4.1.1 Random access\nBGZF files support random access through the BAM file index. To achieve this,\nthe BAM file index uses virtual file offsets into the BGZF file. Each virtual\nfile offset is an unsigned 64-bit integer, defined as: coffset<<16|uoffset,\nwhere coffset is an unsigned byte offset into the BGZF file to the beginning of\na BGZF block, and uoffset is an unsigned byte offset into the uncompressed data\nstream represented by that BGZF block. Virtual file offsets can be compared,\nbut subtraction between virtual file offsets and addition between a virtual\noffset and an integer are both disallowed.\n```\n\n## BGZIP TABIX\n\n<https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3042176/>\n\n<https://samtools.github.io/hts-specs/tabix.pdf>\n\n```text\n2.1 Sorting and BGZF compression\nBgzip compresses the data file in the BGZF format, which is the concatenation\nof a series of gzip blocks with each block holding at most 216 bytes of\nuncompressed data.\n\nIn the compressed file, each uncompressed byte in the text data file is\nassigned a unique 64-bit virtual file offset where the higher 48 bits keep the\nreal file offset of the start of the gzip block the byte falls in, and the\nlower 16 bits store the offset of the byte inside the gzip block. Given a\nvirtual file offset, one can directly seek to the start of the gzip block using\nthe higher 48 bits, decompress the block and retrieve the byte pointed by the\nlower 16 bits of the virtual offset. Random access can thus be achieved without\nthe help of additional index structures. As gzip works with concatenated gzip\nfiles, it can also seamlessly decompress a BGZF file. The detailed description\nof the BGZF format is described in the SAM specification.\n\n2.2 Coupled binning and linear indices\nTabix builds two types of indices for a data file: a binning index and a linear\nindex. We can actually achieve fast retrieval with only one of them. However,\nusing the binning index alone may incur many unnecessary seek calls, while\nusing the linear index alone has bad worst-case performance (when some records\nspan very long distances). Using them together avoids their weakness.\n\n2.2.1 The binning index\nThe basic idea of binning is to cluster records into large intervals, called\nbins. A record is assigned to bin k if k is the bin of the smallest size that\nfully contains the record. For each bin, we keep in the index file the virtual\nfile offsets of all records assigned to the bin. When we search for records\noverlapping a query interval, we first collect bins overlapping the interval\nand then test each record in the collected bins for overlaps.\n\nIn principle, bins can be selected freely as long as each record can be\nassigned to a bin. In the Tabix binning index, we adopt a multilevel binning\nscheme where bins at same level are non-overlapping and of the same size. In\nTabix, each bin k, 0<=k<=37,449, represents a half-close-half-open interval\n[(k-ol)sl, (k-ol+1)sl), where l = [log2(7k+1)/3] is the level of the bin,\nsl = 2^(29-3l) is the size of the bin at level l and ol = (2^3l - 1)/7 is the\noffset at l. In this scheme, bin 0 spans 512 Mb, 1-8 span 64 Mb, 9-72 8 Mb,\n73-584 1 Mb, 585-4680 128 kb and 4681-37449 span 16 kb intervals. The scheme is\nvery similar to the UCSC binning (Kent et al., 2002) except that in UCSC,\n0<=k<=4681 and therefore the smallest bin size is 128 kb.\n\n2.2.2 The linear index\nWith the binning index alone, we frequently need to seek to records assigned to\nbins at lower levels, in particular bin 0, the bin spanning the entire\nsequence. However, frequently records at lower levels do not overlap the query\ninterval, which leads to unsuccessful seeks and hurts performance especially\nwhen data are transferred over network. The linear index is to reduce\nunnecessary seek calls in this case (Table 1).\n\nIn the linear index, we keep for each tiling 16 kb window the virtual file\noffset of the leftmost record (i.e. having the smallest start coordinate) that\noverlaps the window. When we search for records overlapping a query interval,\nwe will know from the index the leftmost record that possibly overlaps the\nquery interval. Records having smaller coordinates than this leftmost record\ncan be skipped and unsuccessful seek calls can be saved.\n\nWhen the data files are sorted by coordinates, records assigned to the same bin\ntend to be adjacent. Thus in the index file, we do not need to keep the virtual\nfile offset of each record, but only to keep the start offset of a chunk of\nrecords assigned to the same bin.\n```\n\n## Schema\n\n<https://jsonschema.net/home>\n\n<https://www.liquid-technologies.com/online-json-schema-validator>\n\n<https://www.jsonschemavalidator.net/>\n\n### Example output\n\n```json\n{\n    \"n_ref\": 1,\n    \"format\": 2,\n    \"col_seq\": 1,\n    \"col_beg\": 2,\n    \"col_end\": 0,\n    \"meta\": \"#\",\n    \"skip\": 0,\n    \"l_nm\": 11,\n    \"names\": [\n        \"SL2.50ch00\"\n    ],\n    \"refs\": [{\n        \"ref_n\": 0,\n        \"ref_name\": \"SL2.50ch00\",\n        \"n_bin\": 86,\n        \"bins\": [{\n                \"bin_n\": 0,\n                \"bin\": 4681,\n                \"n_chunk\": 1,\n                \"chunks\": {\n                    \"chunk_begin\": [{\n                        \"bin_n\": 0,\n                        \"chunk_n\": 0,\n                        \"real\": 0,\n                        \"bytes\": 29542,\n                        \"block_len\": 8031,\n                        \"bin_pos\": 280,\n                        \"first_pos\": 280,\n                        \"last_pos\": 1506\n                    }],\n                    \"chunk_end\": [{\n                        \"bin_n\": 0,\n                        \"chunk_n\": 0,\n                        \"real\": 124525,\n                        \"bytes\": 19630,\n                        \"block_len\": 9015,\n                        \"bin_pos\": 16388,\n                        \"first_pos\": 16141,\n                        \"last_pos\": 17830\n                    }]\n                },\n                \"chunks_begin\": {\n                    \"bin_n\": 0,\n                    \"chunk_n\": 0,\n                    \"real\": 0,\n                    \"bytes\": 29542,\n                    \"block_len\": 8031,\n                    \"bin_pos\": 280,\n                    \"first_pos\": 280,\n                    \"last_pos\": 1506\n                },\n                \"chunks_end\": {\n                    \"bin_n\": 0,\n                    \"chunk_n\": 0,\n                    \"real\": 124525,\n                    \"bytes\": 19630,\n                    \"block_len\": 9015,\n                    \"bin_pos\": 16388,\n                    \"first_pos\": 16141,\n                    \"last_pos\": 17830\n                }\n            },\n            {\n                \"bin_n\": 85,\n                \"bin\": 4766,\n                \"n_chunk\": 1,\n                \"chunks\": {\n                    \"chunk_begin\": [{\n                        \"bin_n\": 84,\n                        \"chunk_n\": 0,\n                        \"real\": 7021611,\n                        \"bytes\": 4631,\n                        \"block_len\": 6621,\n                        \"bin_pos\": 1392700,\n                        \"first_pos\": 1392519,\n                        \"last_pos\": 1393974\n                    }],\n                    \"chunk_end\": [{\n                        \"bin_n\": 85,\n                        \"chunk_n\": 0,\n                        \"real\": 7039684,\n                        \"bytes\": 0,\n                        \"block_len\": -1,\n                        \"bin_pos\": -1,\n                        \"first_pos\": -1,\n                        \"last_pos\": -1\n                    }]\n                },\n                \"chunks_begin\": {\n                    \"bin_n\": 84,\n                    \"chunk_n\": 0,\n                    \"real\": 7021611,\n                    \"bytes\": 4631,\n                    \"block_len\": 6621,\n                    \"bin_pos\": 1392700,\n                    \"first_pos\": 1392519,\n                    \"last_pos\": 1393974\n                },\n                \"chunks_end\": {\n                    \"bin_n\": 85,\n                    \"chunk_n\": 0,\n                    \"real\": 7039684,\n                    \"bytes\": 0,\n                    \"block_len\": -1,\n                    \"bin_pos\": -1,\n                    \"first_pos\": -1,\n                    \"last_pos\": -1\n                }\n            }\n        ],\n        \"bins_begin\": {\n            \"bin_n\": 0,\n            \"chunk_n\": 0,\n            \"real\": 0,\n            \"bytes\": 29542,\n            \"block_len\": 8031,\n            \"bin_pos\": 280,\n            \"first_pos\": 280,\n            \"last_pos\": 1506\n        },\n        \"bins_end\": {\n            \"bin_n\": 84,\n            \"chunk_n\": 0,\n            \"real\": 7021611,\n            \"bytes\": 4631,\n            \"block_len\": 6621,\n            \"bin_pos\": 1392700,\n            \"first_pos\": 1392519,\n            \"last_pos\": 1393974\n        },\n        \"first_block\": {\n            \"bin_n\": 0,\n            \"chunk_n\": 0,\n            \"real\": 0,\n            \"bytes\": 29542,\n            \"block_len\": 8031,\n            \"bin_pos\": 280,\n            \"first_pos\": 280,\n            \"last_pos\": 1506\n        },\n        \"last_block\": {\n            \"bin_n\": -1,\n            \"chunk_n\": -1,\n            \"real\": 7035849,\n            \"bytes\": 0,\n            \"block_len\": 3835,\n            \"bin_pos\": -1,\n            \"first_pos\": 1395124,\n            \"last_pos\": 1395638\n        },\n        \"n_intv\": 86,\n        \"intvs\": [{\n                \"bin_n\": 0,\n                \"chunk_n\": 0,\n                \"real\": 0,\n                \"bytes\": 29542,\n                \"block_len\": 8031,\n                \"bin_pos\": 280,\n                \"first_pos\": 280,\n                \"last_pos\": 1506\n            },\n            {\n                \"bin_n\": 84,\n                \"chunk_n\": 0,\n                \"real\": 7021611,\n                \"bytes\": 4631,\n                \"block_len\": 6621,\n                \"bin_pos\": 1392700,\n                \"first_pos\": 1392519,\n                \"last_pos\": 1393974\n            }\n        ]\n    }],\n    \"n_no_coor\": null,\n    \"__format_name__\": \"TBJ\",\n    \"__format_ver__\": 5\n}\n```\n\n## Timming\n\n```text\n2020-06-12 11:30:34,716 - tabixpy -   INFO - reading annotated_tomato_150.100000.vcf.gz\n2020-06-12 11:30:34,738 - tabixpy -   INFO - saving  annotated_tomato_150.100000.vcf.gz.tbj\n                   ,024\n2020-06-12 11:31:16,506 - tabixpy -   INFO - reading annotated_tomato_150.vcf.bgz\n2020-06-12 11:31:24,152 - tabixpy -   INFO - saving  annotated_tomato_150.vcf.bgz.tbj\n                  8,646\n```\n\n## File Sizes\n\n**TBI** Tabix Index\n\n**TBK** Binary TabixPy 'all chunks' index\n\n**TBJ** Compressed JSON Tabix index\n\n**TBJ.json** Uncompressed JSON Tabix Index\n\n```text\n6.8M annotated_tomato_150.100000.vcf.gz\n1.1K annotated_tomato_150.100000.vcf.gz.tbi\n5.9K annotated_tomato_150.100000.vcf.gz.tbk                  6.5X\n8.9K annotated_tomato_150.100000.vcf.gz.tbj                  8.1X\n104K annotated_tomato_150.100000.vcf.gz.tbj.json            94.5X\n\n 44M annotated_tomato_150.SL2.50ch00-01-02.vcf.gz\n4.3K annotated_tomato_150.SL2.50ch00-01-02.vcf.gz.tbi\n 40K annotated_tomato_150.SL2.50ch00-01-02.vcf.gz.tbk        9.3X\n 39K annotated_tomato_150.SL2.50ch00-01-02.vcf.gz.tbj        9.1X\n468K annotated_tomato_150.SL2.50ch00-01-02.vcf.gz.tbj.json 108.3X\n\n5.6G annotated_tomato_150.vcf.bgz\n727K annotated_tomato_150.vcf.bgz.tbi\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bejobioinformatics/tabixpy",
    "keywords": "Tabix Genomics VCF SNP",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tabixpy",
    "package_url": "https://pypi.org/project/tabixpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/tabixpy/",
    "project_urls": {
      "Homepage": "https://github.com/bejobioinformatics/tabixpy"
    },
    "release_url": "https://pypi.org/project/tabixpy/1.5.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Tabix reader written 100% in Python",
    "version": "1.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7784162,
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04cfbffbed5ce1dff22acb29db558c0c0d1783f5dba7886ea0aa8cf44d5cd016",
          "md5": "1b775f2755171d5aef045ccc2a51737f",
          "sha256": "6ff868f0778562bc97eb6f162525a6614d30ef154ec4a4ac04aece5fd829896f"
        },
        "downloads": -1,
        "filename": "tabixpy-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b775f2755171d5aef045ccc2a51737f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7400,
        "upload_time": "2020-06-11T22:29:03",
        "upload_time_iso_8601": "2020-06-11T22:29:03.102142Z",
        "url": "https://files.pythonhosted.org/packages/04/cf/bffbed5ce1dff22acb29db558c0c0d1783f5dba7886ea0aa8cf44d5cd016/tabixpy-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c42ceef7beb120f6ee5057217f2176f98a775415ea3f3dd5254ae9a42a812d98",
          "md5": "f12dd951bc733a610b33232ae67a1285",
          "sha256": "0e09d9c2fc3f9f677abb19813e2c0832aa69256401e3ffc3a94ec7b7caf1e842"
        },
        "downloads": -1,
        "filename": "tabixpy-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f12dd951bc733a610b33232ae67a1285",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7306,
        "upload_time": "2020-06-11T15:32:34",
        "upload_time_iso_8601": "2020-06-11T15:32:34.721896Z",
        "url": "https://files.pythonhosted.org/packages/c4/2c/eef7beb120f6ee5057217f2176f98a775415ea3f3dd5254ae9a42a812d98/tabixpy-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "219ddf516cecf2c81bda67dde27a8d7c92657844e7e97689bc02a8e9a5ce1be4",
          "md5": "6563a3736e73a8179d42b19145f248e6",
          "sha256": "7ed98f4131a7781d2671f0c39b5ae8a26b6b9179001bf35e9e5ac007ae8a8550"
        },
        "downloads": -1,
        "filename": "tabixpy-1.tar.gz",
        "has_sig": false,
        "md5_digest": "6563a3736e73a8179d42b19145f248e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5442,
        "upload_time": "2020-06-11T15:32:36",
        "upload_time_iso_8601": "2020-06-11T15:32:36.762669Z",
        "url": "https://files.pythonhosted.org/packages/21/9d/df516cecf2c81bda67dde27a8d7c92657844e7e97689bc02a8e9a5ce1be4/tabixpy-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be8061cb41f6865a88dc24d12844f8fb991fd6efe9636e40d2dac086b7b19ce1",
          "md5": "27bce368228d84f2c8b6fccbd09f0434",
          "sha256": "ffefd061c2356213dca2b3e2776cb5b435fadd4f02b7b05384d402eadc3d182d"
        },
        "downloads": -1,
        "filename": "tabixpy-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27bce368228d84f2c8b6fccbd09f0434",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7398,
        "upload_time": "2020-06-11T22:38:16",
        "upload_time_iso_8601": "2020-06-11T22:38:16.751141Z",
        "url": "https://files.pythonhosted.org/packages/be/80/61cb41f6865a88dc24d12844f8fb991fd6efe9636e40d2dac086b7b19ce1/tabixpy-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0472348e33dd72d4db84de5ef3099d4889167cd76f8d4bb1c13a16bef5dbf1a",
          "md5": "287e75f8bf41d0b80cc3e01a28c2fe68",
          "sha256": "b6d8e983f04b508718a22a263a8b796363e4cfe9b501add5d691ae45491a244e"
        },
        "downloads": -1,
        "filename": "tabixpy-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "287e75f8bf41d0b80cc3e01a28c2fe68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6482,
        "upload_time": "2020-06-11T22:38:17",
        "upload_time_iso_8601": "2020-06-11T22:38:17.676326Z",
        "url": "https://files.pythonhosted.org/packages/f0/47/2348e33dd72d4db84de5ef3099d4889167cd76f8d4bb1c13a16bef5dbf1a/tabixpy-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93564735dc258eeb049ef2f2d726c33713146bc960cd8fa7bc502a388fbb1baa",
          "md5": "80fda7d8881c9b0ac6c3c4e4f0d69069",
          "sha256": "74ae560ff1dd753211b9a33670108c03dde48bb213a7a890abe5c97b033d8d67"
        },
        "downloads": -1,
        "filename": "tabixpy-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80fda7d8881c9b0ac6c3c4e4f0d69069",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10844,
        "upload_time": "2020-06-25T09:24:21",
        "upload_time_iso_8601": "2020-06-25T09:24:21.464532Z",
        "url": "https://files.pythonhosted.org/packages/93/56/4735dc258eeb049ef2f2d726c33713146bc960cd8fa7bc502a388fbb1baa/tabixpy-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cf5c853c19e5f95649a371a7265cea1c2c85dbd6e890386327b8d099c1e4a74",
          "md5": "16d0aedae94fdc8d489d04b9534380b8",
          "sha256": "aa2b3b5adcfc345d6e82de7f717ed50866437a9ee15b7f2521f16134c9449aa8"
        },
        "downloads": -1,
        "filename": "tabixpy-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "16d0aedae94fdc8d489d04b9534380b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14085,
        "upload_time": "2020-06-25T09:24:22",
        "upload_time_iso_8601": "2020-06-25T09:24:22.271794Z",
        "url": "https://files.pythonhosted.org/packages/9c/f5/c853c19e5f95649a371a7265cea1c2c85dbd6e890386327b8d099c1e4a74/tabixpy-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b2586289ef89f7e6f0ed81d65082bb0eca9a7df8581cd67cd4b22ff101aa96a",
          "md5": "36e86e78d813a40ca58970fde2b4125d",
          "sha256": "fe97ac3e3884b54cd450cc1552b5a0508c76dbae0173d436339c744879c0cc19"
        },
        "downloads": -1,
        "filename": "tabixpy-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36e86e78d813a40ca58970fde2b4125d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 53907230,
        "upload_time": "2020-07-24T20:45:13",
        "upload_time_iso_8601": "2020-07-24T20:45:13.927933Z",
        "url": "https://files.pythonhosted.org/packages/8b/25/86289ef89f7e6f0ed81d65082bb0eca9a7df8581cd67cd4b22ff101aa96a/tabixpy-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0ae023bf54d32480137ede5c9447135c5f1ae48dbe3c90a43cbb1e3ac1e4b23",
          "md5": "5a79244aa4f50e5ac8a31c95feb61f93",
          "sha256": "588b7fb066f1ad51176433b8e7742730aaf5828433ca44f8f8d1515e36ca2b6f"
        },
        "downloads": -1,
        "filename": "tabixpy-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5a79244aa4f50e5ac8a31c95feb61f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53922343,
        "upload_time": "2020-07-24T20:45:21",
        "upload_time_iso_8601": "2020-07-24T20:45:21.897941Z",
        "url": "https://files.pythonhosted.org/packages/d0/ae/023bf54d32480137ede5c9447135c5f1ae48dbe3c90a43cbb1e3ac1e4b23/tabixpy-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a453fd60594bdf343d86d531677d06c5179821ff6e24b95b6a27e529a12b49e7",
          "md5": "5a195c6b201440696b65e8140e84459f",
          "sha256": "4df515002d5dcae82fdb0c33592daf5259044876318a3eb3b4a3566e17ce9a6e"
        },
        "downloads": -1,
        "filename": "tabixpy-1.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a195c6b201440696b65e8140e84459f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 53907260,
        "upload_time": "2020-07-25T09:36:38",
        "upload_time_iso_8601": "2020-07-25T09:36:38.969683Z",
        "url": "https://files.pythonhosted.org/packages/a4/53/fd60594bdf343d86d531677d06c5179821ff6e24b95b6a27e529a12b49e7/tabixpy-1.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ad40bed345daa78cf6c8f629239af751f1acbc3a74b66dda64e4239a42904ea",
          "md5": "28b7d766389edef579e2289bb9c56c4e",
          "sha256": "5e5df9686204932802e3f8cabe58121cce629d55dad98efbb6a7bd81bdc5891f"
        },
        "downloads": -1,
        "filename": "tabixpy-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "28b7d766389edef579e2289bb9c56c4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53923593,
        "upload_time": "2020-07-25T09:36:42",
        "upload_time_iso_8601": "2020-07-25T09:36:42.835263Z",
        "url": "https://files.pythonhosted.org/packages/1a/d4/0bed345daa78cf6c8f629239af751f1acbc3a74b66dda64e4239a42904ea/tabixpy-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a453fd60594bdf343d86d531677d06c5179821ff6e24b95b6a27e529a12b49e7",
        "md5": "5a195c6b201440696b65e8140e84459f",
        "sha256": "4df515002d5dcae82fdb0c33592daf5259044876318a3eb3b4a3566e17ce9a6e"
      },
      "downloads": -1,
      "filename": "tabixpy-1.5.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a195c6b201440696b65e8140e84459f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 53907260,
      "upload_time": "2020-07-25T09:36:38",
      "upload_time_iso_8601": "2020-07-25T09:36:38.969683Z",
      "url": "https://files.pythonhosted.org/packages/a4/53/fd60594bdf343d86d531677d06c5179821ff6e24b95b6a27e529a12b49e7/tabixpy-1.5.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ad40bed345daa78cf6c8f629239af751f1acbc3a74b66dda64e4239a42904ea",
        "md5": "28b7d766389edef579e2289bb9c56c4e",
        "sha256": "5e5df9686204932802e3f8cabe58121cce629d55dad98efbb6a7bd81bdc5891f"
      },
      "downloads": -1,
      "filename": "tabixpy-1.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "28b7d766389edef579e2289bb9c56c4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 53923593,
      "upload_time": "2020-07-25T09:36:42",
      "upload_time_iso_8601": "2020-07-25T09:36:42.835263Z",
      "url": "https://files.pythonhosted.org/packages/1a/d4/0bed345daa78cf6c8f629239af751f1acbc3a74b66dda64e4239a42904ea/tabixpy-1.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}