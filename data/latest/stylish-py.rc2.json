{
  "info": {
    "author": "Alex Hawking",
    "author_email": "alexhawking23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# stylish-python\nAn intuitive way to style python terminal output\n\n## Import\n\nFirst import the libaray with:\n```python\nfrom stylish_py import *\n```\n\n## Usage\n\nAll output must use `sprint()` (stylish print) as below:\n```python\nsprint(\"This will be styled\")\n```\n`sprint()` accepts both strings and integer values and will print whatever is passed into it onto the console. It will print styled text if styles are applied as intstructed below.\n\n## The `style()` method\n\nFor basic styling use the `style()` method. All styles must be declared in a dictionary where the key is the property and the value is the style you want to apply, sort of like CSS. Below is some basic usage of the `style()` method:\n```python\nsprint(\"blue and bold\").style({\"color\": \"blue\", \"font\": \"italic\"})\nsprint(\"hex and rgb is accepted too!\").style({\"color\": \"#FFFFFF\", \"background\": (0,0,0)})\n```\n\nAt the moment the following styles can be applied:\n* `\"color\"`: sets the foreground color\n* `\"background\"`: sets the background color\n* `\"font\"`: can change basic font properties such as weight and slant, dependent on terminal used\n* `\"style\"`: only accepts `\"none\"` and is used only for nested styles explained later on\n\nBoth `\"color\"` and `\"background\"` accept rgb values (in 3 element tuple containing ***only*** integers), hex values (in a string beginning with \"#\") or one of the pre-assigned values explained at end of the README.\n\n## `Init()`\n\nThe `init()` method should be called at the start of the file. At the moment the init method accepts the following:\n* `stylesheet`: Can either accept a string that points to the path of the `.ass` file or to a variable containing a list of styles (stylesheets are explained below)\n* `palette`: Can either accept a string that points to the path of the `.acp` file or to a variable containing a dictionary of custom colors (palettes are explained below)\n* `end`: Can accept a boolean, either `True` or `False`. If set to `False` the style applied to the line above will continue on through all lines. Recommend to set to `True`\n\n***file.py***\n```python\nfrom stylish_py import *\n\nsprint().init(\n    end=True,\n    stylesheet=\"./path/to/stylesheet.ass\",\n    palette=\"./path/to/palette.acp\"\n)\n```\n\n## Stylesheets\n\nstylish allows you to use stylesheets to easily apply styles to multiple elements through the use of the `id()` and `stylesheet()` methods. A stylesheet can either be imported from a `.ass` (awesome style sheet) file or defined inline as shown below. At the moment only one style sheet can be used at once. Below are two examples of stylesheet usage:\n\n***style.ass***\n```\n{\"id\": \"title\", \"color\": (255, 255, 255), \"font\": \"bold\"}\n{\"id\": \"subtitle\", \"color\": (200, 200, 200), \"font\": \"italic\"}\n```\n\n***file.py***\n```python\nfrom stylish_py import *\n\nsprint().init(\n    stylesheet=\"./style.ass\"\n)\n\nsprint(\"This is a white, bold title\").id(\"title\")\nsprint(\"This is a grey, italic subtitle\").id(\"subtitle\")\n```\n\nAs you can see in the above example a stylesheet was imported using the `init()` method. Each dictionary in a stylesheet should have an `\"id\"` tag, this tells stylish what styles should be used where. The `id()` method accepts a string which should match that of the `\"id\"` value in the dictionary containing the styles you want to apply.\n\nStylsheets can also be created within the `.py` that they are going to be used as below:\n\n***file.py***\n```python\nfrom stylish_py import *\n\nstylesheet = [\n    {\"id\": \"title\", \"color\": (255, 255, 255), \"font\": \"bold\"},\n    {\"id\": \"subtitle\", \"color\": (200, 200, 200), \"font\": \"italic\"}\n]\n\nsprint().init(\n    stylesheet=stylesheet\n)\n\nsprint(\"This is a white, bold title\").id(\"title\")\nsprint(\"This is a grey, italic subtitle\").id(\"subtitle\")\n```\n\nThis will produce the same output but instead of passing in a string to the `init()` method a list of dictionaries is instead used.\n\n## Palettes\n\nstylish also allows you to create palettes of custom colors which you can use to set your `\"color\"` and `\"background\"`. Palettes function in a similar way to stylesheets in that they can be defined either inline or in a `.acp` (awesome color palette file) as below:\n\n***palette.acp***\n```\n{\n    \"turquoise\": \"#41EAD4\",\n    \"sage\": (186, 191, 149)\n}\n```\n\n***file.py***\n```python\nfrom stylish_py import *\n\nsprint().init(\n    palette=\"./palette.acp\"\n)\n\nsprint(\"This is a custom color!\").style({\"color\": \"turquoise\"})\nsprint(\"So is this!\").style({\"color\": \"sage\"})\n```\n\nThe below will output the exact same as the above:\n\n```python\nfrom stylish_py import *\n\npalette = {\n    \"turquoise\": \"#41EAD4\",\n    \"sage\": (186, 191, 149)\n}\n\nsprint().init(\n    palette=palette\n)\n\nsprint(\"This is a custom color!\").style({\"color\": \"turquoise\"})\nsprint(\"So is this!\").style({\"color\": \"sage\"})\n```\n\n## Default values\n\n### Colors\n\nColor | RGB\n--- | ---\nred | (255, 0, 0)\ngreen | (0, 255, 0)\nblue | (0, 0, 255)\nyellow | (255, 255, 0)\naqua | (0, 255, 255)\nmagenta | (255, 0, 255)\npink | (255, 105, 180)\nchocolate | (255, 105, 30)\nwhite | (255, 255, 255)\nblack | (0, 0,0 )\n\n### FONTS\n\n* bold\n* dim\n* italic\n* underline\n* invisible\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Alex-Hawking/stylish-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stylish-py",
    "package_url": "https://pypi.org/project/stylish-py/",
    "platform": "",
    "project_url": "https://pypi.org/project/stylish-py/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Alex-Hawking/stylish-python/issues",
      "Homepage": "https://github.com/Alex-Hawking/stylish-python"
    },
    "release_url": "https://pypi.org/project/stylish-py/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A different way to style python output",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11047117,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9f7953f9d8ac445c241605d0ff09c07f3ae49e646df993dbf2b47cfad179d2a",
          "md5": "9fee2fd8019a75aae807bcf4c1e27421",
          "sha256": "5daf1200e9e7fa2ccfc9218b2f33fecfe1a8a2697f0411beddb6a051b09ef22e"
        },
        "downloads": -1,
        "filename": "stylish_py-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fee2fd8019a75aae807bcf4c1e27421",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17142,
        "upload_time": "2021-07-30T05:18:15",
        "upload_time_iso_8601": "2021-07-30T05:18:15.255204Z",
        "url": "https://files.pythonhosted.org/packages/b9/f7/953f9d8ac445c241605d0ff09c07f3ae49e646df993dbf2b47cfad179d2a/stylish_py-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c205ad2413887443e1e9c61c201e4f421ba36a41527be4c3842378d72953e7e",
          "md5": "ccd295ffae3ed9fccf8358173e9f4e8d",
          "sha256": "08b74b58043786002fc5035cc52836b81a4b2867c468d1d0130666a3d63ded66"
        },
        "downloads": -1,
        "filename": "stylish_py-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ccd295ffae3ed9fccf8358173e9f4e8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17157,
        "upload_time": "2021-07-30T05:18:17",
        "upload_time_iso_8601": "2021-07-30T05:18:17.372308Z",
        "url": "https://files.pythonhosted.org/packages/8c/20/5ad2413887443e1e9c61c201e4f421ba36a41527be4c3842378d72953e7e/stylish_py-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "220da1ae08be3c497d542c483c4999d77eececb666298722602975c4126a4620",
          "md5": "609c65149d0b7f172c9932749abc9bfd",
          "sha256": "0c8628af9ed61b9f4c4c4771a7f1a34fbc987d251a6f9e0143df2c376b124ff4"
        },
        "downloads": -1,
        "filename": "stylish_py-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "609c65149d0b7f172c9932749abc9bfd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15490,
        "upload_time": "2021-07-30T05:32:23",
        "upload_time_iso_8601": "2021-07-30T05:32:23.984969Z",
        "url": "https://files.pythonhosted.org/packages/22/0d/a1ae08be3c497d542c483c4999d77eececb666298722602975c4126a4620/stylish_py-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcee7af1ca22104bb7c8665a63c06f5166e5884c437ce5c41bf30422326295f0",
          "md5": "a72307df63e9df506da19069cb911d00",
          "sha256": "4cf236ff55bfec46780a7b161ded0420b51fe23f96b630b02b7db64ef4892e6e"
        },
        "downloads": -1,
        "filename": "stylish_py-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a72307df63e9df506da19069cb911d00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15589,
        "upload_time": "2021-07-30T05:32:26",
        "upload_time_iso_8601": "2021-07-30T05:32:26.062780Z",
        "url": "https://files.pythonhosted.org/packages/dc/ee/7af1ca22104bb7c8665a63c06f5166e5884c437ce5c41bf30422326295f0/stylish_py-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "220da1ae08be3c497d542c483c4999d77eececb666298722602975c4126a4620",
        "md5": "609c65149d0b7f172c9932749abc9bfd",
        "sha256": "0c8628af9ed61b9f4c4c4771a7f1a34fbc987d251a6f9e0143df2c376b124ff4"
      },
      "downloads": -1,
      "filename": "stylish_py-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "609c65149d0b7f172c9932749abc9bfd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15490,
      "upload_time": "2021-07-30T05:32:23",
      "upload_time_iso_8601": "2021-07-30T05:32:23.984969Z",
      "url": "https://files.pythonhosted.org/packages/22/0d/a1ae08be3c497d542c483c4999d77eececb666298722602975c4126a4620/stylish_py-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcee7af1ca22104bb7c8665a63c06f5166e5884c437ce5c41bf30422326295f0",
        "md5": "a72307df63e9df506da19069cb911d00",
        "sha256": "4cf236ff55bfec46780a7b161ded0420b51fe23f96b630b02b7db64ef4892e6e"
      },
      "downloads": -1,
      "filename": "stylish_py-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a72307df63e9df506da19069cb911d00",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15589,
      "upload_time": "2021-07-30T05:32:26",
      "upload_time_iso_8601": "2021-07-30T05:32:26.062780Z",
      "url": "https://files.pythonhosted.org/packages/dc/ee/7af1ca22104bb7c8665a63c06f5166e5884c437ce5c41bf30422326295f0/stylish_py-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}