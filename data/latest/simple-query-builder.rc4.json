{
  "info": {
    "author": "co0lc0der",
    "author_email": "c0der@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: SQL",
      "Topic :: Database",
      "Topic :: Database :: Database Engines/Servers"
    ],
    "description": "# QueryBuilder python module\n\n[![Latest Version](https://img.shields.io/github/release/co0lc0der/simple-query-builder-python?color=orange&style=flat-square)](https://github.com/co0lc0der/simple-query-builder-python/release)\n![GitHub repo size](https://img.shields.io/github/repo-size/co0lc0der/simple-query-builder-python?label=size&style=flat-square)\n[![GitHub license](https://img.shields.io/github/license/co0lc0der/simple-query-builder-python?style=flat-square)](https://github.com/co0lc0der/simple-query-builder-python/blob/main/LICENSE.md)\n![Python 3.7, 3.8, 3.9, 3.10](https://img.shields.io/pypi/pyversions/simple-query-builder?color=blueviolet&style=flat-square)\n![PyPI](https://img.shields.io/pypi/v/simple-query-builder?color=yellow&style=flat-square)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/simple-query-builder?color=darkgreen&style=flat-square)\n\nThis is a small easy-to-use module for working with a database. It provides some public methods to compose SQL queries and manipulate data. Each SQL query is prepared and safe. QueryBuilder fetches data to _dictionary_ by default. At present time the component supports SQLite (file or memory).\n\n## Contributing\n\nBug reports and/or pull requests are welcome\n\n## License\n\nThe module is available as open source under the terms of the [MIT license](https://github.com/co0lc0der/simple-query-builder-python/blob/main/LICENSE.md)\n\n## Installation\n\nInstall the current version with [PyPI](https://pypi.org/project/simple-query-builder):\n\n```bash\npip install simple-query-builder\n```\n\nOr from Github:\n```bash\npip install https://github.com/co0lc0der/simple-query-builder-python/archive/main.zip\n```\n## How to use\n### Main public methods\n- `get_sql()` returns SQL query string which will be executed\n- `get_params()` returns a tuple of parameters for a query\n- `get_result()` returns query's result\n- `get_count()` returns result's rows count\n- `get_error()` returns `True` if an error is had\n- `get_error_message()` returns an error message if an error is had\n- `set_error(message)` sets `_error` to `True` and `_error_message`\n- `get_first()` returns the first item of results\n- `get_last()` returns the last item of results\n- `reset()` resets state to default values\n- `all()` executes SQL query and returns all rows of result (`fetchall()`)\n- `one()` executes SQL query and returns the first row of result (`fetchone()`)\n- `column(col)` executes SQL query and returns the needed column of result by its index or name, `col` is `0` by default\n- `pluck(key, col)` executes SQL query and returns a list of tuples/dicts (the key (usually ID) and the needed column of result) by its indexes or names, `key` is `0` and `col` is `1` by default\n- `go()` this method is for non `SELECT` queries. it executes SQL query and returns nothing (but returns the last inserted row ID for `INSERT` method)\n- `exists()` returns `True` if SQL query has a row and `False` if it hasn't\n- `count()` prepares a query with SQL `COUNT(*)` function and executes it\n- `query(sql, params, fetch_type, col_index)` executes prepared `sql` with `params`, it can be used for custom queries\n- 'SQL' methods are presented in [Usage section](#usage-examples)\n\n### Import the module and init `QueryBuilder` with `Database()`\n```python\nfrom simple_query_builder import *\n\n# if you want to get results as a list of dictionaries (by default since 0.3.5)\nqb = QueryBuilder(DataBase(), 'my_db.db') # result_dict=True, print_errors=False\n\n# or if you want to get results as a list of tuples (since 0.3.5)\nqb = QueryBuilder(DataBase(), 'my_db.db', result_dict=False)\n\n# for printing errors into terminal (since 0.3.5)\nqb = QueryBuilder(DataBase(), 'my_db.db', print_errors=True)\n```\n### Usage examples\n- Select all rows from a table\n```python\nresults = qb.select('users').all()\n```\n```sql\nSELECT * FROM `users`;\n```\n- Select a row with a condition\n```python\nresults = qb.select('users').where([['id', '=', 10]]).one()\n# or since 0.3.4\nresults = qb.select('users').where([['id', 10]]).one()\n```\n```sql\nSELECT * FROM `users` WHERE `id` = 10;\n```\n- Select rows with two conditions\n```python\nresults = qb.select('users').where([['id', '>', 1], 'and', ['group_id', '=', 2]]).all()\n# or since 0.3.4\nresults = qb.select('users').where([['id', '>', 1], 'and', ['group_id', 2]]).all()\n```\n```sql\nSELECT * FROM `users` WHERE (`id` > 1) AND (`group_id` = 2);\n```\n- Select a row with a `LIKE` and `NOT LIKE` condition\n```python\nresults = qb.select('users').like(['name', '%John%']).all()\n# or\nresults = qb.select('users').where([['name', 'LIKE', '%John%']]).all()\n# or since 0.3.5\nresults = qb.select('users').like('name', '%John%').all()\n```\n```sql\nSELECT * FROM `users` WHERE (`name` LIKE '%John%');\n```\n```python\nresults = qb.select('users').not_like(['name', '%John%']).all()\n# or\nresults = qb.select('users').where([['name', 'NOT LIKE', '%John%']]).all()\n# or since 0.3.5\nresults = qb.select('users').not_like('name', '%John%').all()\n```\n```sql\nSELECT * FROM `users` WHERE (`name` NOT LIKE '%John%');\n```\n- Select a row with a `IS NULL` and `IS NOT NULL` condition (since 0.3.5)\n```python\nresults = qb.select('users').is_null('phone').all()\n# or\nresults = qb.select('users').where([['phone', 'is null']]).all()\n```\n```sql\nSELECT * FROM `users` WHERE (`phone` IS NULL);\n```\n```python\nresults = qb.select('customers').is_not_null('address').all()\n# or\nresults = qb.select('customers').not_null('address').all()\n# or\nresults = qb.select('customers').where([['address', 'is not null']]).all()\n```\n```sql\nSELECT * FROM `customers` WHERE (`address` IS NOT NULL);\n```\n- Select rows with `OFFSET` and `LIMIT`\n```python\nresults = qb.select('posts')\\\n    .where([['user_id', '=', 3]])\\\n    .offset(14)\\\n    .limit(7)\\\n    .all()\n# or since 0.3.4\nresults = qb.select('posts')\\\n    .where([['user_id', 3]])\\\n    .offset(14)\\\n    .limit(7)\\\n    .all()\n```\n```sql\nSELECT * FROM `posts` WHERE (`user_id` = 3) OFFSET 14 LIMIT 7;\n```\n- Select custom fields with additional SQL\n1. `COUNT()`\n```python\nresults = qb.select('users', {'counter': 'COUNT(*)'}).one()\n# or\nresults = qb.count('users').one()\n```\n```sql\nSELECT COUNT(*) AS `counter` FROM `users`;\n```\n2. `ORDER BY`\n```python\nresults = qb.select({'b': 'branches'}, ['b.id', 'b.name'])\\\n    .where([['b.id', '>', 1], 'and', ['b.parent_id', 1]])\\\n    .order_by('b.id', 'desc')\\\n    .all()\n# or since 0.3.4\nresults = qb.select({'b': 'branches'}, ['b.id', 'b.name'])\\\n    .where([['b.id', '>', 1], 'and', ['b.parent_id', 1]])\\\n    .order_by('b.id desc')\\\n    .all()\n```\n```sql\nSELECT `b`.`id`, `b`.`name` FROM `branches` AS `b`\nWHERE (`b`.`id` > 1) AND (`b`.`parent_id` = 1)\nORDER BY `b`.`id` DESC;\n``` \n3. `GROUP BY` and `HAVING`\n```python\nresults = qb.select('posts', ['id', 'category', 'title'])\\\n    .where([['views', '>=', 1000]])\\\n    .group_by('category')\\\n    .all()\n```\n```sql\nSELECT `id`, `category`, `title` FROM `posts`\nWHERE (`views` >= 1000) GROUP BY `category`;\n```\n```python\ngroups = qb.select('orders', {'month_num': 'MONTH(`created_at`)', 'total': 'SUM(`total`)'})\\\n    .where([['YEAR(`created_at`)', '=', 2020]])\\\n    .group_by('month_num')\\\n    .having([['total', '=', 20000]])\\\n    .all()\n# or since 0.3.4\ngroups = qb.select('orders', {'month_num': 'MONTH(`created_at`)', 'total': 'SUM(`total`)'})\\\n    .where([['YEAR(`created_at`)', 2020]])\\\n    .group_by('month_num')\\\n    .having([['total', 20000]])\\\n    .all()\n```\n```sql\nSELECT MONTH(`created_at`) AS `month_num`, SUM(`total`) AS `total`\nFROM `orders` WHERE (YEAR(`created_at`) = 2020)\nGROUP BY `month_num` HAVING (`total` = 20000);\n```\n4. `JOIN`. Supports `INNER`, `LEFT OUTER`, `RIGHT OUTER`, `FULL OUTER` and `CROSS` joins (`INNER` is by default)\n```python\nresults = qb.select({'u': 'users'}, [\n        'u.id',\n        'u.email',\n        'u.username',\n        {'perms': 'groups.permissions'}\n    ])\\\n    .join('groups', ['u.group_id', 'groups.id'])\\\n    .limit(5)\\\n    .all()\n```\n```sql\nSELECT `u`.`id`, `u`.`email`, `u`.`username`, `groups`.`permissions` AS `perms`\nFROM `users` AS `u`\nINNER JOIN `groups` ON `u`.`group_id` = `groups`.`id`\nLIMIT 5;\n```\n```python\nresults = qb.select({'cp': 'cabs_printers'}, [\n        'cp.id',\n        'cp.cab_id',\n        {'cab_name': 'cb.name'},\n        'cp.printer_id',\n        {'printer_name': 'p.name'},\n        {'cartridge_type': 'c.name'},\n        'cp.comment'\n    ])\\\n    .join({'cb': 'cabs'}, ['cp.cab_id', 'cb.id'])\\\n    .join({'p': 'printer_models'}, ['cp.printer_id', 'p.id'])\\\n    .join({'c': 'cartridge_types'}, 'p.cartridge_id=c.id')\\\n    .where([['cp.cab_id', 'in', [11, 12, 13]], 'or', ['cp.cab_id', '=', 5], 'and', ['p.id', '>', 'c.id']])\\\n    .all()\n```\n```sql\nSELECT `cp`.`id`, `cp`.`cab_id`, `cb`.`name` AS `cab_name`, `cp`.`printer_id`,\n       `p`.`name` AS `printer_name`, `c`.`name` AS `cartridge_type`, `cp`.`comment`\nFROM `cabs_printers` AS `cp`\nINNER JOIN `cabs` AS `cb` ON `cp`.`cab_id` = `cb`.`id`\nINNER JOIN `printer_models` AS `p` ON `cp`.`printer_id` = `p`.`id`\nINNER JOIN `cartridge_types` AS `c` ON p.cartridge_id=c.id\nWHERE (`cp`.`cab_id` IN (11, 12, 13)) OR (`cp`.`cab_id` = 5) AND (`p`.`id` > `c`.`id`);\n```\n```python\n# since 0.3.4\nresults = qb.select({'cp': 'cabs_printers'}, [\n        'cp.id',\n        'cp.cab_id',\n        {'cab_name': 'cb.name'},\n        'cp.printer_id',\n        {'cartridge_id': 'c.id'},\n        {'printer_name': 'p.name'},\n        {'cartridge_type': 'c.name'},\n        'cp.comment'\n    ])\\\n    .join({'cb': 'cabs'}, ['cp.cab_id', 'cb.id'])\\\n    .join({'p': 'printer_models'}, ['cp.printer_id', 'p.id'])\\\n    .join({'c': 'cartridge_types'}, ['p.cartridge_id', 'c.id'])\\\n    .group_by(['cp.printer_id', 'cartridge_id'])\\\n    .order_by(['cp.cab_id', 'cp.printer_id desc'])\\\n    .all()\n```\n```sql\nSELECT `cp`.`id`, `cp`.`cab_id`, `cb`.`name` AS `cab_name`, `cp`.`printer_id`, `c`.`id` AS `cartridge_id`,\n    `p`.`name` AS `printer_name`, `c`.`name` AS `cartridge_type`, `cp`.`comment`\nFROM `cabs_printers` AS `cp`\nINNER JOIN `cabs` AS `cb` ON `cp`.`cab_id` = `cb`.`id`\nINNER JOIN `printer_models` AS `p` ON `cp`.`printer_id` = `p`.`id`\nINNER JOIN `cartridge_types` AS `c` ON `p`.`cartridge_id` = `c`.`id`\nGROUP BY `cp`.`printer_id`, `cartridge_id`\nORDER BY `cp`.`cab_id` ASC, `cp`.`printer_id` DESC;\n```\n- Insert a row\n```python\nnew_id = qb.insert('groups', {\n    'name': 'Moderator',\n    'permissions': 'moderator'\n}).go()\n```\n```sql\nINSERT INTO `groups` (`name`, `permissions`) VALUES ('Moderator', 'moderator');\n```\n- Insert many rows\n```python\nqb.insert('groups', [['name', 'role'],\n    ['Moderator', 'moderator'],\n    ['Moderator2', 'moderator'],\n    ['User', 'user'],\n    ['User2', 'user']\n]).go()\n```\n```sql\nINSERT INTO `groups` (`name`, `role`)\nVALUES ('Moderator', 'moderator'),\n       ('Moderator2', 'moderator'),\n       ('User', 'user'),\n       ('User2', 'user');\n```\n- Update a row\n```python\nqb.update('users', {\n        'username': 'John Doe',\n        'status': 'new status'\n    })\\\n    .where([['id', '=', 7]])\\\n    .limit()\\\n    .go()\n# or since 0.3.4\nqb.update('users', {\n        'username': 'John Doe',\n        'status': 'new status'\n    })\\\n    .where([['id', 7]])\\\n    .limit()\\\n    .go()\n```\n```sql\nUPDATE `users` SET `username` = 'John Doe', `status` = 'new status'\nWHERE `id` = 7 LIMIT 1;\n```\n- Update rows\n```python\nqb.update('posts', {'status': 'published'})\\\n    .where([['YEAR(`updated_at`)', '>', 2020]])\\\n    .go()\n```\n```sql\nUPDATE `posts` SET `status` = 'published'\nWHERE (YEAR(`updated_at`) > 2020);\n```\n- Delete a row\n```python\nqb.delete('users')\\\n    .where([['name', '=', 'John']])\\\n    .limit()\\\n    .go()\n# or since 0.3.4\nqb.delete('users')\\\n    .where([['name', 'John']])\\\n    .limit()\\\n    .go()\n```\n```sql\nDELETE FROM `users` WHERE `name` = 'John' LIMIT 1;\n```\n- Delete rows\n```python\nqb.delete('comments')\\\n    .where([['user_id', '=', 10]])\\\n    .go()\n# or since 0.3.4\nqb.delete('comments')\\\n    .where([['user_id', 10]])\\\n    .go()\n```\n```sql\nDELETE FROM `comments` WHERE `user_id` = 10;\n```\n- Truncate a table\n\nThis method will be moved to another class\n```python\nqb.truncate('users').go()\n```\n```sql\nTRUNCATE TABLE `users`;\n```\n- Drop a table\n\nThis method will be moved to another class\n```python\nqb.drop('temporary').go()\n```\n```sql\nDROP TABLE IF EXISTS `temporary`;\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/co0lc0der/simple-query-builder-python/archive/v0.3.6.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/co0lc0der/simple-query-builder-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-query-builder",
    "package_url": "https://pypi.org/project/simple-query-builder/",
    "platform": null,
    "project_url": "https://pypi.org/project/simple-query-builder/",
    "project_urls": {
      "Download": "https://github.com/co0lc0der/simple-query-builder-python/archive/v0.3.6.zip",
      "Homepage": "https://github.com/co0lc0der/simple-query-builder-python"
    },
    "release_url": "https://pypi.org/project/simple-query-builder/0.3.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This is a small easy-to-use component for working with a database. It provides some public methods to compose SQL queries and manipulate data. Each SQL query is prepared and safe.",
    "version": "0.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17345018,
  "releases": {
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "029db590399fdd1a2d9a6f81c40850c18af7d93fb7e8017f3a8272c02cabbaca",
          "md5": "a7bb01a34f153272c3117c4ea3fe4468",
          "sha256": "476f81500b70b676810040597ce9110a2f9314508c4c2106b6466f86bbcf7c5c"
        },
        "downloads": -1,
        "filename": "simple_query_builder-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a7bb01a34f153272c3117c4ea3fe4468",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11121,
        "upload_time": "2022-09-08T08:18:03",
        "upload_time_iso_8601": "2022-09-08T08:18:03.327804Z",
        "url": "https://files.pythonhosted.org/packages/02/9d/b590399fdd1a2d9a6f81c40850c18af7d93fb7e8017f3a8272c02cabbaca/simple_query_builder-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebbb2b4d37334d9189fa5ea359381cf5f69d1346080fb577e29ba748a1e42814",
          "md5": "87c957e37ff10eefd5810d5020f2b778",
          "sha256": "5754485bed1778d7778c8423fc04a1d31eabd6915de0e39a5425134b257cfc65"
        },
        "downloads": -1,
        "filename": "simple_query_builder-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "87c957e37ff10eefd5810d5020f2b778",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11904,
        "upload_time": "2022-10-07T09:18:20",
        "upload_time_iso_8601": "2022-10-07T09:18:20.303399Z",
        "url": "https://files.pythonhosted.org/packages/eb/bb/2b4d37334d9189fa5ea359381cf5f69d1346080fb577e29ba748a1e42814/simple_query_builder-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58a75add1f490bf714e14e86fb09a8fc0a53d551db0d6214bb91630881da4f50",
          "md5": "4bde54fed9a9c7e8b5af3d6b581e22b8",
          "sha256": "d1252d78549c1ea110903f74d5767cd26defa29edca4ef6c156b3e4b0681df6b"
        },
        "downloads": -1,
        "filename": "simple_query_builder-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4bde54fed9a9c7e8b5af3d6b581e22b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12821,
        "upload_time": "2023-03-17T09:38:26",
        "upload_time_iso_8601": "2023-03-17T09:38:26.423785Z",
        "url": "https://files.pythonhosted.org/packages/58/a7/5add1f490bf714e14e86fb09a8fc0a53d551db0d6214bb91630881da4f50/simple_query_builder-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ce3d4921c4248bdc72b37f84fd499ba3628ad56168bf359071f9e51ff177cec",
          "md5": "6b3a593636100e289076756d62ae3bfc",
          "sha256": "809986dafa4990211ab1a7df66d2e29c29145534eef0ae4c7b779044d81d6646"
        },
        "downloads": -1,
        "filename": "simple_query_builder-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6b3a593636100e289076756d62ae3bfc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13810,
        "upload_time": "2023-03-18T12:15:12",
        "upload_time_iso_8601": "2023-03-18T12:15:12.048754Z",
        "url": "https://files.pythonhosted.org/packages/6c/e3/d4921c4248bdc72b37f84fd499ba3628ad56168bf359071f9e51ff177cec/simple_query_builder-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ce3d4921c4248bdc72b37f84fd499ba3628ad56168bf359071f9e51ff177cec",
        "md5": "6b3a593636100e289076756d62ae3bfc",
        "sha256": "809986dafa4990211ab1a7df66d2e29c29145534eef0ae4c7b779044d81d6646"
      },
      "downloads": -1,
      "filename": "simple_query_builder-0.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "6b3a593636100e289076756d62ae3bfc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13810,
      "upload_time": "2023-03-18T12:15:12",
      "upload_time_iso_8601": "2023-03-18T12:15:12.048754Z",
      "url": "https://files.pythonhosted.org/packages/6c/e3/d4921c4248bdc72b37f84fd499ba3628ad56168bf359071f9e51ff177cec/simple_query_builder-0.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}