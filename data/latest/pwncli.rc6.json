{
  "info": {
    "author": "roderick chan",
    "author_email": "ch22166@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "- [前言](#前言)\n- [简介](#简介)\n- [安装](#安装)\n- [使用模式](#使用模式)\n  - [命令行模式](#命令行模式)\n  - [脚本模式](#脚本模式)\n  - [库模式](#库模式)\n- [教程](#教程)\n- [pwncli 主命令](#pwncli-主命令)\n  - [debug 子命令](#debug-子命令)\n  - [remote 子命令](#remote-子命令)\n  - [config 子命令](#config-子命令)\n    - [list 二级子命令](#list-二级子命令)\n    - [set 二级子命令](#set-二级子命令)\n  - [misc 子命令](#misc-子命令)\n    - [gadget 二级子命令](#gadget-二级子命令)\n    - [setgdb 二级子命令](#setgdb-二级子命令)\n  - [patchelf 子命令](#patchelf-子命令)\n  - [qemu 子命令](#qemu-子命令)\n  - [template 子命令](#template-子命令)\n- [依赖库](#依赖库)\n- [截图示例](#截图示例)\n    - [pwncli 示例](#pwncli-示例)\n    - [debug 示例](#debug-示例)\n    - [remote 示例](#remote-示例)\n    - [config 示例](#config-示例)\n    - [misc 示例](#misc-示例)\n    - [patchelf 示例](#patchelf-示例)\n    - [qemu 示例](#qemu-示例)\n\n# 前言\n\n一开始写这个工具是因为在学习`pwn`的过程中，经常反复的去注释和取消注释`gdb.attach(xxx)`这样的语句，下不同断点的时候要不断地修改脚本，本地调通打远程的时候也要改脚本。\n\n习惯命令行操作后，我设想能否设计一个命令行工具，能通过命令行参数去控制一些东西，避免在调试`pwn`题的时候重复地执行上面这些工作而只专注于编写解题脚本。当想法酝酿起来，自己便试着写下第一行代码，于是，`pwncli`就此诞生。\n\n工具的目的在于实用性，我觉得`pwncli`满足实用性要求，在调试`pwn`题时能节省大量的时间。\n\n如果你觉得`pwncli`好用，请介绍给周围的`pwner`。如果你还有任何疑问，请提交`issue`或联系我`roderickchan@foxmail.com`，我将非常乐意与你讨论交流。如果你有好的想法，或者发现新的`bug`，欢迎提交`pull requests`。\n\n# 简介\n[EN](https://github.com/RoderickChan/pwncli/blob/main/README-EN.md) | [ZH](https://github.com/RoderickChan/pwncli/blob/main/README.md) | [API](https://github.com/RoderickChan/pwncli/blob/main/API-DOC.md) | [VIDEO](https://www.youtube.com/watch?v=QFemxI3rnC8)\n\n`pwncli`是一款简单、易用的`pwn`题调试与攻击工具，能提高你在`CTF`比赛中调试`pwn`题脚本的速度与效率。\n\n`pwncli`可以帮助你快速编写`pwn`题攻击脚本，并实现本地调试和远程攻击的便捷切换。`pwncli`支持三种使用模式：  \n- 命令行使用模式  \n- 脚本内使用模式  \n- 库导入使用模式 \n\n以上三种模式分别简称为：命令行模式、脚本模式和库模式。其中，命令行模式与其他命令行工具(如`linux`下的`ls`、`tar`等命令)使用方式相同，可用于本地交互调试；脚本模式可将自己编写的`python`攻击脚本包装为命令行工具，然后调用子命令执行所需功能；库模式则只会调用一些便捷的工具函数，方便快速解题。\n\n在下面的使用模式章节将会详细的阐述三种模式的使用方式与技巧。\n\n`pwncli`设计为主命令-子命令模式(与`git`类似)，目前已拥有的(子)命令有：  \n```\npwncli\n    config\n        list\n        set\n    debug\n    misc\n        gadget\n        setgdb\n    patchelf\n    qemu\n    remote\n```\n其中，`pwncli`为主命令，`config/debug/misc/patchelf/qemu/remote`为一级子命令，`list/set`为隶属`config`的二级子命令，`gadget/setgdb`为隶属`misc`的二级子命令。\n\n`pwncli`支持命令的前缀匹配(与`gdb`的命令前缀匹配类似)，通常只需要给出命令的前缀即可成功调用该命令。即输入`pwncli debug ./pwn`、`pwncli de ./pwn`和`pwncli d ./pwn`的执行效果是完全一样的。但是，必须保证前缀不会匹配到两个或多个子命令，否则将会抛出`MatchError`的匹配错误。 \n\n`pwncli`极易扩展。只需要在`pwncli/commands`目录下添加`cmd_xxx.py`，然后编写自己的子命令即可。`pwncli`会自动探测并加载子命令。例如，你想新增一个`magic`命令，你只需要：  \n```\n1. 在pwncli/commands目录下新增cmd_magic.py文件\n2. 在cmd_magic.py内编写命令的执行逻辑\n```\n当需要移除该命令时，可以删除`cmd_magic`文件，或将其重命名为非`cmd_`开头即可。\n\n`pwncli`依赖于[click](https://github.com/pallets/click) 和 [pwntools](https://github.com/Gallopsled/pwntools)。前者是一款优秀的命令行编写工具，后者是`pwner`普遍使用的攻击库。\n\n总结`pwncli`的优点为：  \n- 脚本只需编写一次，使用命令行控制本地调试与远程攻击\n- 调试过程中方便设置断点与执行其他`gdb`命令\n- 可轻松扩展并自定义子命令\n- 内置许多有用的命令与函数\n\n# 安装\n`pwncli`可以在`linux`和`windows`下使用，但在`windows`下使用受限严重，如`debug`命令将无法使用，`remote`命令仅部分可用。`pwncli`只能在`python3`环境上使用，目前暂不考虑与`python2`兼容。\n\n建议在`ubuntu`系统上使用`pwncli`，特别的，如果你了解`WSL`并选择使用`WSL`解答`pwn`题，`pwncli + WSL`将是一个极佳的选择。`debug`子命令为`WSL`系统设计了许多实用的参数，并实现了一些有趣的功能。\n\n如果你选择使用`WSL`，那么，请尽量保证发行版的名字(distribution name)为默认的`Ubuntu-16.04/Ubuntu-18.04/Ubuntu-20.04/Ubuntu-22.04`。`debug`命令的某些选项与默认发行版名称联系紧密。  \n\n`pwncli`的安装方式有两种，第一种是本地安装(**强烈建议使用此种方式安装**)：\n\n```shell\ngit clone https://github.com/RoderickChan/pwncli.git\ncd ./pwncli\npip3 install --editable .\n```\n安装结束后，别忘了将`pwncli`所在的路径添加到`PATH`环境变量，其路径一般为`~/.local/bin`。可以在家目录下的`.bashrc/.zshrc`文件中添加`export PATH=$PATH:/home/xxx/.local/bin`。\n\n这种方式安装的好处是：当你需要`pwncli`保持更新时，只需要执行`git pull`即可使用最新版本的`pwncli`。\n\n\n第二种安装方式是使用`pip3`安装：\n```\npip3 install pwncli\n```\n这种方式安装的`pwncli`可能不是最新版本，会遇到一些已解决的`bug`。不过请相信我，我会及时将`pwncli`更新到`pypi`上去的。\n\n安装结束后，执行`pwncli --version`，看到版本信息输出则代表安装成功。\n\n# 使用模式\n## 命令行模式\n你可以将`pwncli`视为一个命令行工具，虽然其本质是一个`python`脚本。使用`pwncli -h`或者`pwncli --help`将会获取到命令行的使用指导。如果你想获取某个子命令的使用指导，如`debug`命令，输入`pwncli debug -h`即可。\n\n## 脚本模式\n除了将`pwncli`当作命令行工具使用外，你还可以将脚本封装为一个命令行工具，之后，就能像使用`pwncli`一样使用这个脚本。  \n脚本模式的使用非常简单，如你的攻击脚本为`exp.py`，在脚本中写下：\n```python\n#!/usr/bin/env python3\nfrom pwncli import *\n\ncli_script() # 使用脚本模式必须调用这个函数\n```\n\n然后，在命令行输入`python3 exp.py -h`即可获得和命令行模式下`pwncli -h`一样的输出。特别的，如果你在脚本的第一行指定了解释器路径，那么你可以输入`./exp.py -h`而无需显式输入`python3`。\n\n之后，你可以将`exp.py`当成`pwncli`，使用`pwncli`所拥有的各项命令与功能。\n\n当然，你可以丰富你的脚本，使其实现更多功能，如使用`debug`和`remote`命令时，你可以在脚本后面继续添加：\n```python\n#!/usr/bin/env python3\nfrom pwncli import *\n\ncli_script() # 使用脚本模式必须显式调用这个函数\n\n# 你能够从gift里面取到很多东西\nio   = gift['io'] # process或remote对象\nelf  = gift[\"elf\"] # ELF对象，ELF(\"./pwn\")\nlibc = gift.libc # ELF对象， ELF(\"./libc.so.6\")\n\nfilename  = gift.filename # current filename\nis_debug  = gift.debug # is debug or not \nis_remote = gift.remote # is remote or not\ngdb_pid   = gift.gdb_pid # gdb pid if debug\n\n# 有时候远程提供的libc与本地不一样，打靶机时替换libc为远程libc\nif gift.remote:\n    libc = ELF(\"./libc.so.6\")\n    gift['libc'] = libc\n\n# 这里写下攻击函数等\n# ......\nio.interactive() # 与socket保持交互\n```\n熟悉`pwntools`的小伙伴对上面的脚本肯定不会陌生。从本质上来说，调用`cli_script()`后会解析命令行参数，之后将一些有用的数据放置在`gift`中。如你可以取出`io`，就是`pwntools`模块中的`process`或`remote`对象，并与其交互。\n\n## 库模式\n库模式，顾名思义，适用于你仅仅需要使用`pwncli`的一些函数或功能而不需要使用命令行解析参数的场景。你可以像使用其他`python`库一样使用`pwncli`，如在脚本中写下：\n\n```python\nfrom pwncli import *\n\n# 这里写下脚本的其他内容\n# 你可以使用pwncli中提供的使用接口\ncontext.arch=\"amd64\"\nio = process(\"./pwn\")\n\n# 如你需要根据偏移搜索libc版本与其他函数\n# 该功能与LibcSearcher类似，但不需要本地安装，需要联网使用\nlibc_box = LibcBox()\nlibc_box.add_symbol(\"system\", 0x640)\nlibc_box.add_symbol(\"puts\", 0x810)\nlibc_box.search(download_symbols=False, download_so=False, download_deb=True) # 是否下载到本地\nread_offset = libc_box.dump(\"read\")\n\n# 根据pid获取程序的libc基地址\nres = get_segment_base_addr_by_proc_maps(pid=10150)\nlibc_base = res['libc']\nheap_base = get_current_heapbase_addr() # 仅用于本地调试\n\n# 获取shellcode\ncat_flag = ShellcodeMall.amd64.cat_flag\nreverse_tcp = ShellcodeMall.amd64.reverse_tcp_connect(ip=\"127.0.0.1\", port=10001)\n\n# 使用一些便捷的装饰器\n# 在调用该函数前休眠\n@sleep_call_before(1)\ndef add():\n    pass\n\n# 若该函数10s内都没有运行结束，就会抛出异常\n@bomber(10)\ndef del_():\n  pass\n\n# api不再使用\n@unused()\ndef wtf():\n  pass\n\n# 搜索gadget\nropper_box = RopperBox()\nropper_box.add_file(\"libc\", \"libc.so.6\", arch=RopperArchType.x86_64)\npop_rdi_ret = ropper_box.get_pop_rdi_ret()\nleav_ret = ropper_box.search_gadget(\"leave; ret\")\n\n# 构造IO_FILE结构体\nfake_file = IO_FILE_plus_struct()\nfake_file.flags = 0xfbad1887\nfake_file._mode = 1\nfake_file.vtable = 0xdeadbeef\npayload = bytes(fake_file)\n\n# 替换payload\npayload = \"aaaabbbbcccc\"\nnew_payload = payload_replace(payload, {4: \"eeee\"}) # aaaaeeeecccc\n\n\n# 获取当前装载的libc的gadget\nall_ogs = get_current_one_gadget_from_libc()\n\n\n# 封装当前io的常用操作函数\n# sendline\nsl(\"data\")\n# sendafter\nsa(\"\\n\", \"data)\n\n\n# 直接使用当前gadget\nCurrentGadgets.set_find_area(find_in_elf=True, find_in_libc=False, do_initial=False)\n\npop_rdi_ret = CurrentGadgets.pop_rdi_ret()\n\nexecve_chain = CurrentGadgets.execve_chain(bin_sh_addr=0x11223344)\n\n# pwncli中还有许多其他实用的接口\n# ......\n\nio.interactive()\n```\n\n不难发现，库模式与命令模式的使用区别：去掉`cli_script()`即可。需要注意，库模式下的脚本就是一个普通的`python`脚本，并不能解析命令行参数。\n\n# 教程\n视频教程如下：\n[![pwncli tutorial](https://res.cloudinary.com/marcomontalbano/image/upload/v1674919945/video_to_markdown/images/youtube--QFemxI3rnC8-c05b58ac6eb4c4700831b2b3070cd403.jpg)](https://www.youtube.com/watch?v=QFemxI3rnC8 \"pwncli tutorial\")\n\n\n`asciinema`版本教程依次如下：\n- [pwncli tutorial (1)](https://asciinema.org/a/555250)\n- [pwncli tutorial (2)](https://asciinema.org/a/555251)\n- [pwncli tutorial (3)](https://asciinema.org/a/555252)\n- [pwncli tutorial (4)](https://asciinema.org/a/555313)\n\n\n[![asciicast](https://asciinema.org/a/555250.svg)](https://asciinema.org/a/555250)\n\n\n[![asciicast](https://asciinema.org/a/555251.svg)](https://asciinema.org/a/555251) \n\n[![asciicast](https://asciinema.org/a/555252.svg)](https://asciinema.org/a/555252)\n\n\n[![asciicast](https://asciinema.org/a/555313.svg)](https://asciinema.org/a/555313)\n\n\n以下为简易的文字版教程。\n\n在使用`pwncli`之前，建议掌握`gdb/tmux`的基本命令，确保已安装了`pwndbg/gef/peda`等其中一个或多个插件。\n\n以脚本模式下的`debug`命令为例(这也是最常使用的模式和命令)。\n\n首先进入`tmux`环境，使用`tmux new -s xxx`进入即可。\n\n然后在脚本`exp.py`里写下：\n\n```python\n#!/usr/bin/python3\n# -*- encoding: utf-8 -*-\n\nfrom pwncli import *\n\n# use script mode\ncli_script()\n\n# get use for obj from gift\nio: tube = gift['io'] \nelf: ELF = gift['elf']\nlibc: ELF = gift['libc']\n\nia()\n```\n\n然后赋予脚本执行权限，然后输入`./exp.py de ./pwn -t`即可看到开启了`tmux`调试窗口。\n\n对于无`PIE`的程序，下断点的方式为：\n\n```shell\n./exp.py de ./pwn -t -b 0x400088a # 在0x400088a处下断点\n\n./exp.py de ./pwn -t -b malloc -b free # 下2个断点\n```\n\n对于有`PIE`的程序，下断点的方式为：\n\n```shell\n./exp.py de ./pwn -t -b b+0xafd # 在 0xafd处下断点\n\n./exp.py de ./pwn -t -b malloc -b free -b b+0x101f # 下3个断点\n\n./exp.py de ./pwn -t -b malloc+0x10 # 在malloc+0x10处下断点，首先在libc里面寻找malloc符号，然后在elf中寻找malloc符号\n```\n\n想要`hook`掉某些函数，如`ptrace`：\n\n```shell\n./exp.py de ./pwn -H ptrace -H alarm:1   # hook掉ptrace，默认返回0；hook掉alarm，返回值为1\n\n./exp.py de ./pwn -h ./hook.c # 自己写好hook.c后指定即可\n```\n\n使用带桌面的`ubuntu`虚拟机调试，可以选择`gnome`弹出窗口：\n\n```shell\n./exp.py de ./pwn -g -b 0x400088a # 在0x400088a处下断点\n\n./exp.py de ./pwn -g -s \"directory /usr/glibc/glibc-2.31/malloc\" # 指定源码调试目录\n```\n\n\n脚本调试好后需要打远程：\n\n```\n./exp.py re ./pwn 127.0.0.1:13337\n```\n\n\n# pwncli 主命令\n选项的相关说明：\n\n- `flag`选项：带上该选项即为开启，如`ls -a`中的`-a`即为`flag`选项\n- 多选的：可以指定多个值，如`-x y1 -x y2`可以传递`y1`和`y2`给`x`选项\n- 多种使用方式：如`-x --xxx --xxx-xx`，那么使用`-x`或者`--xxx`或者`--xxx-xxx`均可\n\n\n\n`pwncli`命令为主命令，输入`pwncli -h`将得到以下输出：\n\n```\nUsage: pwncli [OPTIONS] COMMAND [ARGS]...\n\n  pwncli tools for pwner!\n\n  For cli:\n      pwncli -v subcommand args\n  For python script:\n      script content:\n          from pwncli import *\n          cli_script()\n      then start from cli: \n          ./yourownscript -v subcommand args\n\nOptions:\n  -f, --filename TEXT  Elf file path to pwn.\n  -v, --verbose        Show more info or not.\n  -V, --version        Show the version and exit.\n  -h, --help           Show this message and exit.\n\nCommands:\n  config    Get or set something about config data.\n  debug     Debug the pwn file locally.\n  misc      Misc of useful sub-commands.\n  patchelf  Patchelf executable file using glibc-all-in-one.\n  qemu      Use qemu to debug pwn, for kernel pwn or arm/mips arch.\n  remote    Pwn remote host.\n  test      Test command.\n```\n\n**选项**：\n\n```\n-f  可选的  待调试的pwn文件路径，如./pwn，在这里指定后，debug/remote子命令中可无需指定。\n-v  可选的  flag选项，默认关闭。开启后将显示log信息，如果需要显示更多信息，可以输入-vv。\n-V         查看版本信息。\n-h         查看帮助。\n```\n\n**命令**(即`pwncli`下拥有的子命令)：\n\n```\nconfig     操作pwncli配置文件，配置文件路径为~/./pwncli.conf。\ndebug      最常用的子命令，用于本地调试pwn题。\nmisc       杂项命令，收录了一些实用的子命令。\npatchelf   快速地执行patchelf，以用于调试不同版本的glibc。\nqemu       使用qemu调试pwn题，用于kernel pwn或其他架构的pwn。\nremote     最常用的子命令，用于远程攻击靶机。\ntest       测试命令，无其他用途。\n```\n\n## debug 子命令\n输入`pwncli debug -h`将得到以下帮助文档：\n\n```\nUsage: pwncli debug [OPTIONS] [FILENAME]\n\n  FILENAME: The ELF filename.\n\n  Debug in tmux:\n      python3 exp.py debug ./pwn --tmux --gdb-breakpoint malloc -gb 0x400789\n\nOptions:\n  --argv TEXT                     Argv for process.\n  -e, --set-env, --env TEXT       The env setting for process, such as\n                                  LD_PRELOAD setting, split using ',' or ';',\n                                  assign using '=' or ':'.\n  -p, --pause, --pause-before-main\n                                  Pause before main is called or not, which is\n                                  helpful for gdb attach.  [default: False]\n  -f, -hf, --hook-file TEXT       Specify a hook.c file, where you write some\n                                  functions to hook.\n  -H, -HF, --hook-function TEXT   The functions you want to hook would be out\n                                  of work.\n  -t, --use-tmux, --tmux          Use tmux to gdb-debug or not.  [default:\n                                  False]\n  -w, --use-wsl, --wsl            Use wsl to pop up windows for gdb-debug or\n                                  not.  [default: False]\n  -m, -am, --attach-mode [auto|tmux|wsl-b|wsl-u|wsl-o|wsl-wt|wsl-wts]\n                                  Gdb attach mode, wsl: bash.exe | wsl:\n                                  ubuntu1x04.exe | wsl: open-wsl.exe | wsl:\n                                  wt.exe wsl.exe  [default: auto]\n  -u, -ug, --use-gdb              Use gdb possibly.  [default: False]\n  -g, -gt, --gdb-type [auto|pwndbg|gef|peda]\n                                  Select a gdb plugin.\n  -b, -gb, --gdb-breakpoint TEXT  Set gdb breakpoints while gdb-debug is used,\n                                  it should be a hex address or '\\$rebase'\n                                  addr or a function name. Multiple\n                                  breakpoints are supported.\n  -s, -gs, --gdb-script TEXT      Set gdb commands like '-ex' or '-x' while\n                                  gdb-debug is used, the content will be\n                                  passed to gdb and use ';' to split lines.\n                                  Besides eval-commands, file path is\n                                  supported.\n  -n, -nl, --no-log               Disable context.log or not.  [default:\n                                  False]\n  -P, -ns, --no-stop              Use the 'stop' function or not. Only for\n                                  python script mode.  [default: False]\n  -v, --verbose                   Show more info or not.\n  -h, --help                      Show this message and exit.\n```\n\n`debug`子命令是最常用的子命令，为其设计的参数也最多，下面将详细讲述每一个参数的意义和使用方式。\n\n**参数**：\n\n```\nFILENAME  可选的  本地调试的pwn文件路径，还可以在pwncli主命令中通过-f选项设置；如pwncli主命令未设置，此处必须设置。\n```\n\n**选项**：\n\n```\n--argv  可选的  \t除文件路径，传递给process构造函数的参数。\n-e\t\t可选的\t\t设置启动的环境变量，如LD_PRELOAD=./libc.so.6;PORT_ENV:1234,IP_ADDR=localhost，数据将传递给process构造函数的env参数。环境变量会统一转换为大写。LD_PRELOAD可以简写为PRE=./libc.so.6。\n-p\t\t可选的\t\tflag选项，开启gdb后生效，默认关闭。开启后将在main函数之前执行一个getchar()函数，方便gdb attach上去调试，避免有时候gdb.attach失败的问题。本质上是编译生成一个so文件，并将其设置为LD_PRELOAD环境变量，在init段执行getchar函数。\n-f\t\t可选的\t\t开启gdb后生效，自己定义的hook.c文件，该文件会被编译为so，并设置为LD_PRELOAD环境变量。\n-H\t\t可选的\t\t多选的，开启gdb后生效。选择要hook的函数名，如alarm函数，被hook的函数将直接返回0，支持多个选项，即可以 -H alarm -H ptrace。\n-t\t\t可选的\t\tflag选项，默认关闭。开启后使用tmux开启gdb，并使用竖屏分屏。开启前必须保证在tmux环境中，否则会报错。\n-w\t\t可选的\t\tflag选项，默认关闭。开启后使用wsl模式开启gdb，弹窗口调试。开启前必须保证在wsl的发行版环境中，否则会报错。\n-m\t\t可选的\t\t开启gdb后生效，默认为auto。指定开启gdb的调试模式。auto：自动选择；tmux：开启-t后生效；wsl-b：开启-w后生效，使用bash.exe弹窗；wsl-u：开启-w后生效，使用ubuntu1x04.exe弹窗，前提是将其加入到windows宿主机的PATH环境变量中；wsl-o：开启-w后生效，使用open-wsl.exe弹窗，须到https://github.com/mskyaxl/wsl-terminal下载并将其加入到windows的PATH环境变量中；wsl-wt：开启-w后生效，使用windows-terminal弹窗，需安装windows terminal；wsl-wts：开启-w后生效，使用windows terminal分屏调试，需保证其版本至少为1.11.3471.0。\n-u\t\t可选的\t\tflag选项，默认关闭。开启后会尽可能的使用gdb调试。\n-g\t\t可选的\t\t开启gdb后生效，默认为auto。选择gdb插件类型。使用的前提是将gef、peda、pwndbg均安装在家目录下。auto：使用~/.gdbinit的配置，否则使用pwncli/conf/.gdbinit-xxx的配置。\n-b\t\t可选的\t\t多选的，开启gdb后生效。在gdb中设置断点。支持设置的方式有三种：1)函数地址，-b 0x401020或-b 4198432；2)函数名，-b malloc；3)相对于PIE基址的偏移，适用于开启PIE的场景，-b base+0x4f0或-b b+0x4f0或-b \\$rebase(0x4f0)或-b \\$_base(0x4f0)，只支持gef和pwndbg插件。支持设置多个断点，如-b malloc -b 0x401020。\n-s\t\t可选的\t\t开启gdb后生效。可以是文件路径或者语句。如果是语句，设置后将在gdb中执行，每个子语句之间使用分号;分割，如-s \"directory /usr/src/glibc/glibc-2.27/malloc;b malloc\";如果是文件路径，则会在gdb中依次执行文件内的每一行语句。\n-n\t\t可选的\t\tflag选项，默认关闭。设置pwntools为无log信息。若开启该选项，则会关闭pwntools的log。\n-P\t\t可选的\t\tflag选项，默认关闭。设置stop函数失效。stop函数会等待输入并打印出当前信息，方便gdb调试。开启此选项后stop函数将失效。\n-v\t\t可选的\t\tflag选项，默认关闭。开启后将显示log信息，如果需要显示更多信息，可以输入-vv。\n-h\t\t可选的\t\t查看帮助。\n```\n\n\n\n## remote 子命令\n\n输入`pwncli remote -h`得到以下帮助：\n\n```\nUsage: pwncli remote [OPTIONS] [FILENAME] [TARGET]\n\n  FILENAME: ELF filename.\n\n  TARGET: Target victim.\n\n  For remote target:\n      pwncli -v remote ./pwn 127.0.0.1:23333 -up --proxy-mode default\n  Or to specify the ip and port:\n      pwncli -v remote -i 127.0.0.1 -p 23333\n\nOptions:\n  -i, --ip TEXT                   The remote ip addr.\n  -p, --port INTEGER              The remote port.\n  -P, -up, --use-proxy            Use proxy or not.  [default: False]\n  -m, -pm, --proxy-mode [undefined|notset|default|primitive]\n                                  Set proxy mode. undefined: read proxy data\n                                  from config data(do not set this type in\n                                  your file); notset: not use proxy; default:\n                                  pwntools context proxy; primitive: pure\n                                  socks connection proxy.  [default:\n                                  undefined]\n  -n, -nl, --no-log               Disable context.log or not.  [default:\n                                  False]\n  -v, --verbose                   Show more info or not.\n  -h, --help                      Show this message and exit.\n```\n\n`remote`也是使用较多的子命令，用于远程攻击靶机。在本地调试好脚本后，只需要将`debug`命令替换为`remote`，并设置参数，即可开始攻击靶机，不需要更改脚本。\n\n**参数**：\n\n```\nFILENAME\t可选的\t\t本地调试的pwn文件路径，还可以在pwncli主命令中通过-f选项设置；设置后将不需要手动设置context.arch、context.os等信息。\nTARGET\t\t可选的\t\t目标靶机；如果不用-i和-p参数，则必须指定。格式为：ip:port，如127.0.0.1:1234。\n```\n\n**选项**：\n\n```\n-i\t\t可选的\t\t设置目标靶机，可为域名或ip地址。若TARGET参数中未设置，则此处必须设置。若~/.pwncli.conf中有配置，则将读取配置文件中的目标ip地址为默认值。\n-p\t\t可选的\t\t设置目标靶机的端口。若TARGET参数未设置，则此处必须设置。\n-P\t\t可选的\t\tflag选项，默认关闭。开启后将使用代理。\n-m\t\t可选的\t\t开启代理后生效。将会从~/.pwncli.conf中读取代理配置。undefined：未定义代理；notset：不使用代理；default：使用pwntools的context.proxy设置；primitive：使用socks设置。\n-n\t\t可选的\t\tflag选项，默认关闭。设置pwntools为无log信息。若开启该选项，则会关闭pwntools的log。\n-v\t\t可选的\t\tflag选项，默认关闭。开启后将显示log信息，如果需要显示更多信息，可以输入-vv。\n-h         \t\t  查看帮助。\n```\n\n## config 子命令\n\n`config`子命令主要用于操作`pwncli`的配置文件，配置文件的路径为`~/.pwncli.conf`,其指导为：\n\n```\nUsage: pwncli config [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  list  List config data.\n  set   Set config data.\n```\n\n**选项**：\n\n```\n-h\t\t查看帮助。\n```\n\n**命令**：\n\n```\nlist\t查看配置文件数据。\nset\t\t设置配置文件数据。\n```\n\n### list 二级子命令\n\n输入`pwncli config list -h`获得如下输出：\n\n```\nUsage: pwncli config list [OPTIONS] [LISTDATA]\n\n  LISTDATA: List all data or example data or section names.\n\nOptions:\n  -s, -sn, --section-name TEXT  List config data by section name.\n  -h, --help                    Show this message and exit.\n```\n\n**参数**：\n\n```\nLISTDATA\t可选的\t\t列出的数据类型。all：列出配置文件所有数据；example：列出示例的配置文件数据；section：列出配置文件中数据的section；其他值为非法值。\n```\n\n**选项**：\n\n```\n-s\t\t可选的\t\t多选的。根据section的名字列出数据。\n-h         \t\t  查看帮助。\n```\n\n### set 二级子命令\n\n输入`pwncli config set -h`获得如下输出：\n\n```\nUsage: pwncli config set [OPTIONS] [CLAUSE]\n\nOptions:\n  -s, -sn, --section-name TEXT  Set config data by section name.\n  -h, --help                    Show this message and exit.\n```\n\n**参数**：\n\n```\nCLAUSE\t必须的\t\t设置的语句，格式为key=value。\n```\n\n**选项**：\n\n```\n-s\t\t可选的\t\t根据section设置数据。\n-h         \t\t  查看帮助。\n```\n\n## misc 子命令\n\n`misc`子命令是一个杂项命令合集，即其会包含许多二级子命令，每个二级子命令的功能都不一样。\n\n输入`pwncli misc -h`得到帮助信息：\n\n```\nUsage: pwncli misc [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  gadget  Get all gadgets using ropper and ROPgadget, and then store them in\n          files.\n  setgdb  Copy gdbinit files from and set gdb-scripts for current user.\n```\n\n**选项**：\n\n```\n-h\t\t查看帮助。\n```\n\n**命令**：\n\n```\ngadget\t\t使用ropper和ROPgadget工具获取所有的gadgets，并将其存储在本地。\nsetgdb\t\t将pwncli/conf/.gdbinit-xxx的配置文件拷贝到家目录。使用该命令的前提是将gef、peda、pwndbg、Pwbgdb插件下载到家目录。\n```\n\n### gadget 二级子命令\n\n输出`pwncli misc gadget -h`得到帮助信息：\n\n```\nUsage: pwncli misc gadget [OPTIONS] [FILENAME]\n\nOptions:\n  -a, --all, --all-gadgets     Get all gadgets and don't remove duplicates.\n                               [default: False]\n  -d, --dir, --directory TEXT  The directory to save files.\n  -h, --help                   Show this message and exit.\n```\n\n**参数**：\n\n```\nFILENAME\t必须的\t\t要获取gadgets的binary路径。\n```\n\n**选项**：\n\n```\n-a\t\t可选的\t\tflag选项，默认关闭。开启后将不会移除重复的gadgets。\n-d\t\t可选的\t\t保存gadgets文件的路径。若未指定则为当前目录。\n-h\t\t查看帮助。\n```\n\n### setgdb 二级子命令\n\n输出`pwncli misc setgdb -h`得到帮助信息：\n\n```\nUsage: pwncli misc setgdb [OPTIONS]\n\nOptions:\n  -g, --generate-script  Generate the scripts of gdb-gef/gdb-pwndbg/gdb-peda\n                         in /usr/local/bin or not.  [default: False]\n  --yes                  Confirm the action without prompting.\n  -h, --help             Show this message and exit.\n```\n\n**选项**：\n\n```\n-g\t\t可选的\t\tflag选项，默认关闭。开启后将在/usr/local/bin下生成三个shell脚本,gdb-gef、gdb-peda、gdb-pwndbg。该选项需要在sudo下使用。\n--yes\t确认项\t\t输入y后该命令生效。\n-h\t\t查看帮助。\n```\n\n其中`gdb-pwndbg`的内容为：\n\n```\n#!/bin/sh\ncp ~/.gdbinit-pwndbg ~/.gdbinit\nexec gdb \"$@\"\n```\n\n## patchelf 子命令\n\n使用`patchelf`修改二进制文件使用的`libc.so.6`和`ld.so`。使用该命令的前提是，已安装`patchelf`和`glibc-all-in-one`，并将各个版本的库文件放置在`glibc-all-in-one/libs`，该路径可在配置文件中配置。\n\n输入`pwncli patchelf -h`得到帮助信息：\n\n```\nUsage: pwncli patchelf [OPTIONS] FILENAME LIBC_VERSION\n\n  FILENAME: ELF executable filename.\n\n  LIBC_VERSION: Libc version.\n\n  pwncli patchelf ./filename 2.29 -b\n\nOptions:\n  -b, --back, --back-up           Backup target file or not.\n  -f, --filter, --filter-string TEXT\n                                  Add filter condition.\n  -h, --help                      Show this message and exit.\n```\n\n**参数**：\n\n```\nFILENAME\t必须的\t\t待patch的文件路径。\n```\n\n**选项**：\n\n```\n-b\t\t可选的\t\tflag选项，默认关闭。开启后将备份一份文件后再执行patchelf命令，建议开启。\n-f\t\t可选的\t\t过滤器，设置过滤条件。如-f 2.23，则会匹配到2.23版本的glibc库。\n-h\t\t查看帮助。\n```\n\n## qemu 子命令\n\n该子命令方便使用`qemu`进行其他架构`arm/mips`文件的调试以及`kernel pwn`的调试。该命令的使用与`debug`子命令非常类似，很多选项与参数与`debug`子命令相同，使用方法也是一样的。在使用该子命令之前，请确保已安装了`qemu`和所需依赖库。\n\n输入`pwncli qemu -h`得到帮助信息：\n\n```\nUsage: pwncli qemu [OPTIONS] [FILENAME] [TARGET]\n\n  FILENAME: The binary file name.\n\n  TARGET:  remote_ip:remote_port.\n\n  Debug mode is default setting, debug with qemu:\n      pwncli qemu ./pwn -S --tmux\n      pwncli qemu ./pwn -L ./libs --tmux\n  Specify qemu gdb listen port: \n      pwncli qemu ./pwn -L ./libs -S -p 1235\n  Attack remote:\n      pwncli qemu ./pwn 127.0.0.1:10001\n      pwncli qemu ./pwn -r -i 127.0.0.1 -p 10001\n\nOptions:\n  -d, --debug, --debug-mode       Use debug mode or not, default is opened.\n  -r, --remote, --remote-mode     Use remote mode or not, default is debug\n                                  mode.  [default: False]\n  -i, --ip TEXT                   The remote ip addr or gdb listen ip when\n                                  debug.\n  -p, --port INTEGER              The remote port or gdb listen port when\n                                  debug.\n  -L, --lib TEXT                  The lib path for current file.\n  -S, --static                    Use tmux to gdb-debug or not.  [default:\n                                  False]\n  -l, -ls, --launch-script TEXT   The script to launch the qemu, only used for\n                                  qemu-system mode and the script must be\n                                  shell script.\n  -t, --use-tmux, --tmux          Use tmux to gdb-debug or not.  [default:\n                                  False]\n  -w, --use-wsl, --wsl            Use wsl to pop up windows for gdb-debug or\n                                  not.  [default: False]\n  -g, --use-gnome, --gnome        Use gnome terminal to pop up windows for\n                                  gdb-debug or not.  [default: False]\n  -G, -gt, --gdb-type [auto|pwndbg|gef|peda]\n                                  Select a gdb plugin.\n  -b, -gb, --gdb-breakpoint TEXT  Set gdb breakpoints while gdb-debug is used,\n                                  it should be a hex address or a function\n                                  name. Multiple breakpoints are supported.\n  -s, -gs, --gdb-script TEXT      Set gdb commands like '-ex' or '-x' while\n                                  gdb-debug is used, the content will be\n                                  passed to gdb and use ';' to split lines.\n                                  Besides eval-commands, file path is\n                                  supported.\n  -n, -nl, --no-log               Disable context.log or not.  [default:\n                                  False]\n  -P, -ns, --no-stop              Use the 'stop' function or not. Only for\n                                  python script mode.  [default: False]\n  -v, --verbose                   Show more info or not.  [default: 0]\n  -h, --help                      Show this message and exit.\n```\n\n**参数**：\n\n```\nFILENAME    可选的    调试的binary文件路径，kernel pwn可以是ko \nTARGET      可选的    远程攻击时的ip和port，FILENAME和TARGET必须指定一个 \n```\n\n**选项**：\n\n```\n-d    可选的    flag选项，默认开启。该选项一般不需要显示指定。 \n-r    可选的    flag选项，默认关闭。可显示指定，表明此时为攻击远程。 \n-i    可选的    在remote mode下为靶机ip地址；在debug mode下为gdb的监听ip地址。 \n-p    可选的    在remote mde下为靶机端口；在debug mode下为gdb的监听端口。 \n-L    可选的    在qemu-user下的动态链接库目录，会传递给qemu，若未指定，则会到/usr目录下寻找 \n-S    可选的    flag选项，默认关闭。开启后将使用qemu-xxxx-static。 \n-l    可选的    qemu启动的脚本路径，方便kernel pwn调试。 \n-t    可选的    flag选项，默认关闭。开启后使用tmux开启gdb-multiarch调试。\n-w    可选的    flag选项，默认关闭。开启后使用wsl调试。 \n-g    可选的    flag选项，默认关闭。开启后使用gnome-terminal调试。 \n-G    可选的    显示指定本次调试使用的gdb插件，pwndbg/peda/gef。 \n-b    可选的    设置断点，与debug子命令的设置方式类似，但是不支持PIE类的断点。 \n-s    可选的    设置gdb的命令，与debug子命令的设置方式类似，支持语句或文件路径。 \n-n    可选的    flag选项，默认关闭。开启后将设置pwntools的日志级别为error。 \n-P    可选的    flag选项，默认关闭。开启后使stop函数失效。 \n\n```\n\n## template 子命令\n\n该子命令方便生成各种攻击模板脚本文件，包括使用`pwncli`的命令行模式与脚本模式的攻击脚本，同时还提供了使用原生的`pwntools`需要使用到的模板。模板中定义了本地调试与远程攻击的相关代码，提供了常用的缩写函数，如`sa/sla/r/rl`等。\n\n输入`pwncli template -h` 得到帮助信息：\n\n```\nUsage: pwncli template [OPTIONS] [FILETYPE]\n\n  FILETYPE: The type of exp file\n\n  pwncli template cli\n  pwncli template lib\n  pwncli template pwn\n\nOptions:\n  -h, --help  Show this message and exit.\n```\n\n其中，`cli`类型模板会使用`pwncli`的脚本模式，`lib`类型模板会使用库模式，`pwn`类型模板直接使用原始的`pwntools`来构建而不会使用`pwncli`。\n\n# 依赖库\n\n`pwncli`的依赖库清单如下所示：\n\n```\nclick   \nropper  \npwntools  \n```\n\n# 截图示例\n\n### pwncli 示例\n\n![image-20220226232019621](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226232019621.png)\n\n### debug 示例\n\n`pwncli -vv debug ./test`：\n\n![image-20220226232116090](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226232116090.png)\n\n`pwncli -vv debug ./test -t`：\n\n![image-20220226232356871](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226232356871.png)\n\n\n\n`pwncli de ./test -t -b main`：\n\n![image-20220226232710687](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226232710687.png)\n\n这个时候没有断住：\n\n`pwncli de ./test -p -t -b main`：\n\n![image-20220226232858593](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226232858593.png)\n\n![image-20220226232946892](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226232946892.png)\n\n\n\n`pwncli de ./test -H puts`：\n\n![image-20220226233434698](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226233434698.png)\n\n`pwncli de ./test -t -s \"vmmap;b main\"`：\n\n![image-20220226233628316](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226233628316.png)\n\n\n\n`pwncli de ./test -w`：\n\n![image-20220226233900484](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226233900484.png)\n\n\n\n`pwncli de ./test -w -m wsl-u`：\n\n![image-20220226234010903](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226234010903.png)\n\n\n\n`pwncli de ./test -w -m wsl-wts`：\n\n![image-20220226234057770](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226234057770.png)\n\n\n\n`pwncli de ./test -t -g pwndbg`：\n\n![image-20220226234152877](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226234152877.png)\n\n\n\n`pwncli de ./test -u`:\n\n![image-20220226234307876](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226234307876.png)\n\n### remote 示例\n\n`pwncli re ./test 127.0.0.1:10001`：\n\n![image-20220226235042604](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235042604.png)\n\n\n\n`pwncli -vv re ./test -i 127.0.0.1 -p 10001`：\n\n![image-20220226235158851](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235158851.png)\n\n\n\n`pwncli -vv re 127.0.0.1:10001`：\n\n![image-20220226235248653](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235248653.png)\n\n### config 示例\n\n`pwncli config list example`：\n\n![image-20220226235423624](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235423624.png)\n\n### misc 示例\n\n`pwncli misc gadget ./test`：\n\n![image-20220226235602674](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235602674.png)\n\n\n\n`sudo pwncli misc setgdb -g`：\n\n![image-20220226235738869](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235738869.png)\n\n### patchelf 示例\n\n`pwncli patchelf ./test -b 2.31`：\n\n![image-20220226235851991](https://github.com/RoderickChan/pwncli/blob/main/img/image-20220226235851991.png)\n\n### qemu 示例\n\n**TODO**\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RoderickChan/pwncli",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pwncli",
    "package_url": "https://pypi.org/project/pwncli/",
    "platform": null,
    "project_url": "https://pypi.org/project/pwncli/",
    "project_urls": {
      "Homepage": "https://github.com/RoderickChan/pwncli"
    },
    "release_url": "https://pypi.org/project/pwncli/1.5/",
    "requires_dist": [
      "click",
      "pwntools"
    ],
    "requires_python": "",
    "summary": "pwncli, do pwn quickly.",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17474196,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1485971b369a698cfe027c2b37cdaed2a44883df83b6713f9a0e4c34c08b878a",
          "md5": "0bb94fb98557123f800b642adc8269c2",
          "sha256": "26af34b2cb2902c756c7799212c19b2e8185a1bb7c455e527fec73288ba46301"
        },
        "downloads": -1,
        "filename": "pwncli-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0bb94fb98557123f800b642adc8269c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38726,
        "upload_time": "2021-11-23T16:21:48",
        "upload_time_iso_8601": "2021-11-23T16:21:48.900469Z",
        "url": "https://files.pythonhosted.org/packages/14/85/971b369a698cfe027c2b37cdaed2a44883df83b6713f9a0e4c34c08b878a/pwncli-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1ed8a1502ef9700c4c70ecd9e6e492390b7fdaab941e1d0b5fc726df7bb5419",
          "md5": "5595240ab0256ed64c17763499fa3458",
          "sha256": "677ba7a287cc9ca7030a1a48a2e4dcc0ca8a504812c41dceb0a327d6805ca57d"
        },
        "downloads": -1,
        "filename": "pwncli-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5595240ab0256ed64c17763499fa3458",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33838,
        "upload_time": "2021-11-23T16:21:50",
        "upload_time_iso_8601": "2021-11-23T16:21:50.724883Z",
        "url": "https://files.pythonhosted.org/packages/f1/ed/8a1502ef9700c4c70ecd9e6e492390b7fdaab941e1d0b5fc726df7bb5419/pwncli-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b97b882620a3a5d1181d11531e60c89a2baa0a4c25f3ce287306bb7fe524fe5f",
          "md5": "e50953677cadc06e3ed2a1bc0d95382c",
          "sha256": "443e81d08998db296f098dbd4ef7ece96aab72f945d4359ae39d5255465bfd05"
        },
        "downloads": -1,
        "filename": "pwncli-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e50953677cadc06e3ed2a1bc0d95382c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43902,
        "upload_time": "2022-02-26T16:50:08",
        "upload_time_iso_8601": "2022-02-26T16:50:08.622864Z",
        "url": "https://files.pythonhosted.org/packages/b9/7b/882620a3a5d1181d11531e60c89a2baa0a4c25f3ce287306bb7fe524fe5f/pwncli-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8786893613529aa4d40fd89bf648b824212bde4164d527745725ae6cee33887c",
          "md5": "b153d3076075ad826cf3382d0f88b6b9",
          "sha256": "b83b2767475943740c0697a0dd87e0474ed4d645a1cc2ff9c6a4319255222890"
        },
        "downloads": -1,
        "filename": "pwncli-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b153d3076075ad826cf3382d0f88b6b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44689,
        "upload_time": "2022-02-26T16:50:10",
        "upload_time_iso_8601": "2022-02-26T16:50:10.774316Z",
        "url": "https://files.pythonhosted.org/packages/87/86/893613529aa4d40fd89bf648b824212bde4164d527745725ae6cee33887c/pwncli-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdb920c24767c120a57a852706aa63ca41517705673f1e1f379613cf73ebf0bb",
          "md5": "60eb7ee3c0c5fba4863739415fa9f3df",
          "sha256": "044a23a3a8b19379b0e5b591499c633786ec1deaf0523f56b111b9f36aa6a6d4"
        },
        "downloads": -1,
        "filename": "pwncli-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60eb7ee3c0c5fba4863739415fa9f3df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52872,
        "upload_time": "2022-05-03T07:09:03",
        "upload_time_iso_8601": "2022-05-03T07:09:03.493078Z",
        "url": "https://files.pythonhosted.org/packages/cd/b9/20c24767c120a57a852706aa63ca41517705673f1e1f379613cf73ebf0bb/pwncli-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53c455fca1b51843a5abfd8652c15c2c64a7a00745cec8e8307c5aa4547683d3",
          "md5": "6114c3f4772bf579b27baab522f344fd",
          "sha256": "dd0d9190707e927a823d2d7261852c318861a0c5689a4d31277913428500e678"
        },
        "downloads": -1,
        "filename": "pwncli-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6114c3f4772bf579b27baab522f344fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53625,
        "upload_time": "2022-05-03T07:09:06",
        "upload_time_iso_8601": "2022-05-03T07:09:06.870125Z",
        "url": "https://files.pythonhosted.org/packages/53/c4/55fca1b51843a5abfd8652c15c2c64a7a00745cec8e8307c5aa4547683d3/pwncli-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c01738cf02fd4dcce910bf903948b4b63e8c43675ed2307f71ae17b4d7cd421d",
          "md5": "4c8801838197a5a18e1918db8d7334ad",
          "sha256": "1302e1e50fd6c58a65840e113ff5496156df0e7a87704fd9c40eaf2f62c5c137"
        },
        "downloads": -1,
        "filename": "pwncli-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c8801838197a5a18e1918db8d7334ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 59410,
        "upload_time": "2022-09-25T16:03:46",
        "upload_time_iso_8601": "2022-09-25T16:03:46.515622Z",
        "url": "https://files.pythonhosted.org/packages/c0/17/38cf02fd4dcce910bf903948b4b63e8c43675ed2307f71ae17b4d7cd421d/pwncli-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea6e7eb812389a91564ac07c0bbb57c05f583cfb4623bc83b00efb7bf9e20268",
          "md5": "6d0f9d2f88e6c9651ea792eca21d3559",
          "sha256": "d0dc63cdf62678a6e3c5d74d34b9646d69d615affdd1a499882ea15742fdc0f1"
        },
        "downloads": -1,
        "filename": "pwncli-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6d0f9d2f88e6c9651ea792eca21d3559",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59495,
        "upload_time": "2022-09-25T16:03:53",
        "upload_time_iso_8601": "2022-09-25T16:03:53.025635Z",
        "url": "https://files.pythonhosted.org/packages/ea/6e/7eb812389a91564ac07c0bbb57c05f583cfb4623bc83b00efb7bf9e20268/pwncli-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf187753538b9e7f14ecdb1cc0d492ae9390583c869ff0285c1d7a8fa03648c",
          "md5": "37dc9ea9324c7aee7086a03bd59a504a",
          "sha256": "2294c2f893600fd5d8f2c84b8c9c04325796f013d0cac71383520a363cf0b888"
        },
        "downloads": -1,
        "filename": "pwncli-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37dc9ea9324c7aee7086a03bd59a504a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 70247,
        "upload_time": "2023-02-11T03:43:17",
        "upload_time_iso_8601": "2023-02-11T03:43:17.623707Z",
        "url": "https://files.pythonhosted.org/packages/1c/f1/87753538b9e7f14ecdb1cc0d492ae9390583c869ff0285c1d7a8fa03648c/pwncli-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1e5f82b6658a20ba111844f7612570e4633b11094b861f1e5c3f53965e22821",
          "md5": "2d53f0670d813e2b682d151521d08766",
          "sha256": "492226c932818d70a6e14e964256f69598799000028db9f58e0b394a02bcf75d"
        },
        "downloads": -1,
        "filename": "pwncli-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2d53f0670d813e2b682d151521d08766",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72051,
        "upload_time": "2023-02-11T03:43:20",
        "upload_time_iso_8601": "2023-02-11T03:43:20.108955Z",
        "url": "https://files.pythonhosted.org/packages/d1/e5/f82b6658a20ba111844f7612570e4633b11094b861f1e5c3f53965e22821/pwncli-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39de138661eca40c05e4e8079bc3897b922a984422e705196e81d3c850e94ffb",
          "md5": "ea8bd5b82f4db2868d2ee76325da6b9a",
          "sha256": "369cc470f8674c9dc47221920fe1dc21d1853454d2a37d75e9e7d68a47d69d59"
        },
        "downloads": -1,
        "filename": "pwncli-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea8bd5b82f4db2868d2ee76325da6b9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 90341,
        "upload_time": "2023-03-28T07:11:07",
        "upload_time_iso_8601": "2023-03-28T07:11:07.778480Z",
        "url": "https://files.pythonhosted.org/packages/39/de/138661eca40c05e4e8079bc3897b922a984422e705196e81d3c850e94ffb/pwncli-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbaa310257613ebae8098d1ec85eace1327916ec6822d4c3d897558e753cdaf8",
          "md5": "6afb74328ec6c6f1422b4a9255a2cee7",
          "sha256": "59bd92cb191510911db32958814cf63c2f587b56079c5297b695189d1973d320"
        },
        "downloads": -1,
        "filename": "pwncli-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6afb74328ec6c6f1422b4a9255a2cee7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 102002,
        "upload_time": "2023-03-28T07:11:11",
        "upload_time_iso_8601": "2023-03-28T07:11:11.360918Z",
        "url": "https://files.pythonhosted.org/packages/cb/aa/310257613ebae8098d1ec85eace1327916ec6822d4c3d897558e753cdaf8/pwncli-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39de138661eca40c05e4e8079bc3897b922a984422e705196e81d3c850e94ffb",
        "md5": "ea8bd5b82f4db2868d2ee76325da6b9a",
        "sha256": "369cc470f8674c9dc47221920fe1dc21d1853454d2a37d75e9e7d68a47d69d59"
      },
      "downloads": -1,
      "filename": "pwncli-1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea8bd5b82f4db2868d2ee76325da6b9a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 90341,
      "upload_time": "2023-03-28T07:11:07",
      "upload_time_iso_8601": "2023-03-28T07:11:07.778480Z",
      "url": "https://files.pythonhosted.org/packages/39/de/138661eca40c05e4e8079bc3897b922a984422e705196e81d3c850e94ffb/pwncli-1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbaa310257613ebae8098d1ec85eace1327916ec6822d4c3d897558e753cdaf8",
        "md5": "6afb74328ec6c6f1422b4a9255a2cee7",
        "sha256": "59bd92cb191510911db32958814cf63c2f587b56079c5297b695189d1973d320"
      },
      "downloads": -1,
      "filename": "pwncli-1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "6afb74328ec6c6f1422b4a9255a2cee7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 102002,
      "upload_time": "2023-03-28T07:11:11",
      "upload_time_iso_8601": "2023-03-28T07:11:11.360918Z",
      "url": "https://files.pythonhosted.org/packages/cb/aa/310257613ebae8098d1ec85eace1327916ec6822d4c3d897558e753cdaf8/pwncli-1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}