{
  "info": {
    "author": "Longqi",
    "author_email": "iqgnol@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# eptune\n> eptune (evolutionary parameter tuning) is a python package trying to use evolutionary computation algorithms to do parameter tuning.\n\n\n![CI](https://github.com/wanglongqi/eptune/workflows/CI/badge.svg)\n\n![Logo](https://github.com/wanglongqi/eptune/raw/master/nbs/eptune.png)\n\n## Install\n\n`pip install eptune`\n\n## How to use\n\nUsing following lines can fine tune MNIST dataset with 5-Fold CV performance using the `qtuneSimple` function.\n\n```python\nfrom eptune.sample_cases import DigitsCV\nfrom eptune.quick import qtuneSimple\nfrom eptune.parameter import *\nfrom sklearn.svm import SVC\n\n# Prameter space to search\nparams = [\n    LogFloatParameter([0.01, 1e4], 'C'),\n    CategoricalParameter(['rbf'], 'kernel'),\n    LogFloatParameter([1e-6, 1e4], 'gamma')\n]\n\n# Define objective function\ncv_svc_digits = DigitsCV(SVC())\n\n\ndef evaluate(params):\n    return cv_svc_digits.cv_loss_with_params(cv=5, **params)\n\n\n# Call `qtuneSimple`\npopulation, logbook, hof = qtuneSimple(params,\n                                       evaluate,\n                                       n_pop=10,\n                                       n_jobs=10,\n                                       mutpb=0.6,\n                                       cxpb=0.8,\n                                       seed=42)\n\n# Plot the logbook if needed\nfig = logbook.plot(['min', 'avg'])\n```\n\n    gen\tnevals\tavg          \tstd        \tmin          \tmax          \n    0  \t10    \t[-0.28174736]\t[0.3288165]\t[-0.96772398]\t[-0.10072343]\n    1  \t7     \t[-0.70684474]\t[0.36593114]\t[-0.97273233]\t[-0.10072343]\n    2  \t4     \t[-0.8786867] \t[0.2590384] \t[-0.97273233]\t[-0.10183639]\n    3  \t8     \t[-0.62526433]\t[0.41696083]\t[-0.97440178]\t[-0.10072343]\n    4  \t8     \t[-0.80116861]\t[0.34319099]\t[-0.97440178]\t[-0.10072343]\n    5  \t6     \t[-0.96143573]\t[0.0257779] \t[-0.97440178]\t[-0.89816361]\n    6  \t7     \t[-0.9475793] \t[0.06357501]\t[-0.97440178]\t[-0.75959933]\n    7  \t6     \t[-0.97250974]\t[0.00531551]\t[-0.97440178]\t[-0.95659432]\n    8  \t7     \t[-0.97445743]\t[0.00016694]\t[-0.97495826]\t[-0.97440178]\n    9  \t8     \t[-0.73567056]\t[0.36697176]\t[-0.97495826]\t[-0.10072343]\n    10 \t7     \t[-0.79810796]\t[0.34639554]\t[-0.97495826]\t[-0.10072343]\n\n\n\n![png](docs/images/output_6_1.png)\n\n\nThe best parameters are stored in `HallofFame` object:\n\n```python\nhof\n```\n\n\n\n\n    [({'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.0005362324820364681}, (-0.9749582637729549,)), ({'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}, (-0.9744017807456873,))]\n\n\n\n## Iterator Interface\n\nAn iterator interface, `qtuneIterate`, is provided in the `quick` module, so that one can treat the optimization procedure as a iterative process. When the iterator exhausted, the optimization process is ended. Following is an example:\n\n```python\nfrom eptune.quick import qtuneIterate\nfrom eptune.parameter import *\n# Prameter space to search\nparams = [\n    LogFloatParameter([0.01, 1e4], 'C'),\n    CategoricalParameter(['rbf'], 'kernel'),\n    LogFloatParameter([1e-6, 1e4], 'gamma')\n]\nqi = qtuneIterate(params, n_pop=10, mutpb=0.6, cxpb=0.8, seed=42)\n```\n\nDirectly call this class will return an object that can be used as an iterator.\n\n```python\niterator = qi()\n```\n\nFor each iteration, the iterator will return two elements. The first element is the parameters to be used to in the estimator or function, the other element is the Condition object used in `qtuneIterate.set_result` function.\n\n```python\np, c = next(iterator)\np\n```\n\n\n\n\n    {'C': 68.63739474770763, 'kernel': 'rbf', 'gamma': 26.031847870785032}\n\n\n\nOne can do what ever you want here, such as query database, download web page, or even ask for user's input. When all the things necessary are done, one need to call `qtuneIterate.set_result` to return the control to the package and generate next parameters for next iteration.\n\nIn this example, the same function in above example is used to get the loss of the estimator with above parameters.\n\n```python\nfrom eptune.sample_cases import DigitsCV\nfrom sklearn.svm import SVC\n# Define objective function\ncv_svc_digits = DigitsCV(SVC())\n\n\ndef evaluate(params):\n    return cv_svc_digits.cv_loss_with_params(cv=5, **params)\n\nloss = evaluate(p)\nloss\n```\n\n\n\n\n    ([-0.10072342793544797], [])\n\n\n\nAfter we get the loss value, we can use `qtuneIterate.set_result` to return the control to the package as follows:\n\n```python\nqi.set_result(loss, c)\n```\n\n```python\np, c = next(iterator)\np\n```\n\n\n\n\n    {'C': 0.2946803132334556, 'kernel': 'rbf', 'gamma': 23.15859147163727}\n\n\n\nRepeat this process until the iterator is exhausted, then the optimization is done. In practice, you can simply use a for loop to do the job.\n\n```python\nqi = qtuneIterate(params, n_pop=10, mutpb=0.6, cxpb=0.8, ngen=3, seed=42)\nfor p, c in qi():\n    print(f'Calculating loss for {p}')\n    loss = evaluate(p)\n    print(f'Loss is {loss[0]}')\n    qi.set_result(loss, c)\n```\n\n    Calculating loss for {'C': 68.63739474770763, 'kernel': 'rbf', 'gamma': 26.031847870785032}\n    Loss is [-0.10072342793544797]\n    Calculating loss for {'C': 0.2946803132334556, 'kernel': 'rbf', 'gamma': 23.15859147163727}\n    Loss is [-0.10072342793544797]\n    Calculating loss for {'C': 114.8674353163588, 'kernel': 'rbf', 'gamma': 0.803387600412278}\n    Loss is [-0.12186978297161936]\n    Calculating loss for {'C': 0.015513010158735236, 'kernel': 'rbf', 'gamma': 0.00015359594420534672}\n    Loss is [-0.1580411797440178]\n    Calculating loss for {'C': 10.767917726598592, 'kernel': 'rbf', 'gamma': 0.40968553409851616}\n    Loss is [-0.1018363939899833]\n    Calculating loss for {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00016010548864384288}\n    Loss is [-0.9677239844184753]\n    Calculating loss for {'C': 34.3237004592151, 'kernel': 'rbf', 'gamma': 38.732334272432226}\n    Loss is [-0.10072342793544797]\n    Calculating loss for {'C': 0.09077283474940925, 'kernel': 'rbf', 'gamma': 0.002526417757312348}\n    Loss is [-0.9070673344462994]\n    Calculating loss for {'C': 0.08567951488560228, 'kernel': 'rbf', 'gamma': 1.0522108244005219e-05}\n    Loss is [-0.1580411797440178]\n    Calculating loss for {'C': 1.9035478743608165, 'kernel': 'rbf', 'gamma': 298.49953812653837}\n    Loss is [-0.10072342793544797]\n    gen\tnevals\tavg          \tstd        \tmin          \tmax          \n    0  \t10    \t[-0.28174736]\t[0.3288165]\t[-0.96772398]\t[-0.10072343]\n    Calculating loss for {'C': 0.09077283474940925, 'kernel': 'rbf', 'gamma': 0.002526417757312348}\n    Loss is [-0.9070673344462994]\n    Calculating loss for {'C': 1140.5426263798747, 'kernel': 'rbf', 'gamma': 2.094124216624722e-06}\n    Loss is [-0.9476905954368392]\n    Calculating loss for {'C': 0.18445781569344738, 'kernel': 'rbf', 'gamma': 1.0522108244005219e-05}\n    Loss is [-0.19031719532554256]\n    Calculating loss for {'C': 2.364783608235729, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}\n    Loss is [-0.9727323316638843]\n    Calculating loss for {'C': 0.3770940250090288, 'kernel': 'rbf', 'gamma': 9402.812584317955}\n    Loss is [-0.10072342793544797]\n    Calculating loss for {'C': 342.52552858536734, 'kernel': 'rbf', 'gamma': 3.979422189106964e-05}\n    Loss is [-0.9538119087367836]\n    Calculating loss for {'C': 37.612358782164776, 'kernel': 'rbf', 'gamma': 0.002526417757312348}\n    Loss is [-0.9632721202003339]\n    1  \t7     \t[-0.70684474]\t[0.36593114]\t[-0.97273233]\t[-0.10072343]\n    Calculating loss for {'C': 25.359556967494015, 'kernel': 'rbf', 'gamma': 1.0522108244005219e-05}\n    Loss is [-0.9515859766277128]\n    Calculating loss for {'C': 90.88766299120877, 'kernel': 'rbf', 'gamma': 0.18912018070990808}\n    Loss is [-0.1018363939899833]\n    Calculating loss for {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00016010548864384288}\n    Loss is [-0.9677239844184753]\n    Calculating loss for {'C': 2.364783608235729, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}\n    Loss is [-0.9727323316638843]\n    2  \t4     \t[-0.8786867] \t[0.2590384] \t[-0.97273233]\t[-0.10183639]\n    Calculating loss for {'C': 6.340857718335152, 'kernel': 'rbf', 'gamma': 6944.6779969379}\n    Loss is [-0.10072342793544797]\n    Calculating loss for {'C': 1.085964509751384, 'kernel': 'rbf', 'gamma': 7.981583922628336e-05}\n    Loss is [-0.9437952142459655]\n    Calculating loss for {'C': 0.4691058706709815, 'kernel': 'rbf', 'gamma': 410.66817442961525}\n    Loss is [-0.10072342793544797]\n    Calculating loss for {'C': 9901.359072553396, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}\n    Loss is [-0.9744017807456873]\n    Calculating loss for {'C': 2.364783608235729, 'kernel': 'rbf', 'gamma': 0.00016010548864384288}\n    Loss is [-0.9593767390094602]\n    Calculating loss for {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}\n    Loss is [-0.9744017807456873]\n    Calculating loss for {'C': 0.191638955526857, 'kernel': 'rbf', 'gamma': 1.050881589158487e-06}\n    Loss is [-0.15748469671675014]\n    Calculating loss for {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 9.24517286607817}\n    Loss is [-0.10127991096271564]\n    3  \t8     \t[-0.62526433]\t[0.41696083]\t[-0.97440178]\t[-0.10072343]\n\n\nAfter the iteration, the `qtuneIterate` instance store the results in itself.\n\n```python\nqi.population\n```\n\n\n\n\n    [{'C': 6.340857718335152, 'kernel': 'rbf', 'gamma': 6944.6779969379},\n     {'C': 1.085964509751384, 'kernel': 'rbf', 'gamma': 7.981583922628336e-05},\n     {'C': 0.4691058706709815, 'kernel': 'rbf', 'gamma': 410.66817442961525},\n     {'C': 9901.359072553396, 'kernel': 'rbf', 'gamma': 0.00044545277111534496},\n     {'C': 2.364783608235729, 'kernel': 'rbf', 'gamma': 0.00016010548864384288},\n     {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00044545277111534496},\n     {'C': 0.191638955526857, 'kernel': 'rbf', 'gamma': 1.050881589158487e-06},\n     {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 9.24517286607817},\n     {'C': 2.364783608235729, 'kernel': 'rbf', 'gamma': 0.00044545277111534496},\n     {'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00016010548864384288}]\n\n\n\n```python\nqi.hof\n```\n\n\n\n\n    [({'C': 197.75053974020003, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}, (-0.9744017807456873,)), ({'C': 9901.359072553396, 'kernel': 'rbf', 'gamma': 0.00044545277111534496}, (-0.9744017807456873,))]\n\n\n\n```python\nfig = qi.logbook.plot(['min', 'avg'])\n```\n\n\n![png](docs/images/output_26_0.png)\n\n\n## More control\n\nIf you want more control, you can check:\n1. `eptune.sklearn` module provides `ScikitLearner` or `ScikitLearnerCV` for fine tune parameter of estimators with scikit learn API. Examples are also provided in the documentation.\n2. `eptune.algorithms` module provides algorithms to access the DEAP framework directly.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wanglongqi/eptune/tree/master/",
    "keywords": "genetic programing",
    "license": "GNU Lesser General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eptune",
    "package_url": "https://pypi.org/project/eptune/",
    "platform": "",
    "project_url": "https://pypi.org/project/eptune/",
    "project_urls": {
      "Homepage": "https://github.com/wanglongqi/eptune/tree/master/"
    },
    "release_url": "https://pypi.org/project/eptune/0.1.7/",
    "requires_dist": [
      "deap",
      "scikit-learn",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "Evolutionary parameter tuning",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8714008,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb8dc22df8640fc9bb3e0f78b58a18980c7c828a4076da83d3a135447049dbbb",
          "md5": "06a8d23081efa2054c12c8c3e02d72a9",
          "sha256": "165ce5e4fc38f92e88666ff737f5da46ef9d0d2eef9fe69e6696b8286fac9a27"
        },
        "downloads": -1,
        "filename": "eptune-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06a8d23081efa2054c12c8c3e02d72a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26028,
        "upload_time": "2020-10-31T07:02:05",
        "upload_time_iso_8601": "2020-10-31T07:02:05.148783Z",
        "url": "https://files.pythonhosted.org/packages/cb/8d/c22df8640fc9bb3e0f78b58a18980c7c828a4076da83d3a135447049dbbb/eptune-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1a134733f7a5f83c1aa3295d1624f769b36712ffbc56cb77322b461914803a3",
          "md5": "b73e56760fa8efb7239a9338e9ab5e78",
          "sha256": "bc7dfd2b49577eda742394a0cb53281d466be6e12eb6d9a7eaf627f36377bf96"
        },
        "downloads": -1,
        "filename": "eptune-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b73e56760fa8efb7239a9338e9ab5e78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16266,
        "upload_time": "2020-10-31T07:02:06",
        "upload_time_iso_8601": "2020-10-31T07:02:06.787926Z",
        "url": "https://files.pythonhosted.org/packages/d1/a1/34733f7a5f83c1aa3295d1624f769b36712ffbc56cb77322b461914803a3/eptune-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "754c832f66aea44f31aaeca2a459dbe3a8c7a25aefed365e09e926933219bd39",
          "md5": "af299724bccefa69e9fb0b8744921c5e",
          "sha256": "fcea9fd5f065fa23274d28fd4c48e6df84e4d38dfbe9bbc6587c8d9f7610d854"
        },
        "downloads": -1,
        "filename": "eptune-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af299724bccefa69e9fb0b8744921c5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26047,
        "upload_time": "2020-11-01T04:39:41",
        "upload_time_iso_8601": "2020-11-01T04:39:41.932454Z",
        "url": "https://files.pythonhosted.org/packages/75/4c/832f66aea44f31aaeca2a459dbe3a8c7a25aefed365e09e926933219bd39/eptune-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "241731b71bc7ed6720c068726ef6fc807006846abc794b8a97a308b5406c0b2a",
          "md5": "23ca7a01c1cb37a8161b062da23a24a8",
          "sha256": "da6360acc2d6f150473a15711a7a2179d4c28ccb0deb57307a6f42b05059d6ca"
        },
        "downloads": -1,
        "filename": "eptune-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "23ca7a01c1cb37a8161b062da23a24a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16301,
        "upload_time": "2020-11-01T04:39:43",
        "upload_time_iso_8601": "2020-11-01T04:39:43.465618Z",
        "url": "https://files.pythonhosted.org/packages/24/17/31b71bc7ed6720c068726ef6fc807006846abc794b8a97a308b5406c0b2a/eptune-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ad770b59f35bab424b2fe5e19dd189115acd824cc476f8ca9a45c6337716bad",
          "md5": "7f4bcca7ae678b9a1e729192133e4fab",
          "sha256": "7ec6241b4db1752aec92a5d7ebb7c3a789541c661b9e62e6cf4ebf4a06b2f663"
        },
        "downloads": -1,
        "filename": "eptune-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f4bcca7ae678b9a1e729192133e4fab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26927,
        "upload_time": "2020-11-09T14:43:00",
        "upload_time_iso_8601": "2020-11-09T14:43:00.288055Z",
        "url": "https://files.pythonhosted.org/packages/5a/d7/70b59f35bab424b2fe5e19dd189115acd824cc476f8ca9a45c6337716bad/eptune-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbc0e24def4894d390399c287bfb3a5bb6cea08ee3c26d148138af00061d3201",
          "md5": "685bd13af4f1c33a0c4140c4aee8dacc",
          "sha256": "73509617760986abb44595d35e037f482f7adb7705cf844a6654c2b13b671312"
        },
        "downloads": -1,
        "filename": "eptune-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "685bd13af4f1c33a0c4140c4aee8dacc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17086,
        "upload_time": "2020-11-09T14:43:04",
        "upload_time_iso_8601": "2020-11-09T14:43:04.015159Z",
        "url": "https://files.pythonhosted.org/packages/cb/c0/e24def4894d390399c287bfb3a5bb6cea08ee3c26d148138af00061d3201/eptune-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e822d04b4971627c57eebde526df60f8bd577b91ef56b98af1df385a6bddc84b",
          "md5": "c19f922c9f0ab42087682ec3d926c45d",
          "sha256": "6be380fbce0318c2bded26cee80288aa3ff66f16a5127f31d293dea74673fac0"
        },
        "downloads": -1,
        "filename": "eptune-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c19f922c9f0ab42087682ec3d926c45d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26979,
        "upload_time": "2020-11-10T14:43:14",
        "upload_time_iso_8601": "2020-11-10T14:43:14.667572Z",
        "url": "https://files.pythonhosted.org/packages/e8/22/d04b4971627c57eebde526df60f8bd577b91ef56b98af1df385a6bddc84b/eptune-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c262ed054cb422424105b01ab149be74fba7c594156eea6a445d5848d5c1873",
          "md5": "24deb815a3e395171154b9cfbe4cc6db",
          "sha256": "4d8f6ac0eac47ccf45258a84b56fc447411e4888ef28d017becc046d07bd64d9"
        },
        "downloads": -1,
        "filename": "eptune-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "24deb815a3e395171154b9cfbe4cc6db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17158,
        "upload_time": "2020-11-10T14:43:16",
        "upload_time_iso_8601": "2020-11-10T14:43:16.155101Z",
        "url": "https://files.pythonhosted.org/packages/7c/26/2ed054cb422424105b01ab149be74fba7c594156eea6a445d5848d5c1873/eptune-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "696c533308a87838793011931cc1d5cd87dd957a6d59ef2455bf7b7581385e80",
          "md5": "426addd7462ca7e86a4eda009f47db36",
          "sha256": "2f3657b32d5f9f07fe25bb08ce198161db457bf7b5d041df8d67701a0b688d25"
        },
        "downloads": -1,
        "filename": "eptune-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "426addd7462ca7e86a4eda009f47db36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28672,
        "upload_time": "2020-11-10T15:42:31",
        "upload_time_iso_8601": "2020-11-10T15:42:31.714597Z",
        "url": "https://files.pythonhosted.org/packages/69/6c/533308a87838793011931cc1d5cd87dd957a6d59ef2455bf7b7581385e80/eptune-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d38cc37d92f9e1ad646f448887ee8e72404d5edbf495cdcb313d7158494cec5",
          "md5": "6f328001a1ce6ffbb2db26e5c2a5e728",
          "sha256": "94161f1391625d02e073b75db23cbf353b963ba6f9f38851ecdf87bda2b1eeb6"
        },
        "downloads": -1,
        "filename": "eptune-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6f328001a1ce6ffbb2db26e5c2a5e728",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21049,
        "upload_time": "2020-11-10T15:42:33",
        "upload_time_iso_8601": "2020-11-10T15:42:33.232469Z",
        "url": "https://files.pythonhosted.org/packages/0d/38/cc37d92f9e1ad646f448887ee8e72404d5edbf495cdcb313d7158494cec5/eptune-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "925503ced8dba2a87c9635aa7ac4df7194c27a07ea08531ec35d89285960902e",
          "md5": "79f76bd3e7b3245d92cbc82c36751dec",
          "sha256": "ff6fbb334c4de31f282f3e66ed7d135f19332a7f3c5483d0ec28121b18464f90"
        },
        "downloads": -1,
        "filename": "eptune-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79f76bd3e7b3245d92cbc82c36751dec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28848,
        "upload_time": "2020-11-21T05:48:23",
        "upload_time_iso_8601": "2020-11-21T05:48:23.505661Z",
        "url": "https://files.pythonhosted.org/packages/92/55/03ced8dba2a87c9635aa7ac4df7194c27a07ea08531ec35d89285960902e/eptune-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3ab249cb08c2be5b009c037d4105f42c492de012fb63dbff1964ecb11c7aa9d",
          "md5": "b1b8104a5691f5aefdf386a53ec404f1",
          "sha256": "4743d3e601490ce4ddcc96e35e39ca1e922046b7f44b8a00fff732151ec1200c"
        },
        "downloads": -1,
        "filename": "eptune-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b1b8104a5691f5aefdf386a53ec404f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21206,
        "upload_time": "2020-11-21T05:48:25",
        "upload_time_iso_8601": "2020-11-21T05:48:25.018128Z",
        "url": "https://files.pythonhosted.org/packages/c3/ab/249cb08c2be5b009c037d4105f42c492de012fb63dbff1964ecb11c7aa9d/eptune-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "925503ced8dba2a87c9635aa7ac4df7194c27a07ea08531ec35d89285960902e",
        "md5": "79f76bd3e7b3245d92cbc82c36751dec",
        "sha256": "ff6fbb334c4de31f282f3e66ed7d135f19332a7f3c5483d0ec28121b18464f90"
      },
      "downloads": -1,
      "filename": "eptune-0.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "79f76bd3e7b3245d92cbc82c36751dec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28848,
      "upload_time": "2020-11-21T05:48:23",
      "upload_time_iso_8601": "2020-11-21T05:48:23.505661Z",
      "url": "https://files.pythonhosted.org/packages/92/55/03ced8dba2a87c9635aa7ac4df7194c27a07ea08531ec35d89285960902e/eptune-0.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3ab249cb08c2be5b009c037d4105f42c492de012fb63dbff1964ecb11c7aa9d",
        "md5": "b1b8104a5691f5aefdf386a53ec404f1",
        "sha256": "4743d3e601490ce4ddcc96e35e39ca1e922046b7f44b8a00fff732151ec1200c"
      },
      "downloads": -1,
      "filename": "eptune-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "b1b8104a5691f5aefdf386a53ec404f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21206,
      "upload_time": "2020-11-21T05:48:25",
      "upload_time_iso_8601": "2020-11-21T05:48:25.018128Z",
      "url": "https://files.pythonhosted.org/packages/c3/ab/249cb08c2be5b009c037d4105f42c492de012fb63dbff1964ecb11c7aa9d/eptune-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}