{
  "info": {
    "author": "Tobias Gawron-Deutsch",
    "author_email": "tobias@strix.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: No Input/Output (Daemon)",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Home Automation",
      "Topic :: Utilities"
    ],
    "description": "Hippodamia observe the state of all registered microservices (aka watch\ndog).\n\n.. figure:: img/Microservice%20Overview.png\n   :alt: Pelops Overview\n\n   Pelops Overview\n\n``Hippodamia`` is part of the collection of mqtt based microservices\n`pelops <https://gitlab.com/pelops>`__. An overview on the microservice\narchitecture and examples can be found at\n(http://gitlab.com/pelops/pelops).\n\nfor Developers\n==============\n\nStates of a Microservice\n------------------------\n\n.. figure:: img/microservice_states.png\n   :alt: State Diagram\n\n   State Diagram\n\n-  *initialize phase* - an onboarding request has been received by the\n   system. if the source has been identified as a known microservice,\n   the existing state will be used, a new one will be initialized.\n-  *onboarding* - a microserivce has been identified/initialized and the\n   system waits for it to react to the onboarding request response.\n-  *active* - the observed microservice has been successfully onboarded\n   and sends state updates regularly.\n-  *inactive* - the microservice has not sent any update for a\n   predefined period.\n-  *terminated* - the microservice has either send a good-by-message or\n   been inactive for to long.\n-  *end state* - the system has terminated observation of this\n   microservice.\n\nTopics\n------\n\nsee `AsyncAPI <docs/index.html>`__.\n\nIncoming\n~~~~~~~~\n\n-  *contact* - for onboarding/offboarding requests\n-  *state.ping* - listens for new ping messages\n-  *state.runtime* - listens for new runtime messages\n-  *state.config* - listens for new config messages\n-  *state.end* - listens for termination messages ### Outgoing\n-  *uuid* - individual topic opened by each microservice for the\n   onboarding process\n-  *command.ping* - request ping messages\n-  *command.runtime* - request runtime messages\n-  *command.config* - request config messages\n-  *command.onboarding* - request re-onboarding\n\nMessages\n--------\n\nsee `AsyncAPI <docs/index.html>`__.\n\nIncoming\n~~~~~~~~\n\n-  *onboarding request* - onboarding request from a microservice\n-  *ping* - minimum \"sign of life\" of a microservice\n-  *runtime info* - ping plus additional runtime information\n-  *config state* - ping plus service configuration\n-  *termination info* - end service signal. sent either upon stop of\n   service or as last will via mqtt server.\n\nOutgoing\n~~~~~~~~\n\n-  *onboarding response* - onboarding response sent by hippodamia to the\n   microservice via the provide onboarding topic from the microservice\n-  *re-onboard request* - request plus optionally gid\n-  *request ping* - request plus optionally gid\n-  *request runtime info* - request plus optionally gid\n-  *request full state* - request plus optionally gid\n\nOnboarding Sequence\n~~~~~~~~~~~~~~~~~~~\n\n.. figure:: img/onboarding.png\n   :alt: Sequence\n\n   Sequence\n\nFirst, the microservice subscribes to a unique topic. This topic is sent\ntogether with additional information to identify the microservice\n(especially to look if this microservices has been onboarded previously)\nto hippodamias onboarding channel. Hippodamia answers with the\nonboarding response message which primarily contains the gid - the\nidentifier of this particular microservice instance that ideally should\nbe the same even after the n-th onboarding cycle. The repsonse message\nis published to the unique topic from the microservice. Once the\nmicroservice has received its gid, the uniqued topic can be unsubscribed\nand the reqular topics will be used for further communication.\n\nPing Sequence\n~~~~~~~~~~~~~\n\n.. figure:: img/ping.png\n   :alt: Ping\n\n   Ping\n\nPing messages are normally sent by the microservice at arbitrary times.\nUsually a sent interval of e.g. 60 seconds is implemented. The other\npossibility is that hippodamia requests a ping message from all\nonboarded microservices. The same sequence applies to runtime, config\nand onboarding.\n\nDatabase\n--------\n\nHippodamia stores all info immediately into the database. \\*\nMicroservice state \\* Received messages\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/pelops/hippodamia/",
    "keywords": "mqtt microservice monitoring service",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "HippodamiaService",
    "package_url": "https://pypi.org/project/HippodamiaService/",
    "platform": "",
    "project_url": "https://pypi.org/project/HippodamiaService/",
    "project_urls": {
      "Homepage": "https://gitlab.com/pelops/hippodamia/"
    },
    "release_url": "https://pypi.org/project/HippodamiaService/0.1a1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Hippodamia observe the state of all registered microservices (aka watch dog).",
    "version": "0.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4523211,
  "releases": {
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a31114a884ea48dabe5fc0fe3f423925838aad9e18b1d675122af6217ae66b2",
          "md5": "6b6ce50c71db54ce0b2f4f6a6e5b2f6b",
          "sha256": "0622e65dcb8afc9e1acacc93ab829effdff9175e7641ff9a70e4ddba89961f86"
        },
        "downloads": -1,
        "filename": "HippodamiaService-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b6ce50c71db54ce0b2f4f6a6e5b2f6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7071,
        "upload_time": "2018-11-24T10:42:15",
        "upload_time_iso_8601": "2018-11-24T10:42:15.586525Z",
        "url": "https://files.pythonhosted.org/packages/1a/31/114a884ea48dabe5fc0fe3f423925838aad9e18b1d675122af6217ae66b2/HippodamiaService-0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a31114a884ea48dabe5fc0fe3f423925838aad9e18b1d675122af6217ae66b2",
        "md5": "6b6ce50c71db54ce0b2f4f6a6e5b2f6b",
        "sha256": "0622e65dcb8afc9e1acacc93ab829effdff9175e7641ff9a70e4ddba89961f86"
      },
      "downloads": -1,
      "filename": "HippodamiaService-0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "6b6ce50c71db54ce0b2f4f6a6e5b2f6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7071,
      "upload_time": "2018-11-24T10:42:15",
      "upload_time_iso_8601": "2018-11-24T10:42:15.586525Z",
      "url": "https://files.pythonhosted.org/packages/1a/31/114a884ea48dabe5fc0fe3f423925838aad9e18b1d675122af6217ae66b2/HippodamiaService-0.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}