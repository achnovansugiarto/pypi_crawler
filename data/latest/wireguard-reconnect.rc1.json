{
  "info": {
    "author": "Fernando Enzo Guarini",
    "author_email": "fernandoenzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Internet",
      "Topic :: System :: Networking",
      "Topic :: Utilities"
    ],
    "description": "# WireGuard Reconnect\n\n[![PyPI](https://img.shields.io/pypi/v/wireguard-reconnect?label=latest)](https://pypi.org/project/wireguard-reconnect/)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/wireguard-reconnect)\n![PyPI - Status](https://img.shields.io/pypi/status/wireguard-reconnect)\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/fernandoenzo/wireguard-reconnect)\n![PyPI - License](https://img.shields.io/pypi/l/wireguard-reconnect)\n\nThis program performs unattended handling of selected WireGuard interfaces, bringing them up and down depending on whether there is connectivity to the server or not, or simply bringing them up and\nkeeping them up.\n\nWorks great combined with systemd.\n\n## Table of contents\n\n<!--ts-->\n\n* [Installation](#installation)\n* [Use case](#use-case)\n* [How to use it](#how-to-use-it)\n    * [With systemd](#with-systemd)\n* [Packaging](#packaging)\n    * [Autopackage](#autopackage)\n    * [PyInstaller](#pyinstaller)\n* [Contributing](#contributing)\n* [License](#license)\n\n<!--te-->\n\n## Installation\n\nUse the package manager [**pip**](https://pip.pypa.io/en/stable/) or [**pipx**](https://github.com/pypa/pipx) to install it:\n\n```bash\nsudo pip install wireguard-reconnect\n```\n\nAlternatively, you can use one of the two portable versions provided on the releases page.\n\n- The lightest one has been packaged using [**autopackage**](https://pypi.org/project/autopackage/) and will require you to have Python 3.7+ installed.\n- The heavier one has been packaged using [**PyInstaller**](https://pyinstaller.org) and has no external dependencies, so it doesn't matter if you don't have Python installed, or if your version is\n  lower than 3.7.\n\nSee [Packaging](#packaging) for more information.\n\n## Use case\n\nI have two VPNs installed simultaneously on my computers, one with OpenVPN (in TCP mode, device `tun0`) and the other with WireGuard (UDP, device `wg0`), which allow me to access the same subnets\nbehind certain computers.\n\nKnowing the great advantage in speed and ease of use of WireGuard over OpenVPN, one might wonder what's the point of having OpenVPN installed as well and maintaining this redundant network scheme,\nand the answer is very simple: compatibility. Both at my work and on many public Wi-Fi networks, UDP traffic is blocked and the only way I can access the aforementioned subnets is by using OpenVPN.\n\nThe configuration that I have made of both programs prioritizes in the routing table, for access to said subnets, the use of WireGuard over OpenVPN, giving it a lower metric, so that the link used\nis the fastest possible. Something like this:\n\n```commandline\n192.168.1.0/24 dev wg0 metric 1000 \n192.168.1.0/24 dev tun0 metric 2000 \n10.4.0.0/24 dev wg0 metric 1000 \n10.4.0.0/24 dev tun0 metric 2000 \n```\n\nThe problem arises when, with UDP traffic blocked, the routing table insists on using WireGuard instead of OpenVPN. It's in those cases where it's necessary, to allow the traffic flow,\nthat the WireGuard interface disappears from the system. And, if at any point we switch to a Wi-Fi network where WireGuard can work on, we'll want its interface back up.\n\nOf course, I could do all of this by hand, bringing up and down the WireGuard interface depending on whether I detect that the Wi-Fi I'm on allows UDP traffic or not (beyond DNS,\nobviously), but instead I preferred to make a small Python program that, by the way, had a good integration with systemd.\n\n## How to use it\n\nIf you want to bring up a WireGuard interface called `wg0` and just check every 30 seconds (default is 20 seconds) that it's still up, run the following command. You probably want this behaviour\non your WireGuard server, but not on clients.\n\n```commandline\nsudo wireguard-reconnect -i wg0 -p 30\n```\n\nIf instead you want to set up a WireGuard interface called `wg1` and check every minute whether the server is reachable (using its WireGuard local IP `10.4.0.1`) so that,\nin case there is no connectivity, the `wg1` interface is removed from the system, and then try to bring it up back again if the connection to the server can be reestablished,\nthen run this command:\n\n```commandline\nsudo wireguard-reconnect -i wg1 -g 10.4.0.1 -p 60\n```\n\nIn any case, if the program is stopped by a SIGINT (2) signal (Control+C) or a SIGTERM (15) signal (such as those sent by `systemctl stop` or `kill` commands), the WireGuard interface will be\nremoved from the system.\n\nThere is also a `--help/-h` option in the program. Don't forget to read it if you forget something:\n\n```commandline\nsudo wireguard-reconnect -h\n```\n\n### With systemd\n\nIt's strongly advised to manage this program using the provided systemd service template in this repository.\n\nYou just need to copy the file called `wireguard-reconnect@.service` to your `/etc/systemd/system` folder and run the following commands to bring up interface `wg0`\nchecking connectivity to server `10.4.0.1`:\n\n```commandline\nsudo systemctl daemon-reload\nsudo systemctl start wireguard-reconnect@wg0-10.4.0.1.service\n```\n\nTo make the service to start at system boot, execute:\n\n```commandline\nsudo systemctl enable wireguard-reconnect@wg0-10.4.0.1.service\n```\n\nTo watch the program log:\n\n```commandline\nsudo journalctl -u wireguard-reconnect@wg0-10.4.0.1.service -f\n```\n\n## Packaging\n\nIn this section we are going to explain how to replicate the packaging process.\n\n### Autopackage\n\nTo generate the program lightest portable version, which is available in this GitHub repository, install first `autopackage` with `pip`:\n\n```commandline\npip install autopackage\n```\n\nThen run the following commands:\n\n```commandline\nautopackage -s setup.py -p\n```\n\n### PyInstaller\n\nTo generate the program heaviest portable version, which is also available in this GitHub repository, install `pyinstaller` with `pip`:\n\n```\npip install pyinstaller\n```\n\nThen run:\n\n```\npyinstaller --onefile --bootloader-ignore-signals __main__.py\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\n![PyPI - License](https://img.shields.io/pypi/l/wireguard-reconnect)\n\nThis library is licensed under the\n[GNU Affero General Public License v3 or later (AGPLv3+)](https://choosealicense.com/licenses/agpl-3.0/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/fernandoenzo/wireguard-reconnect/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fernandoenzo/wireguard-reconnect",
    "keywords": "wireguard net vpn ip link ping route routing",
    "license": "AGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wireguard-reconnect",
    "package_url": "https://pypi.org/project/wireguard-reconnect/",
    "platform": "any",
    "project_url": "https://pypi.org/project/wireguard-reconnect/",
    "project_urls": {
      "Download": "https://github.com/fernandoenzo/wireguard-reconnect/releases",
      "Homepage": "https://github.com/fernandoenzo/wireguard-reconnect"
    },
    "release_url": "https://pypi.org/project/wireguard-reconnect/1.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "This program performs unattended handling of selected WireGuard interfaces, bringing them up and down depending on whether there is connectivity to the server or not, or simply bringing them up and keeping them up.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14563954,
  "releases": {
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f56dccf75a0c14ef3c9087bcc57a6aa274a5065a3975c385638d6fccdfc5199f",
          "md5": "b959023f61dfd5e264ad2de2c25814f1",
          "sha256": "56177a428aefe4a63f8c3f3332764a7b00f3588304b66370184a09cd6e98c289"
        },
        "downloads": -1,
        "filename": "wireguard_reconnect-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b959023f61dfd5e264ad2de2c25814f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19699,
        "upload_time": "2022-07-27T10:07:56",
        "upload_time_iso_8601": "2022-07-27T10:07:56.349574Z",
        "url": "https://files.pythonhosted.org/packages/f5/6d/ccf75a0c14ef3c9087bcc57a6aa274a5065a3975c385638d6fccdfc5199f/wireguard_reconnect-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f56dccf75a0c14ef3c9087bcc57a6aa274a5065a3975c385638d6fccdfc5199f",
        "md5": "b959023f61dfd5e264ad2de2c25814f1",
        "sha256": "56177a428aefe4a63f8c3f3332764a7b00f3588304b66370184a09cd6e98c289"
      },
      "downloads": -1,
      "filename": "wireguard_reconnect-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b959023f61dfd5e264ad2de2c25814f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19699,
      "upload_time": "2022-07-27T10:07:56",
      "upload_time_iso_8601": "2022-07-27T10:07:56.349574Z",
      "url": "https://files.pythonhosted.org/packages/f5/6d/ccf75a0c14ef3c9087bcc57a6aa274a5065a3975c385638d6fccdfc5199f/wireguard_reconnect-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}