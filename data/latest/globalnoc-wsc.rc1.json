{
  "info": {
    "author": "Indiana University GlobalNOC",
    "author_email": "globalnoc@iu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: Session",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# GlobalNOC WSC\n\nWSC is a client implementation of the GlobalNOC Web Service calling convention.\n\nYou can use this library to interface with GlobalNOC Web Services.\n\n## Features\n\n- Authentication\n  - HTTP Basic\n  - Shibboleth password-based ECP\n- GlobalNOC style service discovery\n- POST only. GET is not supported.\n\n## Getting Started\n\n1. Install library\n2. ...\n3. Profit\n\n## API Example\n\n```python\nfrom globalnoc import wsc\n\nclient = wsc.WSC()\nclient.username = 'exampleuser'\nclient.password = 'examplepassword'\n\nclient.url = 'https://example.grnoc.iu.edu/something/test.cgi'\n\nresp = client.add_the_thing(something = \"a string of text here\", somethingelse = [1, 2, 3])\nprint 'Added as {0}'.format(resp['id'])\n```\n\n## Authentication\n\n### HTTP Basic Authentication\n\nHTTP Basic Authentication is supported by setting a username and password. This authentication mode is selected by NOT setting the `realm`. Credentials are sent on every request, without the `401` and `WWW-Authenticate` handshake.\n\n### Shibboleth ECP\n\nShibboleth ECP is supported by setting a username and password, and setting the `realm` parameter to your IdP's ECP endpoint URL, e.g. `https://idp.grnoc.iu.edu/idp/profile/SAML2/SOAP/ECP`. If the SP asks for ECP authentication, a login request is launched to your IdP and, if successful, is sent to the SP. The original request is then re-sent with your login session cookie. Re-authentication is handled transparently (with additional latency if the login is required due to bouncing through the IdP).\n\nOnly username/password-based authentication is supported.\n\n## Reserved method names\n\nAny method not defined by the library is assumed to be a WS method. The following names are currently reserved by the library:\n\n- Any name starting with a `_` is reserved for internal methods, or by Python.\n- `ns` gets/sets the path to the GlobalNOC Service Discovery catalog file.\n- `url` gets/sets the request URL.\n- `urn` gets/sets the request URN. `ns` must be set before this is set. The lookup happens when this is set.\n- `username` gets/sets the authentication username.\n- `password` gets/sets the authentication password.\n- `realm` gets/sets the authentication realm for ECP. Set to `None` to change from ECP to Basic.\n- `raw` gets/sets whether the raw response is returned from remote method calls. If `False`, responses other content-type not matching `*/json`, or invalid JSON will raise a `RemoteMethodException`.\n- `strict_content_type` get/sets whether non-`raw` mode requires `*/json` content type. Default `True`\n- `session` gets/sets the underlying `requests.Session` object. Useful for making incompatible requests while benefiting from this library's ECP login help. If doing that, login still only happens during built-in WS calls, not calls directly on the `Session` object.\n- `timeout` gets/sets the per-request timeout (in seconds).\n- `_save` and `_load` save and load the current cookies in a `LWP` cookie jar file. This also saves/loads session cookies (as most login cookies are session cookies) so requests from multiple invocations can benefit from one login session. There is no locking around these files.\n\n## Using ECP login without WSC\n\nThe `globalnoc.wsc.ECP` module implements the [requests](http://docs.python-requests.org/en/master/) custom authentication API. You can use that to perform ECP login without using the WSC calling convention. See the `requests` module documentation for how to use this.\n\n**Note**: You'll want to use a `requests.Session` or you will log in on *every* request, not just once per end host per login lifetime. Logging in on every request increases request time, and increases load on the IdP.\n\n```python\nimport requests\nimport globalnoc.wsc\n\nusername = '...'\npassword = '...'\nrealm = 'https://...'\nurl = 'https://...'\n\ns = requests.Session()\nc = s.get(url, auth=globalnoc.wsc.ECP(username, password, realm))\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GlobalNOC/wsc-python",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "globalnoc-wsc",
    "package_url": "https://pypi.org/project/globalnoc-wsc/",
    "platform": "",
    "project_url": "https://pypi.org/project/globalnoc-wsc/",
    "project_urls": {
      "Homepage": "https://github.com/GlobalNOC/wsc-python"
    },
    "release_url": "https://pypi.org/project/globalnoc-wsc/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6, <4",
    "summary": "Minimal RPC client for GlobalNOC WebServices",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12702834,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7329eedc5e8c447997bc9c0abb2432518c1007d8cd9c2579e2b6635a8500f28",
          "md5": "675970af532f9d0f7cf9bf7f9e24aa67",
          "sha256": "dfe2f2f4f0562b043a568f5c3f5f01fd0f204d44bba10f0e3ac6534a376dbcf1"
        },
        "downloads": -1,
        "filename": "globalnoc-wsc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "675970af532f9d0f7cf9bf7f9e24aa67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 7560,
        "upload_time": "2022-01-26T20:37:32",
        "upload_time_iso_8601": "2022-01-26T20:37:32.222428Z",
        "url": "https://files.pythonhosted.org/packages/c7/32/9eedc5e8c447997bc9c0abb2432518c1007d8cd9c2579e2b6635a8500f28/globalnoc-wsc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7329eedc5e8c447997bc9c0abb2432518c1007d8cd9c2579e2b6635a8500f28",
        "md5": "675970af532f9d0f7cf9bf7f9e24aa67",
        "sha256": "dfe2f2f4f0562b043a568f5c3f5f01fd0f204d44bba10f0e3ac6534a376dbcf1"
      },
      "downloads": -1,
      "filename": "globalnoc-wsc-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "675970af532f9d0f7cf9bf7f9e24aa67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 7560,
      "upload_time": "2022-01-26T20:37:32",
      "upload_time_iso_8601": "2022-01-26T20:37:32.222428Z",
      "url": "https://files.pythonhosted.org/packages/c7/32/9eedc5e8c447997bc9c0abb2432518c1007d8cd9c2579e2b6635a8500f28/globalnoc-wsc-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}