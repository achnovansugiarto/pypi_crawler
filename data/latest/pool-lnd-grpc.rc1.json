{
  "info": {
    "author": "Kornpow",
    "author_email": "test@email.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pool-grpc-client\nA python grpc client for Lightning Pool (Lightning Network Daemon) ⚡⚡⚡\n\nThis is a wrapper around the default grpc interface that handles setting up credentials (including macaroons.\n\n## Dependencies\n- Python 3.6+\n- Working LND lightning node, take note of its ip address.\n- Copy your pool.macaroon and tls.cert files from `~/.pool/mainnet` to a directoy on your machine. \n\n\n## Installation\n```bash\n# NOT ON PYPI YET\npip install pool-grpc-client\n```\n\n\n\n\n## Basic Usage\nThe api mirrors the underlying lnd grpc api (http://api.lightning.community/) but methods will be in pep8 style. ie. `.GetInfo()` becomes `.get_info()`.\n\n```python\nfrom pathlib import Path\nimport json\nfrom poolgrpc.client import PoolClient\n\ncredential_path = Path(\"/home/skorn/.pool/mainnet/\")\n\nmac = str(credential_path.joinpath(\"pool.macaroon\").absolute())\ntls = str(credential_path.joinpath(\"tls.cert\").absolute())\n\npool = PoolClient(\n\tmacaroon_filepath=mac,\n\tcert_filepath=tls\n)\n\npool.get_info()\n\npool.get_lsat_tokens()\n```\n\n### Specifying Macaroon/Cert files\nBy default the client will attempt to lookup the `readonly.macaron` and `tls.cert` files in the mainnet directory. \nHowever if you want to specify a different macaroon or different path you can pass in the filepath explicitly.\n\n```python\nlnd = LNDClient(\n    macaroon_filepath='~/.lnd/invoice.macaroon', \n    cert_filepath='path/to/tls.cert'\n)\n```\n\n## Generating LND Proto Files\n```bash\nvirtualenv lnd\nsource lnd/bin/activate\npip install grpcio grpcio-tools googleapis-common-protos sh\ngit clone https://github.com/lightningnetwork/lnd.git\nmkdir genprotos\ngit clone https://github.com/googleapis/googleapis.git\n\n# python -m grpc_tools.protoc --proto_path=googleapis:. --python_out=. --grpc_python_out=. rpc.proto\n```\n\n```python\nfrom pathlib import Path\nimport shutil\nimport sh\n\nfor proto in list(Path(\"../lnd/lnrpc\").rglob(\"*.proto\")):\n    shutil.copy(proto, Path.cwd())\n\nprotos = list(Path(\".\").glob(\"*.proto\"))\n\nfor protofile in protos:\n    try:\n        sh.python(\"-m\", \"grpc_tools.protoc\", \"--proto_path=.\", \"--python_out=.\", \"--grpc_python_out=.\", str(protofile))\n        protos.remove(protofile)\n    except Exception as e:\n        print(f\"Error in proto: {protofile}\")\n```\n\nLast Step:\nIn File: verrpc_pb2_grpc.py\nChange:\nimport verrpc_pb2 as verrpc__pb2\nTo:\nfrom lndgrpc import verrpc_pb2 as verrpc__pb2\n\n## Deploy to Test-PyPi\n```bash\npoetry build\ntwine check dist/*\ntwine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pool-lnd-grpc",
    "package_url": "https://pypi.org/project/pool-lnd-grpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/pool-lnd-grpc/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pool-lnd-grpc/0.0.3/",
    "requires_dist": [
      "aiogrpc (>=1.8,<2.0)",
      "googleapis-common-protos (>=1.53.0,<2.0.0)",
      "grpcio (>=1.37.0,<2.0.0)",
      "grpcio-tools (>=1.37.0,<2.0.0)",
      "protobuf (>=3.15.8,<4.0.0)",
      "protobuf3-to-dict (>=0.1.5,<0.2.0)"
    ],
    "requires_python": ">3.6",
    "summary": "An rpc client for LL Pool (Rent Channels)",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10893406,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fde0229132183b28450305a54d4ad179707626af6d3f72d25272153e181beaa",
          "md5": "8a5a490a789f1320cf18d3b2429cc17f",
          "sha256": "ed952f67f36ad40f4e58c8c90dcc49b1a8be77d526eae03d4da8acecfa15b88e"
        },
        "downloads": -1,
        "filename": "pool_lnd_grpc-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a5a490a789f1320cf18d3b2429cc17f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6",
        "size": 67247,
        "upload_time": "2021-07-13T04:06:16",
        "upload_time_iso_8601": "2021-07-13T04:06:16.339846Z",
        "url": "https://files.pythonhosted.org/packages/9f/de/0229132183b28450305a54d4ad179707626af6d3f72d25272153e181beaa/pool_lnd_grpc-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9fde0229132183b28450305a54d4ad179707626af6d3f72d25272153e181beaa",
        "md5": "8a5a490a789f1320cf18d3b2429cc17f",
        "sha256": "ed952f67f36ad40f4e58c8c90dcc49b1a8be77d526eae03d4da8acecfa15b88e"
      },
      "downloads": -1,
      "filename": "pool_lnd_grpc-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a5a490a789f1320cf18d3b2429cc17f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.6",
      "size": 67247,
      "upload_time": "2021-07-13T04:06:16",
      "upload_time_iso_8601": "2021-07-13T04:06:16.339846Z",
      "url": "https://files.pythonhosted.org/packages/9f/de/0229132183b28450305a54d4ad179707626af6d3f72d25272153e181beaa/pool_lnd_grpc-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}