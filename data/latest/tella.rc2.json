{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "tella\n===========\n\n![apl logo](https://raw.githubusercontent.com/lifelong-learning-systems/tella/master/apl_small_logo.png)\n\ntella stands for Training and Evaluating Lifelong Learning Agents.\nIt provides a standard API and tools for performing continual learning experiments.\nFull documentation is available at [readthedocs](https://tella.readthedocs.io/).\n\nRequirements\n----------------\n* Python 3.7 or greater\n\nInstall\n-------------\n1. Create a conda or virtual environment and activate it\n\n2. We recommend that you update pip and wheel in your environment:\n  ```\n  pip install -U pip wheel\n  ```\n3. Install tella\n   ```\n   pip install tella\n   ```\n\nThere are optional packages that can also be installed if you want\nto use atari environments or run the unit tests.\nThey can be installed using pip's extras syntax:\n```\npip install tella[atari]\n```\nor\n```\npip install tella[dev]\n```\n\n\nAPI\n-------------\ntella defines an event-based interface for agents.\ntella calls methods of the agent to run through training and evaluation blocks.\nThe event handlers are\n * block_start() and block_end()\n * task_start() and task_end()\n * task_variant_start() and task_variant_end()\n * choose_actions() and receive_transitions()\n\nA learning block or evaluation block consists of 1 or more tasks.\nThe agent is notified of the start of the block and the start of each task.\nThe task_start() method receives basic information about the task.\nThe agent is also notified of the end of the block and the end of each task.\n\nA task consists of multiple episodes.\nThe agent is notified of the start and end of the episode.\nDuring the episode the agent is called through choose_actions() with an observation and must return an action.\nAfter the environment is updated with the action, the reward is passed to the agent by calling receive_transitions().\nThe receive_transitions() method also received the previous observation and new observation.\nThese calls continue until the episode is complete.\n\nHere is a minimal agent that takes random agents:\n```python\nimport tella\n\n\nclass MinimalRandomAgent(tella.ContinualRLAgent):\n    def choose_actions(self, observations):\n        \"\"\"Loop over the environments' observations and select action\"\"\"\n        return [\n            None if obs is None else self.action_space.sample() for obs in observations\n        ]\n\n    def receive_transitions(self, transitions):\n        \"\"\"Do nothing here since we are not learning\"\"\"\n        pass\n\n\nif __name__ == \"__main__\":\n    # rl_cli() is tella's command line interface function.\n    # It expects a constructor or factory function to create the agent.\n    tella.rl_cli(MinimalRandomAgent)\n    print(\"Done! Check logs for results.\")\n```\n\n\nRun\n-------------\nAssuming your agent is defined in a file called `my_agent.py`,\nrun it through a curriculum like so:\n```\npython my_agent.py --curriculum SimpleCartPole\n```\n\nTo see all the command line options, run:\n```bash\n> python my_agent.py --help\nusage: my_agent.py [-h] [--lifetime-idx LIFETIME_IDX] [--num-lifetimes NUM_LIFETIMES]\n                           [--num-parallel-envs NUM_PARALLEL_ENVS] [--log-dir LOG_DIR] [--render] [--seed SEED]\n                           [--agent-seed AGENT_SEED] [--curriculum-seed CURRICULUM_SEED] [--agent-config AGENT_CONFIG]\n                           --curriculum {...}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --lifetime-idx LIFETIME_IDX\n                        The index, starting at zero, of the first lifetime to run. Use this to skip lifetimes or run a\n                        specific lifetime other than the first. (default: 0)\n  --num-lifetimes NUM_LIFETIMES\n                        Number of lifetimes to execute. (default: 1)\n  --num-parallel-envs NUM_PARALLEL_ENVS\n                        Number of environments to run in parallel inside of task variant blocks. This enables the use\n                        of multiple CPUs at the same time for running environment logic, via vectorized environments.\n                        (default: 1)\n  --log-dir LOG_DIR     The root directory for the l2logger logs produced. (default: ./logs)\n  --render              Whether to render the environment (default: False)\n  --seed SEED           replaced by --agent-seed and --curriculum-seed (default: None)\n  --agent-seed AGENT_SEED\n                        The agent rng seed to use for reproducibility. (default: None)\n  --curriculum-seed CURRICULUM_SEED\n                        The curriculum rng seed to use for reproducibility. (default: None)\n  --agent-config AGENT_CONFIG\n                        Optional path to agent config file. (default: None)\n  --curriculum {...}\n                        Curriculum name for registry. (default: None)\n```\nAll the curriculums registered with tella are listed in the help.\n\nThe l2logger output by default is stored in your current directory in `logs`.\nThis can be set with the `--log-dir` argument.\n\nFor reproducing behavior, use the `--agent-seed`  and `--curriculum-seed` arguments.\nIf a seed is not provided, a random seed is generated.\nThe seeds used will be logged using the python logging package.\n\nFor utilizing multiple cores, use the `--num-parallel-envs` flag.\nWhen using `--num-parallel-envs` > 1, you may need to configure\npython multiprocessing's start method via `mp.set_start_method(\"spawn\")`\nat the start of the program, depending on the underlying OS.\n\nTo run an agent through multiple lifetimes of a curriculum, use the `--num-lifetimes`\nflag. If you want to run a specific lifetime (useful for running on a cluster),\nuse the `--lifetime-idx` flag. Note that the curriculum seed must be provided to use `--lifetime-idx`.\n\nTo view a rendering of the agent learning, set the `--render` flag.\nThis will render the first environment in the list.\n\nTo pass a configuration file to the agent, set the `--agent-config` argument.\nThe format of the configuration file is determined by the specific agent.\n\n\nBug Reports and Feature Requests\n---------------------------------\nBug reports and feature requests should be made through issues on Github.\n\nA bug report should contain:\n * descriptive title\n * environment (python version, operating system if install issue)\n * expected behavior\n * actual behavior\n * stack trace if applicable\n * any input parameters need to reproduce the bug\n\nA feature request should describe what you want to do but cannot\nand any recommendations for how this new feature should work.\n\n\nFor Developers\n----------------\nTo install tella in editable mode with our development requirements,\nclone the git repo and run:\n```\npip install -e \".[dev]\"\n```\n\nTo run unit tests:\n```\npytest\n```\nFor running in conda environment:\n```\npython -m pytest \n```\n\nTo check for PEP8 compliance:\n```\nblack --check tella\n```\n\nTo autoformat for PEP8 compliance:\n```\nblack tella\n```\n\nLicense\n-------\n\nSee [LICENSE](LICENSE) for license information.\n\nAcknowledgments\n----------------\n![APL logo](https://raw.githubusercontent.com/lifelong-learning-systems/tella/master/apl_small_logo.png)\n\ntella was created by the Johns Hopkins University Applied Physics Laboratory.\n\nThis software was funded by the DARPA Lifelong Learning Machines (L2M) Program.\n\nThe views, opinions, and/or findings expressed are those of the author(s) and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tella",
    "package_url": "https://pypi.org/project/tella/",
    "platform": null,
    "project_url": "https://pypi.org/project/tella/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tella/2.1.0/",
    "requires_dist": [
      "gym[classic_control] (==0.23.1)",
      "gym-minigrid (==1.0.3)",
      "l2logger (>=1.7.0)",
      "matplotlib",
      "numpy (>=1.21.4)",
      "pyglet (>=1.4.0)",
      "pyyaml",
      "gym[accept-rom-license,atari] ; extra == 'atari'",
      "pytest ; extra == 'dev'",
      "black (==22.1.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "library for continual reinforcement learning",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16768319,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e70b38c2b2739384fe84a72f9616cff1e095fa032a2478192f9791ff340da77",
          "md5": "31d0d284591064d0317975da87f3a9c7",
          "sha256": "388dd7d82ed42a03129be6774ed8229ad023acc9d49ce09e850576bd5d5aed15"
        },
        "downloads": -1,
        "filename": "tella-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31d0d284591064d0317975da87f3a9c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 45697,
        "upload_time": "2022-05-09T19:05:58",
        "upload_time_iso_8601": "2022-05-09T19:05:58.447693Z",
        "url": "https://files.pythonhosted.org/packages/3e/70/b38c2b2739384fe84a72f9616cff1e095fa032a2478192f9791ff340da77/tella-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a55ab5919615ebf7ba68a66a0d185cace9c7723c9106d15a32503e0de808c65",
          "md5": "77b5119826941973271c3c94ee9c412a",
          "sha256": "040b9e400f1cb2414b2567567a819947b8867179c18d6a84619d1c4ca5decc59"
        },
        "downloads": -1,
        "filename": "tella-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77b5119826941973271c3c94ee9c412a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29354,
        "upload_time": "2022-05-09T19:06:00",
        "upload_time_iso_8601": "2022-05-09T19:06:00.200029Z",
        "url": "https://files.pythonhosted.org/packages/7a/55/ab5919615ebf7ba68a66a0d185cace9c7723c9106d15a32503e0de808c65/tella-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4672e4682cccfcf0640411170000415bd3743747389e7f7b11e9637fa1a76884",
          "md5": "8dfdf750a9c4ee6404f9d01aa9d16276",
          "sha256": "cd54c7c5fb9a2e26682559ba777f406093065832cc17276d0b7edaa90b1a6de5"
        },
        "downloads": -1,
        "filename": "tella-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8dfdf750a9c4ee6404f9d01aa9d16276",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 45677,
        "upload_time": "2023-02-09T13:27:44",
        "upload_time_iso_8601": "2023-02-09T13:27:44.795469Z",
        "url": "https://files.pythonhosted.org/packages/46/72/e4682cccfcf0640411170000415bd3743747389e7f7b11e9637fa1a76884/tella-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d3619e368a0c0f9f885c969f8c9d3c047539c3d4b0d1cdc561b2a856d505d84",
          "md5": "8d8a86a3e088e399afdde167ceb9bf9c",
          "sha256": "13ab2ef7d4bb881ef23aa3cacad549be6e9bb49ccc7a7cec798b424dcac6f342"
        },
        "downloads": -1,
        "filename": "tella-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d8a86a3e088e399afdde167ceb9bf9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 40047,
        "upload_time": "2023-02-09T13:27:46",
        "upload_time_iso_8601": "2023-02-09T13:27:46.305017Z",
        "url": "https://files.pythonhosted.org/packages/4d/36/19e368a0c0f9f885c969f8c9d3c047539c3d4b0d1cdc561b2a856d505d84/tella-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4672e4682cccfcf0640411170000415bd3743747389e7f7b11e9637fa1a76884",
        "md5": "8dfdf750a9c4ee6404f9d01aa9d16276",
        "sha256": "cd54c7c5fb9a2e26682559ba777f406093065832cc17276d0b7edaa90b1a6de5"
      },
      "downloads": -1,
      "filename": "tella-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8dfdf750a9c4ee6404f9d01aa9d16276",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 45677,
      "upload_time": "2023-02-09T13:27:44",
      "upload_time_iso_8601": "2023-02-09T13:27:44.795469Z",
      "url": "https://files.pythonhosted.org/packages/46/72/e4682cccfcf0640411170000415bd3743747389e7f7b11e9637fa1a76884/tella-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d3619e368a0c0f9f885c969f8c9d3c047539c3d4b0d1cdc561b2a856d505d84",
        "md5": "8d8a86a3e088e399afdde167ceb9bf9c",
        "sha256": "13ab2ef7d4bb881ef23aa3cacad549be6e9bb49ccc7a7cec798b424dcac6f342"
      },
      "downloads": -1,
      "filename": "tella-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8d8a86a3e088e399afdde167ceb9bf9c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 40047,
      "upload_time": "2023-02-09T13:27:46",
      "upload_time_iso_8601": "2023-02-09T13:27:46.305017Z",
      "url": "https://files.pythonhosted.org/packages/4d/36/19e368a0c0f9f885c969f8c9d3c047539c3d4b0d1cdc561b2a856d505d84/tella-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}