{
  "info": {
    "author": "Node Contributors",
    "author_email": "dev@conestack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: System :: Systems Administration :: Authentication/Directory :: LDAP"
    ],
    "description": "node.ext.ldap\n=============\n\n.. image:: https://img.shields.io/pypi/v/node.ext.ldap.svg\n    :target: https://pypi.python.org/pypi/node.ext.ldap\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/node.ext.ldap.svg\n    :target: https://pypi.python.org/pypi/node.ext.ldap\n    :alt: Number of PyPI downloads\n\n.. image:: https://github.com/conestack/node.ext.ldap/actions/workflows/test.yaml/badge.svg\n    :target: https://github.com/conestack/node.ext.ldap/actions/workflows/test.yaml\n    :alt: Test node.ext.ldap\n\n\nOverview\n========\n\n``node.ext.ldap`` is a LDAP convenience library for LDAP communication based on\n`python-ldap <http://pypi.python.org/pypi/python-ldap>`_ (version 2.4 or later)\nand `node <http://pypi.python.org/pypi/node>`_.\n\nThe package contains base configuration and communication objects, a LDAP node\nobject and a LDAP node based user and group management implementation utilizing\n`node.ext.ugm <http://pypi.python.org/pypi/node.ext.ugm>`_.\n\n.. _`RFC 2251`: http://www.ietf.org/rfc/rfc2251.txt\n\nThis package is the successor of\n`bda.ldap <http://pypi.python.org/pypi/bda.ldap>`_.\n\n.. contents::\n    :depth: 2\n\n\nAPI changes compared to 0.9.x\n=============================\n\n- ``LDAPNode`` instances cannot have direct children of subtree any longer.\n  This was a design flaw because of possible duplicate RDN's.\n\n- ``LDAPNode.search`` returns DN's instead of RDN's by default.\n\n- Secondary keys and alternative key attribute features have been removed\n  entirely from ``LDAPNode``.\n\n- ``LDAPProps.check_duplicates`` setting has been removed.\n\n\nUsage\n=====\n\n\nLDAP Properties\n---------------\n\nTo define connection properties for LDAP use ``node.ext.ldap.LDAPProps``\nobject:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPProps\n\n    >>> props = LDAPProps(\n    ...     uri='ldap://localhost:12345/',\n    ...     user='cn=Manager,dc=my-domain,dc=com',\n    ...     password='secret',\n    ...     cache=False\n    ... )\n\nTest server connectivity with ``node.ext.ldap.testLDAPConnectivity``:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import testLDAPConnectivity\n\n    >>> assert testLDAPConnectivity(props=props) == 'success'\n\n\nLDAP Connection\n---------------\n\nFor handling LDAP connections, ``node.ext.ldap.LDAPConnector`` is used. It\nexpects a ``LDAPProps`` instance in the constructor. Normally there is no\nneed to instantiate this object directly, this happens during creation of\nhigher abstractions, see below:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPConnector\n    >>> import ldap\n\n    >>> connector = LDAPConnector(props=props)\n\nCalling ``bind`` creates and returns the LDAP connection:\n\n.. code-block:: pycon\n\n    >>> conn = connector.bind()\n    >>> assert isinstance(conn, ldap.ldapobject.ReconnectLDAPObject)\n\nCalling ``unbind`` destroys the connection:\n\n.. code-block:: pycon\n\n    >>> connector.unbind()\n\n\nLDAP Communication\n------------------\n\nFor communicating with an LDAP server, ``node.ext.ldap.LDAPCommunicator`` is\nused. It provides all the basic functions needed to search and modify the\ndirectory.\n\n``LDAPCommunicator`` expects a ``LDAPConnector`` instance at creation time:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPCommunicator\n\n    >>> communicator = LDAPCommunicator(connector)\n\nBind to server:\n\n.. code-block:: pycon\n\n    >>> communicator.bind()\n\nAdding directory entry:\n\n.. code-block:: pycon\n\n    >>> communicator.add(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     {\n    ...         'cn': 'foo',\n    ...         'sn': 'Mustermann',\n    ...         'userPassword': 'secret',\n    ...         'objectClass': ['person'],\n    ...     }\n    ... )\n\nSet default search DN:\n\n.. code-block:: pycon\n\n    >>> communicator.baseDN = 'ou=demo,dc=my-domain,dc=com'\n\nSearch in directory:\n\n.. code-block:: pycon\n\n    >>> import node.ext.ldap\n\n    >>> res = communicator.search(\n    ...     '(objectClass=person)',\n    ...     node.ext.ldap.SUBTREE\n    ... )\n\n    >>> assert res == [(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     {\n    ...         'objectClass': ['person'],\n    ...         'userPassword': ['secret'],\n    ...         'cn': ['foo'],\n    ...         'sn': ['Mustermann']\n    ...     }\n    ... )]\n\nModify directory entry:\n\n.. code-block:: pycon\n\n    >>> from ldap import MOD_REPLACE\n\n    >>> communicator.modify(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     [(MOD_REPLACE, 'sn', 'Musterfrau')]\n    ... )\n\n    >>> res = communicator.search(\n    ...     '(objectClass=person)',\n    ...     node.ext.ldap.SUBTREE,\n    ...     attrlist=['cn']\n    ... )\n\n    >>> assert res == [('cn=foo,ou=demo,dc=my-domain,dc=com', {'cn': ['foo']})]\n\nChange the password of a directory entry which represents a user:\n\n.. code-block:: pycon\n\n    >>> communicator.passwd(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     'secret',\n    ...     '12345'\n    ... )\n\n    >>> res = communicator.search(\n    ...     '(objectClass=person)',\n    ...     node.ext.ldap.SUBTREE,\n    ...     attrlist=['userPassword']\n    ... )\n\n    >>> assert res == [(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     {'userPassword': ['{SSHA}...']}\n    ... )]\n\nDelete directory entry:\n\n.. code-block:: pycon\n\n    >>> communicator.delete('cn=foo,ou=demo,dc=my-domain,dc=com')\n\n    >>> res = communicator.search(\n    ...     '(objectClass=person)',\n    ...     node.ext.ldap.SUBTREE\n    ... )\n\n    >>> assert res == []\n\nClose connection:\n\n.. code-block:: pycon\n\n    >>> communicator.unbind()\n\n\nLDAP Session\n------------\n\nA more convenient way for dealing with LDAP is provided by\n``node.ext.ldap.LDAPSession``. It basically provides the same functionality\nas ``LDAPCommunicator``, but automatically creates the connectivity objects\nand checks the connection state before performing actions.\n\nInstantiate ``LDAPSession`` object. Expects ``LDAPProps`` instance:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPSession\n\n    >>> session = LDAPSession(props)\n\nLDAP session has a convenience to check given properties:\n\n.. code-block:: pycon\n\n    >>> res = session.checkServerProperties()\n\n    >>> assert res == (True, 'OK')\n\nSet default search DN for session:\n\n.. code-block:: pycon\n\n    >>> session.baseDN = 'ou=demo,dc=my-domain,dc=com'\n\nSearch in directory:\n\n.. code-block:: pycon\n\n    >>> res = session.search()\n\n    >>> assert res == [\n    ...     ('ou=demo,dc=my-domain,dc=com',\n    ...     {\n    ...         'objectClass': ['top', 'organizationalUnit'],\n    ...         'ou': ['demo'],\n    ...         'description': ['Demo organizational unit']\n    ...     }\n    ... )]\n\nAdd directory entry:\n\n.. code-block:: pycon\n\n    >>> session.add(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     {\n    ...         'cn': 'foo',\n    ...         'sn': 'Mustermann',\n    ...         'userPassword': 'secret',\n    ...         'objectClass': ['person'],\n    ...     }\n    ... )\n\nChange the password of a directory entry which represents a user:\n\n.. code-block:: pycon\n\n    >>> session.passwd('cn=foo,ou=demo,dc=my-domain,dc=com', 'secret', '12345')\n\nAuthenticate a specific user:\n\n.. code-block:: pycon\n\n    >>> res = session.authenticate('cn=foo,ou=demo,dc=my-domain,dc=com', '12345')\n\n    >>> assert res is True\n\nModify directory entry:\n\n.. code-block:: pycon\n\n    >>> session.modify(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     [(MOD_REPLACE, 'sn', 'Musterfrau')]\n    ... )\n\n    >>> res = session.search(\n    ...     '(objectClass=person)',\n    ...     node.ext.ldap.SUBTREE,\n    ...     attrlist=['cn']\n    ... )\n\n    >>> assert res == [(\n    ...     'cn=foo,ou=demo,dc=my-domain,dc=com',\n    ...     {'cn': ['foo']}\n    ... )]\n\nDelete directory entry:\n\n.. code-block:: pycon\n\n    >>> session.delete('cn=foo,ou=demo,dc=my-domain,dc=com')\n\n    >>> res = session.search('(objectClass=person)', node.ext.ldap.SUBTREE)\n\n    >>> assert res == []\n\nClose session:\n\n.. code-block:: pycon\n\n    >>> session.unbind()\n\n\nLDAP Nodes\n----------\n\nOne can deal with LDAP entries as node objects. Therefor\n``node.ext.ldap.LDAPNode`` is used. To get a clue of the complete\nnode API, see `node <http://pypi.python.org/pypi/node>`_ package.\n\nCreate a LDAP node. The root Node expects the base DN and a ``LDAPProps``\ninstance:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPNode\n\n    >>> root = LDAPNode('ou=demo,dc=my-domain,dc=com', props=props)\n\nEvery LDAP node has a DN and a RDN:\n\n.. code-block:: pycon\n\n    >>> root.DN\n    u'ou=demo,dc=my-domain,dc=com'\n\n    >>> root.rdn_attr\n    u'ou'\n\nCheck whether created node exists in the database:\n\n.. code-block:: pycon\n\n    >>> root.exists\n    True\n\nDirectory entry has no children yet:\n\n.. code-block:: pycon\n\n    >>> root.keys()\n    []\n\nAdd children to root node:\n\n.. code-block:: pycon\n\n    >>> person = LDAPNode()\n    >>> person.attrs['objectClass'] = ['person', 'inetOrgPerson']\n    >>> person.attrs['sn'] = 'Mustermann'\n    >>> person.attrs['userPassword'] = 'secret'\n    >>> root['cn=person1'] = person\n\n    >>> person = LDAPNode()\n    >>> person.attrs['objectClass'] = ['person', 'inetOrgPerson']\n    >>> person.attrs['sn'] = 'Musterfrau'\n    >>> person.attrs['userPassword'] = 'secret'\n    >>> root['cn=person2'] = person\n\nIf the RDN attribute was not set during node creation, it is computed from\nnode key and set automatically:\n\n.. code-block:: pycon\n\n    >>> person.attrs['cn']\n    u'person2'\n\nFetch children DN by key from LDAP node:\n\n.. code-block:: pycon\n\n    >>> root.child_dn('cn=person1')\n    u'cn=person1,ou=demo,dc=my-domain,dc=com'\n\nHave a look at the tree:\n\n.. code-block:: pycon\n\n    >>> root.printtree()\n    <ou=demo,dc=my-domain,dc=com - True>\n      <cn=person2,ou=demo,dc=my-domain,dc=com:cn=person2 - True>\n      <cn=person1,ou=demo,dc=my-domain,dc=com:cn=person1 - True>\n\nThe entries have not been written to the directory yet. When modifying a LDAP\nnode tree, everything happens im memory. Persisting is done by calling the\ntree, or a part of it. You can check sync state of a node with its ``changed``\nflag. If changed is ``True`` it means either that the node attributes or node\nchildren has changed:\n\n.. code-block:: pycon\n\n    >>> root.changed\n    True\n\n    >>> root()\n    >>> root.changed\n    False\n\nModify a LDAP node:\n\n.. code-block:: pycon\n\n    >>> person = root['cn=person1']\n\nModify existing attribute:\n\n.. code-block:: pycon\n\n    >>> person.attrs['sn'] = 'Mustermensch'\n\nAdd new attribute:\n\n.. code-block:: pycon\n\n    >>> person.attrs['description'] = 'Mustermensch description'\n    >>> person()\n\nDelete an attribute:\n\n.. code-block:: pycon\n\n    >>> del person.attrs['description']\n    >>> person()\n\nDelete LDAP node:\n\n.. code-block:: pycon\n\n    >>> del root['cn=person2']\n    >>> root()\n    >>> root.printtree()\n    <ou=demo,dc=my-domain,dc=com - False>\n      <cn=person1,ou=demo,dc=my-domain,dc=com:cn=person1 - False>\n\n\nSearching LDAP\n--------------\n\nAdd some users and groups we'll search for:\n\n.. code-block:: pycon\n\n    >>> for i in range(2, 6):\n    ...     node = LDAPNode()\n    ...     node.attrs['objectClass'] = ['person', 'inetOrgPerson']\n    ...     node.attrs['sn'] = 'Surname %s' % i\n    ...     node.attrs['userPassword'] = 'secret%s' % i\n    ...     node.attrs['description'] = 'description%s' % i\n    ...     node.attrs['businessCategory'] = 'group1'\n    ...     root['cn=person%s' % i] = node\n\n    >>> node = LDAPNode()\n    >>> node.attrs['objectClass'] = ['groupOfNames']\n    >>> node.attrs['member'] = [\n    ...     root.child_dn('cn=person1'),\n    ...     root.child_dn('cn=person2'),\n    ... ]\n    ... node.attrs['description'] = 'IT'\n    >>> root['cn=group1'] = node\n\n    >>> node = LDAPNode()\n    >>> node.attrs['objectClass'] = ['groupOfNames']\n    >>> node.attrs['member'] = [\n    ...     root.child_dn('cn=person4'),\n    ...     root.child_dn('cn=person5'),\n    ... ]\n    >>> root['cn=group2'] = node\n\n    >>> root()\n    >>> root.printtree()\n    <ou=demo,dc=my-domain,dc=com - False>\n      <cn=person1,ou=demo,dc=my-domain,dc=com:cn=person1 - False>\n      <cn=person2,ou=demo,dc=my-domain,dc=com:cn=person2 - False>\n      <cn=person3,ou=demo,dc=my-domain,dc=com:cn=person3 - False>\n      <cn=person4,ou=demo,dc=my-domain,dc=com:cn=person4 - False>\n      <cn=person5,ou=demo,dc=my-domain,dc=com:cn=person5 - False>\n      <cn=group1,ou=demo,dc=my-domain,dc=com:cn=group1 - False>\n      <cn=group2,ou=demo,dc=my-domain,dc=com:cn=group2 - False>\n\nFor defining search criteria LDAP filters are used, which can be combined by\nbool operators '&' and '|':\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPFilter\n\n    >>> filter = LDAPFilter('(objectClass=person)')\n    >>> filter |= LDAPFilter('(objectClass=groupOfNames)')\n\n    >>> res = sorted(root.search(queryFilter=filter))\n\n    >>> assert res == [\n    ...     u'cn=group1,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=group2,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person1,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person2,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person3,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person4,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person5,ou=demo,dc=my-domain,dc=com'\n    ... ]\n\nDefine multiple criteria LDAP filter:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPDictFilter\n\n    >>> filter = LDAPDictFilter({\n    ...     'objectClass': ['person'],\n    ...     'cn': 'person1'\n    ... })\n\n    >>> res = root.search(queryFilter=filter)\n\n    >>> assert res == [u'cn=person1,ou=demo,dc=my-domain,dc=com']\n\nDefine a relation LDAP filter. In this case we build a relation between group\n'cn' and person 'businessCategory':\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import LDAPRelationFilter\n\n    >>> filter = LDAPRelationFilter(root['cn=group1'], 'cn:businessCategory')\n\n    >>> res = root.search(queryFilter=filter)\n\n    >>> assert res == [\n    ...     u'cn=person2,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person3,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person4,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person5,ou=demo,dc=my-domain,dc=com'\n    ... ]\n\nDifferent LDAP filter types can be combined:\n\n.. code-block:: pycon\n\n    >>> filter &= LDAPFilter('(cn=person2)')\n    >>> str(filter)\n    '(&(businessCategory=group1)(cn=person2))'\n\nThe following keyword arguments are accepted by ``LDAPNode.search``. If\nmultiple keywords are used, combine search criteria with '&' where appropriate.\n\nIf ``attrlist`` is given, the result items consists of 2-tuples with a dict\ncontaining requested attributes at position 1:\n\n**queryFilter**\n    Either a LDAP filter instance or a string. If given argument is string type,\n    a ``LDAPFilter`` instance is created.\n\n**criteria**\n    A dictionary containing search criteria. A ``LDAPDictFilter`` instance is\n    created.\n\n**attrlist**\n    List of attribute names to return. Special attributes ``rdn`` and ``dn``\n    are allowed.\n\n**relation**\n    Either ``LDAPRelationFilter`` instance or a string defining the relation.\n    If given argument is string type, a ``LDAPRelationFilter`` instance is\n    created.\n\n**relation_node**\n    In combination with ``relation`` argument, when given as string, use\n    ``relation_node`` instead of self for filter creation.\n\n**exact_match**\n    Flag whether 1-length result is expected. Raises an error if empty result\n    or more than one entry found.\n\n**or_search**\n    In combination with ``criteria``, this parameter is passed to the creation\n    of LDAPDictFilter. This flag controls whether to combine criteria **keys**\n    and **values** with '&' or '|'.\n\n**or_keys**\n    In combination with ``criteria``, this parameter is passed to the creation\n    of LDAPDictFilter. This flag controls whether criteria **keys** are\n    combined with '|' instead of '&'.\n\n**or_values**\n    In combination with ``criteria``, this parameter is passed to the creation\n    of LDAPDictFilter. This flag controls whether criteria **values** are\n    combined with '|' instead of '&'.\n\n**page_size**\n    Used in conjunction with ``cookie`` for querying paged results.\n\n**cookie**\n    Used in conjunction with ``page_size`` for querying paged results.\n\n**get_nodes**\n    If ``True`` result contains ``LDAPNode`` instances instead of DN's\n\nYou can define search defaults on the node which are always considered when\ncalling ``search`` on this node. If set, they are always '&' combined with\nany (optional) passed filters.\n\nDefine the default search scope:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import SUBTREE\n\n    >>> root.search_scope = SUBTREE\n\nDefine default search filter, could be of type LDAPFilter, LDAPDictFilter,\nLDAPRelationFilter or string:\n\n.. code-block:: pycon\n\n    >>> root.search_filter = LDAPFilter('objectClass=groupOfNames')\n\n    >>> res = root.search()\n\n    >>> assert res == [\n    ...     u'cn=group1,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=group2,ou=demo,dc=my-domain,dc=com'\n    ... ]\n\n    >>> root.search_filter = None\n\nDefine default search criteria as dict:\n\n.. code-block:: pycon\n\n    >>> root.search_criteria = {'objectClass': 'person'}\n\n    >>> res = root.search()\n\n    >>> assert res == [\n    ...     u'cn=person1,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person2,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person3,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person4,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person5,ou=demo,dc=my-domain,dc=com'\n    ... ]\n\nDefine default search relation:\n\n.. code-block:: pycon\n\n    >>> root.search_relation = LDAPRelationFilter(\n    ...     root['cn=group1'],\n    ...     'cn:businessCategory'\n    ... )\n\n    >>> res = root.search()\n\n    >>> assert res == [\n    ...     u'cn=person2,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person3,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person4,ou=demo,dc=my-domain,dc=com',\n    ...     u'cn=person5,ou=demo,dc=my-domain,dc=com'\n    ... ]\n\nAgain, like with the keyword arguments, multiple defined defaults are '&'\ncombined:\n\n.. code-block:: pycon\n\n    # empty result, there are no groups with group 'cn' as 'description'\n    >>> root.search_criteria = {'objectClass': 'group'}\n\n    >>> res = root.search()\n\n    >>> assert res == []\n\n\nJSON Serialization\n------------------\n\nSerialize and deserialize LDAP nodes:\n\n.. code-block:: pycon\n\n    >>> root = LDAPNode('ou=demo,dc=my-domain,dc=com', props=props)\n\nSerialize children:\n\n.. code-block:: pycon\n\n    >>> from node.serializer import serialize\n\n    >>> json_dump = serialize(root.values())\n\nClear and persist root:\n\n.. code-block:: pycon\n\n    >>> root.clear()\n\n    >>> root()\n\nDeserialize JSON dump:\n\n.. code-block:: pycon\n\n    >>> from node.serializer import deserialize\n\n    >>> deserialize(json_dump, root=root)\n    [<cn=person1,ou=demo,dc=my-domain,dc=com:cn=person1 - True>,\n    <cn=person2,ou=demo,dc=my-domain,dc=com:cn=person2 - True>,\n    <cn=person3,ou=demo,dc=my-domain,dc=com:cn=person3 - True>,\n    <cn=person4,ou=demo,dc=my-domain,dc=com:cn=person4 - True>,\n    <cn=person5,ou=demo,dc=my-domain,dc=com:cn=person5 - True>,\n    <cn=group1,ou=demo,dc=my-domain,dc=com:cn=group1 - True>,\n    <cn=group2,ou=demo,dc=my-domain,dc=com:cn=group2 - True>]\n\nSince root has been given, created nodes were added:\n\n.. code-block:: pycon\n\n    >>> root()\n    >>> root.printtree()\n    <ou=demo,dc=my-domain,dc=com - False>\n      <cn=person1,ou=demo,dc=my-domain,dc=com:cn=person1 - False>\n      <cn=person2,ou=demo,dc=my-domain,dc=com:cn=person2 - False>\n      <cn=person3,ou=demo,dc=my-domain,dc=com:cn=person3 - False>\n      <cn=person4,ou=demo,dc=my-domain,dc=com:cn=person4 - False>\n      <cn=person5,ou=demo,dc=my-domain,dc=com:cn=person5 - False>\n      <cn=group1,ou=demo,dc=my-domain,dc=com:cn=group1 - False>\n      <cn=group2,ou=demo,dc=my-domain,dc=com:cn=group2 - False>\n\nNon simple vs simple mode. Create container with children:\n\n.. code-block:: pycon\n\n    >>> container = LDAPNode()\n    >>> container.attrs['objectClass'] = ['organizationalUnit']\n    >>> root['ou=container'] = container\n\n    >>> person = LDAPNode()\n    >>> person.attrs['objectClass'] = ['person', 'inetOrgPerson']\n    >>> person.attrs['sn'] = 'Mustermann'\n    >>> person.attrs['userPassword'] = 'secret'\n    >>> container['cn=person1'] = person\n\n    >>> root()\n\nSerialize in default mode contains type specific information. Thus JSON dump\ncan be deserialized later:\n\n.. code-block:: pycon\n\n    >>> serialized = serialize(container)\n\n    >>> assert serialized == (\n    ...     '{'\n    ...         '\"__node__\": {'\n    ...             '\"attrs\": {'\n    ...                 '\"objectClass\": [\"organizationalUnit\"], '\n    ...                 '\"ou\": \"container\"'\n    ...             '}, '\n    ...             '\"children\": [{'\n    ...                 '\"__node__\": {'\n    ...                     '\"attrs\": {'\n    ...                         '\"objectClass\": [\"person\", \"inetOrgPerson\"], '\n    ...                         '\"userPassword\": \"secret\", '\n    ...                         '\"sn\": \"Mustermann\", '\n    ...                         '\"cn\": \"person1\"'\n    ...                     '},'\n    ...                     '\"class\": \"node.ext.ldap._node.LDAPNode\", '\n    ...                     '\"name\": \"cn=person1\"'\n    ...                 '}'\n    ...             '}], '\n    ...             '\"class\": \"node.ext.ldap._node.LDAPNode\", '\n    ...             '\"name\": \"ou=container\"'\n    ...         '}'\n    ...     '}'\n    ... )\n\nSerialize in simple mode is better readable, but not deserialzable any more:\n\n.. code-block:: pycon\n\n    >>> serialized = serialize(container, simple_mode=True)\n\n    >>> assert serialized == (\n    ...     '{'\n    ...         '\"attrs\": {'\n    ...             '\"objectClass\": [\"organizationalUnit\"], '\n    ...             '\"ou\": \"container\"'\n    ...         '}, '\n    ...         '\"name\": \"ou=container\", '\n    ...         '\"children\": [{'\n    ...             '\"name\": \"cn=person1\", '\n    ...             '\"attrs\": {'\n    ...                 '\"objectClass\": [\"person\", \"inetOrgPerson\"], '\n    ...                 '\"userPassword\": \"secret\", '\n    ...                 '\"sn\": \"Mustermann\", '\n    ...                 '\"cn\": \"person1\"'\n    ...             '}'\n    ...         '}]'\n    ...     '}'\n    ... )\n\n\nUser and Group management\n-------------------------\n\nLDAP is often used to manage Authentication, thus ``node.ext.ldap`` provides\nan API for User and Group management. The API follows the contract of\n`node.ext.ugm <http://pypi.python.org/pypi/node.ext.ugm>`_:\n\n.. code-block:: pycon\n\n    >>> from node.ext.ldap import ONELEVEL\n    >>> from node.ext.ldap.ugm import UsersConfig\n    >>> from node.ext.ldap.ugm import GroupsConfig\n    >>> from node.ext.ldap.ugm import RolesConfig\n    >>> from node.ext.ldap.ugm import Ugm\n\nInstantiate users, groups and roles configuration. They are based on\n``PrincipalsConfig`` class and expect this settings:\n\n**baseDN**\n    Principals container base DN.\n\n**attrmap**\n    Principals Attribute map as ``odict.odict``. This object must contain the\n    mapping between reserved keys and the real LDAP attribute, as well as\n    mappings to all accessible attributes for principal nodes if instantiated\n    in strict mode, see below.\n\n**scope**\n    Search scope for principals.\n\n**queryFilter**\n    Search Query filter for principals\n\n**objectClasses**\n    Object classes used for creation of new principals. For some objectClasses\n    default value callbacks are registered, which are used to generate default\n    values for mandatory attributes if not already set on principal vessel node.\n\n**defaults**\n    Dict like object containing default values for principal creation. A value\n    could either be static or a callable accepting the principals node and the\n    new principal id as arguments. This defaults take precedence to defaults\n    detected via set object classes.\n\n**strict**\n    Define whether all available principal attributes must be declared in attmap,\n    or only reserved ones. Defaults to True.\n\n**memberOfSupport**\n    Flag whether to use 'memberOf' attribute (AD) or memberOf overlay\n    (openldap) for Group membership resolution where appropriate.\n\nReserved attrmap keys for Users, Groups and roles:\n\n**id**\n    The attribute containing the user id (mandatory).\n\n**rdn**\n    The attribute representing the RDN of the node (mandatory)\n    XXX: get rid of, should be detected automatically\n\nReserved attrmap keys for Users:\n\n**login**\n    Alternative login name attribute (optional)\n\nCreate config objects:\n\n.. code-block:: pycon\n\n    >>> ucfg = UsersConfig(\n    ...     baseDN='ou=demo,dc=my-domain,dc=com',\n    ...     attrmap={\n    ...         'id': 'cn',\n    ...         'rdn': 'cn',\n    ...         'login': 'sn',\n    ...     },\n    ...     scope=ONELEVEL,\n    ...     queryFilter='(objectClass=person)',\n    ...     objectClasses=['person'],\n    ...     defaults={},\n    ...     strict=False,\n    ... )\n\n    >>> gcfg = GroupsConfig(\n    ...     baseDN='ou=demo,dc=my-domain,dc=com',\n    ...     attrmap={\n    ...         'id': 'cn',\n    ...         'rdn': 'cn',\n    ...     },\n    ...     scope=ONELEVEL,\n    ...     queryFilter='(objectClass=groupOfNames)',\n    ...     objectClasses=['groupOfNames'],\n    ...     defaults={},\n    ...     strict=False,\n    ...     memberOfSupport=False,\n    ... )\n\nRoles are represented in LDAP like groups. Note, if groups and roles are mixed\nup in the same container, make sure that query filter fits. For our demo,\ndifferent group object classes are used. Anyway, in real world it might be\nworth considering a seperate container for roles:\n\n.. code-block:: pycon\n\n    >>> rcfg = GroupsConfig(\n    ...     baseDN='ou=demo,dc=my-domain,dc=com',\n    ...     attrmap={\n    ...         'id': 'cn',\n    ...         'rdn': 'cn',\n    ...     },\n    ...     scope=ONELEVEL,\n    ...     queryFilter='(objectClass=groupOfUniqueNames)',\n    ...     objectClasses=['groupOfUniqueNames'],\n    ...     defaults={},\n    ...     strict=False,\n    ... )\n\nInstantiate ``Ugm`` object:\n\n.. code-block:: pycon\n\n    >>> ugm = Ugm(props=props, ucfg=ucfg, gcfg=gcfg, rcfg=rcfg)\n\nThe Ugm object has 2 children, the users container and the groups container.\nThe are accessible via node API, but also on ``users`` respective ``groups``\nattribute:\n\n.. code-block:: pycon\n\n    >>> ugm.keys()\n    ['users', 'groups']\n\n    >>> ugm.users\n    <Users object 'users' at ...>\n\n    >>> ugm.groups\n    <Groups object 'groups' at ...>\n\nFetch user:\n\n.. code-block:: pycon\n\n    >>> user = ugm.users['person1']\n    >>> user\n    <User object 'person1' at ...>\n\nUser attributes. Reserved keys are available on user attributes:\n\n.. code-block:: pycon\n\n    >>> user.attrs['id']\n    u'person1'\n\n    >>> user.attrs['login']\n    u'Mustermensch'\n\n'login' maps to 'sn':\n\n.. code-block:: pycon\n\n    >>> user.attrs['sn']\n    u'Mustermensch'\n\n    >>> user.attrs['login'] = u'Mustermensch1'\n    >>> user.attrs['sn']\n    u'Mustermensch1'\n\n    >>> user.attrs['description'] = 'Some description'\n    >>> user()\n\nCheck user credentials:\n\n.. code-block:: pycon\n\n    >>> user.authenticate('secret')\n    True\n\nChange user password:\n\n.. code-block:: pycon\n\n    >>> user.passwd('secret', 'newsecret')\n    >>> user.authenticate('newsecret')\n    True\n\nGroups user is member of:\n\n.. code-block:: pycon\n\n    >>> user.groups\n    [<Group object 'group1' at ...>]\n\nAdd new User:\n\n.. code-block:: pycon\n\n    >>> user = ugm.users.create('person99', sn='Person 99')\n    >>> user()\n\n    >>> res = ugm.users.keys()\n\n    >>> assert res == [\n    ...     u'person1',\n    ...     u'person2',\n    ...     u'person3',\n    ...     u'person4',\n    ...     u'person5',\n    ...     u'person99'\n    ... ]\n\nDelete User:\n\n.. code-block:: pycon\n\n    >>> del ugm.users['person99']\n    >>> ugm.users()\n\n    >>> res = ugm.users.keys()\n\n    >>> assert res == [\n    ...     u'person1',\n    ...     u'person2',\n    ...     u'person3',\n    ...     u'person4',\n    ...     u'person5'\n    ... ]\n\nFetch Group:\n\n.. code-block:: pycon\n\n    >>> group = ugm.groups['group1']\n\nGroup members:\n\n.. code-block:: pycon\n\n    >>> res = group.member_ids\n\n    >>> assert res == [u'person1', u'person2']\n\n    >>> group.users\n    [<User object 'person1' at ...>, <User object 'person2' at ...>]\n\nAdd group member:\n\n.. code-block:: pycon\n\n    >>> group.add('person3')\n\n    >>> member_ids = group.member_ids\n\n    >>> assert member_ids == [u'person1', u'person2', u'person3']\n\nDelete group member:\n\n.. code-block:: pycon\n\n    >>> del group['person3']\n\n    >>> member_ids = group.member_ids\n\n    >>> assert member_ids == [u'person1', u'person2']\n\nGroup attribute manipulation works the same way as on user objects.\n\nManage roles for users and groups. Roles can be queried, added and removed via\nugm or principal object. Fetch a user:\n\n.. code-block:: pycon\n\n    >>> user = ugm.users['person1']\n\nAdd role for user via ugm:\n\n.. code-block:: pycon\n\n    >>> ugm.add_role('viewer', user)\n\nAdd role for user directly:\n\n.. code-block:: pycon\n\n    >>> user.add_role('editor')\n\nQuery roles for user via ugm:\n\n.. code-block:: pycon\n\n    >>> roles = sorted(ugm.roles(user))\n\n    >>> assert roles == ['editor', 'viewer']\n\nQuery roles directly:\n\n.. code-block:: pycon\n\n    >>> roles = sorted(user.roles)\n\n    >>> assert roles == ['editor', 'viewer']\n\nCall UGM to persist roles:\n\n.. code-block:: pycon\n\n    >>> ugm()\n\nDelete role via ugm:\n\n.. code-block:: pycon\n\n    >>> ugm.remove_role('viewer', user)\n\n    >>> roles = user.roles\n\n    >>> assert roles == ['editor']\n\nDelete role directly:\n\n.. code-block:: pycon\n\n    >>> user.remove_role('editor')\n\n    >>> roles = user.roles\n\n    >>> assert roles == []\n\nCall UGM to persist roles:\n\n.. code-block:: pycon\n\n    >>> ugm()\n\nSame with group. Fetch a group:\n\n.. code-block:: pycon\n\n    >>> group = ugm.groups['group1']\n\nAdd roles:\n\n.. code-block:: pycon\n\n    >>> ugm.add_role('viewer', group)\n\n    >>> group.add_role('editor')\n\n    >>> roles = sorted(ugm.roles(group))\n\n    >>> assert roles == ['editor', 'viewer']\n\n    >>> roles = sorted(group.roles)\n\n    >>> assert roles == ['editor', 'viewer']\n\n    >>> ugm()\n\nRemove roles:\n\n.. code-block:: pycon\n\n    >>> ugm.remove_role('viewer', group)\n\n    >>> group.remove_role('editor')\n\n    >>> roles = group.roles\n\n    >>> assert roles == []\n\n    >>> ugm()\n\n\nCharacter Encoding\n------------------\n\nLDAP (v3 at least, `RFC 2251`_) uses ``utf-8`` string encoding only.\n``LDAPNode`` does the encoding for you. Consider it a bug, if you receive\nanything else than unicode from ``LDAPNode``, except attributes configured as\nbinary. The ``LDAPSession``, ``LDAPConnector`` and ``LDAPCommunicator`` are\nencoding-neutral, they do no decoding or encoding.\n\nUnicode strings you pass to nodes or sessions are automatically encoded as uft8\nfor LDAP, except if configured binary. If you feed them ordinary strings they are\ndecoded as utf8 and reencoded as utf8 to make sure they are utf8 or compatible,\ne.g. ascii.\n\nIf you have an LDAP server that does not use utf8, monkey-patch\n``node.ext.ldap._node.CHARACTER_ENCODING``.\n\n\nCaching Support\n---------------\n\n``node.ext.ldap`` can cache LDAP searches using ``bda.cache``. You need\nto provide a cache factory utility in you application in order to make caching\nwork. If you don't, ``node.ext.ldap`` falls back to use ``bda.cache.NullCache``,\nwhich does not cache anything and is just an API placeholder.\n\nTo provide a cache based on ``Memcached`` install memcached server and\nconfigure it. Then you need to provide the factory utility:\n\n.. code-block:: pycon\n\n    >>> from zope.interface import registry\n\n    >>> components = registry.Components('comps')\n\n    >>> from node.ext.ldap.cache import MemcachedProviderFactory\n\n    >>> cache_factory = MemcachedProviderFactory()\n\n    >>> components.registerUtility(cache_factory)\n\nIn case of multiple memcached backends on various IPs and ports initialization\nof the factory looks like this:\n\n.. code-block:: pycon\n\n    >>> components = registry.Components('comps')\n\n    >>> cache_factory = MemcachedProviderFactory(servers=[\n    ...     '10.0.0.10:22122',\n    ...     '10.0.0.11:22322'\n    ... ])\n\n    >>> components.registerUtility(cache_factory)\n\n\nDependencies\n------------\n\n- python-ldap\n\n- passlib\n\n- argparse\n\n- plumber\n\n- node\n\n- node.ext.ugm\n\n- bda.cache\n\n\nContributors\n============\n\n- Robert Niederreiter\n\n- Florian Friesdorf\n\n- Jens Klein\n\n- Georg Bernhard\n\n- Johannes Raggam\n\n- Alexander Pilz\n\n- Domen Kožar\n\n- Daniel Widerin\n\n- Asko Soukka\n\n- Alex Milosz Sielicki\n\n- Manuel Reinhardt\n\n- Philip Bauer\n\n\nHistory\n=======\n\n1.2 (2022-12-05)\n----------------\n\n- Implement ``expires`` and ``expired`` properties on\n  ``node.ext.ldap.ugm._api.LDAPUser`` as introduced on\n  ``node.ext.ugm.interfaces.IUser`` as of node.ext.ugm 1.1.\n  [rnix]\n\n- Introduce ``node.ext.ldap.ugm.expires.AccountExpiration`` and use it for\n  account expiration management.\n  [rnix]\n\n- Remove ``node.ext.ldap.ugm._api.AccountExpired`` singleton.\n  ``LDAPUsers.authenticate`` always returns ``False`` if authentication fails.\n  [rnix]\n\n- node >= 1.1 is required by `node.behaviors.suppress_lifecycle_events` support\n  [mamico]\n\n- Backward compatibility with pas.plugins.ldap <= 1.8.1 where LdapProps does not have\n  timeout properties.\n  [mamico]\n\n\n1.1 (2022-10-06)\n----------------\n\n- Add properties `conn_timeout` and `op_timeout` (both not set by default)\n  to configure ``ReconnectLDAPObject``.\n  [mamico]\n\n- Adopt lifecycle related changes from ``node`` 1.1.\n  [rnix]\n\n- Move ``ensure_connection`` from ``LDAPSession`` to ``LDAPCommunicator`` to\n  prevent binds on searches that return cached results.\n  [enfold-josh]\n\n\n1.0 (2022-03-19)\n----------------\n\n- Call ``ensure_connection`` in ``LDAPSession.delete``.\n  [rnix]\n\n- Remove usage of ``Nodespaces`` behavior.\n  [rnix]\n\n- Replace deprecated use of ``Storage`` by ``MappingStorage``.\n  [rnix]\n\n- Replace deprecated use of ``IStorage`` by ``IMappingStorage``.\n  [rnix]\n\n- Replace deprecated use of ``Nodify`` by ``MappingNode``.\n  [rnix]\n\n- Replace deprecated use of ``NodeChildValidate`` by ``MappingConstraints``.\n  [rnix]\n\n- Replace deprecated use of ``Adopt`` by ``MappingAdopt``.\n  [rnix]\n\n- Replace deprecated use of ``allow_non_node_children`` by ``child_constraints``.\n  [rnix]\n\n\n1.0rc2 (2022-03-01)\n-------------------\n\n- Fix #61: Close open connections to LDAP on GC.\n  [jensens]\n\n\n1.0rc1 (2021-11-08)\n-------------------\n\n- Rename deprecated ``allow_non_node_childs`` to ``allow_non_node_children``\n  on ``PrincipalAliasedAttributes``.\n  [rnix]\n\n- Allow to generate MD5 hashes in FIPS enabled environments.\n  [frapell]\n\n- Fix DN comparison in ``LDAPStorage.node_by_dn`` to ignore case sensitivity.\n  [rnix]\n\n\n1.0b12 (2020-05-28)\n-------------------\n\n- Make sure ``LDAPPrincipals._login_attr`` has a value. This way\n  ``LDAPUsers.id_for_login`` always returns the principal id as stored in the\n  database.\n  [rnix]\n\n- Improve value comparison in ``LDAPAttributesBehavior.__setitem__`` to avoid\n  unicode warnings.\n  [rnix]\n\n- Implement ``invalidate`` on ``node.ext.ldap.ugm._api.Ugm``.\n  [rnix]\n\n- Support for group DNs in ``memberOf`` attribute that are outside of the UGMs configured group.\n  [jensens]\n\n\n1.0b11 (2019-09-08)\n-------------------\n\n- Return empty search result list when an LDAP error occurs.\n  Fixes `issue #50 <https://github.com/conestack/node.ext.ldap/issues/50>`_.\n  [maurits]\n\n- Skip objects that were found in LDAP while searching on several attributes but don't contain the required attribute.\n  [fredvd, maurits]\n\n\n1.0b10 (2019-06-30)\n-------------------\n\n- Fix cache key generation.\n  [rnix, pbauer]\n\n\n1.0b9 (2019-05-07)\n------------------\n\n- Refactor mapping from object-class to format and attributes to increase readability.\n  [jensens]\n\n- Increase Exception verbosity to ease debugging.\n  [jensens]\n\n- Add missing object classes from principal config when persisting principals.\n  [rnix]\n\n- Remove attribute from entry if setting it's value to ``node.utils.UNSET`` or\n  empty string. Most LDAP implementations not allow setting empty values, thus\n  we delete the entire attribute in this case.\n  [rnix]\n\n- Add debug-level logging if search fails with no-such-object.\n  [jensens]\n\n- Fix problem with missing LDAP batching cookie in search.\n  [jensens, rnix]\n\n- Remove ``smbpasswd`` dependency. Use ``passlib`` instead.\n  [rnix]\n\n- Use ``bytes_mode=False`` when using ``python-ldap``. This is the default\n  behavior in python 3 and handles everything as unicode/text except\n  entry attribute values.\n  For more details see https://www.python-ldap.org/en/latest/bytes_mode.html\n  [rnix]\n\n- Add ``ensure_bytes_py2`` in ``node.ext.ldap.base``.\n  [rnix]\n\n- Rename ``decode_utf8`` to ``ensure_text`` in ``node.ext.ldap.base``.\n  [rnix]\n\n- Rename ``encode_utf8`` to ``ensure_bytes`` in ``node.ext.ldap.base``.\n  [rnix]\n\n- Python 3 Support.\n  [rnix, reinhardt]\n\n- Convert doctests to unittests.\n  [rnix]\n\n\n1.0b8 (2018-10-22)\n------------------\n\n- Use ``ldap.ldapobject.ReconnectLDAPObject`` instead of ``SimpleLDAPObject`` to create\n  the connection object. This makes the connection more robust.\n  Add properties `retry_max` (default 1) and `retry_delay` (default 10) to\n  ``node.ext.ldap.properties.LDAPServerProperties`` to configure ``ReconnectLDAPObject``.\n  [joka]\n\n- Use ``explode_dn`` in ``LDAPPrincipals.__getitem__`` to prevent ``KeyError``\n  if DN contains comma.\n  [dmunicio]\n\n\n1.0b7 (2017-12-15)\n------------------\n\n- Do not catch ``ValueError`` in\n  ``node.ext.ldap._node.LDAPStorage.batched_search``.\n  [rnix]\n\n- Use property decorators for ``node.ext.ldap._node.LDAPStorage.changed``\n  and ``node.ext.ldap.session.LDAPSession.baseDN``.\n  [rnix]\n\n- Fix signature of ``node.ext.ldap.interfaces.ILDAPStorage.search`` to match\n  the actual implementation in ``node.ext.ldap._node.LDAPStorage.search``.\n  [rnix]\n\n- Fix signature of ``node.ext.ldap.ugm.LDAPPrincipals.search`` according to\n  ``node.ext.ugm.interfaces.IPrincipals.search``. The implementation exposed\n  LDAP related arguments and has been renamed to ``raw_search``.\n  [rnix]\n\n- Add ``exists`` property to ``LDAPStorage``.\n  [rnix]\n\n- Add ``objectSid`` and ``objectGUID`` from Active Directory schema to\n  ``properties.BINARY_DEFAULTS``.\n  [rnix]\n\n- Fix default value of ``LDAPStorage._multivalued_attributes`` and\n  ``LDAPStorage._binary_attributes``.\n  [rnix]\n\n\n1.0b6 (2017-10-27)\n------------------\n\n- Switch to use mdb as default db for slapd i testing layer.\n  [jensens]\n\n- fix tests, where output order could be random.\n  [jensens]\n\n\n1.0b5 (2017-10-27)\n------------------\n\n- make db-type in test layer configurable\n  [jensens]\n\n\n1.0b4 (2017-06-07)\n------------------\n\n- Turning referrals off to fix problems with MS AD if it contains aliases.\n  [alexsielicki]\n\n- Fix search to check list of binary attributes directly from the root node\n  data (not from attr behavior) to avoid unnecessarily initializing attribute\n  behavior just a simple search\n  [datakurre]\n\n- Fix to skip group DNs outside the base DN to allow users' memberOf\n  attribute contain groups outside the group base DN\n  [datakurre]\n\n\n1.0b3 (2016-10-18)\n------------------\n\n- Add a ``batched_search`` generator function, which do the actual batching for us.\n  Use this function internally too.\n  [jensens, rnix]\n\n- In testing set size_limit to 3 in ``slapd.conf`` in order to catch problems with batching.\n  [jensens, rnix]\n\n- Fix missing paging in UGM group mapping method ``member_ids``.\n  [jensens]\n\n\n1.0b2 (2016-09-09)\n------------------\n\n- Minor code cleanup\n  [jensens]\n\n- Paginate LDAP node ``__iter__``.\n  [jensens, rnix]\n\n\n1.0b1 (31.12.2015)\n------------------\n\n- Remove ``ILDAPProps.check_duplicates`` respective\n  ``LDAPProps.check_duplicates``.\n  [rnix]\n\n- ``rdn`` can be queried via ``attrlist`` in ``LDAPNode.search`` explicitely.\n  [rnix]\n\n- Introduce ``get_nodes`` keyword argument in ``LDAPNode.search``. When set,\n  search result contains ``LDAPNode`` instances instead of DN's in result.\n  [rnix]\n\n- ``LDAPNode.search`` returns DN's instead of RDN's in result. This fixes\n  searches with scope SUBTREE where result items can potentially contain\n  duplicate RDN's.\n  [rnix]\n\n- Introduce ``node_by_dn`` on ``LDAPNode``.\n  [rnix]\n\n- remove bbb code: no python 2.4 support (2.7+ now), usage of LDAPProperties\n  mandatory now.\n  [jensens]\n\n- Overhaul LDAP UGM implementation.\n  [rnix]\n\n- LDAP Node only returns direct children in ``__iter__``, even if search\n  scope subtree.\n  [rnix]\n\n- LDAPNode keys cannot be aliased any longer. Removed ``_key_attr`` and\n  ``_rdn_attr``.\n  child.\n\n- LDAPNode does not provide secondary keys any longer. Removed\n  ``_seckey_attrs``.\n  [rnix]\n\n- Deprecate ``node.ext.ldap._node.AttributesBehavior`` in favor of\n  ``node.ext.ldap._node.LDAPAttributesBehavior``.\n  [rnix]\n\n- Remove deprecated ``node.ext.ldap._node.AttributesPart``.\n  [rnix]\n\n- Don't fail on ``UNWILLING_TO_PERFORM`` exceptions when authenticating. That\n  might be thrown, if the LDAP server disallows us to authenticate an ``admin``\n  user, while we are interested in the local ``admin`` user.\n  [thet]\n\n- Add ``ignore_cert`` option to ignore TLS/SSL certificate errors for self\n  signed certificates when using the ``ldaps`` uri schema.\n  [thet]\n\n- Housekeeping.\n  [rnix]\n\n\n0.9.7\n-----\n\n- Added possibility to hook external LDIF layer for testldap server via\n  buildout configuration.\n  [rnix]\n\n- Update openldap version in buildout configs.\n  [rnix]\n\n\n0.9.6\n-----\n\n- Add new property to allow disable ``check_duplicates``.\n  This avoids following Exception when connecting ldap servers with\n  non-unique attributes used as keys.  [saily]\n  ::\n\n    Traceback (most recent call last):\n    ...\n    RuntimeError: Key not unique: <key>='<value>'.\n\n- ensure attrlist values are strings\n  [rnix, 2013-12-03]\n\n\n0.9.5\n-----\n\n- Add ``expired`` property to ``node.ext.ldap.ugm._api.LDAPUser``.\n  [rnix, 2012-12-17]\n\n- Introduce ``node.ext.ldap.ugm._api.calculate_expired`` helper function.\n  [rnix, 2012-12-17]\n\n- Lookup ``expired`` attribut from LDAP in\n  ``node.ext.ldap.ugm._api.LDAPUser.authenticate``.\n  [rnix, 2012-12-17]\n\n\n0.9.4\n-----\n\n- Encode DN in ``node.ext.ldap._node.LDAPStorage._ldap_modify``.\n  [rnix, 2012-11-08]\n\n- Encode DN in ``node.ext.ldap._node.LDAPStorage._ldap_delete``.\n  [rnix, 2012-11-08]\n\n- Encode DN in ``node.ext.ldap.ugm._api.LDAPUsers.passwd``.\n  [rnix, 2012-11-08]\n\n- Encode DN in ``node.ext.ldap.ugm._api.LDAPUsers.authenticate``.\n  [rnix, 2012-11-07]\n\n- Encode ``baseDN`` in ``LDAPPrincipal.member_of_attr``.\n  [rnix, 2012-11-06]\n\n- Encode ``baseDN`` in ``AttributesBehavior.load``.\n  [rnix, 2012-11-06]\n\n- Python 2.7 compatibility.\n  [rnix, 2012-10-16]\n\n- PEP-8.\n  [rnix, 2012-10-16]\n\n- Fix ``LDAPPrincipals.idbydn`` handling UTF-8 DN's properly.\n  [rnix, 2012-10-16]\n\n- Rename parts to behaviors.\n  [rnix, 2012-07-29]\n\n- adopt to ``node`` 0.9.8.\n  [rnix, 2012-07-29]\n\n- Adopt to ``plumber`` 1.2.\n  [rnix, 2012-07-29]\n\n- Do not convert cookie to unicode in ``LDAPSession.search``. Cookie value is\n  no utf-8 string but octet string as described in\n  http://tools.ietf.org/html/rfc2696.html.\n  [rnix, 2012-07-27]\n\n- Add ``User.group_ids``.\n  [rnix, 2012-07-26]\n\n\n0.9.3\n-----\n\n- Fix schema to not bind to test BaseDN only and make binding deferred.\n  [jensens, 2012-05-30]\n\n\n0.9.2\n-----\n\n- Remove ``escape_queries`` property from\n  ``node.ext.ldap.properties.LDAPProps``.\n  [rnix, 2012-05-18]\n\n- Use ``zope.interface.implementer`` instead of ``zope.interface.implements``.\n  [rnix, 2012-05-18]\n\n- Structural object class ``inetOrgPerson`` instead of ``account`` on posix\n  users and groups related test LDIF's\n  [rnix, 2012-04-23]\n\n- session no longer magically decodes everything and prevents binary data from\n  being fetched from ldap. LDAP-Node has semantic knowledge to determine binary\n  data LDAP-Node converts all non binary data and all keys to unicode.\n  [jensens, 2012-04-04]\n\n- or_values and or_keys for finer control of filter criteria\n  [iElectric, chaoflow, 2012-03-24]\n\n- support paged searching\n  [iElectric, chaoflow, 2012-03-24]\n\n\n0.9.1\n-----\n\n- added is_multivalued to properties and modified node to use this list instead\n  of the static list. prepare for binary attributes.\n  [jensens, 2012-03-19]\n\n- added schema_info to node.\n  [jensens, 2012-03-19]\n\n- ``shadowInactive`` defaults to ``0``.\n  [rnix, 2012-03-06]\n\n- Introduce ``expiresAttr`` and ``expiresUnit`` in principals config.\n  Considered in ``Users.authenticate``.\n  [rnix, 2012-02-11]\n\n- Do not throw ``KeyError`` if secondary key set but attribute not found on\n  entry. In case, skip entry.\n  [rnix, 2012-02-10]\n\n- Force unicode ids and keys in UGM API.\n  [rnix, 2012-01-23]\n\n- Add unicode support for filters.\n  [rnix, 2012-01-23]\n\n- Add ``LDAPUsers.id_for_login``.\n  [rnix, 2012-01-18]\n\n- Implement memberOf Support for openldap memberof overlay and AD memberOf\n  behavior.\n  [rnix, 2011-11-07]\n\n- Add ``LDAPProps.escape_queries`` for ActiveDirectory.\n  [rnix, 2011-11-06]\n\n- Add group object class to member attribute mapping for ActiveDirectory.\n  [rnix, 2011-11-06]\n\n- Make testlayer and testldap more flexible for usage outside this package.\n  [jensens, 2010-09-30]\n\n\n0.9\n---\n\n- refactor form ``bda.ldap``.\n  [rnix, chaoflow]\n\n\nTODO\n====\n\n- Consider ``search_st`` with timeout.\n\n- Investigate ``ReconnectLDAPObject.set_cache_options``.\n\n- Check/implement silent sort on only the keys ``LDAPNode.sortonkeys``.\n\n- Interactive configuration showing live how many users/groups are found with\n  the current config and what a selected user/group would look like.\n\n- Configuration validation for UGM. Add some checks in ``Ugm.__init__`` which\n  tries to block stupid configuration.\n\n- Group in group support.\n\n- Rework ldap testsetup to allow for multiple servers in order to test with\n  different overlays it would be nice to start different servers or have one\n  server with multiple databases. whatever feels better.\n\n- Rework tests and ldifs to target isolated aspects.\n\n- Potentially multi-valued attrs always as list.\n\n\n\nLicense\n=======\n\nCopyright (c) 2006-2021, BlueDynamics Alliance, Austria, Germany, Switzerland\nCopyright (c) 2021-2022, Node Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/conestack/node.ext.ldap",
    "keywords": "ldap authentication node tree access users groups",
    "license": "Simplified BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "node.ext.ldap",
    "package_url": "https://pypi.org/project/node.ext.ldap/",
    "platform": null,
    "project_url": "https://pypi.org/project/node.ext.ldap/",
    "project_urls": {
      "Homepage": "https://github.com/conestack/node.ext.ldap"
    },
    "release_url": "https://pypi.org/project/node.ext.ldap/1.2/",
    "requires_dist": [
      "bda.cache",
      "node (>=1.1)",
      "node.ext.ugm (>=1.0)",
      "passlib",
      "python-ldap (>=2.4.14)",
      "setuptools",
      "argparse ; python_version < \"3.2\"",
      "coverage ; extra == 'test'",
      "plone.testing ; extra == 'test'",
      "zope.configuration ; extra == 'test'",
      "zope.testing ; extra == 'test'",
      "zope.testrunner ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "LDAP/AD convenience with Node-trees based on python-ldap",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15994705,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1db019babc9b7d62bff9441111061ed3b35a255c8144fc3a556b0c9ca0bb066c",
          "md5": "936fbe8b9c486c4c525bafb87a4bcd16",
          "sha256": "80b29f59397350218787155fac2570c96d3fcdd0be89dacace85214cdc1a4ebf"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "936fbe8b9c486c4c525bafb87a4bcd16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1875178,
        "upload_time": "2011-09-20T17:17:57",
        "upload_time_iso_8601": "2011-09-20T17:17:57.295052Z",
        "url": "https://files.pythonhosted.org/packages/1d/b0/19babc9b7d62bff9441111061ed3b35a255c8144fc3a556b0c9ca0bb066c/node.ext.ldap-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab55012d4fcafd2946638d4b9f163933b8841a808a027b11ede3dcb2a3429ed6",
          "md5": "7eedc01b347364cd50e9c41049cb687a",
          "sha256": "e4fc92412477d6e2f858717cd70526c0d829f1af7e5b78e65c8b7a0ac07d0226"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7eedc01b347364cd50e9c41049cb687a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1865540,
        "upload_time": "2012-03-20T10:38:49",
        "upload_time_iso_8601": "2012-03-20T10:38:49.749306Z",
        "url": "https://files.pythonhosted.org/packages/ab/55/012d4fcafd2946638d4b9f163933b8841a808a027b11ede3dcb2a3429ed6/node.ext.ldap-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1pre2": [],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d3b0786c817ff7ad6a18a5ccc4a40895f655d6e969cb4a4424a28fb732becdd",
          "md5": "98e422eaab6ea045b14c47059421569a",
          "sha256": "562c3b78c87bfed017ae961b327ba3c4291bbabaeeb1d217c77942dd23762f3a"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "98e422eaab6ea045b14c47059421569a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1880181,
        "upload_time": "2012-05-30T11:17:57",
        "upload_time_iso_8601": "2012-05-30T11:17:57.301693Z",
        "url": "https://files.pythonhosted.org/packages/6d/3b/0786c817ff7ad6a18a5ccc4a40895f655d6e969cb4a4424a28fb732becdd/node.ext.ldap-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb17abf96d2bd428fe9626d3fbf08e844428834990cd13f2fd8b0bba1a703dc",
          "md5": "7e12055266eed268bcc90383507a10cb",
          "sha256": "0c7381707fbbb2630230ebcee1a1f1c8be9094f568181859b5c562dc72697469"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7e12055266eed268bcc90383507a10cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1880840,
        "upload_time": "2012-05-31T12:42:02",
        "upload_time_iso_8601": "2012-05-31T12:42:02.911976Z",
        "url": "https://files.pythonhosted.org/packages/3b/b1/7abf96d2bd428fe9626d3fbf08e844428834990cd13f2fd8b0bba1a703dc/node.ext.ldap-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73d82f79f5b310bf574c468c8c64e6dd4fe6e2769abff45e45cd4e927327d2b3",
          "md5": "abe2fce4a0c14df6d7cf3c888ff79c0f",
          "sha256": "45ccc3bd93787cc62d3c5e4a712275b2e097ba4debe55a7c909aae27ef423588"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "abe2fce4a0c14df6d7cf3c888ff79c0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1880823,
        "upload_time": "2012-12-05T11:20:45",
        "upload_time_iso_8601": "2012-12-05T11:20:45.847871Z",
        "url": "https://files.pythonhosted.org/packages/73/d8/2f79f5b310bf574c468c8c64e6dd4fe6e2769abff45e45cd4e927327d2b3/node.ext.ldap-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b6c11ca5b978914604ab35dfd7e6cf6adc2d43353af52476348ecd2d4242573",
          "md5": "4a8f6aa02121bf66aaceeaf9f8ded23b",
          "sha256": "169a9bc9a4f2eed9bf35480bfb095156cb4a5774b2989074c92ebe09ffbd6328"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4a8f6aa02121bf66aaceeaf9f8ded23b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1881829,
        "upload_time": "2013-02-24T15:17:57",
        "upload_time_iso_8601": "2013-02-24T15:17:57.043007Z",
        "url": "https://files.pythonhosted.org/packages/7b/6c/11ca5b978914604ab35dfd7e6cf6adc2d43353af52476348ecd2d4242573/node.ext.ldap-0.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f879f8b13ea8d4849b653f92b662c7286e6f5d841643cb41cc6465e2f0f6099",
          "md5": "0c171d588c1833198bc75f95201bb41d",
          "sha256": "82a74b88e2e4478eaa7f74be9d008ae95ca8bad5a6afe9cabe80317321bbd331"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.6.zip",
        "has_sig": false,
        "md5_digest": "0c171d588c1833198bc75f95201bb41d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1988940,
        "upload_time": "2014-03-13T09:38:08",
        "upload_time_iso_8601": "2014-03-13T09:38:08.000714Z",
        "url": "https://files.pythonhosted.org/packages/4f/87/9f8b13ea8d4849b653f92b662c7286e6f5d841643cb41cc6465e2f0f6099/node.ext.ldap-0.9.6.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f20264188ed7b97e8d895628e7f05ea7b0a7de91afc63a25a491acef7b0e435",
          "md5": "3b8df9b23cdffa2649071fe98dde6368",
          "sha256": "cdb2bef454632e7ce186f2eac180393bca49e07f6298ac8bcf1a0c88d173e02d"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-0.9.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3b8df9b23cdffa2649071fe98dde6368",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1882417,
        "upload_time": "2014-05-13T16:41:57",
        "upload_time_iso_8601": "2014-05-13T16:41:57.149704Z",
        "url": "https://files.pythonhosted.org/packages/8f/20/264188ed7b97e8d895628e7f05ea7b0a7de91afc63a25a491acef7b0e435/node.ext.ldap-0.9.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7664429f0ee28273204e7249315c764667aaede214ae3502cc48cc612e316e2",
          "md5": "714415bb4a372208b7e6a879943fbfd9",
          "sha256": "5f3b864882c2c03beba5f1cae8afec8dfabb7876aa1c5748df99274d5c4a4a8a"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "714415bb4a372208b7e6a879943fbfd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1974960,
        "upload_time": "2022-03-19T08:38:48",
        "upload_time_iso_8601": "2022-03-19T08:38:48.139198Z",
        "url": "https://files.pythonhosted.org/packages/e7/66/4429f0ee28273204e7249315c764667aaede214ae3502cc48cc612e316e2/node.ext.ldap-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5947bf74d525bfae89b715552bc909c48859a4e69cacb959717262286546650",
          "md5": "d63004f26b716e1cca643c7a689b034e",
          "sha256": "c286589afa1c350973508a9c6a79b13a281f074a985f7e70a089e0e346e36033"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d63004f26b716e1cca643c7a689b034e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1893243,
        "upload_time": "2022-03-19T08:38:55",
        "upload_time_iso_8601": "2022-03-19T08:38:55.881305Z",
        "url": "https://files.pythonhosted.org/packages/c5/94/7bf74d525bfae89b715552bc909c48859a4e69cacb959717262286546650/node.ext.ldap-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca81d79a279010615f0f2b7b6644abd39acad09a70fd2e25d14c43e08f73e611",
          "md5": "484d050ce4d51872c14df0e91f1ed7cb",
          "sha256": "5156073c3403479f6b3484960fc8deead1018ff88f322e73a20aa3335385b195"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "484d050ce4d51872c14df0e91f1ed7cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1881855,
        "upload_time": "2015-12-31T16:53:19",
        "upload_time_iso_8601": "2015-12-31T16:53:19.998527Z",
        "url": "https://files.pythonhosted.org/packages/ca/81/d79a279010615f0f2b7b6644abd39acad09a70fd2e25d14c43e08f73e611/node.ext.ldap-1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f8407d05671817b3b1366313c997f48b13acb37202719e3d470fd30e7014a0f",
          "md5": "38ecf5aea81e672588db2b8e3af35503",
          "sha256": "9260be406e40b259e466a9faa174e56e432c5594da49a0b77cf377d4f0463021"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b10.tar.gz",
        "has_sig": false,
        "md5_digest": "38ecf5aea81e672588db2b8e3af35503",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1896861,
        "upload_time": "2019-06-30T11:49:12",
        "upload_time_iso_8601": "2019-06-30T11:49:12.523805Z",
        "url": "https://files.pythonhosted.org/packages/7f/84/07d05671817b3b1366313c997f48b13acb37202719e3d470fd30e7014a0f/node.ext.ldap-1.0b10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e366fb80699c379470e26ab3c3cb32ecf9efa3aa91042c1134e782a2a128ace2",
          "md5": "6eb3c65ec8ca7b6e26a4afa3ae52da8a",
          "sha256": "37db421b3669c1d61edf0bc0b42320c004ac5379e60379635728d35313fdd325"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b11.tar.gz",
        "has_sig": false,
        "md5_digest": "6eb3c65ec8ca7b6e26a4afa3ae52da8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1897340,
        "upload_time": "2019-09-08T09:04:47",
        "upload_time_iso_8601": "2019-09-08T09:04:47.961037Z",
        "url": "https://files.pythonhosted.org/packages/e3/66/fb80699c379470e26ab3c3cb32ecf9efa3aa91042c1134e782a2a128ace2/node.ext.ldap-1.0b11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6377ae2ae7a0b076d6945495ca9f863dd5cd72394a1f278deb580dd746f010e",
          "md5": "1128055bf0ac638aed348eb8566d67f6",
          "sha256": "4388136d8f92227ad8c87064409d2bf29ce7c3e0c3548ca9bd4960027082f821"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b12-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "1128055bf0ac638aed348eb8566d67f6",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 1974509,
        "upload_time": "2020-05-28T14:19:28",
        "upload_time_iso_8601": "2020-05-28T14:19:28.050044Z",
        "url": "https://files.pythonhosted.org/packages/a6/37/7ae2ae7a0b076d6945495ca9f863dd5cd72394a1f278deb580dd746f010e/node.ext.ldap-1.0b12-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d99a46ac68c8b7172e4aa08c92cefad93a2177fdbbda01151e4f7f430a23cf07",
          "md5": "c7c42f840ce8db43e668b7bda4a70944",
          "sha256": "b6329d2db2070e88babc2ddb5b62972a9c399cb2b95c4ba762172d52e0e57478"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7c42f840ce8db43e668b7bda4a70944",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1974508,
        "upload_time": "2020-05-28T14:27:13",
        "upload_time_iso_8601": "2020-05-28T14:27:13.754138Z",
        "url": "https://files.pythonhosted.org/packages/d9/9a/46ac68c8b7172e4aa08c92cefad93a2177fdbbda01151e4f7f430a23cf07/node.ext.ldap-1.0b12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1017cec9050e8d4b29b9e118cd271eb501a2e0d54efe93cc0935418c951965bb",
          "md5": "5bcd6220c05de5e00b9d749a8d97b2f6",
          "sha256": "cb0f8f4f8d71d166efc1e669f516e15c08cff47c395f454822404e484b1f8e65"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b12.tar.gz",
        "has_sig": false,
        "md5_digest": "5bcd6220c05de5e00b9d749a8d97b2f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1895659,
        "upload_time": "2020-05-28T14:19:41",
        "upload_time_iso_8601": "2020-05-28T14:19:41.286086Z",
        "url": "https://files.pythonhosted.org/packages/10/17/cec9050e8d4b29b9e118cd271eb501a2e0d54efe93cc0935418c951965bb/node.ext.ldap-1.0b12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d40c74669140b5718fcd4b01a179738fd948f5757d4362f6eb7c3d6145035b4c",
          "md5": "346d5b813ad3c4b6686960c48c5cce12",
          "sha256": "bb25a94faa62a55049c45325b44e8c2025540212d910f857622d7b574aac06af"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "346d5b813ad3c4b6686960c48c5cce12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1884108,
        "upload_time": "2016-09-09T14:01:18",
        "upload_time_iso_8601": "2016-09-09T14:01:18.591720Z",
        "url": "https://files.pythonhosted.org/packages/d4/0c/74669140b5718fcd4b01a179738fd948f5757d4362f6eb7c3d6145035b4c/node.ext.ldap-1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5138f9c5524f98971c4b92f5c2df0f34ac3ee4becb18d3216db3ec392994cade",
          "md5": "4f0511a0b3e92bd1d87644437a8b5cd9",
          "sha256": "be46d2dfb28ac67d38f81079af6ce0d736d9339c41acab7f4f001a846c613819"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "4f0511a0b3e92bd1d87644437a8b5cd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1885773,
        "upload_time": "2016-10-18T16:41:52",
        "upload_time_iso_8601": "2016-10-18T16:41:52.787728Z",
        "url": "https://files.pythonhosted.org/packages/51/38/f9c5524f98971c4b92f5c2df0f34ac3ee4becb18d3216db3ec392994cade/node.ext.ldap-1.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06867fe7c01918eb11107153ff161d168419147d218e0bc18ba506138afb06e6",
          "md5": "a76d4fc68d964d6e381f08ffc574211e",
          "sha256": "976283f3018d37626baccce32278d0fafa5221bdf68220f4e83dbba1648a9230"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "a76d4fc68d964d6e381f08ffc574211e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1889053,
        "upload_time": "2017-06-07T12:21:11",
        "upload_time_iso_8601": "2017-06-07T12:21:11.447063Z",
        "url": "https://files.pythonhosted.org/packages/06/86/7fe7c01918eb11107153ff161d168419147d218e0bc18ba506138afb06e6/node.ext.ldap-1.0b4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "795e3dc507ef11ab77a269214939360266f86fe15e770b66b7ba9794189eb442",
          "md5": "24d2ec27ea2395566165d4ef84e71c08",
          "sha256": "c26bf0a1a7f55fb04025d43d89ed6019e47ee99960825f0621048ce65d82505e"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b5.tar.gz",
        "has_sig": false,
        "md5_digest": "24d2ec27ea2395566165d4ef84e71c08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1888158,
        "upload_time": "2017-10-27T17:23:09",
        "upload_time_iso_8601": "2017-10-27T17:23:09.484367Z",
        "url": "https://files.pythonhosted.org/packages/79/5e/3dc507ef11ab77a269214939360266f86fe15e770b66b7ba9794189eb442/node.ext.ldap-1.0b5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3c85fa611de0c189bd8956652ae834273e0eb42e967b742f05d0d10645221dd",
          "md5": "9d6b9aaf81fd454149aebb8f0fc2ec84",
          "sha256": "12464018ba3caa074141957e1472cea235f599f33c4b5de119c6081907d14857"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b6.tar.gz",
        "has_sig": false,
        "md5_digest": "9d6b9aaf81fd454149aebb8f0fc2ec84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1888435,
        "upload_time": "2017-10-27T18:13:51",
        "upload_time_iso_8601": "2017-10-27T18:13:51.352343Z",
        "url": "https://files.pythonhosted.org/packages/f3/c8/5fa611de0c189bd8956652ae834273e0eb42e967b742f05d0d10645221dd/node.ext.ldap-1.0b6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac3a972e21836f39bc269a3954128a66b54dbc46ee637cbe725a184085da4db1",
          "md5": "d373b60da9d6af82f3fe3ef675c2c466",
          "sha256": "97ad7463e069da39854291342d3fd1a34d375ea7e02aaecdfb57267bf40d335e"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b7.tar.gz",
        "has_sig": false,
        "md5_digest": "d373b60da9d6af82f3fe3ef675c2c466",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1891532,
        "upload_time": "2017-12-15T11:45:28",
        "upload_time_iso_8601": "2017-12-15T11:45:28.558354Z",
        "url": "https://files.pythonhosted.org/packages/ac/3a/972e21836f39bc269a3954128a66b54dbc46ee637cbe725a184085da4db1/node.ext.ldap-1.0b7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b030f184117bbc3c7aea028cc65bd584ee963d5bd78e390c110b704f0c48641",
          "md5": "4f97a22b3006ac3f4103317568b1dcc5",
          "sha256": "57c78a01b38751bc189afe8fc9cd366621e134b25b7f66365d43a298553e1793"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b8.tar.gz",
        "has_sig": false,
        "md5_digest": "4f97a22b3006ac3f4103317568b1dcc5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1892048,
        "upload_time": "2018-10-22T09:05:39",
        "upload_time_iso_8601": "2018-10-22T09:05:39.504764Z",
        "url": "https://files.pythonhosted.org/packages/3b/03/0f184117bbc3c7aea028cc65bd584ee963d5bd78e390c110b704f0c48641/node.ext.ldap-1.0b8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2071f9a208806290d1a7e7801bf2b6039972506810157ee42218ecd94164ddd3",
          "md5": "237f19a1eb2bed2810a092d15dc6cfde",
          "sha256": "1edcfff3b5de75ba8c46a19f02ff9d68c3b54cb56e4c87c27273e074b4c10ffc"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0b9.tar.gz",
        "has_sig": false,
        "md5_digest": "237f19a1eb2bed2810a092d15dc6cfde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1887711,
        "upload_time": "2019-05-07T09:05:28",
        "upload_time_iso_8601": "2019-05-07T09:05:28.263725Z",
        "url": "https://files.pythonhosted.org/packages/20/71/f9a208806290d1a7e7801bf2b6039972506810157ee42218ecd94164ddd3/node.ext.ldap-1.0b9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "204c440341333a48b4def59c54b4bd3299863d05ca8f7c68d49c0365d866b7fc",
          "md5": "445647db86439d69ae94ce59adcbe4a6",
          "sha256": "4355c41b973cc20e8db761799b650cadb187762beab5200066dea08cfc2e8fc9"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "445647db86439d69ae94ce59adcbe4a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1898957,
        "upload_time": "2021-11-08T09:26:47",
        "upload_time_iso_8601": "2021-11-08T09:26:47.258868Z",
        "url": "https://files.pythonhosted.org/packages/20/4c/440341333a48b4def59c54b4bd3299863d05ca8f7c68d49c0365d866b7fc/node.ext.ldap-1.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80a6056f0724df60d4115ba1708b73ba86cb4586a4b4d7bcf409c6d5d32b71d8",
          "md5": "1eb69601a4756e20c38d26b545b68547",
          "sha256": "cb6234d360b3f133c967ef46e7f1a0947968bdedc73b778dc44d9627b8589d24"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1eb69601a4756e20c38d26b545b68547",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1975023,
        "upload_time": "2022-03-01T10:11:39",
        "upload_time_iso_8601": "2022-03-01T10:11:39.592810Z",
        "url": "https://files.pythonhosted.org/packages/80/a6/056f0724df60d4115ba1708b73ba86cb4586a4b4d7bcf409c6d5d32b71d8/node.ext.ldap-1.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc5f92233580f39bc68786b49b53f308521bbe008ab8715216b4cf285745dced",
          "md5": "f1c9c4c463e3891febdc9ce4519b39ba",
          "sha256": "7a3f7fded7ba2c5c45cc0b03d90439168ebcc6d7c2c2494e2d057174066bb5b8"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "f1c9c4c463e3891febdc9ce4519b39ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1894816,
        "upload_time": "2022-03-01T10:11:44",
        "upload_time_iso_8601": "2022-03-01T10:11:44.517839Z",
        "url": "https://files.pythonhosted.org/packages/bc/5f/92233580f39bc68786b49b53f308521bbe008ab8715216b4cf285745dced/node.ext.ldap-1.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fa7e7005fa5f7da00191ddb86e2a2b602980e86852690851515f1db4bda2966",
          "md5": "9620bb71a905b98bf7758aace5af9ff6",
          "sha256": "0e0ef627f8d67a75155a9626ca195d97f8fd1f6d98df5ccfea2a08e5ffe154df"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9620bb71a905b98bf7758aace5af9ff6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1975395,
        "upload_time": "2022-10-06T06:39:30",
        "upload_time_iso_8601": "2022-10-06T06:39:30.840048Z",
        "url": "https://files.pythonhosted.org/packages/2f/a7/e7005fa5f7da00191ddb86e2a2b602980e86852690851515f1db4bda2966/node.ext.ldap-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b116de9ce03d3286f93c51232f486343f0bafde0d5b6f91e7c493c7b440dc529",
          "md5": "0873bbb69de8df9d15c4b2a37bcd970d",
          "sha256": "0722201e289a8514ffbe0831002d76b48bd58c459e86c582f394c92d59a759e3"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0873bbb69de8df9d15c4b2a37bcd970d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1890095,
        "upload_time": "2022-10-06T06:39:35",
        "upload_time_iso_8601": "2022-10-06T06:39:35.083542Z",
        "url": "https://files.pythonhosted.org/packages/b1/16/de9ce03d3286f93c51232f486343f0bafde0d5b6f91e7c493c7b440dc529/node.ext.ldap-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7003b46233699569cba2387f7dbca3aae650f3a14e93a90652cddb2cc129f0b6",
          "md5": "a464ef4eaed582f661dbda4018f6d6a7",
          "sha256": "03335f6f803dd29aeb4acf949b3ec73cf603d2abf9f4fe2ef7a823585582e7a9"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a464ef4eaed582f661dbda4018f6d6a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1976948,
        "upload_time": "2022-12-05T12:13:01",
        "upload_time_iso_8601": "2022-12-05T12:13:01.353790Z",
        "url": "https://files.pythonhosted.org/packages/70/03/b46233699569cba2387f7dbca3aae650f3a14e93a90652cddb2cc129f0b6/node.ext.ldap-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df669af7a712bde22d551e66160ce60c2aca220b79371173f1757e57670d0a2",
          "md5": "cc7ee1e643dc22b307bb227e59fd42b4",
          "sha256": "18b4766c31bddbf9d72b8a564377fd1b8a9fdc9115afb6079c7aaf438e501c90"
        },
        "downloads": -1,
        "filename": "node.ext.ldap-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cc7ee1e643dc22b307bb227e59fd42b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1895954,
        "upload_time": "2022-12-05T12:13:06",
        "upload_time_iso_8601": "2022-12-05T12:13:06.606394Z",
        "url": "https://files.pythonhosted.org/packages/7d/f6/69af7a712bde22d551e66160ce60c2aca220b79371173f1757e57670d0a2/node.ext.ldap-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7003b46233699569cba2387f7dbca3aae650f3a14e93a90652cddb2cc129f0b6",
        "md5": "a464ef4eaed582f661dbda4018f6d6a7",
        "sha256": "03335f6f803dd29aeb4acf949b3ec73cf603d2abf9f4fe2ef7a823585582e7a9"
      },
      "downloads": -1,
      "filename": "node.ext.ldap-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a464ef4eaed582f661dbda4018f6d6a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1976948,
      "upload_time": "2022-12-05T12:13:01",
      "upload_time_iso_8601": "2022-12-05T12:13:01.353790Z",
      "url": "https://files.pythonhosted.org/packages/70/03/b46233699569cba2387f7dbca3aae650f3a14e93a90652cddb2cc129f0b6/node.ext.ldap-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7df669af7a712bde22d551e66160ce60c2aca220b79371173f1757e57670d0a2",
        "md5": "cc7ee1e643dc22b307bb227e59fd42b4",
        "sha256": "18b4766c31bddbf9d72b8a564377fd1b8a9fdc9115afb6079c7aaf438e501c90"
      },
      "downloads": -1,
      "filename": "node.ext.ldap-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cc7ee1e643dc22b307bb227e59fd42b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1895954,
      "upload_time": "2022-12-05T12:13:06",
      "upload_time_iso_8601": "2022-12-05T12:13:06.606394Z",
      "url": "https://files.pythonhosted.org/packages/7d/f6/69af7a712bde22d551e66160ce60c2aca220b79371173f1757e57670d0a2/node.ext.ldap-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}