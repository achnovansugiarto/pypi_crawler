{
  "info": {
    "author": "Yuri Farina",
    "author_email": "me@yurifarina.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/django-3t\n    :alt: PyPI Version\n    :target: https://pypi.python.org/pypi/pytest-3t\n\n.. image:: https://img.shields.io/travis/yurifari/django-3t\n    :alt: Travis Build\n    :target: https://travis-ci.org/yurifari/django-3t\n\n.. image:: https://img.shields.io/codecov/c/github/yurifari/django-3t\n    :alt: Code Coverage\n    :target: https://codecov.io/gh/yurifari/django-3t\n\n.. image:: https://img.shields.io/github/license/yurifari/django-3t\n    :alt: License\n    :target: https://github.com/yurifari/django-3t\n\nDjango 3T\n#########\n\nDjango 3T is a Django Template Testing Tool which aims to help developers to write better tests where the Django template engine is involved.\n\nSome of the things you can do with Django 3T include:\n\n- Ensure a specific ``template``, ``node`` or ``block`` is rendered\n- Ensure a specific ``template``, ``node`` or ``block`` is rendered a specific amount of times\n- Ensure a specific ``template`` is rendered with a specific context subset\n- Ensure a specific ``node`` is rendered with specific arguments\n- Ensure a specific ``template``, ``node`` or ``block`` results in a specific content or includes it\n\n.. _installation:\n\nInstallation\n************\n::\n\n    pip install django-3t\n\n.. _usage:\n\nUsage\n*****\nDjango 3T uses the ``watch_templates`` context manager to intercept template and node renderings.\n\nSuppose your project implements the following template called ``homepage.html``:\n\n.. code-block:: html\n\n    {% load say_hello from project_tags %}\n    \n    <h1>The most useful website ever</h1>\n    \n    {% say_hello request.user %}\n\nA test that makes sure your template and template tag are rendered correctly would roughly look like this:\n\n.. code-block:: python\n\n    from django.contrib.auth import get_user_model\n    from django.test import Client\n    \n    # 1. Import the context manager\n    from d3t.watcher import watch_templates\n    \n    User = get_user_model()\n    \n    def test_homepage():\n        user = User.objects.get(username='Billy')\n        client = Client()\n        client.force_login(user)\n        \n        # 2. Wrap the code where the rendering happens\n        with watch_templates as rendered:\n            client.get('/')\n    \n        # 3. Assert!\n        assert rendered.template('homepage.html')\n        assert rendered.node('say_hello').with_arguments(user)\n\nThe first assertion makes sure the template ``homepage.html`` was rendered, the second assertion makes sure the template tag ``say_hello`` was rendered and it was done using ``user`` as argument.\n\nFor a comprehensive list of available methods, check the `API section <api_>`_.\n\n.. _api:\n\nAPI\n***\nYou can check that a template, node or block has been rendered and that it did under specific conditions\n\n.. _template-api:\n\nTemplate API\n=================\nCheck that it has been rendered\n\n.. code-block:: python\n\n    rendered.template('template-name.html')\n\nCheck that it has been rendered with a specific context subset\n\n.. code-block:: python\n\n    rendered.template('template-name.html').with_context({'answer': 42})\n\nCheck that it has been rendered and the output contains a specific string\n\n.. code-block:: python\n\n    rendered.template('template-name.html').contains('content')\n\nCheck that it has been rendered and the output equals a specific string\n\n.. code-block:: python\n\n    rendered.template('template-name.html').equals('full content')\n\n.. _node-api:\n\nNode API\n=================\nCheck that it has been rendered\n\n.. code-block:: python\n\n    rendered.node('node_name')\n\nCheck that it has been rendered with specific arguments\n\n.. code-block:: python\n\n    rendered.node('node_name').with_arguments(42, type='answer')\n\nCheck that it has been rendered and the output contains a specific string\n\n.. code-block:: python\n\n    rendered.node('node_name').contains('content')\n\nCheck that it has been rendered and the output equals a specific string\n\n.. code-block:: python\n\n    rendered.node('node_name').equals('full content')\n\n.. _block-api:\n\nBlock API\n=================\nCheck that it has been rendered\n\n.. code-block:: python\n\n    rendered.block('block-name')\n\nCheck that it has been rendered and the output contains a specific string\n\n.. code-block:: python\n\n    rendered.block('block-name').contains('content')\n\nCheck that it has been rendered and the output equals a specific string\n\n.. code-block:: python\n\n    rendered.block('block-name').equals('full content')\n\n.. _handling-multiple-renderings:\n\nHandling multilpe renderings\n============================\n\nA template, node or block could be rendered any number of times, Django 3T allows you to take control of this giving support for the ``not`` operator and for the ``len``, ``all`` and ``any`` built-in functions:\n\nCheck that a template/node/block has not been rendered\n\n.. code-block:: python\n\n    not rendered.template('template-name.html')\n\nCheck that a template/node/block has been rendered a specific amount of times\n\n.. code-block:: python\n\n    len(rendered.node('node_name')) == 3\n\nCheck that all the template/node/block renderings happened under a specific condition\n\n.. code-block:: python\n\n    all(rendered.block('block-name').contains('content'))\n\nCheck that any of the template/node/block renderings happened under a specific condition\n\n.. code-block:: python\n\n    any(rendered.template('template-name.html').equals('specific content'))\n\n.. _signals:\n\nSignals\n*******\ntemplate_rendered\n=================\n``d3t.signals.template_rendered``\n\nThis is sent immediately after a template is rendered.\n\nArguments sent with this signal:\n\n- | **sender**\n  | The ``Template`` class.\n\n- | **instance**\n  | The actual template instance being rendered.\n\n- | **context**\n  | The context used to render the template.\n\n- | **result**\n  | The resulting rendered output.\n\nnode_rendered\n=================\n``d3t.signals.node_rendered``\n\nThis is sent immediately after a node is rendered.\n\nArguments sent with this signal:\n\n- | **sender**\n  | The ``Node`` class.\n\n- | **instance**\n  | The actual node instance being rendered.\n\n- | **result**\n  | The resulting rendered output.",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yurifari/django-3t",
    "keywords": "django,template,test,unittest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-3t",
    "package_url": "https://pypi.org/project/django-3t/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-3t/",
    "project_urls": {
      "Homepage": "https://github.com/yurifari/django-3t",
      "Source": "https://github.com/yurifari/django-3t",
      "Tracker": "https://github.com/yurifari/django-3t/issues"
    },
    "release_url": "https://pypi.org/project/django-3t/1.0.0a1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django 3T is a Django Template Testing Tool which aims to help developers to write better tests where the Django template engine is involved.",
    "version": "1.0.0a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6523986,
  "releases": {
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "811c225d69f240a61741ccbbc0cd470c50277fcf37a8c47b227c96852df8d650",
          "md5": "74feaa0a005c940c7ac2caba6dd2400a",
          "sha256": "de9d61e54ad62d7afbb7370372d59e40cc6b7c460749efd9d73a4aa51bbaad63"
        },
        "downloads": -1,
        "filename": "django-3t-1.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "74feaa0a005c940c7ac2caba6dd2400a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11036,
        "upload_time": "2020-01-27T00:27:24",
        "upload_time_iso_8601": "2020-01-27T00:27:24.918400Z",
        "url": "https://files.pythonhosted.org/packages/81/1c/225d69f240a61741ccbbc0cd470c50277fcf37a8c47b227c96852df8d650/django-3t-1.0.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "811c225d69f240a61741ccbbc0cd470c50277fcf37a8c47b227c96852df8d650",
        "md5": "74feaa0a005c940c7ac2caba6dd2400a",
        "sha256": "de9d61e54ad62d7afbb7370372d59e40cc6b7c460749efd9d73a4aa51bbaad63"
      },
      "downloads": -1,
      "filename": "django-3t-1.0.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "74feaa0a005c940c7ac2caba6dd2400a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11036,
      "upload_time": "2020-01-27T00:27:24",
      "upload_time_iso_8601": "2020-01-27T00:27:24.918400Z",
      "url": "https://files.pythonhosted.org/packages/81/1c/225d69f240a61741ccbbc0cd470c50277fcf37a8c47b227c96852df8d650/django-3t-1.0.0a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}