{
  "info": {
    "author": "Juan Manuel Coria",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Topic :: Multimedia :: Sound/Audio :: Analysis",
      "Topic :: Multimedia :: Sound/Audio :: Speech",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<br/>\n\n<p align=\"center\">\n<img src=\"/logo.png\" title=\"Logo\" />\n</p>\n\n<p align=\"center\">\n<img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/diart?color=g\">\n<img alt=\"PyPI Downloads\" src=\"https://static.pepy.tech/personalized-badge/diart?period=total&units=international_system&left_color=grey&right_color=brightgreen&left_text=downloads\">\n<img alt=\"Top language\" src=\"https://img.shields.io/github/languages/top/juanmc2005/StreamingSpeakerDiarization?color=g\">\n<img alt=\"Code size in bytes\" src=\"https://img.shields.io/github/languages/code-size/juanmc2005/StreamingSpeakerDiarization?color=g\">\n<img alt=\"License\" src=\"https://img.shields.io/github/license/juanmc2005/StreamingSpeakerDiarization?color=g\">\n</p>\n\n<div align=\"center\">\n  <h4>\n    <a href=\"#installation\">\n      Installation\n    </a>\n    <span> | </span>\n    <a href=\"#stream-audio\">\n      Stream audio\n    </a>\n    <span> | </span>\n    <a href=\"#custom-models\">\n      Custom models\n    </a>\n    <span> | </span>\n    <a href=\"#tune-hyper-parameters\">\n      Tune hyper-parameters\n    </a>\n    <span> | </span>\n    <a href=\"#build-pipelines\">\n      Build pipelines\n    </a>\n    <br/>\n    <a href=\"#websockets\">\n      WebSockets\n    </a>\n    <span> | </span>\n    <a href=\"#powered-by-research\">\n      Research\n    </a>\n    <span> | </span>\n    <a href=\"#citation\">\n      Citation\n    </a>\n    <span> | </span>\n    <a href=\"#reproducibility\">\n      Reproducibility\n    </a>\n  </h4>\n</div>\n\n<br/>\n\n<p align=\"center\">\n<img width=\"100%\" src=\"/demo.gif\" title=\"Real-time diarization example\" />\n</p>\n\n## Installation\n\n1) Create environment:\n\n```shell\nconda create -n diart python=3.8\nconda activate diart\n```\n\n2) Install `PortAudio` and `soundfile`:\n\n```shell\nconda install portaudio\nconda install pysoundfile -c conda-forge\n```\n\n3) [Install PyTorch >= 1.12.1](https://pytorch.org/get-started/locally/#start-locally)\n\n4) Install diart:\n```shell\npip install diart\n```\n\n### Get access to pyannote models\n\nBy default, diart is based on [pyannote.audio](https://github.com/pyannote/pyannote-audio) models stored in the [huggingface](https://huggingface.co/) hub.\nTo allow diart to use them, you need to follow these steps:\n\n1) [Accept user conditions](https://huggingface.co/pyannote/segmentation) for the `pyannote/segmentation` model\n2) [Accept user conditions](https://huggingface.co/pyannote/embedding) for the `pyannote/embedding` model\n3) Install [huggingface-cli](https://huggingface.co/docs/huggingface_hub/quick-start#install-the-hub-library) and [log in](https://huggingface.co/docs/huggingface_hub/quick-start#login) with your user access token (or provide it manually in diart CLI or API).\n\n## Stream audio\n\n### From the command line\n\nA recorded conversation:\n\n```shell\ndiart.stream /path/to/audio.wav\n```\n\nA live conversation:\n\n```shell\ndiart.stream microphone\n```\n\nSee `diart.stream -h` for more options.\n\n### From python\n\nUse `RealTimeInference` to easily run a pipeline on an audio source and write the results to disk:\n\n```python\nfrom diart import OnlineSpeakerDiarization\nfrom diart.sources import MicrophoneAudioSource\nfrom diart.inference import RealTimeInference\nfrom diart.sinks import RTTMWriter\n\npipeline = OnlineSpeakerDiarization()\nmic = MicrophoneAudioSource(pipeline.config.sample_rate)\ninference = RealTimeInference(pipeline, mic, do_plot=True)\ninference.attach_observers(RTTMWriter(mic.uri, \"/output/file.rttm\"))\nprediction = inference()\n```\n\nFor inference and evaluation on a dataset we recommend to use `Benchmark` (see notes on [reproducibility](#reproducibility)).\n\n## Custom models\n\nThird-party models can be integrated seamlessly by subclassing `SegmentationModel` and `EmbeddingModel`:\n\n```python\nimport torch\nfrom typing import Optional\nfrom diart import OnlineSpeakerDiarization, PipelineConfig\nfrom diart.models import EmbeddingModel\nfrom diart.sources import MicrophoneAudioSource\nfrom diart.inference import RealTimeInference\n\nclass MyEmbeddingModel(EmbeddingModel):\n    def __init__(self):\n        super().__init__()\n        self.my_pretrained_model = load(\"my_model.ckpt\")\n    \n    def __call__(\n        self,\n        waveform: torch.Tensor,\n        weights: Optional[torch.Tensor] = None\n    ) -> torch.Tensor:\n        return self.my_pretrained_model(waveform, weights)\n\nconfig = PipelineConfig(embedding=MyEmbeddingModel())\npipeline = OnlineSpeakerDiarization(config)\nmic = MicrophoneAudioSource(config.sample_rate)\ninference = RealTimeInference(pipeline, mic)\nprediction = inference()\n```\n\n## Tune hyper-parameters\n\nDiart implements a hyper-parameter optimizer based on [optuna](https://optuna.readthedocs.io/en/stable/index.html) that allows you to tune any pipeline to any dataset.\n\n### From the command line\n\n```shell\ndiart.tune /wav/dir --reference /rttm/dir --output /output/dir\n```\n\nSee `diart.tune -h` for more options.\n\n### From python\n\n```python\nfrom diart.optim import Optimizer\n\noptimizer = Optimizer(\"/wav/dir\", \"/rttm/dir\", \"/output/dir\")\noptimizer(num_iter=100)\n```\n\nThis will write results to an sqlite database in `/output/dir`.\n\n### Distributed optimization\n\nFor bigger datasets, it is sometimes more convenient to run multiple optimization processes in parallel.\nTo do this, create a study on a [recommended DBMS](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/004_distributed.html#sphx-glr-tutorial-10-key-features-004-distributed-py) (e.g. MySQL or PostgreSQL) making sure that the study and database names match:\n\n```shell\nmysql -u root -e \"CREATE DATABASE IF NOT EXISTS example\"\noptuna create-study --study-name \"example\" --storage \"mysql://root@localhost/example\"\n```\n\nYou can now run multiple identical optimizers pointing to this database:\n\n```shell\ndiart.tune /wav/dir --reference /rttm/dir --storage mysql://root@localhost/example\n```\n\nor in python:\n\n```python\nfrom diart.optim import Optimizer\nfrom optuna.samplers import TPESampler\nimport optuna\n\ndb = \"mysql://root@localhost/example\"\nstudy = optuna.load_study(\"example\", db, TPESampler())\noptimizer = Optimizer(\"/wav/dir\", \"/rttm/dir\", study)\noptimizer(num_iter=100)\n```\n\n## Build pipelines\n\nFor a more advanced usage, diart also provides building blocks that can be combined to create your own pipeline.\nStreaming is powered by [RxPY](https://github.com/ReactiveX/RxPY), but the `blocks` module is completely independent and can be used separately.\n\n### Example\n\nObtain overlap-aware speaker embeddings from a microphone stream:\n\n```python\nimport rx.operators as ops\nimport diart.operators as dops\nfrom diart.sources import MicrophoneAudioSource\nfrom diart.blocks import SpeakerSegmentation, OverlapAwareSpeakerEmbedding\n\nsegmentation = SpeakerSegmentation.from_pyannote(\"pyannote/segmentation\")\nembedding = OverlapAwareSpeakerEmbedding.from_pyannote(\"pyannote/embedding\")\nsample_rate = segmentation.model.get_sample_rate()\nmic = MicrophoneAudioSource(sample_rate)\n\nstream = mic.stream.pipe(\n    # Reformat stream to 5s duration and 500ms shift\n    dops.rearrange_audio_stream(sample_rate=sample_rate),\n    ops.map(lambda wav: (wav, segmentation(wav))),\n    ops.starmap(embedding)\n).subscribe(on_next=lambda emb: print(emb.shape))\n\nmic.read()\n```\n\nOutput:\n\n```\n# Shape is (batch_size, num_speakers, embedding_dim)\ntorch.Size([1, 3, 512])\ntorch.Size([1, 3, 512])\ntorch.Size([1, 3, 512])\n...\n```\n\n## WebSockets\n\nDiart is also compatible with the WebSocket protocol to serve pipelines on the web.\n\nIn the following example we build a minimal server that receives audio chunks and sends back predictions in RTTM format:\n\n```python\nfrom diart import OnlineSpeakerDiarization\nfrom diart.sources import WebSocketAudioSource\nfrom diart.inference import RealTimeInference\n\npipeline = OnlineSpeakerDiarization()\nsource = WebSocketAudioSource(pipeline.config.sample_rate, \"localhost\", 7007)\ninference = RealTimeInference(pipeline, source, do_plot=True)\ninference.attach_hooks(lambda ann_wav: source.send(ann_wav[0].to_rttm()))\nprediction = inference()\n```\n\n## Powered by research\n\nDiart is the official implementation of the paper *[Overlap-aware low-latency online speaker diarization based on end-to-end local segmentation](/paper.pdf)* by [Juan Manuel Coria](https://juanmc2005.github.io/), [HervÃ© Bredin](https://herve.niderb.fr), [Sahar Ghannay](https://saharghannay.github.io/) and [Sophie Rosset](https://perso.limsi.fr/rosset/).\n\n\n> We propose to address online speaker diarization as a combination of incremental clustering and local diarization applied to a rolling buffer updated every 500ms. Every single step of the proposed pipeline is designed to take full advantage of the strong ability of a recently proposed end-to-end overlap-aware segmentation to detect and separate overlapping speakers. In particular, we propose a modified version of the statistics pooling layer (initially introduced in the x-vector architecture) to give less weight to frames where the segmentation model predicts simultaneous speakers. Furthermore, we derive cannot-link constraints from the initial segmentation step to prevent two local speakers from being wrongfully merged during the incremental clustering step. Finally, we show how the latency of the proposed approach can be adjusted between 500ms and 5s to match the requirements of a particular use case, and we provide a systematic analysis of the influence of latency on the overall performance (on AMI, DIHARD and VoxConverse).\n\n<p align=\"center\">\n<img height=\"400\" src=\"/figure1.png\" title=\"Visual explanation of the system\" width=\"325\" />\n</p>\n\n## Citation\n\nIf you found diart useful, please make sure to cite our paper:\n\n```bibtex\n@inproceedings{diart,  \n  author={Coria, Juan M. and Bredin, HervÃ© and Ghannay, Sahar and Rosset, Sophie},  \n  booktitle={2021 IEEE Automatic Speech Recognition and Understanding Workshop (ASRU)},   \n  title={Overlap-Aware Low-Latency Online Speaker Diarization Based on End-to-End Local Segmentation}, \n  year={2021},\n  pages={1139-1146},\n  doi={10.1109/ASRU51503.2021.9688044},\n}\n```\n\n##  Reproducibility\n\n![Results table](/table1.png)\n\nDiart aims to be lightweight and capable of real-time streaming in practical scenarios.\nIts performance is very close to what is reported in the paper (and sometimes even a bit better).\n\nTo obtain the best results, make sure to use the following hyper-parameters:\n\n| Dataset     | latency | tau    | rho    | delta |\n|-------------|---------|--------|--------|-------|\n| DIHARD III  | any     | 0.555  | 0.422  | 1.517 |\n| AMI         | any     | 0.507  | 0.006  | 1.057 |\n| VoxConverse | any     | 0.576  | 0.915  | 0.648 |\n| DIHARD II   | 1s      | 0.619  | 0.326  | 0.997 |\n| DIHARD II   | 5s      | 0.555  | 0.422  | 1.517 |\n\n`diart.benchmark` and `diart.inference.Benchmark` can run, evaluate and measure the real-time latency of the pipeline. For instance, for a DIHARD III configuration:\n\n```shell\ndiart.benchmark /wav/dir --reference /rttm/dir --tau=0.555 --rho=0.422 --delta=1.517 --segmentation pyannote/segmentation@Interspeech2021\n```\n\nor using the inference API:\n\n```python\nfrom diart.inference import Benchmark\nfrom diart import OnlineSpeakerDiarization, PipelineConfig\nfrom diart.models import SegmentationModel\n\nconfig = PipelineConfig(\n    # Set the model used in the paper\n    segmentation=SegmentationModel.from_pyannote(\"pyannote/segmentation@Interspeech2021\"),\n    step=0.5,\n    latency=0.5,\n    tau_active=0.555,\n    rho_update=0.422,\n    delta_new=1.517\n)\npipeline = OnlineSpeakerDiarization(config)\nbenchmark = Benchmark(\"/wav/dir\", \"/rttm/dir\")\nbenchmark(pipeline)\n```\n\nThis pre-calculates model outputs in batches, so it runs a lot faster.\nSee `diart.benchmark -h` for more options.\n\nFor convenience and to facilitate future comparisons, we also provide the [expected outputs](/expected_outputs) of the paper implementation in RTTM format for every entry of Table 1 and Figure 5. This includes the VBx offline topline as well as our proposed online approach with latencies 500ms, 1s, 2s, 3s, 4s, and 5s.\n\n![Figure 5](/figure5.png)\n\n##  License\n\n```\nMIT License\n\nCopyright (c) 2021 UniversitÃ© Paris-Saclay\nCopyright (c) 2021 CNRS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n<p>Logo generated by <a href=\"https://www.designevo.com/\" title=\"Free Online Logo Maker\">DesignEvo free logo designer</a></p>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/juanmc2005/StreamingSpeakerDiarization",
    "keywords": "speaker diarization,streaming,online,real time,rxpy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diart",
    "package_url": "https://pypi.org/project/diart/",
    "platform": null,
    "project_url": "https://pypi.org/project/diart/",
    "project_urls": {
      "Homepage": "https://github.com/juanmc2005/StreamingSpeakerDiarization"
    },
    "release_url": "https://pypi.org/project/diart/0.6.0/",
    "requires_dist": [
      "numpy (>=1.20.2)",
      "matplotlib (>=3.3.3)",
      "rx (>=3.2.0)",
      "scipy (>=1.6.0)",
      "sounddevice (>=0.4.2)",
      "einops (>=0.3.0)",
      "tqdm (>=4.64.0)",
      "pandas (>=1.4.2)",
      "torch (>=1.12.1)",
      "torchaudio (<1.0,>=0.12.1)",
      "pyannote.audio (>=2.1.1)",
      "pyannote.core (>=4.5)",
      "pyannote.database (>=4.1.1)",
      "pyannote.metrics (>=3.2)",
      "optuna (>=2.10)",
      "websockets (>=10.3)"
    ],
    "requires_python": "",
    "summary": "Speaker diarization in real time",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15594818,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb981aa16e8dd86f5f3402729eb06cadbe6de04899f23f554e9c6c1790f172b1",
          "md5": "1944f2bfc6df2a2351130497dec4170a",
          "sha256": "aba382ed345f736a74992fe88f0524279d6fdee560ab6fbbbd332fd9af0ad975"
        },
        "downloads": -1,
        "filename": "diart-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1944f2bfc6df2a2351130497dec4170a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18320,
        "upload_time": "2021-12-15T09:18:01",
        "upload_time_iso_8601": "2021-12-15T09:18:01.748896Z",
        "url": "https://files.pythonhosted.org/packages/cb/98/1aa16e8dd86f5f3402729eb06cadbe6de04899f23f554e9c6c1790f172b1/diart-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d61451cfdb2d50058aa2bfaf989cc85d87c0b77efe2db4eb6b9d45860ce1afca",
          "md5": "11e55886c035f1786eb87d884d397620",
          "sha256": "be3bdf6c47a444332e29277deeb3dca211e51fac855e0ae5a4ee76f4b21a8e62"
        },
        "downloads": -1,
        "filename": "diart-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11e55886c035f1786eb87d884d397620",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18337,
        "upload_time": "2021-12-15T09:18:03",
        "upload_time_iso_8601": "2021-12-15T09:18:03.922137Z",
        "url": "https://files.pythonhosted.org/packages/d6/14/51cfdb2d50058aa2bfaf989cc85d87c0b77efe2db4eb6b9d45860ce1afca/diart-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d448ddfa5b71a52e7e1321f92699ca149bb2ae9aba4ec2739199c36f66994146",
          "md5": "0b972a711ec68199b671425e121cf8d5",
          "sha256": "db040e876a238c9bbab88b3f27e3ded4bcd982a2229f061e834a0bd7a01d4d5d"
        },
        "downloads": -1,
        "filename": "diart-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b972a711ec68199b671425e121cf8d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22733,
        "upload_time": "2022-01-07T19:35:28",
        "upload_time_iso_8601": "2022-01-07T19:35:28.168769Z",
        "url": "https://files.pythonhosted.org/packages/d4/48/ddfa5b71a52e7e1321f92699ca149bb2ae9aba4ec2739199c36f66994146/diart-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ff22b6f00c4d6dd5fc3edd55059f90cf87a49a540824ee1c2051105562ea745",
          "md5": "e957873a7d5e09d42a2c898f997a1e3a",
          "sha256": "bd351670bc1dbe52a1ea7d3de60ce3e0bc29b1e12187075c89cb235b56524daf"
        },
        "downloads": -1,
        "filename": "diart-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e957873a7d5e09d42a2c898f997a1e3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22670,
        "upload_time": "2022-01-07T19:35:30",
        "upload_time_iso_8601": "2022-01-07T19:35:30.012668Z",
        "url": "https://files.pythonhosted.org/packages/2f/f2/2b6f00c4d6dd5fc3edd55059f90cf87a49a540824ee1c2051105562ea745/diart-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57486dffe02b311e2a80c25aa729d2e3ad9516a32e4a7a48bd69a4badbca4532",
          "md5": "4fc88b880af87a5e63be681d857c2b25",
          "sha256": "9d73f832850c10d40469c2bd374ba59733f393d1c438fde46d2c06679788ce71"
        },
        "downloads": -1,
        "filename": "diart-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fc88b880af87a5e63be681d857c2b25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22760,
        "upload_time": "2022-01-26T07:21:41",
        "upload_time_iso_8601": "2022-01-26T07:21:41.587063Z",
        "url": "https://files.pythonhosted.org/packages/57/48/6dffe02b311e2a80c25aa729d2e3ad9516a32e4a7a48bd69a4badbca4532/diart-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3014d0476f1fe3f07ef0f14020483baf793c4336eeafcdb34cd61adb991ad88",
          "md5": "80d23a9e65b4bec9909a38d1fc1a261c",
          "sha256": "0c0726eed6578690804e44d2ba9cc625577efe329bf13c62a348faa284fab380"
        },
        "downloads": -1,
        "filename": "diart-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80d23a9e65b4bec9909a38d1fc1a261c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22709,
        "upload_time": "2022-01-26T07:21:43",
        "upload_time_iso_8601": "2022-01-26T07:21:43.392339Z",
        "url": "https://files.pythonhosted.org/packages/e3/01/4d0476f1fe3f07ef0f14020483baf793c4336eeafcdb34cd61adb991ad88/diart-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "550db0727dea7c00b268612177f077d95904101cbef2a49f812c9246939f2910",
          "md5": "a3076edb48f8bcdd7051cc57f368d9bc",
          "sha256": "54900b9f7058da6acb46ce675c2127af0737ba4bed3d2dc4f7821f7180048af8"
        },
        "downloads": -1,
        "filename": "diart-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3076edb48f8bcdd7051cc57f368d9bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29624,
        "upload_time": "2022-05-20T20:17:48",
        "upload_time_iso_8601": "2022-05-20T20:17:48.814603Z",
        "url": "https://files.pythonhosted.org/packages/55/0d/b0727dea7c00b268612177f077d95904101cbef2a49f812c9246939f2910/diart-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dee0572d1ef750076c92c24fe77623b1da69436cb11d37cb0e79def682e4691",
          "md5": "185a6b0b23299d204ec379e826f06f79",
          "sha256": "7242f809214b9887bd2f0989cd8f6d87b520d3601de4211819ff032f9f61fbfe"
        },
        "downloads": -1,
        "filename": "diart-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "185a6b0b23299d204ec379e826f06f79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28735,
        "upload_time": "2022-05-20T20:17:51",
        "upload_time_iso_8601": "2022-05-20T20:17:51.164224Z",
        "url": "https://files.pythonhosted.org/packages/0d/ee/0572d1ef750076c92c24fe77623b1da69436cb11d37cb0e79def682e4691/diart-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0b9038f283078437fddaba0477177981b0a4f12cb3be0290a09a5c0f456887b",
          "md5": "318a53cd319c29e64c250c184803fa95",
          "sha256": "98540c72cd8f43b792ca76d358a17646e74423186015b544ac7fcca8e40387bd"
        },
        "downloads": -1,
        "filename": "diart-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "318a53cd319c29e64c250c184803fa95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39756,
        "upload_time": "2022-07-13T12:57:25",
        "upload_time_iso_8601": "2022-07-13T12:57:25.924953Z",
        "url": "https://files.pythonhosted.org/packages/d0/b9/038f283078437fddaba0477177981b0a4f12cb3be0290a09a5c0f456887b/diart-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36b4ae53ed25f85b0a33c8b55cd419300e39320d2507ca40da366fbe99d8de48",
          "md5": "21d1a6e15e4a4bc9ec138b1a4f81b459",
          "sha256": "33ec8739e4878db0a0075da90856840172e737d61b45c19c199668e5f508c296"
        },
        "downloads": -1,
        "filename": "diart-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21d1a6e15e4a4bc9ec138b1a4f81b459",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36494,
        "upload_time": "2022-07-13T12:57:27",
        "upload_time_iso_8601": "2022-07-13T12:57:27.944901Z",
        "url": "https://files.pythonhosted.org/packages/36/b4/ae53ed25f85b0a33c8b55cd419300e39320d2507ca40da366fbe99d8de48/diart-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96a640defcef622ac9e6fb2a92f93730fa54bf8eaf3a817045368f198b801aa6",
          "md5": "2055eb80b5f460227feebab1c95fc020",
          "sha256": "375b1217a246665404d2a4ad514dab2f85691298a879f5e6da6c7df3a6eb9d25"
        },
        "downloads": -1,
        "filename": "diart-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2055eb80b5f460227feebab1c95fc020",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42793,
        "upload_time": "2022-08-31T12:14:54",
        "upload_time_iso_8601": "2022-08-31T12:14:54.805395Z",
        "url": "https://files.pythonhosted.org/packages/96/a6/40defcef622ac9e6fb2a92f93730fa54bf8eaf3a817045368f198b801aa6/diart-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5f8e2ac5fc605cf03d8921cee801908e156c8fc066e86f72d0e2e231dde1178",
          "md5": "e207c4f328938bd202ca556c79b146d3",
          "sha256": "0382ad3a878310a4e2e53c7b4f68779d14f2844fb2a9df2e1a09b7109ee5bbd6"
        },
        "downloads": -1,
        "filename": "diart-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e207c4f328938bd202ca556c79b146d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39094,
        "upload_time": "2022-08-31T12:14:57",
        "upload_time_iso_8601": "2022-08-31T12:14:57.278108Z",
        "url": "https://files.pythonhosted.org/packages/c5/f8/e2ac5fc605cf03d8921cee801908e156c8fc066e86f72d0e2e231dde1178/diart-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9b909d89c8eb752aa95a53b5eb1b965897f05812a3110e2224615914e6fcc6a",
          "md5": "edc1b22be39309d285180e0303052e2d",
          "sha256": "51dfacfbc99b3928505a1fc0c8af602dc74f79b814ea253b17399a652e0ab43f"
        },
        "downloads": -1,
        "filename": "diart-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edc1b22be39309d285180e0303052e2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 42799,
        "upload_time": "2022-08-31T15:28:06",
        "upload_time_iso_8601": "2022-08-31T15:28:06.605553Z",
        "url": "https://files.pythonhosted.org/packages/a9/b9/09d89c8eb752aa95a53b5eb1b965897f05812a3110e2224615914e6fcc6a/diart-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "753864741bb15305a7fcf0c2e2b49229bb6df26a137c6518bae6d97803f6646e",
          "md5": "1fe9f849a34d28fc4fdff8e78e77fedc",
          "sha256": "265dd20d7c63938ec97cdeb3d1a4ee784ce027f7dd6f4b50769d9b9207f95c17"
        },
        "downloads": -1,
        "filename": "diart-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1fe9f849a34d28fc4fdff8e78e77fedc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39139,
        "upload_time": "2022-08-31T15:28:09",
        "upload_time_iso_8601": "2022-08-31T15:28:09.080381Z",
        "url": "https://files.pythonhosted.org/packages/75/38/64741bb15305a7fcf0c2e2b49229bb6df26a137c6518bae6d97803f6646e/diart-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc8523c38160afa840413063ff5ab9a0e007ec9ad3bcd31acb0f63a6a4fac73e",
          "md5": "f663639f173fb55b0b0988b2615ef110",
          "sha256": "aa811ec0d10116ef4cb125b4c2cd9520548ba6c4644ad3ea37b00b84bacad0e1"
        },
        "downloads": -1,
        "filename": "diart-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f663639f173fb55b0b0988b2615ef110",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 44156,
        "upload_time": "2022-10-31T10:46:14",
        "upload_time_iso_8601": "2022-10-31T10:46:14.829110Z",
        "url": "https://files.pythonhosted.org/packages/fc/85/23c38160afa840413063ff5ab9a0e007ec9ad3bcd31acb0f63a6a4fac73e/diart-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ce3f80d44bd3da3646e661e6055beb16166677acb06e03cf14f9ccbee4d6d5",
          "md5": "2646d6b4cc811e61fcbc9221be370e71",
          "sha256": "57ff09cf36248ce859b36d55f9758621ea9f6d589a9af199b52d4f038f7a98b2"
        },
        "downloads": -1,
        "filename": "diart-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2646d6b4cc811e61fcbc9221be370e71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40201,
        "upload_time": "2022-10-31T10:46:16",
        "upload_time_iso_8601": "2022-10-31T10:46:16.746244Z",
        "url": "https://files.pythonhosted.org/packages/a7/ce/3f80d44bd3da3646e661e6055beb16166677acb06e03cf14f9ccbee4d6d5/diart-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc8523c38160afa840413063ff5ab9a0e007ec9ad3bcd31acb0f63a6a4fac73e",
        "md5": "f663639f173fb55b0b0988b2615ef110",
        "sha256": "aa811ec0d10116ef4cb125b4c2cd9520548ba6c4644ad3ea37b00b84bacad0e1"
      },
      "downloads": -1,
      "filename": "diart-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f663639f173fb55b0b0988b2615ef110",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 44156,
      "upload_time": "2022-10-31T10:46:14",
      "upload_time_iso_8601": "2022-10-31T10:46:14.829110Z",
      "url": "https://files.pythonhosted.org/packages/fc/85/23c38160afa840413063ff5ab9a0e007ec9ad3bcd31acb0f63a6a4fac73e/diart-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7ce3f80d44bd3da3646e661e6055beb16166677acb06e03cf14f9ccbee4d6d5",
        "md5": "2646d6b4cc811e61fcbc9221be370e71",
        "sha256": "57ff09cf36248ce859b36d55f9758621ea9f6d589a9af199b52d4f038f7a98b2"
      },
      "downloads": -1,
      "filename": "diart-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2646d6b4cc811e61fcbc9221be370e71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40201,
      "upload_time": "2022-10-31T10:46:16",
      "upload_time_iso_8601": "2022-10-31T10:46:16.746244Z",
      "url": "https://files.pythonhosted.org/packages/a7/ce/3f80d44bd3da3646e661e6055beb16166677acb06e03cf14f9ccbee4d6d5/diart-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}