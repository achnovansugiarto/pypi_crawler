{
  "info": {
    "author": "",
    "author_email": "AT0myks <at0myks.dev@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Communications :: Fax",
      "Topic :: Communications :: Telephony",
      "Topic :: Multimedia :: Sound/Audio :: Capture/Recording",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# pycallblock\r\n\r\n<p align=\"left\">\r\n<a><img alt=\"Python versions\" src=\"https://img.shields.io/pypi/pyversions/pycallblock\"></a>\r\n<a href=\"https://pypi.org/project/pycallblock/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/pycallblock\"></a>\r\n<a href=\"https://github.com/AT0myks/pycallblock/blob/main/LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/pypi/l/pycallblock\"></a>\r\n</p>\r\n\r\n* [Introduction](#introduction)\r\n* [Requirements](#requirements)\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n* [Block modes](#block-modes)\r\n* [Extended functionality](#extended-functionality)\r\n* [Notes](#notes)\r\n* [Glossary](#glossary)\r\n\r\n## Introduction\r\n\r\nThis project started in July 2020 after I finally decided\r\nto do something about those daily spam calls.\r\nI found [jcblock](https://sourceforge.net/projects/jcblock/),\r\nwhich inspired me to make my own version of a call blocker.\r\nSo I bought a cheap modem and found a manual online.\r\nI had no idea how all of this worked and it took some time to get used\r\nto the modem and how to properly use it.\r\nSeeing the caller ID show up for the first time in the terminal was very satisfying.\r\nThen I found out that you can also use the modem to record the calls\r\nand even send audio, and you basically get a phone controlled by software.\r\nAfter a few years of successful blocking and some upgrades,\r\nit's time for this project to be made public so that you can enjoy a silent\r\nphone while the scammers are listening to the audio files you prepared for them.\r\n\r\n## Requirements\r\n\r\n### Hardware\r\n\r\nYou need a computer and a USB modem. I use a Raspberry Pi Zero.\r\nIn theory it should work with any\r\n[AT](https://en.wikipedia.org/wiki/Hayes_command_set) modem,\r\nbut I have not tested anything else than the Conexant based ones I have,\r\nso I cannot guarantee that different models will work.\r\nThe modem must support caller ID, and voice mode if you want to use the voice features.\r\nUnfortunately you can't really be sure of the modem's capabilities before you plug it in.\r\n\r\nOnly hardware modems are supported, this is not compatible with softmodems.\r\n\r\nHere are the results of `lsusb` for two modems that I have:\r\n```\r\n0572:1340 Conexant Systems (Rockwell), Inc. USB Modem\r\n0572:1340 Conexant Systems (Rockwell), Inc.\r\n```\r\nThey both look like [this](https://www.aliexpress.com/item/32974192089.html).\r\nIt used to be easy to find them for pretty cheap on sites\r\nlike eBay and AliExpress but it seems like\r\nthat's not the case anymore, unfortunately.\r\n\r\nIf you have a wireless phone I guess you can use a one port modem.\r\nIf your phone is wired you'll need a modem with two ports.\r\n\r\nOnce you plug it in, the modem should show up as something like `/dev/ttyACM0`\r\n(this the default device in pycallblock).\r\n\r\nInstalling pycallblock will install\r\n[pyserial](https://github.com/pyserial/pyserial)\r\nwhich comes with \r\n[`pyserial-ports`](https://pyserial.readthedocs.io/en/latest/tools.html#module-serial.tools.list_ports)\r\nand\r\n[`pyserial-miniterm`](https://pyserial.readthedocs.io/en/latest/tools.html#module-serial.tools.miniterm).\r\nYou can use this first command to find serial ports\r\nand the second one to test your device.\r\n\r\nHere's the output in my case:\r\n```\r\n$ pyserial-ports -v\r\n/dev/ttyACM0\r\n    desc: USB Modem\r\n    hwid: USB VID:PID=0572:1340 SER=12345678 LOCATION=1-1:1.0\r\n```\r\n\r\n### Software\r\n\r\nLinux and Python 3.9+.\r\n\r\nI did not test it on Windows, but if you can interface with the modem\r\njust like you can do on Linux, and if the code is compatible,\r\nthere should be no reason for it not to work.\r\nOn Linux you'll probably have to add your user to the `dialout` group\r\nby doing `sudo usermod -a -G dialout youruser` and then logging out and in again.\r\n\r\n## Installation\r\n\r\n```\r\npip install pycallblock\r\n```\r\n\r\n## Usage\r\n\r\npycallblock comes with a CLI:\r\n\r\n```\r\noptional arguments:\r\n  -h, --help                  show this help message and exit\r\n  -V, --version               print version\r\n  --device DEV                the device to use. Default: /dev/ttyACM0\r\n  --logfile FILE              enable logging to the specified file\r\n  --syslog [ADDRESS]          enable logging to syslog. Default: /dev/log\r\n  -p, --block-private         block private numbers. Default: false\r\n  -l, --stderr                log to stderr\r\n  -s SEC, --silence SEC       seconds of silence before triggering the callback. Only for duplex. Must be an int or a float > 0. Default: disabled\r\n  -v, --verbose               increase verbosity\r\n  -a FILE, --audio-file FILE  WAV file for -m, -d and -t modes\r\n  --timezone TIMEZONE         IANA timezone for the file names. Default: UTC\r\n  -b CSV, --blacklist CSV     CSV file with the contacts that will be blocked\r\n  -w CSV, --whitelist CSV     CSV file with the contacts that will be allowed\r\n\r\nBlock actions:\r\n  Choose what happens when a call is blocked. If nothing is specified, default to instant hangup.\r\n\r\n  -f, --fax                   act as a fax machine\r\n  -m, --message               play a message specified with -a\r\n  -r [SEC], --record [SEC]    record the call for SEC seconds. Default: 120\r\n  -d [SEC], --duplex [SEC]    duplex for SEC seconds. Default: 120\r\n  -t [SEC], --transmit [SEC]  transmit for SEC seconds. Default: 120\r\n```\r\n\r\nWhen you run pycallblock for the first time, it will create a `pycallblock`\r\ndirectory in the user's home.\r\nInside, the database for logging the calls will be created\r\nalong with the `play` and `rec` directories.\r\nThe recordings will go in `rec`, and in `play` you can put your WAV files\r\nto be randomly sent in duplex mode.\r\nThis is also where you can put your CSV file that contains blocked/allowed contacts.\r\nThe expected separator for the CSV file is the comma.\r\nIf you don't have a name for a contact, you must still put a comma after the number.\r\nIf you want to have a comma in the name, use double quotes around the name.\r\nExample:\r\n```\r\n01234,\r\n56789,Ben\r\n5055034455,\"Look, there's a comma\"\r\n```\r\nIf your block/allow list is empty, every call will be allowed/blocked respectively.\r\n\r\nThe recordings will be named according to the following format:\r\n`%Y-%m-%d %H-%M-%S%z NUMBER`. The default timezone is UTC.\r\nIf you want your files to be named according to your local time,\r\nset a [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\r\nwith `--timezone`.\r\nOn Windows you might need the [tzdata](https://pypi.org/project/tzdata/) package.\r\n\r\n### Recording WAV files\r\n\r\nThe audio must be unsigned PCM, mono, 8bit, at 8000Hz.\r\nI use [Audacity](https://www.audacityteam.org/) to record the WAV files.\r\nIn the bottom left corner set the `Project Rate` to 8000Hz,\r\nand record your audio.\r\nWhen exporting, choose `Other uncompressed files` then `WAV (Microsoft)`\r\nand `Unsigned 8-bit PCM` and set the output channels to 1.\r\nThen you can put the file in `play` and test it to see if it plays correctly.\r\n\r\nIt's also possible to use Audacity to convert an existing file by going to\r\n`Tracks -> Resample...`, choosing 8000Hz and exporting as described above.\r\n\r\n### Run as a service\r\n\r\nSee the [example file](https://github.com/AT0myks/pycallblock/blob/main/pycallblock.service).\r\nYou can add the `--syslog` argument to the command and then do\r\n`journalctl -t pycallblock` or `journalctl -u pycallblock` to see the logs.\r\nDo not use both `--syslog` and `--stderr` in this case.\r\n\r\n## Block modes\r\n\r\n### Default behaviour\r\n\r\nInstantly hang up.\r\nThe caller's device might keep ringing,\r\nbut nothing should happen on your end.\r\nAdding a delay before hanging up should help, in case that's what you want.\r\n\r\n### Fax machine\r\n\r\nThe modem will act as a fax machine and play the\r\n[CED tone](https://www.youtube.com/watch?v=6v4GDjenyZE).\r\n\r\n### Play an audio file\r\n\r\nPlay a WAV file and hang up.\r\n\r\n### Transmit\r\n\r\nSend audio until the timeout is reached or the caller hangs up.\r\nIf you want to play an audio file after picking up, use the `-a` option.\r\nIn this mode, DTMFs are received.\r\nThis means that you could for example execute a certain action\r\n(like playing a WAV file) when a specific button is pressed,\r\njust like [IVR](https://en.wikipedia.org/wiki/Interactive_voice_response).\r\nNot the most interesting mode for blocking calls, but it might have its use cases.\r\n\r\n### Record\r\n\r\nRecord the call until the timeout is reached or the caller hangs up.\r\nDTMFs are received, but because there's no transmit,\r\nyou can't send any audio back.\r\n\r\n### Duplex\r\n\r\nRecord + transmit. Recording alone can already give entertaining results,\r\nbut sometimes if there's no sound after the robot picks up, it will drop the call.\r\nLike with transmit, you can set an audio file to be played at pick up.\r\nIf you enable silence detection with `-s`, a random file from the \r\n`play` directory will be played after the specified amount of seconds\r\nof silence has been reached.\r\nThe recording will contain the audio that is sent.\r\n\r\n## Extended functionality\r\n\r\nThe default functionality should already be enough for most.\r\nBut you can also build on top of pycallblock to make your own call blocker.\r\n\r\nIf you choose to do this, you'll have to write your own code to run the program.\r\nIt's only a few lines that you can find at the bottom of\r\n[`__init__.py`](https://github.com/AT0myks/pycallblock/blob/main/pycallblock/__init__.py).\r\n\r\n### Callbacks\r\n\r\nThe main way is by making your own subclass of `Callblock`\r\nand overriding the callbacks.\r\n\r\n```py\r\nfrom pycallblock import Callblock\r\n\r\nclass MyCallblock(Callblock):\r\n\r\n    async def ring_callback(self, event):  # awaited in the modem's event loop\r\n        # Choose what happens when the phone rings\r\n\r\n    async def call_callback(self, call):  # awaited in the modem's event loop\r\n        # Choose what happens when you receive a call\r\n\r\n    async def mesg_callback(self, event):  # awaited in the modem's event loop\r\n        # Choose what happens when you receive a MESG event\r\n\r\n    async def dtmf_callback(self, dtmf):  # runs as a task\r\n        # Choose what happens when you receive a DTMF during a call\r\n\r\n    async def silence_callback(self):  # runs as a task\r\n        # Choose what happens when silence has been detected\r\n```\r\nIn case you want to reuse the same CLI and options, two functions are available:\r\n```py\r\nfrom pycallblock import cli, options_from_args\r\nfrom pycallblock.modem import Modem\r\n\r\nargs = cli()\r\noptions = options_from_args(args)\r\nasync with Modem(\"/dev/ttyACM0\") as modem:\r\n    mycallblock = MyCallblock(modem, ..., options=options)\r\n```\r\n\r\n### Also, you can make calls\r\n\r\n```py\r\nfrom pycallblock.modem import Modem, Mode\r\n\r\nasync with Modem(\"/dev/ttyACM0\") as modem:\r\n    wav = \"outgoing.wav\"  # Record to a file\r\n    await modem.set_mode(Mode.VOICE)\r\n    await modem.send(\"AT+VSM=1\")\r\n    await modem.start_voice_call(\"5055034455\", wav=wav, max_duration=30)\r\n    await modem.voice_end()\r\n    await modem.hang_up()\r\n```\r\n\r\n## Notes\r\n\r\nHere are some notes in no particular order.\r\n\r\n- there is always one ring before the caller ID is sent\r\n- your phone might have a setting to disable the first ring\r\n- sometimes the phone still rings a few times after the call is blocked\r\n- depending on your hardware, the recordings may contain annoying background noises\r\n- the modem may report \"fake\" DSCs (this is a limitation of the way the modem works)\r\n- I've had instances where the modem becomes unresponsive and I have to restart the Pi,\r\nor the Pi also crashes and reboots\r\n- sometimes the modem won't send BUSY after the caller hangs up,\r\nin that case the call will last as long as the timeout\r\n- for silence detection, as soon as there is noise the timer is reset\r\n- in the modes where TX is active,\r\nyou'll always see one `Received DSC: Transmit Buffer Underrun` in the logs\r\n- each call to `Modem.send_audio_file` puts the audio in a queue.\r\nEach file is played one by one.\r\nIf the queue is not empty when the call is ending,\r\nthe remaining files in the queue won't be played\r\n- `Callblock.start` installs a signal handler for `SIGINT` and `SIGTERM`.\r\nWhen one of these signals is received,\r\nthe pycallblock instance will be marked as not running\r\n- if a call is in progress when the program is exiting,\r\nthe call will terminate as soon as possible\r\n- the modem's green LED turns on while a call is in progress\r\n- the `+VSD` command for silence detection exists but does nothing,\r\nso I implemented a very basic silence detection on my own\r\n- I mostly used [this reference manual](https://web.archive.org/web/20160201002959/http://www.xmodus.ch/Downloads/XM3000S/XM3000S-A00-103.pdf)\r\n- the country codes (unused for now) come from [this one](https://datasheet.octopart.com/CX93010-21Z-Conexant-datasheet-20734837.pdf)\r\n\r\n## Glossary\r\n- DCE: [Data circuit-terminating equipment](https://en.wikipedia.org/wiki/Data_circuit-terminating_equipment)\r\n- DLE: Data link escape\r\n- DSC: DLE shielded code.\r\n- DTE: Data terminal equipment\r\n- DTMF: [Dual-tone multi-frequency](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling)\r\n- PVF: Portable voice format\r\n- RMD: Raw modem data\r\n- RX: Receive\r\n- TX: Transmit\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "modem,block,spam,phone,call",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycallblock",
    "package_url": "https://pypi.org/project/pycallblock/",
    "platform": null,
    "project_url": "https://pypi.org/project/pycallblock/",
    "project_urls": {
      "Issues": "https://github.com/AT0myks/pycallblock/issues",
      "Source": "https://github.com/AT0myks/pycallblock"
    },
    "release_url": "https://pypi.org/project/pycallblock/1.0.0/",
    "requires_dist": [
      "pyserial-asyncio"
    ],
    "requires_python": ">=3.9",
    "summary": "Block spam calls with a USB modem.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16884198,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80bbb981bffdd9354d0adae551fe5c9c8637397f83cf3c3ffd2956ea7f63f752",
          "md5": "202497e0439c7feeeb3edfbcd5a3c4b6",
          "sha256": "08b76f89eef6c634955d8f28121ff5f09fec33311cdea0259146c0f810fdd174"
        },
        "downloads": -1,
        "filename": "pycallblock-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "202497e0439c7feeeb3edfbcd5a3c4b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 31387,
        "upload_time": "2023-02-16T07:01:58",
        "upload_time_iso_8601": "2023-02-16T07:01:58.571732Z",
        "url": "https://files.pythonhosted.org/packages/80/bb/b981bffdd9354d0adae551fe5c9c8637397f83cf3c3ffd2956ea7f63f752/pycallblock-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc6e6870a928b489b4247f31fa8d571ce17a48fbc4ff82545aff4b21cd3c0d92",
          "md5": "2a6ef3059ab96f8301552a7e399840e1",
          "sha256": "9bab04714b112fa6de29862949b14bc8383c1846a6b0734fa662b53d8bfa0287"
        },
        "downloads": -1,
        "filename": "pycallblock-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a6ef3059ab96f8301552a7e399840e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 35262,
        "upload_time": "2023-02-16T07:01:59",
        "upload_time_iso_8601": "2023-02-16T07:01:59.982471Z",
        "url": "https://files.pythonhosted.org/packages/fc/6e/6870a928b489b4247f31fa8d571ce17a48fbc4ff82545aff4b21cd3c0d92/pycallblock-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80bbb981bffdd9354d0adae551fe5c9c8637397f83cf3c3ffd2956ea7f63f752",
        "md5": "202497e0439c7feeeb3edfbcd5a3c4b6",
        "sha256": "08b76f89eef6c634955d8f28121ff5f09fec33311cdea0259146c0f810fdd174"
      },
      "downloads": -1,
      "filename": "pycallblock-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "202497e0439c7feeeb3edfbcd5a3c4b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 31387,
      "upload_time": "2023-02-16T07:01:58",
      "upload_time_iso_8601": "2023-02-16T07:01:58.571732Z",
      "url": "https://files.pythonhosted.org/packages/80/bb/b981bffdd9354d0adae551fe5c9c8637397f83cf3c3ffd2956ea7f63f752/pycallblock-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc6e6870a928b489b4247f31fa8d571ce17a48fbc4ff82545aff4b21cd3c0d92",
        "md5": "2a6ef3059ab96f8301552a7e399840e1",
        "sha256": "9bab04714b112fa6de29862949b14bc8383c1846a6b0734fa662b53d8bfa0287"
      },
      "downloads": -1,
      "filename": "pycallblock-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2a6ef3059ab96f8301552a7e399840e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 35262,
      "upload_time": "2023-02-16T07:01:59",
      "upload_time_iso_8601": "2023-02-16T07:01:59.982471Z",
      "url": "https://files.pythonhosted.org/packages/fc/6e/6870a928b489b4247f31fa8d571ce17a48fbc4ff82545aff4b21cd3c0d92/pycallblock-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}