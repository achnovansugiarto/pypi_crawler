{
  "info": {
    "author": "Amazon AppFlow",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Amazon AppFlow Custom Connector SDK Development Guide\n\nAmazon AppFlow is a fully managed integration service that enables you to securely transfer data between Software-as-a-Service (SaaS) applications like Salesforce, SAP, Zendesk, Slack, and ServiceNow, and AWS services like Amazon S3 and Amazon Redshift, in just a few clicks. With AppFlow, you can run data flows at enterprise scale at the frequency you choose - on a schedule, in response to a business event, or on demand. You can configure data transformation capabilities like filtering and validation to generate rich, ready-to-use data as part of the flow itself, without additional steps. AppFlow automatically encrypts data in motion, and it allows users to restrict data from flowing over the public internet for SaaS applications that are integrated with AWS PrivateLink, reducing exposure to security threats. For more details about AppFlow, see https://aws.amazon.com/appflow/.\n\nThe AppFlow Custom Connector SDK enables customers and third party developers to build custom source and/or destination connectors for the AppFlow service. With the SDK, you can connect to private APIs, on-premise proprietary systems, and other cloud services by adding to AppFlow's library of connectors (https://aws.amazon.com/appflow/integrations/).   \n\nThe Amazon AppFlow Custom Connector SDK simplifies connector development through the use of a normalized interface and data model. It provides authentication, pagination, throttling, error handling, deployment scripts, and a test framework. Connectors developed with the SDK can be used privately, shared within your organization or partners, or published on AWS Marketplace (https://aws.amazon.com/marketplace).\n\nThis document is a guide for developing AppFlow custom connectors.  The SDK includes a complete working example of a sample connector in Python/Java.\n\n\n## What is an AppFlow 'Connector'?\nA connector translates the normalized AppFlow requests (read and write calls) to the requests compatible for the underlying application. The translation includes protocol, API format, query format, data model etc. Connectors support queries, partial queries (paginated) and write calls (insert, update, upsert and delete operations).\n\nAppFlow transfers data between source and destination connectors using an incremental query model. It constructs a query based on the Flow configuration and uses that to pull a configurable number of records from the source connector. For subsequent runs, AppFlow pulls only the records that have changed or were created since the last run. For structured data, the queries are based on entities (e.g. Accounts, Orders, Contact, Benefit, Report etc) as declared by a given connector.\n\n## Connector Configuration\n\nAppFlow manages authentication information for each connector, and it makes those credentials available to the connectors with the request for data reads and writes. AppFlow depends on the connector to provide the authentication scheme(s) the connectors support and the corresponding configuration parameters. It then gives an option to the AppFlow user to pick the desired authentication scheme from the list of supported schemes for that connector. Apart from authentication configuration, connector can also declare the implementation specific runtime settings. For these settings, input from AppFlow users is required during the ConnectorProfile creation or Flow creation. AppFlow stores the user credentials in user’s security manager. The authentication credentials ARN and the runtime settings are stored along with the ConnectorProfile state, and they are passed along with every request to the connector.\n\n## Entity Metadata\n\nAppFlow support dynamic discovery of schema and depends on the connectors to provide the required metadata. Therefore, \nAppFlow depends on two metadata queries from the connectors: \n1. `listEntities`. This API is recursive in nature and provides a hierarchical entity listing based on entityPath. If the \n`listEntities` response has `hasChildren=true`, that that indicates that there are more entities in the next level.\n2. `describeEntity`. This API provides field-level details of a given entity.\nAfter retrieving the metadata from the connector, AppFlow caches the metadata as per the ttl value returned by the connector \nalong with the metadata response in the CacheControl structure. If no ttl value is specified, AppFlow defaults to \n1 hour.\n    \n\n## SDK Interfaces\n\n| Interfaces           | Description                                                                  |\n|----------------------|------------------------------------------------------------------------------|\n| ConfigurationHandler | Defines the functionality to be implemented for configurations, credentials related operations  |\n| MetadataHandler      | Defines the functionality to be implemented for metadata operations |\n| RecordHandler        | Defines the functionality to be implemented for record related CRUD operations|\n\nIn the next section, we take a closer look at these interfaces. AppFlow uses these interfaces to interact with connectors \nfor fetching data from the source connector or pushing data into the destination connector. It also uses these interfaces\nfor the connector registration using the configuration returned by the connector and also to retrieve \nmetadata dynamically. Therefore, along with the data interfaces, the connector developers are required to implement \nthe interface to declare supported authentication types, configuration, and also the metadata interface \nwhich helps the connector declare the supported entities and their shape.\n\nThe connector developers therefore are essentially writing the wiring code to translate to/from from vendor’s API to \nthe generic AppFlow custom connector interface. The connector code needs to handle the following:\n- Necessary protocol and data model transformations.\n- Normalization to standard error-codes.\n- If the token was found to be expired, the connector can propagate the exception. Then AppFlow can handle\nthe exception and refresh the token and reissue the request.\n- Pagination support.\n- Vendors specific versioning differences.\n\n## ConfigurationHandler Details\n\nAllows the connector to declare connector runtime settings and authentication config etc using the \ndescribeConnectorConfiguration method. \n\nIt also includes the implementation for the following callbacks:\n1. validateConnectorRuntimeSettings: to validate user input for connector runtime settings.\n2. validateCredentials: to validate user credentials entered by the AppFlow user.      \n```python\nclass ConfigurationHandler(metaclass=abc.ABCMeta):\n    \"\"\"This abstract base class defines the functionality to be implemented by custom connectors for configurations,\n    credentials related operations.\n    \"\"\"\n    @abc.abstractmethod\n    def describe_connector_configuration(self, request: requests.DescribeConnectorConfigurationRequest) -> \\\n            responses.DescribeConnectorConfigurationResponse:\n        \"\"\"Describes the Connector Configuration supported by the connector.\n\n        Parameters:\n        request (DescribeConnectorConfigurationRequest)\n\n        Return:\n        DescribeConnectorConfigurationResponse\n        \"\"\"\n        pass\n    \n    @abc.abstractmethod\n    def validate_connector_runtime_settings(self, request: requests.ValidateConnectorRuntimeSettingsRequest) -> \\\n            responses.ValidateConnectorRuntimeSettingsResponse:\n        \"\"\"Validates the user inputs corresponding to the connector settings for a given ConnectorRuntimeSettingScope\n\n        Parameters:\n        request (ValidateConnectorRuntimeSettingsRequest)\n\n        Return:\n        ValidateConnectorRuntimeSettingsResponse\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def validate_credentials(self, request: requests.ValidateCredentialsRequest) -> \\\n            responses.ValidateCredentialsResponse:\n        \"\"\"Validates the user provided credentials.\n\n        Parameters:\n        request (ValidateCredentialsRequest)\n\n        Return:\n        ValidateCredentialsResponse\n        \"\"\"\n        pass\n\n```\n\n## MetadataHandler Details\n\nAllows the connector to declare the entity metadata for the underlying application\n- listEntities\n- describeEntity\n```python\nclass MetadataHandler(metaclass=abc.ABCMeta):\n    \"\"\"This abstract base class defines the functionality to be implemented by custom connectors for metadata\n    operations.\n    \"\"\"\n    @abc.abstractmethod\n    def list_entities(self, request: requests.ListEntitiesRequest) -> responses.ListEntitiesResponse:\n        \"\"\"Lists all the entities available in a paginated fashion. This API is recursive in nature\n        and provides a heretical entity listing based on entityPath. If the ListEntitiesResponse\n        returns has_children=true, that indicates that there are more entities in the next level.\n\n        Parameters:\n        request (ListEntitiesRequest)\n\n        Return:\n        ListEntitiesResponse\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def describe_entity(self, request: requests.DescribeEntityRequest) -> responses.DescribeEntityResponse:\n        \"\"\"Describes the entity definition with its field level metadata.\n        \n        Parameters:\n        request (DescribeEntityRequest)\n\n        Return:\n        DescribeEntityResponse\n        \"\"\"\n        pass\n\n```\n\n## RecordHandler Details\n\nThis is where the main functionality of data exchange is implemented:\n- retrieveData: lookup records against a batch of ids\n- queryData: queries the underlying application by translating the incoming filterExpress that follows a specific\nAppFlow DSL (SDK contains a parser to help parse the filterExpression)\n- writeData: writes a batch of records to the underlying application\n```python\nclass RecordHandler(metaclass=abc.ABCMeta):\n    \"\"\"This abstract base class defines the functionality to be implemented by custom connectors for record related\n    operations.\n    \"\"\"\n    @abc.abstractmethod\n    def retrieve_data(self, request: requests.RetrieveDataRequest) -> responses.RetrieveDataResponse:\n        \"\"\"Retrieves the batch of records against a set of identifiers from the source application.\n\n        Parameters:\n        request (RetrieveDataRequest)\n\n        Return:\n        RetrieveDataResponse\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def query_data(self, request: requests.QueryDataRequest) -> responses.QueryDataResponse:\n        \"\"\"Writes batch of records to the destination application.\n\n        Parameters:\n        request (QueryDataResponse)\n\n        Return:\n        WriteDataResponse\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def write_data(self, request: requests.WriteDataRequest) -> responses.WriteDataResponse:\n        \"\"\"Writes batch of records to the destination application.\n\n        Parameters:\n        request (WriteDataRequest)\n\n        Return:\n        WriteDataResponse\n        \"\"\"\n        pass\n\n```\n\n## Filter Expression DSL and Parser\n\nAppFlow uses an incremental query model to fetch data from the source. The initial pull queries records modified/created in \nthe past 30 days (configurable). In the next flow execution onwards, it runs incremental queries to pull data modified/created since the \nlast execution. The AppFlow query engine takes the user input for filtering from the flow definition and translates it to \na normalized DSL and passes it on to connectors. Connectors then take that normalized expression and translate it to \napplication-specific format. The domain specific language (DSL) that defines the filter expressions grammar is AppFlow \nspecific. For example: “price > 100 and accountName contains 'Alexa'\". The query expression DSL is a normalized DSL \nand not specific to DSLs used by specific underlying applications. The connector's job is to provide the necessary \ntranslation from AppFlow DSL to application-specific DSL or other syntax the underlying application requires. In order \nto simplify the work needed to parse the filter expression the parser has been included. Please see the README.md under\nthe `custom_connector_queryfilter` module for the details.\n\n## AppFlow Custom Connector – End-to-End Flow\n\nThe following is a sample end-to-end processing flow to help understand how AppFlow interacts with the custom connectors using\nthe above interfaces:\n\n- Step 1: Connector implementation declares the supported authentication types using the ConfigurationHandler class.\nAppFlow uses `describeConnectorConfiguration` function to retrieve the connector configuration. The\n`DescribeConnectorConfigurationResponse` includes `AuthenticationConfig` and `ConnectorRuntimeSettings` data structures.\nAuthenticationConfig defines the auth scheme supported by the connector (OAuth2/BASIC etc) and\nConnectorRuntimeSettings represents the setting that the connector needs at runtime, input for which are provided by\nthe AppFlow user.(e.g. timeout values or any other implementation dependent inputs)\n\n- Step 2: AppFlow customer deploys this connector Lambda stack into their account and registers a `Connector` against the\nLambda using the `register_connector` AppFlow public API.\n\n- Step 3: AppFlow customer creates a new `ConnectorProfile` against this newly registered connector and picks an\nauthentication type (for this example, let’s assume they picked OAuth2)\n\n- Step 4: AppFlow Console presents them with the corresponding authentication flow and AppFlow takes user inputs and\ninvokes `validateCredentials` function on the connector. If that succeeds, the console presents the screen to take user input for\nthe \"connector runtime settings\" declared by the connector. When user inputs the values corresponding to the settings (example: \nvar1=10, var2=“Foo”). AppFlow invokes `validateConnectorRuntimeSettings` function on the connector so that it can validate the\nuser input. Upon successful validation the credentials and connector runtime settings are stored along with the newly created\n`ConnectorProfile`.\n\n- Step 5: AppFlow user then uses that `ConnectorProfile` to create `Flow` definitions. During the flow creation AppFlow\ninvokes `listEntity` and `describeEntity` functions on the connector to retrieve the list of supported entities and the entity\ndetail of the specific entity AppFlow user selected on the console / API.\n\n- Step 6: When the flow is started AppFlow invokes the connector to execute the query constructed using the user input\nduring the AppFlow definition using the `queryData` function.\n\n- Step 7: For incremental flows AppFlow adds the timestamp based filter on the query and passes it on the connector to\ninvoke it again for incremental data pulls using the query_data function. \n\n- Step 8: If the destination connector is also a custom connector, AppFlow processes the incoming records as per the\ntask definitions and prepares the payload as per the entity shape of the destination connector and hands it over to the\ndestination connector by invoking the `writeData` function.\n\n\n## Connector Developer Experience\n\n- Clone the `custom-connector-example` module and modify the implementation to fit the underlying application you are \nwriting the connector for.\n- Edit the implementations for the three lambda handlers: `ConfigurationHandler`, `MetadataHandler` and `RecordHandler`.\n- Add unit tests.\n- This SDK productivity scripts under the `custom-connector-tools` module, to help build and export the package into \nS3 using AWS CloudFormation template and then deploy the Lambda stack into your account.\n- Login into the AppFlow console and register a `Connector` against the new Lambda.\n- Create a `ConnectorProfile` against the newly registered `Connector`.\n- Create a flow using the new `Connector` and `ConnectorProfile`.\n- Execute the flow.\n\n\n## Getting Started Guide\n\n### Documentation\n\nThe Amazon AppFlow documentation is located here: https://docs.aws.amazon.com/appflow/index.html. The API reference guide can be found here: https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html.\n\n### Downloading the SDK\n\n\nThe Amazon AppFlow Custom Connector SDK is available for both Java and Python on github at the following link: https://github.com/orgs/awslabs/teams/amazon-appflow/repositories\n\n* Java SDK - You can find the Java SDK in [AppFlowJavaSdk](https://github.com/awslabs/aws-appflow-custom-connector-java)/\n* Python SDK - You can find the Python SDK .whl file in [AppFlowPythonSDK/](https://github.com/awslabs/aws-appflow-custom-connector-python)\n\n### Using the SDK\n\n#### For Java SDK Users:\n\nOnce you have the jar, create the Amazon AppFlow client instance and invoke the AppFlow APIs.\n\n```\nAmazonAppflow appflowClient = AmazonAppflowClientBuilder.standard()\n       .withRegion(region)\n        .build();\n```\n\n#### For Python Users:\n\nOnce you have the python whl file, install the whl files using pip3 install. Create the AppFlow client using the boto3 and call the AppFlow APIs.\n\n**Commands to install the Python SDK:**\n\n```\npython3 -m pip install botocore-1.21.25-py3-none-any.whl\npython3 -m pip install boto3-1.18.25-py3-none-any.whl\n```\n\n```\nimport boto3\n\nappflowClient = boto3.client('appflow')\n```\n\n### Lambda Permissions and Resource Policy Must be Manually Updated\n\nIn order for AppFlow to invoke the custom connector Lambda function while executing customer flows, the following permissions need to be added manually (or by simply using the `deploy.sh` script provided in the custom-connector-tools package):\n\n```\n{\n    \"Version\": \"*2012-10-17*\",\n    \"Id\": \"default\",\n    \"Statement\": [{\n        \"Sid\": \"*appflow-example-01*\",\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"appflow.amazonaws.com\"\n        },\n        \"Action\": \"lambda:InvokeFunction\",\n        \"Resource\": \"arn:aws:lambda:*us-east-1*:123456789012:function:*my-function*\",\n        \"Condition\": {\n            \"StringEquals\": {\n                \"AWS:SourceAccount\": \"*123456789012*\"\n            },\n            \"ArnLike\": {\n                \"AWS:SourceArn\": \"arn:aws:appflow:*us-east-1*:*123456789012*:*\"\n            }\n        }\n    }]\n}\n```\n\n* source account: the customers account \n* source arn: all of the Amazon AppFlow resources present in the customers account\n\nThe Source Account and the Source ARN condition helps to prevent the “confused deputy” security vulnerability. The allow-listed service principal allows all of the AWS accounts under the “appflow” service principal to access the customer Lambda.\n\n### Registering your Custom Connector\n\n#### For Console Users:\n\ni) Go to the Amazon AppFlow console and select “Connectors” on the left-side menu. \n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-home.png?raw=True)\n\nii) Click on the “Register New Connector” button on the console.\n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-connectors-page.png?raw=True)\n\niii) Your custom connector Lambda function will be available on this webpage. If not, ensure that the appropriate Lambda permissions are set, as described in the section “Updating Lambda Permissions and Resource Policy Required.\"\n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-lambda-function.png?raw=True)\n\niv) Provide the label for your connector. The label must be unique per account per region. Click on the “Register” button. \n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-connector-label.png?raw=True)\n\nv) Once registered, you’ll see the connector in the list of custom connectors.\n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-test-connector.png?raw=True)\n\n#### For API  Users:\n\nInvoke the `registerConnector` public API endpoint with the following request payload:\n\n```\n{\n   \"connectorLabel\":\"TestCustomConnector\", [The unique Label]\n   \"connectorProvisioningType\":\"LAMBDA\",   [The provisioning type of the connector.\n    Currently only supported value is LAMBDA]\n   \"connectorProvisioningConfig\":{\n      \"lambda\":{\n         \"lambdaArn\":\"arn:aws:lambda:us-west-2:364320160620:function: \n         banvipulCustomConnectorBugBash\" [The arn of the deployed lambda]\n      }\n   }\n}\n```\n\n\n\n### Creating the Connector Profile\n\n#### For Console Users:\n\ni) Go to the “Connections” link from the left menu and select the registered connector from the list.\n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-registered-connector.png?raw=True)\n\nii) Once selected click on the ‘Create Connection’ button.\n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-create-connection.png?raw=True)\n\niii) A pop-up appears asking for the required details to create a connection. Please fill in the details and scroll down to click on the ‘Continue’ button. \n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-connection-details.png?raw=True)\n\niv) Your connection now appears in the list.\n\n#### For API Users:\n\nFor custom connectors, a new parameter has been added in the request object for this API. \n\n```\n{\n   .............................\n   .............................\n   .............................\n   \"connectorLabel\":\"TestCustomConnector\", [The Label provided while registering the \n   connector]\n   .............................\n   .............................\n   .............................\n}\n```\n\nPlease follow the sample API request here https://docs.aws.amazon.com/appflow/1.0/APIReference/API_CreateConnectorProfile.html \n\n### Creating Flows\n\n#### For Console Users:\n\ni) Click on the Flow tab in the left menu, select Create Flow, then follow the standard AppFlow flow configuration steps.  \n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-create-flow.png?raw=True)\n\n#### For API Users:\n\nFollow the sample API request here:\nhttps://docs.aws.amazon.com/appflow/1.0/APIReference/API_CreateFlow.html\n\nIn addition to this, for the custom connectors we have added the following parameters in the request object for this API:\n\n### Finding and Listing Custom Connectors\n\n#### For Console Users:\n\nGo the Amazon AppFlow console and click on “Connectors” on the left menu. Select “Custom connectors” in the drop down list.\n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-custom-connectors-dropdown.png?raw=True)\n\n#### For API Users:\n\nCall the listConnectors API with the following request format, this will list all the custom connectors registered in your account:\n\n```\n{\n  \"maxResults\" : 100 // default is 20 and accepted values are between 1 to 100.\n}\n```\n\n### Obtaining Details about the Registered Connector\n\n#### For Console Users:\n\nGo the Amazon AppFlow console, click on “Connectors” on the left menu, then click “View details” on the connector of interest. \n\n![](https://github.com/awslabs/aws-appflow-custom-connector-python/blob/main/images/appflow-console-custom-connectors-view-details.png?raw=True)\n\n#### For API Users:\n\nPlease call describeConnector API. Please follow the sample API request here:\n\n```\n{\n  \"connectorType\" : `\"CustomConnector\",\n  \"connectorLabel\": <YourConnectorLabel>`\n}\n```\n\n## Testing the connector\n\n### Using AWS Lambda console\n\n* After your connector is deployed, you can access the connector through the AWS Lambda console.\n* You can go to the test tab, and define the payloads as per the request format and then invoke the Lambda to test this.\n* To the request payload, you can build the request using the Request model defined as SDK and then convert it to JSON string and then use that on console.\n* You can also use our Testing Tools in `custom-connector-tests` and `custom-connector-integ-test` to test your connector.\n\n## Additional details:\n\nPlease refer to the below READMEs to learn more about the SDK:\n- You can find QueryFilter README in `custom-connector-queryfilter`\n- You can find Example README in `custom-connector-example`\n- You can find Deployment Tools README in `custom-connector-tools`\n- You can find Testing Tools README in `custom-connector-tests` and `custom-connector-integ-test`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awslabs/aws-appflow-custom-connector-python",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "amazon-appflow-custom-connector-sdk",
    "package_url": "https://pypi.org/project/amazon-appflow-custom-connector-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/amazon-appflow-custom-connector-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/awslabs/aws-appflow-custom-connector-python"
    },
    "release_url": "https://pypi.org/project/amazon-appflow-custom-connector-sdk/1.0.4/",
    "requires_dist": null,
    "requires_python": ">= 3.6",
    "summary": "Amazon AppFlow Custom Connector SDK",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14014764,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0825df4a63e255d5628ec114c08273a637e42e406a3eeaae4620ff792f4d145",
          "md5": "804e2bf3cffab3e3528391b5bdb478ce",
          "sha256": "4d895a7a957ccd404c9c9879216bed32364f431cbcf1e967494ebd13c6d4a8ef"
        },
        "downloads": -1,
        "filename": "amazon_appflow_custom_connector_sdk-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "804e2bf3cffab3e3528391b5bdb478ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.6",
        "size": 76544,
        "upload_time": "2022-03-22T22:33:29",
        "upload_time_iso_8601": "2022-03-22T22:33:29.452199Z",
        "url": "https://files.pythonhosted.org/packages/b0/82/5df4a63e255d5628ec114c08273a637e42e406a3eeaae4620ff792f4d145/amazon_appflow_custom_connector_sdk-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c888b6e20bc8adac6a2a02efe04597745953a8556089309d046878c9eb19389",
          "md5": "c4e51ec3bc8590d5fa62b5b7fc288253",
          "sha256": "28c328f0d24ad8c2c16fc81cd4bf88a04784c130aa23b02656ccafd968a3b142"
        },
        "downloads": -1,
        "filename": "amazon_appflow_custom_connector_sdk-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4e51ec3bc8590d5fa62b5b7fc288253",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 956359,
        "upload_time": "2022-03-22T22:33:31",
        "upload_time_iso_8601": "2022-03-22T22:33:31.024130Z",
        "url": "https://files.pythonhosted.org/packages/7c/88/8b6e20bc8adac6a2a02efe04597745953a8556089309d046878c9eb19389/amazon_appflow_custom_connector_sdk-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5aeb22d84e5c1bcca7614efb9c586cd2f0ac502f7bf4191a9085cb6950ac467",
          "md5": "44bf78be426fec78daae792bd1fdcaf1",
          "sha256": "aa685ff05aec740921dcc870f1f6f44d76b90eb9352399141a8e9cfe16b526e8"
        },
        "downloads": -1,
        "filename": "amazon_appflow_custom_connector_sdk-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44bf78be426fec78daae792bd1fdcaf1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.6",
        "size": 76345,
        "upload_time": "2022-04-20T22:24:19",
        "upload_time_iso_8601": "2022-04-20T22:24:19.326481Z",
        "url": "https://files.pythonhosted.org/packages/b5/ae/b22d84e5c1bcca7614efb9c586cd2f0ac502f7bf4191a9085cb6950ac467/amazon_appflow_custom_connector_sdk-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06a064de0b351e09912e454dcfced31b8fb1402a027f23a121856ed3a6cf9e48",
          "md5": "37f497f3a2c390ccb367b81d68dd402e",
          "sha256": "d96782a88545439ec7709238f39321393315af7624522b83655e978f0741ef85"
        },
        "downloads": -1,
        "filename": "amazon_appflow_custom_connector_sdk-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "37f497f3a2c390ccb367b81d68dd402e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 943324,
        "upload_time": "2022-04-20T22:24:21",
        "upload_time_iso_8601": "2022-04-20T22:24:21.703650Z",
        "url": "https://files.pythonhosted.org/packages/06/a0/64de0b351e09912e454dcfced31b8fb1402a027f23a121856ed3a6cf9e48/amazon_appflow_custom_connector_sdk-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0deb52f9b84a7a80034d3621d89f0fe95c3883b06af54e0aafce47074615df00",
          "md5": "7f702faf9e5e23c8d67801d84b319afd",
          "sha256": "843c6b83b8bf66cac9b5280b36a51ae5e81d76e2dbd833113d545c5553811724"
        },
        "downloads": -1,
        "filename": "amazon_appflow_custom_connector_sdk-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f702faf9e5e23c8d67801d84b319afd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.6",
        "size": 148946,
        "upload_time": "2022-06-02T18:09:40",
        "upload_time_iso_8601": "2022-06-02T18:09:40.001872Z",
        "url": "https://files.pythonhosted.org/packages/0d/eb/52f9b84a7a80034d3621d89f0fe95c3883b06af54e0aafce47074615df00/amazon_appflow_custom_connector_sdk-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ce89811970cfad29ae9cef7038da0b789980fb469fd94adc1ac75584a91112a",
          "md5": "ce35ea49b31cee80fa82df0e8b84b22b",
          "sha256": "a71efe96fe411ef9b7dedfd33f0820cb82060613d921eac5c6ed8d1b0acaecaa"
        },
        "downloads": -1,
        "filename": "amazon_appflow_custom_connector_sdk-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ce35ea49b31cee80fa82df0e8b84b22b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 959258,
        "upload_time": "2022-06-02T18:09:41",
        "upload_time_iso_8601": "2022-06-02T18:09:41.590170Z",
        "url": "https://files.pythonhosted.org/packages/3c/e8/9811970cfad29ae9cef7038da0b789980fb469fd94adc1ac75584a91112a/amazon_appflow_custom_connector_sdk-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0deb52f9b84a7a80034d3621d89f0fe95c3883b06af54e0aafce47074615df00",
        "md5": "7f702faf9e5e23c8d67801d84b319afd",
        "sha256": "843c6b83b8bf66cac9b5280b36a51ae5e81d76e2dbd833113d545c5553811724"
      },
      "downloads": -1,
      "filename": "amazon_appflow_custom_connector_sdk-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7f702faf9e5e23c8d67801d84b319afd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.6",
      "size": 148946,
      "upload_time": "2022-06-02T18:09:40",
      "upload_time_iso_8601": "2022-06-02T18:09:40.001872Z",
      "url": "https://files.pythonhosted.org/packages/0d/eb/52f9b84a7a80034d3621d89f0fe95c3883b06af54e0aafce47074615df00/amazon_appflow_custom_connector_sdk-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ce89811970cfad29ae9cef7038da0b789980fb469fd94adc1ac75584a91112a",
        "md5": "ce35ea49b31cee80fa82df0e8b84b22b",
        "sha256": "a71efe96fe411ef9b7dedfd33f0820cb82060613d921eac5c6ed8d1b0acaecaa"
      },
      "downloads": -1,
      "filename": "amazon_appflow_custom_connector_sdk-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ce35ea49b31cee80fa82df0e8b84b22b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 959258,
      "upload_time": "2022-06-02T18:09:41",
      "upload_time_iso_8601": "2022-06-02T18:09:41.590170Z",
      "url": "https://files.pythonhosted.org/packages/3c/e8/9811970cfad29ae9cef7038da0b789980fb469fd94adc1ac75584a91112a/amazon_appflow_custom_connector_sdk-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}