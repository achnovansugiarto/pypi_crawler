{
  "info": {
    "author": "ssbuild",
    "author_email": "9727464@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "bert_pretty is a text encoder and result decoder\n\n```py\n# -*- coding:utf-8 -*-\n'''\n    bert input_instance encode and result decode\n    https://github.com/ssbuild/bert_pretty.git\n'''\nimport numpy as np\n#FullTokenizer is official and you can use your tokenization .\nfrom bert_pretty import FullTokenizer,\\\n        text_feature, \\\n        text_feature_char_level,\\\n        text_feature_word_level,\\\n        text_feature_char_level_input_ids_mask, \\\n        text_feature_word_level_input_ids_mask, \\\n        text_feature_char_level_input_ids_segment, \\\n        text_feature_word_level_input_ids_segment, \\\n        seqs_padding,rematch\n\n\nfrom bert_pretty.ner import load_label_bioes,load_label_bio,load_labels as ner_load_labels\nfrom bert_pretty.ner import ner_crf_decoding,\\\n                            ner_pointer_decoding,\\\n                            ner_pointer_decoding_with_mapping,\\\n                            ner_pointer_double_decoding,ner_pointer_double_decoding_with_mapping\n\nfrom bert_pretty.cls import cls_softmax_decoding,cls_sigmoid_decoding,load_labels as cls_load_labels\n\n\ntokenizer = FullTokenizer(vocab_file=r'F:\\pretrain\\chinese_L-12_H-768_A-12\\vocab.txt',do_lower_case=True)\ntext_list = [\"你是谁123aa\\ta嘂a\",\"嘂adasd\"]\n\n\n\ndef test():\n    maxlen = 512\n    do_lower_case = tokenizer.basic_tokenizer.do_lower_case\n    inputs = [['[CLS]'] + tokenizer.tokenize(text)[:maxlen - 2] + ['[SEP]'] for text in text_list]\n    mapping = [rematch(text, tokens, do_lower_case) for text, tokens in zip(text_list, inputs)]\n    inputs = [tokenizer.convert_tokens_to_ids(input) for input in inputs]\n    input_mask = [[1] * len(input) for input in inputs]\n    input_segment = [[0] * len(input) for input in inputs]\n    input_ids = seqs_padding(inputs)\n    input_mask = seqs_padding(input_mask)\n    input_segment = seqs_padding(input_segment)\n\n    input_ids = np.asarray(input_ids, dtype=np.int32)\n    input_mask = np.asarray(input_mask, dtype=np.int32)\n    input_segment = np.asarray(input_segment, dtype=np.int32)\n\n    print('input_ids\\n', input_ids)\n    print('mapping\\n',mapping)\n    print('input_mask\\n',input_mask)\n    print('input_segment\\n',input_segment)\n    print('\\n\\n')\n\n\n\ndef test_charlevel():\n    do_lower_case = tokenizer.basic_tokenizer.do_lower_case\n    maxlen = 512\n    if do_lower_case:\n        inputs = [['[CLS]'] + tokenizer.tokenize(text.lower())[:maxlen - 2] + ['[SEP]'] for text in text_list]\n    else:\n        inputs = [['[CLS]'] + tokenizer.tokenize(text)[:maxlen - 2] + ['[SEP]'] for text in text_list]\n    inputs = [tokenizer.convert_tokens_to_ids(input) for input in inputs]\n    input_mask = [[1] * len(input) for input in inputs]\n    input_segment = [[0] * len(input) for input in inputs]\n    input_ids = seqs_padding(inputs)\n    input_mask = seqs_padding(input_mask)\n    input_segment = seqs_padding(input_segment)\n\n    input_ids = np.asarray(input_ids, dtype=np.int32)\n    input_mask = np.asarray(input_mask, dtype=np.int32)\n    input_segment = np.asarray(input_segment, dtype=np.int32)\n\n    print('input_ids\\n', input_ids)\n    print('input_mask\\n',input_mask)\n    print('input_segment\\n',input_segment)\n    print('\\n\\n')\n\n# labels = ['标签1','标签2']\n# print(cls.load_labels(labels))\n#\n# print(ner.load_label_bio(labels))\n\n\n'''\n    # def ner_crf_decoding(batch_text, id2label, batch_logits, trans=None,batch_mapping=None,with_dict=True):\n    ner crf decode 解析crf序列  or 解析 已经解析过的crf序列\n\n    batch_text input_instance list , \n    id2label 标签 list or dict\n    batch_logits 为bert 预测结果 logits_all (batch,seq_len,num_tags) or (batch,seq_len)\n    trans 是否启用trans预测 , 2D \n    batch_mapping 映射序列\n'''\n\n'''\n    def ner_pointer_decoding(batch_text, id2label, batch_logits, threshold=1e-8,coordinates_minus=False,with_dict=True)\n\n    batch_text text list , \n    id2label 标签 list or dict\n    batch_logits (batch,num_labels,seq_len,seq_len)\n    threshold 阈值\n    coordinates_minus\n'''\n\n'''\n    def ner_pointer_decoding_with_mapping(batch_text, id2label, batch_logits, batch_mapping,threshold=1e-8,coordinates_minus=False,with_dict=True)\n\n    batch_text text list , \n    id2label 标签 list or dict\n    batch_logits (batch,num_labels,seq_len,seq_len)\n    threshold 阈值\n    coordinates_minus\n'''\n\n\n'''\n    cls_softmax_decoding(batch_text, id2label, batch_logits,threshold=None)\n    batch_text 文本list , \n    id2label 标签 list or dict\n    batch_logits (batch,num_classes)\n    threshold 阈值\n'''\n\n'''\n    cls_sigmoid_decoding(batch_text, id2label, batch_logits,threshold=0.5)\n\n    batch_text 文本list , \n    id2label 标签 list or dict\n    batch_logits (batch,num_classes)\n    threshold 阈值\n'''\n\n\ndef test_cls_decode():\n    num_label =3\n    np.random.seed(123)\n    batch_logits = np.random.rand(2,num_label)\n    result = cls_softmax_decoding(text_list,['标签1','标签2','标签3'],batch_logits,threshold=None)\n    print(result)\n\n\n    batch_logits = np.random.rand(2,num_label)\n    print(batch_logits)\n    result = cls_sigmoid_decoding(text_list,['标签1','标签2','标签3'],batch_logits,threshold=0.5)\n    print(result)\n\n\n\n\n\nif __name__ == '__main__':\n    test()\n    test_charlevel()\n    test_cls_decode()\n\n\n\n\n\n\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ssbuild/bert_pretty",
    "keywords": "bert_pretty,bert_pretty,bert text pretty,bert decording",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bert-pretty",
    "package_url": "https://pypi.org/project/bert-pretty/",
    "platform": "win32_AMD64",
    "project_url": "https://pypi.org/project/bert-pretty/",
    "project_urls": {
      "Homepage": "https://github.com/ssbuild/bert_pretty"
    },
    "release_url": "https://pypi.org/project/bert-pretty/0.1.0.post0/",
    "requires_dist": null,
    "requires_python": ">=3, <4",
    "summary": "bert_pretty is a text encoder and result decoder",
    "version": "0.1.0.post0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16662586,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "084c4affa84887fdb82c65218b8f7424597e0078dae78da25415dbbbd6e650c9",
          "md5": "ff6224decc81a3022fc49a115096df10",
          "sha256": "2a9d139a0e4165e5275c0a404d07034f98799e913485e0079725ec272207e981"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff6224decc81a3022fc49a115096df10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 20020,
        "upload_time": "2022-03-02T01:33:01",
        "upload_time_iso_8601": "2022-03-02T01:33:01.905666Z",
        "url": "https://files.pythonhosted.org/packages/08/4c/4affa84887fdb82c65218b8f7424597e0078dae78da25415dbbbd6e650c9/bert_pretty-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2de2442f089b6c9b47e85ab4c25eb80d71f347906753b4bc6b35bcabba82feed",
          "md5": "860a44ecd6e8820eaa2664dd25803803",
          "sha256": "87bd583fd7ba640cd779b8961c655cf3d39b2c4bdf968cf190b0c582b675451a"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "860a44ecd6e8820eaa2664dd25803803",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 20157,
        "upload_time": "2022-03-03T08:31:58",
        "upload_time_iso_8601": "2022-03-03T08:31:58.450062Z",
        "url": "https://files.pythonhosted.org/packages/2d/e2/442f089b6c9b47e85ab4c25eb80d71f347906753b4bc6b35bcabba82feed/bert_pretty-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d99becb12bda4d60da74e018e1c2c510b0d213a66e086a93f90c59d74387932",
          "md5": "2a772241df7b3e09141108dbc1b2e3da",
          "sha256": "577689512283085aa61011fbf89d8b40c01bc055918709acd7d2471f1b43ea0b"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a772241df7b3e09141108dbc1b2e3da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 22583,
        "upload_time": "2022-03-25T14:51:30",
        "upload_time_iso_8601": "2022-03-25T14:51:30.265827Z",
        "url": "https://files.pythonhosted.org/packages/3d/99/becb12bda4d60da74e018e1c2c510b0d213a66e086a93f90c59d74387932/bert_pretty-0.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0878d306a1497326277cd1876e25faf9ea79183374001074ca797a2df3a54229",
          "md5": "c47eb160784dde81bff3001282ffb7a8",
          "sha256": "9b703037b080a8ef787db8f281815a060d9716e47ae9c18153d83d8c83433d92"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c47eb160784dde81bff3001282ffb7a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 22739,
        "upload_time": "2022-04-14T08:45:43",
        "upload_time_iso_8601": "2022-04-14T08:45:43.359226Z",
        "url": "https://files.pythonhosted.org/packages/08/78/d306a1497326277cd1876e25faf9ea79183374001074ca797a2df3a54229/bert_pretty-0.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5d5c0ec84d0b414af0ff58e125b72c0ee5dfc2336bd75681bcfa989c231d884",
          "md5": "c1758abc73aea4378b79144a54a841d3",
          "sha256": "fe9bcae3332741c70075c327986dc52d43e558ce30940732d7c2fd9337e9503a"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.0.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1758abc73aea4378b79144a54a841d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 22794,
        "upload_time": "2022-05-05T08:59:14",
        "upload_time_iso_8601": "2022-05-05T08:59:14.940303Z",
        "url": "https://files.pythonhosted.org/packages/a5/d5/c0ec84d0b414af0ff58e125b72c0ee5dfc2336bd75681bcfa989c231d884/bert_pretty-0.0.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb0d13172553075ce5b46e68106fd6264c9882a76e1296e5ada7e8ee094aee15",
          "md5": "e411f5166e6a8709669a205f1b77a2d7",
          "sha256": "a46bef79111191f18f445dcd7fc10b316245286024e777a0ced59afa2c7faf1d"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.0.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e411f5166e6a8709669a205f1b77a2d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 23487,
        "upload_time": "2022-08-03T07:42:08",
        "upload_time_iso_8601": "2022-08-03T07:42:08.020919Z",
        "url": "https://files.pythonhosted.org/packages/eb/0d/13172553075ce5b46e68106fd6264c9882a76e1296e5ada7e8ee094aee15/bert_pretty-0.0.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.post0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c19c9acd5b3443ae4079de0c83bdfe79ee04e2fa9b82634f9092ff9fb85092e6",
          "md5": "9008d9f1f3813bf27c6edbb88c574466",
          "sha256": "52ff286e28f17f487c3486cced6c6a8db49a901f289370a18ee50cda52aa4b00"
        },
        "downloads": -1,
        "filename": "bert_pretty-0.1.0.post0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9008d9f1f3813bf27c6edbb88c574466",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 31499,
        "upload_time": "2023-02-02T08:27:41",
        "upload_time_iso_8601": "2023-02-02T08:27:41.145902Z",
        "url": "https://files.pythonhosted.org/packages/c1/9c/9acd5b3443ae4079de0c83bdfe79ee04e2fa9b82634f9092ff9fb85092e6/bert_pretty-0.1.0.post0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c19c9acd5b3443ae4079de0c83bdfe79ee04e2fa9b82634f9092ff9fb85092e6",
        "md5": "9008d9f1f3813bf27c6edbb88c574466",
        "sha256": "52ff286e28f17f487c3486cced6c6a8db49a901f289370a18ee50cda52aa4b00"
      },
      "downloads": -1,
      "filename": "bert_pretty-0.1.0.post0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9008d9f1f3813bf27c6edbb88c574466",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3, <4",
      "size": 31499,
      "upload_time": "2023-02-02T08:27:41",
      "upload_time_iso_8601": "2023-02-02T08:27:41.145902Z",
      "url": "https://files.pythonhosted.org/packages/c1/9c/9acd5b3443ae4079de0c83bdfe79ee04e2fa9b82634f9092ff9fb85092e6/bert_pretty-0.1.0.post0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}