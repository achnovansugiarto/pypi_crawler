{
  "info": {
    "author": "Tyler Blume",
    "author_email": "tblume@mail.USF.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# BetaBoost\nA small wrapper to do Beta Boosting with XgBoost\n\n```pip install BetaBoost==0.0.4```\n\nInitiate a BetaBoost object and fit a XgBoost model.\nReturns a XgBoost Train Object.\n\nBetaboosting assumes that there is some spike in the learning rate that exists which can give 'optimal' performance, a beta kernel with a floor is used for convenience.\n\nA quick example with some toy data.  Found this example awhile ago for learning rate decay:\n\n```python\nimport numpy as np\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\n\ndef generate_data():\n    y = np.random.gamma(2, 4, OBS)\n    X = np.random.normal(5, 2, [OBS, FEATURES])\n    return X, y\n\nmax_iter = 300\neta_base = 0.2\neta_min = 0.1\neta_decay = np.linspace(eta_base, eta_min, max_iter).tolist()\nOBS = 10 ** 4\nFEATURES = 20\nPARAMS = {\n    'eta': eta_base,\n    \"booster\": \"gbtree\",\n}\n\n\nX_train, y_train = generate_data()\nX_test, y_test = generate_data()\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test, label=y_test)\nevals_result = {'train': dtrain}\n\nprogress1 = dict()\nmodel1 = xgb.train(\n    maximize=True,\n    params=PARAMS,\n    dtrain=dtrain,\n    num_boost_round=max_iter,\n    early_stopping_rounds=max_iter,\n    evals=[(dtrain, 'train'),(dtest, 'test')],\n    evals_result=progress1,\n    verbose_eval=False,\n    callbacks=[xgb.callback.LearningRateScheduler(eta_decay)]\n)\n\nprogress2 = dict()\nmodel2 = xgb.train(\n    maximize=True,\n    params=PARAMS,\n    dtrain=dtrain,\n    num_boost_round=max_iter,\n    early_stopping_rounds=max_iter,\n    evals=[(dtrain, 'train'),(dtest, 'test')],\n    evals_result=progress2,\n    verbose_eval=False,\n    callbacks=[xgb.callback.LearningRateScheduler(list(np.ones(max_iter)*0.01))]\n)\n\n\nprogress3 = dict()\nmodel3 = xgb.train(\n    maximize=True,\n    params=PARAMS,\n    dtrain=dtrain,\n    num_boost_round=max_iter,\n    early_stopping_rounds=max_iter,\n    evals=[(dtrain, 'train'),(dtest, 'test')],\n    evals_result=progress3,\n    verbose_eval=False,\n    callbacks=[xgb.callback.LearningRateScheduler(list(np.ones(max_iter)*0.1))]\n)\n\n#Here we call the BetaBoost, the wrapper parameters are passed in the class init\nbb_evals = dict()\nimport BetaBoost as bb\nbetabooster = bb.BetaBoost(n_boosting_rounds = max_iter)\nbetabooster.fit(dtrain=dtrain,\n                maximize=True,\n                params = PARAMS,\n                early_stopping_rounds=max_iter,\n                evals=[(dtrain, 'train'),(dtest, 'test')],\n                evals_result = bb_evals,\n                verbose_eval = False)\n\nplt.plot(progress1['test']['rmse'], linestyle = 'dashed', color = 'b', label = 'eta test decay')\nplt.plot(progress2['test']['rmse'], linestyle = 'dashed', color = 'r', label = '0.01 test')\nplt.plot(progress3['test']['rmse'], linestyle = 'dashed', color = 'black', label = '0.1 test')\nplt.plot(bb_evals['test']['rmse'], linestyle = 'dashed', color = 'y', label = 'bb test')\nplt.legend()\nplt.show()\n```\n![alt text](https://github.com/tblume1992/BetaBoost/blob/master/static/betaboost_test_image.png?raw=true \"BB Awesome Image\")\n\nA clear nice-ety of beta boosting is that the model's test set is one of the first models to converge and yet is resistant to overfitting.  Plotting the default beta kernel settings will show a function that starts quite small and peaks around .5 by iteration 30.  This process allows the model to make the largest jumps not when the trees are super weak (standard eta decay) or when they are too strong.\n\nA quick convergence and robustness to overfitting can be achieved with slight tunings of the beta kernel parameters...it's only 6 more parameters guys :)\n\nFAQ:\n\nWhy a beta pdf?\n\nTLDR: it worked pretty well!\n\nLonger incohernt look at it: https://github.com/tblume1992/portfolio/blob/master/GradientBoostedTrees/3_Dynamic_GBT.ipynb",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tblume1992/BetaBoost",
    "keywords": "xgboost,gradient boosting,data science,machine learning",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BetaBoost",
    "package_url": "https://pypi.org/project/BetaBoost/",
    "platform": "",
    "project_url": "https://pypi.org/project/BetaBoost/",
    "project_urls": {
      "Homepage": "https://github.com/tblume1992/BetaBoost"
    },
    "release_url": "https://pypi.org/project/BetaBoost/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "BetaBoosting: gradient boosting with a beta function.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11817066,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b974b74f1e5fcd5326e853f3e6e6605705ff2df6b74aafb2b13fc19bee369c2d",
          "md5": "9f4076c04bd9b3946a8480541bccc9d2",
          "sha256": "edc6b4c6a086d018df822f196869d536bfb70d19692c587b753eb6cdbde1c8be"
        },
        "downloads": -1,
        "filename": "BetaBoost-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9f4076c04bd9b3946a8480541bccc9d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2892,
        "upload_time": "2021-10-23T17:34:56",
        "upload_time_iso_8601": "2021-10-23T17:34:56.386799Z",
        "url": "https://files.pythonhosted.org/packages/b9/74/b74f1e5fcd5326e853f3e6e6605705ff2df6b74aafb2b13fc19bee369c2d/BetaBoost-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c005553b6aae0ff63bafc5314d64463d4f19920cd72a1ae04e9accca796415cf",
          "md5": "0a292d658c8ca3314ef2358dad454ed8",
          "sha256": "f3391f1686104e75513209fbe51032d7d93956048d0f4788efc014a1d0b58492"
        },
        "downloads": -1,
        "filename": "BetaBoost-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0a292d658c8ca3314ef2358dad454ed8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2889,
        "upload_time": "2021-10-23T17:38:45",
        "upload_time_iso_8601": "2021-10-23T17:38:45.297745Z",
        "url": "https://files.pythonhosted.org/packages/c0/05/553b6aae0ff63bafc5314d64463d4f19920cd72a1ae04e9accca796415cf/BetaBoost-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73db7a051cafcedef61fda62a8c19d0b2893db47fa8dd71643933b34d1daa4b9",
          "md5": "94706bd53851066641e6f0f8ff792e7d",
          "sha256": "49b8830df86b6cac22e05015a566fa8fc6242cb3a12c4f16f2c630db3b8acc18"
        },
        "downloads": -1,
        "filename": "BetaBoost-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "94706bd53851066641e6f0f8ff792e7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2954,
        "upload_time": "2021-10-24T17:29:49",
        "upload_time_iso_8601": "2021-10-24T17:29:49.840890Z",
        "url": "https://files.pythonhosted.org/packages/73/db/7a051cafcedef61fda62a8c19d0b2893db47fa8dd71643933b34d1daa4b9/BetaBoost-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "068a464d6d07d931572d0b41bc439aa3ff00e33e4c9fb6d3bd10e45ee1f883a0",
          "md5": "a415166ea762b4076d28c8d7426a3df3",
          "sha256": "6cfcf33b03fb61291ee37b8928412975f700d10cb1387543cbb88880c0a0e05c"
        },
        "downloads": -1,
        "filename": "BetaBoost-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a415166ea762b4076d28c8d7426a3df3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3866,
        "upload_time": "2021-10-24T17:48:21",
        "upload_time_iso_8601": "2021-10-24T17:48:21.071551Z",
        "url": "https://files.pythonhosted.org/packages/06/8a/464d6d07d931572d0b41bc439aa3ff00e33e4c9fb6d3bd10e45ee1f883a0/BetaBoost-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "068a464d6d07d931572d0b41bc439aa3ff00e33e4c9fb6d3bd10e45ee1f883a0",
        "md5": "a415166ea762b4076d28c8d7426a3df3",
        "sha256": "6cfcf33b03fb61291ee37b8928412975f700d10cb1387543cbb88880c0a0e05c"
      },
      "downloads": -1,
      "filename": "BetaBoost-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "a415166ea762b4076d28c8d7426a3df3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3866,
      "upload_time": "2021-10-24T17:48:21",
      "upload_time_iso_8601": "2021-10-24T17:48:21.071551Z",
      "url": "https://files.pythonhosted.org/packages/06/8a/464d6d07d931572d0b41bc439aa3ff00e33e4c9fb6d3bd10e45ee1f883a0/BetaBoost-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}