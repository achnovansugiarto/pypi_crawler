{
  "info": {
    "author": "BlackStoneReborn",
    "author_email": "BlackStoneOfficial3@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# pydeezloader\n\nThis project has been created to download songs, albums or playlists with Spotify or Deezer link from Deezer.\n\n# Disclaimer\n\n- I am not responsible for the usage of this program by other people.\n- I do not recommend you doing this illegally or against Deezer's terms of service.\n\n* ### OS's Supported ###\n\t![Linux Support](https://img.shields.io/badge/Linux-Support-brightgreen.svg)\n\t![macOS Support](https://img.shields.io/badge/macOS-Support-brightgreen.svg)\n\t![Windows Support](https://img.shields.io/badge/Windows-Support-brightgreen.svg)\n\n* ### Installation ###\n```bash\n$ pip install git+https://github.com/TheDeezLoader/pyDeezloader.git\n```\n\n# CLI interface\n\n```bash\n$ deez-dw -h\n```\n\tusage: deez-dw [-h] [-l LINK] [-s SONG] [-a ARTIST] [-o OUTPUT]\n                     [-q QUALITY] [-rq RECURSIVE_QUALITY]\n                     [-rd RECURSIVE_DOWNLOAD] [-g NOT_GUI] [-z ZIP]\n                     setting\n\n## OPTIONS\n\t-h, --help            show this help message and exit\n  \t-l LINK, --link LINK  Deezer or Spotify link for download\n  \t-s SONG, --song SONG  song name\n  \t-a ARTIST, --artist ARTIST\n                       \tartist song\n  \t-o OUTPUT, --output OUTPUT\n                        Output folder\n  \t-q QUALITY, --quality QUALITY\n                        Select download quality between FLAC, 320, 256, 128\n  \t-rq RECURSIVE_QUALITY, --recursive_quality RECURSIVE_QUALITY\n                        If choosen quality doesn't exist download with best\n                        possible quality (True or False)\n  \t-rd RECURSIVE_DOWNLOAD, --recursive_download RECURSIVE_DOWNLOAD\n                        If the song has already downloaded skip (True or\n                        False)\n  \t-g NOT_GUI, --not_gui NOT_GUI\n                        Show the little not_gui (True or False)\n  \t-z ZIP, --zip ZIP     If is an album or playlist link create a zip archive\n                        (True or False)\n\n# WEB interface\n\n```bash\n$ deez-web\n```\n\n## SETTINGS\n\t[login]\n\ttoken = deezer_arl_token\n\nUse the setting.ini file for deez-dw and deez-web only\n\n# Library\n\n### Initialize\n\n```python\nimport pydeezloader\n\ndownload = pydeezloader.Login(\"YOUR ARL TOKEN\")\n```\n\n### Download song\nDownload track by Spotify link\n\n```python\ndownload.download_trackspo(\n\t\"Insert the Spotify link of the track to download\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = False,\n\trecursive_download = False\n\tnot_interface = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality=True if selected quality isn't avalaible download with best quality possible\n#recursive_download=True if song has already been downloaded don't ask for download it again\n#not_interface=False if you want too see no download progress\n```\n\nDownload track by Deezer link\n```python\ndownload.download_trackdee(\n\t\"Insert the Deezer link of the track to download\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = False,\n\trecursive_download = False,\n\tnot_interface = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality = True if selected quality isn't avalaible download with best quality possible\n#recursive_download = True if song has already been downloaded don't ask for download it again\n#not_interface = True if you want too see no download progress\n```\n\n### Download album\nDownload album by Spotify link\n```python\ndownload.download_albumspo(\n\t\"Insert the Spotify link of the album to download\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = True,\n\trecursive_download = True,\n\tnot_interface = False,\n\tzips = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality = True if selected quality isn't avalaible download with best quality possible\n#recursive_download = True if song has already been downloaded don't ask for download it again\n#not_interface = True if you want too see no download progress\n#zips = True create a zip with all album songs\n```\n\nDownload album from Deezer link\n```python\ndownload.download_albumdee(\n\t\"Insert the Deezer link of the album to download\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = True,\n\trecursive_download = True,\n\tnot_interface = False,\n\tzips = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality = True if selected quality isn't avalaible download with best quality possible\n#recursive_download = True if song has already been downloaded don't ask for download it again\n#not_interface = True if you want too see no download progress\n#zips = True create a zip with all album songs\n```\n\n### Download playlist\n\nDownload playlist by Spotify link\n```python\ndownload.download_playlistspo(\n\t\"Insert the Spotify link of the album to download\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = True,\n\trecursive_download = True,\n\tnot_interface = False,\n\tzips = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality = True if selected quality isn't avalaible download with best quality possible\n#recursive_download = True if song has already been downloaded don't ask for download it again\n#not_interface = True if you want too see no download progress\n#zips = True create a zip with all album songs\n```\n\nDownload playlist from Deezer link\n```python\ndownload.download_playlistdee(\n\t\"Insert the Deezer link of the album to download\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = True,\n\trecursive_download = True,\n\tnot_interface = False,\n\tzips = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality = True if selected quality isn't avalaible download with best quality possible\n#recursive_download = True if song has already been downloaded don't ask for download it again\n#not_interface = True if you want too see no download progress\n#zips = True create a zip with all album songs\n```\n\n### Download name\n\nDownload by name\n```python\ndownload.download_name(\n\tartist = \"Eminem\",\n\tsong = \"Berzerk\",\n\toutput = \"Output folder, ending with /\",\n\tquality = \"MP3_320\",\n\trecursive_quality = False,\n\trecursive_download = False,\n\tnot_interface = False\n)\n#quality can be FLAC, MP3_320, MP3_256 or MP3_128\n#recursive_quality = True if selected quality isn't avalaible download with best quality possible\n#recursive_download = True if song has already been downloaded don't ask for download it again\n#not_interface = True if you want too see no download progress\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TheDeezLoader/pyDeezloader",
    "keywords": "",
    "license": "GNU General Public License V3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydeezloader",
    "package_url": "https://pypi.org/project/pydeezloader/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydeezloader/",
    "project_urls": {
      "Homepage": "https://github.com/TheDeezLoader/pyDeezloader"
    },
    "release_url": "https://pypi.org/project/pydeezloader/1.2/",
    "requires_dist": [
      "Flask",
      "flask-cors",
      "stagger",
      "mutagen",
      "pycryptodome",
      "requests (>=2.25.0)",
      "spotipy",
      "tqdm",
      "six (>=1.15.0)"
    ],
    "requires_python": ">=3.6.1",
    "summary": "Download Songs, Albums and Playlists - from Deezer and Spotify.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9887831,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "291c13f4376a9ffb53822bb083716fc2b636226841955fb1d10fc89dcc8f8b3d",
          "md5": "9ba6380177b6793fbd78b6a72ea3986e",
          "sha256": "243d4e4d78083dff0777345410059b65fdbdceb761d3c579e164eb6010415db1"
        },
        "downloads": -1,
        "filename": "pydeezloader-1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ba6380177b6793fbd78b6a72ea3986e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.1",
        "size": 95379,
        "upload_time": "2021-03-26T08:21:13",
        "upload_time_iso_8601": "2021-03-26T08:21:13.395210Z",
        "url": "https://files.pythonhosted.org/packages/29/1c/13f4376a9ffb53822bb083716fc2b636226841955fb1d10fc89dcc8f8b3d/pydeezloader-1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80e43050aac740fed40eff01779acafac0c4854a646412a1c4df4d982c441f28",
          "md5": "a6e4d5313a4369b6a45d332df4142a71",
          "sha256": "3b500d22800081e2ead296c456510a15478f8b19f268ae131e62ba8d98c6b9cc"
        },
        "downloads": -1,
        "filename": "pydeezloader-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a6e4d5313a4369b6a45d332df4142a71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 91065,
        "upload_time": "2021-03-26T08:21:14",
        "upload_time_iso_8601": "2021-03-26T08:21:14.862011Z",
        "url": "https://files.pythonhosted.org/packages/80/e4/3050aac740fed40eff01779acafac0c4854a646412a1c4df4d982c441f28/pydeezloader-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "291c13f4376a9ffb53822bb083716fc2b636226841955fb1d10fc89dcc8f8b3d",
        "md5": "9ba6380177b6793fbd78b6a72ea3986e",
        "sha256": "243d4e4d78083dff0777345410059b65fdbdceb761d3c579e164eb6010415db1"
      },
      "downloads": -1,
      "filename": "pydeezloader-1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ba6380177b6793fbd78b6a72ea3986e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.1",
      "size": 95379,
      "upload_time": "2021-03-26T08:21:13",
      "upload_time_iso_8601": "2021-03-26T08:21:13.395210Z",
      "url": "https://files.pythonhosted.org/packages/29/1c/13f4376a9ffb53822bb083716fc2b636226841955fb1d10fc89dcc8f8b3d/pydeezloader-1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80e43050aac740fed40eff01779acafac0c4854a646412a1c4df4d982c441f28",
        "md5": "a6e4d5313a4369b6a45d332df4142a71",
        "sha256": "3b500d22800081e2ead296c456510a15478f8b19f268ae131e62ba8d98c6b9cc"
      },
      "downloads": -1,
      "filename": "pydeezloader-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a6e4d5313a4369b6a45d332df4142a71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1",
      "size": 91065,
      "upload_time": "2021-03-26T08:21:14",
      "upload_time_iso_8601": "2021-03-26T08:21:14.862011Z",
      "url": "https://files.pythonhosted.org/packages/80/e4/3050aac740fed40eff01779acafac0c4854a646412a1c4df4d982c441f28/pydeezloader-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}