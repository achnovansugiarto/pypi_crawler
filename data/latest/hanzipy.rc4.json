{
  "info": {
    "author": "昆汀",
    "author_email": "synkx@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Hanzipy\n<p align=\"center\">\n    <a href=\"https://circleci.com/gh/Synkied/hanzipy\">\n        <img src=\"https://circleci.com/gh/Synkied/hanzipy.svg?style=svg\" alt=\"TravisCI Build Status\"/>\n    </a>\n</p>\n\n\nHanzipy is a Chinese character and NLP module for Chinese language processing for python.  \nIt is primarily written to help provide a framework for Chinese language learners to explore Chinese.  \nIt was translated from the awesome library provided by nieldlr: https://github.com/nieldlr/hanzi\n\nThe following README is copy/pasted from the above repository but adapted for the python language.\n\nAt present features include:\n\n- Character decomposition into components\n- Dictionary definition lookup using CC-CEDICT\n- Phonetic Regularity Computation\n- Example Word Calculations\n\nFuture features planned:\n\n- Futur plans to include IDS: https://github.com/cjkvi/cjkvi-ids\n\nCurrently the data was generated by Gavin Grover\nhttp://groovy.codeplex.com/wikipage?title=cjk-decomp\n\n## Install\n\n```python\npip install hanzipy\n```\n\n## How to use\n\n### Initiate Hanzipy. Required.\n\n```python\n# import dictionary\nfrom hanzipy.decomposer import HanziDecomposer\ndecomposer = HanziDecomposer()\n# import decomposer\nfrom hanzipy.dictionary import HanziDictionary\ndictionary = HanziDictionary()\n\n```\n\nhanzipy has been seperated into two different modules for clarity purposes.\nThe `decomposer` aims to focus on character or phrase decomposition.\nThe `dictionary` is has the name implies, focused on providing dictionary entries and phrase examples.\n\n### Hanzi Dictionary\n\n#### dictionary.definition_lookup(character/word, script_type=None)\n\nReturns a dictionary entry object. ```script_type``` is optional.\n\n```script_type``` parameters:\n\n- \"simplified\" - Simplified\n- \"traditional\" - Traditional\n\n```python\nprint(dictionary.definition_lookup(\"雪\"))\n\n[\n    {\n        \"traditional\": \"雪\",\n        \"simplified\": \"雪\",\n        \"pinyin\": \"Xue3\",\n        \"definition\": \"surname Xue\",\n    },\n    {\n        \"traditional\": \"雪\",\n        \"simplified\": \"雪\",\n        \"pinyin\": \"xue3\",\n        \"definition\": \"snow/CL:場|场[chang2]/(literary) to wipe away (a humiliation etc)\",  # noqa\n    },\n]\n\nprint(dictionary.definition_lookup(\"這\", \"traditional\"))\n[\n    {\n        \"traditional\": \"這\",\n        \"simplified\": \"这\",\n        \"pinyin\": \"zhe4\",\n        \"definition\": \"this/these/(commonly pr. [zhei4] before a classifier, esp. in Beijing)\",\n    }\n]\n```\n\n#### dictionary.dictionary_search(characters, search_type=None)\n\nSearches the dictionary based on input. ```search_type``` changes what data it returns. Defaults to None.\n\n```search_type``` parameters:\n\n- \"only\" - this parameter returns only entries with the characters specfied. This is a means to find all compounds words with the characters specified.\n- None - returns all occurences of the character.\n\n```python\nprint(dictionary.dictionary_search(\"雪\"))\n\n[\n    {\n        \"traditional\": \"一雪前恥\",\n        \"simplified\": \"一雪前耻\",\n        \"pinyin\": \"yi1 xue3 qian2 chi3\",\n        \"definition\": \"to wipe away a humiliation (idiom)\",\n    },\n    {\n        \"traditional\": \"下雪\",\n        \"simplified\": \"下雪\",\n        \"pinyin\": \"xia4 xue3\",\n        \"definition\": \"to snow\",\n    },\n    {\n        \"traditional\": \"伸雪\",\n        \"simplified\": \"伸雪\",\n        \"pinyin\": \"shen1 xue3\",\n        \"definition\": \"variant of 申雪[shen1 xue3]\",\n    },\n    {\n        \"traditional\": \"似雪\",\n        \"simplified\": \"似雪\",\n        \"pinyin\": \"si4 xue3\",\n        \"definition\": \"snowy\",\n    },\n    {\n        \"traditional\": \"冰天雪地\",\n        \"simplified\": \"冰天雪地\",\n        \"pinyin\": \"bing1 tian1 xue3 di4\",\n        \"definition\": \"a world of ice and snow\",\n    },\n    {\n        \"traditional\": \"冰雪\",\n        \"simplified\": \"冰雪\",\n        \"pinyin\": \"bing1 xue3\",\n        \"definition\": \"ice and snow\",\n    },\n    {\n        \"traditional\": \"冰雪皇后\",\n        \"simplified\": \"冰雪皇后\",\n        \"pinyin\": \"Bing1 xue3 Huang2 hou4\",\n        \"definition\": \"Dairy Queen (brand)\",\n    },\n    {\n        \"traditional\": \"冰雪聰明\",\n        \"simplified\": \"冰雪聪明\",\n        \"pinyin\": \"bing1 xue3 cong1 ming5\",\n        \"definition\": \"exceptionally intelligent (idiom)\",\n    },\n    {\n        \"traditional\": \"各人自掃門前雪，莫管他家瓦上霜\",\n        \"simplified\": \"各人自扫门前雪，莫管他家瓦上霜\",\n        \"pinyin\": \"ge4 ren2 zi4 sao3 men2 qian2 xue3 , mo4 guan3 ta1 jia1 wa3 shang4 shuang1\",\n        \"definition\": \"sweep the snow from your own door step, don't worry about the frost on your neighbor's roof (idiom)\",\n    },\n    {\n        \"traditional\": \"哈巴雪山\",\n        \"simplified\": \"哈巴雪山\",\n        \"pinyin\": \"Ha1 ba1 xue3 shan1\",\n        \"definition\": \"Mt Haba (Nakhi: golden flower), in Lijiang 麗江|丽江, northwest Yunnan\",\n    },\n    {\n        \"traditional\": \"單板滑雪\",\n        \"simplified\": \"单板滑雪\",\n        \"pinyin\": \"dan1 ban3 hua2 xue3\",\n        \"definition\": \"to snowboard\",\n    },\n    {\n        \"traditional\": \"報仇雪恥\",\n        \"simplified\": \"报仇雪耻\",\n        \"pinyin\": \"bao4 chou2 xue3 chi3\",\n        \"definition\": \"to take revenge and erase humiliation (idiom)\",\n    },\n    {\n        \"traditional\": \"報仇雪恨\",\n        \"simplified\": \"报仇雪恨\",\n        \"pinyin\": \"bao4 chou2 xue3 hen4\",\n        \"definition\": \"to take revenge and wipe out a grudge (idiom)\",\n    },\n]\n[....] # Truncated for display purposes\n\nprint(dictionary.dictionary_search(\"心的小孩真\", \"only\"))\n\n[\n    {\"traditional\": \"孩\", \"simplified\": \"孩\", \"pinyin\": \"hai2\", \"definition\": \"child\"},\n    {\n        \"traditional\": \"小\",\n        \"simplified\": \"小\",\n        \"pinyin\": \"xiao3\",\n        \"definition\": \"small/tiny/few/young\",\n    },\n    {\n        \"traditional\": \"小孩\",\n        \"simplified\": \"小孩\",\n        \"pinyin\": \"xiao3 hai2\",\n        \"definition\": \"child/CL:個|个[ge4]\",\n    },\n    {\n        \"traditional\": \"小小\",\n        \"simplified\": \"小小\",\n        \"pinyin\": \"xiao3 xiao3\",\n        \"definition\": \"very small/very few/very minor\",\n    },\n    {\n        \"traditional\": \"小心\",\n        \"simplified\": \"小心\",\n        \"pinyin\": \"xiao3 xin1\",\n        \"definition\": \"to be careful/to take care\",\n    },\n    {\n        \"traditional\": \"小的\",\n        \"simplified\": \"小的\",\n        \"pinyin\": \"xiao3 de5\",\n        \"definition\": \"I (when talking to a superior)\",\n    },\n    {\n        \"traditional\": \"心\",\n        \"simplified\": \"心\",\n        \"pinyin\": \"xin1\",\n        \"definition\": \"heart/mind/intention/center/core/CL:顆|颗[ke1],個|个[ge4]\",\n    },\n    {\n        \"traditional\": \"的\",\n        \"simplified\": \"的\",\n        \"pinyin\": \"de5\",\n        \"definition\": \"of/~'s (possessive particle)/(used after an attribute)/(used to form a nominal expression)/(used at the end of a declarative sentence for emphasis)/also pr. [di4] or [di5] in poetry and songs\",\n    },\n    {\n        \"traditional\": \"的\",\n        \"simplified\": \"的\",\n        \"pinyin\": \"di1\",\n        \"definition\": \"see 的士[di1 shi4]\",\n    },\n    {\n        \"traditional\": \"的\",\n        \"simplified\": \"的\",\n        \"pinyin\": \"di2\",\n        \"definition\": \"really and truly\",\n    },\n    {\"traditional\": \"的\", \"simplified\": \"的\", \"pinyin\": \"di4\", \"definition\": \"aim/clear\"},\n    {\n        \"traditional\": \"真\",\n        \"simplified\": \"真\",\n        \"pinyin\": \"zhen1\",\n        \"definition\": \"really/truly/indeed/real/true/genuine\",\n    },\n    {\n        \"traditional\": \"真心\",\n        \"simplified\": \"真心\",\n        \"pinyin\": \"zhen1 xin1\",\n        \"definition\": \"sincere/heartfelt/CL:片[pian4]\",\n    },\n    {\n        \"traditional\": \"真真\",\n        \"simplified\": \"真真\",\n        \"pinyin\": \"zhen1 zhen1\",\n        \"definition\": \"really/in fact/genuinely/scrupulously\",\n    },\n]\n\n\n```\n\n#### dictionary.get_examples(character)\n\nThis function does a dictionary_search(), then compares that to the Leiden University corpus for vocabulary frequency, then sorts the dictionary entries into three categories in an array: [high frequency, medium frequency and low frequency].\n\nThe frequency categories are determined relative to the frequency distribution of the dictionary_search data compared to the corpus.\n\n```python\nprint(dictionary.get_examples(\"橄\"))\n\n{\n    \"high_frequency\": [\n        {\n            \"traditional\": \"橄欖\",\n            \"simplified\": \"橄榄\",\n            \"pinyin\": \"gan3 lan3\",\n            \"definition\": \"Chinese olive/olive\",\n        },\n        {\n            \"traditional\": \"橄欖油\",\n            \"simplified\": \"橄榄油\",\n            \"pinyin\": \"gan3 lan3 you2\",\n            \"definition\": \"olive oil\",\n        },\n    ],\n    \"mid_frequency\": [\n        {\n            \"traditional\": \"橄欖球\",\n            \"simplified\": \"橄榄球\",\n            \"pinyin\": \"gan3 lan3 qiu2\",\n            \"definition\": \"football played with oval-shaped ball (rugby, American football, Australian rules etc)\",\n        },\n        {\n            \"traditional\": \"橄欖綠\",\n            \"simplified\": \"橄榄绿\",\n            \"pinyin\": \"gan3 lan3 lu:4\",\n            \"definition\": \"olive-green (color)\",\n        },\n    ],\n    \"low_frequency\": [\n        {\n            \"traditional\": \"橄欖枝\",\n            \"simplified\": \"橄榄枝\",\n            \"pinyin\": \"gan3 lan3 zhi1\",\n            \"definition\": \"olive branch/symbol of peace\",\n        },\n        {\n            \"traditional\": \"橄欖樹\",\n            \"simplified\": \"橄榄树\",\n            \"pinyin\": \"gan3 lan3 shu4\",\n            \"definition\": \"olive tree\",\n        },\n        {\n            \"traditional\": \"橄欖石\",\n            \"simplified\": \"橄榄石\",\n            \"pinyin\": \"gan3 lan3 shi2\",\n            \"definition\": \"olivine (rock-forming mineral magnesium-iron silicate (Mg,Fe)2SiO4)/peridot\",\n        },\n    ],\n}\n```\n\n<!-- #### hanzi.segment(phrase) - NOT YET AVAILABLE\n\nReturns an array of characters that are segmented based on a longest match lookup.\n\n````python\nprint(hanzi.segment(\"我們都是陌生人。\"))\n\n[\"我們\", \"都\", \"是\", \"陌生人\", \"。\"]\n```` -->\n\n#### dictionary.get_pinyin(character)\n\nReturns all possible pinyin data for a character.\n\n```python\nprint(dictionary.get_pinyin(\"的\"))\n\n[\"de5\", \"di1\", \"di2\", \"di4\"]\n```\n\n#### dictionary.get_character_frequency(character)\n\nReturns frequency data for a character based on the Junda corpus. The data is in simplified characters, but I made the function script agnostic. So both traditional and simplified will return the same data.\n\n```python\nprint(dictionary.get_character_frequency(\"热\"))\n\n{\n    \"number\": 606,\n    \"character\": \"热\",\n    \"count\": \"67051\",\n    \"percentage\": \"79.8453694124\",\n    \"pinyin\": \"re4\",\n    \"meaning\": \"heat/to heat up/fervent/hot (of weather)/warm up\",\n}\n```\n\n#### dictionary.get_character_in_frequency_list_by_position(position)\n\nGets a character based on its position the frequency list. This only goes up to 9933 based on the Junda Frequency list.\n\n```python\nprint(dictionary.get_character_in_frequency_list_by_position(111))\n\n{\n    \"number\": 111,\n    \"character\": \"机\",\n    \"count\": \"339823\",\n    \"percentage\": \"43.7756134862\",\n    \"pinyin\": \"ji1\",\n    \"meaning\": \"machine/opportunity/secret\",\n}\n```\n\n#### dictionary.determine_phonetic_regularity(decomposition_object/character)\n\nThis function takes a decomposition object created by hanzipy.decompose() or a character, then returns an object that displays all possible combinations of phonetic regularity relationship of the character to all its components.\n\nPhonetic Regularity Scale:\n\n- 0 = No regularity\n- 1 = Exact Match (with tone)\n- 2 = Syllable Match (without tone)\n- 3 = Similar in Initial (alliterates)\n- 4 = Similar in Final (rhymes)\n\nThe object returned is organized by the possible pronunciations of the character. You may notice duplicate entries in the fields, but these are there based on the similarities between the decomposition levels. It is up to the developer to use this data or not.\n\n```python\nprint(dictionary.determine_phonetic_regularity(\"洋\"))\n\n{\n    \"yang2\": {\n        \"character\": \"洋\",\n        \"component\": [\"氵\", \"羊\", \"羊\", \"氵\", \"羊\", \"羊\"],\n        \"phonetic_pinyin\": [\n            \"shui3\",\n            \"Yang2\",\n            \"yang2\",\n            \"shui3\",\n            \"Yang2\",\n            \"yang2\",\n        ],\n        \"regularity\": [0, 1, 1, 0, 1, 1],\n    }\n}\n\n```\n\n### Hanzi Decomposer\n\n#### decomposer.decompose(character, decomposition_type=None)\n\nA function that takes a Chinese character and returns an object with decomposition data. Type of decomposition is optional.\n\nType of decomposition levels:\n\n- 1 - \"Once\" (only decomposes character once),\n- 2 - \"Radical\" (decomposes character into its lowest radical components),\n- 3 - \"Graphical\" (decomposes into lowest forms, will be mostly strokes and small indivisable units)\n\n```python\ndecomposition = decomposer.decompose(\"爱\")\nprint(decomposition)\n\n{\n    \"character\": \"爱\",\n    \"once\": [\"No glyph available\", \"友\"],\n    \"radical\": [\"爫\", \"冖\", \"𠂇\", \"又\"],\n    \"graphical\": [\"爫\", \"冖\", \"𠂇\", \"㇇\", \"㇏\"],\n}\n\n# Example of forced level decomposition\n\ndecomposition = hanzi.decompose(\"爱\", 2)\nprint(decomposition)\n\n{\"character\": \"爱\", \"components\": [\"爫\", \"冖\", \"𠂇\", \"又\"]}\n```\n\n#### decomposer.decompose_many(character string, type of decomposition)\n\nA function that takes a string of characters and returns one object for all characters.\n\n```python\ndecomposition = hanzi.decompose_many(\"爱橄黃\")\nprint(decomposition)\n\n{\n    \"爱\": {\n        \"character\": \"爱\",\n        \"once\": [\"No glyph available\", \"友\"],\n        \"radical\": [\"爫\", \"冖\", \"𠂇\", \"又\"],\n        \"graphical\": [\"爫\", \"冖\", \"𠂇\", \"㇇\", \"㇏\"],\n    },\n    \"橄\": {\n        \"character\": \"橄\",\n        \"once\": [\"木\", \"敢\"],\n        \"radical\": [\"木\", \"No glyph available\", \"耳\", \"⺙\"],\n        \"graphical\": [\"一\", \"丨\", \"八\", \"匚\", \"二\", \"丨\", \"二\", \"丿\", \"一\", \"乂\"],\n    },\n    \"黃\": {\n        \"character\": \"黃\",\n        \"once\": [\"廿\", \"No glyph available\"],\n        \"radical\": [\"黃\"],\n        \"graphical\": [\"卄\", \"一\", \"一\", \"二\", \"丨\", \"凵\", \"八\"],\n    },\n}\n```\n\n#### decomposer.component_exists(character/component)\n\nCheck if a component/character exists in the data. Returns boolean value.\n\n```python\nprint(decomposer.component_exists(\"乂\"))\n\nTrue\n\nprint(decomposer.component_exists(\"$\"))\n\nFalse\n```\n\n#### decomposer.get_characters_with_component(component)\n\nReturns an array of characters with the given component. If a component has bound forms, such as 手 and 扌, they\"re considered the same and returns all the characters with the component.\n\nNB: This feature is new. Data might not be hundred percent correct and consistent.\n\n```python\nprint(decomposer.get_characters_with_component(\"囗\"))\n\n[\"国\",\"因\",\"西\",\"回\",\"口\",\"四\",\"团\",\"图\",\"围\",\"困\",\"固\",\"园\",\"圆\",\"圈\",\"囚\",\"圃\",\"囤\",\"囿\",\"囡\",\"囫\",\"圜\",\"囵\",\"囹\",\"圄\",\"囝\",\"圉\",\"圊\",\"釦\"]\n```\n\n#### decomposer.get_radical_meaning(radical)\n\nReturns a short, usually one-word, meaning of a radical.\n\n```python\nprint(decomposer.get_radical_meaning(\"氵\"))\n\nwater\n```\n\n## Projects\n\nHanzipy is used in the following projects:\n\n## Contributors\n\n- [synkied (Author)](https://github.com/synkied)\n\n## License\n\nHanzipy uses data from various sources:\n\n- [CEDICT](http://cc-cedict.org/wiki/)\n- [Gavin Grover's Decomposition Data](http://cjkdecomp.codeplex.com/license)\n- [Leiden Word Frequency Data](http://lwc.daanvanesch.nl/legal.php)\n- [Jun Da Character Frequency Data](http://lingua.mtsu.edu/chinese-computing/copyright.html)\n\nOther data files are either generated by Hanzipy or are not in use at present in the software.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Synkied/hanzipy/archive/1.0.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Synkied/hanzipy",
    "keywords": "python,hanzi,hanzipy,decomposition,cjk,dictionary",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hanzipy",
    "package_url": "https://pypi.org/project/hanzipy/",
    "platform": null,
    "project_url": "https://pypi.org/project/hanzipy/",
    "project_urls": {
      "Download": "https://github.com/Synkied/hanzipy/archive/1.0.3.tar.gz",
      "Homepage": "https://github.com/Synkied/hanzipy"
    },
    "release_url": "https://pypi.org/project/hanzipy/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Hanzi decomposition and dictionary",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13661935,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5817406374ad312f858082a9c911dcee10fa235f730d7cb19e00c517cdda4c82",
          "md5": "6d58e9059db85e6dbe2d83767daf140a",
          "sha256": "be5471dd79936999c465c9d89efad7a36190877690a1dfce614f35d24afdaaf2"
        },
        "downloads": -1,
        "filename": "hanzipy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d58e9059db85e6dbe2d83767daf140a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26407,
        "upload_time": "2021-12-27T16:07:29",
        "upload_time_iso_8601": "2021-12-27T16:07:29.039415Z",
        "url": "https://files.pythonhosted.org/packages/58/17/406374ad312f858082a9c911dcee10fa235f730d7cb19e00c517cdda4c82/hanzipy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f219689ca5bbfb2c68e42504a0af5f37a3442ed4a51914fc74c1e5599adc9a57",
          "md5": "f493797eac11aa0907804d87acb9ff8d",
          "sha256": "acc0c6745301fdac9e7874f8885c908974ed12d6e9acf910e448196ae4f8a951"
        },
        "downloads": -1,
        "filename": "hanzipy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f493797eac11aa0907804d87acb9ff8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7688434,
        "upload_time": "2022-01-03T19:03:46",
        "upload_time_iso_8601": "2022-01-03T19:03:46.923536Z",
        "url": "https://files.pythonhosted.org/packages/f2/19/689ca5bbfb2c68e42504a0af5f37a3442ed4a51914fc74c1e5599adc9a57/hanzipy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0e8230a161377f5fdd2cbf6defa9995806380507ba471c67bf6bf6c89b2ee0b",
          "md5": "6d9eaca6a61055e928322beb502fae79",
          "sha256": "571db918a1cca1031aa4045326b8e219bb115828abef98c687dfadce87f77680"
        },
        "downloads": -1,
        "filename": "hanzipy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6d9eaca6a61055e928322beb502fae79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7687523,
        "upload_time": "2022-01-03T19:18:47",
        "upload_time_iso_8601": "2022-01-03T19:18:47.189565Z",
        "url": "https://files.pythonhosted.org/packages/e0/e8/230a161377f5fdd2cbf6defa9995806380507ba471c67bf6bf6c89b2ee0b/hanzipy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34bbe5f4fe439ffa99e011ec67559e86d043ca90d12a51aef259876103bfa251",
          "md5": "66d1be8945f7bceaa30bb4831e513e0c",
          "sha256": "bd4c319e081f4f8a8e3b3f2faea966b4751fe1a759184b09873756db00504dc5"
        },
        "downloads": -1,
        "filename": "hanzipy-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "66d1be8945f7bceaa30bb4831e513e0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7687768,
        "upload_time": "2022-04-29T07:28:35",
        "upload_time_iso_8601": "2022-04-29T07:28:35.888204Z",
        "url": "https://files.pythonhosted.org/packages/34/bb/e5f4fe439ffa99e011ec67559e86d043ca90d12a51aef259876103bfa251/hanzipy-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34bbe5f4fe439ffa99e011ec67559e86d043ca90d12a51aef259876103bfa251",
        "md5": "66d1be8945f7bceaa30bb4831e513e0c",
        "sha256": "bd4c319e081f4f8a8e3b3f2faea966b4751fe1a759184b09873756db00504dc5"
      },
      "downloads": -1,
      "filename": "hanzipy-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "66d1be8945f7bceaa30bb4831e513e0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7687768,
      "upload_time": "2022-04-29T07:28:35",
      "upload_time_iso_8601": "2022-04-29T07:28:35.888204Z",
      "url": "https://files.pythonhosted.org/packages/34/bb/e5f4fe439ffa99e011ec67559e86d043ca90d12a51aef259876103bfa251/hanzipy-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}