{
  "info": {
    "author": "Derek Anderson",
    "author_email": "public@kered.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. figure:: misc/header.png\n   :alt: header\n\n   header\n\nygit\n====\n\nA tiny (yocto) git client for `MicroPython <https://micropython.org/>`__\nmicrocontrollers / other memory-constrained environments (<100k) like\nthe\n`$6 <https://www.amazon.com/Teyleten-Robot-ESP-WROOM-32-Development-Microcontroller/dp/B08246MCL5>`__\n`ESP32 <https://en.wikipedia.org/wiki/ESP32>`__. It speaks to git\nHTTP/HTTPS servers using the ubiquitous `smart client\nprotocol <https://www.git-scm.com/docs/http-protocol#_smart_clients>`__.\nI use it to remotely deploy/update code.\n\nInstall\n-------\n\n.. code:: bash\n\n   $ wget https://raw.githubusercontent.com/keredson/ygit/main/ygit.py\n   $ mpy-cross ygit.py\n   $ ampy -p /dev/ttyUSB0 put ygit.mpy\n\nGet Started\n-----------\n\nTo clone a repo, run:\n\n.. code:: python\n\n   >>> repo = ygit.clone('https://github.com/turfptax/ugit_test.git')\n\nIf you don’t want to clone into the root directory of your device, pass\na target directory as a second argument. This will produce a shallow\nclone (at ``HEAD``) by default. It will not delete any files in the\ntarget directory, but it will overwrite them if conflicting. The normal\ngit files you’d expect (``config``, ``*.pack``, ``IDX``) will be in\n``.ygit``. You only need to run this once.\n\nTo update:\n\n.. code:: python\n\n   >>> repo.pull()\n\nWhich is the same as:\n\n.. code:: python\n\n   >>> repo.fetch()\n   >>> repo.checkout()\n\nThese are incremental operations. It will only download git objects you\ndon’t already have, and only update files when their SHA1 values don’t\nmatch.\n\nAPI\n---\n\n.. code:: python\n\n   # make a new clone\n   repo = ygit.clone(repo, directory='.', shallow=True, cone=None, \n                     quiet=False, ref='HEAD', username=None, password=None)\n\n   # control an already cloned repository\n   repo = ygit.Repo(directory='.')\n\n   # control\n   repo.checkout(ref='HEAD')\n   repo.pull(shallow=True, quiet=False, ref='HEAD')\n   repo.fetch(shallow=True, quiet=False, ref='HEAD')\n   repo.status(ref='HEAD')\n   repo.tags()\n   repo.branches()\n   repo.pulls()\n   repo.update_authentication(username, password)\n   repo.log()\n\nA ``ref`` is one of: - ``HEAD`` - a commit (ex:\n``7b36b4cb1616694d8562f3adea656a709b9831d9``) - a branch / tag / pull\n\nRead the `full\ndocumentation <https://ygit.readthedocs.io/en/latest/api.html>`__.\n\nDesign\n------\n\nShallow Cloning\n~~~~~~~~~~~~~~~\n\nBy default clones are\n`shallow <https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/>`__\nto save space. If you try to checkout an unknown ref, ``ygit`` will\nfetch a new packfile from the original server.\n\nSubdirectory Cloning\n~~~~~~~~~~~~~~~~~~~~\n\nUsually I don’t want to clone an entire project onto my ESP32. The\npython I want on the device is in a subdirectory of a larger project.\nThe ``cone`` argument will take a path, and only files in that directory\nwill be checked out (as if it were the top level).\n\n**TODO:** Do a blob filter to only fetch objects we intend to check out.\n\nAuthentication\n~~~~~~~~~~~~~~\n\nSupply a username/password to ``clone()``. The credentials will be\nstored on the device, AES encrypted with the machine id as the key. For\nGitHub, use your `personal access\ntoken <https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token>`__\nas the password (just like w/ regular ``git``).\n\nTests\n-----\n\n-  *Prereq:* Run ``nginx -c \"$(pwd)/misc/test_nginx.conf\" -e stderr`` in\n   the background for the local teets.\n-  ``pytest test_localhost.py`` (runs local tests)\n-  ``pytest test_gh.py`` (runs github tests)\n-  ``pytest test_micropython.py`` (**WARNING:** will wipe all files\n   except ``boot.py`` from your MicroPython device at ``/dev/ttyUSB0``.)\n\nAs a convenience, running ``python test_micropython.py`` (note\n``python`` instead of ``pytest``) will run only the reset device code. I\ntypically run\n``python test_micropython.py && picocom /dev/ttyUSB0 -b 115200`` when\nmaking a change.\n\nExample Run\n-----------\n\n::\n\n   $ picocom /dev/ttyUSB0 -b 115200\n\n   MicroPython v1.19.1 on 2022-06-18; ESP32 module with ESP32\n   Type \"help()\" for more information.\n\n   >>> import ygit\n   >>> repo = ygit.clone('https://github.com/keredson/ygit.git','ygit')\n   cloning https://github.com/keredson/ygit.git into ygit @ HEAD\n   fetching: https://github.com/keredson/ygit.git @ HEAD\n   fetching commit: bc0f8c042d06f3c78be2066af11419357d1b6e0e\n   Enumerating objects: 26, done.\n   Counting objects:   3% (1/26)\n   [...]\n   Counting objects: 100% (26/26), done.\n   Compressing objects:   8% (2/24)\n   [...]\n   Compressing objects: 100% (24/24), done.\n   >>>>>>>>>>>>>>>>>>>>>>>\n   Total 26 (delta 0), reused 15 (delta 0), pack-reused 0\n   ##########################\n   checking out bc0f8c042d06f3c78be2066af11419357d1b6e0e\n   writing: ygit/.gitignore (BLOB)\n   writing: ygit/.readthedocs.yml (BLOB)\n   writing: ygit/LICENSE (BLOB)\n   writing: ygit/README.md (BLOB)\n   writing: ygit/deploy.sh (BLOB)\n   writing: ygit/pyproject.toml (BLOB)\n   writing: ygit/requirements.txt (BLOB)\n   writing: ygit/setup.py (BLOB)\n   writing: ygit/test_gh.py (BLOB)\n   writing: ygit/test_localhost.py (BLOB)\n   writing: ygit/test_micropython.py (BLOB)\n   writing: ygit/ygit.py (BLOB)\n   writing: ygit/docs/Makefile (BLOB)\n   writing: ygit/docs/api.rst (BLOB)\n   writing: ygit/docs/conf.py (BLOB)\n   writing: ygit/docs/index.rst (BLOB)\n   writing: ygit/docs/make.bat (BLOB)\n   writing: ygit/docs/usage.rst (BLOB)\n   writing: ygit/docs/source/api.rst (BLOB)\n   writing: ygit/docs/source/conf.py (BLOB)\n   writing: ygit/docs/source/index.rst (BLOB)\n   writing: ygit/docs/source/usage.rst (BLOB)\n   writing: ygit/misc/header.png (BLOB)\n   writing: ygit/misc/header.xcf (BLOB)\n   writing: ygit/misc/test_nginx.conf (BLOB)\n   >>> \n   >>> repo.pull()\n   fetching: https://github.com/keredson/ygit.git @ HEAD\n   fetching commit: bc0f8c042d06f3c78be2066af11419357d1b6e0e\n   up to date!\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/keredson/ygit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ygit",
    "package_url": "https://pypi.org/project/ygit/",
    "platform": null,
    "project_url": "https://pypi.org/project/ygit/",
    "project_urls": {
      "Homepage": "https://github.com/keredson/ygit"
    },
    "release_url": "https://pypi.org/project/ygit/0.4.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tiny (yocto) git client for MicroPython.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17536709,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "176ce38dc6d9b9fa9cb849bbc71be62ae5ce223430dca0774950ac28d636703d",
          "md5": "643ebe8f854ca84f2ad2f2cc885d3b99",
          "sha256": "cf87f0b9521d4c90b7c2585a2f16427d761ad9c9b09cb753f2abe10facbd7423"
        },
        "downloads": -1,
        "filename": "ygit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "643ebe8f854ca84f2ad2f2cc885d3b99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20185,
        "upload_time": "2023-03-28T23:01:00",
        "upload_time_iso_8601": "2023-03-28T23:01:00.812017Z",
        "url": "https://files.pythonhosted.org/packages/17/6c/e38dc6d9b9fa9cb849bbc71be62ae5ce223430dca0774950ac28d636703d/ygit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7629e619adc1d3bd05dddcd010b12c0329ede1877ea70d0b5dd15fc1632ec6d5",
          "md5": "bef6010db0cbc82ed8ec9065256daf34",
          "sha256": "81c0335e3dbd31cf366a34900641a7cb6700d360133e238f803c4ec5bf76465a"
        },
        "downloads": -1,
        "filename": "ygit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bef6010db0cbc82ed8ec9065256daf34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20691,
        "upload_time": "2023-03-28T23:03:46",
        "upload_time_iso_8601": "2023-03-28T23:03:46.108295Z",
        "url": "https://files.pythonhosted.org/packages/76/29/e619adc1d3bd05dddcd010b12c0329ede1877ea70d0b5dd15fc1632ec6d5/ygit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "428269e4b9061766557ed6061cf95c3745825ebb771f206a9a59d547594d9bc1",
          "md5": "c2ec98438e8e202d4fdcd3b07e0df2fb",
          "sha256": "eb6d764197c94770ce9477c7b4b40fb0af8a83331f592ea131c2d60240cd8c2b"
        },
        "downloads": -1,
        "filename": "ygit-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2ec98438e8e202d4fdcd3b07e0df2fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21540,
        "upload_time": "2023-03-30T06:20:02",
        "upload_time_iso_8601": "2023-03-30T06:20:02.972540Z",
        "url": "https://files.pythonhosted.org/packages/42/82/69e4b9061766557ed6061cf95c3745825ebb771f206a9a59d547594d9bc1/ygit-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8ce3987a2c0bfe7bfe3cbd60567dcca71575d958ca27184c25961917abe50c4",
          "md5": "f88ba4ef9c8ea2d515620eaf37957bbe",
          "sha256": "1f526813698a691a382e196c5146dac950419302b2d833eb3ab04107082378d4"
        },
        "downloads": -1,
        "filename": "ygit-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f88ba4ef9c8ea2d515620eaf37957bbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24308,
        "upload_time": "2023-04-01T04:34:07",
        "upload_time_iso_8601": "2023-04-01T04:34:07.374345Z",
        "url": "https://files.pythonhosted.org/packages/a8/ce/3987a2c0bfe7bfe3cbd60567dcca71575d958ca27184c25961917abe50c4/ygit-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8ce3987a2c0bfe7bfe3cbd60567dcca71575d958ca27184c25961917abe50c4",
        "md5": "f88ba4ef9c8ea2d515620eaf37957bbe",
        "sha256": "1f526813698a691a382e196c5146dac950419302b2d833eb3ab04107082378d4"
      },
      "downloads": -1,
      "filename": "ygit-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f88ba4ef9c8ea2d515620eaf37957bbe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24308,
      "upload_time": "2023-04-01T04:34:07",
      "upload_time_iso_8601": "2023-04-01T04:34:07.374345Z",
      "url": "https://files.pythonhosted.org/packages/a8/ce/3987a2c0bfe7bfe3cbd60567dcca71575d958ca27184c25961917abe50c4/ygit-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}