{
  "info": {
    "author": "Jason Thomas",
    "author_email": "jarathomas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# vacheck\n\n[![image](https://img.shields.io/pypi/pyversions/vacheck)](https://pypi.org/project/vacheck/)\n[![pytest](https://github.com/verbal-autopsy-software/vacheck/actions/workflows/python-package.yml/badge.svg)](https://github.com/verbal-autopsy-software/vacheck/actions)\n\nData consistency checks for verbal autopsy (VA) data collected using the WHO \nVA instrument.\n\n```python\n>>> from vacheck.datacheck5 import datacheck5, get_example_input\n>>> input = get_example_input()\n>>> input.head\n<bound method NDFrame.head of        ID  i004a  i004b  i019a  i019b  i022a  i022b  i022c  i022d  i022e  ...  i450o  i451o  i452o  i453o  i454o  i455o  i456o  i457o  i458o  i459o\n0      d1    NaN    NaN    1.0    NaN    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n1      d2    NaN    NaN    NaN    1.0    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n2      d3    NaN    NaN    1.0    NaN    NaN    1.0    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n3      d4    NaN    NaN    NaN    1.0    NaN    NaN    1.0      0      0  ...      0      0      0      0      0      0      0      0      0      0\n4      d5    NaN    NaN    1.0    NaN    NaN    NaN    1.0      0      0  ...      0      0      0      0      0      0      0      0      0      0\n..    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  ...    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...\n195  d196    NaN    NaN    NaN    1.0    NaN    NaN    1.0      0      0  ...      0      0      0      0      0      0      0      0      0      0\n196  d197    NaN    NaN    1.0    NaN    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n197  d198    NaN    NaN    1.0    NaN    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n198  d199    NaN    NaN    NaN    1.0    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n199  d200    NaN    NaN    NaN    1.0    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n\n[200 rows x 354 columns]>\n>>> pb = get_probbase()\n>>> checked_input = datacheck5(va_input=input.iloc[0], va_id=input.at[0, \"ID\"], probbase=pb)\n>>> checked_input.get(\"output\")\nID        d1\ni004a    NaN\ni004b    NaN\ni019a    1.0\ni019b    NaN\n        ... \ni455o      0\ni456o      0\ni457o      0\ni458o      0\ni459o      0\nName: 0, Length: 354, dtype: object\n>>> checked_input.get(\"first_pass\")[0]\n'd1   W610104-o (ever cry) only required for neonates - cleared in working information'\n>>> checked_input.get(\"second_pass\")\n[]\n>>> # run checks on entire DataFrame (takes a few seconds for 200 records)\n>>> check_all = input.apply(lambda x: datacheck5(x, x.ID, probbase=pb)[\"output\"], axis=1)\n>>> check_all\n       ID  i004a  i004b  i019a  i019b  i022a  i022b  i022c  i022d  i022e  ...  i450o  i451o  i452o  i453o  i454o  i455o  i456o  i457o  i458o  i459o\n0      d1    NaN    NaN    1.0    NaN    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n1      d2    NaN    NaN    NaN    1.0    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n2      d3    NaN    NaN    1.0    NaN    NaN    1.0    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n3      d4    NaN    NaN    NaN    1.0    NaN    NaN    1.0      0      0  ...      0      0      0      0      0      0      0      0      0      0\n4      d5    NaN    NaN    1.0    NaN    NaN    NaN    1.0      0      0  ...      0      0      0      0      0      0      0      0      0      0\n..    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  ...    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...\n195  d196    NaN    NaN    NaN    1.0    NaN    NaN    1.0      0      0  ...      0      0      0      0      0      0      0      0      0      0\n196  d197    NaN    NaN    1.0    NaN    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n197  d198    NaN    NaN    1.0    NaN    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n198  d199    NaN    NaN    NaN    1.0    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n199  d200    NaN    NaN    NaN    1.0    1.0    NaN    NaN      0      0  ...      0      0      0      0      0      0      0      0      0      0\n\n[200 rows x 354 columns]\n```\n\n# Details\n\nWith the development of the [**InterVA** algorithm](http://www.byass.uk/interva/), \nseveral data consistency checks were designed to ensure that indicators and \nsymptoms do not indicate conflicting information (e.g., male and pregnant).  \nFor example, the following are inconsistent:\n\n* *ageInDays*: 10 days\n* *How long did (s)he have a cough*: 4 weeks\n\nThe data checks try to reconcile inconsistencies like these.  In the original \nsoftware the data checks were defined in **probbase.xls** \n(the symptom-cause-information matrix with the conditional probabilities of \neach symptom given a cause -- see below for more information on the SCI,\nand the [InterVA User's Guide](http://www.byass.uk/interva/)).  \n\nEach type of consistency check is performed for each VA record, and then the \nprocess is repeated a second time.\n\nBefore the consistency checks are run, any VA record with missing information\non age or sex are removed -- these indicators are necessary for running the\nInterVA and InSilicoVA algorithms.\n\n## How each data check is performed\n\nThere are 3 types of data consistency checks\n\n1. **Don't ask**\n    * **Necessary Conditions** (for inconsistency)\n        + both symptoms have non-missing values\n        + index symptom == (Y or N) value in `subst` probbase column \n        + symptom in the `dontaskX` probbase column == last character\n        (Y or N) in that cell <br> (`dontaskX` ranges from `dontask1` to\n        `dontask8`)\n    * **Action**: index symptom is set to missing\n    * the log message is \"(don't ask symptom) cleared in working information\"\n   \n2. **Ask if**\n    * **Necessary Conditions**\n      + the index symptom == (Y or N) value in the `subst` probbase\n      column (and thus not a missing value)\n      + the symptom listed in the `doaskif` probbase column *does not* equal \n      the last character in that cell\n    * **Action**: assign the symptom listed in the `doaskif` to the last\n    character (Y or N) in that cell (concatenated to the symptom label, \n    e.g., `i022cY`)\n    * the log message is \"(ask if symptom label) updated in working information\"\n\n3. **Neonates only**\n   * **Necessary Conditions**\n     + index symptom == (Y or N) value in the `subst` probbase column\n       (and thus index symptom does not have a missing value)\n     + the decedent was NOT a neonate\n   * **Action**: assign the index symptom to missing\n   * the log message is \"(index symptom) only required for neonates - cleared\n   in working information\"\n\n## probbase\n\nRelevant columns in **probbase.xls**\n\n* **indic** (column A)\n* **subst** (column F)\n* **dontask1 - dontask8** (columns H - O)\n* **doaskif** (column P)\n* **nnonly** (column Q)\n\n```python\n>>> from vacheck.datacheck5 import get_probbase\n>>> probbase = get_probbase(keep_nan=True, keep_qdesc=True)\n>>> probbase.iat[0, 2]\n'probbase v18 20200403 '\n>>> probbase.columns\nIndex(['indic', 'qdesc', 'sdesc', 'who_2016', 'ilab', 'subst', 'samb',\n       'dontask1', 'dontask2', 'dontask3', 'dontask4', 'dontask5', 'dontask6',\n       'dontask7', 'dontask8', 'doaskif', 'nnonly', 'a_nrp', 'a_pend_6w',\n       'a_preg', 'b_0101', 'b_0102', 'b_0103', 'b_0104', 'b_0105', 'b_0106',\n       'b_0107', 'b_0108', 'b_0109', 'b_0110', 'b_0111', 'b_0112', 'b_0199',\n       'b_0201', 'b_0202', 'b_0203', 'b_0204', 'b_0205', 'b_0299', 'b_0301',\n       'b_0302', 'b_0303', 'b_0401', 'b_0402', 'b_0403', 'b_0499', 'b_0501',\n       'b_0502', 'b_0601', 'b_0602', 'b_0701', 'b_0801', 'b_0901', 'b_0902',\n       'b_0903', 'b_0904', 'b_0905', 'b_0906', 'b_0907', 'b_0908', 'b_0999',\n       'b_1001', 'b_1002', 'b_1003', 'b_1004', 'b_1006', 'b_1099', 'b_1101',\n       'b_1102', 'b_1201', 'b_1202', 'b_1203', 'b_1204', 'b_1205', 'b_1206',\n       'b_1207', 'b_1208', 'b_1209', 'b_1210', 'b_1299', 'b_9800', 'c_cult',\n       'c_emer', 'c_hsys', 'c_inev', 'c_know', 'c_resr'],\n      dtype='object')\n>>> probbase[[\"indic\", \"subst\", \"dontask1\", \"dontask8\", \"doaskif\", \"nnonly\"]]\n     indic subst dontask1 dontask8 doaskif nnonly\n1    prior   NaN      NaN      NaN     NaN    NaN\n2    i004a     Y   i004bY      NaN     NaN    NaN\n3    i004b     Y   i004aY      NaN     NaN    NaN\n4    i019a     Y   i019bY      NaN     NaN    NaN\n5    i019b     Y   i019aY      NaN     NaN    NaN\n..     ...   ...      ...      ...     ...    ...\n350  i455o     Y      NaN      NaN     NaN    NaN\n351  i456o     Y      NaN      NaN     NaN    NaN\n352  i457o     Y      NaN      NaN     NaN    NaN\n353  i458o     N      NaN      NaN     NaN    NaN\n354  i459o     Y      NaN      NaN     NaN    NaN\n\n[354 rows x 6 columns]\n```\n\n\n## Examples\n\n* *Don't ask*\n  + Log message: \"4 W610059-o (married) value inconsistent with W610022-a (65+) - \n  cleared in working information\"\n  + VA record ID is 4\n  + `i059o` - Was she married at the time of death? (with `subst == Y`)\n  + `i022a` - Was s(he) aged 65 years or more at death?\n  + `dontask6` - `i022aY` (don't ask item for index symptom `i059o` if\n  `i022a == Y`)\n  + **action**: `i059a` is changed (in the working copy of the data) from\n  Y to missing\n\n* Ask If\n  + Log message: \"7 W610152-o (fev nsw) not flagged in category W610147-o \n  (fever) - updated in working information\"\n  + VA record ID is 7\n  + `i152o` - Did (s)he have night sweats? (with `subst == Y`)\n  + `i147o` - During the illness that led to death, did (s)he have a fever?\n  + `doaskif` - do ask `i152o` if `i147o == Y`\n  + **action** `i147o` is changed from missing to Y\n\n* Neonates only\n  + Log message: \"103075 W610394-a (born 1st pr) only required for neonates -\n  cleared in working information\"\n  + VA record ID is 103075\n  + `i394a` - Was this baby born from the mother's first pregnancy?\n  + VA record was not a neonatal death\n  + **action** `i394a` is set to missing\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/verbal-autopsy-software/vacheck",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vacheck",
    "package_url": "https://pypi.org/project/vacheck/",
    "platform": null,
    "project_url": "https://pypi.org/project/vacheck/",
    "project_urls": {
      "Homepage": "https://github.com/verbal-autopsy-software/vacheck"
    },
    "release_url": "https://pypi.org/project/vacheck/0.0.2/",
    "requires_dist": [
      "pandas",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Verbal autopsy data consistency checks (from InterVA algorithm).",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15767559,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a297abc9b91e21612938747a1ca50fb8b521f006294e2017c56d5e58d1fab3ce",
          "md5": "94332ff4a565ef3ad5d52654aee0d2f3",
          "sha256": "a6474dbe7a8c19acc16313b84fc00a5f783b3de1d2424d2b0183d7594fcac470"
        },
        "downloads": -1,
        "filename": "vacheck-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94332ff4a565ef3ad5d52654aee0d2f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53164,
        "upload_time": "2022-07-25T18:41:00",
        "upload_time_iso_8601": "2022-07-25T18:41:00.880988Z",
        "url": "https://files.pythonhosted.org/packages/a2/97/abc9b91e21612938747a1ca50fb8b521f006294e2017c56d5e58d1fab3ce/vacheck-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "732d4ee0f4123fe7ae7ab32235a13a20e6d922ced4fc7d9e4f87bbe55646284c",
          "md5": "a0510dfbb045c93dc995e37d663c50b1",
          "sha256": "a2fdeb870ec403f182935ed9fd16ef31a4b585db21c886703493e5ec634c14a3"
        },
        "downloads": -1,
        "filename": "vacheck-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a0510dfbb045c93dc995e37d663c50b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52833,
        "upload_time": "2022-07-25T18:41:03",
        "upload_time_iso_8601": "2022-07-25T18:41:03.079382Z",
        "url": "https://files.pythonhosted.org/packages/73/2d/4ee0f4123fe7ae7ab32235a13a20e6d922ced4fc7d9e4f87bbe55646284c/vacheck-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8c4a193f6eb578de7f5782c2be480fe86a5551da73658d904603143ddbfcf5b",
          "md5": "5a48fdf22fb442e6278bc10169d5bbb7",
          "sha256": "cfba0d4bbb9010695dae01f8bf0271b82adcfa1f6d65a10ea0b74ab4634e5316"
        },
        "downloads": -1,
        "filename": "vacheck-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a48fdf22fb442e6278bc10169d5bbb7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 61391,
        "upload_time": "2022-11-14T21:43:42",
        "upload_time_iso_8601": "2022-11-14T21:43:42.560896Z",
        "url": "https://files.pythonhosted.org/packages/a8/c4/a193f6eb578de7f5782c2be480fe86a5551da73658d904603143ddbfcf5b/vacheck-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "395b9f0dd144b4a737fe0d7769b49a51508f03db0ad5af1cb6bf791f8c867061",
          "md5": "680955288f8cc1ef2e98d196f64fc7a2",
          "sha256": "bc1c7131e597517a35f8e30a8e6d01e04533841cff9625ae6cb5127c96b71bd4"
        },
        "downloads": -1,
        "filename": "vacheck-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "680955288f8cc1ef2e98d196f64fc7a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56144,
        "upload_time": "2022-11-14T21:43:45",
        "upload_time_iso_8601": "2022-11-14T21:43:45.022561Z",
        "url": "https://files.pythonhosted.org/packages/39/5b/9f0dd144b4a737fe0d7769b49a51508f03db0ad5af1cb6bf791f8c867061/vacheck-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8c4a193f6eb578de7f5782c2be480fe86a5551da73658d904603143ddbfcf5b",
        "md5": "5a48fdf22fb442e6278bc10169d5bbb7",
        "sha256": "cfba0d4bbb9010695dae01f8bf0271b82adcfa1f6d65a10ea0b74ab4634e5316"
      },
      "downloads": -1,
      "filename": "vacheck-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a48fdf22fb442e6278bc10169d5bbb7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 61391,
      "upload_time": "2022-11-14T21:43:42",
      "upload_time_iso_8601": "2022-11-14T21:43:42.560896Z",
      "url": "https://files.pythonhosted.org/packages/a8/c4/a193f6eb578de7f5782c2be480fe86a5551da73658d904603143ddbfcf5b/vacheck-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "395b9f0dd144b4a737fe0d7769b49a51508f03db0ad5af1cb6bf791f8c867061",
        "md5": "680955288f8cc1ef2e98d196f64fc7a2",
        "sha256": "bc1c7131e597517a35f8e30a8e6d01e04533841cff9625ae6cb5127c96b71bd4"
      },
      "downloads": -1,
      "filename": "vacheck-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "680955288f8cc1ef2e98d196f64fc7a2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56144,
      "upload_time": "2022-11-14T21:43:45",
      "upload_time_iso_8601": "2022-11-14T21:43:45.022561Z",
      "url": "https://files.pythonhosted.org/packages/39/5b/9f0dd144b4a737fe0d7769b49a51508f03db0ad5af1cb6bf791f8c867061/vacheck-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}