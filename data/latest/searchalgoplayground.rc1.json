{
  "info": {
    "author": "Sritabh Priyadarshi",
    "author_email": "sobydanny@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: pygame"
    ],
    "description": "# Search Algorithm Playground\n\n\nSearch Algorithm Playground is a python package to work with graph related algorithm, mainly dealing with different Artificial Intelligence Search alorithms.\nThe tool provides an user interface to work with the graphs and visualise the effect of algorithm on the graph while giving the freedom to programmer to make adjustments in the way they wants.\nIt also provides a way to save the graph in json format hence enabling the programmers to share the files and use different algorithm on same graph with ease.\n\nThe package is made using [pygame](https://www.pygame.org/) module.\n\n> Currently supports only undirected graphs \n\n<br>\n\n![AStarAlgoResult](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/AStar_Sample_output.png)\n\n<br>\n\n[![License: MPL 2.0](https://img.shields.io/badge/License-MPL%202.0-brightgreen.svg)](https://opensource.org/licenses/MPL-2.0) [![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n\n\n<br>\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Controls](#controls)\n- [Basic Use](#basic-use)\n- [Documentation](#documentation)\n- [Implemented Examples](https://github.com/SobyDamn/SearchAlgoPlayrgound-Examples)\n\n<br>\n\n\n# Installation\n\n## Install from pip\n\n```\npip install SearchAlgoPlayground\n```\n\n\n## Manually install it\n\nCopy the [repository](https://github.com/SobyDamn/SearchAlgorithmPlayground) in your system then do\n\n```\npython setup.py install\n```\n\nYou can also copy/paste the SearchAlgoPlayground folder into your project\n\n<br>\n\n# Controls\n\n## **Creating a node**\nDouble click on any empty block will create a node on it.\n\n> NOTE: Single click highlights the selected block and info label area will display it's location in 2D Matrix.\n<br>\n\n![NodeCreate](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/node_creator.gif)\n\n<br>\n\n## **Creating an edge between two nodes**\nClicking on a node single time selects the node for creating an edge with that.\n<br>\nSelect one node, once selected select another node to create an edge between them.\n\n![EdgeCreate](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/edge_creator.gif)\n\n<br>\n\n## **Modify element mode**\n\nDouble click on any element makes it go in modify mode which allows the element to be deleted or edited.\n\nTo delete an edge double click on it and then press _DELETE_\n\n![EdgeDelete](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/edge_delete.gif)\n\n\nTo edit an edge weight double click and use keyboard to modify it's value, once done hit _ENTER_ or click anywhere else.\n\n![EdgeWeightEdit](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/edge_weight_edit.gif)\n\n\nTo delete a node double click on it and then hit _DELETE_ on keyboard\n\n![DeleteNodeWithEdge](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/delete_node_with_edge.gif)\n\n\nTo edit node label double click on a node and use keyboard to modify the label, once done hit _ENTER_ or click anywhere else.\n\n> NOTE: Label of a node must be unique\n\n![EditNodeLabel](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/edit_node_label.gif)\n\n<br>\n\n## **Move nodes on the playground**\nClick on the node and drag it on the playground.\n\n![NodeDrag](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/node_drag.gif)\n\n\n<br>\n\n# Basic Use:\n\n- [simple PlayGround](#simple-playground)\n- [Loading graph from file](#loading-graph-from-file)\n- [Set filename to save your work into](#set-filename-to-save-your-work-into)\n- [PlayGround with weighted edge](#playground-with-weighted-edge)\n- [Setting up dimension for the world in playground](#setting-up-dimension-for-the-world-in-playground)\n- [Setting onStart event](#setting-onstart-event)\n- [Changing configuration for playground](#changing-configuration-for-playground)\n- [Working with neighbouring nodes](#working-with-neighbouring-nodes)\n\n## simple PlayGround:\nCreates PlayGround object with default values\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\npg = PlayGround() #Creating a playground object\npg.run() #run the playground\n```\n\n## Loading graph from file:\n\nMethod Used: [fromfilename()](#PlayGround.method.fromfilename)\n\n> NOTE: The graph file here in below example _Graph.json_ must have been saved by the playground, i.e. saved by clicking **_Save Work_** button.\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\npg = PlayGround.fromfilename(\"Graph.json\") #loading a playground from a file\npg.run() #run the playground\n```\n\n## Set filename to save your work into:\n\nParameter used: [saveToFile](#PlayGround.parameter.saveToFile)\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\npg = PlayGround(saveToFile = \"MyWork.json\") #Creating a playground object with name of the file provided where the work will be saved\npg.run() #run the playground\n```\n\n## PlayGround with weighted edge:\n\nParameter used: [weighted](#PlayGround.parameter.weighted)\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\npg = PlayGround(weighted=True) #Weighted playground\npg.run() #run the playground\n```\n\n\n## Setting up dimension for the world in playground:\n\nParameter used: [saveToFile](#PlayGround.parameter.saveToFile), [weighted](#PlayGround.parameter.weighted), [block_dimensions](#PlayGround.parameter.blocks_dimension)\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\n#A weighted playground with a name of the file where work need to be saved given as MyWork.json\n#block_dimension is dimension of 2D matrix (rows,cols) here both are 20\npg = PlayGround(saveToFile = \"MyWork.json\",weighted=True,blocks_dimension=(20,20))\npg.run() #run the playground\n```\n\n## Setting onStart event:\nMethod set as onStart will be executed once the Start button is clicked shown on playground.\n\nParameter used: [saveToFile](#PlayGround.parameter.saveToFile), [weighted](#PlayGround.parameter.weighted), [block_dimensions](#PlayGround.parameter.blocks_dimension)\n\nMethod used: [onStart()](#PlayGround.method.onStart)\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\n#A weighted playground with a name of the file where work need to be saved given as MyWork.json\n#block_dimension is dimension of 2D matrix (rows,cols) here both are 20\npg = PlayGround(saveToFile = \"MyWork.json\",weighted=True,blocks_dimension=(20,20))\n\n##Sample function to be put as start for playground\ndef sayHello():\n    print(\"Hello From Playground!\")\n\n\npg.onStart(sayHello) #Setting method for on start click\npg.run() #run the playground\n```\n\n\n## Changing configuration for playground:\nChanging values in configuration can modify the default values for PlayGround and world related to it.\n\n```python\nfrom SearchAlgoPlayground import PlayGround\nfrom SearchAlgoPlayground import config\nfrom SearchAlgoPlayground.config import YELLOW,PURPLE\n\nconfig[\"BACKGROUND_COLOR\"] = YELLOW #set background color as yellow\nconfig[\"NODE_COLOR\"] = PURPLE #set node color as purple\n\n#A weighted playground with a name of the file where work need to be saved given as MyWork.json\n#block_dimension is dimension of 2D matrix (rows,cols) here both are 20\npg = PlayGround(saveToFile = \"MyWork.json\",weighted=True,blocks_dimension=(20,20))\n\npg.run() #run the playground\n```\n\nBelow are the given default values, or look into the file [config.py](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/SearchAlgoPlayground/config.py)\n\n```python\nconfig = {\n    \"TITLE\":\"Algo PlayGround\",               #Title of the playground window\n    \"BLOCKS_DIMENSION\":(21,23),              #ROWS,COLUMNS\n    \"BLOCK_SIZE\":30,                         #Size of each block i.e. sides\n    \"BOTTOM_PANEL_HEIGHT\":200,               #Size of bottom panel for control\n    \"MARGIN\":15,                             #Margin between sides and the grid \n    \"GRID_WIDTH\":1,                          #Width of the boundary of the block\n    \"BACKGROUND_COLOR\":WHITE,                #Color of the background of the world\n    \"GRID_COLOR\":GRAY,                       #Block boundary color\n    \"HIGHLIGHT_COLOR\":DARK_GRAY,             #Highlighting color\n    \"BUTTON_COLOR_PRIMARY\":BROWN,            #Color for the button larger\n    \"BUTTON_COLOR_SECONDARY\": PURPLE,        #color for the smaller button\n    \"INFO_LABEL_COLOR\":DARK_GRAY,            #color for the info text\n    \"NODE_COLOR\":GRAY,                       #color of the node\n    \"NODE_BORDER_COLOR\":BLACK,               #color of the border of node\n    \"SPECIAL_NODE_BORDER_COLOR\": DARK_PURPLE,#Special node border color\n    \"SPECIAL_NODE_COLOR\":GREEN,              #special node color\n    \"SELECTED_NODE_COLOR\" : RED,             #color of the node selected\n    \"ELEMENT_ACTIVE_COLOR\":BLUE,             #Element selected by user is considered as active to the playground\n    \"MY_WORK_DIR\": \"MyGraph/\"                #Directory in which the work is saved\n}\n```\n<br>\n\n## Working with neighbouring nodes:\nParameter used: [saveToFile](#PlayGround.parameter.saveToFile), [weighted](#PlayGround.parameter.weighted), [block_dimensions](#PlayGround.parameter.blocks_dimension)\n\nMethod used: [onStart()](#PlayGround.method.onStart), [getStartNode()](#PlayGround.method.getStartNode), [MoveGen()](#PlayGround.method.MoveGen), [get_edge()](#PlayGround.method.get_edge),[get_weight()](#Edge.method.get_weight), [get_label()](#Node.method.get_label)\n\n```python\nfrom SearchAlgoPlayground import PlayGround\n\n#A weighted playground with a name of the file where work need to be saved given as MyWork.json\n#block_dimension is dimension of 2D matrix (rows,cols) here both are 20\npg = PlayGround(saveToFile = \"MyWork.json\",weighted=True,blocks_dimension=(20,20))\n\n#Function prints all the neighbouring nodes of the start node in the playground and the weight of the edge connecteding them\ndef printNeighbours():\n    S = pg.getStartNode() #get start node from playground\n\n    #MoveGen method returns the neighbouring nodes\n    neighbours = pg.MoveGen(S) #Generating the neighbouring nodes\n\n    #print details of the node\n    for node in neighbours:\n        #get weight of the edge between S and node\n        edge = pg.get_edge(S,node) #method will return Edge class object\n        weight = edge.get_weight() #method in Edge class will return weight of the edge\n\n        #Display the details\n        print(\"Edge: {} - {}, Weight: {}\".format(S.get_label(),node.get_label(),weight))\n\n\npg.onStart(printNeighbours) #Setting method for on start click\npg.run() #run the playground\n```\n\n**Above prints value for the following graph**\n\n![GRAPH](https://github.com/SobyDamn/SearchAlgorithmPlayground/raw/master/static/MoveGenExample.png)\n\n```bash\nEdge: S - A, Weight: 17\nEdge: S - B, Weight: 34\nEdge: S - C, Weight: 10\n```\n> ## Check more implemented examples [here](https://github.com/SobyDamn/SearchAlgoPlayrgound-Examples).\n\n<br>\n\n# Documentation\n\n## Classes\n\n- [PlayGround](#playground)\n- [World](#world)\n- [Block](#block)\n- [Node](#node)\n- [Edge](#edge)\n- UI Module\n  - [Label](#label)\n  - [Button](#Button)\n\n<br>\n\n## PlayGround\n\nPlayGround class represents the ground which which consists of the world of blocks on which the graph is displayed or modified. \nPlayGround class provide controls on the elements in the world like Edge and Nodes.\n\n\n### Parameters\n[world](#PlayGround.parameter.world), [saveToFile](#PlayGround.parameter.saveToFile), [weighted](#PlayGround.parameter.weighted), [startNode](#PlayGround.parameter.startNode), [goalNode](#PlayGround.parameter.goalNode), [block_dimensions](#PlayGround.parameter.blocks_dimension), [block_size](#PlayGround.parameter.block_size)\n<br>\n\n_**<h4 id=\"PlayGround.parameter.world\">world : World</h4>**_\nA World class object on which the nodes/edges are drawn\nThe screen size of the world determines the screensize of the playground window (default None).\n\n_**<h4 id=\"PlayGround.parameter.saveToFile\">saveToFile : str</h4>**_\nname of the file with which the world(or graph) will be saved(file will be saved in json format) when the 'Save Work' button is pressed (default None).\n\n_**<h4 id=\"PlayGround.parameter.weighted\">weighted : bool</h4>**_\nwhether the edges that will be drawn on playround is weighted or not (default False).\n\n_**<h4 id=\"PlayGround.parameter.startNode\">startNode : Node</h4>**_\na node object of Node class which will be set as start node for the graph.\nif no value is provided then top left block contains the start node 'S'\n<br>\n```NOTE: startNode is a special node which cannot be deleted from the playground(default None)```\n\n_**<h4 id=\"PlayGround.parameter.goalNode\">goalNode : Node</h4>**_\na node object of Node class which will be set as start node for the graph.\nif no value is provided then bottom right block contains the goal node 'G'<br>\n```NOTE: goalNode is a special node which cannot be deleted from the playground(default None)```\n\n_**<h4 id=\"PlayGround.parameter.blocks_dimension\">blocks_dimension : tuple</h4>**_\nblocks_dimension represents number of blocks that will be generated in the world if world object is given as None(default (23,21))\n<br>\ne.g (23,21) represents 23 rows and 21 columns\n\n**_<h4 id=\"PlayGround.parameter.block_size\">block_size : int</h4>_**\nsize of each block i.e. one side of the squared block (default 30)\n\n### Attribute\n[world](#PlayGround.attribute.world)\n\n_**<h4 id=\"PlayGround.attribute.world\">world: World</h4>**_\nWorld class object on which playground is available\n        \n### Methods\n[fromfilename()](#PlayGround.method.fromfilename), [addUIElement()](#PlayGround.method.addUIElement), [removeUIElement()](#PlayGround.method.removeUIElement), [onStart()](#PlayGround.method.onStart), [delay()](#PlayGround.method.delay),[getAllNodes()](#PlayGround.method.getAllNodes),[getAllEges()](#PlayGround.method.getAllEges), [MoveGen()](#PlayGround.method.MoveGen), [get_edge()](#PlayGround.method.get_edge), [getGoalNode()](#PlayGround.method.getGoalNode), [getStartNode()](#PlayGround.method.getStartNode), [setGoalNode()](#PlayGround.method.setGoalNode), [setStartNode()](#PlayGround.method.setStartNode), [getScreen()](#PlayGround.method.getScreen), [add_node()](#PlayGround.method.MoveGen), [add_edge()](#PlayGround.method.add_edge), [remove_edge()](#PlayGround.method.remove_edge), [remove_node()](#PlayGround.method.remove_node), [saveWork()](#PlayGround.method.saveWork), [showInfoText()](#PlayGround.method.showInfoText),[get_dimension()](#PlayGround.method.get_dimension), [to_dict()](#PlayGround.method.to_dict)\n<br>\n\n_**<h4 id=\"PlayGround.method.fromfilename\">fromfilename(filename:str)</h4>**_\na classmethod which returns PlayGround class object initialised from values given in filename and returns the object\n<br>\n_filename_: a json file name to which previously a playround is saved into\n\n_**<h4 id=\"PlayGround.method.addUIElement\">addUIElement(element)</h4>**_\nAdds UI element to the playground\n<br>\n```NOTE: any UI element must contain draw() method which takes pygame screen as a parameter, the method will be called each time frame is drawn```\n\n_**<h4 id=\"PlayGround.method.removeUIElement\">removeUIElement(element)</h4>**_\nRemoves UI element from the playground\n\n_**<h4 id=\"PlayGround.method.onStart\">onStart(func)</h4>**_\nSets function to be executed when the start button is clicked\n<br>\n_func_: function which will be executed when start is pressed\n\n_**<h4 id=\"PlayGround.method.delay\">delay(millisecond:int)</h4>**_\nDelays the program for given milliseconds\n<br>\nUses pygame.time.delay method\n<br>\nOnce the controls are taken away no other control would work on playground except exit\n<br>\n```NOTE: Using this delay function would allow to reflect changes on playground in delay mode better than instantaneous```\n\n_**<h4 id=\"PlayGround.method.MoveGen\">MoveGen(node:Node)</h4>**_\nReturns all the neighbours(in sorted order according to the label) of a node i.e. all the nodes which has edge between the given node\n<br>\n_node_: A Node class object\n\n_**<h4 id=\"PlayGround.method.get_edge\">get_edge(nodeStart:Node,nodeEnd:Node)->Edge</h4>**_\nReturns an Edge class object between the node nodeStart and nodeEnd, if no edge exists returns None\n_nodeStart_: A Node class object\n<br>\n_nodeEnd_: A Node class object\n\n_**<h4 id=\"PlayGround.method.getAllNodes\">getAllNodes()->list</h4>**_\nReturns all nodes available in the world as a list\n\n_**<h4 id=\"PlayGround.method.getAllEdges\">getAllEdges()->list</h4>**_\nReturns list of all edges available in world\n\n_**<h4 id=\"PlayGround.method.getGoalNode\">getGoalNode()->Node</h4>**_\nReturns Node class object which is currenty set as a goal node for the playground\n\n_**<h4 id=\"PlayGround.method.getSartNode\">getSartNode()->Node</h4>**_\nReturns Node class object which is currenty set as a start node for the playground\n\n_**<h4 id=\"PlayGround.method.setGoalNode\">setGoalNode(node:Node)</h4>**_\nSets the given node as goal node for the PlayGround\n_node_: A Node class object\n\n_**<h4 id=\"PlayGround.method.setStartNode\">setStartNode(node:Node)</h4>**_\nSets the given node as goal node for the PlayGround\n<br>\n_node_: A Node class object\n\n_**<h4 id=\"PlayGround.method.getScreen\">getScreen()</h4>**_\nReturns a pygame window object which is the surface on which the elements are being drawn\n<br>\nUseful in case more extra elements are needed to be drawn on the playground\n\n_**<h4 id=\"PlayGround.method.add_node\">add_node(node: Node)</h4>**_\nAdds node to the world\n<br>\n```NOTE: node available in the world will be displayed on the playground screen```\n\n_**<h4 id=\"PlayGround.method.add_edge\">add_edge(edge: Edge)</h4>**_\nAdds edge to the world\n<br>\n```NOTE: edge available in the world will be displayed on the playground screen```\n\n_**<h4 id=\"PlayGround.method.remove_edge\">remove_edge(edge:Edge)</h4>**_\nRemoves edge from the world\n\n_**<h4 id=\"PlayGround.method.remove_node\">remove_node(node:Node)</h4>**_\nRemoved node from the world\n\n_**<h4 id=\"PlayGround.method.saveWork\">saveWork(filename:str=None)</h4>**_\nSaves the playground with the given filename.\nif no filename is provided, then playground will be saved with arbitrary filename\n\n_**<h4 id=\"PlayGround.method.showInfoText\">showInfoText(text:str)</h4>**_\nTo display informational texts on the playground right above the start button\n<br>\n_text_: text to be displayed on the playground infoText area\n\n_**<h4 id=\"PlayGround.method.to_dict\">to_dict()->dict</h4>**_\nReturns Playrgound attributes as dictionary\n\n_**<h4 id=\"PlayGround.method.setTitle\">setTitle(title:str)</h4>**_\nSets the title of the playground window\n<br>\n_title_: a string value\n\n_**<h4 id=\"PlayGround.method.run\">run()</h4>**_\nruns the playground as an active window on which the frames are drawn\n\n---\n\n## World\n\nA World class represents the world for the playground which is responsible for Maintaining Node,Edge and Block of the playground\n\n### Parameters\n\n[blocks_dimension](#World.parameter.blocks_dimension), [block_size](#World.parameter.block_size), [bottom_panel_size](#World.parameter.bottom_panel_size), [grid_width](#World.parameter.grid_width), [background_color](#World.parameter.background_color), [gird_color](#World.parameter.gird_color), [margin](#World.parameter.margin)\n\n_**<h4 id=\"World.parameter.blocks_dimension\">blocks_dimension:tuple</h4>**_\nblocks_dimension represents number of blocks that will be generated in the world\ne.g (23,21) represents 23 rows and 21 columns\n\n_**<h4 id=\"World.parameter.block_size\">block_size:int</h4>**_\nsize of each block i.e. one side of the squared block\n\n_**<h4 id=\"World.parameter.bottom_panel_size\">bottom_panel_size:int</h4>**_\nheight of the bottom panel on which buttons and other UI element will be drawn\nmin allowed 180\n\n_**<h4 id=\"World.parameter.grid_width\">grid_width:int</h4>**_\nWidth of the grids\n\n_**<h4 id=\"World.parameter.background_color\">background_color:tuple</h4>**_\nA rgb value type of the form (r,g,b) to set color for the background of the world default (255,255,255)\n\n_**<h4 id=\"World.parameter.gird_color\">gird_color:tuple</h4>**_\nA rgb value type of the form (r,g,b) to set color for the blocks border of the world default (232, 232, 232)\n\n_**<h4 id=\"World.parameter.margin\">margin:int</h4>**_\nMargin from the edges of the playground window, minimum value allowed is 10, default 10\n\n### Methods\n[fromdict()](#World.method.fromdict), [create_grids()](#World.method.create_grids), [add_node()](#World.method.add_node), [remove_node()](#World.method.remove_node), [update_node_loc()](#World.method.update_node_loc), [getEdges()](#World.method.getEdges), [add_edge()](#World.method.add_edge), [remove_edge()](#World.method.remove_edge), [getNodes()](#World.method.getNodes), [getNode()](#World.method.getNode), [getBlock()](#World.method.getBlock), [get_dimension()](#World.method.get_dimension), [to_dict()](#World.method.to_dict)\n\n_**<h4 id=\"World.method.fromdict\">fromdict(datadict:dict)</h4>**_\nA classmethod to create World class object from a dictionary\n<br>\n```NOTE:The dictionary must be of the same form returned by to_dict() method of the class```\n\n_**<h4 id=\"World.method.create_grids\">create_grids()</h4>**_\nGenerates grids if not generated in the world, if the gird is already availbale then it redraws them\n\n_**<h4 id=\"World.method.add_node\">add_node(node:Node)</h4>**_\nAdds nodes to the world\n<br>\n```NOTE: To make the node visible on playground window it must be include in the world```\n\n_**<h4 id=\"World.method.remove_node\">remove_node(node:Node)</h4>**_\nRemoves nodes from the world\n<br>\n```NOTE: If nodes are not available in the world it will no longer visible on playground window```\n\n_**<h4 id=\"World.method.update_node_loc\">update_node_loc(node:Node,newBlock:Block)</h4>**_\nUpdates the location of the node to newBlock location and removes it from previous block.\n_node:Node_ - A Node class object which needs to be updated\nnewBlock:Block - A Block class object to which the node is require to move to\n\n_**<h4 id=\"World.method.getEdges\">getEdges()->dict</h4>**_\nReturns all the available edges in the world as dictionary with key as the node pairs ids\ne.g ((1,1),(1,5)) is the key for an edge between the node with id (1,1) and (1,5)\n<br>\n```NOTE: The id represents position in the 2D matrix of the block```\n\n_**<h4 id=\"World.method.add_edge\">add_edge(e:Edge)</h4>**_\nAdds edge to the world, edge added to the world will be visible on Playground window\n<br>\n```NOTE: Edges are added with the key of the end node ids e.g. ((1,1),(1,5)) is the key for an edge between the node with id (1,1) and (1,5)```\n\n_**<h4 id=\"World.method.remove_edge\">remove_edge(e:Edge)</h4>**_\nRemoves the edge from the world. The edge removed from the world will no longer be visible on the Playground window\n\n_**<h4 id=\"World.method.getEdge\">getEdge(startNodeID:tuple,endNodeID:tuple)->Edge</h4>**_\nReturns edge between startNodeID and endNodeID if there exists an edge else returns None\n_startNodeID:tuple_ - id of the node which has edge with the other node we're looking for\n_endNodeID:tuple_ - id of the node which has edge with the other node we're looking for\n\n_**<h4 id=\"World.method.getNodes\">getNodes()->dict</h4>**_\nReturns the dictionary of all the nodes available in the world\nKey of is the id of the node\n\n_**<h4 id=\"World.method.getNode\">getNode(key:tuple)->Node</h4>**_\nReturns node with given key, returns None if the node doesn't exists\n_key:tuple _- id of the node we are looking for,  location in the grid or 2D array.\n\n_**<h4 id=\"World.method.getBlock\">getBlock(id)->Block</h4>**_\nReturns block at the given id.\nid:tuple - Index Location in 2D matrix\n\n_**<h4 id=\"World.method.get_dimension\">get_dimension()->tuple</h4>**_\nReturns dimension of the world as tuple of (rows,col)\n\n_**<h4 id=\"World.method.to_dict\">to_dict()->dict</h4>**_\nreturns the object details with all attribute and values as dictionary\n\n---\n\n## Block\n\nBlock defines the world tiles. Blocks represents the world in 2-Dimensional array format.\n\n\n### Attribute\n[x](#Block.attribute.x), [y](#Block.attribute.y), [size](#Block.attribute.size), [id](#Block.attribute.id), [pgObj](#Block.attribute.pgObj)\n\n_**<h4 id=\"Block.attribute.x\">x:int</h4>**_\nx coordinate in the window plane of the block\n\n_**<h4 id=\"Block.attribute.y\">y:int</h4>**_\ny coordinate in the window plane of the block\n\n_**<h4 id=\"Block.attribute.size\">size:int</h4>**_\nsize of the block, denotes one side of the square block\n\n_**<h4 id=\"Block.attribute.id\">id:tuple</h4>**_\nid represents position in the 2D matrix of the block\n(x,y) where x is the row and y is the column\n\n_**<h4 id=\"Block.attribute.pgObj\">pgObj</h4>**_\npygame rect object\n\n\n### Parameters\n[x](#Block.parameter.x), [y](#Block.parameter.y), [size](#Block.parameter.size), [id](#Block.parameter.id), [gird_color](#Block.parameter.gird_color), [grid_width](#Block.parameter.grid_width)\n\n_**<h4 id=\"Block.parameter.x\">x:int</h4>**_\nx coordinate in the window plane of the block\n\n_**<h4 id=\"Block.parameter.y\">y:int</h4>**_\ny coordinate in the window plane of the block\n\n_**<h4 id=\"Block.parameter.size\">size:int</h4>**_\nsize of the block, denotes one side of the square block\n\n_**<h4 id=\"Block.parameter.id\">id:tuple</h4>**_\nid represents position in the 2D matrix of the block\n(x,y) where x is the row and y is the column\n\n_**<h4 id=\"Block.parameter.gird_color\">gird_color:tuple</h4>**_\nrgb color (r,g,b) value for the block boundary default ((163, 175, 204))\n\n_**<h4 id=\"Block.parameter.grid_width\">grid_width:int</h4>**_\nwidth of the boundary default 1\n\n\n### Methods\n[draw_block()](#Block.method.draw_block), [highlight()](#Block.method.highlight), [pos()](#Block.method.pos), [setHasNode()](#Block.method.setHasNode), [hasNode()](#Block.method.hasNode), [to_dict()](#Block.method.to_dict)\n\n_**<h4 id=\"Block.method.draw_block\">draw_block(screen)</h4>**_\ndraws the block on pygame window\nscreen: pygame window\n\n_**<h4 id=\"Block.method.highlight\">highlight(val:bool)</h4>**_\nhighlights block with highlist color\nval:bool - true to enable highlight\n\n_**<h4 id=\"Block.method.pos\">pos() -> tuple</h4>**_\nreturns the coordinate of the centre of the block on the pygame window\n\n_**<h4 id=\"Block.method.setHasNode\">setHasNode(val:bool)</h4>**_\nsets the value for the flag _hasNode to represent that a block contains a node\n\n_**<h4 id=\"Block.method.hasNode\">hasNode()->bool</h4>**_\nreturns true if block has node over it\n\n_**<h4 id=\"Block.method.to_dict\">to_dict()->dict</h4>**_\nreturns the object details with all attribute and values as dictionary\n\n---\n## Node\n\nA node is a type of block that is important to the world \nNode class inherits the Block class.\n\n### Parameters\n[block](#Node.parameter.block), [label](#Node.parameter.label), [colorOutline](#Node.parameter.colorOutline), [colorNode](#Node.parameter.colorNode), [outlineWidth](#Node.parameter.outlineWidth), [specialNodeStatus](#Node.parameter.specialNodeStatus)\n\n_**<h4 id=\"Node.parameter.block\">block:Block</h4>**_\nA Block class object on which the node will be drawn\n\n_**<h4 id=\"Node.parameter.label\">label:str</h4>**_\nLabel of the node\n\n_**<h4 id=\"Node.parameter.colorOutline\">colorOutline:tuple</h4>**_\nA rgb value of the form (r,g,b) represents outline color of the node\n\n_**<h4 id=\"Node.parameter.colorNode\">colorNode:tuple</h4>**_\nA rgb value of the form (r,g,b) represents color of the node\n\n_**<h4 id=\"Node.parameter.outlineWidth\">outlineWidth:int</h4>**_\nWidth of the outline of the node default 2\n\n_**<h4 id=\"Node.parameter.specialNodeStatus\">specialNodeStatus:bool</h4>**_\nsets whether the node is special default is False\n<br>\n```NOTE: A special node must be present on playground all time, i.e. delete is not allowed```\n\n### Attributes\n[x](#Node.attribute.x), [y](#Node.attribute.y), [size](#Node.attribute.size), [id](#Node.attribute.id), [pgObj](#Node.attribute.pgObj), [pos](#Node.attribute.pos)\n\n_**<h4 id=\"Node.attribute.x\">x:int</h4>**_\nx coordinate in the window plane of the block\n\n_**<h4 id=\"Node.attribute.y\">y:int</h4>**_\ny coordinate in the window plane of the block\n\n_**<h4 id=\"Node.attribute.size\">size:int</h4>**_\nsize of the block, denotes one side of the square block\n\n_**<h4 id=\"Node.attribute.id\">id:tuple</h4>**_\nid represents position in the 2D matrix of the block\n(x,y) where x is the row and y is the column\n\n_**<h4 id=\"Node.attribute.pgObj\">pgObj</h4>**_\npygame rect object\n\n_**<h4 id=\"Node.attribute.pos\">pos:tuple</h4>**_\ncoordinate in pygame window for center of the node\n\n### Methods\n[draw_block()](#Node.method.draw_block), [highlight()](#Node.method.highlight), [pos()](#Node.method.pos), [setHasNode()](#Node.method.setHasNode), [hasNode()](#Node.method.hasNode), [to_dict()](#Node.method.to_dict), [set_label()](#Node.method.set_label), [selected()](#Node.method.selected), [set_color()](#Node.method.set_color), [get_label()](#Node.method.get_label), [setLocation()](#Node.method.setLocation), [handle_event()](#Node.method.handle_event), [add_neighbour()](#Node.method.add_neighbour), [remove_neighbour()](#Node.method.remove_neighbour), [get_neighbours()](#Node.method.get_neighbours)\n\n_**<h4 id=\"Node.method.draw_block\">draw_block(screen)</h4>**_\ndraws the node on pygame window\nscreen: pygame window\n\n_**<h4 id=\"Node.method.highlight\">highlight(val:bool)</h4>**_\nhighlights block with highlist color\nval:bool - true to enable highlight\n\n_**<h4 id=\"Node.method.pos\">pos() -> tuple</h4>**_\nreturns the coordinate of the centre of the block on the pygame window\n\n_**<h4 id=\"Node.method.setHasNode\">setHasNode(val:bool)</h4>**_\nsets the value for the flag _hasNode to represent that a block contains a node\n\n_**<h4 id=\"Node.method.hasNode\">hasNode()->bool</h4>**_\nreturns true if block has node over it\n\n_**<h4 id=\"Node.method.to_dict\">to_dict()->dict</h4>**_\nreturns the object details with all attribute and values as dictionary\n\n_**<h4 id=\"Node.method.set_label\">set_label(label:str,screen)</h4>**_\nsets the label on the node\n_screen_ - a pygame window\n<br>\n_label:str_ - a string value that'll be displayed on node\n\n_**<h4 id=\"Node.method.selected\">selected(val:bool)</h4>**_\nsets isSelected flag value\n\n\n_**<h4 id=\"Node.method.set_color\">set_color(color:tuple)</h4>**_\nsets the color of the node\n<br>\n_color:tuple_ - A rgb value in the form (r,g,b)\n\n_**<h4 id=\"Node.method.get_label\">get_label()->str</h4>**_\nreturns value of label of the node\n\n_**<h4 id=\"Node.method.setLocation\">setLocation(block:Block)</h4>**_\nsets the location to the new block\nblock:Block - A Block class object\n<br>\n```NOTE: Location for nodes are defined by the block they resides on```\n\n_**<h4 id=\"Node.method.handle_event\">handle_event(world:World,event,infoLabel)</h4>**_\nInternal method to handle the pygame events\n\n_**<h4 id=\"Node.method.add_neighbour\">add_neighbour(node:Node)</h4>**_\nAdds the given node as neighbouring node if it's not already a neighbouring node, should be used when it has an edge with the given node\n<br>\n_node:Node_ - A Node class object\n\n_**<h4 id=\"Node.method.remove_neighbour\">remove_neighbour(node:Node)</h4>**_\nRemoves the given node from neighbouring node if it's in neighbouring node\n_node:Node_ - A Node class object\n\n_**<h4 id=\"Node.method.get_neighbours\">get_neighbour()->list</h4>**_\nReturns list of neighbouring nodes(Node class objects) which is sorted in order with their label\n\n---\n\n## Edge\n\n\nAn edge class represents an edge between 2 nodes\n\n### Parameters\n[nodeStart](#Edge.parameter.nodeStart), [nodeEnd](#Edge.parameter.nodeEnd), [isWeighted](#Edge.parameter.isWeighted), [weight](#Edge.parameter.weight), [edgeColor](#Edge.parameter.edgeColor), [edgeWidth](#Edge.parameter.edgeWidth), \n\n\n_**<h4 id=\"Edge.parameter.nodeStart\">nodeStart:Node</h4>**_\nA Node class object which represents the starting node of the edge\n\n_**<h4 id=\"Edge.parameter.nodeEnd\">nodeEnd:Node</h4>**_\nA Node class object which represents the ending node of the edge\n\n_**<h4 id=\"Edge.parameter.isWeighted\">isWeighted:bool</h4>**_\nWhether the edge drawn between the node has weight or not, default False\n\n_**<h4 id=\"Edge.parameter.weight\">weight:int</h4>**_\nWieght of the edge, default 0\n\n_**<h4 id=\"Edge.parameter.edgeColor\">edgeColor:tuple</h4>**_\nA rgb value of the form (r,g,b) which represents the color of the edge, default value _NODE_BORDER_COLOR_\n<br>\n_**<h4 id=\"Edge.parameter.edgeWidth\">edgeWidth:int</h4>**_\nWidth of the edge, default 3\n\n### Attribute\n[pgObj](#Edge.attribute.pgObj)\n\n_**<h4 id=\"Edge.attribute.pgObj\">pgObj</h4>**_\nA pygame rect object\n\n### Methods\n[handle_event()](#Edge.method.handle_event), [set_color()](#Edge.method.set_color), [collidePoint()](#Edge.method.collidePoint), [draw_edge()](#Edge.method.draw_edge), [getNodes()](#Edge.method.getNodes), [get_weight()](#Edge.method.get_weight), [to_dict()](#Edge.method.to_dict)\n\n_**<h4 id=\"Edge.method.handle_event\">handle_event(world:World,event,infoLabel)</h4>**_\nInternal method to handle the pygame events\n\n_**<h4 id=\"Edge.method.set_color\">set_color(color:tuple)</h4>**_\nSets color of the edge\ncolor:tuple - A rgb value of the form (r,g,b)\n\n_**<h4 id=\"Edge.method.collidePoint\">collidePoint(clickPoint,offeset=5)</h4>**_\nReturns true if the given click point is inside the offset value on edge\n\n_**<h4 id=\"Edge.method.draw_edge\">draw_edge(screen)</h4>**_\nDraws edge on the screen\nscreen - A pygame window\n\n_**<h4 id=\"Edge.method.getNodes\">getNodes()->tuple</h4>**_\nReturns the pair of node which the edge is connecting\n\n_**<h4 id=\"Edge.method.get_weight\">get_weight()->int</h4>**_\nReturns the weight of the edge\n\n_**<h4 id=\"Edge.method.to_dict\">to_dict()->dict</h4>**_\nReturns the object details its attributes and value as dictionary\n\n---\n\n\n\n# UI Module\n\n## Label\n\nLabel to add on pygame screens\n\n### Methods\n[draw()](#UI.Label.method.draw), [setValue()](#UI.Label.method.setValue)\n\n_**<h4 id=\"UI.Label.method.draw\">draw(screen)</h4>**_\nDraws the label on the pygame screen\nscreen: pygame screen\n\n_**<h4 id=\"UI.Label.method.setValue\">setValue(text:str)</h4>**_\nSet the value for label\n\n### Parameters\n[color](#UI.Label.parameter.color), [size](#UI.Label.parameter.size), [pos](#UI.Label.parameter.pos)\n\n_**<h4 id=\"UI.Label.parameter.color\">color:tuple</h4>**_\ncolor of the label in (r,g,b) format\n\n_**<h4 id=\"UI.Label.parameter.size\">size:int</h4>**_\nsize of the label\n\n_**<h4 id=\"UI.Label.parameter.pos\">pos:tuple</h4>**_\n(x,y) coordinates for the position of label\n\n---\n\n## Button\nButton elements for pygame screen\n\n### Method\n[draw_button()](#UI.Button.method.draw_button), [isClicked()](#UI.Button.method.isClicked)\n\n_**<h4 id=\"UI.Button.method.draw_button\">draw_button(screen)</h4>**_\ndraws button element on pygame screen\nscreen: pygame window\n\n_**<h4 id=\"UI.Button.method.isClicked\">isClicked(pos)</h4>**_\nReturns true if pos is a collidePos for the pygame rect element\n\n\n### Parameters\n[pos](#UI.Button.parameter.pos), [size](#UI.Button.parameter.size), [bgColor](#UI.Button.parameter.bgColor), [color](#UI.Button.parameter.color), [label](#UI.Button.parameter.label), [labelSize](#UI.Button.parameter.labelSize), [fill_value](#UI.Button.parameter.fill_value), \n\n_**<h4 id=\"UI.Button.parameter.pos\">pos:tuple</h4>**_\n(x,y) coordinates for the position of button\n\n_**<h4 id=\"UI.Button.parameter.size\">size:tuple</h4>**_\n(width,height) of the button\n\n_**<h4 id=\"UI.Button.parameter.bgColor\">bgColor:tuple</h4>**_\nbackground color for the  button\n\n_**<h4 id=\"UI.Button.parameter.color\">color:tuple</h4>**_\ncolor of the button label\n\n_**<h4 id=\"UI.Button.parameter.label\">label:str</h4>**_\nlabel of the button\n\n_**<h4 id=\"UI.Button.parameter.labelSize\">labelSize:int</h4>**_\nsize of the label\n\n_**<h4 id=\"UI.Button.parameter.fill_value\">fill_value:int</h4>**_\nfill value for pygame rect\n\n\n---\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SobyDamn/SearchAlgorithmPlayground",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SearchAlgoPlayground",
    "package_url": "https://pypi.org/project/SearchAlgoPlayground/",
    "platform": "",
    "project_url": "https://pypi.org/project/SearchAlgoPlayground/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SobyDamn/SearchAlgorithmPlayground/issues",
      "Homepage": "https://github.com/SobyDamn/SearchAlgorithmPlayground"
    },
    "release_url": "https://pypi.org/project/SearchAlgoPlayground/1.0.0/",
    "requires_dist": [
      "pygame (>=2.0.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Search Algorithm Playground is a python package to work with graph related algorithm, mainly dealing with different Artificial Intelligence Search alorithms.The tool provides an user interface to work with the graphs and visualise the effect of algorithm on the graph while giving the freedom to programmer to make adjustments in the way they wants. It also provides a way to save the graph in json format hence enabling the programmers to share the files and use different algorithm on same graph with ease.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11726399,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edb657893ba5e30b955c9a0b8657e8f5c4d447dd1e7267e646300c8a2ddca8be",
          "md5": "1fffc7fd4900b2756785352bbcf3c831",
          "sha256": "189d30cc38d873ac46449541d60f06e12c0f135b5c45748e57e6154151fc5ee6"
        },
        "downloads": -1,
        "filename": "SearchAlgoPlayground-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fffc7fd4900b2756785352bbcf3c831",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 85824,
        "upload_time": "2021-10-14T16:10:07",
        "upload_time_iso_8601": "2021-10-14T16:10:07.220883Z",
        "url": "https://files.pythonhosted.org/packages/ed/b6/57893ba5e30b955c9a0b8657e8f5c4d447dd1e7267e646300c8a2ddca8be/SearchAlgoPlayground-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a9ea868592cbd409493f7c9247c65484f12f1c7ae24dc746df208168e849a9d",
          "md5": "cf84afb3802443e571370eaf7c18fdf8",
          "sha256": "23aac5ffc7baf7f041d0b9231763d11c312df51da329c4b7daf08e12e84092e4"
        },
        "downloads": -1,
        "filename": "SearchAlgoPlayground-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf84afb3802443e571370eaf7c18fdf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 99026,
        "upload_time": "2021-10-14T16:10:10",
        "upload_time_iso_8601": "2021-10-14T16:10:10.428890Z",
        "url": "https://files.pythonhosted.org/packages/8a/9e/a868592cbd409493f7c9247c65484f12f1c7ae24dc746df208168e849a9d/SearchAlgoPlayground-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edb657893ba5e30b955c9a0b8657e8f5c4d447dd1e7267e646300c8a2ddca8be",
        "md5": "1fffc7fd4900b2756785352bbcf3c831",
        "sha256": "189d30cc38d873ac46449541d60f06e12c0f135b5c45748e57e6154151fc5ee6"
      },
      "downloads": -1,
      "filename": "SearchAlgoPlayground-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fffc7fd4900b2756785352bbcf3c831",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 85824,
      "upload_time": "2021-10-14T16:10:07",
      "upload_time_iso_8601": "2021-10-14T16:10:07.220883Z",
      "url": "https://files.pythonhosted.org/packages/ed/b6/57893ba5e30b955c9a0b8657e8f5c4d447dd1e7267e646300c8a2ddca8be/SearchAlgoPlayground-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a9ea868592cbd409493f7c9247c65484f12f1c7ae24dc746df208168e849a9d",
        "md5": "cf84afb3802443e571370eaf7c18fdf8",
        "sha256": "23aac5ffc7baf7f041d0b9231763d11c312df51da329c4b7daf08e12e84092e4"
      },
      "downloads": -1,
      "filename": "SearchAlgoPlayground-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cf84afb3802443e571370eaf7c18fdf8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 99026,
      "upload_time": "2021-10-14T16:10:10",
      "upload_time_iso_8601": "2021-10-14T16:10:10.428890Z",
      "url": "https://files.pythonhosted.org/packages/8a/9e/a868592cbd409493f7c9247c65484f12f1c7ae24dc746df208168e849a9d/SearchAlgoPlayground-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}