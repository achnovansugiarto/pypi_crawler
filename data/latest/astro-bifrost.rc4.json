{
  "info": {
    "author": "Michael Reefe",
    "author_email": "michael.reefe8@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# BIFR&#xd6;ST\n## Black hole Investigations of Forbidden-line Radiation in Optical SpecTra\n\nThis code aims to connect galaxy spectra to coronal line detections, just as \nthe burning rainbow bridge it is named after connects Asgard and Midgard, \nby providing a means of searching for them via a framework for analyzing spectra\nwith simple tests and a stacking procedure.\n\n## Installation\nAfter cloning the repository, you can install locally via pip: ` pip install . `\n<br>Or alternatively, ` python setup.py install ` All of the dependencies are listed in the\n`requirements.txt` file, and should be installed automatically.  These dependencies are:\n\n- `numpy < 1.21, >= 1.17`\n- `numba >= 0.53.1`\n- `pandas >= 1.3.2`\n- `tqdm >= 4.61.2`\n- `matplotlib >= 3.4.2`\n- `plotly >= 4.14.3`\n- `astropy >= 4.2.1`\n- `astroquery >= 0.4.2`\n- `spectres >= 2.1.1`\n- `scipy >= 1.7.0`\n- `joblib >= 1.0.1`\n- `PyAstronomy >= 0.16.0`\n- `kaleido >= 0.2.1`\n\n<br> I can't guarantee this package will work  for any versions of these requirements\noutside the suggestions above.\n\n## Documentation Summary\nMost of the functions of this module are built around three core objects: `Spectrum`, `Spectra`, \nand `Stack`. \nPlease see the source code for more detailed docstrings for each class and method.\n\n### Spectrum\nThe Spectrum class stores a single object's spectrum, including an array of wavelengths, fluxes, and 1-sigma errors.\nInformation about redshift, coordinates, and extinction can also be stored and (if available) used to apply corrections to\nthe spectrum.  The basic constructor is:\n<br>`class Spectrum(wave, flux, error, redshift=None, velocity=None, ra=None, dec=None, ebv=None, name='Generic',\n                 output_path=None, **data)`\n\n<br>There are also constructors available for creating an object directly from an SDSS-formatted FITS file:\n`Spectrum.from_fits`, and from completely simulated data: `Spectrum.simulated`.\n\nAs a side note, basic arithmetic operators (`+, -, *, /`) may be performed between Spectrum objects.  Doing so will create a new \nSpectrum object with the flux combined as expected, and the error will be propagated as well.  This is only possible if the two\nobjects being added have identical wavelength arrays and are both corrected, and they must also either both or neither be normalized.\n\n### Spectra\nThe Spectra object is a child of both Spectrum and dict.  It is a convenient way of storing many Spectrum objects together\nin a dictionary, with methods for correcting and plotting each Spectrum in the dictionary.  Also as a convenience, the object\ncan be indexed like a list or a dictionary.  i.e. if the first element in the dictionary has a key 'Spectrum A', it can be\nobtained either using the key 'Spectrum A', or the index 0.  There is also a method called `to_numpy` for converting any attributes\ninto numpy arrays.  Its basic constructor is no different from a typical dictionary:\n<br>`class Spectra()`\n<br>and items can be added with the `add_spec` method:\n`Spectra.add_spec(SpectrumA)`\n\n### Stack\nThe main attraction, the Stack object, is a child of the Spectra object, thus making it also dictionary-like. This class\nhas methods for stacking all the spectra inside it together, binning the spectra and then stacking each bin, calculating line flux\nratios, and many plotting methods.\n\nTo perform the stacking procedure, (which corrects all spectra in the Stack for redshift and extinction, normalizes them, \nresamples their fluxes over a uniform wavelength grid, and then coadds them using a weighted mean, with inverse variances used\nas weights), one must call the Stack object instance directly, i.e. if we have two Spectrum objects A and B:\n```python\n# Create the stack object\nstack = bifrost.Stack()\n# Create spectrum objects\nA = bifrost.Spectrum(wave1, flux1, error1, redshift1)\nB = bifrost.Spectrum(wave2, flux2, error2, redshift2)\n# Append Spectrum objects to the stack\nstack.add_spec(A)\nstack.add_spec(B)\n# Call the stacking procedure with the default arguments\nstack()\n```\n\n## Examples\nSee the example files in the examples folder to get a sense of how to use the code.\nFeel free to also run the unit tests located in `unit_test.py`.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Michael-Reefe/bifrost",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "astro-bifrost",
    "package_url": "https://pypi.org/project/astro-bifrost/",
    "platform": null,
    "project_url": "https://pypi.org/project/astro-bifrost/",
    "project_urls": {
      "Homepage": "https://github.com/Michael-Reefe/bifrost"
    },
    "release_url": "https://pypi.org/project/astro-bifrost/2.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Correct, normalize, coadd, and stack spectra together.",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14063522,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49c5b6e26f89babeb44cc0d7d49f2dc647def83cceef7e13333b0c3e12b61471",
          "md5": "2134faf5e93aac80bfcb7d53e66e675f",
          "sha256": "af178bb4cd768cd337a24aaf77b55838a10d6aa972c127c35863e137b9f24e91"
        },
        "downloads": -1,
        "filename": "astro-bifrost-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2134faf5e93aac80bfcb7d53e66e675f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 140801,
        "upload_time": "2022-06-06T22:22:30",
        "upload_time_iso_8601": "2022-06-06T22:22:30.344197Z",
        "url": "https://files.pythonhosted.org/packages/49/c5/b6e26f89babeb44cc0d7d49f2dc647def83cceef7e13333b0c3e12b61471/astro-bifrost-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71bb7da4438925121d16510d3787802ca238e2dfc1049ae5c69cf2e002bf3179",
          "md5": "10464305fe408f94c8095d74023553f3",
          "sha256": "12977eb3ee81e44e7bdb540cfedb27fb284262150133cc0b839738e0d6db16bf"
        },
        "downloads": -1,
        "filename": "astro-bifrost-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "10464305fe408f94c8095d74023553f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 141000,
        "upload_time": "2022-06-06T22:58:26",
        "upload_time_iso_8601": "2022-06-06T22:58:26.393449Z",
        "url": "https://files.pythonhosted.org/packages/71/bb/7da4438925121d16510d3787802ca238e2dfc1049ae5c69cf2e002bf3179/astro-bifrost-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8194d674150d593285331e342a0f9ecc7610b1c0927216eab05b40d39c8c1684",
          "md5": "78bdf0d1de78c8c08893751f1d964c3e",
          "sha256": "f986c3196777358c3cc0c0505447fb826903a9560aaba6571a14b9598ad5c337"
        },
        "downloads": -1,
        "filename": "astro-bifrost-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "78bdf0d1de78c8c08893751f1d964c3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 141019,
        "upload_time": "2022-06-07T19:08:31",
        "upload_time_iso_8601": "2022-06-07T19:08:31.057132Z",
        "url": "https://files.pythonhosted.org/packages/81/94/d674150d593285331e342a0f9ecc7610b1c0927216eab05b40d39c8c1684/astro-bifrost-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a609f30d2cbb7d2c795f98e8dc4401c386b08ca802ad35cc5c4b2ee8036ad75d",
          "md5": "1112236571a8e542fbce60e4f9eccf08",
          "sha256": "7cc31da3e58b2dbcdc87a77a562ace48db145280cdef166badc5c57e47bc5563"
        },
        "downloads": -1,
        "filename": "astro-bifrost-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1112236571a8e542fbce60e4f9eccf08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 141012,
        "upload_time": "2022-06-07T23:14:24",
        "upload_time_iso_8601": "2022-06-07T23:14:24.564907Z",
        "url": "https://files.pythonhosted.org/packages/a6/09/f30d2cbb7d2c795f98e8dc4401c386b08ca802ad35cc5c4b2ee8036ad75d/astro-bifrost-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a609f30d2cbb7d2c795f98e8dc4401c386b08ca802ad35cc5c4b2ee8036ad75d",
        "md5": "1112236571a8e542fbce60e4f9eccf08",
        "sha256": "7cc31da3e58b2dbcdc87a77a562ace48db145280cdef166badc5c57e47bc5563"
      },
      "downloads": -1,
      "filename": "astro-bifrost-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1112236571a8e542fbce60e4f9eccf08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 141012,
      "upload_time": "2022-06-07T23:14:24",
      "upload_time_iso_8601": "2022-06-07T23:14:24.564907Z",
      "url": "https://files.pythonhosted.org/packages/a6/09/f30d2cbb7d2c795f98e8dc4401c386b08ca802ad35cc5c4b2ee8036ad75d/astro-bifrost-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}