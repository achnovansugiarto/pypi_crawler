{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SuperRad\n\nSuperRad is an open-source python code for modelling ultralight boson clouds\nthat arise through black hole superradiance. It uses numerical\nresults in the relativistic regime combined with analytic estimates to describe\nthe dynamics and gravitational wave signals of ultralight scalar or vector clouds.\n\n## Installation \n\n### From PyPI \n\n```shell\npip install superrad\n```\n\n### From source\n\n```shell\ngit clone git@bitbucket.org:weast/superrad.git\ncd superrad\npip install .\n```\n\n## Dependencies\n\n* Required: [numpy](https://docs.scipy.org/doc/numpy/user/install.html), [scipy](https://www.scipy.org/install.html)\n\n* Optional (for running examples): [matplotlib](https://matplotlib.org/stable/users/installing/index.html)\n\nThese can all be installed with pip or conda.\n\n## Contact\n\n[Nils Siemonsen](https://www2.perimeterinstitute.ca/personal/nsiemonsen/)\n\n[Taillte May](https://perimeterinstitute.ca/people/taillte-may)\n\n[William East](https://www2.perimeterinstitute.ca/personal/weast/)\n\n## License\n\nSuperRad is licensed under the BSD 3-Clause License. See LICENSE for details.\n\n## Citation\n\nTo acknowledge using this package, please cite the following reference:\n\n```\n@article{Siemonsen:2022,\n      author = {{Siemonsen}, Nils and {May}, Taillte and {East}, William E.},\n      title          = \"{{SuperRad}: A black hole superradiance gravitational waveform model}\",\n}\n\n```\n\n## Usage\n\nFor a given ultralight boson spin (here 1 is chosen, corresponding to a vector) and cloud model (described below), \none first creates an `UltralightBoson` object. For some models, this requires reading in data files, etc., but only\nneeds to be done once. \n\n```python\n>>> from superrad import ultralight_boson as ub\n>>> bc = ub.UltralightBoson(spin=1, model=\"relativistic\")\n```\n\nA waveform model can then be constructed corresponding to specific physical parameters of the system, in this case an initial black hole of 20.8 solar masses, dimensionless spin of 0.7, and an ultralight boson mass of 1.16e-12 electronvolts. \n\n```python\n>>> wf = bc.make_waveform(20.8, 0.7, 1.16e-12, units=\"physical\")\n```\n\nThis can be used to determine various properties of the black hole-boson cloud system that arises through the superradiant instability. For example:\n\n```python\n>>> wf.cloud_growth_time() # Cloud growth time in seconds\n6057.590376604236\n>>> wf.mass_cloud(0) #Cloud mass at saturation in solar mass\n0.37023402627248814\n>>> wf.spin_bh_final() #Final black hole spin \n0.6216222486933041\n```\n\nIt can also be used to calculate the resulting gravitational wave signal as a function of time.\n\n```python\n>>> import numpy as np\n>>> sec_hour = 3600.0\n>>> t = np.linspace(0,24*sec_hour, 256) #time\n>>> thetaObs = np.pi/3 #Observing angle w.r.t. spin axis\n>>> hp,hx,delta = wf.strain_amp(t, thetaObs, dObs=100) # Strain at d=100 Mpc\n>>> fgw = wf.freq_gw(t)\n```\n\nPlotting this\n\n```python\n>>> from matplotlib import pyplot as plt\n>>> fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n>>> ax1.plot(t/sec_hour, hp, label=r\"$h_+$\")\n>>> ax1.plot(t/sec_hour, hx, label=r\"$h_\\times$\")\n>>> ax1.set_ylabel(r\"$h$\")\n>>> ax1.legend(loc=\"best\")\n>>> ax2.plot(t/sec_hour, fgw)\n>>> ax2.set_ylabel(r\"$f_{\\rm GW}$ (Hz)\")\n>>> ax2.set_xlabel(r\"$t$ (hours)\")\n>>> plt.show()\n```\nproduces (with a bit of formatting) the following:\n\n![strain_freq_example plot](documentation/strain_freq_example.png)\n\nMore examples can be found in [examples/run_example.py](examples/run_example.py) in the source code.\n\n## Contributing\n\nWe welcome contributions. If you find a bug or issue, please let us know through the [issue tracker](https://bitbucket.org/weast/superrad/issues?status=new&status=open). If you want to extend `superrad` substantially, feel free to reach out to us.\n\n## Documentation\n\nHere we document the front-end functionality of `superrad`.\n\n**1. UltralightBoson(spin=sp,model=\"relativistic\")**\n\n*Creates an UltralightBoson object with a specified CloudModel.*\n\nParameters:\n\n* `sp` is the spin of the ultralight boson being considered. Can take the values 0 or 1, for scalar or vector bosons respectively.\n\n* `model` can take values `\"relativistic\"` or `\"non-relativistic\"` depending on the regime of interest. \nThe most accurate results are obtained with `\"relativistic\"` by interpolating over numerical data. \nThe `\"non-relativistic\"` results are calculated analytically in the α << 1 limit  (where α is the dimensionless product of the boson mass and black hole mass) and can be used for comparison, for parameters not covered by `\"relativistic\"` (currently azimuthal numbers >2),\nor for faster results when accuracy is not important. These two models are discussed further below.\n\nReturns:\n\n* Returns an object of the UltralightBoson class.\n\n**1.1. UltralightBoson.make_waveform(self, Mbh, abh, mu, units=\"physical\", evo_type=\"matched\")**\n\n*Returns an object of the BosonCloudWaveform class.*\n\nParameters:\n\n* `Mbh` is the initial black hole mass (before cloud growth).\n\n* `abh` is the initial black hole dimensionless spin (before cloud growth), 0 < `abh` ≤ 1.\n\n* `mu` is the ultralight boson mass.\n\n* `units` specifies the units for input/output. Can take values `\"physical\"` or `\"natural\"`. Physical units are as follows: {mu : electronvolts, Mass : solar mass, time : seconds, frequency : Hz, Power : watts, Distance : Mpc}. Natural units assume G = c = hbar = 1. Note that, for natural units, the black hole mass should in units of the Planck mass in order for the cloud growth time (time for the cloud to grow from a single boson to saturation) to give a sensible result. If \"+alpha\" is appended to either \"physical\" or \"natural,\" then units are the same as above, except the input `mu` is taken to be in units of (hbar c^3)/(G Mbh) , i.e. mu is set to the dimensionless \"fine structure constant\" alpha.\n\n* `evo_type` can take values `evo_type=\"full\"` or `evo_type=\"matched\"`.  The \"matched\" evolution assumes that the boson cloud decays solely through gravitational radiation after reach its peak mass (by definition, t=0), and matches this on to a exponentially growing solution with constant growth rate before the peak mass is obtained (t<0). Hence, it is not very accurate around t=0, and in particular the derivative of the frequency will be discontinuous at this point. The \"full\" evolution option numerically integrates the ordinary differential equations describing the cloud mass and black hole mass and spin, and hence is more accurate for scenarios when the signal before the time when the cloud reaches saturation makes a non-negligible contribution. However, it is significantly more computationally expensive, and the numerical integration is not always robust. This option should currently be considered experimental. Details and a comparison of these methods can be found in the [main paper][1]. \n\nReturns:\n\n* Object of the BosonCloudWaveform class.\n\n\n**2. BosonCloudWaveform(mu, Mbh, abh, cloud_model, units=\"natural\")**\n\n*Calculates some derived quantities using the specified CloudModel and for a given black hole and boson field.*\n\nParameters:\n\n* `Mbh` is the initial black hole mass (before cloud growth).\n\n* `abh` is the initial black hole dimensionless spin (before cloud growth), 0 < `abh` ≤ 1.\n\n* `mu` is the ultralight boson mass.\n\n* `cloud_model` specifies the spin of the boson and whether to perform calculations using a relativistic or non-relativistic model. Within SuperRad,\n`cloud_model` has options `NonrelScalar()`, `NonrelVector()`, `RelScalar()` and\n`RelVector()`.\n\n* `units` specifies the units for input/output and is the same as in UltralightBoson.make_waveform().\n\nReturns:\n\n* An object of the BosonCloudWaveform class.\n \n**2.1. BosonCloudWaveform.efold_time()**\n\n*Gives the e-folding time of the growth of the mass of the boson cloud during the instability phase, before the saturation of the superradiance condition.*\n\nParameters: None\n\nReturns: \n\n* E-folding time of cloud mass, in units specified for the waveform.\n\n**2.2. BosonCloudWaveform.cloud_growth_time()**\n\n*Returns the time for cloud to grow from a single boson to saturation.*\n\nParameters: None\n\nReturns: \n\n* Growth time in units specified for the waveform.\n\n**2.3. BosonCloudWaveform.mass_cloud(t)**\n\n*Returns the mass of the boson cloud as a function of time.*\n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at its maximum.\n\nReturns:\n\n* Frequency at time `t` in units specified for the waveform.\n\n**2.4. BosonCloudWaveform.gw_time()**\n\n*Gives the characteristic timescale of GW emission (Mcloud/P_{GW}) at saturation.*\n\nParameters: None\n\nReturns:\n\n* Gravitational wave emission timescale in units specified for the waveform.\n \n**2.5. BosonCloudWaveform.power_gw(t)**\n\n*Returns power (luminosity) of gravitational waves as a function of time.*\n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at its maximum.\n\nReturns:\n\n* Gravitational wave power at time `t` in units specified for the waveform.\n \n**2.6. BosonCloudWaveform.freq_gw(t)**\n\n*Gives the frequency of the gravitational wave signal as a function of time.*\n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at its maximum.\n\nReturns:\n\n* Frequency at time `t` in units specified for the waveform.\n\n**2.7. BosonCloudWaveform.freqdot_gw(t)**\n\n*Returns the time derivative of the frequency of the gravitational wave signal as a function of time.*\n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at its maximum.\n\nReturns:\n\n* Frequency drift at time `t` in units specified for the waveform.\n\n**2.8. BosonCloudWaveform.phase gw(t)**\n\n*Return the gravitational wave phase as a function of time. Here we assume (take the approximation) that dω/dMcloud is a constant. By convention, the phase is zero at t = 0.*\n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at its maximum.\n\nReturns:\n\n* Gravitational wave phase at time `t`.\n \n**2.9. BosonCloudWaveform.strain_char(t, dObs=None)**\n\n*Returns a characteristic strain value, defined to be:*\n\n![h_0 := (10 P_{GW}(t)^(1/2) ) / (ω_{GW}dObs)](documentation/h0_pw.svg)\n\n*In the non-relativistic limit (and for azimuthal num=1), we have that:*\n\n![h_x = h_0 cos(θ) sin(φ(t)); h_+ = h_0 /2 (1 + cos^2(θ)) cos(φ(t)](documentation/hplus_cross.svg)\n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at it's maximum.\n\n* `dObs` is distance to source.\n\nReturns:\n\n* Gravitational wave strain h_0 at time `t`.\n \n**2.10. BosonCloudWaveform.strain amp(t, thetaObs, dObs=None)**\n\n*Returns the magnitude of the two polarizations of the strain (h_+, h_x ). This function also returns δ, where δ is the extra phase difference between polarizations. That is, the observed strain in terms\nof the antenna-response functions of detector I is:*\n\n![h_I = F^I_+(t) h_+(t) cos(φ(t)) + F^I_x h_x(t) sin(φ(t)+δ)](documentation/hI.svg)\n\n*Implicitly, an alignment between the observer's and the cloud's azimuthal angle is assumed\nat t=0, but arbitrary azimuthal viewing angles can be obtained trivially by rotation.* \n\nParameters:\n\n* `t` is time where `t=0` corresponds to the time when the cloud mass is at its maximum.\n\n* `thetaObs` is the inclination angle in radians with respect to spin axis of the source.\n\n* `dObs` is distance to the source.\n\nReturns: \n\n* (h_+ , h_x , δ) at time `t`.\n \n**2.11 BosonCloudWaveform.mass_bh_final()**\n\n*Returns the black hole mass after the superradiant instability saturates.*\n\nParameters: None\n\nReturns:\n\n* Black hole mass at saturation. \n \n**2.12 BosonCloudWaveform.spin_bh_final()**\n\n*The black hole dimensionless spin after the superradiant instability saturates.*\n\nParameters: None\n\nReturns:\n\n* Dimensionless spin of the black hole at saturation.\n \n**2.13 BosonCloudWaveform.azimuthal_num()**\n\n*Gives the azimuthal mode number of the boson cloud. The azimuthal number of the gravitational waves is twice this.\nThis is the azimuthal number of just the fastest growing mode.*\n\nParameters: None\n\nReturns:\n\n* Azimuthal number m.\n \n**3. CloudModel**\n\n*Abstract base class encompassing functions needed to compute ultralight boson cloud gravitational waves. All inputs are in natural units where the black hole mass Mbh = G = c = 1. In the `superrad` package, the implemented cloud models are: `RelScalar`, `RelVector`, `NonrelScalar`, and `NonrelVector`.*\n\n**3.1. CloudModel.max_azi_num()**\n\n*Finds the maximum azimuthal number for which the model is defined.*\n\nParameters: None\n\nReturns:\n\n* Azimuthal number m, above which the model will produce an error message.\n\n**3.2. CloudModel.max_spin()**\n\n*Finds the maximum spin for which the model is defined.*\n\nParameters: None\n\nReturns:\n\n* Dimensionless spin above which the model will produce an error message.\n \n**3.3. CloudModel.omega_real(m, alpha, abh, Mcloud)**\n\n*Returns the real frequency of the boson cloud’s oscillation.*\n\nParameters:\n\n* `m` is the azimuthal mode number.\n\n* `alpha` is the dimensionless product of the boson mass and the black hole mass.\n\n* `abh` is the dimensionless spin of the black hole.\n\n* `Mcloud` is the cloud mass as a fraction of the black hole mass.\n\nReturns:\n\n* Real frequency of cloud oscillation in natural units, where Mbh = 1.\n \n**3.4. CloudModel.domegar_dmc(m, alpha, abh, Mcloud)**\n\n*Returns the derivative of the real frequency of the boson cloud with respect to cloud mass.*\n\nParameters:\n\n* `m` is the azimuthal mode number.\n\n* `alpha` is the dimensionless product of the boson mass and the black hole mass.\n\n* `abh` is the dimensionless spin of the black hole.\n\n* `Mcloud` is the cloud mass as a fraction of the black hole mass.\n\nReturns:\n\n* Derivative of real frequency of cloud oscillation with respect to cloud mass, in natural units and where Mbh = 1.\n\n**3.5. CloudModel.omega_imag(m, alpha, abh)**\n\n*Returns the imaginary frequency of the boson cloud, i.e. the growth rate of the superradiant instability.*\n\nParameters:\n\n* `m` is the azimuthal mode number.\n\n* `alpha` is the dimensionless product of the boson mass and the black hole mass.\n\n* `abh` is the dimensionless spin of the black hole.\n\nReturns:\n\n* Imaginary frequency in natural units and where Mbh = 1.\n \n**3.6. CloudModel.power_gw(m, alpha, abh)**\n\n*Returns the gravitational wave power, scaled to Mcloud = 1.*\n\nParameters:\n\n* `m` is the azimuthal mode number.\n\n* `alpha` is the dimensionless product of the boson mass and the black hole mass.\n\n* `abh` is the dimensionless spin of the black hole.\n\nReturns:\n\n* Gravitational wave power in natural units and scaled to: P_{GW} Mcloud^2 / Mbh^2\n \n**3.7. CloudModel.strain_sph_harm(m, alpha, abh)**\n\n*Gives the strain for the leading −2-weighted spherical harmonic components. The number of components returned is implementation dependent.*\n\nParameters:\n\n* `m` is the azimuthal mode number.\n\n* `alpha` is the dimensionless product of the boson mass and the black hole mass.\n\n* `abh` is the dimensionless spin of the black hole.\n\nReturns:\n\n* `numpy` array e^{i ω t}R h^{2 l m} (−2-weighted spherical harmonic components).\n \n**4. RelScalar(CloudModel)** and **RelVector(CloudModel)**  \n\nImplementations of `CloudModel` for scalar and vectors bosons, respectively. These are the cloud models used when the `model=\"relativistic\"` option is chosen in `UltralightBoson()`. The calculations used for these are described in detail in the [main reference][1]. \n\n*Warning: These models are not guaranteed to cover points in the parameter space where there is no superradiant instability. When called at such a point, functions will in general return Nan. These models are valid from `abh=0` to `abh=0.995`. Also, for the calculation of gravitational wave quantities, the cloud is implicitly assumed to be in the saturated state (in particular, the value of the \nblack hole spin is ignored).*  \n\n**5. NonRelScalar(CloudModel)** and **NonRelVector(CloudModel)**  \n\nImplementations of `CloudModel` for scalar and vectors bosons. These are the cloud models used when the `model=\"non-relativistic\"` option is chosen in `UltralightBoson()`. For the non-relativistic power calculation we use results from the literature -- for the scalar m = 1 case: Eq. (13) in [Brito et al](https://doi.org/10.1088/0264-9381/32/13/134001), for the scalar m > 1 case: Eq. (57) in [Yoshino et al.](https://doi.org/10.1093/ptep/ptu029), for vector boson m = 1 case: from [Siemonsen et al.](https://link.aps.org/doi/10.1103/PhysRevD.101.024019), and for the vector m > 1 case: from [Baryakhtar et al.](https://link.aps.org/doi/10.1103/PhysRevD.103.095019).\n\nFor the non-relativistic frequencies, the results from [Baumann et al.](https://ui.adsabs.harvard.edu/abs/2019JCAP...12..006B) are used, with the frequency shift due to self-gravity as described in our [accompanying paper][1]. \n\n**6. Redshift dependence**\n\nSuperRad is configured to take the luminosity distance `dObs` as input argument. All input times are given in the source frame. However, since the superradiant growth timescales, gravitational wave emission timescales, and the associated gravitational wave frequency and frequency evolution as measured in the detector frame depend on the redshift, it might be of use to obtain the correctly redshifted results. For a given time in the detector frame `tdet`, the time of the source frame `tsrc` is redshifted by `tsrc=tdet/(1+z)` for a given redshift `z`. Using a relation between the luminosity distance `dObs` and the reshift `z`, here just called `D(z)`, the correctly redshifted quantities are obtained from `superrad` as follows:\n\n```python\n>>> sec_hour = 3600.0\n>>> tdet = np.linspace(0,24*sec_hour, 256) #time in detector frame\n>>> tsrc = tdet/(1+z) #time in source frame at redshift z\n>>> thetaObs = np.pi/3 #Observing angle w.r.t. spin axis\n>>> hp,hx,delta = wf.strain_amp(tsrc, thetaObs, dObs=D(z)) # Strain at luminosity distance D(z)\n>>> fgw = wf.freq_gw(tsrc)/(1+z) #frequency in detector frame\n```\n\nNotice, `superrad` does not include such a relation `D(z)` between the luminosity distance `dObs` and redshift `z`; it must be calculated externally.\n\n## Testing\n\nThe waveform model comes with a set of testing routines that check the internal consistency of `superrad`. All tests can be run with [test/run_test.py](test/run_test.py) in the source code. These tests mainly serve the purpose of ensuring functionality of the waveform model even after updating the source code (i.e., are useful for code development). However, the tests can also be utilized by the user to check that `superrad` works as intended.\n\n[1]: <https://arxiv.org/search/?query=siemonsen+may+east&searchtype=author>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "superrad",
    "package_url": "https://pypi.org/project/superrad/",
    "platform": null,
    "project_url": "https://pypi.org/project/superrad/",
    "project_urls": {
      "Bug Tracker": "https://www.bitbucket.org/weast/superrad/issues",
      "Homepage": "https://www.bitbucket.org/weast/superrad"
    },
    "release_url": "https://pypi.org/project/superrad/0.1.0/",
    "requires_dist": [
      "numpy",
      "scipy",
      "matplotlib ; extra == 'examples'"
    ],
    "requires_python": ">=3.4",
    "summary": "Model black hole superradiance",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15675607,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2375d42bceebdc070c5377c7374d68a34cda69b07a719857689d824bded81bdf",
          "md5": "a50d24af3f3c976345f96a43cf8f11ff",
          "sha256": "99e67098f8afc8837a5111bddb3e9c4910570e362b21315722a0c4d2ef192eb0"
        },
        "downloads": -1,
        "filename": "superrad-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a50d24af3f3c976345f96a43cf8f11ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 8368568,
        "upload_time": "2022-11-06T16:42:48",
        "upload_time_iso_8601": "2022-11-06T16:42:48.150307Z",
        "url": "https://files.pythonhosted.org/packages/23/75/d42bceebdc070c5377c7374d68a34cda69b07a719857689d824bded81bdf/superrad-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "770efcf992d7c3a442090ac0f4b4ba2967c973758d8d6cdd26fb82d6d1a6efa8",
          "md5": "7f809ba8da2a96927548092db26bc8d2",
          "sha256": "8922f5efef58141b2fc7c5fec7c482ccf5e185ed425a1c9fb7441635e1acd548"
        },
        "downloads": -1,
        "filename": "superrad-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f809ba8da2a96927548092db26bc8d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 8763509,
        "upload_time": "2022-11-06T16:43:10",
        "upload_time_iso_8601": "2022-11-06T16:43:10.467819Z",
        "url": "https://files.pythonhosted.org/packages/77/0e/fcf992d7c3a442090ac0f4b4ba2967c973758d8d6cdd26fb82d6d1a6efa8/superrad-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2375d42bceebdc070c5377c7374d68a34cda69b07a719857689d824bded81bdf",
        "md5": "a50d24af3f3c976345f96a43cf8f11ff",
        "sha256": "99e67098f8afc8837a5111bddb3e9c4910570e362b21315722a0c4d2ef192eb0"
      },
      "downloads": -1,
      "filename": "superrad-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a50d24af3f3c976345f96a43cf8f11ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 8368568,
      "upload_time": "2022-11-06T16:42:48",
      "upload_time_iso_8601": "2022-11-06T16:42:48.150307Z",
      "url": "https://files.pythonhosted.org/packages/23/75/d42bceebdc070c5377c7374d68a34cda69b07a719857689d824bded81bdf/superrad-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "770efcf992d7c3a442090ac0f4b4ba2967c973758d8d6cdd26fb82d6d1a6efa8",
        "md5": "7f809ba8da2a96927548092db26bc8d2",
        "sha256": "8922f5efef58141b2fc7c5fec7c482ccf5e185ed425a1c9fb7441635e1acd548"
      },
      "downloads": -1,
      "filename": "superrad-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f809ba8da2a96927548092db26bc8d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 8763509,
      "upload_time": "2022-11-06T16:43:10",
      "upload_time_iso_8601": "2022-11-06T16:43:10.467819Z",
      "url": "https://files.pythonhosted.org/packages/77/0e/fcf992d7c3a442090ac0f4b4ba2967c973758d8d6cdd26fb82d6d1a6efa8/superrad-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}