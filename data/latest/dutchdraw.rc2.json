{
  "info": {
    "author": "Etienne van de Bijl, Jan Klein, Joris Pries",
    "author_email": "joris.pries@cwi.nl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DutchDraw\n\nDutchDraw is a Python package for binary classification.\n\n## Paper\n\nThis package is an implementation of the ideas from INSERTONZEPAPER, where VERHAALWATWEINDEPAPERDOEN.\n\n### Citation\nIf you have used the DutchDraw package, please also cite: INSERTONZEBIBTEX\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install the package\n\n```bash\npip install DutchDraw\n```\n\n----\n\n### Windows users\n\n```bash\npython -m pip install --upgrade  --index-url https://test.pypi.org/simple/ DutchDraw\n```\n\n<!-- ```bash\npython -m pip install DutchDraw\n``` -->\n\nor\n\n```bash\npy -m pip install --upgrade  --index-url https://test.pypi.org/simple/ DutchDraw\n```\n\n<!-- ```bash\npy -m pip install DutchDraw\n``` -->\n\n## Method\n\nTo properly assess the performance of a binary classification model, the score of a chosen measure should be compared with the score of a 'simple' baseline. E.g. an accuracy of 0.9 isn't that great if a model (without knowledge) attains an accuracy of 0.88.\n\n### Basic baseline\n\nLet `M`  be the total number of samples, where `P` are positive and `N` are negative. Let `Î¸_star = round(Î¸ * M) / M`. Randomly shuffle the samples and label the first `Î¸_star * M` samples as `1` and the rest as `0`. This gives a baseline for each `Î¸` in `[0,1]`. Our package can optimize (maximize and minimize) the baseline.\n\n## Reasons to use\n\nThis package contains multiple functions. Let `y_true` be the actual labels and `y_pred` be the labels predicted by a model.\n\nIf:\n\n* You want to determine an included measure --> `measure_score(y_true, y_pred, measure)`\n* You want to get statistics of a baseline given `theta` --> `baseline_functions_given_theta(theta, y_true, measure)`\n* You want to get statistics of the optimal baseline --> `optimized_baseline_statistics(y_true, measure)`\n* You want the baseline without specifying `theta` --> `baseline_functions(y_true, measure)`\n\n### List of all included measures\n\n| Measure                                                                  |                                                                               Definition                                                                                |\n| ------------------------------------------------------------------------ | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n| TP                                                                       |                                                                                   TP                                                                                    |\n| TN                                                                       |                                                                                   TN                                                                                    |\n| FP                                                                       |                                                                                   FP                                                                                    |\n| FN                                                                       |                                                                                   FN                                                                                    |\n| TPR                                                                      |                                                                                 TP / P                                                                                  |\n| TNR                                                                      |                                                                                 TN / N                                                                                  |\n| FPR                                                                      |                                                                                 FP / N                                                                                  |\n| FNR                                                                      |                                                                                 FN / P                                                                                  |\n| PPV                                                                      |                                                                             TP / (TP + FP)                                                                              |\n| NPV                                                                      |                                                                             TN / (TN + FN)                                                                              |\n| FDR                                                                      |                                                                             FP / (TP + FP)                                                                              |\n| FOR                                                                      |                                                                             FN / (TN + FN)                                                                              |\n| ACC, ACCURACY                                                            |                                                                              (TP + TN) / M                                                                              |\n| BACC, BALANCED ACCURACY                                                  |                                                                             (TPR + TNR) / 2                                                                             |\n| FBETA, FSCORE, F, F BETA, F BETA SCORE, FBETA SCORE                      |                                            ((1 + Î²<sup>2</sup>) * TP) / ((1 + Î²<sup>2</sup>) * TP + Î²<sup>2</sup> * FN + FP)                                            |\n| MCC, MATTHEW, MATTHEWS CORRELATION COEFFICIENT                           |                                                       (TP * TN - FP * FN) / (sqrt((TP + FP) * (TN + FN) * P * N))                                                       |\n| BM, BOOKMAKER INFORMEDNESS, INFORMEDNESS                                 |                                                                              TPR + TNR - 1                                                                              |\n| MK                                                                       |                                                                              PPV + NPV - 1                                                                              |\n| COHEN, COHENS KAPPA, KAPPA                                               | (P<sub>o</sub> - P<sub>e</sub>) / (1 - P<sub>e</sub>) with P<sub>o</sub> = (TP + TN) / M and <br> P<sub>e</sub> = ((TP + FP) / M) * (P / M) + ((TN + FN) / M) * (N / M) |\n| G1, GMEAN1, G MEAN 1, FOWLKES-MALLOWS, FOWLKES MALLOWS, FOWLKES, MALLOWS |                                                                             sqrt(TPR * PPV)                                                                             |\n| G2, GMEAN2, G MEAN 2                                                     |                                                                             sqrt(TPR * TNR)                                                                             |\n| TS, THREAT SCORE, CRITICAL SUCCES INDEX, CSI                             |                                                                           TP / (TP + FN + FP)                                                                           |\n| PT, PREVALENCE THRESHOLD                                                 |                                                                  (sqrt(TPR * FPR) - FPR) / (TPR - FPR)                                                                  |\n\n## Usage\n\nAs example, we first generate the true and predicted labels.\n\n```python\nimport random\nrandom.seed(123) # To ensure similar outputs\n\ny_pred = random.choices((0,1), k = 10000, weights = (0.9, 0.1))\ny_true = random.choices((0,1), k = 10000, weights = (0.9, 0.1))\n```\n\n----\n\n### Measure performance\n\nIn general, to determine the score of a measure, use `measure_score(y_true, y_pred, measure, beta = 1)`.\n\n#### Input\n\n* `y_true` (list or numpy.ndarray): 1-dimensional boolean list/numpy.ndarray containing the true labels.\n\n* `y_pred` (list or numpy.ndarray): 1-dimensional boolean list/numpy containing the predicted labels.\n\n* `measure` (string): Measure name, see `all_names_except([''])` for possible measure names.\n\n* `beta` (float): Default is 1. Parameter for the F-beta score.\n\n#### Output\n\n* `float`: The score of the given measure evaluated with the predicted and true labels.\n\n#### Example\n\nTo examine the performance of the predicted labels, we measure the markedness (MK) and F<sub>2</sub> score (FBETA).\n\n```python\nimport DutchDraw as bbl\n\n# Measuring markedness (MK):\nprint('Markedness: {:06.4f}'.format(bbl.measure_score(y_true, y_pred, measure = 'MK')))\n\n# Measuring FBETA for beta = 2:\nprint('F2 Score: {:06.4f}'.format(bbl.measure_score(y_true, y_pred, measure = 'FBETA', beta = 2)))\n```\n\nThis returns as output\n\n```python\nMarkedness: 0.0061\nF2 Score: 0.1053\n```\n\nNote that `FBETA` is the only measure that requires an additional parameter value.\n\n----\n\n### Get basic baseline given `theta`\n\nTo obtain the basic baseline given `theta` use `baseline_functions_given_theta(theta, y_true, measure, beta = 1)`.\n\n#### Input\n\n* `theta` (float): Parameter for the shuffle baseline.\n\n* `y_true` (list or numpy.ndarray): 1-dimensional boolean list/numpy.ndarray containing the true labels.\n\n* `measure` (string): Measure name, see `all_names_except([''])` for possible measure names.\n\n* `beta` (float): Default is 1. Parameter for the F-beta score.\n\n#### Output\n\nThe function `baseline_functions_given_theta` gives the following output:\n\n* `dict`: Containing `Mean` and `Variance`\n  * `Mean` (float): Expected baseline given `theta`.\n  * `Variance` (float): Variance baseline given `theta`.\n\n#### Example\n\nTo evaluate the performance of a model, we want to obtain a baseline for the F<sub>2</sub> score (FBETA).\n\n```python\nresults_baseline = bbl.baseline_functions_given_theta(theta = 0.5, y_true = y_true, measure = 'FBETA', beta = 2)\n```\n\nThis gives us the mean and variance of the baseline.\n\n```python\nprint('Mean: {:06.4f}'.format(results_baseline['Mean']))\nprint('Variance: {:06.4f}'.format(results_baseline['Variance']))\n```\n\nwith output\n\n```python\nMean: 0.2829\nVariance: 0.0001\n```\n\n----\n\n### Get basic baseline\n\nTo obtain the basic baseline without specifying `theta` use `baseline_functions(y_true, measure, beta = 1)`.\n\n#### Input\n\n* `y_true` (list or numpy.ndarray): 1-dimensional boolean list/numpy.ndarray containing the true labels.\n\n* `measure` (string): Measure name, see `all_names_except([''])` for possible measure names.\n\n* `beta` (float): Default is 1. Parameter for the F-beta score.\n\n#### Output\n\nThe function `baseline_functions` gives the following output:\n\n* `dict`: Containing `Distribution`, `Domain`, `(Fast) Expectation Function` and `Variance Function`.\n\n  * `Distribution` (function): Pmf of the measure, given by: `pmf_Y(y, theta)`, where `y` is a measure score and `theta` is the parameter of the shuffle baseline.\n\n  * `Domain` (function): Function that returns attainable measure scores with argument `theta`.\n\n  * `(Fast) Expectation Function` (function): Expectation function of the baseline with `theta` as argument. If `Fast Expectation Function` is returned, there exists a theoretical expectation that can be used for fast computation.\n\n  * `Variance Function` (function): Variance function for all values of `theta`.\n\n#### Example\n\nNext, we determine the baseline without specifying `theta`. This returns a number of functions that can be used for different values of `theta`.\n\n```python\nbaseline = bbl.baseline_functions(y_true = y_true, measure = 'G2')\nprint(baseline.keys())\n```\n\nwith output\n\n```python\ndict_keys(['Distribution', 'Domain', 'Fast Expectation Function', 'Variance Function', 'Expectation Function'])\n```\n\nTo inspect the expected value of `G2` for different `theta` values, we do:\n\n```python\nimport matplotlib.pyplot as plt\ntheta_values = np.arange(0, 1 + 0.01, 0.01)\nexpected_value_plot = [baseline['Expectation Function'](theta) for theta in theta_values]\nplt.plot(theta_values, expected_value_plot)\nplt.xlabel('Theta')\nplt.ylabel('Expected value')\nplt.show()\n```\n\nwith output:\n\n![expectation example](DutchDraw/expected_value_function_example.png)\n\nThe variance can be determined similarly\n\n```python\ntheta_values = np.arange(0, 1 + 0.01, 0.01)\nvariance_plot = [baseline['Variance Function'](theta) for theta in theta_values]\nplt.plot(theta_values, variance_plot)\nplt.xlabel('Theta')\nplt.ylabel('Variance')\nplt.show()\n```\n\nwith output:\n\n![expectation example](DutchDraw/variance_function_example.png)\n\n`Distribution` is a function with two arguments: `y` and `theta`. Let's investigate the distribution for `theta = 0.5` using `Domain`.\n\n```python\ntheta = 0.5\npmf_values = [baseline['Distribution'](y, theta) for y in baseline['Domain'](theta)]\nplt.plot(baseline['Domain'](theta), pmf_values)\nplt.xlabel('Measure score')\nplt.ylabel('Probability mass')\nplt.show()\n```\n\nwith output:\n\n![expectation example](DutchDraw/pmf_example.png)\n\n----\n\n### Get optimal baseline\n\nTo obtain the optimal baseline use `optimized_baseline_statistics(y_true, measure = possible_names, beta = 1)`.\n\n#### Input\n\n* `y_true` (list or numpy.ndarray): 1-dimensional boolean list/numpy.ndarray containing the true labels.\n\n* `measure` (string): Measure name, see `all_names_except([''])` for possible measure names.\n\n* `beta` (float): Default is 1. Parameter for the F-beta score.\n\n#### Output\n\nThe function `optimized_baseline_statistics` gives the following output:\n\n* dict: Containing `Max Expected Value`, `Argmax Expected Value`, `Min Expected Value` and `Argmin Expected Value`.\n  * `Max Expected Value` (float): Maximum of the expected values for all `theta`.\n  * `Argmax Expected Value` (list): List of all `theta_star` values that maximize the expected value.\n  * `Min Expected Value` (float): Minimum of the expected values for all `theta`.\n  * `Argmin Expected Value` (list): List of all `theta_star` values that minimize the expected value.\n\nNote that `theta_star = round(theta * M) / M`.\n\n#### Example\n\nTo evaluate the performance of a model, we want to obtain the optimal baseline for the F<sub>2</sub> score (FBETA).\n\n```python\noptimal_baseline = bbl.optimized_baseline_statistics(y_true, measure = 'FBETA', beta = 1)\n\nprint('Max Expected Value: {:06.4f}'.format(optimal_baseline['Max Expected Value']))\nprint('Argmax Expected Value: {:06.4f}'.format(*optimal_baseline['Argmax Expected Value']))\nprint('Min Expected Value: {:06.4f}'.format(optimal_baseline['Min Expected Value']))\nprint('Argmin Expected Value: {:06.4f}'.format(*optimal_baseline['Argmin Expected Value']))\n```\n\nwith output\n\n```python\nMax Expected Value: 0.1874\nArgmax Expected Value: 1.0000\nMin Expected Value: 0.0000\nArgmin Expected Value: 0.0000\n```\n\n----\n\n### All example code\n\n```python\nimport DutchDraw as bbl\nimport random\nimport numpy as np\n\nrandom.seed(123) # To ensure similar outputs\n\n# Generate true and predicted labels\ny_pred = random.choices((0,1), k = 10000, weights = (0.9, 0.1))\ny_true = random.choices((0,1), k = 10000, weights = (0.9, 0.1))\n\n######################################################\n# Example function: measure_score\nprint('\\033[94mExample function: `measure_score`\\033[0m')\n# Measuring markedness (MK):\nprint('Markedness: {:06.4f}'.format(bbl.measure_score(y_true, y_pred, measure = 'MK')))\n\n# Measuring FBETA for beta = 2:\nprint('F2 Score: {:06.4f}'.format(bbl.measure_score(y_true, y_pred, measure= 'FBETA', beta = 2)))\n\nprint('')\n######################################################\n# Example function: baseline_functions_given_theta\nprint('\\033[94mExample function: `baseline_functions_given_theta`\\033[0m')\nresults_baseline = bbl.baseline_functions_given_theta(theta = 0.5, y_true = y_true, measure = 'FBETA', beta = 2)\n\nprint('Mean: {:06.4f}'.format(results_baseline['Mean']))\nprint('Variance: {:06.4f}'.format(results_baseline['Variance']))\n\nprint('')\n######################################################\n# Example function: baseline_functions\nprint('\\033[94mExample function: `baseline_functions`\\033[0m')\nbaseline = bbl.baseline_functions(y_true = y_true, measure = 'G2')\nprint(baseline.keys())\n\n\n# Expected Value\nimport matplotlib.pyplot as plt\ntheta_values = np.arange(0, 1 + 0.01, 0.01)\nexpected_value_plot = [baseline['Expectation Function'](theta) for theta in theta_values]\nplt.plot(theta_values, expected_value_plot)\nplt.xlabel('Theta')\nplt.ylabel('Expected value')\n#plt.savefig('expected_value_function_example.png', dpi= 600)\nplt.show()\n\n# Variance\ntheta_values = np.arange(0, 1 + 0.01, 0.01)\nvariance_plot = [baseline['Variance Function'](theta) for theta in theta_values]\nplt.plot(theta_values, variance_plot)\nplt.xlabel('Theta')\nplt.ylabel('Variance')\n#plt.savefig('variance_function_example.png', dpi= 600)\nplt.show()\n\n# Distribution and Domain\ntheta = 0.5\npmf_values = [baseline['Distribution'](y, theta) for y in baseline['Domain'](theta)]\nplt.plot(baseline['Domain'](theta), pmf_values)\nplt.xlabel('Measure score')\nplt.ylabel('Probability mass')\n#plt.savefig('pmf_example.png', dpi= 600)\nplt.show()\n\nprint('')\n######################################################\n# Example function: optimized_baseline_statistics\nprint('\\033[94mExample function: `optimized_baseline_statistics`\\033[0m')\noptimal_baseline = bbl.optimized_baseline_statistics(y_true, measure = 'FBETA', beta = 1)\n\nprint('Max Expected Value: {:06.4f}'.format(optimal_baseline['Max Expected Value']))\nprint('Argmax Expected Value: {:06.4f}'.format(*optimal_baseline['Argmax Expected Value']))\nprint('Min Expected Value: {:06.4f}'.format(optimal_baseline['Min Expected Value']))\nprint('Argmin Expected Value: {:06.4f}'.format(*optimal_baseline['Argmin Expected Value']))\n```\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joris-pries/DutchDraw",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DutchDraw",
    "package_url": "https://pypi.org/project/DutchDraw/",
    "platform": "",
    "project_url": "https://pypi.org/project/DutchDraw/",
    "project_urls": {
      "Homepage": "https://github.com/joris-pries/DutchDraw"
    },
    "release_url": "https://pypi.org/project/DutchDraw/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Determine (optimal) baselines for binary classification",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9984413,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be644d2b0f9d9dde9d2e1d5faebf325ec706d48723f80a82eb04daf0d118f80f",
          "md5": "5fc5be3a057feaa85091f3d6171cb0e5",
          "sha256": "c21457b3e510d925f992ea4abbfb421e114ef31afd428bf927295e0eaac2ccf7"
        },
        "downloads": -1,
        "filename": "DutchDraw-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fc5be3a057feaa85091f3d6171cb0e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5538,
        "upload_time": "2021-04-06T09:40:38",
        "upload_time_iso_8601": "2021-04-06T09:40:38.449639Z",
        "url": "https://files.pythonhosted.org/packages/be/64/4d2b0f9d9dde9d2e1d5faebf325ec706d48723f80a82eb04daf0d118f80f/DutchDraw-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c43b31d7d41ecf1eb5dae2b07115cb56272adad40191a67f27424b5f7696e58",
          "md5": "9d0c6048cd00541e93634637b675b06e",
          "sha256": "4db86ee7b2d27c21692c801dfdabbbb5a6e7dab99afe91e838ef9b6fd250d177"
        },
        "downloads": -1,
        "filename": "DutchDraw-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d0c6048cd00541e93634637b675b06e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6109,
        "upload_time": "2021-04-06T09:40:39",
        "upload_time_iso_8601": "2021-04-06T09:40:39.530234Z",
        "url": "https://files.pythonhosted.org/packages/8c/43/b31d7d41ecf1eb5dae2b07115cb56272adad40191a67f27424b5f7696e58/DutchDraw-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7192ff8250cb424abfb421a8ed6b879e1c04a5acc281bc4f685fc684a0f90099",
          "md5": "c4bb2c11d05d338086723adba7c04f61",
          "sha256": "ae8076db91caa70324d7a2070d09921c3a4e6fa0455e5d964183254deb515188"
        },
        "downloads": -1,
        "filename": "DutchDraw-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4bb2c11d05d338086723adba7c04f61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12841,
        "upload_time": "2021-04-06T09:47:51",
        "upload_time_iso_8601": "2021-04-06T09:47:51.416025Z",
        "url": "https://files.pythonhosted.org/packages/71/92/ff8250cb424abfb421a8ed6b879e1c04a5acc281bc4f685fc684a0f90099/DutchDraw-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9cb489adae24e45deeb68203cd40da0f94c91e10d07c6b57836566887a6d6d2",
          "md5": "985686ef87eeeddb06e3d0aeee9a4eee",
          "sha256": "b262547d726d2a2c2c320b76a58e5f79b68556262376b48bd3c70c36e335de7c"
        },
        "downloads": -1,
        "filename": "DutchDraw-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "985686ef87eeeddb06e3d0aeee9a4eee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12761,
        "upload_time": "2021-04-06T09:47:52",
        "upload_time_iso_8601": "2021-04-06T09:47:52.852122Z",
        "url": "https://files.pythonhosted.org/packages/e9/cb/489adae24e45deeb68203cd40da0f94c91e10d07c6b57836566887a6d6d2/DutchDraw-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7192ff8250cb424abfb421a8ed6b879e1c04a5acc281bc4f685fc684a0f90099",
        "md5": "c4bb2c11d05d338086723adba7c04f61",
        "sha256": "ae8076db91caa70324d7a2070d09921c3a4e6fa0455e5d964183254deb515188"
      },
      "downloads": -1,
      "filename": "DutchDraw-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4bb2c11d05d338086723adba7c04f61",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12841,
      "upload_time": "2021-04-06T09:47:51",
      "upload_time_iso_8601": "2021-04-06T09:47:51.416025Z",
      "url": "https://files.pythonhosted.org/packages/71/92/ff8250cb424abfb421a8ed6b879e1c04a5acc281bc4f685fc684a0f90099/DutchDraw-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9cb489adae24e45deeb68203cd40da0f94c91e10d07c6b57836566887a6d6d2",
        "md5": "985686ef87eeeddb06e3d0aeee9a4eee",
        "sha256": "b262547d726d2a2c2c320b76a58e5f79b68556262376b48bd3c70c36e335de7c"
      },
      "downloads": -1,
      "filename": "DutchDraw-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "985686ef87eeeddb06e3d0aeee9a4eee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12761,
      "upload_time": "2021-04-06T09:47:52",
      "upload_time_iso_8601": "2021-04-06T09:47:52.852122Z",
      "url": "https://files.pythonhosted.org/packages/e9/cb/489adae24e45deeb68203cd40da0f94c91e10d07c6b57836566887a6d6d2/DutchDraw-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}