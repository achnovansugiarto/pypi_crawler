{
  "info": {
    "author": "Asmaa khorkhash",
    "author_email": "asmaakhorkhash@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "                       THIS IS A PACKAGE For creating built_in dataset to import it directly by importing it                 \n         this package helps any developer to import built_in, preprocessing dataset and pass it to models to use it whether \n         multi_variate or uni_variate timeseries forcating, this dataset about Measurements of electric power consumption in\n         one household with a one-minute sampling rate over a period of almost 4 years.Different electrical quantities and \n         some sub-metering values are available. \n\n# Installation\n\n**pip install EnergyData**\n\n# electricpower_package\n\n   * EnergyData\n      * __init__.py\n      * electricpower.py\n      *   data\n         *  householdpower.csv\n   * test\n      * __init__.py\n      *  test.py\n   * MANIFEST.md\n   * DESCREIPTION.rst   \n   * setup.py\n   * tox.ini\n   * README.md\n\n# how to use the package\n\n```\nimport EnergyData as ed\n```\n**Then we**\n\n``` \n# import load_data to get the built-in, preprocessing data by this code:\nX_train,X_test,Y_train,Y_test = ed.load_data()\n```\n# write functions that we will import in load_data() like:\n\n 1- train_test_split() : take data and return train_data, test_data\n\n```\ndef train_test_split(data_frame, test_size=0.3):\n        \"\"\"\n        :param data_frame: The whole dataframe needed to split the data\n        :param test_size:  setting the size of test set , initially equals 30%\n        :return: two sets after splitting the data , one for training and the other for testing\n        \"\"\"\n\n        train_size = 1 - test_size\n        end_idx = int(data_frame.shape[0] * train_size * 100 // 100)\n\n        train = data_frame.iloc[:end_idx, :]\n        test = data_frame.iloc[end_idx:, :]\n\n        return train, test\n```\n\n\n 2- scale_data() : take train_data, test_data and perform scaling on them\n \n```\ndef scale_data(train, test):\n    scaler = MinMaxScaler().fit(train)\n    return scaler.transform(train), scaler.transform(test), scaler\n```\n\n 3- univariate_splitter() : take data and return arrays of input_feature and output_feature\n\n```\n\ndef univariate_splitter(data_frame):\n        \"\"\"\n        :param df:\n        :return: two arrays one for features and the other for output\n        \"\"\"\n\n        input_features = []\n        ouput_feature = []\n\n        len_df = data_frame.shape[0]\n\n        for i in range(len_df):\n\n            end_idx = i + 1\n\n            if end_idx > len_df - 1:\n                break\n\n            input_x, output_y = data_frame[i:end_idx, 1:], data_frame[end_idx: end_idx + 1, 0]\n\n            input_features.append(input_x)\n            ouput_feature.append(output_y)\n\n        return np.array(input_features), np.mean(np.array(ouput_feature), axis=1)\n```\n\n 4- multivariate_splitter() : take data and return arrays of input_feature and output_feature:\n \n```\ndef multivariate_splitter(df, input_size=21, output_size=7):\n        \"\"\"\n        :param df:\n        :param input_size: how many samples added to each input\n        :param output_size: how many values will be predicted from each output\n        :return: two arrays one for features and the other for output\n        \"\"\"\n\n        input_features = []\n        ouput_feature = []\n\n        len_df = df.shape[0]\n\n        for i in range(len_df):\n\n            end_idx = i + input_size\n\n            if end_idx > len_df - output_size:\n                break\n\n            input_x, output_y = df[i:end_idx, 1:], df[end_idx: end_idx + output_size, 0]\n\n            input_features.append(input_x)\n            ouput_feature.append(output_y)\n\n        return np.array(input_features), np.array(ouput_feature)\n```   \n\n\n**first we read data by pkg_resources**\n**then we import all of these functions to load_data(), so once we import it we get data splitted,scalled and converted:**\n\n\n\n# NOTE:the __name__ variable stores the module name\n\n\n```\ndef load_data():\n    stream= pkg_resources.resource_stream(__name__, r'data\\householdpower.csv')\n    data_fram=pd.read_csv(stream,encoding='latin-1',parse_dates=['date_time'], index_col= 'date_time')\n    data_fram['sub_metering_remaining'] = (data_fram.Global_active_power * 1000  / 60 ) - (data_fram.Sub_metering_1 + data_fram.Sub_metering_2 + data_fram.Sub_metering_3)\n    data_fram = data_fram.resample('D').sum()\n    data_fram = data_fram.resample('D').mean()\n    X_train, X_test = train_test_split(data_frame=data_fram)\n    X_train, X_test, scaler = scale_data(train=X_train, test=X_test)\n    choosing=input('UNivariate or Multivariate (U or M)?')\n    if choosing=='U':\n        X_train, Y_train =univariate_splitter(X_train)\n        X_test, Y_test = univariate_splitter(X_test)\n    if choosing==\"M\":\n        X_train, Y_train =multivariate_splitter(X_train)\n        X_test, Y_test = multivariate_splitter(X_test)\n    return X_train,X_test,Y_train,Y_test\n    \n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Asmaa-khorkhash/Energydata",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EnergyData",
    "package_url": "https://pypi.org/project/EnergyData/",
    "platform": null,
    "project_url": "https://pypi.org/project/EnergyData/",
    "project_urls": {
      "Homepage": "https://github.com/Asmaa-khorkhash/Energydata"
    },
    "release_url": "https://pypi.org/project/EnergyData/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Measurements of electric power consumption in one household",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15489962,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "717f11fa653092b286208d084bb02eded2e4bc914d3edf371e636f38ce986869",
          "md5": "f5a8abcf4c862fde220f209e3af4a41b",
          "sha256": "348bf63ef4c1151b1f2ecdf2ff06536e095be76268dea95ab3e275da0cebca01"
        },
        "downloads": -1,
        "filename": "EnergyData-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5a8abcf4c862fde220f209e3af4a41b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19745639,
        "upload_time": "2022-10-21T17:00:11",
        "upload_time_iso_8601": "2022-10-21T17:00:11.174484Z",
        "url": "https://files.pythonhosted.org/packages/71/7f/11fa653092b286208d084bb02eded2e4bc914d3edf371e636f38ce986869/EnergyData-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be094d8e96eddb14ce34d5ac74b0ff7ff4fa23478d6324dfee81f5ddbffbeb6c",
          "md5": "569cdd1c9d38d533b962ddf3386634ee",
          "sha256": "d5c5be6909c963c349c6b806b069e90d5b60332d2aa521a3efff6ea728a64729"
        },
        "downloads": -1,
        "filename": "EnergyData-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "569cdd1c9d38d533b962ddf3386634ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18767072,
        "upload_time": "2022-10-21T17:01:28",
        "upload_time_iso_8601": "2022-10-21T17:01:28.574672Z",
        "url": "https://files.pythonhosted.org/packages/be/09/4d8e96eddb14ce34d5ac74b0ff7ff4fa23478d6324dfee81f5ddbffbeb6c/EnergyData-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a2aaaf4a95c9690abfd89d57caa609c0c9dae9e17d35cdc58e5f4c649ee3c17",
          "md5": "d9a59139a99bb560e9b4a00749e9d4e7",
          "sha256": "7ab69ce49b4a64a48cee27d386d6b08d0f83b83f20be5b43e1900fba9a6f378d"
        },
        "downloads": -1,
        "filename": "EnergyData-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d9a59139a99bb560e9b4a00749e9d4e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19745667,
        "upload_time": "2022-10-21T18:30:04",
        "upload_time_iso_8601": "2022-10-21T18:30:04.244250Z",
        "url": "https://files.pythonhosted.org/packages/3a/2a/aaf4a95c9690abfd89d57caa609c0c9dae9e17d35cdc58e5f4c649ee3c17/EnergyData-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f350dcac28bab5ac97a67d046d5c1af225e4262610f1a98720fb4e4a34ea8a47",
          "md5": "fc74f7cc8b330a8e3737b50742cc240e",
          "sha256": "589d38506ac812819384db9196603d8a1825867caa0aa39780315e7f4596c2d4"
        },
        "downloads": -1,
        "filename": "EnergyData-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fc74f7cc8b330a8e3737b50742cc240e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18767110,
        "upload_time": "2022-10-21T18:31:06",
        "upload_time_iso_8601": "2022-10-21T18:31:06.107468Z",
        "url": "https://files.pythonhosted.org/packages/f3/50/dcac28bab5ac97a67d046d5c1af225e4262610f1a98720fb4e4a34ea8a47/EnergyData-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a2aaaf4a95c9690abfd89d57caa609c0c9dae9e17d35cdc58e5f4c649ee3c17",
        "md5": "d9a59139a99bb560e9b4a00749e9d4e7",
        "sha256": "7ab69ce49b4a64a48cee27d386d6b08d0f83b83f20be5b43e1900fba9a6f378d"
      },
      "downloads": -1,
      "filename": "EnergyData-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d9a59139a99bb560e9b4a00749e9d4e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19745667,
      "upload_time": "2022-10-21T18:30:04",
      "upload_time_iso_8601": "2022-10-21T18:30:04.244250Z",
      "url": "https://files.pythonhosted.org/packages/3a/2a/aaf4a95c9690abfd89d57caa609c0c9dae9e17d35cdc58e5f4c649ee3c17/EnergyData-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f350dcac28bab5ac97a67d046d5c1af225e4262610f1a98720fb4e4a34ea8a47",
        "md5": "fc74f7cc8b330a8e3737b50742cc240e",
        "sha256": "589d38506ac812819384db9196603d8a1825867caa0aa39780315e7f4596c2d4"
      },
      "downloads": -1,
      "filename": "EnergyData-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fc74f7cc8b330a8e3737b50742cc240e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18767110,
      "upload_time": "2022-10-21T18:31:06",
      "upload_time_iso_8601": "2022-10-21T18:31:06.107468Z",
      "url": "https://files.pythonhosted.org/packages/f3/50/dcac28bab5ac97a67d046d5c1af225e4262610f1a98720fb4e4a34ea8a47/EnergyData-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}