{
  "info": {
    "author": "Noel Friedrich",
    "author_email": "noel.friedrich@outlook.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Neural Network Creator\n> Create and generate Neural Networks without using heavy modules like Keras\n\n## Table of contents\n* [General info](#general-info)\n* [Screenshots](#screenshots)\n* [Setup](#setup)\n* [Tutorial](#tutorial)\n* [Status](#status)\n\n## Example Code\n```python\n>>> from neural import Neural\n>>> nodes = [[0,0], # 2 Input Neurons\n>>>          [0,0,0,0,0,0], # 6 Hidden Neurons (Hidden Layer #1)\n>>>          [0,0,0,0,0,0], # 6 Hidden Neurons (Hidden Layer #2)\n>>>          [0,0,0,0]] # 4 Output Neurons\n>>> n = Neural(nodes) # make Neural Object, __init__ requires nodes\n>>> n.shuffle() # shuffle all weights to be random (using random module)\n>>> print(n.input([1,2,3,4]) # print out output neurons with input list\n>>> n.show() # visualize network using Tkinter\n>>> n.save(\"my_neural_network.txt\") # save network to file_name.txt\n```\n\n## Setup\n1. Download Python File/s  \n\n2. Installing them as Module using pip  \n> Tutorial: http://www.discoversdk.com/blog/how-to-create-a-new-python-module  \n> Exporting as a _Public Module_ soon!\n\n2. Use as Class in your Project\n> 1. Copy the File/s into your Project Folder  \n> 2. Import the Class using `from neural import Neural`  \n> 3. Create Neural Object using `yourObj = Neural(nodes) # see `[Tutorial](#tutorial)` for closer description`\n\n## Tutorial\n```python\n# setup network nodes with __init__(self, nodes)\n# nodes has to be a two dimensional array, containing floats/integers, representing nodes  \n> nodes = [[0,0],[0,0,0,0],[0,0,0]] # 2 input neurons, 1 hidden layer containing 4 neurons, 3 output neurons\n> network1 = Neural(nodes) # create Neural Object\n\n# input values using  \n> network1.input([1,2]) # pass 1D list, len must be equal to number of input neurons\n\n# show network (with Tkinter module, located in neuraldisplay.py) using  \n> network1.show() # opens 1400px * 700px window\n> network1.show(size = [x,y]) # modify window size\n\n# update every weight to be random from -1 to 1  \n> network1.shuffle() # uses random module\n\n# update every weight to be in range of +- amount of given weights (of another neural network)\n> network1.shuffle_amount(amount) # amount will be devided by 100\n> network1.shuffle_amount(50) # to achieve a learning rate of 0.5\n\n# save network to file_name.txt to be loaded in later\n> network1.save(file_name) # file_name must be string ending in .txt (located in same directory)\n\n# load network from file_name.txt to current network  \n> network1.load(file_name) # file_name must be string ending in .txt (located in same directory)\n```\n### Accessing the Network\n```python\n# Access Network List using\n> network1.nodes\n# Access individual layers using\n> network1.nodes[layer_number]\n# Access individual nodes dictionary using\n> network1.nodes[layer_number][position_in_layer]\n# Access output value of an individual node using\n> network1.nodes[layer_number][position_in_layer][\"output\"]\n# Access list of weights of an individual node using\n> network1.nodes[layer_number][position_in_layer][\"weights\"]\n```\n![Example screenshot](https://github.com/noel-friedrich/neural/blob/main/neuralnodesstructure.PNG \"Neural Network List Structure\")\n### Training using Backpropagation\n```python\n# setup network nodes with __init__(self, nodes)\n# nodes has to be a two dimensional array, containing floats/integers, representing nodes  \n> nodes = [[0,0],[0,0,0,0],[0,0]] # 2 input neurons, 1 hidden layer containing 4 neurons, 2 output neurons\n> network1 = Neural(nodes) # create Neural Object\n\n# load the training data using (see Training Data Formating)\n> inputs, outputs = network1.load_training_data(\"training_example.txt\") # must be .txt file in the same directory\n\n# train the network using\n> network1.train(l_rate, # learning rate (e.g. 0.2)\n                 cycles, # how many cycles (epochs) the network will train through (e.g. 1000)\n                 inputs, # inputs set from loading the training data\n                 outputs, # outputs set from loading the training data\n                 print_status=True) # (optional) print progress into console (Default is False)\n\n# get the total score using (how many of your training examples it passes)\n> score, max_score = network1.get_total_score(inputs, outputs) # set score and max_score\n> print(f\"{score}/{max_score}\") # python 3 (f-strings)\n```\n#### Training Data Formatting\n> Training Data to be read must be located in yourfilename.txt file  \n> Inputs must be seperated by Comma (e.g. ```1,2,3,4```)  \n> Outputs must be seperated by Comma (e.g. ```0,1,0```)  \n> Inputs and Outputs must be seperated by equal sign (e.g. ```1,2,3,4=0,1,0```) ending in line break (\"\\n\")  \n> see \"training_example.txt\"  \n\n## Screenshots\n![Example screenshot](https://github.com/noel-friedrich/neural/blob/main/neural2884.PNG \"Tkinter Visualization of Neural Network\")\n\n## Status\nProject is _IN PROGRESS_  \n_todo list in PROJECT: __Neural Network maker___  \nhttps://github.com/noel-friedrich/neural/projects/1\n\n## Credits\nTraining Algorithm Code was heavily inspired by https://machinelearningmastery.com/implement-backpropagation-algorithm-scratch-python/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/noel-friedrich/neural",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "noelnetwork",
    "package_url": "https://pypi.org/project/noelnetwork/",
    "platform": "",
    "project_url": "https://pypi.org/project/noelnetwork/",
    "project_urls": {
      "Homepage": "https://github.com/noel-friedrich/neural"
    },
    "release_url": "https://pypi.org/project/noelnetwork/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Create and use Neural Networks",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9423679,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3c38ce087385750ce9b789b7a1561bc0f9f6ba34a25c9b791c1c54bcc2b289c",
          "md5": "971ebbd5016e565000ef3bde402ab09e",
          "sha256": "9fb031199adc9f37d4a263d6b4919bae1258822712a56dd5ba4b0db6d0659c9b"
        },
        "downloads": -1,
        "filename": "noelnetwork-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "971ebbd5016e565000ef3bde402ab09e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5547,
        "upload_time": "2021-02-14T21:43:22",
        "upload_time_iso_8601": "2021-02-14T21:43:22.199505Z",
        "url": "https://files.pythonhosted.org/packages/a3/c3/8ce087385750ce9b789b7a1561bc0f9f6ba34a25c9b791c1c54bcc2b289c/noelnetwork-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bee1c2c8d85efe262d668aae555bc85c987000b025468cd1b9dbbf7345951e5",
          "md5": "8cf7b6be87ebb12977e794fc38397fae",
          "sha256": "e54815480372da1f4aa161bb527d2558bb2facd8e32c3dffa127efb929461b85"
        },
        "downloads": -1,
        "filename": "noelnetwork-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8cf7b6be87ebb12977e794fc38397fae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5489,
        "upload_time": "2021-02-14T21:43:24",
        "upload_time_iso_8601": "2021-02-14T21:43:24.919615Z",
        "url": "https://files.pythonhosted.org/packages/0b/ee/1c2c8d85efe262d668aae555bc85c987000b025468cd1b9dbbf7345951e5/noelnetwork-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0acb9aeabcc5133ec61b9bf6f8615e077eabc76c70660d3d650b0302cd4c6d98",
          "md5": "8ecb2af507285e1f3b744c44892b736f",
          "sha256": "3b32d9b74f89793868c6d0c9e0e261d6f93f41d1ab9e6095020db7457b0eb4d0"
        },
        "downloads": -1,
        "filename": "noelnetwork-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ecb2af507285e1f3b744c44892b736f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5537,
        "upload_time": "2021-02-14T21:43:23",
        "upload_time_iso_8601": "2021-02-14T21:43:23.570149Z",
        "url": "https://files.pythonhosted.org/packages/0a/cb/9aeabcc5133ec61b9bf6f8615e077eabc76c70660d3d650b0302cd4c6d98/noelnetwork-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6abbcb8e5ae22f42bf46825cfe30ff379b7bdcf3bbef2b119c96d18c6d1b6e1",
          "md5": "7ce317e4c594db41b2eaaf8565de0f23",
          "sha256": "bf74c13bfb53b2f353310393629abf3bac47998479dc9351038d16d23e17ab7e"
        },
        "downloads": -1,
        "filename": "noelnetwork-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7ce317e4c594db41b2eaaf8565de0f23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5452,
        "upload_time": "2021-02-14T21:43:25",
        "upload_time_iso_8601": "2021-02-14T21:43:25.794810Z",
        "url": "https://files.pythonhosted.org/packages/f6/ab/bcb8e5ae22f42bf46825cfe30ff379b7bdcf3bbef2b119c96d18c6d1b6e1/noelnetwork-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f146858a0975251c41a944801f7ea036325f1e0e7aae4013ae628f140a3c2ae7",
          "md5": "55c2d3d5f9f2ee73b9af805dc21be0b9",
          "sha256": "5576b20ada49c27694bd3a2ae6b2a1459071064ff3d9aff8f044b394aabf400e"
        },
        "downloads": -1,
        "filename": "noelnetwork-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55c2d3d5f9f2ee73b9af805dc21be0b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5501,
        "upload_time": "2021-02-15T17:12:58",
        "upload_time_iso_8601": "2021-02-15T17:12:58.172266Z",
        "url": "https://files.pythonhosted.org/packages/f1/46/858a0975251c41a944801f7ea036325f1e0e7aae4013ae628f140a3c2ae7/noelnetwork-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d55258d31049b8266a9269191ed3043078df0c2db4719b38a8559d2570d5f85",
          "md5": "cc3e44ea41e4809dd62fb4e53ade04a1",
          "sha256": "ba5b8d3c8cb9603f7e93d400e9780b9ad2fb3203ae016dbdbf9f72bd7cfa48a6"
        },
        "downloads": -1,
        "filename": "noelnetwork-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cc3e44ea41e4809dd62fb4e53ade04a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5419,
        "upload_time": "2021-02-15T17:12:59",
        "upload_time_iso_8601": "2021-02-15T17:12:59.674299Z",
        "url": "https://files.pythonhosted.org/packages/2d/55/258d31049b8266a9269191ed3043078df0c2db4719b38a8559d2570d5f85/noelnetwork-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f146858a0975251c41a944801f7ea036325f1e0e7aae4013ae628f140a3c2ae7",
        "md5": "55c2d3d5f9f2ee73b9af805dc21be0b9",
        "sha256": "5576b20ada49c27694bd3a2ae6b2a1459071064ff3d9aff8f044b394aabf400e"
      },
      "downloads": -1,
      "filename": "noelnetwork-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55c2d3d5f9f2ee73b9af805dc21be0b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5501,
      "upload_time": "2021-02-15T17:12:58",
      "upload_time_iso_8601": "2021-02-15T17:12:58.172266Z",
      "url": "https://files.pythonhosted.org/packages/f1/46/858a0975251c41a944801f7ea036325f1e0e7aae4013ae628f140a3c2ae7/noelnetwork-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d55258d31049b8266a9269191ed3043078df0c2db4719b38a8559d2570d5f85",
        "md5": "cc3e44ea41e4809dd62fb4e53ade04a1",
        "sha256": "ba5b8d3c8cb9603f7e93d400e9780b9ad2fb3203ae016dbdbf9f72bd7cfa48a6"
      },
      "downloads": -1,
      "filename": "noelnetwork-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "cc3e44ea41e4809dd62fb4e53ade04a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5419,
      "upload_time": "2021-02-15T17:12:59",
      "upload_time_iso_8601": "2021-02-15T17:12:59.674299Z",
      "url": "https://files.pythonhosted.org/packages/2d/55/258d31049b8266a9269191ed3043078df0c2db4719b38a8559d2570d5f85/noelnetwork-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}