{
  "info": {
    "author": "Toby",
    "author_email": "toby@thedevlins.biz",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Genetic Algorithms for python\n[![Build Status](https://travis-ci.org/GitToby/genetic_algorithms.svg?branch=master)](https://travis-ci.org/GitToby/genetic_algorithms)\n\nThis library is a wrapper for genetic algorithms to leverage in optimisation problems.\nIt hopes to make writing infinitely customizable genetic algorithms easy and quick while having all the standard features expected.\n\n# Installation\nThis module can be installed via pip:\n```bash\npip install genetic-algorithms\n```\n\n# Roadmap\n* add mutation potency & frequency, extract population flow to user defined sequence.\n* add multi population models\n* add common crossover and mutation generic methods\n\n# Examples\nThis is a basic example for maximising values in a list, starting with 10 members running 100 generation.\nThen it will log to the screen and create a csv file with each generations information in short format.\n\n```python\nimport genetic_algorithms as ga\nimport random\n\nclass MyMember(ga.MemberBase):\n    def _construct_from_params(self, construction_parameters=None):\n        # Starting point is a bunch of 5 numbers [0-9]\n        self.vars = [random.randrange(10) for _ in range(5)]\n\n    def mutate(self):\n        # Mutation involves adding a number between -2 and 2 to a random variable\n        i = random.randrange(-2,3)\n        j = random.randrange(len(self.vars))\n        self.vars[j] += i\n\n    def crossover(self, pairing):\n        # Crossing over takes the first half from member one, and the second half from member 2\n        new_params = self.vars[:len(self.vars) // 2] + pairing.vars[len(pairing.vars) // 2:]\n        return MyMember(new_params)\n\n    def score_self(self):\n        return sum(self.vars)\n\ndef m_fit_func(member: MyMember):\n    # This scores the member on its properties, but can involve any external functions as needed.\n    # Remember to test this does what you want.\n    return member.score_self()\n\npop = ga.Population(size=10, member_type=MyMember, member_parameters_generator=None,\n                   fitness_function=m_fit_func, population_seed=0)\npop.run(100, print_logging=True, csv_path=\"example1.csv\")\n```\n\nThis next one is a little more complected; we want to identify a door of a particular size.\n```python\nimport genetic_algorithms as ga\nimport random\nimport numpy as np\n\n\nclass Door(ga.MemberBase):\n    def _construct_from_params(self, construction_parameters=None):\n        # Set the parameters as passed by the generator\n        self.height = construction_parameters['height']\n        self.width = construction_parameters['width']\n\n    def mutate(self):\n        # Mutate by adding 1 or -1 to our door height and width.\n        # this is an example of a bad mutation function because it wouldn't hit an integer after the mutation\n        i = random.randrange(2)\n        j = random.randrange(2)\n        self.height += pow(-1, i)\n        self.width += pow(-1, j)\n\n    def crossover(self, pairing):\n        # Again a bad example of a crossover, the mean we will converge quickly but very hard to get a precice score.\n        new_params = {'height': np.mean([self.height, pairing.height]),\n                      'width': np.mean([self.width, pairing.width])}\n        return Door(construction_parameters=new_params)\n\n    def __repr__(self):\n        return 'height: ' + str(self.height) + \" | width: \" + str(self.width)\n\n\ndef fit_through_door(member: Door):\n    door_height = 10\n    door_width = 3\n    height_diff = abs(door_height - member.height)\n    width_diff = abs(door_width - member.width)\n    return height_diff + width_diff\n\ndef param_generator():\n    max_h = 10\n    max_w = 20\n    yield {'height': random.randrange(max_h),\n           'width': random.randrange(max_w)}\n\nrandom.seed(1)\npop = ga.Population(100, Door, fit_through_door, member_parameters_generator=param_generator)\n# run 500 generations before checking we have some parameters changed\npop.run(generations=500, print_logging=True, maximise_fitness_func=False)\nprint(\"Best door:\", pop.get_top())\n# returns what almost exactly what we want:\n# Best door: (height: 9.999995902180672 | width: 3.999865485355258, 244033.23286180547)\n```\n\nFinally, we will boost it to a very complicated example, we want to generate a copy of a picture of a face from a randomly generated face.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GitToby/genetic_algorithms",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "genetic-algorithms",
    "package_url": "https://pypi.org/project/genetic-algorithms/",
    "platform": "",
    "project_url": "https://pypi.org/project/genetic-algorithms/",
    "project_urls": {
      "Homepage": "https://github.com/GitToby/genetic_algorithms",
      "Repository": "https://github.com/GitToby/genetic_algorithms"
    },
    "release_url": "https://pypi.org/project/genetic-algorithms/1.0.1/",
    "requires_dist": [
      "pandas (>=1.3.2,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "This library is a wrapper for genetic algorithms to leverage in optimisation problems.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11325336,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c064a50cb5157ddad8bf0e101562c9439afdc133c0379b4651d1c40e5864de39",
          "md5": "494ca8f109da7b626c1f1e48465401a9",
          "sha256": "99e74cb97e6ca386673aaf6d105589137402abcbe896a45d562c8a669ab08026"
        },
        "downloads": -1,
        "filename": "genetic_algorithms-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "494ca8f109da7b626c1f1e48465401a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6719,
        "upload_time": "2021-08-31T13:59:18",
        "upload_time_iso_8601": "2021-08-31T13:59:18.358801Z",
        "url": "https://files.pythonhosted.org/packages/c0/64/a50cb5157ddad8bf0e101562c9439afdc133c0379b4651d1c40e5864de39/genetic_algorithms-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60fd7be25974aafe3c47cdcef5284e7b7ec3fe6a481905ab6dfe79ba28e9285",
          "md5": "529fae528e44fc5038727b984cbad8fe",
          "sha256": "a164e9dcad97f8d9d87a4f0e0d1fd333cfa933e49ce1001b8b0065d5ee36eeda"
        },
        "downloads": -1,
        "filename": "genetic_algorithms-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "529fae528e44fc5038727b984cbad8fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 7408,
        "upload_time": "2021-08-31T13:59:19",
        "upload_time_iso_8601": "2021-08-31T13:59:19.930014Z",
        "url": "https://files.pythonhosted.org/packages/b6/0f/d7be25974aafe3c47cdcef5284e7b7ec3fe6a481905ab6dfe79ba28e9285/genetic_algorithms-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8c7f1f3b220b701390d6f14cd4bc497346f4d01456edd5e3d7c36498968c2d8",
          "md5": "cb0b7d332e23fd8c504c67f91e5d699b",
          "sha256": "fa47faf5adc5be9885be5d80e397bcac71387e640f809ac73efa5dbe1231dc0d"
        },
        "downloads": -1,
        "filename": "genetic_algorithms-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb0b7d332e23fd8c504c67f91e5d699b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 8436,
        "upload_time": "2021-08-31T14:04:59",
        "upload_time_iso_8601": "2021-08-31T14:04:59.572375Z",
        "url": "https://files.pythonhosted.org/packages/a8/c7/f1f3b220b701390d6f14cd4bc497346f4d01456edd5e3d7c36498968c2d8/genetic_algorithms-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afb2f99306b1ff4de93f6cb08d94b8e730dc2331c57701737cc35c367900fdd2",
          "md5": "f254a5e74940b8ec297a7bbd5ffc6b3c",
          "sha256": "14ab2170155ceb0c555f00424057c9077cf54d12f44e857f334189faa153cb6b"
        },
        "downloads": -1,
        "filename": "genetic_algorithms-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f254a5e74940b8ec297a7bbd5ffc6b3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 9645,
        "upload_time": "2021-08-31T14:05:00",
        "upload_time_iso_8601": "2021-08-31T14:05:00.799443Z",
        "url": "https://files.pythonhosted.org/packages/af/b2/f99306b1ff4de93f6cb08d94b8e730dc2331c57701737cc35c367900fdd2/genetic_algorithms-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8c7f1f3b220b701390d6f14cd4bc497346f4d01456edd5e3d7c36498968c2d8",
        "md5": "cb0b7d332e23fd8c504c67f91e5d699b",
        "sha256": "fa47faf5adc5be9885be5d80e397bcac71387e640f809ac73efa5dbe1231dc0d"
      },
      "downloads": -1,
      "filename": "genetic_algorithms-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb0b7d332e23fd8c504c67f91e5d699b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 8436,
      "upload_time": "2021-08-31T14:04:59",
      "upload_time_iso_8601": "2021-08-31T14:04:59.572375Z",
      "url": "https://files.pythonhosted.org/packages/a8/c7/f1f3b220b701390d6f14cd4bc497346f4d01456edd5e3d7c36498968c2d8/genetic_algorithms-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afb2f99306b1ff4de93f6cb08d94b8e730dc2331c57701737cc35c367900fdd2",
        "md5": "f254a5e74940b8ec297a7bbd5ffc6b3c",
        "sha256": "14ab2170155ceb0c555f00424057c9077cf54d12f44e857f334189faa153cb6b"
      },
      "downloads": -1,
      "filename": "genetic_algorithms-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f254a5e74940b8ec297a7bbd5ffc6b3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 9645,
      "upload_time": "2021-08-31T14:05:00",
      "upload_time_iso_8601": "2021-08-31T14:05:00.799443Z",
      "url": "https://files.pythonhosted.org/packages/af/b2/f99306b1ff4de93f6cb08d94b8e730dc2331c57701737cc35c367900fdd2/genetic_algorithms-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}