{
  "info": {
    "author": "Dubovik Pavel",
    "author_email": "geometryk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Parallel-pandas\nMakes it easy to parallelize your calculations in pandas on all your CPUs.\n\n## Installation\n\n```python\npip install --upgrade parallel-pandas\n```\n\n## Quickstart\n```python\nimport pandas as pd\nimport numpy as np\nfrom parallel_pandas import ParallelPandas\n\n#initialize parallel-pandas\nParallelPandas.initialize(n_cpu=16, split_factor=4, disable_pr_bar=True)\n\n# create big DataFrame\ndf = pd.DataFrame(np.random.random((1_000_000, 100)))\n\n# calculate multiple quantiles. Pandas only uses one core of CPU\n%%timeit\nres = df.quantile(q=[.25, .5, .95], axis=1)\n```\n`3.66 s ± 31.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)`\n```python\n#p_quantile is parallel analogue of quantile methods. Can use all cores of your CPU.\n%%timeit\nres = df.p_quantile(q=[.25, .5, .95], axis=1)\n```\n`679 ms ± 10.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)`\n\nAs you can see the `p_quantile` method is **5 times faster**!\n\n## Usage\n\nUnder the hood, **parallel-pandas** works very simply. The Dataframe or Series is split into chunks along the first or second axis. Then these chunks are passed to a pool of processes or threads where the desired method is executed on each part. At the end, the parts are concatenated to get the final result.\n\n\nWhen initializing parallel-pandas you can specify the following options:\n1. `n_cpu` - the number of cores of your CPU that you want to use (default `None` - use all cores of CPU)\n2. `split_factor` - Affects the number of chunks into which the DataFrame/Series is split according to the formula `chunks_number = split_factor*n_cpu` (default 1).\n3. `show_vmem` - Shows a progress bar with available RAM (default `False`)\n4. `disable_pr_bar` - Disable the progress bar for parallel tasks (default `False`)\n\nFor example\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom parallel_pandas import ParallelPandas\n\n#initialize parallel-pandas\nParallelPandas.initialize(n_cpu=16, split_factor=4, disable_pr_bar=False)\n\n# create big DataFrame\ndf = pd.DataFrame(np.random.random((1_000_000, 100)))\n```\n![](https://raw.githubusercontent.com/dubovikmaster/parallel-pandas/master/gifs/p_describe.gif)\n\nDuring initialization, we specified `split_factor=4` and `n_cpu = 16`, so the DataFrame will be split into 64 chunks (in the case of the `describe` method, axis = 1) and the progress bar shows the progress for each chunk\n\nYou can parallelize any expression with pandas Dataframe. For example, let's do a z-score normalization of columns in a dataframe. Let's look at the execution time and memory consumption. Compare with synchronous execution and with Dask.DataFrame\n```python\nimport pandas as pd\nimport numpy as np\nfrom parallel_pandas import ParallelPandas\nimport dask.dataframe as dd\nfrom time import monotonic\n\n#initialize parallel-pandas\nParallelPandas.initialize(n_cpu=16, split_factor=8, disable_pr_bar=True)\n\n# create big DataFrame\ndf = pd.DataFrame(np.random.random((1_000_000, 1000)))\n\n# create dask DataFrame\nddf = dd.from_pandas(df, npartitions=128)\n\nstart = monotonic()\nres=(df-df.mean())/df.std()\nprint(f'synchronous z-score normalization time took: {monotonic()-start:.1f} s.')\n```\n```python\nsynchronous z-score normalization time took: 21.7 s.\n```\n```python\n#parallel-pandas\nstart = monotonic()\nres=(df-df.p_mean())/df.p_std()\nprint(f'parallel z-score normalization time took: {monotonic()-start:.1f} s.')\n```\n```python\nparallel z-score normalization time took: 11.7 s.\n```\n```python\n#dask dataframe\nstart = monotonic()\nres=((ddf-ddf.mean())/ddf.std()).compute()\nprint(f'dask parallel z-score normalization time took: {monotonic()-start:.1f} s.')\n```\n```python\ndask parallel z-score normalization time took: 12.5 s.\n```\n\nPay attention to memory consumption. `parallel-pandas` and `dask` use almost half as much RAM as `pandas`\n\n![](https://raw.githubusercontent.com/dubovikmaster/parallel-pandas/master/gifs/ram_usage.png)\n\nFor some methods `parallel-pandas` is faster than `dask.DataFrame`:\n```python\n#dask\n%%time\nres = ddf.nunique().compute()\nWall time: 42.9 s\n\n%%time\nres = ddf.rolling(10).mean().compute()\nWall time: 19.1 s\n\n#parallel-pandas\n%%time\nres = df.p_nunique()\nWall time: 12.9 s\n\n%%time\nres = df.rolling(10).p_mean()\nWall time: 12.5 s\n```\n\n## API\n\n### Parallel counterparts for pandas Series methods\n\n| methods           | parallel analogue   | executor             |\n|-------------------|---------------------|----------------------|\n| pd.Series.apply() | pd.Series.p_apply() | threads / processes  |\n| pd.Series.map()   | pd.Series.p_map()   | threads / processes  |\n\n\n### Parallel counterparts for pandas SeriesGroupBy methods\n\n| methods                  | parallel analogue          | executor                |\n|--------------------------|----------------------------|-------------------------|\n| pd.SeriesGroupBy.apply() | pd.SeriesGroupBy.p_apply() | threads / processes     |\n\n### Parallel counterparts for pandas Dataframe methods\n\n| methods        | parallel analogue | executor            |\n|----------------|-------------------|---------------------|\n| df.mean()      | df.p_mean()       | threads             |\n| df.min()       | df.p_min()        | threads             |\n| df.max()       | df.p_max()        | threads             |\n| df.median()    | df.p_max()        | threads             |\n| df.kurt()      | df.p_kurt()       | threads             |\n| df.skew()      | df.p_skew()       | threads             |\n| df.sum()       | df.p_sum()        | threads             |\n| df.prod()      | df.p_prod()       | threads             |\n| df.var()       | df.p_var()        | threads             |\n| df.sem()       | df.p_sem()        | threads             |\n| df.std()       | df.p_std()        | threads             |\n| df.cummin()    | df.p_cummin()     | threads             |\n| df.cumsum()    | df.p_cumsum()     | threads             |\n| df.cummax()    | df.p_cummax()     | threads             |\n| df.cumprod()   | df.p_cumprod()    | threads             |\n| df.apply()     | df.p_apply()      | threads / processes |\n| df.applymap()  | df.p_applymap()   | processes           |\n| df.replace()   | df.p_replace()    | threads             |\n| df.describe()  | df.p_describe()   | threads             |\n| df.nunique()   | df.p_nunique()    | threads / processes |\n| df.mad()       | df.p_mad()        | threads             |\n| df.idxmin()    | df.p_idxmin()     | threads             |\n| df.idxmax()    | df.p_idxmax()     | threads             |\n| df.rank()      | df.p_rank()       | threads             |\n| df.mode()      | df.p_mode()       | threads/processes   |\n| df.agg()       | df.p_agg()        | threads/processes   |\n| df.aggregate() | df.p_aggregate()  | threads/processes   |\n\n### Parallel counterparts for pandas DataframeGroupBy methods\n\n| methods                  | parallel analogue          | executor             |\n|--------------------------|----------------------------|----------------------|\n| DataFrameGroupBy.apply() | DataFrameGroupBy.p_apply() | threads / processes  |\n\n### Parallel counterparts for pandas window methods\n\n#### Rolling\n\n| methods                            | parallel analogue                    | executor            |\n|------------------------------------|--------------------------------------|---------------------|\n| pd.core.window.Rolling.apply()     | pd.core.window.Rolling.p_apply()     | threads / processes |\n| pd.core.window.Rolling.min()       | pd.core.window.Rolling.p_min()       | threads / processes |\n| pd.core.window.Rolling.max()       | pd.core.window.Rolling.p_max()       | threads / processes |\n| pd.core.window.Rolling.mean()      | pd.core.window.Rolling.p_mean()      | threads / processes |\n| pd.core.window.Rolling.sum()       | pd.core.window.Rolling.p_sum()       | threads / processes |\n| pd.core.window.Rolling.var()       | pd.core.window.Rolling.p_var()       | threads / processes |\n| pd.core.window.Rolling.sem()       | pd.core.window.Rolling.p_sem()       | threads / processes |\n| pd.core.window.Rolling.skew()      | pd.core.window.Rolling.p_skew()      | threads / processes |\n| pd.core.window.Rolling.kurt()      | pd.core.window.Rolling.p_kurt()      | threads / processes |\n| pd.core.window.Rolling.median()    | pd.core.window.Rolling.p_median()    | threads / processes |\n| pd.core.window.Rolling.quantile()  | pd.core.window.Rolling.p_quantile()  | threads / processes |\n| pd.core.window.Rolling.rank()      | pd.core.window.Rolling.p_rank()      | threads / processes |\n| pd.core.window.Rolling.agg()       | pd.core.window.Rolling.p_agg()       | threads / processes |\n| pd.core.window.Rolling.aggregate() | pd.core.window.Rolling.p_aggregate() | threads / processes |\n\n\n#### Window\n\n| methods                           | parallel analogue                   | executor            |\n|-----------------------------------|-------------------------------------|---------------------|\n| pd.core.window.Window.mean()     | pd.core.window.Window.p_mean()     | threads / processes |\n| pd.core.window.Window.sum()      | pd.core.window.Window.p_sum()      | threads / processes |\n| pd.core.window.Window.var()      | pd.core.window.Window.p_var()      | threads / processes |\n| pd.core.window.Window.std()      | pd.core.window.Window.p_std()      | threads / processes |\n\n\n#### RollingGroupby\n\n| methods                                   | parallel analogue                           | executor            |\n|-------------------------------------------|---------------------------------------------|---------------------|\n| pd.core.window.RollingGroupby.apply()     | pd.core.window.RollingGroupby.p_apply()     | threads / processes |\n| pd.core.window.RollingGroupby.min()       | pd.core.window.RollingGroupby.p_min()       | threads / processes |\n| pd.core.window.RollingGroupby.max()       | pd.core.window.RollingGroupby.p_max()       | threads / processes |\n| pd.core.window.RollingGroupby.mean()      | pd.core.window.RollingGroupby.p_mean()      | threads / processes |\n| pd.core.window.RollingGroupby.sum()       | pd.core.window.RollingGroupby.p_sum()       | threads / processes |\n| pd.core.window.RollingGroupby.var()       | pd.core.window.RollingGroupby.p_var()       | threads / processes |\n| pd.core.window.RollingGroupby.sem()       | pd.core.window.RollingGroupby.p_sem()       | threads / processes |\n| pd.core.window.RollingGroupby.skew()      | pd.core.window.RollingGroupby.p_skew()      | threads / processes |\n| pd.core.window.RollingGroupby.kurt()      | pd.core.window.RollingGroupby.p_kurt()      | threads / processes |\n| pd.core.window.RollingGroupby.median()    | pd.core.window.RollingGroupby.p_median()    | threads / processes |\n| pd.core.window.RollingGroupby.quantile()  | pd.core.window.RollingGroupby.p_quantile()  | threads / processes |\n| pd.core.window.RollingGroupby.rank()      | pd.core.window.RollingGroupby.p_rank()      | threads / processes |\n| pd.core.window.RollingGroupby.agg()       | pd.core.window.RollingGroupby.p_agg()       | threads / processes |\n| pd.core.window.RollingGroupby.aggregate() | pd.core.window.RollingGroupby.p_aggregate() | threads / processes |\n\n#### Expanding\n\n| methods                              | parallel analogue                      | executor            |\n|--------------------------------------|----------------------------------------|---------------------|\n| pd.core.window.Expanding.apply()     | pd.core.window.Expanding.p_apply()     | threads / processes |\n| pd.core.window.Expanding.min()       | pd.core.window.Expanding.p_min()       | threads / processes |\n| pd.core.window.Expanding.max()       | pd.core.window.Expanding.p_max()       | threads / processes |\n| pd.core.window.Expanding.mean()      | pd.core.window.Expanding.p_mean()      | threads / processes |\n| pd.core.window.Expanding.sum()       | pd.core.window.Expanding.p_sum()       | threads / processes |\n| pd.core.window.Expanding.var()       | pd.core.window.Expanding.p_var()       | threads / processes |\n| pd.core.window.Expanding.sem()       | pd.core.window.Expanding.p_sem()       | threads / processes |\n| pd.core.window.Expanding.skew()      | pd.core.window.Expanding.p_skew()      | threads / processes |\n| pd.core.window.Expanding.kurt()      | pd.core.window.Expanding.p_kurt()      | threads / processes |\n| pd.core.window.Expanding.median()    | pd.core.window.Expanding.p_median()    | threads / processes |\n| pd.core.window.Expanding.quantile()  | pd.core.window.Expanding.p_quantile()  | threads / processes |\n| pd.core.window.Expanding.rank()      | pd.core.window.Expanding.p_rank()      | threads / processes |\n| pd.core.window.Expanding.agg()       | pd.core.window.Expanding.p_agg()       | threads / processes |\n| pd.core.window.Expanding.aggregate() | pd.core.window.Expanding.p_aggregate() | threads / processes |\n\n\n#### ExpandingGroupby\n\n| methods                                     | parallel analogue                             | executor            |\n|---------------------------------------------|-----------------------------------------------|---------------------|\n| pd.core.window.ExpandingGroupby.apply()     | pd.core.window.ExpandingGroupby.p_apply()     | threads / processes |\n| pd.core.window.ExpandingGroupby.min()       | pd.core.window.ExpandingGroupby.p_min()       | threads / processes |\n| pd.core.window.ExpandingGroupby.max()       | pd.core.window.ExpandingGroupby.p_max()       | threads / processes |\n| pd.core.window.ExpandingGroupby.mean()      | pd.core.window.ExpandingGroupby.p_mean()      | threads / processes |\n| pd.core.window.ExpandingGroupby.sum()       | pd.core.window.ExpandingGroupby.p_sum()       | threads / processes |\n| pd.core.window.ExpandingGroupby.var()       | pd.core.window.ExpandingGroupby.p_var()       | threads / processes |\n| pd.core.window.ExpandingGroupby.sem()       | pd.core.window.ExpandingGroupby.p_sem()       | threads / processes |\n| pd.core.window.ExpandingGroupby.skew()      | pd.core.window.ExpandingGroupby.p_skew()      | threads / processes |\n| pd.core.window.ExpandingGroupby.kurt()      | pd.core.window.ExpandingGroupby.p_kurt()      | threads / processes |\n| pd.core.window.ExpandingGroupby.median()    | pd.core.window.ExpandingGroupby.p_median()    | threads / processes |\n| pd.core.window.ExpandingGroupby.quantile()  | pd.core.window.ExpandingGroupby.p_quantile()  | threads / processes |\n| pd.core.window.ExpandingGroupby.rank()      | pd.core.window.ExpandingGroupby.p_rank()      | threads / processes |\n| pd.core.window.ExpandingGroupby.agg()       | pd.core.window.ExpandingGroupby.p_agg()       | threads / processes |\n| pd.core.window.ExpandingGroupby.aggregate() | pd.core.window.ExpandingGroupby.p_aggregate() | threads / processes |\n\n### ExponentialMovingWindow\n\n| methods                                       | parallel analogue                               | executor            |\n|-----------------------------------------------|-------------------------------------------------|---------------------|\n| pd.core.window.ExponentialMovingWindow.mean() | pd.core.window.ExponentialMovingWindow.p_mean() | threads / processes |\n| pd.core.window.ExponentialMovingWindow.sum()  | pd.core.window.ExponentialMovingWindow.p_sum()  | threads / processes |\n| pd.core.window.ExponentialMovingWindow.var()  | pd.core.window.ExponentialMovingWindow.p_var()  | threads / processes |\n| pd.core.window.ExponentialMovingWindow.std()  | pd.core.window.ExponentialMovingWindow.p_std()  | threads / processes |\n\n### ExponentialMovingWindowGroupby\n\n| methods                                              | parallel analogue                                      | executor            |\n|------------------------------------------------------|--------------------------------------------------------|---------------------|\n| pd.core.window.ExponentialMovingWindowGroupby.mean() | pd.core.window.ExponentialMovingWindowGroupby.p_mean() | threads / processes |\n| pd.core.window.ExponentialMovingWindowGroupby.sum()  | pd.core.window.ExponentialMovingWindowGroupby.p_sum()  | threads / processes |\n| pd.core.window.ExponentialMovingWindowGroupby.var()  | pd.core.window.ExponentialMovingWindowGroupby.p_var()  | threads / processes |\n| pd.core.window.ExponentialMovingWindowGroupby.std()  | pd.core.window.ExponentialMovingWindowGroupby.p_std()  | threads / processes |\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dubovikmaster/parallel-pandas",
    "keywords": "parallel pandas,progress bar,parallel apply,parallel groupby,multiprocessing bar",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parallel-pandas",
    "package_url": "https://pypi.org/project/parallel-pandas/",
    "platform": "any",
    "project_url": "https://pypi.org/project/parallel-pandas/",
    "project_urls": {
      "Homepage": "https://github.com/dubovikmaster/parallel-pandas"
    },
    "release_url": "https://pypi.org/project/parallel-pandas/0.5.0/",
    "requires_dist": [
      "pandas (>=1.4.0)",
      "dill",
      "psutil",
      "tqdm"
    ],
    "requires_python": ">=3.7",
    "summary": "Parallel processing on pandas with progress bars",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16435611,
  "releases": {
    "0.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae9c3119eee971140e2ca9fe6e33c7f574d3b07b570c2fe485d0c4af3b57e07",
          "md5": "06b973abb798e56e3277c5b94a56ab8d",
          "sha256": "75e89e8540688260b97f069a7e63f6076123d5f38bbc6afe9fe68ea60e2be249"
        },
        "downloads": -1,
        "filename": "parallel_pandas-0.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06b973abb798e56e3277c5b94a56ab8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17453,
        "upload_time": "2022-11-24T11:52:18",
        "upload_time_iso_8601": "2022-11-24T11:52:18.913373Z",
        "url": "https://files.pythonhosted.org/packages/ea/e9/c3119eee971140e2ca9fe6e33c7f574d3b07b570c2fe485d0c4af3b57e07/parallel_pandas-0.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d8867de5f1d0571200d45f97de187d86c6a9276f83dfae71035bb02fc0225fc",
          "md5": "d15f63cc7d2b4748f6446b22d61f0093",
          "sha256": "ce60d0ae2f497d989b89500a855f25284cde0c8759a28a06335d9270a0bf9667"
        },
        "downloads": -1,
        "filename": "parallel-pandas-0.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d15f63cc7d2b4748f6446b22d61f0093",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16710,
        "upload_time": "2022-11-24T11:52:26",
        "upload_time_iso_8601": "2022-11-24T11:52:26.915669Z",
        "url": "https://files.pythonhosted.org/packages/6d/88/67de5f1d0571200d45f97de187d86c6a9276f83dfae71035bb02fc0225fc/parallel-pandas-0.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a436ff15c560ce642cd1a56d4591150494697d6a466952d765745c6546610b",
          "md5": "37bc636972a45907af3692adb13232fb",
          "sha256": "da75c4e24d6996de83db5ce5db97ea333e14d23e2088f5be4321abe4b6e15d79"
        },
        "downloads": -1,
        "filename": "parallel_pandas-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37bc636972a45907af3692adb13232fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15256,
        "upload_time": "2022-11-17T11:29:42",
        "upload_time_iso_8601": "2022-11-17T11:29:42.847701Z",
        "url": "https://files.pythonhosted.org/packages/52/a4/36ff15c560ce642cd1a56d4591150494697d6a466952d765745c6546610b/parallel_pandas-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eee6fc8898fade39d92de4d2118eace6a52e6aa680ecb7f77f402115a09c18dc",
          "md5": "7b687d4cdfa4a17704ff214a06b409a6",
          "sha256": "00b5e26ffb5a9f547015e861da795cc5402e4cbc17108958e0367aae0204ab9c"
        },
        "downloads": -1,
        "filename": "parallel-pandas-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7b687d4cdfa4a17704ff214a06b409a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14824,
        "upload_time": "2022-11-17T11:29:45",
        "upload_time_iso_8601": "2022-11-17T11:29:45.398206Z",
        "url": "https://files.pythonhosted.org/packages/ee/e6/fc8898fade39d92de4d2118eace6a52e6aa680ecb7f77f402115a09c18dc/parallel-pandas-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44df9d1556d9bcdcafbfa7bed107a5f48a30e5c893a0e9ef2efa53386bc2ae09",
          "md5": "500a90ebe7eadcfcefcfdbce481a50bc",
          "sha256": "2f50c6291b1a0afa87bdf8d87bc199b9df2bb3af293061ab84f7ada2d0ea1462"
        },
        "downloads": -1,
        "filename": "parallel_pandas-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "500a90ebe7eadcfcefcfdbce481a50bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16337,
        "upload_time": "2022-11-18T07:04:41",
        "upload_time_iso_8601": "2022-11-18T07:04:41.005595Z",
        "url": "https://files.pythonhosted.org/packages/44/df/9d1556d9bcdcafbfa7bed107a5f48a30e5c893a0e9ef2efa53386bc2ae09/parallel_pandas-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96b625496895e71d1065825e5dee329e9b3f881812abb3651621b1d5debfa569",
          "md5": "82fc5f04a34c2525e4b937ce5c7b6ee6",
          "sha256": "df3ac85cdcd71cf7459a64299d11129390f8371630237ff4fc271c86907c12d9"
        },
        "downloads": -1,
        "filename": "parallel-pandas-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "82fc5f04a34c2525e4b937ce5c7b6ee6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15272,
        "upload_time": "2022-11-18T07:04:44",
        "upload_time_iso_8601": "2022-11-18T07:04:44.689568Z",
        "url": "https://files.pythonhosted.org/packages/96/b6/25496895e71d1065825e5dee329e9b3f881812abb3651621b1d5debfa569/parallel-pandas-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfa0b80b677a6fdb31b9e7626a3b147bfc7bd74b8fb85597a9e0efe169b74c65",
          "md5": "c5c9994f614c38f57778c11146bdadf7",
          "sha256": "856f98cf0925e9ab4dc59484d31ae5c368cbca61688ca1bf0fa2b28c025f3ab2"
        },
        "downloads": -1,
        "filename": "parallel_pandas-0.3.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5c9994f614c38f57778c11146bdadf7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17357,
        "upload_time": "2022-11-22T15:01:19",
        "upload_time_iso_8601": "2022-11-22T15:01:19.382198Z",
        "url": "https://files.pythonhosted.org/packages/cf/a0/b80b677a6fdb31b9e7626a3b147bfc7bd74b8fb85597a9e0efe169b74c65/parallel_pandas-0.3.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fe1e4deeb43664faeee38149bbfd0be035d81231e471b3ad6d10ca2cc354578",
          "md5": "65b4c61a9dcb1c83699c7d7e6a8c8020",
          "sha256": "4611a9d3623f3bab71637e4d52d25bf1dd5ae72572de7c9c36be31c6bac4ffc6"
        },
        "downloads": -1,
        "filename": "parallel-pandas-0.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "65b4c61a9dcb1c83699c7d7e6a8c8020",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16587,
        "upload_time": "2022-11-22T15:01:25",
        "upload_time_iso_8601": "2022-11-22T15:01:25.732256Z",
        "url": "https://files.pythonhosted.org/packages/7f/e1/e4deeb43664faeee38149bbfd0be035d81231e471b3ad6d10ca2cc354578/parallel-pandas-0.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ae10e8da2b7605fbe7c74f653fd987a837f021e5b353dff1ed92641189c9f0",
          "md5": "9b4bed754335f1b77e5667e2d13f4a84",
          "sha256": "1c3e44f25c01c4166599688b5c7b84cbb18dfde54f5d5c71235ede935bbc7652"
        },
        "downloads": -1,
        "filename": "parallel_pandas-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b4bed754335f1b77e5667e2d13f4a84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17559,
        "upload_time": "2022-11-24T18:20:05",
        "upload_time_iso_8601": "2022-11-24T18:20:05.180435Z",
        "url": "https://files.pythonhosted.org/packages/51/ae/10e8da2b7605fbe7c74f653fd987a837f021e5b353dff1ed92641189c9f0/parallel_pandas-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ad62f3c22536b7401456bbf278434f999dd6a9ab8f2bbcc90f22ff6085caa22",
          "md5": "92d94783013cd0bdd0d74ba6475d31ce",
          "sha256": "6a13e316e0f44940550c462f45db106eee4d46a565a70387a46baa5eabebfc1c"
        },
        "downloads": -1,
        "filename": "parallel-pandas-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "92d94783013cd0bdd0d74ba6475d31ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16854,
        "upload_time": "2022-11-24T18:20:15",
        "upload_time_iso_8601": "2022-11-24T18:20:15.661565Z",
        "url": "https://files.pythonhosted.org/packages/5a/d6/2f3c22536b7401456bbf278434f999dd6a9ab8f2bbcc90f22ff6085caa22/parallel-pandas-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb33f0d5fa2b7b328a4de7f6b683bf0035c65b5724e1b30c2a67a53b5de59d11",
          "md5": "ff04a514314194e66fda0874c52b8f3e",
          "sha256": "1adf984519e4ec2994443fce300a289f13b671074609f7a4b8a444a9a800942a"
        },
        "downloads": -1,
        "filename": "parallel_pandas-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff04a514314194e66fda0874c52b8f3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18401,
        "upload_time": "2023-01-15T14:15:32",
        "upload_time_iso_8601": "2023-01-15T14:15:32.303423Z",
        "url": "https://files.pythonhosted.org/packages/fb/33/f0d5fa2b7b328a4de7f6b683bf0035c65b5724e1b30c2a67a53b5de59d11/parallel_pandas-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8988f4295808498f819038a4815c96e1573a061200677a25e35fe4bc024be4b",
          "md5": "47d945a9bef28500f0548096ba7ecc08",
          "sha256": "d18b9083b9220cc8bd0cc52765f9f4c0f19e2803d557e02151df26814ef8d731"
        },
        "downloads": -1,
        "filename": "parallel-pandas-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47d945a9bef28500f0548096ba7ecc08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18074,
        "upload_time": "2023-01-15T14:15:41",
        "upload_time_iso_8601": "2023-01-15T14:15:41.035054Z",
        "url": "https://files.pythonhosted.org/packages/c8/98/8f4295808498f819038a4815c96e1573a061200677a25e35fe4bc024be4b/parallel-pandas-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb33f0d5fa2b7b328a4de7f6b683bf0035c65b5724e1b30c2a67a53b5de59d11",
        "md5": "ff04a514314194e66fda0874c52b8f3e",
        "sha256": "1adf984519e4ec2994443fce300a289f13b671074609f7a4b8a444a9a800942a"
      },
      "downloads": -1,
      "filename": "parallel_pandas-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff04a514314194e66fda0874c52b8f3e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18401,
      "upload_time": "2023-01-15T14:15:32",
      "upload_time_iso_8601": "2023-01-15T14:15:32.303423Z",
      "url": "https://files.pythonhosted.org/packages/fb/33/f0d5fa2b7b328a4de7f6b683bf0035c65b5724e1b30c2a67a53b5de59d11/parallel_pandas-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8988f4295808498f819038a4815c96e1573a061200677a25e35fe4bc024be4b",
        "md5": "47d945a9bef28500f0548096ba7ecc08",
        "sha256": "d18b9083b9220cc8bd0cc52765f9f4c0f19e2803d557e02151df26814ef8d731"
      },
      "downloads": -1,
      "filename": "parallel-pandas-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "47d945a9bef28500f0548096ba7ecc08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 18074,
      "upload_time": "2023-01-15T14:15:41",
      "upload_time_iso_8601": "2023-01-15T14:15:41.035054Z",
      "url": "https://files.pythonhosted.org/packages/c8/98/8f4295808498f819038a4815c96e1573a061200677a25e35fe4bc024be4b/parallel-pandas-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}