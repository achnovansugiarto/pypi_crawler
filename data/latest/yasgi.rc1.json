{
  "info": {
    "author": "Yasser Tahiri",
    "author_email": "hello@yezz.me",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: Session",
      "Typing :: Typed"
    ],
    "description": "<p align=\"center\">\n    <em>Yasgi framework a tiny, small, easy to learn, fast to code ‚ö°Ô∏è</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/yezz123/yasgi/actions/workflows/test.yaml\" target=\"_blank\">\n    <img src=\"https://github.com/yezz123/yasgi/actions/workflows/test.yaml/badge.svg\" alt=\"Test\">\n</a>\n<a href=\"https://app.codecov.io/gh/yezz123/yasgi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/codecov/c/github/yezz123/yasgi?color=%2334D058\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/yasgi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/yasgi?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n<a href=\"https://pypi.org/project/yasgi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/pyversions/yasgi.svg?color=%2334D058\" alt=\"Supported Python versions\">\n</a>\n</p>\n\nYasgi is a tiny, small (high-performance), web framework for building APIs with Python 3.9+ using orjson.\n\nThe key features are:\n\n* **Tiny**: Small size and performance.\n* **Fewer bugs**: Reduce about 40% of human (developer) induced errors.\n* **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n* **Easy**: Designed to be easy to use, Play and Plug.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n\n## Installation\n\n<div class=\"termy\">\n\n```console\n$ pip install yasgi\n\n---> 100%\n```\n\n</div>\n\nYou will also need an ASGI server, for production such as <a href=\"https://www.uvicorn.org\" class=\"external-link\" target=\"_blank\">Uvicorn</a> or <a href=\"https://github.com/pgjones/hypercorn\" class=\"external-link\" target=\"_blank\">Hypercorn</a>.\n\n<div class=\"termy\">\n\n```console\n$ pip install \"uvicorn[standard]\"\n\n---> 100%\n```\n\n</div>\n\n## Example\n\n### Create it\n\n* Create a file `main.py` with:\n\n```py\nfrom yasgi import YASGI, Routing\n\napp = YASGI(content_type=\"text/html\")\n\n\n@Routing(\"/endpoint\", methods=[\"GET\", \"POST\"])\nasync def endpoint(Request, Response):\n     # set response header\n     Response.add_header(\"X-header\", \"hello\")\n     # set response cookie\n     Response.set_cookie(\"cookie_from_server\", \"384\")\n     # set response body\n     return \"hello world\"\n```\n\nNow you should run it!\n\n### Run it\n\nRun the server with:\n\n<div class=\"termy\">\n\n```console\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\nThe command `uvicorn main:app` refers to:\n\n* `main`: the file `main.py` (the Python \"module\").\n* `app`: the object created inside of `main.py` with the line `app = YASGI()`.\n* `--reload`: make the server restart after code changes. Only do this for development.\n\n</div>\n\n### Initializing\n\n```py\nfrom yasgi import YASGI\n\napplication = YASGI(content_type=\"application/json\", allow=\"*\", charset=\"UTF-8\")\n\n```\n\n#### ASGI parameters\n\n* `content_type` - specifies the default content type of generated responses (optional, default: `application/json`)\n* `charset` - specifies the default charset generated responses (optional, default: `UTF-8`)\n* `allow` - specifies global setting for `Access-Control-Allow-Origin` header - can be overwrite by passing that header to response headers (optional, default `None` - for public API should be set to `*`)\n\n### Routing\n\n#### Routers parameters\n\n* `endpoint` - object should contain str or regex Pattern to match request path (mandatory)\n* `type` - defines that routed is serving HTTP or WebSocket protocol (possible values: `http`, `websocket`; default: `http`)\n* `methods` - list of HTTP methods to match request method - higher priority than method (optional, default: [`GET`], should be only be specified on `http` type routes)\n* \\*kwargs - other arguments - can be accessed by middleware in states `routed` and `end`\n* `content-type`\n\n#### Usage\n\nRoute is used as a decorator callable object you want to use as router method.\nRouter method takes two mandatory arguments `Request` and `Response` (explained below in a separate section).\nRouter method can also take variables from router regex match (if used).\n\n#### HTTP Examples\n\n```py\nimport re\nfrom yasgi import Routing\n\n# simple route\n@Routing(\"/endpoint\", method=\"GET\")\n# simple route method\nasync def routed_method_1(request, response):\n     # response return without status code & mime type\n     return \"Response from route 1\"\n\n# re package import needed\n@Routing(re.compile(\"/endpoint/(\\d+)$\"), methods=[\"GET\", \"POST\"])\n# regex route, with multiple methods\nasync def routed_method_2(request, response, number):\n     # full response return\n     return f\"Response from route - url_number is: {number}\", \"200 OK\", \"text/html\"\n\n@Routing(\"/endpoint3\", methods=[\"GET\", \"POST\"])\n#simple route, with multiple methods\nasync def routed_method_2(request, response):\n     # alternatively can be called response method set to set response\n     response.set(\"Response by set\")\n\n```\n\n### Raise HTTP status\n\nRaise HTTPStatus is used to raise HTTP status code, and optional message.\n\n```py\nfrom http import HTTPStatus\nfrom yasgi import Routing\n\n@Routing(\"/raise_endpoint\", methods=[\"POST\"])\nasync def routed_method_2(request, response):\n     if not request.data:\n          raise HTTPStatus(\"400 BAD REQUEST\", \"400 BAD REQUEST\")\n     return \"data sent\"\n```\n\n### Request & Response objects\n\nInstances of these object are given to every function that is called with `@Routing` decorator.\n\n```py\nfrom yasgi import Routing\n\n@Routing(\"/endpoint\", method=\"GET\")\nasync def endpoint(Request, Response):\n # instances of Request and Response objects\n pass\n```\n\n#### Request items and methods (HTTP)\n\n* `method` - request method (GET, POST etc.) : read only\n* `path` - request path: read only\n* `query_params` - `dict` of query_string parameters\n* `data` - request parsed data (json, -www-form-urlencoded, multipart/form-data) : read only\n* `headers` - HTTP headers : read only (may contain `content_length` and `content_type` in post requests)\n* `cookies` - dict contains `SimpleCookie` object of every cookie loaded\n* `scope` - raw asgi scope object\n* `event` - raw asgi event object\n\n#### Response  items and methods (HTTP)\n\n* `content_type` - response content-type : read only - can be specified in route\n* `charset` - response encoding; default: `UTF-8`\n* `headers` - `list` of response headers:\n  * `redirect(location, status)` - redirects response to (`location`, `status` if not provide is set to `302`)\n  * `set_cookie(name, value, expires=None, maxAge=None, **kwargs)` - adds cookie to response with obvious parameters, you can alow add additional arguments (`kwargs`) such as `Domain`, `Path`, `Secure`, `HttpOnly`\n  * `add_header(name, value)` - adds header to response\n  * `process(data, status=200)` - allow to manual process response\n\n## Development üöß\n\n### Setup environment üì¶\n\nYou should create a virtual environment and activate it:\n\n```bash\npython -m venv venv/\n```\n\n```bash\nsource venv/bin/activate\n```\n\nAnd then install the development dependencies:\n\n```bash\n# Install Flit\npip install flit\n\n# Install dependencies\nflit install --symlink\n```\n\n### Run tests üåù\n\nYou can run all the tests with:\n\n```bash\nbash scripts/test.sh\n```\n\n> Note: You can also generate a coverage report with:\n\n```bash\nbash scripts/test_html.sh\n```\n\n### Format the code üçÇ\n\nExecute the following command to apply `pre-commit` formatting:\n\n```bash\nbash scripts/format.sh\n```\n\nExecute the following command to apply `mypy` type checking:\n\n```bash\nbash scripts/lint.sh\n```\n\n## License\n\nThis project is licensed under the terms of the [GNU GENERAL PUBLIC LICENSE Version 3](https://www.gnu.org/licenses/gpl-3.0.en.html).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yezz123/yasgi",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "yasgi",
    "package_url": "https://pypi.org/project/yasgi/",
    "platform": null,
    "project_url": "https://pypi.org/project/yasgi/",
    "project_urls": {
      "Homepage": "https://github.com/yezz123/yasgi",
      "Source": "https://github.com/yezz123/yasgi"
    },
    "release_url": "https://pypi.org/project/yasgi/0.1.0/",
    "requires_dist": [
      "orjson",
      "python-daemon ; extra == \"dev\"",
      "python-dotenv ; extra == \"dev\"",
      "uvicorn[standard] ; extra == \"dev\"",
      "requests ; extra == \"dev\"",
      "pre-commit==2.19.0 ; extra == \"lint\"",
      "mypy==0.931 ; extra == \"lint\"",
      "pytest==7.1.2 ; extra == \"test\"",
      "pytest-asyncio == 0.18.3 ; extra == \"test\"",
      "codecov==2.1.12 ; extra == \"test\"",
      "pytest-cov==3.0.0 ; extra == \"test\""
    ],
    "requires_python": ">=3.9",
    "summary": "Yasgi is a Tiny Web Framework for Python, aiming to be as simple as possible.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15060911,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8d9ab9bcd91ceaa39b98e7ec0008afd5082d65df22a9f0c6048a61adf851e2ac",
          "md5": "d8d7d9331baaeab932e24397d4e032e2",
          "sha256": "8ae16f9d112d833ca6a28be67e006fcfff46b2725a72e7a2b1b41bb62c7a6ad5"
        },
        "downloads": -1,
        "filename": "yasgi-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8d7d9331baaeab932e24397d4e032e2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 23080,
        "upload_time": "2022-09-11T22:23:48",
        "upload_time_iso_8601": "2022-09-11T22:23:48.084870Z",
        "url": "https://files.pythonhosted.org/packages/8d/9a/b9bcd91ceaa39b98e7ec0008afd5082d65df22a9f0c6048a61adf851e2ac/yasgi-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0fb218f903bd93547ca74adc19e6e78daebf90c7294685cd2eaf188eccf25cf8",
          "md5": "f04896b23e93d120bb90e90de4b9df91",
          "sha256": "fe12d5b8276bcb84f34138d5aed016143f9cb9af09714760301077d299f0b3b7"
        },
        "downloads": -1,
        "filename": "yasgi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f04896b23e93d120bb90e90de4b9df91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 29207,
        "upload_time": "2022-09-11T22:23:50",
        "upload_time_iso_8601": "2022-09-11T22:23:50.295199Z",
        "url": "https://files.pythonhosted.org/packages/0f/b2/18f903bd93547ca74adc19e6e78daebf90c7294685cd2eaf188eccf25cf8/yasgi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "8d9ab9bcd91ceaa39b98e7ec0008afd5082d65df22a9f0c6048a61adf851e2ac",
        "md5": "d8d7d9331baaeab932e24397d4e032e2",
        "sha256": "8ae16f9d112d833ca6a28be67e006fcfff46b2725a72e7a2b1b41bb62c7a6ad5"
      },
      "downloads": -1,
      "filename": "yasgi-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8d7d9331baaeab932e24397d4e032e2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 23080,
      "upload_time": "2022-09-11T22:23:48",
      "upload_time_iso_8601": "2022-09-11T22:23:48.084870Z",
      "url": "https://files.pythonhosted.org/packages/8d/9a/b9bcd91ceaa39b98e7ec0008afd5082d65df22a9f0c6048a61adf851e2ac/yasgi-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "0fb218f903bd93547ca74adc19e6e78daebf90c7294685cd2eaf188eccf25cf8",
        "md5": "f04896b23e93d120bb90e90de4b9df91",
        "sha256": "fe12d5b8276bcb84f34138d5aed016143f9cb9af09714760301077d299f0b3b7"
      },
      "downloads": -1,
      "filename": "yasgi-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f04896b23e93d120bb90e90de4b9df91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 29207,
      "upload_time": "2022-09-11T22:23:50",
      "upload_time_iso_8601": "2022-09-11T22:23:50.295199Z",
      "url": "https://files.pythonhosted.org/packages/0f/b2/18f903bd93547ca74adc19e6e78daebf90c7294685cd2eaf188eccf25cf8/yasgi-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}