{
  "info": {
    "author": "Likianta",
    "author_email": "likianta@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "- [中文版](https://likianta.github.io/qmlease/)\n\n# QmlEase\n\nQmlEase is a flexible toolkit for Python programmer to efficiently develop QML \ngraphical user interface, it is available for PySide6/PyQt6/PySide2/PyQt5.\n\n## Note\n\nThis project is formerly known as [lk-qtquick-scaffold][1], we rename it to be \n\"qmlease\" and bring up the version from `2.0` to `3.0`. It means the the first \nrelease of this project would be `3.0.0`.\n\nlk-qtquick-scaffold is going to be archived and no longer maintained, once \nafter qmlease enters stable phase.\n\n[1]: https://github.com/likianta/lk-qtquick-scaffold\n\n## Highlights\n\n- Support PySide6/PyQt6/PySide2/PyQt5.\n- Simple to launch a QML application.\n- Hot reload QML files in debug mode.\n- Pythonic `signal` `slot` style.\n- Powerful integrating Python with QML by register system.\n- Show QML print messages in Python console.\n- Built-in widgets library.\n- Improved layout engine.\n- Auto complete stylesheet.\n\n## Installation\n\n### Install QmlEase\n\n> Warning: qmlease is not officially released yet. Below is a pre-documented\n> guide for the near future. (i.e. Below command is not available for now.)\n\nUse pip to install qmlease:\n\n```shell\npip install qmlease\n```\n\nThe latest version is `3.0+`.\n\n### Install Qt backend\n\nInstalling qmlease doesn't include any of Python for Qt's libraries. You need \nto manually install one of the follows:\n\n```shell\n# choose one to install\npip install pyside6\npip install pyqt6\npip install pyside2\npip install pyqt5\n```\n\nQmlEase auto detects the Qt backend you've installed (you can also explicitly \nset specific one), it uses [qtpy](https://github.com/spyder-ide/qtpy) to  \nprovide an uniform layer overrides PySide6/PyQt6/PySide2/PyQt5.\n\n## Examples quick through\n\n### Hello world\n\nview.qml\n\n```qml\nimport QtQuick\nimport QtQuick.Window\n\nWindow {\n    visible: true\n    width: 400\n    height: 300\n    \n    Text {\n        anchors.centerIn: parent\n        text: 'Hello world!'\n    }\n}\n```\n\nmain.py\n\n```python\nfrom qmlease import app\napp.run('view.qml')\n```\n\n![](examples/hello_world/screenshot.png)\n\n### Hot loader\n\nThe `app.run` method accepts `debug` (bool type) parameter, to enable hot\nloader mode:\n\n```python\nfrom qmlease import app\napp.run('view.qml', debug=True)\n```\n\nIt starts a floating window that includes a button \"RELOAD\", each time when you\nmodify \"view.qml\", click \"RELOAD\" to refresh your GUI:\n\n![](examples/hot_reloader/screenshot_1.gif)\n\nBTW you can run \"view.qml\" in command line:\n\n```shell\n# see help\npy -m qmlease -h\n\n# run\npy -m qmlease run view.qml\n\n# run in debug mode\npy -m qmlease run view.qml --debug\n```\n\n![](examples/hot_reloader/screenshot_2.png)\n\nIt has the same result like above \"main.py\" does.\n\n### Register Python funtions to QML\n\n```python\nfrom qmlease import QObject, app, pyside, slot\n\nclass AAA(QObject):\n    @slot(result=str)\n    def hello(self):\n        return 'hello world (aaa)'\n\nclass BBB(QOjbect):\n    @slot(result=str)\n    def hello(self):\n        return 'hello world (bbb)'\n\n# 1. register instance\naaa = AAA()\napp.register(aaa, 'aaa')\n\n# 2. register class\napp.register(BBB, 'MyBbbType', namespace='dev.likianta.qmlease')\n\n# 3. register regular function.\ndef foo(a: int, b: int, c: int):\n    return a + b + c\npyside.register(foo)\npyside.register(foo, name='foo_alias')\n```\n\nview.qml\n\n```qml\nimport QtQuick 2.15\nimport dev.likianta.qmlease 1.0\n\nItem {\n    MyBbbType {  // from `dev.likianta.qmlease`\n        id: bbb\n    }\n\n    Component.onCompleted: {\n        console.log(py.aaa.hello())  // -> 'hello world'\n        console.log(bbb.hello())  // -> 'hello world'\n\n        console.log(py.call('foo', [1, 2, 3]))  // -> 6\n        console.log(py.call('foo_alias', [1, 2, 3])  // -> 6\n    }\n}\n```\n\n### Access QML object properties\n\n```python\nfrom qmlease import QObject, slot\n\nclass MyObject(QObject):\n    @slot(object)\n    def init_view(self, button: QObject) -> None:\n        print(button['text'])  # -> 'AAA'\n        button['text'] = 'BBB'  # this will emit a textChanged signal.\n        print(button['text'])  # -> 'BBB'\n```\n\n### Connect QML signal to Python functions\n\n```python\nfrom lambda_ex import grafting\nfrom qmlease import QObject, slot\n\nclass MyObject(QObject):\n    @slot(object)\n    def init_view(self, button: QObject) -> None:\n        @grafting(button.clicked.connect)\n        def _():\n            print('clicked', button['text'])\n```\n\n### Integrate qt logging in python console\n\nWhen you use `console.log` in QML side, it will be printed in Python console:\n\n![](examples/console_print/screenshot.png)\n\n### Signal and Slot\n\nThe `signal` and `slot` wrap on Qt's `Signal` and `Slot` decorators, but\nextended their functionalities:\n\n1. You can get the correct type hint in IDE:\n\n   ![](examples/signal_slot/screenshot_1.png)\n\n2. The `slot` accepts more types as alias to \"QObject\" and \"QVariant\" -- it is\n   more convenient and more readable:\n\n   ```python\n   from qmlease import QObject, slot\n   \n   class MyObject(QObject):\n\n       @slot(int, dict, result=list)  # <- here\n       def foo(self, index, data):\n           return [index, len(data)]\n   \n   '''\n   it is more readable than:\n       @Slot(int, QJSValue, result='QVariant')\n       def foo(self, index, data):\n           return [index, len(data)]\n   '''\n   ```\n\n   Here is a full alias list (which is documented in \n   `qmlease/qt_core/signal_slot.py`):\n\n   **slot(\\*args)**\n\n   | Alias         | Real value    | Note              |\n   | ------------- | ------------- |------------------ |\n   | `bool`        | `bool`        | basic type        |\n   | `float`       | `float`       | basic type        |\n   | `int`         | `int`         | basic type        |\n   | `str`         | `str`         | basic type        |\n   | `QObject`     | `QObject`     | object            |\n   | `object`      | `QObject`     | object            |\n   | `'item'`      | `QObject`     | object (string)   |\n   | `'object'`    | `QObject`     | object (string)   |\n   | `'qobject'`   | `QObject`     | object (string)   |\n   | `dict`        | `QJSValue`    | qjsvalue          |\n   | `list`        | `QJSValue`    | qjsvalue          |\n   | `set`         | `QJSValue`    | qjsvalue          |\n   | `tuple`       | `QJSValue`    | qjsvalue          |\n   | `...`         | `QJSValue`    | qjsvalue          |\n   | `'any'`       | `QJSValue`    | qjsvalue (string) |\n\n   **slot(result=...)**\n\n   | Alias     | Real value    | Note          |\n   | --------- | ------------- |-------------- |\n   | `None`    | `None`        | basic type    |\n   | `bool`    | `bool`        | basic type    |\n   | `float`   | `float`       | basic type    |\n   | `int`     | `int`         | basic type    |\n   | `str`     | `str`         | basic type    |\n   | `dict`    | `'QVariant'`  | qvariant      |\n   | `list`    | `'QVariant'`  | qvariant      |\n   | `set`     | `'QVariant'`  | qvariant      |\n   | `tuple`   | `'QVariant'`  | qvariant      |\n   | `...`     | `'QVariant'`  | qvariant      |\n\n3. `slot` decorator is non-intrusive -- it means the method been decorated can\n   be called in Python side as usual.\n\n   ```python\n   from qmlease import QObject, slot\n\n   class MyObject(QObject):\n       @slot(int, str, result=list)\n       def foo(self, index, name):\n           return [index, name]\n\n   my_obj = MyObject()\n   # you can call it like a regular method! (just 'ignore' its docorator.)\n   my_obj.foo(1, 'hello')  # -> [1, 'hello']\n   ```\n\n### Built-in widgets library\n\n`qmlease` provides a set of built-in widgets under its `~/widgets` directory.\n\nBasically, you can use it in QML by importing \"LKWidgets\" (or \"LKWidgets 1.0\"\nfor Qt 5.x):\n\n```qml\nimport LKWidgets\n\nLKWindow {\n    color: '#DBDBF7'  // moon white\n\n    LKRectangle {\n        anchors.fill: parent\n        anchors.margins: 32\n        color: '#ECDEC8'  // parchment yellow\n\n        LKColumn {\n            anchors.centerIn: parent\n            alignment: 'hcenter'  // horizontally center children\n\n            LKGhostButton {\n                text: 'SUNDAY'\n            }\n\n            LKButton {\n                text: 'MONDAY'\n            }\n\n            LKGhostButton {\n                text: 'TUESDAY'\n            }\n\n            LKButton {\n                text: 'WEDNESDAY'\n            }\n\n            LKGhostButton {\n                text: 'THURSDAY'\n            }\n\n            LKButton {\n                text: 'FRIDAY'\n            }\n\n            LKGhostButton {\n                text: 'SATURDAY'\n            }\n        }\n    }\n}\n```\n\n![](examples/lk_widgets/screenshot_1.gif)\n\nThe dark theme:\n\n![](examples/lk_widgets/screenshot_2.png)\n\nMore screenshots: see `examples/lk_widgets/screenshot_*`.\n\nAll widget names are started with 'LK', the full list is in\n`qmlease/widgets/LKWidgets/qmldir` file.\n\nNote: the widgets documentation is not ready. Currently you may have a look at\nthe `examples/lk_widgets` screenshots, or view its source code for more details.\n\n### High-level model, human-readable API\n\n*TODO*\n\n### Layout engine\n\nLayout engine is powered by `qmlease.qmlside.layout_helper`, which is \nregistered as `pylayout` in QML side.\n\n```qml\n// some_view.qml\nimport QtQuick\n\nColumn {\n    height: 100\n    \n    Item { id: item1; height: 20  }\n    Item { id: item2; height: 0.4 }\n    Item { id: item3; height: 0   }\n    Item { id: item4; height: 0   }\n\n    Component.onCompleted: {\n        // horizontally center children\n        pylayout.auto_align(this, 'hcenter')\n\n        // auto size children:\n        //  width > 1: as pixels\n        //  width > 0 and < 1: as percent of left spared space\n        //  width = 0: as stretch to fill the left spared space\n        pylayout.auto_size_children(this, 'vertical')\n        //  the result is:\n        //      item1: 20px\n        //      item2: (100 - 20) * 0.4 = 32px\n        //      item3: (100 - 20 - 32) * 0.5 = 24px\n        //      item4: (100 - 20 - 32) * 0.5 = 24px\n        //          (item 3 and 4 share the left space equally.)\n    }\n}\n```\n\n### Executing Python snippet in QML, and vice versa\n\ntest.py\n\n```python\nfrom qmlease import eval_js\n\ndef foo(item1: QObject, item2: QObject):\n    eval_js('''\n        $a.widthChanged.connect(() => {\n            $b.width = $a.width * 2\n        })\n    ''', {'a': item1, 'b': item2})\n```\n\nview.qml\n\n```qml\nimport QtQuick\n\nListView {\n    model: pyside.eval(`\n        import os\n        files = os.listdir(input('target folder: '))\n        return files\n    `)\n}\n```\n\n## Style manager\n\n`qmlease` exposes a list of built-in style controlers to QML side as follows:\n\n| Style         | Description                                               |\n| ------------- | --------------------------------------------------------- |\n| `pycolor`     | All color specifications defined in a canonical name form |\n| `pyfont`      | Font related specifications                               |\n| `pysize`      | Width, height, radius, padding, margin, spacing, etc.     |\n| `pymotion` | Animation related specifications (duration, easing type, etc.) |\n\nUsage examples (seen in all LKWidgets):\n\n![](examples/lk_widgets/screenshot_3.png)\n\n![](examples/lk_widgets/screenshot_4.png)\n\nYou can overwrite the style by giving a YAML file to load, for example a\n\"dark-theme.yaml\":\n\n```yaml\n# this is dark theme color scheme\n\n# == general ==\n\nblue_1: '#e4e5f8'\nblue_3: '#5294eb'\nblue_5: '#3844e6'\nblue_7: '#0f143b'\ndark_1: '#424141'\ndark_2: '#242529'\ndark_3: '#15141a'\ndark_5: '#050408'\ngrey_3: '#e8eaed'\ngrey_5: '#a9acb0'\n\n# == widgets spec ==\n\nborder_active: '#797171'\nborder_default: '#575757'\nborder_glow: '$border_active'\nbutton_bg_active: '$blue_5'\nbutton_bg_default: '$panel_bg'\nbutton_bg_hovered: '$dark_1'\nbutton_bg_pressed: '$dark_3'\nbutton_bg_selected: '$button_bg_pressed'\ninput_bg_active: '$dark_2'\ninput_bg_default: '$panel_bg'\ninput_border_active: '$border_active'\ninput_border_default: '$border_default'\ninput_indicator_active: '$blue_5'\npanel_bg: '$dark_3'\nprog_bg: '$blue_1'\nprog_fg: '$blue_5'\nsidebar_bg: '$panel_bg'\ntext_default: '$grey_3'\ntext_disabled: '$grey_5'\ntext_hint: '$grey_5'\nwin_bg_default: '$dark_5'\n```\n\nThe dollar symbol (`$`) is a simple pointer to the other key.\n\nYou don't need to write all colors in the file, `qmlease` has a great deduction \nalgorithm to automatically call back \"defaults\" when required colors are \nmissing from your sheet.\n\nFinally load it by calling `pycolor.update_from_file()`:\n\n```python\nfrom qmlease import pycolor\npycolor.update_from_file('dark-theme.yaml')\n```\n\nWarning: currently color name style is under refactoring, it is very unstable\nto learn from its style.\n\n## Gallery\n\n![](gallery/widgets_demo/bubbled-tooltip.gif)\n\n![](gallery/widgets_demo/viscous-indicator-anim.gif)\n\n![](gallery/widgets_demo/swipe-view.gif)\n\n![](gallery/widgets_demo/breathing-circle-avatar.gif)\n\n[![](gallery/widgets_demo/password-eye-open.gif)](https://uimovement.com/media/resource_image/image_5213.gif.mp4)\n\nhttps://user-images.githubusercontent.com/27986259/180829198-7110831e-c060-436a-a9be-c41452f49932.mp4\n\nhttps://user-images.githubusercontent.com/27986259/180829267-cd497bcc-de38-4d00-bb19-c4a84b251031.mp4\n\n*TODO:AddMoreWidgetsDemo*\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/likianta/qmlease",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qmlease",
    "package_url": "https://pypi.org/project/qmlease/",
    "platform": null,
    "project_url": "https://pypi.org/project/qmlease/",
    "project_urls": {
      "Homepage": "https://github.com/likianta/qmlease"
    },
    "release_url": "https://pypi.org/project/qmlease/3.0.2/",
    "requires_dist": [
      "argsense",
      "lambda-ex (>=1.1.0,<2.0.0)",
      "lk-logger (>=5.4.7,<6.0.0)",
      "lk-utils (>=2.5.3,<3.0.0)",
      "qtpy (>=2.3.0,<3.0.0)",
      "typing-extensions",
      "pyside6; extra == \"qt6\"",
      "pyside2; extra == \"qt5\""
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "A flexible toolkit for Python programmer to efficiently develop QML graphical user interface.",
    "version": "3.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16157818,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "094844bcadbe44ebc3f2be89c2a972492462e044204f645da3e3e2bc6c889dec",
          "md5": "39bb052ff8549a833b6f33bae84ea1be",
          "sha256": "9ccb27b48650fb097869be6cf174858dbc26a625a1ac01606f6accd7fa1791b4"
        },
        "downloads": -1,
        "filename": "qmlease-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39bb052ff8549a833b6f33bae84ea1be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 100961,
        "upload_time": "2022-12-18T14:11:49",
        "upload_time_iso_8601": "2022-12-18T14:11:49.538794Z",
        "url": "https://files.pythonhosted.org/packages/09/48/44bcadbe44ebc3f2be89c2a972492462e044204f645da3e3e2bc6c889dec/qmlease-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b33ddf64948d4d8db3f09414690a33d39b815a1e720b02da5ecd9d31482597d3",
          "md5": "45d40f69b51b79c3ddd5dc46e68045c2",
          "sha256": "27548ecfad278c31033eca92ae9d183a8bfd6397c38bca9d43196cbe569276ac"
        },
        "downloads": -1,
        "filename": "qmlease-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45d40f69b51b79c3ddd5dc46e68045c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 100687,
        "upload_time": "2022-12-19T11:14:59",
        "upload_time_iso_8601": "2022-12-19T11:14:59.005570Z",
        "url": "https://files.pythonhosted.org/packages/b3/3d/df64948d4d8db3f09414690a33d39b815a1e720b02da5ecd9d31482597d3/qmlease-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df6a8edbe197a334cc88523ab3341eb1fcb0e301cc060f5b3ba8560893c0b32c",
          "md5": "81564a7b02657c5eab5f219b4ed54bdc",
          "sha256": "2992b1fff80037e3746254094ccc9006b8d4489db2e3dbd46048c9768780f48b"
        },
        "downloads": -1,
        "filename": "qmlease-3.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81564a7b02657c5eab5f219b4ed54bdc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 100469,
        "upload_time": "2022-12-20T04:51:21",
        "upload_time_iso_8601": "2022-12-20T04:51:21.160327Z",
        "url": "https://files.pythonhosted.org/packages/df/6a/8edbe197a334cc88523ab3341eb1fcb0e301cc060f5b3ba8560893c0b32c/qmlease-3.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df6a8edbe197a334cc88523ab3341eb1fcb0e301cc060f5b3ba8560893c0b32c",
        "md5": "81564a7b02657c5eab5f219b4ed54bdc",
        "sha256": "2992b1fff80037e3746254094ccc9006b8d4489db2e3dbd46048c9768780f48b"
      },
      "downloads": -1,
      "filename": "qmlease-3.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81564a7b02657c5eab5f219b4ed54bdc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 100469,
      "upload_time": "2022-12-20T04:51:21",
      "upload_time_iso_8601": "2022-12-20T04:51:21.160327Z",
      "url": "https://files.pythonhosted.org/packages/df/6a/8edbe197a334cc88523ab3341eb1fcb0e301cc060f5b3ba8560893c0b32c/qmlease-3.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}