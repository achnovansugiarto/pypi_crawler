{
  "info": {
    "author": "Anton Paquin",
    "author_email": "python@antonpaqu.in",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# todo-placeholder\n\n## Installation\n\n```\npip install todo-placeholder\n```\n\n## Placeholder\n\nThis is a tool intended to speed the process of development in python.\n\nYou're writing your code, and you run into a spot where you don't know exactly \nwhat needs to go there.\n\nPlaceholder lets you fill that spot with a \"placeholder\" variable. \n\nAt runtime, when it comes time that you actually need to compute the value, \n\"placeholder\" will open an interactive session that you can play around in to\nget the value.\n\n(Optional) When you're done with your session, the placeholder in your code is\nreplaced with expression from your terminal session.\n\nTHIS TOOL CAN EDIT YOUR SOURCE CODE. KEEP BACKUPS. I hear `git` is pretty nice.\n\n### wtf\n\nyeah\n\n### Simple Example\n\nSay we have `my_program.py`:\n\n```\nimport todo\n\nprint(todo.set_placeholder('some_string'))\n```\n\nRun it with `python my_program.py` and you'll enter an interactive session.\n\n```\nTODO: fill variable \"some_string\"\nWhen you have an expression that works, press ctrl+D to end the session and\nreplace the placeholder with the last line you typed.\nAlternatively, call exit() to abort.\n\n>>>\n```\n\nThis is a `code.interact` session, which means you have all of python available\nto you. I recommend learning to use `help()` and `dir()` to inspect your \nenvironment and see what's available to you.\n\nFrom here, you should fill in the value of `some_string`\n\n```\n>>> 'hello world!'\n'hello world!'\n>>> <ctrl+D>\nnow exiting InteractiveConsole...\n```\n\n`my_program.py` will continue execution, except the placeholder call to \n`some_string` is replaced with the expression 'hello world!'.\n\nNote: the *expression*, not the *value* of the expression. You can use \n`set_placeholder('some_string')` later and the same expression will be \nre-evaluated in whatever context it was accessed from.\n\nIt's as if you ran a find+replace job with the last expression you wrote in\nyour terminal session.\n\nWhen the program completes, you can check `my_program.py` again:\n\n```\nimport todo\n\nprint('hello world!')\n```\n\nThe placeholder has been replaced by the expression you used in your terminal\nsession.\n\n### More realistic example\n\nSay I'm writing a larger program that involves downloading something from the\nweb. Naturally, I'll use requests. But personally, I can never remember exactly\nwhat variable in the response holds the HTTP response status.\n\nThis `my_program.py` is a toy example, but it would work the same in a larger\nprogram:\n\n```\nimport todo\nimport requests\n\ndef get_data(url):\n    r = requests.get(url)\n    # How do I get the response code here? TODO via placeholder\n    if todo.set_placeholder('http_code') != 200:\n        raise RuntimeError(f'Error: server responded with error code {todo.set_placeholder(\"http_code\")}')\n    return r.text\n\nget_data('http://www.example.com/probably_404')\n```\n\nRunning the program will drop me into an interactive session, where the local\ncontext of `get_data` is all available.\n\n```\nTODO: fill variable \"http_code\"\nWhen you have an expression that works, press ctrl+D to end the session and\nreplace the placeholder with the last line you typed.\nAlternatively, call exit() to abort.\n\n>>> r\n<Response [404]>\n>>> url\n'http://www.example.com/probably_404'\n>>> # Now I can use help() to figure out how to get the error code out of r\n>>> help(r)\n\n>>> # aha, it's r.status_code\n>>> r.status_code\n404\n>>> <ctrl+D>\nnow exiting InteractiveConsole...\nTraceback (most recent call last):\n  File \"my_program.py\", line 12, in <module>\n    get_data('http://www.example.com/probably_404')\n  File \"my_program.py\", line 9, in get_data\n    raise RuntimeError(f'Error: server responded with error code {r.status_code}')\nRuntimeError: Error: server responded with error code 404\n```\n\nAnd if I check `my_program.py` again, the expression has been filled in\n\n```\nimport todo\nimport requests\n\n\ndef get_data(url):\n    r = requests.get(url)\n    if r.status_code != 200:\n        raise RuntimeError(f'Error: server responded with error code {r.status_code}')\n    return r.text\n\nget_data('http://www.example.com/probably_404')\n```\n\n### set_placeholder\n\n`set_placeholder` is the simplest way of entering a placeholder context.\n\nThe minimum useful context is just a bare call to the function:\n\n```\nimport todo\ntodo.set_placeholder()\n```\n\nMore interesting is allowing your placeholder-filled expressions to be re-used\nwith the \"key\" argument:\n```\nimport todo\nx = todo.set_placeholder('foo')\n...\nprint(todo.set_placeholder('foo'))\n```\n\nIn this case, you'll be prompted to fill the first instance of `foo`, but the\nsecond will re-use the expression you entered for the first.\n\nNote that if you pass a key like this, it should be a constant string in order\nfor the rewriter to work properly.\n\nInstead of just filling in expressions, you can also use a call to fill in a \nstatement or even multiple statements, with the `replace_mode` parameter. \n\n```\nimport todo\ntodo.set_placeholder('foo', replace_mode='expression')  # default\ntodo.set_placeholder('foo', replace_mode='statement')\ntodo.set_placeholder('foo', replace_mode='multiline')\n```\n\nFilled expressions are scoped to the replace mode, so this example would \ntrigger three terminal sessions to fill in three different instances of `foo`.\n\nSee the [docs for `set_placeholder`](https://github.com/antonpaquin/todo-placeholder/blob/master/todo/placeholder.py#L404) \nfor more advanced usage.\n\n### Placeholder Objects\n\nFor more control over the placeholder sessions, you can use a placeholder\nobject instead of directly calling `set_placeholder`.\n\nThese are:\n- `todo.Placeholder` (alias for `ExpressionPlaceholder`)\n- `todo.ExpressionPlaceholder` \n- `todo.StatementPlaceholder`\n- `todo.MultilinePlaceholder`\n\nExample:\n\n```\nimport todo\n\nprint(todo.set_placeholder('some_string'))\n```\n\nIs equivalent to \n\n```\nimport todo\nplaceholder = todo.Placeholder()\n\nprint(placeholder.some_string)\n```\n\nA placeholder object is used through its attributes, and is configured when the\nobject is created.\n\nAll placeholder objects take the options `rewrite_source` and \n`allow_propagation`.\nSee [parameters](#parameters) for more information.\n\n#### ExpressionPlaceholder\n\nThis is the simplest placeholder: it evaluates a single expression and does not\nmodify the local environment beyond the value of that expression.\n\n#### StatementPlaceholder\n\n`todo.StatementPlaceholder` allows for a single python statement, which can\nbe used to do things like assign to a variable.\n\nExample:\n\n```\nimport todo\n\nplaceholder = todo.StatementPlaceholder()\n\nx = 1\nprint(x)\nplaceholder.incr_x\nprint(x)\nplaceholder.incr_x\nprint(x)\n```\n\n```\n1\n\nTODO: fill statement \"incr_x\"\nWhen you have an expression that works, press ctrl+D to end the session and\nreplace the placeholder with the last line you typed.\nAlternatively, call exit() to abort.\n\n>>> x += 1\n>>>\nnow exiting InteractiveConsole...\n2\n3\n```\n\n```\nimport todo\n\nplaceholder = todo.StatementPlaceholder()\n\nx = 1\nprint(x)\nx += 1\nprint(x)\nx += 1\nprint(x)\n```\n\n#### MultilinePlaceholder\n\n`todo.MultilinePlaceholder` allows for replacing a placeholder with many lines\nof input.\n\nTo use this, the placeholder should be the only expression on the line where it\nis accessed, and you should prefix any lines you want to add to the replacement \nwith '!'\n\nExample:\n\n```\nimport todo\n\nplaceholder = todo.MultilinePlaceholder()\n\nx = 1\ny = -1\nprint(x, y)\nplaceholder.incr_xy\nprint(x, y)\nplaceholder.incr_xy\nprint(x, y)\n```\n\n```\n1 -1\n\nTODO: fill statements at \"incr_xy\"\nPlay around in your session.\nWhen you want to add a statement to the placeholder, prefix it with \"!\"\ne.g.\n>>> !x = x + 10\n\nWhen your placeholder is complete, press ctrl+D to exit the session and\noverwrite the placeholder in source code.\nAlternatively, call exit() to abort.\n\n>>> !x += 1\n>>> !y -= 1\n>>>\nnow exiting InteractiveConsole...\n2 -2\n3 -3\n```\n\n```\nimport todo\n\nplaceholder = todo.MultilinePlaceholder()\n\nx = 1\ny = -1\nprint(x, y)\nx += 1\ny -= 1\nprint(x, y)\nx += 1\ny -= 1\nprint(x, y)\n```\n\n### Parameters\n\nTo disable rewriting the source code of the original program, you can pass \n`rewrite_source=False`.\n\nBy default, Placeholder will refuse to edit the source code of any file except\nthe one it was initialized. This is to prevent things like\n\n```\nplaceholder = todo.Placeholder()\n\nsome_system_library(placeholder)\n```\n\nfrom editing important system files that it should not be touching.\n\nTo enable editing other files, pass `allow_propagation=True`.\n\n### Caveats\n\n`Placeholder` objects work by scanning your code for an accessor of the form \n`placeholder_var.some_key`. If you access it in an unusual way -- say, \n`__getattribute__`, it won't be able to find the item it should replace.\n\n`set_placeholder` scans for a call to that method with some constant key \nargument, or else an \"anonymous\" call with no key.\n\nThe rewriter can't tell the difference between a \"code\" accessor and a \n\"non-code\" accessor. So if you have something like \n\n```\nprint('placeholder.key = {}'.format(placeholder.key))\n```\n\nBoth instances of \"placeholder.key\" will be replaced in that line, even though\nonly one of them is the actual access point.\n\nBecause of how placeholder internals work, keys for Placeholder objects cannot \nstart with an underscore '_'.\n\nIf your arrow keys aren't working, try `import readline`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antonpaquin/todo-placeholder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "todo-placeholder",
    "package_url": "https://pypi.org/project/todo-placeholder/",
    "platform": "",
    "project_url": "https://pypi.org/project/todo-placeholder/",
    "project_urls": {
      "Homepage": "https://github.com/antonpaquin/todo-placeholder"
    },
    "release_url": "https://pypi.org/project/todo-placeholder/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Use a terminal session to lazily write python source code",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9767725,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e07dd8b995b9de27bc7c0d7525b2bda0e0e13f62e71ad12846a729b11fcc6bf",
          "md5": "762868e803f4efd7f668bb93d627451e",
          "sha256": "04cd1d134d99401ba1667aaf124bdf295056396d5157e78598696f2c3b37b8a4"
        },
        "downloads": -1,
        "filename": "todo_placeholder-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "762868e803f4efd7f668bb93d627451e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4376,
        "upload_time": "2020-05-08T20:32:47",
        "upload_time_iso_8601": "2020-05-08T20:32:47.734401Z",
        "url": "https://files.pythonhosted.org/packages/7e/07/dd8b995b9de27bc7c0d7525b2bda0e0e13f62e71ad12846a729b11fcc6bf/todo_placeholder-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa29515a3534a1f288ef76a1ec8bd8629737d8535312ec7dd3498f38ac814596",
          "md5": "8add9396b0d6452f108ced8dd0244bb9",
          "sha256": "f995e4402007a1fac81e17b6f860fb64989ae53f2a323041fb27a4e2d769562f"
        },
        "downloads": -1,
        "filename": "todo-placeholder-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8add9396b0d6452f108ced8dd0244bb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4479,
        "upload_time": "2020-05-08T20:32:49",
        "upload_time_iso_8601": "2020-05-08T20:32:49.980268Z",
        "url": "https://files.pythonhosted.org/packages/aa/29/515a3534a1f288ef76a1ec8bd8629737d8535312ec7dd3498f38ac814596/todo-placeholder-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "065ae8c84aa257db09a83e6c158cf62448b59321dd79dc8d253bfbb98d87f695",
          "md5": "6ca91ad6dfd972cf487a8dca6856b22b",
          "sha256": "64501adf3efa8eff207ed06fe39af9add1961946f9010ad7e2a42a921fcb9ebc"
        },
        "downloads": -1,
        "filename": "todo_placeholder-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ca91ad6dfd972cf487a8dca6856b22b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7478,
        "upload_time": "2020-05-08T20:35:47",
        "upload_time_iso_8601": "2020-05-08T20:35:47.893272Z",
        "url": "https://files.pythonhosted.org/packages/06/5a/e8c84aa257db09a83e6c158cf62448b59321dd79dc8d253bfbb98d87f695/todo_placeholder-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e5313202e2ad275742495112b1cab5918c51409fb9fda688142ec96a9f510c4",
          "md5": "57770d1b91c7d6f2970a414ae083db7c",
          "sha256": "e28e4ac0683d18cf0ec197bdcb37435bd4484bac21d37b013b7e58055d3a7613"
        },
        "downloads": -1,
        "filename": "todo-placeholder-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "57770d1b91c7d6f2970a414ae083db7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9088,
        "upload_time": "2020-05-08T20:35:50",
        "upload_time_iso_8601": "2020-05-08T20:35:50.282444Z",
        "url": "https://files.pythonhosted.org/packages/0e/53/13202e2ad275742495112b1cab5918c51409fb9fda688142ec96a9f510c4/todo-placeholder-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be01e7249587fd70997a73f8bac5ff91372048b5191c842f08ded374e1207acb",
          "md5": "c23dff0863528989d978c4d4fc3804bc",
          "sha256": "6b39fbb85622f962b36564d9c7888424fefb0597404b827baec595ae5c7a95ee"
        },
        "downloads": -1,
        "filename": "todo-placeholder-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c23dff0863528989d978c4d4fc3804bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13334,
        "upload_time": "2021-03-14T05:03:39",
        "upload_time_iso_8601": "2021-03-14T05:03:39.542196Z",
        "url": "https://files.pythonhosted.org/packages/be/01/e7249587fd70997a73f8bac5ff91372048b5191c842f08ded374e1207acb/todo-placeholder-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "352175387f69f26e2ed783d6e0c897f7f8094fdff6728678a0e55689c8647e35",
          "md5": "aa13685fbee996d894c4d44067c92114",
          "sha256": "b504d3ebdb7d9b92f98fc8f0bd19852a72afda01deb99fe05f424a6032be40a7"
        },
        "downloads": -1,
        "filename": "todo_placeholder-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa13685fbee996d894c4d44067c92114",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10860,
        "upload_time": "2021-03-14T19:59:39",
        "upload_time_iso_8601": "2021-03-14T19:59:39.898369Z",
        "url": "https://files.pythonhosted.org/packages/35/21/75387f69f26e2ed783d6e0c897f7f8094fdff6728678a0e55689c8647e35/todo_placeholder-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "352175387f69f26e2ed783d6e0c897f7f8094fdff6728678a0e55689c8647e35",
        "md5": "aa13685fbee996d894c4d44067c92114",
        "sha256": "b504d3ebdb7d9b92f98fc8f0bd19852a72afda01deb99fe05f424a6032be40a7"
      },
      "downloads": -1,
      "filename": "todo_placeholder-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aa13685fbee996d894c4d44067c92114",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10860,
      "upload_time": "2021-03-14T19:59:39",
      "upload_time_iso_8601": "2021-03-14T19:59:39.898369Z",
      "url": "https://files.pythonhosted.org/packages/35/21/75387f69f26e2ed783d6e0c897f7f8094fdff6728678a0e55689c8647e35/todo_placeholder-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}