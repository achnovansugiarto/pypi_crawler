{
  "info": {
    "author": "Redshift Labs Pty Ltd, Dr. Konstantin Selyunin",
    "author_email": "selyunin.k.v@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# RSL Comm Python Driver\n\n[![PyPI version](https://badge.fury.io/py/rsl-comm-py.svg)](https://badge.fury.io/py/rsl-comm-py)\n![test and package](https://github.com/RedshiftLabsPtyLtd/rsl_comm_py/workflows/test%20and%20package/badge.svg)\n\n\n**TL;DR:** *\"Swiss army knife\"* for using \nthe [`UM7`](https://redshiftlabs.com.au/product/um7-orientation-sensor/), `UM8`,\nand  `shearwater` orientation sensors with Python 3 \n(Python 3.7+, including Python 3.10).\n\n\n`UM7` originally came with the \n[_\"Serial Software Interface\"_](https://redshiftlabs.com.au/support-services/serial-interface-software/)\nfor handling / communicating with the sensor, which is currently available for Windows only.\n\nThe `python3` driver provided here is designed to keep you up and running \non different platforms (Linux, Windows, Mac).\nIf you have the `UM7`, `UM8`, or `shearwater` board and want to use it on Linux \n(e.g. Ubuntu, Debian, Raspbian, Yocto, Suse, etc.),\nWindows, or Mac, this repo provides driver code to send / receive individual packets\nand receive broadcasts, as well example code how to create a sensor communication object.\n\nThe driver has the following capabilities: \n\n* read / write single registers to/from `UM7`, `UM8`, `shearwater` over `SPI`;\n\n* read / write single registers to/from `UM7`, `UM8`, `shearwater` over `UART`;\n\n* receive broadcast packets from the `UM7`, `UM8`, `shearwater` sensor over `UART`;\n\n* register map and interpretation of the sensor registers for `UM7`, `UM8`, `shearwater`.\n\n\n## Checking out the repo with submodules:\n\nThis repo contains \n[git submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules),\nin particularly [rsl_xml_svd](https://github.com/RedshiftLabsPtyLtd/rsl_xml_svd)\nproject is included as a submodule. In order to check out the project, including\nsubmodules use the following command:\n\n```sh\ngit clone --recurse-submodules git@github.com:RedshiftLabsPtyLtd/rsl_comm_py.git\n```\n\nIf the repo is already cloned without submodules, then in the existing repo:\n\n```sh\ngit submodule update --recursive --init\n```\n\nIf using GUI client like git kraken, the following\n[post](https://support.gitkraken.com/working-with-repositories/submodules/)\nmight be useful.\n\nAfter syncing the sub-modules, the [`rsl_xml_svd`](./rsl_comm_py/rsl_xml_svd) folder \nshould appear inside the repo, pointing exactly to the commit specified in this repository.\n\n\n## Repository structure\n\nTo get started, you need to know that communication with the `UM7`, `UM8`, and `shearwater`\nis organized as follows. For each sensor, there is a file with register description, and \nseparate files with UART and SPI communication. The register description code interprets the \nreceived payload, and sensor files handle constructing, transmitting and receiving packets.\n\nE.g. for the UM7 the UART communication is coded in \n[`um7_serial.py`](./rsl_comm_py/um7_serial.py) file, \nwhere the `UM7Serial` class is defined. \nInformation about UM7 registers comes to [`um7_serial.py`](./rsl_comm_py/um7_serial.py)\nfrom the [`um7_registers.py`](./rsl_comm_py/um7_registers.py) file, where \nthe accessing to the UM7 registers are stored.\nSince it is possible to access the UM7 register map over UART and SPI,\nthe register data (e.g. addresses, fields, and their meaning) is stored in a separate file.\nIn the [`examples`](./rsl_comm_py/examples) folder we store the examples how to communicate with the \nsensor. \n\nThe `UM7`, `UM8`, and `shearwater` register descriptions are stored in SVD files, \n([`um7.svd`](./rsl_comm_py/rsl_xml_svd/um7.svd), [`um8.svd`](./rsl_comm_py/rsl_xml_svd/um8.svd),\n[`shearwater.svd`](./rsl_comm_py/rsl_xml_svd/shearwater.svd))\nand is parsed by the [`rsl_svd_parser.py`](./rsl_comm_py/rsl_xml_svd/rsl_svd_parser.py).\nThe parser extracts the information from the XML file and fills in python data classes.\n\n\nBelow we outline the repo structure:\n\n* [`rsl_comm_py`](./rsl_comm_py): top-level python package;\n* [`rsl_comm_py/examples`](./rsl_comm_py/examples) package with example code for receiving broadcast / reading / writing `UM7`, `UM8` or `shearwater` registers;\n* [`rsl_comm_py/rsl_xml_svd`](./rsl_comm_py/rsl_xml_svd) package stores `UM7`, `UM8`, and `shearwater` registers data in SVD (or **S**ystem **V**iew **D**escription) format and parsing code. For content description of the package, look at the [repo](https://github.com/RedshiftLabsPtyLtd/rsl_xml_svd);\n* [`rsl_comm_py/test`](./rsl_comm_py/test)  [`pytest`](https://docs.pytest.org/en/latest/) tests for register map code generation;\n* [`rsl_comm_py/rsl_generate_shearwater.py`](./rsl_comm_py/rsl_generate_shearwater.py): invoke `python` and `C/C++` code generation for `shearwater` and save generated results;\n* [`rsl_comm_py/rsl_generate_um7.py`](./rsl_comm_py/rsl_generate_um7.py): invoke code generation for `UM7` and save generated results;\n* [`rsl_comm_py/rsl_generator.py`](./rsl_comm_py/rsl_generator.py): code generation for [`um7_registers.py`](./rsl_comm_py/um7_registers.py) and [`shearwater_registers.py`](./rsl_comm_py/shearwater_registers.py) from the SVD file;\n* [`rsl_comm_py/rsl_spi.py`](./rsl_comm_py/rsl_spi.py): generic SPI driver classes for [USB-ISS](https://www.robot-electronics.co.uk/htm/usb_iss_tech.htm) or SPI-bus (Linux);\n* [`rsl_comm_py/serve_rsl_autodetect.py`](./rsl_comm_py/serve_rsl_autodetect.py): copies the [`rsl_autodetect.py`](./rsl_comm_py/rsl_autodetect.py) script to the desired location;\n* [`rsl_comm_py/rsl_autodetect.py`](./rsl_comm_py/rsl_autodetect.py): a script for saving configuration for connection to the [USB Expansion Board](https://redshiftlabs.com.au/product/usb-expansion-board/);  \n* [`rsl_comm_py/shearwater_broadcast_packets.py`](./rsl_comm_py/shearwater_broadcast_packets.py): [dataclasses](https://docs.python.org/3/library/dataclasses.html) for `shearwater` broadcast messages;\n* [`rsl_comm_py/shearwater_registers.py`](./rsl_comm_py/shearwater_registers.py): `shearwater` register description file;\n* [`rsl_comm_py/shearwater_serial.py`](./rsl_comm_py/shearwater_serial.py): `shearwater` UART driver;\n* [`rsl_comm_py/shearwater_spi.py`](./rsl_comm_py/shearwater_spi.py): `shearwater` SPI driver for [USB-ISS](https://www.robot-electronics.co.uk/htm/usb_iss_tech.htm) or SPI-bus (Linux);\n* [`rsl_comm_py/um7_broadcast_packets.py`](./rsl_comm_py/um7_broadcast_packets.py): [dataclasses](https://docs.python.org/3/library/dataclasses.html) for `UM7` broadcast messages;\n* [`rsl_comm_py/um7_registers.py`](./rsl_comm_py/um7_registers.py): `UM7` register description file;\n* [`rsl_comm_py/um7_serial.py`](./rsl_comm_py/um7_serial.py): `UM7` UART driver;\n* [`rsl_comm_py/um7_spi.py`](./rsl_comm_py/um7_spi.py): `UM7` SPI driver for [USB-ISS](https://www.robot-electronics.co.uk/htm/usb_iss_tech.htm) or SPI-bus (Linux);\n\n\n## HW Prerequisites\n\n`UM7`, `UM8`, `shearwater` boards provide serial (UART) and SPI interfaces, hence the two main ways to access the sensor data\nare UART (serial) or SPI. The differences in short: UART provides broadcast functionality, i.e.\nwhen packets can transmitted by the board with a specified frequency (transmission frequencies are set up in \nconfiguration registers), and it is possible to issue sensor commands (i.e. accessing command registers).\nSPI access the sensor register on demand (i.e. no broadcast functionality), and only\nconfiguration and data registers can be accessed. Accessing commands is only supported\nover UART.\n\n\n### Serial connection (UART)\n\nWhen using `UM7`, `UM8`, `shearwater` over serial, it is possible to connect to the target system (i.e. user's target):\n\n* to the serial port directly (e.g. when serial pins are wired out as on the \n[Raspberry PI](https://www.raspberrypi.org/), \n[NVIDIA Jetson Nano](https://developer.nvidia.com/embedded/jetson-nano-developer-kit), \nor other board computers with GPIO and UART pins wired out);\n\n* to the USB port using the  [USB Expansion Board](https://redshiftlabs.com.au/product/usb-expansion-board/),\nwhich performs USB to serial conversion.\n\n### SPI connection\n\nWhen using the `UM7`, `UM8`, `shearwater` over SPI, there are also a couple of possibilities:\n\n* to the SPI pins directly (e.g. Raspberry PI, NVIDIA Jetson Nano), i.e.\nthe pins are wired to the [SoC](https://en.wikipedia.org/wiki/System_on_a_chip) directly;\n\n* to the USB port using USB to SPI converter, e.g. [USB-ISS](https://www.robot-electronics.co.uk/htm/usb_iss_tech.htm).\n\nThe difference between the two, that in the first case SoC pins support the SPI\ndirectly (on the hardware level, which also mirrors in the OS level), then the OS is likely to have the SPI device\ndriver built-in (e.g. Raspberry PI). In the second case, using external converter (e.g. USB-ISS),\nthe device will be shown as a so-called [cdc_acm](https://www.keil.com/pack/doc/mw/USB/html/group__usbh__cdcacm_functions.html) (communication device class),\nand low-level SPI communication will be done by the converter, yet to the OS the \nconverter will be shown as Abstract Control Model (ACM) USB Device.\n\n## Installation\n\n```sh\npip install rsl-comm-py\n```\n\n## Python dependencies\n\n**TL;DR:** install (i) `pyserial`, `jinja2`.\n\nIf you want to use SPI: if using on Linux and use SPI bus directly, install `spidev`,\notherwise if using USB-ISS install `usb_iss` python package.\n\nAlternatively, one may use [`environment.yml`](./environment.yml)\nto create conda environment with dependencies resolved.\n\nIf you are using `python3.6`, you need to install `dataclasses` \n(the module is included in standard library since `python3.7`,\nand for `3.6` needs to be installed separately). \n\n## Python driver 101\n\nThe python driver for Redshift Labs Pty Ltd orientation sensors works as follows:\nthe `*.svd` (e.g. `um7.svd`) file describes the register map, and the fields of registers.\nFrom the `*.svd` file the `[sensor]_registers.py`\n(e.g. `um7_registers.py` or `shearwater_registers.py`) is generated.\nThe files have generated methods for reading / writing single registers, \nand how to interpret the payload. In addition, the files\n(e.g. `um7_registers.py` or `shearwater_registers.py`) provide\nabstract methods `connect`, `read_register`, and `write_register`.\n\nThe `[sensor]_serial.py` files (e.g. `shearwater_serial.py` or `um7_serial.py`)\nimplement required functionality to read / write registers via the UART interface.\nIn addition to this the `[sensor]_serial.py` files also implement decoding of broadcast packets.\nConnection to the UART might be done via \n[USB Expansion Board](https://redshiftlabs.com.au/product/usb-expansion-board/)\nand for this the so-called `device` file might be used.\nOne can also connect to the port directly using the `port` argument.\n\nThe `[sensor]_spi.py` files (e.g. `shearwater_spi.py` or `um7_spi.py`)\nimplement required functionality to read / write registers via SPI interface.\nIn particularly two ways of connecting to SPI are supported:\neither using [USB-ISS](https://www.robot-electronics.co.uk/htm/usb_iss_tech.htm)\nadapter, and corresponding `usb_iss` library, or \nconnecting to the SPI port directly, e.g. if Linux kernel have SPI functionality\nactivated, and the SPI interface is wired directly to the SoC (e.g. as for Raspberry PI).\nThis way the communication is done using the `spidev` python library.\n\n\n## OS Prerequisites\n\n1. When plugged in on a Linux system, \nthe `UM7`, `shearwater`, `UM8` sensor should appear \nas `/dev/ttyUSB*` device \n(this is only true when you are using\n[USB Expansion Board](https://www.redshiftlabs.com.au/sensors/usb-expansion-board)\nwhich in turn uses USB-to-serial [FTDI](https://www.ftdichip.com/)\nchip.\n\n2. If you are on a Linux machine, your Linux user must be a member of the\n`dialout` group \n(e.g. see this [thread](https://unix.stackexchange.com/questions/14354/read-write-to-a-serial-port-without-root))\nto be able to read/write `ttyUSB*` devices \nwithout root privileges.\n\n\n\n## Device autodetect\n\nTo facilitate discovering `RSL` sensors \n(`UM7`, `UM8`, `shearwater`) among other\nUSB-to-serial devices (and store the configuration when \nre-plugging and/or adding other devices), we provide `rsl_autodetect` method\nand the `rsl_autodetect.py` script (both are equivalent).\n\nThese methods create `rsl_[SERIAL_NUM].json` configuration file,\nwhich is then used to match the USB-to-serial converter to which\nthe sensor is connected.\n\n### Using `rsl_autodetect` method\n\n1. Launch `rsl_autodetect` method:\n\n```python\nfrom rsl_comm_py import rsl_autodetect\nrsl_autodetect()\n``` \n\nAt this point, the `rsl_[SERIAL_NUM].json` files is created \nin the current directory.\n\n### Using `rsl_autodetect.py` script\n\n1. Obtain the `rsl_autodetect.py` script from `rsl_comm_py` package:\n\n```python\nfrom rsl_comm_py import serve_autodetect_script\nserve_autodetect_script()\n``` \n\n2. Launch the script and follow instructions:\n\n```sh\n./rsl_autodetect.py --help\n```\n\nAt this point, the `rsl_[SERIAL_NUM].json` file is created \nin the current directory.\n\n**Important:** The created `rsl_[SERIAL_NUM].json` configuration file \nshould be used as a device file, when creating instance of\n`UM7Communication` class:\n\n```python\nfrom rsl_comm_py import ShearWaterSerial\nshearwater_sensor = ShearWaterSerial(device='rsl_[MY_SERIAL_NUM].json')\n``` \n\n## Quick start for `UM7`\n\nCreate `UM7` serial communication object, UM7 connected to a port `/dev/ttyUSB0`,\nand read the firmware version:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\nprint(f\"um7 firmware revision: {um7_serial.get_fw_revision}\")\n```\n\nReading **all types** of broadcast packets from `UM7`, 1000 packets in total:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\nfor packet in um7_serial.recv_broadcast(num_packets=1000):\n    print(f\"packet: {packet}\")\n```\n\nReading the **raw sensor data** broadcast packets from `UM7`, not limiting number of packets:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\nfor packet in um7_serial.recv_all_raw_broadcast():\n    print(f\"packet: {packet}\")\n```\n\nReading 100 **processed sensor data** broadcast packets from `UM7`:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\nfor packet in um7_serial.recv_all_proc_broadcast(num_packets=100):\n    print(f\"packet: {packet}\")\n```\n\nReading the **Euler angles** broadcast packets from `UM7`:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\nfor packet in um7_serial.recv_euler_broadcast():\n    print(f\"packet: {packet}\")\n```\n\nReading the `CREG_COM_SETTINGS` configuration register from `UM7`:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\nprint(f\"received value: {um7_serial.creg_com_settings}\")\n```\n\nWriting 40 (changing `ALL_RAW_RATE` to 40 Hz) to the `CREG_COM_RATES2` register:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\num7_serial.creg_com_rates2 = 40\n```\n\n## Quick start for `shearwater`\n\nRead `shearwater` firmware build id:\n\n```python\nfrom rsl_comm_py import ShearWaterSerial\nshearwater = ShearWaterSerial(device='rsl_A500CNHH.json')\nprint(f\"get_fw_build_id : {shearwater.get_fw_build_id}\")\n```\n\nCreate `UM7` serial communication object, UM7 connected to a port `/dev/ttyUSB0`,\nand read the firmware version:\n\n```python\nfrom rsl_comm_py import ShearWaterSerial\nshearwater = ShearWaterSerial(port_name='/dev/ttyUSB0')\nprint(f\"shearwater firmware revision: {shearwater.get_fw_build_version}\")\n```\n\n\n## Slow start\n\nTake a look at the available [examples](./um7py/examples).\n\nIn order to use the `python` driver functionality one first needs to \ncreate a communication object (e.g. `UM7Serial`, `UM7SpiLinuxPort`,\nor `ShearWaterSerial`, `ShearWaterSpiUsbIss`).\n\nThe construction of the UART communication object can be done \neither by specifying a `port_name` directly (e.g. `/dev/ttyS0`), or\nby specifying the `device` file that stores *USB2Serial* config\n(e.g. `rsl_A500CNP8.json`). The `device` argument shall \nonly be used, when RSL board (`UM7`, `UM8`, `shearwater`) is connected via the \n[USB Expansion Board](https://redshiftlabs.com.au/product/usb-expansion-board/),\nthe `device` stores properties of the expansion board. Why?\nThe issue to keep in mind that when the sensor is re-plugged,\nit might appear to the OS as different serial connection,\ni.e. when first plugged in the OS detects the device as\n`/dev/ttyS0`, then after re-plugging exactly the same \nsensor might appear by different port name, e.g. `/dev/ttyS1`, which \nmeans the user code needs to be changed.\nIf using the `device`, we store properties of the\n[USB Expansion Board](https://redshiftlabs.com.au/product/usb-expansion-board/)\nin a JSON file (e.g. converter chip ID) \nand search connection which match with the properties, and \nin this case connecting to the sensor, even if is shown as a \ndifferent serial connection by the OS.\n\nSo the communication object can either be created with specifying the `port_name`:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7_serial = UM7Serial(port_name='/dev/ttyUSB0')\n```\n\nOr with specifying the `device`:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7 = UM7Serial(device='um7_A500CNP8.json')\n```\n\nThe two options are exclusive, i.e. specifying both `port_name` and `device` will not work.\n\nAccessing to the individual registers is done via python \n[properties](https://docs.python.org/3/library/functions.html#property).\nProperties for register names are all lower-case, split by `_`.\n\nFor example, reading the `CREG_COM_RATES1`:\n\n```python\nfrom rsl_comm_py import UM7Serial\num7 = UM7Serial(device='rsl_A500CNP8.json')\num7.creg_com_rates1\n```\n\nNote, that reading single register is quite a slow operation,\nsince one first constructs and sends a packet, and then parses \noutput for response. \nReading single registers is not recommended for reading sensor data,\nsince it might happen, that data from different sensor registers come from different measurements.\nWe strongly advice to use broadcast messages for reading sensor and fusion data.\n\n## UM7 Data Packets\n\n`UM7` sends different types of broadcast messages over the UART.\nThese messages are e.g. `HEALTH` packet (i.e. the `DREG_HEALTH` register),\nraw sensor data (raw gyro, accelerometer, and magnetometer, and temperature),\nprocessed sensor data (processed gyro, accelerometer, and magnetometer),\nEuler angles, quaternions.\n\nThese data packets are stored in the repo as \n[dataclasses](https://docs.python.org/3/library/dataclasses.html)\nin the file [um7_broadcast_packets.py](./rsl_comm_py/um7_broadcast_packets.py).\nNote, that only payload stored in the dataclasses, and all the \nchecks (e.g. checksum, data length) is done during broadcast reception.\n\nFor example, the raw data broadcast message has the following payload:\n\n```python\nfrom dataclasses import dataclass\n\n@dataclass\nclass UM7AllRawPacket:\n    gyro_raw_x: int\n    gyro_raw_y: int\n    gyro_raw_z: int\n    gyro_raw_time: float\n    accel_raw_x: int\n    accel_raw_y: int\n    accel_raw_z: int\n    accel_raw_time: float\n    mag_raw_x: int\n    mag_raw_y: int\n    mag_raw_z: int\n    mag_raw_time: float\n    temperature: float\n    temperature_time: float\n```\n\n## `shearwater` Data Packets\n\n\n`shearwater`, similar to `UM7` sends broadcast messages over the UART.\nThese are e.g. raw sensor data (raw gyro, accelerometer, and magnetometer, and temperature),\nprocessed sensor data (processed gyro, accelerometer, and magnetometer),\nEuler angles, quaternions.\n\nThese data packets are defined in\nin the file [shearwater_broadcast_packets.py](./rsl_comm_py/shearwater_broadcast_packets.py).\n\nFor example, the data broadcast message with the processed sensor data \nhas the following payload:\n\n```python\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass ShearWaterAllProcPacket:\n    gyro_1_proc_x: float\n    gyro_1_proc_y: float\n    gyro_1_proc_z: float\n    gyro_1_proc_time: float\n    gyro_2_proc_x: float\n    gyro_2_proc_y: float\n    gyro_2_proc_z: float\n    gyro_2_proc_time: float\n    accel_1_proc_x: float\n    accel_1_proc_y: float\n    accel_1_proc_z: float\n    accel_1_proc_time: float\n    mag_1_proc_x: float\n    mag_1_proc_y: float\n    mag_1_proc_z: float\n    mag_1_norm: float\n    mag_1_proc_time: float\n    mag_2_proc_x: float\n    mag_2_proc_y: float\n    mag_2_proc_z: float\n    mag_2_norm: float\n    mag_2_proc_time: float\n```\n\n\n## Acknowledgement\n\nWe are so grateful for the open source community for creating\nopen source UM7 driver versions and sharing it with a world!\nWe are inspired by your work, and at the same time \nwant to improve:\nprovide UART and SPI communication, in detail documentation \nand explanations to facilitate the start for new users.\n\nThe acknowledgments go to:\n\n* [Daniel Kurek](https://github.com/dank93) and his\n[um7](https://github.com/dank93/um7) repository,\nfor implementing the first driver for interfacing with UM7;\n\n* [Till Busch](https://github.com/buxit) and his [um7](https://github.com/buxit/um7) \nfork of Daniel's Kurek repo, for extending on the Daniel's work and\nadding new functionality.\n\n## Maintainer\n\n[Dr. Konstantin Selyunin](http://selyunin.com/), for\nsuggestions / questions / comments please contact: selyunin [dot] k [dot] v [at] gmail [dot] com\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RedshiftLabsPtyLtd/rsl_comm_py",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rsl-comm-py",
    "package_url": "https://pypi.org/project/rsl-comm-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/rsl-comm-py/",
    "project_urls": {
      "Homepage": "https://github.com/RedshiftLabsPtyLtd/rsl_comm_py"
    },
    "release_url": "https://pypi.org/project/rsl-comm-py/0.1.11/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": "",
    "summary": "Redshift Labs Pty Ltd RSL Communication Python Driver",
    "version": "0.1.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15746308,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63023f57009911e7706fec6a4c3584f6facf1714f561b59c5ffd59b9fa96b985",
          "md5": "08c921a3d5c39023eb86cab2d4adfb74",
          "sha256": "5d47380def9745afd0c0bd90d6649963d43c654f7a4d5879054fb696ec3f30aa"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08c921a3d5c39023eb86cab2d4adfb74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 170892,
        "upload_time": "2021-12-07T13:36:38",
        "upload_time_iso_8601": "2021-12-07T13:36:38.942381Z",
        "url": "https://files.pythonhosted.org/packages/63/02/3f57009911e7706fec6a4c3584f6facf1714f561b59c5ffd59b9fa96b985/rsl_comm_py-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcd010a4b809be2e2009026033c85896c5e089bd927a5278e61d5eb61ce837da",
          "md5": "90753ecd9875563ea2e21a870fcbe0ec",
          "sha256": "3281c9bcd410072e5aa639fe7772a9ed2da5739a9055ee878a98d5a6683884f0"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "90753ecd9875563ea2e21a870fcbe0ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145199,
        "upload_time": "2021-12-07T13:36:40",
        "upload_time_iso_8601": "2021-12-07T13:36:40.532542Z",
        "url": "https://files.pythonhosted.org/packages/dc/d0/10a4b809be2e2009026033c85896c5e089bd927a5278e61d5eb61ce837da/rsl_comm_py-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39f7509f518286a2757987a8a182d4e0113d821e57afdc26a1834e1f5dd17b94",
          "md5": "60088c126a82cb13dbd7c4cc10ec5160",
          "sha256": "ff110053708f4a300d5a3a4d54a604f042a8dfc9304fc2f94e5ab8c6af652f7a"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60088c126a82cb13dbd7c4cc10ec5160",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 170905,
        "upload_time": "2021-12-07T13:29:48",
        "upload_time_iso_8601": "2021-12-07T13:29:48.150487Z",
        "url": "https://files.pythonhosted.org/packages/39/f7/509f518286a2757987a8a182d4e0113d821e57afdc26a1834e1f5dd17b94/rsl_comm_py-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "852ab27abe6ab941db5dc3aa25f0b5488264a51d27b0e57729289897dac47d78",
          "md5": "96d1bd320ebb49005a5a4bbc4a2b2877",
          "sha256": "3e239e54da2bef75544fff4df3faa8a6053d4c3497a97dbffb2a14e1ff19cf44"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "96d1bd320ebb49005a5a4bbc4a2b2877",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 142675,
        "upload_time": "2021-12-07T13:29:50",
        "upload_time_iso_8601": "2021-12-07T13:29:50.053157Z",
        "url": "https://files.pythonhosted.org/packages/85/2a/b27abe6ab941db5dc3aa25f0b5488264a51d27b0e57729289897dac47d78/rsl_comm_py-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d65cd3c235342fe51e081d2dc242a1a1dc7ab2cf0715ce9ac474dcbbfde21dea",
          "md5": "01c41c3254b03d467c8926d36ad4c534",
          "sha256": "b8bc94cf9c8fdfbaa2807cd1d51d2627f2c758e810f990382648bac8af7b2383"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01c41c3254b03d467c8926d36ad4c534",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 175790,
        "upload_time": "2022-11-12T18:02:16",
        "upload_time_iso_8601": "2022-11-12T18:02:16.008412Z",
        "url": "https://files.pythonhosted.org/packages/d6/5c/d3c235342fe51e081d2dc242a1a1dc7ab2cf0715ce9ac474dcbbfde21dea/rsl_comm_py-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "280d00102d8d2fbba4c65ee89fb6d95f6a8ef047023f3dbe8e3c4471edaee3eb",
          "md5": "5beb2a2ff963bf9d224cee54a1e08e0f",
          "sha256": "d362b666131a377e2259f0a5b756fe051189c0f1b001fce01fd8560347133deb"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "5beb2a2ff963bf9d224cee54a1e08e0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 146793,
        "upload_time": "2022-11-12T18:02:17",
        "upload_time_iso_8601": "2022-11-12T18:02:17.737805Z",
        "url": "https://files.pythonhosted.org/packages/28/0d/00102d8d2fbba4c65ee89fb6d95f6a8ef047023f3dbe8e3c4471edaee3eb/rsl_comm_py-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "242f88e4fd8a9d17f882874723a49914be0437ae07028e062bff479d8b819aac",
          "md5": "ce552bd312bfdefe940aa344baade57d",
          "sha256": "521b1351394ed913e3296cb3e35ded8540c5c91638b8a831596334e40667b5d7"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce552bd312bfdefe940aa344baade57d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 170975,
        "upload_time": "2021-12-07T13:48:19",
        "upload_time_iso_8601": "2021-12-07T13:48:19.354821Z",
        "url": "https://files.pythonhosted.org/packages/24/2f/88e4fd8a9d17f882874723a49914be0437ae07028e062bff479d8b819aac/rsl_comm_py-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10a34ff3256622f7177b6909197ed7014c8919ca41307a0626cc4667611e77c9",
          "md5": "3848469ed7e5518890effeac29107ffb",
          "sha256": "ac90e3e7d219852f32654d1dc1fe6bb5ecac1f2e048a60439f594a07fe866759"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3848469ed7e5518890effeac29107ffb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145200,
        "upload_time": "2021-12-07T13:48:20",
        "upload_time_iso_8601": "2021-12-07T13:48:20.504791Z",
        "url": "https://files.pythonhosted.org/packages/10/a3/4ff3256622f7177b6909197ed7014c8919ca41307a0626cc4667611e77c9/rsl_comm_py-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25fdf7fb97099920c5de3d11180931572bb1a0edaf7a77cad7da5b75af6067b3",
          "md5": "ca4eb6ac3b74fe19044ce8a3f25de508",
          "sha256": "6cf143e81a532c64b06ccdbfd3857413cd5a48752a51a9dd298c003ebaeec032"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca4eb6ac3b74fe19044ce8a3f25de508",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 171398,
        "upload_time": "2021-12-08T08:10:26",
        "upload_time_iso_8601": "2021-12-08T08:10:26.295521Z",
        "url": "https://files.pythonhosted.org/packages/25/fd/f7fb97099920c5de3d11180931572bb1a0edaf7a77cad7da5b75af6067b3/rsl_comm_py-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba1e6d3a29fa8c3bcb22111bef86f60abaa150e5b6b792ba1159433ebda906d5",
          "md5": "a364cb6c8ec259966dc9e78fbdfe5117",
          "sha256": "cba0bfd2ab522f7a41811bf8da821bb14262566a8f7f955d34ff2bea03f7cff6"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a364cb6c8ec259966dc9e78fbdfe5117",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145267,
        "upload_time": "2021-12-08T08:10:27",
        "upload_time_iso_8601": "2021-12-08T08:10:27.863809Z",
        "url": "https://files.pythonhosted.org/packages/ba/1e/6d3a29fa8c3bcb22111bef86f60abaa150e5b6b792ba1159433ebda906d5/rsl_comm_py-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca7405307fe1a7d115d49b4a7728cc1c720b6945ee99abeb64a1964eaea534c7",
          "md5": "b5254477ba7f210d6568c9940f745b91",
          "sha256": "3470f0aaa5d546f3a15c8637b826bc3f5d71f9d903e2b026b2f10b3ef8fa56c1"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5254477ba7f210d6568c9940f745b91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 171479,
        "upload_time": "2021-12-08T15:41:02",
        "upload_time_iso_8601": "2021-12-08T15:41:02.450908Z",
        "url": "https://files.pythonhosted.org/packages/ca/74/05307fe1a7d115d49b4a7728cc1c720b6945ee99abeb64a1964eaea534c7/rsl_comm_py-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce56729170242909c4c4cc4cee1df3a144c24222226368fbba0cae079e7991d8",
          "md5": "70664563ef65312e34c9d99bddc43a9d",
          "sha256": "5a7cd22ed5e9f71d9768c5579f1c81b175f85e106b4b72dbeafebe84b87ae010"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "70664563ef65312e34c9d99bddc43a9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145342,
        "upload_time": "2021-12-08T15:41:04",
        "upload_time_iso_8601": "2021-12-08T15:41:04.184360Z",
        "url": "https://files.pythonhosted.org/packages/ce/56/729170242909c4c4cc4cee1df3a144c24222226368fbba0cae079e7991d8/rsl_comm_py-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aba89b95b0b8aca61738908cb3d41dec462e7434c7af2f10234c186747233c23",
          "md5": "67522262b494b500ae0581924bd06037",
          "sha256": "951c012298c7192ce168fb2d1976b6ddaecfad07078a5d514b2c07dee8c4cd74"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67522262b494b500ae0581924bd06037",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 171629,
        "upload_time": "2021-12-08T17:01:26",
        "upload_time_iso_8601": "2021-12-08T17:01:26.377949Z",
        "url": "https://files.pythonhosted.org/packages/ab/a8/9b95b0b8aca61738908cb3d41dec462e7434c7af2f10234c186747233c23/rsl_comm_py-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aba124c4108374def72d14eb3107daf4c38d737896ef314fecf93e494c97be1c",
          "md5": "571ef510b2cb5ce6a884572d03e1360e",
          "sha256": "5ed4ba2f97e792708bb991267abc5f7da9c2bcfd2f46becd7c91ec397bd4b1b0"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "571ef510b2cb5ce6a884572d03e1360e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 145212,
        "upload_time": "2021-12-08T17:01:27",
        "upload_time_iso_8601": "2021-12-08T17:01:27.773584Z",
        "url": "https://files.pythonhosted.org/packages/ab/a1/24c4108374def72d14eb3107daf4c38d737896ef314fecf93e494c97be1c/rsl_comm_py-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b45513b3198c3e8eb687ae628fc0c0f6ea3eb0754eb23a49d05d547124c1d7a7",
          "md5": "b1df1c982bdb3467589a3be02cc4fcf3",
          "sha256": "f68f550eaf818cd02f217064ccf8d851e1a51e9aaf335d33573cae3580f40fed"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1df1c982bdb3467589a3be02cc4fcf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 148918,
        "upload_time": "2021-08-28T11:09:35",
        "upload_time_iso_8601": "2021-08-28T11:09:35.277629Z",
        "url": "https://files.pythonhosted.org/packages/b4/55/13b3198c3e8eb687ae628fc0c0f6ea3eb0754eb23a49d05d547124c1d7a7/rsl_comm_py-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77782b923d5290766d1bf83508d12c86245b8fb953db757a53d0a59abdeea7fe",
          "md5": "62a6e3b30af7f7ed35a6f196080646f5",
          "sha256": "78af0a9d6b54ee88c71d049cc55a6a69288140de9110cf5aec899e003632c72c"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "62a6e3b30af7f7ed35a6f196080646f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 119419,
        "upload_time": "2021-08-28T11:09:36",
        "upload_time_iso_8601": "2021-08-28T11:09:36.537120Z",
        "url": "https://files.pythonhosted.org/packages/77/78/2b923d5290766d1bf83508d12c86245b8fb953db757a53d0a59abdeea7fe/rsl_comm_py-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3baa564584c5f4687e47d549d97570af18717755b1c17e7cdc502934e47f6ed0",
          "md5": "a1537cc7d561b00b150a6540494310df",
          "sha256": "5c1af7a496a26e14e2203aa947e2cd97011a66cca2f9d6b5214d94b919ad630a"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1537cc7d561b00b150a6540494310df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 169023,
        "upload_time": "2021-08-30T20:29:34",
        "upload_time_iso_8601": "2021-08-30T20:29:34.647166Z",
        "url": "https://files.pythonhosted.org/packages/3b/aa/564584c5f4687e47d549d97570af18717755b1c17e7cdc502934e47f6ed0/rsl_comm_py-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f732fc7ca879aff42ace3db022c5fbd9f3b02f2b94f2b7a222e50b3583de747",
          "md5": "a8dfb8520cccff7443133dc6b8b3f13a",
          "sha256": "f9f8e36fcdd674eb5a328d15c2ae4a743c6db4ceef9f6944e106002349dd055c"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a8dfb8520cccff7443133dc6b8b3f13a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 138260,
        "upload_time": "2021-08-30T20:29:35",
        "upload_time_iso_8601": "2021-08-30T20:29:35.783151Z",
        "url": "https://files.pythonhosted.org/packages/9f/73/2fc7ca879aff42ace3db022c5fbd9f3b02f2b94f2b7a222e50b3583de747/rsl_comm_py-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b20b07ac6c07bd66906b0a6931ae14e9a33470617c1301ac7e97380926527cf",
          "md5": "6eb4f9018fd92b4c6592e05a92f2933e",
          "sha256": "4464785dbef4a4b8f47464f9f51dd802268ecffd06a43e3f29683fd16399cb1b"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6eb4f9018fd92b4c6592e05a92f2933e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 169026,
        "upload_time": "2021-08-30T20:37:22",
        "upload_time_iso_8601": "2021-08-30T20:37:22.779944Z",
        "url": "https://files.pythonhosted.org/packages/5b/20/b07ac6c07bd66906b0a6931ae14e9a33470617c1301ac7e97380926527cf/rsl_comm_py-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad1f5ba374f5e0fec7e5fc24ffbca9c3cfab3bba6db724c53cc8a66890bad44e",
          "md5": "3b49c39c8beb014d26cfbbeb339e3301",
          "sha256": "9e03d2eae56b4eea2c4258e63b7a8d519fd31abcbe7a57f17765a56d7290af0c"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3b49c39c8beb014d26cfbbeb339e3301",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 138280,
        "upload_time": "2021-08-30T20:37:24",
        "upload_time_iso_8601": "2021-08-30T20:37:24.153358Z",
        "url": "https://files.pythonhosted.org/packages/ad/1f/5ba374f5e0fec7e5fc24ffbca9c3cfab3bba6db724c53cc8a66890bad44e/rsl_comm_py-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd1061afd67d2b7d62bf36b6f3502d5679c2a6451842cfc2f97289c6808661e4",
          "md5": "38fd39aea4e751ec5fcca22706faf1b1",
          "sha256": "9b7697ea324d5f46a738e250839822e67e326d47b5c7cd704561b054450e850a"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38fd39aea4e751ec5fcca22706faf1b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 169020,
        "upload_time": "2021-12-06T10:51:13",
        "upload_time_iso_8601": "2021-12-06T10:51:13.565009Z",
        "url": "https://files.pythonhosted.org/packages/fd/10/61afd67d2b7d62bf36b6f3502d5679c2a6451842cfc2f97289c6808661e4/rsl_comm_py-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2fe89eb5cad3f4f6b75596613f709117303d57647c007165f0bcab60d4749ce",
          "md5": "3010ae2566c69376029039b831536cc3",
          "sha256": "bc4642f6f0346fb970263ce2d1d35418016c9d42705f975af19d79d69e0bb444"
        },
        "downloads": -1,
        "filename": "rsl_comm_py-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3010ae2566c69376029039b831536cc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 138265,
        "upload_time": "2021-12-06T10:51:14",
        "upload_time_iso_8601": "2021-12-06T10:51:14.614985Z",
        "url": "https://files.pythonhosted.org/packages/c2/fe/89eb5cad3f4f6b75596613f709117303d57647c007165f0bcab60d4749ce/rsl_comm_py-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d65cd3c235342fe51e081d2dc242a1a1dc7ab2cf0715ce9ac474dcbbfde21dea",
        "md5": "01c41c3254b03d467c8926d36ad4c534",
        "sha256": "b8bc94cf9c8fdfbaa2807cd1d51d2627f2c758e810f990382648bac8af7b2383"
      },
      "downloads": -1,
      "filename": "rsl_comm_py-0.1.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01c41c3254b03d467c8926d36ad4c534",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 175790,
      "upload_time": "2022-11-12T18:02:16",
      "upload_time_iso_8601": "2022-11-12T18:02:16.008412Z",
      "url": "https://files.pythonhosted.org/packages/d6/5c/d3c235342fe51e081d2dc242a1a1dc7ab2cf0715ce9ac474dcbbfde21dea/rsl_comm_py-0.1.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "280d00102d8d2fbba4c65ee89fb6d95f6a8ef047023f3dbe8e3c4471edaee3eb",
        "md5": "5beb2a2ff963bf9d224cee54a1e08e0f",
        "sha256": "d362b666131a377e2259f0a5b756fe051189c0f1b001fce01fd8560347133deb"
      },
      "downloads": -1,
      "filename": "rsl_comm_py-0.1.11.tar.gz",
      "has_sig": false,
      "md5_digest": "5beb2a2ff963bf9d224cee54a1e08e0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 146793,
      "upload_time": "2022-11-12T18:02:17",
      "upload_time_iso_8601": "2022-11-12T18:02:17.737805Z",
      "url": "https://files.pythonhosted.org/packages/28/0d/00102d8d2fbba4c65ee89fb6d95f6a8ef047023f3dbe8e3c4471edaee3eb/rsl_comm_py-0.1.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}