{
  "info": {
    "author": "patrick",
    "author_email": "patrick@productaize.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Fast Active Record ORM for the dataset library\n==============================================\n\nWhy?\n----\n\nThe dataset library is a great and easy tool to work with any SQL database. Unfortunately, it lacks an object mapper (\nORM) - if you need one you are left with the complexity that is sqlalchemy.\n\nEnter dataset-orm\n\nHow?\n----\n\nInstallation\n\n    $ pip install dataset-orm\n\nDefine classes that define a dataset.Table:\n\n    from dataset_orm import Model, connect\n\n    class User(Model):\n        username = Column(types.string, unique=True)\n        data = Column(types.json)\n\n    connect('sqlite:///mydb.sqlite')\n\nAlternatively, use the functional API, e.g. to create models dynamically:\n\n    User = ds.Model.from_spec(name='User',\n                              columns=[ds.Column(ds.types.string, 'name', unique=True),\n                                       ds.Column(ds.types.json, 'data')],\n                              db=db)\n\nThen create rows directly from Python objects:\n\n    user = User(username='dave', data={'sports': ['football', 'tennis']'})\n    user.save()\n\n    user = User.objects.find_one(username='dave')\n    user.data\n    => \n    {'sports': ['football', 'tennis']'}\n\nQuery exiting tables, ORM-style:\n\n    User = Model.from_table(db['customer'])\n    User.objects.all()\n    =>\n    [ User(pk=1), User(pk=2), User(pk=3)]\n    \n    user = User.objects.find_one(name='John Walker')\n    print(user.pk, user.name)\n    => \n    1 John Walker\n\nUpdate and delete\n\n    user = User.objects.find_one(name='John Walker')\n    user.place = 'New York'\n    user.save()\n\n    users = User.objects.find(place='London')\n    users.delete()\n\nStore and access any data types, including json and binary values\n\n    class User(Model):\n        # in some dbs, unique strings must be limited in length\n        username = Column(types.string(length=100), unique=True)\n        picture = Column(types.binary)\n\n    user = User.objects.get(name='Dave')\n    with open('image.png', 'rb') as fimg:\n        user.picture = fimg.read()  \n        user.save()\n\nUse the file column type for transparently storing binary data:\n\n    class Image(Model):\n        imagefile = Column(types.file)\n\nUsage:\n\n    img = Image()\n    with open('/path/to/image') as f:\n       img.imagefile.write(f)\n    img.save()\n    data = img.imagefile.read()\n\nHere the imagefile field provides a file-like API. This is an efficient way to store binary data in the database. The\nfile's data is split in chunks and written to the database in multiple parts. On reading back, the chunks are retrieved\nfrom the db in parallel, in order to improve performance for large files. Tests indicate a 25% speed up is possible v.v.\na binary field.\n\nYou may use the `dataset.files` API to get a filesystem-like API to binary data stored in the database, without the need\nto use a model:\n\n    from dataset_orm import files\n\n    connect('sqlite:///test.sqlite')\n\n    files.write('myfile', b'some data')\n    files.read('myfile')\n    => b'some data'\n\n    files.exists('myfile') \n    => True\n    \n    files.list()\n    => ['myfile']\n\n    files.find('*file*')\n    => ['myfile']\n\n    files.remove('myfile')\n\nThe convenience methods `put()` and `get()` allow for an even simpler use of the files api:\n\n    files.put(b'some data', 'myfile')\n    data = files.get('myfile').read()\n    => b'some data'\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataset-orm",
    "package_url": "https://pypi.org/project/dataset-orm/",
    "platform": null,
    "project_url": "https://pypi.org/project/dataset-orm/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dataset-orm/0.3/",
    "requires_dist": [
      "dataset",
      "pyodbc ; extra == 'mssql'"
    ],
    "requires_python": "",
    "summary": "ORM for the dataset library",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13712115,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7906313112292b3fac3653d83a319368f49a256320c03adc610d1f4678fca728",
          "md5": "62e73e292a916483d644bb9af506404f",
          "sha256": "a0eba59419bc5076f12f5e697d34e8b24ae5a0b46361cbeaca78a10632b9a348"
        },
        "downloads": -1,
        "filename": "dataset_orm-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62e73e292a916483d644bb9af506404f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11878,
        "upload_time": "2022-03-30T04:30:05",
        "upload_time_iso_8601": "2022-03-30T04:30:05.741822Z",
        "url": "https://files.pythonhosted.org/packages/79/06/313112292b3fac3653d83a319368f49a256320c03adc610d1f4678fca728/dataset_orm-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a73057445c33d18527a67df82988497c355d3eccc15d98343c777812ebefd0ae",
          "md5": "8521f9ee0ce8ab5e16a99f026bc18e24",
          "sha256": "b58d72cf75b9214752e204937f44157ed4d4b302f697ec223b0449aec740ac38"
        },
        "downloads": -1,
        "filename": "dataset_orm-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8521f9ee0ce8ab5e16a99f026bc18e24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17115,
        "upload_time": "2022-04-14T14:05:01",
        "upload_time_iso_8601": "2022-04-14T14:05:01.117331Z",
        "url": "https://files.pythonhosted.org/packages/a7/30/57445c33d18527a67df82988497c355d3eccc15d98343c777812ebefd0ae/dataset_orm-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8425b1024827eb853ac404e6d0e726892c73b57af257b118117d2296d1d470cd",
          "md5": "fb19dc7faacd8406c620198aaddc356d",
          "sha256": "0ede1076c58a6b2edac7bb8ad5ff28f0dead35c2388baced69d8624acf17eea3"
        },
        "downloads": -1,
        "filename": "dataset_orm-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb19dc7faacd8406c620198aaddc356d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19131,
        "upload_time": "2022-05-04T16:56:17",
        "upload_time_iso_8601": "2022-05-04T16:56:17.894724Z",
        "url": "https://files.pythonhosted.org/packages/84/25/b1024827eb853ac404e6d0e726892c73b57af257b118117d2296d1d470cd/dataset_orm-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8425b1024827eb853ac404e6d0e726892c73b57af257b118117d2296d1d470cd",
        "md5": "fb19dc7faacd8406c620198aaddc356d",
        "sha256": "0ede1076c58a6b2edac7bb8ad5ff28f0dead35c2388baced69d8624acf17eea3"
      },
      "downloads": -1,
      "filename": "dataset_orm-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb19dc7faacd8406c620198aaddc356d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19131,
      "upload_time": "2022-05-04T16:56:17",
      "upload_time_iso_8601": "2022-05-04T16:56:17.894724Z",
      "url": "https://files.pythonhosted.org/packages/84/25/b1024827eb853ac404e6d0e726892c73b57af257b118117d2296d1d470cd/dataset_orm-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}