{
  "info": {
    "author": "William",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# vmrunPacked\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/THAVASIGTI/vmrunPacked)\n[![PyPI](https://img.shields.io/pypi/v/vmrunPacked)](https://pypi.org/project/vmrunPacked)\n[![Downloads](https://pepy.tech/badge/vmrunpacked)](https://pepy.tech/project/vmrunpacked)\n\n## Installation\n```\npip install vmrunPacked\n```\n### About\npython vmrun commands and actions execute `power` actions. `snapshot` actions. `recoard` actions. `guest os control` actions. `vprobe` actions. `general commands` actions\n\n### Import Pkg\n\n``` python\nimport vmrunPacked\n\nvmobj = vmrunPacked.Pack(\"/vmx_file_path/vm.vmx\",userName=\"admin\",passWord=\"admin@123\")\n# \"product\" this prams defualt \"ws\" options [\"fusion\", \"player\"]\n```\n\n# Power Commands\n\nIn this Power command support\n- start\n- stop\n- reset\n- suspend\n- pause\n- unpause\n\n### start\n``` python\nimport vmrunPacked\n\nvmobj = vmrunPacked.Pack(\"/vmx_file_path/vm.vmx\",userName=\"admin\",passWord=\"admin@123\")\nvmobj.start()\n\n```\nStarts a virtual machine (.vmx file) or team (.vmtm file). The default gui option starts the machine interactively, including startup dialog box, to allow noninteractive scripting.\n\n### stop\n\nstop command Parameters two `soft` and `hard`\n\n``` python\nvmobj.stop() #that call normal\nvmobj.stop(soft=True) #that call soft \"quick close\" vm\nvmobj.stop(hard=True) #that call hard \"force close\" vm\n# Exception \n# vmobj.stop(soft=True,hard=True)\n# tha case defualt \"soft\" parms call\n```\n\n### reset (reboot)\n\n``` python\nvmobj.reset() #that call normal\nvmobj.reset(soft=True) #that call soft \"quick close\" vm\nvmobj.reset(hard=True) #that call hard \"force close\" vm\n# Exception \n# vmobj.reset(soft=True,hard=True)\n# tha case defualt \"soft\" parms call\n```\n\n### suspend\n\n``` python\nvmobj.suspend() #that call normal\nvmobj.suspend(soft=True) #that call soft \"quick close\" vm\nvmobj.suspend(hard=True) #that call hard \"force close\" vm\n# Exception \n# vmobj.suspend(soft=True,hard=True)\n# tha case defualt \"soft\" parms call\n```\n\n### pause\n\n``` python\nvmobj.pause()\n```\nPauses a virtual machine (.vmx file). You can use this either to pause replay, or to pause normal operation.\n\n### unpause\n\n``` python\nvmobj.unpause()\n```\nResumes operation of a virtual machine (.vmx file) from where you paused replay or normal operation.\n\n# Snapshot Commands\n\nsupport actions\n- listSnapshots\n- snapshot\n- deleteSnapshot\n- revertToSnapshot\n\n### listSnapshots\n\nview list of snap shots\n``` python\nval = vmobj.list_snap_shots()\nprint(val)\n#return value type \"list\" \n```\n\n### snapshot\n\ntake snap shots vmware\n``` python\nsnap_shot_name = \"demo\"\nval = vmobj.snapshot(snap_shot_name)\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nCreates a snapshot of a virtual machine (.vmx file). For products such as Workstation that support multiple snapshots, you must provide the snapshot name.\n\n### deleteSnapshot\n\nremove snap shots vmware\n``` python\nsnap_shot_name = \"demo\"\nval = vmobj.delete_snapshot(snap_shot_name)\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nRemoves a snapshot from a virtual machine (.vmx file). For products such as Workstation that support multiple snapshots, you must provide the snapshot name.\n\n### revertToSnapshot\n\n``` python\nsnap_shot_name = \"demo\"\nval = vmobj.revert_to_snap_shot(snap_shot_name)\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nSets the virtual machine to its state at snapshot time. If a snapshot has a unique name within a virtual machine, revert to that snapshot by specifying the path to the virtual machine’s configuration file and the unique snapshot name.\n\n# Record and Replay Commands\n\nsupport actions\n- beginRecording\n- endRecording\n- beginReplay\n- endReplay\n\n### beginRecording\n``` python\nsnap_name = \"rec_demo\"\nval = vmobj.begin_recording(snap_name)\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nBegins recording a running virtual machine (.vmx file), storing activity in the specified snapshot object, with optional description.\n\n### endRecording\n``` python\nval = vmobj.end_recording()\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nEnds the recording of a virtual machine (.vmx file) that is in progress, and close its snapshot object.\n\n### beginReplay\n``` python\nsnap_name = \"rec_demo\"\nval = vmobj.begin_replay(snap_name)\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nBegins replaying the recorded activity of a powered off virtual machine (.vmx file) from a snapshot object, powering off if necessary.\n\n### endReplay\n``` python\nval = vmobj.end_replay()\nprint(val)\n# retun valus type \"list\". success when empty list\n```\nEnds the replaying of a virtual machine (.vmx file) that is currently underway.\n\n# Guest Operating System Commands\n\nsupport commands\n- writeVariable\n- readVariable\n- runProgramInGuest\n- runScriptInGuest\n- setSharedFolderState\n- addSharedFolder\n- removeSharedFolder\n- listProcessesInGuest\n- killProcessInGuest\n- fileExistsInGuest\n- deleteFileInGuest\n- renameFileInGuest\n- createDirectoryInGuest\n- deleteDirectoryInGuest\n- listDirectoryInGuest\n- copyFileFromHostToGuest\n- copyFileFromGuestToHost\n- captureScreen\n\n### writeVariable\n``` python\nvar_name = \"todo\"\nvar_value = \"todo_value\"\nvmobj.write_variable(var_name,var_value,runtimeConfig=True)\n# \"runtimeConfig\" parms or \"guestEnv\"\n```\n\n### readVariable\n``` python\nval_name = \"todo\"\nvmobj.read_variable(var_name,runtimeConfig=True)\n# \"runtimeConfig\" parms or \"guestEnv\"\n```\n\n### runProgramInGuest\n``` python\nfile_path = \"D:\\\\new\\\\todo.bat\"\nvmobj.run_program_in_guest(file_path,activeWindow=True,interactive=True)\n# \"noWait\" , \"activeWindow\" , \"interactive\" - bool value parms\n```\n\n### runScriptInGuest\n``` python\ninterpreter_path = \"C:\\\\Program Files\\\\Ruby\\\\ruby.exe\"\nfile_path = \"D:\\\\new\\\\init.rb\"\nvmobj.run_script_in_guest(interpreter_path, file_path)\n``` \nRuns a command script in the guest operating system. VMware Tools and a valid guest login are required.\n\n### setSharedFolderState\n``` python\nshare_name = \"vm\"\nnew_path = \"D:\\\\path\"\nvmobj.set_shared_folder_state(share_name, new_path,writable=True)\n# \"readonly\" or \"writable\" -> bool any one prams\n```\nModifies the writability state of a folder shared between the host and a guest virtual machine (.vmx file).\n\n### addSharedFolder\n``` python\nshare_name = \"vm\"\nhost_path = \"D:\\\\new_path\"\nvmobj.add_shared_folder(share_name, host_path)\n```\nAdds a folder to be shared between the host and guest. The share name is a mount point in the guest file system. The path to folder is the exported directory on the host.\n\n### removeSharedFolder\n``` python\nshare_name = \"D:\\\\new_path\"\nvmobj.remove_shared_folder(share_name)\n```\nRemoves a guest virtual machine’s access to a shared folder on the host. The share name is a mount point in the guest file system.\n\n### listProcessesInGuest\n``` python\nval = vmobj.list_processes_in_guest()\nprint(val)\n# return value \"list\"\n```\nLists all processes running in the guest operating system. VMware Tools and a valid guest login are required.\n\n### killProcessInGuest\n``` python\npid = \"<pid>\"\nval = vmobj.kill_process_in_guest(pid)\nprint(val)\n# return value \"list\"\n```\n\n### fileExistsInGuest\n``` python\nfile_path = \"D:\\\\new\\\\t.mp3\"\nval = vmobj.file_exists_in_guest(file_path)\nprint(val)\n# return value \"list\"\n```\nChecks whether the specified file exists in the guest operating system. VMware Tools and a valid guest login are required.\n\n### deleteFileInGuest\n``` python\nfile_path = \"D:\\\\new\\\\t.mp3\"\nval = vmobj.delete_file_in_guest(file_path)\nprint(val)\n# return value \"list\"\n```\n\n### renameFileInGuest\n``` python\nold_file_name = \"D:\\\\new\\\\todo.png\"\nnew_file_name = \"D:\\\\new\\\\work.png\"\nvmobj.rename_file_in_guest(old_file_name,new_file_name)\n```\nRenames or moves a file in the guest operating system. VMware Tools and a valid guest login are required.\n\n### createDirectoryInGuest\n``` python\nvar = \"C:\\\\new\\\\own\nvmobj.create_directory_in_guest(var)\n```\nCreates the specified directory in the guest operating system. VMware Tools and a valid guest login are required.\n\n### deleteDirectoryInGuest\n``` python\nvar = \"C:\\\\new\\\\own\nvmobj.delete_directory_in_guest(var)\n```\nDeletes a directory from the guest operating system. VMware Tools and a valid guest login are required.\n\n### listDirectoryInGuest\n``` python\nvar = \"D:\\\\new\"\nval = vmobj.list_directory_in_guest(var)\nprint(val)\n# return value \"list\"\n```\nLists directory contents in the guest operating system. VMware Tools and a valid guest login are required.\n\n### copyFileFromHostToGuest\n``` python\nhost_file_path = \"/home/<user>/h.txt\"\nguest_file_path = \"D:\\\\h.txt\"\nvmobj.copy_file_from_host_to_guest(host_file_path, guest_file_path)\n```\n\n### copyFileFromGuestToHost\n``` python\nguest_file_path = \"D:\\\\h.txt\"\nhost_file_path = \"/home/<user>/h.txt\"\nvmobj.copy_file_from_guest_to_host(guest_file_path, host_file_path)\n```\n\n### captureScreen\n``` python\nhost_path = \"/home/<user>/Pic/hub.png\"\nvmobj.capture_screen(host_path)\n```\n\n# VProbes Commands\n\nsupport commands\n- vprobeVersion\n- vprobeLoad\n- vprobeReset\n- vprobeListProbes\n- vprobeListGlobals\n\n### vprobeVersion\n``` python\nvmobj.vprobe_version()\n```\n\n### vprobeLoad\n``` python\nscript_path = \"<path>\"\nvmobj.vprobe_load(script_path)\n```\n\n### vprobeReset\n``` python\nvmobj.vprobe_reset()\n```\n\n### vprobeListProbes\n``` python\nval = vmobj.vprobe_list_probes()\nprint(val)\n```\n\n### vprobeListGlobals\n``` python\nval = vmobj.vprobe_list_globals()\nprint(val)\n```\n\n# GENERAL COMMANDS\n\nsupport commands\n- list\n- upgradevm\n- installtools\n- register\n- unregister\n- clone\n- deleteVM\n- listRegisteredVM\n- getGuestIpAddress\n\n### list\n\n``` python\nval = vmobj.list_vm()\nprint(val)\n```\n\n### upgradevm\n``` python\nvmobj.upgrade_vm()\n```\n\n### installtools\n``` python\nvmobj.install_tools()\n```\n\n### register\n``` python\nvmobj.register()\n```\n\n### unregister\n``` python\nvmobj.un_register()\n```\n\n### clone\n``` python\ndest_vmx_file = \"D:\\\\new\\\\clone.vmx\"\nsnap_name = \"<name>\"\nvmobj.clone(dest_vmx_file, snap_name, full=True)\n# parms \"full\" or \"linked\" -> bool \n```\n\n### listRegisteredVM\n``` python\nval = vmobj.list_registered_vm()\nprint(val)\n```\n\n### deleteVM\n``` python\nvmobj.delete_vm()\n```\n\n### getGuestIpAddress\n``` python\nval = vmobj.get_guest_ip_address()\nprint(val)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vmrunPacked",
    "package_url": "https://pypi.org/project/vmrunPacked/",
    "platform": "",
    "project_url": "https://pypi.org/project/vmrunPacked/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/vmrunPacked/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Using vmrun to Control Virtual Machines. VmWare-vmrun execute actions use python",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11139216,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "572371be105a6bd8db95b0f5d5e41e6ca2f0ce42e04385061c122a79b3c56a08",
          "md5": "c6a6a38e9506ca02aa1deea310b47901",
          "sha256": "f886c6a07cefdda60719832821fda2ce165221cc2943df75c13e02f0180f8428"
        },
        "downloads": -1,
        "filename": "vmrunPacked-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6a6a38e9506ca02aa1deea310b47901",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 8390,
        "upload_time": "2021-08-10T11:41:20",
        "upload_time_iso_8601": "2021-08-10T11:41:20.679093Z",
        "url": "https://files.pythonhosted.org/packages/57/23/71be105a6bd8db95b0f5d5e41e6ca2f0ce42e04385061c122a79b3c56a08/vmrunPacked-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "572371be105a6bd8db95b0f5d5e41e6ca2f0ce42e04385061c122a79b3c56a08",
        "md5": "c6a6a38e9506ca02aa1deea310b47901",
        "sha256": "f886c6a07cefdda60719832821fda2ce165221cc2943df75c13e02f0180f8428"
      },
      "downloads": -1,
      "filename": "vmrunPacked-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6a6a38e9506ca02aa1deea310b47901",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 8390,
      "upload_time": "2021-08-10T11:41:20",
      "upload_time_iso_8601": "2021-08-10T11:41:20.679093Z",
      "url": "https://files.pythonhosted.org/packages/57/23/71be105a6bd8db95b0f5d5e41e6ca2f0ce42e04385061c122a79b3c56a08/vmrunPacked-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}