{
  "info": {
    "author": "songs18",
    "author_email": "sounghaohao@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://badge.fury.io/py/federatedcore.svg\n    :target: https://badge.fury.io/py/federatedcore\n\nFederatedCore\n===============\n\nA research-oriented federal learning framework.\n\nFeatures\n===============\n#. Compatibility. FederatedCore can work seamlessly with mainstream deep learning frameworks, e.g., PyTorch and Tensorflow.\n#. Modular. The code of the algorithm module can be used individually.\n#. Easy to use. Retrofit existing code to data parallelism with no more than 100 lines code.\n\nSupport\n===============\n+---------------+-------------------------------------------+\n| Attributes    | Value                                     |\n+===============+===========================================+\n| Framework     | Pytorch, Tensorflow                       |\n+---------------+-------------------------------------------+\n| Engine        | parallelism, sequence                     |\n+---------------+-------------------------------------------+\n| Dataset       | label distribution, quality distribution  |\n+---------------+-------------------------------------------+\n| Topology      | parameter server, gossip, all reduce      |\n+---------------+-------------------------------------------+\n| Communication | queue, TCP                                |\n+---------------+-------------------------------------------+\n\nQuickStart\n===============\n\nInstall m3u8_To_MP4 via pip\n---------------------------------------\n\n.. code-block:: python\n\n   # via pypi.org\n   python -m pip install federatedcore\n\n   # first clone project, and install.\n   git clone https://github.com/songs18/FederatedCore.git\n   python -m pip install ./FederatedCore\n\n\n\nA small example (FedAvg)\n---------------------------------------\nImplement FedAvg in fewer than 100 lines.\n\n(/examples/FedAvg/federated_average.py)\n\n\n.. code-block:: python\n\n    def run(num_nodes, has_server):\n        def build_host_ids():\n            if has_server:\n                return [i for i in range(num_nodes + 1)]\n            else:\n                return [i for i in range(num_nodes)]\n\n        def build_func_libs():\n            func_libs = {\n                'train_dataset'   : 'self_contained_dnn',  # load_train_dataset,\n                'test_dataset'    : 'self_contained_dnn',  # load_test_dataset,\n                'model'           : 'self_contained_dnn',  # get_model,\n                'loss'            : 'self_contained_dnn',  # get_loss,\n                'optimizer'       : 'self_contained_dnn',  # get_optimizer,\n                'metric_loss'     : 'self_contained_dnn',  # get_metric_loss,\n                'metric_acc'      : 'self_contained_dnn',  # get_metric_acc,\n                'train_step'      : 'self_contained_dnn',  # get_train_step,\n                'test_step'       : 'self_contained_dnn',  # get_test_step,\n                'aggregation_func': average_parameters,\n            }\n            return func_libs\n\n        def build_linkers():\n            node_inboxes = queuer.node_inbox(num_nodes + 1)\n\n            linkers = list()\n            for host_id in range(num_nodes):\n                linker = queuer.LocalQueue(host_id, node_inboxes)\n                linkers.append(linker)\n\n            if has_server:\n                linker = queuer.LocalQueue(num_nodes, node_inboxes)\n                linkers.append(linker)\n\n            return linkers\n\n        def build_execution_plans():\n            execution_plans = ExecutionPlanTemplate.client_train * 5\n            execution_plans = [[[c, {}] for c in execution_plans] for _ in range(num_nodes)]\n\n            if has_server:\n                server_execution_plan = ExecutionPlanTemplate.server_init + ExecutionPlanTemplate.server_sync_train * 5\n                server_execution_plan.pop(-1)\n                server_execution_plan = [[s, {'iteration': 3}] for s in server_execution_plan]\n\n                execution_plans.append(server_execution_plan)\n\n            return execution_plans\n\n        host_ids = build_host_ids()\n        func_libs = build_func_libs()\n        linkers = build_linkers()\n        execution_plans = build_execution_plans()\n\n        parallelism.run_parallel(host_ids, func_libs, linkers, execution_plans)\n\n\n    def main():\n        num_nodes = 2\n        generate_topology(num_nodes)\n        split_dataset(num_nodes)\n        build_host(num_nodes)\n        run(num_nodes, True)\n\n\n    if __name__ == '__main__':\n        main()\n\n\n\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/songs18/FederatedCore",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "federatedcore",
    "package_url": "https://pypi.org/project/federatedcore/",
    "platform": "all",
    "project_url": "https://pypi.org/project/federatedcore/",
    "project_urls": {
      "Homepage": "https://github.com/songs18/FederatedCore"
    },
    "release_url": "https://pypi.org/project/federatedcore/0.0.2/",
    "requires_dist": [
      "decorator",
      "networkx",
      "numpy"
    ],
    "requires_python": "",
    "summary": "A research-oriented federal learning framework.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16003534,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dda9a1b7d36d14e0ca5957060b250b02a4bb6210d7cf07fa569007d27eb80112",
          "md5": "89baf63809fee7f88cba83ad87fd94da",
          "sha256": "876bfc73d00758b202ab591f854aee3b68f5f9af34c6547083c96042ce769c04"
        },
        "downloads": -1,
        "filename": "federatedcore-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89baf63809fee7f88cba83ad87fd94da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22274,
        "upload_time": "2022-11-06T08:50:09",
        "upload_time_iso_8601": "2022-11-06T08:50:09.374856Z",
        "url": "https://files.pythonhosted.org/packages/dd/a9/a1b7d36d14e0ca5957060b250b02a4bb6210d7cf07fa569007d27eb80112/federatedcore-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b59856e03aaf996c3fd8644e06d517325254efb7c7671c9fff38b728ea58b8ed",
          "md5": "09bcfe970e90c13c8a05521d756d0bbf",
          "sha256": "ef86575d5edc6d460a6c67bcf6b4b3a435d3cd46afcedc7d9e78851bdebbd402"
        },
        "downloads": -1,
        "filename": "federatedcore-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09bcfe970e90c13c8a05521d756d0bbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14571,
        "upload_time": "2022-11-06T08:50:11",
        "upload_time_iso_8601": "2022-11-06T08:50:11.560043Z",
        "url": "https://files.pythonhosted.org/packages/b5/98/56e03aaf996c3fd8644e06d517325254efb7c7671c9fff38b728ea58b8ed/federatedcore-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e0fcb75e4568350bdd7e70639e2e1652a6e35de69d1ed46b4397ceb5921e51",
          "md5": "b3e8c3696bfbdcf1b98af027eaf82f98",
          "sha256": "0087fe5ec98261ead935fb0d1ea1f80fba009e2e6a0d1d96f7bcc274e6b3cf2e"
        },
        "downloads": -1,
        "filename": "federatedcore-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3e8c3696bfbdcf1b98af027eaf82f98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40622,
        "upload_time": "2022-12-06T03:13:36",
        "upload_time_iso_8601": "2022-12-06T03:13:36.709558Z",
        "url": "https://files.pythonhosted.org/packages/95/e0/fcb75e4568350bdd7e70639e2e1652a6e35de69d1ed46b4397ceb5921e51/federatedcore-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95e0fcb75e4568350bdd7e70639e2e1652a6e35de69d1ed46b4397ceb5921e51",
        "md5": "b3e8c3696bfbdcf1b98af027eaf82f98",
        "sha256": "0087fe5ec98261ead935fb0d1ea1f80fba009e2e6a0d1d96f7bcc274e6b3cf2e"
      },
      "downloads": -1,
      "filename": "federatedcore-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3e8c3696bfbdcf1b98af027eaf82f98",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40622,
      "upload_time": "2022-12-06T03:13:36",
      "upload_time_iso_8601": "2022-12-06T03:13:36.709558Z",
      "url": "https://files.pythonhosted.org/packages/95/e0/fcb75e4568350bdd7e70639e2e1652a6e35de69d1ed46b4397ceb5921e51/federatedcore-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}