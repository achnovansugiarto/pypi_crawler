{
  "info": {
    "author": "Himanshu Sagar",
    "author_email": "sagarhimanshu355@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Binary_Search_Trees\n## Installation\n\n```bash\npip install Binary_Search_Trees\n```\n\n## It is a module for Binary Search Tree Data Structures. It contains Methods to create,insert,delete,search,traverse and for many other useful Binary search Tree operations.\n\n\n```python\nclass Node:\n    def __init__(self, data=None):\n        self.left = None\n        self.right = None\n        self.data = data\n```\n\n```python\nfrom Binary_Search_Trees import BST as bst\n```\n\n## Methods\n=======================================\n1. CreateBST()\n\n\tBy Default Creates a Root Node With data=None</br>\n\tArgument: data for Root Node -- Any value Can be passed,which will be assigned to root Node.</br>\n\tReturns    : Address of Root Node of BST\n\n```python\nroot=bst.CreateBST()\n```\n\n2. GetLeftChild(Argument)\n\n\tArgument: Node of object type</br>\n\tReturns    : Address of left child of the Node\n\n```python\nbst.GetLeftChild(root)\n```\n\n3. GetRightChild(Argument)\n\n\tArgument: Node of object type</br>\n\tReturns    : Address of Right child of the Node\n\n```python\nbst.GetRightChild(root)\n```\n\n4. GetRootValue(Argument)\n\n\tArgument: Node of object type</br>\n\tReturns : Data of the Node passed\n\n```python\nbst.GetRootValue(root)\n```\n\n5. Insert(Argument1,Argument2,Argument3)\n\n\tArgument1: Root Node</br>\n\tArgument2: Data to be Inserted --Can be : homogeneous list, int, float or string</br>\n\tArgument3: only in case of inserting dictionaries-- To insert dictionary values pass: 'values'</br>\n                                                   -- To insert dictionary keys pass: 'keys'</br>\n\n\tReturns  : Nothing\n\n```python\nbst.Insert(root,4)# passing integer\nbst.Insert(root,'d') #passing character\nbst.Insert(root,57.733) # passing float value\n```\n\n```python\nbst.Insert(root,[4,1,2,7,5,9])# passing list\n```\n\n```python\nbst.Insert(root,{1:1,2:4,5:25,3:9},'values')# passing dictionary\nbst.Insert(root,{1:1,2:4,5:25,3:9},'keys')\n```\n\n6. Inorder(Argument)\n\n\tArgument: Root Node of BST which needs to be traversed</br>\n\tReturns : List of elements after inorder traversal\n\n```python\nval=bst.Inorder(root)\nprint(val)\n```\n\n7. Preorder(Argument)\n\n\tArgument: Root Node of BST which needs to be traversed</br>\n\tReturns : List of elements after preorder traversal\n\n```python\nval=bst.Preorder(root)\nprint(val)\n```\n\n8. Postorder(Argument)\n\n\tArgument: Root Node of BST which needs to be traversed</br>\n\tReturns : List of elements after postorder traversal\n\n```python\nval=bst.Postorder(root)\nprint(val)\n```\n\n9. LevelOrder(Argument)\n\n\tArgument: Root Node of BST which needs to be traversed</br>\n\tReturns : List of elements after levelorder traversal\n\n```python\nval=bst.LevelOrder(root)\nprint(val)\n```\n\n10. Width(Argument)\n\n\tArgument: Root Node of BST</br>\n\tReturns : Maximum width (int) of the a BST tree\n\n```python\nval=bst.Width(root)\nprint(val)\n```\n\n11. Height(Argument)\n\n\tArgument: Root Node of BST</br>\n\tReturns : Maximum height (int) of the a BST tree\n\n```python\nval=bst.Height(root)\nprint(val)\n```\n\n12. Size(Argument)\n\n\tArgument: Root Node of BST</br>\n\tReturns : Maximum width (int) of the a BST tree\n\n```python\nval=bst.Size(root)\nprint(val)\n```\n\n13. MaxOfBST(Argument)\n\n\tArgument: Root Node of BST</br>\n\tReturns : Maximum element present in a BST\n\n```python\nval=bst.MaxOfBST(root)\nprint(val)\n```\n\n14. MinOfBST(Argument)\n\n\tArgument: Root Node of BST</br>\n\tReturns : Maximum element present in a BST\n\n```python\nval=bst.MinOfBST(root)\nprint(val)\n```\n\n15. Find(Argument1,Argument2)\n\n\tArgument1: Root Node of BST</br>\n\tArgument2: Element to be searched</br>\n\tReturn : If Found:</br>\n\t\t\treturns Address of Node which contains that element</br>\n\t\t else:</br>\n\t\t\treturns -1</br>\n\n```python\nval=bst.Find(root,4)\nprint(val)\n```\n\n16. isEmpty(Argument)\n\n\tArgument: Root Node of BST</br>\n\tReturns : If Empty:</br>\n\t\t\treturns True</br>\n\t\telse:</br>\n\t\t\treturns False</br>\n\n```python\nval=bst.isEmpty(root)\nprint(val)\n```\n\n17. InorderPredecessor(Argument)\n\n\tArgument: Any Node of BST</br>\n\tReturns : Address of its inorder predecessor\n\n```python\nval=bst.InorderPredecessor(root)\nprint(val.data)\n```\n\n18. InorderSuccessor(Argument)\n\n\tArgument: Any Node of BST</br>\n\tReturns : Address of its inorder successor\n\n```python\nval=bst.InorderSuccessor(root)\nprint(val.data)\n```\n\n19. Delete(Argument1,Argument2)\n\n\tArgument1: Root Node of BST\n\tArgument2: Any key element of BST to be deleted</br>\n\tReturns  : Address of root after deleting the specified node\n\n```python\nt=bst.Delete(root,4)\n```\n\n### License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sagar-ML-Developer/Binary_Search_Trees",
    "keywords": "Binary_Search_Trees bst BST binarysearchtree binarytree BinarySearchTrees",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Binary-Search-Trees",
    "package_url": "https://pypi.org/project/Binary-Search-Trees/",
    "platform": "",
    "project_url": "https://pypi.org/project/Binary-Search-Trees/",
    "project_urls": {
      "Homepage": "https://github.com/sagar-ML-Developer/Binary_Search_Trees"
    },
    "release_url": "https://pypi.org/project/Binary-Search-Trees/1.0.2/",
    "requires_dist": [
      "multipledispatch"
    ],
    "requires_python": ">=3.6",
    "summary": "Contains Methods for operations in Binary Search Tree",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8282573,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca547126f96997624a22ef9f5c4f2abc916a4b2866ae99befe17d17723e0bf92",
          "md5": "77b1b5d506989fbdd11f10cf8e5676d7",
          "sha256": "997df5249aa56e21a533aad02cab54c2d4ed505f01cf72aedc8051d942dc425b"
        },
        "downloads": -1,
        "filename": "Binary_Search_Trees-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77b1b5d506989fbdd11f10cf8e5676d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5087,
        "upload_time": "2020-09-26T22:24:39",
        "upload_time_iso_8601": "2020-09-26T22:24:39.011912Z",
        "url": "https://files.pythonhosted.org/packages/ca/54/7126f96997624a22ef9f5c4f2abc916a4b2866ae99befe17d17723e0bf92/Binary_Search_Trees-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c68b1fbcc8f873ae16631d0e006866296ce7b4fba005ba85c3fe8bec3f10c96b",
          "md5": "12196fae633294cf842f5d5d2855b3ba",
          "sha256": "8ac23729a596a31e5b597d3e87887abf2f8cc035274092c0e840f5f5143a6db4"
        },
        "downloads": -1,
        "filename": "Binary_Search_Trees-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12196fae633294cf842f5d5d2855b3ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5086,
        "upload_time": "2020-09-26T22:33:33",
        "upload_time_iso_8601": "2020-09-26T22:33:33.602019Z",
        "url": "https://files.pythonhosted.org/packages/c6/8b/1fbcc8f873ae16631d0e006866296ce7b4fba005ba85c3fe8bec3f10c96b/Binary_Search_Trees-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c68b1fbcc8f873ae16631d0e006866296ce7b4fba005ba85c3fe8bec3f10c96b",
        "md5": "12196fae633294cf842f5d5d2855b3ba",
        "sha256": "8ac23729a596a31e5b597d3e87887abf2f8cc035274092c0e840f5f5143a6db4"
      },
      "downloads": -1,
      "filename": "Binary_Search_Trees-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "12196fae633294cf842f5d5d2855b3ba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5086,
      "upload_time": "2020-09-26T22:33:33",
      "upload_time_iso_8601": "2020-09-26T22:33:33.602019Z",
      "url": "https://files.pythonhosted.org/packages/c6/8b/1fbcc8f873ae16631d0e006866296ce7b4fba005ba85c3fe8bec3f10c96b/Binary_Search_Trees-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}