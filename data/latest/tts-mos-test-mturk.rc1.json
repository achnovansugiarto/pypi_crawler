{
  "info": {
    "author": "",
    "author_email": "Stefan Taubert <pypi@stefantaubert.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# tts-mos-test-mturk\n\n[![PyPI](https://img.shields.io/pypi/v/tts-mos-test-mturk.svg)](https://pypi.python.org/pypi/tts-mos-test-mturk)\n[![PyPI](https://img.shields.io/pypi/pyversions/tts-mos-test-mturk.svg)](https://pypi.python.org/pypi/tts-mos-test-mturk)\n[![MIT](https://img.shields.io/github/license/stefantaubert/tts-mos-test-mturk.svg)](https://github.com/stefantaubert/tts-mos-test-mturk/blob/master/LICENSE)\n[![PyPI](https://img.shields.io/pypi/wheel/tts-mos-test-mturk.svg)](https://pypi.python.org/pypi/tts-mos-test-mturk/#files)\n![PyPI](https://img.shields.io/pypi/implementation/tts-mos-test-mturk.svg)\n[![PyPI](https://img.shields.io/github/commits-since/stefantaubert/tts-mos-test-mturk/latest/master.svg)](https://github.com/stefantaubert/tts-mos-test-mturk/compare/v0.0.1...master)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7669641.svg)](https://doi.org/10.5281/zenodo.7669641)\n\nCommand-line interface (CLI) and Python library to evaluate text-to-speech (TTS) mean opinion score (MOS) studies done on Amazon Mechanical Turk (MTurk).\nThe calculation of the confidence intervals is done in the same manner as described in (Ribeiro et al., 2011).\n\n## Features\n\nThe tool is split into two command line interfaces named `mturk-template-cli` and `mos-cli` to be able to evaluate studies performed with a template other than the one proposed.\n\n- `mturk-template-cli`: CLI to prepare MOS evaluation with results from MTurk.\n  - `prepare-evaluation`: create evaluation .json-file\n  - `gen-example-input`: generate example input data\n- `mos-cli`: CLI to evaluate text-to-speech MOS studies done on MTurk.\n  - `init`: initialize project from .json-file\n  - `masks`\n    - `mask-workers-by-assignments-count`: mask workers by their count of assignments\n    - `mask-workers-by-masked-ratings-count`: mask workers by their count of masked ratings\n    - `mask-workers-by-correlation`: mask workers by their algorithm/sentence correlation\n    - `mask-workers-by-correlation-percent`: mask workers by their algorithm/sentence correlation (percentage-wise)\n    - `mask-assignments-by-device`: mask assignments by their listening device\n    - `mask-assignments-by-worktime`: mask assignments by their worktime\n    - `mask-rating-outliers`: mask outlying ratings\n  - `stats`\n    - `print-mos`: print MOS and CI95\n    - `print-masking-stats`: print masking statistics\n    - `print-worker-stats`: print worker statistics for each algorithm\n    - `print-assignment-stats`: print assignment statistics for each worker\n    - `print-sentence-stats`: print sentence statistics for each algorithm\n    - `print-data`: print all data points\n  - `mturk`\n    - `prepare-approval`: generate approval CSV-file\n    - `approve`: approve assignments from CSV-file\n    - `prepare-rejection`: generate rejection CSV-file\n    - `reject`: reject assignments from CSV-file\n    - `prepare-bonus-payment`: generate bonus payment CSV-file\n    - `pay-bonus`: pay bonus to assignments from CSV-file\n\n## Installation\n\n```sh\npip install tts-mos-test-mturk --user\n```\n\n## Usage as CLI\n\n### mturk-template-cli\n\n```txt\nusage: mturk-template-cli [-h] [-v] {prepare-evaluation,gen-example-input} ...\n\nCLI to evaluate MOS results from MTurk and approve/reject workers.\n\npositional arguments:\n  {prepare-evaluation,gen-example-input}\n                                        description\n    prepare-evaluation                  convert input data and results to .json-file\n    gen-example-input                   generate example input data\n\noptions:\n  -h, --help                            show this help message and exit\n  -v, --version                         show program's version number and exit\n```\n\n### mos-cli\n\n```txt\nusage: mos-cli [-h] [-v] {init,masks,stats,mturk} ...\n\nCLI to evaluate MOS results from MTurk and approve/reject workers.\n\npositional arguments:\n  {init,masks,stats,mturk}\n                                        description\n    init                                initialize project\n    masks                               masks commands\n    stats                               stats commands\n    mturk                               mturk commands\n\noptions:\n  -h, --help                            show this help message and exit\n  -v, --version                         show program's version number and exit\n```\n\n## Usage as library\n\n```py\nimport numpy as np\n\nfrom tts_mos_test_mturk import compute_mos, compute_ci95\n\n_ = np.nan\n\nratings = np.array([\n    # columns represent sentences\n    # algorithm 1\n    [\n      [4, 5, _, 4],  # rater 1\n      [4, 4, 4, 5],  # rater 2\n      [_, 3, 5, 4],  # rater 3\n      [_, _, _, _],  # rater 4\n    ],\n    # algorithm 2\n    [\n      [1, 2, _, _],  # rater 1\n      [1, 1, 1, _],  # rater 2\n      [_, 2, 5, 1],  # rater 3\n      [_, 1, _, 1],  # rater 4\n    ]\n])\n\nalg1_mos = compute_mos(ratings[0])\nalg1_ci95 = compute_ci95(ratings[0])\n\nprint(f\"MOS algorithm 1: {alg1_mos:.2f} ± {alg1_ci95:.4f}\")\n# MOS algorithm 1: 4.20 ± 0.6997\n\nalg2_mos = compute_mos(ratings[1])\nalg2_ci95 = compute_ci95(ratings[1])\n\nprint(f\"MOS algorithm 2: {alg2_mos:.2f} ± {alg2_ci95:.4f}\")\n# MOS algorithm 2: 1.60 ± 1.7912\n```\n\n## Pipeline\n\nNote: The creation of the template and survey is not fully described yet. The evaluation can be done using a .json-file which interacts as a interface between the template and the evaluation (see \"Project JSON example\"); start at step 4 in this case.\n\n### 1. Create MTurk Template\n\nTo create the MTurk Template the script at [mturk-template/create-template.sh](mturk-template/create-template.sh) can be used. To prepare the audio files for the template and to create the upload CSV for MTurk the script at [mturk-template/create-upload-csv.sh](mturk-template/create-upload-csv.sh) can be used.\n\n### 2. Run survey on MTurk\n\nThe survey needs to be started at MTurk. Alternatively some example data can be generated with:\n\n```py\nmturk-template-cli gen-example-input \\\n  \"/tmp/algorithms-and-files.csv\" \\\n  \"/tmp/Batch_374625_batch_results.csv\" \\\n  \"/tmp/upload.csv\" --seed 1234\n```\n\n### 3. Prepare evaluation\n\nTo prepare the evaluation these two files are needed:\n\n- a file containing the algorithm and sentence for each url\n  - it needs to contain 3 columns `audio_url`, `algorithm` and `file`\n    - `audio_url`: the link to an audio file that was evaluated\n    - `algorithm`: the name of the algorithm for that file, e.g., `ground-truth`\n    - `file`: the name of the file on each algorithm, e.g., `1.wav`\n- the batch results file from MTurk\n  - Visit site [MTurk -> Manage](https://requester.mturk.com/manage)\n  - Then click on `Review Results` for the batch you want to evaluate\n  - Then click on `Download CSV`\n  - You get a file which is named something like `Batch_374625_batch_results.csv`\n\nThen create the .json-file for the evaluation with:\n\n```sh\nmturk-template-cli prepare-evaluation \\\n  \"/tmp/algorithms-and-files.csv\" \\\n  \"/tmp/Batch_374625_batch_results.csv\" \\\n  \"/tmp/project.json\"\n```\n\nThe .json-file contains all relevant information for the evaluation.\n\nNote: If *another template* is used then a .json-file needs to be created for the evaluation containing all required fields.\n\n### 4. Initialize project\n\nFrom the previously created .json-file a new project can be initialized with:\n\n```sh\nmos-cli init \\\n  \"/tmp/project.json\"\n  \"/tmp/project.pkl\"\n```\n\n### 5. Mask workers/assignments/ratings\n\nWorkers/assignments/ratings can be masked in order to ignore them later in the MOS calculation. For these operations the command `mos-cli masks [operation]` is used. For example: Mask assignments that were done too fast  (e.g., less than 30 seconds):\n\n```sh\nmos-cli masks mask-assignments-by-worktime \\\n  \"/tmp/project.pkl\" \\\n  30 \"too-fast\"\n```\n\nExample output:\n\n```txt\n--- Assignment Statistics ---\n0 out of all 540 assignments (0.00%) were already masked (i.e., 540 unmasked).\nMasked 34 out of the 540 unmasked assignments (6.30%), kept 506 unmasked!\nResult: 34 out of all 540 assignments (6.30%) are masked now!\n--- Ratings Statistics ---\n0 out of all 4320 ratings (0.00%) were already masked (i.e., 4320 unmasked).\nMasked 272 out of the 4320 unmasked ratings (6.30%), kept 4048 unmasked!\nResult: 272 out of all 4320 ratings (6.30%) are masked now!\nUpdated project at: \"/tmp/project.pkl\"\nLog: \"/tmp/tts-mos-test-mturk.log\"\n```\n\nThis operation masked all 34 assignments (incl. their 272 contained ratings) that were done too fast.\n\nThen, to mask from the remaining assignments the ones done without a headphone (i.e., laptop or desktop), the following command can be used:\n\n```sh\nmos-cli masks mask-assignments-by-device \\\n  \"/tmp/project.pkl\" \\\n  \"laptop\" \"desktop\" \\\n  \"too-fast > no-headphone\" \\\n  --masks \"too-fast\"\n```\n\nExample output:\n\n```log\n--- Assignment Statistics ---\n34 out of all 540 assignments (6.30%) were already masked (i.e., 506 unmasked).\nMasked 54 out of the 506 unmasked assignments (10.67%), kept 452 unmasked!\nResult: 88 out of all 540 assignments (16.30%) are masked now!\n--- Ratings Statistics ---\n272 out of all 4320 ratings (6.30%) were already masked (i.e., 4048 unmasked).\nMasked 432 out of the 4048 unmasked ratings (10.67%), kept 3616 unmasked!\nResult: 704 out of all 4320 ratings (16.30%) are masked now!\nUpdated project at: \"/tmp/project.pkl\"\nLog: \"/tmp/tts-mos-test-mturk.log\"\n```\n\nThis operation masked 54 further assignments (incl. their 432 ratings) that were done without a headphone. All assignments that were done too fast were already masked.\n\n### 6. Calculate MOS and CI95\n\nTo calculate the MOS for all ratings while ignoring ratings that were done without a headphone or were taken too fast, the masks `too-fast` and `too-fast > no-headphone` need to be applied:\n\n```sh\nmos-cli stats print-mos \\\n  \"/tmp/project.pkl\" \\\n  --masks \\\n    \"too-fast\" \\\n    \"too-fast > no-headphone\"\n```\n\nExample output:\n\n```log\nCount of ratings (unmasked/all): 3616/4320 -> on average 904/1080 per algorithm\n\n  Algorithm       MOS      CI95\n0      alg0  3.155134  0.178079\n1      alg1  2.985620  0.161751\n2      alg2  2.868565  0.175135\n3      alg3  2.890365  0.183059\nLog: \"/tmp/tts-mos-test-mturk.log\"\n```\n\n### 7. Approve/reject assignments\n\nTo approve all assignments that weren't done too fast, a CSV can be generated using:\n\n```sh\nmos-cli mturk prepare-approval \\\n  \"/tmp/project.pkl\" \\\n  \"/tmp/approve.csv\" \\\n  --costs 0.10 \\\n  --reason \"good work\" \\\n  --masks \"too-fast\"\n```\n\nExample output:\n\n```log\nCount of assignments that will be approved: 506\nEstimated costs (506 assignments x 0.10$): 50.60$\nWritten output to: \"/tmp/approve.csv\"\nLog: \"/tmp/tts-mos-test-mturk.log\"\n```\n\nTo finally approve the assignments:\n\n```sh\nmos-cli mturk approve \\\n  \"AWS_ACCESS_KEY_ID\" \\\n  \"AWS_SECRET_ACCESS_KEY\" \\\n  \"/tmp/approve.csv\"\n```\n\nTo reject all assignments that were done too fast, a CSV can be generated using:\n\n```sh\nmos-cli mturk prepare-rejection \\\n  \"/tmp/project.pkl\" \\\n  \"assignment was done too fast\" \\\n  \"/tmp/reject.csv\" \\\n  --masks \"too-fast\"\n```\n\nExample output:\n\n```log\nCount of assignments that will be rejected: 34\nWritten output to: \"/tmp/reject.csv\"\nLog: \"/tmp/tts-mos-test-mturk.log\"\n```\n\nTo finally reject the assignments:\n\n```sh\nmos-cli mturk reject \\\n  \"AWS_ACCESS_KEY_ID\" \\\n  \"AWS_SECRET_ACCESS_KEY\" \\\n  \"/tmp/reject.csv\"\n```\n\n## Project JSON example\n\n```json\n{\n  \"files\": [\n    \"file1\",\n    \"file2\"\n  ],\n  \"algorithms\": [\n    \"alg1\",\n    \"alg2\"\n  ],\n  \"workers\": {\n    \"Worker1\": {\n      \"Assignment1\": {\n        \"device\": \"in-ear\",\n        \"state\": \"Approved\",\n        \"worktime\": 30,\n        \"ratings\": [\n          {\n            \"rating\": 5,\n            \"algorithm\": \"alg1\",\n            \"file\": \"file1\"\n          },\n          {\n            \"rating\": 3,\n            \"algorithm\": \"alg2\",\n            \"file\": \"file1\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n## Roadmap\n\n- add `masks mask-workers-by-id`\n- add `masks mask-assignments-by-id`\n- add `masks mask-assignments-by-status`\n- add `masks mask-assignments-by-date`\n- add `masks mask-assignments-not-of-last-month/week/day`\n- add `masks reverse-mask`\n\n## Dependencies\n\n- `pandas`\n- `tqdm`\n- `boto3`\n- `boto3-stubs`\n- `ordered-set>=4.1.0`\n- `scipy`\n\n## Contributing\n\nIf you notice an error, please don't hesitate to open an issue.\n\n### Development setup\n\n```sh\n# update\nsudo apt update\n# install Python 3.8, 3.9, 3.10 & 3.11 for ensuring that tests can be run\nsudo apt install python3-pip \\\n  python3.8 python3.8-dev python3.8-distutils python3.8-venv \\\n  python3.9 python3.9-dev python3.9-distutils python3.9-venv \\\n  python3.10 python3.10-dev python3.10-distutils python3.10-venv \\\n  python3.11 python3.11-dev python3.11-distutils python3.11-venv\n# install pipenv for creation of virtual environments\npython3.8 -m pip install pipenv --user\n\n# check out repo\ngit clone https://github.com/stefantaubert/tts-mos-test-mturk.git\ncd tts-mos-test-mturk\n# create virtual environment\npython3.8 -m pipenv install --dev\n```\n\n## Running the tests\n\n```sh\n# first install the tool like in \"Development setup\"\n# then, navigate into the directory of the repo (if not already done)\ncd tts-mos-test-mturk\n# activate environment\npython3.8 -m pipenv shell\n# run tests\ntox\n```\n\nFinal lines of test result output:\n\n```log\n  py38: commands succeeded\n  py39: commands succeeded\n  py310: commands succeeded\n  py311: commands succeeded\n  congratulations :)\n```\n\n## License\n\nMIT License\n\n## Acknowledgments\n\nCalculation and template are based on:\n\n- Ribeiro, F., Florêncio, D., Zhang, C., & Seltzer, M. (2011). CrowdMOS: An approach for crowdsourcing mean opinion score studies. 2011 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 2416–2419. [https://doi.org/10.1109/ICASSP.2011.5946971](https://doi.org/10.1109/ICASSP.2011.5946971)\n\nFunded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) – Project-ID 416228727 – CRC 1410\n\n## Citation\n\nIf you want to cite this repo, you can use this BibTeX-entry generated by GitHub (see *About => Cite this repository*).\n\n```txt\nTaubert, S. (2023). tts-mos-test-mturk (Version 0.0.1) [Computer software]. https://doi.org/10.5281/zenodo.7669641\n```\n\n## Changelog\n\n- v0.0.1 (2023-02-23)\n  - Initial release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "TTS,Text-to-speech,Speech synthesis,Mean Opinion Score,Amazon Mechanical Turk,Language,Linguistics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "Stefan Taubert <pypi@stefantaubert.com>",
    "name": "tts-mos-test-mturk",
    "package_url": "https://pypi.org/project/tts-mos-test-mturk/",
    "platform": null,
    "project_url": "https://pypi.org/project/tts-mos-test-mturk/",
    "project_urls": {
      "Homepage": "https://github.com/stefantaubert/tts-mos-test-mturk",
      "Issues": "https://github.com/stefantaubert/tts-mos-test-mturk/issues"
    },
    "release_url": "https://pypi.org/project/tts-mos-test-mturk/0.0.1/",
    "requires_dist": [
      "pandas",
      "tqdm",
      "boto3",
      "boto3-stubs[mturk]",
      "ordered-set (>=4.1.0)",
      "scipy"
    ],
    "requires_python": "<3.12,>=3.8",
    "summary": "Command-line interface and Python library to evaluate text-to-speech mean opinion score studies done on Amazon Mechanical Turk.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16991849,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e3fc40556af0f3dc3f27d5031326040c5d23eb2c04c8cb268657719692a860",
          "md5": "37bfcd874f192824c24d24c5a2df7525",
          "sha256": "fec9d93f77f6971fda52a91335aa5bf7588a852292e389d7853179645d77a41f"
        },
        "downloads": -1,
        "filename": "tts_mos_test_mturk-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37bfcd874f192824c24d24c5a2df7525",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.12,>=3.8",
        "size": 95476,
        "upload_time": "2023-02-23T10:49:54",
        "upload_time_iso_8601": "2023-02-23T10:49:54.542707Z",
        "url": "https://files.pythonhosted.org/packages/95/e3/fc40556af0f3dc3f27d5031326040c5d23eb2c04c8cb268657719692a860/tts_mos_test_mturk-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57faf7cd9c74d92efcb5fdaceb9c25074115c3ede52b6d446298d6053fd2496f",
          "md5": "554f42ca8326eee1049e2736cfe8f018",
          "sha256": "82015fca47570217074abb312388e2f1bc860322f5bc491e72138b6d136155a5"
        },
        "downloads": -1,
        "filename": "tts-mos-test-mturk-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "554f42ca8326eee1049e2736cfe8f018",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<3.12,>=3.8",
        "size": 71292,
        "upload_time": "2023-02-23T10:49:56",
        "upload_time_iso_8601": "2023-02-23T10:49:56.357799Z",
        "url": "https://files.pythonhosted.org/packages/57/fa/f7cd9c74d92efcb5fdaceb9c25074115c3ede52b6d446298d6053fd2496f/tts-mos-test-mturk-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95e3fc40556af0f3dc3f27d5031326040c5d23eb2c04c8cb268657719692a860",
        "md5": "37bfcd874f192824c24d24c5a2df7525",
        "sha256": "fec9d93f77f6971fda52a91335aa5bf7588a852292e389d7853179645d77a41f"
      },
      "downloads": -1,
      "filename": "tts_mos_test_mturk-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37bfcd874f192824c24d24c5a2df7525",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.12,>=3.8",
      "size": 95476,
      "upload_time": "2023-02-23T10:49:54",
      "upload_time_iso_8601": "2023-02-23T10:49:54.542707Z",
      "url": "https://files.pythonhosted.org/packages/95/e3/fc40556af0f3dc3f27d5031326040c5d23eb2c04c8cb268657719692a860/tts_mos_test_mturk-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57faf7cd9c74d92efcb5fdaceb9c25074115c3ede52b6d446298d6053fd2496f",
        "md5": "554f42ca8326eee1049e2736cfe8f018",
        "sha256": "82015fca47570217074abb312388e2f1bc860322f5bc491e72138b6d136155a5"
      },
      "downloads": -1,
      "filename": "tts-mos-test-mturk-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "554f42ca8326eee1049e2736cfe8f018",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<3.12,>=3.8",
      "size": 71292,
      "upload_time": "2023-02-23T10:49:56",
      "upload_time_iso_8601": "2023-02-23T10:49:56.357799Z",
      "url": "https://files.pythonhosted.org/packages/57/fa/f7cd9c74d92efcb5fdaceb9c25074115c3ede52b6d446298d6053fd2496f/tts-mos-test-mturk-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}