{
  "info": {
    "author": "Vahid Akbari",
    "author_email": "vakbari@bcgsc.ca",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "![SNVoter](docs/images/SNVoter.png)\n=======\n\n**Improving SNV detection from low coverage nanopore sequencing data (<30x)** \n\nTable of Contents\n=================\n\n* **[Installation](https://github.com/vahidAK/NanoMethPhase/blob/master/README.md#installation)**\n  * [Using pip](https://github.com/vahidAK/SNVoter#using-pip)\n  * [From source](https://github.com/vahidAK/SNVoter#from-source)\n* **[SNVoter Modules](https://github.com/vahidAK/SNVoter#snvoter-modules)**\n  * [prediction](https://github.com/vahidAK/SNVoter#prediction)\n  * [extraction](https://github.com/vahidAK/SNVoter#extraction)\n  * [train](https://github.com/vahidAK/SNVoter#train)\n* **[Tutorial](https://github.com/vahidAK/SNVoter#tutorial)**\n  * [Variant Calling](https://github.com/vahidAK/SNVoter#variant-calling)\n  * [Improving SNV calling using SNVoter](https://github.com/vahidAK/SNVoter#improving-snv-calling-using-snvoter)\n  * [Train a New Model](https://github.com/vahidAK/SNVoter#train-a-new-model)\n* **[Example](https://github.com/vahidAK/SNVoter#example)**\n\n# Installation\n**NOTE:** Before installation dependencies in [environment.yaml](https://github.com/vahidAK/SNVoter/blob/master/envs/environment.yaml) must be installed. SNVoter uses several fixed versions of its dependencies in [environment.yaml](https://github.com/vahidAK/SNVoter/blob/master/envs/environment.yaml) file . Users are encouraged to use a conda or similar environment to isolate the packages from their default python instance. Then activate the environment and install SNVoter using pip or you can clone the git repo and use it from source.  \nYou can make the conda environment and install all dependencies by downloading the [environment.yaml](https://github.com/vahidAK/SNVoter/blob/master/envs/) file and running these lines of codes:  \n\n```\nconda env create -f environment.yaml\nconda activate snvoter\n```\nNow you can install SNVoter using pip or use it from source in the dedicated environment with all dependencies installed.  \n\n## Using pip\n\n```\npip install snvoter\n```\n\n## From source\n\n```\ngit clone https://github.com/vahidAK/SNVoter.git\ncd SNVoter\n./snvoter.py\n```\n# SNVoter Modules\n## prediction:\nTo predict dtetedte SNVs are true calls or false positives.\n```\nusage: snvoter prediction [-h] --input INPUT --bam BAM --reference REFERENCE\n                          --output OUTPUT [--model_file MODEL_FILE]\n                          [--mappingQuality MAPPINGQUALITY] [--depth DEPTH]\n                          [--window_bam WINDOW_BAM]\n                          [--threads THREADS] [--chunk_size CHUNK_SIZE]\n\nPredict based on a model.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  --input INPUT, -i INPUT\n                        The path to the input vcf or bed file. NOTE. Files\n                        must end with .bed or .vcf. vcf files are 1-based and\n                        beds are zero-based\n  --bam BAM, -b BAM     The path to the alignment bam file\n  --reference REFERENCE, -r REFERENCE\n                        The path to the reference file. File must be indexed\n                        by samtools faidx.\n  --output OUTPUT, -o OUTPUT\n                        The path to the output directory and prefix for output\n                        file.\n\noptional arguments:\n  --model_file MODEL_FILE, -mf MODEL_FILE\n                        Path to the trained model. Default is\n                        NA12878_20FC_model.h5\n  --mappingQuality MAPPINGQUALITY, -mq MAPPINGQUALITY\n                        Cutt off for filtering out low quality mapped reads\n                        from bam. Default is 0\n  --depth DEPTH, -d DEPTH\n                        Cutt off for filtering out regions with low depth to\n                        have frequencies. Default >= 1\n  --window_bam WINDOW_BAM, -w WINDOW_BAM\n                        if you want to only do for a region or chromosom You\n                        must insert region like this chr1 or chr1:1000-100000.\n  --threads THREADS, -t THREADS\n                        Number of threads. Default is 4.\n  --chunk_size CHUNK_SIZE, -cs CHUNK_SIZE\n                        Chunk size. Default is 100.\n```\n## extraction:\nExtract features to train a new model.\n```\nusage: snvoter extraction [-h] --input INPUT --status STATUS --bam BAM\n                          --reference REFERENCE\n                          [--mappingQuality MAPPINGQUALITY] [--depth DEPTH]\n                          [--window_bam WINDOW_BAM]\n                          [--threads THREADS] [--chunk_size CHUNK_SIZE]\n\nExtract mutation frequencicies in 5-mer window.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  --input INPUT, -i INPUT\n                        The path to the input vcf file.\n  --status MOD_STATUS, -s STATUS\n                        0 or 1. If you are extracting frequencies to train a\n                        model, give the status for your vcf file\n                        either it is true calls (1) or false calls (0).\n  --bam BAM, -b BAM     The path to the alignment bam file\n  --reference REFERENCE, -r REFERENCE\n                        The path to the reference file. File must be indexed\n                        by samtools faidx\n\noptional arguments:\n  --mappingQuality MAPPINGQUALITY, -mq MAPPINGQUALITY\n                        Cutt off for filtering out low quality mapped reads\n                        from bam. Default is 0\n  --depth DEPTH, -d DEPTH\n                        Cutt off for filtering out regions with low depth to\n                        have frequencies. Default >=1\n  --window_bam WINDOW_BAM, -w WINDOW_BAM\n                        if you want to only do for a region or chromosom, you\n                        must insert region like this chr1 or chr1:1000-100000.\n  --threads THREADS, -t THREADS\n                        Number of threads\n  --chunk_size CHUNK_SIZE, -cs CHUNK_SIZE\n                        Number of sites send to each processes for parrallel\n                        processing. Default is 50.\n```\n## train:\nTo train a new model using extracted features.\n```\nusage: snvoter train [-h] --train TRAIN --test TEST --out_dir OUT_DIR\n                     [--epochs EPOCHS] [--batch_size BATCH_SIZE] [--plot]\n\ntrain a new model\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  --train TRAIN, -tr TRAIN\n                        The path to the shuffled and ready file for training\n  --test TEST, -te TEST\n                        The path to the shuffled and ready file for testing.\n  --out_dir OUT_DIR, -o OUT_DIR\n                        Output directory and prefix for saving the model and\n                        figures\n\noptional arguments:\n  --epochs EPOCHS, -e EPOCHS\n                        Number of epochs. Default is 100\n  --batch_size BATCH_SIZE, -batch BATCH_SIZE\n                        batch size for model training. Default is 400.\n  --plot, -plt          Select this option if you wish to output training\n                        plots.\n```\n# Tutorial\n\n## Variant Calling:\n\nYou first need to call variants using [Clair](https://github.com/HKU-BAL/Clair)\n\nYou can call variants for each chromosome using the following command and the\nconcatenate all files:\n\n```\nfor i in chr{1..22} chrX chrY; do callVarBam --chkpnt_fn <path to model file> --ref_fn <reference_genome.fa> --bam_fn <sorted_indexed.bam> --ctgName $i --sampleName <your sample name> --call_fn $i\".vcf\" --threshold 0.2 --samtools <path to executable samtools software> --pypy <path to executable pypy > --threads <number of threads>\n```\n\nFor the full tutorial please refer to [Clair](https://github.com/HKU-BAL/Clair)\npage on GitHub.\n\n## Improving SNV calling using SNVoter:\n\n```\nsnvoter prediction -i <SNVs_Clair.vcf> -b <sorted_indexed.bam> -r <reference_genome.fa> -t number_of_threads -o output_prefix\n```\n\nIt will produce two files.\n\n1- Prediction file that includes each prediction for each 5-mer. The first 10\ncolumns are from vcf file and the last seven columns indicate:\n   - **chrom**:            the chromosome name\n   - **pos_start**:        0-based position of the 5-mer start\n   - **pos_end**:          0-based position of the 5-mer end\n   - **pos**:              0-based position of the SNV\n   - **5-mer sequence**:   sequence of five-mer\n   - **Coverage**:         this might be different from Clair's coverage as\n                           SNVoter uses different mapping quality threshold\n   - **Prediction**\n\n2- The second file is the ready vcf file with weighted qualities. You can plot\nthe distribution of weighted quality to obtain optimal threshold for filtering.\nThe plot usually looks like the following plots:  \n\n![Quality distribution of 10x coverage data](docs/images/QualDist10x.png)  \n\n![Quality distribution of 18x coverage data](docs/images/QualDist18x.png)  \n\n![Quality distribution of 22x coverage data](docs/images/QualDist22x.png)  \n\nThe optimal threshold is the end of the first peak and start of the valley\n(highlighted regions).\n\nBy default SNVoter will use the model file trained by us using NA12878 20 flow cells and you do not need to specify path to the model if you want to use our model.  \n\n## Train a New Model:\nIn order to train a new model you need to have two vcf files. One for true SNVs and the other for false positive SNV calls. Having these data allows you to then extract the features using ```snvoter extraction``` module. Subsequently, you can train a new model on extracted features using the ```snvoter train``` module.  \n### Extracting Features:\n```\nsnvoter extraction -i True_SNVs.vcf -b alignment.bam -r reference.fa -s 1 -t 24 > Extracted_Features.csv\nsnvoter extraction -i False_SNVs.vcf -b alignment.bam -r reference.fa -s 0 -t 24 >> Extracted_Features.csv\n```\nAfter extracting the features you need to shuffle the file.  \n```\ncat Extracted_Features.csv | shuf | shuf | shuf > Shuffled_Extracted_Features.csv\n```\nSubsequently, seperate the shuffled file into training and test set as you wish. We recommend using at least 10% of suffled file as test set and the rest as training set\n### Training the Model\n```\nsnvoter train -tr training_set.csv -te test_set.csv -o ./Trained_model --plot\n```\nTraining will produce a .h5 file and a .h5.pkl file. If --plot option selected it will also output accuracy, precision, recall, loss, and ROC plots.\nIn order to use this model via the ```snvoter prediction``` module, the .h5 and .h5.pkl files must be in the same directory and just give the path to the .h5 file using the ```--model_file``` flag.  \n\n# Example\nWe have included an example data in the Example_data folder which you can use for a quick prediction.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "snvoter",
    "package_url": "https://pypi.org/project/snvoter/",
    "platform": "",
    "project_url": "https://pypi.org/project/snvoter/",
    "project_urls": {
      "GitHub": "https://github.com/vahidAK/SNVoter"
    },
    "release_url": "https://pypi.org/project/snvoter/1.0/",
    "requires_dist": [
      "numpy (<1.19.0,>=1.16.0)",
      "pandas (>=1.0.3)",
      "pysam (>=0.15.4)",
      "tqdm (>=4.36.1)",
      "tensorflow (>=2.1.0)",
      "keras (>=2.2.4)",
      "matplotlib (>=3.3.0)",
      "multiprocess (>=0.70.10)",
      "scikit-learn (>=0.21.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "A top up tool to enhance SNV calling from Nanopore sequencing data.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15416243,
  "releases": {
    "0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65dd1fc47ccfd3788744a6791fc833af3171ed2d4f8179c2b8d7607b2c526a98",
          "md5": "2dca29b65531fb46eb29310c28d0e0f4",
          "sha256": "1e3105ffdff05b30e90888cff4c1f8131bcca4f6d17c8b208148fca9fa914ca1"
        },
        "downloads": -1,
        "filename": "snvoter-0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dca29b65531fb46eb29310c28d0e0f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 20415,
        "upload_time": "2020-08-18T22:19:52",
        "upload_time_iso_8601": "2020-08-18T22:19:52.538780Z",
        "url": "https://files.pythonhosted.org/packages/65/dd/1fc47ccfd3788744a6791fc833af3171ed2d4f8179c2b8d7607b2c526a98/snvoter-0.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Tensorflow dependency unmet in python3.9"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38c4434e63cacdd07e55c3771bfd462b2eb8bf3cdb43f5b7d60c7c80f78eb5a",
          "md5": "4bd0ee23ecf6d7c02f7d065431d01e85",
          "sha256": "893648322a23cb03bfea1d288a562d4e59aa5ef1eb1cca81339d2fc3b7406e63"
        },
        "downloads": -1,
        "filename": "snvoter-0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4bd0ee23ecf6d7c02f7d065431d01e85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20198,
        "upload_time": "2020-08-18T22:19:55",
        "upload_time_iso_8601": "2020-08-18T22:19:55.434334Z",
        "url": "https://files.pythonhosted.org/packages/a3/8c/4434e63cacdd07e55c3771bfd462b2eb8bf3cdb43f5b7d60c7c80f78eb5a/snvoter-0.0.tar.gz",
        "yanked": true,
        "yanked_reason": "Tensorflow dependency unmet in python3.9"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49661bccb2fe4e1b821c7205f03f7ccc71329f637acfc34d6e3ac9b31e0fbfbc",
          "md5": "8d8a6d3f746aefee726d4d717301c332",
          "sha256": "3af5d6d822203a2e722b7b07aaccfc31d004c36e0c43338609282ee7b3ec0d14"
        },
        "downloads": -1,
        "filename": "snvoter-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d8a6d3f746aefee726d4d717301c332",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2045637,
        "upload_time": "2020-08-19T06:58:20",
        "upload_time_iso_8601": "2020-08-19T06:58:20.603657Z",
        "url": "https://files.pythonhosted.org/packages/49/66/1bccb2fe4e1b821c7205f03f7ccc71329f637acfc34d6e3ac9b31e0fbfbc/snvoter-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0fd7fa32301672a6403819b9cb702078a3e1577ee970b68fd7bb42f37cf80d7",
          "md5": "2f25ecaafe211d9b8a4359aa1ce1c62a",
          "sha256": "83726850aeb65372b83c4f7e6c48278021d63cd4c8002deddc3cba55d2739a11"
        },
        "downloads": -1,
        "filename": "snvoter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2f25ecaafe211d9b8a4359aa1ce1c62a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2046435,
        "upload_time": "2020-08-19T06:58:23",
        "upload_time_iso_8601": "2020-08-19T06:58:23.154777Z",
        "url": "https://files.pythonhosted.org/packages/c0/fd/7fa32301672a6403819b9cb702078a3e1577ee970b68fd7bb42f37cf80d7/snvoter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b57f18795335784351d166b911ea28153b64b0fe9470d29828e1b0c6f4fccccb",
          "md5": "0de19f666b08982fb0b8a7e523f670b3",
          "sha256": "183dc67afce1976ea45ceb35d9fd0f518ef2fe9a306994e5d1f10345ba4cc399"
        },
        "downloads": -1,
        "filename": "snvoter-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0de19f666b08982fb0b8a7e523f670b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2045534,
        "upload_time": "2020-08-19T07:55:29",
        "upload_time_iso_8601": "2020-08-19T07:55:29.830779Z",
        "url": "https://files.pythonhosted.org/packages/b5/7f/18795335784351d166b911ea28153b64b0fe9470d29828e1b0c6f4fccccb/snvoter-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bebdaba84179936ea7af6437187ca2cbc2c9e774bf2fe602f6dc22b153ca5e9",
          "md5": "2d4d9ebc630659bb21d53a0f5e691f11",
          "sha256": "e82489722ec986d5cd67e24402ee531f194f97373b5588581bcdfb8e66d10f96"
        },
        "downloads": -1,
        "filename": "snvoter-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d4d9ebc630659bb21d53a0f5e691f11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2046004,
        "upload_time": "2020-08-19T07:55:32",
        "upload_time_iso_8601": "2020-08-19T07:55:32.152489Z",
        "url": "https://files.pythonhosted.org/packages/1b/eb/daba84179936ea7af6437187ca2cbc2c9e774bf2fe602f6dc22b153ca5e9/snvoter-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be8361b2a3ca6eddc012bc361624a10c0b7416db726d7f9d0eda42e2bbd59e60",
          "md5": "38afb91a5a50ac30ee5f8ec850ab8af6",
          "sha256": "ba0e63840c3ec83a7701eea24280bf09c23f08b01b9bea8d376dcd1b58edd51a"
        },
        "downloads": -1,
        "filename": "snvoter-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38afb91a5a50ac30ee5f8ec850ab8af6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 2047171,
        "upload_time": "2021-01-26T21:35:39",
        "upload_time_iso_8601": "2021-01-26T21:35:39.454422Z",
        "url": "https://files.pythonhosted.org/packages/be/83/61b2a3ca6eddc012bc361624a10c0b7416db726d7f9d0eda42e2bbd59e60/snvoter-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "959401bb0ce05cb78838e2a47f5deadec08bf357e90d94b52db6a19cc0767b3c",
          "md5": "b6b3de0aabd629cc84afe4cb58aafe9e",
          "sha256": "5ec349c6d5136090601d5ff9bf2d939ab8b8265163418eced2c9f32fd4596bb3"
        },
        "downloads": -1,
        "filename": "snvoter-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6b3de0aabd629cc84afe4cb58aafe9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 2050545,
        "upload_time": "2021-01-26T21:35:47",
        "upload_time_iso_8601": "2021-01-26T21:35:47.427043Z",
        "url": "https://files.pythonhosted.org/packages/95/94/01bb0ce05cb78838e2a47f5deadec08bf357e90d94b52db6a19cc0767b3c/snvoter-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be8361b2a3ca6eddc012bc361624a10c0b7416db726d7f9d0eda42e2bbd59e60",
        "md5": "38afb91a5a50ac30ee5f8ec850ab8af6",
        "sha256": "ba0e63840c3ec83a7701eea24280bf09c23f08b01b9bea8d376dcd1b58edd51a"
      },
      "downloads": -1,
      "filename": "snvoter-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38afb91a5a50ac30ee5f8ec850ab8af6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 2047171,
      "upload_time": "2021-01-26T21:35:39",
      "upload_time_iso_8601": "2021-01-26T21:35:39.454422Z",
      "url": "https://files.pythonhosted.org/packages/be/83/61b2a3ca6eddc012bc361624a10c0b7416db726d7f9d0eda42e2bbd59e60/snvoter-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "959401bb0ce05cb78838e2a47f5deadec08bf357e90d94b52db6a19cc0767b3c",
        "md5": "b6b3de0aabd629cc84afe4cb58aafe9e",
        "sha256": "5ec349c6d5136090601d5ff9bf2d939ab8b8265163418eced2c9f32fd4596bb3"
      },
      "downloads": -1,
      "filename": "snvoter-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b6b3de0aabd629cc84afe4cb58aafe9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2050545,
      "upload_time": "2021-01-26T21:35:47",
      "upload_time_iso_8601": "2021-01-26T21:35:47.427043Z",
      "url": "https://files.pythonhosted.org/packages/95/94/01bb0ce05cb78838e2a47f5deadec08bf357e90d94b52db6a19cc0767b3c/snvoter-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}