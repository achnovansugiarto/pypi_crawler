{
  "info": {
    "author": "Vladimir Kryazh",
    "author_email": "vladimir@tagias.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# tagias-python\n\nPublic python module for tagias.com external API\n\n## Installation\n\n`pip install tagias`\n\nor\n\n`python -m pip install tagias`\n\n## Documentation\nYou can find the detailed documentation for our external REST API at the [API Reference](https://tagias.com/docs) page\n\n## Source code\nYou can find the source code on its GitHub page https://github.com/tagias/tagias-python.git\n\n## Usage\n\nThis helper module was designed to simplify the way you are using the tagias.com external API\n\nYou can use the **TagiasHelper** class to get responses as JSON objects.\n\n```python\n# import the tagias api helper classes\nfrom tagias.tagias import TagiasHelper, TagiasError, TagiasTypes, TagiasStatuses\n\n# Replace the test API key with your own private API key\napiKey = 'test'\n\n# Testing the TAGIAS external API methods using TagiasHelper class\ntry:\n    print('Test Start')\n\n    # create tagias helper object\n    helper = TagiasHelper(apiKey)\n\n    # create a new package\n    newPackage = helper.create_package('Test package', TagiasTypes.Keypoints,\n      'Put one point only in the center of the image', None, None,\n      'https://p.tagias.com/samples/', ['dog.8001.jpg', 'dog.8002.jpg', 'dog.8003.jpg'])\n    \n    print('Package {} was created with {} image(s)'.format(newPackage['id'], newPackage['pictures_num']))\n\n    try:\n        # modify the package's status\n        helper.set_package_status(newPackage['id'], TagiasStatuses.STOPPED)\n    except TagiasError as e:\n        # handle a TagiasError exception\n        print('{} package\\'s status was NOT modified: {}'.format(newPackage['id'], e.message))\n\n    # get the package's properties\n    package = helper.get_package(newPackage['id'])\n    print('New package properties:')\n    for prop in package:\n        print (' * {}: {}'.format(prop, package[prop]))\n\n    # get the list of all your packages\n    packages = helper.get_packages()\n    print('Packages:')\n    for package in packages:\n        print(' * {} {} {} {}'.format(package['id'], package['name'], package['status'], package['created']))\n        if package['status']==TagiasStatuses.FINISHED:\n            # get the package's result if it's already finished\n            result = helper.get_result(package['id'])\n            print(result)\n\n            try:\n                # request the package's result to be send to the callback endpoint\n                helper.request_result(package['id'])\n            except TagiasError as e:\n                # handle a TagiasError exception\n                print('{} package\\'s result was NOT requested: {}'.format(package['id'], e.message))\n\n    # get current balance and financial operations\n    balance = helper.get_balance()\n    print('Current balance: {} USD'.format(balance['balance']))\n    print('Operations:')\n    for op in balance['operations']:\n        print(' * {}: {} USD, {}'.format(op['date'], op['amount'], op['note']))\n\n    print('Test End')\nexcept TagiasError as e:\n    # handle a TagiasError exception\n    print('TagiasError: {} ({})'.format(e.message, e.code))\n```\n\nOr you can use the **TagiasHelper2** class to get responses as class instances with all needed attributes.\n\nThe **TagiasPackage, TagiasNewPackage, TagiasFullPackage, TagiasResult, TagiasBalance, TagiasOperation** classes are defined to hold the response information converted to objects with attributes.\n\nThe **TagiasResult** class contains the *pictures* list of **TagiasPictureResult** class instances. \n\nAnd the **TagiasPictureResult** class contains either the *datalist* attribute (a list of **TagiasBoundingBox**, **TagiasLine**, **TagiasPoligon**, **TagiasKeypoint** classes instances) or the *data* attribute (an instance of **TagiasClassificationSingle** or **TagiasClassificationMultiple** class).\n\nThere is also the *result* attribute of the **TagiasPictureResult** class that contains JSON object with annotation results.\n\n```python\n# import the tagias api helper classes using TagiasHelper2 class\nfrom tagias.tagias import TagiasHelper2, TagiasError, TagiasTypes, TagiasStatuses\n\n# Replace the test API key with your own private API key\napiKey = 'test'\n\n# Testing the TAGIAS external API methods\ntry:\n    print('Test2 Start')\n\n    # create tagias helper object\n    helper = TagiasHelper2(apiKey)\n\n    # create a new package\n    newPackage = helper.create_package('Test package', TagiasTypes.Keypoints,\n        'Put one point only in the center of the image', None, None,\n        'https://p.tagias.com/samples/', ['dog.8001.jpg', 'dog.8002.jpg', 'dog.8003.jpg'])\n\n    print('Package {} was created with {} image(s)'.format(newPackage.id, newPackage.pictures_num))\n\n    try:\n        # modify the package's status\n        helper.set_package_status(newPackage.id, TagiasStatuses.STOPPED)\n    except TagiasError as e:\n        # handle a TagiasError exception\n        print('{} package\\'s status was NOT modified: {}'.format(newPackage.id, e.message))\n\n    # get the package's properties\n    package = helper.get_package(newPackage.id)\n    print('New package properties:')\n    for prop in dir(package):\n        if not prop.startswith('_'):\n            print(' * {}: {}'.format(prop, getattr(package, prop)))\n\n    # get the list of all your packages\n    packages = helper.get_packages()\n    print('Packages:')\n    for package in packages:\n        print(' * {} {} {} {}'.format(package.id, package.name, package.status, package.created))\n        if package.status == TagiasStatuses.FINISHED:\n            # get the package's result if it's already finished\n            result = helper.get_result(package.id)\n            print(result)\n\n            try:\n                # request the package's result to be send to the callback endpoint\n                helper.request_result(package.id)\n            except TagiasError as e:\n                # handle a TagiasError exception\n                print('{} package\\'s result was NOT requested: {}'.format(package.id, e.message))\n\n    # get current balance and financial operations\n    balance = helper.get_balance()\n    print('Current balance: {} USD'.format(balance.balance))\n    print('Operations:')\n    for op in balance.operations:\n        print(' * {}: {} USD, {}'.format(op.date, op.amount, op.note))\n\n    print('Test2 End')\nexcept TagiasError as e:\n    # handle a TagiasError exception\n    print('TagiasError: {} ({})'.format(e.message, e.code))\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tagias/tagias-python",
    "keywords": "tagias annotation tag label",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tagias",
    "package_url": "https://pypi.org/project/tagias/",
    "platform": "",
    "project_url": "https://pypi.org/project/tagias/",
    "project_urls": {
      "Homepage": "https://github.com/tagias/tagias-python"
    },
    "release_url": "https://pypi.org/project/tagias/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Public python module for tagias.com external API",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8198282,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a1b8670d65464ebb8b9a1e5d375529b38c5846c7b914fe790316565487af5ba",
          "md5": "f9d1cc4bea675420353b106040aa6852",
          "sha256": "0dcba389e61c492f1e318658bbedb9796297dad5188bbde516bd1a9af3ab0b1b"
        },
        "downloads": -1,
        "filename": "tagias-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f9d1cc4bea675420353b106040aa6852",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 4391,
        "upload_time": "2020-08-20T07:07:07",
        "upload_time_iso_8601": "2020-08-20T07:07:07.841141Z",
        "url": "https://files.pythonhosted.org/packages/8a/1b/8670d65464ebb8b9a1e5d375529b38c5846c7b914fe790316565487af5ba/tagias-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de8bfd32b7034dd852c679507f7d90ee96653c06a6928de98bc9bed75d3f14d6",
          "md5": "48b866449ca72a4bdc483ba4dceb2711",
          "sha256": "354c88108cfdf9dc624f9bd4f3472f1fdc4e4bfd1519cf020b0bee36b158d63a"
        },
        "downloads": -1,
        "filename": "tagias-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "48b866449ca72a4bdc483ba4dceb2711",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 7753,
        "upload_time": "2020-08-27T10:25:52",
        "upload_time_iso_8601": "2020-08-27T10:25:52.790787Z",
        "url": "https://files.pythonhosted.org/packages/de/8b/fd32b7034dd852c679507f7d90ee96653c06a6928de98bc9bed75d3f14d6/tagias-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4db5c561125de8c38939b6ea593c46ef1aa1b8c090bf0e8c7752ed78f4498f5",
          "md5": "bce780f6d3a3cf62aecd698c98dbb76d",
          "sha256": "a003a70e3aa173beb0fc5b587a9dc67cca9dd6935cc4655c15647e3a873cdf6e"
        },
        "downloads": -1,
        "filename": "tagias-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bce780f6d3a3cf62aecd698c98dbb76d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 7820,
        "upload_time": "2020-09-16T09:05:44",
        "upload_time_iso_8601": "2020-09-16T09:05:44.118839Z",
        "url": "https://files.pythonhosted.org/packages/d4/db/5c561125de8c38939b6ea593c46ef1aa1b8c090bf0e8c7752ed78f4498f5/tagias-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4db5c561125de8c38939b6ea593c46ef1aa1b8c090bf0e8c7752ed78f4498f5",
        "md5": "bce780f6d3a3cf62aecd698c98dbb76d",
        "sha256": "a003a70e3aa173beb0fc5b587a9dc67cca9dd6935cc4655c15647e3a873cdf6e"
      },
      "downloads": -1,
      "filename": "tagias-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bce780f6d3a3cf62aecd698c98dbb76d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 7820,
      "upload_time": "2020-09-16T09:05:44",
      "upload_time_iso_8601": "2020-09-16T09:05:44.118839Z",
      "url": "https://files.pythonhosted.org/packages/d4/db/5c561125de8c38939b6ea593c46ef1aa1b8c090bf0e8c7752ed78f4498f5/tagias-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}