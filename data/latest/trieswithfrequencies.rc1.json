{
  "info": {
    "author": "Anton Antonov",
    "author_email": "antononcube@posteo.net",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Tries with frequencies\n\nThis Python package has functions for creation and manipulation of \n[Tries (Prefix trees)](https://en.wikipedia.org/wiki/Trie) \nwith frequencies.\n\nThe package provides Machine Learning (ML) functionalities, not \"just\" a \n[Trie]((https://en.wikipedia.org/wiki/Trie)) \ndata structure.\n\nThis Python implementation closely follows the Mathematica implementation [AAp2].\n\n--------\n\n## Installation\n\n### From GitHub:\n\n```shell\npip install -e git+https://github.com/antononcube/Python-packages.git#egg=TriesWithFrequencies-antononcube\\&subdirectory=TriesWithFrequencies\n```\n\n### From PyPI:\n\n```shell\npython3 -m pip install TriesWithFrequencies\n```\n\n------------------------------------------------------------------------\n\n## Setup\n\n```python\nfrom TriesWithFrequencies import *\n```\n\n------------------------------------------------------------------------\n\n## Creation examples\n\nIn this section we show a few ways to create tries with frequencies.\n\nConsider a trie (prefix tree) created over a list of words:\n\n```python\ntr = trie_create_by_split( [\"bar\", \"bark\", \"bars\", \"balm\", \"cert\", \"cell\"] )\ntrie_form(tr)\n```\n\n\n    TRIEROOT => 6.0\n    ├─b => 4.0\n    │ └─a => 4.0\n    │   ├─r => 3.0\n    │   │ └─k => 1.0\n    │   │ └─s => 1.0\n    │   └─l => 1.0\n    │     └─m => 1.0\n    └─c => 2.0\n      └─e => 2.0\n        ├─r => 1.0\n        │ └─t => 1.0\n        └─l => 1.0\n          └─l => 1.0\n\n\nHere we convert the trie with frequencies above into a trie with\nprobabilities:\n\n\n```python\nptr = trie_node_probabilities( tr )\ntrie_form(ptr)\n```\n\n\n    TRIEROOT => 1.0\n    ├─b => 0.6666666666666666\n    │ └─a => 1.0\n    │   ├─r => 0.75\n    │   │ ├─k => 0.3333333333333333\n    │   │ └─s => 0.3333333333333333\n    │   └─l => 0.25\n    │     └─m => 1.0\n    └─c => 0.3333333333333333\n      └─e => 1.0\n        ├─r => 0.5\n        │ └─t => 1.0\n        └─l => 0.5\n          └─l => 1.0\n\n\n------------------------------------------------------------------------\n\n## Shrinking\n\nHere we shrink the trie with probabilities above:\n\n```python\ntrie_form(trie_shrink(ptr))\n```\n\n\n    TRIEROOT => 1.0\n    └─ba => 1.0\n      └─r => 0.75\n        └─k => 0.3333333333333333\n        └─s => 0.3333333333333333\n      └─lm => 1.0\n    └─ce => 1.0\n      └─rt => 1.0\n      └─ll => 1.0\n\n\nHere we shrink the frequencies trie using a separator:\n\n\n```python\ntrie_form(trie_shrink(tr, sep=\"~\"))\n```\n\n\n    TRIEROOT => 6.0\n    └─b~a => 4.0\n      └─r => 3.0\n        └─k => 1.0\n        └─s => 1.0\n      └─l~m => 1.0\n    └─c~e => 2.0\n      └─r~t => 1.0\n      └─l~l => 1.0\n\n\n------------------------------------------------------------------------\n\n## Retrieval and sub-tries\n\nHere we retrieve a sub-trie with a key:\n\n```python\ntrie_form(trie_sub_trie(tr, list(\"bar\")))\n```\n\n\n    r => 3.0\n    └─k => 1.0\n    └─s => 1.0\n\n\n------------------------------------------------------------------------\n\n## Classification\n\nCreate a trie:\n\n```python\nwords = [*([\"bar\"] * 6), *([\"bark\"] * 3), *([\"bare\"] * 2), *([\"cam\"] * 3), \"came\", *([\"camelia\"] * 4)]\ntr = trie_create_by_split(words)\ntr = trie_node_probabilities(tr)\n```\nShow node counts:\n\n```python\ntrie_node_counts(tr)\n```\n\n    {'total': 13, 'internal': 10, 'leaves': 3}\n\n\nShow the trie form:\n\n```python\ntrie_form(tr)\n```\n\n\n    TRIEROOT => 1.0\n    ├─b => 0.5789473684210527\n    │ └─a => 1.0\n    │   └─r => 1.0\n    │     ├─k => 0.2727272727272727\n    │     └─e => 0.18181818181818182\n    └─c => 0.42105263157894735\n      └─a => 1.0\n        └─m => 1.0\n          └─e => 0.625\n            └─l => 0.8\n              └─i => 1.0\n                └─a => 1.0\n\nClassify with the letters of the word \\\"cam\\\":\n\n```python\ntrie_classify(tr, list(\"cam\"), prop=\"Probabilities\")\n```\n\n    {'a': 0.5, 'm': 0.375, 'e': 0.12499999999999997}\n\n\n\n------\n\n## References\n\n### Articles\n\n[AA1] Anton Antonov,\n[\"Tries with frequencies for data mining\"](https://mathematicaforprediction.wordpress.com/2013/12/06/tries-with-frequencies-for-data-mining/),\n(2013),\n[MathematicaForPrediction at WordPress](https://mathematicaforprediction.wordpress.com).\n\n[AA2] Anton Antonov,\n[\"Removal of sub-trees in tries\"](https://mathematicaforprediction.wordpress.com/2014/10/12/removal-of-sub-trees-in-tries/),\n(2013),\n[MathematicaForPrediction at WordPress](https://mathematicaforprediction.wordpress.com).\n\n[AA3] Anton Antonov,\n[\"Tries with frequencies in Java\"](https://mathematicaforprediction.wordpress.com/2017/01/31/tries-with-frequencies-in-java/)\n(2017),\n[MathematicaForPrediction at WordPress](https://mathematicaforprediction.wordpress.com).\n[GitHub Markdown](https://github.com/antononcube/MathematicaForPrediction).\n\n[RAC1] Tib,\n[\"Day 10: My 10 commandments for Raku performances\"](https://raku-advent.blog/2020/12/10/day-10-my-10-commandments-for-raku-performances/),\n(2020),\n[Raku Advent Calendar](https://raku-advent.blog).\n\n[WK1] Wikipedia entry, [Trie](https://en.wikipedia.org/wiki/Trie).\n\n### Packages\n\n[AAp1] Anton Antonov, \n[Tries with frequencies Mathematica Version 9.0 package](https://github.com/antononcube/MathematicaForPrediction/blob/master/TriesWithFrequenciesV9.m),\n(2013), \n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n[AAp2] Anton Antonov,\n[Tries with frequencies Mathematica package](https://github.com/antononcube/MathematicaForPrediction/blob/master/TriesWithFrequencies.m),\n(2013-2018),\n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n[AAp3] Anton Antonov, \n[Tries with frequencies in Java](https://github.com/antononcube/MathematicaForPrediction/tree/master/Java/TriesWithFrequencies), \n(2017),\n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n[AAp4] Anton Antonov, \n[Java tries with frequencies Mathematica package](https://github.com/antononcube/MathematicaForPrediction/blob/master/JavaTriesWithFrequencies.m), \n(2017),\n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n[AAp5] Anton Antonov, \n[Java tries with frequencies Mathematica unit tests](https://github.com/antononcube/MathematicaForPrediction/blob/master/UnitTests/JavaTriesWithFrequencies-Unit-Tests.wlt), \n(2017), \n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n[AAp6] Anton Antonov,\n[ML::TriesWithFrequencies Raku package](https://github.com/antononcube/Raku-ML-TriesWithFrequencies),\n(2021),\n[GitHub/antononcube](https://github.com/antononcube).\n\n\n### Videos\n\n[AAv1] Anton Antonov,\n[\"Prefix Trees with Frequencies for Data Analysis and Machine Learning\"](https://www.youtube.com/watch?v=MdVp7t8xQbQ),\n(2017),\nWolfram Technology Conference 2017,\n[Wolfram channel at YouTube](https://www.youtube.com/channel/UCJekgf6k62CQHdENWf2NgAQ).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antononcube/Python-packages/tree/main/TriesWithFrequencies",
    "keywords": "trie,prefix tree,frequency,frequencies",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TriesWithFrequencies",
    "package_url": "https://pypi.org/project/TriesWithFrequencies/",
    "platform": null,
    "project_url": "https://pypi.org/project/TriesWithFrequencies/",
    "project_urls": {
      "Homepage": "https://github.com/antononcube/Python-packages/tree/main/TriesWithFrequencies"
    },
    "release_url": "https://pypi.org/project/TriesWithFrequencies/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "This package provides tries (prefix trees) with frequencies implementation based on dictionaries.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14984229,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eda8db30718ef9bf75c7378c78c38a761a73fc5faea3095d308ea9e7fd7dab4",
          "md5": "bbe3caaae5364eb044a1fdb6edefb7f7",
          "sha256": "16c2afb5eabb1cd11b0b86441bd5f2b05b9fe66d40fece74bc3085fb145dee52"
        },
        "downloads": -1,
        "filename": "TriesWithFrequencies-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbe3caaae5364eb044a1fdb6edefb7f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8664,
        "upload_time": "2022-09-03T20:27:26",
        "upload_time_iso_8601": "2022-09-03T20:27:26.039192Z",
        "url": "https://files.pythonhosted.org/packages/0e/da/8db30718ef9bf75c7378c78c38a761a73fc5faea3095d308ea9e7fd7dab4/TriesWithFrequencies-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537987af6abf1589969621ae0bb59c75b533e4cdb5258e8e38ef52be490c5252",
          "md5": "86388eb1889437c03037b87994e62f09",
          "sha256": "cbd5d02f15e4d8f5de8587fe0a545189c5a9f14a1746209b1489aa423775821e"
        },
        "downloads": -1,
        "filename": "TriesWithFrequencies-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86388eb1889437c03037b87994e62f09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10154,
        "upload_time": "2022-09-03T20:27:27",
        "upload_time_iso_8601": "2022-09-03T20:27:27.640314Z",
        "url": "https://files.pythonhosted.org/packages/53/79/87af6abf1589969621ae0bb59c75b533e4cdb5258e8e38ef52be490c5252/TriesWithFrequencies-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0eda8db30718ef9bf75c7378c78c38a761a73fc5faea3095d308ea9e7fd7dab4",
        "md5": "bbe3caaae5364eb044a1fdb6edefb7f7",
        "sha256": "16c2afb5eabb1cd11b0b86441bd5f2b05b9fe66d40fece74bc3085fb145dee52"
      },
      "downloads": -1,
      "filename": "TriesWithFrequencies-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bbe3caaae5364eb044a1fdb6edefb7f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8664,
      "upload_time": "2022-09-03T20:27:26",
      "upload_time_iso_8601": "2022-09-03T20:27:26.039192Z",
      "url": "https://files.pythonhosted.org/packages/0e/da/8db30718ef9bf75c7378c78c38a761a73fc5faea3095d308ea9e7fd7dab4/TriesWithFrequencies-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "537987af6abf1589969621ae0bb59c75b533e4cdb5258e8e38ef52be490c5252",
        "md5": "86388eb1889437c03037b87994e62f09",
        "sha256": "cbd5d02f15e4d8f5de8587fe0a545189c5a9f14a1746209b1489aa423775821e"
      },
      "downloads": -1,
      "filename": "TriesWithFrequencies-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "86388eb1889437c03037b87994e62f09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10154,
      "upload_time": "2022-09-03T20:27:27",
      "upload_time_iso_8601": "2022-09-03T20:27:27.640314Z",
      "url": "https://files.pythonhosted.org/packages/53/79/87af6abf1589969621ae0bb59c75b533e4cdb5258e8e38ef52be490c5252/TriesWithFrequencies-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}