{
  "info": {
    "author": "Abhishek Agarwal",
    "author_email": "abhishek.agarwal@npl.co.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# Incremental Structure Learning (ISL)\n\nAn open-source implementation of ISL [1], a circuit recompilation algorithm that finds an approximate representation of\nany circuit acting on the |0>|0>...|0> state. Created for the IBM Quantum Awards: Open Sciece Prize 2021. More details of ISL and its use in the Quantum Awards can be found by downloading the submission [here](https://github.com/qiskit-community/open-science-prize-2021/blob/main/qiskit-default-winning-submission.zip).\n\n[1] B Jaderberg, A Agarwal, K Leonhardt, M Kiffner, D Jaksch, 2020 Quantum Sci. Technol. 5 034015\n\n## Installing ISL\n\nThe best way of installing ISL is through `pip`:\n\n```\npip install quantum-isl\n```\n\n## Using ISL\n\n### Minimal example\nA circuit can be recompiled and the result accessed with only 3 lines if using the \ndefault settings.\n```python\nfrom isl.recompilers import ISLRecompiler\nfrom qiskit import QuantumCircuit\n\n# Setup the circuit\nqc = QuantumCircuit(3)\nqc.rx(1.23,0)\nqc.cx(0,1)\nqc.ry(2.5,1)\nqc.rx(-1.6,2)\nqc.ccx(2,1,0)\n\n# Recompile\nrecompiler = ISLRecompiler(qc)\nresult = recompiler.recompile()\nrecompiled_circuit = result['circuit']\n\n# See the recompiled output\nprint(recompiled_circuit)\n```\n\n### Specifying additional configuration\n\nThe default settings can be changed by specifying arguments when\nbuilding `ISLRecompiler()`. Many of the configuration options are bundled into the \n`ISLConfig` class.\n\n```python\nfrom isl.recompilers import ISLRecompiler, ISLConfig\nfrom qiskit.circuit.random import random_circuit\n\nqc = random_circuit(5, 5, seed=2)\n\n# Recompile\nconfig = ISLConfig(sufficient_cost=1e-3, max_2q_gates=25)\nrecompiler = ISLRecompiler(qc, entanglement_measure='EM_TOMOGRAPHY_CONCURRENCE', isl_config=config)\nresult = recompiler.recompile()\nrecompiled_circuit = result['circuit']\n\n# See the original circuit\nprint(qc)\n\n# See the recompiled solution\nprint(recompiled_circuit)\n```\n\nHere we have specified a number of things\n* `sufficient_cost=1e-3`: The state produced by the recompiled solution will have an overlap of at least 99.9% with respect to the state produced by the original circuit.\n* `max_2q_gates=25`: If our solution contains more than 25 CNOT gates, return early. Setting this to the number of 2-qubit gates in the original circuit provides a useful upper limit.\n* `entanglement_measure`: This argument on the recompiler itself specifies the type of entanglement measure used when deciding which qubits to add the next layer to.\n\nMore configuration options can be explored in the documentation of `ISLConfig` and `ISLRecompiler`.\n\n### Comparing quantum resources\nTaking the above example, lets compare the number of gates and circuit depth before and after recompilation.\n```python\nfrom qiskit import transpile\n\n# Transpile the original circuits to the common basis set\nqc_in_basis_gates = transpile(qc, basis_gates=['u1', 'u2', 'u3', 'cx'], optimization_level=3)\nprint(qc_in_basis_gates.count_ops())\nprint(qc_in_basis_gates.depth())\n\n# Compare with recompiled circuit\nprint(recompiled_circuit.count_ops())\nprint(recompiled_circuit.depth())\n```\nIn the above example, the original circuit contains 25 CNOT gates and \n32 single-qubit gates with a depth of 33. By comparison, the recompiled solution\nprepares the same state to 99.9% overlap with on average 6 CNOT gates and\n8 two-qubit gates with a depth of 9 (average tested over 10 runs).\n\n## Troubleshooting\n\nNote: ISL depends on `qiskit-ignis`, which was deprecated in Qiskit 0.37.0. Until migration to Qiskit Experiments is completed, you may see the following error:\n\n```\nModuleNotFoundError: No module named 'qiskit.ignis'\n```\n\nTo fix this, simply downagrade your version of Qiskit to < 0.37.0.\n\n## Citing usage\n\nWe respectfully ask any publication, project or whitepaper using ISL to cite the original literature:\n\nB Jaderberg, A Agarwal, K Leonhardt, M Kiffner, D Jaksch, 2020 Quantum Sci. Technol. 5 034015.\nhttps://doi.org/10.1088/2058-9565/ab972b\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abhishekagarwal2301/isl",
    "keywords": "",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quantum-isl",
    "package_url": "https://pypi.org/project/quantum-isl/",
    "platform": null,
    "project_url": "https://pypi.org/project/quantum-isl/",
    "project_urls": {
      "Homepage": "https://github.com/abhishekagarwal2301/isl"
    },
    "release_url": "https://pypi.org/project/quantum-isl/1.0.1/",
    "requires_dist": [
      "qiskit (==0.36)",
      "numpy",
      "scipy",
      "openfermion (~=1.5)"
    ],
    "requires_python": "",
    "summary": "A package for implementing the Incremental         Structure Learning (ISL) algorithm for approximate             circuit recompilation",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15015549,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e4722c5b424b903d75bb2991bdca902d61f87846e04487b24ec1168e45e4f98",
          "md5": "c5cb0bb08e37574fda2f9ba9740f2868",
          "sha256": "53b89cbe5e867127653253d2e681101c722acb4a0c97dc60b10a89a61343d1d6"
        },
        "downloads": -1,
        "filename": "quantum-isl-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c5cb0bb08e37574fda2f9ba9740f2868",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42564,
        "upload_time": "2022-04-13T21:34:38",
        "upload_time_iso_8601": "2022-04-13T21:34:38.666934Z",
        "url": "https://files.pythonhosted.org/packages/0e/47/22c5b424b903d75bb2991bdca902d61f87846e04487b24ec1168e45e4f98/quantum-isl-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbe5e9bb1212fab0ee9a15acd86e9378d4fce5da623727d4533f76c4d33ac4f2",
          "md5": "72bed9d4ac9e036314a1df4b7d927cec",
          "sha256": "de87d9920e943a7c32aaa279e68a8ad56a32e96b03085b81f49dc8746ef0678d"
        },
        "downloads": -1,
        "filename": "quantum_isl-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72bed9d4ac9e036314a1df4b7d927cec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 57412,
        "upload_time": "2022-09-07T06:41:51",
        "upload_time_iso_8601": "2022-09-07T06:41:51.310835Z",
        "url": "https://files.pythonhosted.org/packages/cb/e5/e9bb1212fab0ee9a15acd86e9378d4fce5da623727d4533f76c4d33ac4f2/quantum_isl-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbe5e9bb1212fab0ee9a15acd86e9378d4fce5da623727d4533f76c4d33ac4f2",
        "md5": "72bed9d4ac9e036314a1df4b7d927cec",
        "sha256": "de87d9920e943a7c32aaa279e68a8ad56a32e96b03085b81f49dc8746ef0678d"
      },
      "downloads": -1,
      "filename": "quantum_isl-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72bed9d4ac9e036314a1df4b7d927cec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 57412,
      "upload_time": "2022-09-07T06:41:51",
      "upload_time_iso_8601": "2022-09-07T06:41:51.310835Z",
      "url": "https://files.pythonhosted.org/packages/cb/e5/e9bb1212fab0ee9a15acd86e9378d4fce5da623727d4533f76c4d33ac4f2/quantum_isl-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}