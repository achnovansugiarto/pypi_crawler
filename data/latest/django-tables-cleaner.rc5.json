{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "=====================\ndjango-tables-cleaner\n=====================\n\n`tables_cleaner` is a Django app used to remove oldest records from specific db tables.\n\nIt is intended to be used in production to keep under control the size of growing\ntables containing temporary data (used for logging, auditing, ...), but preserving\nthe most recent records according to the constraints assigned by design (see `TABLES_CLEANER_TABLES` setting).\n\nQuick start\n-----------\n\n1. Installation::\n\n    pip install django-tables-cleaner\n\n    or\n\n    pip install git+https://github.com/morlandi/django-tables-cleaner\n\n2. Add \"tables_cleaner\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'tables_cleaner',\n    ]\n\n3. Run the management command periodically (i.e. with cron) ::\n\n    python manage.py clean_tables\n\nUsage\n-----\n\nThe first option is to **recall periodically the management command** `clean_tables`, for example via cron:\n\n::\n\n    usage: manage.py clean_tables [-h] [--database DATABASE] [-d] [--vacuum]\n                                  [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n                                  [--pythonpath PYTHONPATH] [--traceback]\n                                  [--no-color]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --database DATABASE   Nominates a specific database to load fixtures into.\n                            Defaults to the \"default\" database.\n      -d, --dry-run         Don't actually delete records (default: False)\n      --vacuum              Run VACUUM after deletion\n      --version             show program's version number and exit\n      -v {0,1,2,3}, --verbosity {0,1,2,3}\n                            Verbosity level; 0=minimal output, 1=normal output,\n                            2=verbose output, 3=very verbose output\n      --settings SETTINGS   The Python path to a settings module, e.g.\n                            \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be\n                            used.\n      --pythonpath PYTHONPATH\n                            A directory to add to the Python path, e.g.\n                            \"/home/djangoprojects/myproject\".\n      --traceback           Raise on CommandError exceptions\n      --no-color            Don't colorize the command output.\n\n\nOr, when using a different scheduling strategy (for example with `django-cron <https://pypi.org/project/django-cron/>`_)\n**you can call from Python code the following function**:\n\n.. code :: python\n\n    clean_tables(logger=None, dry_run=False)\n\nFor example:\n\n.. code:: python\n\n    import tables_cleaner\n    tables_cleaner.clean_tables()\n\n\nFinally, for very specific needs, you can **recall the real workhorse directly**:\n\n.. code:: python\n\n  def clean_table(model_name, keep_records, keep_since_days, keep_since_hours, get_latest_by=None, logger=None, dry_run=False)\n\nwhich act on a single table, and doesn't require any setting.\n\n\nSettings\n--------\n\nTABLES_CLEANER_TABLES\n    The list of models to be cleaned;\n\n    options:\n\n        - keep_records: n. of most recent records to be preserved; 0=unused\n        - keep_since_days: always preserve records more recent than this; 0=unused\n        - keep_since_hourse: always preserve records more recent than this; 0=unused\n\nExample::\n\n    TABLES_CLEANER_TABLES = [\n        {\n            'model_name': 'backend.log',\n            'keep_records': 1000,\n            'keep_since_days': 1,\n            'keep_since_hours': 0,\n        }, {\n            'model_name': 'tasks.updatedevicetask',\n            'keep_records': 100,\n            'keep_since_days': 0,\n            'keep_since_hours': 12,\n            'get_latest_by': 'created',\n        },\n    ]\n\n\n**get_latest_by** attribute is optional; if not supplied, Model's Meta get_latest_by\nis used instead.\n\n\nVacuum strategy\n---------------\n\n\"VACUUM\" is optionally executed as a final activity ('--vacuum').\n\nSince version v0.1.0, we opted to use \"VACUUM\" instead of \"VACUUM FULL\", since that\nseems more appropriate for ordinary database maintenance, for the following reasons:\n\n- it's available for Postgresql and Sqlite (and, hopefully, for other databases too)\n- database owners are allowed to vacuum all tables in their databases\n- an exclusive lock is not required\n- it's potentially much faster\n\nPostgreSQL documentation explicitly states that `The FULL option is not recommended for routine use`;\nsee: `VACUUM â€” garbage-collect and optionally analyze a database <https://www.postgresql.org/docs/11/sql-vacuum.html>`_\n\nThanks to John Vandenberg for bringing my attention to this.\n\n\nFileFields and ImageFields\n--------------------------\n\nRemoving rows in the database when the Model contains one or more FileField or\nImageField is not enough, since some garbage is left in the Media folder.\n\nI normally use `django-cleanup <https://pypi.org/project/django-cleanup/>`_ to cope with this.\n\n\nDoes it work?\n-------------\n\nA few unit tests have been provided.\n\nPrepare the virtual environment as follows::\n\n    python -m pip install -r requirements.txt\n\nthen::\n\n    ./runtests.py\n\nor::\n\n    coverage run --source='.' runtests.py\n    coverage report\n\n\nReferences\n----------\n\n- `Using the Django test runner to test reusable applications <https://docs.djangoproject.com/en/3.1/topics/testing/advanced/#using-the-django-test-runner-to-test-reusable-applications>`_\n- `Advanced tutorial: How to write reusable apps <https://docs.djangoproject.com/en/3.1/intro/reusable-apps/>`_\n- `TODO: Running tests using tox <https://docs.djangoproject.com/en/3.1/internals/contributing/writing-code/unit-tests/#running-tests-using-tox>`_\n\n\nLicense\n-------\n\nThis code is distributed under the terms of the MIT license.\n\n\n\n\nHistory\n=======\n\nv0.1.4\n------\n* Example project added\n* Refactoring: app logic moved to standalone Python functions\n* Unit tests added\n\nv0.1.3\n------\n* Python and Django classifiers added to setup.py\n\nv0.1.2\n------\n* apply vacuum only when supported by db engines\n\nv0.1.1\n------\n* published on PyPI\n\nv0.1.0\n------\n* prepare for publishing on PyPI\n* use \"VACUUM\" instead of \"VACUUM FULL\"\n* dry run option renamed as \"-d\" (was \"-n\")\n\nv0.0.5\n------\n* Fix for Django 2.x: call super() from Command.__init__() as required\n\nv0.0.4\n------\n* Customizable 'get_latest_by' attribute\n* Remove EmptyResultSet import which is not available in older versions of Django\n\nv0.0.3\n------\n* Setup fix\n\nv0.0.2\n------\n* First working implementation\n\nv0.0.1\n------\n* Initial setup\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/morlandi/django-tables-cleaner",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tables-cleaner",
    "package_url": "https://pypi.org/project/django-tables-cleaner/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-tables-cleaner/",
    "project_urls": {
      "Homepage": "https://github.com/morlandi/django-tables-cleaner"
    },
    "release_url": "https://pypi.org/project/django-tables-cleaner/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django app used to remove oldest records from specific db tables.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8180430,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50b84a5d549d18ab93516480337053057d16a75df6ae488a97fb30ac04a85347",
          "md5": "ca8860639423fb1ee9a6040fafa5afa7",
          "sha256": "ea784cd799d02ec4e17fbda0a4d7d429648bae5beae37291f3fa881c33d04386"
        },
        "downloads": -1,
        "filename": "django_tables_cleaner-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca8860639423fb1ee9a6040fafa5afa7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10304,
        "upload_time": "2020-05-28T12:30:12",
        "upload_time_iso_8601": "2020-05-28T12:30:12.171927Z",
        "url": "https://files.pythonhosted.org/packages/50/b8/4a5d549d18ab93516480337053057d16a75df6ae488a97fb30ac04a85347/django_tables_cleaner-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "823fd19e03208cc0f7ae4fc8e86d72c2e5297214d2f8e930880854a9e9b1ef07",
          "md5": "e00e88f0e17ab410a817bcdf62dbc5ca",
          "sha256": "c18f05ca4eb1d101113e366cd6bd15a72ae089b97ea33c1a687c1df9753b4a7a"
        },
        "downloads": -1,
        "filename": "django_tables_cleaner-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e00e88f0e17ab410a817bcdf62dbc5ca",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10318,
        "upload_time": "2020-05-28T12:33:50",
        "upload_time_iso_8601": "2020-05-28T12:33:50.837929Z",
        "url": "https://files.pythonhosted.org/packages/82/3f/d19e03208cc0f7ae4fc8e86d72c2e5297214d2f8e930880854a9e9b1ef07/django_tables_cleaner-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0316ae7b24067ef94f8a597dcd4aea7a2f1a3f62d81e093ce50fb8cfdef5156",
          "md5": "17e1a2f22e614474ecf511918f30ac4e",
          "sha256": "c8279cbf7d20d588c44e495763d586b93f91969cd1519a3791740cc43d877dd5"
        },
        "downloads": -1,
        "filename": "django_tables_cleaner-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17e1a2f22e614474ecf511918f30ac4e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10666,
        "upload_time": "2020-05-28T13:25:53",
        "upload_time_iso_8601": "2020-05-28T13:25:53.846451Z",
        "url": "https://files.pythonhosted.org/packages/f0/31/6ae7b24067ef94f8a597dcd4aea7a2f1a3f62d81e093ce50fb8cfdef5156/django_tables_cleaner-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35b7d7e21904212cbd686ec87aa4460807dff07155063491563c3b3fa4e70491",
          "md5": "61acdd0beb9399c8523dcaab3b3a7467",
          "sha256": "7f7e45149a1b8256ba86d1be51271b95aa0da6008e1e536ff1b300f97d013615"
        },
        "downloads": -1,
        "filename": "django_tables_cleaner-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61acdd0beb9399c8523dcaab3b3a7467",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 10736,
        "upload_time": "2020-05-28T13:50:38",
        "upload_time_iso_8601": "2020-05-28T13:50:38.289459Z",
        "url": "https://files.pythonhosted.org/packages/35/b7/d7e21904212cbd686ec87aa4460807dff07155063491563c3b3fa4e70491/django_tables_cleaner-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a13cba19d380f6e2e884c2bc4988f7ded7627677398ede021794a3e3ab7a08f2",
          "md5": "c080ab8a4a53db1df5bf9f86856e86db",
          "sha256": "66853d732bc2f00254900fc08f4e78bb0756f66a3a025df72e5eced896c822c8"
        },
        "downloads": -1,
        "filename": "django_tables_cleaner-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c080ab8a4a53db1df5bf9f86856e86db",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 15710,
        "upload_time": "2020-09-14T09:07:39",
        "upload_time_iso_8601": "2020-09-14T09:07:39.338785Z",
        "url": "https://files.pythonhosted.org/packages/a1/3c/ba19d380f6e2e884c2bc4988f7ded7627677398ede021794a3e3ab7a08f2/django_tables_cleaner-0.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a13cba19d380f6e2e884c2bc4988f7ded7627677398ede021794a3e3ab7a08f2",
        "md5": "c080ab8a4a53db1df5bf9f86856e86db",
        "sha256": "66853d732bc2f00254900fc08f4e78bb0756f66a3a025df72e5eced896c822c8"
      },
      "downloads": -1,
      "filename": "django_tables_cleaner-0.1.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c080ab8a4a53db1df5bf9f86856e86db",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 15710,
      "upload_time": "2020-09-14T09:07:39",
      "upload_time_iso_8601": "2020-09-14T09:07:39.338785Z",
      "url": "https://files.pythonhosted.org/packages/a1/3c/ba19d380f6e2e884c2bc4988f7ded7627677398ede021794a3e3ab7a08f2/django_tables_cleaner-0.1.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}