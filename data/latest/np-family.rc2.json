{
  "info": {
    "author": "EungGu Yun",
    "author_email": "yuneg11@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Neural Process Family\n\n**This library is in the early stages of development.**\n\n**PyTorch versions are not yet supported.**\n\n\n## Installation\n\nYou can choose between the following installation methods:\n\n### NPF as a library\n\n```bash\n# From PyPI (recommended)\npip install np-family\n\n# Latest version (from current branch; dev-v4)\npip install git+https://github.com/yuneg11/Neural-Process-Family@dev-v4\n\n# Specific release (from tag; 0.0.1.dev0)\npip install git+https://github.com/yuneg11/Neural-Process-Family@0.0.1.dev0\n```\n\nThen, you can use the library as follows:\n\n```python\nfrom npf.jax.models import CNP\n\ncnp = CNP(y_dim=1)\n```\n\nYou should handle other logics (include train, evaluation, etc...)\n\n### NPF as an experiment framework\n\n```bash\n# Dependencies\npip install rich nxcl==0.0.3.dev3\n\n## And ML frameworks (JAX, PyTorch)\n# ex) pip install jax\n\n# Clone the repository\ngit clone https://github.com/yuneg11/Neural-Process-Family npf\ncd npf\n```\n\nThen, you can run the experiment, for example:\n\n```bash\npython scripts/jax/train.py -f configs/gp/rbf/inf/anp.yaml -lr 0.0001 --model.train_kwargs.num_latents 30\n```\n\nThe output will be saved under `outs/` directory.\nDetails will be added in the future.\n\n## Download or build datasets\n\n```bash\npython -m npf.jax.data.save \\\n    --root <dataset-root> \\\n    --dataset <dataset-name>\n```\n\n- `<dataset-root>`: The root path to save dataset. Default: `./datasets/`\n- `<dataset-name>`: The name of the dataset to save. See below sections for available datasets.\n\n### Image datasets\n\nYou should install `torch` and `torchvision` to download the datastes.\nYou can find the details in the [download page](https://pytorch.org/get-started/locally/).\n\nFor example,\n\n```bash\n# CUDA 11.3\nconda install pytorch torchvision cudatoolkit=11.3 -c pytorch\n```\n\n#### Available datasets\n\n- MNIST: `mnist`\n- CIFAR10: `cifar10`\n- CIFAR100: `cifar100`\n- CelebA: `celeba`\n- SVHN: `svhn`\n\n### Sim2Real datasets\n\nYou should install `numba` and `wget` to simulate or download the datasets.\n\n```bash\npip install numba wget\n```\n\n#### Available datasets\n\n- Lotka Volterra: `lotka_volterra`\n\n  TODO: See `npf.jax.data.save:save_lotka_volterra` for more detailed options.\n\n## Models\n\n- **CNP**: Conditional Neural Process\n- **NP**: Neural Process\n- **CANP**: Conditional Attentive Neural Process\n- **ANP**: Attentive Neural Process\n- **BNP**: Bootstrapping Neural Process\n- **BANP**: Bootstrapping Attentive Neural Process\n- **NeuBNP**: Neural Bootstrapping Neural Process\n- **NeuBANP**: Neural Bootstrapping Attentive Neural Process\n- **ConvCNP**: Convolutional Conditional Neural Process\n- **ConvNP**: Convolutional Neural Process\n\n## Scripts\n\n### Train\n\n```bash\npython scripts/jax/train.py -f <config-file> [additional-options]\n```\n\nYou can use your own config file or use the provided config files in the `configs` directory.\nFor example, the following command will train a CNP model with learning rate of `0.0001` for `100` epochs:\n\n```bash\npython scripts/jax/train.py -f configs/gp/rbf/inf/anp.yaml \\\n    -lr 0.0001 \\\n    --train.num_epochs 100\n```\n\nYou can see the help of the config file by using the following command:\n\n```bash\npython scripts/jax/train.py -f <config-file> --help\n```\n\n### Test\n\n```bash\n# From a trained model directory\npython scripts/jax/test.py -d <model-output-dir> [additional-options]\n\n# From a new config file and a trained model checkpoint\npython scripts/jax/test.py -f <config-file> -c <checkpoint-file-path> [additional-options]\n```\n\nYou can directly test the trained model by specifying the output directory.\nFor example:\n\n```bash\npython scripts/jax/test.py -d outs/CNP/Train/RBF/Inf/220704-181313-vweh\n```\n\nwhere `outs/CNP/Train/RBF/Inf/220704-181313-vweh` is the output directory of the trained model.\n\nYou can also replace or add the test-specific configs from the config file using the `-tf / --test-config-file` option.\nFor example:\n\n```bash\npython scripts/jax/test.py -d outs/CNP/Train/RBF/Inf/220704-181313-vweh \\\n    -tf configs/gp/robust/matern.yaml\n```\n\n### Test Bayesian optimization\n\n```bash\n# From a trained model directory\npython scripts/jax/test_bo.py -d <model-output-dir> [additional-options]\n\n# From a new config file and a trained model checkpoint\npython scripts/jax/test_bo.py -f <config-file> -c <checkpoint-file-path> [additional-options]\n```\n\nSimilar to above the `test` script, you can directly test the trained model by specifying the output directory.\nFor example:\n\n```bash\npython scripts/jax/test_bo.py -d outs/CNP/Train/RBF/Inf/220704-181313-vweh\n```\n\nYou can also replace or add the test-specific configs from the config file using the `-bf / --bo-config-file` option.\nFor example:\n\n```bash\npython scripts/jax/test.py -d outs/CNP/Train/RBF/Inf/220704-181313-vweh \\\n    -bf configs/gp/rbf/bo_config.yaml\n```\n\n<br>\n<br>\n<br>\n<br>\n\n## Appendix\n\n## Datasets\n\n1. 1D regression (`x`: `[B, P, 1]`, `y`: `[B, P, 1]`, `mask`: `[B, P]`)\n    - Gaussian processes, etc...\n\n2. 2D Image (`x`: `[B, P, P, 2]`, `y`: `[B, P, P, (1 or 3)]`, `mask`: `[B, P, P]`)\n    - Image completion, super resolution, etc...\n\n3. Bayesian optimization (`x`: `[B, P, D]`, `y`: `[B, P, 1]`, `mask`: `[B, P]`)\n\n\n## Dimension rule\n\n- `x`: `[batch, *data_specific_dims, data_dim]`\n- `y`: `[batch, *data_specific_dims, data_dim]`\n- `mask`:   `[batch, *data_specific_dims]`\n- `outs`:   `[batch, *model_specific_dims, *data_specific_dims, data_dim]`\n\n### Examples\n\n1. At `CNP` 1D regression:\n    - `x`:    `[batch, point, 1]`\n    - `y`:    `[batch, point, 1]`\n    - `mask`: `[batch, point]`\n    - `outs`: `[batch, point, 1]`\n\n2. At `NP` 1D regression:\n    - `x`:    `[batch, point, 1]`\n    - `y`:    `[batch, point, 1]`\n    - `mask`: `[batch, point]`\n    - `outs`: `[batch, latent, point, 1]`\n\n3. At `CNP` 2D image regression:\n    - `x`:    `[batch, height, width, 2]`\n    - `y`:    `[batch, height, width, 1 or 3]`\n    - `mask`: `[batch, height, width]`\n    - `outs`: `[batch, height, width, 1 or 3]`\n\n4. At `NP` 2D image regression:\n    - `x`:    `[batch, height, width, 2]`\n    - `y`:    `[batch, height, width, 1 or 3]`\n    - `mask`: `[batch, height, width]`\n    - `outs`: `[batch, latent, height, width, 1 or 3]`\n\n5. At `BNP` 1D regression:\n    - `x`:    `[batch, point, 1]`\n    - `y`:    `[batch, point, 1]`\n    - `mask`: `[batch, point]`\n    - `outs`: `[batch, sample, point, 1]`\n\n5. At `BNP` 2D image regression:\n    - `x`:    `[batch, height, width, 2]`\n    - `y`:    `[batch, height, width, 1 or 3]`\n    - `mask`: `[batch, height, width]`\n    - `outs`: `[batch, sample, height, width, 1 or 3]`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yuneg11/Neural-Process-Family",
    "keywords": "npf,NPF,neural process",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "np-family",
    "package_url": "https://pypi.org/project/np-family/",
    "platform": null,
    "project_url": "https://pypi.org/project/np-family/",
    "project_urls": {
      "Documentation": "https://yuneg11.github.io/Neural-Process-Family",
      "Homepage": "https://github.com/yuneg11/Neural-Process-Family",
      "Source": "https://github.com/yuneg11/Neural-Process-Family",
      "Tracker": "https://github.com/yuneg11/Neural-Process-Family/issues"
    },
    "release_url": "https://pypi.org/project/np-family/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Neural Processes implementations in JAX and PyTorch",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14701855,
  "releases": {
    "0.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3a5fc194d17acb97a90484170af44a969a4681645ea3e1d49040b715f7329c1",
          "md5": "5ff7f9b72acb6a77a792ef524d268cf3",
          "sha256": "9a2bbc40d1da4acfa22e52a31da3c68165be2f0e0a149baa657be87dadbf879d"
        },
        "downloads": -1,
        "filename": "np_family-0.0.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ff7f9b72acb6a77a792ef524d268cf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24242,
        "upload_time": "2022-04-30T06:21:27",
        "upload_time_iso_8601": "2022-04-30T06:21:27.906610Z",
        "url": "https://files.pythonhosted.org/packages/d3/a5/fc194d17acb97a90484170af44a969a4681645ea3e1d49040b715f7329c1/np_family-0.0.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0791bc1dcde6535800e618d84b1bd054fb4088886def0a63ae940126c2e071f",
          "md5": "169c40357ff3b64c124785c512a43bcd",
          "sha256": "f825a213b14826e51d61f000a716a3f91cea3dc26e764e63794f32202e8647f2"
        },
        "downloads": -1,
        "filename": "np_family-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "169c40357ff3b64c124785c512a43bcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 46033,
        "upload_time": "2022-08-09T12:32:54",
        "upload_time_iso_8601": "2022-08-09T12:32:54.062563Z",
        "url": "https://files.pythonhosted.org/packages/a0/79/1bc1dcde6535800e618d84b1bd054fb4088886def0a63ae940126c2e071f/np_family-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "020e302c4c3d8309df8ce2cedd31065cd3274d4cabe3193786e8ba283f51e06c",
          "md5": "afe5029640380b4ac4d5104631d25e4e",
          "sha256": "f76a8c3bfa19453a0b699f36d883950237d3d36920a88b3489d6a1b5230b8ac5"
        },
        "downloads": -1,
        "filename": "np-family-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "afe5029640380b4ac4d5104631d25e4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32697,
        "upload_time": "2022-08-09T12:32:56",
        "upload_time_iso_8601": "2022-08-09T12:32:56.427774Z",
        "url": "https://files.pythonhosted.org/packages/02/0e/302c4c3d8309df8ce2cedd31065cd3274d4cabe3193786e8ba283f51e06c/np-family-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0791bc1dcde6535800e618d84b1bd054fb4088886def0a63ae940126c2e071f",
        "md5": "169c40357ff3b64c124785c512a43bcd",
        "sha256": "f825a213b14826e51d61f000a716a3f91cea3dc26e764e63794f32202e8647f2"
      },
      "downloads": -1,
      "filename": "np_family-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "169c40357ff3b64c124785c512a43bcd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 46033,
      "upload_time": "2022-08-09T12:32:54",
      "upload_time_iso_8601": "2022-08-09T12:32:54.062563Z",
      "url": "https://files.pythonhosted.org/packages/a0/79/1bc1dcde6535800e618d84b1bd054fb4088886def0a63ae940126c2e071f/np_family-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "020e302c4c3d8309df8ce2cedd31065cd3274d4cabe3193786e8ba283f51e06c",
        "md5": "afe5029640380b4ac4d5104631d25e4e",
        "sha256": "f76a8c3bfa19453a0b699f36d883950237d3d36920a88b3489d6a1b5230b8ac5"
      },
      "downloads": -1,
      "filename": "np-family-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "afe5029640380b4ac4d5104631d25e4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 32697,
      "upload_time": "2022-08-09T12:32:56",
      "upload_time_iso_8601": "2022-08-09T12:32:56.427774Z",
      "url": "https://files.pythonhosted.org/packages/02/0e/302c4c3d8309df8ce2cedd31065cd3274d4cabe3193786e8ba283f51e06c/np-family-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}