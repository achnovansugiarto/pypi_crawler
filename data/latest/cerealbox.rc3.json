{
  "info": {
    "author": "Imtiaz Mangerah",
    "author_email": "Imtiaz_Mangerah@a2d24.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# CerealBox for Python\n\nCerealBox is a blazingly fast Zero Dependency generic Serializer / Deserializer for python dictionaries. It has an\nextendable architecture that allows custom serializers to be built through config. The module also includes built in\nimplementations of serializing common data types to a JSON compatible dictionary or DynamoDB JSON.\n\n## Getting started\n\n### Install the module\n\nUsing poetry\n\n```\npoetry add cerealbox\n```\n\nor using pip\n\n```\npip install cerealbox\n```\n\n### Using the built-in serializers\n\n#### jsonable\n\nThe jsonable serializer converts any input dict or value into JSON serializable output value.\n\n```python\nfrom cerealbox.jsonable import as_jsonable\nfrom decimal import Decimal\nfrom enum import Enum\nfrom datetime import datetime\n\n\nclass Country(Enum):\n    ZA = 'South Africa'\n    AU = 'Australia'\n    US = 'United States'\n\n\nsample_input = {\n    \"name\": \"Jane\",\n    \"age\": 23,\n    \"balance\": Decimal('250.10'),\n    \"country\": Country.ZA,\n    \"updated_at\": datetime(2020, 1, 1)\n}\n\nprint(as_jsonable(sample_input))\n# {'name': 'Jane', 'age': 23, 'balance': '250.10', 'country': 'South Africa', 'updated_at': '2020-01-01T00:00:00'}\n\n# You can also use as_jsonable as the default function to json.dumps \nimport json\n\nprint(json.dumps(sample_input, default=as_jsonable, indent=4))\n# {\n#     \"name\": \"Jane\",\n#     \"age\": 23,\n#     \"balance\": \"250.10\",\n#     \"country\": \"South Africa\",\n#     \"updated_at\": \"2020-01-01T00:00:00\"\n# }\n```\n\nThe default encoders for `as_jsonable` are as follows:\n\n```\n     | Python            | JSONABLE        |\n     +===================+=================+\n     | dict              | dict            |\n     | list, tuple       | list            |\n     | set               | list            |\n     | string            | string          |\n     | int, float        | int, float      |\n     | bool              | bool            |\n     | None              | None            |\n     | Decimal           | string          |\n     | datetime          | string (iso)    |\n     | enum              | string (value)  |\n     | uuid              | string          |\n```\n\n#### DynamoDB\n\nThe DynamoDB Serializer/Deserializer is capable of transforming python values into DynamoDB JSON and back. It supports\nmost common data types. Some transformations are not reversible (eg converting a datetime to a string). This limitation\nis due to cerealbox being schemaless, and can be overcome by using a module such as `typed-models` or `pydantic`\n\n```python\nfrom cerealbox.dynamo import from_dynamodb_json, as_dynamodb_json\nfrom decimal import Decimal\nfrom enum import Enum\nfrom datetime import datetime\nfrom pprint import pprint\n\n\nclass Country(Enum):\n    ZA = 'South Africa'\n    AU = 'Australia'\n    US = 'United States'\n\n\nsample_input = {\n    \"name\": \"Jane\",\n    \"age\": 23,\n    \"balance\": Decimal('250.10'),\n    \"country\": Country.ZA,\n    \"updated_at\": datetime(2020, 1, 1)\n}\n\nddb_json = as_dynamodb_json(sample_input)\npprint(ddb_json)\n# {'M': {'age': {'N': '23'},\n#        'balance': {'N': '250.10'},\n#        'country': {'S': 'South Africa'},\n#        'name': {'S': 'Jane'},\n#        'updated_at': {'S': '2020-01-01T00:00:00'}}}\n\n# Reversing the operation\n\npprint(from_dynamodb_json(ddb_json))\n\n# {'age': Decimal('23'),\n#  'balance': Decimal('250.10'),\n#  'country': 'South Africa',\n#  'name': 'Jane',\n#  'updated_at': '2020-01-01T00:00:00'}\n```\n\nWhen serializing from a dictionary to DynamoDB JSON, the following mapping is used:\n\n```\n   Python                                  DynamoDB\n   ------                                  --------\n   None                                    {'NULL': True}\n   True/False                              {'BOOL': True/False}\n   int/Decimal                             {'N': str(value)}\n   string                                  {'S': string}\n   Binary/bytearray/bytes (py3 only)       {'B': bytes}\n   set([int/Decimal])                      {'NS': [str(value)]}\n   set([string])                           {'SS': [string])\n   set([Binary/bytearray/bytes])           {'BS': [bytes]}\n   list                                    {'L': list}\n   dict                                    {'M': dict}\n   float                                   {'S': str(value)}\n   datetime/date/time                      {'S': str(value.isoformat())}\n   Enum                                    {'S': str(value.value)}\n   UUID                                    {'S': str(value)}\n```\n\nWhen serializing from DynamoDB JSON to a Python dict, the following mapping is used:\n\n```\n   DynamoDB                                Python\n   --------                                ------\n   {'NULL': True}                          None\n   {'BOOL': True/False}                    True/False\n   {'N': str(value)}                       Decimal(str(value))\n   {'S': string}                           string\n   {'B': bytes}                            Binary(bytes)\n   {'NS': [str(value)]}                    set([Decimal(str(value))])\n   {'SS': [string]}                        set([string])\n   {'BS': [bytes]}                         set([bytes])\n   {'L': list}                             list\n   {'M': dict}                             dict\n```\n\n### Writing your own serializer\n\nA serializer is made up of a dict that maps each datatype to a function that produces its serialized version. There are\n3 special cases for these functions:\n\n1. If the type and the mapped function are the same (eg `{str: str}`), the value is not modified during serialization.\n   This is a performance optimization.\n2. Dealing with the value `None` is a special case, since `type(None)` is `NoneType`. If you would like to handle `None`\n   , import `NoneType` from cerealbox and use it as the type\n3. If a type maps to a function that accepts a parameter named `serialize`, an instance of the serializer is passed\n   along with the function. This allows recursive calls to deal with items inside of dictionaries, lists etc.\n\nExample use case:\n-\n> When serializing a dict, convert all Decimal types to a String with the prefix `$ `. Redact any string that contains the word \"classified\". Handle nested items inside of a list in a similar manner\n\n```python\nfrom cerealbox import Cereal\nfrom decimal import Decimal\nfrom pprint import pprint\n\n\ndef redact_strings(value):\n    if 'classified' in value.lower():\n        return \"***classified***\"\n\n    return value\n\n\ndef serialize_list(value, serialize):\n    return [serialize(item) for item in value]\n\n\nENCODERS = {\n    str: redact_strings,\n    Decimal: lambda num: f\"$ {num}\",\n    list: serialize_list,\n    dict: lambda v, serialize: {k_: serialize(v_) for k_, v_ in v.items()}\n}\n\ncustom_serializer = Cereal(encoders=ENCODERS)\n\nsample_input = {\n    \"name\": \"Jane\",\n    \"assignment\": \"Eat Cereal. Mission is Classified\",\n    \"funds\": Decimal('1024.50'),\n    \"keywords\": [Decimal('1.5'), \"Hello, World\", \"I am classified.\"]\n}\n\npprint(custom_serializer(sample_input))\n# {'assignment': '***classified***',\n#  'funds': '$ 1024.50',\n#  'keywords': ['$ 1.5', 'Hello, World', '***classified***'],\n#  'name': 'Jane'}\n```\n\n### Extending an existing serializer\n\n> Extend jsonable to redact strings containing the word Classified\n\n```python\nfrom cerealbox.jsonable import as_jsonable\n\n\ndef redact_strings(value):\n    if 'classified' in value.lower():\n        return \"***classified***\"\n\n    return value\n\n\nas_jsonable.extend_encoders({str: redact_strings})\n\nsample_input = {\n    \"name\": \"Jane\",\n    \"age\": 23,\n    \"mission\": \"[Classified] Divide by zero and see what happens.\",\n}\n\nprint(as_jsonable(sample_input))\n# {'name': 'Jane', 'age': 23, 'mission': '***classified***'}\n```\n\n## DynamoDB JSON Serializer/Deserializer Benchmarks\n\n**cerealbox** has crude benchmarks against [boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) \n(using TypeSerializer and TypeDeserializer) and [dynamodb-json](https://github.com/Alonreznik/dynamodb-json). The\nbenchmark calculates the roundtrip conversion from a python dict to DynamoDB JSON and back to a python dict. See `./benchmarks`\n\n| package | version | relative performance | mean time |\n| :---: | :---: | :---: | :---: |\n| `cerealbox` | 0.1.2 | - | 102.4 uS |\n| `boto3` | 1.18.30 | 2.69x slower | 275.2 uS |\n| `dynamodb-json` | 1.3 | 7.36x slower | 754.0 uS |\n\n## Contributing\n\nTo work on the cerealbox codebase, you'll want to clone the project locally and install the required dependencies\nvia [poetry](https://poetry.eustace.io).\n\n```bash\ngit clone git@github.com:a2d24/cerealbox.git\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/a2d24/cerealbox",
    "keywords": "Serializer,Deserializer,DynamoDB,JSON",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cerealbox",
    "package_url": "https://pypi.org/project/cerealbox/",
    "platform": "",
    "project_url": "https://pypi.org/project/cerealbox/",
    "project_urls": {
      "Documentation": "https://github.com/a2d24/cerealbox",
      "Homepage": "https://github.com/a2d24/cerealbox"
    },
    "release_url": "https://pypi.org/project/cerealbox/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "Zero dependency generic serializer and deserializer with DynamoDB JSON support",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11294473,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3136ba10c196dd2bcb93ff49867d622f0b056353b2d519937852391a2ab609ee",
          "md5": "e5d579236ee4899484e3c45a6ed6a2d2",
          "sha256": "4ed17ccdf00f6b1e3858ab6eb5dd0001b97a1c9df7306dd44016672985fc2857"
        },
        "downloads": -1,
        "filename": "cerealbox-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5d579236ee4899484e3c45a6ed6a2d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6689,
        "upload_time": "2021-08-26T21:14:59",
        "upload_time_iso_8601": "2021-08-26T21:14:59.393455Z",
        "url": "https://files.pythonhosted.org/packages/31/36/ba10c196dd2bcb93ff49867d622f0b056353b2d519937852391a2ab609ee/cerealbox-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63bddd00abb223c80df3e3f7205b2a0677b64ec0998eb3cb2805f4d9b4fbb736",
          "md5": "eaff9a7dc7de22147db3d310a8a0e546",
          "sha256": "c94d0632fcf73ef3a055aa18173c9a3bac2ae4b97da81a5bc8bf8acaebfe0fbb"
        },
        "downloads": -1,
        "filename": "cerealbox-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eaff9a7dc7de22147db3d310a8a0e546",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 7259,
        "upload_time": "2021-08-26T21:15:02",
        "upload_time_iso_8601": "2021-08-26T21:15:02.862029Z",
        "url": "https://files.pythonhosted.org/packages/63/bd/dd00abb223c80df3e3f7205b2a0677b64ec0998eb3cb2805f4d9b4fbb736/cerealbox-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1d10851e71869a4196508f1af648e9cc32b039380729f80ac58f17283a894c2",
          "md5": "6d25df2111a193a3ec514519ddc0ef0f",
          "sha256": "e3e170798548a98aa079b677e8ce5e49317c0b9fdf306f9f6f3dc22df02fbcfa"
        },
        "downloads": -1,
        "filename": "cerealbox-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d25df2111a193a3ec514519ddc0ef0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7520,
        "upload_time": "2021-08-27T09:27:10",
        "upload_time_iso_8601": "2021-08-27T09:27:10.858779Z",
        "url": "https://files.pythonhosted.org/packages/e1/d1/0851e71869a4196508f1af648e9cc32b039380729f80ac58f17283a894c2/cerealbox-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58ba6a9f4a492854e3497e7a813ffa4ee0a395dbcc154624f8d25bbb40520338",
          "md5": "e147c3602b1c6fdc988c15da0fc356c6",
          "sha256": "e90928e5f39b07391bd9ddad3ba9b771aa3ff81e249ede726bc5cbb8239f34b0"
        },
        "downloads": -1,
        "filename": "cerealbox-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e147c3602b1c6fdc988c15da0fc356c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8027,
        "upload_time": "2021-08-27T09:27:12",
        "upload_time_iso_8601": "2021-08-27T09:27:12.789689Z",
        "url": "https://files.pythonhosted.org/packages/58/ba/6a9f4a492854e3497e7a813ffa4ee0a395dbcc154624f8d25bbb40520338/cerealbox-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e30fce79b02636dc4ade3c141c080759dd8e956b1bb0f48ba482eac11d089b9d",
          "md5": "34aaed0defe53173ad81511885b2ac97",
          "sha256": "c3167e0df15239af26f12d69fc1acf47350c19bc7ca681c2ddf971ee5cb5d23e"
        },
        "downloads": -1,
        "filename": "cerealbox-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34aaed0defe53173ad81511885b2ac97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7836,
        "upload_time": "2021-08-27T12:39:39",
        "upload_time_iso_8601": "2021-08-27T12:39:39.648786Z",
        "url": "https://files.pythonhosted.org/packages/e3/0f/ce79b02636dc4ade3c141c080759dd8e956b1bb0f48ba482eac11d089b9d/cerealbox-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "198d60a2c99fbd3ef0baa4e94053dc54bd1effd70ead86a2a08d818fbdac9838",
          "md5": "b73c430189fa69b8c9f0d65070e70ffc",
          "sha256": "9dd270328774e580c7634527e1a4efb41c63ee33970ec19660644b119235d79f"
        },
        "downloads": -1,
        "filename": "cerealbox-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b73c430189fa69b8c9f0d65070e70ffc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 8374,
        "upload_time": "2021-08-27T12:39:41",
        "upload_time_iso_8601": "2021-08-27T12:39:41.518569Z",
        "url": "https://files.pythonhosted.org/packages/19/8d/60a2c99fbd3ef0baa4e94053dc54bd1effd70ead86a2a08d818fbdac9838/cerealbox-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e30fce79b02636dc4ade3c141c080759dd8e956b1bb0f48ba482eac11d089b9d",
        "md5": "34aaed0defe53173ad81511885b2ac97",
        "sha256": "c3167e0df15239af26f12d69fc1acf47350c19bc7ca681c2ddf971ee5cb5d23e"
      },
      "downloads": -1,
      "filename": "cerealbox-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34aaed0defe53173ad81511885b2ac97",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 7836,
      "upload_time": "2021-08-27T12:39:39",
      "upload_time_iso_8601": "2021-08-27T12:39:39.648786Z",
      "url": "https://files.pythonhosted.org/packages/e3/0f/ce79b02636dc4ade3c141c080759dd8e956b1bb0f48ba482eac11d089b9d/cerealbox-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "198d60a2c99fbd3ef0baa4e94053dc54bd1effd70ead86a2a08d818fbdac9838",
        "md5": "b73c430189fa69b8c9f0d65070e70ffc",
        "sha256": "9dd270328774e580c7634527e1a4efb41c63ee33970ec19660644b119235d79f"
      },
      "downloads": -1,
      "filename": "cerealbox-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b73c430189fa69b8c9f0d65070e70ffc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 8374,
      "upload_time": "2021-08-27T12:39:41",
      "upload_time_iso_8601": "2021-08-27T12:39:41.518569Z",
      "url": "https://files.pythonhosted.org/packages/19/8d/60a2c99fbd3ef0baa4e94053dc54bd1effd70ead86a2a08d818fbdac9838/cerealbox-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}