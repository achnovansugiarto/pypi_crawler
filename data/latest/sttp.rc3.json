{
  "info": {
    "author": "Michael Wright",
    "author_email": "mjw@methodanalysis.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Strict Text Template Parse (sttp) [![test](https://github.com/mwri/sttp/actions/workflows/test.yml/badge.svg)](https://github.com/mwri/sttp/actions/workflows/test.yml) [![codecov](https://codecov.io/gh/mwri/sttp/branch/main/graph/badge.svg?token=FZXOQQR4QM)](https://codecov.io/gh/mwri/sttp) [![Documentation Status](https://readthedocs.org/projects/py-sttp/badge/?version=latest)](https://py-sttp.readthedocs.io/en/latest/?badge=latest)\n\nPlease see [full documentation on readthedocs](https://py-sttp.readthedocs.io/en/latest/).\n\nSTTP allows you to parse text strictly (see [why strict parsing](#why-strict-parsing)\nbelow for a discussion on why parsing should be strict) but very easily, using\na template which can be built by copying some sample output, marking the bits which\nchange, and adding simple prefixes to the lines to indicate where they can recur\nmultiple times.\n\nParsing is often a choice between doing something pragmatic, quick and\ndirty and getting stuff done... or spending a lot more time doing something\nbetter and more robust. STTP is about getting the best of both worlds, a\nsuper robust solution that is also quick and easy.\n\nTo give you an quick idea, take this made up input:\n\n```text\nNum   Server               Uptime\n1     wibble.domain.com    1d 5h\n2     zap.domain.com       100d 1h\n3     foobar.domain.com    3d 10h\n```\n\nYou can parse this with this template:\n\n```text\nm> Num   Server               Uptime\nm*> {{ num = integer }}{{ ws }}{{ server = non_ws }}{{ ws }}{{ uptime = string }}\n```\n\nThe result would be:\n\n```python\n[\n    {'num': 1, 'server': 'wibble.domain.com', 'uptime': '1d 5h'},\n    {'num': 2, 'server': 'zap.domain.com',    'uptime': '100d 1h'},\n    {'num': 3, 'server': 'foobar.domain.com', 'uptime': '3d 10h'},\n]\n```\n\nYou would do it like this:\n\n```python\nparser = sttp.Parser(template = in_template)\nout_struct = parser.parse(in_text)\n```\n\nAnother quick example parsing the output of a ping command (such as `ping -c3 dns.google`):\n\n```text\nPING dns.google (8.8.4.4) 56(84) bytes of data.\n64 bytes from dns.google (8.8.4.4): icmp_seq=1 ttl=54 time=11.7 ms\n64 bytes from dns.google (8.8.4.4): icmp_seq=2 ttl=54 time=12.5 ms\n64 bytes from dns.google (8.8.4.4): icmp_seq=3 ttl=54 time=11.7 ms\n\n--- dns.google ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2002ms\nrtt min/avg/max/mdev = 11.719/11.973/12.465/0.347 ms\n```\n\nThis can be achieved with this template:\n\n```text\nm> PING {{ target = hostname }} ({{ ipaddr = ipaddr }}) {{ integer }}({{ integer }}) bytes of data.\nm*(replies)> {{ len = integer }} bytes from {{ target = hostname }} ({{ ipaddr = ipaddr }}): icmp_seq={{ seq = integer }} ttl={{ ttl = integer }} time={{ latency = number }} ms\nm>\nm> --- {{ target = hostname }} ping statistics ---\nm> {{ stats.transmitted = integer }} packets transmitted, {{ stats.received = integer }} received, {{ stats.loss = integer }}% packet loss, time {{ stats.time = number }}ms\nm> rtt min/avg/max/mdev = {{ stats.min = number }}/{{ stats.avg = number }}/{{ stats.max = number }}/{{ stats.mdev = number }} ms\n```\n\nThe result would be:\n\n```python\n{\n    'ipaddr': '8.8.4.4',\n    'target': 'dns.google',\n    'replies': [\n        {'len': 64, 'target': 'dns.google', 'ipaddr': '8.8.4.4', 'seq': 1, 'ttl': 54, 'latency': 11.7},\n        {'len': 64, 'target': 'dns.google', 'ipaddr': '8.8.4.4', 'seq': 2, 'ttl': 54, 'latency': 12.5},\n        {'len': 64, 'target': 'dns.google', 'ipaddr': '8.8.4.4', 'seq': 3, 'ttl': 54, 'latency': 11.7},\n    ],\n    'stats': {\n        'transmitted': 3,\n        'received': 3,\n        'loss': 0,\n        'time': 2002.0,\n        'min': 11.719,\n        'max': 12.465,\n        'avg': 11.973,\n        'mdev': 0.347,\n    },\n}\n```\n\n## Why strict parsing?\n\nTo give you an quick idea of the parsing problems that can arise with the simplest of\ncases, take this made up input (the same input is used in the quick start):\n\n```text\nNum   Server               Uptime\n1     wibble.domain.com    1d 5h\n2     zap.domain.com       100d 1h\n3     foobar.domain.com    3d 10h\n```\n\nYou can parse this simply like this:\n\n```python\n>>> import re\n>>> in_text = '''Num   Server               Uptime\n... 1     wibble.domain.com    1d 5h\n... 2     zap.domain.com       100d 1h\n... 3     foobar.domain.com    3d 10h\n... '''\n>>> out_struct = [\n...     entry.groupdict() for entry in\n...     [re.match(r'(?P<num>\\d+)\\s+(?P<server>\\S+)\\s+(?P<uptime>\\d+d \\d+h)', line)\n...         for line in in_text.split('\\n')]\n...     if entry is not None\n... ]\n>>> assert out_struct == [\n...     {'num': '1', 'server': 'wibble.domain.com', 'uptime': '1d 5h'},\n...     {'num': '2', 'server': 'zap.domain.com',    'uptime': '100d 1h'},\n...     {'num': '3', 'server': 'foobar.domain.com', 'uptime': '3d 10h'}\n... ], out_struct\n```\n\nThis sort of parsing can be a quick and pragmatic way to get what you want but even this is not\nnearly as fast to write (and maintain) as using STTP, and there are pitfalls. For example if\nthe output was completely unexpected, an error instead of the table for example, then the parse\nwould still succeed! The result would be an empty array, but that might be perfectly legitimate\nif it wasn’t for the error. Or, what if there were table entries but with an error or warning as\nwell. Of course you could check explicitly for errors you know about, or maybe you can recognise\nerrors generally, but if there is an unexpected error or the error reporting format changes, you\ncould be back to getting an empty array with an error check that doesn’t see an error any more.\nThis sort of parsing is not strict, and it can be dangerous.\n\nNaturally you can implement extremely strict parsing which will only tolerate exactly what you\nknow of the text you are parsing and nothing else. Let’s see what that could look like in this\nexample:\n\n```python\n>>> in_text = '''Num   Server               Uptime\n... 1     wibble.domain.com    1d 5h\n... 2     zap.domain.com       100d 1h\n... 3     foobar.domain.com    3d 10h\n... '''\n>>> lines = in_text.split('\\n')\n>>> if len(lines) == 0:\n...     raise Exception('input is empty')\n>>> header = lines.pop(0)\n>>> if header != 'Num   Server               Uptime':\n...     raise Exception('input line 1 was not recognised header: ' + header)\n>>> out_struct = []\n>>> while lines:\n...     line = lines.pop(0)\n...     match = re.match(r'(?P<num>\\d+)\\s+(?P<server>\\S+)\\s+(?P<uptime>\\d+d \\d+h)', line)\n...\n...     if match:\n...         out_struct.append(match.groupdict())\n...     elif line != '' or len(lines) != 0:\n...         raise Exception('unexpected line parsing table entries: ' + line)\n>>> assert out_struct == [\n...     {'num': '1', 'server': 'wibble.domain.com', 'uptime': '1d 5h'},\n...     {'num': '2', 'server': 'zap.domain.com',    'uptime': '100d 1h'},\n...     {'num': '3', 'server': 'foobar.domain.com', 'uptime': '3d 10h'}\n... ], out_struct\n```\n\nThere’s nothing difficult about this, but WOW, 14 lines of code, it’s a long way from that\npragmatic one liner, and it would take you a LOT longer to write it than the STTP template\nversion, where the only interesting bit is the template:\n\n```text\nm> Num   Server               Uptime\nm*> {{ int num = integer }}{{ ws }}{{ server = non_ws }}{{ ws }}{{ uptime = string }}\n```\n\n### Fail fast\n\nIn parsing terms this means “only accept what you know, handle it correctly and crash for\nany unknown”. That is a Fail fast approach. Fail fast advocates that if something unexpected\nhappens it’s better to fail immediately and clearly with all the context of the failure\nintact, than try to carry on with possibly invalid results (and no way of knowing it), causing\nany number of side effects later, such as an exception not obviously related to the parse at\nall, or simply incorrect data, and maybe that data could be put in a database, and there’s\nprobably no chance anyone will easily figure out why that bit of data is wrong this time\nnext week…\n\nFail fast might mean that something crashes in production that wouldn’t have if you had less\nstrict parsing, but isn’t that crash better than corrupting a database without knowing it?\nA crash and stack trace at the right time can often provide developers all they need to\nknow to understand what went wrong, and with good monitoring, efficient agile toolchains\nand release processes, a new unit test could have been written, the bug fixed, and a new\nrevision released to production in minutes!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mwri/sttp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sttp",
    "package_url": "https://pypi.org/project/sttp/",
    "platform": null,
    "project_url": "https://pypi.org/project/sttp/",
    "project_urls": {
      "Homepage": "https://github.com/mwri/sttp"
    },
    "release_url": "https://pypi.org/project/sttp/0.0.3/",
    "requires_dist": [
      "lark (==1.1.2)",
      "Sphinx (==4.4.0) ; extra == 'dev'",
      "black (==22.1.0) ; extra == 'dev'",
      "coverage (==6.3.2) ; extra == 'dev'",
      "lark (==1.1.2) ; extra == 'dev'",
      "pytest-mock (==3.7.0) ; extra == 'dev'",
      "pytest (==7.1.0) ; extra == 'dev'",
      "sphinx-rtd-theme (==1.0.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Strict Text Template Parsing",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13447047,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "098ccc3a1f7ee60957ba446b40b107eeaceaac6328844f34afd2df50da802542",
          "md5": "725aad5bfd43eb66a8f4951cf4a2645b",
          "sha256": "10cffe7ae21ff752d13e9aed4db41d9661dbfce2e83308ae4db957f713121c9c"
        },
        "downloads": -1,
        "filename": "sttp-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "725aad5bfd43eb66a8f4951cf4a2645b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24000,
        "upload_time": "2022-03-14T19:48:06",
        "upload_time_iso_8601": "2022-03-14T19:48:06.604981Z",
        "url": "https://files.pythonhosted.org/packages/09/8c/cc3a1f7ee60957ba446b40b107eeaceaac6328844f34afd2df50da802542/sttp-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1ef7129dd4a21b45386ac63c8e68b64a6be0acbb9ff7f0c9d5b9920a06056b6",
          "md5": "13aeb7431d10f407de476cd0e0714dfb",
          "sha256": "0bfa5cce5128268e6564bb2552412e8e3da535c3502dcf513712a7ac96735ab5"
        },
        "downloads": -1,
        "filename": "sttp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13aeb7431d10f407de476cd0e0714dfb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21290,
        "upload_time": "2022-03-14T19:48:08",
        "upload_time_iso_8601": "2022-03-14T19:48:08.907751Z",
        "url": "https://files.pythonhosted.org/packages/f1/ef/7129dd4a21b45386ac63c8e68b64a6be0acbb9ff7f0c9d5b9920a06056b6/sttp-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14988782a92479ec41eb18d2b37f8eccec9b7dcd2d4a3fd24815de95e35e4beb",
          "md5": "960f28a61fea3c6991edaff284f05148",
          "sha256": "7e55a360db555a0b60dc426d263ef04a35dd4704fc27cdcf863d1aacaed665fc"
        },
        "downloads": -1,
        "filename": "sttp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "960f28a61fea3c6991edaff284f05148",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24634,
        "upload_time": "2022-03-25T19:21:37",
        "upload_time_iso_8601": "2022-03-25T19:21:37.501702Z",
        "url": "https://files.pythonhosted.org/packages/14/98/8782a92479ec41eb18d2b37f8eccec9b7dcd2d4a3fd24815de95e35e4beb/sttp-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16ed3043567a246141d34875adfd2b9749db83a94f711d68822aef17766ea84e",
          "md5": "85021ac314abbcc8732d9559192befc1",
          "sha256": "6f9fd1e3f5e2d9b55acd1a7eeb3619a83f5039f14806fbe39aba6615a285c15a"
        },
        "downloads": -1,
        "filename": "sttp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85021ac314abbcc8732d9559192befc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21985,
        "upload_time": "2022-03-25T19:21:39",
        "upload_time_iso_8601": "2022-03-25T19:21:39.958610Z",
        "url": "https://files.pythonhosted.org/packages/16/ed/3043567a246141d34875adfd2b9749db83a94f711d68822aef17766ea84e/sttp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "996fa5c710f51bb5579f20c5d38823e1c077cdd1984c479c3c6163396929e35d",
          "md5": "5ad4d91cd6c1e1c1c287ff9b1d0ec4fd",
          "sha256": "283c42eb60d71bfbcf65a42ff9031278fcfae4cf4510a2d6c0ea5784c33e7f46"
        },
        "downloads": -1,
        "filename": "sttp-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ad4d91cd6c1e1c1c287ff9b1d0ec4fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19195,
        "upload_time": "2022-04-07T22:09:50",
        "upload_time_iso_8601": "2022-04-07T22:09:50.431246Z",
        "url": "https://files.pythonhosted.org/packages/99/6f/a5c710f51bb5579f20c5d38823e1c077cdd1984c479c3c6163396929e35d/sttp-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92e34b269fb9548c494e2b84eb96ddc85ff6b82b873dd878e090a6c7f45e2114",
          "md5": "e787bd196365ad8ddb4896849c432753",
          "sha256": "3b367cc7438444b2c8b1dc7463bf382c24536f2ea44bf0dbc93eff6f155c35b3"
        },
        "downloads": -1,
        "filename": "sttp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e787bd196365ad8ddb4896849c432753",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18311,
        "upload_time": "2022-04-07T22:09:52",
        "upload_time_iso_8601": "2022-04-07T22:09:52.152546Z",
        "url": "https://files.pythonhosted.org/packages/92/e3/4b269fb9548c494e2b84eb96ddc85ff6b82b873dd878e090a6c7f45e2114/sttp-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "996fa5c710f51bb5579f20c5d38823e1c077cdd1984c479c3c6163396929e35d",
        "md5": "5ad4d91cd6c1e1c1c287ff9b1d0ec4fd",
        "sha256": "283c42eb60d71bfbcf65a42ff9031278fcfae4cf4510a2d6c0ea5784c33e7f46"
      },
      "downloads": -1,
      "filename": "sttp-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ad4d91cd6c1e1c1c287ff9b1d0ec4fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19195,
      "upload_time": "2022-04-07T22:09:50",
      "upload_time_iso_8601": "2022-04-07T22:09:50.431246Z",
      "url": "https://files.pythonhosted.org/packages/99/6f/a5c710f51bb5579f20c5d38823e1c077cdd1984c479c3c6163396929e35d/sttp-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92e34b269fb9548c494e2b84eb96ddc85ff6b82b873dd878e090a6c7f45e2114",
        "md5": "e787bd196365ad8ddb4896849c432753",
        "sha256": "3b367cc7438444b2c8b1dc7463bf382c24536f2ea44bf0dbc93eff6f155c35b3"
      },
      "downloads": -1,
      "filename": "sttp-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e787bd196365ad8ddb4896849c432753",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18311,
      "upload_time": "2022-04-07T22:09:52",
      "upload_time_iso_8601": "2022-04-07T22:09:52.152546Z",
      "url": "https://files.pythonhosted.org/packages/92/e3/4b269fb9548c494e2b84eb96ddc85ff6b82b873dd878e090a6c7f45e2114/sttp-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}