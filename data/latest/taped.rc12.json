{
  "info": {
    "author": "OtoSense",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# taped\nPython's serene audio accessor\n\n\nTo install:\t```pip install taped```\n\n\n# A quick (audio) peep\n\n## In a nutshell:\n    \n```python\nfrom taped import LiveWf\nlive_wf = LiveWf()  # make a live audio waveform object (using defaults for every thing)\nlive_wf.start()  # start \"recording\"\nwf_chunk = live_wf[:100]  # do stuff (here, grab the first 100 (numerical waveform) samples)\n... # do other stuff (save audio, display, pipe into some ML pipeline...)\nlive_wf.stop()  # stop the live_wf acquisition\n```\n\nBut obviously, there's more to it. For a quick peep we'll mention just two:\n- **context manager**: `LiveWf`, like most stream providing objects, is best used as a context manager (it's that `with...` thing), to automatically \"clean up\" when finished using.\n- **input_device_index**: If you don't specify any arguments when making a `LiveWf`, you'll get defaults. You might want to check them out in case they're not what you want. One crucial argument is the `input_device_index`, which specifies what the audio source actually is. You can get a list of choices by using the `list_recording_device_index_names` function:\n\n\n```python\nfrom taped import list_recording_device_index_names\n\nlist_recording_device_index_names()\n```\n\n\n\n    [(0, 'MacBook Pro Microphone'), (2, 'ZoomAudioDevice')]\n\n\n\n\n```python\nfrom taped import LiveWf\n\n&#35; you can specify as an integer, a string, or a (int, string) tuple. \n&#35;Bare in mind that both integer index (and sometimes names) may change from one session to another.\ninput_device_index = 'MacBook Pro Microphone' \n\n&#35;note how we use a context manager here!\nwith LiveWf(input_device_index) as live_wf:  # could have also used integer index 0, or both index and name!\n    # now live_wf acts (sort of) like a numpy array of live audio waveform\n    # skip the first 10000, samples, then and get 110000 samples after that, taking every other sample (i.e. downsampling)\n    chk = live_wf[10_000:110_000:2]  \n    \nlen(chk), type(chk)\n```\n\n\n\n    (22050, list)\n\n\n\n\n```python\nfrom taped import disp_wf\ndisp_wf(chk, sr=live_wf.sr)  # will sound faster than normal because (remember) we down-sampled.\n```\n\n\n    \n![image](https://user-images.githubusercontent.com/1906276/102552725-81a00a80-4076-11eb-9aba-2ecb8b71e36f.png)\n\n\n    \n\nNote, you can use `find_a_default_input_device_index` to find an input device index for you automatically. \nThat's what happens if you don't specify any inputs to `LiveWf()`. \nBut don't trust that it will work every time. It's behavior may change, but right now, it just looks for the first name with word `\"microphone\"` in the list of names, and if that's not found, the first containing `\"mic\"`.\n\n```python\nfrom taped import find_a_default_input_device_index\ninput_device_index = find_a_default_input_device_index()\n```\n\n## So Basically...\n\nGives you access to your microphone as an iterator of numerical samples.\n\n```pydocstring\n>>> from itertools import islice\n>>> from taped import LiveWf\n>>>\n>>> with LiveWf() as live_wf:\n...     first_sample = next(live_wf)  # get a sample\n...     second_sample = next(live_wf)  # get the next sample\n...     ten_samples = list(islice(live_wf, 7))  # get the next 7 samples, using itertools.islice\n...     a_3_6_slice = live_wf[3:6] # skip 3 samples and get 3 more (so up to 6), using [.] instead of islice\n...     downsampled = live_wf[0:10:2]  # take every other sample (i.e. down-sampling) using [.]\n>>> first_sample\n-323\n>>> second_sample\n-1022\n>>> ten_samples\n[-1343, -1547, -1687, -1651, -1623, -1511, -1449]\n>>> a_3_6_slice\n[-1323, -1322, -1274]\n>>> downsampled\n[-1263, -1272, -1220, -1192, -1168]\n```\n\nFrom there, the sky is the limit.\n\nFor instance...\n\n## Record and display audio from a microphone\n\n```python\nfrom taped import LiveWf, disp_wf\nfrom itertools import islice\n\ndef record_and_display_audio_from_microphone(n_samples=10000, sample_rate=22050):\n    with LiveWf(sr=sample_rate) as live_audio_stream:\n        wf = list(islice(live_audio_stream, n_samples))\n    return disp_wf(wf, sample_rate)\n\nrecord_and_display_audio_from_microphone()\n```\n\n![image](https://user-images.githubusercontent.com/1906276/101562916-289cec00-397d-11eb-8a40-d3a7345e40da.png)\n\n\n## Record and save audio from microphone\n\n```python\nfrom taped import LiveWf, disp_wf\nimport soundfile as sf  # pip install soundfile (or get your waveform_to_file function elsewhere)\n\ndef record_and_save_audio_from_microphone(filepath='tmp.wav', n_samples=10000, sample_rate=22050):\n    with LiveWf(0, sr=sample_rate) as live_audio_stream:\n        sf.write(filepath, \n                 data=list(islice(live_audio_stream, n_samples)), \n                 samplerate=sample_rate)\n\nrecord_and_save_audio_from_microphone('myexample.wav')\n\n# now read that file and display the sound\nwf, sr = sf.read('myexample.wav')\ndisp_wf(wf, sr)\n```\n\n![image](https://user-images.githubusercontent.com/1906276/101563806-d1981680-397e-11eb-9f1e-fc35b9b1cc4a.png)\n\n\n# A few more details\n\n`taped` uses a layered approach. \n\nThe `LiveWf` class you know (and already love) is actually the forth of the following stack of layers:\n\n- `BufferItems`: Provides the items from an audio sensor (also called a mic!); namely the bytes, but also other useful information, such as timestamps (system and sensor).\n- `ByteChunks`: Provides chunks of bytes from the mic. Essentially, extracts the bytes that the `BufferItems` items give you.\n- `WfChunks`: Provides numerical waveform chunks; by default in the format of `numpy.array` `int16` integers. \n- `LiveWf`: Gives you access to a fixed size buffer of the recent history of audio, in waveform format. Essentially, the `WfChunks` chained together in one continuous (but live/dynamic) array.\n\nDefining a waveform \"displayer\": if you want to display audio as a spectrogram, and actually play it (in a jupyter notebook), `pip install hum`. \n\n\n```python\nfrom contextlib import suppress\n\ntry:\n    from hum import disp_wf\nexcept ModuleNotFoundError:\n    import matplotlib.pylab as plt\n    disp_wf = plt.plot\n```\n\nLet's get an `input_device_index` to use throughout our demo.\n\n\n```python\nfrom taped import find_a_default_input_device_index\n\ninput_device_index = find_a_default_input_device_index()\n```\n\n## BufferItems\n\n`BufferItems` gives you a stream of 5-tuples containing sensor bytes, along with other information (timestamp etc.) \nthat `stream2py`, which wraps `PyAudio` (itself a wrapper of `PortAudio`) gives us. \n\nIf you're okay with the high level interfaces that `taped` offers, you may want to skip this `BufferItems` section.\nBut if you want (or need) to peep under (the first level of) the hood, here's what `BufferItems` is about.\n\n\n```python\nfrom taped.base import BufferItems\n\nwith BufferItems(input_device_index) as buffer_items:\n    item = next(buffer_items)\n\nprint(f\"item is a {type(item).__name__} (a namedtuple) with {len(item)} elements\")\nfor i, x in enumerate(item):\n    if isinstance(x, bytes):\n        print(f\"{i}: {item._fields[i]}: {len(x)} bytes: {x[:4]}...\")\n    else:\n        print(f\"{i}: {item._fields[i]}: {x}\")\n```\n\n    item is a BufferItemOutput (a namedtuple) with 5 elements\n    0: timestamp: 1608336556178995\n    1: bytes: 8192 bytes: b'\\t\\x00\\x18\\x00'...\n    2: frame_count: 4096\n    3: time_info: {'input_buffer_adc_time': 135079.42883468725, 'current_time': 135079.60533177, 'output_buffer_dac_time': 0.0}\n    4: status_flags: 0\n\n\n```python\nfrom time import sleep\nfrom collections import namedtuple\nfrom pprint import pprint\n\nwith BufferItems(input_device_index) as buffer_items:\n    it = iter(buffer_items)  # note the iter(buffer_items) instead of just buffer_items!\n    item = next(it)\n    sleep(2)\n    item2 = next(it)\n    \ndata_names = ['timestamp', 'bytes', 'frame_count', 'time_info', 'status_flags']\n\ndef display_buffer_item(item):\n    d = dict(zip(item._fields, item))\n    d['bytes'] = f\"{len(d['bytes'])} bytes: {d['bytes'][:4]}...\"\n    pprint(d)\n        \nprint('\\nitem') \ndisplay_buffer_item(item)\nprint('\\nitem2') \ndisplay_buffer_item(item2)\n```\n\n    \n    item\n    {'bytes': \"8192 bytes: b'\\\\x05\\\\x00\\\\x0c\\\\x00'...\",\n     'frame_count': 4096,\n     'status_flags': 0,\n     'time_info': {'current_time': 84806.95996904,\n                   'input_buffer_adc_time': 84806.78105158823,\n                   'output_buffer_dac_time': 0.0},\n     'timestamp': 1608236216529112}\n    \n    item2\n    {'bytes': \"8192 bytes: b'`\\\\xffR\\\\xff'...\",\n     'frame_count': 4096,\n     'status_flags': 0,\n     'time_info': {'current_time': 84807.04517719701,\n                   'input_buffer_adc_time': 84806.87393594165,\n                   'output_buffer_dac_time': 0.0},\n     'timestamp': 1608236216621991}\n\nSee that the three kind of timestamps that we get are different, \nbut all around `4096 / 44100 = 0.09287...`, the chunk size, in seconds.\n \n```python\nassert buffer_items.chk_size == 4096\nassert buffer_items.sr == 44100\nprint(\"differences...\")\ndict(\n    timestamp=item2.timestamp - item.timestamp, \n    input_buffer_adc_time = item2.time_info['input_buffer_adc_time'] - item.time_info['input_buffer_adc_time'], \n    current_time = item2.time_info['current_time'] - item.time_info['current_time'],\n)\n\n```\n\n    differences...\n\n\n\n\n    {'timestamp': 92879,\n     'input_buffer_adc_time': 0.09288435342023149,\n     'current_time': 0.0852081570046721}\n\nSee that we have different bytes!\n\n```python\nassert item.bytes != item2.bytes\n```\n\nBut add we used `it = buffer_items` directly instead of `it = iter(buffer_items)`, we would have gotten the same bytes.\n\nIndeed, using `iter(...)` ensures that we \"move forward\" in our iteration, where as doing a `next(buffer_items)` \nwould just give us the first chunk of the queue (that is, the oldest one). \nUntil the buffer is full, that oldest chunk is always the same first one. \nOnce the buffer is full, the `next(buffer_items)` will give us something different (at the rate of incoming chunks).\n\nWe can see this by making the buffer size (`stream_buffer_size_s`, whose default is 60 seconds) smaller. \nStudy the following code to see what's happening.\n\n```python\nimport time\n\ndef take_a_nap(nap_time):\n    print(f\"After a {nap_time} seconds nap...\")\n    time.sleep(nap_time)\n    \nd = dict()\nwith BufferItems(stream_buffer_size_s=2) as s:\n    d[0] = next(s)\n    \n    take_a_nap(1)\n    d[1] = next(s)\n    print(f\"... chunk timestamp is {(d[1].timestamp - d[0].timestamp) / 1e6} later\\n\")\n    \n    take_a_nap(3)\n    d[2] = next(s)\n    print(f\"... chunk timestamp is {(d[2].timestamp - d[1].timestamp) / 1e6} later\\n\")\n\n    take_a_nap(1)\n    d[3] = next(s)\n    print(f\"... chunk timestamp is {(d[3].timestamp - d[2].timestamp) / 1e6} later\\n\")\n```\n\n    Found MacBook Pro Microphone. Will use it as the default input device. It's index is 1\n    After a 1 seconds nap...\n    ... chunk timestamp is 0.0 later\n    \n    After a 3 seconds nap...\n    ... chunk timestamp is 2.229115 later\n    \n    After a 1 seconds nap...\n    ... chunk timestamp is 1.021678 later\n\n## ByteChunks\n\nIf you just want the bytes of the sensor, use this.\n\n\n```python\nfrom taped.base import ByteChunks\n\n\nwith ByteChunks(input_device_index) as byte_chks:\n    byte_chk = next(byte_chks)\n\n    \nassert isinstance(byte_chk, bytes)  # now we're just getting bytes\nlen(byte_chk)\n```\n\n\n\n\n    8192\n\n\n\n## WfChunks\n\nIf you want to consume your waveform chunks numpy arrays instead of bytes, use this.\n\n\n```python\nfrom taped.base import WfChunks\n\n\nwith WfChunks(input_device_index) as wf_chks:\n    chk = next(wf_chks)\n\n    \nassert isinstance(chk, np.ndarray)  # it's a numpy array\nassert isinstance(chk[0], np.int16) # ... of int16 integers\nlen(chk)\n```\n\n\n\n\n    4096\n\n\n\n## LiveWf\n\nAnd finally, if you'd like to imagine you had a single waveform, as an array (populated continuously with live data from your sensor), use this.\n\n\n```python\nfrom taped.base import LiveWf\nfrom itertools import islice\n\nwith LiveWf(input_device_index) as live_wf:\n    sample = next(live_wf)  # get one sample\n    chk = list(islice(live_wf, 0, 20000))  # get 20K samples\n    \nassert isinstance(sample, np.int16)  # a sample is an int16\nassert len(chk) == 20000  # chk is an array of 20K samples\n```\n\n\n```python\ndisp_wf(chk)\n```\n\n\n\n    \n![image](https://user-images.githubusercontent.com/1906276/102552830-aeecb880-4076-11eb-8b3e-f02d2b4d42b5.png)\n\n    \n\n\nYou can also access the `list(islice(..., start, stop, step))` samples through the `[...]` brackets interface.\n\n\n```python\nwith LiveWf(input_device_index) as live_wf:\n    chk = live_wf[10000:54100]  # skip the first 10000, and get 44100 samples after that\n    \ndisp_wf(chk)\n```\n\n\n    \n![image](https://user-images.githubusercontent.com/1906276/102552877-c461e280-4076-11eb-86fb-4e5ba338edcb.png)\n\n\n\n```python\nwith LiveWf(input_device_index) as live_wf:\n    chk = live_wf[0:44100:2]  # get samples 0 through 44100, but only every other sample (so, downsampling)\n    \ndisp_wf(chk)  # if you listen to it with the sample sample rate, it will sound accelerated!\n```\n\n\n![image](https://user-images.githubusercontent.com/1906276/102552941-e6f3fb80-4076-11eb-81ab-d079a1f74a4b.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/otosense/taped",
    "keywords": "audio,microphone,sound,stream2py",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "taped",
    "package_url": "https://pypi.org/project/taped/",
    "platform": "any",
    "project_url": "https://pypi.org/project/taped/",
    "project_urls": {
      "Homepage": "https://github.com/otosense/taped"
    },
    "release_url": "https://pypi.org/project/taped/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python's serene audio accessor",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15538243,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e24422727b46dc568ab3697cf99880f5d7f78cc686727b63b2de1bd6aba6b8a3",
          "md5": "a53e7d9ef0848593324fd347d13e8958",
          "sha256": "72a57fe5fb0ee4d682442243692ed2ff19ba72b49f551084b2495e9c192e192b"
        },
        "downloads": -1,
        "filename": "taped-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a53e7d9ef0848593324fd347d13e8958",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14180,
        "upload_time": "2020-12-09T02:00:18",
        "upload_time_iso_8601": "2020-12-09T02:00:18.334504Z",
        "url": "https://files.pythonhosted.org/packages/e2/44/22727b46dc568ab3697cf99880f5d7f78cc686727b63b2de1bd6aba6b8a3/taped-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdbfe6cbbe882e2fe2af4e8b1df40ea242596279060d055251dc164991ff8bb9",
          "md5": "aba0a65b3f924b1eeb8dc5cb45af5286",
          "sha256": "60eb7a9c94655706c44df4254feab49ec9fcc662496539ada609e99973e93a40"
        },
        "downloads": -1,
        "filename": "taped-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aba0a65b3f924b1eeb8dc5cb45af5286",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11679,
        "upload_time": "2020-12-09T02:00:19",
        "upload_time_iso_8601": "2020-12-09T02:00:19.775275Z",
        "url": "https://files.pythonhosted.org/packages/bd/bf/e6cbbe882e2fe2af4e8b1df40ea242596279060d055251dc164991ff8bb9/taped-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "914b56288c57c13aabcdb2858fee8807defd773791008562d3d586b4df9bb102",
          "md5": "daed4d00e9a55e9e0254a8bea20ef70f",
          "sha256": "aede19d2313f56f48147a0e74b4972931197d4b08cdb64da6dfcb40e44b59f2f"
        },
        "downloads": -1,
        "filename": "taped-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "daed4d00e9a55e9e0254a8bea20ef70f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18012,
        "upload_time": "2020-12-10T00:09:09",
        "upload_time_iso_8601": "2020-12-10T00:09:09.640664Z",
        "url": "https://files.pythonhosted.org/packages/91/4b/56288c57c13aabcdb2858fee8807defd773791008562d3d586b4df9bb102/taped-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ded5f6b3b1a054e8923ca8f8ae66fd30b2e0e7678b30a3f28278c63ee653f31",
          "md5": "3aeebbb7af6b677d629a3a9e96b880f8",
          "sha256": "c9d2b76f5152ba8e157a6416ba811432299f4157892fa9bcde247be42920ddbd"
        },
        "downloads": -1,
        "filename": "taped-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3aeebbb7af6b677d629a3a9e96b880f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12190,
        "upload_time": "2020-12-10T00:09:10",
        "upload_time_iso_8601": "2020-12-10T00:09:10.955521Z",
        "url": "https://files.pythonhosted.org/packages/4d/ed/5f6b3b1a054e8923ca8f8ae66fd30b2e0e7678b30a3f28278c63ee653f31/taped-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57bcf0608b425e2fe0e4cf9913e79631823ad6bf54cf4a2e1a6dc462b2d58c22",
          "md5": "9cb2e2379e65e5adbb55e8aabf0846b1",
          "sha256": "050284638c109a4b44e5998b38a3d621c7d8565c3b60b838711ea9a27a011b48"
        },
        "downloads": -1,
        "filename": "taped-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cb2e2379e65e5adbb55e8aabf0846b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25311,
        "upload_time": "2020-12-17T23:00:13",
        "upload_time_iso_8601": "2020-12-17T23:00:13.261754Z",
        "url": "https://files.pythonhosted.org/packages/57/bc/f0608b425e2fe0e4cf9913e79631823ad6bf54cf4a2e1a6dc462b2d58c22/taped-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "842186bafe7f31c8d7c6857aa6d65c6eaf8472297fa6bed4a854f476d4a0914f",
          "md5": "73b3ae36c34c0256b68807d34122fc2a",
          "sha256": "4f4eb9ad1881ed009b6d120baf80ca9a65f2e713298f627a9003fbedba1a80d1"
        },
        "downloads": -1,
        "filename": "taped-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "73b3ae36c34c0256b68807d34122fc2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20235,
        "upload_time": "2020-12-17T23:00:14",
        "upload_time_iso_8601": "2020-12-17T23:00:14.804620Z",
        "url": "https://files.pythonhosted.org/packages/84/21/86bafe7f31c8d7c6857aa6d65c6eaf8472297fa6bed4a854f476d4a0914f/taped-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49c6f259c5aac5c4a22c5ad469b1743048e4d544dd2517ce0f29697d9498fe87",
          "md5": "a3ebe7a12164a800484356a668a7fa47",
          "sha256": "cfdbd02eda83db768664f0b4709037b197eb63532449b6b06dd702c6705aafc4"
        },
        "downloads": -1,
        "filename": "taped-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3ebe7a12164a800484356a668a7fa47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25487,
        "upload_time": "2020-12-17T23:23:38",
        "upload_time_iso_8601": "2020-12-17T23:23:38.343969Z",
        "url": "https://files.pythonhosted.org/packages/49/c6/f259c5aac5c4a22c5ad469b1743048e4d544dd2517ce0f29697d9498fe87/taped-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24ff5a95ed4c6b25cda7286ab5f22a17d8ef1d564ed00ebf08615c11abea3710",
          "md5": "426e78eadaeefea52f36a07a5625a1c6",
          "sha256": "922dbc1b689f412febf51de5e163a5f73e1aa690d78a91f21df16a93d7b475de"
        },
        "downloads": -1,
        "filename": "taped-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "426e78eadaeefea52f36a07a5625a1c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20522,
        "upload_time": "2020-12-17T23:23:39",
        "upload_time_iso_8601": "2020-12-17T23:23:39.778047Z",
        "url": "https://files.pythonhosted.org/packages/24/ff/5a95ed4c6b25cda7286ab5f22a17d8ef1d564ed00ebf08615c11abea3710/taped-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f93c62e3f8ef08f1d24c60036110714dfa9751050a38e256d6065d9299e2aef",
          "md5": "b2e81a46a56c835edc9dbf65349ff1a0",
          "sha256": "af7dd7299acb121273168ed5113e6a92d03868509f368f4b45de093aaeccd7ab"
        },
        "downloads": -1,
        "filename": "taped-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2e81a46a56c835edc9dbf65349ff1a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24458,
        "upload_time": "2020-12-18T00:03:51",
        "upload_time_iso_8601": "2020-12-18T00:03:51.313116Z",
        "url": "https://files.pythonhosted.org/packages/8f/93/c62e3f8ef08f1d24c60036110714dfa9751050a38e256d6065d9299e2aef/taped-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5176bdeafdbf0edc47687b18deae166b0e33244b1da592eb301f9b45d4bedc6d",
          "md5": "da8c3f75d13c5cb0e75cce6cfd01ee28",
          "sha256": "e29a815b11b23c46540040a2fac2217062801b1397c1fed72475b4d5d91217f6"
        },
        "downloads": -1,
        "filename": "taped-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "da8c3f75d13c5cb0e75cce6cfd01ee28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20487,
        "upload_time": "2020-12-18T00:03:53",
        "upload_time_iso_8601": "2020-12-18T00:03:53.039597Z",
        "url": "https://files.pythonhosted.org/packages/51/76/bdeafdbf0edc47687b18deae166b0e33244b1da592eb301f9b45d4bedc6d/taped-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68471bda040e980241537170abda3a2242c530ef83e96b693478a50ba9489738",
          "md5": "96a704ea377191e0dd0aa88167e4ad2c",
          "sha256": "ea1d07322d7e4946e943665bece48eb449236b578ee1853fba3cc81703616d9b"
        },
        "downloads": -1,
        "filename": "taped-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96a704ea377191e0dd0aa88167e4ad2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25238,
        "upload_time": "2020-12-19T00:14:07",
        "upload_time_iso_8601": "2020-12-19T00:14:07.256349Z",
        "url": "https://files.pythonhosted.org/packages/68/47/1bda040e980241537170abda3a2242c530ef83e96b693478a50ba9489738/taped-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e071339b330745abac78148ccdc414d758c648dd76aa8eb5f74706b020cb87",
          "md5": "bd93a64e0dae8c198e5119f546e1317b",
          "sha256": "809b5268f7fbf61d7a1af00b89028e98a93ef71f0bd36388d8237c4ebfa64850"
        },
        "downloads": -1,
        "filename": "taped-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "bd93a64e0dae8c198e5119f546e1317b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22002,
        "upload_time": "2020-12-19T00:14:09",
        "upload_time_iso_8601": "2020-12-19T00:14:09.043225Z",
        "url": "https://files.pythonhosted.org/packages/38/e0/71339b330745abac78148ccdc414d758c648dd76aa8eb5f74706b020cb87/taped-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ac5248e268f985067c68027d722a41d0393c23b92b63ea66b7a0d729e180141",
          "md5": "8f9af63c92a2e5bde6719b4077c2cc44",
          "sha256": "6803902caf6902aa234452f9777e4e6f4fdc57e0df65ed9db6a94777af94ac0b"
        },
        "downloads": -1,
        "filename": "taped-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f9af63c92a2e5bde6719b4077c2cc44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26625,
        "upload_time": "2021-02-12T23:29:03",
        "upload_time_iso_8601": "2021-02-12T23:29:03.674292Z",
        "url": "https://files.pythonhosted.org/packages/4a/c5/248e268f985067c68027d722a41d0393c23b92b63ea66b7a0d729e180141/taped-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79921eeb78bb5a626ad13ef263a4500d73d08bd9b790d910872b2037d374385f",
          "md5": "3ceed79249d3461e48ab16a2220cc471",
          "sha256": "19e02b2e67d1b516a4776153161d28bc999475736a8a767c50bf14082cbc0c5c"
        },
        "downloads": -1,
        "filename": "taped-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3ceed79249d3461e48ab16a2220cc471",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23216,
        "upload_time": "2021-02-12T23:29:05",
        "upload_time_iso_8601": "2021-02-12T23:29:05.317248Z",
        "url": "https://files.pythonhosted.org/packages/79/92/1eeb78bb5a626ad13ef263a4500d73d08bd9b790d910872b2037d374385f/taped-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed463af8579901f23c31973b4327548e3edad659a9ab7c41f04a25970c6996fd",
          "md5": "fd11dcf03f9a94ae8638f291898e3f03",
          "sha256": "950b82f35f3d171f2101be7a41c74790f9cc44354d7e39fc264e6cb62a36fdab"
        },
        "downloads": -1,
        "filename": "taped-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd11dcf03f9a94ae8638f291898e3f03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27670,
        "upload_time": "2021-10-19T16:20:44",
        "upload_time_iso_8601": "2021-10-19T16:20:44.459243Z",
        "url": "https://files.pythonhosted.org/packages/ed/46/3af8579901f23c31973b4327548e3edad659a9ab7c41f04a25970c6996fd/taped-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f793b405ada6abd481938e24747fef6145073aa26d8dc25173b3f4d2ab95ea73",
          "md5": "ad2aa8582f9a737d64d0a08e58ec95f5",
          "sha256": "d8798e1e4b2fd425e5e4fef4a4ec68221015f40d053a6184a1c5fb9db2bcbe74"
        },
        "downloads": -1,
        "filename": "taped-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad2aa8582f9a737d64d0a08e58ec95f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 211954,
        "upload_time": "2021-11-16T22:10:10",
        "upload_time_iso_8601": "2021-11-16T22:10:10.023596Z",
        "url": "https://files.pythonhosted.org/packages/f7/93/b405ada6abd481938e24747fef6145073aa26d8dc25173b3f4d2ab95ea73/taped-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b4a348a7a918c00e88d61496da68b58d02c0ec8bbc3695abcef47155fdf60c4",
          "md5": "a4f586419b9058e4255824a89d1c8a8d",
          "sha256": "d090ae68e47f710a5623fc9fdbfa2baba311c6868a02a2c1d8b4a0c53e2b565d"
        },
        "downloads": -1,
        "filename": "taped-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a4f586419b9058e4255824a89d1c8a8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 211896,
        "upload_time": "2021-12-02T23:01:45",
        "upload_time_iso_8601": "2021-12-02T23:01:45.727280Z",
        "url": "https://files.pythonhosted.org/packages/8b/4a/348a7a918c00e88d61496da68b58d02c0ec8bbc3695abcef47155fdf60c4/taped-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06be4b5f478766933f39ac556d781fcf3f7022bb5f0b08d954ed4ba386dd1149",
          "md5": "692e0d55cd25f0ea8100882996781f7e",
          "sha256": "b5aad4b1e9a8ebbabcc05d06d860e43deefb1888bdaea84add8e1e0f6753df13"
        },
        "downloads": -1,
        "filename": "taped-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "692e0d55cd25f0ea8100882996781f7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27707,
        "upload_time": "2022-10-20T17:11:46",
        "upload_time_iso_8601": "2022-10-20T17:11:46.953751Z",
        "url": "https://files.pythonhosted.org/packages/06/be/4b5f478766933f39ac556d781fcf3f7022bb5f0b08d954ed4ba386dd1149/taped-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b16b53c181b01d2b3f8fea665a2f588d04a06b2da1235673ddf3567436e3cfd",
          "md5": "efe406d9f56c7cfdf56ab2351def3b70",
          "sha256": "4755a12a0cbcecfe46d795055ed9118b202102af69bdbf834d132985c1725899"
        },
        "downloads": -1,
        "filename": "taped-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "efe406d9f56c7cfdf56ab2351def3b70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27698,
        "upload_time": "2022-10-26T14:24:10",
        "upload_time_iso_8601": "2022-10-26T14:24:10.848231Z",
        "url": "https://files.pythonhosted.org/packages/6b/16/b53c181b01d2b3f8fea665a2f588d04a06b2da1235673ddf3567436e3cfd/taped-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b16b53c181b01d2b3f8fea665a2f588d04a06b2da1235673ddf3567436e3cfd",
        "md5": "efe406d9f56c7cfdf56ab2351def3b70",
        "sha256": "4755a12a0cbcecfe46d795055ed9118b202102af69bdbf834d132985c1725899"
      },
      "downloads": -1,
      "filename": "taped-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "efe406d9f56c7cfdf56ab2351def3b70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27698,
      "upload_time": "2022-10-26T14:24:10",
      "upload_time_iso_8601": "2022-10-26T14:24:10.848231Z",
      "url": "https://files.pythonhosted.org/packages/6b/16/b53c181b01d2b3f8fea665a2f588d04a06b2da1235673ddf3567436e3cfd/taped-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}