{
  "info": {
    "author": "Leonid Evstigneev",
    "author_email": "mail@leonidevstigneev.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Widgets for django\n\n## Introduction\nWidget is template linked with styles and scripts. Application gives you the ability collect media from \ndifferent widgets and places it in the template wherever you want.\n\n## INSTALLATION\nYou can get Django Widgets Engine by using pip::\n\n    $ pip install django-widgets-engine\n\n## Initialization\nAdd to your Django settings\n```python\nINSTALLED_APPS = [\n    #...\n    'django_widgets',\n    #...\n]\n\nMIDDLEWARE = [\n    #...\n    'django_widgets.middleware.WidgetsMiddleware',\n    #...\n]\n```\n\nYou can also build tag set into templates\n```python\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.jinja2.Jinja2',\n        'DIRS': [os.path.join(BASE_DIR, 'jinja2')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'environment': 'jinja2.Environment',\n            'extensions': ['django_widgets.jinja2tags.widget'],\n            # ...\n        },\n    },\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            # ...\n            'builtins': [\n                'django_widgets.templatetags.widget'\n            ],\n        },\n    },\n]\n```\n\n## Class Widget\n\n```python\nimport django_widgets\n\n\nclass WidgetFoo(django_widgets.Widget):\n    root = '...'\n    # default folder with templates\n    template_name = 'template.html'\n    # path to template\n\n    class Media:\n        extend = False  # include media from parent class\n        js = {  # tag <script> for external scripts\n            'async': (  # download method (async, defer). Maybe empty string\n                'https://absolute/path/to/script.js', # value of attribute src\n            ) # tuple\n        }\n        script = {  # tag <script> for inline scripts\n            'text/javascript': {  # value of attribute type\n                'script_id': (  # value of attribute id\n                    '/path/to/script_template.html',\n                )  # tuple\n            }\n        }\n        css = {  # tag <link>\n            'all': (  # value of attribute media\n                'http://abolute/path/to/style.css', # value of attribute href\n            ) # tuple\n        }\n        style = {  # tag <style>\n            'all': (  # value of attribute media\n                '/path/to/style_template.css',\n            )  # tuple                \n        }   \n```\n\n## Mixin\n\nWhen you need use one widget inside other you can use MultiWidgetMixin.\n\n```python\nimport django_widgets\n\n\nclass MultiWidget(django_widgets.MultiWidgetMixin, django_widgets.Widget):\n    template_name = 'multiwidget.html'\n\n    def _init_request(self, request):\n        request = super()._init_request(request)\n        self.add_widget(request, 'widget_name', WidgetFoo())\n        return request\n```\n\n## Using\n\nYou must use add_widget before using tag widget in template\n\n```python\nfrom django_widgets.api import add_widget\nfrom django.views.generic import TemplateView\nfrom .widgets import WidgetFoo\n\n\nclass MyView(TemplateView):\n    template_name = \"my_view.html\"\n\n    def setup(self, request, *args, **kwargs):\n        super().setup(request, *args, **kwargs)\n        add_widget(request, 'widget_name', WidgetFoo()) \n\n```\n\n## Tags\nIn Django Template before use you need load tag set\n```djangotemplate\n{% load widget %}\n```\n\n### widget\nYou can call a widget in a template with data and attributes\n\n```djangotemplate\n{% widget 'widget_name' data=widget_data attrs=widget_attr_dict attr-name=attr_value %}\n```\n\n### widgetattrs\nUse this tag in widget template. It mixes attributes from template, call widget and widget declaration \n```djangotemplate\n{% widgetattrs %}\n{% widgetattrs attrs=widget_attr_dict %}\n{% widgetattrs attr-name=attr_value %}\n```\n\n### widgetmedia\n\n```djangotemplate\n{% widgetmedia %}  {# output all media for all widgets #}\n{% widgetmedia 'js' %} {# print <script src=\"...\">  for all widgets #}\n{% widgetmedia 'css' %} {# print <link> for all widgets #}\n{% widgetmedia 'style' %} {# print <style> for all widgets #}\n{% widgetmedia 'script' name='widget_name'  %} {# print <script> for widjet with specified name #}\n{% widgetmedia name='widget_name' %}  {# output all media for widjet with specified name#}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LeonLegion/django-widgets",
    "keywords": "django widget template jinja2",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-widgets-engine",
    "package_url": "https://pypi.org/project/django-widgets-engine/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-widgets-engine/",
    "project_urls": {
      "Homepage": "https://github.com/LeonLegion/django-widgets"
    },
    "release_url": "https://pypi.org/project/django-widgets-engine/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Custom widgets for Django templates",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8190061,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d9b091fec6e681d09e939c4de6db429255be320b867c1f0acdf390cd9e3a12b",
          "md5": "a221f11dce78fcf79773e2977e69f93b",
          "sha256": "a38a64db1003aa51f91d50cf7ddf34927b7bcddc68464a90d7fd20deab179e17"
        },
        "downloads": -1,
        "filename": "django-widgets-engine-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a221f11dce78fcf79773e2977e69f93b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26297,
        "upload_time": "2020-09-15T10:19:38",
        "upload_time_iso_8601": "2020-09-15T10:19:38.899141Z",
        "url": "https://files.pythonhosted.org/packages/8d/9b/091fec6e681d09e939c4de6db429255be320b867c1f0acdf390cd9e3a12b/django-widgets-engine-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d9b091fec6e681d09e939c4de6db429255be320b867c1f0acdf390cd9e3a12b",
        "md5": "a221f11dce78fcf79773e2977e69f93b",
        "sha256": "a38a64db1003aa51f91d50cf7ddf34927b7bcddc68464a90d7fd20deab179e17"
      },
      "downloads": -1,
      "filename": "django-widgets-engine-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a221f11dce78fcf79773e2977e69f93b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26297,
      "upload_time": "2020-09-15T10:19:38",
      "upload_time_iso_8601": "2020-09-15T10:19:38.899141Z",
      "url": "https://files.pythonhosted.org/packages/8d/9b/091fec6e681d09e939c4de6db429255be320b867c1f0acdf390cd9e3a12b/django-widgets-engine-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}