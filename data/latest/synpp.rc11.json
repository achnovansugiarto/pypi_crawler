{
  "info": {
    "author": "Sebastian HÃ¶rl",
    "author_email": "hoerl.sebastian@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Synthetic Population Pipeline (synpp)\n\n[![Build Status](https://travis-ci.org/eqasim-org/synpp.svg?branch=develop)](https://travis-ci.org/eqasim-org/synpp)\n\nThe *synpp* module is a tool to chain different stages of a (population)\nsynthesis pipeline. This means that self-contained pieces of code can be\nrun, which are dependent on the outputs of other self-contained pieces\nof code. Those pieces, or steps, are called *stages* in this module.\n\nThe following will describe the components of the pipeline and how it can\nbe set up and configured. Scroll to the bottom to find a full example of such\na pipeline which automatically downloads NYC taxi data sets, merges them together\nand calculates the average vehicle occupancy during a predefined period.\n\n## Installation\n\nThe `synpp` package releases can be installed via `pip`:\n\n```sh\npip install synpp\n```\n\nCurrently, version `1.5.1` is the active release version. Alternatively, you can\nclone the `develop` branch of this repository to use the development version.\nIt can be installed by calling\n\n```\npip install .\n```\n\ninside of the repository directoy.\n\n## Concepts\n\nA typical chain of stages could, for instance, be: **(C1)** load raw census data,\n**(C2)** clean raw census data *(dependent on C1)*, **(H1)** load raw household travel survey data,\n**(H2)** clean survey data *(dependent on C2)*, **(P1)** merge census *(C1)* and survey *(H2)* data,\n**(P2)** generate a synthetic population from merged data *(P1)*.\n\nIn *synpp* each *stage* is defined by:\n\n* A *descriptor*, which contains the stage logic.\n* *Configuration options* that parameterize each *stage*.\n\n### Defining a descriptor\n\nA descriptor can be defined in its compact form or in its full form.\nBoth work in the same way and can be used interchangeably in most cases.\n\nIn this readme the full form is preferred to explain each of `synpp`'s feature as it is more expressive,\nbut towards the end a closer look at the compact form is also provided.\n\nA descriptor in its full form looks like:  \n\n```python\ndef configure(context):\n  pass\n\ndef execute(context):\n  pass\n\ndef validate(context):\n  pass\n```\n\nThese functions are provided in a Python object, such as a module,\na class or a class's instance.\n`synpp` expects either a String containing the path to the object,\nsuch as \"pkg.subpkg.module\", or the instantiated object directly.  \n\nIn its compact form, the stage is defined as a function, and looks like:\n\n```python\n@synpp.stage\ndef stage_to_run():\n  pass\n```\n\nWhere the `@stage` decorator informs `synpp` that it should handle\nthis function as a stage and how it should do it.\n\n### Configuration and Parameterization\n\nWhenever the pipeline explores a stage, *configure* is called first. Note that\nin the example above we use a Python module, but the same procedure would work\nanalogously with a class. In *configure* one can tell the pipeline what the *stage*\nexpects in terms of other input *stages* and in terms of\n*configuration options*:\n\n```python\ndef configure(context):\n  # Expect an output directory\n  value = context.config(\"output_path\")\n\n  # Expect a random seed\n  value = context.config(\"random_seed\")\n\n  # Expect a certain stage (no return value)\n  context.stage(\"my.pipeline.raw_data\")\n```\n\nWe could add this stage (let's call it `my.pipeline.raw_data`)\nas a dependency to another one. However, as we did not define a default\nvalue with the `config` method, we need to explicitly set one, like so:\n\n```python\ndef configure(context):\n  context.stage(\"my.pipeline.raw_data\", { \"random_seed\": 1234 })\n```\n\nNote that it is even possible to build recursive chains of stages using only\none stage definition:\n\n```python\ndef configure(context):\n  i = context.config(\"i\")\n\n  if i > 0:\n    context.stage(\"this.stage\", { \"i\": i - 1 })\n```\n\nConfiguration options can also be defined globally in the pipeline. In case\nno default value is given for an option in `configure` and in case that no\nspecific value is passed to the stage, a global configuration that is specific\nto the pipeline will be used to look up the value.\n\n### Execution\n\nThe requested configuration values and stages are afterwards available\nto the `execute` step of a *stage*. There those values can be used to do the\n\"heavy work\" of the stage. As the `configure` step already defined what kind\nof values to expect, we can be sure that those values and dependencies are\npresent once `execute` is called.\n\n```python\ndef execute(context):\n  # Load some data from another stage\n  df = context.stage(\"my.pipeline.census.raw\")\n\n  df = df.dropna()\n  df[\"age\"] = df[\"age\"].astype(int)\n\n  # We could access some values if we wanted\n  value = context.config(\"...\")\n\n  return df\n```\n\nNote that the `execute` step returns a value. This value will be *pickled* (see\n*pickle* package of Python) and cached on the hard drive. This means that whenever\nthe output of this stage is requested by another stage, it doesn't need to be\nrun again. The pipeline can simply load the cached result from hard drive.\n\nIf one has a very complex pipeline with many stages this means that changes in\none stage will likely not lead to a situation where one needs to re-run the\nwhole pipeline, but only a fraction. The *synpp* framework has intelligent\nexplorations algorithms included which figure out automatically, which\n*stages* need to be re-run.\n\n### Running a pipeline\n\nA pipeline can be started using the `synpp.run` method. A typical run would\nlook like this:\n\n```python\nconfig = { \"random_seed\": 1234 }\nworking_directory = \"~/pipeline/cache\"\n\nsynpp.run([\n    { \"descriptor\": \"my.pipeline.final_population\" },\n    { \"descriptor\": \"my.pipeline.paper_analysis\", \"config\": { \"font_size\": 12 } }\n], config = config, working_directory = working_directory)\n```\n\nHere we call the *stage* defined by the module `my.pipeline.final_population`\nwhich should be available in the Python path. And we also want to run the\n`my.pipeline.paper_analysis` path with a font size parameter of `12`. Note that\nin both cases we could also have based the bare Python module objects instead\nof strings.\n\nThe pipeline will now figure out how to run those *stages*. Probably they have\ndependencies and the analysis *stage* may even depend on the other one. Therefore,\n*synpp* explores the tree of dependencies as follows:\n\n* Consider the requested stages (two in this case)\n* Step by step, go through the dependencies of those stages\n* Then again, go through the dependencies of all added stages, and so on\n\nBy that the pipeline traverses the whole tree of dependencies as they are defined\nby the `configure` steps of all stages. At the same time it collects information\nabout which configuration options and parameters are required by each stage. Note\nthat a stage can occur twice in this dependency tree if it has different\nparameters.\n\nAfter constructing a tree of *stages*, *synpp* devalidates some of them according\nto the following scheme. A *stage* is devalidated if ...\n\n- ... it is requested by the `run` call (and `rerun_required` is set to `True`, the default)\n- ... it is new (no meta data from a previous call is present)\n- ... the code of the stage has changed (verified with inspection)\n- ... if at least one of the requested configuration options has changed\n- ... if at least one dependency has been re-run since the last run of the stage\n- ... if list of dependencies has changed\n- ... if manual *validation* of the stage has failed (see below)\n- ... if any ascendant of a stage has been devalidated\n\nThis list of conditions makes sure that in almost any case of pipeline\nmodification we end up in a consistent situation (though we cannot prove it).\nThe only measure that may be important to enforce 'by convention' is to\n*always run a stage after the code has been modified*. Though even this can\nbe automated.\n\n### Validation\n\nEach *stage* has an additional `validate` step, which also receives the\nconfiguration options and the parameters. Its purpose is to return a hash\nvalue that represents the environment of the *stage*. To learn about the concept\nin general, search for \"md5 hash\", for instance. The idea is the following:\nAfter the `execute` step, the `validate` step is called and\n it will return a certain value. Next time the pipeline\nis resolved the `validate` step is called during devalidation, i.e. before\nthe stage is actually *executed*. If the return value of `validate` now differs\nfrom what it was before, the stage will be devalidated.\n\nThis is useful to check the integrity of data that is not generated inside of\nthe pipeline but comes from the outside, for instance:\n\n```python\ndef configure(context):\n  context.config(\"input_path\")\n\ndef validate(context):\n  path = context.config(\"input_path\")\n  filesize = get_filesize(path)\n\n  # If the file size has changed, the file must have changed,\n  # hence we want to run the stage again.\n  return filesize\n\ndef execute(context):\n  pass # Do something with the file\n```\n\n### Cache paths\n\nSometimes, results of a *stage* are not easily representable in Python. Even\nmore, stages may call Java or Shell scripts which simply generate an output\nfile. For these cases each stage has its own *cache path*. It can be accessed\nthrough the stage context:\n\n```python\ndef execute(context):\n  # In this case we write a file to the cache path of the current stage\n  with open(\"%s/myfile.txt\" % context.path()) as f:\n    f.write(\"my content\")\n\n  # In this case we read a file from the cache path of another stage\n  with open(\"%s/otherfile.txt\" % context.path(\"my.other.stage\")) as f:\n    value = f.read()\n```\n\nAs the example shows, we can also access cache paths of other stages. The pipeline\nwill make sure that you only have access to the cache path of stages that\nhave been defined as dependencies before. Note that the pipeline cannot enforce\nthat one stage is not corrupting the cache path of another stage. Therefore,\nby convention, a stage should never *write* to the cache path of another stage.\n\n### Aliases\n\nOnce a pipeline has been defined, the structure is relatively rigid as stages\nare referenced by their names. To provide more flexibility, it is possible to\ndefine aliases, for instance:\n\n```python\nsynpp.run(..., aliases = {\n  \"my.pipeline.final_population\": \"my.pipeline.final_population_replacement\"\n})\n```\n\nWhenever `my.pipeline.final_population` is requested, `my.pipeline.final_population_replacement`\nwill be used instead. Note that this allows to define entirely virtual stages that\nare referenced from other stages and which are only bound to a specific execution\nstage when running the pipeline (see example above).\n\n### Parallel execution\n\nThe *synpp* package comes with some simplified ways of parallelizing code,\nwhich are built on top of the `multiprocessing` package. To set up a parallel\nroutine, one can follow the following pattern:\n\n```python\ndef run_parallel(context, x):\n  return x**2 + context.data(\"y\")\n\ndef execute(context):\n  data = { \"y\": 5 }\n\n  with context.parallel(data) as parallel:\n    result = parallel.map(run_parallel, [1, 2, 3, 4, 5])\n```\n\nThis approach looks similar to the `Pool` object of `multiprocessing` but has\nsome simplifications. First, the first argument of the parallel routine is a\ncontext object, which provides configuration and parameters. Furthermore, it\nprovides data, which has been passed before in the `execute` function. This\nsimplifies passing data to all parallel threads considerably to the more\nflexible approach in `multiprocessing`. Otherwise, the `parallel` object\nprovides most of the functionality of `Pool`, like, `map`, `async_map`,\n`imap`, and `unordered_imap`.\n\n### Info\n\nWhile running the pipeline a lot of additional information may be interesting,\nlike how many samples of a data set have been discarded in a certain stage. However,\nthey often would only be used at the very end of the pipeline when maybe a paper,\na report or some explanatory graphics are generated. For that, the pipeline\nprovides the `set_info` method:\n\n```python\ndef execute(context):\n  # ...\n  context.set_info(\"dropped_samples\", number_of_dropped_samples)\n  # ...\n```\n\nThe information can later be retrieved from another stage (which has the\nstage in question as a dependency):\n\n```python\ndef execute(context):\n  # ...\n  value = context.get_info(\"my.other.stage\", \"dropped_samples\")\n  # ...\n```\n\nNote that the *info* functionality should only be used for light-weight\ninformation like integers, short strings, etc.\n\n### Progress\n\nThe *synpp* package provides functionality to show the progress of a stage\nsimilar to `tqdm`. However, `tqdm` tends to spam the console output which is\nespecially undesired if pipelines have long runtimes and run, for instance, in\nContinuous Integration environments. Therefore, *synpp* provides its own\nfunctionality, although `tqdm` could still be used:\n\n```python\ndef execute(context):\n  # As a\n  with context.progress(label = \"My progress...\", total = 100) as progress:\n    i = 0\n\n    while i < 100:\n      progress.update()\n      i += 1\n\n  for i in context.progress(range(100)):\n    pass\n```\n\n### Compact stage definition\n\nAs quickly [introduced before](#defining-a-descriptor), stages can also be defined in a compact form.\nThe example offered is the simplest possible, where a stage takes no configuration parameters.\nConsider now the more elaborate setting:\n\n```python\n@synpp.stage(loaded_census=\"my.pipeline.census.raw\", sample_size=\"census_sample_size\")\ndef clean_census(loaded_census, sample_size=0.1):\n    ...\n```\n\nWhen `synpp` sees `clean_census`, it will under the hood convert it to a stage in its full form.\nBasically `@synpp.stage` says how the stage should be configured and the function defines the stage's logic.\nTo put clearly, the stage above is converted by `synpp` to something like:\n\n```python\ndef configure(context):\n  context.stage(\"my.pipeline.census.raw\")\n  context.config(\"census_sample_size\", default=0.1)\n\ndef execute(context):\n  loaded_census = context.stage(\"my.pipeline.census.raw\")\n  sample_size = context.config(\"census_sample_size\")\n  return clean_census(loaded_census, sample_size)\n```\n\nAs you may have noticed, `census_sample_size` is a config option defined in the config file,\nand in case it isn't found, `synpp` will simply use the function's default.\nNotice also that the following wouldn't work: `@synpp.stage(..., sample_size=0.2)`,\nsince `synpp` would try to find a parameter called \"0.2\" in the config file that doesn't exist.\n\nIn case a parameterized stage must be passed as dependency, this can be performed\nin a similar way, by simply wrapping the stage in the `synpp.stage()` decorator.\nFollowing the previous example, we may replace the first argument with\n`loaded_census=synpp.stage(\"my.pipeline.census.raw\", file_path=\"path/to/alternative/census\")`.\n\nThis compact way of defining stages does not support all functionality, for instance custom stage devalidation,\nbut functionality that requires the context object are also possible via the helper method `synpp.get_context()`.   \n\n### Command-line tool\n\nThe `synpp` pipeline comes with a command line tool, which can be called like\n\n```sh\npython3 -m synpp [config_path]\n```\n\nIf the config path is not given, it will assume `config.yml`. This file should\ncontain everything to run a pipeline. A simple version would look like this:\n\n```yaml\n# General pipeline settings\nworking_directory: /path/to/my/working_directory\n\n# Requested stages\nrun:\n  - my_first_module.my_first_stage\n  - my_first_parameterized_stage:\n    param1: 123\n    param2: 345\n\n# These are configuration options that are used in the pipeline\nconfig:\n  my_option: 123\n```\n\nIt receives the working directory, a list of stages (which may be parameterized)\nand all configuration options. The stages listed above should be available\nas Python modules or classes. Furthermore, `aliases` can be defined as a top-level\nelement of the file.\n\n## NYC Taxi Example\n\nThis repository contains an example of the pipline. To run it, you will need\n`pandas` as an additional Python dependency. For testing, you can clone this\nrepository to any directory on your machine. Inside the repository directory\nyou can find the `example` directory. If you did not install `synpp` yet,\nyou can do this by executing\n\n```sh\npip install .\n```\n\ninside of the repository directory. Afterwards, open `examples/config.yml`\nand adjust the `working_directory` path. This is a path that should exist on\nyour machine and it should be empty. The best is if you simply create a new\nfolder and add the path in `config.yml`.\n\nYou can now go to `examples` and call the pipeline code:\n\n```sh\ncd examples\npython3 -m synpp\n```\n\nIt will automatically discover `config.yml` (but you could path a different\nconfig file path manually as a command line argument). It will then download\nthe NYC taxi data for January, February and March 2018 (see configuration\noptions in `config.yml`). Note that this is happening in one stage for which\nyou can find the code in `nyc_taxi.download`. It is parameterized by a month\nand a year to download the respective data set. These data sets then go into\n`nyc_taxi.aggregate`, where they are merged together. Finally, an average\noccupancy value is printed out in `nyc_taxi.print_occupancy`. So the dependency\nstructure is as follows:\n\n```\nnyc_taxi.aggregate depends on multiple nyc_taxi.download(year, month)\nnyc_taxi.print_occupancy depends on nyc_taxi.aggregate\n```\n\nAfter one successful run of the pipeline you can start it again. You will notice\nthat the pipeline does *not* download the data again, because nothing has changed\nfor those stages. However, if you would change the requested months in `config.yml`\nthe pipeline may download the additional data sets.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eqasim-org/synpp",
    "keywords": "pipeline automation synthetic population dependency management transport",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "synpp",
    "package_url": "https://pypi.org/project/synpp/",
    "platform": null,
    "project_url": "https://pypi.org/project/synpp/",
    "project_urls": {
      "Homepage": "https://github.com/eqasim-org/synpp"
    },
    "release_url": "https://pypi.org/project/synpp/1.5.1/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "Synthetic population pipeline package for eqasim",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16901476,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b26fdc8abd3c9610b15bb2295d675aebf80b594ef4b1b9023eed1517ea6dd71",
          "md5": "619a82e11fc3f2337e9c70be434e5896",
          "sha256": "c9aebedad5f5dad1fbfeb7b21f55670e24f56eb7ba9b2377ef78594cb6428f0e"
        },
        "downloads": -1,
        "filename": "synpp-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "619a82e11fc3f2337e9c70be434e5896",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 14518,
        "upload_time": "2019-12-12T08:57:26",
        "upload_time_iso_8601": "2019-12-12T08:57:26.694394Z",
        "url": "https://files.pythonhosted.org/packages/7b/26/fdc8abd3c9610b15bb2295d675aebf80b594ef4b1b9023eed1517ea6dd71/synpp-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa3ca535d1766acf553de827139f9f8d718ad71629666e8716f8a9f017f86a2f",
          "md5": "1ce00394249006b78b657552b66d8780",
          "sha256": "9dffc475936b37af7505177d39a46b8c3d11b08104341bd37c7be8a849be2c3b"
        },
        "downloads": -1,
        "filename": "synpp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ce00394249006b78b657552b66d8780",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 18939,
        "upload_time": "2019-12-12T08:57:30",
        "upload_time_iso_8601": "2019-12-12T08:57:30.200467Z",
        "url": "https://files.pythonhosted.org/packages/aa/3c/a535d1766acf553de827139f9f8d718ad71629666e8716f8a9f017f86a2f/synpp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58b171444cb9fa95f47c1a72dcc984cf1ef2b93a4994fa096931cdee8d2cc67f",
          "md5": "7872f2b2b1bfe5678d5bed3d280be685",
          "sha256": "46cc9bbbc86e9d554f5c7e72e13b9d62ae61a1478af527b1f22bba8029ad7af6"
        },
        "downloads": -1,
        "filename": "synpp-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7872f2b2b1bfe5678d5bed3d280be685",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15201,
        "upload_time": "2019-12-22T10:54:26",
        "upload_time_iso_8601": "2019-12-22T10:54:26.018452Z",
        "url": "https://files.pythonhosted.org/packages/58/b1/71444cb9fa95f47c1a72dcc984cf1ef2b93a4994fa096931cdee8d2cc67f/synpp-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e8517dc126586dc87e6210ef891a0a463cfd301bab85c14bc0acc1cd7db4403",
          "md5": "478be593b501283cec1e19e81c166959",
          "sha256": "0ddf009070c0c92c3c918b27db6e8dd58facab4a1444a25a253f97e212335603"
        },
        "downloads": -1,
        "filename": "synpp-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "478be593b501283cec1e19e81c166959",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 19844,
        "upload_time": "2019-12-22T10:54:27",
        "upload_time_iso_8601": "2019-12-22T10:54:27.932448Z",
        "url": "https://files.pythonhosted.org/packages/5e/85/17dc126586dc87e6210ef891a0a463cfd301bab85c14bc0acc1cd7db4403/synpp-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2df0e5b933ae19a05144f3f6ed423dba07ea2a9f0cd6ac75626cc4c4ebe1a677",
          "md5": "8a1e1320cbb8ed2750044dc283c84502",
          "sha256": "8f22caf31b5115073b3865003996a65d77815285e72e7ba3343bc56234130581"
        },
        "downloads": -1,
        "filename": "synpp-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a1e1320cbb8ed2750044dc283c84502",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 15078,
        "upload_time": "2019-12-22T12:24:46",
        "upload_time_iso_8601": "2019-12-22T12:24:46.926125Z",
        "url": "https://files.pythonhosted.org/packages/2d/f0/e5b933ae19a05144f3f6ed423dba07ea2a9f0cd6ac75626cc4c4ebe1a677/synpp-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a6a97a9a956fc8fd5b4dbb8eb07d33ddba227f4057761c6fe5b240e0bdfe48",
          "md5": "5fbd1a711be6dff964a35070208bae92",
          "sha256": "b0e98cc347c2a1e4d644b688b2ee8424ee00b4db732579712161fbeceeb60539"
        },
        "downloads": -1,
        "filename": "synpp-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5fbd1a711be6dff964a35070208bae92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 19726,
        "upload_time": "2019-12-22T12:24:49",
        "upload_time_iso_8601": "2019-12-22T12:24:49.088012Z",
        "url": "https://files.pythonhosted.org/packages/52/a6/a97a9a956fc8fd5b4dbb8eb07d33ddba227f4057761c6fe5b240e0bdfe48/synpp-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f6f8c01cf721e8ee4327b5fa5d6efe533466899d9fab596a6e3e974c5676ecf",
          "md5": "db6320d8a466f7473325a96ebf16b997",
          "sha256": "cb11a1b4f2a1acef491de60789be8538750bb8c368e4689f548b010129799681"
        },
        "downloads": -1,
        "filename": "synpp-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db6320d8a466f7473325a96ebf16b997",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 16747,
        "upload_time": "2020-04-26T12:15:30",
        "upload_time_iso_8601": "2020-04-26T12:15:30.516231Z",
        "url": "https://files.pythonhosted.org/packages/0f/6f/8c01cf721e8ee4327b5fa5d6efe533466899d9fab596a6e3e974c5676ecf/synpp-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105fc805cfbfb146bf5bf86fe0dfc33043b22d4cd0d7aa813cbbb53c5856f6cc",
          "md5": "6d317dcf85972b584188f3a1f10f0f78",
          "sha256": "576b9e97dd73bb445d05b2453e91ebc96385f394e0a9a12050251886d60d0f4f"
        },
        "downloads": -1,
        "filename": "synpp-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d317dcf85972b584188f3a1f10f0f78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 21414,
        "upload_time": "2020-04-26T12:15:35",
        "upload_time_iso_8601": "2020-04-26T12:15:35.815498Z",
        "url": "https://files.pythonhosted.org/packages/10/5f/c805cfbfb146bf5bf86fe0dfc33043b22d4cd0d7aa813cbbb53c5856f6cc/synpp-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd64d1df38e55127ee864fd3c2684f22997b3698cd73100d5d355430f8704505",
          "md5": "d0e1b818bb4110d841c3046ab001ff86",
          "sha256": "e610f1d21dfe2df3c3c546fd460637dd0c3432b3cea879e2ab416b1d287657f6"
        },
        "downloads": -1,
        "filename": "synpp-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0e1b818bb4110d841c3046ab001ff86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 16756,
        "upload_time": "2020-04-26T21:27:56",
        "upload_time_iso_8601": "2020-04-26T21:27:56.028486Z",
        "url": "https://files.pythonhosted.org/packages/cd/64/d1df38e55127ee864fd3c2684f22997b3698cd73100d5d355430f8704505/synpp-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e4b84d3029e87cd283a7c6dfb9e6f2cd0202bf9c3f1299a73fc5cfce02f3768",
          "md5": "41e7851f14e121ba87f283ae5736e5ea",
          "sha256": "8715ad0fee040ef057101a9f980ca1b4805fcfeb715cf14aca20ad6b51418aa2"
        },
        "downloads": -1,
        "filename": "synpp-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41e7851f14e121ba87f283ae5736e5ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 21446,
        "upload_time": "2020-04-26T21:28:01",
        "upload_time_iso_8601": "2020-04-26T21:28:01.346713Z",
        "url": "https://files.pythonhosted.org/packages/9e/4b/84d3029e87cd283a7c6dfb9e6f2cd0202bf9c3f1299a73fc5cfce02f3768/synpp-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e942f5c87425179c6cadd48a892eaec03d883dd0bfe4ad62d60b747de8d45b78",
          "md5": "d9d56634852081d12d2370abf37656bc",
          "sha256": "b7ff3a1dfb1dc4199a6934756304f0efb13a385638ac57e1ca543615331ae85f"
        },
        "downloads": -1,
        "filename": "synpp-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d9d56634852081d12d2370abf37656bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 17036,
        "upload_time": "2020-06-06T10:04:12",
        "upload_time_iso_8601": "2020-06-06T10:04:12.167890Z",
        "url": "https://files.pythonhosted.org/packages/e9/42/f5c87425179c6cadd48a892eaec03d883dd0bfe4ad62d60b747de8d45b78/synpp-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7497c7cc2540b35717f249c29f9923e1446f275527c8bce3491697365b534512",
          "md5": "15995fcaf17c6bf333b19a9ee9afff5e",
          "sha256": "c8a2afb9877a7073c4cb24cb632f41784d540f0bc0b1f87388c485c159651771"
        },
        "downloads": -1,
        "filename": "synpp-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "15995fcaf17c6bf333b19a9ee9afff5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 21687,
        "upload_time": "2020-06-06T10:04:18",
        "upload_time_iso_8601": "2020-06-06T10:04:18.102791Z",
        "url": "https://files.pythonhosted.org/packages/74/97/c7cc2540b35717f249c29f9923e1446f275527c8bce3491697365b534512/synpp-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dfc1b17974896ae559e6365dabc35f5e4d82b675312bfa7dc9ebddfeffc3a61",
          "md5": "74bfaf998b0af343bdc330527eeaa3b2",
          "sha256": "4cd59871075c7d48c25f576f78241e125807664c2f76b7e5553525249f374394"
        },
        "downloads": -1,
        "filename": "synpp-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74bfaf998b0af343bdc330527eeaa3b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 17341,
        "upload_time": "2020-10-09T12:42:42",
        "upload_time_iso_8601": "2020-10-09T12:42:42.310779Z",
        "url": "https://files.pythonhosted.org/packages/0d/fc/1b17974896ae559e6365dabc35f5e4d82b675312bfa7dc9ebddfeffc3a61/synpp-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43a2609c69a6c03e7530fb83c79b2d0a9cf2e7b599a92e9b8765b371f59eb577",
          "md5": "1a120d76b3d5fe7883fdf321f25a61b0",
          "sha256": "eda95075ddc3715d40227db533d470a212fd5da1a7703a0d8ccb0c3eddff1834"
        },
        "downloads": -1,
        "filename": "synpp-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a120d76b3d5fe7883fdf321f25a61b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 22460,
        "upload_time": "2020-10-09T12:42:43",
        "upload_time_iso_8601": "2020-10-09T12:42:43.982784Z",
        "url": "https://files.pythonhosted.org/packages/43/a2/609c69a6c03e7530fb83c79b2d0a9cf2e7b599a92e9b8765b371f59eb577/synpp-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5e76f5ee28fe3b91acd3c4c6673bba3cec48d7cc3fda542c8a0e922c88f73a3",
          "md5": "7d7576d0c2de3af7f515fac0507bc30c",
          "sha256": "80bab4d83a37c5750fb887d5e75e92c7e5f57e8551a4fc59c71d8dd681afb15c"
        },
        "downloads": -1,
        "filename": "synpp-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d7576d0c2de3af7f515fac0507bc30c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 17341,
        "upload_time": "2020-10-09T13:01:11",
        "upload_time_iso_8601": "2020-10-09T13:01:11.680830Z",
        "url": "https://files.pythonhosted.org/packages/d5/e7/6f5ee28fe3b91acd3c4c6673bba3cec48d7cc3fda542c8a0e922c88f73a3/synpp-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2631ae3131ea9b0360d3c73a8120fccba3cb254d0894cd49affc45c8b8ce6159",
          "md5": "ddeb7cb9f892913554d6fb1ae420a020",
          "sha256": "c438fa8df7739d3bbb3aa4044f004d48943ae13be9e949907a2375108e317102"
        },
        "downloads": -1,
        "filename": "synpp-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ddeb7cb9f892913554d6fb1ae420a020",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 22493,
        "upload_time": "2020-10-09T13:01:13",
        "upload_time_iso_8601": "2020-10-09T13:01:13.611468Z",
        "url": "https://files.pythonhosted.org/packages/26/31/ae3131ea9b0360d3c73a8120fccba3cb254d0894cd49affc45c8b8ce6159/synpp-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa60a3474bd796987712e1fe4a4408b626d071a3b641c6bc1575ced86c238407",
          "md5": "7beb12e442710d5576effeda43cbd8eb",
          "sha256": "7494665a7586bdc9e853adac9238426d31614df4ec8ddc37794832c02177cdbb"
        },
        "downloads": -1,
        "filename": "synpp-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7beb12e442710d5576effeda43cbd8eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 23869,
        "upload_time": "2021-06-06T11:40:10",
        "upload_time_iso_8601": "2021-06-06T11:40:10.535800Z",
        "url": "https://files.pythonhosted.org/packages/fa/60/a3474bd796987712e1fe4a4408b626d071a3b641c6bc1575ced86c238407/synpp-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8eec5f410d999fa09234e1ac7be892a233937de6ce89d2252ddc52e6c1a5838",
          "md5": "4eaded471fe491a393d1c382a144d898",
          "sha256": "a3e6762879d001e377ee090ade37066093c5090dcef24b9ae295a061c5418eca"
        },
        "downloads": -1,
        "filename": "synpp-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4eaded471fe491a393d1c382a144d898",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 25902,
        "upload_time": "2021-09-06T14:44:30",
        "upload_time_iso_8601": "2021-09-06T14:44:30.993497Z",
        "url": "https://files.pythonhosted.org/packages/d8/ee/c5f410d999fa09234e1ac7be892a233937de6ce89d2252ddc52e6c1a5838/synpp-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dea15d2265cf1bdf32de4f8f8c8a5a6ad4d9255d15c9ab2e95633b02068cd15",
          "md5": "c7ac9afa3fac864b5afe35c2f708b69b",
          "sha256": "4466d3d46a5bf3df0129b0b2f96f1916bd6e91a4ab7dad2cf684047387307af0"
        },
        "downloads": -1,
        "filename": "synpp-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c7ac9afa3fac864b5afe35c2f708b69b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 27227,
        "upload_time": "2023-02-17T10:56:43",
        "upload_time_iso_8601": "2023-02-17T10:56:43.175465Z",
        "url": "https://files.pythonhosted.org/packages/8d/ea/15d2265cf1bdf32de4f8f8c8a5a6ad4d9255d15c9ab2e95633b02068cd15/synpp-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dea15d2265cf1bdf32de4f8f8c8a5a6ad4d9255d15c9ab2e95633b02068cd15",
        "md5": "c7ac9afa3fac864b5afe35c2f708b69b",
        "sha256": "4466d3d46a5bf3df0129b0b2f96f1916bd6e91a4ab7dad2cf684047387307af0"
      },
      "downloads": -1,
      "filename": "synpp-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c7ac9afa3fac864b5afe35c2f708b69b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 27227,
      "upload_time": "2023-02-17T10:56:43",
      "upload_time_iso_8601": "2023-02-17T10:56:43.175465Z",
      "url": "https://files.pythonhosted.org/packages/8d/ea/15d2265cf1bdf32de4f8f8c8a5a6ad4d9255d15c9ab2e95633b02068cd15/synpp-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}