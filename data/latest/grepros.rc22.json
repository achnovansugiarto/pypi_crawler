{
  "info": {
    "author": "Erki Suurjaak",
    "author_email": "erki@lap.ee",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Console :: Curses",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "grepros\r\n=======\r\n\r\ngrep for ROS bag files and live topics.\r\n\r\nSearches through ROS messages and matches any message field value by regular\r\nexpression patterns or plain text, regardless of field type.\r\nCan also look for specific values in specific message fields only.\r\n\r\nBy default, matches are printed to console. Additionally, matches can be written\r\nto a bagfile or HTML/CSV/MCAP/Parquet/Postgres/SQL/SQLite, or published to live topics.\r\n\r\nSupports both ROS1 and ROS2. ROS environment variables need to be set, at least `ROS_VERSION`.\r\n\r\nIn ROS1, messages can be grepped even if Python packages for message types are not installed.\r\nUsing ROS1 live topics requires ROS master to be running.\r\n\r\nUsing ROS2 requires Python packages for message types to be available in path.\r\n\r\nSupports loading custom plugins, mainly for additional output formats.\r\n\r\n[![Screenshot](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/th_screen.png)](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/screen.png)\r\n\r\nAPI documentation available at https://suurjaak.github.io/grepros.\r\n\r\n\r\n- Example usage\r\n- Installation\r\n  - Using pip\r\n  - Using apt\r\n  - Using catkin\r\n  - Using colcon\r\n- Inputs\r\n  - bag\r\n  - live\r\n- Outputs\r\n  - console\r\n  - bag\r\n  - live\r\n  - csv\r\n  - html\r\n  - postgres\r\n  - sqlite\r\n  - console / html message formatting\r\n- Matching and filtering\r\n  - Limits\r\n  - Filtering\r\n  - Conditions\r\n- Plugins\r\n  - embag\r\n  - mcap\r\n  - parquet\r\n  - sql\r\n- SQL dialects\r\n- Notes on ROS1 vs ROS2\r\n- All command-line arguments\r\n- Dependencies\r\n- Attribution\r\n- License\r\n\r\n\r\nExample usage\r\n-------------\r\n\r\nSearch for \"my text\" in all bags under current directory and subdirectories:\r\n\r\n    grepros -r \"my text\"\r\n\r\nPrint 30 lines of the first message from each live ROS topic:\r\n\r\n    grepros --max-per-topic 1 --lines-per-message 30 --live\r\n\r\nFind first message containing \"future\" (case-sensitive) in my.bag:\r\n\r\n    grepros future -I --max-count 1 --name my.bag\r\n\r\nFind 10 messages, from geometry_msgs package, in \"map\" frame,\r\nfrom bags in current directory, reindexing any unindexed bags:\r\n\r\n    grepros frame_id=map --type geometry_msgs/* --max-count 10 --reindex-if-unindexed\r\n\r\nPipe all diagnostics messages with \"CPU usage\" from live ROS topics to my.bag:\r\n\r\n    grepros \"CPU usage\" --type *DiagnosticArray --no-console-output --write my.bag\r\n\r\nFind messages with field \"key\" containing \"0xA002\",\r\nin topics ending with \"diagnostics\", in bags under \"/tmp\":\r\n\r\n    grepros key=0xA002 --topic *diagnostics --path /tmp\r\n\r\nFind diagnostics_msgs messages in bags in current directory,\r\ncontaining \"navigation\" in fields \"name\" or \"message\",\r\nprint only header stamp and values:\r\n\r\n    grepros --type diagnostic_msgs/* --select-field name message \\\r\n            --print-field header.stamp status.values -- navigation\r\n\r\nPrint first message from each lidar topic on host 1.2.3.4:\r\n\r\n    ROS_MASTER_URI=http://1.2.3.4::11311 \\\r\n    grepros --live --topic *lidar* --max-per-topic 1\r\n\r\nExport all bag messages to SQLite and Postgres, print only export progress:\r\n\r\n    grepros -n my.bag --write my.bag.sqlite --no-console-output --no-verbose --progress\r\n\r\n    grepros -n my.bag --write postgresql://user@host/dbname \\\r\n            --no-console-output --no-verbose --progress\r\n\r\n\r\nPatterns use Python regular expression syntax, message matches if all match.\r\n'*' wildcards use simple globbing as zero or more characters,\r\ntarget matches if any value matches.\r\n\r\nNote that some expressions may need to be quoted to avoid shell auto-unescaping\r\nor auto-expanding them, e.g. `linear.x=2.?5` should be given as `\"linear.x=2\\.?5\"`.\r\n\r\nCare must also be taken with unquoted wildcards, as they will auto-expanded by shell\r\nif they happen to match paths on disk.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\ngrepros is written in Python, supporting both Python 2 and Python 3.\r\n\r\nDeveloped and tested under ROS1 noetic and ROS2 foxy,\r\nit should also work in later ROS2 versions;\r\nit _may_ work in earlier ROS1 versions. \r\n\r\n\r\n### Using pip\r\n\r\n    pip install grepros\r\n\r\nThis will add the `grepros` command to path.\r\n\r\nRequires ROS Python packages\r\n(ROS1: rospy, roslib, rosbag, genpy;\r\n ROS2: rclpy, rosidl_parser, rosidl_runtime_py, builtin_interfaces).\r\n\r\nFor ROS1, if only using bag files and no live topics, minimal ROS1 Python\r\npackages can also be installed separately with:\r\n\r\n    pip install rospy rosbag roslib roslz4 \\\r\n    --extra-index-url https://rospypi.github.io/simple/\r\n\r\n\r\n### Using apt\r\n\r\nIf ROS apt repository has been added to system:\r\n\r\n    sudo apt install ros-noetic-grepros  # ROS1\r\n\r\n    sudo apt install ros-foxy-grepros    # ROS2\r\n\r\nThis will add the `grepros` command to the global ROS1 / ROS2 environment.\r\n\r\n\r\n### Using catkin\r\n\r\nIn a ROS1 workspace, under the source directory:\r\n\r\n    git clone https://github.com/suurjaak/grepros.git\r\n    cd grepros\r\n    catkin build --this\r\n\r\nThis will add the `grepros` command to the local ROS1 workspace path.\r\n\r\n\r\n### Using colcon\r\n\r\nIn a ROS2 workspace, at the workspace root:\r\n\r\n    git clone https://github.com/suurjaak/grepros.git src/grepros\r\n    colcon build --packages-select grepros\r\n\r\nThis will add the `grepros` command to the local ROS2 workspace path.\r\n\r\n\r\nInputs\r\n------\r\n\r\nInput is either from one or more ROS bag files (default), or from live ROS topics.\r\n\r\n### bag\r\n\r\nRead messages from ROS bag files, by default all in current directory.\r\n\r\nRecurse into subdirectories when looking for bagfiles:\r\n\r\n    -r\r\n    --recursive\r\n\r\nRead specific filenames (supports * wildcards):\r\n\r\n    --n        /tmp/*.bag\r\n    --filename my.bag 2021-11-*.bag\r\n\r\nScan specific paths instead of current directory (supports * wildcards):\r\n\r\n    -p     /home/bags/2021-11-*\r\n    --path my/dir\r\n\r\nReindex unindexed ROS1 bags before processing\r\n(note: creates backup copies of files, into same directory as file):\r\n\r\n    --reindex-if-unindexed\r\n    --reindex-if-unindexed --progress\r\n\r\nDecompress archived ROS bags before processing\r\n(`.zst` `.zstd` extensions, requires `zstandard` Python package)\r\n(note: unpacks archived file to disk, into same directory as file):\r\n\r\n    --decompress\r\n    --decompress --progress\r\n\r\nOrder bag messages first by topic or type, and only then by time:\r\n\r\n    --order-bag-by topic\r\n    --order-bag-by type\r\n\r\n\r\nOutputs\r\n-------\r\n\r\nThere can be any number of outputs: printing to console (default),\r\npublishing to live ROS topics, or writing to file or database.\r\n\r\n### console\r\n\r\nDefault output is to console, in ANSI colors, mimicking `grep` output.\r\n\r\nDisable printing messages to console:\r\n\r\n    --no-console-output\r\n\r\nManage color output:\r\n\r\n    --color always  (default)\r\n    --color auto    (auto-detect terminal support)\r\n    --color never   (disable colors)\r\n\r\nNote that when paging color output with `more` or `less`, the pager needs to\r\naccept raw control characters (`more -f` or `less -R`).\r\n\r\n\r\n### bag\r\n\r\n    --write path/to/my.bag [format=bag] [overwrite=true|false]\r\n\r\nWrite messages to a ROS bag file, the custom `.bag` format in ROS1\r\nor the `.db3` SQLite database format in ROS2. If the bagfile already exists,\r\nit is appended to, unless specified to overwrite.\r\n\r\nSpecifying `format=bag` is not required\r\nif the filename ends with `.bag` in ROS1 or `.db3` in ROS2.\r\n\r\n\r\n### live\r\n\r\n    --live\r\n\r\nRead messages from live ROS topics instead of bagfiles.\r\n\r\nRequires `ROS_MASTER_URI` and `ROS_ROOT` to be set in environment if ROS1.\r\n\r\nSet custom queue size for subscribing (default 10):\r\n\r\n    --queue-size-in 100\r\n\r\nUse ROS time instead of system time for incoming message timestamps:\r\n\r\n    --ros-time-in\r\n\r\n\r\n### csv\r\n\r\n    --write path/to/my.csv [format=csv] [overwrite=true|false]\r\n\r\nWrite messages to CSV files, each topic to a separate file, named\r\n`path/to/my.full__topic__name.csv` for `/full/topic/name`.\r\n\r\nOutput mimicks CSVs compatible with PlotJuggler, all messages values flattened\r\nto a single list, with header fields like `/topic/field.subfield.listsubfield.0.data.1`.\r\n\r\nIf a file already exists, a unique counter is appended to the name of the new file,\r\ne.g. `my.full__topic__name.2.csv`, unless specified to overwrite.\r\n\r\nSpecifying `format=csv` is not required if the filename ends with `.csv`.\r\n\r\n\r\n### html\r\n\r\n    --write path/to/my.html [format=html] [overwrite=true|false]\r\n            [template=/path/to/html.template]\r\n\r\nWrite messages to an HTML file, with a linked table of contents,\r\nmessage timeline, message type definitions, and a topically traversable message list.\r\n\r\n[![Screenshot](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/th_screen_html.png)](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/screen_html.png)\r\n\r\nNote: resulting file may be large, and take a long time to open in browser.\r\n\r\nIf the file already exists, a unique counter is appended to the name of the new file,\r\ne.g. `my.2.html`, unless specified to overwrite.\r\n\r\nSpecifying `format=html` is not required if the filename ends with `.htm` or `.html`.\r\n\r\nA custom template file can be specified, in [step](https://github.com/dotpy/step) syntax:\r\n\r\n    --write path/to/my.html template=/my/html.template\r\n\r\n\r\n### postgres\r\n\r\n    --write postgresql://username@host/dbname [format=postgres]\r\n            [commit-interval=NUM] [nesting=array|all]\r\n            [dialect-file=path/to/dialects.yaml]\r\n\r\nWrite messages to a Postgres database, with tables `pkg/MsgType` for each ROS message type,\r\nand views `/full/topic/name` for each topic.\r\nPlus table `topics` with a list of topics, `types` with message types and definitions,\r\nand `meta` with table/view/column name changes from shortenings and conflicts, if any\r\n(Postgres name length is limited to 63 characters).\r\n\r\nROS primitive types are inserted as Postgres data types (time/duration types as NUMERIC),\r\nuint8[] arrays as BYTEA, other primitive arrays as ARRAY, and arrays of subtypes as JSONB.\r\n\r\nIf the database already exists, it is appended to. If there are conflicting names\r\n(same package and name but different message type definition),\r\ntable/view name becomes \"name (MD5 hash of type definition)\".\r\n\r\nSpecifying `format=postgres` is not required if the parameter uses the\r\nPostgres URI scheme `postgresql://`.\r\n\r\nRequires [psycopg2](https://pypi.org/project/psycopg2).\r\n\r\nParameter `--write` can also use the Postgres keyword=value format,\r\ne.g. `\"host=localhost port=5432 dbname=mydb username=postgres connect_timeout=10\"`.\r\n\r\nStandard Postgres environment variables are also supported (PGPASSWORD et al).\r\n\r\n[![Screenshot](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/th_screen_postgres.png)](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/screen_postgres.png)\r\n\r\nA custom transaction size can be specified (default is 1000; 0 is autocommit):\r\n\r\n    --write postgresql://username@host/dbname commit-interval=NUM\r\n\r\nUpdates to Postgres SQL dialect can be loaded from a YAML or JSON file:\r\n\r\n    --write postgresql://username@host/dbname dialect-file=path/to/dialects.yaml\r\n\r\nMore on SQL dialects.\r\n\r\n\r\n#### Nested messages\r\n\r\nNested message types can be recursively populated to separate tables, linked\r\nto parent messages via foreign keys.\r\n\r\nTo recursively populate nested array fields:\r\n\r\n    --write postgresql://username@host/dbname nesting=array\r\n\r\nE.g. for `diagnostic_msgs/DiagnosticArray`, this would populate the following tables:\r\n\r\n```sql\r\nCREATE TABLE \"diagnostic_msgs/DiagnosticArray\" (\r\n  \"header.seq\"          BIGINT,\r\n  \"header.stamp.secs\"   INTEGER,\r\n  \"header.stamp.nsecs\"  INTEGER,\r\n  \"header.frame_id\"     TEXT,\r\n  status                JSONB,       -- [_id from \"diagnostic_msgs/DiagnosticStatus\", ]\r\n  _topic                TEXT,\r\n  _timestamp            NUMERIC,\r\n  _id                   BIGSERIAL,\r\n  _parent_type          TEXT,\r\n  _parent_id            BIGINT\r\n);\r\n\r\nCREATE TABLE \"diagnostic_msgs/DiagnosticStatus\" (\r\n  level                 SMALLINT,\r\n  name                  TEXT,\r\n  message               TEXT,\r\n  hardware_id           TEXT,\r\n  \"values\"              JSONB,       -- [_id from \"diagnostic_msgs/KeyValue\", ]\r\n  _topic                TEXT,        -- _topic from \"diagnostic_msgs/DiagnosticArray\"\r\n  _timestamp            NUMERIC,     -- _timestamp from \"diagnostic_msgs/DiagnosticArray\"\r\n  _id                   BIGSERIAL,\r\n  _parent_type          TEXT,        -- \"diagnostic_msgs/DiagnosticArray\"\r\n  _parent_id            BIGINT       -- _id from \"diagnostic_msgs/DiagnosticArray\"\r\n);\r\n\r\nCREATE TABLE \"diagnostic_msgs/KeyValue\" (\r\n  \"key\"                 TEXT,\r\n  value                 TEXT,\r\n  _topic                TEXT,        -- _topic from \"diagnostic_msgs/DiagnosticStatus\"\r\n  _timestamp            NUMERIC,     -- _timestamp from \"diagnostic_msgs/DiagnosticStatus\"\r\n  _id                   BIGSERIAL,\r\n  _parent_type          TEXT,        -- \"diagnostic_msgs/DiagnosticStatus\"\r\n  _parent_id            BIGINT       -- _id from \"diagnostic_msgs/DiagnosticStatus\"\r\n);\r\n```\r\n\r\nWithout nesting, array field values are inserted as JSON with full subtype content.\r\n\r\nTo recursively populate all nested message types:\r\n\r\n    --write postgresql://username@host/dbname nesting=all\r\n\r\nE.g. for `diagnostic_msgs/DiagnosticArray`, this would, in addition to the above, populate:\r\n\r\n```sql\r\nCREATE TABLE \"std_msgs/Header\" (\r\n  seq                   BIGINT,\r\n  \"stamp.secs\"          INTEGER,\r\n  \"stamp.nsecs\"         INTEGER,\r\n  frame_id              TEXT,\r\n  _topic                TEXT,       -- _topic from \"diagnostic_msgs/DiagnosticArray\"\r\n  _timestamp            NUMERIC,    -- _timestamp from \"diagnostic_msgs/DiagnosticArray\"\r\n  _id                   BIGSERIAL,\r\n  _parent_type          TEXT,       -- \"diagnostic_msgs/DiagnosticArray\"\r\n  _parent_id            BIGINT      -- _id from \"diagnostic_msgs/DiagnosticArray\"\r\n);\r\n```\r\n\r\n### sqlite\r\n\r\n    --write path/to/my.sqlite [format=sqlite] [overwrite=true|false]\r\n            [commit-interval=NUM] [message-yaml=true|false] [nesting=array|all]\r\n            [dialect-file=path/to/dialects.yaml]\r\n\r\nWrite an SQLite database with tables `pkg/MsgType` for each ROS message type\r\nand nested type, and views `/full/topic/name` for each topic.\r\nIf the database already exists, it is appended to, unless specified to overwrite.\r\n\r\nOutput is compatible with ROS2 `.db3` bagfiles, supplemented with\r\nfull message YAMLs, and message type definition texts. Note that a database\r\ndumped from a ROS1 source will most probably not be usable as a ROS2 bag,\r\ndue to breaking changes in ROS2 standard built-in types and message types.\r\n\r\nSpecifying `format=sqlite` is not required\r\nif the filename ends with `.sqlite` or `.sqlite3`.\r\n\r\n[![Screenshot](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/th_screen_sqlite.png)](https://raw.githubusercontent.com/suurjaak/grepros/gh-pages/img/screen_sqlite.png)\r\n\r\nA custom transaction size can be specified (default is 1000; 0 is autocommit):\r\n\r\n    --write path/to/my.sqlite commit-interval=NUM\r\n\r\nBy default, table `messages` is populated with full message YAMLs, unless:\r\n\r\n    --write path/to/my.sqlite message-yaml=false\r\n\r\nUpdates to SQLite SQL dialect can be loaded from a YAML or JSON file:\r\n\r\n    --write path/to/my.sqlite dialect-file=path/to/dialects.yaml\r\n\r\nMore on SQL dialects.\r\n\r\n\r\n#### Nested messages\r\n\r\nNested message types can be recursively populated to separate tables, linked\r\nto parent messages via foreign keys.\r\n\r\nTo recursively populate nested array fields:\r\n\r\n    --write path/to/my.sqlite nesting=array\r\n\r\nE.g. for `diagnostic_msgs/DiagnosticArray`, this would populate the following tables:\r\n\r\n```sql\r\nCREATE TABLE \"diagnostic_msgs/DiagnosticArray\" (\r\n  \"header.seq\"          INTEGER,\r\n  \"header.stamp.secs\"   INTEGER,\r\n  \"header.stamp.nsecs\"  INTEGER,\r\n  \"header.frame_id\"     TEXT,\r\n  -- [_id from \"diagnostic_msgs/DiagnosticStatus\", ]\r\n  status                \"DIAGNOSTIC_MSGS/DIAGNOSTICSTATUS[]\",\r\n  _topic                TEXT,\r\n  _timestamp            INTEGER,\r\n  _id                   INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\r\n  _parent_type          TEXT,\r\n  _parent_id            INTEGER\r\n);\r\n\r\nCREATE TABLE \"diagnostic_msgs/DiagnosticStatus\" (\r\n  level                 SMALLINT,\r\n  name                  TEXT,\r\n  message               TEXT,\r\n  hardware_id           TEXT,\r\n  -- [_id from \"diagnostic_msgs/KeyValue\", ]\r\n  \"values\"              \"DIAGNOSTIC_MSGS/KEYVALUE[]\",\r\n  _topic                TEXT,        -- _topic from \"diagnostic_msgs/DiagnosticArray\"\r\n  _timestamp            INTEGER,     -- _timestamp from \"diagnostic_msgs/DiagnosticArray\"\r\n  _id                   INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\r\n  _parent_type          TEXT,        -- \"diagnostic_msgs/DiagnosticArray\"\r\n  _parent_id            INTEGER      -- _id from \"diagnostic_msgs/DiagnosticArray\"\r\n);\r\n\r\nCREATE TABLE \"diagnostic_msgs/KeyValue\" (\r\n  \"key\"                 TEXT,\r\n  value                 TEXT,\r\n  _topic                TEXT,        -- _topic from \"diagnostic_msgs/DiagnosticStatus\"\r\n  _timestamp            INTEGER,     -- _timestamp from \"diagnostic_msgs/DiagnosticStatus\"\r\n  _id                   INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\r\n  _parent_type          TEXT,        -- \"diagnostic_msgs/DiagnosticStatus\"\r\n  _parent_id            INTEGER      -- _id from \"diagnostic_msgs/DiagnosticStatus\"\r\n);\r\n```\r\n\r\nWithout nesting, array field values are inserted as JSON with full subtype content.\r\n\r\nTo recursively populate all nested message types:\r\n\r\n    --write path/to/my.sqlite nesting=all\r\n\r\nE.g. for `diagnostic_msgs/DiagnosticArray`, this would, in addition to the above, populate:\r\n\r\n```sql\r\nCREATE TABLE \"std_msgs/Header\" (\r\n  seq                   UINT32,\r\n  \"stamp.secs\"          INT32,\r\n  \"stamp.nsecs\"         INT32,\r\n  frame_id              TEXT,\r\n  _topic                STRING,     -- _topic from \"diagnostic_msgs/DiagnosticArray\"\r\n  _timestamp            INTEGER,    -- _timestamp from \"diagnostic_msgs/DiagnosticArray\"\r\n  _id                   INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\r\n  _parent_type          TEXT,       -- \"diagnostic_msgs/DiagnosticArray\"\r\n  _parent_id            INTEGER     -- _id from \"diagnostic_msgs/DiagnosticArray\"\r\n);\r\n```\r\n\r\n\r\n### live\r\n\r\n    --publish\r\n\r\nPublish messages to live ROS topics. Topic prefix and suffix can be changed,\r\nor topic name set to one specific name:\r\n\r\n    --publish-prefix  /myroot\r\n    --publish-suffix  /myend\r\n    --publish-fixname /my/singular/name\r\n\r\nOne of the above arguments needs to be specified if publishing to live ROS topics\r\nwhile grepping from live ROS topics, to avoid endless loops.\r\n\r\nSet custom queue size for publishers (default 10):\r\n\r\n    --queue-size-out 100\r\n\r\n\r\n### console / html message formatting\r\n\r\nSet maximum number of lines to output per message:\r\n\r\n    --lines-per-message 5\r\n\r\nSet maximum number of lines to output per message field:\r\n\r\n    --lines-per-field 2\r\n\r\nStart message output from, or stop output at, message line number:\r\n\r\n    --start-line  2   # (1-based if positive\r\n    --end-line   -2   # (count back from total if negative)\r\n\r\nOutput only the fields where patterns find a match:\r\n\r\n    --matched-fields-only\r\n\r\nOutput only matched fields and specified number of lines around match:\r\n\r\n    --lines-around-match 5\r\n\r\nOutput only specific message fields (supports nested.paths and * wildcards):\r\n\r\n    --print-field *data\r\n\r\nSkip outputting specific message fields (supports nested.paths and * wildcards):\r\n\r\n    --no-print-field header.stamp\r\n\r\nWrap matches in custom texts:\r\n\r\n    --match-wrapper @@@\r\n    --match-wrapper \"<<<<\" \">>>>\"\r\n\r\nSet custom width for wrapping message YAML printed to console (auto-detected from terminal by default):\r\n\r\n    --wrap-width 120\r\n\r\n\r\nMatching and filtering\r\n----------------------\r\n\r\nAny number of patterns can be specified, message matches if all patterns find a match.\r\nIf no patterns are given, any message matches.\r\n\r\nMatch messages containing any of the words:\r\n\r\n    cpu memory speed\r\n\r\nMatch messages where `frame_id` contains \"world\":\r\n\r\n    frame_id=world\r\n\r\nMatch messages where `header.frame_id` is present:\r\n\r\n    header.frame_id=.*\r\n\r\nMatch as plaintext, not Python regular expression patterns:\r\n\r\n    -F\r\n    --fixed-strings\r\n\r\nSelect non-matching messages instead:\r\n\r\n    -v\r\n    --invert-match\r\n\r\nUse case-sensitive matching in patterns (default is insensitive):\r\n\r\n    -I\r\n    --no-ignore-case\r\n\r\n\r\n### Limits\r\n\r\nStop after matching a specified number of messages (per each file if bag input):\r\n\r\n    -m          100\r\n    --max-count 100\r\n\r\nScan only a specified number of topics (per each file if bag input):\r\n\r\n    --max-topics 10\r\n\r\nEmit a specified number of matches per topic (per each file if bag input):\r\n\r\n    --max-per-topic 20\r\n\r\nEmit every Nth match in topic:\r\n\r\n    --every-nth-match 10  # (skips 9 matches in topic after each match emitted)\r\n\r\n\r\n### Filtering\r\n\r\nScan specific topics only (supports * wildcards):\r\n\r\n    -t      *lidar* *ins*\r\n    --topic /robot/sensors/*\r\n\r\nSkip specific topics (supports * wildcards):\r\n\r\n    -nt        *lidar* *ins*\r\n    --no-topic /robot/sensors/*\r\n\r\nScan specific message types only (supports * wildcards):\r\n\r\n    -d     *Twist*\r\n    --type sensor_msgs/*\r\n\r\nSkip specific message types from scanning (supports * wildcards):\r\n\r\n    -nd       *Twist*\r\n    --no-type sensor_msgs/*\r\n\r\nSet specific message fields to scan (supports nested.paths and * wildcards):\r\n\r\n    -sf            twist.linear\r\n    --select-field *data\r\n\r\nSkip specific message fields in scan (supports nested.paths and * wildcards):\r\n\r\n    -ns               twist.linear\r\n    --no-select-field *data\r\n\r\nOnly emit matches that are unique in topic,\r\ntaking `--select-field` and `--no-select-field` into account (per each file if bag input):\r\n\r\n    --unique-only\r\n\r\nStart scanning from a specific timestamp:\r\n\r\n    -t0          2021-11     # (using partial ISO datetime)\r\n    --start-time 1636900000  # (using UNIX timestamp)\r\n    --start-time +100        # (seconds from bag start time, or from script startup time if live input)\r\n    --start-time -100        # (seconds from bag end time, or script startup time if live input)\r\n\r\nStop scanning at a specific timestamp:\r\n\r\n    -t1        2021-11     # (using partial ISO datetime)\r\n    --end-time 1636900000  # (using UNIX timestamp)\r\n    --end-time +100        # (seconds from bag start time, or from script startup time if live input)\r\n    --end-time -100        # (seconds from bag end time, or from script startup time if live input)\r\n\r\nStart scanning from a specific message index in topic:\r\n\r\n    -n0           -100  # (counts back from topic total message count in bag)\r\n    --start-index   10  # (1-based index)\r\n\r\nStop scanning at a specific message index in topic:\r\n\r\n    -n1         -100  # (counts back from topic total message count in bag)\r\n    --end-index   10  # (1-based index)\r\n\r\nScan every Nth message in topic:\r\n\r\n    --every-nth-message 10  # (skips 9 messages in topic with each step)\r\n\r\nScan messages in topic with timestamps at least N seconds apart:\r\n\r\n    --every-nth-interval 5  # (samples topic messages no more often than every 5 seconds)\r\n\r\n\r\n## Conditions\r\n\r\n    --condition \"PYTHON EXPRESSION\"\r\n\r\nSpecify one or more Python expressions that must evaluate as true to search\r\nencountered messages. Expressions can access topics, by name or * wildcard,\r\nand refer to message fields directly.\r\n\r\n    # (Match while last message in '/robot/enabled' has data=true)\r\n    --condition \"<topic /robot/enabled>.data\"\r\n\r\n    # (Match if at least 10 messages have been encountered in /robot/alerts)\r\n    --condition \"len(<topic /robot/alerts>) > 10\"\r\n\r\n    # (Match if last two messages in /robot/mode have equal .value)\r\n    --condition \"<topic /robot/mode>[-2].value == <topic /robot/mode>[-1].value\"\r\n\r\n    # (Match while control is enabled and robot is moving straight and level)\r\n    --condition \"<topic */control_enable>.data and <topic */cmd_vel>.linear.x > 0 \" \\\r\n                \"and <topic */cmd_vel>.angular.z < 0.02\"\r\n\r\n\r\nCondition namespace:\r\n\r\n| Name                    | Description\r\n| ----------------------- | ----------------------------------------------------------------\r\n|                         |\r\n| `msg`                   |  current message from data source\r\n| `topic`                 |  full name of current message topic\r\n| `<topic /my/topic>`     |  topic by full name or * wildcard\r\n| `len(<topic ..>)`       |  number of messages encountered in topic\r\n| `bool(<topic ..>)`      |  whether any message encountered in topic\r\n| `<topic ..>.xyz`        |  attribute `xyz` of last message in topic\r\n| `<topic ..>[index]`     |  topic message at position\r\n|                         |  (from first encountered if index >= 0, last encountered if < 0)\r\n| `<topic ..>[index].xyz` |  attribute `xyz` of topic message at position\r\n\r\nCondition is automatically false if trying to access attributes of a message not yet received.\r\n\r\n\r\nPlugins\r\n-------\r\n\r\n    --plugin some.python.module some.other.module.Class\r\n\r\nLoad one or more Python modules or classes as plugins.\r\nSupported (but not required) plugin interface methods:\r\n\r\n- `init(args)`: invoked at startup with command-line arguments\r\n- `load(category, args)`: invoked with category \"search\" or \"source\" or \"sink\",\r\n                          using returned value for specified component if not None\r\n\r\nPlugins are free to modify `grepros` internals, like adding command-line arguments\r\nto `grepros.main.ARGUMENTS` or adding sink types to `grepros.outputs.MultiSink`.\r\n\r\nConvenience methods:\r\n\r\n- `plugins.add_write_format(name, cls, label=None, options=())`:\r\n   adds an output plugin to defaults\r\n- `plugins.get_argument(name)`: returns a command-line argument dictionary, or None\r\n\r\nSpecifying `--plugin someplugin` and `--help` will include plugin options in printed help.\r\n\r\nBuilt-in plugins:\r\n\r\n### embag\r\n\r\n    --plugin grepros.plugins.embag\r\n\r\nUse the [embag](https://github.com/embarktrucks/embag) library for reading ROS1 bags.\r\n\r\nSignificantly faster, but library tends to be unstable.\r\n\r\n\r\n### mcap\r\n\r\n    --plugin grepros.plugins.mcap\r\n\r\nRead or write messages in [MCAP](https://mcap.dev) format.\r\n\r\nRequires [mcap](https://pypi.org/project/mcap), and\r\n[mcap_ros1_support](https://pypi.org/project/mcap-ros1-support) for ROS1\r\nor [mcap_ros2_support](https://pypi.org/project/mcap-ros2-support) for ROS2.\r\n\r\nIn ROS2, messages grepped from MCAP files can only be published to live topics\r\nif the same message type packages are locally installed.\r\n\r\nWrite bags in MCAP format:\r\n\r\n    --plugin grepros.plugins.mcap \\\r\n    --write path/to/my.mcap [format=mcap] [overwrite=true|false]\r\n\r\nIf the file already exists, a unique counter is appended to the name of the new file,\r\ne.g. `my.2.mcap`, unless specified to overwrite.\r\n\r\nSpecifying write `format=mcap` is not required if the filename ends with `.mcap`.\r\n\r\n\r\n### parquet\r\n\r\n    --plugin grepros.plugins.parquet \\\r\n    --write path/to/my.parquet [format=parquet] [overwrite=true|false] \\\r\n            [column-name=rostype:value] [type-rostype=arrowtype] \\\r\n            [writer-argname=argvalue]\r\n\r\nWrite messages to Apache Parquet files (columnar storage format, version 2.6),\r\neach message type to a separate file, named `path/to/package__MessageType__typehash/my.parquet`\r\nfor `package/MessageType` (typehash is message type definition MD5 hashsum).\r\nAdds fields `_topic string()` and `_timestamp timestamp(\"ns\")` to each type.\r\n\r\nIf a file already exists, a unique counter is appended to the name of the new file,\r\ne.g. `package__MessageType__typehash/my.2.parquet`, unless specified to overwrite.\r\n\r\nSpecifying `format=parquet` is not required if the filename ends with `.parquet`.\r\n\r\nRequires [pandas](https://pypi.org/project/pandas) and [pyarrow](https://pypi.org/project/pyarrow).\r\n\r\nSupports adding supplementary columns with fixed values to Parquet files:\r\n\r\n    --write path/to/my.parquet column-bag_hash=string:26dfba2c\r\n\r\nSupports custom mapping between ROS and pyarrow types with `type-rostype=arrowtype`:\r\n\r\n    --write path/to/my.parquet type-time=\"timestamp('ns')\"\r\n    --write path/to/my.parquet type-uint8[]=\"list(uint8())\"\r\n\r\nTime/duration types are flattened into separate integer columns `secs` and `nsecs`,\r\nunless they are mapped to pyarrow types explicitly, like:\r\n\r\n    --write path/to/my.parquet type-time=\"timestamp('ns')\" type-duration=\"duration('ns')\"\r\n\r\nSupports additional arguments given to [pyarrow.parquet.ParquetWriter](\r\nhttps://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetWriter.html), as:\r\n\r\n    --write path/to/my.parquet writer-argname=argvalue\r\n\r\nFor example, specifying no compression:\r\n\r\n    --write path/to/my.parquet writer-compression=null\r\n\r\nThe value is interpreted as JSON if possible, e.g. `writer-use_dictionary=false`.\r\n\r\n\r\n### sql\r\n\r\n    --plugin grepros.plugins.sql \\\r\n    --write path/to/my.sql [format=sql] [overwrite=true|false] \\\r\n            [nesting=array|all] [dialect=clickhouse|postgres|sqlite] \\\r\n            [dialect-file=path/to/dialects.yaml]\r\n\r\nWrite SQL schema to output file, CREATE TABLE for each message type\r\nand CREATE VIEW for each topic.\r\n\r\nIf the file already exists, a unique counter is appended to the name of the new file,\r\ne.g. `my.2.sql`, unless specified to overwrite.\r\n\r\nSpecifying `format=sql` is not required if the filename ends with `.sql`.\r\n\r\nTo create tables for nested array message type fields:\r\n\r\n    --write path/to/my.sql nesting=array\r\n\r\nTo create tables for all nested message types:\r\n\r\n    --write path/to/my.sql nesting=all\r\n\r\nA specific SQL dialect can be specified:\r\n\r\n    --write path/to/my.sql dialect=clickhouse|postgres|sqlite\r\n\r\nAdditional dialects, or updates for existing dialects, can be loaded from a YAML or JSON file:\r\n\r\n    --write path/to/my.sql dialect=mydialect dialect-file=path/to/dialects.yaml\r\n\r\n\r\nSQL dialects\r\n------------\r\n\r\nPostgres, SQLite and SQL outputs support loading additional options for SQL dialect.\r\n\r\nDialect file format:\r\n\r\n```yaml\r\ndialectname:\r\n  table_template:       CREATE TABLE template; args: table, cols, type, hash, package, class\r\n  view_template:        CREATE VIEW template; args: view, cols, table, topic, type, hash, package, class\r\n  table_name_template:  message type table name template; args: type, hash, package, class\r\n  view_name_template:   topic view name template; args: topic, type, hash, package, class\r\n  types:                Mapping between ROS and SQL common types for table columns,\r\n                        e.g. {\"uint8\": \"SMALLINT\", \"uint8[]\": \"BYTEA\", ..}\r\n  adapters:             Mapping between ROS types and callable converters for table columns,\r\n                        e.g. {\"time\": \"decimal.Decimal\"}\r\n  defaulttype:          Fallback SQL type if no mapped type for ROS type;\r\n                        if no mapped and no default type, column type will be ROS type as-is\r\n  arraytype_template:   Array type template; args: type\r\n  maxlen_entity:        Maximum table/view name length, 0 disables\r\n  maxlen_column:        Maximum column name length, 0 disables\r\n  invalid_char_regex:   Regex for matching invalid characters in name, if any\r\n  invalid_char_repl:    Replacement for invalid characters in name\r\n```\r\n\r\nTemplate parameters like `table_name_template` use Python `str.format()` keyword syntax,\r\ne.g. `{\"table_name_template\": \"{type}\", \"view_name_template\": \"{topic}\"}`.\r\n\r\nTime/duration types are flattened into separate integer columns `secs` and `nsecs`,\r\nunless the dialect maps them to SQL types explicitly, e.g. `{\"time\": \"BIGINT\"}`.\r\n\r\nAny dialect options not specified in the given dialect or built-in dialects,\r\nwill be taken from the default dialect configuration:\r\n\r\n```yaml\r\n  table_template:       'CREATE TABLE IF NOT EXISTS {table} ({cols});'\r\n  view_template:        'DROP VIEW IF EXISTS {view};\r\n                         CREATE VIEW {view} AS\r\n                         SELECT {cols}\r\n                         FROM {table}\r\n                         WHERE _topic = {topic};'\r\n  table_name_template:  '{type}',\r\n  view_name_template:   '{topic}',\r\n  types:                {}\r\n  defaulttype:          null\r\n  arraytype_template:   '{type}[]'\r\n  maxlen_entity:        0\r\n  maxlen_column:        0\r\n  invalid_char_regex:   null\r\n  invalid_char_repl:    '__'\r\n```\r\n\r\n\r\nNotes on ROS1 vs ROS2\r\n---------------------\r\n\r\nIn ROS1, message type packages do not need to be installed locally to be able to\r\nread messages from bags or live topics, as bags and topic publishers provide\r\nmessage type definition texts, and message classes can be generated at run-time\r\nfrom the type definition text. This is what rosbag does automatically,\r\nand so does grepros.\r\n\r\nAdditionally, each ROS1 message type has a hash code computed from its type\r\ndefinition text, available both in live topic metadata, and bag metadata.\r\nThe message type definition hash code allows to recognize changes\r\nin message type packages and use the correct version of the message type.\r\n\r\nROS2 does not provide message type definitions, neither in bagfiles nor in live\r\ntopics. Due to this, the message type packages always need to be installed.\r\nAlso, ROS2 does not provide options for generating type classes at run-time,\r\nand it does not have the concept of a message type hash.\r\n\r\nThese are serious limitations in ROS2 compared to ROS1, at least with versions\r\nup to ROS2 Humble and counting, and require extra work to smooth over.\r\nWithout knowing which version of a message type package a bag was recorded with,\r\nreading bag messages with changed definitions can result in undefined behaviour.\r\n\r\nIf the serialized message structure happens to match (e.g. a change swapped\r\nthe order of two `int32` fields), messages will probably be deserialized\r\nseemingly successfully but with invalid content. If the serialized structure\r\ndoes not match, the result is a run-time error.\r\n\r\nBecause of this, it is prudent to always include a snapshot archive of used\r\nmessage type packages, when recording ROS2 bags.\r\n\r\ngrepros does provide the message type hash itself in ROS2 exports, by calculating\r\nthe ROS2 message type hash on its own from the locally installed type definition.\r\n\r\n\r\n\r\nAll command-line arguments\r\n--------------------------\r\n\r\n```\r\npositional arguments:\r\n  PATTERN               pattern(s) to find in message field values,\r\n                        all messages match if not given,\r\n                        can specify message field as NAME=PATTERN\r\n                        (supports nested.paths and * wildcards)\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -F, --fixed-strings   PATTERNs are ordinary strings, not regular expressions\r\n  -I, --no-ignore-case  use case-sensitive matching in PATTERNs\r\n  -v, --invert-match    select non-matching messages\r\n  --version             display version information and exit\r\n  --live                read messages from live ROS topics instead of bagfiles\r\n  --publish             publish matched messages to live ROS topics\r\n  --write TARGET [format=bag|csv|html|postgres|sqlite] [KEY=VALUE ...]\r\n                        write matched messages to specified output,\r\n                        format is autodetected from TARGET if not specified.\r\n                        Bag or database will be appended to if it already exists.\r\n                        Keyword arguments are given to output writer.\r\n                          commit-interval=NUM      transaction size for Postgres/SQLite output\r\n                                                   (default 1000, 0 is autocommit)\r\n                          dialect-file=path/to/dialects.yaml\r\n                                                   load additional SQL dialect options\r\n                                                   for Postgres/SQLite output\r\n                                                   from a YAML or JSON file\r\n                          message-yaml=true|false  whether to populate table field messages.yaml\r\n                                                   in SQLite output (default true)\r\n                          nesting=array|all        create tables for nested message types\r\n                                                   in Postgres/SQLite output,\r\n                                                   only for arrays if \"array\" \r\n                                                   else for any nested types\r\n                                                   (array fields in parent will be populated \r\n                                                    with foreign keys instead of messages as JSON)\r\n                          overwrite=true|false     overwrite existing file in bag/CSV/HTML/SQLite output\r\n                                                   instead of appending to if bag or database\r\n                                                   or appending unique counter to file name\r\n                                                   (default false)\r\n                          template=/my/path.tpl    custom template to use for HTML output\r\n  --plugin PLUGIN [PLUGIN ...]\r\n                        load a Python module or class as plugin\r\n                        (built-in plugins: grepros.plugins.embag, \r\n                         grepros.plugins.mcap, grepros.plugins.parquet, \r\n                         grepros.plugins.sql)\r\n\r\nFiltering:\r\n  -t TOPIC [TOPIC ...], --topic TOPIC [TOPIC ...]\r\n                        ROS topics to scan if not all (supports * wildcards)\r\n  -nt TOPIC [TOPIC ...], --no-topic TOPIC [TOPIC ...]\r\n                        ROS topics to skip (supports * wildcards)\r\n  -d TYPE [TYPE ...], --type TYPE [TYPE ...]\r\n                        ROS message types to scan if not all (supports * wildcards)\r\n  -nd TYPE [TYPE ...], --no-type TYPE [TYPE ...]\r\n                        ROS message types to skip (supports * wildcards)\r\n  --condition CONDITION [CONDITION ...]\r\n                        extra conditions to require for matching messages,\r\n                        as ordinary Python expressions, can refer to last messages\r\n                        in topics as {topic /my/topic}; topic name can contain wildcards.\r\n                        E.g. --condition \"{topic /robot/enabled}.data\" matches\r\n                        messages only while last message in '/robot/enabled' has data=true.\r\n  -t0 TIME, --start-time TIME\r\n                        earliest timestamp of messages to scan\r\n                        as relative seconds if signed,\r\n                        or epoch timestamp or ISO datetime\r\n                        (for bag input, relative to bag start time\r\n                        if positive or end time if negative,\r\n                        for live input relative to system time,\r\n                        datetime may be partial like 2021-10-14T12)\r\n  -t1 TIME, --end-time TIME\r\n                        latest timestamp of messages to scan\r\n                        as relative seconds if signed,\r\n                        or epoch timestamp or ISO datetime\r\n                        (for bag input, relative to bag start time\r\n                        if positive or end time if negative,\r\n                        for live input relative to system time,\r\n                        datetime may be partial like 2021-10-14T12)\r\n  -n0 INDEX, --start-index INDEX\r\n                        message index within topic to start from\r\n                        (1-based if positive, counts back from bag total if negative)\r\n  -n1 INDEX, --end-index INDEX\r\n                        message index within topic to stop at\r\n                        (1-based if positive, counts back from bag total if negative)\r\n  --every-nth-message NUM\r\n                        scan every Nth message within topic\r\n  --every-nth-interval SECONDS\r\n                        scan messages at least N seconds apart within topic\r\n  --every-nth-match NUM\r\n                        emit every Nth match in topic\r\n  -sf FIELD [FIELD ...], --select-field FIELD [FIELD ...]\r\n                        message fields to use in matching if not all\r\n                        (supports nested.paths and * wildcards)\r\n  -ns FIELD [FIELD ...], --no-select-field FIELD [FIELD ...]\r\n                        message fields to skip in matching\r\n                        (supports nested.paths and * wildcards)\r\n  -m NUM, --max-count NUM\r\n                        number of matched messages to emit (per each file if bag input)\r\n  --max-per-topic NUM   number of matched messages to emit from each topic\r\n                        (per each file if bag input)\r\n  --max-topics NUM      number of topics to emit matches from (per each file if bag input)\r\n  --unique-only         only emit matches that are unique in topic,\r\n                        taking --select-field and --no-select-field into account\r\n                        (per each file if bag input)\r\n\r\nOutput control:\r\n  -B NUM, --before-context NUM\r\n                        emit NUM messages of leading context before match\r\n  -A NUM, --after-context NUM\r\n                        emit NUM messages of trailing context after match\r\n  -C NUM, --context NUM\r\n                        emit NUM messages of leading and trailing context\r\n                        around match\r\n  -pf FIELD [FIELD ...], --print-field FIELD [FIELD ...]\r\n                        message fields to print in console output if not all\r\n                        (supports nested.paths and * wildcards)\r\n  -np FIELD [FIELD ...], --no-print-field FIELD [FIELD ...]\r\n                        message fields to skip in console output\r\n                        (supports nested.paths and * wildcards)\r\n  -mo, --matched-fields-only\r\n                        print only the fields where PATTERNs find a match\r\n  -la NUM, --lines-around-match NUM\r\n                        print only matched fields and NUM message lines\r\n                        around match\r\n  -lf NUM, --lines-per-field NUM\r\n                        maximum number of lines to print per field\r\n  -l0 NUM, --start-line NUM\r\n                        message line number to start printing from\r\n                        (1-based if positive, counts back from total if negative)\r\n  -l1 NUM, --end-line NUM\r\n                        message line number to stop printing at\r\n                        (1-based if positive, counts back from total if negative)\r\n  -lm NUM, --lines-per-message NUM\r\n                        maximum number of lines to print per message\r\n  --match-wrapper [STR [STR ...]]\r\n                        string to wrap around matched values,\r\n                        both sides if one value, start and end if more than one,\r\n                        or no wrapping if zero values\r\n                        (default \"**\" in colorless output)\r\n  --wrap-width NUM      character width to wrap message YAML output at,\r\n                        0 disables (defaults to detected terminal width)\r\n  --color {auto,always,never}\r\n                        use color output in console (default \"always\")\r\n  --no-meta             do not print source and message metainfo to console\r\n  --no-filename         do not print bag filename prefix on each console message line\r\n  --no-console-output   do not print matches to console\r\n  --progress            show progress bar when not printing matches to console\r\n  --verbose             print status messages during console output\r\n                        for publishing and writing\r\n  --no-verbose          do not print status messages during console output\r\n                        for publishing and writing\r\n\r\nBag input control:\r\n  -n FILE [FILE ...], --filename FILE [FILE ...]\r\n                        names of ROS bagfiles to scan if not all in directory\r\n                        (supports * wildcards)\r\n  -p PATH [PATH ...], --path PATH [PATH ...]\r\n                        paths to scan if not current directory\r\n                        (supports * wildcards)\r\n  -r, --recursive       recurse into subdirectories when looking for bagfiles\r\n  --order-bag-by {topic,type}\r\n                        order bag messages by topic or type first and then by time\r\n  --decompress          decompress archived bagfiles with recognized extensions (.zst .zstd)\r\n  --reindex-if-unindexed\r\n                        reindex unindexed bagfiles (ROS1 only), makes backup copies\r\n\r\nLive topic control:\r\n  --publish-prefix PREFIX\r\n                        prefix to prepend to input topic name on publishing match\r\n  --publish-suffix SUFFIX\r\n                        suffix to append to input topic name on publishing match\r\n  --publish-fixname TOPIC\r\n                        single output topic name to publish all matches to,\r\n                        overrides prefix and suffix\r\n  --queue-size-in SIZE  live ROS topic subscriber queue size (default 10)\r\n  --queue-size-out SIZE\r\n                        output publisher queue size (default 10)\r\n  --ros-time-in         use ROS time instead of system time for incoming message\r\n                        timestamps from subsribed live ROS topics\r\n```\r\n\r\n\r\nDependencies\r\n------------\r\n\r\ngrepros requires Python 3.8+ or Python 2.7,\r\nand the following 3rd-party Python packages:\r\n\r\n- pyyaml (https://pypi.org/project/PyYAML)\r\n- ROS1: rospy, roslib, rosbag, genpy\r\n- ROS2: rclpy, rosidl_parser, rosidl_runtime_py, builtin_interfaces\r\n\r\nOptional, for decompressing archived bags:\r\n\r\n- zstandard (https://pypi.org/project/zstandard)\r\n\r\nOptional, for faster reading of ROS1 bags:\r\n\r\n- embag (https://github.com/embarktrucks/embag)\r\n\r\nOptional, for Postgres output:\r\n\r\n- psycopg2 (https://pypi.org/project/psycopg2)\r\n\r\nOptional, for Parquet output:\r\n\r\n- pandas (https://pypi.org/project/pandas)\r\n- pyarrow (https://pypi.org/project/pyarrow)\r\n\r\nOptional, for MCAP input-output:\r\n\r\n- mcap (https://pypi.org/project/mcap)\r\n- mcap_ros1_support (https://pypi.org/project/mcap_ros1_support)\r\n- mcap_ros2_support (https://pypi.org/project/mcap_ros2_support)\r\n\r\nOptional, for generating API documentation:\r\n\r\n- doxypypy (https://pypi.org/project/doxypypy;\r\n            needs latest master: `pip install git+https://github.com/Feneric/doxypypy`)\r\n\r\n\r\nAttribution\r\n-----------\r\n\r\nIncludes a modified version of step, Simple Template Engine for Python,\r\n(c) 2012, Daniele Mazzocchio, https://github.com/dotpy/step,\r\nreleased under the MIT license.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2021 by Erki Suurjaak.\r\nReleased as free open source software under the BSD License,\r\nsee LICENSE.md for full details.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/suurjaak/grepros",
    "keywords": "ROS ROS1 ROS2 rosbag grep",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grepros",
    "package_url": "https://pypi.org/project/grepros/",
    "platform": "any",
    "project_url": "https://pypi.org/project/grepros/",
    "project_urls": {
      "Homepage": "https://github.com/suurjaak/grepros"
    },
    "release_url": "https://pypi.org/project/grepros/0.5.0/",
    "requires_dist": [
      "pyyaml"
    ],
    "requires_python": ">=2.7",
    "summary": "grep for ROS bag files and live topics",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15586468,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4710a748ccd0ac42c03097aeb4c3506c1c3a0050fc7ff7115599b89e537a0c88",
          "md5": "d21ca15847001bc09035215a3528fb46",
          "sha256": "41ef69686f3b40875eb2cfe8642d779014c074859251052f340f7af23a714c6a"
        },
        "downloads": -1,
        "filename": "grepros-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d21ca15847001bc09035215a3528fb46",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 26015,
        "upload_time": "2021-10-31T18:20:43",
        "upload_time_iso_8601": "2021-10-31T18:20:43.611485Z",
        "url": "https://files.pythonhosted.org/packages/47/10/a748ccd0ac42c03097aeb4c3506c1c3a0050fc7ff7115599b89e537a0c88/grepros-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41321451ee1353b890fc175e905abc4b0e9ac1cab1647458de5d39393e036557",
          "md5": "5a940dc35c03e69057c99c42dd1411ad",
          "sha256": "45388e1b7a989b50eab85e6b4118a9e433a8a6795c37d0eb657fd74e8a04f377"
        },
        "downloads": -1,
        "filename": "grepros-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a940dc35c03e69057c99c42dd1411ad",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 34082,
        "upload_time": "2021-11-04T22:59:19",
        "upload_time_iso_8601": "2021-11-04T22:59:19.847612Z",
        "url": "https://files.pythonhosted.org/packages/41/32/1451ee1353b890fc175e905abc4b0e9ac1cab1647458de5d39393e036557/grepros-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aa12a698c241f1d9a2aa39fc263c4ae2db30b22ba839f64fbb93be6351b34fd",
          "md5": "e5e2abed192ca6e180d7e3d59dba4d72",
          "sha256": "94b1ac7e157ad333b8e41c7498375fc98579d4a3c0e6e6c1c4f80acd6ebee126"
        },
        "downloads": -1,
        "filename": "grepros-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5e2abed192ca6e180d7e3d59dba4d72",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 50753,
        "upload_time": "2021-11-09T22:54:08",
        "upload_time_iso_8601": "2021-11-09T22:54:08.127612Z",
        "url": "https://files.pythonhosted.org/packages/5a/a1/2a698c241f1d9a2aa39fc263c4ae2db30b22ba839f64fbb93be6351b34fd/grepros-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e04aced1a2e6cc6a75c3039c01c4a601a525bdfa20e929432110df3bae7e11be",
          "md5": "e0124eb491466df82c6424b0dbac4b1d",
          "sha256": "eb57d127d8003985baad8cd725ba7dc7f0051707d4c19d9da501b251b35bc98b"
        },
        "downloads": -1,
        "filename": "grepros-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0124eb491466df82c6424b0dbac4b1d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 51999,
        "upload_time": "2021-11-10T22:31:21",
        "upload_time_iso_8601": "2021-11-10T22:31:21.212906Z",
        "url": "https://files.pythonhosted.org/packages/e0/4a/ced1a2e6cc6a75c3039c01c4a601a525bdfa20e929432110df3bae7e11be/grepros-0.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a326b176465bba41c8527a57f35183cf17847f552c668d1ac91cb55652e595d",
          "md5": "d5ffc74c5291276e14d2c24a5b960d1b",
          "sha256": "6621ed8ddf12a4e98f70d410dcd8a4244b176354c4ef6dd2a5befce75be76cea"
        },
        "downloads": -1,
        "filename": "grepros-0.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5ffc74c5291276e14d2c24a5b960d1b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 62097,
        "upload_time": "2021-11-16T09:37:25",
        "upload_time_iso_8601": "2021-11-16T09:37:25.848603Z",
        "url": "https://files.pythonhosted.org/packages/6a/32/6b176465bba41c8527a57f35183cf17847f552c668d1ac91cb55652e595d/grepros-0.2.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7709c194e84e54befaf72ce40d284736b067abdf35f19d1688d1e2b9bed8cba4",
          "md5": "933e07db5f7222a022abc5e0e0dea40a",
          "sha256": "4044f2f8f86ebeb9249e9fe3449e0c9b934c1759e63d769974d473a123c47f18"
        },
        "downloads": -1,
        "filename": "grepros-0.2.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "933e07db5f7222a022abc5e0e0dea40a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 62695,
        "upload_time": "2021-11-18T19:56:34",
        "upload_time_iso_8601": "2021-11-18T19:56:34.858805Z",
        "url": "https://files.pythonhosted.org/packages/77/09/c194e84e54befaf72ce40d284736b067abdf35f19d1688d1e2b9bed8cba4/grepros-0.2.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec0e8afea4520cf584009382ca2503d94bced1f63b9ca0e316d62d6e1524adbe",
          "md5": "a6b67810a60a50819e66c337772bf079",
          "sha256": "88bce3f916b1b8c0de48aaa8002a6feff4f2365d9eb64ca7178a34c872acade0"
        },
        "downloads": -1,
        "filename": "grepros-0.2.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6b67810a60a50819e66c337772bf079",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 71537,
        "upload_time": "2021-11-28T19:20:27",
        "upload_time_iso_8601": "2021-11-28T19:20:27.095543Z",
        "url": "https://files.pythonhosted.org/packages/ec/0e/8afea4520cf584009382ca2503d94bced1f63b9ca0e316d62d6e1524adbe/grepros-0.2.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e04ff64462f3263594c96520de75ec2d4288da507f08f3a1225faa1a62965e",
          "md5": "4d19eff4e35d6ab51f026aa7c60ca72a",
          "sha256": "2a31fca09e76af81732579bb41f20bbcae7e47abaa76b0bb9c7eaf73116a44d1"
        },
        "downloads": -1,
        "filename": "grepros-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d19eff4e35d6ab51f026aa7c60ca72a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 87924,
        "upload_time": "2021-12-06T08:58:07",
        "upload_time_iso_8601": "2021-12-06T08:58:07.102753Z",
        "url": "https://files.pythonhosted.org/packages/20/e0/4ff64462f3263594c96520de75ec2d4288da507f08f3a1225faa1a62965e/grepros-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "595b697f0b277c3f0f3119a6548696441c21dbd57ce56b9dc05be5b2fde67e8e",
          "md5": "f142bfa9b7129aa3fd4aa6b99842199f",
          "sha256": "59867d350114291d7e796a7ce923e915ce420cd3fe89cadf4c0a1fb94210c6d7"
        },
        "downloads": -1,
        "filename": "grepros-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f142bfa9b7129aa3fd4aa6b99842199f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 88376,
        "upload_time": "2021-12-06T19:09:08",
        "upload_time_iso_8601": "2021-12-06T19:09:08.480703Z",
        "url": "https://files.pythonhosted.org/packages/59/5b/697f0b277c3f0f3119a6548696441c21dbd57ce56b9dc05be5b2fde67e8e/grepros-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f4e53e6a052e196005ac3c1763611077dc7faa461babf95d1561b61b3b588d8",
          "md5": "3390254eeb051ad50eb335877de29474",
          "sha256": "963842d1eefee415f239cb7d3dd63b409bbdd7519bb12156c3530333b95a1f00"
        },
        "downloads": -1,
        "filename": "grepros-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3390254eeb051ad50eb335877de29474",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 93617,
        "upload_time": "2021-12-12T17:19:59",
        "upload_time_iso_8601": "2021-12-12T17:19:59.737551Z",
        "url": "https://files.pythonhosted.org/packages/2f/4e/53e6a052e196005ac3c1763611077dc7faa461babf95d1561b61b3b588d8/grepros-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ed9ad7179a29e85eb1a753df3037691155f6a8cd7f9dc6632214093dd78287a",
          "md5": "842a55413fc667a778c6805cef277f7f",
          "sha256": "47e9eb3c24c2f4740ba7d54653dff76a1e29da8ef75ec79fe93dead146e771fc"
        },
        "downloads": -1,
        "filename": "grepros-0.3.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "842a55413fc667a778c6805cef277f7f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 93640,
        "upload_time": "2021-12-13T09:46:30",
        "upload_time_iso_8601": "2021-12-13T09:46:30.940203Z",
        "url": "https://files.pythonhosted.org/packages/8e/d9/ad7179a29e85eb1a753df3037691155f6a8cd7f9dc6632214093dd78287a/grepros-0.3.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "238d1c1c7bc8b6581df1bbbb1221dfad0809c8db9ef0b5c5e51a2a0f72a1dbc8",
          "md5": "b82595cd7248a48ca54cc11e0c1f45b2",
          "sha256": "d1de98959ec177a3ea34c346c91a3538666461f22bc3fbd006b7752fb81e48fd"
        },
        "downloads": -1,
        "filename": "grepros-0.3.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b82595cd7248a48ca54cc11e0c1f45b2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 93654,
        "upload_time": "2021-12-14T08:12:28",
        "upload_time_iso_8601": "2021-12-14T08:12:28.677709Z",
        "url": "https://files.pythonhosted.org/packages/23/8d/1c1c7bc8b6581df1bbbb1221dfad0809c8db9ef0b5c5e51a2a0f72a1dbc8/grepros-0.3.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2194e6d767bfceb1453d7243f3c72d7d971f5e67c04b2738e44ab5485bf9bc4",
          "md5": "c987021d6f35a89ad0a187029f7008f5",
          "sha256": "cef8d36dda8ea00116dc37087234f10a256f65eacfdd8acb803f9de80604d177"
        },
        "downloads": -1,
        "filename": "grepros-0.3.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c987021d6f35a89ad0a187029f7008f5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 93654,
        "upload_time": "2021-12-14T09:55:13",
        "upload_time_iso_8601": "2021-12-14T09:55:13.085588Z",
        "url": "https://files.pythonhosted.org/packages/c2/19/4e6d767bfceb1453d7243f3c72d7d971f5e67c04b2738e44ab5485bf9bc4/grepros-0.3.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c661beeff432c41a011a02974d115c762e11f335a3c2e46b411a9ea192177d61",
          "md5": "c02f575c8ebb72aa829dbdf7e10e61f7",
          "sha256": "0645d53466183141f76eb1da50ec0156d00048b0e8d73c258e775d207295341e"
        },
        "downloads": -1,
        "filename": "grepros-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c02f575c8ebb72aa829dbdf7e10e61f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 112972,
        "upload_time": "2021-12-27T09:04:05",
        "upload_time_iso_8601": "2021-12-27T09:04:05.907429Z",
        "url": "https://files.pythonhosted.org/packages/c6/61/beeff432c41a011a02974d115c762e11f335a3c2e46b411a9ea192177d61/grepros-0.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81928ff682fcc368d575724f5fdc93794badba11c5ff80a2b6f9d35b16eaaa73",
          "md5": "1130a491ee95afa124c74ff05bbcd30b",
          "sha256": "d2465c90639ebd9524d375590fc6ca64e770115313e6ef0b657d889e5463df57"
        },
        "downloads": -1,
        "filename": "grepros-0.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1130a491ee95afa124c74ff05bbcd30b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 119035,
        "upload_time": "2022-01-10T18:23:44",
        "upload_time_iso_8601": "2022-01-10T18:23:44.913460Z",
        "url": "https://files.pythonhosted.org/packages/81/92/8ff682fcc368d575724f5fdc93794badba11c5ff80a2b6f9d35b16eaaa73/grepros-0.4.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24dcc730135d9890eae8941f66ca6c63a6fba82c5138cc88f6e1c08d6154d1e0",
          "md5": "9191061cf7ce453daa85debc1707773f",
          "sha256": "b0fabe311cf6248ec2f25ffa22bcdef6137612d36c7dd6771daadebfee879ce2"
        },
        "downloads": -1,
        "filename": "grepros-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9191061cf7ce453daa85debc1707773f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 122953,
        "upload_time": "2022-02-10T09:03:28",
        "upload_time_iso_8601": "2022-02-10T09:03:28.443552Z",
        "url": "https://files.pythonhosted.org/packages/24/dc/c730135d9890eae8941f66ca6c63a6fba82c5138cc88f6e1c08d6154d1e0/grepros-0.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86fce24bc458536891643c7892699cc177bb5c22d1185602e04beb3e5bed6b9d",
          "md5": "5589eb5cd4cbca13a27bb51ead318cff",
          "sha256": "e8eb03ca087c845f8048a42cf2b6205ba059202c041792e18fcacb862107f871"
        },
        "downloads": -1,
        "filename": "grepros-0.4.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5589eb5cd4cbca13a27bb51ead318cff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 123685,
        "upload_time": "2022-03-01T21:32:07",
        "upload_time_iso_8601": "2022-03-01T21:32:07.730704Z",
        "url": "https://files.pythonhosted.org/packages/86/fc/e24bc458536891643c7892699cc177bb5c22d1185602e04beb3e5bed6b9d/grepros-0.4.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fee4cee740a697976e52e0986d3b2c7db857750c8b1bb35b8ff6df114b0efbc1",
          "md5": "e911adec45a15f8819c94d42fdbc34b4",
          "sha256": "b67926af44378465aa1d18baa2f4390c3a0147b437700525e66231c897418198"
        },
        "downloads": -1,
        "filename": "grepros-0.4.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e911adec45a15f8819c94d42fdbc34b4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 127689,
        "upload_time": "2022-03-17T18:01:10",
        "upload_time_iso_8601": "2022-03-17T18:01:10.185835Z",
        "url": "https://files.pythonhosted.org/packages/fe/e4/cee740a697976e52e0986d3b2c7db857750c8b1bb35b8ff6df114b0efbc1/grepros-0.4.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27dc82c4e3011f1ccf0537b8f4a4ba1dd7dfdef0c9aebfad32765c1140cc6de5",
          "md5": "79de97653dc4892b38b0cdadf0f9d85a",
          "sha256": "ebccb0e02ad35cdd0c5e917856b2681a4e26ae32a5aa3deaeac2a63f43ac24df"
        },
        "downloads": -1,
        "filename": "grepros-0.4.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79de97653dc4892b38b0cdadf0f9d85a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 127704,
        "upload_time": "2022-04-19T16:20:19",
        "upload_time_iso_8601": "2022-04-19T16:20:19.127149Z",
        "url": "https://files.pythonhosted.org/packages/27/dc/82c4e3011f1ccf0537b8f4a4ba1dd7dfdef0c9aebfad32765c1140cc6de5/grepros-0.4.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c92d1c2a9e9b0cbf3f05ebd89f116dccc00ac9cf51b057f35e4bceffc763ae75",
          "md5": "c28322a1e4bbef2114f1efbed90eb8a6",
          "sha256": "18fce37808ff629e5ac12b7c81c7e6b19a7427d331fb75ba7618e50b16cb28bc"
        },
        "downloads": -1,
        "filename": "grepros-0.4.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c28322a1e4bbef2114f1efbed90eb8a6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 127760,
        "upload_time": "2022-05-26T17:34:47",
        "upload_time_iso_8601": "2022-05-26T17:34:47.746349Z",
        "url": "https://files.pythonhosted.org/packages/c9/2d/1c2a9e9b0cbf3f05ebd89f116dccc00ac9cf51b057f35e4bceffc763ae75/grepros-0.4.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4578598c42d262f6c026b6bf3baef37e15635c007c889c2e9fc5ce30594ae864",
          "md5": "91f60ce9a720c0fe171ca0fcde658941",
          "sha256": "75a8966c4af89cb6aa488f9d08c608ab6ba001fd9fe7bd3d572323c5272b0a4a"
        },
        "downloads": -1,
        "filename": "grepros-0.4.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91f60ce9a720c0fe171ca0fcde658941",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 127758,
        "upload_time": "2022-06-20T17:44:44",
        "upload_time_iso_8601": "2022-06-20T17:44:44.689743Z",
        "url": "https://files.pythonhosted.org/packages/45/78/598c42d262f6c026b6bf3baef37e15635c007c889c2e9fc5ce30594ae864/grepros-0.4.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a03d3d05d435fa065e871329cd27281d639e306220fb5a84b81d510f5c569499",
          "md5": "21d57c16a0ff8854b71472c5345a6937",
          "sha256": "fa981cd75457d571d77f1d2088f237f180afc9921fbe68e4e5ad090d151cdb4d"
        },
        "downloads": -1,
        "filename": "grepros-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21d57c16a0ff8854b71472c5345a6937",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 134988,
        "upload_time": "2022-10-30T12:59:12",
        "upload_time_iso_8601": "2022-10-30T12:59:12.604172Z",
        "url": "https://files.pythonhosted.org/packages/a0/3d/3d05d435fa065e871329cd27281d639e306220fb5a84b81d510f5c569499/grepros-0.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a03d3d05d435fa065e871329cd27281d639e306220fb5a84b81d510f5c569499",
        "md5": "21d57c16a0ff8854b71472c5345a6937",
        "sha256": "fa981cd75457d571d77f1d2088f237f180afc9921fbe68e4e5ad090d151cdb4d"
      },
      "downloads": -1,
      "filename": "grepros-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "21d57c16a0ff8854b71472c5345a6937",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7",
      "size": 134988,
      "upload_time": "2022-10-30T12:59:12",
      "upload_time_iso_8601": "2022-10-30T12:59:12.604172Z",
      "url": "https://files.pythonhosted.org/packages/a0/3d/3d05d435fa065e871329cd27281d639e306220fb5a84b81d510f5c569499/grepros-0.5.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}