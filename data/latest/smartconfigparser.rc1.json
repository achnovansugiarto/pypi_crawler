{
  "info": {
    "author": "CÃ©dric RICARD",
    "author_email": "ricard33@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Utilities"
    ],
    "description": "SmartConfigParser\n==================\n\n.. image:: https://travis-ci.org/ricard33/smartconfigparser.png\n   :target: https://travis-ci.org/ricard33/smartconfigparser\n\nBuilds on top of the builtin SafeConfigParser but adds various\nconvenience functionalities like default values.\n\n.. code:: python\n\n    from smartconfigparser import Config\n\n    config = Config()\n    config.read('config.ini')\n\n    user = config.get('SECTION', 'user', 'John')\n    age = config.getint('SECTION', 'age', 28)\n    weight = config.getfloat('SECTION', 'weight', 80.2)\n    is_developer = config.getboolean('SECTION', 'is_developer', True)\n    hobbies = config.getlist('SECTION', 'hobbies', ['diving', 'making software'])\n\n    # if SECTION does not exist in config.ini get default values\n    print(user, age, weight, is_developer, hobbies)\n    # ('John', 28, 80.2, True, ['diving', 'making software'])\n\nInstallation\n============\n\nInstall it with pip:\n\n    pip install smartconfigparser\n\n\nTest\n====\n\nrun tests\n\n    python test_smartconfigparser.py\n\nExample\n=======\n\nDJANGO default settings file\n\n.. code:: python\n\n    import os\n    from smartconfigparser import Config\n\n    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n    CONFIG_PATH = os.path.join(BASE_DIR, 'config')\n    if not os.path.exists(CONFIG_PATH):\n        os.makedirs(CONFIG_PATH)\n\n    CONFIG_FILE = os.path.join(CONFIG_PATH, 'config.ini')\n    config = Config()\n    config.read(CONFIG_FILE)\n\n    try:\n        SECRET_KEY = config.get('DJANGO', 'SECRET_KEY')\n    except:\n        print('SECRET_KEY not found! Generating a new one...')\n        import random\n\n        SECRET_KEY = \"\".join([random.choice(\"abcdefghijklmnopqrstuvwxyz0123456789!@#$^&*(-_=+)\") for i in range(50)])\n        if not config.has_section('DJANGO'):\n            config.add_section('DJANGO')\n        config.set('DJANGO', 'SECRET_KEY', SECRET_KEY)\n        with open(CONFIG_FILE, 'wt') as f:\n            config.write(f)\n\n    DEBUG = config.getboolean('DJANGO', 'DEBUG', False)\n\n    ALLOWED_HOSTS = config.getlist('DJANGO', 'ALLOWED_HOSTS', ['localhost', '127.0.0.1'])\n\n    # ...\n\n    DATABASES = {\n        'default': {\n            'ENGINE': config.get('DATABASE', 'engine', 'django.db.backends.sqlite3'),\n            'NAME': config.get('DATABASE', 'name', 'db.sqlite3'),\n            'USER': config.get('DATABASE', 'user', ''),\n            'PASSWORD': config.get('DATABASE', 'password', ''),\n            'HOST': config.get('DATABASE', 'host', ''),\n            'PORT': config.get('DATABASE', 'port', ''),\n        }\n    }\n\n\nconfig.ini file for a developer\n::\n\n    [DJANGO]\n    DEBUG = True\n\n\nconfig.ini file for production server\n::\n\n    [DATABASE]\n    engine = django.db.backends.postgresql\n    name = database\n    user = postgres_db_user\n    password = very_strong_password\n    host = localhost\n    port = 5432\n\n\nUsage\n=====\n\nsmartconfigparser.get\n---------------------\n\nconfig.get(section, option, default_value)\n\nsame as ConfigParser.get() method except that it return default value if section or option does not exists\n\n\nsmartconfigparser.getint\n------------------------\n\nconfig.getint(section, option, default_value)\n\nsame as ConfigParser.getint() method except that it return default value if section or option does not exists\n\n\nsmartconfigparser.getfloat\n--------------------------\n\nconfig.getfloat(section, option, default_value)\n\nsame as ConfigParser.getfloat() method except that it return default value if section or option does not exists\n\n\nsmartconfigparser.getboolean\n----------------------------\n\nconfig.getboolean(section, option, default_value)\n\nsame as ConfigParser.getboolean() method except that it return default value if section or option does not exists\n\n\nsmartconfigparser.getlist\n-------------------------\n\nconfig.getlist(section, option, default_list)\n\nReturn a list of the words in the option value, using comma (',') as the delimiter string\n\nconfig.ini file \n::\n\n    [section]\n    list = a,b,c\n\nexample \n\n.. code:: python\n\n    print(config.getlist('section', 'list', []))\n    # ['a', 'b', 'c']\n    print(config.getlist('section_does_not_exists', 'list', []))\n    # []\n\nsmartconfigparser.set\n---------------------\n\nconfig.set(section, option, value)\n\nsame as ConfigParser.set() method except that it create section if section does not exists\n\nexample \n\n.. code:: python\n\n    from smartconfigparser import Config\n\n    config = Config()\n    config.set('section_does_not_exist', 'user', 'John DOE')\n    with open('config.ini', 'wt') as configfile:\n        config.write(configfile)\n\nconfig.ini\n::\n\n    [section_does_not_exist]\n    user = John DOE\n\n\nLicense\n=======\nMIT - See LICENSE file\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ricard33/smartconfigparser",
    "keywords": "ConfiParser,ini",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SmartConfigParser",
    "package_url": "https://pypi.org/project/SmartConfigParser/",
    "platform": "any",
    "project_url": "https://pypi.org/project/SmartConfigParser/",
    "project_urls": {
      "Homepage": "http://github.com/ricard33/smartconfigparser"
    },
    "release_url": "https://pypi.org/project/SmartConfigParser/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simplifies and enchances functionalities in Python's ConfigParser",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7461046,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48b5647dba4170ae2d1af14e3829c4e3aecb4cf5eeba775b3cf5097b6b0244fa",
          "md5": "c33e8c38a68fa398dc394d4aa8f560d2",
          "sha256": "9b000a8a48bc99c30980cebf2e207b2fe9613a952d3d8563be90b0b8cd545ab4"
        },
        "downloads": -1,
        "filename": "SmartConfigParser-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c33e8c38a68fa398dc394d4aa8f560d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4902,
        "upload_time": "2020-06-12T13:08:40",
        "upload_time_iso_8601": "2020-06-12T13:08:40.364996Z",
        "url": "https://files.pythonhosted.org/packages/48/b5/647dba4170ae2d1af14e3829c4e3aecb4cf5eeba775b3cf5097b6b0244fa/SmartConfigParser-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b064cda2c2c26e0cdbced075903adf76d0bdce9b5a667aad5e2b6239b7bd890",
          "md5": "1a3089d484542096fcb15ef56e3c4c05",
          "sha256": "5b45dd2f57fdd9e4441e705c64636c72a5f0e956c2028a77e7c07d79efead887"
        },
        "downloads": -1,
        "filename": "SmartConfigParser-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a3089d484542096fcb15ef56e3c4c05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4272,
        "upload_time": "2020-06-12T13:08:42",
        "upload_time_iso_8601": "2020-06-12T13:08:42.677149Z",
        "url": "https://files.pythonhosted.org/packages/8b/06/4cda2c2c26e0cdbced075903adf76d0bdce9b5a667aad5e2b6239b7bd890/SmartConfigParser-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48b5647dba4170ae2d1af14e3829c4e3aecb4cf5eeba775b3cf5097b6b0244fa",
        "md5": "c33e8c38a68fa398dc394d4aa8f560d2",
        "sha256": "9b000a8a48bc99c30980cebf2e207b2fe9613a952d3d8563be90b0b8cd545ab4"
      },
      "downloads": -1,
      "filename": "SmartConfigParser-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c33e8c38a68fa398dc394d4aa8f560d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4902,
      "upload_time": "2020-06-12T13:08:40",
      "upload_time_iso_8601": "2020-06-12T13:08:40.364996Z",
      "url": "https://files.pythonhosted.org/packages/48/b5/647dba4170ae2d1af14e3829c4e3aecb4cf5eeba775b3cf5097b6b0244fa/SmartConfigParser-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b064cda2c2c26e0cdbced075903adf76d0bdce9b5a667aad5e2b6239b7bd890",
        "md5": "1a3089d484542096fcb15ef56e3c4c05",
        "sha256": "5b45dd2f57fdd9e4441e705c64636c72a5f0e956c2028a77e7c07d79efead887"
      },
      "downloads": -1,
      "filename": "SmartConfigParser-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1a3089d484542096fcb15ef56e3c4c05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4272,
      "upload_time": "2020-06-12T13:08:42",
      "upload_time_iso_8601": "2020-06-12T13:08:42.677149Z",
      "url": "https://files.pythonhosted.org/packages/8b/06/4cda2c2c26e0cdbced075903adf76d0bdce9b5a667aad5e2b6239b7bd890/SmartConfigParser-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}