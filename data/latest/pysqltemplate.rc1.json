{
  "info": {
    "author": "Kevin Crouse",
    "author_email": "krcrouse@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n# pysqltemplate\n\nThe pysqltemplate package (sqltemplate module) is a Python library that provides an object-oriented abstraction for SQL SELECT queries. The objects are composable, extendable, and flexible. The first production use of pysqltemplate was in maintaining a library of complex queries that shared significant pieces but differed in their intent, and pysqltemplate allowed the shared pieces to maintained centrally for easy modification as criteria changed.\n\npysqltemplate is not an Object-Relational Mapping (ORM) of a database model. Instead, it would be better described as an object-oriented SQL builder and templating system. There are core concepts of the Query, a Clause (which refers to each of the parts of a SQL query), and a Phrase (one part of a clause). However, as with SQL statements, some of these are interoperable at times (though not in every case): \n* A Query can become a Prhase with the FROM (Table) Clause\n* A Query can often be transformed into an EXISTS phrase programmatically\n* The GROUP BY clause can often be autodetermined from the SELECT clause \n\n## templates\n\npysqltemplate itself comes with a rather unsophisticated templating system for reusing SQL phrases with some alteration. Simply, any pysqltemplate object has a template_values property, which can map a set of alphanumeric keys to values to apply whenever SQL is requested. The templates are defined in the phrasal text by surrounded it in '@', and possibly providing additional information.  For example:\n\n```python \n\npersontbl = sqltemplate.TableClause('person', join_condition='@connector@.personid = person.personid')\n\nQ1 = sqltemplate.Query(\n    select='*',\n    tables=[\n        'action', \n        persontbl.extend_template(connector='action')\n    ]\n)\n\nQ2 = sqltemplate.Query(\n    select='*',\n    tables=[\n        'characteristic', \n        persontbl.extend_template(connector='characteristic')\n    ]\n)\n```\n\n### template syntax\n\nThere are some additional syntactic options for templates besides the direct repace @word@:\n\n#### Default Templates\n\n**Indicator**: Pipe Separation \n**Template Example**: @templatekey|defaultvalue@\n**Definition**: Specifies a default value if the sqltemplate object has no value defined for the template key.\n**Usage Example**:\n```python\npersontbl = sqltemplate.TableClause(\n    'person', \n    join_condition='@connector|identity@.personid = person.personid',\n)\n```\n\n#### Function Syntax\n\n**Indicator**: Colon Separation \n**Template Example**: @function:templatekey@\n**Definition**: Specifies a function to call with the current sql (and the value for the templatekey). The function must be defined as template_function_{function}. Some functional templates are already defined (and listed below).\n**Usage Example**:\n```python\n\nclass ExpandedTableClause(sqltemplate.TableClause):\n\n    @classmethod\n    def template_function_between(cls, sql, clause, value):\n        sql = sql.replace(clause, value + \" BETWEEN startdate and enddate\")\n\nenrltemplate = ExpandedTableClause(\n    'enrollment', \n    join_condition='@between:date@',\n)\n\ncurrentenrl = enrltemplate.extend_template(date='sysdate')\njan1enrl = enrltemplate.extend_template(date=\"to_date('2021-01-01', 'YYYY-MM-DD')\")\n```\n\n### Defined Template Functions\n\nThe following are pre-defined functions that can be used in templates.\n\n#### Generic Equals (eq)\n**Function**: eq \n**Definition**: Depending on whether the value is a list of multiple values or just a single value, will write a phrase in either equal format or inlist format \n**Usage Example**:\n```python\n\ntmpl = sqltemplate.Table(\n    'person', \n    join_condition='@eq:id@',\n)\n\nthisperson = tmpl.extend_template(id=55)\nthosepersons = tmpl.extend_template(id=[100,200,300])\n```\n\n#### Generic Not-Equals (ne)\n**Function**: ne\n**Definition**: Depending on whether the value is a list of multiple values or just a single value, will write a phrase in either not-equal format or not inlist format \n**Usage Example**:\n```python\n\ntmpl = sqltemplate.Table(\n    'person', \n    join_condition='@ne:id@',\n)\n\nthisperson = tmpl.extend_template(id=55)\nthosepersons = tmpl.extend_template(id=[100,200,300])\n```\n\n\n## Distribution\n* [GitLab Project](https://gitlab.com/krcrouse/sqltemplate)\n* [PyPI Distribution Page](https://pypi.org/project/sqltemplate)\n\n\n## Project Status\n\nCurrently, sqltemplate has been used in practice but is shallowly vetted condition and should be considered somewhere between **alpha** and **beta** software. \n\nIf you wish to rely on features of this package, I am likely more than willing to accommodate and to incorporate sensible design improvements or, in some cases, changes.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install sqltemplate.\n\n```bash\npip install sqltemplate\n```\n\n## Usage\n\nMany examples of usage are available in the main test files included in the t/ subdirectory.\n\n```python\nimport sqltemplate\n\nstandard_select = sqltemplate.SelectClause('person.name', 'person.id', 'person.birthdate', 'address.city')\n\nenrollment = sqltemplate.TableClause(\n    'enrollment', \n    join_condition = 'enrollment.personid = person.personid',\n    exists_condition = 'enrollment.personid = person.personid',\n)\n\nbasequery = sqltemplate.Query(\n    select=standard_select,\n    tables=[\n        'person',\n        enrollment,\n        sqltemplate.TableClause('address', join_condition=[ 'address.personid = person.personid', 'address.active=1'] )\n    ]\n)\n\nactive_people = basequery.copy(extend_where=\"enrollment.status = 'active'\")\n\ninactive_people = basequery.copy(extend_where=\"enrollment.status = 'inactive'\")\n\npeople_with_no_enrollments = sqltemplate.Query(\n    select=standard_select,\n    tables=['person'],\n    where=[ enrollment.as_exists(negate=True)],\n)\n\n```\n\n## Contributing\nContributions are collaboration is welcome. For major changes, please contact me in advance to discuss.\n\nPlease make sure to update tests for any contribution, as appropriate.\n\n## Author\n\n[Kevin Crouse](mailto:krcrouse@gmail.com). Copyright, 2021.\n\n## License\n[Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/krcrouse/sqltemplate",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysqltemplate",
    "package_url": "https://pypi.org/project/pysqltemplate/",
    "platform": "",
    "project_url": "https://pypi.org/project/pysqltemplate/",
    "project_urls": {
      "Homepage": "https://gitlab.com/krcrouse/sqltemplate"
    },
    "release_url": "https://pypi.org/project/pysqltemplate/0.0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package to write composable, generic SQL objects that can be flexibly reused and combined. Like an ORM, but not an ORM.",
    "version": "0.0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10236172,
  "releases": {
    "0.0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "604422987498f500cd085d1dc7cdd651dddd5eee559b6f74478c35087dfea31b",
          "md5": "35184d0022d14e9c6a84955a490199b0",
          "sha256": "586bcd508e638ab549bed20e5fb3f7c8ed20cbb92cdd6788cb40835395420811"
        },
        "downloads": -1,
        "filename": "pysqltemplate-0.0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35184d0022d14e9c6a84955a490199b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23728,
        "upload_time": "2021-05-03T00:34:32",
        "upload_time_iso_8601": "2021-05-03T00:34:32.241310Z",
        "url": "https://files.pythonhosted.org/packages/60/44/22987498f500cd085d1dc7cdd651dddd5eee559b6f74478c35087dfea31b/pysqltemplate-0.0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31f17fdb96f80055f91cbfb77680cf0d015b46f4337cfd7a685d066566c61a07",
          "md5": "447d71e382677693a3525c73c0084df1",
          "sha256": "2e0ff943ef45671f2ae0034c42f6a205c0bc41c04ad06b35b88655b8cf1893ee"
        },
        "downloads": -1,
        "filename": "pysqltemplate-0.0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "447d71e382677693a3525c73c0084df1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17728,
        "upload_time": "2021-05-03T00:34:34",
        "upload_time_iso_8601": "2021-05-03T00:34:34.918780Z",
        "url": "https://files.pythonhosted.org/packages/31/f1/7fdb96f80055f91cbfb77680cf0d015b46f4337cfd7a685d066566c61a07/pysqltemplate-0.0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "604422987498f500cd085d1dc7cdd651dddd5eee559b6f74478c35087dfea31b",
        "md5": "35184d0022d14e9c6a84955a490199b0",
        "sha256": "586bcd508e638ab549bed20e5fb3f7c8ed20cbb92cdd6788cb40835395420811"
      },
      "downloads": -1,
      "filename": "pysqltemplate-0.0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35184d0022d14e9c6a84955a490199b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23728,
      "upload_time": "2021-05-03T00:34:32",
      "upload_time_iso_8601": "2021-05-03T00:34:32.241310Z",
      "url": "https://files.pythonhosted.org/packages/60/44/22987498f500cd085d1dc7cdd651dddd5eee559b6f74478c35087dfea31b/pysqltemplate-0.0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31f17fdb96f80055f91cbfb77680cf0d015b46f4337cfd7a685d066566c61a07",
        "md5": "447d71e382677693a3525c73c0084df1",
        "sha256": "2e0ff943ef45671f2ae0034c42f6a205c0bc41c04ad06b35b88655b8cf1893ee"
      },
      "downloads": -1,
      "filename": "pysqltemplate-0.0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "447d71e382677693a3525c73c0084df1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17728,
      "upload_time": "2021-05-03T00:34:34",
      "upload_time_iso_8601": "2021-05-03T00:34:34.918780Z",
      "url": "https://files.pythonhosted.org/packages/31/f1/7fdb96f80055f91cbfb77680cf0d015b46f4337cfd7a685d066566c61a07/pysqltemplate-0.0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}