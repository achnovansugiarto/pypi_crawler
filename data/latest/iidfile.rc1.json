{
  "info": {
    "author": "aeaeaeae",
    "author_email": "ouououou@aeaeaeae.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "IID fileformat (.iid)\n=====================\n\n`.iid` files contains a list of masks and labels associated with an image. It is a file format for storing image segmentations mapped to **Individual IDentifiers** (IIDs). \n\nThis package provides methods for loading, saving, searching and computing data from `.iid` files. \n\n> Why? Because it was needed to map this [ae73edb74571e4e2](https://www.instagram.com/ae73edb74571e4e2).\n\n## Installation\n\n```bash \npip install iidfile\n```\n\n## Quick Example\n\n~~~python\nfrom iidfile import IIDFile\n\nmask = np.ones(shape, dtype=np.bool)\nbbox = (minr, minc, maxr, maxc)\n\n# Create iidfile\niidfile = IIDFile()\niidfile.add(address=b'foo', domain=b'bar', bbox=bbox, mask=mask)\niidfile.save('path/file.iid')\n\n# Load iidfile\niidfile = IIDFile(fpath=\"path/file.iid\")\nentries = iidfile.fetch(everything=True)\n~~~\n\n## Overview\n\nIID files are not image files, rather they store labeled segments that maps a image file. The IID files have no set resolution, instead every segments has a bounding box that places the segment mask on the image it maps. There is no limit to the number segments or the ways that they can overlap. Overlaps has no depth hierachy, there is no concept of in front or behind.\n\n### Entries\n\nInternally an `.iid` file contain a lookup table, where each _entry_ stores an IID and a segment pair. Each entry have a key, which correspond to their position in the lookup table.\n\n```python\n# Add entry (iid, segment) to iidfile\niidfile.add(address=b'foo', domain=b'bar', bbox=bbox, mask=mask)\n\n# Get the first entry\nentry = iidfile.fetch(everything=True)[0]\n\n# Attributes\nkey = entry.key\naddress = entry.iid.address\ndomain = entry.iid.domain\nmask = entry.seg.mask()\nbbox = entry.seg.bbox\n```\n\n### Segments\n\nSegments are binary masks placed by a bounding box. These masks are paired to a single IID each, and thereby maps the part of the image they cover to that spesific IID.\n\n### IID (Individual IDentifiers)\n\nIIDs are labels composed of an _address_ and a _domain_. Both the domain and address is stored as raw byte strings. There is no length limit to this bytestring. The domain defines the context (what language/protocol) and address defines the name of the label in that context.\n\nThe purpose of IIDs is to provide globally unique labels that can link segments across `.iid` files.\n\n```python\n# Masks are binary numpy buffers\nmask = np.zeros(shape, dtype=np.bool)\n\n# Bounding boxes determine the placement of the mask in the image coordinate space\nh, w = mask.shape\nbbox = y, x, y+h, x+w  # minr, minc, maxr, maxc\n\niidfile.add(address=b'foo', domain=b'bar', bbox=bbox, mask=mask)\n```\n\n## Features\n\nAn IID-file is structured with a lookup table that maps the memory location of the entry data. This enables selective loading of file-content. Selective loading can limit the parsing needed when searching through large `.iid` files. This python implementation uses `mmap` to parse spesific parts of the file-buffer.\n\n#### Groups\n\nGroups are sets of entries, they enable faster and targeted loading of segments.\n\n```python\n# Adding entry to group on creation\niidfile.add(address=b'foo', domain=b'bar', bbox=bbox, mask=mask, group='sys')\niidfile.save('path/file.iid')\n\n# Only load segments in specified group\niidfile = IIDFile(fpath='path/file.iid')\nentries = iidfile.fetch(groups=['sys'])\n```\n\n#### Metadata\n\nAn embedded dict stores any additional meta data, this can be camera parameters or info about the external image. The dict must be JSON serializable.\n\n```python\nmetadata = iidfile.meta.data\n```\n\n#### Segments and regions\n\nInternally segments are split up into smaller regions of connected patches, this compresses the segment mask buffer, especially when the mask is large and scattered.\n\n![image segment regions](https://github.com/aeaeaeaeaeae/data/blob/master/image_segments_regions.jpg)\n\n## References\n\n> Use docstring for details.\n\n#### IIDFile\n\n+ `add` - Add an entry (iid and segment) to file\n+ `save` - Save file to disk\n+ `fetch` - Selective loading of entries\n+ `look_for` - Search for iids\n+ `filter` - Filter loaded entries\n+ `at` - Get segments intersecting at position\n+ `region` - Get segments intersecting with a given bounding box\n+ `compute_overlap` - Computes an overlap graph from loaded segments\n\n\n## Examples\n\nðŸ“¦ [Download some example .iid files]()\n\n#### Assign segments and save to disk\n\n```python\nfrom iidfile import IIDFile\n\niidfile = IIDFile()  # Creates empty iidfile\n\ndata = [\n  (b'tree', numpy_buffer_1, xy_1),\n  (b'leaf', numpy_buffer_2, xy_2),\n  (b'root', numpy_buffer_3, xy_3)\n]\n\nfor iid, mask, xy in data:\n\n  # Format bbox to minr, minc, maxr, maxc\n  x, y, w, h = *xy, mask.shape[1], mask.shape[0]\n  bbox = (y, x, y+h, x+w)\n\n  iidfile.add(address=iid, domain=b'example', bbox=bbox, mask=mask)\n\niidfile.save(fpath='example.iid')\n```\n\n#### Fetch content from saved file\n\n```python\n# Load everything\niidfile = IIDFile(fpath='example.iid')\nentries = iidfile.fetch(everything=True)\n\n# Only load entries in group 'sys', and only load their iids,\n# this will not load their segments.\niidfile = IIDFile(fpath='example.iid')\nentries = iidfile.fetch(groups=['sys'], iids=True)\n\n# Load all entries and only load their segments, \n# this will not load their iids.\niidfile = IIDFile(fpath='example.iid')\nentries = iidfile.fetch(all_keys=True, segs=True)\n\n# Only load the first 50 entries.\niidfile = IIDFile(fpath='example.iid')\nentries = iidfile.fetch(keys=range(50), iids=True)\n```\n\n#### Query, filter and look for content\n\n```python\n# Finds all segments intersecting at x:400, y:600.\niidfile = IIDFile(fpath='example.iid')\nentries = iidfile.at(400, 600)\n\n# Only fetch entries in the group 'sys', do not load thier\n# iids and find which intersects with the bounding box.\niidfile = IIDFile(fpath='example.iid')\niidfile.fetch(group=['sys'], iids=False)\nentries = iidfile.region(bbox, only_loaded=True)\n\n# Check if iid addressess exists in file.\niidfile = IIDFile(fpath='example.iid')\nentries = iidfile.look_for(addresses=[b'tree', b'leaf'])\n\n# Filter entries in file, this return entries in the group\n# 'rep' with a segment area of 4000 and greater.\niidfile = IIDFile(fpath='example.iid')\niidfile.fetch(everything=True)\nentries = iidfile.filter(groups=['rep'], area=(4000, None))\n```\n\nFileformat\n----------\n\nDescribed with psuedo-BNF. Types contained in brackets `{ }` represents lists.\n\n##### Common types\n\n```\nchar      ::= 1 byte\nuint8     ::= 1 byte\nuint16    ::= 2 byte                       short\nuint32    ::= 4 byte                       32-bit unsigned integer\nlen       ::= uint32                       length in bytes\nstring    ::= len { char }\njson      ::= string                       raw json string\nbufloc    ::= uint32 uint32                buffer location, offset and length\n```\n\n##### File structure\n\n```\nfile      ::= header\n              lut                          lookup table (LUT) from key to iid and segment\n              iids                         \n              meta                         meta data as json\n              groups                       groups\n              segments                     segments\n\nheader    ::= version                      format version number\n              rformat                      TODO: consider removing?\n              bufloc_lut                   location of lookuptable\n              bufloc_iids                  location of iid data (relative)\n              bufloc_meta                  location of meta data\n              bufloc_groups                location of groups\n              bufloc_segs                  location of segments\n\nversion   ::= uint32\nrformat   ::= uint32\n\nlut       ::= { key iid seg }               \niids      ::= { key len len bytes bytes }  key, len, len, domain, iid\nmeta      ::= json                         metadata and other info\n\ngroups    ::= len json { group }           len, group list, group data\ngroup     ::= { key }                      list of LUT keys\n\nkey       ::= uint32                       LUT key, maps to iid and segment\niid       ::= bufloc                       location of iid\nseg       ::= bufloc                       location of segment\n\nsegments  ::= { key bbox area { region } }\nregion    ::= len bbox { byte }            len, bbox, mask buffer\n\narea      ::= uint32                       counted in pixels\nbbox      ::= uint16*4                     minr, minc, maxr, maxc\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aeaeaeaeaeae/iidformat",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iidfile",
    "package_url": "https://pypi.org/project/iidfile/",
    "platform": "",
    "project_url": "https://pypi.org/project/iidfile/",
    "project_urls": {
      "Homepage": "https://github.com/aeaeaeaeaeae/iidformat"
    },
    "release_url": "https://pypi.org/project/iidfile/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "File parser for .iid files, for storing labeled image segmentation data.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8755665,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b99b37ef35d34c23cb2ced6a80eb51b3e622bf10f10a6187cf8b244f360d00d9",
          "md5": "c83b12d86061ddb08ba7aafae8b9c5ee",
          "sha256": "00b6bac3481bda6b187296177118c5de49dd9301e54b0fefb77bf801f7e4a94f"
        },
        "downloads": -1,
        "filename": "iidfile-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c83b12d86061ddb08ba7aafae8b9c5ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26994,
        "upload_time": "2020-11-26T13:55:09",
        "upload_time_iso_8601": "2020-11-26T13:55:09.463462Z",
        "url": "https://files.pythonhosted.org/packages/b9/9b/37ef35d34c23cb2ced6a80eb51b3e622bf10f10a6187cf8b244f360d00d9/iidfile-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3df82d50a70f2db317971be3eeaa1dcf15701cc3623020095f283d712a56716f",
          "md5": "d4f7fb7be9bdff64037226bc19a163cb",
          "sha256": "6b978937a0abe2a33758401a420e9aa2bd0a452449327a213ae1da286c881737"
        },
        "downloads": -1,
        "filename": "iidfile-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4f7fb7be9bdff64037226bc19a163cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17221,
        "upload_time": "2020-11-26T13:55:10",
        "upload_time_iso_8601": "2020-11-26T13:55:10.930431Z",
        "url": "https://files.pythonhosted.org/packages/3d/f8/2d50a70f2db317971be3eeaa1dcf15701cc3623020095f283d712a56716f/iidfile-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b99b37ef35d34c23cb2ced6a80eb51b3e622bf10f10a6187cf8b244f360d00d9",
        "md5": "c83b12d86061ddb08ba7aafae8b9c5ee",
        "sha256": "00b6bac3481bda6b187296177118c5de49dd9301e54b0fefb77bf801f7e4a94f"
      },
      "downloads": -1,
      "filename": "iidfile-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c83b12d86061ddb08ba7aafae8b9c5ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26994,
      "upload_time": "2020-11-26T13:55:09",
      "upload_time_iso_8601": "2020-11-26T13:55:09.463462Z",
      "url": "https://files.pythonhosted.org/packages/b9/9b/37ef35d34c23cb2ced6a80eb51b3e622bf10f10a6187cf8b244f360d00d9/iidfile-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3df82d50a70f2db317971be3eeaa1dcf15701cc3623020095f283d712a56716f",
        "md5": "d4f7fb7be9bdff64037226bc19a163cb",
        "sha256": "6b978937a0abe2a33758401a420e9aa2bd0a452449327a213ae1da286c881737"
      },
      "downloads": -1,
      "filename": "iidfile-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d4f7fb7be9bdff64037226bc19a163cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17221,
      "upload_time": "2020-11-26T13:55:10",
      "upload_time_iso_8601": "2020-11-26T13:55:10.930431Z",
      "url": "https://files.pythonhosted.org/packages/3d/f8/2d50a70f2db317971be3eeaa1dcf15701cc3623020095f283d712a56716f/iidfile-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}