{
  "info": {
    "author": "jblom",
    "author_email": "jblom@beeldengeluid.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Introduction\n\nPython library for creating \"processing workflows\" that use [DANE environments](https://github.com/beeldengeluid/dane-environments), which in a nutshell offer, depending on the setup of each environment, an API for some kind of multi-media processing, e.g.:\n\n* Automatic Speech Recognition\n* Named Entity Extraction\n* Computer Vision algorithms\n* Any kind of Machine Learning algorithm\n\nThis Python library is however not limited to using [DANE](https://github.com/CLARIAH/DANE), but cannot also be used to hook up any API that does something with generating certain data from certain input data.\n\n# Achitecture\n\nThe following image illustrates the dane-workflows architecture:\n\n![Image](architecture.png)\n\nThe following section details more about concepts illustrated in the image.\n\n# Definition of a workflow\n\nA workflow is able to iteratively:\n- obtain input/source data from a `DataProvider`\n- send it to a `ProcessingEnvironment` (e.g. DANE environment)\n- wait for the processing environment to complete its work\n- obtain results from the processing environment\n- pass results to an `Exporter`, which typically reconsiles the processed data with the source data     \n\nAs mentioned in the definition of a workflow, this Python library works with the following components/concepts:\n\n## TaskScheduler\n\nMain process that handles all the steps described in the [Definition of a workflow]()\n\n## StatusHandler\n\nKeeps track of the workflow status, esuring recovery after crashes. By default the status is persisted to a SQLite database file, using the `SQLiteStatusHandler` but other implementations can be made by subclassing `StatusHandler`. \n\n## StatusMonitor\n\n**Note**: This component is currently implemented and not yet available. \n\nRuns on top of the StatusHandler database and visualises the overall progress of a workflow in a human-readable manner (e.g. show the % of successfully/failed processed items)\n\n## DataProvider\n\nIteratively called by the `TaskScheduler` to obtain a new batch of source data. No default implementations are available (yet), since there are many possible ways one would want to supply data to a system. Simply subclass from `DataProvider` to have full control over your input flow.\n\n## DataProcessingEnvironment\n\nIteratively called by the `TaskScheduler` to submit batches of data to an (external) processing environment. Also takes care of obtaining the output of finished processes from such an environment.\n\nThis library contains a full implementation, `DANEEnvironment`, for interacting with [DANE environments](https://github.com/beeldengeluid/dane-environments), but other environments/APIs can be supported by subclassing from `ProcessingEnvironment`.\n\n## Exporter\n\nCalled by the `TaskScheduler` with output data from a processing environment. No default implementation is available (yet), since this is typically the most use-case sensitive part of any workflow, meaning you should decide what to do with the output data (by subclassing `Exporter`).\n\n# Getting started\n\n## Prerequisites\n\n* Python >= 3.8 <= 3.10\n* [Poetry](https://python-poetry.org/)\n\n## Installation\n\nInstall via pypi.org, using e.g.\n\n```\npip install dane-workflows\n```\n\n### local development\n\nRun `poetry install`. After completion run:\n\n```\npoetry shell\n```\n\nTo test the contents of this repository works well, run:\n\n```\n./scripts/check-project.sh\n```\n\nTODO finalise\n\n# Usage\n\nAfter installing dane-workflows in your local environment, you can run an example workflow with:\n\n```\npython main.py\n```\n\nThis example script uses `config-example.yml` to configure and run a workflow using the following implementations:\n\n- **DataProvider**: ExampleDataProvider (with two dummy input documents)\n- **DataProcessingEnvironment**: ExampleDataProcessingEnvironment (mocks processing environment)\n- **StatusHandler**: SQLiteStatusHandler (writes output to `./proc_stats/all_stats.db`)\n- **Exporter**: ExampleExporter (does nothing with results)\n\nTo setup a workflow for your own purposes, consider the following:\n\n## What data do I want to process?\n\nWe've provided the `ExampleDataProvider` to easily feed a workflow with a couple of files (via config.`yml`). This is mostly for testing out your workflow.\n\nMostly likely you'll need to implement your own `DataProvider` by subclassing it. This way you can e.g. load your input data from a database, spreadsheet or whatever else you need.\n\n## Which processing environment will I use?\n\nSince this project is developed to at least interface with running [DANE environments](https://github.com/beeldengeluid/dane-environments) we've provided `DANEEnvironment` as a default implementation of `DataProcessingEnvironment`.\n\nIn case you'd like to call any other tool for processing your data, you're required to implement a subclass of `DataProcessingEnvironment`.\n\n## What I will I do with the output of the processing environment?\n\nAfter your `DataProcessingEnvironment` has processed a batch of items from your `DataProvider` the `TaskScheduler` hands over the output data to your subclass of `Exporter`. \n\nSince this is the most use-case dependant part of any workflow, we do not provide any useful default implementation. \n\nNote: `ExampleExporter` is only used as a placeholder for tests or dry runs.\n\n# Roadmap\n\n- [x] Implement more advanced recovery\n- [x] Add example workflows (refer in README)\n- [x] Finalise initial README\n- [ ] Add [Python docstring](https://www.askpython.com/python/python-docstring)\n\nSee the [open issues](https://github.com/beeldengeluid/dane-workflows/issues) for a full list of proposed features, known issues and user questions.\n\n\n# License\nDistributed under the MIT License. See `LICENSE.txt` for more information.\n\n\n# Contact\nUse the [issue tracker](https://github.com/beeldengeluid/dane-workflows/issues) for any questions concerning this repository\n\nProject Link: https://github.com/beeldengeluid/dane-workflows\n\nCodemeta.json requirements: https://github.com/CLARIAH/clariah-plus/blob/main/requirements/software-metadata-requirements.md",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beeldengeluid/dane-workflows",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dane-workflows",
    "package_url": "https://pypi.org/project/dane-workflows/",
    "platform": null,
    "project_url": "https://pypi.org/project/dane-workflows/",
    "project_urls": {
      "Homepage": "https://github.com/beeldengeluid/dane-workflows",
      "Repository": "https://github.com/beeldengeluid/dane-workflows"
    },
    "release_url": "https://pypi.org/project/dane-workflows/0.2.3/",
    "requires_dist": [
      "pika (>=1.2.1,<2.0.0)",
      "yacs (>=0.1.8,<0.2.0)",
      "requests (>=2.28.0,<3.0.0)",
      "slack-sdk (>=3.18.1,<4.0.0)",
      "types-PyYAML (>=6.0.10,<7.0.0)",
      "dane (>=0.3.3,<0.4.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Library providing batch upload & monitoring for (DANE) processing environments",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15565125,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6be790c27318028e4f3671f51753a457dd5c74394f34bb22d8537fabd62c3f6a",
          "md5": "c088db910a368fe777d09d515407d6b8",
          "sha256": "f797e7b4e53d08969b9dbcfebf838fd2ecad24c469dabbf4f6d131c8abe7487a"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c088db910a368fe777d09d515407d6b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 29142,
        "upload_time": "2022-08-22T12:39:31",
        "upload_time_iso_8601": "2022-08-22T12:39:31.818053Z",
        "url": "https://files.pythonhosted.org/packages/6b/e7/90c27318028e4f3671f51753a457dd5c74394f34bb22d8537fabd62c3f6a/dane_workflows-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49b058f0771e3ca3af0ed38a7d00c6dc7be1d44620184e3a4eaff98c40e2af7b",
          "md5": "cba63298c2977c03938850cbbb9d5e0d",
          "sha256": "1ea72c4bb0ba6de14f5d445ef3c68bedeb99a06a6bd28df350887da7ff99a98c"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cba63298c2977c03938850cbbb9d5e0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 27278,
        "upload_time": "2022-08-22T12:39:33",
        "upload_time_iso_8601": "2022-08-22T12:39:33.254490Z",
        "url": "https://files.pythonhosted.org/packages/49/b0/58f0771e3ca3af0ed38a7d00c6dc7be1d44620184e3a4eaff98c40e2af7b/dane_workflows-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f93334df52476e07b7d93fb291117780aa139250f020edf23071113331778ad3",
          "md5": "38111b2ae0503d87f3d2a990bb697089",
          "sha256": "8404750bcb513e7c27d266c2e8fbe5e1944b7cd5499eccec686a60cfc51f0264"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38111b2ae0503d87f3d2a990bb697089",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 29140,
        "upload_time": "2022-08-22T12:44:51",
        "upload_time_iso_8601": "2022-08-22T12:44:51.523304Z",
        "url": "https://files.pythonhosted.org/packages/f9/33/34df52476e07b7d93fb291117780aa139250f020edf23071113331778ad3/dane_workflows-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dd5b396e71304d0eb9319a916460cd631bf3dd5d543c1857dba9c0af8af4e6d",
          "md5": "369565cfd93014369daa5b528d68b13b",
          "sha256": "8b828bf4b17acf79d74ab5e720408de8e262d608d3a1c66d97da939ed383dcf9"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "369565cfd93014369daa5b528d68b13b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 27271,
        "upload_time": "2022-08-22T12:44:52",
        "upload_time_iso_8601": "2022-08-22T12:44:52.848480Z",
        "url": "https://files.pythonhosted.org/packages/7d/d5/b396e71304d0eb9319a916460cd631bf3dd5d543c1857dba9c0af8af4e6d/dane_workflows-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d119b3e70476c1be21bb7c0300e22ac6e055953bc440e6a44257726f622e73f",
          "md5": "75bc31cd5bd8df4c65bbb5a944270571",
          "sha256": "78b042fcd566863edde4861048f20cb43221ea629a5f158cdf64a78e3a22736a"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75bc31cd5bd8df4c65bbb5a944270571",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 31753,
        "upload_time": "2022-08-30T13:38:34",
        "upload_time_iso_8601": "2022-08-30T13:38:34.505826Z",
        "url": "https://files.pythonhosted.org/packages/4d/11/9b3e70476c1be21bb7c0300e22ac6e055953bc440e6a44257726f622e73f/dane_workflows-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2358b3e1093463e2b303491f6caf91e5fa8a7abb9cf816c0e1fe218ff4dc4ff7",
          "md5": "490fae9d9c787a0edf8a3e0128a67999",
          "sha256": "74ebdd9a7287f980386787d9d93d2e5f1bdd2f57e355dd0669898c87d2aa4a6b"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "490fae9d9c787a0edf8a3e0128a67999",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 29689,
        "upload_time": "2022-08-30T13:38:36",
        "upload_time_iso_8601": "2022-08-30T13:38:36.014323Z",
        "url": "https://files.pythonhosted.org/packages/23/58/b3e1093463e2b303491f6caf91e5fa8a7abb9cf816c0e1fe218ff4dc4ff7/dane_workflows-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eba3dc9d625cef6d71b754262344b7c6eafb45ce8ed5064ebc0125bd317d1f0a",
          "md5": "0783f13c2960f37b4324c1cc3c20be93",
          "sha256": "67c9c738fd2c29259a0445aba9add5a6e8580a892dd8e58c3e9337c3f17ba735"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0783f13c2960f37b4324c1cc3c20be93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 37454,
        "upload_time": "2022-10-28T08:52:59",
        "upload_time_iso_8601": "2022-10-28T08:52:59.463780Z",
        "url": "https://files.pythonhosted.org/packages/eb/a3/dc9d625cef6d71b754262344b7c6eafb45ce8ed5064ebc0125bd317d1f0a/dane_workflows-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11a540cf9c143c908b6621c66424b819411de7bee53c668116d6ded66ffd3833",
          "md5": "10dabc2f477adb553a77fafcb3011f32",
          "sha256": "516e5911a2fbd53f055eec9f3fad62fb71041643f636cdd1215c733ded84f2a9"
        },
        "downloads": -1,
        "filename": "dane_workflows-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "10dabc2f477adb553a77fafcb3011f32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 34768,
        "upload_time": "2022-10-28T08:53:01",
        "upload_time_iso_8601": "2022-10-28T08:53:01.060066Z",
        "url": "https://files.pythonhosted.org/packages/11/a5/40cf9c143c908b6621c66424b819411de7bee53c668116d6ded66ffd3833/dane_workflows-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eba3dc9d625cef6d71b754262344b7c6eafb45ce8ed5064ebc0125bd317d1f0a",
        "md5": "0783f13c2960f37b4324c1cc3c20be93",
        "sha256": "67c9c738fd2c29259a0445aba9add5a6e8580a892dd8e58c3e9337c3f17ba735"
      },
      "downloads": -1,
      "filename": "dane_workflows-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0783f13c2960f37b4324c1cc3c20be93",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 37454,
      "upload_time": "2022-10-28T08:52:59",
      "upload_time_iso_8601": "2022-10-28T08:52:59.463780Z",
      "url": "https://files.pythonhosted.org/packages/eb/a3/dc9d625cef6d71b754262344b7c6eafb45ce8ed5064ebc0125bd317d1f0a/dane_workflows-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11a540cf9c143c908b6621c66424b819411de7bee53c668116d6ded66ffd3833",
        "md5": "10dabc2f477adb553a77fafcb3011f32",
        "sha256": "516e5911a2fbd53f055eec9f3fad62fb71041643f636cdd1215c733ded84f2a9"
      },
      "downloads": -1,
      "filename": "dane_workflows-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "10dabc2f477adb553a77fafcb3011f32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 34768,
      "upload_time": "2022-10-28T08:53:01",
      "upload_time_iso_8601": "2022-10-28T08:53:01.060066Z",
      "url": "https://files.pythonhosted.org/packages/11/a5/40cf9c143c908b6621c66424b819411de7bee53c668116d6ded66ffd3833/dane_workflows-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}