{
  "info": {
    "author": "ont-research",
    "author_email": "ont-research@nanoporetech.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Oxford Nanopore Technologies logo](https://github.com/nanoporetech/medaka/raw/master/images/ONT_logo_590x106.png)\n\n# Read Fillet\n\nRead fillet is a simple utility for splitting Oxford Nanopore Sequencing reads\nbased on knowledge of adapter sequences. Its primary use case is for splitting\nchimeric reads into their component sub-reads.\n\n\n## Installation\n\nRead Fillet can be installed from PyPI with:\n\n    pip install read_fillet\n\n## Usage\n\nRead Fillet is run simply with:\n\n    read_fillet <fastq_directory> \n\nTo see more options run:\n\n    read_fillet --help\n\nFor each input fastq file found in the input directory, a file with an\nadditional `_split` suffix will be output into the output directory, controlled\nby the `--output_dir` option. If not `--output_dir` is given then the output\nfiles are placed alongside in the input files.\n\nThe new `*_split.fastq` will contain two new reads for each read that was\nsplit, now with suffix `_1` and `_2` Reads which were not split will also be\nadded to the new file, so that `*_split.fastq` can be used as a match for any\ndownstream analysis. For example the output may look like:\n\n    @<read_id> <remaining_headers>\n    <sequence>\n    +\n    <quality>\n    @<read_id>_1 <remaining_headers>\n    <sequence>\n    +\n    <quality>\n    @<read_id>_2 <remaining_headers>\n    <sequence>\n    +\n    <quality>\n\n\n## Algorithmic Details\n\nThe purpose of read_fillet is to split reads likely to be concatemers of independent\nreads. Such concatemers may arise from at least two mechanisms:\n\n* chemical chimers arising from artifacts of molecule-biological steps used in the\n  preparation of sequencing libraries,\n* informatic chimers arising from failures of the algorithms used to process the\n  primary sequencing data.\n\nRegardless of the mechanism that has created chimeric reads, read_fillet\nattempts to split such reads into their component sub-reads using knowledge of\nthe sequencing adapters used in library preparation. Concatemeric reads\ntypically contain one or more matches to a sequencing adapter internal to their\nsequence; for example, commonly half-way through the read when library\nread-length is from a tightly centered distribution. The following simplified\nviews indicate the types of error that may occur.\n\nHere is a read, where `>>` represents the adapter sequence and `=` represent\nbases from the organism of interest. The reverse-complement of the sequencing\n adapter can typically be found at the end of a read, represented as `<<` below:\n\n```\n    >>=====<<\n```\n\nA simple chimeric read containing two sub-reads can be represented in this notation as:\n\n```\n        A        B\n    >>=====<<>>=====<<\n```\n\nOn Oxford Nanopore sequencing platforms, and enzyme is used to unwind double-stranded\nDNA and thread a single strand through a nanopore. It is possible that after the first\nstrand of a duplex has transited the nanopore, that the second strand is immediately\ncaptured since it is physically close to the pore. If the capture is particularly\nfast the sequencing device software does not detect a boundary between the signals\nmeasured for the first and second strand and subsequently produced a single conjoined\nread. In this case the sub-read B will be complementary to A. It is possible also that\nthe sub-read B is distinct from A, being derived from a second DNA duplex unrelated\nto that which gave rise to read A. In this case, depending on the sequencing library,\nthe sequences of A and B can be unrelated.\n\nRead-fillet looks for matches to the sequence `<<>>` and splits the original basecall\nfor the read into separate parts, for example the read:\n\nBefore:\n```\n    read_id: 0ae195a2-6993-4a0b-afa8-bb834f4739e3\n\n            A        B\n        >>=====<<>>=====<<\n               ^--^\n```\n\nwil become:\n```\n    read_id: 0ae195a2-6993-4a0b-afa8-bb834f4739e3_1\n            A\n        >>=====<<\n\n    read_id: 0ae195a2-6993-4a0b-afa8-bb834f4739e3_2\n            B\n        >>=====<<\n```\n\nafter the splitting process. Note the `_1` and `_2` in the emitted read UUIDs.\n\n\n### Assessment\n\nAn additional program `read_fillet_assess` is available to provide\nan assessment of the veracity of the results provided by the main `read_fillet`\nprogram. The assessment program uses alignment of reads to a reference sequence\nto form knowledge of the true structure of reads (assuming the reference sequence\nto be correct and, for example, not contain structural variants with respect to\nthe sequences sample).\n\n\nThe assessment program requires the addition dependencies: `pomoxis`,\n`samtools`, and `seqkit`. These are most easily obtained using conda (or mamba\nas a faster alternative):\n\n    mamba create --name read_fillet -c bioconda seqkit samtools pomoxis python3.6\n    conda activate read_fillet\n    pip install read_fillet\n\nThe program examines supplementary alignments produced by the `minimap2` aligner. The\nalignments are checked to determine their overlap to both the read and the reference\nsequence. Reads are grouped into one of the following classes:\n\n* **single_alignment_95%cov**: the read is associated with a single alignment spanning >95% of the reads length,\n* **disjoint_with_gap**: two alignments are found for the read with an unaligned, adapter-sized gap excluded from the alignments,\n* **disjoint_without_gap**: similar to the former, without an adapter-sized gap,\n* **overlapping**: two alignments are found which overlap each other with respect to the reference. \n* **read_gt_2_supplementary**: the read is associated with more than two alignments.\n\nThese categories are not mutually exclusive, if a read belongs to multiple classes the priority\nof labelling is from top to bottom as written above. \n\nTo assess the veracity of the adapter-based `read_fillet` read splitting the assessment\nprogram counts reads belonging to with- and without-gap classes as follows:\n\n**disjoint_with_gap**\n\n* `read_fillet` split: **true positive**\n* `read_fillet` unsplit: **false negative**\n\n**disjoint_without_gap**\n\n* `read_fillet` split: **false positive**\n* `read_fillet` unsplit: **true negative**\n\n### Help\n\n**Licence and Copyright**\n\nÂ© 2021- Oxford Nanopore Technologies Ltd.\n\n`read_fillet` is distributed under the terms of the Mozilla Public License 2.0.\n\n**Research Release**\n\nResearch releases are provided as technology demonstrators to provide early\naccess to features or stimulate Community development of tools. Support for\nthis software will be minimal and is only provided directly by the developers.\nFeature requests, improvements, and discussions are welcome and can be\nimplemented by forking and pull requests. However much as we would\nlike to rectify every issue and piece of feedback users may have, the\ndevelopers may have limited resource for support of this software. Research\nreleases may be unstable and subject to rapid iteration by Oxford Nanopore\nTechnologies.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/epi2me-labs/read_fillet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "read-fillet",
    "package_url": "https://pypi.org/project/read-fillet/",
    "platform": "",
    "project_url": "https://pypi.org/project/read-fillet/",
    "project_urls": {
      "Homepage": "https://github.com/epi2me-labs/read_fillet"
    },
    "release_url": "https://pypi.org/project/read-fillet/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Splitting of sequence reads by internal adapter sequence search.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11160595,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ccd2b77b0f5757c4bb86376a18453aff0edf56341392dc0512de2f434d273ec",
          "md5": "e6ff8b33baa4cefce4c17e4c74a3f9a9",
          "sha256": "e79120f638ff38352cf941431bf15920fab03f77c3e10a5ba61d558084c592f3"
        },
        "downloads": -1,
        "filename": "read_fillet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e6ff8b33baa4cefce4c17e4c74a3f9a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12581,
        "upload_time": "2021-07-29T12:43:14",
        "upload_time_iso_8601": "2021-07-29T12:43:14.615780Z",
        "url": "https://files.pythonhosted.org/packages/4c/cd/2b77b0f5757c4bb86376a18453aff0edf56341392dc0512de2f434d273ec/read_fillet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28f1de6d94e8dfe38c86d1dcdb59e0b96601ceb1268a77803992cefb4c79d24e",
          "md5": "048756c04b69c08792578efcf6b59330",
          "sha256": "0d37f5bd449eff0ea0a7936a10c8529ebd0e446a7201c38820dd51ffda88041c"
        },
        "downloads": -1,
        "filename": "read_fillet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "048756c04b69c08792578efcf6b59330",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16135,
        "upload_time": "2021-08-03T08:21:26",
        "upload_time_iso_8601": "2021-08-03T08:21:26.615128Z",
        "url": "https://files.pythonhosted.org/packages/28/f1/de6d94e8dfe38c86d1dcdb59e0b96601ceb1268a77803992cefb4c79d24e/read_fillet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ce6f2b811445f6364e16e8914bdbc764e5a622f3ad6e6398904302df1c7dfb7",
          "md5": "1b1e4fd23d2e819ae4c48394b345ba0c",
          "sha256": "0ab395ebcb6856b989c70138a8e2da4cd431898e47078b15ec51d3b139d9e8f9"
        },
        "downloads": -1,
        "filename": "read_fillet-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1b1e4fd23d2e819ae4c48394b345ba0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13862,
        "upload_time": "2021-08-12T12:12:24",
        "upload_time_iso_8601": "2021-08-12T12:12:24.741595Z",
        "url": "https://files.pythonhosted.org/packages/7c/e6/f2b811445f6364e16e8914bdbc764e5a622f3ad6e6398904302df1c7dfb7/read_fillet-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ce6f2b811445f6364e16e8914bdbc764e5a622f3ad6e6398904302df1c7dfb7",
        "md5": "1b1e4fd23d2e819ae4c48394b345ba0c",
        "sha256": "0ab395ebcb6856b989c70138a8e2da4cd431898e47078b15ec51d3b139d9e8f9"
      },
      "downloads": -1,
      "filename": "read_fillet-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1b1e4fd23d2e819ae4c48394b345ba0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13862,
      "upload_time": "2021-08-12T12:12:24",
      "upload_time_iso_8601": "2021-08-12T12:12:24.741595Z",
      "url": "https://files.pythonhosted.org/packages/7c/e6/f2b811445f6364e16e8914bdbc764e5a622f3ad6e6398904302df1c7dfb7/read_fillet-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}