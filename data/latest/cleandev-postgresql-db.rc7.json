{
  "info": {
    "author": "Daniel Rodriguez Rodriguez",
    "author_email": "danielrodriguezrodriguez.pks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Sqlalchemy Module V0.3.6\n\n[Fachada](https://refactoring.guru/es/design-patterns/facade) de la libreria Sqlalchemy 1.4.x\n\n| Properties         | Requerido          | Valor por defecto | Descripción                                                                                                                                                             |\n|--------------------|--------------------|:-----------------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| url_connection     | :heavy_check_mark: |       -           | Url de conexión de la base de datos                                                                                                                                     |\n| path_module_schema | :heavy_check_mark: |       -           | Paquete de python donde se almacenaran todos las clases python que representan las tablas de base de datos                                                              |\n| ddl_auto           | :heavy_check_mark: |       -           | Atributo que dependiendo de una valores especificos actuan sobre el comportamiento de la base de datos cuando arranca la aplicación                                     |\n\n![diagrama](https://gitlab.com/cleansoftware/libs/public/cleandev-postgresql-db/-/raw/master/docs/diagrama.png)\n\n## QuickStart\n\nEn el momento que se importa el módulo \"postgresql_db\" se ejecuta la funcion \"load_declarative_models()\" esta funcion es\nla encargada de gestionar la creacion de la base de datos, por defecto usa la configuración del archivo properties.ini.\n\n### Propiedad ddl_auto\n\nDentro del archivo configuracion se puede definir un parametro `ddl_auto` que en funcion del valor actua de diferente\nmanera contra la base de datos.\n\nAl importar el modulo `postgresql_db` de la siguiente forma `import postgresql_db` se ejuta la\nfuncion `load_declarative_models()`\nlo que da lugar a obtener dicho valor del fichero `properties.ini` y a tomar el valor de la variable `ddl_auto` tomando\nel valor del archivo de `properties.ini`\n\n```properties\n[BD_CORE]\ndb_ip=172.17.0.2\ndb_port=5432\ndb_user=postgres\ndb_password=mysecretpassword\ndb_name=sqlalchemy\nurl_connection=postgresql+psycopg2://%(db_user)s:%(db_password)s@%(db_ip)s:%(db_port)s/%(db_name)s\npath_module_schema=models\nddl_auto=create\n\n```\n\nLas variables `db_ip`, `db_port`, `db_user`, `db_password`, `db_name`, `url_connection` son variables destinadas a\nla configuración de conxion con la base de datos. La variable `url_connection` no es necesario modificarla ya que es\nuna variable compuesta para un uso mas sencillo.\n\n## Otras propiedades\n\n## ddl_auto\n\nLa variable ddl_auto puede tomar dos valores que explicaremos a continuación que son `create` y `drop_create` cualquier\notro valor no tendra efecto\n\n#### ddl_auto=create\n\nUsando los modelos representados con clases de python genera las tablas automaticamente cuando se importa el módulo\n`postgresql_db` -> `import postgresql_db` las tablas antiguas no se borran, es decir. Si en el modelo ponemos el nombre\nde una tabla como `users` y luego lo cambiamos a `user` se crearan dos tablas la tabla con el nombre huerfano\nno se borra automaticamente.\n\n#### ddl_auto=drop_create\n\nEsta opcion brinda la opción de borrar todas las tables que esten representadas en los modelos y la vuelve a generar.\nSi existe una tabla y no esté representada en el modelo por algun cambio esta tabla no se borrara.\n\n#### Caso de uso alternativo\n\nSi por algun motivo desea ejecutar dicho metodo manualmente ignorando lo que este en el archivo de configuración\nevite importar el modulo de esta forma `import postgresql_db` importe directamente la funcion y asi evitar la ejecucion\ndel modulo de esta forma `from postgresql_db import load_declarative_models` y posteriormente pasele el valor\nmanualmente\nde esta forma `load_declarative_models(ddl_auto='create')`\n\n## path_module_schema\n\nEsta variable define en que nombre del paquete va a almacenar los modelos para que la libreria los localice y cree las\ntablas automaticamente. Dado el nombre no importa si los modelos estan en multiples ficheros siempre y cuando esten\ndebajo del paquete indicado\n\nEs necesario importar `Base` de esta manera `from postgresql_db import Base` y extender de la clase `Base` para que\nla libreria sea capaz de encontrar todos los paquetes que se mapearan en la base de datos como se obseva en el siguiente\nejemplo\n\n```python\nfrom postgresql_db import Base\nfrom sqlalchemy import Column, String\nfrom postgresql_db.inmutables import _Params\n\n\nclass User(Base):\n    __tablename__ = 'user'\n\n    uuid = Column(String, primary_key=True)\n    username = Column(String)\n    email = Column(String)\n    lastname = Column(String)\n\n    def __init__(self, **kwargs):\n        self.uuid = kwargs.get(_Params.UUID)\n        self.username = kwargs.get(_Params.USERNAME)\n        self.email = kwargs.get(_Params.EMAIL)\n        self.lastname = kwargs.get(_Params.LASTNAME)\n```\n\n## Consultas\n\nDentro de la libreria se categorizan 3 tipos de grupos de consultas. `BasicQuery`, `StandardQuery`, `AdvanceQuery` cada\nuna posee diferentes tipos de consultas que veremos a continuancion con ejemplos\n\nPara crear una transaccion y evitar llenar la base de datos de conexiones huerfanas es necesario cada vez que se vaya\na usar alguna `Query` independiente de su tipo hacerlo de esta forma.\n\n```python\nfrom postgresql_db import BasicQueryImpl\nfrom postgresql_db.interfaces import BasicQuery\nfrom postgresql_db.configs import StandardSession\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        basic_query: BasicQuery = BasicQueryImpl(session=session)\n```\n\nNotese que `BasicQuery`, `StandardQuery`, `AdvanceQuery` son interfaces que pertenecen al modulo de\n`postgresql_db.interfaces` y tienen sus respectivas implementaciones que estan en el modulo de `postgresql_db`\n\n### BasicQuery\n\nReune un grupo de operaciones con la base de datos basico como guardar y retornar todos lo valores\n\n#### save()\n\nEste metodo recibe como parametro un modelo directo que representa a la base de datos `save(model=modelo)` como se\nmuestra a continuación\n\n```python\nfrom models import User\nfrom postgresql_db import BasicQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import BasicQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    user: User = User(\n        uuid=utils.get_uuid4(),\n        username='Daniel',\n        email='danielr@mail.com',\n        lastname='Rodriguez'\n    )\n\n    with StandardSession() as session:\n        basic_query: BasicQuery = BasicQueryImpl(session=session)\n        basic_query.save(model=user)\n```\n\n#### save_all()\n\nEste metodo recibe una lista de modelos y los guarda de una sola consulta en la base de datos\n`save_all(models=list_models)` como se muestra a continuación\n\n```python\nfrom models import User\nfrom postgresql_db import BasicQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import BasicQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    user1: User = User(\n        uuid=utils.get_uuid4(),\n        username='Daniel',\n        email='danielr@mail.com',\n        lastname='Rodriguez'\n    )\n\n    user2: User = User(\n        uuid=utils.get_uuid4(),\n        username='Pedro',\n        email='pedro@mail.com',\n        lastname='Ramos'\n    )\n\n    userN: User = User(\n        uuid=utils.get_uuid4(),\n        username='Juan',\n        email='juan@mail.com',\n        lastname='Hernandez'\n    )\n\n    list_model: list = [user1, user2, userN]\n\n    with StandardSession() as session:\n        basic_query: BasicQuery = BasicQueryImpl(session=session)\n        basic_query.save_all(list_model=list_model)\n```\n\n#### find_all()\n\nEste metodo recibe un nombre en formato string que debe de coincidir con el nombre de la clase del modelo y retornara\ntodos los registros de dicha tabla en una lista de esta manera `basic_query.find_all(class_name='User')`\n\n```python\nfrom postgresql_db import BasicQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import BasicQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n\n    with StandardSession() as session:\n        basic_query: BasicQuery = BasicQueryImpl(session=session)\n        user_list: list = basic_query.find_all(class_name='User')\n        for user in user_list:\n            print(user.uuid)\n```\n\n### StandardQuery\n\nReune un grupo de operaciones con la base de datos relacionadas con borrados y consultas filtrados por campos en\nconcreto.\n\nLa mayoria de metodos de este grupo recibedos parametros `class_name` y `query_dict` donde 'class_name' viene siendo\nel nombre de la clase que representa la tabla en base de datos y 'query_dict' el patron de busqueda en formato `dict` de\npython como veremos a continuación en los ejemplos siguientes.\n\nPara las pruebas tendremos en cuenta que los registro de base de datos son los siguientes\n\n| uuid                                 | username | email            | lastname  |\n|--------------------------------------|----------|------------------|-----------|\n| 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n| 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n| 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n| af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n#### find_by_filter()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros\n\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n```python\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n    # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n    # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n    # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n        user_list = standard_query.find_by_filter(\n            class_name='User',\n            query_dict={'email': 'manuel@mail.com'}\n        )  # retorna 1 item\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n\n        user_list = standard_query.find_by_filter(\n            class_name='User',\n            query_dict={'lastname': 'Rodriguez'}\n        )  # retorna 2 item\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n\n        user_list = standard_query.find_by_filter(\n            class_name='User',\n            query_dict={\n                'lastname': 'Rodriguez',\n                'username': 'Manuel'\n            }\n        )  # retorna 1 item\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n```\n\n#### find_by_filter_like()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros\n\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n```python\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n    # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n    # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n    # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n        user_list = standard_query.find_by_filter_like(\n            class_name='User',\n            query_dict={'lastname': 'a'}\n        )  # retorna 4 item\n\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        user_list = standard_query.find_by_filter_like(\n            class_name='User',\n            query_dict={'lastname': 'r'}\n        )  # retorna 3 item\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n\n        user_list = standard_query.find_by_filter_like(\n            class_name='User',\n            query_dict={\n                'lastname': 'r',\n                'email': 'juan'\n            }\n        )  # retorna 1 item\n\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n```\n\n#### get_one()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros\n\nRetorna un unico modelo por lo tanto lo mas aconsejable es usarlo con campos como claves primarias\n\n```python\nfrom models import User\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n    # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n    # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n    # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n        user: User = standard_query.get_one(class_name='User', query_dict={'email': 'juan@mail.com'})\n\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n```\n\n#### get_first()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros\n\nRetorna un unico modelo pese a no ser un elemento unico en la base de datos, retorna la primera ocurrencia que cumpla\ncon dicho criterio\n\n```python\nfrom models import User\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n    # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n    # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n    # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n        user: User = standard_query.get_first(class_name='User', query_dict={'lastname': 'Rodriguez'})\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n```\n\n#### get_first_like()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros\n\nRetorna un unico modelo pese a no ser un elemento unico en la base de datos que cumpla con dicho criterio usando\n\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n```python\nfrom models import User\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n    # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n    # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n    # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n        user: User = standard_query.get_first_like(class_name='User', query_dict={'lastname': 'Rodriguez'})\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n```\n\n#### update()\n\nEste metodo recibe como parametros `class_name`, `query_dict`, `update_data` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros afectados por la modificación\n`update_data` los registros que se van a actualizar para todos los registros selecionados por la busqueda\n\nActualiza los registros selecionados en la query y los actualiza usando el criterio pasado en `update_data\n\n```python\nfrom models import User\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n    # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n    # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n    # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n        update_row: dict = {\n            'uuid': '0548604f-4990-482b-977a-7c4164c816a9',\n            'username': 'Manuel'\n        }\n        user: User = standard_query.get_first_like(class_name='User', query_dict={'lastname': 'Rodriguez'})\n        user: User = standard_query.update(\n            class_name='User',\n            query_dict={'email': 'manuel@mail.com'},\n            update_data=update_row\n        )\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuela   | manuel@mail.com  | Rodriguez |\n\n\n\n```\n\n#### update_like()\n\nEste metodo recibe como parametros `class_name`, `query_dict`, `update_data` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros afectados por la modificación\n`update_data` los registros que se van a actualizar para todos los registros selecionados por la busqueda\n\nActualiza los registros selecionados en la query y los actualiza usando el criterio pasado en `update_data\n`\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n#### number_rows()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n\nRetorna el numero de registro encontrados\n\n```python\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        rows: int = standard_query.number_rows(\n            class_name='User',\n            query_dict={'email': 'manuel@mail.com'},\n        )\n        print(rows)  # 1\n\n        rows: int = standard_query.number_rows(\n            class_name='User',\n            query_dict={},\n        )\n        print(rows)  # 4\n\n```\n\n#### delete()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n\nElimina todos los registros seleccionados en la consulta\n\n```python\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        standard_query.delete(\n            class_name='User',\n            query_dict={'email': 'manuel@mail.com'},\n        )\n\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n\n```\n\n#### delete_like()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n\nElimina todos los registros seleccionados en la consulta\n\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n```python\nfrom postgresql_db import StandardQueryImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import StandardQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        standard_query: StandardQuery = StandardQueryImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        standard_query.delete_like()(\n            class_name='User',\n            query_dict={'lastname': 'z'},\n        )\n\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n\n```\n\n### AdvanceQuery\n\n#### find_all()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`page` el numero de pagina a consultar\n`row_for_page` numero de registros que retorna para esa pagina\n\nBusca todos los registro de una tabla y los pagina segun se le indique\n\n```python\nfrom postgresql_db import AdvanceQuerysImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import AdvanceQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        advance_query: AdvanceQuery = AdvanceQuerysImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        list_users: list = advance_query.find_all(class_name='User', page=0, row_for_page=1)\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n\n        list_users: list = advance_query.find_all(class_name='User', page=1, row_for_page=1)\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n\n        list_users: list = advance_query.find_all(class_name='User', page=2, row_for_page=1)\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n\n        list_users: list = advance_query.find_all(class_name='User', page=3, row_for_page=1)\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        list_users: list = advance_query.find_all(class_name='User', page=0, row_for_page=2)\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n\n        list_users: list = advance_query.find_all(class_name='User', page=1, row_for_page=2)\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n```\n\n#### find_by_filter()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n`page` el numero de pagina a consultar\n`row_for_page` numero de registros que retorna para esa pagina\n\n```python\nfrom postgresql_db import AdvanceQuerysImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import AdvanceQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        advance_query: AdvanceQuery = AdvanceQuerysImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        list_users: list = advance_query.find_by_filter(\n            class_name='User',\n            query_dict={'lastname': 'Rodriguez'},\n            page=0,\n            row_for_page=2\n        )\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n\n```\n\nBusca los registro segun de una tabla segun criterio elegido y los pagina segun se le indique\n\n#### find_by_filter_like()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n`page` el numero de pagina a consultar\n`row_for_page` numero de registros que retorna para esa pagina\n\nBusca los registro segun de una tabla segun criterio elegido y los pagina segun se le indique\n\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n```python\nfrom postgresql_db import AdvanceQuerysImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import AdvanceQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        advance_query: AdvanceQuery = AdvanceQuerysImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        list_users: list = advance_query.find_by_filter_like(\n            class_name='User',\n            query_dict={'lastname': 'z'},\n            page=0,\n            row_for_page=2\n        )\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n\n        list_users = advance_query.find_by_filter_like(\n            class_name='User',\n            query_dict={'lastname': 'z'},\n            page=1,\n            row_for_page=2\n        )\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n\n\n\n```\n\n#### find_by_filter_and_order_by()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n`order_type` elige el tipo de orden ascendente o descendente\n`order_colum` columna por la cual desea ordenar\n`page` el numero de pagina a consultar\n`row_for_page` numero de registros que retorna para esa pagina\n\nBusca los registro segun de una tabla segun criterio elegido, los pagina y lo ordena por la columna indicada\n\n```python\nfrom postgresql_db import AdvanceQuerysImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import AdvanceQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        advance_query: AdvanceQuery = AdvanceQuerysImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        list_users: list = advance_query.find_by_filter_and_order_by(\n            class_name='User',\n            query_dict={},\n            order_type='asc',\n            order_colum='lastname',\n            page=0,\n            row_for_page=4\n        )\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n\n        list_users: list = advance_query.find_by_filter_and_order_by(\n            class_name='User',\n            query_dict={},\n            order_type='desc',\n            order_colum='lastname',\n            page=0,\n            row_for_page=4\n        )\n\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n\n```\n\n#### find_by_filter_like_and_order_by()\n\nEste metodo recibe como parametros `class_name`, `query_dict` donde:  \n`class_name` es el nombre de la clase que representa la tabla en base de datos\n`query_dict` es la query que seleccionara los registros a contar\n`order_type` elige el tipo de orden ascendente o descendente\n`order_colum` columna por la cual desea ordenar\n`page` el numero de pagina a consultar\n`row_for_page` numero de registros que retorna para esa pagina\n\nBusca los registro segun de una tabla segun criterio elegido, los pagina y lo ordena por la columna indicada\n\nUsa en la query el tipico `LIKE=%value%` para la consulta\n\n```python\nfrom postgresql_db import AdvanceQuerysImpl\nfrom generic_utils import CleanDevGenericUtils\nfrom postgresql_db.interfaces import AdvanceQuery\nfrom postgresql_db.configs import StandardSession\n\nutils: CleanDevGenericUtils = CleanDevGenericUtils()\n\nif __name__ == '__main__':\n    with StandardSession() as session:\n        advance_query: AdvanceQuery = AdvanceQuerysImpl(session=session)\n\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n\n        list_users: list = advance_query.find_by_filter_and_order_by(\n            class_name='User',\n            query_dict={},\n            order_type='asc',\n            order_colum='lastname',\n            page=0,\n            row_for_page=4\n        )\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n\n        list_users: list = advance_query.find_by_filter_and_order_by(\n            class_name='User',\n            query_dict={},\n            order_type='desc',\n            order_colum='lastname',\n            page=0,\n            row_for_page=4\n        )\n\n        # | 7a4fb3c5-5470-4da6-9e37-96bff32a0d4b | Daniel   | danielr@mail.com | Rodriguez |\n        # | 0548604f-4990-482b-977a-7c4164c816a9 | Manuel   | manuel@mail.com  | Rodriguez |\n        # | af3bccd6-476e-4a01-9d60-ff15a89eaaef | Pedro    | pedro@mail.com   | Ramos     |\n        # | 8ba5f9a1-24e0-4706-bde1-823954ee584d | Juan     | juan@mail.com    | Hernandez |\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/cleansoftware/libs/public/cleandev-postgresql-db",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cleandev-postgresql-db",
    "package_url": "https://pypi.org/project/cleandev-postgresql-db/",
    "platform": null,
    "project_url": "https://pypi.org/project/cleandev-postgresql-db/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/cleansoftware/libs/public/cleandev-postgresql-db/-/issues",
      "Homepage": "https://gitlab.com/cleansoftware/libs/public/cleandev-postgresql-db"
    },
    "release_url": "https://pypi.org/project/cleandev-postgresql-db/0.3.6/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Module for handler postgresql more easy",
    "version": "0.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14045515,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ed5523c3af3b2152c67207de762ca47b6c07268c0c836a28cb9a61cc9e44007",
          "md5": "e54c94c5bb3a554854d69a2e74609461",
          "sha256": "7c03cfe26cea82a983f5cad558c7afa4710f9487362717f7730ab45566ee5f38"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e54c94c5bb3a554854d69a2e74609461",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 2760,
        "upload_time": "2022-05-18T10:03:57",
        "upload_time_iso_8601": "2022-05-18T10:03:57.758064Z",
        "url": "https://files.pythonhosted.org/packages/0e/d5/523c3af3b2152c67207de762ca47b6c07268c0c836a28cb9a61cc9e44007/cleandev-postgresql-db-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da9dfe16da74825d32d9385b512374ef67dfeef4b0a90f7932956edd311a468c",
          "md5": "9bb3bf5f2139ee3302333b951968aa3a",
          "sha256": "a7b58a14dcef7e9a862224dfe9d2330bd38f384424c438f056dfd80db6d47203"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bb3bf5f2139ee3302333b951968aa3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5786,
        "upload_time": "2022-05-09T19:58:56",
        "upload_time_iso_8601": "2022-05-09T19:58:56.121234Z",
        "url": "https://files.pythonhosted.org/packages/da/9d/fe16da74825d32d9385b512374ef67dfeef4b0a90f7932956edd311a468c/cleandev-postgresql-db-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c329a8ffa38ec3b6901b2d0dceb9850097cdc196ce8711e81625a7d1c3f5366a",
          "md5": "c680d383a739fe059f7c7777731ab612",
          "sha256": "4bf18b5f2144ef6af7b645a19f8597b776841b491b2107bc03256024fa4b36c3"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c680d383a739fe059f7c7777731ab612",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5795,
        "upload_time": "2022-05-12T14:40:18",
        "upload_time_iso_8601": "2022-05-12T14:40:18.074980Z",
        "url": "https://files.pythonhosted.org/packages/c3/29/a8ffa38ec3b6901b2d0dceb9850097cdc196ce8711e81625a7d1c3f5366a/cleandev-postgresql-db-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "021b897c8b2a81d1900444b7bdceea97a1d96879cce509e436f237940f165072",
          "md5": "5e69eb7c750776a0f7bff323a07ea0d9",
          "sha256": "958234087244c34580fd2647e7f76e6c83ca21129fc5970a2abd74fdac46d1ee"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5e69eb7c750776a0f7bff323a07ea0d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5738,
        "upload_time": "2022-05-22T12:43:16",
        "upload_time_iso_8601": "2022-05-22T12:43:16.255291Z",
        "url": "https://files.pythonhosted.org/packages/02/1b/897c8b2a81d1900444b7bdceea97a1d96879cce509e436f237940f165072/cleandev-postgresql-db-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63c0de022e88fab8326fd9e66f55701dfcd142c41d4d5fd6e15fcb327b671c39",
          "md5": "7a0216e57b14146b0965f6044f84d401",
          "sha256": "1b29ccff759aa4a19f9c7b726a8053fa78f143c2cb6be47605dda5e5990ef505"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7a0216e57b14146b0965f6044f84d401",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 16688,
        "upload_time": "2022-05-25T02:28:48",
        "upload_time_iso_8601": "2022-05-25T02:28:48.335053Z",
        "url": "https://files.pythonhosted.org/packages/63/c0/de022e88fab8326fd9e66f55701dfcd142c41d4d5fd6e15fcb327b671c39/cleandev-postgresql-db-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc6c19b8ca02041a6e2f2d34d031eb20a5c5493dff676bc9eb87adc4eabfd25",
          "md5": "46557b68c98545a77b70a92e3648a607",
          "sha256": "1ee51486128e2ba7e50511e9507b9c21c01af98dc705392d61f512d613f90f0f"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "46557b68c98545a77b70a92e3648a607",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 16690,
        "upload_time": "2022-05-31T22:35:04",
        "upload_time_iso_8601": "2022-05-31T22:35:04.130014Z",
        "url": "https://files.pythonhosted.org/packages/8b/c6/c19b8ca02041a6e2f2d34d031eb20a5c5493dff676bc9eb87adc4eabfd25/cleandev-postgresql-db-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80e641b832b7ab10d79815233855a567c0720350d891f7444375bd3b8775b556",
          "md5": "b641327edd51e5bdb0f9eeda2aab1934",
          "sha256": "ba1ad24964f3716244a0b8f885c995b8bdd2ac92083a1e70d9e6ddff5481fa49"
        },
        "downloads": -1,
        "filename": "cleandev-postgresql-db-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b641327edd51e5bdb0f9eeda2aab1934",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 16887,
        "upload_time": "2022-06-06T13:52:13",
        "upload_time_iso_8601": "2022-06-06T13:52:13.907797Z",
        "url": "https://files.pythonhosted.org/packages/80/e6/41b832b7ab10d79815233855a567c0720350d891f7444375bd3b8775b556/cleandev-postgresql-db-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80e641b832b7ab10d79815233855a567c0720350d891f7444375bd3b8775b556",
        "md5": "b641327edd51e5bdb0f9eeda2aab1934",
        "sha256": "ba1ad24964f3716244a0b8f885c995b8bdd2ac92083a1e70d9e6ddff5481fa49"
      },
      "downloads": -1,
      "filename": "cleandev-postgresql-db-0.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "b641327edd51e5bdb0f9eeda2aab1934",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 16887,
      "upload_time": "2022-06-06T13:52:13",
      "upload_time_iso_8601": "2022-06-06T13:52:13.907797Z",
      "url": "https://files.pythonhosted.org/packages/80/e6/41b832b7ab10d79815233855a567c0720350d891f7444375bd3b8775b556/cleandev-postgresql-db-0.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}