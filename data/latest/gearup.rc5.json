{
  "info": {
    "author": "Maxim Borisyak",
    "author_email": "maximus.been@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GearUp\n\nHave you ever had a moment, when the code is ready, you are eager to launch it,\nyou want to know if your new and shiny method works or not, just to realize you need to write\n100+ lines of `argparse` or `click`?\n\nGear up and get ready to go! \n\n## Quick (and only) intro\n\nAssume your project contains `main.py` script with the following functions: \n\n```python\ndef train(method : str, dataset : str, alpha : float):\n  <do stuff>\n\ndef test(method : str, dataset : str):\n  <do testing>\n```\n\nJust add:\n\n```python\nfrom gearup import gearup\n\nif __name__ == '__main__':\n  gearup(train, test)()\n```\n\nand you are ready to go!\n\n```bash\n> python main.py train method=resnet dataset=mnist alpha=0.01\n> python main.py test method=resnet dataset=mnist\n```\n\n## Installation\n\nAs usual:\n```bash\npip install gearup\n```\nor\n```bash\npip install git+https://gitlab.com/craynn/gearup.git\n```\n\n## How it works\n\n`gearup`, applied to a function, reads signature of the function\nand infers types of its arguments from the annotations:\n\n```python\ndef f(x: int, y: int):\n  return x + y\n```\n\nAnnotations here can be any callable of type `str -> A`,\nthat raises either `ValueError` or `TypeError` when its argument is not a proper\nrepresentation of any instance of type `A`.\n\nWhen gear-uped function is called without arguments it reads `sys.argv`,\nalternatively, it can be called with a list of strings:\n\n```python\ngearup(f)(['1', '2']) ### result = 3\ngearup(f)() ### read from console arguments\n```\n\nThen, gear-uped function parses arguments using the following rules:\n- if `=` symbol is present in the argument: `k=v`, value `v` is assigned\n  to the argument `k` and added to `kwargs`;\n- otherwise, the argument is treated as a positional one and appended to `args`.\n\nAfter that the underlying function is called: `f(*args, **kwargs)`,\nconverting arguments in their respective types beforehand...\n\nYes, no flags, no aliases, just launch script like\na python function (Haskell style)...\n\n```bash\n> python main.py 1 y=2\n```\n\n*Notes:*\n- **spaces should not appear between argument name, `=` and argument value**:\n  - `a=x` sets value of argument `a` to `x`;\n  - `a = x` is interpreted as three separate arguments: two positional: `a` and `x`, and a keyword one\n  (with empty name and value);\n- if you need to supply a value with a space character in it, use quotes:\n  `python main.py x='a b c'`;\n- if you need to supply a value with `=` character in it, just specify argument name:\n  `python main.py x=a=b` or, better, `python main.py x='a=b'`;\n- it is impossible to set one of variational positional arguments (`*args`) to a value,\n  that contains `=` character;\n- if annotation is absent, type of the argument is inferred from its default value;\n  - the only exception from this rule is `None`, in such case, type of the argument is still considered to be absent;\n- default value can be of different type than annotation:\n  - this can be used to detect if value was specified or not, e.g. `def f(flag: bool = None)`; \n- `bool` is automatically wrapped into `gearup.common.boolean` (see below).\n\nAs a bonus, `gearup.apply(f, *args, **kwargs)` provides a Python-friendly way to do the same thing, which\nis useful when your script contains multiple methods with non-identical sets of parameters.\n\n```python\nimport gearup\n\ndef method1(x: int, y: int): return x + y\ndef method2(x: int, z: float): return x / z\n\ndef main(method: gearup.choice(method1, method2), x: int, **kwargs):\n  gearup.apply(method, x, **kwargs)\n\nif __name__ == '__main__':\n  gearup.gearup(main)()\n``` \n \n\n### Commands\n\nSometimes you need to pack several functions into one script:\n\n```python\ngearup(train, test)()\n### or\ngearup(train=train, test=test)()\n### or\ngearup(train, test=test)()\n```\n\n```bash\n> python main.py train <arguments for train>\n> python main.py test <arguments for test>\n```\n\nMore precisely, if supplied with more than one argument or at least one keyword argument,\n`gearup` consumes the first CLI argument and\nswitches between provided functions.\n\nBonus: it is recursive!\n\n```python\ndef train(...): pass\ndef test_fast(...): pass\ndef test_slow(...): pass\n\ngearup(\n  train,\n  test=dict(\n    fast=test_fast,\n    slow=test_slow\n  )\n)()\n```\n\n```bash\n> python main.py train method=resnet alpha=0.1\n> python main.py test slow method=resnet\n```\n\nNote: when a non-keyword argument is passed to `gearup`,\nit reads `__name__` attribute of this argument. For example, `gearup(f1, f2)` is equivalent to\n`gearup(f1=f1, f2=f2)`.\n\n## Misc.\n\n### Flags\n\nAs `bool` type behaves strangely in Python (e.g., `bool('False') == True`),\nannotation `bool` is automatically replaced by `gearup.common.boolean`,\nthat parses strings that represent boolean values properly.\n\n### Variable keyword arguments\n\nVariable keyword arguments (`**kwargs`) are automatically processes by `gearup.special.kwargs`.\n\n`gearup.special.kwargs` supports complex arguments like `classifier.alpha=1.0`, in which case,\nit expands variables into nested dictionaries, for example:\n\n```python\nfrom gearup import gearup\n\ndef f(**kwargs):\n  print(kwargs)\n\ngearup(f)(['clf.alpha=1', 'clf.beta=2', 'method.beta=3'])\n```\n\nprints `{'clf': {'alpha': '1', 'beta': '2'}, 'method': {'beta': '3'}}`.\n\nThis might be useful for handling configuration of methods with non-identical sets of parameters:\n```python\nfrom gearup import gearup, apply, choice\n\ndef f1(alpha: float): return alpha\ndef f2(beta: float, gamma: float): return beta + gamma\n\ndef main(f: choice(f1, f2), **kwargs):\n  return apply(f, **kwargs.get('func', dict()))\n\ngearup(main)(['f=f1', 'func.alpha=3']) ### returns 6.0\ngearup(main)(['f=f2', 'func.beta=5', 'func.gamma=6']) ### returns 11.0\n```\n\n### Config\n\n`gearup.config` offers a more strict version of such behavior.\n`gearup.config(arg_name_1, arg_name_2, ..., arg_name_n, typed_arg_1=type_1, ..., typed_arg_m=type_m)`:\n- checks that all arguments are from the defined set of arguments (`arg_name_1, ..., typed_arg_m`);\n- checks that all arguments are provided;\n- if supplied with a type, automatically converts values into the corresponding type;\n- `type_i` can also be a dictionary, which will be converted into a nested `config`;\n- `typed_arg = None` as well as untyped configuration option `arg_name` indicate unchecked values,\n  which might be either a string value (e.g., `argument=1`) or a dictionary\n  (possibly with nested dictionaries), e.g., `argument.x=1` or `argument.coefs.alpha=1e-3`.\n\n`config` might be useful if you want to separate arguments into several sets, for example:\n\n```python\nfrom gearup import gearup, apply, choice, config\n\ndef f1(alpha: float): return 2 * alpha\ndef f2(beta: float, gamma: float): return beta + gamma\n\ndef g1(x: float): return x + 1\ndef g2(x: float, y: float): return x + y\n\ndef main(f: choice(f1, f2), g: choice(g1, g2), **kwargs: config(fargs=None, gargs=None)):\n  return apply(f, **kwargs['fargs']) * apply(g, **kwargs['gargs'])\n\nassert gearup(main)(['f=f1', 'g=g2', 'fargs.alpha=2', 'gargs.x=2.0', 'gargs.y=1.5']) == 14.0\nassert gearup(main)(['f=f2', 'g=g1', 'fargs.beta=2', 'fargs.gamma=1e-1', 'gargs.x=9.0']) == 21.0\n```\n\n### Help\n\nJust add `--help`:\n\n```\n> python examples/main.py --help\nAvailable commands:\ntrain -> (method: {nonlogreg, logreg}, power: [-2, 5), alpha: float)   Trains method with alpha.\ntest -> slow -> (method: {nonlogreg, logreg})   Tests method...\n        fast -> (method: {nonlogreg, logreg, inception})   Undocumented test function.\n```\n\n`--help` also works with commands:\n\n```\n> python examples/main.py test --help\nAvailable commands:\nslow -> (method: {logreg, nonlogreg})   Tests method...\nfast -> (method: {logreg, inception, nonlogreg})   Undocumented test function.\n```\n\n```\n> python examples/main.py test slow --help\n\n  Tests method...\n\n  A long\n  several lines\n  long\n  description.\n  \n(method: {nonlogreg, logreg})\n```\n\n### Non-standard types\n\n`gearup` also defines several non-standard types:\n- `choice(x_1, x_2, ..., x_n, k_1=v_1, k_2=v_2, ..., k_m=v_m)` --- only accepts arguments from the provided set;\n    for a keyword argument `k=v`, `k` is used to retrieve the value `v`, \n    for a positional argument `x` `x.__name__` is used as the key, or `str(x)` if `__name__` attribute is absent;\n    works nicely with functions, e.g. `choice(function1, function2)`.\n    Don't use with numbers as a single number has multiple string representations, e.g.,\n    `choice(1, 2, 3)` does not accept string `'01'`, use `interval` instead.\n- `member[module]` --- similar to choice, but retrieves elements from `module.__all__` or\n    `dir(object)` if `__all__` is not defined. For example, given a module `utils`,\n    `member[utils]` allows to switch between functions defined in the module.\n    Also can retrieve values from submodules, e.g., `member[utils]('data.functions.mean')`\n    returns `utils.data.functions.mean`.\n- `either[type_1, type_2, ..., type_n]` --- tries to convert supplied value to one of the provided types;\n  note, that `type_i` has priority over `type_j` if `i < j`, thus, e.g., `either[float, int]`\n  is equivalent to `float` as any string representing `int` is also a valid `float`.\n- `interval[a:b]` --- half-open interval `a <= x < b`, type (int or float) is inferred from types of `a` and `b`;\n  also a more complete constructor exists: `interval(start, stop, left=True, right=False, cast=None)`.\n- `a < number`, `a <= number`, `number < b`, `number <= b` - an alternative syntax for constructing intervals,\n  intervals can also be combined via `&`, e.g., `(a < number) & (number < b)`\n  (note, that parenthesis are required as almost every operator has higher priority than comparison operators).\n  Unfortunately,   Python does not support overloading chained comparisons,\n  thus, a nice `a < number < b` syntax is not available,\n  however, `(a < number) < b` works fine.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/craynn/gearup",
    "keywords": "cli",
    "license": "MIT",
    "maintainer": "Maxim Borisyak and contributors",
    "maintainer_email": "maximus.been@gmail.com",
    "name": "gearup",
    "package_url": "https://pypi.org/project/gearup/",
    "platform": "",
    "project_url": "https://pypi.org/project/gearup/",
    "project_urls": {
      "Homepage": "https://gitlab.com/craynn/gearup"
    },
    "release_url": "https://pypi.org/project/gearup/0.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Turns Python functions into CLI via Python annotations",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8449402,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2105e06bcbc2fd97071b4609c540236f079bfda662a750acd2de8dd6ab3f0693",
          "md5": "3fdbd69706235cc166ba345c00e19d62",
          "sha256": "106f2ed0ca9bb940cc31e77921af0754629f5b10092083f80f64f6f889baefbf"
        },
        "downloads": -1,
        "filename": "gearup-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fdbd69706235cc166ba345c00e19d62",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9131,
        "upload_time": "2020-05-16T13:23:02",
        "upload_time_iso_8601": "2020-05-16T13:23:02.808599Z",
        "url": "https://files.pythonhosted.org/packages/21/05/e06bcbc2fd97071b4609c540236f079bfda662a750acd2de8dd6ab3f0693/gearup-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c379ec81fffbb8d754f292250432cd15990e9279cbd8dc88d9ad698997106d89",
          "md5": "21ace4c85fe082f8fa8ec027a5f5bd40",
          "sha256": "1c465078ed00af84d24f449b791ab45723dca9a2ba8fb11ee3a0f5344d79c283"
        },
        "downloads": -1,
        "filename": "gearup-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "21ace4c85fe082f8fa8ec027a5f5bd40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8549,
        "upload_time": "2020-05-16T13:23:05",
        "upload_time_iso_8601": "2020-05-16T13:23:05.122469Z",
        "url": "https://files.pythonhosted.org/packages/c3/79/ec81fffbb8d754f292250432cd15990e9279cbd8dc88d9ad698997106d89/gearup-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "578c69f8e3be64cc989fada3008dc6714c3e38f56f31569932f527478eda5235",
          "md5": "b3745a82cfb3a748f1ef6ff7b42b82bb",
          "sha256": "543b368c4719c7d35d136cfb432e51531fa3bbc63a0b9b2426017073d4d12ddc"
        },
        "downloads": -1,
        "filename": "gearup-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3745a82cfb3a748f1ef6ff7b42b82bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9539,
        "upload_time": "2020-05-16T14:23:20",
        "upload_time_iso_8601": "2020-05-16T14:23:20.923945Z",
        "url": "https://files.pythonhosted.org/packages/57/8c/69f8e3be64cc989fada3008dc6714c3e38f56f31569932f527478eda5235/gearup-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594245478b3e0d284e9c4f7a265088372a404476e151bb876399c4cb07adb618",
          "md5": "80d6b1e8d5f89e5e8346af701f92b531",
          "sha256": "d118efda8a0ff4ba4e105cef8ac57ca03d4743ab11724b9e9dcfea127c170787"
        },
        "downloads": -1,
        "filename": "gearup-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "80d6b1e8d5f89e5e8346af701f92b531",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8969,
        "upload_time": "2020-05-16T14:23:22",
        "upload_time_iso_8601": "2020-05-16T14:23:22.337463Z",
        "url": "https://files.pythonhosted.org/packages/59/42/45478b3e0d284e9c4f7a265088372a404476e151bb876399c4cb07adb618/gearup-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa3e37ef5ff1b0e1086deda007a4cb2bd8c4b63b75888c52a889e95d6f8ea31b",
          "md5": "20c1793e2d40b3e9c49c686a92dbcad9",
          "sha256": "30fbb3f98b59381b1bfde71bef16cf01c4177cddad22732da05745907d7b5c15"
        },
        "downloads": -1,
        "filename": "gearup-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20c1793e2d40b3e9c49c686a92dbcad9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11922,
        "upload_time": "2020-05-17T22:47:31",
        "upload_time_iso_8601": "2020-05-17T22:47:31.847716Z",
        "url": "https://files.pythonhosted.org/packages/fa/3e/37ef5ff1b0e1086deda007a4cb2bd8c4b63b75888c52a889e95d6f8ea31b/gearup-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71676e9c781393757784bb1cc45579a2e67c38dc9df95ae18e58aaa8f2ad5871",
          "md5": "f23d869683c209c463193eae00a6fed9",
          "sha256": "e6458080eb6f95bdf427264eb77db8a8fb22d4029a9e762532de9c45b2e25c5e"
        },
        "downloads": -1,
        "filename": "gearup-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f23d869683c209c463193eae00a6fed9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14303,
        "upload_time": "2020-05-20T19:53:54",
        "upload_time_iso_8601": "2020-05-20T19:53:54.198229Z",
        "url": "https://files.pythonhosted.org/packages/71/67/6e9c781393757784bb1cc45579a2e67c38dc9df95ae18e58aaa8f2ad5871/gearup-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "296f08ad42a0c01a50c15c90010a231a366d1bfb2f7050965ea45180b51a2c8d",
          "md5": "108ac9c665320cae6c1cfeb03387d318",
          "sha256": "f142659463cb997b9756cc00c902d012bde9e1b3378fa40073ba8f71c5b3ea81"
        },
        "downloads": -1,
        "filename": "gearup-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "108ac9c665320cae6c1cfeb03387d318",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14345,
        "upload_time": "2020-10-19T20:01:31",
        "upload_time_iso_8601": "2020-10-19T20:01:31.241053Z",
        "url": "https://files.pythonhosted.org/packages/29/6f/08ad42a0c01a50c15c90010a231a366d1bfb2f7050965ea45180b51a2c8d/gearup-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "296f08ad42a0c01a50c15c90010a231a366d1bfb2f7050965ea45180b51a2c8d",
        "md5": "108ac9c665320cae6c1cfeb03387d318",
        "sha256": "f142659463cb997b9756cc00c902d012bde9e1b3378fa40073ba8f71c5b3ea81"
      },
      "downloads": -1,
      "filename": "gearup-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "108ac9c665320cae6c1cfeb03387d318",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14345,
      "upload_time": "2020-10-19T20:01:31",
      "upload_time_iso_8601": "2020-10-19T20:01:31.241053Z",
      "url": "https://files.pythonhosted.org/packages/29/6f/08ad42a0c01a50c15c90010a231a366d1bfb2f7050965ea45180b51a2c8d/gearup-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}