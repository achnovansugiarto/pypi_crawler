{
  "info": {
    "author": "Jonathan Decker",
    "author_email": "pysimplesql@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "# **pysimplesql** User's Manual\n\n## DISCLAIMER:\nWhile **pysimplesql** works with and was inspired by the excellent PySimpleGUI™ project, it has no affiliation.\n\n## Rapidly build and deploy database applications in Python\n**pysimplesql** binds PySimpleGUI™ to sqlite3 databases for rapid, effortless database application development. Makes a great\nreplacement for MS Access or Libre Office Base! Have the full power and language features of Python while having the \npower and control of managing your own codebase. **pysimplesql** not only allows for super simple automatic control (not one single\nline of SQL needs written to use **pysimplesql**), but also allows for very low level control for situations that warrant it.\n\n## History\n**pysimplesql** was conceived after having used PySimpleGUI™ to prototype a GUI in Python.  After some time it became apparent that\nmy approach of prototyping in one language, just to implement it in another wasn't very efficient and didn't make much sense.\nI had taken this approach many times in the past due to the lack of a good RAD (Rapid Application Development) tool when it comes\nto making database front ends in Python.  Rather than spending my time porting my prototype over, one time I decided to try my hand\nat creating such a tool - and this is what I ended up with.\nNow make no mistake - I'm not a good project maintainer, and my goal was never to launch an open source project in the first place!\nThe more I used this combination of **pysimplesql** and PySimpleGUI™ for my own database projects, the more I realized how many others \nwould benefit from it. With that being said, I will do my best to maintain and improve this tool over time.  Being new to open source\nas well as hosting projects like this, I have a lot to learn moving forward.  Your patience is appreciated.\n\n## Basic Concepts\n**pysimplesql** borrows on common concepts in other database front-end applications such as LibreOffice or MS Access.\nThe basic concept revolves around Forms, which are invisible containers that connect to an underlying database, and\nQueries, which use SQL to access the tables within the database. Forms in **pysimplesql** are very flexible in that multiple forms (and their underlying databases and tables) can be bound to the same PySimpleGUI™ Window. This allows \nfor a tremendous amount of flexibility in your projects. Binding a **pysimplesql** Form to a PySimpleGUI™ Window is\nvery easy, and automatically binds Elements of the Window to records in your own database.  Be sure to check out the \nmany examples to get a quick idea of just how quick and easy it is to develop database application with the combination\nof **pysimplesql** and PySimpleGUI™!\n\nSome people may like to think of Form objects as a Database, and Query objects as a Table.  For this reason, the Form class\nhas an alias of Database and the Query class has an alias of Table - so you can use the **Database**/**Table** classes instead of\n**Form**/**Query** in your own code if you prefer!\n\n# Lets do this!\n\n## Install\nNOTE: I will try to keep current progress updated on Pypi so that pip installs the latest version.\nHowever, the single **pysimplesql.py** file can just as well be copied directly into the root folder of your own project.\n```\npip install PySimpleGUI\npip install pysimplesql\nor\npip3 install PySimpleGUI\npip3 install pysimplesql\n```\n\n**pysimplesql** is now in active development and constantly changing. When an update is available, a message similar to \nthe following will be displayed in the output of the program:\n\n```***** pysimplesql update to v0.0.5 available! Just run pip3 install pysimplesql --upgrade *****```\n\nBe sure to update the package when you get this message, or from time to time with\nthe following command:\n```\npip install pysimplesql --upgrade\n```\nor\n```\npip3 install pysimplesql --upgrade\n```\n\n### This Code\n\n```python\nimport PySimpleGUI as sg\nimport pysimplesql as ss                               # <=== PySimpleSQL lines will be marked like this.  There's only a few!\nimport logging\nlogger=logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)               # <=== You can set the logging level here (NOTSET,DEBUG,INFO,WARNING,ERROR,CRITICAL)\n\n\n# Define our layout. We will use the Form.record convenience function to create the controls\nlayout = [\n    [ss.record('Restaurant.name')],\n    [ss.record('Restaurant.location')],\n    [ss.record('Restaurant.fkType', sg.Combo, size=(30,10), auto_size_text=False)]\n]\nsub_layout = [\n    [ss.selector('selector1','Item',size=(35,10))],\n    [\n        sg.Col(\n            layout=[\n                [ss.record('Item.name')],\n                [ss.record('Item.fkMenu', sg.Combo, size=(30,10), auto_size_text=False)],\n                [ss.record('Item.price')],\n                [ss.record('Item.description', sg.MLine, size=(30, 7))]\n            ]\n        )\n    ],\n    #[ss.actions('act_item','Item', edit_protect=False,navigation=False,save=False, search=False)]\n]\nlayout.append([sg.Frame('Items', sub_layout)])\nlayout.append([ss.actions('act_restaurant','Restaurant')])\n\n# Initialize our window and database, then bind them together\nwin = sg.Window('places to eat', layout, finalize=True)\n# Create our Form\nfrm = ss.Form(':memory:', sql_script='example.sql', bind=win)      # <=== load the database\n# NOTE: \":memory:\" is a special database URL for in-memory databases\n\n\nwhile True:\n    event, values = win.read()\n\n    if ss.process_events(event, values):                  # <=== let PySimpleSQL process its own events! Simple!\n        logger.info('PySimpleDB event handler handled the event!')\n    elif event == sg.WIN_CLOSED or event == 'Exit':\n        frm=None              # <= ensures proper closing of the sqlite database and runs a database optimization at close\n        break\n    else:\n        logger.info(f'This event ({event}) is not yet handled.')\n\n```\nalong with this sqlite table\n```sql\nDROP TABLE IF EXISTS \"Restaurant\";\nDROP TABLE IF EXISTS \"Item\";\nDROP TABLE IF EXISTS \"Type\";\nDROP TABLE IF EXISTS \"Menu\";\n\nCREATE TABLE \"Restaurant\"(\n\t\"pkRestaurant\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Restaurant\",\n\t\"location\" TEXT,\n\t\"fkType\" INTEGER,\n\tFOREIGN KEY(fkType) REFERENCES Type(pkType)\n);\n\nCREATE TABLE \"Item\"(\n\t\"pkItem\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Item\",\n\t\"fkRestaurant\" INTEGER,\n\t\"fkMenu\" INTEGER,\n\t\"price\" TEXT,\n\t\"description\" TEXT,\n\tFOREIGN KEY(fkRestaurant) REFERENCES Restaurant(pkRestaurant) ON UPDATE CASCADE,\n\tFOREIGN KEY(fkMenu) REFERENCES Menu(pkMenu)\n);\n\nCREATE TABLE \"Type\"(\n\t\"pkType\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Type\"\n);\n\nCREATE TABLE \"Menu\"(\n\t\"pkMenu\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Menu\"\n);\n\nINSERT INTO \"Menu\" VALUES (1,\"Breakfast\");\nINSERT INTO \"Menu\" VALUES (2,\"Lunch\");\nINSERT INTO \"Menu\" VALUES (3,\"Dinner\");\n\nINSERT INTO \"Type\" VALUES (1,\"Fast Food\");\nINSERT INTO \"Type\" VALUES (2,\"Fine Dining\");\nINSERT INTO \"Type\" VALUES (3,\"Hole in the wall\");\nINSERT INTO \"Type\" VALUES (4,\"Chinese Food\");\n\nINSERT INTO \"Restaurant\" VALUES (1,\"McDonalds\",\"Seatle WA\",1);\nINSERT INTO \"Item\" VALUES (1,\"Hamburger\",1,2,\"$4.99\",\"Not flame broiled\");\nINSERT INTO \"Item\" VALUES (2,\"Cheeseburger\",1,2,\"$5.99\",\"With or without pickles\");\nINSERT INTO \"Item\" VALUES (3,\"Big Breakfast\",1,1,\"$6.99\",\"Your choice of bacon or sausage\");\n\nINSERT INTO \"Restaurant\" VALUES (2,\"Chopstix\",\"Cleveland OH\",4);\nINSERT INTO \"Item\" VALUES (4,\"General Tso\",2,3,\"$7.99\",\"Our best seller!\");\nINSERT INTO \"Item\" VALUES (5,\"Teriaki Chicken\",2,3,\"$5.99\",\"Comes on a stick\");\nINSERT INTO \"Item\" VALUES (6,\"Sticky Rice\",2,2,\"$6.99\",\"Our only lunch option, sorry!\");\n\nINSERT INTO \"Restaurant\" VALUES (3,\"Jimbos\",\"Lexington KY\",3);\nINSERT INTO \"Item\" VALUES (7,\"Breakfast Pizza\",3,1,\"$11.99\",\"Pizza in the morning\");\nINSERT INTO \"Item\" VALUES (8,\"Lunch Pizza\",3,3,\"$12.99\",\"Pizza at noon\");\nINSERT INTO \"Item\" VALUES (9,\"Dinner Pizza\",3,3,\"$16.99\",\"Whatever we did not sell earlier in the day\");\n\n```\n### Makes This fully operational database front-end\n\n![image](https://user-images.githubusercontent.com/70232210/91227678-e8c73700-e6f4-11ea-83ee-4712e687bfb4.png)\n\nLike PySimpleGUI™, **pysimplesql** supports subscript notation, so your code can access the data easily in the format of\nForm['Table']['column'].\nIn the example above, you could get the current item selection with the following code:\n```python\nselected_restaurant=frm['Restaurant']['name']\nselected_item=frm['Item']['name']\n```\nor via the PySimpleGUI™ control elements with the following:\n```python\nselected_restaurant=win['Restaurant.name']\nselected_item=win['Item.name']\n```\n### It really is that simple.  All of the heavy lifting is done in the background!\n\nTo get the best possible experience with **pysimplesql**, the magic is in the schema of the database.\nThe automatic functionality of **pysimplesql** relies on just a couple of things:\n- foreign key constraints on the database tables (lets **pysimplesql** know what the relationships are, though manual \nrelationship mapping is also available)\n- a CASCADE ON UPDATE constraint on any tables that should automatically refresh child tables when parent tables are \nchanged\n- PySimpleGUI™ control keys need to be named {table}.{column} for automatic mapping.  Of course, manual mapping is \nsupported as well. @Form.record() is a convenience function/\"custom element\" to make adding records quick and easy!\n- The field 'name', (or the 2nd column of the database in the absence of a 'name' column) is what will display in \ncomboxes for foreign key relationships.  Of course, this can be changed manually if needed, but truly the simplictiy of \n**pysimplesql** is in having everything happen automatically!\n\nHere is another example sqlite table that shows the above rules at work.  Don't let this scare you, there are plenty of\ntools to create your database without resorting to raw SQL commands. These commands here are just shown for completeness\n(Creating the sqlite database is only done once anyway) \n```sql\nCREATE TABLE \"Book\"(\n    \"pkBook\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"title\" TEXT,\n    \"author\" TEXT\n);\nCREATE TABLE \"Chapter\"(\n    \"pkChapter\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    \"title\" TEXT,\n    \"fkBook\" INTEGER,\n    \"startPage\" INTEGER,\n    -- SECRET SAUCE BELOW! If you have foreign key constraints set on the database,\n    -- then pysimplesql will pick them up!\n    -- note: ON UPDATE CASCADE only needed if you want automatic GUI refreshing\n    -- (i.e. not every constraint needs them, like fields that will populate comboboxes for example)\n    FOREIGN KEY(fkBook) REFERENCES Book(pkBook) ON UPDATE CASCADE\n);\n```\n\n### But wait, there's more!\nThe above is literally all you have to know for working with simple and even moderate databases.  However, there is a \nlot of power in learning what is going on under the hood.  Starting with the fully automatic example above, we will work\nbackwards and unravel things to explain what is available to you for more control at a lower level.\n\n#### **pysimplesql** elements:\nReferencing the example above, look at the following:\n```python\n[ss.record('Restaurant.name')],\n\n# could have been written like this using PySImpleGUI elements:\n[sg.Text('Name:',size=(15,1)),sg.Input('',key='Restaurant.name',size=(30,1), metadata={'type': TYPE_RECORD})]\n```\nAs you can see, the @pysimplesql.record() convenience function simplifies making record controls that adhere to the\n**pysimplesql** naming convention of Table.column. Also notice that **pysimplesql**  makes use of the PySimpleGUI \nmetadata keyword argument - but don't worry, the element's metadata is still be available to you in your own program by\nadding your own keys in the Python list contained within.\nThere is even more you can do with this. The @pysimplesql.record() method can take a PySimpleGUI™ control element as a \nparameter as well, overriding the default Input() element.\nSee this code which creates a combobox instead:\n```python\n[ss.record('Restaurant.fkType', sg.Combo)]\n```\nFurthering that, the functions @pysimplesql.set_text_size() and @pysimplesql.set_control_size() can be used before calls \nto @pysimplesql.record() to have custom sizing of the control elements.  Even with these defaults set, the size parameter \nof @pysimplesql.record() will override the default control size, for plenty of flexibility.\n\nPlace those two functions just above the layout definition shown in the example above and then run the code again\n```python\n# set the sizing for the Restaurant section\nss.set_label_size(10, 1)\nss.set_control_size(90, 1)\nlayout = [\n    [ss.record('Restaurant.name')],\n    [ss.record('Restaurant.location')],\n    [ss.record('Restaurant.fkType', sg.Combo, auto_size_text=False)]\n]\nsub_layout = [\n    [ss.selector('selector1','Item')],\n    [\n        sg.Col(\n            layout=[\n                [ss.record('Item.name')],\n                [ss.record('Item.fkMenu', sg.Combo, auto_size_text=False)],\n                [ss.record('Item.price')],\n                [ss.record('Item.description', sg.MLine, size=(30, 7))]\n            ]\n        )\n    ],\n    #[ss.actions('act_item','Item', edit_protect=False,navigation=False,save=False, search=False)]\n]\nlayout.append([sg.Frame('Items', sub_layout)])\nlayout.append([ss.actions('act_restaurant','Restaurant')])\n```\n![image](https://user-images.githubusercontent.com/70232210/91287363-a71ea680-e75d-11ea-8b2f-d240c1ec2acf.png)\nYou will see that now, the controls were resized using the new sizing rules.  Notice however that the 'Description'\nfield isn't as wide as the others.  That is because the control size was overridden for just that single control (see code above).\n\nLet's see one more example.  This time we will fix the oddly sized 'Description' field, as well as make the 'Restaurant' \nand 'Items' sections with their own sizing\n\n```python\n# set the sizing for the Restaurant section\nss.set_label_size(10, 1)\nss.set_control_size(90, 1)\nlayout = [\n    [ss.record('Restaurant.name')],\n    [ss.record('Restaurant.location')],\n    [ss.record('Restaurant.fkType', sg.Combo, size=(30,10), auto_size_text=False)]\n]\nsub_layout = [\n    [ss.selector('selector1','Item',size=(35,10))],\n    [\n        sg.Col(\n            layout=[\n                [ss.record('Item.name')],\n                [ss.record('Item.fkMenu', sg.Combo, size=(30,10), auto_size_text=False)],\n                [ss.record('Item.price')],\n                [ss.record('Item.description', sg.MLine, size=(30, 7))]\n            ]\n        )\n    ],\n    #[ss.actions('act_item','Item', edit_protect=False,navigation=False,save=False, search=False)]\n]\nlayout.append([sg.Frame('Items', sub_layout)])\nlayout.append([ss.actions('act_restaurant','Restaurant')])\n```\n![image](https://user-images.githubusercontent.com/70232210/91288080-8e62c080-e75e-11ea-8438-86035d4d6609.png)\n\n\n\n\n### Binding the window to the element\nReferencing the same example above, the window and database were bound with this one single line:\n```python\nfrm = ss.Form(':memory:', 'example.sql', bind=win) # Load in the database and bind it to win\n```\nThe above is a one-shot approach and all most users will ever need!\nThe above could have been written as:\n```python\nfrm=ss.Form(':memory:', 'example.sql') # Load in the database\nfrm.bind(win) # automatically bind the window to the database\n```\n\nfrm.bind() likewise can be peeled back to it's own components and could have been written like this:\n```python\nfrm.auto_add_queries()\nfrm.auto_add_relationships()\nfrm.auto_map_controls(win)\nfrm.auto_map_events(win)\nfrm.requery_all()\nfrm.update_elements()\n```\n\nAnd finally, that brings us to the lowest-level functions for binding the database.\nThis is how you can MANUALLY map tables, relationships, controls and events to the database.\nThe above auto_map_* methods could have been manually achieved as follows:\n```python\n# Add the queries you want pysimplesql to handle.  The function frm.auto_add_tables() will add all queries found in the database \n# by default.  However, you may only need to work with a couple of queries in the database, and this is how you would do that\nfrm.add_query('Restaurant','pkRestaurant','name') # add the table Restaurant, with it's primary key field, and descriptive field (for comboboxes)\nfrm.add_query('Item','pkItem','name') # Note: While I personally prefer to use the pk{Query} and fk{Query} naming\nfrm.add_query('Type','pkType','name') #       conventions, it's not necessary for pySimpleSQL\nfrm.add_query('Menu','pkMenu','name') #       These could have just as well been restaurantID and itemID for example\n\n# Set up relationships\n# Notice below that the first relationship has the last parameter to True.  This is what the ON UPDATE CASCADE constraint accomplishes.\n# Basically what it means is that then the Restaurant table is requeried, the associated Item table will automatically requery right after.\n# This is what allows the GUI to seamlessly update all of the control elements when records are changed!\n# The other relationships have that parameter set to False - they still have a relationship, but they don't need requeried automatically\nfrm.add_relationship('LEFT JOIN', 'Item', 'fkRestaurant', 'Restaurant', 'pkRestaurant', True) \nfrm.add_relationship('LEFT JOIN', 'Restaurant', 'fkType', 'Type', 'pkType', False)\nfrm.add_relationship('LEFT JOIN', 'Item', 'fkMenu', 'Menu', 'pkMenu', False)\n\n# Map our controls\n# Note that you can map any control to any Query/field combination that you would like.\n# The {Query}.{field} naming convention is only necessary if you want to use the auto-mapping functionality of pysimplesql!\nfrm.map_control(win['Restaurant.name'],'Restaurant','name')\nfrm.map_control(win['Restaurant.location'],'Restaurant','location')\nfrm.map_control(win['Restaurant.fkType'],'Type','pkType')\nfrm.map_control(win['Item.name'],'Item','name')\nfrm.map_control(win['Item.fkRestaurant'],'Item','fkRestaurant')\nfrm.map_control(win['Item.fkMenu'],'Item','fkMenu')\nfrm.map_control(win['Item.price'],'Item','price')\nfrm.map_control(win['Item.description'],'Item','description')\n\n# Map out our events\n# In the above example, this was all done in the background, as we used convenience functions to add record navigation buttons.\n# However, we could have made our own buttons and mapped them to events.  Below is such an example\nfrm.map_event('Edit.Restaurant.First',db['Restaurant'].First) # button control with the key of 'Edit.Restaurant.First'\n                                                             # mapped to the Query.First method\nfrm.map_event('Edit.Restaurant.Previous',db['Restaurant'].Previous)\nfrm.map_event('Edit.Restaurant.Next',db['Restaurant'].Next)\nfrm.map_event('Edit.Restaurant.Last',db['Restaurant'].Last)\n# and so on...\n# In fact, you can use the event mapper however you want to, mapping control names to any function you would like!\n# Event mapping will be covered in more detail later...\n\n# This is the magic function which populates all of the controls we mapped!\n# For your convience, you can optionally use the function Form.set_callback('update_controls',function) to set a callback function\n# that will be called every time the controls are updated.  This allows you to do custom things like update\n# a preview image, change control parameters or just about anythong you want!\nfrm.update_elements()\n```\n\nAs you can see, there is a lot of power in the auto functionality of pysimplesql, and you should take advantage of it any time you can.  Only very specific cases need to reach this lower level of manual configuration and mapping!\n\n# BREAKDOWN OF ADVANCED FUNCTIONALITY\n**pysimplesql** does much more than just bridge the gap between PySimpleGUI™ and Sqlite databases! In full, **pysimplesql** contains:\n* Convenience functions for simplifying PySimpleGUI™ layout code\n* Control binding between PySimpleGUI™ controls and Sqlite database fields\n* Automatic requerying of related tables\n* Record navigation - Such as First, Previous, Next, Last, Searching and selector controls\n* Callbacks allow your own functions to expand control over your own database front ends\n* Event Mapping\n\nWe will break each of these down below to give you a better understanding of how each of these features works.\n## Convenience Functions\nThere are currently only a few convenience functions to aid in quickly creating PySimpleGUI™ layout code\npysimplesql.set_text_size(width,height) - Sets the PySimpleGUI™ text size for subsequent calls to Form.record(). Defaults to (15,1) otherwise.\n\npysimplesql.set_control_size(width, height) - Sets the PySImpleGUI™ control size for subsequent calls to Form.record(). Defaults to (30,1) otherwise.\n\npysimplesql.record(table, field,control_type=None,size=None,text_label=None)- This is a convenience function for creating a PySimpleGUI™ text element and a PySimpleGUI™ Input element inline for purposes of displaying a record from the database.  This function also creates the naming convention (table.column) in the control's key parameter that **pysimplesql** uses for advanced automatic functionality. The optional control_type parameter allows you to bind control types other than Input to a database field.  Checkboxes, listboxes and other controls entered here will override the default Input control. The size parameter will override the default control size that was set with Database.set_control_size().  Lastly, the text_label parameter will prefix a text field before the control.\n\npysimplesql.selector() -  for adding Selector controls to your GUI.  Selectors are responsible for selecting the current record in a Form\n\npysimplesql.actions()- Actions such as save, delete, search and navigation can all be customized with this convenience function!\n\n## Control Binding\n    TODO\n## Automatic Requerying\n    TODO\n## Record Navigation\n**pysimplesql** includes a convenience function for adding record navigation buttons to your project.  For lower level control or a custom look, you may want to learn how to do this on your own.  Lets start with the convenience function and work backwards from there to see how you can implement your own record navigation controls.\n\nThe convenience function pysimplesql.actions() is a swiss army knife when it comes to generating PySimpleGUI™ layout code for your record navigation controls.  With it, you can add First, Previous, Next and Last record navigation buttons, a search box, edit protection modes, and record actions such as Insert, Save and Delete (Or any combination of these items).  Under the hood, the actions() convenience function uses the Event Mapping features of **pysimplesql**, and your own code can do this too!\nSee the code below on example usage of the **pysimplesql**.actions() convenience function\n\n```python\n#!/usr/bin/python3\nimport PySimpleGUI as sg\nimport pysimplesql as ss\n\n# Create a small table just for demo purposes\nsql = '''\nCREATE TABLE \"Fruit\"(\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Fruit\"\n);\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Apple\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Orange\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Banana\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Kiwi\");\n'''\n\n# PySimpleGUI™ layout code to create your own navigation buttons\ntable = 'Fruit'  # This is the table in the database that you want to navigate\nlayout = [\n    [ss.record(table, 'name', label='Fruit Name')],  # pysimplesql.record() convenience function for easy record creation!\n    [ss.actions(table)]  # pysimplesql.actions() convenience function for easy navigation controls!\n]\n\nwin = sg.Window('Navigation demo', layout, finalize=True)\n# note: Since win was passed as a parameter, binding is automatic (including event mapping!)\n# Also note, in-memory databases can be created with \":memory:\"!\ndb = ss.Database(':memory:', sql_commands=sql, bind=win) #<- Database can be used as an alias to Form!\n\nwhile True:\n    event, values = win.read()\n    if db.process_events(event, values):  # <=== let pysimplesql process its own events! Simple!\n        print(f'PySimpleDB event handler handled the event {event}!')\n    elif event == sg.WIN_CLOSED or event == 'Exit':\n        db = None  # <= ensures proper closing of the sqlite database and runs a database optimization\n        break\n    else:\n        print(f'This event ({event}) is not yet handled.')\n```\nSimple!\nBut as stated earlier, **pysimplesql**.actions is a swiss army knife!  Experiment with the code ablove, trying all of these variations to see all of goodness this convenience functions provides!\n\n```python\nss.actions(table, search=False)\nss.actions(table, save=False)\nss.actions(table, edit_protect=False)\nss.actions(table, insert=False)\nss.actions(table, delete=False, save=False) \n```\n\n\nSee example below of how your can make your own record navigation controls instead of using the **pysimplesql**.actions() convenience function:\n\n```python\n#!/usr/bin/python3\nimport PySimpleGUI as sg\nimport pysimplesql as ss\n\n# Create a small table just for demo purposes\nsql = '''\nCREATE TABLE \"Fruit\"(\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Fruit\"\n);\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Apple\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Orange\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Banana\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Kiwi\");\n'''\n\n# PySimpleGUI™ layout code to create your own navigation buttons\ntable = 'Fruit'  # This is the table in the database that you want to navigate\nlayout = [\n    [ss.record(table, 'name', label='Fruit Name')],  # pysimplesql.record() convenience function for easy record creation!\n    # Below we will create navigation buttons manually, naming the key so that the automatic event mapper will map the events\n    [sg.Button('<<', key=f'btnFirst', size=(1, 1), metadata=meta = {'type': ss.TYPE_EVENT, 'event_type': ss.EVENT_FIRST, 'table': table, 'function': None}),\n     sg.Button('<', key=f'btnPrevious', size=(1, 1), metadata=meta = {'type': ss.TYPE_EVENT, 'event_type': ss.EVENT_PREVIOUS, 'table': table, 'function': None}),\n     sg.Button('>', key=f'btnNext', size=(1, 1), metadata=meta = {'type': ss.TYPE_EVENT, 'event_type': ss.EVENT_NEXT, 'table': table, 'function': None}),\n     sg.Button('>>', key=f'btnLast', size=(1, 1), metadata=meta = {'type': ss.TYPE_EVENT, 'event_type': ss.EVENT_LAST, 'table': table, 'function': None})\n     ]\n]\n\nwin = sg.Window('Navigation demo', layout, finalize=True)\n# note: Since win was passed as a parameter, binding is automatic (including event mapping!)\n# Also note, in-memory databases can be created with \":memory:\"!\ndb = ss.Database(':memory:', win, sql_commands=sql)\n\nwhile True:\n    event, values = win.read()\n    if db.process_events(event, values):  # <=== let pysimplesql process its own events! Simple!\n        print(f'PySimpleDB event handler handled the event {event}!')\n    elif event == sg.WIN_CLOSED or event == 'Exit':\n        db = None  # <= ensures proper closing of the sqlite database and runs a database optimization\n        break\n    else:\n        print(f'This event ({event}) is not yet handled.')\n```\nNotice the metadata use in the navigation buttons above.  This is so that the Automatic event mapping of **pysimplesql** will handle these.  Valid event_types can be found right at the start of the pysimplesql.py file.\n\nPeeling this back further, you can rewrite the same without the special metadata used by the automatic event mapper, then manually map them in the event mapper yourself...\n\n```python\n#!/usr/bin/python3\nimport PySimpleGUI as sg\nimport pysimplesql as ss\n\n# Create a small table just for demo purposes\nsql = '''\nCREATE TABLE \"Fruit\"(\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Fruit\"\n);\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Apple\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Orange\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Banana\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Kiwi\");\n'''\n\n# PySimpleGUI™ layout code to create your own navigation buttons\ntable = 'Fruit'  # This is the table in the database that you want to navigate\nlayout = [\n    ss.record(table, 'name', label='Fruit Name'),  # pysimplesql.record() convenience function for easy record creation!\n    # Below we will create navigation buttons manually, naming the key so that the automatic event mapper will map the events\n    [\n        sg.Button('<<', key=f'btnFirst', size=(1, 1)),\n        sg.Button('<', key=f'btnPrevious', size=(1, 1)),\n        sg.Button('>', key=f'btnNext', size=(1, 1)),\n        sg.Button('>>', key=f'btnLast', size=(1, 1))\n    ]\n]\n\nwin = sg.Window('Navigation demo', layout, finalize=True)\n# note: Since win was passed as a parameter, binding is automatic (including event mapping!)\n# Also note, in-memory databases can be created with \":memory:\"!\ndb = ss.Database(':memory:', sql_commands=sql,bind=win)\n\n# Manually map the events, since we did not adhere to the naming convention that the automatic mapper expects\ndb.map_event('btnFirst', db[table].first)\ndb.map_event('btnPrevious', db[table].previous)\ndb.map_event('btnNext', db[table].next)\ndb.map_event('btnLast', db[table].last)\n\nwhile True:\n    event, values = win.read()\n    if db.process_events(event, values):  # <=== let pysimplesql process its own events! Simple!\n        print(f'PySimpleDB event handler handled the event {event}!')\n    elif event == sg.WIN_CLOSED or event == 'Exit':\n        db = None  # <= ensures proper closing of the sqlite database and runs a database optimization\n        break\n    else:\n        print(f'This event ({event}) is not yet handled.')\n```\n\nLastly, you can rewrite the same and handle the events yourself instead of relying on **pysimplesql**'s event mapper\n\n```python\n#!/usr/bin/python3\nimport PySimpleGUI as sg\nimport pysimplesql as ss\n\n# Create a small table just for demo purposes\nsql = '''\nCREATE TABLE \"Fruit\"(\n    \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"name\" TEXT DEFAULT \"New Fruit\"\n);\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Apple\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Orange\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Banana\");\nINSERT INTO \"Fruit\" (\"name\") VALUES (\"Kiwi\");\n'''\n\n# PySimpleGUI™ layout code to create your own navigation buttons\ntable = 'Fruit'  # This is the table in the database that you want to navigate\nlayout = [\n    ss.record(table, 'name', label='Fruit Name'),  # pysimplesql.record() convenience function for easy record creation!\n    # Below we will create navigation buttons manually, naming the key so that the automatic event mapper will map the events\n    [\n        sg.Button('<<', key=f'btnFirst', size=(1, 1)),\n        sg.Button('<', key=f'btnPrevious', size=(1, 1)),\n        sg.Button('>', key=f'btnNext', size=(1, 1)),\n        sg.Button('>>', key=f'btnLast', size=(1, 1))\n    ]\n]\n\nwin = sg.Window('Navigation demo', layout, finalize=True)\n# note: Since win was passed as a parameter, binding is automatic (including event mapping!)\n# Also note, in-memory databases can be created with \":memory:\"!\ndb = ss.Database(':memory:', win, sql_commands=sql)\n\nwhile True:\n    event, values = win.read()\n    # Manually handle our record selector events, bypassing the event mapper completely\n    if db.process_events(event, values):  # <=== let pysimplesql process its own events! Simple!\n        print(f'PySimpleDB event handler handled the event {event}!')\n    elif event == 'btnFirst':\n        db[table].first()\n    elif event == 'btnPrevious':\n        db[table].previous()\n    elif event == 'btnNext':\n        db[table].next()\n    elif event == 'btnLast':\n        db[table].last()\n    elif event == sg.WIN_CLOSED or event == 'Exit':\n        db = None  # <= ensures proper closing of the sqlite database and runs a database optimization\n        break\n    else:\n        print(f'This event ({event}) is not yet handled.')\n\n```\n\nWhether you want to use the **pysimplesql**.actions() convenience function, write your own navigation button layout code, use the auto event mapper, manually map the events, or handle the events yourself, you have plenty of options for flexibility writing your navigation button code!  Of course, the convenience function is very flexible and has attractive icons in the buttons, and really should be used in most cases.\n## Callbacks\n TODO\n## Event Mapping\n TODO\n\n## SIMPLE BUT ROBUST PROMPT SAVE SYSTEM\nNothing is worse than a program that doesn't catch when you forget to save changes - especially if those programs deal with data entry. **pysimplesql** has a simple but robust prompt save system in place.  This is enabled by default, but can be turned off if needed. Prompt saves can be thought of as having 3 levels - a Form level which affects all queries of the Form, a Query level which affects only specific queries, and a manual level where you can command the system to prompt to save changes (such as when switching tabs in a tab group, at specified intervals, or when shutting down your program). The system is smart enough to only prompt if an actual change is found.\n### Form-level prompt save\nSimply call ```python frm.set_promt_save(True) # or False to disable``` to enable automatic promt saves any time the user navigates away from a record that has changed.  This happens for any and all Queries attached to this Form.\n### Query-level prompt save\nA call to ```python frm['table_name'].set_prompt_save(True) # or False to disable for this Query``` can enable/disable automatic prompting for individual Queries\n### Manual prompting\nTo manually prompt for a save, just do a direct call to ```python frm.prompt_save().  There is an optional autosave=True/False parameter to enable an autosave feature which will make these saves happen automatically without bothering the user for their input.  Its also a great thing to put in your main loop exit conditions to ensure changes are saved before shutting down.  There are a couple of caveats to using the prompt_save() call on the main loop exit condition - please see example below:\n```python\n# For using the prompt save system on exit, you have to add the enable_close_attempted_event=True parameter during PySimpleGUI window creation\nwindow=sg.Window('My Program', layout, enable_close_attempted_event=True)\n\nWhile True:\n\tevents,values=window.read()\n\n\tif event in (sg.WINDOW_CLOSE_ATTEMPTED_EVENT, sg.WIN_CLOSED, 'Exit', '-ESCAPE-'):\n        \tfrm.prompt_save(autosave=False) # set autosave to True to have this automatically happen, or leave to False to have the user prompted\n\t\twindow.close()\n\t\tfrm=None\n\t\tbreak\n```\n\n## PLEASE BE PATIENT\nThere is a lot of documentation left to do, and more examples to make.  In subsequent releases, I'll try to pick away at \nthese items to get them done.  For now, just create a github issue and ask your questions and I'll do my best to guide\nyou in the right direction!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/PySimpleSQL/pysimplesql/archive/refs/tags/v2.3.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PySimpleSQL/pysimplesql",
    "keywords": "SQL,sqlite,sqlite3,database,front-end,access,libre office,GUI,PySimpleGUI",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysimplesql",
    "package_url": "https://pypi.org/project/pysimplesql/",
    "platform": "ALL",
    "project_url": "https://pypi.org/project/pysimplesql/",
    "project_urls": {
      "Download": "https://github.com/PySimpleSQL/pysimplesql/archive/refs/tags/v2.3.0.tar.gz",
      "Homepage": "https://github.com/PySimpleSQL/pysimplesql"
    },
    "release_url": "https://pypi.org/project/pysimplesql/2.3.0/",
    "requires_dist": [
      "PySimpleGUI",
      "update-checker"
    ],
    "requires_python": "",
    "summary": "Sqlite3 binding for PySimpleGUI",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16688782,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c31bbd6239ebfc0ff45640f8181f111f6789a7c253cd67434c4353ad50d6a2f1",
          "md5": "1a0ccb8b05e51e9222baf3e0a6857301",
          "sha256": "8550b764fa3145609d73392c0a3316b7cd8c7bec52320b463a1bf3a0aed5ebd2"
        },
        "downloads": -1,
        "filename": "PySimpleSQL-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a0ccb8b05e51e9222baf3e0a6857301",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24122,
        "upload_time": "2021-05-04T18:29:06",
        "upload_time_iso_8601": "2021-05-04T18:29:06.558789Z",
        "url": "https://files.pythonhosted.org/packages/c3/1b/bd6239ebfc0ff45640f8181f111f6789a7c253cd67434c4353ad50d6a2f1/PySimpleSQL-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3f7959d5091dcb5a287992426fea7f1b9862b2b39c93684814c8ad04c859cb8",
          "md5": "254af05ae3a63dc823d896b2733f8038",
          "sha256": "a3596a7aa152f973ac26629e3a1585497350498a78544e81e40a87b12edf61eb"
        },
        "downloads": -1,
        "filename": "PySimpleSQL-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "254af05ae3a63dc823d896b2733f8038",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23967,
        "upload_time": "2021-05-04T18:48:33",
        "upload_time_iso_8601": "2021-05-04T18:48:33.022787Z",
        "url": "https://files.pythonhosted.org/packages/d3/f7/959d5091dcb5a287992426fea7f1b9862b2b39c93684814c8ad04c859cb8/PySimpleSQL-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "354111d6080b241d3a8eeb4fd3f833127e87afe13065d1132bddfb1909431924",
          "md5": "e626206e53b2988ea938fc09c48b0cb1",
          "sha256": "c53aceb08138478c0e58454d8b4d29d663aa004fc9655befd47f0873f9f056c4"
        },
        "downloads": -1,
        "filename": "PySimpleSQL-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e626206e53b2988ea938fc09c48b0cb1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12301,
        "upload_time": "2021-05-21T14:24:28",
        "upload_time_iso_8601": "2021-05-21T14:24:28.675150Z",
        "url": "https://files.pythonhosted.org/packages/35/41/11d6080b241d3a8eeb4fd3f833127e87afe13065d1132bddfb1909431924/PySimpleSQL-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eedc107352b4fd5f21791a23eb91da21c3e13223070d2ace71f90cd4df2806a8",
          "md5": "e566e10aab710321faa0326a798e23a9",
          "sha256": "f18da83782c89b319695697237f9a5b241e556a2a2c830639cefc50541041ddb"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e566e10aab710321faa0326a798e23a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12401,
        "upload_time": "2021-05-24T23:51:33",
        "upload_time_iso_8601": "2021-05-24T23:51:33.150985Z",
        "url": "https://files.pythonhosted.org/packages/ee/dc/107352b4fd5f21791a23eb91da21c3e13223070d2ace71f90cd4df2806a8/pysimplesql-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeef1441c2e6a4e788ecf6e5a6bc632da5c085c0f5a667928931890b3a4bbbc1",
          "md5": "84027782101e520551cae35cb7300710",
          "sha256": "aa80134a057eceb9ce82140ddd754652372957429ccda552c799575799da5987"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "84027782101e520551cae35cb7300710",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12710,
        "upload_time": "2021-05-26T12:39:28",
        "upload_time_iso_8601": "2021-05-26T12:39:28.140346Z",
        "url": "https://files.pythonhosted.org/packages/ae/ef/1441c2e6a4e788ecf6e5a6bc632da5c085c0f5a667928931890b3a4bbbc1/pysimplesql-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "839656efa7cc9065e21be03161a2b44e131bd3dae941550078b513d1ac9b4697",
          "md5": "c24663d8a6b550c4c1660a86542b4f1b",
          "sha256": "f29eb07cea389e362e596a1b45f8519a7cffd30140d57845bf510dd426d33a28"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c24663d8a6b550c4c1660a86542b4f1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 108770,
        "upload_time": "2021-05-27T12:50:14",
        "upload_time_iso_8601": "2021-05-27T12:50:14.239066Z",
        "url": "https://files.pythonhosted.org/packages/83/96/56efa7cc9065e21be03161a2b44e131bd3dae941550078b513d1ac9b4697/pysimplesql-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f32d77bbe08ff231895614f942a69900fc5ce23784f2fe9edfb6ee54233d4090",
          "md5": "3b1b7f8963480a591484bd78ef0dd4b4",
          "sha256": "75adc19741c44ddba39a8814dbd7df3260c73eab22e0fce0678c7a1f6b4053d2"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3b1b7f8963480a591484bd78ef0dd4b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 108601,
        "upload_time": "2021-05-27T13:32:16",
        "upload_time_iso_8601": "2021-05-27T13:32:16.386869Z",
        "url": "https://files.pythonhosted.org/packages/f3/2d/77bbe08ff231895614f942a69900fc5ce23784f2fe9edfb6ee54233d4090/pysimplesql-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ed76f491b9c1d9459c0a008085a335e32cbb89ba1c0a082469216e6ee572cdc",
          "md5": "35fafd6563751d6f21298be8ad64009c",
          "sha256": "dfb08eccac9ef177043e6a07abd48206ce6b9013150bf8d96d2add459de7869d"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35fafd6563751d6f21298be8ad64009c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 95975,
        "upload_time": "2021-05-29T19:54:04",
        "upload_time_iso_8601": "2021-05-29T19:54:04.743007Z",
        "url": "https://files.pythonhosted.org/packages/0e/d7/6f491b9c1d9459c0a008085a335e32cbb89ba1c0a082469216e6ee572cdc/pysimplesql-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5278805a374d3aed64870effe62c7ffe18bfb0a3668d3b0fbf1810f524a4d3f2",
          "md5": "a698282b3200544608da555a22c29891",
          "sha256": "1c9c6074ac18e9087ae9129a9bf720dd4df4dcef386979a391572a05e943b5f5"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a698282b3200544608da555a22c29891",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 110729,
        "upload_time": "2021-05-29T19:54:06",
        "upload_time_iso_8601": "2021-05-29T19:54:06.624704Z",
        "url": "https://files.pythonhosted.org/packages/52/78/805a374d3aed64870effe62c7ffe18bfb0a3668d3b0fbf1810f524a4d3f2/pysimplesql-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b56e07645c8fa77e9cefe2f40e076e6b1837e6c688cdfe3acec742e141568fbc",
          "md5": "9f3128e4539da78e2abc656a4df00493",
          "sha256": "fbfbd2775e8cb46d0b3b94b82c45eb790b71da83ccbae9c81ffa2c52e0f79218"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f3128e4539da78e2abc656a4df00493",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 95975,
        "upload_time": "2021-05-29T20:00:44",
        "upload_time_iso_8601": "2021-05-29T20:00:44.500669Z",
        "url": "https://files.pythonhosted.org/packages/b5/6e/07645c8fa77e9cefe2f40e076e6b1837e6c688cdfe3acec742e141568fbc/pysimplesql-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b2d437a52cd751caa24e8b712985247e92bd84670a82116d704be410866d5c",
          "md5": "2f540038bd7206b5a9f724ffc205d1c3",
          "sha256": "64431177d75e4c056ecf3b8a55c718326dd900beb252aba1ea5eecbe51f298a0"
        },
        "downloads": -1,
        "filename": "pysimplesql-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2f540038bd7206b5a9f724ffc205d1c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 110734,
        "upload_time": "2021-05-29T20:00:46",
        "upload_time_iso_8601": "2021-05-29T20:00:46.543616Z",
        "url": "https://files.pythonhosted.org/packages/b7/b2/d437a52cd751caa24e8b712985247e92bd84670a82116d704be410866d5c/pysimplesql-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39fada7094f97a12e6df0129d737523cb81803eb0fdfdbd040d3c06488a16c77",
          "md5": "25987507f6933eabb2ebfdfd3fbeed02",
          "sha256": "aa1ad84ecb7b552c5784dc49295ed9ea00a6244db3bb93abc9990eb1fcaddc84"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25987507f6933eabb2ebfdfd3fbeed02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 100863,
        "upload_time": "2022-09-15T17:34:32",
        "upload_time_iso_8601": "2022-09-15T17:34:32.574804Z",
        "url": "https://files.pythonhosted.org/packages/39/fa/da7094f97a12e6df0129d737523cb81803eb0fdfdbd040d3c06488a16c77/pysimplesql-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4df646618b76f5ac02df29b3472fe51b46aacc15446baa7598ed6028eec9ae01",
          "md5": "dc39b9f59d55e27d5f997632483ae509",
          "sha256": "91f4fdb44f060b3ed887842f85c6b0cc3cd92916ba757c88f6e4aa1758ca93b1"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc39b9f59d55e27d5f997632483ae509",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 117534,
        "upload_time": "2022-09-15T17:34:34",
        "upload_time_iso_8601": "2022-09-15T17:34:34.567481Z",
        "url": "https://files.pythonhosted.org/packages/4d/f6/46618b76f5ac02df29b3472fe51b46aacc15446baa7598ed6028eec9ae01/pysimplesql-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38369d87e77fa4ed20be4544925731ce3f04eb5a55c08f62f4678f6d835609ab",
          "md5": "4b52ae363a22761b45902c14cad5bb0b",
          "sha256": "0b01dcf1762073e5d26761d96c69c26e0a02ba83c469a9505c28ef08bf2e8e73"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b52ae363a22761b45902c14cad5bb0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101519,
        "upload_time": "2022-09-16T18:31:26",
        "upload_time_iso_8601": "2022-09-16T18:31:26.149174Z",
        "url": "https://files.pythonhosted.org/packages/38/36/9d87e77fa4ed20be4544925731ce3f04eb5a55c08f62f4678f6d835609ab/pysimplesql-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a71695ae88c67a105c87d324b07290ded31c7c828532816d365b60605865d97c",
          "md5": "e959c9b5a528ad5579e1e9286032987a",
          "sha256": "7bd44edc9d9d58fcdf211d0f6d5c5f205c5301fbbb2dc7338fa669c75a569835"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e959c9b5a528ad5579e1e9286032987a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 118323,
        "upload_time": "2022-09-16T18:31:28",
        "upload_time_iso_8601": "2022-09-16T18:31:28.727978Z",
        "url": "https://files.pythonhosted.org/packages/a7/16/95ae88c67a105c87d324b07290ded31c7c828532816d365b60605865d97c/pysimplesql-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80913f4a9e301c774083a4ee90f30300fc4ae8c6f06406ba47d235732dd8091c",
          "md5": "5a9dc667d871b5764c61a76a4f139233",
          "sha256": "9e3631cfd1d7ef225f990603885f221b53a72c0fde75d85244586db91e4b6990"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a9dc667d871b5764c61a76a4f139233",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 101596,
        "upload_time": "2023-01-24T00:06:36",
        "upload_time_iso_8601": "2023-01-24T00:06:36.901035Z",
        "url": "https://files.pythonhosted.org/packages/80/91/3f4a9e301c774083a4ee90f30300fc4ae8c6f06406ba47d235732dd8091c/pysimplesql-2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a98f3fbcc97a53cd91ad628c64c06299e3386f6aa605d5340dc9333a4c59df",
          "md5": "263d379bb14b2f33bdc2a5725dc2aa6c",
          "sha256": "41535db2d1209c45c2459b0701fdfd8946baaf569f5cdc82ed49e1d49110ac9b"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "263d379bb14b2f33bdc2a5725dc2aa6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 118387,
        "upload_time": "2023-01-24T00:06:39",
        "upload_time_iso_8601": "2023-01-24T00:06:39.175523Z",
        "url": "https://files.pythonhosted.org/packages/33/a9/8f3fbcc97a53cd91ad628c64c06299e3386f6aa605d5340dc9333a4c59df/pysimplesql-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98eeb1e115b5c75041c51d6c3ed0356915c49c26be347d0403959559b068acc0",
          "md5": "073a0ba92ed9734c62856f1755bcffff",
          "sha256": "476d50c49923efea001282f2f08d4d5a88b63ba0802ac0772674fa8e49aa596b"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "073a0ba92ed9734c62856f1755bcffff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 106681,
        "upload_time": "2023-02-04T00:19:56",
        "upload_time_iso_8601": "2023-02-04T00:19:56.384388Z",
        "url": "https://files.pythonhosted.org/packages/98/ee/b1e115b5c75041c51d6c3ed0356915c49c26be347d0403959559b068acc0/pysimplesql-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c077a456d8ec98aa6cd1610a7f5b638e6a9627f04a5efbac9600a7829d63b4d",
          "md5": "67605f5afbb4cddf38b1ae088fb209c6",
          "sha256": "50a9bb3e2ef7e6c210436f20365d30434dc5e2a0e0ab36742dfd60388fc88bd3"
        },
        "downloads": -1,
        "filename": "pysimplesql-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67605f5afbb4cddf38b1ae088fb209c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 125465,
        "upload_time": "2023-02-04T00:19:58",
        "upload_time_iso_8601": "2023-02-04T00:19:58.836971Z",
        "url": "https://files.pythonhosted.org/packages/1c/07/7a456d8ec98aa6cd1610a7f5b638e6a9627f04a5efbac9600a7829d63b4d/pysimplesql-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98eeb1e115b5c75041c51d6c3ed0356915c49c26be347d0403959559b068acc0",
        "md5": "073a0ba92ed9734c62856f1755bcffff",
        "sha256": "476d50c49923efea001282f2f08d4d5a88b63ba0802ac0772674fa8e49aa596b"
      },
      "downloads": -1,
      "filename": "pysimplesql-2.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "073a0ba92ed9734c62856f1755bcffff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 106681,
      "upload_time": "2023-02-04T00:19:56",
      "upload_time_iso_8601": "2023-02-04T00:19:56.384388Z",
      "url": "https://files.pythonhosted.org/packages/98/ee/b1e115b5c75041c51d6c3ed0356915c49c26be347d0403959559b068acc0/pysimplesql-2.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c077a456d8ec98aa6cd1610a7f5b638e6a9627f04a5efbac9600a7829d63b4d",
        "md5": "67605f5afbb4cddf38b1ae088fb209c6",
        "sha256": "50a9bb3e2ef7e6c210436f20365d30434dc5e2a0e0ab36742dfd60388fc88bd3"
      },
      "downloads": -1,
      "filename": "pysimplesql-2.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "67605f5afbb4cddf38b1ae088fb209c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 125465,
      "upload_time": "2023-02-04T00:19:58",
      "upload_time_iso_8601": "2023-02-04T00:19:58.836971Z",
      "url": "https://files.pythonhosted.org/packages/1c/07/7a456d8ec98aa6cd1610a7f5b638e6a9627f04a5efbac9600a7829d63b4d/pysimplesql-2.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}