{
  "info": {
    "author": "Jerome Guibert",
    "author_email": "jguibert@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# networkx-query\n\n\n[![Unix Build Status](https://img.shields.io/travis/geronimo-iia/networkx-query/master.svg?label=unix)](https://travis-ci.com/geronimo-iia/networkx-query)[![Coverage Status](https://img.shields.io/coveralls/geronimo-iia/networkx-query/master.svg)](https://coveralls.io/r/geronimo-iia/networkx-query)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fe669a02b4aa46b5b1faf619ba2bf382)](https://www.codacy.com/app/geronimo-iia/networkx-query?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=geronimo-iia/networkx-query&amp;utm_campaign=Badge_Grade)[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/geronimo-iia/networkx-query.svg)](https://scrutinizer-ci.com/g/geronimo-iia/networkx-query/?branch=master)\n[![PyPI Version](https://img.shields.io/pypi/v/networkx-query.svg)](https://pypi.org/project/networkx-query)\n[![PyPI License](https://img.shields.io/pypi/l/networkx-query.svg)](https://pypi.org/project/networkx-query)\n\nVersions following [Semantic Versioning](https://semver.org/)\n\n## Overview\n\nNetworkX Query Tool (preview)\n\nSee [documentation](https://geronimo-iia.github.io/networkx-query).\n\n\n## Installation\n\nInstall this library directly into an activated virtual environment:\n\n```text\n$ pip install networkx-query\n```\n\nor add it to your [Poetry](https://poetry.eustace.io/) project:\n\n```text\n$ poetry add networkx-query\n```\n\n## Usage\n\n### Searching nodes\n\n```python\nimport networkx as nx\nfrom networkx_query import search_nodes, search_edges\n\ng = nx.DiGraph()\ng.add_node(1, product=\"chocolate\")\ng.add_node(2, product=\"milk\")\ng.add_node(3, product=\"coat\")\ng.add_edge(1, 2, action=\"shake\")\ng.add_edge(3, 2, action=\"produce\")\n\n\nfor node_id in search_nodes(g, {\"==\": [(\"product\",), \"chocolate\"]}):\n    print(node_id)\n\n>> 1\n```\n\n### Searching edges\n\n```python\nfor edge_id in search_edges(g, {\"eq\": [(\"action\",), \"produce\"]}):\n    print(edge_id)\n\n>> (3, 2)\n```\n\n### Searching relation ship\n\nWith ```search_direct_relationships``` you can made a query which filter edges on their :\n - source node attributes\n - edge attributes\n - target node attributes\n\nWith this graph:\n\n```python\nimport networkx as nx\nfrom networkx_query import search_direct_relationships\n\ng = nx.DiGraph()\nfor i in range(30):\n    g.add_node(i, data=i)\n\nfor i in range(10, 30):\n    g.add_edge(i - 10, i, data=i)\n```\n\nWe can filtering all edges with source node with data < 3:\n\n```python\nlist(search_direct_relationships(graph=g, source={\"lt\": [\"data\", 3]}))\n\n[(0, 10), (1, 11), (2, 12)]\n```\n\n\nWe can filtering all edges with:\n - source node with data < 8\n - edge with data > 15\n\n```python\nlist(search_direct_relationships(graph=g, source={\"lt\": [\"data\", 8]}, edge={\"gt\": [\"data\", 15]}))\n\n>> [(6, 16), (7, 17)]\n```\n\nWe can filtering all edges with:\n - source node with data > 9\n - edge with data > 15\n - target node with data < 22\n\n```python\nsearch_direct_relationships(\n            graph=g, source={\"gt\": [\"data\", 9]}, edge={\"gt\": [\"data\", 15]}, target={'lt': [\"data\", 22]}\n        )\n    )\n\n>> [(10, 20), (11, 21)]\n```\n\n## API\n\nActually, we have:\n\n- [search_edges](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_edges)\n- [search_nodes](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_nodes) \n- [search_direct_relationships](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.search_direct_relationships) \n\n\nAll this function are based on [prepare_query](https://geronimo-iia.github.io/networkx-query/api.html#networkx_query.prepare_query) which return an Evaluator.\n\nQuickly, ```Evaluator``` are function with this signature: (context) -> bool, and ```Context``` is a dictionary like structure (with in and [] methods, and support __contains__ or  (__iter__ and __getitem__))\nWith networkX, node and edge attributes are dictionary like, so implementation of this three methods are very simple.\n\n\n\n## Query language\n\nWe define a little json query language like [json-query-language](https://github.com/clue/json-query-language/blob/master/SYNTAX.md) \nagainst nodes or edges attributes.\n\n\n### Expressions\n\nMain expression syntax turn around this:\n\n```\n{\n    operator_name : parameters\n}\n```\n\n### Basic matching expression\n\nTest if a node/edge has an attribute named \"my_property\":\n```\n{\n    \"has\" : \"my_property\"\n}\n```\n\n\nTest if a node/edge has an attribute product : { \"definition\": { \"name\": xxx }} with xxx equals to \"chocolate\".\n```\n{\n    \"eq\" : [ (\"product\", \"definition\", \"name\"), \"chocolate\"]\n}\n```\n\nThe tuple ```(\"product\", \"definition\", \"name\")``` is a path in attribut dictionnary.\nA Path is a single string or a tuple of string which represente a path in a tree (here a dictionary).\n\nWe support this operators:\n\n| Name     | Alias | Parameters      | Description                                                                   |\n| -------- | :---: | --------------- | ----------------------------------------------------------------------------- |\n| has      |       | Path            | Check if path exists in context.                                              |\n| contains |       | Path, str       | Check if an attribut path exists and contains specified value.                |\n| eq       | `==`  | Path, Any       | Check if an attribut path exists and equals specified value.                  |\n| neq      | `!=`  | Path, Any       | Check if an attribut path did not exists or not equals specified value.       |\n| gt       |  `>`  | Path, Any       | Check if an attribut path exists and greather that specified value.           |\n| lt       |  `<`  | Path, Any       | Check if an attribut path exists and lower that specified value.              |\n| gte      | `>=`  | Path, Any       | Check if an attribut path exists and greather or equals that specified value. |\n| lte      | `<=`  | Path, Any       | Check if an attribut path exists and lower or equals that specified value.    |\n| in       | `:=`  | Path, List[Any] | Check if an attribut path exists and attribut value in specified values.      |\n\n\n### Boolean composition of matching expression\n\nWe support this operators:\n\n| Name | Alias | Parameters    | Description    |\n| ---- | :---: | ------------- | -------------- |\n| and  | `&&`  | list of query | And operator.  |\n| or   | \\|\\|  | list of query | Or operator.   |\n| xor  |       | list of query | xor operator.  |\n| nxor |       | list of query | nxor operator. |\n| not  |  `!`  | query         | Not operator.  |\n\n\nBy default, a list of expressions is equivalent of an \"AND\" of this expressions.\n\nExample:\n```\n{\n    'not': {\n        'has': ['group']\n    },\n    'has': 'application',\n    'eq': [('_link', 'other', 'weight'), 2]\n}\n```\nis equivalent to:\n\n```\n{\n    'and': [\n        {\n            'not': [\n                {\n                    'has': ['group']\n                }\n            ]\n        },\n        {\n            'has': ['application']\n        },\n        {\n            'eq': [('_link', 'other', 'weight'), 2]\n        }\n    ]\n}\n```\n\n\n## Wished Features\n\n- add projection expression (a return like statement)\n- add join relation ship \n- add path condition between node\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/networkx_query",
    "keywords": "networkx,graph,query",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "networkx-query",
    "package_url": "https://pypi.org/project/networkx-query/",
    "platform": "",
    "project_url": "https://pypi.org/project/networkx-query/",
    "project_urls": {
      "Documentation": "https://geronimo-iia.github.io/networkx-query/",
      "Homepage": "https://pypi.org/project/networkx_query",
      "Repository": "https://github.com/geronimo-iia/networkx-query"
    },
    "release_url": "https://pypi.org/project/networkx-query/1.0.1/",
    "requires_dist": [
      "networkx (>=2.4,<3.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "NetworkX Query Tool",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7162989,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d81b463ad63e3ed19f98723e73d6eca21d1aac70d395fdeb7484adb021c59e49",
          "md5": "be600f7cb22a83956056a3ea279871d1",
          "sha256": "2cf4573ebe208ecb57eb73703ba2fe6e0df27e7ee366800e292bf15ce4f3532c"
        },
        "downloads": -1,
        "filename": "networkx_query-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be600f7cb22a83956056a3ea279871d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7462,
        "upload_time": "2020-05-01T18:42:25",
        "upload_time_iso_8601": "2020-05-01T18:42:25.136362Z",
        "url": "https://files.pythonhosted.org/packages/d8/1b/463ad63e3ed19f98723e73d6eca21d1aac70d395fdeb7484adb021c59e49/networkx_query-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fadbefd3263b0adbea19ea29ff2b83b76306585a6ae4f225942cd6023c04874",
          "md5": "303ae7986235829991b49934c47377b9",
          "sha256": "d58c06832503e4d7beccfa182505cc4c3ee978baff895242eef33c0be099acfe"
        },
        "downloads": -1,
        "filename": "networkx_query-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "303ae7986235829991b49934c47377b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 7803,
        "upload_time": "2020-05-01T18:42:27",
        "upload_time_iso_8601": "2020-05-01T18:42:27.738559Z",
        "url": "https://files.pythonhosted.org/packages/4f/ad/befd3263b0adbea19ea29ff2b83b76306585a6ae4f225942cd6023c04874/networkx_query-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20d4e439f63404cf3916e487a4198ec67f4a9e1abd89c11a4308e7d26118e503",
          "md5": "dd53a56d23aed16d7b7d335dc3443557",
          "sha256": "dfaea3ea9311ed84f8c0301baead84f8e5459bb75148e9859a545b8e4b5db815"
        },
        "downloads": -1,
        "filename": "networkx_query-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd53a56d23aed16d7b7d335dc3443557",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 9228,
        "upload_time": "2020-05-02T00:02:07",
        "upload_time_iso_8601": "2020-05-02T00:02:07.840424Z",
        "url": "https://files.pythonhosted.org/packages/20/d4/e439f63404cf3916e487a4198ec67f4a9e1abd89c11a4308e7d26118e503/networkx_query-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4e928805b6a48e3609c397449be4e1d5f5d073db07fdbc1860f0a2c55e533cb",
          "md5": "4db47dd6c3ae84948b5aa09a5191ed2d",
          "sha256": "597533155c73532493e4842fac1ba06f618ea5d70d181f888210c06b8ba57fc7"
        },
        "downloads": -1,
        "filename": "networkx_query-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4db47dd6c3ae84948b5aa09a5191ed2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 11191,
        "upload_time": "2020-05-02T00:02:09",
        "upload_time_iso_8601": "2020-05-02T00:02:09.520070Z",
        "url": "https://files.pythonhosted.org/packages/f4/e9/28805b6a48e3609c397449be4e1d5f5d073db07fdbc1860f0a2c55e533cb/networkx_query-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "504c0ff3b3191efcbd29ec8cb40a840c6c3d5fec8a052c362f597c3a73747e1a",
          "md5": "a96994e27dca1ed3dfeaae2330479f25",
          "sha256": "ea6b744840e152902db5a5b51c0ee9f6d273959fb2c8c4a338fdee42abd54ffe"
        },
        "downloads": -1,
        "filename": "networkx_query-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a96994e27dca1ed3dfeaae2330479f25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 11303,
        "upload_time": "2020-05-04T10:20:49",
        "upload_time_iso_8601": "2020-05-04T10:20:49.402573Z",
        "url": "https://files.pythonhosted.org/packages/50/4c/0ff3b3191efcbd29ec8cb40a840c6c3d5fec8a052c362f597c3a73747e1a/networkx_query-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38371869daa4e0c5ff21e7305441f316e58962de3cc1cb015b2b29e49facd09f",
          "md5": "9dd9411eb61c36bdf7dc92e014441c8a",
          "sha256": "e1d0e2adcae393955e779fea6934d89b157a3abb0a529e8c47d8d9741df34fc4"
        },
        "downloads": -1,
        "filename": "networkx_query-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9dd9411eb61c36bdf7dc92e014441c8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 13150,
        "upload_time": "2020-05-04T10:20:50",
        "upload_time_iso_8601": "2020-05-04T10:20:50.835469Z",
        "url": "https://files.pythonhosted.org/packages/38/37/1869daa4e0c5ff21e7305441f316e58962de3cc1cb015b2b29e49facd09f/networkx_query-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "504c0ff3b3191efcbd29ec8cb40a840c6c3d5fec8a052c362f597c3a73747e1a",
        "md5": "a96994e27dca1ed3dfeaae2330479f25",
        "sha256": "ea6b744840e152902db5a5b51c0ee9f6d273959fb2c8c4a338fdee42abd54ffe"
      },
      "downloads": -1,
      "filename": "networkx_query-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a96994e27dca1ed3dfeaae2330479f25",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 11303,
      "upload_time": "2020-05-04T10:20:49",
      "upload_time_iso_8601": "2020-05-04T10:20:49.402573Z",
      "url": "https://files.pythonhosted.org/packages/50/4c/0ff3b3191efcbd29ec8cb40a840c6c3d5fec8a052c362f597c3a73747e1a/networkx_query-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38371869daa4e0c5ff21e7305441f316e58962de3cc1cb015b2b29e49facd09f",
        "md5": "9dd9411eb61c36bdf7dc92e014441c8a",
        "sha256": "e1d0e2adcae393955e779fea6934d89b157a3abb0a529e8c47d8d9741df34fc4"
      },
      "downloads": -1,
      "filename": "networkx_query-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9dd9411eb61c36bdf7dc92e014441c8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 13150,
      "upload_time": "2020-05-04T10:20:50",
      "upload_time_iso_8601": "2020-05-04T10:20:50.835469Z",
      "url": "https://files.pythonhosted.org/packages/38/37/1869daa4e0c5ff21e7305441f316e58962de3cc1cb015b2b29e49facd09f/networkx_query-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}