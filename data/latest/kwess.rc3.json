{
  "info": {
    "author": "Issa Lompo",
    "author_email": "kaiyoux@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Introduction\r\n\r\nYet another Questrade API wrapper.\r\n\r\nFor details about the input parameters and output results, please visit\r\nthe [Questrade API documentation](https://www.questrade.com/api/home).\r\n\r\n### To install:\r\n**python -m pip install kwess**\r\n\r\n\r\n# Usage Example\r\n\r\n```\r\nimport kwess\r\nfrom datetime import datetime as dt\r\nfrom pprint import pprint\r\n\r\n# It is assumed that your manually generated token has been saved in local file my_token.txt \r\nqs = kwess.Trader(rt_file=\"my_token.txt\", verbose=\"v\")\r\n\r\naccs = qs.get_accounts()\r\nfor acc in accs:\r\n    print(acc, \"\\n\")\r\n\r\naccn = qs.find_account_number(\"tfsa\")\r\nprint(accn)\r\n\r\n# Get account activities from 1/12/1999 to 28/9/2022\r\naccs = qs.get_account_activities(startdatetime=dt(year=1999, month=12, day=1), enddatetime=dt(year=2022, month=9, day=28), verbose=\"xxx\")\r\nfor acc in accs:\r\n    print(acc, \"\\n\")\r\n\r\n# Get (all types of) TFSA account orders from 17/8/2022 to now\r\naccs = qs.get_account_orders(startdatetime=dt(year=2022, month=8, day=17), verbose=\"vv\")\r\nfor acc in accs:\r\n    print(acc, \"\\n\")\r\n\r\n# Get margin account orders that are still open\r\naccs = qs.get_account_orders(accounttype=\"margin\", startdatetime=dt(year=2022, month=7, day=28), enddatetime=dt.now(), statefilter=\"opened\", verbose=\"333\")\r\nfor acc in accs:\r\n    print(acc, \"\\n\")\r\n\r\nords = qs.get_account_orders_by_ids(accounttype=\"tfsa\", orderid=\"1088713788\", verbose=\"b\")\r\npprint(ords)\r\n\r\nords = qs.get_account_orders_by_ids(orderid=\"1098747429,1088752426,1088713788\", verbose=\"aa\")\r\npprint(ords)\r\n    \r\nords = qs.get_account_orders_by_ids(orderid=1098747429)\r\npprint(ords)\r\n\r\n# Get the current time from the API server\r\ndto = qs.get_server_time()\r\nprint(dto[0])\r\nprint(dto[1])\r\n    \r\n# Questrade does not seem to keep old account executions - only the most recent\r\nexcs = qs.get_account_executions(startdatetime=dt(year=2022, month=1, day=28), enddatetime=dt(year=2022, month=9, day=30), verbose=\"o\")\r\nfor exc in excs:\r\n    print(exc, \"\\n\")\r\n\r\naccs = qs.get_account_balances()\r\nprint(accs)\r\n\r\naccs = qs.get_account_positions(verbose=\"d\")\r\nprint(accs)\r\n    \r\nsim = qs.search_symbols(\"vfv\", verbose=\"88\")\r\nprint(sim)\r\n\r\nsim = qs.get_symbols_by_names(\"xdiv.to,xuu.to,cve.to\", verbose=\"**\")\r\nprint(sim)\r\n\r\nsim = qs.get_symbols_by_names(\"hom.un.to\")\r\nprint(sim)\r\n\r\nsim = qs.get_symbols_by_ids(26070347, verbose=\"e\")\r\nprint(sim)\r\n\r\nsim = qs.get_symbols_by_ids(\"26070347,12890,8953192,18070692\", verbose=\"ee\")\r\nprint(sim)\r\n\r\nsim = qs.get_symbol_options(12890, verbose=\"s\")\r\npprint(sim)\r\n\r\nmks = qs.get_markets()\r\npprint(mks)\r\n\r\nmks = qs.get_market_quotes(12890,verbose=\"zz\")\r\nprint(mks)\r\n\r\nmks = qs.get_market_quotes(\"26070347,12890,8953192,18070692\", verbose=\"h\")\r\nprint(mks)\r\n\r\nops = qs.get_market_quotes_options(option_ids=[9907637,9907638])\r\npprint(ops)\r\n\r\n```\r\n\r\n\r\n# API Class And Methods\r\n\r\nclass Trader\r\n```\r\n__init__(self, rt_file='refreshToken', server_type='live', timeout=15, verbose='')\r\n  Description:\r\n      Initializer of a Trader object. Before creating a Trader object \r\n      (for the very first time or when the present token has expired),\r\n      you must generate a new token for manual authorization from your Questrade APP HUB,\r\n      and save that manually generated token in a local file. That local file's filename\r\n      (or pathname) is passed to rt_file.\r\n      When Trader creates a Trader object, it exchanges that manually obtained token for an\r\n      access token and a refresh token. The access token expires in 30 minutes and\r\n      the refresh token expires in three days.\r\n      As long as the refresh token has not expired, creating Trader objects or calling method\r\n      get_new_refresh_token will obtain a new access token (if the current access token has\r\n      expired) and obtain a new replacement refresh token that will last for another 3 days.\r\n      Technically, as long as the current refresh token has not expired, it is possible\r\n      to keep exchanging the current refresh token for a new access token and new refresh\r\n      token pair indefinitely (by creating Trader objects or calling method\r\n      get_new_refresh_token).\r\n      If the refresh token ever expires, you must log back into your Questrade account,\r\n      generate a new token for manual authorization under APP HUB, and save that token\r\n      in the local file referred to by rt_file.\r\n  Parameters:\r\n      - rt_file name of your local file containing your refresh token. \r\n      Defaults to \"refreshToken\".\r\n      - server_type could be 2 possible values: \"live\" or \"test\". \"live\" will allow you to\r\n      interact with your real Questrade account. \"test\" is for interacting with your test\r\n      account.\r\n      - timeout number of seconds to wait for the API server to respond before giving up.\r\n      Defaults to 15 seconds. Set timeout to None if you wish to wait forever for a response.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 1 or \"v\".\r\n  Returns:\r\n      Trader object.\r\n\r\n     \r\nbuild_datetime_string(self, adatetime=None, gmt=False)\r\n  Description:\r\n      Higher level helper method used to build a Questrade datetime string.\r\n  Parameters:\r\n      - adatetime a datetime object.\r\n      - gmt optional boolean indicating if datetime is Greenwich Mean Time.\r\n      Default value is False.\r\n  Returns:\r\n      A Questrade datetime string.\r\n\r\n     \r\nfind_account_number(self, accounttype)\r\n  Description:\r\n      Finds the account number corresponding to account type.\r\n  Parameters:\r\n      - accounttype the type of account. Example \"tfsa\", \"margin\", etc.\r\n  Returns:\r\n      An account number in string format.\r\n\r\n     \r\nget_account_activities(self, startdatetime, enddatetime=None, accounttype='TFSA', verbose='')\r\n  Description:\r\n      Generator that returns the account activities from the account related to account\r\n      type accounttype,\r\n      between the range specified by startdatetime and enddatetime. Both objects are\r\n      datetime objects.\r\n  Parameters:\r\n      - startdatetime datetime object sepecifying the start of a range.\r\n      - enddatetime optional datetime object specifying the end of a range. Defaults to\r\n      now (datetime.datetime.now()) if not specified.\r\n      - accounttype type of Questrade account. Defaults to \"tfsa\".\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 3 or \"vvv\".\r\n  Yields:\r\n      The account activities as a Python object representation of the returned json,\r\n      between the range startdatetime and enddatetime, in chunks of 30 days.\r\n\r\n     \r\nget_account_balances(self, accounttype='TFSA', verbose='')\r\n  Definition:\r\n      Provides the account balances for the account related to account type accounttype.\r\n  Paramaters:\r\n      - accounttype type of Questrade account. Defaults to \"tfsa\".\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Account balances as a Python object representation of the returned json.\r\n\r\n     \r\nget_account_executions(self, accounttype='TFSA', startdatetime=None, enddatetime=None, verbose='')\r\n  Description:\r\n      Generator that provides account executions from the account related to account type\r\n      accounttype,\r\n      between the range specified by startdatetime and enddatetime.\r\n      Both objects are datetime objects.\r\n  Parameters:\r\n      - startdatetime datetime object representing the beginning of a range.\r\n      - enddatetime datetime object representing the end of a range.\r\n      Defaults to now (datetime.datetime.now()) if not specified.\r\n      - accounttype type of Questrade account. Defaults to \"tfsa\".\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 3 or \"vvv\".\r\n  Yields:\r\n      Account executions as a Python object representation of the returned json,\r\n      between the range startdatetime and enddatetime, in chunks of 30 days.\r\n\r\n     \r\nget_account_orders(self, startdatetime, enddatetime=None, accounttype='TFSA', statefilter='All', verbose='')\r\n  Description:\r\n      Generator that provides the account orders from the account related to account type\r\n      accounttype,\r\n      between the range specified by startdatetime and enddatetime. Both objects are\r\n      datetime objects.\r\n  Parameters:\r\n      - startdatetime datetime object representing the beginning of a range.\r\n      - enddatetime optional datetime object representing the end of a range.\r\n      Defaults to now (datetime.datetime.now()) if not specified.\r\n      - accounttype type of Questrade account. Defaults to \"tfsa\".\r\n      - statefilter can be used to specify the state of orders.\r\n      It has 3 possible values: Opened, Closed, or All. Defaults to \"All\".\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 3 or \"vvv\".\r\n  Yields:\r\n      Account orders as a Python object representation of the returned json,\r\n      between the range startdatetime and enddatetime, in chunks of 30 days.\r\n\r\n     \r\nget_account_orders_by_ids(self, orderid, accounttype='TFSA', verbose='')\r\n  Description:\r\n      Provides the account orders, specified by orderid, from the account related to account\r\n      type accounttype,\r\n  Parameters:\r\n      - orderid is a string of one or many orderid numbers. Several orderid numbers are\r\n      seperated by commas (with no spaces).\r\n      a single orderid could be passed as a numeral instead of a string.\r\n      - accounttype type of Questrade account. Defaults to \"tfsa\".\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Account orders as a Python object representation of the returned json.\r\n\r\n     \r\nget_account_positions(self, accounttype='TFSA', verbose='')\r\n  Definition:\r\n      Provides the account positions for the account related to account type accounttype.\r\n  Paramaters:\r\n      - accounttype type of Questrade account. Defaults to \"tfsa\".\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Account positions as a Python object representation of the returned json.\r\n\r\n     \r\nget_accounts(self, verbose='')\r\n  Description:\r\n      Generator that provides the accounts.\r\n  Parameters:\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 1 or \"v\".\r\n  Yields:\r\n      All your Questrade accounts as a Python object representation of the returned json.\r\n\r\n     \r\nget_market_candles(self, sid, interval, startdatetime=None, enddatetime=None, verbose='')\r\n  Description:\r\n      Provides a list of json formatted market candles.\r\n  Parameters:\r\n      - sid symbol id as a string or numeral.\r\n      - interval is the Historical Data Granularity.\r\n      Examples: \"OneMinute\", \"HalfHour\", \"OneYear\".\r\n      - startdatetime datetime object representing the beginning of a range.\r\n      - enddatetime datetime object representing the end of a range.\r\n      Defaults to now if not specified.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Historical market data in the form of OHLC candlesticks for a specified symbol\r\n      as a Python object representation of the returned json.\r\n      This call is limited to returning 2,000 candlesticks in a single response.\r\n      sid is a symbol id.\r\n\r\n     \r\nget_market_quotes(self, ids, verbose='')\r\n  Definition:\r\n      Provides market quotes data.\r\n  Parameter:\r\n      - ids Internal symbol identifier. Could be a single value or a string of values.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      A single Level 1 market data quote for one or more symbols in json string format\r\n      as a Python object representation of the returned json.\r\n      IMPORTANT NOTE: Questrade user needs to be subscribed to a real-time data package,\r\n      to receive market quotes in real-time, otherwise call to get quote is considered\r\n      snap quote and limit per market can be quickly reached. Without real-time data package,\r\n      once limit is reached, the response will return delayed data.\r\n      (Please check \"delay\" parameter in response always).\r\n\r\n     \r\nget_market_quotes_options(self, option_ids, filters=None, verbose='')\r\n  Definition:\r\n      Provides market quotes options.\r\n  Parameters:\r\n      - option_ids is a list of stock option ids.\r\n      - filters optional list of dictionary items.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      A single Level 1 market data quote and Greek data for one or more option symbols\r\n      as a Python object representation of the returned json.\r\n\r\n     \r\nget_market_quotes_strategies(self, variants, verbose='')\r\n  Definition:\r\n      Provides a calculated L1 market data quote for a single or many multi-leg strategies.\r\n  Parameter:\r\n      - variants is a list of dictionary items.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      A calculated L1 market data quote for a single or many multi-leg strategies\r\n      as a Python object representation of the returned json.\r\n\r\n     \r\nget_markets(self, verbose='')\r\n  Description:\r\n      Provides market data.\r\n  Parameters:\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Information about supported markets as a Python object representation\r\n      of the returned json.\r\n\r\n     \r\nget_new_refresh_token(self, token, server_type, verbose='')\r\n  Description:\r\n      Obtains a new refresh token (and new access token) from the API server.\r\n      You generally would not need to call this method, as it is potentially called by Trader\r\n      during initialization.\r\n      Trader will only call this method if the access token has expired.\r\n  Parameters:\r\n      - token the refresh token that is stored in the local file pointed to by rt_file.\r\n      - server_type should be \"live\" or \"test\" for your live Questrade account or your test\r\n      Questrade account, respectively.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 1 or \"v\".\r\n\r\n     \r\nget_server_time(self, verbose='')\r\n  Description:\r\n      Provides the time from the Questrade API server.\r\n  Parameters:\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      The time on the server as a tuple made of a simple datetime object,\r\n      as well as in the expected Python object representation of the returned json.\r\n\r\n     \r\nget_symbol_options(self, sid, verbose='')\r\n  Definition:\r\n      Provides symbol options data.\r\n  Parameter:\r\n      - sid Internal symbol identifier.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      An option chain for a particular underlying symbol as a Python object representation\r\n      of the returned json.\r\n\r\n     \r\nget_symbols_by_ids(self, ids, verbose='')\r\n  Definition:\r\n      Provides symbols data from symbol id(s).\r\n  Parameter:\r\n      - ids Internal symbol identifier(s). Could be a single numeric value or a string of\r\n      comma-seperated values (with no spaces).\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Detailed information about one or more symbol as a Python object representation\r\n      of the returned json.\r\n\r\n     \r\nget_symbols_by_names(self, names, verbose='')\r\n  Definition:\r\n      Provides symbols data from name(s).\r\n  Parameter:\r\n      - names is a string of names seperated by commas (with no spaces).\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Detailed information about one or more symbol as a Python object representation\r\n      of the returned json.\r\n\r\n     \r\nobject_to_qdstr(self, dto, gmt=False)\r\n  Description:\r\n      Converts a datetime object to a Questrade datetime string.\r\n  Parameters:\r\n      - dto datetime object.\r\n      - gmt optional boolean indicating if datetime is Greenwich Mean Time.\r\n      Default value is False.\r\n  Returns:\r\n      The provided datetime object in Questrade API compatible string format.\r\n      Example: \"2011-02-01T00:00:00-05:00\".\r\n      If gmt is set to False, time will be in local time.\r\n      If gmt is True, the returned time will be considered as gmt time.\r\n\r\n     \r\nsearch_symbols(self, prefix, offset=0, verbose='')\r\n  Definition:\r\n      Provides symbol(s) data using several search criteria.\r\n  Parameters:\r\n      - prefix Prefix of a symbol or any word in the description.\r\n      - offset Offset in number of records from the beginning of a result set.\r\n      Default is not to offset.\r\n      - verbose level of verbosity represented by the number of characters in a string.\r\n      Defaults to empty string. Maximum verbosity is 2 or \"vv\".\r\n  Returns:\r\n      Symbol(s) data as a Python object representation of the returned json.\r\n\r\n     \r\nvalues_to_dobj(self, y, m, d, h=0, mi=0, s=0)\r\n  Description:\r\n      Helper method that builds a datetime object.\r\n  Parameters:\r\n      - y integer to be set as the year.\r\n      - m intiger to be set as the month.\r\n      - d integer to be set as the day.\r\n      - h optional integer to be set as the hour. Default value is 0.\r\n      - mi optional integer to be set as the minutes. Default value is 0.\r\n      - s optional integer to be set as the seconds. Default value is 0.\r\n  Returns:\r\n      A datetime object from the values provided as parameters.\r\n\r\n     \r\nvalues_to_qdstr(self, y, m, d, h=0, mi=0, s=0, gmt=False)\r\n  Description:\r\n      Helper method that builds a Questrade datetime string.\r\n      - y integer to be set as the year.\r\n      - m intiger to be set as the month.\r\n      - d integer to be set as the day.\r\n      - h optional integer to be set as the hour. Default value is 0.\r\n      - mi optional integer to be set as the minutes. Default value is 0.\r\n      - s optional integer to be set as the seconds. Default value is 0.\r\n      - gmt optional boolean indicating if datetime is Greenwich Mean Time.\r\n      Default value is False.\r\n  Returns:\r\n      The date time and timezone values provided as parameters in Questrade API compatible\r\n      string format.\r\n      Example: \"2011-02-01T00:00:00-05:00\".\r\n      If gmt is set to False, time will be in local time.\r\n      If gmt is True, the returned time will be considered as gmt time.\r\n```\r\n\r\n\r\nLet me know if you have any questions: <kaiyoux@gmail.com>\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kaiyoux/kwess",
    "keywords": "Questrade,api,REST,wrapper",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "Issa Lompo",
    "maintainer_email": "kaiyoux@gmail.com",
    "name": "kwess",
    "package_url": "https://pypi.org/project/kwess/",
    "platform": null,
    "project_url": "https://pypi.org/project/kwess/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kaiyoux/kwess/issues",
      "Homepage": "https://github.com/kaiyoux/kwess"
    },
    "release_url": "https://pypi.org/project/kwess/0.0.3/",
    "requires_dist": [
      "requests (>=2.28.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Questrade API wrapper.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15703486,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ffc65361e14346da06382fe9e4d4c2122d38166d888ceab4f0b18668b7b9f0e",
          "md5": "1ee5a155c8339b36171e4c4efa196c0c",
          "sha256": "0f87e7b72f76f97479a72abfb89b762de544ea02e9d92885a2dd0594c8bb8cfa"
        },
        "downloads": -1,
        "filename": "kwess-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ee5a155c8339b36171e4c4efa196c0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24336,
        "upload_time": "2022-11-01T03:18:46",
        "upload_time_iso_8601": "2022-11-01T03:18:46.603302Z",
        "url": "https://files.pythonhosted.org/packages/0f/fc/65361e14346da06382fe9e4d4c2122d38166d888ceab4f0b18668b7b9f0e/kwess-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cadcb41dd67872ef0e490808b67beb3bc86887f5e3c655aede1c78d2170b3c14",
          "md5": "345e7dc9b01cac7c4a9c03b57944ecbc",
          "sha256": "497d414438f663c6f07b0da2226c4d0e842b406bf2414c49bbfe97faba2a10d8"
        },
        "downloads": -1,
        "filename": "kwess-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "345e7dc9b01cac7c4a9c03b57944ecbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26717,
        "upload_time": "2022-11-01T03:18:47",
        "upload_time_iso_8601": "2022-11-01T03:18:47.963823Z",
        "url": "https://files.pythonhosted.org/packages/ca/dc/b41dd67872ef0e490808b67beb3bc86887f5e3c655aede1c78d2170b3c14/kwess-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd0b9324122406f7fca70da5c5e21ab2bd506984ec5b51439fd88dfd35ec30c9",
          "md5": "ebc49213a330215426b91ad4822c9f62",
          "sha256": "7c4667629087af47bd3eed698ea5af556da9ed7ac8196a8acabc79a6d5cf395b"
        },
        "downloads": -1,
        "filename": "kwess-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ebc49213a330215426b91ad4822c9f62",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24413,
        "upload_time": "2022-11-08T20:25:33",
        "upload_time_iso_8601": "2022-11-08T20:25:33.006151Z",
        "url": "https://files.pythonhosted.org/packages/dd/0b/9324122406f7fca70da5c5e21ab2bd506984ec5b51439fd88dfd35ec30c9/kwess-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2844603f0efa84228f783593beef20dadb01608414f672dcd90bb3069098b4f",
          "md5": "f8f902c554231e975295d178309f2edf",
          "sha256": "bb84d78383105e5ace8c553b54e67302ca3015a95f8cf9cd8d2932dd868e230d"
        },
        "downloads": -1,
        "filename": "kwess-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8f902c554231e975295d178309f2edf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26786,
        "upload_time": "2022-11-08T20:25:34",
        "upload_time_iso_8601": "2022-11-08T20:25:34.733599Z",
        "url": "https://files.pythonhosted.org/packages/e2/84/4603f0efa84228f783593beef20dadb01608414f672dcd90bb3069098b4f/kwess-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a14fa4213148fdc65ceed3000a6d67ef47ce0d40f59044bebd898be92f11345",
          "md5": "d64f2f552ab1e09c8b7b6b8b02adaa93",
          "sha256": "844679e1fb77b90e90e844fca923ae2a9323958cbe8e929b0025d8d89abec663"
        },
        "downloads": -1,
        "filename": "kwess-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d64f2f552ab1e09c8b7b6b8b02adaa93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24409,
        "upload_time": "2022-11-08T20:57:25",
        "upload_time_iso_8601": "2022-11-08T20:57:25.543813Z",
        "url": "https://files.pythonhosted.org/packages/6a/14/fa4213148fdc65ceed3000a6d67ef47ce0d40f59044bebd898be92f11345/kwess-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84aedc81a597e7273c64bf77bad0ace7dc3b5c50743ac8de82166b2692cd7956",
          "md5": "4fad9e175fb2258d46e432208ef7912f",
          "sha256": "9b5b5ad51980474e01c795c7b1fd01ff3731fffde57865ed43d33c3ae0701249"
        },
        "downloads": -1,
        "filename": "kwess-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4fad9e175fb2258d46e432208ef7912f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26784,
        "upload_time": "2022-11-08T20:57:27",
        "upload_time_iso_8601": "2022-11-08T20:57:27.933565Z",
        "url": "https://files.pythonhosted.org/packages/84/ae/dc81a597e7273c64bf77bad0ace7dc3b5c50743ac8de82166b2692cd7956/kwess-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a14fa4213148fdc65ceed3000a6d67ef47ce0d40f59044bebd898be92f11345",
        "md5": "d64f2f552ab1e09c8b7b6b8b02adaa93",
        "sha256": "844679e1fb77b90e90e844fca923ae2a9323958cbe8e929b0025d8d89abec663"
      },
      "downloads": -1,
      "filename": "kwess-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d64f2f552ab1e09c8b7b6b8b02adaa93",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24409,
      "upload_time": "2022-11-08T20:57:25",
      "upload_time_iso_8601": "2022-11-08T20:57:25.543813Z",
      "url": "https://files.pythonhosted.org/packages/6a/14/fa4213148fdc65ceed3000a6d67ef47ce0d40f59044bebd898be92f11345/kwess-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84aedc81a597e7273c64bf77bad0ace7dc3b5c50743ac8de82166b2692cd7956",
        "md5": "4fad9e175fb2258d46e432208ef7912f",
        "sha256": "9b5b5ad51980474e01c795c7b1fd01ff3731fffde57865ed43d33c3ae0701249"
      },
      "downloads": -1,
      "filename": "kwess-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4fad9e175fb2258d46e432208ef7912f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26784,
      "upload_time": "2022-11-08T20:57:27",
      "upload_time_iso_8601": "2022-11-08T20:57:27.933565Z",
      "url": "https://files.pythonhosted.org/packages/84/ae/dc81a597e7273c64bf77bad0ace7dc3b5c50743ac8de82166b2692cd7956/kwess-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}