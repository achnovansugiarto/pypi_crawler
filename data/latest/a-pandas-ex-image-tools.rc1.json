{
  "info": {
    "author": "Johannes Fischer",
    "author_email": "<aulasparticularesdealemaosp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "\n```python\n\n$pip install a-pandas-ex-image-tools\n\nimport cv2\n\nimport pandas as pd\n\n\n\nfrom a_cv2_imshow_thread import add_imshow_thread_to_cv2\n\nadd_imshow_thread_to_cv2()\n\n\n\nfrom a_pandas_ex_image_tools import pd_add_image_tools, debugger, get_list_of_all_colors_in_range\n\n\n\npd_add_image_tools()\n\n#you can ignore all exceptions\n\ndebugger.stop_on_exceptions = True\n\n\n\n#Useful if you want to ignore every exception, but want to see what's going on\n\ndebugger.print_all_exceptions = True\n\n\n\npythonlogo = 'https://github.com/hansalemaos/screenshots/raw/main/colorfind1.png'\n\n\n\n\n\n```\n\n\n\n\n\n<img src=\"https://github.com/hansalemaos/screenshots/raw/main/colorfind1.png\"/>\n\n\n\n\n\n\n\n```python\n\ndf = pd.Q_image2df(pythonlogo)\n\ndf\n\nOut[5]: \n\n         x    y  red  green  blue\n\n0        0    0    0      0     0\n\n1        1    0    0      0     0\n\n2        2    0    0      0     0\n\n3        3    0    0      0     0\n\n4        4    0    0      0     0\n\n    ...  ...  ...    ...   ...\n\n39995  195  199    0      0     0\n\n39996  196  199    0      0     0\n\n39997  197  199    0      0     0\n\n39998  198  199    0      0     0\n\n39999  199  199    0      0     0\n\n[40000 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\ndf1 = df.im_multicolor_lookup([(255, 232, 115)])\n\ndf1\n\nOut[11]: \n\n         x    y  red  green  blue\n\n13337  137   66  255    232   115\n\n13338  138   66  255    232   115\n\n13339  139   66  255    232   115\n\n13340  140   66  255    232   115\n\n13341  141   66  255    232   115\n\n    ...  ...  ...    ...   ...\n\n25269   69  126  255    232   115\n\n25270   70  126  255    232   115\n\n25467   67  127  255    232   115\n\n25468   68  127  255    232   115\n\n25667   67  128  255    232   115\n\n[608 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\ndf1.im_xy_to_convex_hull()  # get the convex hull \n\nOut[12]: \n\narray([[[154,  67]],\n\n       [[153,  68]],\n\n       [[ 73, 124]],\n\n       [[ 67, 128]],\n\n       [[ 67, 114]],\n\n       [[ 70, 108]],\n\n       [[ 74, 104]],\n\n       [[137,  66]],\n\n       [[150,  66]]], dtype=int32)\n\n```\n\n\n\n\n\n\n\n```python\n\ndf.im_show_df_image()  # cv2.imshow\n\n```\n\n\n\n\n\n\n\n```python\n\n# converts the pandas DataFrame back to a numpy array\n\ndf.im_df_to_np_image()  \n\n```\n\n\n\n\n\n\n\n```python\n\ndf.im_print_all_colors()  # prints all colors sorted by qty\n\n```\n\n\n\n\n\n\n\n```python\n\ndf1.im_xy_to_shapely()\n\nOut[13]: <shapely.geometry.polygon.Polygon at 0x21302f70>\n\n```\n\n\n\n\n\n\n\n```python\n\n# Gets all x,y coordinates as a numpy array\n\ndf1.im_xy_to_np()\n\nOut[14]: \n\narray([[137,  66],\n\n       [138,  66],\n\n       [139,  66],\n\n       ...,\n\n       [ 67, 127],\n\n       [ 68, 127],\n\n       [ 67, 128]], dtype=uint16)\n\n```\n\n\n\n\n\n\n\n```python\n\n# you can even edit images \n\ndf.loc[df.im_multicolor_lookup([(0,0,0)]).index, ['red', 'green', 'blue']] = [255,255,0] \n\n```\n\n\n\n\n\n\n\n<img src=\"https://github.com/hansalemaos/screenshots/raw/main/2022-12-27%2003_40_27-.png\"/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n# Replace a color range with one color\n\ndf.loc[df.im_multicolor_lookup(get_list_of_all_colors_in_range((0,0,0), (10,10,10))).index, ['red', 'green', 'blue']] = [255,255,0] \n\n```\n\n\n\n\n\n\n\n```python\n\n# cluster colors in areas\n\n# More about the parameters: https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html\n\nmultilookupdf = df.im_multicolor_lookup(\n\n    colorlist=[(255, 232, 115), (255, 0, 0), (48, 105, 152)], ).im_xy_to_color_clusters(eps=2, min_samples=4, n_jobs=-1,\n\n    poly_color=(255, 255, 0), poly_outline_thickness=3, rectanglecolor=(0, 255, 0), )\n\nmultilookupdf\n\nOut[24]: \n\n  aa_repr_point             aa_bounds  ... aa_draw_poly aa_draw_rectangle\n\n0     (124, 82)    (106, 66, 132, 96)  ...           ()                ()\n\n1     (142, 71)    (137, 66, 154, 79)  ...           ()                ()\n\n2     (73, 119)   (67, 102, 104, 128)  ...           ()                ()\n\n3    (158, 123)  (144, 117, 164, 131)  ...           ()                ()\n\n4    (119, 155)   (93, 139, 132, 167)  ...           ()                ()\n\n[5 rows x 9 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\n# Cluster multiple colors\n\nmultilookupdf = df.im_multicolor_lookup(\n\n    colorlist=[(255, 232, 115), (255, 0, 0), (48, 105, 152)], ).im_xy_to_color_clusters(eps=2, min_samples=4, n_jobs=-1,\n\n    poly_color=(255, 0, 120), poly_outline_thickness=3, rectanglecolor=(0, 255, 0), )\n\n```\n\n\n\n\n\n\n\n```python\n\n# show the clustered results\n\nnpimage = df.im_df_to_np_image().copy()\n\nmultilookupdf.aa_draw_rectangle.apply(lambda x: x(npimage))\n\nmultilookupdf.aa_draw_poly.apply(lambda x: x(npimage))\n\ncv2.imshow_thread(npimage)\n\n```\n\n\n\n\n\n\n\n<img src=\"https://github.com/hansalemaos/screenshots/raw/main/2022-12-27%2003_49_27-.png\"/>\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nbab=df.im_multicolor_lookup(colorlist=[(255, 232, 115), (48, 105, 152)], ).im_xy_to_merged_color_clusters(\n\n    image=df.im_df_to_np_image().copy(), show_results=True, max_merge_distance=2, eps=2, min_samples=4, n_jobs=-1,\n\n    poly_color=(255, 255, 0), poly_outline_thickness=3, rectanglecolor=(0, 255, 0), mergedcolor=(0, 0, 255), )\n\n\n\n\n\nbab\n\nOut[6]: \n\n  aa_repr_point  ...                                             bb_pic\n\n0     (124, 82)  ...  [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], ...\n\n1     (142, 71)  ...  [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], ...\n\n2     (73, 119)  ...  [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], ...\n\n```\n\n\n\n\n\n\n\n<img src=\"https://github.com/hansalemaos/screenshots/raw/main/2022-12-27%2004_02_09-.png\"/>\n\n\n\n\n\n\n\n\n\n\n\n<img src=\"https://github.com/hansalemaos/screenshots/raw/main/2022-12-27%2004_01_57-.png\"/>\n\n\n\n\n\n\n\n\n\n```python\n\n# Do you prefer working with dicts instead of DataFrames? \n\ndf.im_get_color_lookup_dict()\n\n{(0,\n\n  0,\n\n  0): array([[  0,   0],\n\n        [  1,   0],\n\n        [  2,   0],\n\n        ...,\n\n        [196, 199],\n\n        [197, 199],\n\n        [198, 199]], dtype=uint16),\n\n (15, 33, 48): array([[199, 199]], dtype=uint16),\n\n (17, 35, 49): array([[131,  88]], dtype=uint16),\n\n (17, 35, 50): array([[ 63, 114]], dtype=uint16),\n\n (17, 36, 53): array([[75, 99]], dtype=uint16),\n\n (17,\n\n  37,\n\n  53): array([[119,  97],\n\n        [129,  91]], dtype=uint16),\n\n (18, 36, 50): array([[126,  94]], dtype=uint16),\n\n (18, 37, 52): array([[125,  35]], dtype=uint16),\n\n (19, 38, 53): array([[ 68, 104]], dtype=uint16),\n\n (19,\n\n  39,\n\n  55): array([[ 36, 124],\n\n        [ 73, 100]], dtype=uint16),\n\n...\n\n```\n\n\n\n\n\n\n\n```python\n\ndf.im_get_image_size()\n\n# Out[7]: [(0, 0, 200, 200)]\n\n```\n\n\n\n\n\n\n\n```python\n\n# Count colors in certain regions\n\ndf.im_get_colors_in_regions_and_count(regions=[(10, 10, 100, 100), (150, 150, 160, 170)])\n\nOut[11]: \n\n     red  green  blue  ...  size_of_area  percentage_of_area                region\n\n0      0      0     0  ...          8100           61.925926    (10, 10, 100, 100)\n\n1     69    132   182  ...          8100            1.790123    (10, 10, 100, 100)\n\n2    255    255   255  ...          8100            1.160494    (10, 10, 100, 100)\n\n3     67    129   179  ...          8100            1.148148    (10, 10, 100, 100)\n\n4     62    123   172  ...          8100            1.135802    (10, 10, 100, 100)\n\n..   ...    ...   ...  ...           ...                 ...                   ...\n\n218   59    110   151  ...          8100            0.012346    (10, 10, 100, 100)\n\n219   59    111   153  ...          8100            0.012346    (10, 10, 100, 100)\n\n220   60    112   154  ...          8100            0.012346    (10, 10, 100, 100)\n\n221   62    111   147  ...          8100            0.012346    (10, 10, 100, 100)\n\n222    0      0     0  ...           200          115.500000  (150, 150, 160, 170)\n\n[223 rows x 7 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\n# You can limit the search region\n\ndf.im_limit_search_areas(areas=[(0, 0, 50, 50), (50, 50, 150, 170)]).im_multicolor_lookup(\n\n    colorlist=[(255, 232, 115), (255, 0, 0), (48, 105, 152)])\n\nOut[12]: \n\n         x    y  red  green  blue\n\n13332  132   66   48    105   152\n\n13337  137   66  255    232   115\n\n13338  138   66  255    232   115\n\n13339  139   66  255    232   115\n\n13340  140   66  255    232   115\n\n    ...  ...  ...    ...   ...\n\n33502  102  167  255      0     0\n\n33503  103  167  255      0     0\n\n33504  104  167  255      0     0\n\n33505  105  167  255      0     0\n\n33506  106  167  255      0     0\n\n[1352 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\n# define regions for every individual color\n\ncolordict = {(255, 0, 0): [(0, 0, 50, 50), (0, 0, 1000, 1000)],\n\n    (255, 232, 115): [(0, 0, 1000, 1000), (500, 500, 502, 502), (900, 900, 1000, 950), ],\n\n    (255, 255, 255): [(0, 0, 1000, 1000), (400, 200, 800, 400)], (0, 176, 111): [(0, 0, 1000, 1000)],\n\n    (57, 59, 61): [(0, 0, 1000, 1000)], (0, 0, 0): [(0, 0, 1000, 1000)], }\n\nregi = df.im_get_coords_of_colors_in_regions(colordict)\n\n\n\n         x    y  red  green  blue\n\n0        0    0    0      0     0\n\n1        1    0    0      0     0\n\n2        2    0    0      0     0\n\n3        3    0    0      0     0\n\n4        4    0    0      0     0\n\n    ...  ...  ...    ...   ...\n\n39995  195  199    0      0     0\n\n39996  196  199    0      0     0\n\n39997  197  199    0      0     0\n\n39998  198  199    0      0     0\n\n39999  199  199    0      0     0\n\n[28789 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\n# You can use a multi index to check individual pixels \n\ndfxy = df.im_xy_as_index()\n\n\n\n         red  green  blue\n\nx   y                    \n\n0   0      0      0     0\n\n    1      0      0     0\n\n    2      0      0     0\n\n    3      0      0     0\n\n    4      0      0     0\n\n      ...    ...   ...\n\n199 195    0      0     0\n\n    196    0      0     0\n\n    197    0      0     0\n\n    198    0      0     0\n\n    199    0      0     0\n\n[40000 rows x 3 columns]\n\n\n\n# Let's get the RGB values using the DataFrame we have just created\n\ndfxy.loc[[(0,100), (100,100), (44,40)]]\n\n\n\nOut[17]: \n\n         red  green  blue\n\nx   y                    \n\n0   100    0      0     0\n\n100 100    0      0     0\n\n44  40     0      0     0\n\n```\n\n\n\n\n\n\n\n```python\n\n# can also be done like that:\n\ncoordlist = [(10, 10), (100, 100), (50, 80)]\n\ncolors_of_coords = df.im_get_colors_of_coords(coordlist)\n\ncolors_of_coords\n\nOut[19]: \n\n         red  green  blue\n\nx   y                    \n\n10  10     0      0     0\n\n100 100    0      0     0\n\n50  80    70    134   184\n\n```\n\n\n\n\n\n\n\n```python\n\nCompare 2 images:\n\npythonlogo = 'https://github.com/hansalemaos/screenshots/raw/main/colorfind1.png'\n\ndf = pd.Q_image2df(pythonlogo)\n\ndf.loc[df.im_multicolor_lookup(get_list_of_all_colors_in_range((0,0,0), (10,10,10))).index, ['red', 'green', 'blue']] = [255,255,0] \n\npythonlogo = 'https://github.com/hansalemaos/screenshots/raw/main/colorfind1.png'\n\ndf2 = pd.Q_image2df(pythonlogo)\n\ndf2.im_compare_2_images(df)\n\nOut[23]: \n\n       pic_index    x    y  r1  g1  b1   r2   g2  b2\n\n0              0    0    0   0   0   0  255  255   0\n\n1              1    1    0   0   0   0  255  255   0\n\n2              2    2    0   0   0   0  255  255   0\n\n3              3    3    0   0   0   0  255  255   0\n\n4              4    4    0   0   0   0  255  255   0\n\n          ...  ...  ...  ..  ..  ..  ...  ...  ..\n\n27510      39995  195  199   0   0   0  255  255   0\n\n27511      39996  196  199   0   0   0  255  255   0\n\n27512      39997  197  199   0   0   0  255  255   0\n\n27513      39998  198  199   0   0   0  255  255   0\n\n27514      39999  199  199   0   0   0  255  255   0\n\n[27515 rows x 9 columns]\n\n```\n\n\n\n\n\n```python\n\n# If you want to do additional stuff with OpenCV:\n\ndf.im_xy_to_cv2_coords()\n\nOut[28]: \n\narray([[[  0,   0],\n\n        [  1,   0],\n\n        [  2,   0],\n\n        ...,\n\n        [197, 199],\n\n        [198, 199],\n\n        [199, 199]]])\n\n```\n\n\n\n\n\n\n\n```python\n\ndf.im_singlecolor_lookup((255,255,0))\n\nOut[45]: \n\n         x    y  red  green  blue\n\n0        0    0  255    255     0\n\n1        1    0  255    255     0\n\n2        2    0  255    255     0\n\n3        3    0  255    255     0\n\n4        4    0  255    255     0\n\n    ...  ...  ...    ...   ...\n\n39995  195  199  255    255     0\n\n39996  196  199  255    255     0\n\n39997  197  199  255    255     0\n\n39998  198  199  255    255     0\n\n39999  199  199  255    255     0\n\n[27515 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\ndf.im_get_closest_colors([(10,3,4)])\n\nOut[55]: \n\n       r    g    b      rating         rgb\n\n0      0    0    0   11.179688  (10, 3, 4)\n\n1     15   33   48   53.500000  (10, 3, 4)\n\n2     17   35   49   55.656250  (10, 3, 4)\n\n3     17   35   50   56.468750  (10, 3, 4)\n\n4     18   36   50   57.187500  (10, 3, 4)\n\n..   ...  ...  ...         ...         ...\n\n712  250  242  218  400.750000  (10, 3, 4)\n\n713  252  247  230  411.250000  (10, 3, 4)\n\n714  241  244  246  412.250000  (10, 3, 4)\n\n715  253  251  243  421.500000  (10, 3, 4)\n\n716  255  255  255  432.000000  (10, 3, 4)\n\n[717 rows x 5 columns]\n\n```\n\n\n\n\n\n\n\n```python\n\nget_list_of_all_colors_in_range((0,0,0), (3,4,3))\n\n\n\nOut[59]: \n\n[(0, 0, 0),\n\n (0, 0, 1),\n\n (0, 0, 2),\n\n (0, 0, 3),\n\n (0, 1, 0),\n\n (0, 1, 1),\n\n (0, 1, 2),\n\n (0, 1, 3),\n\n (0, 2, 0),\n\n (0, 2, 1),\n\n (0, 2, 2),\n\n (0, 2, 3),\n\n (0, 3, 0),\n\n```\n\n\n\n\n\n\n\n\n\n```python\n\ndfr = df.im_rgb_as_index()\n\nOut[65]: \n\n                  x    y\n\nred green blue          \n\n0   0     0       0    0\n\n          0       1    0\n\n          0       2    0\n\n          0       3    0\n\n          0       4    0\n\n             ...  ...\n\n255 255   255   120  155\n\n          255   121  155\n\n          255   117  156\n\n          255   118  156\n\n          255   119  156\n\n[40000 rows x 2 columns]\n\n\n\n\n\n#Now you can use dfr.loc to get the coordinates\n\ndfr.loc[(17,37,53)]\n\ndfr.loc[ (39,83,119)]\n\n```\n\n\n\n\n\n\n\n```python\n\n# finds all colors that only exist in the region and nowhere else in the picture \n\ndf.im_get_unique_colors_in_region([(0,0,100,100)])\n\nOut[72]: \n\n        x   y  red  green  blue\n\n18432  32  92   73    137   188\n\n18433  33  92   73    137   187\n\n18434  34  92   72    136   187\n\n18435  35  92   72    136   186\n\n18436  36  92   72    135   186\n\n    ..  ..  ...    ...   ...\n\n14255  55  71   71    135   186\n\n14256  56  71   71    135   185\n\n14257  57  71   71    134   185\n\n12266  66  61   53    102   140\n\n18431  31  92   59    111   153\n\n[845 rows x 5 columns]\n\n```\n\n\n\n```python\n\n# finds all colors that are in the region and somewhere else in the picture \n\ndf.im_get_not_unique_colors_in_region([(0,0,100,100)])\n\nOut[73]: \n\n         x    y  red  green  blue\n\n0        0    0    0      0     0\n\n1        1    0    0      0     0\n\n2        2    0    0      0     0\n\n3        3    0    0      0     0\n\n4        4    0    0      0     0\n\n    ...  ...  ...    ...   ...\n\n20096   96  100    0      0     0\n\n20097   97  100    0      0     0\n\n20098   98  100    0      0     0\n\n20099   99  100    0      0     0\n\n20100  100  100    0      0     0\n\n[9356 rows x 5 columns]\n\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansalemaos/a_pandas_ex_image_tools",
    "keywords": "pandas,OpenCV,cv2,images,pixels,detection",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "a-pandas-ex-image-tools",
    "package_url": "https://pypi.org/project/a-pandas-ex-image-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/a-pandas-ex-image-tools/",
    "project_urls": {
      "Homepage": "https://github.com/hansalemaos/a_pandas_ex_image_tools"
    },
    "release_url": "https://pypi.org/project/a-pandas-ex-image-tools/0.10/",
    "requires_dist": [
      "a-cv2-imshow-thread",
      "a-cv-imwrite-imread-plus",
      "a-pandas-ex-closest-color",
      "a-pandas-ex-column-reduce",
      "a-pandas-ex-enumerate-groups",
      "a-pandas-ex-horizontal-explode",
      "a-pandas-ex-lookupdict",
      "a-pandas-ex-multiloc",
      "a-pandas-ex-obj-into-cell",
      "a-pandas-ex-plode-tool",
      "a-pandas-ex-to-tuple",
      "ansi",
      "flatten-everything",
      "flexible-partial",
      "numexpr",
      "numpy",
      "opencv-python",
      "pandas",
      "PrettyColorPrinter",
      "scikit-learn",
      "Shapely"
    ],
    "requires_python": "",
    "summary": "Uses pandas/numpy/numexpr for operations on pictures - very fast",
    "version": "0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16224560,
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e69e3c331a9b84eee04d4151c4968a2d28d52d64064d98b75fe819ba212a295a",
          "md5": "5f1cbbe035f1a34068e6d3a0fd04ed45",
          "sha256": "c246cdad23e76aff35797090052a213a0842800252e6d4cb48409b527e69ec67"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_image_tools-0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f1cbbe035f1a34068e6d3a0fd04ed45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17352,
        "upload_time": "2022-12-27T11:12:12",
        "upload_time_iso_8601": "2022-12-27T11:12:12.132053Z",
        "url": "https://files.pythonhosted.org/packages/e6/9e/3c331a9b84eee04d4151c4968a2d28d52d64064d98b75fe819ba212a295a/a_pandas_ex_image_tools-0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "601803cfff0934c4f73bef315b516e883431747152d59cf009469d7d32385161",
          "md5": "7e692e0866b87973369827b80f3bb03c",
          "sha256": "b4b94eb068596f1e194f3ae55985c3880d8b41d89d40d058d57897355f787d0f"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_image_tools-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "7e692e0866b87973369827b80f3bb03c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17826,
        "upload_time": "2022-12-27T11:12:13",
        "upload_time_iso_8601": "2022-12-27T11:12:13.831609Z",
        "url": "https://files.pythonhosted.org/packages/60/18/03cfff0934c4f73bef315b516e883431747152d59cf009469d7d32385161/a_pandas_ex_image_tools-0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e69e3c331a9b84eee04d4151c4968a2d28d52d64064d98b75fe819ba212a295a",
        "md5": "5f1cbbe035f1a34068e6d3a0fd04ed45",
        "sha256": "c246cdad23e76aff35797090052a213a0842800252e6d4cb48409b527e69ec67"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_image_tools-0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f1cbbe035f1a34068e6d3a0fd04ed45",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17352,
      "upload_time": "2022-12-27T11:12:12",
      "upload_time_iso_8601": "2022-12-27T11:12:12.132053Z",
      "url": "https://files.pythonhosted.org/packages/e6/9e/3c331a9b84eee04d4151c4968a2d28d52d64064d98b75fe819ba212a295a/a_pandas_ex_image_tools-0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "601803cfff0934c4f73bef315b516e883431747152d59cf009469d7d32385161",
        "md5": "7e692e0866b87973369827b80f3bb03c",
        "sha256": "b4b94eb068596f1e194f3ae55985c3880d8b41d89d40d058d57897355f787d0f"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_image_tools-0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "7e692e0866b87973369827b80f3bb03c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17826,
      "upload_time": "2022-12-27T11:12:13",
      "upload_time_iso_8601": "2022-12-27T11:12:13.831609Z",
      "url": "https://files.pythonhosted.org/packages/60/18/03cfff0934c4f73bef315b516e883431747152d59cf009469d7d32385161/a_pandas_ex_image_tools-0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}