{
  "info": {
    "author": "Michael D. M. Dryden",
    "author_email": "mk.dryden@utoronto.ca",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![PyPI - License](https://img.shields.io/pypi/l/obswebsocket_trio)\n![PyPI](https://img.shields.io/pypi/v/obswebsocket_trio)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/obswebsocket_trio)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/m/mkdryden/obs-websocket-py-trio)\n\n# obs-websocket-py\nPython library to communicate with an [obs-websocket](https://github.com/Palakis/obs-websocket) server.\nThis is a fork of [obs-websocket-py](https://github.com/Elektordi/obs-websocket-py) using the trio async library.\n\n_Licensed under the MIT License_\n\n## Project pages\n\nGitHub project: https://github.com/mkdryden/obs-websocket-py-trio\n\nPyPI package: https://pypi.org/project/obs-websocket-py-trio/\n\n## Installation\n\nJust run `pip install obswebsocket-trio` in your Python venv or directly on your system.\n\nFor development, `poetry install` from the source directory will generate a venv with all the dependencies\n\nFor manual install, git clone the github repo and copy the directory **obswebsocket_trio** in your python project root.\n\n\n## Usage\n\nSee python scripts in the [samples](https://github.com/mkdryden/obs-websocket-py-trio/tree/master/samples) directory.\n\nThe big change from the original obs-websocket-py is the use of the trio async library.\nThis means that most methods of `ObsWS` must be called with `await` from inside a trio event loop.\nA new convenience function `open_obs_websocket` acts as an asynchronous context manager yielding an `ObsWs` instance,\nautomatically connecting and starting a trio `Nursery` to manage the background tasks required for the websocket\nconnection and to handle events from OBS.\n\n\nA simple example to print the names of all scenes:\n```python\nfrom obswebsocket_trio import open_obs_websocket, requests\nimport trio\n\nasync def main(host: str = 'localhost', port: int = 4444, password: str = 'secret'):\n    async with open_obs_websocket(host, port, password) as ws:\n        scenes = await ws.call(requests.GetSceneList())\n        for scene in scenes.getScenes():\n            print(scene['name'])\n\ntrio.run(main)\n```\n\nOr take a look at the documentation below:\n\n_Output of `pydoc obswebsocket.core.ObsWS`:_\n\n```\nHelp on class ObsWS in obswebsocket.core:\n\nobswebsocket.core.ObsWS = class ObsWS(trio.abc.AsyncResource)\n |  obswebsocket.core.ObsWS(nursery: trio.Nursery, host='localhost', port=4444, password='')\n |\n |  Core class for using obs-websocket-py\n |\n |  Simple usage:\n |      >>> import obswebsocket_trio, obswebsocket_trio.requests as obsrequests\n |      >>> async with obswebsocket_trio.open_obs_websocket(\"localhost\", 4444, \"secret\") as client:\n |      >>>     await client.call(obsrequests.GetVersion()).getObsWebsocketVersion()\n |      '4.1.0'\n |\n |  For advanced usage, including events callback, see the 'samples' directory.\n |\n |  Method resolution order:\n |      ObsWS\n |      trio.abc.AsyncResource\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  __init__(self, nursery: trio.Nursery, host='localhost', port=4444, password='')\n |      Construct a new obsws wrapper\n |\n |      :param nursery: A trio Nursery to run background tasks\n |      :param host: Hostname to connect to\n |      :param port: TCP Port to connect to (Default is 4444)\n |      :param password: Password for the websocket server (Leave this field\n |          empty if no auth enabled on the server)\n |\n |  async aclose(self)\n |      Close this resource, possibly blocking.\n |\n |      IMPORTANT: This method may block in order to perform a \"graceful\"\n |      shutdown. But, if this fails, then it still *must* close any\n |      underlying resources before returning. An error from this method\n |      indicates a failure to achieve grace, *not* a failure to close the\n |      connection.\n |\n |      For example, suppose we call :meth:`aclose` on a TLS-encrypted\n |      connection. This requires sending a \"goodbye\" message; but if the peer\n |      has become non-responsive, then our attempt to send this message might\n |      block forever, and eventually time out and be cancelled. In this case\n |      the :meth:`aclose` method on :class:`~trio.SSLStream` will\n |      immediately close the underlying transport stream using\n |      :func:`trio.aclose_forcefully` before raising :exc:`~trio.Cancelled`.\n |\n |      If the resource is already closed, then this method should silently\n |      succeed.\n |\n |      Once this method completes, any other pending or future operations on\n |      this resource should generally raise :exc:`~trio.ClosedResourceError`,\n |      unless there's a good reason to do otherwise.\n |\n |      See also: :func:`trio.aclose_forcefully`.\n |\n |  async call(self, obj) -> obswebsocket.base_classes.Baserequests\n |      Make a call to the OBS server through the Websocket.\n |\n |      :param obj: Request (class from obswebsocket.requests module) to send\n |          to the server.\n |      :return: Request object populated with response data.\n |\n |  async connect(self, autoreconnect: bool = True)\n |      Connect to the websocket server\n |      :param autoreconnect: If True, tries to reconnect every 2 seconds if disconnected.\n |\n |      :return: Nothing\n |\n |  async disconnect(self)\n |      Disconnect from websocket server\n |\n |      :return: Nothing\n |\n |  async reconnect(self)\n |      Restart the connection to the websocket server\n |\n |      :return: Nothing\n |\n |  register(self, func, event=None)\n |      Register a new hook in the websocket client\n |\n |      :param func: Callback function pointer for the hook\n |      :param event: Event (class from obswebsocket.events module) to trigger\n |          the hook on. Default is None, which means trigger on all events.\n |      :return: Nothing\n |\n |  async send(self, data: dict) -> dict\n |      Make a raw json call to the OBS server through the Websocket.\n |\n |      :param data: Request (python dict) to send to the server. Do not\n |          include field \"message-id\".\n |      :return: Response (python dict) from the server.\n |\n |  unregister(self, func, event=None)\n |      Unregister a new hook in the websocket client\n |\n |      :param func: Callback function pointer for the hook\n |      :param event: Event (class from obswebsocket.events module) which\n |          triggered the hook on. Default is None, which means unregister this\n |          function for all events.\n |      :return: Nothing\n |\n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |\n |  build_event(data)\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |\n |  __dict__\n |      dictionary for instance variables (if defined)\n |\n |  __weakref__\n |      list of weak references to the object (if defined)\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |\n |  __abstractmethods__ = frozenset()\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from trio.abc.AsyncResource:\n |\n |  async __aenter__(self)\n |\n |  async __aexit__(self, *args)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mkdryden/obs-websocket-py-trio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "obswebsocket-trio",
    "package_url": "https://pypi.org/project/obswebsocket-trio/",
    "platform": "",
    "project_url": "https://pypi.org/project/obswebsocket-trio/",
    "project_urls": {
      "Homepage": "https://github.com/mkdryden/obs-websocket-py-trio",
      "Repository": "https://github.com/mkdryden/obs-websocket-py-trio"
    },
    "release_url": "https://pypi.org/project/obswebsocket-trio/0.1.1.post2/",
    "requires_dist": [
      "single-source (>=0.2.0,<0.3.0)",
      "trio (>=0.19.0,<0.20.0)",
      "trio-websocket (>=0.9.2,<0.10.0)",
      "six (>=1.16.0,<2.0.0)",
      "typer (>=0.4.0,<0.5.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Python library to communicate with an obs-websocket server, trio async version. Fork of obs-websocket-py<https://github.com/Elektordi/obs-websocket-py>",
    "version": "0.1.1.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11953619,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af6d1039ba7848e4e33d729f690b52027d9fad528c8cd50627cfb021c8925509",
          "md5": "be3cc3f6f728a07d97980e3a65646ee2",
          "sha256": "9a3617c59796f77ca75a3585cd7e826b3e55192df7db918951820d2853888c16"
        },
        "downloads": -1,
        "filename": "obswebsocket_trio-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be3cc3f6f728a07d97980e3a65646ee2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 27337,
        "upload_time": "2021-11-07T07:56:49",
        "upload_time_iso_8601": "2021-11-07T07:56:49.561563Z",
        "url": "https://files.pythonhosted.org/packages/af/6d/1039ba7848e4e33d729f690b52027d9fad528c8cd50627cfb021c8925509/obswebsocket_trio-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be8d000ab9ca4fd05f9482cd6116909374d67bc0eb5d07938b2472b62b9431ac",
          "md5": "b364838592059569c089885f9071ff75",
          "sha256": "96dcddfa0f279fb9f184439c221c39c47eaf06aeb9ac7a49d377c09f4dfbedbf"
        },
        "downloads": -1,
        "filename": "obswebsocket-trio-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b364838592059569c089885f9071ff75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 25618,
        "upload_time": "2021-11-07T07:56:48",
        "upload_time_iso_8601": "2021-11-07T07:56:48.403120Z",
        "url": "https://files.pythonhosted.org/packages/be/8d/000ab9ca4fd05f9482cd6116909374d67bc0eb5d07938b2472b62b9431ac/obswebsocket-trio-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18c5ab6204ad5d487500108b090dd665d91b78c5d5b87c52973f21be246b6f8a",
          "md5": "ae6eebc810100fb1e8684550e094d1dc",
          "sha256": "f06f6d192ccc42476505f86f0cd6ad61c3714d9f43a7ee341a852234a05a8862"
        },
        "downloads": -1,
        "filename": "obswebsocket_trio-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae6eebc810100fb1e8684550e094d1dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 31109,
        "upload_time": "2021-11-07T08:09:25",
        "upload_time_iso_8601": "2021-11-07T08:09:25.628982Z",
        "url": "https://files.pythonhosted.org/packages/18/c5/ab6204ad5d487500108b090dd665d91b78c5d5b87c52973f21be246b6f8a/obswebsocket_trio-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9f4fdf2617f7b4b8b68a7ce5e6cddbc44bdbe1c8c4561929a684aaef56517a",
          "md5": "f5ef4b8a93467363b84bc6934f04f6fe",
          "sha256": "35ecc33fc08ec496fe0a2397c4fe6c31a00f61cf1b801e488fccd45faa5238a0"
        },
        "downloads": -1,
        "filename": "obswebsocket-trio-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5ef4b8a93467363b84bc6934f04f6fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 29589,
        "upload_time": "2021-11-07T08:09:24",
        "upload_time_iso_8601": "2021-11-07T08:09:24.625843Z",
        "url": "https://files.pythonhosted.org/packages/2c/9f/4fdf2617f7b4b8b68a7ce5e6cddbc44bdbe1c8c4561929a684aaef56517a/obswebsocket-trio-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eba81a0684859dd3fa569583f69717ca0e430c927c2bcbc72783ef021c9e54f7",
          "md5": "1d2878c2871d889f18dfb21c22c1ede4",
          "sha256": "35ec84e4f3fe976a227f63476dc7399376907bfdf31839c867508fc11b60dc7b"
        },
        "downloads": -1,
        "filename": "obswebsocket_trio-0.1.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d2878c2871d889f18dfb21c22c1ede4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31528,
        "upload_time": "2021-11-07T08:40:37",
        "upload_time_iso_8601": "2021-11-07T08:40:37.157779Z",
        "url": "https://files.pythonhosted.org/packages/eb/a8/1a0684859dd3fa569583f69717ca0e430c927c2bcbc72783ef021c9e54f7/obswebsocket_trio-0.1.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c925356a25d1be28239c4431209f2550dc1080372a6dc3eb41cb6c0471f8f79",
          "md5": "24b31eef308d810e89a0c777fd5acc8c",
          "sha256": "afecae0dcc6851d10d5b08bccab77ea626a6068e049d62516c2d8c2cba8d2073"
        },
        "downloads": -1,
        "filename": "obswebsocket-trio-0.1.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "24b31eef308d810e89a0c777fd5acc8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 29986,
        "upload_time": "2021-11-07T08:40:35",
        "upload_time_iso_8601": "2021-11-07T08:40:35.977797Z",
        "url": "https://files.pythonhosted.org/packages/5c/92/5356a25d1be28239c4431209f2550dc1080372a6dc3eb41cb6c0471f8f79/obswebsocket-trio-0.1.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94df09dd99e268a175d8377ed7fe1aa225b187fb8008574b6f3723b3c21a1b63",
          "md5": "bde7e193264995fc699e2eca8e6d2478",
          "sha256": "426e0fcc6c10caec6631b6635e5d3b44ae5669d2f45a3f067d575984969145b3"
        },
        "downloads": -1,
        "filename": "obswebsocket_trio-0.1.1.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bde7e193264995fc699e2eca8e6d2478",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31529,
        "upload_time": "2021-11-07T17:57:54",
        "upload_time_iso_8601": "2021-11-07T17:57:54.167377Z",
        "url": "https://files.pythonhosted.org/packages/94/df/09dd99e268a175d8377ed7fe1aa225b187fb8008574b6f3723b3c21a1b63/obswebsocket_trio-0.1.1.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc1506706e252e20ddf897493a685eb37946e3298f5c27deb684a6f89bc3bf7",
          "md5": "c29742e5cd8ffc5f115adaa75d187997",
          "sha256": "09ab46e355286c96aee6cfe38436a2baa79355fc329d38a28d983dc766f50d0b"
        },
        "downloads": -1,
        "filename": "obswebsocket-trio-0.1.1.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "c29742e5cd8ffc5f115adaa75d187997",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 29994,
        "upload_time": "2021-11-07T17:57:53",
        "upload_time_iso_8601": "2021-11-07T17:57:53.001270Z",
        "url": "https://files.pythonhosted.org/packages/6d/c1/506706e252e20ddf897493a685eb37946e3298f5c27deb684a6f89bc3bf7/obswebsocket-trio-0.1.1.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5176f6898954c7474222f4fff7347d7bb986e080da35ebc7ae8fadf18d56004",
          "md5": "fb8972ec66bbda48932ab40fdcaa69cd",
          "sha256": "37337b7a58912eb6ed3a685bb5be233f91b6e1365192e9459814b9b875fe6861"
        },
        "downloads": -1,
        "filename": "obswebsocket_trio-0.1.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb8972ec66bbda48932ab40fdcaa69cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31488,
        "upload_time": "2021-11-07T08:38:33",
        "upload_time_iso_8601": "2021-11-07T08:38:33.032251Z",
        "url": "https://files.pythonhosted.org/packages/b5/17/6f6898954c7474222f4fff7347d7bb986e080da35ebc7ae8fadf18d56004/obswebsocket_trio-0.1.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cd63a5067cff713a4e60ffe9b7c575c3b2f19c111de67ac2b652ca8d6969442",
          "md5": "afa5223dba9ffc9b207ce8488c0453e3",
          "sha256": "af9abfbad01f0227123cd298909bb52e77354e19a68afe43cc603e84bbcdc244"
        },
        "downloads": -1,
        "filename": "obswebsocket-trio-0.1.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "afa5223dba9ffc9b207ce8488c0453e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 29981,
        "upload_time": "2021-11-07T08:38:31",
        "upload_time_iso_8601": "2021-11-07T08:38:31.422516Z",
        "url": "https://files.pythonhosted.org/packages/1c/d6/3a5067cff713a4e60ffe9b7c575c3b2f19c111de67ac2b652ca8d6969442/obswebsocket-trio-0.1.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94df09dd99e268a175d8377ed7fe1aa225b187fb8008574b6f3723b3c21a1b63",
        "md5": "bde7e193264995fc699e2eca8e6d2478",
        "sha256": "426e0fcc6c10caec6631b6635e5d3b44ae5669d2f45a3f067d575984969145b3"
      },
      "downloads": -1,
      "filename": "obswebsocket_trio-0.1.1.post2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bde7e193264995fc699e2eca8e6d2478",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 31529,
      "upload_time": "2021-11-07T17:57:54",
      "upload_time_iso_8601": "2021-11-07T17:57:54.167377Z",
      "url": "https://files.pythonhosted.org/packages/94/df/09dd99e268a175d8377ed7fe1aa225b187fb8008574b6f3723b3c21a1b63/obswebsocket_trio-0.1.1.post2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6dc1506706e252e20ddf897493a685eb37946e3298f5c27deb684a6f89bc3bf7",
        "md5": "c29742e5cd8ffc5f115adaa75d187997",
        "sha256": "09ab46e355286c96aee6cfe38436a2baa79355fc329d38a28d983dc766f50d0b"
      },
      "downloads": -1,
      "filename": "obswebsocket-trio-0.1.1.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "c29742e5cd8ffc5f115adaa75d187997",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 29994,
      "upload_time": "2021-11-07T17:57:53",
      "upload_time_iso_8601": "2021-11-07T17:57:53.001270Z",
      "url": "https://files.pythonhosted.org/packages/6d/c1/506706e252e20ddf897493a685eb37946e3298f5c27deb684a6f89bc3bf7/obswebsocket-trio-0.1.1.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}