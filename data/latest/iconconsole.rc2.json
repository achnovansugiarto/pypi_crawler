{
  "info": {
    "author": "Park Eunsoo",
    "author_email": "eunsoo.park@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![PyPI - latest](https://img.shields.io/pypi/v/iconconsole?label=latest&logo=pypi)](https://pypi.org/project/iconconsole)\n[![PyPI - Python](https://img.shields.io/pypi/pyversions/iconconsole?logo=pypi)](https://pypi.org/project/iconconsole)\n\n# iconconsole\nPython package to interact with the ICON network\n\n## Requirements\n\n- Python 3.7 or later.\n\n## Installation\n\nSetup a virtual environment first, and install iconconsole via pypi.\n\n## Usage\n\nYou can use `iconconsole` interactively on the python console.\n\n``` shell\n$ python\nPython 3.7.7 (v3.7.7:d7c567b08f, Mar 10 2020, 02:56:16)\n[Clang 6.0 (clang-600.0.57)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from iconconsole import *\n>>>\n```\n\n## Features\n\n### Network\n`Network` allows you to specify your target ICON network. <br>\nYou can get the network instance with `Network(uri: str, nid: int = 0)`.<br>\nYou can use predefined strings as an `uri`. You can get list of predefined network via `ic.Network.PREDEFINED`\n```python\n>>> net = Network('berlin')\n>>> net.uri\n'https://berlin.net.solidwallet.io'\n>>> Network.PREDEFINED\n{'mainnet': {'uri': 'https://ctz.solidwallet.io', 'nid': 3},\n 'sejong': {'uri': 'https://sejong.net.solidwallet.io',\n            'nid': 83,\n            'faucets': 'cx6434bfdcb6b3ad4a4f5ced0075c73b9fea2a172c'},\n 'lisbon': {'uri': 'https://lisbon.net.solidwallet.io',\n            'nid': 2,\n            'faucets': 'cxcbece91fb181b754f906640a9746f361a3113641'},\n 'berlin': {'uri': 'https://berlin.net.solidwallet.io',\n            'nid': 7,\n            'faucets': 'cx760787ff9b4b337ac1f2bacd2bfe2ec42ef88c0d'}}\n```\n\n### Account\n`Account` allow you to sign the TX and to do actions such as querying a balance or transfer ICX.\n\n#### Create and load an Account\nYou can create new `Account` and load from keystore file.\n```python\n>>> account1 = Account()    # create new\n>>> account2 = Account(keystore=./path/to/keystore, password=\"password\")    # load from keystore file\n```\n\n#### Methods\nThe `Account.address()` is used to get the address of account.\n```python\n>>> account1.address()\n'hx83d0056c46a36d623c42be5769f30210c34400bd'\n```\nThe `Account.network()` and `Account.get_network()` are used to set and get the target network of an account.<br>\n```python\n>>> net.uri\n'https://berlin.net.solidwallet.io'\n>>> account1.network(net=net)\n>>> account1.get_network().uri\n'https://berlin.net.solidwallet.io'\n```\nThe `Account.balance()` is used to query the balance of an account in the network specified by `Account.network()`.\n```python\n>>> account1.balance()\n0\n```\nThe `Account.transfer()` is used to transfer ICX to another account in the network specified by `Account.network()`.\n```python\n>>> txr = account2.transfer(account1, 10)\n>>> account1.balance()\n10\n```\n\n### Score\n`Score` allows you to deploy and update the SCORE and call the external method of SCORE\n\n#### Deploy, update and load a SCORE\n```python\n>>> score, txr = Score.deploy(net, account1, \"./hello-world-0.1.0-optimized.jar\", {\"name\": \"Alice\"})    # deploy SCORE\n>>> score.address()\n'cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af'\n>>> score.apis()\n['writable setName(name: str):',\n 'readonly name() -> str:',\n 'readonly getGreeting() -> str:']\n>>> score.name()\n{'jsonrpc': '2.0', 'result': 'Alice', 'id': 1648466089}\n>>> score.update(\"./hello-world-0.1.0-optimized.jar\", {\"name\": \"Bob\"})  # update SCORE\n>>> score.address()\n'cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af'\n>>> score.name()\n{'jsonrpc': '2.0', 'result': 'Alice', 'id': 1648466091}\n>>> load_score = Score(net, \"cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af\")   # load SCORE\n>>> load_score.address()\n'cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af'\n>>> load_score.name()\n{'jsonrpc': '2.0', 'result': 'Alice', 'id': 1648466093}\n```\n\n#### Methods\nThe `Score.address()` is used to get an address of SCORE. <br>\nThe `Score.account()` and `Score.get_account()` is used to set and get the signer account of SCORE.\n\n#### Call external methods of SCORE\nYou can query the external methods of SCORE and call with `Score` object\n```python\n>>> score.apis()\n['writable setName(name: str):',\n 'readonly name() -> str:',\n 'readonly getGreeting() -> str:']\n>>> txr = score.account(account1).setName(\"ICON\")\n```\n\n\n### TransactionResult\n`TransactionResult` allows you to query transaction, transaction result and trace of transaction.\n* `hash()` is used to get hash of transaction\n* `transaction()` is used to get the transaction\n* `result()` is used to get the result of transaction\n* `trace()` is used to get the trace log of transaction execution\n```python\n>>> txr = score.account(account1).setName(\"ICON\")\n>> txr.hash()\n'0x9499fc3ce8a21039b3951dc08cb1f2e4098f46f2b8e5f7e518c378ebe7569539'\n>>> txr.transaction()\n{'jsonrpc': '2.0',\n 'result': {'blockHash': '0x70319f44901cf9e3af472bb22573b91fdb70b335e1e64b0cea256a5ad0849dd5',\n            'blockHeight': '0xe5f',\n            'data': {'method': 'setName', 'params': {'name': 'ICON'}},\n            'dataType': 'call',\n            'from': 'hxa8df82e93e8a9cd5325e37289bcd0fbc0a8b4e5e',\n            'nid': '0x7',\n            'signature': 'M5c88PehWFkpr83AOtVIH4zJKTEdPVe41EzckXhIufo6XSBUtLqpUy5pthlMWKvBg+eQBLoaRMifD3uc7Kq1SQA=',\n            'stepLimit': '0x989680',\n            'timestamp': '0x5db45c316fe0b',\n            'to': 'cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af',\n            'txHash': '0x9499fc3ce8a21039b3951dc08cb1f2e4098f46f2b8e5f7e518c378ebe7569539',\n            'txIndex': '0x1',\n            'value': '0x0',\n            'version': '0x3'},\n 'id': 1648467564}\n>>> txr.result()\n{'jsonrpc': '2.0',\n 'result': {'blockHash': '0x70319f44901cf9e3af472bb22573b91fdb70b335e1e64b0cea256a5ad0849dd5',\n            'blockHeight': '0xe5f',\n            'cumulativeStepUsed': '0x23fc5',\n            'eventLogs': [],\n            'logsBloom': '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n            'status': '0x1',\n            'stepPrice': '0x2540be400',\n            'stepUsed': '0x23fc5',\n            'to': 'cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af',\n            'txHash': '0x9499fc3ce8a21039b3951dc08cb1f2e4098f46f2b8e5f7e518c378ebe7569539',\n            'txIndex': '0x1'},\n 'id': 1648467626}\n>>> txr.trace()\n{'failure': {'code': 1, 'message': 'Calculator(height=3701,exp=3661)'},\n 'logs': [{'level': 2,\n           'msg': 'FRAME[1] TRANSACTION start from=hxa8df82e93e8a9cd5325e37289bcd0fbc0a8b4e5e to=cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af id=0x9499fc3ce8a21039b3951dc08cb1f2e4098f46f2b8e5f7e518c378ebe7569539',\n           'ts': 0},\n          {'level': 2,\n           'msg': 'FRAME[1] STEP apply type=default count=1 cost=100000 total=100000',\n           'ts': 80},\n          {'level': 2,\n           'msg': 'FRAME[1] STEP apply type=input count=45 cost=9000 total=109000',\n           'ts': 84},\n          {'level': 2, 'msg': 'FRAME[2] START parent=FRAME[1]', 'ts': 92},\n          {'level': 2,\n           'msg': 'FRAME[2] INVOKE start score=cxf0a8e3aad24bad5f41444e76b865ca4aaeef84af method=setName',\n           'ts': 95},\n          {'level': 2,\n           'msg': 'FRAME[2] STEP apply type=contractCall count=1 cost=25000 total=25000',\n           'ts': 99},\n          {'level': 2,\n           'msg': 'FRAME[2] INVOKE done status=Success steps=13397 result=null',\n           'ts': 6755},\n          {'level': 2,\n           'msg': 'FRAME[2] STEP apply cost=13397 total=38397',\n           'ts': 6775},\n          {'level': 2, 'msg': 'FRAME[2] END success=true steps=38397', 'ts': 6777},\n          {'level': 2,\n           'msg': 'FRAME[1] STEP apply cost=38397 total=147397',\n           'ts': 6783},\n          {'level': 2,\n           'msg': 'FRAME[1] TRANSACTION charge fee=1473970000000000 steps=147397 price=10000000000',\n           'ts': 6791},\n          {'level': 2,\n           'msg': 'FRAME[1] TRANSACTION done status=Success steps=147397 price=10000000000',\n           'ts': 6797}],\n 'status': '0x0'}\n```\n\n\n## License\n\nThis project is available under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eunsoo-icon/icon-console",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iconconsole",
    "package_url": "https://pypi.org/project/iconconsole/",
    "platform": null,
    "project_url": "https://pypi.org/project/iconconsole/",
    "project_urls": {
      "Homepage": "https://github.com/eunsoo-icon/icon-console"
    },
    "release_url": "https://pypi.org/project/iconconsole/0.1.1/",
    "requires_dist": [
      "iconsdk",
      "pytest (~=6.2.5) ; extra == 'tests'"
    ],
    "requires_python": "~=3.7",
    "summary": "package to interact with ICON network.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13342090,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea72f2bef57a86073594017615710b5610260160d61c7fffd5e5fca70752a03b",
          "md5": "ee44ded1763677186f75396b9bde457c",
          "sha256": "7e94dcf3254743e1883d1f092ba226ad13744b5336d43e3ec2cba6533087f330"
        },
        "downloads": -1,
        "filename": "iconconsole-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee44ded1763677186f75396b9bde457c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 18655,
        "upload_time": "2022-03-28T11:59:23",
        "upload_time_iso_8601": "2022-03-28T11:59:23.624482Z",
        "url": "https://files.pythonhosted.org/packages/ea/72/f2bef57a86073594017615710b5610260160d61c7fffd5e5fca70752a03b/iconconsole-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67e214468ce1ea966ab331e77c0637d955209b7885088c65af497886c22eedc3",
          "md5": "3afb31d5ebe3dc9538a86091eb441d76",
          "sha256": "4a2f4e2e2558fe8fec4db62909f02323b84542c6a787799c7e5feb7f8ea2acca"
        },
        "downloads": -1,
        "filename": "iconconsole-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3afb31d5ebe3dc9538a86091eb441d76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 17708,
        "upload_time": "2022-03-28T11:59:25",
        "upload_time_iso_8601": "2022-03-28T11:59:25.752846Z",
        "url": "https://files.pythonhosted.org/packages/67/e2/14468ce1ea966ab331e77c0637d955209b7885088c65af497886c22eedc3/iconconsole-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91f6536a1de486b476c448cb294b19d0a1d37c215fa49ef60119b03e0a263ff0",
          "md5": "76ab7d6b33e496eafb3991b203c60d2b",
          "sha256": "7dc0fc909e450a0b1e056a9ccbdc797224b92d063532131805bf5215fbcb7de5"
        },
        "downloads": -1,
        "filename": "iconconsole-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76ab7d6b33e496eafb3991b203c60d2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 18684,
        "upload_time": "2022-03-30T05:45:38",
        "upload_time_iso_8601": "2022-03-30T05:45:38.775747Z",
        "url": "https://files.pythonhosted.org/packages/91/f6/536a1de486b476c448cb294b19d0a1d37c215fa49ef60119b03e0a263ff0/iconconsole-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bc9f0ee1935fd63e98e0621faf5edd9e08a11f0048986994338918166d738f6",
          "md5": "99eedfd3a2e7bae4ab96ca92761fec2f",
          "sha256": "805506a36f7b943485e0697da52c0e937c49fbb8e83dec2e4e8852658080fb43"
        },
        "downloads": -1,
        "filename": "iconconsole-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "99eedfd3a2e7bae4ab96ca92761fec2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 17742,
        "upload_time": "2022-03-30T05:45:40",
        "upload_time_iso_8601": "2022-03-30T05:45:40.708065Z",
        "url": "https://files.pythonhosted.org/packages/4b/c9/f0ee1935fd63e98e0621faf5edd9e08a11f0048986994338918166d738f6/iconconsole-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91f6536a1de486b476c448cb294b19d0a1d37c215fa49ef60119b03e0a263ff0",
        "md5": "76ab7d6b33e496eafb3991b203c60d2b",
        "sha256": "7dc0fc909e450a0b1e056a9ccbdc797224b92d063532131805bf5215fbcb7de5"
      },
      "downloads": -1,
      "filename": "iconconsole-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76ab7d6b33e496eafb3991b203c60d2b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 18684,
      "upload_time": "2022-03-30T05:45:38",
      "upload_time_iso_8601": "2022-03-30T05:45:38.775747Z",
      "url": "https://files.pythonhosted.org/packages/91/f6/536a1de486b476c448cb294b19d0a1d37c215fa49ef60119b03e0a263ff0/iconconsole-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bc9f0ee1935fd63e98e0621faf5edd9e08a11f0048986994338918166d738f6",
        "md5": "99eedfd3a2e7bae4ab96ca92761fec2f",
        "sha256": "805506a36f7b943485e0697da52c0e937c49fbb8e83dec2e4e8852658080fb43"
      },
      "downloads": -1,
      "filename": "iconconsole-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "99eedfd3a2e7bae4ab96ca92761fec2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 17742,
      "upload_time": "2022-03-30T05:45:40",
      "upload_time_iso_8601": "2022-03-30T05:45:40.708065Z",
      "url": "https://files.pythonhosted.org/packages/4b/c9/f0ee1935fd63e98e0621faf5edd9e08a11f0048986994338918166d738f6/iconconsole-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}