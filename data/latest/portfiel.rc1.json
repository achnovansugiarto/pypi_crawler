{
  "info": {
    "author": "Aditya Saha",
    "author_email": "adityaranjha786@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Efficient-Frontier\nWe implement an Efficient Frontier that plots the optimal expected portfolio return against a certain level of risk measured by portfolio variance. This is achieved by \nconstraint optimisation using predefined portfolio constraints and iterating across expected levels of return from the Lowest-Variance portfolio to the maximum possible return of the portfolio with the maximum Sharpe Ratio. We define various constraints to calculate the weightings for the minVar portfolio(Minimum Variance), the MaxSR(Maximum Sharpe Ratio Portfolio) and the optimisation required to calculate variances after the optimal return weightings for all the target returns that lie between. This requires us to define portfolio performance functions which will be the focus of our code in the beginning. \n\nFirst we need to import all the following libraries.\n\n```python\npython -m pip install yfinance\npython -m pip install plotly\npython -m pip install scipy\npython -m pip install pandas\npython -m pip install datetime\npip install -i https://test.pypi.org/simple/ portfiel\n```\nFirstly we'd need to set up the covariance matrix and the expected returns of the multiple stocks to be added to multi-stock porttfolio. We extract data using the pandas datareader(Yahoo) and set up the requisites in the following section.\n\n```python\n#Importing Data from YFin\ndef getData(stocks, start, end):\n  stockData = pdr.get_data_yahoo(stocks, start = start, end = end)\n  stockData = stockData['Close']\n\n  returns = stockData.pct_change()\n  meanReturns = returns.mean()\n  covMatrix = returns.cov()\n  return meanReturns, covMatrix\n```\n![image](https://user-images.githubusercontent.com/51220035/169164464-23735a12-8299-416d-b159-e81e1699778e.png)\n\n![image](https://user-images.githubusercontent.com/51220035/169164116-2f15a885-cdfd-4692-aded-f97400d535b1.png)\n\nFor a Generalised Multi-Stock Portfolio LinAlg implementation using a 3-stock portfolio as an example, we have the following theoretical computations:\n\n![image](https://user-images.githubusercontent.com/51220035/169164367-d6182713-d6df-4612-adde-a65a6b2c3fb4.png)\n\n```python\n#Defining Portfolio Performance \ndef portfolioPerformance(weights, meanReturns, covMatrix):\n  returns = np.sum(meanReturns * weights) * 252   #No. of Trading Day\n  std = np.sqrt(np.dot(weights.T, np.dot(covMatrix, weights))) * np.sqrt(252)    #Volatility is Sigma*Sqrt(T)\n  #Converting equation above to matrix form. Variance is add-able and we use 252 as it is the number of trading days.\n  return returns, std\n```\n\nNow we use SLSQP Minimisation for most of our purposes as it is easy to use and is offered by Scipy. The first of the optimisations involve, building the portfolio with Maximum Sharpe Ratio, however as we have a minimisation algorithm, we need to define a negativeSR function that would be minimised in order to find the weightings for the MaxSR portfolio based on the following constraints.\n\n![image](https://user-images.githubusercontent.com/51220035/169165838-57fbf23d-2af1-4e8c-9f66-5111afee44e7.png)\n\nThe sc.minimize function first takes the function to be optimised as the first argument, the optimisation would take place over the first argument of the function to be optimised. Essentially, if negativeSR is the argument to sc.minimize, the minimisation of negativeSR would take place by varying the first argument of negativeSR, i.e, weights. The second argument for sc.minimise is the initialisation for the weights parameter. In this case we make a vector as long as the number of assets with equal weights(1/Number of Assets). Bounds are defined as the set of values that can be taken by the weights parameter for each stock, and constraints define the ones delineated in the image above.\n\n```python\ndef negativeSR(weights, meanReturns, covMatrix, riskFreeRate = 0):\n  pReturns, pStd = portfolioPerformance(weights, meanReturns, covMatrix)\n  return -(pReturns - riskFreeRate)/pStd  \n  #Returning NSharpe Ratio as -(Excess Return over Market/Risk Taken)\n\ndef maxSR(meanReturns, covMatrix, riskFreeRate = 0, constraintSet = (0,1)):\n  # Minimise the NegativeSR by altering the weights of the portfolio.\n  numAssets = len(meanReturns)\n  args = (meanReturns, covMatrix, riskFreeRate)\n  constraints = ({'type':'eq', 'fun': lambda x : np.sum(x) - 1})\n  bound = constraintSet\n  bounds = list(bound for asset in range(numAssets))\n  result = sc.minimize(negativeSR, numAssets * [1./ numAssets], args = args, method = 'SLSQP', bounds = bounds, constraints = constraints)\n  return result\n```\nSimilarly we define a minVar function:\n```pythonc\ndef minimizeVariance(meanReturns, covMatrix, riskFreeRate = 0, constraintSet = (0,1)):\n  #Minimise the portfolio variance by altering the weights/allocation of assets in the portfolio\n  numAssets = len(meanReturns)\n  args = (meanReturns, covMatrix)\n  constraints = ({'type':'eq', 'fun': lambda x : np.sum(x) - 1})\n  bound = constraintSet\n  bounds = list(bound for asset in range(numAssets))\n  result = sc.minimize(portfolioVariance, numAssets * [1./ numAssets], args = args, method = 'SLSQP', bounds = bounds, constraints = constraints)\n\n  return result\n```\nNow that we have the range of target returns, all we need to do is iterate and minimize portfolio variance for all target return values that lie between the lowest variance and optimal variance. We have to prepare a generalised optimisation function that though similar to previous optimisers, additionally takes as a constraint, the target return.\n\n```python\ndef efficientOpt(meanReturns, covMatrix, returnTarget, constraintSet = (0,1)):\n  'For each returnTarget, we want to optimise the portfolio for minimum variance.'\n  numAssets = len(meanReturns)\n  args = (meanReturns, covMatrix)\n  constraints = ({'type':'eq', 'fun':lambda x: portfolioReturn(x, meanReturns, covMatrix)- returnTarget},{'type':'eq', 'fun': lambda x : np.sum(x) - 1})  #Can be an inequality(>=)\n  bound = constraintSet\n  bounds = tuple(bound for asset in range(numAssets))\n  effOpt = sc.minimize(portfolioVariance, numAssets * [1./numAssets], args = args, constraints = constraints, method = 'SLSQP', bounds = bounds)\n\n  return effOpt\n```\n\nNow finally we have a main function to call all of these previously defined functions and returns the Expected Return, Variance and the portfolio weights for each iteration. We will use this to plot the frontier in the subsequent step.\n\n```python\ndef calculatedResults(meanReturns, covMatrix, riskFreeRate = 0, constraintSet = (0,1)):\n  '''Function to read Mean, CovMatrix and other Financial Information\n  Output Maximum Sharpe Ratio, Min Volatility and Efficient Frontier'''\n\n  #For Maximum Sharpe Ratio\n  maxSR_Portfolio = maxSR(meanReturns,covMatrix)\n  maxSR_Returns, maxSR_std = portfolioPerformance(maxSR_Portfolio['x'], meanReturns, covMatrix)\n  maxSR_allocation = pd.DataFrame(maxSR_Portfolio['x'], index = meanReturns.index, columns = ['Allocation'])\n  maxSR_allocation.Allocation = [round(i*100,0) for i in maxSR_allocation.Allocation]\n\n  #For Min Volatitlity Portfolio\n  minVol_Portfolio = minimizeVariance(meanReturns,covMatrix)\n  minVol_Returns, minVol_std = portfolioPerformance(minVol_Portfolio['x'], meanReturns, covMatrix)\n  minVol_allocation = pd.DataFrame(minVol_Portfolio['x'], index = meanReturns.index, columns = ['Allocation'])\n  minVol_allocation.Allocation = [round(i*100,0) for i in minVol_allocation.Allocation]\n\n  \n  #Efficient Frontier\n  efficientList = []\n  targetReturns = np.linspace(minVol_Returns, maxSR_Returns, 100)\n  for target in targetReturns:\n    efficientList.append(efficientOpt(meanReturns, covMatrix, target)['fun'])\n\n  maxSR_Returns, maxSR_std = round(maxSR_Returns * 100,2), round(maxSR_std*100,2)\n  minVol_Returns, minVol_std = round(minVol_Returns * 100,2), round(minVol_std*100,2)\n\n  return maxSR_Returns, maxSR_std, maxSR_allocation, minVol_Returns, minVol_std, minVol_allocation, efficientList, targetReturns\n\n```\n\nFinally we use plotly to plot the efficient frontier.\n\n```python\ndef EF_graph(meanReturns, covMatrix, riskFreeRate = 0, constraintSet = (0,1)):\n  'Return a graph plotting the Min. Volatility, MaxSR and EfficientFrontier'\n  maxSR_Returns, maxSR_std, maxSR_allocation, minVol_Returns, minVol_std, minVol_allocation, efficientList, targetReturns = calculatedResults(meanReturns, covMatrix)\n  \n  #Max SR\n  MaxSharpeRatio = go.Scatter(\n      name = 'Maximum Sharpe Ratio',\n      mode = 'markers',\n      x = [maxSR_std],\n      y = [maxSR_Returns],\n      marker = dict(color = 'red', size = 14, line = dict(width = 3, color = 'black'))\n  )\n\n  #Min Vol.   \n  MinVol = go.Scatter(\n      name = 'Minimum Volatility',\n      mode = 'markers',\n      x = [minVol_std],\n      y = [minVol_Returns],\n      marker = dict(color = 'green', size = 14, line = dict(width = 3, color = 'black'))   \n  )\n\n  #Efficient Frontier   \n  EF_curve = go.Scatter(\n      name = 'Efficent Frontier',\n      mode = 'lines',\n      x = [round(ef_std*100, 2) for ef_std in efficientList],\n      y = [round(target*100, 2) for target in targetReturns],\n      line = dict(color = 'blue', width = 4, dash = 'dashdot')   \n  )\n\n  data = [MaxSharpeRatio, MinVol, EF_curve]\n\n  layout = go.Layout(\n      title = 'Portfolio Optimization with Efficient Frontier',\n      yaxis = dict(title = 'Annualised Return(%)'),\n      xaxis = dict(title = 'Annualised Volatility(%)'),\n      width = 800,\n      height = 600,      \n      showlegend = True,\n      legend = dict(\n          x = 0.75, y = 0, traceorder = 'normal',\n          bgcolor = '#E2E2E2',\n          bordercolor = 'black',\n          borderwidth = 2),\n          )\n\n  fig = go.Figure(data = data,layout = layout)\n  return fig.show()\n  \nEF_graph(meanReturns, covMatrix)\n```\n![image](https://user-images.githubusercontent.com/51220035/169169692-3019c7d3-fb89-418a-8932-1c31498a65a8.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Aeroknight786/Efficient-Frontier",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "portfiel",
    "package_url": "https://pypi.org/project/portfiel/",
    "platform": null,
    "project_url": "https://pypi.org/project/portfiel/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
      "Homepage": "https://github.com/Aeroknight786/Efficient-Frontier"
    },
    "release_url": "https://pypi.org/project/portfiel/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package for asset allocation",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14101740,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac55319d38f258051775617aca4bb8073f599a3e26a900b6c25ae17a90e0bfd9",
          "md5": "0c1c92c65944b88f9273f141317d8be3",
          "sha256": "5fa91fe6715c1ca74efe5de8823dc8ce64f2f8325b263e4044c088db404d3df8"
        },
        "downloads": -1,
        "filename": "portfiel-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c1c92c65944b88f9273f141317d8be3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7837,
        "upload_time": "2022-06-11T14:26:17",
        "upload_time_iso_8601": "2022-06-11T14:26:17.400824Z",
        "url": "https://files.pythonhosted.org/packages/ac/55/319d38f258051775617aca4bb8073f599a3e26a900b6c25ae17a90e0bfd9/portfiel-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3765eefcc69e7f834b1c636000da1b842dbeba111db7783297e9540d5fcf1d7c",
          "md5": "9f5ee7ec5a893e030a1265786a4bd642",
          "sha256": "f6d82de21a9bdecb231a0b59008384a7cbf22dac96c711277b20595ac6df47f0"
        },
        "downloads": -1,
        "filename": "portfiel-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9f5ee7ec5a893e030a1265786a4bd642",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8407,
        "upload_time": "2022-06-11T14:26:20",
        "upload_time_iso_8601": "2022-06-11T14:26:20.074385Z",
        "url": "https://files.pythonhosted.org/packages/37/65/eefcc69e7f834b1c636000da1b842dbeba111db7783297e9540d5fcf1d7c/portfiel-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac55319d38f258051775617aca4bb8073f599a3e26a900b6c25ae17a90e0bfd9",
        "md5": "0c1c92c65944b88f9273f141317d8be3",
        "sha256": "5fa91fe6715c1ca74efe5de8823dc8ce64f2f8325b263e4044c088db404d3df8"
      },
      "downloads": -1,
      "filename": "portfiel-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c1c92c65944b88f9273f141317d8be3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7837,
      "upload_time": "2022-06-11T14:26:17",
      "upload_time_iso_8601": "2022-06-11T14:26:17.400824Z",
      "url": "https://files.pythonhosted.org/packages/ac/55/319d38f258051775617aca4bb8073f599a3e26a900b6c25ae17a90e0bfd9/portfiel-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3765eefcc69e7f834b1c636000da1b842dbeba111db7783297e9540d5fcf1d7c",
        "md5": "9f5ee7ec5a893e030a1265786a4bd642",
        "sha256": "f6d82de21a9bdecb231a0b59008384a7cbf22dac96c711277b20595ac6df47f0"
      },
      "downloads": -1,
      "filename": "portfiel-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9f5ee7ec5a893e030a1265786a4bd642",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8407,
      "upload_time": "2022-06-11T14:26:20",
      "upload_time_iso_8601": "2022-06-11T14:26:20.074385Z",
      "url": "https://files.pythonhosted.org/packages/37/65/eefcc69e7f834b1c636000da1b842dbeba111db7783297e9540d5fcf1d7c/portfiel-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}