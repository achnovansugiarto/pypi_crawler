{
  "info": {
    "author": "Jose Manuel Otero Mato, Hadrián Montes Campos, Luis Miguel Varela Cabo",
    "author_email": "hadrianmontes@gmail.com, josemanuel.otero.mato@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# GADDLE Maps: General Algorithm for Discrete Object Deformations Based on Local Exchange Maps\n\n[**Installation**](#installation)\n|\n[**Quick Start**](#quick-start)\n|\n[**Features**](#features)\n|\n[**FAQs**](#faqs)\n|\n[**Documentation**](https://gaddlemaps.readthedocs.io/)\n|\n[**Cite us**](https://doi.org/10.1021/acs.jctc.7b00861)\n\n## What is GADDLE Maps?\n\n[GADDLE Maps](https://doi.org/10.1021/acs.jctc.7b00861) is a general algorithm\nto switch between structures with different resolutions (*i.e.* different number\nof particles per object). This algorithm is completely automatic and does not\nrequire any human input. The algorithm has been designed specifically to\ntransform molecules between to levels of resolution (for example from united\natom to all atom or from coarse grain to fully atomistic). However the algorithm\nworks for any structure than can be represented by a graph.\n\nThe algorithm apply rotations and deformations to the graph (molecule) preserving the\ndistance between its nodes (atoms) in order to maximize the overlapping between\nthe graphs (molecules) in both resolutions. Once this is achieved, it generates\nan *exchange map* that transforms between both resolutions. These exchange maps\nuse local information about the location of the neighbours to exchange between\nthe 2 resolutions. This allows the algorithm to adapt to multiple instances of\nthe same graph (molecule) in different configurations. Using this property the\nalgorithm is able to transform subsequent instances of the same graph (molecule)\nat almost zero cost. For these reason the algorithm is specially suitable to\ntransform between systems in coarse grained and fully atomistic resolutions\nbecause by only aligning one molecule of each specie the whole system can be\ntransformed.\n\n> **IMPORTANT** If you are experiencing problems during the mapping process (the\n> mapping gets stuck at some point, the final system looks weird...) check the\n> [FAQs](#FAQs) section because most common mistakes are covered there.\n\n### The gaddlemaps module\n\nIn this module we offer the reference implementation of the algorithm in python\nwith a series of helper classes and functions for an easy usage of the\nalgorithm. Moreover a command line interface and a jupyter notebook is provided\nfor an easy and visual way of performing the transformation.\n\nBesides a port of the algorithm to c++ with an interface with python using\n[cython](https://cython.org). This port allows for a boosted performance,\nspecially for large molecules such as proteins, but the results are the same\nthan as the reference implementation. This port can be installed alongside\nthe module. `gaddlemaps` will automatically use the c++ port if available and will\nfallback to the python implementation if not present. Therefore the installation\nof this c++ port is completely **optional** but highly recommended.\n\n### Content\n* [Installation](#installation)\n* [Quick Start](#quick-start)\n* [Frequently asked questions](#FAQs)\n\n## Installation\n\nHere we will describe the installation of the reference implementation of\n`gaddlemaps` (*i.e.* without the c++ backend). In order to install the\nbackend please read the section [configuring the c++\nbackend](#configuring-the-c-backend) first.\n\nThe installation can be done using [pip](#pip-installation) or [building from\nsource](#building-from-source). For any of the\nmethods gaddlemaps needs [Python](http://pythonhosted.org) 3.6 or greater.\n\n### pip installation\n\nThis is the simplest and prefered method to install the module. In order to\ninstall gaddlemaps just run:\n\n```bash\npip install gaddlemaps --upgrade\n```\n\nThis method will autodetect wether the requirements for the optimized c++\nbackend are available and, if possible, will install the module with the\noptimized backend. If the dependencies are not met, it will install the native\npython version of the backend. The dependencies necessary for the backend are\ndetailed in the section [configuring the c++\nbackend](#configuring-the-c-backend).\n\n### Building from source\n#### Prerequisites\n\nIn order to build from source the following prerequisites are needed:\n\n* [Numpy](https://numpy.org)\n* [Scipy](https://www.scipy.org)\n* [more_itertools](https://github.com/more-itertools/more-itertools)\n* [Jupyter Notebook](https://jupyter.org)\n* [nglview](https://github.com/arose/nglview) (optional)\n\n#### Installation of prerequisites\n\nThis requisites can installed using **pip** by running:\n\n```bash\npip install numpy scipy jupyter\n```\n\nIf using **Mac OS** the dependencies can be installed using [brew](https://brew.sh) by\nrunning:\n\n```bash\nbrew install numpy scipy jupyter\n```\n\nIn **Ubuntu** and other Debian based Linux distribution they can be installed using\nthe *apt* package manager:\n\n```bash\nsudo apt install python3-numpy python3-scipy python3-notebook\n```\n\nIf using a different operative system or if the previous instructions did not\nwork please refer to the installation instructions in the documentation of each\nmodule.\n\n**Nglview** is completely optional, it is used only when representing the system\ninside jupyter notebooks. If you do not want this functionality you can skip\nthis step. Moreover this module **can be installed after installing\ngaddlemaps**. The easiest way to install the module is through pip\n\n```bash\npip install nglview\njupyter nbextension enable --py --sys-prefix widgetsnbextension\njupyter-nbextension enable nglview --py --sys-prefix\n```\n\nfor other options and problems with the installation check the documentation for\n[nglview](https://github.com/arose/nglview).\n\n#### Cloning and installing\n\nThe first step is cloning or downloading the git repository\n\n```bash\ngit clone https://github.com/txemaotero/gaddlemaps\ncd gaddlemaps\n```\n\nor\n\n```bash\nwget https://github.com/txemaotero/gaddlemaps/archive/master.zip\nunzip master.zip\ncd gaddlemaps-master\n```\n\nAfter that the module is installed by running:\n\n```bash\nsudo python3 setup.py install\n```\n\nThe module can also be installed without admin privileges with:\n\n```bash\npython3 setup.py install --user\n```\n\nAfter that the module will be installed and the downloaded folder can be safely\nremoved.\n\n### Configuring the c++ backend\n\nIn order to install the c++ backend the following extra prerequisites are\nneeded:\n\n* A c++ compiler\n* [Armadillo](http://arma.sourceforge.net)\n* [Cython](https://cython.org)\n\n#### C++ compiler\n\nThe installation of a c++ compiler (for example g++ or clang++) is needed. This\ncan be done in **Ubuntu** and other Debian-like Linux distribution using the apt package\nmanager:\n\n```bash\nsudo apt install g++\n```\n\nIf using **Mac OS** the compiler can be installed by installing the *developer command\nline tools*. These tools can be installed by running the following command in a\nterminal:\n\n```bash\nxcode-select --install\n```\n\nand following the instructions on the screen.\n\n#### Armadillo\n\nFor the installation of the Armadillo library please refer to their\n[installation documentation](http://arma.sourceforge.net/download.html).\n\nIf using a Debian based Linux distribution it should be possible to install it\nusing apt:\n\n```bash\nsudo apt-get install libarmadillo-dev\n```\n\nIn order to check if the installation is in the path create a file\n*armadillo_test.cpp* with the following content:\n\n```c++\n#include <armadillo>\n#include <iostream>\n\nint main(){\n    arma::Mat<double> A(3,3, arma::fill::eye);\n    std::cout << \"A:\\n\" << A << \"\\n\";\n    return 0;\n}\n```\n\nAnd try to compile and run it:\n\n```bash\ng++ armadillo_test.cpp -larmadillo -I/usr/local/include -L/usr/local/lib && ./a.out\n```\n\nIf a 3⨉3 identity matrix is printed the armadillo library is installed and in a\nlocation where gaddlemaps will be able to find it. If the compiler is not able\nto find the armadillo library update the environment variables in your\n*.bashrc* (if using Linux or Mac OS prior to Catalina) or *.zshrc* (if using zsh instead of bash or if using Mac OS Catalina).\n\nIn general adding the following lines at the end of the file will de the trick:\n\n```bash\nexport CPLUS_INCLUDE_PATH=\"folder where armadillo.h is located\"\nexport LD_LIBRARY_PATH=\"folder where libarmadillo.so  or libarmadillo.dylib\"\nexport LIBRARY_PATH=\"folder where libarmadillo.so  or libarmadillo.dylib\"\n```\n\nIf armadillo was installed in Mac OS using [macports](https://www.macports.org)\nthe following lines should work:\n\n```bash\nexport CPLUS_INCLUDE_PATH=\"/opt/local/include\"\nexport LIBRARY_PATH=\"/opt/local/lib\"\nexport LD_LIBRARY_PATH=\"/opt/local/lib\"\n```\n\n#### Cython\n\n##### Using pip\n\nThe easiest and preferred way to install cython is by using pip\n\n```bash\nsudo pip install cython\n```\n\n##### Without pip\n\nIn **Mac OS** can be installed using brew\n\n```bash\nbrew install cython\n```\n\nIn **Ubuntu** can be installed using apt\n\n```bash\nsudo apt install cython3\n```\n\nFor other platforms and other installation method check the official\ndocumentation for [cython](https://cython.org).\n\nAfter finishing the installation of the prerequisites please follow the steps in\nthe [installation](#installation) section.\n\n## Quick Start\n\n### Files needed to map the system\n\ngaddlemaps uses 2 different kind of files *coordinates files* and *topology\nfiles*. The coordinates file stores the coordinates of the atoms while the\ntopology file stores the connections (*i.e.* bonds) between the atoms. Currently\nthe topology file can only store the information for 1 molecule, while the\ncoordinate file can store the whole system.\n\nFor doing the whole mapping process the following information is required:\n\n- The coordinate file with the whole system in the start resolution.\n- One topology file for each specie that you want to map (it is not required to\n  map all the molecules in the system).\n- For each specie that you want to map a coordinate file with the molecule in\n  the end resolution (it is possible to use only 1 coordinate file with all the\n  molecules, but it requires more intervention by the user).\n- One topology file for each specie that you want to map in the end resolution.\n\ngaddlemaps has been developed using [GROMACS](http://www.gromacs.org) as\nreference molecular dynamics simulation suite. Therefore currently the allowed\nformats for the coordinate and topology files are:\n\n- Coordinate Files: *.gro*\n- Topology files: *itp*\n\nHowever, it is easy to add more formats without touching any of the code in the\nmodule by the user. If you are interested in adding support for other formats\nread the FAQ [How can I use an unsupported file format?](#how-can-i-use-an-unsupported-file-format)\n\n### Perform the mapping\n\nThe basic usage of the module to transform systems between coarse grained and\nfully atomistic resolutions can be seen in the example\n[examples/bmim_bf4/map_bmim_bf4.py](examples/bmim_bf4/map_bmim_bf4.py).\n\nFor a more visual representation there is a jupyter notebook that works as\nexample and can be easily modified to transform interactively any system. The\nnotebook is located in\n[examples/notebook/Interactive-example.ipynb](examples/notebook/Interactive-example.ipynb).\nIn order to use this notebook the [nglview](https://github.com/arose/nglview)\nmodule is required. In order to run the notebook run the following command:\n\n```bash\njupyter notebook examples/notebook/Interactive-example.ipynb --NotebookApp.iopub_data_rate_limit=10000000\n```\n\nIf you do not have [Jupyter](https://jupyter.org) installed you can take a look\nto its markdown preview in\n[examples/notebook/Interactive-example.md](examples/notebook/Interactive-example.md).\n\nIf you are looking for a more flexible way of performing the mappings that\nallows you to have more control in each step you can find another Jupyter notebook\n[example](examples/notebook/manual_mapping.ipynb) (and the corresponding\n[preview](examples/notebook/manual_mapping.md)) which will take you around the\nmodule to explore more options during the mapping process. This example will\nalso tell you how you can reuse the results from old mappings to afford\ncomputational time.\n\n#### CLI\n\nAnother option to perform a mapping is using the command line interface that is\navailable after the module installation. This tool is accessible through the\ncommand `gaddlemaps` in a terminal. The documentation of this command can be\nchecked running:\n\n```bash\ngaddlemaps -h\n```\n\nA basic usage of it would look like this:\n\n```bash\ngaddlemaps system_initial.gro --mol molecule1_initial.itp molecule1_final.gro molecule1_final.itp --mol molecule2_initial.itp molecule2_final.gro molecule2_final.itp --scale 0.5 -o system_final.gro\n```\n\nwhere `system_initial.gro` is the file with the coordinates of the atoms of the\nsystem to be mapped in the initial resolution. After each `--mol` flag all the\nfiles for mapping each desired type of molecule must be provided (topology in\nthe initial resolution, atom coordinates in the final resolution and topology of\nthe molecule in the final resolution). The `--scale` flag specifies the scaling\nfactor to reduce the final atomic coordinates to avoid molecular overlaps.\nFinally, the `-o` option specified the path to write the output file with the\ncoordinates in the final resolution.\n\nThere is another way to run a mapping with this tool that automatically detects\nall the files needed for each molecule. For example, imagine that in the current\ndirectory you have all the files needed for the mapping we did in with the\nprevious command and more (for instances files to map a \"molecule3\" that we do\nnot want to map). In this scenario we could run the same mapping as before\nrunning the following command:\n\n```bash\ngaddlemaps system_initial.gro --auto * --exclude molecule3 --scale 0.5 -o system_final.gro\n```\n\nNote that the identification of the molecules is based on their names in the\n\".itp\" files and also in the possibility of molecule object initiation so use\nthis option with caution. The `--exclude` flag is used to tell the command to\nnot include the molecule3 (the molecule name in the .itp file) in the mapping\nprocess (useful for example to exclude solvent molecules).\n\n\n## FAQs\n\n### What are those restraints? Wasn't gaddlemaps an automatic algorithm?\n\nGADDLE Maps is an algorithm that does not need any external input. However for\nmolecules that are very symmetrical (for example molecules that are completely\nlinear) the algorithm may need a \"hint\" to know which extreme is which. When\nthe molecule have ramification these hints are not usually needed. These hints\nare what we call restraints. They can be also used in order to have a faster aligment.\n\n### How do I know if gaddle maps is using the c++ backend?\n\nThere is a function that returns wether the c++ backend is available or not. In\norder to check it run:\n\n```python\nfrom gaddlemaps import check_backend_installed\nif check_backend_installed():\n    print(\"The backend is correctly installed\")\nelse:\n    print(\"The backend is not accessible\")\n```\n\nIf it is not installed refer to the section [Configuring the c++ backend](#Configuring-the-c-backend).\n\n### I have a big protein and it takes ages to align. Is this behavior normal?\n\nFirst of all check wether you are using or not the c++ backend [How do I know if\ngaddlemaps is using the c++\nbackend?](#How-do-I-know-if-gaddle-maps-is-using-the-c-backend). However even\nwithout the c++ backend the mapping should not take more than a day even for\nreally big molecules.\n\nThe time that takes to align a molecule greatly increase with the number of\natoms. However, for proteins an approximation is done. Instead of aligning all\nthe atoms of the protein the overlapping is only calculated between atoms in\nresidues  with the same name. If the alignment is taken too long chances are\nthat the residues in both resolutions have different names or are in different\norder.\n\nThis problem can be solved by adding restraints between all the atoms of the\nmolecule but by far the easiest way to accelerate the alignment is to set the\nsame sequence of residues in both files.\n\n### Why the final mapped system looks so weird?\n\nBy default, when the molecular alignments are extrapolated to all the\nconfigurations in the simulation box, the coordinates of the atoms in the\nmolecules in the final resolution are scaled down (see the original paper for\na more detailed description of this reduction) to avoid different molecules\nto overlap in the final system. If this is not done, every simulation that\ntakes that mapped system as input would crash in the first steps. A short energy\nminimization is enough to fix this scale of the atomic coordinates.\n\n> **NOTE**: Before trying to resolvate or ionize any of the systems obtained\n> with this tool is highly recommended to perform a short energy minimization to\n> relax the molecular structures.\n\n### I have some other problem or an unexpected behavior of the code. How should I report it?\n\nIf you find that the code does not work as expected please check if there is an\n[issue in github](https://github.com/txemaotero/gaddlemaps/issues) with the same\nproblem. If there is not, [open a new\nissue](https://github.com/txemaotero/gaddlemaps/issues/new/choose) and we will\naddress it as soon as possible.\n\n### How can I use an unsupported file format?\n\ngaddlemaps allows the enduser to extend the compatible file formats without\ntouching a single line of the module. For such purpose gaddlemaps have 2 base\nclasses (one for the coordinate files and another for the topology files) from\nwhich the enduser can inherit. Any class that inherit from these classes will be\nadded automatically to the supported formats.\n\nAny class that inherits from *gaddlemaps.parsers.CoordinatesParser* will be\nadded to the compatible parsers for coordinate files. On the other any class\nthat inherits from *gaddlemaps.parsers.TopolgyParser* will be added to the\nsupported parsers for topology files. Below you can see an example for a simple\ncoordinate parser for the *pdb* format (the *pdb* format is not currently\nsupported as the parser below is not guarantee to work for the whole [pdb\nspecification](http://www.wwpdb.org/documentation/file-format-content/format33/v3.3.html)).\n\n**NOTE:** The following snippet is just a quick and dirty implementation of a\nparser. It is just an example of how a quick parser can be written. In its\ncurrent form quality would not be good enough to be included as part of the\nmodule.\n\n```python\nfrom gaddlemaps.parsers import CoordinatesParser\n\nimport numpy as np\n\nclass SimplePDB(CoordinatesParser):\n\n    # We must define wich extensions will the parser work with\n    EXTENSIONS = (\"pdb\", )\n\n    # The following methods must be defined\n\n    def __init__(self, path, mode='r'):\n        self.open_file = open(path, mode=mode)\n\n        self.mode = mode\n        self._comment = \"\"\n        self._box = np.array([[0, 0, 0],\n                              [0, 0, 0],\n                              [0, 0, 0]])\n        self._atom_info = []\n        self._atom_index = 0\n\n        if mode == \"r\":\n            self._load_info()\n\n    def seek_atom(self, index):\n        # Instead of moving the cursor to the desired atom we can read all the\n        # atomic information first and use an index to seek the atom. Beware\n        # that this will increase the needed ram and can give problems for the\n        # bigger systems.\n\n        self._atom_index = index\n\n    def next(self):\n        if self._atom_index >= self.natoms:\n            raise StopIteration\n\n        info = self._atom_info[self._atom_index]\n\n        self._atom_index += 1\n        return info\n\n    def writeline(self, atomlist):\n        # Instead of actually writing the file on the go it is possible to\n        # store the information and save it all just before closing\n\n        self._atom_info.append(atomlist)\n\n\n\n    def close(self):\n        if self.mode == \"w\":\n            self.open_file.write(f\"TITLE   {self.comment}\\n\")\n            self.open_file.write(\"REMARK    THIS IS A SIMULATION BOX\\n\")\n            self.open_file.write(\"MODEL 1\\n\")\n            for atomlist in self._atom_info:\n                atom_index = atomlist[3]\n                atom_name = atomlist[2]\n                residue_name = atomlist[1]\n                residue_index = atomlist[0]\n                x_position = atomlist[4] * 10  # The original value is in nm\n                y_position= atomlist[5] * 10\n                z_position = atomlist[6] * 10\n\n\n                line = (f\"ATOM {atom_index:6d} {atom_name} {residue_name} {residue_index:6d}\"\n                        \" {x_position:8.3f} {y_position:8.3f} {z_position:8.3f}\\n\")\n                self.open_file.write(line)\n            self.open_file.write(\"TER\\n\")\n            self.open_file.write(\"ENDMDL\\n\")\n\n        self.open_file.close()\n\n    # We must define some properties also\n\n    @property\n    def natoms(self):\n        return len(self._atom_info)\n\n    @property\n    def box_matrix(self):\n        return self._box\n\n    @box_matrix.setter\n    def box_matrix(self, new_box):\n        self._box = np.array(new_box)\n\n    @property\n    def comment(self):\n        return self._comment\n\n    @comment.setter\n    def comment(self, newcomment):\n        self._comment = newcomment\n\n    # You can add as many auxiliar methods as you want\n\n    def _load_info(self):\n        for line in self.open_file:\n            line = line.strip()\n            if line.startswith(\"TITLE\"):\n                self.comment = line[5:].strip()\n\n            elif line.startswith(\"ATOM\"):\n                line = line.split()\n                self._atom_info.append((\n                    int(line[4]),\n                    line[3],\n                    line[2],\n                    int(line[1]),\n                    float(line[5])/10,\n                    float(line[6])/10,\n                    float(line[7])/10\n                    ))\n            else:\n                pass\n```\n\nJust having this class imported or *pasted* in your script will allow gaddlemaps\nto be used with *.pdb* coordinate files.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/txemaotero/gaddlemaps",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gaddlemaps",
    "package_url": "https://pypi.org/project/gaddlemaps/",
    "platform": null,
    "project_url": "https://pypi.org/project/gaddlemaps/",
    "project_urls": {
      "Cite": "https://doi.org/10.1021/acs.jctc.7b00861",
      "Developed in": "https://www.usc.gal/en",
      "Documentation": "https://gaddlemaps.readthedocs.io/",
      "Homepage": "https://github.com/txemaotero/gaddlemaps",
      "Source": "https://github.com/txemaotero/gaddlemaps",
      "Tracker": "https://github.com/txemaotero/gaddlemaps/issues"
    },
    "release_url": "https://pypi.org/project/gaddlemaps/0.2/",
    "requires_dist": [
      "numpy",
      "scipy",
      "more-itertools",
      "ipywidgets"
    ],
    "requires_python": ">=3.6",
    "summary": "Python package to apply the GADDLE-MAPS algorithm",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14093260,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4ec05c522e7f0d9c2d235626b3db3ba40049d17bb681d6244cfe8cdee0dcdda",
          "md5": "d32d95e92fce2b6f00ab2e7b1bc34c00",
          "sha256": "5d45fa2a91040a4d024c371bef6f70eb714026061b8bc5782d959359b6e620d5"
        },
        "downloads": -1,
        "filename": "gaddlemaps-0.1-cp38-cp38-macosx_10_15_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d32d95e92fce2b6f00ab2e7b1bc34c00",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 2186612,
        "upload_time": "2021-02-26T11:00:46",
        "upload_time_iso_8601": "2021-02-26T11:00:46.223155Z",
        "url": "https://files.pythonhosted.org/packages/b4/ec/05c522e7f0d9c2d235626b3db3ba40049d17bb681d6244cfe8cdee0dcdda/gaddlemaps-0.1-cp38-cp38-macosx_10_15_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2115864593f307694cc64be93d989dcd094c2f632bc7c4509825f5c5ba11f4ed",
          "md5": "2e535a94de8e14a2fb559ff4c0f4fed6",
          "sha256": "c7f37a76a155e7df80a4ec015154705454bccd4ae75d419d22a35fd7181cd30e"
        },
        "downloads": -1,
        "filename": "gaddlemaps-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2e535a94de8e14a2fb559ff4c0f4fed6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1705552,
        "upload_time": "2021-02-26T11:00:49",
        "upload_time_iso_8601": "2021-02-26T11:00:49.771388Z",
        "url": "https://files.pythonhosted.org/packages/21/15/864593f307694cc64be93d989dcd094c2f632bc7c4509825f5c5ba11f4ed/gaddlemaps-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64deb0f1642c8d52aee48c03990a38d219a4d6639c2ded6c9ce7646e1357253e",
          "md5": "bda5fb582a24f13ae06acd19051fb77f",
          "sha256": "93a5837a552ce0f089eacbad5b8435dc49222aa28530db18dfc8806c07bbcef1"
        },
        "downloads": -1,
        "filename": "gaddlemaps-0.1.1-cp39-cp39-macosx_12_0_x86_64.whl",
        "has_sig": false,
        "md5_digest": "bda5fb582a24f13ae06acd19051fb77f",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 1704874,
        "upload_time": "2022-02-24T17:31:06",
        "upload_time_iso_8601": "2022-02-24T17:31:06.157874Z",
        "url": "https://files.pythonhosted.org/packages/64/de/b0f1642c8d52aee48c03990a38d219a4d6639c2ded6c9ce7646e1357253e/gaddlemaps-0.1.1-cp39-cp39-macosx_12_0_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "140da71257da5177269b56dcc3878fef8420bf69a53029228ecb2f4f6b233f95",
          "md5": "81164976ae44a65b07de8af045ba0ce3",
          "sha256": "a05ab8aae648c5413105d4cba1bd783457f993874ebfe1da3828fa251fe7c538"
        },
        "downloads": -1,
        "filename": "gaddlemaps-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "81164976ae44a65b07de8af045ba0ce3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1807116,
        "upload_time": "2022-02-24T17:31:08",
        "upload_time_iso_8601": "2022-02-24T17:31:08.295770Z",
        "url": "https://files.pythonhosted.org/packages/14/0d/a71257da5177269b56dcc3878fef8420bf69a53029228ecb2f4f6b233f95/gaddlemaps-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97a1f7c38db8240e71e1edbb9fcecadc35997851db26beb55d76ca3fdcc40be1",
          "md5": "2567369131627f2f19dd4630ff8de658",
          "sha256": "0050d616b70e6ec0b22b322a98b8281696a676c4e6113208a48404d6158b2ec4"
        },
        "downloads": -1,
        "filename": "gaddlemaps-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2567369131627f2f19dd4630ff8de658",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 1614303,
        "upload_time": "2022-06-10T11:06:32",
        "upload_time_iso_8601": "2022-06-10T11:06:32.372048Z",
        "url": "https://files.pythonhosted.org/packages/97/a1/f7c38db8240e71e1edbb9fcecadc35997851db26beb55d76ca3fdcc40be1/gaddlemaps-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2f7c512191dfd37ec29cddecc9edb72dae18d0be3e6a6893a7118e6e8a398d3",
          "md5": "43be78d78cf582aba728f09d9d08a6f9",
          "sha256": "2574e10aac8cafe8953cb95e325596c17b1daab165cefd5e5b677ea7eb8ba736"
        },
        "downloads": -1,
        "filename": "gaddlemaps-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "43be78d78cf582aba728f09d9d08a6f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1625849,
        "upload_time": "2022-06-10T11:06:34",
        "upload_time_iso_8601": "2022-06-10T11:06:34.652627Z",
        "url": "https://files.pythonhosted.org/packages/d2/f7/c512191dfd37ec29cddecc9edb72dae18d0be3e6a6893a7118e6e8a398d3/gaddlemaps-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97a1f7c38db8240e71e1edbb9fcecadc35997851db26beb55d76ca3fdcc40be1",
        "md5": "2567369131627f2f19dd4630ff8de658",
        "sha256": "0050d616b70e6ec0b22b322a98b8281696a676c4e6113208a48404d6158b2ec4"
      },
      "downloads": -1,
      "filename": "gaddlemaps-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2567369131627f2f19dd4630ff8de658",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 1614303,
      "upload_time": "2022-06-10T11:06:32",
      "upload_time_iso_8601": "2022-06-10T11:06:32.372048Z",
      "url": "https://files.pythonhosted.org/packages/97/a1/f7c38db8240e71e1edbb9fcecadc35997851db26beb55d76ca3fdcc40be1/gaddlemaps-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2f7c512191dfd37ec29cddecc9edb72dae18d0be3e6a6893a7118e6e8a398d3",
        "md5": "43be78d78cf582aba728f09d9d08a6f9",
        "sha256": "2574e10aac8cafe8953cb95e325596c17b1daab165cefd5e5b677ea7eb8ba736"
      },
      "downloads": -1,
      "filename": "gaddlemaps-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "43be78d78cf582aba728f09d9d08a6f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1625849,
      "upload_time": "2022-06-10T11:06:34",
      "upload_time_iso_8601": "2022-06-10T11:06:34.652627Z",
      "url": "https://files.pythonhosted.org/packages/d2/f7/c512191dfd37ec29cddecc9edb72dae18d0be3e6a6893a7118e6e8a398d3/gaddlemaps-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}