{
  "info": {
    "author": "Stephen R A King",
    "author_email": "stephen.ra.king@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Pizazz\n\n> A utility class to leverage 74HC595 shift register chips with a Raspberry Pi.\n\n[![PyPI version](https://badge.fury.io/py/pizazz.svg)](https://badge.fury.io/py/pizazz)\n[![Documentation Status](https://readthedocs.org/projects/pizazz/badge/?version=latest)](https://pizazz.readthedocs.io/en/latest/?badge=latest)\n[![Downloads](https://static.pepy.tech/personalized-badge/pizazz?period=total&units=international_system&left_color=black&right_color=orange&left_text=Downloads)](https://pepy.tech/project/pizazz)\n[![pre-commit][pre-commit-image]][pre-commit-url]\n[![Imports: isort][isort-image]][isort-url]\n[![Code style: black][black-image]][black-url]\n[![Checked with mypy][mypy-image]][mypy-url]\n[![security: bandit][bandit-image]][bandit-url]\n[![licence: mit][mit-license-image]][mit-license-url]\n\n![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/header.png)\n\nThe 74HC595 shift register is an incredibly useful chip. A single chip has 8 output pins which can be\ncontrolled with only 3 input pins (excluding Vcc and Gnd of course).\nThat is great in itself however 595's can be daisy-chained together to give you multiples of 8 pin outputs yet still\nalways controlled by only 3 input pins! Wow!\n\nIf you are not sure why this is useful then let me explain.\n\nI had a requirement to create a LED \"Status Board\" for a monitoring and automation application that I am also writing.\nThe status board would reflect the current operation status of things like Jenkins jobs, Github Actions, Linux services etc etc.\nI needed a minimum of 16 LEDs. Now there already exists a [**status board**][status-board-url] HAT. However it only tracks 5 items.\n\nUsing the Raspberry [**RPi.GPIO**][rpi-gpio-url] library it is possible to individually switch the 27 GPIO pins. However each LED would require\na wire from the GPIO pin. This is very physically unwieldy and clunky to control in python.\n\nEnter the 74HC595...\n\nThis class enables you to individually control any number of LEDS (or other output devices) with only 3 GPIO pins.\n\n### Basic Wiring of the 74HC595 8-bit shift register to a Raspberry Pi\n\n![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/1chip.png)\n\n| Pin   | Tag     | Description                   |\n| ----- | ------- | ----------------------------- |\n| 1 - 7 | Q1 - Q7 | Parallel Data output pins 1-7 |\n| 8     | Gnd     | Ground                        |\n| 9     | Q7->    | Serial data output pin        |\n| 10    | MR      | Master Reset                  |\n| 11    | SH      | Clock pin                     |\n| 12    | ST      | Latch pin                     |\n| 13    | OE      | Output enable                 |\n| 14    | DS      | Serial data input             |\n| 15    | Q0      | Parallel data output pin 0    |\n| 16    | Vcc     | Positive voltage supply       |\n\n### Chaining 2 or more shift registers together\n\n![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/2chip.png)\n\n### How the register works\n\nThe 595 has two registers (which can be thought of as “memory containers”), each with just 8 bits of data.\n\n1. The Shift Register\n2. The Storage Register\n\nWhenever we apply a clock pulse to a 595, two things happen:\n\n1. The bits in the Shift Register move one step to the left. For example, Bit 7 accepts the value that was previously in bit 6, bit 6 gets the value of bit 5 etc.\n\n2. Bit 0 in the Shift Register accepts the current value on DATA pin. At the rising edge of the pulse, if the data pin is high, then a 1 gets pushed into the shift register. Otherwise, it is a 0.\n\nOn enabling the Latch pin, the contents of Shift Register are copied into the Storage Register.\nEach bit of the Storage Register is connected to one of the output pins Q0–Q7 of the IC, so in general, when the value in the Storage Register changes, so do the outputs.\n\n## Installation\n\nRaspberry Pi:\n\n```sh\npip3 install pizazz\n```\n\n## Connecting the Raspberry Pi\n\nThe 40 pins of the Raspberry Pi are GPIO, 5v, 3.3V and ground. Some of the GPIO pins can have special purposes.\nHowever, all of them can be controlled by the RPi.GPIO Python Library.\nThe RPi.GPIO requires that you specify how you will identify the pins that you use. There are 2 ways:\n\n1. **GPIO.BOARD:** option specifies that you are referring to the pins by the number of the pin.\n\n2. **BCM:** option means that you are referring to the pins by the \"Broadcom SOC channel\" number, these are\n   the numbers after \"GPIO\"\n\nSo referring to the diagram below: BCM mode GPIO2 is the same as BOARD mode pin 2\n\n![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/40pinheader.png)\n\nConnect any GPIO's to the clock, latch and data pins of the register and connect the the 5v supply and earth\nas indicated in the register diagram.\n\n## Library Usage examples\n\n_For more examples and usage, please refer to the [Wiki][wiki]._\n\nhttps://user-images.githubusercontent.com/33905365/163853342-a1a19d5e-e392-483d-845f-40bfe25d4cb3.mp4\n\nImport the library\n\n```sh\nfrom pizazz.pizazz import HC595\n```\n\nInstantiate the library passing the initialisation arguments\n\n```sh\nshifter = HC595(mode=\"BCM\", data=17, clock=27, latch=18, ics=2)\n```\n\nthe 'ics' parameter defines the number of registers daisey-chained together.\n\nThere are four public methods in the library:\n\n| Method        | Description                              |\n| ------------- | ---------------------------------------- |\n| clear()       | sets shift and storage registers to zero |\n| test()        | Cycles sequentially through all outputs  |\n| set_output()  | explicitly sets specific pin outputs     |\n| set_pattern() | sets output using a bit pattern          |\n\n### 1. Using the set_output(output, mask) method\n\nArgs:\n\n**output** (int) - decimal value of the binary bits you want to set to \"on\"\n\n**mask** (int) - decimal value of the binary bits to consider in this operation.\n\nConsider the following setup:\n\n![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/masking.png)\n\nUsing a mask has 2 benefits:\n\n1. It enables the library to explicitly turn LEDS 'off'. e.g. sending an output value of 16 means turn pin 5 'on'. it has no concept of turning pin 6 'off'. Using a mask facilitates this.\n2. It isolates the pins to consider in the update. For a status board this is important. The inputs from the sensors can now be considered in isolation from the other sensors making asynchronous updates possible.\n\nConsider sensor 2:\n\n| method values      | LED3 | LED4 |\n| ------------------ | ---- | ---- |\n| set_output(0, 12)  | OFF  | OFF  |\n| set_output(4, 12)  | ON   | OFF  |\n| set_output(8, 12)  | OFF  | ON   |\n| set_output(12, 12) | ON   | ON   |\n\n**NOTE: All other LED outputs remain the same and are untouched by these operations**\n\nThis now makes programming the shift register a simple process. e.g. consider a Jenkins job\n\n```sh\njenkins_mask = 48\njenkins_pass = 16\njenkins_fail = 32\n\n# 'sensor' receives a failing indication\nshifter.set_output(jenkins_fail, jenkins_mask)\n\n# 'sensor' receives a passing indication\nshifter.set_output(jenkins_pass, jenkins_mask)\n\n```\n\nThe second value is the bit mask (similar to an IP bit mask) - Explained later\n\n### 2. Using the set_pattern(chip_pattern) method\n\nArgs:\n\n**chip_pattern** (List or Nested List) - Bit pattern representing the pins to set 'on' or 'off'. If more than two registers are used then the pattern should be a nested list.\n\nUsing the bit pattern (for a two chip configuration)\n\n```sh\nshifter.set_pattern([[0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]])\n```\n\nFor a single chip a simple list should be used:\n\n```sh\nshifter.set_pattern([0, 0, 1, 1, 0, 0, 0, 0])\n```\n\n## Documentation\n\n[**Read the Docs**](https://pizazz.readthedocs.io/en/latest/)\n\n## Meta\n\n[![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/linkedin.png)](https://linkedin.com/in/stephen-k-3a4644210)\n[![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/github.png)](https://github.com/Stephen-RA-King/Stephen-RA-King)\n[![](assets/pypi.png)](https://pypi.org/project/pizazz/)\n[![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/www.png)](https://www.justpython.tech)\n[![](https://github.com/Stephen-RA-King/pizazz/raw/main/assets/email.png)](mailto:stephen.ra.king@gmail.com)\n\nAuthor: Stephen R A King\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<!-- Markdown link & img dfn's -->\n\n[rpi-gpio-url]: https://pypi.org/project/RPi.GPIO/\n[status-board-url]: https://thepihut.com/products/status-board-pro\n[pre-commit-image]: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\n[pre-commit-url]: https://github.com/pre-commit/pre-commit\n[isort-image]: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336\n[isort-url]: https://pycqa.github.io/isort/\n[black-image]: https://img.shields.io/badge/code%20style-black-000000.svg\n[black-url]: https://github.com/psf/black\n[bandit-image]: https://img.shields.io/badge/security-bandit-yellow.svg\n[bandit-url]: https://github.com/PyCQA/bandit\n[mypy-image]: http://www.mypy-lang.org/static/mypy_badge.svg\n[mypy-url]: http://mypy-lang.org/\n[mit-license-image]: https://img.shields.io/badge/license-MIT-blue\n[mit-license-url]: https://choosealicense.com/licenses/mit/\n[wiki]: https://github.com/stephen-ra-king/pizazz/wiki\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stephen-ra-king/pizazz",
    "keywords": "utility,74HC595,GPIO,Raspberry,Pi",
    "license": "MIT",
    "maintainer": "Stephen R A King",
    "maintainer_email": "stephen.ra.king@gmail.com",
    "name": "pizazz",
    "package_url": "https://pypi.org/project/pizazz/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/pizazz/",
    "project_urls": {
      "Homepage": "https://github.com/stephen-ra-king/pizazz"
    },
    "release_url": "https://pypi.org/project/pizazz/1.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Easy configuration and control of 74HC595 Shift Registers on a Raspberry Pi",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15345193,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30bd52f1a85bf0a8f08843cb151e09329b1880340a19acc8ba1dad6c4d31ff97",
          "md5": "568d59bbf0a8bbd057cfb56037662dfe",
          "sha256": "38b95cb65cd9192ce698017198da6e0b29520c3e402915e83c2b6c8f9fa27c9d"
        },
        "downloads": -1,
        "filename": "pizazz-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "568d59bbf0a8bbd057cfb56037662dfe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7559,
        "upload_time": "2022-05-05T18:03:06",
        "upload_time_iso_8601": "2022-05-05T18:03:06.279417Z",
        "url": "https://files.pythonhosted.org/packages/30/bd/52f1a85bf0a8f08843cb151e09329b1880340a19acc8ba1dad6c4d31ff97/pizazz-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77e34277300daaaa19c54b30d39a6b5438ffd9a6f9bf21489a6e41e0f3166b10",
          "md5": "74d4c240cc5677c64e8fc60824b545c9",
          "sha256": "382e4f7b68272cee1456a2dd1423a9e7af42c1726694e546de27a3bef60ce8f1"
        },
        "downloads": -1,
        "filename": "pizazz-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "74d4c240cc5677c64e8fc60824b545c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14532,
        "upload_time": "2022-05-05T18:03:08",
        "upload_time_iso_8601": "2022-05-05T18:03:08.386682Z",
        "url": "https://files.pythonhosted.org/packages/77/e3/4277300daaaa19c54b30d39a6b5438ffd9a6f9bf21489a6e41e0f3166b10/pizazz-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd5b71066b46251a5fa31c182a60e5d89ce4cc8dc6b255b55c90d0633e6acd3f",
          "md5": "7d5ae26c3a811917e6c25d249b3d500a",
          "sha256": "7b894c67cda3c0b51b25d7525399e9c649ce147c0e2adca31f8ccd10f16d1228"
        },
        "downloads": -1,
        "filename": "pizazz-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d5ae26c3a811917e6c25d249b3d500a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9000,
        "upload_time": "2022-10-08T16:57:16",
        "upload_time_iso_8601": "2022-10-08T16:57:16.511387Z",
        "url": "https://files.pythonhosted.org/packages/fd/5b/71066b46251a5fa31c182a60e5d89ce4cc8dc6b255b55c90d0633e6acd3f/pizazz-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eb3d934768f1f15cf8363abdbf3d6a6a9ee38629bfa7311436b6ba48b291d79",
          "md5": "39cce0eda7bfce001492d815f928db3a",
          "sha256": "2883308d963c90da56c54fd109ec4f83b9a23c2202299f1323b7cb486ec7b901"
        },
        "downloads": -1,
        "filename": "pizazz-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39cce0eda7bfce001492d815f928db3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 13643,
        "upload_time": "2022-10-08T16:57:17",
        "upload_time_iso_8601": "2022-10-08T16:57:17.549985Z",
        "url": "https://files.pythonhosted.org/packages/5e/b3/d934768f1f15cf8363abdbf3d6a6a9ee38629bfa7311436b6ba48b291d79/pizazz-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd5b71066b46251a5fa31c182a60e5d89ce4cc8dc6b255b55c90d0633e6acd3f",
        "md5": "7d5ae26c3a811917e6c25d249b3d500a",
        "sha256": "7b894c67cda3c0b51b25d7525399e9c649ce147c0e2adca31f8ccd10f16d1228"
      },
      "downloads": -1,
      "filename": "pizazz-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d5ae26c3a811917e6c25d249b3d500a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9000,
      "upload_time": "2022-10-08T16:57:16",
      "upload_time_iso_8601": "2022-10-08T16:57:16.511387Z",
      "url": "https://files.pythonhosted.org/packages/fd/5b/71066b46251a5fa31c182a60e5d89ce4cc8dc6b255b55c90d0633e6acd3f/pizazz-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5eb3d934768f1f15cf8363abdbf3d6a6a9ee38629bfa7311436b6ba48b291d79",
        "md5": "39cce0eda7bfce001492d815f928db3a",
        "sha256": "2883308d963c90da56c54fd109ec4f83b9a23c2202299f1323b7cb486ec7b901"
      },
      "downloads": -1,
      "filename": "pizazz-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "39cce0eda7bfce001492d815f928db3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 13643,
      "upload_time": "2022-10-08T16:57:17",
      "upload_time_iso_8601": "2022-10-08T16:57:17.549985Z",
      "url": "https://files.pythonhosted.org/packages/5e/b3/d934768f1f15cf8363abdbf3d6a6a9ee38629bfa7311436b6ba48b291d79/pizazz-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}