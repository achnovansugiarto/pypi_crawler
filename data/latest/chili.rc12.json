{
  "info": {
    "author": "Dawid Kraczkowski",
    "author_email": "dawid.kraczkowski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Chili \n[![PyPI version](https://badge.fury.io/py/chili.svg)](https://pypi.org/project/chili) [![codecov](https://codecov.io/gh/kodemore/chili/branch/main/graph/badge.svg?token=TCG7SRQFD5)](https://codecov.io/gh/kodemore/chili) [![CI](https://github.com/kodemore/chili/actions/workflows/main.yaml/badge.svg?branch=main)](https://github.com/kodemore/chili/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/chili/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/chili/actions/workflows/release.yml) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nChili is an extensible data class support library. Its primary focus is on simplifying tasks related to initialising and extracting data classes.\n\nChili ensures type integrity and provides a simple interface to keep your codebase clean from unwanted abstractions.\n\n## Features\n- no dependencies besides typing_extensions\n- supports nested data structures\n- understands lists, sets, collections, unions, etc\n- ensures type integrity \n- support for default values\n- almost complete coverage for `typing` package (including generics)\n- supports forward references out of the box\n- might be extended with custom types\n- data mapping/transformation with `chili.Mapping`\n- fields hiding from serialisation and deserialisation with python's `field` function\n- mapping from json data and to json data\n\n## Installation\n\nWith pip,\n```shell\npip install chili\n```\nor through poetry\n```shell\npoetry add chili\n```\n\n# Usage\n\n## Initialising a dataclass\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\nfrom chili import init_dataclass\n\n@dataclass\nclass Tag:\n    id: str\n    name: str\n\n@dataclass\nclass Pet:\n    name: str\n    tags: List[Tag]\n    age: int\n\npet = init_dataclass({\"name\": \"Bobik\", \"tags\": [{\"name\": \"dog\", \"id\": \"12\"}]}, Pet)\nassert isinstance(pet, Pet)\nassert isinstance(pet.tags, List)\nassert isinstance(pet.tags[0], Tag)\n```\n\n> This example shows how can you cast your dict to a given data class. During data class initialisation, the type integrity is ensured automatically\n\n## Transforming dataclass back to a dict\n\n```python\nfrom chili import asdict\nfrom dataclasses import dataclass\n\n@dataclass\nclass Money:\n    currency: str\n    amount: float\n\nsome_pounds = Money(\"GBP\", \"100.00\")\n\nsome_pounds_dict = asdict(some_pounds)\n\nassert isinstance(some_pounds_dict, dict)\nassert isinstance(some_pounds_dict[\"amount\"], float)\n```\n\n> Chili works with wide commonly used python types, but not every type can be simply transformed back and forth, \n> so make sure you familiarise yourself with supported types.\n\n## Working with json data\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\nfrom chili import from_json, as_json\n\n@dataclass\nclass Tag:\n    id: str\n    name: str\n\n@dataclass\nclass Pet:\n    name: str\n    tags: List[Tag]\n\npet_json = '{\"name\": \"Bobik\", \"tags\": [{\"id\": \"12\", \"name\": \"dog\"}]}'\n    \npet = from_json(pet_json, Pet)\nassert isinstance(pet, Pet)\nassert isinstance(pet.tags, List)\nassert isinstance(pet.tags[0], Tag)\n\nassert pet_json == as_json(pet)\n```\n\n## Using default values\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import List\nfrom chili import init_dataclass\n\n\n@dataclass\nclass Pet:\n    name: str\n    tags: List[str] = field(default_factory=lambda: [\"pet\"])\n\n\nboo = init_dataclass({\"name\": \"Boo\"}, Pet)\n\nassert isinstance(boo, Pet)\nassert boo.tags == ['pet']\n```\n\nIn the above example tags attribute was not available in the dict object, so default value set \nin dataclass is being used instead.\n\n\n> Please note `dataclasses` module does not allow mutable values in `default` argument of the `field` function, \n> so this example is using `default_factory` instead. More details about dataclasses' `default` and `default_factory` \n> arguments are available in the [python's documentation](https://docs.python.org/3/library/dataclasses.html#dataclasses.field).\n\n## Hiding fields from hydration/deserialisation\n\nThere might be scenarios where not all dataclass' fields should be hydrated. In this scenario use built-in python's `dataclasses` module `field` function, like in the example below:\n\n```python\nfrom chili import init_dataclass\nfrom dataclasses import dataclass, field\nfrom typing import List\n\n\n@dataclass\nclass Pet:\n    name: str\n    tags: List[str]\n    tags_length: int = field(init=False)\n\n    def __post_init__(self):\n        self.tags_length = len(self.tags)\n\n\nboo = init_dataclass({\"name\": \"Boo\", \"tags\": [\"hamster\", \"boo\"]}, Pet)\n\nassert isinstance(boo, Pet)\nassert boo.tags_length == 2\n```\n\nIn the above example length of the `tags` attribute is recalculated everytime we initialise the class \nand hydrating it might be superfluous.\n\n\n## Hiding fields from extraction/serialisation\n\nTo hide attributes of dataclass from being extracted into dict simply use `field` function with `repr` attribute set to `False`\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import List\n\nfrom chili import asdict\n\n\n@dataclass\nclass Pet:\n    name: str\n    tags: List[str] = field(repr=False)\n\n\nboo = Pet(name=\"Boo\", tags=[\"pet\", \"hamster\", \"powerful!\"])\n\nboo_dict = asdict(boo)\n\nassert \"tags\" not in boo_dict\n```\n\n## Data mapping\n\nSometimes you might run into scenarios that data coming from different sources needs to be remapped \nbefore you can hydrate it to your dataclass. There might be several reasons for that:\n- input data is using camelCase convention\n- input data is using different naming\n- input data is missing values\n\nIn all those cases you can pass `mapping` attribute to `init_dataclass/hydrate` or `asdict/extract` functions to perform\nmapping before hydration or after extraction dataclass.\n\n### Simple mapping\nPlease consider the following example of simple name mapping:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List\n\nimport chili\n\ninput_data = {\n    \"petName\": \"Bobik\",\n    \"age\": \"12\",\n    \"taggedWith\": [\n        {\"tagName\": \"smart\"},\n        {\"tagName\": \"dog\"},\n        {\"tagName\": \"happy\"},\n    ]\n}\n\n\n@dataclass\nclass Pet:\n    name: str\n    age: int\n    tags: List[dict]\n\n\nmapping = chili.Mapper({\n    \"name\": \"petName\",  # `petName` will be renamed to `name`, which corresponds to `Pet.name` field\n    \"age\": True,  # we just pass true value to include field \"as is\"\n    \"tags\": chili.KeyMapper(\"taggedWith\", {  # `taggedWith` is a complex structure we want to map, so we have to use KeyMapper \n        \"name\": \"tagName\",  # `tagName` will be renamed to `name` which corresponds to `Pet.tags[{index}].name`\n    }),\n})\n\nbobik = chili.hydrate(input_data, Pet, mapping=mapping)\nprint(bobik)  # Pet(name='Bobik', age=12, tags=[{'name': 'smart'}, {'name': 'dog'}, {'name': 'happy'}])\n```\n\n### Mappings with custom behaviour\n\nWe can also use lambdas and functions in mapping to achieve the same result as in the previous example.\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\n\nimport chili\n\n\ndef map_pet_tags(value: List) -> List:\n    return [{\"name\": item[\"tagName\"]} for item in value]\n\n\ninput_data = {\n    \"petName\": \"Bobik\",\n    \"petAge\": \"12\",\n    \"taggedWith\": [\n        {\"tagName\": \"smart\"},\n        {\"tagName\": \"dog\"},\n        {\"tagName\": \"happy\"},\n    ]\n}\n\n\n@dataclass\nclass Pet:\n    name: str\n    age: int\n    tags: List[dict]\n\n\nmapping = chili.Mapper({\n    \"name\": \"petName\",\n    \"age\": lambda value: value[\"petAge\"],  # callables will always receive current's scope data as input \n    \"tags\": chili.KeyMapper(\"taggedWith\", map_pet_tags)\n})\n\nbobik = chili.hydrate(input_data, Pet, mapping=mapping)\nprint(bobik)  # Pet(name='Bobik', age=12, tags=[{'name': 'smart'}, {'name': 'dog'}, {'name': 'happy'}])\n```\n## Mapping with key persistence\n\nYou can use the `chili.mapping.PersistentMapper` to keep all keys and their values. \n> Please not that this will keep all keys, including the nested ones even when using `chili.KeyMapper`. Using a `Callable` is an exception.\n\n```python\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\n\nimport chili\n\n\ndef map_pet_tags(value: List) -> List:\n    return [{\"name\": item[\"tagName\"]} for item in value]\n\n\ninput_data = {\n    \"petName\": \"Bobik\",\n    \"petAge\": \"12\",\n    \"taggedWith\": [\n        {\"tagName\": \"smart\"},\n        {\"tagName\": \"dog\"},\n        {\"tagName\": \"happy\"},\n    ]\n}\n\n\n@dataclass\nclass Pet:\n    name: str\n    age: int\n    tags: List[dict]\n    taggedWith: List[dict]\n    petAge: str\n    petName: str\n\n\nmapping_nested_persistence = chili.PersistentMapper({\n    \"name\": \"petName\",\n    \"age\": lambda value: value[\"petAge\"],  # callables will always receive current's scope data as input \n    \"tags\": chili.KeyMapper(\"taggedWith\", {\"name\": \"tagName\"})\n})\n\nbobik = chili.hydrate(input_data, Pet, mapping=mapping)\nprint(bobik)  # Pet(name='Bobik', age=12, tags=[{'name': 'smart', 'tagName': 'smart'}, {'name': 'dog', 'tagName': 'dog'}, {'name': 'happy', 'tagName': 'happy'}], taggedWith=[{'tagName': 'smart'}, {'tagName': 'dog'}, {'tagName': 'happy'}], petAge='12', petName='Bobik')\n\n\nmapping_no_nested_persistence = chili.PersistentMapper({\n    \"name\": \"petName\",\n    \"age\": lambda value: value[\"petAge\"],  # callables will always receive current's scope data as input \n    \"tags\": chili.KeyMapper(\"taggedWith\", map_pet_tags)  # using a callable won't persist old nested keys and values\n})\n\nbobik = chili.hydrate(input_data, Pet,   mapping=mapping_no_nested_persistence)\nprint(bobik)  # Pet(name='Bobik', age=12, tags=[{'name': 'smart'}, {'name': 'dog'}, {'name': 'happy'}], taggedWith=[{'tagName': 'smart'}, {'tagName': 'dog'}, {'tagName': 'happy'}], petAge='12', petName='Bobik')\n```\n## Declaring custom hydrators\n\nIf you work with types that are neither dataclasses nor directly supported by `Chili`, you can define your own\nhydrator to customise how the type is initialised and how it should be de-initialised by declaring a subclass of\n`chili.hydration.HydrationStrategy` and registering it, like below:\n\n```python\nfrom chili import hydrate, registry, extract, HydrationStrategy\nimport  typing\n\nclass MyType:\n    def __init__(self, value):\n        self.value = value\n\nclass MyHydrator(HydrationStrategy):\n    def extract(self, value):  # value will be instance of MyType\n        return value.value\n        \n    def hydrate(self, value):\n        return MyType(value)\n\n# register our custom type in the hydration registry    \nregistry.add(MyType, MyHydrator())\n\n# usage\nassert isinstance(hydrate(\"hello\", MyType), MyType)\nassert isinstance(hydrate(\"hello\", typing.Optional[MyType]), MyType) # this will work as well with optional types\n\nassert extract(MyType(\"hello\")) == \"hello\"\n```\n\n\n## Working with `Generic` types\n\n`Chili` support most of python's generic types like; `typing.List`, `typing.Tuple`, `typing.Dict`, etc. \nSupport is also provided for generic types defined by user (to some extent).\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Generic, List, TypeVar\nfrom chili import init_dataclass\n\nT = TypeVar(\"T\")\n\n@dataclass\nclass Pet:\n    name: str\n\n@dataclass\nclass Animal:\n    name: str\n\n@dataclass\nclass CustomList(Generic[T]):\n    list: List[T]\n\n\npet_list = init_dataclass(\n    {\"list\": [\n        {\"name\": \"Boo\"},\n        {\"name\": \"Bobek\"},\n    ]},\n    CustomList[Pet]\n)\n\nassert isinstance(pet_list, CustomList)\nfor pet in pet_list.list:\n    assert isinstance(pet, Pet)\n\n\nanimal_list = init_dataclass(\n    {\"list\": [\n        {\"name\": \"Boo\"},\n        {\"name\": \"Bobek\"},\n    ]},\n    CustomList[Animal]\n)\n\nassert isinstance(pet_list, CustomList)\nfor animal in animal_list.list:\n    assert isinstance(animal, Animal)\n```\n\nIn the above example there are three definitions of dataclasses: `Pet`, `Animal` and `CustomList`. \n`Pet` and `Animal` are just ordinary dataclasses but `CustomList` is a generic class, parametrised with `T` parameter. \nThis means we can have subtypes, like: `CustomList[Pet]`, `CustomList[Animal]` or even `CustomList[Dict]`.\n\n`init_dataclass` function understands that passed type is a generic type, and can handle it as suspected. \n\nHydration of dataclass inheriting from another generic dataclasses is also supported, \nonly if that dataclass specifies the parameters:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Generic, List, TypeVar\nfrom chili import init_dataclass\n\nT = TypeVar(\"T\")\n\n@dataclass\nclass Pet:\n    name: str\n\n@dataclass\nclass Animal:\n    name: str\n\n@dataclass\nclass CustomList(Generic[T]):\n    list: List[T]\n\n@dataclass\nclass ExtendedGenericList(CustomList, Generic[T]):\n    ...\n\n@dataclass\nclass ExtendedList(CustomList[Pet]):\n    ...\n\n# this will work\npet_list = init_dataclass(\n    {\"list\": [\n        {\"name\": \"Boo\"},\n        {\"name\": \"Bobek\"},\n    ]},\n    ExtendedGenericList[Pet]\n)\n\n# this will fail\nfailed_pet_list = init_dataclass(\n    {\"list\": [\n        {\"name\": \"Boo\"},\n        {\"name\": \"Bobek\"},\n    ]},\n    ExtendedList\n)\n```\n\nIn the above example `ExtendedList` will fail during initialisation, the reason for that is information \nrequired to parametrise this class and probably its subclasses or any other classes aggregated by this class is lost. \nFor now this behaviour is not supported for auto-hydration mode. `ExtendedGenericList[Pet]` will work as expected.\n\n## Supported data types\n\n### `bool`\n\nPassed value is automatically hydrated to boolean with python's built-in `bool` on hydration and extraction.\n\n### `dict`\n\nPassed value is automatically hydrated to dict with python's built-in `dict` on hydration and extraction.\n\n### `float`\n\nPassed value is automatically hydrated to float with python's built-in `float` on hydration and extraction.\n\n### `frozenset`\n\nPassed value is automatically hydrated to frozen set with python's built-in `frozenset` and extracted to `list`.\n\n### `int`\n\nPassed value is automatically hydrated to int with python's built-in `int` on hydration and extraction.\n\n### `list`\n\nPassed value is automatically hydrated to list with python's built-in `list` on hydration and extraction.\n\n### `set`\n\nPassed value is automatically hydrated to set with python's built-in `set` and extracted to `list`.\n\n### `str`\n\nPassed value is automatically hydrated to string with python's built-in `str` on hydration and extraction.\n\n### `tuple`\n\nPassed value is automatically hydrated to tuple with python's built-in `tuple` and extracted to `list`.\n\n### `collections.namedtuple`\n\nPassed value is automatically hydrated to named tuple and extracted to `list`.\n\n### `collections.deque`\n\nPassed value is automatically hydrated to an instance of `collections.deque` and extracted to `list`.\n\n### `collections.OrderedDict`\n\nPassed value is automatically hydrated to an instance of `collections.OrderedDict` and extracted to `dict`.\n\n### `datetime.date`\n\nPassed value must be valid ISO-8601 date string, then it is automatically hydrated to an instance of `datetime.date` \nclass and extracted to ISO-8601 format compatible string.\n\n### `datetime.datetime`\n\nPassed value must be valid ISO-8601 date time string, then it is automatically hydrated to an instance of `datetime.datetime` \nclass and extracted to ISO-8601 format compatible string.\n\n### `datetime.time`\n\nPassed value must be valid ISO-8601 time string, then it is automatically hydrated to an instance of `datetime.time` \nclass and extracted to ISO-8601 format compatible string.\n\n### `datetime.timedelta`\n\nPassed value must be valid ISO-8601 duration string, then it is automatically hydrated to an instance of `datetime.timedelta`\nclass and extracted to ISO-8601 format compatible string.\n\n### `decimal.Decimal`\n\nPassed value must be a string containing valid decimal number representation, for more please read python's manual\nabout [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal), on extraction value is\nextracted back to string.\n\n### `enum.Enum`\n\nSupports hydration of all instances of `enum.Enum` subclasses as long as value can be assigned\nto one of the members defined in the specified `enum.Enum` subclass. During extraction the value is\nextracted to value of the enum member.\n\n### `enum.IntEnum`\n\nSame as `enum.Enum`.\n\n### `typing.Any`\n\nPassed value is unchanged during hydration and extraction process.\n\n### `typing.AnyStr`\n\nSame as `str`\n\n### `typing.Deque`\n\nSame as `collection.dequeue` with one exception, if subtype is defined, eg `typing.Deque[int]` each item inside queue\nis hydrated accordingly to subtype.\n\n### `typing.Dict`\n\nSame as `dict` with exception that keys and values are respectively hydrated and extracted to match\nannotated type.\n\n### `typing.FrozenSet`\n\nSame as `frozenset` with exception that values of a frozen set are respectively hydrated and extracted to\nmatch annotated type.\n\n### `typing.List`\n\nSame as `list` with exception that values of a list are respectively hydrated and extracted to match annotated type.\n\n### `typing.NamedTuple`\n\nSame as `namedtuple`.\n\n### `typing.Optional`\n\nOptional types can carry additional `None` value which chili's hydration process will respect, so for example \nif your type is `typing.Optional[int]` `None` value is not hydrated to `int`.\n\n### `typing.Set`\n\nSame as `set` with exception that values of a set are respectively hydrated and extracted to match annotated type.\n\n### `typing.Tuple`\n\nSame as `tuple` with exception that values of a set are respectively hydrated and extracted to match annotated types.\nEllipsis operator (`...`) is also supported.\n\n### `typing.TypedDict`\n\nSame as `dict` but values of a dict are respectively hydrated and extracted to match annotated types. \n\n\n### `typing.Generic`\n\nOnly parametrised generic classes are supported, dataclasses that extends other Generic classes without parametrisation will fail.\n\n\n### `typing.Union`\n\nLimited support for Unions.\n\n## API\n\n#### **`chili.hydrate`**(**`value`**: _`typing.Any`_, **`type_name`**: _`Type[T]`_, **`strict`**: _`bool`_ = `False`, **`mapping`**: _`chili.Mapper`_ = `None`) -> _`T`_\n\nHydrates given value into instance of passed type. If hydration fails, it returns passed value as a result, \nif strict mode is set to `True` it raises `InvalidValueError`.\n\n#### **`chili.extract`**(**`value`**: _`typing.Any`_, **`strict`**: _`bool`_ = `False`, **`mapping`**: _`chili.Mapper`_ = `None`) -> _`typing.Any`_\n\nExtracts given value into primitive or set of primitives. If extraction fails, it returns passed value as a result, if\nstrict mode is set to `True` it raises `InvalidValueError`.\n\n#### **`chili.init_dataclass`**(**`value`**: _`dict`_, **`type_name`**: _`Type[T]`_, **`mapping`**: _`chili.Mapper`_ = `None`) -> _`T`_\n\n`init_dataclass` function is instantiating dataclass of specified `type_name` and will hydrate the instance \nwith values passed in `value` dictionary. Each of the passed dictionary's keys must correspond to dataclass'\nattributes in order to be properly interpreted. This rule can be broken if valid mapping is passed to the \nfunction.\n\nThis function support complex and nested hydration, which means if your dataclass aggregates other dataclasses \nor defines complex typing, `init_dataclass` function will respect your type annotations and will cast values \nto match the defined types. \n\nIf attributes in your dataclass do not specify the type value will be hydrated in to a newly created instance as is.\n#### **`chili.asdict`**(**`value`**, **`mapping`**: _`chili.Mapper`_ = `None`) -> _`Dict[str, typing.Any]`_\n\n`asdict` is the opposite of `init_dataclass` function, it takes an instance of dataclass as argument, and\nextracts its members to a dictionary, so the returned data can be stored as json object or easily serialised \nto any other format. Additionally, `mapping` argument allows changing data representation on the fly.\n\n> Please note `Chili` is not a data validation library, although `Chili` performs some validation and casting\n> behind the scenes it does it only to ensure type consistency.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kodemore/chili",
    "keywords": "dataclasses,dataclass,library,mapping,dto,hydration,extraction",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chili",
    "package_url": "https://pypi.org/project/chili/",
    "platform": null,
    "project_url": "https://pypi.org/project/chili/",
    "project_urls": {
      "Documentation": "https://github.com/kodemore/chili",
      "Homepage": "https://github.com/kodemore/chili",
      "Repository": "https://github.com/kodemore/chili"
    },
    "release_url": "https://pypi.org/project/chili/1.8.0/",
    "requires_dist": [
      "typing-extensions (>=4.2,<5.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Chili is a dataclass support library. It is providing simple and fast hydration and extraction interfaces for dataclasses.",
    "version": "1.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15210267,
  "releases": {
    "1.0.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "532c28fac37feb7f2a377fdd648775b6e55e3d2e2885c7be41b03473e838c475",
          "md5": "8413957c916d556c22462943fbe86c3e",
          "sha256": "44aa98d30a76d0b217c1c235ac5ee76e2716d6e31fda37bc0bb2be20a5ca7e94"
        },
        "downloads": -1,
        "filename": "chili-1.0.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8413957c916d556c22462943fbe86c3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 11630,
        "upload_time": "2021-07-05T05:34:56",
        "upload_time_iso_8601": "2021-07-05T05:34:56.465879Z",
        "url": "https://files.pythonhosted.org/packages/53/2c/28fac37feb7f2a377fdd648775b6e55e3d2e2885c7be41b03473e838c475/chili-1.0.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b21acdd84e1f1a7478506f892011e4f8f383d307480cc436821d5682e165b553",
          "md5": "ecfd840f037202e521b217981213eaeb",
          "sha256": "d49c092098fa25f1c0b9f4cce08028bd39375bd444ff9d83110ef3ae94de14f0"
        },
        "downloads": -1,
        "filename": "chili-1.0.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "ecfd840f037202e521b217981213eaeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 15130,
        "upload_time": "2021-07-05T05:34:57",
        "upload_time_iso_8601": "2021-07-05T05:34:57.951613Z",
        "url": "https://files.pythonhosted.org/packages/b2/1a/cdd84e1f1a7478506f892011e4f8f383d307480cc436821d5682e165b553/chili-1.0.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b04ade45b4678519f34c52a57089670789e633175297559518064137033c0c8",
          "md5": "b26ed3d950b99ca49a12228591760eb1",
          "sha256": "f38df81557e7952c28979cfc552d4988ae8ecfdba5f2d23f59cafda9723b289f"
        },
        "downloads": -1,
        "filename": "chili-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b26ed3d950b99ca49a12228591760eb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 12311,
        "upload_time": "2021-08-23T18:59:20",
        "upload_time_iso_8601": "2021-08-23T18:59:20.824116Z",
        "url": "https://files.pythonhosted.org/packages/1b/04/ade45b4678519f34c52a57089670789e633175297559518064137033c0c8/chili-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "421a366058535295fdafa7d68632c3443ea5d14b384067b2032ef507b99056f2",
          "md5": "3acc37f82d61d9b6e8adc90e833df941",
          "sha256": "d3a3395804aa104bc94c44d6dffb0e47755a033fc6d70a996a5b4b9756a09dbe"
        },
        "downloads": -1,
        "filename": "chili-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3acc37f82d61d9b6e8adc90e833df941",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 16396,
        "upload_time": "2021-08-23T18:59:22",
        "upload_time_iso_8601": "2021-08-23T18:59:22.282096Z",
        "url": "https://files.pythonhosted.org/packages/42/1a/366058535295fdafa7d68632c3443ea5d14b384067b2032ef507b99056f2/chili-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f66cb7c8d7856e509caa9b70ca65fb5013990f5e95cbf8b0b045e5f299d8eb1",
          "md5": "ed3e66568eeb7873b18ebd37e16d273c",
          "sha256": "5aa250960c8dd3068cf0993ced26b0085d05ab7c7621e17c0467c603999ca561"
        },
        "downloads": -1,
        "filename": "chili-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed3e66568eeb7873b18ebd37e16d273c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 13669,
        "upload_time": "2021-10-01T08:17:48",
        "upload_time_iso_8601": "2021-10-01T08:17:48.562168Z",
        "url": "https://files.pythonhosted.org/packages/6f/66/cb7c8d7856e509caa9b70ca65fb5013990f5e95cbf8b0b045e5f299d8eb1/chili-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5231b069874d1ece4745a7d4caef8dc0b7ef590e3b2fc8a0c72d0eb45c7f526",
          "md5": "9e77fa17bb28ad31de8fd4c11bdaab0f",
          "sha256": "b93fa80c4eef890f516f89df7ce29ea93d81327ba739b748f2fad4016274456d"
        },
        "downloads": -1,
        "filename": "chili-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e77fa17bb28ad31de8fd4c11bdaab0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 18344,
        "upload_time": "2021-10-01T08:17:49",
        "upload_time_iso_8601": "2021-10-01T08:17:49.772397Z",
        "url": "https://files.pythonhosted.org/packages/a5/23/1b069874d1ece4745a7d4caef8dc0b7ef590e3b2fc8a0c72d0eb45c7f526/chili-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4972af072ef284bf78d9c86599979e044146f75f2d7eccdbc9f6952a7ebb571c",
          "md5": "ea4c23440d96cf238de148b1efcbce2a",
          "sha256": "2f8e1a56c17b6c81d17276a3ebe67594a68c46c9b7830b2e659b1788fae3d237"
        },
        "downloads": -1,
        "filename": "chili-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea4c23440d96cf238de148b1efcbce2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14014,
        "upload_time": "2021-10-03T17:44:41",
        "upload_time_iso_8601": "2021-10-03T17:44:41.330371Z",
        "url": "https://files.pythonhosted.org/packages/49/72/af072ef284bf78d9c86599979e044146f75f2d7eccdbc9f6952a7ebb571c/chili-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edb159e772eee68e796676ce15d058c11989fa681a75d9d727ed8d0741f3d284",
          "md5": "97919cbd190fd12439631a701e8b9f3c",
          "sha256": "8d30b75621636dbb697f0b50ec88e76833dbd7d6469785f58682f85f8273b55e"
        },
        "downloads": -1,
        "filename": "chili-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "97919cbd190fd12439631a701e8b9f3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 18594,
        "upload_time": "2021-10-03T17:44:42",
        "upload_time_iso_8601": "2021-10-03T17:44:42.735652Z",
        "url": "https://files.pythonhosted.org/packages/ed/b1/59e772eee68e796676ce15d058c11989fa681a75d9d727ed8d0741f3d284/chili-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb0074bbee84823d0cb4626f3d2a782071dc23ef7305d6b874eb0754d08a3bea",
          "md5": "3c2345c3b067d0cb2e50ec5e4c36fc8b",
          "sha256": "add3b852a6a1160d70d143b8d5d2ed50bfafe53b244c08092e1e58d4f77cda24"
        },
        "downloads": -1,
        "filename": "chili-1.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c2345c3b067d0cb2e50ec5e4c36fc8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14167,
        "upload_time": "2021-10-19T10:57:16",
        "upload_time_iso_8601": "2021-10-19T10:57:16.493164Z",
        "url": "https://files.pythonhosted.org/packages/bb/00/74bbee84823d0cb4626f3d2a782071dc23ef7305d6b874eb0754d08a3bea/chili-1.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21eb24398443d85bc437e884624bfe6460d90ad1312353fe94324b33884a2ab0",
          "md5": "d4fa6c3e8062afc68b77c314ce4877ac",
          "sha256": "9df9098e52e5679820d063b9453c211b2413c616f0bd0c2f5da65d7d9de2da9e"
        },
        "downloads": -1,
        "filename": "chili-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d4fa6c3e8062afc68b77c314ce4877ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 18851,
        "upload_time": "2021-10-19T10:57:18",
        "upload_time_iso_8601": "2021-10-19T10:57:18.503102Z",
        "url": "https://files.pythonhosted.org/packages/21/eb/24398443d85bc437e884624bfe6460d90ad1312353fe94324b33884a2ab0/chili-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdffdaae91e9141081988c884afcf7f6d4a06b1bd5d30eb49ad36e35bb0d2874",
          "md5": "07c03cdf6d03bc238d6458417b580b50",
          "sha256": "982bca274f78379759238e9ead91dd15b49e408e9b9b9efd94e3ef2654928c0f"
        },
        "downloads": -1,
        "filename": "chili-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07c03cdf6d03bc238d6458417b580b50",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14197,
        "upload_time": "2021-11-11T09:34:58",
        "upload_time_iso_8601": "2021-11-11T09:34:58.323539Z",
        "url": "https://files.pythonhosted.org/packages/fd/ff/daae91e9141081988c884afcf7f6d4a06b1bd5d30eb49ad36e35bb0d2874/chili-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1023e64d8d1667bb74c95343887e078964b1cdac8952f877cfcc87ef19b7218e",
          "md5": "742027cc8466e15930331f42f57081b9",
          "sha256": "21ac3c7bc8e1fb01e4a94e3dddbb0a0a290750bc32fee79c8f6ef626f69a706c"
        },
        "downloads": -1,
        "filename": "chili-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "742027cc8466e15930331f42f57081b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 18897,
        "upload_time": "2021-11-11T09:34:59",
        "upload_time_iso_8601": "2021-11-11T09:34:59.535561Z",
        "url": "https://files.pythonhosted.org/packages/10/23/e64d8d1667bb74c95343887e078964b1cdac8952f877cfcc87ef19b7218e/chili-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee49574e92605be133451b02c7c289c6ce735c52f76fd21b73ec19e7c60e1227",
          "md5": "1246586334abf9a4418999cd611e2412",
          "sha256": "4b8431754872a59d087f2a2d841afeeedf388367d74c8383d26adbe157402931"
        },
        "downloads": -1,
        "filename": "chili-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1246586334abf9a4418999cd611e2412",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14366,
        "upload_time": "2021-11-12T12:11:43",
        "upload_time_iso_8601": "2021-11-12T12:11:43.856399Z",
        "url": "https://files.pythonhosted.org/packages/ee/49/574e92605be133451b02c7c289c6ce735c52f76fd21b73ec19e7c60e1227/chili-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6eefca5121d59f38d15e108dabd5bab208c8ad3c63e881ea6b8982508ddc88e6",
          "md5": "6c1856f00ab2d6b0e83d54192b20572f",
          "sha256": "09f86e84f73b6d59d732fde71ea412bc63671b9558b4234f36e440aaf8b7e0c9"
        },
        "downloads": -1,
        "filename": "chili-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c1856f00ab2d6b0e83d54192b20572f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 19101,
        "upload_time": "2021-11-12T12:11:45",
        "upload_time_iso_8601": "2021-11-12T12:11:45.531444Z",
        "url": "https://files.pythonhosted.org/packages/6e/ef/ca5121d59f38d15e108dabd5bab208c8ad3c63e881ea6b8982508ddc88e6/chili-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b031d104adabb84d3cd5ac1db71df867092ee1870f8c662b18382ae3be09b9e",
          "md5": "9ec5bf313c74011ecec96a5449fc347d",
          "sha256": "f354ad4eccf227e1776135d6e49fe7e57901205c3c193e28bb897e3cfe651f54"
        },
        "downloads": -1,
        "filename": "chili-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ec5bf313c74011ecec96a5449fc347d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14992,
        "upload_time": "2021-12-13T19:13:29",
        "upload_time_iso_8601": "2021-12-13T19:13:29.435338Z",
        "url": "https://files.pythonhosted.org/packages/4b/03/1d104adabb84d3cd5ac1db71df867092ee1870f8c662b18382ae3be09b9e/chili-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9854045cc247067ed7c9819a20c058e17204c0474f62e07e0362fb29a354490",
          "md5": "43231e272c17912a65a8c3b5e2aade0a",
          "sha256": "008c0d1cf21cadca9fe0a4ede25ef50a9a348daf5cf54e29c1381888e5a9bb3c"
        },
        "downloads": -1,
        "filename": "chili-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "43231e272c17912a65a8c3b5e2aade0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 19533,
        "upload_time": "2021-12-13T19:13:30",
        "upload_time_iso_8601": "2021-12-13T19:13:30.572931Z",
        "url": "https://files.pythonhosted.org/packages/e9/85/4045cc247067ed7c9819a20c058e17204c0474f62e07e0362fb29a354490/chili-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d92d30bea3a615b5ed8ea53a76326ad0fe6ac0b5fe053109df10182a3c8410da",
          "md5": "57408cba6d1a142cc6f227922f8e7cd9",
          "sha256": "1eb95b0291a9639ac929a5f034b47c7159b4df2bbe9b58b7ad26f6670118b654"
        },
        "downloads": -1,
        "filename": "chili-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57408cba6d1a142cc6f227922f8e7cd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 14997,
        "upload_time": "2022-03-28T11:51:34",
        "upload_time_iso_8601": "2022-03-28T11:51:34.483452Z",
        "url": "https://files.pythonhosted.org/packages/d9/2d/30bea3a615b5ed8ea53a76326ad0fe6ac0b5fe053109df10182a3c8410da/chili-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83ac33141a53d79c2682f116d51f1c7a92b6c5cf8f9f359253c4b502e2ae7c35",
          "md5": "d8ef382c59ae8910fcc54f81bce40037",
          "sha256": "a7569ca430965dcd7b4db430353e2fc36a81672853de675dc702a0dd4dea2c6f"
        },
        "downloads": -1,
        "filename": "chili-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8ef382c59ae8910fcc54f81bce40037",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 19535,
        "upload_time": "2022-03-28T11:51:36",
        "upload_time_iso_8601": "2022-03-28T11:51:36.149698Z",
        "url": "https://files.pythonhosted.org/packages/83/ac/33141a53d79c2682f116d51f1c7a92b6c5cf8f9f359253c4b502e2ae7c35/chili-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4386b0af82fb6aabbab3a60532f8033fa2acdf61700b7514b0d4d4e432740bac",
          "md5": "bcc3990f5ad03e6e023a2b6c1f694aea",
          "sha256": "e74da95444c58fa327db9db337065bd98471d2d99b45f3268e11bdf24e0b6937"
        },
        "downloads": -1,
        "filename": "chili-1.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcc3990f5ad03e6e023a2b6c1f694aea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 15309,
        "upload_time": "2022-06-09T18:56:55",
        "upload_time_iso_8601": "2022-06-09T18:56:55.012839Z",
        "url": "https://files.pythonhosted.org/packages/43/86/b0af82fb6aabbab3a60532f8033fa2acdf61700b7514b0d4d4e432740bac/chili-1.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bc09214a85e0b131a09cc2cd4943c3d8b4f92a832d46b3caf15eeef875d4920",
          "md5": "e8a5cb9788d1cbf36d7d039126a47938",
          "sha256": "551438fd6bd9eb3bc970875d3ebb77b37373309beb5b3a6e0a8bc4ba22ddd321"
        },
        "downloads": -1,
        "filename": "chili-1.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8a5cb9788d1cbf36d7d039126a47938",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 20141,
        "upload_time": "2022-06-09T18:56:57",
        "upload_time_iso_8601": "2022-06-09T18:56:57.364516Z",
        "url": "https://files.pythonhosted.org/packages/0b/c0/9214a85e0b131a09cc2cd4943c3d8b4f92a832d46b3caf15eeef875d4920/chili-1.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c512aa8c6e83b84af7faa2c48e09591855b6e0406a19a5fcd324443239260e22",
          "md5": "1daf047739432e1ee6d9c1219788c1ec",
          "sha256": "36232c68b90eee8524a6c53702de850c9dc080cfa251876c38a259cf0d886bac"
        },
        "downloads": -1,
        "filename": "chili-1.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1daf047739432e1ee6d9c1219788c1ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 15282,
        "upload_time": "2022-09-14T20:58:43",
        "upload_time_iso_8601": "2022-09-14T20:58:43.039816Z",
        "url": "https://files.pythonhosted.org/packages/c5/12/aa8c6e83b84af7faa2c48e09591855b6e0406a19a5fcd324443239260e22/chili-1.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d09e63bd3d87883cd01a5c3d69169bff424652ee6f68cb7a6f3d2ed5fe6fd21f",
          "md5": "cecd5630a411184e37c697a73402643e",
          "sha256": "27d35e338c453abda8579a04b27f5702776cf1283fba6e0f885082e44c202057"
        },
        "downloads": -1,
        "filename": "chili-1.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cecd5630a411184e37c697a73402643e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 20049,
        "upload_time": "2022-09-14T20:58:45",
        "upload_time_iso_8601": "2022-09-14T20:58:45.062695Z",
        "url": "https://files.pythonhosted.org/packages/d0/9e/63bd3d87883cd01a5c3d69169bff424652ee6f68cb7a6f3d2ed5fe6fd21f/chili-1.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9951602cfbc32c25a4a9abac345933d59ca3e7244d706d72a77e305bfdc675b1",
          "md5": "e9bf07597ffa59fa6898829dbb78ad33",
          "sha256": "65a65c53fe92e55f51f87bd546dfe7c2605458544e6125ff307bfcab1c72f09b"
        },
        "downloads": -1,
        "filename": "chili-1.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9bf07597ffa59fa6898829dbb78ad33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 15497,
        "upload_time": "2022-09-26T05:17:58",
        "upload_time_iso_8601": "2022-09-26T05:17:58.609593Z",
        "url": "https://files.pythonhosted.org/packages/99/51/602cfbc32c25a4a9abac345933d59ca3e7244d706d72a77e305bfdc675b1/chili-1.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cb83a2c6f845b99b1d772d337b8d97517a9a4fefdf6c3c221cc0534d3028eb8",
          "md5": "0074f70f2fa040a1fe01edb51ebcbb69",
          "sha256": "84d73a8e6361ed10f3bcb86c4152f9fc998a18d2824f9633ea1b38206592123f"
        },
        "downloads": -1,
        "filename": "chili-1.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0074f70f2fa040a1fe01edb51ebcbb69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 20365,
        "upload_time": "2022-09-26T05:18:00",
        "upload_time_iso_8601": "2022-09-26T05:18:00.605239Z",
        "url": "https://files.pythonhosted.org/packages/8c/b8/3a2c6f845b99b1d772d337b8d97517a9a4fefdf6c3c221cc0534d3028eb8/chili-1.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9951602cfbc32c25a4a9abac345933d59ca3e7244d706d72a77e305bfdc675b1",
        "md5": "e9bf07597ffa59fa6898829dbb78ad33",
        "sha256": "65a65c53fe92e55f51f87bd546dfe7c2605458544e6125ff307bfcab1c72f09b"
      },
      "downloads": -1,
      "filename": "chili-1.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9bf07597ffa59fa6898829dbb78ad33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 15497,
      "upload_time": "2022-09-26T05:17:58",
      "upload_time_iso_8601": "2022-09-26T05:17:58.609593Z",
      "url": "https://files.pythonhosted.org/packages/99/51/602cfbc32c25a4a9abac345933d59ca3e7244d706d72a77e305bfdc675b1/chili-1.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cb83a2c6f845b99b1d772d337b8d97517a9a4fefdf6c3c221cc0534d3028eb8",
        "md5": "0074f70f2fa040a1fe01edb51ebcbb69",
        "sha256": "84d73a8e6361ed10f3bcb86c4152f9fc998a18d2824f9633ea1b38206592123f"
      },
      "downloads": -1,
      "filename": "chili-1.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0074f70f2fa040a1fe01edb51ebcbb69",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 20365,
      "upload_time": "2022-09-26T05:18:00",
      "upload_time_iso_8601": "2022-09-26T05:18:00.605239Z",
      "url": "https://files.pythonhosted.org/packages/8c/b8/3a2c6f845b99b1d772d337b8d97517a9a4fefdf6c3c221cc0534d3028eb8/chili-1.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}