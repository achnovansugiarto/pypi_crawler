{
  "info": {
    "author": "Arm Ltd",
    "author_email": "mlia@arm.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<!---\nSPDX-FileCopyrightText: Copyright 2022-2023, Arm Limited and/or its affiliates.\nSPDX-License-Identifier: Apache-2.0\n--->\n# ML Inference Advisor - Introduction\n\nThe ML Inference Advisor (MLIA) is used to help AI developers design and\noptimize neural network models for efficient inference on Arm® targets (see\n[supported targets](#target-profiles)) by enabling performance analysis and\nproviding actionable advice early in the model development cycle. The final\nadvice can cover supported operators, performance analysis and suggestions for\nmodel optimization (e.g. pruning, clustering, etc.).\n\n## Inclusive language commitment\n\nThis product conforms to Arm's inclusive language policy and, to the best of\nour knowledge, does not contain any non-inclusive language.\n\nIf you find something that concerns you, email terms@arm.com.\n\n## Releases\n\nRelease notes can be found in [MLIA releases](https://review.mlplatform.org/plugins/gitiles/ml/mlia/+/refs/tags/0.6.0/RELEASES.md).\n\n## Getting support\n\nIn case you need support or want to report an issue, give us feedback or\nsimply ask a question about MLIA, please send an email to mlia@arm.com.\n\nAlternatively, use the\n[AI and ML forum](https://community.arm.com/support-forums/f/ai-and-ml-forum)\nto get support by marking your post with the **MLIA** tag.\n\n## Reporting vulnerabilities\n\nInformation on reporting security issues can be found in\n[Reporting vulnerabilities](https://review.mlplatform.org/plugins/gitiles/ml/mlia/+/refs/tags/0.6.0/SECURITY.md).\n\n## License\n\nML Inference Advisor is licensed under [Apache License 2.0](https://review.mlplatform.org/plugins/gitiles/ml/mlia/+/refs/tags/0.6.0/LICENSES/Apache-2.0.txt).\n\n## Trademarks and copyrights\n\n* Arm®, Arm® Ethos™-U, Arm® Cortex®-A, Arm® Cortex®-M, Arm® Corstone™ are\n  registered trademarks or trademarks of Arm® Limited (or its subsidiaries) in\n  the U.S. and/or elsewhere.\n* TensorFlow™ is a trademark of Google® LLC.\n* Keras™ is a trademark by François Chollet.\n* Linux® is the registered trademark of Linus Torvalds in the U.S. and\n  elsewhere.\n* Python® is a registered trademark of the PSF.\n* Ubuntu® is a registered trademark of Canonical.\n* Microsoft and Windows are trademarks of the Microsoft group of companies.\n\n# General usage\n\n## Prerequisites and dependencies\n\nIt is recommended to use a virtual environment for MLIA installation, and a\ntypical setup for MLIA requires:\n\n* Ubuntu® 20.04.03 LTS (other OSs may work, the ML Inference Advisor has been\n  tested on this one specifically)\n* Python® >= 3.8.1\n* Ethos™-U Vela dependencies (Linux® only)\n  * For more details, please refer to the\n    [prerequisites of Vela](https://pypi.org/project/ethos-u-vela/)\n\n## Installation\n\nMLIA can be installed with `pip` using the following command:\n\n```bash\npip install mlia\n```\n\nIt is highly recommended to create a new virtual environment to install MLIA.\n\n## First steps\n\nAfter the installation, you can check that MLIA is installed correctly by\nopening your terminal, activating the virtual environment and typing the\nfollowing command that should print the help text:\n\n```bash\nmlia --help\n```\n\nThe ML Inference Advisor works with sub-commands, i.e. in general a MLIA command\nwould look like this:\n\n```bash\nmlia [sub-command] [arguments]\n```\n\nWhere the following sub-commands are available:\n\n* [\"check\"](#check): perform compatibility or performance checks on the model\n* [\"optimize\"](#optimize): apply specified optimizations\n\nDetailed help about the different sub-commands can be shown like this:\n\n```bash\nmlia [sub-command] --help\n```\n\nThe following sections go into further detail regarding the usage of MLIA.\n\n# Sub-commands\n\nThis section gives an overview of the available sub-commands for MLIA.\n\n## **check**\n\n### compatibility\n\nDefault check that MLIA runs. It lists the model's operators with information\nabout their compatibility with the specified target.\n\n*Examples:*\n\n```bash\n# List operator compatibility with Ethos-U55 with 256 MAC\nmlia check ~/models/mobilenet_v1_1.0_224_quant.tflite --target-profile ethos-u55-256\n\n# List operator compatibility with Cortex-A\nmlia check ~/models/mobilenet_v1_1.0_224_quant.tflite --target-profile cortex-a\n\n# Get help and further information\nmlia check --help\n```\n\n### performance\n\nEstimate the model's performance on the specified target and print out\nstatistics.\n\n*Examples:*\n\n```bash\n# Use default parameters\nmlia check ~/models/mobilenet_v1_1.0_224_quant.tflite \\\n    --target-profile ethos-u55-256 \\\n    --performance\n\n# Explicitly specify the target profile and backend(s) to use\n# with --backend option\nmlia check ~/models/ds_cnn_large_fully_quantized_int8.tflite \\\n    --target-profile ethos-u65-512 \\\n    --performance \\\n    --backend \"vela\" \\\n    --backend \"corstone-300\"\n\n# Get help and further information\nmlia check --help\n```\n\n## **optimize**\n\nThis sub-command applies optimizations to a Keras model (.h5 or SavedModel) and\nshows the performance improvements compared to the original unoptimized model.\n\nThere are currently two optimization techniques available to apply:\n\n* **pruning**: Sets insignificant model weights to zero until the specified\n    sparsity is reached.\n* **clustering**: Groups the weights into the specified number of clusters and\n    then replaces the weight values with the cluster centroids.\n\nMore information about these techniques can be found online in the TensorFlow\ndocumentation, e.g. in the\n[TensorFlow model optimization guides](https://www.tensorflow.org/model_optimization/guide).\n\n**Note:** A ***Keras model*** (.h5 or SavedModel) is required as input to\nperform the optimizations. Models in the TensorFlow Lite format are **not**\nsupported.\n\n*Examples:*\n\n```bash\n# Custom optimization parameters: pruning=0.6, clustering=16\nmlia optimize ~/models/ds_cnn_l.h5 \\\n    --target-profile ethos-u55-256 \\\n    --pruning \\\n    --pruning-target 0.6 \\\n    --clustering \\\n    --clustering-target 16\n\n# Get help and further information\nmlia optimize --help\n```\n\n# Target profiles\n\nThe targets currently supported are described in the sections below.\nAll MLIA sub-commands require a target profile as input parameter.\nThat target profile can be either a name of a built-in target profile\nor a custom file. MLIA saves the target profile that was used for a run\nin the output directory.\n\nThe support of the above sub-commands for different targets is provided via\nbackends that need to be installed separately, see\n[Backend installation](#backend-installation) section.\n\n## Ethos-U\n\nThere are a number of predefined profiles for Ethos-U with the following\nattributes:\n\n```\n+--------------------------------------------------------------------+\n| Profile name  | MAC | System config               | Memory mode    |\n+=====================================================================\n| ethos-u55-256 | 256 | Ethos_U55_High_End_Embedded | Shared_Sram    |\n+---------------------------------------------------------------------\n| ethos-u55-128 | 128 | Ethos_U55_High_End_Embedded | Shared_Sram    |\n+---------------------------------------------------------------------\n| ethos-u65-512 | 512 | Ethos_U65_High_End          | Dedicated_Sram |\n+---------------------------------------------------------------------\n| ethos-u65-256 | 256 | Ethos_U65_High_End          | Dedicated_Sram |\n+--------------------------------------------------------------------+\n```\n\nExample:\n\n```bash\nmlia check ~/model.tflite --target-profile ethos-u65-512 --performance\n```\n\nEthos-U is supported by these backends:\n\n* [Corstone-300](#corstone-300)\n* [Corstone-310](#corstone-310)\n* [Vela](#vela)\n\n## Cortex-A\n\nThe profile *cortex-a* can be used to get the information about supported\noperators for Cortex-A CPUs when using the Arm NN TensorFlow Lite delegate.\nPlease, find more details in the section for the\n[corresponding backend](#arm-nn-tensorflow-lite-delegate).\n\n## TOSA\n\nThe target profile *tosa* can be used for TOSA compatibility checks of your\nmodel. It requires the [TOSA Checker](#tosa-checker) backend.\n\nFor more information, see TOSA Checker's:\n\n* [repository](https://review.mlplatform.org/plugins/gitiles/tosa/tosa_checker/+/refs/heads/main)\n* [pypi.org page](https://pypi.org/project/tosa-checker/)\n\n## Custom target profiles\n\nFor the _custom target profiles_, the configuration file for a custom\ntarget profile is passed as path and needs to conform to the TOML file format.\nEach target in MLIA has a pre-defined set of parameters which need to be present\nin the config file. The built-in target profiles (in `src/mlia/resources/target_profiles`)\ncan be used to understand what parameters apply for each target.\n\n*Example:*\n\n``` bash\n# for custom profiles\nmlia ops --target-profile ~/my_custom_profile.toml sample_model.tflite\n```\n\n# Backend installation\n\nThe ML Inference Advisor is designed to use backends to provide different\nmetrics for different target hardware. Some backends come pre-installed with\nMLIA, but others can be added and managed using the command `mlia-backend`, that\nprovides the following functionality:\n\n* **install**\n* **uninstall**\n* **list**\n\n *Examples:*\n\n```bash\n# List backends installed and available for installation\nmlia-backend list\n\n# Install Corstone-300 backend for Ethos-U\nmlia-backend install Corstone-300 --path ~/FVP_Corstone_SSE-300/\n\n# Uninstall the Corstone-300 backend\nmlia-backend uninstall Corstone-300\n\n# Get help and further information\nmlia-backend --help\n```\n\n**Note:** Some, but not all, backends can be automatically downloaded, if no\npath is provided.\n\n## Available backends\n\nThis section lists available backends. As not all backends work on any platform\nthe following table shows some compatibility information:\n\n```\n+----------------------------------------------------------------------------+\n| Backend       | Linux                  | Windows        | Python           |\n+=============================================================================\n| Arm NN        |                        |                |                  |\n| TensorFlow    | x86_64                 | Windows 10     | Python>=3.8      |\n| Lite delegate |                        |                |                  |\n+-----------------------------------------------------------------------------\n| Corstone-300  | x86_64                 | Not compatible | Python>=3.8      |\n+-----------------------------------------------------------------------------\n| Corstone-310  | x86_64                 | Not compatible | Python>=3.8      |\n+-----------------------------------------------------------------------------\n| TOSA checker  | x86_64 (manylinux2014) | Not compatible | 3.7<=Python<=3.9 |\n+-----------------------------------------------------------------------------\n| Vela          | x86_64                 | Windows 10     | Python~=3.7      |\n+----------------------------------------------------------------------------+\n```\n\n### Arm NN TensorFlow Lite delegate\n\nThis backend provides general information about the compatibility of operators\nwith the Arm NN TensorFlow Lite delegate for Cortex-A. It comes pre-installed\nwith MLIA.\n\nFor more information see:\n\n* [Arm NN TensorFlow Lite delegate documentation](https://arm-software.github.io/armnn/latest/delegate.xhtml)\n\n### Corstone-300\n\nCorstone-300 is a backend that provides performance metrics for systems based\non Cortex-M55 and Ethos-U. It is only available on the Linux platform.\n\n*Examples:*\n\n```bash\n# Download and install Corstone-300 automatically\nmlia-backend install Corstone-300\n# Point to a local version of Corstone-300 installed using its installation script\nmlia-backend install Corstone-300 --path YOUR_LOCAL_PATH_TO_CORSTONE_300\n```\n\nFor further information about Corstone-300 please refer to:\n<https://developer.arm.com/Processors/Corstone-300>\n\n### Corstone-310\n\nCorstone-310 is a backend that provides performance metrics for systems based\non Cortex-M85 and Ethos-U. It is available as Arm Virtual Hardware (AVH) only,\ni.e. it can not be downloaded automatically.\n\n* For access to AVH for Corstone-310 please refer to:\n  <https://developer.arm.com/Processors/Corstone-310>\n* Please use the examples of MLIA using Corstone-310 here to get started:\n  <https://github.com/ARM-software/open-iot-sdk>\n\n### TOSA Checker\n\nThe TOSA Checker backend provides operator compatibility checks against the\nTOSA specification.\n\nPlease, install it into the same environment as MLIA using this command:\n\n```bash\nmlia-backend install tosa-checker\n```\n\nAdditional resources:\n\n* Source code: <https://review.mlplatform.org/admin/repos/tosa/tosa_checker>\n* PyPi package <https://pypi.org/project/tosa-checker/>\n\n### Vela\n\nThe Vela backend provides performance metrics for Ethos-U based systems. It\ncomes pre-installed with MLIA.\n\nAdditional resources:\n\n* <https://pypi.org/project/ethos-u-vela/>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.mlplatform.org/ml/mlia.git",
    "keywords": "ml,arm,ethos-u,tflite",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlia",
    "package_url": "https://pypi.org/project/mlia/",
    "platform": null,
    "project_url": "https://pypi.org/project/mlia/",
    "project_urls": {
      "Homepage": "https://git.mlplatform.org/ml/mlia.git"
    },
    "release_url": "https://pypi.org/project/mlia/0.6.0/",
    "requires_dist": [
      "tensorflow (~=2.10.1)",
      "tensorflow-model-optimization (~=0.7.3)",
      "ethos-u-vela (~=3.6.0)",
      "numpy (<1.24)",
      "requests (~=2.28.1)",
      "rich (~=12.6.0)",
      "tomli (~=2.0.1) ; python_version < \"3.11\"",
      "tosa-checker (==0.1.0) ; extra == 'tosa'"
    ],
    "requires_python": ">=3.8.1",
    "summary": "ML Inference Advisor",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16996738,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56e26ea8a95bd986a849a15ede6d04fc9fe3bf2b569b06e13dfa34f21e5c9c79",
          "md5": "051843f8b0b9685d73121dce26da3c6e",
          "sha256": "875bd4bda886c32f463d1992452905cd0263653a3c8bc972733e406eacf45d25"
        },
        "downloads": -1,
        "filename": "mlia-0.3.0-py3-none-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "051843f8b0b9685d73121dce26da3c6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1269474,
        "upload_time": "2022-06-02T07:52:00",
        "upload_time_iso_8601": "2022-06-02T07:52:00.953715Z",
        "url": "https://files.pythonhosted.org/packages/56/e2/6ea8a95bd986a849a15ede6d04fc9fe3bf2b569b06e13dfa34f21e5c9c79/mlia-0.3.0-py3-none-manylinux1_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "775d84f06faa8836c1d406c87ac83ef45bcc649f3da426aabbf84fb8bd47a787",
          "md5": "b797f2dae81f978446da645bfc77b3cf",
          "sha256": "27face0a218b4e424496c0932d081365388a13652296c9017e86fe09b0947452"
        },
        "downloads": -1,
        "filename": "mlia-0.4.0-py3-none-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b797f2dae81f978446da645bfc77b3cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1248900,
        "upload_time": "2022-09-01T16:46:49",
        "upload_time_iso_8601": "2022-09-01T16:46:49.151035Z",
        "url": "https://files.pythonhosted.org/packages/77/5d/84f06faa8836c1d406c87ac83ef45bcc649f3da426aabbf84fb8bd47a787/mlia-0.4.0-py3-none-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a845a93d0fad76e81b84e5549ec583c09601c6e3917da147e3d972247236b4ab",
          "md5": "621cb0a295c4209773bbb8e17db8c437",
          "sha256": "7df35e85cc20d1a81122414ad319b9c62711334e8553fadb5cf79c1a61c976e5"
        },
        "downloads": -1,
        "filename": "mlia-0.5.0-py3-none-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "621cb0a295c4209773bbb8e17db8c437",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 1502843,
        "upload_time": "2022-11-28T13:43:39",
        "upload_time_iso_8601": "2022-11-28T13:43:39.929669Z",
        "url": "https://files.pythonhosted.org/packages/a8/45/a93d0fad76e81b84e5549ec583c09601c6e3917da147e3d972247236b4ab/mlia-0.5.0-py3-none-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c0ea204e13ea8e126fbdce9aa15c6251ae70b349ef6b9d6918c5cfe6cf02552",
          "md5": "441c60b2c5ed5c2b10bc9762a95b2269",
          "sha256": "5f29450b37c723f6718ea10559376bbe474680594ab917ee3e77e9b48907ef47"
        },
        "downloads": -1,
        "filename": "mlia-0.6.0-py3-none-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "441c60b2c5ed5c2b10bc9762a95b2269",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.1",
        "size": 1491914,
        "upload_time": "2023-02-23T17:23:59",
        "upload_time_iso_8601": "2023-02-23T17:23:59.743417Z",
        "url": "https://files.pythonhosted.org/packages/4c/0e/a204e13ea8e126fbdce9aa15c6251ae70b349ef6b9d6918c5cfe6cf02552/mlia-0.6.0-py3-none-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c0ea204e13ea8e126fbdce9aa15c6251ae70b349ef6b9d6918c5cfe6cf02552",
        "md5": "441c60b2c5ed5c2b10bc9762a95b2269",
        "sha256": "5f29450b37c723f6718ea10559376bbe474680594ab917ee3e77e9b48907ef47"
      },
      "downloads": -1,
      "filename": "mlia-0.6.0-py3-none-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "441c60b2c5ed5c2b10bc9762a95b2269",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.1",
      "size": 1491914,
      "upload_time": "2023-02-23T17:23:59",
      "upload_time_iso_8601": "2023-02-23T17:23:59.743417Z",
      "url": "https://files.pythonhosted.org/packages/4c/0e/a204e13ea8e126fbdce9aa15c6251ae70b349ef6b9d6918c5cfe6cf02552/mlia-0.6.0-py3-none-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}