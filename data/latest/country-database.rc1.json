{
  "info": {
    "author": "",
    "author_email": "Ggicci <ggicci.t@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# python-countries\n\n<div align=\"center\">\n\n[![Run tests](https://github.com/ggicci/python-countries/actions/workflows/run-tests.yml/badge.svg?branch=main)](https://github.com/ggicci/python-countries/actions/workflows/run-tests.yml)\n[![codecov](https://codecov.io/gh/ggicci/python-countries/branch/main/graph/badge.svg?token=DPVPXJLDND)](https://codecov.io/gh/ggicci/python-countries)\n\n</div>\n\nCountry Database in Python\n\n- name\n- currency\n- flag\n- official_languages\n- ...\n\nSee [ggicci/countries](https://github.com/ggicci/countries) for the full list of the properties.\n\n## Install\n\n```bash\npip install country-database\n```\n\n## Usage\n\n### Load all countries\n\n```python\nfrom country_database import load_countries\n\nCountryIndex = load_countries()\nprint(CountryIndex.CAN.alpha2_code) # \"CA\"\nprint(CountryIndex.CAN.name) # \"Canada\"\nprint(CountryIndex.CAN.name.to_locale(\"zh\")) # \"加拿大\"\n\n\nCountryIndexZh = load_countries(locale=\"zh\")\nprint(CountryIndexZh.CAN.name) # \"加拿大\"\nprint(CountryIndexZh.CAN.name.to_locale(\"en\")) # \"Canada\"\n```\n\n### Load one country\n\n```python\nfrom country_database import load_country\n\nca = load_country(\"CA\") # or \"CAN\"\nprint(ca.name) # \"Canada\"\n```\n\n### Load a custom list of countries\n\n```python\nfrom dataclasses import dataclass\nfrom country_database import CountryProperties, load_countries_generic\n\n@dataclass(frozen=True)\nclass MyCountryIndex:\n    CAN: CountryProperties\n    USA: CountryProperties\n    CHN: CountryProperties\n\nCountryIndex = load_countries_generic(MyCountryIndex)\n```\n\n### Add custom properties to a country\n\nThe default database is [ggicci/countries](https://github.com/ggicci/countries).\nYou can add your own data and load them easily by instantiate a [DataLoader](./src/country_database/dataloader.py) and pass it to the `load_countries*`, `load_country*` or just merge your database to the `default_dataloader`.\n\n```python\nfrom pathlib import Path\nfrom dataclasses import dataclass\nfrom country_database import (\n    CountryProperties,\n    DataLoader,\n    FullCountryIndex,\n    Property,\n)\n\nCUSTOM_DATA_DIR = Path(\"/path/to/your/custom/data/dir\")\n\n# NOTE: if you don't need the fields from the default database,\n# you can just inherit CountryPropertiesBase instead of CountryProperties\n@dataclass(frozen=True)\nclass MyCountry(CountryProperties):\n    custom_field_1: Property\n    custom_field_2: Property\n\n\n# WAY 1: create a new dataloader.\nloader = DataLoader() # will load the default database\nloader.merge_database(CUSTOM_DATA_DIR)\n\n# NOTE: If you don't want to load the default database, use the following statement:\n# It will create a loader which only loads\n# 1. the country codes from the default database;\n# 2. data from CUSTOM_DATA_DIR;\n# but data from the default database won't be loaded.\n#\n# loader = DataLoader(CUSTOM_DATA_DIR)\n\nCountryIndex = load_countries_generic(FullCountryIndex[MyCountry], loader=loader)\n\n# WAY 2: merge your database to the default_dataloader.\nfrom country_database import default_dataloader\ndefault_dataloader.merge_database(CUSTOM_DATA_DIR)\nCountryIndex = load_countries_generic(FullCountryIndex[MyCountry])\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "countries",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "country-database",
    "package_url": "https://pypi.org/project/country-database/",
    "platform": null,
    "project_url": "https://pypi.org/project/country-database/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ggicci/python-countries/issues",
      "Homepage": "https://github.com/ggicci/python-countries",
      "Repository": "https://github.com/ggicci/python-countries"
    },
    "release_url": "https://pypi.org/project/country-database/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Country information database. Including names, capitals, currencies, etc.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15398657,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbfff9f3ddd58367796fbb5576f818825d3c3f0f911024310b3a3f88a8058350",
          "md5": "b7e22897c398b5d1ace21488a45cfaeb",
          "sha256": "c8f2de610e09b42cc01801d2f20c27185378a13327af95bb565c78d0bb23bcc6"
        },
        "downloads": -1,
        "filename": "country_database-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7e22897c398b5d1ace21488a45cfaeb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17071,
        "upload_time": "2022-10-13T13:01:29",
        "upload_time_iso_8601": "2022-10-13T13:01:29.871166Z",
        "url": "https://files.pythonhosted.org/packages/bb/ff/f9f3ddd58367796fbb5576f818825d3c3f0f911024310b3a3f88a8058350/country_database-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cb74a6c17c8d3dac2df6d7c525b465eb19d88c95266fd46d67c41e9e2039b1d",
          "md5": "2b7e58be52c7d2e7679349dce0b6e57b",
          "sha256": "1870d60a31c02999478dde76cc385145d4dd563c866bc10fc3aaf31d1064cf68"
        },
        "downloads": -1,
        "filename": "country-database-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b7e58be52c7d2e7679349dce0b6e57b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17005,
        "upload_time": "2022-10-13T13:01:31",
        "upload_time_iso_8601": "2022-10-13T13:01:31.867767Z",
        "url": "https://files.pythonhosted.org/packages/2c/b7/4a6c17c8d3dac2df6d7c525b465eb19d88c95266fd46d67c41e9e2039b1d/country-database-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbfff9f3ddd58367796fbb5576f818825d3c3f0f911024310b3a3f88a8058350",
        "md5": "b7e22897c398b5d1ace21488a45cfaeb",
        "sha256": "c8f2de610e09b42cc01801d2f20c27185378a13327af95bb565c78d0bb23bcc6"
      },
      "downloads": -1,
      "filename": "country_database-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7e22897c398b5d1ace21488a45cfaeb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17071,
      "upload_time": "2022-10-13T13:01:29",
      "upload_time_iso_8601": "2022-10-13T13:01:29.871166Z",
      "url": "https://files.pythonhosted.org/packages/bb/ff/f9f3ddd58367796fbb5576f818825d3c3f0f911024310b3a3f88a8058350/country_database-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cb74a6c17c8d3dac2df6d7c525b465eb19d88c95266fd46d67c41e9e2039b1d",
        "md5": "2b7e58be52c7d2e7679349dce0b6e57b",
        "sha256": "1870d60a31c02999478dde76cc385145d4dd563c866bc10fc3aaf31d1064cf68"
      },
      "downloads": -1,
      "filename": "country-database-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2b7e58be52c7d2e7679349dce0b6e57b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17005,
      "upload_time": "2022-10-13T13:01:31",
      "upload_time_iso_8601": "2022-10-13T13:01:31.867767Z",
      "url": "https://files.pythonhosted.org/packages/2c/b7/4a6c17c8d3dac2df6d7c525b465eb19d88c95266fd46d67c41e9e2039b1d/country-database-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}