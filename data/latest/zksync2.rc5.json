{
  "info": {
    "author": "Viktor Yastrebov",
    "author_email": "Viktor Yastrebov <vyastrebov@vareger.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# zkSync2 client sdk\n\n## Contents\n- [Getting started](#getting-started)\n- [Provider](#provider-zksyncbuilder)\n- [Account](#account)\n- [Signer](#signer)\n- [Transactions](#transactions)\n- [Contract interfaces](#contract-interfaces)\n- [Examples](#examples)\n\n\n### Getting started\n\n#### Requirements\n| Tool            | Required |\n|-----------------|----------|\n| python          | >= 3.10  |\n| package manager | pip      |\n\n### how to install\n\n```console\npip install zksync2\n```\n\n\n### Provider (zkSyncBuilder)\n\n\n#### Design\nZkSync 2.0 is designed with the same styling as web3.<br>\nIt defines the zksync module based on Ethereum and extends it with zkSync-specific methods.<br>\n\n\n#### How to construct\nFor usage, there is `ZkSyncBuilder` that returns a Web3 object with an instance of zksync module.<br>\nConstruction only needs the URL to the zkSync blockchain.\n\nExample:\n```python\nfrom zksync2.module.module_builder import ZkSyncBuilder\n...\nweb3 = ZkSyncBuilder.build(\"ZKSYNC_NET_URL\")\n```\n\n#### Module parameters and methods\n\nZkSync module attributes:\n\n| Attribute | Description                                                     |\n|-----------|-----------------------------------------------------------------|\n| chain_id  | Returns an integer value for the currently configured \"ChainId\" |\n| gas_price | Returns the current gas price in Wei                            |\n\n\nZkSync module methods:\n\n| Method                       | Parameters                              | Return value             | Description                                                                                                                                             |\n|------------------------------|-----------------------------------------|--------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| zks_estimate_fee             | zkSync Transaction                      | Fee structure            | Gets Fee for ZkSync transaction                                                                                                                         |\n| zks_main_contract            | -                                       | Address of main contract | Return address of main contract                                                                                                                         |\n| zks_get_confirmed_tokens     | from, limit                             | List[Token]              | Returns all tokens in the set range by global index                                                                                                     |\n| zks_l1_chain_id              | -                                       | ChainID                  | Return ethereum chain ID                                                                                                                                |\n| zks_get_all_account_balances | Address                                 | Dict[str, int]           | Return dictionary of token address and its value                                                                                                        |\n| zks_get_bridge_contracts     | -                                       | BridgeAddresses          | Returns addresses of all bridge contracts that are interacting with L1 layer                                                                            |\n| eth_estimate_gas             | Transaction                             | estimated gas            | Overloaded method of eth_estimate_gas for ZkSync transaction gas estimation                                                                             |\n| wait_for_transaction_receipt | Tx Hash, optional timeout,poll_latency  | TxReceipt                | Waits for the transaction to be included into block by its hash and returns its receipt. Optional arguments are `timeout` and `poll_latency` in seconds |\n| wait_finalized               | Tx Hash, optional timeout, poll_latency | TxReceipt                | Waits for the transaction to be finalized when finalized block occurs and it's number >= Tx block number                                                |\n\n\n### Account\n\nAccount encapsulate private key and, frequently based on it, the unique user identifier in the network.<br> This unique identifier also mean by wallet address.\n\n#### Account construction\n\nZkSync2 Python SDK account is compatible with `eth_account` package\nIn most cases user has its private key and gets account instance by using it.\n\nExample:\n```python\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\n...\naccount: LocalAccount = Account.from_key(\"PRIVATE_KEY\")\n\n```\n\nThe base property that is used directly of account is: `Account.address`\n\n\n### Signer\n\nSigner is used to generate signature of provided transaction based on your account(your private key)<br>\nThis signature is added to the final EIP712 transaction for its validation\n\n\n#### Singer construction\n\nzkSync2 already has implementation of signer. For constructing the instance it needs only account and chain_id\n\nExample:\n\n```python\nfrom zksync2.signer.eth_signer import PrivateKeyEthSigner\nfrom eth_account import Account\nfrom zksync2.module.module_builder import ZkSyncBuilder\n\n\naccount = Account.from_key(\"PRIVATE_KEY\")\nzksync_web3 = ZkSyncBuilder.build(\"ZKSYNC_NETWORK_URL\")\n...\nchain_id = zksync_web3.zksync.chain_id\nsigner = PrivateKeyEthSigner(account, chain_id)\n```\n\n\n#### Methods\n\n\nSigner has a few methods to generate signature and verify message\n\n| Method            | Parameters                                   | Return value          | Description                                                               |\n|-------------------|----------------------------------------------|-----------------------|---------------------------------------------------------------------------|\n| sign_typed_data   | EIP712 Structure, optional domain            | Web3 py SignedMessage | Builds `SignedMessage` based on the encoded in EIP712 format Transaction  |\n| verify_typed_data | signature, EIP712 structure, optional domain | bool                  | return True if this encoded transaction is signed with provided signature |\n\nSigner class also has the following properties:\n\n| Attribute | Description                                                                    |\n|-----------|--------------------------------------------------------------------------------|\n| address   | Account address                                                                |\n| domain    | domain that is used to generate signature. It's depends on chain_id of network |\n\n\n\n### Transactions\n\nBasic type of ZkSync transaction is quite similar to the Web3 based one<br>\nIt's defined in the package: zksync2.module.request_type<br>\n\nBut for sending and signed transaction it's necessary to sign and encode it in EIP712 structure<br>\nEIP712 transaction type can be found in package: zksync2.transaction.transaction712\nThere are transaction builders in assistance for<br>\nconvert ordinary transaction to EIP712 :\n\n* TxFunctionCall\n* TxCreateContract\n* TxCreate2Contract\n* TxWithdraw\n\nUsage will be described in the examples [section][#Examples]\n\n\n### Contract interfaces\n\nThere is a set of system contract that helps execute and interact with ZkSync2 network<br>\nFor user needs there are the following contracts:\n\n* ZkSyncContract\n* L1Bridge\n* L2Bridge\n* NonceHolder\n* ERC20Encoder\n* PrecomputeContractDeployer\n* ContractEncoder\n* PaymasterFlowEncoder\n\n\n\n### ZkSyncContract\n\nZkSyncContract is the implementation of ZkSync main contract functionality.<br>\nIt's deployed on the L1 network and used like a bridge for providing functionality between L1 and L2<br>\nFor instance, it handles things relate to the withdrawal operation\n\nTo construct object it needs contract main address, L1 Web3 instance and L1 account<br>\nExample:\n\n```python\n\nfrom web3 import Web3\nfrom zksync2.manage_contracts.zksync_contract import ZkSyncContract\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\n\nzksync = ZkSyncBuilder.build('URL_TO_ZKSYNC_NETWORK')\neth_web3 = Web3(Web3.HTTPProvider('URL_TO_ETH_NETWORK'))\naccount: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\nzksync_contract = ZkSyncContract(zksync.zksync.zks_main_contract(),\n                                      eth_web3,\n                                      account)\n```\n\n\n#### NonceHolder\n\n`NonceHolder` contract is handling the deployment nonce <br>\nIt's useful to precompute address for contract that is going to be deployer in the network.<br>\nTo construct it there are need only `account` and `Web3` object with integrated zksync module\n\n```python\nfrom zksync2.manage_contracts.nonce_holder import NonceHolder\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom zksync2.module.module_builder import ZkSyncBuilder\n\nzksync_web3 = ZkSyncBuilder.build(\"ZKSYNC_NETWORK_URL\")\naccount: LocalAccount = Account.from_key(\"PRIVATE_KEY\")\nnonce_holder = NonceHolder(zksync_web3, account)\n```\n\n\nMethods:\n\n| Method                     | Parameters | Return value | Description                                                      |\n|----------------------------|------------|--------------|------------------------------------------------------------------|\n| get_account_nonce          | -          | Nonce        | returns account nonce                                            |\n| get_deployment_nonce       | -          | Nonce        | return current deployment nonce that is going to be used         |\n| increment_deployment_nonce | Address    | Nothing      | Manually increments deployment nonce by provided account address | \n\n\n#### ERC20Encoder\n\nThis is the helper for encoding ERC20 methods. It's used for transfer non-native tokens<br>\n\nConstruction needs only Web3 object with appended zksync module(ZkSyncBuilder)\n\nIt has only 1 single method: `encode_method` with arguments of function name, and it's args\nUsage example you may find in [section](#examples) `Transfer funds (ERC20 tokens)`   \n\n\n#### PrecomputeContractDeployer\n\nPrecomputeContractDeployer is utility contract represented as type to cover the following functionality:\n\n* encode binary contract representation by `create` method for further deploying\n* encode binary contract representation by `create2` method for further deploying\n* Precompute contract address for `create` and `create2` methods\n\nConstruction: needs only web3 object with appended zksync module\n\n\nExample:\n\n```python\nfrom zksync2.manage_contracts.precompute_contract_deployer import PrecomputeContractDeployer\nfrom zksync2.module.module_builder import ZkSyncBuilder\n\nzksync_web3 = ZkSyncBuilder.build(\"ZKSYNC_NETWORK_URL\")\ndeployer = PrecomputeContractDeployer(zksync_web3)\n```\n\nThe most functionality is hidden in the function builder helper types. See transaction [section](#transactions)  \n\nMethods:\n\n| Method                     | Parameters                              | Return value | Description                                                                                                                                                                                                                                          |\n|----------------------------|-----------------------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| encode_create              | bytecode, optional `call_data` & `salt` | HexStr       | create binary representation of contract in internal deploying format.<br/> bytecode - contract binary representation, call_data is used for ctor bytecode only, salt is used to generate unique identifier of deploying contract                    |\n| encode_create2             | bytecode, optional `call_data` & `salt` | HexStr       | create binary representation of contract in internal deploying format.<br/> bytecode - contract binary representation, call_data is used for ctor bytecode only, salt is used to generate unique identifier of deploying contract                    |\n | compute_l2_create_address  | Address, Nonce                          | Address      | Accepts address of deployer and current deploying nonce and returns address of contract that is going to be deployed by `encode_create` method                                                                                                       |\n| compute_l2_create2_address | Address, bytecode, ctor bytecode, salt  | Address      | Accepts address of deployer, binary representation of contract, if needed it's constructor in binary format and self. By default constructor can be b'0' value. Returns address of contract that is going to be deployed by  `encode_create2` method |\n\n\n### ContractEncoder\n\nThis is type that helps with encoding contract methods and constructor <br>\nthat are used as the data for transaction building\n\nExample of construction:\n\n```python\nfrom pathlib import Path\nfrom zksync2.manage_contracts.contract_encoder_base import ContractEncoder\nfrom zksync2.module.module_builder import ZkSyncBuilder\n\nzksync_web3 = ZkSyncBuilder.build('ZKSYNC_TEST_URL')\ncounter_contract = ContractEncoder.from_json(zksync_web3, Path(\"./Counter.json\"))\n```\n\n\nMethods:\n\n| Method             | Parameters                        | Return value | Description                                                                  |\n|--------------------|-----------------------------------|--------------|------------------------------------------------------------------------------|\n| encode_method      | function name, function arguments | HexStr       | encode contract function method with it's arguments in binary representation |\n| encode_constructor | constructor arguments             | bytes        | encode constructor with arguments in binary representation                   |\n\n\n\n#### PaymasterFlowEncoder\n\nPaymasterFlowEncoder is utility contract for encoding Paymaster parameters.<br>\nConstruction contract needs only Web3 Module object. It can be Eth or ZkSync.<br>\n\nExample:\n```python\nfrom zksync2.manage_contracts.paymaster_utils import PaymasterFlowEncoder\nfrom zksync2.module.module_builder import ZkSyncBuilder\n\nzksync_web3 = ZkSyncBuilder.build(\"ZKSYNC_NETWORK_URL\")\npaymaster_encoder = PaymasterFlowEncoder(zksync_web3)\n```\n\nThis utility contract has 2 methods wrapped directly to python:\n\n* encode_approval_based\n* encode_general\n\nFor example and usage, please have a look into example [section](#examples)\n\n\n### Examples\n\n* [deposit funds](./examples/01_deposit.py)\n* [check balance](./examples/12_misc.py)\n* [transfer](./examples/02_transfer.py)\n* [transfer erc20 tokens](./examples/03_transfer_erc20_token.py)\n* [withdraw funds](./examples/11_withdrawal.py)\n* [deploy contract, precompute address by create](./examples/04_deploy_create.py)\n* [deploy contract with constructor(create method)](./examples/05_deploy_create_with_ctor.py)\n* [deploy contract with dependent contract(create method)](./examples/06_deploy_create_with_deps.py)\n* [deploy contract, precompute address by create2](./examples/07_deploy_create2.py)\n* [deploy contract with dependency, precompute address by create2](./examples/08_deploy_create2_deps.py)\n* [execute contracts method](./examples/09_execute_contract.py)\n* [support legacy transaction for call/execute contracts methods](./examples/10_execute_legacy.py)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://zksync.io",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zksync2",
    "package_url": "https://pypi.org/project/zksync2/",
    "platform": null,
    "project_url": "https://pypi.org/project/zksync2/",
    "project_urls": {
      "Bug Tracker": "https://github.com/zksync-sdk/zksync2-python/issues",
      "Homepage": "https://github.com/zksync-sdk/zksync2-python"
    },
    "release_url": "https://pypi.org/project/zksync2/0.4.0/",
    "requires_dist": [
      "eip712-structs (==1.1.0)",
      "web3 (==6.0.0)",
      "mypy (>=0.8) ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "zkSync2 python client sdk",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17548677,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff3fe059bc470770a38df92cd2e947629ac9533e41e7a2d380ca17d2cee8d05a",
          "md5": "d8692be35db717d9fe6abed7de814561",
          "sha256": "f4285ff7feec0bb867ae56d2b83b6ea7e08e83dc29d7fb64d1855753d8a0fb67"
        },
        "downloads": -1,
        "filename": "zksync2-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8692be35db717d9fe6abed7de814561",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 35101,
        "upload_time": "2022-10-18T14:52:12",
        "upload_time_iso_8601": "2022-10-18T14:52:12.421685Z",
        "url": "https://files.pythonhosted.org/packages/ff/3f/e059bc470770a38df92cd2e947629ac9533e41e7a2d380ca17d2cee8d05a/zksync2-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8415c23b321a8468ef0512a7e7d81c22a8ddad9c5087a83a3c76a8a9094d94",
          "md5": "4687a20ea3b19ba7bc2aed631a342562",
          "sha256": "5182cdab830841f6f5c2821d315df2379c1ac06fcd30e21ce0daf20c968ef8a0"
        },
        "downloads": -1,
        "filename": "zksync2-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4687a20ea3b19ba7bc2aed631a342562",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 56504,
        "upload_time": "2022-10-18T14:52:14",
        "upload_time_iso_8601": "2022-10-18T14:52:14.581160Z",
        "url": "https://files.pythonhosted.org/packages/bb/84/15c23b321a8468ef0512a7e7d81c22a8ddad9c5087a83a3c76a8a9094d94/zksync2-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c18213dfc60f2c0c90935c10d3ac1d180d14629b5dc6f03b5b89288c95e239b",
          "md5": "717ca8df83186b3066fa59bef246bec2",
          "sha256": "7a1547661456cad55f46e2094706f77dd3c4e543a60d22f38622d963df37b581"
        },
        "downloads": -1,
        "filename": "zksync2-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "717ca8df83186b3066fa59bef246bec2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 35067,
        "upload_time": "2022-11-28T13:00:27",
        "upload_time_iso_8601": "2022-11-28T13:00:27.284721Z",
        "url": "https://files.pythonhosted.org/packages/3c/18/213dfc60f2c0c90935c10d3ac1d180d14629b5dc6f03b5b89288c95e239b/zksync2-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b662c0e19350f46278a8aafd1f8d993eb7b3f6f5bc9edf270848400b9e0ac2d",
          "md5": "5cca000b2dc1a7140bca4bf887113536",
          "sha256": "4f4d7298a72fcca68efc678bcebd53a5de4f88f3cd12f0980b9d42f70377082e"
        },
        "downloads": -1,
        "filename": "zksync2-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5cca000b2dc1a7140bca4bf887113536",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 57785,
        "upload_time": "2022-11-28T13:00:28",
        "upload_time_iso_8601": "2022-11-28T13:00:28.648100Z",
        "url": "https://files.pythonhosted.org/packages/2b/66/2c0e19350f46278a8aafd1f8d993eb7b3f6f5bc9edf270848400b9e0ac2d/zksync2-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9b7ae3f9262426b35c0acb7184972dac2cfa418a63bf2b31e791501671f003e",
          "md5": "c2948bae3eac7c3f57ab2209a02f99e0",
          "sha256": "55d6eb4cc9c6868a27eca95b7db140a45b93b22cd77fd8b75db886f39602c6d3"
        },
        "downloads": -1,
        "filename": "zksync2-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2948bae3eac7c3f57ab2209a02f99e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 37780,
        "upload_time": "2022-12-15T15:14:09",
        "upload_time_iso_8601": "2022-12-15T15:14:09.910979Z",
        "url": "https://files.pythonhosted.org/packages/c9/b7/ae3f9262426b35c0acb7184972dac2cfa418a63bf2b31e791501671f003e/zksync2-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21b9f21cc1e2a356c727b427612a3da80af481dd9b6b0651f0c7fc16d28ad95c",
          "md5": "b51e841eb072e166a513a7a5f8c4c4cd",
          "sha256": "367b455f2627ecea1ac8ac770229a0b76a553fcae8b421f4d6f561517a9a4ae3"
        },
        "downloads": -1,
        "filename": "zksync2-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b51e841eb072e166a513a7a5f8c4c4cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 63041,
        "upload_time": "2022-12-15T15:14:11",
        "upload_time_iso_8601": "2022-12-15T15:14:11.458317Z",
        "url": "https://files.pythonhosted.org/packages/21/b9/f21cc1e2a356c727b427612a3da80af481dd9b6b0651f0c7fc16d28ad95c/zksync2-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e953c8d54ba25f92a89c4e07702717c05f9877c750311911ed31b6bb1c2b216c",
          "md5": "6a4a5ec6322e2478d8bf4e4d4770b1c0",
          "sha256": "49ddbc770b65ce931c1e2bcaa32c2f8b2d5d3de36d3ecd827e438a7b640a6ae3"
        },
        "downloads": -1,
        "filename": "zksync2-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a4a5ec6322e2478d8bf4e4d4770b1c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 40345,
        "upload_time": "2023-01-11T22:23:10",
        "upload_time_iso_8601": "2023-01-11T22:23:10.021381Z",
        "url": "https://files.pythonhosted.org/packages/e9/53/c8d54ba25f92a89c4e07702717c05f9877c750311911ed31b6bb1c2b216c/zksync2-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1853f35615131a27c7617588c2707d10d36feabdf21553a530b7e487cc9694cc",
          "md5": "131581ef9700b1339528c4cd43f0ffcc",
          "sha256": "b61cf2e1155ab2ed64e7dffcfa32269a67957fcce327482517ed4c6cec96a53f"
        },
        "downloads": -1,
        "filename": "zksync2-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "131581ef9700b1339528c4cd43f0ffcc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 72343,
        "upload_time": "2023-01-11T22:23:11",
        "upload_time_iso_8601": "2023-01-11T22:23:11.696199Z",
        "url": "https://files.pythonhosted.org/packages/18/53/f35615131a27c7617588c2707d10d36feabdf21553a530b7e487cc9694cc/zksync2-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d94c36904d24d0cb65fa76c3c2042f2e8e633e66a2b06a793781113b122392e4",
          "md5": "f6a79b8b3af75ea1563b63361568a1da",
          "sha256": "a1c3be54643f5574e89f6f510b70286bd97a1b7693c4b76167d355aa17054388"
        },
        "downloads": -1,
        "filename": "zksync2-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6a79b8b3af75ea1563b63361568a1da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 41985,
        "upload_time": "2023-04-02T15:48:27",
        "upload_time_iso_8601": "2023-04-02T15:48:27.191894Z",
        "url": "https://files.pythonhosted.org/packages/d9/4c/36904d24d0cb65fa76c3c2042f2e8e633e66a2b06a793781113b122392e4/zksync2-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad1f7daa5ccf3424a19b6b89ccc1ed6e4c157cced4f271a8712ae00c491435aa",
          "md5": "c9b11187d9cec43ca85b82ef768a28df",
          "sha256": "0c61b006aad5606be5bd42b1cb78110c3624c7f7abe1f88e50b0f54d56ad1e4b"
        },
        "downloads": -1,
        "filename": "zksync2-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9b11187d9cec43ca85b82ef768a28df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 77347,
        "upload_time": "2023-04-02T15:48:29",
        "upload_time_iso_8601": "2023-04-02T15:48:29.098402Z",
        "url": "https://files.pythonhosted.org/packages/ad/1f/7daa5ccf3424a19b6b89ccc1ed6e4c157cced4f271a8712ae00c491435aa/zksync2-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d94c36904d24d0cb65fa76c3c2042f2e8e633e66a2b06a793781113b122392e4",
        "md5": "f6a79b8b3af75ea1563b63361568a1da",
        "sha256": "a1c3be54643f5574e89f6f510b70286bd97a1b7693c4b76167d355aa17054388"
      },
      "downloads": -1,
      "filename": "zksync2-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f6a79b8b3af75ea1563b63361568a1da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 41985,
      "upload_time": "2023-04-02T15:48:27",
      "upload_time_iso_8601": "2023-04-02T15:48:27.191894Z",
      "url": "https://files.pythonhosted.org/packages/d9/4c/36904d24d0cb65fa76c3c2042f2e8e633e66a2b06a793781113b122392e4/zksync2-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad1f7daa5ccf3424a19b6b89ccc1ed6e4c157cced4f271a8712ae00c491435aa",
        "md5": "c9b11187d9cec43ca85b82ef768a28df",
        "sha256": "0c61b006aad5606be5bd42b1cb78110c3624c7f7abe1f88e50b0f54d56ad1e4b"
      },
      "downloads": -1,
      "filename": "zksync2-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c9b11187d9cec43ca85b82ef768a28df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 77347,
      "upload_time": "2023-04-02T15:48:29",
      "upload_time_iso_8601": "2023-04-02T15:48:29.098402Z",
      "url": "https://files.pythonhosted.org/packages/ad/1f/7daa5ccf3424a19b6b89ccc1ed6e4c157cced4f271a8712ae00c491435aa/zksync2-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}