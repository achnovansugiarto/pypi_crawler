{
  "info": {
    "author": "Nicolas Chopin",
    "author_email": "nicolas.chopin@ensae.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# particles #\n\nSequential Monte Carlo in python. \n\n## Motivation ##\n\nThis package was developed to complement the following book:\n\n[An introduction to Sequential Monte Carlo](https://www.springer.com/gp/book/9783030478445)\n\nby Nicolas Chopin and Omiros Papaspiliopoulos. \n\n## Features ##\n\n* **particle filtering**: bootstrap filter, guided filter, APF.\n\n* **resampling**: multinomial, residual, stratified, systematic and SSP. \n\n* possibility to define **state-space models** using some (basic) form of \n  probabilistic programming; see below for an example. \n\n* **SQMC** (Sequential quasi Monte Carlo);  routines for computing the Hilbert curve, \n  and generating RQMC sequences. \n\n* **particle smoothing**: fixed-lag smoothing, on-line smoothing, FFBS (forward\n  filtering, backward sampling), two-filter smoothing (O(N) and O(N^2)\n  variants).  FFBS for SQMC is also implemented. \n\n* Exact filtering/smoothing algorithms: **Kalman** (for linear Gaussian models) \n  and **forward-backward recursions** (for finite hidden Markov models).\n\n* **Standard and waste-free SMC samplers**: SMC tempering, IBIS (a.k.a. data\n  tempering). SMC samplers for binary words (Sch√§fer and Chopin, 2014), with\n  application to **variable selection**.\n\n* Bayesian parameter inference for state-space models: **PMCMC** (PMMH, Particle Gibbs) \n  and **SMC^2**. \n\n* Basic support for **parallel computation** (i.e. running multiple SMC algorithms \n  on different CPU cores). \n\n* **Variance estimators** (Chan and Lai, 2013 ; Lee and Whiteley, 2018; Olsson\n  and Douc, 2019)\n\n* **nested sampling** (basic, experimental). \n\n## Example ##\n\nHere is how you may define a parametric state-space model: \n\n```python\nimport particles\nimport particles.state_space_models as ssm\nimport particles.distributions as dists\n\nclass ToySSM(ssm.StateSpaceModel):\n    def PX0(self):  # Distribution of X_0 \n        return dists.Normal()  # X_0 ~ N(0, 1)\n    def PX(self, t, xp):  # Distribution of X_t given X_{t-1}\n        return dists.Normal(loc=xp)  # X_t ~ N( X_{t-1}, 1)\n    def PY(self, t, xp, x):  # Distribution of Y_t given X_t (and X_{t-1}) \n        return dists.Normal(loc=x, scale=self.sigma)  # Y_t ~ N(X_t, sigma^2)\n```\n\nYou may now choose a particular model within this class, and simulate data from it:\n\n```python\nmy_model = ToySSM(sigma=0.2)\nx, y = my_model.simulate(200)  # sample size is 200\n```\n\nTo run a bootstrap particle filter for this model and data `y`, simply do:\n\n```python\nalg = particles.SMC(fk=ssm.Bootstrap(ssm=my_model, data=y), N=200)\nalg.run()\n```\n\nThat's it! Head to the\n[documentation](https://particles-sequential-monte-carlo-in-python.readthedocs.io/en/latest/) \nfor more examples, explanations, and installation instructions. \n\n## Who do I talk to? ##\n\nNicolas Chopin (nicolas.chopin@ensae.fr) is the main author, contributor, and \nperson to blame if things do not work as expected. \n\nBug reports, feature requests, questions, rants, etc are welcome, preferably \non the github page.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/nchopin/particles/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "particles",
    "package_url": "https://pypi.org/project/particles/",
    "platform": "any",
    "project_url": "https://pypi.org/project/particles/",
    "project_urls": {
      "Homepage": "http://github.com/nchopin/particles/"
    },
    "release_url": "https://pypi.org/project/particles/0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Sequential Monte Carlo in Python",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12168057,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "957025e7151d40908a464f6204d9416fb8c08a58b5ca81c78c6b18f8b1bc744f",
          "md5": "042d550c46fe81f3977fac8eaad78103",
          "sha256": "a43bb11501bd44264e48cb41f335abf3d5abb4341c9b414bb1d7ea6957ce5485"
        },
        "downloads": -1,
        "filename": "particles-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "042d550c46fe81f3977fac8eaad78103",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 81484,
        "upload_time": "2018-11-16T16:33:11",
        "upload_time_iso_8601": "2018-11-16T16:33:11.524958Z",
        "url": "https://files.pythonhosted.org/packages/95/70/25e7151d40908a464f6204d9416fb8c08a58b5ca81c78c6b18f8b1bc744f/particles-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab725aa72b8ff214382f04215ea55ae1dbf9ed4be62d4bb70600d418fbd29ffe",
          "md5": "82c02f91fd0224cd796e3dd7907fb43d",
          "sha256": "038076d5181ec6ea7f2a40a4bb05cd859fdcf8fb579bdc2eec6d42ee344ae987"
        },
        "downloads": -1,
        "filename": "particles-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "82c02f91fd0224cd796e3dd7907fb43d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 98396,
        "upload_time": "2021-01-27T10:58:58",
        "upload_time_iso_8601": "2021-01-27T10:58:58.439503Z",
        "url": "https://files.pythonhosted.org/packages/ab/72/5aa72b8ff214382f04215ea55ae1dbf9ed4be62d4bb70600d418fbd29ffe/particles-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44dcdb6b40dff8e9667e7e602493820e05cdb2902595c1c6cc18708d5f662032",
          "md5": "37225c4d2c28e2e5418c8465da6ee250",
          "sha256": "accd1a8ece63fd0b65b0dbae6d6d8304f8f4d0643d7dca6b27f1ae71a118a59c"
        },
        "downloads": -1,
        "filename": "particles-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "37225c4d2c28e2e5418c8465da6ee250",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76312,
        "upload_time": "2021-11-30T17:12:32",
        "upload_time_iso_8601": "2021-11-30T17:12:32.705153Z",
        "url": "https://files.pythonhosted.org/packages/44/dc/db6b40dff8e9667e7e602493820e05cdb2902595c1c6cc18708d5f662032/particles-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44dcdb6b40dff8e9667e7e602493820e05cdb2902595c1c6cc18708d5f662032",
        "md5": "37225c4d2c28e2e5418c8465da6ee250",
        "sha256": "accd1a8ece63fd0b65b0dbae6d6d8304f8f4d0643d7dca6b27f1ae71a118a59c"
      },
      "downloads": -1,
      "filename": "particles-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "37225c4d2c28e2e5418c8465da6ee250",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76312,
      "upload_time": "2021-11-30T17:12:32",
      "upload_time_iso_8601": "2021-11-30T17:12:32.705153Z",
      "url": "https://files.pythonhosted.org/packages/44/dc/db6b40dff8e9667e7e602493820e05cdb2902595c1c6cc18708d5f662032/particles-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}