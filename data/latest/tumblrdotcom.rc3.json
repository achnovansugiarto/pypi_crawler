{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Tumblr-Dot-Com\n\n> OwO What's this?! Nyaa!!1\n\nDid that big bad ewong mwsk make twittew apis cowst money :( why not come to\ntumbler?!\n\nThis is a quick and dirty tumblr API wrapper I have made to help with another\nproject I am working on. Currently, a WIP but still usable.\n\nIncludes support for polls.\n\n```text\n ______________________________________________________________ \n/ Note: Tumblr has patched much of the wacky poll behaviour.   \\\n| Those zany polls that double count votes or last 50 years    |\n| have sadly been zapped. Blasted from existence. Now, not to  |\n| equate this with the burning of Library of Alexandria or     |\n| anything but it definitely evokes some strong emotions. You  |\n| can't even have more than one poll per post anymore. Read    |\n| the changelog for details of how this has affected tumblr-   |\n| dot-com and the types of polls you can create. And remember, |\n| even if you're dusted, you may be gone. But out here in the  |\n\\ desert your shadow lives on without you.                     /\n -------------------------------------------------------------- \n        \\   ^__^\n         \\  (xx)\\_______\n            (__)\\       )\\/\\\n             U  ||----w |\n                ||     ||\n```\n\n## Install\n\n```\npip install tumblrdotcom\n```\n\n## Usage\n\nProvides a `tumblr.Tumblr` class. See https://www.tumblr.com/docs/en/api/v2 for\nAPI details relating to data formatting.\nAlso provides a `tumblr.Content` class to assist in generating text post\ncontent as well as utility functions in `tumblr.utils` to process poll data.\n\n### Example\n\n```python\nimport os\nfrom datetime import timedelta\nfrom pprint import pprint\n\nfrom tumblr import Content, Tumblr\n\ntumblr = Tumblr(\n    blog=\"pizza\",  # or 'pizza.tumblr.com'\n    client_key=os.getenv(\"CONSUMER_KEY\"),\n    client_secret=os.getenv(\"CONSUMER_SECRET\"),\n    oauth_key=os.getenv(\"OAUTH_TOKEN\"),\n    oauth_secret=os.getenv(\"OAUTH_SECRET\"),\n)\n\nresponse = tumblr.post(\n    content=(\n        Content()\n        .heading(\"Hello, World!\")\n        .text(\"Oh boy! Isn't it great to have a tumblr!\")\n        .row_of(\n            (\n                \"clown_left.jpg\",\n                \"image/jpeg\",\n                \"A photo clown holding their right thumb up towards the camera\"\n            ),\n            (\n                \"clown_right.jpg\",\n                \"image/jpeg\",\n                \"A photo clown holding their left thumb up towards the camera\"\n            )\n        )\n        .poll(\n            \"Don't you think so?\",\n            [\"Yes\", \"No\"],\n            expire_after=timedelta(days=1),\n        )\n    ),\n    tags=[\"pizza\", \"I can't even remember why they were deleted\"],\n)\n\npprint(response)\n```\n\n## API\n\n### `tumblr.Tumblr`\n\n```\ndef __init__(self,\n             blog: str,\n             client_key: str,\n             client_secret: str,\n             oauth_key: str,\n             oauth_secret: str) -> None\n```\n\nParams:\n\n- blog – The name of the blog (one you have auth for)\n- client_key – AKA Consumer Key\n- client_secret – AKA Consumer Secret\n- oauth_key – AKA Token\n- oauth_secret – AKA Token Secret\n\n#### Posting\n\n```\ndef post(self,\n         *,\n         content: Content],\n         tags: Iterable[str] = tuple(),\n         **kwargs) -> Mapping\n```\n\nParams:\n\n- content – A content object containing the post content\n- tags – an optional list of tags\n- **kwargs – any additional arguments to be passed as post data\n\nReturns a JSON encoded response or raises an HTTPError if the request fails\n\n#### Post Info\n\n```\ndef get_post(self,\n             post_id: str | int,\n             blog: str | None = None) -> Mapping\n```\n\nParams:\n\n- post_id – The ID of the post\n- blog – The blog for the post – defaults to the blog given to the tumblr object\n\nReturns a JSON encoded response or raises an HTTPError if the request fails\n\n#### Reblogging\n\n```\ndef reblog(self,\n           *,\n           from_id: str | int,\n           from_blog: str,\n           content: list[Mapping],\n           tags: Iterable[str] = tuple(),\n           to_blog: str) -> Mapping\n```\n\nParams:\n\n- from_id – The ID of the post to be reblogged from\n- from_blog – The blog of the post to be reblogged from (defaults to self.blog)\n- content – A list of content block type Mappings\n- tags – an optional list of tags\n- to_blog – The blog this will be posted to (defaults to self.blog)\n\nReturns a JSON encoded response or raises an HTTPError if the request fails\n\n#### Poll Results\n\n```\ndef poll_results(self,\n                 post_id: str | int,\n                 poll_id: str\n                 blog: str | None = None) -> Mapping[str, Any]\n```\n\nReturns a result that contains a mapping of poll answer client_ids to the votes\nfor that answer (under the key \"results\").\nUse the `utils.zip_poll_with_results` function to combine this with the poll\ndata.\nUse the `utils.get_polls_from_post` function to get the poll data (which\ncontains the poll ID) from a post.\n\nParams:\n\n- post_id – The post that contains the poll\n- poll_id – AKA the poll client_id\n- blog – The blog for the post – defaults to the blog given to the tumblr object\n\nReturns a JSON encoded response or raises an HTTPError if the request fails\n\n### `Content`\n\nSupports the creation of text post content with method chaining. Handles image\nfiles, layout, and content blocks.\n\nContains the following functions:\n\n- `poll`\n- `ordered_list`\n- `unordered_list`\n- `image`\n- `read_more`\n- `row_of`\n- `text`\n- `heading`\n- `subheading`\n- `cursive`\n- `quote`\n- `indented`\n- `chat`\n- `ordered_list_item`\n- `unordered_list_item`\n\nAll post types from `text` onward roughly translate to:\n\n```\ndef <text_subtype>(self, content: str, **kwargs) -> Self:\n    ...  # snip\n    data = {\n        \"type\": \"text\",\n        \"subtype\": \"<text_subtype>\",\n        \"text\": content,\n        **kwargs,\n    }\n    ...  # snip\n    return self\n```\n\nThe other block types will be explained below.\n\n#### `ordered_list`, and `unordered_list`\n\nEach takes varargs of strings and adds a list of `ordered_list_item`s\nor `unordered_list_item`s to the content respectively.\n\n#### `poll`\n\n```\ndef poll(self\n         question: str,\n         options: list[str],\n         *,\n         expire_after=timedelta(days=7)) -> Self:\n```\n\nAdds a poll content block to the content. This is not officially documented so\nmay be unstable.\n\nParams:\n\n- question – The Poll prompt\n- options – The poll options\n- expire_after – a time delta of when the poll will close (is clamped between 1\n  and 7 days serverside)\n\n#### `read_more`\n\nInserts a truncating \"read more\" block into the post.\n\n#### `image`\n\n```\ndef image(self,\n          path: PurePath | str,\n          img_type: str,\n          alt_text: str,\n          caption: str | None = None) -> Self\n```\n\nInserts an image into the text post. The image type is the images corresponding\nMIME type.\n\n#### `row_of`\n\nTakes varargs of image data. image data can either be a mapping of image param\nnames to values, or an iterable of the image params.\n\n### `tumblr.utils`\n\n#### Poll Info\n\n```\ndef get_polls_from_post(post_id: Any) -> Iterator[Mapping[str, Any]]\n```\n\nParams:\n\n- post_id – The post that contains the poll\n\nReturns an iterator of the poll block mappings contained in the post\n\nThis function returns an iterator as, try as tumblr might, it seems multiple\npolls can be added to posts.\n\n#### Zip Polls with Poll Results\n\n```\ndef zip_poll_with_results(poll: Mapping[str, Any],\n                          results: Mapping[str, Any]) -> Mapping[str, Any]\n```\n\nUtility function that combines poll data with the poll results.\nReturns a new mapping with a \"total_votes\" key mapping to the total number of\nvotes and each poll answer has a \"votes\" key mapping to the number of votes for\nthat answer.\n\nParams:\n\n- poll – the poll block data\n- results – the result data (either the response or response data)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Tumblr,API",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tumblrdotcom",
    "package_url": "https://pypi.org/project/tumblrdotcom/",
    "platform": null,
    "project_url": "https://pypi.org/project/tumblrdotcom/",
    "project_urls": {
      "repository": "https://github.com/James-Ansley/tumblr-dot-com"
    },
    "release_url": "https://pypi.org/project/tumblrdotcom/0.1.1/",
    "requires_dist": [
      "requests (~=2.28.2)",
      "requests-oauthlib (==1.3.1)"
    ],
    "requires_python": ">=3.11",
    "summary": "Nyaa!! OwO what's this? *glomps you*",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17076809,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06dfa97aded1fa7b6763c186f7e3bbf33f55143b24f295d4bb5e610b5642dcf1",
          "md5": "1ba3e8969e16f8531ff90b044f292cc1",
          "sha256": "d9435a8942d57218af3fee6d60df481d1b5a2a846d362fc049330b3f19b9377a"
        },
        "downloads": -1,
        "filename": "tumblrdotcom-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ba3e8969e16f8531ff90b044f292cc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 10098,
        "upload_time": "2023-02-15T05:34:10",
        "upload_time_iso_8601": "2023-02-15T05:34:10.426477Z",
        "url": "https://files.pythonhosted.org/packages/06/df/a97aded1fa7b6763c186f7e3bbf33f55143b24f295d4bb5e610b5642dcf1/tumblrdotcom-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db3a9f1fe0c4e1de2ec73c8dc2e288e92ab79719832c5a80ff1914ac2f820aee",
          "md5": "bb5ccc1edd700f8c5b16adff170a8d21",
          "sha256": "bc4e6834b4b6fb4b62fec02379d1fe45fdb1a5d6b7f6c347ab736ff4543368c0"
        },
        "downloads": -1,
        "filename": "tumblrdotcom-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb5ccc1edd700f8c5b16adff170a8d21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 11045,
        "upload_time": "2023-02-15T05:34:12",
        "upload_time_iso_8601": "2023-02-15T05:34:12.481170Z",
        "url": "https://files.pythonhosted.org/packages/db/3a/9f1fe0c4e1de2ec73c8dc2e288e92ab79719832c5a80ff1914ac2f820aee/tumblrdotcom-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8da6448c99d9b1b59f25828b1451245a48d91791397b1abf029c189954cef201",
          "md5": "16f5c4b5985333fd735f66fd57b5dfb4",
          "sha256": "85f766993ee9933f5bec26c23876289f20ae62bda5f5a27f084b258cd116ee67"
        },
        "downloads": -1,
        "filename": "tumblrdotcom-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16f5c4b5985333fd735f66fd57b5dfb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 9686,
        "upload_time": "2023-02-25T22:42:27",
        "upload_time_iso_8601": "2023-02-25T22:42:27.400187Z",
        "url": "https://files.pythonhosted.org/packages/8d/a6/448c99d9b1b59f25828b1451245a48d91791397b1abf029c189954cef201/tumblrdotcom-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0701a8de4e9b46bb8ad90c9e9ad47d4a9620b509e766fe6d9340dcd3f8c0db8",
          "md5": "d40d25d61dc111ca6c048ade9b8a458f",
          "sha256": "181afb4627a461b8c5412b210ba40ca365bcbae1f331a15e322fb4e5a86c02e5"
        },
        "downloads": -1,
        "filename": "tumblrdotcom-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d40d25d61dc111ca6c048ade9b8a458f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 10941,
        "upload_time": "2023-02-25T22:42:31",
        "upload_time_iso_8601": "2023-02-25T22:42:31.088062Z",
        "url": "https://files.pythonhosted.org/packages/d0/70/1a8de4e9b46bb8ad90c9e9ad47d4a9620b509e766fe6d9340dcd3f8c0db8/tumblrdotcom-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dee3b502578c519f33bc40db84ba351b03a41dc0c69c6ab5dbeaa36ffbf001f",
          "md5": "710d3ff689255a475db64b3f1188153f",
          "sha256": "a8fea74ac636aeaa0f5aeba7dc1678b62bd9a5e2c8dcd3fb9dc017792a11d6ec"
        },
        "downloads": -1,
        "filename": "tumblrdotcom-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "710d3ff689255a475db64b3f1188153f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 9738,
        "upload_time": "2023-02-28T02:58:52",
        "upload_time_iso_8601": "2023-02-28T02:58:52.860007Z",
        "url": "https://files.pythonhosted.org/packages/0d/ee/3b502578c519f33bc40db84ba351b03a41dc0c69c6ab5dbeaa36ffbf001f/tumblrdotcom-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b26ab99acfe3df3ee257a4b340695d52556327545e9bd16d736d8d7beac5d263",
          "md5": "05913de982ceffd4c4765ac89d13efda",
          "sha256": "f6f9ef3184f5688a0e7f821b34f3c5f155fa48af16b431cd2c5ecd0a1b8bf432"
        },
        "downloads": -1,
        "filename": "tumblrdotcom-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "05913de982ceffd4c4765ac89d13efda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 11008,
        "upload_time": "2023-02-28T02:58:54",
        "upload_time_iso_8601": "2023-02-28T02:58:54.896432Z",
        "url": "https://files.pythonhosted.org/packages/b2/6a/b99acfe3df3ee257a4b340695d52556327545e9bd16d736d8d7beac5d263/tumblrdotcom-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0dee3b502578c519f33bc40db84ba351b03a41dc0c69c6ab5dbeaa36ffbf001f",
        "md5": "710d3ff689255a475db64b3f1188153f",
        "sha256": "a8fea74ac636aeaa0f5aeba7dc1678b62bd9a5e2c8dcd3fb9dc017792a11d6ec"
      },
      "downloads": -1,
      "filename": "tumblrdotcom-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "710d3ff689255a475db64b3f1188153f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11",
      "size": 9738,
      "upload_time": "2023-02-28T02:58:52",
      "upload_time_iso_8601": "2023-02-28T02:58:52.860007Z",
      "url": "https://files.pythonhosted.org/packages/0d/ee/3b502578c519f33bc40db84ba351b03a41dc0c69c6ab5dbeaa36ffbf001f/tumblrdotcom-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b26ab99acfe3df3ee257a4b340695d52556327545e9bd16d736d8d7beac5d263",
        "md5": "05913de982ceffd4c4765ac89d13efda",
        "sha256": "f6f9ef3184f5688a0e7f821b34f3c5f155fa48af16b431cd2c5ecd0a1b8bf432"
      },
      "downloads": -1,
      "filename": "tumblrdotcom-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "05913de982ceffd4c4765ac89d13efda",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11",
      "size": 11008,
      "upload_time": "2023-02-28T02:58:54",
      "upload_time_iso_8601": "2023-02-28T02:58:54.896432Z",
      "url": "https://files.pythonhosted.org/packages/b2/6a/b99acfe3df3ee257a4b340695d52556327545e9bd16d736d8d7beac5d263/tumblrdotcom-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}