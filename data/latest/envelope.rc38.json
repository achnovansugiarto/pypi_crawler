{
  "info": {
    "author": "Edvard Rejthar",
    "author_email": "edvard.rejthar@nic.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# Envelope\n\n[![Build Status](https://github.com/CZ-NIC/envelope/actions/workflows/run-unittest.yml/badge.svg)](https://github.com/CZ-NIC/envelope/actions) [![Downloads](https://pepy.tech/badge/envelope)](https://pepy.tech/project/envelope)\n\nQuick layer over [python-gnupg](https://bitbucket.org/vinay.sajip/python-gnupg/src), [M2Crypto](https://m2crypto.readthedocs.io/), [smtplib](https://docs.python.org/3/library/smtplib.html), [magic](https://pypi.org/project/python-magic/) and [email](https://docs.python.org/3/library/email.html?highlight=email#module-email) handling packages. Their common use cases merged into a single function. Want to sign a text and tired of forgetting how to do it right? You do not need to know everything about GPG or S/MIME, you do not have to bother with importing keys. Do not hassle with reconnecting to an SMTP server. Do not study various headers meanings to let your users unsubscribe via a URL.  \nYou insert a message, attachments and inline images and receive signed and/or encrypted output to the file or to your recipients' e-mail.  \nJust single line of code. With the great help of the examples below.  \n\n```python3\nEnvelope(\"my message\")\n    .subject(\"hello world\")\n    .to(\"example@example.com\")\n    .attach(file_contents, name=\"attached-file.txt\")\n    .smtp(\"localhost\", 587, \"user\", \"pass\", \"starttls\")\n    .signature()\n    .send()\n```\n\n```python3\n# Inline image\nEnvelope(\"My inline image: <img src='cid:image.jpg' />\")    \n    .attach(path=\"image.jpg\", inline=True)\n\n# Load a message and read its attachments \nEnvelope.load(path=\"message.eml\").attachments()\n# in bash: envelope --load message.eml --attachments\n```\n\n- [Installation](#installation)\n  * [Bash completion](#bash-completion)\n- [Usage](#usage)\n  * [CLI](#cli)\n  * [Module: one-liner function](#module-one-liner-function)\n  * [Module: fluent interface](#module-fluent-interface)\n- [Documentation](#documentation)\n  * [Command list](#command-list)\n      - [Any attainable contents](#any-attainable-contents)\n    + [Input / Output](#input--output)\n    + [Recipients](#recipients)\n    + [Sending](#sending)\n      - [Specific headers](#specific-headers)\n    + [Cipher standard method](#cipher-standard-method)\n    + [Signing](#signing)\n    + [Encrypting](#encrypting)\n    + [Supportive](#supportive)\n      - [Address](#address)\n    + [Experimental](#experimental)\n  * [Envelope object](#envelope-object)\n    + [Converting object to str or bool](#converting-object-to-str-or-bool)\n    + [Object equality](#object-equality)\n- [Examples](#examples)\n  * [Signing and encrypting](#signing-and-encrypting)\n  * [Sending](#sending-1)\n  * [Attachment](#attachment)\n  * [Inline images](#inline-images)\n  * [Complex example](#complex-example)\n- [Related affairs](#related-affairs)\n  * [Configure your SMTP](#configure-your-smtp)\n  * [Choose ciphering method](#choose-ciphering-method)\n    + [Configure your GPG](#configure-your-gpg)\n    + [Configure your S/MIME](#configure-your-smime)\n  * [DNS validation tools](#dns-validation-tools)\n    + [SPF](#spf)\n    + [DKIM](#dkim)\n    + [DMARC](#dmarc)\n\n\n# Installation\n* Install with a single command from [PyPi](https://pypi.org/project/envelope/)\n    ```bash \n    pip3 install envelope\n    ```\n\n    * Or install current GitHub master\n    ```bash\n    pip3 install git+https://github.com/CZ-NIC/envelope.git\n    ```\n    * Or just download the project and launch `python3 -m envelope`\n* If planning to sign/encrypt with GPG, assure you have it on the system with `sudo apt install gpg` and possibly see [Configure your GPG](#configure-your-gpg) tutorial.\n* If planning to use S/MIME, you should ensure some prerequisites: `sudo apt install swig && pip3 install M2Crypto`\n* If planning to send e-mails, prepare SMTP credentials or visit [Configure your SMTP](#configure-your-smtp) tutorial.\n* If your e-mails are to be received outside your local domain, visit [DMARC](#dmarc) section.\n* Package [python-magic](https://pypi.org/project/python-magic/) is used as a dependency. Due to a [well-known](https://github.com/ahupp/python-magic/blob/master/COMPAT.md) name clash with the [file-magic](https://pypi.org/project/file-magic/) package, in case you need to use the latter, don't worry to run `pip uninstall python-magic && pip install file-magic` after installing envelope which is fully compatible with both projects.   \n\n## Bash completion\n1. Run: `apt install bash-completion jq`\n2. Copy: [extra/envelope-autocompletion.bash](extra/envelope-autocompletion.bash) to `/etc/bash_completion.d/`\n3. Restart terminal\n\n# Usage\nAs an example, let's produce in three equal ways an `output_file` with the GPG-encrypted \"Hello world\" content.\n## CLI\nLaunch as a CLI application in terminal, see `envelope --help`\n  \n```bash\nenvelope --message \"Hello world\" \\\n               --output \"/tmp/output_file\" \\\n               --from \"me@example.com\" \\\n               --to \"remote_person@example.com\" \\\n               --encrypt-path \"/tmp/remote_key.asc\"\n```\n## Module: fluent interface\nComfortable way to create the structure if your IDE supports autocompletion.\n```python3\nfrom envelope import Envelope\nEnvelope().message(\"Hello world\")\\\n    .output(\"/tmp/output_file\")\\\n    .from_(\"me@example.com\")\\\n    .to(\"remote_person@example.com\")\\\n    .encrypt(key_path=\"/tmp/remote_key.asc\")\n```\n\n## Module: one-liner function\nYou can easily write a one-liner function that encrypts your code or sends an e-mail from within your application when imported as a module. See `pydoc3 envelope` or documentation below.\n\n```python3\nfrom envelope import Envelope\nEnvelope(message=\"Hello world\",\n        output=\"/tmp/output_file\",\n        from_=\"me@example.com\",\n        to=\"remote_person@example.com\",\n        encrypt=\"/tmp/remote_key.asc\")\n```\n\n# Documentation\n\nBoth `envelope --help` for CLI arguments help and `pydoc3 envelope` to see module arguments help should contain same information as here.\n\n## Command list\nAll parameters are optional. \n\n* **--param** is used in CLI\n* **.param(value)** denotes a positional argument\n* **.param(value=)** denotes a keyword argument\n* **Envelope(param=)** is a one-liner argument\n\n####  Any attainable contents\nWhenever any attainable contents is mentioned, we mean plain **text**, **bytes** or **stream** (ex: from `open()`). In *module interface*, you may use a **`Path`** object to the file. In *CLI interface*, additional flags are provided instead.         \n\n### Input / Output\n  * **message**: Message / body text.\n    If no string is set, message gets read. Besides, when \"Content-Transfer-Encoding\" is set to \"base64\" or \"quoted-printable\", it gets decoded (useful when quickly reading an EML file content `cat file.eml | envelope --message`).\n    * **--message**: String. Empty to read.\n    * **--input**: *(CLI only)* Path to the message file. (Alternative to the `--message` parameter.)\n    * **.message()**: Read current message in `str`.\n    * **.message(text)**: Set the message to [any attainable contents](#any-attainable-contents).\n    * **.message(path=None, alternative=\"auto\", boundary=None)**\n        * `path`: Path to the file.\n        * `alternative`: \"auto\", \"html\", \"plain\" You may specify e-mail text alternative. Some e-mail readers prefer to display plain text version over HTML. By default, we try to determine content type automatically (see *mime*).\n            ```python3\n            print(Envelope().message(\"He<b>llo</b>\").message(\"Hello\", alternative=\"plain\"))\n                   \n            # (output shortened)\n            # Content-Type: multipart/alternative;\n            #  boundary=\"===============0590677381100492396==\"\n            # \n            # --===============0590677381100492396==\n            # Content-Type: text/plain; charset=\"utf-8\"\n            # Hello\n            # \n            # --===============0590677381100492396==\n            # Content-Type: text/html; charset=\"utf-8\"\n            # He<b>llo</b>\n            ```\n        * *boundary*: When specifying alternative, you may set e-mail boundary if you do not wish a random one to be created.            \n    * **.body(path=None)**: Alias of `.message` (without `alternative` and `boundary` parameter)\n    * **.text(path=None)**: Alias of `.message` (without `alternative` and `boundary` parameter)\n    * **Envelope(message=)**: [Any attainable contents](#any-attainable-contents)\n    \n    Equivalents for setting a string (in *Python* and in *Bash*).\n    ```python3\n    Envelope(message=\"hello\") == Envelope().message(\"hello\")\n    ```\n    ```bash\n    envelope --message \"hello\"\n    ``` \n    Equivalents for setting contents of a file (in *Python* and in *Bash*).\n    ```python3\n    from pathlib import Path\n    Envelope(message=Path(\"file.txt\")) == Envelope(message=open(\"file.txt\")) == Envelope.message(path=\"file.txt\") \n    ```\n    ```bash\n    envelope --input file.txt\n    ```\n\n    Envelope is sometimes able to handle wrong encoding or tries to print out a meaningful warning.\n    ```python3\n    # Issue a warning when trying to represent a mal-encoded message.\n    b =\"â‚¬\".encode(\"cp1250\")  # converted to bytes b'\\x80'\n    e = Envelope(b)\n    repr(e)\n    # WARNING: Cannot decode the message correctly, plain alternative bytes are not in Unicode.\n    # Envelope(message=\"b'\\x80'\")\n    \n    # When trying to output a mal-encoded message, we end up with a ValueError exception.\n    e.message()\n    # ValueError: Cannot decode the message correctly, it is not in Unicode. b'\\x80'\n    \n    # Setting up an encoding (even ex-post) solves the issue.\n    e.header(\"Content-Type\", \"text/plain;charset=cp1250\")\n    e.message()  # 'â‚¬'\n    ```\n  * **output**: Path to file to be written to (else the contents is returned).\n    * **--output**\n    * **.output(output_file)**\n    * **Envelope(output=)**\n    \n### Recipients\n* **from**: E-mail â€“ needed to choose our key if encrypting.\n    * **--from** E-mail. Empty to read value.\n    * **--no-from** Declare we want to encrypt and never decrypt back.\n    * **.from_(email)**: E-mail | False | None. If None, current `From` returned as an [Address](#address) object (even an empty one).\n    * **Envelope(from_=)**: Sender e-mail or False to explicitly omit. When encrypting without sender, we do not use their key so that we will not be able to decipher again.\n    ```python3\n    # These statements are identical.\n    Envelope(from_=\"identity@example.com\")    \n    Envelope().from_(\"identity@example.com\")\n  \n    # This statement produces both From header and Sender header.\n    Envelope(from_=\"identity@example.com\", headers=[(\"Sender\", \"identity2@example.com\")])\n  \n    # reading an Address object\n    a = Envelope(from_=\"identity@example.com\").from_()\n    a == \"identity@example.com\", a.host == \"example.com\"\n    ```\n* **to**: E-mail or more in an iterable. When encrypting, we use keys of these identities. Multiple addresses may be given in a string, delimited by a comma (or semicolon). (The same is valid for `to`, `cc`, `bcc` and `reply-to`.)\n    * **--to**: One or more e-mail addresses. Empty to read.\n      ```bash\n      $ envelope --to first@example.com second@example.com --message \"hello\" \n      $ envelope --to\n      first@example.com\n      second@example.com\n      ```  \n    * **.to(email_or_more)**: If None, current list of [Addresses](#address) returned. If False or \"\", current list is cleared. \n    ```python3\n        Envelope()\n            .to(\"person1@example.com\")\n            .to(\"person1@example.com, John <person2@example.com>\")\n            .to([\"person3@example.com\"])\n            .to()  # [\"person1@example.com\", \"John <person2@example.com>\", \"person3@example.com\"] \n    ```\n    * **Envelope(to=)**: E-mail or more in an iterable.\n* **cc**: E-mail or more in an iterable. Multiple addresses may be given in a string, delimited by a comma (or semicolon). (The same is valid for `to`, `cc`, `bcc` and `reply-to`.)\n    * **--cc**: One or more e-mail addresses. Empty to read.\n    * **.cc(email_or_more)**: If None, current list of [Addresses](#address) returned. If False or \"\", current list is cleared.\n        ```python3\n        Envelope()\n            .cc(\"person1@example.com\")\n            .cc(\"person1@example.com, John <person2@example.com>\")\n            .cc([\"person3@example.com\"])\n            .cc()  # [\"person1@example.com\", \"John <person2@example.com>\", \"person3@example.com\"] \n        ```\n    * **Envelope(cc=)**\n* **bcc**: E-mail or more in an iterable. Multiple addresses may be given in a string, delimited by a comma (or semicolon). (The same is valid for `to`, `cc`, `bcc` and `reply-to`.) The header is not sent.\n    * **--bcc**: One or more e-mail addresses. Empty to read.\n    * **.bcc(email_or_more)**: If None, current list of [Addresses](#address) returned. If False or \"\", current list is cleared.\n    * **Envelope(bcc=)**\n* **reply-to**: E-mail or more in an iterable. Multiple addresses may be given in a string, delimited by a comma (or semicolon). (The same is valid for `to`, `cc`, `bcc` and `reply-to`.) The field is not encrypted.\n    * **--reply-to**: E-mail address or empty to read value.\n    * **.reply_to(email_or_more)**: If None, current list of [Addresses](#address) returned. If False or \"\", current list is cleared.\n    * **Envelope(reply_to=)**\n* **from_addr**: SMTP envelope MAIL FROM address.\n    * **--from-addr**: E-mail address or empty to read value.\n    * **.from_addr(email)**: E-mail or False. If None, current `SMTP envelope MAIL FROM` returned as an [Address](#address) object (even an empty one).\n    * **.Envelope(from_addr=)**\n    \n### Sending\n  * **send**: Send the message to the recipients by e-mail. True (blank in *CLI*) to send now or False to print out debug information.\n    * **--send**\n    * **.send(send=True, sign=None, encrypt=None)**\n        * *send*: True to send now. False (or 0/false/no in *CLI*) to print debug information.\n        * Returns the object back which converted to bool returns True if the message has been sent successfully.\n    * **Envelope(send=)**\n    \n    ```bash\n    $ envelope --to \"user@example.org\" --message \"Hello world\" --send 0\n    ****************************************************************************************************\n    Have not been sent from - to user@example.org\n    \n    Content-Type: text/html; charset=\"utf-8\"\n    Content-Transfer-Encoding: 7bit\n    MIME-Version: 1.0\n    Subject:\n    From:\n    To: user@example.org\n    Date: Mon, 07 Oct 2019 16:13:37 +0200\n    Message-ID: <157045761791.29779.5279828659897745855@...>\n    \n    Hello world\n    ```\n  * **subject**: Mail subject. Gets encrypted with GPG, stays visible with S/MIME.\n    * **--subject**\n    * **.subject(text=None, encrypt=None)**:\n        * `text` Subject text.\n        * `encrypt` Text used instead of the real protected subject while PGP encrypting. False to not encrypt.   \n        * If neither parameter specified, current subject returned.\n    * **Envelope(subject=)**\n    * **Envelope(subject_encrypted=)**\n  * **date**:\n    * **.date(date)** `str|False` Specify Date header (otherwise Date is added automatically). If False, the Date header will not be added automatically.\n  * **smtp**: SMTP server\n    * **--smtp**\n    * **.smtp(host=\"localhost\", port=25, user=, password=, security=, timeout=3, attempts=3, delay=3)**\n    * **Envelope(smtp=)**\n    * Parameters:\n        * `host` May include hostname or any of the following input formats (ex: path to an INI file or a `dict`)\n        * `security` If not set, automatically set to `starttls` for port *587* and to `tls` for port *465*\n        * `timeout` How many seconds should SMTP wait before timing out.\n        * `attempts` How many times we try to send the message to an SMTP server.\n        * `delay` How many seconds to sleep before re-trying a timed out connection.\n    * Input format may be in the following form:\n        * `None` default localhost server used\n        * `smtplib.SMTP` object\n        * `list` or `tuple` having `host, [port, [username, password, [security, [timeout, [attempts, [delay]]]]]]` parameters\n            * ex: `envelope --smtp localhost 125 me@example.com` will set up host, port and username parameters\n        * `dict` specifying {\"host\": ..., \"port\": ...}\n            * ex: `envelope --smtp '{\"host\": \"localhost\"}'` will set up host parameter\n        * `str` hostname or path to an INI file (existing file, ending at `.ini`, with the section [SMTP])\n            ```ini\n            [SMTP]\n            host = example.com\n            port = 587            \n            ```\n    * Do not fear to pass the `smtp` in a loop, we make just a single connection to the server. If timed out, we attempt to reconnect once.\n    ```python3\n    smtp = localhost, 25\n    for mail in mails:\n        Envelope(...).smtp(smtp).send()\n    ```\n  * **attachments**\n    * **--attach**: Path to the attachment, followed by optional file name to be used and/or mime type. This parameter may be used multiple times.\n    ```bash\n    envelope --attachment \"/tmp/file.txt\" \"displayed-name.txt\" \"text/plain\" --attachment \"/tmp/another-file.txt\"\n    ```\n    * **.attach(attachment=, mimetype=, name=, path=, inline=)**:\n        * Three different usages when specifying contents:\n            * **.attach(attachment=, mimetype=, name=)**: You can put [any attainable contents](#any-attainable-contents) of a single attachment into *attachment* and optionally add mime type or displayed file name.\n            * **.attach(mimetype=, name=, path=)**: You can specify path and optionally mime type or displayed file name.\n            * **.attach(attachment=)**: You can put a list of attachments. The list may contain tuples: `contents [,mime type] [,file name] [, True for inline]`.\n        ```python3\n        Envelope().attach(path=\"/tmp/file.txt\").attach(path=\"/tmp/another-file.txt\")\n        ```\n        * **.attach(inline=True|str)**: Specify content-id (CID) to reference the image from within HTML message body.\n           * True: Filename or attachment or path file name is set as CID.\n           * str: The attachment will get this CID.\n           ```python3                     \n           Envelope().attach(\"file.jpg\", inline=True) # <img src='cid:file.jpg' />\n           Envelope().attach(b\"GIF89a\\x03\\x00\\x03...\", name=\"file.gif\", inline=True) # <img src='cid:file.gif' />\n           Envelope().attach(\"file.jpg\", inline=\"foo\") # <img src='cid:foo' />\n          \n           # Reference it like: .message(\"Hey, this is an inline image: <img src='cid:foo' />\")\n          ```\n    \n    * **Envelope(attachments=)**: Attachment or their list. Attachment is defined by [any attainable contents](#any-attainable-contents), optionally in tuple with the file name to be used in the e-mail and/or mime type and/or True for being inline: `contents [,mime type] [,file name] [, True for inline]`\n    ```python3\n    Envelope(attachments=[(Path(\"/tmp/file.txt\"), \"displayed-name.txt\", \"text/plain\"), Path(\"/tmp/another-file.txt\")])\n    ```    \n    * **mime**: Sets contents mime subtype: \"**auto**\" (default), \"**html**\" or \"**plain**\" for plain text. \n        Maintype is always set to \"text\".                 \n        Set maintype to \"text\".  If a line is longer than 1000 characters, makes the message be transferred safely by bytes (otherwise these non-standard long lines might cause a transferring SMTP server to include line breaks and redundant spaces that might break up ex: DKIM signature).  \n        In case of `Content-Type` header put to the message, **mime** section functionality **is skipped**.\n        * **--mime SUBTYPE**\n        * **.mime(subtype=\"auto\", nl2br=\"auto\")**\n            * nl2br: True will append `<br>` to every line break in the HTML message. \"auto\": line breaks are changed only if there is no `<br` or `<p` in the HTML message,\n        * **Envelope(mime=)**\n    * **headers**: Any custom headers (these will not be encrypted with GPG nor S/MIME)\n        * **--header name value** (may be used multiple times)\n        * **.header(name, value=None, replace=False)**\n            * `value` If None, returns value of the header or its list if the header was used multiple times. (Note that To, Cc, Bcc and Reply-To headers always return list.)\n            * `replace` If True, any header of the `key` name are removed first and if `val` is None, the header is deleted. Otherwise another header of the same name is appended.\n            ```python3\n            Envelope().header(\"X-Mailer\", \"my-app\").header(\"X-Mailer\") # \"my-app\"\n            Envelope().header(\"Generic-Header\", \"1\") \\\n                      .header(\"Generic-Header\", \"2\") \\\n                      .header(\"Generic-Header\") # [\"1\", \"2\"]\n            ```\n        * **Envelope(headers=[(name, value)])**\n        \n        Equivalent headers: \n        ```bash\n        envelope --header X-Mailer my-app\n        ```\n        \n        ```python3\n        Envelope(headers=[(\"X-Mailer\", \"my-app\")])\n        Envelope().header(\"X-Mailer\", \"my-app\")\n        ```                \n#### Specific headers\nThese helpers are available via fluent interface.\n    \n* **.list_unsubscribe(uri=None, one_click=False, web=None, email=None)**: You can specify either url, email or both.\n    * **.list_unsubscribe(uri)**: We try to determine whether this is e-mail and prepend brackets and 'https:'/'mailto:' if needed. Ex: `me@example.com?subject=unsubscribe`, `example.com/unsubscribe`, `<https://example.com/unsubscribe>`\n    * **.list_unsubscribe(email=)**: E-mail address. Ex: `me@example.com`, `mailto:me@example.com`\n    * **.list_unsubscribe(web=, one_click=False)**: Specify URL. Ex: `example.com/unsubscribe`, `http://example.com/unsubscribe`. If `one_click=True`, rfc8058 List-Unsubscribe-Post header is added. This says user can unsubscribe with a single click that is realized by a POST request in order to prevent e-mail scanner to access the unsubscribe page by mistake. A 'https' url must be present.\n\n    ```python3\n    # These will produce:\n    # List-Unsubscribe: <https://example.com/unsubscribe>\n    Envelope().list_unsubscribe(\"example.com/unsubscribe\")\n    Envelope().list_unsubscribe(web=\"example.com/unsubscribe\")\n    Envelope().list_unsubscribe(\"<https://example.com/unsubscribe>\")\n    \n    # This will produce:\n    # List-Unsubscribe: <https://example.com/unsubscribe>, <mailto:me@example.com?subject=unsubscribe>\n    Envelope().list_unsubscribe(\"example.com/unsubscribe\", mail=\"me@example.com?subject=unsubscribe\")\n    ```    \n    \n* **.auto_submitted**: \n    * **.auto_submitted(val=\"auto-replied\")**: Direct response to another message by an automatic process. \n    * **.auto_submitted.auto_generated()**: automatic (often periodic) processes (such as UNIX \"cron jobs\") which are not direct responses to other messages\n    * **.auto_submitted.no()**: message was originated by a human\n\n```python3\nEnvelope().auto_submitted()  # mark message as automatic        \nEnvelope().auto_submitted.no()  # mark message as human produced\n```    \n\n### Cipher standard method\nNote that if neither *gpg* nor *smime* is specified, we try to determine the method automatically.\n  * **gpg**: True to prefer GPG over S/MIME or home path to GNUPG rings (otherwise default ~/.gnupg is used)\n    * **--gpg [path]**\n    * **.gpg(gnugp_home=True)**\n    * **Envelope(gpg=True)**\n  * **.smime**: Prefer S/MIME over GPG\n    * **--smime**\n    * **.smime()**\n    * **Envelope(smime=True)**\n### Signing\n  * **sign**: Sign the message.\n    * **`key`** parameter\n        * GPG: \n            * Blank (*CLI*) or True (*module*) for user default key\n            * \"auto\" for turning on signing if there is a key matching to the \"from\" header\n            * key ID/fingerprint\n            * e-mail address of the identity whose key is to be signed with\n            * [Any attainable contents](#any-attainable-contents) with the key to be signed with (will be imported into keyring)\n        * S/MIME: [Any attainable contents](#any-attainable-contents) with key to be signed with. May contain signing certificate as well.            \n    * **--sign key**: (for `key` see above)\n    * **--sign-path**: Filename with the From\\'s private key. (Alternative to the `sign` parameter.)\n    * **--passphrase**: Passphrase to the key if needed.\n    * **--attach-key**: GPG: Blank for appending public key to the attachments when sending.\n    * **--cert**: S/MIME: Certificate contents if not included in the key.\n    * **--cert-path**: S/MIME: Filename with the From's private cert if cert not included in the key. (Alternative to the `cert` parameter.)\n    * **.sign(key=True, passphrase=, attach_key=False, cert=None, key_path=None)**: Sign now (and you may specify the parameters). (For `key` see above.)\n    * **.signature(key=True, passphrase=, attach_key=False, cert=None, key_path=None)**: Sign later (when launched with *.sign()*, *.encrypt()* or *.send()* functions\n    * **Envelope(sign=key)**: (for `key` see above)\n    * **Envelope(passphrase=)**: Passphrase to the signing key if needed.\n    * **Envelope(attach_key=)**: If true, append GPG public key as an attachment when sending.\n    * **Envelope(cert=)**: S/MIME: [Any attainable contents](#any-attainable-contents)\n### Encrypting\n  * **encrypt**:  Recipient GPG public key or S/MIME certificate to be encrypted with. \n    * **`key`** parameter\n        * GPG:\n            * Blank (*CLI*) or True (*module*) to force encrypt with the user default keys (identities in the \"from\", \"to\", \"cc\" and \"bcc\" headers) \n            * \"auto\" for turning on encrypting if there is a matching key for every recipient\n            * key ID/fingerprint\n            * e-mail address of the identity whose key is to be encrypted with\n            * [Any attainable contents](#any-attainable-contents) with the key to be encrypted with (will be imported into keyring)\n            * an iterable with the identities specified by key ID / fingerprint / e-mail address / raw key data\n        * S/MIME [any attainable contents](#any-attainable-contents) with a certificate to be encrypted with or more in an iterable\n    * **--encrypt [key]**: (for `key` see above) Put 0/false/no to disable `encrypt-path`.\n    * **--encrypt-path** *(CLI only)*: Filename(s) with the recipient\\'s public key(s). (Alternative to the `encrypt` parameter.)\n    * **.encrypt(key=True, sign=, key_path=)**:\n        * **`sign`** See signing, ex: you may specify boolean or default signing key ID/fingerprint or \"auto\" for GPG or [any attainable contents](#any-attainable-contents) with an S/MIME key + signing certificate.\n        * **`key_path`**: Key/certificate contents (alternative to the `key` parameter)\n    * **.encryption(key=True, key_path=)**: Encrypt later (when launched with *.sign()*, *.encrypt()* or *.send()* functions. If needed, in the parameters specify [any attainable contents](#any-attainable-contents) with GPG encryption key or S/MIME encryption certificate. \n    * **Envelope(encrypt=key)**: (for `key` see above)\n    ```bash\n    # message gets encrypted for multiple S/MIME certificates\n    envelope --smime --encrypt-path recipient1.pem recipient2.pem --message \"Hello\"\n    \n    # message gets encrypted with the default GPG key\n    envelope  --message \"Encrypted GPG message!\" --subject \"Secret subject will not be shown\" --encrypt --from person@example.com --to person@example.com\n    \n    # message not encrypted for the sender (from Bash)\n    envelope  --message \"Encrypted GPG message!\" --subject \"Secret subject will not be shown\" --encrypt receiver@example.com receiver2@example.com --from person@example.com --to receiver@example.com receiver2@example.com\n    ```\n    \n    ```python3\n    # message not encrypted for the sender (from Python)\n    Envelope()\n        .message(\"Encrypted GPG message!\")\n        .subject(\"Secret subject will not be shown\")\n        .from_(\"person@example.com\")\n        .to((\"receiver@example.com\", \"receiver2@example.com\"))\n        .encrypt((\"receiver@example.com\", \"receiver2@example.com\"))        \n    ```\n\n#### GPG notes\n* If the GPG encryption fails, it tries to determine which recipient misses the key.  \n* By default, GPG encrypts with the key of the **from** header recipient too.\n* Key ID/fingerprint is internally ignored right now, GPG decides itself which key is to be used.\n\n### Supportive\n  * **.recipients()**: Return set of all recipients â€“ `To`, `Cc`, `Bcc`\n    * **.recipients(clear=True)**: All `To`, `Cc` and `Bcc` recipients are removed and the `Envelope` object is returned.\n  * **attachments**: Access the list of attachments.\n      * **--attachments [NAME]** Get the list of attachments or a contents of the one specified by `NAME`\n      * **.attachments(name=None, inline=None)**\n        * **name** (str): The name of the only desired attachment to be returned.\n        * **inline** (bool): Filter inline/enclosed attachments only.            \n        * *Attachment* object has the attributes *.name* file name, *.mimetype*, *.data* raw data\n            * if casted to *str*/*bytes*, its raw *.data* are returned\n  * **.copy()**: Return deep copy of the instance to be used independently. \n  ```python3    \n    factory = Envelope().cc(\"original@example.com\").copy\n    e1 = factory().to(\"to-1@example.com\")\n    e2 = factory().to(\"to-2@example.com\").cc(\"additional@example.com\")  # \n\n    print(e1.recipients())  # {'to-1@example.com', 'original@example.com'}\n    print(e2.recipients())  # {'to-2@example.com', 'original@example.com', 'additional@example.com'}\n```\n  * Read message and subject by **.message()** and **.subject()**  \n  * **preview**: Returns the string of the message or data as a human-readable text.\n            Ex: whilst we have to use quoted-printable (as seen in __str__), here the output will be plain text.\n    * **--preview**\n    * **.preview()**\n  * **check**: Check all e-mail addresses and SMTP connection and return True/False if succeeded. Tries to find SPF, DKIM and DMARC DNS records depending on the From's domain and print them out.\n    * **--check**\n    * **.check(check_mx=True, check_smtp=True)**\n        * `check_mx` E-mail addresses can be checked for MX record, not only for their format.  \n        * `check_smtp` We try to connect to the SMTP host.\n    \n    ```bash\n    $ envelope --smtp localhost 25 --from me@example.com --check \n    SPF found on the domain example.com: v=spf1 -all\n    See: dig -t SPF example.com && dig -t TXT example.com\n    DKIM found: ['v=DKIM1; g=*; k=rsa; p=...']\n    Could not spot DMARC.\n    Trying to connect to the SMTP...\n    Check succeeded.\n    ```\n  * **.as_message()**: Generates an email.message.Message object.\n     ```python3\n     e = Envelope(\"hello\").as_message()\n     print(type(e), e.get_payload())  # <class 'email.message.EmailMessage'> hello\\n \n     ```\n     Note: due to a bug in a standard Python library https://github.com/python/cpython/issues/99533 and #19 you void GPG when you access the message this way wihle signing an attachment with a name longer than 34 chars.\n  * **load**: Parse [any attainable contents](#any-attainable-contents) (including email.message.Message) like an EML file to build an Envelope object.\n     * It can decrypt the message and parse its (inline or enclosed) attachments.\n     * Note that if you will send this reconstructed message, you might not probably receive it due to the Message-ID duplication. Delete at least Message-ID header prior to re-sending. \n     * (*static*) **.load(message, \\*, path=None, key=None, cert=None, gnupg_home=None)**\n         * **message**: [Any attainable contents](#any-attainable-contents)\n         * **path**: Path to the file, alternative to the `message`\n         * **key**, **cert**: Specify when decrypting an S/MIME message (may be bundled together to the `key`)\n         * **gnupg_home**: Path to the GNUPG_HOME or None if the environment default should be used.\n         ```python3\n         Envelope.load(\"Subject: testing message\").subject()  # \"testing message\"\n         ```\n     * bash\n         * allows use blank `--subject` or `--message` flags to display the \n         * **--load FILE**\n             ```bash\n             $ envelope --load email.eml\n             Content-Type: text/plain; charset=\"utf-8\"\n             Content-Transfer-Encoding: 7bit\n             MIME-Version: 1.0\n             Subject: testing message\n            \n             Message body\n          \n             $ envelope --load email.eml --subject\n             testing message          \n             ```\n         * (*bash*) piped in content, envelope executable used with no argument    \n             ```bash\n             $ echo \"Subject: testing message\" | envelope\n             Content-Type: text/plain; charset=\"utf-8\"\n             Content-Transfer-Encoding: 7bit\n             MIME-Version: 1.0\n             Subject: testing message\n           \n            $ cat email.eml | envelope\n          \n            $ envelope < email.eml\n            ```\n  * **smtp_quit()**: As Envelope tends to re-use all the SMTP instances, you may want to quit them explicitly. Either call this method to the Envelope class to close all the cached connections or to an Envelope object to close only the connection it currently uses.\n    ```python3\n    e = Envelope().smtp(server1).smtp(server2)\n    e.smtp_quit()  # called on an instance â†’ closes connection to `server2` only\n    Envelope.smtp_quit()  # called on the class â†’ closes both connections\n    ```\n\n#### Address\n\nAny e-mail address encountered is internally converted to an `Address(str)` object that can be imported from the `envelope` package. You can safely access following `str` properties:\n* `.name` â€“ the real name\n* `.address` â€“ the e-mail address\n* `.host` â€“ its domain\n* `.user` â€“ the user name part of the e-mail\n```python3\nfrom envelope import Address\na = Address(\"John <person@example.com>\")\na.name == \"John\", a.address == \"person@example.com\", a.host == \"example.com\", a.user == \"person\"\n```\n\nEmpty object works too. For example, if the `From` header is not set, we get an empty Address object. Still it is safe to access its properties.\n```python3\na = Envelope.load(\"Empty message\").from_()\nbool(a) is False, a.host == \"\"\nAddress() == Address(\"\") == \"\", Address().address == \"\"\n``` \n\nMethod `.casefold()` returns casefolded `Address` object which is useful for comparing with strings whereas comparing with other `Address` object casefolds automatically\n```python3\na = Address(\"John <person@example.com>\")\nc = a.casefold()\na is not c, a == c, a.name == \"john\", a.name != c.name\n```\n\nMethod `.is_valid(check_mx=False)` returns boolean if the format is valid. When `check_mx` set to `True`, MX server is inquired too.\n\nSince the `Address` is a subclass of `str`, you can safely join such objects.\n\n```python3    \n\", \".join([a, a]) # \"John <person@example.com>, \"John <person@example.com>\"\na + \" hello\"  #  \"John <person@example.com> hello\"\n```\n\nAddress objects are equal if their e-mail address are equal. (Their real names might differ.)\nAddress object is equal to a string if the string contains its e-mail address or the whole representation.\n\n```python3\n\"person@example.com\" == Address(\"John <person@example.com>\") == \"John <person@example.com>\"  # True\n```\n\nConcerning `to`, `cc`, `bcc` and `reply-to`, multiple addresses may always be given in a string, delimited by comma (or semicolon). The `.get(address:bool, name:bool)` method may be called on an `Address` object to filter the desired information. \n```python3\ne = (Envelope()\n    .to(\"person1@example.com\")\n    .to(\"person1@example.com, John <person2@example.com>\")\n    .to([\"person3@example.com\"]))\n\n[str(x) for x in e.to()]                # [\"person1@example.com\", \"John <person2@example.com>\", \"person3@example.com\"]\n[x.get(address=False) for x in e.to()]  # [\"\", \"John\", \"\"]\n[x.get(name=True) for x in e.to()]      # [\"person1@example.com\", \"John\", \"person3@example.com\"]\n                                        # return an address if no name given\n[x.get(address=True) for x in e.to()]   # [\"person1@example.com\", \"person2@example.com\", \"person3@example.com\"]\n                                        # addresses only\n```\n\nFor some exotic cases, Address tends to do the parsing job better than the underlying standard library (see the [bug report](https://github.com/python/cpython/issues/40889) from 2004).\n\n```python3\nfrom email.utils import parseaddr\nfrom envelope import Address\nparseaddr(\"alice@example.com <bob@example.malware>\")\n# ('', 'alice@example.com') -> empty name and wrong address\nAddress(\"alice@example.com <bob@example.malware>\").address\n# 'bob@example.malware' -> the right address\n```\n\n### Experimental\n\nSince we tend to keep the API simple and do the least amount of backward incompatible changes, it is hard to decide the right way. Your suggestions are welcome! Following methods have no stable API, hence their name begins with an underscore.\n\n* `_report()`: Accessing `multipart/report`.\n\nCurrently only [XARF](http://xarf.org/) is supported in the moment. You may directly access the fields, without any additional `json` parsing.\n\n```python3\nif xarf := Envelope.load(path=\"xarf.eml\")._report():\n  print(xarf['SourceIp'])  # '192.0.2.1'\n```\n\n## Envelope object\n\n### Converting object to str or bool\n\nWhen successfully signing, encrypting or sending, object is resolvable to True and signed text / produced e-mail could be obtained via str().\n\n```python3\no = Envelope(\"message\", sign=True)\nstr(o)  # signed text\nbool(o)  # True\n```\n\n### Object equality\nEnvelope object is equal to a `str`, `bytes` or another `Envelope` if their `bytes` are the same.\n```python3\n# Envelope objects are equal\nsign = {\"message\": \"message\", \"sign\": True}\nEnvelope(**sign) == Envelope(**sign)  # True\nbytes(Envelope(**sign))  # because their bytes are the same\n# b'-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA512\\n\\nmessage\\n-----BEGIN PGP SIGNATURE-----\\n\\niQEzBAEBCgAdFiE...\\n-----END PGP SIGNATURE-----\\n'\n\n# however, result of a PGP encrypting produces always a different output\nencrypt = {\"message\": \"message\", \"encrypt\": True, \"from_\": False, \"to\": \"person@example.com\"}\nEnvelope(**encrypt) != Envelope(**encrypt)  # Envelope objects are not equal\n```\n\n# Examples\n\n## Signing and encrypting\n\nSign the message.\n```python3\nEnvelope(message=\"Hello world\", sign=True)\n```\n\nSign the message loaded from a file by standard pathlib library\n```python3\nfrom pathlib import Path\nEnvelope(message=Path(\"/tmp/message.txt\"), sign=True)\n```\n\nSign the message got from a file-stream\n```python3\nwith open(\"/tmp/message.txt\") as f:\n    Envelope(message=f, sign=True)\n```\n\nSign and encrypt the message so that's decryptable by keys for me@example.com and remote_person@example.com (that should already be loaded in the keyring).\n```python3 \nEnvelope(message=\"Hello world\", sign=True,\n        encrypt=True,\n        from_=\"me@example.com\",\n        to=\"remote_person@example.com\")\n```\n\nSign and encrypt the message so that's decryptable by keys for me@example.com and remote_person@example.com (that get's imported to the keyring from the file).\n```python3 \nEnvelope(message=\"Hello world\", sign=True,\n        encrypt=Path(\"/tmp/remote_key.asc\"),\n        from_=\"me@example.com\",\n        to=\"remote_person@example.com\")\n```\n\nSign the message via different keyring.\n```python3\nEnvelope(message=\"Hello world\", sign=True, gnupg=\"/tmp/my-keyring/\")\n```\n\nSign the message with a key that needs passphrase.\n```python3 \nEnvelope(message=\"Hello world\", sign=True, passphrase=\"my-password\")\n```\n\nSign a message with signing by default turned previously on and having a default keyring path. Every `factory` call will honour these defaults. \n```python3 \nfactory = Envelope().signature(True).gpg(\"/tmp/my-keyring\").copy\nfactory().(message=\"Hello world\")\n```\n\n## Sending\nSend an e-mail via module call.\n```python3\nEnvelope(message=\"Hello world\", send=True)\n```\n\nSend an e-mail via CLI and default SMTP server localhost on port 25.\n```bash\nenvelope --to \"user@example.org\" --message \"Hello world\" --send\n```\n\nSend while having specified the SMTP server host, port, username, password.\n\n```bash\nenvelope --to \"user@example.org\" message \"Hello world\" --send --smtp localhost 123 username password \n```\n\nSend while having specified the SMTP server through a dictionary.\n```bash\nenvelope --to \"user@example.org\" --message \"Hello world\" --send --smtp '{\"host\": \"localhost\", \"port\": \"123\"}' \n```\n\nSend while having specified the SMTP server via module call.\n```python3\nEnvelope(message=\"Hello world\", to=\"user@example.org\", send=True, smtp={\"host\":\"localhost\"}) \n```\n\n## Attachment\nYou can attach a file in many different ways. Pick the one that suits you the best.\n```python3\nEnvelope(attachment=Path(\"/tmp/file.txt\"))  # file name will be 'file.txt'\n\nwith open(\"/tmp/file.txt\") as f:\n    Envelope(attachment=f)  # file name will be 'file.txt'\n    \nwith open(\"/tmp/file.txt\") as f:\n    Envelope(attachment=(f, \"filename.txt\"))\n    \nEnvelope().attach(path=\"/tmp/file.txt\", name=\"filename.txt\")\n```\n\n## Inline images\nThe only thing you have to do is to set the `inline=True` parameter of the attachment. Then, you can reference the image from within your message, with the help of `cid` keyword. For more details, see *attachments* in the [Sending](#sending) section. \n```python3\n(Envelope()\n    .attach(path=\"/tmp/file.jpg\", inline=True)\n    .message(\"Hey, this is an inline image: <img src='cid:file.jpg' />\"))\n```\n\n## Complex example\nSend an encrypted and signed message (GPG) via the default SMTP server, via all three interfaces.\n```bash\n# CLI interface\nenvelope --message \"Hello world\" --from \"me@example.org\" --to \"user@example.org\" --subject \"Test\" --sign --encrypt -a /tmp/file.txt -a /tmp/file2 application/gzip zipped-file.zip --send\n```\n```python3\nfrom pathlib import Path\nfrom envelope import Envelope\n\n# fluent interface\nEnvelope().message(\"Hello world\").from_(\"me@example.org\").to(\"user@example.org\").subject(\"Test\").signature().encryption().attach(path=\"/tmp/file.txt\").attach(Path(\"/tmp/file2\"), \"application/gzip\", \"zipped-file.zip\").send()\n\n# one-liner interface\nEnvelope(\"Hello world\", \"me@example.org\", \"user@example.org\", \"Test\", sign=True, encrypt=True, attachments=[(Path(\"/tmp/file.txt\"), (Path(\"/tmp/file2\"), \"application/gzip\", \"zipped-file.zip\")], send=True)\n```\n\nIn the condition *me@example.com* private key for signing, *user@example.com* public key for encrypting and open SMTP server on *localhost:25* are available, change `--send` to `--send 0` (or `.send()` to `.send(False)` or `send=True` to `send=False`) to investigate the generated message that may be similar to the following output:\n```bash\n****************************************************************************************************\nHave not been sent from me@example.org to user@example.org\nEncrypted subject: Test\nEncrypted message: b'Hello world'\n\nSubject: Encrypted message\nMIME-Version: 1.0\nContent-Type: multipart/encrypted; protocol=\"application/pgp-encrypted\";\n boundary=\"===============8462917939563016793==\"\nFrom: me@example.org\nTo: user@example.org\nDate: Tue, 08 Oct 2019 16:16:18 +0200\nMessage-ID: <157054417817.4405.938581433237601455@promyka>\n\n--===============8462917939563016793==\nContent-Type: application/pgp-encrypted\n\nVersion: 1\n--===============8462917939563016793==\nContent-Type: application/octet-stream; name=\"encrypted.asc\"\nContent-Description: OpenPGP encrypted message\nContent-Disposition: inline; filename=\"encrypted.asc\"\n\n-----BEGIN PGP MESSAGE-----\n\nhQMOAyx1c9zl1h4wEAv+PmtwjQDt+4XCn8YQJ6d7kyrp2R7xzS3PQwOZ7e+HWJjY\n(...)\nRQ8QtLLEza+rs+1lgcPgdBZEHFpYpgDb0AUvYg9d\n=YuqI\n-----END PGP MESSAGE-----\n\n--===============8462917939563016793==--\n```\n\n# Related affairs\nSending an e-mail does not mean it will be received. Sending it successfully through your local domain does not mean a public mailbox will accept it as well. If you are not trustworthy enough, your e-mail may not even appear at the recipient's spam bin, it can just be discarded without notice. \n\n## Configure your SMTP\nIt is always easier if you have an account on an SMTP server the application is able to send e-mails with. If it is not the case, various SMTP server exist but as a quick and non-secure solution, I've tested [bytemark/smtp](https://hub.docker.com/r/bytemark/smtp/) docker image that allows you to start up a SMTP server by a single line.\n\n```bash\ndocker run --network=host --restart always -d bytemark/smtp   # starts open port 25 on localhost\nenvelope --message \"SMTP test\" --from [your e-mail] --to [your e-mail] --smtp localhost 25 --send\n```\n\n## Choose ciphering method\n\n### Configure your GPG\nIn order to sign messages, you need a private key. Let's pretend a usecase when your application will run under `www-data` user and GPG sign messages through the keys located at: `/var/www/.gnupg`. You have got a SMTP server with an e-mail account the application may use.\n```bash\nls -l $(tty)  # see current TTY owner\nsudo chown www-data $(tty)  # if creating the key for a different user and generation fails, changing temporarily the ownership of the terminal might help (when handling passphrase, the agent opens the controlling terminal rather than using stdin/stdout for security purposes)\nGNUPGHOME=/var/www/.gnupg sudo -H -u www-data gpg --full-generate-key  # put application e-mail you are able to send e-mails from\n# sudo chown [USER] $(tty)  # you may set back the TTY owner\nGNUPGHOME=/var/www/.gnupg sudo -H -u www-data gpg --list-secret-keys  # get key ID\nGNUPGHOME=/var/www/.gnupg sudo -H -u www-data gpg --send-keys [key ID]  # now the world is able to pull the key from a global webserver when they receive an e-mail from you\nGNUPGHOME=/var/www/.gnupg sudo -H -u www-data gpg --export [APPLICATION_EMAIL] | curl -T - https://keys.openpgp.org  # prints out the link you can verify your key with on `keys.openpgp.org` (ex: used by default by Thunderbird Enigmail; standard --send-keys method will not verify the identity information here, hence your e-mail would not be searchable)\nGNUPGHOME=/var/www/.gnupg sudo -H -u www-data envelope --message \"Hello world\" --subject \"GPG signing test\" --sign [key ID] --from [application e-mail] --to [your e-mail] --send  # you now receive e-mail and may import the key and set the trust to the key\n```\n\nIt takes few hours to a key to propagate. If the key cannot be imported in your e-mail client because not found on the servers, try in the morning again or check the online search form at http://hkps.pool.sks-keyservers.net.  \nPut your fingerprint on the web or on the business card then so that everybody can check your signature is valid.\n\n### Configure your S/MIME\nIf you are supposed to use S/MIME, you would probably be told where to take your key and certificate from. If planning to try it all by yourself, generate your `certificate.pem`.\n \n* Either: Do you have private key?\n```bash\nopenssl req -key YOUR-KEY.pem -nodes -x509 -days 365 -out certificate.pem  # will generate privkey.pem alongside\n```\n \n* Or: Do not you have private key? \n```bash\nopenssl req -newkey rsa:1024 -nodes -x509 -days 365 -out certificate.pem  # will generate privkey.pem alongside\n```\n\nNow, you may sign a message with your key and certificate. (However, the messages **will not be trustworthy** because no authority signed the certificate.) Give your friend the certificate so that they might verify the message comes from you. Receive a certificate from a friend to encrypt them a message with.\n```\nenvelope --message \"Hello world\" --subject \"S/MIME signing test\" --sign-path [key file] --cert-path [certificate file] --from [application e-mail] --to [your e-mail] --send # you now receive e-mail\n```\n\n## DNS validation tools\nThis is just a short explanation on these anti-spam mechanisms so that you can take basic notion what is going on.\n\nEvery time, the receiver should ask the From's domain these questions over DNS.  \n\n### SPF\nThe receiver asks the sender's domain: Do you allow the senders IP/domain to send the e-mail on your behalf? Is the IP/domain the mail originates from enlisted as valid in the DNS of the SMTP envelope MAIL FROM address domain? \n\nCheck your domain on SPF:\n```bash\ndig -t TXT example.com\n```\n\nSPF technology is tied to the SMTP envelope MAIL FROM address which is specified with the `.from_addr` method and then stored into the Return-Path header by the receiving server, and it has nothing in common with the headers like From `.from_`, Reply-To `.reply_to`, or Sender `.header(\"Sender\")`. \n\n### DKIM\nThe receiver asks the sender's domain: Give me the public key so that I may check the hash in the e-mail header that assert the message was composed by your private key. So that the e-mail comes trustworthy from you and nobody modified it on the way.\n\nCheck your domain on DKIM:\n```bash\ndig -t TXT [selector]._domainkey.example.com\n``` \nYou can obtain the `selector` from an e-mail message you received. Check the line `DKIM-Signature` and the value of the param `s`.\n```\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=example.com; s=default;\n```\n\n## DMARC\nWhat is your policy concerning SPF and DKIM? What abuse address do you have?\n\nCheck your domain on DMARC:\n```bash\ndig -t TXT _dmarc.example.com\n``` \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CZ-NIC/envelope",
    "keywords": "",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "envelope",
    "package_url": "https://pypi.org/project/envelope/",
    "platform": null,
    "project_url": "https://pypi.org/project/envelope/",
    "project_urls": {
      "Homepage": "https://github.com/CZ-NIC/envelope"
    },
    "release_url": "https://pypi.org/project/envelope/2.0.2/",
    "requires_dist": [
      "jsonpickle",
      "python-magic",
      "python-gnupg (>=0.5)",
      "py3-validate-email (<1.0.6) ; python_version < \"3.8\"",
      "py3-validate-email ; python_version >= \"3.8\"",
      "M2Crypto ; extra == 'smime'"
    ],
    "requires_python": ">=3.7",
    "summary": "Insert a message and attachments and send e-mail / sign / encrypt contents by a single line.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15890282,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "916473c64971a8634b581c201c131a96e5e2249ab4c5e5337aa1cd41b2d33aa3",
          "md5": "64db16f61bad8312afc2b16dbce122e0",
          "sha256": "26f56de14602eb499274207a8452b197f16bcfeeefa937ee7200f964c68b6cd8"
        },
        "downloads": -1,
        "filename": "envelope-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "64db16f61bad8312afc2b16dbce122e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21718,
        "upload_time": "2019-10-02T18:21:09",
        "upload_time_iso_8601": "2019-10-02T18:21:09.587075Z",
        "url": "https://files.pythonhosted.org/packages/91/64/73c64971a8634b581c201c131a96e5e2249ab4c5e5337aa1cd41b2d33aa3/envelope-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19812acb5cd58ec9b818ec3d55d87a3ac5e62794555edf0b7cd940be88905186",
          "md5": "2ac3128124bb130d5a72c992c161c8bb",
          "sha256": "27e96b6eb748b5da2cfe30343f419a893a415933ae28df90339a03fcf3e708ac"
        },
        "downloads": -1,
        "filename": "envelope-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2ac3128124bb130d5a72c992c161c8bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28611,
        "upload_time": "2019-10-07T14:22:13",
        "upload_time_iso_8601": "2019-10-07T14:22:13.984532Z",
        "url": "https://files.pythonhosted.org/packages/19/81/2acb5cd58ec9b818ec3d55d87a3ac5e62794555edf0b7cd940be88905186/envelope-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22b3873d30519b19d5df4a2e9224ce43b009344ec0d1d14c5faf677917168979",
          "md5": "6a26cbf1b690be7ab1b26b79e9fa8a42",
          "sha256": "ded1881d0892c7fee80a6433a7194652e397bd0d296f4fe429886fca6e74843f"
        },
        "downloads": -1,
        "filename": "envelope-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6a26cbf1b690be7ab1b26b79e9fa8a42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30046,
        "upload_time": "2019-11-29T23:11:07",
        "upload_time_iso_8601": "2019-11-29T23:11:07.704846Z",
        "url": "https://files.pythonhosted.org/packages/22/b3/873d30519b19d5df4a2e9224ce43b009344ec0d1d14c5faf677917168979/envelope-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20591a47bc023888d7ae9234aeb36e732fb44ed75b5b8b45a797bcca37ddb4c8",
          "md5": "2786902bf1e8a2c3a41e48e2472f6391",
          "sha256": "2918fc8294982cff7993d16c21a976e4fdd3e704a56221b5faccefb9cb5cdf4b"
        },
        "downloads": -1,
        "filename": "envelope-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2786902bf1e8a2c3a41e48e2472f6391",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30063,
        "upload_time": "2019-12-03T16:46:42",
        "upload_time_iso_8601": "2019-12-03T16:46:42.769521Z",
        "url": "https://files.pythonhosted.org/packages/20/59/1a47bc023888d7ae9234aeb36e732fb44ed75b5b8b45a797bcca37ddb4c8/envelope-0.9.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e97811aa8164d43d597cb7bde258d6e1ee70895d5f350487b3ac3d1cac53613",
          "md5": "59705c6c6ec5dac2a4f431587878174e",
          "sha256": "6fae8b9f166877a9fb9213efb901d820e2e9c69622b44a68cdda5ecab7115f04"
        },
        "downloads": -1,
        "filename": "envelope-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "59705c6c6ec5dac2a4f431587878174e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34645,
        "upload_time": "2019-12-12T18:32:21",
        "upload_time_iso_8601": "2019-12-12T18:32:21.677469Z",
        "url": "https://files.pythonhosted.org/packages/1e/97/811aa8164d43d597cb7bde258d6e1ee70895d5f350487b3ac3d1cac53613/envelope-0.9.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34b0de451416c42e73fc7f739e03d0e1d637737f1abdcf392ce8a354a1217582",
          "md5": "2ca76c997e7bfd6b947a9003d54d97a5",
          "sha256": "5eedf251150e57c912f17473a47780ce75eaecea84fd5d5d5d84678e919daa25"
        },
        "downloads": -1,
        "filename": "envelope-0.9.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2ca76c997e7bfd6b947a9003d54d97a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34771,
        "upload_time": "2020-01-14T20:47:41",
        "upload_time_iso_8601": "2020-01-14T20:47:41.568518Z",
        "url": "https://files.pythonhosted.org/packages/34/b0/de451416c42e73fc7f739e03d0e1d637737f1abdcf392ce8a354a1217582/envelope-0.9.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca967c005f1d23d4689259d6cb083f51b58225df5ee4783f2407017273c0174",
          "md5": "0e0dcae1de79f18b22356d743920b353",
          "sha256": "bca5f4a450277ff6cb6dbbf456f9f8a55ad7e444da279016946bd159023b142f"
        },
        "downloads": -1,
        "filename": "envelope-0.9.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0e0dcae1de79f18b22356d743920b353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37642,
        "upload_time": "2020-01-17T00:53:40",
        "upload_time_iso_8601": "2020-01-17T00:53:40.338858Z",
        "url": "https://files.pythonhosted.org/packages/9c/a9/67c005f1d23d4689259d6cb083f51b58225df5ee4783f2407017273c0174/envelope-0.9.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04f1f950cbce0fc6d703bd9b9f4b0688d509c52fcf034f73cbe16a53be66b8fc",
          "md5": "4ee81e7ebb3cbf620e88dfc45db73eed",
          "sha256": "0af93adf30fb7c57ae85f7b99d301a3e7febef2244eb63204f03927e6c846c90"
        },
        "downloads": -1,
        "filename": "envelope-0.9.8.tar.gz",
        "has_sig": false,
        "md5_digest": "4ee81e7ebb3cbf620e88dfc45db73eed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40615,
        "upload_time": "2020-01-27T22:23:27",
        "upload_time_iso_8601": "2020-01-27T22:23:27.120722Z",
        "url": "https://files.pythonhosted.org/packages/04/f1/f950cbce0fc6d703bd9b9f4b0688d509c52fcf034f73cbe16a53be66b8fc/envelope-0.9.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fcb405a99221f6df352e2b50cdfa8a7f2659519e6d6ab6d4dbcfef82e73856d",
          "md5": "ff1453a200697c8d7b4d2bab1bf6f906",
          "sha256": "a3db86660fa121ab2f31b443aaa7d753f7b4ee34a12c420c122f86f73aa87ff5"
        },
        "downloads": -1,
        "filename": "envelope-0.9.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ff1453a200697c8d7b4d2bab1bf6f906",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40606,
        "upload_time": "2020-02-10T18:58:48",
        "upload_time_iso_8601": "2020-02-10T18:58:48.670690Z",
        "url": "https://files.pythonhosted.org/packages/8f/cb/405a99221f6df352e2b50cdfa8a7f2659519e6d6ab6d4dbcfef82e73856d/envelope-0.9.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b72f6ff99849ae201f00f6730d9792e8d30502f986eb483797780ba65142ab",
          "md5": "48b8b1ac44546d04c9e9dbe10590ab01",
          "sha256": "154aaee4fc4bb36584634e95947f33d2c6b1f4b95b092eb35dfa2f97b587a34d"
        },
        "downloads": -1,
        "filename": "envelope-0.9.9rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "48b8b1ac44546d04c9e9dbe10590ab01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40525,
        "upload_time": "2020-02-10T17:16:16",
        "upload_time_iso_8601": "2020-02-10T17:16:16.579234Z",
        "url": "https://files.pythonhosted.org/packages/24/b7/2f6ff99849ae201f00f6730d9792e8d30502f986eb483797780ba65142ab/envelope-0.9.9rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.9rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b4449586327e90b0363537bac7e4e93af671a714ec718b465242afd5dd9e4c3",
          "md5": "75f0e1bbd616e32d047b7e9b7106329f",
          "sha256": "73f159e83840e8e33f7a8f7d789081ddf0d8f0af7a10fa3a3b04961be94cc040"
        },
        "downloads": -1,
        "filename": "envelope-0.9.9rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "75f0e1bbd616e32d047b7e9b7106329f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40654,
        "upload_time": "2020-02-10T18:41:55",
        "upload_time_iso_8601": "2020-02-10T18:41:55.769498Z",
        "url": "https://files.pythonhosted.org/packages/9b/44/49586327e90b0363537bac7e4e93af671a714ec718b465242afd5dd9e4c3/envelope-0.9.9rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe574587a4ec477d386781823dc4824895995e693d31d8c71bbd95c7c40854a0",
          "md5": "209b6139f3003b946c9cba276b6d1951",
          "sha256": "89201e9ebee35412b69e03cbcfb9cdfb9d4b543f370e61da8bed991bea91bae9"
        },
        "downloads": -1,
        "filename": "envelope-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "209b6139f3003b946c9cba276b6d1951",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46472,
        "upload_time": "2020-05-28T16:49:53",
        "upload_time_iso_8601": "2020-05-28T16:49:53.455889Z",
        "url": "https://files.pythonhosted.org/packages/fe/57/4587a4ec477d386781823dc4824895995e693d31d8c71bbd95c7c40854a0/envelope-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34252d6d5a89710473fc563f50d0a86f40c18fb2722ad12e59fbf3ed06568b0f",
          "md5": "dccec6c9a1bb40d3a58decfb02c452b3",
          "sha256": "3eef199ec24e6df3129ece40cedcbc32856f526595b2f49b3ec7e89d4a3c8578"
        },
        "downloads": -1,
        "filename": "envelope-1.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "dccec6c9a1bb40d3a58decfb02c452b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 46651,
        "upload_time": "2020-05-28T16:45:27",
        "upload_time_iso_8601": "2020-05-28T16:45:27.269467Z",
        "url": "https://files.pythonhosted.org/packages/34/25/2d6d5a89710473fc563f50d0a86f40c18fb2722ad12e59fbf3ed06568b0f/envelope-1.0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddd2a0a9ca4d625983314f1702d50a44fbb1d8e3edc06af3e56633340beb3152",
          "md5": "d35da65838eacd718b87e9983d7ac45b",
          "sha256": "5801afa5f02e1707a88cc468c38ddd74df09cb7516ff5cc3347bd25e41ac29ec"
        },
        "downloads": -1,
        "filename": "envelope-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d35da65838eacd718b87e9983d7ac45b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 50525,
        "upload_time": "2020-05-30T12:45:11",
        "upload_time_iso_8601": "2020-05-30T12:45:11.283002Z",
        "url": "https://files.pythonhosted.org/packages/dd/d2/a0a9ca4d625983314f1702d50a44fbb1d8e3edc06af3e56633340beb3152/envelope-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab284de31ee0e89e3493d3833b6f33e7457579bc90f32fb98a1fac1e0f7337e2",
          "md5": "dac7afc1f2cb7cfd82c207b726e6718c",
          "sha256": "09876b8f2c48c7df9da1210669b84aa1f6d93fd540215934cd915de225cdca3a"
        },
        "downloads": -1,
        "filename": "envelope-1.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "dac7afc1f2cb7cfd82c207b726e6718c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 50032,
        "upload_time": "2020-05-30T11:39:00",
        "upload_time_iso_8601": "2020-05-30T11:39:00.268049Z",
        "url": "https://files.pythonhosted.org/packages/ab/28/4de31ee0e89e3493d3833b6f33e7457579bc90f32fb98a1fac1e0f7337e2/envelope-1.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f9f320e3ff26543694a7ea96b90071d5803aa4a83833a6d2e67e116c50cc24e",
          "md5": "932eace4b7399fac180af56392ec1c42",
          "sha256": "f4898c46233c3bf6b90476033d7ab5b4c05e5b3d16fa0c0ea0a9fc1c74b677aa"
        },
        "downloads": -1,
        "filename": "envelope-1.1rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "932eace4b7399fac180af56392ec1c42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 50100,
        "upload_time": "2020-05-30T11:53:16",
        "upload_time_iso_8601": "2020-05-30T11:53:16.515740Z",
        "url": "https://files.pythonhosted.org/packages/1f/9f/320e3ff26543694a7ea96b90071d5803aa4a83833a6d2e67e116c50cc24e/envelope-1.1rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d418d419c81f2ee19cc7007fcd7dbceb7fb7f77963f046068bc02dde1c90611",
          "md5": "d341340192e5ddfe58016f7a86b9b93d",
          "sha256": "56abf365c9005d9594c81e992e50c959775bfd56fe988578e0b5f83603169859"
        },
        "downloads": -1,
        "filename": "envelope-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d341340192e5ddfe58016f7a86b9b93d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52335,
        "upload_time": "2020-06-18T15:58:21",
        "upload_time_iso_8601": "2020-06-18T15:58:21.359411Z",
        "url": "https://files.pythonhosted.org/packages/0d/41/8d419c81f2ee19cc7007fcd7dbceb7fb7f77963f046068bc02dde1c90611/envelope-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "552c900b1ddc56c36bac450d0e64437acad7847cd434958ec9016c4f65b20223",
          "md5": "bbeb9a068179d9200e3f1a35fbd69a2f",
          "sha256": "28920e6cd8b170a34afa36ec87e398b285abc0913430f28466f44248d08c23b7"
        },
        "downloads": -1,
        "filename": "envelope-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bbeb9a068179d9200e3f1a35fbd69a2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52654,
        "upload_time": "2020-06-23T15:53:44",
        "upload_time_iso_8601": "2020-06-23T15:53:44.784040Z",
        "url": "https://files.pythonhosted.org/packages/55/2c/900b1ddc56c36bac450d0e64437acad7847cd434958ec9016c4f65b20223/envelope-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3adfa6d99a5868aac8bc14bd7dd2674327938aada76fb6bf95c8330fe4710921",
          "md5": "c34b8d957aeffac46e173b96c14e4b68",
          "sha256": "f635fb0a7f09012309ae413ae63ff4fc0191989bc9c1423070100470879b14ca"
        },
        "downloads": -1,
        "filename": "envelope-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c34b8d957aeffac46e173b96c14e4b68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 54374,
        "upload_time": "2020-06-24T20:16:49",
        "upload_time_iso_8601": "2020-06-24T20:16:49.046451Z",
        "url": "https://files.pythonhosted.org/packages/3a/df/a6d99a5868aac8bc14bd7dd2674327938aada76fb6bf95c8330fe4710921/envelope-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7f17a4b3dc92c1ae261fd6fd2daeb1992eadba91f7848758cac8bdc55022100",
          "md5": "c40df6c05d3941b5534157cb3663ac3f",
          "sha256": "ce9f589888f6a44c8122cd2fc60f1dc668abed5ffbabd7b44b9391d14c20846d"
        },
        "downloads": -1,
        "filename": "envelope-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c40df6c05d3941b5534157cb3663ac3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 57204,
        "upload_time": "2020-06-26T16:22:53",
        "upload_time_iso_8601": "2020-06-26T16:22:53.568447Z",
        "url": "https://files.pythonhosted.org/packages/e7/f1/7a4b3dc92c1ae261fd6fd2daeb1992eadba91f7848758cac8bdc55022100/envelope-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6ebff404e7d38b444cd5c3816a95db6b20796c42f64ce6104b939c72792bfe6",
          "md5": "3fd2dc06bcd3d49f88526bd581b67b86",
          "sha256": "1e9e4cbb659fafd830bf2e3e306c942bda2ba9fb7b0e5052e85d39fee0467d18"
        },
        "downloads": -1,
        "filename": "envelope-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3fd2dc06bcd3d49f88526bd581b67b86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 57328,
        "upload_time": "2020-06-29T20:17:06",
        "upload_time_iso_8601": "2020-06-29T20:17:06.498638Z",
        "url": "https://files.pythonhosted.org/packages/d6/eb/ff404e7d38b444cd5c3816a95db6b20796c42f64ce6104b939c72792bfe6/envelope-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc8ee4380da058f27df425e28d0574213fe0ce304c88e71f11e72ce59dd5d2e",
          "md5": "b70f5efaf118d83bf4b376bc86b89c5f",
          "sha256": "b8bfc04930cef8bb9a23e53c1b1e1a781f068db1dfdeb653799dcd390af801cf"
        },
        "downloads": -1,
        "filename": "envelope-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b70f5efaf118d83bf4b376bc86b89c5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 62388,
        "upload_time": "2020-09-03T14:08:12",
        "upload_time_iso_8601": "2020-09-03T14:08:12.492725Z",
        "url": "https://files.pythonhosted.org/packages/6d/c8/ee4380da058f27df425e28d0574213fe0ce304c88e71f11e72ce59dd5d2e/envelope-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcb72115a6dbb3c03440c7ca3af0bc14a17d58fc75433e55dd75e942cad72b0f",
          "md5": "a4afccc47ba7fe5212f190649a4faac7",
          "sha256": "daa3e1d7f82e44a8e68761f6316127fde2c2a0b4d040afb2a2757f92d4dc9f2c"
        },
        "downloads": -1,
        "filename": "envelope-1.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a4afccc47ba7fe5212f190649a4faac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64291,
        "upload_time": "2020-09-04T17:50:49",
        "upload_time_iso_8601": "2020-09-04T17:50:49.981626Z",
        "url": "https://files.pythonhosted.org/packages/dc/b7/2115a6dbb3c03440c7ca3af0bc14a17d58fc75433e55dd75e942cad72b0f/envelope-1.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2f5ac3df5e4b870d56cdde0b297d58dfb328462a7180f3df0d99228ef4aa55f",
          "md5": "069b55cfdd0fa12e59341942b4e6612b",
          "sha256": "d7d81e1806705673a41bb515fc44ee43d46364a6d69a296cad3b2f747ca5d1b4"
        },
        "downloads": -1,
        "filename": "envelope-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "069b55cfdd0fa12e59341942b4e6612b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64482,
        "upload_time": "2020-10-05T17:16:07",
        "upload_time_iso_8601": "2020-10-05T17:16:07.202783Z",
        "url": "https://files.pythonhosted.org/packages/e2/f5/ac3df5e4b870d56cdde0b297d58dfb328462a7180f3df0d99228ef4aa55f/envelope-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "991570f3a17dbe3b90fb240752f2372c690499ac1591e7ad20fcc0b986443cff",
          "md5": "cd860a67be3867f1dfbc640307735529",
          "sha256": "bf1b2ca0e222545c1820bc38e3dc7db6e6500d7cdf3ecfab24d5735e17c67758"
        },
        "downloads": -1,
        "filename": "envelope-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd860a67be3867f1dfbc640307735529",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64594,
        "upload_time": "2020-10-22T11:58:11",
        "upload_time_iso_8601": "2020-10-22T11:58:11.534237Z",
        "url": "https://files.pythonhosted.org/packages/99/15/70f3a17dbe3b90fb240752f2372c690499ac1591e7ad20fcc0b986443cff/envelope-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83fbe5ad4180e348806fc2f6890a7416928d273acd510ce4255e6cf8b09ce5fd",
          "md5": "c1aa0f66d3e69c92d374feb098f4e448",
          "sha256": "961f03170b4bdc014634e1cebf02af086f3a1aa5319f226d43218132771fb676"
        },
        "downloads": -1,
        "filename": "envelope-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1aa0f66d3e69c92d374feb098f4e448",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64584,
        "upload_time": "2020-10-26T12:28:54",
        "upload_time_iso_8601": "2020-10-26T12:28:54.622784Z",
        "url": "https://files.pythonhosted.org/packages/83/fb/e5ad4180e348806fc2f6890a7416928d273acd510ce4255e6cf8b09ce5fd/envelope-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f6add8496cae9db869b9501f045e077cc0c2039e384502b0e7ae263b0bf202e",
          "md5": "4dbbb77376a37b9e5cd7463470e705c0",
          "sha256": "37637be004f181d7a842b69d837d0f831daff61be0581abdf1d2eb6dc98e943b"
        },
        "downloads": -1,
        "filename": "envelope-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4dbbb77376a37b9e5cd7463470e705c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66054,
        "upload_time": "2021-01-21T22:32:52",
        "upload_time_iso_8601": "2021-01-21T22:32:52.527245Z",
        "url": "https://files.pythonhosted.org/packages/4f/6a/dd8496cae9db869b9501f045e077cc0c2039e384502b0e7ae263b0bf202e/envelope-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cafc8663b06b615fc826b45bedd371f68a22a891e0563dc0b946ebce8a005812",
          "md5": "43e9e57ca3d38ab97187e1b4fd8a0c78",
          "sha256": "44799b0dbebeb48727254f82239f84bc1227654a24de50a8abeb6c66748a737b"
        },
        "downloads": -1,
        "filename": "envelope-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "43e9e57ca3d38ab97187e1b4fd8a0c78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66569,
        "upload_time": "2021-01-23T15:05:32",
        "upload_time_iso_8601": "2021-01-23T15:05:32.727464Z",
        "url": "https://files.pythonhosted.org/packages/ca/fc/8663b06b615fc826b45bedd371f68a22a891e0563dc0b946ebce8a005812/envelope-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02771d24ce87e14709598cbaac74bbfdacd7a5782d7cc3a2ef6ecbf1a478c72f",
          "md5": "0cdcfd0e12af527c8ae0a81392067712",
          "sha256": "131e182586a6bd5e0593b0c67292130ca4f1953347cb11d08c8089091fea264d"
        },
        "downloads": -1,
        "filename": "envelope-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0cdcfd0e12af527c8ae0a81392067712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66553,
        "upload_time": "2021-01-23T15:06:10",
        "upload_time_iso_8601": "2021-01-23T15:06:10.722569Z",
        "url": "https://files.pythonhosted.org/packages/02/77/1d24ce87e14709598cbaac74bbfdacd7a5782d7cc3a2ef6ecbf1a478c72f/envelope-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40ffa13f2f89e7cadcdf4ecefbada7c706220df3ad3d22693946f600c433b995",
          "md5": "1c1f9d08b3f124915554d76e09be43a1",
          "sha256": "4956f19ca39fc4c44149df4d18d50bc0f00e34658a90ebe0263e5ed73d717a89"
        },
        "downloads": -1,
        "filename": "envelope-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1c1f9d08b3f124915554d76e09be43a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 66735,
        "upload_time": "2021-01-26T13:14:14",
        "upload_time_iso_8601": "2021-01-26T13:14:14.520472Z",
        "url": "https://files.pythonhosted.org/packages/40/ff/a13f2f89e7cadcdf4ecefbada7c706220df3ad3d22693946f600c433b995/envelope-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fc6d8bcb2ab14906da6124eb54aa231b8154e13f728ebaf2ffb17abac480783",
          "md5": "53fd950acebfcada8c46bb172b3ca9ac",
          "sha256": "ffa1fd05847cbd6d9a782fb1ca7a570ffa9ee48b5b5e924a5222fdd780b9641b"
        },
        "downloads": -1,
        "filename": "envelope-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "53fd950acebfcada8c46bb172b3ca9ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 68805,
        "upload_time": "2021-02-09T16:35:43",
        "upload_time_iso_8601": "2021-02-09T16:35:43.187836Z",
        "url": "https://files.pythonhosted.org/packages/7f/c6/d8bcb2ab14906da6124eb54aa231b8154e13f728ebaf2ffb17abac480783/envelope-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5200d6ebf795363c397513dc089ff906e24da2176f627611ffcd6e0551dae11c",
          "md5": "7885270fbdfdcbc2f913635af8d76e93",
          "sha256": "0b6427c760239bd13932b597832043f26fb9b597b679c4d3c832e33cd7ad3777"
        },
        "downloads": -1,
        "filename": "envelope-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7885270fbdfdcbc2f913635af8d76e93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70439,
        "upload_time": "2021-03-04T12:15:31",
        "upload_time_iso_8601": "2021-03-04T12:15:31.234874Z",
        "url": "https://files.pythonhosted.org/packages/52/00/d6ebf795363c397513dc089ff906e24da2176f627611ffcd6e0551dae11c/envelope-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "952f6f44632fb799aa177574391ef30d0e8e1a3ea85f2593ce6de877bd40d6e2",
          "md5": "e1a715b14398a67688be8e754ed9a942",
          "sha256": "5076b0bdda35aa0deb1347ecd58b3952b9bcb8d88034f6cc2b3ceb3c7dc30e27"
        },
        "downloads": -1,
        "filename": "envelope-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e1a715b14398a67688be8e754ed9a942",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70781,
        "upload_time": "2021-06-03T10:53:27",
        "upload_time_iso_8601": "2021-06-03T10:53:27.107921Z",
        "url": "https://files.pythonhosted.org/packages/95/2f/6f44632fb799aa177574391ef30d0e8e1a3ea85f2593ce6de877bd40d6e2/envelope-1.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14d8c5df37d69c3d5205b36fd57b31b1f0dfc0e6016597d995ce2b768384a108",
          "md5": "f2bb669960997a342369998bde658570",
          "sha256": "3ad740c63de8c8dd674d4ae54d2b3a83453000020845600afb11005a975c91d9"
        },
        "downloads": -1,
        "filename": "envelope-1.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f2bb669960997a342369998bde658570",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70774,
        "upload_time": "2021-08-02T12:31:10",
        "upload_time_iso_8601": "2021-08-02T12:31:10.630896Z",
        "url": "https://files.pythonhosted.org/packages/14/d8/c5df37d69c3d5205b36fd57b31b1f0dfc0e6016597d995ce2b768384a108/envelope-1.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9059bd3720ac3b3e53e01d9a1bfdeb64aee9fbf0e6c7303dd5af09ae7a86571",
          "md5": "810cd568a7549e1d2685f2b4fccd5b47",
          "sha256": "fbf2afe5bf0fe52b53775e6047e62d4d686685d1eeba27fbd7fc49fdef5121ab"
        },
        "downloads": -1,
        "filename": "envelope-1.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "810cd568a7549e1d2685f2b4fccd5b47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 73295,
        "upload_time": "2022-04-04T15:44:37",
        "upload_time_iso_8601": "2022-04-04T15:44:37.792544Z",
        "url": "https://files.pythonhosted.org/packages/b9/05/9bd3720ac3b3e53e01d9a1bfdeb64aee9fbf0e6c7303dd5af09ae7a86571/envelope-1.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4475edf7a28baaad13810d5a80310c0ec8e0a09146b01a13a7fad201616410e",
          "md5": "1a9a861df6e93340113e8671d1893142",
          "sha256": "125f1a044aae251666444a9445de9671c1eb3a7f7b45e86418b213195f3faaca"
        },
        "downloads": -1,
        "filename": "envelope-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a9a861df6e93340113e8671d1893142",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 74604,
        "upload_time": "2022-05-04T14:13:12",
        "upload_time_iso_8601": "2022-05-04T14:13:12.179335Z",
        "url": "https://files.pythonhosted.org/packages/b4/47/5edf7a28baaad13810d5a80310c0ec8e0a09146b01a13a7fad201616410e/envelope-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83e9374af3f252caaef82f14c0e915a01c14d04b21cf779f9f37ca5364812a5a",
          "md5": "bea4e5bdb3b1f0cc6bbb80e0d71a3e1e",
          "sha256": "7a23cad359e57fc067be69b7136b6ae3d88379f74eddfee6b79d023f861551a0"
        },
        "downloads": -1,
        "filename": "envelope-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bea4e5bdb3b1f0cc6bbb80e0d71a3e1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50450,
        "upload_time": "2022-11-21T15:12:28",
        "upload_time_iso_8601": "2022-11-21T15:12:28.347820Z",
        "url": "https://files.pythonhosted.org/packages/83/e9/374af3f252caaef82f14c0e915a01c14d04b21cf779f9f37ca5364812a5a/envelope-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24cf55d0fe0fd5f2992117cc6d01c54b11dec79be79328a0bf005bb4932fc84e",
          "md5": "81a49a1bede926194d7cf57cd93cb296",
          "sha256": "d8d8642106ef2408b0662c0938e8a10d6be0458e129e594131b507378be67725"
        },
        "downloads": -1,
        "filename": "envelope-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "81a49a1bede926194d7cf57cd93cb296",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 75783,
        "upload_time": "2022-11-21T15:12:30",
        "upload_time_iso_8601": "2022-11-21T15:12:30.445764Z",
        "url": "https://files.pythonhosted.org/packages/24/cf/55d0fe0fd5f2992117cc6d01c54b11dec79be79328a0bf005bb4932fc84e/envelope-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94ac4ec86c0374c7a2e96b411d128f16a0c5e9d46f3dcecc23352f62d079960",
          "md5": "fd7a7b31ce0434791e156a51abac46f6",
          "sha256": "be1774cc49d32ec8799b1cfcf64358d4752d350747922e91bd20c190511e740e"
        },
        "downloads": -1,
        "filename": "envelope-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd7a7b31ce0434791e156a51abac46f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 53279,
        "upload_time": "2022-11-25T13:40:53",
        "upload_time_iso_8601": "2022-11-25T13:40:53.024072Z",
        "url": "https://files.pythonhosted.org/packages/a9/4a/c4ec86c0374c7a2e96b411d128f16a0c5e9d46f3dcecc23352f62d079960/envelope-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d740321ba1a553d96a4eafc475783b08ad09225ee5058d9c4dbde9e0dd0398ac",
          "md5": "eeccd938fe1835d86ff22a98bf5b8380",
          "sha256": "e19cf568e723919b532f26c8829058418a97a17fcab26fddf1c8bbfc741f831d"
        },
        "downloads": -1,
        "filename": "envelope-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eeccd938fe1835d86ff22a98bf5b8380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 78695,
        "upload_time": "2022-11-25T13:40:55",
        "upload_time_iso_8601": "2022-11-25T13:40:55.493044Z",
        "url": "https://files.pythonhosted.org/packages/d7/40/321ba1a553d96a4eafc475783b08ad09225ee5058d9c4dbde9e0dd0398ac/envelope-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a94ac4ec86c0374c7a2e96b411d128f16a0c5e9d46f3dcecc23352f62d079960",
        "md5": "fd7a7b31ce0434791e156a51abac46f6",
        "sha256": "be1774cc49d32ec8799b1cfcf64358d4752d350747922e91bd20c190511e740e"
      },
      "downloads": -1,
      "filename": "envelope-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd7a7b31ce0434791e156a51abac46f6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 53279,
      "upload_time": "2022-11-25T13:40:53",
      "upload_time_iso_8601": "2022-11-25T13:40:53.024072Z",
      "url": "https://files.pythonhosted.org/packages/a9/4a/c4ec86c0374c7a2e96b411d128f16a0c5e9d46f3dcecc23352f62d079960/envelope-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d740321ba1a553d96a4eafc475783b08ad09225ee5058d9c4dbde9e0dd0398ac",
        "md5": "eeccd938fe1835d86ff22a98bf5b8380",
        "sha256": "e19cf568e723919b532f26c8829058418a97a17fcab26fddf1c8bbfc741f831d"
      },
      "downloads": -1,
      "filename": "envelope-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "eeccd938fe1835d86ff22a98bf5b8380",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 78695,
      "upload_time": "2022-11-25T13:40:55",
      "upload_time_iso_8601": "2022-11-25T13:40:55.493044Z",
      "url": "https://files.pythonhosted.org/packages/d7/40/321ba1a553d96a4eafc475783b08ad09225ee5058d9c4dbde9e0dd0398ac/envelope-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}