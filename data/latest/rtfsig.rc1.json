{
  "info": {
    "author": "David Cannings",
    "author_email": "david@edeca.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security"
    ],
    "description": "# Introduction\n\nThis tool is designed to make it easy to signature potentially unique parts of RTF files.\n\nIt was written by David Cannings (@edeca) and released by PwC UK under the Apache 2.0 license.  \n\nTo install, you'll need Python 3 and some basic libraries. These are handled automatically if you install using `pip`:\n\n    $ pip install rtfsig\n\nThen run like:\n\n    $ rtfsig -f badfile.rtf -y output.yar\n\nThis will scan the file for potentially unique RTF tags, print details to screen and save a Yara rule to `output.yar`.\n\nPlease raise bugs as Github issues, and note this tool is in beta.\n\n# Output\n\n## Console\n\nBasic output is shown on the console, which can be used to search VirusTotal (try a search like `content:rsid7043998`).\n\n    -> % rtfsig -f 0b06052d3b5954594cf0e28bd9c50d9110eb8fb78cb78c9a99686eb4ba3391df.hostile\n    INFO:root:Starting to parse file 0b06052d3b5954594cf0e28bd9c50d9110eb8fb78cb78c9a99686eb4ba3391df.hostile\n    INFO:root:Non-standard RTF magic marker, should be {\\rtf1, often a sign of malicious docs\n    INFO:root:Found an RSID table in this document\n    INFO:root:Found 1 embedded image(s) with set height/width\n    INFO:root:Found 2 document information group tags\n    INFO:root:Interesting strings (higher chance of FP): \\rsid7043998, \\rsid7476075, insrsid7043998, \\rsid10243744, \\rsid7604251, insrsid10243744, {\\author blue}, rsidroot10243744, \\rsid9200135, tblrsid10243744, charrsid10243744, \\picw1\\pich1\\picwgoal1\\pichgoal1 , pararsid10243744, \\rsid7238080, insrsid7476075, \\rsid11666446, insrsid12343406, \\rsid12343406, {\\operator blue}\n    INFO:root:Found some unique strings!  Consider using vtgrep or deploying Yara rules\n\nDebug output can be generated using `-v` which is helpful if you are reporting a bug.\n\n## Yara rules\n\nThe tool will automatically generate Yara rules if the `-y` option is passed.  Two Yara rules are created, one which should generate low false positives (`strict_rule`) and one which may have a higher false positive rate (`loose_rule`).\n\nIt is recommended to review strings carefully and to change `any of them` to a sensible number, for example `3 of them`.\n\nAn example rule generated from `0b06052d3b5954594cf0e28bd9c50d9110eb8fb78cb78c9a99686eb4ba3391df` looks like:\n\n    rule loose_rule {\n      meta:\n        description = \"RTF file matching known unique identifiers (higher chance of FP, adjust 'any of them' if required)\"\n        generated_by = \"rtfsig version 0.0.2\"\n\n      strings:\n        $ = \"{\\\\author blue}\" ascii\n        $ = \"\\\\rsid7238080\" ascii\n        $ = \"pararsid10243744\" ascii\n        $ = \"insrsid7043998\" ascii\n        $ = \"\\\\rsid7043998\" ascii\n        $ = \"rsidroot10243744\" ascii\n        $ = \"\\\\rsid9200135\" ascii\n        $ = \"\\\\rsid7604251\" ascii\n        $ = \"insrsid7476075\" ascii\n        $ = \"\\\\rsid10243744\" ascii\n        $ = \"insrsid12343406\" ascii\n        $ = \"{\\\\operator blue}\" ascii\n        $ = \"insrsid10243744\" ascii\n        $ = \"charrsid10243744\" ascii\n        $ = \"\\\\rsid11666446\" ascii\n        $ = \"\\\\rsid12343406\" ascii\n        $ = \"\\\\picw1\\\\pich1\\\\picwgoal1\\\\pichgoal1 \" ascii\n        $ = \"tblrsid10243744\" ascii\n        $ = \"\\\\rsid7476075\" ascii\n\n      condition:\n        uint32be(0) == 0x7b5c7274 and any of them\n    }\n\n    rule strict_rule {\n      meta:\n        description = \"RTF file matching known unique identifiers (lower chance of FP)\"\n        generated_by = \"rtfsig version 0.0.2\"\n\n      strings:\n        $ = \"\\\\rsid7043998\\\\rsid7238080\\\\rsid7476075\\\\rsid7604251\\\\rsid9200135\\\\rsid10243744\\\\rsid11666446\\\\rsid12343406\" ascii\n\n      condition:\n        uint32be(0) == 0x7b5c7274 and any of them\n    }\n\n# Known limitations\n\n* At present, documents containing lots of obfuscation (e.g. comments between control words and their values) may \nnot be parsed correctly. Please raise an issue with sample files for further inspection.\n\n# Contributing\n\nTo setup a development environment, clone the git repository and run the following inside a virtualenv:\n\n    $ pip install -e \".[dev]\"\n\nBefore submitting a pull request, please check all tests pass and there is 100% coverage of the core module.\n\nThis is as simple as running tox and checking the output:\n\n    $ tox\n    .. tool output ..\n\n    py37: commands succeeded\n    congratulations :)\n\n# Version history\n\n* v0.0.1 (18th October 2019) - Initial version, supports RSID control words and generating Yara rules\n* v0.0.2 (23rd October 2019) - Second beta, added support for unique image identifiers and document information\n* v0.0.3 (23rd October 2019) - Third beta, added support for picture sizes\n* v0.1.0 (19th September 2020) - First public release, packaged as a Python module for PyPI\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PwCUK-CTO/rtfsig",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rtfsig",
    "package_url": "https://pypi.org/project/rtfsig/",
    "platform": "",
    "project_url": "https://pypi.org/project/rtfsig/",
    "project_urls": {
      "Homepage": "https://github.com/PwCUK-CTO/rtfsig"
    },
    "release_url": "https://pypi.org/project/rtfsig/0.1.0/",
    "requires_dist": [
      "Jinja2 (==2.11.2)",
      "black ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "plyara ; extra == 'dev'",
      "pylint ; extra == 'tests'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "plyara ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Extract potentially unique strings from RTF files for threat hunting",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8235718,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4755ffc9135e3d88e31a35cb112599b3786f02abc37c53c1be8f619d61bc0ef3",
          "md5": "e04984c9939f3788160407c5e3529add",
          "sha256": "8a92fbe469840a86395b96bf45eba79adac62998437979d9a3f4db4a1ebb27f8"
        },
        "downloads": -1,
        "filename": "rtfsig-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e04984c9939f3788160407c5e3529add",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15382,
        "upload_time": "2020-09-21T14:29:56",
        "upload_time_iso_8601": "2020-09-21T14:29:56.538791Z",
        "url": "https://files.pythonhosted.org/packages/47/55/ffc9135e3d88e31a35cb112599b3786f02abc37c53c1be8f619d61bc0ef3/rtfsig-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccd9ba16338eafc7ebb621fab25b7541ee24f20387f57ae4911db9bd29f7ef8f",
          "md5": "4d53c1c2d004bef1ea2c4590c6e436a5",
          "sha256": "006ac623d956c73bfd659c319b855b6826b040f3d0273fa4986433213619342c"
        },
        "downloads": -1,
        "filename": "rtfsig-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d53c1c2d004bef1ea2c4590c6e436a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11350,
        "upload_time": "2020-09-21T14:29:58",
        "upload_time_iso_8601": "2020-09-21T14:29:58.820684Z",
        "url": "https://files.pythonhosted.org/packages/cc/d9/ba16338eafc7ebb621fab25b7541ee24f20387f57ae4911db9bd29f7ef8f/rtfsig-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4755ffc9135e3d88e31a35cb112599b3786f02abc37c53c1be8f619d61bc0ef3",
        "md5": "e04984c9939f3788160407c5e3529add",
        "sha256": "8a92fbe469840a86395b96bf45eba79adac62998437979d9a3f4db4a1ebb27f8"
      },
      "downloads": -1,
      "filename": "rtfsig-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e04984c9939f3788160407c5e3529add",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15382,
      "upload_time": "2020-09-21T14:29:56",
      "upload_time_iso_8601": "2020-09-21T14:29:56.538791Z",
      "url": "https://files.pythonhosted.org/packages/47/55/ffc9135e3d88e31a35cb112599b3786f02abc37c53c1be8f619d61bc0ef3/rtfsig-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccd9ba16338eafc7ebb621fab25b7541ee24f20387f57ae4911db9bd29f7ef8f",
        "md5": "4d53c1c2d004bef1ea2c4590c6e436a5",
        "sha256": "006ac623d956c73bfd659c319b855b6826b040f3d0273fa4986433213619342c"
      },
      "downloads": -1,
      "filename": "rtfsig-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d53c1c2d004bef1ea2c4590c6e436a5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11350,
      "upload_time": "2020-09-21T14:29:58",
      "upload_time_iso_8601": "2020-09-21T14:29:58.820684Z",
      "url": "https://files.pythonhosted.org/packages/cc/d9/ba16338eafc7ebb621fab25b7541ee24f20387f57ae4911db9bd29f7ef8f/rtfsig-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}