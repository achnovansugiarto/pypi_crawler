{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Eclipse Public License 1.0 (EPL-1.0)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "Soupmatchers\n============\n\nThis is a library to make writing tests for HTML content straightforward and\nrobust.\n\nThe naÃ¯ve way of doing this would be to do things such as assert that your HTML\ncontains the string\n\n  >>> html = ('<a href=\"https://launchpad.net/testtools\" '\n  ...     'class=\"awesome\">testtools <b>rocks</b></a>')\n\nwhich can easily break if you make small changes such as adding a CSS class\nwhich is irrelevant to the test, or your templating library changes to\nsort attributes in alphabetical order.\n\nObviously working on the parse tree would be better, and BeautifulSoup is\npart of the way to do that.\n\nBeautifulSoup\n-------------\n\n  >>> import bs4\n  >>> root = bs4.BeautifulSoup(html, \"html.parser\")\n\nIt is an HTML parsing library that includes\na way to search the document for matching tags. If you had a parsed\nrepresentation of your document you could find the above part by doing\n\n  >>> import re\n  >>> anchor_tags = root.find_all(\n  ...    \"a\", attrs={\"href\": \"https://launchpad.net/testtools\",\n  ...        \"class\": \"awesome\"})\n  >>> print(anchor_tags)\n  [<a class=\"awesome\" href=\"https://launchpad.net/testtools\">testtools <b>rocks</b></a>]\n\nwhich would return you a list with (let's assume) a single entry, the\nbs4.Tag for the <a>. You can locate the nested tag with:\n\n  >>> anchor_tag = anchor_tags[0]\n  >>> anchor_tag.find_all(\"b\")\n  [<b>rocks</b>]\n\nwhich will again return a single item list.\n\nWhile this is useful to be able to more robustly identify parts of the document\nit doesn't exactly lend itself to testing. For that we need some methods for\nchecking a document against a specification.\n\nMatchers\n--------\n\nHere's where the beauty of testtools comes in. Instead of providing yet\nanother TestCase subclass that you somehow have to work in to your test\nclass Hierarchy, we just define a set of testtools.Matcher classes.\n\nIf you use testtools then you can easily make use of these in your tests\nwith assertThat. If not then they have a simple interface that is easy to\nmake use of in your test classes.\n\nLet's demonstrate.\n\nFirst we'll show how to create a matcher that will check that our document\ncontains at least a link to the testtools Launchpad page, and this link\nhas a certain css class, and mentions testtools in the anchor text.\n\n  >>> import soupmatchers\n  >>> print(soupmatchers.Tag(\n  ...     \"link to testtols\", \"a\",\n  ...     attrs={\"href\": \"https://launchpad.net/testtools\",\n  ...         \"class\": \"awesome\"}))\n  Tag(\"link to testtols\",\n  <a class='awesome' href='https://launchpad.net/testtools' ...>...</a>)\n\nThis may look rather familiar.\n\nNote that the text representation of the soupmatchers.Tag object isn't\nwhat will be literally matched, it is just an attempt to express the things\nthat will be matched.\n\nFurther though, soupmatchers allows you to specify text that the\ntag must contain to match.\n\n  >>> print(soupmatchers.Tag(\n  ...     \"link to testtools\", \"a\",\n  ...     attrs={\"href\": \"https://launchpad.net/testtools\",\n  ...            \"class\": \"awesome\"}, text=re.compile(r\"testtools\")))\n  Tag(\"link to testtools\",\n  <a class='awesome' href='https://launchpad.net/testtools'\n  ...>re.compile('testtools') ...</a>)\n\nNow lets define a create a matcher that will match the bold tag from above.\n\n  >>> print(soupmatchers.Tag(\"bold rocks\", \"b\", text=\"rocks\"))\n  Tag(\"bold rocks\", <b ...>rocks ...</b>)\n\nObviously this would allow the bold tag to be outside of the anchor tag, but\nno fear, we can create a matcher that will check that one is inside the\nother, simply use the Within matcher to combine the two.\n\n  >>> print(soupmatchers.Within(\n  ...     soupmatchers.Tag(\n  ...         \"link to testtools\", \"a\",\n  ...         attrs={\"href\": \"https://launchpad.net/testtools\",\n  ...                \"class\": \"awesome\"}, text=re.compile(r\"testtools\")),\n  ...     soupmatchers.Tag(\"bold rocks\", \"b\", text=\"rocks\")))\n  Tag(\"bold rocks\", <b ...>rocks ...</b>) within Tag(\"link to testtools\",\n  <a class='awesome' href='https://launchpad.net/testtools'\n  ...>re.compile('testtools') ...</a>)\n\nthis will mean that the first matcher will only match if the second matcher\nmatches the part of the parse tree rooted at the first match.\n\nThese matchers are working on the parsed representation, but that doesn't\nmean you have to go to the trouble of parsing every time you want to use\nthem. To simplify that you can use\n\n  >>> print(soupmatchers.HTMLContains(\n  ...     soupmatchers.Tag(\"some image\", \"image\")))\n  HTML contains [Tag(\"some image\", <image ...>...</image>)]\n\nto create a matcher that will parse the string before checking the tag\nagainst it.\n\nGiven that you will often want to check multiple things about the HTML\nyou can pass multiple soupmatchers.Tag objects to the constructor of\nsoupmatchers.HTMLContains, and the resulting matcher will only match\nif all of the passed matchers match.\n\nUsing Matchers\n--------------\n\nThis hasn't explained how to use the matcher objects though, for that you\nneed to make use of their match() method.\n\n  >>> import testtools\n  >>> matcher = testtools.matchers.Equals(1)\n  >>> match = matcher.match(1)\n  >>> print(match)\n  None\n\nthe returned match will be None if the matcher matches the content that\nyou passed, otherwise it will be a testtools.Mismatch object. To put\nthis in unittest language\n\n  match = matcher.match(content)\n  self.assertEquals(None, match)\n\nor, if you subclass testtools.TestCase,\n\n  self.assertThat(content, matcher)\n\nTesting Responses\n-----------------\n\nFor those that use a framework that has test response objects, you can even\ngo a step further and check the whole response in one go.\n\nThe soupmatchers.ResponseHas matcher class will check the response_code\nattribute of the passed object against an expected value, and also check\nthe content attribute against any matcher you wish to specify.\n\n  >>> print(soupmatchers.ResponseHas(\n  ...     status_code=404,\n  ...     content_matches=soupmatchers.HTMLContains(soupmatchers.Tag(\n  ...         \"an anchor\", \"a\"))))\n  ResponseHas(status_code=404, content_matches=HTML contains\n  [Tag(\"an anchor\", <a ...>...</a>)])\n\nwhere the status_code parameter defaults to 200.\n\nAs working with HTML is very common, there's an easier way to write the\nabove.\n\n  >>> print(soupmatchers.HTMLResponseHas(\n  ...     status_code=404, html_matches=soupmatchers.Tag(\"an anchor\", \"a\")))\n  HTMLResponseHas(status_code=404, content_matches=HTML contains\n  [Tag(\"an anchor\", <a ...>...</a>)])\n\nLater similar objects will be added for dealing with XML and JSON.\n\nThis matcher is designed to work with Django, but will work with any object\nthat has those two attributes.\n\nPutting it all together we could do the original check using\n\n  >>> class ExpectedResponse(object):\n  ...     status_code = 200\n  ...     content = html\n  >>> class UnexpectedResponse(object):\n  ...     status_code = 200\n  ...     content = \"<h1>This is some other response<h1>\"\n\n  >>> child_matcher = soupmatchers.Tag(\"bold rocks\", \"b\", text=\"rocks\")\n  >>> anchor_matcher = soupmatchers.Tag(\n  ...     \"testtools link\", \"a\",\n  ...     attrs={\"href\": \"https://launchpad.net/testtools\",\n  ...            \"class\": \"awesome\"},\n  ...     text=re.compile(r\"testtools\"))\n  >>> combined_matcher = soupmatchers.Within(anchor_matcher, child_matcher)\n  >>> response_matcher = soupmatchers.HTMLResponseHas(\n  ...     html_matches=combined_matcher)\n  >>> #self.assertThat(response, response_matcher)\n  >>> match = response_matcher.match(ExpectedResponse())\n  >>> print(match)\n  None\n  >>> match = response_matcher.match(UnexpectedResponse())\n  >>> print(repr(match)) #doctest: +ELLIPSIS\n  <soupmatchers.TagMismatch object at ...>\n  >>> print(match.describe())\n  Matched 0 times\n  Here is some information that may be useful:\n    0 matches for \"bold rocks\" in the document.\n    0 matches for \"testtools link\" in the document.\n\nwhich while verbose is checking lots of things, while being maintainable\ndue to not being overly tied to particular textual output.\n\nChecking the number of times a pattern is matched\n-------------------------------------------------\n\nRemember how find_all returned a list, and we just assumed that it only found\none tag in the example? Well, the matchers allow you to not just assume that,\nthey allow you to assert that. That means that you can assert that\na particular tag only occurs once by passing\n\n  count=1\n\nin the constructor.\n\n  >>> tag_matcher = soupmatchers.Tag(\"testtools link\", \"a\",\n  ...    attrs={\"href\": \"https://launchpad.net/testtools\"}, count=1)\n  >>> html_matcher = soupmatchers.HTMLContains(tag_matcher)\n  >>> content = '<a href=\"https://launchpad.net/testtools\"></a>'\n  >>> match = html_matcher.match(content)\n  >>> print(match)\n  None\n  >>> match = html_matcher.match(content * 2)\n  >>> print(match.describe())\n  Matched 2 times\n  The matches were:\n    <a href=\"https://launchpad.net/testtools\"></a>\n    <a href=\"https://launchpad.net/testtools\"></a>\n\nSimilarly you can assert that a particular tag isn't present by\ncreating a soupmatchers.Tag with\n\n  count=0\n\n  >>> tag_matcher = soupmatchers.Tag(\"testtools link\", \"a\",\n  ...    attrs={\"href\": \"https://launchpad.net/testtools\"}, count=0)\n  >>> html_matcher = soupmatchers.HTMLContains(tag_matcher)\n  >>> content = '<a href=\"https://launchpad.net/testtools\"></a>'\n  >>> match = html_matcher.match(content)\n  >>> print(match.describe())\n  Matched 1 time\n  The match was:\n    <a href=\"https://launchpad.net/testtools\"></a>\n\nIf you wish to assert only that a tag matches at least a given number of\ntimes, or at most a given number of times, then you will have to propose\na change to the code to allow that.\n\nFailure Messages\n----------------\n\nAs Tag only specifies a pattern to match, when something goes wrong it is\nhard to know what information will be useful to someone reading the output.\n\nA bad thing to do is to print the entire HTML document, as it can often be\nlarge and so obscure the failure message. Sometimes though looking at\nthe HTML is the best way to find the problem. For that reason the Mismatch\ncan provide the entire document to you. If you call get_details() on the\nMismatch you will get a dict that contains the html as the value for\nthe \"html\" key.\n\n  >>> matcher = soupmatchers.HTMLContains(soupmatchers.Tag(\"bold\", \"b\"))\n  >>> mismatch = matcher.match(\"<image></image>\")\n  >>> print(list(mismatch.get_details().keys()))\n  ['html']\n  >>> print(''.join(list(mismatch.get_details()[\"html\"].iter_text())))\n  <image></image>\n\nIf you use assertThat then it will automatically call addDetails with this\ninformation, so it is available to the TestResult. Your test runner can\nthen do something useful with this if it likes.\n\nThat leaves the question of what to print in the failure message though.\n\nIf there are any matches at all then you want to see the string that matched.\nThis is particularly useful when there are too many matches, but also when\nyou expect multiple matches, but less are found then knowing which matched\ncan narrow the search.\n\n  >>> matcher = soupmatchers.HTMLContains(soupmatchers.Tag(\n  ...        \"no bold\", \"b\", count=0))\n  >>> mismatch = matcher.match(\"<b>rocks</b>\")\n  >>> print(mismatch.describe())\n  Matched 1 time\n  The match was:\n      <b>rocks</b>\n\nIf there aren't enough matches then the failure message will attempt to\ntell you about the closest matches, in the hope that one of them gives a\nclue as to the problem.\n\n  >>> matcher = soupmatchers.HTMLContains(\n  ...    soupmatchers.Tag(\"testtools link\", \"a\",\n  ...        attrs={\"href\": \"https://launchpad.net/testtools\",\n  ...               \"class\": \"awesome\"}))\n  >>> mismatch = matcher.match(\n  ...    \"<a href='https://launchpad.net/testtools'></a>\")\n  >>> print(mismatch.describe())\n  Matched 0 times\n  Here is some information that may be useful:\n     1 matches for \"testtools link\" when attribute class=\"awesome\" is not a\n     requirement.\n\n  >>> matcher = soupmatchers.HTMLContains(\n  ...    soupmatchers.Tag(\"bold rocks\", \"b\", text=\"rocks\"))\n  >>> mismatch = matcher.match(\n  ...    \"<b>is awesome</b>\")\n  >>> print(mismatch.describe())\n  Matched 0 times\n  Here is some information that may be useful:\n    1 matches for \"bold rocks\" when text=\"rocks\" is not a requirement.\n\nWhile this will often fail to tell you much that will help you diagnose the\nproblem it should be possible to write your matchers in such a way that the\noutput is generally useful.\n\nRestricting matches to particular areas of the document\n-------------------------------------------------------\n\nOften you want to assert that some HTML is contained within a particular\npart of the document. At the simplest level you may want to check that\nthe HTML is within the <body> tag.\n\nIt is possible to specify that some Tag is within another by combining\nthem in the Within matcher.\n\n  >>> child_matcher = soupmatchers.Tag(\"bold rocks\", \"b\", text=\"rocks\")\n  >>> body_matcher = soupmatchers.Tag(\"the body\", \"body\")\n  >>> matcher = soupmatchers.HTMLContains(\n  ...     soupmatchers.Within(body_matcher, child_matcher))\n  >>> print(matcher)\n  HTML contains [Tag(\"bold rocks\", <b ...>rocks ...</b>)\n  within Tag(\"the body\", <body ...>...</body>)]\n  >>> mismatch = matcher.match(\"<b>rocks</b><body></body>\")\n  >>> print(mismatch.describe())\n  Matched 0 times\n  Here is some information that may be useful:\n    1 matches for \"bold rocks\" in the document.\n    1 matches for \"the body\" in the document.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://launchpad.net/soupmatchers",
    "keywords": "",
    "license": "Eclipse Public License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "soupmatchers",
    "package_url": "https://pypi.org/project/soupmatchers/",
    "platform": "",
    "project_url": "https://pypi.org/project/soupmatchers/",
    "project_urls": {
      "Homepage": "http://launchpad.net/soupmatchers"
    },
    "release_url": "https://pypi.org/project/soupmatchers/0.5/",
    "requires_dist": [
      "testtools (>0.9.3)",
      "beautifulsoup4"
    ],
    "requires_python": "",
    "summary": "Matchers for checking parts of a HTML parse tree",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12861595,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29b73c436ddee6f8488d9c0c6721e65e4e45e25534edd88c5b27b21d8cf93800",
          "md5": "2154b38d81b007cdc0caa80d3b0c40f3",
          "sha256": "7d4040fb7612134cd14587c60531bb71231dae94a273788e0808092a180dcec9"
        },
        "downloads": -1,
        "filename": "soupmatchers-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "2154b38d81b007cdc0caa80d3b0c40f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36788,
        "upload_time": "2012-02-08T00:51:07",
        "upload_time_iso_8601": "2012-02-08T00:51:07.165872Z",
        "url": "https://files.pythonhosted.org/packages/29/b7/3c436ddee6f8488d9c0c6721e65e4e45e25534edd88c5b27b21d8cf93800/soupmatchers-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54c6d6180709d064e9a410c6c192742b00c6a9f6b8736adfce432cf80050f172",
          "md5": "4e28bf81e2e139f2db20126acacd85c6",
          "sha256": "d65c682faf4151bcfd691d6b1354801c84df634f76fa78cb25ad05414c553b8b"
        },
        "downloads": -1,
        "filename": "soupmatchers-0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "4e28bf81e2e139f2db20126acacd85c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36717,
        "upload_time": "2012-02-08T01:44:08",
        "upload_time_iso_8601": "2012-02-08T01:44:08.495381Z",
        "url": "https://files.pythonhosted.org/packages/54/c6/d6180709d064e9a410c6c192742b00c6a9f6b8736adfce432cf80050f172/soupmatchers-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2a313fc95087e904a7085bea8c26a0ef47735d54440f09456381397ac976d62",
          "md5": "80b823e12c05974df19bd78cb4d428e7",
          "sha256": "4dfa19197350d5aa2670bf2a1582b125f37a39c07348e54da97d3b563375e5b4"
        },
        "downloads": -1,
        "filename": "soupmatchers-0.3.tar.gz",
        "has_sig": true,
        "md5_digest": "80b823e12c05974df19bd78cb4d428e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15312,
        "upload_time": "2018-05-18T16:05:41",
        "upload_time_iso_8601": "2018-05-18T16:05:41.274722Z",
        "url": "https://files.pythonhosted.org/packages/e2/a3/13fc95087e904a7085bea8c26a0ef47735d54440f09456381397ac976d62/soupmatchers-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "783cd78cba87bb9387c3e17f6f51bf242e3cb67a8a7e03b2af487e858462e0a7",
          "md5": "4aac56d78f7ddb058faa4357d8ffa53f",
          "sha256": "9fc289ad51c8a9a108e64bf7d71f400c26b3a35559c78a3fec2c9a74cdbcf57b"
        },
        "downloads": -1,
        "filename": "soupmatchers-0.4.tar.gz",
        "has_sig": true,
        "md5_digest": "4aac56d78f7ddb058faa4357d8ffa53f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15400,
        "upload_time": "2018-05-18T19:08:59",
        "upload_time_iso_8601": "2018-05-18T19:08:59.608143Z",
        "url": "https://files.pythonhosted.org/packages/78/3c/d78cba87bb9387c3e17f6f51bf242e3cb67a8a7e03b2af487e858462e0a7/soupmatchers-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12f664f309bf8bb5ccafb3366c9042c1f5ff9c6878a58606cbab6b277d341eaa",
          "md5": "06983f0a13e0fb98132bc40542eafd9c",
          "sha256": "83b3fff72b908bbe49b8d16d3b0f4ced211d1747fa31c15e562ae31b1a9835e3"
        },
        "downloads": -1,
        "filename": "soupmatchers-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06983f0a13e0fb98132bc40542eafd9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10444,
        "upload_time": "2022-02-11T14:07:23",
        "upload_time_iso_8601": "2022-02-11T14:07:23.832760Z",
        "url": "https://files.pythonhosted.org/packages/12/f6/64f309bf8bb5ccafb3366c9042c1f5ff9c6878a58606cbab6b277d341eaa/soupmatchers-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6cd323a928ae4ae48fd6b61165dab51d4e4c57e49a35a5b008f887b91331c90",
          "md5": "1a3a1ad7bdcf638c9f36c21955ea92ba",
          "sha256": "65014d0565075fa69becf5d0696181ad15450f29173ec9824048bba2385deb4a"
        },
        "downloads": -1,
        "filename": "soupmatchers-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1a3a1ad7bdcf638c9f36c21955ea92ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19516,
        "upload_time": "2022-02-11T14:07:25",
        "upload_time_iso_8601": "2022-02-11T14:07:25.401834Z",
        "url": "https://files.pythonhosted.org/packages/e6/cd/323a928ae4ae48fd6b61165dab51d4e4c57e49a35a5b008f887b91331c90/soupmatchers-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12f664f309bf8bb5ccafb3366c9042c1f5ff9c6878a58606cbab6b277d341eaa",
        "md5": "06983f0a13e0fb98132bc40542eafd9c",
        "sha256": "83b3fff72b908bbe49b8d16d3b0f4ced211d1747fa31c15e562ae31b1a9835e3"
      },
      "downloads": -1,
      "filename": "soupmatchers-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06983f0a13e0fb98132bc40542eafd9c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10444,
      "upload_time": "2022-02-11T14:07:23",
      "upload_time_iso_8601": "2022-02-11T14:07:23.832760Z",
      "url": "https://files.pythonhosted.org/packages/12/f6/64f309bf8bb5ccafb3366c9042c1f5ff9c6878a58606cbab6b277d341eaa/soupmatchers-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6cd323a928ae4ae48fd6b61165dab51d4e4c57e49a35a5b008f887b91331c90",
        "md5": "1a3a1ad7bdcf638c9f36c21955ea92ba",
        "sha256": "65014d0565075fa69becf5d0696181ad15450f29173ec9824048bba2385deb4a"
      },
      "downloads": -1,
      "filename": "soupmatchers-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1a3a1ad7bdcf638c9f36c21955ea92ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19516,
      "upload_time": "2022-02-11T14:07:25",
      "upload_time_iso_8601": "2022-02-11T14:07:25.401834Z",
      "url": "https://files.pythonhosted.org/packages/e6/cd/323a928ae4ae48fd6b61165dab51d4e4c57e49a35a5b008f887b91331c90/soupmatchers-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}