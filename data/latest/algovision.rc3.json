{
  "info": {
    "author": "Felix Petersen",
    "author_email": "ads0399@felix-petersen.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# AlgoVision - A Framework for Differentiable Algorithms and Algorithmic Supervision\n\n![AlgoVision](docs/_static/algovision_logo.png)\n\nThis repository includes the official implementation of our NeurIPS 2021 Paper \"Learning with Algorithmic Supervision via Continuous Relaxations\"\n(Paper @ [ArXiv](https://arxiv.org/pdf/2110.05651.pdf),\nVideo @ [Youtube](https://www.youtube.com/watch?v=01ENzpkjOCE)).\n\n`algovision` is a Python 3.6+ and PyTorch 1.9.0+ based library for making algorithms differentiable. It can be installed via:\n```shell\npip install algovision\n```\nApplications include smoothly integrating algorithms into neural networks for algorithmic supervision, problem-specific optimization within an algorithm, and whatever your imagination allows.\n\n### [Check out the Documentation!](https://felix-petersen.github.io/algovision-docs/)\n\n## ðŸŒ± Intro\n\nDeriving a loss from a smooth algorithm can be as easy as\n\n```python\nfrom examples import get_bubble_sort\nimport torch\n\ntorch.manual_seed(0)\n# Get an array (the first dimension is the batch dimension, which is always required)\narray = torch.randn(1, 8, requires_grad=True)\n\nbubble_sort = get_bubble_sort(beta=5)\nresult, loss = bubble_sort(array)\n\nloss.backward()\nprint(array)\nprint(result)\nprint(array.grad)\n```\n\nHere, the loss is a sorting loss corresponding to the number of swaps in the bubble sort algorithm.\nBut we can also define this algorithm from scratch:\n\n```python\nfrom algovision import (\n    Algorithm, Input, Output, Var, VarInt,  # core\n    GT, IsTrue,                       # conditions\n    If, While, For,           # control_structures\n    Let, LetInt,                       # functions\n)\nimport torch\n\nbubble_sort = Algorithm(\n    # Define the variables the input corresponds to\n    Input('array'),\n    # Declare and initialize all differentiable variables \n    Var('a',        torch.tensor(0.)),\n    Var('b',        torch.tensor(0.)),\n    Var('swapped',  torch.tensor(1.)),\n    Var('loss',     torch.tensor(0.)),\n    # Declare and initialize a hard integer variable (VarInt) for the control flow.\n    # It can be defined in terms of a lambda expression. The required variables\n    # are automatically inferred from the signature of the lambda expression.\n    VarInt('n', lambda array: array.shape[1] - 1),\n    # Start a relaxed While loop:\n    While(IsTrue('swapped'),\n        # Set `swapped` to 0 / False\n        Let('swapped', 0),\n        # Start an unrolled For loop. Corresponds to `for i in range(n):`\n        For('i', 'n',\n            # Set `a` to the `i`th element of `array`\n            Let('a', 'array', ['i']),\n            # Using an inplace lambda expression, we can include computations \n            # based on variables to obtain the element at position i+1. \n            Let('b', 'array', [lambda i: i+1]),\n            # An If-Else statement with the condition a > b\n            If(GT('a', 'b'),\n               if_true=[\n                   # Set the i+1 th element of array to a\n                   Let('array', [lambda i: i + 1], 'a'),\n                   # Set the i th element of array to b\n                   Let('array', ['i'], 'b'),\n                   # Set swapped to 1 / True\n                   Let('swapped', 1.),\n                   # Increment the loss by 1 using a lambda expression\n                   Let('loss', lambda loss: loss + 1.),\n               ]\n           ),\n        ),\n        # Decrement the hard integer variable n by 1\n        LetInt('n', lambda n: n-1),\n    ),\n    # Define what the algorithm should return\n    Output('array'),\n    Output('loss'),\n    # Set the inverse temperature beta\n    beta=5,\n)\n```\n\n### ðŸ‘¾ Full Instruction Set\n\n<details>\n  <summary>(<i>click to expand</i>)</summary>\n\n\nThe full set of modules is:\n```python\nfrom algovision import (\n    Algorithm, Input, Output, Var, VarInt,                                          # core\n    Eq, NEq, LT, LEq, GT, GEq, CatProbEq, CosineSimilarity, IsTrue, IsFalse,  # conditions\n    If, While, For,                                                   # control_structures\n    Let, LetInt, Print, Min, ArgMin, Max, ArgMax,                              # functions\n)\n```\n`Algorithm` is the main class, `Input` and `Output` define arguments and return values, `Var` defines differentiable variables and `VarInt` defines non-differentiable integer variables.\n`Eq`, `LT`, etc. are relaxed conditions for `If` and `While`, which are respective control structures.\n`For` bounded loops of fixed length that are unrolled.\n`Let` sets a differentiable variable, `LetInt` sets a hard integer variable. \nNote that hard integer variables should only be used if they are independent of the input values, but they may depend on the input shape (e.g., for reducing the number of iterations after each traversal of a For loop).\n`Print` prints for debug purposes.\n`Min`, `ArgMin`, `Max`, and `ArgMax` return the element-wise min/max/argmin/argmax of a list of tensors (of equal shape).\n\n### Î» Lambda Expressions\n\nKey to defining an algorithm are `lambda` expressions (see [here](https://www.w3schools.com/python/python_lambda.asp) for a reference).\nThey allow defining anonymous functions and therefore allow expressing computations in-place.\nIn most cases in `algovision`, it is possible to write a value in terms of a lambda expressions.\nThe name of the used variable will be inferred from the signature of the expression.\nFor example, `lambda x: x**2` will take the variable named `x` and return the square of it at the location where the expression is written.\n\n`Let('z', lambda x, y: x**2 + y)` corresponds to the regular line of code `z = x**2 + y`.\nThis also allows inserting complex external functions including neural networks as part of the lambda expression.\nAssuming `net` is a neural networks, one can write `Let('y', lambda x: net(x))` (corresponding to `y = net(x)`).\n\n### Let\n\n`Let` is a very flexible instruction.\nIn its most simple form `Let` obtains two arguments, a string naming the variable where the result is written, and the value that may be expressed via a `lambda` expression.\n\nIf the lambda expression returns multiple values, e.g., because a complex function is called and has two return values, the left argument can be a list of strings. \nThat is, `Let(['a', 'b'], lamba x, y: (x+y, x-y))` corresponds to `a, b = x+y, x-y`.\n\n`Let` also supports indexing. This is denoted by an additional list argument after the left and/or the right argument.\nFor example, `Let('a', 'array', ['i'])` corresponds to `a = array[i]`, while `Let('array', ['i'], 'b')` corresponds to `array[i] = b`.\n`Let('array', ['i'], 'array', ['j'])` corresponding to `array[i] = array[j]` is also supported.\n\nNote that indexing can also be expressed through `lambda` expressions.\nFor example, `Let('a', 'array', ['i'])` is equivalent to `Let('a', lambda array, i: array[:, i])`. Note how in this case the batch dimension has to be explicitly taken into account (`[:, ]`).\nRelaxed indexing on the right-hand side is only supported through `lambda` expressions due to its complexity.\nRelaxed indexing on the left-hand side is supported if exactly one probability weight tensor is in the list (e.g., `Let('array', [lambda x: get_weights(x)], 'a')`).\n\n`LetInt` only supports setting the variable to an integer (Python `int`) or list of integers (as well as the same type via lambda expressions).\nNote that hard integer variables should only be used if they are independent of the input values, but they may depend on the input shape.\n\n> If you need help implementing your differentiable algorithm, you may [schedule an appointment](https://calendly.com/fpetersen/meeting). This will also help me improve the documentation and usability.\n\n</details>\n\n## ðŸ§ª Experiments\n\nThe experiments can be found in the `experiments` folder. Additional experiments will be added soon.\n\n### ðŸ”¬ Sorting Supervision\n\nThe sorting supervision experiment can be run with\n```shell\npython experiments/train_sort.py\n```\nor by checking out [this Colab notebook](https://colab.research.google.com/drive/1HYhbMh7hUyySOZqfQRlqxJhLQ_4_e5Fe?usp=sharing).\n\n## ðŸ“– Citing\n\nIf you used our library, please cite it as\n\n```bibtex\n@inproceedings{petersen2021learning,\n  title={{Learning with Algorithmic Supervision via Continuous Relaxations}},\n  author={Petersen, Felix and Borgelt, Christian and Kuehne, Hilde and Deussen, Oliver},\n  booktitle={Conference on Neural Information Processing Systems (NeurIPS)},\n  year={2021}\n}\n```\n\n## ðŸ“œ License\n\n`algovision` is released under the MIT license. See [LICENSE](LICENSE) for additional details.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Felix-Petersen/algovision",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "algovision",
    "package_url": "https://pypi.org/project/algovision/",
    "platform": "",
    "project_url": "https://pypi.org/project/algovision/",
    "project_urls": {
      "Homepage": "https://github.com/Felix-Petersen/algovision"
    },
    "release_url": "https://pypi.org/project/algovision/0.1.1/",
    "requires_dist": [
      "numpy",
      "torch (>=1.9.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "AlgoVision - A Framework for Differentiable Algorithms and Algorithmic Supervision",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12216230,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4d2c8f6accf9d6f6f11589de8df0d13146b9d9f5e54eaaf3506874f3a7ddcf8",
          "md5": "5e3f7f3929ec28a7aba4e5aac24f9a28",
          "sha256": "cdf27242c24fd6249854c34191a05e484acb7e6d944912167ab6cd420758fc0e"
        },
        "downloads": -1,
        "filename": "algovision-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e3f7f3929ec28a7aba4e5aac24f9a28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1113,
        "upload_time": "2021-11-05T20:16:15",
        "upload_time_iso_8601": "2021-11-05T20:16:15.472344Z",
        "url": "https://files.pythonhosted.org/packages/c4/d2/c8f6accf9d6f6f11589de8df0d13146b9d9f5e54eaaf3506874f3a7ddcf8/algovision-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ad5336713d943dc36d3d6ae36fd30182e7f8e66b7c83a5420fa3bc88045534a",
          "md5": "5c95595b6546671c7539f77133e8dff8",
          "sha256": "732b685ec591871ba44ae2805a786a656a6b7cd2ffbdd97f8c4856957ad6b514"
        },
        "downloads": -1,
        "filename": "algovision-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c95595b6546671c7539f77133e8dff8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 936,
        "upload_time": "2021-11-05T20:16:16",
        "upload_time_iso_8601": "2021-11-05T20:16:16.439990Z",
        "url": "https://files.pythonhosted.org/packages/2a/d5/336713d943dc36d3d6ae36fd30182e7f8e66b7c83a5420fa3bc88045534a/algovision-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fdbebda8554cd9dec02e558d3877be1ae2795a96004555046a35f4c2a9e21b9",
          "md5": "2259c2485b265ca693d7fa021329de16",
          "sha256": "5cd871d4153a422efc89c2b30f32fca6b5e926a77d809efc87f6a550722e5611"
        },
        "downloads": -1,
        "filename": "algovision-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2259c2485b265ca693d7fa021329de16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16262,
        "upload_time": "2021-12-05T14:51:43",
        "upload_time_iso_8601": "2021-12-05T14:51:43.356560Z",
        "url": "https://files.pythonhosted.org/packages/3f/db/ebda8554cd9dec02e558d3877be1ae2795a96004555046a35f4c2a9e21b9/algovision-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6033630b48856e2ff217941a25fc9a5d3f18fa30ab330fe6fc685be30c74ac1",
          "md5": "c96572f43f2fa1053de23dd001ec55dd",
          "sha256": "055eee6c57579c0906fcf83dce963ad5138a15288d1fad3d833ca48be2b4ae1c"
        },
        "downloads": -1,
        "filename": "algovision-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c96572f43f2fa1053de23dd001ec55dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17320,
        "upload_time": "2021-12-05T14:51:44",
        "upload_time_iso_8601": "2021-12-05T14:51:44.996967Z",
        "url": "https://files.pythonhosted.org/packages/f6/03/3630b48856e2ff217941a25fc9a5d3f18fa30ab330fe6fc685be30c74ac1/algovision-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f700aa6bb951c0246bd480373d48002698afc4337b92756b96e6d9073f2749eb",
          "md5": "8e59f0dbf5bc7a05fb3b055a6c793b76",
          "sha256": "38b57598f793bda66a93af32b40a2de1625ab7c7438a05997fa1d785bd1fa530"
        },
        "downloads": -1,
        "filename": "algovision-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e59f0dbf5bc7a05fb3b055a6c793b76",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16970,
        "upload_time": "2021-12-05T18:24:46",
        "upload_time_iso_8601": "2021-12-05T18:24:46.924631Z",
        "url": "https://files.pythonhosted.org/packages/f7/00/aa6bb951c0246bd480373d48002698afc4337b92756b96e6d9073f2749eb/algovision-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d4abadfcaa6cc72f232ec6aa8d064d185d736c34cee7ab4826b8fde0117081f",
          "md5": "0254154679e4dc537bf51678700760a4",
          "sha256": "e73470ce01ebac6026d43c0262580bbdca288f56619530017a74ec31ae2c0fbd"
        },
        "downloads": -1,
        "filename": "algovision-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0254154679e4dc537bf51678700760a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18077,
        "upload_time": "2021-12-05T18:24:48",
        "upload_time_iso_8601": "2021-12-05T18:24:48.059895Z",
        "url": "https://files.pythonhosted.org/packages/2d/4a/badfcaa6cc72f232ec6aa8d064d185d736c34cee7ab4826b8fde0117081f/algovision-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f700aa6bb951c0246bd480373d48002698afc4337b92756b96e6d9073f2749eb",
        "md5": "8e59f0dbf5bc7a05fb3b055a6c793b76",
        "sha256": "38b57598f793bda66a93af32b40a2de1625ab7c7438a05997fa1d785bd1fa530"
      },
      "downloads": -1,
      "filename": "algovision-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e59f0dbf5bc7a05fb3b055a6c793b76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16970,
      "upload_time": "2021-12-05T18:24:46",
      "upload_time_iso_8601": "2021-12-05T18:24:46.924631Z",
      "url": "https://files.pythonhosted.org/packages/f7/00/aa6bb951c0246bd480373d48002698afc4337b92756b96e6d9073f2749eb/algovision-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d4abadfcaa6cc72f232ec6aa8d064d185d736c34cee7ab4826b8fde0117081f",
        "md5": "0254154679e4dc537bf51678700760a4",
        "sha256": "e73470ce01ebac6026d43c0262580bbdca288f56619530017a74ec31ae2c0fbd"
      },
      "downloads": -1,
      "filename": "algovision-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0254154679e4dc537bf51678700760a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18077,
      "upload_time": "2021-12-05T18:24:48",
      "upload_time_iso_8601": "2021-12-05T18:24:48.059895Z",
      "url": "https://files.pythonhosted.org/packages/2d/4a/badfcaa6cc72f232ec6aa8d064d185d736c34cee7ab4826b8fde0117081f/algovision-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}