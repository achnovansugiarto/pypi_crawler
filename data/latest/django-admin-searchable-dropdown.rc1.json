{
  "info": {
    "author": "Ashish Yadav",
    "author_email": "anujashish1602@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![PyPI version](https://d25lcipzij17d.cloudfront.net/badge.svg?id=py&r=r&type=6e&v=1.2&x2=0)](https://pypi.org/project/django-admin-searchable-dropdown/1.2/)\n\nDjango Admin Searchable Dropdown\n================================\nA Django admin filter implementation that renders as a searchable select field dropdown.\n\n\nOverview:\n---------\n\nIf you have more than twenty values for a field that you want to filter by in\nDjango admin, the filtering sidebar gets long, cluttered, sometimes wide and hence, hard to use.\n\nThis app contains the `AutocompleteFilter` class that renders as a drop-down in the\nfiltering sidebar that can be searched to avoid this problem. \n\nRequirements:\n-------------\n\nRequires Django version >= 2.0\n\nFeatures:\n-------------\n\n* Custom search view/endpoint ([more details](#functionality-to-provide-a-custom-view-for-search))\n* `list_filter` Filter Factory support ([more details](#shortcut-for-creating-filters))\n* Custom widget text ([more details](#customizing-widget-text))\n* Support for [Grappelli](https://grappelliproject.com/)\n\n\nInstallation:\n-------------\n\nYou can install it via pip.  To get the latest version clone this repo.\n\n```shell script\npip install django-admin-searchable-dropdown\n```\n\nAdd `admin_searchable_dropdown` to your `INSTALLED_APPS` inside settings.py of your project.\n\n\nUsage:\n------\n\nLet's say you have following models:\n```python\nfrom django.db import models\n\nclass CarCompany(models.Model):\n    name = models.CharField(max_length=128)\n\nclass CarModel(models.Model):\n    name = models.CharField(max_length=64)\n    company = models.ForeignKey(CarCompany, on_delete=models.CASCADE)\n```\n\nAnd you would like to filter results in `CarModelAdmin` on the basis of `company`.  You need to define `search fields` in `CarCompany` and then define filter like this:\n\n```python\nfrom django.contrib import admin\nfrom admin_searchable_dropdown.filters import AutocompleteFilter\n\n\nclass CarCompanyFilter(AutocompleteFilter):\n    title = 'Company' # display title\n    field_name = 'company' # name of the foreign key field\n\n\nclass CarCompanyAdmin(admin.ModelAdmin):\n    search_fields = ['name'] # this is required for django's autocomplete functionality\n    # ...\n\n\nclass CarModelAdmin(admin.ModelAdmin):\n    list_filter = [CarCompanyFilter]\n    # ...\n```\n\nAfter following these steps you may see the filter as:\n\n![](https://raw.githubusercontent.com/whoisashish/django-admin-searchable-dropdown/main/admin_searchable_dropdown/media/UnFiltered.PNG)\n\n![](https://raw.githubusercontent.com/whoisashish/django-admin-searchable-dropdown/main/admin_searchable_dropdown/media/Filtered.PNG)\n\n\nFunctionality to provide a custom view for search:\n--------------------------------------------------\n\nYou can also register your custom view instead of using Django admin's `search_results` to control the results in the autocomplete. For this you will need to create your custom view and register the URL in your admin class as shown below:\n\nIn your `views.py`:\n\n```python\nfrom admin_searchable_dropdown.views import AutocompleteJsonView\n\n\nclass CustomSearchView(AutocompleteJsonView):\n    def get_queryset(self):\n        \"\"\"\n           your custom logic goes here.\n        \"\"\"\n        queryset = CarCompany.objects.all().order_by('name')\n        return queryset\n```\n\nAfter this, register this view in your admin class:\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\n\n\nclass CarModelAdmin(admin.ModelAdmin):\n    list_filter = [CarCompanyFilter]\n\n    def get_urls(self):\n        urls = super().get_urls()\n        custom_urls = [\n            path('custom_search/', self.admin_site.admin_view(CustomSearchView.as_view(model_admin=self)),\n                 name='custom_search'),\n        ]\n        return custom_urls + urls\n```\n\nFinally, just tell the filter class to use this new view:\n\n```python\nfrom django.shortcuts import reverse\nfrom admin_searchable_dropdown.filters import AutocompleteFilter\n\n\nclass CarCompanyFilter(AutocompleteFilter):\n    title = 'Company'\n    field_name = 'company'\n\n    def get_autocomplete_url(self, request, model_admin):\n        return reverse('admin:custom_search')\n```\n\n\nShortcut for creating filters:\n------------------------------\n\nIt's also possible to use the `AutocompleteFilterFactory` shortcut to create\nfilters on the fly, as shown below. Nested relations are supported too, with\nno need to specify the model.\n\n```An autocomplete widget filter with a customizable title. Use like this:\n        AutocompleteFilterFactory('My title', 'field_name')\n        AutocompleteFilterFactory('My title', 'fourth__third__second__first')\n    Be sure to include distinct in the model admin get_queryset() if the second form is used.\n    Assumes: parameter_name == f'fourth__third__second__{field_name}'\n        * title: The title for the filter.\n        * base_parameter_name: The field to use for the filter.\n        * viewname: The name of the custom AutocompleteJsonView URL to use, if any.\n        * use_pk_exact: Whether to use '__pk__exact' in the parameter name when possible.\n        * label_by: How to generate the static label for the widget - a callable, the name\n          of a model callable, or the name of a model field.```\n\nExample:\n\n```python\nfrom django.contrib import admin\nfrom admin_searchable_dropdown.filters import AutocompleteFilterFactory\n\n\nclass AlbumAdmin(admin.ModelAdmin):\n    list_filter = [\n        AutocompleteFilterFactory('Company', 'company', 'admin:custom_search', True)\n    ]\n\n    def get_urls(self):\n        \"\"\"As above...\"\"\"\n```\n\n\nCustomizing widget text\n-----------------------\n\nYou can customize the text displayed in the filter widget, to use something\nother than `str(obj)`. This needs to be configured for both the dropdown\nendpoint and the widget itself.\n\nIn your `views.py`, override `display_text`:\n\n```python\nfrom admin_searchable_dropdown.views import AutocompleteJsonView\n\n\nclass CustomSearchView(AutocompleteJsonView):\n\n    @staticmethod\n    def display_text(obj):\n        return obj.my_str_method()\n\n    def get_queryset(self):\n        \"\"\"As above...\"\"\"\n```\n\nThen use either of two options to customize the text.\n\nOption one is to specify the form_field in an AutocompleteFilter in your\n`admin.py`:\n\n```python\nfrom django import forms\nfrom django.contrib import admin\nfrom django.shortcuts import reverse\nfrom admin_searchable_dropdown.filters import AutocompleteFilter\n\n\nclass FuelChoiceField(forms.ModelChoiceField):\n    def label_from_instance(self, obj):\n        return obj.my_str_method()\n\n\nclass CarCompanyFilter(AutocompleteFilter):\n    title = 'Company'\n    field_name = 'company'\n    form_field = FuelChoiceField\n\n    def get_autocomplete_url(self, request, model_admin):\n        return reverse('admin:custom_search')\n\n\nclass CarModelAdmin(admin.ModelAdmin):\n    list_filter = [CarCompanyFilter]\n\n    def get_urls(self):\n        \"\"\"As above...\"\"\"\n```\n\nOption two is to use an AutocompleteFilterFactory in your `admin.py`\nadd a `label_by` argument:\n\n```python\nfrom django.contrib import admin\nfrom admin_searchable_dropdown.filters import AutocompleteFilterFactory\n\n\nclass CarModelAdmin(admin.ModelAdmin):\n    list_filter = [\n        AutocompleteFilterFactory('Company', 'company', 'admin:custom_search', True, label_by='my_str_method')\n    ]\n\n    def get_urls(self):\n        \"\"\"As above...\"\"\"\n```\n\n\nContributing:\n------------\n\nBased on [this StackOverflow question, and the comments that went unresolved in the selected answer](http://stackoverflow.com/a/20900314/258772) and\n[code from FeinCMS](https://github.com/feincms/feincms/blob/master/feincms/templates/admin/filter.html) and\n[code from mrts](https://github.com/mrts/django-admin-list-filter-dropdown/blob/8ab1575dcd3cb9b28a80cc07695cec65fa85dfad/django_admin_listfilter_dropdown/templates/django_admin_listfilter_dropdown/dropdown_filter.html).\n\nTo Contribute, please fork the project, make a pull-request, and clearly mention the problems or improvements your PR is addressing.\n\n\nLicense:\n--------\n\nDjango Admin Searchable Dropdown is an Open Source project licensed under the terms of the MIT LICENSE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/whoisashish/django-admin-searchable-dropdown",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-admin-searchable-dropdown",
    "package_url": "https://pypi.org/project/django-admin-searchable-dropdown/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-admin-searchable-dropdown/",
    "project_urls": {
      "Homepage": "https://github.com/whoisashish/django-admin-searchable-dropdown"
    },
    "release_url": "https://pypi.org/project/django-admin-searchable-dropdown/1.2/",
    "requires_dist": [
      "django (>=2.0)"
    ],
    "requires_python": "",
    "summary": "A simple Django app to render list filters in dropdown format with search option",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11357294,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17141e528db4639079e3571e0d1a8d9f3d2e76a82af066a04bde86567938588d",
          "md5": "e65e299fcc8c7b737e47310e81f88c10",
          "sha256": "5e8dc7544c76d3aed4b7410eda4b63b845b908b4b6bf9351d0e993b56747ba45"
        },
        "downloads": -1,
        "filename": "django_admin_searchable_dropdown-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e65e299fcc8c7b737e47310e81f88c10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12644,
        "upload_time": "2021-09-03T12:04:01",
        "upload_time_iso_8601": "2021-09-03T12:04:01.671547Z",
        "url": "https://files.pythonhosted.org/packages/17/14/1e528db4639079e3571e0d1a8d9f3d2e76a82af066a04bde86567938588d/django_admin_searchable_dropdown-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7154cdbf110b4a3f2e4d6eef96db33cfcad2edf1e6e355112dfe1b6fb15f13ff",
          "md5": "3e8e7909fa8053e9abbccb956178d270",
          "sha256": "7db77cc966af88134d383b2fe36b11aa67dcf743dd5f66ab53d9169e993bd8c5"
        },
        "downloads": -1,
        "filename": "django-admin-searchable-dropdown-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3e8e7909fa8053e9abbccb956178d270",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10395,
        "upload_time": "2021-09-03T12:04:03",
        "upload_time_iso_8601": "2021-09-03T12:04:03.024789Z",
        "url": "https://files.pythonhosted.org/packages/71/54/cdbf110b4a3f2e4d6eef96db33cfcad2edf1e6e355112dfe1b6fb15f13ff/django-admin-searchable-dropdown-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17141e528db4639079e3571e0d1a8d9f3d2e76a82af066a04bde86567938588d",
        "md5": "e65e299fcc8c7b737e47310e81f88c10",
        "sha256": "5e8dc7544c76d3aed4b7410eda4b63b845b908b4b6bf9351d0e993b56747ba45"
      },
      "downloads": -1,
      "filename": "django_admin_searchable_dropdown-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e65e299fcc8c7b737e47310e81f88c10",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12644,
      "upload_time": "2021-09-03T12:04:01",
      "upload_time_iso_8601": "2021-09-03T12:04:01.671547Z",
      "url": "https://files.pythonhosted.org/packages/17/14/1e528db4639079e3571e0d1a8d9f3d2e76a82af066a04bde86567938588d/django_admin_searchable_dropdown-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7154cdbf110b4a3f2e4d6eef96db33cfcad2edf1e6e355112dfe1b6fb15f13ff",
        "md5": "3e8e7909fa8053e9abbccb956178d270",
        "sha256": "7db77cc966af88134d383b2fe36b11aa67dcf743dd5f66ab53d9169e993bd8c5"
      },
      "downloads": -1,
      "filename": "django-admin-searchable-dropdown-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3e8e7909fa8053e9abbccb956178d270",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10395,
      "upload_time": "2021-09-03T12:04:03",
      "upload_time_iso_8601": "2021-09-03T12:04:03.024789Z",
      "url": "https://files.pythonhosted.org/packages/71/54/cdbf110b4a3f2e4d6eef96db33cfcad2edf1e6e355112dfe1b6fb15f13ff/django-admin-searchable-dropdown-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}