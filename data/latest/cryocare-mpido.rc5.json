{
  "info": {
    "author": "Thorsten Wagner",
    "author_email": "thorsten.wagner@mpi-dortmund.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# cryoCARE (MPI Dortmund Edition)\n\nThis package is a customized fork of [cryoCARE](https://github.com/juglab/cryoCARE_pip).\n\nCompared to the original implementation, the **\"MPI Dortmund\" edition** contains the following changes:\n* `cyroCARE_train` produces a compressed and more portable model. This model can be copied and shared with others without relying on a certain folder structure.\n* `cryoCARE_predict` supports to predict multiple tomograms in one run. Streamlined configuration with respect to the changes of `cryoCARE_train`.\n* Streamlined installation instructions\n* Minor changes/ fixed couple of bugs:\n    * Proper padding of tomograms to avoid black frames in the denoised tomograms\n    * Fix computation of validation cut off for small tomograms\n\nThis setup trains a denoising U-Net for tomographic reconstruction according to the [Noise2Noise](https://arxiv.org/pdf/1803.04189.pdf) training paradigm. \nTherefore the user has to provide two tomograms of the same sample. \nThe simplest way to achieve this is with direct-detector movie-frames.\n\nYou can use Warp to generate two reconstructed tomograms based on the even/odd frames. Alternatively, the movie-frames can be split in two halves (e.g. with MotionCor2 `-SplitSum 1` or with IMOD `alignframes -debug 10000`) from which two identical, up to random noise, tomograms can be reconstructed. \n\nThese two (even and odd) tomograms can be used as input to this cryoCARE implementation.\n\n## Installation\n\n__Note:__ We assume that you have  [miniconda](https://docs.conda.io/en/latest/miniconda.html) installed.\n\nFirst you need to create a conda environment.\n\n### For CUDA 11:\n```\nconda create -n cryocare_c11 -c conda-forge -c anaconda python=3.8\npip install nvidia-pyindex\npip install 'cryoCARE_mpido[c11]'\n```\n\n### For CUDA 10:\n```\nconda create -n cryocare -c conda-forge -c anaconda python=3 keras-gpu=2.3.1\nconda activate cryocare\npip install cryoCARE_mpido\n```\n\n## Manual\ncryoCARE uses `.json` configuration files and is run in three steps:\n\n### 1. Prepare Training Data\nTo prepare the training data we have to provide all tomograms on which we want to train. \nCreate an empty file called `train_data_config.json`, copy-paste the following template and fill it in.\n```\n{\n  \"even\": [\n    \"/path/to/even.rec\"\n  ],\n  \"odd\": [\n    \"/path/to/odd.rec\"\n  ],\n  \"patch_shape\": [\n    72,\n    72,\n    72\n  ],\n  \"num_slices\": 1200,\n  \"split\": 0.9,\n  \"tilt_axis\": \"Y\",\n  \"n_normalization_samples\": 500,\n  \"path\": \"./\"\n}\n```\n#### Parameters:\n* `\"even\"`: List of all even tomograms.\n* `\"odd\"`: List of all odd tomograms. Note the order has to be the same as in `\"even\"`.\n* `\"patch_shape\"`: Size of the sub-volumes used for training. Should not be smaller than `64, 64, 64`.\n* `\"num_slices\"`: Number of sub-volumes extracted per tomograms. \n* `\"tilt_axis\"`: Tilt-axis of the tomograms. We split the tomogram along this axis to extract train- and validation data separately.\n* `\"n_normalization_samples\"`: Number of sub-volumes extracted per tomograms, which are used to compute `mean` and `standard deviation` for normalization.\n* `\"path\"`: The training and validation data are saved here.\n\n#### Run Training Data Preparation:\nAfter installation of the package we have access to built in Python-scripts which we can call. \nTo run the training data preparation we run the following command:\n`cryoCARE_extract_train_data.py --conf train_data_config.json`\n\n### 2. Training\nCreate an empty file called `train_config.json`, copy-paste the following template and fill it in.\n```\n{\n  \"train_data\": \"./\",\n  \"epochs\": 100,\n  \"steps_per_epoch\": 200,\n  \"batch_size\": 16,\n  \"unet_kern_size\": 3,\n  \"unet_n_depth\": 3,\n  \"unet_n_first\": 16,\n  \"learning_rate\": 0.0004,\n  \"model_name\": \"model_name\",\n  \"path\": \"./\"\n}\n```\n\n#### Parameters:\n* `\"train_data\"`: Path to the directory containing the train- and validation data. This should be the same as the `\"path\"` from above.\n* `\"epochs\"`: Number of epochs used to train the network.\n* `\"steps_per_epoch\"`: Number of gradient steps performed per epoch.\n* `\"batch_size\"`: Used training batch size.\n* `\"unet_kern_size\"`: Convolution kernel size of the U-Net. Has to be an odd number.\n* `\"unet_n_depth\"`: Depth of the U-Net.\n* `\"unet_n_first\"`: Number of initial feature channels.\n* `\"learning_rate\"`: Learning rate of the model training.\n* `\"model_name\"`: Name of the model.\n* `\"path\"`: Output path for the model.\n\n#### Run Training:\nTo run the training we run the following command:\n`cryoCARE_train.py --conf train_config.json`\n\nYou will find a `.tar.gz` file in the directory you specified as `path`. This your model an will be used in the next step.\n\n### 3. Prediction\nCreate an empty file called `predict_config.json`, copy-paste the following template and fill it in.\n```\n{\n  \"path\": \"path/to/your/model.tar.gz\",\n  \"even\": \"/path/to/even/tomos/\",\n  \"odd\": \"/path/to/odd/tomos/\",\n  \"n_tiles\": [1, 1, 1],\n  \"output\": \"/path/to/output/folder/\"\n}\n```\n\n#### Parameters:\n* `\"path\"`: Path to your model file.\n* `\"even\"`: Path to directory with even tomograms or a specific even tomogram.\n* `\"odd\"`: Path to directory with odd tomograms or a specific odd tomogram.\n* `\"n_tiles\"`: Initial tiles per dimension. Gets increased if the tiles do not fit on the GPU.\n* `\"output\"`: Path where the denoised tomograms will be written.\n\n#### Run Prediction:\nTo run the training we run the following command:\n`cryoCARE_predict.py --conf predict_config.json`\n\n## How to Cite\n```\n@inproceedings{buchholz2019cryo,\n  title={Cryo-CARE: content-aware image restoration for cryo-transmission electron microscopy data},\n  author={Buchholz, Tim-Oliver and Jordan, Mareike and Pigino, Gaia and Jug, Florian},\n  booktitle={2019 IEEE 16th International Symposium on Biomedical Imaging (ISBI 2019)},\n  pages={502--506},\n  year={2019},\n  organization={IEEE}\n}\n\n@article{buchholz2019content,\n  title={Content-aware image restoration for electron microscopy.},\n  author={Buchholz, Tim-Oliver and Krull, Alexander and Shahidi, R{\\'e}za and Pigino, Gaia and J{\\'e}kely, G{\\'a}sp{\\'a}r and Jug, Florian},\n  journal={Methods in cell biology},\n  volume={152},\n  pages={277--289},\n  year={2019}\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thorstenwagner/cryoCARE_pip",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cryoCARE-mpido",
    "package_url": "https://pypi.org/project/cryoCARE-mpido/",
    "platform": null,
    "project_url": "https://pypi.org/project/cryoCARE-mpido/",
    "project_urls": {
      "Homepage": "https://github.com/thorstenwagner/cryoCARE_pip"
    },
    "release_url": "https://pypi.org/project/cryoCARE-mpido/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "cryoCARE is a deep learning approach for cryo-TEM tomogram denoising.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14687218,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a86fe0ce1ae6956da2360a7009a461e1969b909c3adbe60b6556da43edb36e6",
          "md5": "ae8641b8718a0e45a5b750326492a12a",
          "sha256": "6f3cc0e7d1bfcf6668d8c9455dd65ad0ed10cf89cd0af350d8a4f0b6d46ec2e5"
        },
        "downloads": -1,
        "filename": "cryoCARE_mpido-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ae8641b8718a0e45a5b750326492a12a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13780,
        "upload_time": "2022-02-21T10:29:45",
        "upload_time_iso_8601": "2022-02-21T10:29:45.329989Z",
        "url": "https://files.pythonhosted.org/packages/7a/86/fe0ce1ae6956da2360a7009a461e1969b909c3adbe60b6556da43edb36e6/cryoCARE_mpido-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008f6af58810898b9ee06caee27da7406f1bfa2818c156e73bde84181c8a57e4",
          "md5": "3ad5f94452b2b31e0ca9ab3358cce85b",
          "sha256": "9b852fe0f731efb7d74fade78d7bd086581a7156972a2e762ce6ec9f94d9e0bb"
        },
        "downloads": -1,
        "filename": "cryoCARE_mpido-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ad5f94452b2b31e0ca9ab3358cce85b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13929,
        "upload_time": "2022-05-23T06:11:25",
        "upload_time_iso_8601": "2022-05-23T06:11:25.410571Z",
        "url": "https://files.pythonhosted.org/packages/00/8f/6af58810898b9ee06caee27da7406f1bfa2818c156e73bde84181c8a57e4/cryoCARE_mpido-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55d046c7e0154d31c95d1f8f0f995c8e290ad3120aa0b5c2ed832ac6f1e099c9",
          "md5": "c939bab2a95aff4184e2adb401de9cea",
          "sha256": "1b005854d03f18080f2fbe49c4b40904e02fb36c7639b9e862ddebade2bbb013"
        },
        "downloads": -1,
        "filename": "cryoCARE_mpido-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c939bab2a95aff4184e2adb401de9cea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13970,
        "upload_time": "2022-08-08T10:10:43",
        "upload_time_iso_8601": "2022-08-08T10:10:43.732074Z",
        "url": "https://files.pythonhosted.org/packages/55/d0/46c7e0154d31c95d1f8f0f995c8e290ad3120aa0b5c2ed832ac6f1e099c9/cryoCARE_mpido-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa658de7e383a325fcca96b6d320a1bc507b8c63c8bac75defc562ad545329d8",
          "md5": "5e91cd30c3063b08cc54e39fc46769ab",
          "sha256": "a9617f2d871a420a02880776423a6dd88d71fea2857801caa3f8b256de20fdad"
        },
        "downloads": -1,
        "filename": "cryoCARE_mpido-0.2.2b0.tar.gz",
        "has_sig": false,
        "md5_digest": "5e91cd30c3063b08cc54e39fc46769ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13936,
        "upload_time": "2022-05-25T14:04:40",
        "upload_time_iso_8601": "2022-05-25T14:04:40.082503Z",
        "url": "https://files.pythonhosted.org/packages/fa/65/8de7e383a325fcca96b6d320a1bc507b8c63c8bac75defc562ad545329d8/cryoCARE_mpido-0.2.2b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68e0afcde22e19feedd07ec651116607406df4dcc007e861e97fca2962566adc",
          "md5": "c9eb3487ebe6e2b3c5a338879814e6fa",
          "sha256": "4666bb1922b876e86660c957665c3505403280be65864be36278710d54be4769"
        },
        "downloads": -1,
        "filename": "cryoCARE_mpido-0.2.2b1.tar.gz",
        "has_sig": false,
        "md5_digest": "c9eb3487ebe6e2b3c5a338879814e6fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13912,
        "upload_time": "2022-05-25T14:10:49",
        "upload_time_iso_8601": "2022-05-25T14:10:49.164244Z",
        "url": "https://files.pythonhosted.org/packages/68/e0/afcde22e19feedd07ec651116607406df4dcc007e861e97fca2962566adc/cryoCARE_mpido-0.2.2b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55d046c7e0154d31c95d1f8f0f995c8e290ad3120aa0b5c2ed832ac6f1e099c9",
        "md5": "c939bab2a95aff4184e2adb401de9cea",
        "sha256": "1b005854d03f18080f2fbe49c4b40904e02fb36c7639b9e862ddebade2bbb013"
      },
      "downloads": -1,
      "filename": "cryoCARE_mpido-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c939bab2a95aff4184e2adb401de9cea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13970,
      "upload_time": "2022-08-08T10:10:43",
      "upload_time_iso_8601": "2022-08-08T10:10:43.732074Z",
      "url": "https://files.pythonhosted.org/packages/55/d0/46c7e0154d31c95d1f8f0f995c8e290ad3120aa0b5c2ed832ac6f1e099c9/cryoCARE_mpido-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}