{
  "info": {
    "author": "Brandon Carpenter",
    "author_email": "brandon@8minute.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Embedded Systems",
      "Typing :: Typed"
    ],
    "description": "# Modbusy - Modbus for mortals\n\nModbusy simplifies the creation of Modbus slaves. It is a Python library\nproviding a simple interface to reduce boilerplate code when interfacing with\nuModbus. It requires only rudimentary knowledge of the Modbus protocol.\n\nAdditional helper methods are also provided to further accelerate development.\n\n## Example\n\nThe following example uses the `modbusy.tcp_app()` helper to create a slave\nthat provides access to a single signed, 32-bit integer.\n\nExecute the script using the following command:\n\n`python modbusy_example.py --address 127.0.0.1 --port 5020 12345`\n\n**modbusy_example.py**\n```python\nimport contextlib\n\nimport click\nimport modbusy\n\n\n# The order of decorators is important\n@modbusy.tcp_app()\n@click.argument('value', type=int)  # require a command-line argument to initialize value\n@contextlib.contextmanager\ndef slave(app, value) -> None:\n    '''Modbus emulator to expose a single signed 32-bit integer.'''\n\n    @app.register(0, modbusy.INT32)\n    def read_value(for_write):\n        return value\n\n    @read_value.setter\n    def write_value(new_value):\n        nonlocal value\n        value = new_value\n\n    yield\n\n\nif __name__ == '__main__':\n    slave()\n```\n\nInitialization should occur before the `yield` and cleanup should occur after.\n\n## Description\n\nModbusy is 100% compatible with uModbus and can be used in existing code to\nsimplify and extend it. Values are exposed on the slave by decorating getter\nand setter functions/methods. Function codes, address spaces, and address\nranges are automatically determined based on the base address and the type\nregistered for the getter and on whether or not a setter is provided.\n\n### Address spaces\n\n`BOOL` types are considered Modbus coils and use one address space. All other\nModbusy types are treated as Modbus registers and use another address space.\n\n### Extends uModbus\n\nModbusy is designed to work with an already exceptional Modbus library:\nuModbus.  The `patch_server()` function is designed to add the `register()`\ndecorator and the `update_defaults()` method to the server object returned by\neither `umodbus.server.tcp.get_server()` or `umodbus.server.serial.get_server()`.\n\n```python\ndef patch_server(server, slave_id: int = 1, byteorder: str = 'big', mixed: bool = False):  # returns server\n    ...\n```\n\nIt may also be passed default slave ID and endianness (byte order and mixed\nmode). This may be updated later using `update_defaults()`.\n\n```python\ndef update_defaults(self, slave_id: int = None, byteorder: str = None, mixed: bool = None) -> None:\n    ...\n```\n\n#### TCP server example\n\n```python\nfrom socketserver import TCPServer\nfrom umodbus.server.tcp import RequestHandler, get_server\n\nimport modbusy\n\nTCPServer.allow_reuse_address = True\napp = get_server(TCPServer, ('localhost', 502), RequestHandler)\nmodbusy.patch_server(app, slave_id=2, byteorder='little', mixed=True)\n```\n\n### Registering getters and setters\n\nThe `register()` decorator is used to define points that are exposed by the\nslave. It is a high-level wrapper around uModbus's `route()` decorator.\n\n```python\ndef register(self, address: Union[int, Iterable[int]], kind: RegisterType, *,\n             slave_id: int = None, byteorder: str = None, mixed: bool = None) -> None:\n    ...\n```\n\nThe *address* parameter should typically be the base Modbus address for the\nvalue. The full address range will be computed based on the size of the value\ndefined by the *kind* parameter, but it may be overridden by passing a list.\nIf not provided, the *slave_id*, *byteorder*, and *mixed* parameters will use\nthe server defaults. The available operations (function codes) are defined by\nthe *kind*.\n\n```python\n@app.register(100, modbusy.UINT64)\ndef read_value(for_write):\n    return value\n```\n\nThe `register()` decorator is used to define getters. The wrapped function is\nalso used when performing a partial update of a value (i.e., updating a word).\nIn that case, the *for_write* parameter will be True, and may be used to\nsuppress calculations that might normally occur on a read. Use the `setter()`\ndecorator of the read function to decorate the write function, similar to how\nthe built-in `property()` decorator works.\n\n```python\n@read_value.setter\ndef write_value(new_value):\n    value = new_value\n```\n\nIf the second word of the value is being written, `read_value(True)` is\ncalled, bytes 3 and 4 are updated, and the new value is passed to\n`write_value()`. Writes are atomic for a single TCP request.\n\n### Read/write object attributes\n\nThe `attribute()` helper method is used to make object attributes accessible\nvia Modbus without a bunch of boilerplate code. \n\n```python\nclass Settings:\n    knob = 123\n    flag = False\n\napp.register(104, modbusy.INT32).attribute(Settings, 'knob', writable=False)\napp.register(10, modbusy.BOOL).attribute(Settings, 'flag')\n```\n\nThe *writable* parameter defaults to True. It may also be a callable that can\noverride the default behavior. For instance, if writes should be allowed on\nread-only values without an error, then *writable* could be passed a no-op.\n\n```python\napp.register(104, modbusy.INT32).attribute(Settings, 'knob', writable=lambda _: None)\n```\n\n### Predefined types\n\n`BOOL`:\nA boolean type implemented as a bit value or Modbus coil\n\n`INT16`:\nSigned, 16-bit integer\n\n`INT32`:\nSigned, 32-bit integer\n\n`INT64`:\nSigned, 64-bit integer\n\n`INT128`:\nSigned, 128-bit integer\n\n`UINT16`:\nUsigned, 16-bit integer\n\n`UINT32`:\nUsigned, 32-bit integer\n\n`UINT64`:\nUsigned, 64-bit integer\n\n`UINT128`:\nUsigned, 128-bit integer\n\n`FLOAT`:\n4-byte, floating-point integer\n\n`FLOAT`:\n8-byte, floating-point integer\n\n`String(N)`:\nN-byte string (address is rounded up to a 2-byte boundary)\n\n### Extending types\n\nCustom integers may be created using `modbusy.Integer`. All modbusy types\nsubclass `modbusy.RegisterType`. Additional types may be created by\nsubclassing `modbusy.RegisterType` as well.\n\n### Address validation\n\nuModbus and, by extension, modbusy, do no validation of addresses to prevent\noverlap. The `assert_unque_addresses()` helper can perform that validation.\n\n```python\nmodbusy.assert_unique_addresses(app)\n```\n\n### Easy application creation\n\n`modbus.tcp_app()` is a helper function to avoid writing boilerplate code for\nparsing arguments and instantiating and running a TCP slave server. It\ndecorates a Python context manager, typically created using the\n`contextlib.contextmanager` decorator, with optional click command-line\nparsing. See the example at the top of this file for an example.\n\n## Creating a slave from a CSV file\n\nA Modbus slave can be easily created from a CSV time series file. \n\n**sample_pv_1min.csv**\n```csv\nutc_timestamp,active_power_total,dc_voltage,dc_unclipped_power\n2018-03-01 00:00:00,71431,686.505555555555,72056\n2018-03-01 00:01:00,70676,687.975925925926,71287\n2018-03-01 00:02:00,69835,687.888888888889,70436\n2018-03-01 00:05:00,67641,687.964814814815,68207\n2018-03-01 00:06:00,67039,688.537037037037,67603\n2018-03-01 00:07:00,66345,688.925925925926,66898\n2018-03-01 00:08:00,65831,689.492592592593,66375\n2018-03-01 00:10:00,64436,690.283333333333,64957\n...\n```\n\n**pv.yaml**\n```yaml\nregisters:\n  - address: 0\n    column: active_power_total\n    type: float\n    trigger: yes\n  - address: 2\n    column: dc_voltage\n    type: float\n  - address: 4\n    column: dc_unclipped_power\n    type: float\n  - address: 60\n    value: 123\n    writable: yes\n  - address: 100\n    type: string[19]\n    column: utc_timestamp\n```\n\nGiven the CSV data file and the YAML configuration file above, a slave can be\nstarted using the following command:\n\n`python -m modbusy.csvslave --address 127.0.0.1 --port 5020 pv.yaml sample_pv_1min.csv`\n\nWhen the first register, at address 0, is read, it will cause the next row in\nthe CSV file to be read because it is a trigger register. After the entire file\nis read, it will start back at the beginning looping infinitely.\n\nSee the source code for more information. Check out the `validate()` function\nfor the schema describing the YAML configuration.\n\n## License\n\nModbusy is licensed under a BSD 3-clause license found [here](LICENSE).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.com/8minutenergy/modbusy",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modbusy",
    "package_url": "https://pypi.org/project/modbusy/",
    "platform": "",
    "project_url": "https://pypi.org/project/modbusy/",
    "project_urls": {
      "Homepage": "https://bitbucket.com/8minutenergy/modbusy"
    },
    "release_url": "https://pypi.org/project/modbusy/1.1.0/",
    "requires_dist": [
      "gevent (>=1.3)",
      "uModbus (>=1)",
      "click (>=6) ; extra == 'cli'",
      "pyyaml ; extra == 'cli'",
      "voluptuous ; extra == 'cli'",
      "mypy (>=0.910) ; extra == 'mypy'",
      "types-PyYAML ; extra == 'mypy'",
      "pytest (>5.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Easy library for writing Modbus slaves",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10979852,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2826eba6b56702d645fd301e111132a71c096d40055071ddc58deed36693c988",
          "md5": "fd0249cee536cf78c04f91e3e7aa26af",
          "sha256": "d7c0ea14c88198fa2f0af55b42b363d0ed181ed8f803a092bec8212f7a6ca210"
        },
        "downloads": -1,
        "filename": "modbusy-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd0249cee536cf78c04f91e3e7aa26af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17278,
        "upload_time": "2020-05-07T17:03:09",
        "upload_time_iso_8601": "2020-05-07T17:03:09.133907Z",
        "url": "https://files.pythonhosted.org/packages/28/26/eba6b56702d645fd301e111132a71c096d40055071ddc58deed36693c988/modbusy-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7fdb7e52a2505eb662f186b4f742817436be886dacb05ae4024d7006dd20de4",
          "md5": "c7d9f4e7ea49c1c16749c767565a5e2b",
          "sha256": "bc20edd04db872fbc3645ef3f9ec1d84022d57e88c813cd03022e573fdf42c9a"
        },
        "downloads": -1,
        "filename": "modbusy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c7d9f4e7ea49c1c16749c767565a5e2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23059,
        "upload_time": "2020-05-07T17:03:11",
        "upload_time_iso_8601": "2020-05-07T17:03:11.185498Z",
        "url": "https://files.pythonhosted.org/packages/a7/fd/b7e52a2505eb662f186b4f742817436be886dacb05ae4024d7006dd20de4/modbusy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2914f02d03e785e9d11f5378ed64f1a3139d0ccdbcb912db434504df7ee6c77c",
          "md5": "f73dd792ae2e993bbe2eb2094e00a939",
          "sha256": "122d086b37a45c9f0e14040ce1ab2c4bd03f0b120bf6dd3ec0e5a12a41a0e022"
        },
        "downloads": -1,
        "filename": "modbusy-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f73dd792ae2e993bbe2eb2094e00a939",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17264,
        "upload_time": "2021-06-03T20:31:14",
        "upload_time_iso_8601": "2021-06-03T20:31:14.645798Z",
        "url": "https://files.pythonhosted.org/packages/29/14/f02d03e785e9d11f5378ed64f1a3139d0ccdbcb912db434504df7ee6c77c/modbusy-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9c9167cf37b412297d86fd55b00f694527f7a455d2d10233e7c4e1099f9ab30",
          "md5": "738e35bb64e904a550c25bdefdb28ef9",
          "sha256": "21ffa05c102b362c204ec0576014038d7f63cfb43e92c95318a50f5a73c6978e"
        },
        "downloads": -1,
        "filename": "modbusy-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "738e35bb64e904a550c25bdefdb28ef9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24145,
        "upload_time": "2021-06-03T20:31:16",
        "upload_time_iso_8601": "2021-06-03T20:31:16.256734Z",
        "url": "https://files.pythonhosted.org/packages/f9/c9/167cf37b412297d86fd55b00f694527f7a455d2d10233e7c4e1099f9ab30/modbusy-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c8e354b3f6d433e98cef2a55979149d8deb50e128fb0ba7ae449a1e0dcdab32",
          "md5": "d70108a36d03d7ef663aa3774f1db18d",
          "sha256": "2e2f22aed088e41042851b219f90d0c44f351573b3be056fbe2e8669a3c79f76"
        },
        "downloads": -1,
        "filename": "modbusy-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d70108a36d03d7ef663aa3774f1db18d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17470,
        "upload_time": "2021-07-22T19:01:09",
        "upload_time_iso_8601": "2021-07-22T19:01:09.526784Z",
        "url": "https://files.pythonhosted.org/packages/9c/8e/354b3f6d433e98cef2a55979149d8deb50e128fb0ba7ae449a1e0dcdab32/modbusy-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26bf688c839e4befae44189ad49345bc879ab0dcad4eb86e87350d2eb8d454b1",
          "md5": "639c6d607cf7bcdd9df5b25c54198ce6",
          "sha256": "fb6f3600f295627559b600e2b824f6f2ded9ce8015432b89d7d5c2a20be55f43"
        },
        "downloads": -1,
        "filename": "modbusy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "639c6d607cf7bcdd9df5b25c54198ce6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19222,
        "upload_time": "2021-07-22T19:01:12",
        "upload_time_iso_8601": "2021-07-22T19:01:12.102782Z",
        "url": "https://files.pythonhosted.org/packages/26/bf/688c839e4befae44189ad49345bc879ab0dcad4eb86e87350d2eb8d454b1/modbusy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c8e354b3f6d433e98cef2a55979149d8deb50e128fb0ba7ae449a1e0dcdab32",
        "md5": "d70108a36d03d7ef663aa3774f1db18d",
        "sha256": "2e2f22aed088e41042851b219f90d0c44f351573b3be056fbe2e8669a3c79f76"
      },
      "downloads": -1,
      "filename": "modbusy-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d70108a36d03d7ef663aa3774f1db18d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17470,
      "upload_time": "2021-07-22T19:01:09",
      "upload_time_iso_8601": "2021-07-22T19:01:09.526784Z",
      "url": "https://files.pythonhosted.org/packages/9c/8e/354b3f6d433e98cef2a55979149d8deb50e128fb0ba7ae449a1e0dcdab32/modbusy-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26bf688c839e4befae44189ad49345bc879ab0dcad4eb86e87350d2eb8d454b1",
        "md5": "639c6d607cf7bcdd9df5b25c54198ce6",
        "sha256": "fb6f3600f295627559b600e2b824f6f2ded9ce8015432b89d7d5c2a20be55f43"
      },
      "downloads": -1,
      "filename": "modbusy-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "639c6d607cf7bcdd9df5b25c54198ce6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19222,
      "upload_time": "2021-07-22T19:01:12",
      "upload_time_iso_8601": "2021-07-22T19:01:12.102782Z",
      "url": "https://files.pythonhosted.org/packages/26/bf/688c839e4befae44189ad49345bc879ab0dcad4eb86e87350d2eb8d454b1/modbusy-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}