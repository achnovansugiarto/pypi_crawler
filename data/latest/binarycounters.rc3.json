{
  "info": {
    "author": "paul kosmala",
    "author_email": "paul.kosmala@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# BinaryCounters\n an Array-based binary counter with functions designed for cellular automata experimentation\n\n# INSTALL INSTRUCTION\n```\npip install BinaryCounters\n```\n\n\n\n# how to use:\n## BinaryCounter(\\<int\\>=val,\\<int\\>=bitLength)\n* #### val is the starting value of the binary,\n* #### bitLength is the size of the array holding the binary.\n\n### FUNCTIONS:\n* ##### these are the logical gates - AND,NAND,OR,XOR,XNOR,NOR,NOT.\n* ##### they are included for convinence - and can be used anywhere an 'arbitray function' can be used (they fit the requirments of having the inputs i,bit1,bit2, and give a 0/1 as the output).\n* ##### note: these are not meant for anything other than binary, these are not meant to be called, but to be passed into a method as an argument.\n\n### METHODS\n\n#### KEEP_EVEN(\\<bool\\>=increaseBool):\n* ##### increase bool determines if number increases or decreases\n* ##### forces an even number by shifting value by 1\n \n#### KEEP_ODD(\\<bool\\>=increaseBool):\n* ##### increase bool determines if number increases or decreases\n* ##### forces an even number by shifting value by 1\n\n#### SORT_B(\\<bool\\>=fromSig):\n* ##### fromSig if true, sorts all 1's to the most significant digit\n* ##### sorts the binary\n\n#### SECTION(\\<int\\>=start,\\<int\\>=stop):\n* ##### returns a new array of that section of binary\n\n#### SPAWN(\\<int\\>=start,\\<int\\>=stop):\n* ##### returns a new \\<BinaryCounter\\> from that section of binary\n\n#### COUNT(\\<bool\\>=willCountOnes):\n* ##### willCountOnes if true,  this function will return number of 1's, otherwise it will return the number of 0's \n\n#### SHIFT_UP( \\<int\\>=amount):\n* ##### logically shifts binary \\<\\< up\n\n#### SHIFT_DOWN( \\<int\\>=amount):\n* ##### logically shifts binary \\>\\> down\n\n#### SHIFT_CIRCLE( \\<int\\>=amount, \\<bool\\>=dir):\n* ##### dir determines rotational direction. If True:\n* ##### rotates the binary by an amount = 1: (0,0,0,1)=>(1,0,0,0) amount = 2: (0,0,0,1)=>(0,1,0,0)\n* ##### If False:\n* ##### rotates the binary by an amount = 1: (1,1,0,1)=>(1,0,1,1) amount = 2: (1,1,1,0)=>(1,0,1,1) \n\n#### BIT_OP( \\<BinaryCounter\\>=binary, \\<str\\>=operator):\n* ##### operator options are = \"XOR\",\"OR\",\"AND\",\"NAND,\"XNOR\",\"NOR\",\"NOT\"\n* ##### binary must be the same length as owner of method.\n \n#### INCREASE(\\<int\\>=amount):\n* ##### amount must be a positive integer, or results in no change\n* ##### amount will not increase set bits, it will max at all 1's\n\n#### DECREASE(\\<int\\>=amount):\n* ##### amount must be a positive integer, or results in no change\n* ##### amount will not wrap around in value, it will end at all 0's\n \n#### COUNT(\\<bool\\>=countOnes):\n* ##### if countOnes: count 1's in binary, else count 0's \n\n#### READ():\n* ##### prints a status in the console\n\n#### SIZE():\n* ##### returns the length of the binary array\n\n#### GET_MAX():\n* ##### returns the maximum int value based on size of array.\n\n#### SET_BIT_LENGTH(\\<int\\>=len):\n* #####  len sets the length of the array holding the bits.\n\n#### B_TO_I(\\<int\\>[]=bin):\n* #####  bin is an array of binary numbers (or any numbers), such as \\<BinaryCounter\\>.binary\n* ##### returns an int\n\n#### VAL():\n* ##### returns value of binary\n\n#### BIN():\n* ##### returns array that represents binary\n  \n#### SET_V(\\<int\\>=value):\n* ##### sets value of binary\n\n#### GET_BIN_OF(\\<int\\>=b):\n* ##### b is calculated into an array of zero's and one's that represent it's binary, with a leading significant digit\n\n#### SET_BIT(\\<int\\>=val,\\<int\\>=pos)\n* ##### val is 1/0,\n* ##### pos is goes from least significant digit to most\n* ##### pos is 0 based\n  \n#### W_BIT_OP(\\<BinaryCounter\\>=binary, \\<Function\\>=fn):\n* ##### WRAPPED BIT OPERATION: the second array is looped over if it is smaller than the method's owner\n* ##### binary may be a different length from the owner of this method\n* ##### this method iterates though and modifys its binary by running a fn on it, and the the matching index of the binary\n* ##### note that this wraps around the binary you supply, so it may be of any length.\n\n#### S_BIT_OP(\\<BinaryCounter\\>=binary, \\<Function\\>=fn):\n* ##### STATIONARY BIT OPERATION: there is no wrap lke in W_BIT_OP, if the binary you pass in has a smaller bitLength,  S_BIT_OP will operate from smallest significant digit to largest, and return the original binary when it runs of of the binary you pass in. \n* ##### binary may be a different length from the owner of this method\n* ##### this method iterates though and modifys its binary by running a fn on it, and the the matching index of the binary\n* ##### note that this wraps around the binary you supply, so it may be of any length.\n\n\n\n* ###### notes on fn\n* * ######   it is a function you supply\n* * ######   it must return 0 or 1\n* * ######   it's inputs are: (\\<int\\>=pos, \\<int\\>=bit1, \\<int\\>=bit2)\n * * * ######  pos begins at the least significant digit and move to the most significant digit in the array.\n * * * ###### bit1 is the method owner's bit\n * * * ###### bit2 is the comparison bit. derived from pos % the length of the comparison array\n\n \n ## example usage:\n     BC1 = BinaryCounter(0,10)  \n     BC2 = BinaryCounter(10,10)\n     print(BC1.val()) #[0,0,0,0,0,0,0,0,0,0]  left if most significant digit, right is least\n     print(BC2.val()) #[0,0,0,0,0,0,1,0,1,0]\n     BC1.increase(1) \n     BC2.increase(386) \n     print(BC1.val()) #[0,0,0,0,0,0,0,0,0,1]\n     print(BC2.val()) #[0,1,1,0,0,0,1,1,0,0]\n     BC1.BIT_OP(BC2,\"OR\")\n     print(BC1.val()) #[0,1,1,0,0,0,1,1,0,1]\n     print(BC2.val()) #[0,1,1,0,0,0,1,1,0,0]\n     def randomFn(index,bit,b):#just a random equation that spits out 0,1\n          return ((bit+b)*(index*b+1))%2  \n     BC3 = BinaryCounter(15,5) #[0,1,1,1,1]\n     BC1.R_BIT_OP(BC3,randomFn) \n     print(BC1.val()) #[1,0,0,0,0,0,0,0,1,1]\n\n     #to have a smaller array act on a larger:\n     #use W_BIT_OP and pass in the logical function\n     #give it the binary (any array of bits)\n     BC1.W_BIT_OP(BC3, OR) # OR these arrays together, and since BC3 is smaller, loop over until you cover all elements of BC1    \n     #use S_BIT_OP to \n     BC1.S_BIT_OP(BC3, OR) # OR these arrays together, and since BC3 is smaller, so it returns BC1 partially unmodified    \n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/altruios/BinaryCounters",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BinaryCounters",
    "package_url": "https://pypi.org/project/BinaryCounters/",
    "platform": "",
    "project_url": "https://pypi.org/project/BinaryCounters/",
    "project_urls": {
      "Homepage": "https://github.com/altruios/BinaryCounters"
    },
    "release_url": "https://pypi.org/project/BinaryCounters/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "array based binary counters with useful functions attached",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10552966,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de6543caf72e8cfd2f41761612b5cdd25a55351a0fcc77dcb3782a078e947f37",
          "md5": "9e79cb919b3f7e08952a429654c3735d",
          "sha256": "d902bd862cc45f1231186910258bc71a19499ee3d7c4e69ba3816542ed752136"
        },
        "downloads": -1,
        "filename": "BinaryCounters-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e79cb919b3f7e08952a429654c3735d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6972,
        "upload_time": "2021-06-02T20:16:03",
        "upload_time_iso_8601": "2021-06-02T20:16:03.098177Z",
        "url": "https://files.pythonhosted.org/packages/de/65/43caf72e8cfd2f41761612b5cdd25a55351a0fcc77dcb3782a078e947f37/BinaryCounters-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b64b199b87c9e527017d8c921e98a185cffd1e52cbdb1ed6db7a423c39d16806",
          "md5": "6b629edf878027c378157bec3c33a8e3",
          "sha256": "8796abb137eb333fb2ad6af5fdf4c0f6cfbc587ff34b11dfe4e25689e11a937a"
        },
        "downloads": -1,
        "filename": "BinaryCounters-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b629edf878027c378157bec3c33a8e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6477,
        "upload_time": "2021-06-02T20:16:04",
        "upload_time_iso_8601": "2021-06-02T20:16:04.543781Z",
        "url": "https://files.pythonhosted.org/packages/b6/4b/199b87c9e527017d8c921e98a185cffd1e52cbdb1ed6db7a423c39d16806/BinaryCounters-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a593ec393797a04bdcf60e108f9954d6b9576531c342dc2539bcfe8c56ee1e98",
          "md5": "7b0796c8706a2e9d8379a3cfa866fdf7",
          "sha256": "995da83027e3861ebe52797a3937208a54429b0f4de09a049ccece30b3d443f3"
        },
        "downloads": -1,
        "filename": "BinaryCounters-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b0796c8706a2e9d8379a3cfa866fdf7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7111,
        "upload_time": "2021-06-02T20:33:11",
        "upload_time_iso_8601": "2021-06-02T20:33:11.181024Z",
        "url": "https://files.pythonhosted.org/packages/a5/93/ec393797a04bdcf60e108f9954d6b9576531c342dc2539bcfe8c56ee1e98/BinaryCounters-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16b136279a049ff7715e6ecffbb257925a5f543c9f5814e397226dec4ca6c68a",
          "md5": "b87222292a7bd2d3890c1447b9795ea5",
          "sha256": "bbec898c0647a02af2bdbf89ac3fc074b542c5b3975f1190d475397e3f316ef1"
        },
        "downloads": -1,
        "filename": "BinaryCounters-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b87222292a7bd2d3890c1447b9795ea5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8145,
        "upload_time": "2021-06-02T20:33:12",
        "upload_time_iso_8601": "2021-06-02T20:33:12.319750Z",
        "url": "https://files.pythonhosted.org/packages/16/b1/36279a049ff7715e6ecffbb257925a5f543c9f5814e397226dec4ca6c68a/BinaryCounters-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b880471b72fe290c951be7f548b305dfbbd803fbe57fc3da3a18328327f6d0db",
          "md5": "aff06cfd089572b5f34fecf01b6a9d3c",
          "sha256": "0736769671b420d15cefee820570b43e81c3a9f82cea1d2231b490826ddccb4f"
        },
        "downloads": -1,
        "filename": "BinaryCounters-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aff06cfd089572b5f34fecf01b6a9d3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6910,
        "upload_time": "2021-06-03T22:02:45",
        "upload_time_iso_8601": "2021-06-03T22:02:45.536715Z",
        "url": "https://files.pythonhosted.org/packages/b8/80/471b72fe290c951be7f548b305dfbbd803fbe57fc3da3a18328327f6d0db/BinaryCounters-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e38c3ccdad38c42d6e2859fcca7b7f5aa473c46a48366f7fc17cf2c81dfeb34",
          "md5": "f6fab692f72badd1e169d284d71c89d3",
          "sha256": "47b93473de4193d7dcfb00b76988a1771f34f124aeac30ee021353e265b6b681"
        },
        "downloads": -1,
        "filename": "BinaryCounters-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f6fab692f72badd1e169d284d71c89d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8309,
        "upload_time": "2021-06-03T22:02:47",
        "upload_time_iso_8601": "2021-06-03T22:02:47.444945Z",
        "url": "https://files.pythonhosted.org/packages/3e/38/c3ccdad38c42d6e2859fcca7b7f5aa473c46a48366f7fc17cf2c81dfeb34/BinaryCounters-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b880471b72fe290c951be7f548b305dfbbd803fbe57fc3da3a18328327f6d0db",
        "md5": "aff06cfd089572b5f34fecf01b6a9d3c",
        "sha256": "0736769671b420d15cefee820570b43e81c3a9f82cea1d2231b490826ddccb4f"
      },
      "downloads": -1,
      "filename": "BinaryCounters-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aff06cfd089572b5f34fecf01b6a9d3c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6910,
      "upload_time": "2021-06-03T22:02:45",
      "upload_time_iso_8601": "2021-06-03T22:02:45.536715Z",
      "url": "https://files.pythonhosted.org/packages/b8/80/471b72fe290c951be7f548b305dfbbd803fbe57fc3da3a18328327f6d0db/BinaryCounters-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e38c3ccdad38c42d6e2859fcca7b7f5aa473c46a48366f7fc17cf2c81dfeb34",
        "md5": "f6fab692f72badd1e169d284d71c89d3",
        "sha256": "47b93473de4193d7dcfb00b76988a1771f34f124aeac30ee021353e265b6b681"
      },
      "downloads": -1,
      "filename": "BinaryCounters-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f6fab692f72badd1e169d284d71c89d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8309,
      "upload_time": "2021-06-03T22:02:47",
      "upload_time_iso_8601": "2021-06-03T22:02:47.444945Z",
      "url": "https://files.pythonhosted.org/packages/3e/38/c3ccdad38c42d6e2859fcca7b7f5aa473c46a48366f7fc17cf2c81dfeb34/BinaryCounters-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}