{
  "info": {
    "author": "AbtAudio AB",
    "author_email": "evaluate@abtaudio.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: Other/Proprietary License",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "\n# nimRum (Nimble Rumble)\n\n## What this is\nThis is an implementation of the **www.abtaudio.tech** solution. **Free for private use and evaluation purposes.**  \n\nThis implementation is limited to:  \n    * **Raspberry Pi 2,3,4 / Raspbian GNU/Linux 11 (bullseye)**  \n    * Max 8 clients/receivers (Enough for 7.1 or 5.2)  \n    * Max 2 audio channels per client (1 audio channel per client is the normal case)  \n    * No audio repair in case of packet loss  \n    * Single local network\n\n\n## What it does\nA program/library to transmit wireless audio over WiFi/Ethernet.\n\nThe receiving speakers will play the audio in synch, just as if you connected them with wires, ..without mixing up + and -.\n\nIn other words, this solution is good enough for putting **multiple wireless speakers** in the same room, and let them **play toghether**, either for music, or as surround speakers.\n\nThis maybe sounds obvious, but this is NOT what most wireless speakers does today.\n\n## What you need\n* A couple of **Raspberry Pis 2|3|4** with\n    * **Raspbian GNU/Linux 11 (bullseye)**\n\n* All connected through a local network, where one of the Raspberries being the AP  \n    * 5GHz WiFi has the perfect balance between range and radio interference for this purpose  \n    * Ethernet cables works as well  \n\n* The one configured as AP should be the transmitter  \n    * As sound source, either use a local file or the Line-In|S/PDIF input from a soundcard.  \n    * If transmitter has IR-sensor/LIRC, then volume/mute can be controlled from a remote.  \n\n* The ones configured as receivers should have a soundcard with either line-out or direct speaker output  \n    * The built in line-out on RPI is very noisy  \n    * The transmitter can also be a receiver at the same time as long as the HW supports it  \n\n* Recomended soundcards?\n    * HifiBerry & IQAudio works fine, with or without built in amplifier\n    * ...probably many others as well.\n\n* Just a kind remark  \n    If using line-in on a Bluetooth speaker, be aware that these probably adds something like 20-60ms delay.  \n    This is ok for nimRum, you just need to adjust for it.  \n    ...the problem is that sometimes this delay is not always constant.  \n\n# Getting started\n\nsudo apt-get install libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libasound-dev flac screen libflac-dev  \n\n**Note:** All units should have NTP turned off:  \n**sudo systemctl disable systemd-timesyncd.service**  \n(...and yes, there is a reason why RPi/Linux implementation use CLOCK_REALTIME, even though it is the 'wrong' clock)\n## The TX part (On the RPi being AP):\n1. pip3 install nimRum\n2. runNimRumTx.py *aFileWithSound.wav* (This will play this file repeatedly, forever)\n\nFirst time you will get a message telling you to create a txConfig.yaml file.\nIt will also tell where you find an example, with instructions, to copy. Most important to add are the *hostnames* of the RX devices and map correct audio channels to them.\n\n## The RX part\n1. pip3 install nimRum\n2. runNimRumTx.py\n\nFirst time it will use default settings. When you close (Ctrl-C) the program, it will store an example *rxConfig.last* file for you. Rename it to *rxConfig.yaml* to alter the default settings if needed.\n\nNote: It will use the first 'hw:' sound device it finds. Please disable the others.  \n    Hint:  \n    # dtparam=audio=on  \n    dtoverlay=vc4-kms-v3d -> dtoverlay=vc4-kms-v3d,noaudio\n## Support\nYou will need some background knowledge to set this up. I am not saying it is hard, it is actually far from it. But you probably need some previous experience.\n\nPlease look in the provided python files, I've tried to make them readable.  \n*'which runNimRumTx.py'* and *'pip show nimRum'* will tell you where your installation is located.  \n*'ldd libNimRum...so'* will show what librraries dynamically linked.\n\n# Getting further\n## Streaming from Line-In|S/PDIF input\nStart *runNimRumTx.py* without providing any input sound file.\nIt will then look for the first 'hw:' input sound device it finds.\n\n## Start at boot\n*runNimRumForever.sh* can be used to start automatically at boot. The file is located next to *runNimRumTx.py* and *runNimRumRx.py*. Instructions are found inside.\n## In case you want to install nimRum to a virtuelenv\npip3 install virtualenv virtualenvwrapper\n\nnano .bashrc  \n#Virtualenvwrapper settings:  \nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3  \nexport WORKON_HOME=$HOME/.virtualenvs  \nexport VIRTUALENVWRAPPER_VIRTUALENV=~/.local/bin/virtualenv  \nsource ~/.local/bin/virtualenvwrapper.sh  \nexport VIRTUALENVWRAPPER_ENV_BIN_DIR=bin  \n\nLogin/Logout OR source ~/.bashrc  \n\nmkvirtualenv testPyNimRum  \n\nworkon testPyNimRum  \n\ndeactivate  \n\n# Getting involved\nIt is not possible to get unlimited support to whatever question from AbtAudio. If anyone like this to the level they would like to help others to install, improve the scripts, improve documentation, moderate some chat/forum, or in any other way get involved, then those questions will be prioritized.\nBR,  \nwww.abtaudio.tech\n\n## TODO\n\n* Find all remaining bugs\n\n* Improve installation instruction and PyPi package?\n\n* Replace libNimRumAlsaCapture_py.so  \n    This is a library used to capture samples from an audio input and provide raw sample data for transmission. This has nothing to do with what AbtAudio focus on.  \n    FFMPEG is a great tool, but using latest version instead of Bullseye default version would be better. Updating version becomes much easier if this is written directly in Python.\n\n    The function it does can be explained with this (will spam your terminal forever):  \n    >ffmpeg -f alsa -i hw -f wav - | ffmpeg -i - -y -f wav -  \n\n    Try this if you want to understand what it does (will not spam your terminal forever):  \n    >ffmpeg -t 20 -f alsa  -i hw -f wav - | ffmpeg   -i - -y t2.wav  \n\n    In addition to just grab the samples, it is good to have low/known latency, not to mess up lip-synch.  \n    It should also enable compensation for clock drift. Either by resample the incoming stream to local clock, or provide the exact rate to libNimRumTx_py.so  \n    It should automatically detect if PCM or Encoded data, in best of worlds, without adding HW specific code.  \n    ...maybe *import asyncio* is a good start?  \n\n* Support any format for input files. Currently *nimRumTxReadFile_wavio.py* is used, which only supports .wav-format. *nimRumTxReadFile_soundfile.py* needs to be fixed.\n\n* ...\n\n## Working in development mode for pypi\ngit clone https://github.com/abtaudio/nimRum  \ncd nimRum  \nrm -rf dist  \npip3 install -e .  \npython3 setup.py sdist  \ntwine upload dist/*  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abtaudio/nimRum",
    "keywords": "abtaudio about time audio wireless sound synchronization",
    "license": "AbtAudio",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nimRum",
    "package_url": "https://pypi.org/project/nimRum/",
    "platform": null,
    "project_url": "https://pypi.org/project/nimRum/",
    "project_urls": {
      "Homepage": "https://github.com/abtaudio/nimRum"
    },
    "release_url": "https://pypi.org/project/nimRum/0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Nimble Rumble, a library to play wireless(WiFi) sound in perfect synch, for private use and evaluation",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16379481,
  "releases": {
    "0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "863ee39994c4e374b4dd8dd4ac4caebe95c8865cd7b038d6a473876a440e3242",
          "md5": "198edb155f970696585e870619b39c9a",
          "sha256": "5758561630b83c572a6c5d9dcc9d3eb55d7e17751189c1add409e0d5bf3136a0"
        },
        "downloads": -1,
        "filename": "nimRum-0.1.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "198edb155f970696585e870619b39c9a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 17639,
        "upload_time": "2022-12-29T13:03:32",
        "upload_time_iso_8601": "2022-12-29T13:03:32.718467Z",
        "url": "https://files.pythonhosted.org/packages/86/3e/e39994c4e374b4dd8dd4ac4caebe95c8865cd7b038d6a473876a440e3242/nimRum-0.1.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc7fd496cf1262b9fa127646a450b24dd2efdc3bc94d550fffd83902da5ff5d2",
          "md5": "ff3b845a414d9ce5e381e788d5b6b409",
          "sha256": "863ed89bd4ac0dcd2a8d8a3379db9e49c6679428dd729f9875e793f1eddc4a69"
        },
        "downloads": -1,
        "filename": "nimRum-0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff3b845a414d9ce5e381e788d5b6b409",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15483,
        "upload_time": "2022-12-29T13:03:34",
        "upload_time_iso_8601": "2022-12-29T13:03:34.302656Z",
        "url": "https://files.pythonhosted.org/packages/bc/7f/d496cf1262b9fa127646a450b24dd2efdc3bc94d550fffd83902da5ff5d2/nimRum-0.1.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ab5ffe9e796183a23f7380e3a53dfcd6869ac4a406bc2ff58345b6d2e24cc61",
          "md5": "582fb935d6f8997b9286d0b97f8c0135",
          "sha256": "9cf9c260781e1ecf027b87f6c5d851156f51cc9253f58125b59b6de800af426d"
        },
        "downloads": -1,
        "filename": "nimRum-0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "582fb935d6f8997b9286d0b97f8c0135",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 101757,
        "upload_time": "2023-01-09T17:33:45",
        "upload_time_iso_8601": "2023-01-09T17:33:45.438291Z",
        "url": "https://files.pythonhosted.org/packages/3a/b5/ffe9e796183a23f7380e3a53dfcd6869ac4a406bc2ff58345b6d2e24cc61/nimRum-0.1.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3525414dcdee8c2c356572da9e6b288c5246433e8e12571718440e22a868fb62",
          "md5": "0b2aeec55e17e45a919d68f839d16cf4",
          "sha256": "7dcc1cd9af48749dd4c8da59d5c0e8d16055375bfc34a3e5d554743f043c00bc"
        },
        "downloads": -1,
        "filename": "nimRum-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0b2aeec55e17e45a919d68f839d16cf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 102968,
        "upload_time": "2023-01-10T19:42:33",
        "upload_time_iso_8601": "2023-01-10T19:42:33.899843Z",
        "url": "https://files.pythonhosted.org/packages/35/25/414dcdee8c2c356572da9e6b288c5246433e8e12571718440e22a868fb62/nimRum-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3525414dcdee8c2c356572da9e6b288c5246433e8e12571718440e22a868fb62",
        "md5": "0b2aeec55e17e45a919d68f839d16cf4",
        "sha256": "7dcc1cd9af48749dd4c8da59d5c0e8d16055375bfc34a3e5d554743f043c00bc"
      },
      "downloads": -1,
      "filename": "nimRum-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0b2aeec55e17e45a919d68f839d16cf4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 102968,
      "upload_time": "2023-01-10T19:42:33",
      "upload_time_iso_8601": "2023-01-10T19:42:33.899843Z",
      "url": "https://files.pythonhosted.org/packages/35/25/414dcdee8c2c356572da9e6b288c5246433e8e12571718440e22a868fb62/nimRum-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}