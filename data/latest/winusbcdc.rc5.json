{
  "info": {
    "author": "Andrew Leech",
    "author_email": "andrew@alelec.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "WinUsbCDC\n=========\n\nWinUsbCDC is a python package for communicating with USB / CDC devices\non windows via the built-in\n`WinUsb <https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/winusb-installation>`__\ndriver.\n\nIt's intended for communicating with USB CDC (virtual com port) devices\non windows without using the built in usbserial.sys driver as it is\nrather unstable and has data loss issues on Win 10 -\nhttps://wiki.segger.com/CDC#CDC-ACM\\_issues\\_on\\_Windows\\_10 -\nhttps://community.nxp.com/thread/458640 -\nhttps://social.msdn.microsoft.com/Forums/sqlserver/en-US/671638cd-0aed-4cae-80f2-860c1c551347/usb-cdc-acm-data-lost?forum=wdk\n\nThe standard means of usage is via the\n``winusbcdc.ComPort(name, vid, pid)`` class which roughly matches the\n``pyserial.Serial`` class api.\n\nThis module is based directly on\n`WinUsbPy <https://github.com/felHR85/WinUsbPy>`__ and as such also\nexposes the same WinUSB api: - A 1:1 wrapper over WinUsb which allows\ncalling C++ functions directly from involved dlls. - A high level api\nwhich simplifies a lot of C++/windll/ctypes messy interactions offering\njust a bunch of easy methods.\n\nInstall WinUsbCDC\n=================\n\n::\n\n    pip install winusbcdc\n\n::\n\n    python setup.py install\n\nUSB CDC Device\n==============\n\nEnsure your device has the WinUSB driver configured. This can be done\nwith `Zadig <https://zadig.akeo.ie/>`__, `libusbk\nInfWizard <https://osdn.net/projects/sfnet_libusb-win32/downloads/libusb-win32-releases/libusbK-inf-wizard.exe/>`__\nor similar.\n\n.. code:: python\n\n    from winusbcdc import ComPort\n    p = ComPort(\"My USB Device\")  # friendly name as shown in device manager \n    # or \n    p = ComPort(vid=0xF055, pid=0x9800)\n\n    p.open()\n    p.write(b'foo')\n    print(p.read())\n    p.close()\n\nLow Level WinUsbPy Api\n======================\n\nLow level api offers three methods for invoking functions from three\ndifferent dlls.\n\n.. code:: python\n\n    #args: arguments of the C++ function called\n    def exec_function_winusb(self, function_name, *args):\n    def exec_function_kernel32(self, function_name, *args):\n    def exec_function_setupapi(self, function_name, *args):\n\nif we need to call\n`SetupDiGetClassDevs <http://msdn.microsoft.com/en-us/library/windows/hardware/ff551069%28v=vs.85%29.aspx>`__\nwhich presents this prototype:\n\n``c++ HDEVINFO SetupDiGetClassDevs(_In_opt_ const GUID *ClassGuid,_In_opt_ PCTSTR Enumerator,_In_opt_ HWND hwndParent,_In_ DWORD Flags);``\n\n.. code:: python\n\n    from winusbpy import *\n    from ctypes import *\n    from ctypes.wintypes import *\n    from winusbclasses import DIGCF_DEVICE_INTERFACE, DIGCF_PRESENT\n\n    api = WinUSBApi()\n    byte_array = c_byte * 8\n    guid = GUID(0xA5DCBF10L, 0x6530, 0x11D2, byte_array(0x90, 0x1F, 0x00, 0xC0, 0x4F, 0xB9, 0x51, 0xED))\n    flags = DWORD(DIGCF_DEVICE_INTERFACE | DIGCF_PRESENT)\n\n    hdev_info = api.exec_function_setupapi(\"SetupDiGetClassDevs\", byref(guid), None, None, flags)\n\n`Good resources of WinUsb if you develop using this low level\nlayer <http://msdn.microsoft.com/en-us/library/windows/hardware/ff540174(v=vs.85).aspx>`__\n\nHigh Level WinUsbPy Api\n=======================\n\nBuilt on top of the low level wrapper is a more usable api to perform\ncommon USB operations. Here it is list of defined functions:\n\n.. code:: python\n\n    # Possible keyword arguments: default, present, allclasses, profile, deviceinterface (Boolean), Usually called as follows list_usb_devices(deviceinterface=True, present=True)\n    def list_usb_devices(self, **kwargs):\n\n    # vid and pid must be str, returns True if device was correctly initialized and False otherwise\n    def init_winusb_device(self, vid, pid): \n\n    # path must be str, returns True if device was correctly initialized and False otherwise\n    # example init_winusb_device_with_path(\"\\\\\\\\?\\\\usb#vid_9999&pid_0102#3555303335351909000b0#{a5dcbf10-6530-11d2-901f-00c04fb951ed}\")\n    def init_winusb_device_with_path(self, path): \n\n    # Returns True if device was correctly closed and False otherwise.\n    def close_winusb_device(self):\n\n    # Returns last error code. See http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382%28v=vs.85%29.aspx\n    def get_last_error_code(self):\n\n    # Returns information for a open device (0x03:High Speed, 0x01:full-speed or lower), query=1 in order to get USB speed.\n    def query_device_info(self, query=1):\n\n    # Returns a UsbInterfaceDescriptor object with information about a specified interface\n    def query_interface_settings(self, index):\n\n    # Change current interface, Winusb opens first interface (0 index) when a device is initialized\n    def change_interface(self, index):\n\n    # Returns a PipeInfo object with information of a specified pipe within current interface\n    def query_pipe(self, pipe_index):\n\n    # Send a control requesto to open device, setup_packet is a UsbSetupPacket object.\n    # buff = None implies no data is going to be transferred besides setup packet\n    # buff = [0] create a buffer of length 1. Buffer could be IN or OUT, direction is defined in setup packet\n    # it returns a dict with the response and with the buffer under the keywords 'result' and 'buffer'\n    def control_transfer(self, setup_packet, buff=None):\n\n    #Send Bulk data to the Usb device, write_buffer must be a str buffer\n    def write(self, pipe_id, write_buffer):\n\n    #Read Bulk data from the Usb device, Returns of a buffer not greater than length_buffer length\n    def read(self, pipe_id, length_buffer):\n\nLet's say hello to our device:\n\n.. code:: python\n\n    from winusbpy import *\n    vid = \"vid_device\" # for example: VID:067b PID:2303\n    pid = \"pid_device\"\n\n    api = WinUsbPy()\n    result = api.list_usb_devices(deviceinterface=True, present=True)\n    if result:\n      if api.init_winusb_device(pl2303_vid, pl2303_pid):\n        api.write(0x02, \"hello\")\n\nReal examples\n=============\n\nIf you run winusbcdc as a module it should act like a basic serial\nterminal, see ``__main__.py`` for the code used.\n\n::\n\n    python -m winusbcdc --name \"My USB Device\"\n\n\nIn \"Examples\" folder there are two WinUsbPy examples configuring a PL2303\nserial usb device, listing characteristics and sending data.\n\n`Using WinUsbPy Low Level\nApi <https://github.com/felHR85/WinUsbPy/blob/master/winusbpy/examples/winusbtest.py>`__\n\n`Using WinUsbPy High Level\nApi <https://github.com/felHR85/WinUsbPy/blob/master/winusbpy/examples/winusbtest2.py>`__\n\n\n\nversion: 1.5\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/alelec/winusbcdc",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "WinUsbCDC",
    "package_url": "https://pypi.org/project/WinUsbCDC/",
    "platform": null,
    "project_url": "https://pypi.org/project/WinUsbCDC/",
    "project_urls": {
      "Homepage": "https://gitlab.com/alelec/winusbcdc"
    },
    "release_url": "https://pypi.org/project/WinUsbCDC/1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python package for communicating with USB / CDC devices on windows via the WinUsb driver",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15672421,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95fc77bcb35daa8ad8520852b8424cae3fea36ea98aaa6dce35b8141ed9a4c4c",
          "md5": "259f5c4d7949b1140db326e6e7bb03f1",
          "sha256": "7fb25b1c80add3691d8cc707dba3876eb8acc54a19014d4b7d02f75d329eefc0"
        },
        "downloads": -1,
        "filename": "WinUsbCDC-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "259f5c4d7949b1140db326e6e7bb03f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17115,
        "upload_time": "2020-06-21T22:52:04",
        "upload_time_iso_8601": "2020-06-21T22:52:04.388982Z",
        "url": "https://files.pythonhosted.org/packages/95/fc/77bcb35daa8ad8520852b8424cae3fea36ea98aaa6dce35b8141ed9a4c4c/WinUsbCDC-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "725d8be36d11f587109de37b82ee807ced4b31788689fd061edd455bf071cdf1",
          "md5": "43b5bb4d4b984c66157eb96e1e5210b6",
          "sha256": "09b48a10db61fac18b941a4e629b4aa1f1d1d6485f99e09561212eac403060a5"
        },
        "downloads": -1,
        "filename": "WinUsbCDC-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43b5bb4d4b984c66157eb96e1e5210b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17994,
        "upload_time": "2020-07-16T05:57:54",
        "upload_time_iso_8601": "2020-07-16T05:57:54.004432Z",
        "url": "https://files.pythonhosted.org/packages/72/5d/8be36d11f587109de37b82ee807ced4b31788689fd061edd455bf071cdf1/WinUsbCDC-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0e99bf7d424a3b47ed11cb71dd6fb5eb503072e5171db68658770ca88c676e5",
          "md5": "f1da15dc2e25a3b4e04b00a6080055a6",
          "sha256": "c7c3a012cd58f2918c22b406deb5401d9db3f3d36df7d7a6a5fb018ea274a3d6"
        },
        "downloads": -1,
        "filename": "WinUsbCDC-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1da15dc2e25a3b4e04b00a6080055a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18012,
        "upload_time": "2020-11-10T19:41:57",
        "upload_time_iso_8601": "2020-11-10T19:41:57.802840Z",
        "url": "https://files.pythonhosted.org/packages/f0/e9/9bf7d424a3b47ed11cb71dd6fb5eb503072e5171db68658770ca88c676e5/WinUsbCDC-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c232bee4dd00fdb4742c6255351a4aecbb8a729378eade44bdca64d211383e79",
          "md5": "1c2c031b934544d19dac87988bf50057",
          "sha256": "af500d35ccc44a5c4ddc0350478b332015e44ab9eebcc1e41d4664376f509a0c"
        },
        "downloads": -1,
        "filename": "WinUsbCDC-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c2c031b934544d19dac87988bf50057",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18187,
        "upload_time": "2020-12-01T07:19:02",
        "upload_time_iso_8601": "2020-12-01T07:19:02.732598Z",
        "url": "https://files.pythonhosted.org/packages/c2/32/bee4dd00fdb4742c6255351a4aecbb8a729378eade44bdca64d211383e79/WinUsbCDC-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7c1587e050b6c1cc0a0f230ceb842951d7050f14a6af09d60c93e37d4313771",
          "md5": "7511a46e6f0cd869da4369e7e28e49af",
          "sha256": "074d9929e423262579076b76f100b5ee727cedd6f40157103f61ba80fda52653"
        },
        "downloads": -1,
        "filename": "WinUsbCDC-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7511a46e6f0cd869da4369e7e28e49af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18930,
        "upload_time": "2022-11-06T06:36:35",
        "upload_time_iso_8601": "2022-11-06T06:36:35.540952Z",
        "url": "https://files.pythonhosted.org/packages/f7/c1/587e050b6c1cc0a0f230ceb842951d7050f14a6af09d60c93e37d4313771/WinUsbCDC-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7c1587e050b6c1cc0a0f230ceb842951d7050f14a6af09d60c93e37d4313771",
        "md5": "7511a46e6f0cd869da4369e7e28e49af",
        "sha256": "074d9929e423262579076b76f100b5ee727cedd6f40157103f61ba80fda52653"
      },
      "downloads": -1,
      "filename": "WinUsbCDC-1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7511a46e6f0cd869da4369e7e28e49af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18930,
      "upload_time": "2022-11-06T06:36:35",
      "upload_time_iso_8601": "2022-11-06T06:36:35.540952Z",
      "url": "https://files.pythonhosted.org/packages/f7/c1/587e050b6c1cc0a0f230ceb842951d7050f14a6af09d60c93e37d4313771/WinUsbCDC-1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}