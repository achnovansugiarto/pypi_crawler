{
  "info": {
    "author": "Joshua Weinstein",
    "author_email": "jweinst1@berkeley.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: System :: Hardware"
    ],
    "description": "PySIMD\n======\n\n.. image:: images/pysimd.png\n  :width: 800\n  :alt: PySimd logo\n\n``simd`` is the python module for SIMD computing and programming. It\nprodives an extensive interface to SIMD instruction sets on several different \narchitectures, and fallback scalar implementations when no SIMD instructions \nare available for a particular operation. ``simd`` provides vector objects, \nwhich are collections of bytes aligned on a minimum boundary. The main advantage\nof using SIMD instructions is the potentially masive performance\nimprovements over regular, scalar instructions.\n\n``simd`` is a C extension, that is only compatible with Python 3. When\nbuilt, it will do compile time checks to see what SIMD instructions are\navailable on the current CPU. The advantage of using ``simd`` over other\nlibraries or implementations is this module auto-detects the best\ninstructions available for specific operations at install time and uses\nthem anytime the module is imported into a Python program.\n\nInstallation\n------------\n\nTo install ``simd``, run the following ``pip`` command\n\n::\n\n    $ pip install simd\n\nTests\n-----\n\nTo run the tests, run the following command\n\n::\n\n    $ python tests\n\nThis will build the ``.c`` test files , link the python library into each one, and run them.\n\nUsage\n-----\n\nThe ``simd`` module can be used primarily through vector objects. Vector\nobjects are special C objects that contain a portion of bytes aligned on\nat least a 16 byte boundary. This alignment allows SIMD operations to be\nperformed at a higher scale, without needing to worry about the leftover\nbytes at the end of a data segment.\n\nCreation\n~~~~~~~~\n\nYou can make an empty vector with a size\n\n.. code:: py\n\n    >>> import simd\n    >>> a = simd.Vec(size=32)\n    >>> a\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\nOr make a vector from a repeated value\n\n.. code:: py\n\n    >>> a = simd.Vec(size=32, repeat_value=64, repeat_size=2)\n    >>> a\n    [40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0,40,0]\n\nNote: the ``__repr__`` method of ``Vec`` , implemented in C, displays a\nhexadecimal byte representation of the vector.\n\nHowever, if a size used cannot be aligned by 16 bytes, an error is\nthrown\n\n.. code:: py\n\n    >>> a = simd.Vec(size=31, repeat_value=64, repeat_size=2)\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    simd.SimdError: The size '31' cannot be aligned by at least 16 bytes\n\nOperations\n~~~~~~~~~~\n\nThe ``simd`` module supports a wide variety of operations, such as plain\naddition:\n\n.. code:: py\n\n    >>> a = simd.Vec(size=32, repeat_value=1, repeat_size=1)\n    >>> b = simd.Vec(size=32, repeat_value=1, repeat_size=1)\n    >>> a\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n    >>> b\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\n    >>> a.add(b, width=1)\n    >>> a\n    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n\nThere are also operations to retrieve the data in the vector back as\npython types, such as with ``as_bytes()``\n\n.. code:: py\n\n    >>> a = simd.Vec(size=16, repeat_value=4, repeat_size=2)\n    >>> a\n    [4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0]\n    >>> a.as_bytes(start = 3)\n    b'\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00'\n    >>> a.as_bytes()\n    b'\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x04\\x00'\n    >>> a.as_bytes(start=40)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    simd.SimdError: start: '40', is out of bounds for vector of size 16\n\nThe data inside a vector can also be retrieved as a collection type, like a ``tuple`` , \n\n.. code:: py\n\n    >>> a = simd.Vec(size=32, repeat_value=5, repeat_size=4)\n    >>> a\n    [5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0]\n    >>> a.as_tuple(type=int, width=4)\n    (5, 5, 5, 5, 5, 5, 5, 5)\n    >>> a.as_tuple(type=int, width=1)\n    (5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0)\n    >>> a.as_tuple(type=int, width=8)\n    (21474836485, 21474836485, 21474836485, 21474836485)\n\nThe above example shows the pure ``__repr__`` method of ``Vec`` only depicts a hexadecimal, byte level representation of the vector data, but a method like ``as_tuple`` allows the viewing of data with different types. One unique aspect of the ``simd`` module is it treats data and memory similar to that of C, where a chunk of 16 bytes could be two 64 bit integers, four 32 bit integers, and so on.\n\n\nMath\n~~~~\n\nThe ``simd`` module supports simd operations that involve artihmetic and math on integers and floating point numbers. Operations like ``add`` or ``sub`` work off another vector and a ``width``. The ``width`` indicates the width of the data lane the simd instruction applies to, such as ``8`` for 64 bit operations. Here are a few examples:\n\n.. code:: py\n\n    >>> v = simd.Vec(size=16, repeat_value=5, repeat_size=4)\n    >>> v2 = simd.Vec(size=16, repeat_value=10, repeat_size=4)\n    >>> v.add(v2)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: function missing required argument 'width' (pos 2)\n    >>> v.add(v2, width=4)\n    >>> v.as_tuple(type=int, width=4)\n    (15, 15, 15, 15)\n    >>> v.sub(v2, width=4)\n    >>> v.sub(v2, width=4)\n    >>> v.as_tuple(type=int, width=4)\n    (-5, -5, -5, -5)",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jweinst1/pysimd",
    "keywords": "simd,x86,arm,sse2,avx,avx512,performance,big data,data science",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simd",
    "package_url": "https://pypi.org/project/simd/",
    "platform": "",
    "project_url": "https://pypi.org/project/simd/",
    "project_urls": {
      "Homepage": "https://github.com/jweinst1/pysimd"
    },
    "release_url": "https://pypi.org/project/simd/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The SIMD Python Module",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12145672,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1321c21f8fa884876db458e3c0cfea52d3641fa68b8f46ccb6279d91394d983c",
          "md5": "5e7b6f9c16216a9085ad6c4693315275",
          "sha256": "f821c29107d05c9a7e1408e09fd0f419065cceafd006d6093f5b53fbb69a9b4a"
        },
        "downloads": -1,
        "filename": "simd-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e7b6f9c16216a9085ad6c4693315275",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3204,
        "upload_time": "2020-05-30T09:17:17",
        "upload_time_iso_8601": "2020-05-30T09:17:17.495420Z",
        "url": "https://files.pythonhosted.org/packages/13/21/c21f8fa884876db458e3c0cfea52d3641fa68b8f46ccb6279d91394d983c/simd-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34a0286983fc6a9d36b310eb81d370e73e171621d707098dc6e780304b0d51a9",
          "md5": "59dd4b74f4e3224082acac05029e7bc3",
          "sha256": "53c1c098b9156b7257901f6f7bf149eb44ae42a2ad09ac933b7b64eec5204360"
        },
        "downloads": -1,
        "filename": "simd-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "59dd4b74f4e3224082acac05029e7bc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9967,
        "upload_time": "2021-11-20T13:59:12",
        "upload_time_iso_8601": "2021-11-20T13:59:12.533408Z",
        "url": "https://files.pythonhosted.org/packages/34/a0/286983fc6a9d36b310eb81d370e73e171621d707098dc6e780304b0d51a9/simd-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c76144c05e3fc231162f8e929413c5d83b38f4bceeee8ec85fefb03a6426fcb",
          "md5": "df4eaadafc90147ef7a744c52617fae4",
          "sha256": "a98c6a307cf8948f6a7f501459fef594a7a48713edfefc07aa1cd598ee9941b3"
        },
        "downloads": -1,
        "filename": "simd-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "df4eaadafc90147ef7a744c52617fae4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11039,
        "upload_time": "2021-11-21T14:04:21",
        "upload_time_iso_8601": "2021-11-21T14:04:21.382195Z",
        "url": "https://files.pythonhosted.org/packages/2c/76/144c05e3fc231162f8e929413c5d83b38f4bceeee8ec85fefb03a6426fcb/simd-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c8d148891b14cfe1839ff80b13491db594044cc0820f2878a90dc7bb115f418",
          "md5": "97905f63fd846b45dd35c0a9dca9d0e6",
          "sha256": "c93476892eb2e449914dd79b21558da96e7d4f2aa011f23e73dd40c844e97459"
        },
        "downloads": -1,
        "filename": "simd-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "97905f63fd846b45dd35c0a9dca9d0e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14732,
        "upload_time": "2021-11-26T14:12:25",
        "upload_time_iso_8601": "2021-11-26T14:12:25.761482Z",
        "url": "https://files.pythonhosted.org/packages/5c/8d/148891b14cfe1839ff80b13491db594044cc0820f2878a90dc7bb115f418/simd-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a91925c343ca52d89d0ddd87789626a900cbafbfc89ed032ca56da199358761e",
          "md5": "d02db13fb0c4438ccfcddd6ba21beba1",
          "sha256": "733e6182a38bdcb7bada2b621b2a7001783aa82c4e7deb90dc7d21cc7a28d485"
        },
        "downloads": -1,
        "filename": "simd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d02db13fb0c4438ccfcddd6ba21beba1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17158,
        "upload_time": "2021-11-28T13:18:13",
        "upload_time_iso_8601": "2021-11-28T13:18:13.300185Z",
        "url": "https://files.pythonhosted.org/packages/a9/19/25c343ca52d89d0ddd87789626a900cbafbfc89ed032ca56da199358761e/simd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a91925c343ca52d89d0ddd87789626a900cbafbfc89ed032ca56da199358761e",
        "md5": "d02db13fb0c4438ccfcddd6ba21beba1",
        "sha256": "733e6182a38bdcb7bada2b621b2a7001783aa82c4e7deb90dc7d21cc7a28d485"
      },
      "downloads": -1,
      "filename": "simd-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d02db13fb0c4438ccfcddd6ba21beba1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17158,
      "upload_time": "2021-11-28T13:18:13",
      "upload_time_iso_8601": "2021-11-28T13:18:13.300185Z",
      "url": "https://files.pythonhosted.org/packages/a9/19/25c343ca52d89d0ddd87789626a900cbafbfc89ed032ca56da199358761e/simd-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}