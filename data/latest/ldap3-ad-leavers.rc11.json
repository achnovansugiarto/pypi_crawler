{
  "info": {
    "author": "Mervin Hemaraju",
    "author_email": "th3pl4gu33@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ldap3-ad-leavers\n\nThis is an extension to the orginal project [ldap3](https://pypi.org/project/ldap3/) python library.\n\nThis library provides facilities to access the ldap3 library and functions that will be helpful when offboarding users from an AD.\n\n## Getting Started\n\nAssuming that you have Python and virtualenv installed, set up your environment and install the required dependencies using pip:\n\n```\npip install ldap3-ad-leavers\n```\n\n## Using the module\n\nAfter installing the module, you need to import the main class operations object and instantiate it to create a connection to AWS:\n\nCurrently, the followign class operations available are:\n\n- UserOps: To manipulate user objects in AD\n\n## Classes and methods\n\n* [user\\_operations](#user_operations)\n\n* [UserOps](#user_operations.UserOps)\n  * [\\_\\_init\\_\\_](#user_operations.UserOps.__init__)\n  * [get\\_all](#user_operations.UserOps.get_all)\n  * [deep\\_single\\_search](#user_operations.UserOps.deep_single_search)\n  * [delete](#user_operations.UserOps.delete)\n  * [move](#user_operations.UserOps.move)\n  * [set\\_expiration](#user_operations.UserOps.set_expiration)\n  * [disable](#user_operations.UserOps.disable)\n* [models](#models)\n* [models.core.object\\_class](#models.core.object_class)\n  * [ObjectClass](#models.core.object_class.ObjectClass)\n    * [\\_\\_init\\_\\_](#models.core.object_class.ObjectClass.__init__)\n* [models.core](#models.core)\n* [models.core.ad\\_ops](#models.core.ad_ops)\n  * [AdOperations](#models.core.ad_ops.AdOperations)\n    * [\\_\\_init\\_\\_](#models.core.ad_ops.AdOperations.__init__)\n    * [get\\_all](#models.core.ad_ops.AdOperations.get_all)\n    * [deep\\_single\\_search](#models.core.ad_ops.AdOperations.deep_single_search)\n    * [move](#models.core.ad_ops.AdOperations.move)\n    * [delete](#models.core.ad_ops.AdOperations.delete)\n* [models.core.exceptions](#models.core.exceptions)\n  * [AdSearchException](#models.core.exceptions.AdSearchException)\n  * [AdModifyException](#models.core.exceptions.AdModifyException)\n* [models.data\\_classes.user](#models.data_classes.user)\n  * [User](#models.data_classes.user.User)\n    * [\\_\\_init\\_\\_](#models.data_classes.user.User.__init__)\n    * [is\\_eligible\\_to\\_disable](#models.data_classes.user.User.is_eligible_to_disable)\n    * [is\\_eligible\\_for\\_deletion](#models.data_classes.user.User.is_eligible_for_deletion)\n* [models.data\\_classes](#models.data_classes)\n\n`<a id=\"__init__\"></a>`\n\n# \\_\\_init\\_\\_\n\n`<a id=\"user_operations\"></a>`\n\n# user\\_operations\n\n`<a id=\"user_operations.UserOps\"></a>`\n\n## UserOps Objects\n\n```python\nclass UserOps(AdOperations)\n```\n\n`<a id=\"user_operations.UserOps.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(hosts, username, password) -> None\n```\n\nThis class will model a User/Person in an AD\nIt inherits the AdOperations abstract class\nAuthentication is done in constructor\nIt users the filter (|(objectclass=user)(objectclass=person)) from ldap3\n\n**Arguments**:\n\n- `hosts` _list[str]_ - This is a list of AD hosts that will be added to the Server Pool\n- `username` _str_ - This is the username that ldap3 will assume to connect to the AD sosts\n- `password` _str_ - This is the password for the account\n\n`<a id=\"user_operations.UserOps.get_all\"></a>`\n\n#### get\\_all\n\n```python\ndef get_all(search_base: str) -> list[User]\n```\n\nThis function will get all User/Person from the given search base\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n\n**Raises**:\n\n- `AdSearchException` - If the search is not successful, this exception will be raised\n\n**Returns**:\n\n- `list[User]` - The AD list of users obtained\n\n`<a id=\"user_operations.UserOps.deep_single_search\"></a>`\n\n#### deep\\_single\\_search\n\n```python\ndef deep_single_search(search_base: str, unique_identifier: str) -> User\n```\n\nThis function will search for a single User that matches the unique_identifier criteria.\nIf multiple is obtained, it will return the first one obtained.\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n- `unique_identifier` _str_ - A unique identifier that will be used to identify the user\n\n**Returns**:\n\n- `User` - returns a User object\n\n`<a id=\"user_operations.UserOps.delete\"></a>`\n\n#### delete\n\n```python\ndef delete(distinguished_name: str) -> None\n```\n\nThis function will delete a User from AD\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the User\n\n**Raises**:\n\n- `AdModifyException` - If an error occurs while deleting the User, it will raise this exception\n\n`<a id=\"user_operations.UserOps.move\"></a>`\n\n#### move\n\n```python\ndef move(distinguished_name: str, cn: str, new_ou: dict) -> None\n```\n\nThis function will move one User from an OU to another\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the User\n- `cn` _str_ - The cn of the User\n- `new_ou` _dict_ - The OU where to move the User\n\n**Raises**:\n\n- `AdModifyException` - If an error occurs while moving the User, it will raise this exception\n\n`<a id=\"user_operations.UserOps.set_expiration\"></a>`\n\n#### set\\_expiration\n\n```python\ndef set_expiration(distinguished_name: str, expiration_date: datetime)\n```\n\nThis function will set an expiration on the User's account in AD\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the user account\n- `expiration_date` _datetime_ - The datetime to expire the account\n\n**Raises**:\n\n- `AdModifyException` - If an error occurs while setting an expiration on the account, it will raise this exception\n\n`<a id=\"user_operations.UserOps.disable\"></a>`\n\n#### disable\n\n```python\ndef disable(distinguished_name: str)\n```\n\nThis function will disable a User account in AD\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the user account\n\n**Raises**:\n\n- `AdModifyException` - If an error occurs while disabling the User, it will raise this exception\n\n`<a id=\"models\"></a>`\n\n# models\n\n`<a id=\"models.core.object_class\"></a>`\n\n# models.core.object\\_class\n\n`<a id=\"models.core.object_class.ObjectClass\"></a>`\n\n## ObjectClass Objects\n\n```python\nclass ObjectClass()\n```\n\n`<a id=\"models.core.object_class.ObjectClass.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(name: str, distinguished_name: str, when_created: datetime)\n```\n\nThis is the ObjectClass model\nThis is the Parent class for all AD objects\n\n**Arguments**:\n\n- `name` _str_ - The name of the AD object\n- `distinguished_name` _str_ - The dn of the AD object\n- `when_created` _datetime_ - The datetime when the AD object was created\n\n`<a id=\"models.core\"></a>`\n\n# models.core\n\n`<a id=\"models.core.ad_ops\"></a>`\n\n# models.core.ad\\_ops\n\n`<a id=\"models.core.ad_ops.AdOperations\"></a>`\n\n## AdOperations Objects\n\n```python\nclass AdOperations(ABC)\n```\n\n`<a id=\"models.core.ad_ops.AdOperations.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(hosts, username: str, password: str) -> None\n```\n\nThis is an abstract class that will model all AD objects of this project\nAll AD object class operations will inherit from this class\nAuthentication is done in constructor\n\n**Arguments**:\n\n- `hosts` _list[str]_ - This is a list of AD hosts that will be added to the Server Pool\n- `username` _str_ - This is the username that ldap3 will assume to connect to the AD sosts\n- `password` _str_ - This is the password for the account\n\n`<a id=\"models.core.ad_ops.AdOperations.get_all\"></a>`\n\n#### get\\_all\n\n```python\n@abstractmethod\ndef get_all(search_base: str) -> list[ObjectClass]\n```\n\nThis function will get all objects from the given search base\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n\n**Returns**:\n\n- `list[ObjectClass]` - The AD list of objects obtained\n\n`<a id=\"models.core.ad_ops.AdOperations.deep_single_search\"></a>`\n\n#### deep\\_single\\_search\n\n```python\n@abstractmethod\ndef deep_single_search(search_base: str,\n                       unique_identifier: str) -> ObjectClass\n```\n\nThis function will search for single object that matches the unique_identifier criteria.\nIf multiple is obtained, it will return the first one obtained.\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n- `unique_identifier` _str_ - A unique identifier that will be used to identify the object\n\n**Returns**:\n\n- `ObjectClass` - An AD object class\n\n`<a id=\"models.core.ad_ops.AdOperations.move\"></a>`\n\n#### move\n\n```python\n@abstractmethod\ndef move(distinguished_name: str, cn: str, new_ou: dict) -> None\n```\n\nThis function will move one AD object from an OU to another\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the AD object\n- `cn` _str_ - The cn of the AD object\n- `new_ou` _dict_ - The OU where to move the AD object\n\n`<a id=\"models.core.ad_ops.AdOperations.delete\"></a>`\n\n#### delete\n\n```python\n@abstractmethod\ndef delete(distinguished_name: str) -> None\n```\n\nThis function will delete an AD object\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the AD object\n\n`<a id=\"models.core.exceptions\"></a>`\n\n# models.core.exceptions\n\n`<a id=\"models.core.exceptions.AdSearchException\"></a>`\n\n## AdSearchException Objects\n\n```python\nclass AdSearchException(Exception)\n```\n\nWill raise all exceptions that are related to an AD search operation\n\n**Arguments**:\n\n- `Exception` _Exception_ - Inherits the Exception class\n\n`<a id=\"models.core.exceptions.AdModifyException\"></a>`\n\n## AdModifyException Objects\n\n```python\nclass AdModifyException(Exception)\n```\n\nWill raise all exceptions that are related to an AD Modify operation\n\n**Arguments**:\n\n- `Exception` _Exception_ - Inherits the Exception class\n\n`<a id=\"models.data_classes.user\"></a>`\n\n# models.data\\_classes.user\n\n`<a id=\"models.data_classes.user.User\"></a>`\n\n## User Objects\n\n```python\n@dataclass\nclass User(ObjectClass)\n```\n\n`<a id=\"models.data_classes.user.User.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(schema: dict)\n```\n\nThis is the User data class model\nIt inherits from the ObjectClass model\nThis class will model a user object in an AD\n\n**Arguments**:\n\n- `schema` _dict_ - The schema of an AD object that represent a User/Person from ldap3\n\n`<a id=\"models.data_classes.user.User.is_eligible_to_disable\"></a>`\n\n#### is\\_eligible\\_to\\_disable\n\n```python\ndef is_eligible_to_disable()\n```\n\nThis function will verify if the user is eligible to have its account disabled\nEligibility will be calculated whether the account has already expired or not\n\n**Returns**:\n\n- `bool` - Returns True or False\n\n`<a id=\"models.data_classes.user.User.is_eligible_for_deletion\"></a>`\n\n#### is\\_eligible\\_for\\_deletion\n\n```python\ndef is_eligible_for_deletion(days_limit: int)\n```\n\nThis function will verify if the user is eligible to have its account deleted\nEligibility will be calculated whether the days_limit argument has already exceeded the\ndate that the account has been expired\n\n**Arguments**:\n\n- `days_limit` _int_ - The days after which an account is considered eligible to be deleted after it has been expired\n\n**Returns**:\n\n- `bool` - Returns True or False\n\n`<a id=\"models.data_classes\"></a>`\n\n# models.data\\_classe\n\n* [\\_\\_init\\_\\_](#__init__)\n* [user\\_operations](#user_operations)\n  * [UserOps](#user_operations.UserOps)\n    * [\\_\\_init\\_\\_](#user_operations.UserOps.__init__)\n    * [get\\_all](#user_operations.UserOps.get_all)\n* [models](#models)\n* [models.core.object\\_class](#models.core.object_class)\n  * [ObjectClass](#models.core.object_class.ObjectClass)\n    * [\\_\\_init\\_\\_](#models.core.object_class.ObjectClass.__init__)\n* [models.core](#models.core)\n* [models.core.ad\\_ops](#models.core.ad_ops)\n  * [AdOperations](#models.core.ad_ops.AdOperations)\n    * [\\_\\_init\\_\\_](#models.core.ad_ops.AdOperations.__init__)\n    * [get\\_all](#models.core.ad_ops.AdOperations.get_all)\n    * [deep\\_single\\_search](#models.core.ad_ops.AdOperations.deep_single_search)\n    * [move](#models.core.ad_ops.AdOperations.move)\n    * [delete](#models.core.ad_ops.AdOperations.delete)\n* [models.core.exceptions](#models.core.exceptions)\n  * [AdSearchException](#models.core.exceptions.AdSearchException)\n  * [AdModifyException](#models.core.exceptions.AdModifyException)\n* [models.data\\_classes.user](#models.data_classes.user)\n  * [User](#models.data_classes.user.User)\n    * [\\_\\_init\\_\\_](#models.data_classes.user.User.__init__)\n    * [is\\_eligible\\_to\\_disable](#models.data_classes.user.User.is_eligible_to_disable)\n    * [is\\_eligible\\_for\\_deletion](#models.data_classes.user.User.is_eligible_for_deletion)\n* [models.data\\_classes](#models.data_classes)\n\n`<a id=\"__init__\"></a>`\n\n# \\_\\_init\\_\\_\n\n`<a id=\"user_operations\"></a>`\n\n# user\\_operations\n\n`<a id=\"user_operations.UserOps\"></a>`\n\n## UserOps Objects\n\n```python\nclass UserOps(AdOperations)\n```\n\n`<a id=\"user_operations.UserOps.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(hosts, username, password) -> None\n```\n\nThis class will model a User/Person in an AD\nIt inherits the AdOperations abstract class\nAuthentication is done in constructor\n\n**Arguments**:\n\n- `hosts` _list[str]_ - This is a list of AD hosts that will be added to the Server Pool\n- `username` _str_ - This is the username that ldap3 will assume to connect to the AD sosts\n- `password` _str_ - This is the password for the account\n\n`<a id=\"user_operations.UserOps.get_all\"></a>`\n\n#### get\\_all\n\n```python\ndef get_all(search_base: str) -> list[User]\n```\n\nThis function will get all User/Person from the given search base\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n\n**Raises**:\n\n- `AdSearchException` - If the search is not successful, this exception will be raised\n\n**Returns**:\n\n- `list[User]` - The AD list of users obtained\n\n`<a id=\"models\"></a>`\n\n# models\n\n`<a id=\"models.core.object_class\"></a>`\n\n# models.core.object\\_class\n\n`<a id=\"models.core.object_class.ObjectClass\"></a>`\n\n## ObjectClass Objects\n\n```python\nclass ObjectClass()\n```\n\n`<a id=\"models.core.object_class.ObjectClass.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(name: str, distinguished_name: str, when_created: datetime)\n```\n\nThis is the ObjectClass model\nThis is the Parent class for all AD objects\n\n**Arguments**:\n\n- `name` _str_ - The name of the AD object\n- `distinguished_name` _str_ - The dn of the AD object\n- `when_created` _datetime_ - The datetime when the AD object was created\n\n`<a id=\"models.core\"></a>`\n\n# models.core\n\n`<a id=\"models.core.ad_ops\"></a>`\n\n# models.core.ad\\_ops\n\n`<a id=\"models.core.ad_ops.AdOperations\"></a>`\n\n## AdOperations Objects\n\n```python\nclass AdOperations(ABC)\n```\n\n`<a id=\"models.core.ad_ops.AdOperations.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(hosts, username: str, password: str) -> None\n```\n\nThis is an abstract class that will model all AD objects of this project\nAll AD object class operations will inherit from this class\nAuthentication is done in constructor\n\n**Arguments**:\n\n- `hosts` _list[str]_ - This is a list of AD hosts that will be added to the Server Pool\n- `username` _str_ - This is the username that ldap3 will assume to connect to the AD sosts\n- `password` _str_ - This is the password for the account\n\n`<a id=\"models.core.ad_ops.AdOperations.get_all\"></a>`\n\n#### get\\_all\n\n```python\n@abstractmethod\ndef get_all(search_base: str) -> list[ObjectClass]\n```\n\nThis function will get all objects from the given search base\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n\n**Returns**:\n\n- `list[ObjectClass]` - The AD list of objects obtained\n\n`<a id=\"models.core.ad_ops.AdOperations.deep_single_search\"></a>`\n\n#### deep\\_single\\_search\n\n```python\n@abstractmethod\ndef deep_single_search(search_base: str,\n                       unique_identifier: str) -> ObjectClass\n```\n\nThis function will search for single object that matches the unique_identifier criteria.\nIf multiple is obtained, it will return the first one obtained.\n\n**Arguments**:\n\n- `search_base` _str_ - The AD search base that will be looked up from\n- `unique_identifier` _str_ - A unique identifier that will be used to identify the object\n\n**Returns**:\n\n- `ObjectClass` - An AD object class\n\n`<a id=\"models.core.ad_ops.AdOperations.move\"></a>`\n\n#### move\n\n```python\n@abstractmethod\ndef move(distinguished_name: str, cn: str, new_ou: dict) -> None\n```\n\nThis function will move one AD object from an OU to another\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the AD object\n- `cn` _str_ - The cn of the AD object\n- `new_ou` _dict_ - The OU where to move the AD object\n\n`<a id=\"models.core.ad_ops.AdOperations.delete\"></a>`\n\n#### delete\n\n```python\n@abstractmethod\ndef delete(distinguished_name: str) -> None\n```\n\nThis function will delete an AD object\n\n**Arguments**:\n\n- `distinguished_name` _str_ - The dn of the AD object\n\n`<a id=\"models.core.exceptions\"></a>`\n\n# models.core.exceptions\n\n`<a id=\"models.core.exceptions.AdSearchException\"></a>`\n\n## AdSearchException Objects\n\n```python\nclass AdSearchException(Exception)\n```\n\nWill raise all exceptions that are related to an AD search operation\n\n**Arguments**:\n\n- `Exception` _Exception_ - Inherits the Exception class\n\n`<a id=\"models.core.exceptions.AdModifyException\"></a>`\n\n## AdModifyException Objects\n\n```python\nclass AdModifyException(Exception)\n```\n\nWill raise all exceptions that are related to an AD Modify operation\n\n**Arguments**:\n\n- `Exception` _Exception_ - Inherits the Exception class\n\n`<a id=\"models.data_classes.user\"></a>`\n\n# models.data\\_classes.user\n\n`<a id=\"models.data_classes.user.User\"></a>`\n\n## User Objects\n\n```python\n@dataclass\nclass User(ObjectClass)\n```\n\n`<a id=\"models.data_classes.user.User.__init__\"></a>`\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(schema: dict)\n```\n\nThis is the User data class model\nIt inherits from the ObjectClass model\nThis class will model a user object in an AD\n\n**Arguments**:\n\n- `schema` _dict_ - The schema of an AD object that represent a User/Person from ldap3\n\n`<a id=\"models.data_classes.user.User.is_eligible_to_disable\"></a>`\n\n#### is\\_eligible\\_to\\_disable\n\n```python\ndef is_eligible_to_disable()\n```\n\nThis function will verify if the user is eligible to have its account disabled\nEligibility will be calculated whether the account has already expired or not\n\n**Returns**:\n\n- `bool` - Returns True or False\n\n`<a id=\"models.data_classes.user.User.is_eligible_for_deletion\"></a>`\n\n#### is\\_eligible\\_for\\_deletion\n\n```python\ndef is_eligible_for_deletion(days_limit: int)\n```\n\nThis function will verify if the user is eligible to have its account deleted\nEligibility will be calculated whether the days_limit argument has already exceeded the\ndate that the account has been expired\n\n**Arguments**:\n\n- `days_limit` _int_ - The days after which an account is considered eligible to be deleted after it has been expired\n\n**Returns**:\n\n- `bool` - Returns True or False\n\n`<a id=\"models.data_classes\"></a>`\n\n## Running Tests\n\nYou can run the tests by following the steps below:\n\n1. Clone or download the project to a folder on your computer.\n2. Run the tests using the command `./run_test.sh`\n\n## License\n\n```\nCopyright Mervin Hemaraju\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mervinhemaraju/ldap3-ad-leavers",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ldap3-ad-leavers",
    "package_url": "https://pypi.org/project/ldap3-ad-leavers/",
    "platform": null,
    "project_url": "https://pypi.org/project/ldap3-ad-leavers/",
    "project_urls": {
      "Homepage": "https://github.com/mervinhemaraju/ldap3-ad-leavers"
    },
    "release_url": "https://pypi.org/project/ldap3-ad-leavers/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A helper library for offboarding user from AD.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16072555,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa8bc7a0b60b9885dc388153bca8267ef5dd974707c3b7203a6db02f6a41cb3a",
          "md5": "efc73019920a6373bad03a65722a1926",
          "sha256": "f9ea25163d5936bbfd64bdc3c15853a35bb92f2183b07c7bb68352ff0f0c2369"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efc73019920a6373bad03a65722a1926",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3830,
        "upload_time": "2022-10-28T06:58:08",
        "upload_time_iso_8601": "2022-10-28T06:58:08.504245Z",
        "url": "https://files.pythonhosted.org/packages/aa/8b/c7a0b60b9885dc388153bca8267ef5dd974707c3b7203a6db02f6a41cb3a/ldap3-ad-leavers-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92329e590e943bb32ff4254a0ba72091ef0a02983621f16798aa8a9cbc6ee810",
          "md5": "558daf00cee661415ab43e7cb991fdcf",
          "sha256": "302fccc7db32f030ecf5e5a7589d72506efcee677d6298714cc2a7ec4b67f498"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "558daf00cee661415ab43e7cb991fdcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3979,
        "upload_time": "2022-10-31T16:36:18",
        "upload_time_iso_8601": "2022-10-31T16:36:18.741040Z",
        "url": "https://files.pythonhosted.org/packages/92/32/9e590e943bb32ff4254a0ba72091ef0a02983621f16798aa8a9cbc6ee810/ldap3-ad-leavers-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b20bfed797553884b724b1ae6f649391cd9314d2283adcb92705e80f9deffc",
          "md5": "2e2fb973d42f5a477de065916b683883",
          "sha256": "fb1e66c2100a954ff258cf2920d4a566303bf3f5fc3f11b5e685160b0bce8a25"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e2fb973d42f5a477de065916b683883",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3963,
        "upload_time": "2022-10-31T16:53:29",
        "upload_time_iso_8601": "2022-10-31T16:53:29.079066Z",
        "url": "https://files.pythonhosted.org/packages/02/b2/0bfed797553884b724b1ae6f649391cd9314d2283adcb92705e80f9deffc/ldap3-ad-leavers-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c295d9a7b51441725a71938f8788d88272f802c7c66104e3197238a50f8fbf0d",
          "md5": "694ca331055fcc4372cc2321d2b9310f",
          "sha256": "bcf42d06dd5dc14e828fd535de8ce3e8996f30bdecf5d0ed045c38eca3eda8f7"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "694ca331055fcc4372cc2321d2b9310f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4010,
        "upload_time": "2022-10-31T17:37:28",
        "upload_time_iso_8601": "2022-10-31T17:37:28.272696Z",
        "url": "https://files.pythonhosted.org/packages/c2/95/d9a7b51441725a71938f8788d88272f802c7c66104e3197238a50f8fbf0d/ldap3-ad-leavers-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce1f875a5eca950cfb1dbcefcb2a152e226b7544d92cbc26219bd9b259cf0bca",
          "md5": "ef493a6a212043f0ccbda5536fe5fc13",
          "sha256": "a36ca33513ffad70fc6bf6d71275b9d59e4d77908447a9129438210a1fe6da5e"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef493a6a212043f0ccbda5536fe5fc13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4287,
        "upload_time": "2022-11-02T18:55:03",
        "upload_time_iso_8601": "2022-11-02T18:55:03.886490Z",
        "url": "https://files.pythonhosted.org/packages/ce/1f/875a5eca950cfb1dbcefcb2a152e226b7544d92cbc26219bd9b259cf0bca/ldap3-ad-leavers-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18340b497b221a3f7d847a0dec1a90ba6438a70c51e2f6e998df5ed452e228b6",
          "md5": "22b9dc4c72bb4e9874a2a8eed1b275f6",
          "sha256": "dd28d947d07e46d008b814d7df8ed63c7f9bae30b55c6a838c0a8e457fe3af1b"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "22b9dc4c72bb4e9874a2a8eed1b275f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4271,
        "upload_time": "2022-11-03T11:09:03",
        "upload_time_iso_8601": "2022-11-03T11:09:03.542387Z",
        "url": "https://files.pythonhosted.org/packages/18/34/0b497b221a3f7d847a0dec1a90ba6438a70c51e2f6e998df5ed452e228b6/ldap3-ad-leavers-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f46057fceb75327bb344925c9669235f909eca1f740537b58d22137d99b3171d",
          "md5": "8687c4bb03287539b1b613bd0a979f20",
          "sha256": "a107659fef770863387f6de24842b91748b8767e0e361c0439b20777c1b6cf8d"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8687c4bb03287539b1b613bd0a979f20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9052,
        "upload_time": "2022-11-07T18:52:48",
        "upload_time_iso_8601": "2022-11-07T18:52:48.079336Z",
        "url": "https://files.pythonhosted.org/packages/f4/60/57fceb75327bb344925c9669235f909eca1f740537b58d22137d99b3171d/ldap3-ad-leavers-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1bc7d9411df870f5d40b48eefdb385a289033f9b779413ebf9c6b324526d1a6",
          "md5": "665b37b631e7a9f5be1ba5eeca86d1d1",
          "sha256": "47350a73d4cfd42657ed62521e2e54b6196f23e30b21fe9f4a8151767f4add24"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "665b37b631e7a9f5be1ba5eeca86d1d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9150,
        "upload_time": "2022-11-08T14:57:18",
        "upload_time_iso_8601": "2022-11-08T14:57:18.137176Z",
        "url": "https://files.pythonhosted.org/packages/d1/bc/7d9411df870f5d40b48eefdb385a289033f9b779413ebf9c6b324526d1a6/ldap3-ad-leavers-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee75bf890fdc8545d708b5432ad1a0f6ce65dc118dbb2e912d2266866e8ce1eb",
          "md5": "578be1e848be784809d33bbadc35411d",
          "sha256": "3115a664c68f3b6a42515326dd28ed9d03784174d07b7c6df5c112e35a257bb7"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "578be1e848be784809d33bbadc35411d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9139,
        "upload_time": "2022-11-11T06:50:19",
        "upload_time_iso_8601": "2022-11-11T06:50:19.726158Z",
        "url": "https://files.pythonhosted.org/packages/ee/75/bf890fdc8545d708b5432ad1a0f6ce65dc118dbb2e912d2266866e8ce1eb/ldap3-ad-leavers-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa023dde24a9b8ddb27f09ad703dbc542d8465390614061107f041531952dd68",
          "md5": "857aa917d97b3a7f83b239c0c19723c8",
          "sha256": "602059e055cb042569dcd8b7661771d3215a28b81ac1a573aea3747ac0abf068"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "857aa917d97b3a7f83b239c0c19723c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9134,
        "upload_time": "2022-11-11T07:25:56",
        "upload_time_iso_8601": "2022-11-11T07:25:56.736965Z",
        "url": "https://files.pythonhosted.org/packages/aa/02/3dde24a9b8ddb27f09ad703dbc542d8465390614061107f041531952dd68/ldap3-ad-leavers-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aa22f6701aa89b5c3f472122a41ddb876b0929f90d463dc77f62d736e973d84",
          "md5": "75797a4f1e49fbbf408886bbc4f53597",
          "sha256": "1538685f24d34e05ed77e411aca65f6311e3b378ffc51dbb0ff3c1c0d735bc60"
        },
        "downloads": -1,
        "filename": "ldap3-ad-leavers-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75797a4f1e49fbbf408886bbc4f53597",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21276,
        "upload_time": "2022-12-12T10:24:28",
        "upload_time_iso_8601": "2022-12-12T10:24:28.245520Z",
        "url": "https://files.pythonhosted.org/packages/6a/a2/2f6701aa89b5c3f472122a41ddb876b0929f90d463dc77f62d736e973d84/ldap3-ad-leavers-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6aa22f6701aa89b5c3f472122a41ddb876b0929f90d463dc77f62d736e973d84",
        "md5": "75797a4f1e49fbbf408886bbc4f53597",
        "sha256": "1538685f24d34e05ed77e411aca65f6311e3b378ffc51dbb0ff3c1c0d735bc60"
      },
      "downloads": -1,
      "filename": "ldap3-ad-leavers-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "75797a4f1e49fbbf408886bbc4f53597",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21276,
      "upload_time": "2022-12-12T10:24:28",
      "upload_time_iso_8601": "2022-12-12T10:24:28.245520Z",
      "url": "https://files.pythonhosted.org/packages/6a/a2/2f6701aa89b5c3f472122a41ddb876b0929f90d463dc77f62d736e973d84/ldap3-ad-leavers-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}