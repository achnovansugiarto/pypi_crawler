{
  "info": {
    "author": "Mark Franey",
    "author_email": "franey.mark@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# vvapp\n> A python library simplifying ipyvuetify voila application building.\n\n\n## Documentation\n\nhttps://radinplaid.github.io/vvapp/\n\n## Install\n\n`pip install vvapp`\n\n## Inputs\n\n`vvapp` is meant to be used in Jupyter, so launching jupyter first (`$jupyter notebook`).\n\nThere are a few key things to keep in mind when getting up and running with `vvapp`:\n\n* `v_model`\n    * The value of `vvapp` inputs is set and accessed via the `v_model` attribute, following the `ipyvuetify` convention\n* `class_`\n    * This is where you put `vuetify.js` class properties, like `ma-4` to add margins around the input\n* `style_`\n    * This is where you can add CSS to your elements\n* `hint`\n    * The `hint` can be a string *or* a callable to provide input validation\n    * If `hint` is a callable, it must return a string or None; if it returns a string, the input is marked as invalid and the string is displayed\n\n\n```\nfrom vvapp.inputs import __all__ as available_input_widgets\navailable_input_widgets\n```\n\n\n\n\n    ['input_switch',\n     'input_checkbox',\n     'input_text',\n     'input_password',\n     'input_time',\n     'input_date',\n     'input_daterange',\n     'input_number',\n     'input_range_slider',\n     'input_slider',\n     'input_radio_buttons',\n     'input_select',\n     'input_select_or_create',\n     'input_button',\n     'input_color_picker']\n\n\n\n```\nfrom vvapp.inputs import *\n```\n\n### text\n\n```\ninput_text(label='Text Input',hint='Enter some text',v_model='some text')\n```\n\n<img alt=\"Text Input\" caption=\"Text Input Example\" src=\"images/input_text.png\">\n\n### select (dropdown)\n\nFor a select input, the `v_model` can be a list:\n\n```\ninput_select(items=['one','two','three'],v_model='two')\n```\n\n<img alt=\"Select Input\" caption=\"Select Input\" src=\"images/select1.png\">\n\n... or a dict where the keys are the labels to be displayed and the values and the values\n\n```\ninput_select(items={'One':'one','Two':'two','Three':'three'},v_model='two')\n```\n\n<img alt=\"Select Input\" caption=\"Select Input With dict input\" src=\"images/select2.png\">\n\nAlso, it is possible for multiple items to be selected via the `multiple` prop:\n\n```\ntmp = input_select(items={'One':'one','Two':'two','Three':'three'},v_model=['one','two'],multiple=True)\ntmp\n```\n\n<img alt=\"Select Input\" caption=\"Multiple Select Input\" src=\"images/select3.png\">\n\n```\ntmp.v_model\n```\n\n\n\n\n    ['one', 'two']\n\n\n\n### select_or_create (combobox)\n\n```\ninput_select_or_create(items=['one','two','three'],v_model=['one','two'],multiple=True)\n\n```\n\n<img alt=\"Combobox Input\" caption=\"Combobox\" src=\"images/select_or_create.png\">\n\n### switch\n\n```\ninput_switch(label='Switch example',v_model=True)\n```\n\n<img alt=\"Switch Input\" caption=\"Switch Input Example\" src=\"images/switch.png\">\n\n### checkbox\n\n```\ninput_checkbox(label='Checkbox example',v_model=True)\n```\n\n<img alt=\"Checkbox Input\" caption=\"Checkbox\" src=\"images/checkbox.png\">\n\n### slider\n\n```\ninput_slider(label='Slider Example',\n       min=0,\n       max=10,\n       step=1,\n       color='red',\n       track_color='red',\n       v_model=5)\n```\n\n<img alt=\"Slider Input\" caption=\"Slider\" src=\"images/slider.png\">\n\n### range_slider\n\n```\ninput_range_slider(min=0,max=100,v_model=[40,60])\n```\n\n<img alt=\"Range Slider input\" caption=\"Range Slider Example\" src=\"images/range_slider.png\">\n\n### radio_buttons\n\n```\ninput_radio_buttons(choices={\n                    'Apple': 'apple',\n                    'Blueberry': 'blueberry',\n                    'Pumpkin': 'pumpkin'\n                },\n              label='What is your favourite pie flavour?',\n              v_model='blueberry')\n```\n\n<img alt=\"Radio Button Input\" caption=\"Radio Button\" src=\"images/radio_buttons.png\">\n\n### date\n\n```\ninput_date(label='Please enter a date (format: YYYY-mm-dd)',\n     v_model='2020-04-15',\n     style_='max-width:320px')\n```\n\n<img alt=\"Date Input\" caption=\"Date Input\" src=\"images/input_date.png\">\n\n### time\n\n```\ninput_time(label='Please enter a time (format: HH:MM)',\n     v_model='13:34',\n     style_='max-width:320px')\n```\n\n\n<img alt=\"Time Input\" caption=\"Time Input\" src=\"images/input_time.png\">\n\n\n### number\n\n```\ninput_number(placeholder='Enter a number',\n     style_='max-width:320px')\n```\n\n<img alt=\"Number Input\" caption=\"Number Input\" src=\"images/input_number.png\">\n\n\n`number` inputs have a default validation function that changes the `error` state of the input to True and prints a sensible hint if the value is less than `min_value` or greater than `max_value`\n\n```\ninput_number(label='Number Input',\n       v_model=123,\n       min_value=0,\n       max_value=100,\n     style_='max-width:320px')\n```\n\n\n<img alt=\"Number Input With Validation\" caption=\"Number Input With Validation\" src=\"images/input_number_validation.png\">\n\n\n### password\n\n```\npw = input_password(label='Please enter a password',v_model='correcthorsebatterystapler')\npw\n```\n\n<img alt=\"Password Input\" caption=\"Password Input\" src=\"images/input_password.png\">\n\n\nThe value of of a vvapp widget is set/accessed by the `v_model` attribute, just like in ipyvuetify\n\n```\npw.v_model\n```\n\n\n\n\n    'correcthorsebatterystapler'\n\n\n\nHere we demonstrate the use of a function to validate the value of the input.\n\nIn this example the password must be at least 12 characters, less than 64 characters and include at least one number:\n\n```\nimport re\ndef validate_pw(widget_value):\n    if widget_value is None:\n        return 'Input must not be None'\n\n    else:\n        if len(widget_value) < 12:\n            return 'Too Short!'\n\n        if len(widget_value) > 64:\n            return 'Too Long!'\n\n        if not re.search('[0-9]+',widget_value):\n            return 'Must contain at least one number!'\n\n    return None\n\npw = input_password(label='Please enter a password',v_model='correcthorsebatterystapler', hint=validate_pw)\npw\n```\n\n<img alt=\"Password Input with Validation\" caption=\"Password Input with Validation\" src=\"images/input_password_validation.png\">\n\n\n### button\n\n```\ndef print_test_on_click(*args):\n    print('test')\n\ninput_button(label='I print `test` on click',\n       size='large',\n       color='teal',\n       dark=True,\n       on_click=print_test_on_click)\n\n```\n\n<img alt=\"Button Input Example\" caption=\"Button Input Example\" src=\"images/input_button1.png\">\n\n```\ninput_button(icon='mdi-recycle',\n       size='large',\n       color='teal',\n       dark=True,\n       fab=True,\n       class_='ma-4'\n      )\n```\n\n<img alt=\"Button Input Example\" caption=\"Fab Style With Icon Button Input Example\" src=\"images/input_button2.png\">\n\n### date_range\n\n```\ntemp = input_daterange(dates=['2020-01-01','2020-02-01'])\ntemp\n```\n\n<img alt=\"Date Range Input Example\" caption=\"Date Range Input Example\" src=\"images/daterange.png\">\n\n\n```\ntemp.dates\n```\n\n\n\n\n    ['2020-01-01', '2020-02-01']\n\n\n\n### color_picker\n\n```\ntemp=input_color_picker()\ntemp\n```\n\n<img alt=\"Color Picker Input Example\" caption=\"Color Picker Input Example\" src=\"images/color_picker.png\">\n\n\n```\ntemp.v_model\n```\n\n## Outputs\n\n```\nfrom vvapp.outputs import __all__ as available_output_widgets\navailable_output_widgets\n```\n\n\n\n\n    ['output_pandas_table',\n     'output_markdown',\n     'output_info_snackbar',\n     'output_dialog_button',\n     'output_container',\n     'output_row',\n     'output_column']\n\n\n\n```\nfrom vvapp.outputs import *\n```\n\n### PandasTable\n\n```\nimport pandas as pd\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\noutput_pandas_table(data=df,title='My DataFrame')\n```\n\n<img alt=\"Pandas Dataframe Output\" caption=\"Pandas Dataframe Output\" src=\"images/output_pandas_table2.png\">\n\n\nThe pandas DataFrame output has a nice warning/error display if the search returns zero results or if are no rows in the PandasDataframe:\n\n```\nimport pandas as pd\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\noutput_pandas_table(data=df,title='My DataFrame')\n```\n\n<img alt=\"Pandas Dataframe Output No Search Results\" caption=\"Pandas Dataframe Output No Search Results\" src=\"images/output_pandas_table_zeroresults.png\">\n\n\n```\nimport pandas as pd\noutput_pandas_table(data=pd.DataFrame(),title='My DataFrame')\n```\n\n<img alt=\"Pandas Dataframe Output No Data\" caption=\"Pandas Dataframe Output No Data\" src=\"images/output_pandas_table_nodata.png\">\n\n\n### Markdown\n\n```\noutput_markdown(\"\"\"\n# Markdown Title\n\n## Markdown Subtitle\n\nSome body text\n\n* a list element\n* another list element\n\"\"\")\n```\n\n<img alt=\"Output Markdown\" caption=\"Markdown output example\" src=\"images/output_markdown.png\">\n\n\n### Snackbar\n\n```\noutput_info_snackbar(message='Message text', color='teal',timeout=10000)\n```\n\n<img alt=\"Output Snackbar\" caption=\"Snackbar output example\" src=\"images/snackbar.png\">\n\n\n### Dialog Button\n\n```\noutput_dialog_button(label='My Button',icon=None)\n```\n\n<img alt=\"Dialog Button Example\" caption=\"Dialog Button Example\" src=\"images/dialog_button.png\">\n\n\n### Container\n\n```\noutput_container(children=[\n    input_button(color='red', label='Red'),\n    input_button(color='blue', label='Blue'),\n    input_button(color='green', label='Green')\n])\n```\n\n<img alt=\"Container Output Example\" caption=\"Container Output Example\" src=\"images/container.png\">\n\n\nCompare the `help` output for `ipyvuetify`'s container to the `help` output for `vvapp`'s container\n\n```\nhelp(output_container)\n```\n\n    Help on function output_container in module vvapp.outputs:\n\n    output_container(children=[], fluid=False, _class='icon ma-2', _style='', **args)\n        Creates a button and activates a dialog on click\n\n        Useful to display application documentation/help\n\n        Parameters\n        ----------\n        children : list\n            List of elements to display in container\n        fluid : bool (default False)\n            Removes viewport maximum-width size breakpoints\n        _class : str (optional, default 'icon ma-2')\n            CSS classes of button\n        _style: str\n            CSS style of button\n        **args\n            Other arguments will be passed on to ipyvuetify.Container\n\n\n\n```\nimport ipyvuetify\nhelp(ipyvuetify.Container)\n```\n\n    Help on class Container in module ipyvuetify.generated.Container:\n\n    class Container(ipyvuetify.generated.VuetifyWidget.VuetifyWidget)\n     |  Container(*args, **kwargs)\n     |  \n     |  Widget that can be inserted into the DOM\n     |  \n     |  Method resolution order:\n     |      Container\n     |      ipyvuetify.generated.VuetifyWidget.VuetifyWidget\n     |      ipyvue.VueWidget.VueWidget\n     |      ipywidgets.widgets.domwidget.DOMWidget\n     |      ipywidgets.widgets.widget.Widget\n     |      ipywidgets.widgets.widget.LoggingHasTraits\n     |      traitlets.traitlets.HasTraits\n     |      traitlets.traitlets.HasDescriptors\n     |      ipyvue.VueWidget.Events\n     |      builtins.object\n     |  \n     |  Data descriptors defined here:\n     |  \n     |  fluid\n     |      A boolean (True, False) trait.\n     |  \n     |  id\n     |      A trait for unicode strings.\n     |  \n     |  ma_0\n     |      A boolean (True, False) trait.\n     |  \n     |  ma_1\n     |      A boolean (True, False) trait.\n     |  \n     |  ma_2\n     |      A boolean (True, False) trait.\n     |  \n     |  ma_3\n     |      A boolean (True, False) trait.\n     |  \n     |  ma_4\n     |      A boolean (True, False) trait.\n     |  \n     |  ma_5\n     |      A boolean (True, False) trait.\n     |  \n     |  ma_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_0\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_1\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_2\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_3\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_4\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_5\n     |      A boolean (True, False) trait.\n     |  \n     |  mb_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_0\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_1\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_2\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_3\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_4\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_5\n     |      A boolean (True, False) trait.\n     |  \n     |  ml_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_0\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_1\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_2\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_3\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_4\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_5\n     |      A boolean (True, False) trait.\n     |  \n     |  mr_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_0\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_1\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_2\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_3\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_4\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_5\n     |      A boolean (True, False) trait.\n     |  \n     |  mt_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_0\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_1\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_2\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_3\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_4\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_5\n     |      A boolean (True, False) trait.\n     |  \n     |  mx_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  my_0\n     |      A boolean (True, False) trait.\n     |  \n     |  my_1\n     |      A boolean (True, False) trait.\n     |  \n     |  my_2\n     |      A boolean (True, False) trait.\n     |  \n     |  my_3\n     |      A boolean (True, False) trait.\n     |  \n     |  my_4\n     |      A boolean (True, False) trait.\n     |  \n     |  my_5\n     |      A boolean (True, False) trait.\n     |  \n     |  my_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_0\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_1\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_2\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_3\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_4\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_5\n     |      A boolean (True, False) trait.\n     |  \n     |  pa_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_0\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_1\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_2\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_3\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_4\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_5\n     |      A boolean (True, False) trait.\n     |  \n     |  pb_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_0\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_1\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_2\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_3\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_4\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_5\n     |      A boolean (True, False) trait.\n     |  \n     |  pl_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_0\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_1\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_2\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_3\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_4\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_5\n     |      A boolean (True, False) trait.\n     |  \n     |  pr_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_0\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_1\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_2\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_3\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_4\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_5\n     |      A boolean (True, False) trait.\n     |  \n     |  pt_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  px_0\n     |      A boolean (True, False) trait.\n     |  \n     |  px_1\n     |      A boolean (True, False) trait.\n     |  \n     |  px_2\n     |      A boolean (True, False) trait.\n     |  \n     |  px_3\n     |      A boolean (True, False) trait.\n     |  \n     |  px_4\n     |      A boolean (True, False) trait.\n     |  \n     |  px_5\n     |      A boolean (True, False) trait.\n     |  \n     |  px_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  py_0\n     |      A boolean (True, False) trait.\n     |  \n     |  py_1\n     |      A boolean (True, False) trait.\n     |  \n     |  py_2\n     |      A boolean (True, False) trait.\n     |  \n     |  py_3\n     |      A boolean (True, False) trait.\n     |  \n     |  py_4\n     |      A boolean (True, False) trait.\n     |  \n     |  py_5\n     |      A boolean (True, False) trait.\n     |  \n     |  py_auto\n     |      A boolean (True, False) trait.\n     |  \n     |  tag\n     |      A trait for unicode strings.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from ipyvue.VueWidget.VueWidget:\n     |  \n     |  attributes\n     |      An instance of a Python dict.\n     |      \n     |      One or more traits can be passed to the constructor\n     |      to validate the keys and/or values of the dict.\n     |      If you need more detailed validation,\n     |      you may use a custom validator method.\n     |      \n     |      .. versionchanged:: 5.0\n     |          Added key_trait for validating dict keys.\n     |      \n     |      .. versionchanged:: 5.0\n     |          Deprecated ambiguous ``trait``, ``traits`` args in favor of ``value_trait``, ``per_key_traits``.\n     |  \n     |  children\n     |      An instance of a Python list.\n     |  \n     |  class_\n     |      A trait for unicode strings.\n     |  \n     |  slot\n     |      A trait for unicode strings.\n     |  \n     |  style_\n     |      A trait for unicode strings.\n     |  \n     |  v_model\n     |      A trait which allows any value.\n     |  \n     |  v_on\n     |      A trait for unicode strings.\n     |  \n     |  v_slots\n     |      An instance of a Python list.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from ipywidgets.widgets.domwidget.DOMWidget:\n     |  \n     |  add_class(self, className)\n     |      Adds a class to the top level element of the widget.\n     |      \n     |      Doesn't add the class if it already exists.\n     |  \n     |  remove_class(self, className)\n     |      Removes a class from the top level element of the widget.\n     |      \n     |      Doesn't remove the class if it doesn't exist.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from ipywidgets.widgets.domwidget.DOMWidget:\n     |  \n     |  layout\n     |      An instance trait which coerces a dict to an instance.\n     |      \n     |      This lets the instance be specified as a dict, which is used\n     |      to initialize the instance.\n     |      \n     |      Also, we default to a trivial instance, even if args and kwargs\n     |      is not specified.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from ipywidgets.widgets.widget.Widget:\n     |  \n     |  __del__(self)\n     |      Object disposal\n     |  \n     |  __init__(self, **kwargs)\n     |      Public constructor\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  add_traits(self, **traits)\n     |      Dynamically add trait attributes to the Widget.\n     |  \n     |  close(self)\n     |      Close method.\n     |      \n     |      Closes the underlying comm.\n     |      When the comm is closed, all of the widget views are automatically\n     |      removed from the front-end.\n     |  \n     |  get_state(self, key=None, drop_defaults=False)\n     |      Gets the widget state, or a piece of it.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : unicode or iterable (optional)\n     |          A single property's name or iterable of property names to get.\n     |      \n     |      Returns\n     |      -------\n     |      state : dict of states\n     |      metadata : dict\n     |          metadata for each field: {key: metadata}\n     |  \n     |  get_view_spec(self)\n     |  \n     |  hold_sync(self)\n     |      Hold syncing any state until the outermost context manager exits\n     |  \n     |  notify_change(self, change)\n     |      Called when a property has changed.\n     |  \n     |  on_displayed(self, callback, remove=False)\n     |      (Un)Register a widget displayed callback.\n     |      \n     |      Parameters\n     |      ----------\n     |      callback: method handler\n     |          Must have a signature of::\n     |      \n     |              callback(widget, **kwargs)\n     |      \n     |          kwargs from display are passed through without modification.\n     |      remove: bool\n     |          True if the callback should be unregistered.\n     |  \n     |  on_msg(self, callback, remove=False)\n     |      (Un)Register a custom msg receive callback.\n     |      \n     |      Parameters\n     |      ----------\n     |      callback: callable\n     |          callback will be passed three arguments when a message arrives::\n     |      \n     |              callback(widget, content, buffers)\n     |      \n     |      remove: bool\n     |          True if the callback should be unregistered.\n     |  \n     |  open(self)\n     |      Open a comm to the frontend if one isn't already open.\n     |  \n     |  send(self, content, buffers=None)\n     |      Sends a custom msg to the widget model in the front-end.\n     |      \n     |      Parameters\n     |      ----------\n     |      content : dict\n     |          Content of the message to send.\n     |      buffers : list of binary buffers\n     |          Binary buffers to send with message\n     |  \n     |  send_state(self, key=None)\n     |      Sends the widget state, or a piece of it, to the front-end, if it exists.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : unicode, or iterable (optional)\n     |          A single property's name or iterable of property names to sync with the front-end.\n     |  \n     |  set_state(self, sync_data)\n     |      Called when a state is received from the front-end.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from ipywidgets.widgets.widget.Widget:\n     |  \n     |  close_all() from traitlets.traitlets.MetaHasTraits\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from ipywidgets.widgets.widget.Widget:\n     |  \n     |  get_manager_state(drop_defaults=False, widgets=None)\n     |      Returns the full state for a widget manager for embedding\n     |      \n     |      :param drop_defaults: when True, it will not include default value\n     |      :param widgets: list with widgets to include in the state (or all widgets when None)\n     |      :return:\n     |  \n     |  handle_comm_opened(comm, msg)\n     |      Static method, called when a widget is constructed.\n     |  \n     |  on_widget_constructed(callback)\n     |      Registers a callback to be called when a widget is constructed.\n     |      \n     |      The callback must have the following signature:\n     |      callback(widget)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from ipywidgets.widgets.widget.Widget:\n     |  \n     |  model_id\n     |      Gets the model id of this widget.\n     |      \n     |      If a Comm doesn't exist yet, a Comm will be created automagically.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from ipywidgets.widgets.widget.Widget:\n     |  \n     |  comm\n     |      A trait whose value must be an instance of a specified class.\n     |      \n     |      The value can also be an instance of a subclass of the specified class.\n     |      \n     |      Subclasses can declare default classes by overriding the klass attribute\n     |  \n     |  keys\n     |      An instance of a Python list.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from ipywidgets.widgets.widget.Widget:\n     |  \n     |  widget_types = <ipywidgets.widgets.widget.WidgetRegistry object>\n     |  \n     |  widgets = {'01d4a1e490bb4c17ab19061e2b028f6d': DescriptionStyle(), '04...\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from ipywidgets.widgets.widget.LoggingHasTraits:\n     |  \n     |  log\n     |      A trait whose value must be an instance of a specified class.\n     |      \n     |      The value can also be an instance of a subclass of the specified class.\n     |      \n     |      Subclasses can declare default classes by overriding the klass attribute\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from traitlets.traitlets.HasTraits:\n     |  \n     |  __getstate__(self)\n     |  \n     |  __setstate__(self, state)\n     |  \n     |  has_trait(self, name)\n     |      Returns True if the object has a trait with the specified name.\n     |  \n     |  hold_trait_notifications(self)\n     |      Context manager for bundling trait change notifications and cross\n     |      validation.\n     |      \n     |      Use this when doing multiple trait assignments (init, config), to avoid\n     |      race conditions in trait notifiers requesting other trait values.\n     |      All trait notifications will fire after all values have been assigned.\n     |  \n     |  observe(self, handler, names=traitlets.All, type='change')\n     |      Setup a handler to be called when a trait changes.\n     |      \n     |      This is used to setup dynamic notifications of trait changes.\n     |      \n     |      Parameters\n     |      ----------\n     |      handler : callable\n     |          A callable that is called when a trait changes. Its\n     |          signature should be ``handler(change)``, where ``change`` is a\n     |          dictionary. The change dictionary at least holds a 'type' key.\n     |          * ``type``: the type of notification.\n     |          Other keys may be passed depending on the value of 'type'. In the\n     |          case where type is 'change', we also have the following keys:\n     |          * ``owner`` : the HasTraits instance\n     |          * ``old`` : the old value of the modified trait attribute\n     |          * ``new`` : the new value of the modified trait attribute\n     |          * ``name`` : the name of the modified trait attribute.\n     |      names : list, str, All\n     |          If names is All, the handler will apply to all traits.  If a list\n     |          of str, handler will apply to all names in the list.  If a\n     |          str, the handler will apply just to that name.\n     |      type : str, All (default: 'change')\n     |          The type of notification to filter by. If equal to All, then all\n     |          notifications are passed to the observe handler.\n     |  \n     |  on_trait_change(self, handler=None, name=None, remove=False)\n     |      DEPRECATED: Setup a handler to be called when a trait changes.\n     |      \n     |      This is used to setup dynamic notifications of trait changes.\n     |      \n     |      Static handlers can be created by creating methods on a HasTraits\n     |      subclass with the naming convention '_[traitname]_changed'.  Thus,\n     |      to create static handler for the trait 'a', create the method\n     |      _a_changed(self, name, old, new) (fewer arguments can be used, see\n     |      below).\n     |      \n     |      If `remove` is True and `handler` is not specified, all change\n     |      handlers for the specified name are uninstalled.\n     |      \n     |      Parameters\n     |      ----------\n     |      handler : callable, None\n     |          A callable that is called when a trait changes.  Its\n     |          signature can be handler(), handler(name), handler(name, new),\n     |          handler(name, old, new), or handler(name, old, new, self).\n     |      name : list, str, None\n     |          If None, the handler will apply to all traits.  If a list\n     |          of str, handler will apply to all names in the list.  If a\n     |          str, the handler will apply just to that name.\n     |      remove : bool\n     |          If False (the default), then install the handler.  If True\n     |          then unintall it.\n     |  \n     |  set_trait(self, name, value)\n     |      Forcibly sets trait attribute, including read-only attributes.\n     |  \n     |  setup_instance(*args, **kwargs)\n     |      This is called **before** self.__init__ is called.\n     |  \n     |  trait_defaults(self, *names, **metadata)\n     |      Return a trait's default value or a dictionary of them\n     |      \n     |      Notes\n     |      -----\n     |      Dynamically generated default values may\n     |      depend on the current state of the object.\n     |  \n     |  trait_has_value(self, name)\n     |      Returns True if the specified trait has a value.\n     |      \n     |      This will return false even if ``getattr`` would return a\n     |      dynamically generated default value. These default values\n     |      will be recognized as existing only after they have been\n     |      generated.\n     |      \n     |      Example\n     |      \n     |      .. code-block:: python\n     |      \n     |          class MyClass(HasTraits):\n     |              i = Int()\n     |      \n     |          mc = MyClass()\n     |          assert not mc.trait_has_value(\"i\")\n     |          mc.i # generates a default value\n     |          assert mc.trait_has_value(\"i\")\n     |  \n     |  trait_metadata(self, traitname, key, default=None)\n     |      Get metadata values for trait by key.\n     |  \n     |  trait_names(self, **metadata)\n     |      Get a list of all the names of this class' traits.\n     |  \n     |  trait_values(self, **metadata)\n     |      A ``dict`` of trait names and their values.\n     |      \n     |      The metadata kwargs allow functions to be passed in which\n     |      filter traits based on metadata values.  The functions should\n     |      take a single value as an argument and return a boolean.  If\n     |      any function returns False, then the trait is not included in\n     |      the output.  If a metadata key doesn't exist, None will be passed\n     |      to the function.\n     |      \n     |      Returns\n     |      -------\n     |      A ``dict`` of trait names and their values.\n     |      \n     |      Notes\n     |      -----\n     |      Trait values are retrieved via ``getattr``, any exceptions raised\n     |      by traits or the operations they may trigger will result in the\n     |      absence of a trait value in the result ``dict``.\n     |  \n     |  traits(self, **metadata)\n     |      Get a ``dict`` of all the traits of this class.  The dictionary\n     |      is keyed on the name and the values are the TraitType objects.\n     |      \n     |      The TraitTypes returned don't know anything about the values\n     |      that the various HasTrait's instances are holding.\n     |      \n     |      The metadata kwargs allow functions to be passed in which\n     |      filter traits based on metadata values.  The functions should\n     |      take a single value as an argument and return a boolean.  If\n     |      any function returns False, then the trait is not included in\n     |      the output.  If a metadata key doesn't exist, None will be passed\n     |      to the function.\n     |  \n     |  unobserve(self, handler, names=traitlets.All, type='change')\n     |      Remove a trait change handler.\n     |      \n     |      This is used to unregister handlers to trait change notifications.\n     |      \n     |      Parameters\n     |      ----------\n     |      handler : callable\n     |          The callable called when a trait attribute changes.\n     |      names : list, str, All (default: All)\n     |          The names of the traits for which the specified handler should be\n     |          uninstalled. If names is All, the specified handler is uninstalled\n     |          from the list of notifiers corresponding to all changes.\n     |      type : str or All (default: 'change')\n     |          The type of notification to filter by. If All, the specified handler\n     |          is uninstalled from the list of notifiers corresponding to all types.\n     |  \n     |  unobserve_all(self, name=traitlets.All)\n     |      Remove trait change handlers of any type for the specified name.\n     |      If name is not specified, removes all trait notifiers.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Class methods inherited from traitlets.traitlets.HasTraits:\n     |  \n     |  class_own_trait_events(name) from traitlets.traitlets.MetaHasTraits\n     |      Get a dict of all event handlers defined on this class, not a parent.\n     |      \n     |      Works like ``event_handlers``, except for excluding traits from parents.\n     |  \n     |  class_own_traits(**metadata) from traitlets.traitlets.MetaHasTraits\n     |      Get a dict of all the traitlets defined on this class, not a parent.\n     |      \n     |      Works like `class_traits`, except for excluding traits from parents.\n     |  \n     |  class_trait_names(**metadata) from traitlets.traitlets.MetaHasTraits\n     |      Get a list of all the names of this class' traits.\n     |      \n     |      This method is just like the :meth:`trait_names` method,\n     |      but is unbound.\n     |  \n     |  class_traits(**metadata) from traitlets.traitlets.MetaHasTraits\n     |      Get a ``dict`` of all the traits of this class.  The dictionary\n     |      is keyed on the name and the values are the TraitType objects.\n     |      \n     |      This method is just like the :meth:`traits` method, but is unbound.\n     |      \n     |      The TraitTypes returned don't know anything about the values\n     |      that the various HasTrait's instances are holding.\n     |      \n     |      The metadata kwargs allow functions to be passed in which\n     |      filter traits based on metadata values.  The functions should\n     |      take a single value as an argument and return a boolean.  If\n     |      any function returns False, then the trait is not included in\n     |      the output.  If a metadata key doesn't exist, None will be passed\n     |      to the function.\n     |  \n     |  trait_events(name=None) from traitlets.traitlets.MetaHasTraits\n     |      Get a ``dict`` of all the event handlers of this class.\n     |      \n     |      Parameters\n     |      ----------\n     |      name : str (default: None)\n     |          The name of a trait of this class. If name is ``None`` then all\n     |          the event handlers of this class will be returned instead.\n     |      \n     |      Returns\n     |      -------\n     |      The event handlers associated with a trait name, or all event handlers.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from traitlets.traitlets.HasTraits:\n     |  \n     |  cross_validation_lock\n     |      A contextmanager for running a block with our cross validation lock set\n     |      to True.\n     |      \n     |      At the end of the block, the lock's value is restored to its value\n     |      prior to entering the block.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from traitlets.traitlets.HasDescriptors:\n     |  \n     |  __new__(*args, **kwargs)\n     |      Create and return a new object.  See help(type) for accurate signature.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from traitlets.traitlets.HasDescriptors:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from ipyvue.VueWidget.Events:\n     |  \n     |  fire_event(self, event, data)\n     |  \n     |  on_event(self, event_and_modifiers, callback, remove=False)\n\n\n\n### Row\n\n```\noutput_container(children=[\n    output_row(children=[input_button(color='red', label='Red')]),\n    output_row(children=[input_button(color='blue', label='Blue')]),\n    output_row(children=[input_button(color='green', label='Green')])\n])\n```\n\n<img alt=\"Row Output Example\" caption=\"Row Output Example\" src=\"images/row.png\">\n\n\n### Column\n\n```\noutput_row(children=[\n    output_column(order=1, cols=4, children=[input_button(color='red', label='Red')]),\n    output_column(order=0, cols=4, children=[input_button(color='blue', label='Blue')]),\n    output_column(order=2, cols=4, children=[input_button(color='green', label='Green')])\n])\n```\n\n<img alt=\"Column Example\" caption=\"Column Example\" src=\"images/column.png\">\n\n## App Template\n\nThe app template provides a menubar, a collapsable configuration panel and a progress spinner that spins while the outputs are being computed.\n\nTo Use The App Template, you must define the title of the app  (`app_title`), input configuration (`inputs`), and outputs (`outputs`).\n\n* `app_title` - a string formatted title for the app, to be displayed in the menu bar\n* `inputs` - a list of input widgets\n* `outputs` - a list of *functions*, with a single input - the list of inputs\n\nThe outputs are functions, because they will be evaluated and re-evaluated when the submit button in the configuration panel is pressed.\n\n```\nfrom vvapp.app_templates import App\nimport time\nimport ipyvuetify as v\n\ndef first_output(inputs):\n    time.sleep(2)\n    return v.Btn(children=[\"Input Text: \"+inputs[0].v_model])\n\ndef second_output(inputs):\n    time.sleep(2)\n    return v.Btn(children=[\"Input Number: \"+str(inputs[1].v_model)])\n\noutputs = {'Tab1': first_output, 'Tab2': second_output}\n\napp_title = \"My Title\"\n\ninputs = [\n    input_text(placeholder='Enter text here', label='Text Input', v_model='Some Text 1234!'),\n    input_number(v_model=100, label='A Numeric Input')\n]\n\nApp(inputs=inputs, outputs=outputs, app_title=app_title).show()\n```\n\n<img alt=\"App Example\" caption=\"App Example\" src=\"images/app.png\">\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/radinplaid/vvapp/tree/master/",
    "keywords": "python,jupyter,voila",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vvapp",
    "package_url": "https://pypi.org/project/vvapp/",
    "platform": "",
    "project_url": "https://pypi.org/project/vvapp/",
    "project_urls": {
      "Homepage": "https://github.com/radinplaid/vvapp/tree/master/"
    },
    "release_url": "https://pypi.org/project/vvapp/0.0.15/",
    "requires_dist": [
      "ipyvuetify",
      "traitlets",
      "pandas",
      "numpy",
      "markdown",
      "ipywidgets",
      "nbdev"
    ],
    "requires_python": ">=3.6",
    "summary": "A python library simplifying development of ipyvuetify voila apps",
    "version": "0.0.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9134031,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "705254ab548d31b34e7cbb1b111ee43d24adb3a64647344cd7eb6c69cb5c4854",
          "md5": "150d3374b31bb29ed7682bd0a8df3323",
          "sha256": "7cb08a297b025030e07956902bc17242bbb6284646f91dd73fe0811afa6cef63"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "150d3374b31bb29ed7682bd0a8df3323",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8042,
        "upload_time": "2020-06-08T18:45:18",
        "upload_time_iso_8601": "2020-06-08T18:45:18.882001Z",
        "url": "https://files.pythonhosted.org/packages/70/52/54ab548d31b34e7cbb1b111ee43d24adb3a64647344cd7eb6c69cb5c4854/vvapp-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "385c204f241d0388db788ac58169e7823584bebd12e4e0d4323fff54fb53c095",
          "md5": "32f4f5ad1d6d419fd3f805f6f5956ce4",
          "sha256": "90b3f27c7237b2c2e91b193e821d7ea5034d052fb900861538b30d5ec4ff6a2e"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32f4f5ad1d6d419fd3f805f6f5956ce4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10227,
        "upload_time": "2020-06-08T18:45:21",
        "upload_time_iso_8601": "2020-06-08T18:45:21.744394Z",
        "url": "https://files.pythonhosted.org/packages/38/5c/204f241d0388db788ac58169e7823584bebd12e4e0d4323fff54fb53c095/vvapp-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61f028d2d429f8171c25c4a247e41186a9f55e052de0b80611ee8f6bfa1693c8",
          "md5": "30b6f79cfd281ae42745639aaa19245a",
          "sha256": "6dd53f222852674cfd5dc24c26f903b1282fa3d584e815df88bf73cdd62ef7e7"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30b6f79cfd281ae42745639aaa19245a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13413,
        "upload_time": "2020-06-15T19:28:29",
        "upload_time_iso_8601": "2020-06-15T19:28:29.842084Z",
        "url": "https://files.pythonhosted.org/packages/61/f0/28d2d429f8171c25c4a247e41186a9f55e052de0b80611ee8f6bfa1693c8/vvapp-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5913b1ddd1ae299a33d14a96337186e23d4a786ce09211ee00fcaad1bd8870f4",
          "md5": "4b784c51febb27215bff71aeb84ae60b",
          "sha256": "c1d3ec217f5fbbb996e043b3bf475fdd1fe1106cf6e45f18cb47550742bf7d5b"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "4b784c51febb27215bff71aeb84ae60b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17355,
        "upload_time": "2020-06-15T19:28:31",
        "upload_time_iso_8601": "2020-06-15T19:28:31.523152Z",
        "url": "https://files.pythonhosted.org/packages/59/13/b1ddd1ae299a33d14a96337186e23d4a786ce09211ee00fcaad1bd8870f4/vvapp-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62bbfcc2ca4ed6207c732df19a9f5f116366cd4e014ae2bc404ccadef64f1af0",
          "md5": "a16c15539e3550818ced40c03dafed10",
          "sha256": "edd08e24485f87cf0a24c1b5794009f7a97ab59914f9c23e08f5fe761523461b"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a16c15539e3550818ced40c03dafed10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15421,
        "upload_time": "2020-06-16T17:53:42",
        "upload_time_iso_8601": "2020-06-16T17:53:42.188327Z",
        "url": "https://files.pythonhosted.org/packages/62/bb/fcc2ca4ed6207c732df19a9f5f116366cd4e014ae2bc404ccadef64f1af0/vvapp-0.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc33f2d46ea36a3ad101f8981219515e893a70fe8579f45a6f742e863bb55c29",
          "md5": "f2cb54dbf843d13da57750d175ded915",
          "sha256": "00383a5be1d9b9b6394d40a4f574dba5cf3ef0d04244e8594d52f809be1539aa"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "f2cb54dbf843d13da57750d175ded915",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19890,
        "upload_time": "2020-06-16T17:53:43",
        "upload_time_iso_8601": "2020-06-16T17:53:43.368079Z",
        "url": "https://files.pythonhosted.org/packages/cc/33/f2d46ea36a3ad101f8981219515e893a70fe8579f45a6f742e863bb55c29/vvapp-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bac0cb35ac3e5756a12a4199e315cb541a0903381bad759917d143fe4f9e43ff",
          "md5": "c18968026d919651f3268e292601dcc8",
          "sha256": "8346cdd386ec63a093b5eb0bfb560cf2ace2b1dca1e034ee6f8debead192b572"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c18968026d919651f3268e292601dcc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15745,
        "upload_time": "2020-06-16T19:31:22",
        "upload_time_iso_8601": "2020-06-16T19:31:22.553729Z",
        "url": "https://files.pythonhosted.org/packages/ba/c0/cb35ac3e5756a12a4199e315cb541a0903381bad759917d143fe4f9e43ff/vvapp-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e7d96a83b0a356e3b1fd721e279698bdedd8b1463ba8091bc0e1782a031d4e5",
          "md5": "20e7d0896f4778dcdc1c405449bd8da2",
          "sha256": "11b12cdddd9cf8e9cd2c76222c8db16f85146206919234563336623a46bc7af2"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "20e7d0896f4778dcdc1c405449bd8da2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20356,
        "upload_time": "2020-06-16T19:31:25",
        "upload_time_iso_8601": "2020-06-16T19:31:25.071001Z",
        "url": "https://files.pythonhosted.org/packages/9e/7d/96a83b0a356e3b1fd721e279698bdedd8b1463ba8091bc0e1782a031d4e5/vvapp-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4392fa3006950d345b53954851d3e655775f874b81f9bdc090e41fe1ca9c925d",
          "md5": "dda492a431c5ee81dab84a1331c76ddb",
          "sha256": "f55abcc0b7449ae2dbb0c68ee10629e2c7eda344f0afe6edb75c8081a0fbcabc"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dda492a431c5ee81dab84a1331c76ddb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17827,
        "upload_time": "2020-06-22T19:25:38",
        "upload_time_iso_8601": "2020-06-22T19:25:38.126813Z",
        "url": "https://files.pythonhosted.org/packages/43/92/fa3006950d345b53954851d3e655775f874b81f9bdc090e41fe1ca9c925d/vvapp-0.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f8bb07f4ea278d4213d31bdcdd345260fab528ea7b20d664cde2dee8477fb78",
          "md5": "d37654e2e988b06b281d8f7fb5baa893",
          "sha256": "b74792e16590efe4f5135769309bef982f615fdd3f78451961c9e87169858605"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "d37654e2e988b06b281d8f7fb5baa893",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22537,
        "upload_time": "2020-06-22T19:25:39",
        "upload_time_iso_8601": "2020-06-22T19:25:39.497129Z",
        "url": "https://files.pythonhosted.org/packages/5f/8b/b07f4ea278d4213d31bdcdd345260fab528ea7b20d664cde2dee8477fb78/vvapp-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27bcae6843a4dd47f2548e5b282c6a4210ec221620f3b20771e5a3d8b249c581",
          "md5": "70d02c571f51eef705963c23d20d77f5",
          "sha256": "fdbb67d1886e5b0fb983f40c4a0f126623f4a67d14f0f33dfb3d449837f742bc"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70d02c571f51eef705963c23d20d77f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18103,
        "upload_time": "2020-12-14T15:08:15",
        "upload_time_iso_8601": "2020-12-14T15:08:15.783803Z",
        "url": "https://files.pythonhosted.org/packages/27/bc/ae6843a4dd47f2548e5b282c6a4210ec221620f3b20771e5a3d8b249c581/vvapp-0.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd8f81b42faeb040c3e9e6bf97d2ca354db3f28601870c2f36e6bf84ff2f1f19",
          "md5": "914c1d5482a12d29378b1bac024eee20",
          "sha256": "398550f9ff38fab69f7765b90795dd89004bcd8ece868324d1c2bb8dc051ef39"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "914c1d5482a12d29378b1bac024eee20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22587,
        "upload_time": "2020-12-14T15:08:17",
        "upload_time_iso_8601": "2020-12-14T15:08:17.432106Z",
        "url": "https://files.pythonhosted.org/packages/cd/8f/81b42faeb040c3e9e6bf97d2ca354db3f28601870c2f36e6bf84ff2f1f19/vvapp-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc45b221f11ff7decbd24afd9cc6192c440c0ee0dc6a4d0e9f53ad74da786f8",
          "md5": "8580e6fab4a3be963fab9951e898c360",
          "sha256": "b22916c45048b452a6132907c2834e857e999662eb5ae61bac45fe2c8440f0c0"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8580e6fab4a3be963fab9951e898c360",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24689,
        "upload_time": "2021-01-14T16:41:24",
        "upload_time_iso_8601": "2021-01-14T16:41:24.393586Z",
        "url": "https://files.pythonhosted.org/packages/0c/c4/5b221f11ff7decbd24afd9cc6192c440c0ee0dc6a4d0e9f53ad74da786f8/vvapp-0.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef84dc905591bd2c6e8761caac862af8ff0c7e9057735fc7835f168bb8e416b1",
          "md5": "9924f1b86ba16d855875dc00a822f404",
          "sha256": "14b26248c51cecfcf400ef4285210773738a9cf6f1f48affe2909df960304f8b"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "9924f1b86ba16d855875dc00a822f404",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 42156,
        "upload_time": "2021-01-14T16:41:25",
        "upload_time_iso_8601": "2021-01-14T16:41:25.988498Z",
        "url": "https://files.pythonhosted.org/packages/ef/84/dc905591bd2c6e8761caac862af8ff0c7e9057735fc7835f168bb8e416b1/vvapp-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e918cc0404bdfcced02d81306dfbc4a3974966fd3bc0c5846dab9d4283557ff",
          "md5": "4bf6bc7ec04a31c263617bfd9a98d3dd",
          "sha256": "47cf2645c66cf8e1030c3541a03a467df61fe9524f06c4230dbb3d25807bc9cd"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bf6bc7ec04a31c263617bfd9a98d3dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8419,
        "upload_time": "2020-06-08T19:48:34",
        "upload_time_iso_8601": "2020-06-08T19:48:34.083141Z",
        "url": "https://files.pythonhosted.org/packages/5e/91/8cc0404bdfcced02d81306dfbc4a3974966fd3bc0c5846dab9d4283557ff/vvapp-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5f6467599ead5fd95072b3c85d939da0beb9832f5d24df88076f314f940789e",
          "md5": "d548978bf19c98391d8e63158f2bb703",
          "sha256": "45a33e4d8d45e008d9edbe4bcc891ca07b838c2f491bec1ca249c4c9d9b51cdb"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d548978bf19c98391d8e63158f2bb703",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10441,
        "upload_time": "2020-06-08T19:48:35",
        "upload_time_iso_8601": "2020-06-08T19:48:35.671361Z",
        "url": "https://files.pythonhosted.org/packages/e5/f6/467599ead5fd95072b3c85d939da0beb9832f5d24df88076f314f940789e/vvapp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1b7dca9f3b71167c01771e261198dbee7a76c07e15034652de504424cef9afe",
          "md5": "2ef821ea4f2db91b67ec9b96e6cd163c",
          "sha256": "deb227b138afbdeb6b7dcbc3804e431836d24c64c6c50ec474caa25f3f6110c9"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ef821ea4f2db91b67ec9b96e6cd163c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8420,
        "upload_time": "2020-06-08T19:51:21",
        "upload_time_iso_8601": "2020-06-08T19:51:21.280065Z",
        "url": "https://files.pythonhosted.org/packages/d1/b7/dca9f3b71167c01771e261198dbee7a76c07e15034652de504424cef9afe/vvapp-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4dc27257dcf00e01b2ddd6e13e021557ff60d783dbcedb3d8038a196ba07cfc",
          "md5": "835ff581ca25b0a72d0283038897c628",
          "sha256": "8accf87d19fb48684a27b329d3d13c1897bd1a9f2aa37912a07fdb6544a34514"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "835ff581ca25b0a72d0283038897c628",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9193,
        "upload_time": "2020-06-09T11:37:06",
        "upload_time_iso_8601": "2020-06-09T11:37:06.751106Z",
        "url": "https://files.pythonhosted.org/packages/f4/dc/27257dcf00e01b2ddd6e13e021557ff60d783dbcedb3d8038a196ba07cfc/vvapp-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "301207dd876ac0b3e8f4515f939dfa24e2af8f5ff29250a1eeeef53b9c354ab5",
          "md5": "5c49964291704fc7a83d3e6ea190de60",
          "sha256": "8286273ababcc72aa70b4ffb23498c4381249bde1db74f38f7e8419434772581"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5c49964291704fc7a83d3e6ea190de60",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11957,
        "upload_time": "2020-06-09T11:37:07",
        "upload_time_iso_8601": "2020-06-09T11:37:07.922784Z",
        "url": "https://files.pythonhosted.org/packages/30/12/07dd876ac0b3e8f4515f939dfa24e2af8f5ff29250a1eeeef53b9c354ab5/vvapp-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20e897fb61a94cf28acce395d6dccc4b40e5ba4487d554a11094170aab9ce93c",
          "md5": "8b2f1e1f9b5510a337ab55e30ae41530",
          "sha256": "2573f0b552f314ad399c65df707dc00581127c2201af73a5801a8d1606d04b41"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b2f1e1f9b5510a337ab55e30ae41530",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10675,
        "upload_time": "2020-06-09T15:41:54",
        "upload_time_iso_8601": "2020-06-09T15:41:54.472262Z",
        "url": "https://files.pythonhosted.org/packages/20/e8/97fb61a94cf28acce395d6dccc4b40e5ba4487d554a11094170aab9ce93c/vvapp-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a41323995c931ad12d3f814f44e64a32c687077e3e77362ea8d1f630d2f885bb",
          "md5": "bcad51a036914e0f8094fe2dd04fe198",
          "sha256": "3e9bfa86e80014536ad96de955fbdb93374db1984f06ce4ff808f4348da62347"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bcad51a036914e0f8094fe2dd04fe198",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13464,
        "upload_time": "2020-06-09T15:41:55",
        "upload_time_iso_8601": "2020-06-09T15:41:55.814088Z",
        "url": "https://files.pythonhosted.org/packages/a4/13/23995c931ad12d3f814f44e64a32c687077e3e77362ea8d1f630d2f885bb/vvapp-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d348da9e970330ff8110470a98bf355611725039f69ad0b151554bcc74521034",
          "md5": "3995293bb3ff228130e69dffe60bde86",
          "sha256": "6d6c28135ffbb42ff3a6752f01116827f9a9ab1edacc7f6e6ce694e0cd46b334"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3995293bb3ff228130e69dffe60bde86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11298,
        "upload_time": "2020-06-15T15:00:00",
        "upload_time_iso_8601": "2020-06-15T15:00:00.256214Z",
        "url": "https://files.pythonhosted.org/packages/d3/48/da9e970330ff8110470a98bf355611725039f69ad0b151554bcc74521034/vvapp-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7bb5a1b04a544667deb70842aeea5340a1cc2f80a98a3728eb776f0cb65abff",
          "md5": "f8fbaab901eac3c82bad6f590a2a373a",
          "sha256": "44ca7a2d69b557affa0248d56165071ed8de738662ca79afe89a13f0f073b6b6"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f8fbaab901eac3c82bad6f590a2a373a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14365,
        "upload_time": "2020-06-15T15:00:01",
        "upload_time_iso_8601": "2020-06-15T15:00:01.750967Z",
        "url": "https://files.pythonhosted.org/packages/c7/bb/5a1b04a544667deb70842aeea5340a1cc2f80a98a3728eb776f0cb65abff/vvapp-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fafe2aee76fd96ed7c448cb5c1c13ef5835ddab99b3eccd761c9f9c4aad4d67",
          "md5": "5d3c5f8ee96e239fa535a7925ab6c329",
          "sha256": "e9f0b6faa1ec96218829e68743b0221036159f3f61a203f78269b0ad86484605"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d3c5f8ee96e239fa535a7925ab6c329",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11802,
        "upload_time": "2020-06-15T15:50:37",
        "upload_time_iso_8601": "2020-06-15T15:50:37.530294Z",
        "url": "https://files.pythonhosted.org/packages/3f/af/e2aee76fd96ed7c448cb5c1c13ef5835ddab99b3eccd761c9f9c4aad4d67/vvapp-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fafbb6cb65287eb812b6f14aa3daafb03f2c5b4a292871240241489c10d3701",
          "md5": "2ad309c1d7a6e97d82e240b77d16d834",
          "sha256": "e723d315b7e4e2bcbaffc043130715400fc4e6661eb0220ba3308556d46c3068"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2ad309c1d7a6e97d82e240b77d16d834",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14967,
        "upload_time": "2020-06-15T15:50:39",
        "upload_time_iso_8601": "2020-06-15T15:50:39.045523Z",
        "url": "https://files.pythonhosted.org/packages/2f/af/bb6cb65287eb812b6f14aa3daafb03f2c5b4a292871240241489c10d3701/vvapp-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca31d4527aa88320c7b6db6aedbc220636e3f3dd29f64750e4221e28ef1c94ff",
          "md5": "f9495795d2cf8875dbad97f0dad461cf",
          "sha256": "9d21fd1d51ee0a39ef31cfabc423ba7a978df2a3d4267f8759099de3d566e246"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9495795d2cf8875dbad97f0dad461cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12386,
        "upload_time": "2020-06-15T18:12:11",
        "upload_time_iso_8601": "2020-06-15T18:12:11.812970Z",
        "url": "https://files.pythonhosted.org/packages/ca/31/d4527aa88320c7b6db6aedbc220636e3f3dd29f64750e4221e28ef1c94ff/vvapp-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c80f9738ced283a70579b47cde6d4af9c9e3580f39f9b5696c038bf5a9c07c4",
          "md5": "f85b8206c3ceb437d6b09a87cb5399fb",
          "sha256": "655240f1ab9893f15e04fa2cd7b3fb7f6c6c8fe0e8eedc39012959f6c9bdd769"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "f85b8206c3ceb437d6b09a87cb5399fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15816,
        "upload_time": "2020-06-15T18:12:13",
        "upload_time_iso_8601": "2020-06-15T18:12:13.186226Z",
        "url": "https://files.pythonhosted.org/packages/3c/80/f9738ced283a70579b47cde6d4af9c9e3580f39f9b5696c038bf5a9c07c4/vvapp-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22ff27750aaed184318c7e0763505be7d6b9d83f4061e9233a19417fa719a08d",
          "md5": "c74a6e68a52b51a5e7bd7eb2557c1e8c",
          "sha256": "c7e7768416da6a2302288285075243e8927e832b9c648af77bf225c880046cf9"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c74a6e68a52b51a5e7bd7eb2557c1e8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13250,
        "upload_time": "2020-06-15T19:17:43",
        "upload_time_iso_8601": "2020-06-15T19:17:43.156548Z",
        "url": "https://files.pythonhosted.org/packages/22/ff/27750aaed184318c7e0763505be7d6b9d83f4061e9233a19417fa719a08d/vvapp-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dde990f1cf36c30f54a1393ed7a53ce0fd6d7266211c9cbf5efdd54a9bd709d6",
          "md5": "4f4b8bd8be70668ca78249a82e552279",
          "sha256": "1318cc747a351937e6a1807ff30871be25868fe42e217cf85b0c8a392b9b4518"
        },
        "downloads": -1,
        "filename": "vvapp-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "4f4b8bd8be70668ca78249a82e552279",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17139,
        "upload_time": "2020-06-15T19:17:44",
        "upload_time_iso_8601": "2020-06-15T19:17:44.517342Z",
        "url": "https://files.pythonhosted.org/packages/dd/e9/90f1cf36c30f54a1393ed7a53ce0fd6d7266211c9cbf5efdd54a9bd709d6/vvapp-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cc45b221f11ff7decbd24afd9cc6192c440c0ee0dc6a4d0e9f53ad74da786f8",
        "md5": "8580e6fab4a3be963fab9951e898c360",
        "sha256": "b22916c45048b452a6132907c2834e857e999662eb5ae61bac45fe2c8440f0c0"
      },
      "downloads": -1,
      "filename": "vvapp-0.0.15-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8580e6fab4a3be963fab9951e898c360",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24689,
      "upload_time": "2021-01-14T16:41:24",
      "upload_time_iso_8601": "2021-01-14T16:41:24.393586Z",
      "url": "https://files.pythonhosted.org/packages/0c/c4/5b221f11ff7decbd24afd9cc6192c440c0ee0dc6a4d0e9f53ad74da786f8/vvapp-0.0.15-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef84dc905591bd2c6e8761caac862af8ff0c7e9057735fc7835f168bb8e416b1",
        "md5": "9924f1b86ba16d855875dc00a822f404",
        "sha256": "14b26248c51cecfcf400ef4285210773738a9cf6f1f48affe2909df960304f8b"
      },
      "downloads": -1,
      "filename": "vvapp-0.0.15.tar.gz",
      "has_sig": false,
      "md5_digest": "9924f1b86ba16d855875dc00a822f404",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 42156,
      "upload_time": "2021-01-14T16:41:25",
      "upload_time_iso_8601": "2021-01-14T16:41:25.988498Z",
      "url": "https://files.pythonhosted.org/packages/ef/84/dc905591bd2c6e8761caac862af8ff0c7e9057735fc7835f168bb8e416b1/vvapp-0.0.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}