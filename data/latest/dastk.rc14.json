{
  "info": {
    "author": "Ignacio Tripodi",
    "author_email": "ignacio.tripodi@colorado.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "DAStk\n=====\n\nThe Differential\n`ATAC-seq <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4374986/>`__\nToolkit (DAStk) is a set of command-line tools to aid analyzing\ndifferential ATAC-seq data. By leveraging changes in accessible\nchromatin, we can detect significant changes in transcription factor\n(TF) activity. This is a simple but powerful tool for cellular\nperturbation analysis. In fact, the applications of DAStk are not\nnecessarily limited to ATAC-seq, but can extend to comparing any pair of\nbedGraphs containing regions of interest, e.g. transcription regulatory\nelements (TRE) from nascent transcription assays like PRO-seq, or others\nlike ChIP-seq peaks.\n\nYou will need the following inputs:\n\n-  A pair of files listing peaks of ATAC-seq signal in two biological\n   conditions (e.g. DMSO and drug-treated) in any BedGraph-compatible\n   format (tab-delimited)\n-  A set of files listing the putative binding sites across the\n   reference genome of choice, one file per transcription factor motif,\n   also in any BedGraph-like format. These are normally generated from\n   position weight matrices (PWMs) available at TF model databases like\n   `HOCOMOCO <http://hocomoco11.autosome.ru>`__. These files are\n   expected to have a ``.bed``, ``.BedGraph`` or ``.txt`` extension.\n\n**IMPORTANT: All files mentioned above (ATAC-seq peaks and computed\nmotif sites) MUST be sorted by the same criteria. Different\nbioinformatics tools use different lexical sorting criteria (e.g. chr10\nafter chr1, or chr2 after chr1) so please ensure the sorting criteria is\nuniform.**\n\nInstall\n~~~~~~~\n\nYou can install DAStk using ``pip``:\n\n::\n\n   $ pip install DAStk\n\n… or:\n\n::\n\n   $ pip install --upgrade DAStk \n\nThis is the simplest option, and it will also create the executable\ncommands ``process_atac`` and ``differential_md_score``. Alternatively,\nyou can clone this repository by running:\n\n::\n\n   $ git clone https://github.com/Dowell-Lab/DAStk.git\n\nRequired Python libraries (automatically taken care of if installed thru ``pip``):\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  numpy\n-  argparse\n-  matplotlib\n-  scipy\n-  adjustText\n-  pandas\n-  multiprocessing\n-  pybedtools\n-  futures\n-  scikit-learn\n-  itertools\n-  networkx\n-  upsetplot\n\nThese scripts feature comprehensive help when called with the ``--help``\nargument. Every argument provides a short and long form (i.e. ``-t`` or\n``--threads``). There are normally two steps in a typical workflow:\n\n1. Process the ATAC-seq peak files (process_atac) to calculate the\n   `MD-score\n   statistic <https://genome.cshlp.org/content/28/3/334.short>`__ for\n   each motif provided.\n2. Detect the most statistically significant changes in MD-score\n   (differential_md_score) between both biological conditions (taking\n   into the account the peaks involved), and generate MA and barcode\n   plots.\n\nTL;DR;\n~~~~~~\n\nProcess each ATAC-seq peak bedGraph file, the genome abbreviations are\n“hg38”, “mm10”, etc:\n\n::\n\n   $ process_atac -e PEAKS_FILENAME_1 -m MOTIF_SITES_DIRECTORY -g GENOME_ABBREVIATION -o OUTPUT_DIRECTORY\n   $ process_atac -e PEAKS_FILENAME_2 -m MOTIF_SITES_DIRECTORY -g GENOME_ABBREVIATION -o OUTPUT_DIRECTORY\n\nPerform differential analysis on the calculated motif displacement\nscores, highlighting the significant motifs at your p-value threshold of\nchoice:\n\n::\n\n   $ differential_md_score -1 MD_OUTPUT_FOR_FILENAME_1 -2 MD_OUTPUT_FOR_FILENAME_2 -p 0.0000001 -m \"DMSO\" -n \"Drug treatment\" -b -o OUTPUT_DIRECTORY\n\nPerform downstream analysis to discover what is common among those\nsignificant TFs:\n\n::\n\n   $ tf_result_explanations -p 0.0000001 -d DIFFERENTIAL_MD_SCORE_OUTPUT_FILENAME -o EXPLANATION_FILENAME\n\nQuestions?\n\n::\n\n   $ process_atac --help\n   $ differential_md_score --help\n\nData Processing and Plotting\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are three plotting functions to assess the results from\n``process_atac`` and ``differential_md_score``:\n\n-  ma_plot\n-  barcode_plot\n-  tf_intersect\n\nThe first two allow you to generate custom MA and Barcode plots using\nthe stats file produced using the differential_md_score module. While\nthe MA and Barcode plots will be generated by default when running the\ndifferential_md_score module, it may be useful to adjust the labels,\nadjust the p-value threshold, compare motifs with non-significant\np-values etc. The default plots will generate labels based on your file\nbasenames (everything before the \\_md_score.txt extension if you kept\nthe default file names from ``process_atac``). However, to keep plots\nscaled appropriately, this label is limited to 19 characters. If it is\nlonger, it will be truncated.\n\nThe third plotting module, ``tf_intersect`` can be used to generate a\nvenn diagram (3 or fewer conditions) or an upset plot using multiple\nresult files as inputs to compare common motifs between conditions. For\nexample, using the -e/–enriched argument and by providing multiple\n\\*_md_score.txt files files from ``process_atac``, all motifs with an MD\nscore >0.2 will be intersected. Additionally, if more than three input\nstats files are specified, three catplots will be generated alongside\nthe upset plot by taking the mean value of all of the stats files for\ntotal genome-wide motif hits, motif hits within 3kb of the region file,\nand the MD score.\n\n**IMPORTANT** Either raw MD score outputs from ``process_atac`` or\ndifferential MD scores from ``differential_md_score`` may be used,\nhowever it is not recommended to mix file input types. There are also\nsome plotting functions unique to each (e.g. intersecting significant\nmotifs is only relevant to the ``differential_md_score`` outputs.\nFurthermore, -e/–enriched and -d/–depleted have different relative\nvalues between the two output types. Using the ``process_atac`` results,\nthe raw MD score will be used and defaults are relative to a background\nsingal of 0.1. Using the ``differential_md_score`` stats output, the\nenriched/depleted is based on the *differential* MD score (i.e. the\ndifference in MD scores between the two conditions) and therefore the\nthresholds are specified by a different argument.\n\nA stats file of the intersection data will also be generated in the\nformat needed to generate the upset plot (see\nhttps://pypi.org/project/pyupset/0.1.1.post4/). There is a limit of 12\ninput files for plotting. However, if more than 12 files are specified,\na stats file output will still be generated specifying motif\nintersections.\n\nThe following will provide a full list of arguments and usage\ninstructions instructions for each of these plotting tools:\n\n::\n\n   $ ma_plot --help\n   $ barcode_plot --help\n   $ tf_intersect --help\n\nWhile these plots will be generated by default when running the\ndifferential_md_score module, it may be useful to adjust the labels,\nadjust the p-value threshold, compare motifs with non-significant\np-values etc. The default plots will generate labels based on your file\nbasenames (everything before the \\_md_score.txt extension if you kept\nthe default file names from process_atac). However, to keep plots scaled\nappropriately, this label is limited to 19 characters. If it is longer,\nit will be truncated.\n\nInquiring about TF-TF relations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn release v1.0.0 a new functionality has been included, if using assays\non human tissue and the TF motifs from HOCOMOCO:\n\n::\n\n   $ tf_result_explanations --help\n\nThis build now includes a graph that combines all human proteins in\n`Uniprot <https://www.uniprot.org/>`__, with their respective\nannotations, and all human `Reactome <https://reactome.org/>`__ data on\nbiological pathways, biochemical reactions, and complex formation. This\nallows the user to query for existing knowledge about what aspects of\nthe significantly changing TFs are shared among two or more of them.\nThey may participate in the same pathway or biological process, be\nmembers of the same complex, have shared cofactors, directly interact\nwith each other, etc.\n\nYou can optionally provide a list of “uninteresting” intersections by\nlisting the ontology concept URIs in a file (see `our\nexample <./DAStk/uninteresting_relations.txt>`__ list, for things in\ncommon between TFs that are too obvious), so that they are omitted from\nthe output. You can also specify additional entities to include in the\nsearch, besides the TFs showing a change of activity beyond the provided\ncutoff, also in a different file listing ontology URIs. The `list of\nlabels for each concept\nused <./DAStk/public_knowledge/all_labels.tsv>`__ shows the possible\nURIs that could be included as an additional search endpoint. For\nexample, if we end up with 5 different TFs that are significantly\nchanging between conditions and we also want to search how they all\nrelate to zinc, we can provide a file with the URI\n`<http://purl.obolibrary.org/obo/CHEBI_29105> <http://purl.obolibrary.org/obo/CHEBI_29105>`__.\nThis tool produces a report that looks like the excerpt below:\n\n::\n\n   Transcription factors displaying a significant difference in activity:\n   CEBPB, CEBPD, CEBPE, ELK1, HLF, NFIA, NFIB, NFIX, NFYB, NRF1, TP53, ZNF180, ZNF341, ZNF396, ZNF432, ZNF441, ZNF519, ZNF529, ZNF540, ZNF93\n\n   Here's what we know about these TFs presenting significant activity changes (p=1.00E-03):\n\n   Direct interactions between each of these TFs:\n   NFYB interacts with TP53\n   TP53 interacts with CEBPB\n\n   Other ways these TFs are related:\n   CEBPB, CEBPE, ELK1, HLF, NFIA, NFIB, NFIX, NFYB, NRF1, TP53, ZNF180, ZNF341, ZNF396, ZNF441, ZNF519, ZNF529, ZNF540, and ZNF93: located in nucleus\n\n   ZNF180, ZNF341, ZNF396, ZNF432, ZNF441, ZNF519, ZNF529, ZNF540, and ZNF93: has component Zinc finger, C2H2 type\n\n   ZNF180, ZNF341, ZNF396, ZNF432, ZNF441, ZNF519, ZNF529, and ZNF540: has function metal ion binding\n\n   ZNF180, ZNF432, ZNF441, ZNF519, ZNF529, ZNF540, and ZNF93: has component KRAB box\n\n   CEBPB, CEBPD, CEBPE, NFYB, TP53, and ZNF396: has function protein heterodimerization activity\n\n   ZNF180, ZNF432, ZNF441, ZNF519, ZNF529, and ZNF540: molecularly interacts with KRAB-ZNF / KAP Complex [nucleoplasm]\n\n   CEBPB, CEBPD, CEBPE, and HLF: has component Basic region leucine zipper\n\n   [...]\n\n   CEBPB and CEBPD: interacts with ATF4\n\n   CEBPB and CEBPD: interacts with CEBPA\n\n   CEBPB and CEBPD: participates in positive regulation of osteoblast differentiation\n\n   CEBPB and CEBPE: participates in cellular response to lipopolysaccharide\n\n   CEBPB and CEBPE: participates in defense response to bacterium\n\nUsage examples\n~~~~~~~~~~~~~~\n\nUnpack the motif files (see below for how to create your own, instead):\n\n::\n\n   $ mkdir /path/to/grch38_motifs\n   $ tar xvfz motifs/HOCOMOCO_v11_p1e-6_grch38.tar.gz --directory /path/to/grch38_motifs\n\nCalculate the MD-scores for the first biological condition:\n\n::\n\n   $ process_atac --threads 8 --atac-peaks /path/to/DMSO/ATAC/peaks/file \\\n     --genome hg38 \\\n     --motif-path /path/to/directory/containing/motif/files \\\n     --output /path/to/output/directory\n\nThe above command generates a file called ``BASENAME_md_scores.txt``.\nIt’s generally a good idea to use the cell type (or sample number) and a\nbrief condition description (e.g. ``k562_DMSO`` or\n``SRR1234123_Metronidazole``) in the file name provided.\n\nWe would then generate the same file, for the other biological condition\nwe are comparing against:\n\n::\n\n   $ process_atac --threads 8 --atac-peaks /path/to/treatment/ATAC/peaks/file \\\n     --genome hg38 \\\n     --motif-path /path/to/directory/containing/motif/files \\\n     --output /path/to/output/directory\n\nThe above generates a file called ``BASENAME_md_scores.txt``. Finally:\n\n::\n\n   $ differential_md_score --assay-1 DMSO --assay-2 Treatment --p-value 0.0000001 --barcodes --output /path/to/output/directory\n\nThe above generates a tab-delimited file with all differential MD scores\nfor each motif and their p-values (sorted by p-value), an MA plot that\nlabels the most significant TF activity changes, at a p-value cutoff of\n1e-7. Note that better plot-friendly condition names (say, “DMSO” and\n“Treatment”) can be provided using the ``--label-1`` and ``--label-2``\narguments. The plots look like the example below:\n\n.. figure:: ./doc_files/sample_MA_plot.png\n   :alt: Sample MA plot\n\n   Sample MA plot\n\nThe ``-b`` flag also generates a “barcode plot” of each of these\nstatistically significat motif differences that depicts how close the\nATAC-seq peaks were to the (putative TF-binding) motif sites, within a\n1500 base-pair radius of the motif center:\n\n.. figure:: ./doc_files/sample_barcode_plot.png\n   :alt: Sample barcode plot\n\n   Sample barcode plot\n\nIf you can take advantage of multiprocessing, you can calculate\nMD-scores for both conditions simultaneously, assigning several threads\nto each, then generate the plots once both ``*_md_scores.txt`` files are\nready.\n\nThe columns for the tab-separated output file from\n``differential_md_score`` are:\n\n::\n\n   Motif name , p-value , # total motif hits, # nearby peaks in condition 1 , # nearby peaks in condition 2 , MD-score in condition 1 , MD-score in condition 2, differential MD-score\n\nTo query what we know about these highlighted TFs displaying a\nsignificant difference in activity, we can use:\n\n::\n\n   $ tf_result_explanations -p 0.0000001 \\\n     -d /path/to/output/directory/your_condition1_vs_condition2_differential_md_score.txt \\\n     -o /path/to/report_file.txt\n\nAdditional Arguments\n--------------------\n\nGenome File\n~~~~~~~~~~~\n\nIf your genome is not incuded in the UCSC genome repository, you will\ninstead need to provide a chromosome sizes file in processess_atac. This\ncan be generated using\n`samtools <http://www.htslib.org/doc/samtools.html>`__ faidx as follows:\n\n::\n\n   $ samtools faidx genome.fa\n   $ cut -f1,2 genome.fa.fai > genome.chrom.sizes\n\nThis file can then be specified using the ``-c``/``--chromosomes``\nargument in ``process_atac``. Scaffold chromosomes will be removed.\nPlease note that the ``--genome`` and ``--chromosomes`` arguments are\nmutually exclusive, and that the ``--genome`` argument assumes the\n``[fetchChromsizes](https://anaconda.org/bioconda/ucsc-fetchchromsizes)``\ntool is installed.\n\nNormalization\n~~~~~~~~~~~~~\n\nIf the -g/–global-normalization argument is used in the\n``differential_md_score`` module, then the total number of genome-wide\nmotif hits will be used to normalize the barcode plots. This may be\nhelpful in better assessing changes across different\nperturbations/experiments or cell lines. Otherwise, the barcode plots\nwill simply be set to the same max heat to facilitate better\nvisualization of relative motif density between conditions. This\nnormalization argument has also been implemented in the ``barcode_plot``\nplotting module and as such the output stats file from\n``differential_md_score`` now include the total number of genome-wide\nmotif hits for each motif.\n\n**NOTE** Using the -g/–global-normalization argument will also result in\na different heatmap color (YlOrRd) rather than the default (cividis) so\nthat the two normalization types are easily differentiated.\n\nAltering Window Size\n~~~~~~~~~~~~~~~~~~~~\n\nWhile we strongly recommend using the default 1500bp radius window in\ncalculating the MD score (and differential MD score), as of v0.3.0 we\nnow have a radius argument (``-r``/``--radius``) which will allow you to\nexpand or shrink this window. If changed, the MD score calculation will\nfollow the same principle in that it will be a ratio of motifs hits\nwithin the cetner 1/10th of the window relative divided by the number of\ntotal motif hits within the window. For example, if the user specifies a\nradius of 2000bp, there will be a window size of 4000bp, a center of\n400bp around the features of interest, and the MD score will be # motif\nhits within 400bp/ # motifs within 4000bp. Keep in mind that expanding\nthis window may be useful in visualization, but will result in an MD\nscore approaching 0.1 (background).\n\nMotif Files\n~~~~~~~~~~~\n\nFeel free to use the pre-scanned motif files provided,\nHOCOMOCO_v11_p1e-6_grch38.tar.gz(`mirror\n1 <http://dowell.colorado.edu/pubs/DAStk/motifs/HOCOMOCO_v11_p1e-6_grch38.tar.gz>`__,\n`mirror\n2 <https://drive.google.com/file/d/19D1iW9x0mswiFLoj6hrDFjVfhYmAbLqG/view?usp=sharing>`__),\nHOCOMOCO_v11_p1e-6_hg19.tar.gz(`mirror\n1 <http://dowell.colorado.edu/pubs/DAStk/motifs/HOCOMOCO_v11_p1e-6_hg19.tar.gz>`__,\n`mirror\n2 <https://drive.google.com/file/d/10_0kuPQbswmhoazjvEJ1KfGRJDuJ-O0y/view?usp=sharing>`__)\nand HOCOMOCO_v11_p1e-6_mm10.tar.gz (`mirror\n1 <http://dowell.colorado.edu/pubs/DAStk/motifs/HOCOMOCO_v11_p1e-6_mm10.tar.gz>`__,\n`mirror\n2 <https://drive.google.com/file/d/1qCirs0AfHzFwnbXMEa8vTd06tEiyE42Z/view?usp=sharing>`__\nfor the ``GRCh38/hg38``, ``hg19`` and ``mm10`` reference genomes,\nrespectively. They have been generated from HOCOMOCO’s v11\nmononucleotide model, background-corrected for each reference genome. To\ngenerate your own ``bed`` files for each motif from this or any other\nsource, you can use FIMO in combination with the downloaded ``.meme``\nfiles from your TF database of choice. For example, if using HOCOMOCO,\nyou can create the motif file for TP53 using their mononucleotide model\nwith a p-value threshold of 0.000001 by:\n\n::\n\n   $ fimo -max-stored-scores 10000000 --thresh 1e-6 -oc /path/to/output/directory -motif /path/to/motif/file \\\n     /path/to/HOCOMOCOv11_HUMAN_mono_meme_format.meme /path/to/whole_genome.fa\n\nPlease refer to the complete\n`FIMO <http://meme-suite.org/doc/fimo.html?man_type=web>`__\ndocumentation for any questions.\n\n--------------\n\nCitation\n~~~~~~~~\n\nPlease cite DAStk if you have used it in your research!\n\n*Tripodi, I.J.; Allen, M.A.; Dowell, R.D.* `Detecting Differential\nTranscription Factor Activity from ATAC-Seq\nData <https://www.mdpi.com/1420-3049/23/5/1136>`__\\ *. Molecules 2018,\n23, 1136.*\n\nIf you have used the provided scanned motif regions from HOCOMOCO,\nplease cite them as well:\n\n*Kulakovskiy, I.V., Vorontsov, I.E., Yevshin, I.S., Sharipov, R.N.,\nFedorova, A.D., Rumynskiy, E.I., Medvedeva, Y.A., Magana-Mora, A.,\nBajic, V.B., Papatsenko, D.A., et al. (2018).* `HOCOMOCO: towards a\ncomplete collection of transcription factor binding models for human and\nmouse via large-scale ChIP-Seq\nanalysis <https://academic.oup.com/nar/article/46/D1/D252/4616875>`__\\ *.\nNucleic Acids Res 46, D252–D259.*\n\nFor any questions or bug reports, please use the Issue Tracker.\n\n| *Ignacio Tripodi (ignacio.tripodi at colorado.edu)*\n| *Computer Science Department, BioFrontiers Institute*\n| *University of Colorado, Boulder, USA*\n\n| *Margaret Gruca (margaret.gruca at colorado.edu)*\n| *BioFrontiers Institute*\n| *University of Colorado, Boulder, USA*",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dowell-Lab/DAStk",
    "keywords": "bioinformatics genomics chromatin ATAC-seq motif transcription_factor TF",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DAStk",
    "package_url": "https://pypi.org/project/DAStk/",
    "platform": null,
    "project_url": "https://pypi.org/project/DAStk/",
    "project_urls": {
      "Homepage": "https://github.com/Dowell-Lab/DAStk"
    },
    "release_url": "https://pypi.org/project/DAStk/1.0.1.post1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Differential ATAC-seq toolkit",
    "version": "1.0.1.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16581584,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62817a817e4210ee4989e0f3187e1f17be420d5e2fb7644713f901c854cb63d3",
          "md5": "6899ed0a8bc29ae976e06ccbd6491c9a",
          "sha256": "fe2a7db5e29f1a5a581afa38b27d8b533a013cecda5fe3d97e36e64ebaf46e0f"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6899ed0a8bc29ae976e06ccbd6491c9a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 12097,
        "upload_time": "2018-04-24T05:44:33",
        "upload_time_iso_8601": "2018-04-24T05:44:33.033336Z",
        "url": "https://files.pythonhosted.org/packages/62/81/7a817e4210ee4989e0f3187e1f17be420d5e2fb7644713f901c854cb63d3/DAStk-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bfe2a4d697ee19a8d2b3136e5ccded3324711ede31b0b04a1afc238dc3814f2",
          "md5": "169329e0397df36b0e7d36f121ec164e",
          "sha256": "6611e9ed37992257cb67b47b9b982909111f3174664bc7950e733d74aaf8a3ed"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "169329e0397df36b0e7d36f121ec164e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 10252,
        "upload_time": "2018-04-24T05:44:34",
        "upload_time_iso_8601": "2018-04-24T05:44:34.262921Z",
        "url": "https://files.pythonhosted.org/packages/8b/fe/2a4d697ee19a8d2b3136e5ccded3324711ede31b0b04a1afc238dc3814f2/DAStk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80e9e5bd58c67c256966902bdfcc9e8ae607103a23c3d20e5de8986f4045ecb9",
          "md5": "c48f4baef32eba32b6900d257f6a2fbf",
          "sha256": "0dffbc3ca9deb5b5adf8ce5748a635682b3dee6ad5f76b545c25e22916c16a2b"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c48f4baef32eba32b6900d257f6a2fbf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 12494,
        "upload_time": "2018-05-15T16:43:31",
        "upload_time_iso_8601": "2018-05-15T16:43:31.128032Z",
        "url": "https://files.pythonhosted.org/packages/80/e9/e5bd58c67c256966902bdfcc9e8ae607103a23c3d20e5de8986f4045ecb9/DAStk-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "366dd1f957a6ff42dba9e14eb96f99c1eb51817874dfa863a4a9a099c23f4bab",
          "md5": "bcbd1e1221a5591dd44cfd4f535f6190",
          "sha256": "4cab4d5e6ea8ed7a2e40071cb409c81bd8bf5d11bc6ffc3b3bb0a9a10a67313b"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcbd1e1221a5591dd44cfd4f535f6190",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 12489,
        "upload_time": "2018-05-18T20:11:13",
        "upload_time_iso_8601": "2018-05-18T20:11:13.526680Z",
        "url": "https://files.pythonhosted.org/packages/36/6d/d1f957a6ff42dba9e14eb96f99c1eb51817874dfa863a4a9a099c23f4bab/DAStk-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d54fb76f23b88ac30a17d566b543c11e6407f1eddb49479021b3356d054fc96",
          "md5": "150f7be6b04084a1a2eba9dd4b87e22f",
          "sha256": "4992c4cb3e44b900786b46fc60f752672e44ed8699fe41cac9c84312a71d35bb"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "150f7be6b04084a1a2eba9dd4b87e22f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 12497,
        "upload_time": "2018-05-20T05:52:20",
        "upload_time_iso_8601": "2018-05-20T05:52:20.997483Z",
        "url": "https://files.pythonhosted.org/packages/2d/54/fb76f23b88ac30a17d566b543c11e6407f1eddb49479021b3356d054fc96/DAStk-0.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c760c483fcc1894f162f8516283ffea15a326fe7d39488b2f7ba658c4c49116",
          "md5": "05a0b0337f521f8d29ff77ae361c4980",
          "sha256": "4eb1d22f68052ed44df74127dee76cd40687b80bde23ba8c8672671ba979d289"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05a0b0337f521f8d29ff77ae361c4980",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 12568,
        "upload_time": "2018-05-25T02:41:37",
        "upload_time_iso_8601": "2018-05-25T02:41:37.394162Z",
        "url": "https://files.pythonhosted.org/packages/6c/76/0c483fcc1894f162f8516283ffea15a326fe7d39488b2f7ba658c4c49116/DAStk-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8dc04d392eac0e0b3f50fad40441cd100ac876bdd7641a2ca209665d4060055",
          "md5": "9e5d9b7c1d26f5a9dc273cbfc47c344c",
          "sha256": "d57f46d77a7054b0f89f194b330f2235cf382392780098dfeed7ee88a00492a5"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9e5d9b7c1d26f5a9dc273cbfc47c344c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 10708,
        "upload_time": "2018-06-19T05:45:15",
        "upload_time_iso_8601": "2018-06-19T05:45:15.320581Z",
        "url": "https://files.pythonhosted.org/packages/a8/dc/04d392eac0e0b3f50fad40441cd100ac876bdd7641a2ca209665d4060055/DAStk-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2158bab4c52cad3d76ce7e357f8208f99f167daf25687b754b582b50e4ccdc41",
          "md5": "fc920db471d6257001ccd4eab49699ba",
          "sha256": "09c863c444e7dad8e6900b10cb6e2dbc4edd956144bf9ab555783b9cc8970647"
        },
        "downloads": -1,
        "filename": "DAStk-0.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc920db471d6257001ccd4eab49699ba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 12570,
        "upload_time": "2018-06-23T21:36:55",
        "upload_time_iso_8601": "2018-06-23T21:36:55.924253Z",
        "url": "https://files.pythonhosted.org/packages/21/58/bab4c52cad3d76ce7e357f8208f99f167daf25687b754b582b50e4ccdc41/DAStk-0.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a00cc20b9ef0c60c9d71ea5629bc7622db4ad893b772690868b977101ea1252",
          "md5": "1c47db073b9ee54b1dfc22cd3be2ac7f",
          "sha256": "67cd95959c291b591544654ba3b3d0995bbf80e23d2358119ab137cbce76e29f"
        },
        "downloads": -1,
        "filename": "DAStk-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c47db073b9ee54b1dfc22cd3be2ac7f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 14187,
        "upload_time": "2019-03-15T06:42:31",
        "upload_time_iso_8601": "2019-03-15T06:42:31.613270Z",
        "url": "https://files.pythonhosted.org/packages/1a/00/cc20b9ef0c60c9d71ea5629bc7622db4ad893b772690868b977101ea1252/DAStk-0.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87a17ad80c2e0c7f24a131c5608af2148c39f49b5354e2b5ce7e8cca76471a1b",
          "md5": "a4bcade68257eb2e77ca25bcbce0e0ae",
          "sha256": "7997586561c670fdeaf9bac89155e017ad1d486b517d0d52755e160ab4068871"
        },
        "downloads": -1,
        "filename": "DAStk-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a4bcade68257eb2e77ca25bcbce0e0ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 13136,
        "upload_time": "2019-03-15T06:42:33",
        "upload_time_iso_8601": "2019-03-15T06:42:33.382912Z",
        "url": "https://files.pythonhosted.org/packages/87/a1/7ad80c2e0c7f24a131c5608af2148c39f49b5354e2b5ce7e8cca76471a1b/DAStk-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79fe7222cef48a7b5317cefd51fecbae0644da6b56f3d4e8b501e2a12d8b754d",
          "md5": "998eae2fe182f6c5b285e32b374e5aad",
          "sha256": "c7b0420393602c6b79c71f78b6f361273c554ad524eb9a83ebf252ef698d6c66"
        },
        "downloads": -1,
        "filename": "DAStk-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "998eae2fe182f6c5b285e32b374e5aad",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 20101,
        "upload_time": "2019-07-04T05:09:34",
        "upload_time_iso_8601": "2019-07-04T05:09:34.309737Z",
        "url": "https://files.pythonhosted.org/packages/79/fe/7222cef48a7b5317cefd51fecbae0644da6b56f3d4e8b501e2a12d8b754d/DAStk-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27b255ad8793ed79c37b553d8ae55f1109b3e96d879cd1005ff445fe865abe09",
          "md5": "971b6b79fb093ab8e87c705e4c1a4e5a",
          "sha256": "b845a17c7604fa66ef26b0d4ffd5d3badada56e18a4f88e7fc0ec34b068c337d"
        },
        "downloads": -1,
        "filename": "DAStk-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "971b6b79fb093ab8e87c705e4c1a4e5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 16348,
        "upload_time": "2019-07-04T05:09:35",
        "upload_time_iso_8601": "2019-07-04T05:09:35.961396Z",
        "url": "https://files.pythonhosted.org/packages/27/b2/55ad8793ed79c37b553d8ae55f1109b3e96d879cd1005ff445fe865abe09/DAStk-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e33c42cb5fe7b37d181e64a4228d97198606739079d068fa6f18e081bee8de8",
          "md5": "a89238d3bd77d9cd1c86b5c32f9510ba",
          "sha256": "24139326396346dc305f8f7770ed5c53f3a6c241f418d42cd384f21e184b252e"
        },
        "downloads": -1,
        "filename": "DAStk-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a89238d3bd77d9cd1c86b5c32f9510ba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 20101,
        "upload_time": "2019-07-06T00:41:48",
        "upload_time_iso_8601": "2019-07-06T00:41:48.535182Z",
        "url": "https://files.pythonhosted.org/packages/5e/33/c42cb5fe7b37d181e64a4228d97198606739079d068fa6f18e081bee8de8/DAStk-0.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ef3ecf5a00ba3260cb93684c897d558c12d4f3124ef9596ec92ca2b97efd8dc",
          "md5": "dd5fce16137fb46f50bdcec7a63e96f6",
          "sha256": "8f9866b358dc315f8561494c5df37d113ee0eecdb0dcb77ea1e272788e469ecc"
        },
        "downloads": -1,
        "filename": "DAStk-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd5fce16137fb46f50bdcec7a63e96f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 16347,
        "upload_time": "2019-07-06T00:41:50",
        "upload_time_iso_8601": "2019-07-06T00:41:50.225909Z",
        "url": "https://files.pythonhosted.org/packages/3e/f3/ecf5a00ba3260cb93684c897d558c12d4f3124ef9596ec92ca2b97efd8dc/DAStk-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0777974fe838cbff87be9ca100e51e0e4412b7abb97af9c9713589e96b2091cf",
          "md5": "2ca59a08582851f992c8366ae9cc4b94",
          "sha256": "1eee32c0dcfb319b6f192db0b9323899fd392aa773dd537e1db1b72b0042cb32"
        },
        "downloads": -1,
        "filename": "DAStk-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ca59a08582851f992c8366ae9cc4b94",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 20102,
        "upload_time": "2019-07-11T21:10:56",
        "upload_time_iso_8601": "2019-07-11T21:10:56.790064Z",
        "url": "https://files.pythonhosted.org/packages/07/77/974fe838cbff87be9ca100e51e0e4412b7abb97af9c9713589e96b2091cf/DAStk-0.3.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af92258c90d752176ca8606d45157ca7ff1aef9d1dd2681f1425ccfdc29f56f7",
          "md5": "9cffac528e1d5efc2c4c34559e201f7b",
          "sha256": "e849a5332e38b658227ee01f6a141b23e9903fae89e3e09ec75fa55122ac24c2"
        },
        "downloads": -1,
        "filename": "DAStk-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9cffac528e1d5efc2c4c34559e201f7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 16343,
        "upload_time": "2019-07-11T21:10:59",
        "upload_time_iso_8601": "2019-07-11T21:10:59.064230Z",
        "url": "https://files.pythonhosted.org/packages/af/92/258c90d752176ca8606d45157ca7ff1aef9d1dd2681f1425ccfdc29f56f7/DAStk-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fee5edd652658a2036459dd0c11eb4979eda559b8298288377881c80e3189879",
          "md5": "551084acfeb59ed1d007d0ce618e6727",
          "sha256": "bc35874bdfd8d16289406a3637f7c54a93f9a428dd6cb2004fb0ca9ac13be0f5"
        },
        "downloads": -1,
        "filename": "DAStk-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "551084acfeb59ed1d007d0ce618e6727",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 20521,
        "upload_time": "2019-11-26T00:57:10",
        "upload_time_iso_8601": "2019-11-26T00:57:10.878324Z",
        "url": "https://files.pythonhosted.org/packages/fe/e5/edd652658a2036459dd0c11eb4979eda559b8298288377881c80e3189879/DAStk-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca69dd4b41311978d9baf13d74551917a20422b2a22a4960644e81766ffcfd06",
          "md5": "8e958e02f0112f961b636bc2b74a9c6b",
          "sha256": "2b56586ebea89a559507537944d3baa3f3c1e3c3b455e952571f586dc9417a3f"
        },
        "downloads": -1,
        "filename": "DAStk-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e958e02f0112f961b636bc2b74a9c6b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7",
        "size": 9542026,
        "upload_time": "2020-02-02T18:17:53",
        "upload_time_iso_8601": "2020-02-02T18:17:53.480696Z",
        "url": "https://files.pythonhosted.org/packages/ca/69/dd4b41311978d9baf13d74551917a20422b2a22a4960644e81766ffcfd06/DAStk-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaba736d19554b2b2faa866063ee0728fcbd19ad63cabc2eb9a677e1a3ed5dfa",
          "md5": "531beae48c5b6689c9ab91d0ba5c5291",
          "sha256": "4b7554893f8a455d0aea0e5f150613ef7f56fc0bcb24ff6690b9d46a3dc6fc31"
        },
        "downloads": -1,
        "filename": "DAStk-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "531beae48c5b6689c9ab91d0ba5c5291",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 9075542,
        "upload_time": "2020-02-02T18:18:04",
        "upload_time_iso_8601": "2020-02-02T18:18:04.588367Z",
        "url": "https://files.pythonhosted.org/packages/ea/ba/736d19554b2b2faa866063ee0728fcbd19ad63cabc2eb9a677e1a3ed5dfa/DAStk-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6c4effc9dedeeb7ed551cf8fb61897cc25085dd75084059c58c15d57361cbfc",
          "md5": "6f880cf25a8565e3a95b701621eb27cd",
          "sha256": "081602ea3ea2644d063711ff9467d63d73ffd5305e87c93733ad2a5996804256"
        },
        "downloads": -1,
        "filename": "DAStk-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f880cf25a8565e3a95b701621eb27cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1157721,
        "upload_time": "2023-01-26T22:07:10",
        "upload_time_iso_8601": "2023-01-26T22:07:10.453167Z",
        "url": "https://files.pythonhosted.org/packages/d6/c4/effc9dedeeb7ed551cf8fb61897cc25085dd75084059c58c15d57361cbfc/DAStk-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bd93ff879c202f7a9cebfc5ec605c39f6ef5c06aa264cec092e1851fb034f7a",
          "md5": "e921d3f92206a0be75c5fcc217b62f36",
          "sha256": "99dc29ab7ca7ccc6bf56e0f1ce0aa3be310f5c3513c67e011465533554a8ac8f"
        },
        "downloads": -1,
        "filename": "DAStk-1.0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "e921d3f92206a0be75c5fcc217b62f36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1160389,
        "upload_time": "2023-01-26T22:13:59",
        "upload_time_iso_8601": "2023-01-26T22:13:59.850655Z",
        "url": "https://files.pythonhosted.org/packages/6b/d9/3ff879c202f7a9cebfc5ec605c39f6ef5c06aa264cec092e1851fb034f7a/DAStk-1.0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bd93ff879c202f7a9cebfc5ec605c39f6ef5c06aa264cec092e1851fb034f7a",
        "md5": "e921d3f92206a0be75c5fcc217b62f36",
        "sha256": "99dc29ab7ca7ccc6bf56e0f1ce0aa3be310f5c3513c67e011465533554a8ac8f"
      },
      "downloads": -1,
      "filename": "DAStk-1.0.1.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "e921d3f92206a0be75c5fcc217b62f36",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1160389,
      "upload_time": "2023-01-26T22:13:59",
      "upload_time_iso_8601": "2023-01-26T22:13:59.850655Z",
      "url": "https://files.pythonhosted.org/packages/6b/d9/3ff879c202f7a9cebfc5ec605c39f6ef5c06aa264cec092e1851fb034f7a/DAStk-1.0.1.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}