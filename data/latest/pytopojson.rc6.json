{
  "info": {
    "author": "Facundo Ferrín",
    "author_email": "facundo.ferrin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# pyTopoJSON \n[![](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/download/releases/3.4.0/) \n[![Build Status](https://travis-ci.com/fferrin/pytopojson.svg?branch=master)](https://travis-ci.com/fferrin/pytopojson)\n[![codecov](https://codecov.io/gh/fferrin/pytopojson/branch/master/graph/badge.svg)](https://codecov.io/gh/fferrin/pytopojson)\n[![PEP8](https://img.shields.io/badge/code%20style-pep8-orange.svg)](https://www.python.org/dev/peps/pep-0008/)\n[![Known Vulnerabilities](https://snyk.io/test/github/fferrin/pytopojson/badge.svg?targetFile=requirements.txt)](https://snyk.io/test/github/fferrin/pytopojson)\n\n**pyTopoJSON** is based on the work of \n[Mike Bostock](https://github.com/topojson/topojson-server) and it provides \ntools for converting GeoJSON to [TopoJSON](https://github.com/topojson). \nSee [How to Infer Topology](https://bost.ocks.org/mike/topology/) for details \non how the topology is constructed. See also \n[us-atlas](https://github.com/topojson/us-atlas) and \n[world-atlas](https://github.com/topojson/world-atlas) for pre-built TopoJSON.\n\n\n## Installation\n\n#### Dependencies\n\n**pytopojson** requires:\n\n- NumPy (>= 1.15.0)\n\n#### User installation\n\nIf you already have a working installation of NumPy,\nthe easiest way to install **pytopojson** is using ``pip``:\n\n    pip install pytopojson\n\n## API Reference\n\n<a name=\"topology\" href=\"#topology\">#</a> pytopojson.topology.<b>Topology()</b>\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/topology.py \"Source\")\n\nYou must create a `Topology` object to compute the topology:\n\n```python\n# Import topology\nfrom pytopojson import topology\n\n# Create Topology object\ntopology_ = topology.Topology()\n\n# Call it using a GeoJSON (dict) object, a name for the object and a quantization value (optional)\ntopojson = topology_({\"object_name\": geojson}, quantization=quantization)\n```\n\nThis returns a TopoJSON topology for the specified \n[GeoJSON *objects*](http://geojson.org/geojson-spec.html#geojson-objects). \nThe returned topology makes a shallow copy of the input `objects`: \nthe identifier, bounding box, properties and coordinates of input objects may \nbe shared with the output topology.\n\nIf a `quantization` parameter is specified, the input geometry is quantized \nprior to computing the topology, the returned topology is quantized, and its \narcs are \n[delta-encoded](https://github.com/topojson/topojson-specification/blob/master/README.md#213-arcs). \nQuantization is recommended to improve the quality of the topology if the \ninput geometry is messy (*i.e.*, small floating point error means that \nadjacent boundaries do not have identical values); typical values are powers \nof ten, such as 1e4, 1e5 or 1e6. \n\n<a name=\"feature\" href=\"#feature\">#</a> \npytopojson.feature.<b>Feature</b>(<i>topology</i>, <i>object</i>) \n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/feature.py \"Source\")\n\nReturns the GeoJSON Feature or FeatureCollection for the specified *object* in \nthe given `topology`. If the specified object is a string, it is treated as \n`topology*['objects'][object]`. Then, if the object is a GeometryCollection, \na FeatureCollection is returned, and each geometry in the collection is \nmapped to a Feature. Otherwise, a Feature is returned. The returned feature is \na shallow copy of the source `object`: they may share identifiers, bounding \nboxes, properties and coordinates.\n\nSome examples:\n\n* A point is mapped to a feature with a geometry object of type \"Point\".\n* Likewise for line strings, polygons, and other simple geometries.\n* A null geometry object (of type null in TopoJSON) is mapped to a feature \nwith a null geometry object.\n* A geometry collection of points is mapped to a feature collection of \nfeatures, each with a point geometry.\n* A geometry collection of geometry collections is mapped to a feature \ncollection of features, each with a geometry collection.\n\nSee [test_feature.py](https://github.com/fferrin/pytopojson/blob/master/tests/test_feature.py) \nfor more examples.\n\n<a name=\"merge\" href=\"#merge\">#</a> \npytopojson.merge.<b>Merge</b>(<i>topology</i>, <i>objects</i>) \n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py \"Source\")\n\nReturns the GeoJSON MultiPolygon geometry object representing the union for \nthe specified array of Polygon and MultiPolygon `objects` in the given \n`topology`. Interior borders shared by adjacent polygons are removed. \nSee [Merging States](https://bl.ocks.org/mbostock/5416405) for an example. \nThe returned geometry is a shallow copy of the source `object`: they may share \ncoordinates.\n\n<a name=\"mergeArcs\" href=\"#mergeArcs\">#</a> \npytopojson.merge.<b>MergeArcs</b>(<i>topology</i>, <i>objects</i>) \n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/merge.py \"Source\")\n\nEquivalent to [topojson.merge.Merge()](#merge), but returns TopoJSON rather \nthan GeoJSON. The returned geometry is a shallow copy of the source `object`: \nthey may share coordinates.\n\n<a name=\"mesh\" href=\"#mesh\">#</a> \npytopojson.mesh.<b>Mesh</b>(<i>topology</i>[, <i>object</i>[, <i>filter</i>]])\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py \"Source\")\n\nReturns the GeoJSON MultiLineString geometry object representing the mesh for \nthe specified `object` in the given `topology`. This is useful for rendering \nstrokes in complicated objects efficiently, as edges that are shared by \nmultiple features are only stroked once. If `object` is not specified, a mesh \nof the entire topology is returned. The returned geometry is a shallow copy of \nthe source `object`: they may share coordinates.\n\nAn optional `filter` function may be specified to prune arcs from the returned \nmesh using the topology. The filter function is called once for each candidate \narc and takes two arguments, `a` and `b`, two geometry objects that share that \narc. Each arc is only included in the resulting mesh if the filter function \nreturns `True`. For typical map topologies the geometries `a` and `b` are \nadjacent polygons and the candidate arc is their boundary. If an arc is only \nused by a single geometry then `a` and `b` are identical. This property is \nuseful for separating interior and exterior boundaries; an easy way to produce \na mesh of interior boundaries is:\n\n```python\n# Import topology\nfrom pytopojson import mesh\n\n# Create Mesh object and filter\nmesh_ = mesh.Mesh()\ncustom_filter = lambda x, y: x != y\n\ninteriors = mesh_(topology, object_, custom_filter)\n```\n\nSee this [county choropleth](https://bl.ocks.org/mbostock/4060606) for example. \nNote: the `a` and `b` objects are TopoJSON objects (pulled directly from the \ntopology), and not automatically converted to GeoJSON features as by \n[topojson.feature.Feature()](#feature).\n\n<a name=\"meshArcs\" href=\"#meshArcs\">#</a> \npytopojson.mesh.<b>MeshArcs</b>(<i>topology</i>[, <i>object</i>[, <i>filter</i>]])\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/mesh.py \"Source\")\n\nEquivalent to [topojson.mesh.Mesh()](#mesh), but returns TopoJSON rather than \nGeoJSON. The returned geometry is a shallow copy of the source `object`: they \nmay share coordinates.\n\n<a name=\"neighbors\" href=\"#neighbors\">#</a> \npytopojson.neighbors.<b>Neighbors</b>(<i>objects</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/neighbors.py \"Source\")\n\nReturns an array representing the set of neighboring objects for each object \nin the specified `objects` array. The returned array has the same number of \nelements as the input array; each element `i` in the returned array is the \narray of indexes for neighbors of object `i` in the input array. For example, \nif the specified objects array contains the features `foo` and `bar`, and \nthese features are neighbors, the returned array will be `[[1], [0]]`, \nindicating that `foo` is a neighbor of `bar` and vice versa. Each array of \nneighbor indexes for each object is guaranteed to be sorted in ascending order.\n\nFor a practical example, see the \n[world map](https://bl.ocks.org/mbostock/4180634) with topological coloring.\n\n### Transforms\n\n<a name=\"bbox\" href=\"#bbox\">#</a> \npytopojson.bbox.<b>BBox</b>(<i>topology</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/bbox.py \"Source\")\n\nReturns the computed \n[bounding box](https://github.com/topojson/topojson-specification#3-bounding-boxes) \nof the specified `topology` [*x*₀, *y*₀, *x*₁, *y*₁] where *x*₀ is the minimum \n*x*-value, *y*₀ is the minimum *y*-value, *x*₁ is the maximum *x*-value, and \n*y*₁ is the maximum *y*-value. If the `topology` has no points and no arcs, \nthe returned bounding box is [∞, ∞, -∞, -∞]. (This method ignores the existing\n `topology`.bbox, if any.)\n\n<a name=\"quantize\" href=\"#quantize\">#</a> \npytopojson.quantize.<b>Quantize</b>(<i>topology</i>, <i>transform</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/quantize.py \"Source\")\n\nReturns a shallow copy of the specified `topology` with \n[quantized and delta-encoded](https://github.com/topojson/topojson-specification#213-arcs) \narcs according to the specified \n[`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms). \nIf the `topology` is already quantized, an error is thrown. See also \n[topoquantize](#topoquantize).\n\nIf a quantization number `n` is specified instead of a `transform` object, the \ncorresponding transform object is first computed using the bounding box of the \ntopology. In this case, the quantization number `n` must be a positive integer \ngreater than one which determines the maximum number of expressible values per \ndimension in the resulting quantized coordinates; typically, a power of ten is \nchosen such as 1e4, 1e5 or 1e6. If the `topology` does not already have a \n`topology`.bbox, one is computed using [topojson.bbox.BBox](#bbox).\n\n<a name=\"transform\" href=\"#transform\">#</a> \npytopojson.transform.<b>Transform</b>(<i>transform</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/transform.py \"Source\")\n\nIf the specified \n[`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms) \nis non-null, returns a [point `transform` function](#_transform) to remove \ndelta-encoding and apply the transform. If the `transform` is null, returns \nthe identity function.\n\n<a name=\"untransform\" href=\"#untransform\">#</a> \npytopojson.untransform.<b>Untransform</b>(<i>transform</i>)\n[<>](https://github.com/fferrin/pytopojson/blob/master/pytopojson/untransform.py \"Source\")\n\nIf the specified \n[`transform` object](https://github.com/topojson/topojson-specification/blob/master/README.md#212-transforms) \nis non-null, returns a [point `transform` function](#_transform) to apply \nquantized delta-encoding and remove the transform. If the `transform` is null, \nreturns the identity function. See also [topojson.quantize.Quantize()](#quantize).\n\n## Command-Line Reference\n\nSome command-line tools are also provided:\n\n### geo2topo\n\n<a name=\"geo2topo\" href=\"#geo2topo\">#</a> <b>geo2topo</b> [<i>options…</i>] \n[<i>name</i>=]<i>file</i>… \n[<>](https://github.com/fferrin/pytopojson/blob/master/bin/geo2topo.py \"Source\")\n\nConverts one or more GeoJSON objects to an output topology. For example, to \nconvert a GeoJSON FeatureCollection in the input file us-states.json to a \nTopologyJSON topology in the output file us.json:\n\n```bash\npython geo2topo.py states=us-states.json > us.json\n```\n\nThe resulting topology has a “states” object which corresponds to the input \ngeometry. For convenience, you can omit the object name and specify only the \noutput `file` name; the object name will then be the basename of the file, \nwith the directory and extension removed. For example, to convert the \nstates.json GeoJSON FeatureCollection to a TopologyJSON topology with the \n“states” object in us.json:\n\n```bash\npython geo2topo.py states.json > us.json\n```\n\nAny properties and identifiers of input \n[feature objects](https://tools.ietf.org/html/rfc7946#section-3.2) are \npropagated to the output. If you want to transform or filter properties, \ntry [ndjson-cli](https://github.com/mbostock/ndjson-cli) as demonstrated in \n[Command-Line Cartography](https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c).\n\n<a name=\"geo2topo_help\" href=\"#geo2topo_help\">#</a> geo2topo <b>-h</b>\n<br><a href=\"#geo2topo_help\">#</a> geo2topo <b>--help</b>\n\nOutput usage information.\n\n<a name=\"geo2topo_version\" href=\"#geo2topo_version\">#</a> geo2topo <b>-V</b>\n<br><a href=\"#geo2topo_version\">#</a> geo2topo <b>--version</b>\n\nOutput the version number.\n\n<a name=\"geo2topo_out\" href=\"#geo2topo_out\">#</a> geo2topo <b>-o</b> <i>file</i>\n<br><a href=\"#geo2topo_out\">#</a> geo2topo <b>--out</b> <i>file</i>\n\nSpecify the output TopoJSON file name. Defaults to “-” for stdout.\n\n<a name=\"geo2topo_quantization\" href=\"#geo2topo_quantization\">#</a> geo2topo <b>-q</b> <i>count</i>\n<br><a href=\"#geo2topo_quantization\">#</a> geo2topo <b>--quantization</b> <i>count</i>\n\nSpecify a pre-quantization parameter. 0 disables quantization. See \n<a href=\"#topology\">pytopojson.topology.Topology</a> for a description of \nquantization.\n\n\n### topo2geo\n\n<a name=\"topo2geo\" href=\"#topo2geo\">#</a> <b>topo2geo</b> [<i>options…</i>] \n[<i>name</i>=]<i>file</i>… \n[<>](https://github.com/fferrin/pytopojson/blob/master/bin/topo2geo.py \"Source\")\n\nConverts one or more TopoJSON objects from an input topology to one or more \nGeoJSON features. For example, to convert the \"states\" TopoJSON \n`GeometryCollection` object in `us.json` to a GeoJSON feature collection in \n`us-states.json`:\n\n```bash\npython topo2geo.py states=us-states.json < us.json\n```\n\nFor convenience, you can omit the object name and specify only the file *name*; \nthe object name will be the basename of the file, with the directory and \nextension removed. For example, to convert the \"states\" TopoJSON \n`GeometryCollection` object in `us.json` to a GeoJSON feature collection in \n`states.json`:\n\n```bash\npython topo2geo.py states.json < us.json\n```\n\nSee also [geo2topo](https://github.com/fferrin/pytopojson/blob/master/README.md#geo2topo).\n\nTo list the available object names, use [--list](#topo2geo_list).\n\n<a name=\"topo2geo_help\" href=\"#topo2geo_help\">#</a> topo2geo <b>-h</b>\n<br><a href=\"#topo2geo_help\">#</a> topo2geo <b>--help</b>\n\nOutput usage information.\n\n<a name=\"topo2geo_version\" href=\"#topo2geo_version\">#</a> topo2geo <b>-V</b>\n<br><a href=\"#topo2geo_version\">#</a> topo2geo <b>--version</b>\n\nOutput the version number.\n\n<a name=\"topo2geo_in\" href=\"#topo2geo_in\">#</a> topo2geo <b>-i</b> <i>file</i>\n<br><a href=\"#topo2geo_in\">#</a> topo2geo <b>--in</b> <i>file</i>\n\nSpecify the input TopoJSON file name. Defaults to \"-\" for stdin.\n\n<a name=\"topo2geo_list\" href=\"#topo2geo_list\">#</a> topo2geo <b>-l</b>\n<br><a href=\"#topo2geo_list\">#</a> topo2geo <b>--list</b>\n\nList the names of the objects in the input topology, and then exit. For \nexample, this:\n\n```bash\npython topo2geo.py -l < us.json\n```\n\nWill output this:\n\n```\ncounties\nstates\nnation\n```\n\n### topoquantize\n\n<a name=\"topoquantize\" href=\"#topoquantize\">#</a> <b>topoquantize</b>\n[<i>options…</i>] -q <q> [<i>input</i>] \n[<>](https://github.com/fferrin/pytopojson/blob/master/bin/topoquantize.py \"Source\")\n\nQuantizes the coordinates of the input TopoJSON topology and \n[delta-encodes](https://github.com/topojson/topojson-specification#213-arcs) \nthe topology’s arcs. The quantization parameter `q` must be a positive integer \ngreater than one, and determines the maximum expressible number of unique \nvalues per dimension in the resulting quantized coordinates; typically, a power \nof ten is chosen such as 1e4, 1e5 or 1e6. If the `topology` does not already \nhave a [bbox](#bbox), one is computed and assigned. If the `topology` is \nalready quantized, an error is thrown. See also \n[pytopojson.quantize.Quantize](#quantize).\n\n<a name=\"topoquantize_help\" href=\"#topoquantize_help\">#</a> topoquantize <b>-h</b>\n<br><a href=\"#topoquantize_help\">#</a> topoquantize <b>--help</b>\n\nOutput usage information.\n\n<a name=\"topoquantize_version\" href=\"#topoquantize_version\">#</a> \ntopoquantize <b>-V</b>\n<br><a href=\"#topoquantize_version\">#</a> topoquantize <b>--version</b>\n\nOutput the version number.\n\n<a name=\"topoquantize_in\" href=\"#topoquantize_in\">#</a> \ntopoquantize <b>-i</b> <i>input</i>\n<br><a href=\"#topoquantize_in\">#</a> topoquantize <b>--in</b> <i>input</i>\n\nSpecify the input TopoJSON. Defaults to \"-\" for stdin.\n\n<a name=\"topoquantize_out\" href=\"#topoquantize_out\">#</a> \ntopoquantize <b>-o</b> <i>output</i>\n<br><a href=\"#topoquantize_out\">#</a> topoquantize <b>--out</b> <i>output</i>\n\nSpecify the output TopoJSON file name. Defaults to \"-\" for stdout.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fferrin/pytopojson",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytopojson",
    "package_url": "https://pypi.org/project/pytopojson/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytopojson/",
    "project_urls": {
      "Homepage": "https://github.com/fferrin/pytopojson"
    },
    "release_url": "https://pypi.org/project/pytopojson/1.1.2/",
    "requires_dist": [
      "numpy (>=1.15.0)"
    ],
    "requires_python": ">=3.7.3",
    "summary": "An extension to GeoJSON that encodes topology",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13012941,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e9c0ab0956792f0a0952796d75a09ca88533768e03c2a66d696f29eaac371c8",
          "md5": "1a6c72eb5589e4dd4aa78a913b1c279f",
          "sha256": "973c1c31eaf7abbd84463eced7bfcfe11fdb614dbf9f8c319ea3e7272404ceba"
        },
        "downloads": -1,
        "filename": "pytopojson-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1a6c72eb5589e4dd4aa78a913b1c279f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23395,
        "upload_time": "2019-11-08T02:16:26",
        "upload_time_iso_8601": "2019-11-08T02:16:26.417942Z",
        "url": "https://files.pythonhosted.org/packages/4e/9c/0ab0956792f0a0952796d75a09ca88533768e03c2a66d696f29eaac371c8/pytopojson-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e9f0cd740724b90a79781e6585285b326999a500844d136b97f9163cbea497a",
          "md5": "2ed4fc20870b3940e645037005813881",
          "sha256": "cc52f3fa2984682f48cb120f3690c1d402b60c4682d5d94d50a36fa776022aee"
        },
        "downloads": -1,
        "filename": "pytopojson-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2ed4fc20870b3940e645037005813881",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23320,
        "upload_time": "2019-11-08T02:37:28",
        "upload_time_iso_8601": "2019-11-08T02:37:28.479078Z",
        "url": "https://files.pythonhosted.org/packages/4e/9f/0cd740724b90a79781e6585285b326999a500844d136b97f9163cbea497a/pytopojson-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1be4579b160e9026503a4b149c9a26245954a574dd542a025e0e82f72a91584",
          "md5": "af4e81124ce1582026aa95b69c35c81c",
          "sha256": "e5e57ebc76169f319ab4bff28d4f9d5bb746513446effc24c46e6a77f4fd8f24"
        },
        "downloads": -1,
        "filename": "pytopojson-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af4e81124ce1582026aa95b69c35c81c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 60031,
        "upload_time": "2020-04-27T03:06:27",
        "upload_time_iso_8601": "2020-04-27T03:06:27.096029Z",
        "url": "https://files.pythonhosted.org/packages/e1/be/4579b160e9026503a4b149c9a26245954a574dd542a025e0e82f72a91584/pytopojson-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b596956bac00a06c5b3846afb3d7217b4ec187e4202403528916dbb72a9c431",
          "md5": "987782a64021e0f9d7738edbe5b91cd6",
          "sha256": "7e9cd05dcfda9d4714e864a7fe32e6c6a460c5a971d37d02f7e3874ae7697f06"
        },
        "downloads": -1,
        "filename": "pytopojson-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "987782a64021e0f9d7738edbe5b91cd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 45233,
        "upload_time": "2020-04-27T03:06:29",
        "upload_time_iso_8601": "2020-04-27T03:06:29.328863Z",
        "url": "https://files.pythonhosted.org/packages/9b/59/6956bac00a06c5b3846afb3d7217b4ec187e4202403528916dbb72a9c431/pytopojson-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30e3e8850b378700262205606e33e0c0ad2a307be9c09f8580953d16d2d4bcdd",
          "md5": "f2a6e48721ccd49cb6ec336ed99f7710",
          "sha256": "7690fbcbffa1fec4113106945290883eaca2c9ef2c1163fd369a95353b58ac9a"
        },
        "downloads": -1,
        "filename": "pytopojson-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2a6e48721ccd49cb6ec336ed99f7710",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 61521,
        "upload_time": "2021-01-16T02:38:44",
        "upload_time_iso_8601": "2021-01-16T02:38:44.834278Z",
        "url": "https://files.pythonhosted.org/packages/30/e3/e8850b378700262205606e33e0c0ad2a307be9c09f8580953d16d2d4bcdd/pytopojson-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed9aae1dc1e7c4cc35790e743704f849f39c102d9da195bfd3f9b32ef5ef7e15",
          "md5": "800b83fa9de5b5c55286e98d5fa62116",
          "sha256": "a513a6df739c297851e5363e544d2806f2cc8c617747b92f85768627effc5b2f"
        },
        "downloads": -1,
        "filename": "pytopojson-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "800b83fa9de5b5c55286e98d5fa62116",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 47408,
        "upload_time": "2021-01-16T02:38:47",
        "upload_time_iso_8601": "2021-01-16T02:38:47.009865Z",
        "url": "https://files.pythonhosted.org/packages/ed/9a/ae1dc1e7c4cc35790e743704f849f39c102d9da195bfd3f9b32ef5ef7e15/pytopojson-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "300e2e5efa6faf522a76d46e4e319bf4ebf7ff295aba3a9220ce4975ec50303f",
          "md5": "e23053251f81db866ff2b7417dc236f2",
          "sha256": "e0e6647f639d8a245243dfa6d3c6b583f7afcfe4d1fe9987bc7ff8c678d8f05b"
        },
        "downloads": -1,
        "filename": "pytopojson-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e23053251f81db866ff2b7417dc236f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 61725,
        "upload_time": "2021-01-22T01:51:12",
        "upload_time_iso_8601": "2021-01-22T01:51:12.004276Z",
        "url": "https://files.pythonhosted.org/packages/30/0e/2e5efa6faf522a76d46e4e319bf4ebf7ff295aba3a9220ce4975ec50303f/pytopojson-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d71a5ce4ce13e7b4248130743c4363a161334e1712d1a5d6a68d09dded3ad2d",
          "md5": "92a242d6291a674c4215e8c8427aff6f",
          "sha256": "af8558c6c854e486a887d5ca34ceccb6426e2f02b0cd7c6d152296f3bdbf4f40"
        },
        "downloads": -1,
        "filename": "pytopojson-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92a242d6291a674c4215e8c8427aff6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 47562,
        "upload_time": "2021-01-22T01:51:13",
        "upload_time_iso_8601": "2021-01-22T01:51:13.603050Z",
        "url": "https://files.pythonhosted.org/packages/8d/71/a5ce4ce13e7b4248130743c4363a161334e1712d1a5d6a68d09dded3ad2d/pytopojson-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ead626ed15bf1cde5b0609ec997d0ae1dc6e1c76bea8ef210f5a99f019d3ab3",
          "md5": "baf8f967dba54697cb74302fea89b492",
          "sha256": "1d137ecb3cfa9fe43d50e651b284b63f9442fcdc4145814795a3d9100f5f5837"
        },
        "downloads": -1,
        "filename": "pytopojson-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "baf8f967dba54697cb74302fea89b492",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.3",
        "size": 61731,
        "upload_time": "2022-02-25T20:01:33",
        "upload_time_iso_8601": "2022-02-25T20:01:33.694111Z",
        "url": "https://files.pythonhosted.org/packages/6e/ad/626ed15bf1cde5b0609ec997d0ae1dc6e1c76bea8ef210f5a99f019d3ab3/pytopojson-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cab79137e45038b46c16d63b01af408d6d025e7071f2ee5127c4dba99be39c5",
          "md5": "45f9db7bd72111a8facd99ca3ce04e78",
          "sha256": "cded2519f3da0c99ed84f0efffeac733329802a0ffe1b32ec2b11bb3527e6457"
        },
        "downloads": -1,
        "filename": "pytopojson-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "45f9db7bd72111a8facd99ca3ce04e78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.3",
        "size": 47490,
        "upload_time": "2022-02-25T20:01:36",
        "upload_time_iso_8601": "2022-02-25T20:01:36.484371Z",
        "url": "https://files.pythonhosted.org/packages/8c/ab/79137e45038b46c16d63b01af408d6d025e7071f2ee5127c4dba99be39c5/pytopojson-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ead626ed15bf1cde5b0609ec997d0ae1dc6e1c76bea8ef210f5a99f019d3ab3",
        "md5": "baf8f967dba54697cb74302fea89b492",
        "sha256": "1d137ecb3cfa9fe43d50e651b284b63f9442fcdc4145814795a3d9100f5f5837"
      },
      "downloads": -1,
      "filename": "pytopojson-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "baf8f967dba54697cb74302fea89b492",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.3",
      "size": 61731,
      "upload_time": "2022-02-25T20:01:33",
      "upload_time_iso_8601": "2022-02-25T20:01:33.694111Z",
      "url": "https://files.pythonhosted.org/packages/6e/ad/626ed15bf1cde5b0609ec997d0ae1dc6e1c76bea8ef210f5a99f019d3ab3/pytopojson-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cab79137e45038b46c16d63b01af408d6d025e7071f2ee5127c4dba99be39c5",
        "md5": "45f9db7bd72111a8facd99ca3ce04e78",
        "sha256": "cded2519f3da0c99ed84f0efffeac733329802a0ffe1b32ec2b11bb3527e6457"
      },
      "downloads": -1,
      "filename": "pytopojson-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "45f9db7bd72111a8facd99ca3ce04e78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.3",
      "size": 47490,
      "upload_time": "2022-02-25T20:01:36",
      "upload_time_iso_8601": "2022-02-25T20:01:36.484371Z",
      "url": "https://files.pythonhosted.org/packages/8c/ab/79137e45038b46c16d63b01af408d6d025e7071f2ee5127c4dba99be39c5/pytopojson-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}