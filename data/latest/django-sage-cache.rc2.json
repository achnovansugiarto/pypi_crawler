{
  "info": {
    "author": "Sage Team",
    "author_email": "mail@sageteam.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Sage Cache\n\n## What is django-sage-cache package?\n\ndjango-sage-cache is a great package for caching data in the Django framework. In this package, an attempt has been made to use both private and shared caching techniques. Note that data caching is done at the database level. This is to reduce the number of queries to the database. The database we used to cache the data in this framework is called Redis.\n\n### What is HTTP caching?\n\nCaching is a technique that stores a copy of a given resource and serves it back when requested. When a web cache has a requested resource in its store, it intercepts the request and returns its copy instead of re-downloading from the originating server. This achieves several goals: it eases the server's load that doesnâ€™t need to serve all clients itself, and it improves performance by being closer to the client, i.e., it takes less time to transmit the resource back.\n\n### What is Redis?\n\nRedis is an in-memory data structure store, used as a distributed, in-memory key-value database, cache, and message broker, with optional durability.\n\n##### The Latest version of [django-sage-cache](https://django-sage-cache.readthedocs.io/) documentation\n\n![SageTeam](https://github.com/sageteam-org/django-sage-painless/blob/develop/docs/images/tag_sage.png?raw=true \"SageTeam\")\n\n![PyPI release](https://img.shields.io/pypi/v/django-sage-cache \"django-sage-cache\")\n![Supported Python versions](https://img.shields.io/pypi/pyversions/django-sage-cache \"django-sage-cache\")\n![Supported Django versions](https://img.shields.io/pypi/djversions/django-sage-cache \"django-sage-cache\")\n![Documentation](https://img.shields.io/readthedocs/django-sage-cache \"django-sage-cache\")\n\n- [Project Detail](#project-detail)\n- [Git Rules](#git-rules)\n- [Get Started](#getting-started)\n- [Usage](#usage)\n- [Filter Backends](#filter-backend)\n- [Signals](#signals)\n- [Cache Methods](#cache-methods)\n- [Settings](#settings)\n\n## Project Detail\n\n- Language: Python > 3.5\n- Framework: Django > 3.1\n\n## Git Rules\n\nS.A.G.E. team Git Rules Policy is available here:\n\n- [S.A.G.E. Git Policy](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)\n\n## Getting Started\n\nFirst install the package using pip:\n\n```shell\n$ pip install django-sage-cache\n```\n\nThen add `sage_cache` to INSTALLED_APPS:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'sage_cache',\n    ...\n]\n```\n\nFor using cache support you need to config `redis server`:\n\n- ubuntu:\n```shell\n$ sudo apt install redis-server\n```\n\n- windows:\n\n[you can download redis server from here]((https://redis.io/download))\n\nThen add redis cache to django settings:\n\n```python\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": 'redis://localhost:6379'\n    }\n}\n```\n\n## Usage\n\nThere are multiple ways to use `sage_cache` in your project:\n\n1. For simple usage you can use Model Mixin:\n\n```python\n# models.py\nfrom sage_cache.mixins.model_cache import ModelCacheMixin\n\nclass Category(models.Model, ModelCacheMixin):\n    CACHE_KEY = 'category'  # set for cache (set cache with this key)\n    \n    title = models.CharField(max_length=255)\n    created = models.DateTimeField(auto_now_add=True)\n    modified = models.DateTimeField(auto_now=True)\n```\n\n```python\n# views.py\nclass CategoryViewset(ModelViewSet):\n    serializer_class = CategorySerializer\n    model_class = Category  # set for cache (its your model)\n    \n    def get_queryset(self):\n        return self.model_class.get_all_from_cache()  # get from cache instead of db\n```\n\n2. Use built-in decorators:\n\nYou can use built-in view decorators in DRF methods\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.viewsets import ModelViewSet\n\nfrom sage_cache.decorators.cache_queryset import cache_queryset_per_site\n\nclass CategoryViewset(ModelViewSet):\n    serializer_class = CategorySerializer\n    queryset = Category.objects.all()\n    model_class = Category  # set for cache\n\n    @cache_queryset_per_site()  # set for cache (per site caching)\n    def list(self, request, *args, **kwargs):\n        queryset = self.filter_queryset(self.get_queryset())\n\n        page = self.paginate_queryset(queryset)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n\n        serializer = self.get_serializer(queryset, many=True)\n        return Response(serializer.data)\n```\n\nlist of built-in decorators:\n\n- cache_queryset_per_site\n- cache_queryset_per_user\n- cache_page_per_site\n- cache_page_per_user\n\n3. You can also write your own functions:\n\n`sage_cache` provides some useful functions and tools for cache support, You can use them to create cache apps\n\nlist of tools you can access:\n\n- services:\n    - cache_funcs:\n        - get_all_from_cache\n        - filter_from_cache\n        - filter_related_from_cache\n        - clear_cache_for_users\n        - clear_cache_for_model\n        - clear_model_cache_for_user\n    - timeout_funcs:\n        - get_timeout_for_user\n        - default_timeout\n    - view_funcs:\n        - get_object\n\n## Filter Backend\n\nIn cached views use these Filter/Search backends:\n\n1. CacheFilterBackend\n2. CacheSearchBackend\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.viewsets import ModelViewSet\n\nfrom sage_cache.decorators.cache_queryset import cache_queryset_per_site\nfrom sage_cache.filters.backend import CacheFilterBackend, CacheSearchBackend\n\nclass CategoryViewset(ModelViewSet):\n    serializer_class = CategorySerializer\n    queryset = Category.objects.all()\n    model_class = Category  # set for cache\n    filter_backends = (CacheFilterBackend, CacheSearchBackend)  # cache backends\n\n    @cache_queryset_per_site()  # set for cache (per site caching)\n    def list(self, request, *args, **kwargs):\n        queryset = self.filter_queryset(self.get_queryset())\n\n        page = self.paginate_queryset(queryset)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n\n        serializer = self.get_serializer(queryset, many=True)\n        return Response(serializer.data)\n```\n\n## Signals\n\nWhen you set cache it will not update until timeout and expiration, In some situations you need to update cache when your data is updated in main db, For this reason we use Signals to update/remove cache.\n\n- A simple example of update cache signal\n\n```python\nfrom sage_cache.services.cache_funcs import clear_cache_for_model\n\n@receiver(post_save, sender=Category)\ndef update_category(sender, instance, created, **kwargs):\n    clear_cache_for_model(sender.CACHE_KEY)  # remove all cache for updated model\n```\n\nList of some useful functions for Cache Updating:\n\n- clear_cache_for_users\n- clear_cache_for_model\n- clear_model_cache_for_user\n\n## Cache Methods\n\nYou can cache your project in 2 ways:\n\n1. per site\n2. per user\n\nIn per site mode you set just 1 cache key for each model in redis, And it is same for all users, But in per user method each user has unique cache keys.\n\nFor example cache key for `Category` model:\n\nmode (per site): \":category\"\n\nmode (per user): \":category-mrhnz13@gmail.com\"\n\nIn per user mode you can set multiple timeouts for each user.\n\n## Settings\n```python\nCACHE_QUERYSET_ENABLED = True  # Is cache queryset enabled\nCACHE_PAGE_ENABLED = True  # Is cache page enabled\nCACHE_TIMEOUT = 60  # cache default timeout in seconds\nCACHE_PER_USER_UNIQUE_ATTR = 'username'  # unique field in User\nCACHE_PER_USER_TIMEOUT_FUNC = 'sage_cache.services.timeout_funcs.default_timeout'  # in per_user mode timeout will calculate by this function\nCACHE_PAGE_PER_SITE_PREFIX = 'sage_cache_site'  # cache page key prefix\n```\n\n\n## Team\n| [<img src=\"https://github.com/sageteam-org/django-sage-painless/blob/develop/docs/images/sepehr.jpeg?raw=true\" width=\"230px\" height=\"230px\" alt=\"Sepehr Akbarzadeh\">](https://github.com/sepehr-akbarzadeh) | [<img src=\"https://github.com/sageteam-org/django-sage-painless/blob/develop/docs/images/mehran.png?raw=true\" width=\"225px\" height=\"340px\" alt=\"Mehran Rahmanzadeh\">](https://github.com/mrhnz) |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Sepehr Akbarazadeh Maintainer](https://github.com/sepehr-akbarzadeh)                                                                                                             | [Mehran Rahmanzadeh Maintainer](https://github.com/mrhnz)                                                                                                       |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/sageteam-org/django-sage-cache/archive/refs/tags/0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sageteam-org/django-sage-cache",
    "keywords": "django,python,cache,SQL,queryset",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sage-cache",
    "package_url": "https://pypi.org/project/django-sage-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-sage-cache/",
    "project_urls": {
      "Download": "https://github.com/sageteam-org/django-sage-cache/archive/refs/tags/0.1.0.tar.gz",
      "Homepage": "https://github.com/sageteam-org/django-sage-cache"
    },
    "release_url": "https://pypi.org/project/django-sage-cache/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "queryset caching for Django",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11012506,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6987b5869731d350c3c0553d774eb272911118c622f6da42e349d9d0cd6697c0",
          "md5": "00d817a561bb8f6c9d02f562782002b1",
          "sha256": "d5e6a0a712c13c0e6dad7811016bfe0a20edb4a7f874d659010f3b78407b6af2"
        },
        "downloads": -1,
        "filename": "django-sage-cache-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00d817a561bb8f6c9d02f562782002b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 29131,
        "upload_time": "2021-07-27T05:01:51",
        "upload_time_iso_8601": "2021-07-27T05:01:51.960164Z",
        "url": "https://files.pythonhosted.org/packages/69/87/b5869731d350c3c0553d774eb272911118c622f6da42e349d9d0cd6697c0/django-sage-cache-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "998fdbb20708232acca76bd69541ee31d7fb417e5b496bb2ff4ca2ad9715140f",
          "md5": "93f434786ec35bb5adc9b8545b075744",
          "sha256": "c7dbeb5254dd5e2191181fb9d3eb21c4b9369cf60a6cf8e0c99258871f12a03c"
        },
        "downloads": -1,
        "filename": "django-sage-cache-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "93f434786ec35bb5adc9b8545b075744",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 29537,
        "upload_time": "2021-07-27T05:05:39",
        "upload_time_iso_8601": "2021-07-27T05:05:39.744055Z",
        "url": "https://files.pythonhosted.org/packages/99/8f/dbb20708232acca76bd69541ee31d7fb417e5b496bb2ff4ca2ad9715140f/django-sage-cache-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "998fdbb20708232acca76bd69541ee31d7fb417e5b496bb2ff4ca2ad9715140f",
        "md5": "93f434786ec35bb5adc9b8545b075744",
        "sha256": "c7dbeb5254dd5e2191181fb9d3eb21c4b9369cf60a6cf8e0c99258871f12a03c"
      },
      "downloads": -1,
      "filename": "django-sage-cache-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "93f434786ec35bb5adc9b8545b075744",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 29537,
      "upload_time": "2021-07-27T05:05:39",
      "upload_time_iso_8601": "2021-07-27T05:05:39.744055Z",
      "url": "https://files.pythonhosted.org/packages/99/8f/dbb20708232acca76bd69541ee31d7fb417e5b496bb2ff4ca2ad9715140f/django-sage-cache-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}