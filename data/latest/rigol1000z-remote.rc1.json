{
  "info": {
    "author": "Alexander Zettler(@AlexZettler), @jeanyvesb9, @jtambasco",
    "author_email": "azettler@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": "# Rigol1000z\nPython library to interface with Rigol DS1000z series oscilloscopes.\n\nThe interface uses the VISA communication protocol implemented in (PyVISA) and supports both USB and Ethernet.\n\n## Platforms\n* Windows 10 - Tested\n* ArchLinux - when forked, [@jeanyvesb9](https://github.com/jeanyvesb9/Rigol1000z) stated his version worked with Arch, so I suspect compatibility.\n\n## Dependencies\n* [python3.7](https://www.python.org/downloads/release)+ Python version as f-strings are used in the library\n* [numpy](https://github.com/numpy/numpy) Library for efficient storage and processing of arrays\n* [pyvisa](https://github.com/pyvisa/pyvisa) Visa communication protocol\n* [tqdm](https://github.com/tqdm/tqdm) Command line progress bar\n\n## Recommended\n* [pipenv](https://pypi.org/project/pipenv/)\nmakes installation of requirements easier and separates python environments reducing the probability of package dependency conflicts.\nTo install run the following commands from your working directory \n\n```bash\npip install pipenv\npipenv install\n```\n\n## Example\n```python\nfrom Rigol1000z import Rigol1000z\nfrom time import sleep\nfrom Rigol1000z.constants import *\n\n# Create oscilloscope interface using with statement!\nwith Rigol1000z() as osc:\n    osc.ieee488.reset()  # start with known state by restoring default settings\n\n    # osc.autoscale()  # Autoscale the scope\n\n    # Set the horizontal timebase\n    osc.timebase.mode = ETimebaseMode.Main  # Set the timebase mode to main (normal operation)\n    osc.timebase.scale = 10 * 10 ** -6  # Set the timebase scale\n\n    # Go through each channel\n    for i in range(1, 5):\n        osc[i].enabled = True  # Enable the channel\n        osc[i].scale_v = 1000e-3  # Change voltage range of the channel to 1.0V/div.\n\n    osc[2].invert = True  # Invert the channel\n\n    osc.run()  # Run the scope if not already\n    sleep(0.5)  # Let scope collect the waveform\n\n    osc.stop()  # Stop the scope in order to collect data.\n\n    # Take a screenshot of the scope's display\n    osc.get_screenshot('./screenshot.png')\n\n    # Collect and save waveform data from all enabled channels\n    tb, data = osc.get_data(\n        channels=(1,),\n        mode=EWaveformMode.Raw,\n        filename='./channels.csv'\n    )\n\n    osc.run()  # Move back to run mode when data collection is complete\n```\n\n## Acknowledgements\nBased on the original work by [@jtambasco](https://github.com/jtambasco/RigolOscilloscope) which was further developed by [@jeanyvesb9](https://github.com/jeanyvesb9/Rigol1000z).\n\nI have heavily modified the work to be closer to a full implementation of a Rigol1000z library.\n\nMy goal for the rewrite has been to make the device as easy as possible to control by:\n* Type hinting function parameters, and return values.\n* Developing a command hierarchy as it is found in the Rigol programming manual and adding docstrings describing the effect of the function.\n* Implementing most set/get commands as properties and related setters for a more organic device interface.\n* Defining discrete string constants separately so that autocompletion of constants can be preformed from the corresponding enumeration class\n\n## Feedback/Contributing\nI began this project to create the best library to control the Rigol1000z series of scopes.\nThis is a huge project and I suspect there will be issues with some commands.\n\nIf any issues are discovered, please submit an issue to the [issues page](https://github.com/AlexZettler/Rigol1000z/issues)\nwith the oscilloscope model you are using, and code you were running. \n\nFeedback will keep this project growing and I encourage all suggestions.\n\n## Contributing\nThere are menus that aren't yet implemented completely. If you would like to implement one of these menus feel free to submit a pull request.\n\nIf you are having an issue and want to fix it, please create the issue first with the model and code so that problems are addressed and tracked properly :)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AlexZettler/Rigol1000z",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Rigol1000z-remote",
    "package_url": "https://pypi.org/project/Rigol1000z-remote/",
    "platform": "",
    "project_url": "https://pypi.org/project/Rigol1000z-remote/",
    "project_urls": {
      "Homepage": "https://github.com/AlexZettler/Rigol1000z"
    },
    "release_url": "https://pypi.org/project/Rigol1000z-remote/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python VISA (USB and Ethernet) library for interface with Rigol DS1000z series oscilloscopes.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7901697,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9055de913b939cf183c1b5db81cc4bbc53a205ac270408bc401c2efc6f80bb64",
          "md5": "3ec73ea375d41f4b39f11f5a0a6acc7c",
          "sha256": "90da809b12ef37bcea07861bcd90a204eb3b34ea3afa3eb5f930a7fe368d12ff"
        },
        "downloads": -1,
        "filename": "Rigol1000z-remote-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ec73ea375d41f4b39f11f5a0a6acc7c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20233,
        "upload_time": "2020-08-06T19:44:06",
        "upload_time_iso_8601": "2020-08-06T19:44:06.908701Z",
        "url": "https://files.pythonhosted.org/packages/90/55/de913b939cf183c1b5db81cc4bbc53a205ac270408bc401c2efc6f80bb64/Rigol1000z-remote-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9055de913b939cf183c1b5db81cc4bbc53a205ac270408bc401c2efc6f80bb64",
        "md5": "3ec73ea375d41f4b39f11f5a0a6acc7c",
        "sha256": "90da809b12ef37bcea07861bcd90a204eb3b34ea3afa3eb5f930a7fe368d12ff"
      },
      "downloads": -1,
      "filename": "Rigol1000z-remote-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3ec73ea375d41f4b39f11f5a0a6acc7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20233,
      "upload_time": "2020-08-06T19:44:06",
      "upload_time_iso_8601": "2020-08-06T19:44:06.908701Z",
      "url": "https://files.pythonhosted.org/packages/90/55/de913b939cf183c1b5db81cc4bbc53a205ac270408bc401c2efc6f80bb64/Rigol1000z-remote-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}