{
  "info": {
    "author": "Redman, P., Zatorska, M., Pawlowski, A., Szulc, D., Majchrowska, S., Tarnowski, K.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![](https://github.com/WUST-FOG/gnlse-python/workflows/CI/badge.svg)\r\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6495720.svg)](https://doi.org/10.5281/zenodo.6495720)\r\n\r\n# GNLSE: Nonlinear optics modeling tool for optical fibers\r\n\r\n`gnlse` is a Python set of scripts for solving\r\nGeneralized Nonlinear Schrodringer Equation. It is one of the WUST-FOG students\r\nprojects developed by [Fiber Optics Group, WUST](http://www.fog.pwr.edu.pl/).\r\n\r\nComplete documentation is available at\r\n[https://gnlse.readthedocs.io](https://gnlse.readthedocs.io).\r\n\r\n## Installation\r\n\r\n### Using pip\r\n\r\n```\r\npip install gnlse\r\n```\r\n\r\n### From scratch\r\n\r\n1. Create a virtual environment with `python -m venv gnlse` or using `conda`.\r\n2. Activate it with `. gnlse/bin/activate`.\r\n3. Clone this repository `git clone https://github.com/WUST-FOG/gnlse-python.git`\r\n4. Install gnlse package `pip install .` (or `pip install -v -e .` for develop mode) or set `PYTHONPATH` enviroment variable\r\n\r\n```bash\r\npython -m venv gnlse\r\n. gnlse/bin/activate\r\ngit clone https://github.com/WUST-FOG/gnlse-python.git\r\ncd gnlse-python\r\npip install .\r\n```\r\n\r\n## Usage\r\n\r\nWe provided some examples in `examples` subdirectory. They can be run by typing \r\nname of the script without any arguments.\r\n\r\nExample:\r\n\r\n```bash\r\ncd gnlse-python/examples\r\n\r\npython test_Dudley.py\r\n```\r\n\r\nAnd you expect to visualise supercontinuum generation process in use of 3 types\r\n of pulses (simulation similar to Fig.3 of Dudley et. al, RMP 78 1135 (2006)):\r\n\r\n![supercontinuum](https://raw.githubusercontent.com/WUST-FOG/gnlse-python/main/data/supercontinuum_3pulses.png)\r\n\r\n### Major features\r\n\r\n- **Modular Design**\r\n\r\n  Main core of gnlse module is derived from the RK4IP matlab script\r\n  written by J.C.Travers, H. Frosz and J.M. Dudley\r\n  that is provided in \"Supercontinuum Generation in Optical Fibers\",\r\n  edited by J. M. Dudley and J. R. Taylor (Cambridge 2010).\r\n  The toolbox prepares integration using SCIPYs ode solvers (adaptive step size).\r\n  We decompose the solver framework into different components\r\n  and one can easily construct a customized simulations\r\n  by accounting different physical phenomena, ie. self stepening, Raman response.\r\n  \r\n- **Raman response models**\r\n\r\n  We implement three different raman response functions:\r\n    - 'blowwood':   Blow and D. Wood, IEEE J. of Quant. Elec., vol. 25, no. 12, pp. 2665â€“2673, Dec. 1989,\r\n    - 'linagrawal': Lin and Agrawal, Opt. Lett., vol. 31, no. 21, pp. 3086â€“3088, Nov. 2006,\r\n    - 'hollenbeck': Hollenbeck and Cantrell, J. Opt. Soc. Am. B, vol. 19, no. 12, Dec. 2002.\r\n\r\n- **Nonlinearity**\r\n\r\n  We implement the possibility to account effective mode area's dependence on frequency:\r\n    - provide float value for gamma (effective nonlinear coefficient)\r\n    - 'NonlinearityFromEffectiveArea': introduce effective mode area's dependence on frequency (J. Laegsgaard, Opt. Express, vol. 15, no. 24, pp. 16110-16123, Nov. 2007).\r\n\r\n- **Dispersion operator**\r\n\r\n  We implement two version of dispersion operator:\r\n    - dispersion calculated from Taylor expansion,\r\n    - dispersion calculated from effective refractive indicies.\r\n\r\n- **Available demos**\r\n\r\n  We prepare few examples in `examples` subdirectory:\r\n    - plot_input_pulse.py: plots envelope of different pulse shapes,\r\n    - plot_Raman_response.py: plots different Raman in temporal domain,\r\n    - test_3rd_order_soliton.py: evolution of the spectral and temporal characteristics of the 3rd order soliton,\r\n    - test_dispersion.py: example of supercontinuum generation using different dispersion operators,\r\n    - test_nonlinearity.py: example of supercontinuum generation using different GNLSE and M-GNLSE (take into account mode profile dispersion),\r\n    - test_Dudley.py: example of supercontinuum generation with three types of input pulse,\r\n    - test_gvd.py: example of pulse broadening due to group velocity dispersion,\r\n    - test_import_export.py: example of saving file with `.mat` extension,\r\n    - test_raman.py: example of soliton fision for diffrent raman response functions,\r\n    - test_spm.py: example of self phase modulation,\r\n    - test_spm+gvd.py: example of generation of 1st order soliton.\r\n\r\n## Release History\r\n\r\nv2.0.0 was released in 26/4/2022.\r\nThe main branch works with **python 3.7**.\r\n\r\n* **2.0.0 -> Apr 26th, 2022**\r\n    * CHANGE: Code refactor - rename envelopes module\r\n    * FIX: Fixed extrapolation for nonlinear coefficient\r\n* **1.1.3 -> Feb 13th, 2022**\r\n    * FIX: Shift scalling data for interpolated dispersion\r\n* **1.1.2 -> Aug 30th, 2021**\r\n    * ADD: Continious wave envelope\r\n    * FIX: Shift scalling data for nonlinear coefficient\r\n* **1.1.1 -> Aug 28th, 2021**\r\n    * CHANGE: Minor bug fix with scaling\r\n    * CHANGE: Few minor changes in the documentation\r\n* **1.1.0 -> Aug 21st, 2021**\r\n    * Modified-GNLSE extension\r\n    * CHANGE: Code refactor - relocate GNLSE's attribiutes setting into constructor\r\n    * ADD: Possibility to take into account the effective mode area's dependence on frequency\r\n* **1.0.0 -> Aug 13th, 2020**\r\n    * The first proper release\r\n    * CHANGE: Complete documentation and code\r\n\r\n## Authors\r\n\r\n- [Pawel Redman](https://redman.xyz/)\r\n- [Magda Zatorska](https://github.com/magdazatorska)\r\n- [Adam Pawlowski](https://github.com/adampawl)\r\n- [Daniel Szulc](http://szulc.xyz/)\r\n- [Sylwia Majchrowska](https://majsylw.netlify.app/)\r\n- [Karol Tarnowski](http://www.if.pwr.wroc.pl/~tarnowski/)\r\n\r\n## Acknowledgement\r\n\r\n*gnlse-python* is an open source project that is contributed by researchers, \r\nengineers, and students from Wroclaw University of Science and Technology \r\nas a part of Fiber Optics Group's nonlinear simulations projects. \r\nThe python code based on MATLAB code published in\r\n'Supercontinuum Generation in Optical Fibers'\r\nby J. M. Dudley and J. R. Taylor, available at \r\n[http://scgbook.info/](http://scgbook.info/).\r\n\r\n## Citation\r\n\r\nIf you find this code useful in your research, please consider [citing](https://arxiv.org/abs/2110.00298):\r\n\r\n```\r\n@misc{redman2021gnlsepython,\r\n      title={gnlse-python: Open Source Software to Simulate\r\n             Nonlinear Light Propagation In Optical Fibers}, \r\n      author={Pawel Redman and Magdalena Zatorska and Adam Pawlowski\r\n              and Daniel Szulc and Sylwia Majchrowska and Karol Tarnowski},\r\n      year={2021},\r\n      eprint={2110.00298},\r\n      archivePrefix={arXiv},\r\n      primaryClass={physics.optics}\r\n}\r\n```\r\n\r\n## Contributing\r\nPull requests are welcome. \r\nFor major changes, please open an issue first to discuss \r\nwhat you would like to change.\r\n\r\nPlease make sure to update example tests as appropriate.\r\n\r\n## License\r\n[MIT](https://choosealicense.com/licenses/mit/)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WUST-FOG/gnlse-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gnlse",
    "package_url": "https://pypi.org/project/gnlse/",
    "platform": null,
    "project_url": "https://pypi.org/project/gnlse/",
    "project_urls": {
      "Homepage": "https://github.com/WUST-FOG/gnlse-python"
    },
    "release_url": "https://pypi.org/project/gnlse/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "gnlse-python is a Python set of scripts for solving Generalized Nonlinear Schrodringer Equation",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13638900,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ffb8993e0d186629b6e220a93520312135cd8634f84a7fa5ecb0dbc047d8f09",
          "md5": "cb9b9eb071b7d953455f466ceb904426",
          "sha256": "8a43bf1df7b387c5574c326c3b2074442c4a96248000410d6c197c6fcb738f01"
        },
        "downloads": -1,
        "filename": "gnlse-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb9b9eb071b7d953455f466ceb904426",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16125,
        "upload_time": "2022-04-27T12:46:18",
        "upload_time_iso_8601": "2022-04-27T12:46:18.026846Z",
        "url": "https://files.pythonhosted.org/packages/4f/fb/8993e0d186629b6e220a93520312135cd8634f84a7fa5ecb0dbc047d8f09/gnlse-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ffb8993e0d186629b6e220a93520312135cd8634f84a7fa5ecb0dbc047d8f09",
        "md5": "cb9b9eb071b7d953455f466ceb904426",
        "sha256": "8a43bf1df7b387c5574c326c3b2074442c4a96248000410d6c197c6fcb738f01"
      },
      "downloads": -1,
      "filename": "gnlse-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cb9b9eb071b7d953455f466ceb904426",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16125,
      "upload_time": "2022-04-27T12:46:18",
      "upload_time_iso_8601": "2022-04-27T12:46:18.026846Z",
      "url": "https://files.pythonhosted.org/packages/4f/fb/8993e0d186629b6e220a93520312135cd8634f84a7fa5ecb0dbc047d8f09/gnlse-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}