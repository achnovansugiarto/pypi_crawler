{
  "info": {
    "author": "Dana Powers",
    "author_email": "dana.powers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Kafka Python client\n------------------------\n\n.. image:: https://img.shields.io/badge/kafka-2.3%2C%202.2%2C%202.1%2C%202.0%2C%201.1%2C%201.0%2C%200.11%2C%200.10%2C%200.9%2C%200.8-brightgreen.svg\n    :target: https://kafka-python.readthedocs.io/compatibility.html\n.. image:: https://img.shields.io/pypi/pyversions/kafka-python.svg\n    :target: https://pypi.python.org/pypi/kafka-python\n.. image:: https://coveralls.io/repos/dpkp/kafka-python/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/dpkp/kafka-python?branch=master\n.. image:: https://travis-ci.org/dpkp/kafka-python.svg?branch=master\n    :target: https://travis-ci.org/dpkp/kafka-python\n.. image:: https://img.shields.io/badge/license-Apache%202-blue.svg\n    :target: https://github.com/dpkp/kafka-python/blob/master/LICENSE\n\nPython client for the Apache Kafka distributed stream processing system.\nkafka-python is designed to function much like the official java client, with a\nsprinkling of pythonic interfaces (e.g., consumer iterators).\n\nkafka-python is best used with newer brokers (0.9+), but is backwards-compatible with\nolder versions (to 0.8.0). Some features will only be enabled on newer brokers.\nFor example, fully coordinated consumer groups -- i.e., dynamic partition\nassignment to multiple consumers in the same group -- requires use of 0.9+ kafka\nbrokers. Supporting this feature for earlier broker releases would require\nwriting and maintaining custom leadership election and membership / health\ncheck code (perhaps using zookeeper or consul). For older brokers, you can\nachieve something similar by manually assigning different partitions to each\nconsumer instance with config management tools like chef, ansible, etc. This\napproach will work fine, though it does not support rebalancing on failures.\nSee <https://kafka-python.readthedocs.io/en/master/compatibility.html>\nfor more details.\n\nPlease note that the master branch may contain unreleased features. For release\ndocumentation, please see readthedocs and/or python's inline help.\n\n>>> pip install kafka-python\n\nKafkaConsumer\n*************\n\nKafkaConsumer is a high-level message consumer, intended to operate as similarly\nas possible to the official java client. Full support for coordinated\nconsumer groups requires use of kafka brokers that support the Group APIs: kafka v0.9+.\n\nSee <https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html>\nfor API and configuration details.\n\nThe consumer iterator returns ConsumerRecords, which are simple namedtuples\nthat expose basic message attributes: topic, partition, offset, key, and value:\n\n>>> from kafka import KafkaConsumer\n>>> consumer = KafkaConsumer('my_favorite_topic')\n>>> for msg in consumer:\n...     print (msg)\n\n>>> # join a consumer group for dynamic partition assignment and offset commits\n>>> from kafka import KafkaConsumer\n>>> consumer = KafkaConsumer('my_favorite_topic', group_id='my_favorite_group')\n>>> for msg in consumer:\n...     print (msg)\n\n>>> # manually assign the partition list for the consumer\n>>> from kafka import TopicPartition\n>>> consumer = KafkaConsumer(bootstrap_servers='localhost:1234')\n>>> consumer.assign([TopicPartition('foobar', 2)])\n>>> msg = next(consumer)\n\n>>> # Deserialize msgpack-encoded values\n>>> consumer = KafkaConsumer(value_deserializer=msgpack.loads)\n>>> consumer.subscribe(['msgpackfoo'])\n>>> for msg in consumer:\n...     assert isinstance(msg.value, dict)\n\n>>> # Access record headers. The returned value is a list of tuples\n>>> # with str, bytes for key and value\n>>> for msg in consumer:\n...     print (msg.headers)\n\n>>> # Get consumer metrics\n>>> metrics = consumer.metrics()\n\nKafkaProducer\n*************\n\nKafkaProducer is a high-level, asynchronous message producer. The class is\nintended to operate as similarly as possible to the official java client.\nSee <https://kafka-python.readthedocs.io/en/master/apidoc/KafkaProducer.html>\nfor more details.\n\n>>> from kafka import KafkaProducer\n>>> producer = KafkaProducer(bootstrap_servers='localhost:1234')\n>>> for _ in range(100):\n...     producer.send('foobar', b'some_message_bytes')\n\n>>> # Block until a single message is sent (or timeout)\n>>> future = producer.send('foobar', b'another_message')\n>>> result = future.get(timeout=60)\n\n>>> # Block until all pending messages are at least put on the network\n>>> # NOTE: This does not guarantee delivery or success! It is really\n>>> # only useful if you configure internal batching using linger_ms\n>>> producer.flush()\n\n>>> # Use a key for hashed-partitioning\n>>> producer.send('foobar', key=b'foo', value=b'bar')\n\n>>> # Serialize json messages\n>>> import json\n>>> producer = KafkaProducer(value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n>>> producer.send('fizzbuzz', {'foo': 'bar'})\n\n>>> # Serialize string keys\n>>> producer = KafkaProducer(key_serializer=str.encode)\n>>> producer.send('flipflap', key='ping', value=b'1234')\n\n>>> # Compress messages\n>>> producer = KafkaProducer(compression_type='gzip')\n>>> for i in range(1000):\n...     producer.send('foobar', b'msg %d' % i)\n\n>>> # Include record headers. The format is list of tuples with string key\n>>> # and bytes value.\n>>> producer.send('foobar', value=b'c29tZSB2YWx1ZQ==', headers=[('content-encoding', b'base64')])\n\n>>> # Get producer performance metrics\n>>> metrics = producer.metrics()\n\nThread safety\n*************\n\nThe KafkaProducer can be used across threads without issue, unlike the\nKafkaConsumer which cannot.\n\nWhile it is possible to use the KafkaConsumer in a thread-local manner,\nmultiprocessing is recommended.\n\nCompression\n***********\n\nkafka-python supports gzip compression/decompression natively. To produce or consume lz4\ncompressed messages, you should install python-lz4 (pip install lz4).\nTo enable snappy compression/decompression install python-snappy (also requires snappy library).\nSee <https://kafka-python.readthedocs.io/en/master/install.html#optional-snappy-install>\nfor more information.\n\nProtocol\n********\n\nA secondary goal of kafka-python is to provide an easy-to-use protocol layer\nfor interacting with kafka brokers via the python repl. This is useful for\ntesting, probing, and general experimentation. The protocol support is\nleveraged to enable a KafkaClient.check_version() method that\nprobes a kafka broker and attempts to identify which version it is running\n(0.8.0 to 2.3+).\n\nLow-level\n*********\n\nLegacy support is maintained for low-level consumer and producer classes,\nSimpleConsumer and SimpleProducer. See\n<https://kafka-python.readthedocs.io/en/master/simple.html?highlight=SimpleProducer> for API details.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dpkp/kafka-python",
    "keywords": "apache kafka",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ns-kafka-python",
    "package_url": "https://pypi.org/project/ns-kafka-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/ns-kafka-python/",
    "project_urls": {
      "Homepage": "https://github.com/dpkp/kafka-python"
    },
    "release_url": "https://pypi.org/project/ns-kafka-python/1.4.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pure Python client for Apache Kafka",
    "version": "1.4.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8290578,
  "releases": {
    "1.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d806b3bdea09a575a28b46c9bef766fdf0640166bb010e161ee35c533e961a5",
          "md5": "b2ad53d6d2b9b4339aa9aa09cb7b9760",
          "sha256": "a0419d0326e2e61d5f5b4ac72e84ca0002f6a043c974289147ad2872971f28ba"
        },
        "downloads": -1,
        "filename": "ns_kafka_python-1.4.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2ad53d6d2b9b4339aa9aa09cb7b9760",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 266221,
        "upload_time": "2020-09-28T16:41:49",
        "upload_time_iso_8601": "2020-09-28T16:41:49.781375Z",
        "url": "https://files.pythonhosted.org/packages/7d/80/6b3bdea09a575a28b46c9bef766fdf0640166bb010e161ee35c533e961a5/ns_kafka_python-1.4.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86508c3ef1492ff8644552c3e7371610796939689ed56f71e3502fd704099350",
          "md5": "8396df04ba7350c28f3686cc373657da",
          "sha256": "3886c65496cd997095f6a3a058f6cc7dd95138bfa9f1acabd769250184ca51c9"
        },
        "downloads": -1,
        "filename": "ns-kafka-python-1.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8396df04ba7350c28f3686cc373657da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 291135,
        "upload_time": "2020-09-28T16:41:53",
        "upload_time_iso_8601": "2020-09-28T16:41:53.964886Z",
        "url": "https://files.pythonhosted.org/packages/86/50/8c3ef1492ff8644552c3e7371610796939689ed56f71e3502fd704099350/ns-kafka-python-1.4.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d806b3bdea09a575a28b46c9bef766fdf0640166bb010e161ee35c533e961a5",
        "md5": "b2ad53d6d2b9b4339aa9aa09cb7b9760",
        "sha256": "a0419d0326e2e61d5f5b4ac72e84ca0002f6a043c974289147ad2872971f28ba"
      },
      "downloads": -1,
      "filename": "ns_kafka_python-1.4.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2ad53d6d2b9b4339aa9aa09cb7b9760",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 266221,
      "upload_time": "2020-09-28T16:41:49",
      "upload_time_iso_8601": "2020-09-28T16:41:49.781375Z",
      "url": "https://files.pythonhosted.org/packages/7d/80/6b3bdea09a575a28b46c9bef766fdf0640166bb010e161ee35c533e961a5/ns_kafka_python-1.4.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86508c3ef1492ff8644552c3e7371610796939689ed56f71e3502fd704099350",
        "md5": "8396df04ba7350c28f3686cc373657da",
        "sha256": "3886c65496cd997095f6a3a058f6cc7dd95138bfa9f1acabd769250184ca51c9"
      },
      "downloads": -1,
      "filename": "ns-kafka-python-1.4.7.tar.gz",
      "has_sig": false,
      "md5_digest": "8396df04ba7350c28f3686cc373657da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 291135,
      "upload_time": "2020-09-28T16:41:53",
      "upload_time_iso_8601": "2020-09-28T16:41:53.964886Z",
      "url": "https://files.pythonhosted.org/packages/86/50/8c3ef1492ff8644552c3e7371610796939689ed56f71e3502fd704099350/ns-kafka-python-1.4.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}