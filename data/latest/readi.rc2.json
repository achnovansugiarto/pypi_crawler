{
  "info": {
    "author": "Bea Steers",
    "author_email": "bea.steers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# readi Collections\nDead simple class registration.\n\nOften I find myself trying to implement generic class representations and then extending them to provide many different functional variants. I then want to be able to access those variants in a simple, automatic way, without having to write \"switch-case\" type class selection strategies.\n\nThis allows you to register classes at instantiation time and have them accessible using a simple dict interface, with some nice helper methods :)\n\n## Install\n\n```bash\npip install readi\n```\n\n## Usage\n\n```python\n# __init__.py\nimport readi\n# this is just a dictionary with some fancy bits\ncollection = readi.Collection(entrypoints='myentrypoint')\n```\n```python\n# setup.py\n# this can allow other modules to register classes.\nsetuptools.setup(\n    ...\n    entry_points={'myentrypoint': ['C = module.for.thisclass:SomeClass']}\n)\n```\n```python\n# myclasses.py\n# then just use it in your class\nfrom . import collection\n\n@collection.register\nclass A:\n    pass\n\nclass B:\n    pass\n\nclass B1(B):\n    pass\n\nclass B2(B):\n    pass\n\ncollection.register_subclasses(B, include=True)\n\n# they're all available in the collection dictionary.\nassert set(collection) == {'a', 'b', 'b1', 'b2', 'c'}\n\nclass D(B1): # works for nested subclasses\n    pass\n\ncollection.refresh_subclasses() # can gather new subclasses\nassert set(collection) == {'a', 'b', 'b1', 'b2', 'c', 'd'}\n```\n```python\n# __main__.py\n# now to see how they're used.\nfrom . import collection\n\ndef main(**kw):\n    processors = collection.gather(**kw)\n\n    for data in data_generator():\n        for func in processors: # assuming we defined __call__\n            func(data)\n\nmain(fs=48000, channels=4, b1=False, b2=dict(nfft=2048))\n```\n\nDoing this will result in a processor list that looks like this:\n```python\nprocessors = [\n    A(fs=48000, channels=4),\n    B(fs=48000, channels=4),\n    # B1 is omitted since it was set as False\n    B2(fs=48000, channels=4, nfft=2048),\n    C(fs=48000, channels=4),\n    D(fs=48000, channels=4),\n]\n```\n\nThis is used if you have a bank of processors that you want to run and you want them to be enabled/disabled using keyword arguments.\n\nAnother use case is: you only need to select a single registered class. This is done very simply:\n```python\n# __main__.py\n# now to see how they're used.\nfrom . import collection\n\ndef main(proc_type='b', **kw):\n    processor = collection.getone(proc_type, **kw)\n\n    for data in data_generator():\n        processor(data)\n\nmain(fs=48000, channels=4, proc_type='b2')\n\n```\n\n## Notes\n - There is nothing stopping you from adding things that return non function values (i.e. lists).\n\n\n```python\n@collection.register\ndef reds(saturation=92):\n    c = '#FF0000'\n    return [c] + calculate_colors(c, saturation)\n\n@collection.register\ndef blues(saturation=92):\n    c = '#0000FF'\n    return [c] + calculate_colors(c, saturation)\n\n@collection.register\ndef greens(saturation=92):\n    c = '#00FF00'\n    return [c] + calculate_colors(c, saturation)\n\ncolors = collection.gather(saturation=120, greens=False)\n# colors = [\n#     ['#FF0000', ...], # reds\n#     ['#0000FF', ...], # blues\n# ]\n```\n\n## TODO",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beasteers/readi",
    "keywords": "simple class function registration entrypoints setup.py register collection",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "readi",
    "package_url": "https://pypi.org/project/readi/",
    "platform": "",
    "project_url": "https://pypi.org/project/readi/",
    "project_urls": {
      "Homepage": "https://github.com/beasteers/readi"
    },
    "release_url": "https://pypi.org/project/readi/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Dead simple class/function registration.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7237511,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab065248df58bea97fbc55c0bf1996a0ad41378d0313ddb9c923821295687edd",
          "md5": "c0a9c814692b78595f640ddb1e354428",
          "sha256": "8ae06ebf5c90034fd343d29995bc7c1e07523181b9cf493da6a443d61b2ab1b6"
        },
        "downloads": -1,
        "filename": "readi-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c0a9c814692b78595f640ddb1e354428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3793,
        "upload_time": "2020-05-01T16:52:22",
        "upload_time_iso_8601": "2020-05-01T16:52:22.543206Z",
        "url": "https://files.pythonhosted.org/packages/ab/06/5248df58bea97fbc55c0bf1996a0ad41378d0313ddb9c923821295687edd/readi-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e69820ffb91c454de7af6c59624ec3dfce74ec8c1fd56dfa02d032077d3c3a89",
          "md5": "61ae8db44c5d98c6b4f9614413483c0f",
          "sha256": "48057e3dea37fbf2103167fb3b1928f345035a3e987e2ef80e28a9632a9ff5f9"
        },
        "downloads": -1,
        "filename": "readi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61ae8db44c5d98c6b4f9614413483c0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3989,
        "upload_time": "2020-05-14T02:45:21",
        "upload_time_iso_8601": "2020-05-14T02:45:21.703762Z",
        "url": "https://files.pythonhosted.org/packages/e6/98/20ffb91c454de7af6c59624ec3dfce74ec8c1fd56dfa02d032077d3c3a89/readi-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e69820ffb91c454de7af6c59624ec3dfce74ec8c1fd56dfa02d032077d3c3a89",
        "md5": "61ae8db44c5d98c6b4f9614413483c0f",
        "sha256": "48057e3dea37fbf2103167fb3b1928f345035a3e987e2ef80e28a9632a9ff5f9"
      },
      "downloads": -1,
      "filename": "readi-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "61ae8db44c5d98c6b4f9614413483c0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3989,
      "upload_time": "2020-05-14T02:45:21",
      "upload_time_iso_8601": "2020-05-14T02:45:21.703762Z",
      "url": "https://files.pythonhosted.org/packages/e6/98/20ffb91c454de7af6c59624ec3dfce74ec8c1fd56dfa02d032077d3c3a89/readi-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}