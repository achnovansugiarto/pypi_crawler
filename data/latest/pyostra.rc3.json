{
  "info": {
    "author": "Yoratoni",
    "author_email": "twingearas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Terminals"
    ],
    "description": "# Pyostra Package\r\nCustom terminal colored logging system developed for the [Advanced NFTs Generator](https://github.com/ostra-project/Advanced-NFTs-Generator) and maintained for future projects.\r\n\r\n[PyPI for releases](https://pypi.org/project/pyostra/) | [Github for source](https://github.com/yoratoni/pyostra)\r\n\r\n\r\n## Installation\r\nDeveloped for Python 3.9, normally supports CPython 2.7 => 3.10 | Pypy 2.7 and 3.6.\r\n\r\nOnly requirement other than the standard library is [Colorama](https://github.com/tartley/colorama), this package have the same Python / platform requirements.\r\n\r\n```\r\npip install pyostra\r\n```\r\n\r\n\r\n## Description\r\nPyostra is the main central library used for my own projects such as the [Advanced NFTs Generator](https://github.com/ostra-project/Advanced-NFTs-Generator). This library allows custom colored and formatted outputs in the Terminal.\r\nThe goal is to simplify all the interactions with the terminal by the developers such as try / except errors etc..\r\n\r\nNote that this library will later include many other general functions, it is not specifically made for Terminal outputs only but to centralize all of the general functions that I'm using in my projects instead of copying the code everytime. I still decided to make it public so people can use it too if they want.\r\n\r\n\r\n## LogTypes class\r\nThis class contains all the log types for the `pyprint()` function.\r\n\r\nIt contains all of these log types by default:\r\n- CRITICAL\r\n- ERROR\r\n- WARN\r\n- SUCCESS\r\n- SILENT\r\n- READY\r\n- DATA\r\n- INFO\r\n\r\nA log type can also be created by using the `new_log_type()` function, it returns a dict with the right format.\r\n\r\nThe dict used for a log type is pretty simply:\r\n```py\r\nDATA = {\r\n    # The default name used by the log messages\r\n    'longName': 'DATA',\r\n    \r\n    # Check the set_short() function doc below to understand\r\n    'shortName': 'DATA',\r\n    \r\n    # The color of the log type at the start\r\n    'typeColor': Fore.LIGHTCYAN_EX,\r\n    \r\n    # The color of the log message\r\n    'msgColor': Fore.LIGHTCYAN_EX\r\n}\r\n```\r\n\r\n\r\n## pyprint() function\r\nDefault format of a Pyprint log, using the default log types:\r\n```py\r\nfrom pyostra import LogTypes, pyprint\r\n\r\ndef main():\r\n    pyprint(LogTypes.CRITICAL, 'THIS IS A TEST')\r\n    pyprint(LogTypes.ERROR, 'THIS IS A TEST')\r\n    pyprint(LogTypes.WARN, 'THIS IS A TEST')\r\n    pyprint(LogTypes.SUCCESS, 'THIS IS A TEST')\r\n    pyprint(LogTypes.SILENT, 'THIS IS A TEST')\r\n    pyprint(LogTypes.READY, 'THIS IS A TEST')\r\n    pyprint(LogTypes.DATA, 'THIS IS A TEST')\r\n    pyprint(LogTypes.INFO, 'THIS IS A TEST')\r\n    \r\nmain()\r\n```\r\nNotice that `CRITICAL`, `ERROR` and `WARN` log types also returns the calling function name,\r\nit can be disabled by using the optional `disable_function_name` argument for every log where you don't want the calling function name to show.\r\n\r\n![](https://github.com/yoratoni/pyostra/blob/main/documentation/default_output.png \"pyprint function example\")\r\n\r\n\r\n## set_short() function\r\nThis function allows you to reduce the log type length to 4 chars, it can be used if you have a lot of logs at the same time, for better readability. It uses the `shortName` string key inside a log type dict.\r\n```py\r\nimport pyostra\r\n\r\npyostra.set_short(True)\r\n```\r\nIf not clear, all the correspondances with the full log types can be found inside the pyprint/set_short function docstring.\r\n\r\n![](https://github.com/yoratoni/pyostra/blob/main/documentation/set_short.png \"set_short function example\")\r\n\r\n\r\n## set_verbose() function\r\nThis function allows to you to reduce the amount of logs inside the Terminal by ignoring some log types.\r\n```py\r\nfrom pyostra import LogTypes, pyprint, set_verbose\r\n\r\nset_verbose(False)\r\n\r\ndef main():\r\n    pyprint(LogTypes.CRITICAL, 'THIS IS A TEST')\r\n    pyprint(LogTypes.ERROR, 'THIS IS A TEST')\r\n    pyprint(LogTypes.WARN, 'THIS IS A TEST')\r\n    pyprint(LogTypes.SUCCESS, 'THIS IS A TEST')\r\n    pyprint(LogTypes.SILENT, 'THIS IS A TEST')  # IGNORED\r\n    pyprint(LogTypes.READY, 'THIS IS A TEST')  # IGNORED\r\n    pyprint(LogTypes.DATA, 'THIS IS A TEST')  # IGNORED\r\n    \r\n    # IGNORED BY DEFAULT BUT FORCED WITH THE force_verbose ARG\r\n    pyprint(LogTypes.INFO, 'THIS IS A TEST', force_verbose=True)\r\n    \r\nmain()\r\n```\r\nBy setting the verbose to False, only `CRITICAL`, `ERROR`, `WARN` and `SUCCESS` log types will be printed, the other ones are ignored.\r\n\r\n![](https://github.com/yoratoni/pyostra/blob/main/documentation/set_verbose.png \"set_verbose function example\")\r\n\r\nIn addition to that, the optional argument called `force_verbose` inside the `pyprint()` function allows to you print other log types even when the verbose debugging is turned off.\r\n\r\n\r\n## new_section() function\r\nThis simple function allows you to separate different types of log by printing a title with a bunch of separators.\r\n\r\nThis function contains only optional args:\r\n- section_title (str, optional): The title of the current section.\r\n- skip_line (bool, optional): If True, skip a line before the title.\r\n- section_title_color (str, optional): Use Colorama for that.\r\n- separator_char (str, optional): The character used by the section title.\r\n- separators_amount (int, optional): The amount of separators for the title.\r\n\r\n```py\r\nfrom pyostra import LogTypes, new_section, pyprint\r\n\r\ndef main():\r\n    new_section('TEST SECTION', separators_amount=10)\r\n    pyprint(LogTypes.CRITICAL, 'TEST')\r\n```\r\n\r\n![](https://github.com/yoratoni/pyostra/blob/main/documentation/new_section.png \"new_section function example\")\r\n\r\n\r\n## extime() function\r\nThis function uses the `time` core library, specifically the `time.perf_counter_ns()` function to measure the performances.\r\nIt prints the final message into the Terminal by using the `pyprint()` function (`LogTypes.SUCCESS` type).\r\n\r\nThis function contains a bunch of args:\r\n- timer_name (str): Name of the timer.\r\n- perf_counter_ns_value (int): Using time.perf_counter_ns() to get the starting value of the timer.\r\n- multiply_timer (int, optional): Multiply the time by a value (To estimate time for x iterations).\r\n- approximated_value (bool, optional): If True, adds the \"~\" character to show that it's an approximation.\r\n\r\nThe `multiply_timer` and the `approximated_value` args can be used to estimate the time that it takes to execute a function.\r\nAs an example, inside the [Advanced NFTs Generator](https://github.com/ostra-project/Advanced-NFTs-Generator), I'm generating an NFT 5 times in a row (for a better estimation) to measure the time that it takes, then, I set the `multiply_timer` value to the amount of NFTs that needs to be generated (divided by 5 as the measured time is for 5 NFTs). Then I set the `approximated_value` value to True, it adds the little `~` char to show that it is an estimation.\r\n\r\n```py\r\nfrom pyostra import extime\r\nimport time\r\n\r\ntimer = time.perf_counter_ns()\r\n\r\na = 0\r\nfor i in range(10000):\r\n    a += 1\r\n\r\nextime('Loop execution time', timer)\r\n```\r\n\r\n![](https://github.com/yoratoni/pyostra/blob/main/documentation/extime.png \"new_section function example\")\r\n\r\n\r\n## Changelog\r\n\r\n### v0.1.4 (03/06/2022):\r\n- Complete refactoring.\r\n- README doc fully written.\r\n- Main pyprint functions added.\r\n- Now supports short log types.\r\n- Logging system using dictionaries.\r\n- Functions docstring added.\r\n- Extime function refactored.\r\n- Arguments & docstring refactoring.\r\n\r\n### v0.1.1 (03/05/2022):\r\n- Package setup updated.\r\n- Required packages updated.\r\n- General refactoring.\r\n\r\n### v0.0.1 (03/05/2022):\r\n- First release of the pyostra package.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yoratoni/pyostra",
    "keywords": "ostra internal color colour terminal windows crossplatform",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyostra",
    "package_url": "https://pypi.org/project/pyostra/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyostra/",
    "project_urls": {
      "Homepage": "https://github.com/yoratoni/pyostra"
    },
    "release_url": "https://pypi.org/project/pyostra/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "THe internal Python package used for the Ostra projects such as the advanced NFTs generator.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13093608,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b7318db46361979444b51bf3421838eda70ac0ca6f1ec4484de637438eea3bb",
          "md5": "8e4c1f4a485f016faeaf3000e00f54ce",
          "sha256": "deb966111372f1dac37e5ae608efc786aa7539844ca6f00c28f85b8d5133689a"
        },
        "downloads": -1,
        "filename": "pyostra-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e4c1f4a485f016faeaf3000e00f54ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5741,
        "upload_time": "2022-03-05T12:25:59",
        "upload_time_iso_8601": "2022-03-05T12:25:59.392580Z",
        "url": "https://files.pythonhosted.org/packages/7b/73/18db46361979444b51bf3421838eda70ac0ca6f1ec4484de637438eea3bb/pyostra-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58bfc48f033d5a836da5063c25932c3e28313cb480216313f7dbd627596d1781",
          "md5": "c3187bf03811a8573507a8374aeac6e0",
          "sha256": "40be035ded7cad42f6aa63d5cbea84938bd51fca3914bcf3981019cc902e8d13"
        },
        "downloads": -1,
        "filename": "pyostra-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3187bf03811a8573507a8374aeac6e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5730,
        "upload_time": "2022-03-05T12:47:28",
        "upload_time_iso_8601": "2022-03-05T12:47:28.428951Z",
        "url": "https://files.pythonhosted.org/packages/58/bf/c48f033d5a836da5063c25932c3e28313cb480216313f7dbd627596d1781/pyostra-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6f1cb112214e4b04f4bc8566df9ccab1f8824c42fdf81734d1207bc00c99808",
          "md5": "8c3d363d500253c0032627e4e5e87665",
          "sha256": "6f772dc8bf3d1a5247e829e91cb9ff35403937c1d461f6317ce7791bcab56a97"
        },
        "downloads": -1,
        "filename": "pyostra-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8c3d363d500253c0032627e4e5e87665",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8737,
        "upload_time": "2022-03-06T15:33:04",
        "upload_time_iso_8601": "2022-03-06T15:33:04.923771Z",
        "url": "https://files.pythonhosted.org/packages/a6/f1/cb112214e4b04f4bc8566df9ccab1f8824c42fdf81734d1207bc00c99808/pyostra-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6f1cb112214e4b04f4bc8566df9ccab1f8824c42fdf81734d1207bc00c99808",
        "md5": "8c3d363d500253c0032627e4e5e87665",
        "sha256": "6f772dc8bf3d1a5247e829e91cb9ff35403937c1d461f6317ce7791bcab56a97"
      },
      "downloads": -1,
      "filename": "pyostra-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "8c3d363d500253c0032627e4e5e87665",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8737,
      "upload_time": "2022-03-06T15:33:04",
      "upload_time_iso_8601": "2022-03-06T15:33:04.923771Z",
      "url": "https://files.pythonhosted.org/packages/a6/f1/cb112214e4b04f4bc8566df9ccab1f8824c42fdf81734d1207bc00c99808/pyostra-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}