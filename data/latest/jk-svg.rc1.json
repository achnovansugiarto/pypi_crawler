{
  "info": {
    "author": "Jürgen Knauth",
    "author_email": "pubsrc@binary-overflow.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "jk_svg\n==========\n\nIntroduction\n------------\n\nThis python module implements a set of classes for easy programmatic create of SVG graphics.\n\nInformation about this module can be found here:\n\n* [github.org](https://github.com/jkpubsrc/....)\n* [pypi.python.org](https://pypi.python.org/pypi/jk_svg)\n\nWhy this module?\n----------------\n\nSometimes it is easier to create SVG graphics (or parts of SVG graphics) programmatically than drawing them by hand. This module assists in this task of creating such SVG graphics as there is no comparable module offering these kind of features.\n\nLimitations of this module\n--------------------------\n\nThis module currently only supports these kind of shapes:\n\n* `circle`\n* `ellipse`\n* `g`\n* `line`\n* `polygon`\n* `polyline`\n* `rect`\n\nAdditionally arbitrary elements of any kind can be provided, but those listed above will have a more beautiful API.\n\nHow to use this module\n----------------------\n\n### Import this module\n\nPlease include this module into your application using the following code:\n\n```python\nimport jk_svg\n```\n\n### Create an SVG graphic main node\n\nTo be able to create geometry nodes we need to create a SVG graphic object first:\n\n```python\nsvg = SVGGraphic()\n```\n\nNow we will be able to add arbitrary graphical SVG objects.\n\n### How to build SVG graphics\n\nSVG elements form a hierarchical structure. In order to stack SVG elements you therefore require nodes and subnodes that represent graphical shapes. Have a look at this SVG file:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n\txmlns:svg=\"http://www.w3.org/2000/svg\"\n\theight=\"297mm\"\n\twidth=\"210mm\"\n\tversion=\"1.1\"\n\t>\n\t<g>\n\t\t<line\n\t\t\tstyle=\"opacity:1;fill:none;fill-opacity:1;stroke:#008000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:5;stroke-dasharray:none;stroke-opacity:1\"\n\t\t\ty1=\"100\"\n\t\t\tx2=\"300\"\n\t\t\tx1=\"100\"\n\t\t\ty2=\"200\"\n\t\t\t/>\n\t\t<ellipse\n\t\t\tstyle=\"opacity:1;fill:none;fill-opacity:1;stroke:#0000c0;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:5;stroke-dasharray:none;stroke-opacity:1\"\n\t\t\tcx=\"250\"\n\t\t\tcy=\"140\"\n\t\t\try=\"50\"\n\t\t\trx=\"75\"\n\t\t\t/>\n\t\t<polygon\n\t\t\tstyle=\"opacity:1;fill:none;fill-opacity:1;stroke:#c00000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:5;stroke-dasharray:none;stroke-opacity:1\"\n\t\t\tpoints=\"120,100 200,120 180,200 100,180\"\n\t\t\t/>\n\t</g>\n</svg>\n```\n\nThis file can be created using the following python code:\n\n```python\nwith svg.createGroup() as g:\n\n\twith g.createLine() as line:\n\t\tline.style = STYLE_GREEN\n\t\tline.x1 = 100\n\t\tline.y1 = 100\n\t\tline.x2 = 300\n\t\tline.y2 = 200\n\n\twith g.createEllipse() as ellipse:\n\t\tellipse.style = STYLE_BLUE\n\t\tellipse.cx = 250\n\t\tellipse.cy = 140\n\t\tellipse.rx = 75\n\t\tellipse.ry = 50\n\n\twith g.createPolygon() as poly:\n\t\tpoly.style = STYLE_RED\n\t\tpoly.points.append( (20, 0) )\n\t\tpoly.points.append( (100, 20) )\n\t\tpoly.points.append( (80, 100) )\n\t\tpoly.points.append( (0, 80) )\n\t\tpoly.move(100, 100)\n```\n\nThe `with` statements shown in this example are just a convenience to allow the source code to better reflect the hierarchical structure of the resulting SVG file. In this specific case there are no specific actions involved in entering or leaving this context. So the code shown above is equivalent to the following example:\n\n```python\ng = svg.createGroup()\n\nline = g.createLine()\nline.style = STYLE_GREEN\nline.x1 = 100\nline.y1 = 100\nline.x2 = 300\nline.y2 = 200\n\nellipse = g.createEllipse()\nellipse.style = STYLE_BLUE\nellipse.cx = 250\nellipse.cy = 140\nellipse.rx = 75\nellipse.ry = 50\n\npoly = g.createPolygon()\npoly.style = STYLE_RED\npoly.points.append( (20, 0) )\npoly.points.append( (100, 20) )\npoly.points.append( (80, 100) )\npoly.points.append( (0, 80) )\npoly.move(100, 100)\n```\n\nThe mechanism is always the same: Create a subcomponent that will be a child component to its parent. In this example `g` is created which is then used to create a `line`, a an`ellipse` and a `polygon` subcomponent. While every component is basically the same ans contains an `attributes` and `children` member that holds the attributes and children, additional convenience members are provided. Here they are used to specify location, shape and style data. These convenience members depend on the specific shape: Therefore if you use `createLine()` you will get a slightly different SVG object compared to calling `createEllipse()` or any other create-method. This aspect assists in working with SVG data as it makes defining geometries very easy.\n\nContact Information\n-------------------\n\nThis work is Open Source. This enables you to use this work for free.\n\nPlease have in mind this also enables you to contribute. We, the subspecies of software developers, can create great things. But the more collaborate, the more fantastic these things can become. Therefore Feel free to contact the author(s) listed below, either for giving feedback, providing comments, hints, indicate possible collaborations, ideas, improvements. Or maybe for \"only\" reporting some bugs:\n\n* Jürgen Knauth: pubsrc@binary-overflow.de\n\nLicense\n-------\n\nThis software is provided under the following license:\n\n* Apache Software License 2.0",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "svg",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jk-svg",
    "package_url": "https://pypi.org/project/jk-svg/",
    "platform": "",
    "project_url": "https://pypi.org/project/jk-svg/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/jk-svg/0.2021.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This Python module implements a set of classes for easy, programmatic generation of SVG graphics.",
    "version": "0.2021.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9165270,
  "releases": {
    "0.2021.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91845e966e2005466cc618f71c57a1813da6395fbb9e3e3ab54840735d17e271",
          "md5": "f8cab78b4f68b4e81aa32c604092ce4d",
          "sha256": "0e63257ae517f8fe7caf6623e2b213b0f8fca7e5f3322b74598b9f4bfef37445"
        },
        "downloads": -1,
        "filename": "jk_svg-0.2021.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f8cab78b4f68b4e81aa32c604092ce4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16426,
        "upload_time": "2021-01-18T17:51:51",
        "upload_time_iso_8601": "2021-01-18T17:51:51.189339Z",
        "url": "https://files.pythonhosted.org/packages/91/84/5e966e2005466cc618f71c57a1813da6395fbb9e3e3ab54840735d17e271/jk_svg-0.2021.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91845e966e2005466cc618f71c57a1813da6395fbb9e3e3ab54840735d17e271",
        "md5": "f8cab78b4f68b4e81aa32c604092ce4d",
        "sha256": "0e63257ae517f8fe7caf6623e2b213b0f8fca7e5f3322b74598b9f4bfef37445"
      },
      "downloads": -1,
      "filename": "jk_svg-0.2021.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f8cab78b4f68b4e81aa32c604092ce4d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16426,
      "upload_time": "2021-01-18T17:51:51",
      "upload_time_iso_8601": "2021-01-18T17:51:51.189339Z",
      "url": "https://files.pythonhosted.org/packages/91/84/5e966e2005466cc618f71c57a1813da6395fbb9e3e3ab54840735d17e271/jk_svg-0.2021.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}