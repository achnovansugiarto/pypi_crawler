{
  "info": {
    "author": "Timofey Arkhangelskiy",
    "author_email": "timarkh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# Turoyo morphological analyzer\r\n\r\nThis is a rule-based morphological analyzer for Ṭuroyo (``tru``, Afro-Asiatic > Central Neo-Aramaic). It is based on a formalized description of Turoyo morphology and uses [uniparser-morph](https://github.com/timarkh/uniparser-morph) for parsing. It performs full morphological analysis of Turoyo words (lemmatization, POS tagging, grammatical tagging). The text to be analyzed should be written in a version of Latin Turoyo alphabet which is somewhat closer to IPA: it uses *ʔ* instead of *'*, *ʕ* instead of *c*, *ə* insteadt of *ë* etc.\r\n\r\n## How to use\r\n### Python package\r\nThe analyzer is available as a Python package. If you want to analyze Turoyo texts in Python, install the module:\r\n\r\n```\r\npip3 install uniparser-turoyo\r\n```\r\n\r\nImport the module and create an instance of ``TuroyoAnalyzer`` class. Set ``mode='strict'`` if you are going to process text in standard Latin Turoyo alphabet, or ``mode='nodiacritics'`` if you expect some words to lack the diacritics (e.g. *t* instead of *ṭ*). After that, you can either parse tokens or lists of tokens with ``analyze_words()``, or parse a frequency list with ``analyze_wordlist()``. Here is a simple example:\r\n\r\n```python\r\nfrom uniparser_turoyo import TuroyoAnalyzer\r\na = TuroyoAnalyzer(mode='strict')\r\n\r\nanalyses = a.analyze_words('koroḥamnux')\r\n# The parser is initialized before first use, so expect\r\n# some delay here (usually several seconds)\r\n\r\n# You will get a list of Wordform objects\r\n# The analysis attributes are stored in its properties\r\n# as string values, e.g.:\r\nfor ana in analyses:\r\n        print(ana.wf, ana.lemma, ana.gramm)\r\n\r\n# You can also pass lists (even nested lists) and specify\r\n# output format ('xml', 'json' or 'conll')\r\n# If you pass a list, you will get a list of analyses\r\n# with the same structure\r\nanalyses = a.analyze_words([['koroḥamnux'], ['ʕəbarwo', 'lab', 'bote', '.']],\r\n\t                       format='xml')\r\nanalyses = a.analyze_words([['koroḥamnux'], ['ʕəbarwo', 'lab', 'bote', '.']],\r\n\t                       format='conll')\r\nanalyses = a.analyze_words(['koroḥamnux', [['laḥmawo'], ['ʕəbarwo', 'lab', 'bote', '.']]],\r\n\t                       format='json')\r\n```\r\n\r\nRefer to the [uniparser-morph documentation](https://uniparser-morph.readthedocs.io/en/latest/) for the full list of options.\r\n\r\nIf you want to quickly check an analysis for one particular word, you can also use the command-line interface. Here is an example for the word *koroḥamnux*:\r\n\r\n```\r\npython3 -m uniparser_turoyo koroḥamnux\r\n```\r\n\r\n<!---\r\n### Disambiguation\r\nApart from the analyzer, this repository contains a set of [Constraint Grammar](https://visl.sdu.dk/constraint_grammar.html) rules that can be used for partial disambiguation of analyzed Turoyo texts. If you want to use them, set ``disambiguation=True`` when calling ``analyze_words``:\r\n\r\n```python\r\nanalyses = a.analyze_words(['ʕəbarwo', 'lab', 'bote', '.'], disambiguate=True)\r\n```\r\n\r\nIn order for this to work, you have to install the ``cg3`` executable separately. On Ubuntu/Debian, you can use ``apt-get``:\r\n\r\n```\r\nsudo apt-get install cg3\r\n```\r\n\r\nOn Windows, download the binary and add the path to the ``PATH`` environment variable. See [the documentation](https://visl.sdu.dk/cg3/single/#installation) for other options.\r\n\r\nNote that each time you call ``analyze_words()`` with ``disambiguate=True``, the CG grammar is loaded and compiled from scratch, which makes the analysis even slower. If you are analyzing a large text, it would make sense to pass the entire text contents in a single function call rather than do it sentence-by-sentence, for optimal performance.\r\n-->\r\n\r\n### Word lists\r\nAlternatively, you can use a preprocessed word list. The ``wordlists`` directory contains a list of words from a 600-thousand-word [Ṭuroyo corpus](https://neo-aramaic.web-corpora.net/index_en.html) (``wordlist.csv``) with 53,000 unique tokens, list of analyzed tokens (``wordlist_analyzed.txt``; each line contains all possible analyses for one word in an XML format), and list of tokens the parser could not analyze (``wordlist_unanalyzed.txt``). The recall of the analyzer on the corpus texts is about 90%. (This number is somewhat low due to orthographic variability in the texts.)\r\n\r\n## Description format\r\nThe description is carried out in the ``uniparser-morph`` format and involves a description of the inflection (paradigms/paradigms_XXX.txt) and a grammatical dictionary (lexemes/lexemes-XXX.txt files). The dictionary contains descriptions of individual lexemes, each of which is accompanied by information about its stem, its part-of-speech tag and some other grammatical information, its consonant root, its inflectional type (paradigm), and English and/or German translations. See more about the format [in the uniparser-morph documentation](https://uniparser-morph.readthedocs.io/en/latest/format.html).\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/margisk/uniparser-grammar-turoyo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uniparser-turoyo",
    "package_url": "https://pypi.org/project/uniparser-turoyo/",
    "platform": null,
    "project_url": "https://pypi.org/project/uniparser-turoyo/",
    "project_urls": {
      "Bug Tracker": "https://github.com/margisk/uniparser-grammar-turoyo/issues",
      "Homepage": "https://github.com/margisk/uniparser-grammar-turoyo"
    },
    "release_url": "https://pypi.org/project/uniparser-turoyo/1.1.2/",
    "requires_dist": [
      "uniparser-morph (>=2.4.1)",
      "importlib-resources"
    ],
    "requires_python": ">=3.7",
    "summary": "Rule-based morphological analysis for Turoyo",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17512356,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a06e93216a9a4d0cb0becea57da4e0ce22a1448ab384f81d31a62766bd747df",
          "md5": "fcdd0a6027381ed7cabb84127a46d2bd",
          "sha256": "3cbc21162e49781641bc0d8160b53c1b387b4ba818790280d90ae6dfbf44fb13"
        },
        "downloads": -1,
        "filename": "uniparser_turoyo-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcdd0a6027381ed7cabb84127a46d2bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 1178539,
        "upload_time": "2021-09-15T13:42:24",
        "upload_time_iso_8601": "2021-09-15T13:42:24.266961Z",
        "url": "https://files.pythonhosted.org/packages/4a/06/e93216a9a4d0cb0becea57da4e0ce22a1448ab384f81d31a62766bd747df/uniparser_turoyo-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bd846990c130580516198deb614bcfa750dd271e71be7b0cc37f419a3ff3234",
          "md5": "8c85161c5f36ecf68577ef81a18b15ff",
          "sha256": "c8947083b50c66766297fae6db79896e821320c4a723b0794ee045a0524520e3"
        },
        "downloads": -1,
        "filename": "uniparser-turoyo-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c85161c5f36ecf68577ef81a18b15ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1158771,
        "upload_time": "2021-09-15T13:42:26",
        "upload_time_iso_8601": "2021-09-15T13:42:26.242779Z",
        "url": "https://files.pythonhosted.org/packages/4b/d8/46990c130580516198deb614bcfa750dd271e71be7b0cc37f419a3ff3234/uniparser-turoyo-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dd79bd545e84dfb485e44699f7af02cf68eb5b7d5628a26486bc296ed7751e8",
          "md5": "cff23fb045ba24c60c13f69590aea87f",
          "sha256": "5d9b409c5e098aba09b59bc913f037836760636258c70700e121b3764fcdaeec"
        },
        "downloads": -1,
        "filename": "uniparser_turoyo-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cff23fb045ba24c60c13f69590aea87f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 1233359,
        "upload_time": "2023-02-09T14:23:33",
        "upload_time_iso_8601": "2023-02-09T14:23:33.948929Z",
        "url": "https://files.pythonhosted.org/packages/9d/d7/9bd545e84dfb485e44699f7af02cf68eb5b7d5628a26486bc296ed7751e8/uniparser_turoyo-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c51e78f98192615569ce82a03aad3fe5dbf06f4df46a235046a1a302500d01e0",
          "md5": "09d1a0586cf46db5d3d75f18b2d9adca",
          "sha256": "941e2a29a8965694a3b6bf3a143a415ef86cee806646173966b6be6c478782ae"
        },
        "downloads": -1,
        "filename": "uniparser-turoyo-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09d1a0586cf46db5d3d75f18b2d9adca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1213056,
        "upload_time": "2023-02-09T14:23:35",
        "upload_time_iso_8601": "2023-02-09T14:23:35.517107Z",
        "url": "https://files.pythonhosted.org/packages/c5/1e/78f98192615569ce82a03aad3fe5dbf06f4df46a235046a1a302500d01e0/uniparser-turoyo-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ae67c46dfdf7fc1c3ae26f37a2653e2d482034772d708d9c788588d5dab9faf",
          "md5": "7eef7bab677ebce0a65b2385bc40f63f",
          "sha256": "eb8d55b6e2f20b71c316ccc9555849a9032c4aaeaa46a24227a9c34fec174755"
        },
        "downloads": -1,
        "filename": "uniparser_turoyo-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7eef7bab677ebce0a65b2385bc40f63f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 1233628,
        "upload_time": "2023-03-30T15:15:11",
        "upload_time_iso_8601": "2023-03-30T15:15:11.196021Z",
        "url": "https://files.pythonhosted.org/packages/9a/e6/7c46dfdf7fc1c3ae26f37a2653e2d482034772d708d9c788588d5dab9faf/uniparser_turoyo-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c8420245007748f317aef3f1950a5d33d46d666de69178b15df53aac56cb39a",
          "md5": "34d8e39cec19591af87c7642f2b79f1e",
          "sha256": "d3cfd6f83f21b722c11a4c4b1c014aa8075340d628dfa5e83623fbea30ffb900"
        },
        "downloads": -1,
        "filename": "uniparser-turoyo-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "34d8e39cec19591af87c7642f2b79f1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1213340,
        "upload_time": "2023-03-30T15:15:12",
        "upload_time_iso_8601": "2023-03-30T15:15:12.642139Z",
        "url": "https://files.pythonhosted.org/packages/1c/84/20245007748f317aef3f1950a5d33d46d666de69178b15df53aac56cb39a/uniparser-turoyo-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ae67c46dfdf7fc1c3ae26f37a2653e2d482034772d708d9c788588d5dab9faf",
        "md5": "7eef7bab677ebce0a65b2385bc40f63f",
        "sha256": "eb8d55b6e2f20b71c316ccc9555849a9032c4aaeaa46a24227a9c34fec174755"
      },
      "downloads": -1,
      "filename": "uniparser_turoyo-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7eef7bab677ebce0a65b2385bc40f63f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 1233628,
      "upload_time": "2023-03-30T15:15:11",
      "upload_time_iso_8601": "2023-03-30T15:15:11.196021Z",
      "url": "https://files.pythonhosted.org/packages/9a/e6/7c46dfdf7fc1c3ae26f37a2653e2d482034772d708d9c788588d5dab9faf/uniparser_turoyo-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c8420245007748f317aef3f1950a5d33d46d666de69178b15df53aac56cb39a",
        "md5": "34d8e39cec19591af87c7642f2b79f1e",
        "sha256": "d3cfd6f83f21b722c11a4c4b1c014aa8075340d628dfa5e83623fbea30ffb900"
      },
      "downloads": -1,
      "filename": "uniparser-turoyo-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "34d8e39cec19591af87c7642f2b79f1e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1213340,
      "upload_time": "2023-03-30T15:15:12",
      "upload_time_iso_8601": "2023-03-30T15:15:12.642139Z",
      "url": "https://files.pythonhosted.org/packages/1c/84/20245007748f317aef3f1950a5d33d46d666de69178b15df53aac56cb39a/uniparser-turoyo-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}