{
  "info": {
    "author": "trevor grayson",
    "author_email": "trevor@dave.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# makeup Dependency Framework\n\nRun Machine Learning/AI models, reproducibly, from ideation to production.\n\n`makeup` strives to help Data Scientists write model code and not be obliged to much else.\n`makeup` is the connective tissue that plugs the different stages of building a model together.\n\nThis is not a processor library, it's a code organizational framework made to make your development easier.\n\nAdditional features may be developed in this library to provide services, like a web API to host models. \n\n# Why?\n\n- write less code.\n- promote a \"model interface\" for interoperable models.\n- target caching for reproducible and expedient execution. \n- simplified debugging, without hacking code.\n- production deployable code that's easy to test.\n- artifact rendering, to help with deployments.  \n\n\n## How?\n\nWe're going to try to break our ML code down into smaller functional parts.  These parts will be simple python functions,\nand we will refer to them as targets.  How big should we make these targets?  A good rule of thumb is to make a new \ntarget anywhere you may want to `print`, save, or inspect variables or results.  \n\nSome example targets may be: `load`, `prep` (or `feature` generation), `split`, `train`\n\n## Getting Started\n\nTake an ML project, like the [Sklearn Iris Example](https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html).\nLet's start by making a module called `iris` to name our model.  The following code will be added to `iris/__init__.py`.\n\n### loading data\n\nNo matter what you're doing, you'll want to load some data first.  I'm hard pressed to find a example where \nthe program should hardcode the data source in the code, but this seems to happen in every jupyter notebook I've ever \nseen, so let's write a method to do it.  This will be our default data, but you will be able to change data \nsources/sets at run time.\n\nTo implement that here we will use the `dataset.load_iris` function. Keep in mind, this block of code could just as\neasily load a csv, call a database, or load any other data source. More on this later. \n\n```python\n# iris/__init__.py\nfrom sklearn import datasets\n\ndef load():\n    \"\"\"Returns reasonable \"default data\" for executon. Use in Juypter Notebooks.\"\"\" \n    iris = datasets.load_iris()\n    return iris.data[:, :2], iris.target\n\n# load = \"data/yourdataset.tsv\"\n```\n\nThe Iris Example is loading an object and extracts two useful components from it:  \na data frame, and target numbers.\n\nNotice the loaded `iris` variable wasn't returned, though it could've been.  By returning a generic tuple of \npython primatives you can avoid coupling your code to a data object. By explicitly stating your data requirements \nin the function's arguments, it will make it much easier to plug in different data sources, and\nunit test method separately.\n\n### training on data\n\nNow that you have your data, you will want to train your model against it.\nRather than procedurally continuing our code, let's make another method which takes the previous\nfunction's returned values. Let's name those returned values sensibly: `data` and `target`. \n\n```python\ndef train(data, target):\n    \"\"\"\n    Further describing the inputs here will help later.\n    data: a DataFrame with x, y, z column requirements.\n    target: a list of numbers\n    \"\"\"\n    clf = SVC()\n    clf.fit(data, target)\n\n    return clf\n```\n\n### prediction\n\nYou have your `SVC` model at this point.  Here we finish up with making a prediction.\n\n```python\ndef predict(clf, row):\n    return clf.predict(row)\n```\n\nThis is using a generic row like our example is, but getting more explicit with your parameters may suit you better.\n\n\n## Running the code...\n\nWe've defined three methods: `load`, `train`, and `predict`.  There are implicit dependencies between these functions \nwhich we could write some code to execute, but that's where `makeup` comes in.\n\n### in a notebook\n\n```python\nimport iris\nfrom makeup import run, target\n\ntarget(iris.train, requires=iris.load)\nrun(iris, 'train')\n```\n\nOn the command line, this could be executed with:\n\n```sh\npython -m makeup iris train\n```\n\nYou may also [override](docs/OVERRIDES.md) the data source with a URL.\n\n```sh\npython -m makeup iris train --load file://./data.csv\n``` \n\nYou could imagine dependencies getting more intricate:\n\n```python\nfrom makeup import target\nimport examples.iris as iris\n\ntarget(iris.features, requires=iris.load)\ntarget(plot, requires=iris.features)\n\ntarget(iris.split, requires=iris.features)\ntarget(iris.train, requires=iris.split)\n```\n\n```\nload -> features |-> plot\n                 \\-> split -> train\n```\n\nOR, in abbreviated form:\n\n```python\nfrom makeup import workflow\nimport examples.iris as iris\n\nworkflow({\n    iris.features: iris.load,\n    plot: iris.features,\n    iris.split: iris.features,\n    iris.train: iris.split,\n})\n```\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trevorgrayson/mlf",
    "keywords": "machine learning,data science,make,models",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "makeup",
    "package_url": "https://pypi.org/project/makeup/",
    "platform": "",
    "project_url": "https://pypi.org/project/makeup/",
    "project_urls": {
      "Homepage": "https://github.com/trevorgrayson/mlf"
    },
    "release_url": "https://pypi.org/project/makeup/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Make your models look pretty.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11832065,
  "releases": {
    "0.0.1": [],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1880f90a47a49ca4a517cbbc976db0848cff0d4a301f4cfe75b4b3bca33df97",
          "md5": "5c00e641b3bf97284ff16480d2ed2534",
          "sha256": "545d35fc0c2497709752a21dc58f7718dbf09cef3e07fa9ec7c164a4d51f8836"
        },
        "downloads": -1,
        "filename": "makeup-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5c00e641b3bf97284ff16480d2ed2534",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12806,
        "upload_time": "2021-07-14T03:42:23",
        "upload_time_iso_8601": "2021-07-14T03:42:23.338151Z",
        "url": "https://files.pythonhosted.org/packages/f1/88/0f90a47a49ca4a517cbbc976db0848cff0d4a301f4cfe75b4b3bca33df97/makeup-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad325d3dda50c2be98a5b82aad5715dccb165d5d479c6b44f74c63b03d065abc",
          "md5": "46185ca14b0046626f2f17a774d273f7",
          "sha256": "6b92d5a406ac3d609021e6c07d1ece7db45d0ed71592dd52848df927c833a540"
        },
        "downloads": -1,
        "filename": "makeup-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "46185ca14b0046626f2f17a774d273f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12596,
        "upload_time": "2021-10-26T05:24:31",
        "upload_time_iso_8601": "2021-10-26T05:24:31.250085Z",
        "url": "https://files.pythonhosted.org/packages/ad/32/5d3dda50c2be98a5b82aad5715dccb165d5d479c6b44f74c63b03d065abc/makeup-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad325d3dda50c2be98a5b82aad5715dccb165d5d479c6b44f74c63b03d065abc",
        "md5": "46185ca14b0046626f2f17a774d273f7",
        "sha256": "6b92d5a406ac3d609021e6c07d1ece7db45d0ed71592dd52848df927c833a540"
      },
      "downloads": -1,
      "filename": "makeup-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "46185ca14b0046626f2f17a774d273f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12596,
      "upload_time": "2021-10-26T05:24:31",
      "upload_time_iso_8601": "2021-10-26T05:24:31.250085Z",
      "url": "https://files.pythonhosted.org/packages/ad/32/5d3dda50c2be98a5b82aad5715dccb165d5d479c6b44f74c63b03d065abc/makeup-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}