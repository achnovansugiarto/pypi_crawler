{
  "info": {
    "author": "Caltech IMSS ADS",
    "author_email": "cmalek@caltech.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# python-ldap-faker\n\n**Documentation**: https://python-ldap-faker.readthedocs.org\n\nFakes are objects that have working implementations. while mocks are objects that have predefined behavior.  `python-ldap-faker` provides a fake `python-ldap` interface and \"server\" that can be used for automated testing of code that uses `python-ldap`.\n\nManaging an actual LDAP server during our tests is usually out of the question, so typically we revert to patching the `python-ldap` code to use mock objects instead, but this is very verbose and can lead to test code errors in practice.\n\n## Installation\n\n`python-ldap-faker` supports Python 3.7+.\n\nTo install from PyPI:\n\n```shell\npip install python-ldap-faker\n```\n\nIf you want, you can run the tests:\n\n```shell\npython -m unittest discover\n```\n\n## Features\n\n* These `python-ldap` global functions are faked:\n\n    * `ldap.initialize`\n    * `ldap.set_option`\n    * `ldap.get_option`\n\n* These `ldap.ldapobject.LDAPObject` methods are faked:\n\n    * `set_option`\n    * `get_option`\n    * `start_tls_s`\n    * `simple_bind_s`\n    * `unbind_s`\n    * `search_s`\n    * `search_ext`\n    * `result3`\n    * `compare_s`\n    * `add_s`\n    * `modify_s`\n    * `rename_s`\n    * `delete_s`\n\n* For `search_ext` and `search_s`, your filter string will be validated as a valid LDAP filter, and your filter will be applied directly to your objects in our fake \"server\" to generate the result list.  No canned searches!\n* Inspect your call history for all calls (name, arguments), and test the order in which they were made\n* Simulate multiple fake LDAP \"servers\" with different sets of objects that correspond to different LDAP URIs.\n* Ease your test setup with :py:class:`LDAPFakerMixin`, a mixin for :py:class:`unittest.TestCase`\n\n    * Automatically manages patching `python-ldap` for the code under test\n    * Allows you to populate objects into one or more LDAP \"servers\" with fixture files\n    * Provides the following test instrumentation for inspecting state after the test:\n\n        * Access to the full object store for each LDAP uri accessed\n        * All connections made\n        * All `python-ldap` API calls made\n        * All `python-ldap` LDAP options set\n\n    * Provides test isolation: object store changes, connections, call history, option changes are all reset between tests\n    * Use handy LDAP specific asserts to ease your testing\n\n* Define your own hooks to change the behavior of your fake \"servers\"\n* Support behavior for specific LDAP implementations:\n\n    * Redhat Directory Server/389 implementation support: have your test believe it's talking to an RHDS/389 server.\n\n## Quickstart\n\nThe easiest way to use `python-ldap-faker` in your `unittest` based tests is to use the `ldap_faker.LDAPFakerMixin` mixin for `unittest.TestCase`.\n\nThis will patch `ldap.initialize`, `ldap.set_option` and `ldap.get_option` to use our `FakeLDAP` interface, and load fixtures in from JSON files to use as test data.\n\nLet's say we have a class `App` in our `myapp` module that does LDAP work that we want to test.\n\nFirst, prepare a file named `data.json` with the objects you want loaded into your fake LDAP server.   Let's say you want your data to consist of some `posixAccount` objects.  If we make `data.json` look like this:\n\n```json\n[\n    [\n        \"uid=foo,ou=bar,o=baz,c=country\",\n        {\n            \"uid\": [\"foo\"],\n            \"cn\": [\"Foo Bar\"],\n            \"uidNumber\": [\"123\"],\n            \"gidNumber\": [\"123\"],\n            \"homeDirectory\": [\"/home/foo\"],\n            \"userPassword\": [\"the password\"],\n            \"objectclass\": [\n                \"posixAccount\",\n                \"top\"\n            ]\n        }\n    ],\n    [\n        \"uid=fred,ou=bar,o=baz,c=country\",\n        {\n            \"uid\": [\"fred\"],\n            \"cn\": [\"Fred Flintstone\"],\n            \"uidNumber\": [\"124\"],\n            \"gidNumber\": [\"124\"],\n            \"homeDirectory\": [\"/home/fred\"],\n            \"userPassword\": [\"the fredpassword\"],\n            \"objectclass\": [\n                \"posixAccount\",\n                \"top\"\n            ]\n        }\n    ],\n    [\n        \"uid=barney,ou=bar,o=baz,c=country\",\n        {\n            \"uid\": [\"barney\"],\n            \"cn\": [\"Barney Rubble\"],\n            \"uidNumber\": [\"125\"],\n            \"gidNumber\": [\"125\"],\n            \"homeDirectory\": [\"/home/barney\"],\n            \"userPassword\": [\"the barneypassword\"],\n            \"objectclass\": [\n                \"posixAccount\",\n                \"top\"\n            ]\n        }\n    ]\n]\n```\n\nThen we can write a `TestCase` that looks like this:\n\n```python\n    import unittest\n\n    import ldap\n    from ldap_faker import LDAPFakerMixin\n\n    from myapp import App\n\n    class YourTestCase(LDAPFakerMixin, unittest.TestCase):\n\n        ldap_modules = ['myapp']\n        ldap_fixtures = 'data.json'\n\n        def test_auth_works(self):\n            app = App()\n            # A method that does a `simple_bind_s`\n            app.auth('fred', 'the fredpassword')\n            conn = self.get_connections()[0]\n            self.assertLDAPConnectionMethodCalled(\n                conn, 'simple_bind_s',\n                {'who': 'uid=fred,ou=bar,o=baz,c=country', 'cred': 'the fredpassword'}\n            )\n\n        def test_correct_connection_options_were_set(self):\n            app = App()\n            app.auth('fred', 'the fredpassword')\n            conn = self.get_connections()[0]\n            self.assertLDAPConnectionOptionSet(conn, ldap.OPT_X_TLX_NEWCTX, 0)\n\n        def test_tls_was_used_before_auth(self):\n            app = App()\n            app.auth('fred', 'the fredpassword')\n            conn = self.get_connections()[0]\n            self.assertLDAPConnectiontMethodCalled(conn, 'start_tls_s')\n            self.assertLDAPConnectionMethodCalledAfter(conn, 'simple_bind_s', 'start_tls_s')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/caltechads/python-ldap-faker",
    "keywords": "ldap",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-ldap-faker",
    "package_url": "https://pypi.org/project/python-ldap-faker/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-ldap-faker/",
    "project_urls": {
      "Homepage": "https://github.com/caltechads/python-ldap-faker"
    },
    "release_url": "https://pypi.org/project/python-ldap-faker/1.1.0/",
    "requires_dist": [
      "python-ldap",
      "case-insensitive-dictionary",
      "ldap-filter"
    ],
    "requires_python": "",
    "summary": "Fake python-ldap functions, objects and methods for use in testing.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15442655,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7e0542e62755dcd23a199857215f2b97cc3043778d08c571cd9683758ab1163",
          "md5": "d25edcb1aeceff23cbd05754d4dc100a",
          "sha256": "b070918c86324eea02422aec2657cdcada39779447611fced5fed4794bb8a0cb"
        },
        "downloads": -1,
        "filename": "python_ldap_faker-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d25edcb1aeceff23cbd05754d4dc100a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 32865,
        "upload_time": "2022-10-11T19:12:45",
        "upload_time_iso_8601": "2022-10-11T19:12:45.265452Z",
        "url": "https://files.pythonhosted.org/packages/e7/e0/542e62755dcd23a199857215f2b97cc3043778d08c571cd9683758ab1163/python_ldap_faker-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fe7696b6e35d8feae37f29eee1342e1c03eca70fb5f407d3c1fbbcd6e71c45e",
          "md5": "cb74c582b86347c2daeba505a3cb08c8",
          "sha256": "1ae072bcfb929ffdd69e71485dc42dc7dbe1daffa95d2e32bc4084dad91205b8"
        },
        "downloads": -1,
        "filename": "python-ldap-faker-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb74c582b86347c2daeba505a3cb08c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30424,
        "upload_time": "2022-10-11T19:12:51",
        "upload_time_iso_8601": "2022-10-11T19:12:51.972668Z",
        "url": "https://files.pythonhosted.org/packages/0f/e7/696b6e35d8feae37f29eee1342e1c03eca70fb5f407d3c1fbbcd6e71c45e/python-ldap-faker-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4adda993c57c2288773587170f7d12a92ddfbce7a1877411fa8a27ddf9f402",
          "md5": "ad9909382150ebb744f4fcf3445838e5",
          "sha256": "10d8590a51e47c00f6791f375e063be7fbe27940c19361e26cde09a1035cc179"
        },
        "downloads": -1,
        "filename": "python_ldap_faker-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad9909382150ebb744f4fcf3445838e5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 44788,
        "upload_time": "2022-10-18T00:21:25",
        "upload_time_iso_8601": "2022-10-18T00:21:25.677856Z",
        "url": "https://files.pythonhosted.org/packages/7c/4a/dda993c57c2288773587170f7d12a92ddfbce7a1877411fa8a27ddf9f402/python_ldap_faker-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "532befb6d52e143fd606aff8196911ffed531dccefc29f89475fda1bd62502f0",
          "md5": "e67c8bb8ea32db9a35b7268f25153845",
          "sha256": "e299afd2af5ecdf159946d95aa6d7416203913b97187affa2b826b75526c0f3e"
        },
        "downloads": -1,
        "filename": "python-ldap-faker-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e67c8bb8ea32db9a35b7268f25153845",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40811,
        "upload_time": "2022-10-18T00:21:28",
        "upload_time_iso_8601": "2022-10-18T00:21:28.080105Z",
        "url": "https://files.pythonhosted.org/packages/53/2b/efb6d52e143fd606aff8196911ffed531dccefc29f89475fda1bd62502f0/python-ldap-faker-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c4adda993c57c2288773587170f7d12a92ddfbce7a1877411fa8a27ddf9f402",
        "md5": "ad9909382150ebb744f4fcf3445838e5",
        "sha256": "10d8590a51e47c00f6791f375e063be7fbe27940c19361e26cde09a1035cc179"
      },
      "downloads": -1,
      "filename": "python_ldap_faker-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad9909382150ebb744f4fcf3445838e5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 44788,
      "upload_time": "2022-10-18T00:21:25",
      "upload_time_iso_8601": "2022-10-18T00:21:25.677856Z",
      "url": "https://files.pythonhosted.org/packages/7c/4a/dda993c57c2288773587170f7d12a92ddfbce7a1877411fa8a27ddf9f402/python_ldap_faker-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "532befb6d52e143fd606aff8196911ffed531dccefc29f89475fda1bd62502f0",
        "md5": "e67c8bb8ea32db9a35b7268f25153845",
        "sha256": "e299afd2af5ecdf159946d95aa6d7416203913b97187affa2b826b75526c0f3e"
      },
      "downloads": -1,
      "filename": "python-ldap-faker-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e67c8bb8ea32db9a35b7268f25153845",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40811,
      "upload_time": "2022-10-18T00:21:28",
      "upload_time_iso_8601": "2022-10-18T00:21:28.080105Z",
      "url": "https://files.pythonhosted.org/packages/53/2b/efb6d52e143fd606aff8196911ffed531dccefc29f89475fda1bd62502f0/python-ldap-faker-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}