{
  "info": {
    "author": "Faraz Khan",
    "author_email": "mk.faraz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Serial-Id\n\n[![codecov](https://codecov.io/gh/mysteryjeans/serial-id/branch/master/graph/badge.svg)](https://codecov.io/gh/mysteryjeans/serial-id)\n[![Code Climate](https://codeclimate.com/github/mysteryjeans/serial-id/badges/gpa.svg)](https://codeclimate.com/github/mysteryjeans/serial-id)\n[![Issue Count](https://codeclimate.com/github/mysteryjeans/serial-id/badges/issue_count.svg)](https://codeclimate.com/github/mysteryjeans/serial-id)\n\n## Sequential Unique Short & Sortable Identifier\n\nIt is a short sequential identifier that is random but sortable and only uses 80 bits. First 40 bits are for timestamp and rest of the 40 bits are used for randomness.\n\n### Why's Serial-Id?\n\nThis is a conversion of [ahawker/ulid](https://github.com/ahawker/ulid) 128 bits implementation to short 80 bits identifier with purpose of sortability and uses Crockford's [Base32](https://www.crockford.com/base32.html) encoding\n\n### Installation\n\nTo install serial-id from [github](https://github.com/mysteryjeans/serial-id.git):\n```bash\n    $ pip install --upgrade git+https://github.com/mysteryjeans/serial-id.git\n```\n\nTo install serial-id from source:\n```bash\n    $ git clone https://github.com/mysteryjeans/serial-id.git\n    $ cd serial-id && python setup.py install\n```\n\n### Usage\n\nCreate a brand new SerialId.\n\nThe timestamp value (40-bits) is from [time.time()](https://docs.python.org/3/library/time.html?highlight=time.time#time.time) with centiseconds precision.\n\nThe randomness value (40-bits) is from [os.urandom()](https://docs.python.org/3/library/os.html?highlight=os.urandom#os.urandom).\n\n```python\nimport serialid\nserialid.new()\n<SerialId('4t8ax5bs-6gvqk2sy')>\n```\n\n### Sequential Ids but with randomness\n\nCreate a new SerialId from an existing 80-bit value with guaranteed sort order.\n\n```python\nimport serialid\nseq_ids = []\nnew_sid = serialid.new()\n\nfor _ in range(0, 1000):\n    new_sid = serialid.new_seq(new_sid)\n    seq_ids.append(new_sid)\n\nseq_ids[:10]\n```\n\nCreate a new SerialId from an existing timestamp value, such as a [datetime](https://docs.python.org/3/library/datetime.html#module-datetime) object.\n\nSupports timestamp values as `int`, `float`, `str`, `bytes`, `bytearray`, `memoryview`, `datetime`, `Timestamp`, and `SerialId` types.\n\n```python\nimport datetime, serialid\nserialid.from_timestamp(datetime.datetime(1999, 1, 1))\n<SerialId('4t8ax5bs-6gvqk2sy')>\n```\n\nCreate a new SerialId from an existing randomness value.\n\nSupports randomness values as `int`, `float`, `str`, `bytes`, `bytearray`, `memoryview`, `Randomness` types.\n\n```python\nimport os, serialid\nrandomness = os.urandom(10)\nserialid.from_randomness(randomness)\n<SerialId('4t8ax5bs-sgx82mz4')>\n```\n\nFor cases when you don't necessarily control the data type (input from external system), you can use the `parse` method\nwhich will attempt to make the correct determination for you. Please note that this will be slightly slower than creating\nthe instance from the respective `from_*` method as it needs to make a number of type/conditional checks.\n\nSupports values as `int`, `float`, `str`, `bytes`, `bytearray`, `memoryview`, and `SerialId` types.\n\n```python\nimport serialid\nvalue = db.model.get_id()  ## Unsure about datatype -- Could be int or string?\nserialid.parse(value) # Parses from str, int, float, bytes ...\n<SerialId('4t8ax5bs-vp61yjkk')>\n```\n\nOnce you have a SerailId object, there are a number of ways to interact with it.\n\nThe `timestamp` method will give you a snapshot view of the first 40-bits of the SerialId while the `randomness` method\nwill give you a snapshot of the last 40-bits.\n\n```python\nimport serialid\nid = serialid.new()\nid\n<SerialId('4t8ax5bs-vp61yjkk')>\nid.timestamp()\n<Timestamp('4t8ax5bs')>\nid.randomness()\n<Randomness('vp61yjkk')>\n```\n\nThe `SerialId`, `Timestamp`, and `Randomness` classes all derive from the same base class, a `MemoryView`.\n\nA `MemoryView` provides the `bin`, `bytes`, `hex`, `int`, `oct`, and `str`, methods for changing any values representation.\n\n```python\nimport serialid\nu = serialid.new()\nu\n<SerialId('4t8ax5bs-vp61yjkk')\nu.timestamp()\n<Timestamp('4t8ax5bs')>\nu.timestamp().int\n165636436000\nu.timestamp().bytes\nb'&\\x90\\xb3j\\x13'\nu.timestamp().datetime\ndatetime.datetime(2022, 6, 28, 2, 12, 1, 190000)\nu.randomness().bytes\nb'\\x01c.)\\xfa'\nu.bytes[5:] == u.randomness().bytes\nTrue\nu.str\n'4t8ax5bs-vp61yjkk'\nu.int\n182119165340642244955695\nu.bin\n'0b100110100100001011001100100001111000001001111100111101001011100000111000101111'\nu.hex\n'0x2690b321e09f3d2e0e2f'\nu.oct\n'0o46441314417011747513407057'\n```\n\nA `MemoryView` also provides rich comparison functionality.\n\n```python\nimport datetime, time, serialid\nu1 = serialid.new()\ntime.sleep(5)\nu2 = serialid.new()\nu1 < u2\nTrue\nu3 = serialid.from_timestamp(datetime.datetime(2039, 1, 1))\nu1 < u2 < u3\nTrue\n[u.timestamp().datetime for u in sorted([u2, u3, u1])]\n[datetime.datetime(2022, 6, 28, 2, 24, 56, 700000),\n datetime.datetime(2022, 6, 28, 2, 25, 1, 710000),\n datetime.datetime(2039, 1, 1, 0, 0)]\n```\n\n### Contributing\n\nIf you would like to contribute, simply fork the repository, push your changes and send a pull request.\nPull requests will be brought into the `master` branch via a rebase and fast-forward merge with the goal of having a linear branch history with no merge commits.\n\n### License\n\n[MIT License](LICENSE)\n\n## Why not ULID?\n\nSerailId provides:\n\n* 80-bit sortable Ids\n* 1099511627776 unique Serial Ids per centisecond 100th of a second\n* Lexicographically sortable!\n* Canonically encoded as a 16 character string, as opposed to the 24 character ULID\n* Uses Crockford's base32 for better efficiency and readability (5 bits per character)\n* Case insensitive\n* No special characters (URL safe)\n\n## Specification\n\nBelow is the current specification of ULID as implemented in this repository.\n\nThe binary format is implemented.\n\n```\n  4t8ax5bs           vp61yjkk\n\n|----------|       |----------|\n Timestamp          Randomness\n   8chars             8chars\n   40bits             40bits\n```\n\n### Components\n\n**Timestamp**\n* 40 bit integer\n* UNIX-time in centiseconds\n* Won't run out of space till the year 2322 (300 years).\n\n**Randomness**\n* 40 bits\n* Cryptographically secure source of randomness, if possible\n\n### Sorting\n\nThe left-most character must be sorted first, and the right-most character sorted last (lexical order).\nThe default ASCII character set must be used. Within the same centiseconds, use `serialid.new_seq` to guaranteed sort order\n\n### Encoding\n\nCrockford's Base32 is used as shown. This alphabet excludes the letters I, L, O, and U to avoid confusion and abuse.\n\n```\n0123456789abcdefghjkmnpqrstvwxyz\n```\n\n### String Representation\n\n```\nttttttttrrrrrrrr\n\nwhere\nt is Timestamp\nr is Randomness\n```\n\n### Links\n\n* [ULID Implementation (Python)](https://github.com/ahawker/ulid)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mysteryjeans/serial-id/archive/refs/tags/v-0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mysteryjeans/serial-id",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "serial-id",
    "package_url": "https://pypi.org/project/serial-id/",
    "platform": null,
    "project_url": "https://pypi.org/project/serial-id/",
    "project_urls": {
      "Download": "https://github.com/mysteryjeans/serial-id/archive/refs/tags/v-0.1.tar.gz",
      "Homepage": "https://github.com/mysteryjeans/serial-id"
    },
    "release_url": "https://pypi.org/project/serial-id/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Sequential Unique Short & Sortable Identifier",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14265453,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e5e4668afa5ebb4a2fe763bf986e50cc9e83677859f456c0b1dfa36a022cd39",
          "md5": "4956aa6ebff0b4cdf4b132979cd53b8c",
          "sha256": "4b7120f3b33f36c47da67da8d2c3ab83df7f7ee4ec5ff33c9fc9d9fb4a7bd25a"
        },
        "downloads": -1,
        "filename": "serial_id-0.1-py3.9.egg",
        "has_sig": false,
        "md5_digest": "4956aa6ebff0b4cdf4b132979cd53b8c",
        "packagetype": "bdist_egg",
        "python_version": "0.1",
        "requires_python": null,
        "size": 13732,
        "upload_time": "2022-06-27T22:16:24",
        "upload_time_iso_8601": "2022-06-27T22:16:24.499406Z",
        "url": "https://files.pythonhosted.org/packages/9e/5e/4668afa5ebb4a2fe763bf986e50cc9e83677859f456c0b1dfa36a022cd39/serial_id-0.1-py3.9.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4d7fa28df150a1aa8e9e96b7d222b4373592ae2b7997e6f3124b6732a45ee94",
          "md5": "871c662f97bc27bd1b5b78a8f314ae72",
          "sha256": "8f97b50869851e39da7597c515f5da5b2d3d0d9f75edfb81c1b74005ea530928"
        },
        "downloads": -1,
        "filename": "serial-id-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "871c662f97bc27bd1b5b78a8f314ae72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12668,
        "upload_time": "2022-06-27T22:16:22",
        "upload_time_iso_8601": "2022-06-27T22:16:22.179444Z",
        "url": "https://files.pythonhosted.org/packages/c4/d7/fa28df150a1aa8e9e96b7d222b4373592ae2b7997e6f3124b6732a45ee94/serial-id-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e5e4668afa5ebb4a2fe763bf986e50cc9e83677859f456c0b1dfa36a022cd39",
        "md5": "4956aa6ebff0b4cdf4b132979cd53b8c",
        "sha256": "4b7120f3b33f36c47da67da8d2c3ab83df7f7ee4ec5ff33c9fc9d9fb4a7bd25a"
      },
      "downloads": -1,
      "filename": "serial_id-0.1-py3.9.egg",
      "has_sig": false,
      "md5_digest": "4956aa6ebff0b4cdf4b132979cd53b8c",
      "packagetype": "bdist_egg",
      "python_version": "0.1",
      "requires_python": null,
      "size": 13732,
      "upload_time": "2022-06-27T22:16:24",
      "upload_time_iso_8601": "2022-06-27T22:16:24.499406Z",
      "url": "https://files.pythonhosted.org/packages/9e/5e/4668afa5ebb4a2fe763bf986e50cc9e83677859f456c0b1dfa36a022cd39/serial_id-0.1-py3.9.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4d7fa28df150a1aa8e9e96b7d222b4373592ae2b7997e6f3124b6732a45ee94",
        "md5": "871c662f97bc27bd1b5b78a8f314ae72",
        "sha256": "8f97b50869851e39da7597c515f5da5b2d3d0d9f75edfb81c1b74005ea530928"
      },
      "downloads": -1,
      "filename": "serial-id-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "871c662f97bc27bd1b5b78a8f314ae72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12668,
      "upload_time": "2022-06-27T22:16:22",
      "upload_time_iso_8601": "2022-06-27T22:16:22.179444Z",
      "url": "https://files.pythonhosted.org/packages/c4/d7/fa28df150a1aa8e9e96b7d222b4373592ae2b7997e6f3124b6732a45ee94/serial-id-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}