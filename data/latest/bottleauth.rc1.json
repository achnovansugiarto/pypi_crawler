{
  "info": {
    "author": "gunville",
    "author_email": "rk13088@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Bottle",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": " ## BottleAuth - Authentication and Authorization Middleware\n\nThe **BotAuth()** is a plugin class for the [Bottle web framework.](https://github.com/bottlepy/bottle):\n* **BotAuth** compliments a set of Bottle authentication modules by providing simplified authentication and authorization mechanisms for building web apps.  Supported authentication modules include:\n    * [BottleSaml - SamlSP Service Provider module](https://github.com/Glocktober/BottleSaml)\n    * [BottleOIDC - OIDC Service Provider module](https://github.com/Glocktober/BottleOIDC)\n    * [BottleCasClient - a Central Authentication Service (CAS) client module](https://github.com/Glocktober/BottleCasClient)\n* **BotAuth** establishes *route-based* and *prefix-based* **authorization** requirements, using attribute/value pairs. These requirements evaluate against the ***attributes***  obtained from the authenticaiton module for the user.\n* **BotAuth** utilizes [BottleSessions](https://github.com/Glocktober/BottleSessions) to provide persistent session access to the authenticator data.\n* **BotAuth** Complies with [Bottle Plugin API v2](https://bottlepy.org/docs/dev/plugindev.html).\n\n## Quickstart\n> pypi installation:\n```bash\n# python3 -m pip install BotAuth\n```\nAdditionally, the desired authentication module will need to be installed.\n### Initializing BotAuth Middlware\n> Adding BotAuth to a bottle app:\n```python\nfrom bottle import Bottle\nfrom BottleSessions import BottleSessions   \nfrom BottleSaml import SamlSP\nfrom BotAuth import BotAuth  \n\n# import SAML configuration\nfrom config import saml_config              \n\n# Create a Bottle application context\napp = Bottle()                              \n\n# Install session middleware (Before SAML)\nBottleSessions(app)                         \n\n# Create the SAML Service Provider (SP)\n# See READMESP.md for details\nsaml = SamlSP(app, saml_config=saml_config)\n\n# Configure and install BotAuth middleware\nauth = BotAuth(saml)\napp.install(auth)\n```\nThe default **`auth=BotAuth(saml)`** configuration provides **Opt-Out** authentication on all routes but establishes no authorization requirements. \n\n## Requiring Authentication\n\n**BotAuth** provided two modes for requiring Authentication: **Bottle** apps can  **Opt-Out**, or **Opt-In** to authentication.\n### Opt-Out Authentication\n*By default **BotAuth** adds an authentication requirement on ***all*** views in the app.* \n\nAn unauthenticated user accessing any view will invoke the authentication process specific to the specific module (e.g. SAML, CAS, or OIDC), requiring successful login to access the page.\n\nThis isn't always the desired behavior. There are usually some views in your application that you would like accessible even to unauthenticated users. \n\nYou can **Opt-Out** of authentication on these views using the **`skip=`** argument to the **`@app.route(...)`**, listing the **BotAuth** plugin instance (**`skip=auth`**) or by plugin name (**`skip='BotAuth'`**) \n> **Opting-Out** of authentication on a view:\n```python\nsaml = SamlSP(app, saml_config)\nauth = BotAuth(saml, authn_all_routes=True)\napp.install(auth)\n    ---\n@app.route('/help', skip=[auth]) \ndef help_view():\n    return `This is an unprotected route`\n```\nThe **BotAuth()** parameter **`authn_all_routes`** set to `True` (the default) establishes the requirement to **Opt-Out**.\n### Opt-In Authentication\n**BotAuth** also has an **`Opt-In`** mode. \n\nSome web apps require authentication on only a few views. For these it is easier to ***`Opt-in`*** those page by adding **`authn=True`** (or **`authz=`**) in the **`app.route(...)`** config options.\n\n> **Opt-In** authentication:\n```python\nsaml = SamlSP(saml_config)\nauth = BotAuth(saml, authn_all_routes=False)\napp.install(auth)\n    ---\n# SET Opt-In mode\nauth.authn_all_routes = False\n    ---\n@app.route('/login', authn=True)\ndef login_view():\n    return 'You are now logged in.'\n```\n**Opt-In** behavior is established by **BotAuth** instantiated with **`authn_all_routes`** set to `False`.\n\nTo summerize, ***Opt-In***/***Opt-Out*** behavior is set for the whole app by the **BotAuth()** parameter **`authn_all_routes`**, \nand ***Opt-Out*** is the default behavior.\n\n## Requiring Authorization\n**BotAuth** provides two methods of applying authorization requirements to views in a **Bottle** web app. These are **route-based authorization**, and **path-based authorization**.\n### Route-based Authorization\nRoute authorization restrictions are added to a views with the **`authz={...}`** config option in **`app.route(...)`** decorator.\n\nRoute based authorization can be used in either Opt-in or Opt-out mode, and any **`authz`** statement provides implicit **`authn=True`** authentication.\n\nAuthorization restrictions of **`authz={attr:value}`** are defined by attribute/value pairs in Python `dict` form. \n> route-based authorization:\n```python\n@app.route('/alices_page', authz={'username': 'alice})\ndef alice_only():\n    return 'hi Alice'\n```\nThe values and attributes are compared to  attributes acquired from the authentication module for the authenticated user and stored in the users session.\n\nThe **`authz`** requirements are met if the user has the same attribute, and the value for that attribute matches the **authz** statement.  If so, the request reaches the protected view.\n\nFailure to match these required value or not posessing the attribute results in a ***403 Unauthorized error***. \n\n##### Multiple value (list) matching:\nIf multiple values for an attribute are specified using a list (*e.g.* **`authz={'username':['bob','alice]}`**), the user **needs to match only one of the list** and the restriction met.\n\n##### Multiple atttribute matching:\nIf multiple attributes are specified, (*e.g.* **`authz={'group': ['sysadmin','netadmin'], 'mfa': True}`**) the user must match at least one value **for each** attribute.  The user must have all the attributes, and all the attributes must be satisfied for the restriction to be met.\n\n### Route-based Authorization Examples\nConsider these examples:\n> Multiple **`authz`** examples:\n```python\n# Only username bob can access view\n@app.route('/bob', authz={'username':'bob'})\ndef bob_only_view()\n    return 'Hi Bob'\n\n# Anyone in the sysadmin group\n@app.route('/sysadmins', authz={'groups':'sysadmins'}\n)\ndef sysadmin_view():\n    return 'Hi sysadmin!'\n\n# Anyone in sysadmin, netadmin, or cloudadmins\n@app.route('/alladmins', authz={'groups': 'sysadmins', 'netadmins', 'cloudadmins']})\ndef alladmin_view():\n    return 'Hi various admins!'\n\n# User alice or bob, but only with MFA authentication\n@app.route('/multiple', authz={\n    'username' : ['alice', 'bob'],\n    'mfa' : True})\ndef mfaonly():\n    return 'You\\'ve used your MFA!'\n```\n***Tip:*** To keep authorizations managable, construct a `dict` for each use-case and apply it `**kwargs` style in `@app.route()`. Reuse them on routes with the same authorization requirement:\n> Example of use case authorization:\n```python\nadmin_restricted = {'groups': ['sysadmins', 'netadmins', 'cloudadmins']}\nbudgets = {'groups': ['project_team','accounting']}\nskip_auth = {'skip':[saml]}\n\n@app.rotue('/greeting', **skip_auth)\ndef greet():\n    return 'Hello'\n\n@app.route('/admin', **admin_restricted)\ndef admin_only():\n    return 'Hello admin'\n\n@app.route('/budget/2022', **budgets)\ndef budget_2022():\n    return 'Hello EXCELers'\n\n@app.route('/route53', **admin_restricted)\ndef r53():\n    return 'Hello again admins'\n```\nThis is not required, but makes it a little bit easier to write and read.\n### Prefix-based Authorization\nOften sites have structured layouts based on paths and formed in a logical tree, say, based on project, department, or customer.  Prefix-based authorization provides an easy way to provide authorization restrictions.\n> Example logical tree of Departments:\n```\n/ --+- helpdesk\n    |\n    +- infrastructure \n    |       |\n    |       +-- Networking\n    |       |\n    |       +-- Servers\n    |       |\n    |       +-- Storage\n    +- desktop\n            |\n            +-- PC_support\n            |\n            +-- MAC_support\n\n```\nThere are implicit authorization rules that can be created based on the prefix path of views routes:\n> Example prefix-based authorization\n```python\n# config.py segment\nit_prefix_auth={\n    # The /helpdesk path can be access by department\n    '/helpdesk' : {\n        'dept':['helpdesk','PC support']\n    },\n    # /Infrastructure accessed by 3 groups \n    '/infrastructure': {\n        'groups':['sysadmin','netadmin', 'storageadmin']\n    },\n    # The further down the tree, the fewer groups\n    '/infrastructure/Networking': {\n        'groups':'networking'\n    },\n    '/infrastructure/Servers': {\n        'groups':'sysadmin'\n    },\n    # Other attributes than groups can be used\n    '/infrastructure/Storage': {\n        'role': ['emcadmin','pureadmin']\n    },\n    '/desktop/PC_support':{\n        'dept': ['PC support']\n    },\n    '/desktop/MAC_support': {\n        'username': ['bob', 'alice']\n    }\n}\n```\nThese requirements are attached to views based on their route path.\n> Applying prefix-based authorization:\n```python\nfrom config import saml_config, it_prefix_auth\n\nsaml = SamlSP(saml_config=saml_config)\nauth = BotAuth(saml, authz_by_prefix=it_prefix_auth)\n    ...\n@app.route('/desktop/MAC_support')\ndef hello_mac():\n    return 'Hello Alice or Bob'\n```\nAgain, best practice may be to have this in a config.py file.\n#### Excluding views from path-based authorization:\nRoutes can be excluded from path-based authorization requirements using the **`skip=[auth]`** method. \n#### Using route-based with path-based authorization:\nAdditional requirements can be placed individual views using the **`authz={...}`** route config.  Both the path-based requirements and the authz requirements must be met for access to the view to be granted.\n#### Opt-out is required for path-based authorization:\nPath-based routes only function in **Opt-Out** mode (*i.e.* **auth_all_routes=True**) This better matches intent of path-based restrictions.\n\n### Available Attributes for Authorization \nAll examples here are based on the SamlSP() authenticator, but are identical with BottleOIDC BotOIDC() and BottleCasClient CasSP().\nThe attributes you have available to **BotAuth** depends on the authentication module used, and the configuration of the associated IdP.\nConsult the documentation for the specific authentication module you are using.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Glocktober/BottleAuth",
    "keywords": "'bottle CAS SAML OIDC plugin'",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BottleAuth",
    "package_url": "https://pypi.org/project/BottleAuth/",
    "platform": "",
    "project_url": "https://pypi.org/project/BottleAuth/",
    "project_urls": {
      "Homepage": "https://github.com/Glocktober/BottleAuth",
      "overview": "https://github.com/Glocktober/BottleAuth/blob/main/README.md",
      "repo": "https://github.com/Glocktober/BottleAuth"
    },
    "release_url": "https://pypi.org/project/BottleAuth/21.9.7/",
    "requires_dist": [
      "bottle (>=0.12.0)",
      "BottleSessions (>=21.07.01)"
    ],
    "requires_python": ">=3.6",
    "summary": "Authentication and Authorization module for Bottle Web Apps",
    "version": "21.9.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11391871,
  "releases": {
    "21.9.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59f8ae9dcaebf17c260e50889bc4c526cf441494ff3e3bdd7b0f2d1bf09941bd",
          "md5": "6e233b1ee7f0549aa3800620cfef1a1f",
          "sha256": "f9613d982bd014e14eb90faee77a1bcd009f67f8d7b786ff91e65a14f6fff92d"
        },
        "downloads": -1,
        "filename": "BottleAuth-21.9.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e233b1ee7f0549aa3800620cfef1a1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8716,
        "upload_time": "2021-09-08T01:56:24",
        "upload_time_iso_8601": "2021-09-08T01:56:24.586363Z",
        "url": "https://files.pythonhosted.org/packages/59/f8/ae9dcaebf17c260e50889bc4c526cf441494ff3e3bdd7b0f2d1bf09941bd/BottleAuth-21.9.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1287e246a2ee96e6dc751e177481b4cb6eca23a4e77932eaa62160cb69afb0e4",
          "md5": "24dd7a79b413b98366df806d0dbb1f0c",
          "sha256": "ad903f20cd0e33b16f5070a6725a9e6726bcd70affd5dc775eef36c51ac279a2"
        },
        "downloads": -1,
        "filename": "BottleAuth-21.9.7.tar.gz",
        "has_sig": false,
        "md5_digest": "24dd7a79b413b98366df806d0dbb1f0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11971,
        "upload_time": "2021-09-08T01:56:26",
        "upload_time_iso_8601": "2021-09-08T01:56:26.201582Z",
        "url": "https://files.pythonhosted.org/packages/12/87/e246a2ee96e6dc751e177481b4cb6eca23a4e77932eaa62160cb69afb0e4/BottleAuth-21.9.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59f8ae9dcaebf17c260e50889bc4c526cf441494ff3e3bdd7b0f2d1bf09941bd",
        "md5": "6e233b1ee7f0549aa3800620cfef1a1f",
        "sha256": "f9613d982bd014e14eb90faee77a1bcd009f67f8d7b786ff91e65a14f6fff92d"
      },
      "downloads": -1,
      "filename": "BottleAuth-21.9.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e233b1ee7f0549aa3800620cfef1a1f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8716,
      "upload_time": "2021-09-08T01:56:24",
      "upload_time_iso_8601": "2021-09-08T01:56:24.586363Z",
      "url": "https://files.pythonhosted.org/packages/59/f8/ae9dcaebf17c260e50889bc4c526cf441494ff3e3bdd7b0f2d1bf09941bd/BottleAuth-21.9.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1287e246a2ee96e6dc751e177481b4cb6eca23a4e77932eaa62160cb69afb0e4",
        "md5": "24dd7a79b413b98366df806d0dbb1f0c",
        "sha256": "ad903f20cd0e33b16f5070a6725a9e6726bcd70affd5dc775eef36c51ac279a2"
      },
      "downloads": -1,
      "filename": "BottleAuth-21.9.7.tar.gz",
      "has_sig": false,
      "md5_digest": "24dd7a79b413b98366df806d0dbb1f0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11971,
      "upload_time": "2021-09-08T01:56:26",
      "upload_time_iso_8601": "2021-09-08T01:56:26.201582Z",
      "url": "https://files.pythonhosted.org/packages/12/87/e246a2ee96e6dc751e177481b4cb6eca23a4e77932eaa62160cb69afb0e4/BottleAuth-21.9.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}