{
  "info": {
    "author": "Hiromu Ochiai",
    "author_email": "otiai10@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "- [dataviper](#dataviper)\n- [Example](#example)\n- [Why?](#why)\n- [Data Sources](#data-sources)\n- [APIs](#apis)\n  - [`profile`](#profile)\n  - [`pivot`](#pivot)\n  - [`joinability`](#joinability)\n- [Issues and TODOs](#issues-and-todos)\n\n---\n\n# dataviper\n\n[![PyPI version](https://badge.fury.io/py/dataviper.svg)](https://badge.fury.io/py/dataviper)\n[![GitHub Action](https://github.com/otiai10/dataviper/workflows/Python%20package/badge.svg)](https://github.com/otiai10/dataviper/actions)\n[![codecov](https://codecov.io/gh/otiai10/dataviper/branch/master/graph/badge.svg)](https://codecov.io/gh/otiai10/dataviper)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](./dockerfiles/setup.Python3.6.Dockerfile)\n\n`dataviper` is a SQL-based tool to get the basic data preparation done in easy way, with doing\n\n- Create \"Data Profile\" report of a table\n- One-hot encode for \"Categorical Columns\" and create a \"one-hot\" table\n- Check \"Joinability\" between 2 tables\n- // TODO: and more\n\n# Example\n\n```sh\npip install dataviper\n```\n\nYour `main.py` will look like this\n\n```python\nfrom dataviper import Client\nfrom dataviper.source import MySQL\n\nclient = Client(source=MySQL({\n    'host': 'localhost',\n    'user': 'root',\n    'password': 'xxxxxx',\n    'database': 'your_database'\n}))\n\nwith client.connect():\n    profile = client.profile('Your_Table')\n    profile.to_excel()\n```\n\n```sh\npython3 main.py\n# Then you will get 'profile_Your_Table.xlsx' ðŸ¤—\n```\n\n![image](https://user-images.githubusercontent.com/931554/79642622-00b70900-819f-11ea-89ff-524c9c93ceea.png)\n\n# Why?\n\nIt's known that \"Data Profiling\" needs to be done with scanning all the rows in a table. If you try to do this naively by `pandas` or any libraries which internally use `pandas`, it's not avoidable to use bunch of memory of your local machine and freeze your work.\n\n`dataviper` is a SQL-based Data Profiling tool, which simply and dynamically generates SQLs and lets the database machine do the annoying calculation.\n\nWith `dataviper`, you don't have to have massive local computer. All you need are a stable network and reachable SQL db.\n\n# Data Sources\n\nYou can choose your data source from\n\n- [ ] SQL Server\n    - [x] `profile`\n    - [x] `pivot`\n    - [x] `joinability`\n    - [ ] `histogram`\n- [ ] MySQL\n    - [x] `profile`\n    - [ ] `pivot`\n    - [ ] `joinability`\n    - [ ] `histogram`\n- [ ] PostgreSQL\n- [ ] CSV\n    - [x] `profile`\n    - [ ] `pivot`\n    - [ ] `joinability`\n    - [ ] `histogram`\n- [ ] Excel\n\n# APIs\n\n## `profile`\n\nCreate \"Data Profile\" excel file of a specified table.\n\nWhen you have `Sales` table like this\n\n| id | region | sales_type | price | rep_id |\n|:---:|:--------:|:----------:|:---------:|:-------:|\n| 1 | jp | phone | 240 | 115723 |\n| 2 | us | web | 90 |    125901 |\n| 3 | jp | web | 560 |     8003 |\n| 4 | us | shop | 920 |  182234 |\n| 5 | jp | NULL | 90 |    92231 |\n| 6 | us | shop | 180 |  100425 |\n| 7 | us | shop | 70 |    52934 |\n\ndo\n\n```python\nwith client.connect() as conn:\n    table_name = 'Sales'\n    profile = client.profile(table_name, example_count=3)\n    profile.to_excel()\n```\n\nthen you will get `profile_Sales.xlsx` file with\n\n| column_name | data_type | null_count | null_% | unique_count | unique_% | min | max | avg | std | example_top_3 | example_last_3 |\n|:-----------:|:----------:|:----------:|:------:|:------------:|:-------:|:---:|:---:|:----:|:---:|:------------:|:--------------:|\n| id         | bigint  | 0 | 0     | 7 | 100.00 | 1 | 7 | 4.0 | 2.0 | [1,2,3]         | [5,6,7]          |\n| region     | varchar | 0 | 0     | 2 | 28.57  |   |   |     |     | [jp,us,jp]      | [jp,us,us]       |\n| sales_type | varchar | 1 | 14.28 | 3 | 42.85  |   |   |     |     | [phone,web,web] | [None,shop,shop] |\n| price      | int     | 0 | 0     | 6 | 85.71  | 70 | 920 | 307.1428 | 295.379 | [240,90,560] | [90,180,70] |\n| rep_id     | int     | 0 | 0     | 7 | 100.00 | 8003 |182234 | 96778.7142 | 51195.79065 | [115723,125901,8003] | [92231,100425,52934] |\n\n## `pivot`\n\nSpread categorical columns to N binary columns.\n\nWhen you have `Sales` table like above, do\n\n```python\nwith client.connect() as conn:\n    table_name = 'Sales'\n    key = 'id'\n    categorical_columns = ['region', 'sales_type']\n    profile = client.get_schema(table_name)\n    client.pivot(profile, key, categorical_columns)\n```\n\nthen you will get `Sales_PIVOT_YYYYmmddHHMM` table with\n\n| id | region_jp | region_us | sales_type_phone | sales_type_web | sales_type_shop |\n|:--:|:---------:|:---------:|:----------------:|:--------------:|:---------------:|\n| 1  |  1        | 0         | 1                | 0              | 0               |\n| 2  |  0        | 1         | 0                | 1              | 0               |\n| 3  |  1        | 0         | 0                | 1              | 0               |\n| 4  |  0        | 1         | 0                | 0              | 1               |\n| 5  |  1        | 0         | 0                | 0              | 0               |\n| 6  |  0        | 1         | 0                | 0              | 1               |\n| 7  |  0        | 1         | 0                | 0              | 1               |\n\n## `joinability`\n\nCount how much 2 tables can be joined.\n\nWhen you have `Sales` table like above, and `Reps` table like this\n\n| id     | name    | tenure |\n|:------:|:-------:|:------:|\n| 8003   | Hiromu  | 9      |\n| 8972   | Ochiai  | 6      |\n| 52934  | Taro    | 1      |\n| 92231  | otiai10 | 2      |\n| 100425 | Hanako  | 7      |\n| 125901 | Chika   | 3      |\n| 182234 | Mary    | 5      |\n| 199621 | Jack    | 1      |\n\ndo\n\n```python\nwith client.connect() as conn:\n    report = client.joinability(on={'Sales': 'rep_id', 'Reps': 'id'})\n    report.to_excel()\n```\n\nthen you will get `join_Sales_Reps.xlsx` file with\n\n| table | key      | total | match | match_% | drop | drop_% |\n|:------:|:-------:|:------:|:-----:|:------:|:-----:|:------:|\n| Sales | [rep_id] | 7 | 6 | 85.714 | 1 | 14.285 |\n| Reps  | [id]     | 8 | 6 | 75.00 | 2 | 25.00 |\n\n# Issues and TODOs\n\n- https://github.com/otiai10/dataviper/issues",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/otiai10/dataviper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataviper",
    "package_url": "https://pypi.org/project/dataviper/",
    "platform": "",
    "project_url": "https://pypi.org/project/dataviper/",
    "project_urls": {
      "Homepage": "https://github.com/otiai10/dataviper"
    },
    "release_url": "https://pypi.org/project/dataviper/0.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple Data Quality Assessment Tool based on SQL",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7051529,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "376fea58a280fa3b9b9a9680cb7faadd10f25ec6c4272771c4d542b038758655",
          "md5": "bc272815a34e04a8914c5a76348d56ee",
          "sha256": "ccf47fc84ca46373fd9da979a5e7e02c6ca1204f1e6d812db9f96e330a0ded6b"
        },
        "downloads": -1,
        "filename": "dataviper-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bc272815a34e04a8914c5a76348d56ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14041,
        "upload_time": "2020-04-18T10:15:46",
        "upload_time_iso_8601": "2020-04-18T10:15:46.718605Z",
        "url": "https://files.pythonhosted.org/packages/37/6f/ea58a280fa3b9b9a9680cb7faadd10f25ec6c4272771c4d542b038758655/dataviper-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d43dc95550b6fbcd7da16d7a65a8ab65f06755f749c3bcb47d82a204ef8fe60",
          "md5": "9d3ad8b2927f1d3080921422b49a43aa",
          "sha256": "85d09c1d484b5bf756d9022936916739e7bb2527f19bff59237e3efb161856da"
        },
        "downloads": -1,
        "filename": "dataviper-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9d3ad8b2927f1d3080921422b49a43aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15158,
        "upload_time": "2020-04-18T16:22:12",
        "upload_time_iso_8601": "2020-04-18T16:22:12.991113Z",
        "url": "https://files.pythonhosted.org/packages/7d/43/dc95550b6fbcd7da16d7a65a8ab65f06755f749c3bcb47d82a204ef8fe60/dataviper-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "008d9adb64b7157d2e742ccdd125f7c00dec54b00881cb1a01669fba2fc41b25",
          "md5": "40afb0831bfecba043f5099001bb6c7d",
          "sha256": "e124f9b64e754f43b5aef7b4c5c04633dd7fe0a8be52ff96889e4b25f87cec3a"
        },
        "downloads": -1,
        "filename": "dataviper-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "40afb0831bfecba043f5099001bb6c7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14869,
        "upload_time": "2020-04-19T05:20:13",
        "upload_time_iso_8601": "2020-04-19T05:20:13.665403Z",
        "url": "https://files.pythonhosted.org/packages/00/8d/9adb64b7157d2e742ccdd125f7c00dec54b00881cb1a01669fba2fc41b25/dataviper-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "008d9adb64b7157d2e742ccdd125f7c00dec54b00881cb1a01669fba2fc41b25",
        "md5": "40afb0831bfecba043f5099001bb6c7d",
        "sha256": "e124f9b64e754f43b5aef7b4c5c04633dd7fe0a8be52ff96889e4b25f87cec3a"
      },
      "downloads": -1,
      "filename": "dataviper-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "40afb0831bfecba043f5099001bb6c7d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14869,
      "upload_time": "2020-04-19T05:20:13",
      "upload_time_iso_8601": "2020-04-19T05:20:13.665403Z",
      "url": "https://files.pythonhosted.org/packages/00/8d/9adb64b7157d2e742ccdd125f7c00dec54b00881cb1a01669fba2fc41b25/dataviper-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}