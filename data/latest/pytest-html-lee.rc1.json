{
  "info": {
    "author": "Kacy Lee",
    "author_email": "kacylining@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "pytest-html\n===========\n\npytest-html is a plugin for `pytest <http://pytest.org>`_ that generates a\nHTML report for the test results.\n\n.. image:: https://img.shields.io/badge/license-MPL%202.0-blue.svg\n   :target: https://github.com/pytest-dev/pytest-html/blob/master/LICENSE\n   :alt: License\n.. image:: https://img.shields.io/pypi/v/pytest-html.svg\n   :target: https://pypi.python.org/pypi/pytest-html/\n   :alt: PyPI\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest-html.svg\n   :target: https://anaconda.org/conda-forge/pytest-html\n   :alt: Conda Forge\n.. image:: https://img.shields.io/travis/pytest-dev/pytest-html.svg\n   :target: https://travis-ci.org/pytest-dev/pytest-html/\n   :alt: Travis\n.. image:: https://img.shields.io/github/issues-raw/pytest-dev/pytest-html.svg\n   :target: https://github.com/pytest-dev/pytest-html/issues\n   :alt: Issues\n.. image:: https://img.shields.io/requires/github/pytest-dev/pytest-html.svg\n   :target: https://requires.io/github/pytest-dev/pytest-html/requirements/?branch=master\n   :alt: Requirements\n\nRequirements\n------------\n\nYou will need the following prerequisites in order to use pytest-html:\n\n- Python 3.6+ or PyPy3\n\nInstallation\n------------\n\nTo install pytest-html:\n\n.. code-block:: bash\n\n  $ pip install pytest-html\n\nThen run your tests with:\n\n.. code-block:: bash\n\n  $ pytest --html=report.html\n\nANSI codes\n----------\n\nNote that ANSI code support depends on the\n`ansi2html <https://pypi.python.org/pypi/ansi2html/>`_ package. Due to the use\nof a less permissive license, this package is not included as a dependency. If\nyou have this package installed, then ANSI codes will be converted to HTML in\nyour report.\n\nCreating a self-contained report\n--------------------------------\n\nIn order to respect the `Content Security Policy (CSP)\n<https://developer.mozilla.org/docs/Web/Security/CSP>`_,\nseveral assets such as CSS and images are stored separately by default.\nYou can alternatively create a self-contained report, which can be more\nconvenient when sharing your results. This can be done in the following way:\n\n.. code-block:: bash\n\n   $ pytest --html=report.html --self-contained-html\n\nImages added as files or links are going to be linked as external resources,\nmeaning that the standalone report HTML-file may not display these images\nas expected.\n\nThe plugin will issue a warning when adding files or links to the standalone report.\n\nEnhancing reports\n-----------------\n\nAppearance\n~~~~~~~~~~\n\nCustom CSS (Cascasding Style Sheets) can be passed on the command line using\nthe :code:`--css` option. These will be applied in the order specified, and can\nbe used to change the appearance of the report.\n\n.. code-block:: bash\n\n  $ pytest --html=report.html --css=highcontrast.css --css=accessible.css\n\nReport Title\n~~~~~~~~~~~~\n\nBy default report title will be the filename of the report, you can edit it by using the :code: `pytest_html_report_title` hook:\n\n.. code-block:: python\n\n   import pytest\n   from py.xml import html\n\n   def pytest_html_report_title(report)\n      report.title = \"My very own title!\"\n\nEnvironment\n~~~~~~~~~~~\n\nThe *Environment* section is provided by the `pytest-metadata\n<https://pypi.python.org/pypi/pytest-metadata/>`_, plugin, and can be accessed\nvia the :code:`pytest_configure` hook:\n\n.. code-block:: python\n\n  def pytest_configure(config):\n      config._metadata['foo'] = 'bar'\n\nThe generated table will be sorted alphabetically unless the metadata is a\n:code:`collections.OrderedDict`.\n\nAdditional summary information\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can edit the *Summary* section by using the :code:`pytest_html_results_summary` hook:\n\n.. code-block:: python\n\n   import pytest\n   from py.xml import html\n\n   def pytest_html_results_summary(prefix, summary, postfix):\n       prefix.extend([html.p(\"foo: bar\")])\n\nExtra content\n~~~~~~~~~~~~~\n\nYou can add details to the HTML reports by creating an 'extra' list on the\nreport object. Here are the types of extra content that can be added:\n\n==========  ============================================\nType        Example\n==========  ============================================\nRaw HTML    ``extra.html('<div>Additional HTML</div>')``\n`JSON`_     ``extra.json({'name': 'pytest'})``\nPlain text  ``extra.text('Add some simple Text')``\nURL         ``extra.url('http://www.example.com/')``\nImage       ``extra.image(image, mime_type='image/gif', extension='gif')``\nImage       ``extra.image('/path/to/file.png')``\nImage       ``extra.image('http://some_image.png')``\n==========  ============================================\n\n**Note**: When adding an image from file, the path can be either absolute\nor relative.\n\n**Note**: When using ``--self-contained-html``, images added as files or links\nmay not work as expected, see section `Creating a self-contained report`_ for\nmore info.\n\nThere are also convenient types for several image formats:\n\n============  ====================\nImage format  Example\n============  ====================\nPNG           ``extra.png(image)``\nJPEG          ``extra.jpg(image)``\nSVG           ``extra.svg(image)``\n============  ====================\n\nThe following example adds the various types of extras using a\n:code:`pytest_runtest_makereport` hook, which can be implemented in a plugin or\nconftest.py file:\n\n.. code-block:: python\n\n  import pytest\n  @pytest.hookimpl(hookwrapper=True)\n  def pytest_runtest_makereport(item, call):\n      pytest_html = item.config.pluginmanager.getplugin('html')\n      outcome = yield\n      report = outcome.get_result()\n      extra = getattr(report, 'extra', [])\n      if report.when == 'call':\n          # always add url to report\n          extra.append(pytest_html.extras.url('http://www.example.com/'))\n          xfail = hasattr(report, 'wasxfail')\n          if (report.skipped and xfail) or (report.failed and not xfail):\n              # only add additional html on failure\n              extra.append(pytest_html.extras.html('<div>Additional HTML</div>'))\n          report.extra = extra\n\nYou can also specify the :code:`name` argument for all types other than :code:`html` which will change the title of the\ncreated hyper link:\n\n.. code-block:: python\n\n    extra.append(pytest_html.extras.text('some string', name='Different title'))\n\nIt is also possible to use the fixture :code:`extra` to add content directly\nin a test function without implementing hooks. These will generally end up\nbefore any extras added by plugins.\n\n.. code-block:: python\n\n   from pytest_html import extras\n\n   def test_extra(extra):\n      extra.append(extras.text('some string'))\n\n\nModifying the results table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the columns by implementing custom hooks for the header and\nrows. The following example :code:`conftest.py` adds a description column with\nthe test function docstring, adds a sortable time column, and removes the links\ncolumn:\n\n.. code-block:: python\n\n  from datetime import datetime\n  from py.xml import html\n  import pytest\n\n  def pytest_html_results_table_header(cells):\n      cells.insert(2, html.th('Description'))\n      cells.insert(1, html.th('Time', class_='sortable time', col='time'))\n      cells.pop()\n\n  def pytest_html_results_table_row(report, cells):\n      cells.insert(2, html.td(report.description))\n      cells.insert(1, html.td(datetime.utcnow(), class_='col-time'))\n      cells.pop()\n\n  @pytest.hookimpl(hookwrapper=True)\n  def pytest_runtest_makereport(item, call):\n      outcome = yield\n      report = outcome.get_result()\n      report.description = str(item.function.__doc__)\n\nYou can also remove results by implementing the\n:code:`pytest_html_results_table_row` hook and removing all cells. The\nfollowing example removes all passed results from the report:\n\n.. code-block:: python\n\n  import pytest\n\n  def pytest_html_results_table_row(report, cells):\n      if report.passed:\n        del cells[:]\n\nThe log output and additional HTML can be modified by implementing the\n:code:`pytest_html_results_html` hook. The following example replaces all\nadditional HTML and log output with a notice that the log is empty:\n\n.. code-block:: python\n\n  import pytest\n\n  def pytest_html_results_table_html(report, data):\n      if report.passed:\n          del data[:]\n          data.append(html.div('No log output captured.', class_='empty log'))\n\nDisplay options\n---------------\n\nBy default, all rows in the **Results** table will be expanded except those that have :code:`Passed`.\n\nThis behavior can be customized either with a query parameter: :code:`?collapsed=Passed,XFailed,Skipped`\nor by setting the :code:`render_collapsed` in a configuration file (pytest.ini, setup.cfg, etc).\n\n.. code-block:: ini\n\n  [pytest]\n  render_collapsed = True\n\n**NOTE:** Setting :code:`render_collapsed` will, unlike the query parameter, affect all statuses.\n\nScreenshots\n-----------\n\n.. image:: https://cloud.githubusercontent.com/assets/122800/11952194/62daa964-a88e-11e5-9745-2aa5b714c8bb.png\n   :target: https://cloud.githubusercontent.com/assets/122800/11951695/f371b926-a88a-11e5-91c2-499166776bd3.png\n   :alt: Enhanced HTML report\n\nContributing\n------------\n\nWe welcome contributions.\n\nTo learn more, see `Development <https://github.com/pytest-dev/pytest-html/blob/master/development.rst>`_\n\nResources\n---------\n\n- `Release Notes <http://github.com/pytest-dev/pytest-html/blob/master/CHANGES.rst>`_\n- `Issue Tracker <http://github.com/pytest-dev/pytest-html/issues>`_\n- `Code <http://github.com/pytest-dev/pytest-html/>`_\n\n.. _JSON: http://json.org/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KacyInGitHub/pytest-html.git",
    "keywords": "py.test pytest html report",
    "license": "Mozilla Public License 2.0 (MPL 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-html-lee",
    "package_url": "https://pypi.org/project/pytest-html-lee/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-html-lee/",
    "project_urls": {
      "Homepage": "https://github.com/KacyInGitHub/pytest-html.git"
    },
    "release_url": "https://pypi.org/project/pytest-html-lee/0.0.1/",
    "requires_dist": [
      "pytest (>=5.0)",
      "pytest-metadata"
    ],
    "requires_python": ">=3.6",
    "summary": "optimized pytest plugin for generating HTML reports",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7593928,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eba2a0622de736b3f7de7a910c464c5dfdc4fe39b3269b6aa000bba1b6ea5056",
          "md5": "efcd60aa3451b246dd01f59d32fb9e91",
          "sha256": "39ff05245763fb2368a05f32ecdb1626a66d7ed9f26b0f1d513914501005c524"
        },
        "downloads": -1,
        "filename": "pytest_html_lee-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efcd60aa3451b246dd01f59d32fb9e91",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 16134,
        "upload_time": "2020-06-30T07:45:06",
        "upload_time_iso_8601": "2020-06-30T07:45:06.171435Z",
        "url": "https://files.pythonhosted.org/packages/eb/a2/a0622de736b3f7de7a910c464c5dfdc4fe39b3269b6aa000bba1b6ea5056/pytest_html_lee-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4dc49b7eb54e8b6cafd5a58fac5f8b5df81313c8817bc6e355991e722ac3d6f",
          "md5": "3ec75a09770da4fdbd65dfa5dd4a3148",
          "sha256": "c4b2fdf413269712575f8ab8b1713acdf9a965ccfe613cf11bef75493439f350"
        },
        "downloads": -1,
        "filename": "pytest-html-lee-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ec75a09770da4fdbd65dfa5dd4a3148",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30567,
        "upload_time": "2020-06-30T07:45:09",
        "upload_time_iso_8601": "2020-06-30T07:45:09.761489Z",
        "url": "https://files.pythonhosted.org/packages/f4/dc/49b7eb54e8b6cafd5a58fac5f8b5df81313c8817bc6e355991e722ac3d6f/pytest-html-lee-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eba2a0622de736b3f7de7a910c464c5dfdc4fe39b3269b6aa000bba1b6ea5056",
        "md5": "efcd60aa3451b246dd01f59d32fb9e91",
        "sha256": "39ff05245763fb2368a05f32ecdb1626a66d7ed9f26b0f1d513914501005c524"
      },
      "downloads": -1,
      "filename": "pytest_html_lee-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efcd60aa3451b246dd01f59d32fb9e91",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 16134,
      "upload_time": "2020-06-30T07:45:06",
      "upload_time_iso_8601": "2020-06-30T07:45:06.171435Z",
      "url": "https://files.pythonhosted.org/packages/eb/a2/a0622de736b3f7de7a910c464c5dfdc4fe39b3269b6aa000bba1b6ea5056/pytest_html_lee-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4dc49b7eb54e8b6cafd5a58fac5f8b5df81313c8817bc6e355991e722ac3d6f",
        "md5": "3ec75a09770da4fdbd65dfa5dd4a3148",
        "sha256": "c4b2fdf413269712575f8ab8b1713acdf9a965ccfe613cf11bef75493439f350"
      },
      "downloads": -1,
      "filename": "pytest-html-lee-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3ec75a09770da4fdbd65dfa5dd4a3148",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30567,
      "upload_time": "2020-06-30T07:45:09",
      "upload_time_iso_8601": "2020-06-30T07:45:09.761489Z",
      "url": "https://files.pythonhosted.org/packages/f4/dc/49b7eb54e8b6cafd5a58fac5f8b5df81313c8817bc6e355991e722ac3d6f/pytest-html-lee-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}