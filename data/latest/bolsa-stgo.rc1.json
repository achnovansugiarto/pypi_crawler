{
  "info": {
    "author": "Lautaro Parada Opazo",
    "author_email": "lautaro.parada.opazo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Bolsa de Santiago startup API\n[![forthebadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)\n\n\n[![Python Version](https://img.shields.io/badge/Python-3.8+-blue.svg)](https://shields.io/) ![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg) [![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/) [![PyPI status](https://img.shields.io/pypi/status/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/)\n\n**Contenidos**\n\n1. [Descripcion general](#descripcion-general-arrow_up)\n2. [InstalaciÃ³n y requisitos](#instalaciÃ³n-y-requisitos-arrow_up)\n3. [Demo Servicios de Consulta](#demo-servicios-de-consulta-arrow_up)\n    - [DocumentaciÃ³n servicios de consulta](#documentaciÃ³n-servicios-de-consulta-arrow_up)\n4. [Demo Servicios de NegociaciÃ³n](#demo-servicios-de-negociaciÃ³n-arrow_up)\n\t- [DocumentaciÃ³n servicios de negociacion](#documentaciÃ³n-servicios-de-negociacion-arrow_up)\n5. [Disclaimer](#disclaimer-arrow_up)\n\n## Descripcion general [:arrow_up:](#bolsa-de-santiago-startup-api)\n\nCliente de la [API](https://startup.bolsadesantiago.com/#/) de la bolsa de Santiago. Este cliente estandariza la llamada de datos de la API mediante un SDK desarrollado en Python :snake:.\n\n## InstalaciÃ³n y requisitos [:arrow_up:](#bolsa-de-santiago-startup-api)\n\n#### Requisitos\n- Se debe solicitar una api key con el equipo que mantiene la API. Para aquello deben ir al siguiente [link](https://startup.bolsadesantiago.com/#/)\n- ```Python``` >= 3.8\n\n#### InstalaciÃ³n\n```python\npip install bolsa-stgo\n```\n\n## Demo Servicios de Consulta [:arrow_up:](#bolsa-de-santiago-startup-api)\n\nLos endpoints de las APIs de informaciÃ³n de mercado te permitirÃ¡n simular el uso del de datos de mercado de instrumentos de renta variable, a travÃ©s del consumo de un **web-service**. A continuaciÃ³n un demo de su uso:\n\n```python\nimport os\nfrom bolsa.consultas import ConsultasAPI # Cliente de la API Servicios de Consulta\n\n# cargar la api key desde las variables de entorno del sistma\napi_key = os.environ['API_BS']\n\n# CreaciÃ³n de la instancia que manipulara las solicitudes a la API\ncon_bs = ConsultasAPI(token=api_key)\n\n# Instrumentos validos o disponibles para el usuario\nresp = con_bs.get_instrumentos_validos()\nprint('Instrumentos validos')\nprint(resp)\nprint('-'*70)\n\n# NÃºmero de solicitudes utilizadas y disponibles para el usuario\nresp = con_bs.get_request_usuario()\nprint('Request usuario')\nprint(resp)\nprint('-'*70)\n```\n\n*tutorial sobre como guardar y cargar variables de entorno en Python -> [Hiding Passwords and Secret Keys in Environment Variables (Windows)](https://youtu.be/IolxqkL7cD8)*\n\n### DocumentaciÃ³n servicios de consulta [:arrow_up:](#bolsa-de-santiago-startup-api)\n\nLa API de Servicios de Consulta posee varios endpoints disponibles para su uso. A continuaciÃ³n se explicaran los mÃ©todos del cliente que estandarizan las solicitudes a la API.\n\n1. **Client Market Data:** UUn Market Data es una aplicaciÃ³n que mantiene en memoria el estado del mercado en tiempo real. Se recibe informaciÃ³n sobre estados de negociaciÃ³n, puntas de cotizaciÃ³n, profundidad del libro de Ã³rdenes, resumen o snapshot del mercado, entre otros. Todo esta informaciÃ³n se envÃ­a mediante protocolo **FIX**. Los mÃ©todos disponibles para realizar consultas son:\n\n- ```get_indices_rv```: Valor de los principales Ã­ndices de renta variable junto con su variaciÃ³n porcentual y volumen. \n\n\t**ParÃ¡metros:** Ninguno\n\n```python\nresp = con_bs.get_indices_rv()\nprint(f\"Indices de renta variable\\n {resp}\")\n```\n\n- ```get_instrumentos_rv```: Detalle de los instrumentos disponibles para transar en el mercado de renta variable. Se muestra el precio de apertura, mÃ­nimos y mÃ¡ximos y volumen transado, entre otros.\n\n\t**ParÃ¡metros:** Ninguno.\n\n```python\nresp = con_bs.get_instrumentos_rv()\nprint(f\"Instrumentos de renta variable\\n {resp}\")\n```\n\n- ```get_puntas_rv```: Mejores ofertas que se encuentran ingresadas en el mercado de renta variable (compra mÃ¡s cara y venta barata). Se muestra precio de compra, precio de venta, cantidad, monto, condiciÃ³n de liquidaciÃ³n, entre otros.\n\n\t**ParÃ¡metros:** Ninguno.\n\n```python\nresp = con_bs.get_puntas_rv()\nprint(f\"Puntas de renta variable\\n {resp}\")\n```\n\n- ```get_transacciones_rv```: Detalle de las ultimas transacciones de los instrumentos disponibles en renta variable. Se muestra instrumento, condiciÃ³n de liquidaciÃ³n y cantidad, entre otros.\n\n\t**ParÃ¡metros:** Ninguno.\n\n```python\nresp = con_bs.get_transacciones_rv()\nprint(f\"Transacciones de renta variable\\n {resp}\")\n````\n\n2. **Instrumentos Disponibles**\n- ```get_instrumentos_validos```: Permite conocer cuales son los instrumentos del mercado de renta variable que estan disponibles para utilizar.\n\n\t**ParÃ¡metros:** Ninguno.\n\n```python\nresp = con_bs.get_instrumentos_validos()\nprint(f\"Instrumentos validos\\n {resp}\")\n````\n\n3. **Request Usuario**\n- ```get_request_usuario```: NÃºmero de solcitudes disponibles a realizar y limite diario.\n\n\t**ParÃ¡metros:** Ninguno.\n\n```python\nresp = con_bs.get_request_usuario()\nprint(f\"Solicitudes del usuario\\n {resp}\")\n```\n4. **Ticker on Demand**\n- ```get_indices```: InformaciÃ³n sobre los Ã­ndices que trazan la actividad comercial de la Bolsa de Santiago. Se muestra el nombre del Ã­ndice, el valor actual, el mayor y menor valor del dÃ­a y la variaciÃ³n porcentual.\n\n\t**ParÃ¡metros:** Ninguno.\n\n```python \nresp = con_bs.get_indices()\nprint(f\"Indices de la Bolsa de Santiago\\n {resp}\")\n```\n\n- ```get_resumen_accion```: InformaciÃ³n bursÃ¡til detallada de alguna instrumento/acciÃ³n en particular.\n\n\t**ParÃ¡metros:** *Obligatorios*\n\t- ```Nemo```(str): NemotÃ©cnico o nombre del sÃ­mbolo del instrumento a analizar.\n\n```python\nimport numpy as np\n\n# Solicitar los nombres de instrumentos disponibles \nresp = con_bs.get_instrumentos_validos()\n# seleccionar alguno al azar\nticker = con_bs.get_instrumentos_validos()[np.random.randint(len(resp))]['NEMO']\n# solicitar el resumen del instrumento.\nresp = con_bs.get_resumen_accion(Nemo=ticker)\nprint(f'Resumen de la accion de {ticker}\\n {resp}')\n```\n\n- ```get_variaciones_capital```: VariaciÃ³n de capital asociada a un NemotÃ©cnico/nombre del instrumento en particular. ***Este mÃ©todo estÃ¡ en estado BETA, dado que el equipo que soporta la API tiene inconvenientes tÃ©cnicos para este endpoint.***\n\n\t**ParÃ¡metros:** *Obligatorios*\n\t- ```Nemo```(str): Nemotecnico o nombre del simbolo del instrumento a analizar.\n\t- ```Fecha_Desde```(str): Inicio de la fecha para solicitar variaciÃ³n de capital. El formato es el siguiente YYYYmmDDhhMMss\n\t- ```Fecha_Hasta```(str): Fin de la fecha para solicitar variaciÃ³n de capital. El formato es el siguiente YYYYmmDDhhMMss\n\n```python\nresp = con_bs.get_variaciones_capital(Nemo=ticker, Fecha_Desde='2021020111000000', Fecha_Hasta='2021020411000000')\nprint(f\"Variacion de capital para {ticker}\\n {resp}\")\n```\n## Demo Servicios de NegociaciÃ³n [:arrow_up:](#bolsa-de-santiago-startup-api)\n\nLos endpoints de las APIs de ingreso de ofertas te permitirÃ¡n el ingresar ofertas mediante el sistema **DMA** y experimentar cÃ³mo se distribuyen los datos en el mercado de negociaciones de instrumentos financieros. A continuaciÃ³n un demo de su uso:\n\n```python\nimport os\nfrom bolsa.negociacion import NegociacionAPI\n\n# Cargar la api key desde las variables de entorno del sistma\napi_key = os.environ['API_BS']\n\n# CreaciÃ³n de la instancia que manipulara las solicitudes a la API\nneg_bs = NegociacionAPI(token=api_key)\n\n# Instrumentos validos o disponibles para el usuario\nresp = neg_bs.get_instrumentos_validos()\nprint('Instrumentos validos - NEGOCIACION API')\nprint(resp)\nprint('-'*70)\n\n# NÃºmero de solicitudes utilizadas y disponibles para el usuario\nresp = neg_bs.get_request_usuario()\nprint('Request usuario - NEGOCIACION API')\nprint(resp)\nprint('-'*70)\n```\n\n*tutorial sobre como guardar y cargar variables de entorno en Python -> [Hiding Passwords and Secret Keys in Environment Variables (Windows)](https://youtu.be/IolxqkL7cD8)*\n\n### DocumentaciÃ³n servicios de negociacion [:arrow_up:](#bolsa-de-santiago-startup-api)\n\n1. **Instrumentos disponibles en ingreso de ofertas**\n\n- ```get_instrumentos_validos```: Instrumentos de mercado de renta variable disponibles para ingresar ordenes.\n\n\t- **ParÃ¡metros:** Ninguno\n\n```python\nresp = neg_bs.get_instrumentos_validos()\nprint(f\"Instrumentos validos\\n {resp}\")\n```\n\n2. **Request Usuario**\n\n- ```get_request_usuario```: NÃºmero de solcitudes utilizadas y disponibles a ocupar.\n\n\t- **ParÃ¡metros:** Ninguno\n\n```python\nresp = neg_bs.get_request_usuario()\nprint(f\"Request usuario\\n {resp}\")\n```\n\n3. **Cliente Market Data**: El Market Data Renta Variable es un producto creado por la Bolsa de Comercio de Santiago con el fin de transcribir los mensajes FIX enviados por el Market Data de Renta Variable a una base de datos.\n\n*fuente: [Bolsa de Santiago](https://startup.bolsadesantiago.com/#/descripcion_negociacion)*\n\n- ```get_puntas_rv```: Mejor oferta del libro de Ã³rdenes para cada instrumento (***compra mÃ¡s cara, venta mÃ¡s barata***). Estas ofertas fueron ingresada mediante el **sistema DMA**. Se muestran los precios de compra y venta, cantidad, monto, condiciÃ³n de liquidaciÃ³n, entre otros.\n\n\t- **ParÃ¡metros:** Ninguno\n\n```python\nresp = neg_bs.get_puntas_rv()\nprint(f\"Puntas de negociacion para renta variable\\n {resp}\")\n```\n\n- ```get_transacciones_rv```: Detalle de las transacciones de renta variable que el usuario ha realizado a travÃ©s del sistema DMA. Precio de compra, precio de venta, cantidad, monto, condiciÃ³n de liquidaciÃ³n, entre otros.\n\n\t- **ParÃ¡metros:** Ninguno\n\n```python\nresp = neg_bs.get_transacciones_rv()\nprint(f\"Transacciones del mercado\\n {resp}\")\n```\n\n4. **DMA (Direct Market Access):** Los servicios **DMA** - Direct Market Access - permiten la canalizaciÃ³n o ruteo automÃ¡tico de Ã³rdenes de compra y venta de acciones en tiempo real, al sistema **SEBRA HT**.\n\n*fuente: [Bolsa de Santiago](https://startup.bolsadesantiago.com/#/descripcion_negociacion)*\n\n- ```set_ingreso_oferta```: Ingreso de ofertas para algÃºn instrumento seleccionado.\n\n\t- **ParÃ¡metros:** *Obligatorios*\n\t   ```nemo```(str): CÃ³digo  del nombre del instrumentos de renta variable.\n       ```cantidad```(int): NÃºmero de instrumentos a ofertar.\n       ```precio```(int): Precio a pagar o recibir por el instrumento.\n       ```tipo_operac```(str): C de compra, V de venta.\n       ```condicion_liquidacion```(str): Cuando se liquida la operaciÃ³n, las opciones disponibles son CN, PH o PM.\n\n```python\nimport numpy as np\n\n# Instrumentos validos o disponibles para el usuario\nresp = neg_bs.get_instrumentos_validos()\n\n# Muestra aleatoria para el ingreso de ordenes\nnemo_test = resp[np.random.randint(len(resp))]['NEMO']\nnemo_precio = resp[np.random.randint(len(resp))]['PRECIO']\n\n# Ingreso de la orden\norden_ingresada = neg_bs.set_ingreso_oferta(nemo=nemo_test, cantidad=100, precio=nemo_precio, tipo_operac='C', condicion_liquidacion='CN')\nprint(f\"Ingreso de la orden\\n {orden_ingresada}\")\n```\n\n- ```get_revision_ingreso```: RevisiÃ³n de los datos correspondientes al ingreso de ofertas a travÃ©s del sistema DMA.\n\n\t- **ParÃ¡metros:**\n\t```sec_orden```(int): nÃºmero de la orden a revisar\n\n```python\nresp = neg_bs.get_revision_ingreso(sec_orden=orden_ingresada['SEC_ORDEN'])\nprint(f\"Detalles de la orden ingresada:\\n {resp}\")\n```\n\n- ```get_revision_transaccion```: RevisiÃ³n de los datos correspondientes a una transacciÃ³n de una orden ingresada por el mÃ©todo ```set_ingreso_oferta```\n\n\t- **ParÃ¡metros:** Ninguno\n\n```python\nresp = neg_bs.get_revision_transaccion()\nprint(f\"Revision de las transacciones\\n {resp}\")\n```\n\n## Disclaimer [:arrow_up:](#bolsa-de-santiago-startup-api)\n\nLa informaciÃ³n contenida en este documento es solo para fines informativos y educativos. Nada de lo contenido en este documento se podrÃ¡ interpretar como asesoramiento financiero, legal o impositivo. El contenido de este documento corresponde Ãºnicamente a la opiniÃ³n del autor, el cual no es un asesor financiero autorizado ni un asesor de inversiones registrado. El autor no estÃ¡ afiliado como promotor de los servicios de la Bolsa de Santiago.\n\nEste documento no es una oferta para vender ni comprar instrumentos financieros. Nunca invierta mÃ¡s de lo que puede permitirse perder. Usted debe consultar a un asesor profesional registrado antes de realizar cualquier inversiÃ³n.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LautaroParada/bolsa-santiago",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bolsa-stgo",
    "package_url": "https://pypi.org/project/bolsa-stgo/",
    "platform": "",
    "project_url": "https://pypi.org/project/bolsa-stgo/",
    "project_urls": {
      "Homepage": "https://github.com/LautaroParada/bolsa-santiago"
    },
    "release_url": "https://pypi.org/project/bolsa-stgo/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SDK de la API de la bolsa de Santiago.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9665008,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b7772fb217b2c397005908de0a154a0c164baaff307242b820f8bc19418a84a",
          "md5": "7265a46da838e7c307ea9f0256e7819e",
          "sha256": "3530bb6b2982f3a5e027dc557127138ec58d285dd691a1cffc7a52bde36cdf64"
        },
        "downloads": -1,
        "filename": "bolsa_stgo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7265a46da838e7c307ea9f0256e7819e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11082,
        "upload_time": "2021-03-04T15:34:29",
        "upload_time_iso_8601": "2021-03-04T15:34:29.894436Z",
        "url": "https://files.pythonhosted.org/packages/2b/77/72fb217b2c397005908de0a154a0c164baaff307242b820f8bc19418a84a/bolsa_stgo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c96c6cd1f772dc238b1f6b3ea9ad74f1042290a04f70e08b2ca53de60d4373e",
          "md5": "44efe81805541fb960c957ed88232172",
          "sha256": "d9184cf0628d439be1ee43959b767e46554730fd28f8c26c78c7696608dcdc69"
        },
        "downloads": -1,
        "filename": "bolsa_stgo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "44efe81805541fb960c957ed88232172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11680,
        "upload_time": "2021-03-04T15:34:31",
        "upload_time_iso_8601": "2021-03-04T15:34:31.293913Z",
        "url": "https://files.pythonhosted.org/packages/7c/96/c6cd1f772dc238b1f6b3ea9ad74f1042290a04f70e08b2ca53de60d4373e/bolsa_stgo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b7772fb217b2c397005908de0a154a0c164baaff307242b820f8bc19418a84a",
        "md5": "7265a46da838e7c307ea9f0256e7819e",
        "sha256": "3530bb6b2982f3a5e027dc557127138ec58d285dd691a1cffc7a52bde36cdf64"
      },
      "downloads": -1,
      "filename": "bolsa_stgo-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7265a46da838e7c307ea9f0256e7819e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11082,
      "upload_time": "2021-03-04T15:34:29",
      "upload_time_iso_8601": "2021-03-04T15:34:29.894436Z",
      "url": "https://files.pythonhosted.org/packages/2b/77/72fb217b2c397005908de0a154a0c164baaff307242b820f8bc19418a84a/bolsa_stgo-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c96c6cd1f772dc238b1f6b3ea9ad74f1042290a04f70e08b2ca53de60d4373e",
        "md5": "44efe81805541fb960c957ed88232172",
        "sha256": "d9184cf0628d439be1ee43959b767e46554730fd28f8c26c78c7696608dcdc69"
      },
      "downloads": -1,
      "filename": "bolsa_stgo-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "44efe81805541fb960c957ed88232172",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11680,
      "upload_time": "2021-03-04T15:34:31",
      "upload_time_iso_8601": "2021-03-04T15:34:31.293913Z",
      "url": "https://files.pythonhosted.org/packages/7c/96/c6cd1f772dc238b1f6b3ea9ad74f1042290a04f70e08b2ca53de60d4373e/bolsa_stgo-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}