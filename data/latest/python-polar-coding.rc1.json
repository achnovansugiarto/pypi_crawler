{
  "info": {
    "author": "Grigory Timofeev",
    "author_email": "t1m0feev.grigorij@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Python-polar-coding\n\nA package for Polar codes simulation.\n\n## Installation\n\n```bash\npip install python-polar-coding\n```\n\n## Example\n\nHere is a simple example of simulation using `python_polar_coding`.\n\nBinary messages encoded with Polar code, modulated using BPSK, transmitted over\nchannel with AWGN and decoded using [Fast SSC](https://arxiv.org/abs/1307.7154) algorithm.\n\n```python\nfrom python_polar_coding.channels import SimpleBPSKModulationAWGN\nfrom python_polar_coding.polar_codes import FastSSCPolarCodec\nfrom python_polar_coding.simulation.functions import (\n    compute_fails,\n    generate_binary_message,\n)\n\nN = 128\nK = 64\ndesign_snr = 2.0\nmessages = 10000\n# SNR in [.0, .5, ..., 4.5, 5]\nsnr_range = [i / 2 for i in range(11)]\n\ncodec = FastSSCPolarCodec(N=N, K=K, design_snr=design_snr)\nbpsk = SimpleBPSKModulationAWGN(fec_rate=K/N)\n\nresult_ber = dict()\nresult_fer = dict()\n\nfor snr in snr_range:\n    ber = 0\n    fer = 0\n\n    for _ in range(messages):\n        msg = generate_binary_message(size=K)\n        encoded = codec.encode(msg)\n        transmitted = bpsk.transmit(message=encoded, snr_db=snr)\n        decoded = codec.decode(transmitted)\n\n        bit_errors, frame_error = compute_fails(msg, decoded)\n        ber += bit_errors\n        fer += frame_error\n\n    result_ber[snr] = ber\n    result_fer[snr] = fer\n```\n\n## Current progress\n\n### Polar code construction\n\n- [x] Arikan's Bhattacharyya bounds [Section V.A](https://arxiv.org/pdf/1501.02473.pdf)\n\n### Decoding\n- [x] SC Decoding\n- [x] [SC LIST Decoding](https://arxiv.org/abs/1206.0050)\n- [x] [Fast SSC Decoding](https://arxiv.org/abs/1307.7154)\n- [x] [RC SCAN Decoding]()\n- [x] [Generalized Fast SSC Decoding](https://arxiv.org/pdf/1804.09508.pdf)\n\n### Modulation\n\n- [x] BPSK\n\n## TODO\n\n### Polar code construction\n\n- [ ] Arikan’s Monte-Carlo estimation [Section V.B](https://arxiv.org/pdf/1501.02473.pdf)\n- [ ] Trifonov’s Gaussian approximation [Section V.D](https://arxiv.org/pdf/1501.02473.pdf)\n\n### Decoding\n- [ ] [SC STACK Decoding](https://ieeexplore.ieee.org/document/6215306)\n- [ ] [Fast SSC List Decoding](https://arxiv.org/pdf/1703.08208.pdf)\n- [ ] [Generalized Fast SSC LIST Decoding](https://arxiv.org/pdf/1804.09508.pdf)\n- [ ] CRC-aided decoders\n\n### Modulation\n\n- [ ] Q-PSK\n- [ ] 4-QAM\n\n## License\n\n[MIT License](LICENSE.txt)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fr0mhell/python-polar-coding",
    "keywords": "polar codes,fec,simulation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-polar-coding",
    "package_url": "https://pypi.org/project/python-polar-coding/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-polar-coding/",
    "project_urls": {
      "Bug Report": "https://github.com/fr0mhell/python-polar-coding/issues",
      "Homepage": "https://github.com/fr0mhell/python-polar-coding",
      "Source": "https://github.com/fr0mhell/python-polar-coding"
    },
    "release_url": "https://pypi.org/project/python-polar-coding/0.0.1/",
    "requires_dist": [
      "anytree (==2.8.0)",
      "certifi (==2020.6.20)",
      "chardet (==3.0.4)",
      "idna (==2.10)",
      "llvmlite (==0.33.0)",
      "numba (==0.50.1)",
      "numpy (==1.19.1)",
      "requests (==2.24.0)",
      "six (==1.15.0)",
      "urllib3 (==1.25.10)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Polar coding implementation in Python",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7897922,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc62b666c7c702d71db3f373f015c31990e308aa3a5998e4346c22fe83c256fc",
          "md5": "5661b1e91caa54fa39c3e37dceeecd3f",
          "sha256": "2202156c995d4abf0ff8f2143543e4793ed5039ba2243fea11437afe367e8ad6"
        },
        "downloads": -1,
        "filename": "python_polar_coding-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5661b1e91caa54fa39c3e37dceeecd3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 59585,
        "upload_time": "2020-08-06T12:09:27",
        "upload_time_iso_8601": "2020-08-06T12:09:27.879451Z",
        "url": "https://files.pythonhosted.org/packages/fc/62/b666c7c702d71db3f373f015c31990e308aa3a5998e4346c22fe83c256fc/python_polar_coding-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68d3ec04d6e06eb95d431111b9add20c6b707e01f40240033f8788139ba9a6ef",
          "md5": "56e50301cf23e3f85337f3367d84d13e",
          "sha256": "8d94c00d1b5af468176bbe5c71231e283cae5bbc60f1df3306406766a674cccd"
        },
        "downloads": -1,
        "filename": "python-polar-coding-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "56e50301cf23e3f85337f3367d84d13e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 33217,
        "upload_time": "2020-08-06T12:09:31",
        "upload_time_iso_8601": "2020-08-06T12:09:31.022888Z",
        "url": "https://files.pythonhosted.org/packages/68/d3/ec04d6e06eb95d431111b9add20c6b707e01f40240033f8788139ba9a6ef/python-polar-coding-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc62b666c7c702d71db3f373f015c31990e308aa3a5998e4346c22fe83c256fc",
        "md5": "5661b1e91caa54fa39c3e37dceeecd3f",
        "sha256": "2202156c995d4abf0ff8f2143543e4793ed5039ba2243fea11437afe367e8ad6"
      },
      "downloads": -1,
      "filename": "python_polar_coding-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5661b1e91caa54fa39c3e37dceeecd3f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 59585,
      "upload_time": "2020-08-06T12:09:27",
      "upload_time_iso_8601": "2020-08-06T12:09:27.879451Z",
      "url": "https://files.pythonhosted.org/packages/fc/62/b666c7c702d71db3f373f015c31990e308aa3a5998e4346c22fe83c256fc/python_polar_coding-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68d3ec04d6e06eb95d431111b9add20c6b707e01f40240033f8788139ba9a6ef",
        "md5": "56e50301cf23e3f85337f3367d84d13e",
        "sha256": "8d94c00d1b5af468176bbe5c71231e283cae5bbc60f1df3306406766a674cccd"
      },
      "downloads": -1,
      "filename": "python-polar-coding-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "56e50301cf23e3f85337f3367d84d13e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 33217,
      "upload_time": "2020-08-06T12:09:31",
      "upload_time_iso_8601": "2020-08-06T12:09:31.022888Z",
      "url": "https://files.pythonhosted.org/packages/68/d3/ec04d6e06eb95d431111b9add20c6b707e01f40240033f8788139ba9a6ef/python-polar-coding-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}