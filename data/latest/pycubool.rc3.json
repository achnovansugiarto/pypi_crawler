{
  "info": {
    "author": "Egor Orachyov",
    "author_email": "egororachyov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: GPU :: NVIDIA CUDA",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "![Project logo](https://github.com/JetBrains-Research/cuBool/blob/master/docs/logo/cubool_logo_trsp.png?raw=true)\n\n# pycubool\n\n[![JB Research](https://jb.gg/badges/research-flat-square.svg)](https://research.jetbrains.org/)\n[![Ubuntu](https://github.com/JetBrains-Research/cuBool/workflows/Ubuntu/badge.svg?branch=master)](https://github.com/JetBrains-Research/cuBool/actions)\n[![License](https://img.shields.io/badge/license-MIT-orange)](https://github.com/JetBrains-Research/cuBool/blob/master/LICENSE)\n\n**pycubool** is a python wrapper for [cuBool](https://github.com/JetBrains-Research/cuBool) library.\n\n**cuBool** is a linear Boolean algebra library primitives and operations for \nwork with sparse matrices written on the NVIDIA CUDA platform. The primary \ngoal of the library is implementation, testing and profiling algorithms for\nsolving *formal-language-constrained problems*, such as *context-free* \nand *regular* path queries with various semantics for graph databases.\nThe library provides C-compatible API, written in the GraphBLAS style.\n\n**The library** is shipped with python package **pycubool** - wrapper for\ncuBool library C API. This package exports library features and primitives \nin high-level format with automated resources management and fancy syntax sugar.\n\n**The primary library primitives** are sparse matrix and sparse vector of boolean values. \nThe library provides the most popular operations for matrix manipulation, \nsuch as construction from values, transpose, sub-matrix/sub-vector extraction, matrix-to-vector reduce, \nelement-wise addition, matrix-matrix, matrix-vector, vector-matrix multiplication, and Kronecker product.  \n\n**As a fallback** library provides sequential backend for mentioned above operations\nfor computations on CPU side only. This backend is selected automatically\nif Cuda compatible device is not presented in the system. This can be quite handy for \nprototyping algorithms on a local computer for later running on a powerful server.   \n\n### Features\n\n- Cuda backend for computations\n- Cpu backend for computations\n- Matrix/vector creation (empty, from data, with random data)\n- Matrix-matrix operations (multiplication, element-wise addition, kronecker product)\n- Matrix-vector operations (matrix-vector and vector-matrix multiplication)\n- Vector-vector operations (element-wise addition)\n- Matrix operations (equality, transpose, reduce to vector, extract sub-matrix)\n- Vector operations (equality, reduce to value, extract sub-vector)\n- Matrix/vector data extraction (as lists, as list of pairs)\n- Matrix/vector syntax sugar (pretty string printing, slicing, iterating through non-zero values)\n- IO (import/export matrix from/to `.mtx` file format)\n- GraphViz (export single matrix or set of matrices as a graph with custom color and label settings)\n- Debug (matrix string debug markers, logging)\n\n### Performance\n\nSparse Boolean matrix-matrix multiplication evaluation results are listed bellow.\nMachine configuration: PC with Ubuntu 20.04, Intel Core i7-6700 3.40GHz CPU, DDR4 64Gb RAM, GeForce GTX 1070 GPU with 8Gb VRAM. \n\n![time](https://github.com/JetBrains-Research/cuBool/raw/master/docs/pictures/mxm-perf-time.svg?raw=true&sanitize=true)\n![mem](https://github.com/JetBrains-Research/cuBool/raw/master/docs/pictures/mxm-perf-mem.svg?raw=true&sanitize=true)\n\nThe matrix data is selected from the SuiteSparse Matrix Collection [link](https://sparse.tamu.edu).\n\n| Matrix name              | # Rows      | Nnz M       | Nnz/row   | Max Nnz/row | Nnz M^2     |\n|---                       |---:         |---:         |---:       |---:         |---:         |\n| SNAP/amazon0312          | 400,727     | 3,200,440   | 7.9       | 10          | 14,390,544  |\n| LAW/amazon-2008          | 735,323     | 5,158,388   | 7.0       | 10          | 25,366,745  |\n| SNAP/web-Google          | 916,428     | 5,105,039   | 5.5       | 456         | 29,710,164  |\n| SNAP/roadNet-PA          | 1,090,920   | 3,083,796   | 2.8       | 9           | 7,238,920   |\n| SNAP/roadNet-TX\t       | 1,393,383   | 3,843,320   | 2.7       | 12          | 8,903,897   |\n| SNAP/roadNet-CA\t       | 1,971,281   | 5,533,214   | 2.8       | 12          | 12,908,450  |\n| DIMACS10/netherlands_osm | 2,216,688   | 4,882,476   | 2.2       | 7           | 8,755,758   |\n\nDetailed comparison is available in the full paper text at \n[link](https://github.com/YaccConstructor/articles/blob/master/2021/GRAPL/Sparse_Boolean_Algebra_on_GPGPU/Sparse_Boolean_Algebra_on_GPGPU.pdf).\n\n### Simple example\n\nCreate sparse matrices, compute matrix-matrix product and print the result to the output:\n\n```python\nimport pycubool as cb\n\na = cb.Matrix.empty(shape=(2, 3))\na[0, 0] = True\na[1, 2] = True\n\nb = cb.Matrix.empty(shape=(3, 4))\nb[0, 1] = True\nb[0, 2] = True\nb[1, 3] = True\nb[2, 1] = True\n\nprint(a, b, a.mxm(b), sep=\"\\n\")\n```\n\n### Vector example\n\nCreate sparse matrix and vector, compute matrix-vector and vector-matrix products and print the result:\n\n```python\nimport pycubool as cb\n\nm = cb.Matrix.empty(shape=(3, 4))\nm[0, 1] = True\nm[1, 0] = True\nm[1, 3] = True\nm[2, 2] = True\n\nv = cb.Vector.empty(nrows=4)\nv[0] = True\nv[2] = True\n\nt = cb.Vector.empty(nrows=3) \nt[0] = True\nt[2] = True\n\nprint(m.mxv(v), t.vxm(m), sep=\"\\n\")\n```\n\n### Transitive closure example\n\nCompute the transitive closure problem for the directed graph and print the result:\n\n```python\nimport pycubool as cb\n\na = cb.Matrix.empty(shape=(4, 4))\na[0, 1] = True\na[1, 2] = True\na[2, 0] = True\na[2, 3] = True\na[3, 2] = True\n\nt = a.dup()                             # Duplicate matrix where to store result\ntotal = 0                               # Current number of values\n\nwhile total != t.nvals:\n    total = t.nvals\n    t.mxm(t, out=t, accumulate=True)    # t += t * t\n\nprint(a, t, sep=\"\\n\")\n```\n\n### GraphViz example\n\nGenerate GraphViz graph script for a graph stored as a set of adjacency matrices:\n\n```python\nimport pycubool as cb\n\nname = \"Test\"                           # Displayed graph name   \nshape = (4, 4)                          # Adjacency matrices shape\ncolors = {\"a\": \"red\", \"b\": \"green\"}     # Colors per label\n\na = cb.Matrix.empty(shape=shape)        # Edges labeled as 'a'\na[0, 1] = True\na[1, 2] = True\na[2, 0] = True\n\nb = cb.Matrix.empty(shape=shape)        # Edges labeled as 'b'\nb[2, 3] = True\nb[3, 2] = True\n\nprint(cb.matrices_to_gviz(matrices={\"a\": a, \"b\": b}, graph_name=name, edge_colors=colors))\n```\n\nScript can be rendered by any [gviz tool](https://dreampuf.github.io/GraphvizOnline/) online and the result can be following:\n\n![gviz-example](https://raw.githubusercontent.com/JetBrains-Research/cuBool/master/docs/pictures/gviz_example.png)\n\n## Contributors\n\n- Egor Orachyov (Github: [EgorOrachyov](https://github.com/EgorOrachyov))\n- Pavel Alimov (Github : [Krekep](https://github.com/Krekep))\n- Semyon Grigorev (Github: [gsvgit](https://github.com/gsvgit))\n\n## Citation \n\n```ignorelang\n@MISC{cuBool,\n  author = {Orachyov, Egor and Alimov, Pavel and Grigorev, Semyon},\n  title = {cuBool: sparse Boolean linear algebra for Nvidia Cuda},\n  year = 2021,\n  url = {https://github.com/JetBrains-Research/cuBool},\n  note = {Version 1.1.0}\n}\n```\n\n## License\n\nThis project is licensed under MIT License. License text can be found in the \n[license file](https://github.com/JetBrains-Research/cuBool/blob/master/python/LICENSE.md).\n\n## Acknowledgments\n\nThis is a research project of the Programming Languages and Tools Laboratory\nat JetBrains-Research. Laboratory website [link](https://research.jetbrains.org/groups/plt_lab/).\n\n## Also\n\nThe name of the library is formed by a combination of words *Cuda* and *Boolean*,\nwhat literally means *Cuda with Boolean* and sounds very similar to the name of \nthe programming language *COBOL*.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JetBrains-Research/cuBool",
    "keywords": "python,cplusplus,sparse-matrix,linear-algebra,graph-analysis,graph-algorithms,graphblas,nvidia-cuda",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycubool",
    "package_url": "https://pypi.org/project/pycubool/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycubool/",
    "project_urls": {
      "Bug Tracker": "https://github.com/JetBrains-Research/cuBool/issues",
      "Homepage": "https://github.com/JetBrains-Research/cuBool",
      "cuBool project": "https://github.com/JetBrains-Research/cuBool"
    },
    "release_url": "https://pypi.org/project/pycubool/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "cuBool library python bindings",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10620124,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b27e464bfec6c821043931ca122704d9702a8e31a104cf5677022a3ebc02a67",
          "md5": "7fd29eeeb19402beed5fbb0e5da17b47",
          "sha256": "939108b82da92207f12da82de70e7e55af9df10b6dc8b7ae741f2eb70b86258d"
        },
        "downloads": -1,
        "filename": "pycubool-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fd29eeeb19402beed5fbb0e5da17b47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 942897,
        "upload_time": "2021-04-02T09:55:21",
        "upload_time_iso_8601": "2021-04-02T09:55:21.691331Z",
        "url": "https://files.pythonhosted.org/packages/9b/27/e464bfec6c821043931ca122704d9702a8e31a104cf5677022a3ebc02a67/pycubool-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6627aca83a7ae78a92be8cd91fd839980a919854f0d07cfda41eb9b711ec5104",
          "md5": "836791043a2e6c044793e3ccf2f1d8be",
          "sha256": "ad6d958efe0b0d46893aa637071b1a3d8bc872e79a2f2e14bfd2efa3f2aa6e00"
        },
        "downloads": -1,
        "filename": "pycubool-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "836791043a2e6c044793e3ccf2f1d8be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 16582,
        "upload_time": "2021-04-02T09:55:23",
        "upload_time_iso_8601": "2021-04-02T09:55:23.788561Z",
        "url": "https://files.pythonhosted.org/packages/66/27/aca83a7ae78a92be8cd91fd839980a919854f0d07cfda41eb9b711ec5104/pycubool-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84b61d194f773b90197a1ad15313755af3ad79104467787d5d09778e2573eab7",
          "md5": "6a381b3173e802384e4da900049d7e2d",
          "sha256": "21e178b2037a3a56ae79656d076278ce82b140511d3421aec3ad3a13421bd9b1"
        },
        "downloads": -1,
        "filename": "pycubool-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a381b3173e802384e4da900049d7e2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 1506186,
        "upload_time": "2021-05-08T14:15:44",
        "upload_time_iso_8601": "2021-05-08T14:15:44.616845Z",
        "url": "https://files.pythonhosted.org/packages/84/b6/1d194f773b90197a1ad15313755af3ad79104467787d5d09778e2573eab7/pycubool-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3ef84ef40aad7a3d984147e18d97f01b1677d28aa0410253d401c3a9fd20718",
          "md5": "9316e98a902039a6127216af94e19b09",
          "sha256": "d7d2d417b89993189ee281bcdd0252ab8928f3a461bcc2eaf50c7d1c0f130a46"
        },
        "downloads": -1,
        "filename": "pycubool-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9316e98a902039a6127216af94e19b09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 19016,
        "upload_time": "2021-05-08T14:15:46",
        "upload_time_iso_8601": "2021-05-08T14:15:46.153195Z",
        "url": "https://files.pythonhosted.org/packages/c3/ef/84ef40aad7a3d984147e18d97f01b1677d28aa0410253d401c3a9fd20718/pycubool-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b86fe5609ce1807d01e07687ed6a8d25d82929f18e77c0044e9b3a8810d18a39",
          "md5": "8ddfdc7043f10e395175a089a42409bc",
          "sha256": "baf511ce214db8b17b032843787817c29d0119df42a2be849e40bb9450525c9a"
        },
        "downloads": -1,
        "filename": "pycubool-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ddfdc7043f10e395175a089a42409bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 1490442,
        "upload_time": "2021-06-11T08:59:57",
        "upload_time_iso_8601": "2021-06-11T08:59:57.923467Z",
        "url": "https://files.pythonhosted.org/packages/b8/6f/e5609ce1807d01e07687ed6a8d25d82929f18e77c0044e9b3a8810d18a39/pycubool-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b834e416b9b0cf36792f8c9bfafc7a336130466bb4fd79a0daaacc55d05aefb6",
          "md5": "974b8997b929f62e2de15c1dd1c0961d",
          "sha256": "46538e4868ae4479eb0adbc5ca8491521510d6f9f17c15fe9e7e0a4212319ec4"
        },
        "downloads": -1,
        "filename": "pycubool-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "974b8997b929f62e2de15c1dd1c0961d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 20566,
        "upload_time": "2021-06-11T08:59:59",
        "upload_time_iso_8601": "2021-06-11T08:59:59.826460Z",
        "url": "https://files.pythonhosted.org/packages/b8/34/e416b9b0cf36792f8c9bfafc7a336130466bb4fd79a0daaacc55d05aefb6/pycubool-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b86fe5609ce1807d01e07687ed6a8d25d82929f18e77c0044e9b3a8810d18a39",
        "md5": "8ddfdc7043f10e395175a089a42409bc",
        "sha256": "baf511ce214db8b17b032843787817c29d0119df42a2be849e40bb9450525c9a"
      },
      "downloads": -1,
      "filename": "pycubool-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ddfdc7043f10e395175a089a42409bc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 1490442,
      "upload_time": "2021-06-11T08:59:57",
      "upload_time_iso_8601": "2021-06-11T08:59:57.923467Z",
      "url": "https://files.pythonhosted.org/packages/b8/6f/e5609ce1807d01e07687ed6a8d25d82929f18e77c0044e9b3a8810d18a39/pycubool-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b834e416b9b0cf36792f8c9bfafc7a336130466bb4fd79a0daaacc55d05aefb6",
        "md5": "974b8997b929f62e2de15c1dd1c0961d",
        "sha256": "46538e4868ae4479eb0adbc5ca8491521510d6f9f17c15fe9e7e0a4212319ec4"
      },
      "downloads": -1,
      "filename": "pycubool-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "974b8997b929f62e2de15c1dd1c0961d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 20566,
      "upload_time": "2021-06-11T08:59:59",
      "upload_time_iso_8601": "2021-06-11T08:59:59.826460Z",
      "url": "https://files.pythonhosted.org/packages/b8/34/e416b9b0cf36792f8c9bfafc7a336130466bb4fd79a0daaacc55d05aefb6/pycubool-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}