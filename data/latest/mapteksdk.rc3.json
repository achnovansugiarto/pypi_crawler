{
  "info": {
    "author": "",
    "author_email": "Maptek <support@maptek.com.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "mapteksdk\n=========\n\nThe mapteksdk is a Python library for working with Maptek products that use a\nshared underlying infrastructure such as PointStudio, GeologyCore, BlastLogic and\nEvolution.\n\nIt provides access to data in a running application and allows it to be read and\nmodified. There are various data types supported.\n\nTo learn more about the SDK visit the [help](https://help.maptek.com/mapteksdk/).\n\nUsage\n=====\nTo use mapteksdk, the first step is to connect to a running supported\napplication. This is done via the `Project` class. The following example connects\nto the most recently opened supported application and lists all of the top level\nobjects:\n\n\n```python\nfrom mapteksdk.project import Project\nwith Project() as project:\n    for path, _ in project.get_children(\"/\"):\n        print(path)\n```\n\n## Creating new data in an application\nOnce a Python script has connected to a running application, the instance of the\n`Project` class can create new objects in the application. The following example\ndemonstrates creating a square-shaped `Polygon` centred at the origin.\n\n```python\nfrom mapteksdk.project import Project\nfrom mapteksdk.data import Polygon\nwith Project() as project:\n    with project.new(\"cad/square\", Polygon) as square:\n        # Four points, each in the form (X, Y, Z)\n        square.points = [(-1, -1, 0), (-1, 1, 0), (1, 1, 0), (1, -1, 0)]\n```\n\nThe first argument to `Project.new()`, \"cad/square\", indicates that the object\nshould be created in the \"cad\" container and given the name \"square\". The second\nargument indicates the type of object to create, in this case `Polygon`.\nSee the documentation for the `mapteksdk.data` module for other available\ntypes. The new square is populated by setting the points which define the\n`Polygon`. When the object is viewed in the application the points will be\nconnected in order. i.e. A line is drawn between the zeroth and first points,\nthe first and second points, and so on until the final line is drawn between the\nlast and zeroth points.\n\n## Reading data in an application\nThe Project class can also be used to read data in the connected\napplication. The following example uses the `Project.read()` function to read the\nobject created in the previous example. This will raise an error if the previous\nexample was not run first.\n\n```python\nfrom mapteksdk.project import Project\nwith Project() as project:\n    with project.read(\"cad/square\") as square:\n        print(\"Points (X, Y, Z):\\n\", square.points)\n        print(\"Edges (Start, End):\\n\", square.edges)\n```\n\nThe expected output of the script is shown below:\n\n```\nPoints (X, Y, Z):\n [[-1. -1.  0.]\n [-1.  1.  0.]\n [ 1.  1.  0.]\n [ 1. -1.  0.]]\nEdges (Start, End):\n [[0 1]\n [1 2]\n [2 3]\n [3 0]]\n```\n\nThe points are the same as used to create the object in the previous example.\nThis example also prints the edges which connect the points - the edge [0, 1]\nindicates that there is an edge drawn between the zeroth and first points.\n\n## Editing existing data in an application\nThe `Project` class can also edit existing objects in the connected application.\nThe following example uses the `Project.edit()` function to colour the object\ncreated and read in the previous two examples.\n\n```python\nfrom mapteksdk.project import Project\nwith Project() as project:\n    with project.edit(\"cad/square\") as square:\n        square.point_colours = [(255, 0, 0, 255), (0, 255, 0, 255),\n                                (255, 0, 0, 255), (0, 255, 0, 255)]\n```\n\nThe top left and bottom right hand corners are coloured red and the top right\nand bottom left hand corners are coloured green. This also colours the edges\nwhich connect the corners of the square such that they will transition from\nred to green.\n\nExample script\n==============\nHere is a more realistic example script. When run this script prompts\nfor the user to click on an object in the running application. The edges\nof the object clicked on are coloured by edge grade (i.e. how 'steep' the\nedges are). This edges will be coloured:\n\n* Green if the grade is less than 10%.\n* Orange if the grade is greater or equal to 10% and less than 15%.\n* Red if the grade is greater or equal to 15% and less than 20%.\n* White if the grade is greater than or equal to 20%.\n\nGiven a set of edges (an `EdgeNetwork` in code) representing roads\nin three dimensional space, this script could be used to quickly identify road\nsections which are dangerously steep. Such road sections would be coloured red,\nmaking them easy to find at a glance.\n\nThe edge grade is also stored in an edge attribute which can be used later to\nretrieve the values.\n\n```python\nimport numpy as np\nfrom mapteksdk.project import Project\nfrom mapteksdk.pointstudio.operations import object_pick, write_report\n\ndef calculate_percentage_grade(start:np.ndarray, end:np.ndarray):\n    \"\"\"Calculate the percentage grade of the line between points start and end.\n\n    Parameters\n    ----------\n    start : numpy.ndarray\n      Numpy array of start points. This should have shape (X, 3) where\n      X is the edge count.\n    end : numpy.ndarray\n      Numpy array of end points. This should have shape (X, 3) where\n      X is the edge count.\n\n    Returns\n    -------\n    numpy.ndarray\n      Numpy array of grade values of shape (X,) where X is the\n      edge count.\n    \"\"\"\n    # Calculate an array of rise values for each edge.\n    # Rise is the difference between z coordinates.\n    rise = end[:, 2] - start[:, 2]\n    # Take the absolute value so that it doesn't matter which\n    # is the higher point.\n    np.absolute(rise, out=rise)\n    # Calculate an array of run values for each edge.\n    # Run is distance between the start and end point ignoring the z component.\n    run_vector = start - end\n    run = np.square(run_vector[:, 1]) - np.square(run_vector[:, 0])\n    np.absolute(run, out=run)\n\n    # Percentage grade = (rise / run) * 100\n    # Perform the calculation in-place to avoid making extra copies of the array.\n    grade = rise\n    grade /= run\n    grade *= 100\n    return grade\n\nif __name__ == \"__main__\":\n    project = Project()\n    # Request for the user to click on an object in the application and returns\n    # it.\n    picked_object_id = object_pick(label=\"Pick object to colour edges by grade.\")\n\n    # Grade thresholds used for colouring.\n    okay_grade = 10.\n    warning_grade = 15.\n    danger_grade = 20.\n\n    # Colours to use for grade thresholds.\n    okay_colour = [0, 200, 0, 255] # Green\n    warning_colour = [255, 165, 0, 255] # Orange\n    danger_colour = [255, 0, 0, 255] # Red\n    vertical_colour = [255, 255, 255, 255] # White\n\n    with project.edit(picked_object_id) as edges:\n        try:\n            # Edges are of the form [start point index, end point index].\n            # Replaces the index with the coordinate of the corresponding point\n            # giving each edge as:\n            # [[x_start, y_start, z_start], [x_end, y_end, z_end]]\n            edge_coordinates = edges.points[edges.edges]\n            start_points = edge_coordinates[:, 0]\n            end_points = edge_coordinates[:, 1]\n            grade = calculate_percentage_grade(start_points, end_points)\n            edges.edge_attributes[\"grade\"] = grade\n            # Colour the object by grade.\n            edges.edge_colours[:] = vertical_colour\n            edges.edge_colours[grade < danger_grade] = danger_colour\n            edges.edge_colours[grade < warning_grade] = warning_colour\n            edges.edge_colours[grade < okay_grade] = okay_colour\n        except AttributeError:\n            message = f\"{picked_object_id.path} does not have edges\"\n            write_report(\"Failed to colour by edge grade\", message)\n            print(message)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Maptek End User Licence Agreement",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapteksdk",
    "package_url": "https://pypi.org/project/mapteksdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/mapteksdk/",
    "project_urls": {
      "Documentation": "https://help.maptek.com/mapteksdk/",
      "Homepage": "https://www.maptek.com",
      "Support": "https://www.maptek.com/support/index.html"
    },
    "release_url": "https://pypi.org/project/mapteksdk/1.5/",
    "requires_dist": [
      "numpy (<1.25.0,>=1.16.4)",
      "pandas (<1.6.0,>=1.1.0)",
      "psutil (<5.10.0,>=5.6.3)",
      "pythonnet (<3.1.0,>=2.4.0)",
      "pillow (<9.5.0,>=7.0.0)",
      "pyproj (<3.5.0,>=2.5.0)"
    ],
    "requires_python": "<3.12,>=3.7",
    "summary": "Python SDK for MDF-based Maptek products.",
    "version": "1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17406553,
  "releases": {
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6596b2cb7f29e61575827ade56d716a5382491f138dce370e3bf919ad7900e6b",
          "md5": "5feca552b06d1bb7687dbead526507a9",
          "sha256": "c887ae397a35a84965a0d7fdc99b2f1061690ed4f28b0f1cc2ee882caca69c7b"
        },
        "downloads": -1,
        "filename": "mapteksdk-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5feca552b06d1bb7687dbead526507a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <3.9",
        "size": 369956,
        "upload_time": "2021-11-22T04:58:46",
        "upload_time_iso_8601": "2021-11-22T04:58:46.940854Z",
        "url": "https://files.pythonhosted.org/packages/65/96/b2cb7f29e61575827ade56d716a5382491f138dce370e3bf919ad7900e6b/mapteksdk-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efdb785930159cc1b8e2e9ac86abb4a94193d3b73821d2e950c160092c3f9c10",
          "md5": "62fb84c5987bdc130c90c3e23bbdbc3d",
          "sha256": "55829cd46c44bdb819d34b57df554967ea638d1ea75130785e6cb7e4ffb71759"
        },
        "downloads": -1,
        "filename": "mapteksdk-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62fb84c5987bdc130c90c3e23bbdbc3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <3.9",
        "size": 431772,
        "upload_time": "2022-08-23T00:06:13",
        "upload_time_iso_8601": "2022-08-23T00:06:13.364950Z",
        "url": "https://files.pythonhosted.org/packages/ef/db/785930159cc1b8e2e9ac86abb4a94193d3b73821d2e950c160092c3f9c10/mapteksdk-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36cddcd45f0bb5eeccfcd92383b0977985c3593513efdaf908ad65bbe0b24d85",
          "md5": "2e52bf5363277db48103704638e99482",
          "sha256": "a1233349be159e8a98cf4db68b44bc0827e3082ac3243ad723351b08c82bf18e"
        },
        "downloads": -1,
        "filename": "mapteksdk-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e52bf5363277db48103704638e99482",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "<3.12,>=3.7",
        "size": 500371,
        "upload_time": "2023-03-22T23:39:46",
        "upload_time_iso_8601": "2023-03-22T23:39:46.519402Z",
        "url": "https://files.pythonhosted.org/packages/36/cd/dcd45f0bb5eeccfcd92383b0977985c3593513efdaf908ad65bbe0b24d85/mapteksdk-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36cddcd45f0bb5eeccfcd92383b0977985c3593513efdaf908ad65bbe0b24d85",
        "md5": "2e52bf5363277db48103704638e99482",
        "sha256": "a1233349be159e8a98cf4db68b44bc0827e3082ac3243ad723351b08c82bf18e"
      },
      "downloads": -1,
      "filename": "mapteksdk-1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e52bf5363277db48103704638e99482",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<3.12,>=3.7",
      "size": 500371,
      "upload_time": "2023-03-22T23:39:46",
      "upload_time_iso_8601": "2023-03-22T23:39:46.519402Z",
      "url": "https://files.pythonhosted.org/packages/36/cd/dcd45f0bb5eeccfcd92383b0977985c3593513efdaf908ad65bbe0b24d85/mapteksdk-1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}