{
  "info": {
    "author": "",
    "author_email": "Derek Fujimoto <dfujimoto@triumf.ca>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# QuSpin Zero Field Magnetometer DAQ\n\n<img src=\"https://img.shields.io/pypi/v/QZFM?style=flat-square\"/> <img src=\"https://img.shields.io/pypi/format/QZFM?style=flat-square\"/> <img src=\"https://img.shields.io/github/languages/top/ucn-triumf/QZFM?style=flat-square\"/> <img src=\"https://img.shields.io/github/languages/code-size/ucn-triumf/QZFM?style=flat-square\"/> <img src=\"https://img.shields.io/pypi/l/QZFM?style=flat-square\"/> <img src=\"https://img.shields.io/github/last-commit/ucn-triumf/QZFM?style=flat-square\"/> \n\nRead and control QuSpin magnetometer (unofficial)\n\nUses [QZFM commands] to send/receive signals via the [pySerial](https://pyserial.readthedocs.io/) module. See also [this guide](https://quspin.com/products-qzfm-gen2-arxiv/qzfm-quick-start-guide/) for more info on setup for the QuSpin.\n\nThis has been tested on the QuSpin Triaxial sensor. \n\nModule QZFM\n===========\n\nClasses\n-------\n\n`QZFM(device_name=None, nbytes_status=1000)`\n:   Low-level control of QuSpin magnetic sensor via QZFM serial commands via USB\n\n    device_name:    str, name of device to look for (connection)\n                    for windows this is likely COM3 or COM5\n                    for linux, search Z3T0 or similar    \n    nbytes_status: serial read chunk size in bytes for status updates\n\n### Class variables\n\n`data_read_rate`\n:\n\n`serial_settings`\n:\n\n### Instance variables\n\n`axis_mode`:          str, readback mode for daq\n\n`field`:              np.array of magnetic fields (pT)\n\n`gain`:               float, V/nT from setting analog gain\n\n`is_calibrated`:      True if calibration is ok\n\n`is_data_streaming`:  True if data streaming mode   \n\n`is_field_zeroed`:    True if field zeroing is maintained\n\n`is_xyz_zeroing`:     True if field zeroing applied to all axes, else only y and z\n\n`led`:                dict of led status on/off\n\n`messages`:           list of tuples (message, epoch time)\n\n`nbytes_status`:      serial read chunk size in bytes for status updates\n\n`read_axis`:          str, axis for readback\n\n`sensor_par`:         dict of sensor parameter readback values\n\n`ser`:                serial.Serial object for connection\n\n`status_last_updated`:epoch time last updated status (led, sensor_par, messages)\n\n`time`:               np.array of epoch times corresponding to field measurements \n\n`cell_Tlock`\n:\n\n`field_zeroed`\n:\n\n`is_master`\n:\n\n`laser_locked`\n:\n\n`laser_on`\n:\n\n### Methods\n\n`auto_start(self, block=True, show=True)`\n:   Initiate the automated sensor startup routines\n        \n    if block, wait until laser is locked and \n    temperature stabilized before unblocking\n    \n    if show, monitor status\n\n`calibrate(self, show=True)`\n:   Calibrate the response (field to voltage) of the magnetometer with an internal signal reference\n    \n    show: if true, print to screen\n\n`connect(self, device_name)`\n:   Connect to the QuSpin\n    \n    device_name: str, name of device (ex: \"Z3T0-AAL9\"), or \n                    partial name (ex: \"Z3T0\")\n\n`disconnect(self)`\n:   Disconnect from QuSpin\n\n`draw_data(self)`\n:   Draw data to window\n\n`field_reset(self)`\n:   Sets the internal coil field values to zero\n\n`field_zero(self, on=True, axes_xyz=True, dBz=inf, dBy=inf, dB0=inf, dT=inf, show=True)`\n:   Run field zeroing procedure\n    \n    if on: \n        Start sensor field zeroing procedure to apply a compensation field using the internal sensor coils to null background fields \n    \n    if axes_xyz: Field Zeroing is applied to all three axes (default)\n    else:        Field Zeroing is applied only to Y & Z axes\n    \n    dBz, dBy, dB0:  field step thresholds in pT. \n                    if step is smaller than this, stop zeroing procedure.\n                    All conditions must be satisfied for field zero stop\n                    Set to inf to disable\n    \n    dT:             similar to above fields, but for cell temperature\n    \n    show: if true write diagnostic to stdout\n\n`monitor_cell_T_error(self, window_s=20, figsize=(10, 6))`\n:   Continuously stream cell temperature to window\n    \n    window_s: show the last window_s seconds of data on the stream\n    figsize:  size of display\n    \n    See https://matplotlib.org/stable/tutorials/advanced/blitting.html\n\n`monitor_data(self, axis='z', window_s=10, figsize=(10, 6))`\n:   Continuously stream data to window\n    \n    axis:     axis to read from\n    window_s: show the last window_s seconds of data on the stream\n    figsize:  size of display\n    \n    See https://matplotlib.org/stable/tutorials/advanced/blitting.html\n\n`monitor_status(self)`\n:   Continuously update and print status\n\n`print_messages(self, last_n=None)`\n:   Print messages to screen\n    \n    last_n: print the last number of messages\n\n`print_state(self)`\n:   Print state of the python object\n\n`print_status(self, update=False, overwrite_last=False)`\n:   Print status of QuSpin in a nicely formatted message\n    \n    update: if true, update before printing\n    overwrite_last: if true, overwrite the last message. Used in monitor_status\n\n`read_data(self, seconds, axis='z', clear_buffer=True)`\n:   Read data from the device \n    \n    seconds:        float, duration of measurement npts= seconds*200Hz\n    axis:           str, which axis to read from (x, y, or z)\n    clear_buffer:   bool, if true, clear buffer and wait for new\n    \n    assumed readback rate based on comments from QuSpin\n    time[0] is the time immediately after clearing the buffer. \n        Note that there is often an incomplete word after clear, we ignore this\n        As a result the error in time is at most 1/self.data_read_rate\n    \n    returns (time, field)\n\n`read_offsets(self, npts, clear_buffer=True)`\n:   Read offset data from the device in field zeroing mode \n    \n    npts:           int, number of data points to read\n    clear_buffer:   bool, if true, clear initial buffer and wait for new\n    \n    time[0] is the time immediately after clearing the buffer. \n    \n    reads at approx 7.5 Hz\n\n`reboot(self)`\n:   Reboot the microprocessor and reloads the firmware\n\n`set_axis_mode(self, mode='z')`\n:   Change field-sensitive axis\n    \n    Note: triaxial sensors do not respond to this command\n    \n    mode =  z       Operate the magnetometer in single Z axis mode\n            y       Operate the magnetometer in single Y axis mode\n            dual    Operate the magnetometer in dual Y and Z axis mode\n\n`set_gain(self, mode='1x')`\n:   Set analog gain (analog output only)\n    \n    mode =  0.33x   Set the analog output gain to 0.33 times default (0.9 V/nT)\n            1x      Set the analog output gain to default (2.7 V/nT)\n            3x      Set the analog output gain to 3 times default (8.1 V/nT)\n\n`to_csv(self, filename=None, *notes)`\n:   Write data to csv, if no filename, use default\n    \n    notes: list of things to add to file header\n\n`to_csv_fz(self, filename=None, *notes)`\n:   Write field zero data to csv, if no filename, use default\n    \n    notes: list of things to add to file header\n\n`update_status(self, clear_buffer=True)`\n:   Clear input buffer and read status\n    \n    updates the following attributes: \n        self.status_last_updated\n        self.led\n        self.sensor_par\n        self.messages\n\n\n\n[QZFM commands]:https://quspin.com/products-qzfm-gen2-arxiv/qzfm-command-list/\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "QZFM,QuSpin,Magnetometer,Zero Field",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "QZFM",
    "package_url": "https://pypi.org/project/QZFM/",
    "platform": null,
    "project_url": "https://pypi.org/project/QZFM/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ucn-triumf/QZFM/issues",
      "Homepage": "https://github.com/ucn-triumf/QZFM"
    },
    "release_url": "https://pypi.org/project/QZFM/0.0.2/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "pyserial",
      "datetime",
      "tqdm",
      "pandas"
    ],
    "requires_python": ">=3.7",
    "summary": "Python class for serial communication with QuSpin Zero Field Magnetometer",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17463723,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d01812fdbbd5f78e1de0a756a0bfcd0729643fd5d3d473884962722f32d957a",
          "md5": "c6b80f6311c63b40a42abeff48fb31a9",
          "sha256": "176e37bc51fa7e010b8a1e7fb8fbf5ea8a610f5657df96f173513e62e9199762"
        },
        "downloads": -1,
        "filename": "QZFM-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6b80f6311c63b40a42abeff48fb31a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13064,
        "upload_time": "2023-03-27T15:58:42",
        "upload_time_iso_8601": "2023-03-27T15:58:42.086525Z",
        "url": "https://files.pythonhosted.org/packages/8d/01/812fdbbd5f78e1de0a756a0bfcd0729643fd5d3d473884962722f32d957a/QZFM-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfbae6ca15999ae32448246b0c9314424383b8ed359b1853b2690feaee6080a9",
          "md5": "83fe86b799383192a1c0df22267fa27e",
          "sha256": "f2538ffebf68fe4c01749d4c518317b1e82c9e9139468c3881d3df4747758bd9"
        },
        "downloads": -1,
        "filename": "QZFM-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83fe86b799383192a1c0df22267fa27e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11914,
        "upload_time": "2023-03-27T15:58:44",
        "upload_time_iso_8601": "2023-03-27T15:58:44.220042Z",
        "url": "https://files.pythonhosted.org/packages/cf/ba/e6ca15999ae32448246b0c9314424383b8ed359b1853b2690feaee6080a9/QZFM-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cb6d3d8a035eb5644635ed63317e78acebfb12b9bdb59b1a9e987827f7c1075",
          "md5": "af629e28ed10906ec9cc2368f05e73f1",
          "sha256": "991b1adc34a3100754e6ebb3469ca78d2024032dd0162b33439cb32b82d096d7"
        },
        "downloads": -1,
        "filename": "QZFM-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af629e28ed10906ec9cc2368f05e73f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13053,
        "upload_time": "2023-03-27T16:12:49",
        "upload_time_iso_8601": "2023-03-27T16:12:49.449595Z",
        "url": "https://files.pythonhosted.org/packages/6c/b6/d3d8a035eb5644635ed63317e78acebfb12b9bdb59b1a9e987827f7c1075/QZFM-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb28ed2763f55133799935266630ac3b20a7d353883dc6df0fc4a6be0ce6ec8",
          "md5": "b26e0405e895816b80a5237777db2c51",
          "sha256": "f7f6b234126c09abd4bcc9f6a4f9578dde0c6dc9dd6e3137d72741ba01d91e7f"
        },
        "downloads": -1,
        "filename": "QZFM-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b26e0405e895816b80a5237777db2c51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11883,
        "upload_time": "2023-03-27T16:12:51",
        "upload_time_iso_8601": "2023-03-27T16:12:51.558361Z",
        "url": "https://files.pythonhosted.org/packages/3b/b2/8ed2763f55133799935266630ac3b20a7d353883dc6df0fc4a6be0ce6ec8/QZFM-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cb6d3d8a035eb5644635ed63317e78acebfb12b9bdb59b1a9e987827f7c1075",
        "md5": "af629e28ed10906ec9cc2368f05e73f1",
        "sha256": "991b1adc34a3100754e6ebb3469ca78d2024032dd0162b33439cb32b82d096d7"
      },
      "downloads": -1,
      "filename": "QZFM-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af629e28ed10906ec9cc2368f05e73f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13053,
      "upload_time": "2023-03-27T16:12:49",
      "upload_time_iso_8601": "2023-03-27T16:12:49.449595Z",
      "url": "https://files.pythonhosted.org/packages/6c/b6/d3d8a035eb5644635ed63317e78acebfb12b9bdb59b1a9e987827f7c1075/QZFM-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bb28ed2763f55133799935266630ac3b20a7d353883dc6df0fc4a6be0ce6ec8",
        "md5": "b26e0405e895816b80a5237777db2c51",
        "sha256": "f7f6b234126c09abd4bcc9f6a4f9578dde0c6dc9dd6e3137d72741ba01d91e7f"
      },
      "downloads": -1,
      "filename": "QZFM-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b26e0405e895816b80a5237777db2c51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11883,
      "upload_time": "2023-03-27T16:12:51",
      "upload_time_iso_8601": "2023-03-27T16:12:51.558361Z",
      "url": "https://files.pythonhosted.org/packages/3b/b2/8ed2763f55133799935266630ac3b20a7d353883dc6df0fc4a6be0ce6ec8/QZFM-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}