{
  "info": {
    "author": "Panos Mitzias",
    "author_email": "pmitzias@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SPARQL Burger\r\nSPARQL Burger is a **Python SPARQL query builder** that automates the generation of SPARQL graph patterns, SPARQL Select and SPARQL Update queries. Just like stacking onions, tomatos and cheese to assemble the right burger, SPARQL Burger offers the necessary ingredients for the assembly of meaningful SPARQL queries in an OOP manner.\r\n\r\n[![Downloads](http://pepy.tech/badge/SPARQL-Burger)](http://pepy.tech/project/SPARQL-Burger)\r\n\r\n## Getting Started\r\nSPARQL Burger is a minimal module for Python (2.x. and 3.x).\r\n\r\n### Prerequisites\r\n\r\nNone\r\n\r\n### Installation\r\n\r\n* #### Manually\r\n\r\n 1. Save the `SPARQLBurger` folder to your project's directory.\r\n\r\n* #### From PyPi\r\n\r\n ```\r\n pip install SPARQL-Burger\r\n ```\r\n\r\n## Usage examples\r\n### 1. Create a SPARQL graph pattern and add some triples\r\nIn this example we generate a minimal [SPARQL graph pattern](http://https://www.w3.org/TR/rdf-sparql-query/#GraphPattern \"SPARQL graph pattern\"). A graph pattern, delimited with `{ }`, is a building block for SPARQL queries and more than one can be nested and/or united to form a more complex graph pattern.\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create a graph pattern\r\npattern = SPARQLGraphPattern()\r\n\r\n# Add a couple of triples to the pattern\r\npattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:hasName\", object=\"?name\")\r\n        ]\r\n    )\r\n\r\n# Let's print this graph pattern\r\nprint(pattern.get_text())\r\n```\r\nThe printout is:\r\n```\r\n{\r\n   ?person rdf:type ex:Person . \r\n   ?person ex:hasName ?name . \r\n}\r\n```\r\n</details>\r\n\r\n### 2. Create an OPTIONAL pattern and nest it to the main pattern\r\nHere, the main graph pattern contains another graph pattern that is declared as OPTIONAL. In general, graph patterns can contain as many nesting levels as necessary. Nesting a pattern to itself, though, would result to an error.\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create a main graph pattern and add some triples\r\nmain_pattern = SPARQLGraphPattern()\r\nmain_pattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:hasName\", object=\"?name\")\r\n        ]\r\n    )\r\n\r\n# Create an optional pattern and add a triple\r\noptional_pattern = SPARQLGraphPattern(optional=True)\r\noptional_pattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"ex:hasAge\", object=\"?age\")\r\n        ]\r\n    )\r\n\r\n# Nest the optional pattern to the main\r\nmain_pattern.add_nested_graph_pattern(optional_pattern)\r\n\r\n# Let's print the main graph pattern\r\nprint(pattern.get_text())\r\n```\r\nThe printout is:\r\n```\r\n{\r\n   ?person rdf:type ex:Person . \r\n   ?person ex:hasName ?name . \r\n   OPTIONAL {\r\n      ?person ex:hasAge ?age . \r\n   }\r\n}\r\n```\r\n</details>\r\n\r\n### 3. Create a UNION of graph patterns\r\nIn this example we will declare a main graph pattern that contains two other graph patterns associated with UNION.\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create an empty graph pattern\r\nmain_pattern = SPARQLGraphPattern()\r\n\r\n# Create the first graph pattern to be nested and add some triples\r\nfirst_pattern = SPARQLGraphPattern()\r\nfirst_pattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:hasName\", object=\"?name\")\r\n        ]\r\n    )\r\n\r\n# Create the second graph pattern to be nested as a UNION to the first and add some triples\r\nsecond_pattern = SPARQLGraphPattern(union=True)\r\nsecond_pattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:User\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:hasNickname\", object=\"?name\")\r\n        ]\r\n    )\r\n\r\n# Nest both patterns to the main one\r\nmain_pattern.add_nested_graph_pattern(graph_pattern=first_pattern)\r\nmain_pattern.add_nested_graph_pattern(graph_pattern=second_pattern)\r\n\r\n# Let's print the main graph pattern\r\nprint(main_pattern.get_text())\r\n```\r\nThe printout is:\r\n```\r\n{\r\n   {\r\n      ?person rdf:type ex:Person . \r\n      ?person ex:hasName ?name . \r\n   }\r\n   UNION\r\n   {\r\n      ?person rdf:type ex:User . \r\n      ?person ex:hasNickname ?name . \r\n   }\r\n}\r\n```\r\n</details>\r\n\r\n### 4. Adding FILTER, BIND and IF definitions\r\nSo far we have created simple and nested graph patterns. Now let's see how to add filters, bindings and if clauses.\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create a graph pattern and add some triples\r\npattern = SPARQLGraphPattern()\r\npattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:hasAge\", object=\"?age\")\r\n        ]\r\n    )\r\n\r\n# Add a filter for variable ?age\r\npattern.add_filter(\r\n    filter= Filter(\r\n        expression=\"?age < 65\"\r\n    )\r\n)\r\n\r\n# Add a binding for variable ?years_alive\r\npattern.add_binding(\r\n    binding=Binding(\r\n        value=\"?age\",\r\n        variable=\"?years_alive\"\r\n    )\r\n)\r\n\r\n# Add a binding for variable ?status, that should be \"minor\" or \"adult\" based on the ?age value\r\npattern.add_binding(\r\n    binding=Binding(\r\n        value=IfClause(\r\n            condition=\"?age >= 18\",\r\n            true_value=\"'adult'\",\r\n            false_value=\"'minor'\"\r\n        ),\r\n        variable=\"?status\"\r\n    )\r\n)\r\n\r\n# Print the graph pattern\r\nprint(pattern.get_text())\r\n```\r\nThe printout is:\r\n```\r\n{\r\n   ?person rdf:type ex:Person . \r\n   ?person ex:hasAge ?age . \r\n   BIND (?age AS ?years_alive)\r\n   BIND (IF (?age >= 18, 'adult', 'minor') AS ?status)\r\n   FILTER (?age < 65)\r\n}\r\n```\r\nIn the first BIND we have only provided a value and a variable as string, but this is not always the case. In the second BIND we nested an IF clause. Therefore, the `Binding.value` also accepts objects of classes like `IfClause`. In a similar way, the arguments of `IfClause` can also be other objects of type `IfClause` and `Bound` in a nested format, as shown below. \r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create a graph pattern and add a triple\r\npattern = SPARQLGraphPattern()\r\npattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n        ]\r\n    )\r\n\r\n# Create an optional graph pattern and add a triple\r\noptional_pattern = SPARQLGraphPattern(optional=True)\r\noptional_pattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"ex:hasAddress\", object=\"?address\")\r\n        ]\r\n    )\r\n\r\n# Add a binding with nested a IF clause and a BOUND condition\r\npattern.add_binding(\r\n    binding=Binding(\r\n        value=IfClause(\r\n            condition=Bound(\r\n                variable=\"?address\"\r\n            ),\r\n            true_value=\"?address\",\r\n            false_value=\"'Unknown'\"\r\n        ),\r\n        variable=\"?address\"\r\n    )\r\n)\r\n\r\n# Print the graph pattern\r\nprint(pattern.get_text())\r\n```\r\nThe printout is:\r\n```\r\n{\r\n   ?person rdf:type ex:Person . \r\n   BIND (IF (BOUND (?address), ?address, 'Unknown') AS ?address)\r\n}\r\n```\r\n</details>\r\n\r\n### 5. Create a SPARQL Select query\r\nNow that we have mastered the definition of graph patterns, let's create a simple Select query.\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create an object of class SPARQLSelectQuery and set the limit for the results to 100\r\nselect_query = SPARQLSelectQuery(distinct=True, limit=100)\r\n\r\n# Add a prefix\r\nselect_query.add_prefix(\r\n    prefix=Prefix(prefix=\"ex\", namespace=\"http://www.example.com#\")\r\n)\r\n\r\n# Add the variables we want to select\r\nselect_query.add_variables(variables=[\"?person\", \"?age\"])\r\n\r\n# Create a graph pattern to use for the WHERE part and add some triples\r\nwhere_pattern = SPARQLGraphPattern()\r\nwhere_pattern.add_triples(\r\n        triples=[\r\n            Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:hasAge\", object=\"?age\"),\r\n            Triple(subject=\"?person\", predicate=\"ex:address\", object=\"?address\"),\r\n        ]\r\n    )\r\n\r\n# Set this graph pattern to the WHERE part\r\nselect_query.set_where_pattern(graph_pattern=where_pattern)\r\n\r\n# Group the results by age\r\nselect_query.add_group_by(\r\n    group=GroupBy(\r\n        variables=[\"?age\"]\r\n    )\r\n)\r\n\r\n# Print the query we have defined\r\nprint(select_query.get_text())\r\n```\r\nThe printout is:\r\n```\r\nPREFIX ex: <http://www.example.com#>\r\n\r\nSELECT DISTINCT ?person ?age\r\nWHERE {\r\n   ?person rdf:type ex:Person . \r\n   ?person ex:hasAge ?age . \r\n   ?person ex:address ?address . \r\n}\r\nGROUP BY ?age\r\nLIMIT 100\r\n```\r\n</details>\r\n\r\n### 6. Create a SPARQL Update query\r\nQuite similarly we can exploit graph patterns to create a SPARQL Update query (in the DELETE/INSERT form).\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\n# Create a SPARQLUpdateQuery object\r\nupdate_query = SPARQLUpdateQuery()\r\n\r\n# Add a prefix\r\nupdate_query.add_prefix(\r\n    prefix=Prefix(prefix=\"ex\", namespace=\"http://www.example.com#\")\r\n)\r\n\r\n# Create a graph pattern for the DELETE part and add a triple\r\ndelete_pattern = SPARQLGraphPattern()\r\ndelete_pattern.add_triples(\r\n    triples=[\r\n        Triple(subject=\"?person\", predicate=\"ex:hasAge\", object=\"?age\")\r\n    ]\r\n)\r\n\r\n# Create a graph pattern for the INSERT part and add a triple\r\ninsert_pattern = SPARQLGraphPattern()\r\ninsert_pattern.add_triples(\r\n    triples=[\r\n        Triple(subject=\"?person\", predicate=\"ex:hasAge\", object=\"32\")\r\n    ]\r\n)\r\n\r\n# Create a graph pattern for the WHERE part and add some triples\r\nwhere_pattern = SPARQLGraphPattern()\r\nwhere_pattern.add_triples(\r\n    triples=[\r\n        Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n        Triple(subject=\"?person\", predicate=\"ex:hasAge\", object=\"?age\")\r\n    ]\r\n)\r\n\r\n# Now let's append these graph patterns to our query\r\nupdate_query.set_delete_pattern(graph_pattern=delete_pattern)\r\nupdate_query.set_insert_pattern(graph_pattern=insert_pattern)\r\nupdate_query.set_where_pattern(graph_pattern=where_pattern)\r\n\r\n# Print the query we have defined\r\nprint(update_query.get_text())\r\n```\r\nThe printout is:\r\n```\r\nPREFIX ex: <http://www.example.com#>\r\n\r\nDELETE {\r\n   ?person ex:hasAge ?age . \r\n}\r\nINSERT {\r\n   ?person ex:hasAge 32 . \r\n}\r\nWHERE {\r\n   ?person rdf:type ex:Person . \r\n   ?person ex:hasAge ?age . \r\n}\r\n```\r\n</details>\r\n\r\n\r\n### 7. Reference multiple URIs with VALUES\r\nBy defining a VALUES, it is possible to reference multiple URIs by a single variable name\r\n\r\n<details>\r\n <summary>Show example</summary>\r\n\r\n```python\r\nfrom SPARQLBurger.SPARQLQueryBuilder import *\r\n\r\npattern = SPARQLGraphPattern()\r\n\r\nuris = [\"https://www.wikidata.org/entity/Q42\",\r\n        \"https://www.wikidata.org/entity/Q46248\"]\r\npattern.add_value(value=Values(values=uris, name=\"?friend\"))\r\n\r\npattern.add_triples(\r\n    triples=[\r\n        Triple(subject=\"?person\", predicate=\"rdf:type\", object=\"ex:Person\"),\r\n        Triple(subject=\"?person\", predicate=\"foaf:knows\", object=\"?friend\")\r\n    ]\r\n)\r\n\r\n# Print the query we have defined\r\nprint(pattern.get_text())\r\n```\r\n\r\nThe printout is:\r\n```\r\n{\r\n VALUES ?friend {<https://www.wikidata.org/entity/Q42> <https://www.wikidata.org/entity/Q46248>}\r\n ?person rdf:type ex:Person . \r\n ?person foaf:knows ?friend . \r\n}\r\n```\r\n</details>\r\n\r\n## Tests\r\nTo run the tests, install `pytest` via\r\n\r\n```shell\r\npip install pytest\r\n```\r\n\r\nSubsequently run\r\n\r\n```shell\r\npytest\r\n```\r\n\r\n## Documentation\r\n[The official webpage](http://pmitzias.com/SPARQLBurger) - [The Docs](http://pmitzias.com/SPARQLBurger/docs.html)\r\n\r\n## Authors\r\n* [Panos Mitzias](http://pmitzias.com) - Design and development\r\n* [Stratos Kontopoulos](http://stratoskontopoulos.com) - Contribution to the design\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/panmitz/SPARQL-Burger",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SPARQL-Burger",
    "package_url": "https://pypi.org/project/SPARQL-Burger/",
    "platform": null,
    "project_url": "https://pypi.org/project/SPARQL-Burger/",
    "project_urls": {
      "Homepage": "https://github.com/panmitz/SPARQL-Burger"
    },
    "release_url": "https://pypi.org/project/SPARQL-Burger/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python SPARQL query builder that automates the generation of SPARQL graph patterns, SPARQL Select and SPARQL Update queries.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16195509,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "893d4b3216d36a5d15ed05ee764e6a961af3c813fe2034997f1fbee05b215d8d",
          "md5": "cf0949538795a3ff150f89a1d3f9be18",
          "sha256": "f23836635d6de29adeca5cd9b90dfaf32944862b9a2e1b9ad36a40fb4bf9ca6e"
        },
        "downloads": -1,
        "filename": "SPARQL_Burger-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf0949538795a3ff150f89a1d3f9be18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10529,
        "upload_time": "2020-11-17T14:42:20",
        "upload_time_iso_8601": "2020-11-17T14:42:20.876471Z",
        "url": "https://files.pythonhosted.org/packages/89/3d/4b3216d36a5d15ed05ee764e6a961af3c813fe2034997f1fbee05b215d8d/SPARQL_Burger-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a04098dee4e0f88e994bdf3f53ffa07c6b3820b16f06f729e3ef4d7867b4971d",
          "md5": "9d0cd9d8a115aa0de513906cd17796af",
          "sha256": "217c53bcad86b9e78b4a8e0664f75c806d5e9238687d25d1486356e934609333"
        },
        "downloads": -1,
        "filename": "SPARQL-Burger-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d0cd9d8a115aa0de513906cd17796af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11035,
        "upload_time": "2020-11-17T14:42:22",
        "upload_time_iso_8601": "2020-11-17T14:42:22.013831Z",
        "url": "https://files.pythonhosted.org/packages/a0/40/98dee4e0f88e994bdf3f53ffa07c6b3820b16f06f729e3ef4d7867b4971d/SPARQL-Burger-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6684b6a724a0f8da44ba6c4bc459df9fe20bb2feae870be87e4a23893c31cad7",
          "md5": "14af8abb9f798e11db7559d3be070828",
          "sha256": "845ff407692027f7b977ad07204d2c55b7d476b34a4e35bfbea91f6c3a8ed3f9"
        },
        "downloads": -1,
        "filename": "SPARQL_Burger-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14af8abb9f798e11db7559d3be070828",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12480,
        "upload_time": "2022-12-23T09:07:08",
        "upload_time_iso_8601": "2022-12-23T09:07:08.612047Z",
        "url": "https://files.pythonhosted.org/packages/66/84/b6a724a0f8da44ba6c4bc459df9fe20bb2feae870be87e4a23893c31cad7/SPARQL_Burger-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62c05b31eb3d07878c96c23c9aed9865bf0c3a6cd046c28ced183c0336e61fdb",
          "md5": "6d6cc8f460b507f21ed671a190dba865",
          "sha256": "88ec0a9aeb001d5c3dd08b82405059ae7a0365e7839efee3cbe57123f0ed7bce"
        },
        "downloads": -1,
        "filename": "SPARQL-Burger-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6d6cc8f460b507f21ed671a190dba865",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12561,
        "upload_time": "2022-12-23T09:07:10",
        "upload_time_iso_8601": "2022-12-23T09:07:10.426447Z",
        "url": "https://files.pythonhosted.org/packages/62/c0/5b31eb3d07878c96c23c9aed9865bf0c3a6cd046c28ced183c0336e61fdb/SPARQL-Burger-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6684b6a724a0f8da44ba6c4bc459df9fe20bb2feae870be87e4a23893c31cad7",
        "md5": "14af8abb9f798e11db7559d3be070828",
        "sha256": "845ff407692027f7b977ad07204d2c55b7d476b34a4e35bfbea91f6c3a8ed3f9"
      },
      "downloads": -1,
      "filename": "SPARQL_Burger-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14af8abb9f798e11db7559d3be070828",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12480,
      "upload_time": "2022-12-23T09:07:08",
      "upload_time_iso_8601": "2022-12-23T09:07:08.612047Z",
      "url": "https://files.pythonhosted.org/packages/66/84/b6a724a0f8da44ba6c4bc459df9fe20bb2feae870be87e4a23893c31cad7/SPARQL_Burger-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62c05b31eb3d07878c96c23c9aed9865bf0c3a6cd046c28ced183c0336e61fdb",
        "md5": "6d6cc8f460b507f21ed671a190dba865",
        "sha256": "88ec0a9aeb001d5c3dd08b82405059ae7a0365e7839efee3cbe57123f0ed7bce"
      },
      "downloads": -1,
      "filename": "SPARQL-Burger-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6d6cc8f460b507f21ed671a190dba865",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12561,
      "upload_time": "2022-12-23T09:07:10",
      "upload_time_iso_8601": "2022-12-23T09:07:10.426447Z",
      "url": "https://files.pythonhosted.org/packages/62/c0/5b31eb3d07878c96c23c9aed9865bf0c3a6cd046c28ced183c0336e61fdb/SPARQL-Burger-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}