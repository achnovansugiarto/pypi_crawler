{
  "info": {
    "author": "Ludovico Lemma",
    "author_email": "lwdovico@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "|price-predictor PyPI Project Page| |MIT License| |Supported Python\r\nVersions|\r\n\r\nQuickly predict the future prices of financial instruments with a\r\ncustomizable LSTM Recurrent Neural Network\r\n\r\n**Price-Predictor**\r\n\r\n-  You need only a **valid yahoo finance** symbol like:\r\n   \"`EURUSD=X <https://it.finance.yahoo.com/quote/EURUSD=X?p=EURUSD=X>`__\",\r\n   \"`^DJI <https://it.finance.yahoo.com/quote/^DJI?p=^DJI>`__\" or\r\n   \"`AMZN <https://it.finance.yahoo.com/quote/AMZN?p=AMZN>`__\"\r\n\r\n-  Download temporarily the financial data from the optionally specified\r\n   date (if not specified it starts from july 2010)\r\n\r\n-  A LSTM RNN will be trained and it will **automatically predict** the\r\n   next **opening price** of the instrument\r\n\r\nInstallation\r\n------------\r\n\r\nWith Python and Pip installed, do:\r\n\r\n.. code:: sh\r\n\r\n   pip3 install price-predictor\r\n\r\nWait for the dependencies to be installed, tensorflow may need a few\r\nminutes.\r\n\r\nCommand-line usage\r\n------------------\r\n\r\nWrite the following command from your shell:\r\n\r\n.. code:: sh\r\n\r\n    price_predictor [symbol] [--date (str)] [--target (str)] [--stamps (int)] [--ratio (float)] [--layers (int)] [--epochs (int)]\r\n\r\n- The **symbol** is just a short code of the financial instrument that must be available on yahoo finance\r\n\r\nThe following parameters are optional:\r\n\r\n- The **date** must be provided in the ISO format, for example: 2015-01-25\r\n- The **target** can be eiter 'Open', 'Close', 'Adj Close', 'High', 'Low' or 'Volume', the latter only if available, the default target is 'Open'\r\n- The **stamps** is an integer that identifies the time window of the training subsequences, the default value is 30 which can be seen as roughly a month (it trains to predict tomorrow's value considering the last 30 days)\r\n- The **ratio** is the percentage used to divide training and test set, the higher the closest to the current trends the prediction will turn out, but it may overfit (just ignore if not know how to use), the default value is 0.90\r\n- The **layers** are the number of layers of the LSTM, the minimum number possible will be always 2, the dafault is 4\r\n- The **epochs** are the number of of epochs the neural network will train, the default is 10 but it can be raised\r\n\r\nNB: The argument can be signaled also with a single dash and its first letter (es: -d), no signal is required for the symbol. Also if default values are okay it is possible to entirely omit signaling them. It's also important to consider that having a close date to today with fewer days than the input stamps may cause unexpected errors.\r\n\r\n**Usage example:**\r\n\r\n.. code:: sh\r\n\r\n   price_predictor EURUSD=X -d 2021-09-01 -t 'Close' -s 60 -r 0.9 -l 4 -e 50\r\n\r\nMeaning: Return tomorrow's EUR/USD closing price after training on data from the 1st of September 2021, with the first 90% of those data dedicated to the training with a time window perspective of the past two months to predict a new price, the LSTM RNN will have 4 layers and the epochs of training will be 50.\r\n\r\nFinally it will also give you a plot of the training and test data prices and the resulting predictions on the test data to visually understand the accuracy of the model.\r\n\r\nDocumentation\r\n-------------\r\n\r\nImporting the library\r\n\r\n.. code:: sh\r\n\r\n   from price_predictor import price_predictor as pp\r\n\r\nThen you can use the same function (quick_tomorrow)as in the command line and a few more\r\ntools\r\n\r\nYou can use 2 functions to query and temporarily store the csv and another\r\none which is used for the command line to get quick results:\r\n\r\n.. code:: sh\r\n\r\n   pp.yahoo_finance_csv(code, start_from_date = '2010-07-01', end_to_date = today(), interval = 'd')\r\n   \r\n   pp.quick_tomorrow(code, plot = True, start_from_date, target_value, time_stamps, training_to_test_ratio, n_layers, n_epochs)\r\n  \r\n- end_to_date is the date where there must stop the download of data\r\n- interval can be 'd' for day, 'wk' for weeks and 'mo' for months\r\n   \r\nThen there are two classes you can work with, the basic one is:\r\n\r\n.. code:: sh\r\n\r\n   model = pp.Price_Predictor(code, start_from_date = '2010-07-01', end_to_date = today(), interval = 'd', time_stamps = 30,\r\n                              target_value = 'Open', training_to_test_ratio = 0.7, n_layers = 4, n_epochs = 15, verbose = 0, \r\n                              load_model = False, path_load = 'model_saved', fit_at_start = False, days_forward = 1)\r\n   \r\n- verbose is 0 if you do not want any training info output, 1 if you want the progress bar, 2 if you want the description of each training epoch\r\n- load model will load the model stored in the cwd with name = path_load\r\n- fit_at_start is used to avoid manually transforming the data and fitting the model with the method .fit_and_test()\r\n- days_forward is used only if fit_at_start is True, it indicates the how far is the day you want to predict from the last time stamp\r\n\r\n\r\nThis class has a few methods as in the following usage example:\r\n\r\n.. code:: sh\r\n\r\n   from price_predictor import price_predictor as pp\r\n   import matplotlib.pyplot as plt\r\n   \r\n   fig, axs = plt.subplots(1, 2, figsize=(18,5))\r\n   \r\n   model = pp.Price_Predictor('BTC-EUR', training_to_test_ratio=0.85)\r\n   model.plot_data(ax = axs[0])\r\n   model.fit_and_test(days_forward = 2)\r\n   model.plot_results(ax = axs[1])\r\n   plt.legend()\r\n   plt.show()\r\n   \r\nOutput:\r\n\r\n|BTC-EUR Example|\r\n\r\n- .plot_data() will plot a chart of the training and test data prices with the point of split\r\n- .fit_and_test(days_forward = 2) will scale the data, train the model and test it on the test data, as specified by the parameter it will predict the next price for the day after tomorrow\r\n- .plot_results() will plot a chart of the results of the prediction on the test data\r\n\r\n.. code:: sh\r\n\r\n   model.predict(input_sequence = None, return_info = True)\r\n   \r\nOutput:\r\n\r\n   WARNING: No input sequence provided, the records of the data downloaded will be used instead.\r\n   WARNING: The input sequence on which to forecast is longer than 30 which is the input time stamp and the length of array needed in order to get a prediction,the last 30 records will be considered instead.\r\n\r\n   In 2 day(s) the price will be: 21021.205\r\n   \r\n   21021.205\r\n   \r\n- return_info = True it will return the warnings and the final print, if False will only return 21021.205\r\n- input_sequence = None it will use the data downloaded, instead if an array or list is specified at least as long as the time_stamps specified within the model, the prediction will be based upon the last possible price sequence with exact length of \"time_stamps\"\r\n\r\nBesideds the original parameters it is also possible to access the following relevant attributes of the class in the subsequent way:\r\n\r\n- the dataframe used\r\n- the Min Max scaler used\r\n- the training to test split value of the dataframe\r\n\r\n.. code:: sh\r\n\r\n   model.df\r\n   model.scale\r\n   model.split_val\r\n   \r\nIt is possible to access the data and the parameters of class also with the following methods:\r\n   \r\n.. code:: sh\r\n\r\n   model.__get_data_frame__()\r\n   model.__get_training_set__()\r\n   model.__get_test_set__()\r\n   model.__get_params__()\r\n\r\nIt is possible to save and load the trained model as it follows:\r\n\r\n.. code:: sh\r\n\r\n   model.save_model(dir = 'model_saved')\r\n   model_2 = pp.Price_Predictor('BTC-EUR', \r\n                                 load_model = True, path_load = 'model_saved', \r\n                                 fit_at_start = True, days_forward = 2)\r\n\r\nAs of now the .save_model() method won't store neither the csv nor the scaled data, as such it is necessary to download them again and then scale them either with fit_at_start = True or with the .fit_and_test() method. In both cases the days_forward parameter must be the same as before.\r\n\r\n**BETA**: The other class is Predict_Iterator, it inherits all the methods and attributes of the Price_Predictor parent class.\r\n\r\n.. code:: sh\r\n\r\n   Predict_Iterator(code, start_from_date = '2010-07-01', end_to_date = today(), \r\n                    effort = 0.5, time_stamps = 30)\r\n                    \r\nThe parameter effort is used to manage the computational time, it is best left untouched, it's a coefficient used to concurrently increase or reduce the parameters:\r\n\r\n- training_to_test_ratio: from 0.70 to 0.90\r\n- n_layers: from 2 to 4 with a stronger preference towards 2 layers: max(2, 4*effort)\r\n- n_epochs: 2 if effort less than 0.6, 4 if less than 0.75, 10 if less than 0.85 and 15 if greater\r\n\r\nThe way this class is applied is mainly with the method .get_predictions(), it works like this:\r\n\r\n.. code:: sh\r\n   \r\n   iterate_model = Predict_Iterator('FTSEMIB.MI')\r\n   list_of_predictions = iterate_model.get_predictions(days_to_predict = 4)\r\n \r\nIt will predict the next 4 days' prices, the parameter days_to_predict will determin the number of training to perform in a loop with different days_forwards (from 1 to days_to_predict).\r\n\r\nThe trained models will be accessible through the list attribute stored_models as it follows\r\n\r\n.. code:: sh\r\n   \r\n   iterate_model.stored_models\r\n   model_1 = iterate_model.stored_models[0]\r\n   \r\nEach element of the list is a model trained with different future day tergets, once it is accessed it is possible to plot results and manage them as normal Price_Predictor objects.\r\n\r\nNotes\r\n----------\r\n\r\nIt is better to use this tool with financial instruments without a history of substantial price changes, indeed if the price was too high or too low in the past compared to the latest records, the model learnt may be biased towards different levels of prices, it may follow the trend but the amplitude may be completely wrong. \r\n\r\nA possible solution to this problem is changing the starting date from which to gather data, so that the model may not be biased towards past averaage prices, or to increase the training to test split ratio (use with care!).\r\n\r\nDisclaimer\r\n----------\r\n\r\nI am in no way affiliated with, authorized, maintained or endorsed by\r\nYahoo Finance or any of its affiliates or subsidiaries. This is an\r\nindependent and unofficial project.\r\n\r\nIt is licensed under an MIT license. Refer to the ``LICENSE`` file for\r\nmore information.\r\n\r\n.. |price-predictor PyPI Project Page| image:: https://img.shields.io/pypi/v/price-predictor.svg\r\n   :target: https://pypi.org/project/price-predictor/\r\n.. |MIT License| image:: https://img.shields.io/github/license/ludovicolemma/price-predictor.svg\r\n   :target: https://github.com/ludovicolemma/price-predictor/blob/main/LICENSE\r\n.. |Supported Python Versions| image:: https://img.shields.io/pypi/pyversions/price-predictor.svg\r\n.. |BTC-EUR Example| image:: https://raw.githubusercontent.com/ludovicolemma/price-predictor/main/examples/btc-eur.png\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/ludovicolemma/price-predictor/archive/refs/tags/v1.0.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ludovicolemma/price-predictor",
    "keywords": "LSTM,Machine Learning,Market Price Prediction,Stock Price Prediction,Financial Forecasting",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "price-predictor",
    "package_url": "https://pypi.org/project/price-predictor/",
    "platform": null,
    "project_url": "https://pypi.org/project/price-predictor/",
    "project_urls": {
      "Download": "https://github.com/ludovicolemma/price-predictor/archive/refs/tags/v1.0.6.tar.gz",
      "Homepage": "https://github.com/ludovicolemma/price-predictor"
    },
    "release_url": "https://pypi.org/project/price-predictor/1.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Quickly predict the future prices of financial instruments with a customizable LSTM Recurrent Neural Network",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14749889,
  "releases": {
    "1.0.0": [],
    "1.0.1": [],
    "1.0.2": [],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77d2cb26c704933c01546f546c4344294094f54751d4ec66f90b7d441b394403",
          "md5": "34cb688f1ca92a2ffc486ce40960f19f",
          "sha256": "7b27c1902cd1fbc851c3f5612b08cc06e4551f6c4f420733e6bb3cde20311a0c"
        },
        "downloads": -1,
        "filename": "price_predictor-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "34cb688f1ca92a2ffc486ce40960f19f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14472,
        "upload_time": "2022-08-12T14:25:13",
        "upload_time_iso_8601": "2022-08-12T14:25:13.188940Z",
        "url": "https://files.pythonhosted.org/packages/77/d2/cb26c704933c01546f546c4344294094f54751d4ec66f90b7d441b394403/price_predictor-1.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99489758390ada3aa36e25d5e60bc1b58fe72fb4121679f009a19b04a156094c",
          "md5": "b4efe4135bfc7978a0fc660aa4e9878f",
          "sha256": "7f0e0b2545bbbc006f3150c0b806cd7b9c80ab6a9cc539fa34525eaf6a404406"
        },
        "downloads": -1,
        "filename": "price_predictor-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b4efe4135bfc7978a0fc660aa4e9878f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14460,
        "upload_time": "2022-08-12T14:40:12",
        "upload_time_iso_8601": "2022-08-12T14:40:12.417305Z",
        "url": "https://files.pythonhosted.org/packages/99/48/9758390ada3aa36e25d5e60bc1b58fe72fb4121679f009a19b04a156094c/price_predictor-1.0.4.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d1dd4ae1349c360eadda75b54fe09d6faa25edb93f32a19afaad0de765f2752",
          "md5": "839bbe13377004c01a209a1a66ecc308",
          "sha256": "c458e86cf227d462f9718805690622bbea4deb2e59c34476155d8cb675869489"
        },
        "downloads": -1,
        "filename": "price_predictor-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "839bbe13377004c01a209a1a66ecc308",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14864,
        "upload_time": "2022-08-12T20:37:50",
        "upload_time_iso_8601": "2022-08-12T20:37:50.365299Z",
        "url": "https://files.pythonhosted.org/packages/0d/1d/d4ae1349c360eadda75b54fe09d6faa25edb93f32a19afaad0de765f2752/price_predictor-1.0.5.tar.gz",
        "yanked": true,
        "yanked_reason": "New and more stable features"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cd8ffac792d26b124e2df3649aa04905992d1f7363523e23d8640f36b45d9bb",
          "md5": "dcf409198cf780e3a5ac5c43ee7dbbac",
          "sha256": "2181ffe7c36a9be8680ccff6fb2657b71a3171fd1d9c3c289dd6683c6dd23e02"
        },
        "downloads": -1,
        "filename": "price_predictor-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "dcf409198cf780e3a5ac5c43ee7dbbac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15744,
        "upload_time": "2022-08-13T14:08:28",
        "upload_time_iso_8601": "2022-08-13T14:08:28.683605Z",
        "url": "https://files.pythonhosted.org/packages/2c/d8/ffac792d26b124e2df3649aa04905992d1f7363523e23d8640f36b45d9bb/price_predictor-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cd8ffac792d26b124e2df3649aa04905992d1f7363523e23d8640f36b45d9bb",
        "md5": "dcf409198cf780e3a5ac5c43ee7dbbac",
        "sha256": "2181ffe7c36a9be8680ccff6fb2657b71a3171fd1d9c3c289dd6683c6dd23e02"
      },
      "downloads": -1,
      "filename": "price_predictor-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "dcf409198cf780e3a5ac5c43ee7dbbac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 15744,
      "upload_time": "2022-08-13T14:08:28",
      "upload_time_iso_8601": "2022-08-13T14:08:28.683605Z",
      "url": "https://files.pythonhosted.org/packages/2c/d8/ffac792d26b124e2df3649aa04905992d1f7363523e23d8640f36b45d9bb/price_predictor-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}