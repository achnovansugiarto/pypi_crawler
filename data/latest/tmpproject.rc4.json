{
  "info": {
    "author": "Tsvigun A., Sanochkin L., Kuzmin G., Larionov D., and Dr Shelmanov A.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<!-- <p align=\"center\">\n<img height=\"200\" src=\"https://cdn-icons-png.flaticon.com/512/2092/2092791.png\" alt=\"ALToolbox\" />\n</p>\n -->\n# üõ† ALToolbox \n<!-- **üõ† ALToolbox üõ†**:  -->\nALToolbox is a framework for practical active learning in NLP.\n<hr>\n\n[Installation](#installation) | [Quick Start](#quick_start) | [Overview](#overview) | [Docs](#documentation) | [Citation](#citation)\n\n<!-- ALToolbox provides a set of tools **Active Learning** for text classification and sequence tagging tasks: state-of-the-art query strategies, \nSeveral pre-implemented Query Strategies, Initialization Strategies, and Stopping Criterion are provided, \nwhich can be easily mixed and matched to build active learning applications or run experiments.\n -->\nALToolbox is a framework for **active learning** annotation in natural language processing. Currently, the framework supports text classification and sequence tagging tasks. ALToolbox provides state-of-the-art query strategies, serverless annotation tool for Jupyter IDE, and a set of tools that help to reduce computational overhead / duration of AL iterations and increase annotated data reusability.\n\n<!-- computationally efficient and reusable -->\n\n\n## <a name=\"installation\"></a>‚öôÔ∏è Installation \n\n```bash\npip install tmpproject\n```\nTo annotate instances for active learning in Jupyter Notebook or Jupyter Lab one have to install additional widget after framework installation. In case of Jupyter Notebook usage run:\n```bash\njupyter nbextension install --py --symlink --sys-prefix text_selector\njupyter nbextension enable --py --sys-prefix text_selector\n```\nIn case of Jupyter Lab usage run:\n```bash\njupyter labextension install js\njupyter labextension install text_selector\n```\n\n## <a name=\"quick_start\"></a>üí´ Quick Start \n\nFor quick start, please see the examples of launching an active learning annotation or benchmarking a novel query stategy / unlabeled pool subsampling strategy for sequence tagging and text classification tasks:\n\n| #   | Notebook                                                                                                                 |\n|-----|--------------------------------------------------------------------------------------------------------------------------|\n| 1   | [Launching Active Learning for Token Classification](jupyterlab_demo/ner_demo.ipynb)                                     |\n| 2   | [Launching Active Learning for Text Classification](jupyterlab_demo/cls_demo.ipynb)                                      |\n| 3   | [Benchmarking a novel AL query strategy / unlabeled pool subsampling strategy](examples/benchmark_custom_strategy.ipynb) |                   \n\n\n## <a name=\"overview\"></a>üî≠ Overview \n\n\n### 1. Query Strategies \n\n| #   | Strategy                                                                                               | Citation                                                                                             |\n|-----|--------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| 1   | [ALPS](al4nlp/query_strategies/alps_sampling.py)                                                       | [Citation](https://aclanthology.org/2020.emnlp-main.637/) | \n| 2   | [BADGE](al4nlp/query_strategies/badge_sampling.py)                                            | [Citation](https://openreview.net/forum?id=ryghZJBKPS) | \n| 3   | [BAIT](al4nlp/query_strategies/bait_sampling.py)                                              | [Citation](https://proceedings.neurips.cc/paper/2021/file/4afe044911ed2c247005912512ace23b-Paper.pdf) | \n| 4   | [BALD](al4nlp/query_strategies/bald_sampling.py)                                              | [Citation](https://arxiv.org/abs/1112.5745) | \n| 5   | [BatchBALD](al4nlp/query_strategies/batchbald_sampling.py)                                    | [Citation](https://proceedings.neurips.cc/paper/2019/file/95323660ed2124450caaac2c46b5ed90-Paper.pdf) | \n| 6   | [Breaking Ties (BT) (also Maximum Margin)](al4nlp/query_strategies/breaking_ties_sampling.py) | [Citation](https://ieeexplore.ieee.org/document/1334570) | \n| 7   | [Contrastive Active Learning (CAL)](al4nlp/query_strategies/cal_sampling.py)                  | [Citation](https://aclanthology.org/2021.emnlp-main.51/) | \n| 8   | [Cluster Margin](al4nlp/query_strategies/cluster_margin_sampling.py)                          | [Citation](https://arxiv.org/abs/2107.14263) | \n| 9   | [Coreset](al4nlp/query_strategies/coreset_sampling.py)                                        | [Citation](https://openreview.net/forum?id=H1aIuk-RW) | \n| 10  | [Expected Gradient Length (EGL)](al4nlp/query_strategies/egl_sampling.py)                     | [Citation](https://openreview.net/forum?id=ryghZJBKPS (?)) | \n| 11  | [Embeddings KM](al4nlp/query_strategies/embeddings_km_sampling.py)                            | [Citation](https://aclanthology.org/2020.emnlp-main.637/) | \n| 12  | [Entropy](al4nlp/query_strategies/entropy_sampling.py)                                        | [Citation](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.77.9855&rep=rep1&type=pdf) | \n| 13  | [Least Confidence (LC)](al4nlp/query_strategies/lc_sampling.py)                               | [Citation](https://arxiv.org/abs/cmp-lg/9407020) | \n| 14  | [Mahalanobis Distance](al4nlp/query_strategies/mahalanobis_sampling.py)                       | [Citation](https://proceedings.neurips.cc/paper/2018/file/abdeb6f575ac5c6676b747bca8d09cc2-Paper.pdf) | \n| 15  | [Maximum Normalized Log-Probability (MNLP)](al4nlp/query_strategies/mnlp_sampling.py)         | [Citation](https://aclanthology.org/W17-2630/) | \n| 16  | [Random (No AL)](al4nlp/query_strategies/random_sampling.py)                                  | -                                                                                                    |\n\n### 3. Unlabeled Pool Subsampling Strategies\n\n| #   | Strategy                                                                    | Citation                                                     |\n|-----|-----------------------------------------------------------------------------|--------------------------------------------------------------|\n| 1   | [UPS](al4nlp/pool_subsampling_strategies/ups_subsampling.py)       | [Citation](https://aclanthology.org/2022.findings-naacl.90/) |\n| 2   | [Na√Øve](al4nlp/pool_subsampling_strategies/naive_subsampling.py)   | [Citation](https://aclanthology.org/2022.findings-naacl.90/) | \n| 3   | [Random](al4nlp/pool_subsampling_strategies/random_subsampling.py) | -                                                            |\n\n\n### 4. Pipelines for postprocessing of annotated data and preparation of acquisition models\n\n* PLASM postprocessing pipeline for annotated data reusability.\n* Acquisition model distillation.\n* Domain adaptation of acquisition models.\n\n\n### 5. GUI Annotator tool in Jupyter IDE\n\nOur framework provides a serverless GUI annotation tool integrated into the Jupyter IDE:\n![GUI](gui.svg)\n\n### 6. Extensible benchmark for query strategies\n\nTODO:\n\n## <a name=\"documentation\"></a>üìï Documentation \n\n### Usage \nThe `configs` folder contains config files with general settings. The `experiments` folder contains config files with experimental design. To run an experiment with a chosen configuration, specify config file name in `HYDRA_CONFIG_NAME` variable and run `train.sh` script (see `./examples/al` for details). \n\nFor example to launch PLASM on AG-News with ELECTRA as a successor model:\n```\ncd PATH_TO_THIS_REPO\nHYDRA_CONFIG_PATH=../experiments/ag_news HYDRA_EXP_CONFIG_NAME=ag_plasm python active_learning/run_tasks_on_multiple_gpus.py\n```\n\n### Config structure explanation \n- `cuda_devices`: list of CUDA devices to use: one experiment on one CUDA device. `cuda_devices=[0,1]` means using zero-th and first devices.\n- `config_name`: name of config from **configs** folder with general settings: dataset, experiment setting (e.g. LC/ASM/PLASM), model checkpoints, hyperparameters etc.\n- `config_path`: path to config with general settings.\n- `command`: **.py** file to run. For AL experiments, use **run_active_learning.py**.\n- `args`: arguments to modify from a general config in the current experiment. `acquisition_model.name=xlnet-base-cased` means that _xlnet-base-cased_ will be used as an acquisition model.\n- `seeds`: random seeds to use. `seeds=[4837, 23419]` means that two separate experiments with the same settings (except for **seed**) will be run: one with **seed == 4837**, one with **seed == 23419**.\n\n### Output Explanation \nBy default, the results will be present in the folder `RUN_DIRECTORY/workdir_run_active_learning/DATE_OF_RUN/${TIME_OF_RUN}_${SEED}_${MODEL_CHECKPOINT}`. For instance, when launching from the repository folder: `al_nlp_feasible/workdir/run_active_learning/2022-06-11/15-59-31_23419_distilbert_base_uncased_bert_base_uncased`.\n\n- When running a classic AL experiment (acquisition and successor models coincide, regardless of using UPS), the file with the model metrics is `acquisition_metrics.json`.\n- When running an acquisition-successor mismatch experiment, the file with the model metrics is `successor_metrics.json`.\n- When running a PLASM experiment, the file with the model metrics is `target_tracin_quantile_-1.0_metrics.json` (**-1.0** stands for the filtering value, meaning adaptive filtering rate; when using a deterministic filtering rate (e.g. **0.1**), the file will be named `target_tracin_quantile_0.1_metrics.json`). The file with the metrics of the model **without filtering** is `target_metrics.json`.\n\n### Post-processing\nOur framework provides tools for effective data post-processing for its re-usability and a possibility to build powerful models on it.\nPLASM, which aims to alleviate the acquisition-successor mismatch problem and allow to build a model of an\narbitrary type using the labeled data without performance degradation, is implemented in `post_processing/pipeline_plasm`. \nIt uses the config `cls_plasm` / `ner_plasm` (from `jupyterlab_demo/configs). A brief explanation of the config structure:\n- pseudo-labeling model parameters are contained in the key `labeling_model`;\n- successor model parameters are contained in the key `successor_model`;\n- post-processing options are contained in the key `post_processing`:\n  - `label_smoothing`: str / float / None, a parameter for label smoothing (LS) for pseudo-labeled instances. Accepts several options:\n    - \"adaptive\": LS value equals the quality of the labeling model on the validation data.\n    - float, 0 < value < 1: absolute value of label smoothing\n    - None (default): no label smoothing is used\n  - `labeled_weight`: int / float, weight for the labeled-by-human data. 1 < value < +inf \n  - `use_subsample_for_pl`: int / float / None, the size of the subsample used for pseudo-labeling\n  (float means taking the share of the unlabeled data). None means that no subsampling is used.\n  - `uncertainty_threshold`: float / None, the value of the threshold for filtering by uncertainty. If None,\n  no filtering by uncertainty is used.\n  - `filter_by_quantile`: bool, only used for classification, ignored if `uncertainty_threshold` is None. If True, `uncertainty_threshold`\n  most uncertain instances are filtered. Otherwise, all instances whose (1 - max_prob) < `uncertainty_threshold` are filtered.\n  - `tracin`:\n    - `use`: bool, whether to use TracIn for filtering\n    - `max_num_processes`: int, value > 0, maximum number of processes per one GPU\n    - `quantile`: str / float (0 < value < 1), share of unlabeled data instances to filter using the TracIn score.\n    - `num_model_checkpoints`: int, value > 0, how many model checkpoints to save and use for TracIn.\n    - `nu`: float / int, value for TracIn algorithm.\n\n\n### üÜïÔ∏è New strategies addition \nAn AL query strategy should be designed as a function that:\n   1) Receives 3 positional arguments and additional strategy kwargs:\n     - `model` of inherited class `TransformersBaseWrapper` or `PytorchEncoderWrapper` or `FlairModelWrapper`: model wrapper;\n     - `X_pool` of class `Dataset` or `TransformersDataset`: dataset with the unlabeled instances;\n     - `n_instances` of class `int`: number of instances to query;\n     - `kwargs`: additional strategy-specific arguments.\n   2) Outputs 3 objects in the following order:\n      - `query_idx` of class `array-like`: array with the indices of the queried instances;\n      - `query` of class `Dataset` or `TransformersDataset`: dataset with the queried instances;\n      - `uncertainty_estimates` of class `np.ndarray`: uncertainty estimates of the instances from `X_pool`. The higher the value - the more uncertain the model is in the instance.\n\nThe function with the strategy should be named the same as the file where it is placed (e.g. function `def my_strategy` inside a file `path_to_strategy/my_strategy.py`).\nUse your strategy, setting `al.strategy=PATH_TO_FILE_YOUR_STRATEGY` in the experiment config.\n\nThe example is presented in `examples/benchmark_custom_strategy.ipynb`\n\n### üÜïÔ∏è New pool subsampling strategies addition \nThe addition of a new pool subsampling query strategy is similar to the addition of an AL query strategy. A subsampling strategy should be designed as a function that:\n   1) It must receive 2 positional arguments and additional subsampling strategy kwargs:\n     - `uncertainty_estimates` of class `np.ndarray`: uncertainty estimates of the instances in the order they are stored in the unlabeled data;\n     - `gamma_or_k_confident_to_save` of class `float` or `int`: either a share / number of instances to save (as in random / naive subsampling) or an internal parameter (as in UPS);\n     - `kwargs`: additional subsampling strategy specific arguments.\n   2) It must output the indices of the instances to use (sampled indices) of class `np.ndarray`.\n\nThe function with the strategy should be named the same as the file where it is placed (e.g. function `def my_subsampling_strategy` inside a file `path_to_strategy/my_subsampling_strategy.py`).\nUse your subsampling strategy, setting `al.sampling_type=PATH_TO_FILE_YOUR_SUBSAMPLING_STRATEGY` in the experiment config.\n\nThe example is presented in `examples/benchmark_custom_strategy.ipynb`\n\n### Datasets \nThe research has employed 2 Token Classification datasets (CoNLL-2003, OntoNotes-2012) and 2 Text Classification datasets (AG-News, IMDB). If one wants to launch an experiment on a custom dataset, they need to use one of the following ways to add it:\n\n1) Upload to [Hugging Face datasets](https://huggingface.co/datasets) and set: `config.data.path=datasets, config.data.dataset_name=DATASET_NAME, config.data.text_name=COLUMN_WITH_TEXT_OR_TOKENS_NAME, config.data.label_name=COLUMN_WITH_LABELS_OR_NER_TAGS_NAME`\n2) Upload to **data/DATASET_NAME** folder, create **train.csv** / **train.json** file with the dataset, and set: `config.data.path=PATH_TO_THIS_REPO/data, config.data.dataset_name=DATASET_NAME, config.data.text_name=COLUMN_WITH_TEXT_OR_TOKENS_NAME, config.data.label_name=COLUMN_WITH_LABELS_OR_NER_TAGS_NAME`\n3) \\* Upload to **data/DATASET_NAME** **train.txt**, **dev.txt**, and **test.txt** files and set the arguments as in the previous point.\n4) \\*\\* Upload to **data/DATASET_NAME** with each folder for each class, where each file in the folder contains a text with the label of the folder. For details, please see the **bbc_news** dataset in **./data**. The arguments must be set as in the previous two points.\n\n\\* - only for Token Classification datasets\n\n\\*\\* - only for Text Classification datasets\n\n### Models \nThe current version of the repository supports all models from [HuggingFace Transformers](https://huggingface.co/models), which can be used with `AutoModelForSequenceClassification` / `AutoModelForTokenClassification` classes (for Text / Token classification). For CNN-based / BiLSTM-CRF models, please see the **al_cls_cnn.yaml** / **al_ner_bilstm_crf_flair.yaml** configs from **./configs** folder for details.\n\n### Testing \nBy default, the tests will be run on the `cuda:0` device if CUDA is available or on CPU, otherwise. If one wants to manually specify the device for running the tests:\n\n- On CPU: `CUDA_VISIBLE_DEVICES=\"\" python -m pytest PATH_TO_REPO/tests`;\n- On CUDA: `CUDA_VISIBLE_DEVICES=\"DEVICE_OR_DEVICES_NUMBER\" python -m pytest PATH_TO_REPO/tests`.\n\nWe recommend to use CPU for the robustness of the results. The tests for CUDA are written under **Tesla V100-SXM3 32GB, CUDA V.10.1.243**. \n\n## üëØ Alternatives \n\n[FAMIE](https://github.com/nlp-uoregon/famie), [Small-Text](https://github.com/webis-de/small-text), [modAL](https://github.com/modAL-python/modAL), [ALiPy](https://github.com/NUAA-AL/ALiPy), [libact](https://github.com/ntucllab/libact)\n\n## <a name=\"citation\"></a>üí¨ Citation \n\n```\n\n```\n\n## üìÑ License \n¬© 2022 Autonomous Non-Profit Organization \"Artificial Intelligence Research Institute\" (AIRI). All rights reserved.\n\nLicensed under the [MIT License](LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "NLP active AL deep learning transformer pytorch PLASM UPS",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tmpproject",
    "package_url": "https://pypi.org/project/tmpproject/",
    "platform": null,
    "project_url": "https://pypi.org/project/tmpproject/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tmpproject/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Library for active learning. Supports text classification and sequence tagging tasks.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14960204,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34bccc489133046a6a2135e5c5b41c2a4af28aef23b9238700c8a551f2d95de4",
          "md5": "68c2ab1790b00ec29615414a39e26eb8",
          "sha256": "1203e34de0e3498792f1283fe4316df3cd5476abab75ddd7555417e5d987b14e"
        },
        "downloads": -1,
        "filename": "tmpproject-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68c2ab1790b00ec29615414a39e26eb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 171563,
        "upload_time": "2022-08-26T11:11:45",
        "upload_time_iso_8601": "2022-08-26T11:11:45.136886Z",
        "url": "https://files.pythonhosted.org/packages/34/bc/cc489133046a6a2135e5c5b41c2a4af28aef23b9238700c8a551f2d95de4/tmpproject-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "932499d75e5e5347553d8102c31a2bc453d1c078a996317d8d47759fe0102386",
          "md5": "b92c1d46a8a16461cafcb4374c8aecf8",
          "sha256": "8a0ef2460a20b5d0391fc84e23c854645da6f0079a3abafe85382018671d93dd"
        },
        "downloads": -1,
        "filename": "tmpproject-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b92c1d46a8a16461cafcb4374c8aecf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 171514,
        "upload_time": "2022-08-26T11:35:13",
        "upload_time_iso_8601": "2022-08-26T11:35:13.837991Z",
        "url": "https://files.pythonhosted.org/packages/93/24/99d75e5e5347553d8102c31a2bc453d1c078a996317d8d47759fe0102386/tmpproject-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2be766bb5b6d505f5bb026cc528496c425cc3e3aed12a24c848bfa2d6f59793",
          "md5": "93d1012c9d4047738f1d58f43a4b009d",
          "sha256": "4be1ae3e3cc437000d5844a4423d0d254eaa986f0337d68c4c514a2891dd4a04"
        },
        "downloads": -1,
        "filename": "tmpproject-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "93d1012c9d4047738f1d58f43a4b009d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 171604,
        "upload_time": "2022-09-01T09:06:13",
        "upload_time_iso_8601": "2022-09-01T09:06:13.041661Z",
        "url": "https://files.pythonhosted.org/packages/c2/be/766bb5b6d505f5bb026cc528496c425cc3e3aed12a24c848bfa2d6f59793/tmpproject-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6af03c9ef0d84c2eea18acdd4778c87fae1498776c9cfe8875ddbbf06caec601",
          "md5": "9bf657af6200dbd135ec4fedd6ee7397",
          "sha256": "e5967794b1c9830c044c6cfb16cc3884070473f9cb9f4c7329494e1b9a6d90f8"
        },
        "downloads": -1,
        "filename": "tmpproject-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9bf657af6200dbd135ec4fedd6ee7397",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 171931,
        "upload_time": "2022-09-01T09:10:00",
        "upload_time_iso_8601": "2022-09-01T09:10:00.576891Z",
        "url": "https://files.pythonhosted.org/packages/6a/f0/3c9ef0d84c2eea18acdd4778c87fae1498776c9cfe8875ddbbf06caec601/tmpproject-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6af03c9ef0d84c2eea18acdd4778c87fae1498776c9cfe8875ddbbf06caec601",
        "md5": "9bf657af6200dbd135ec4fedd6ee7397",
        "sha256": "e5967794b1c9830c044c6cfb16cc3884070473f9cb9f4c7329494e1b9a6d90f8"
      },
      "downloads": -1,
      "filename": "tmpproject-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9bf657af6200dbd135ec4fedd6ee7397",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 171931,
      "upload_time": "2022-09-01T09:10:00",
      "upload_time_iso_8601": "2022-09-01T09:10:00.576891Z",
      "url": "https://files.pythonhosted.org/packages/6a/f0/3c9ef0d84c2eea18acdd4778c87fae1498776c9cfe8875ddbbf06caec601/tmpproject-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}