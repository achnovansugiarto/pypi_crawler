{
  "info": {
    "author": "tomaszdrozdz",
    "author_email": "tomasz.drozdz.1@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "sanja\n=====\n\nThis module aims to make bringing Jinja templates to Sanic to be easy.  \n\nIt is entirelly up to You  \nhow You will configure your Jinja template environment.  \nGreat freedom :-)  \n\nIt consist of only two dozens lines of simple code.  \n\n# Installation.  \n\n    pip install sanja  \n\n# First You have to configure Your Sanic app so it holds Jinja template environment instance.  \n\n    app = sanic.Sanic(\"Some app\")  \n\n    sanja_conf_app(  \n        app,  \n        # There go normal parameters like for jijna2.Environment(),  \n        # for example:  \n        auto_reload=True,  \n        loader=jinja2PrefixLoader({  \n            'some_package': jinja_PackageLoader(\"some_package\")}))  \n\nBy default this Jinja template environment is held in:  \n\n    app.config['JINJA_ENV']  \n\nso equaly well You could do:  \n\n    app.config['JINJA_ENV'] = jinja2.Environment(  \n        auto_reload=True,  \n        loader=jinja2PrefixLoader({  \n            'some_package': jinja_PackageLoader(\"some_package\")}))  \n\nBut if You wish to change it,  \nor have more then one Jinja template environment,  \nthen just:  \n\n    sanja_conf_app(  \n        app,  \n        jinja_template_env_name=\"JINJA_ENV_2\",  \n        ...)  \n\nor:  \n\n    app.config['JINJA_ENV_2'] = jinja2.Environment(  \n        ...)  \n\n\n# Then You can just use Jinja rendering and Sanic response.  \n\nTo do so simply decorate your request handler,  \nfor example:  \n\n    @app.route(\"/some/url\")  \n    @sanja.render(\"some_package/some_template.html.jinja\", \"html\")  \n    async def some_view(request):  \n        ...  \n        return {'jijna': \"context\"}  \n\n* some\\_view function has to return jinja \"context\" instance.  \n* In first sanja.render() parameter provide jinja template.  \n  (In this example it has to be under  \n      some\\_package/templates/some_template.html.jinja  \n  because it is how we configured here jinja template environment,  \n  so having any isues please refer to Jinja documentation).  \n* Second sanja.render() parameter coresponds to sanic.response \"kind\",  \n  so if doubts plese refer to Sanic documentation.  \n  Possible values are:  \n  * \"text\"  \n  * \"html\"  \n  * \"json\"  \n  * \"raw\"  \n\nAnd if You want to use other Jinja template environment,  \nthat You have configured before,  \nyou can do so:  \n\n    @app.route(\"/some/url2\")  \n    @sanja.render(\"some_package/some_template.html.jinja\", \"html\", jinja_template_env_name=\"JINJA_ENV_2\")  \n    async def some_view(request):  \n        ...  \n        return {'jijna': \"context\"}  \n\n\n# Yo can also use it for Class-Based Views.  \n\nIn decorators class variable:  \n\n    class YourView(sanic.views.HTTPMethodView):  \n        decorators = [sanja.render(...)]  \n\n        ...  \n\nor per http method:  \n\n    class YourView(sanic.views.HTTPMethodView):  \n\n        @sanja.render(...)  \n        async def get(self, request):  \n            ...  \n\n        ...  \n\n# NOTE for json format.  \n\nIn order to return json format,  \nyour template should be either hand crafted proper json, e.g:  \n\n    {  \n        \"some\": \"thing\"  \n    }  \n\nor e.g whole template can be just one variable turned into json like:  \n\n    {{some_variable|tojson}}  \n\n# SENDING ADDITIONAL CONTEXT TO TEMPLATES.  \n\n## Sending template context to template.  \n\nYou may find usefull to have access to template context from within template.  \n\nTo enable it for all templates (generated by particular jinja env),  \njust provide:  \n\n    update_templates_with_its_context=True  \n\nto conf\\_app() function.  \n\nTo enable it for particular generated template,  \njust provide:  \n\n    update_template_with_its_context=True  \n\nto @render() decorator.  \n\nThen in template You can access all template context with:  \n\n    {{get_template_context()}}  \n\nor ask for value for just some specific key:  \n\n    {{get_template_contex(\"key\")}}  \n\n (None is returned if key is not in template context).  \n\n## Sending any extra context to template.  \n\nTo send e.g.: x=5 to all templates (generated by particular jinja env),  \njust provide:  \n\n    update_jinja_env_globals_with={'x': 5}  \n\nto conf\\_app() function.  \n\nTo send e.g.: x=5 to particular generated template,  \njust provide:  \n\n    update_template_globals_with={'x': 5}  \n\nto @render() decorator.  \n\nThen in template You can access it with:  \n\n    {{x}}\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tomaszdrozdz/sanja",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sanja",
    "package_url": "https://pypi.org/project/sanja/",
    "platform": "",
    "project_url": "https://pypi.org/project/sanja/",
    "project_urls": {
      "Homepage": "https://github.com/tomaszdrozdz/sanja"
    },
    "release_url": "https://pypi.org/project/sanja/1.0.5/",
    "requires_dist": [
      "sanic",
      "jinja2"
    ],
    "requires_python": ">=3.8",
    "summary": "This module aims to make bringing Jinja templates to Sanic to be easy.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8136798,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f88ba258134fb9b69f1628abd8a1f67b508ac5d99457bb5cf4a55156302141d5",
          "md5": "9492f99bab3038444877b540e844cb6d",
          "sha256": "5259120f1481b42be23d7414048e987124712bea4196ad01fb6668898fa9675c"
        },
        "downloads": -1,
        "filename": "sanja-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9492f99bab3038444877b540e844cb6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17612,
        "upload_time": "2020-09-08T13:55:14",
        "upload_time_iso_8601": "2020-09-08T13:55:14.990786Z",
        "url": "https://files.pythonhosted.org/packages/f8/8b/a258134fb9b69f1628abd8a1f67b508ac5d99457bb5cf4a55156302141d5/sanja-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0111467ef2e694e44db8e56981dd773ebd1ea1e2b06c3dfb6846020d5de254f5",
          "md5": "4d3d2e8301ea5cd111ae65ae844ac239",
          "sha256": "41cd5a38edaa43a74345fd95ffbe8242a5795a17fd680b0e09bba52e808347b4"
        },
        "downloads": -1,
        "filename": "sanja-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4d3d2e8301ea5cd111ae65ae844ac239",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16543,
        "upload_time": "2020-09-08T13:55:16",
        "upload_time_iso_8601": "2020-09-08T13:55:16.197048Z",
        "url": "https://files.pythonhosted.org/packages/01/11/467ef2e694e44db8e56981dd773ebd1ea1e2b06c3dfb6846020d5de254f5/sanja-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f88ba258134fb9b69f1628abd8a1f67b508ac5d99457bb5cf4a55156302141d5",
        "md5": "9492f99bab3038444877b540e844cb6d",
        "sha256": "5259120f1481b42be23d7414048e987124712bea4196ad01fb6668898fa9675c"
      },
      "downloads": -1,
      "filename": "sanja-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9492f99bab3038444877b540e844cb6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17612,
      "upload_time": "2020-09-08T13:55:14",
      "upload_time_iso_8601": "2020-09-08T13:55:14.990786Z",
      "url": "https://files.pythonhosted.org/packages/f8/8b/a258134fb9b69f1628abd8a1f67b508ac5d99457bb5cf4a55156302141d5/sanja-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0111467ef2e694e44db8e56981dd773ebd1ea1e2b06c3dfb6846020d5de254f5",
        "md5": "4d3d2e8301ea5cd111ae65ae844ac239",
        "sha256": "41cd5a38edaa43a74345fd95ffbe8242a5795a17fd680b0e09bba52e808347b4"
      },
      "downloads": -1,
      "filename": "sanja-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4d3d2e8301ea5cd111ae65ae844ac239",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 16543,
      "upload_time": "2020-09-08T13:55:16",
      "upload_time_iso_8601": "2020-09-08T13:55:16.197048Z",
      "url": "https://files.pythonhosted.org/packages/01/11/467ef2e694e44db8e56981dd773ebd1ea1e2b06c3dfb6846020d5de254f5/sanja-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}