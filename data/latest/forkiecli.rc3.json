{
  "info": {
    "author": "Jakab Zeller",
    "author_email": "jakabzeller0@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# forkie\n\nGroup 9 Project for CS1813 Assignment 1\n\nHosted at: <https://file-rep0.herokuapp.com>\n\n---\n\n## Database Examples\n\n### Querying a database table\n\nTo query a db table for an API endpoint simply do the following:\n\n- I'm gonna use the FileVersionTable as an example, all the tables will be imported at the top of the app.py\n\n```python\n  FileVersionTable.query.filter_by(fileid=ID_TO_FETCH_FILES_OF)\n```\n\n- This will return all the files with the fileid that you pass it (replacing ID_TO_FETCH_FILES_OF)\n- You can add `.first()` to just get the first result from the query if you only want a specific result\n\n### Inserting into the database\n\n- To insert into the database, you need to create an instance of the table you're inserting to and pass it the data to add - like so:\n- This time I'm using the MetadataTable\n\n```python\n  newMetadataEntry = MetadataTable({\n    \"fileversionid\": THE_FILE_TO_APPLY_THE_METADATA_TO,\n    \"title\": THE_METADATA_TITLE,          # e.g: 'author'\n    \"content\": THE_METADATA_CONTENT       # e.g: the userID of the author\n  })\n\n  try:\n    db.session.add(newMetadataEntry)\n    db.session.commit()\n  except Exception as e:\n    print(e)\n```\n\n- After the insert you could return that it was successful or something like that\n- Be sure to read the fields required for a table before you insert into it\n\n#### B2 Backblaze\n\n- Using B2 Backblaze for file storage (see helpful links)\n- Using the `b2sdk` python library as a wrapper for the b2 api calls\n- To use the library you need to first authenticate your account using:\n\n```python\n  from b2sdk.v1 import InMemoryAccountInfo, B2Api\n\n  info = InMemoryAccountInfo()\n  b2_api = B2Api(info)\n  application_key_id = '4a5b6c7d8e9f'\n  application_key = '001b8e23c26ff6efb941e237deb182b9599a84bef7'\n  b2_api.authorize_account(\"production\", application_key_id, application_key)\n```\n\n- This creates a B2Api object which you can use for api calls such as\n\n  1. Bucket stuff\n     - Viewing all buckets (doesn't work if the key only applies to one bucket)\n\n        ```python\n          b2_api.list_buckets()\n        ```\n\n     - Creating buckets\n\n        ```python\n          bucket_name = 'example-mybucket-b2-1'  # must be unique in B2 (across all accounts!)\n          bucket_type = 'allPublic'  # or 'allPrivate'\n          b2_api.create_bucket(bucket_name, bucket_type)\n        ```\n\n     - Deleting\n\n        ```python\n          bucket_name = 'example-mybucket-b2-to-delete'\n          bucket = b2_api.get_bucket_by_name(bucket_name)\n          b2_api.delete_bucket(bucket)\n        ```\n\n     - Update info\n\n        ```python\n          new_bucket_type = 'allPrivate'\n          bucket_name = 'example-mybucket-b2'\n\n          bucket = b2_api.get_bucket_by_name(bucket_name)\n          bucket.update(bucket_type=new_bucket_type)\n          {'accountId': '451862be08d0',\n          'bucketId': '5485a1682662eb3e60980d10',\n          'bucketInfo': {},\n          'bucketName': 'example-mybucket-b2',\n          'bucketType': 'allPrivate',\n          'corsRules': [],\n          'lifecycleRules': [],\n          'revision': 3}\n        ```\n\n  2. Downloading files (can also download by file name)\n  \n    ```python\n      local_file_path = '/home/user1/b2_example/new2.pdf'\n      file_id = '4_z5485a1682662eb3e60980d10_f1195145f42952533_d20190403_m130258_c002_v0001111_t0002'\n      download_dest = DownloadDestLocalFile(local_file_path)\n      progress_listener = DoNothingProgressListener()\n\n      b2_api.download_file_by_id(file_id, download_dest, progress_listener)\n      {'fileId': '4_z5485a1682662eb3e60980d10_f1195145f42952533_d20190403_m130258_c002_v0001111_t0002',\n      'fileName': 'som2.pdf',\n      'contentType': 'application/pdf',\n      'contentLength': 1870579,\n      'contentSha1': 'd821849a70922e87c2b0786c0be7266b89d87df0',\n      'fileInfo': {'src_last_modified_millis': '1550988084299'}}\n    ```\n\n  3. Uploading files (uses large file API automatically)\n\n    ```python\n\n      local_file_path = '/home/user1/b2_example/new.pdf'\n      b2_file_name = 'dummy_new.pdf'\n      file_info = {'how': 'good-file'}\n\n      bucket = b2_api.get_bucket_by_name(bucket_name)\n      bucket.upload_local_file(\n        local_file=local_file_path,\n        file_name=b2_file_name,\n        file_infos=file_info,\n      )\n    ```\n\n- Application keys can be generated in the backblaze dashboard for specific buckets (for our purposes we should only need one)\n\n---\n\n### How to connect Heroku to your local Git repo\n\n1. Clone the repo from here\n2. Enter it in the terminal\n3. Enter... `heroku git:remote -a file-rep0`\n4. Then when you want to upload to the server enter... `git push heroku master`\n\n### How to use the forkie CLI\n\nThe forkie CLI was made to **accompany** the forkie website not replace it\n\n---\n\n#### Main flow\n\n- `forkie login <repo>` this will \"log you in\" to the repository with the `<repo>` URL (this is the full URL) and create a `.forkie` directory inside the current directory as well as a directory for the repo including a `.bin` (which contains the users cookie) and a `b2.json` which contains the b2 backblaze keys used to access the forkie bucket\n- The `login` subcommand will ask the user if they want to create an account if no account is found on the web server\n- You can then use any of the commands listed below\n\n#### The subcommands\n\n**The subcommands require you to be in the same directory as the `.forkie` directory**. You can view all usages by using the `--help` option...\n\n- *make*: start tracking new file in repository\n  - Usage:\n    - `forkie make [-v | --verbose] [(-m <message>)] (<file>)...`\n    - Will search through all the available repository cookies inside the `.forkie` directory and prompt the user as to which they want to add to and then prompt which group to add to\n    - If an identical file is found then forkie will prompt the user to either start tracking the new file or to use the `update` subcommand instead\n    - The ellipsis denotes that more than one file can be specified (with optional name)\n    - If no `<message>` argument is given then the default editor will be opened\n  - Options:\n    - -m --message: The message/description of the file.\n    - -v --verbose: Display info about the inner workings\n- *update*: create revision to file\n  - Usage:\n    - `forkie update [-v | --verbose] [(-m <message>)] (<file>)...`\n    - The `update` subcommand works in a similar way to the `make` subcommand\n    - Will first find every file that matches the filename of `<file>` in every repository in `.forkie` directory\n    - The user then gets to pick which repository to update. If one of the files isn't contained inside the chosen repository then the user can either continue with the ones that or abort\n    - If the user uploads a verion that matches the current version inside the chosen repository then uploading will be aborted and the user is prompted\n  - Options:\n    - -m --message: The message/description of the file.\n    - -v --verbose: Display info about the inner workings\n- *find*: find a file/list files\n  - Usage:\n    - `forkie find (-a | -n <name> [(-p <group>)]) [-vd] [(-c <comment>) [-f | --force]]`\n    - The `-a` option returns all files in every repository in `.forkie`\n    - If the `-n` is specified then it will search all repos by filename. The optional `-p <group>` is used to also search by group name\n    - You can download any of the returned files by adding the `-d` option\n    - Bulk commenting can be done by adding the `-c <comment>` option and argument. Force `-f` can be used not ask for permissions\n  - Options:\n    - -a: All files\n    - -n: Search by name\n    - -p: Search by group name\n    - -v --verbose: Verbose\n    - -c --comment: Bulk comment\n    - -f --force: Force/Don't ask for permission first\n- *group*: command to handle everything to do with groups\n  - Usage:\n    - `forkie group (-V [--peeps] [<email>...] | (--add | --rm | --change) (-p <group>) [<email>]) [-vf]`\n    - Four main options:\n      - View: view all groups, or just peeps by using `--peeps`, and filter by email (only can view the groups that the user is a part of)\n      - Add: if only `-p` is specified then it will create a group with name `<group>`. If `-p` and `<email>` is specified then it will add the user of the given email and add them to the group of `<group>` (only if you are the groupleader).\n      - Remove: remove group by just specifying '-p' or a remove a user from the `<group>` by also specifying the user's `<email>` (only if you are the group leader)\n      - Change: rename the group by just specifying `-p` or move a user to another group by also specifying the user's `<email>` (only if you are the group leader of both groups)\n    - All of these, except view, all require permission (y/n) to complete the chosen action\n  - Options:\n    - --peeps: View people\n    - --add: Add person/people to a group\n    - --rm: Remove person/people from a group\n    - --change: Move person/people to another group\n- *report*: for generating and viewing reports about groups/users\n  - Usage:\n    - `forkie report (-p <group> | <email>) [(-o <file>)] [-v | --verbose]`\n    - Generate a PDF report containing information on:\n      - On a group using `-p`\n      - On an individual user by specifying the user's `<email>`\n    - Specify the local output path of the PDF by using `-o`\n- *login*: \"logs into\" the web server to authenticate the users identity. Then will create a bin file containing the cookie that will authenticate the user in the web server\n  - Usage:\n    - `forkie login (<repo>) [-v | --verbose]`\n    - Used to login to the repo with the URL of `<repo>`\n    - Will suggest the user to signup if their credentials aren't found on the repository\n\n#### Helpful Links\n\nHow to connect to Postgres with Python:\n<https://dev.to/paultopia/the-easiest-possible-way-to-throw-a-webapp-online-flask--heroku--postgres-185o>\n\nFlask Docs\n<http://flask.palletsprojects.com/en/1.1.x/>\n\nCreating APIs with Flask\n<https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask>\n\nB2 Backblaze service\n<https://www.backblaze.com/>\n\nb2sdk docs\n<https://b2-sdk-python.readthedocs.io/en/master/index.html>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RHUL-CS-Projects/CS1813_2020_09",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "forkieCLI",
    "package_url": "https://pypi.org/project/forkieCLI/",
    "platform": "",
    "project_url": "https://pypi.org/project/forkieCLI/",
    "project_urls": {
      "Homepage": "https://github.com/RHUL-CS-Projects/CS1813_2020_09"
    },
    "release_url": "https://pypi.org/project/forkieCLI/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "The CLI tool for the forkie file versioning system",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6744054,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "855fe8b5160bc56f7c7f7f9beb7368a68ce30740041cb516dc9928eebd44601a",
          "md5": "8e57c507b74fade5e6f1dcf9ef5383a2",
          "sha256": "3bec8d3aad1156e300ce23542f4562a3ad73333a1d3de4d66703781795c080ff"
        },
        "downloads": -1,
        "filename": "forkieCLI-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8e57c507b74fade5e6f1dcf9ef5383a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 32426,
        "upload_time": "2020-02-29T02:24:34",
        "upload_time_iso_8601": "2020-02-29T02:24:34.090018Z",
        "url": "https://files.pythonhosted.org/packages/85/5f/e8b5160bc56f7c7f7f9beb7368a68ce30740041cb516dc9928eebd44601a/forkieCLI-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6255e68f223f5f90f4edd8679a73f06c471ab47297dc90e82ea90d1a7dd46674",
          "md5": "6f7e7bbff8701485e01172607a1019ed",
          "sha256": "5748fd122686abffb6791808ce59d6c07b9eea440ea42cea273efa3bab9c49f4"
        },
        "downloads": -1,
        "filename": "forkieCLI-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f7e7bbff8701485e01172607a1019ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 37760,
        "upload_time": "2020-03-02T22:08:25",
        "upload_time_iso_8601": "2020-03-02T22:08:25.002074Z",
        "url": "https://files.pythonhosted.org/packages/62/55/e68f223f5f90f4edd8679a73f06c471ab47297dc90e82ea90d1a7dd46674/forkieCLI-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5c142940c7be65c0ec80e9629085ff678e7fb4c5338b0890214a97175b32b01",
          "md5": "41df9214ff712714f15993063d871d50",
          "sha256": "b7795a707eac1caa25d480ffe09bd6c06c6551134860bbb9ec4116343df42734"
        },
        "downloads": -1,
        "filename": "forkieCLI-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "41df9214ff712714f15993063d871d50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 37767,
        "upload_time": "2020-03-03T23:12:05",
        "upload_time_iso_8601": "2020-03-03T23:12:05.738512Z",
        "url": "https://files.pythonhosted.org/packages/b5/c1/42940c7be65c0ec80e9629085ff678e7fb4c5338b0890214a97175b32b01/forkieCLI-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5c142940c7be65c0ec80e9629085ff678e7fb4c5338b0890214a97175b32b01",
        "md5": "41df9214ff712714f15993063d871d50",
        "sha256": "b7795a707eac1caa25d480ffe09bd6c06c6551134860bbb9ec4116343df42734"
      },
      "downloads": -1,
      "filename": "forkieCLI-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "41df9214ff712714f15993063d871d50",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 37767,
      "upload_time": "2020-03-03T23:12:05",
      "upload_time_iso_8601": "2020-03-03T23:12:05.738512Z",
      "url": "https://files.pythonhosted.org/packages/b5/c1/42940c7be65c0ec80e9629085ff678e7fb4c5338b0890214a97175b32b01/forkieCLI-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}