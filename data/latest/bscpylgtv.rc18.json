{
  "info": {
    "author": "chros",
    "author_email": "chros73@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# bscpylgtv\nLibrary to control webOS based LG TV devices. Enhanced and faster version of\n [aiopylgtv](https://github.com/bendavid/aiopylgtv), it can be installed without calibration functionality,\n optimized for command line usage (it looks for the same `.aiopylgtv.sqlite` key config file).\n\n## Requirements\n- Python >= 3.8\n\n### Install from package\n```bash\n# Install lite package without calibration functionality\npip install bscpylgtv\n# Instal full package with calibration functionality (requires numpy package)\npip install bscpylgtv[with_calibration]\n```\n\n### Install from Source\nRun the following command inside this folder:\n```bash\n# Install lite package without calibration functionality\npip install --upgrade .\n# Instal full package with calibration functionality (requires numpy package)\npip install --upgrade .[with_calibration]\n```\n\n### Windows binaries\nPortable Windows binaries can be found under [releases](https://github.com/chros73/bscpylgtv/releases).\n\n## Examples\nAvailable settings can be found in [docs](https://github.com/chros73/bscpylgtv/tree/master/docs) directory, also available [buttons](https://github.com/chros73/bscpylgtv/tree/master/bscpylgtv/buttons.py).\nThey can even be more useful when they are paired with other frontend utilities that can run batch files (e.g. [madvr-js-remote](https://github.com/chros73/madvr-js-remote) or [HTWebRemote\n](https://github.com/nicko88/HTWebRemote) on Windows).\n```bash\n# Get list of apps (including hidden ones as well)\nbscpylgtvcommand 192.168.1.18 get_apps_all true\n# Push info button\nbscpylgtvcommand 192.168.1.18 button INFO\n# Switch to HDMI2 input\nbscpylgtvcommand 192.168.1.18 set_input HDMI_2\n# Get values of backlight and contrast of the current picture preset (using list)\nbscpylgtvcommand 192.168.1.18 get_picture_settings \"[\\\"backlight\\\", \\\"contrast\\\"]\" true\n# Swtich to SDR ISF Expert Dark picture preset\nbscpylgtvcommand 192.168.1.18 set_current_picture_mode expert2\n# Set values of backlight and contrast of the current picture preset (using JSON)\nbscpylgtvcommand 192.168.1.18 set_current_picture_settings \"{\\\"backlight\\\": 0, \\\"contrast\\\": 85}\"\n# Turn hdrDynamicToneMapping on in the current HDR10 picture preset (using JSON)\nbscpylgtvcommand 192.168.1.18 set_current_picture_settings \"{\\\"hdrDynamicToneMapping\\\": \\\"on\\\"}\"\n# Set colorGamut to \"auto\" in the current picture preset (using JSON)\nbscpylgtvcommand 192.168.1.18 set_current_picture_settings \"{\\\"colorGamut\\\": \\\"auto\\\"}\"\n# Set mpegNoiseReduction off in the current picture preset (using JSON)\nbscpylgtvcommand 192.168.1.18 set_current_picture_settings \"{\\\"mpegNoiseReduction\\\": \\\"off\\\"}\"\n# Turn AI Picture Pro on in the current picture preset (using JSON)\nbscpylgtvcommand 192.168.1.18 set_current_picture_settings \"{\\\"ai_Picture\\\": \\\"on\\\"}\" aiPicture\n# Setting EOTF in HDMI Signal Override menu, values: auto, sdrGamma, hdrGamma, st2084, hlg (using JSON)\nbscpylgtvcommand 192.168.1.18 set_other_settings \"{\\\"eotf\\\": \\\"hlg\\\"}\"\n# Turn PC Mode on/off for HDMI2\nbscpylgtvcommand 192.168.1.18 set_device_info HDMI_2 pc PC\nbscpylgtvcommand 192.168.1.18 set_device_info HDMI_2 hometheater \"Home Theatre\"\n# Launch and close screensaver\nbscpylgtvcommand 192.168.1.18 launch_app com.webos.app.screensaver\nbscpylgtvcommand 192.168.1.18 close_app com.webos.app.screensaver\n# Turn screen off/on: turn_screen_off [webos_version] (e.g. for older WebOS: turn_screen_off 4)\nbscpylgtvcommand 192.168.1.18 turn_screen_off\nbscpylgtvcommand 192.168.1.18 turn_screen_on\n# Display current picture mode settings\nbscpylgtvcommand 192.168.1.18 launch_app_with_params com.palm.app.settings \"{\\\"target\\\": \\\"PictureMode\\\"}\"\n# Launch installation app hidden menu (Hotel Mode, Password change, USB Cloning, Set ID setup, IP Control)\nbscpylgtvcommand 192.168.1.18 launch_app com.webos.app.installation\n# Display 3x MUTE button hidden menu (AVReset, Customer Support, etc)\nbscpylgtvcommand 192.168.1.18 launch_app_with_params com.webos.app.tvhotkey \"{\\\"activateType\\\": \\\"mute-hidden-action\\\"}\"\n# Display 7x GREEN button hidden Freesync info\nbscpylgtvcommand 192.168.1.18 launch_app_with_params com.webos.app.tvhotkey \"{\\\"activateType\\\": \\\"freesync-info\\\"}\"\n# NOTE: this does not work anymore on some models since end of 2021. Launch hidden software updater on older firmwares\nbscpylgtvcommand 192.168.1.18 launch_app com.webos.app.softwareupdate\n# NOTE: this does not work anymore on some models since end of 2021. Launch hidden software updater on newer firmwares, useful to downgrade (using JSON)\nbscpylgtvcommand 192.168.1.18 launch_app_with_params com.webos.app.softwareupdate \"{\\\"mode\\\": \\\"user\\\", \\\"flagUpdate\\\": true}\"\n# Launch In-Start Service Menu (code: 0413) (using JSON)\nbscpylgtvcommand 192.168.1.18 launch_app_with_params com.webos.app.factorywin \"{\\\"id\\\":\\\"executeFactory\\\", \\\"irKey\\\":\\\"inStart\\\"}\"\n# Launch Ez-Adjust Service Menu (code: 0413) (using JSON)\nbscpylgtvcommand 192.168.1.18 launch_app_with_params com.webos.app.factorywin \"{\\\"id\\\":\\\"executeFactory\\\", \\\"irKey\\\":\\\"ezAdjust\\\"}\"\n# Get config values of \"tv.model\" category (using list)\nbscpylgtvcommand 192.168.1.18 get_configs \"[\\\"tv.model.*\\\"]\" true\n# Activate \"OLED Motion Pro\" on C9 (using JSON)\nbscpylgtvcommand 192.168.1.18 set_configs \"{\\\"tv.model.motionProMode\\\": \\\"OLED Motion Pro\\\"}\"\n# Display Total Power On Time under TV Information on EU models where it's hidden (using JSON)\nbscpylgtvcommand 192.168.1.18 set_configs \"{\\\"tv.conti.supportUsedTime\\\": true}\"\n# Take screenshot\nbscpylgtvcommand 192.168.1.18 take_screenshot\n# Soft reboot the TV in case it is malfunctioning: reboot_soft [webos_version] (e.g. for older WebOS: reboot_soft 4)\nbscpylgtvcommand 192.168.1.18 reboot_soft\n# Turn the TV off (standby)\nbscpylgtvcommand 192.168.1.18 power_off\n```\n\n### Optional command line switches\n\n```bash\n# -s \"[\\\"<state1>\\\", \"\\<state2>\\\"]\" : set states (\"software_info\" static state is required by some of the calibration commands)\n#    values: [\"system_info\", \"software_info\", \"power\", \"current_app\", \"muted\", \"volume\", \"apps\", \"inputs\", \"sound_output\", \"picture_settings\"]\nbscpylgtvcommand 192.168.1.18 upload_3d_lut_bt2020_from_file expert1 \"test3d-2.cube\" -s\nbscpylgtvcommand -s \"[\\\"software_info\\\"]\" 192.168.1.18 upload_3d_lut_bt2020_from_file expert1 \"test3d-2.cube\"\n# -c \"{\\\"lut3d\\\": \\\"33pt\\\", \\\"dovi\\\": \\\"2019\\\"}\" : set calibration_info for unsupported chip types (be careful!)\n#    values for \"lut3d\": \"17pt\", \"33pt\"\n#    values for \"dovi\": \"2018\", \"2019\"\nbscpylgtvcommand -c \"{\\\"lut3d\\\": \\\"33pt\\\", \\\"dovi\\\": \\\"2019\\\"}\" 192.168.1.18 upload_3d_lut_bt2020_from_file expert1 \"test3d-2.cube\"\n# -o : getting hello info (e.g. to get unique deviceUUID)\nbscpylgtvcommand -o 192.168.1.18 get_hello_info true\n# -w : connecting without SSL\nbscpylgtvcommand -w 192.168.1.18 button INFO\n# -k <client_key> : specifying a client key\nbscpylgtvcommand -k ef6858b2133d68854612831e3df8e495 192.168.1.18 button INFO\n# -p <path_to_key_file> : specifying path to key file\nbscpylgtvcommand -p \"D:\\config\\.aiopylgtv.sqlite\" 192.168.1.18 button INFO\n# -l : get list of all saved client keys per ip (otionally from a specified key file)\nbscpylgtvcommand -l\nbscpylgtvcommand -l -p \"D:\\config\\.aiopylgtv.sqlite\"\n# -v : display version number\nbscpylgtvcommand -v\n```\n\n## Basic Scripting Example\n\n```python\nimport asyncio\nfrom bscpylgtv import WebOsClient\n\nasync def runloop():\n    client = await WebOsClient.create('192.168.1.18', ping_interval=None, states=[])\n    await client.connect()\n    apps = await client.get_apps_all()\n    for app in apps:\n        print(app)\n\n    await client.disconnect()\n\nasyncio.run(runloop())\n```\n\n### Subscribed State Updates Example\n\n```python\nimport asyncio\nfrom bscpylgtv import WebOsClient\n\nasync def on_state_change(client):\n    print(\"State changed:\")\n    print(client.apps)\n    print(client.inputs)\n    print(client.power_state)\n    print(client.current_appId)\n    print(client.channels)\n    print(client.current_channel)\n    print(client.channel_info)\n    print(client.muted)\n    print(client.volume)\n    print(client.sound_output)\n    print(client.picture_settings)\n    print(client.system_info)\n    print(client.software_info)\n    print(client.hello_info)\n\nasync def runloop():\n    client = await WebOsClient.create('192.168.1.18', get_hello_info=True)\n    await client.register_state_update_callback(on_state_change)\n    await client.connect()\n\n    ret = await client.volume_up()\n    print(ret)\n    await asyncio.sleep(30)\n\n    await client.disconnect()\n\nasyncio.run(runloop())\n```\n\n### Using external storage class via scripting\n\nReplacing built-in `StorageSqliteDict` key storage with custom `StorageMy` class that implements [methods](https://github.com/chros73/bscpylgtv/tree/master/bscpylgtv/storage_proto.py) of `StorageProto` class:\n```python\nimport asyncio\nfrom bscpylgtv import WebOsClient\nfrom storage_my import StorageMy\n\nasync def runloop():\n    storage = await StorageMy.create(\"file_path\")\n    client = await WebOsClient.create('192.168.1.18', ping_interval=None, states=[], storage=storage)\n    await client.connect()\n    info = await client.get_software_info()\n    print(info)\n\n    await client.disconnect()\n\nasyncio.run(runloop())\n```\n\nMore useful examples can be found in [docs/scripts](https://github.com/chros73/bscpylgtv/tree/master/docs/scripts) directory.\n\n## Calibration functionality (in full version)\n**WARNING:** *Messing with the calibration data COULD brick your TV in some circumstances, requiring a mainboard replacement. All of the currently implemented functions SHOULD be safe (although they have only been extensively tested for the 2018 Alpha 7/9, 2019/2021/2022 Alpha 9 models), but no guarantees.*\n\nOn LG WebOS TVs with Alpha 7 and Alpha 9 chipsets, upload to internal 1D/3D LUTs, resetting factory calibration data uploaded via calibration API, uploading custom tone mapping parameters (>=2019 models), using internal test pattern generator (iTPG, >=2019 models), writing Dolby Vision config file and other calibration commands are supported.\n\n### Calibration commands\n\nHere is a simplified version of the [image processing pipeline](https://displaycalibrations.com/images/LG_OLED_Video_Signal_Chain_Diagram_Picture.png) (there may be other not fully known/understood changes).\n\nCalibration commands can only be run while in calibration mode (controlled by `start_calibration` and `end_calibration`).\nSome of the calibration commands aren't used (question mark behind the name of the method) depending on the model/firmware.\nMost of the commands can be run in any mode, except for `set_tonemap_params` that is only for HDR10+HLG and `set_dolby_vision_config_data` that is only for Dolby Vision.\nOnly 3D LUT and Dolby Vision config related commands require `-s` (states) command line switch (or the use of `-c` (calibration_info) instead for unsuppported chip types if other calibration commands work fine, but be very careful!).\nIn general, `set_1d_en_*` (de-gamma, re-gamma) and `set_3by3_gamut_data_*` (3x3 color matrices) commands should only be used with unity/custom 3D LUT.\n\nThe following commands are supported via calibration API:\n```\nstart_calibration, end_calibration,\nset_oled_light, set_contrast, set_brightness, set_color\nupload_1d_lut, upload_1d_lut_from_file, set_1d_lut_en (?),\nupload_3d_lut_bt709, upload_3d_lut_bt709_from_file, upload_3d_lut_bt2020, upload_3d_lut_bt2020_from_file, \nset_1d_en_2_2, set_1d_en_0_45,\nset_3by3_gamut_data_bt709, set_3by3_gamut_data_bt2020, set_3by3_gamut_data_hdr (only used in 2019 models), set_3by3_gamut_data_from_file, set_3by3_gamut_en (?),\nset_tonemap_params (for HDR10 picture modes),\nset_dolby_vision_config_data (not recommended on >=2020 models!)\n```\n\nCombined commands for setting bypass modes and resetting factory data:\n```\nset_bypass_modes_sdr, set_bypass_modes_hdr10, set_bypass_modes_dovi,\nreset_factory_data_sdr, reset_factory_data_hdr10, reset_factory_data_dovi\n```\n\nCalibration data is specific to each picture mode, and picture modes are independent for SDR, HDR10+HLG, and Dolby Vision.\nPicture modes from each of the three groups are only accessible when the TV is in the appropriate mode. Ie to upload calibration data for HDR10 picture modes, one has to send the TV an HDR10 signal or play an HDR10 file, and similarly for Dolby Vision.\n\nKnown supported `picture_mode` strings are:\n```\nSDR: cinema, expert1, expert2, game, technicolorExpert, filmMaker\nHDR10(+HLG): hdr_cinema, hdr_game, hdr_technicolorExpert, hdr_filmMaker\nDV: dolby_cinema_bright, dolby_cinema_dark, dolby_game\n```\n\nFor SDR and HDR10 modes there are two 3D LUTs which will be automatically selected depending on the colorspace flags of the signal or content. In principle almost all SDR content should be BT709 and HDR10 content should be BT2020 but there could be nonstandard cases where this is not true.\nFor Dolby Vision the BT709 3D LUT seems to be active and the only one used.\n\nThe supported input formats for LUTs are IRIDAS `.cube` format for both 1D and 3D LUTs, and ArgyllCMS `.cal` files for 1D LUTs.\nModels with Alpha 9 use 33 point 3D LUTs, while those with Alpha 7 use 17 points.\n\nWhen uploading any 1D LUT data, service menu white balance settings are ignored, and gamma, colorspace, and white balance settings in the user menu are greyed out and inaccessible. From 2019 models white balance 2pt values can be set.\nWhile in calibration mode for HDR10 tone mapping is bypassed.\n\n#### Calibration examples\n\nModifying expert1 SDR preset (ISF Expert Bright Room):\n```bash\n# Switch to HDMI2 input\nbscpylgtvcommand 192.168.1.18 set_input HDMI_2\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration expert1\n# Set oled light to 39, contrast to 85, brightness and color to 50\nbscpylgtvcommand 192.168.1.18 set_oled_light 39\nbscpylgtvcommand 192.168.1.18 set_contrast\nbscpylgtvcommand 192.168.1.18 set_brightness\nbscpylgtvcommand 192.168.1.18 set_color\n# Set SDR bypass mode (also known as DDC reset) including uploading unity 1DLUT\nbscpylgtvcommand 192.168.1.18 set_bypass_modes_sdr true -s\n# Upload custom 1DLUT from file\nbscpylgtvcommand 192.168.1.18 upload_1d_lut_from_file \"test.cal\"\n# Upload custom 3DLUT from file into BT709 slot\nbscpylgtvcommand 192.168.1.18 upload_3d_lut_bt709_from_file \"test3d-1.cube\" -s\n# Upload custom 3DLUT from file into bt2020 slot\nbscpylgtvcommand 192.168.1.18 upload_3d_lut_bt2020_from_file \"test3d-2.cube\" -s\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\nSame calibration session via scripting:\n```python\nimport asyncio\nfrom bscpylgtv import WebOsClient\n\nasync def runloop():\n    client = await WebOsClient.create('192.168.1.18', states=[\"software_info\"])\n    await client.connect()\n\n    await client.set_input(\"HDMI_2\")\n    await client.start_calibration(picture_mode=\"expert1\")\n    await client.set_oled_light(value=39)\n    await client.set_contrast()\n    await client.set_brightness()\n    await client.set_color()\n    await client.set_bypass_modes_sdr(unity_1d_lut=True)\n    await client.upload_1d_lut_from_file(filename=\"test.cal\")\n    await client.upload_3d_lut_bt709_from_file(filename=\"test3d-1.cube\")\n    await client.upload_3d_lut_bt2020_from_file(filename=\"test3d-2.cube\")\n    await client.end_calibration()\n\n    await client.disconnect()\n\nasyncio.run(runloop())\n```\n\n#### Uploading bypass values (also known as DDC reset)\n\nThe following commands are supported via calibration API beside of the the combined `set_bypass_modes_*` commands:\n```\nupload_1d_lut,\nupload_3d_lut_bt709, upload_3d_lut_bt2020,\nset_1d_en_2_2, set_1d_en_0_45, set_1d_lut_en (?),\nset_3by3_gamut_data_bt709, set_3by3_gamut_data_bt2020, set_3by3_gamut_data_hdr (only used in 2019 models), set_3by3_gamut_en (?),\n```\n\nExample usage (all the supported commands have the same syntax):\n```bash\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration hdr_game\n# Upload unity 1DLUT (no extra parameter is required)\nbscpylgtvcommand 192.168.1.18 upload_1d_lut\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\n#### Resetting factory calibration data uploaded via calibration API\n\nIt's possible to reset individual factory calibration data (previously a picture preset reset or factory reset was required for this)\nor reset all/most of them with the combined `reset_factory_data_*` commands.\nThe following commands are supported via calibration API:\n```\nupload_1d_lut,\nupload_3d_lut_bt709, upload_3d_lut_bt2020,\nset_1d_en_2_2, set_1d_en_0_45, set_1d_lut_en (?),\nset_3by3_gamut_data_bt709, set_3by3_gamut_data_bt2020, set_3by3_gamut_data_hdr (only used in 2019 models), set_3by3_gamut_en (?),\nset_tonemap_params (for HDR10 picture modes),\nset_dolby_vision_config_data (not recommended on >=2020 models!)\n```\n\nExample usage (all the supported commands have the same syntax except for those that require a `picture_mode`):\n```bash\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration hdr_game\n# Restore factory 1DLUT after custom 1DLUT was uploaded (by specifying empty list)\nbscpylgtvcommand 192.168.1.18 upload_1d_lut []\n# Restore factory tonemapping parameters after custom ones were uploaded (by specifying empty list)\nbscpylgtvcommand 192.168.1.18 set_tonemap_params hdr_game []\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\n#### Get calibration commands\n\n- NOTE: they can be partially or completely broken (depending on firmware version, picture preset, etc)\n- they can be used inside or outside of calibration mode as well\n- they return the data of the currently active picture mode\n- in case of factory LUTs (sometimes even with custom LUTs as well), they return the post-processed LUTs with all customizations factored in (including customizations via the user settings menu or service menu)\n\nThe following commands are supported via calibration API:\n```\nget_1d_en_2_2, get_1d_en_0_45,\nget_3by3_gamut_data, get_3by3_gamut_data_hdr,\nget_1d_lut, get_3d_lut\n```\n\nExample usage (all the supported commands have the same syntax):\n```bash\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration hdr_game\n# Get 3x3 color matrix (no extra parameter is required)\nbscpylgtvcommand 192.168.1.18 get_3by3_gamut_data\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\n##### Backup and restore 1D/3D LUTs and 3x3 color matrices\n\nIt's possible to backup and resture 1D/3D LUTs and 3x3 color matrices (if the getter interface of the calibration API works fine).\n\nExample usage for backuping:\n```bash\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration hdr_cinema\n# Backup 3x3 color matrix\nbscpylgtvcommand 192.168.1.18 get_3by3_gamut_data \"hdr_cinema_3x3.matrix\"\n# Backup 1D LUT\nbscpylgtvcommand 192.168.1.18 get_1d_lut \"hdr_cinema.1dlut\"\n# Backup 3D LUT\nbscpylgtvcommand 192.168.1.18 get_3d_lut \"hdr_cinema.3dlut\"\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\nExample usage for restoring:\n```bash\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration hdr_cinema\n# Restore 3x3 color matrix\nbscpylgtvcommand 192.168.1.18 set_3by3_gamut_data_from_file \"bt2020\" \"hdr_cinema_3x3.matrix\"\n# Restore 1D LUT\nbscpylgtvcommand 192.168.1.18 upload_1d_lut_from_file \"hdr_cinema.1dlut\"\n# Restore 3D LUT\nbscpylgtvcommand 192.168.1.18 upload_3d_lut_bt2020_from_file \"hdr_cinema.3dlut\"\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\n#### Uploading custom tonemapping parameters for HDR10 presets\n\n- available only on supported models (>=2019)\n- parameters (in this order): picture_mode, peak luminance, mastering_peak_1, rolloff_point_1, mastering_peak_2, rolloff_point_2, mastering_peak_3, rolloff_point_3 \n\n```bash\n# Start calibration mode\nbscpylgtvcommand 192.168.1.18 start_calibration hdr_cinema\n# Upload custom tonemapping parameters for HDR10 Cinema preset\nbscpylgtvcommand 192.168.1.18 set_tonemap_params hdr_cinema 760 1000 75 4000 60 10000 50\n# Or upload custom tonemapping parameters to disable internal tonemapping entirely\nbscpylgtvcommand 192.168.1.18 set_tonemap_params hdr_cinema 760 1000 100 4000 100 10000 100\n# End calibration mode\nbscpylgtvcommand 192.168.1.18 end_calibration\n```\n\n### Writing Dolby Vision config file for USB upload\n\n- picture modes: dolby_cinema_bright - 1 (DoVi Cinema Home), dolby_cinema_dark - 2 (DoVi Cinema), dolby_game - 4 (DoVi Game)\n- primaries (in this order): xr, yr, xg, yg, xb, yb\n- config of 2018 models is different from newer models (>=2019)\n\n```bash\n# Writing DoVi config for one preset (DoVi Cinema)\nbscpylgtvcommand 192.168.1.18 write_dolby_vision_config_file \"[{\\\"picture_mode\\\": \\\"dolby_cinema_dark\\\", \\\"white_level\\\": 750, \\\"primaries\\\": [0.6796, 0.3187, 0.2595, 0.6849, 0.1448, 0.0494]}]\" -s\n# Writing DoVi config for all the presets (DoVi Cinema Home, Cinema, Game) based on one set of data\nbscpylgtvcommand 192.168.1.18 write_dolby_vision_config_file \"[{\\\"white_level\\\": 750, \\\"primaries\\\": [0.6796, 0.3187, 0.2595, 0.6849, 0.1448, 0.0494]}]\" true D:\\temp -s\n# Writing DoVi config for all the presets (DoVi Cinema Home, Cinema, Game) by specifying them separately\nbscpylgtvcommand 192.168.1.18 write_dolby_vision_config_file \"[{\\\"picture_mode\\\": \\\"dolby_cinema_bright\\\", \\\"white_level\\\": 710, \\\"primaries\\\": [0.6796, 0.3187, 0.2595, 0.6849, 0.1448, 0.0494]}, {\\\"picture_mode\\\": \\\"dolby_cinema_dark\\\", \\\"white_level\\\": 750, \\\"primaries\\\": [0.6796, 0.3187, 0.2595, 0.6849, 0.1448, 0.0494]}, {\\\"picture_mode\\\": \\\"dolby_game\\\", \\\"white_level\\\": 680, \\\"primaries\\\": [0.6796, 0.3187, 0.2595, 0.6849, 0.1448, 0.0494]}]\" -s\n```\n\n### Using the internal Test Pattern Generator (iTPG)\n\n- it can be used inside or outside of calibration mode as well\n- it can be broken in many defferent ways in a given firmware version / picture mode / etc\n- available only on supported (>=2019) models\n- 2019 models require Full Range 10 bit values (0-1023) using HDR10, while >=2020 models Limited Range 10 bit values (64-940)\n- all suported models require Full Range 10 bit values (0-1023) using DoVi\n- more useful example can be found in [docs/scripts](https://github.com/chros73/bscpylgtv/tree/master/docs/scripts/lg-itpg-manual-measure-from-csv.py) directory.\n\n```bash\n# Set full screen black window in the background\nbscpylgtvcommand 192.168.1.18 set_itpg_patch_window 0 0 0 0 3840 2160 0 0\n# Set 5% window green patch on top of the background\nbscpylgtvcommand 192.168.1.18 set_itpg_patch_window 0 1023 0 1\n# Display the 2 set patches\nbscpylgtvcommand 192.168.1.18 toggle_itpg true 2\n# Disable the 2 set patches\nbscpylgtvcommand 192.168.1.18 toggle_itpg false 0\n\n# Or using \"overlay\" 5% window green patch on top of the content\nbscpylgtvcommand 192.168.1.18 set_itpg_patch_window 0 1023 0 0\n# Display the set patch\nbscpylgtvcommand 192.168.1.18 toggle_itpg true 1\n# Disable the set patch\nbscpylgtvcommand 192.168.1.18 toggle_itpg false 0\n```\n\nDisplaying gradation window:\n```bash\n# Set black to white gradation window for vertical type\nbscpylgtvcommand 192.168.1.18 set_itpg_gradation_window 0 3 0 0 0 1 1 1\n# Display vertical gradation bars\nbscpylgtvcommand 192.168.1.18 toggle_itpg true 1 1\n# Set black to white gradation window for horizontal type\nbscpylgtvcommand 192.168.1.18 set_itpg_gradation_window 0 1 0 0 0 1 1 1\n# Display horizontal gradation bars\nbscpylgtvcommand 192.168.1.18 toggle_itpg true 1 2\n# Display 2 colored vertical gradation bars at the same time\nbscpylgtvcommand 192.168.1.18 set_itpg_gradation_window 0 3 610 520 230 1 1 1\nbscpylgtvcommand 192.168.1.18 set_itpg_gradation_window 1 3 610 50 23 1 1 1\nbscpylgtvcommand 192.168.1.18 toggle_itpg true 2 1\n# Disable gradation window\nbscpylgtvcommand 192.168.1.18 toggle_itpg false 0\n```\n\n\n## Development of `bscpylgtv`\n\n### Adding available settings for newer models\n\nA collection of useful commands and scripts are available under [docs/utils](https://github.com/chros73/bscpylgtv/tree/master/docs/utils) directory to add support for new firmwares in the future and make PRs easier to do.\n\n### Adding new chip type\n\nOnly 3D LUT and Dolby Vision config related calibration commands require chip type to be present to work properly, utilising `calibration_support_info` method.\nThe `model_name` field of the response of `get_software_info` method contains the chip type:\n```bash\nbscpylgtvcommand 192.168.1.18 get_software_info true\n```\n\n### Unit testing\n\nRequired extra packages:\n```bash\npip install numpy pytest pytest-asyncio pytest-mock\n```\n\nRunning unit tests against the installed package:\n```bash\n# Run all the tests in all files in tests/ directory\npytest tests\n# Run all the tests in one file\npytest tests/test_webos_client_lite.py\n# Run a specific test in one file\npytest tests/test_webos_client_calibration.py -k test_set_ui_data_methods\n```\n\n\n## Forum\n\nForum [topic](https://forum.doom9.org/showthread.php?t=175007).\n\n\n## Acknowledgement\n\nThanks to the following people:\n- [TheRealLink](https://github.com/TheRealLink/pylgtv) for the original implementation\n- [bendavid](https://github.com/bendavid/aiopylgtv) for lot of modification, especially with calibration functionality\n- [Maassoft](https://github.com/Maassoft/ColorControl) for useful ideas\n- Hifi4Vision for his invaluable calibration knowledge\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chros73/bscpylgtv",
    "keywords": "webos,tv",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bscpylgtv",
    "package_url": "https://pypi.org/project/bscpylgtv/",
    "platform": null,
    "project_url": "https://pypi.org/project/bscpylgtv/",
    "project_urls": {
      "Homepage": "https://github.com/chros73/bscpylgtv"
    },
    "release_url": "https://pypi.org/project/bscpylgtv/0.4.4/",
    "requires_dist": [
      "websockets (>=8.1)",
      "sqlitedict",
      "numpy (>=1.17.0) ; extra == 'with_calibration'"
    ],
    "requires_python": ">=3.8",
    "summary": "Library to control webOS based LG TV devices.",
    "version": "0.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16700009,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "302eb71f7744b53ef991edbfb6f178d9c91bac21952dbf783cbb961b5a53ff55",
          "md5": "3ada201320ecc9d3d440866b8bad3d11",
          "sha256": "f89093976c79dfe925f087a70cc28fa4b7f54e0932c9e2f3a49eadc81e0c16e6"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ada201320ecc9d3d440866b8bad3d11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28934,
        "upload_time": "2021-11-23T18:47:00",
        "upload_time_iso_8601": "2021-11-23T18:47:00.718818Z",
        "url": "https://files.pythonhosted.org/packages/30/2e/b71f7744b53ef991edbfb6f178d9c91bac21952dbf783cbb961b5a53ff55/bscpylgtv-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c52651e1420beac7a15a889d736c3ae22c99b58c646b6bed8091b576121e4ab",
          "md5": "c506a75a535d7c6e8d4b7a6ec193536c",
          "sha256": "ee5428f1cedfb3d217644930e173968500dcbfe35cd69bc7f06c9fe1bf38fe3f"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c506a75a535d7c6e8d4b7a6ec193536c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30902,
        "upload_time": "2021-11-23T18:47:02",
        "upload_time_iso_8601": "2021-11-23T18:47:02.465655Z",
        "url": "https://files.pythonhosted.org/packages/6c/52/651e1420beac7a15a889d736c3ae22c99b58c646b6bed8091b576121e4ab/bscpylgtv-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4df610cf021a2d3cd0c603af6bdc89308f9848e7a776033d47c3db65dd00a4e",
          "md5": "9531e3eb8d921d8be57b63606be3365f",
          "sha256": "17506fb571ac4b5fa0d67936230251daab73f1fef006b14c21548f7fba31ce31"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9531e3eb8d921d8be57b63606be3365f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29333,
        "upload_time": "2021-11-27T11:19:27",
        "upload_time_iso_8601": "2021-11-27T11:19:27.744395Z",
        "url": "https://files.pythonhosted.org/packages/d4/df/610cf021a2d3cd0c603af6bdc89308f9848e7a776033d47c3db65dd00a4e/bscpylgtv-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d539fcbecc3ab1f566cea8f1193e134f010b16d26dffc2066436b9aaabb30b22",
          "md5": "e5c7fad7e24b38409328d172a4242b44",
          "sha256": "b57794f68fb35a8eceda31984f7c10b8a7511912a16c171cef7e457786dd83ab"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5c7fad7e24b38409328d172a4242b44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 31660,
        "upload_time": "2021-11-27T11:19:29",
        "upload_time_iso_8601": "2021-11-27T11:19:29.613902Z",
        "url": "https://files.pythonhosted.org/packages/d5/39/fcbecc3ab1f566cea8f1193e134f010b16d26dffc2066436b9aaabb30b22/bscpylgtv-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52c828aa52a803655c3dbeca950a3def77305c73c76739c12465c745583837a4",
          "md5": "5e671de95bd52d6cacaff53cf72fd7db",
          "sha256": "5058f55fbf69f77deea02f91dc910d708c687ef87bd0b883f0486c7d3ccfeb43"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e671de95bd52d6cacaff53cf72fd7db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30206,
        "upload_time": "2021-12-01T16:49:24",
        "upload_time_iso_8601": "2021-12-01T16:49:24.775612Z",
        "url": "https://files.pythonhosted.org/packages/52/c8/28aa52a803655c3dbeca950a3def77305c73c76739c12465c745583837a4/bscpylgtv-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55ea106a0ae3b562da6a0e18d10053fc0703fca30214b47ad36b16903e33392b",
          "md5": "01d352f443d02e4265b74e029961f8c6",
          "sha256": "73189c5a62eb4f41a4ea48abfaf6bf232c7ef91d4f747e70840691dbcc5f5395"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "01d352f443d02e4265b74e029961f8c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32188,
        "upload_time": "2021-12-01T16:49:26",
        "upload_time_iso_8601": "2021-12-01T16:49:26.283254Z",
        "url": "https://files.pythonhosted.org/packages/55/ea/106a0ae3b562da6a0e18d10053fc0703fca30214b47ad36b16903e33392b/bscpylgtv-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "968c1eda53b944ba29d48a81bbe4b5f4cfc8e30cae17890f4d8675279a7f60c5",
          "md5": "8e92ea2b0c46f237d1e641b17e63fb5a",
          "sha256": "9438254c4998c0c838ac8aa3eb0fc8828ce9faef17e5e0f09132ad2c24167641"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e92ea2b0c46f237d1e641b17e63fb5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30504,
        "upload_time": "2021-12-04T13:01:46",
        "upload_time_iso_8601": "2021-12-04T13:01:46.850234Z",
        "url": "https://files.pythonhosted.org/packages/96/8c/1eda53b944ba29d48a81bbe4b5f4cfc8e30cae17890f4d8675279a7f60c5/bscpylgtv-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29872a21d09c9b758c6597c29d3e952971eaebcf5dba5de48936e71b327b1bb5",
          "md5": "18feb20861386fdf4ff21f98be84fc4c",
          "sha256": "7afc7d128a71794b1a3c3b00321417a56abdbac555c368fe8c24300f61ffea06"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "18feb20861386fdf4ff21f98be84fc4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32575,
        "upload_time": "2021-12-04T13:01:48",
        "upload_time_iso_8601": "2021-12-04T13:01:48.611772Z",
        "url": "https://files.pythonhosted.org/packages/29/87/2a21d09c9b758c6597c29d3e952971eaebcf5dba5de48936e71b327b1bb5/bscpylgtv-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8533da3877f9394efc3de7b7c8f0ef51a38e480ee13ed581760674e15e093e47",
          "md5": "6a0e0a88df72c56e8dba6e97614055b9",
          "sha256": "799f062b12c538f167ccc07e379953b937b5626ff29906f80434947f44591b07"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a0e0a88df72c56e8dba6e97614055b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30481,
        "upload_time": "2021-12-13T17:12:09",
        "upload_time_iso_8601": "2021-12-13T17:12:09.906572Z",
        "url": "https://files.pythonhosted.org/packages/85/33/da3877f9394efc3de7b7c8f0ef51a38e480ee13ed581760674e15e093e47/bscpylgtv-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bdbbcbff5bb62affcc54359e985f1bb03cf0bd1537657a0100c1dac956743b1",
          "md5": "07bbd9dcbe96cf4c3b2f7656a02a4f13",
          "sha256": "8c65cc1a56560bfcf78e88b43dfed63211248462ce5229e295bb570f0bb86792"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "07bbd9dcbe96cf4c3b2f7656a02a4f13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32523,
        "upload_time": "2021-12-13T17:12:11",
        "upload_time_iso_8601": "2021-12-13T17:12:11.401916Z",
        "url": "https://files.pythonhosted.org/packages/8b/db/bcbff5bb62affcc54359e985f1bb03cf0bd1537657a0100c1dac956743b1/bscpylgtv-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8932d2ca42c78018dcc210e12d24413ceb9545afd88c703d015ccf37352314c",
          "md5": "2611d3b7566bcecf52948a65d17c8a1d",
          "sha256": "af6172f0594acd7c28c67a2cf7204b6ab706efa5c5c0e3d284835a71b20fdeaf"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2611d3b7566bcecf52948a65d17c8a1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30765,
        "upload_time": "2021-12-17T08:18:16",
        "upload_time_iso_8601": "2021-12-17T08:18:16.918589Z",
        "url": "https://files.pythonhosted.org/packages/d8/93/2d2ca42c78018dcc210e12d24413ceb9545afd88c703d015ccf37352314c/bscpylgtv-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bf2424b2a9e2f3ab13d30a722b0fc3ede86dc8d411fb5440c901242a837cc66",
          "md5": "b371b1246009bfc565142d42d1ca1f93",
          "sha256": "07273dc9261881fd3bafef7709706da5d8e3e1e058d0a4ea05a777c92e5a6418"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b371b1246009bfc565142d42d1ca1f93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32852,
        "upload_time": "2021-12-17T08:18:18",
        "upload_time_iso_8601": "2021-12-17T08:18:18.772186Z",
        "url": "https://files.pythonhosted.org/packages/3b/f2/424b2a9e2f3ab13d30a722b0fc3ede86dc8d411fb5440c901242a837cc66/bscpylgtv-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d89051f9c9d6b31a168af96d307d3c3ddba6e08d9d0a315359b8bede3fb009b",
          "md5": "1defebca5d7e2ad5872c5895691b18ce",
          "sha256": "d1ad7fb973cb3286390b41130f347a9ea9f10dfa0aee2aa16252a371456ba619"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1defebca5d7e2ad5872c5895691b18ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30807,
        "upload_time": "2021-12-18T10:32:53",
        "upload_time_iso_8601": "2021-12-18T10:32:53.316173Z",
        "url": "https://files.pythonhosted.org/packages/2d/89/051f9c9d6b31a168af96d307d3c3ddba6e08d9d0a315359b8bede3fb009b/bscpylgtv-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9e7fbd45106691a7140fcac92ce278f58323538b9efaa14938f2ef4eb44c0db",
          "md5": "9913e35a7988f706c60c7954c43ea748",
          "sha256": "ba6733a7b102abfe02433e0795c3ac89a94bce5abb96d3873edc7653a448744d"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9913e35a7988f706c60c7954c43ea748",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32900,
        "upload_time": "2021-12-18T10:32:55",
        "upload_time_iso_8601": "2021-12-18T10:32:55.324926Z",
        "url": "https://files.pythonhosted.org/packages/a9/e7/fbd45106691a7140fcac92ce278f58323538b9efaa14938f2ef4eb44c0db/bscpylgtv-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbb48edee4dca6641479fcf0e3ffe937927fce62d98995867a2156b4677fdfbd",
          "md5": "5e950269ff478f9a2bf195a39917a5dc",
          "sha256": "b5a73483be0e4110f6a67bcded01bf24edba682739e8bf1980549693427c0238"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e950269ff478f9a2bf195a39917a5dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31128,
        "upload_time": "2021-12-19T18:40:29",
        "upload_time_iso_8601": "2021-12-19T18:40:29.349727Z",
        "url": "https://files.pythonhosted.org/packages/cb/b4/8edee4dca6641479fcf0e3ffe937927fce62d98995867a2156b4677fdfbd/bscpylgtv-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0b106a75e437d634de1a81ae5fc90ad9e4eab0c2039427152fb5dc4a9f60168",
          "md5": "8401565ba509feda866d3abbffdd3ea2",
          "sha256": "add54186457dd820573ae977e2350a0ada71e1eed339d0a547a7dcf1b2eb4e3d"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8401565ba509feda866d3abbffdd3ea2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34112,
        "upload_time": "2021-12-19T18:40:32",
        "upload_time_iso_8601": "2021-12-19T18:40:32.303777Z",
        "url": "https://files.pythonhosted.org/packages/d0/b1/06a75e437d634de1a81ae5fc90ad9e4eab0c2039427152fb5dc4a9f60168/bscpylgtv-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9c940355ed2ba520b336e073b620380c78ed851bfe137eb6d3aeb3e08135a41",
          "md5": "801be06b1809f86e24d52a57b4bd24a3",
          "sha256": "0fe7f82a45eb2920bfac33f3b67c2b6a51a4c3759d7b584021c816daa70908ad"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "801be06b1809f86e24d52a57b4bd24a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31123,
        "upload_time": "2021-12-23T11:01:06",
        "upload_time_iso_8601": "2021-12-23T11:01:06.973010Z",
        "url": "https://files.pythonhosted.org/packages/f9/c9/40355ed2ba520b336e073b620380c78ed851bfe137eb6d3aeb3e08135a41/bscpylgtv-0.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35e49269054649e251102b9f40311f82c21f76e821106dd4603ef05de4f602a1",
          "md5": "741d8f28e792882b8c5334fcdfe0c0ff",
          "sha256": "b8503a67a01ff792efa8f8df4157030a55c78adf81767174dc18f1a20af7af98"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "741d8f28e792882b8c5334fcdfe0c0ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34184,
        "upload_time": "2021-12-23T11:01:08",
        "upload_time_iso_8601": "2021-12-23T11:01:08.726538Z",
        "url": "https://files.pythonhosted.org/packages/35/e4/9269054649e251102b9f40311f82c21f76e821106dd4603ef05de4f602a1/bscpylgtv-0.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ffbf5c53c5c3aebbc99e4c4fba2451325ebaff68c254d5b148621287171620a",
          "md5": "7993ed2435479c1a06ed87da8c46130e",
          "sha256": "a1a0b32b3869c382917003ce317bc97e11af14d8b84d30bd83a6cdfe9acbf8bb"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7993ed2435479c1a06ed87da8c46130e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31019,
        "upload_time": "2021-12-25T20:23:40",
        "upload_time_iso_8601": "2021-12-25T20:23:40.404892Z",
        "url": "https://files.pythonhosted.org/packages/4f/fb/f5c53c5c3aebbc99e4c4fba2451325ebaff68c254d5b148621287171620a/bscpylgtv-0.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f470d3657784fd8c0062755d1ec4c59ca1d7d3bdc03e26e30bf6134b2f3521ff",
          "md5": "4125844a7d30bf42c9e91920c88ea2a3",
          "sha256": "00c40e86314fd3e3304fd8e2a58221aa60c85fa2eb0c32f644c2d3b15b56954c"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "4125844a7d30bf42c9e91920c88ea2a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 34164,
        "upload_time": "2021-12-25T20:23:42",
        "upload_time_iso_8601": "2021-12-25T20:23:42.369879Z",
        "url": "https://files.pythonhosted.org/packages/f4/70/d3657784fd8c0062755d1ec4c59ca1d7d3bdc03e26e30bf6134b2f3521ff/bscpylgtv-0.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64f8b683fbefc8b25d30c66cc3bfc39d736623f8c6f707dae55f8df0ce3e09fb",
          "md5": "15575748f0e37b33c2ec3244cf88c70b",
          "sha256": "7c0bde86b9749cd4bea0cfbaa3b58d966f4090f311a0cfae31571c239ff69be2"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15575748f0e37b33c2ec3244cf88c70b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31802,
        "upload_time": "2022-01-02T21:59:30",
        "upload_time_iso_8601": "2022-01-02T21:59:30.924664Z",
        "url": "https://files.pythonhosted.org/packages/64/f8/b683fbefc8b25d30c66cc3bfc39d736623f8c6f707dae55f8df0ce3e09fb/bscpylgtv-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1786b7f5b2659460853d66dbbbb2b3b0c4b68e417b88873ecb64470d4d7d3300",
          "md5": "b7ced89867571519b8bfc41848d1d30a",
          "sha256": "7bf4441f721549ef8f5149e3eab23dbdeb9718b26d95aac67fe8fb2137afce91"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7ced89867571519b8bfc41848d1d30a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 35123,
        "upload_time": "2022-01-02T21:59:32",
        "upload_time_iso_8601": "2022-01-02T21:59:32.767674Z",
        "url": "https://files.pythonhosted.org/packages/17/86/b7f5b2659460853d66dbbbb2b3b0c4b68e417b88873ecb64470d4d7d3300/bscpylgtv-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "954fc89f6ffd357ef8a7b9bc17e88361f3207b60536112da48efa18e4953c24b",
          "md5": "ceef738b4533a4bf50d5e6512c9f9209",
          "sha256": "24631b2b8c3fb8a2dbff3ee8cbfd98699e6811ddf8fe17960d2a4354defc412e"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ceef738b4533a4bf50d5e6512c9f9209",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31814,
        "upload_time": "2022-01-03T19:46:30",
        "upload_time_iso_8601": "2022-01-03T19:46:30.199171Z",
        "url": "https://files.pythonhosted.org/packages/95/4f/c89f6ffd357ef8a7b9bc17e88361f3207b60536112da48efa18e4953c24b/bscpylgtv-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51acaadf06e66c2eb5b84618331075470f05df5ebd3c9f4e1a349a609480a42b",
          "md5": "303d6b2c5a86718a6d5e1651dd6853ee",
          "sha256": "918e9970f0b13ccdb624116fd81bb38213c90a085b3d30e42b1eb3fa43acc0aa"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "303d6b2c5a86718a6d5e1651dd6853ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 35134,
        "upload_time": "2022-01-03T19:46:32",
        "upload_time_iso_8601": "2022-01-03T19:46:32.725652Z",
        "url": "https://files.pythonhosted.org/packages/51/ac/aadf06e66c2eb5b84618331075470f05df5ebd3c9f4e1a349a609480a42b/bscpylgtv-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7928f36ae92903c4d7d640337ee61fa48a2ad8d8188c83da9374919b7705a7",
          "md5": "5c368076c29c482c5bddc364d090396b",
          "sha256": "8eabd605eb462bf02fc648cf35ac395049119a539439fc1d6400e26b7d122df7"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c368076c29c482c5bddc364d090396b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 32799,
        "upload_time": "2022-07-17T12:14:21",
        "upload_time_iso_8601": "2022-07-17T12:14:21.594107Z",
        "url": "https://files.pythonhosted.org/packages/8e/79/28f36ae92903c4d7d640337ee61fa48a2ad8d8188c83da9374919b7705a7/bscpylgtv-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e720ae00e707e9fe9a59f36a6b9e13cd5e983715afbf325f147c68c25c053044",
          "md5": "66321e982ea726cd88baa2f46596dea4",
          "sha256": "98d2a6b74ade478075819d9fcf35545a5bdcb9657f5a424e0345071b352b52d8"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "66321e982ea726cd88baa2f46596dea4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 36493,
        "upload_time": "2022-07-17T12:14:23",
        "upload_time_iso_8601": "2022-07-17T12:14:23.231668Z",
        "url": "https://files.pythonhosted.org/packages/e7/20/ae00e707e9fe9a59f36a6b9e13cd5e983715afbf325f147c68c25c053044/bscpylgtv-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad1755ece23e082638e7db1ac1773c73e2bee78ec3760dad5110e3c7e7e7bab0",
          "md5": "a9f9ac4fa158c982400335311b9c6f2b",
          "sha256": "af6c1c5ea737561d6fd0e751a69a98de32d829d544073b795db24498b4c5d20c"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9f9ac4fa158c982400335311b9c6f2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39714,
        "upload_time": "2022-10-23T20:07:23",
        "upload_time_iso_8601": "2022-10-23T20:07:23.636117Z",
        "url": "https://files.pythonhosted.org/packages/ad/17/55ece23e082638e7db1ac1773c73e2bee78ec3760dad5110e3c7e7e7bab0/bscpylgtv-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfaa3606e22df34f37e670c60f5a4de62e00fac84ee7f7d81fdc7ceee7f246bc",
          "md5": "dab5f98de5c777bfae26e9ef041a9a31",
          "sha256": "8de3abdafb352588d365706bf4970da926b64b6954021ff00614bc3940cd2088"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dab5f98de5c777bfae26e9ef041a9a31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45958,
        "upload_time": "2022-10-23T20:07:25",
        "upload_time_iso_8601": "2022-10-23T20:07:25.743715Z",
        "url": "https://files.pythonhosted.org/packages/bf/aa/3606e22df34f37e670c60f5a4de62e00fac84ee7f7d81fdc7ceee7f246bc/bscpylgtv-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fe30e64db07ef7548f64c5b5c44a1f6a9151dd399ca1443fff84a25b1eef179",
          "md5": "38626180cdfbb45ea46764206ac82c24",
          "sha256": "df0aa537127e51ae85417c4b645c739d01591c9bac1522ab9310a23adbe257b6"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38626180cdfbb45ea46764206ac82c24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39686,
        "upload_time": "2022-10-29T20:16:00",
        "upload_time_iso_8601": "2022-10-29T20:16:00.937316Z",
        "url": "https://files.pythonhosted.org/packages/4f/e3/0e64db07ef7548f64c5b5c44a1f6a9151dd399ca1443fff84a25b1eef179/bscpylgtv-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46768d5f1832a1551fd4b3c05589c6d85e31b2c8b51894b4f1b0cc38403863d",
          "md5": "dd0e8f9ace1ea19e7e1f635db4e3aa47",
          "sha256": "1427b8b3c0c119e80ac99f2f19c0876d1f89e76a43446f6bef6990c7d46a0488"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd0e8f9ace1ea19e7e1f635db4e3aa47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 46183,
        "upload_time": "2022-10-29T20:16:03",
        "upload_time_iso_8601": "2022-10-29T20:16:03.160180Z",
        "url": "https://files.pythonhosted.org/packages/d4/67/68d5f1832a1551fd4b3c05589c6d85e31b2c8b51894b4f1b0cc38403863d/bscpylgtv-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75c402dde8d63c513647ffe47f5471b5100c6083f61ac1c76826e04745eafc1f",
          "md5": "1bf87d89f9a38553442772a8b3c81623",
          "sha256": "7793332e530b901c0e24e643b056ba79fd3b0ea99c22008a676271196dbba4ee"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bf87d89f9a38553442772a8b3c81623",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39898,
        "upload_time": "2022-11-01T09:29:53",
        "upload_time_iso_8601": "2022-11-01T09:29:53.125462Z",
        "url": "https://files.pythonhosted.org/packages/75/c4/02dde8d63c513647ffe47f5471b5100c6083f61ac1c76826e04745eafc1f/bscpylgtv-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f96935027d2834ddb8cf6c093b8ed7e271f2d0b7a0ac2b7520a4d5aeba4386ef",
          "md5": "5406b4e4e67f71095df19b9779baad26",
          "sha256": "9a8c4f95f50ebd298bad8345df9527465dd1fb42c533efd8662092252222aa91"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5406b4e4e67f71095df19b9779baad26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 46749,
        "upload_time": "2022-11-01T09:29:55",
        "upload_time_iso_8601": "2022-11-01T09:29:55.326581Z",
        "url": "https://files.pythonhosted.org/packages/f9/69/35027d2834ddb8cf6c093b8ed7e271f2d0b7a0ac2b7520a4d5aeba4386ef/bscpylgtv-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff44b6d3f2188fbc3ff20b8c90bb9dcf054d83f1782a89d4faf4c3ed46a777d0",
          "md5": "83731f75cf95c3d49b54549ea5ac9b7e",
          "sha256": "a0001c9c79b81dd45e7f1cb7b2aec30742f36f5d7f3ff2cf289f61495252e2a5"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83731f75cf95c3d49b54549ea5ac9b7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 40850,
        "upload_time": "2023-01-19T10:13:23",
        "upload_time_iso_8601": "2023-01-19T10:13:23.484292Z",
        "url": "https://files.pythonhosted.org/packages/ff/44/b6d3f2188fbc3ff20b8c90bb9dcf054d83f1782a89d4faf4c3ed46a777d0/bscpylgtv-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75d4052ae50d2965ac6c3d4565da5c14f16e6c29d110727f3e923f2c440e1e6c",
          "md5": "f7b61ac1c41a30207cec1ed9c13d2cb7",
          "sha256": "9acaac77e09f313e696e89cb654734f91ff9296591d9b022ab6b73d080fb3824"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f7b61ac1c41a30207cec1ed9c13d2cb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 47773,
        "upload_time": "2023-01-19T10:13:25",
        "upload_time_iso_8601": "2023-01-19T10:13:25.085382Z",
        "url": "https://files.pythonhosted.org/packages/75/d4/052ae50d2965ac6c3d4565da5c14f16e6c29d110727f3e923f2c440e1e6c/bscpylgtv-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c2e08e9f810639adc76819c6393f37bc045ee0ce00d3a0157c28d929cf04d19",
          "md5": "bbe66ed3c004758c5e7fde3de39646e3",
          "sha256": "299c3ff0d4b8f0ec60f3befc60653e59c06a98cf2796eb73b486e08786949cd4"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbe66ed3c004758c5e7fde3de39646e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 42075,
        "upload_time": "2023-02-05T11:32:11",
        "upload_time_iso_8601": "2023-02-05T11:32:11.981912Z",
        "url": "https://files.pythonhosted.org/packages/1c/2e/08e9f810639adc76819c6393f37bc045ee0ce00d3a0157c28d929cf04d19/bscpylgtv-0.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "484c5c5faebc197b4c659ac465e454beafae58eda6ea2427d9310b5b0817525b",
          "md5": "b1737ba9cd49bc3950e350da0ba7f852",
          "sha256": "46db1ef79c189ca4c6d35dcefac8027e0ffa56ed00e8f7943a1200faa7ae9ae1"
        },
        "downloads": -1,
        "filename": "bscpylgtv-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b1737ba9cd49bc3950e350da0ba7f852",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 49534,
        "upload_time": "2023-02-05T11:32:14",
        "upload_time_iso_8601": "2023-02-05T11:32:14.121560Z",
        "url": "https://files.pythonhosted.org/packages/48/4c/5c5faebc197b4c659ac465e454beafae58eda6ea2427d9310b5b0817525b/bscpylgtv-0.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c2e08e9f810639adc76819c6393f37bc045ee0ce00d3a0157c28d929cf04d19",
        "md5": "bbe66ed3c004758c5e7fde3de39646e3",
        "sha256": "299c3ff0d4b8f0ec60f3befc60653e59c06a98cf2796eb73b486e08786949cd4"
      },
      "downloads": -1,
      "filename": "bscpylgtv-0.4.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bbe66ed3c004758c5e7fde3de39646e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 42075,
      "upload_time": "2023-02-05T11:32:11",
      "upload_time_iso_8601": "2023-02-05T11:32:11.981912Z",
      "url": "https://files.pythonhosted.org/packages/1c/2e/08e9f810639adc76819c6393f37bc045ee0ce00d3a0157c28d929cf04d19/bscpylgtv-0.4.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "484c5c5faebc197b4c659ac465e454beafae58eda6ea2427d9310b5b0817525b",
        "md5": "b1737ba9cd49bc3950e350da0ba7f852",
        "sha256": "46db1ef79c189ca4c6d35dcefac8027e0ffa56ed00e8f7943a1200faa7ae9ae1"
      },
      "downloads": -1,
      "filename": "bscpylgtv-0.4.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b1737ba9cd49bc3950e350da0ba7f852",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 49534,
      "upload_time": "2023-02-05T11:32:14",
      "upload_time_iso_8601": "2023-02-05T11:32:14.121560Z",
      "url": "https://files.pythonhosted.org/packages/48/4c/5c5faebc197b4c659ac465e454beafae58eda6ea2427d9310b5b0817525b/bscpylgtv-0.4.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}