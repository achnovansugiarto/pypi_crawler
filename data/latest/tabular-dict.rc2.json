{
  "info": {
    "author": "Rui Calsaverini",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Tabular Dict\n\nA Python3 library to flatten and inflate lists and dictionaries:\n\nFor example, flattening something like this:\n\n```python\nfrom tabular_dict import flatten\n\nflatten({\n    'some_key': {\n        'foo': 'bar',\n    },\n    'WithA.Dot': [True, None],\n})\n```\n\nwill render you a flat tabular structure like this:\n\n```python\n{\n    'some_key.foo': 'bar',\n    'WithA\\\\.Dot.[0]': True,\n    'WithA\\\\.Dot.[1]': None\n}\n```\n\nwhich can be inflated to the original without loss like this:\n\n```python\nfrom tabular_dict import inflate\n\ninflate({\n    'some_key.foo': 'bar',\n    'WithA\\\\.Dot.[0]': True,\n    'WithA\\\\.Dot.[1]': None\n})\n```\n\n## How to install\n\n## Documentation\n\n### flatten(data, separator = '.', escape = escape_type.SLASH, mark_arrays = True)\n\nFlattens a dict or list into a single-dimension dict, with a path value mapping. Paths are joined consecutive keys bound\nby a pre-defined separator. Arrays are specially marked with square brackets.\n\nOnly valid JSON dictionaries and lists are accepted (for example, dict keys must always be strings)\n\n#### Arguments\n\n- **data: Union[dict, list]** - Dictionary or list to be flattened\n- **separator: str = '.'** - Separator to be added between different levels on the data, defaults to a dot\n- **separator: escape_type = escape_type.SLASH** - Type of escaping, defaults to `SLASH`. Currently only `SLASH`\n  and `NO_ESCAPE` are supported\n- **mark_arrays: bool = True** - If set to True, will mark array index keys with a bracket.\n\n#### Return value\n\nA dict with the flattened structure.\n\n#### Examples\n\n```python\nfrom tabular_dict import flatten\n\nflatten({\n    'a': {'b': {'c': {'d': 'e'}}},\n    'b': [[[[{'foo': 'bar'}]]]],\n})\n```\n\nOutput:\n\n```python\n{\n    'a.b.c.d': 'e',\n    'b.[0].[0].[0].[0].foo': 'bar',\n}\n```\n\n### inflate(data, separator = '.', escape = escape_type.SLASH, mark_arrays = True)\n\nOnly valid JSON dictionaries and lists are accepted (for example, dict keys must always be strings)\n\n#### Arguments\n\n- **flat_data: dict** - Flat dictionary, with keys as strings and values as primitives (int, str, None, bool, float)\n- **separator: str = '.'** - Separator that delimits different levels on the data, defaults to a dot\n- **separator: escape_type = escape_type.SLASH** - Type of escaping, defaults to `SLASH`. Currently only `SLASH`\n  and `NO_ESCAPE` are supported\n- **mark_arrays: bool = True** - If set to True, will recover array keys when enclosed in brackets.\n\n#### Return value\n\nA dict or list with the inflated data\n\n#### Examples\n\n```python\nfrom tabular_dict import inflate\n\ninflate({\n    'a.b.c.d': 'e',\n    'b.[0].[0].[0].[0].foo': 'bar',\n})\n\n# Also works with roots that are lists\ninflate({\n    '[0].a': 1,\n    '[1]': 2,\n    '[2].a.b.c.d.e.f.g': 'h',\n})\n\n```\n\nOutput:\n\n```python\n{\n    'a': {'b': {'c': {'d': 'e'}}},\n    'b': [[[[{'foo': 'bar'}]]]],\n}\n\n# Also works with roots that are lists\n[\n    {'a': 1},\n    2,\n    {'a': {'b': {'c': {'d': {'e': {'f': {'g': 'h'}}}}}}},\n]\n```\n\n### escape_type\n\n**:warning: For now, avoid using anything other than SLASH.**\n\nThere are three accepted escape types:\n\n- SLASH - Will add a slash before the separator and duplicate slashes. This is the default and suggested type\n- NO_ESCAPE - Skips escaping altogether\n- DOUBLE - Duplicates the separator to escape it (Only partial support for now, avoid this)\n\nExample:\n\n```python\nfrom tabular_dict import escape_type, make_path\n\n# Gives you \"\\\\some\\-example\"\nprint(make_path('', '\\some-example', separator='-', escape=escape_type.SLASH))\n\n# Gives you \"\\some-example\"\nprint(make_path('', '\\some-example', separator='-', escape=escape_type.NO_ESCAPE))\n\n# Gives you \"\\some--example\"\nprint(make_path('', '\\some--example', separator='-', escape=escape_type.DOUBLE))\n```\n\n### make_path(path, key, separator = '.', escape = escape_type.SLASH)\n\nThis is mostly an internal function, you will probably not use it.\n\nConcatenates a new key into a path, considering the separator and escape rule.\n\n#### Arguments\n\n- **path: str** - Current path, will concatenate new keys into it. Pass empty string if this is the root.\n- **key: str** - Separator that delimits different levels on the data, defaults to a dot\n- **separator: str = '.'** - Separator that delimits different levels on the data, defaults to a dot\n- **separator: escape_type = escape_type.SLASH** - Type of escaping, defaults to `SLASH`.\n\n#### Return value\n\nA string with the concatenated path and key\n\n#### Examples\n\n```python3\nfrom tabular_dict import make_path\n\n# Gives you \"key\"\nprint(make_path('', 'key'))\n\n# Gives you \"path,key\"\nprint(make_path('path', 'key', separator=','))\n\n# Gives you \"a,longer,path,key_with_\\,_comma\"\nprint(make_path('a,longer,path', 'key_with_,_comma', separator=','))\n```\n\n### split_path(path, key, separator = '.', escape = escape_type.SLASH)\n\nThis is mostly an internal function, you will probably not use it.\n\nConcatenates a new key into a path, considering the separator and escape rule.\n\n#### Arguments\n\n- **path: str** - Full path generated by make_path. Will split it into individual keys.\n- **separator: str = '.'** - Separator that delimits different levels on the data, defaults to a dot\n- **separator: escape_type = escape_type.SLASH** - Type of escaping, defaults to `SLASH`.\n- **mark_arrays: bool = True** - If set to True, will recover array keys when enclosed in brackets.\n\n#### Return value\n\nA list with the individual keys that make up the path\n\n#### Examples\n\n```python3\nfrom tabular_dict import split_path\n\n# Gives you [\"1\"]\nprint(split_path('1'))\n\n# Gives you [1]\nprint(split_path('[1]'))\n\n# Gives you [\"one\", \"tw,o\", \"three\", 4]\nprint(split_path('one,tw\\\\,o,three,[4]', separator=','))\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rgcalsaverini/tabular-dict",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tabular-dict",
    "package_url": "https://pypi.org/project/tabular-dict/",
    "platform": "",
    "project_url": "https://pypi.org/project/tabular-dict/",
    "project_urls": {
      "Homepage": "https://github.com/rgcalsaverini/tabular-dict"
    },
    "release_url": "https://pypi.org/project/tabular-dict/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11923736,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1a5a7b312c008faa3deef2ac2efdf4454a3e7aebb21eba1527864589c928e60",
          "md5": "44ac6675e3c4f63b5b079b2cb8e7156d",
          "sha256": "e87b6650606add0f558f2943644b69a13edecd78f86e7bd9501f0df0a02a357d"
        },
        "downloads": -1,
        "filename": "tabular_dict-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "44ac6675e3c4f63b5b079b2cb8e7156d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 129151,
        "upload_time": "2021-10-26T11:49:36",
        "upload_time_iso_8601": "2021-10-26T11:49:36.236991Z",
        "url": "https://files.pythonhosted.org/packages/c1/a5/a7b312c008faa3deef2ac2efdf4454a3e7aebb21eba1527864589c928e60/tabular_dict-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a9fe80c4f2f20b4e0b0c2d1cf6de4043d933ebca856aebb4248a90deb541f51",
          "md5": "c8ffd4905d3d984bb966df23bf4e55ed",
          "sha256": "d284042837e3d0d810acddccfd39eaff79430103f210fd81a8428929ef4f44d4"
        },
        "downloads": -1,
        "filename": "tabular_dict-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8ffd4905d3d984bb966df23bf4e55ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 129157,
        "upload_time": "2021-11-04T08:59:32",
        "upload_time_iso_8601": "2021-11-04T08:59:32.086337Z",
        "url": "https://files.pythonhosted.org/packages/9a/9f/e80c4f2f20b4e0b0c2d1cf6de4043d933ebca856aebb4248a90deb541f51/tabular_dict-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a9fe80c4f2f20b4e0b0c2d1cf6de4043d933ebca856aebb4248a90deb541f51",
        "md5": "c8ffd4905d3d984bb966df23bf4e55ed",
        "sha256": "d284042837e3d0d810acddccfd39eaff79430103f210fd81a8428929ef4f44d4"
      },
      "downloads": -1,
      "filename": "tabular_dict-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8ffd4905d3d984bb966df23bf4e55ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 129157,
      "upload_time": "2021-11-04T08:59:32",
      "upload_time_iso_8601": "2021-11-04T08:59:32.086337Z",
      "url": "https://files.pythonhosted.org/packages/9a/9f/e80c4f2f20b4e0b0c2d1cf6de4043d933ebca856aebb4248a90deb541f51/tabular_dict-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}