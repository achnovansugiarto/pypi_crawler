{
  "info": {
    "author": "PJ Gibson",
    "author_email": "Peter.Gibson@doh.wa.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ADTdq\n\n[Github Project](https://github.com/pjgibson25/ADTdq)\n\n\n## Setup\n\n-----------------------\n\nFirst off, please make sure you have a Python version >=3.6 .\nIf you don't have Python, you can get it by downloading [Anaconda](https://docs.anaconda.com/anaconda/install/).\n\nYou will likely have to install a few supporting packages.  In your command prompt or terminal (dependent on OS type), please type the following required dependencies.\n\n    pip install hl7\n    pip install regex\n    pip install plotly\n    pip install tqdm\n    pip install ipywidgets\n    pip install xlrd\n\nand if you didn't already install my package,\n\n    pip install ADTdq\n\n\n## Background \n\n-----------------------\n\n#### How it Started\n\nMy name is PJ Gibson and I created this python library while working as a data analyst with the Indiana State Department of Health.\nMy Informatics department arranged a grant with a group who could improve the quality of hospital reporting.\nWe needed to track the progress of this hospital reporting, which required diving into HL7 Admission/Discharge/Transfer (ADT) messages and assessing for data completion and validity.\nEnter me.\n\n\n#### The Goal\n\nThe main purpose of this package is to give data quality analysis functions to workers in public health informatics. \n\n\n\n\n## Functions\n<p>(click on function name for extended description)</p>\n-----------------------\n\n<details>\n<summary>list_elements</summary>\n\n## Documentation    \n\n    list_elements(include_priority=False):\n\n    Displays all potential elements we can search for\n\n    Parameters\n    ----------\n    include_priority: bool, optional (default is False)  \n        - returns 2 column pandas dataframe.  Element Name & Priority\n\n\n    Returns\n    -------\n    np.array() (list-like) that contains all elements we can search for\n    dataframe IF include_priority = True\n\n\n## Code Examples \n\n```\n# import the library and all its functions\nfrom HL7reporting import *\n\n# set pandas setting to disply a max of 100 rows.    \npd.options.display.max_rows = 100   \n\n# save elements/priority as 2 column pandas dataframe.\na = list_elements(include_priority=True)\na\n\n```\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/HL7reporting/raw/master/pics/list_elements.png\" alt=\"list_elements\">\n\n<br>\n</details>\n\n\n\n\n<details>\n<summary>NSSP_Element_Grabber</summary>\n\n## Documentation    \n\n    NSSP_Element_Grabber(data,explicit_search=None,Priority_only=False,outfile='None',no_FAC=False,no_MRN=False,no_VisNum=False):\n\n    Creates dataframe of important elements from PHESS data.\n    Timed with cool updating progressbar (tqdm library).\n\n    NOTE: Your input should contain the column titles:\n\t   MESSAGE , FACILITY_NAME\n\n\n    Parameters\n    ----------\n    data: pandas DataFrame, required\n\t- input containing columns MESSAGE, FACILITY_NAME\n\n    explicit_search: list, optional (default is None)\n\t- list of priority element names you want specifically.\n\t  Use argument-less list_elements() function to see all options\n\n    Priority_only:  bool, optional (default is False)  \n        - If True, only gives priority 1 or 2 elements\n\n    outfile:  str, optional (default is 'None')\n        - Replace with file name for dataframe to be wrote to as csv\n            Will be located in working directory.\n            DO NOT INCLUDE .csv IF YOU CHOOSE TO MAKE ONE\n\n    no_FAC: Bool, optional (default is False)\n\t- If you don't have a FACILITY_NAME in your input, change to True\n\t  NOTE: without a FACILITY_NAME, usage of other functions within library can return errors\n\n    no_MRN: Bool, optional (default is False)\n\t- If you do not want output to contain MRN information, change to True\n\t  NOTE: without a MRN, usage of other functions within library can return errors\n\n    no_VisNum: Bool, optional (default is False)\n\t- If you do not want output to contain patient_visit_number information, change to True\n\t  NOTE: without a VisNum, usage of other functions within library can return errors\n\n    Returns\n    -------\n    dataframe\n\n\n## Code Examples \n\n```\n# import the library and all its functions\nfrom HL7reporting import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1, Priority_only=True,outfile='nameofoutputfile')\n\n```\n\n*if you don't have no facility_name\n\n```\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(new_input_dataframe, Priority_only=True,outfile='outfilename', no_FAC=True)\n```\n\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/HL7reporting/raw/master/pics/nssp_element_grabber.png\" alt=\"nssp_element_grabber_visual\">\n\n*note personal details are replaced with random ints and NaN values\n<br>\n</details>\n\n\n\n<details>\n<summary>priority_cols</summary>\n\n## Documentation    \n\n\tpriority_cols(df, priority='both', extras=None, drop_cols=None)\n\n    Spits out NSSP priority columns from a dataframe.\n    Priority can be 1,2, or both.\n    Extras indicate additional columns from the original dataframe you would like the output to contain.\n    Drop_Cols indicate columns that you want to NOT include\n    Parameters\n    ----------\n    df: pandas dataframe, required\n    *priority: str, optional (default is both)\n            'both' - returns priority 1 and priority 2 element columns\n            'one' or '1' - returns priority 1 element columns only\n            'two' or '2' - returns priority 2 element columns only\n    *extras:  list, optional (default is None)\n            list must contain valid column values from df.\n    *drop_cols:  list, optional (default is None)\n            list must contain valid column values from df.\n    Returns\n    -------\n    pandas Dataframe\n\n\n## Code Examples \n\n\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n\n# take the priority element columns from our output dataframe\n#### remove two columns that are processed backend (always NaN)\nonly_priority1_df = priority_cols(parsed_df,priority='1',drop_cols=['Site_ID','C_Facility_ID'])\n\n```\n\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/priority_cols.png\" alt=\"priority_cols_Visual\">\n\n*note personal details are replaced with random ints and NaN values\n*also note the lower number of columns\n<br>\n</details>\n\n\n\n\n\n<details>\n<summary>Visualization_interactive</summary>\n\n## Documentation    \n\n    Visualization_interactive(df_before,df_after,str_date_list,priority='both_combined',grid=True,outfile=False,show_plot=False,Timed=True):\n\n\n    Creates an annotated heatmap that is interactive with hoverover.\n    Heatmap colors represent data completeness as of the first date\n    Annotations show the completion percent change with respect to the second date\n        (+ indicates increased completeness)\n\n    Parameters\n    ----------\n    df_before : pandas.DataFrame, required (output of NSSP_Element_Grabber() Function)\n        -must be the dataframe representing EARLIER data\n\n    df_after : pandas.DataFrame, required (output of NSSP_Element_Grabber() Function)\n        -must be the dataframe representing LATER data\n\n    str_date_list:  list of strings, required\n        -best form example: ['Feb 1 2020','Aug 31 2020']\n\n    *priority: str, optional (default = 'both combined')\n        -describes output visualization.  Valid options include 'both_combined','both_individuals','1','2'\n            both_combined writes all NSSP Priority 1&2 to one x axis\n            both_individual writes two separate figures for Priority 1 and 2 respectively\n\n    *grid: bool, optional (default = True)\n\t-describes output visualization.  Draws grid lines over all heatmap cells.\n\t    NOTE: cyan line divides priority 1 and priority 2 elements regardless of argument.\n\t\t  only relevant for priority->both combined            \n\n    *outfile: bool, optional (default = False)\n        -writes .html file to folder '../figures/'\n        -if str_date_list=['Feb 1 2020','Aug 31 2020'] and priority='both combined',\n            outfile has name -> Feb12020_to_Aug312020_priority1and2.html\n\n    *show_plot: bool, optional (default = False)\n        - displays the figure\n\n    *Timed : bool, optional (default = True)\n        -gives completion time in seconds\n\n    Returns\n    -------\n    nothing\n\n\n## Code Examples \n\n\n```\n# import the library and all its functions\nfrom HL7reporting import *\n\n# Read in the two datasets (already ran NSSP_Element_Grabber on)\nbefore = pd.read_csv('path_to_parsed_df_file1',engine='python')\nafter = pd.read_csv('path_to_parsed_df_file2',engine='python')\n\nVisualization_interactive(before,after,['Oct 11 2020','Oct 28 2020'],priority='both_combined',outfile=True,show_plot=False)\n\n```\n\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/HL7reporting/raw/master/pics/Visualization_interactive.png\" alt=\"Visualization_interactive_Visual\">\n\n*note that this image above is simply an image.  In reality the output is an interactive HTML file with hover_over capabilities\n*also note that the y axis is marked over and typically contains facility names.\n<br>\n</details>\n\n\n\n\n\n\n\n\n<details>\n<summary>issues_in_messages</summary>\n\n## Documentation    \n\n    issues_in_messages(df, Timed=True, combine_issues_on_message = False, split_issue_column = False):\n\n    Description\n\t----------\n    Processes dataframe outputted by NSSP_Element_Grabber() function.\n    Outputs dataframe describing message errors.  See optional args for output dataframe customation.\n\n    Parameters\n    ----------\n\n    df - required, pandas Dataframe, output from NSSP_Element_Grabber() function\n    *Timed - optional, bool, default is True.  Outputs runtime in seconds upon completion.\n    *combine_issues_on_message - optional, bool, default is False.  SEE (2) below\n    *split_issue_column - optional, bool, default is False.  SEE (3) below\n\n\n    NOTE:  only one of 'combine_issues_on_message' or 'split_issue_column' can be True\n\n    Returns\n    ----------------------------------------------------------------------------\n    Pandas dataframe. Columns include:\n\n    (1)\n    DEFAULT: WHEN split_issue_colum = False , combine_issue_on_message = False\n\n    Group_ID -> string concatenation of FACILITY_NAME|PATIENT_MRN|PATIENT_VISIT_NUMBER\n    MESSAGE -> full original message\n    Issue -> string concatenation of 'error_type|element_name|priority|description|valid_options|message_value|suggestion|comment'\n\n    ------\n\n    (2)\n    WHEN combine_issue_on_message = True, split_issue_colum = False \n\n    Group_ID -> string concatenation of FACILITY_NAME|PATIENT_MRN|PATIENT_VISIT_NUMBER\n    MESSAGE -> full original message\n    Issue -> string concatenation of 'error_type|element_name|priority|description|valid_options|message_value|suggestion|comment'\n             MULTIPLE string concatenations per cell, separated by newline '\\n'\n\n    Num_Missings -> number of issues that had a type of 'Missing or Null'\n    Num_Invalids -> number of issues that had a type of 'Invalid'\n    Num_Issues_Total -> number of total issues\n\n    ------\n\n    (3)\n    WHEN combine_issue_on_message = False , split_issue_colum = True\n\n    Group_ID -> string concatenation of FACILITY_NAME|PATIENT_MRN|PATIENT_VISIT_NUMBER\n    MESSAGE -> full original message\n    error_type -> 'Missing or Null' or 'Invalid'\n    element_name -> NSSP Priority Element name with issue\n    priority -> NSSP Priority '1' or '2'\n    description -> Describes location/parameters of element in HL7 message\n    valid_options -> IF element can be checked for validity, describes a valid entry.\n    message_value -> IF element was determined as invalid, give the invalid element value.\n    suggestion -> IF element was determined as invalid, give an educated guess as to what they meant.\n    comment -> IF element was determined as invalid, give feedback/advice on the message error.\n\n## Code Examples \n\nVersion 1:\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n\n# Find issues in messages\nsplit_by_issue = issues_in_messages(parsed_df, split_issue_column=True)\n\n# Get the facility name from the grouper ID\nsplit_by_issue['Fac_Name'] = split_by_issue.Grouper_ID.str.split('\\|').str[0]\n\n# First sort the values so that all facility rows are next to one another, then by message similarly\nsplit_by_issue = split_by_issue.sort_values(['Fac_Name','Grouper_ID','MESSAGE','Priority'])\n\n# Set the indices so that when we export to excel, the index cells will merge making it look pretty\nsplit_by_issue = split_by_issue.set_index(['Fac_Name','Grouper_ID','MESSAGE','Issue_Type'])\n\n# Send it to an excel file!\nsplit_by_issue.to_excel('split_by_issue_version1.xlsx')\n```\nVersion 2:\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n\n# Find issues in messages\ncomb_issues = issues_in_messages(parsed_df, combine_issues_on_message=True)\n\n# Get the facility name\ncomb_issues['Fac_Name'] = comb_issues.Grouper_ID.str.split('\\|').str[0]\n\n# Make first issue start with bullet point\ncomb_issues['Issue'] = comb_issues['Issue'].str.replace('^(.*)','• \\g<1>',regex=True)\n\n# Make each new line have a bullet point.\ncomb_issues['Issue'] = comb_issues['Issue'].str.replace('\\n','\\n• ')\n\n# First sort the values so that all facility rows are next to one another, then by message similarly\ncomb_issues = comb_issues.sort_values(['Fac_Name','Grouper_ID','MESSAGE'])\n\n# Set the indices so that when we export to excel, the index cells will merge making it look pretty\ncomb_issues = comb_issues.set_index(['Fac_Name','Grouper_ID','MESSAGE','Issue'])\n\n# Send it to an excel file!\ncomb_issues.to_excel('comb_issue_version2.xlsx')\n```\n\n## Visualization of Output\n\nVersion 1\n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/issues_in_messages_v1.png\" alt=\"issues_in_messages_Visual1\">\n<br>\n\nVersion 2 \n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/issues_in_messages_v2.png\" alt=\"issues_in_messages_Visual2\">\n<br>\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n<details>\n<summary>validity_check</summary>\n\n## Documentation    \n\n    validity_check(df, Timed=True)\n\n    Checks to see which elements in a dataframe's specific NSSP priority columns meet NSSP validity standards.\n    Returns a True/False dataframe with FACILITY_NAME,PATIENT_MRN,PATIENT_VISIT_NUMBER as only string-type columns\n\n    Parameters\n    ----------\n\n    df - required, pandas Dataframe, output from NSSP_Element_Grabber() function    \n    Timed - optional, boolean (True/False), default is True.  Returns time in seconds of completion.\n\n    Returns\n    --------\n    validity_report - True/False dataframe with FACILITY_NAME,PATIENT_MRN,PATIENT_VISIT_NUMBER as only string-type columns\n\n\n## Code Examples \n\n\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n\n# take the priority element columns from our output dataframe\n#### remove two columns that are processed backend (always NaN)\nonly_priority1_df = priority_cols(parsed_df,priority='1',drop_cols=['Site_ID','C_Facility_ID'])\n\n# run the validity check function on it\nval = validity_check(only_priority1_df)\n\n```\n\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/validity_check.png\" alt=\"validity_check_Visual\">\n\n*note the lower number of columns.  Not all columns able to be assessed for validity\n<br>\n</details>\n\n\n\n\n\n\n<details>\n<summary>validity_and_completeness_report</summary>\n\n## Documentation    \n\n    validity_and_completeness_report(df,description='long',visit_count=False,outfile=None, Timed=True)\n\n    dataframe1 -> Returns completenesss report by hospital with facility,element,percentmissing,percentinvalid,description\n    dataframe2 -> Determines the incompleteness (0), invalid (1), or valid and complete (2) for every element in all messages\n\n\n    Parameters\n    ----------\n    df: pandas DataFrame, required (output from NSSP_Element_Grabber() funciton)\n\n    description:  str, optional.  (Either 'long' or 'short')\n        if 'short', description of location is shorter and less descriptive\n        elif 'long', description is sentence structured and descriptive\n\n    visit_count:  bool, optional\n        if True, add the number of visits to dataframe2\n\n    outfile: string, optional\n        if True, send excel file (in current directory).  Name defined by outfile\n        *DO NOT INCLUDE .xlsx or full path\n\n\n    Returns\n    -------\n    df1\n        Dataframe showing issues in messages for each hospitals.  Report structure\n\n    df2\n        Dataframe assessing all messages for incomlete,invalid,valid elements represented as 0s, 1s, and 2s\n\n\n## Code Examples \n\n\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n\n# run the validity function on it\nval = validity_and_completeness_report(parsed_df, description='long')[0] # don't care about array of 0, 1, 2 for now\n\n\n```\n\n## Visualization of Output[0]\n\n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/validity_and_completeness_report.png\" alt=\"validity_and_completeness_report_Visual\">\n\n<br>\n</details>\n\n\n\n\n<details>\n<summary>heatmap_compNvalid</summary>\n\n## Documentation    \n\n    heatmap_compNvalid(df, outfilename=None, daterange=None, hospitals='IHA')\n\n    Create 2 heatmap subplots of elements that:\n        (left) can be assessed for completion\n        (right) can be assessed for validity\n\n    Input\n    -----\n    df - pd.Dataframe, required\n        Output from NSSP_Element_Grabber() function\n\n    outfilename - str, optional\n        Specify the name of HTML file to be written to ../figures/   \n        *** DO NOT INCLUDE .html ***\n\n    daterange - str, optional\n        Specify the range that the assessment is being taken over.\n        Example:  'Sep 7, 2020 - Sep 14, 2020'\n\n    hospitals - str, optional\n        Specify the name of the hospitals we are working with\n\n\n    Output\n    ------\n    completion_df - the dataframe that makes up the completion heatmap\n    validity_df - the dataframe that makes up the validity heatmap\n\n\n## Code Examples \n\n\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n\nheatmap_compNvalid(parsed_df, outfilename='heatmap visualization completion and validity')\n\n```\n\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/heatmap_compNvalid.png\" alt=\"heatmap_compNvalid_Visual\">\n\n*note that typically the y-axis will show facility names.  Hidden here for confidentiality.\n<br>\n</details>\n\n\n\n<details>\n<summary>Visualize_Facility_DQ</summary>\n\n## Documentation    \n\n    Visualize_Facility_DQ(df, fac_name, hide_yticks = False, Timed = True)\n\n\n    Returns Visualization of data quality in the form of a heatmap.\n    Rows are all individual visits for the inputted facility.\n    Columns are NSSP Priority elements that can be checked for validity.\n    Color shows valid entries (green), invalid entries (yellow), and absent entries (red)\n\n    Parameters\n    ----------\n\n    df - required, pandas Dataframe, output from NSSP_Element_Grabber() function\n    fac_name - required, str, valid name of facility.\n        if unsure of valid entry options, use the following code for options:\n        df['FACILITY_NAME'].unique()   # may need to change for your df name\n\n    Returns\n    --------\n    out[0] = Pandas dataframe used to create visualization.  2D composed of 0s (red), 1s (yellow), 2s (green)\n    out[1] = Pandas dataframe of data behind visit.  Multiple HL7 messages composing 1 visit concatenated by '~' character\n\n    Output\n    -------\n    sns.heatmap visualization\n\n## Code Examples \n\n\n```\n# import the library and all its functions\nfrom ADTdq import *\n\n# read in data\ndata1 = pd.read_csv('somefile.csv',engine='python')\n\n# process through NSSP_Element_Grabber() function\nparsed_df = NSSP_Element_Grabber(data1,Timed=False,\n                                    Priority_only=True,outfile='None')\n\n# produce the visualization\nvisual = Visualize_Facility_DQ(parsed_df, 'hospital_name')\n```\n\n## Visualization of Output\n\n<img src=\"https://github.com/pjgibson25/ADTdq/raw/master/pics/Visualize_Facility_DQ.png\" alt=\"Visualize_Facility_DQ_Visual\">\n\n*note that this only produces the visualization for 1 facility\n\n<br>\n</details>\n\n\n\n\n\n\n\n## FAQs\n-----------------------\n\n#### Where can I access function documentation outside of this location?\n\nWithin a Jupyter Notebook document, you can type:\n\n``FunctionNameHere?`` \n\ninto a jupyter notebook cell and then run it with `SHIFT` + `ENTER`.\nThe output will show you all the function documentation including a brief description and argument descriptions.\n\n\n#### Why Python?\n\nI work entirely in Python.\nIn the field of public health informatics, SASS is the most popular programming language, perhaps followed by R (at least in syndromic surveillance).\nI have created this package to run as intuitively as possible with a minimal amount of python knowledge.\nI could be wrong, but I believe that one day, public health informatics may become Python-dominant, so this package could help as an introduction to the environment to those unfamiliar.\n\n#### For plottting, what if I want to make small changes such as color changes, formatting, or simple customizing?\n\nRight now I don't have things set up for that sort of work.  My best solution would be for you to dive into my Github reposiory python file linked [here](https://github.com/pjgibson25/ADTdq/blob/master/ADTdq/__init__.py).  You can copy the defined functions into your document and make minor adjustments as you see fit.\n\n\n#### Why isn't one of my functions working?\n\nThe most common problem in this situation is a incorrectly formatted input to a function.  Most of DQ functions stems from an intial NSSP_Element_Grabber() run.  The input to this function should contain the following columns:\n\n`['MESSAGE','FACILITY_NAME'] `\n\nNote that you can pass the argument No_FAC, No_VisNum, or No_MRN.  When these optional arguments are passed, the resulting output could return erros when used in conjunction with other DQ functions.\nThis is because many of my functions collapse messages into individual visits.  The collapsing process requires Facility, MRN, and Visit Number. Missing elements in these fields throws a wrench into the process.\n\n\n#### My version is out of date (there has been a more recent release).  How do I update?\n\nType the following into your command line / terminal\n\n    pip install ADTdq --update\n\n\n#### My question isn't listed above...what should I do?\n\nfeel free to contact me at:\n\nPeter.Gibson@doh.wa.gov\n\nwith any additional questions.\n\n## The Author\nPJ Gibson - Data Analyst for Washington State Department of Health\n\n## Special Thanks\n* Harold Gil - Director of Public Health Informatics for Indiana State Department of Health.\nHarold assigned me this project, gave me relevant supporting documentation, and helped me along the way with miscellaneous troubleshooting.\n* Matthew Simmons - Data Analyst for Indiana State Department of Health.\nMatthew helped walk me through some troubleshooting and was a supportive figure throughout the project.\n* Ben Sewell, Shuennhau Chang, Logan Downing, Ryan Hastings, Nicholas Hinkley, Rachel Winchell.\nMembers of my informatics team that also supported me indirectly!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pjgibson25/ADTdq",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ADTdq",
    "package_url": "https://pypi.org/project/ADTdq/",
    "platform": "",
    "project_url": "https://pypi.org/project/ADTdq/",
    "project_urls": {
      "Homepage": "https://github.com/pjgibson25/ADTdq"
    },
    "release_url": "https://pypi.org/project/ADTdq/1.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package designed to improve HL7 ADT Data Quality reporting in the field of public health informatics.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9365348,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19737ad174753a42cea2e8f707f06441d0496a4a40112154dbc7854336fcd847",
          "md5": "84b5f5d328821b1b5b1679ac813a7dd6",
          "sha256": "7da169651b0a7331e2e69c36fde8345348ba5a00bb6152922a34d284419c6898"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84b5f5d328821b1b5b1679ac813a7dd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 67231,
        "upload_time": "2020-11-13T19:16:53",
        "upload_time_iso_8601": "2020-11-13T19:16:53.639355Z",
        "url": "https://files.pythonhosted.org/packages/19/73/7ad174753a42cea2e8f707f06441d0496a4a40112154dbc7854336fcd847/ADTdq-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f3ee1b0e477bfa51874dd1490b71fef59a1ccd2237b452662dc5e3daaa8f67a",
          "md5": "132ab77b1a936a41d338a86c0a6743ee",
          "sha256": "dd484efad148c22e8ac22521e3802395b971a33c42bedec1191ed8dd42169d94"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "132ab77b1a936a41d338a86c0a6743ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 70695,
        "upload_time": "2020-11-13T19:16:54",
        "upload_time_iso_8601": "2020-11-13T19:16:54.904323Z",
        "url": "https://files.pythonhosted.org/packages/6f/3e/e1b0e477bfa51874dd1490b71fef59a1ccd2237b452662dc5e3daaa8f67a/ADTdq-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e8a788b0180b50aa3c56e720244ad6ee3fbe4c2821556e8ea38066a412885a",
          "md5": "e073ca3aceebb1904454cbf9e1828634",
          "sha256": "2ea7c758db9a486604f6c997e185f1bbce483bf66e0dbe050d703422edb3d4f6"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e073ca3aceebb1904454cbf9e1828634",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 83524,
        "upload_time": "2020-11-13T19:31:54",
        "upload_time_iso_8601": "2020-11-13T19:31:54.163415Z",
        "url": "https://files.pythonhosted.org/packages/95/e8/a788b0180b50aa3c56e720244ad6ee3fbe4c2821556e8ea38066a412885a/ADTdq-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8f89654d5850e4debd05742914d44631df21f01989331a8f422853503e306de",
          "md5": "ba61c82124c91f1ef5b0c5f3497397e1",
          "sha256": "7822e07b20d42e02402458be6a3980a99ae5728df3353701e9a29b95e686afcc"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ba61c82124c91f1ef5b0c5f3497397e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 83978,
        "upload_time": "2020-11-13T19:31:55",
        "upload_time_iso_8601": "2020-11-13T19:31:55.234661Z",
        "url": "https://files.pythonhosted.org/packages/b8/f8/9654d5850e4debd05742914d44631df21f01989331a8f422853503e306de/ADTdq-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "032844b4fb47708441a6880068bdd7b07975c5047198865a5e84a0d1b506fcfb",
          "md5": "2a86d7d679cbbb920c514a9993318595",
          "sha256": "f9c9e8672632fa73755999ba10feb06321d86edbef8c9a46aa5b2a4b8aae56a2"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a86d7d679cbbb920c514a9993318595",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 83524,
        "upload_time": "2020-11-13T19:38:47",
        "upload_time_iso_8601": "2020-11-13T19:38:47.852704Z",
        "url": "https://files.pythonhosted.org/packages/03/28/44b4fb47708441a6880068bdd7b07975c5047198865a5e84a0d1b506fcfb/ADTdq-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e0c8de04ec38f378ad989b5968ca69e7ec7de86d25bc503e468cc347089571e",
          "md5": "5fcbc2358d1742254b9938e74dd5e311",
          "sha256": "2a1d323ef898a81a86a8c16d2007188eb62dcb1a75c124ea0824b44cbabc1732"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5fcbc2358d1742254b9938e74dd5e311",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 83961,
        "upload_time": "2020-11-13T19:38:48",
        "upload_time_iso_8601": "2020-11-13T19:38:48.919743Z",
        "url": "https://files.pythonhosted.org/packages/0e/0c/8de04ec38f378ad989b5968ca69e7ec7de86d25bc503e468cc347089571e/ADTdq-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d77ad3a8684e15c716a50425afb0a6139c13e1f788fd052b640ca29143e29ea",
          "md5": "99b8135a28747ecb1bdf3724641d0572",
          "sha256": "5668cb32c274de9f3664ef70a832f4ae9437d60b952f3963960b826ba639826e"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99b8135a28747ecb1bdf3724641d0572",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83518,
        "upload_time": "2020-11-13T20:40:57",
        "upload_time_iso_8601": "2020-11-13T20:40:57.375895Z",
        "url": "https://files.pythonhosted.org/packages/4d/77/ad3a8684e15c716a50425afb0a6139c13e1f788fd052b640ca29143e29ea/ADTdq-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "228e105600e8e56651340e09ac4566634242512b0d66ca76888229e70d23faa4",
          "md5": "1c9a1b37f285689ee3946c5cdd4ba046",
          "sha256": "3a3ef8d891602ab9348b7c8aae2ead53d93296ac3f5bb869e9f5f87117b91245"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1c9a1b37f285689ee3946c5cdd4ba046",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70693,
        "upload_time": "2020-11-13T20:40:58",
        "upload_time_iso_8601": "2020-11-13T20:40:58.327412Z",
        "url": "https://files.pythonhosted.org/packages/22/8e/105600e8e56651340e09ac4566634242512b0d66ca76888229e70d23faa4/ADTdq-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "732221f5767461d48b310c5b434fd7c7c3f0e92513731cf2c3184b7434e3212f",
          "md5": "2807f790a6d6d5bf7a6e10fccff6bda7",
          "sha256": "03e1692ce64506655bb0b90a0e095a2dd283965491245310dc9ae1c62b217983"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2807f790a6d6d5bf7a6e10fccff6bda7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83524,
        "upload_time": "2020-11-13T21:47:44",
        "upload_time_iso_8601": "2020-11-13T21:47:44.565906Z",
        "url": "https://files.pythonhosted.org/packages/73/22/21f5767461d48b310c5b434fd7c7c3f0e92513731cf2c3184b7434e3212f/ADTdq-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c40062517e84278e323ec34808bd33bfe87506cdbd299714fb586296b814cad",
          "md5": "e2d97587ee7992629a2e4a1d76eae16b",
          "sha256": "750397b7588694db463c864eb273693cd37f56a87e3d1d175ee6721541f2dbd6"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e2d97587ee7992629a2e4a1d76eae16b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 70701,
        "upload_time": "2020-11-13T21:47:45",
        "upload_time_iso_8601": "2020-11-13T21:47:45.663811Z",
        "url": "https://files.pythonhosted.org/packages/3c/40/062517e84278e323ec34808bd33bfe87506cdbd299714fb586296b814cad/ADTdq-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d4b8f516235cf83d2edb5d68f09660c9cfce6706123b635ef0e9a65048c654f",
          "md5": "0fff9faa156fed1fbd18545053e45852",
          "sha256": "b800caa6c9694e9ac2bf16828d22aecf611a41b34e59d038d0de0eca87624106"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fff9faa156fed1fbd18545053e45852",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 83767,
        "upload_time": "2020-11-13T22:20:25",
        "upload_time_iso_8601": "2020-11-13T22:20:25.577349Z",
        "url": "https://files.pythonhosted.org/packages/0d/4b/8f516235cf83d2edb5d68f09660c9cfce6706123b635ef0e9a65048c654f/ADTdq-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "874fb214fd27a0612338cdf0196c894606200f19adc4ea19920b2da696ce247c",
          "md5": "7903023232ee4e35eba4dc730faf4455",
          "sha256": "5dc095fe700db9b3dd874c2af29ea3d78bca9ea08bf482a3fbf23e11e8747f64"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7903023232ee4e35eba4dc730faf4455",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 71185,
        "upload_time": "2020-11-13T22:20:26",
        "upload_time_iso_8601": "2020-11-13T22:20:26.654885Z",
        "url": "https://files.pythonhosted.org/packages/87/4f/b214fd27a0612338cdf0196c894606200f19adc4ea19920b2da696ce247c/ADTdq-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcafcfdb656e96247e4338fb646ecbf24d03dac53c02a3f149a6176797dedd80",
          "md5": "9c5bb23495cbae265755d3d59d91c973",
          "sha256": "2b0d9ebf9b95fade46ea7ef8224a989113058a387a93073b807727c47a5a0480"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c5bb23495cbae265755d3d59d91c973",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84034,
        "upload_time": "2020-11-16T21:35:59",
        "upload_time_iso_8601": "2020-11-16T21:35:59.372786Z",
        "url": "https://files.pythonhosted.org/packages/fc/af/cfdb656e96247e4338fb646ecbf24d03dac53c02a3f149a6176797dedd80/ADTdq-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e694bb862d23c18640f4efde0cd323061690d155d4f3896935f85c153b26b469",
          "md5": "95b125d01ef99822a4ea772d9393835a",
          "sha256": "a3f043cf9c3fefe338550eb8caa2bb65bf87410e9b07e56d97bf79151c00ca49"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "95b125d01ef99822a4ea772d9393835a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72489,
        "upload_time": "2020-11-16T21:36:00",
        "upload_time_iso_8601": "2020-11-16T21:36:00.586545Z",
        "url": "https://files.pythonhosted.org/packages/e6/94/bb862d23c18640f4efde0cd323061690d155d4f3896935f85c153b26b469/ADTdq-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b38a1e1b17a881ce2033c5628d1227ccf334896219c55d59e0687a047bb32cb9",
          "md5": "71fe3d85a6182a8a735aa85e4a9297b3",
          "sha256": "6fda0164b59623d524ba4a8a1fe9fd01dbed9626531ee40ce1d7a5c490281f56"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71fe3d85a6182a8a735aa85e4a9297b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84143,
        "upload_time": "2020-11-16T22:57:50",
        "upload_time_iso_8601": "2020-11-16T22:57:50.897048Z",
        "url": "https://files.pythonhosted.org/packages/b3/8a/1e1b17a881ce2033c5628d1227ccf334896219c55d59e0687a047bb32cb9/ADTdq-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64074aa995fe5a3ba767bab29e5a386dab486893e2c8eba3fea3fe5bae49538c",
          "md5": "391c386ada528e64be772e197ab8518d",
          "sha256": "7df388f7dbd6a181919d3d8c81e1cff1e0fa31dcea99c6b533ce996f23392c64"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "391c386ada528e64be772e197ab8518d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72899,
        "upload_time": "2020-11-16T22:57:51",
        "upload_time_iso_8601": "2020-11-16T22:57:51.940362Z",
        "url": "https://files.pythonhosted.org/packages/64/07/4aa995fe5a3ba767bab29e5a386dab486893e2c8eba3fea3fe5bae49538c/ADTdq-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8412f8fc6b5141216edac096d8e1d6c14dd3d7323f1eab18ea44367b596911fa",
          "md5": "9e6b2508f3928c11673eb628e8bdeb20",
          "sha256": "e952f41f67a5b8776823c52a69c08f3185d8401c5630cf679411c348604e0660"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e6b2508f3928c11673eb628e8bdeb20",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84139,
        "upload_time": "2020-11-16T23:22:30",
        "upload_time_iso_8601": "2020-11-16T23:22:30.101044Z",
        "url": "https://files.pythonhosted.org/packages/84/12/f8fc6b5141216edac096d8e1d6c14dd3d7323f1eab18ea44367b596911fa/ADTdq-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "265c885a255ae01607744162d771f8c1cdb194b8350e3be60e5dbfac81fc969f",
          "md5": "882f900ec2f11b580d6c2568fdd49468",
          "sha256": "865ad1f262e82b2cf56f93e9fc4837139aa53c15f024a459e4e148a8227885c0"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "882f900ec2f11b580d6c2568fdd49468",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72898,
        "upload_time": "2020-11-16T23:22:31",
        "upload_time_iso_8601": "2020-11-16T23:22:31.204557Z",
        "url": "https://files.pythonhosted.org/packages/26/5c/885a255ae01607744162d771f8c1cdb194b8350e3be60e5dbfac81fc969f/ADTdq-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e353cf7a6a9a3b713abbda19cc608f4c14f754cac86f6b76f23e9574dfb9e9fa",
          "md5": "df5aaabedd2f17cbffabbcc661f00977",
          "sha256": "d92c075191f7c88038d5600c2695cd1d548ebd1e91c93f2a56d079db916d9d9a"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df5aaabedd2f17cbffabbcc661f00977",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84144,
        "upload_time": "2020-11-19T17:03:34",
        "upload_time_iso_8601": "2020-11-19T17:03:34.546860Z",
        "url": "https://files.pythonhosted.org/packages/e3/53/cf7a6a9a3b713abbda19cc608f4c14f754cac86f6b76f23e9574dfb9e9fa/ADTdq-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e6d15a8cd57db6fecb97c6617254035fd5416e080124f13d4558f7f6f0da5a5",
          "md5": "aa95383243de27584d8f1ff3a9840469",
          "sha256": "338518f3fa5c54391751811f04119a2bab68637d9cf5f78b03efa73713e522cc"
        },
        "downloads": -1,
        "filename": "ADTdq-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "aa95383243de27584d8f1ff3a9840469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72903,
        "upload_time": "2020-11-19T17:03:36",
        "upload_time_iso_8601": "2020-11-19T17:03:36.014001Z",
        "url": "https://files.pythonhosted.org/packages/6e/6d/15a8cd57db6fecb97c6617254035fd5416e080124f13d4558f7f6f0da5a5/ADTdq-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e831745d5f98022c390e43212660583ad970ef973cd5d95970264da26a59104",
          "md5": "e58739bda57bc877cca086c4f2bf6dd9",
          "sha256": "bfcb879ce5231a07cbef3518cdd3b3ce7ff8f547338e2f500efe03f6039ccff8"
        },
        "downloads": -1,
        "filename": "ADTdq-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e58739bda57bc877cca086c4f2bf6dd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 84149,
        "upload_time": "2020-11-20T19:18:39",
        "upload_time_iso_8601": "2020-11-20T19:18:39.715819Z",
        "url": "https://files.pythonhosted.org/packages/1e/83/1745d5f98022c390e43212660583ad970ef973cd5d95970264da26a59104/ADTdq-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e74356c817b7a9533f43f2359a6cd355575e391d4fcaebc7b32cee32b6474060",
          "md5": "c004b0c08012e131a3ec59d638c084ac",
          "sha256": "ee9a146b23126d1b650786fb26d95a47bf5cb703dcbe7dd0546706eddf4ed63d"
        },
        "downloads": -1,
        "filename": "ADTdq-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c004b0c08012e131a3ec59d638c084ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72909,
        "upload_time": "2020-11-20T19:18:40",
        "upload_time_iso_8601": "2020-11-20T19:18:40.749551Z",
        "url": "https://files.pythonhosted.org/packages/e7/43/56c817b7a9533f43f2359a6cd355575e391d4fcaebc7b32cee32b6474060/ADTdq-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26c8d66267ab380259038b95c7534a55efb7f3255a44dce8af7afc20346660e3",
          "md5": "5e346329925fe99427cced193f0784ac",
          "sha256": "57b5fbdbfd0828a07d207256e4d90c0627ff1eb865bb03f5bd7a5721c36c5ce6"
        },
        "downloads": -1,
        "filename": "ADTdq-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e346329925fe99427cced193f0784ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 85114,
        "upload_time": "2020-12-29T16:56:49",
        "upload_time_iso_8601": "2020-12-29T16:56:49.376931Z",
        "url": "https://files.pythonhosted.org/packages/26/c8/d66267ab380259038b95c7534a55efb7f3255a44dce8af7afc20346660e3/ADTdq-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d927ea39dd5178a2538907fd4f2841614000b0b81a309d768e878d602a729bfa",
          "md5": "45b52aecca362ff0bdfea6f4428a47fe",
          "sha256": "c703bac70667ce174b7f3cd9952a9a09ec610718dd08d9135a81a5fbcb509872"
        },
        "downloads": -1,
        "filename": "ADTdq-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "45b52aecca362ff0bdfea6f4428a47fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 73714,
        "upload_time": "2020-12-29T16:56:50",
        "upload_time_iso_8601": "2020-12-29T16:56:50.959307Z",
        "url": "https://files.pythonhosted.org/packages/d9/27/ea39dd5178a2538907fd4f2841614000b0b81a309d768e878d602a729bfa/ADTdq-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5d5fcd02d92ad4302af39684d14c0b5a622fd47feb57cb44d09979e156b814e",
          "md5": "414d54b570a7cb1a6707b56c4942c64f",
          "sha256": "efb41e6fa585371f4ffb27ac7ebf1df2895d80331d244faade7563c07106d798"
        },
        "downloads": -1,
        "filename": "ADTdq-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "414d54b570a7cb1a6707b56c4942c64f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 85123,
        "upload_time": "2021-02-09T17:34:14",
        "upload_time_iso_8601": "2021-02-09T17:34:14.051152Z",
        "url": "https://files.pythonhosted.org/packages/f5/d5/fcd02d92ad4302af39684d14c0b5a622fd47feb57cb44d09979e156b814e/ADTdq-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d3f8d983ffbd0ce0b8c5759636eb81a7d3e067f3d9988cb5089e7ae9ea9e6be",
          "md5": "939cdc4313a21d99eab42185c959151a",
          "sha256": "9cfbf843d0f14f58d1213cc90b759c29c2ce296530880fd21a206ee0ffcf1925"
        },
        "downloads": -1,
        "filename": "ADTdq-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "939cdc4313a21d99eab42185c959151a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 71899,
        "upload_time": "2021-02-09T17:34:15",
        "upload_time_iso_8601": "2021-02-09T17:34:15.814149Z",
        "url": "https://files.pythonhosted.org/packages/5d/3f/8d983ffbd0ce0b8c5759636eb81a7d3e067f3d9988cb5089e7ae9ea9e6be/ADTdq-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5d5fcd02d92ad4302af39684d14c0b5a622fd47feb57cb44d09979e156b814e",
        "md5": "414d54b570a7cb1a6707b56c4942c64f",
        "sha256": "efb41e6fa585371f4ffb27ac7ebf1df2895d80331d244faade7563c07106d798"
      },
      "downloads": -1,
      "filename": "ADTdq-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "414d54b570a7cb1a6707b56c4942c64f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 85123,
      "upload_time": "2021-02-09T17:34:14",
      "upload_time_iso_8601": "2021-02-09T17:34:14.051152Z",
      "url": "https://files.pythonhosted.org/packages/f5/d5/fcd02d92ad4302af39684d14c0b5a622fd47feb57cb44d09979e156b814e/ADTdq-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d3f8d983ffbd0ce0b8c5759636eb81a7d3e067f3d9988cb5089e7ae9ea9e6be",
        "md5": "939cdc4313a21d99eab42185c959151a",
        "sha256": "9cfbf843d0f14f58d1213cc90b759c29c2ce296530880fd21a206ee0ffcf1925"
      },
      "downloads": -1,
      "filename": "ADTdq-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "939cdc4313a21d99eab42185c959151a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 71899,
      "upload_time": "2021-02-09T17:34:15",
      "upload_time_iso_8601": "2021-02-09T17:34:15.814149Z",
      "url": "https://files.pythonhosted.org/packages/5d/3f/8d983ffbd0ce0b8c5759636eb81a7d3e067f3d9988cb5089e7ae9ea9e6be/ADTdq-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}