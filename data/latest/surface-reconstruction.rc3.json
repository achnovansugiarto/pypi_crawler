{
  "info": {
    "author": "Felipe Michel Ferreira",
    "author_email": "mfelipeof@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: GPU",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Topic :: Multimedia :: Graphics :: 3D Rendering"
    ],
    "description": "# Poisson Surface Reconstruction: 3D point cloud\n\nImport a point cloud file and perform poisson 3D surface reconstruction algorithm, \nintegrated with third-party libraries like [open3d](http://www.open3d.org/docs/release/tutorial/geometry/surface_reconstruction.html?highlight=surface%20reconstruction#Poisson-surface-reconstruction) and [pymeshlab](https://github.com/cnr-isti-vclab/PyMeshLab)\n\n\n## Dependencies\n\n- [python 3](https://www.python.org/downloads/) <= *3.8.x*\n  > **Recommended:** Use [pyenv](https://github.com/pyenv/pyenv) to install and manage Python versions\n- [numpy](https://numpy.org) >= *1.20*\n- [open3d](http://www.open3d.org) >= *0.12*\n- [pymeshlab](https://github.com/cnr-isti-vclab/PyMeshLab) >= *0.2*\n\n\n## Development dependencies\n\n- [setuptools](https://pypi.org/project/setuptools): For installation via `setup.py`\n- [setuptools-scm](https://pypi.org/project/setuptools-scm): To generate version numbers from **git tags**\n- [wheel](https://pypi.org/project/wheel/): Built packages `.whl` to install packages with PIP \n- [twine](https://pypi.org/project/twine): Publish packages to https://pypi.org\n- [tqdm](https://pypi.org/project/tqdm): CLI progressbar when publish a package\n\n## Development guide\n\nFor local installation and develop new features for this package, follow the steps below:\n\n\n### Windows\n\n> Run unassigned powershell scripts on Windows requires change your execution policy with `Set-ExecutionPolicy` to `AllSigned`, or `Bypass -Scope Process`. \n\n>See: [Execution Policies](https://docs.microsoft.com/pt-br/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.1)\n\nRun the script `setup.ps1` with [powershell](https://docs.microsoft.com/pt-pt/powershell/scripting/overview?view=powershell-7.1)\n\n```powershell\n# Default virtualenv folder is \"venv\"\n.\\setup.ps1\n\n# Optionally, pass a custom virtualenv folder\n.\\setup.ps1 -VirtualEnvFolder myenv\n```\n\nIf you wish run just an specific function from `setup.ps1` (e.g. `Install-Python`), execute:\n\n```powershell\npowershell -command \"& { . .\\setup.ps1 'venv' -Execute 0; Install-Python }\"\n```\n\n### Unix systems (Comming soon)\n\n```bash\n# Default virtualenv folder is \"venv\"\n./setup.sh\n\n# Optionally, pass a custom virtual enviroment folder\n./setup.sh --virtual-env-folder myenv\n```\n\nFor more detailed installation, see the Wiki pages in: [Installation Development](https://github.com/mfdeveloper/surface_reconstruction_python/wiki/Installation-Details)\n\n## Install this package\n\nQuick way:\n\n```bash\npip install surface_reconstruction\n```\n\nOr clone this repository and build the `.whl` file from the project root:\n\n```bash\ncd [your-project-root]\n\n# Build the .whl package file\npython -m build --sdist --wheel .\n\n# Install locally from the .whl file\n# Where: x.x.x is the generated version from git tag\npip install dist/surface_reconstruction-x.x.x-py3-none-any.whl\n```\n> For more detailed, see the Wiki pages in: [Generate package](https://github.com/mfdeveloper/surface_reconstruction_python/wiki/Generate-package)\n\n\n### Run the unit tests\n\n```bash\n# Run all tests of the module \"surface_reconstruction_test`\npython -m unittest tests/surface_reconstruction_test.py\n```\n\n## Usage\n\nImport a `.ply` file with point cloud vertices, and generate the mesh file\n\n```python\nfrom surface_reconstruction import SurfaceReconstruction\nimport os\n\n# Pass a method/library that contains a Poisson algorithm implementation\nsurface = SurfaceReconstruction(\n  method_type='open3d',\n  point_cloud_file=os.path.join('files', 'point_cloud.ply'),\n  output_file=os.path.join('files', 'terrain_mesh.ply')\n)\n\n# Call the method from the specific library, and export a mesh file\nsurface.poisson_mesh()\n```\n\nYou can pass custom filters/parameters for the specific library. This is important because \npoisson algorithm requires some pre-filters before to be applied (e.g **estimate normals** in the point cloud)\n\n```python\n# ...\nparameters = {\n  'estimate_normals': {\n    'fast_normal_computation': False,\n    'normals': (1, 3)\n  }\n}\n\n# Unpack the dictionary \"parameters\" as a **kwargs\nsurface.poisson_mesh(**{'filters': parameters})\n```\n> **PS:** See the unittests inside **[tests](./tests)** folder for more usage examples\n\n# Extending: Add new libraries\n\nIs possible create and register custom strategies to allow others libraries (`Python`, `C++` bindings...)\n\n```python\nfrom surface_reconstruction import SurfaceStrategy, SurfaceReconstruction \n\n# Create a class that inherit from \"SurfaceStrategy\"\nclass MyCustomSurface(SurfaceStrategy):\n\n      def __init__(self, my_custom_param: dict):\n        \"\"\"\n        Custom constructor with custom parameters\n        \"\"\"\n        super().__init__()\n\n      def load_file(self, file_path: str):\n        \"\"\"\n        Custom load point cloud file implementation here\n        \"\"\"\n        pass\n\n    def poisson_mesh(self, save_file=True, **params: {}):\n      \"\"\"\n      Generate the mesh file with faces/triangles here\n      \"\"\"\n      pass\n\n# Register your custom strategy here\nSurfaceReconstruction.register_type(MyCustomSurface)\n\n\n# Pass a method/library that contains a Poisson algorithm implementation\nsurface = SurfaceReconstruction(\n  method_type='mycustom', # Don't pass the \"surface\" suffix\n  my_custom_param={'extra_config': 'some_value'},\n)\n\n# Call the method from the specific library, and export a mesh file\nsurface.poisson_mesh()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mfdeveloper/surface_reconstruction_python",
    "keywords": "point-cloud,surface-reconstruction,3d-processor,3d-rendering,3D,poisson,open3d,meshlab",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "surface-reconstruction",
    "package_url": "https://pypi.org/project/surface-reconstruction/",
    "platform": "",
    "project_url": "https://pypi.org/project/surface-reconstruction/",
    "project_urls": {
      "Homepage": "https://github.com/mfdeveloper/surface_reconstruction_python"
    },
    "release_url": "https://pypi.org/project/surface-reconstruction/0.1.3/",
    "requires_dist": [
      "open3d (==0.12)",
      "pymeshlab (==0.2)",
      "numpy"
    ],
    "requires_python": ">=3.3",
    "summary": "Import a point cloud file and perform poisson 3D surface reconstruction algorithm, integrated with third-party libraries (e.g. open3d, pymeshlab...)",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9857823,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8843631c26507410dbd14e86b6cab26e01264808182ee25d3f13049129c37257",
          "md5": "c687793fe7c82a0242f0ac5abc80a269",
          "sha256": "7c071c9f96da0e76e2d81379f46327363f681454e8f8346d319bbd5a17d284c3"
        },
        "downloads": -1,
        "filename": "surface_reconstruction-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c687793fe7c82a0242f0ac5abc80a269",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 19586,
        "upload_time": "2021-03-11T20:00:11",
        "upload_time_iso_8601": "2021-03-11T20:00:11.135476Z",
        "url": "https://files.pythonhosted.org/packages/88/43/631c26507410dbd14e86b6cab26e01264808182ee25d3f13049129c37257/surface_reconstruction-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e261c2852fdea74cc31868f800edf8a9c680966bd33416a03f584a2ca716f78",
          "md5": "871058922ea173b0d49b86e94eace203",
          "sha256": "01385edec3317230b86c4e8b02f794185459ac6b30561d634462fc03410fa334"
        },
        "downloads": -1,
        "filename": "surface_reconstruction-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "871058922ea173b0d49b86e94eace203",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 19700,
        "upload_time": "2021-03-20T17:14:07",
        "upload_time_iso_8601": "2021-03-20T17:14:07.202899Z",
        "url": "https://files.pythonhosted.org/packages/9e/26/1c2852fdea74cc31868f800edf8a9c680966bd33416a03f584a2ca716f78/surface_reconstruction-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c908c6486597515e8090ddbe1225191f7e349ce0a5c9f30651c73c01b5d8b2d4",
          "md5": "5330ce843faf201381e31580d327143e",
          "sha256": "fa1665109f56b0fb9dda2afc52303140ba0d039f9429c3ef647954ec89c807b4"
        },
        "downloads": -1,
        "filename": "surface_reconstruction-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5330ce843faf201381e31580d327143e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 19810,
        "upload_time": "2021-03-23T18:25:09",
        "upload_time_iso_8601": "2021-03-23T18:25:09.605922Z",
        "url": "https://files.pythonhosted.org/packages/c9/08/c6486597515e8090ddbe1225191f7e349ce0a5c9f30651c73c01b5d8b2d4/surface_reconstruction-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c908c6486597515e8090ddbe1225191f7e349ce0a5c9f30651c73c01b5d8b2d4",
        "md5": "5330ce843faf201381e31580d327143e",
        "sha256": "fa1665109f56b0fb9dda2afc52303140ba0d039f9429c3ef647954ec89c807b4"
      },
      "downloads": -1,
      "filename": "surface_reconstruction-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5330ce843faf201381e31580d327143e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.3",
      "size": 19810,
      "upload_time": "2021-03-23T18:25:09",
      "upload_time_iso_8601": "2021-03-23T18:25:09.605922Z",
      "url": "https://files.pythonhosted.org/packages/c9/08/c6486597515e8090ddbe1225191f7e349ce0a5c9f30651c73c01b5d8b2d4/surface_reconstruction-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}