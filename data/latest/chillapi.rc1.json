{
  "info": {
    "author": "andrescevp@gmail.com",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ChillApi\n\n## Motivation\n\nThis project was born to increase the speed of delivery and development of APIs.\n\nThe premise is simple, not all roles can feel comfortable swimming in a sea of indented code, however they do feel comfortable in SQL languages. And those who do feel comfortable programming may prefer to use a tool that configures and propagates information than extending an ORM, routes, forms, etc; thus being able to spend more time on other types of tasks.\n\nThe connection and execution of queries is done in raw, that is, there is no ORM involved.\n\nThe implementation of this framework is on Flask using a series of additional libraries and adopting others to satisfy the requirements of the same.\n\n# setup\n\nCreate a `api.yaml` file:\n```yaml\napp:\n  name: ChillApi\n  version: '0.1'\n  swagger_url: '/swagger'\n  swagger_ui_url: '/doc'\n  host: 0.0.0.0\n  port: 8000\n  debug: True\n  #  externalDocs:\n  #    description: Find more info here\n  #    url: https://example.com\n  #  license:\n  #    name: Apache 2.0\n  #    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  #  contact:\n  #    name: API Support\n  #    url: http://www.example.com/support\n  #    email: support@example.com\n  securitySchemes:\n    bearerAuth: # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  security:\n    - bearerAuth: [ ]\n  security_level: STANDARD\n  security_handler:\n    package: my_app.auth\n    handler: auth\nenvironment:\n  __CHILLAPI_DB_DSN__: '$DB_URL'\n#  __CHILLAPI_DB_DSN__: 'sqlite:///var/db.sqlite'\n  __CHILLAPI_APP_SECRET_KEY__: 'super-secret-key'\nlogger:\n  app:\n    output: stdout\n    level: 10\n  audit_logger:\n    output: stdout\n    level: 40\n  error_handler:\n    output: stdout\n    level: 40\n  sqlalchemy:\n    output: stdout\n    level: 40\ndatabase:\n  schema: public\n  defaults:\n    tables:\n      id_field: id\n      fields_excluded: # silent check if exists in the table\n        all:\n          - created_at\n          - updated_by\n          - updated_at\n          - created_by\n          - deleted_at\n          - deleted_by\n        GET:\n          SINGLE: [ ] # request only\n          LIST: [ ] # request only\n        POST:\n          SINGLE:\n            - id\n          LIST: [ ]\n        PUT:\n          SINGLE:\n            - id\n          LIST:\n            - id\n      api_endpoints:\n        PUT: [ SINGLE, LIST ]\n        GET: [ SINGLE, LIST ]\n        POST: [ SINGLE, LIST ]\n        DELETE: [ SINGLE, LIST ]\n      extensions:\n        audit_logger:\n          package: my_app.audit\n          handler: MyAuditHandler\n          handler_args:\n            name: hello\n        soft_delete:\n          enable: True\n          default_field: deleted_at\n        on_update_timestamp:\n          enable: True\n          default_field: updated_at\n        on_create_timestamp:\n          enable: True\n          default_field: created_at\n  tables:\n    - name: book_category\n      #      alias: ~\n      #      id_field: ~ # id by default\n      extensions:\n        soft_delete:\n          cascade:\n            one_to_many:\n              - table: book\n                column_id: id\n                column_fk: book_category_id\n    - name: book\n      #      alias: ~\n      #      id_field: ~ # id by default\n      #      extensions:\n      #        soft_delete:\n      #          enable: False\n      fields_excluded: # extends defaults\n        #        all: [ ]\n        #        GET:\n        #          SINGLE:\n        #            - name\n        #          LIST: [ ]\n        POST:\n          SINGLE:\n            - isin\n    #          LIST: [ ]\n    #        PUT:\n    #          SINGLE:\n    #            - name\n    #          LIST: [ ]\n    #        DELETE:\n    #          SINGLE: [ ]\n    #          LIST: [ ]\n    #      api_endpoints:   #overwrite defaults\n    #        GET: [ SINGLE ]\n    - name: author\n      #      alias: ~\n      #      id_field: iso\n      extensions:\n        after_response:\n          package: my_app.default_events\n          handler: MyAfterResponseEvent\n        before_response:\n          package: my_app.default_events\n          handler: MyBeforeResponseEvent\n        soft_delete:\n          cascade:\n            many_to_many:\n              - table: author\n                column_id: id\n                join_table: book_has_author\n                join_columns:\n                  main: author_id\n                  join: book_id\n        validators:\n          asin:\n            - package: wtforms.validators\n              handler: Length\n              handler_args:\n                min: 5\n                max: 100\n      fields_excluded:\n        #        all: []\n        GET:\n          SINGLE:\n            - name\n      #          LIST: [ ]\n      #        POST:\n      #          SINGLE: []\n      #          LIST: [ ]\n      #        PUT:\n      #          SINGLE: []\n      #          LIST: [ ]\n      #        DELETE:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      api_endpoints: { }\n    - name: dummy\n      #      alias: ~\n      #      id_field: ~\n      extensions:\n        soft_delete:\n          enable: False\n        on_update_timestamp:\n          enable: False\n        on_create_timestamp:\n          enable: False\n      #      fields_excluded:\n      #        all: [ ]\n      #        GET:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      #        POST:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      #        PUT:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      #        DELETE:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      api_endpoints: { }\n    - name: dummy_create\n      #      alias: ~\n      #      id_field: ~\n      extensions:\n        soft_delete:\n          enable: False\n        on_update_timestamp:\n          enable: False\n        on_create_timestamp:\n          enable: True\n          default_field: creation\n      #      fields_excluded:\n      #        all: [ ]\n      #        GET:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      #        POST:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      #        PUT:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      #        DELETE:\n      #          SINGLE: [ ]\n      #          LIST: [ ]\n      api_endpoints:\n        GET: [ SINGLE, LIST ]\n  sql:\n    - name: tests\n      method: GET\n      url: /tests/test_sql\n      sql: |\n        select * from author\n      query_parameters: [ ] # swagger schema for url query parameters in sql\n      response_schema:\n        type: object\n    #        parameters:\n    #          test:\n    #            type: string\n    - name: tests 2\n      method: GET\n      url: /tests/test_sql2\n      sql: |\n        select c.name as book_name, cr.*\n        from book c\n        inner join book_category cr ON cr.id = c.book_category_id AND c.name = :name\n      query_parameters: # swagger schema for url query parameters in sql\n        - in: query\n          name: name\n          #          required: true\n          schema:\n            type: string\n    - name: test_params\n      method: POST\n      url: /test_params_post\n      sql: |\n        select c.name as book_name, cr.*\n        from book c\n        inner join book_category cr ON cr.id = c.book_category_id AND c.name = :name\n      request_schema: # swagger schema for url query parameters in sql\n        type: object\n        properties:\n          name:\n            type: string\n  #            required: true\n  templates:\n    - name: tests\n      method: GET\n      url: /test_template # swagger route format\n      template: ./api_sql_templates/test.sql\n      query_parameters: [ ] # swagger schema for url query parameters in sql\n    - name: test_params\n      method: GET\n      url: /test_template_params\n      template: ./api_sql_templates/test_params.sql\n      query_parameters: # swagger schema for url query parameters in sql\n        - in: query\n          name: name\n          #          required: true\n          schema:\n            type: string\n    - name: test_params\n      method: GET\n      url: /test_template_params_url/<name>\n      template: ./api_sql_templates/test_params.sql\n      query_parameters: # swagger schema for url query parameters in sql\n        - in: path\n          name: name\n          required: true\n    #          schema:\n    #            type: string\n    - name: test_params\n      method: POST\n      url: /test_template_params\n      template: ./api_sql_templates/test_params.sql\n      request_schema: # swagger schema for url query parameters in sql\n        type: object\n        properties:\n          name:\n            type: string\n```\n\nCreate your app.py file\n```python\nfrom chillapi.api import ChillApi\n\n_resources = ChillApi()\napp = _resources.app\napi_config = _resources.api_config\nif __name__ == '__main__':\n    app.run(\n        debug=api_config['app']['debug'],\n        host=api_config['app']['host'],\n        port=api_config['app']['port']\n    )\n```\n\nRun your app\n```shell\npython gunicorn --bind 0.0.0.0:8000 app:app\n```\n\n# The internals\n\n## Database\n\nThe milestone is support:\n\n- Postgres [x]\n- MySQL/MariDB\n- SQLite\n- Redshift\n\nDB connection and inspection is done using SQLAlchemy\n\nSQL queries are made with: https://github.com/kayak/pypika\n\n### Special queries\n\nThese queries are made to reduce the overhead in some cases such as a bulk delete where we validate if the ids provided are in our db first\n\nsee: `chillapi.database.repository._MAGIC_QUERIES`\n\n# Endpoints\n\nBased on the config file.\n\nExtends from: `chillapi.swagger.http.AutomaticResource`\n\n## Table type\n\nAutomatically maps all the table and exposes all the columns.\n\nExclusion by `excluded_fields` config\n\nAs far this a direct map to the columns, the POST/PUT endpoints will require as request body these columns, and the response body will show that columns.\n\nDELETE and POST automatically attach the id the url, this field is mapper ti the `id_field` config\n\nSame way bulk operations will map the `id_field` config to the correspondent field in the request body.\n\n## SQL Type\n\nThis type of endpoint in the simplest case will throw a response with a json that contains the result of the SQl specified.\n\nIn addition, you can use placeholders in your query and specify the proper swagger schema in the config.\n\n## Template type\n\nWorks in the same way that the SQL type, but you can specify a path to a template (larger sqls)\n\n# setup development\n\n```shell\ncd $PROJECT_DIR\n```\n\n```shell\ndocker-compose up\n```\n\n```shell\nmake run_dev\n# or install by yourself the venv etc. You will need to have psycopg binary installed\n```\n\nSee `Makefile`\n\n# Other options\n\nhttps://github.com/dbohdan/automatic-api",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,api,codeless,data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chillapi",
    "package_url": "https://pypi.org/project/chillapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/chillapi/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/chillapi/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A library to create APIs focused on data projects",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10260803,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4abc557a04b93f46c805e016088a33e4f3c9b1c670d7411d25163345e6e79d6",
          "md5": "52f84a93ec1c439d0597e44af669d8f2",
          "sha256": "f5b98a4d578cd315bf8cea705c6ac7d48ff57a6ef489b8a52bc9ea987a9bfd82"
        },
        "downloads": -1,
        "filename": "chillapi-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52f84a93ec1c439d0597e44af669d8f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 48415,
        "upload_time": "2021-05-05T00:55:24",
        "upload_time_iso_8601": "2021-05-05T00:55:24.690417Z",
        "url": "https://files.pythonhosted.org/packages/e4/ab/c557a04b93f46c805e016088a33e4f3c9b1c670d7411d25163345e6e79d6/chillapi-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4abc557a04b93f46c805e016088a33e4f3c9b1c670d7411d25163345e6e79d6",
        "md5": "52f84a93ec1c439d0597e44af669d8f2",
        "sha256": "f5b98a4d578cd315bf8cea705c6ac7d48ff57a6ef489b8a52bc9ea987a9bfd82"
      },
      "downloads": -1,
      "filename": "chillapi-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "52f84a93ec1c439d0597e44af669d8f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 48415,
      "upload_time": "2021-05-05T00:55:24",
      "upload_time_iso_8601": "2021-05-05T00:55:24.690417Z",
      "url": "https://files.pythonhosted.org/packages/e4/ab/c557a04b93f46c805e016088a33e4f3c9b1c670d7411d25163345e6e79d6/chillapi-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}