{
  "info": {
    "author": "Richard Devers",
    "author_email": "ritchiedev25@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Openapydantic\n\n[openapi](https://github.com/OAI/OpenAPI-Specification) specification validator based on [pydantic](https://pydantic-docs.helpmanual.io/).\n\n## Python version support\n\n3.8+\n\n## Openapi versions support\n\n- ❌ 2.0\n- 🟠 3.0.0\n- 🟠 3.0.1\n- ✅ 3.0.2\n- ❌ 3.0.3\n- ❌ 3.1.0\n\nOpenapi versions are retrocompatibles (except for major version).\n\nSo 3.0.2 specification should be able to handle 3.0.0 and 3.0.1 data.\n\nUnit tests handle this case (3.0.2 object automatically try to load previous version fixtures).\n\n## Installation\n\nDepending on your preference...\n\n```\n    pip install openapydantic\n```\n\n...or...\n\n```\n    poetry add openapydantic\n```\n\n## Basic usage\n\n### Api loader\n\nOpenapydantic provide an openapi specification (a.k.a \"swagger file\") loader.\n\nThis loader returns a pydantic model so you can work with your specification like a common pydantic python object.\n\nFor each openapi specification version, there's a dedicated python class.\n\nThe loader can either automatically determine the class to provide...\n\n```python\nimport asyncio\n\nimport openapydantic\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"openapi-spec.yaml\",\n    ),\n)\nprint(api.info)\n# if my openapi version is \"3.0.2\", 'api' is an instance of OpenApi302\n# if the version is not implemented, it will crash\n```\n\n... or you can also specify a specific version.\n\nIt may be useful for backward compatibility (for eg: create an OpenApi302 object using data from an 3.0.1 openapi specfication ).\n\n```python\nimport asyncio\n\nimport openapydantic\n\nOpenApiVersion = openapydantic.OpenApiVersion\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"openapi-spec-3-0-1.yaml\",\n        version=OpenApiVersion.v3_0_2\n    ),\n)\n# Here ,'api' is an OpenApi302 object, event if you send an 3.0.1 spec.\n\nprint(api.openapi)\n>> 3.0.1 # version in the spec file\nprint(api.__version__)\n>> 3.0.2 # openapi version supported for the object class\n```\n\n### Reference interpolation\n\nOpenapydantic will interpolate openapi references.\n\nIf your api looks like this:\n\n```yaml\n# my-api.yaml\nopenapi: 3.0.2\ninfo:\n  version: \"1.0.0\"\n  title: Example\npaths:\n  /user:\n    get:\n      summary: Get user\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          example: \"John Doe\"\n```\n\nOnce loaded, it will be usable like if it was ...\n\n```yaml\nopenapi: 3.0.2\ninfo:\n  version: \"1.0.0\"\n  title: Example\npaths:\n  /user:\n    get:\n      summary: Get user\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    format: int64\n                  name:\n                    type: string\n                    example: \"John Doe\"\n\n```\n\nAnd so you will be able to do things like...\n\n```python\nimport asyncio\n\nimport openapydantic\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"my-api.yaml\",\n    ),\n)\nprint(api.info)\nprint(\n    api.paths[\"/user\"]\n    .get.responses[\"200\"]\n    .content[\"application/json\"]\n    .schema_.properties[\"name\"]\n    .example\n)\n>> John Doe\n```\n\nAs describe in the openapi specification some attributes are fix ('paths', 'content' etc...) and some can be mapping with a free key.\n\nMapping must be accessed like common dict, either by direct key loading, either using .get('*key*')\n\nNote that file reference (e.g: \"#/file.yaml\" are currently not supported)\n\nReference that reference themself will not be interpolated so ...\n\n```yaml\n# my-api.yaml\nopenapi: 3.0.2\ninfo:\n  version: \"1.0.0\"\n  title: Example\npaths:\n  /user:\n    get:\n      summary: Get user\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          example: \"John Doe\"\n        brother:\n          $ref: \"#/components/schemas/User\"\n```\n\n.. will stay the same ...\n\n```python\nimport asyncio\n\nimport openapydantic\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"my-api.yaml\",\n    ),\n)\nprint(api.components.schemas[\"User\"].properties[\"brother\"].ref)\n>> '#/components/schemas/User'\n```\n\n### Attributes name collision\n\nOpenapi specify some attribute which name are already reserved either by pydantic,either by the python language itself.\n\nTo access these attributes, you must use the Openapydantic specific name\n\n| Attribute name | Openapydantic specific name |\n|----------------|------------------------------|\n| schema         | schema_                      |\n| in             | in_                          |\n| not            | not_                         |\n\ne.g:\n\n```python\nprint(\n    api.paths[\"/user\"]\n    .get.responses[\"200\"]\n    .content[\"application/json\"]\n    .schema_\n)\n```\n\n### Model export\n\nYou can access the original api you provided as a dict using the **raw_api** attribute.\n\n```python\nimport asyncio\n\nimport openapydantic\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"my-api.yaml\",\n    ),\n)\n\nprint(api.raw_api)\n>> {'openapi': '3.0.2', 'info': {'version': '1.0.0', 'title': 'Example'}, 'paths': {'/user': {'get': {'summary': 'Get user', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}}}}}}}, 'components': {'schemas': {'User': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string', 'example': 'John Doe'}}}}}}\n```\n\nYou can export your data as json string or as python dict using specific methods:\n\n```python\nimport asyncio\n\nimport openapydantic\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"my-api.yaml\",\n    ),\n)\n\nprint(api.as_clean_json())\n>> {\"openapi\": \"3.0.2\", \"info\": {\"title\": \"Example\", \"version\": \"1.0.0\"}, \"paths\": {\"/user\": {\"get\": {\"summary\": \"Get user\", \"responses\": {\"200\": {\"description\": \"successful operation\", \"content\": {\"application/json\": {\"schema\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\", \"format\": \"int64\"}, \"name\": {\"type\": \"string\", \"example\": \"John Doe\"}}}}}}}}}}}\n\n\nprint(api.as_clean_dict())\n> {'openapi': <OpenApiVersion.v3_0_2: '3.0.2'>, 'info': {'title': 'Example', 'version': '1.0.0'}, 'paths': {'/user': {'get': {'summary': 'Get user', 'responses': {'200': {'description': 'successful operation', 'content': {'application/json': {'schema': {'type': <JsonType.object_: 'object'>, 'properties': {'id': {'type': <JsonType.integer: 'integer'>, 'format': 'int64'}, 'name': {'type': <JsonType.string: 'string'>, 'example': 'John Doe'}}}}}}}}}}}\n```\n\nNote that these functions are just wrapper to .dict() and .json() pydantic model with specific parameters.\n\nBy default, since the references are interpolated, the **components** root key is exclude.\n\nIf you want to have it in the output, you can set the **exclude_components** parameter to False.\n\n```python\nimport asyncio\n\nimport openapydantic\n\napi = asyncio.run(\n    openapydantic.load_api(\n        file_path=\"my-api.yaml\",\n    ),\n)\n\nprint(\n    api.as_clean_json(\n        exclude_components=False,\n    ),\n)\n\n>> {\"components\": {\"schemas\": {\"User\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\", \"format\": \"int64\"}, \"name\": {\"type\": \"string\", \"example\": \"John Doe\"}}}}}, \"openapi\": \"3.0.2\", \"info\": {\"title\": \"Example\", \"version\": \"1.0.0\"}, \"paths\": {\"/user\": {\"get\": {\"summary\": \"Get user\", \"responses\": {\"200\": {\"description\": \"successful operation\", \"content\": {\"application/json\": {\"schema\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\", \"format\": \"int64\"}, \"name\": {\"type\": \"string\", \"example\": \"John Doe\"}}}}}}}}}}, \"raw_api\": {\"openapi\": \"3.0.2\", \"info\": {\"version\": \"1.0.0\", \"title\": \"Example\"}, \"paths\": {\"/user\": {\"get\": {\"summary\": \"Get user\", \"responses\": {\"200\": {\"description\": \"successful operation\", \"content\": {\"application/json\": {\"schema\": {\"$ref\": \"#/components/schemas/User\"}}}}}}}}, \"components\": {\"schemas\": {\"User\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\", \"format\": \"int64\"}, \"name\": {\"type\": \"string\", \"example\": \"John Doe\"}}}}}}}\n\n```\n\nIn the same way,the **raw_api** attribute is exclude by default.\n\nIf you want to have it in the output, you can set the **exclude_raw_api** parameter to False.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/richarddevers/openapydantic",
    "keywords": "openapi,swagger,pydantic,api,rest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openapydantic",
    "package_url": "https://pypi.org/project/openapydantic/",
    "platform": null,
    "project_url": "https://pypi.org/project/openapydantic/",
    "project_urls": {
      "Homepage": "https://github.com/richarddevers/openapydantic",
      "Repository": "https://github.com/richarddevers/openapydantic"
    },
    "release_url": "https://pypi.org/project/openapydantic/0.2.3/",
    "requires_dist": [
      "pyyaml (>=5.3.1)",
      "types-PyYAML (>=6.0.5,<7.0.0)",
      "pydantic (>=1.9.0,<2.0.0)",
      "email-validator (>=1.1.3,<2.0.0)",
      "jsonpath-ng (>=1.5.3,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "openapi specification parser based on pydantic",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13431811,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bad4640daa13f57ca0eb6a2563f37d3eee9eb7167062bb55a41c096cf4a4801",
          "md5": "65550257df40e99a8528d6e185ae8c50",
          "sha256": "10ddede1df84d44f0547df79f82401fe8960b6ee59e32e934422ab8ace31467d"
        },
        "downloads": -1,
        "filename": "openapydantic-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65550257df40e99a8528d6e185ae8c50",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 6809,
        "upload_time": "2022-03-23T19:59:20",
        "upload_time_iso_8601": "2022-03-23T19:59:20.551726Z",
        "url": "https://files.pythonhosted.org/packages/9b/ad/4640daa13f57ca0eb6a2563f37d3eee9eb7167062bb55a41c096cf4a4801/openapydantic-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4e0ffbb20156cb280784862269a2610b019cf94c26589eb98c9f8ede7751fde",
          "md5": "af74e1f9fee2b56c1f4d8b81aa3f52b0",
          "sha256": "0e7cd114df2927a2e03b0526c6fc2d4b64d8564c760c5266a43f92d120b597bb"
        },
        "downloads": -1,
        "filename": "openapydantic-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af74e1f9fee2b56c1f4d8b81aa3f52b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 6645,
        "upload_time": "2022-03-23T19:59:22",
        "upload_time_iso_8601": "2022-03-23T19:59:22.001874Z",
        "url": "https://files.pythonhosted.org/packages/e4/e0/ffbb20156cb280784862269a2610b019cf94c26589eb98c9f8ede7751fde/openapydantic-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be3f87604717bc57f531d993ce24128dce6e00c335452582a1481367e4c3be15",
          "md5": "18cb584106d2490c9611ca301ea97524",
          "sha256": "d27a40dbbb3bad184d828768cc91ed1057c4f07e9d27916f4e025bebccf39a5f"
        },
        "downloads": -1,
        "filename": "openapydantic-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18cb584106d2490c9611ca301ea97524",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 7530,
        "upload_time": "2022-03-25T21:42:44",
        "upload_time_iso_8601": "2022-03-25T21:42:44.895570Z",
        "url": "https://files.pythonhosted.org/packages/be/3f/87604717bc57f531d993ce24128dce6e00c335452582a1481367e4c3be15/openapydantic-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbd700cecb1eabed7e657c0f9a6df506c35e229061fbf33be42b0f9d9786e6b9",
          "md5": "593c95428d85e6eaaac4f964550b6f63",
          "sha256": "d43b36cc2f93a683d6b0eb67a56aa46e2b441949364d8ce9f5d098260713a0bc"
        },
        "downloads": -1,
        "filename": "openapydantic-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "593c95428d85e6eaaac4f964550b6f63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 7349,
        "upload_time": "2022-03-25T21:42:46",
        "upload_time_iso_8601": "2022-03-25T21:42:46.131022Z",
        "url": "https://files.pythonhosted.org/packages/cb/d7/00cecb1eabed7e657c0f9a6df506c35e229061fbf33be42b0f9d9786e6b9/openapydantic-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa5dea147df6bd947431fb286ba9a87339a4bbb602bf5de6c449fb15c4b60f0a",
          "md5": "a7e9c04dba817b6c26bb5c2666897f09",
          "sha256": "bfde0676b30eace3eafd7c5e68ada335d0c242510de6d32607ac859ef3ffcfe4"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7e9c04dba817b6c26bb5c2666897f09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 10734,
        "upload_time": "2022-03-31T09:29:56",
        "upload_time_iso_8601": "2022-03-31T09:29:56.893156Z",
        "url": "https://files.pythonhosted.org/packages/fa/5d/ea147df6bd947431fb286ba9a87339a4bbb602bf5de6c449fb15c4b60f0a/openapydantic-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4439796f45cd97f2dca6fa9ad25e32b01259270af6cdf685519ef69c9b677710",
          "md5": "180c14fda3f18c1616ae7f679991ccc1",
          "sha256": "d1251670d7d8a054918173924d9adf0ca36f90ec57a38549849df8089df3a89f"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "180c14fda3f18c1616ae7f679991ccc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12364,
        "upload_time": "2022-03-31T09:29:59",
        "upload_time_iso_8601": "2022-03-31T09:29:59.000503Z",
        "url": "https://files.pythonhosted.org/packages/44/39/796f45cd97f2dca6fa9ad25e32b01259270af6cdf685519ef69c9b677710/openapydantic-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34e64850286ca6e1cf33329e345418769b6d88d06b3e976b59862f1556359fbd",
          "md5": "4d3362217d0c19d6927da5ee060ab67f",
          "sha256": "1847c9e72879e55b440d629682f975e6562e54a073db35c5382c691bc5e336bb"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d3362217d0c19d6927da5ee060ab67f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 10605,
        "upload_time": "2022-03-31T11:15:57",
        "upload_time_iso_8601": "2022-03-31T11:15:57.195041Z",
        "url": "https://files.pythonhosted.org/packages/34/e6/4850286ca6e1cf33329e345418769b6d88d06b3e976b59862f1556359fbd/openapydantic-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96b2c78816be815d19a064b9234dd273d82833b3bdeef0800aa6673f9e652214",
          "md5": "13f78250cfbe780a04ee78e3571ecde5",
          "sha256": "671b7010044d7a9bf4bf4f2c93b07855f903ead3e08d6cb09edc5c386776249a"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13f78250cfbe780a04ee78e3571ecde5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12307,
        "upload_time": "2022-03-31T11:15:58",
        "upload_time_iso_8601": "2022-03-31T11:15:58.662275Z",
        "url": "https://files.pythonhosted.org/packages/96/b2/c78816be815d19a064b9234dd273d82833b3bdeef0800aa6673f9e652214/openapydantic-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2059383cf8d673b86d974994c6371a2744a4afda8315933cfff0b38720107299",
          "md5": "27055c64da53eb9ac506d9a1af16ecb3",
          "sha256": "52eafecc30efc57638136a11f2c87a57c2460dceca1ca2085313c146c446e7fb"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27055c64da53eb9ac506d9a1af16ecb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 10562,
        "upload_time": "2022-04-04T08:20:36",
        "upload_time_iso_8601": "2022-04-04T08:20:36.466473Z",
        "url": "https://files.pythonhosted.org/packages/20/59/383cf8d673b86d974994c6371a2744a4afda8315933cfff0b38720107299/openapydantic-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7651f691965eaae71269c9e9352d4a9dd01b81b75cca4afdf98d8ba936941fb3",
          "md5": "12ba3e5eea54dc1fbe92e8e17d722e1b",
          "sha256": "0f9d622b658125af142328d65b99ecc4fddbc7f13faf4b2a6493b4f54c4b3e2b"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12ba3e5eea54dc1fbe92e8e17d722e1b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 11602,
        "upload_time": "2022-04-06T18:31:38",
        "upload_time_iso_8601": "2022-04-06T18:31:38.470840Z",
        "url": "https://files.pythonhosted.org/packages/76/51/f691965eaae71269c9e9352d4a9dd01b81b75cca4afdf98d8ba936941fb3/openapydantic-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d45d4bdb125158ec5a9ac26d56bded1e785ba21a5070c3268e5f861757b65a9",
          "md5": "7aec4e8f313ff485c023f23d575d1a5b",
          "sha256": "89f8b3a79f413e8314573631af2ba761fa69eff5101a1e004491983a09e3006c"
        },
        "downloads": -1,
        "filename": "openapydantic-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7aec4e8f313ff485c023f23d575d1a5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 12788,
        "upload_time": "2022-04-06T18:31:39",
        "upload_time_iso_8601": "2022-04-06T18:31:39.921793Z",
        "url": "https://files.pythonhosted.org/packages/6d/45/d4bdb125158ec5a9ac26d56bded1e785ba21a5070c3268e5f861757b65a9/openapydantic-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7651f691965eaae71269c9e9352d4a9dd01b81b75cca4afdf98d8ba936941fb3",
        "md5": "12ba3e5eea54dc1fbe92e8e17d722e1b",
        "sha256": "0f9d622b658125af142328d65b99ecc4fddbc7f13faf4b2a6493b4f54c4b3e2b"
      },
      "downloads": -1,
      "filename": "openapydantic-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "12ba3e5eea54dc1fbe92e8e17d722e1b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 11602,
      "upload_time": "2022-04-06T18:31:38",
      "upload_time_iso_8601": "2022-04-06T18:31:38.470840Z",
      "url": "https://files.pythonhosted.org/packages/76/51/f691965eaae71269c9e9352d4a9dd01b81b75cca4afdf98d8ba936941fb3/openapydantic-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d45d4bdb125158ec5a9ac26d56bded1e785ba21a5070c3268e5f861757b65a9",
        "md5": "7aec4e8f313ff485c023f23d575d1a5b",
        "sha256": "89f8b3a79f413e8314573631af2ba761fa69eff5101a1e004491983a09e3006c"
      },
      "downloads": -1,
      "filename": "openapydantic-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7aec4e8f313ff485c023f23d575d1a5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 12788,
      "upload_time": "2022-04-06T18:31:39",
      "upload_time_iso_8601": "2022-04-06T18:31:39.921793Z",
      "url": "https://files.pythonhosted.org/packages/6d/45/d4bdb125158ec5a9ac26d56bded1e785ba21a5070c3268e5f861757b65a9/openapydantic-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}