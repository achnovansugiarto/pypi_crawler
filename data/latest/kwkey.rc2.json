{
  "info": {
    "author": "Jonathan Fine",
    "author_email": "jfine2358@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PEP 472 -- Support for indexing with keyword arguments\n\nThis package provides experimental support for indexing with keyword\nargments. This is proposed in [PEP\n637](https://www.python.org/dev/peps/pep-0637/). See also PEP 637's\npredecessor, [PEP 472](https://www.python.org/dev/peps/pep-0472/).\n\nWe can write\n```python\n    fn(1, 2, a=3, b=4)\n```\nand some users wish to be able to write\n```python\n    d[1, 2, a=3, b=4]\n```\nparticularly for use in data science and annotations.\n\n\n## Helper function `o`\n\nThe module provide a helper function\n```python\n    from kwkeys import o\n```\nsuch that\n```python\n   d[o(1, 2, a=3, b=4)]\n```\nworks as well as can be reasonably expected, or so the author thinks.\n\nIn module kwkey/example_jfine.py there's an implementation of a class\nPointMap. It is a subclass of dict which supports namedtuple style\naccess to keys.\n\nMy approach uses a helper class K for implementing these\nexperiments. Some wish for the syntax of Python to be extended, to\nallow keyword arguments in the d[...] syntax.\n\nIf the syntax is extended, I believe a helper class such as K would be\na good idea.  Steven D'Aprano believe that K is irrelevant, except for\nexperimentation.\n\nThis package, once refined and production ready, could be used to\nallow the the style of the new syntax to be used with current Python,\nvia\n```python\n   d[o(1, 2, a=3, b=4)]\n```\ninstead of\n```python\n    d[1, 2, a=3, b=4]\n```\n\n## Items-key duality\n\nThis package, from version 0.0.2, also provides items-key\nduality. Roughly speaking, duality is writing `key[items]` instead of\n`items[key]`. Python already supports something like this:\n\n```python\n>>> from operator import itemgetter\nTypeError: 'operator.itemgetter' object is not subscriptable\n>>> itemgetter(3)('abcde')\n'd'\n```\n\nTo provide duality we need a special class `X` such that\n\n```python\nX(1, 2, a=3, b=4)[items]\n```\n\nis equivalent (for the chosen future semantics of keyword arguments)\nto:\n\n```python\nitems[1, 2, a=3, b=4]\n```\n\nIn current Python the following three statements are already valid\nsyntax.\n\n```python\nX(1, 2, a=3, b=4)[items] = val\nval = X(1, 2, a=3, b=4)[items]\ndel X(1, 2, a=3, b=4)[items]\n```\n\nPEP 637 proposes that we allow keywords inside the square brackets\n`[...]`. Using items-key duality, we can move the keywords to outside\nthe square brackets, into a context where they are allowed.\n\n## Semantics of keyword arguments\n\nFor this to work, a suitable class `X` must be provided, that\nimplements the desired semantics. This package provides three such\nclasses.\n\n### Class `A` - the current semantics\n\nHere's an example. For more, see file `kwkey/test_duality.py`.\n```python\n>>> A(1, 2)[log] = 'val'\nlog: setitem(*((1, 2), 'val'), **{})\n```\n\nThis means that the following three statements are equivalent.\n```python\nlog[(1, 2)] = 'val'\nA((1, 2))[log] = 'val'\nlog.__setitem__((1, 2), 'val')\n```\n\n### Class `B` - the semantics proposed by D'Aprano and von Rossum\n\n```python\n>>> B(1, 2, a=3, b=4)[log]\nlog: getitem(*((1, 2),), **{'a': 3, 'b': 4})\n```\n\nThe previous setitem call is equivalent to\n```python\nsetitem((1, 2), 'val', a=3, b=4)\n\nWhen no keywords are present, this give the same semantics as class\n`A`.\n\n### Class `C` - the semantics propose by Fine\n\nHere the semantics of keywords depend on a special attribute of\n`items`, which we call `keyfn`. (Strictly speaking, it should be an\nattribure of `type(items)`.\n\n#### Default\n\nThe default is to give the same semantics as class `A`.\n```python\n>>> C((1, 2))[log] = 'val'\nlog: setitem(*((1, 2), 'val'), **{})\n```\n\nThe previous setitem call is equivalent to\n```python\nsetitem((1, 2), 'val')\n```\n\n#### None\n\nIf the special attribute `keyfn` is `None` we get\n```python\n>>> C(1, 2, a=1, b=2)[nokey] = 'val'\nlog: setitem(*('val', 1, 2), **{'a': 3, 'b': 4})\n```\n\nThe previous setitem call is equivalent to\n```python\nsetitem('val', 1, 2, a=3, b=4)\n```\n\n#### User supplied `keyfn`\n\nThe class `type(items)` can supply its own `keyfn`, to provide custom\nbehaviour. Here's an example (see `kwkey/test_duality.py` for\ndetails).\n\n```python\n>>> C(1, 2, a=1, b=2)[k_log] = 'val'\nlog: setitem(*(K(1, 2, a=1, b=2), 'val'), **{})\n```\n\nThe previous setitem call is equivalent to\n```python\nsetitem(K(1, 2, a=1, b=2), 'val')\n```\nwhere `K` is a new class, introduced by package `kwkey`.\n\n## Discussion\n\nFor discussion of PEP 472 and PEP 637, visit the [Python\nideas](https://mail.python.org/archives/list/python-ideas@python.org/)\nmiling list.\n\n\nTo test installation, do\n```\n$ python3 -m kwkey.test\nkwkey TestResults(failed=0, attempted=15)\nkwkey.duality TestResults(failed=0, attempted=1)\nkwkey.example_jfine TestResults(failed=0, attempted=7)\nkwkey.jfine TestResults(failed=0, attempted=0)\nkwkey.sdaprano TestResults(failed=0, attempted=0)\nkwkey.test TestResults(failed=0, attempted=0)\nkwkey.test_duality TestResults(failed=0, attempted=65)\nkwkey.test_jfine TestResults(failed=0, attempted=19)\nkwkey.test_K TestResults(failed=0, attempted=8)\nkwkey.test_sdaprano TestResults(failed=0, attempted=25)\nkwkey.tools TestResults(failed=0, attempted=0)\n```\nand check for no failures. (The number of tests will change over time.)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jfine2358/python-kwkey",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kwkey",
    "package_url": "https://pypi.org/project/kwkey/",
    "platform": "",
    "project_url": "https://pypi.org/project/kwkey/",
    "project_urls": {
      "Homepage": "https://github.com/jfine2358/python-kwkey"
    },
    "release_url": "https://pypi.org/project/kwkey/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Indexing with keyword arguments",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8307582,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9ab30619c2c3facfbd7dba4cd1ba6c5a4bb07cc0007ecbb6a945dd1157f3738",
          "md5": "04ed88dc11720ecc337e2aaaf20a2736",
          "sha256": "2221a3c72d0d0cf00aa9486d45276c3869ea2cca3257d70a917d86deb57a814b"
        },
        "downloads": -1,
        "filename": "kwkey-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04ed88dc11720ecc337e2aaaf20a2736",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9872,
        "upload_time": "2020-08-03T15:14:03",
        "upload_time_iso_8601": "2020-08-03T15:14:03.654779Z",
        "url": "https://files.pythonhosted.org/packages/c9/ab/30619c2c3facfbd7dba4cd1ba6c5a4bb07cc0007ecbb6a945dd1157f3738/kwkey-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f73f43f3d3b30bb6c8f8f8f2b25b4339d6ba01ab0216037f1181fa825244af7",
          "md5": "00001d0099de3126c284b9a70196c05d",
          "sha256": "da5f9f3160e02f5d52fec717e0038eeb3cf4544f4e1dd15ac87384628a52cc3e"
        },
        "downloads": -1,
        "filename": "kwkey-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00001d0099de3126c284b9a70196c05d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5991,
        "upload_time": "2020-08-03T15:14:05",
        "upload_time_iso_8601": "2020-08-03T15:14:05.765917Z",
        "url": "https://files.pythonhosted.org/packages/9f/73/f43f3d3b30bb6c8f8f8f2b25b4339d6ba01ab0216037f1181fa825244af7/kwkey-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16cb718d1483702826631cd190acd388f2640190a369dc3474b723cb003040c9",
          "md5": "bc84ec348111a9b3078a77359bc3f3fd",
          "sha256": "786cfd9518ad104a6c5e174a4700c8cc79a9886e4ed65f4a7a49b11865a607b5"
        },
        "downloads": -1,
        "filename": "kwkey-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc84ec348111a9b3078a77359bc3f3fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13766,
        "upload_time": "2020-09-30T14:45:29",
        "upload_time_iso_8601": "2020-09-30T14:45:29.071384Z",
        "url": "https://files.pythonhosted.org/packages/16/cb/718d1483702826631cd190acd388f2640190a369dc3474b723cb003040c9/kwkey-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63264ab9cc02568e5f1d8cd6e6798a3a1ef4397a85424e3f9fa837f742b7529a",
          "md5": "b7f295e13533e08b8397185cf656333b",
          "sha256": "4f24be6a964044ce0b3078bd5f1b2769d9f3ae163b82ab9a40fa8f4158e3d402"
        },
        "downloads": -1,
        "filename": "kwkey-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b7f295e13533e08b8397185cf656333b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11049,
        "upload_time": "2020-09-30T14:45:30",
        "upload_time_iso_8601": "2020-09-30T14:45:30.272612Z",
        "url": "https://files.pythonhosted.org/packages/63/26/4ab9cc02568e5f1d8cd6e6798a3a1ef4397a85424e3f9fa837f742b7529a/kwkey-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16cb718d1483702826631cd190acd388f2640190a369dc3474b723cb003040c9",
        "md5": "bc84ec348111a9b3078a77359bc3f3fd",
        "sha256": "786cfd9518ad104a6c5e174a4700c8cc79a9886e4ed65f4a7a49b11865a607b5"
      },
      "downloads": -1,
      "filename": "kwkey-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bc84ec348111a9b3078a77359bc3f3fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13766,
      "upload_time": "2020-09-30T14:45:29",
      "upload_time_iso_8601": "2020-09-30T14:45:29.071384Z",
      "url": "https://files.pythonhosted.org/packages/16/cb/718d1483702826631cd190acd388f2640190a369dc3474b723cb003040c9/kwkey-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "63264ab9cc02568e5f1d8cd6e6798a3a1ef4397a85424e3f9fa837f742b7529a",
        "md5": "b7f295e13533e08b8397185cf656333b",
        "sha256": "4f24be6a964044ce0b3078bd5f1b2769d9f3ae163b82ab9a40fa8f4158e3d402"
      },
      "downloads": -1,
      "filename": "kwkey-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b7f295e13533e08b8397185cf656333b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11049,
      "upload_time": "2020-09-30T14:45:30",
      "upload_time_iso_8601": "2020-09-30T14:45:30.272612Z",
      "url": "https://files.pythonhosted.org/packages/63/26/4ab9cc02568e5f1d8cd6e6798a3a1ef4397a85424e3f9fa837f742b7529a/kwkey-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}