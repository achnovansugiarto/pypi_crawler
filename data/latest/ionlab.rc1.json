{
  "info": {
    "author": "Nguyễn Minh Trí",
    "author_email": "kamitri.tnyn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.11",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "# Get Started\n\nIonlab is a **very** simple python package to determine the composition at equilibrium for a solution containing different species. Ionlab assumes the **activity coeffecient of all ions to be 1**, and all other factors considered ideal. Complexation and precipitation are also taken into account, however computation may be inaccurate or may not be possible at all. \nEquation solving is handled by **GEKKO (no external software required)**, or Wolfram Mathematica.\nTo get started, download ionlab through the Python package manager:\n\n    pip install ionlab\nCarry out a simple experiment:\n\n\timport ionlab as il\n    H3PO4 = il.Compound(cation='H+', anion='PO43-', cation_count=3, anion_count=1)\n    sol = il.Solution(1)  # Create a solution with a volume of 1L\n    sol.add(H3PO4, init_M=0.2)  # [H3PO4]0 = 0.2(M)\n    lab = il.Lab(sol)  \n    eq = lab.analyze_eq(solver='gekko')  \n    print(eq)\n    >>> {'xani0st0': 0.16610105407, 'h': 0.033899007588, 'pH': 1.46981301581946}\n    \nA more complicated example for the system consisting of satured BaCO<sub>3</sub>\n\n    sol = Solution(1)  \n    sol.add(BaCl2, init_M=1)  \n    sol.add(Na2CO3, init_M=1)  \n    lab = Lab(sol)  \n    print(lab.analyze_eq(solver='wolfram'))  # GEKKO would fail here\n    >>> {'h': 1.099744438343427e-10, 'xani1st0': 2.238882341544366e-08, 'xcat0st0': 0.0001295842673586922, 'xcat1st0': 2.0, 'xcat0ani1sl': 0.999870364297433, 'xani0st0': 2.199488876686854e-17, 'pH': 9.958708225671051}\n    pH = lab.get_pH()\n    print(pH)\n    >>> 9.958708225671051\nTo see what the symbols mean, please use the following:\n\n    print(lab.logbook)\n    >>> {'H+': 'h', 'Cl-': 'xani0st1', 'HCl': 'xani0st0', 'CO32-': 'xani1st2', 'H2CO3': 'xani1st0', 'HCO3-': 'xani1st1', 'Ba2+': 'xcat0st0', 'BaOH+': 'xcat0st1', 'Na+': 'xcat1st0', 'xcat0ani1sl': 'BaCO3'}\n\n## Switching solvers\nI strongly recommend using **Wolfram Mathematica** instead of GEKKO as it is much faster and more reliable at solving complex systems (also because I am a horrible mathematician and didn't properly handle equation solving). If you have Mathematica installed, do the following step to configure the wolfram kernel and utilize it instead.\n\n    import conf\n    conf.Paths.WOLFRAM_KERNEL = '<.../WolframKernel.exe>'  # Path to Wolfram kernel goes here\n    ...\n    lab.analyze_eq(solver='wolfram')  # Use wolfram to solve equation\n    \n## More compounds\nSome common compounds have been provided for quick access. Type `il.cc.` to see a list of common chemicals. Compounds can be declared like below (*unintuitive and inconsistent, I know*):\n\n    HCl = il.cc.HCl\n    NH3 = Compound(formula='NH3')  # Declare it yourself\n    CdBr2 = Compound(cation='Cd2+', anion='Br-', cation_count=1, anion_count=2)\n    H2SO4 = Compound(formula='H2SO4', cation_count=2, anion_count=1)\n    H2SO4 = Compound(cation='H+', anion='SO42-', cation_count=2, anion_count=1)\n\n## Adding/editing chemicals' data\nTo add new compounds/edit their data, please go to `ionlab/IonicEquilibrium/db/chemicals.db` and manually edit the desired data.\nThen change your current working directory to that same folder `db/` and execute the command:\n`python dbmanage.py dbmake`\n# Limitations\nI made this package when I wasn't the greatest programmer, nor the best chemist. This still hold true, but at least now I can ask someone, maybe. Please be aware that this package may be **buggy**, **incomplete**, **inconsistent**. Honestly, thanks for the reading the docs but trying out this package may **not be the best experience**. But well, if you want to explore, go for it. It is unknown whether I will ever update this package. If maybe someone need it, perhaps.\n**Current limitations**\n - Computation may fail for systems that are too complex, or... just fail in general.\n - Computation may be mildly or wildly inaccurate for systems involving complexation/precipitation.\n - Unintuitive design for adding/adjusting chemicals (data).\n - Changing chemicals' constant values during runtime is not available.\n - The ideal assumption is utilized.\n - GEKKO solver (pure python) may be slower at calculating and easier to fail for simple and complex systems.\n - Pretty much meaningless.\n\n# Authors\n - Just me, yay.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "chemistry,ion,equilibrium,ionic,solution,analytical chemistry",
    "license": "LGPL-3.0-or-later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ionlab",
    "package_url": "https://pypi.org/project/ionlab/",
    "platform": null,
    "project_url": "https://pypi.org/project/ionlab/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Kamitri/ionlab/issues",
      "Homepage": "https://github.com/Kamitri/ionlab"
    },
    "release_url": "https://pypi.org/project/ionlab/0.1.0/",
    "requires_dist": [
      "gekko (==1.0.6)",
      "matplotlib (==3.6.3)",
      "numpy (==1.24.2)",
      "openpyxl (==3.1.0)",
      "pandas (==1.5.3)",
      "sympy (==1.11.1)",
      "wolframclient (==1.1.7)"
    ],
    "requires_python": ">=3.11,<3.12",
    "summary": "Determine the composition of ionic equilibrium in solutions, in an ideal environment.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16818229,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57435f8c1fccc070184b548b32fdeb78227da0466ddf79560f84fdcff1de2fc8",
          "md5": "73812eb360b027a5b5567497380ade6b",
          "sha256": "d1a5a73da7baf41fc1c9d18b1cf3796a8ab86c7763aa15b8af93c032866683d7"
        },
        "downloads": -1,
        "filename": "ionlab-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73812eb360b027a5b5567497380ade6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11,<3.12",
        "size": 69052,
        "upload_time": "2023-02-12T05:53:45",
        "upload_time_iso_8601": "2023-02-12T05:53:45.838933Z",
        "url": "https://files.pythonhosted.org/packages/57/43/5f8c1fccc070184b548b32fdeb78227da0466ddf79560f84fdcff1de2fc8/ionlab-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f93bc7c634bfb0b27b1a6c0b95fa331c797b56c3004d9543b427ea15a1796978",
          "md5": "c65cffb44f46f070ad11ed583c561538",
          "sha256": "98559b6418a9b781b14ac489a4479cbe39b9957f4835a72797e7dad23cbd0e87"
        },
        "downloads": -1,
        "filename": "ionlab-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c65cffb44f46f070ad11ed583c561538",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11,<3.12",
        "size": 66184,
        "upload_time": "2023-02-12T05:53:48",
        "upload_time_iso_8601": "2023-02-12T05:53:48.570339Z",
        "url": "https://files.pythonhosted.org/packages/f9/3b/c7c634bfb0b27b1a6c0b95fa331c797b56c3004d9543b427ea15a1796978/ionlab-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57435f8c1fccc070184b548b32fdeb78227da0466ddf79560f84fdcff1de2fc8",
        "md5": "73812eb360b027a5b5567497380ade6b",
        "sha256": "d1a5a73da7baf41fc1c9d18b1cf3796a8ab86c7763aa15b8af93c032866683d7"
      },
      "downloads": -1,
      "filename": "ionlab-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73812eb360b027a5b5567497380ade6b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11,<3.12",
      "size": 69052,
      "upload_time": "2023-02-12T05:53:45",
      "upload_time_iso_8601": "2023-02-12T05:53:45.838933Z",
      "url": "https://files.pythonhosted.org/packages/57/43/5f8c1fccc070184b548b32fdeb78227da0466ddf79560f84fdcff1de2fc8/ionlab-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f93bc7c634bfb0b27b1a6c0b95fa331c797b56c3004d9543b427ea15a1796978",
        "md5": "c65cffb44f46f070ad11ed583c561538",
        "sha256": "98559b6418a9b781b14ac489a4479cbe39b9957f4835a72797e7dad23cbd0e87"
      },
      "downloads": -1,
      "filename": "ionlab-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c65cffb44f46f070ad11ed583c561538",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11,<3.12",
      "size": 66184,
      "upload_time": "2023-02-12T05:53:48",
      "upload_time_iso_8601": "2023-02-12T05:53:48.570339Z",
      "url": "https://files.pythonhosted.org/packages/f9/3b/c7c634bfb0b27b1a6c0b95fa331c797b56c3004d9543b427ea15a1796978/ionlab-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}