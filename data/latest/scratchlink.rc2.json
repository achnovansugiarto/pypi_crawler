{
  "info": {
    "author": "Siddhesh Chavan",
    "author_email": "siddheshchavan2020@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ScratchLink v1.0.1\r\n\r\n## Introduction\r\n\r\nScratchLink is a simple Python Library to get the data of Scratch using the Scratch API. This library is simple to use.\r\nThis library need no login!\r\n\r\n## Installation\r\n\r\nTo use this library you must need to install the Python Programming Language. If you have already installed Python then\r\ntype the following in the Terminal (Command Prompt):\r\n\r\n```bash\r\npip install scratchlink\r\n```\r\n\r\n## Import\r\n\r\nTo import scratchlink, use the following code:\r\n\r\n```python\r\nimport scratchlink  # Import Library\r\n\r\nscratch = scratchlink.ScratchLink()  # Create an object of the ScratchLink class\r\n```\r\n\r\n## Getting The Data\r\n\r\n### Front Page Data\r\n\r\nTo get the front page data of Scratch Website, run the following Program:\r\n\r\n```python\r\nimport scratchlink\r\n\r\nscratch = scratchlink.ScratchLink()\r\nfront_page = scratch.link_frontpage()  # Connect the front page\r\n\r\nfront_page.health()  # Get the health of the website\r\nfront_page.news()  # Get the news of the website\r\nfront_page.front_page_projects()  # Get the front page projects of the website\r\nfront_page.explore_projects(mode=\"trending\", query=\"*\")  # Explore the projects\r\nfront_page.explore_studios(mode=\"trending\", query=\"*\")  # Explore the studios\r\nfront_page.search_projects(mode=\"trending\", search=\"*\")  # Search the projects\r\nfront_page.search_studios(mode=\"trending\", search=\"*\")  # Search the studios\r\n```\r\n\r\n### User Data\r\n\r\nTo get the user data, run the following Program:\r\n\r\n```python\r\nimport scratchlink\r\n\r\nscratch = scratchlink.ScratchLink()\r\nuser = scratch.link_user(username=\"Sid72020123\")  # Connect a Scratch User\r\n\r\nuser.id()  # Returns the ID of the user\r\nuser.thumbnail_url()  # Returns the thumbnail URL of a user\r\nuser.messages_count()  # Returns the messages count of the user\r\nuser.work()  # Returns the 'What I am working on' of a Scratch profile\r\nuser.bio()  # Returns the 'About me' of a Scratch profile\r\nuser.status()  # Returns the status(Scratcher or New Scratcher) of a Scratch profile\r\nuser.joined_date()  # Returns the joined date of a Scratch profile\r\nuser.country()  # Returns the country of a Scratch profile\r\nuser.featured_data()  # Returns the featured project data of the Scratch profile\r\nuser.projects()  # Returns the list of shared projects of a user\r\nuser.followers_count()  # Returns the follower count of a user\r\nuser.following_count()  # Returns the following count of a user\r\nuser.total_views_count()  # Returns the total views count of all the shared projects of a user\r\nuser.total_loves_count()  # Returns the total loves count of all the shared projects of a user\r\nuser.total_favourites_count()  # Returns the total favourites count of all the shared projects of a user\r\nuser.following()  # Returns the list of the user following\r\nuser.followers()  # Returns the list of the user followers\r\nuser.favourites()  # Returns the list of the user favourites\r\nuser.user_follower_history()  # Return the follower history of the user\r\nuser.all_data()  # Returns all the data of the user\r\nuser.comments(limit=5, page=1)  # Get comments of the profile of the user\r\nuser.pretty_print_user_data()  # Pretty print the user data\r\n##########################################################################\r\n# IMPORTANT NOTE: To always get the updated data use the update_data() function\r\n##########################################################################\r\nuser.update_data()  # Update the data\r\n```\r\n\r\n### Studio Data\r\n\r\nTo get the studio data, run the following Program:\r\n\r\n```python\r\nimport scratchlink\r\n\r\nscratch = scratchlink.ScratchLink()\r\nstudio = scratch.link_studio(studio_id=1)  # Connect a Scratch Studio\r\n\r\nstudio.id()  # Returns the studio ID\r\nstudio.title()  # Returns the studio title\r\nstudio.host_id()  # Returns the studio owner/host ID\r\nstudio.description()  # Returns the studio description\r\nstudio.visibility()  # Returns the studio visibility\r\nstudio.is_public()  # Returns whether a studio is public\r\nstudio.is_open_to_all()  # Returns whether a studio is open to all\r\nstudio.are_comments_allowed()  # Returns whether a studio has comments allowed\r\nstudio.history()  # Returns the history of the studio\r\nstudio.stats()  # Returns the stats of the studio\r\nstudio.thumbnail_url()  # Returns the thumbnail URL of the studio\r\nstudio.projects(all=False, limit=40, offset=0)  # Get the projects of the studio\r\nstudio.comments(all=False, limit=40, offset=0)  # Get the comments of the studio\r\nstudio.curators(all=False, limit=40, offset=0)  # Get the curators of the studio\r\nstudio.managers(all=False, limit=40, offset=0)  # Get the managers of the studio\r\nstudio.activity(all=False, limit=40, offset=0)  # Get the activity of the studio\r\nstudio.pretty_print_studio_data()  # Pretty print the Studio Data\r\n##########################################################################\r\n# IMPORTANT NOTE: To always get the updated data use the update_data() function\r\n##########################################################################\r\nstudio.update_data()  # Update the data\r\n```\r\n\r\n### Project Data\r\n\r\nTo get the project data, run the following Program:\r\n\r\n```python\r\nimport scratchlink\r\n\r\nscratch = scratchlink.ScratchLink()\r\nproject = scratch.link_project(project_id=1)  # Connect a Scratch Project\r\n\r\nproject.author()  # Returns the author of the project\r\nproject.title()  # Returns the title of the project\r\nproject.notes()  # Returns the notes(Notes or Credits) of the project\r\nproject.instruction()  # Returns the instructions of the project\r\nproject.are_comments_allowed()  # Returns whether the comments are allowed in a project\r\nproject.stats()  # Returns the stats of a project\r\nproject.history()  # Returns the history of a project\r\nproject.remix_data()  # Returns the remix data of a project\r\nproject.visibility()  # Returns whether the project is visible\r\nproject.is_public()  # Returns whether the project is public\r\nproject.is_published()  # Returns whether the project is published\r\nproject.thumbnail_url()  # Returns the thumbnail url of a project\r\nproject.assets_info()  # Returns the Assets info of a project\r\nproject.scripts()  # Returns the scripts of a project\r\nproject.comments(all=False, limit=40, offset=0, comment_id=None)  # Returns the list of comments of a project\r\nproject.remixes(all=False, limit=20, offset=0)  # Returns the list of remixes of a project\r\nproject.pretty_print_project_data()  # Pretty print the project data\r\n##########################################################################\r\n# IMPORTANT NOTE: To always get the updated data use the update_data() function\r\n##########################################################################\r\nproject.update_data()  # Update the data\r\n```\r\n\r\n### Cloud Data\r\n\r\nTo get the cloud data of a project, run the following Program:\r\n\r\n```python\r\nimport scratchlink\r\n\r\nscratch = scratchlink.ScratchLink()\r\nproject = scratch.link_project(project_id=1)  # Connect a Scratch Project\r\n\r\ncloud = project.link_cloud()  # Connect the Cloud Variables of a project\r\ncloud.get_variable_data(limit=100, offset=0)  # Get the variable data\r\ncloud.get_cloud_variable_value(variable_name=\"Name\",\r\n                               limit=100)  # Get the variable value. This will return a list containing many values. The first item in the list is the current value\r\ncloud.pretty_print_cloud_data()  # Pretty print the cloud data\r\n```\r\n\r\n### Forum Topic Data\r\n\r\nTo get the forum topic data, run the following Program:\r\n\r\n```python\r\nimport scratchlink\r\n\r\nscratch = scratchlink.ScratchLink()\r\nforum = scratch.link_forum(topic_id=1)  # Connect a Scratch Forum Topic\r\n\r\nforum.id()  # Returns the id of the forum\r\nforum.title()  # Returns the title of the forum\r\nforum.category()  # Returns the category of the forum\r\nforum.is_closed()  # Returns whether the forum is closed or not\r\nforum.is_deleted()  # Returns whether the forum is deleted or not\r\nforum.time()  # Returns the activity of the forum\r\nforum.post_count()  # Returns the total post count of the forum\r\nforum.posts(page=1)  # Get the post in Forum Topic of a specified page. Images and some other stuff will not appear!\r\nforum.pretty_print_topic_data()  # Pretty print the topic data\r\n##########################################################################\r\n# IMPORTANT NOTE: To always get the updated data use the update_data() function\r\n##########################################################################\r\nforum.update_data()  # Update the data\r\n```\r\n\r\n## Bug Reporting\r\n\r\nAll Bugs to be reported on my [Scratch Profile](https://scratch.mit.edu/users/Sid72020123/)\r\nor [Github](https://github.com/Sid72020123/scratchlink/issues)\r\n\r\n## Data Providers\r\n\r\nData is taken from the [Scratch API](https://github.com/LLK/scratch-rest-api) by the Scratch Team\r\nand [Scratch DB](https://scratchdb.lefty.one/) by [@DatOneLefty](https://scratch.mit.edu/users/DatOneLefty/) on Scratch\r\n\r\n## Credits\r\n\r\nThis Library is made by [@Sid72020123](https://scratch.mit.edu/users/Sid72020123/) on Scratch\r\n\r\n## Change Log\r\n\r\n* 11/12/2021(v0.5) - First Started Making This Library.\r\n* 12/12/2021(v1.0) - Updated and First Release!\r\n* 27/01/2022(v1.0.1) - Updated Comments API\r\n\r\n## Thank You!\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sid72020123/scratchlink/",
    "keywords": "connect-scratch scratch-api api",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scratchlink",
    "package_url": "https://pypi.org/project/scratchlink/",
    "platform": "",
    "project_url": "https://pypi.org/project/scratchlink/",
    "project_urls": {
      "Homepage": "https://github.com/Sid72020123/scratchlink/"
    },
    "release_url": "https://pypi.org/project/scratchlink/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "ScratchLink is a simple Python Library to get the data of Scratch using the Scratch API. This library is simple to use. This library need no login!",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12708951,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f21c04e77478eb56e88a602e147755df1c53c0f84b41b95b6e54c2dae89cc6b",
          "md5": "8d2aae5b26cb2b81100c203c3b6f5aa7",
          "sha256": "400d751d17125bba4670d342932c80f36e51000a3eb8145ccc26fb28bf06616a"
        },
        "downloads": -1,
        "filename": "scratchlink-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d2aae5b26cb2b81100c203c3b6f5aa7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11592,
        "upload_time": "2021-12-12T12:01:51",
        "upload_time_iso_8601": "2021-12-12T12:01:51.324858Z",
        "url": "https://files.pythonhosted.org/packages/2f/21/c04e77478eb56e88a602e147755df1c53c0f84b41b95b6e54c2dae89cc6b/scratchlink-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbaea22add402bfbeaaef4a5fa63fbf8d55b00d048d3b8a30aa6a630be035a47",
          "md5": "73d941bc1373b27e5644032ceee52da0",
          "sha256": "fbbf86e970ecd0d28fd2b6ddf92d9294635dfe871ac034c64b4cd53dac940e9e"
        },
        "downloads": -1,
        "filename": "scratchlink-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73d941bc1373b27e5644032ceee52da0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11642,
        "upload_time": "2022-01-27T11:34:13",
        "upload_time_iso_8601": "2022-01-27T11:34:13.547218Z",
        "url": "https://files.pythonhosted.org/packages/db/ae/a22add402bfbeaaef4a5fa63fbf8d55b00d048d3b8a30aa6a630be035a47/scratchlink-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbaea22add402bfbeaaef4a5fa63fbf8d55b00d048d3b8a30aa6a630be035a47",
        "md5": "73d941bc1373b27e5644032ceee52da0",
        "sha256": "fbbf86e970ecd0d28fd2b6ddf92d9294635dfe871ac034c64b4cd53dac940e9e"
      },
      "downloads": -1,
      "filename": "scratchlink-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "73d941bc1373b27e5644032ceee52da0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11642,
      "upload_time": "2022-01-27T11:34:13",
      "upload_time_iso_8601": "2022-01-27T11:34:13.547218Z",
      "url": "https://files.pythonhosted.org/packages/db/ae/a22add402bfbeaaef4a5fa63fbf8d55b00d048d3b8a30aa6a630be035a47/scratchlink-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}