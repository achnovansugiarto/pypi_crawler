{
  "info": {
    "author": "",
    "author_email": "pyterraformer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/wayfair-incubator/pyterraformer/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/pyterraformer.svg)](https://pypi.org/project/pyterraformer/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/pyterraformer.svg)](https://pypi.python.org/pypi/pyterraformer)\n[![Downloads](https://img.shields.io/badge/dynamic/json.svg?label=downloads&url=https%3A%2F%2Fpypistats.org%2Fapi%2Fpackages%2Fpyterraformer%2Frecent&query=data.last_month&colorB=brightgreen&suffix=%2FMonth)](https://pypistats.org/packages/pyterraformer)\n\n# OSPO Project Template\n\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.0-4baaaa.svg)](CODE_OF_CONDUCT.md)\n\n## About The Project\n\nPyterraformer is a library for reading, modifying, and writing *human readable terraform code*. This is in contrast to\nlibraries such as the excellent [pyhcl2](https://github.com/amplify-education/python-hcl2), which don't support writing\nback in the human format. It is similar to [terraform-cdk](https://www.terraform.io/cdktf) in that it also enables\ndirectly executing terraform from python as well, but is different in that it can produce human readable code to check\nin. This opens up a range of options for creative developers.\n\nPyterraformer can be used for any of the following:\n\n- bulk generation of human readable terraform code\n- large scale refactoring\n- process automation, since as CI\n- accessing the power of Terraform directly from python\n- introspecting a terraform repo to collect information\n- and more!\n\n## Parsing and Modifying\n\nSpecifically, this library would enable reading this string\n\n```terraform\nresource \"aws_s3_bucket\" \"b\" {\n  bucket = \"my-tf-test-bucket\"\n\n  tags = {\n    Name = \"My bucket\"\n    Environment = \"Dev\"\n  }\n}\n```\n\ninto python, directly modifying the tags, and writing it back.\n\nLet's take a look.\n\n```python\nfrom pyterraformer import HumanSerializer\n\nhs = HumanSerializer(terraform='/path/to/my/terraform/binary')\n\nexample_string = '''resource \"aws_s3_bucket\" \"b\" {\n  bucket = \"my-tf-test-bucket\"\n\n  tags = {\n    Name        = \"My bucket\"\n    Environment = \"Dev\"\n  }\n}'''\n\n# parse a string into a list of terraform objects\nnamespace = hs.parse_string(example_string)\n\n# get the bucket from that list\nbucket = namespace.objects[0]\n\n# modify the bucket\nbucket.tags[\"Environment\"] = \"Prod\"\nbucket.bucket = 'my-updated-bucket'\n\n# and write the modified namespace back\n# formatting requires a valid terraform binary to be provided\nupdated = hs.render_object(bucket, format=True)\n\nassert updated == '''resource \"aws_s3_bucket\" \"b\" {\n  bucket = \"my-updated-bucket\"\n\n  tags = {\n    Name        = \"My bucket\"\n    Environment = \"Prod\"\n  }\n}\n'''\n\n```\n\n## Applying\n\nIf you just want to directly create/modify resources, you can do that too.\n\nFor example, creating or modifying GCS bucket with a local state store is as simple as the below.\n\n```python\nimport os\n\nfrom pyterraformer import Terraform, TerraformWorkspace, HumanSerializer, LocalBackend\nfrom pyterraformer.core.generics import BlockList\nfrom pyterraformer.core.resources import ResourceObject\n\n\nclass GoogleStorageBucket(ResourceObject):\n    \"\"\"Let's define a google storge bucket resource.\n    To get provider resources defined for you, check out the provider packages.\"\"\"\n    _type = 'google_storage_bucket'\n\n\nif __name__ == \"__main__\":\n    tf = Terraform(terraform_exec_path=r'/path/to/my/terraform/binary',\n                   backend=LocalBackend(path=os.getcwd()))\n    workspace = TerraformWorkspace(terraform=tf, path=os.getcwd(), serializer=HumanSerializer(terraform=tf))\n\n    namespace = workspace.get_file_safe('resource.tf')\n\n    namespace.add_object(GoogleStorageBucket(\n        id='my-new-bucket',\n        name=\"my-new-bucket\",\n        location=\"US-EAST1\",\n        project=\"my-project\",\n        force_destroy=True,\n        uniform_bucket_level_access=True,\n        website=BlockList([{\n            'not_found_page': \"404.html\"\n        }]),\n        cors=BlockList([{\n            'origin': [\n                \"https://readthedocs.org\"],\n            'method': [\n                \"GET\",\n                \"HEAD\",\n                \"PUT\",\n                \"POST\",\n                \"DELETE\"],\n            'response_header': [\n                \"*\"],\n            'max_age_seconds': 3601\n        }])\n    ))\n\n    workspace.save()\n\n    application_output = workspace.apply()\n```\n\n## Next Steps\n\nRead the [documentation](https://pyterraformer.readthedocs.io/en/latest/) to discover more, including how to work with\ndirectories, files, apply terraform directly, and get IDE auto-completion for your favorite providers.\n\n## Project Maturity\n`pyterraformer` is under active development; weâ€™re still working out key workflows and best practices. While it has\nbeen used extensively in internal projects, the open-source version contains significant rewrites for improved flexibility. \nWeâ€™re iterating fast and are likely to introduce breaking changes to existing APIs to improve the developer experience.\nFeedback is appreciated.\n\n### Installation\n\n`pyterraformer` is [hosted on PyPI](https://pypi.org/project/pyterraformer/), and is installable\nwith [pip](https://pip.pypa.io/en/stable/):\n\n```sh\npip install pyterraformer\n```\n\nTyped classes for IDE autocomplete and validation [if available] can be installed under the package name\npytf-[provider-owner]-[provider-name]\n\n```sh\npip install pytf-hashicorp-aws\n\n```\n\nAnd then imported in the following way\n\n```python\nfrom pyterraformer.providers.hashicorp.aws import aws_s3_bucket\n\n```\n\n## Documentation\n\nPrimary documentation is on [Read the Docs](https://pyterraformer.readthedocs.io/en/latest/)\n\n## Roadmap\n\nSee the [open issues](https://github.com/org_name/repo_name/issues) for a list of proposed features (and known issues).\n\n## Contributing\n\nContributions are what make the open source community such an amazing place to learn, inspire, and create. Any\ncontributions you make are **greatly appreciated**. For detailed contributing guidelines, please\nsee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\nDistributed under the `MIT License` License. See `LICENSE` for more information.\n\n## Contact\n\nProject Link: [https://github.com/org_name/repo_name](https://github.com/org_name/repo_name)\n\n## Acknowledgements\n\nThis template adapted from\n[https://github.com/othneildrew/Best-README-Template](https://github.com/othneildrew/Best-README-Template)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyterraformer",
    "package_url": "https://pypi.org/project/pyterraformer/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyterraformer/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyterraformer/0.0.1rc1/",
    "requires_dist": [
      "jinja2",
      "lark"
    ],
    "requires_python": "",
    "summary": "Enjoyable terraform manipulation from python.",
    "version": "0.0.1rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14285350,
  "releases": {
    "0.0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e310acb6e1cf3581063944fc7387f5f04bd6e0acc903a7b20c6b934deabed9",
          "md5": "c38e5cd5a3babee4916a9e9a7a34fc77",
          "sha256": "0bb05a297901ad18e0931c67634f02658b49d70605c8747f2f2f509ff521d5d1"
        },
        "downloads": -1,
        "filename": "pyterraformer-0.0.1rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c38e5cd5a3babee4916a9e9a7a34fc77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54838,
        "upload_time": "2022-06-29T14:14:01",
        "upload_time_iso_8601": "2022-06-29T14:14:01.540780Z",
        "url": "https://files.pythonhosted.org/packages/00/e3/10acb6e1cf3581063944fc7387f5f04bd6e0acc903a7b20c6b934deabed9/pyterraformer-0.0.1rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00e310acb6e1cf3581063944fc7387f5f04bd6e0acc903a7b20c6b934deabed9",
        "md5": "c38e5cd5a3babee4916a9e9a7a34fc77",
        "sha256": "0bb05a297901ad18e0931c67634f02658b49d70605c8747f2f2f509ff521d5d1"
      },
      "downloads": -1,
      "filename": "pyterraformer-0.0.1rc1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c38e5cd5a3babee4916a9e9a7a34fc77",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 54838,
      "upload_time": "2022-06-29T14:14:01",
      "upload_time_iso_8601": "2022-06-29T14:14:01.540780Z",
      "url": "https://files.pythonhosted.org/packages/00/e3/10acb6e1cf3581063944fc7387f5f04bd6e0acc903a7b20c6b934deabed9/pyterraformer-0.0.1rc1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}