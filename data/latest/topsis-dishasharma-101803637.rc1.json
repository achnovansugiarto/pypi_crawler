{
  "info": {
    "author": "Disha Sharma",
    "author_email": "dishasharmaj7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "TOPSIS\n===================\n\nIt is a method of compensatory aggregation that compares a set of alternatives by identifying weights for each criterion, normalising scores for each criterion and calculating the geometric distance between each alternative and the ideal alternative, which is the best score in each criterion.\n\n----------\n\n\nTopsisPy\n-------------\nTopsisPy is a Python Package implementing Topsis method used for multi-criteria decision analysis. Topsis stands for 'Technique for Order of Preference by Similarity to Ideal Solution'.\n\nTopsisPy intends to make the process of TOPSIS simple in python. Key features of the package are -\n\n> - Easy to use\n> - Numpy based\n> - Ideal for Students\n\n--------\nTopsis for decision making\n-------------\n\n#### Step 1. Construct the decision matrixes and determine the weights of criteria for k-decision makers. \n\n\n\n#### Step 2. Calculate the normalized decision matrix for each decision maker. \n\nThis step transforms various attribute dimensions into non-dimensional\nattributes which allows comparisons across criteria. Because various criteria\nare usually measured in various units, the scores in the evaluation matrix X\nhave to be transformed to a normalized scale. The normalization of values\ncan be carried out by one of the several known standardized formulas. \n\n\n#### Step 3. Determine the positive ideal and negative ideal solutions for each decision maker\n\nThe weighted normalized value  v is calculated by multiplying it with weight.\n\n#### Step 4. Calculate the separation measures from the positive ideal solution and the negative ideal solution. \n\nIdentify the positive ideal alternative (extreme performance on each criterion)\nand identify the negative ideal alternative (reverse extreme performance on each\ncriterion). The ideal positive solution is the solution that maximizes the benefit\ncriteria and minimizes the cost criteria whereas the negative ideal solution\nmaximizes the cost criteria and minimizes the benefit criteria. \n\n#### Step 5. Calculate the separation measures.\n\nIn the TOPSIS method a number of distance metrics can be applied.\n\n#### Step 6. Calculate the relative closeness to the positive ideal solution. \n\n#### Step 7. Rank the preference order or select the alternative closest to 1.\nA set of alternatives now can be ranked by the descending order of the value\nof Ri.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TOPSIS-DishaSharma-101803637",
    "package_url": "https://pypi.org/project/TOPSIS-DishaSharma-101803637/",
    "platform": "",
    "project_url": "https://pypi.org/project/TOPSIS-DishaSharma-101803637/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/TOPSIS-DishaSharma-101803637/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "To calculate TOPSIS",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8618257,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdb146b8eaeb7b97100b2cd0c185d704f3be5cf1131f9295fbae593da36e8d00",
          "md5": "ea135b11b8b7ea2ceea920bd5db64912",
          "sha256": "71fd32693e9b0c31b9bb55a5658f171b4028e16d757d0eeb3c0bc6ea8ecbc948"
        },
        "downloads": -1,
        "filename": "TOPSIS_DishaSharma_101803637-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea135b11b8b7ea2ceea920bd5db64912",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4178,
        "upload_time": "2020-11-09T22:39:16",
        "upload_time_iso_8601": "2020-11-09T22:39:16.834605Z",
        "url": "https://files.pythonhosted.org/packages/bd/b1/46b8eaeb7b97100b2cd0c185d704f3be5cf1131f9295fbae593da36e8d00/TOPSIS_DishaSharma_101803637-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bdb146b8eaeb7b97100b2cd0c185d704f3be5cf1131f9295fbae593da36e8d00",
        "md5": "ea135b11b8b7ea2ceea920bd5db64912",
        "sha256": "71fd32693e9b0c31b9bb55a5658f171b4028e16d757d0eeb3c0bc6ea8ecbc948"
      },
      "downloads": -1,
      "filename": "TOPSIS_DishaSharma_101803637-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea135b11b8b7ea2ceea920bd5db64912",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4178,
      "upload_time": "2020-11-09T22:39:16",
      "upload_time_iso_8601": "2020-11-09T22:39:16.834605Z",
      "url": "https://files.pythonhosted.org/packages/bd/b1/46b8eaeb7b97100b2cd0c185d704f3be5cf1131f9295fbae593da36e8d00/TOPSIS_DishaSharma_101803637-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}