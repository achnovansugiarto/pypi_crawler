{
  "info": {
    "author": "mivallion",
    "author_email": "mivallion@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# reactive_deliberative\n\n## Introduction\n\nThe reactive_deliberative project allows creating applications\nwith a reactive-deliberative architecture.\n\nThe hybrid deliberative-reactive architecture arose as a result of the recognition\nthat there is a use of symbolic knowledge in describing the behavior of an intelligent agent.\n\nSuch an architecture allows an agent with reactive behavior to flexibly adjust \nits behavior due to a high-level scheduler in accordance with the current task, \nwhile at the same time taking into account the state of the environment. For \nthe agent, which is a kind of intelligent system, it will provide an opportunity \nto respond to unplanned environmental changes.\n\nIn simple words, the agent follows the behavior described in the rules, interrupting for reactive actions.\n\n![architecture](./img/1.png)\n\nThis system is built using one the implementation of the Rete algorithms - [py_rete][py_rete].\n\n## Installation\n\nThis package is installable via pip with the following command:\n`pip install -U reactive_deliberative`.\n\n## The Basics\n\nThe two high-level structures to support reasoning with py_rete are **facts**\nand **productions**. \n\n### Facts\n\nFacts represent the basic units of knowledge that the productions match over.\nHere are a few examples of facts and how they work.\n\n1. *Facts* are a subclass of dict, so you can treat them similar to dictionaries.\n\n```python\n>>> f = Fact(a=1, b=2)\n>>> f['a']\n1\n```\n\n2. *Facts* extend dictionaries, so they also support positional values without\n   keys. These values are assigned numerical indices based on their position.\n\n```python\n>>> f = Fact('a', 'b', 'c')\n>>> f[0]\n'a'\n```\n\n3. *Facts* can support mixed positional and named arguments, but positional\n   must come before named and named arguments do not get positional references.\n\n```python\n>>> f = Fact('a', 'b', c=3, d=4)\n>>> f[0]\n'a'\n>>> f['c']\n3\n```\n\n5. *Facts* support nesting with other facts. \n\n```python\n>>> f = Fact(subfact=Fact())\nFact(subfact=Fact())\n```\n\nNote that there will be issues if facts contain other data structures that\ncontain facts (they will not be properly added to the rete network or to\nproductions).\n\n### Productions\n\n*Productions* have two components:\n* Conditions, which are essentially facts that can contain pattern matching\n  variables.\n* A Function, which is executed for each rule match, with the arguments to the\n  function being passed the bindings from pattern matching variables.\n\nHere is an example of a simple *Productions* that binds with all *Facts* that\nhave the color red and prints 'I found something red' for each one:\n\n```python\n@Production(Fact(color='red'))\ndef alert_something_red():\n    print(\"I found something red\")\n```\n\nProductions also support logical operators to express more complex conditions.\n\n```python\n@Production(AND(OR(Fact(color='red'),\n                   Fact(color='blue')),\n\t        NOT(Fact(color='green'))))\ndef alert_something_complex():\n    print(\"I found something red or blue without any green present\")\n```\n\nBitwise logical operators can be used as shorthand to make composing complex conditions easier.\n```python\n@Production((Fact(color='red') | Fact(color='blue')) & ~Fact(color='green'))\ndef alert_something_complex2():\n    print(\"I found something red or blue without any green present\")\n```\n\nIn addition to matching simple facts, pattern matching variables can be used to\nmatch values from Facts. Matching ensures that variable bindings are consistent\nacross conditions. Additionally, variables are passed to arguments in the function\nwith the same name during matching. For example, the following production finds\na Fact with a lastname attribute.  For each Fact it finds, it prints \"I found a\nfact with a lastname attribute: `<lastname>`\".  Note, the `V('lastname')`\ncorresponds to a variable named lastname that can bind with values from Facts\nduring matching.  Additionally the variable (`V('lastname')`) and the function\nargument `lastname` match have the same name, which enables the matcher to the\nvariable bindings into the function.\n```python\n@Production(Fact(lastname=V('lastname')))\ndef found_relatives(lastname):\n    print(\"I found a fact with a lastname: {}\".format(lastname))\n```\n\nIt is also possible to employ functional tests (lambdas or functions) using\n`Filter` conditions. Like the function that is being decorated, Filter\nconditions pass variable bindings to their equivelently named function\narguments. It is important to note that positive facts that bind with these\nvariables need to be listed in the production before the tests that use them.\n```python\n@Production(Fact(value=V('a')) &\n            Fact(value=V('b')) &\n            Filter(lambda a, b: a > b) &\n            Fact(value=V('c')) &\n            Filter(lambda b, c: b > c))\ndef three_values(a, b, c):\n    print(\"{} is greater than {} is greater than {}\".format(a, b, c))\n```\n\nIt is also possible to bind *facts* to variables as well, using the bitshift\noperator.\n```python\n@Production(V('name_fact') << Fact(name=V('name')))\ndef found_name(name_fact):\n    print(\"I found a name fact {}\".format(name_fact))\n```\n\nProductions can have priority and execution timeout:\n\n```python\n@Production(V('fact') << Fact(state=\"transform\"), priority=2, timeout=1)\nasync def transform(net, fact):\n...\n```\n\nProductions can be asynchronous:\n\n```python\n@Production(V('name_fact') << Fact(name=V('name')))\nasync def found_name(name_fact):\n    print(\"I found a name fact {} and going to sleep\".format(name_fact))\n    await asyncio.sleep(10)\n```\n\n### ReactiveDeliberative\n\nHere is how you create an engine:\n\n```python\nrd = ReactiveDeliberative()\n```\n\nOnce an engine has been created, then facts can be added to it.\n```python\nf1 = Fact(light_color=\"red\")\nrd.add_fact(f1)\n```\n\nNote, facts added to the network cannot contain any variables or they will\ntrigger an exception when added. Additionally, once a fact has been added to\nnetwork it is assigned a unique internal identifier.\n\nThis makes it possible to update the fact.\n```python\nf1['light_color'] = \"green\"\nnet.update_fact(f1)\n```\n\nIt also make it possible to remove the fact.\n```python\nrd.remove_fact(f1)\n```\n\nWhen updating a fact, note that it is not updated in the network until\nthe `update_fact` method is called on it. An update essentially equates to\nremoving and re-adding the fact.\n\nProductions can also be added to the network. Productions also can make use of\nthe `net` variable, which is automatically bound to the Rete network the\nproduction has been added to. This makes it possible for productions to update\nthe contents of the network when they are fired. For example, the following functions\nhave an argument called `net` that is bound to the rete network even though there is\nno variable by that name in the production conditions.\n```python\n>>> f1 = Fact(light_color=\"red\")\n>>> \n>>> @Production(V('fact') << Fact(light_color=\"red\"))\n>>> def make_green(net, fact):\n>>>\tprint('making green')\n>>>     fact['light_color'] = 'green'\n>>>     net.update_fact(fact)\n>>> \n>>> @Production(V('fact') << Fact(light_color=\"green\"))\n>>> def make_red(net, fact):\n>>>\tprint('making red')\n>>>     fact['light_color'] = 'red'\n>>>     net.update_fact(fact)\n>>> \n>>> rd = ReactiveDeliberative()\n>>> rd.add_fact(f1)\n>>> rd.add_production(make_green)\n>>> rd.add_production(make_red)\n```\n\nOnce the above fact and productions have been added the network can be run in the infinite loop. \n```python\n>>> rd.run()\nmaking green\nmaking red\nmaking green\nmaking red\nmaking green\n...\n```\n\n### Reactive predicates and actions\n\nPredicate functions and action functions must be asynchronous.\n\nThe predicate function can contain any calls and calculations,\nbut it must return a Boolean value. If the predicate is executed,\na reactive action will be performed. For example:\n\n```python\nasync def external_upload_predicate():\n    return await dumper.external_upload_predicate()\n\n\nasync def external_upload_action():\n    return await dumper.external_upload_action()\n```\n\nAfter declaring the function, you can add them to the engine:\n\n```python\nrd.add_reactive_action(external_upload_predicate, external_upload_action)\n```\n\nBy default, predicate trigger stops the deliberative loop for the duration of the reactive action.\nTo disable this future pass `force=False` argument in `add_reactive_action`:\n```python\nrd.add_reactive_action(external_upload_predicate, external_upload_action, force=False)\n```\n\n\n[py_rete]: https://github.com/cmaclell/py_rete\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mivallion/reactive_deliberative",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reactive-deliberative",
    "package_url": "https://pypi.org/project/reactive-deliberative/",
    "platform": null,
    "project_url": "https://pypi.org/project/reactive-deliberative/",
    "project_urls": {
      "Bug Tracker": "https://github.com/mivallion/reactive_deliberative/issues",
      "Homepage": "https://github.com/mivallion/reactive_deliberative"
    },
    "release_url": "https://pypi.org/project/reactive-deliberative/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Reactive-deliberative architecture framework",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14176800,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1c4926385f1390f455b5b6d623bc36719c297461e7031be986aae7d8b70421a",
          "md5": "f9f3a7d917a22c644802b1e5e4558e7c",
          "sha256": "bceacefb7042bff1305bef88d9ed53a4d10bcb8c0e158afb6fc8db24275cd72c"
        },
        "downloads": -1,
        "filename": "reactive_deliberative-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9f3a7d917a22c644802b1e5e4558e7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26540,
        "upload_time": "2022-06-19T11:53:08",
        "upload_time_iso_8601": "2022-06-19T11:53:08.110500Z",
        "url": "https://files.pythonhosted.org/packages/a1/c4/926385f1390f455b5b6d623bc36719c297461e7031be986aae7d8b70421a/reactive_deliberative-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb7f80dedb737a7b7cf23fb3e5f74f23dd6e25bb4f4e734af7f7085e4c9d5f34",
          "md5": "1f7f2fd4c604500dd567d0c446af24d7",
          "sha256": "bd8ce0615b0040e7f12791517fcec4c55c702a9ca33a2fd5f194c9735afceb71"
        },
        "downloads": -1,
        "filename": "reactive_deliberative-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1f7f2fd4c604500dd567d0c446af24d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 22391,
        "upload_time": "2022-06-19T11:53:10",
        "upload_time_iso_8601": "2022-06-19T11:53:10.283965Z",
        "url": "https://files.pythonhosted.org/packages/bb/7f/80dedb737a7b7cf23fb3e5f74f23dd6e25bb4f4e734af7f7085e4c9d5f34/reactive_deliberative-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1c4926385f1390f455b5b6d623bc36719c297461e7031be986aae7d8b70421a",
        "md5": "f9f3a7d917a22c644802b1e5e4558e7c",
        "sha256": "bceacefb7042bff1305bef88d9ed53a4d10bcb8c0e158afb6fc8db24275cd72c"
      },
      "downloads": -1,
      "filename": "reactive_deliberative-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f9f3a7d917a22c644802b1e5e4558e7c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26540,
      "upload_time": "2022-06-19T11:53:08",
      "upload_time_iso_8601": "2022-06-19T11:53:08.110500Z",
      "url": "https://files.pythonhosted.org/packages/a1/c4/926385f1390f455b5b6d623bc36719c297461e7031be986aae7d8b70421a/reactive_deliberative-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb7f80dedb737a7b7cf23fb3e5f74f23dd6e25bb4f4e734af7f7085e4c9d5f34",
        "md5": "1f7f2fd4c604500dd567d0c446af24d7",
        "sha256": "bd8ce0615b0040e7f12791517fcec4c55c702a9ca33a2fd5f194c9735afceb71"
      },
      "downloads": -1,
      "filename": "reactive_deliberative-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1f7f2fd4c604500dd567d0c446af24d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 22391,
      "upload_time": "2022-06-19T11:53:10",
      "upload_time_iso_8601": "2022-06-19T11:53:10.283965Z",
      "url": "https://files.pythonhosted.org/packages/bb/7f/80dedb737a7b7cf23fb3e5f74f23dd6e25bb4f4e734af7f7085e4c9d5f34/reactive_deliberative-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}