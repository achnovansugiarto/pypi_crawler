{
  "info": {
    "author": "Cariad Eccleston",
    "author_email": "cariad@cariad.earth",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "# 🙋 Asking\n\n**Asking** is a Python package for asking questions and getting answers.\n\n[![asciicast](https://asciinema.org/a/452525.png)](https://asciinema.org/a/452525)\n\n- [Getting started](#getting-started)\n  - [How does Asking work?](#how-does-asking-work)\n  - [Installation](#installation)\n  - [Quick-start example](#quick-start-example)\n- [Scripts](#scripts)\n  - [Script structure](#script-structure)\n  - [Asking for a value](#asking-for-a-value)\n  - [Offering the previous value as the default](#offering-the-previous-value-as-the-default)\n  - [Offering multiple choice responses](#offering-multiple-choice-responses)\n  - [Offering multiple choice responses with a default](#offering-multiple-choice-responses-with-a-default)\n  - [Dynamic values](#dynamic-values)\n  - [Multiple stages](#multiple-stages)\n- [Usage](#usage)\n  - [Loaders](#loaders)\n  - [States](#states)\n  - [Performing a script](#performing-a-script)\n  - [Running non-interactively and unit testing](#running-non-interactively-and-unit-testing)\n- [Actions](#actions)\n  - [ask](#ask)\n  - [goto](#goto)\n  - [responses](#responses)\n  - [stop](#stop)\n  - [text](#text)\n  - [title](#title)\n- [Project](#project)\n  - [Contributing](#contributing)\n  - [Licence](#licence)\n  - [Author](#author)\n  - [Acknowledgements](#acknowledgements)\n\n## Getting started\n\n### How does Asking work?\n\nIn a nutshell, your Python script invokes Asking with two inputs:\n\n1. A script to follow.\n1. A dictionary to read default values out of and populate with new values.\n\nWhen the script ends, Asking returns some state to describe the success of the interaction, then the populated dictionary is yours to do with as you please.\n\n### Installation\n\nAsking requires **Python 3.8** or later.\n\nInstall Asking via pip:\n\n```bash\npip install asking\n```\n\n### Quick-start example\n\nDownload the [sample script](https://raw.githubusercontent.com/cariad/asking/main/sample.asking.yml) to your working directory then run `asking` to perform it:\n\n```bash\nasking sample.asking.yaml\n```\n\nNote that this will perform the script, but will not load or save any responses. Performing a script via the CLI application is intended only for testing.\n\n## Scripts\n\n### Script structure\n\nA **script** is essentially a dictionary of **stages**, and a **stage** is a list of **actions**.\n\nA script always starts with a stage named \"start\", and actions are invoked sequentially in order.\n\n### Asking for a value\n\n```yaml\nstart:\n  - ask:\n      question: Name?\n      key: user.name\n      branches:\n        - response: \"^.+$\"\n          then:\n            - stop: true\n```\n\nThis script asks the user for their name then exits.\n\nThe script contains just one stage, named \"start\". The stage contains just one action: an \"ask\" action.\n\nThe \"ask\" action contains a \"question\", which is printed to the screen. The \"key\" describes where in the dictionary the user's answer should be saved. \"user.name\" describes the \"name\" key of the \"user\" sub dictionary.\n\nThe \"branches\" describe how to react to the user's answer. \"response\" is a regular expression. Asking checks the user's answer against each expression in order, and uses the first one that matches. In this case, there's only one choice. \"then\" describes the actions to invoke on that branch and, in this case, we \"stop\" and send truthiness back to the host application.\n\nFor example:\n\n```python\nfrom asking import demo\n\nscript = \"\"\"\nstart:\n  - ask:\n      question: Name?\n      key: user.name\n      branches:\n        - response: \"^.+$\"\n          then:\n            - stop: true\n\"\"\"\n\n# demo() runs non-interactively with preset directions and\n# is intended for demonstrating only. See the usage\n# documentation for implementation guidance.\n\ndemo(script, directions={\"user\": {\"name\": \"Bobby Pringles\"}})\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nName?\n: Bobby Pringles\n\nStop reason: True\nResponses:\n{\n  \"user\": {\n    \"name\": \"Bobby Pringles\"\n  }\n}\n```\n\n<!--edition-exec range=end-->\n\n### Offering the previous value as the default\n\n```yaml\nstart:\n  - ask:\n      question: Name?\n      key: user.name\n      recall: true\n      branches:\n        - response: \"^.+$\"\n          then:\n            - stop: true\n```\n\nThis example is identical to the previous except \"recall\" is now truthy. Asking will read the dictionary's current \"key\" value and offer it as the default value.\n\nFor example:\n\n```python\nfrom asking import demo\n\nscript = \"\"\"\nstart:\n  - ask:\n      question: Name?\n      key: user.name\n      recall: true\n      branches:\n        - response: \"^.+$\"\n          then:\n            - stop: true\n\"\"\"\n\n# demo() runs non-interactively with preset directions and\n# is intended for demonstrating only. See the usage\n# documentation for implementation guidance.\n\ndemo(\n    script,\n    responses={\n        \"user\": {\n            \"name\": \"Bobby Sprinkles\",\n        },\n    },\n    directions={\n        \"user\": {\n            \"name\": \"Bobby Pringles\",\n        },\n    },\n)\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nName? (default: Bobby Sprinkles)\n: Bobby Pringles\n\nStop reason: True\nResponses:\n{\n  \"user\": {\n    \"name\": \"Bobby Pringles\"\n  }\n}\n```\n\n<!--edition-exec range=end-->\n\n### Offering multiple choice responses\n\n```yaml\nstart:\n  - ask:\n      question: Cake?\n      branches:\n        - response: y\n          then:\n            - stop: true\n        - response: n\n          then:\n            - stop: false\n```\n\nIn this example, the responses are plain strings rather than regular expressions. Asking will present all the available options.\n\nIf the user enters \"y\" then Asking will stop and return truthiness to the host application. If the user enters \"n\" then Asking will stop and return falsiness.\n\nFor example:\n\n```python\nfrom asking import demo\n\nscript = \"\"\"\nstart:\n  - ask:\n      question: Cake?\n      key: cake\n      branches:\n        - response: y\n          then:\n            - stop: true\n        - response: n\n          then:\n            - stop: false\n\"\"\"\n\n# demo() runs non-interactively with preset directions and\n# is intended for demonstrating only. See the usage\n# documentation for implementation guidance.\n\ndemo(script, directions={\"cake\": \"n\"})\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nCake? (y/n)\n: n\n\nStop reason: False\nResponses:\n{\n  \"cake\": \"n\"\n}\n```\n\n<!--edition-exec range=end-->\n\n### Offering multiple choice responses with a default\n\n```yaml\nstart:\n  - ask:\n      question: Cake?\n      branches:\n        - response: [y, \"\"]\n          then:\n            - stop: true\n        - response: n\n          then:\n            - stop: false\n```\n\nThis is identical to the previous example, except now the first checked response is a list of options rather than a single string. Asking will use the first branch if the user hits enter without entering a value.\n\nFor example:\n\n```python\nfrom asking import demo\n\nscript = \"\"\"\nstart:\n  - ask:\n      question: Cake?\n      key: cake\n      branches:\n        - response: [y, \"\"]\n          then:\n            - stop: true\n        - response: n\n          then:\n            - stop: false\n\"\"\"\n\n# demo() runs non-interactively with preset directions and\n# is intended for demonstrating only. See the usage\n# documentation for implementation guidance.\n\ndemo(script, directions={\"cake\": \"\"})\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nCake? (Y/n)\n:\n\nStop reason: True\nResponses:\n{\n  \"cake\": \"\"\n}\n```\n\n<!--edition-exec range=end-->\n\n### Dynamic values\n\n```yaml\nstart:\n  - text: Today's date is {today}.\n  - ask:\n      question: Is this correct?\n      branches:\n        - response: y\n          then:\n            - stop: true\n        - response: n\n          then:\n            - stop: false\n```\n\nTo set some text value at runtime, specify the key in braces and include the value in the state when performing the script:\n\n```python\nfrom asking import ask, State, YamlStringLoader\nfrom datetime import date\n\n\nloader = YamlStringLoader(\"\"\"\nstart:\n  - text: Today's date is {today}.\n  - ask:\n      question: Is this correct?\n      key: correct\n      branches:\n        - response: y\n          then:\n            - stop: true\n        - response: n\n          then:\n            - stop: false\n\"\"\")\n\nstate = State(\n    {},\n    color=False,\n    directions={\n      \"correct\": \"y\",\n    },\n    references={\n        \"today\": date.today(),\n    },\n)\n\nask(loader, state)\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nToday's date is 2021-11-30.\n\nIs this correct? (y/n)\n: y\n```\n\n<!--edition-exec range=end-->\n\n### Multiple stages\n\n```yaml\nstart:\n  - ask:\n      question: Cake?\n      key: cake\n      branches:\n        - response: [y, \"\"]\n          then:\n            - goto: cake\n        - response: n\n          then:\n            - goto: tea\n\ncake:\n  - ask:\n      question: Which cake?\n      key: which_cake\n      branches:\n        - response: \"^.+$\"\n          then:\n            - goto: tea\n\ntea:\n  - ask:\n      question: Tea?\n      key: tea\n      branches:\n        - response: [y, \"\"]\n          then:\n            - goto: final\n        - response: n\n          then:\n            - goto: final\n\nfinal:\n  - text: Thank you for your order!\n  - stop: true\n```\n\nThis example presents multiple questions. If the user wants cake then they're asked which one. If they don't want cake, or if they answered which cake they want, then they're asked if they want tea. Either way, the script ends with a thank-you message then stops successfully.\n\nFor example:\n\n```python\nfrom asking import demo\n\nscript = \"\"\"\nstart:\n  - ask:\n      question: Cake?\n      key: cake\n      branches:\n        - response: [y, \"\"]\n          then:\n            - goto: cake\n        - response: n\n          then:\n            - goto: tea\n\ncake:\n  - ask:\n      question: Which cake?\n      key: which_cake\n      branches:\n        - response: \"^.+$\"\n          then:\n            - goto: tea\n\ntea:\n  - ask:\n      question: Tea?\n      key: tea\n      branches:\n        - response: [y, \"\"]\n          then:\n            - goto: final\n        - response: n\n          then:\n            - goto: final\n\nfinal:\n  - text: Thank you for your order!\n  - stop: true\n\"\"\"\n\n# demo() runs non-interactively with preset directions and\n# is intended for demonstrating only. See the usage\n# documentation for implementation guidance.\n\ndemo(\n    script,\n    directions={\n        \"cake\": \"\",\n        \"which_cake\": \"Battenberg\",\n        \"tea\": \"\",\n    },\n)\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nCake? (Y/n)\n:\n\nWhich cake?\n: Battenberg\n\nTea? (Y/n)\n:\n\nThank you for your order!\n\nStop reason: True\nResponses:\n{\n  \"cake\": \"\",\n  \"tea\": \"\",\n  \"which_cake\": \"Battenberg\"\n}\n```\n\n<!--edition-exec range=end-->\n\n## Usage\n\n### Loaders\n\nAsking offers the following options for loading a YAML script:\n\n- `DictionaryLoader` loads any Python dictionary.\n- `FileLoader` loads a YAML file.\n- `YamlResourceLoader` loads a YAML package resource.\n- `YamlStringLoader` loads a YAML string.\n\n### States\n\nA `State` instance must be made available to your script. This describes the dictionary to read/write and any dynamic values.\n\n### Performing a script\n\nEssentially, a script is performed by:\n\n1. Constructing a loader.\n1. Constructing a state, including your responses dictionary.\n1. Passing the loader and state into `ask()`.\n\n```python\nfrom asking import ask, State, YamlResourceLoader\n\nresponses = {}\n\nloader = YamlResourceLoader(__package__, \"sample.asking.yml\")\nstate = State(responses)\n\nstop_reason = ask(loader, state)\n```\n\nWhen `ask()` is complete, it will return whatever value the performance's \"stop\" action returned, and the responses dictionary will be populated with the user's answers.\n\n### Running non-interactively and unit testing\n\nBy default, Asking will -- naturally -- ask users for input.\n\nTo test your script without human interaction, you can pass directions into the state. This is a dictionary containing the value to respond with for each question key.\n\nFor example:\n\n```python\nfrom asking import ask, State, FileLoader\nfrom pprint import pprint\n\n\nresponses = {}\n\nloader = FileLoader(\"sample.asking.yml\")\nstate = State(\n    responses,\n    color=False,\n    directions={\n        \"ready\": \"y\",\n        \"user\": {\n            \"name\": \"Bobby Pringles\",\n            \"smell\": \"Sulphur\",\n        },\n        \"save\": \"y\",\n    },\n)\n\nstop_reason = ask(loader, state)\n\nprint(\"Stop reason:\", stop_reason)\npprint(responses)\n```\n\n<!--edition-exec as=markdown fence=backticks host=shell range=start-->\n\n```text\nAsking Demo\n\nWelcome to the Asking demo!\n\nAre you ready? (y/N)\n: y\n\nGreat! Let's get started!\n\nWhat's your name?\n: Bobby Pringles\n\nWhat's your favourite smell?\n: Sulphur\n\nHere's your configuration:\n\n{\n  \"ready\": \"y\",\n  \"user\": {\n    \"name\": \"Bobby Pringles\",\n    \"smell\": \"Sulphur\"\n  }\n}\n\nOkay to save? (y/n)\n: y\n\nStop reason: True\n{'ready': 'y',\n 'save': 'y',\n 'user': {'name': 'Bobby Pringles', 'smell': 'Sulphur'}}\n```\n\n<!--edition-exec range=end-->\n\nThese directions also allow you to invoke Asking in unit tests, and assert on stop reasons and dictionary values for given inputs.\n\n## Actions\n\n### ask\n\n```yaml\nask:\n  branches:\n    - response: string or string list, required\n      then:\n        - action\n  key:      string\n  question: string, required\n  recall:   boolean, default=False\n```\n\n\"ask\" asks a question.\n\n`key` describes the path in the responses dictionary to read/write the value. Use `.` as a path separator.\n\n`recall` indicates whether to load the response dictionary's current value as the default answer.\n\n`branches` describes the possible reactions to the user's answer.\n\n`response` can be a string value, list of string values, or a regular expression. The first branch with a matching response will be followed.\n\n`then` describes the list of actions to perform when the branch is followed.\n\n### goto\n\n```yaml\ngoto: stage\n```\n\nWhen a \"goto\" action is encountered then execution will jump immediately to the specified stage.\n\n### responses\n\n```yaml\nresponses: json\n```\n\nThe \"responses\" action prints the current values of the response dictionary.\n\n### stop\n\n```yaml\nstop: any\n```\n\nThe \"stop\" action immediately stops the script and returns the reason to the host application.\n\nThe reason is required but can be any value; even a list or dictionary.\n\n### text\n\n```yaml\ntext: string\n```\n\nThe \"text\" action simply prints a line of text.\n\n### title\n\n```yaml\ntitle: string\n```\n\nThe \"title\" action prints a line of text formatted as a title.\n\n## Project\n\n### Contributing\n\nTo contribute a bug report, enhancement or feature request, please raise an issue at [github.com/cariad/asking/issues](https://github.com/cariad/asking/issues).\n\nIf you want to contribute a code change, please raise an issue first so we can chat about the direction you want to take.\n\n### Licence\n\nAsking is released at [github.com/cariad/asking](https://github.com/cariad/asking) under the MIT Licence.\n\nSee [LICENSE](https://github.com/cariad/asking/blob/main/LICENSE) for more information.\n\n### Author\n\nHello! 👋 I'm **Cariad Eccleston** and I'm a freelance DevOps and backend engineer. My contact details are available on my personal wiki at [cariad.earth](https://cariad.earth).\n\nPlease consider supporting my open source projects by [sponsoring me on GitHub](https://github.com/sponsors/cariad/).\n\n### Acknowledgements\n\n- ❤️ to [jonathaneunice/ansiwrap](https://github.com/jonathaneunice/ansiwrap) for neatly wrapping strings containing ANSI escape codes.\n- Command line support by [Cline](https://github.com/cariad/cline).\n- YAML support by [PyYAML](https://pyyaml.org/).\n- This documentation was pressed by [Edition](https://github.com/cariad/edition).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cariad/asking",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asking",
    "package_url": "https://pypi.org/project/asking/",
    "platform": null,
    "project_url": "https://pypi.org/project/asking/",
    "project_urls": {
      "Homepage": "https://github.com/cariad/asking"
    },
    "release_url": "https://pypi.org/project/asking/1.0.3/",
    "requires_dist": [
      "ansiscape (~=1.1.2)",
      "ansiwrap (~=0.8)",
      "cline (~=1.1)",
      "pyyaml (~=6.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Asking questions and getting answers",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14502507,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "327a2281391f61ba2e51a3a46f191ee63083da3acf6a2e1dc69b0e6411f8a734",
          "md5": "e95ce66ee9718fb321f8d562b2960046",
          "sha256": "015cebd0820f74fc36c0eb90d5fc7af1e8d01961c4e0e82ecd817a8f678d95a8"
        },
        "downloads": -1,
        "filename": "asking-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e95ce66ee9718fb321f8d562b2960046",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25157,
        "upload_time": "2021-11-30T15:09:25",
        "upload_time_iso_8601": "2021-11-30T15:09:25.247384Z",
        "url": "https://files.pythonhosted.org/packages/32/7a/2281391f61ba2e51a3a46f191ee63083da3acf6a2e1dc69b0e6411f8a734/asking-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52e8650fb3daaf45e66a7f5527de6ba99741b633423a5a24f362d3af3de85f8e",
          "md5": "dacfc31507c8164ff1e898fac7243811",
          "sha256": "8e1982e4db8215c5df9d0eef1a41e2db4c11be2793efd209fb0b2edc2a00d37d"
        },
        "downloads": -1,
        "filename": "asking-1.0.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dacfc31507c8164ff1e898fac7243811",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 2275,
        "upload_time": "2021-11-17T10:32:27",
        "upload_time_iso_8601": "2021-11-17T10:32:27.228548Z",
        "url": "https://files.pythonhosted.org/packages/52/e8/650fb3daaf45e66a7f5527de6ba99741b633423a5a24f362d3af3de85f8e/asking-1.0.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62206240b2e5c8df63a98f4128212d3ec54ba2c2b6a754e0050a0c985da2dc94",
          "md5": "18da1e790537984b8964ba7104acdb2f",
          "sha256": "1b0ee92c3e7001b05c5f7442bf2800722c266baca77e039b14bddc618eb77805"
        },
        "downloads": -1,
        "filename": "asking-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18da1e790537984b8964ba7104acdb2f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23128,
        "upload_time": "2021-11-27T17:30:39",
        "upload_time_iso_8601": "2021-11-27T17:30:39.261302Z",
        "url": "https://files.pythonhosted.org/packages/62/20/6240b2e5c8df63a98f4128212d3ec54ba2c2b6a754e0050a0c985da2dc94/asking-1.0.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd980f5ce26b2fb70ee14a0d07b8707f7d81ebe10e1b3be0d89d289d0ebbead7",
          "md5": "24ef1a7ea24c737654ae48016d44c40b",
          "sha256": "23e59cca4d6e15401d4ef0c2acbbf3fa56decf0b10ece7472dfabc93fcb38e4d"
        },
        "downloads": -1,
        "filename": "asking-1.0.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24ef1a7ea24c737654ae48016d44c40b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23281,
        "upload_time": "2021-11-28T08:42:26",
        "upload_time_iso_8601": "2021-11-28T08:42:26.884890Z",
        "url": "https://files.pythonhosted.org/packages/fd/98/0f5ce26b2fb70ee14a0d07b8707f7d81ebe10e1b3be0d89d289d0ebbead7/asking-1.0.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cda8c458958a80d87afe003714723d0173e84957809d3a8898288232a2147c27",
          "md5": "f41263391409b6c816b227937ef86675",
          "sha256": "bc7f8289a5a1fb945a72a5f16da0bc09f56870f057e70faf9ebde8b604cb2566"
        },
        "downloads": -1,
        "filename": "asking-1.0.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f41263391409b6c816b227937ef86675",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23121,
        "upload_time": "2021-11-28T14:23:13",
        "upload_time_iso_8601": "2021-11-28T14:23:13.768084Z",
        "url": "https://files.pythonhosted.org/packages/cd/a8/c458958a80d87afe003714723d0173e84957809d3a8898288232a2147c27/asking-1.0.0a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e5c50d4877bb29e792faf5709539633de32f663d4253b471476ede40c1e04a8",
          "md5": "dd8a8f2245c3a2a3fd1f9dc0a5ac84f8",
          "sha256": "583e94205c18188eae94d750e472e7c6a7ae58118846f2ae2e18d45fbd3779e4"
        },
        "downloads": -1,
        "filename": "asking-1.0.0a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd8a8f2245c3a2a3fd1f9dc0a5ac84f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23150,
        "upload_time": "2021-11-28T14:55:13",
        "upload_time_iso_8601": "2021-11-28T14:55:13.461701Z",
        "url": "https://files.pythonhosted.org/packages/8e/5c/50d4877bb29e792faf5709539633de32f663d4253b471476ede40c1e04a8/asking-1.0.0a4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41b5c5da35028a4d9979fc0976a3e46051cdaa80f53d0c72fadb2e3eaaff670a",
          "md5": "951c1d90ccd18ab5f81d7afacfdcef7a",
          "sha256": "804ace22bce0fc4a8c7f8e1313be34ee5c28aa410b406746d07c2aa74f26659d"
        },
        "downloads": -1,
        "filename": "asking-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "951c1d90ccd18ab5f81d7afacfdcef7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25147,
        "upload_time": "2022-07-21T06:49:16",
        "upload_time_iso_8601": "2022-07-21T06:49:16.972319Z",
        "url": "https://files.pythonhosted.org/packages/41/b5/c5da35028a4d9979fc0976a3e46051cdaa80f53d0c72fadb2e3eaaff670a/asking-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed5f1793e2577c94f85ef36c88a4cc0f5f2738f36b786e6fcd23711c1c4e9933",
          "md5": "aa99b2d8e19d6a8b5ca5770ebc13284a",
          "sha256": "a7cb1c5fcf01c0d5cba5c590fad8ed526c05134024dc71213dce2372a24ec74e"
        },
        "downloads": -1,
        "filename": "asking-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa99b2d8e19d6a8b5ca5770ebc13284a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25148,
        "upload_time": "2022-07-21T07:35:17",
        "upload_time_iso_8601": "2022-07-21T07:35:17.304936Z",
        "url": "https://files.pythonhosted.org/packages/ed/5f/1793e2577c94f85ef36c88a4cc0f5f2738f36b786e6fcd23711c1c4e9933/asking-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1552328785f31c65c51cd0be4b5161d05ef21bb97b092b39598b73fdb71a398d",
          "md5": "afa5f0c856022d075e8eb82488c639e9",
          "sha256": "f9d1e711ad2fa059ddf216f742dd0b30b39d6f027d33609a42ba49b43f4e8a00"
        },
        "downloads": -1,
        "filename": "asking-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afa5f0c856022d075e8eb82488c639e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25150,
        "upload_time": "2022-07-21T08:00:05",
        "upload_time_iso_8601": "2022-07-21T08:00:05.983704Z",
        "url": "https://files.pythonhosted.org/packages/15/52/328785f31c65c51cd0be4b5161d05ef21bb97b092b39598b73fdb71a398d/asking-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1552328785f31c65c51cd0be4b5161d05ef21bb97b092b39598b73fdb71a398d",
        "md5": "afa5f0c856022d075e8eb82488c639e9",
        "sha256": "f9d1e711ad2fa059ddf216f742dd0b30b39d6f027d33609a42ba49b43f4e8a00"
      },
      "downloads": -1,
      "filename": "asking-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afa5f0c856022d075e8eb82488c639e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 25150,
      "upload_time": "2022-07-21T08:00:05",
      "upload_time_iso_8601": "2022-07-21T08:00:05.983704Z",
      "url": "https://files.pythonhosted.org/packages/15/52/328785f31c65c51cd0be4b5161d05ef21bb97b092b39598b73fdb71a398d/asking-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}