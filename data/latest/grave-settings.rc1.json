{
  "info": {
    "author": "Ryan McConnell",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Grave Settings\n\nA library for automatic serialization of python object hierarchies to storage. Most python objects are \ncompatible without any extra code, and there are several tools for fine-grain control.\n\nThe framework uses either duck typing or strong typing to allow objects define custom behaviors and defines a Formatter \nclass to allow for user defined input/output formats\n\nPre-defined formats:\n- json (via built in json module)\n- toml (read via tomlib, write enabled when tomli-w module is installed)\n- bson (only tested experimentally)\n\nRed the [documenation](https://ilikescaviar.github.io/GraveSettings/) for examples and important considerations.\n\n## Features\n\n- Save / Import types to reconstruct object hierarchies\n- Preserve \"is\" relationships automatically by scanning object ids\n- Abstractions for object version management for easing continuous deployment\n- OrderedHandler objects allow for custom serialization / deserialization logic for types without using inheritance or duck typing\n- Detect circular references\n- Event handlers for finalizing serialization / deserialization (intended to fix circular references)\n- Semantic objects for communicating options to the formatter (ex. security options for loading of arbitrary types)\n\n<details><summary>Default standard handlers</summary>\n<p>\nDefining new handlers or adding functionality to the default handlers is easy, but some types have already been done:\n\n| Name         | Description                                                  |\n|--------------|--------------------------------------------------------------|\n| Type         | built-in python type object                                  |\n| NoneType     | None                                                         |\n| Iterable     | General catch all for Iterable defined in collections module |\n| Mapping      | General catch all for Mapping defined in collections module  |\n| FunctionType | Python user-defined function                                 |\n| date         | from datetime module                                         |\n| datetime     | from datetime module                                         |\n| timedelta    | from datetime module                                         |\n| Enum         | from enum module                                             |\n\nThere is still a ways to go before most of the built in types have handlers. To see how the handlers work read:\n[default_handlers.py](src/grave_settings/default_handlers.py)\n\n</p>\n</details>\n\n## In progress\n- Validation support\n- Automated Qt GUI interface for editing settings objects\n\n\n## Code Example\nHere is a quick example that serializes and then deserializes a custom object hierarchy with the default built in classes\n\n\n```python\nfrom datetime import date\n\nfrom grave_settings.formatters.toml import TomlFormatter\n\n\nclass Color:\n    def __init__(self, r, g, b):\n        self.r = r\n        self.g = g\n        self.b = b\n\n    def __str__(self):\n        return f'Color(r={self.r}, g={self.g}, b={self.b})'\n\n\nclass MyObject:\n    def __init__(self):\n        self.integer = 1\n        self.string = 'b'\n        self.function = print  # demonstrates handling a function\n        self.type_object = int  # demonstrates handling a type\n        # demonstrates handling a list of date objects\n        self.dates = [date(year=2022, month=1, day=1), date(year=2023, month=2, day=2)]\n        # demonstrates handling a nested object\n        self.color = Color(255, 255, 255)\n\nformatter = TomlFormatter()\nobj_str = formatter.dumps(MyObject())\nprint(obj_str)\n```\n\nThis will output:\n\n```toml\n__class__ = \"__main__.MyObject\"\ninteger = 1\nstring = \"b\"\n\n[color]\n__class__ = \"__main__.Color\"\nb = 255\ng = 255\nr = 255\n\n[[dates]]\n__class__ = \"datetime.date\"\nstate = [\n    2022,\n    1,\n    1,\n]\n\n[[dates]]\n__class__ = \"datetime.date\"\nstate = [\n    2023,\n    2,\n    2,\n]\n```\n\nNow if we take this string and deserialize it with the same (or equivalent) formatter:\n\n```python\nfrom grave_settings.formatters.toml import TomlFormatter\nformatter = TomlFormatter()\nremade_obj = formatter.loads(obj_str)\nprint(f'''\ninteger = {remade_obj.integer}\nstring = {remade_obj.string}\nfunction = {remade_obj.function}\ntype_object = {remade_obj.type_object}\ndates = {remade_obj.dates}\ncolor = {remade_obj.color}\n''')\n```\n\nWe get:\n\n```\ninteger = 1\nstring = b\nfunction = <built-in function print>\ntype_object = <class 'int'>\ndates = [datetime.date(2022, 1, 1), datetime.date(2023, 2, 2)]\ncolor = Color(r=255, g=255, b=255)\n```\n\nIt is recommended to use the Serializable type (in this module) or handlers instead of using the naked objects like above.\nRead the documentation for more on this.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ILikesCaviar/GraveSettings",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grave-settings",
    "package_url": "https://pypi.org/project/grave-settings/",
    "platform": null,
    "project_url": "https://pypi.org/project/grave-settings/",
    "project_urls": {
      "Homepage": "https://github.com/ILikesCaviar/GraveSettings"
    },
    "release_url": "https://pypi.org/project/grave-settings/0.1.1/",
    "requires_dist": [
      "ordered-set (>=4.1.0)",
      "observer-hooks (>=1.3.0)"
    ],
    "requires_python": ">=3.0",
    "summary": "A library for automatic serialization of python object hierarchies to storage",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16564448,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14a160c9cf7274c1f705abd394248593ede8e58bb3c65466aeacdfc5f9e4d393",
          "md5": "fb531478517a25590b5ef0bb44f3cb09",
          "sha256": "6d1b10d0beebf1d4bf96c1b741401df7ab53dca445b1b94b6aeda4ccedfdd611"
        },
        "downloads": -1,
        "filename": "grave_settings-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb531478517a25590b5ef0bb44f3cb09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 31698,
        "upload_time": "2023-01-25T17:08:29",
        "upload_time_iso_8601": "2023-01-25T17:08:29.710354Z",
        "url": "https://files.pythonhosted.org/packages/14/a1/60c9cf7274c1f705abd394248593ede8e58bb3c65466aeacdfc5f9e4d393/grave_settings-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f07d8ed9b6b93d6b0e739377e941c437b464ac1179e8c8e95ce26b2dcf40eda4",
          "md5": "7454197952ffb8976b6b4c831d748db8",
          "sha256": "01a553b0cdb39ffe3518a73e4642992f2bb63e52cd1cfcc233506b0c7c13c0cb"
        },
        "downloads": -1,
        "filename": "grave-settings-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7454197952ffb8976b6b4c831d748db8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 26941,
        "upload_time": "2023-01-25T17:08:31",
        "upload_time_iso_8601": "2023-01-25T17:08:31.881437Z",
        "url": "https://files.pythonhosted.org/packages/f0/7d/8ed9b6b93d6b0e739377e941c437b464ac1179e8c8e95ce26b2dcf40eda4/grave-settings-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14a160c9cf7274c1f705abd394248593ede8e58bb3c65466aeacdfc5f9e4d393",
        "md5": "fb531478517a25590b5ef0bb44f3cb09",
        "sha256": "6d1b10d0beebf1d4bf96c1b741401df7ab53dca445b1b94b6aeda4ccedfdd611"
      },
      "downloads": -1,
      "filename": "grave_settings-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb531478517a25590b5ef0bb44f3cb09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 31698,
      "upload_time": "2023-01-25T17:08:29",
      "upload_time_iso_8601": "2023-01-25T17:08:29.710354Z",
      "url": "https://files.pythonhosted.org/packages/14/a1/60c9cf7274c1f705abd394248593ede8e58bb3c65466aeacdfc5f9e4d393/grave_settings-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f07d8ed9b6b93d6b0e739377e941c437b464ac1179e8c8e95ce26b2dcf40eda4",
        "md5": "7454197952ffb8976b6b4c831d748db8",
        "sha256": "01a553b0cdb39ffe3518a73e4642992f2bb63e52cd1cfcc233506b0c7c13c0cb"
      },
      "downloads": -1,
      "filename": "grave-settings-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7454197952ffb8976b6b4c831d748db8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 26941,
      "upload_time": "2023-01-25T17:08:31",
      "upload_time_iso_8601": "2023-01-25T17:08:31.881437Z",
      "url": "https://files.pythonhosted.org/packages/f0/7d/8ed9b6b93d6b0e739377e941c437b464ac1179e8c8e95ce26b2dcf40eda4/grave-settings-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}