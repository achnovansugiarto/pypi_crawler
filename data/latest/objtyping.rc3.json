{
  "info": {
    "author": "Song Hui",
    "author_email": "songofhawk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# object converter from primitive and to primitive\n- @author: 宋辉\n- @email: songofhawk@gmail.com\n\n## Origins\nPython being a dynamically typed language, developers are not in the habit of defining types for their data. This is flexible, but not convenient enough when dealing with complex business logic - the lack of type checking can make it hard to find errors, and there are no code hints when coding in the IDE. So this tool was developed to fix it.\n\n## Usage-basic\n* First define the business class and define the type of each field through class variables.\n\n```python\nfrom typing import List\n\n\nclass Person:\n    name: str\n    age: int\n\n\nclass Company:\n    name: str\n    revenue: float\n    employees: List[Person]\n```\nThe reason why class variables are chosen for definition is that it is the most concise and intuitive. In contrast, there is no way to get the type definition (type_hint) if you initialize the instance variable in the __init__ method, and it is obviously more complicated if you use the @property annotation or getter, setter methods. They are not as simple and elegant as defining class variables directly. But there is a downside to using class variables: it is used here as metadata, and if you really need to define variables shared at the class level, it is impossible to distinguish them. This problem can be solved later by developing custom annotations.\n\n* The next step is to transform the dict-list nested data, which matches the structure of this class definition, into an instance object of the class.\n```python\nfrom objtyping import objtyping\n\ncompany1 = objtyping.from_primitive({\n    'name': 'Apple',\n    'revenue': 18.5,\n    'employees': [{\n        'name': 'Tom',\n        'age': 20\n    }, {\n        'name': 'Jerry',\n        'age': 31\n    }]\n}, Company)\n\n```\nNow company1 is a complete Company object, and you can directly access the properties in it in the form of company1.name, company1.employees[0].name, etc.\n\n* Of course, you can also turn the business object back into a dict-list nested form\n```python\nfrom objtyping import objtyping\n\ndict_list = objtyping.to_primitive(company1)\n```\nThe primitve object, at this point, is a large pile of primitive type data nested at the dict and list levels\n\n\n## Scenes\n### Initializing an object\nPython does not have as convenient a way to initialize objects as js, but with this tool it can be written like this (which is the summary of the previous basic use).\n```python\nfrom typing import List\n\nfrom objtyping import objtyping\n\n\nclass Person:\n    name: str\n    age: int\n\n\nclass Company:\n    name: str\n    revenue: float\n    employees: List[Person]\n\n    def __str__(self):  \n        return \"'{}' has {} employees: {}\".format(self.name, len(self.employees), ' and '.join(map(lambda emp: emp.name, self.employees)))\n\n\nif __name__ == '__main__':\n    company1 = objtyping.from_primitive({\n        'name': 'Apple',\n        'revenue': 18.5,\n        'employees': [{\n            'name': 'Tom',\n            'age': 20\n        }, {\n            'name': 'Jerry',\n            'age': 31\n        }]\n    }, Company)\n\n    print(company1)\n\n```\n\noutput:\n```console\n'Apple' has 2 employees: Tom and Jerry\n```\n\n### serialization / deserialization\nPython's common serialization requirements, including the json and yaml data formats, have relatively well-developed libraries for handling them. But again, because of the lack of emphasis on types, they handle objects in raw primitive format. It is just right to use this tool to achieve further conversion.\n\n#### json\ndemo\n```python\nimport json\nimport sys\nfrom typing import List\n\nfrom objtyping import objtyping\n\n\nclass X:\n    x: int\n    y: str\n\n\nclass A:\n    q: str\n    a: str\n    b: int\n    c: List[X]\n\n\nif __name__ == '__main__':\n    print(\"\\r\\n-----json-------\")\n    json_obj = json.loads('{\"q\":9, \"a\":\"Mark\", \"b\":3, \"c\":[{\"x\":15, \"y\":\"male\"},{\"x\":9, \"y\":\"female\", \"z\":13}]}')\n    typed_obj = objtyping.from_primitive(json_obj, A)\n    d_l_obj = objtyping.to_primitive(typed_obj)\n    print(json.dumps(d_l_obj))\n\n    sys.exit()\n\n```\n\noutput\n```console\n-----json-------\n{\"q\": \"9\", \"a\": \"Mark\", \"b\": 3, \"c\": [{\"x\": 15, \"y\": \"male\"}, {\"x\": 9, \"y\": \"female\", \"z\": 13}]}\n```\n\n* **note**: here is that the property \"q\", which was originally a number in the original json structure, is a string in the class variable definition, and after converting it to a business object, its type is now a string - the objtyping tool tries to force a conversion between the base types according to the class definition .*\n\n#### yaml\ndemo\n```python\nimport sys\nfrom ruamel.yaml import YAML\nfrom typing import List\nfrom objtyping import objtyping\n\n\nclass X:\n    x: int\n    y: str\n\n\nclass A:\n    q: str\n    a: str\n    b: int\n    c: List[X]\n\n\nif __name__ == '__main__':\n    print(\"\\r\\n-----yaml-------\")\n    yaml = YAML()\n    yaml_obj = yaml.load('''\n    q: 9\n    a: Mark\n    b: 3\n    c:\n        - x: 15\n          y: male\n        - x: 9\n          y: female\n          z: 13    \n    ''')\n    typed_obj = objtyping.from_primitive(yaml_obj, A)\n    d_l_obj = objtyping.to_primitive(typed_obj)\n    yaml.dump(d_l_obj, sys.stdout)\n\n    sys.exit()\n\n```\n\noutput\n```console\n-----yaml-------\nq: '9'\na: Mark\nb: 3\nc:\n- x: 15\n  y: male\n- x: 9\n  y: female\n  z: 13\n```\n\nHere the datatype of property \"q\" is also converted.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "objtyping",
    "package_url": "https://pypi.org/project/objtyping/",
    "platform": null,
    "project_url": "https://pypi.org/project/objtyping/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/objtyping/0.5.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "convert a primitive dict-list data structure to/from an instance of user-defined class.",
    "version": "0.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16745708,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdfbe7b91602be29fe149ed2f25b54d996d595bb79f2cc04323134ad00c9cd8a",
          "md5": "437944283967078fb5c222289a2a65a7",
          "sha256": "50e3ee779eb463b5f46d2de1441b42969b8203ec91aea5ca4906cd79d7a38f52"
        },
        "downloads": -1,
        "filename": "objtyping-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "437944283967078fb5c222289a2a65a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11276,
        "upload_time": "2023-01-27T06:59:10",
        "upload_time_iso_8601": "2023-01-27T06:59:10.069325Z",
        "url": "https://files.pythonhosted.org/packages/cd/fb/e7b91602be29fe149ed2f25b54d996d595bb79f2cc04323134ad00c9cd8a/objtyping-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "118d349613d64c2f1f91cb973f2ee8eafdcf35003927380d1426d525cff5ab9c",
          "md5": "3733c6f9b475b5fffd800647bfac810b",
          "sha256": "adb64cf87d43a800e309c10cd9372cffe57d5978086b065c7f0d4be2e9785334"
        },
        "downloads": -1,
        "filename": "objtyping-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3733c6f9b475b5fffd800647bfac810b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11433,
        "upload_time": "2023-01-27T06:59:11",
        "upload_time_iso_8601": "2023-01-27T06:59:11.435772Z",
        "url": "https://files.pythonhosted.org/packages/11/8d/349613d64c2f1f91cb973f2ee8eafdcf35003927380d1426d525cff5ab9c/objtyping-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fc1a0e6bc38127efae07d790242f112c213f1c92e341c3e3995c575a9934e99",
          "md5": "d696bb047e22adf46f91833fa1f366c4",
          "sha256": "4586466f7d018acda3853f85a1a970b6b84e41fd31f2159e7efff6c477616df3"
        },
        "downloads": -1,
        "filename": "objtyping-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d696bb047e22adf46f91833fa1f366c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11305,
        "upload_time": "2023-02-08T07:18:28",
        "upload_time_iso_8601": "2023-02-08T07:18:28.352980Z",
        "url": "https://files.pythonhosted.org/packages/8f/c1/a0e6bc38127efae07d790242f112c213f1c92e341c3e3995c575a9934e99/objtyping-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a206b7df8c3ce1a0e8b9de1c6bf738cd3b5b630d1924d3f1cb23d9ada5f3b5a2",
          "md5": "24facdedebfc9cefea39728f529daaad",
          "sha256": "a319b33e840c24d73a323a9bc66990f11804d1bd2452fcc343edc1258ffa5786"
        },
        "downloads": -1,
        "filename": "objtyping-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24facdedebfc9cefea39728f529daaad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11459,
        "upload_time": "2023-02-08T07:18:30",
        "upload_time_iso_8601": "2023-02-08T07:18:30.905240Z",
        "url": "https://files.pythonhosted.org/packages/a2/06/b7df8c3ce1a0e8b9de1c6bf738cd3b5b630d1924d3f1cb23d9ada5f3b5a2/objtyping-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45ea83101984dedbc285c8c84c990054732fb700eefa40db80561766bd0f9f38",
          "md5": "3d4246088aeb09ad6f6922d2760aa40b",
          "sha256": "9cd9c5126ecefc2af0b57eebbad81a58be04308bbe23227705e027cebe929d6b"
        },
        "downloads": -1,
        "filename": "objtyping-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d4246088aeb09ad6f6922d2760aa40b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11677,
        "upload_time": "2023-02-08T11:58:29",
        "upload_time_iso_8601": "2023-02-08T11:58:29.662375Z",
        "url": "https://files.pythonhosted.org/packages/45/ea/83101984dedbc285c8c84c990054732fb700eefa40db80561766bd0f9f38/objtyping-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e65a4420f55a0a4b0c54c51d5dca2178c5c0a584fb85c61cb9a6a05c6542560",
          "md5": "0aa8f9db0b5db34d847ac308ad913153",
          "sha256": "cdbb08f1d751ad0da43e88941d989e09b61352a879c2b9e49d32da1b19b8d73c"
        },
        "downloads": -1,
        "filename": "objtyping-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0aa8f9db0b5db34d847ac308ad913153",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12050,
        "upload_time": "2023-02-08T11:58:31",
        "upload_time_iso_8601": "2023-02-08T11:58:31.266014Z",
        "url": "https://files.pythonhosted.org/packages/9e/65/a4420f55a0a4b0c54c51d5dca2178c5c0a584fb85c61cb9a6a05c6542560/objtyping-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45ea83101984dedbc285c8c84c990054732fb700eefa40db80561766bd0f9f38",
        "md5": "3d4246088aeb09ad6f6922d2760aa40b",
        "sha256": "9cd9c5126ecefc2af0b57eebbad81a58be04308bbe23227705e027cebe929d6b"
      },
      "downloads": -1,
      "filename": "objtyping-0.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d4246088aeb09ad6f6922d2760aa40b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11677,
      "upload_time": "2023-02-08T11:58:29",
      "upload_time_iso_8601": "2023-02-08T11:58:29.662375Z",
      "url": "https://files.pythonhosted.org/packages/45/ea/83101984dedbc285c8c84c990054732fb700eefa40db80561766bd0f9f38/objtyping-0.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e65a4420f55a0a4b0c54c51d5dca2178c5c0a584fb85c61cb9a6a05c6542560",
        "md5": "0aa8f9db0b5db34d847ac308ad913153",
        "sha256": "cdbb08f1d751ad0da43e88941d989e09b61352a879c2b9e49d32da1b19b8d73c"
      },
      "downloads": -1,
      "filename": "objtyping-0.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0aa8f9db0b5db34d847ac308ad913153",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12050,
      "upload_time": "2023-02-08T11:58:31",
      "upload_time_iso_8601": "2023-02-08T11:58:31.266014Z",
      "url": "https://files.pythonhosted.org/packages/9e/65/a4420f55a0a4b0c54c51d5dca2178c5c0a584fb85c61cb9a6a05c6542560/objtyping-0.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}