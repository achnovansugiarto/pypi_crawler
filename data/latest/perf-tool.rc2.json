{
  "info": {
    "author": "Glauco Uri",
    "author_email": "glauco@uriland.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "## perf_tool\nAnother **time performance** tool for python.\nIt is the right support tool if you need to profile an entire program, some piece of code, \na module, a class, a function or a single row. The idea here is to profile only the code **you want** to profile.\n\n### Installation\n\nperf_tool is tested on python 2.7, 3.6, 3.7, 3.8 \n\n```\n> pip install perf_tool\n```\n\nAfter installation you can try to run a little example:\n\n```\n$ curl https://raw.githubusercontent.com/glaucouri/perf_tool/master/example.py > perf_tool_sample.py\n$ python perf_tool_sample.py \n================== PerfTool ==================\ntask                     |aver(s) |sum(s)  |count   |std     \nmain                     |   0.065|   0.065|       1|   0.000\n  +-call                 |   0.050|   0.050|       1|   0.000\n    +-body               |   0.050|   0.050|       1|   0.000\n  +-row                  |   0.001|   0.014|      10|   0.000\n\noverall                  |    0.04|    0.06|      13|-       \n```\n\n### Description\nI have often been faced with the problem of performance on very challanging scope.\n\nIn many cases difficult if given by:\n\n* intrinsic complexity of algorithms, in this cases, piece of codes can't be explained with a right asymptotic \nrepresentations aka [Big O notation](https://en.wikipedia.org/wiki/Big_O_notation)\n\n* domain not fully known, yes! if you don't know exacty how and why the developer has done some choices each row of code \ncan be interpreted as an error candidate.\n\n* [coupling with data](https://en.wikipedia.org/wiki/Coupling_(computer_programming)), sometimes algorithms is too much\nintricated with data, the result is an unreadable spaghetti code.\n\n* use of external framework like Pandas, Scipy, Numpy. In these cases is not simple get a correct idea of where is spent \ncomputational time.\n\nIn these cases [computational analysis](https://en.wikipedia.org/wiki/Computational_complexity) can be misleading,\non the other hands [python profiler](https://docs.python.org/3.7/library/profile.html) is too dispersive so juggling \nwith performance tools give to us very counterintuitive reports.\n\n\n### How it works\nWhen you profile a program your need is to construct a metric that can tell you where the time is spent.\nSo at the beginning you must put **sentinels** in the entry point in order to create main metrics.\nGradually you put other  *sentinels* in the most relevant section of codes, increasing the capillarity \nuntil individual lines of code are identified.\n\n\n*perf_tool* has 2 sentinel:\n\n```\n> from perf_tool import PerfTool, perf_tool\n```\n\n* **PerfTool** Is a context manager \n* **perf_tool** Is a function / method decorator\n\neach *Sentinel* will cover a piece of code, and for that, records how many time is spent on it. \n\nWith a function we can print a report containing 4 columns:\n\n* task: task label or name, it is set when you put the sentinel, i suggest to use mnemonic label\n* aver(s): mean of time spent ove the piece of code.\n* sum(s): sum of time spent ove the piece of code.\n* count: how many times that sentinel was called\n* std: standard deviation\n\n*Sentinels* can be nested in order to represent the hierarchy of code \n\n### Examples\n\nFirst step is to put root sentinels: \n\n```\n@perf_tool('main')\ndef main():\n  <some code>\n```\n\nSecond step is to place sentinel in subset of code.\n\n```\n@perf_tool('main')\ndef main():\n  with PerfTool('preparation'):\n    <some code part 1>\n\n  with PerfTool('calculus'):\n    <some code part 2>\n\n  with PerfTool('output'):\n    <some code part 3>\n```\n\nAnd so on\n\n```\n@perf_tool('main')\ndef main():\n  with PerfTool('preparation'):\n    <some code part 1>\n\n  with PerfTool('calculus'):\n    <some code part 2>\n\n  with PerfTool('output'):\n    <some code part 3a>\n    for each row:\n    with PerfTool('row write'):\n      <some code part 3b>\n```\n\nIn the last example output is (times are mock)\n\n```\ntask                     |aver(s) |sum(s)  |count   |std     \nmain                     |   0.209|   0.209|       1|   0.000\n  +-preparation          |   0.013|   0.013|       1|   0.000\n  +-calculus             |   0.030|   0.030|       1|   0.000\n  +-output               |   0.166|   0.166|       1|   0.000\n    +-row write          |   0.001|   0.143|     100|   0.000\n\noverall                  |    0.08|    0.21|     104|-       \n```\n\n\nHere a production use.\n\n```\ntask                     |aver(s) |sum(s)  |count   |std     \nDefinition set value     |   0.006| 111.786|   17199|   0.013\n  +-Comp3 call           |   0.003|   0.043|      13|   0.000\n  +-Comp2 call           |   0.009|  37.078|    4056|   0.009\n    +-calculate cache    |   0.018|  36.941|    2016|   0.002\n      +-aggregate        |   0.012|  23.772|    2016|   0.002\n  +-Comp3   call         |   0.083|  30.259|     364|   0.031\n    +-aggregate          |   0.091|  16.431|     180|   0.011\n    +-agg+pivot          |   0.092|  13.200|     144|   0.011\n  +-Comp1 call           |   0.001|   1.607|    2626|   0.002\n  +-Comp4  call          |   0.005|   0.061|      13|   0.000\nComp2 set value          |   1.054|  41.113|      39|   1.497\n  +-Comp2 compute meas   |   3.163|  41.113|      13|   0.244\n    +-Comp2 tmx          |   0.301|  15.675|      52|   0.014\n      +-Broker call      |   0.005|   9.377|    1872|   0.001\n        +-Comp3 call     |   0.003|   6.372|    1872|   0.001\n    +-Comp2 Comp3        |   0.097|   4.650|      48|   0.124\n      +-Broker call      |   0.029|   4.220|     144|   0.041\n        +-Comp3   call   |   0.028|   3.985|     144|   0.041\n          +-aggregate    |   0.086|   3.851|      45|   0.010\n    +-Comp2 Comp1        |   0.056|   2.670|      48|   0.008\n      +-Broker call      |   0.003|   1.215|     432|   0.002\n        +-Comp1 call     |   0.001|   0.522|     432|   0.002\nComp4  set value         |   0.665|  17.300|      26|   0.719\n  +-Comp4  compute all   |   1.441|  17.296|      12|   0.037\n    +-call transform     |   0.415|  14.935|      36|   0.019\n      +-Broker call      |   0.010|  11.894|    1152|   0.009\n        +-Comp2 call     |   0.009|  10.519|    1152|   0.009\n          +-calculate cac|   0.018|  10.470|     576|   0.003\n            +-agg all    |   0.012|   7.000|     576|   0.002\n    +-retrieve data      |   0.003|   0.448|     144|   0.000\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://https://github.com/glaucouri/perf_tool",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "perf-tool",
    "package_url": "https://pypi.org/project/perf-tool/",
    "platform": "",
    "project_url": "https://pypi.org/project/perf-tool/",
    "project_urls": {
      "Homepage": "https://https://github.com/glaucouri/perf_tool"
    },
    "release_url": "https://pypi.org/project/perf-tool/0.9.1/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Performance investigation tool",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8828969,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efc51dc4b73d96ebef2af17d7c9be4597c62869546b97c33530594eefc9e6ec1",
          "md5": "e473b15984bffcd966505d31f0b8e91c",
          "sha256": "9003c0d3fdd8b89c1d7b20a3300b6cd4c77eeb522fc0f43ab224ae22489399b8"
        },
        "downloads": -1,
        "filename": "perf_tool-0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e473b15984bffcd966505d31f0b8e91c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 9430,
        "upload_time": "2020-12-05T16:48:51",
        "upload_time_iso_8601": "2020-12-05T16:48:51.803753Z",
        "url": "https://files.pythonhosted.org/packages/ef/c5/1dc4b73d96ebef2af17d7c9be4597c62869546b97c33530594eefc9e6ec1/perf_tool-0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bf5eb17b4c5cb66a01c3d855f4b4f75f79abf67149036c33d1fd960e27be558",
          "md5": "b06fab04cab2c26c52ff0b4fc0c55340",
          "sha256": "3d023ce1f84fb46884db3dbc9f98507334d5939275c1be58d80c1a49a009ecdd"
        },
        "downloads": -1,
        "filename": "perf_tool-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "b06fab04cab2c26c52ff0b4fc0c55340",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 5446,
        "upload_time": "2020-12-05T16:48:52",
        "upload_time_iso_8601": "2020-12-05T16:48:52.939397Z",
        "url": "https://files.pythonhosted.org/packages/5b/f5/eb17b4c5cb66a01c3d855f4b4f75f79abf67149036c33d1fd960e27be558/perf_tool-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "166653ba83b7f55ba6c6c1c5fc155dca0432a0302732442b049915adfec69feb",
          "md5": "458e591a513383f0c3061c5a0f71a019",
          "sha256": "e6f402b77a3a936efaf507118a81b33707410991794b3870703b161c9c084f25"
        },
        "downloads": -1,
        "filename": "perf_tool-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "458e591a513383f0c3061c5a0f71a019",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 9663,
        "upload_time": "2020-12-05T17:21:43",
        "upload_time_iso_8601": "2020-12-05T17:21:43.728668Z",
        "url": "https://files.pythonhosted.org/packages/16/66/53ba83b7f55ba6c6c1c5fc155dca0432a0302732442b049915adfec69feb/perf_tool-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a98f15abee5e539b06839a05a3ca22b79e2b4b38dc268ef3deb32c8f81d2e1",
          "md5": "a08988876d34c57917bd55ae1d685431",
          "sha256": "c78d572e86bed8b0a0d79007953378f42074aeca7de62f237a1de3b03d232926"
        },
        "downloads": -1,
        "filename": "perf_tool-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a08988876d34c57917bd55ae1d685431",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 5736,
        "upload_time": "2020-12-05T17:21:45",
        "upload_time_iso_8601": "2020-12-05T17:21:45.523032Z",
        "url": "https://files.pythonhosted.org/packages/52/a9/8f15abee5e539b06839a05a3ca22b79e2b4b38dc268ef3deb32c8f81d2e1/perf_tool-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "166653ba83b7f55ba6c6c1c5fc155dca0432a0302732442b049915adfec69feb",
        "md5": "458e591a513383f0c3061c5a0f71a019",
        "sha256": "e6f402b77a3a936efaf507118a81b33707410991794b3870703b161c9c084f25"
      },
      "downloads": -1,
      "filename": "perf_tool-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "458e591a513383f0c3061c5a0f71a019",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 9663,
      "upload_time": "2020-12-05T17:21:43",
      "upload_time_iso_8601": "2020-12-05T17:21:43.728668Z",
      "url": "https://files.pythonhosted.org/packages/16/66/53ba83b7f55ba6c6c1c5fc155dca0432a0302732442b049915adfec69feb/perf_tool-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52a98f15abee5e539b06839a05a3ca22b79e2b4b38dc268ef3deb32c8f81d2e1",
        "md5": "a08988876d34c57917bd55ae1d685431",
        "sha256": "c78d572e86bed8b0a0d79007953378f42074aeca7de62f237a1de3b03d232926"
      },
      "downloads": -1,
      "filename": "perf_tool-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a08988876d34c57917bd55ae1d685431",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 5736,
      "upload_time": "2020-12-05T17:21:45",
      "upload_time_iso_8601": "2020-12-05T17:21:45.523032Z",
      "url": "https://files.pythonhosted.org/packages/52/a9/8f15abee5e539b06839a05a3ca22b79e2b4b38dc268ef3deb32c8f81d2e1/perf_tool-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}