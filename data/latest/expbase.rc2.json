{
  "info": {
    "author": "Patrick Hohenecker",
    "author_email": "mail@paho.at",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "exp-base\n========\n\n\n\n`expbase` is a Python framework that implements a commonly used boilerplate for machine learning experiments.\nTo that end, it takes care of preparing the usual experimental setup for you, and thus significantly reduces the amount\nof code you have to write in order to run your experiments.\nMore precisely, `expbase` implements the following setup tasks:\n\n1. parse command-line args, and create a config object,\n1. prepare the results directory,\n1. store the used config as JSON file in the results directory,\n1. set up logging,\n1. launch the training procedure in a separate process, and\n1. wait for checkpoints to be created and launch the evaluation of each in a separate process as it is created.\n\n\n\nInstallation\n------------\n\n\nThe package `expbase` can be installed via pip as follows:\n\n```bash\npip install expbase\n```\n\n\n\nHow-To\n------\n\n\n### Step 1: Define Your Config Class\n\n`expbase` uses [`argmagiq`](https://github.com/phohenecker/arg-magiq) to parse command-line args into a configuration\nobject, which means that you have to define a config class that describes the user-defined configuration for running an\nexperiment.\nIf you should not be familiar with `argmagiq`, then please read about it\n[here](https://github.com/phohenecker/arg-magiq).\nTo that end, your configuration class has to extend the class\n[`expbase.BaseConfig`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/base_config.py),\nwhich defines several configurations that are either used by `expbase` directly or required for all machine learning\nexperiments.\n(Make sure to familiarize yourself with those.)\n\n\n### Step 2: Implement The `TrainingExecutor` And The `EvaluationExecutor`\n\nTo provide the code for training and evaluation of your models, you have to implement two classes, one extending\n[`expbase.TrainingExecutor`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/training_executor.py)\nand one extending\n[`expbase.EvaluationExecutor`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/evaluation_executor.py).\nThose are abstract classes that require you to implement the methods `_run_training` and `_run_evaluation`,\nrespectively.\nWhen an experiment is launched, your `TrainingExecutor` is run in a separate process, and whenever a training checkpoint\nis delivered, your implementation of `EvaluationExecutor` is launched (in parallel) in another process in order to\nevaluate the same.\nIn addition to this, both `TrainingExecutor` and `EvaluationExecutor` have a method `_init`, which may be overridden to\nrun code that would usually go into `__init__`.\nThe reason why we recommend using `_init` instead of `__init__` is that instances might be moved between processes\nbefore `_run_*` is invoked, which occasionally results in issues, if certain objects are created in the\nconstructor.\nHowever, `_init` is guaranteed to be invoked just before and in the same process as `_run_*`.\n\nAll created instances of `TrainingExecutor` and `EvaluationExecutor` are provided with an instance of your config class\nthat has been populated based on the given command-lines args.\nBoth classes store this config object in the attribute `_conf`, which you can use to access the user-defined\nconfiguration of an experiment from your implementations of `_init` and `_run_*`.\n\nFor additional details, please have a look at the docstrings of\n[`expbase.TrainingExecutor`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/training_executor.py)\nand\n[`expbase.EvaluationExecutor`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/evaluation_executor.py).\n\n\n### Step 3: Launch The Experiment\n\nOnce you defined all required classes, launching an experiment is as easy as creating an instance of\n[`expbase.Experiment`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/experiment.py), and\ninvoking it's `run` method:\n\n```python\nimport expbase as xb\n\nxb.Experiment(\n        YourTrainingExecutorClass,\n        YourEvaluationExecutorClass,\n        YourConfigClass,\n        app_name,\n        app_description\n).run()\n```\n\nIn this code snippet, `app_name` and `app_description` are two strings that define the name of your application, which\nis used in its synopsis (the usage instruction at the beginning of the help), as well as a description of the same,\nwhich is displayed as part of the help text.\n\n\n### Delivering Checkpoints\n\nAs pointed out above already, evaluation is launched automatically (in a parallel process) whenever a checkpoint is\ndelivered.\nIn order to deliver a checkpoint, the class\n[`expbase.TrainingExecutor`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/training_executor.py)\n(which you are extending with your own training code) provides the method `_deliver_ckpt`, which expects a single `str`\nargument that allows for locating an according checkpoint file, usually a file path.\nAs it depends on the particular experiment, you have to create the checkpoint file in your implementation of\n`_run_training` before you invoke `_deliver_ckpt`.\nThe checkpoint string is then provided to the `EvaluationExecutor` that is launched to evaluate the according\ncheckpoint and stored in the attribute `_ckpt`.\nTherefore, your own implementation of\n[`expbase.EvaluationExecutor`](https://github.com/phohenecker/exp-base/blob/master/src/main/python/expbase/evaluation_executor.py).\n(more precisely, your `_init` and `_run_evaluation`) will find the checkpoint string stored in `self._ckpt`.\n\n\n### Running Tests\n\nIf you just want to run a test (without training), for example, to evaluate your model on the test partition, then you\ncan use the command-line option `--test`, which causes `expbase` to launch only a single `EvaluationExecutor`.\nNotice that, in this case, the attribute `_ckpt` of your `EvaluationExecutor` will be `None`.\nInstead, however, you are required to manually specify a checkpoint when you run the application using the option\n`--ckpt <CKPT>`, which is then accessible via the config, i.e., `self._conf.ckpt`.\n\n\n\nResults Directory\n-----------------\n\n\n`expbase` creates a results directory for you, which is also used to store any files that are generated automatically\n(e.g., log files, config, etc.).\nBy default, `./results/` is used as results directory, and can be adjusted by means of the arg `--results-dir`.\nNotice further that, for every training run, a subdirectory is created within the results dir, named according to when\nthe experiment was conducted.\nFor example, when you run an experiment with `--results-dir ./fancy-results`, then results will be stored in\n`./fancy-results/2020-06-22--10-11-28` (using the actual timestamp, of course).\nPlease notice that the config object passed to `TrainingExecutor` and `EvaluationExecutor`s contains the actual\nresults directory **including** the particular subdirectory.\n\nFinally, you can (and should) use a title to be appended to your result directories in order to make them easier to\nfind.\nTo that end, use the arg `--title` to define a label to be appended to the directory that your experiment writes results\nto.\nFor example, `--results-dir ./fancy-results --title project-ice-cream` defines the results directory to be\n`./fancy-results/2020-06-22--10-11-28--project-ice-cream` (again, using the actual timestamp, of course).\n\n\n\nConfig File\n-----------\n\n\nTo make it easier to rerun a conducted experiment, `expbase` stores the configuration that was used to run one as a\nJSON file named `config.json` in the results directory.\nThis file is produced by means of [`argmagiq`](https://github.com/phohenecker/arg-magiq), and can thus be used\ndirectly to launch the same experiment once again.\nFor example, if you ran an experiment from the terminal using the command\n```bash\n$ python main.py --results-dir results/ --seed 12345 ...\n```\nthen you can rerun it with the exact same configuration using\n```bash\n$ python main.py -- path/to/the/config.json\n```\nNotice that, for experiments with a lot of configuration, it might be easier to only use config files in the first\nplace.\n\n\n\nLogging\n-------\n\n\n`expbase` uses the package [`streamtologger`](https://github.com/phohenecker/stream-to-logger) to automatically log all\noutputs produced via `print(\"...\")` or by an exception, and stores them in three different log files in the results\ndirectory:\n\n1. `experiment.log` is a top-level log file used by the controller of the experiment,\n2. `train.log` captures outputs produced by the `TrainingExecutor`, and\n3. `eval.log` stores outputs produced by `EvaluationExecutor`s.\n\nIf you, for some reason, wish you to change the names of those files, you can use the options `--general-log`,\n`--training-log`, and `--evaluation-log` to do so.  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phohenecker/exp-base",
    "keywords": "",
    "license": "BSD-2-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "expbase",
    "package_url": "https://pypi.org/project/expbase/",
    "platform": "",
    "project_url": "https://pypi.org/project/expbase/",
    "project_urls": {
      "Homepage": "https://github.com/phohenecker/exp-base"
    },
    "release_url": "https://pypi.org/project/expbase/0.1.0/",
    "requires_dist": [
      "argmagiq (>=0.1.0)",
      "insanity (>=2017.1)",
      "streamtologger (>=2017.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python framework that implements a commonly used boilerplate for machine learning experiments.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10294691,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42b6e3cd8871b5206126b1204bb520e12c15611b34d1a4f41fca5af8920cb01d",
          "md5": "1af9ce0257da4f456ed218a544b63a40",
          "sha256": "dac3b6deadef8b6b7a2c35d52be8e78e67efbdf570edde8f25dd903c3fbfe96d"
        },
        "downloads": -1,
        "filename": "expbase-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1af9ce0257da4f456ed218a544b63a40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 32215,
        "upload_time": "2021-05-08T12:33:00",
        "upload_time_iso_8601": "2021-05-08T12:33:00.497799Z",
        "url": "https://files.pythonhosted.org/packages/42/b6/e3cd8871b5206126b1204bb520e12c15611b34d1a4f41fca5af8920cb01d/expbase-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97ce68082be59cae084c8296d1ae21ca9a21cf4a3245a7017328c8bdbf73270b",
          "md5": "7a6f62503893c9d0ae7c3df10c4268dd",
          "sha256": "590f518fc4baf1d8c3461bea965896db9f1138c740ed7cdc76bbc668689bd548"
        },
        "downloads": -1,
        "filename": "expbase-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a6f62503893c9d0ae7c3df10c4268dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19900,
        "upload_time": "2021-05-08T12:33:01",
        "upload_time_iso_8601": "2021-05-08T12:33:01.930929Z",
        "url": "https://files.pythonhosted.org/packages/97/ce/68082be59cae084c8296d1ae21ca9a21cf4a3245a7017328c8bdbf73270b/expbase-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43e980c58dc515bf6f1e4464bf25583d844310410fd4bf33e321599202e14791",
          "md5": "ac9f343c65b754e1b09770f7109e9e66",
          "sha256": "dd3f3427d5f933751de098a8d7a0e5d843fa4c05f1211cb7f8a535ce0fc47cd3"
        },
        "downloads": -1,
        "filename": "expbase-0.1.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac9f343c65b754e1b09770f7109e9e66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 32203,
        "upload_time": "2020-07-22T08:40:54",
        "upload_time_iso_8601": "2020-07-22T08:40:54.428185Z",
        "url": "https://files.pythonhosted.org/packages/43/e9/80c58dc515bf6f1e4464bf25583d844310410fd4bf33e321599202e14791/expbase-0.1.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a3abefb49f26ace18e8e82962ae7340701856ba88c60e5a31e063ea7e2fb5de",
          "md5": "edc0f91395ce3bde3ec2a60e2b710c5a",
          "sha256": "c187e87a7f36583a4202dbbd39c250826397f89958ebff0dbebaa4708e2d7c63"
        },
        "downloads": -1,
        "filename": "expbase-0.1.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "edc0f91395ce3bde3ec2a60e2b710c5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19852,
        "upload_time": "2020-07-22T08:40:58",
        "upload_time_iso_8601": "2020-07-22T08:40:58.072552Z",
        "url": "https://files.pythonhosted.org/packages/6a/3a/befb49f26ace18e8e82962ae7340701856ba88c60e5a31e063ea7e2fb5de/expbase-0.1.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42b6e3cd8871b5206126b1204bb520e12c15611b34d1a4f41fca5af8920cb01d",
        "md5": "1af9ce0257da4f456ed218a544b63a40",
        "sha256": "dac3b6deadef8b6b7a2c35d52be8e78e67efbdf570edde8f25dd903c3fbfe96d"
      },
      "downloads": -1,
      "filename": "expbase-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1af9ce0257da4f456ed218a544b63a40",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 32215,
      "upload_time": "2021-05-08T12:33:00",
      "upload_time_iso_8601": "2021-05-08T12:33:00.497799Z",
      "url": "https://files.pythonhosted.org/packages/42/b6/e3cd8871b5206126b1204bb520e12c15611b34d1a4f41fca5af8920cb01d/expbase-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97ce68082be59cae084c8296d1ae21ca9a21cf4a3245a7017328c8bdbf73270b",
        "md5": "7a6f62503893c9d0ae7c3df10c4268dd",
        "sha256": "590f518fc4baf1d8c3461bea965896db9f1138c740ed7cdc76bbc668689bd548"
      },
      "downloads": -1,
      "filename": "expbase-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7a6f62503893c9d0ae7c3df10c4268dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19900,
      "upload_time": "2021-05-08T12:33:01",
      "upload_time_iso_8601": "2021-05-08T12:33:01.930929Z",
      "url": "https://files.pythonhosted.org/packages/97/ce/68082be59cae084c8296d1ae21ca9a21cf4a3245a7017328c8bdbf73270b/expbase-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}