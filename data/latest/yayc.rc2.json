{
  "info": {
    "author": "COSI Team",
    "author_email": "imc@umd.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# yayc\n\nYet another YAML-based configurator library. Meant for BurstCube and the COSI Telescope, but maybe useful for other projects. \n\n## Reading a config file\n\n\n```python\nfrom yayc import Configurator\nimport yayc.test_data\n\nc = Configurator.open(yayc.test_data.path/\"config_example.yaml\")\n```\n\n\n```python\nc['section:param_int']\n```\n\n\n\n\n    1\n\n\n\n\n```python\nc['section:param_float']\n```\n\n\n\n\n    1.0\n\n\n\n\n```python\nc['section:param_string']\n```\n\n\n\n\n    'a'\n\n\n\n\n```python\nc['section:param_list']\n```\n\n\n\n\n    [0, 1, 2, 3]\n\n\n\n\n```python\nc['section:param_list2']\n```\n\n\n\n\n    ['a', 'b', 'c']\n\n\n\n## Overriding a parameter\n\nUsually you have command line programs like this\n```\nmy_app -c config_example.yaml --foo bar\n```\n\nYou might want to let the user to change the behavior, but also don't want to set a bunch of flags for each option. It's also cumbersome to modify the config file for each run. \n\nYou can have a generic flag that the user can use to change any behavior, e.g.\n\n```\nmy_app -c config_example.yaml --override \"section:param_int = 2\" \"section:param_string = b\"\n```\n\nYou can parse this using `argparse` and pass the input to `--override` to the `Configurator` object:\n\n\n```python\noverride_input = [\"section:param_int = 2\", \"section:param_string = b\"]\n```\n\n\n```python\nc.override(*override_input)\n```\n\n\n```python\nc[\"section:param_int\"]\n```\n\n\n\n\n    2\n\n\n\n\n```python\nc['section:param_string']\n```\n\n\n\n\n    'b'\n\n\n\n## Relative paths\n\nIt is usually desirable to keep other configuration files together with the yaml file and other logs. this makes it easier to reproduce results. To facilitate this, always use paths relative **to the config file**, not relative to where you executed the progam. Then use this:  \n\n\n```python\nc.absolute_path(c['section:param_path'])\n```\n\n\n\n\n    PosixPath('/Users/israel/work/software/yayc/yayc/test_data/my_file.txt')\n\n\n\n## Logs\n\nIt's good practice to dump the config file, after any override, to the logs:\n\n\n```python\nwith open('test.log', 'w') as f:\n    f.write(c.dump())\n```\n\n## Dynamic initialization\n\nThis is a little more advanced. In general, you can initialize any object on the fly if you know the module, the name of the class and the input parameters. We can use this to dynamically instantiate an object of an arbitrary class:\n\n\n```python\n# Creating dummy classes in the current module (__main__)\n    \nimport __main__\n\nclass ClassA:\n    def __init__(self, *args, **kwargs):\n        self._args = args\n        self._kwargs = kwargs\n    \n    def __repr__(self):\n        return f\"ClassA(args = {self._args}, kwargs = {self._kwargs})\"\n    \nclass ClassB:\n    def __init__(self, *args, **kwargs):\n        self._args = args\n        self._kwargs = kwargs\n    \n    def __repr__(self):\n        return f\"ClassB(args = {self._args}, kwargs = {self._kwargs})\"\n```\n\nInitialize the objet on the fly\n\n\n```python\nobjects = {label:getattr(__main__, params['class'])(*params['args'], **params['kwargs']) for label,params in c['dynamic_init'].items()}\n```\n\n\n```python\nprint(objects)\n```\n\n    {'objectA': ClassA(args = (1, 'a'), kwargs = {'foo': 2, 'bas': 'b'}), 'objectB': ClassB(args = (), kwargs = {'foo': 3})}\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cositools/yayc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yayc",
    "package_url": "https://pypi.org/project/yayc/",
    "platform": null,
    "project_url": "https://pypi.org/project/yayc/",
    "project_urls": {
      "Homepage": "https://github.com/cositools/yayc"
    },
    "release_url": "https://pypi.org/project/yayc/0.0.2/",
    "requires_dist": [
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "Yet another YAML configuration library",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14718544,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "039c05e9599b6bc32788bf84cb848f2d1d3c01db4664b8702fa826b97fef2f9a",
          "md5": "34d4de0f5daeb67c22f746653f77da8e",
          "sha256": "b4fdde76f25946a09680d29371c013acc203897971a252178ad7335c5bddf4ec"
        },
        "downloads": -1,
        "filename": "yayc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34d4de0f5daeb67c22f746653f77da8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3212,
        "upload_time": "2022-08-10T15:21:12",
        "upload_time_iso_8601": "2022-08-10T15:21:12.619502Z",
        "url": "https://files.pythonhosted.org/packages/03/9c/05e9599b6bc32788bf84cb848f2d1d3c01db4664b8702fa826b97fef2f9a/yayc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2589a016ce9e528bfdbd0abebfc873fa2dbd3e22c97e65eae8ad558a8d99e01",
          "md5": "184afa24c8d0cf3bd45931473dac1eed",
          "sha256": "2ee86879d4bcb2f4c051c749c02207a32b16429f26d81cce2d3af4886deb106c"
        },
        "downloads": -1,
        "filename": "yayc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "184afa24c8d0cf3bd45931473dac1eed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2923,
        "upload_time": "2022-08-10T15:21:14",
        "upload_time_iso_8601": "2022-08-10T15:21:14.039586Z",
        "url": "https://files.pythonhosted.org/packages/f2/58/9a016ce9e528bfdbd0abebfc873fa2dbd3e22c97e65eae8ad558a8d99e01/yayc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "191e67ef4b5c76403a6ae2b8f1a43bfdfe23caf5c148ed3038c5ad7f5e398e74",
          "md5": "cd184d86ac151be25ce6a32125151848",
          "sha256": "99686b7a2f262234adf434856947b40c6a1e31057a81ca38354e2e9ba4949b86"
        },
        "downloads": -1,
        "filename": "yayc-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd184d86ac151be25ce6a32125151848",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4433,
        "upload_time": "2022-08-10T15:25:38",
        "upload_time_iso_8601": "2022-08-10T15:25:38.132377Z",
        "url": "https://files.pythonhosted.org/packages/19/1e/67ef4b5c76403a6ae2b8f1a43bfdfe23caf5c148ed3038c5ad7f5e398e74/yayc-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9043a0be128ee466fbf3f0bfeb7ef3e551bee5652e3f795f8befc2830a594f8",
          "md5": "6eb6b9931569a494e0aa9dc2524440bc",
          "sha256": "3f34e42ed71d7508ae2ab6f3d585a8ab939970e7310710037acacd7ad8491527"
        },
        "downloads": -1,
        "filename": "yayc-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6eb6b9931569a494e0aa9dc2524440bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4183,
        "upload_time": "2022-08-10T15:25:39",
        "upload_time_iso_8601": "2022-08-10T15:25:39.248778Z",
        "url": "https://files.pythonhosted.org/packages/d9/04/3a0be128ee466fbf3f0bfeb7ef3e551bee5652e3f795f8befc2830a594f8/yayc-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "191e67ef4b5c76403a6ae2b8f1a43bfdfe23caf5c148ed3038c5ad7f5e398e74",
        "md5": "cd184d86ac151be25ce6a32125151848",
        "sha256": "99686b7a2f262234adf434856947b40c6a1e31057a81ca38354e2e9ba4949b86"
      },
      "downloads": -1,
      "filename": "yayc-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd184d86ac151be25ce6a32125151848",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4433,
      "upload_time": "2022-08-10T15:25:38",
      "upload_time_iso_8601": "2022-08-10T15:25:38.132377Z",
      "url": "https://files.pythonhosted.org/packages/19/1e/67ef4b5c76403a6ae2b8f1a43bfdfe23caf5c148ed3038c5ad7f5e398e74/yayc-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9043a0be128ee466fbf3f0bfeb7ef3e551bee5652e3f795f8befc2830a594f8",
        "md5": "6eb6b9931569a494e0aa9dc2524440bc",
        "sha256": "3f34e42ed71d7508ae2ab6f3d585a8ab939970e7310710037acacd7ad8491527"
      },
      "downloads": -1,
      "filename": "yayc-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6eb6b9931569a494e0aa9dc2524440bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4183,
      "upload_time": "2022-08-10T15:25:39",
      "upload_time_iso_8601": "2022-08-10T15:25:39.248778Z",
      "url": "https://files.pythonhosted.org/packages/d9/04/3a0be128ee466fbf3f0bfeb7ef3e551bee5652e3f795f8befc2830a594f8/yayc-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}