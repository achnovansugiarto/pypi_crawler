{
  "info": {
    "author": "Dmitriy Pavlov",
    "author_email": "dpavlov239@mail.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Russian",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "pulp_mia\n**************************\n\nPuLP-MiA is an Multi-index Addon for PuLP.\nIt was created to simplify working with multi-index variables\nwhen forming constraints and an objective function.\n\nInstallation\n================\n\nThe easiest way to install pulp-mia is via `PyPi <https://pypi.python.org/pypi/PuLP-MiA>`_\n\nIf pip is available on your system::\n\n     pip install pulp-mia\n\nOtherwise follow the download instructions on the PyPi page.\n\nPuLP-MiA requires:\n     + Python >= 3.4\n     + PuLP >= 1.6.10 (see PuLP README file for more details)\n\nExamples\n================\n\nUse Task() to create new LP-task. To create with name MyTask and in debug mode use\n\n.. code-block::\n\n    task = Task(Name='MyTask', debug=True)\n\nDebug mode updates the list of variables for any changes.\nRelease mode updates ones only before solving a Lp-problem.\n\nUse VariablesType flag to set type of variables\n\n.. code-block::\n\n    task = Task(VariablesType='Integer')     # Continuous, Integer, Boolean\n\nContinuous is a default type.\n\nTo form the task use Constraint() class.\n\nTo create the Objective function (criterion) use\n\n.. code-block::\n\n    c = Constraint('MAX')     # 'MAX, 'MIN'\n\nTo set some coeffients on old or new variables use\n\n.. code-block::\n\n    c.setCoeff(('v'), 0.3)     # v-indicator with weight 0.3\n    c.setCoeff(('p'), 0.7)     # p-indicator with weight 0.7\n\nTo set an Objective function on the task use\n\n.. code-block::\n\n    task.setObjective(c)\n\nTo create some Constraints use\n\n.. code-block::\n\n    a = Constraint('<=')      # '<=', '==', '>='\n\nTo set some coeffients on old or new variables use\n\n.. code-block::\n\n    # 50x11 + 100x12 + 50x21 + 100x22 <= 200\n    a.setCoeff(('x', 1, 1), 50)\n    a.setCoeff(('x', 1, 2), 100)\n    a.setCoeff(('x', 2, 1), 50)\n    a.setCoeff(('x', 2, 2), 100)\n\nTo set a sum of line combine of all variables in a-constraint use\n\n.. code-block::\n\n    a.setBValue(200)\n\nTo set a Constraint on the task use\n\n.. code-block::\n\n    task.addConstraint(a)\n\nLet's create a Constraint with v-indicator and p-indicator use\n\n.. code-block::\n\n    a = Constraint('==')\n    a.setCoeff(('x', 1, 1), 1)\n    a.setCoeff(('x', 1, 2), 1)\n    a.setCoeff(('v'), -1)     # v = x11 + x12\n    task.addConstraint(a)\n\n    a = Constraint('==')\n    a.setCoeff(('x', 2, 1), 1)\n    a.setCoeff(('x', 2, 2), 1)\n    a.setCoeff(('p'), -1)     # p = x21 + x22\n    task.addConstraint(a)\n\nTo run auto-solver by PuLP and watch result use\n\n.. code-block::\n\n    from pprint import pprint\n\n    print(task)               # name & size of task\n    print(task.Plan)          # solve and show status & objective value\n    print('PLAN')\n    pprint(task.PDict)        # show the plan as a dict\n\nOnce solved Plan is here.\nBy default here is no zero variables. To get full Plan use\n\n.. code-block::\n\n    pprint(task.Plan.getPDict(with_zeroe_values=True))\n\nIf you'll make some modifications (new Objective or Constraints) - Plan will be lost.\n\nBefore solving you can get elements of task in matrix-like style\n\n.. code-block::\n\n    print('\\nAMatrix')\n    pprint(task.AMatrix)\n    print('\\nBVector')\n    pprint(task.BVector)\n    print('\\nCVector')\n    pprint(task.CVector)\n\nTo see generated variables in task, status and value of Objective use\n\n.. code-block::\n\n    pprint(task._Variables)\n    print('\\nStatus', task.Status)\n    print('\\nObjective', task.PValue)\n\nFinally, to get the generated pulp problem, use\n\n.. code-block::\n\n    prob = task.Prob\n\nNow see how some Assignment problem can be solved by PuLP-MiA\n\n.. code-block::\n\n    from itertools import product\n    from pprint import pprint\n\n    from pulp_mia import Task, Constraint\n\n    # SETS\n    i_set = list(range(5))\n    j_set = list(range(2))\n\n    m_set = list(range(2))\n    g_set = list(range(4))\n    s_set = list(range(5))\n    k_set = list(range(5))\n\n    t_zad = 0.3\n    t_s_set = [0.05*(s + 1) for s in s_set]\n\n    G = [1, 0.5, 0.36, 0.5]\n    k_set_var = [0.5*(k + 1) for k in k_set]\n\n    def get_p(k, g):\n        return 1/(G[g]/(1.7*k_set_var[k]) + 1)\n\n    alfa_p = 0.5\n    alfa_v = 0.5\n\n    # task\n    task = Task(debug=True)\n\n    # Objective\n    c_new = Constraint('MAX')\n    c_new.setCoeff(('v'), alfa_v/len(i_set))\n    for i, j, m, g, s, k in product(i_set, j_set, m_set, g_set, s_set, k_set):\n        c_new.setCoeff(('x', i, j, m, g, s, k), alfa_p*get_p(k, g)/(1/(min(G)/(1.7*max(k_set_var)) + 1)*len(i_set)))\n    task.setObjective(c_new)\n\n    # Constraints\n    # Constraint 1\n    for i, m, g, s, k in product(i_set, m_set, g_set, s_set, k_set):\n        a_new = Constraint('<=')\n        for j in j_set:\n            a_new.setCoeff(('x', i, j, m, g, s, k), 1)\n        a_new.setBValue(1)\n        task.addConstraint(a_new)\n\n    # Constraint 1.5\n    for i in i_set:\n        a_new = Constraint('<=')\n        for j, m, g, s, k in product(j_set, m_set, g_set, s_set, k_set):\n            a_new.setCoeff(('x', i, j, m, g, s, k), 1)\n        a_new.setBValue(1)\n        task.addConstraint(a_new)\n\n    # Constraint 2\n    for i, j in product(i_set, j_set):\n        a_new = Constraint('<=')\n        for m, g, s, k in product(m_set, g_set, s_set, k_set):\n            a_new.setCoeff(('x', i, j, m, g, s, k), 1)\n        a_new.setBValue(1)\n        task.addConstraint(a_new)\n\n    # Constraint 3\n    for j in j_set:\n        a_new = Constraint('<=')\n        for i, m, g, s, k in product(i_set, m_set, g_set, s_set, k_set):\n            a_new.setCoeff(('x', i, j, m, g, s, k), t_s_set[s])\n        a_new.setBValue(t_zad)\n        task.addConstraint(a_new)\n\n    # Constraint 4\n    a_new = Constraint('==')\n    for i, j, m, g, s, k in product(i_set, j_set, m_set, g_set, s_set, k_set):\n        a_new.setCoeff(('x', i, j, m, g, s, k), 1)\n    a_new.setCoeff(('v'), -1)\n    a_new.setBValue(0)\n    task.addConstraint(a_new)\n\n\n    print(task)\n    print(task.Plan)\n    print('PLAN')\n    pprint(task.PDict)\n\n\nCopyright Dmitriy A. Pavlov (dpavlov239@mail.ru) under MIT license\n\nSee the LICENSE file for copyright information.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Palich239/PuLP-MiA",
    "keywords": "Optimization,Linear Programming,Operations Research",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PuLP-MiA",
    "package_url": "https://pypi.org/project/PuLP-MiA/",
    "platform": "any",
    "project_url": "https://pypi.org/project/PuLP-MiA/",
    "project_urls": {
      "Homepage": "https://github.com/Palich239/PuLP-MiA"
    },
    "release_url": "https://pypi.org/project/PuLP-MiA/0.1.1/",
    "requires_dist": [
      "pulp (>=1.6.10)",
      "amply (>=0.1.2)"
    ],
    "requires_python": "",
    "summary": "Multi-index Addon for PuLP",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8683600,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6551c4266de0b54d72416b12f84c32a33dbd5eaf8cd0d8c2dd17d6af5e109bc8",
          "md5": "5bebdddd3510efd76ed9c5ec1583967d",
          "sha256": "50b007b9dce31c5aca2de788aff1b3926bc887cec18954aaf28339eef22839b4"
        },
        "downloads": -1,
        "filename": "PuLP_MiA-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bebdddd3510efd76ed9c5ec1583967d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10167,
        "upload_time": "2020-11-17T20:49:25",
        "upload_time_iso_8601": "2020-11-17T20:49:25.083671Z",
        "url": "https://files.pythonhosted.org/packages/65/51/c4266de0b54d72416b12f84c32a33dbd5eaf8cd0d8c2dd17d6af5e109bc8/PuLP_MiA-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48bba33ec221b82cddcab1c727ebeed5640217e6ac070df69d3882e7fec9036d",
          "md5": "6f560cc0eef39489cd9a8ecfce2dc61e",
          "sha256": "dd9fc7d8d53b78d2713ed6661ea95e826a9369218361f2e4392b4279dbecf9ff"
        },
        "downloads": -1,
        "filename": "PuLP_MiA-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6f560cc0eef39489cd9a8ecfce2dc61e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6756,
        "upload_time": "2020-11-17T20:49:26",
        "upload_time_iso_8601": "2020-11-17T20:49:26.250970Z",
        "url": "https://files.pythonhosted.org/packages/48/bb/a33ec221b82cddcab1c727ebeed5640217e6ac070df69d3882e7fec9036d/PuLP_MiA-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b781c1a5326d6d138b403d0e04baa4d60e944f45af03e271b2af3a4aa749744",
          "md5": "4cf9f7936266a0674ace9f26b00bb51d",
          "sha256": "3ac42eaeda250e98d0ac129a2f1755d39ef4f69c5a033d68b50bbe48bdeb8c45"
        },
        "downloads": -1,
        "filename": "PuLP_MiA-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cf9f7936266a0674ace9f26b00bb51d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9549,
        "upload_time": "2020-11-17T21:13:40",
        "upload_time_iso_8601": "2020-11-17T21:13:40.142313Z",
        "url": "https://files.pythonhosted.org/packages/1b/78/1c1a5326d6d138b403d0e04baa4d60e944f45af03e271b2af3a4aa749744/PuLP_MiA-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27104dfa8094780c2de89e3fbed4fe70f9fa7bb93a41f3bf9eda97762a73ab59",
          "md5": "c5691339c45dd95f68f65079f90cac66",
          "sha256": "c66ec156fa11d0e6871354ee26bd9ee5579708534e67d0b3dcabc7315f2c0856"
        },
        "downloads": -1,
        "filename": "PuLP_MiA-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c5691339c45dd95f68f65079f90cac66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6421,
        "upload_time": "2020-11-17T21:13:41",
        "upload_time_iso_8601": "2020-11-17T21:13:41.220956Z",
        "url": "https://files.pythonhosted.org/packages/27/10/4dfa8094780c2de89e3fbed4fe70f9fa7bb93a41f3bf9eda97762a73ab59/PuLP_MiA-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b781c1a5326d6d138b403d0e04baa4d60e944f45af03e271b2af3a4aa749744",
        "md5": "4cf9f7936266a0674ace9f26b00bb51d",
        "sha256": "3ac42eaeda250e98d0ac129a2f1755d39ef4f69c5a033d68b50bbe48bdeb8c45"
      },
      "downloads": -1,
      "filename": "PuLP_MiA-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4cf9f7936266a0674ace9f26b00bb51d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9549,
      "upload_time": "2020-11-17T21:13:40",
      "upload_time_iso_8601": "2020-11-17T21:13:40.142313Z",
      "url": "https://files.pythonhosted.org/packages/1b/78/1c1a5326d6d138b403d0e04baa4d60e944f45af03e271b2af3a4aa749744/PuLP_MiA-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27104dfa8094780c2de89e3fbed4fe70f9fa7bb93a41f3bf9eda97762a73ab59",
        "md5": "c5691339c45dd95f68f65079f90cac66",
        "sha256": "c66ec156fa11d0e6871354ee26bd9ee5579708534e67d0b3dcabc7315f2c0856"
      },
      "downloads": -1,
      "filename": "PuLP_MiA-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c5691339c45dd95f68f65079f90cac66",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6421,
      "upload_time": "2020-11-17T21:13:41",
      "upload_time_iso_8601": "2020-11-17T21:13:41.220956Z",
      "url": "https://files.pythonhosted.org/packages/27/10/4dfa8094780c2de89e3fbed4fe70f9fa7bb93a41f3bf9eda97762a73ab59/PuLP_MiA-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}