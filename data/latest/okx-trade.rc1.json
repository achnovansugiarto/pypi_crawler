{
  "info": {
    "author": "pyted",
    "author_email": "pyted@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# Okx_Trade 说明文档\n\n## 1 Okx_Trade介绍\n\nOkx_Trade封装了OKX中现货（SPOT)、永续合约（SWAP）的常用函数，降低量化交易的难度。\n\n## 2 安装Okx_Trade\n\nGITHUB:https://www.github.com/pyted/okx_trade\n\n```cmd\npip3 install okx_trade\n```\n\n## 3 快速开始\n\n1.获取现货现货交易BTC-USDT的价格，降价2%挂单买入，买入金额为10000USDT，挂单时间为2小时，如果超时则取消订单。\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    okxSPOT = OkxSPOT(\n        key='****',\n        secret='****',\n        passphrase='****',\n    )\n\n    # 产品\n    instId = 'BTC-USDT'\n    # 开仓金额\n    openMoney = 10000\n    # 购买价格\n    askPx = okxSPOT.market.get_ticker(instId)['data']['askPx']  # 卖1价格\n    askPx = float(askPx)\n    openPrice = askPx * 0.98  # 降价2%\n    print(openPrice)\n    # 挂单时间\n    timeout = 60 * 60 * 2  # 单位秒\n    # 超时是否取消订单\n    cancel = True\n    # 是否堵塞模式\n    block = True\n\n    # 限价单开仓\n    result = okxSPOT.trade.open_limit(\n        instId=instId,  # 产品\n        openPrice=openPrice,  # 开仓价格\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        timeout=timeout,  # 等待订单成功的超时时间\n        cancel=True,  # 订单超时后是否取消\n    )\n    pprint(result)\n```\n\n2.获取永续合约BTC-USDT-SWAP的价格，降价5%，采用逐仓、10倍杠杆、开仓金额10000USDT挂单，挂单时间为2小时，如果超时则取消。\n\n**采用异步的方式管理这个订单，并设置订单成功或失败后的回调函数**\n\n```python\nfrom pprint import pprint\nfrom okx_trade import OkxSWAP\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'instId': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'instId': <产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    okxSWAP = OkxSWAP(\n        key='****',\n        secret='****',\n        passphrase='****',\n    )\n\n    # 产品\n    instId = 'BTC-USDT-SWAP'\n    # 开仓金额\n    openMoney = 10000\n    # 购买价格\n    askPx = okxSWAP.market.get_ticker(instId)['data']['askPx']  # 卖1价格\n    askPx = float(askPx)\n    openPrice = askPx * 0.98  # 降价2%\n    print(openPrice)\n    # 挂单时间\n    timeout = 60 * 60 * 2  # 单位秒\n    # 超时是否取消订单\n    cancel = True\n    # 是否堵塞模式\n    block = True\n\n    # 限价单开仓\n    result = okxSWAP.trade.open_limit(\n        instId=instId,  # 产品\n        openPrice=openPrice,  # 开仓价格\n        tdMode='isolated',  # 持仓方式 isolated：逐仓 cross：全仓\n        posSide='long',  # 持仓方向 long：多单 short：空单\n        lever=10,  # 杠杆\n        openMoney=openMoney,  # 开仓金额 开仓金额openMoney和开仓数量quantityCT必须输入其中一个 优先级：quantity > openMoney\n        quantityCT=None,  # 合约张数为空\n        block=True,  # 是否以堵塞的模式\n        timeout=timeout,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n    )\n```\n\n3.对于永续合约以当前BTC-USDT-SWAP的价格，止盈20%**全部**挂单买入平空，超时时间2小时，超时后取消订单，并设置回调函数。\n\n```python\nfrom pprint import pprint\nfrom okx_trade import OkxSWAP\n\n\n# 成功触发的回调函数\ndef callback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'instId':<产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('callback')\n    pprint(information)\n\n\n# 失败触发的回调函数\ndef errorback(information):\n    '''\n    :param information: 交易过程信息字典\n        information = {\n            'instId':<产品ID>,\n            'status': <订单状态>,\n            'meta': <传递过来的参数>,\n            'request_param': <发送下单请求的具体参数>,\n            'func_param': <open_limit中的参数>,\n            'get_order_result': <获取订单状态的结果>,\n            'set_order_result': <下单提交的结果>,\n            'error_result': <异常信息>,\n            'cancel_result': <取消订单的结果>,\n        }\n    '''\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    okxSWAP = OkxSWAP(\n        key='****',\n        secret='****',\n        passphrase='****',\n    )\n    # 产品\n    instId = 'BTC-USDT-SWAP'\n    # 挂单时间\n    timeout = 60 * 60 * 2  # 单位秒\n    # 超时是否取消订单\n    cancel = True\n    # 是否堵塞模式\n    block = True\n\n    # 限价单开仓\n    result = okxSWAP.trade.close_limit(\n        instId=instId,  # 产品\n        tpRate=0.2,  # 止盈率 20%\n        # 平多 positionSide=\"LONG\":   closePrice = askPx * (1 + abs(tpRate))\n        # 平空 positionSide=\"SHORT\":  closePrice = bidPx * (1 - abs(tpRate))\n        tdMode='isolated',  # 持仓方式 isolated：逐仓 cross：全仓\n        posSide='long',  # 持仓方向 long：多单 short：空单\n        quantityCT='all',  # 合约张数为空 'all' 表示全部\n        block=True,  # 是否以堵塞的模式\n        timeout=60 * 60 * 2,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n    )\n    pprint(result)\n```\n\n## 4 现货产品 OkxSPOT\n\n### 4.1 现货账户\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_balancesMap|查看账户余额字典|\n|get_balances|查看账户余额列表|  \n|get_balance|获取单个币种的余额|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取产品的余额\n    get_balance1 = okxSPOT.account.get_balance(instId='MANA-USDT')\n    pprint(get_balance1)\n    # 获取币种的余额\n    get_balance2 = okxSPOT.account.get_balance(ccy='USDT')\n    pprint(get_balance2)\n    # 获取全部资产余额列表\n    get_balances = okxSPOT.account.get_balances()\n    pprint(get_balances)\n    # 获取全部资产余额字典\n    get_balancesMap = okxSPOT.account.get_balancesMap()\n    pprint(get_balancesMap)\n```\n\n### 4.2 现货行情\n\n#### 4.2.1 现货产品规则信息\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_exchangeInfos|获取全部现货交易规则与交易对|\n|get_exchangeInfo|获取单个现货交易规则与交易对|  \n|get_symbols_trading_on|获取可以交易的现货产品列表|\n|get_symbols_trading_off|获取不可交易的现货产品列表|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取现货全部产品的交易规则\n    get_exchangeInfos = okxSPOT.market.get_exchangeInfos()\n    pprint(get_exchangeInfos)\n    # 获取单个现货产品的交易规则\n    get_exchangeInfo = okxSPOT.market.get_exchangeInfo(symbol='BTC-USDT')\n    pprint(get_exchangeInfo)\n    # 获取可以交易的现货产品列表\n    get_symbols_trading_on = okxSPOT.market.get_symbols_trading_on()\n    pprint(get_symbols_trading_on)\n    # 获取不可以交易的现货产品列表\n    get_symbols_trading_off = okxSPOT.market.get_symbols_trading_off()\n    pprint(get_symbols_trading_off)\n```\n\n#### 4.2.2 现货实时价格\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_tickers|获取全部现货产品的实时行情数据列表|\n|get_tickersMap|获取全部现货产品的实时行情数据字典|\n|get_ticker|获取单个现货产品的实时行情数据|\n|get_books|获取单个现货产品的交易深度|\n|get_books_lite|获取单个现货产品的轻量交易深度|\n\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取全部现货产品的实时行情数据列表\n    get_tickers = okxSPOT.market.get_tickers()\n    pprint(get_tickers)\n    # 获取全部现货产品的实时行情数据字典\n    get_tickersMap = okxSPOT.market.get_tickersMap()\n    pprint(get_tickersMap)\n    # 获取单个现货产品的实时行情数据\n    get_ticker = okxSPOT.market.get_ticker('BTC-USDT')\n    pprint(get_ticker)\n    # 获取单个现货产品的交易深度\n    get_books = okxSPOT.market.get_books('BTC-USDT', sz=10)\n    pprint(get_books)\n    # 获取单个现货产品的轻量交易深度\n    get_books_lite = okxSPOT.market.get_books_lite('BTC-USDT')\n    pprint(get_books_lite)\n```\n\n#### 4.2.3 现货历史K线\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_history_candle|获取产品的历史K线数据|\n|get_history_candle_latest|获取产品指定数量的最新历史K线数据|\n|get_history_candle_by_date|获取产品指定日期的历史K线数据|\n\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取产品的历史K线数据\n    get_history_candle = okxSPOT.market.get_history_candle(\n        symbol='BTC-USDT',\n        start='2023-01-01 00:00:00',\n        end='2023-01-01 23:59:00',\n        bar='1m',\n    )\n    pprint(get_history_candle)\n\n    # 获取产品指定数量的最新历史K线数据\n    get_history_candle_latest = okxSPOT.market.get_history_candle_latest(\n        symbol='BTC-USDT',\n        length=1440,\n        bar='1m',\n    )\n    pprint(get_history_candle_latest)\n\n    # 获取产品指定日期的历史K线数据\n    get_history_candle_by_date = okxSPOT.market.get_history_candle_by_date(\n        symbol='BTC-USDT',\n        date='2023-01-01',\n        bar='1m',\n    )\n    pprint(get_history_candle_by_date)\n```\n\n### 4.3 现货交易\n\n#### 4.3.1 现货交易基础订单\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|set_order|普通下单购买|  \n|get_order|查询订单|  \n|get_orders_pending|获取未成交订单列表|\n|get_orders_pending_open|获取未成交的开仓订单列表|\n|get_orders_pending_close|获取未成交的平仓订单列表|\n|cancel_order|撤销订单|\n|wait_order_FILLED|等待订单成交|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 获取未成交订单列表\n    get_orders_pending = okxSPOT.trade.get_orders_pending()\n    pprint(get_orders_pending)\n    # 获取未成交的开仓订单列表\n    get_orders_pending_open = okxSPOT.trade.get_orders_pending_open()\n    pprint(get_orders_pending_open)\n    # 获取未成交的平仓订单列表\n    get_orders_pending_close = okxSPOT.trade.get_orders_pending_close()\n    pprint(get_orders_pending_close)\n    # 等待订单成交\n    wait_order_FILLED = okxSPOT.trade.wait_order_FILLED(\n        instId='MANA-USDT',\n        ordId='547717986975911936',\n        timeout=10,\n    )\n    pprint(wait_order_FILLED)\n    # 获取订单信息\n    get_order = okxSPOT.trade.get_order(\n        instId='MANA-USDT',\n        ordId='547717986975911936',\n    )\n    pprint(get_order)\n    # 取消订单\n    cancel_order = okxSPOT.trade.cancel_order(\n        instId='MANA-USDT', ordId='547717986975911936'\n    )\n    pprint(cancel_order)\n```\n\n#### 4.3.2 现货下单价格与数量\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|round_quantity|圆整下单数量|\n|round_price|圆整开仓价格|\n|get_quantity|根据开仓金额、开仓价格与杠杆计算最大可开仓数量|\n|quantity_to_f|将下单数量转化为字符串|\n|price_to_f|将下单价格转化为字符串|\n\n```python\nfrom pprint import pprint\nfrom okx_trade import OkxSPOT\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 圆整下单数量\n    round_quantity_result = okxSPOT.trade.round_quantity(\n        quantity=0.00023234234234,\n        instId='MANA-USDT',\n        ordType='market',  # market | limit\n    )\n    pprint(round_quantity_result)\n    # 圆整下单价格\n    round_price_result = okxSPOT.trade.round_price(\n        price=20.123123123,\n        instId='MANA-USDT',\n        type='FLOOR',  # FLOOR:向下圆整 CEIL:向上圆整\n    )\n    pprint(round_price_result)\n    # 根据开仓金额、开仓价格与杠杆计算最大可开仓数量\n    get_quantity_result = okxSPOT.trade.get_quantity(\n        openPrice=2.123123,\n        openMoney=20,\n        instId='MANA-USDT',\n        ordType='limit',\n        leverage=1\n    )\n    pprint(get_quantity_result)\n    # 将下单数量转化为字符串\n    quantity_to_f_result = okxSPOT.trade.quantity_to_f(\n        quantity=get_quantity_result['data'],\n        instId='MANA-USDT',\n    )\n    pprint(quantity_to_f_result)\n    # 将下单价格转化为字符串\n    price_to_f_result = okxSPOT.trade.price_to_f(\n        price=round_price_result['data'],\n        instId='MANA-USDT',\n    )\n    pprint(price_to_f_result)\n```\n\n#### 4.3.3 现货限单价开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_limit|限价单开仓|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 限价单开仓\n    open_limit = okxSPOT.trade.open_limit(\n        instId='MANA-USDT',  # 产品\n        openPrice=0.1,  # 开仓价格\n        openMoney=4,  # 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        # quantity=10,  # 开仓数量\n        block=True,  # 是否以堵塞的模式\n        timeout=5,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n    )\n```\n\n#### 4.3.4 现货市价单开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_market|市价单开仓|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 市价单开仓\n    open_market_result = okxSPOT.trade.open_market(\n        instId='MANA-USDT',  # 产品\n        quantity=3,  # 开仓数量\n        # openMoney=3, 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        timeout=10,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 4.3.5 现货限价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_limit|限价单平仓|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 市价单开仓\n    open_market_result = okxSPOT.trade.open_market(\n        instId='MANA-USDT',  # 产品\n        quantity=3,  # 开仓数量\n        # openMoney=3, 开仓金额 开仓金额openMoney和开仓数量quantity必须输入其中一个 优先级：quantity > openMoney\n        timeout=10,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 4.3.6 现货市价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_market|市价单平仓|\n\n```python\nfrom okx_trade import OkxSPOT\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSPOT = OkxSPOT(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 限价单平仓\n    okxSPOT.trade.close_limit(\n        instId='MANA-USDT',  # 产品\n        # closePrice=1000,  # 平仓价格 closePrice 和 tpRate必须填写其中一个\n        tpRate=0.1,  # 挂单止盈率\n        quantity='all',  # 平仓数量\n        block=True,  # 是否堵塞\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 未完全成交是否取消订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n## 5 永续合约 OkxSWAP\n\n### 5.1 永续账户\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_balance|获取币种的余额|\n|set_position_mode|设置持仓模式|  \n|set_leverage|设置杠杆|\n|get_leverage|获取杠杆|\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取币种的余额\n    get_balance = okxSWAP.account.get_balance(ccy='USDT')\n    pprint(get_balance)\n    # 设置持仓模式\n    set_position_mode = okxSWAP.account.set_position_mode(\n        posMode='long_short_mode',\n    )\n    pprint(set_position_mode)\n    # 设置逐仓杠杆（多仓）\n    set_leverage_isolated_long = okxSWAP.account.set_leverage(\n        lever=4,\n        instId='MANA-USDT-SWAP',\n        mgnMode='isolated',\n        posSide='long',\n    )\n    pprint(set_leverage_isolated_long)\n    # 设置逐仓杠杆（空仓）\n    set_leverage_isolated_short = okxSWAP.account.set_leverage(\n        lever=5,\n        instId='MANA-USDT-SWAP',\n        mgnMode='isolated',\n        posSide='short',\n    )\n    pprint(set_leverage_isolated_short)\n    # 获取逐仓杠杆\n    get_leverage_isolated = okxSWAP.account.get_leverage(\n        instId='MANA-USDT-SWAP',\n        mgnMode='isolated',\n    )\n    pprint(get_leverage_isolated)\n    # 设置全仓杠杆\n    set_leverage_cross = okxSWAP.account.set_leverage(\n        lever=4,\n        instId='MANA-USDT-SWAP',\n        mgnMode='cross',\n        posSide='',\n    )\n    pprint(set_leverage_cross)\n    # 获取逐仓杠杆\n    get_leverage_cross = okxSWAP.account.get_leverage(\n        instId='MANA-USDT-SWAP',\n        mgnMode='cross',\n    )\n    pprint(get_leverage_cross)\n```\n\n### 5.2 永续行情\n\n#### 5.2.1 永续产品规则信息\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_exchangeInfos|获取全部永续合约交易规则与交易对|\n|get_exchangeInfo|获取单个永续合约交易规则与交易对|  \n|get_symbols_trading_on|获取可以交易的永续合约产品列表|\n|get_symbols_trading_off|获取不可交易的永续合约产品列表|\n\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 获取永续合约全部产品的交易规则\n    get_exchangeInfos = okxSWAP.market.get_exchangeInfos()\n    pprint(get_exchangeInfos)\n\n    # 获取单个永续合约产品的交易规则\n    get_exchangeInfo = okxSWAP.market.get_exchangeInfo(symbol='BTC-USDT-SWAP')\n    pprint(get_exchangeInfo)\n\n    # 获取可以交易的永续合约产品列表\n    get_symbols_trading_on = okxSWAP.market.get_symbols_trading_on()\n    pprint(get_symbols_trading_on)\n\n    # 获取不可以交易的永续合约产品列表\n    get_symbols_trading_off = okxSWAP.market.get_symbols_trading_off()\n    pprint(get_symbols_trading_off)\n```\n\n#### 5.2.2 永续实时价格\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_tickers|获取全部永续合约的实时行情数据列表|\n|get_tickersMap|获取全部永续合约的实时行情数据字典|\n|get_ticker|获取单个永续合约产品的实时行情数据|\n|get_books|获取单个永续合约产品的交易深度|\n|get_books_lite|获取单个永续合约产品的轻量交易深度|\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取全部永续合约产品的实时行情数据列表\n    get_tickers = okxSWAP.market.get_tickers()\n    pprint(get_tickers)\n    # 获取全部永续合约产品的实时行情数据字典\n    get_tickersMap = okxSWAP.market.get_tickersMap()\n    pprint(get_tickersMap)\n    # 获取单个永续合约产品的实时行情数据\n    get_ticker = okxSWAP.market.get_ticker('BTC-USDT-SWAP')\n    pprint(get_ticker)\n    # 获取单个永续合约产品的交易深度\n    get_books = okxSWAP.market.get_books('BTC-USDT-SWAP', sz=10)\n    pprint(get_books)\n    # 获取单个永续合约产品的轻量交易深度\n    get_books_lite = okxSWAP.market.get_books_lite('BTC-USDT-SWAP')\n    pprint(get_books_lite)\n```\n\n#### 5.2.3 永续历史K线\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|  \n|get_history_candle|获取产品的历史K线数据|\n|get_history_candle_latest|获取产品指定数量的最新历史K线数据|\n|get_history_candle_by_date|获取产品指定日期的历史K线数据|\n\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 获取产品的历史K线数据\n    get_history_candle = okxSWAP.market.get_history_candle(\n        symbol='BTC-USDT-SWAP',\n        start='2023-01-01 00:00:00',\n        end='2023-01-01 23:59:00',\n        bar='1m',\n    )\n    pprint(get_history_candle)\n\n    # 获取产品指定数量的最新历史K线数据\n    get_history_candle_latest = okxSWAP.market.get_history_candle_latest(\n        symbol='BTC-USDT-SWAP',\n        length=1440,\n        bar='1m',\n    )\n    pprint(get_history_candle_latest)\n\n    # 获取产品指定日期的历史K线数据\n    get_history_candle_by_date = okxSWAP.market.get_history_candle_by_date(\n        symbol='BTC-USDT-SWAP',\n        date='2023-01-01',\n        bar='1m',\n    )\n    pprint(get_history_candle_by_date)\n```\n\n\n### 5.3 永续交易\n\n#### 5.3.1 永续交易基础订单\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|set_order|普通下单购买|  \n|get_order|查询订单|  \n|get_orders_pending|获取未成交订单列表|\n|get_orders_pending_open|获取未成交的开仓订单列表|\n|get_orders_pending_close|获取未成交的平仓订单列表|\n|cancel_order|撤销订单|\n|wait_order_FILLED|等待订单成交|\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 获取未成交订单列表\n    get_orders_pending = okxSWAP.trade.get_orders_pending()\n    pprint(get_orders_pending)\n    # 获取未成交的开仓订单列表\n    get_orders_pending_open = okxSWAP.trade.get_orders_pending_open()\n    pprint(get_orders_pending_open)\n    # 获取未成交的平仓订单列表\n    get_orders_pending_close = okxSWAP.trade.get_orders_pending_close()\n    pprint(get_orders_pending_close)\n    # 等待订单成交\n    wait_order_FILLED = okxSWAP.trade.wait_order_FILLED(\n        instId='MANA-USDT-SWAP',\n        ordId='547717986975911936',\n        timeout=10,\n    )\n    pprint(wait_order_FILLED)\n    # 获取订单信息\n    get_order = okxSWAP.trade.get_order(\n        instId='MANA-USDT-SWAP',\n        ordId='547717986975911936',\n    )\n    pprint(get_order)\n    # 取消订单\n    cancel_order = okxSWAP.trade.cancel_order(\n        instId='MANA-USDT-SWAP', ordId='547717986975911936'\n    )\n    pprint(cancel_order)\n```\n\n#### 5.3.2 永续下单价格与数量\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|round_quantity|圆整下单数量|\n|round_price|圆整下单价格|\n|get_quantity|根据开仓金额、开仓价格与杠杆计算最大可开仓数量|\n|quantity_to_f|将下单数量转化为字符串|\n|price_to_f|将下单价格转化为字符串|\n\n\n```python\nfrom pprint import pprint\nfrom okx_trade import OkxSWAP\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n    # 圆整下单数量\n    round_quantity_result = okxSWAP.trade.round_quantity(\n        quantity=0.00023234234234,\n        instId='MANA-USDT-SWAP',\n        ordType='market',  # market | limit\n    )\n    pprint(round_quantity_result)\n    # 圆整下单价格\n    round_price_result = okxSWAP.trade.round_price(\n        price=20.123123123,\n        instId='MANA-USDT-SWAP',\n        type='FLOOR',  # FLOOR:向下圆整 CEIL:向上圆整\n    )\n    pprint(round_price_result)\n    # 根据开仓金额、开仓价格与杠杆计算最大可开仓数量\n    get_quantity_result = okxSWAP.trade.get_quantity(\n        openPrice=2.123123,\n        openMoney=20,\n        instId='MANA-USDT-SWAP',\n        ordType='limit',\n        leverage=1\n    )\n    pprint(get_quantity_result)\n    # 将下单数量转化为字符串\n    quantity_to_f_result = okxSWAP.trade.quantity_to_f(\n        quantity=get_quantity_result['data'],\n        instId='MANA-USDT-SWAP',\n    )\n    pprint(quantity_to_f_result)\n    # 将下单价格转化为字符串\n    price_to_f_result = okxSWAP.trade.price_to_f(\n        price=round_price_result['data'],\n        instId='MANA-USDT-SWAP',\n    )\n    pprint(price_to_f_result)\n```\n\n#### 5.3.3 永续限单价开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_limit|限价单开仓|\n\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 限价单开仓\n    open_limit = okxSWAP.trade.open_limit(\n        instId='MANA-USDT-SWAP',  # 产品\n        tdMode='isolated',  # 持仓方式 isolated：逐仓 cross：全仓\n        posSide='long',  # 持仓方向 long：多单 short：空单\n        lever=1,  # 杠杆倍数\n        openPrice=0.1,  # 开仓价格\n        openMoney=4,  # 开仓金额 开仓金额openMoney和开仓数量quantityCT必须输入其中一个 优先级：quantityCT > openMoney\n        # quantityCT=1,  # 开仓数量 注意：quantityCT是合约的张数，不是货币数量\n        block=True,  # 是否以堵塞的模式\n        timeout=5,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n    )\n```\n\n#### 5.3.4 永续市价单开仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|open_market|市价单开仓|\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 市价单开仓\n    open_market_result = okxSWAP.trade.open_market(\n        instId='MANA-USDT-SWAP',  # 产品\n        tdMode='isolated',  # 持仓方式 isolated：逐仓 cross：全仓\n        posSide='long',  # 持仓方向 long：多单 short：空单\n        lever=1,  # 杠杆倍数\n        openMoney=4,  # 开仓金额 开仓金额openMoney和开仓数量quantityCT必须输入其中一个 优先级：quantityCT > openMoney\n        # quantityCT=1,  # 开仓数量 注意：quantityCT是合约的张数，不是货币数量\n        timeout=10,  # 等待订单成功的超时时间（秒）\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 订单超时后是否取消\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n#### 5.3.5 永续限价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_limit|限价单平仓|\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 限价单平仓\n    okxSWAP.trade.close_limit(\n        instId='MANA-USDT-SWAP',  # 产品\n        tdMode='isolated',  # 持仓方式 isolated：逐仓 cross：全仓\n        posSide='long',  # 持仓方向 long：多单 short：空单\n        # closePrice=1000,  # 平仓价格 closePrice 和 tpRate必须填写其中一个\n        tpRate=0.1,  # 挂单止盈率\n        quantityCT='all',  # 平仓数量，注意：quantityCT是合约的张数，不是货币数量\n        block=True,  # 是否堵塞\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 未完全成交是否取消订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=True,  # 是否开启一个新的线程维护这个订单\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n\n#### 5.3.6 永续市价单平仓\n\n便捷函数：\n\n|函数名|说明|\n|:---|:---|\n|close_market|市价单平仓|\n\n```python\nfrom okx_trade import OkxSWAP\nfrom pprint import pprint\n\n\ndef callback(information):\n    print('callback')\n    pprint(information)\n\n\ndef errorback(information):\n    print('errorback')\n    pprint(information)\n\n\nif __name__ == '__main__':\n    KEY = '****'\n    SECRET = '****'\n    PASSPHRASE = '****'\n\n    okxSWAP = OkxSWAP(key=KEY, secret=SECRET, passphrase=PASSPHRASE)\n\n    # 市价单平仓\n    okxSWAP.trade.close_market(\n        instId='MANA-USDT-SWAP',  # 产品\n        tdMode='isolated',  # 持仓方式 isolated：逐仓 cross：全仓\n        posSide='long',  # 持仓方向 long：多单 short：空单\n        quantityCT='all',  # 平仓数量，注意：quantityCT是合约的张数，不是货币数量\n        timeout=10,  # 等待订单成功的超时时间\n        delay=0.2,  # 检测订单状态的间隔 (秒)\n        cancel=True,  # 未完全成交是否取消订单\n        callback=callback,  # 开仓成功触发的回调函数\n        errorback=errorback,  # 开仓失败触发的回调函数\n        newThread=False,  # 是否开启一个新的线程维护这个订单\n        tag='',  # 订单标签\n        clOrdId='',  # 客户自定义订单ID\n        meta={},  # 向回调函数中传递的参数字典\n    )\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pyted/okx_trade",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "okx-trade",
    "package_url": "https://pypi.org/project/okx-trade/",
    "platform": null,
    "project_url": "https://pypi.org/project/okx-trade/",
    "project_urls": {
      "Homepage": "https://github.com/pyted/okx_trade"
    },
    "release_url": "https://pypi.org/project/okx-trade/1.0.1/",
    "requires_dist": [
      "candlelite",
      "paux (>=1.0.5)",
      "okx (>=1.0.7)",
      "okx-candle (>=1.0.5)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Make OKX API Transactions Easier",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16955815,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97537a03ef5a0ae576c22862aac64244f51b4c66ae056b5a272f0cd38fc688a0",
          "md5": "5cfd01e3ed6eec486083dbd818c28947",
          "sha256": "50070f1d3be179426df2119cd83c36ec3b22193f14bebb3969f84ba02e68c456"
        },
        "downloads": -1,
        "filename": "okx_trade-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cfd01e3ed6eec486083dbd818c28947",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 37989,
        "upload_time": "2023-02-21T04:21:36",
        "upload_time_iso_8601": "2023-02-21T04:21:36.562789Z",
        "url": "https://files.pythonhosted.org/packages/97/53/7a03ef5a0ae576c22862aac64244f51b4c66ae056b5a272f0cd38fc688a0/okx_trade-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4009764c5f631f9cc8fa916d903eb2fff3704df2ea9162baec4b2231a3f32010",
          "md5": "0ed842a496544d437e6bb7e11e8f585f",
          "sha256": "fa56d83f18c07c1226c82246c902884403775b3789e3b26b32509aa666d859b5"
        },
        "downloads": -1,
        "filename": "okx_trade-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0ed842a496544d437e6bb7e11e8f585f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 30924,
        "upload_time": "2023-02-21T04:21:44",
        "upload_time_iso_8601": "2023-02-21T04:21:44.918059Z",
        "url": "https://files.pythonhosted.org/packages/40/09/764c5f631f9cc8fa916d903eb2fff3704df2ea9162baec4b2231a3f32010/okx_trade-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97537a03ef5a0ae576c22862aac64244f51b4c66ae056b5a272f0cd38fc688a0",
        "md5": "5cfd01e3ed6eec486083dbd818c28947",
        "sha256": "50070f1d3be179426df2119cd83c36ec3b22193f14bebb3969f84ba02e68c456"
      },
      "downloads": -1,
      "filename": "okx_trade-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5cfd01e3ed6eec486083dbd818c28947",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 37989,
      "upload_time": "2023-02-21T04:21:36",
      "upload_time_iso_8601": "2023-02-21T04:21:36.562789Z",
      "url": "https://files.pythonhosted.org/packages/97/53/7a03ef5a0ae576c22862aac64244f51b4c66ae056b5a272f0cd38fc688a0/okx_trade-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4009764c5f631f9cc8fa916d903eb2fff3704df2ea9162baec4b2231a3f32010",
        "md5": "0ed842a496544d437e6bb7e11e8f585f",
        "sha256": "fa56d83f18c07c1226c82246c902884403775b3789e3b26b32509aa666d859b5"
      },
      "downloads": -1,
      "filename": "okx_trade-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0ed842a496544d437e6bb7e11e8f585f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 30924,
      "upload_time": "2023-02-21T04:21:44",
      "upload_time_iso_8601": "2023-02-21T04:21:44.918059Z",
      "url": "https://files.pythonhosted.org/packages/40/09/764c5f631f9cc8fa916d903eb2fff3704df2ea9162baec4b2231a3f32010/okx_trade-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}