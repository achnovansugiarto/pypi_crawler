{
  "info": {
    "author": "Example Author",
    "author_email": "author@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Travaux Pratiques: Distrbution de votre code Python\n\nLors de cet séance, nous allons transformer en package les fichiers pythons développés lors du [TP2](http://pedago-service.univ-lyon1.fr:2325/POO/TP2). Cette opération se déroulera au travers des étapes suivantes:\n1. La copie des modules Python dans une arborescence de répertoires ad-hoc\n2. La transformation de votre module Python en un package\n3. La création d'un jeu de fonctions exposées \"publiquement\" par votre package\n4. La mention des spécifications de votre package dans le fichier de configuration de pip (`setuptool.py`)\n5. Le déploiement en local de ce package depuis son repository git de développement\n6. La construction d'une distribution à partir de votre package\n7. L'upload de cette distribution sur pipy.org\n\n## Mise en place\n\n### Création d'un repository gitlab dédié\n\nVeuillez initialiser un dépôt git du type `http://pedago-service.univ-lyon1.fr:2325/USER_ID/<package_formatlib_repo>`. Vous clonerez celui-ci et y travaillerez pour le reste de ce travail, sauf mention contraire. Vous pouvez choisir le nom `<package_format_lib>` qui vous convient.\n\n### Virtualenv\nCréez un environnement virtuel, à l'aide du module \n    [`venv`](https://docs.python.org/3/tutorial/venv.html) pour le déroulement de ce TP.\n\n**Attention**, le répertoire *contenant* l'environnement virtuel est créé dans votre repertoire courant. Afin de ne pas joindre cete environnement à vos `git commit` vous pouvez:\n- executer la commande `python -m venv` en dehors de votre dépôt git\n- ajouter le repertoire de l'environnement à un fichier [`.gitignore`](https://git-scm.com/docs/gitignore)\n\n### Modules requis\nActivez, puis installez les modules suivants dans l'environnement:\n\n* [setuptools](https://pypi.org/project/setuptools/)\n* [twine](https://pypi.org/project/twine/)\n\nObservez quelles modifications du répertoire de l'environnement ont induites ces deux installations.\n\n### Création de l'arborescence\n```shell\n<MON_DEPOT_GIT>\n├── README.md\n├── setup.py\n└── src\n    └── <PACKAGE_FORMATLIB>\n        └── formatLib.py\n        └── ...\n```\n\nAvec, \n* MON_DEPOT_GIT: le nom du répertoire local contenant votre dépôt git\n* README.md: le fichier de documentation de votre futur package, pour l'instant vide\n* setup.py: le fichier de configuration de `pip install`, pour l'instant vide\n* MON_PACKAGE_FORMAT_LIB: le nom que vous souhaitez donner à votre futur package\n* `formatLib.py` et `...`: le(s) module(s) développé(s) à l'issue du TP2\n\nToutes les modifications à apporter à vos fichiers Python prendront donc place dans le répertoire `<MON_DEPOT_GIT>/src/<PACKAGE_FORMATLIB>`\n\n### Transformation en package\n\nUn package est essentiellement un module doté d'une variable `__path__`. Dans la pratique, que convient-il d'ajouter au(x) répertoire(s) actuel(s) pour le(s) faire évoluer en package ?  \n\n### Création de l'interface publique (API) du package\n\nNous souhaitons permettre aux futurs utilisateurs du package de réaliser facilement les opérations de conversion de format sous la forme de fonctions (et non plus de script).\nLe package pourra ainsi être utilisé de la façon suivante:\n\n###### `script_test.py`\n\n```python\nimport <PACKAGE_FORMATLIB>\n# Lit un fihier au format BED et écrit \n# son équivalent dans un fichier au format GMF\n<PACKAGE_FORMATLIB>.bed2gmf(FILE_IN , FILE_OUT1)\n# Lit un fihier au format BED et écrit \n# son équivalent dans un fichier au format SSAM\n<PACKAGE_FORMATLIB>.bed2ssam(FILE_IN, FILE_OUT2)\n```\n\nDans ce exemple, la fonction `bed2gmf`, est une fonction publique qui appelera les fonctions pré-existantes dans votre module `formatLib` nécessaires pour:\n\n- Parser le fichier source\n- Créer les objets/dictionnaires stockant ces données  \n- Formater ces données dans une chaîne de caractères au format de sortie demandé\n\nVous devrez proposer une implémentation complète des fonctions publiques `bed2gmf` et `bed2ssam` prenant en charge toutes les étapes de la lecture du fichier d'entrée à l'écriture dans un fichier de sortie. Par exemple, étant donnée une fonction préexistante équivalente à `formatLib.bed_parser`\n\n###### `MON_PACKAGE/__init__.py`\n\n```python\nimport formatLib\ndef bed2gmf(bed_file_in, gmf_file_out):\n    data       = formatLib.bed_parser(bed_file_in)\n    gmf_format = formatLib.gmf_dumper(data)\n\n    with open(gmf_file_out,'w') as fp:\n        fp.write(gmf_format)\n```\n\nCeci n'est qu'un exemple, vous l'adapterez à la version de votre librairie. Idéalement, vous **ne modifierez pas** votre librarie `formatLib`.\n\n### Configuration de l'installation du package\n\nL'installation d'un package est prise en charge par la commande pip install MON_PACKAGE. Dans le cas d'une distribution source, la commande, `pip`  exécute le fichier `setup.py` contenu dans l'archive du package.\n\n#### Ecriture du fichier setup.py\n\nColler dans le fichier approprié de votre dépôt git, le contenu suivant et modifier son contenu le pour l'adapter à votre package.\n\n```python\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"<PACKAGE_FORMATLIB>\", # Par convention, utiliser le nom du repertoire contenant votre package\n    version=\"1.0.0\",\n    author=\"Example Author\",\n    author_email=\"author@example.com\",\n    description=\"A small example package\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"http://pedago-service.univ-lyon1.fr:2325/POO/tp-packaging\",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    install_requires=['numpy'],\n    package_dir={'': 'src'},\n    python_requires='>=3.6',\n)\n```\n\nL'option `package_dir` definit le repertoire dans lequel chercher le repertoire de votre package.\nObservez notamment comment sont générés les documentations.\nVous devrez éditer la documentation \"longue\" au fur et à mesure de ce TP.\n\n#### Test de deploiement de votre package\n\nLe programme [`pip`](https://pip.pypa.io/en/stable/reference/) est un outil puissant aux multiples fonctionalités. Nous allons tout d'abord l'utilisé pour verifier la validité de notre version local du projet et son fichier `setup.py`. La forme de la commande pip est alors la suivante:\n\n```shell\npip install [options] <local project path> ...\n```\n\nOù `<local project path>` est le chemin jusqu'au repertoire contenant le fichier de configuration `setup.py`.\n**La commande est à executer dans un environnement virtuel**.\nVerifier ensuite l'installation du package en:\n\n- inspectant le répertoire `site-packages`\n- important le package dans l'interpreteur Python en ligne de commandes (REPL).\n\nQuelle forme a pris l'installation de votre package?\nObservez vous des modification dans le dépôt git?\nModifiez le fichier `.gitignore` en conséquence.\n\n#### Test de deploiement distant de votre package\nTout d'abord, mettez à jour le dépôt distant de votre projet, aka:`commit & push`, vous pouvez changer le numéro de version de votre package dans `setup.py`.\nNous allons maintenant pouvoir tester l'installation de votre package depuis ce dépôt distant, grâce à la prise en charge par pip des protocoles ssh,http et git.\nLa commande [`pip`](https://pip.pypa.io/en/stable/reference/) sera de la forme\n```sh\npip install -I git+http://pedago-service.univ-lyon1.fr:2325/<USER_ID>/<package_formatlib_repo>\n```\nle flag `-I`, assure une réinstallation dans les cas ou un package de mêmes nom et version serait déjà installé (ce qui est la cas ici).\n\n##### Précisions\nDans les deux cas de test ci-dessus le flag `-e` permettrait d'installer le package en mode édition, ce qui, couplé au flag `--src` autorise à installer le package dans le repertoire de son choix\n```sh\npip install -I -e --src /tmp/editable_pkg git+http://pedago-service.univ-lyon1.fr:2325/<USER_ID>/<package_formatlib_repo>\n```\nhttps://pip.pypa.io/en/latest/reference/pip_install/#vcs-support\n\n#### Construire les distributions\n\nMaintenant que le deploiement de votre package est assuré, nous allons créer les archives necessaire à son partage avec le monde entier.\n\n##### Distribution source \n\n\n##### Distribution wheel\n\n\n##### Envoi à pipy.org",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pedago-service.univ-lyon1.fr:2325/POO/tp-packaging",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "format-lib-package",
    "package_url": "https://pypi.org/project/format-lib-package/",
    "platform": "",
    "project_url": "https://pypi.org/project/format-lib-package/",
    "project_urls": {
      "Homepage": "http://pedago-service.univ-lyon1.fr:2325/POO/tp-packaging"
    },
    "release_url": "https://pypi.org/project/format-lib-package/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small example package",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8755977,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84617f39875a93ba349f9c2b290080c7d9491d174d834b5abbe41c7d3811ce9e",
          "md5": "87943666e3f7970f9ba31bae8b39e5f1",
          "sha256": "4a632b9b9cab804f7c190b9116283593b3fadd87deb38712bbd701d5b6820cc7"
        },
        "downloads": -1,
        "filename": "format-lib-package-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "87943666e3f7970f9ba31bae8b39e5f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4784,
        "upload_time": "2020-11-26T14:39:02",
        "upload_time_iso_8601": "2020-11-26T14:39:02.991285Z",
        "url": "https://files.pythonhosted.org/packages/84/61/7f39875a93ba349f9c2b290080c7d9491d174d834b5abbe41c7d3811ce9e/format-lib-package-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84617f39875a93ba349f9c2b290080c7d9491d174d834b5abbe41c7d3811ce9e",
        "md5": "87943666e3f7970f9ba31bae8b39e5f1",
        "sha256": "4a632b9b9cab804f7c190b9116283593b3fadd87deb38712bbd701d5b6820cc7"
      },
      "downloads": -1,
      "filename": "format-lib-package-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "87943666e3f7970f9ba31bae8b39e5f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4784,
      "upload_time": "2020-11-26T14:39:02",
      "upload_time_iso_8601": "2020-11-26T14:39:02.991285Z",
      "url": "https://files.pythonhosted.org/packages/84/61/7f39875a93ba349f9c2b290080c7d9491d174d834b5abbe41c7d3811ce9e/format-lib-package-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}