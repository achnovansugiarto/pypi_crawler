{
  "info": {
    "author": "Matt Dowds",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Python Mock Firestore\n\nAn in-memory implementation of the [Python client library](https://github.com/googleapis/python-firestore) for Google Cloud Firestore, intended for use in tests to replace the real thing. This project is only a partial implementation of the real client library.\n\nTo install:\n\n`pip install mock-firestore`\n\nPython 3.6+ is required for it to work.\n\n## Usage\n\n### Sync\n\n```python\ndb = firestore.Client()\nmock_db = MockFirestore()\n\n# Can be used in the same way as a firestore.Client() object would be, e.g.:\ndb.collection('users').get()\nmock_db.collection('users').get()\n```\n\n### Async\n\n```python\ndb = firestore.AsyncClient()\nmock_db = AsyncMockFirestore()\n\nawait db.collection('users').get()\nawait mock_db.collection('users').get()\n```\n\nTo reset the store to an empty state, use the `reset()` method:\n```python\nmock_db = MockFirestore()\nmock_db.reset()\n```\n\nor the equivalent method of `AsyncMockFirestore`\n\n## Supported operations\n\n### Sync\n\n```python\nmock_db = MockFirestore()\n\n# Collections\nmock_db.collections()\nmock_db.collection('users')\nmock_db.collection('users').get()\nmock_db.collection('users').list_documents()\nmock_db.collection('users').stream()\n\n# Documents\nmock_db.collection('users').document()\nmock_db.collection('users').document('alovelace')\nmock_db.collection('users').document('alovelace').id\nmock_db.collection('users').document('alovelace').parent\nmock_db.collection('users').document('alovelace').update_time\nmock_db.collection('users').document('alovelace').read_time\nmock_db.collection('users').document('alovelace').get()\nmock_db.collection('users').document('alovelace').get().exists\nmock_db.collection('users').document('alovelace').get().to_dict()\nmock_db.collection('users').document('alovelace').set({\n    'first': 'Ada',\n    'last': 'Lovelace'\n})\nmock_db.collection('users').document('alovelace').set({'first': 'Augusta Ada'}, merge=True)\nmock_db.collection('users').document('alovelace').update({'born': 1815})\nmock_db.collection('users').document('alovelace').update({'favourite.color': 'red'})\nmock_db.collection('users').document('alovelace').update({'associates': ['Charles Babbage', 'Michael Faraday']})\nmock_db.collection('users').document('alovelace').collection('friends')\nmock_db.collection('users').document('alovelace').delete()\nmock_db.collection('users').document('alovelace').delete()\nmock_db.collection('users').add({'first': 'Ada', 'last': 'Lovelace'}, 'alovelace')\nmock_db.get_all([mock_db.collection('users').document('alovelace')])\nmock_db.document('users/alovelace')\nmock_db.document('users/alovelace').update({'born': 1815})\nmock_db.collection('users/alovelace/friends')\n\n# Querying\nmock_db.collection('users').order_by('born').get()\nmock_db.collection('users').order_by('born', direction='DESCENDING').get()\nmock_db.collection('users').limit(5).get()\nmock_db.collection('users').where('born', '==', 1815).get()\nmock_db.collection('users').where('born', '!=', 1815).get()\nmock_db.collection('users').where('born', '<', 1815).get()\nmock_db.collection('users').where('born', '>', 1815).get()\nmock_db.collection('users').where('born', '<=', 1815).get()\nmock_db.collection('users').where('born', '>=', 1815).get()\nmock_db.collection('users').where('born', 'in', [1815, 1900]).stream()\nmock_db.collection('users').where('born', 'in', [1815, 1900]).stream()\nmock_db.collection('users').where('associates', 'array_contains', 'Charles Babbage').stream()\nmock_db.collection('users').where('associates', 'array_contains_any', ['Charles Babbage', 'Michael Faraday']).stream()\n\n# Transforms\nmock_db.collection('users').document('alovelace').update({'likes': firestore.Increment(1)})\nmock_db.collection('users').document('alovelace').update({'associates': firestore.ArrayUnion(['Andrew Cross', 'Charles Wheatstone'])})\nmock_db.collection('users').document('alovelace').update({firestore.DELETE_FIELD: \"born\"})\nmock_db.collection('users').document('alovelace').update({'associates': firestore.ArrayRemove(['Andrew Cross'])})\n\n# Cursors\nmock_db.collection('users').start_after({'id': 'alovelace'}).stream()\nmock_db.collection('users').end_before({'id': 'alovelace'}).stream()\nmock_db.collection('users').end_at({'id': 'alovelace'}).stream()\nmock_db.collection('users').start_after(mock_db.collection('users').document('alovelace')).stream()\n\n# Transactions\ntransaction = mock_db.transaction()\ntransaction.id\ntransaction.in_progress\ntransaction.get(mock_db.collection('users').where('born', '==', 1815))\ntransaction.get(mock_db.collection('users').document('alovelace'))\ntransaction.get_all([mock_db.collection('users').document('alovelace')])\ntransaction.set(mock_db.collection('users').document('alovelace'), {'born': 1815})\ntransaction.update(mock_db.collection('users').document('alovelace'), {'born': 1815})\ntransaction.delete(mock_db.collection('users').document('alovelace'))\ntransaction.commit()\n```\n\n### Async\n*(Where usage of those differs from the above)*\n\n*Note: all iterator methods like `stream` or `list_documents` in AsyncMockFirestore and its associated async classes \nreturn asynchronous iterators, so when iterating over them,\n`async for` syntax must be used.*\n\n```python\nmock_db = AsyncMockFirestore()\n\n# Collections\nawait mock_db.collection('users').get()\n\n# async iterators\n[doc_ref async for doc_ref in mock_db.collection('users').list_documents()]\n[doc_snapshot async for doc_snapshot in mock_db.collection('users').stream()]\n\n# Documents\nawait mock_db.collection('users').document('alovelace').get()\ndoc_snapshot = await mock_db.collection('users').document('alovelace').get()\ndoc_snapshot.exists\ndoc_snapshot.to_dict()\nawait mock_db.collection('users').document('alovelace').set({\n    'first': 'Ada',\n    'last': 'Lovelace'\n})\nawait mock_db.collection('users').document('alovelace').set({'first': 'Augusta Ada'}, merge=True)\nawait mock_db.collection('users').document('alovelace').update({'born': 1815})\nawait mock_db.collection('users').document('alovelace').update({'favourite.color': 'red'})\nawait mock_db.collection('users').document('alovelace').update({'associates': ['Charles Babbage', 'Michael Faraday']})\nawait mock_db.collection('users').document('alovelace').delete()\nawait mock_db.collection('users').document('alovelace').delete()\nawait mock_db.collection('users').add({'first': 'Ada', 'last': 'Lovelace'}, 'alovelace')\nawait mock_db.get_all([mock_db.collection('users').document('alovelace')])\nawait mock_db.document('users/alovelace').update({'born': 1815})\n\n# Querying\nawait mock_db.collection('users').order_by('born').get()\nawait mock_db.collection('users').order_by('born', direction='DESCENDING').get()\nawait mock_db.collection('users').limit(5).get()\nawait mock_db.collection('users').where('born', '==', 1815).get()\nawait mock_db.collection('users').where('born', '!=', 1815).get()\nawait mock_db.collection('users').where('born', '<', 1815).get()\nawait mock_db.collection('users').where('born', '>', 1815).get()\nawait mock_db.collection('users').where('born', '<=', 1815).get()\nawait mock_db.collection('users').where('born', '>=', 1815).get()\n\n# async iterators\nmock_db.collection('users').where('born', 'in', [1815, 1900]).stream()\nmock_db.collection('users').where('born', 'in', [1815, 1900]).stream()\nmock_db.collection('users').where('associates', 'array_contains', 'Charles Babbage').stream()\nmock_db.collection('users').where('associates', 'array_contains_any', ['Charles Babbage', 'Michael Faraday']).stream()\n\n# Transforms\nawait mock_db.collection('users').document('alovelace').update({'likes': firestore.Increment(1)})\nawait mock_db.collection('users').document('alovelace').update({'associates': firestore.ArrayUnion(['Andrew Cross', 'Charles Wheatstone'])})\nawait mock_db.collection('users').document('alovelace').update({firestore.DELETE_FIELD: \"born\"})\nawait mock_db.collection('users').document('alovelace').update({'associates': firestore.ArrayRemove(['Andrew Cross'])})\n\n\n# Transactions\ntransaction = mock_db.transaction()\ntransaction.id\ntransaction.in_progress\nawait transaction.get(mock_db.collection('users').where('born', '==', 1815))\nawait transaction.get(mock_db.collection('users').document('alovelace'))\nawait transaction.get_all([mock_db.collection('users').document('alovelace')])\n\ntransaction.set(mock_db.collection('users').document('alovelace'), {'born': 1815})\ntransaction.update(mock_db.collection('users').document('alovelace'), {'born': 1815})\ntransaction.delete(mock_db.collection('users').document('alovelace'))\nawait transaction.commit()\n```\n\n\n## Running the tests\n* Create and activate a virtualenv with a Python version of at least 3.6\n* Install dependencies with `pip install -r requirements-dev-minimal.txt`\n* Run tests with `python -m unittest discover tests -t /`\n\n## Contributors\n\n* [Matt Dowds](https://github.com/mdowds)\n* [Chris Tippett](https://github.com/christippett)\n* [Anna Melnikov](https://github.com/anna-hope)\n* [Ben Riggleman](https://github.com/briggleman)\n* [Steve Atwell](https://github.com/satwell)\n* [ahti123](https://github.com/ahti123)\n* [Billcountry Mwaniki](https://github.com/Billcountry)\n* [Lucas Moura](https://github.com/lsantosdemoura)\n* [Kamil Romaszko](https://github.com/kromash)\n* [Anna Melnikov](https://github.com/notnami)\n* [Carl Chipperfield](https://github.com/carl-chipperfield)\n* [Aaron Loo](https://github.com/domanchi)\n* [Kristof Krenn](https://github.com/KrennKristof)\n* [Ben Phillips](https://github.com/tavva)\n* [Rene Delgado](https://github.com/RDelg)\n* [klanderson](https://github.com/klanderson)\n* [William Li](https://github.com/wli)\n* [Ugo Marchand](https://github.com/UgoM)\n* [Bryce Thornton](https://github.com/brycethornton)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mdowds/mock-firestore",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mock-firestore-async",
    "package_url": "https://pypi.org/project/mock-firestore-async/",
    "platform": null,
    "project_url": "https://pypi.org/project/mock-firestore-async/",
    "project_urls": {
      "Homepage": "https://github.com/mdowds/mock-firestore"
    },
    "release_url": "https://pypi.org/project/mock-firestore-async/0.11.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "In-memory implementation of Google Cloud Firestore for use in tests",
    "version": "0.11.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16071415,
  "releases": {
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d4c9effe83718efee1cd0c8f51c6abe3d70216e091faf06108e2d9cdce597d3",
          "md5": "bc256cdc86ba99a45120f77bd4ae99ec",
          "sha256": "873dc43b645e08b9750439b999c128b88f9da96d5918d60a270fe9b2bed7cdae"
        },
        "downloads": -1,
        "filename": "mock_firestore_async-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc256cdc86ba99a45120f77bd4ae99ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27575,
        "upload_time": "2022-11-11T11:20:04",
        "upload_time_iso_8601": "2022-11-11T11:20:04.093979Z",
        "url": "https://files.pythonhosted.org/packages/9d/4c/9effe83718efee1cd0c8f51c6abe3d70216e091faf06108e2d9cdce597d3/mock_firestore_async-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56cabec94972e01ddb612391c1de4bd05236460c0313bd69f366f0e2e1371711",
          "md5": "2e1bb7bb26bb8ef18537c87d9a471e3d",
          "sha256": "f3ed692fbaccb3ea832561f3a268890d97af0c307080f1d03e45c25a4f164a14"
        },
        "downloads": -1,
        "filename": "mock_firestore_async-0.11.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e1bb7bb26bb8ef18537c87d9a471e3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27570,
        "upload_time": "2022-12-12T07:40:38",
        "upload_time_iso_8601": "2022-12-12T07:40:38.348446Z",
        "url": "https://files.pythonhosted.org/packages/56/ca/bec94972e01ddb612391c1de4bd05236460c0313bd69f366f0e2e1371711/mock_firestore_async-0.11.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb743071c493576c8ddde0427d34e27e218fcac8fbff5a7784949b8a4b627b26",
          "md5": "b83029b593de3d7ff7a1d60f45e4262d",
          "sha256": "8e9316ef10a998c6c618ba46ce8ff4cff8e80481f9e8cc7342dae034f0b05663"
        },
        "downloads": -1,
        "filename": "mock-firestore-async-0.11.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b83029b593de3d7ff7a1d60f45e4262d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18443,
        "upload_time": "2022-12-12T07:37:29",
        "upload_time_iso_8601": "2022-12-12T07:37:29.990518Z",
        "url": "https://files.pythonhosted.org/packages/bb/74/3071c493576c8ddde0427d34e27e218fcac8fbff5a7784949b8a4b627b26/mock-firestore-async-0.11.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10ae7775b04b3af9c0795ac6582b6912b70a41d47d11cdb8cf7b3c92fea053b3",
          "md5": "792cb77890e4e9c6a634452caf63548f",
          "sha256": "2115c5154ed8351122e78a66f37b8563b557172a923c8ec53fe74c022c669f72"
        },
        "downloads": -1,
        "filename": "mock_firestore_async-0.11.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "792cb77890e4e9c6a634452caf63548f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27614,
        "upload_time": "2022-12-12T07:55:34",
        "upload_time_iso_8601": "2022-12-12T07:55:34.491912Z",
        "url": "https://files.pythonhosted.org/packages/10/ae/7775b04b3af9c0795ac6582b6912b70a41d47d11cdb8cf7b3c92fea053b3/mock_firestore_async-0.11.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ef58f1a69983f15366cecdc0ec1b23516675ffcff3231d9d40fcb09a42c8f84",
          "md5": "cb467498ba3068d18e33ce2260348e3f",
          "sha256": "4c0497dd1c3b1de253fe1e855a195ca52784b4a80bb9a6d23bbe66dfde16dd4a"
        },
        "downloads": -1,
        "filename": "mock_firestore_async-0.11.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb467498ba3068d18e33ce2260348e3f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27620,
        "upload_time": "2022-12-12T08:21:04",
        "upload_time_iso_8601": "2022-12-12T08:21:04.089728Z",
        "url": "https://files.pythonhosted.org/packages/3e/f5/8f1a69983f15366cecdc0ec1b23516675ffcff3231d9d40fcb09a42c8f84/mock_firestore_async-0.11.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ef58f1a69983f15366cecdc0ec1b23516675ffcff3231d9d40fcb09a42c8f84",
        "md5": "cb467498ba3068d18e33ce2260348e3f",
        "sha256": "4c0497dd1c3b1de253fe1e855a195ca52784b4a80bb9a6d23bbe66dfde16dd4a"
      },
      "downloads": -1,
      "filename": "mock_firestore_async-0.11.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb467498ba3068d18e33ce2260348e3f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27620,
      "upload_time": "2022-12-12T08:21:04",
      "upload_time_iso_8601": "2022-12-12T08:21:04.089728Z",
      "url": "https://files.pythonhosted.org/packages/3e/f5/8f1a69983f15366cecdc0ec1b23516675ffcff3231d9d40fcb09a42c8f84/mock_firestore_async-0.11.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}