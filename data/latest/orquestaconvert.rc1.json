{
  "info": {
    "author": "Encore Technologies",
    "author_email": "code@encore.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![Build Status](https://circleci.com/gh/EncoreTechnologies/orquestaconvert.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/EncoreTechnologies/orquestaconvert) [![codecov](https://codecov.io/gh/EncoreTechnologies/orquestaconvert/branch/master/graph/badge.svg)](https://codecov.io/gh/EncoreTechnologies/orquestaconvert) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n# orquestaconvert\n\nConverts Mistral workflows into Orquesta workflows\n\n# Usage\n\n## Getting Started\n\nThe script automatically sets up a `virtualenv` (if it doesn't exist) that contains all of the necessary depedencies to run. \n\nSimply run the command for the first time and everything will get setup for you:\n\n``` shell\ngit clone https://github.com/EncoreTechnologies/orquestaconvert.git\ncd orquestaconvert\n./bin/orquestaconvert.sh --help\n```\n\n## `orquestaconvert.sh` - convert a single workflow and print to stdout\n\nYou must specify one or more workflow YAML files to convert as the last arguments to the script.\n\nThere are also some options you can use:\n\n- `-e <type>` - Type of expressions (YAQL or Jinja) to use when inserting new expressions (such as task transitions in the `when` clause)\n- `--force` - Forces the script to convert and print the workflow even if it does not successfully validate against the Orquesta YAML schema.\n- `--validate` - Runs just the validation portion of the script, very useful to validate workflows you partially converted with `--force` then finished conversion by hand.\n\n### Examples\n\n#### Convert a single workflow\n\nConvert the `nasa_apod_twitter_post.yaml` workflow from Mistral to Orquesta, using Jinja expressions (the default) in task transition conditions.\n\n```shell\n./bin/orquestaconvert.sh ./tests/fixtures/mistral/nasa_apod_twitter_post.yaml\n```\n\n#### Convert a workflow, output YAQL expressions\n\nConvert the workflow, using YAQL expressions for new task transition conditions, and skips Orquesta workflow validation. Note that this may generate a workflow that is *neither* a valid Mistral *nor* a valid Orquesta workflow.\n\n```shell\n./bin/orquestaconvert.sh -e yaql --force ./tests/fixtures/mistral/nasa_apod_twitter_post.yaml\n```\n\n#### Validate an Orquesta workflow\n\nRun Orquesta YAML schema validation on the file. Returns 0 on successful validation, nonzero on unsuccessful validation. Also use the `--verbose` option to explitly print the validation results for the file.\n\n```shell\n./bin/orquestaconvert.sh --validate ./tests/fixtures/orquesta/nasa_apod_twitter_post.yaml\n```\n\n## `orquestaconvert-pack.sh` - convert all Mistral workflows in a pack\n\nThis script scans a pack for all action metadata files and attempts to convert all Mistral workflows to Orquesta and/or validates all Orquesta workflows in a pack using the `orquestaconvert.sh` script. This script passes all unrecognized arguments to `orquestaconvert.sh`, so all actions you can do on one workflow with that script, you can do to the entire pack by using this script.\n\nYou must either run this command from the base directory of a pack or you must specify the directory that contains action metadata files with the `--actions-dir` option.\n\nRecognized options are:\n\n- `--list-workflows <type>` - List all workflows of the specified type (must either be `action-chain` for ActionChain, `mistral-v2` for Mistral, or `orquesta` or `orchestra` for Orquesta workflows)\n- `--actions-dir <dir>` - Specifies the directory to scan and convert\n\n### Examples\n\n#### Convert all workflows in a pack\n\nAttempts to convert all workflows from Mistral to Orquesta, using Jinja expressions in new task transitions (Jinja is the default).\n\n```shell\n./bin/orquestaconvert-pack.sh\n```\n\n#### List Mistral workflows in a pack\n\nLists remaining Mistral workflows.\n\n```shell\n./bin/orquestaconvert-pack.sh --list-workflows mistral-v2\n```\n\n#### Convert all workflows in a pack, outputting YAQL expressions\n\nConverts all Mistral workflows (using YAQL expressions when generating task transition conditions) in `mypack/actions` to Orquesta and skips validation. Note that using this option may create workflows that are *neither* valid as Mistral *nor* Orquesta workflows.\n\n```shell\n./bin/orquestaconvert-pack.sh --expressions yaql --force --action-dir mypack/actions\n```\n\n#### Validate all Orquesta workflows in a pack\n\nExplicitly rints the validation results for all Orquesta workflows.\n\n```shell\n./bin/orquestaconvert-pack.sh --validate --verbose\n```\n\n# Features\n\n* Converts `direct` Mistral Workflows into Orquesta Workflows (general structure)\n* Handles `input`, `output`, `tasks`\n* For each task, `action`, `input`, `publish`, `on-success`, `on-error`, and `on-complete` are all converted\n* Converts _simple_ Jinja and YAQL expressions\n* Converts `task()`, `st2kv`, `_.xxx` / `$.xxx`, etc in Jinja and YAQL expressions\n* Converts `with-items` and `concurrency` attributes\n* Converts most `retry` attributes, including `continue-on` and _simple_ `break-on` expressions\n\n# Limitations\n\n* Does not convert `{% %}` Jinja expressions\n* Does not convert complex Jinja / YAQL expressions\n* Does not convert `reverse` type workflows\n* Does not convert workbooks (multiple workflows in the same file\n* Does not convert `task('xxx')` references to non-local tasks, the current task is always assumed.\n* Does not convert workflows with an `output-on-error` stanza\n* Does not convert workflows if the tasks contain one or more of the following attributes\n    * `keep-result`\n    * `pause-before`\n    * `safe-rerun`\n    * `target`\n    * `timeout`\n    * `wait-after`\n    * `wait-before`\n    * `workflow`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://encore.tech/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "orquestaconvert",
    "package_url": "https://pypi.org/project/orquestaconvert/",
    "platform": "",
    "project_url": "https://pypi.org/project/orquestaconvert/",
    "project_urls": {
      "Homepage": "https://encore.tech/"
    },
    "release_url": "https://pypi.org/project/orquestaconvert/0.1/",
    "requires_dist": [
      "ruamel.yaml (>=0.15.0)",
      "yamlloader (>=0.5.0)",
      "orquesta"
    ],
    "requires_python": "",
    "summary": "Tool to convert OpenStack Mistral workflows to StackStorm Orquesta workflows",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6534094,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2920896d51000de77d11a6509f9a3cf72964e70abb84f7f1e4d6c3052dd52be6",
          "md5": "46a9970a2d5077598854f6a8c2b960bf",
          "sha256": "b005be7424c2870971f9930fcfc0df1239fd17db914dfafda70ad1f6c1b622f8"
        },
        "downloads": -1,
        "filename": "orquestaconvert-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46a9970a2d5077598854f6a8c2b960bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40111,
        "upload_time": "2020-01-28T08:16:57",
        "upload_time_iso_8601": "2020-01-28T08:16:57.716216Z",
        "url": "https://files.pythonhosted.org/packages/29/20/896d51000de77d11a6509f9a3cf72964e70abb84f7f1e4d6c3052dd52be6/orquestaconvert-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "206f0da278e6e894f5ed53a87464943eda05789bfbf2bc81a9fba07e6cb7b6e9",
          "md5": "b733b71906e478db26395bd3f969eb0b",
          "sha256": "56e65b2149cfde1259eb84768418c70750b31f75f75da9d83abd72b250c9bc75"
        },
        "downloads": -1,
        "filename": "orquestaconvert-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b733b71906e478db26395bd3f969eb0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27594,
        "upload_time": "2020-01-28T08:17:00",
        "upload_time_iso_8601": "2020-01-28T08:17:00.350854Z",
        "url": "https://files.pythonhosted.org/packages/20/6f/0da278e6e894f5ed53a87464943eda05789bfbf2bc81a9fba07e6cb7b6e9/orquestaconvert-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2920896d51000de77d11a6509f9a3cf72964e70abb84f7f1e4d6c3052dd52be6",
        "md5": "46a9970a2d5077598854f6a8c2b960bf",
        "sha256": "b005be7424c2870971f9930fcfc0df1239fd17db914dfafda70ad1f6c1b622f8"
      },
      "downloads": -1,
      "filename": "orquestaconvert-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "46a9970a2d5077598854f6a8c2b960bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40111,
      "upload_time": "2020-01-28T08:16:57",
      "upload_time_iso_8601": "2020-01-28T08:16:57.716216Z",
      "url": "https://files.pythonhosted.org/packages/29/20/896d51000de77d11a6509f9a3cf72964e70abb84f7f1e4d6c3052dd52be6/orquestaconvert-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "206f0da278e6e894f5ed53a87464943eda05789bfbf2bc81a9fba07e6cb7b6e9",
        "md5": "b733b71906e478db26395bd3f969eb0b",
        "sha256": "56e65b2149cfde1259eb84768418c70750b31f75f75da9d83abd72b250c9bc75"
      },
      "downloads": -1,
      "filename": "orquestaconvert-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b733b71906e478db26395bd3f969eb0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27594,
      "upload_time": "2020-01-28T08:17:00",
      "upload_time_iso_8601": "2020-01-28T08:17:00.350854Z",
      "url": "https://files.pythonhosted.org/packages/20/6f/0da278e6e894f5ed53a87464943eda05789bfbf2bc81a9fba07e6cb7b6e9/orquestaconvert-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}