{
  "info": {
    "author": "Mathieu Pasquet, Jean-Philippe Camguilhem",
    "author_email": "kiorky@cryptelium.net, jean-philippe.camguilhem@makina-corpus.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==========================\r\nIntroduction\r\n==========================\r\n\r\n.. contents::\r\n\r\n\r\nCGWB is a web interface to ``paster``, its goal is to generate a webinterface to selection options aggregated from a set of templates.\r\n\r\nImagine that you have 2 templates, the one that can deploy an application, and the other which generates the application in itself.\r\n\r\nDeclaring the two templates as a ``cgwb set`` will make a webinterface for those 2 templates. Answering correctly to the questions will produce a tarball that you ll be able download and unpack to have your base installation setup.\r\n\r\nTo make the templates available, you must define the set using ZCML.\r\n\r\n\r\nAs this server was developped as a quick and efficient interface to paster, *it is not safe to open it to wide internet.*\r\nFor security reason, just launch/use when you need it.\r\n\r\nNext versions will include some sessions/roles and improved security, it may be possible at this stage to leave it open.\r\n\r\n\r\nSee in action `here <http://cgwb-makinacorpus.rhcloud.com/>`_\r\n\r\n\r\n\r\nCredits\r\n=========================================\r\n\r\n\r\nCompanies\r\n----------------\r\n|makinacom|_\r\n\r\n* `Planet Makina Corpus <http://www.makina-corpus.org>`_\r\n* `Contact us <mailto:python@makina-corpus.org>`_\r\n\r\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\r\n.. _makinacom:  http://www.makina-corpus.com\r\n\r\nAuthors\r\n---------------\r\n\r\n    - kiorky <kiorky@cryptelium.net>\r\n    - Jean-Philippe Camguilhem <jpc@makina-corpus.com>\r\n\r\n\r\n\r\nInstallation\r\n==============\r\n\r\nInstalling cgwb in a minitage\r\n-----------------------------------\r\nYou are not obliged to run with `minitage`_ even if it is the recommended mode for running at least the plones template.\r\n\r\nAssuming that your minitage lives in ~/minitage, issue the following::\r\n\r\n    export MT=~/minitage\r\n\r\nInstall or udpate minitage in your dedicated virtualenv if any\r\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\nJust do that (you must refer to `minitage installation`_ for prerequisites)\r\n\r\nInstall virtualenv\r\n::\r\n\r\n    virtualenv --no-site-packages --distribute $MT\r\n\r\nUpdate minitage packages\r\n::\r\n\r\n    source $MT/bin/activate\r\n    easy_install -U minitage.core\r\n    easy_install -U minitage.paste\r\n    minimerge -s\r\n\r\n\r\nInstall cgwb\r\n++++++++++++++++++++++\r\nDownload & install via the minibuild\r\n::\r\n\r\n    source $MT/bin/activate\r\n    git clone http://github.com/collective/collective.generic.webbuilder-minilay.git $MT/minilays/cgwb\r\n    minimerge -v cgwb\r\n\r\n\r\nCgwb lives in ``$MT/bfg/cgwb``.\r\n\r\nGenerating & deploying your project using minitage\r\n-----------------------------------------------------------\r\nLaunching the cgwb server\r\n++++++++++++++++++++++++++++++++\r\nLaunch via ``bin/cgwb``.\r\nThis binary includes some options to let you override the default port (--port) and listenning address (--host)\r\nTo see all the available options, just use::\r\n\r\n    bin/cgwb --help\r\n\r\nIf you use minitage, mandatory to use the minitage.instances.env profile::\r\n\r\n    $MT/bin/easy_install -U minitage.paste\r\n    $MT/bin/paster create -t minitage.instances.env cgwb\r\n\r\nMINITAGE .ENV\r\n++++++++++++++++++++\r\nEach time you use cgwb, you use the .ENV::\r\n\r\n    source $MT/bfg/cgwb/sys/share/minitage/minitage.env\r\n\r\nUse it\r\n++++++++++++++\r\nLaunch it::\r\n\r\n    cd $INS\r\n    ./bin/cgwb --port=6253\r\n\r\n\r\n- At the moment, cgwb do not have some session mecanism, so the only way to replay a generation is to use the selenium firefox plugin.\r\n- If you want to store your choices to redo an updated tarball later, just install the SeleniumIDE firefox plugin and use it to record your session.\r\n- Maybe, activate selenium and\r\n\r\n    - Go to the `cgwb`_\r\n    - Choose `Generic Portal Plone3`.\r\n\r\nFilling the settings, some notes\r\n+++++++++++++++++++++++++++++++++++++++++++\r\n- project name is mandatory and must be in the form in `project` or `subproject`.\r\n- You can choose in the `Plone Products to auto checkout in development mode` the products from the community from which we should check out & use in development mode\r\n\r\nTHE IMPORTANT PART AROUND INITIATING A PROJECT\r\n+++++++++++++++++++++++++++++++++++++++++++++++++\r\n- It would be good unless you have some minitage experience to version the code prior to build, because of minitage update mecanism.\r\n- Before version/import the code in your SCM you must elude the following points:\r\n\r\n    * By default, the generated tarball contains the buildout layout and all the eggs in src, and the buildout use them as develop eggs and NOT WITH MR.DEVELOPER.\r\n      Thus for running the buildout in standalone mode\r\n    * You may decide not to include them as-is but to separate the code and version the code elsewhere.\r\n    * I would advice you to checkout the packages with mr.developer.\r\n\r\nAn example of using svn which generic/pyramid\r\n+++++++++++++++++++++++++++++++++++++++++++++\r\nWhat i would do from a generated tarball for using subversion as my SCM could be to produce this layout::\r\n\r\n    import\r\n    |-- import/eggs\r\n    |   |-- import/eggs/myproject.core\r\n    |   |   `-- import/eggs/myproject.core/trunk\r\n    `-- import/buildout\r\n\r\n\r\n- Exporting base variables::\r\n\r\n    export PROJECT=\"myproject\" # your project name as filled in the web interfacE\r\n    export TARBALL=\"$(ls -1t ~/cgwb/${PROJECT}-*.tar.gz|head -n1)\" # produced tarball\r\n    export IMPORT_URL=\"https://subversion.xxx.net/scrumpy/${PROJECT}/\" # base svn place to import\r\n\r\n- Create a temporary workspace::\r\n\r\n    mkdir -p  $PROJECT/tarball\r\n    cd $PROJECT\r\n    tar xzvf  $TARBALL -C tarball/\r\n\r\n- Create the base layout to be imported::\r\n\r\n    mkdir -p import/buildout import/eggs\r\n\r\n- Move the generated plone extensions eggs to a separate place to be imported::\r\n\r\n    for i in tarball/src/${PROJECT}*;do if [[ -d $i ]] && [[ $(basename $i) != \"themes\" ]];then j=$(basename $i);dest=import/eggs/$j/trunk; mkdir -pv  $(dirname $dest); mv -v $i $dest; fi; done\r\n\r\n- Move the buildout structure in the import layout::\r\n\r\n    cp -rf tarball/* import/buildout\r\n\r\n- Update buildout to use mr.developer instead of basic develop::\r\n\r\n    * move off the develop declaration::\r\n\r\n        sed -re \"s:(src/)?$PROJECT\\.((skin)|(tma)|(core)|(testing))::g\" -i import//buildout/etc/project/$PROJECT.cfg\r\n\r\n    * add to mr.developer sources::\r\n\r\n        sed -re \"/\\[sources\\]/{\r\n        a $PROJECT.core = svn $IMPORT_URL/eggs/$PROJECT.core/trunk\r\n        }\" -i import/buildout/etc/project/sources.cfg\r\n\r\n    * add to auto checkout packages::\r\n\r\n        sed -re \"/auto-checkout \\+=/{\r\n        a \\    $PROJECT.core\r\n        }\"  -i import/buildout/etc/project/sources.cfg\r\n        sed -re \"/eggs \\+=.*buildout:eggs/{\r\n        a \\    $PROJECT.core\r\n        }\"  -i import/buildout/etc/project/$PROJECT.cfg\r\n        sed -re \"/zcml \\+=/{\r\n        a \\    $PROJECT.core\r\n        }\"  -i import/buildout/etc/project/$PROJECT.cfg\r\n\r\n* be sure to use the right svn url to checkout::\r\n\r\n    sed -re \"s|src_uri.*|src_uri=$IMPORT_URL/buildout/|g\" -i import/buildout/minilays/$PROJECT/*\r\n\r\n* Be sure to use svn\r\n\r\n    sed -re \"s|src_type.*|src_type=svn|g\" -i import/buildout/minilays/$PROJECT/*\r\n\r\n* Import::\r\n\r\n   svn import import/ $IMPORT_URL -m \"initial import\" \r\n\r\nAn example of using svn which generic/plone\r\n+++++++++++++++++++++++++++++++++++++++++++++\r\nWhat i would do from a generated tarball for using subversion as my SCM could be to produce this layout::\r\n\r\n    import\r\n    |-- import/eggs\r\n    |   |-- import/eggs/myproject.policy\r\n    |   |   `-- import/eggs/myproject.policy/trunk\r\n    |   |-- import/eggs/myproject.skin\r\n    |   |   `-- import/eggs/myproject.skin/trunk\r\n    |   |-- import/eggs/myproject.testing\r\n    |   |   `-- import/eggs/myproject.testing/trunk\r\n    |   `-- import/eggs/myproject.tma\r\n    |       `-- import/eggs/myproject.tma/trunk\r\n    `-- import/minitage\r\n        |-- import/minitage/buildouts\r\n        |   `-- import/minitage/buildouts/zope\r\n        |       `-- import/minitage/buildouts/zope/myproject\r\n\r\n\r\n- Exporting base variables::\r\n\r\n    export PROJECT=\"myproject\" # your project name as filled in the web interfacE\r\n    export TARBALL=\"$(ls -1t ~/cgwb/${PROJECT}-*.tar.gz|head -n1)\" # produced tarball\r\n    export IMPORT_URL=\"https://subversion.xxx.net/scrumpy/${PROJECT}/ # base svn place to import\r\n\r\n- Create a temporary workspace::\r\n\r\n    mkdir -p  $PROJECT/tarball\r\n    cd $PROJECT\r\n    tar xzvf  $TARBALL -C tarball/\r\n\r\n- Create the base layout to be imported::\r\n\r\n    mkdir -p import/buildout import/eggs\r\n\r\n- Move the generated plone extensions eggs to a separate place to be imported::\r\n\r\n    for i in tarball/src/${PROJECT}*;do if [[ -d $i ]] && [[ $(basename $i) != \"themes\" ]];then j=$(basename $i);dest=import/eggs/$j/trunk; mkdir -pv  $(dirname $dest); mv -v $i $dest; fi; done\r\n\r\n- Move the buildout structure in the import layout::\r\n\r\n    cp -rf tarball/* import/buildout\r\n\r\n- Update buildout to use mr.developer instead of basic develop::\r\n\r\n    * move off the develop declaration::\r\n\r\n        sed -re \"s:(src/)?$PROJECT\\.((skin)|(tma)|(policy)|(testing))::g\" -i import//buildout/etc/project/$PROJECT.cfg\r\n\r\n    * add to mr.developer sources::\r\n\r\n        sed -re \"/\\[sources\\]/{\r\n        a $PROJECT.policy = svn $IMPORT_URL/eggs/$PROJECT.policy/trunk\r\n        a $PROJECT.tma = svn $IMPORT_URL/eggs/$PROJECT.tma/trunk\r\n        a $PROJECT.skin = svn $IMPORT_URL/eggs/$PROJECT.skin/trunk\r\n        a $PROJECT.testing = svn $IMPORT_URL/eggs/$PROJECT.testing/trunk\r\n        }\" -i import/buildout/etc/project/sources.cfg\r\n\r\n    * add to auto checkout packages::\r\n\r\n        sed -re \"/auto-checkout \\+=/{\r\n        a \\    $PROJECT.policy\r\n        a \\    $PROJECT.tma\r\n        a \\    $PROJECT.skin\r\n        a \\    $PROJECT.testing\r\n        }\"  -i import/buildout/etc/project/sources.cfg\r\n        sed -re \"/eggs \\+=.*buildout:eggs/{\r\n        a \\    $PROJECT.policy\r\n        a \\    $PROJECT.tma\r\n        a \\    $PROJECT.skin\r\n        a \\    $PROJECT.testing\r\n        }\"  -i import/buildout/etc/project/$PROJECT.cfg\r\n        sed -re \"/zcml \\+=/{\r\n        a \\    $PROJECT.policy\r\n        a \\    $PROJECT.tma\r\n        a \\    $PROJECT.skin\r\n        }\"  -i import/buildout/etc/project/$PROJECT.cfg\r\n\r\n* be sure to use the right svn url to checkout::\r\n\r\n    sed -re \"s|src_uri.*|src_uri=$IMPORT_URL/buildout/|g\" -i import/buildout/minilays/$PROJECT/*\r\n\r\n* Be sure to use svn\r\n\r\n    sed -re \"s|src_type.*|src_type=svn|g\" -i import/buildout/minilays/$PROJECT/*\r\n\r\n* Import::\r\n\r\n   svn import import/ $IMPORT_URL -m \"initial import\"\r\n\r\nAn example of using git which generic\r\n++++++++++++++++++++++++++++++++++++++++\r\nWhat i would do from a generated tarball for using subversion as my SCM could be to produce this layout::\r\n\r\n    import\r\n        |-- myproject.policy\r\n        |-- myproject.skin\r\n        |-- myproject.testing\r\n        `-- myproject.tma\r\n        `-- myproject.buildout\r\n        `-- myproject.minilay\r\n\r\n\r\n- Exporting base variables::\r\n\r\n    export PROJECT=\"myproject\"                                     # your project name as filled in the web interfacE\r\n    export TARBALL=\"$(ls -1t ~/cgwb/${PROJECT}-*.tar.gz|head -n1)\" # produced tarball\r\n    export IMPORT_URL=\"ssh://git.makina-corpus.net/var/git\"              # base svn place to import\r\n\r\n- Create a temporary workspace & the base layout to be imported::\r\n\r\n    mkdir -p  $PROJECT/\r\n    cd $PROJECT\r\n    mkdir tarball import\r\n    tar xzvf  $TARBALL -C tarball/\r\n\r\n- Move the generated plone extensions eggs to a separate place to be imported::\r\n\r\n    for i in tarball/src/*;do if [[ -d $i ]] && [[ $i != \"tarball/src/themes\" ]];then j=$(basename $i);dest=import/$j;mkdir -pv  $(dirname $dest); mv -v $i $dest; fi; done\r\n\r\n- Move the buildout structure in the import layout::\r\n\r\n    cp -rf tarball/minilays/$PROJECT   import/$PROJECT.minilay\r\n    rm -rf tarball/minilays\r\n    cp -rf tarball/ import/$PROJECT.buildout\r\n\r\n- Update buildout to use mr.developer instead of basic develop::\r\n\r\n    * move off the develop declaration::\r\n\r\n        sed -re \"s:(src/)?$PROJECT\\.((skin)|(tma)|(policy)|(testing))::g\" -i import/$PROJECT.buildout/etc/project/$PROJECT.cfg\r\n\r\n    * add to mr.developer sources::\r\n\r\n        sed -re \"/\\[sources\\]/{\r\n        a $PROJECT.policy =  git $IMPORT_URL/$PROJECT.policy\r\n        a $PROJECT.tma =     git $IMPORT_URL/$PROJECT.tma\r\n        a $PROJECT.skin =    git $IMPORT_URL/$PROJECT.skin\r\n        a $PROJECT.testing = git $IMPORT_URL/$PROJECT.testing\r\n        }\" -i import/$PROJECT.buildout/etc/project/sources.cfg\r\n\r\n    * add to auto checkout packages::\r\n\r\n        sed -re \"/auto-checkout \\+=/{\r\n        a \\    $PROJECT.policy\r\n        a \\    $PROJECT.tma\r\n        a \\    $PROJECT.skin\r\n        a \\    $PROJECT.testing\r\n        }\"  -i import/$PROJECT.buildout/etc/project/sources.cfg\r\n        sed -re \"/eggs \\+=.*buildout:eggs/{\r\n        a \\    $PROJECT.policy\r\n        a \\    $PROJECT.tma\r\n        a \\    $PROJECT.skin\r\n        a \\    $PROJECT.testing\r\n        }\"  -i import/$PROJECT.buildout/etc/project/$PROJECT.cfg\r\n        sed -re \"/zcml \\+=/{\r\n        a \\    $PROJECT.policy\r\n        a \\    $PROJECT.tma\r\n        a \\    $PROJECT.skin\r\n        }\"  -i import/$PROJECT.buildout/etc/project/$PROJECT.cfg\r\n\r\n* be sure to use the right git url to checkout::\r\n\r\n    sed -re \"s|src_uri.*|src_uri=$IMPORT_URL/$PROJECT.buildout|g\" -i import/*.minilay/*\r\n\r\n* Be sure to use git\r\n\r\n    sed -re \"s|src_type.*|src_type=git|g\" -i import/*.minilay/*\r\n\r\n* Import::\r\n\r\n   pushd import;for i in *;do echo \"Importing $i\";pushd $i;git init;git add *;git commit -am \"initial revision\";git remote add origin \"$IMPORT_URL/$i\";git push --all origin;popd;done;popd\r\n\r\nDeploy the project\r\n++++++++++++++++++++++\r\n* install the minilay::\r\n\r\n    export MT=~/minitage\r\n    svn co $IMPORT_URL/buildout/minilays/$PROJECT/ $MT/minilays/$PROJECT\r\n    # or\r\n    git clone  $IMPORT_URL/$PROJECT.minilay $MT/minilays/$PROJECT\r\n\r\n* Install it::\r\n\r\n    minimerge -v $PROJECT\r\n\r\n.. _`minitage installation`: http://minitage.org/installation.html\r\n.. _`cgwb`: http://localhost:6253\r\n.. _`minitage`: http://www.minitage.org\r\n\r\n\r\n\r\n\r\nTests & docs\r\n==============\r\nDefining sets via ZCML\r\n---------------------------------------------------\r\n\r\nA set is a collection of templates, it is also known as a 'PasterConfiguration'.\r\n::\r\n\r\n    -------------------------------------------\r\n    | configuration                           |\r\n    |                                         |\r\n    |       -----------------------------------\r\n    |       |  templates                      |\r\n    |       -----------------------------------\r\n    |       |       |  group                  |\r\n    |       |       [--------------------------\r\n    |       |       |      |  options         |\r\n    |       |       |      --------------------\r\n    |       |       |      |                  |\r\n    -------------------------------------------\r\n\r\n\r\nWe will redefine the 'well known' plone template as an example.\r\n\r\nFirst of all, we need to define a template\r\n::\r\n\r\n    >>> from zope.configuration import xmlconfig\r\n    >>> from zope.configuration.config import ConfigurationMachine\r\n    >>> from collective.generic.webbuilder.zcml import PasterConfiguration, Template, Group, ExcludeOption, Option\r\n    >>> from collective.generic.webbuilder.models import root\r\n    >>> from minitage.paste.projects import plone3\r\n    >>> import collective.generic.webbuilder\r\n    >>> context = ConfigurationMachine()\r\n    >>> xmlconfig.registerCommonDirectives(context)\r\n    >>> xmlconfig.include(context, 'meta.zcml', collective.generic.webbuilder)\r\n    >>> context = xmlconfig.string(\"\"\"\r\n    ... <configure xmlns=\"http://webbuilder.org/webbuilder\">\r\n    ...  <genericpaster name=\"Test Generic Portal Plone\">\r\n    ...    <!--<plugin name=\"dummy_plugin\" order=\"1\"/>-->\r\n    ...    <plugin name=\"egg_plugin\" order=\"2\"/>\r\n    ...    <template name=\"collective.generic.policy\" output=\"src\" order=\"200\">\r\n    ...       <excludeoptions prefix=\"project_.*\" />\r\n    ...       <excludeoption  name=\"python\" />\r\n    ...    </template>\r\n    ...    <template name=\"minitage.plone3\" order=\"1\">\r\n    ...       <group name=\"Minitage\" order=\"05\">\r\n    ...         <option name=\"install_method\" alias=\"ai\"/>\r\n    ...         <options prefix=\".*with.*\" default=\"true\" type=\"boolean\"/>\r\n    ...         <excludeoptions prefix=\"project_.*\" />\r\n    ...         <excludeoption  name=\"python\" />\r\n    ...       </group>\r\n    ...    </template>\r\n    ...  </genericpaster>\r\n    ... </configure>\r\n    ... \"\"\", context = context)\r\n\r\n\r\nIt will register/update the ``collective.generic.webbuilder.root.configurations`` module variable\r\n\r\nThe *genericpaster* directive\r\n++++++++++++++++++++++++++++++\r\n- Must be used at top level.\r\n- Name of a configuration of templates.\r\n\r\n::\r\n\r\n    <genericpaster name=\"Name of the configuration\"/>\r\n\r\nIt contains a list of underlying configurations\r\n::\r\n\r\n    >>> 'Test Generic Portal Plone' in root.configurations\r\n    True\r\n\r\nThe configurations objects contain a list of templates and plugins\r\n::\r\n\r\n    >>> templates = root.configurations['Test Generic Portal Plone'].templates\r\n    >>> sorted(templates.keys())\r\n    ['collective.generic.policy', 'minitage.plone3']\r\n\r\n\r\nThe *template* directive\r\n+++++++++++++++++++++++++\r\n- Must be used at genericpaster level.\r\n- It describe a relative \"paster template\". The name which you could get with ``paster create -t --list-templates``.\r\n- It has also an order which is used to order templates in the webinterface for lower to upper.\r\n\r\n::\r\n\r\n     <template name=\"Template Name\" order=\"int\">\r\n\r\n::\r\n\r\n    >>> t = templates['minitage.plone3']\r\n    >>> t.order\r\n    1\r\n    >>> t.name\r\n    'minitage.plone3'\r\n\r\n\r\nA template can also say that it must be generated under a 'subdirectory' with the ``output`` attribute.\r\n::\r\n\r\n    >>> templates['collective.generic.policy'].output\r\n    'src'\r\n\r\n\r\nThe *group* directive\r\n++++++++++++++++++++++\r\n- A template has a list of groups of options.\r\n- Groups are represented by a block of questions surrounded by the group name in the webinterface.\r\n\r\n::\r\n\r\n    <group name=\"GroupName\" order=\"int\"/>\r\n\r\nThose groups group 'paster questions'.\r\n\r\n::\r\n\r\n    >>> groups = t.groups\r\n    >>> groups.keys()\r\n    ['default', 'Minitage']\r\n    >>> g = t.groups['Minitage']\r\n    >>> t.groups['Minitage'].order\r\n    5\r\n    >>> t.groups['Minitage'].name\r\n    'Minitage'\r\n\r\nThe *options* directive\r\n++++++++++++++++++++++++\r\n- Must be used at group level.\r\n- Groups group options, Which can be grabbed by a regular expression with this directive.\r\n\r\n::\r\n\r\n    <options prefix=\"Regular expression\"  type=\"boolean|\" default=\"value\"/>\r\n\r\n- *type* can be omitted and defaults to None (text).\r\n- *default* can be omitted and no default value will be assigned (or the paster default value).\r\n\r\n::\r\n\r\n    >>> opts = g.options['.*with.*']\r\n    >>> opts.type, opts.default\r\n    ('boolean', 'true')\r\n\r\nAs you can see, there is a default group where go non-matched options which are not excluded via the ``excludeoptions`` directive.\r\n\r\n\r\nThe *option* directive\r\n++++++++++++++++++++++++\r\n- Must be used at group level.\r\n- Groups group also 'single options', Which can be grabbed by their name.\r\n- Single options and can have an alias. It is useful  if we have the same 'option name' in 2 templates of the configuration and we don't want that they share the same value (default behaviour). To be clear, we have the option 'project', in template 'a' and 'b', by default, if we choose 'foo' for 'project', the value will be 'foo' in template 'a' and 'b', and with an alias, we can choose the value for 'a' *_and_* for 'b'.\r\n\r\n::\r\n\r\n    <options name=\"name\" alias=\"alias name\"  type=\"boolean|\" default=\"value\"/>\r\n\r\n- *alias* can be omitted.\r\n- *type* can be omitted and defaults to None (text).\r\n- *default* can be omitted and no default value will be assigned (or the paster default value).\r\n\r\n::\r\n\r\n    >>> opt = g.single_options['install_method']\r\n    >>> opt.type, opt.alias, opt.default\r\n    (None, 'ai', None)\r\n\r\n\r\nThe *excludeoptions* & *excludeoption* directives\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++\r\n- Must be used at group or template level (in any group of the template).\r\n\r\n::\r\n\r\n    <excludeoptions prefix=\"regular expression\"/>\r\n\r\n- exclude options from the interface\r\n- *prefix*: regular expression for the options to exclude.\r\n\r\n\r\n::\r\n\r\n    <excludeoption name=\"option name\"/>\r\n\r\n- exclude an option from the interface\r\n- *name*: name for the options to exclude.\r\n\r\n::\r\n\r\n    >>> [[getattr(templates[template].groups['default'], attr).keys() for attr in 'exclude_options', 'excludes_options'] for template in 'minitage.plone3', 'collective.generic.policy']\r\n    [[['python'], ['project_.*']], [['python'], ['project_.*']]]\r\n\r\n\r\nThe *plugin* directive\r\n++++++++++++++++++++++++\r\n- Must be used at template level.\r\n- Declare which plugin must run after the templates collection generation.\r\n- This is useful for example, to rearrange things which are generated.\r\n\r\nTo run a plugin which is declared  under \"plugin name\".\r\n::\r\n\r\n    <plugin name=\"plugin name\" order=\"int\"/>\r\n\r\n- *name*: name of the adapter\r\n- *order*: control order to run if there are more than one plugin\r\n\r\nA plugin, is a simple adapter which takes a IPasterAssembly and provides IPostGenerationPlugin\r\n::\r\n\r\n    <adapter\r\n      name=\"plugin name\"\r\n      provides=\".interfaces.IPostGenerationPlugin\"\r\n      factory=\".plugins.MyPluginFactory\"\r\n      for=\".interfaces.IPasterAssembly\"\r\n    />\r\n\r\n::\r\n\r\n    >>> plugins = root.configurations['Test Generic Portal Plone'].plugins\r\n    >>> plugins\r\n    [('egg_plugin', 2)]\r\n\r\n\r\n\r\nThe paster dance\r\n--------------------------\r\n\r\nHeart of cgwb is pythonpaste, take some of paster templates, gather them in an ihm for user inputs and answears for generating a final composition of those templates, with or without been modificated by surrounded plugins.\r\n::\r\n\r\n    User choose a configuration\r\n        --------->\r\n            read variables from templates which are in the configuration and give the appropriate choice to the user\r\n        ------------->\r\n                User inputs and submit it\r\n        -------------------->\r\n                    We generate a tarball of the assembled templates according to the answers\r\n\r\n* An option is asked only once, only you make aliases for each of the options which have the same name among templates.\r\n* As a question is asked only once, if its type is not default, you must define it in the configuration of the template which has the less order number, because there will be there the question will be asked.\r\n\r\n\r\nLoading a zcml representation of a configuration\r\n---------------------------------------------------\r\n\r\nTesting the zcml to python represetation\r\n+++++++++++++++++++++++++++++++++++++++++++++\r\n\r\nLoad our test package where we have three templates\r\n::\r\n\r\n    >>> import collective.generic.webbuilder.tests\r\n    >>> testegg = os.path.join( collective.generic.webbuilder.tests.__path__[0], 'egg', 'src')\r\n    >>> pkg_resources.working_set.add_entry(testegg)\r\n    >>> env = pkg_resources.Environment()\r\n    >>> egg = env['cgwb.tp'][0]\r\n\r\n\r\nWe have 3 templates in there waiting to be assembled\r\n::\r\n\r\n    >>> pprint(egg.get_entry_map())\r\n    {'paste.paster_create_template': {'cgwb.testpackage1': EntryPoint.parse('cgwb.testpackage1 = tp.package:Package'),\r\n                                      'cgwb.testpackage2': EntryPoint.parse('cgwb.testpackage2 = tp1.package:Package'),\r\n                                      'cgwb.testpackage3': EntryPoint.parse('cgwb.testpackage3 = tp2.package:Package')}}\r\n\r\n\r\nThe configuration\r\n+++++++++++++++++++\r\nIt is more described in the zcml part of the documentation, but it's a zcml representation of which variables from the pastertemplates we want to extract and how we want to present them to users.\r\n\r\n\r\nA sample zcml needed to assemble the packages we declared before is as follow:\r\n::\r\n\r\n    >>> paster_zcml = \"\"\"\r\n    ... <configure xmlns=\"http://namespaces.repoze.org/bfg\" xmlns:meta=\"http://namespaces.zope.org/meta\">\r\n    ...   <include package=\"collective.generic.webbuilder\" file=\"meta.zcml\"/>\r\n    ...   <configure xmlns=\"http://webbuilder.org/webbuilder\">\r\n    ...     <genericpaster name=\"test Assembler\">\r\n    ...         <template name=\"cgwb.testpackage1\" output=\"1\" order=\"1000\">\r\n    ...           <group name=\"Minitage\" order=\"05\">\r\n    ...             <option name=\"tp1option\" type=\"boolean\"/>\r\n    ...             <option name=\"tp1option3\" default=\"y\"/>\r\n    ...           </group>\r\n    ...         </template>\r\n    ...         <template name=\"cgwb.testpackage2\" output=\"2\" order=\"200\">\r\n    ...           <group name=\"Authors\" order=\"20\">\r\n    ...             <options prefix=\"^author.*\"/>\r\n    ...           </group>\r\n    ...           <excludeoptions prefix=\".*\"/>\r\n    ...         </template>\r\n    ...         <template name=\"cgwb.testpackage3\" output=\"3\" order=\"500\">\r\n    ...           <group name=\"Plone Settings\" order=\"8\">\r\n    ...             <option name=\"tp2opton2\" />\r\n    ...             <option name=\"author_email\" />\r\n    ...           </group>\r\n    ...           <group name=\"Authors\" order=\"20\">\r\n    ...             <options prefix=\"^author.*\"/>\r\n    ...           </group>\r\n    ...           <group name=\"Package tuning\" order=\"1\">\r\n    ...             <option name=\"project_name\" type=\"hidden\" default=\"tma\" alias=\"tmapn\"/>\r\n    ...           </group>\r\n    ...         </template>\r\n    ...     </genericpaster>\r\n    ...   </configure>\r\n    ... </configure>\r\n    ... \"\"\"\r\n    >>> noecho = xmlconfig.string(paster_zcml)\r\n    >>> root.configurations['test Assembler']\r\n    <collective.generic.webbuilder.zcml.PasterConfiguration object at ...>\r\n\r\n\r\nPasterAssembly object\r\n++++++++++++++++++++++++++++\r\nhave some \"log variables\" and the configuration name to search for in the \"bfgroot\".configurations dictionnary.\r\n\r\n\r\n    - ``template_data``: list of mappings in the form::\r\n\r\n        [\r\n         {\r\n          'self': template 'zcml' object,\r\n          'name': paster template name,\r\n          'added_options': option added by this template,\r\n          'not_explicit_options': option added by this template which were not explicitly matched,\r\n          'display' : display a template or not\r\n          'groups':\r\n             {\r\n                groupname: \r\n                    {\r\n                        'name': groupname,\r\n                        'group': zcml group object:\r\n                        'options': [(paster variablen, type, optionn name, alias|None, zcml optionn|None )]\r\n                    }\r\n\r\n             },\r\n          'aliases': [ (varName, aliasName),]\r\n\r\n         }\r\n        ]\r\n\r\n\r\n    - ``added_options``: All options added for all templates\r\n\r\n\r\nGet an assembly for the wanted configuration\r\n::\r\n\r\n    >>> ta = gpaster.PasterAssembly('test Assembler')\r\n    >>> pprint(ta.__dict__.items())\r\n    [('templates_data', []),\r\n     ('configuration',\r\n      <collective.generic.webbuilder.zcml.PasterConfiguration object at ...>),\r\n     ('added_options', []),\r\n     ('configuration_name', 'test Assembler')]\r\n\r\nThe PasterAssemblyReader object\r\n+++++++++++++++++++++++++++++++++\r\nThis adapter takes as input a IPasterAssembly object and implements the IPasterAssemblyReader interface.\r\n\r\nWe have configurations stored into zcml representation, now we need to gather and map the configuration informations with the content of each \"paster template\" into a python friendly structure.\r\nThis Reader component is responsible for storing in the assembly object:\r\n\r\n    - The extracted template name\r\n    - Each group of options\r\n    - For each of those groups:\r\n\r\n        - The excluded options\r\n        - For the options which are not excluded, if applicable:\r\n\r\n          - making its alias\r\n          - Assign the default value\r\n\r\nWhat will finnally load the assembly data structures is a reader that now how to parse a configuration\r\n::\r\n\r\n    >>> reader = gpaster.PasterAssemblyReader(ta)\r\n    >>> reader.readed\r\n    False\r\n    >>> reader.read()\r\n    >>> len(ta.added_options) > 0\r\n    True\r\n    >>> reader.readed\r\n    True\r\n\r\n\r\nWe will check now that the structure loaded is as we wanted\r\n::\r\n\r\n    >>> t1 = pkg_resources.load_entry_point('cgwb.tp', 'paste.paster_create_template', 'cgwb.testpackage1')\r\n    >>> t2 = pkg_resources.load_entry_point('cgwb.tp', 'paste.paster_create_template', 'cgwb.testpackage2')\r\n    >>> t3 = pkg_resources.load_entry_point('cgwb.tp', 'paste.paster_create_template', 'cgwb.testpackage3')\r\n\r\n\r\nTemplates\r\n++++++++++\r\n\r\nOrder of templates is respected\r\n::\r\n\r\n    >>> [t['name'] for t in ta.templates_data]\r\n    ['cgwb.testpackage2', 'cgwb.testpackage3', 'cgwb.testpackage1']\r\n    >>> rt2, rt3, rt1 =  ta.templates_data\r\n\r\nGroups\r\n++++++\r\nOptions in template3, on the paster side, that we ll find on the next example\r\n::\r\n\r\n    >>> pprint([v.name for v in t3.vars])\r\n    ['namespace',\r\n     'nested_namespace',\r\n     'version',\r\n     'author',\r\n     'author_email',\r\n     'tp3option',\r\n     'tp3option3',\r\n     'keywords',\r\n     'license_name',\r\n     'project_name']\r\n\r\nFor each templates, options are grouped, and groups respect order defined in zcml::\r\n\r\n    >>> pprint([(rt3['groups'][n]['name'] , rt3['groups'][n]['options']) for n in range(len(rt3['groups']))])\r\n    [('Package tuning',\r\n      [(<var project_name default='tma' should_echo=True>,\r\n        'hidden',\r\n        'tmapn',\r\n        <collective.generic.webbuilder.zcml.Option object at ...>)]),\r\n     ('Plone Settings',\r\n      [(<var author_email default='bar@localhost' should_echo=True>,\r\n        'default',\r\n        None,\r\n        <collective.generic.webbuilder.zcml.Option object at ...>)]),\r\n     ('Authors',\r\n      [(<var author default='foo' should_echo=True>,\r\n        'default',\r\n        None,\r\n        <collective.generic.webbuilder.zcml.Options object at ...>)]),\r\n     ('default',\r\n      [(<var namespace default='%(namespace)s' should_echo=True>,\r\n        'default',\r\n        None,\r\n        None),\r\n       (<var nested_namespace default='%(package)s' should_echo=True>,\r\n        'default',\r\n        None,\r\n        None),\r\n       (<var version default='1.0' should_echo=True>, 'default', None, None),\r\n       (<var tp3option default='http://python.org' should_echo=True>,\r\n        'default',\r\n        None,\r\n        None),\r\n       (<var tp3option3 default='Project %s' should_echo=True>,\r\n        'default',\r\n        None,\r\n        None),\r\n       (<var keywords default='' should_echo=True>, 'default', None, None),\r\n       (<var license_name default='GPL' should_echo=True>,\r\n        'default',\r\n        None,\r\n        None)])]\r\n\r\n\r\nAs you can see project_name has been aliased and will be explained after.\r\n\r\n\r\nConsumed options\r\n+++++++++++++++++\r\nGoal is to insist loudly on consumed option.\r\nWhen an option is consumed by another template, it is not available in others to be asked only once.\r\nThat's why , template1 has no variables which were first asked in template3.\r\n::\r\n\r\n    >>> rt3options = []; noecho = [rt3options.extend(g['options']) for g in rt3['groups']]; rt3options = [opt[0].name for opt in rt3options]\r\n    >>> rtp1options = []; noecho = [rtp1options.extend(g['options']) for g in rt1['groups']]; rtp1options = [opt[0].name for opt in rtp1options]\r\n\r\nproject_name, author, etc. are not part of template1 options even if they are in the paster template.\r\nThey have been consumed by template3\r\n::\r\n\r\n    >>> pprint([v.name for v in t1.vars])\r\n    ['namespace',\r\n     'nested_namespace',\r\n     'version',\r\n     'author',\r\n     'author_email',\r\n     'tp1option',\r\n     'tp1option2',\r\n     'tp1option3',\r\n     'keywords',\r\n     'license_name',\r\n     'project_name']\r\n    >>> rt3options\r\n    ['project_name', 'author_email', 'author', 'namespace', 'nested_namespace', 'version', 'tp3option', 'tp3option3', 'keywords', 'license_name']\r\n    >>> rtp1options\r\n    ['tp1option', 'tp1option3', 'tp1option2', 'project_name']\r\n\r\nExcluded options\r\n+++++++++++++++++\r\n\r\nTemplate2 ignore all opions per default, even adding an option can't precedence over ignoring options.\r\nTake care of your regexes !\r\n::\r\n\r\n    >>> [g['options'] for g in rt2['groups']]\r\n    [[], []]\r\n\r\n\r\nTyped  options\r\n++++++++++++++++\r\n\r\nWe can assign type to values to use different widgets to display them in the UI for example.\r\nSupported types are:\r\n\r\n    - boolean (checkbox)\r\n    - hidden (hidden)\r\n    - default (textarea)\r\n\r\ntemplate3 define project_name as ``hidden``\r\n::\r\n\r\n    >>> rt3['groups'][0]['options'][0][1]\r\n    'hidden'\r\n\r\ntemplate1 define tp1option as ``boolean``.\r\n::\r\n\r\n    >>> rt1['groups'][0]['options'][0][1]\r\n    'boolean'\r\n\r\nIf an option default startswith 'y', 'true', or 'on', we switch the option type to boolean\r\n::\r\n\r\n    >>> rt1['groups'][0]['options'][1][1]\r\n    'boolean'\r\n\r\nOptions in the default group have ``default`` as type, as for options without explicit type\r\n::\r\n\r\n    >>> rt3[\"groups\"][3]['options'][0][1]\r\n    'default'\r\n    >>> rt3[\"groups\"][2]['options'][0][1]\r\n    'default'\r\n\r\nOption aliases\r\n+++++++++++++++\r\nWe have defined a default value and a default type for template3.project_name which is also an alias.\r\nAlias allow options with the same name but not the same value to exists within the same Assembly.\r\nDefault behaviour tells that one value is asked only once and used for all options that have the same name unless they are aliased explicitly each one of them.::\r\n\r\n    >>> rt3['groups'][0]['options']\r\n    [(<var project_name default='tma' should_echo=True>, 'hidden', 'tmapn', <collective.generic.webbuilder.zcml.Option object at ...>)]\r\n\r\n\r\nAdded options\r\n+++++++++++++\r\n\r\nWe can retrieve options added\r\n\r\n    * For one template ::\r\n\r\n        >>> rt1['added_options']\r\n        ['tp1option', 'tp1option2', 'tp1option3', 'project_name']\r\n        >>> rt2['added_options']\r\n        []\r\n        >>> rt3['added_options']\r\n        ['namespace', 'nested_namespace', 'version', 'author', 'author_email', 'tp3option', 'tp3option3', 'keywords', 'license_name', 'project_name']\r\n\r\n\r\n    * For all templates ::\r\n\r\n        >>> ta.added_options\r\n        ['namespace', 'nested_namespace', 'version', 'author', 'author_email', 'tp3option', 'tp3option3', 'keywords', 'license_name', 'tmapn', 'tp1option', 'tp1option2', 'tp1option3', 'project_name']\r\n\r\n\r\n\r\nCreating plugins to rearrange things after a successfull templates generation\r\n-------------------------------------------------------------------------------\r\n\r\n\r\n\r\nA plugin is a simple adapter\r\n++++++++++++++++++++++++++++\r\n\r\nCreating plugins to run after a generation is really simple.\r\nIt is just a matter of implementing an adapter which takes an ``\\IPasterConfiguration`` and provided ``IPostGenerationPlugin``.\r\n::\r\n\r\n    <adapter\r\n      name=\"plugin name\"\r\n      provides=\".interfaces.IPostGenerationPlugin\"\r\n      factory=\".plugins.MyPluginFactory\"\r\n      for=\".interfaces.IPasterAssembly\"\r\n    />\r\n\r\nThe eggs plugin\r\n+++++++++++++++++\r\n\r\nFor example, here is a simple plugin which take all eggs in a 'src' directory and register them in 'zcml' and 'develop' in the relative ''buildout.cfg''\r\nIt will add just the 'policy' egg to the intance's zcml option.\r\n\r\n\r\nBoiler plate to simulate a generation\r\n\r\n    >>> import tempfile, shutil, os\r\n    >>> c = os.getcwd()\r\n    >>> d = tempfile.mkdtemp()\r\n    >>> os.chdir(d)\r\n    >>> open('buildout.cfg', 'w').write('[buildout]\\ndevelop+=\\n   foo\\n[instance]\\nzcml=  too\\n')\r\n    >>> os.makedirs('src/bar/src')\r\n    >>> os.makedirs('src/policy/src')\r\n    >>> open('src/bar/setup.py', 'w').write('')\r\n    >>> open('src/policy/setup.py', 'w').write('')\r\n\r\nRunning the plugin\r\n\r\n    >>> from collective.generic.webbuilder.models import root\r\n    >>> conf = root.configurations['Generic Portal Plone3']\r\n    >>> from collective.generic.webbuilder import interfaces, paster\r\n    >>> pa = paster.PasterAssembly('Generic Portal Plone3')\r\n    >>> plugin = zope.component.queryAdapter(pa, interfaces.IPostGenerationPlugin, name='egg_plugin')\r\n    >>> plugin.process(d, 'foo', {})\r\n    >>> print open('buildout.cfg').read()\r\n    [buildout]\r\n    develop+=src/policy\r\n       src/bar\r\n       foo\r\n    eggs += policy\r\n            bar\r\n    [instance]\r\n    zcml=  too  \r\n                policy\r\n    <BLANKLINE>\r\n\r\nCleanup\r\n\r\n    >>> os.chdir(c);shutil.rmtree(d)\r\n\r\n\r\nRegistering plugins\r\n+++++++++++++++++++++\r\nPlease refer to the *plugin* zcml directive to know how to add plugins for a 'Configuration'.\r\n\r\nHere is an example about the \"eggs_plugins\"\r\n::\r\n\r\n    <configure xmlns=\"http://namespaces.repoze.org/bfg\"\r\n        xmlns:meta=\"http://namespaces.zope.org/meta\"\r\n        xmlns:cgwb=xmlns=\"http://webbuilder.org/webbuilder\">\r\n        <adapter\r\n            name=\"egg_plugin\"\r\n            provides=\".interfaces.IPostGenerationPlugin\"\r\n            factory=\".plugins.EggPlugin\"\r\n            for=\".interfaces.IPasterAssembly\"\r\n        />\r\n        <cgwb:genericpaster name=\"Generic Portal Plone\">\r\n            <cgwb:plugin name=\"egg_plugin\" order=\"2\"/>\r\n            <cgwb:template name=\"minitage.plone3\" order=\"1\">\r\n            </template>\r\n        </genericpaster>\r\n    </configure>\r\n\r\n\r\n\r\nThe paster dance\r\n--------------------------\r\n\r\nHeart of cgwb is pythonpaste, take some of paster templates, gather them in an ihm for user inputs and answears for generating a final composition of those templates, with or without been modificated by surrounded plugins.\r\n::\r\n\r\n    User choose a configuration\r\n        --------->\r\n            read variables from templates which are in the configuration and give the appropriate choice to the user\r\n        ------------->\r\n                User inputs and submit it\r\n        -------------------->\r\n                    We generate a tarball of the assembled templates according to the answers\r\n\r\n* An option is asked only once, only you make aliases for each of the options which have the same name among templates.\r\n* As a question is asked only once, if its type is not default, you must define it in the configuration of the template which has the less order number, because there will be there the question will be asked.\r\n\r\n\r\nLoading a zcml representation of a configuration\r\n---------------------------------------------------\r\n\r\nTesting the zcml to python represetation\r\n+++++++++++++++++++++++++++++++++++++++++++++\r\n\r\nLoad our test package where we have three templates\r\n::\r\n\r\n    >>> import collective.generic.webbuilder.tests\r\n    >>> testegg = os.path.join( collective.generic.webbuilder.tests.__path__[0], 'egg', 'src')\r\n    >>> pkg_resources.working_set.add_entry(testegg)\r\n    >>> env = pkg_resources.Environment()\r\n    >>> egg = env['cgwb.tp'][0]\r\n\r\nThe configuration\r\n+++++++++++++++++++\r\nIt is more described in the zcml part of the documentation, but it's a zcml representation of which variables from the pastertemplates we want to extract and how we want to present them to users.\r\n\r\n\r\nA sample zcml needed to assemble the packages we declared before is as follow:\r\n::\r\n\r\n    >>> paster_zcml = \"\"\"\r\n    ... <configure xmlns=\"http://namespaces.repoze.org/bfg\" xmlns:meta=\"http://namespaces.zope.org/meta\">\r\n    ...   <include package=\"collective.generic.webbuilder\" file=\"meta.zcml\"/>\r\n    ...   <configure xmlns=\"http://webbuilder.org/webbuilder\">\r\n    ...     <genericpaster name=\"test Assembler\">\r\n    ...         <template name=\"cgwb.testpackage1\" output=\"1\" order=\"1000\">\r\n    ...           <group name=\"Minitage\" order=\"05\">\r\n    ...             <option name=\"tp1option\" type=\"boolean\"/>\r\n    ...             <option name=\"tp1option3\" default=\"y\"/>\r\n    ...           </group>\r\n    ...         </template>\r\n    ...         <template name=\"cgwb.testpackage2\" output=\"2\" order=\"200\">\r\n    ...           <group name=\"Authors\" order=\"20\">\r\n    ...             <options prefix=\"^author.*\"/>\r\n    ...           </group>\r\n    ...           <excludeoptions prefix=\".*\"/>\r\n    ...         </template>\r\n    ...         <template name=\"cgwb.testpackage3\" output=\"3\" order=\"500\">\r\n    ...           <group name=\"Plone Settings\" order=\"8\">\r\n    ...             <option name=\"tp2opton2\" />\r\n    ...             <option name=\"author_email\" />\r\n    ...           </group>\r\n    ...           <group name=\"Authors\" order=\"20\">\r\n    ...             <options prefix=\"^author.*\"/>\r\n    ...           </group>\r\n    ...           <group name=\"Package tuning\" order=\"1\">\r\n    ...             <option name=\"project_name\" type=\"hidden\" default=\"tma\" alias=\"tmapn\"/>\r\n    ...           </group>\r\n    ...         </template>\r\n    ...     </genericpaster>\r\n    ...   </configure>\r\n    ... </configure>\r\n    ... \"\"\"\r\n    >>> noecho = xmlconfig.string(paster_zcml)\r\n    >>> root.configurations['test Assembler']\r\n    <collective.generic.webbuilder.zcml.PasterConfiguration object at ...>\r\n\r\nWe will check now that the structure loaded is as we wanted\r\n::\r\n\r\n    >>> t1 = pkg_resources.load_entry_point('cgwb.tp', 'paste.paster_create_template', 'cgwb.testpackage1')\r\n    >>> t2 = pkg_resources.load_entry_point('cgwb.tp', 'paste.paster_create_template', 'cgwb.testpackage2')\r\n    >>> t3 = pkg_resources.load_entry_point('cgwb.tp', 'paste.paster_create_template', 'cgwb.testpackage3')\r\n    >>> server, url = launch_server()\r\n    >>> browser = Browser(url)\r\n\r\nWe can see that in the main page we have the default configurations and the custom loaded one\r\n::\r\n\r\n    >>> 'test Assembler' in browser.contents\r\n    True\r\n    >>> 'Generic Portal Plone4' in browser.contents\r\n    True\r\n    >>> 'Generic Portal Plone3' in browser.contents\r\n    True\r\n\r\nFollowing the test assembler link\r\n::\r\n\r\n    >>> browser.getLink('test Assembler').click()\r\n    >>> htmlS(browser.contents).xpath('//input[@name=\"project\"]')[0]\r\n    <InputElement ... name='project' type='text'>\r\n\r\nI can submit a form and a valid it\r\n::\r\n\r\n    >>> browser.getControl(name='project').value = 'myproject'\r\n    >>> browser.getControl(name='author').value = 'tim burton'\r\n    >>> browser.getControl(name='author_email').value = 'tim burton@foo.com'\r\n    >>> browser.getControl(name='tp1option').value = False\r\n    >>> browser.getControl(name='tp1option2').value = 'Project Monster'\r\n    >>> browser.getControl(name='project_name').value = 'My Big Project'\r\n    >>> browser.getControl(name='submit_cgwbDownload').click()\r\n    >>> '.tar' in browser.contents\r\n    True\r\n\r\nThe sucessful produced result is a tarball\r\n::\r\n\r\n    >>> pprint(browser.headers.headers)\r\n    ['Server:...\r\n     'Date:...\r\n     'Content-Disposition: attachment; filename=\"myproject....tar.gz\"\\r\\n',\r\n     'Content-Transfer-Encoding: binary\\r\\n',\r\n     'Content-Length: ...\\r\\n']\r\n    >>> import tarfile\r\n    >>> tar = tarfile.open(fileobj=StringIO(browser.contents))\r\n\r\nIn the produced tarball, output directories present in the zcml configuration are respected in the tarball::\r\n\r\n    >>> files = [a.name for a in tar];files.sort();pprint(files)\r\n    ['.',\r\n     '1',\r\n     '1/myproject',\r\n     '1/myproject/test',\r\n     '2',\r\n     '2/myproject',\r\n     '2/myproject/test1',\r\n     '3',\r\n     '3/myproject',\r\n     '3/myproject/test2']\r\n    >>> templates = dict([(a.name,a) for a in tar if 'test' in a.name])\r\n    >>> t2 = templates['2/myproject/test1']\r\n    >>> t3 = templates['3/myproject/test2']\r\n    >>> t1 = templates['1/myproject/test']\r\n\r\nOptions filled in the interface are well interpreted in templates\r\n::\r\n\r\n    >>> pprint([a for a  in tar.extractfile(t1).read().split('\\n') if a.strip()])\r\n    ['namespace                 =>            %(namespace)s',\r\n     'nested_namespace          =>            %(package)s',\r\n     'version                   =>            1.0',\r\n     'author                    =>            tim burton',\r\n     'author_email              =>            tim burton@foo.com',\r\n     'tp1option                 =>            False',\r\n     'tp1option2                =>            Project Monster',\r\n     'tp1option3                =>            True',\r\n     'keywords                  =>            ',\r\n     'license_name              =>            GPL',\r\n     'project_name              =>            My Big Project']\r\n\r\nThe project_name entered for project1 is shared in project2\r\n::\r\n\r\n    >>> pprint([a for a  in tar.extractfile(t2).read().split('\\n') if a.strip()])\r\n    [\"'namespace'                =>         '%(namespace)s'\",\r\n     \"'nested_namespace'         =>         '%(package)s'\",\r\n     \"'version'                  =>         '1.0'\",\r\n     \"'author'                   =>         'tim burton'\",\r\n     \"'author_email'             =>         'tim burton@foo.com'\",\r\n     \"'keywords'                 =>         ''\",\r\n     \"'license_name'             =>         'GPL'\",\r\n     \"'project_name'             =>         'My Big Project'\",\r\n     \"'tp2option'                =>         'tp2option'\",\r\n     \"'tp2opton2'                =>         'tp2opton2'\"]\r\n\r\nthe aliased project_name (tma) takes efffect in the third template\r\n::\r\n\r\n    >>> pprint([a for a  in tar.extractfile(t3).read().split('\\n') if a.strip()])\r\n    [\"'namespace'                =>         '%(namespace)s'\",\r\n     \"'nested_namespace'         =>         '%(package)s'\",\r\n     \"'version'                  =>         '1.0'\",\r\n     \"'author'                   =>         'tim burton'\",\r\n     \"'author_email'             =>         'tim burton@foo.com'\",\r\n     \"'keywords'                 =>         ''\",\r\n     \"'license_name'             =>         'GPL'\",\r\n     \"'project_name'             =>         'tma'\",\r\n     \"'tp3option3'               =>         'Project %s'\",\r\n     \"'tp3option'                =>         'Project %s'\"]\r\n\r\n\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n1.1\r\n----------\r\n\r\n* documentation, because webbuilder needs to be installed in dev mode, anyhow.\r\n\r\n1.0 \r\n----------------\r\n* Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/collective.generic.webbuilder",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "collective.generic.webbuilder",
    "package_url": "https://pypi.org/project/collective.generic.webbuilder/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/collective.generic.webbuilder/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/collective.generic.webbuilder"
    },
    "release_url": "https://pypi.org/project/collective.generic.webbuilder/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Yet another WSGI Paste factory for paste by Makina Corpus",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1030924,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af536262ef928aa3731eeadae90abf4dab134cae83c689dcfc46d4073615a55d",
          "md5": "02377a230a6d976fbbbb7e38d15648dd",
          "sha256": "8e90347ffa4425e8a6dcd654b0703f512d62017299577fe575697b929c9c17d4"
        },
        "downloads": -1,
        "filename": "collective.generic.webbuilder-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02377a230a6d976fbbbb7e38d15648dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 231602,
        "upload_time": "2011-11-24T10:45:59",
        "upload_time_iso_8601": "2011-11-24T10:45:59.476094Z",
        "url": "https://files.pythonhosted.org/packages/af/53/6262ef928aa3731eeadae90abf4dab134cae83c689dcfc46d4073615a55d/collective.generic.webbuilder-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0bf33c7be248d7a84e6c76796530b20a747ff4d6c6f6b06532dd4c834eaff87",
          "md5": "4adf0c9aad7efce2aa0b73eaca19ff89",
          "sha256": "cf3175ad2b95cf5ce47824f5ad0ee62c24c5f3446e651bf359f30d6dc9832535"
        },
        "downloads": -1,
        "filename": "collective.generic.webbuilder-1.0.zip",
        "has_sig": false,
        "md5_digest": "4adf0c9aad7efce2aa0b73eaca19ff89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 328036,
        "upload_time": "2010-04-21T13:13:39",
        "upload_time_iso_8601": "2010-04-21T13:13:39.157553Z",
        "url": "https://files.pythonhosted.org/packages/a0/bf/33c7be248d7a84e6c76796530b20a747ff4d6c6f6b06532dd4c834eaff87/collective.generic.webbuilder-1.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bce434eb88dc9ada4d2c7f8be3adcc283be2aecf24626efdc82494883d0a0226",
          "md5": "bfa3b0506e3af818e313940f5bd0396e",
          "sha256": "4ea38f499d564950fe98b8ae194fa6019f695d00adb66d9dc51cf2fa9480b04f"
        },
        "downloads": -1,
        "filename": "collective.generic.webbuilder-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bfa3b0506e3af818e313940f5bd0396e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 233630,
        "upload_time": "2011-11-24T11:01:58",
        "upload_time_iso_8601": "2011-11-24T11:01:58.030619Z",
        "url": "https://files.pythonhosted.org/packages/bc/e4/34eb88dc9ada4d2c7f8be3adcc283be2aecf24626efdc82494883d0a0226/collective.generic.webbuilder-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bce434eb88dc9ada4d2c7f8be3adcc283be2aecf24626efdc82494883d0a0226",
        "md5": "bfa3b0506e3af818e313940f5bd0396e",
        "sha256": "4ea38f499d564950fe98b8ae194fa6019f695d00adb66d9dc51cf2fa9480b04f"
      },
      "downloads": -1,
      "filename": "collective.generic.webbuilder-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bfa3b0506e3af818e313940f5bd0396e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 233630,
      "upload_time": "2011-11-24T11:01:58",
      "upload_time_iso_8601": "2011-11-24T11:01:58.030619Z",
      "url": "https://files.pythonhosted.org/packages/bc/e4/34eb88dc9ada4d2c7f8be3adcc283be2aecf24626efdc82494883d0a0226/collective.generic.webbuilder-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}