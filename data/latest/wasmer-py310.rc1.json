{
  "info": {
    "author": "Wasmer Engineering Team <engineering@wasmer.io>",
    "author_email": "Wasmer Engineering Team <engineering@wasmer.io>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Rust",
      "Topic :: Software Development",
      "Topic :: Software Development :: Compilers",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "# <img height=\"48\" src=\"https://wasmer.io/images/logo.svg\" alt=\"Wasmer logo\" valign=\"middle\"> Wasmer Python [![PyPI version](https://img.shields.io/pypi/v/wasmer)](https://badge.fury.io/py/wasmer) [![Wasmer Python Documentation](https://img.shields.io/badge/docs-read-green)](https://wasmerio.github.io/wasmer-python/api/wasmer/) [![Wasmer PyPI downloads](https://pepy.tech/badge/wasmer)](https://pypi.org/project/wasmer/) [![Wasmer Slack Channel](https://img.shields.io/static/v1?label=chat&message=on%20Slack&color=green)](https://slack.wasmer.io)\n\nA complete and mature WebAssembly runtime for Python based on\n[Wasmer](https://github.com/wasmerio/wasmer).\n\nFeatures:\n\n  * **Easy to use**: The `wasmer` API mimics the standard WebAssembly API,\n  * **Fast**: `wasmer` executes the WebAssembly modules as fast as\n    possible, close to **native speed**,\n  * **Safe**: All calls to WebAssembly will be fast, but more\n    importantly, completely safe and sandboxed,\n  * **Modular**: `wasmer` can compile the WebAssembly modules with\n    different engines or compiler.\n\n**Documentation**: [browse the detailed API\ndocumentation](https://wasmerio.github.io/wasmer-python/api/wasmer/) full of\nexamples.\n\n**Examples** as tutorials: [browse the `examples/`\ndirectory](https://github.com/wasmerio/wasmer-python/tree/master/examples),\nit's the best place for a complete introduction!\n\n## Quick Introduction\n\nThe `wasmer` package brings the required API to execute WebAssembly\nmodules. In a nutshell, `wasmer` compiles the WebAssembly module into\ncompiled code, and then executes it. `wasmer` is designed to work in\nvarious environments and platforms: From nano single-board computers\nto large and powerful servers, including more exotic ones. To address\nthose requirements, Wasmer provides 2 engines and 3 compilers.\n\nSuccinctly, an _engine_ is responsible to drive the _compilation_ and\nthe _execution_ of a WebAssembly module. By extension, a _headless_\nengine can only execute a WebAssembly module, i.e. a module that has\npreviously been compiled, or compiled, serialized and deserialized. By\ndefault, the `wasmer` package comes with 2 headless engines:\n\n1. `wasmer.engine.JIT`, the compiled machine code lives in memory,\n2. `wasmer.engine.Native`, the compiled machine code lives in a shared\n   object file (`.so`, `.dylib`, or `.dll`), and is natively executed.\n\nBecause `wasmer` does not embed compilers in its package, engines are\nheadless, i.e. they can't compile WebAssembly module; they can only\nexecute them. Compilers live in their own standalone packages. Let's\nbriefly introduce them:\n\n| Compiler package | Description | PyPi |\n|-|-|-|\n| `wasmer_compiler_singlepass` | Super fast compilation times, slower execution times. Not prone to JIT-bombs. *Ideal for blockchains* | [![On PyPi](https://img.shields.io/pypi/v/wasmer_compiler_singlepass)](https://pypi.org/project/wasmer_compiler_singlepass/) [![Downloads](https://pepy.tech/badge/wasmer_compiler_singlepass)](https://pypi.org/project/wasmer_compiler_singlepass/) |\n| `wasmer_compiler_cranelift` | Fast compilation times, fast execution times. *Ideal for development* | [![On PyPi](https://img.shields.io/pypi/v/wasmer_compiler_cranelift)](https://pypi.org/project/wasmer_compiler_cranelift/) [![Downloads](https://pepy.tech/badge/wasmer_compiler_cranelift)](https://pypi.org/project/wasmer_compiler_cranelift/) |\n| `wasmer_compiler_llvm` | Slow compilation times, very fast execution times (close to native, sometimes faster). *Ideal for Production* | [![On PyPi](https://img.shields.io/pypi/v/wasmer_compiler_llvm)](https://pypi.org/project/wasmer_compiler_llvm/) [![Downloads](https://pepy.tech/badge/wasmer_compiler_llvm)](https://pypi.org/project/wasmer_compiler_llvm/) |\n\nWe generally recommend `wasmer_compiler_cranelift` for development\npurposes and `wasmer_compiler_llvm` in production.\n\nLearn more by reading [the documentation of the `wasmer.engine`\nsubmodule](https://wasmerio.github.io/wasmer-python/api/engine/index.html).\n\n## Install\n\nTo install the `wasmer` Python package, and let's say the\n`wasmer_compiler_cranelift` compiler, just run those commands in your shell:\n\n```sh\n$ pip install wasmer==1.0.0\n$ pip install wasmer_compiler_cranelift==1.0.0\n```\n\nAnd you're ready to get fun!\n\n## Example\n\nWe highly recommend to read the\n[`examples/`](https://github.com/wasmerio/wasmer-python/tree/master/examples)\ndirectory, which contains a sequence of examples/tutorials. It's the\nbest place to learn by reading examples.\n\nBut for the most eager of you, and we know you're numerous you\nmischievous, there is a quick toy program in\n`examples/appendices/simple.rs`, written in Rust:\n\n```rust\n#[no_mangle]\npub extern fn sum(x: i32, y: i32) -> i32 {\n    x + y\n}\n```\n\nAfter compilation to WebAssembly, the\n[`examples/appendices/simple.wasm`](https://github.com/wasmerio/wasmer-python/blob/master/examples/appendices/simple.wasm)\nbinary file is generated. ([Download\nit](https://github.com/wasmerio/wasmer-python/raw/master/examples/appendices/simple.wasm)).\n\nThen, we can excecute it in Python:\n\n```python\nfrom wasmer import engine, Store, Module, Instance\nfrom wasmer_compiler_cranelift import Compiler\n\n# Let's define the store, that holds the engine, that holds the compiler.\nstore = Store(engine.JIT(Compiler))\n\n# Let's compile the module to be able to execute it!\nmodule = Module(store, open('simple.wasm', 'rb').read())\n\n# Now the module is compiled, we can instantiate it.\ninstance = Instance(module)\n\n# Call the exported `sum` function.\nresult = instance.exports.sum(5, 37)\n\nprint(result) # 42!\n```\n\nAnd then, finally, enjoy by running:\n\n```sh\n$ python examples/appendices/simple.py\n```\n\n# Development\n\nThe Python extension is written in [Rust], with [`pyo3`] and\n[`maturin`].\n\nFirst, you need to install Rust and Python. We will not make you the\naffront to explain to you how to install Python (if you really need,\ncheck [`pyenv`](https://github.com/pyenv/pyenv/)). For Rust though, we\nadvise to use [`rustup`](https://rustup.rs/), then:\n\n```sh\n$ rustup install stable\n```\n\nTo set up your environment, you'll need [`just`], and then, install\nthe prelude of this project:\n\n```sh\n$ cargo install just\n$ just --list # to learn about all the available recipes\n$ just prelude\n```\n\nIt will install `pyo3` and `maturin` for Python and for Rust. It will\nalso install [`virtualenv`].\n\nThen, simply run:\n\n```sh\n$ source .env/bin/activate\n$ just build api\n$ just build compiler-cranelift\n$ python examples/appendices/simple.py\n```\n\n## Supported platforms\n\nWe try to provide wheels for as many platforms and architectures as\npossible. For the moment, here are the supported platforms and\narchitectures:\n\n<table>\n  <thead>\n    <tr>\n      <th>Platform</th>\n      <th>Architecture</th>\n      <th>Triple</th>\n      <th colspan=\"2\">Packages</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"8\">Linux</td>\n      <td rowspan=\"4\"><code>amd64</code></td>\n      <td rowspan=\"4\"><code>x86_64-unknown-linux-gnu</code></td>\n      <td><code>wasmer</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\"><code>aarch64</code></td>\n      <td rowspan=\"4\"><code>aarch64-unknown-linux-gnu</code></td>\n      <td><code>wasmer</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>❌ <sup><a href=\"#wheels-note-1\">1</a></sup></td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">Darwin</td>\n      <td rowspan=\"4\"><code>amd64</code></td>\n      <td rowspan=\"4\"><code>x86_64-apple-darwin</code></td>\n      <td><code>wasmer</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">Windows</td>\n      <td rowspan=\"4\"><code>amd64</code></td>\n      <td rowspan=\"4\"><code>x86_64-pc-windows-msvc</code></td>\n      <td><code>wasmer</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>✅</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>❌ <sup><a href=\"#wheels-note-2\">2</a></sup></td>\n    </tr>\n  </tbody>\n</table>\n\nNotes:\n\n<ul>\n  <li id=\"wheels-note-1\"><sup>1</sup>\n  <code>wasmer_compiler_singlepass</code> does not support\n  <code>aarch64</code> for the moment</li>\n  <li id=\"wheels-note-2\"><sup>2</sup>\n  <code>wasmer_compiler_llvm</code> is not packaging properly on\n  Windows for the moment</li>\n</ul>\n\nWheels are all built for the following Python versions:\n\n* Python 3.6,\n* Python 3.7,\n* Python 3.8.\n* Python 3.9.\n\n<details>\n<summary>Learn about the “fallback” <code>py3-none-any</code> wheel</summary>\n\n### `py3-none-any.whl`\n\nA special `wasmer-$(version)-py3-none-any` wheel is built as a\nfallback. The `wasmer` libray will be installable, but it will raise\nan `ImportError` exception saying that “Wasmer is not available on\nthis system”.\n\nThis wheel will be installed if none matches before (learn more by\nreading the [PEP 425, Compatibility Tags for Built\nDistributions](https://www.python.org/dev/peps/pep-0425/)).\n\n</details>\n\n## Testing\n\nBuild all the packages and run the tests:\n\n```sh\n$ just build-all\n$ just test\n```\n\n# What is WebAssembly?\n\nQuoting [the WebAssembly site](https://webassembly.org/):\n\n> WebAssembly (abbreviated Wasm) is a binary instruction format for a\n> stack-based virtual machine. Wasm is designed as a portable target\n> for compilation of high-level languages like C/C++/Rust, enabling\n> deployment on the web for client and server applications.\n\nAbout speed:\n\n> WebAssembly aims to execute at native speed by taking advantage of\n> [common hardware\n> capabilities](https://webassembly.org/docs/portability/#assumptions-for-efficient-execution)\n> available on a wide range of platforms.\n\nAbout safety:\n\n> WebAssembly describes a memory-safe, sandboxed [execution\n> environment](https://webassembly.org/docs/semantics/#linear-memory) […].\n\n# License\n\nThe entire project is under the MIT License. Please read [the\n`LICENSE` file][license].\n\n\n[`pyo3`]: https://github.com/PyO3/pyo3\n[`maturin`]: https://github.com/PyO3/maturin\n[`virtualenv`]: https://virtualenv.pypa.io/\n[`just`]: https://github.com/casey/just/\n[license]: https://github.com/wasmerio/wasmer/blob/master/LICENSE\n[Rust]: https://www.rust-lang.org/\n[compilers]: https://medium.com/wasmer/a-webassembly-compiler-tale-9ef37aa3b537\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,extension,webassembly",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wasmer-py310",
    "package_url": "https://pypi.org/project/wasmer-py310/",
    "platform": null,
    "project_url": "https://pypi.org/project/wasmer-py310/",
    "project_urls": {
      "Bug Tracker": "https://github.com/wasmerio/wasmer-python/issues",
      "Documentation": "https://github.com/wasmerio/wasmer-python/",
      "Source Code": "https://github.com/wasmerio/wasmer-python"
    },
    "release_url": "https://pypi.org/project/wasmer-py310/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python extension to run WebAssembly binaries",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13888332,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "772683341d12e91dd67f4f9f4fdc78f3f3369c2b5575b7fb0cbc1242909c5d96",
          "md5": "b02236e30fa320ef75305ee98c5e9364",
          "sha256": "fd29686a047207740a7a89c15d19c2608783f9c296d109111065675a5b8ef8d0"
        },
        "downloads": -1,
        "filename": "wasmer_py310-1.0.0-cp310-cp310-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b02236e30fa320ef75305ee98c5e9364",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 1353275,
        "upload_time": "2022-05-21T19:17:39",
        "upload_time_iso_8601": "2022-05-21T19:17:39.403234Z",
        "url": "https://files.pythonhosted.org/packages/77/26/83341d12e91dd67f4f9f4fdc78f3f3369c2b5575b7fb0cbc1242909c5d96/wasmer_py310-1.0.0-cp310-cp310-macosx_10_7_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c24e28ceb3ca29c2148a8d6924099026e4bccb3ee1fbb1b818f775e0096d7a4f",
          "md5": "c66591ba1490ac77c260ae2369f3961d",
          "sha256": "0cda9a159431cb690792cf5ad4af50cbc8b470c0406aa115da913c6992cbef43"
        },
        "downloads": -1,
        "filename": "wasmer_py310-1.0.0-cp310-cp310-manylinux_2_27_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c66591ba1490ac77c260ae2369f3961d",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 1491945,
        "upload_time": "2022-05-21T19:17:45",
        "upload_time_iso_8601": "2022-05-21T19:17:45.424713Z",
        "url": "https://files.pythonhosted.org/packages/c2/4e/28ceb3ca29c2148a8d6924099026e4bccb3ee1fbb1b818f775e0096d7a4f/wasmer_py310-1.0.0-cp310-cp310-manylinux_2_27_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37d06b18db6488c888e09595a30cc7d58572c1444aa111ac0b0a6041842744c0",
          "md5": "8cb45c8a854f25805f046df0ecdfadba",
          "sha256": "4b7fd682e924b84fd19f28277dbc9055fe7d2457afa750ab8ebc845824707ee9"
        },
        "downloads": -1,
        "filename": "wasmer_py310-1.0.0-cp310-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8cb45c8a854f25805f046df0ecdfadba",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": null,
        "size": 1344203,
        "upload_time": "2022-05-21T19:17:49",
        "upload_time_iso_8601": "2022-05-21T19:17:49.808735Z",
        "url": "https://files.pythonhosted.org/packages/37/d0/6b18db6488c888e09595a30cc7d58572c1444aa111ac0b0a6041842744c0/wasmer_py310-1.0.0-cp310-none-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "772683341d12e91dd67f4f9f4fdc78f3f3369c2b5575b7fb0cbc1242909c5d96",
        "md5": "b02236e30fa320ef75305ee98c5e9364",
        "sha256": "fd29686a047207740a7a89c15d19c2608783f9c296d109111065675a5b8ef8d0"
      },
      "downloads": -1,
      "filename": "wasmer_py310-1.0.0-cp310-cp310-macosx_10_7_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b02236e30fa320ef75305ee98c5e9364",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 1353275,
      "upload_time": "2022-05-21T19:17:39",
      "upload_time_iso_8601": "2022-05-21T19:17:39.403234Z",
      "url": "https://files.pythonhosted.org/packages/77/26/83341d12e91dd67f4f9f4fdc78f3f3369c2b5575b7fb0cbc1242909c5d96/wasmer_py310-1.0.0-cp310-cp310-macosx_10_7_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c24e28ceb3ca29c2148a8d6924099026e4bccb3ee1fbb1b818f775e0096d7a4f",
        "md5": "c66591ba1490ac77c260ae2369f3961d",
        "sha256": "0cda9a159431cb690792cf5ad4af50cbc8b470c0406aa115da913c6992cbef43"
      },
      "downloads": -1,
      "filename": "wasmer_py310-1.0.0-cp310-cp310-manylinux_2_27_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c66591ba1490ac77c260ae2369f3961d",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 1491945,
      "upload_time": "2022-05-21T19:17:45",
      "upload_time_iso_8601": "2022-05-21T19:17:45.424713Z",
      "url": "https://files.pythonhosted.org/packages/c2/4e/28ceb3ca29c2148a8d6924099026e4bccb3ee1fbb1b818f775e0096d7a4f/wasmer_py310-1.0.0-cp310-cp310-manylinux_2_27_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37d06b18db6488c888e09595a30cc7d58572c1444aa111ac0b0a6041842744c0",
        "md5": "8cb45c8a854f25805f046df0ecdfadba",
        "sha256": "4b7fd682e924b84fd19f28277dbc9055fe7d2457afa750ab8ebc845824707ee9"
      },
      "downloads": -1,
      "filename": "wasmer_py310-1.0.0-cp310-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "8cb45c8a854f25805f046df0ecdfadba",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": null,
      "size": 1344203,
      "upload_time": "2022-05-21T19:17:49",
      "upload_time_iso_8601": "2022-05-21T19:17:49.808735Z",
      "url": "https://files.pythonhosted.org/packages/37/d0/6b18db6488c888e09595a30cc7d58572c1444aa111ac0b0a6041842744c0/wasmer_py310-1.0.0-cp310-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}