{
  "info": {
    "author": "Dax Harris",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pnet\n\nContinuation of previous p2p network projects\n\n## Packet Format\n\n`{network id}|{packet type (any of [adv, msg, rsp, err])}|{message content}|{public key}|END`\n\n## Node Types\n\n### Basic Node\n\n```\nNode(\n    :name Unique name within network - Should not use | or @\n    :network_id ID of network to listen to - Should not use |\n    :onmessage Callback to run when a message is recieved. Takes one argument\n    :crypt Crypt object or None. If None, auto-generates object.\n    :network_key Fernet encryption key of network. Leaving as None will disable network-level encryption\n    :server_port Port to listen on\n    :advertise_port Port to advertise on. Should be shared across a network\n    :broadcast_interval Time between UDP advertisements\n    :bind_ip IP to bind to\n)\n```\n\n**Methods**:\n\n-   `.serve()` - Starts server in another thread\n-   `.shutdown()` - Stops server\n-   `.send(target: name of target peer, data: arbitrary data)` - Send data to node\n\n**Notes:**\n\n-   Probably don't use this, it's extremely raw\n-   Make sure you use encryption\n-   `onmessage` should be a function that takes 1 argument\n\n### Advanced Node\n\n```\nNode(\n    :name Unique name within network - Should not use | or @\n    :network_id ID of network to listen to - Should not use |\n    :crypt Crypt object or None. If None, auto-generates object.\n    :network_key Fernet encryption key of network. Leaving as None will disable network-level encryption\n    :server_port Port to listen on\n    :advertise_port Port to advertise on. Should be shared across a network\n    :broadcast_interval Time between UDP advertisements\n    :bind_ip IP to bind to\n    :chunk_size Size of chunks in transmissions. Default 16KB should be fine\n    :functions Dictionary of function name: function\n)\n```\n\n**Methods**:\n\n-   `@.register(function_name: name of function)` - Decorate functions with this to register them in the node. They should take 3 arguments:\n    -   Node instance\n    -   Originator node name\n    -   A readable stream\n\nThe function should then return a readable stream.\n\n-   `.send()` - Replaces `Node.send`\n\n```\n.send(\n    target: either a target peer name, \"*\" for all known peers, or a list of peer names)\n    command: command name\n    data: An open file object, readable stream, or bytes\n```\n\n-   All other `Node` methods\n\n### CommandNode\n\n```\nNode(\n    :name Unique name within network - Should not use | or @\n    :network_id ID of network to listen to - Should not use |\n    :crypt Crypt object or None. If None, auto-generates object.\n    :network_key Fernet encryption key of network. Leaving as None will disable network-level encryption\n    :server_port Port to listen on\n    :advertise_port Port to advertise on. Should be shared across a network\n    :broadcast_interval Time between UDP advertisements\n    :bind_ip IP to bind to\n    :chunk_size Size of chunks in transmissions. Default 16KB should be fine\n    :functions Dictionary of function name: function\n)\n```\n\n**Methods:**\n\n-   `@.register(function_name: name of function)` - Decorate functions with this to register them in the node. They should be of the following form:\n    `function(node: CommandNode, originator: str, *args, **kwargs) -> Any JSON Encodable`\n\n-   Sending commands:\n\n```python\nnode.target(\"target or * or [targets]\").<function name>(*args, **kwargs)\n```\n\n**Notes:**\n\n-   Nodes implement `get_funcs` and `get_peers` calls automatically. Good for determining network topology.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iTecAI/pnet",
    "keywords": "p2p peer socket encryption",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "peernet",
    "package_url": "https://pypi.org/project/peernet/",
    "platform": "",
    "project_url": "https://pypi.org/project/peernet/",
    "project_urls": {
      "Homepage": "https://github.com/iTecAI/pnet"
    },
    "release_url": "https://pypi.org/project/peernet/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Local encrypted p2p communication",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12857337,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27f6707afc5431d3b1e908f9a134e3cd9e582ea14e21dc6cfa414dcc7079a6e4",
          "md5": "ae92b212606ef83f4343111eef2b5363",
          "sha256": "6e5d87c7c9dd216b4b727befaddb6959bcc18d38ea6db2e08563bc851827644c"
        },
        "downloads": -1,
        "filename": "peernet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae92b212606ef83f4343111eef2b5363",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9565,
        "upload_time": "2022-02-11T01:32:16",
        "upload_time_iso_8601": "2022-02-11T01:32:16.643942Z",
        "url": "https://files.pythonhosted.org/packages/27/f6/707afc5431d3b1e908f9a134e3cd9e582ea14e21dc6cfa414dcc7079a6e4/peernet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfba93c19445c86811d17049874eeba4e38a2ccc37c35fdb1af89cf467238321",
          "md5": "d44fab1e7921b7839a54e19d2250765e",
          "sha256": "0626159846a8cd8c51b38da1ba9415f7e7375a87adb784b875c14fa500ef7739"
        },
        "downloads": -1,
        "filename": "peernet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d44fab1e7921b7839a54e19d2250765e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11112,
        "upload_time": "2022-02-11T02:25:11",
        "upload_time_iso_8601": "2022-02-11T02:25:11.530825Z",
        "url": "https://files.pythonhosted.org/packages/df/ba/93c19445c86811d17049874eeba4e38a2ccc37c35fdb1af89cf467238321/peernet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfba93c19445c86811d17049874eeba4e38a2ccc37c35fdb1af89cf467238321",
        "md5": "d44fab1e7921b7839a54e19d2250765e",
        "sha256": "0626159846a8cd8c51b38da1ba9415f7e7375a87adb784b875c14fa500ef7739"
      },
      "downloads": -1,
      "filename": "peernet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d44fab1e7921b7839a54e19d2250765e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11112,
      "upload_time": "2022-02-11T02:25:11",
      "upload_time_iso_8601": "2022-02-11T02:25:11.530825Z",
      "url": "https://files.pythonhosted.org/packages/df/ba/93c19445c86811d17049874eeba4e38a2ccc37c35fdb1af89cf467238321/peernet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}