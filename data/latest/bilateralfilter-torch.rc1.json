{
  "info": {
    "author": "Fabian Wagner",
    "author_email": "fabian.wagner@fau.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Trainable Bilateral Filter Layer (PyTorch)\n==========================================\n\nThis repository contains our GPU-accelerated trainable bilateral filter\nlayer (three spatial and one range filter dimension) that can be\ndirectly included in any Pytorch graph, just as any conventional layer\n(FCL, CNN, â€¦). By calculating the analytical derivative of the bilateral\nfilter with respect to its parameters and its input, the (so far)\nhyperparameters can be automatically optimized via backpropagation for a\ncalculated loss.\n\nOur corresponding paper `Ultra low-parameter denoising: Trainable\nbilateral filter layers in computed\ntomography <https://doi.org/10.1002/mp.15718>`__ can be found on\n`Medical Physics <https://doi.org/10.1002/mp.15718>`__ (open access) and\n`arXiv <https://arxiv.org/pdf/2201.10345.pdf>`__ (pre-print).\n\nCitation:\n~~~~~~~~~\n\nIf you find our code useful, please cite our work\n\n::\n\n   @article{wagner2022ultra,\n     title={Ultra low-parameter denoising: Trainable bilateral filter layers in computed tomography},\n     author={Wagner, Fabian and Thies, Mareike and Gu, Mingxuan and Huang, Yixing and Pechmann, Sabrina and Patwari, Mayank and Ploner, Stefan and Aust, Oliver and Uderhardt, Stefan and Schett, Georg and Christiansen, Silke and Maier, Andreas},\n     journal={Medical Physics},\n     year={2022},\n     doi={https://doi.org/10.1002/mp.15718}\n   }\n\nSetup:\n~~~~~~\n\nThe C++/CUDA implemented forward and backward functions are compiled via\nthe setup.py script using setuptools:\n\n1. Create and activate a python environment (python>=3.7).\n2. Install `Torch <https://pytorch.org/get-started/locally/>`__ (tested versions: 1.7.1, 1.9.0).\n3. Install the bilateral filter layer via pip:\n\n.. code:: bash\n\n   pip install bilateralfilter_torch\n\nIn case you encounter problems with 3. install the layer directly from our\n`GitHub repository <https://github.com/faebstn96/trainable-bilateral-filter-source>`__:\n\n3. Download the repository.\n4. Navigate into the extracted repo.\n5. Compile/install the bilateral filter layer by calling\n\n.. code:: bash\n\n   python setup.py install\n\nExample scripts:\n~~~~~~~~~~~~~~~~\n-  Can be found in our `GitHub repository <https://github.com/faebstn96/trainable-bilateral-filter-source>`__\n-  Try out the forward pass by running the example_filter.py (requires\n   `Matplotlib <https://matplotlib.org/stable/users/installing.html>`__\n   and\n   `scikit-image <https://scikit-image.org/docs/stable/install.html>`__).\n-  Run the gradcheck.py script to verify the correct gradient\n   implementation.\n-  Run example_optimization.py to optimize the parameters of a bilateral\n   filter layer to automatically denoise an image.\n\nOptimized bilateral filter prediction:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://github.com/faebstn96/trainable-bilateral-filter-source/blob/main/out/example_optimization.png?raw=true\n\nImplementation:\n~~~~~~~~~~~~~~~\n\nThe general structure of the implementation follows the PyTorch\ndocumentation for `creating custom C++ and CUDA\nextensions <https://pytorch.org/tutorials/advanced/cpp_extension.html>`__.\nThe forward pass implementation of the layer is based on code from the\n`Project MONAI <https://docs.monai.io/en/latest/networks.html>`__\nframework, originally published under the `Apache License, Version\n2.0 <https://www.apache.org/licenses/LICENSE-2.0>`__. The correct\nimplementation of the analytical forward and backward pass can be\nverified by running the gradcheck.py script, comparing numerical\ngradients with the derived analytical gradient using the PyTorch\nbuilt-in `gradcheck\nfunction <https://pytorch.org/docs/stable/generated/torch.autograd.gradcheck.html>`__.\n\nTroubleshooting\n~~~~~~~~~~~~~~~\n\nnvcc-related errors:\n^^^^^^^^^^^^^^^^^^^^\n\n1. Compiling the filter layers requires the Nvidia CUDA toolkit. Check\n   its version\n\n   .. code:: bash\n\n      nvcc --version\n\n   or install it via, e.g.,\n\n   .. code:: bash\n\n      sudo apt update\n      sudo apt install nvidia-cuda-toolkit\n\n2. The NVIDIA CUDA toolkit 11.6 made some problems on a Windows machine\n   in combination with pybind. Downgrading the toolkit to version 11.3\n   fixed the problem (see\n   `this <https://discuss.pytorch.org/t/cuda-11-6-extension-problem/145830>`__\n   discussion). #### Windows-related problems: Make sure the\n   `cl.exe <https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options?view=msvc-170>`__\n   environment variable is correctly set.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/faebstn96/trainable-bilateral-filter-source",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "bilateralfilter_torch",
    "package_url": "https://pypi.org/project/bilateralfilter_torch/",
    "platform": null,
    "project_url": "https://pypi.org/project/bilateralfilter_torch/",
    "project_urls": {
      "Homepage": "https://github.com/faebstn96/trainable-bilateral-filter-source"
    },
    "release_url": "https://pypi.org/project/bilateralfilter_torch/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Trainable Bilateral Filter Layer (PyTorch)",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14613256,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c7ea5bf5b9f1855ee9fec57742f8fa68cfd870a46926efda874996717d031fd",
          "md5": "edcd29244b89c78ca1de91c6bf4c9032",
          "sha256": "0098740c00c6465325d620523211fb92cd33f64051e2ed483cc83a7da53acfe4"
        },
        "downloads": -1,
        "filename": "bilateralfilter_torch-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "edcd29244b89c78ca1de91c6bf4c9032",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17914,
        "upload_time": "2022-08-01T14:01:11",
        "upload_time_iso_8601": "2022-08-01T14:01:11.736313Z",
        "url": "https://files.pythonhosted.org/packages/5c/7e/a5bf5b9f1855ee9fec57742f8fa68cfd870a46926efda874996717d031fd/bilateralfilter_torch-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c7ea5bf5b9f1855ee9fec57742f8fa68cfd870a46926efda874996717d031fd",
        "md5": "edcd29244b89c78ca1de91c6bf4c9032",
        "sha256": "0098740c00c6465325d620523211fb92cd33f64051e2ed483cc83a7da53acfe4"
      },
      "downloads": -1,
      "filename": "bilateralfilter_torch-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "edcd29244b89c78ca1de91c6bf4c9032",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17914,
      "upload_time": "2022-08-01T14:01:11",
      "upload_time_iso_8601": "2022-08-01T14:01:11.736313Z",
      "url": "https://files.pythonhosted.org/packages/5c/7e/a5bf5b9f1855ee9fec57742f8fa68cfd870a46926efda874996717d031fd/bilateralfilter_torch-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}