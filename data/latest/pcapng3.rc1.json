{
  "info": {
    "author": "Alan Thompson",
    "author_email": "athomps@brocade.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Topic :: System :: Networking"
    ],
    "description": "Tool for reading/writing PCAPNG network packet capture files\n============================================================\n\nAlan Thompson, Brocade\nathomps@brocade.com\n\nPlease see the IETF document `PCAP Next Generation\n(pcapng) Capture File Format <https://pcapng.github.io/pcapng/>`_\n\nPlease also see the project `home page on GitLab <https://gitlab.com/netdev-americas/pcapng/>`_\n and `at PyPI - the Python Package Index <https://pypi.python.org/pypi/pcapng>`_\n\n===========\nQuick Start\n===========\n\nPCAPNG files must begin with a Section Header Block::\n\n    import pcapng.block\n    import pcapng.linktype\n    import pcapng.option\n\n    pcap_fp = open( 'data.pcapng', 'wb' );\n\n    shb_opts = [ pcapng.option.ShbHardware( \"Dell\" ),\n                 pcapng.option.ShbOs( \"Ubuntu\" ),\n                 pcapng.option.ShbUserAppl( \"IntelliJ Idea\" ) ]\n    shb_obj = pcapng.block.SectionHeaderBlock( shb_opts )\n    shb_packed_bytes = shb_obj.pack()\n    pcap_fp.write( shb_packed_bytes )  # must be 1st block\n\nwhere the options list may be omitted for this or any other block type. After the SHB, one or more\nInterface Description Blocks may be included::\n\n    idb_opts = [ pcapng.option.IdbName( interface_name ),\n                 pcapng.option.IdbDescription( \"primary interface on host\" ),\n                 pcapng.option.IdbSpeed( 12345 ) ]\n    idb_obj = pcapng.block.InterfaceDescBlock( linktype.LINKTYPE_ETHERNET, idb_opts )  # optional block\n    pcap_fp.write( idb_obj.pack() )\n\nAfter the SHB and any optional IDBs, one may include packet information as either Simple Packet\nBlocks or Enhanced Packet Blocks::\n\n        pkt_bytes = get_next_packet( socket_fd )\n        dbg_print( pkt_bytes )\n        pcap_fp.write( pcapng.block.SimplePacketBlock( pkt_bytes ).pack() )\n\n        pkt_bytes = get_next_packet( socket_fd )\n        dbg_print( pkt_bytes )\n\n        epb_opts = [ pcapng.option.EpbFlags(       [13,14,15,16] ),\n                     pcapng.option.EpbHash(        'just about any hash spec can go here' ),\n                     pcapng.option.EpbDropCount(   13 ) ]\n        pcap_fp.write( pcapng.block.EnhancedPacketBlock( 0, pkt_bytes, len(pkt_bytes), epb_opts ).pack() )\n\nBlocks may also be serialized & deserialized in bulk, as seen in the unit tests::\n\n  def test_blocks_lst():\n      blk_lst = [\n          # SHB must be 1st block\n          pcapng.block.SectionHeaderBlock( [ pcapng.option.ShbHardware( \"Dell\" ),\n                                             pcapng.option.ShbOs( \"Ubuntu\" ),\n                                             pcapng.option.ShbUserAppl( \"IntelliJ Idea\" ) ] ),\n          pcapng.block.InterfaceDescBlock( linktype.LINKTYPE_ETHERNET,\n                                          [ pcapng.option.IdbName( \"Carrier Pigeon\" ),\n                                            pcapng.option.IdbDescription( \"Something profound here...\" ),\n                                            pcapng.option.IdbIpv4Addr(     [192, 168, 13, 7], [255, 255, 255, 0] ),\n                                            pcapng.option.IdbOs( 'Ubuntu Xenial 16.04.1 LTS' ) ] ),\n          pcapng.block.SimplePacketBlock('abc'),\n          pcapng.block.EnhancedPacketBlock( 0, \"<<<Stand-in for actual packet data>>>\"  ),\n          pcapng.block.CustomBlockCopyable( pen.BROCADE_PEN, 'User-defined custom data' ),\n      ]\n      packed_bytes = pcapng.block.pack_all( blk_lst )\n\n      if False:\n          pcap_fp = open( 'block_list.pcapng', 'wb' )\n          pcap_fp.write( packed_bytes )\n          pcap_fp.close()\n\n      util.assert_block32_length( packed_bytes )\n      blk_lst_unpacked = pcapng.block.unpack_all( packed_bytes )\n      assert blk_lst == blk_lst_unpacked\n\n\nInstallation\n============\n\nInstall from the Python Package Index (PyPI)::\n\n    sudo pip install pcapng\n\n\nAPI Documentation\n=================\n\nPoint your browser to the included HTML documentation::\n\n    firefox doc/pcapng/index.html         # or similar (system dependent)\n\n\nSample Programs\n===============\n\nPlease see the sample programs::\n\n    isis_agent_pcapng.py    # real-time packet capture from your machine into a PCAPNG file\n    isis_demo_mrt.py        # same as above but save in Custom Block MRT format\n    pcapng_timing.py        # capure 1M sample packets\n\nThe program isis_agent_pcapng.py creates an output file ``data.pcapng``, which is `viewable in\nWireshark.  <https://www.wireshark.org/>`_\n\nThe program ``isis_demo_mrt.py`` creates two output files ``isis.mrt`` & ``isis.pcapng``. The first of\nthes is in raw MRT format and is not viewable by Wireshark.  For the second file, each raw MRT block\nis wrapped in a PCAPNG Custom Block.  The file may be loaded successfully in Wireshark; however,\nsince Wireshark doesn't understand the custom format, it produces a blank display.\n\nThe third program ``pcapng_timing.py`` writes 1 million dummy packets to a PCAPNG file. A flag selects\neither Simple Packet Block or Enhanced Packet Block output format.  Execution on a representative\ncomputer yields execution times of ~6 seconds and ~16 seconds for SPB and EPB formats, respectively.\n\n\nGenerating Documentation \n========================\n\nDocumentation uses the ``pdoc`` tool.  Note that pdoc generates documentation from the installed\n``pcapng`` package, not directly from thesource code.  To use::\n\n    sudo pip install pdoc       # install pdoc if not present\n    ./generate-docs.bash        # generate docs\n\nEndian Convention\n=================\n\n`The PCAPNG specification <https://pcapng.github.io/pcapng/>`_ mandates that data be saved in the\nnative endian format of the capturing machine. This avoids the possible need for byte-swapping\nduring data capture, which may aid in efficiency. However, a reader of a PCAPNG file is obligated to\nexamine the special BYTE_ORDER_MAGIC field of the Section Header Block in order to determine the\nendian convention used in generating the file.  Additionaly, since several PCAPNG files may be\nconcatenated together to form a larger, valid PCAPNG file, the reader must re-evaluate the endian\nconvention for each subsequent Section Header Block encountered.\n\nCurrently, this library does not implement endian-sensitive decoding logic, using native endian\nencoding for both writing and reading. The library thus assumes that both the capturing maching and\nthe reading machine share the same endian conventions.  The library may be extended in the future to\nimplement the endian-sensitive logic for reading PCAPNG written on foreign hosts.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/netdev-americas/pcapng",
    "keywords": "pcapng pcap networking monitoring",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pcapng3",
    "package_url": "https://pypi.org/project/pcapng3/",
    "platform": "",
    "project_url": "https://pypi.org/project/pcapng3/",
    "project_urls": {
      "Homepage": "https://gitlab.com/netdev-americas/pcapng"
    },
    "release_url": "https://pypi.org/project/pcapng3/0.1.23/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tool for reading/writing PCAPNG network packet capture files.",
    "version": "0.1.23",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5437754,
  "releases": {
    "0.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20666e73824b2d78015eb9711846aa8e6eb9fb82b7d2acfa5fc666e4c7d23674",
          "md5": "8afb5e5c173cd3ce8f4b10d844ec1d81",
          "sha256": "02f2764bd2d7adc49eae6b29fb1cd7d354cfabe56c092fbab5c2bafe0965e31e"
        },
        "downloads": -1,
        "filename": "pcapng3-0.1.23.tar.gz",
        "has_sig": false,
        "md5_digest": "8afb5e5c173cd3ce8f4b10d844ec1d81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29435,
        "upload_time": "2019-06-23T16:37:33",
        "upload_time_iso_8601": "2019-06-23T16:37:33.246773Z",
        "url": "https://files.pythonhosted.org/packages/20/66/6e73824b2d78015eb9711846aa8e6eb9fb82b7d2acfa5fc666e4c7d23674/pcapng3-0.1.23.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20666e73824b2d78015eb9711846aa8e6eb9fb82b7d2acfa5fc666e4c7d23674",
        "md5": "8afb5e5c173cd3ce8f4b10d844ec1d81",
        "sha256": "02f2764bd2d7adc49eae6b29fb1cd7d354cfabe56c092fbab5c2bafe0965e31e"
      },
      "downloads": -1,
      "filename": "pcapng3-0.1.23.tar.gz",
      "has_sig": false,
      "md5_digest": "8afb5e5c173cd3ce8f4b10d844ec1d81",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29435,
      "upload_time": "2019-06-23T16:37:33",
      "upload_time_iso_8601": "2019-06-23T16:37:33.246773Z",
      "url": "https://files.pythonhosted.org/packages/20/66/6e73824b2d78015eb9711846aa8e6eb9fb82b7d2acfa5fc666e4c7d23674/pcapng3-0.1.23.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}