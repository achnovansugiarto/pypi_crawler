{
  "info": {
    "author": "Yuheng Ma",
    "author_email": "yma@ruc.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Nearest Neighbor Density Estimation (NNDensity)\r\n\r\nThe package implements six nearest neighbor based density estimation method and provides efficient tools for density estimation research. See paper/paper.md for more descriptions and details in methodology and literature.\r\n\r\n## Contents\r\n\r\n- [Installation](#Installation)\r\n- [Basic Usage](#Basic-Usage)\r\n  + [Data Generation](Data-Generation)\r\n  + [Density Estimation](#Density-Estimation)\r\n  + [Visualization](#Visualization)\r\n- [Reference](Reference)\r\n\r\n## Installation\r\n\r\nSince *NNDensity* is based on *Cython*, installation requires c/c++ compiler. Users can check by \r\n\r\n```bash\r\ngcc -v\r\ng++ -v\r\n```\r\n\r\nto see their version. For Linux, users can install gcc/g++ by *apt*. For macOS, refer to *Xcode*. For Windows, refer to *Microsoft c++ building tools*. \r\n\r\n### Via PypI\r\n\r\n```bash\r\npip install NNDensity\r\n```\r\n\r\n### Via GitHub\r\n\r\n```bash\r\npip install git+https://github.com/Karlmyh/NNDensity.git\r\n```\r\n\r\n\r\n### Mannul Install\r\n  > \r\n```bash\r\ngit clone git@github.com:Karlmyh/NNDensity.git\r\ncd NNDensity \r\npython setup.py install\r\n```\r\n\r\n\r\n## Basic Usage\r\n\r\n### Data Generation\r\n\r\nDensity generation tools. Below is a show case using a mixture distribution.\r\n\r\n```python\r\nfrom NNDensity import MultivariateNormalDistribution, MixedDistribution, ExponentialDistribution\r\n# setup\r\ndim=2\r\ndensity1 = ExponentialDistribution(lamda = np.ones(dim)*0.5) \r\ndensity2 = MultivariateNormalDistribution(mean = np.zeros(dim)-1.5, cov = np.diag(np.ones(dim)*0.3)) \r\ndensity_seq = [density1, density2]\r\nprob_seq = [0.4, 0.6]\r\ndensitymix = MixedDistribution(density_seq, prob_seq)\r\n\r\n# generate 10 samples and return their pdf\r\nsamples, samples_pdf = densitymix.generate(10)\r\nsamples\r\n\r\n# evaluate pdf at given samples\r\ndensitymix.density(samples)\r\n\r\n# compare with true pdf\r\n(samples_pdf == samples).all()\r\n```\r\n```python\r\nOut[1]:  array([[-2.23087816, -1.08521314],\r\n       [-1.03424594, -1.24327987],\r\n       [-2.02698363, -1.63201056],\r\n       [ 1.43021832,  1.51448518],\r\n       [ 1.58820377,  1.8541296 ],\r\n       [-0.88802267, -2.398429  ],\r\n       [-1.26067249, -2.12988644],\r\n       [-1.92476226, -2.0167295 ],\r\n       [-2.0035588 , -1.35662414],\r\n       [-1.46406062, -1.9693262 ]])\r\nOut[2]: True\r\n```\r\n\r\n\r\n\r\n### Density Estimation\r\n\r\nAdopt AWNN model to estimate the density. \r\n\r\n```python\r\n###### using AWNN to estimate density\r\nfrom NNDensity import AWNN\r\n\r\n# generate samples\r\nX_train, pdf_X_train =densitymix.generate(1000)\r\nX_test, pdf_X_test =densitymix.generate(1000)\r\n\r\n# choose parameter C=0.1\r\nmodel_AWNN=AWNN(C=.1).fit(X_train)\r\n# output is log scaled\r\nest_AWNN=np.exp(model_AWNN.predict(X_test))\r\n# compute the mean absolute error\r\nnp.abs(est_AWNN-pdf_X_test).mean()\r\n```\r\n```python\r\nOut[3]:  0.09148487940943466\r\n```\r\n\r\nAutomatically select parameter using *GridSearchCV* to improve result.\r\n\r\n```python\r\nfrom sklearn.model_selection import GridSearchCV\r\n\r\n# generate samples\r\nX_train, pdf_X_train =densitymix.generate(1000)\r\nX_test, pdf_X_test =densitymix.generate(1000)\r\n\r\n# select parameter grid\r\nparameters={\"k\":[int(i*1000) for i in [0.01,0.02,0.05,0.1,0.2,0.5]]}\r\n# use all available cpu, use 10 fold cross validation\r\ncv_model_KNN=GridSearchCV(estimator=KNN(),param_grid=parameters,n_jobs=-1,cv=10)\r\n_=cv_model_KNN.fit(X_train)\r\nmodel_KNN=cv_model_KNN.best_estimator_\r\n    \r\n# output is log scaled\r\nest_KNN=np.exp(model_KNN.predict(X_test))\r\n# compute the mean absolute error\r\nnp.abs(est_KNN-pdf_X_test).mean()\r\n\r\n```\r\n```python\r\nOut[4]:  0.055937476261628344\r\n```\r\n\r\n\r\n\r\n\r\n### Visualization\r\n\r\nFrequently used visualization plots for density estimation research.\r\n\r\n```python\r\n###### 3d prediction surface using WKNN\r\nfrom NNDensity import contour3d\r\n\r\n# generate samples\r\ndim=2\r\ndensity1 = MultivariateNormalDistribution(mean = np.zeros(dim)+1.5, cov = np.diag(np.ones(dim)*0.4)) \r\ndensity2 = MultivariateNormalDistribution(mean = np.zeros(dim)-1.5, cov = np.diag(np.ones(dim)*0.7)) \r\ndensity_seq = [density1, density2]\r\nprob_seq = [0.4, 0.6]\r\ndensitymix = MixedDistribution(density_seq, prob_seq)\r\nX_train, pdf_X_train =densitymix.generate(1000)\r\n\r\nmodel_plot=contour3d(X_train,method=\"WKNN\",k=100)\r\nmodel_plot.estimation()\r\nfig=model_plot.make_plot()\r\n```\r\n\r\n<img src=\"https://github.com/Karlmyh/NNDensity/blob/main/paper/readme_example_1.png\" width=\"300\">\r\n\r\n\r\n\r\n\r\n```python\r\n###### 2d prediction contour using BKNN\r\n\r\nfrom NNDensity import contour2d\r\nfrom sklearn.model_selection import GridSearchCV\r\n\r\n# generate samples\r\nX_train, pdf_X_train =densitymix.generate(1000)\r\n\r\nmodel_plot=contour2d(X_train,method=\"BKNN\",C=10)\r\nmodel_plot.estimation()\r\nfig=model_plot.make_plot()\r\n```\r\n\r\n<img src=\"https://github.com/Karlmyh/NNDensity/blob/main/paper/readme_example_2.png\" width=\"400\">\r\n\r\n```python\r\n###### prediction curve plot\r\n\r\n# generate samples\r\nX_train, pdf_X_train =densitymix.generate(1000)\r\n\r\n\r\nkargs_seq= [{\"k\":100},{\"k\":100},{\"k\":100} ]\r\nmodel_plot=lineplot(X_train,method_seq=[\"KNN\", \"WKNN\", \"TKNN\"],true_density_obj=densitymix,kargs_seq=kargs_seq)\r\nfig=model_plot.plot()\r\n\r\nkargs_seq= [{\"C\":0.9},{\"C\":1},{\"C\":1} ]\r\nmodel_plot=lineplot(X_train,method_seq=[\"AKNN\", \"BKNN\", \"AWNN\"],true_density_obj=densitymix,kargs_seq=kargs_seq)\r\nfig=model_plot.plot()\r\n\r\n```\r\n\r\n<p float=\"left\">\r\n  <img src=\"https://github.com/Karlmyh/NNDensity/blob/main/paper/example_1.png\" width=\"300\" />\r\n  <img src=\"https://github.com/Karlmyh/NNDensity/blob/main/paper/example_2.png\" width=\"300\" /> \r\n</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Reference\r\n\r\n*NNDensity* utilizes tools from *numpy*, *matplotlib*, *scipy*, *jupyter notebooks*, *scikit-learn*, *cython* and *numba*. Also, large part of KD tree implementation was borrowed from *scikit-learn*. For specific citations, see papers/paper.md. \r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Karlmyh/NNDensity",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NNTRY",
    "package_url": "https://pypi.org/project/NNTRY/",
    "platform": null,
    "project_url": "https://pypi.org/project/NNTRY/",
    "project_urls": {
      "Homepage": "https://github.com/Karlmyh/NNDensity"
    },
    "release_url": "https://pypi.org/project/NNTRY/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Nearest Neighbor Density Estimation",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15661780,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82bd9676217f1772f18ed31ffe46b188d263fc5291be7ecbd00fc5e7ad4174fb",
          "md5": "7ec654724ccfe325b0b1b2e13695ac29",
          "sha256": "06f1165a5fa142512affbd976b1c83723e485a5100bf1f9b23984610a3e2802a"
        },
        "downloads": -1,
        "filename": "NNTRY-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ec654724ccfe325b0b1b2e13695ac29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 214840,
        "upload_time": "2022-11-04T03:47:53",
        "upload_time_iso_8601": "2022-11-04T03:47:53.797753Z",
        "url": "https://files.pythonhosted.org/packages/82/bd/9676217f1772f18ed31ffe46b188d263fc5291be7ecbd00fc5e7ad4174fb/NNTRY-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "321ecf6711844fee51cfea89eebfaf4b323807118bcd70b48a2f919aea5ef652",
          "md5": "b5fc8ece72b65b5febed9c0678457ede",
          "sha256": "f9455d90c93fe5b13614103ccda383cd7e91968e124a45bdf9f794d65daa4142"
        },
        "downloads": -1,
        "filename": "NNTRY-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b5fc8ece72b65b5febed9c0678457ede",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 214785,
        "upload_time": "2022-11-05T01:39:15",
        "upload_time_iso_8601": "2022-11-05T01:39:15.101721Z",
        "url": "https://files.pythonhosted.org/packages/32/1e/cf6711844fee51cfea89eebfaf4b323807118bcd70b48a2f919aea5ef652/NNTRY-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b879f431dae3a5035abda244eada0fea23475fb4a65289e189353c3eb7a0e13",
          "md5": "3bbd6232330df751bfd17c43db304bf4",
          "sha256": "1e63bfb67d012daa31e38b92f87c0f8e1e32b23f9fa17361ed249018b656c8ce"
        },
        "downloads": -1,
        "filename": "NNTRY-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3bbd6232330df751bfd17c43db304bf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 214799,
        "upload_time": "2022-11-05T01:44:30",
        "upload_time_iso_8601": "2022-11-05T01:44:30.907131Z",
        "url": "https://files.pythonhosted.org/packages/1b/87/9f431dae3a5035abda244eada0fea23475fb4a65289e189353c3eb7a0e13/NNTRY-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b879f431dae3a5035abda244eada0fea23475fb4a65289e189353c3eb7a0e13",
        "md5": "3bbd6232330df751bfd17c43db304bf4",
        "sha256": "1e63bfb67d012daa31e38b92f87c0f8e1e32b23f9fa17361ed249018b656c8ce"
      },
      "downloads": -1,
      "filename": "NNTRY-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3bbd6232330df751bfd17c43db304bf4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 214799,
      "upload_time": "2022-11-05T01:44:30",
      "upload_time_iso_8601": "2022-11-05T01:44:30.907131Z",
      "url": "https://files.pythonhosted.org/packages/1b/87/9f431dae3a5035abda244eada0fea23475fb4a65289e189353c3eb7a0e13/NNTRY-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}