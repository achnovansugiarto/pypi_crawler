{
  "info": {
    "author": "Intel Corporation",
    "author_email": "openvino_pushbot@intel.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Optimum OpenVINO\n\n[![OpenVINO Runtime](https://github.com/dkurt/optimum-openvino/actions/workflows/test-openvino.yml/badge.svg?branch=main)](https://github.com/dkurt/optimum-openvino/actions/workflows/test-openvino.yml) [![NNCF](https://github.com/dkurt/optimum-openvino/actions/workflows/test-nncf.yml/badge.svg?branch=main)](https://github.com/dkurt/optimum-openvino/actions/workflows/test-nncf.yml)\n\nOptimum OpenVINO is an extension for [Optimum](https://github.com/huggingface/optimum) library which brings [Intel OpenVINO](https://github.com/openvinotoolkit/openvino) backend for [Hugging Face Transformers](https://github.com/huggingface/transformers) :hugs:.\n\nThis project provides multiple APIs to enable different tools:\n* [OpenVINO Runtime](#openvino-runtime)\n* [Neural Network Compression Framework (NNCF)](#nncf)\n* [Post-Training Optimization Tool (POT)](#pot)\n\n## Install\n\nInstall only runtime:\n```bash\npip install optimum-openvino\n```\n\nor with all dependencies:\n```bash\npip install optimum-openvino[all]\n```\n\n## OpenVINO Runtime\n\nThis module provides an inference API for Hugging Face models. There are options to use models with PyTorch\\*, TensorFlow\\* pretrained weights or use native OpenVINO IR format (a pair of files `ov_model.xml` and `ov_model.bin`).\n\nTo use OpenVINO backend, import one of the `AutoModel` classes with `OV` prefix. Specify a model name or local path in `from_pretrained` method.\n\n```python\nfrom optimum.intel.openvino import OVAutoModel\n\n# PyTorch trained model with OpenVINO backend\nmodel = OVAutoModel.from_pretrained(<name_or_path>, from_pt=True)\n\n# TensorFlow trained model with OpenVINO backend\nmodel = OVAutoModel.from_pretrained(<name_or_path>, from_tf=True)\n\n# Initialize a model from OpenVINO IR\nmodel = OVAutoModel.from_pretrained(<name_or_path>)\n```\n\n## NNCF\n\n[NNCF](https://github.com/openvinotoolkit/nncf) is used for model training with applying such features like quantization, pruning. To enable NNCF in you training pipeline do the following steps:\n\n1. Import `NNCFAutoConfig`:\n\n```python\nfrom optimum.intel.nncf import NNCFAutoConfig\n```\n\n> **NOTE**: `NNCFAutoConfig` must be imported before `transformers` to make magic work\n\n2. Initialize a config from `.json` file:\n\n```python\nnncf_config = NNCFAutoConfig.from_json(training_args.nncf_config)\n```\n\n3. Pass a config to `Trainer` object. In example,\n\n```python\ntrainer = QuestionAnsweringTrainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset if training_args.do_train else None,\n    eval_dataset=eval_dataset if training_args.do_eval else None,\n    eval_examples=eval_examples if training_args.do_eval else None,\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n    post_process_function=post_processing_function,\n    compute_metrics=compute_metrics,\n    nncf_config=nncf_config,\n)\n```\n\nTraining [examples](https://github.com/huggingface/transformers/tree/master/examples/pytorch) can be found in Transformers library.\nNNCF configs are published in [config](./optimum/intel/nncf/configs) folder. Add `--nncf_config` with a path to corresponding config when train your model. More command line examples [here](https://github.com/openvinotoolkit/nncf/tree/develop/third_party_integration/huggingface_transformers).\n\n`python examples/pytorch/token-classification/run_ner.py --model_name_or_path bert-base-cased --dataset_name conll2003 --output_dir bert_base_cased_conll_int8 --do_train --do_eval --save_strategy epoch --evaluation_strategy epoch --nncf_config nncf_bert_config_conll.json`\n\nTo use NNCF component, install the package with `[nncf]` or `[all]` extras:\n\n```bash\npip install optimum-openvino[nncf]\n```\n\n## POT\n\nTBD\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dkurt/optimum-openvino",
    "keywords": "transformers,quantization,pruning,training,intel,openvino",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "optimum-openvino",
    "package_url": "https://pypi.org/project/optimum-openvino/",
    "platform": "",
    "project_url": "https://pypi.org/project/optimum-openvino/",
    "project_urls": {
      "Homepage": "https://github.com/dkurt/optimum-openvino"
    },
    "release_url": "https://pypi.org/project/optimum-openvino/0.0.2/",
    "requires_dist": [
      "transformers",
      "openvino",
      "openvino-dev[onnx] ; extra == 'all'",
      "nncf ; extra == 'all'",
      "transformers (<4.16.0) ; extra == 'all'",
      "openvino-dev[onnx] ; extra == 'nncf'",
      "nncf ; extra == 'nncf'",
      "transformers (<4.16.0) ; extra == 'nncf'"
    ],
    "requires_python": "",
    "summary": "Intel OpenVINO extension for Hugging Face Transformers",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12933598,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8642503bf80c79391f35a576956bb5e861fd0be262e3c9d9337727f5687a86a4",
          "md5": "7b5b61a2079c3d7eb51fed73fc50d64b",
          "sha256": "0f4a8296eb2ce6eb6d249d52f6cbb66d9a186488ff91102b2364960b456bf297"
        },
        "downloads": -1,
        "filename": "optimum_openvino-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b5b61a2079c3d7eb51fed73fc50d64b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21886,
        "upload_time": "2022-01-12T06:01:51",
        "upload_time_iso_8601": "2022-01-12T06:01:51.182765Z",
        "url": "https://files.pythonhosted.org/packages/86/42/503bf80c79391f35a576956bb5e861fd0be262e3c9d9337727f5687a86a4/optimum_openvino-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "478371c2d01d74ea472c897971a1d15a1c30d5ca005965ddc61674ceefd07792",
          "md5": "e505c1bd1541f8e24e41904a252a8465",
          "sha256": "ed83e7837b7c6ec5b2d6ef6f2c2c7654f98e7f0195ccccce0e64667707d6821f"
        },
        "downloads": -1,
        "filename": "optimum_openvino-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e505c1bd1541f8e24e41904a252a8465",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23740,
        "upload_time": "2022-02-18T11:42:48",
        "upload_time_iso_8601": "2022-02-18T11:42:48.614960Z",
        "url": "https://files.pythonhosted.org/packages/47/83/71c2d01d74ea472c897971a1d15a1c30d5ca005965ddc61674ceefd07792/optimum_openvino-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "061e68623efe6212bbce4813f1b4b9c0fb5753b0ffab5f217297b6cb3b0e960e",
          "md5": "77de5474005998639ee4366a6963e1c3",
          "sha256": "6afd3c178de863fef6b7bdd85a821b00fa96a7593364d4a596eeea6cb6c82d3d"
        },
        "downloads": -1,
        "filename": "optimum_openvino-0.0.2.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77de5474005998639ee4366a6963e1c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23102,
        "upload_time": "2022-01-26T14:51:49",
        "upload_time_iso_8601": "2022-01-26T14:51:49.952066Z",
        "url": "https://files.pythonhosted.org/packages/06/1e/68623efe6212bbce4813f1b4b9c0fb5753b0ffab5f217297b6cb3b0e960e/optimum_openvino-0.0.2.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "478371c2d01d74ea472c897971a1d15a1c30d5ca005965ddc61674ceefd07792",
        "md5": "e505c1bd1541f8e24e41904a252a8465",
        "sha256": "ed83e7837b7c6ec5b2d6ef6f2c2c7654f98e7f0195ccccce0e64667707d6821f"
      },
      "downloads": -1,
      "filename": "optimum_openvino-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e505c1bd1541f8e24e41904a252a8465",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23740,
      "upload_time": "2022-02-18T11:42:48",
      "upload_time_iso_8601": "2022-02-18T11:42:48.614960Z",
      "url": "https://files.pythonhosted.org/packages/47/83/71c2d01d74ea472c897971a1d15a1c30d5ca005965ddc61674ceefd07792/optimum_openvino-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}