{
  "info": {
    "author": "Daniel Povey",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<div align=\"center\">\n<img src=\"./docs/logo.png\" width=376>\n\n[![Documentation Status](https://readthedocs.org/projects/k2/badge/?version=latest)](https://k2.readthedocs.io/en/latest/?badge=latest)\n\n</div>\n\n# k2\n\nThe vision of k2 is to be able to seamlessly integrate Finite State Automaton\n(FSA) and Finite State Transducer (FST) algorithms into autograd-based machine\nlearning toolkits like PyTorch and TensorFlow.  For speech recognition\napplications, this should make it easy to interpolate and combine various\ntraining objectives such as cross-entropy, CTC and MMI and to jointly optimize a\nspeech recognition system with multiple decoding passes including lattice\nrescoring and confidence estimation.  We hope k2 will have many other\napplications as well.\n\nOne of the key algorithms that we want to make efficient in the short term is\npruned composition of a generic FSA with a \"dense\" FSA (i.e. one that\ncorresponds to log-probs of symbols at the output of a neural network).  This\ncan be used as a fast implementation of decoding for ASR, and for CTC and\nLF-MMI training.  This won't give a direct advantage in terms of Word Error Rate when\ncompared with existing technology; but the point is to do this in a much more\ngeneral and extensible framework to allow further development of ASR technology.\n\n## Implementation\n\n A few key points on our implementation strategy.\n\n Most of the code is in C++ and CUDA.  We implement a templated class `Ragged`,\n which is quite like TensorFlow's `RaggedTensor` (actually we came up with the\n design independently, and were later told that TensorFlow was using the same\n ideas).  Despite a close similarity at the level of data structures, the\n design is quite different from TensorFlow and PyTorch.  Most of the time we\n don't use composition of simple operations, but rely on C++11 lambdas defined\n directly in the C++ implementations of algorithms.  The code in these lambdas operate\n directly on data pointers and, if the backend is CUDA, they can run in parallel\n for each element of a tensor.  (The C++ and CUDA code is mixed together and the\n CUDA kernels get instantiated via templates).\n\n It is difficult to adequately describe what we are doing with these `Ragged`\n objects without going in detail through the code.  The algorithms look very\n different from the way you would code them on CPU because of the need to avoid\n sequential processing.  We are using coding patterns that make the most\n expensive parts of the computations \"embarrassingly parallelizable\"; the only\n somewhat nontrivial CUDA operations are generally reduction-type operations\n such as exclusive-prefix-sum, for which we use NVidia's `cub` library.  Our\n design is not too specific to the NVidia hardware and the bulk of the code we\n write is fairly normal-looking C++; the nontrivial CUDA programming is mostly\n done via the cub library, parts of which we wrap with our own convenient\n interface.\n\n The Finite State Automaton object is then implemented as a Ragged tensor templated\n on a specific data type (a struct representing an arc in the automaton).\n\n## Autograd\n\n If you look at the code as it exists now, you won't find any references to\n autograd.  The design is quite different to TensorFlow and PyTorch (which is\n why we didn't simply extend one of those toolkits).  Instead of making autograd\n come from the bottom up (by making individual operations differentiable) we are\n implementing it from the top down, which is much more efficient in this case\n (and will tend to have better roundoff properties).\n\n An example: suppose we are finding the best path of an FSA, and we need\n derivatives.  We implement this by keeping track of, for each arc in the output\n best-path, which input arc it corresponds to.  (For more complex algorithms an arc\n in the output might correspond to a sum of probabilities of a list of input arcs).\n We can make this compatible with PyTorch/TensorFlow autograd at the Python level,\n by, for example, defining a Function class in PyTorch that remembers this relationship\n between the arcs and does the appropriate (sparse) operations to propagate back the\n derivatives w.r.t. the weights.\n\n## Current state of the code\n\n A lot of the code is still unfinished (Sep 11, 2020).\n We finished the CPU versions of many algorithms and this code is in `k2/csrc/host/`;\n however, after that we figured out how to implement things on the GPU and decided\n to change the interfaces so the CPU and GPU code had a more unified interface.\n Currently in `k2/csrc/` we have more GPU-oriented implementations (although\n these algorithms will also work on CPU).  We had almost finished the Python\n wrapping for the older code, in the `k2/python/` subdirectory, but we decided not to\n release code with that wrapping because it would have had to be reworked to be compatible\n with our GPU algorithms.  Instead we will use the interfaces drafted in `k2/csrc/`\n e.g. the Context object (which encapsulates things like memory managers from external\n toolkits) and the Tensor object which can be used to wrap tensors from external toolkits;\n and wrap those in Python (using pybind11).  The code in host/ will eventually\n be either deprecated, rewritten or wrapped with newer-style interfaces.\n\n## Plans for initial release\n\n We hope to get the first version working in early October.  The current\n short-term aim is to finish the GPU implementation of pruned composition of a\n normal FSA with a dense FSA, which is the same as decoder search in speech\n recognition and can be used to implement CTC training and lattice-free MMI (LF-MMI) training.  The\n proof-of-concept that we will release initially is something that's like CTC\n but allowing more general supervisions (general FSAs rather than linear\n sequences).  This will work on GPU.  The same underlying code will support\n LF-MMI so that would be easy to implement soon after.  We plan to put\n example code in a separate repository.\n\n## Plans after initial release\n\n We will then gradually implement more algorithms in a way that's compatible\n with the interfaces in `k2/csrc/`.  Some of them will be CPU-only to start\n with.  The idea is to eventually have very rich capabilities for operating on\n collections of sequences, including methods to convert from a lattice to a\n collection of linear sequences and back again (for purposes of neural language\n model rescoring, neural confidence estimation and the like).\n\n## Quick start\n\nWant to try it out without installing anything? We have setup a [Google Colab][1].\n\nCaution: k2 is not nearly ready for actual use!  We are still coding the core\nalgorithms, and hope to have an early version working by early October.\n\n[1]: https://colab.research.google.com/drive/1qbHUhNZUX7AYEpqnZyf29Lrz2IPHBGlX?usp=sharing\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/open-speech/sequeender",
    "keywords": "FSA,Speech,Machine earning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "k2-nailuo",
    "package_url": "https://pypi.org/project/k2-nailuo/",
    "platform": "",
    "project_url": "https://pypi.org/project/k2-nailuo/",
    "project_urls": {
      "Documentation": "https://github.com/open-speech/sequeender",
      "Homepage": "https://github.com/open-speech/sequeender",
      "Repository": "https://github.com/open-speech/sequeender"
    },
    "release_url": "https://pypi.org/project/k2-nailuo/0.1.3/",
    "requires_dist": [
      "torch (>=1.6.0,<2.0.0)",
      "graphviz (>=0.14.1,<0.15.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "FSA/FST algorithms, intended to (eventually) be interoperable with PyTorch and similar.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8719666,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2077c66af81c6d4ab06fd94aab739bcf479bf7b74e683016b8a551b8d789dc87",
          "md5": "6417b8e6c783557f57ba04486c1c8f69",
          "sha256": "1a06b49d85110d7cc551426531936f32168a6ad4ba3598def9cf7f6386a753bc"
        },
        "downloads": -1,
        "filename": "k2_nailuo-0.1.2-cp38-cp38-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "6417b8e6c783557f57ba04486c1c8f69",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7,<4.0",
        "size": 4188916,
        "upload_time": "2020-11-19T14:58:53",
        "upload_time_iso_8601": "2020-11-19T14:58:53.694700Z",
        "url": "https://files.pythonhosted.org/packages/20/77/c66af81c6d4ab06fd94aab739bcf479bf7b74e683016b8a551b8d789dc87/k2_nailuo-0.1.2-cp38-cp38-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14c9ec210fc012aa31c9723b21b692b3cbb1837e32285987c6a2a487603b070e",
          "md5": "80ba8169e839dc4a5cd9b30bfbff3a1f",
          "sha256": "7e350f4979aff748cdc8d8d23948ee2cd3463e79dab04e40c03e97fefe60ace5"
        },
        "downloads": -1,
        "filename": "k2-nailuo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "80ba8169e839dc4a5cd9b30bfbff3a1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 156186,
        "upload_time": "2020-11-19T14:58:51",
        "upload_time_iso_8601": "2020-11-19T14:58:51.039629Z",
        "url": "https://files.pythonhosted.org/packages/14/c9/ec210fc012aa31c9723b21b692b3cbb1837e32285987c6a2a487603b070e/k2-nailuo-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7114a0af92339150b3e8f85044bc1431c6b56d6891a3d31d082b4ecba289e7f8",
          "md5": "c2d3889425bed52f9ce79518cf769718",
          "sha256": "d870a8c096c29f008770c358518159a064288f027ac16456376542f3010de92b"
        },
        "downloads": -1,
        "filename": "k2_nailuo-0.1.3-cp38-cp38-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c2d3889425bed52f9ce79518cf769718",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.7,<4.0",
        "size": 4420669,
        "upload_time": "2020-11-22T11:40:51",
        "upload_time_iso_8601": "2020-11-22T11:40:51.997747Z",
        "url": "https://files.pythonhosted.org/packages/71/14/a0af92339150b3e8f85044bc1431c6b56d6891a3d31d082b4ecba289e7f8/k2_nailuo-0.1.3-cp38-cp38-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e128577472f6c7991b04819ca53a1795ad89a57ea733c8629ee836d14d7169fa",
          "md5": "bb099aaa7d59e94462d3219d97b183bc",
          "sha256": "13942be25d0cdf5b2f2ecf8a4672e958fe5e582181546c5d1da2995617a1267f"
        },
        "downloads": -1,
        "filename": "k2-nailuo-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb099aaa7d59e94462d3219d97b183bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 145378,
        "upload_time": "2020-11-22T11:40:43",
        "upload_time_iso_8601": "2020-11-22T11:40:43.595991Z",
        "url": "https://files.pythonhosted.org/packages/e1/28/577472f6c7991b04819ca53a1795ad89a57ea733c8629ee836d14d7169fa/k2-nailuo-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7114a0af92339150b3e8f85044bc1431c6b56d6891a3d31d082b4ecba289e7f8",
        "md5": "c2d3889425bed52f9ce79518cf769718",
        "sha256": "d870a8c096c29f008770c358518159a064288f027ac16456376542f3010de92b"
      },
      "downloads": -1,
      "filename": "k2_nailuo-0.1.3-cp38-cp38-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c2d3889425bed52f9ce79518cf769718",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.7,<4.0",
      "size": 4420669,
      "upload_time": "2020-11-22T11:40:51",
      "upload_time_iso_8601": "2020-11-22T11:40:51.997747Z",
      "url": "https://files.pythonhosted.org/packages/71/14/a0af92339150b3e8f85044bc1431c6b56d6891a3d31d082b4ecba289e7f8/k2_nailuo-0.1.3-cp38-cp38-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e128577472f6c7991b04819ca53a1795ad89a57ea733c8629ee836d14d7169fa",
        "md5": "bb099aaa7d59e94462d3219d97b183bc",
        "sha256": "13942be25d0cdf5b2f2ecf8a4672e958fe5e582181546c5d1da2995617a1267f"
      },
      "downloads": -1,
      "filename": "k2-nailuo-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bb099aaa7d59e94462d3219d97b183bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 145378,
      "upload_time": "2020-11-22T11:40:43",
      "upload_time_iso_8601": "2020-11-22T11:40:43.595991Z",
      "url": "https://files.pythonhosted.org/packages/e1/28/577472f6c7991b04819ca53a1795ad89a57ea733c8629ee836d14d7169fa/k2-nailuo-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}