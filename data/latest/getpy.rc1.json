{
  "info": {
    "author": "Adam Moyer",
    "author_email": "atom.moyer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# GetPy - A Vectorized Python Dict/Set\n\nThe goal of GetPy is to provide the highest performance python dict/set that integrates into the python scientific ecosystem.\n\n## Installation\n`pip install getpy`\n\nIf you have issues, feel free to make an issue. You can also build the package from source by cloning the repository and running `python setup.py install`.\n\n## About\nGetPy is a thin binding to the Parallel Hashmap (https://github.com/greg7mdp/parallel-hashmap.git) which is the current state of the art unordered map/set with minimal memory overhead and fast runtime speed. The binding layer is supported by PyBind11 (https://github.com/pybind/pybind11.git) which is fast to compile and simple to extend.\n\n## How To Use\nThe `gp.Dict` and `gp.Set` objects are designed to maintain a similar interface to the corresponding standard python objects. There are some key differences though, which are necessary for vectorization and other performance considerations.\n\n1) `gp.Dict.__init__` has three arguments `key_type`, `value_type`, and `default_value`. The type arguments are define which compiled data structure will be used under the hood, and the full list of preset combinations of `np.dtype`s is found with `gp.dict_types`. You can also specify a `default_value` at construction which must be castable to the `value_type`. This is the value returned by the dictionary if a key is not found.\n\n2) All of `getpy.Dict` methods support a vectorized interface. Therefore, methods like `gp.Dict.__getitem__`, `gp.Dict.__setitem__`, and `gp.Dict.__delitem__` can be performed with an `np.ndarray`.  That allows the performance critical for-loop to happen within the compiled c++. Note that some dunder methods cannot be vectorized such as `__contains__`. Therefore, some keywords like `in` do not behave as expected. Those methods are renamed without the double underscores to note their deviation from the standard interface.\n\n3) If a key does not exist, `gp.Dict.__getitem__` will return the `default_value`. If you do not specify the `default_value`, it will default to the default constructor of your data type (all 0 bits). If you would like to know the difference between a key that does not exist and a key that returns the default value, you should first run `gp.contains` on your key/array of keys, and then retrieve values corresponding to keys that exist.\n\n4) There is also a `gp.MultiDict` object. This object stores multiple unique values per key.\n\n## Examples\n\n### Simple Example\n```python\nimport numpy as np\nimport getpy as gp\n\nkey_type = np.dtype('u8')\nvalue_type = np.dtype('u8')\n\nkeys = np.random.randint(1, 1000, size=10**2, dtype=key_type)\nvalues = np.random.randint(1, 1000, size=10**2, dtype=value_type)\n\ngp_dict = gp.Dict(key_type, value_type)\ngp_dict[keys] = values\n```\n\n### Default Example\n```python\nimport numpy as np\nimport getpy as gp\n\nkey_type = np.dtype('u8')\nvalue_type = np.dtype('u8')\n\nkeys = np.random.randint(1, 1000, size=10**2, dtype=key_type)\nvalues = np.random.randint(1, 1000, size=10**2, dtype=value_type)\n\ngp_dict = gp.Dict(key_type, value_type, default_value=42)\ngp_dict[keys] = values\n\nrandom_keys = np.random.randint(1, 1000, size=500, dtype=key_type)\nrandom_values = gp_dict[random_keys]\n```\n\n### Byteset Example\n```python\nimport numpy as np\nimport getpy as gp\n\nkey_type = np.dtype('S8')\nvalue_type = np.dtype('S8')\n\nkeys = np.array([np.random.bytes(8) for i in range(10**2)], dtype=key_type)\nvalues = np.array([np.random.bytes(8) for i in range(10**2)], dtype=value_type)\n\ngp_dict = gp.Dict(key_type, value_type)\ngp_dict[keys] = values\n```\n\n### Multidimensional Example\n```python\nimport numpy as np\nimport getpy as gp\n\nkey_type = np.dtype('u8')\nvalue_type = np.dtype('u8')\n\nkeys = np.random.randint(1, 1000, size=10**2, dtype=key_type).reshape(10,10)\nvalues = np.random.randint(1, 1000, size=10**2, dtype=value_type).reshape(10,10)\n\ngp_dict = gp.Dict(key_type, value_type)\ngp_dict[keys] = values\n```\n\n### Serialization Example\n```python\nimport numpy as np\nimport getpy as gp\n\nkey_type = np.dtype('u8')\nvalue_type = np.dtype('u8')\n\nkeys = np.random.randint(1, 1000, size=10**1, dtype=key_type)\nvalues = np.random.randint(1, 1000, size=10**1, dtype=value_type)\n\ngp_dict_1 = gp.Dict(key_type, value_type)\ngp_dict_1[keys] = values\ngp_dict_1.dump('test/test.hashtable.bin')\n\ngp_dict_2 = gp.Dict(key_type, value_type)\ngp_dict_2.load('test/test.hashtable.bin')\n```\n\n## Supported Data Types\n\n```python\ndict_types = {\n    (np.dtype('u4'), np.dtype('u1')) : _gp.Dict_u4_u1,\n    (np.dtype('u4'), np.dtype('u2')) : _gp.Dict_u4_u2,\n    (np.dtype('u4'), np.dtype('u4')) : _gp.Dict_u4_u4,\n    (np.dtype('u4'), np.dtype('u8')) : _gp.Dict_u4_u8,\n    (np.dtype('u4'), np.dtype('i1')) : _gp.Dict_u4_i1,\n    (np.dtype('u4'), np.dtype('i2')) : _gp.Dict_u4_i2,\n    (np.dtype('u4'), np.dtype('i4')) : _gp.Dict_u4_i4,\n    (np.dtype('u4'), np.dtype('i8')) : _gp.Dict_u4_i8,\n    (np.dtype('u4'), np.dtype('f4')) : _gp.Dict_u4_f4,\n    (np.dtype('u4'), np.dtype('f8')) : _gp.Dict_u4_f8,\n    (np.dtype('u4'), np.dtype('S8')) : _gp.Dict_u4_S8,\n    (np.dtype('u4'), np.dtype('S16')) : _gp.Dict_u4_S16,\n    (np.dtype('u8'), np.dtype('u1')) : _gp.Dict_u8_u1,\n    (np.dtype('u8'), np.dtype('u2')) : _gp.Dict_u8_u2,\n    (np.dtype('u8'), np.dtype('u4')) : _gp.Dict_u8_u4,\n    (np.dtype('u8'), np.dtype('u8')) : _gp.Dict_u8_u8,\n    (np.dtype('u8'), np.dtype('i1')) : _gp.Dict_u8_i1,\n    (np.dtype('u8'), np.dtype('i2')) : _gp.Dict_u8_i2,\n    (np.dtype('u8'), np.dtype('i4')) : _gp.Dict_u8_i4,\n    (np.dtype('u8'), np.dtype('i8')) : _gp.Dict_u8_i8,\n    (np.dtype('u8'), np.dtype('f4')) : _gp.Dict_u8_f4,\n    (np.dtype('u8'), np.dtype('f8')) : _gp.Dict_u8_f8,\n    (np.dtype('u8'), np.dtype('S8')) : _gp.Dict_u8_S8,\n    (np.dtype('u8'), np.dtype('S16')) : _gp.Dict_u8_S16,\n    (np.dtype('i4'), np.dtype('u1')) : _gp.Dict_i4_u1,\n    (np.dtype('i4'), np.dtype('u2')) : _gp.Dict_i4_u2,\n    (np.dtype('i4'), np.dtype('u4')) : _gp.Dict_i4_u4,\n    (np.dtype('i4'), np.dtype('u8')) : _gp.Dict_i4_u8,\n    (np.dtype('i4'), np.dtype('i1')) : _gp.Dict_i4_i1,\n    (np.dtype('i4'), np.dtype('i2')) : _gp.Dict_i4_i2,\n    (np.dtype('i4'), np.dtype('i4')) : _gp.Dict_i4_i4,\n    (np.dtype('i4'), np.dtype('i8')) : _gp.Dict_i4_i8,\n    (np.dtype('i4'), np.dtype('f4')) : _gp.Dict_i4_f4,\n    (np.dtype('i4'), np.dtype('f8')) : _gp.Dict_i4_f8,\n    (np.dtype('i4'), np.dtype('S8')) : _gp.Dict_i4_S8,\n    (np.dtype('i4'), np.dtype('S16')) : _gp.Dict_i4_S16,\n    (np.dtype('i8'), np.dtype('u1')) : _gp.Dict_i8_u1,\n    (np.dtype('i8'), np.dtype('u2')) : _gp.Dict_i8_u2,\n    (np.dtype('i8'), np.dtype('u4')) : _gp.Dict_i8_u4,\n    (np.dtype('i8'), np.dtype('u8')) : _gp.Dict_i8_u8,\n    (np.dtype('i8'), np.dtype('i1')) : _gp.Dict_i8_i1,\n    (np.dtype('i8'), np.dtype('i2')) : _gp.Dict_i8_i2,\n    (np.dtype('i8'), np.dtype('i4')) : _gp.Dict_i8_i4,\n    (np.dtype('i8'), np.dtype('i8')) : _gp.Dict_i8_i8,\n    (np.dtype('i8'), np.dtype('f4')) : _gp.Dict_i8_f4,\n    (np.dtype('i8'), np.dtype('f8')) : _gp.Dict_i8_f8,\n    (np.dtype('i8'), np.dtype('S8')) : _gp.Dict_i8_S8,\n    (np.dtype('i8'), np.dtype('S16')) : _gp.Dict_i8_S16,\n    (np.dtype('S8'), np.dtype('u1')) : _gp.Dict_S8_u1,\n    (np.dtype('S8'), np.dtype('u2')) : _gp.Dict_S8_u2,\n    (np.dtype('S8'), np.dtype('u4')) : _gp.Dict_S8_u4,\n    (np.dtype('S8'), np.dtype('u8')) : _gp.Dict_S8_u8,\n    (np.dtype('S8'), np.dtype('i1')) : _gp.Dict_S8_i1,\n    (np.dtype('S8'), np.dtype('i2')) : _gp.Dict_S8_i2,\n    (np.dtype('S8'), np.dtype('i4')) : _gp.Dict_S8_i4,\n    (np.dtype('S8'), np.dtype('i8')) : _gp.Dict_S8_i8,\n    (np.dtype('S8'), np.dtype('f4')) : _gp.Dict_S8_f4,\n    (np.dtype('S8'), np.dtype('f8')) : _gp.Dict_S8_f8,\n    (np.dtype('S8'), np.dtype('S8')) : _gp.Dict_S8_S8,\n    (np.dtype('S8'), np.dtype('S16')) : _gp.Dict_S8_S16,\n    (np.dtype('S16'), np.dtype('u1')) : _gp.Dict_S16_u1,\n    (np.dtype('S16'), np.dtype('u2')) : _gp.Dict_S16_u2,\n    (np.dtype('S16'), np.dtype('u4')) : _gp.Dict_S16_u4,\n    (np.dtype('S16'), np.dtype('u8')) : _gp.Dict_S16_u8,\n    (np.dtype('S16'), np.dtype('i1')) : _gp.Dict_S16_i1,\n    (np.dtype('S16'), np.dtype('i2')) : _gp.Dict_S16_i2,\n    (np.dtype('S16'), np.dtype('i4')) : _gp.Dict_S16_i4,\n    (np.dtype('S16'), np.dtype('i8')) : _gp.Dict_S16_i8,\n    (np.dtype('S16'), np.dtype('f4')) : _gp.Dict_S16_f4,\n    (np.dtype('S16'), np.dtype('f8')) : _gp.Dict_S16_f8,\n    (np.dtype('S16'), np.dtype('S8')) : _gp.Dict_S16_S8,\n    (np.dtype('S16'), np.dtype('S16')) : _gp.Dict_S16_S16,\n}\n\nset_types = {\n    np.dtype('u4') : _gp.Set_u4,\n    np.dtype('u8') : _gp.Set_u8,\n    np.dtype('i4') : _gp.Set_i4,\n    np.dtype('i8') : _gp.Set_i8,\n    np.dtype('S8') : _gp.Set_S8,\n    np.dtype('S16') : _gp.Set_S16,\n}\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/atom-moyer/getpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "getpy",
    "package_url": "https://pypi.org/project/getpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/getpy/",
    "project_urls": {
      "Homepage": "https://github.com/atom-moyer/getpy"
    },
    "release_url": "https://pypi.org/project/getpy/0.14.2/",
    "requires_dist": [
      "numpy",
      "pybind11"
    ],
    "requires_python": "",
    "summary": "A Vectorized Dictionary for Python",
    "version": "0.14.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7725646,
  "releases": {
    "0.14.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4df93602c3288edf07ff72e3451b5de3e39ab35b8baed95bdd63a527b2e0c80f",
          "md5": "5c63f14eb4601b58d33968a94d64f66e",
          "sha256": "462923a71e4a69eff85c6306ef1013e665afa0ec003f9260f95eba4d122ef3b3"
        },
        "downloads": -1,
        "filename": "getpy-0.14.2-cp35-cp35m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "5c63f14eb4601b58d33968a94d64f66e",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "requires_python": null,
        "size": 25158945,
        "upload_time": "2020-07-17T21:09:45",
        "upload_time_iso_8601": "2020-07-17T21:09:45.340129Z",
        "url": "https://files.pythonhosted.org/packages/4d/f9/3602c3288edf07ff72e3451b5de3e39ab35b8baed95bdd63a527b2e0c80f/getpy-0.14.2-cp35-cp35m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfaf663a54d998c94894e19eb9be0430ba17fc8fd1818fa4b5a496ff87fe2c8f",
          "md5": "0d04f5a95e4e38ccb1d5598ca7e4c111",
          "sha256": "8594e5ff8ee1e3c88590d1ae8d5b90f57203219061678bfe9abcca9f3fb916ea"
        },
        "downloads": -1,
        "filename": "getpy-0.14.2-cp36-cp36m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "0d04f5a95e4e38ccb1d5598ca7e4c111",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 25157961,
        "upload_time": "2020-07-17T21:09:49",
        "upload_time_iso_8601": "2020-07-17T21:09:49.334754Z",
        "url": "https://files.pythonhosted.org/packages/bf/af/663a54d998c94894e19eb9be0430ba17fc8fd1818fa4b5a496ff87fe2c8f/getpy-0.14.2-cp36-cp36m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "809defa5fc4806bc58e57a27ef1c57c781d12542afcb91bb943b7472abc7c283",
          "md5": "ded6760b6a3833650a8aa407e703ee02",
          "sha256": "0c42c8918b84817ac22b5e2fefadc02d188b2c00ec1f38e16748635d920d2cc5"
        },
        "downloads": -1,
        "filename": "getpy-0.14.2-cp37-cp37m-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "ded6760b6a3833650a8aa407e703ee02",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 25163288,
        "upload_time": "2020-07-17T21:09:53",
        "upload_time_iso_8601": "2020-07-17T21:09:53.097734Z",
        "url": "https://files.pythonhosted.org/packages/80/9d/efa5fc4806bc58e57a27ef1c57c781d12542afcb91bb943b7472abc7c283/getpy-0.14.2-cp37-cp37m-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1173ac12b3ba37a80767697e0641d9e034c1b61e001ebbc399164c51a74a6060",
          "md5": "b17bc51901225c52e6b23a8dd581b932",
          "sha256": "62ff3662f02019f3243728b5311c9bafe5bd7f19c331a2dc04de9ab2e9151d35"
        },
        "downloads": -1,
        "filename": "getpy-0.14.2-cp38-cp38-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b17bc51901225c52e6b23a8dd581b932",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": null,
        "size": 23692283,
        "upload_time": "2020-07-17T21:09:57",
        "upload_time_iso_8601": "2020-07-17T21:09:57.374856Z",
        "url": "https://files.pythonhosted.org/packages/11/73/ac12b3ba37a80767697e0641d9e034c1b61e001ebbc399164c51a74a6060/getpy-0.14.2-cp38-cp38-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fdd43fa571119b62571edf78bd5d397360b18a2302d3ad2583e6cbf970118cb",
          "md5": "e690898d5ffd3658f579333d2ba79126",
          "sha256": "b0514bd2c2f7d140159daa3e439772b19375c5d2125a756d7727babf91f232cd"
        },
        "downloads": -1,
        "filename": "getpy-0.14.2-cp39-cp39-manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "e690898d5ffd3658f579333d2ba79126",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 23594699,
        "upload_time": "2020-07-17T21:10:01",
        "upload_time_iso_8601": "2020-07-17T21:10:01.265040Z",
        "url": "https://files.pythonhosted.org/packages/5f/dd/43fa571119b62571edf78bd5d397360b18a2302d3ad2583e6cbf970118cb/getpy-0.14.2-cp39-cp39-manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4df93602c3288edf07ff72e3451b5de3e39ab35b8baed95bdd63a527b2e0c80f",
        "md5": "5c63f14eb4601b58d33968a94d64f66e",
        "sha256": "462923a71e4a69eff85c6306ef1013e665afa0ec003f9260f95eba4d122ef3b3"
      },
      "downloads": -1,
      "filename": "getpy-0.14.2-cp35-cp35m-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "5c63f14eb4601b58d33968a94d64f66e",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 25158945,
      "upload_time": "2020-07-17T21:09:45",
      "upload_time_iso_8601": "2020-07-17T21:09:45.340129Z",
      "url": "https://files.pythonhosted.org/packages/4d/f9/3602c3288edf07ff72e3451b5de3e39ab35b8baed95bdd63a527b2e0c80f/getpy-0.14.2-cp35-cp35m-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfaf663a54d998c94894e19eb9be0430ba17fc8fd1818fa4b5a496ff87fe2c8f",
        "md5": "0d04f5a95e4e38ccb1d5598ca7e4c111",
        "sha256": "8594e5ff8ee1e3c88590d1ae8d5b90f57203219061678bfe9abcca9f3fb916ea"
      },
      "downloads": -1,
      "filename": "getpy-0.14.2-cp36-cp36m-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "0d04f5a95e4e38ccb1d5598ca7e4c111",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 25157961,
      "upload_time": "2020-07-17T21:09:49",
      "upload_time_iso_8601": "2020-07-17T21:09:49.334754Z",
      "url": "https://files.pythonhosted.org/packages/bf/af/663a54d998c94894e19eb9be0430ba17fc8fd1818fa4b5a496ff87fe2c8f/getpy-0.14.2-cp36-cp36m-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "809defa5fc4806bc58e57a27ef1c57c781d12542afcb91bb943b7472abc7c283",
        "md5": "ded6760b6a3833650a8aa407e703ee02",
        "sha256": "0c42c8918b84817ac22b5e2fefadc02d188b2c00ec1f38e16748635d920d2cc5"
      },
      "downloads": -1,
      "filename": "getpy-0.14.2-cp37-cp37m-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ded6760b6a3833650a8aa407e703ee02",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 25163288,
      "upload_time": "2020-07-17T21:09:53",
      "upload_time_iso_8601": "2020-07-17T21:09:53.097734Z",
      "url": "https://files.pythonhosted.org/packages/80/9d/efa5fc4806bc58e57a27ef1c57c781d12542afcb91bb943b7472abc7c283/getpy-0.14.2-cp37-cp37m-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1173ac12b3ba37a80767697e0641d9e034c1b61e001ebbc399164c51a74a6060",
        "md5": "b17bc51901225c52e6b23a8dd581b932",
        "sha256": "62ff3662f02019f3243728b5311c9bafe5bd7f19c331a2dc04de9ab2e9151d35"
      },
      "downloads": -1,
      "filename": "getpy-0.14.2-cp38-cp38-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b17bc51901225c52e6b23a8dd581b932",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 23692283,
      "upload_time": "2020-07-17T21:09:57",
      "upload_time_iso_8601": "2020-07-17T21:09:57.374856Z",
      "url": "https://files.pythonhosted.org/packages/11/73/ac12b3ba37a80767697e0641d9e034c1b61e001ebbc399164c51a74a6060/getpy-0.14.2-cp38-cp38-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fdd43fa571119b62571edf78bd5d397360b18a2302d3ad2583e6cbf970118cb",
        "md5": "e690898d5ffd3658f579333d2ba79126",
        "sha256": "b0514bd2c2f7d140159daa3e439772b19375c5d2125a756d7727babf91f232cd"
      },
      "downloads": -1,
      "filename": "getpy-0.14.2-cp39-cp39-manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e690898d5ffd3658f579333d2ba79126",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 23594699,
      "upload_time": "2020-07-17T21:10:01",
      "upload_time_iso_8601": "2020-07-17T21:10:01.265040Z",
      "url": "https://files.pythonhosted.org/packages/5f/dd/43fa571119b62571edf78bd5d397360b18a2302d3ad2583e6cbf970118cb/getpy-0.14.2-cp39-cp39-manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}