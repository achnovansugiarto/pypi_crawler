{
  "info": {
    "author": "Justin Quick",
    "author_email": "justquick@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Unix Shell",
      "Topic :: System :: Shells"
    ],
    "description": "# Python Shell Pipes\n\n### A simple way to access your shell commands in Python\n\nThe `shpipes` package uses `subprocess.Popen` to run commands in a shell easily from native Python.\n\n```python\n    >>> from shpipes import Pipe\n    # python --version\n    >>> Pipe('python')('--version').getvalue()\n    'Python 3.8.6\\n'\n```\n\n## Chaining pipes together\n\nYou can chain together your commands, passing output from one to the input of another, similar to shell pipes. You can use the bitwise inclusive or operator to chain `Pipe` instances together.\n\n```python\n    # echo 1+1 | bc\n    >>> (Pipe('echo')('1+1') | Pipe('bc')).getvalue()\n    '2\\n'\n    # This also works\n    >>> pipe = Pipe('echo')('1+1')\n    >>> pipe |= Pipe('bc'))\n    >>> pipe.getvalue()\n    '2\\n'\n```\n\n### Loading commands from your `PATH`\n\nShell Pipes can also collect all executables from your `PATH` variable and gather them into a `Commands` instance so you can use the lib just like your native shell.\n\n```python\n    >>> from shpipes import Commands\n    >>> shell = Commands()\n    # find . -type f | grep .py$ | wc -l\n    >>> (shell.find('.', '-type', 'f') | shell.grep('.py$') | shell.wc('-l')).getvalue()\n    '9\\n'\n    # this also works\n    >>> pipe = shell.find('.', '-type', 'f')\n    >>> pipe |= shell.grep('.py$')\n    >>> pipe |= shell.wc('-l')\n    >>> pipe.getvalue()\n    '9\\n'\n```\n\n\n### Handling pipe arguments\n\nWhen a `Pipe` is called, its arguments are directly passed to `Popen` so beware that strings must be quoted properly.\nYou can use `getvalue()` to get the output from one pipe and then pass it as a command argument instead of input text.\nPipes are only evaluated when `getvalue()` is called\n\n```python\n    >>> license = shell.find('.', '-name', '\"LICENSE\"').getvalue()\n    >>> shell.wc(license).getvalue()\n    '  21  169 1069 ./LICENSE\\n'\n```\n\n## Shell by default\n\nSince pipes run in a shell by default, environment variables evaluate automatically\n\n```python\n\n    >>> pipe = shell.ps('-u $USER')\n    >>> pipe |= shell.grep('python')\n    >>> pipe |= shell.head('-1')\n```\n\n### Configuration options\n\nIf you need to run a different shell or disable shell entirely, then you can pass options via environment variables or kwargs to `Pipe`\n\n\n### Overriding options in `Pipe`\n\nYou can override all options to `Popen` (except `stdin`/`stdout`) by passing arguments to `Pipe`\nBy default `Popen` is run in shell mode with your default shell.\n\n```python\n    >>> Pipe('ls', executable='/bin/zsh', cwd='/var', shell=False)\n```\n\n### Set env `SHPIPES_NO_SHELL`=true\n\nSets `shell=False` in the call to `Popen`\n\n### Set env `SHPIPES_SHELL`=/bin/zsh\n\nChanges the executable shell run by `Popen`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justquick/shell-pipes",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shell-pipes",
    "package_url": "https://pypi.org/project/shell-pipes/",
    "platform": "",
    "project_url": "https://pypi.org/project/shell-pipes/",
    "project_urls": {
      "Homepage": "https://github.com/justquick/shell-pipes"
    },
    "release_url": "https://pypi.org/project/shell-pipes/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Extending Python syntax to implement shell commands as pipes using subprocess",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9325815,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f3327e00c1fce243ee5ff623a4a15521b57e4d83952af668e8b434afc52979f",
          "md5": "7acaed47af40095bf1f17c51d7fc9023",
          "sha256": "58af2c90074fc8ec76a95f026c0d59f570a6226c2a551e7c4fe1fceaf2ad1198"
        },
        "downloads": -1,
        "filename": "shell-pipes-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7acaed47af40095bf1f17c51d7fc9023",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 3486,
        "upload_time": "2021-02-05T04:39:15",
        "upload_time_iso_8601": "2021-02-05T04:39:15.444594Z",
        "url": "https://files.pythonhosted.org/packages/2f/33/27e00c1fce243ee5ff623a4a15521b57e4d83952af668e8b434afc52979f/shell-pipes-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f3327e00c1fce243ee5ff623a4a15521b57e4d83952af668e8b434afc52979f",
        "md5": "7acaed47af40095bf1f17c51d7fc9023",
        "sha256": "58af2c90074fc8ec76a95f026c0d59f570a6226c2a551e7c4fe1fceaf2ad1198"
      },
      "downloads": -1,
      "filename": "shell-pipes-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7acaed47af40095bf1f17c51d7fc9023",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 3486,
      "upload_time": "2021-02-05T04:39:15",
      "upload_time_iso_8601": "2021-02-05T04:39:15.444594Z",
      "url": "https://files.pythonhosted.org/packages/2f/33/27e00c1fce243ee5ff623a4a15521b57e4d83952af668e8b434afc52979f/shell-pipes-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}