{
  "info": {
    "author": "John Smith",
    "author_email": "john@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PyDeequ\n\nPyDeequ is a Python API for [Deequ](https://github.com/awslabs/deequ), a library built on top of Apache Spark for defining \"unit tests for data\", which measure data quality in large datasets. PyDeequ is written to support usage of Deequ in Python.\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) ![Coverage](https://img.shields.io/badge/coverage-90%25-green)\n\nThere are 4 main components of Deequ, and they are:\n- Metrics Computation:\n    - `Profiles` leverages Analyzers to analyze each column of a dataset.\n    - `Analyzers` serve here as a foundational module that computes metrics for data profiling and validation at scale.\n- Constraint Suggestion:\n    - Specify rules for various groups of Analyzers to be run over a dataset to return back a collection of constraints suggested to run in a Verification Suite.\n- Constraint Verification:\n    - Perform data validation on a dataset with respect to various constraints set by you.   \n- Metrics Repository\n    - Allows for persistence and tracking of Deequ runs over time.\n\n![](imgs/pydeequ_architecture.jpg)\n\n## ðŸŽ‰ Announcements ðŸŽ‰\n- With PyDeequ v0.1.8+, we now officially support Spark3 ! Just make sure you have an environment variable `SPARK_VERSION` to specify your Spark version! \n- We've release a blogpost on integrating PyDeequ onto AWS leveraging services such as AWS Glue, Athena, and SageMaker! Check it out: [Monitor data quality in your data lake using PyDeequ and AWS Glue](https://aws.amazon.com/blogs/big-data/monitor-data-quality-in-your-data-lake-using-pydeequ-and-aws-glue/).\n- Check out the [PyDeequ Release Announcement Blogpost](https://aws.amazon.com/blogs/big-data/testing-data-quality-at-scale-with-pydeequ/) with a tutorial walkthrough the Amazon Reviews dataset!\n- Join the PyDeequ community on [PyDeequ Slack](https://join.slack.com/t/pydeequ/shared_invite/zt-te6bntpu-yaqPy7bhiN8Lu0NxpZs47Q) to chat with the devs!\n\n## Quickstart\n\nThe following will quickstart you with some basic usage. For more in-depth examples, take a look in the [`tutorials/`](tutorials/) directory for executable Jupyter notebooks of each module. For documentation on supported interfaces, view the [`documentation`](https://pydeequ.readthedocs.io/).\n\n### Installation\n\nYou can install [PyDeequ via pip](https://pypi.org/project/pydeequ/).\n\n```\npip install pydeequ\n```\n\n### Set up a PySpark session\n```python\nfrom pyspark.sql import SparkSession, Row\nimport pydeequ\n\nspark = (SparkSession\n    .builder\n    .config(\"spark.jars.packages\", pydeequ.deequ_maven_coord)\n    .config(\"spark.jars.excludes\", pydeequ.f2j_maven_coord)\n    .getOrCreate())\n\ndf = spark.sparkContext.parallelize([\n            Row(a=\"foo\", b=1, c=5),\n            Row(a=\"bar\", b=2, c=6),\n            Row(a=\"baz\", b=3, c=None)]).toDF()\n```\n\n### Analyzers\n\n```python\nfrom pydeequ2.analyzers import *\n\nanalysisResult = AnalysisRunner(spark) \\\n                    .onData(df) \\\n                    .addAnalyzer(Size()) \\\n                    .addAnalyzer(Completeness(\"b\")) \\\n                    .run()\n\nanalysisResult_df = AnalyzerContext.successMetricsAsDataFrame(spark, analysisResult)\nanalysisResult_df.show()\n```\n\n### Profile\n\n```python\nfrom pydeequ2.profiles import *\n\nresult = ColumnProfilerRunner(spark) \\\n    .onData(df) \\\n    .run()\n\nfor col, profile in result.profiles.items():\n    print(profile)\n```\n\n### Constraint Suggestions\n\n```python\nfrom pydeequ2.suggestions import *\n\nsuggestionResult = ConstraintSuggestionRunner(spark) \\\n             .onData(df) \\\n             .addConstraintRule(DEFAULT()) \\\n             .run()\n\n# Constraint Suggestions in JSON format\nprint(suggestionResult)\n```\n\n### Constraint Verification\n\n```python\nfrom pydeequ2.checks import *\nfrom pydeequ2.verification import *\n\ncheck = Check(spark, CheckLevel.Warning, \"Review Check\")\n\ncheckResult = VerificationSuite(spark) \\\n    .onData(df) \\\n    .addCheck(\n        check.hasSize(lambda x: x >= 3) \\\n        .hasMin(\"b\", lambda x: x == 0) \\\n        .isComplete(\"c\")  \\\n        .isUnique(\"a\")  \\\n        .isContainedIn(\"a\", [\"foo\", \"bar\", \"baz\"]) \\\n        .isNonNegative(\"b\")) \\\n    .run()\n\ncheckResult_df = VerificationResult.checkResultsAsDataFrame(spark, checkResult)\ncheckResult_df.show()\n```\n\n### Repository\n\nSave to a Metrics Repository by adding the `useRepository()` and `saveOrAppendResult()` calls to your Analysis Runner.\n```python\nfrom pydeequ2.repository import *\nfrom pydeequ2.analyzers import *\n\nmetrics_file = FileSystemMetricsRepository.helper_metrics_file(spark, 'metrics.json')\nrepository = FileSystemMetricsRepository(spark, metrics_file)\nkey_tags = {'tag': 'pydeequ hello world'}\nresultKey = ResultKey(spark, ResultKey.current_milli_time(), key_tags)\n\nanalysisResult = AnalysisRunner(spark) \\\n    .onData(df) \\\n    .addAnalyzer(ApproxCountDistinct('b')) \\\n    .useRepository(repository) \\\n    .saveOrAppendResult(resultKey) \\\n    .run()\n```\n\nTo load previous runs, use the `repository` object to load previous results back in.\n\n```python\nresult_metrep_df = repository.load() \\\n    .before(ResultKey.current_milli_time()) \\\n    .forAnalyzers([ApproxCountDistinct('b')]) \\\n    .getSuccessMetricsAsDataFrame()\n```\n\n### Wrapping up\n\nAfter you've ran your jobs with PyDeequ, be sure to shut down your Spark session to prevent any hanging processes. \n\n```python\nspark.sparkContext._gateway.shutdown_callback_server()\nspark.stop()\n```\n\n## [Contributing](https://github.com/awslabs/python-deequ/blob/master/CONTRIBUTING.md)\nPlease refer to the [contributing doc](https://github.com/awslabs/python-deequ/blob/master/CONTRIBUTING.md) for how to contribute to PyDeequ.\n\n## [License](https://github.com/awslabs/python-deequ/blob/master/LICENSE)\n\nThis library is licensed under the Apache 2.0 License.\n\n******\n\n## Contributing Developer Setup\n\n1. Setup [SDKMAN](#setup-sdkman)\n1. Setup [Java](#setup-java)\n1. Setup [Apache Spark](#setup-apache-spark)\n1. Install [Poetry](#poetry)\n1. Run [tests locally](#running-tests-locally)\n\n### Setup SDKMAN\n\nSDKMAN is a tool for managing parallel Versions of multiple Software Development Kits on any Unix based\nsystem. It provides a convenient command line interface for installing, switching, removing and listing\nCandidates. SDKMAN! installs smoothly on Mac OSX, Linux, WSL, Cygwin, etc... Support Bash and ZSH shells. See\ndocumentation on the [SDKMAN! website](https://sdkman.io).\n\nOpen your favourite terminal and enter the following:\n\n```bash\n$ curl -s https://get.sdkman.io | bash\nIf the environment needs tweaking for SDKMAN to be installed,\nthe installer will prompt you accordingly and ask you to restart.\n\nNext, open a new terminal or enter:\n\n$ source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\nLastly, run the following code snippet to ensure that installation succeeded:\n\n$ sdk version\n```\n\n### Setup Java\n\nInstall Java Now open favourite terminal and enter the following:\n\n```bash\nList the AdoptOpenJDK OpenJDK versions\n$ sdk list java\n\nTo install For Java 11\n$ sdk install java 11.0.10.hs-adpt\n\nTo install For Java 11\n$ sdk install java 8.0.292.hs-adpt\n```\n\n### Setup Apache Spark\n\nInstall Java Now open favourite terminal and enter the following:\n\n```bash\nList the Apache Spark versions:\n$ sdk list spark\n\nTo install For Spark 3\n$ sdk install spark 3.0.2\n```\n\n### Poetry\n\nPoetry [Commands](https://python-poetry.org/docs/cli/#search)\n\n```bash\npoetry install\n\npoetry update\n\n# --tree: List the dependencies as a tree.\n# --latest (-l): Show the latest version.\n# --outdated (-o): Show the latest version but only for packages that are outdated.\npoetry show -o\n```\n\n## Running Tests Locally\n\nTake a look at tests in `tests/dataquality` and `tests/jobs`\n\n```bash\n$ poetry run pytest\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pydeequ.readthedocs.io",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "John Smith",
    "maintainer_email": "john@example.com",
    "name": "pydeequ2",
    "package_url": "https://pypi.org/project/pydeequ2/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydeequ2/",
    "project_urls": {
      "Documentation": "https://pydeequ.readthedocs.io",
      "Homepage": "https://pydeequ.readthedocs.io",
      "Repository": "https://github.com/awslabs/python-deequ"
    },
    "release_url": "https://pypi.org/project/pydeequ2/1.0.2/",
    "requires_dist": [
      "numpy (>=1.14.1)",
      "pandas (>=0.23.0)",
      "pyspark (>=2.4.7,<3.3.0) ; extra == \"pyspark\""
    ],
    "requires_python": ">=3.6.2,<4",
    "summary": "PyDeequ2 - aws clone",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16747528,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12a0e6b75268af6021b6f6c78640be05161d16549f6738cb34b50a8f42cc3539",
          "md5": "06511acc7b582a342d2967c382ce778d",
          "sha256": "bd05bf6c9bd036a54ec0a16782cd180fd5bb1cf859dbbe6c37ff67d7dc722f77"
        },
        "downloads": -1,
        "filename": "pydeequ2-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06511acc7b582a342d2967c382ce778d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2,<4",
        "size": 36838,
        "upload_time": "2023-02-08T14:44:45",
        "upload_time_iso_8601": "2023-02-08T14:44:45.627373Z",
        "url": "https://files.pythonhosted.org/packages/12/a0/e6b75268af6021b6f6c78640be05161d16549f6738cb34b50a8f42cc3539/pydeequ2-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee019c92a70fcb4507128d2df96b7a8825d1a8a21d58eed05f329a860e7a953c",
          "md5": "73fd6881cb133dffe9a885cb9415caf2",
          "sha256": "bbeeb74522a0f7dbca7e4826e1be5e54826fce7938eb4015df7ce5d1195abd36"
        },
        "downloads": -1,
        "filename": "pydeequ2-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "73fd6881cb133dffe9a885cb9415caf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2,<4",
        "size": 36095,
        "upload_time": "2023-02-08T14:44:46",
        "upload_time_iso_8601": "2023-02-08T14:44:46.772326Z",
        "url": "https://files.pythonhosted.org/packages/ee/01/9c92a70fcb4507128d2df96b7a8825d1a8a21d58eed05f329a860e7a953c/pydeequ2-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12a0e6b75268af6021b6f6c78640be05161d16549f6738cb34b50a8f42cc3539",
        "md5": "06511acc7b582a342d2967c382ce778d",
        "sha256": "bd05bf6c9bd036a54ec0a16782cd180fd5bb1cf859dbbe6c37ff67d7dc722f77"
      },
      "downloads": -1,
      "filename": "pydeequ2-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06511acc7b582a342d2967c382ce778d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.2,<4",
      "size": 36838,
      "upload_time": "2023-02-08T14:44:45",
      "upload_time_iso_8601": "2023-02-08T14:44:45.627373Z",
      "url": "https://files.pythonhosted.org/packages/12/a0/e6b75268af6021b6f6c78640be05161d16549f6738cb34b50a8f42cc3539/pydeequ2-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee019c92a70fcb4507128d2df96b7a8825d1a8a21d58eed05f329a860e7a953c",
        "md5": "73fd6881cb133dffe9a885cb9415caf2",
        "sha256": "bbeeb74522a0f7dbca7e4826e1be5e54826fce7938eb4015df7ce5d1195abd36"
      },
      "downloads": -1,
      "filename": "pydeequ2-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "73fd6881cb133dffe9a885cb9415caf2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.2,<4",
      "size": 36095,
      "upload_time": "2023-02-08T14:44:46",
      "upload_time_iso_8601": "2023-02-08T14:44:46.772326Z",
      "url": "https://files.pythonhosted.org/packages/ee/01/9c92a70fcb4507128d2df96b7a8825d1a8a21d58eed05f329a860e7a953c/pydeequ2-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}