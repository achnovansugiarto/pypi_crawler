{
  "info": {
    "author": "Todd Wilson",
    "author_email": "todd@toddwilson.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "datagen: make sh[2] up\r\n======================\r\n\r\nDatagen helps you create sample delimited data using a simple schema format.\r\nIt runs on Python 2.6-3.4 and *particularly well* on PyPy.\r\n\r\nInstallation\r\n------------\r\n\r\n``pip install datagen``\r\n\r\nOr::\r\n\r\n    $ git clone https://github.com/toddwilson/datagen.git\r\n    $ cd datagen\r\n    $ python setup.py install\r\n\r\nUsage\r\n-----\r\n\r\n    usage: datagen [-h] [-d DELIMITER] [--with-header] -n NUM_ROWS -s SCHEMA [output]\r\n\r\n\r\n**1. Create a schema file**\r\n\r\n::\r\n\r\n    $ cat > schema.txt <<EOL\r\n\t#name      type[argument]\r\n\tid         int[6]\r\n\tfirst      firstname\r\n\tlast       lastname\r\n\temail      email\r\n\tdob        date[after=1945-01-01, before=2001-01-01]\r\n\tpassword   string[8]\r\n\tis_active  bool\r\n\tlanguage   randomset[python,ruby,go,java,c,js,brainfuck]\r\n    EOL\r\n\r\n**2. Make data**\r\n\r\n::\r\n\r\n\t$ datagen -s schema.txt -n 5 --with-header\r\n\tid|first|last|email|dob|password|is_active|language\r\n\t238476|Velma|Medrano|sxLYZTnPf@ACLoxOVjUu.edu|1948-01-12|KmAcXnnS|1|python\r\n\t202490|Kathy|Wellman|pAXx@MQcPrkMdNMcZa.com|1960-11-12|BwtZnRUN|1|java\r\n\t905703|Fern|Odell|iCQ@KtN.mil|1972-12-12|ipVagvEB|0|c\r\n\t130211|Khadijah|Sheffield|KBPf@ibR.edu|1961-02-02|ijAVDWUY|0|java\r\n\t643257|Patricia|Cummings|vaZqWhl@YcVvZXx.int|1960-05-01|GJdImZaw|0|ruby\r\n\r\n**3. Actually start working on what you should be working on**\r\n\r\n\r\nTypes\r\n-----\r\n\r\n**bool**: 1 or 0 randomly.\r\n\r\n**int[length]**: Random unsigned integer.\r\n\r\nParams:\r\n\r\n* length: max-length\r\n\r\nExample::\r\n\r\n\tnumber  numberint[3]\r\n\r\n\t509\r\n\t49\r\n\t783\r\n\r\n\r\n**incrementing_int**: Automatically incrementing unsigned integer.\r\n\r\nExample::\r\n\r\n    id  incrementing_int\r\n\r\n    1\r\n    2\r\n    3\r\n\r\n\r\n**string[length]**: Random case-insensitive string.\r\n\r\nParams:\r\n\r\n* length: max-length\r\n\r\nExample::\r\n\r\n    code  string[4]\r\n\r\n    FiwH\r\n    Acbj\r\n    EtGM\r\n\r\n**randomset[list]**: Random member from a list\r\n\r\nParams:\r\n\r\n* set: a comma-separated list of values\r\n\r\nExample::\r\n\r\n    country  randomset[US,UK,MX,CA,NZ]\r\n\r\n    MX\r\n    US\r\n    CA\r\n\r\n**ipv4**: IPv4 address\r\n\r\nExample::\r\n\r\n    ip  ipv4\r\n\r\n    18.149.184.112\r\n    66.170.176.163\r\n    186.49.28.83\r\n\r\n**date**: ISO 8601 date (YYYY-MM-DD)\r\n\r\nParams:\r\n\r\n* before: ISO 8601 date top limit\r\n* after: ISO 8601 bottom limit\r\n\r\nExample::\r\n\r\n    start_date  date[after=2013-01-01, before=2014-01-01]\r\n\r\n    2013-10-05\r\n    2013-01-10\r\n    2013-05-14\r\n\r\n**datetime**: ISO 8601 datetime (YYYY-MM-DD)\r\n\r\nParams:\r\n\r\n* before: ISO 8601 datetime top limit\r\n* after: ISO 8601 bottomtime limit\r\n\r\nExample::\r\n\r\n    start_at  datetime[after=2013-01-01T00:00:00, before=2014-01-01T00:00:00]\r\n\r\n    2013-10-03T13:00:23\r\n    2013-05-12T00:00:06\r\n    2013-09-20T03:18:02\r\n\r\n**ssn**: 9-digit Social Security Number\r\n\r\nExample::\r\n\r\n    ssn  ssn\r\n\r\n    421-87-2421\r\n    889-27-3485\r\n    861-33-1570\r\n\r\n**firstname**: Randomized first name (from top names in US Census data)\r\n\r\nExample::\r\n\r\n    first  firstname\r\n\r\n    Todd\r\n    Jessika\r\n    Dustin\r\n\r\n**lastname**: Randomized last name (from top names in US Census data)\r\n\r\nExample::\r\n\r\n    last  lastname\r\n\r\n    Rivers\r\n    Akins\r\n    Reardon\r\n\r\n**zipcode**: 5-digit zipcode\r\n\r\nExample::\r\n\r\n    zip  zipcode\r\n\r\n    47245\r\n    59502\r\n    20191\r\n\r\n**state**: US States (2 letter)\r\n\r\nExample::\r\n\r\n    state  state\r\n\r\n    ID\r\n    KY\r\n    AK\r\n\r\n**email**: Email address\r\n\r\nExample::\r\n\r\n    email  email\r\n\r\n    QnqfpcP@PIbsLUKq.org\r\n    SNgOqbQ@YSpfbZQP.int\r\n    asRooN@qjxukNUhLr.com\r\n\r\n\r\nAdding Your Own Types\r\n---------------------\r\n\r\nIt's really easy to add your own types to use in a schema file. Just create a\r\nmethod that accepts a single argument and decorate it with `datagen.types.reg_type`.\r\n\r\nExample:\r\n\r\n<my_datagen.py>\r\n\r\n.. code-block:: python\r\n\r\n    from random import uniform\r\n    from datagen.types import reg_type\r\n    from datagen import main\r\n\r\n\r\n    @register_type(\"price\")  # the decorator sets the name of the type\r\n    def price(arg):  # the method must accept one argument (even if not used)\r\n        return round(uniform(0, 100), 2)\r\n\r\n\r\n    if __name__ == '__main__':\r\n        main()\r\n\r\n\r\n<schema.txt>\r\n\r\n::\r\n\r\n    item_id   int[5]\r\n    price     price\r\n\r\n::\r\n\r\n    $ python my_datagen.py -s schema.txt -n 3\r\n    41746|7.32\r\n    4077|40.55\r\n    12814|43.82\r\n\r\n\r\nAdding Arguments to Your Types\r\n++++++++++++++++++++++++++++++\r\n\r\n<my_datagen.py>\r\n\r\n.. code-block:: python\r\n\r\n    from random import uniform\r\n    from datagen.types import register_type, type_arg\r\n    from datagen import main\r\n\r\n\r\n    @type_arg(\"price\")  # Use the same name as the type defined in reg_type()\r\n    def price_argument(arg):  # This method is passed the contents of what's in price[]\r\n        return int(arg)  # This will get passed to price() when iterating\r\n\r\n\r\n    @register_type(\"price\")  # the decorator sets the name of the type\r\n    def price(max_price):  # the method must accept one argument (even if not used)\r\n        return round(uniform(0, max_price), 2)\r\n\r\n\r\n    if __name__ == '__main__':\r\n        main()\r\n\r\n\r\n<schema.txt>\r\n\r\n::\r\n\r\n    item_id   int[5]\r\n    price     price[10]\r\n\r\n::\r\n\r\n    $ python my_datagen.py -s schema.txt -n 3\r\n    66995|5.08\r\n    5894|7.86\r\n    53659|9.26\r\n\r\n\r\nPerformance\r\n-----------\r\n\r\nIf you need datagen to write faster, use PyPy::\r\n\r\n    $ time python my_datagen.py -s schema.txt -n 1000000 > test_data\r\n    python my_datagen.py -s schema.txt -n 1000000 > test_data  7.87s user 0.07s system 99% cpu 7.950 total\r\n\r\n    $ time pypy my_datagen.py -s schema.txt -n 1000000 > test_data\r\n    pypy my_datagen.py -s schema.txt -n 1000000 > test_data  2.79s user 0.06s system 99% cpu 2.863 total",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/toddwilson/datagen/tarball/1.0.1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/toddwilson/datagen",
    "keywords": "data generation,sample data,hadoop",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datagen",
    "package_url": "https://pypi.org/project/datagen/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/datagen/",
    "project_urls": {
      "Download": "https://github.com/toddwilson/datagen/tarball/1.0.1",
      "Homepage": "https://github.com/toddwilson/datagen"
    },
    "release_url": "https://pypi.org/project/datagen/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Generate delimited sample data with a simple schema.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14331782,
  "releases": {
    "1.0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}