{
  "info": {
    "author": "machine-w",
    "author_email": "steve2008.ma@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "crown\n======\n\ncrown 是一个轻量级的针对时序数据（TSDB）TDengine的ORM库。 \n\n* 需要python 3.0版本以上\n* 在tdengine 2.0.8版本测试通过\n* 解决mac操作系统下没有原生python连接器的问题\n* 极大的降低了python程序员使用TDengine技术门槛\n* 可以方便的将数据转换到numpy与pandas\n* 目前使用TDengine的restful接口连接数据库，以后将提供原生接口引擎可供选择（目前原生接口无法在mac系统上使用）\n\n安装\n----------------------\n\n大多数情况下，可以通过pip,轻松安装最新版本：\n\n.. code-block:: console\n\n    pip install crown\n\n\n还可以通过git安装，项目地址： https://github.com/machine-w/crown\n\n使用方法:\n\n.. code-block:: console\n\n    git clone https://github.com/machine-w/crown.git\n    cd crowm\n    python setup.py install\n\n\n使用文档\n------------------------\n\n建立数据库与删除数据库:\n\n.. code-block:: python\n\n    from crown import *\n\n    DATABASENAME = 'taos_test'\n    HOST = 'localhost'\n    PORT = 6041\n    # 默认端口 6041，默认用户名：root,默认密码：taosdata\n    db = TdEngineDatabase(DATABASENAME,host=HOST) #新建数据库对象\n    # db.connect()  # 尝试连接数据库，如果库不存在，则自动建库。\n    # print(db.databases) #连接数据库db对象后会自动获取全部数据库信息，以字典的形式保存在属性databases中。\n    # 如不使用默认值，可以如下传入参数\n    # db = TdEngineDatabase(DATABASENAME,host=HOST,port=PORT,user='yourusername',passwd='yourpassword')\n    db.create_database(safe=True)  #建库指令。 （safe：如果库存在，则跳过建库指令。）\n    # db.create_database(safe=True,keep= 100,comp=0,replica=1,quorum=2,blocks=115) #可选字段：建库时配置数据库参数，具体字段含义请参考tdengine文档。\n    db.drop_database(safe=True) #删库指令 （safe：如果库不存在，则跳过删库指令。）\n\n修改数据库参数:\n\n.. code-block:: python\n\n    db.alter_database(keep= 120,comp=1,replica=1,quorum=1,blocks=156) #同建库可选字段。\n\n执行sql语句:\n\n.. code-block:: python\n\n    #可以通过数据库对象直接执行sql语句，语句规则与TDengine restful接口要求一致。\n    res = db.raw_sql('select c1,c2 from taos_test.member1')\n    print(res,res.head,res.rowcount) #返回的对象为二维数据。res.head属性为数组对象，保存每一行数据的代表的列名。res.rowcount属性保存返回行数。\n    # res: [[1.2,2.2],[1.3,2.1],[1.5,2.0],[1.6,2.1]]\n    # res.head: ['c1','c2']\n    # res.rowcount: 4\n\n打印执行的sql语句:\n\n.. code-block:: python\n\n    Meter1.select().one()\n    print(db.curSql) #可以通过db对象的curSql属性获取当前执行的原始sql语句\n\n模型定义:\n\n.. code-block:: python\n\n    from crown import *\n\n    DATABASENAME = 'taos_test'\n    HOST = 'localhost'\n    db = TdEngineDatabase(DATABASENAME,host=HOST) #新建数据库对象\n    db.connect()  #尝试连接数据库，如果库不存在，则自动建库。\n    # print(db.databases) #连接数据库db对象后会自动获取全部数据库信息，以字典的形式保存在属性databases中。\n\n    # 表模型类继承自Model类，每个模型类对应数据库中的一张表，模型类中定义的每个Field，对应表中的一列\n    class Meter1(Model):\n        cur = FloatField(db_column='c1')\n        curInt = IntegerField(db_column='c2')\n        curDouble = DoubleField(db_column='c3')\n        desc = BinaryField(db_column='des')\n\n        class Meta: #Meta子类中定义模型类的配置信息\n            database = db #指定表所使用的数据库\n            db_table = 'meter1' #指定表名\n\n    # 可选择的全部Field类型如下，类型与Tdengine支持的数据类型一一对应\n    class AllField(Model):\n        name_float = FloatField(column_name='nf1') #可选项：指定列名\n        name_double = DoubleField()\n        name_bigint = BigIntegerField()\n        name_int = IntegerField()\n        name_smallint = SmallIntegerField()\n        name_tinyint = TinyIntegerField()\n        name_nchar = NCharField(max_length=59,db_column='n1')\n        name_binary = BinaryField(max_length=3)\n        name_bool = BooleanField()\n        dd = PrimaryKeyField() # 如果定义了主键列，则使用主键列作为主键，如果没有定义，则默认“ts”为主键。\n        birthday = DateTimeField()\n        class Meta:\n            database = db\n            db_table = 'all_field'\n\n主键定义：\n\n.. code-block:: python\n\n    #定义主键方式1 \n    #不定义主键，系统默认主键：“ts”\n    class TestPri(Model):\n        cur = FloatField(db_column='c1')\n        class Meta:\n            database = db\n    res = TestPri.describe_table() #获取表结构信息\n    print(res[0][0]) # 结果: “ts”\n\n    #定义主键方式2\n    class TestPri(Model):\n        cur = FloatField(db_column='c1')\n        timeline = PrimaryKeyField() #定义主键列，主键名设置为列名\n        class Meta:\n            database = db\n    res = TestPri.describe_table()\n    print(res[0][0]) # 结果: “timeline”\n\n     #定义主键方式3\n    class TestPri(Model):\n        cur = FloatField(db_column='c1')\n        class Meta:\n            database = db\n            primary_key = 'timeline' # Meta中定主键名称\n    res = TestPri.describe_table()\n    print(res[0][0]) # 结果: “timeline”\n    \n\n\n建表、删表、检查表是否存在：\n\n.. code-block:: python\n\n    Meter1.create_table(safe=True) #建表 safe：如果表存在，则跳过建表指令。命令运行成功放回True,失败raise错误\n    # db.create_table(Meter1,safe=True) #通过数据库对象建表，功能同上\n    Meter1.drop_table(safe=True) #删表 safe：如果表不存在，则跳过删表指令。命令运行成功放回True,失败raise错误\n    # db.drop_table(Meter1,safe=True) #通过数据库对象删表，功能同上\n    Meter1.table_exists() #查看表是否存在，存在返回True,不存在返回：False\n\n动态建表：\n\n除了使用定义模型类的方式建表外，还提供了动态定义字段建表的功能。\n\n.. code-block:: python\n\n    #可以使用Model类的类方法dynamic_create_table方法动态建表，第一个参数为表名，然后需要指定数据库，与是否安全建表。\n    # 关键词参数可以任意多个，指定表中的字段。\n    Meter_dynamic= Model.dynamic_create_table('meterD',database=db,safe=True,test1 = FloatField(db_column='t1'),test2 = IntegerField(db_column='t2'))\n    # 函数返回的对象为Model类对象。使用方法与静态继承的模型类相同。\n    Meter_dynamic.table_exists()\n    Meter_dynamic.drop_table()\n\n从表名建立对应的model类：\n\n数据库中已有的数据库表，可以通过已知的表名建立对应的model类。\n\n.. code-block:: python\n\n    nodeTable = Model.model_from_table('node_10',db) # node_10为数据表的表名\n    res = nodeTable.select().one() # 从表名新建的类和静态建立的类，使用方法完全一致\n    \n    \n动态建立的或从数据库分析得到的model对象，可以直接使用列名作为属性名进行查询操作。\n\n.. code-block:: python\n\n\n    res = nodeTable.select(nodeTable.c1)where(nodeTable.c1 > 1).all() # 直接使用列名\n    res = nodeTable.select(nodeTable.c1)where(FloatField(db_column='c1') > 1).all() # 也可以使用field对象作为字段检索条件（多使用于列名为动态值的时候）\n    # 直接使用列名,查看结果\n    for item in res:\n        print(item.c1)\n\n插入数据：\n\n.. code-block:: python\n\n    #方法一\n    for i in range(1,101):\n        #使用模型类实例化的每个对象对应数据表中的每一行，可以通过传入属性参数的方式给每一列赋值\n        m = Meter1(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1',ts= datetime.datetime.now() - datetime.timedelta(seconds=(102-i)))\n        #使用对象的save方法将数据存入数据库\n        m.save()\n    print(Meter1.select().count()) # 结果：100\n    #方法二\n    for i in range(1,11):\n        #也可以直接使用模型类的insert方法插入数据。\n        Meter1.insert(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1',ts= datetime.datetime.now() - datetime.timedelta(seconds=(12-i)))\n    print(Meter1.select().count()) # 结果：100\n    #如果不传入时间属性，则会以当前时刻为默认值传入\n    Meter1.insert(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1')\n    m = Meter1(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1')\n    m.save()\n\n查询单条数据：\n\n.. code-block:: python\n\n    #获取一条数据\n    #使用select()类方法获取查询字段（参数留空表示取全部字段），然后可以链式使用one方法获取第一条数据\n    res = Meter1.select().one()\n    print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n    #select函数中可以选择要读取的字段\n    res = Meter1.select(Meter1.cur,Meter1.desc).one()\n    print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n    #select函数中可以使用Model的类方法f()和fc()获取字符串形式的属性名与列名对应Field对象\n    res = Meter1.select(Meter1.f('cur'),Meter1.fc('c3'),Meter1.desc).one()\n    print(res.desc,res.curDouble,res.curInt,res.fc('c3'),res.f('cur'),res.ts)\n\n查询全部数据：\n\n.. code-block:: python\n\n    #获取一条数据\n    #使用select()类方法获取查询字段（参数留空表示取全部字段），然后可以链式使用all方法获取全部数据\n    res_all = Meter1.select().all()\n    for res in res_all:\n        print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n    #select函数中可以选择要读取的字段\n    res_all = Meter1.select(Meter1.cur,Meter1.desc).all()\n    for res in res_all:\n        print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n虽然TDengine提供了很多聚合和统计函数，但是把时序数据导入numpy或pandas等数据分析组件中进行处理的情况也是很常见的操作。\n下面介绍如何通过crown把结果数据导入numpy和pandas\n\n读取数据到numpy：\n\n.. code-block:: python\n\n    #通过all_raw函数可以获取二维数组格式的数据查询结果。结果每列代表的标题保存在结果对象的head属性中。\n    raw_results = Meter1.select(Meter1.cur,Meter1.curInt,Meter1.curDouble).all_raw()\n    #可以很方便的将结果转换为numpy数组对象\n    np_data = np.array(raw_results)\n    print(np_data)\n    print(raw_results.head)\n\n读取数据到pandas：\n\n.. code-block:: python\n\n    raw_results = Meter1.select().all_raw()\n    #使用以下方法，可以轻松的将数据导入pandas,并且使用时间点作为index,使用返回的数据标题作为列名。\n    pd_data = pd.DataFrame(raw_results,columns=raw_results.head).set_index('ts')\n    print(pd_data)\n\n选择列四则运算：\n\n.. code-block:: python\n\n    #使用select()类方法获取查询字段时，可以返回某列或多列间的值加、减、乘、除、取余计算结果（+ - * / %）\n    res_all = Meter1.select((Meter1.curDouble+Meter1.cur),Meter1.ts).all()\n    for res in res_all:\n        print(res.get(Meter1.curDouble+Meter1.cur),res.ts) #返回的结果对象可以用get方法获取原始计算式结果\n\n    #字段别名\n    res_all = Meter1.select(((Meter1.curDouble+Meter1.cur)*Meter1.curDouble).alias('new_name'),Meter1.ts).all() #给运算式起别名（不仅运算式，其他放在select函数中的任何属性都可以使用别名）\n    for res in res_all:\n        print(res.new_name,res.ts) #使用别名获取运算结果\n\nwhere查询条件：\n\n.. code-block:: python\n\n    #可以在select函数后链式调用where函数进行条件限\n    one_time =datetime.datetime.now() - datetime.timedelta(hours=10)\n    ress = Meter1.select().where(Meter1.ts > one_time).all()\n    #限定条件可以使用 > < == >= <= != and or ! 等。字符类型的字段可以使用 % 作为模糊查询（相当于like）\n    # 逻辑操作符号 |: 或 &：与 ~：非。（注意：做逻辑操作符号的表达式需要用括号括起来）\n    ress = Meter1.select().where((Meter1.cur > 0) | (Meter1.desc % 'g%')).all()\n    #where函数可以接收任意多参数，每个参数为一个限定条件，参数条件之间为\"与\"的关系。\n    ress = Meter1.select().where(Meter1.cur > 0, Meter1.ts > one_time, Meter1.desc % '%1').all()\n\n分页与limit：\n\n.. code-block:: python\n\n    #可以在select函数后链式调用paginate函数进行分页操作，以下例子为取第6页 每页5条数据。\n    ress_1 = Meter1.select().paginate(6,page_size=5).all()\n    ress_2 = Meter1.select().paginate(6).all() #默认page_size为20\n    #可以在select函数后链式调用limit函数和offset函数条数限制和定位操作。\n    ress_3 = Meter1.select().limit(2).offset(5).all()\n    ress_4 = Meter1.select().limit(2).all()\n\n排序（目前tdengine只支持主键排序）：\n\n.. code-block:: python\n\n    #可以在select函数后链式调用desc或者asc函数进行时间轴的正序或者倒序查询\n    res = Meter1.select().desc().one()\n    #定义模型类的时候定义默认排序方法\n    class Meter1(Model):\n        cur = FloatField(db_column='c1')\n        curInt = IntegerField(db_column='c2')\n        curDouble = DoubleField(db_column='c3')\n        desc = BinaryField(db_column='des')\n        dd = PrimaryKeyField().desc() #可以在定义主键的时候调用field的desc或asc方法定义默认排序\n        class Meta:\n            # order_by= ['-dd'] #也可以在元数据类中定义‘-dd’代表倒序‘dd’ 代表正序\n            database = db\n\n去重 ：\n\n.. code-block:: python\n\n    #可以在select函数后链式调用distinct函数对返回的数据列进行去重复操作\n    res = Meter1.select().distinct().all()\n\n聚合函数：\n\n.. code-block:: python\n\n    #count\n    count = Meter1.select().count() #统计行数\n    print(count) # 结果： 100\n    count = Meter1.select().count(Meter1.desc) #统计指定列非空行数\n    print(count) # 结果： 90\n    #avg（sum,stddev,min,max,first,last,last_row,spread使用方法与avg相同）\n    avg1 = Meter1.select().avg(Meter1.cur,Meter1.curDouble.alias('aa')) #可以同时获取多列，并且可以使用别名\n    print(avg1.get(Meter1.cur.avg()),avg1.aa) #打印统计结果\n    #twa 必须配合where函数，且必须选择时间段\n    twa1 = Meter1.select().where(Meter1.ts > datetime.datetime(2020, 11, 19, 15, 9, 12, 946118),Meter1.ts < datetime.datetime.now()).twa(Meter1.cur,Meter1.curDouble.alias('aa'))\n    print(twa1.get(Meter1.cur.twa()),avg1.aa) #打印统计结果\n\n    #diff\n    diffs = Meter1.select().diff(Meter1.curInt.alias('aa')) #diff目前只可以聚合一个属性。\n    for diff1 in diffs:\n        print(diff1.aa,diff1.ts) # 时间点数据同时返回\n\n    #top(bottom函数使用方式相同)\n    tops = Meter1.select().top(Meter1.cur,3,alias='aa') # top函数需要提供要统计的属性，行数，以及别名\n    for top1 in tops:\n        print(top1.aa,top1.ts) # 时间点数据同时返回\n    tops = Meter1.select().top(Meter1.cur,3) # 可以不指定别名\n    for top1 in tops:\n        print(top1.get(Meter1.cur.top(3))) #不指定别名，需用使用get方法获取属性\n\n    #percentile (apercentile函数使用方式相同) \n    percentile1 = Meter1.select().percentile((Meter1.cur,1,'aa'),(Meter1.curDouble,2)) #每个属性参数为一个元组（数组），分别定义要统计的属性，P值（P值取值范围0≤P≤100），可选别名。\n    print(percentile1.aa)\n    print(percentile1.get(Meter1.curDouble.percentile(2)))#不指定别名，需用使用get方法获取属性\n\n    #leastsquares\n    leastsquares1 = Meter1.select().leastsquares((Meter1.cur,1,1,'aa'),(Meter1.curDouble,2,2)) #每个属性参数为一个元组（数组），分别定义要统计的属性，start_val(自变量初始值)，step_val(自变量的步长值)，可选别名。\n    print(leastsquares1.aa) # 结果： {slop:-0.001595, intercept:0.212111}\n    print(leastsquares1.get(Meter1.curDouble.leastsquares(2,2))) #不指定别名，需用使用get方法获取属性\n\ngroup_by分组查询：\n\n.. code-block:: python\n\n    # 可以在链式调用中加入group_by函数指定要分组的字段。然后在select函数中指定要分组统计的聚合函数（支持的聚合函数有：count、avg、sum 、stddev、leastsquares、percentile、min、max、first、last）\n    groups= Meter1.select(Meter1.desc,Meter1.curInt.avg().alias('intavg'),Meter1.cur.count().alias('curcount')).group_by(Meter1.desc).all()\n    for group in groups:\n        print(group.desc)\n        if group.desc == 'g1':\n            # assert group.get(Meter1.curInt.count()) == 10\n            assert group.intavg == 5.5\n            assert group.curcount == 10\n        if group.desc == 'g2':\n            assert group.intavg == 10.5\n            assert group.curcount == 20\n\n时间维度聚合interval:\n\n.. code-block:: python\n\n    # 可以使用interval函数调用TDengine时间纬度聚合功能,使用方法如下 时间间隔与offset参数参考TDengine文档（s:秒，m:分钟，h:小时）。fill参数可选字符串(NONE | PREV | NULL | LINEAR)或者任意数值,例如：fill=1.2将会以固定值填充。\n    results= Meter1.select(Meter1.cur.avg().alias('aa'),Meter1.cur.first().alias('bb')).where(Meter1.ts > (datetime.datetime.now()-datetime.timedelta(days=1))).interval('10s',fill='PREV',offset='1m').all()\n    for result in results:\n        print(result.aa,result.bb)\n\njoin查询：\n\n目前并支持多表join查询，需要多表查询的情况请使用raw_sql函数，执行原始sql语句。以后的版本会补充此功能。\n\n\n超级表定义：\n\n.. code-block:: python\n\n    # 超级表模型类继承自SuperModel类\n    class Meters(SuperModel):\n        cur = FloatField(db_column='c1')\n        curInt = IntegerField(db_column='c2')\n        curDouble = DoubleField(db_column='c3')\n        desc = BinaryField(db_column='des')\n        class Meta:\n            database = db\n            db_table = 'meters'\n            # Meta类中定义的Field，为超级表的标签\n            location = BinaryField(max_length=30)\n            groupid = IntegerField(db_column='gid')\n\n超级表的建表、删表、检查表是否存在：\n\n.. code-block:: python\n\n    Meters.create_table(safe=True) #建表 safe：如果表存在，则跳过建表指令。命令运行成功放回True,失败raise错误\n    # db.create_table(Meters,safe=True) #通过数据库对象建表，功能同上\n    Meters.drop_table(safe=True) #删表 safe：如果表不存在，则跳过删表指令。命令运行成功放回True,失败raise错误\n    # db.drop_table(Meters,safe=True) #通过数据库对象删表，功能同上\n    Meters.supertable_exists() #查看表是否存在，存在返回True,不存在返回：False\n\n超级表动态建表：\n\n超级表除了使用定义模型类的方式建表外，也提供了动态定义字段建表的功能。\n\n.. code-block:: python\n\n    #可以使用SuperModel类的类方法dynamic_create_table方法动态建表，第一个参数为表名，然后需要指定数据库，与是否安全建表\n    # 需要额外提供tags参数，参数值为一个字典(使用方法如下例)，设置超级表所有的标签。\n    # 关键词参数可以任意多个，指定表中的字段。\n    Meter_dynamic= SuperModel.dynamic_create_table('meterSD',database=db,safe=True,tags={'gid':IntegerField(db_column='tag1')},test1 = FloatField(db_column='t1'),test2 = IntegerField(db_column='t2'))\n    # 函数返回的对象为SuperModel类对象。使用方法与静态继承的模型类相同。\n    Meter_dynamic.supertable_exists()\n    Meter_dynamic.drop_table()\n\n从表名建立对应的supermodel类：\n\n数据库中已有的数据库超级表，可以通过已知的表名建立对应的supermodel类。\n\n.. code-block:: python\n\n    sTable = SuperModel.supermodel_from_table('rule_10',db) # rule_10为数据表的表名\n    res = sTable.select().one() # 从表名新建的类和静态建立的类，使用方法完全一致\n\n从超级表建立子表：\n\n.. code-block:: python\n\n    SonTable_d3 = Meters.create_son_table('d3',location='beijing',groupid=3) #生成字表模型类的同时，自动在数据库中建表。\n\n    SonTable_d3.table_exists() # SonTable_d3的使用方法和继承自Modle类的模型类一样。可以进行插入与查询操作\n    # m = SonTable_d3(cur = 65.8,curInt=10,curDouble=1.1,desc='g1',ts = datetime.datetime.now())\n    # m.save()\n\n新增标签：\n\n.. code-block:: python\n\n    # 使用add_tags方法，可以给超级表新建多个标签。每个参数可以是一个Field对象（必须指定db_column属性）\n    Meters.add_tags(IntegerField(db_column='add_tag_1'),IntegerField(db_column='add_tag_4'),BinaryField(max_length=30,db_column='add_tag_5'))\n\n删除标签：\n\n.. code-block:: python\n\n    # 使用drop_tag方法可以删除超级表的标签，参数名为标签名，一次只能删除一个标签\n    Meters.drop_tag('add_tag_2')\n\n修改标签名：\n\n.. code-block:: python\n\n    # 使用change_tag_name方法可以修改超级表的标签名，参数名为要修改的标签名，和新的标签名。（注意：此方法只修改对应超级表的标签名，并不修改类的属性名）\n    Meters.change_tag_name('add_tag_1','add_tag_2')\n\n\n修改子表标签值：\n\n.. code-block:: python\n\n    TableT = Meters.create_son_table('d3_insert',location='beijing',gid=3)\n    # 子表可以通过change_tag_value方法修改自己的标签值。\n    TableT.change_tag_value(location='tianjin',gid = 6)\n\n\n\n关于debug信息打印：\n\n如需查看crown调用tdengine引擎时执行的sql语句和返回的原始数据。只需要配置crown模块的logger记录器的日志输出级别为debug即可。\n\n.. code-block:: python\n\n    import logging\n    from crown import logger\n\n    logger.setLevel(logging.DEBUG) #配置logger对象，即可输出执行debug信息",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/machine-w/crown",
    "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crown",
    "package_url": "https://pypi.org/project/crown/",
    "platform": "",
    "project_url": "https://pypi.org/project/crown/",
    "project_urls": {
      "Homepage": "https://github.com/machine-w/crown"
    },
    "release_url": "https://pypi.org/project/crown/0.1.7/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13030047,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c055f462d6041acab9c45ff3528e2ff309bd0fbc5f7c47bdba754668509ecbbb",
          "md5": "0441a39346576e66fb61a83d9e4722f7",
          "sha256": "a2721d28089bd72ffc8636efad69d26ce75d389781f6e6896920dbee42d17500"
        },
        "downloads": -1,
        "filename": "crown-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0441a39346576e66fb61a83d9e4722f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 24210,
        "upload_time": "2020-12-02T15:10:30",
        "upload_time_iso_8601": "2020-12-02T15:10:30.639495Z",
        "url": "https://files.pythonhosted.org/packages/c0/55/f462d6041acab9c45ff3528e2ff309bd0fbc5f7c47bdba754668509ecbbb/crown-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56d7c8100b7b6f209b3e69527970c65debe4b6c8623acbbecbe3ff63c0906c7e",
          "md5": "bc0236915fc7186c57522f9989c19a69",
          "sha256": "258e98c00516b7d8764e599352c276e094f987d89180e3c17692e5bfcd6e3d25"
        },
        "downloads": -1,
        "filename": "crown-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "bc0236915fc7186c57522f9989c19a69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26552,
        "upload_time": "2021-01-16T12:54:10",
        "upload_time_iso_8601": "2021-01-16T12:54:10.935674Z",
        "url": "https://files.pythonhosted.org/packages/56/d7/c8100b7b6f209b3e69527970c65debe4b6c8623acbbecbe3ff63c0906c7e/crown-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13277ed584de8ff88de5d8b1e47ee414fd21e982379ba5bff4a685d4de82cd7b",
          "md5": "e4fb3ed16c255c107ae19cdee83cf1a5",
          "sha256": "fcb7f571dea7a4422a81b6d4ea6036d627a587bb5f638dc1913045183b336f3b"
        },
        "downloads": -1,
        "filename": "crown-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e4fb3ed16c255c107ae19cdee83cf1a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27114,
        "upload_time": "2021-01-26T09:36:53",
        "upload_time_iso_8601": "2021-01-26T09:36:53.566417Z",
        "url": "https://files.pythonhosted.org/packages/13/27/7ed584de8ff88de5d8b1e47ee414fd21e982379ba5bff4a685d4de82cd7b/crown-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf38ad4024944bcbf7924bdf0ca94dfef3a777d8af9a06bd17df1bc3d9de90a8",
          "md5": "ad1149b1986613f6de2b0b6a6f905d79",
          "sha256": "97a7174c09af81bc3e55ea17bf4b15b18754bfb96dc2a5b7e7acca2ddde62197"
        },
        "downloads": -1,
        "filename": "crown-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ad1149b1986613f6de2b0b6a6f905d79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27966,
        "upload_time": "2021-01-28T09:53:19",
        "upload_time_iso_8601": "2021-01-28T09:53:19.455040Z",
        "url": "https://files.pythonhosted.org/packages/bf/38/ad4024944bcbf7924bdf0ca94dfef3a777d8af9a06bd17df1bc3d9de90a8/crown-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b36954e5f687896bc78e8c21d39656e582ee1d59d0d647cf34903159e6070b51",
          "md5": "4a8da9c9cb96ce1c0860d83c1dfd8710",
          "sha256": "4937c36dd907cd1aede5c3a1e3f4e7c1545dd67fce77a96a3a152a9625f68ca6"
        },
        "downloads": -1,
        "filename": "crown-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a8da9c9cb96ce1c0860d83c1dfd8710",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 29063,
        "upload_time": "2021-02-02T06:14:37",
        "upload_time_iso_8601": "2021-02-02T06:14:37.641231Z",
        "url": "https://files.pythonhosted.org/packages/b3/69/54e5f687896bc78e8c21d39656e582ee1d59d0d647cf34903159e6070b51/crown-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33e0f26c1528af9843d9c423550b575f3fc0b4a8f07fddd88e2abb6f7a0679a0",
          "md5": "9400550b6c14e63bd7f88ad8e984bc66",
          "sha256": "81e8df9a86d22a063b058b09e54ecce64d368960c550ef249ec3c432e1eeac2b"
        },
        "downloads": -1,
        "filename": "crown-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9400550b6c14e63bd7f88ad8e984bc66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 29082,
        "upload_time": "2021-02-02T08:36:20",
        "upload_time_iso_8601": "2021-02-02T08:36:20.162739Z",
        "url": "https://files.pythonhosted.org/packages/33/e0/f26c1528af9843d9c423550b575f3fc0b4a8f07fddd88e2abb6f7a0679a0/crown-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef626063a7e3804db25249b7234883c1479d008820c1b49ddcba434263f391e6",
          "md5": "f05a7a5dde05fb64bf87d594a092f231",
          "sha256": "a16a38eddfa3de7134822068ca1fb152300e1cc28eb68d6e65ab199b4236211d"
        },
        "downloads": -1,
        "filename": "crown-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f05a7a5dde05fb64bf87d594a092f231",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 29138,
        "upload_time": "2021-02-02T09:06:16",
        "upload_time_iso_8601": "2021-02-02T09:06:16.811761Z",
        "url": "https://files.pythonhosted.org/packages/ef/62/6063a7e3804db25249b7234883c1479d008820c1b49ddcba434263f391e6/crown-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bba68c01fcda23fce8a3e4dee86eefd478787a8c8f2b7ba2eed02a912b24360f",
          "md5": "7a8485e1fbecf71b7f758d9420aa8c3e",
          "sha256": "c7201aeeb538fc1286b9b7fe32b5be01240f05bc1b95147cf1e515eb6b0a4946"
        },
        "downloads": -1,
        "filename": "crown-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7a8485e1fbecf71b7f758d9420aa8c3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 29158,
        "upload_time": "2021-02-18T09:34:04",
        "upload_time_iso_8601": "2021-02-18T09:34:04.506360Z",
        "url": "https://files.pythonhosted.org/packages/bb/a6/8c01fcda23fce8a3e4dee86eefd478787a8c8f2b7ba2eed02a912b24360f/crown-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d433cb3fe61dcba1094476485bb2ffe09ddbce8898798ce10d3ab8d49d4fe9a",
          "md5": "4e5196889f11718026397d92fe1153a1",
          "sha256": "a13c86c093f7976d80bd9b388063fa00ed0f8d76721fd57b8e32bb2c4a277ba0"
        },
        "downloads": -1,
        "filename": "crown-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "4e5196889f11718026397d92fe1153a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 29667,
        "upload_time": "2022-02-28T03:37:41",
        "upload_time_iso_8601": "2022-02-28T03:37:41.069730Z",
        "url": "https://files.pythonhosted.org/packages/9d/43/3cb3fe61dcba1094476485bb2ffe09ddbce8898798ce10d3ab8d49d4fe9a/crown-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d433cb3fe61dcba1094476485bb2ffe09ddbce8898798ce10d3ab8d49d4fe9a",
        "md5": "4e5196889f11718026397d92fe1153a1",
        "sha256": "a13c86c093f7976d80bd9b388063fa00ed0f8d76721fd57b8e32bb2c4a277ba0"
      },
      "downloads": -1,
      "filename": "crown-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "4e5196889f11718026397d92fe1153a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 29667,
      "upload_time": "2022-02-28T03:37:41",
      "upload_time_iso_8601": "2022-02-28T03:37:41.069730Z",
      "url": "https://files.pythonhosted.org/packages/9d/43/3cb3fe61dcba1094476485bb2ffe09ddbce8898798ce10d3ab8d49d4fe9a/crown-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}