{
  "info": {
    "author": "Roy Elkabetz",
    "author_email": "elkabetzroy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Tensor Networks Simple-Update (SU) Algorithm\n> This python package contains an implementation of the Simple-Update Tensor Network algorithm as described in the paper - A universal tensor network algorithm for any infinite lattice by Saeed S. Jahromi and Roman Orus [1].\n\n \n### Installation\n```bash\npip3 install tnsu\n```\n\n### Documentation\nFor details about the `tnsu` package, see the github repo in [this link](https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update).\n\n\n\n## Simple Update\nSimple Update (SU) is a Tensor Networks (TN) algorithm used for finding ground-state Tensor Network representations of [gapped local Hamiltonians](https://en.wikipedia.org/wiki/Gapped_Hamiltonian). It is the TN most efficient and least accurate algorithm for computing ground states. However, it is able to capture many interesting non-trivial phenomena in n-D quantum spin-lattice physics. The algorithm is based on an Imaginary Time-Evolution (ITE) scheme, where the ground-state of a given Hamiltonian can be obtained following the next relation\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/imaginary_time_evolution_ground_state.png?raw=true\" width=\"300\" height=\"\">\n\nIn order to actually use the time-evolution method in TN we need to break down the time-evolution operator into local terms. We do that with the help of the [Suzuki-Trotter expansion](https://en.wikipedia.org/wiki/Time-evolving_block_decimation#The_Suzuki%E2%80%93Trotter_expansion). Specifically for Projected Entangled Pair States (PEPS) TN, each local term corresponds to a single pair of tensors. The Suzuki-Trotter approximation steps for ITE are as follows\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/imaginary_time_evolution_operator.png?raw=true\" width=\"300\" height=\"\">\n\nwhere finally,\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/ITE_local_gate.png?raw=true\" width=\"200\" height=\"\">\n\nWhen performing the ITE scheme, the TN virtual bond dimension increases, therefore, after every few ITE iterations we need to truncate the bond dimensions so the number of parameters in the tensor network state would stay bounded. The truncation step is implemented via a [Singular Value Decomposition (SVD)](https://en.wikipedia.org/wiki/Singular_value_decomposition) step. A full step-by-step illustrated description of the Simple Update algorithm (which is based on the ITE scheme) is depicted below. \n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/simple_update_algorithm.png?raw=true\" width=\"1000\" height=\"\">\n\nFor a more comprehensive explanation of the algorithm, the interested reader should check out [1].\n\n## The Code\n\n\nThe [`src.tnsu`](/src/tnsu) folder contains the source code for this project\n\n| #   | file                                         | Subject             | \n|:----:|------------------------------------------------|:-----------------:|\n| 1   | `tensor_network.py`                   | a Tensor Network class object which tracks the tensors, weights and their connectivity| \n| 2   | `simple_update.py`         | a Tensor Network Simple-Update algorithm class, which gets as an input a `TensorNetwork` object and perform a simple-update run on it using Imaginary Time Evolution. | \n| 3  | `structure_matrix_constructor.py`         | Contains a dictionary of common iPEPS structure matrices and also functionality construction of 2D square and rectangular lattices structure matrices (**still in progress**).\n| 4  | `examples.py`         | Few scripts for loading a tensor network state from memory and a full Antiferromagnetic Heisenberg model PEPS experiment.|\n| 5  | `ncon.py`         | A module for tensors contraction in python copied from the [ncon](https://github.com/mhauru/ncon) github repository.|\n| 6  | `utils.py`         | A general utility module.|\n\n\n\n## Examples\n\n### Example 1: Spin 1/2 2D star lattice iPEPS Antiferromagnetic Heisenberg model simulation\n\nImporting files\n```python\nimport numpy as np\nfrom tnsu.tensor_network import TensorNetwork\nimport tnsu.simple_update as su\nimport structure_matrix_constructor as stmc\n```\nFirst let us get the iPEPS star structure matrix\n\n```python\nsmat = stmc.infinite_structure_matrix_dict('star')\n```\n\nNext we initialize a random Tensor Network with a virtual bond dimension of size 2 and a physical spin dimension also of size 2\n```python\ntensornet = TensorNetwork(structure_matrix=smat, virtual_size=2, spin_dim=2)\n```\n\nThen, set up the spin 1/2 operators and the simple update class parameters \n```python\n# pauli matrices\npauli_x = np.array([[0, 1],\n                    [1, 0]])\npauli_y = np.array([[0, -1j],\n                    [1j, 0]])\npauli_z = np.array([[1., 0],\n                    [0, -1]])\n# ITE time constants\ndts = [0.1, 0.01, 0.001, 0.0001, 0.00001]\n\n# Local spin operators\ns = [pauli_x / 2., pauli_y / 2., pauli_z / 2.]\n\n# The Hamiltonian's 2-body interaction constants \nj_ij = [1., 1., 1., 1., 1., 1.]\n\n# The Hamiltonian's 1-body field constant\nh_k = 0.\n\n# The field-spin operators (which are empty in that example)\ns_k = []\n\n# The maximal virtual bond dimension (used for SU truncation)\nd_max = 2\n```\n\nNow, we initialize the simple update class\n```python\nstar_su = su.SimpleUpdate(tensor_network=tensornet, \n                          dts=dts, \n                          j_ij=j_ij, \n                          h_k=h_k, \n                          s_i=s, \n                          s_j=s, \n                          s_k=s_k, \n                          d_max=d_max, \n                          max_iterations=200, \n                          convergence_error=1e-6, \n                          log_energy=False,\n                          print_process=False)\n```\n\nand run the algorithm\n```python\nstar_su.run()\n```\n\nIt is also possible to compute a single and double site expectation values like energy, magnetizatoin etc, with the following\n```python\nenergy_per_site = star_su.energy_per_site()\nz_magnetization_per_site = star_su.expectation_per_site(operator=pauli_z / 2)\n```\n\nor manually calculating single and double site reduced-density matrices and expectations following the next few lines of code\n```python\ntensor = 0\nedge = 1\ntensor_pair_operator = np.reshape(np.kron(pauli_z / 2, pauli_z / 2), (2, 2, 2, 2))\nstar_su.tensor_rdm(tensor_index=tensor)\nstar_su.tensor_pair_rdm(common_edge=edge)\nstar_su.tensor_expectation(tensor_index=tensor, operator=pauli_z / 2)\nstar_su.tensor_pair_expectation(common_edge=edge, operator=tensor_pair_operator)\n```\n\n### Example 2: The Trivial Simple-Update Algorithm\nThe trivial SU algorithm is equivalent to the SU algorithm without the ITE and truncation steps; it only consists of consecutive SVD steps over each TN edge (the same as contracting ITE gate with zero time-step). The trivial-SU algorithm's fixed point corresponds to a canonical representation of the tensor network representations we started with. A tensor network canonical representation is strongly related to the Schmidt Decomposition operation over all the tensor network's edges, where for a tensor networks with no loops (tree-like topology) each weight vector in the canonical representation corresponds to the Schmidt values of partitioning the network into two distinct networks along that edge. When the given tensor network has loops in it, it is no longer possible to partition the network along a single edge into to distinguished parts. Therefore, the weight vectors are no longer equal to the Schmidt values but rather become some general approximation of the tensors' environments in the network. A very interesting property of the trivial simple update algorithm is that it is identical to the [Belief Propagation (BP)](https://en.wikipedia.org/wiki/Belief_propagation) algorithm. The Belief Propagation (BP) algorithm is a famous iterative-message-passing algorithm in the world of Probabilistic Graphical Models (PGM), where it is used as an approximated inference tool. For a detailed description about the duality between the trivial-Simple-Update and the Belief Propagation algorithm see Refs [3][4].\n\nIn order to implement the trivial-SU algorithm we can initialize the simple update class with zero time step as follows\n```python\nsu.SimpleUpdate(tensor_network=tensornet, \n                dts=[0], \n                j_ij=j_ij, \n                h_k=0, \n                s_i=s, \n                s_j=s, \n                s_k=s_k, \n                d_max=d_max, \n                max_iterations=1000, \n                convergence_error=1e-6, \n                log_energy=False,\n                print_process=False)\n```\nthen, the algorithm will run 1000 iteration or until the maximal L2 distance between temporal consecutive weight vectors will be smaller then 1e-6.\n\n\nThere are more fully-written examples in the [`notebooks`](/notebooks) folder.\n\n### List of Notebooks\nThe notebooks below are not part of the package, they can be found in the `tnsu` github repository under `/notebooks`. You can run them locally with jupyter notebook or in google colab (which is preferable in case you don't want to burn your laptop's mother-board :) )\n\n| #   | file            | Subject                                         | Colab             | Nbviewer               |\n|:----:|:--------------:|:------------------------------------------------:|:-----------------:|:---------------------:|\n| 1   | `ipeps_energy_simulations.ipynb` | Computing ground-state energies of iPEPS Tensor Networks   | [![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/notebooks/ipeps_energy_simulations.ipynb)        | [![nbviewer](https://raw.githubusercontent.com/jupyter/design/master/logos/Badges/nbviewer_badge.svg)](https://nbviewer.jupyter.org/github/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/notebooks/ipeps_energy_simulations.ipynb)|\n| 2   | `Quantum_Ising_Model_Phase_Transition.ipynb` | Simulating the phase transition of the Quantum Transverse Field Ising model  | [![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/notebooks/Quantum_Ising_Model_Phase_Transition.ipynb)        | [![nbviewer](https://raw.githubusercontent.com/jupyter/design/master/logos/Badges/nbviewer_badge.svg)](https://nbviewer.jupyter.org/github/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/notebooks/Quantum_Ising_Model_Phase_Transition.ipynb)|\n| 3   | `Triangular_2d_lattice_BLBQ_Spin_1_simulation.ipynb` | Spin-1 BLBQ tringular 2D lattice phase transition   | [![Open In Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/notebooks/Triangular_2d_lattice_BLBQ_Spin_1_simulation.ipynb)        | [![nbviewer](https://raw.githubusercontent.com/jupyter/design/master/logos/Badges/nbviewer_badge.svg)](https://nbviewer.jupyter.org/github/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/notebooks/Triangular_2d_lattice_BLBQ_Spin_1_simulation.ipynb)|\n\n\n## Simulations\n### Spin-1/2 Antiferromagnetic Heisenberg (AFH) model\n\nBelow are some result of ground-state energy per-site simulated with the Simple Update algorithm over AFH Chain, Star, PEPS and Cube tensor networks. The AFH Hamiltonian is given by\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/hamiltonian_eq.png?raw=true\" width=\"\" height=\"60\">\n\nIn the case of the Star tensor network lattice the AFH Hamiltonian is composite of two parts which corresponds to different type of edges (see [1]).\nThe Chain, Star, PEPS and Cube infinite tensor networks are illustrated in the next figure.\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/Tensor_Networks_diagrams.png?raw=true\" width=\"1000\" height=\"\"> \n\n\nHere are the ground-state energy per-site vs inverse virtual bond-dimension simulations for the tensor networks diagrams above\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/chain_star_peps_cube_plots.png?raw=true\" width=\"1000\" height=\"\">\n\n### Quantum Ising Model on a 2D Spin-1/2 Lattice\nNext, we simulated the quantum Ising model on a 2D lattice with a transverse magnetic field. Its Hamiltonian is given by\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/ising_transverse_field.png?raw=true\" width=\"\" height=\"100\">\n\nIn the plots below one can see the simulated x, z magnetization (per-site) along with the simulated energy (per-site). We see that the SU algorithm is able to extract the phase transition of the model around h=3.2.\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/Ising_model.png?raw=true\" width=\"1000\" height=\"\">\n\n### Spin-1 Simulation of a Bilinear-Biquadratic Heisenberg model on a star 2D lattice\n\nFinally we simulated the BLBQ Hamiltonian which is given by the next equation\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/BLBQ_hamiltonian.png?raw=true\" width=\"300\" height=\"\">\n\nnotice that for 0 radian angle, this model coincides with the original AFH model. The energy, magnetization and Q-norm as a function of the angle for different bond dimension are plotted below. We can see that the simple-update algorithm is having a hard time to trace all the phase transitions of this model. However, we notice that for larger bond dimensions it seems like it captures the general behavior of the model's phase transition. For a comprehensive explanation and results (for triangular lattice see Ref [2])\n\n<img src=\"https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/main/assets/BLBQ_model_simulation_star.png?raw=true\" width=\"1000\" height=\"\">\n\n## References\n- [[1]](https://arxiv.org/abs/1808.00680) Saeed S. Jahromi, and Roman Orus - \"A universal tensor network algorithm for any infinite lattice\" (2019)\n- [[2]](https://arxiv.org/abs/1805.00354) Ido Niesen, Philippe Corboz - \"A ground state study of the spin-1 bilinear-biquadratic Heisenberg model on the triangular lattice using tensor networks\" (2018)\n- [[3]](https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.3.023073) Roy Alkabetz and Itai Arad - \"Tensor networks contraction and the belief propagation algorithm\" (2020)\n- [[4]](https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update/blob/0f7341e175c7f1fdd6723855749800927d37ebc8/theory/MSc_Thesis_Roy_Elkabetz.pdf) Roy Elkabetz - \"Using the Belief Propagation algorithm for finding Tensor Networks approximations of many-body ground states\" (2020)\n\n\n## Contact\n\nRoy Elkabetz - [elkabetzroy@gmail.com](mailto:elkabetzroy@gmail.com)\n\n## Citation\n\nTo cite this repository in academic works or any other purpose, please use the following BibTeX citation:\n```Latex\n@software{tnsu,\n    author = {Elkabetz, Roy},\n    title = {{tnsu: A python package for Tensor Networks Simple-Update simulations}},\n    url = {https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update},\n    version = {1.0.2},\n    year = {2022}\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update",
    "keywords": "Tensor-Networks,Simple-Update,Quantum-Information",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tnsu",
    "package_url": "https://pypi.org/project/tnsu/",
    "platform": null,
    "project_url": "https://pypi.org/project/tnsu/",
    "project_urls": {
      "Homepage": "https://github.com/RoyElkabetz/Tensor-Networks-Simple-Update"
    },
    "release_url": "https://pypi.org/project/tnsu/1.0.2/",
    "requires_dist": [
      "matplotlib",
      "numpy",
      "scipy",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "A package for Tensor-Networks Simple-Update simulations of quantum wave functions representations",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14462641,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c661633933bfdfc30d46aac9b5fc41a67867f420a3e451e2b269656e7f137e6",
          "md5": "3c9e01c0d16e10b66db3834f01ec57e8",
          "sha256": "77eff835ee6bb32002524c0a3283fd0ed4a9c17b945c30e6bcf844bc387eb65f"
        },
        "downloads": -1,
        "filename": "tnsu-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c9e01c0d16e10b66db3834f01ec57e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24147,
        "upload_time": "2022-07-16T19:34:40",
        "upload_time_iso_8601": "2022-07-16T19:34:40.084978Z",
        "url": "https://files.pythonhosted.org/packages/6c/66/1633933bfdfc30d46aac9b5fc41a67867f420a3e451e2b269656e7f137e6/tnsu-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d10d6fbe2a158d7a9d8cbf81f5bfcad52883e487a16c9f0c38b4d1e1d8d4132",
          "md5": "5426b5d49b684b72ef6349793edaa94a",
          "sha256": "c96bc6db4aa8479b404f6d019dc2b1df483431433a944dbcf4e20284b61c1c4f"
        },
        "downloads": -1,
        "filename": "tnsu-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5426b5d49b684b72ef6349793edaa94a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26933,
        "upload_time": "2022-07-16T19:34:42",
        "upload_time_iso_8601": "2022-07-16T19:34:42.561279Z",
        "url": "https://files.pythonhosted.org/packages/8d/10/d6fbe2a158d7a9d8cbf81f5bfcad52883e487a16c9f0c38b4d1e1d8d4132/tnsu-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dedce714e3a371c05668c736d95a019a01bb7f404f76b7a56d4f1355c079db8c",
          "md5": "2acf344404ecd792f364bc662ba43757",
          "sha256": "77aedd638669b6bb65252d1103e005a9cfc61df32955a7de0668e77038dae05b"
        },
        "downloads": -1,
        "filename": "tnsu-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2acf344404ecd792f364bc662ba43757",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3830248,
        "upload_time": "2022-07-16T23:27:13",
        "upload_time_iso_8601": "2022-07-16T23:27:13.938070Z",
        "url": "https://files.pythonhosted.org/packages/de/dc/e714e3a371c05668c736d95a019a01bb7f404f76b7a56d4f1355c079db8c/tnsu-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f46b3af2423f66f70408151b5e14c9e993262f10d181bb4fa6d3491658b061ea",
          "md5": "2489c4c91503a54e34379d423651ddf5",
          "sha256": "5656f4b2eaaef74071432ab2b0a296f178357889e10a73a7f428ea2f54c9c1bf"
        },
        "downloads": -1,
        "filename": "tnsu-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2489c4c91503a54e34379d423651ddf5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3821878,
        "upload_time": "2022-07-16T23:27:30",
        "upload_time_iso_8601": "2022-07-16T23:27:30.214118Z",
        "url": "https://files.pythonhosted.org/packages/f4/6b/3af2423f66f70408151b5e14c9e993262f10d181bb4fa6d3491658b061ea/tnsu-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e50933d75d014917cef38a2b3c1ba91450a10b641bf9aa67d60a6dd4bf85d03",
          "md5": "7612b4b76b6f2d7bfcb4dfee2f93b23b",
          "sha256": "f8f8233e84b3a9243843bd2ffdffb7cc8ab1500032baa4b7d7f100032eb6e75e"
        },
        "downloads": -1,
        "filename": "tnsu-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7612b4b76b6f2d7bfcb4dfee2f93b23b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3671814,
        "upload_time": "2022-07-17T18:38:11",
        "upload_time_iso_8601": "2022-07-17T18:38:11.081501Z",
        "url": "https://files.pythonhosted.org/packages/5e/50/933d75d014917cef38a2b3c1ba91450a10b641bf9aa67d60a6dd4bf85d03/tnsu-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e97097ec50be63fb28db4234bb26c5317f479a47c3def05e9e04fd2b4033dc86",
          "md5": "15bcb1cf64542339118e261f3c541713",
          "sha256": "74e9e5b72efaf7f8369272d29d756dc09a628df45966e27be0241afcbf7b6496"
        },
        "downloads": -1,
        "filename": "tnsu-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15bcb1cf64542339118e261f3c541713",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3663817,
        "upload_time": "2022-07-17T18:38:21",
        "upload_time_iso_8601": "2022-07-17T18:38:21.644136Z",
        "url": "https://files.pythonhosted.org/packages/e9/70/97ec50be63fb28db4234bb26c5317f479a47c3def05e9e04fd2b4033dc86/tnsu-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f220c12b1addee2ae7cdd81d981a8138e4080a760170fe564e2916495447d7f",
          "md5": "e4de1a3a901954108844496447901dbc",
          "sha256": "6a0bbebf831299641ee93f219c8df2fd33d5a34077e3ec9060a75fe1bde4e905"
        },
        "downloads": -1,
        "filename": "tnsu-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4de1a3a901954108844496447901dbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 3671914,
        "upload_time": "2022-07-17T20:40:46",
        "upload_time_iso_8601": "2022-07-17T20:40:46.536283Z",
        "url": "https://files.pythonhosted.org/packages/7f/22/0c12b1addee2ae7cdd81d981a8138e4080a760170fe564e2916495447d7f/tnsu-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5fea358f666d7381e80c833705037accef5ab5bfb19408469789d14f0ba77b",
          "md5": "02d5a7cea4fc63e8a2126f98c2aed59f",
          "sha256": "4356ae87cb766e2a209539048ab09024fa70725bbecaa442cd0664e1e9632009"
        },
        "downloads": -1,
        "filename": "tnsu-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "02d5a7cea4fc63e8a2126f98c2aed59f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 3664006,
        "upload_time": "2022-07-17T20:40:58",
        "upload_time_iso_8601": "2022-07-17T20:40:58.107199Z",
        "url": "https://files.pythonhosted.org/packages/3a/5f/ea358f666d7381e80c833705037accef5ab5bfb19408469789d14f0ba77b/tnsu-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f220c12b1addee2ae7cdd81d981a8138e4080a760170fe564e2916495447d7f",
        "md5": "e4de1a3a901954108844496447901dbc",
        "sha256": "6a0bbebf831299641ee93f219c8df2fd33d5a34077e3ec9060a75fe1bde4e905"
      },
      "downloads": -1,
      "filename": "tnsu-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4de1a3a901954108844496447901dbc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 3671914,
      "upload_time": "2022-07-17T20:40:46",
      "upload_time_iso_8601": "2022-07-17T20:40:46.536283Z",
      "url": "https://files.pythonhosted.org/packages/7f/22/0c12b1addee2ae7cdd81d981a8138e4080a760170fe564e2916495447d7f/tnsu-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a5fea358f666d7381e80c833705037accef5ab5bfb19408469789d14f0ba77b",
        "md5": "02d5a7cea4fc63e8a2126f98c2aed59f",
        "sha256": "4356ae87cb766e2a209539048ab09024fa70725bbecaa442cd0664e1e9632009"
      },
      "downloads": -1,
      "filename": "tnsu-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "02d5a7cea4fc63e8a2126f98c2aed59f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 3664006,
      "upload_time": "2022-07-17T20:40:58",
      "upload_time_iso_8601": "2022-07-17T20:40:58.107199Z",
      "url": "https://files.pythonhosted.org/packages/3a/5f/ea358f666d7381e80c833705037accef5ab5bfb19408469789d14f0ba77b/tnsu-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}