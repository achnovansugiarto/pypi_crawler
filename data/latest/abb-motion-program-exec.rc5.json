{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# abb_motion_program_exec\r\n\r\n[![](https://img.shields.io/badge/python-3.6+-blue.svg)](https://github.com/rpiRobotics/abb_motion_program_exec)\r\n[![](https://img.shields.io/pypi/v/abb-motion-program-exec)](https://pypi.org/project/abb-motion-program-exec/)\r\n\r\n`abb_motion_program_exec` provides a simple way to download and run a sequence of\r\n`MoveAbsJ`, `MoveJ`, `MoveL`, `MoveC`, and `WaitTime` commands on\r\nan ABB IRC5 robot controller. This program is intended to be a proof of\r\nconcept for more sophisticated controller interfaces. Multi-move control of two robots is also\r\nsupported. Externally Guided Motion (EGM) is also supported for joint target, pose target, and path correction modes.\r\n\r\nDocumentation can be found at: https://abb-motion-program-exec.readthedocs.io/\r\n\r\n## Installation\r\n\r\n`abb-motion-program-exec` is avaliable on PyPi.\r\n\r\n```\r\npip install abb-motion-program-exec\r\n```\r\n\r\nBegin by installing the software for the robot controller. This software can be\r\ninstalled manually by copying files to the robot controller and importing configuration files,\r\nor by using a RobotWare Add-In. The RobotWare Add-In is cleaner and probably more reliable,\r\nbut is also less flexible and requires using the Installation Manager which can be confusing. If\r\nyou aren't sure which to use, try using the manual installation first.\r\n\r\n* See [robot_setup_manual.md](docs/robot_setup_manual.md) for manual setup instructions.\r\n* See [robot_setup_robotware_addin.md](docs/robot_setup_robotware_addin.md) for RobotWare Add-In \r\n  setup instructions\r\n* See [robot_multimove_setup_manual.md](docs/robot_multimove_setup_manual.md) for ABB Multi-Move\r\n  setup to control two robots. See later sections of this doc for more information on Multi-Move.\r\n\r\nThis contains the robot-side code, that reads\r\nand executes the contents of `motion_program.bin`. `motion_program.bin`\r\ncontains the sequence of instructions to run, encoded in binary\r\nformat for fast interpretation.\r\n\r\n**Only one instance of a Robot Studio virtual controller can be run at a time.** Only\r\ninstances of Robot Studio can be run at a time running a single virtual controller. This is due to\r\nthe controller using TCP port 80 on the local computer to accept REST commands from Python. If\r\nmore than one controller is started, TCP port 80 will already be in use and can cause unpredictable\r\nbehavior. Restart the computer if connections cannot be made from Python to the controller. Multiple\r\nreal robots can be used concurrently since they will each have a unique IP address to bind port 80.\r\n\r\n### Python 3.6 Linux Install (Ubuntu Bionic)\r\n\r\nOlder versions of Python are not supported by the currently available protobuf package. Use the apt version instead.\r\n\r\n```\r\nsudo apt install python3-virtualenv python3-protobuf python3-numpy python3-wheel python3-setuptools\r\npython3 -m pip install --user abb-motion-program-exec\r\n```\r\n\r\n## Usage\r\n\r\nOnce the `abb_motion_program_exec.mod` has been loaded on the controller,\r\nthe Python module can be used to command motion sequences. The class\r\n`MotionProgram` contains is used to build the sequence of motions. It has\r\nthe following commands of interest:\r\n\r\n* `MoveAbsJ(to_joint_pos: jointtarget, speed: speeddata, zone: zonedata)` - Move the\r\n  robot to a specified joint waypoint.\r\n* `MoveJ(to_point: robtarget, speed: speeddata, zone: zonedata)` - Move the\r\n  robot to the specified Cartesian target using joint interpolation.\r\n* `MoveL(to_point: robtarget, speed: speeddata, zone: zonedata)` - Move\r\n  the robot to the specified Cartesian target using linear interpolation.\r\n* `MoveC(cir_point: robtarget, to_point: robtarget, speed: speeddata, zone: zonedata)` -\r\n  Move the robot to the specified Cartesian target circularly using an intermediate\r\n  waypoint.\r\n* `WaitTime(t: float)` - Wait a specified time in seconds.\r\n\r\nCalling each of these functions adds the command to the sequence.\r\n\r\nThe constructor for `MotionProgram` optionally takes a `tool` parameter.\r\nThis parameter is expected to be type `tooldata` and will be passed\r\nto each of the move commands. Because the tool is expected to be a\r\n`PERS` type by the ABB software, it can't be modified for each\r\nmotion command without a significant performance penalty.\r\n\r\n```python\r\nmy_motion_program = MotionProgram(tool=my_tool)\r\n```\r\n\r\nThe following types are defined as subclasses of `NamedTuple`:\r\n\r\n```python\r\nclass speeddata(NamedTuple):\r\n    v_tcp: float\r\n    v_ori: float\r\n    v_leax: float\r\n    v_reax: float\r\n\r\nclass zonedata(NamedTuple):\r\n    finep: bool\r\n    pzone_tcp: float\r\n    pzone_ori: float\r\n    pzone_eax: float\r\n    zone_ori: float\r\n    zone_leax: float\r\n    zone_reax: float\r\n\r\nclass jointtarget(NamedTuple):\r\n    robax: np.ndarray # shape=(6,)\r\n    extax: np.ndarray # shape=(6,)\r\n\r\nclass pose(NamedTuple):\r\n    trans: np.ndarray # [x,y,z]\r\n    rot: np.ndarray # [qw,qx,qy,qz]\r\n\r\nclass confdata(NamedTuple):\r\n    cf1: float\r\n    cf4: float\r\n    cf6: float\r\n    cfx: float\r\n\r\nclass robtarget(NamedTuple):\r\n    trans: np.ndarray # [x,y,z]\r\n    rot: np.ndarray # [qw,qx,qy,qz]\r\n    robconf: confdata # \r\n    extax: np.ndarray # shape=(6,)\r\n\r\nclass loaddata(NamedTuple):\r\n    mass: float\r\n    cog: np.ndarray # shape=(3,)\r\n    aom: np.ndarray # shape=(4,)\r\n    ix: float\r\n    iy: float\r\n    iz: float\r\n\r\nclass tooldata(NamedTuple):\r\n    robhold: bool\r\n    tframe: pose\r\n    tload : loaddata\r\n\r\n```\r\n\r\nSee the ABB Robotics manual \"Technical reference manual RAPID \r\nInstructions, Functions and Data types\" for more details on these data\r\ntypes. Note that `pos`, `orient`, `robjoint`, and `extjoint` are\r\nimplemented using numpy arrays or lists.\r\n\r\nThe following standard `speeddata` are available in the module:\r\n`v5`, `v10`, `v20`, `v30`, `v40`, `v50`, `v60`, `v80`, `v100`,\r\n`v200`, `v300`, `v400`, `v500`, `v600`, `v800`, `v1000`, `v1500`,\r\n`v2000`, `v2500`, `v3000`, `v4000`, `v5000`, `v6000`, `v7000`,\r\n`vmax`.\r\n\r\nThe following standard `zonedata` are available in the module:\r\n`fine`, `z0`, `z1`, `z5`, `z10`, `z15`, `z20`, `z30`, `z40`,\r\n`z50`, `z60`, `z80`, `z100`, `z150`, `z200`.\r\n\r\nThe following `tooldata` are available in the module: `tool0`\r\n\r\nOnce the program is complete, it can be executed on the robot using\r\n`MotionProgramExecClient`. The constructor is by default:\r\n\r\n```\r\nmp_client = MotionProgramClient(base_url='http://127.0.0.1:80', username='Default User', password='robotics')\r\n```\r\n\r\nThe `base_url`, `username`, and `password` should be adjusted to the actual robot. The\r\nclient using ABB Web Services. `base_url` must be set to the IP address of the\r\nrobot, or using `localhost` if using the simulator.\r\n\r\nOnce the client is constructed, it can be used to execute the program:\r\n\r\n```python\r\nlog_results = mp_client.execute_motion_program(mp)\r\n```\r\n\r\n`log_results` is a tuple containing the results of the motion:\r\n\r\n```python\r\nclass MotionProgramResultLog(NamedTuple):\r\n    timestamp: str\r\n    column_headers: List[str]\r\n    data: np.array\r\n```\r\n\r\n`timestamp` is a string timestamp for the data. `column_headers` is a list of strings containing the labels of the\r\ncolumns of data. `data` contains a float32 numpy 2D array of the data, with each row being a sample.\r\n\r\nFor a single robot, the data has the following columns:\r\n\r\n* `timestamp` - The time of the row. This is time from the startup of the logger task in seconds.\r\n  Subtract the initial time from all samples to get a 0 start time for the program.\r\n* `cmd_num` - The currently executing command number. Use `get_program_rapid()` to print out\r\n  the program with command numbers annotated.\r\n* `J1` - Joint 1 position in degrees\r\n* `J2` - Joint 2 position in degrees\r\n* `J3` - Joint 3 position in degrees\r\n* `J4` - Joint 4 position in degrees\r\n* `J5` - Joint 5 position in degrees\r\n* `J6` - Joint 6 position in degrees\r\n\r\nThe field `column_headers` contains a list of the column headers.\r\n\r\n## Python module installation\r\n\r\nThe `abb_motion_program_exec` module is available on PyPI and can be installed using pip:\r\n\r\n```\r\npip install abb_motion_program_exec\r\n```\r\n\r\nFor development, use of a `virtualenv` is recommended. Use editable install with the virtualenv:\r\n\r\n```\r\npip install -e .\r\n```\r\n\r\n## Externally Guided Motion (EGM)\r\n\r\nSee [egm.md](docs/egm.md) for instructions on using EGM.\r\n\r\n## Example\r\n\r\n```python\r\nimport abb_motion_program_exec as abb\r\n\r\nj1 = abb.jointtarget([10,20,30,40,50,60],[0]*6)\r\nj2 = abb.jointtarget([-10,15,35,10,95,-95],[0]*6)\r\nj3 = abb.jointtarget([15,-5,25,83,-84,85],[0]*6)\r\n\r\nmy_tool = abb.tooldata(True,abb.pose([0,0,0.1],[1,0,0,0]),abb.loaddata(0.001,[0,0,0.001],[1,0,0,0],0,0,0)) \r\n\r\nmp = abb.MotionProgram(tool=my_tool)\r\nmp.MoveAbsJ(j1,abb.v1000,abb.fine)\r\nmp.MoveAbsJ(j2,abb.v5000,abb.fine)\r\nmp.MoveAbsJ(j3,abb.v500,abb.fine)\r\nmp.MoveAbsJ(j2,abb.v5000,abb.z50)\r\nmp.MoveAbsJ(j3,abb.v500,abb.z200)\r\nmp.MoveAbsJ(j2,abb.v5000,abb.fine)\r\nmp.WaitTime(1)\r\n\r\nr1 = abb.robtarget([350., -100., 600.], [ 0.0868241, -0.0868241, 0.9924039, 0.0075961 ], abb.confdata(-1,0,-1,0),[0]*6)\r\nr2 = abb.robtarget([370., 120., 620. ], [ 0.0868241, 0.0868241, 0.9924039, -0.0075961], abb.confdata(0,-1,0,0),[0]*6)\r\n\r\nr3 = abb.robtarget([400., -200., 500.], [0.7071068, 0., 0.7071068, 0.], abb.confdata( -1.,  -3., 2.,  0.),[0]*6)\r\nr4 = abb.robtarget([400., 0., 580.], [0.7071068, 0., 0.7071068, 0.], abb.confdata(0.,  -3., 2.,  0.), [0]*6)\r\nr5 = abb.robtarget([400., 200., 500.], [0.7071068, 0., 0.7071068, 0.], abb.confdata(0.,  -2., 1.,  0.),[0]*6)\r\n\r\nmp.MoveJ(r1,abb.v500,abb.fine)\r\nmp.MoveJ(r2,abb.v400,abb.fine)\r\nmp.MoveJ(r1,abb.v500,abb.z100)\r\nmp.MoveJ(r2,abb.v400,abb.z100)\r\nmp.MoveJ(r1,abb.v500,abb.fine)\r\nmp.WaitTime(1.5)\r\n\r\nmp.MoveJ(r3,abb.v5000,abb.fine)\r\nmp.MoveL(r4,abb.v200,abb.fine)\r\nmp.MoveL(r3,abb.v200,abb.fine)\r\nmp.MoveL(r4,abb.v1000,abb.z100)\r\nmp.MoveL(r3,abb.v1000,abb.z100)\r\nmp.MoveL(r4,abb.v1000,abb.fine)\r\nmp.WaitTime(2.5)\r\n\r\nmp.MoveJ(r3,abb.v5000,abb.fine)\r\n\r\nmp.MoveC(r4,r5,abb.v200,abb.z10)\r\nmp.MoveC(r4,r3,abb.v50,abb.fine)\r\n\r\n# Print out RAPID module of motion program for debugging\r\nprint(mp.get_program_rapid())\r\n\r\n# Execute the motion program on the robot\r\n# Change base_url to the robot IP address\r\nclient = abb.MotionProgramExecClient(base_url=\"http://127.0.0.1:80\")\r\nlog_results = client.execute_motion_program(mp)\r\n\r\n# log_results.data is a numpy array\r\nimport matplotlib.pyplot as plt\r\nfig, ax1 = plt.subplots()\r\nlns1 = ax1.plot(log_results.data[:,0], log_results.data[:,2:])\r\nax1.set_xlabel(\"Time (s)\")\r\nax1.set_ylabel(\"Joint angle (deg)\")\r\nax2 = ax1.twinx()\r\nlns2 = ax2.plot(log_results.data[:,0], log_results.data[:,1], '-k')\r\nax2.set_ylabel(\"Command number\")\r\nax2.set_yticks(range(-1,int(max(log_results.data[:,1]))+1))\r\nax1.legend(lns1 + lns2, log_results.column_headers[2:] + [\"cmdnum\"])\r\nax1.set_title(\"Joint motion\")\r\nplt.show()\r\n\r\n```\r\n\r\n\r\n## Multi-Move Robot Example\r\n\r\nTwo robots can be controlled using ABB Multi-Move. See \r\n[robot_multimove_setup_manual.md](docs/robot_multimove_setup_manual.md) for setup instructions.\r\n\r\nThey must have exactly the same number of motion commands. The commands\r\nare passed with the `\\ID` parameter corresponding to the command number. `SyncMoveOn` is activated\r\nto cause the robots to move in sync. The `execute_multimove_motion_program()` function\r\nof `MotionProgramExecClient` is used to send multi-move programs to the robot.\r\n\r\n```python\r\nimport abb_motion_program_exec as abb\r\n\r\n# Fill motion program for T_ROB1\r\nt1 = abb.robtarget([575,-200,1280],[0,-.707,0,.707],abb.confdata(0,0,-1,1),[0]*6)\r\nt2 = abb.robtarget([575,200,1480],[0,-.707,0,.707],abb.confdata(-1,-1,0,1),[0]*6)\r\nt3 = abb.robtarget([575,0,1280],[0,-.707,0,.707],abb.confdata(-1,-1,0,1),[0]*6)\r\n\r\nmy_tool = abb.tooldata(True,abb.pose([0,0,0.1],[1,0,0,0]),abb.loaddata(0.001,[0,0,0.001],[1,0,0,0],0,0,0)) \r\n\r\nmp = abb.MotionProgram(tool=my_tool)\r\nmp.SyncMoveOn()\r\nmp.MoveAbsJ(abb.jointtarget([5,-20,30,27,-11,-27],[0]*6),abb.v1000,abb.fine)\r\nmp.MoveL(t1,abb.v1000,abb.fine)\r\nmp.MoveJ(t2,abb.v5000,abb.fine)\r\nmp.MoveL(t3,abb.v500,abb.fine)\r\nmp.WaitTime(1)\r\nmp.MoveL(t1,abb.v5000,abb.z50)\r\nmp.MoveJ(t2,abb.v500,abb.z200)\r\nmp.MoveL(t3,abb.v5000,abb.fine)\r\n\r\n# Fill motion program for T_ROB2. Both programs must have\r\n# same number of commands\r\nt1_2 = abb.robtarget([250,-200,1280],[.707,0,.707,0],abb.confdata(-1,-1,0,1),[0]*6)\r\nt2_2 = abb.robtarget([250,200,1480],[.707,0,.707,0],abb.confdata(0,0,-1,1),[0]*6)\r\nt3_2 = abb.robtarget([250,0,1280],[.707,0,.707,0],abb.confdata(0,0,0,1),[0]*6)\r\n\r\nmy_tool2 = abb.tooldata(True,abb.pose([0,0,0.5],[1,0,0,0]),abb.loaddata(0.1,[0,0,0.1],[1,0,0,0],0,0,0)) \r\n\r\nmp2 = abb.MotionProgram(tool=my_tool2)\r\nmp2.SyncMoveOn()\r\nmp2.MoveAbsJ(abb.jointtarget([1,1,40,2,-40,-2],[0]*6),abb.v1000,abb.fine)\r\nmp2.MoveJ(t1_2,abb.v1000,abb.fine)\r\nmp2.MoveL(t2_2,abb.v5000,abb.fine)\r\nmp2.MoveL(t3_2,abb.v500,abb.fine)\r\nmp2.WaitTime(1)\r\nmp2.MoveL(t1_2,abb.v5000,abb.z50)\r\nmp2.MoveL(t2_2,abb.v500,abb.z200)\r\nmp2.MoveL(t3_2,abb.v5000,abb.fine)\r\n\r\n\r\n# Execute the motion program on the robot\r\n# Change base_url to the robot IP address\r\nclient = abb.MotionProgramExecClient(base_url=\"http://127.0.0.1:80\")\r\n\r\n# Execute both motion programs simultaneously\r\nlog_results = client.execute_multimove_motion_program([mp,mp2])\r\n\r\n# log_results.data is a numpy array\r\nimport matplotlib.pyplot as plt\r\nfig, ax1 = plt.subplots()\r\nlns1 = ax1.plot(log_results.data[:,0], log_results.data[:,2:8])\r\nax1.set_xlabel(\"Time (s)\")\r\nax1.set_ylabel(\"Joint angle (deg)\")\r\nax2 = ax1.twinx()\r\nlns2 = ax2.plot(log_results.data[:,0], log_results.data[:,1], '-k')\r\nax2.set_ylabel(\"Command number\")\r\nax2.set_yticks(range(-1,int(max(log_results.data[:,1]))+1))\r\nax1.legend(lns1 + lns2, log_results.column_headers[2:8] + [\"cmdnum\"])\r\nax1.set_title(\"Robot 1 joint motion\")\r\nfig, ax1 = plt.subplots()\r\nlns1 = ax1.plot(log_results.data[:,0], log_results.data[:,8:])\r\nax1.set_xlabel(\"Time (s)\")\r\nax1.set_ylabel(\"Joint angle (deg)\")\r\nax2 = ax1.twinx()\r\nlns2 = ax2.plot(log_results.data[:,0], log_results.data[:,1], '-k')\r\nax2.set_ylabel(\"Command number\")\r\nax2.set_yticks(range(-1,int(max(log_results.data[:,1]))+1))\r\nax1.legend(lns1 + lns2, log_results.column_headers[8:] + [\"cmdnum\"])\r\nax1.set_title(\"Robot 2 joint motion\")\r\nplt.show()\r\n```\r\n\r\nMulti-Move example using relative work object:\r\n\r\n```python\r\n# Multi-Move example using relative robot end effector poses\r\n\r\nimport abb_motion_program_exec as abb\r\n\r\n\r\n# Fill motion program for T_ROB1\r\n\r\n# Hold constant relative position for this example\r\nt1 = abb.robtarget([0,0,-200],[1,0,0,0],abb.confdata(0,0,1,1),[0]*6)\r\nt2 = t1\r\nt3 = t1\r\n\r\n\r\nmy_tool = abb.tooldata(True,abb.pose([0,0,0],[1,0,0,0]),abb.loaddata(0.001,[0,0,0.001],[1,0,0,0],0,0,0))\r\nmy_wobj = abb.wobjdata(False,False,\"ROB_2\",abb.pose([0,0,0],[1,0,0,0]),abb.pose([0,0,0],[0,0,1,0]))\r\n\r\nmp = abb.MotionProgram(tool=my_tool,wobj=my_wobj)\r\nmp.SyncMoveOn()\r\nmp.MoveAbsJ(abb.jointtarget([5,-20,30,27,-11,172],[0]*6),abb.v1000,abb.fine)\r\nmp.WaitTime(0.1)\r\nmp.MoveJ(t1,abb.v1000,abb.fine)\r\nmp.MoveJ(t1,abb.v1000,abb.fine)\r\nmp.MoveL(t1,abb.v1000,abb.fine)\r\n\r\n# Fill motion program for T_ROB2. Both programs must have\r\n# same number of commands\r\nt1_2 = abb.robtarget([250,-200,1280],[.707,0,.707,0],abb.confdata(-1,-1,0,1),[0]*6)\r\nt2_2 = abb.robtarget([250,200,1480],[.707,0,.707,0],abb.confdata(0,0,-1,1),[0]*6)\r\nt3_2 = abb.robtarget([250,0,1280],[.707,0,.707,0],abb.confdata(0,0,0,1),[0]*6)\r\n\r\nmy_tool2 = abb.tooldata(True,abb.pose([0,0,0.5],[1,0,0,0]),abb.loaddata(0.1,[0,0,0.1],[1,0,0,0],0,0,0)) \r\n\r\nmp2 = abb.MotionProgram(tool=my_tool2)\r\nmp2.SyncMoveOn()\r\nmp2.MoveAbsJ(abb.jointtarget([1,1,40,2,-40,-2],[0]*6),abb.v1000,abb.fine)\r\nmp2.WaitTime(0.1)\r\nmp2.MoveL(t1_2,abb.v1000,abb.fine)\r\nmp2.MoveL(t2_2,abb.v5000,abb.fine)\r\nmp2.MoveL(t3_2,abb.v500,abb.fine)\r\n\r\n# Execute the motion program on the robot\r\n# Change base_url to the robot IP address\r\nclient = abb.MotionProgramExecClient(base_url=\"http://127.0.0.1:80\")\r\n\r\n# Execute both motion programs simultaneously\r\nlog_results = client.execute_multimove_motion_program([mp,mp2])\r\n\r\n# log_results.data is a numpy array\r\nimport matplotlib.pyplot as plt\r\nfig, ax1 = plt.subplots()\r\nlns1 = ax1.plot(log_results.data[:,0], log_results.data[:,2:8])\r\nax1.set_xlabel(\"Time (s)\")\r\nax1.set_ylabel(\"Joint angle (deg)\")\r\nax2 = ax1.twinx()\r\nlns2 = ax2.plot(log_results.data[:,0], log_results.data[:,1], '-k')\r\nax2.set_ylabel(\"Command number\")\r\nax2.set_yticks(range(-1,int(max(log_results.data[:,1]))+1))\r\nax1.legend(lns1 + lns2, log_results.column_headers[2:8] + [\"cmdnum\"])\r\nax1.set_title(\"Robot 1 joint motion\")\r\nfig, ax1 = plt.subplots()\r\nlns1 = ax1.plot(log_results.data[:,0], log_results.data[:,8:])\r\nax1.set_xlabel(\"Time (s)\")\r\nax1.set_ylabel(\"Joint angle (deg)\")\r\nax2 = ax1.twinx()\r\nlns2 = ax2.plot(log_results.data[:,0], log_results.data[:,1], '-k')\r\nax2.set_ylabel(\"Command number\")\r\nax2.set_yticks(range(-1,int(max(log_results.data[:,1]))+1))\r\nax1.legend(lns1 + lns2, log_results.column_headers[8:] + [\"cmdnum\"])\r\nax1.set_title(\"Robot 2 joint motion\")\r\nplt.show()\r\n\r\n```\r\n\r\n## License\r\n\r\nApache 2.0 License, Copyright 2022 Wason Technology, LLC, Rensselaer Polytechnic Institute\r\n\r\n## Acknowledgment\r\n\r\nThis work was supported in part by Subaward No. ARM-TEC-21-02-F19 from the Advanced Robotics for Manufacturing (\"ARM\") Institute under Agreement Number W911NF-17-3-0004 sponsored by the Office of the Secretary of Defense. ARM Project Management was provided by Christopher Adams. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of either ARM or the Office of the Secretary of Defense of the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes, notwithstanding any copyright notation herein.\r\n\r\nThis work was supported in part by the New York State Empire State Development Division of Science, Technology and Innovation (NYSTAR) under contract C160142. \r\n\r\n![](docs/figures/arm_logo.jpg) ![](docs/figures/nys_logo.jpg)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnwason/abb_motion_program_exec",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "abb-motion-program-exec",
    "package_url": "https://pypi.org/project/abb-motion-program-exec/",
    "platform": null,
    "project_url": "https://pypi.org/project/abb-motion-program-exec/",
    "project_urls": {
      "Homepage": "https://github.com/johnwason/abb_motion_program_exec"
    },
    "release_url": "https://pypi.org/project/abb-motion-program-exec/0.6.1/",
    "requires_dist": [
      "requests",
      "numpy",
      "abb-robot-client[aio]",
      "dataclasses ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "Python package to execute motion commands on ABB robots and log results",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16676302,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d328f4bda0b6c60a1d45c1365c4f34f77c60e03df4b8c673ed71050913fb97",
          "md5": "055f6f606b0777861d818afb8631cc46",
          "sha256": "234c5e574899029457745fb6a329d1f3a227eb59a364f44b049bb044df654741"
        },
        "downloads": -1,
        "filename": "abb_motion_program_exec-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "055f6f606b0777861d818afb8631cc46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12711,
        "upload_time": "2022-08-31T00:36:24",
        "upload_time_iso_8601": "2022-08-31T00:36:24.074262Z",
        "url": "https://files.pythonhosted.org/packages/b4/d3/28f4bda0b6c60a1d45c1365c4f34f77c60e03df4b8c673ed71050913fb97/abb_motion_program_exec-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69e191d11576464af37173a320eec4bbadaabe2e2125d3d4a6b4ed37c2e8512d",
          "md5": "43f142eeb94b4bedca7edf9838f0bb9b",
          "sha256": "d8a34611603374f02b8613197770fea5782f8be8d03cb975954e985c4d469668"
        },
        "downloads": -1,
        "filename": "abb_motion_program_exec-0.2.0.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43f142eeb94b4bedca7edf9838f0bb9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16785,
        "upload_time": "2022-08-31T00:43:42",
        "upload_time_iso_8601": "2022-08-31T00:43:42.997198Z",
        "url": "https://files.pythonhosted.org/packages/69/e1/91d11576464af37173a320eec4bbadaabe2e2125d3d4a6b4ed37c2e8512d/abb_motion_program_exec-0.2.0.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "873638a7eb8e0a41f339efd32a5afb1444814fe4b31957a266a6675017b8fd6e",
          "md5": "9b830c4a242f32d759577f039ff17e24",
          "sha256": "7de3276ab8d0d57f9d065011edd013c556b7d95c71d39e8e33fcf44c24d1d906"
        },
        "downloads": -1,
        "filename": "abb_motion_program_exec-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b830c4a242f32d759577f039ff17e24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27625,
        "upload_time": "2022-11-16T04:47:32",
        "upload_time_iso_8601": "2022-11-16T04:47:32.050201Z",
        "url": "https://files.pythonhosted.org/packages/87/36/38a7eb8e0a41f339efd32a5afb1444814fe4b31957a266a6675017b8fd6e/abb_motion_program_exec-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8da9f454bed2ad2373576ee9e0c5197c70a9f5dd80c1657561a439a78bdc738",
          "md5": "a728703b0a690facf3d2c340205d6764",
          "sha256": "0a8a0c082e4e4cdca6d7b49304e09bbadf45741796b7dd88042587250884a543"
        },
        "downloads": -1,
        "filename": "abb_motion_program_exec-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a728703b0a690facf3d2c340205d6764",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 36739,
        "upload_time": "2022-12-29T00:59:57",
        "upload_time_iso_8601": "2022-12-29T00:59:57.041613Z",
        "url": "https://files.pythonhosted.org/packages/c8/da/9f454bed2ad2373576ee9e0c5197c70a9f5dd80c1657561a439a78bdc738/abb_motion_program_exec-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ea447fdfaafdf81626663ed63d007a948f1c906b31b7de406a7006864b1027b",
          "md5": "36ddda3ce8fc67fca7c962d9d88c15ec",
          "sha256": "b8b4c114c9945326cdf1dc2955e8a67c4e1818635907716509ef677d3bd19df7"
        },
        "downloads": -1,
        "filename": "abb_motion_program_exec-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36ddda3ce8fc67fca7c962d9d88c15ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 36931,
        "upload_time": "2023-02-03T02:06:24",
        "upload_time_iso_8601": "2023-02-03T02:06:24.676056Z",
        "url": "https://files.pythonhosted.org/packages/8e/a4/47fdfaafdf81626663ed63d007a948f1c906b31b7de406a7006864b1027b/abb_motion_program_exec-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ea447fdfaafdf81626663ed63d007a948f1c906b31b7de406a7006864b1027b",
        "md5": "36ddda3ce8fc67fca7c962d9d88c15ec",
        "sha256": "b8b4c114c9945326cdf1dc2955e8a67c4e1818635907716509ef677d3bd19df7"
      },
      "downloads": -1,
      "filename": "abb_motion_program_exec-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36ddda3ce8fc67fca7c962d9d88c15ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 36931,
      "upload_time": "2023-02-03T02:06:24",
      "upload_time_iso_8601": "2023-02-03T02:06:24.676056Z",
      "url": "https://files.pythonhosted.org/packages/8e/a4/47fdfaafdf81626663ed63d007a948f1c906b31b7de406a7006864b1027b/abb_motion_program_exec-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}