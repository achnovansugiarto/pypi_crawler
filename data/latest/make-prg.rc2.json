{
  "info": {
    "author": "Michael Hall",
    "author_email": "michael@mbh.sh",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# make_prg\n\nA tool to create and update PRGs for input to [Pandora][pandora] and [Gramtools][gramtools] from a set of \nMultiple Sequence Alignments.\n\n![master branch badge](https://github.com/iqbal-lab-org/make_prg/actions/workflows/ci.yaml/badge.svg) \n[![codecov](https://codecov.io/github/iqbal-lab-org/make_prg/branch/master/graph/badge.svg?token=6IQSY13MSH)](https://codecov.io/github/iqbal-lab-org/make_prg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\n# Support\n\nWe fully support `make_prg` on `linux` with `python` versions `3.8`-`3.11`. For other operating systems, `make_prg`\ncan be run through containers.\n\n[TOC]: #\n\n## Table of Contents\n- [Install](#install)\n  - [No installation needed - precompiled portable binary](#no-installation-needed---precompiled-portable-binary)\n  - [pip](#pip)\n  - [conda](#conda)\n  - [Container](#container)\n- [Running on a sample example](#running-on-a-sample-example)\n- [Usage](#usage)\n\n## Install\n\n### No installation needed - precompiled portable binary\n\nYou can use `make_prg` with no installation at all by simply downloading the precompiled binary, and running it.\nIn this binary, all libraries are linked statically. Compilation is done using [PyInstaller](https://github.com/pyinstaller/pyinstaller).\n\n#### Requirements\n`GLIBC >= 2.27` (present on `Ubuntu >= 18.04`, `Debian >= 10`, `CentOS >= 8`, etc);\n\n#### Download\n```\nwget https://github.com/iqbal-lab-org/make_prg/releases/download/0.4.0/make_prg_0.4.0\n```\n\n#### Run\n```\nchmod +x make_prg_0.4.0\n./make_prg_0.4.0 -h\n```\n\n### pip\n\n**Requirements**: `python>=3.8,<=3.11`\n\n```sh\npip install make_prg\n```\n\n### conda\n\n```sh\nconda install -c bioconda make_prg\n```\n\n### Container\n\nDocker images are hosted at [quay.io].\n\n#### `singularity`\n\nPrerequisite: [`singularity`][singularity]\n\n```sh\nURI=\"docker://quay.io/iqballab/make_prg\"\nsingularity exec \"$URI\" make_prg --help\n```\n\nThe above will use the latest version. If you want to specify a version then use a\n[tag][quay.io] (or commit) like so.\n\n```sh\nVERSION=\"0.4.0\"\nURI=\"docker://quay.io/iqballab/make_prg:${VERSION}\"\n```\n\n#### `docker`\n\n[![Docker Repository on Quay](https://quay.io/repository/iqballab/make_prg/status \"Docker Repository on Quay\")](https://quay.io/repository/iqballab/make_prg)\n\nPrerequisite: [`docker`][docker]\n\n```sh\ndocker pull quay.io/iqballab/make_prg\ndocker run quay.io/iqballab/make_prg --help\n```\n\nYou can find all the available tags on the [quay.io repository][quay.io].\n\n## Running on a sample example\n\nTo see how to input files to both `make_prg from_msa` and `make_prg update`, and the outputs\nthey create on a sample example, see [sample example](sample_example).\n\n## Usage\n\n```\n$ make_prg --help\nusage: make_prg <subcommand> <options>\n\nSubcommand entrypoint\n\noptions:\n  -h, --help     show this help message and exit\n  -V, --version  show program's version number and exit\n\nAvailable subcommands:\n  \n    from_msa     Make PRG from multiple sequence alignment\n    update       Update PRGs given new sequences.\n```\n\n#### `from_msa`\n\n```\n$ make_prg from_msa --help\nusage: make_prg from_msa\n\noptions:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        Multiple sequence alignment file or a directory containing such files\n  -s SUFFIX, --suffix SUFFIX\n                        If the input parameter (-i, --input) is a directory, then filter for files with this suffix. If this parameter is not given, all files in the input directory is considered.\n  -o OUTPUT_PREFIX, --output-prefix OUTPUT_PREFIX\n                        Prefix for the output files\n  -f ALIGNMENT_FORMAT, --alignment-format ALIGNMENT_FORMAT\n                        Alignment format of MSA, must be a biopython AlignIO input alignment_format. See http://biopython.org/wiki/AlignIO. Default: fasta\n  -N MAX_NESTING, --max-nesting MAX_NESTING\n                        Maximum number of levels to use for nesting. Default: 5\n  -L MIN_MATCH_LENGTH, --min-match-length MIN_MATCH_LENGTH\n                        Minimum number of consecutive characters which must be identical for a match. Default: 7\n  -O OUTPUT_TYPE, --output-type OUTPUT_TYPE\n                        p: PRG, b: Binary, g: GFA, a: All. Combinations are allowed i.e., gb: GFA and Binary. Default: a\n  -F, --force           Force overwrite previous output\n  -t THREADS, --threads THREADS\n                        Number of threads. 0 will use all available. Default: 1\n  -v, --verbose         Increase output verbosity (-v for debug, -vv for trace - trace is for developers only)\n  --log LOG             Path to write log to. Default is stderr\n```\n\n#### `update`\n\n```\n$ make_prg update --help\nusage: make_prg update\n\noptions:\n  -h, --help            show this help message and exit\n  -u UPDATE_DS, --update-DS UPDATE_DS\n                        Filepath to the update data structures (a *.update_DS.zip file created from make_prg from_msa or update)\n  -o OUTPUT_PREFIX, --output-prefix OUTPUT_PREFIX\n                        Prefix for the output files\n  -d DENOVO_PATHS, --denovo-paths DENOVO_PATHS\n                        Filepath containing denovo sequences. Should point to a denovo_paths.txt file\n  -D LONG_DELETION_THRESHOLD, --deletion-threshold LONG_DELETION_THRESHOLD\n                        Ignores long deletions of the given size or longer. If long deletions should not be ignored, put a large value. Default: 10\n  -O OUTPUT_TYPE, --output-type OUTPUT_TYPE\n                        p: PRG, b: Binary, g: GFA, a: All. Combinations are allowed i.e., gb: GFA and Binary. Default: a\n  -F, --force           Force overwrite previous output\n  -t THREADS, --threads THREADS\n                        Number of threads. 0 will use all available. Default: 1\n  -v, --verbose         Increase output verbosity (-v for debug, -vv for trace - trace is for developers only)\n  --log LOG             Path to write log to. Default is stderr\n```\n\n[pandora]: https://github.com/rmcolq/pandora\n[gramtools]: https://github.com/iqbal-lab-org/gramtools/\n[docker]: https://docs.docker.com/v17.12/install/\n[quay.io]: https://quay.io/repository/iqballab/make_prg\n[singularity]: https://sylabs.io/guides/3.4/user-guide/quick_start.html#quick-installation-steps\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iqbal-lab-org/make_prg",
    "keywords": "python,reference-graph,genome-graph,bioinformatics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "make-prg",
    "package_url": "https://pypi.org/project/make-prg/",
    "platform": null,
    "project_url": "https://pypi.org/project/make-prg/",
    "project_urls": {
      "Documentation": "https://github.com/iqbal-lab-org/make_prg",
      "Homepage": "https://github.com/iqbal-lab-org/make_prg",
      "Repository": "https://github.com/iqbal-lab-org/make_prg"
    },
    "release_url": "https://pypi.org/project/make-prg/0.4.0/",
    "requires_dist": [
      "biopython (==1.79)",
      "intervaltree (>=3.1.0,<4.0.0)",
      "loguru (>=0.6.0,<0.7.0)",
      "matplotlib (>=3.5.0,<4.0.0); extra == \"debug-graphs\" or extra == \"precompiled-binary\"",
      "networkx (>=2.6.3,<3.0.0); extra == \"debug-graphs\" or extra == \"precompiled-binary\"",
      "numpy (>=1.21.4,<2.0.0)",
      "pygraphviz (==1.7); extra == \"debug-graphs\" or extra == \"precompiled-binary\"",
      "pyinstaller (>=5.6,<6.0); extra == \"precompiled-binary\"",
      "scikit-learn (==0.24.2)",
      "setuptools (>=65,<66)"
    ],
    "requires_python": ">=3.8,<=3.11",
    "summary": "Code to create a PRG from a Multiple Sequence Alignment file",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15993871,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94f3abefe9020492cee6f1f24a92c934ebdb20137cc8cdcda35793b24706130e",
          "md5": "2fa1bfcf386d4a73486394b41dd59202",
          "sha256": "b47930fad750770a2fe77d94bc8cf7f35a6ab658cb10223d9324e573abfc7cfd"
        },
        "downloads": -1,
        "filename": "make_prg-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fa1bfcf386d4a73486394b41dd59202",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32016,
        "upload_time": "2022-02-14T19:20:51",
        "upload_time_iso_8601": "2022-02-14T19:20:51.686878Z",
        "url": "https://files.pythonhosted.org/packages/94/f3/abefe9020492cee6f1f24a92c934ebdb20137cc8cdcda35793b24706130e/make_prg-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91bb18f4e73791a7c670fc78cf8ac0ff1cc96bf297c5903cb61b8c95245c9eec",
          "md5": "58b96e61c43ef4a124ec5f6cc043f627",
          "sha256": "65c6671dbc6c9e82073f193beaec35f3680b2ec25dfed61ffffb776ab693a060"
        },
        "downloads": -1,
        "filename": "make_prg-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "58b96e61c43ef4a124ec5f6cc043f627",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28297,
        "upload_time": "2022-02-14T19:20:53",
        "upload_time_iso_8601": "2022-02-14T19:20:53.160907Z",
        "url": "https://files.pythonhosted.org/packages/91/bb/18f4e73791a7c670fc78cf8ac0ff1cc96bf297c5903cb61b8c95245c9eec/make_prg-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fc0b033c9085500ccefc9acf2d70fd949c2ff129d5b4254de28d4a16974f16a",
          "md5": "5b0c7010175a948ae18b10ae2c6fc03e",
          "sha256": "2de509dd2c008dccacdfb38aea0dbfd440253132032252eab644411a052d4ea5"
        },
        "downloads": -1,
        "filename": "make_prg-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b0c7010175a948ae18b10ae2c6fc03e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<=3.11",
        "size": 15886408,
        "upload_time": "2022-12-05T11:01:09",
        "upload_time_iso_8601": "2022-12-05T11:01:09.171754Z",
        "url": "https://files.pythonhosted.org/packages/6f/c0/b033c9085500ccefc9acf2d70fd949c2ff129d5b4254de28d4a16974f16a/make_prg-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2896860b230df7ee13b388daa9e4378a91a406f7662b337d99bdb5c81f09256",
          "md5": "7c2ea349f5c4a911847d57957456059f",
          "sha256": "79396ea2b3f278150232a6e777e697bec5c96b9b79ce03fb4b8e2e8f06ab3e19"
        },
        "downloads": -1,
        "filename": "make_prg-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7c2ea349f5c4a911847d57957456059f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<=3.11",
        "size": 15800303,
        "upload_time": "2022-12-05T11:01:11",
        "upload_time_iso_8601": "2022-12-05T11:01:11.849561Z",
        "url": "https://files.pythonhosted.org/packages/d2/89/6860b230df7ee13b388daa9e4378a91a406f7662b337d99bdb5c81f09256/make_prg-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fc0b033c9085500ccefc9acf2d70fd949c2ff129d5b4254de28d4a16974f16a",
        "md5": "5b0c7010175a948ae18b10ae2c6fc03e",
        "sha256": "2de509dd2c008dccacdfb38aea0dbfd440253132032252eab644411a052d4ea5"
      },
      "downloads": -1,
      "filename": "make_prg-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b0c7010175a948ae18b10ae2c6fc03e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<=3.11",
      "size": 15886408,
      "upload_time": "2022-12-05T11:01:09",
      "upload_time_iso_8601": "2022-12-05T11:01:09.171754Z",
      "url": "https://files.pythonhosted.org/packages/6f/c0/b033c9085500ccefc9acf2d70fd949c2ff129d5b4254de28d4a16974f16a/make_prg-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2896860b230df7ee13b388daa9e4378a91a406f7662b337d99bdb5c81f09256",
        "md5": "7c2ea349f5c4a911847d57957456059f",
        "sha256": "79396ea2b3f278150232a6e777e697bec5c96b9b79ce03fb4b8e2e8f06ab3e19"
      },
      "downloads": -1,
      "filename": "make_prg-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7c2ea349f5c4a911847d57957456059f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<=3.11",
      "size": 15800303,
      "upload_time": "2022-12-05T11:01:11",
      "upload_time_iso_8601": "2022-12-05T11:01:11.849561Z",
      "url": "https://files.pythonhosted.org/packages/d2/89/6860b230df7ee13b388daa9e4378a91a406f7662b337d99bdb5c81f09256/make_prg-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}