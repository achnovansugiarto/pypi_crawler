{
  "info": {
    "author": "",
    "author_email": "Jocer Franquiz <author@example.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Kladia ðŸŒ¿\r\n\r\n[![Python](https://img.shields.io/badge/python-v3.10%2B-blue)](https://www.python.org/)\r\n\r\n### A simple and minimal graph library based on Python dictionaries\r\n\r\n**Kladia** is a library that provides a simple and easy way to work with graphs data structures in Python, by representing them as dictionaries. \r\n**Kladia graphs** are simple enough to be used and adapted to any other libraries and frameworks, including Pandas, Numpy, Scikit-learn, etc.\r\n\r\n## Installation\r\n\r\n```bash\r\npip install kladia\r\n```\r\n\r\n## How it works?\r\n\r\nUsing **ONLY Python dictionaries** we can easily construct a simple **two node directed graph** in 4 steps:\r\n\r\n1. Create a graph ``{'graph': None}``\r\n2. Add a node ``{'graph': {0: None}}``\r\n3. Add another node ``{'graph': {0: None, 1: None}}``\r\n4. Add a link from node 0 to node 1 ``{'graph': {0: {1: None}, 1: None}}``\r\n\r\nThen, we can replace the ``None`` values with desired properties or data. For example, we can add a node with a\r\nproperty ``{'graph': {0: {'color': 'red'}}}`` or a link with a property ``{'graph': {0: {1: {'weight': 1.0}}}}``.\r\n\r\n*Kladia* helps you to create and manipulate these graphs in a simple way.\r\n\r\n```\r\nfrom kladia.graph import graph\r\n\r\ng = graph()  # create an empty graph\r\ng.add(0, {'color': 'red'})  # add a node with a property\r\ng.add(1, {'color': 'blue'})  # add another node with a property\r\ng.add((0, 1), {'weight': 1.0})  # add a looping link with a property\r\n\r\nprint(g.to_dict())\r\n```\r\n\r\nWhich will print (without the comments):\r\n\r\n```\r\n{\r\n    'graph': {\r\n        0: {                    # node 0\r\n            'color': 'red',     # node 0 property\r\n            1: {'weight': 1.0}  # link to node 1\r\n        }, \r\n        1: {                    # node 1\r\n            'color': 'blue'     # node 1 property\r\n        }\r\n    }\r\n}\r\n```\r\nJust remember, ``color`` and ``weight`` are just examples of properties and are\r\nNOT implemented in ``kladia.graph``. But, this is a very simple, minimal and flexible library, \r\nso you can adapt it to your needs. More examples can be found in the \r\n[examples](https://github.com/jocerfranquiz/kladia/tree/main/examples) folder.\r\n\r\n## Why everything is a dictionary?\r\n\r\nFor convenience, the Graph class only manage dictionaries for graphs, nodes and links. \r\nBy design **Properties has no restrictions whatsoever**.\r\n\r\nUsing dictionaries and integer labels, we can traverse the graph faster than using an object-oriented approach. \r\nYou can work only with the structure of the graph, without worrying about the properties for faster operations. \r\nFor example, this is a **directed binary tree** of 3 levels:\r\n\r\n```\r\n{\r\n    'graph': {\r\n        0: {1: None, 2: None},      # Node 0 is linked to nodes 1 and 2\r\n        1: {3: None, 4: None},      # Node 1 is linked to nodes 3 and 4\r\n        2: {5: None, 6: None},      # Node 2 is linked to nodes 5 and 6\r\n        3: None,                    # Node 3 is a leaf\r\n        4: None,                    # Node 4 is a leaf\r\n        5: None,                    # Node 5 is a leaf\r\n        6: None                     # Node 6 is a leaf\r\n    }\r\n}\r\n```\r\n\r\nFeel free to review the notes in [NOTES.rst](https://github.com/jocerfranquiz/kladia/blob/main/docs/NOTES.rst) \r\nfor more information about the graph structure.\r\n\r\n## Other features:\r\n*Kladia* graphs are:\r\n- Up to order 2 nested Python dictionaries (dicts, of dicts, of dicts)\r\n- Graphs, nodes and links can have custom **properties** dictionary to store any kind of data, such as weights, labels, etc.\r\n- Represented as a dictionary of nodes (vertices), where each node is a dictionary of links (edges), commonly known as [adjacency list](https://en.wikipedia.org/wiki/Adjacency_list)\r\n- **Directed Graphs or DiGraphs** by default. To create **Bidirected graphs**, \r\njust add the same link in both directions.\r\n- **Weighted graphs** can be represented by adding a property to the link, like ``{'weight': 1.0}``\r\n- **MultiGraphs** can be represented by adding a property to the link, like ``{type: 'B', name: 'user1'}``\r\n- **Undirected graphs** can be represented by adding the same link in both directions or by adding a property to the link, like ``{'undirected': True}``\r\n\r\nFor example, here is an **Undirected Graph** with 3 nodes:\r\n    \r\n```\r\n{\r\n    'graph': {\r\n        0: {1: {'undirected': True}}, # Node 0 is undirectedly linked to node 1\r\n        1: {2: {'undirected': True}}, # Node 1 is undirectedly linked to node 2\r\n        2: {0: {'undirected': False}}, # Node 2 is directedly linked to node 0\r\n        'graph_type': 'undirected'     # This flag helps to traverse the graph looking for the \"undirected\" property on each link\r\n    }\r\n}\r\n```\r\n\r\nPlease, take this example as a **suggestion**. ``graph_type`` and ``undirected`` are not implemented as special \r\nkeys in ``kladia.graph``. But, this is a very simple, minimal and flexible library, so you can adapt it to your needs.\r\n\r\n## Why the name Kladia?\r\n\r\n**Kladia**  ðŸŒ¿ is the latinization of the greek word **ÎºÎ»Î±Î´Î¹Î¬**, that means *branch* or *twig*. It is also the name of a genus of plants that includes\r\nthe *olive tree*.\r\n\r\n## TODOs\r\n\r\n- [x] Implement ``to_matrix`` method to convert a graph to an adjacency matrix\r\n- [x] Implement ``from_matrix`` method to convert an adjacency matrix to a kladia graph\r\n- [x] Implement operations on graphs: union, intersection\r\n- [ ] Implement search algorithms, e.g. BFS, DFS, etc.\r\n- [ ] Implement the shortest path algorithm (Dijkstra's algorithm)\r\n- [ ] Implement minimum spanning tree (MST) algorithm (Kruskal's algorithm)\r\n- [ ] Implement maximum flow problem (Ford-Fulkerson algorithm)\r\n- [ ] Implement minimum cut set (min cut) problem (Karger's algorithm)\r\n- [ ] Implement bipartite matching  (https://en.wikipedia.org/wiki/Bipartite_graph)\r\n- [ ] Implement strongly connected components (SCC) (https://en.wikipedia.org/wiki/Strongly_connected_component)\r\n- [ ] Implement topological sort (DAG) (https://en.wikipedia.org/wiki/Topological_sorting)\r\n- [ ] Implement transitive closure (Warshall's algorithm)\r\n- [x] Create unit tests for all methods and functions using pytest (https://docs.pytest.org/en/latest/)\r\n- [ ] Generate documentation using Sphinx (https://www.sphinx-doc.org/en/master/)\r\n- [x] Create an examples file\r\n- [ ] Implement visualization using GraphViz (https://graphviz.readthedocs.io/en/stable/)\r\n- [ ] Implement a web interface using Flask (https://flask.palletsprojects.com/en/1.1.x/)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kladia",
    "package_url": "https://pypi.org/project/kladia/",
    "platform": null,
    "project_url": "https://pypi.org/project/kladia/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jocerfranquiz/kladia/issues",
      "Homepage": "https://github.com/jocerfranquiz/kladia"
    },
    "release_url": "https://pypi.org/project/kladia/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "A simple and minimal graph library based on Python dictionaries.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16298445,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c792756b174079c5bd9716cfa4d78d601a67985a7364c9d929a7f5cdcbedb1c6",
          "md5": "71c51fea3d6c9b7641505be1ac60a8d7",
          "sha256": "873a9b8e7a621f0be7518dc72be34e23e5578909ec2f39b110f04d2b2faaace0"
        },
        "downloads": -1,
        "filename": "kladia-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71c51fea3d6c9b7641505be1ac60a8d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 9498,
        "upload_time": "2023-01-04T04:15:47",
        "upload_time_iso_8601": "2023-01-04T04:15:47.642214Z",
        "url": "https://files.pythonhosted.org/packages/c7/92/756b174079c5bd9716cfa4d78d601a67985a7364c9d929a7f5cdcbedb1c6/kladia-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a75801092ff0e4766d2f42b25b5e05051046fa4de388fae4936441f90186b806",
          "md5": "e8d6475b295c76829a0e973aa1201745",
          "sha256": "17f2734cbb6ba17a8a0f41b23d2ddb6e6a7fa257e1c8fe9fb63b8e06e9d07192"
        },
        "downloads": -1,
        "filename": "kladia-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8d6475b295c76829a0e973aa1201745",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11567,
        "upload_time": "2023-01-04T04:15:49",
        "upload_time_iso_8601": "2023-01-04T04:15:49.123035Z",
        "url": "https://files.pythonhosted.org/packages/a7/58/01092ff0e4766d2f42b25b5e05051046fa4de388fae4936441f90186b806/kladia-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c792756b174079c5bd9716cfa4d78d601a67985a7364c9d929a7f5cdcbedb1c6",
        "md5": "71c51fea3d6c9b7641505be1ac60a8d7",
        "sha256": "873a9b8e7a621f0be7518dc72be34e23e5578909ec2f39b110f04d2b2faaace0"
      },
      "downloads": -1,
      "filename": "kladia-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "71c51fea3d6c9b7641505be1ac60a8d7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 9498,
      "upload_time": "2023-01-04T04:15:47",
      "upload_time_iso_8601": "2023-01-04T04:15:47.642214Z",
      "url": "https://files.pythonhosted.org/packages/c7/92/756b174079c5bd9716cfa4d78d601a67985a7364c9d929a7f5cdcbedb1c6/kladia-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a75801092ff0e4766d2f42b25b5e05051046fa4de388fae4936441f90186b806",
        "md5": "e8d6475b295c76829a0e973aa1201745",
        "sha256": "17f2734cbb6ba17a8a0f41b23d2ddb6e6a7fa257e1c8fe9fb63b8e06e9d07192"
      },
      "downloads": -1,
      "filename": "kladia-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e8d6475b295c76829a0e973aa1201745",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 11567,
      "upload_time": "2023-01-04T04:15:49",
      "upload_time_iso_8601": "2023-01-04T04:15:49.123035Z",
      "url": "https://files.pythonhosted.org/packages/a7/58/01092ff0e4766d2f42b25b5e05051046fa4de388fae4936441f90186b806/kladia-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}