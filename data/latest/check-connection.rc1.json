{
  "info": {
    "author": "Raphael Trinkler",
    "author_email": "raphael.trinkler@infineon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# Template Project to create working pip package\r\n\r\nThis package contains an check_connection function where you can enter your server adress and the number of tries, so that it connects to the server as many times as given and calculates the artihmetic mean on how long it takes to do so.\\\r\nAdditionally a list_mean function is implemented, where you can calculate the arithmetic mean of a list.\r\n\r\n\r\nAlso, this project is an example package to show how to create an own pip package.\r\nIn the following the steps to do so are explained\r\n\r\n&nbsp;\r\n## Build your own package\r\n\r\n### 1.1 Sourcetree\r\nThe structure of the project has to contain the following files and folders:\r\n    - LICENSE.txt\\\r\n    - README.txt\\\r\n    - CHANGELOG.txt\\\r\n    - pyproject.toml\\\r\n    - requirements.txt\\\r\n    - src/{name_of_your_package}\\\r\n\r\nFiles such as .flake or Jenkinsfile are optional and can be used to check your code autmatically when updated on git.\r\n&nbsp;\r\n\r\n### 1.2 Building\r\n\r\n#### 1.2.1 pip package\r\n\r\nAfter setting up your sourcetree and implementing the code in `__init__.py` the build can be started by `py -m build`.\\\r\nThis will created all needed files and structures. Afterwards this can be published to PyPi by `twine upload --repository-url {your_repo_url} ./dist/*`.\\\r\nYou should not include \"/pypi\" or \"/simple\" in the the PyPI remote repository URL. These suffixes are added by Artifactory when accessing the remote repository and can cause an error.\\\r\n\r\nNow your package is finished and can be implement by other users by using `pip install {your_package_name}`.\\\r\n\r\nNote:\\\r\nIF you want to upload to PyPI instead, enter `twine upload ./dist/*`.\\\r\nConsider that you have to have an existing PyPi Account and that your package name is not already used.\r\n\r\n\r\nFor further information see:\\\r\nhttps://confluencewikiprod.intra.infineon.com/display/SCCVMP/Basic+structure+of+a+python+Project \\\r\nhttps://packaging.python.org/en/latest/tutorials/packaging-projects/\r\n&nbsp;\r\n\r\n#### 1.2.2 conda package\r\n\r\nTo create a conda package, you have to open your Conda-Prompt.\\\r\nIf you already have uploaded your pip package to PyPi, you can simply enter `conda skeleton pypi {your_package_name}`.\\\r\nAfterwards, an folder with the name of your project and the right meta.yaml file is created, so now simply enter `conda build {your_package_name}` and the package will be created.\r\n&nbsp;\r\nIf you do not have created a PyPi package, follow these steps:\\\r\n- \r\n\r\n### 1.3 Updating\r\n\r\nAfter editing make sure, that the version number in the `pyproject.toml` file has changed and then enter `py -m build` and `twine upload dist/*` again.\r\n\r\n&nbsp;\r\n&nbsp; \r\n\r\n## 2. Working on your own package\r\n\r\n### 2.1 Testing:\r\n\r\n#### 2.1.1 Unit Tests\r\nTo test the package make sure, that `pytest` is installed.\\\r\nNow you can create an own folder called \"tests\" where your files including your test goals are located. Consider, that these files have to start with \"test_\" in order to be recognized properly. Inside these files you have to have a function also being called somethink like \"test_\" at the beginning so that pytest can execute the tests.\\\r\nNow you can enter `pytest` into your terminal and these tests will be executed automatically.\r\n\r\nIf you want to save your report, simply enter `pytest >{name_and_type_of_report}`, e.g. `pytest >myoutput.txt`.\\\r\nAlso if you want to see our report in the terminal and save it at the same time, use `pytest | tee {name_and_type_of_report}`, e.g. `pytest | tee myoutput.log`.\r\n&nbsp;\r\n\r\n#### 2.1.2 Static Code Analysis\r\nIf you want to execute a static code analysis make sure `flake8` is installed.\\\r\nAlso only one file can be tested by adding the path, e.g. `flake8 demo.py`.\r\nAfterwards you can enter `flake8` in your terminal and automatically all python files will be checked and a report will be given to you into your terminal.\r\n\r\nSame procedure as for `pytest` can be used to save your report in a file.\r\n&nbsp;\r\n### 2.2 Documentation:\r\n\r\nTo generate a documentation automatically make sure, that `pdoc3` is installed.\\\r\nAlso consider, that you have made docstrings for every function you want to be documented.\\\r\nNow you can create the documentation by simply entering `pdoc3 --html {location_of_your_code}` in the terminal. This will autmatically create a folder called \"html\"\" with a html file called the same as your code file in it, where the code is documented.\r\n\r\n&nbsp;\r\n&nbsp;\r\n\r\n\r\n## 3. Links\r\n\r\nLink to pip package:\\\r\nnot available at the moment\r\n\r\n\r\nLink to conda package:\\\r\nnot available at the moment\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "connection,check,template",
    "license": "Proprietary.  Do not distribute outside of Infineon Technologies AG.",
    "maintainer": "",
    "maintainer_email": "Raphael Trinkler <raphael.trinkler@infineon.com>",
    "name": "check-connection",
    "package_url": "https://pypi.org/project/check-connection/",
    "platform": null,
    "project_url": "https://pypi.org/project/check-connection/",
    "project_urls": {
      "Bitbucket": "https://bitbucket.vih.infineon.com/projects/SCSS/repos/py-template-project/browse?at=refs%2Fheads%2Ffeature"
    },
    "release_url": "https://pypi.org/project/check-connection/0.0.3/",
    "requires_dist": [
      "flake8",
      "pdoc3",
      "pytest",
      "requests",
      "PySimpleGUI"
    ],
    "requires_python": ">=3.7",
    "summary": "Function to check connection to certain server",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16958089,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5580c5cb6e1b0feda219850b762df0839b3213b3e85051b79a0691ec84009ac2",
          "md5": "dbb70dbde6be16e40a016265a776c4d9",
          "sha256": "306c825181c58f5babe7dfc6b21e0e95f8025a5d2075ee6d559a311e827dea80"
        },
        "downloads": -1,
        "filename": "check_connection-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbb70dbde6be16e40a016265a776c4d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5244,
        "upload_time": "2023-02-21T09:37:07",
        "upload_time_iso_8601": "2023-02-21T09:37:07.531498Z",
        "url": "https://files.pythonhosted.org/packages/55/80/c5cb6e1b0feda219850b762df0839b3213b3e85051b79a0691ec84009ac2/check_connection-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9630b2612c80225c12faeb1f48e5faf358fe070275b75a06845246fbddb5bd",
          "md5": "a6e2e35ff0a33b2181e3addb3b103669",
          "sha256": "fab7cce2b9c49df61a6b2c8044c2d9f0b6c645a9e9c192fe7d2b929393c398de"
        },
        "downloads": -1,
        "filename": "check_connection-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a6e2e35ff0a33b2181e3addb3b103669",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4936,
        "upload_time": "2023-02-21T09:37:09",
        "upload_time_iso_8601": "2023-02-21T09:37:09.621985Z",
        "url": "https://files.pythonhosted.org/packages/2c/96/30b2612c80225c12faeb1f48e5faf358fe070275b75a06845246fbddb5bd/check_connection-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5580c5cb6e1b0feda219850b762df0839b3213b3e85051b79a0691ec84009ac2",
        "md5": "dbb70dbde6be16e40a016265a776c4d9",
        "sha256": "306c825181c58f5babe7dfc6b21e0e95f8025a5d2075ee6d559a311e827dea80"
      },
      "downloads": -1,
      "filename": "check_connection-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dbb70dbde6be16e40a016265a776c4d9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5244,
      "upload_time": "2023-02-21T09:37:07",
      "upload_time_iso_8601": "2023-02-21T09:37:07.531498Z",
      "url": "https://files.pythonhosted.org/packages/55/80/c5cb6e1b0feda219850b762df0839b3213b3e85051b79a0691ec84009ac2/check_connection-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c9630b2612c80225c12faeb1f48e5faf358fe070275b75a06845246fbddb5bd",
        "md5": "a6e2e35ff0a33b2181e3addb3b103669",
        "sha256": "fab7cce2b9c49df61a6b2c8044c2d9f0b6c645a9e9c192fe7d2b929393c398de"
      },
      "downloads": -1,
      "filename": "check_connection-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a6e2e35ff0a33b2181e3addb3b103669",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4936,
      "upload_time": "2023-02-21T09:37:09",
      "upload_time_iso_8601": "2023-02-21T09:37:09.621985Z",
      "url": "https://files.pythonhosted.org/packages/2c/96/30b2612c80225c12faeb1f48e5faf358fe070275b75a06845246fbddb5bd/check_connection-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}