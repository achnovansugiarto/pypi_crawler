{
  "info": {
    "author": "",
    "author_email": "David Vlaminck <david.vlaminck@mow.vlaanderen.be>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# OTLClassPython Project \nThis project aims to implement the Flemish data standard OTL (https://wegenenverkeer.data.vlaanderen.be/) in Python.\nBelow is sample code that should be self-explanatory. It demonstrates the basic possibilities of this project.\n\n## Installation and requirements\nTo install the OTL MOW project into your python project, use pip to install it:\n``` \npip install OTLMOW\n```\nTo upgrade an existing installation use:\n``` \npip install OTLMOW --upgrade\n``` \nOTLMOW has dependencies on rdflib and pyvis but these are automatically handled by pip.\n\n## Creating the OTL datamodel using the OTL SQLite\nWith every OTL update, this piece of code will allow the creation of an updated Python datamodel. The generated classes are not backwards compatible.\n```\nfrom src.OTLMOW.Facility.OTLFacility import OTLFacility\n\n# create the main facade class: OTLFacility\notl_facility = OTLFacility(logfile=r'C:\\temp\\pythonLogging\\python_log.txt',\n                           settings_path=\"C:\\\\resources\\\\settings_OTLMOW.json\")\n\n# create a datamodel based on the OTL SQLite database and ttl files stored on the github\notl_file_location = '../InputFiles/OTL 2.4.db'\nGA_file_location = '../InputFiles/Geometrie_Artefact_2.4.db'\notl_facility.create_otl_datamodel(otl_sqlite_file_location=otl_file_location,\n                                  geo_artefact_sqlite_file_location=GA_file_location)\n```\n## Using the OTL Datamodel instances to create objects and encode them in JSON\nThe datamodel generates classes, allowing the properties to be filled with data.\n```  \nfrom datetime import datetime\nfrom src.OTLMOW.Facility.OTLFacility import OTLFacility\nfrom src.OTLMOW.OTLModel.Classes.Onderdeel.DNBLaagspanning import DNBLaagspanning\nfrom src.OTLMOW.OTLModel.Classes.Onderdeel.EnergiemeterDNB import EnergiemeterDNB\nfrom src.OTLMOW.OTLModel.Classes.Onderdeel.Voedt import Voedt\n\n# create the main facade class: OTLFacility\notl_facility = OTLFacility(logfile=r'C:\\temp\\pythonLogging\\python_log.txt',\n                           settings_path=\"C:\\\\resources\\\\settings_OTLMOW.json\")\n\n# use the generated datamodel to create instances of OTL classes\ndnb = DNBLaagspanning()\ndnb.naam = 'A0024'\ndnb.toestand = 'in-gebruik'\ndnb.assetId.identificator = 'eigen_Id_voor_A0024'\ndnb.eanNummer = '541448860003995215'\ndnb.adresVolgensDNB.gemeente = 'brasschaat'\ndnb.adresVolgensDNB.postcode = '2930'\ndnb.adresVolgensDNB.straatnaam = 'Bredabaan 90'\n# dnb.toestand = 'foute toestand'  # wouls raise ValueError because the value is not valid\n\nmeter = EnergiemeterDNB()\nmeter.naam = '50004784'\nmeter.assetId.identificator = 'eigen_Id_voor_50004784'\nmeter.aantalTelwerken = 1\nmeter.geometry = 'POINT Z (157696.6 219065.5 0)'\n\nvoedingsrelatie = Voedt()\nvoedingsrelatie.assetId.identificator = \"A0024-50004784\"\nvoedingsrelatie.bronAssetId.identificator = 'eigen_Id_voor_A0024'\nvoedingsrelatie.doelAssetId.identificator = 'eigen_Id_voor_50004784'\n\nlijst_otl_objecten = [dnb, meter, voedingsrelatie]\n\n# encode to a json representation\nencoded_json = otl_facility.encoder.encode(lijst_otl_objecten)\nprint(encoded_json)\n\n# write the json file\npath = f'{datetime.now().strftime(\"%Y%m%d%H%M%S\")}_export.json'\notl_facility.create_file_from_assets(filepath=path, list_of_objects=objects)\n```\noutput:\n```\n[\n    {\n        \"adresVolgensDNB\": {\n            \"gemeente\": \"brasschaat\",\n            \"postcode\": \"2930\",\n            \"straatnaam\": \"Bredabaan 90\"\n        },\n        \"assetId\": {\n            \"identificator\": \"eigen_Id_voor_A0024\"\n        },\n        \"eanNummer\": \"541448860003995215\",\n        \"naam\": \"A0024\",\n        \"toestand\": \"in-gebruik\",\n        \"typeURI\": \"https://wegenenverkeer.data.vlaanderen.be/ns/onderdeel#DNBLaagspanning\"\n    },\n    {\n        \"aantalTelwerken\": 1,\n        \"assetId\": {\n            \"identificator\": \"eigen_Id_voor_50004784\"\n        },\n        \"geometry\": \"POINT Z (157696.6 219065.5 0)\",\n        \"naam\": \"50004784\",\n        \"typeURI\": \"https://wegenenverkeer.data.vlaanderen.be/ns/onderdeel#EnergiemeterDNB\"\n    },\n    {\n        \"assetId\": {\n            \"identificator\": \"A0024-50004784\"\n        },\n        \"bronAssetId\": {\n            \"identificator\": \"eigen_Id_voor_A0024\"\n        },\n        \"doelAssetId\": {\n            \"identificator\": \"eigen_Id_voor_50004784\"\n        },\n        \"typeURI\": \"https://wegenenverkeer.data.vlaanderen.be/ns/onderdeel#Voedt\"\n    }\n]\n```\n## Making a visualisation\nIt is possible to visualise assets in a node diagram.\nSimply pass the list of assets (incl. relations) to the visualiser class in the OTL Facility class to create an html file that can be opened in any web browser.\nHovering the nodes will show the data of the assets.\n```\notl_facility.visualiser.show(lijst_otl_objecten)\n```\nThe above example will result in the following visualisation:\n<img alt=\"example of visualiser\" src=\"visualiser_example_readme.png\"/>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OTLMOW",
    "package_url": "https://pypi.org/project/OTLMOW/",
    "platform": null,
    "project_url": "https://pypi.org/project/OTLMOW/",
    "project_urls": {
      "Home": "https://github.com/davidvlaminck/OTLMOW"
    },
    "release_url": "https://pypi.org/project/OTLMOW/0.5a3/",
    "requires_dist": [
      "rdflib",
      "pyvis",
      "requests",
      "Pyjwt"
    ],
    "requires_python": ">=3.10",
    "summary": "The MOW OTL implementation in Python",
    "version": "0.5a3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14258067,
  "releases": {
    "0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4ee3218de8661ea5282498a2970b7b28b9f4ec819a6dd05afd4054c31eee62c",
          "md5": "b674eb54a001797c3a5d80be52faa9e9",
          "sha256": "0952441c99ca4da324d1a2c4f7cbb3ff8a7c9c1dadc6df30d930635d9cd37a81"
        },
        "downloads": -1,
        "filename": "OTLMOW-0.1a2-py310-none-any.whl",
        "has_sig": false,
        "md5_digest": "b674eb54a001797c3a5d80be52faa9e9",
        "packagetype": "bdist_wheel",
        "python_version": "py310",
        "requires_python": null,
        "size": 3636886,
        "upload_time": "2022-01-27T21:05:34",
        "upload_time_iso_8601": "2022-01-27T21:05:34.271275Z",
        "url": "https://files.pythonhosted.org/packages/a4/ee/3218de8661ea5282498a2970b7b28b9f4ec819a6dd05afd4054c31eee62c/OTLMOW-0.1a2-py310-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec26e959c5a2ac3e6422bed0c4d110739bf5451a23b4d5fe3e5bd05d1abec3f6",
          "md5": "e78ad1b67f6b149d11318027df36c9eb",
          "sha256": "4faa1804e2f53942b31e4bed5b8da422921d71fe1e5880c19ac14af5f7f9fab9"
        },
        "downloads": -1,
        "filename": "OTLMOW-0.2a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e78ad1b67f6b149d11318027df36c9eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 5893616,
        "upload_time": "2022-02-03T12:55:29",
        "upload_time_iso_8601": "2022-02-03T12:55:29.099350Z",
        "url": "https://files.pythonhosted.org/packages/ec/26/e959c5a2ac3e6422bed0c4d110739bf5451a23b4d5fe3e5bd05d1abec3f6/OTLMOW-0.2a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caed6011e03b0822b2f2622fc8c81625b04da05a125a59be60f23ff9672f82d0",
          "md5": "acab639cf0c6c61a7857ca43fd33b615",
          "sha256": "060ee7c89b3021fe07ae036f193e9e911af3579e15a574dc382debeb39de0955"
        },
        "downloads": -1,
        "filename": "OTLMOW-0.3a1-py310-none-any.whl",
        "has_sig": false,
        "md5_digest": "acab639cf0c6c61a7857ca43fd33b615",
        "packagetype": "bdist_wheel",
        "python_version": "py310",
        "requires_python": ">=3.10",
        "size": 6029069,
        "upload_time": "2022-04-25T08:56:05",
        "upload_time_iso_8601": "2022-04-25T08:56:05.610323Z",
        "url": "https://files.pythonhosted.org/packages/ca/ed/6011e03b0822b2f2622fc8c81625b04da05a125a59be60f23ff9672f82d0/OTLMOW-0.3a1-py310-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa484bb94bfe9f427e1dc4d2316b204ea84e6f6c7989fd14a8a444fc11736979",
          "md5": "3800d4e0bab48d99dfc60ad1501a6e15",
          "sha256": "e28190fa829503e3e9d63bbc7d0915538a087eddbbd827687e889a484b7d1cd6"
        },
        "downloads": -1,
        "filename": "OTLMOW-0.4a1-py310-none-any.whl",
        "has_sig": false,
        "md5_digest": "3800d4e0bab48d99dfc60ad1501a6e15",
        "packagetype": "bdist_wheel",
        "python_version": "py310",
        "requires_python": ">=3.10",
        "size": 6169490,
        "upload_time": "2022-05-30T09:41:08",
        "upload_time_iso_8601": "2022-05-30T09:41:08.628157Z",
        "url": "https://files.pythonhosted.org/packages/fa/48/4bb94bfe9f427e1dc4d2316b204ea84e6f6c7989fd14a8a444fc11736979/OTLMOW-0.4a1-py310-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05ba5639ae581db16a47277ff430499d5bfeaa70b7eb499a38decb0d803fb934",
          "md5": "488b9e47bce1efa3d3cf03f7c4f2f019",
          "sha256": "e819b79656101f4e96e94de918d6b815b9b93edc055c1edd5e520c5aae6a2fca"
        },
        "downloads": -1,
        "filename": "OTLMOW-0.5a3-py310-none-any.whl",
        "has_sig": false,
        "md5_digest": "488b9e47bce1efa3d3cf03f7c4f2f019",
        "packagetype": "bdist_wheel",
        "python_version": "py310",
        "requires_python": ">=3.10",
        "size": 8012748,
        "upload_time": "2022-06-27T09:52:14",
        "upload_time_iso_8601": "2022-06-27T09:52:14.629582Z",
        "url": "https://files.pythonhosted.org/packages/05/ba/5639ae581db16a47277ff430499d5bfeaa70b7eb499a38decb0d803fb934/OTLMOW-0.5a3-py310-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05ba5639ae581db16a47277ff430499d5bfeaa70b7eb499a38decb0d803fb934",
        "md5": "488b9e47bce1efa3d3cf03f7c4f2f019",
        "sha256": "e819b79656101f4e96e94de918d6b815b9b93edc055c1edd5e520c5aae6a2fca"
      },
      "downloads": -1,
      "filename": "OTLMOW-0.5a3-py310-none-any.whl",
      "has_sig": false,
      "md5_digest": "488b9e47bce1efa3d3cf03f7c4f2f019",
      "packagetype": "bdist_wheel",
      "python_version": "py310",
      "requires_python": ">=3.10",
      "size": 8012748,
      "upload_time": "2022-06-27T09:52:14",
      "upload_time_iso_8601": "2022-06-27T09:52:14.629582Z",
      "url": "https://files.pythonhosted.org/packages/05/ba/5639ae581db16a47277ff430499d5bfeaa70b7eb499a38decb0d803fb934/OTLMOW-0.5a3-py310-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}