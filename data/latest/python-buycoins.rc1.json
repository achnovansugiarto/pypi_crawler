{
  "info": {
    "author": "Immanuel Kolapo",
    "author_email": "immanuelcaspian@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# BuyCoins API library\nA Python module for interacting with buyCoins API. [See official documentation](https://developers.buycoins.africa/)\n## Getting started\nInstallation via Pip:\n```sh\n$ pip install python-buycoins\n```\n\nThis module consists of a Query class and a Mutation class. The Query class contains all queries in the API while the Mutation class\ncontains all mutations in the API.\n\nThe Query class has the following methods:\n - get_bank_accounts()\n - get_balances()\n - get_estimated_network_fee()\n - get_market_book()\n - get_orders()\n - get_payments()\n - get_prices()\n\n...and the Mutation class has the following:\n - buy()\n - cancel_withdrawal()\n - create_address()\n - create_deposit_account()\n - create_withdrawal()\n - post_limit_order()\n - post_market_order()\n - sell()\n - send()\n - send_off_chain()\n\n## Authentication\nYou should place `PUBLIC_KEY` and `PRIVATE_KEY` in your .env file as seen in `.env.example`  \n\n## Usage\n```python\nfrom buycoins import Executor, Query, Mutation\n\n# Instantiate the classes:\nque = Query()\nmut = Mutation()\n\n# Example queries\ndata = que.get_balances() # get balances\ndata = que.get_bank_accounts() # get account details\n\n# Example mutations\ndata = mut.buy(0.03) # buy 0.03 worth of bitcoin\ndata = mut.create_address() # create a bitcoin address to receive\n\n# Wanna execute your own queries? Use the Executor() class\n# If PUBLIC_KEY and PRIVATE_KEY is already in .env, do this:\nexe = Executor()\n# Else:\nexe = Executor(PUBLIC_KEY, PRIVATE_KEY)\n\ndata = exe.query(query_str, variables)\n\n```\n\nAll methods have an optional `query` argument. You need not worry about passing this argument because by the default value is sufficient and returns all fields. All query strings are defined in the `constants.py` file.\n\n## Method Signature\n### Queries\n\n##### ```get_balances(self, cryptocurrency=None, query=GET_BALANCES)```\nRetrieve supported cryptocurrencies account balance.\\\nValid **cryptocurrency** values are: *usd_tether*, *naira_token*, *bitcoin*, *ethereum*, *litecoin*, *usd_coin*.\n##### ```get_bank_accounts(self, account_number=None, query=GET_BANK_ACCOUNTS)```\nRetrieve bank accounts.\n##### ```get_estimated_network_fee(self, amount, cryptocurrency=\"bitcoin\", query=GET_ESTIMATED_NETWORK_FEE)```\nRetrieve estimated network fee to send supported cryptocurrencies.\n##### ```get_market_book(self, coin_amount=None, cryptocurrency=\"bitcoin\", query=GET_MARKET_BOOK)```\nRetrieve a list of orders on the peer-to-peer (P2P) platform.\n##### ```get_orders(self, status, side=None, cryptocurrency=\"bitcoin\", query=GET_ORDERS)```\nRetrieve a list of orders.\\\n**side** takes either *buy* or *sell*.\\\n**status** takes either *open* or *completed*.\n##### ```get_payments(self, query=GET_PAYMENTS)```\nRetrieve a list of payments.\n##### ```get_prices(self, side=None, cryptocurrency=None, query=GET_PRICES)```\nRetrieve buy/sell price(s) for supported cryptocurrencies.\n\n### Mutations\n\n##### ```buy(self, coin_amount, price=None, cryptocurrency=\"bitcoin\", query=BUY)```\nBuy supported cryptocurrencies. If *price* is not specified, it fetches an active price internally.\n##### ```cancel_withdrawal(self, payment, query=CANCEL_WITHDRAWAL)```\nCancel initiated withdrawal. The ID of the payment to be cancelled should be passed in as the *payment* parameter.\n##### ```create_address(self, cryptocurrency=\"bitcoin\", query=CREATE_ADDRESS)```\nCreate address to receive supported cryptocurrencies.\n##### ```create_deposit_account(self, account_name, query=CREATE_DEPOSIT_ACCOUNT)```\nGenerate deposit bank accounts to top up your NGNT account with Naira.\n##### ```create_withdrawal(self, amount, account_id=None, account_number=None, query=CREATE_WITHDRAWAL)```\nCreate a new withdrawal. This requires the ID of the bank to withdraw to. You can easily get that using *get_bank_accounts()*. Whatever ID obtained from calling *get_bank_accounts()* should be specified as *account_id*. However, this method allows you to specify an account number (specified as value to *account_number*) and the account ID will be fetched internally. If you specify both *account_id* and *account_number*, an exception is thrown. \n##### ```post_limit_order(self, order_side, coin_amount, price_type, cryptocurrency=\"bitcoin\", static_price=None, dynamic_exchange_rate=None, query=POST_LIMIT_ORDER)```\nCreate a new limit order.\\\n**order_side** should be either *buy* or *sell*\\\n**price_type** should be either *static* or *dynamic*\\\n**static_price** and **dynamic_exchange_rate** depends on the value of **price_type**. If price_type is *static*, then static_price is required. If price_type is dynamic, dynamic_exchange_rate is required.\n##### ```post_market_order(self, order_side, coin_amount, cryptocurrency=\"bitcoin\", query=POST_MARKET_ORDER)```\nCreate a new market order.\n##### ```sell(self, coin_amount, price=None, cryptocurrency=\"bitcoin\", query=SELL)```\nSell supported cryptocurrencies. If *price* is not specified, it fetches an active price internally.\n##### ```send(self, amount, address, cryptocurrency=\"bitcoin\", query=SEND)```\nSend supported cryptocurrencies to external address.\n##### ```send_off_chain(self, amount, recipient, cryptocurrency=\"bitcoin\", query=SEND_OFF_CHAIN)```\nSend supported cryptocurrencies to internal BuyCoins users.\n\n## Running tests\nTo run tests, do:\n```sh\npytest -sv\n```\n\n## License\n(c) 2021 Immanuel Kolapo\n\nThis repository is licensed under the MIT license. See LICENSE for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Cimmanuel/python-buycoins",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-buycoins",
    "package_url": "https://pypi.org/project/python-buycoins/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-buycoins/",
    "project_urls": {
      "Homepage": "https://github.com/Cimmanuel/python-buycoins"
    },
    "release_url": "https://pypi.org/project/python-buycoins/1.0/",
    "requires_dist": [
      "requests",
      "python-decouple"
    ],
    "requires_python": ">=3.6",
    "summary": "BuyCoins API library",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9363192,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7143ae59206b71d600734b191fafe098ac95e1f23d7b37257e24cbcdcf4e9f8",
          "md5": "9baeaf010280a00019099717b1ab6df6",
          "sha256": "4c3fdf68c2578a672a8795950f14dec337abf83b07bc409ea1734b8d337f6001"
        },
        "downloads": -1,
        "filename": "python_buycoins-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9baeaf010280a00019099717b1ab6df6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18004,
        "upload_time": "2021-02-09T14:29:08",
        "upload_time_iso_8601": "2021-02-09T14:29:08.379417Z",
        "url": "https://files.pythonhosted.org/packages/d7/14/3ae59206b71d600734b191fafe098ac95e1f23d7b37257e24cbcdcf4e9f8/python_buycoins-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9c6a9d7900d72cfb0c650b41010fc0521b2a19cc43937642cd7df82da7a7cd6",
          "md5": "87cfaa3500b4d7cc550a9bde634d25b2",
          "sha256": "afd986e91775a1d1e95c09531c09fcc5e76c4a1b55e6cdcf37e9f8e74f7c9d95"
        },
        "downloads": -1,
        "filename": "python-buycoins-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "87cfaa3500b4d7cc550a9bde634d25b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15706,
        "upload_time": "2021-02-09T14:29:10",
        "upload_time_iso_8601": "2021-02-09T14:29:10.418672Z",
        "url": "https://files.pythonhosted.org/packages/d9/c6/a9d7900d72cfb0c650b41010fc0521b2a19cc43937642cd7df82da7a7cd6/python-buycoins-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7143ae59206b71d600734b191fafe098ac95e1f23d7b37257e24cbcdcf4e9f8",
        "md5": "9baeaf010280a00019099717b1ab6df6",
        "sha256": "4c3fdf68c2578a672a8795950f14dec337abf83b07bc409ea1734b8d337f6001"
      },
      "downloads": -1,
      "filename": "python_buycoins-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9baeaf010280a00019099717b1ab6df6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18004,
      "upload_time": "2021-02-09T14:29:08",
      "upload_time_iso_8601": "2021-02-09T14:29:08.379417Z",
      "url": "https://files.pythonhosted.org/packages/d7/14/3ae59206b71d600734b191fafe098ac95e1f23d7b37257e24cbcdcf4e9f8/python_buycoins-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9c6a9d7900d72cfb0c650b41010fc0521b2a19cc43937642cd7df82da7a7cd6",
        "md5": "87cfaa3500b4d7cc550a9bde634d25b2",
        "sha256": "afd986e91775a1d1e95c09531c09fcc5e76c4a1b55e6cdcf37e9f8e74f7c9d95"
      },
      "downloads": -1,
      "filename": "python-buycoins-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "87cfaa3500b4d7cc550a9bde634d25b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15706,
      "upload_time": "2021-02-09T14:29:10",
      "upload_time_iso_8601": "2021-02-09T14:29:10.418672Z",
      "url": "https://files.pythonhosted.org/packages/d9/c6/a9d7900d72cfb0c650b41010fc0521b2a19cc43937642cd7df82da7a7cd6/python-buycoins-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}