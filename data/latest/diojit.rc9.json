{
  "info": {
    "author": "thautwarm",
    "author_email": "twshere@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "## DIO-JIT: General-purpose Python JIT\n\n[![ä¸­æ–‡README](https://img.shields.io/badge/i18n-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-teal)](https://github.com/thautwarm/diojit/blob/master/README.zh_CN.md) [![PyPI version shields.io](https://img.shields.io/pypi/v/diojit.svg)](https://pypi.python.org/pypi/diojit/) \n[![JIT](https://img.shields.io/badge/cpython-3.8|3.9-green.svg)](https://pypi.python.org/pypi/diojit/)\n\nImportant:\n\n1. DIO-JIT now works for Python >= 3.8. We heavily rely on the `LOAD_METHOD` bytecode instruction.\n2. DIO-JIT is not production-ready. a large number of specialisation rules are required to make DIO-JIT batteries-included.\n3. This document is mainly provided for prospective developers. Users are not required to write any specialisation rules, which means that users need to learn nothing but `@jit.jit` and `jit.jit_spec_call`.\n\n### Benchmark\n\n| Item  | PY38  | JIT PY38   | PY39   | JIT PY39  |\n|---|---|---|---|---|\n| [BF](https://github.com/thautwarm/diojit/blob/master/benchmarks/brainfuck.py)   | 265.74  | 134.23  | 244.50  |  140.34 |\n| [append3](https://github.com/thautwarm/diojit/blob/master/benchmarks/append3.py)  | 23.94  |  10.70 | 22.29  | 11.21  |\n| [DNA READ](https://github.com/thautwarm/diojit/blob/master/benchmarks/dna_read.py)  | 16.96  | 14.82  | 15.03   | 14.38  |\n| [fib(15)](https://github.com/thautwarm/diojit/blob/master/benchmarks/fib.py) | 11.63  | 1.54  | 10.41   | 1.51  |\n| [hypot(str, str)](https://github.com/thautwarm/diojit/blob/master/benchmarks/hypot.py)  | 6.19  | 3.87  | 6.53  | 4.29  |\n| [selectsort](https://github.com/thautwarm/diojit/blob/master/benchmarks/selection_sort.py)  | 46.95  | 33.88  | 38.71  | 29.49  |\n| [trans](https://github.com/thautwarm/diojit/blob/master/benchmarks/trans.py)  | 24.22  | 7.79  |  23.23 | 7.71  |\n\nThe bechmark item \"DNA READ\" does not show a significant performance gain, this is because \"DNA READ\" heavily uses `bytearray` and `bytes`, whose specialised C-APIs\nare not exposed. In this case, although the JIT can infer the types, we have to fall back to CPython's default behaviour, or even worse: after all, the interpreter can access internal things, while we cannot.\n\n## Install Instructions\n\n<details><summary>Step 1: Install Julia as an in-process native code compiler for DIO-JIT</summary>\n<p>\n\nThere are several options for you to install Julia:\n\n- [scoop](http://scoop.sh/) (Windows)\n- [julialang.org](https://julialang.org/downloads) (recommended for Windows users)\n- [jill.py](https://github.com/johnnychen94/jill.py):\n\n    `pip install jill && jill install 1.6 --upstream Official`\n\n- [jill](https://github.com/abelsiqueira/jill) (Mac and Linux only!):\n\n    `bash -ci \"$(curl -fsSL https://raw.githubusercontent.com/abelsiqueira/jill/master/jill.sh)\"`\n</p>\n</details>\n\n<details><summary>Step 2: Install DIO.jl in Julia</summary>\n<p>\n\nType `julia` and open the REPL, then\n\n```julia\njulia>\n# press ]\npkg> add https://github.com/thautwarm/DIO.jl\n# press backspace\njulia> using DIO # precompile\n```\n\n</p>\n</details>\n\n<details><summary>Step 3: Install Python Package</summary>\n<p>\n\n`pip install git+https://github.com/thautwarm/diojit`\n\n</p>\n</details>\n\n</p>\n</details>\n\n<details><summary>How to fetch latest DIO-JIT?(if you have installed DIO)</summary>\n\n<p> \n\n```\npip install -U diojit\njulia -e \"using Pkg; Pkg.update(string(:DIO));using DIO\"\n``` \n\n</p>\n</details>\n\nUsage from Python side is quite similar to that from Numba.\n```python\nimport diojit\nfrom math import sqrt\n@diojit.jit(fixed_references=[\"sqrt\", \"str\", \"int\", \"isinstance\"])\ndef hypot(x, y):\n    if isinstance(x, str):\n        x = int(x)\n\n    if isinstance(y, str):\n        y = int(y)\n\n    return sqrt(x ** 2 + y ** 2)\n\nspecialized_hypot = diojit.jit_spec_call(hypot, diojit.oftype(int), diojit.oftype(int))\nspecialized_hypot(1, 2) # 30% faster than CPython\n```\n\nDIO-JIT is a method JIT driven by abstract interpretation and call-site specialisation.\nAbstract interpretation is done by the compiler (`jit.absint.abs`).\nYou can register new specialisation rules(and see examples) from (`jit.absint.prescr`).\n\nWe're able to optimise anything!\n\n## Contribution Example: Add a specialisation rule for `list.append`\n\n1. Python Side:\n\n```python\nimport diojit as jit\nimport timeit\njit.create_shape(list, oop=True)\n@jit.register(list, attr=\"append\")\ndef list_append_analysis(self: jit.Judge, *args: jit.AbsVal):\n    if len(args) != 2:\n        # rollback to CPython's default code\n        return NotImplemented\n    lst, elt = args\n\n    return jit.CallSpec(\n        instance=None,  # return value is not static\n        e_call=jit.S(jit.intrinsic(\"PyList_Append\"))(lst, elt),\n        possibly_return_types=tuple({jit.S(type(None))}),\n    )\n```\n\n2. Julia Side:\n\n- [import 'Py_ListAppend' symbol](https://github.com/thautwarm/DIO.jl/blob/182a995cf0543007ef5d7089e5fdbbb8104f8e02/src/dynamic.jl#L32)\n\n- [calling convention for 'Py_ListAppend'](https://github.com/thautwarm/DIO.jl/blob/182a995cf0543007ef5d7089e5fdbbb8104f8e02/src/dynamic.jl#L50):\n\nYou can either do step 2) at Python side(for users other than DIO-JIT developers):\n```python\nimport diojit as jit\nfrom jit.runtime.julia_rt import jl_eval\njl_implemented_intrinsic = b\"\"\"\nfunction PyList_Append(lst::Ptr, elt::PyPtr)\n    if ccall(PyAPI.PyList_Append, Cint, (PyPtr, PyPtr), lst, elt) == -1\n        return Py_NULL\n    end\n    nothing # automatically maps to a Python None\nend\nDIO.DIO_ExceptCode(::typeof(PyList_Append)) != Py_NULL\n\"\"\"\njl_eval(jl_implemented_intrinsic)\n\n```\n\nYou immediately get a >**100%** time speed up:\n\n```python\n@jit.jit\ndef append3(xs, x):\n    xs.append(x)\n    xs.append(x)\n    xs.append(x)\n\njit_append3 = jit.jit_spec_call(append3, jit.oftype(list), jit.Top) # 'Top' means 'Any'\nxs = [1]\njit_append3(xs, 3)\n\nprint(\"test jit_append3, [1] append 3 for 3 times:\", xs)\n# test jit func, [1] append 3 for 3 times: [1, 3, 3, 3]\n\nxs = []\n%timeit append3(xs, 1)\n# 293 ns Â± 26.2 ns per loop (mean Â± std. dev. of 7 runs, 1000000 loops each)\n\nxs = []\n%timeit jit_append3(xs, 1)\n# 142 ns Â± 14.9 ns per loop (mean Â± std. dev. of 7 runs, 10000000 loops each)\n```\n\n## Why Julia?\n\nWe don't want to maintain a C compiler, and calling `gcc` or others will introduce cross-process IO, which is slow.\nWe prefer compiling JITed code with LLVM, and **Julia is quite a killer tool for this use case**.\n\n## Current Limitations\n\n1. Support for `*varargs` and `**kwargs` are not ready: we do can immediately support them with very tiny JIT performance gain, but considering backward compatibility we decide not to do this.\n\n2. Exception handling is not yet supported inside JIT functions.\n\n    <details><summary>Why?</summary>\n    <p>\n\n    We haven't implemented the translation from exception handling bytecode to untyped DIO IR (`jit.absint.abs.In_Stmt`).\n\n    </p>\n    </details>\n\n    <details><summary>Will support?</summary>\n    <p>\n\n    Yes.\n\n    In fact, now a callsite in any JIT function can raise an exception. It will not be handled by JIT functions, instead, it is lifted up to the root call, which is a pure Python call.\n\n    Exception handling will be supported when we have efforts on translating CPython bytecode about exception handling into untyped DIO IR (`jit.absint.abs.In_Stmt`).\n\n    P.S: This will be finished simultaneously with the support for `for` loop.\n\n    </p>\n    </details>\n\n3. Support for `for` loop is missing.\n\n    <details><summary>Why?</summary>\n    <p>\n\n    Firstly, in CPython, `for` loop relies on exception handling, which is not supported yet.\n\n    Secondly, we're considering a fast path for `for` loop, maybe proposing a `__citer__` protocol for faster iteration for JIT functions, which requires communications with Python developers.\n\n    </p>\n    </details>\n\n    <details><summary>Will support?</summary>\n    <p>\n\n    Yes.\n\n    This will be finished simultaneously with support for exception handling (faster `for` loop might come later).\n\n    </p>\n    </details>\n\n4. Closure support is missing.\n\n    <details><summary>Why?</summary>\n    <p>\n\n    In imperative languages, closures use *cell* structures to achieve mutable free/cell variables.\n\n    However, a writable cell makes it hard to optimise in a dynamic language.\n\n    We recommend using `types.MethodType` to create immutable closuresï¼Œwhich can be highly optimised in DIO-JIT(near future).\n\n    ```python\n    import types\n    def f(freevars, z):\n            x, y = freevars\n            return x + y + z\n\n    def hof(x, y):\n        return types.MethodType(f, (x, y))\n    ```\n\n    </p>\n    </details>\n\n    <details><summary>Will support?</summary>\n    <p>\n\n    Still yes. However, don't expect much about the performance gain for Python's vanilla closures.\n\n    </p>\n    </details>\n\n5. Specifying fixed global references(`@diojit.jit(fixed_references=['isinstance', 'str', ...]`) too annoying?\n\n    Sorry, you have to. We are thinking about the possibility about automatic JIT covering all existing CPython code, but the biggest impediment is the volatile global variables.\n\n    <details><summary>Possibility?</summary>\n    <p>\n\n    Recently we found CPython's newly(`:)`) added feature `Dict.ma_version_tag` might be used to automatically notifying JITed functions to re-compile when the global references change.\n\n    More research is required.\n\n    </p>\n    </details>\n\n## Contributions\n\n1. Add more prescribed specialisation rules at `jit.absint.prescr`.\n2. TODO\n\n## Benchmarks\n\nCheck `benchmarks` directory.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thautwarm/diojit",
    "keywords": "Just-In-Time,JIT,compiler",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diojit",
    "package_url": "https://pypi.org/project/diojit/",
    "platform": "any",
    "project_url": "https://pypi.org/project/diojit/",
    "project_urls": {
      "Homepage": "https://github.com/thautwarm/diojit"
    },
    "release_url": "https://pypi.org/project/diojit/0.1.5/",
    "requires_dist": [
      "pyrsistent",
      "julia"
    ],
    "requires_python": ">=3.8.0",
    "summary": "A general-purpose JIT for CPython.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9359263,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06045e9a485f436d7c997c34eed9324ce1980619c60e0769662e2d69f9fbf5cb",
          "md5": "8373bc59d3a5fbfa8bd03a6617c4ea6d",
          "sha256": "16c734a54b6238cc5a834abfb2e9c3d6919818ef351b3d10159fa51e9ae78db2"
        },
        "downloads": -1,
        "filename": "diojit-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8373bc59d3a5fbfa8bd03a6617c4ea6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 23473,
        "upload_time": "2021-02-03T13:00:13",
        "upload_time_iso_8601": "2021-02-03T13:00:13.935075Z",
        "url": "https://files.pythonhosted.org/packages/06/04/5e9a485f436d7c997c34eed9324ce1980619c60e0769662e2d69f9fbf5cb/diojit-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9665f8a3bef30801a4145f105174497fc580c44826128952d3e90536e215bb9d",
          "md5": "4de869e830d5874aa75e60e49bbd6e49",
          "sha256": "d642694a55cc2a1a240bcbfc945ae7fa9f33c642b3596ff91c15095828c79312"
        },
        "downloads": -1,
        "filename": "diojit-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4de869e830d5874aa75e60e49bbd6e49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 25908,
        "upload_time": "2021-02-05T01:50:18",
        "upload_time_iso_8601": "2021-02-05T01:50:18.345839Z",
        "url": "https://files.pythonhosted.org/packages/96/65/f8a3bef30801a4145f105174497fc580c44826128952d3e90536e215bb9d/diojit-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18d01d8e7e955e2c0b43a6ce56282283ae10367c782bf43823c1d3be684c7650",
          "md5": "7e50ef3e490458fff09b67e15053e7ae",
          "sha256": "bff6cca6020f9ef787d29dcb5afe31ed6442ee209ff224b8d9e9cc41ed1b7d31"
        },
        "downloads": -1,
        "filename": "diojit-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e50ef3e490458fff09b67e15053e7ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 27760,
        "upload_time": "2021-02-05T12:14:27",
        "upload_time_iso_8601": "2021-02-05T12:14:27.906395Z",
        "url": "https://files.pythonhosted.org/packages/18/d0/1d8e7e955e2c0b43a6ce56282283ae10367c782bf43823c1d3be684c7650/diojit-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31a32cc09ec4ab02eb8910b3072590cf55b732ea44b7cc21465520e848063b0a",
          "md5": "d7cb1d945fbc3fbf3a3c3ccf81501f16",
          "sha256": "3d2b3c12fadd96da090fabdfea167661e4709bae325d4ee1b7185832e69c8a8c"
        },
        "downloads": -1,
        "filename": "diojit-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7cb1d945fbc3fbf3a3c3ccf81501f16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 28664,
        "upload_time": "2021-02-05T17:15:59",
        "upload_time_iso_8601": "2021-02-05T17:15:59.537843Z",
        "url": "https://files.pythonhosted.org/packages/31/a3/2cc09ec4ab02eb8910b3072590cf55b732ea44b7cc21465520e848063b0a/diojit-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac9c9b0b39d4938aaad6528bfadc75914089772ba2383b75a62a1edee4726e7f",
          "md5": "fdd70cc8eba6972ad0a307e9c07c318d",
          "sha256": "7c7a980de61afa6a0121e3fab4bfec0f4df1853a4d9b2ed14d08cdf8a6f26c8a"
        },
        "downloads": -1,
        "filename": "diojit-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdd70cc8eba6972ad0a307e9c07c318d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 29049,
        "upload_time": "2021-02-07T11:27:57",
        "upload_time_iso_8601": "2021-02-07T11:27:57.884868Z",
        "url": "https://files.pythonhosted.org/packages/ac/9c/9b0b39d4938aaad6528bfadc75914089772ba2383b75a62a1edee4726e7f/diojit-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2c687f25c57fba1c7c26a7b15e0a7937c69463065d579a5ef5519a63e6d1e4b",
          "md5": "1b40acafe122ba0f66e8e23684187735",
          "sha256": "c6eccd89a3fe1bd5aff0ab07f2591e6b168bba3415bd0856090a75bee788b107"
        },
        "downloads": -1,
        "filename": "diojit-0.1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b40acafe122ba0f66e8e23684187735",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 29199,
        "upload_time": "2021-02-07T11:39:58",
        "upload_time_iso_8601": "2021-02-07T11:39:58.487512Z",
        "url": "https://files.pythonhosted.org/packages/a2/c6/87f25c57fba1c7c26a7b15e0a7937c69463065d579a5ef5519a63e6d1e4b/diojit-0.1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60d9d5581e776176fab6371d020b0152e7ffbcb195446b1b9c6a81d0ae8a7a74",
          "md5": "6812a91568c0f45596b8aab34d566680",
          "sha256": "741b5e4092faa5d256f16b17f9449354603844ddfde6f121a6e6c030269f1faa"
        },
        "downloads": -1,
        "filename": "diojit-0.1.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6812a91568c0f45596b8aab34d566680",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 30327,
        "upload_time": "2021-02-08T09:47:59",
        "upload_time_iso_8601": "2021-02-08T09:47:59.980044Z",
        "url": "https://files.pythonhosted.org/packages/60/d9/d5581e776176fab6371d020b0152e7ffbcb195446b1b9c6a81d0ae8a7a74/diojit-0.1.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dceedb67d8f02b876ae4fe4eefab5584e813d0935af8f87f1b21808cdd900bd",
          "md5": "55d82ab80bcffa557102bec35febd763",
          "sha256": "3e560ef03de632e70420728bd31aa3cf16a2254cba8dcc3b453ff47917f16041"
        },
        "downloads": -1,
        "filename": "diojit-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55d82ab80bcffa557102bec35febd763",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 31232,
        "upload_time": "2021-02-08T12:44:53",
        "upload_time_iso_8601": "2021-02-08T12:44:53.675014Z",
        "url": "https://files.pythonhosted.org/packages/1d/ce/edb67d8f02b876ae4fe4eefab5584e813d0935af8f87f1b21808cdd900bd/diojit-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9d33706284250e6617f69dfc15674fc09c953b68c6a2f163fecdffcae2eae4a",
          "md5": "4c50e1dbdf6ff262cf9278efc49791d1",
          "sha256": "869d5834fed44f8894ae7bb790251df16530d1664b8f397d801e362d04eb2833"
        },
        "downloads": -1,
        "filename": "diojit-0.2a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c50e1dbdf6ff262cf9278efc49791d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 32458,
        "upload_time": "2021-02-09T03:26:29",
        "upload_time_iso_8601": "2021-02-09T03:26:29.656923Z",
        "url": "https://files.pythonhosted.org/packages/a9/d3/3706284250e6617f69dfc15674fc09c953b68c6a2f163fecdffcae2eae4a/diojit-0.2a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1dceedb67d8f02b876ae4fe4eefab5584e813d0935af8f87f1b21808cdd900bd",
        "md5": "55d82ab80bcffa557102bec35febd763",
        "sha256": "3e560ef03de632e70420728bd31aa3cf16a2254cba8dcc3b453ff47917f16041"
      },
      "downloads": -1,
      "filename": "diojit-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55d82ab80bcffa557102bec35febd763",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 31232,
      "upload_time": "2021-02-08T12:44:53",
      "upload_time_iso_8601": "2021-02-08T12:44:53.675014Z",
      "url": "https://files.pythonhosted.org/packages/1d/ce/edb67d8f02b876ae4fe4eefab5584e813d0935af8f87f1b21808cdd900bd/diojit-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}