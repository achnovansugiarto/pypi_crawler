{
  "info": {
    "author": "Nick Noel Machnik",
    "author_email": "nick.machnik@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# expected-levenshtein\n![Python application](https://github.com/nickmachnik/expected-levenshtein/workflows/Python%20application/badge.svg)\n![License](https://img.shields.io/github/license/nickmachnik/codon-degeneracy)\n\nThis repository contains empirically determined approximate expected [Levenshtein distances](https://en.wikipedia.org/wiki/Levenshtein_distance) between random strings over alphabets of different sizes, as well as simple python code to generate them.\n\n## Dependencies\n\nTo use the code, you will need `numpy` and `numba`.\n\n## Installing\n\nSimply clone this repo:\n\n```\ngit clone https://github.com/nickmachnik/expected-levenshtein.git [TARGET DIR]\n```\n\nand then install  via pip\n```\npip install [TARGET DIR]\n```\n\nor install directly from PyPI (this won't include unreleased changes as specified in the [changelog](CHANGELOG.md)):\n```\npip install expected-levenshtein\n```\n\n## Testing\n\nTest the cloned package:\n```\ncd [TARGET DIR]\npython -m unittest\n```\n\n## Geting started\n\n### Use precomputed models\n\nThis package comes with precomputed models for certain alphabet sizes k and string lengths n. Currently the following models are available:\n- k = 20, 25 ≤ n ≤ 6000\n\n> Note: A model for a specific value of n only fits values for m (the length of the second string)\n> such that m ≤ n.\n\nThe following example shows how a models can be loaded and used to compute the expected levenshtein distances for k = 20, n = 5000:\n```python\nimport expected_levenshtein.fit as efit\nimport numpy as np\n\n# load all models for k = 20\nrow_indices, coefficients, mean_squared_deviations = efit.load_precomputed(20)\n\n# get the specific model for n = 5000. Here we consider an index row offset.\ncoeff_5k = coefficients[5000 - row_indices[0]]\n\n# predict expected distance for n=5000, m=876\nsingle_distance = efit.poly(876, coeff_5k)\n\n# predict expected distances for n=5000, m ≤ 5000\nrange_distances = efit.poly(np.arange(5000), coeff_5k)\n```\n\n### Computing average levenshtein distances\n\nTo compute the approximate expected Levenshtein distances of random strings of lengths 1 ≤ lengths ≤ n, use `random_average_levenshtein` in `sample.py`.\n\nThis example shows how to compute the distances of random strings up to length 100 over a 4-letter alphabet, averaged over 1000 replicates.\n```python\nfrom sample import random_average_levenshtein\nimport numpy as np\n\nrandom_average_levenshtein(100, 1000, np.arange(4))\n```\n\n### Generating models for expected distances\n\nFor long sequences, the distance matrix returned by `random_average_levenshtein` can get quite large.\nIf you prefer not to load and query a large matrix object every time you need an expected distance,\n`fit.model_average_levenshtein` generates a polynomial model for each row in\nthe distance matrix. That way, the information that needs to be stored to compute approximate\nexpected levenshtein distances is reduced to the coefficients of the polynomials. Once computed,\nthese can be used to predict expected distances with `fit.poly`.\n\nThis example shows how to generate and use such models for random strings from length 25 to length 50.\n```python\nfrom sample import random_average_levenshtein\nfrom fit import poly, model_average_levenshtein\nimport numpy as np\n\n# sample distances\naverage_distances = random_average_levenshtein(50, 1000, np.arange(4))\n\n# make models\nrow_indices, coefficients, mean_squared_deviations = model_average_levenshtein(\n    average_distances, model_rows=np.arange(25, 51))\n\n# predict expected distance for n=50, m=44\ncoeff_n_50 = coefficients[-1]\npredicted_expected_distance = poly(44, coeff_n_50)\n```\n\n## License\n\nMIT license ([LICENSE](LICENSE.txt) or https://opensource.org/licenses/MIT)\n\n<!-- \nEnd with an example of getting some data out of the system or using it for a little demo\n\n## Running the tests\n\nExplain how to run the automated tests for this system\n\n### Break down into end to end tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n### And coding style tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n## Deployment\n\nAdd additional notes about how to deploy this on a live system\n\n## Built With\n\n* [Dropwizard](http://www.dropwizard.io/1.0.2/docs/) - The web framework used\n* [Maven](https://maven.apache.org/) - Dependency Management\n* [ROME](https://rometools.github.io/rome/) - Used to generate RSS Feeds\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags).\n\n## Authors\n\n* **Billie Thompson** - *Initial work* - [PurpleBooth](https://github.com/PurpleBooth)\n\nSee also the list of [contributors](https://github.com/your/project/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Acknowledgments\n\n* Hat tip to anyone whose code was used\n* Inspiration\n* etc\n\n -->\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nickmachnik/expected-levenshtein.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "expected-levenshtein",
    "package_url": "https://pypi.org/project/expected-levenshtein/",
    "platform": "",
    "project_url": "https://pypi.org/project/expected-levenshtein/",
    "project_urls": {
      "Homepage": "https://github.com/nickmachnik/expected-levenshtein.git"
    },
    "release_url": "https://pypi.org/project/expected-levenshtein/0.1.2/",
    "requires_dist": [
      "numpy (>=1.8.0)",
      "numba",
      "importlib-resources"
    ],
    "requires_python": "",
    "summary": " Empirical determination of approximate values for levenshtein distances between random strings.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7353681,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d676d4949920d058f95d746d00017652b3d1253840939777a5ee03d33a23577a",
          "md5": "8d0e993232215f4dd106dc664fdaa7b0",
          "sha256": "740f513b44cb9bbf829b1692c6f315e85dfb1ffe4b67e8468f0e683bde081c8d"
        },
        "downloads": -1,
        "filename": "expected_levenshtein-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d0e993232215f4dd106dc664fdaa7b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6155,
        "upload_time": "2020-05-26T19:56:01",
        "upload_time_iso_8601": "2020-05-26T19:56:01.698837Z",
        "url": "https://files.pythonhosted.org/packages/d6/76/d4949920d058f95d746d00017652b3d1253840939777a5ee03d33a23577a/expected_levenshtein-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6716add38db9edd7d035ad4ae58971bb4129d5fb5c5bc3cf2f7ded79afa6779b",
          "md5": "b7a992fbb60e818474c46a2ddbe4b1c2",
          "sha256": "8e362a2800b49b865c3b618b23e6d268c36b4b5b627acf97bfe1ad2e3b02c10a"
        },
        "downloads": -1,
        "filename": "expected-levenshtein-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7a992fbb60e818474c46a2ddbe4b1c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5317,
        "upload_time": "2020-05-26T19:56:03",
        "upload_time_iso_8601": "2020-05-26T19:56:03.861773Z",
        "url": "https://files.pythonhosted.org/packages/67/16/add38db9edd7d035ad4ae58971bb4129d5fb5c5bc3cf2f7ded79afa6779b/expected-levenshtein-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04d31c6b7fed3c350be16d8524666f565e0281a4ec1df83fe58b9176ba17ef1c",
          "md5": "d812304727eea3ea385e4ff0fdbae9ec",
          "sha256": "c8808bb9eb615df68426dabcb7caade30cc81f86108bca3d9b077404a6f51da9"
        },
        "downloads": -1,
        "filename": "expected_levenshtein-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d812304727eea3ea385e4ff0fdbae9ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7824,
        "upload_time": "2020-05-29T13:02:49",
        "upload_time_iso_8601": "2020-05-29T13:02:49.925498Z",
        "url": "https://files.pythonhosted.org/packages/04/d3/1c6b7fed3c350be16d8524666f565e0281a4ec1df83fe58b9176ba17ef1c/expected_levenshtein-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1c4f48f7ea12a5f99d5c9a369cb9f99acfae52dfd2aa68322d2d5cf3403f40f",
          "md5": "5999131d34efc3850c2ddd34af6207b4",
          "sha256": "fbe0ea87d8dd9f799dfd60cfe1aaf867e35a74b52832af9762c22565056da9bd"
        },
        "downloads": -1,
        "filename": "expected-levenshtein-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5999131d34efc3850c2ddd34af6207b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6379,
        "upload_time": "2020-05-29T13:02:50",
        "upload_time_iso_8601": "2020-05-29T13:02:50.881785Z",
        "url": "https://files.pythonhosted.org/packages/f1/c4/f48f7ea12a5f99d5c9a369cb9f99acfae52dfd2aa68322d2d5cf3403f40f/expected-levenshtein-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cb04ee90921e84f57a6c5eb8585eea52dee68303b0df36edd4d5b6e01d2ed02",
          "md5": "40385e0a83d3dd118d5a941cb96b7326",
          "sha256": "7706399088192cb3f7db45bc73d437da93e238c279d30c925a0dcb2a469040ca"
        },
        "downloads": -1,
        "filename": "expected_levenshtein-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40385e0a83d3dd118d5a941cb96b7326",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 398208,
        "upload_time": "2020-05-29T15:33:27",
        "upload_time_iso_8601": "2020-05-29T15:33:27.751792Z",
        "url": "https://files.pythonhosted.org/packages/1c/b0/4ee90921e84f57a6c5eb8585eea52dee68303b0df36edd4d5b6e01d2ed02/expected_levenshtein-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6331a626279db8b0cf8af00390c4c5fd4b5d32017b0f784481b6e85891c6f400",
          "md5": "1085a8c49a3a2c11f7c7d0155c33b9d5",
          "sha256": "12f2f9a93775e88d9dea9646d512eb335d0f765402b20bb95a25c9e71fb048f7"
        },
        "downloads": -1,
        "filename": "expected-levenshtein-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1085a8c49a3a2c11f7c7d0155c33b9d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 402157,
        "upload_time": "2020-05-29T15:33:29",
        "upload_time_iso_8601": "2020-05-29T15:33:29.113533Z",
        "url": "https://files.pythonhosted.org/packages/63/31/a626279db8b0cf8af00390c4c5fd4b5d32017b0f784481b6e85891c6f400/expected-levenshtein-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cb04ee90921e84f57a6c5eb8585eea52dee68303b0df36edd4d5b6e01d2ed02",
        "md5": "40385e0a83d3dd118d5a941cb96b7326",
        "sha256": "7706399088192cb3f7db45bc73d437da93e238c279d30c925a0dcb2a469040ca"
      },
      "downloads": -1,
      "filename": "expected_levenshtein-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40385e0a83d3dd118d5a941cb96b7326",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 398208,
      "upload_time": "2020-05-29T15:33:27",
      "upload_time_iso_8601": "2020-05-29T15:33:27.751792Z",
      "url": "https://files.pythonhosted.org/packages/1c/b0/4ee90921e84f57a6c5eb8585eea52dee68303b0df36edd4d5b6e01d2ed02/expected_levenshtein-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6331a626279db8b0cf8af00390c4c5fd4b5d32017b0f784481b6e85891c6f400",
        "md5": "1085a8c49a3a2c11f7c7d0155c33b9d5",
        "sha256": "12f2f9a93775e88d9dea9646d512eb335d0f765402b20bb95a25c9e71fb048f7"
      },
      "downloads": -1,
      "filename": "expected-levenshtein-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1085a8c49a3a2c11f7c7d0155c33b9d5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 402157,
      "upload_time": "2020-05-29T15:33:29",
      "upload_time_iso_8601": "2020-05-29T15:33:29.113533Z",
      "url": "https://files.pythonhosted.org/packages/63/31/a626279db8b0cf8af00390c4c5fd4b5d32017b0f784481b6e85891c6f400/expected-levenshtein-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}