{
  "info": {
    "author": "Casey Duckering",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Machiavelli\n\nA command-line solver for the card game [Machiavelli](https://en.wikipedia.org/wiki/Machiavelli_(Italian_card_game)).\n\nIn Machiavelli, cards are played and arranged in groups on the table.\nYou either draw one card or play any number of cards from your hand.\nThe only constraint is that at the end of your turn, all the cards on the table are grouped in valid sets or sequences of at least three each.\nSee the [complete rules here](https://en.wikipedia.org/wiki/Machiavelli_(Italian_card_game)).\n\nMachiavelli is particularly nice to solve with a computer because the only game state that matters is the list of cards on the table and in your hand.\nA valid grouping of cards can simply be recomputed from scratch with a [CSP](https://en.wikipedia.org/wiki/Constraint_satisfaction_problem) solver on each turn.\nThis solver translates the rules and objective of the game into an [integer program](https://en.wikipedia.org/wiki/Integer_programming) and uses [CVXPY](https://www.cvxpy.org/) to find the best move in a fraction of a second.\n\n## Install\n\nMachiavelli is available on PyPI:\n\n```bash\npython3 -m pip install machiavelli\n```\n\n## Usage\n\nThis package provides a command line tool to solve the card game Machiavelli.\nThe tool keeps track of the game state by prompting for cards drawn by you and cards played by anyone.\nIt will then tell you the \"best\" play (the play that uses the most cards from your hand).\n1. Enter your initial hand of cards at the prompt e.g. `kh,td,jh,7d,3c,4s,7s,3d,2c,6s` (king of hearts, 10 of diamonds, ...).\n2. Enter all cards played by others before your first turn e.g. `7c,8c,9c` (a sequence of clubs from 7 to 9).\n3. Check the solution printout.\n    - For output like `hand: 2c,3c,3d,4s,6s,7s,7d,td,jh,kh`, no cards are playable.  Draw one.\n    - For output like `hand: 3d,7d,td,jc,jh,kh -- use: 1d,4s,5c,6s,7s`, the cards on the right are playable.  Rearrange the cards on the table and add yours as indicated e.g. `table: (1c,[1d],1h) ([5c],5d,5h) (2c,3c,4c) (2h,3h,4h) ([4s],5s,[6s],[7s]) (7c,8c,9c)`.\n4. If you drew a card, enter it at the `Drawn card` prompt.\n5. If you played, enter the cards you played at the prompt.\n6. Record all cards played by the other players at the `Other plays` prompt.\n7. Go to step 3 and repeat until you empty your hand.\n8. Win.\n\n## Demo Game\n```bash\n$ machiavelli --pretty --emoji\nEnter starting hand: kh,jh,10d,7d,3c,4s,7s,3d,2c,6s\t<- User input\nEnter other plays: 9c,8c,7c\t\t\t\t<- User input\nCurrent game state: machiavelli 7c,8c,9c 2c,3c,3d,4s,\n6s,7s,7d,td,jh,kh\n\n### Before your play ###\ntable: (7♣️ 8♣️ 9♣️)\n\n### Solve ###\n--- 10 left ---\nhand: 2♣️ 3♣️ 3♦️ 4♠️ 6♠️ 7♠️ 7♦️ 10♦️ J♥️ K♥️\t\t<- Solver found no playable cards\ntable: (7♣️ 8♣️ 9♣️)\n\nEnter drawn card(s) (or blank): jc\t\t\t<- So draw one card\nEnter my last play (or blank):\nEnter other plays:\t\t\t\t\t<- Other players only drew cards\nCurrent game state: machiavelli 7c,8c,9c 2c,3c,3d,4s,\n6s,7s,7d,td,jc,jh,kh\n\n### Before your play ###\ntable: (7♣️ 8♣️ 9♣️)\n\n### Solve ###\n--- 11 left ---\nhand: 2♣️ 3♣️ 3♦️ 4♠️ 6♠️ 7♠️ 7♦️ 10♦️ J♣️ J♥️ K♥️\t\t<- Still no playable cards\ntable: (7♣️ 8♣️ 9♣️)\n\nEnter drawn card(s) (or blank): ac\t\t\t<- So draw another card\nEnter my last play (or blank):\nEnter other plays:\nCurrent game state: machiavelli 7c,8c,9c 1c,2c,3c,3d,\n4s,6s,7s,7d,td,jc,jh,kh\n\n### Before your play ###\ntable: (7♣️ 8♣️ 9♣️)\n\n### Solve ###\n--- 9 left ---\nhand: 3♦️ 4♠️ 6♠️ 7♠️ 7♦️ 10♦️ J♣️ J♥️ K♥️\n                                -- use: A♣️ 2♣️ 3♣️\t<- Solver found playable cards\ntable: (A♣️ 2♣️ 3♣️) (7♣️ 8♣️ 9♣️)\t\t\t<- This is a valid play of\n\t\t\t\t\t\t\t   the cards on the table\nEnter drawn card(s) (or blank):\nEnter my last play (or \"best\"=1c,2c,3c): best\nEnter other plays:\nCurrent game state: machiavelli 1c,2c,3c,7c,8c,9c 3d,\t<- (You can restart with these\n4s,6s,7s,7d,td,jc,jh,kh\t\t\t\t\t    arguments to restore game state)\n\n...\n...\n...\n\nCurrent game state: machiavelli 1c,1d,1d,1h,2s,2c,2d,\n2d,2h,3s,3c,3d,3h,4s,4s,4c,4d,4h,5s,5c,5d,5h,6s,6c,6d,\n6d,6h,7s,7s,7c,7c,7d,7d,7h,8s,8s,8c,8d,8d,8h,8h,9s,9s,\n9c,9d,9h,ts,ts,tc,tc,td,th,th,js,js,jc,jc,jd,jd,jh,jh,\nqs,qd,qh,ks,ks,kc,kh kh\n\n### Before your play ###\ntable: (A♣️ A♦️ A♥️) (2♣️ 2♦️ 2♥️) (10♠️ 10♣️ 10♥️)\n(J♠️ J♣️ J♦️ J♥️) (K♠️ K♣️ K♥️) (A♦️ 2♦️ 3♦️ 4♦️ 5♦️\n6♦️ 7♦️ 8♦️ 9♦️ 10♦️ J♦️ Q♦️) (2♠️ 3♠️ 4♠️) (3♣️ 4♣️\n5♣️ 6♣️ 7♣️) (3♥️ 4♥️ 5♥️ 6♥️ 7♥️ 8♥️) (4♠️ 5♠️ 6♠️\n7♠️ 8♠️ 9♠️) (6♦️ 7♦️ 8♦️) (7♠️ 8♠️ 9♠️ 10♠️ J♠️ Q♠️\nK♠️) (7♣️ 8♣️ 9♣️ 10♣️ J♣️) (8♥️ 9♥️ 10♥️ J♥️ Q♥️)\n\n### Solve ###\n--- 0 left ---\nhand: WIN -- use: K♥️\t\t\t\t\t<- Solver found a winning play!\ntable: (A♣️ A♦️ A♥️) (2♣️ 2♦️ 2♥️) (7♠️ 7♣️ 7♦️) (8♠️\n8♦️ 8♥️) (10♠️ 10♣️ 10♥️) (J♠️ J♣️ J♦️ J♥️) (K♠️ K♣️\nK♥️) (A♦️ 2♦️ 3♦️ 4♦️ 5♦️ 6♦️) (2♠️ 3♠️ 4♠️) (3♣️ 4♣️\n5♣️ 6♣️ 7♣️ 8♣️ 9♣️ 10♣️ J♣️) (3♥️ 4♥️ 5♥️ 6♥️ 7♥️ 8♥️\n9♥️ 10♥️ J♥️ Q♥️ K♥️) (4♠️ 5♠️ 6♠️ 7♠️ 8♠️ 9♠️) (6♦️\n7♦️ 8♦️ 9♦️ 10♦️ J♦️ Q♦️) (9♠️ 10♠️ J♠️ Q♠️ K♠️)\n\nEnter drawn card(s) (or blank): ^D\nQuit\n```\n\n## Acknowledgements\nThanks to [Konstantinos Ameranis](https://github.com/kameranis) for help formulating the integer program and thanks to Konstantinos, Kevin, and Kunal for extensive play-testing and debugging.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/cduck/machiavelli/archive/0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cduck/machiavelli",
    "keywords": "card game,game,CSP",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "machiavelli",
    "package_url": "https://pypi.org/project/machiavelli/",
    "platform": "",
    "project_url": "https://pypi.org/project/machiavelli/",
    "project_urls": {
      "Download": "https://github.com/cduck/machiavelli/archive/0.1.0.tar.gz",
      "Homepage": "https://github.com/cduck/machiavelli"
    },
    "release_url": "https://pypi.org/project/machiavelli/0.1.0/",
    "requires_dist": [
      "numpy (~=1.11)",
      "cvxpy (~=1.1)",
      "cvxopt (~=1.2)",
      "termcolor (~=1.1)",
      "colorama (~=0.3)"
    ],
    "requires_python": "",
    "summary": "Solver for the card game Machiavelli",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11477372,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1342c6177df6dc39d7ffb02a6e3fd18a941b4534d080e376db382b11478d4421",
          "md5": "3845218d4a263dc5743b9db2dad7a018",
          "sha256": "2761b7728f09e3bf06d56514a79ceb11b42c3dcbcaa3093967ecdb2d73b62f99"
        },
        "downloads": -1,
        "filename": "machiavelli-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3845218d4a263dc5743b9db2dad7a018",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10857,
        "upload_time": "2021-09-17T10:32:28",
        "upload_time_iso_8601": "2021-09-17T10:32:28.591993Z",
        "url": "https://files.pythonhosted.org/packages/13/42/c6177df6dc39d7ffb02a6e3fd18a941b4534d080e376db382b11478d4421/machiavelli-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1342c6177df6dc39d7ffb02a6e3fd18a941b4534d080e376db382b11478d4421",
        "md5": "3845218d4a263dc5743b9db2dad7a018",
        "sha256": "2761b7728f09e3bf06d56514a79ceb11b42c3dcbcaa3093967ecdb2d73b62f99"
      },
      "downloads": -1,
      "filename": "machiavelli-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3845218d4a263dc5743b9db2dad7a018",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10857,
      "upload_time": "2021-09-17T10:32:28",
      "upload_time_iso_8601": "2021-09-17T10:32:28.591993Z",
      "url": "https://files.pythonhosted.org/packages/13/42/c6177df6dc39d7ffb02a6e3fd18a941b4534d080e376db382b11478d4421/machiavelli-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}