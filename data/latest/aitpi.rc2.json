{
  "info": {
    "author": "Caden Churchman",
    "author_email": "ccaden21@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# AITPI\nArbitrary Input for Terminal or a Pi, or Aitpi (pronounced 'eight pi')\n\n# Goal\nThe goal of this project is to provide a simple, but arbitrary, input\nmechanism for use with a raspberry pi, or a terminal keyboard (maybe more SBCs in the future?!).\n\nThis program can be configured with two simple json files.\n\n# Supported\nThe project supports:\n- Simple 'buttons'\n    - '1 to 1' gpio to button setup on a raspberry pi\n    - Non interrupt based key input\n    - Interrupt based key input (using pynput)\n- Encoders\n    - '2 to 1' gpio to encoder setup on a raspberry pi\n    - Non interrupt based 2 to 1 key input\n    - Interrupt based 2 to 1 key input (using pynput)\n\n# Examples\nTo configure your setup, you can create up to three types of json files:\n\n## Command Registry:\nA registry of commands that will interact directly with your user program\n```\n[\n    {\n        \"type\": \"normal\",\n        \"input_type\": \"button\",\n        \"id\": \"1\",\n        \"name\": \"command0\"\n    },\n    {\n        \"id\": \"1\",\n        \"input_type\": \"button\",\n        \"path\": \"../temp/\",\n        \"type\": \"presets\",\n        \"name\": \"howdy\"\n    },\n    {\n        \"id\": \"1\",\n        \"input_type\": \"button\",\n        \"path\": \"../temp/\",\n        \"type\": \"presets\",\n        \"name\": \"test\"\n    },\n    {\n        \"id\": \"1\",\n        \"input_type\": \"button\",\n        \"path\": \"../temp/\",\n        \"type\": \"presets\",\n        \"name\": \"another.txt\"\n    }\n]\n```\n- name: A UNIQUE identifier that is presented.\n- id: The message id sent with each command\n- input_type: The abstract functional representation i.e. (for now) a button or an encoder\n- type: Category for each command. Must be defined, but is only used to sort commands usefully\n- path: Only used for foldered commands. Tells the file path of the represented file.\n\n## Input list\nThe list of all 'input units' that your system uses\n```\n[\n    {\n        \"name\": \"Button0\",\n        \"type\": \"button\",\n        \"mechanism\": \"rpi_gpio\",\n        \"trigger\": \"5\",\n        \"reg_link\": \"commandName0\"\n    },\n    {\n        \"name\": \"Encoder0\",\n        \"type\": \"encoder\",\n        \"mechanism\": \"rpi_gpio\",\n        \"left_trigger\": \"17\",\n        \"right_trigger\": \"24\",\n        \"reg_link\": \"commandName2\"\n    }\n]\n```\n- This is an array of depth 1, with all your 'input units' listed as dictionaries inside\n    - \"name\": specifies the name of the input unit\n        - Valid names: Any string, must be unique among all input units\n    - \"type\": specifies what type of input this unit is\n        - Valid types: 'button', 'encoder'\n    - \"mechanism\": This tells Aitpi by what mechanism the input will be watched\n        - Valid mechanisms: 'key_interrupt', 'key_input', 'rpi_gpio'\n            - key_interrupt: Uses [pynput](https://pypi.org/project/pynput/) to set interrupts on your keyboard itself\n            - key_input: Manual in-code input through the function 'aitpi.takeInput'\n            - rpi_gpio: Raspberry pi GPIO input, all input units are assumed to be active low\n    - \"trigger\": The key string or gpio number that will trigger input for a button\n        - NOTE: This is only needed if 'type' equals 'button'\n        - Valid triggers: Any string, or any valid unused gpio number on a raspberry pi\n            - Note strings of more than one char will not work with key_interrupt (pynput)\n    - \"left_trigger\" and \"right_trigger: The key string or gpio numbers that will act as a left or right for an encoder\n        - NOTE: These are only needed if 'type' equals 'encoder'\n        - Valid left_triggers and right_triggers: Any string, or any valid unused gpio number on a raspberry pi\n            - Note strings of more than one char will not work with key_interrupt (pynput)\n    - \"reg_link\": This corrosponds to a command from the command registry and will determine what message is sent to your user program\n\n## Foldered Commands\nFoldered commands allows you to consider all the files in a folder as a 'command' in the registry.\nThis uses the [watchdog](https://pythonhosted.org/watchdog/) python package to monitor folders and update on the fly.\nAll commands added will be deleted and reloaded upon program startup.\n```\n[\n    {\n        \"name\": \"Folder0\",\n        \"path\": \"/path/to/your/folder\",\n        \"type\": \"<registry_type>\",\n        \"id\": \"3\",\n        \"input_type\": \"button\"\n    },\n    {\n        \"name\": \"Folder1\",\n        \"path\": \"/another/path\",\n        \"type\": \"<registry_type>\",\n        \"id\": \"4\",\n        \"input_type\": \"encoder\"\n    }\n]\n```\n- This is an array of depth 1 that lists all the folders you want to add\n    - \"name\": Gives a name that you can use to access the json using 'getFolderedCommands'\n        - Valid names: Any string\n    - \"path\": Specifies the folder that will be watched\n        - Valid paths: Any valid folder on your system\n    - \"type\": This will tell Aitpi where to insert the commands from the folder into your command registry\n        - Valid types: Any string\n    - \"id\": When a command is added from the folder, this id will be the command registry 'id' value\n        - Valid ids: Any positive int, negative ints are reserved for Aitpi and could produce bad side effects\n    - \"input_type\": When a command is added from the folder, this directly corrosponds to the command registry's 'input_type'\n\n\n# Example usage:\n```python\n\n# import the base aitpi\nimport aitpi\n\n# The postal service allows us to receive messages\nfrom aitpi import router\n\n# In order to receive messages can either make an object with a consume(message) function\n# or just provide a function `def consume(message)`\nclass Watcher():\n    def consume(self, message):\n        print(\"Got command: %s\" % message.name)\n        print(\"On event: %s\" % message.event)\n        print(\"All attributes: %s\" % message.attributes)\n\nwatcher = Watcher()\n\n# Here we add a consumer that will receive commands with ids 0,1,2,3,4, these ids are the sameconsume\n# as defined in your registry json file.consume\nrouter.addConsumer([0,1,2,3,4], watcher)\n\n# We must first initialize our command registry before we can start getting input\naitpi.addRegistry(\"<path_to_json>/command_reg.json\", \"<path_to_json>/foldered_commands.json\")\n\n# We can add multiple registries, and do not need the foldered commands\naitpi.addRegistry(\"<path_to_json>/another_reg.json\")\n\n# Once we initialize our system, all interrupt based commands can be sent imediately.\n# Therefore, make sure you are ready to handle any input in your functions before calling this.\naitpi.initInput(\"<path_to_json>/example_input.json\")\n\n# For synchronous input (not interrupt based) using the 'key_input' input mechanism is desireable\n# You can setup a custom progromatic form of input using this (If it is good enough, add it to AITPI!)\nwhile (True):\n    aitpi.takeInput(input())\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/c3n3/AITPI",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aitpi",
    "package_url": "https://pypi.org/project/aitpi/",
    "platform": null,
    "project_url": "https://pypi.org/project/aitpi/",
    "project_urls": {
      "Bug Tracker": "https://github.com/c3n3/AITPI/issues",
      "Homepage": "https://github.com/c3n3/AITPI"
    },
    "release_url": "https://pypi.org/project/aitpi/0.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A tool to setup arbitrary button configurations",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14887514,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caf2a7ddd15d8019c50546bc41e60f784acb09a65fa39970b73ea587a60fd250",
          "md5": "a270c8a719432f3a5d4bd96e459eca64",
          "sha256": "3f7e93b04cf7965e1fdf3eb9a7ac0f5afe781028e4dba0772d13934b368fbc04"
        },
        "downloads": -1,
        "filename": "aitpi-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a270c8a719432f3a5d4bd96e459eca64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17861,
        "upload_time": "2022-08-25T22:47:26",
        "upload_time_iso_8601": "2022-08-25T22:47:26.592633Z",
        "url": "https://files.pythonhosted.org/packages/ca/f2/a7ddd15d8019c50546bc41e60f784acb09a65fa39970b73ea587a60fd250/aitpi-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e591397941c02bc461dcb6eafcfe02e69899d7bebd2bd447701bd68da5847a5",
          "md5": "a5fbe1c0edcdf180231f5ad7055fd6a9",
          "sha256": "5512ea53ed65adb8d2e4745ebedb08dfd80359a2e667b2c48afb6553dcf9d5d1"
        },
        "downloads": -1,
        "filename": "aitpi-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5fbe1c0edcdf180231f5ad7055fd6a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16488,
        "upload_time": "2022-08-25T22:47:28",
        "upload_time_iso_8601": "2022-08-25T22:47:28.704921Z",
        "url": "https://files.pythonhosted.org/packages/1e/59/1397941c02bc461dcb6eafcfe02e69899d7bebd2bd447701bd68da5847a5/aitpi-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e40bf1d617757d799964ec44a429155a904f56b991810c01fe135bcf7ac83f8c",
          "md5": "627beb9c378dee076e0d3ac36627c618",
          "sha256": "d7e04adb55b8d100af0da46ef5a7d39968169d1c15d1fc66d5c2a1d39cfa9ccd"
        },
        "downloads": -1,
        "filename": "aitpi-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "627beb9c378dee076e0d3ac36627c618",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17753,
        "upload_time": "2022-08-26T01:20:05",
        "upload_time_iso_8601": "2022-08-26T01:20:05.511261Z",
        "url": "https://files.pythonhosted.org/packages/e4/0b/f1d617757d799964ec44a429155a904f56b991810c01fe135bcf7ac83f8c/aitpi-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dd176da3c9c25aaaeb4e61a5fd9cc14db5381aaad746a3c4fcf2ee857088986",
          "md5": "5b75dd3cf8ea20c95280ceb024c9f33f",
          "sha256": "92ecd2f8f58e7f89149e4c1796bf06004d3df919244d8be1db824cdcf2a63d5c"
        },
        "downloads": -1,
        "filename": "aitpi-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b75dd3cf8ea20c95280ceb024c9f33f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16378,
        "upload_time": "2022-08-26T01:20:07",
        "upload_time_iso_8601": "2022-08-26T01:20:07.672988Z",
        "url": "https://files.pythonhosted.org/packages/9d/d1/76da3c9c25aaaeb4e61a5fd9cc14db5381aaad746a3c4fcf2ee857088986/aitpi-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e40bf1d617757d799964ec44a429155a904f56b991810c01fe135bcf7ac83f8c",
        "md5": "627beb9c378dee076e0d3ac36627c618",
        "sha256": "d7e04adb55b8d100af0da46ef5a7d39968169d1c15d1fc66d5c2a1d39cfa9ccd"
      },
      "downloads": -1,
      "filename": "aitpi-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "627beb9c378dee076e0d3ac36627c618",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17753,
      "upload_time": "2022-08-26T01:20:05",
      "upload_time_iso_8601": "2022-08-26T01:20:05.511261Z",
      "url": "https://files.pythonhosted.org/packages/e4/0b/f1d617757d799964ec44a429155a904f56b991810c01fe135bcf7ac83f8c/aitpi-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9dd176da3c9c25aaaeb4e61a5fd9cc14db5381aaad746a3c4fcf2ee857088986",
        "md5": "5b75dd3cf8ea20c95280ceb024c9f33f",
        "sha256": "92ecd2f8f58e7f89149e4c1796bf06004d3df919244d8be1db824cdcf2a63d5c"
      },
      "downloads": -1,
      "filename": "aitpi-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5b75dd3cf8ea20c95280ceb024c9f33f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16378,
      "upload_time": "2022-08-26T01:20:07",
      "upload_time_iso_8601": "2022-08-26T01:20:07.672988Z",
      "url": "https://files.pythonhosted.org/packages/9d/d1/76da3c9c25aaaeb4e61a5fd9cc14db5381aaad746a3c4fcf2ee857088986/aitpi-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}