{
  "info": {
    "author": "Richard Davis",
    "author_email": "crashvb@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pytest-docker-git-fixtures\n\n## Overview\n\nPytest fixtures to instantiate and populated local GIT SCMs, using [lovely-pytest-docker](https://pypi.org/project/lovely-pytest-docker), for testing.\n\n## Getting Started\n\nUpdate <tt>setup.py</tt> to include:\n\n```python\nfrom distutils.core import setup\n\nsetup(\n\ttests_require=[\"pytest-docker-git-fixtures\"]\n)\n```\n\nAll fixtures should be automatically included via the <tt>pytest11</tt> entry point.\n```python\nimport pytest\nimport subprocess\nfrom pathlib import Path\nfrom pytest_docker_git_fixtures import GITInsecure, GITSecure  # Optional, for typing\n\n@pytest.mark.create_repo(\"test_git_secure\")\n@pytest.mark.mirror_repo(\"https://github.com/crashvb/shim-bind.git\")\ndef test_git_secure(git_secure: GITSecure, tmp_path: Path):\n    uri = f\"https://{git_secure.endpoint}/secure/shim-bind.git\"\n    path = tmp_path.joinpath(\"local-clone\")\n    subprocess.run(\n        [\"git\", \"clone\", uri, str(path)],\n        check=True,\n        cwd=str(tmp_path),\n        stderr=subprocess.STDOUT,\n    )\n    assert path.joinpath(\"README.md\").exists()\n\n@pytest.mark.create_repo(\"test_git_insecure\")\ndef test_git_insecure(git_insecure: GITInsecure, tmp_path: Path):\n    uri = f\"https://{git_insecure.endpoint}/insecure/test_git_insecure.git\"\n    path = tmp_path.joinpath(\"local-clone\")\n    subprocess.run(\n        [\"git\", \"clone\", uri, str(path)],\n        check=True,\n        cwd=str(tmp_path),\n        stderr=subprocess.STDOUT,\n    )\n    assert path.exists()\n```\n\nThe `create_repo` and `mirror_repo` marks can optionally be added to stage repositories in the GIT prior to testing. See [Markers](#markers) for details.\n## Compatibility\n\n* Tested with python 3.8\n\n## Installation\n### From [pypi.org](https://pypi.org/project/pytest-docker-git-fixtures/)\n\n```\n$ pip install pytest_git_fixtures\n```\n\n### From source code\n\n```bash\n$ git clone https://github.com/crashvb/pytest-docker-git-fixtures\n$ cd pytest-docker-git-fixtures\n$ virtualenv env\n$ source env/bin/activate\n$ python -m pip install --editable .[dev]\n```\n\n## <a name=\"fixtures\"></a>Fixtures\n\n### <a name=\"git_auth_header\"></a> git_auth_header\n\nRetrieves an HTTP basic authentication header that is populated with credentials that can access the secure GIT service. The credentials are retrieved from the [git_password](#git_password) and [git_username](#git_username) fixtures.\n\n### <a name=\"git_cacerts\"></a> git_cacerts\n\nLocates a user-defined CA trust store (<tt>tests/cacerts</tt>) to use to verify connections to the secure GIT service. If one cannot be located, a temporary trust store is created containing certificates from <tt>certifi</tt> and the [git_certs](#git_certs) fixture. This fixture is used to instantiate the secure GIT service.\n\n### <a name=\"git_certs\"></a> git_certs\n\nReturns the paths of the self-signed certificate authority certificate, certificate, and private key that are used by the secure GIT service. This fixture is used to instantiate the secure GIT service.\n\n#### NamedTuple Fields\n\nThe following fields are defined in the tuple provided by this fixture:\n\n* **ca_certificate** - Path to the self-signed certificate authority certificate.\n* **ca_private_key** - Path to the self-signed certificate authority private key.\n* **certificate** - Path to the certificate.\n* **private_key** - Path to the private key.\n\nTyping is provided by `pytest_git_fixtures.GITCerts`.\n\n### <a name=\"git_hwpasswd\"></a> git_htpasswd\n\nProvides the path to a htpasswd file that is used by the secure GIT service. If a user-defined htpasswd file (<tt>tests/htpasswd</tt>) can be located, it is used. Otherwise, a temporary htpasswd file is created using credentials from the [git_password](#git_password) and [git_username](#git_username) fixtures. This fixture is used to instantiate the secure GIT service.\n\n### <a name=\"git_insecure\"></a> git_insecure\n\nConfigures and instantiates a GIT without TLS or authentication.\n\n```python\nimport pytest\nimport subprocess\nfrom pathlib import Path\nfrom pytest_docker_git_fixtures import GITInsecure  # Optional, for typing\n\n@pytest.mark.create_repo(\"test_git_insecure\")\ndef test_git_insecure(git_insecure: GITInsecure, tmp_path: Path):\n    uri = f\"https://{git_insecure.endpoint}/insecure/test_git_insecure.git\"\n    path = tmp_path.joinpath(\"local-clone\")\n    subprocess.run(\n        [\"git\", \"clone\", uri, str(path)],\n        check=True,\n        cwd=str(tmp_path),\n        stderr=subprocess.STDOUT,\n    )\n    assert path.exists()\n```\n\n#### NamedTuple Fields\n\nThe following fields are defined in the tuple provided by this fixture:\n\n* **created_repos** - The list of created repositories.\n* **docker_compose** - Path to the fully instantiated docker-compose configuration.\n* **endpoint** - Endpoint of the insecure GIT service.\n* **endpoint_name** - Endpoint of the insecure GIT service, by service name.\n* **mirrored_repos** - The list of mirrored repositories.\n* **service_name** - Name of the service within the docker-compose configuration.\n\nTyping is provided by `pytest_git_fixtures.GITInsecure`.\n\n### <a name=\"git_password\"></a> git_password\n\nProvides a generated password to use for authentication to the secure GIT service.\n\n### <a name=\"git_secure\"></a> git_secure\n\nConfigures and instantiates a TLS enabled GIT with HTTP basic authorization.\n\n```python\nimport pytest\nimport subprocess\nfrom pathlib import Path\nfrom pytest_docker_git_fixtures import GITSecure  # Optional, for typing\n\n@pytest.mark.mirror_repo(\"https://github.com/crashvb/shim-bind.git\")\ndef test_git_secure(git_secure: GITSecure, tmp_path: Path):\n    uri = f\"https://{git_secure.endpoint}/secure/shim-bind.git\"\n    path = tmp_path.joinpath(\"local-clone\")\n    subprocess.run(\n        [\"git\", \"clone\", uri, str(path)],\n        check=True,\n        cwd=str(tmp_path),\n        stderr=subprocess.STDOUT,\n    )\n    assert path.joinpath(\"README.md\").exists()\n```\n\n#### NamedTuple Fields\n\nThe following fields are defined in the tuple provided by this fixture:\n\n* **auth_header** - from [git_auth_header](#git_auth_header).\n* **cacerts** - from [git_cacerts](#git_cacerts).\n* **certs** - from [git_certs](#git_certs).\n* **created_repos** - The list of created repositories.\n* **docker_compose** - Path to the fully instantiated docker-compose configuration.\n* **endpoint** - Endpoint of the secure GIT service.\n* **endpoint_name** - Endpoint of the secure GIT service, by service name.\n* **htpasswd** - from [git_htpasswd](#git_htpasswd)\n* **mirrored_repos** - The list of mirrored repositories.\n* **password** - from [git_password](#git_password).\n* **service_name** - Name of the service within the docker-compose configuration.\n* **ssl_context** - from [git_ssl_context](#git_ssl_context).\n* **username** - from [git_username](#git_username).\n\nTyping is provided by `pytest_git_fixtures.GITSecure`.\n\n### <a name=\"git_ssl_context\"></a> git_ssl_context\n\nProvides an SSL context containing the CA trust store from the  [git_cacerts](#git_cacerts) fixture.\n\n### <a name=\"git_username\"></a> git_username\n\nProvides a generated username to use for authentication to the secure GIT service.\n\n### <a name=\"pdgf_docker_compose_insecure\"></a> pdgf_docker_compose_insecure\n\nThis fixture uses the `docker_compose_files` fixture to locate a user-defined docker-compose configuration file (typically <tt>tests/docker-compose.yml</tt>) that contains the <tt>pytest-docker-git-insecure</tt> service. If one cannot be located, an embedded configuration is copied to a temporary location and returned. This fixture is used to instantiate the insecure GIT service.\n\n### <a name=\"pdgf_docker_compose_secure\"></a> docker_compose_secure\n\nThis fixture uses the `docker_compose_files` fixture to locate a user-defined docker-compose configuration file (typically <tt>tests/docker-compose.yml</tt>) that contains the <tt>pytest-docker-git-secure</tt> service. If one cannot be located, an embedded configuration is copied to a temporary location and returned. This fixture is used to instantiate the secure GIT service; however, unlike the configuration returned by the [pdgf_docker_compose_insecure](#pdgf_docker_compose_insecure) fixture, this configuration will be treated as a template; the <tt>$PATH_CERTIFICATE</tt>, <tt>$PATH_HTPASSWD</tt>, and <tt>$PATH_KEY</tt> tokens will be populated with the absolute paths provided by the [git_certs](#git_certs) and [git_htpasswd](#git_htpasswd) fixtures, as appropriate.\n## <a name=\"markers\"></a>Markers\n\n### pytest.mark.create_repo\n\nThis marker specifies the GIT repository(ies) that should be initialized within the GIT service(s) prior to testing. It can ...\n\n... decorate individual tests:\n\n```python\nimport pytest\nfrom pytest_docker_git_fixtures import GITSecure  # Optional, for typing\n\n@pytest.mark.create_repo(\"test_git_secure\")\ndef test_git_secure(git_secure: GITSecure):\n\t...\n```\n\n... be specified in the `pytestmark` list at the module level:\n\n```python\n#!/usr/bin/env python\n\nimport pytest\n\npytestmark = [pytest.mark.create_repo(\"test_generic_repo\")]\n\n...\n```\n\n... or be provided via the corresponding `--create-repo` command-line argument:\n\n```bash\npython -m pytest --create-repo repo0 --create-repo repo1 --create-repo repo2,repo3 ...\n```\n\nThis marker supports being specified multiple times, and removes duplicate repository names (see [Limitations](#limitations) below).\n\nA helper function, `get_created_repos`, is included for test scenarios that  wish to inspect the maker directly:\n\n```python\nimport pytest\nfrom pytest_docker_git_fixtures import GITSecure, get_created_repos\n\n@pytest.mark.create_repo(\"test_git_secure\")\ndef test_git_secure(git_secure: GITSecure, request):\n    name = get_created_repos(request)[0]\n```\n\n### pytest.mark.mirror_repo\n\nSimilarly to create_repo, this marker specifies the GIT repository(ies) that should be replicated to the GIT service(s) prior to testing.\n\nLikewise, there is a `get_mirrored_repos` helper function.\n\n## <a name=\"enumerated_fixtures\"></a>Enumerated Fixtures\n\nIt is possible to instantiate multiple GIT instances using the corresponding enumerated fixtures. All [fixtures](#fixtures) listed above have _*_list_ (e.g. `git_secure` -> `git_secure_list`) versions that will return enumerated lists of corresponding data type.\n\nFor example:\n\n```python\nimport requests\nfrom typing import List  # Optional, for typing\nfrom pytest_docker_git_fixtures import GITSecure  # Optional, for typing\n\ndef test_git_secure_list(git_secure_list: List[GITSecure]):\n    for git_secure in git_secure_list:\n        # Default listener ...\n        response = requests.get(\n            f\"https://{git_secure.endpoint}/\",\n            headers=git_secure.auth_header,\n            verify=str(git_secure.cacerts),\n        )\n        assert response.status_code == 200\n        assert response.content == b\"pytest-docker-git-fixtures-docker\\n\"\n```\n\nIt is possible to use both singular and enumerated fixtures within the same test context; however, the same values will be returned for the singular fixture as the first enumerated list value (i.e. git_secure == git_secure_list[0]). To avoid complications with lower layers, mainly docker-compose, and to allow for this interchangeability, caching is used internally.\n\nBy default, the scale factor of the enumerated instances is set to one (n=1). This value can be changed by overriding the `pdgf_scale_factor` fixture, as follows:\n\n```python\nimport pytest\n\n@pytest.fixture(scope=\"session\")\ndef pdgf_scale_factor() -> int:\n    return 4\n```\n\nThis fixture will be used to scale both the insecure and secure GIT SCMs.\n\n## <a name=\"limitations\"></a>Limitations\n\n1. All the fixtures provided by this package are <tt>session</tt> scoped; and will only be executed once per test execution.\n2. The `create_repo`, and `mirror_repo` markers are processed as part of the `git_insecure` and `git_secure` fixtures. As such:\n  * _all_ markers will be aggregated during initialization of the session, and processed prior test execution.\n  * Initialized and mirror repositories will be applied to both the insecure and secure GIT SCMs, if both are instantiated.\n3. At most 10 insecure and 10 secure GIT SCMs are supported using the embedded docker compose.\n4. It is not currently possible to specify into which enumerated SCM instances repositories should be applied. As such, and for backwards compatibility, they will only be applied into the first instance of each of the insecure and secure GIT SCMs.\n\n## Development\n\n[Source Control](https://github.com/crashvb/pytest-docker-git-fixtures)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/crashvb/pytest-docker-git-fixtures",
    "keywords": "docker fixtures git pytest scm",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-docker-git-fixtures",
    "package_url": "https://pypi.org/project/pytest-docker-git-fixtures/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-docker-git-fixtures/",
    "project_urls": {
      "Homepage": "https://github.com/crashvb/pytest-docker-git-fixtures"
    },
    "release_url": "https://pypi.org/project/pytest-docker-git-fixtures/0.1.2/",
    "requires_dist": [
      "bcrypt",
      "certifi",
      "docker-compose",
      "lovely-pytest-docker",
      "pyopenssl",
      "pytest",
      "black ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "www-authenticate ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Pytest fixtures for testing with git scm.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12834770,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ee28889cd672afedcf1cc407d084e279cdfe8330269cdb9f911feb2b4d0580f",
          "md5": "f0976a73f8252584a0e1a4bd60623450",
          "sha256": "c7ed9fa56f2bb5a3bbdd4ba50ed72b8e97604a6533138e547c991cbdaaa91491"
        },
        "downloads": -1,
        "filename": "pytest_docker_git_fixtures-0.1.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "f0976a73f8252584a0e1a4bd60623450",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23971,
        "upload_time": "2021-03-11T21:19:50",
        "upload_time_iso_8601": "2021-03-11T21:19:50.304301Z",
        "url": "https://files.pythonhosted.org/packages/8e/e2/8889cd672afedcf1cc407d084e279cdfe8330269cdb9f911feb2b4d0580f/pytest_docker_git_fixtures-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abddcb14a43614218c019195cc10578553be7e50060f8afd8b381dcd489c5438",
          "md5": "f8cd264441c5bce9034e1dc3522aa6ec",
          "sha256": "5b440c8b202bad090bfe8edfced26f19cd96fcd0ddff680ae97db2abb022ae3c"
        },
        "downloads": -1,
        "filename": "pytest_docker_git_fixtures-0.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "f8cd264441c5bce9034e1dc3522aa6ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20250,
        "upload_time": "2021-03-11T21:19:51",
        "upload_time_iso_8601": "2021-03-11T21:19:51.641573Z",
        "url": "https://files.pythonhosted.org/packages/ab/dd/cb14a43614218c019195cc10578553be7e50060f8afd8b381dcd489c5438/pytest_docker_git_fixtures-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92b90721c7e9f4984f61777bdec6a2bc6ae3be68e373b98ffd6079b0236761a1",
          "md5": "45a5b748b67a9dbb74106cdc77e61ffb",
          "sha256": "689750bf80957a51ec6eea0bdb646b8b93b61a651b80524508839c18562bc2cb"
        },
        "downloads": -1,
        "filename": "pytest_docker_git_fixtures-0.1.1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "45a5b748b67a9dbb74106cdc77e61ffb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24019,
        "upload_time": "2022-02-09T02:43:34",
        "upload_time_iso_8601": "2022-02-09T02:43:34.166996Z",
        "url": "https://files.pythonhosted.org/packages/92/b9/0721c7e9f4984f61777bdec6a2bc6ae3be68e373b98ffd6079b0236761a1/pytest_docker_git_fixtures-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f2a623869011ed9e76ff0c4a6a94e366eb85386b4d856eb8b002383bb21f326",
          "md5": "bd803d7d04881728d02952b7027144a7",
          "sha256": "20e8dfb5a62278e276eaf8ab843d483d2b4f77528b2966c111be11fc11a38f35"
        },
        "downloads": -1,
        "filename": "pytest_docker_git_fixtures-0.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "bd803d7d04881728d02952b7027144a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20292,
        "upload_time": "2022-02-09T02:43:35",
        "upload_time_iso_8601": "2022-02-09T02:43:35.853947Z",
        "url": "https://files.pythonhosted.org/packages/0f/2a/623869011ed9e76ff0c4a6a94e366eb85386b4d856eb8b002383bb21f326/pytest_docker_git_fixtures-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca1b44ef74f69a20b27284641c469a5f5028b819c5b4076b50adfaf0811c8476",
          "md5": "c737e57086f99907f0cdf9586ed8a0fd",
          "sha256": "a03e4eb481f646e9c2880442f81455b28dd88e253679266c1be12b210303ae3f"
        },
        "downloads": -1,
        "filename": "pytest_docker_git_fixtures-0.1.2-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "c737e57086f99907f0cdf9586ed8a0fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24257,
        "upload_time": "2022-02-09T03:38:32",
        "upload_time_iso_8601": "2022-02-09T03:38:32.407529Z",
        "url": "https://files.pythonhosted.org/packages/ca/1b/44ef74f69a20b27284641c469a5f5028b819c5b4076b50adfaf0811c8476/pytest_docker_git_fixtures-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d00e47eec843df5aedce690fac2b43da61b6a3f15cefc665d9e11bc67c5593ab",
          "md5": "d7cdb4845fa7e791445dbab3cbf04fe7",
          "sha256": "37f813f090fcc123b074a92623c84fa32625dff708930f18cb294dff2ab12cbc"
        },
        "downloads": -1,
        "filename": "pytest_docker_git_fixtures-0.1.2.tar.gz",
        "has_sig": true,
        "md5_digest": "d7cdb4845fa7e791445dbab3cbf04fe7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20520,
        "upload_time": "2022-02-09T03:38:34",
        "upload_time_iso_8601": "2022-02-09T03:38:34.130300Z",
        "url": "https://files.pythonhosted.org/packages/d0/0e/47eec843df5aedce690fac2b43da61b6a3f15cefc665d9e11bc67c5593ab/pytest_docker_git_fixtures-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca1b44ef74f69a20b27284641c469a5f5028b819c5b4076b50adfaf0811c8476",
        "md5": "c737e57086f99907f0cdf9586ed8a0fd",
        "sha256": "a03e4eb481f646e9c2880442f81455b28dd88e253679266c1be12b210303ae3f"
      },
      "downloads": -1,
      "filename": "pytest_docker_git_fixtures-0.1.2-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "c737e57086f99907f0cdf9586ed8a0fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24257,
      "upload_time": "2022-02-09T03:38:32",
      "upload_time_iso_8601": "2022-02-09T03:38:32.407529Z",
      "url": "https://files.pythonhosted.org/packages/ca/1b/44ef74f69a20b27284641c469a5f5028b819c5b4076b50adfaf0811c8476/pytest_docker_git_fixtures-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d00e47eec843df5aedce690fac2b43da61b6a3f15cefc665d9e11bc67c5593ab",
        "md5": "d7cdb4845fa7e791445dbab3cbf04fe7",
        "sha256": "37f813f090fcc123b074a92623c84fa32625dff708930f18cb294dff2ab12cbc"
      },
      "downloads": -1,
      "filename": "pytest_docker_git_fixtures-0.1.2.tar.gz",
      "has_sig": true,
      "md5_digest": "d7cdb4845fa7e791445dbab3cbf04fe7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20520,
      "upload_time": "2022-02-09T03:38:34",
      "upload_time_iso_8601": "2022-02-09T03:38:34.130300Z",
      "url": "https://files.pythonhosted.org/packages/d0/0e/47eec843df5aedce690fac2b43da61b6a3f15cefc665d9e11bc67c5593ab/pytest_docker_git_fixtures-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}