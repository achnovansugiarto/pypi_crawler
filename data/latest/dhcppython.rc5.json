{
  "info": {
    "author": "Victor Frazao",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "\n# DHCP Python\n\nVersion 0.1.4\n\nA Python implementation of a DHCP client and the tools to manipulate DHCP packets. Includes:\n\n1. A parser of DHCP packets, returning Python objects\n2. Supports for all DHCP options in RFC 2132\n3. A rudimentary DHCP client\n\n## Installation\n\n`pip install dhcppython`\n\n## Requirements\n\n* Python 3.8.0 or higher\n\n**NOTE: This has been tested on Ubuntu 18.04 and Windows WSL. May or may not work on other platforms.**\n\n## The Packet Parser\n\nTwo files contribute to the packet parsing: `dhcppython.packet` and `dhcppython.options`. For most operations only `dhcppython.packet` will be required.\n\n### dhcppython.packet\n\nThe main class in `dhcppython.packet` is the `DHCPPacket`. The `DHCPPacket` class contains multiple constructors for parsing and constructing DHCP packets. \n\n#### Converting a packet in wireformat to a Python object\n\nGiven a DHCP packet in `bytes` format (such as what you would get from reading a DHCP packet straight from a socket) a DHCPPacket object can be instantiated by calling the `from_bytes` and supplying the bytes.\n\n```python\n>>> pkt = dhcppython.packet.DHCPPacket.from_bytes(b'\\x01\\x01\\x06\\x00\\xea\\xbe\\xc3\\x97\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8cE\\x00E\\x12\\t\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00c\\x82Sc5\\x01\\x01=\\x07\\x01\\x8cE\\x00E\\x12\\t9\\x02\\x05\\xdc<\\x0eandroid-dhcp-9\\x0c\\tGalaxy-S97\\n\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+\\xff')\n>>> pkt\nDHCPPacket(op='BOOTREQUEST', htype='ETHERNET', hlen=6, hops=0, xid=3938370455, secs=1, flags=0, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('0.0.0.0'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='8C:45:00:45:12:09', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x01'), ClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00E\\x12\\t'), MaxDHCPMessageSize(code=57, length=2, data=b'\\x05\\xdc'), VendorClassIdentifier(code=60, length=14, data=b'android-dhcp-9'), Hostname(code=12, length=9, data=b'Galaxy-S9'), ParameterRequestList(code=55, length=10, data=b'\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+'), End(code=255, length=0, data=b'')]))\n```\n\n#### Converting a DHCPPacket object to wireformat\n\nGiven a DHCPPacket object you can easily output the corresponding DHCP packet in wireformat by accessing the `asbytes` attribute of the object.\n\n```python\n>>> pkt.asbytes\nb'\\x01\\x01\\x06\\x00\\xea\\xbe\\xc3\\x97\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8cE\\x00E\\x12\\t\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00c\\x82Sc5\\x01\\x01=\\x07\\x01\\x8cE\\x00E\\x12\\t9\\x02\\x05\\xdc<\\x0eandroid-dhcp-9\\x0c\\tGalaxy-S97\\n\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+\\xff'\n```\n\nThis bytes output is suitable for sending over a socket to a DHCP server.\n\n#### Other Constructors of the DHCPPacket Class\n\n* The default, low level, constructor (not recommended):\n\n```python\n>>> pkt = dhcppython.packet.DHCPPacket(op=\"BOOTREQUEST\", htype=\"ETHERNET\", hlen=6, hops=0, xid=123456, secs=0, flags=0, ciaddr=ipaddress.IPv4Address(0), yiaddr=ipaddress.IPv4Address(0), siaddr=ipaddress.IPv4Address(0), giaddr=ipaddress.IPv4Address(0), chaddr=\"DE:AD:BE:EF:C0:DE\", sname=b'', file=b'', options=dhcppython.options.OptionList([dhcppython.options.options.short_value_to_object(53, \"DHCPDISCOVER\")]))\n>>> pkt\nDHCPPacket(op='BOOTREQUEST', htype='ETHERNET', hlen=6, hops=0, xid=123456, secs=0, flags=0, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('0.0.0.0'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='DE:AD:BE:EF:C0:DE', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x01')]))\n```\n\n* Higher level constructors specific to the four main DHCP message types: DISCOVER, OFFER, REQUEST, ACK:\n\n```python\n>>> dhcppython.packet.DHCPPacket.Discover('de:ad:be:ef:c0:de')\nDHCPPacket(op='BOOTREQUEST', htype='ETHERNET', hlen=6, hops=0, xid=4249353806, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('0.0.0.0'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='de:ad:be:ef:c0:de', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x01')]))\n>>> dhcppython.packet.DHCPPacket.Offer('de:ad:be:ef:c0:de', seconds=0, tx_id=4249353806, yiaddr=ipaddress.IPv4Address('192.168.56.4'))\nDHCPPacket(op='BOOTREPLY', htype='ETHERNET', hlen=6, hops=0, xid=4249353806, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('192.168.56.4'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='de:ad:be:ef:c0:de', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x02')]))\n>>> dhcppython.packet.DHCPPacket.Request('de:ad:be:ef:c0:de', seconds=0, tx_id=4249353806)\nDHCPPacket(op='BOOTREQUEST', htype='ETHERNET', hlen=6, hops=0, xid=4249353806, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('0.0.0.0'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='de:ad:be:ef:c0:de', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x03')]))\n>>> dhcppython.packet.DHCPPacket.Ack('de:ad:be:ef:c0:de', seconds=0, tx_id=4249353806, yiaddr=ipaddress.IPv4Address('192.168.56.4'))\nDHCPPacket(op='BOOTREPLY', htype='ETHERNET', hlen=6, hops=0, xid=4249353806, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('192.168.56.4'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='de:ad:be:ef:c0:de', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x05')]))\n```\n\n### dhcppython.options\n\nThis module provides classes for:\n\n1. All DHCP options described in RFC 2132\n2. An unknown option class for options not encoded\n3. An abstract Option class that is easily extendable if additional options are required\n4. A data structure for mananging DHCP options - the `OptionList`\n5. An higher lever Option factory - the `OptionDirectory`\n\nA high level API is provided by the `dhcppython.options.options` object and the Option class:\n\n* Create an options object from bytes by calling the `bytes_to_object` method\n\n```python\n>>> opt = dhcppython.options.options.bytes_to_object(b\"\\x3d\\x07\\x01\\x8c\\x45\\x00\\x45\\x12\\x09\")\n>>> opt\nClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00E\\x12\\t')\n```\n\n* Get a human readable dict of an options object value\n\n```python\n>>> opt.value\n{'client_identifier': {'hwtype': 1, 'hwaddr': '8C:45:00:45:12:09'}}\n```\n\n* Create an options object from its human readable dict of its value:\n\n```python\n>>> dhcppython.options.options.value_to_object({'client_identifier': {'hwtype': 1, 'hwaddr': '8C:45:00:45:12:09'}})\nClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00E\\x12\\t')\n```\n\nOR\n\n```python\n>>> dhcppython.options.options.short_value_to_object(61, {'hwtype': 1, 'hwaddr': '8C:45:00:45:12:09'})\nClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00E\\x12\\t')\n```\n\n4. Convert a human readable dict of an option value to the bytes representation\n\n```python\n>>> dhcppython.options.options.value_to_bytes({'client_identifier': {'hwtype': 1, 'hwaddr': '8C:45:00:45:12:09'}})\nb'=\\x07\\x01\\x8cE\\x00E\\x12\\t'\n```\n\n5. Get the bytes representation of an option given its Option object\n\n```python\n>>> opt = dhcppython.options.ClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00E\\x12\\t')\n>>> opt.asbytes\nb'=\\x07\\x01\\x8cE\\x00E\\x12\\t'\n```\n\nThe `OptionList` class provides a very convenient set of methods for managing a list of DHCP options.\n\n* Create an `OptionList` instance from a list of `Option` objects\n\n```python\n>>> opt_list = dhcppython.options.OptionList(\n...             [\n...                 dhcppython.options.options.short_value_to_object(61, {'hwtype': 1, 'hwaddr': \"8c:45:00:23:45:67\"}),\n...                 dhcppython.options.options.short_value_to_object(57, 1500),\n...                 dhcppython.options.options.short_value_to_object(60, \"android-dhcp-9\"),\n...                 dhcppython.options.options.short_value_to_object(12, \"Galaxy-S9\"),\n...                 dhcppython.options.options.short_value_to_object(55, [1, 3, 6, 15, 26, 28, 51, 58, 59, 43])\n...             ]\n...         )\n>>> opt_list\nOptionList([ClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00#Eg'), MaxDHCPMessageSize(code=57, length=2, data=b'\\x05\\xdc'), VendorClassIdentifier(code=60, length=14, data=b'android-dhcp-9'), Hostname(code=12, length=9, data=b'Galaxy-S9'), ParameterRequestList(code=55, length=10, data=b'\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+')])\n```\n\n* Retrieve any options in the `OptionList` by its option code\n\n```python\n>>> opt_list.by_code(12)\nHostname(code=12, length=9, data=b'Galaxy-S9')\n>>> opt_list.by_code(13)\n>>>\n```\n\n* Append (add) any options using the `append` method\n\n```python\n>>> opt_list.append(dhcppython.options.options.short_value_to_object(53, \"DHCPDISCOVER\"))\n>>> opt_list\nOptionList([ClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00#Eg'), MaxDHCPMessageSize(code=57, length=2, data=b'\\x05\\xdc'), VendorClassIdentifier(code=60, length=14, data=b'android-dhcp-9'), Hostname(code=12, length=9, data=b'Galaxy-S9'), ParameterRequestList(code=55, length=10, data=b'\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+'), MessageType(code=53, length=1, data=b'\\x01')])\n```\n\n* Protects against duplicate options (duplicate overwrites in place)\n\n```python\n>>> opt_list\nOptionList([ClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00#Eg'), MaxDHCPMessageSize(code=57, length=2, data=b'\\x13\\x88'), VendorClassIdentifier(code=60, length=14, data=b'android-dhcp-9'), Hostname(code=12, length=9, data=b'Galaxy-S9'), ParameterRequestList(code=55, length=10, data=b'\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+'), MessageType(code=53, length=1, data=b'\\x01')])\n```\n\n* Allows for iteration like a list\n\n```python\n>>> for opt in opt_list:\n...     print(opt)\n...\nClientIdentifier(code=61, length=7, data=b'\\x01\\x8cE\\x00#Eg')\nMaxDHCPMessageSize(code=57, length=2, data=b'\\x13\\x88')\nVendorClassIdentifier(code=60, length=14, data=b'android-dhcp-9')\nHostname(code=12, length=9, data=b'Galaxy-S9')\nParameterRequestList(code=55, length=10, data=b'\\x01\\x03\\x06\\x0f\\x1a\\x1c3:;+')\nMessageType(code=53, length=1, data=b'\\x01')\n```\n\n## The DHCP Client\n\nA very primitive DHCP client is included in this package in the `dhcppython.client` module. The client is able to negotiate a lease with a DHCP server and can be configured to use:\n\n* A given interface\n* Option to send broadcast packets or unicast packets to a specific server\n* Set a relay in the giaddr field\n* \"Spoof\" MAC addresses\n* Specify options to send with request\n\nThe high level interface to negotiate a lease is the `get_lease` method of the `dhcppython.client.DHCPClient` object. This method goes through the DORA DHCP handshake and returns a `Lease` namedtuple which includes all the packets in the :\n\n```python\n>>> import dhcppython\n>>> client = dhcppython.client.DHCPClient(interface=\"enp0s8\")\n>>> lease = client.get_lease(mac_addr=\"de:ad:be:ef:c0:de\", broadcast=True, relay=None, server=\"255.255.255.255\", options_list=None)\nLease succesful: 192.168.56.3 -- DE:AD:BE:EF:C0:DE -- 3 ms elapsed\n>>> lease\nLease(discover=DHCPPacket(op='BOOTREQUEST', htype='ETHERNET', hlen=6, hops=0, xid=2829179566, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('0.0.0.0'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='de:ad:be:ef:c0:de', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x01')])), offer=DHCPPacket(op='BOOTREPLY', htype='ETHERNET', hlen=6, hops=0, xid=2829179566, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('192.168.56.3'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='DE:AD:BE:EF:C0:DE', sname=b'', file=b'', options=OptionList([SubnetMask(code=1, length=4, data=b'\\xff\\xff\\xff\\x00'), Router(code=3, length=4, data=b'\\n\\x97\\x01\\x01'), DNSServer(code=6, length=4, data=b'\\nh\\x01\\x08'), Hostname(code=12, length=22, data=b'dhcp.-192-168-56-3.com'), DomainName(code=15, length=14, data=b'example.com'), IPAddressLeaseTime(code=51, length=4, data=b'\\x00\\x01Q\\x80'), MessageType(code=53, length=1, data=b'\\x02'), ServerIdentifier(code=54, length=4, data=b'\\xc0\\xa88\\x02'), RenewalTime(code=58, length=4, data=b'\\x00\\x00T`'), RebindingTime(code=59, length=4, data=b'\\x00\\x00\\xa8\\xc0'), End(code=255, length=0, data=b'')])), request=DHCPPacket(op='BOOTREQUEST', htype='ETHERNET', hlen=6, hops=0, xid=2829179566, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('0.0.0.0'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='de:ad:be:ef:c0:de', sname=b'', file=b'', options=OptionList([MessageType(code=53, length=1, data=b'\\x03')])), ack=DHCPPacket(op='BOOTREPLY', htype='ETHERNET', hlen=6, hops=0, xid=2829179566, secs=0, flags=32768, ciaddr=IPv4Address('0.0.0.0'), yiaddr=IPv4Address('192.168.56.3'), siaddr=IPv4Address('0.0.0.0'), giaddr=IPv4Address('0.0.0.0'), chaddr='DE:AD:BE:EF:C0:DE', sname=b'', file=b'', options=OptionList([SubnetMask(code=1, length=4, data=b'\\xff\\xff\\xff\\x00'), Router(code=3, length=4, data=b'\\n\\x97\\x01\\x01'), DNSServer(code=6, length=4, data=b'\\nh\\x01\\x08'), Hostname(code=12, length=22, data=b'dhcp.-192-168-56-3.com'), DomainName(code=15, length=14, data=b'example.com'), IPAddressLeaseTime(code=51, length=4, data=b'\\x00\\x01Q\\x80'), MessageType(code=53, length=1, data=b'\\x05'), ServerIdentifier(code=54, length=4, data=b'\\xc0\\xa88\\x02'), RenewalTime(code=58, length=4, data=b'\\x00\\x00T`'), RebindingTime(code=59, length=4, data=b'\\x00\\x00\\xa8\\xc0'), End(code=255, length=0, data=b'')])), time=0.0032514659978915006, server=('192.168.56.2', 67))\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vfrazao-ns1/dhcppython",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dhcppython",
    "package_url": "https://pypi.org/project/dhcppython/",
    "platform": "",
    "project_url": "https://pypi.org/project/dhcppython/",
    "project_urls": {
      "Homepage": "https://github.com/vfrazao-ns1/dhcppython"
    },
    "release_url": "https://pypi.org/project/dhcppython/0.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.8.0",
    "summary": "('Package for working with DHCP packets - including a DHCP client',)",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9928755,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73de10ba7a3cbd358f9f4cc6299af5d12ceec1c1abef14c8607960716eccca71",
          "md5": "38b08c4ed17d62ac59172c6954db46e8",
          "sha256": "d7ff72740394e5803068b2d3b26c6e67e7ac013ce9b43aa8998cba74df557c48"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38b08c4ed17d62ac59172c6954db46e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 28337,
        "upload_time": "2020-01-26T04:40:37",
        "upload_time_iso_8601": "2020-01-26T04:40:37.749505Z",
        "url": "https://files.pythonhosted.org/packages/73/de/10ba7a3cbd358f9f4cc6299af5d12ceec1c1abef14c8607960716eccca71/dhcppython-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8219e5ac47dff46a5e7ef5f5d709e6cc3f2407f1ac37b1bb68c516fbac5f6b8",
          "md5": "d462a87c3aa7c0c2c32f3a1698602332",
          "sha256": "2ad3bd636937aa216dfc9cf4b30ac47d992c25a0d4129b21a2e688054089b927"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d462a87c3aa7c0c2c32f3a1698602332",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 25981,
        "upload_time": "2020-01-26T04:40:41",
        "upload_time_iso_8601": "2020-01-26T04:40:41.627287Z",
        "url": "https://files.pythonhosted.org/packages/f8/21/9e5ac47dff46a5e7ef5f5d709e6cc3f2407f1ac37b1bb68c516fbac5f6b8/dhcppython-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dd71e165053f7d3a1724c801a63b1a3041d77b0b4e04667099879e77a73a6e1",
          "md5": "f81f2df841314bc9757f3d1a68a390c1",
          "sha256": "9483a8b7155cdd50a5588e1879b034c5127f3e517607f3e9dfaf1fbfd8c1c7f7"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f81f2df841314bc9757f3d1a68a390c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 29003,
        "upload_time": "2020-01-27T21:19:09",
        "upload_time_iso_8601": "2020-01-27T21:19:09.566897Z",
        "url": "https://files.pythonhosted.org/packages/5d/d7/1e165053f7d3a1724c801a63b1a3041d77b0b4e04667099879e77a73a6e1/dhcppython-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a80702d5750a799d7705df3e939426e25117f9e50bd931e464a3473d83950a0d",
          "md5": "7a655642964f1b80a112b1e6432cf0f2",
          "sha256": "18a067116793906572f7617029fbe0d52b6c2f0f831ea0496a472c037473c8c0"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a655642964f1b80a112b1e6432cf0f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 26052,
        "upload_time": "2020-01-27T21:19:12",
        "upload_time_iso_8601": "2020-01-27T21:19:12.499995Z",
        "url": "https://files.pythonhosted.org/packages/a8/07/02d5750a799d7705df3e939426e25117f9e50bd931e464a3473d83950a0d/dhcppython-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86d2ed60769397c62b061baf0ea0f8a9e8463e8f42c0a467cc8c22a860b3f3ea",
          "md5": "1776848fb87836acdd254c4084be2d14",
          "sha256": "94f031e94095189aca100eda80861b91efb438650e6a355a9a05d16339af992c"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1776848fb87836acdd254c4084be2d14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 1253930,
        "upload_time": "2020-01-29T21:51:15",
        "upload_time_iso_8601": "2020-01-29T21:51:15.639238Z",
        "url": "https://files.pythonhosted.org/packages/86/d2/ed60769397c62b061baf0ea0f8a9e8463e8f42c0a467cc8c22a860b3f3ea/dhcppython-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d61123b2b205a1150888037c50cf88201293be22552110a1eb8b074e8c1cd0",
          "md5": "8f27607ca64251751e74d078553721ef",
          "sha256": "9685922157294e2d858ad51aca8788d35f1245c60828f4334bb8c63907c720c3"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8f27607ca64251751e74d078553721ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 1226035,
        "upload_time": "2020-01-29T21:51:20",
        "upload_time_iso_8601": "2020-01-29T21:51:20.750967Z",
        "url": "https://files.pythonhosted.org/packages/32/d6/1123b2b205a1150888037c50cf88201293be22552110a1eb8b074e8c1cd0/dhcppython-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93c4a369af6deabdd263881cf79d1b193e025ff94cbe8df3402e3f0ce7af12f3",
          "md5": "8f627985789a46629495582110b82fc8",
          "sha256": "a2f3ea5fa3dcb3db2b50492aef4f8c72182d6ba6b21443ccf13dc676610ae70f"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f627985789a46629495582110b82fc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 1252418,
        "upload_time": "2020-08-19T20:56:58",
        "upload_time_iso_8601": "2020-08-19T20:56:58.488216Z",
        "url": "https://files.pythonhosted.org/packages/93/c4/a369af6deabdd263881cf79d1b193e025ff94cbe8df3402e3f0ce7af12f3/dhcppython-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7740a1b5346b7731b5475f34a374e2d9d17da6c29c4a6e71eda925b26399469e",
          "md5": "11a9c130ee8f2da9d21d45e5d5df4969",
          "sha256": "044605c7539741adf7221bcdbd9e08a735b8cec080a31fa6292e2e996d3033ec"
        },
        "downloads": -1,
        "filename": "dhcppython-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11a9c130ee8f2da9d21d45e5d5df4969",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 1241274,
        "upload_time": "2021-03-30T19:22:35",
        "upload_time_iso_8601": "2021-03-30T19:22:35.487568Z",
        "url": "https://files.pythonhosted.org/packages/77/40/a1b5346b7731b5475f34a374e2d9d17da6c29c4a6e71eda925b26399469e/dhcppython-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7740a1b5346b7731b5475f34a374e2d9d17da6c29c4a6e71eda925b26399469e",
        "md5": "11a9c130ee8f2da9d21d45e5d5df4969",
        "sha256": "044605c7539741adf7221bcdbd9e08a735b8cec080a31fa6292e2e996d3033ec"
      },
      "downloads": -1,
      "filename": "dhcppython-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11a9c130ee8f2da9d21d45e5d5df4969",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 1241274,
      "upload_time": "2021-03-30T19:22:35",
      "upload_time_iso_8601": "2021-03-30T19:22:35.487568Z",
      "url": "https://files.pythonhosted.org/packages/77/40/a1b5346b7731b5475f34a374e2d9d17da6c29c4a6e71eda925b26399469e/dhcppython-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}