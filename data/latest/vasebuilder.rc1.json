{
  "info": {
    "author": "T. Medina",
    "author_email": "tylerdanmedina@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# VaSeBuilder\n**Va**lidation **Se**t **Builder**\n&nbsp;\n\n&nbsp;\n\n\n## Quick Start\n### Inputs and Outputs\nThe workflow for VaSeBuilder generally involves as inputs:  \n\n* Donor materials:\n  * a collection of indexed BAM/CRAM files (\"donors\") from which to pull reads\n  * their variant calls (VCF/BCF files)\n  * a list of variants to include (technically optional, but highly recommended for practical use)\n* Acceptor materials:\n  * a BAM file to use as an \"acceptor\"\n  * the FastQ files used to produce the acceptor BAM file\n\nAt the end of a full run, VaSeBuilder will produce:\n\n* a set of hybrid FastQ files containing reads from both the acceptor and donors\n* a file recording information about where variant reads were added\n\n### Workflows\nVaSeBuilder has two overall workflows:    \n\n1) Full workflow from inputs to outputs (`BuildValidationSet`).  \n    * Acceptor and donors go in\n    * Hybrid FastQs come out  \n2) Scalable workflow in two parts.  \n    * Make spike-in building blocks (`BuildSpikeIns`)\n      * Acceptor and donors go in, only small donor pieces come out\n      * Make as many as desired\n    * Compile spike-ins into hybrid FastQ (`AssembleValidationSet`)\n      * Acceptor FastQs and spike-ins go in\n      * Hybrid FastQs come out\n\n### Command Line Examples\nFor a full workflow:\n```\npython vase.py BuildValidationSet \\  \n  -b donor1.bam donor2.bam donor3.bam \\\n  -v donor1.vcf.gz donor2.vcf.gz donor3.vcf.gz \\\n  -f my_variants_of_interest.tsv\n  -a acceptor.bam \\\n  -1 acceptor_R1.fastq.gz -2 acceptor_R2.fastq.gz \\\n  -r reference_genome.fasta\n```\n\nTo construct spike-in building blocks for the scalable workflow:\n```\npython vase.py BuildSpikeIns \\\n  --output-mode P \\\n  -b donor1.bam donor2.bam donor3.bam \\\n  -v donor1.vcf.gz donor2.vcf.gz donor3.vcf.gz \\\n  -f my_variants_of_interest.tsv \\\n  -a acceptor.bam \\\n  -r reference_genome.fasta\n```\n* Note that setting --output-mode P will output one spike-in building block per desired variant, which is useful for building up a database of spike-ins for future use. See documentation for details and possible use cases of other output modes.\n\nTo compile spike-ins into a hybrid FastQ:\n```\npython vase.py AssembleValidationSet \\\n  -kb spike_in_1.bam spike_in_2.bam spike_in_3.bam \\\n  -kv spike_in_1.vcf.gz spike_in_2.vcf.gz spike_in_3.vcf.gz \\\n  -1 acceptor_R1.fastq.gz -2 acceptor_R2.fastq.gz \\\n  -c varcon_file.tsv\n```\n\n\n## About VaSeBuilder\n### Short introduction\nOften when a computational analysis consisting of multiple steps is run routinely, a pipeline is constructed. The pipeline connects the individual analysis steps and automates the execution of each and transition to the next. Pipelines can be evaluated to determine whether each step and transition to the next works correctly. Simultaneously, validation of the pipeline to determine whether it can indeed provide relevant results is equally important. Pipelines can be validated in separate and isolated runs but this requires time. We aim to combine the running of analyses and validation of the pipeline.\\\nVaSeBuilder (Validation Set Builder) can be used to construct two FastQ files with forward and reverse reads for the validation of the Molgenis NGS_DNA pipeline. To construct these two FastQ files data from samples already processed with the NGS_DNA pipeline are used to modify a template.\\\nThe sample data should consist of a BAM file (containing aligned reads) and a VCF file containing identified variants.\\\nThe template can for example be the NA12878 sample and should first be processed with the NGS_DNA pipeline. VaSeBuilder only requires the two FastQ and the produced BAM file.\n\n### What does VaSeBuilder do?\nFor each sample, VaSeBuilder iterates over the variants within the VCF/BCF file (if a variant list is provided only \nvariants satisfying that list will be used). First reads overlapping directly with the variant are identified in both \nthe acceptor/template and the donor BAM/CRAM file of the same sample. From these reads and their mates the left and \nright most position is determined which establishes the acceptor context and donor context respectively. From these two \ncontexts the variant context is determined. This context spans the absolute left and right most genomic positions of \nboth contexts and can (quite often) be larger than either. Reads overlapping with this variant context and their mates \nare then identified and saved.\\\nAfter processing all donor samples, the acceptor/template fastq files are used to produce the validation set fastq \nfiles. Acceptor reads within a variant contexts are excluded from these new fastq files and are replaced with donor \nreads that are located in the same variant context. This produces a set of fastq files for with known variants that \nshould be able to be identified and which reads carry those variants.\\\nCurrently VaSeBuilder only works with 'simple' genomic variants such as SNPs and small indels, but this may very well \nbe expanded in the future :)\n\n\n### What are acceptor, donor and variant contexts?\nVaSeBuilder creates the validation set by identifying for each variant which acceptor reads to be exchanged with which \ndonor reads. The acceptor context is the window established by the leftmost and rightmost genomic positions of reads \ndirectly overlapping with the variants and their read mates (which likely do not overlap). The donor context works the \nsame as the acceptor context but instead uses a donor file.\\\nThe variant context is established by combining the minimum and maximum border of acceptor and donor context and thereby\n spans both. Since the variant context spans a larger area than both acceptor and donor context individually, acceptor \nand donor reads and their mates are identified again. Acceptor reads overlapping with the variant context and their \nmates are excluded and replaced by donor reads overlapping with the variant context.\n\n\n### Required software\n* Python 3.6 or higher\n* Pysam 0.14 or higher\n* Linux file command v5.37 or higher\n* HTSlib 1.7 or higher\n* SAMtools 1.7 or higher\n\n\n### Important to know\nVaSeBuilder is intended to build a validation set from acceptor and donor data that was sequenced with the same\nsequencer/sequencing platform and treated with the same preparation and capturing kit. (Please see the documentation\n later as to why...)\n&nbsp;\n\n&nbsp;\n\n\n### Program output\nAside from the forward and reverse read FastQ files, the program also outputs a set of text files. These files are all \nrelated to the variant contexts. Although the names of some files can be set via the optional parameters, below we used \nthe default names to describe each.\n\n#### Default output files\n* __donorbams.txt__: List of donor BAM/CRAM files used to create the validation set\n* __donorvcfs.txt__: List of donor VCF/BCF files used to create the validation set\n* __varcon.txt__: List of variant contexts that build the validation set\n* __varconstats.txt__: Basic variant context statistics (average and median)\n* __variantcontexts.bed__: The variants contexts in bed file format.\n* __VaSeBuilder.log__: The log file containing data about the run of the program\n\n#### Debug output files\n* __acceptorcontexts.txt__: List of established acceptor contexts.\n* __acceptorcontextstats.txt__: Basic acceptor context statistics\n* __acceptor_unmapped.txt__: List of acceptor read identifier per acceptor context that have unmapped read mates \n* __acceptor_positions.txt__: List of all acceptor R1 read left starting positions and R2 read right ending positions per acceptor context\n* __donorcontexts.txt__: List of established donor contexts.\n* __donorcontextstats.txt__: Basic donor context statistics \n* __donor_unmapped.txt__: List of donor read identifiers per donor context that have unmapped read mates.\n* __donor_positions.txt__: List of all donor R1 read left starting positions and R2 read right ending positions per donor context\n* __varcon_unmapped_acceptor.txt__: List of variant context acceptor read identifiers that have unmapped mates per context\n* __varcon_unmapped_donor.txt__: List of variant context donor read identifiers that have unmapped mates per context\n* __varcon_positions_acceptor.txt__: List of all variant context acceptor R1 read left starting positions and R2 read right ending positions per variant context\n* __varcon_positions_donor.txt__: List of all variant context donor R1 read left starting positions and R2 read right ending positions per variant context\n&nbsp;\n\n&nbsp;\n\n\n## Questions & Answers\n### General questions\n**Q: Which python version is required?**\\\n**A:** VaSeBuilder has been created to run in Python 3. To run the program on Python 2 the code might need to be changed first.\n\n**Q: Which python libraries are required?**\\\n**A:** VaSeBuilder uses _pysam_ and _gzip_. The easiest way to obtain these libraries is to install them via pip (pip install _library_). Note that the pysam library itself requires htslib which doesn't run on the Windows platform.\n\n**Q: Which pysam version is required?**\\\n**A:** Pysam 0.14.0 or higher is required as VaSeBuilder uses the get_forward_sequence() and get_forward_qualities() methods that were introduced in pysam 0.14.0.\n\n**Q: Can VaSeBuilder be run on Windows?**\\\n**A:** Some adjustments would need to be made as pysam can't be used on Windows. The python library bamnostic can replace pysam for working with BAM files. Reading and processing VCF would need to be done with the default python file reading/writing functionality or other libraries (if available).\n\n**Q: Are sample identifiers required?**\\\n**A:** Yes, VaSeBuilder uses the sample identifiers in BAM and VCF files to link the two files. You can check if a BAM has sample information by examing the header for a line similar to:\n_@RG\tID:Sample\tSM:Sample_\nYou can extract the header (samtools view -H bamFile.bam > bamHeader.txt), add a sample by adding the above line with the correct sample name and then reheader the BAM file (samtools reheader bamHeader.txt bamFile.bam > BamFileWithSample.bam).\n\n\n### Specific questions\n**Q: Is there a simple way to check whether the donor and acceptor reads are indeed added and removed respectively?**\\\n**A:** Currently I'm working on a set of scripts, as well as others, that I have called VaSeUtils which can be used to check this.\n\n**Q: What is the effect of using data from different sequencers, prep-kits and/or capturing kits?**\\\n**A:** To still be investigated...\n&nbsp;\n\n&nbsp;\n\n\n## Future things\nVaSeBuilder might change into a python project installable via pip.\\\nVaSeBuilder might very well be updated and changed to work with more complex variants.\\\nMake VaSeBuilder into a multiprocessor program to speed up te process.\\\nLet VaSeBuilder work with more complex variants.\\\nLet VaSeBuilder work with trio data.\n\nPlease let me know if this documentation is missing things or which things are unclear.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/molgenis/VaSeBuilder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "VaSeBuilder",
    "package_url": "https://pypi.org/project/VaSeBuilder/",
    "platform": "",
    "project_url": "https://pypi.org/project/VaSeBuilder/",
    "project_urls": {
      "Homepage": "https://github.com/molgenis/VaSeBuilder"
    },
    "release_url": "https://pypi.org/project/VaSeBuilder/20.7.1/",
    "requires_dist": [
      "numpy (>=1.18.1)",
      "argon2-cffi (>=19.2.0)",
      "pysam (>=0.15.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "VaSeBuilder, a bioinformatic tool for artificially combining multiple NGS samples into a single, hybrid sample.",
    "version": "20.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10612134,
  "releases": {
    "20.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac15c3f4b009d382ee850526dfb084af9eaaffea704f6eeee17adc52dd36a4ce",
          "md5": "8a968779f580f416b04c3218af84c9ed",
          "sha256": "8ef506f89efc332f18a52fdc003eed62f84fe236f8c8ea950456d444a786a896"
        },
        "downloads": -1,
        "filename": "VaSeBuilder-20.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a968779f580f416b04c3218af84c9ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 122837,
        "upload_time": "2020-07-13T17:11:20",
        "upload_time_iso_8601": "2020-07-13T17:11:20.446336Z",
        "url": "https://files.pythonhosted.org/packages/ac/15/c3f4b009d382ee850526dfb084af9eaaffea704f6eeee17adc52dd36a4ce/VaSeBuilder-20.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c9ef8cb2e9cdd8963ea9cf2167fc09ad97fada61ad027091ffa5f0e8d2cbe21",
          "md5": "666b5281b41ba52b65c0dfe357e5610b",
          "sha256": "0395ff13b69f2a1cfb2d148c00450097688c447e7471a349cf3db985b408cdb2"
        },
        "downloads": -1,
        "filename": "VaSeBuilder-20.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "666b5281b41ba52b65c0dfe357e5610b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103967,
        "upload_time": "2020-07-13T17:11:22",
        "upload_time_iso_8601": "2020-07-13T17:11:22.775008Z",
        "url": "https://files.pythonhosted.org/packages/6c/9e/f8cb2e9cdd8963ea9cf2167fc09ad97fada61ad027091ffa5f0e8d2cbe21/VaSeBuilder-20.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac15c3f4b009d382ee850526dfb084af9eaaffea704f6eeee17adc52dd36a4ce",
        "md5": "8a968779f580f416b04c3218af84c9ed",
        "sha256": "8ef506f89efc332f18a52fdc003eed62f84fe236f8c8ea950456d444a786a896"
      },
      "downloads": -1,
      "filename": "VaSeBuilder-20.7.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a968779f580f416b04c3218af84c9ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 122837,
      "upload_time": "2020-07-13T17:11:20",
      "upload_time_iso_8601": "2020-07-13T17:11:20.446336Z",
      "url": "https://files.pythonhosted.org/packages/ac/15/c3f4b009d382ee850526dfb084af9eaaffea704f6eeee17adc52dd36a4ce/VaSeBuilder-20.7.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c9ef8cb2e9cdd8963ea9cf2167fc09ad97fada61ad027091ffa5f0e8d2cbe21",
        "md5": "666b5281b41ba52b65c0dfe357e5610b",
        "sha256": "0395ff13b69f2a1cfb2d148c00450097688c447e7471a349cf3db985b408cdb2"
      },
      "downloads": -1,
      "filename": "VaSeBuilder-20.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "666b5281b41ba52b65c0dfe357e5610b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 103967,
      "upload_time": "2020-07-13T17:11:22",
      "upload_time_iso_8601": "2020-07-13T17:11:22.775008Z",
      "url": "https://files.pythonhosted.org/packages/6c/9e/f8cb2e9cdd8963ea9cf2167fc09ad97fada61ad027091ffa5f0e8d2cbe21/VaSeBuilder-20.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}