{
  "info": {
    "author": "Mohamed El-Kalioby, Mahmood Nasr",
    "author_email": "mkalioby@mkalioby.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## django-batch-sheet\n\nMost of the projects we worked on needs a feature to upload data in batch, we always ended up write another code to handle \nthe Excel sheet and where each column shall go in the model, in the latest project we decided to handle it differently\nand why write a django app that handles this like ModelForm handles models and surprisingly, it worked.\n\n## Features\n* Generate a Sheet from a Django model or a combination of models (through Combined Sheet),\n* Add the validation rules for Choices, Foreign Keys, Integers automatically in Excel,\n* Showing the required field in red by default\n* Sheet can be validated automatically and check with `is_valid()`\n* Allow  overriding the behavior of  model in the class,\n* Allow alot of functions to override the class behavior (`row_preprocess`,`save`,`pre_load`,`post_process`),\n* Automatic Loading of the data in the sheet to the model.\n\n## Install\n1. Install the package\n```sh\npip install django-batch-sheet\n```\n2. Add it to INSTALLED_APPS\n```python\nINSTALLED_APPS=[\n...\n'batch_sheet'\n...\n]\n```\n\n## Example\n\nLet's assume that we have the following models with these rules\n\n* Patient can have multiple tests but saved once as a `Patient` Object.\n\n```python\nclass Test(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\n\nclass Gender (models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\nclass Patient(models.Model):\n    name = models.CharField(max_length=50,verbose_name=\"Patient Name\")\n    MRN = models.CharField(max_length=50)\n    gender= models.ForeignKey(Gender,on_delete=models.PROTECT,null=True, verbose_name=\"Gender\")\n    date_of_birth = models.DateField(null=True,blank=True,verbose_name=\"Birth Date\")\n    date_admitted = models.DateField(auto_now_add=True,auto_created=True)\n    lastUpdate = models.DateTimeField(auto_now=True)\n\n\nclass RequestedTest(models.Model):\n    patient = models.ForeignKey(Patient,on_delete=models.CASCADE)\n    test = models.ForeignKey(Test,on_delete=models.PROTECT,verbose_name=\"Test\")\n    sample_date = models.DateField(auto_now_add=True,auto_created=True)\n    sample_type = models.CharField(max_length=50, verbose_name=\"Sample Type\",choices=(('Blood','Blood'),('DNA','DNA')))\n    lastUpdate = models.DateTimeField(auto_now_add=True)\n```\n\nWe want to combine both Models in on sheet, so we put the patient information with the requested test in one row.\n\nSo For Patient, we will implement the class `PatientSheet` as follows\n\n```python\nclass PatientSheet(Sheet):\n    def save(self, obj:Patient, row_objs:dict):\n        \"\"\"Lets handle the save manually to check if the MRN exists\"\"\"\n        patient = Patient.objects.filter(MRN = obj.MRN)\n        if patient.exists():\n            p = patient[0]\n        else:\n            p = obj\n            p.save()\n        return p\n    class Meta:\n        exclude=('id','date_admitted','lastUpdate')\n        Model = Patient\n        obj_name = \"patient\"\n        title_header = True\n```\nFor the Meta attributes, please go to the Meta Attributes sections\n\nFor RequestedTest Sheet, it goes like this \n\n```python\nclass RequestedTestSheet(Sheet):\n    def save(self,obj,row_objs):\n        patient = row_objs.get('patient')\n        if patient is None:\n            return None\n        else:\n            obj.patient = patient\n            obj.save()\n            return obj\n\n    class Meta:\n        exclude =('id','sample_date','lastUpdate')\n        validation_exclude = ('patient',)\n        title_header = True\n        Model = RequestedTest\n```\n\nNow Lets combine them in one sheet\n\n```python\nclass TestSheet(CombinedSheet):\n    patient = PatientSheet()\n    test = RequestedTestSheet()\n```\n\nNow Let's Generate The sheet\n\n```\n$ python manage.py generate_sheet --xls App.xls --sheet test_app.sheets.TestSheet\n```\nThis will the file to `App.xls` in the folder, now, lets open `App.xls`\n\n![docs/imgs/xls.png](docs/imgs/xls.png)\n\nWe got the dropdown automatically, based on the value in the database.\n\n## Meta Options\n```python\n    Class Meta:\n        rows_count = 10              # Number of rows to apply validations on\n        columns = ()                 # Columns to add from the Model to the sheet\n        exclude = ()                 # Columns to exclude\n        Model = None                 # Model to scan\n        raw_cols = []                # Foreign Key Field that shouldn't be set as dropdown\n        title_header = False         # Make the titles as \"First Name\"\n        validation_exclude=[]        # Don't validate these field, important in case of objects relationship  \n        object_name = None           # The name of the object saved, important in case of Combined Sheet.\n            \n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mkalioby/django-batch-sheet/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mkalioby/django-batch-sheet/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-batch-sheet",
    "package_url": "https://pypi.org/project/django-batch-sheet/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-batch-sheet/",
    "project_urls": {
      "Download": "https://github.com/mkalioby/django-batch-sheet/",
      "Homepage": "https://github.com/mkalioby/django-batch-sheet/"
    },
    "release_url": "https://pypi.org/project/django-batch-sheet/0.10.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Create Excel Sheet from Django Model and load them automatically",
    "version": "0.10.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15787064,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13a85000cd0a072c3a2c853e3c8e1d3368fc165639d5d7691f86c99ad616b48e",
          "md5": "e0394299889208ad872fc62d6f8d541b",
          "sha256": "2d4dd5c22996e60ee4b1793615343dbe915eea82fa001b2cd3bdef24564c3700"
        },
        "downloads": -1,
        "filename": "django-batch-sheet-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0394299889208ad872fc62d6f8d541b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10191,
        "upload_time": "2022-11-16T10:47:46",
        "upload_time_iso_8601": "2022-11-16T10:47:46.776545Z",
        "url": "https://files.pythonhosted.org/packages/13/a8/5000cd0a072c3a2c853e3c8e1d3368fc165639d5d7691f86c99ad616b48e/django-batch-sheet-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de1a1cbc86f17b754f5c6c6bf41ed41a84cdfe25cb3758157456142ec8b5996d",
          "md5": "e61d273ec131c279d1723d3017531967",
          "sha256": "0818d19bbaaf1297b2fef2e94e43faa5600979448a92d5b0e6378d64025a4d51"
        },
        "downloads": -1,
        "filename": "django-batch-sheet-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e61d273ec131c279d1723d3017531967",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 10311,
        "upload_time": "2022-10-17T23:33:21",
        "upload_time_iso_8601": "2022-10-17T23:33:21.307666Z",
        "url": "https://files.pythonhosted.org/packages/de/1a/1cbc86f17b754f5c6c6bf41ed41a84cdfe25cb3758157456142ec8b5996d/django-batch-sheet-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13a85000cd0a072c3a2c853e3c8e1d3368fc165639d5d7691f86c99ad616b48e",
        "md5": "e0394299889208ad872fc62d6f8d541b",
        "sha256": "2d4dd5c22996e60ee4b1793615343dbe915eea82fa001b2cd3bdef24564c3700"
      },
      "downloads": -1,
      "filename": "django-batch-sheet-0.10.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e0394299889208ad872fc62d6f8d541b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10191,
      "upload_time": "2022-11-16T10:47:46",
      "upload_time_iso_8601": "2022-11-16T10:47:46.776545Z",
      "url": "https://files.pythonhosted.org/packages/13/a8/5000cd0a072c3a2c853e3c8e1d3368fc165639d5d7691f86c99ad616b48e/django-batch-sheet-0.10.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}