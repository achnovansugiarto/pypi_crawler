{
  "info": {
    "author": "Dave Pearson",
    "author_email": "davep@davep.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development :: Libraries",
      "Typing :: Typed"
    ],
    "description": "# Flounder Score\n\n## Introduction\n\nAs a software developer who knows little to nothing about biology, genetics\nor bioinformatics, I felt it was important that I tried to make my mark on\nthese fields. Over the last couple or so years, I've seen that a lot of time\nand effort goes into deciding how \"good\" or \"bad\" a sequence is, involving\nmassive amounts of data-crunching and machine learning and the like.\n\nPersonally, I think this all seems too much like hard work.\n\nSurely, I thought, there has to be a simple way of assigning some value to a\nletter and then summing up all of those values. I mean, that's all this\ngenetics lark is, right? A handful of letters stuck together?\n\nWith this deep and valuable insight in mind, I looked around for a simple\nmethod of scoring letters. After a very long search (seriously, it must have\nlasted a whole mug of coffee!), I found some ancient tiles, each of which\ndescribed the value of the letters normally used in English. At this point\nit was obvious that this traditional way of weighting the constituent parts\nof one language should and could be applied to another.\n\nAnd so the *Flounder Score* was born.\n\n## Usage\n\nThe Flounder Score library provides the following functions:\n\n### score( sequence: str ) -> int\n\nThis function takes a string that is a sequence, applies a complex algorithm\nusing the values found on the ancient tiles, and returns an integer value\nthat is the Flounder Score for that sequence. Case is not important. IUAPC\ncodes are taken into account.\n\nExample:\n\n```python\n>>> from flounder import score\n>>> score( \"gtac\" )\n7\n```\n\n### scores( sequence: str ) -> list[ tuple[ str, int ] ]\n\nThis function takes a string that is a sequence, applies a complex algorithm\nusing the values found on the ancient tiles, and returns a list of tuples.\nEach tuple is the base at that position in the input string, along with its\nindividual score.\n\nExample:\n\n```python\n>>> from flounder import scores\n>>> scores( \"gtac\" )\n[('g', 2), ('t', 1), ('a', 1), ('c', 3)]\n```\n\n### score_to_the_max( sequence: str ) -> integer\n\nThis function takes a string that is a sequence, applies an even more\ncomplex algorithm using the values found on the ancient tiles, and returns\nan integer value that is the \"to-the-max\" Flounder Score. Case is not\nimportant. IUAPC codes are taken into account.\n\nThe difference with this scoring is that, for the bases, not only do they\nscore for their own ancient tile value, they also score for the ancient tile\nvalue of every IUAPC code that is related to that base.\n\nExample:\n\n```python\n>>> from flounder import score_to_the_max\n>>> score_to_the_max( \"gtac\" )\n86\n```\n\n### scores_to_the_max( sequence: str ) -> list[ tuple[ str, int ] ]\n\nThis function takes a string that is a sequence, applies a complex algorithm\nusing the values found on the ancient tiles, and returns a list of tuples.\nEach tuple is the base at that position in the input string, along with its\nindividual score. The score provided for each base is the `score_to_the_max`\nFlounder Score.\n\nExample:\n\n```python\n>>> from flounder import scores_to_the_max\n>>> scores_to_the_max( \"gtac\" )\n[('g', 19), ('t', 24), ('a', 20), ('c', 23)]\n>>>\n```\n\n### codon_score( sequence: str ) -> int\n\nThis function takes a string that is a sequence, translates it to an AA\nsequence (using as many codons as it can find from the first position),\napplies a complex algorithm using the values found on the ancient tiles, and\nreturns an integer value that is the Flounder Score for that sequence. Case\nis not important. IUAPC codes are taken into account.\n\nFor example:\n\n```python\n>>> from flounder import codon_score\n>>> codon_score( \"AGACGCAGTCTT\" )\n4\n```\n\n### codon_scores( sequence: str ) -> list[ tuple[ str, int ] ]\n\nThis function takes a string that is a sequence, translates it to an AA\nsequence (using as many codons as it can find from the first position),\napplies a complex algorithm using the values found on the ancient tiles, and\nreturns a list of tuples. Each tuple is the codon that was found in the\ninput string, along with its individual score.\n\nFor example:\n\n```python\n>>> from flounder import codon_scores\n>>> codon_scores( \"AGACGCAGTCTT\" )\n[('AGA', 1), ('CGC', 1), ('AGT', 1), ('CTT', 1)]\n```\n\n## Building and testing\n\nThis library is designed to built using `make`, `pipenv` and Python 3.7. If\nyou have `pipenv` installed and have an installation of Python 3.7 that it\ncan see you should only need to type `make` in the root directory of the\nrepository.\n\n```sh\n$ make\npipenv sync --dev\nInstalling dependencies from Pipfile.lock (e55651)…\n  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 41/41 — 00:00:04\nTo activate this project's virtualenv, run pipenv shell.\nAlternatively, run a command inside the virtualenv with pipenv run.\nAll dependencies are now up-to-date!\n```\n\nUnit tests can be run like this:\n\n```sh\n$ make test\nPYTHONPATH=. pipenv run coverage run tests/tests.py\ntest_case (__main__.TestFlounderScore)\nTest that we don't care about case. ... ok\ntest_empty (__main__.TestFlounderScore)\nTest that an empty sequence is handled. ... ok\ntest_unknown (__main__.TestFlounderScore)\nTest sequences containing things we don't score. ... ok\ntest_case (__main__.TestFlounderScoreToTheMax)\nTest that we don't care about case. ... ok\ntest_empty (__main__.TestFlounderScoreToTheMax)\nTest that an empty sequence is handled. ... ok\ntest_unknown (__main__.TestFlounderScoreToTheMax)\nTest sequence containing things we don't score. ... ok\ntest_empty (__main__.TestFlounderScores)\nTest that an empty sequence is handled. ... ok\ntest_scores (__main__.TestFlounderScores)\nTest that the individual scores are correct. ... ok\ntest_unknown (__main__.TestFlounderScores)\nTest sequences containing things we don't score. ... ok\ntest_empty (__main__.TestFlounderScoresToTheMax)\nTest that an empty sequence is handled. ... ok\ntest_scores (__main__.TestFlounderScoresToTheMax)\nTest that the individual scores are correct. ... ok\ntest_unknown (__main__.TestFlounderScoresToTheMax)\nTest sequences containing things we don't score. ... ok\n```\n\nThere are a number of other `Makefile` targets available for all sorts of\nlinting and testing, as well as for building a package. Simple type:\n\n```sh\n$ make help\n```\n\nto get a list of them all.\n\n[//]: # (README.md ends here)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davep/flounder_score",
    "keywords": "",
    "license": "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "Dave Pearson",
    "maintainer_email": "davep@davep.org",
    "name": "flounder-score",
    "package_url": "https://pypi.org/project/flounder-score/",
    "platform": "",
    "project_url": "https://pypi.org/project/flounder-score/",
    "project_urls": {
      "Homepage": "https://github.com/davep/flounder_score"
    },
    "release_url": "https://pypi.org/project/flounder-score/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Flounder score library.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11854208,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74582c82e3cc5cd99688d61c1139aab51e32a68ac683dd95ba1858425d1ac483",
          "md5": "201c141c6ea926dba64b525bb905d24a",
          "sha256": "e90ed8583bc5e88fbdb24035472c3630e174d97b5181afb6786d57602c5a39de"
        },
        "downloads": -1,
        "filename": "flounder_score-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "201c141c6ea926dba64b525bb905d24a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 19352,
        "upload_time": "2021-10-28T06:27:24",
        "upload_time_iso_8601": "2021-10-28T06:27:24.770890Z",
        "url": "https://files.pythonhosted.org/packages/74/58/2c82e3cc5cd99688d61c1139aab51e32a68ac683dd95ba1858425d1ac483/flounder_score-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74582c82e3cc5cd99688d61c1139aab51e32a68ac683dd95ba1858425d1ac483",
        "md5": "201c141c6ea926dba64b525bb905d24a",
        "sha256": "e90ed8583bc5e88fbdb24035472c3630e174d97b5181afb6786d57602c5a39de"
      },
      "downloads": -1,
      "filename": "flounder_score-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "201c141c6ea926dba64b525bb905d24a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 19352,
      "upload_time": "2021-10-28T06:27:24",
      "upload_time_iso_8601": "2021-10-28T06:27:24.770890Z",
      "url": "https://files.pythonhosted.org/packages/74/58/2c82e3cc5cd99688d61c1139aab51e32a68ac683dd95ba1858425d1ac483/flounder_score-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}