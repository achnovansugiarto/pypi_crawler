{
  "info": {
    "author": "Avneesh Dubey",
    "author_email": "avneesh.d01@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Forecasting Factors\n\nA forecasting methodology is only as good as the factors chosen as predictors. \nThere are a staggering number of potential factors to choose from when forecasting stock market index returns. \n\nIn this project we are going to restrict the factors to time lags of the current percentage returns. \nThis is not because they are the best predictors, rather it is because it is straightforward to demonstrate the process of forecasting on an easily obtained dataset.\nForecasting factor choice is extremely important, if not the most important, component of the forecaster. \n\nEven simple machine learning techniques will produce good results on well-chosen factors. Note that the converse is not often the case. \n\"Throwing an algorithm at a problem\" will usually lead to poor forecasting accuracy.\nFor this forecaster specifically, I have chosen the first and second time lags of the percentage returns as the predictors for the current stock market direction. This is a relatively arbitrary choice and there is plenty of scope for modification, for instance by adding in additional lags or the volume of shares traded. It is generally better to have fewer predictors in a model, although there are statistical tests available which can demonstrate the predictive capability of each factor.\n\n\nForecasting S&P500 with Logistic Regression, LDA and QDA\n\nThe S&P500 is a weighted index of the 500 largest publicly traded companies (by market capitalisation) in the US stock market. \nIt is often considered an equities \"benchmark\". Many derivative products exist in order to allow speculation or hedging on the index. \nIn particular, the S&P500 E-Mini Index Futures Contract is an extremely liquid means of trading the index.\nIn this section we are going to use three classifiers to predict the direction of the closing price at day N based solely on price information known at day Nâˆ’1. \nAn upward directional move means that the closing price at N is higher than the price at Nâˆ’1, while a downward move implies a closing price at N lower than at Nâˆ’1.\nIf we can determine the direction of movement in a manner that significantly exceeds a 50% hit rate, with low error and a good statistical significance, then we are on the road to forming a basic systematic trading strategy based on our forecasts. \nAt this stage we're not concerned with the most up to date machine learning classification algorithms. Right now we're just introducing concepts and so we'll begin the discussion on forecasting with some elementary methods.\n\n1. Logistic Regression\n\nThe first technique we will consider is logistic regression (LR). In our case we are going to use LR to measures the relationship between a binary categorical dependent variable (\"Up\" or \"Down\") and multiple independent continuous variables (the lagged percentage returns). The model provides the probability that a particular (following) day will be categorised as \"Up\" or \"Down\". In this implementation we have chosen to assign each day as \"Up\" if the probability exceeds 0.5. We could make use of a different threshold, but for simplicity I have chosen 0.5.\nLR uses the logistic formula to model the probability of obtaining an \"Up\" day (Y=U) based on the lag factors (L1, L2):\np(Y=U|L1,L2)=eÎ²0+Î²1L1+Î²2L21+eÎ²0+Î²1L1+Î²2L2\nThe logistic function is used because it provides a probability between [0,1] for all values of L1 and L2, unlike linear regression where negative probabilities can be generated in the same setting.\nTo fit the model (i.e. estimate the Î²i coefficients) the maximum likelihood method is used. Fortunately for us, the implementation of the fitting and prediction of the LR model is handled by the scikit-learn library.\n\n2. Linear Discriminant Analysis\n\nThe next technique used is Linear Discriminant Analysis (LDA). LDA differs from LR in because in LR we model P(Y=U|L1,L2) as a conditional distribution of the response Y given the predictors Li, using a logistic function. In LDA the distribution of the Li variables are modelled separately, given Y, and P(Y=U|L1,L2) is obtained via Bayes' Theorem.\nEssentially, LDA results from assuming that predictors are drawn from a multivariate Gaussian distribution. After calculting estimates for the parameters of this distribution, the parameters can be input into Bayes' Theorem in order to make predictions about which class an observation belongs to.\nLDA assumes that all classes share the same covariance matrix.\nI won't dwell on the formulae for estimating the distribution or posterior probabilities that are needed to make predictions, as once again scikit-learn handles this for us.\n\n3. Quadratic Discriminant Analysis\n\nQuadratic Discriminant Analysis (QDA) is closely related to LDA. The significant difference is that each class can now possess its own covariance matrix.\nQDA generally performs better when the decision boundaries are non-linear. LDA generally performs better when there are fewer training observations (i.e. when needing to reduce variance). QDA, on the other hand, performs well when the training set is large (i.e. variance is of less concern). The use of one or the other ultimately comes down to the bias-variance trade-off.\nAs with LR and LDA, scikit-learn takes care of the QDA implementation so we only need to provide it with training/test data for parameter estimation and prediction.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/avneeshdubey99/FinAvn.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/avneeshdubey99/FinAvn",
    "keywords": "Machine Learning,Pandas,Numpy,Analysis,Regression,Classification,Dimensionality,Classifiers",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "FinAvn2",
    "package_url": "https://pypi.org/project/FinAvn2/",
    "platform": "",
    "project_url": "https://pypi.org/project/FinAvn2/",
    "project_urls": {
      "Download": "https://github.com/avneeshdubey99/FinAvn.git",
      "Homepage": "https://github.com/avneeshdubey99/FinAvn"
    },
    "release_url": "https://pypi.org/project/FinAvn2/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Performing Financial Time series forecasting using Machine Learning",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8547776,
  "releases": {
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8afd8e860d088a1742872476df3b2289671b95b6a9fd720355ca2d866085f48c",
          "md5": "123fa8f778bdaa856431438d8313aecc",
          "sha256": "10ab4d7c4a455650a415b9a893affc9921f6ebb81229d1690b8a0cb32703f163"
        },
        "downloads": -1,
        "filename": "FinAvn2-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "123fa8f778bdaa856431438d8313aecc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2978,
        "upload_time": "2020-10-30T13:22:47",
        "upload_time_iso_8601": "2020-10-30T13:22:47.662781Z",
        "url": "https://files.pythonhosted.org/packages/8a/fd/8e860d088a1742872476df3b2289671b95b6a9fd720355ca2d866085f48c/FinAvn2-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b86de74827a4a4bc77af68041aeeeceb2d1e0a91ca5c1430004cda52ca598c6",
          "md5": "804aa035dace6ab084496112f06227dc",
          "sha256": "4b611358a698330f070a2d5c2ec886d0018b40cb0d7565ac6edba325dc3c5783"
        },
        "downloads": -1,
        "filename": "FinAvn2-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "804aa035dace6ab084496112f06227dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2576,
        "upload_time": "2020-10-30T13:30:14",
        "upload_time_iso_8601": "2020-10-30T13:30:14.878784Z",
        "url": "https://files.pythonhosted.org/packages/6b/86/de74827a4a4bc77af68041aeeeceb2d1e0a91ca5c1430004cda52ca598c6/FinAvn2-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1461541039cab836935ecb7278e4549de120e9553b14ab3c41aa6906f1193248",
          "md5": "da9d7c1788a70c1ddbf1cd984d72eed5",
          "sha256": "18775afba2f6b093ce37159a3a51be4430c457305adaf8bce32661ece9b77b5b"
        },
        "downloads": -1,
        "filename": "FinAvn2-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "da9d7c1788a70c1ddbf1cd984d72eed5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2569,
        "upload_time": "2020-10-30T13:53:24",
        "upload_time_iso_8601": "2020-10-30T13:53:24.747934Z",
        "url": "https://files.pythonhosted.org/packages/14/61/541039cab836935ecb7278e4549de120e9553b14ab3c41aa6906f1193248/FinAvn2-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "087c5a659a0cd1feef178b0b7ba0bf58cfe024905ffd0dd8b642d0e158b791b1",
          "md5": "670f67a8b5726742001235eb244ae319",
          "sha256": "597efb21b5e0c3c9d75ac4cd3782b51ecdbf20049c9fb20b0759f15509d1ccba"
        },
        "downloads": -1,
        "filename": "FinAvn2-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "670f67a8b5726742001235eb244ae319",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2577,
        "upload_time": "2020-10-30T15:41:58",
        "upload_time_iso_8601": "2020-10-30T15:41:58.805431Z",
        "url": "https://files.pythonhosted.org/packages/08/7c/5a659a0cd1feef178b0b7ba0bf58cfe024905ffd0dd8b642d0e158b791b1/FinAvn2-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52453ac54f28eb7d68d582ffee888104d255bb353f99508ce21f1247749381f7",
          "md5": "0a05cc3d7cae3c8d71dd1d51156ec594",
          "sha256": "f587275eb73c7cb53ba59df2928b09c13df7749f662fae0d997639857ca2c712"
        },
        "downloads": -1,
        "filename": "FinAvn2-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a05cc3d7cae3c8d71dd1d51156ec594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4928,
        "upload_time": "2020-10-31T06:20:14",
        "upload_time_iso_8601": "2020-10-31T06:20:14.458783Z",
        "url": "https://files.pythonhosted.org/packages/52/45/3ac54f28eb7d68d582ffee888104d255bb353f99508ce21f1247749381f7/FinAvn2-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac033d15ede13f5096edd9ac24bc98677f07b5b04336d1d64dc15eba9c2b0bb1",
          "md5": "bb6f60292aaf36d1fdae10bd8bd94d06",
          "sha256": "000a73a5b66fa5af62543a6daf3c06f37f1cb5d2045b664c89cc4cdc94211768"
        },
        "downloads": -1,
        "filename": "FinAvn2-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bb6f60292aaf36d1fdae10bd8bd94d06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4926,
        "upload_time": "2020-10-31T06:26:19",
        "upload_time_iso_8601": "2020-10-31T06:26:19.642796Z",
        "url": "https://files.pythonhosted.org/packages/ac/03/3d15ede13f5096edd9ac24bc98677f07b5b04336d1d64dc15eba9c2b0bb1/FinAvn2-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac033d15ede13f5096edd9ac24bc98677f07b5b04336d1d64dc15eba9c2b0bb1",
        "md5": "bb6f60292aaf36d1fdae10bd8bd94d06",
        "sha256": "000a73a5b66fa5af62543a6daf3c06f37f1cb5d2045b664c89cc4cdc94211768"
      },
      "downloads": -1,
      "filename": "FinAvn2-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "bb6f60292aaf36d1fdae10bd8bd94d06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4926,
      "upload_time": "2020-10-31T06:26:19",
      "upload_time_iso_8601": "2020-10-31T06:26:19.642796Z",
      "url": "https://files.pythonhosted.org/packages/ac/03/3d15ede13f5096edd9ac24bc98677f07b5b04336d1d64dc15eba9c2b0bb1/FinAvn2-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}