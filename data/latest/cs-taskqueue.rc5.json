{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "Cameron Simpson <cs@cskk.id.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "A general purpose Task and TaskQueue for running tasks with\ndependencies and failure/retry, potentially in parallel.\n\n*Latest release 20230401*:\nAdd missing requirement to DISTINFO.\n\n## Class `BaseTask(cs.fsm.FSM, cs.gvutils.DOTNodeMixin, cs.resources.RunStateMixin)`\n\nA base class subclassing `cs.fsm.FSM` with a `RunStateMixin`.\n\nNote that this class and the `FSM` base class does not provide\na `FSM_DEFAULT_STATE` attribute; a default `state` value of\n`None` will leave `.fsm_state` _unset_.\n\nThis behaviour is is chosen mostly to support subclasses\nwith unusual behaviour, particularly Django's `Model` class\nwhose `refresh_from_db` method seems to not refresh fields\nwhich already exist, and setting `.fsm_state` from a\n`FSM_DEFAULT_STATE` class attribute thus breaks this method.\nSubclasses of this class and `Model` should _not_ provide a\n`FSM_DEFAULT_STATE` attribute, instead relying on the field\ndefinition to provide this default in the usual way.\n\n## Class `BlockedError(TaskError, cs.fsm.FSMError, builtins.Exception, builtins.BaseException)`\n\nRaised by a blocked `Task` if attempted.\n\n## Function `main(argv)`\n\nDummy main programme to exercise something.\n\n## Function `make(*tasks, fail_fast=False, queue=None)`\n\nGenerator which completes all the supplied `tasks` by dispatching them\nonce they are no longer blocked.\nYield each task from `tasks` as it completes (or becomes cancelled).\n\nParameters:\n* `tasks`: `Task`s as positional parameters\n* `fail_fast`: default `False`; if true, cease evaluation as soon as a\n  task completes in a state with is not `DONE`\n* `queue`: optional callable to submit a task for execution later\n  via some queue such as `Later` or celery\n\nThe following rules are applied by this function:\n- if a task is being prepared, raise an `FSMError`\n- if a task is already running or queued, wait for its completion\n- if a task is pending:\n  * if any prerequisite has failed, fail this task\n  * if any prerequisite is cancelled, cancel this task\n  * if any prerequisite is pending, make it first\n  * if any prerequisite is not done, fail this task\n  * otherwise dispatch this task and then yield it\n- if `fail_fast` and the task is not done, return\n\nExamples:\n\n    >>> t1 = Task('t1', lambda: print('doing t1'), track=True)\n    >>> t2 = t1.then('t2', lambda: print('doing t2'), track=True)\n    >>> list(make(t2))    # doctest: +ELLIPSIS\n    t1 PENDING->dispatch->RUNNING\n    doing t1\n    t1 RUNNING->done->DONE\n    t2 PENDING->dispatch->RUNNING\n    doing t2\n    t2 RUNNING->done->DONE\n    [Task('t2',<function <lambda> at ...>,state='DONE')]\n\n## Function `make_later(L, *tasks, fail_fast=False)`\n\nDispatch the `tasks` via `L:Later` for asynchronous execution\nif it is not already completed.\nThe caller can wait on `t.result` for completion.\n\nThis calls `make_now()` in a thread and uses `L.defer` to\nqueue the task and its prerequisites for execution.\n\n## Function `make_now(*tasks, fail_fast=False, queue=None)`\n\nRun the generator `make(*tasks)` to completion and return the\nlist of completed tasks.\n\n## Class `Task(BaseTask, cs.fsm.FSM, cs.gvutils.DOTNodeMixin, cs.resources.RunStateMixin, cs.threads.HasThreadState, cs.context.ContextManagerMixin)`\n\nA task which may require the completion of other tasks.\n\nThe model here may not be quite as expected; it is aimed at\ntasks which can be repaired and rerun.\nAs such, if `self.run(func,...)` raises an exception from\n`func` then this `Task` will still block dependent `Task`s.\nDually, a `Task` which completes without an exception is\nconsidered complete and does not block dependent `Task`s.\n\nKeyword parameters:\n* `cancel_on_exception`: if true, cancel this `Task` if `.run`\n  raises an exception; the default is `False`, allowing repair\n  and retry\n* `cancel_on_result`: optional callable to test the `Task.result`\n  after `.run`; if the callable returns `True` the `Task` is marked\n  as cancelled, allowing repair and retry\n* `func`: the function to call to complete the `Task`;\n  it will be called as `func(*func_args,**func_kwargs)`\n* `func_args`: optional positional arguments, default `()`\n* `func_kwargs`: optional keyword arguments, default `{}`\n* `lock`: optional lock, default an `RLock`\n* `state`: initial state, default from `self._state.initial_state`,\n  which is initally '`PENDING`'\n* `track`: default `False`;\n  if `True` then apply a callback for all states to print task transitions;\n  otherwise it should be a callback function suitable for `FSM.fsm_callback`\nOther arguments are passed to the `Result` initialiser.\n\nExample:\n\n    t1 = Task(name=\"task1\")\n    t1.bg(time.sleep, 10)\n    t2 = Task(name=\"task2\")\n    # prevent t2 from running until t1 completes\n    t2.require(t1)\n    # try to run sleep(5) for t2 immediately after t1 completes\n    t1.notify(t2.call, sleep, 5)\n\nUsers wanting more immediate semantics can supply\n`cancel_on_exception` and/or `cancel_on_result` to control\nthese behaviours.\n\nExample:\n\n    t1 = Task(name=\"task1\")\n    t1.bg(time.sleep, 2)\n    t2 = Task(name=\"task2\")\n    # prevent t2 from running until t1 completes\n    t2.require(t1)\n    # try to run sleep(5) for t2 immediately after t1 completes\n    t1.notify(t2.call, sleep, 5)\n\n## Class `TaskError(cs.fsm.FSMError, builtins.Exception, builtins.BaseException)`\n\nRaised by `Task` related errors.\n\n## Class `TaskQueue`\n\nA task queue for managing and running a set of related tasks.\n\nUnlike `make` and `Task.make`, this is aimed at a \"dispatch\" worker\nwhich dispatches individual tasks as required.\n\nExample 1, put 2 dependent tasks in a queue and run:\n\n     >>> t1 = Task(\"t1\", lambda: print(\"t1\"))\n     >>> t2 = t1.then(\"t2\", lambda: print(\"t2\"))\n     >>> q = TaskQueue(t1, t2)\n     >>> for _ in q.run(): pass\n     ...\n     t1\n     t2\n\nExample 2, put 1 task in a queue and run.\nThe queue only runs the specified tasks:\n\n     >>> t1 = Task(\"t1\", lambda: print(\"t1\"))\n     >>> t2 = t1.then(\"t2\", lambda: print(\"t2\"))\n     >>> q = TaskQueue(t1)\n     >>> for _ in q.run(): pass\n     ...\n     t1\n\nExample 2, put 1 task in a queue with `run_dependent_tasks=True` and run.\nThe queue pulls in the dependencies of completed tasks and also runs those:\n\n     >>> t1 = Task(\"t1\", lambda: print(\"t1\"))\n     >>> t2 = t1.then(\"t2\", lambda: print(\"t2\"))\n     >>> q = TaskQueue(t1, run_dependent_tasks=True)\n     >>> for _ in q.run(): pass\n     ...\n     t1\n     t2\n\n*Method `TaskQueue.__init__(self, *tasks, run_dependent_tasks=False)`*:\nInitialise the queue with the supplied `tasks`.\n\n# Release Log\n\n\n\n*Release 20230401*:\nAdd missing requirement to DISTINFO.\n\n*Release 20230331*:\n* Task: subclass BaseTask instead of (FSM, RunStateMixin).\n* BaseTask.__init__: use @uses_runstate to ensure we've got a RunState.\n\n*Release 20230217*:\nTask: subclass HasThreadState, drop .current_task() class method.\n\n*Release 20221207*:\n* Pull out core stuff from Task into BaseTask, aids subclassing.\n* BaseTask: explainatory docustring about unusual FSM_DEFAULT_STATE design choice.\n* BaseTask.tasks_as_dot: express the edges using the node ids instead of their labels.\n* BaseTask: new tasks_as_svg() method like tasks_as_dot() but returning SVG.\n\n*Release 20220805*:\nInitial PyPI release.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.taskqueue",
    "package_url": "https://pypi.org/project/cs.taskqueue/",
    "platform": null,
    "project_url": "https://pypi.org/project/cs.taskqueue/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all",
      "URL": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.taskqueue/20230401/",
    "requires_dist": [
      "cs.deco (>=20230331)",
      "cs.fsm (>=20221118)",
      "cs.gvutils (>=20221207)",
      "cs.logutils (>=20230212)",
      "cs.pfx (>=20230331)",
      "cs.py.func (>=20230331)",
      "cs.queues (>=20230331)",
      "cs.resources (>=20230331)",
      "cs.result (>=20230331)",
      "cs.seq (>=20221118)",
      "cs.threads (>=20230331)",
      "cs.typingutils (>=20230331)",
      "icontract",
      "typeguard"
    ],
    "requires_python": "",
    "summary": "A general purpose Task and TaskQueue for running tasks with dependencies and failure/retry, potentially in parallel.",
    "version": "20230401",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17538237,
  "releases": {
    "20220805": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ba20bcd143f91aed191a765b53f02b2fea5a767aeb4688ce11c5d449cf12d91",
          "md5": "4f7d1ef2bab6e11ab2b1e4008b0f04b5",
          "sha256": "22d025108771cfdaf37f84fac6a2e5902baa9c7474d3869f30d79e852eb011a1"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20220805-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f7d1ef2bab6e11ab2b1e4008b0f04b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12887,
        "upload_time": "2022-08-05T00:37:54",
        "upload_time_iso_8601": "2022-08-05T00:37:54.185303Z",
        "url": "https://files.pythonhosted.org/packages/0b/a2/0bcd143f91aed191a765b53f02b2fea5a767aeb4688ce11c5d449cf12d91/cs.taskqueue-20220805-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f1d61276e10f7f1a0c137ae059ae367bf947de81007f50cb890a3b1e294dfcc",
          "md5": "be5692c55517a70772ff8b54d4b44b6f",
          "sha256": "e4c0863a5dc576c053edfd438f3d8f7f56b2433a61e8950c457059cf6df94ebe"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20220805.tar.gz",
        "has_sig": false,
        "md5_digest": "be5692c55517a70772ff8b54d4b44b6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15292,
        "upload_time": "2022-08-05T00:37:56",
        "upload_time_iso_8601": "2022-08-05T00:37:56.544906Z",
        "url": "https://files.pythonhosted.org/packages/7f/1d/61276e10f7f1a0c137ae059ae367bf947de81007f50cb890a3b1e294dfcc/cs.taskqueue-20220805.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20221207": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd3db4a2592d5a30e5123f9423f0af86b3eda0333409ef031f1c17349db89a84",
          "md5": "de4ab83e8fa4e71c4e0f7b68fc58ba09",
          "sha256": "c63b833659e227ba86c6c629525729c6b20518793479041b87117e9ed169a8fa"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20221207-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de4ab83e8fa4e71c4e0f7b68fc58ba09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13743,
        "upload_time": "2022-12-07T03:10:41",
        "upload_time_iso_8601": "2022-12-07T03:10:41.645899Z",
        "url": "https://files.pythonhosted.org/packages/cd/3d/b4a2592d5a30e5123f9423f0af86b3eda0333409ef031f1c17349db89a84/cs.taskqueue-20221207-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0913b21c02c634ffc3bb19a6fa43a005468fb33f076acab1b21b8917179c6abd",
          "md5": "922996a32626d900f2d03c39de804985",
          "sha256": "92180bc1146084024690a1f40fa4671b894034ebd47ea203912bfba4caf65b75"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20221207.tar.gz",
        "has_sig": false,
        "md5_digest": "922996a32626d900f2d03c39de804985",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16760,
        "upload_time": "2022-12-07T03:10:43",
        "upload_time_iso_8601": "2022-12-07T03:10:43.223710Z",
        "url": "https://files.pythonhosted.org/packages/09/13/b21c02c634ffc3bb19a6fa43a005468fb33f076acab1b21b8917179c6abd/cs.taskqueue-20221207.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230217": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6e6ef5f97b1f6ca41d83ff9626f14b145cc7e1a6182f7d48cbf971dce0cc26b",
          "md5": "df542aaeb082ae5cf3d709a9ad860d60",
          "sha256": "75a1feb3408ad32aa58f163ad05eb972901a6ac2a376fb347c53b1f0a23e1d1b"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20230217-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df542aaeb082ae5cf3d709a9ad860d60",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13731,
        "upload_time": "2023-02-17T01:04:12",
        "upload_time_iso_8601": "2023-02-17T01:04:12.185185Z",
        "url": "https://files.pythonhosted.org/packages/d6/e6/ef5f97b1f6ca41d83ff9626f14b145cc7e1a6182f7d48cbf971dce0cc26b/cs.taskqueue-20230217-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1462f6c51f4df75ade16c985d154134107b7bda9a5cd7b6f932a6c05c0c94fa3",
          "md5": "a463540db3777c11f51f76c28194dc21",
          "sha256": "e5302f29f5703fce57e69aa61825bc40cc8e7d82ebb3bae5edcd163c1783afd1"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20230217.tar.gz",
        "has_sig": false,
        "md5_digest": "a463540db3777c11f51f76c28194dc21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16731,
        "upload_time": "2023-02-17T01:04:14",
        "upload_time_iso_8601": "2023-02-17T01:04:14.144798Z",
        "url": "https://files.pythonhosted.org/packages/14/62/f6c51f4df75ade16c985d154134107b7bda9a5cd7b6f932a6c05c0c94fa3/cs.taskqueue-20230217.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230331": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14e88ebf82d4067afd12fe039fa0bc30a2ee759b216c128ead53e82fe89f5dcd",
          "md5": "64177f7497a52df1585c9a66bcce9300",
          "sha256": "3e872824d5472e8446b18b10b67e4d0eaca6ea811bcaba984bfcba66f8b75a3c"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20230331-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64177f7497a52df1585c9a66bcce9300",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13124,
        "upload_time": "2023-03-31T10:29:17",
        "upload_time_iso_8601": "2023-03-31T10:29:17.203794Z",
        "url": "https://files.pythonhosted.org/packages/14/e8/8ebf82d4067afd12fe039fa0bc30a2ee759b216c128ead53e82fe89f5dcd/cs.taskqueue-20230331-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a19688686be0e29f9e89f4814c72acd2fdf3f5fd9cc32ec4cb049c4963166991",
          "md5": "303a99c30b61ba08fbe3a4f3de563065",
          "sha256": "7fe25d7596943a7770d1fa68594c9e5eca9cb89aa2ae1c4ae164626cbc10f5b3"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20230331.tar.gz",
        "has_sig": false,
        "md5_digest": "303a99c30b61ba08fbe3a4f3de563065",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15258,
        "upload_time": "2023-03-31T10:29:19",
        "upload_time_iso_8601": "2023-03-31T10:29:19.264237Z",
        "url": "https://files.pythonhosted.org/packages/a1/96/88686be0e29f9e89f4814c72acd2fdf3f5fd9cc32ec4cb049c4963166991/cs.taskqueue-20230331.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230401": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c238172e9c226010633f34bb849b1ffca243a775bbb44d72c883e0327ebff831",
          "md5": "78adc9d23d0ba61d809affba1e13a610",
          "sha256": "682f46a5b50af25ff29add8ed346dda5a5eb07191ce433f418c97005434d6a85"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20230401-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78adc9d23d0ba61d809affba1e13a610",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13171,
        "upload_time": "2023-04-01T08:48:24",
        "upload_time_iso_8601": "2023-04-01T08:48:24.248818Z",
        "url": "https://files.pythonhosted.org/packages/c2/38/172e9c226010633f34bb849b1ffca243a775bbb44d72c883e0327ebff831/cs.taskqueue-20230401-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "508aae0c1a0f0a39aef9d729b8ea2051f7b5c5d8be96254c44b8e47ca7e05730",
          "md5": "80bcf2bf99ec3ce16b343360f38ba4ba",
          "sha256": "bf819d8bdcc36e6b92b4341460b25153c970671c6b40840e5c1dc601fac61cf0"
        },
        "downloads": -1,
        "filename": "cs.taskqueue-20230401.tar.gz",
        "has_sig": false,
        "md5_digest": "80bcf2bf99ec3ce16b343360f38ba4ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15328,
        "upload_time": "2023-04-01T08:48:26",
        "upload_time_iso_8601": "2023-04-01T08:48:26.207020Z",
        "url": "https://files.pythonhosted.org/packages/50/8a/ae0c1a0f0a39aef9d729b8ea2051f7b5c5d8be96254c44b8e47ca7e05730/cs.taskqueue-20230401.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c238172e9c226010633f34bb849b1ffca243a775bbb44d72c883e0327ebff831",
        "md5": "78adc9d23d0ba61d809affba1e13a610",
        "sha256": "682f46a5b50af25ff29add8ed346dda5a5eb07191ce433f418c97005434d6a85"
      },
      "downloads": -1,
      "filename": "cs.taskqueue-20230401-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "78adc9d23d0ba61d809affba1e13a610",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13171,
      "upload_time": "2023-04-01T08:48:24",
      "upload_time_iso_8601": "2023-04-01T08:48:24.248818Z",
      "url": "https://files.pythonhosted.org/packages/c2/38/172e9c226010633f34bb849b1ffca243a775bbb44d72c883e0327ebff831/cs.taskqueue-20230401-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "508aae0c1a0f0a39aef9d729b8ea2051f7b5c5d8be96254c44b8e47ca7e05730",
        "md5": "80bcf2bf99ec3ce16b343360f38ba4ba",
        "sha256": "bf819d8bdcc36e6b92b4341460b25153c970671c6b40840e5c1dc601fac61cf0"
      },
      "downloads": -1,
      "filename": "cs.taskqueue-20230401.tar.gz",
      "has_sig": false,
      "md5_digest": "80bcf2bf99ec3ce16b343360f38ba4ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15328,
      "upload_time": "2023-04-01T08:48:26",
      "upload_time_iso_8601": "2023-04-01T08:48:26.207020Z",
      "url": "https://files.pythonhosted.org/packages/50/8a/ae0c1a0f0a39aef9d729b8ea2051f7b5c5d8be96254c44b8e47ca7e05730/cs.taskqueue-20230401.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}