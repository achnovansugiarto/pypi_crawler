{
  "info": {
    "author": "Gael Martinet",
    "author_email": "gael@flux.audio",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# ADM-OSC\nAn industry initiative to standardization of Object Based Audio (OBA) positioning data in live production ecosystems, by implementing the Audio Definition Model (ADM) over Open Sound Control (OSC).\n\n## Project Originators\n\n[L-Acoustics](https://www.l-acoustics.com/), [FLUX::SE](https://www.flux.audio/), [Radio-France](https://www.radiofrance.com/innovation-nouveaux-formats)\n\n## Project Contributors\nd&b Audiotechnik, DiGiCo, Lawo, Magix, Merging Technologies, Meyer Sound, Steinberg.\n\n## Context\nImmersive audio is gaining ground in different industries, from music streaming to gaming, from live sound to broadcast. [ADM](https://adm.ebu.io/) or Audio Definition Model, is becoming a popular standard metadata model in some of these industries, with serialADM used in broadcast or ADM bwf or xml files used in the studio.\n\n## Motivation and goals\n* To facilitate the sharing of audio objects metadata between a live ecosystem and a broadcast or studio ecosystem.\n* To define a basic layer of interoperability between Object Editors and Object renderers while not aiming at replacing more complete manufacturer specific protocols or grammars.\n* To define a direct translation of the most relevant ADM Object Properties onto a communication protocol widely used in the live industry, [OSC](http://opensoundcontrol.org/introduction-osc).\n* Keeping the grammar scope aligned with the ADM properties.\n* Share this proposal with the EBU so they can become a relay, publish and support this initiative.\n* Extend this small grammar to more ADM properties (beds, etc.) in the future.\n\n## Approach\nBijective mapping of the Object subset of ADM with a standard OSC grammar.\n\n## Why OSC ?\n* Lightweight network protocol\n* Easy to implement\n* Human readable\n* Supports wildcards and bundles\n* Specification: [Open Sound Control website](http://opensoundcontrol.org/)\n* Available in a plethora of professional audio hardware and software devices\n\n## General principles\n* Sender (client)\n  * Object Editor sending positioning data to one or more receivers.\n  * Position data is always normalized \n* Receiver (server)\n  * Handles the (optional) local scaling of normalized data: x, y, z, distance\n  * The receiver can be a DAW, an ADM renderer, an object editor, a bridge (ADM-OSC <-> sADM)\n  \n## Current status\nThe current dictionary covers most Object properties from the Audio Definition model.\nA more complete dictionary is being discussed to cover the remaining parts of the Audio Definition model.\nOSC Live test tool (talker and listener OSC Live test tool) is now available.\n\n## Current Specification\nSee Repository.\n\n## Current Discussions\nSee Issues.\n\n## Current development & tests tools\n\n+ [**Specifications**](https://github.com/immersive-audio-live/ADM-OSC/blob/main/Source/ADM-OSC%20Specification.xlsx)\n\n\n+ Tester **Desktop application** (Jose Gaudin / Meyer Sound)\n  + [download from resources directory](https://github.com/immersive-audio-live/ADM-OSC/tree/main/Resources)\n  \n\n+ Validator, Test and Stress Test **Python Module** (Gael Martinet / FLUX:: SE)\n  + adm_osc module is available to install through pip : \n  ```shell \n    python3 -m pip install adm_osc\n    ```\n  quick examples:\n\n  ```python \n     from adm_osc import OscClientServer\n  \n     # create a basic client/server that implement basic ADM-OSC communication with stable parameters \n     # + command monitoring and analyze\n     cs = OscClientServer(address='127.0.0.1', out_port=9000, in_port=9001)\n\n     # send some individual parameters  \n     cs.send_object_position_azimuth(object_number=1, v=-30.0)\n     cs.send_object_position_elevation(object_number=1, v=0.0)\n     cs.send_object_position_distance(object_number=1, v=2.0)\n\n     # or pack them\n     cs.send_object_polar_position(object_number=1, pos=[-30.0, 0.0, 2.0])\n  \n     # in cartesian coordinates\n     cs.send_object_cartesian_position(object_number=1, pos=[-5.0, 8.0, 0.0])\n  \n     # see documentation for full list of available functions\n  \n     # when receiving an adm osc command its analyze will be printed on the command output window\n     #\n     # e.g.\n     #\n     # >> received valid adm message for obj :: 1 :: gain (0.7943282127380371)\n     # >> received valid adm message for obj :: 1 :: position aed (20.33701515197754, 0.0, 0.8807612657546997)\n     # >> received valid adm message for obj :: 1 :: position xyz (-0.2606865465641022, 0.8273822069168091, 0.0)\n     # >>\n     # >> ERROR: unrecognized ADM address : \"/adm/obj/1/bril\" ! unknown command \"/bril/\"\n     # >> ERROR: arguments are malformed for \"/adm/obj/1/gain :: (1.4791083335876465,)\":\n     # >>     argument 0 \"1.4791083335876465\" out of range ! it should be less or equal than \"1.0\"\n  \n     ```\n  \n  ```python \n     from adm_osc import TestClient\n     # create a test client, assume default address (local: '127.0.0.1')\n     # test client can be used to test how receiver will handle all kind of parameters and parameters value range\n     sender = TestClient(out_port=9000)\n  \n     # all stable parameters for a specific object\n     sender.set_object_stable_parameters_to_minimum(object_number=1)\n     sender.set_object_stable_parameters_to_maximum(object_number=1)\n     sender.set_object_stable_parameters_to_default(object_number=1)\n     sender.set_object_stable_parameters_to_random(object_number=1)\n  \n     # all stable parameters for a range of objects\n     sender.set_objects_stable_parameters_minimum(objects_range=range(1, 64))\n     sender.set_objects_stable_parameters_maximum(objects_range=range(1, 64))\n     sender.set_objects_stable_parameters_default(objects_range=range(1, 64))\n     sender.set_objects_stable_parameters_random(objects_range=range(1, 64))\n  \n     # all stable parameters for all objects\n     sender.set_all_objects_stable_parameters_minimum()\n     sender.set_all_objects_stable_parameters_maximum()\n     sender.set_all_objects_stable_parameters_default()\n     sender.set_all_objects_stable_parameters_random()\n  \n     # see documentation for full list of available functions\n     ```\n    \n  ```python \n    from adm_osc import StressClient\n    # create a stress client, assume default address (local: '127.0.0.1')\n    # stress client will send huge amount of data to stress test the receivers\n    sender = StressClient(out_port=9000)\n    # do stress test in cartesian coordinates\n    sender.stress_cartesian_position(number_of_objects=64, duration_in_second=60.0, interval_in_milliseconds=10.0)\n    # do stress test in polar coordinates\n    sender.stress_polar_position(number_of_objects=64, duration_in_second=60.0, interval_in_milliseconds=10.0)\n    ```\n  + [full documentation](Source/adm_osc/doc/documentation.md).\n  + [Source directory](https://github.com/immersive-audio-live/ADM-OSC/tree/main/Source)\n\n## Currently supported in:\nSPAT Revolution (FLUX::SE), L-ISA Controller (L-Acoustics), Ovation (Merging Technologies), Nuendo (Steinberg), SpaceMap Go (Meyer Sound), QLAB 5 (Figure 53), Space Controller (Sound Particles).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/immersive-audio-live/ADM-OSC",
    "keywords": "adm,osc,clientServer,validation,tests,stress,setuptools,development",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adm-osc",
    "package_url": "https://pypi.org/project/adm-osc/",
    "platform": null,
    "project_url": "https://pypi.org/project/adm-osc/",
    "project_urls": {
      "Bug Reports": "https://github.com/immersive-audio-live/ADM-OSC/issues",
      "Homepage": "https://github.com/immersive-audio-live/ADM-OSC",
      "Source": "https://github.com/immersive-audio-live/ADM-OSC/"
    },
    "release_url": "https://pypi.org/project/adm-osc/0.0.1/",
    "requires_dist": [
      "peppercorn",
      "python-osc",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "ADM-OSC client/server Python module for ADM-OSC protocol validation, tests and stress",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15183986,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "def31ce2262d94f6800f167a42205a5c53302fd25b96dee1e941356608f17837",
          "md5": "6c4dae566634ea961f798b4fac41c7a5",
          "sha256": "c746af2db56cb368f02f5989283b0678a0346737aa8407f1e9f5aecc65f26fee"
        },
        "downloads": -1,
        "filename": "adm_osc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c4dae566634ea961f798b4fac41c7a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 20205,
        "upload_time": "2022-09-22T22:47:19",
        "upload_time_iso_8601": "2022-09-22T22:47:19.849289Z",
        "url": "https://files.pythonhosted.org/packages/de/f3/1ce2262d94f6800f167a42205a5c53302fd25b96dee1e941356608f17837/adm_osc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d4c15fe9bfbe88d76568cb6462282bcac0d0f45af8ff2b3a87901826b66b1a8",
          "md5": "4d82d3f196032a14ebc22aee4c61c2ba",
          "sha256": "f932c3348482b5f8dcc81ccaa215786f5ba9e5d4cad82138a3fea43736725371"
        },
        "downloads": -1,
        "filename": "adm_osc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d82d3f196032a14ebc22aee4c61c2ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 19173,
        "upload_time": "2022-09-22T22:47:21",
        "upload_time_iso_8601": "2022-09-22T22:47:21.457428Z",
        "url": "https://files.pythonhosted.org/packages/5d/4c/15fe9bfbe88d76568cb6462282bcac0d0f45af8ff2b3a87901826b66b1a8/adm_osc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "def31ce2262d94f6800f167a42205a5c53302fd25b96dee1e941356608f17837",
        "md5": "6c4dae566634ea961f798b4fac41c7a5",
        "sha256": "c746af2db56cb368f02f5989283b0678a0346737aa8407f1e9f5aecc65f26fee"
      },
      "downloads": -1,
      "filename": "adm_osc-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c4dae566634ea961f798b4fac41c7a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 20205,
      "upload_time": "2022-09-22T22:47:19",
      "upload_time_iso_8601": "2022-09-22T22:47:19.849289Z",
      "url": "https://files.pythonhosted.org/packages/de/f3/1ce2262d94f6800f167a42205a5c53302fd25b96dee1e941356608f17837/adm_osc-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d4c15fe9bfbe88d76568cb6462282bcac0d0f45af8ff2b3a87901826b66b1a8",
        "md5": "4d82d3f196032a14ebc22aee4c61c2ba",
        "sha256": "f932c3348482b5f8dcc81ccaa215786f5ba9e5d4cad82138a3fea43736725371"
      },
      "downloads": -1,
      "filename": "adm_osc-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4d82d3f196032a14ebc22aee4c61c2ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 19173,
      "upload_time": "2022-09-22T22:47:21",
      "upload_time_iso_8601": "2022-09-22T22:47:21.457428Z",
      "url": "https://files.pythonhosted.org/packages/5d/4c/15fe9bfbe88d76568cb6462282bcac0d0f45af8ff2b3a87901826b66b1a8/adm_osc-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}