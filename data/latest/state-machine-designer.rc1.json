{
  "info": {
    "author": "Hillerr",
    "author_email": "rafaelhiller23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# State Machine Designer\n\nA quick and simple state machine package to create your own states machine with Python\n\n## Installation\n\nClone the project and install it manually using:\n\n```shell\n$ pip install .\n```\n\n## Quick start\n\nBellow, you can find examples to create your State Machine as a object attribute or define sigle\nstates and iterate with them\n\n### State\n\nBefore starting using the State Machine object, we are going to demonstrate how you can create your own states.\n\n#### Decision Function\n\nFirst of all, all states must has a decision function, which is going to return the name of the next state, or, if nothing changes, the name of the current state.\n\n```python\nimport random\n\ndef decision_function():\n\n    # If number is even the next state will be \"state1\"\n    if int(random.randrange(10)) % 2 == 0:\n        return \"state1\"\n\n    # Otherwise \"state2\"\n    else:\n        return \"state2\"\n```\n\n#### Routine Function (optional)\n\nRoutine function is used to implement some verification or action every time that the State Machine\nis in this specific state,\n\n```python\ndef decision_function():\n    print(\"Doing my routine functions\")\n```\n\n#### Exit function (optional)\n\nExit function is a function or object method that will be executed when the State Machine is leaving that state.\n\n```python\ndef exit_function():\n    print(\"Bye bye state1\")\n```\n\n#### Entry function (optional)\n\nYou can add an entry function to each state. This functions will be performed just once, when the State Machine enter in this state.\n\n```python\ndef entry_function():\n    print(\"Hello state2\")\n```\n\n### State Machine\n\nOnce you have created your states, you can add them to the State Machine by passing the State object or creating states directly on the StateMachine. You can see how to do it using the examples bellow:\n\n```python\nfrom state_machine import State, StateMachine\n\ndef state1_decision_function():\n    # For simplicity, it will just return the next state\n    return \"state2\"\n\ndef state2_decision_function():\n    # For simplicity, it will just return the next state\n    return \"state1\"\n\ndef state1_routine_function():\n    print(\"State1 says: Doing my stuff\")\n\ndef state1_exit_function():\n    print(\"State1 says: See ya in the next time, StateMachine\")\n\ndef state1_entry_funcion():\n    print(\"State1 says: Hii, how is going, StateMachine?\")\n\ndef state2_routine_function():\n    print(\"State2 says: Doing my stuff\")\n\ndef state2_exit_function():\n    print(\"State2 says: See ya in the next time, StateMachine\")\n\ndef state2_entry_funcion():\n    print(\"State2 says: Hii, how is going, StateMachine?\")\n\n\nstate_machine = StateMachine()\n\n# Ex 1: Creating a State instance and adding to the State Machine\nstate1 = State(\n    name='state1',\n    decision_function=state1_decision_function,\n    routine_function=state1_routine_function,\n    exit_function=state1_exit_function,\n    entry_function=state1_entry_funcion\n)\n\nstate2 = State(\n    name='state2',\n    decision_function=state2_decision_function,\n    routine_function=state2_routine_function,\n    exit_function=state2_exit_function,\n    entry_function=state2_entry_funcion\n)\n\nstate_machine.add_states(state1, state2)\n\n# Ex 2: Creating a state with the State Machine (uncomment to use it)\n\"\"\"\nstate_machine.create_state(\n    state_name='state1',\n    decision_function=state1_decision_function,\n    routine_function=state1_routine_function,\n    exit_function=state1_exit_function,\n    entry_function=state1_entry_funcion\n)\n\"\"\"\n\n# Before running the State Machine, you shall define the initial state\nstate_machine.initial_state = 'state1'\n\n# Ok, we can run it\nprint(\"\\nFirst execution\")\nstate_machine.run()\n\nprint(\"\\nSecond execution\")\nstate_machine.run()\n```\n\nThe terminal output will be:\n\n```\nFirst execution\nState1 says: Hii, how is going, StateMachine?\nState1 says: Doing my stuff\nState1 says: See ya in the next time, StateMachine\n\nSecond execution\nState2 says: Hii, how is going, StateMachine?\nState2 says: Doing my stuff\nState2 says: See ya in the next time, StateMachine\n```\n\n## Integrating StateMachine with a Python Class\n\nThis package will be more useful when you integrate it with your python classes. The state functions\nwill be class methods and the State Machine will be an attribute. The sample code above show you how to do it:\n\n```python\nfrom state_machine import State, StateMachine\nfrom time import time, sleep\nfrom datetime import datetime\n\nclass TrafficLight:\n    red_timer_count = 10 # 10 seconds for red light\n    yellow_timer_count = 2 # 2 seconds for yellow light\n    green_timer_count = 5 # 5 seconds for green light\n\n\n    def __init__(self):\n        self.red = True\n        self.yellow = False\n        self.green = False\n        self.timer = 0\n\n        # Init the state machine\n        self.state_machine = StateMachine()\n\n        # Create the State Machine states\n\n        # Red light state\n        self.state_machine.create_state(\n            state_name='red',\n            decision_function=self.red_decision,\n            entry_function=self.red_entry,\n            exit_function=self.red_exit\n        )\n\n        # Green light state\n        self.state_machine.create_state(\n            state_name='green',\n            decision_function=self.green_decision,\n            entry_function=self.green_entry,\n            exit_function=self.green_exit\n        )\n\n        # Yellow light state\n        self.state_machine.create_state(\n            state_name='yellow',\n            decision_function=self.yellow_decision,\n            entry_function=self.yellow_entry,\n            exit_function=self.yellow_exit\n        )\n\n        # Define initial state\n        self.state_machine.initial_state = 'red'\n\n\n    def red_entry(self):\n        self.timer = time()\n        self.red = True\n        print(f'Timestamp: {datetime.now().isoformat()}\\tTraffic light state: {self.state_machine.current_state}')\n\n    def red_decision(self):\n        if time() - self.timer >= self.red_timer_count:\n            return 'green'\n        else:\n            return 'red'\n\n\n    def red_exit(self):\n        self.timer = 0\n        self.red = False \n\n\n    def green_entry(self):\n        self.timer = time()\n        self.green = True\n        print(f'Timestamp: {datetime.now().isoformat()}\\tTraffic light state: {self.state_machine.current_state}')\n\n\n    def green_decision(self):\n        if time() - self.timer >= self.green_timer_count:\n            return 'yellow'\n        else:\n            return 'green'\n\n\n    def green_exit(self):\n        self.timer = 0\n        self.green = False \n\n\n    def yellow_entry(self):\n        self.timer = time()\n        self.yellow = True\n        print(f'Timestamp: {datetime.now().isoformat()}\\tTraffic light state: {self.state_machine.current_state}')\n\n\n    def yellow_decision(self):\n        if time() - self.timer >= self.yellow_timer_count:\n            return 'red'\n        else:\n            return 'yellow'\n\n\n    def yellow_exit(self):\n        self.timer = 0\n        self.yellow = False \n\n\n    def start(self):\n        while True:\n            self.state_machine.run()\n            sleep(.1)\n\ntraffic_light = TrafficLight()\ntraffic_light.start()\n```\n\nTerminal output:\n\n```\nTimestamp: 2020-07-26T17:00:28.211277   Traffic light state: red\nTimestamp: 2020-07-26T17:00:38.344380   Traffic light state: green\nTimestamp: 2020-07-26T17:00:43.463914   Traffic light state: yellow\nTimestamp: 2020-07-26T17:00:45.571166   Traffic light state: red\nTimestamp: 2020-07-26T17:00:55.694119   Traffic light state: green\nTimestamp: 2020-07-26T17:01:00.812396   Traffic light state: yellow\nTimestamp: 2020-07-26T17:01:02.921871   Traffic light state: red\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Hillerr/state-machine-designer/archive/v0.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hillerr/state-machine-designer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "state-machine-designer",
    "package_url": "https://pypi.org/project/state-machine-designer/",
    "platform": "",
    "project_url": "https://pypi.org/project/state-machine-designer/",
    "project_urls": {
      "Download": "https://github.com/Hillerr/state-machine-designer/archive/v0.0.0.tar.gz",
      "Homepage": "https://github.com/Hillerr/state-machine-designer"
    },
    "release_url": "https://pypi.org/project/state-machine-designer/0.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "State machine designer and implementation package",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7791601,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20f80e6dcbe9837431edb8e88695ef95d31977c39563be0b0b667e2c4cf7f560",
          "md5": "9b14e3873a806e620d3c08b97723aa6d",
          "sha256": "eaa2b45cbb86c2ed9f6376382138a89aad86452bfa4964f4efb92642ed8f9a1d"
        },
        "downloads": -1,
        "filename": "state_machine_designer-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b14e3873a806e620d3c08b97723aa6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11648,
        "upload_time": "2020-07-26T21:21:12",
        "upload_time_iso_8601": "2020-07-26T21:21:12.054959Z",
        "url": "https://files.pythonhosted.org/packages/20/f8/0e6dcbe9837431edb8e88695ef95d31977c39563be0b0b667e2c4cf7f560/state_machine_designer-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20f80e6dcbe9837431edb8e88695ef95d31977c39563be0b0b667e2c4cf7f560",
        "md5": "9b14e3873a806e620d3c08b97723aa6d",
        "sha256": "eaa2b45cbb86c2ed9f6376382138a89aad86452bfa4964f4efb92642ed8f9a1d"
      },
      "downloads": -1,
      "filename": "state_machine_designer-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b14e3873a806e620d3c08b97723aa6d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11648,
      "upload_time": "2020-07-26T21:21:12",
      "upload_time_iso_8601": "2020-07-26T21:21:12.054959Z",
      "url": "https://files.pythonhosted.org/packages/20/f8/0e6dcbe9837431edb8e88695ef95d31977c39563be0b0b667e2c4cf7f560/state_machine_designer-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}