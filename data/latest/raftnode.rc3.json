{
  "info": {
    "author": "Shrinivas Vijay Deshmukh",
    "author_email": "shrinivas.deshmukh11@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "========\nraftnode\n========\n\n\n.. image:: https://img.shields.io/pypi/v/raftnode.svg\n        :target: https://pypi.python.org/pypi/raftnode\n\n.. image:: https://readthedocs.org/projects/raftnode/badge/?version=latest\n        :target: https://raftnode.readthedocs.io/en/latest/?version=latest\n        :alt: Documentation Status\n\n\n\n\nRAFT consensus algorithm implementation\n\n* Free software: MIT license\n* Documentation: https://raftnode.readthedocs.io.\n\nOverview\n--------\n`raftnode` is a fault tolerant distributed metastore based on RAFT consensus algorithm. It supports storing data in-memory\nand storing data in rocksdb_ database\n\n.. _rocksdb: https://rocksdb.org/\n\nIt let's you save the state of your application. Like configurations, web application sessions, or any kind of data you want to cache for faster retrieval. In a way, it's like distributed python dictionary.\n\n**Few core features are:**\n\n* **High availability:** data can be read, even in case of node failures (thanks to the RAFT consensus)\n\n* **Replication:** every data is replicated across machines\n\n* **Stateful-ness:** raftnode maintains a log which is basically sequence of commands as they come in. For example: the cluster gets 2 data insert operations, they will be logged in the exact sequence of their arrival, across the cluster\n\n* **Namespaces:** you can have different isolated categories(namespaces) to store different types of information/configurations. For example: for user sessions, you can have a namespace say 'sessions' that will hold just the session data And another namespace 'configuration' that will hold configurations like database address, microservice address, etc\n\n* **Consistency:** (thanks to RAFT consensus) I've tried to maintain data Consistency. In case of leader node failure, data insertions are halted until new leader node is elected (the time is few ms)\n\n* **Bring-your-own-client:** using raftnode, you can start the distributed cluster. To interact with it, you have the ability to write your own client using nodejs or scala or python or any language of your choice. There's no language binding here.\n\n* **Scaling:** the nodes in the cluster can be added or removed at will.\n\n**When use distributed key value stores?**\n\nWhenever your application needs lots of small continuous reads and writes. For example: ecommerce cart items, product recommendations, microservice address, database configurations , etc.\n\nraftnode is similar to redis or etcd. raftnode also lets you write your own client instead of using redis or etcd libraries.\n\nHere are few links for further reference:\n\n* https://redislabs.com/nosql/key-value-databases/\n\n* https://hazelcast.com/glossary/key-value-store/\n\n* https://www.kdnuggets.com/2021/04/nosql-explained-understanding-key-value-databases.html\n\n**What is the library's future potential?**\n\nCurrently, it let's you insert/update key-values, but not delete. It does not have support for snapshots or scheduled backup to some external storage like s3 (I'm not sure of its required). So a few updates in the near future are:\n\n* Add snapshot-ing\n\n* (May be) add probabilistic data structures like hyperloglog and bloom filters\n\n* An authentication mechanism to verify the identity of the nodes\n\nInstallation\n------------\n\nBy default, raftnode stores the data in memory. To install the vanilla version, follow these steps:\n\n.. code-block:: console\n\n        pip install raftnode\n\nA persistent database can be used instead of the in-memory data storage. By default, raftnode uses rocksdb. To install this version of raftnode, follow these instructions:\n\n.. code-block:: console\n\n        pip install raftnode[rocksdb]\n\nBasic Usage\n-----------\n\n* Use in memory data store:\n\n.. code-block:: console\n\n        raftnode --ip <MY_IP:MY_PORT> --peers <PEER1:PORT1>,<PEER2:PORT2>,...,<PEERn:PORTn>\n\n* ...OR use rocksdb database:\n\n.. code-block:: console\n\n        raftnode --ip <MY_IP:MY_PORT> --peers <PEER1:PORT1>,<PEER2:PORT2>,...,<PEERn:PORTn> --store database --volume <DIRECTORY TO STORE THE DATABASE>\n\n**For detailed command line reference, click** `cli usage`_\n\n.. _`cli usage`: https://raftnode.readthedocs.io/en/latest/cli.html\n\n**For detailed usage, click** `client usage`_\n\n.. _`client usage`: https://raftnode.readthedocs.io/en/latest/usage.html\n\nFor more detailed CLI instructions:\n===================================\n\n.. code-block:: console\n\n        raftnode --help\n\nFeatures\n--------\n\n* TODO\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2021-07-21)\n------------------\n\n* First release on PyPI.\n\n0.1.1 (2021-07-26)\n------------------\n\n* Put data into the key store\n* Get data from the key store\n* Create different namespaces for storing unique set of configurations\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shrinivdeshmukh/raftnode",
    "keywords": "raftnode",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "raftnode",
    "package_url": "https://pypi.org/project/raftnode/",
    "platform": "",
    "project_url": "https://pypi.org/project/raftnode/",
    "project_urls": {
      "Homepage": "https://github.com/shrinivdeshmukh/raftnode"
    },
    "release_url": "https://pypi.org/project/raftnode/0.1.2/",
    "requires_dist": [
      "fabulous (==0.4.0)",
      "rocksdb (==0.7.0) ; extra == 'rocksdb'"
    ],
    "requires_python": ">=3.6",
    "summary": "RAFT consensus algorithm implementation",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11080449,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "625457cdab6350380af9b002b066e836be3a36d80b88c3f87f6cb54af050da7d",
          "md5": "c5daf1bd23fb9e2a17ecaabe30c89d89",
          "sha256": "61a47980984b06795780c09e94be645ac25fb9a662302129c9855d01b585d4ee"
        },
        "downloads": -1,
        "filename": "raftnode-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5daf1bd23fb9e2a17ecaabe30c89d89",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 16216,
        "upload_time": "2021-07-22T06:19:15",
        "upload_time_iso_8601": "2021-07-22T06:19:15.658386Z",
        "url": "https://files.pythonhosted.org/packages/62/54/57cdab6350380af9b002b066e836be3a36d80b88c3f87f6cb54af050da7d/raftnode-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b1a0d3733048d03d8e72d6109bb19c783d69922f74f4cc122b78256722e62c",
          "md5": "575b581ae60bb735b04f85c74a0e9f8e",
          "sha256": "eede6c8c39206d7b2569789d7cdc92c5fa2afdb573af81718ddd50a1e82408bc"
        },
        "downloads": -1,
        "filename": "raftnode-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "575b581ae60bb735b04f85c74a0e9f8e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 16464,
        "upload_time": "2021-07-24T12:30:04",
        "upload_time_iso_8601": "2021-07-24T12:30:04.317932Z",
        "url": "https://files.pythonhosted.org/packages/b7/b1/a0d3733048d03d8e72d6109bb19c783d69922f74f4cc122b78256722e62c/raftnode-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d70dda4063dcaf343506ce608782b7d5224740d7a3bdaf596e98d47348d625f6",
          "md5": "deb167e34197b98afa1b5ac4d3f9e8d4",
          "sha256": "84beee5ae110d22bdd6931a031c7d4d0b7f89d2ec81f9f3c128479b764a0cd24"
        },
        "downloads": -1,
        "filename": "raftnode-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "deb167e34197b98afa1b5ac4d3f9e8d4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 19402,
        "upload_time": "2021-08-03T14:55:47",
        "upload_time_iso_8601": "2021-08-03T14:55:47.829056Z",
        "url": "https://files.pythonhosted.org/packages/d7/0d/da4063dcaf343506ce608782b7d5224740d7a3bdaf596e98d47348d625f6/raftnode-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d70dda4063dcaf343506ce608782b7d5224740d7a3bdaf596e98d47348d625f6",
        "md5": "deb167e34197b98afa1b5ac4d3f9e8d4",
        "sha256": "84beee5ae110d22bdd6931a031c7d4d0b7f89d2ec81f9f3c128479b764a0cd24"
      },
      "downloads": -1,
      "filename": "raftnode-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "deb167e34197b98afa1b5ac4d3f9e8d4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 19402,
      "upload_time": "2021-08-03T14:55:47",
      "upload_time_iso_8601": "2021-08-03T14:55:47.829056Z",
      "url": "https://files.pythonhosted.org/packages/d7/0d/da4063dcaf343506ce608782b7d5224740d7a3bdaf596e98d47348d625f6/raftnode-0.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}