{
  "info": {
    "author": "Andrew Leech",
    "author_email": "andrew@alelec.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Structured Config for Micropython\n=================================\n\nA configuration module for python where the config structure is solely\ndefined in python with automatic reading & writing to disk and field\nvalidation.\n\nThis package provides a micropython port of\nhttps://gitlab.com/alelec/structured\\_config with support for json\nstorage files.\n\nBackground\n----------\n\nThere are lots of different modules and formats available for creating\nconfiguration files in a python project.\n\nAll of the ones I've used in the past have one main limitations in\ncommon however; the primary definition of the configuration elements it\neither not written in python, or it's written in something like a python\ndict where you don't get particularly good static inspection of\nelements.\n\nI personally like to do my python development in a smart ide like\npycharm where I can take full advantage of inspection and\nauto-completion. If your config is not written in python however, I\ndon't get to do this.\n\nIf you want any kind of introspection of config files, you end up having\nsome kind of python parser of the config file with all the configuration\nelements repeated in both the default template and in some kind of\nmirror class. This module aims to remove this limitation.\n\nRequirements\n------------\n\n``structured_config`` depends on some features included in micropython\nv1.13 so you'll want to be using that at a minimum.\n\nIt also needs the ``MICROPY_PY_DELATTR_SETATTR`` build setting enabled.\nThis is included by default on stm32 port, but for other ports you will\nneed a custom build with this enabled.\n\nBasic Usage\n-----------\n\nWith ``structured_config``, your ``config.py`` file in your project can\nbe something like:\n\n::\n\n    from structured_config import ConfigFile, Structure\n\n    class Config(Structure):\n\n        class server(Structure):\n            url = 'https:www.example.com'\n            username = '<user>'\n            password = '<password>'\n\n\n        # Max number of tcp connections at any one time\n        concurrent_connections =  32\n\n        # Local service port\n        service_port = 45080\n\n\n    config = Config('/path/to/config.json')\n\nAny other modules in your project can then simply\n\n::\n\n    from config import config\n\n    import requests\n    from requests.auth import HTTPBasicAuth\n\n    r = requests.get(config.server.url, auth=HTTPBasicAuth(config.server.username, config.server.password))\n\nand so on. Your IDE should give you full autocomplete on all these\nelements, becuase as far as it knows your config is a normal class with\nnormal static attributes. If you want to change these config items in\ncode it's as simple as setting the attribute\n\n::\n\n    from config import config\n\n    config.concurrent_connections = 64\n\n    config.__save__()\n\nThat's it. The config is written to disk in the json file pointed to in\nConfig() instantiation\n\nLists of elements\n-----------------\n\nIf you want a slightly more complex config file with a list of elements,\nthis can be handled too\n\n::\n\n    import structured_config\n    from structured_config import Structure, ConfigFile\n\n    # Pre-define the object we want to store a list of.\n    class Map(Structure):\n        remote_path = None\n        local_path = None\n\n\n    # Default configuration for the application\n    class Config(Structure):\n\n        class server(Structure):\n            url = 'https:www.example.com'\n            username = '<user>'\n            password = '<password>'\n\n        mapping = [\n            Map(\n                remote_path=\"/test/\",\n                local_path=\"~/test/\"\n            ),\n            Map(\n                remote_path=\"/one/\",\n                local_path=\"~/two/\"\n            ),\n            Map(\n                remote_path=\"/two/\",\n                local_path=\"~/one/\"\n            )\n        ]\n\n    config = Config('config.json')\n\nYour main code can access the Map items in the list by all the normal\nmeans. if you append() new ones onto the list or pop() old ones off the\nlist, the config will automatically write them to disk. Same goes for\nediting either of the attributes in any of the Map objects that have\nbeen added to the list.\n\nThe type of element added to the list can be enforced / validated too,\neg\n\n::\n\n    import structured_config\n    from structured_config import Structure, ConfigFile, List\n\n    # Pre-define the object we want to store a list of.\n    class Map(Structure):\n        remote_path = None\n        local_path = None\n\n\n    # Default configuration for the application\n    class Config(Structure):\n\n        class server(Structure):\n            url = 'https:www.example.com'\n            username = '<user>'\n            password = '<password>'\n\n        mapping = List([\n            Map(\n                remote_path=\"/test/\",\n                local_path=\"~/test/\"\n            ),\n            Map(\n                remote_path=\"/one/\",\n                local_path=\"~/two/\"\n            ),\n            Map(\n                remote_path=\"/two/\",\n                local_path=\"~/one/\"\n            )\n        ], type=Map)\n\n    config = Config('config.json')\n\nNow when creating a new instance, loading from file or even just\nappending to the list, the type will be checked to ensure it matches the\ndeclaration.\n\nDictionaries of elements\n------------------------\n\nSimilar to the List above, a Dict of elements can be defined where the\ntype of the values in the dict can be controlled\n\n::\n\n    import structured_config\n    from structured_config import Structure, ConfigFile, Dict\n\n    # Pre-define the object we want to store a list of.\n    class Map(Structure):\n        remote_path = None\n        local_path = None\n\n    # Default configuration for the application\n    class Config(Structure):\n\n        mapping = Dict({\n            \"test\": Map(remote_path=\"/test/\", local_path=\"~/test/\"),\n            }, type=Map)\n\n    config = Config('config.json')\n    config.mapping['new'] = Map(remote_path='c:\\\\new', local_path='~/new')\n\n    # Will raise an exception as the value is incorrect!\n    config.mapping['fails'] = \"Nope\"\n\nFormat convertions and validations\n----------------------------------\n\nIf you want to enforce the type of some attributes, we've got that\ncovered as well:\n\n::\n\n    from structured_config import ConfigFile, Structure, TypedField, IntField\n\n    class config(Structure):\n\n        concurrent_connections = IntField(32)\n\n        path = TypedField('$HOME', os.path.expandvars)\n\n\n    config = Config('config.json')\n\nSome examples of available TypeFields include: \\* IntField : converts to\nint() \\* FloatField : converts to float() \\* StrField : converts to\nstr() \\* PathField : converts to pathlib.Path()\n\nOthers can be created on demand by using\n``TypeField(value, converter_funtion)`` or by subclassing TypeField as\nper the ones above.\n\nAny time a config attribute is set, it will be passed through the\nvalidation function first. The raw (unconverted) value will be saved to\ndisk.\n\nGet's on the config objects attribute return the converted value, not\nthe Field object.\n\nField documentation\n-------------------\n\nOnce you're using ``Field()`` types to define your elements you can\ndocument them too :\n\n::\n\n    from structured_config import ConfigFile, Structure, TypedField, IntField\n\n    class config(Structure):\n\n        concurrent_connections = IntField(32)            | \"The number of connections allowed\"\n        path = TypedField('$HOME', os.path.expandvars)   | \"User's home directory\"\n\n\n    config = Config('config.json')\n\nThese can be accessed in code via\n``Config.__fdoc__('concurrent_connections')``",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/alelec/micropython-structured-config",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Andrew Leech",
    "maintainer_email": "andrew@alelec.net",
    "name": "micropython-structured-config",
    "package_url": "https://pypi.org/project/micropython-structured-config/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-structured-config/",
    "project_urls": {
      "Homepage": "https://gitlab.com/alelec/micropython-structured-config"
    },
    "release_url": "https://pypi.org/project/micropython-structured-config/2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Configuration file support for micropython where the config structure is solely defined in python.",
    "version": "2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8160909,
  "releases": {
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eafef8b6f3301dee7195ae44b47980757d62180e5750628f4bf4683edc596854",
          "md5": "d3039ac05337e030d3559b915e20221d",
          "sha256": "f28b98297a647a6c3351a01665ec0d864d9d8298b1d67f6ee5cf6db4432be329"
        },
        "downloads": -1,
        "filename": "micropython-structured-config-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d3039ac05337e030d3559b915e20221d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15681,
        "upload_time": "2020-09-11T01:27:16",
        "upload_time_iso_8601": "2020-09-11T01:27:16.218531Z",
        "url": "https://files.pythonhosted.org/packages/ea/fe/f8b6f3301dee7195ae44b47980757d62180e5750628f4bf4683edc596854/micropython-structured-config-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c014bd7adccafffdd5e743b2b69de1ebb31211dc9c97a461a6ce15a4a04fd961",
          "md5": "3d944c2d7f27b1c85e2db2f367378796",
          "sha256": "65ecd4cff31338d463c2867a32bcfec91dd5868b65a8ca03fe5ee1e2b099d3ff"
        },
        "downloads": -1,
        "filename": "micropython-structured-config-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3d944c2d7f27b1c85e2db2f367378796",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18223,
        "upload_time": "2020-09-11T01:53:01",
        "upload_time_iso_8601": "2020-09-11T01:53:01.119647Z",
        "url": "https://files.pythonhosted.org/packages/c0/14/bd7adccafffdd5e743b2b69de1ebb31211dc9c97a461a6ce15a4a04fd961/micropython-structured-config-2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c014bd7adccafffdd5e743b2b69de1ebb31211dc9c97a461a6ce15a4a04fd961",
        "md5": "3d944c2d7f27b1c85e2db2f367378796",
        "sha256": "65ecd4cff31338d463c2867a32bcfec91dd5868b65a8ca03fe5ee1e2b099d3ff"
      },
      "downloads": -1,
      "filename": "micropython-structured-config-2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3d944c2d7f27b1c85e2db2f367378796",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18223,
      "upload_time": "2020-09-11T01:53:01",
      "upload_time_iso_8601": "2020-09-11T01:53:01.119647Z",
      "url": "https://files.pythonhosted.org/packages/c0/14/bd7adccafffdd5e743b2b69de1ebb31211dc9c97a461a6ce15a4a04fd961/micropython-structured-config-2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}