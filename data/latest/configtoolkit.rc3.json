{
  "info": {
    "author": "XenoCorn",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Configtoolkit\nAnother configuration library\n\n### О библиотеке\n**Configtoolkit** это простая библиотека для импорта конфигураций python скриптами  \n**Configtoolkit** позволяет удобно настроить цепочку импорта конфигурационных значений \nиз различных источников вида:\n\nПопытаться получить значение из источника A ->  \n-> при неудаче из источника B ->  \n-> при неудаче из источника C ->  \n-> при неудаче использовать значение по умолчанию  \n\nТакже имеется возможность проверять все значения цепочки на соответствие \nзаданному типу или использовать для них собственную функцию валидации, \nотбрасывая не прошедших проверку\n\n**Configtoolkit** решает проблему отличия False и Null значений от \nотсутствующих в классической реализации импорта конфигураций вида\n\n`VALUE = somesource.get(\"VALUE\") | someothersource.get(\"VALUE\") | DEFAULT`\n\nДля этого предоставляется класс-обертка **ConfigValue**, содержащий помимо\nсамого значения, флаг его существования в источнике\n\n**Configtoolkit** содержит готовые классы для импорта значений из\n* системных аргументов\n* переменных окружения\n* объектов, файлов, модулей и структур данных python\n* форматов\n    * Json\n    * Yaml\n    * Toml\n### Установка\nБиблиотека устанавливается и обновляется через pip\n\n    $ pip install configtoolkit\n\n### Применение\n#### - Функция get_config_value\nДля импорта конфигураций из цепочки источников используется функция **get_config_value**, \nпринимающая единственный обязательный параметр **values:list** в который \nдолжен передаваться список объектов конфигураций  \n\nВ этом списке могут быть как объекты класса **ConfigValue**, \nтак и любых других типов  \nЗначения передаваемы в обертке **ConfigValue** считаются валидными только если \nфлаг exist установлен в True  \nОбъекты всех других типов считаются валидными автоматически\n\nТакже, каждый элемент списка **values** может проверяться на соответствие типу  \nДля этого требуемый тип должен быть передан в необязательный параметр **value_type**\n\nТакже, можно использовать кастомную функцию для проверки каждого значения  \nДля этого данную функцию следует передать в необязательный параметр **validator**  \nЭта функция должна принимать проверяемое значение и возвращать bool флаг, \nдля которого True означает что значение валидно, а False что не валидно\n\nФункция **get_config_value** перебирает список **values** пока не обнаружит\nпервое значение, проходящее все проверки  \nДанное значение функция и возвращает\n\nВ случае если не нашлось не одного подходящего значения, \nвыбрасывается исключение **ImpossibleToGetValue**\n\nВ функцию может быть передан необязательный параметр **default**  \nПередача значения таким образом эквивалентна добавлению его в конец списка **values**, \nоднако использование этого параметра улучшает читабельность кода \n\nВы также можете передать необязательный флаг **return_source_value**, \nдля того чтобы функция **get_config_value**, вернула \nвместо полученного значения, список \nсостоящий из этого значения и его объекта-источника  \nЕсли результат был получен из константного значения, \nто в качестве источника возвращается Null\n\n#### - Функция not_none_config_value\nЕсли вы передаете в параметр **values** функции **get_config_value** \nнеконстантное конфигурационное значение, полученное без использования \nклассов провайдеров, рассмотренных ниже, вам может потребоваться, \nчтобы значение Null или False расценивались как отсутствие значения\n\nВ таком случае вы можете использовать функцию **not_none_config_value**  \nОна принимает значение любого типа и оборачивает его в **ConfigValue**, \nесли оно не Null или False, иначе возвращая пустой объект **ConfigValue** \nс флагом exist установленным в False\n\n#### - Класс ConfigValue\nДанный класс является оберткой для значений передаваемых в **get_config_value**, \nсодержащий также флаг exist, указывающий на существование этого значения в \nисточнике из которого получена конфигурация, \nа также поле source указывающее на источник значения \n\n**Configtoolkit** предоставляет классы-провайдеры для извлечения конфигураций \nиз различных источников:\n\n#### - Классы ArgsConfigProvider и SysArgsConfigProvider\nСлужат для импортирования конфигурации из аргументов командной строки  \n\nКласс **ArgsConfigProvider** принимает эти аргументы в конструкторе в виде списка  \nКласс **SysArgsConfigProvider** самостоятельно получает аргументы переданные программе\n\nОба класса содержат следующие методы:  \n#### -- get_value_for_key(key: str) -> ConfigValue:\nПринимает имя ключа в виде строки и возвращает \nлибо найденное по этому ключу значение обернутое в **ConfigValue**, \nлибо пустой объект **ConfigValue**\n\n#### -- if_key_contains(key: str) -> ConfigValue:\nПринимает имя ключа в виде строки и возвращает \nзначение True, обернутое в **ConfigValue** если ключ присутствует, \nлибо пустой объект **ConfigValue**\n\n#### -- if_not_key_contains(key: str) -> ConfigValue:\nПринимает имя ключа в виде строки и возвращает \nзначение False, обернутое в **ConfigValue** если ключ отсутствует, \nлибо пустой объект **ConfigValue**\n\n#### -- is_key_contains(key: str) -> ConfigValue:\nПринимает имя ключа в виде строки и возвращает \nзначение Tru или False, в зависимости от наличия ключа, обернутое в **ConfigValue**\n\n#### - Класс DictConfigProvider\nСлужит для импортирования конфигурации из словаря python,\nа также вложенных в него словарей или списков\n\nПринимает в конструкторе словарь, как единственный параметр\n\nЭтот класс, и все наследующиеся от него содержат метод\n\n#### -- get(*keys) -> ConfigValue\nКоторый извлекает из источника конфигурации, с которым работает этот объект, \nданные по ключу  \nДля получения значения из вложенных структур данных может передаваться множество ключей\n\n#### - Класс EnvironConfigProvider\nСлужит для импортирования конфигурации из переменных окружения  \n\nНаследуется от **DictConfigProvider**\n\n#### - Классы PyObjectConfigProvider и PyModuleConfigProvider\nСлужат для импортирования конфигурации из объектов python  \nВ отличие от **DictConfigProvider** работают не только \nсо словарями и массивами, но и с любыми другими объектами, обращаясь к их полям\n\nКласс **PyObjectConfigProvider** получает объект непосредственно в конструкторе  \nКласс **PyModuleConfigProvider** получает в конструкторе имя модуля или файла python, \nимпортирует его и работает с его содержимым\n\nНаследуются от **DictConfigProvider**\n\n#### - Классы JSONConfigProvider и JSONFileConfigProvider\nСлужат для импортирования конфигурации из формата json\n\nКласс **JSONConfigProvider** получает в конструкторе строку с данными в json формате  \nКласс **JSONFileConfigProvider** получает в конструкторе имя файла с содержимым в json формате\n\nНаследуются от **DictConfigProvider**\n\n#### - Классы YAMLConfigProvider и YAMLFileConfigProvider\nСлужат для импортирования конфигурации из формата yaml\n\nКласс **YAMLConfigProvider** получает в конструкторе строку с данными в yaml формате  \nКласс **YAMLFileConfigProvider** получает в конструкторе имя файла с содержимым в yaml формате\n\nНаследуются от **DictConfigProvider**\n\n#### - Классы TOMLConfigProvider и TOMLFileConfigProvider\nСлужат для импортирования конфигурации из формата toml\n\nКласс **TOMLConfigProvider** получает в конструкторе строку с данными в toml формате  \nКласс **TOMLFileConfigProvider** получает в конструкторе имя файла с содержимым в toml формате\n\nНаследуются от **DictConfigProvider**",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xenocorn/configtoolkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "configtoolkit",
    "package_url": "https://pypi.org/project/configtoolkit/",
    "platform": "",
    "project_url": "https://pypi.org/project/configtoolkit/",
    "project_urls": {
      "Homepage": "https://github.com/xenocorn/configtoolkit"
    },
    "release_url": "https://pypi.org/project/configtoolkit/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Another configuration library",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8985673,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c024a2020bbdebb05f8f2671526d40265c09bbdd625bd98f0cfb5793284f2817",
          "md5": "eb3301a2e05151c1c2cc2f2671f12dca",
          "sha256": "0abe14fbeb08f0c48556ee414601177d827a7ed31082dbf52cff7198724eafd9"
        },
        "downloads": -1,
        "filename": "configtoolkit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb3301a2e05151c1c2cc2f2671f12dca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10033,
        "upload_time": "2020-12-25T22:10:59",
        "upload_time_iso_8601": "2020-12-25T22:10:59.702911Z",
        "url": "https://files.pythonhosted.org/packages/c0/24/a2020bbdebb05f8f2671526d40265c09bbdd625bd98f0cfb5793284f2817/configtoolkit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "423b1b078b1511e0ebce9d6ac3e64180298e6fad9c7c90a2d86c791b8ab5d51b",
          "md5": "3dbf71a428a73bd0cbe8542f5a651b81",
          "sha256": "e2a907ed02331b30a6830b71c8718a7bd40d148d5ecba4a0eb5ead9c5ac6256c"
        },
        "downloads": -1,
        "filename": "configtoolkit-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3dbf71a428a73bd0cbe8542f5a651b81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10034,
        "upload_time": "2020-12-25T22:19:29",
        "upload_time_iso_8601": "2020-12-25T22:19:29.454205Z",
        "url": "https://files.pythonhosted.org/packages/42/3b/1b078b1511e0ebce9d6ac3e64180298e6fad9c7c90a2d86c791b8ab5d51b/configtoolkit-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfd58aad0cd77c3cf0eb9221715697df59225278503546bcb706daddd4572090",
          "md5": "219d2dac84cfb1c7dd112cf1befc2477",
          "sha256": "ea537135ad9ab9d0e577cea5c6d14db0b56bc4ffa7ca7f8e55c2a7ad5f8e196f"
        },
        "downloads": -1,
        "filename": "configtoolkit-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "219d2dac84cfb1c7dd112cf1befc2477",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11145,
        "upload_time": "2020-12-25T22:54:17",
        "upload_time_iso_8601": "2020-12-25T22:54:17.827244Z",
        "url": "https://files.pythonhosted.org/packages/bf/d5/8aad0cd77c3cf0eb9221715697df59225278503546bcb706daddd4572090/configtoolkit-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfd58aad0cd77c3cf0eb9221715697df59225278503546bcb706daddd4572090",
        "md5": "219d2dac84cfb1c7dd112cf1befc2477",
        "sha256": "ea537135ad9ab9d0e577cea5c6d14db0b56bc4ffa7ca7f8e55c2a7ad5f8e196f"
      },
      "downloads": -1,
      "filename": "configtoolkit-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "219d2dac84cfb1c7dd112cf1befc2477",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11145,
      "upload_time": "2020-12-25T22:54:17",
      "upload_time_iso_8601": "2020-12-25T22:54:17.827244Z",
      "url": "https://files.pythonhosted.org/packages/bf/d5/8aad0cd77c3cf0eb9221715697df59225278503546bcb706daddd4572090/configtoolkit-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}