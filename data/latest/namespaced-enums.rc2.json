{
  "info": {
    "author": "Piotr Waszkiewicz",
    "author_email": "waszka23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "## NamespacedEnums\n\nLibrary for defining containers within `Enum` Python classes.\n\n## Installation\n\nRun\n\n```bash\n$ pip install namespaced_enums\n```\n\n## Usage\n\nLibrary provides two special descriptors for `Enum` classes:\n- `EnumContainer`\n- `StrictEnumContainer`\n\nas well as an additional enum-subclass:\n- `NamespacedEnum`\n\n### EnumContainer\n\nThis allows for defining arbitrary containers within `Enum` classes, e.g.\n\n```python\nfrom enum import Enum\nfrom namespaced_enum import EnumContainer\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n    \n    LIGHT_RED = 4\n    LIGHT_GREEN = 5\n    LIGHT_BLUE = 6\n    \n    DARK_RED = 7\n    DARK_GREEN = 8\n    DARK_BLUE = 9\n    \n    light_colors = EnumContainer([LIGHT_RED, LIGHT_GREEN, LIGHT_BLUE])\n    dark_colors = EnumContainer([DARK_RED, DARK_GREEN, DARK_BLUE])\n    \n---\n\n>>> print(Color.RED.value in Color.light_colors)  # False\n>>> print(Color.DARK_BLUE.value in Color.dark_colors)  # True\n\n# Caution!\n# Values within containers are of enum value types\n>>> print(Color.dark_colors)  # prints [7, 8, 9] and not [DARK_RED, DARK_GREEN, DARK_BLUE]!\n```\n\n### StrictEnumContainer and NamespacedEnum\n\n`StrictEnumContainer` accepts only dict containers. Using this descriptor within\na class inheriting from `NamespacedEnum` will enforce that the provided \ndictionary contains all enum possible values:\n\n```python\nfrom namespaced_enums import NamespacedEnum, StrictEnumContainer\n\nclass Food(NamespacedEnum):\n    spam = \"spam\"\n    eggs = \"eggs\"\n    foo = \"foo\"\n\n    reactions = StrictEnumContainer(\n        {\n            spam: \"I like it\",\n            eggs: \"I don't like it...\",\n            foo: \"I like?\",\n        }\n    )\n\n---\n\n>>> print(Food.reactions[Food.spam])  # \"I like it\"\n\n# Caution!\n# Unlike the `EnumContainer` this one converts dict keys to enums!\n>>> print(list[Food.reactions.keys()])  # prints [<Food.spam: spam>, <Food.eggs: eggs>, <Food.foo: foo>]\n```\n\nForgetting to provide all possible enum values within a strict container will\nraise a `RuntimeError`:\n\n```python\nfrom namespaced_enums import NamespacedEnum, StrictEnumContainer\n\nclass Food(NamespacedEnum):\n    spam = \"spam\"\n    eggs = \"eggs\"\n    foo = \"foo\"\n\n    reactions = StrictEnumContainer(\n        {\n            spam: \"I like it\",\n            eggs: \"I don't like it...\",\n            # missing foo in the dict\n        }\n    )\n\n---\n\n>>> # Trying to start the program raises a `RuntimeError`:\n# The following Food fields do not contain all possible enum values: ['reactions']\n```\n\n## Rationale\n\nIt's a common practice to use enums in a project as a way to denote \n\"characteristics\" of certain objects. \n\nConsider the following example:\n\n```python\nfrom enum import Enum\n\nclass DogBreed(Enum):\n    BULLDOG = 'bulldog'\n    PUG = 'pug'\n    SHIBA = 'shiba'\n\n    \nclass Dog:\n    def __init__(self, breed: DogBreed) -> None:\n        self.breed = breed\n        \n    @property\n    def size(self) -> int:\n        \"\"\"Returns size of the dog (in centimeters).\"\"\"\n        if self.breed == DogBreed.BULLDOG:\n            return 40\n        elif self.breed == DogBreed.PUG:\n            return 30\n        elif self.breed == DogBreed.SHIBA:\n            return 35\n        else:  # pragma: no cover\n            raise ValueError(f\"Unknown dog breed: {self.breed}\")\n```\n\nThe `Dog.size` property implementation poses a threat when it comes to further\nadditions to the `DogBreed` enum: \n- programmers would have to **remember to update** it every time they add a new \nbreed support. What if there are more such properties like color, weight or \ntail length?\n- the **if-elif-else chain is hard to test** as the last `else` clause would \nrequire injecting some arbitrary value into the `DogBreed` enum during runtime \nin order to ensure proper coverage. In my experience, most developers would \nprefer to add `# pragma: no cover` instead.\n- the size characteristic should arguably be not part of the `Dog` class as it\nis more specific to the `DogBreed` enum - the `Dog` class should be aware of\nhow to retrieve that data.\n\nThat's why I decided to create a `NamespacedEnum` class that allows for writing\nself-contained enums, that can help in maintaining the integrity of the written\ncode. The example above could be rewritten in a following manner:\n\n```python\nfrom namespaced_enums import NamespacedEnum, StrictEnumContainer\n\n\nclass DogBreed(NamespacedEnum):\n    BULLDOG = 'bulldog'\n    PUG = 'pug'\n    SHIBA = 'shiba'\n\n    size = StrictEnumContainer({\n        BULLDOG: 40,\n        PUG: 30,\n        SHIBA: 35,\n    })\n\n    \nclass Dog:\n    def __init__(self, breed: DogBreed) -> None:\n        self.breed = breed\n\n    @property\n    def size(self) -> int:\n        \"\"\"Returns size of the dog (in centimeters).\"\"\"\n        return DogBreed.size[self.breed]\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/waszker/namespaced_enums",
    "keywords": "python,enum,namespaced",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "namespaced-enums",
    "package_url": "https://pypi.org/project/namespaced-enums/",
    "platform": null,
    "project_url": "https://pypi.org/project/namespaced-enums/",
    "project_urls": {
      "Bug Reports": "https://github.com/waszker/namespaced_enums/issues",
      "Homepage": "https://github.com/waszker/namespaced_enums",
      "Source": "https://github.com/waszker/namespaced_enums"
    },
    "release_url": "https://pypi.org/project/namespaced-enums/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7, <4",
    "summary": "",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14603904,
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca0afae01d063cf4d33354447d04320998f0407a4b32fa2844722568a9bc3ec1",
          "md5": "21f8b218adb61ef6943803b226cb4187",
          "sha256": "a4f10df89a281391ff4a4edb7e701f97f68fc946c58cdcf615a5189967137f53"
        },
        "downloads": -1,
        "filename": "namespaced_enums-0.0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "21f8b218adb61ef6943803b226cb4187",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 4402,
        "upload_time": "2022-07-30T21:18:13",
        "upload_time_iso_8601": "2022-07-30T21:18:13.817609Z",
        "url": "https://files.pythonhosted.org/packages/ca/0a/fae01d063cf4d33354447d04320998f0407a4b32fa2844722568a9bc3ec1/namespaced_enums-0.0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec1eb59c257374121d476c3a9872fc8de0377f9a87a5dcf6100a226f95344524",
          "md5": "080d16f799f05f517e6e8c656ed3c8cb",
          "sha256": "81ae175c094a7041c47b897f8f96cad4d6163bf2fc6b554358baa05f4277ede6"
        },
        "downloads": -1,
        "filename": "namespaced_enums-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "080d16f799f05f517e6e8c656ed3c8cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 5060,
        "upload_time": "2022-07-31T12:01:22",
        "upload_time_iso_8601": "2022-07-31T12:01:22.676539Z",
        "url": "https://files.pythonhosted.org/packages/ec/1e/b59c257374121d476c3a9872fc8de0377f9a87a5dcf6100a226f95344524/namespaced_enums-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec1eb59c257374121d476c3a9872fc8de0377f9a87a5dcf6100a226f95344524",
        "md5": "080d16f799f05f517e6e8c656ed3c8cb",
        "sha256": "81ae175c094a7041c47b897f8f96cad4d6163bf2fc6b554358baa05f4277ede6"
      },
      "downloads": -1,
      "filename": "namespaced_enums-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "080d16f799f05f517e6e8c656ed3c8cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 5060,
      "upload_time": "2022-07-31T12:01:22",
      "upload_time_iso_8601": "2022-07-31T12:01:22.676539Z",
      "url": "https://files.pythonhosted.org/packages/ec/1e/b59c257374121d476c3a9872fc8de0377f9a87a5dcf6100a226f95344524/namespaced_enums-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}