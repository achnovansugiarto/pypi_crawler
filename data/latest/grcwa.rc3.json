{
  "info": {
    "author": "Weiliang Jin",
    "author_email": "jwlaaa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "=====\ngrcwa\n=====\n.. image:: https://img.shields.io/pypi/v/grcwa.svg\n        :target: https://pypi.python.org/pypi/grcwa\n\n..\n   .. image:: https://img.shields.io/travis/weiliangjinca/grcwa.svg\n\t   :target: https://travis-ci.org/weiliangjinca/grcwa\n\n.. image:: https://readthedocs.org/projects/grcwa/badge/?version=latest\n        :target: https://grcwa.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\ngrcwa (autoGradable RCWA) is a python implementation of rigorous\ncoupled wave analysis (RCWA) for arbitrarily shaped photonic crystal\nslabs, supporting automatic differentation with autograd\n\n* Free software: GPL license\n* Documentation: https://grcwa.readthedocs.io.\n\nCiting\n-------\n\nIf you find **grcwa** useful for your research, please cite the\nfollowing paper:\n::\n\n   @article{Jin2020,\n     title = {Inverse design of lightweight broadband reflector for relativistic lightsail propulsion},\n     author ={Jin, Weiliang and Li, Wei and Orenstein, Meir and Fan, Shanhui},\n     year = {2020},\n     journal = {ACS Photonics},\n     volume = {7},\n     number = {9},\n     pages = {2350--2355},\n     year = {2020},\n     publisher = {ACS Publications}\n   }\n\n\nFeatures\n---------\n.. image:: imag/scheme.png\n\nRCWA solves EM-scattering problems of stacked photonic crystal\nslabs. As illustrated in the above figure, the photonic structure can\nhave *N* layers of different thicknesses and independent spatial\ndielectric profiles. All layers are periodic in the two lateral\ndirections, and invariant along the vertical direction.\n\n* Each photonic crystal layer can have arbitrary dielectric profile on\n  the *2D* grids.\n* **autograd** is integrated into the package, allowing for automated\n  and fast gradient evaluations for the sake of large-scale\n  optimizations. Autogradable parameters include dielectric constant on\n  every grid, frequency, angles, thickness of each layer, and\n  periodicity (however the ratio of periodicity along the two lateral\n  directions must be fixed).\n\n\nQuick Start\n-----------\n* Installation:\n\n  .. code-block:: console\n\n\t\t  $ pip install grcwa\n\n  Or,\n\n  .. code-block:: console\n\n\t\t  $ git clone git://github.com/weiliangjinca/grcwa\n\t\t  $ pip install .\n\n\n* Example 1: transmission and reflection (sum or by order) of a square lattice of a hole: `ex1.py <./example/ex1.py>`_\n\n* Example 2: Transmission and reflection of two patterned layers: `ex2.py <./example/ex2.py>`_, as illustrated in the figure below (only a **unit cell** is plotted)\n\n  .. image:: imag/ex.png\n\n  * *Periodicity* in the lateral direction is  *L*\\ :sub:`x` = *L*\\ :sub:`y` = 0.2, and *frequency* is 1.0.\n\n  * The incident light has an angel *pi*/10.\n\n    .. code-block:: python\n\n\t\t    import grcwa\n\t\t    import numpy as np\n\t\t    grcwa.set_backend('autograd') # if autograd needed\n\n\t\t     # lattice constants\n\t\t     L1 = [0.2,0]\n\t\t     L2 = [0,0.2]\n\t\t     # Truncation order (actual number might be smaller)\n\t\t     nG = 101\n\t\t     # frequency\n\t\t     freq = 1.\n\t\t     # angle\n\t\t     theta = np.pi/10\n\t\t     phi = 0.\n\n\t\t     # setup RCWA\n\t\t     obj = grcwa.obj(nG,L1,L2,freq,theta,phi,verbose=1)\t\t    \n\n  * Geometry: the thicknesses of the four layers are 0.1,0.2,0.3, and 0.4. For patterned layers, we consider total grid points *N*\\ :sub:`x` \\* *N*\\ :sub:`y` = 100\\*100 within the unit cell.\n\n  * Dielectric constant: 2.0 for the 0-th layer; 4.0 (1.0) for the 1st layer in the orange (void) region; 6.0 (1.0) for the 2nd layer in the bule (void) region; and 3.0 for the last layer.\n\n    .. code-block:: python\n\n\t\t    Np = 2 # number of patterned layers\n\t\t    Nx = 100\n\t\t    Ny = 100\n\n\t\t    thick0 = 0.1\n\t\t    pthick = [0.2,0.3]\n\t\t    thickN = 0.4\n\n\t\t    ep0 = 2.\n\t\t    epN = 3.\n\n\t\t    obj.Add_LayerUniform(thick0,ep0)\n\t\t    for i in range(Np):\n\t\t        obj.Add_LayerGrid(pthick[i],Nx,Ny)\n\t\t    obj.Add_LayerUniform(thickN,epN)\n\n\t\t    obj.Init_Setup()\n\n  * Patterned layer: the 1-th layer a circular hole of radius 0.5 *L*\\ :sub:`x`, and the 2-nd layer has a square hole of 0.5 *L*\\ :sub:`x`\n\n    .. code-block:: python\n\n\t\t    radius = 0.5\n\t\t    a = 0.5\n\n\t\t    ep1 = 4.\n\t\t    ep2 = 6.\n\t\t    epbkg = 1.\n\n\t\t    # coordinate\n\t\t    x0 = np.linspace(0,1.,Nx)\n\t\t    y0 = np.linspace(0,1.,Ny)\n\t\t    x, y = np.meshgrid(x0,y0,indexing='ij')\n\n\t\t    # layer 1\n\t\t    epgrid1 = np.ones((Nx,Ny))*ep1\n\t\t    ind = (x-.5)**2+(y-.5)**2<radius**2\n\t\t    epgrid1[ind]=epbkg\n\n\t\t    # layer 2\n\t\t    epgrid2 = np.ones((Nx,Ny))*ep2\n\t\t    ind = np.logical_and(np.abs(x-.5)<a/2 and np.abs(y-.5)<a/2))\n\t\t    epgrid2[ind]=epbkg\t\t    \n\n\t\t    # combine epsilon of all layers\n\t\t    epgrid = np.concatenate((epgrid1.flatten(),epgrid2.flatten()))\n\t\t    obj.GridLayer_geteps(epgrid)\n\n  * Incident light is *s*-polarized\n\n    .. code-block:: python\n\n\t\t     planewave={'p_amp':0,'s_amp':1,'p_phase':0,'s_phase':0}\n\t\t     obj.MakeExcitationPlanewave(planewave['p_amp'],planewave['p_phase'],planewave['s_amp'],planewave['s_phase'],order = 0)\n\n\t\t     # solve for R and T\n\t\t     R,T= obj.RT_Solve(normalize=1)\n\n* Example 3: topology optimization of reflection of a single patterned layer, `ex3.py <./example/ex3.py>`_\n\n* Example 4: transmission and reflection (sum or by order) of a hexagonal lattice of a hole: `ex4.py <./example/ex4.py>`_\n\nNote on conventions\n-------------------\n\n* The vacuum permittivity, permeability, and speed of light are *1*.\n* The time harmonic convention is *exp(-i omega t)*.\n\nAcknowledgements\n----------------\n\nMy implementation of RCWA received helpful discussions from `Dr. Zin\nLin\n<https://scholar.google.com/citations?user=3ZgzHLYAAAAJ&hl=en>`_. Many\ndetails of implementations were referred to a RCWA package implemented\nin c called `S4 <https://github.com/victorliu/S4>`_. The idea of\nintegrating **Autograd** into RCWA package rather than deriving\nadjoint-variable gradient by hand was inspired by a discussion with\nDr. Ian Williamson and Dr. Momchil Minkov. The backend and many other\nstyles follow their implementation in `legume\n<https://github.com/fancompute/legume>`_. Haiwen Wang and Cheng Guo\nprovided useful feedback. Lastly, the template was credited to\nCookiecutter_ and the `audreyr/cookiecutter-pypackage`_.\n\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.2 (2020-11-01)\n------------------\n\n* Add example for hexagonal lattice\n\n0.1.1 (2020-05-18)\n------------------\n\n* Fix license\n\n0.1 (2020-05-12)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/weiliangjinca/grcwa",
    "keywords": "grcwa",
    "license": "GPL license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grcwa",
    "package_url": "https://pypi.org/project/grcwa/",
    "platform": "",
    "project_url": "https://pypi.org/project/grcwa/",
    "project_urls": {
      "Homepage": "https://github.com/weiliangjinca/grcwa"
    },
    "release_url": "https://pypi.org/project/grcwa/0.1.2/",
    "requires_dist": [
      "autograd",
      "numpy"
    ],
    "requires_python": ">=3.5",
    "summary": "Rigorous coupled wave analysis supporting automatic differentation with autograd",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8557328,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e0547e3fd90aa61ffd54091237cf8371a1859dfce08319e18a5f385681a57cd",
          "md5": "3c899db90aff3086d604d9fa93d23a50",
          "sha256": "20e1f7f6aa71268cbcd749489124c38301d977fef36cc29b03cc88d103191850"
        },
        "downloads": -1,
        "filename": "grcwa-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c899db90aff3086d604d9fa93d23a50",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 21430,
        "upload_time": "2020-05-16T17:59:15",
        "upload_time_iso_8601": "2020-05-16T17:59:15.957022Z",
        "url": "https://files.pythonhosted.org/packages/5e/05/47e3fd90aa61ffd54091237cf8371a1859dfce08319e18a5f385681a57cd/grcwa-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48bc764fb9376a68ec22b1ef1220d2b461b79e215ac3959612f5784ff2399c3c",
          "md5": "e50f17ac8f4ab90cbfdcbf76478d00ba",
          "sha256": "3bbf2b947fcef3c26a394d973df863c451b4539be094bb1f895fcf392a031ab8"
        },
        "downloads": -1,
        "filename": "grcwa-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e50f17ac8f4ab90cbfdcbf76478d00ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 932783,
        "upload_time": "2020-05-16T17:59:23",
        "upload_time_iso_8601": "2020-05-16T17:59:23.878230Z",
        "url": "https://files.pythonhosted.org/packages/48/bc/764fb9376a68ec22b1ef1220d2b461b79e215ac3959612f5784ff2399c3c/grcwa-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "beea9248673b337fd75a81a42c3cb1f416b97b25f9a0e3c1f648d0e75dbcca5d",
          "md5": "dc3059fcbad7f2581f78c4cafb8356cf",
          "sha256": "a4080b6b6d34e7a5b73c3e4f9bccbbb2d022ca6cf75d897e3c8320037580680b"
        },
        "downloads": -1,
        "filename": "grcwa-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc3059fcbad7f2581f78c4cafb8356cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 21692,
        "upload_time": "2020-05-18T17:11:14",
        "upload_time_iso_8601": "2020-05-18T17:11:14.860806Z",
        "url": "https://files.pythonhosted.org/packages/be/ea/9248673b337fd75a81a42c3cb1f416b97b25f9a0e3c1f648d0e75dbcca5d/grcwa-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a1839e48a6d3b4f278c0a9a42022eee1faaf9347489d531a43994e00623fff4",
          "md5": "a07fa4d8eb57e9faa42d2238b693125b",
          "sha256": "ef245e85586cdac3cb80c632895fd70cb573841d9ce9fecd088a0827051ff48a"
        },
        "downloads": -1,
        "filename": "grcwa-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a07fa4d8eb57e9faa42d2238b693125b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 932987,
        "upload_time": "2020-05-18T17:11:21",
        "upload_time_iso_8601": "2020-05-18T17:11:21.838983Z",
        "url": "https://files.pythonhosted.org/packages/1a/18/39e48a6d3b4f278c0a9a42022eee1faaf9347489d531a43994e00623fff4/grcwa-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39efba5eae2e967f124ffbcd58b07943ac54b9840b70d602a9df78d895faf459",
          "md5": "ca7d668d826e8cd50cc818c6315d50ad",
          "sha256": "65dbc0151d46a22985c1fe7f1070347e67562363fcb04371e9d158e3ba6140ee"
        },
        "downloads": -1,
        "filename": "grcwa-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca7d668d826e8cd50cc818c6315d50ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 22034,
        "upload_time": "2020-11-02T05:40:40",
        "upload_time_iso_8601": "2020-11-02T05:40:40.127210Z",
        "url": "https://files.pythonhosted.org/packages/39/ef/ba5eae2e967f124ffbcd58b07943ac54b9840b70d602a9df78d895faf459/grcwa-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94dd79d7dfcf73bb402890bc573ad482036d524f39d1868383da7c4a47c2a4b",
          "md5": "c1b60d0ee51f4d5fb93ff26fbb85a05e",
          "sha256": "f4983743b94cad92560c0cf528a66ad632357d4df5fd536eb5bbf2cb69708664"
        },
        "downloads": -1,
        "filename": "grcwa-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1b60d0ee51f4d5fb93ff26fbb85a05e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 933563,
        "upload_time": "2020-11-02T05:40:45",
        "upload_time_iso_8601": "2020-11-02T05:40:45.547388Z",
        "url": "https://files.pythonhosted.org/packages/a9/4d/d79d7dfcf73bb402890bc573ad482036d524f39d1868383da7c4a47c2a4b/grcwa-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39efba5eae2e967f124ffbcd58b07943ac54b9840b70d602a9df78d895faf459",
        "md5": "ca7d668d826e8cd50cc818c6315d50ad",
        "sha256": "65dbc0151d46a22985c1fe7f1070347e67562363fcb04371e9d158e3ba6140ee"
      },
      "downloads": -1,
      "filename": "grcwa-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca7d668d826e8cd50cc818c6315d50ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 22034,
      "upload_time": "2020-11-02T05:40:40",
      "upload_time_iso_8601": "2020-11-02T05:40:40.127210Z",
      "url": "https://files.pythonhosted.org/packages/39/ef/ba5eae2e967f124ffbcd58b07943ac54b9840b70d602a9df78d895faf459/grcwa-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a94dd79d7dfcf73bb402890bc573ad482036d524f39d1868383da7c4a47c2a4b",
        "md5": "c1b60d0ee51f4d5fb93ff26fbb85a05e",
        "sha256": "f4983743b94cad92560c0cf528a66ad632357d4df5fd536eb5bbf2cb69708664"
      },
      "downloads": -1,
      "filename": "grcwa-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c1b60d0ee51f4d5fb93ff26fbb85a05e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 933563,
      "upload_time": "2020-11-02T05:40:45",
      "upload_time_iso_8601": "2020-11-02T05:40:45.547388Z",
      "url": "https://files.pythonhosted.org/packages/a9/4d/d79d7dfcf73bb402890bc573ad482036d524f39d1868383da7c4a47c2a4b/grcwa-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}