{
  "info": {
    "author": "soroush",
    "author_email": "soroush_safarii@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# backtrader_plotting\nLibrary to add extended plotting capabilities to `backtrader` (https://www.backtrader.com/). Currently the only available backend is `Bokeh` (https://bokeh.org/).\n\n## Features\n* Interactive plots\n* Interactive `backtrader` optimization result browser (only supported for single-strategy runs)\n* Highly configurable \n* Different skinnable themes\n* Easy to use\n\nFeel free to test it and play with it. I am happy about feedback, critics and ideas on backtrader forum (and also in GitHub issues):\nhttps://community.backtrader.com/topic/813/bokeh-integration-interactive-webbrowser-plotting\n\nNeeds Python >= 3.6.\n## Demos\nhttps://verybadsoldier.github.io/backtrader_plotting/\n\n## Installation\n`pip install backtrader_plotting`\n\n## Quickstart\n\n```python\nfrom backtrader_plotting import Bokeh\nfrom backtrader_plotting.schemes import Tradimo\n\n<your backtrader code>\n\nb = Bokeh(style='bar', plot_mode='single', scheme=Tradimo())\ncerebro.plot(b)\n```\n\n## Minimal Example\n```python\nimport datetime\n\nimport backtrader as bt\n\nfrom backtrader_plotting import Bokeh\n\n\nclass TestStrategy(bt.Strategy):\n    params = (\n        ('buydate', 21),\n        ('holdtime', 6),\n    )\n\n    def next(self):\n        if len(self.data) == self.p.buydate:\n            self.buy(self.datas[0], size=None)\n\n        if len(self.data) == self.p.buydate + self.p.holdtime:\n            self.sell(self.datas[0], size=None)\n\n\nif __name__ == '__main__':\n    cerebro = bt.Cerebro()\n\n    cerebro.addstrategy(TestStrategy, buydate=3)\n\n    data = bt.feeds.YahooFinanceCSVData(\n        dataname=\"datas/orcl-1995-2014.txt\",\n        # Do not pass values before this date\n        fromdate=datetime.datetime(2000, 1, 1),\n        # Do not pass values after this date\n        todate=datetime.datetime(2001, 2, 28),\n        reverse=False,\n        )\n    cerebro.adddata(data)\n\n    cerebro.run()\n\n    b = Bokeh(style='bar', plot_mode='single')\n    cerebro.plot(b)\n```\n\n## Plotting Optimization Results\nAnother way to use this package is to use the `OptBrowser` to browse a `backtrader` optimization result:\n\n```python\n...\ncerebro.optstrategy(TestStrategy, buydate=range(1, 10, 1))\ncerebro.addanalyzer(bt.analyzers.SharpeRatio)\n...\nres = cerebro.run()\nbo = Bokeh()\nbrowser = OptBrowser(bo, result)\nbrowser.start()\n```\n\nThis will start a Bokeh application (standalone webserver) displaying all optimization results. Different results can be selected and viewed.\n\nIt is possible possible to add further user-provided columns.\nWhen dealing with huge amounts of optimization results the number of results can be limited and the remaining results can be sorted by a user-provided function to allow for simple selection of the best results.\n\n## Documentation\nPlease refert to the Wiki for further documentation: https://github.com/verybadsoldier/backtrader_plotting/wiki",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coci/ravand_plot",
    "keywords": "trading,development,plotting,backtrader",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ravand-plotting",
    "package_url": "https://pypi.org/project/ravand-plotting/",
    "platform": "",
    "project_url": "https://pypi.org/project/ravand-plotting/",
    "project_urls": {
      "Homepage": "https://github.com/coci/ravand_plot"
    },
    "release_url": "https://pypi.org/project/ravand-plotting/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Plotting package for Backtrader (Bokeh)",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9057893,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7561428948454d47a95b9cc9fcb86306f9801a564aab51a48866ba913177e035",
          "md5": "9f29a635cf4e0de0718c4bd83694bd5b",
          "sha256": "5e288cc2f31bd4bcd7d65d5bbf4d6e2c67100100bdad7efd5c4f8b9397da67b0"
        },
        "downloads": -1,
        "filename": "ravand_plotting-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f29a635cf4e0de0718c4bd83694bd5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33052,
        "upload_time": "2021-01-05T14:12:31",
        "upload_time_iso_8601": "2021-01-05T14:12:31.842666Z",
        "url": "https://files.pythonhosted.org/packages/75/61/428948454d47a95b9cc9fcb86306f9801a564aab51a48866ba913177e035/ravand_plotting-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7561428948454d47a95b9cc9fcb86306f9801a564aab51a48866ba913177e035",
        "md5": "9f29a635cf4e0de0718c4bd83694bd5b",
        "sha256": "5e288cc2f31bd4bcd7d65d5bbf4d6e2c67100100bdad7efd5c4f8b9397da67b0"
      },
      "downloads": -1,
      "filename": "ravand_plotting-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9f29a635cf4e0de0718c4bd83694bd5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 33052,
      "upload_time": "2021-01-05T14:12:31",
      "upload_time_iso_8601": "2021-01-05T14:12:31.842666Z",
      "url": "https://files.pythonhosted.org/packages/75/61/428948454d47a95b9cc9fcb86306f9801a564aab51a48866ba913177e035/ravand_plotting-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}