{
  "info": {
    "author": "BitLogiK",
    "author_email": "contact@bitlogik.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Communications :: Email",
      "Topic :: Security :: Cryptography",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Hardware"
    ],
    "description": "\n# OpenPGPpy\n\n\n### OpenPGP smartcard communication library\n\nA Python3 library to operate an OpenPGP device.\n\nProvides access methods in Python to an OpenPGP card application, as defined in  \nhttps://gnupg.org/ftp/specs/OpenPGP-smart-card-application-3.3.pdf\n\nNo need to have GnuPG or similar binary, with OpenPGPpy one can setup and use an OpenPGP device (such as Yubico 5) right away in Python.\n\n\n## Installation and requirements\n\nWorks with Python >= 3.6.\n\nRequires PCSCd on Linux\n\nUbuntu / Debian  \n`(sudo) apt-get install python3-pip python3-pyscard python3-setuptools pcscd`\n\nFedora / CentOS / RHEL  \n`yum install python3-pip python3-pyscard python3-setuptools pcsc-lite-ccid`\n\nOn some Linux, starts PCSCd service\n```\n(sudo) systemctl start pcscd\n(sudo) systemctl enable pcscd\n```\n\nIt uses Pyscard, but this is listed in pip dependencies. So Pyscard is automatically installed when you install this package. In Linux, We recommend to install Pyscard using the distro package manager (see above).\n\n### Installation of this library\n\nEasiest way :  \n`python3 -m pip install OpenPGPpy`  \n\nFrom sources, download and run in this directory :  \n`python3 -m pip  install .`\n\n### Use\n\nInstanciate a device with `OpenPGPpy.OpenPGPcard()`, then use methods functions of this object.\n\nOpenPGPcard() throws an PGPCardException exception if no OpenPGP device can be found.\n\nBasic example :\n\n```\nimport OpenPGPpy\nmydevice = OpenPGPpy.OpenPGPcard()\nmydevice.verify_pin(1, \"123456\")\nmydevice.sign(hash_or_msg_to_sign)\n```\n\nSee demo and interface methods to get the full functions and details.\n\n#### Demo\n\nThere are some demonstration scripts provided in the *demo* directory. They provide examples on how to use this library.\n\n* reset.py : resets the OpenPGP device.\n* decrypt.py : Generates an X25519 key pair that is used to DECipher data (compute X25519 ECDH).\n* sign.py : Generates a 256k1 key pair, then uses it to sign data.\n* signEd.py : Generates a Ed25519 key pair, then uses it to sign data.\n\nThe *decrypt.py* and *signEd.py* scripts require the pynacl library to check the device responses. This can be installed with the \"dev\" dependencies part of this package `python3 -m pip  install .[\"dev\"]` or just `python3 -m pip install pynacl`.\n\nThe *sign.py* script requires openssl binary in the user path to check the device responses.\n\n*sign* and *signEd* can't be used together. Perform a reset of the card between one and the other.\n\nDefault PIN password for OpenPGP devices :  \nPIN1 : \"123456\"  \nPIN2 : \"123456\"  \nPIN3 : \"12345678\"\n\n\n**Breaking changes** in v0.6 :\n* The debug argument is removed from the instanciate method, and from the class object attribute. Now this library uses logger.debug(). Use a standard logger in your app and you'll get or print the debug traces from this library. It was previsouly printed out in the standard ouput, now it is always output in the logger debug.\n* The get_application_data method returns a Python object, instead of the bytes array raw response from the device. The raw response is internally ASN1-BER decoded, with hex data strings for DOs content.\n\n## Interface Methods\n\n`OpenPGPcard( reader_index=None )`  \nInitializes the OpenPGP device object.  \nConnects to all readers seeking for an OpenPGP card, selects the app and loads its capabilities.  \nreader_index = None : the constructor will use the first OpenPGP card available in any readers slots detected.  \nreader_index = positive integer : will try to use the given reader/card at the given index (starts at 0).\n\nThe created object has the following attributes :\n* .name : str, name of the device (or the card reader used)\n* .pgpvermaj : int, OpenPGP application major version (2 or 3)\n* .pgpvermin : int, OpenPGP application minor version\n* .pgpverstr : string, OpenPGP application version \"maj.min\"\n* .manufacturer_id : string, hex string of the manufacturer ID \"0xXXXX\"\n* .manufacturer : string, name of the manufacturer (or \"- unknown -\")\n* .serial : int, serial number\n* .max_cmd : int, maximum command length\n* .max_rsp : int, maximum response length\n* .pw1_maxlen: int, maximum PIN1 length\n* .pw3_maxlen: int, maximum PIN3 length\n* .display : bool, has a display?\n* .bio : bool, has a biometric sensor?\n* .button : bool, has a button?\n* .keypad : bool, has a keypad?\n* .led : bool, has a LED?\n* .speaker : bool, has a speaker?\n* .mic : bool, has a microphone?\n* .touchscreen : bool, has a touchscreen?\n\n`OpenPGPcard.send_apdu( apduHeader, Data, ExpLongResp=0 )`  \nSends full raw APDU, not supposed to be used by your scripts.  \napduHeader and Data are lists of integers or bytesarray.  \napduHeader is [ INS, CLA, P1, P2 ] ISO7816 APDU header, without length info (Lc nor Le).  \nData is bytes list of the command data  \nExpLongResp is optional integer, the expected response length. Required when sending a short command and receiving long data back.  \nIn case data are cut in parts with \"61\" code, it automatically sends \"C0\" command to get remaining data and recontructs the full data.  \nExtended frame length is automatically managed.  \n*Note* if an extended data frame response is expected from a short command, the query command must be called with the ExpLongResp argument equals to 65536. Because the ISO7816 standard only allows symmetric type of communication (extended sent, extended received), and this is the easy way to force the command to be sent with an extended format.  \nThrows PGPCardException if answer status is not 0x9000.  \nThrows ConnectionException if the device is no more available.  \nReturns a bytearray of the card answer.\n\n`OpenPGPcard.select_data( filehex, param_1=0, param_2=4 )`  \nSelects a data object (\"DO\").  \nfilehex is 1 or 2 bytes object address in hex (2-4 string hex).\n\n`OpenPGPcard.get_data( filehex )`  \nReads a data object (\"DO\").  \nfilehex is 1 or 2 bytes object address in hex (2-4 string hex).  \nMostly used internally by others methods.\n\n`OpenPGPcard.get_next_data( filehex, param_1=0, param_2=0 )`  \nContinue reading in data object (\"DO\").  \nfilehex is 1 or 2 bytes object address in hex (2-4 string hex).  \n\n`OpenPGPcard.put_data( filehex, data_hex=\"\" )`  \nWrite data_hex in data object (\"DO\").  \nfilehex is 1 or 2 bytes object address in hex (2-4 string hex).  \nUsed in OpenPGP to configure the device, like key type or user info.\n\n`OpenPGPcard.get_identifier()`  \nReads and decode the Full Application Identifier (data object 0x4F).  \nInternally called at instanciation.\n\n`OpenPGPcard.get_length()`  \nOnly for OpenPGP v3. Reads and decode the Extended Length Info (data object \"7F66\").  \nInternally called at instanciation. The max attributes loaded are not yet used by others methods.\n\n`OpenPGPcard.get_features()`  \nReads and decode the optional General Feature Management (data object \"7F74\").  \nInternally called at instanciation. If not present, all features are supposed to be unavailable (attributes are False by default).\n\n`OpenPGPcard.display_features()`  \nPrints the General Feature Management attributes.\nInternally used by get_features for debug output.\n\n`OpenPGPcard.get_historical_bytes()`  \nRaw read of the Historical Bytes (data object \"5F52\").\n\n`OpenPGPcard.get_application_data()`  \nGet the Application Related Data (data object \"6E\").  \nReturn the content of the \"6E\" data object as a Python object with hex encodings data.\n\n`OpenPGPcard.get_pwstatus()`  \nGet the PW Status (data object \"C4\").  \nReturn the content of the \"C4\" data object as raw bytearray data.\n\n`OpenPGPcard.terminate_df()`  \nSend the TERMINATE DF command. Used to reset the card.\n\n`OpenPGPcard.activate_file()`  \nSend the ACTIVATE FILE command. Used to reset the card.\n\n`OpenPGPcard.reset( pin3 )`  \nFully reset the device. Requires the \"PUK\" PIN #3 as a string.\n\n`OpenPGPcard.get_random( data_length )`  \nReads random data from the device, using the GET CHALLENGE command (data_length bytes long).\n\n`OpenPGPcard.change_pin( old_pin, new_pin, pin_bank )`  \nChange the PIN in the bank 1 or 3 (PIN1 or PIN3). old_pin and new_pin are strings.  \nMinimum PIN length is 6 chars for PIN1, 8 chars for PIN3.\n\n`OpenPGPcard.verify_pin( pin_bank, pin )`  \nVerify the PIN code : pin_bank is 1, 2 or 3 for respectively SW1, SW2 or SW3. pin is a string with the PIN.\n\n`OpenPGPcard.get_pin_status( pin_bank )`  \nReads PIN status : returns remaining tries left for the given PIN bank address (1, 2 or 3).  \nReturn value is the number of remaining tries before the PIN block.  \nReturn value is 0 : PIN is blocked (no more tries).  \nReturn value is 9000 : PIN has been verified (OK).\n\n`OpenPGPcard.gen_key( keypos_hex )`  \nGenerates an assymetric key pair in a keypos slot address, by calling the GENERATE ASYMMETRIC KEY PAIR command. keypos_hex is the key object address (Control Reference Template) as 4 chars string (2 bytes address) : \"B600\" for sign key, \"B800\" for de/crypt key, \"A400\" for auth key.  \nUsually, the device reponds with the related public key of the key generated.  \nRequires the PIN3 \"PUK\" verified.\n\n`OpenPGPcard.get_public_key( keypos_hex )`  \nReads the public key in keypos slot address, by calling the GENERATE ASYMMETRIC KEY PAIR command (with the read pubkey flag). keypos_hex is the key object address (Control Reference Template) as 4 chars string \"hex\" (2 bytes address) : \"B600\" for sign key ref1, \"B800\" for de/crypt key ref2, \"A400\" for auth key ref3.  \nRequires the related PIN verified.\n\n`OpenPGPcard.sign( data )`  \nSigns data with the internal device SIGn key (Ref1), calling the COMPUTE DIGITAL SIGNATURE command.  \ndata is in bytes \"binary\" format. With ECDSA, data is the hash to sign.  \nRequires the PIN1 verified.  \nSee the OpenPGP application standard for more details about data format.\n\n`OpenPGPcard.sign_ec_der( datahash )`\nECDSA signs with the internal device SIGn key the hash datahash (bytes) and outputs the signature as ASN1 DER encoded (bytes). Requires the SIG key to be an EC type key pair (\"13...\" in \"C1\").  \nRequires the PIN1 verified.\n\n`OpenPGPcard.decipher( data )`  \nDecrypts data with the internal device DECryption key (Ref2), calling the DECIPHER command.  \ndata is in bytes \"binary\" format.  \nFor RSA : decrypts data, data input must be formatted according to PKCS#1 before encryption (device is checking padding conformance).  \nFor EC : performs an ECDH with the provided public key in data and the internal device DECryption private key.  \nRequires the PIN2 verified.  \nSee the OpenPGP application standard for more details.\n\n`OpenPGPcard.decipher_25519( external_publickey )`  \nDecrypts data with the internal device DECryption key with X25519 (Curve25519 ECDH). Obviously, requires the DEC key to be a Curve25519 key pair (\"122B060104019755010501\" in \"C2\"). As DECIPHER with EC, the device doesn\\'t decrypt data, but computes the private \"shared\" symmetric key with ECDH. Still quite like RSA where the decrypted data is also the private shared symmetric key.  \nexternal_publickey argument is \"x\" 32 bytes, as bytes. It performs an ECDH with the provided public key and the internal device DECryption private key.  \nRequires the PIN2 verified.  \n\n\n## License\n\nCopyright (C) 2020-2021  BitLogiK SAS\n\nThis program is free software: you can redistribute it and/or modify  \nit under the terms of the GNU General Public License as published by  \nthe Free Software Foundation, version 3 of the License.\n\nThis program is distributed in the hope that it will be useful,  \nbut WITHOUT ANY WARRANTY; without even the implied warranty of  \nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \nSee the GNU General Public License for more details.\n\n\n## ToDo\n\n* Secure Messaging\n* Verify\n* Sign helpers (RSA Tag/DSI)\n* Encipher\n* Make it more user friendly with more abstraction layers and data list, for example set_key(2, \"X25519\") sends PUT_DATA(\"122B060104019755010501\") in \"C2\"\n\n\n## Support\n\nOpen an issue in the Github repository for help about its use.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitlogik/OpenPGPpy",
    "keywords": "cryptography security openpgp hardware",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "OpenPGPpy",
    "package_url": "https://pypi.org/project/OpenPGPpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/OpenPGPpy/",
    "project_urls": {
      "Homepage": "https://github.com/bitlogik/OpenPGPpy"
    },
    "release_url": "https://pypi.org/project/OpenPGPpy/1.1/",
    "requires_dist": [
      "pyscard (==2.0.3)",
      "PyNaCl (==1.5.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "OpenPGP smartcard communication library",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17061864,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9278f8ad780112c9456ee97752d6eef1645670b65a569511f8250fafdc13b448",
          "md5": "beb73f42dd9ee95b71280fe492162d16",
          "sha256": "1b3703da7662bef03ec59b745e5d69dfd736b4184bc8351aa48d06f3fe686d33"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "beb73f42dd9ee95b71280fe492162d16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 16853,
        "upload_time": "2020-12-16T14:24:23",
        "upload_time_iso_8601": "2020-12-16T14:24:23.210120Z",
        "url": "https://files.pythonhosted.org/packages/92/78/f8ad780112c9456ee97752d6eef1645670b65a569511f8250fafdc13b448/OpenPGPpy-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4716b2eb276ac2493ba7e61e912fe190ffadee790904b578d835bc3abb6f245",
          "md5": "90727258d2d9ac5cefd5348e931e76a8",
          "sha256": "258e41bf992601cffa3cb5ac67d1472de81abca0ce2b406347ff0b79441f83bc"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90727258d2d9ac5cefd5348e931e76a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 21586,
        "upload_time": "2020-12-16T21:12:36",
        "upload_time_iso_8601": "2020-12-16T21:12:36.291638Z",
        "url": "https://files.pythonhosted.org/packages/c4/71/6b2eb276ac2493ba7e61e912fe190ffadee790904b578d835bc3abb6f245/OpenPGPpy-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ada35b4f552a60ef723f17807e4f1af6ee9ae1d9a7fdd148da003bb54a500c7",
          "md5": "c6c79fa6d4e462d6e62827084e8f12df",
          "sha256": "5579e1dd4a5c8bd66beb3eef6214f52fb32d067b876614e0015f22226a45084b"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6c79fa6d4e462d6e62827084e8f12df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 22317,
        "upload_time": "2021-01-25T09:45:41",
        "upload_time_iso_8601": "2021-01-25T09:45:41.359220Z",
        "url": "https://files.pythonhosted.org/packages/4a/da/35b4f552a60ef723f17807e4f1af6ee9ae1d9a7fdd148da003bb54a500c7/OpenPGPpy-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cda5160d4ba267c1569442d98a5846a4d75a65ddf2d05fea3da6a5ba6691092",
          "md5": "86f1947afbe69e173370445d51f5d2ef",
          "sha256": "02e4b00f00e5594ce8edb175efaac234c7c52d97e1837e3df76b848f0e0ad29d"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86f1947afbe69e173370445d51f5d2ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22917,
        "upload_time": "2021-03-07T18:13:50",
        "upload_time_iso_8601": "2021-03-07T18:13:50.649912Z",
        "url": "https://files.pythonhosted.org/packages/6c/da/5160d4ba267c1569442d98a5846a4d75a65ddf2d05fea3da6a5ba6691092/OpenPGPpy-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44fe47b94db96f66f8ac3b200d8317ae3716f77df9c96ec334e603d9374b443e",
          "md5": "6eb74f3e069d2138dee9139cb521022b",
          "sha256": "4d755ccb2d4b35a1f19a887099d0b1f950059ecc71ef82d29a0d1101d6956e90"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6eb74f3e069d2138dee9139cb521022b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23612,
        "upload_time": "2021-06-15T09:30:24",
        "upload_time_iso_8601": "2021-06-15T09:30:24.611155Z",
        "url": "https://files.pythonhosted.org/packages/44/fe/47b94db96f66f8ac3b200d8317ae3716f77df9c96ec334e603d9374b443e/OpenPGPpy-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d6a72bf46a564d73b9705ec430daf3520921e806138d1fc144bacd8f6833e00",
          "md5": "443b1d8c15fef19988421c32759af6b5",
          "sha256": "fb402b1b59dcdb1ead57d9af22cbc260fecb29bf37511a6932f020282398218f"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "443b1d8c15fef19988421c32759af6b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24266,
        "upload_time": "2022-02-02T13:21:50",
        "upload_time_iso_8601": "2022-02-02T13:21:50.256637Z",
        "url": "https://files.pythonhosted.org/packages/4d/6a/72bf46a564d73b9705ec430daf3520921e806138d1fc144bacd8f6833e00/OpenPGPpy-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04b0596c3415c286011e36757071cd52192e2697defd0e22e1e261685f79c46f",
          "md5": "fa8b43e196466d8ec7a290dec24ade19",
          "sha256": "b9993e41065d14159d588e1733e3430f7680f8ec4ff02a43c3685970d6c59a53"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa8b43e196466d8ec7a290dec24ade19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24495,
        "upload_time": "2022-02-05T15:34:22",
        "upload_time_iso_8601": "2022-02-05T15:34:22.046035Z",
        "url": "https://files.pythonhosted.org/packages/04/b0/596c3415c286011e36757071cd52192e2697defd0e22e1e261685f79c46f/OpenPGPpy-0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc263cf05402abd05b1861fb3674df6d9765450c9f23a2f7834b6799a95cb83d",
          "md5": "7e16dccbdc80b3382732602863085cd2",
          "sha256": "723217378cd312abd4bd5edecd793c7f9f7406d7ff0fed565bb13902cd1c9d55"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e16dccbdc80b3382732602863085cd2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24745,
        "upload_time": "2022-02-07T19:06:11",
        "upload_time_iso_8601": "2022-02-07T19:06:11.626771Z",
        "url": "https://files.pythonhosted.org/packages/dc/26/3cf05402abd05b1861fb3674df6d9765450c9f23a2f7834b6799a95cb83d/OpenPGPpy-0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99e38894979ea09a3c7f25103c2afa098dfdd8908a956d82f564f2307b1730fb",
          "md5": "7367426966cc25adaf86a29315047f8a",
          "sha256": "ada3488c85740114b7ebb72257d7e7fb747c472f67b742b2e6ef45aa83f0adb6"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7367426966cc25adaf86a29315047f8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24749,
        "upload_time": "2022-04-28T12:55:35",
        "upload_time_iso_8601": "2022-04-28T12:55:35.677707Z",
        "url": "https://files.pythonhosted.org/packages/99/e3/8894979ea09a3c7f25103c2afa098dfdd8908a956d82f564f2307b1730fb/OpenPGPpy-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78ceb2e440b9781bd274bb960074890e4846186b0a603025266affdf98292f79",
          "md5": "d0af9db38f6bdfac2b826c34f2b2f605",
          "sha256": "abfe2f05067b4a120c5c3b326d054f8b589c2c4ee75203bcbb18538e8e48bc41"
        },
        "downloads": -1,
        "filename": "OpenPGPpy-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0af9db38f6bdfac2b826c34f2b2f605",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24748,
        "upload_time": "2023-02-27T09:29:42",
        "upload_time_iso_8601": "2023-02-27T09:29:42.462547Z",
        "url": "https://files.pythonhosted.org/packages/78/ce/b2e440b9781bd274bb960074890e4846186b0a603025266affdf98292f79/OpenPGPpy-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78ceb2e440b9781bd274bb960074890e4846186b0a603025266affdf98292f79",
        "md5": "d0af9db38f6bdfac2b826c34f2b2f605",
        "sha256": "abfe2f05067b4a120c5c3b326d054f8b589c2c4ee75203bcbb18538e8e48bc41"
      },
      "downloads": -1,
      "filename": "OpenPGPpy-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0af9db38f6bdfac2b826c34f2b2f605",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24748,
      "upload_time": "2023-02-27T09:29:42",
      "upload_time_iso_8601": "2023-02-27T09:29:42.462547Z",
      "url": "https://files.pythonhosted.org/packages/78/ce/b2e440b9781bd274bb960074890e4846186b0a603025266affdf98292f79/OpenPGPpy-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}