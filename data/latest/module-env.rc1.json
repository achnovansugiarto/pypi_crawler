{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# ModuleEnv\n\nContext manage-able module-environments for python!\nHave you ever needed multiple verions a python module installed?\nWanted to temprarily pollute `sys.path` or `import` some module but were afraid of polluting the global environment? \n\nWorry no more! `ModuleEnv` is like a runtime virtualenv for python modules! \nThe best part, it's just a context manager, `with ModuleEnv()` is all you need!\n\n### Install\n```bash\npip install module_env\n```\n\n# Usage\n\nThis module exposes three classes:\n1. `ModuleEnv`\n1. `InverseModuleEnv`\n1. `UsageError`\n\n#### ModuleEnv\n\nThis is the main class is `ModuleEnv`.\nThis class provides a context manager for a module environment.\n\n_Construction_: Upon construction, a `ModuleEnv` will save a copy of the current environment as its own.\nThat is, the env the `ModuleEnv` instance uses is initialized as a copy of the environment at time of construction\nThis does mean that if constructed within another `ModuleEnv`'s context, it will copy that installed context.\n\nGenerally users will want to default construct \nthis class, but this class does permit users to specify\nwhich attributes within `sys` are saved and restored during module setup and teardown.\nThis can be done as follows:\n```python\nstandard = ModuleEnv()\ncustom = ModuleEnv(sys_attrs=(\"meta_path\", \"path_hooks\", \"path\", \"path_importer_cache\"))\n```\nThese attributes are assigned and copies during setup and teardown.\n`sys.modules` is automatically updated; though its underlying object remains the same.\n\n_Context Manager_: The main use of this class is as a context manager.\nEntering the context applies the environment; exiting restores the previous environment.\nModule environments are not nestable!\nAn example usage:\n```python\nfrom module_env import ModuleEnv\nimport sys\n\ndef multi():\n    import multiprocessing\n\nwith ModuleEnv():\n    multi()  # Import in a function so globals() / locals() is not affected\n    assert \"multiprocessing\" in sys.modules  # Imported in env\n    \nassert \"multiprocessing\" not in sys.modules  # Not outside of env\n```\n\n`.inverse()`: Module environment contexts can temporarily be escaped \nwithout exiting a context manager via a child `InverseModuleEnv`.\nIn this case, entering the context of a new `ModuleEnv` is permissible.\nFor example:\n```python\nfrom module_env import ModuleEnv\nimport sys\n\ndef multi():\n    import multiprocessing\n\nwith ModuleEnv() as env:\n    with env.inverse():  # Restore global env\n        multi()\n    assert \"multiprocessing\" not in sys.modules  # Not imported in env\n\nassert \"multiprocessing\" in sys.modules  # Imported global env\n```\n\n`__getitem__`: While modules imports a properly preserved by a `ModuleEnv`, it does not affect the variables in\nyour scope; that is `globals()` and `locals()` remain unchanged.\nFor this reason, it is recommended not to execute much code directly\nwithin a `with ModuleEnv()` but rather wrapped by a function.\nThat way, after exiting the env, any 'no longer imported' modules are not still reference-able via scoped variables.\nAlong these lines, entering an environment does not set up `globals()` nor `locals()` with your import modules.\nOne way to handle this is to just call `import` on the module again, since the module itself is already imported,\nthis should just be a variable assignment.\n`ModuleEnv`s expose a `__getitem__` function which is functionally just `__import__` for the given environment;\nthis function is only usable when the environment is active.\nThis is just syntactic sugar that might allow explicitness about which environment ought to be active \nat the time of the call, verifying this statement each use.\nFor example, here are three ways to import :\n```python\nfrom module_env import ModuleEnv\n\nwith ModuleEnv() as env:\n    # Three functionally identical ways of importing multiprocessing\n    m1 = env[\"multiprocessing\"]\n    m2 = __import__(\"multiprocessing\")\n    import multiprocessing as m3\n    assert m1 is m2 and m2 is m3\n```\n\n_Thread Saftey_: Editing `sys` attributes is inherently not thread-safe.\nIf using in a multithreaded environment, keep this in mind\nand do not use `ModuleEnv`'s concurrently in multiple threads.\n\n#### InverseModuleEnv\nThis context-manager class allows for escaping a `ModuleEnv` context without exiting the context manager.\nEntering the context an `InverModuleEnv` restores the module\nenvironment to the environment the parent `ModuleEnv` has active.\nAn `InverseModuleEnv` can exclusively invert the environment of the `ModuleEnv` which created it.\nEntering the context of a `ModuleEnv` when in the context of an `InverseModuleEnv` is allowed, as the \n`InverseModuleEnv` context between the two `ModuleEnv` functionally inverts the first,\nmeaning the second `ModuleEnv` context is not actually nested\n\nConstructing an `InverseModuleEnv` can _only_ be done via a `ModuleEnv`'s `.inverse()` function.\nThe `ModuleEnv` responsible for creating the `InverseModuleEnv` is considered the parent.\n\n`InverseModuleEnv`s contexts may only be entered if within the \nJust like `ModuleEnv`s, \n\nFor example:\n```python\n# Global environment\nwith ModuleEnv() as env:\n    # 'env' environment\n    with env.inverse() as inv:\n        # Global environment\n        with env:\n            # 'env' environment\n            pass\n        with ModuleEnv() as env2:\n            # 'env2' environment\n            pass\n```\n\nInvalid uses examples:\n```python\nenv = ModuleEnv()\ninv = env.inverse()\n# with inv:  # INVALID\n#   InverseModuleEnv contexts may only be entered if the parent env is active\nwith env, inv:\n    # 'env' environment\n    with ModuleEnv() as env2:\n        # with inv:  # INVALID: \n            # Only env2.invert() can invert env2!\n        pass\n    # with env.inverse().inverse():  # INVALID\n        # A new env.inverse() is a different object than inv\n        # Thus env.inverse().inverse() is not inv's child\n        # Only children can invert their parent!\n```\n\n#### UsageError\nThis exception type is raised if a user misuses a `ModuleEnv` or `InverseModuleEnv`.\nFor example, if a user attempts to nest one ModuleEnv within another.\n\n### Practical Example:\n\nConsider two directory containing different versions of a module `foo`: `foo_v1` and `foo_v2`:\n```python\nfrom module_env import ModuleEnv\nimport sys\n\nv1 = ModuleEnv()\nwith v1:\n    sys.path.append(\"./foo_v1\")\n    import foo\n\nsys.path.append(\"./foo_v2\")\nimport foo\n\nassert foo.__version__ == \"2.0\"\nwith env:\n    assert foo.__version__ == \"1.0\"\n```\n\n# Development\n\n### Tests\n\nTests are available in the `./tests` directory.\nFrom the root directory, running them is as simple as:\n```bash\npip install .\ncd tests\npython -m unittest\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "module-env",
    "package_url": "https://pypi.org/project/module-env/",
    "platform": null,
    "project_url": "https://pypi.org/project/module-env/",
    "project_urls": {
      "Homepage": "https://github.com/zwimer/module_env"
    },
    "release_url": "https://pypi.org/project/module-env/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Context manage-able module-environments for python!",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16108394,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3b8e4f70c7949901fb39bcec65f40a2a75a0b95d106a41b436075cfca88d076",
          "md5": "930c9a61bea6f634bcef7f8782bea233",
          "sha256": "a0700b99c98e937c05e1b8a7b4bf26e28d382f04e1758b76807310136e84203e"
        },
        "downloads": -1,
        "filename": "module_env-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "930c9a61bea6f634bcef7f8782bea233",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18000,
        "upload_time": "2022-12-15T02:34:14",
        "upload_time_iso_8601": "2022-12-15T02:34:14.735283Z",
        "url": "https://files.pythonhosted.org/packages/b3/b8/e4f70c7949901fb39bcec65f40a2a75a0b95d106a41b436075cfca88d076/module_env-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e693de28ac18c4586f0129be1052b1f3fa8ed07d5ee417df0eca63ac1e9b74a5",
          "md5": "ad9f67f848d65d3d6cb72f57d32c77d8",
          "sha256": "7a128c553b1a50e2617a6f1beabe775e13215015a826ff58afa2a40122304dd6"
        },
        "downloads": -1,
        "filename": "module_env-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad9f67f848d65d3d6cb72f57d32c77d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17381,
        "upload_time": "2022-12-15T02:34:16",
        "upload_time_iso_8601": "2022-12-15T02:34:16.346534Z",
        "url": "https://files.pythonhosted.org/packages/e6/93/de28ac18c4586f0129be1052b1f3fa8ed07d5ee417df0eca63ac1e9b74a5/module_env-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3b8e4f70c7949901fb39bcec65f40a2a75a0b95d106a41b436075cfca88d076",
        "md5": "930c9a61bea6f634bcef7f8782bea233",
        "sha256": "a0700b99c98e937c05e1b8a7b4bf26e28d382f04e1758b76807310136e84203e"
      },
      "downloads": -1,
      "filename": "module_env-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "930c9a61bea6f634bcef7f8782bea233",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18000,
      "upload_time": "2022-12-15T02:34:14",
      "upload_time_iso_8601": "2022-12-15T02:34:14.735283Z",
      "url": "https://files.pythonhosted.org/packages/b3/b8/e4f70c7949901fb39bcec65f40a2a75a0b95d106a41b436075cfca88d076/module_env-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e693de28ac18c4586f0129be1052b1f3fa8ed07d5ee417df0eca63ac1e9b74a5",
        "md5": "ad9f67f848d65d3d6cb72f57d32c77d8",
        "sha256": "7a128c553b1a50e2617a6f1beabe775e13215015a826ff58afa2a40122304dd6"
      },
      "downloads": -1,
      "filename": "module_env-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ad9f67f848d65d3d6cb72f57d32c77d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17381,
      "upload_time": "2022-12-15T02:34:16",
      "upload_time_iso_8601": "2022-12-15T02:34:16.346534Z",
      "url": "https://files.pythonhosted.org/packages/e6/93/de28ac18c4586f0129be1052b1f3fa8ed07d5ee417df0eca63ac1e9b74a5/module_env-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}