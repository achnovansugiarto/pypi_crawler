{
  "info": {
    "author": "Brais Mu√±iz",
    "author_email": "mc.brais@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# crystal-tree\n\nThe goal of crystal-tree package is to provide simple, crystal-clear, natural language explanations for the predictions from classification Decision Trees. \n\nThis simple python package provides an object for obtaining explanations from a (for now [scikit-learn](https://scikit-learn.org/stable/)'s) Decision Tree Classifier.\n\nThe implementations consists in the translation of the Decision Tree into an explainable logic program for [xclingo](https://github.com/bramucas/xclingo).\n\nGiven an input, the CrystalTree object will provide the prediction from the original tree, justified by a summarized version of the conditions checked by the tree to ultimately produce the prediction. The explanations are provided as python objects which can be easily represented as text. The text used for the explanations admit some personalization, which allows the user to adapt them particular contexts (different languages, different levels of expertise, etc.)\n\n\n## Installation\n\n```\npython -m pip install crystal-tree\n```\n\n## Usage\n\nThe following program will train a Decision Tree into the task of predicting types of flowers (throught the well-known Iris dataset), and then it will some explanations as an example.\nThe program requires the following modules to be installed:\n```\npython -m pip instll sklearn pandas\n```\n\n```python\nfrom sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom crystal_tree import CrystalTree\n\n# Loads dataset\nX, y = load_iris(return_X_y=True, as_frame=True)\n\n# Trains decision tree\nclf = DecisionTreeClassifier()\nclf.fit(X,y)\n\n# Translates the classifier into an explainable logic program\ncrys_tree = CrystalTree(clf)\n\n# Print explanations of input X (two arbitrary rows)\nfor e in crys_tree.explain(X.iloc[[0, 54]]):\n    print(e.ascii_tree())\n```\n\nThis will produce the following output.\n```\n  *\n  |__Predicted class 0 for instance 0\n  |  |__petal width (cm) <= 0.8\n\n  *\n  |__Predicted class 1 for instance 1\n  |  |__petal length (cm) <= 4.9\n  |  |__petal width (cm) in (0.8,1.6]\n```\n\nMore examples concerning personalization of explanations can be found in the ```examples/``` directory in this repository. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bramucas/crystal-tree",
    "keywords": "artificial intelligence,explainable artificial intelligencelogic programming,answer set programming",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crystal-tree",
    "package_url": "https://pypi.org/project/crystal-tree/",
    "platform": null,
    "project_url": "https://pypi.org/project/crystal-tree/",
    "project_urls": {
      "Homepage": "https://github.com/bramucas/crystal-tree"
    },
    "release_url": "https://pypi.org/project/crystal-tree/0.2/",
    "requires_dist": [
      "dafact",
      "importlib-resources",
      "numpy",
      "setuptools-git",
      "sklearn",
      "xclingo"
    ],
    "requires_python": ">=3.6.0",
    "summary": "From large, deep trees to short, clear explanations.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14140993,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0da21775d9ef36dbc0e1700fa4668e7f7110ebc4f735d733fc1c0a205d4eda4",
          "md5": "66746c3d904b610a587b6f7043a53c18",
          "sha256": "18ab4a163e228a08b15e46dea9eb4b9baa1c3127a4d9291c212004dfa9626748"
        },
        "downloads": -1,
        "filename": "crystal-tree-0.2.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "66746c3d904b610a587b6f7043a53c18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 12083,
        "upload_time": "2022-06-15T15:20:29",
        "upload_time_iso_8601": "2022-06-15T15:20:29.152239Z",
        "url": "https://files.pythonhosted.org/packages/d0/da/21775d9ef36dbc0e1700fa4668e7f7110ebc4f735d733fc1c0a205d4eda4/crystal-tree-0.2.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb29b73c2ec5b5b252b8c9ef915b4aff39a987d9df259b7c7339e634e01352d7",
          "md5": "16b9f7383d9a66fe52ab4fa3a72f6231",
          "sha256": "7679635a8a8e410b88a99a86d0bddb19208978924252aa56a8d7ae06036c89d8"
        },
        "downloads": -1,
        "filename": "crystal_tree-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16b9f7383d9a66fe52ab4fa3a72f6231",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8176,
        "upload_time": "2022-06-15T15:20:27",
        "upload_time_iso_8601": "2022-06-15T15:20:27.517236Z",
        "url": "https://files.pythonhosted.org/packages/bb/29/b73c2ec5b5b252b8c9ef915b4aff39a987d9df259b7c7339e634e01352d7/crystal_tree-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0da21775d9ef36dbc0e1700fa4668e7f7110ebc4f735d733fc1c0a205d4eda4",
        "md5": "66746c3d904b610a587b6f7043a53c18",
        "sha256": "18ab4a163e228a08b15e46dea9eb4b9baa1c3127a4d9291c212004dfa9626748"
      },
      "downloads": -1,
      "filename": "crystal-tree-0.2.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "66746c3d904b610a587b6f7043a53c18",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 12083,
      "upload_time": "2022-06-15T15:20:29",
      "upload_time_iso_8601": "2022-06-15T15:20:29.152239Z",
      "url": "https://files.pythonhosted.org/packages/d0/da/21775d9ef36dbc0e1700fa4668e7f7110ebc4f735d733fc1c0a205d4eda4/crystal-tree-0.2.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb29b73c2ec5b5b252b8c9ef915b4aff39a987d9df259b7c7339e634e01352d7",
        "md5": "16b9f7383d9a66fe52ab4fa3a72f6231",
        "sha256": "7679635a8a8e410b88a99a86d0bddb19208978924252aa56a8d7ae06036c89d8"
      },
      "downloads": -1,
      "filename": "crystal_tree-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16b9f7383d9a66fe52ab4fa3a72f6231",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 8176,
      "upload_time": "2022-06-15T15:20:27",
      "upload_time_iso_8601": "2022-06-15T15:20:27.517236Z",
      "url": "https://files.pythonhosted.org/packages/bb/29/b73c2ec5b5b252b8c9ef915b4aff39a987d9df259b7c7339e634e01352d7/crystal_tree-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}