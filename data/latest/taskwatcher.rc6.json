{
  "info": {
    "author": "Cedric GUSTAVE",
    "author_email": "cgustave@free.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Networking"
    ],
    "description": "## taskwatcher\n\n#### DESCRIPTION\n\n**'taskwatcher'** is a set of libraries/commands to turn scripts/programs into **tasks** :\n\n- **launch.py**  : Starts a new task under taskwatcher monitoring\n- **control.py** : General control commands\n- **parse.py**   : Feedback file parser, returns a json string from the feedback file\n\nAn **history** of the terminated tasks is kept.  \nA **status** of the currently running tasks is available.\n\nTasks are **monitored** by checking if pid is still in process list.\nOptionally, if feedback is provided by the launched program, program is expected to provide *heartbeat* by updating the feedback file.  \n\nAn optional **task timeout** may terminated the task if no hearbeat was received during the allowed 'timeout' period.  \n\nThere are conditions applies so a task can start, multiple scenario :\n\n1) Task does not provide feedack, can run multiple time:\n- no control need, a call to lauch would be enough, task would be automatically reserved and launched\n\n2) Task does not provide feeback but only one of this kind should work at a given timer:\n- a reservation with a task name and option --unique set should be done befor calling launch. A taskid would be returned, use this task id in call to lauch.\n\n3) Task provides feeback.\n- Reservation is required prior calling launch.  \n- If task should only run once, use --unique option during reservation.  \n\nPrior to any launch call to start a new task, a taskid (number) should have been reserved with a call control.py --reserve.\n\nA feedback file is a simple text file with key/value pairs. It can be parsed with parse.py to return a json formated string.\n\n\n###### Limitations\n\n- Currently only supports mono-process program (track a single pid)\n\n\n#### Design\n\nChoice was made to avoid complex sockets operations.\nSimple design with feedback files also allows simple state recovery, simplicity and versatility of the feedback parameters.\nA basic file-based sqlite database is used to store running tasks data and keep track of historical tasks, instead of implementing a daemon.\n\n\n#### Configuration\n\n- Currently no configuration file is implemented. All options should be provided using cli options.\n- No centralized daemon: \n\t- a launcher is started with the program to run\n\t- getting feeback from the running task can be done by calling control.py with command 'feedback'\n\t- history and current status of running tasks are located in sqlite db\n\n\n#### Expectation from the launched command\n\nA command may be ran without specific requirement, however to benefit from additional features, the run command may provide feedback via a text file.  \nThe suggestion is to add to programs launched with taskwatcher a command line option (--feedback) to generate the **feedback** file.  \nThe feedback file is expected to be named based on the taskid : feedback_TASKID.log\nExample :  \n\n- Call without taskwatcher :  \n\t`checkitbaby.py --playbook myPlaybook --playlist myPlaylist --run 1 --dryrun`\n\n- Same call with taskwatcher :  \n\t- Get a taskid : `control.py --reserve`  ==> Got 1\n\t- Launch task using taskid 1 :  \n\t`launch.py --taskid 1 --name 'Runner' --info1 'Info1' --info2 'Info2' --info3 'Info3' --feedpath /fortipoc/playbooks/myPlaybook/run/1 --db /fortipoc/taskwatch/sqlite.db --timeout 30 -- checkitbaby.py --playbook myPlaybook --playlist myPlaylist --run 1 --dryrun --feedback feedback_1.log`\n\n\tNotes : \n    - info1, info2, info3 are optional, it can be usefull to store side information in the task manager\n\t- the command to run is located after the --\n\t- called program is informed with --feedback feedback_1.log that it should write a feedback file named feedback_1.log\n\n\n##### Running task status\n\n- **without feedback :**\n\t- **running**    : pid of the task is seen\n\n- **with feedback :** \n\n\t- **running**    : pid of the task is seen,  \n\t\t               last feedback file update was done in less than 25% of timeout timer\n\n\t- **silent**     : pid of the task is seen,  \n\t\t               last feedback file update was done in less than 50% of timeout timer\n\n\t- **stalled**    : pid of the task is seen,  \n\t                   last feedback file update was done in less than 75% of timeout timer\n\n###### Feedback file syntax\n\nThe feedback file is named 'feedback.log', it should be generated by the launched program.\nAny kind of usefull information could be delivered as long as :\n- it is key/value pair\n- line starts with a keywork emcompassed with [] to specify the information keyword.\n- keyword should have no spaces and should not start with a digit\n- value provided should immediately follow the [keyword] without spaces\n- line starting with # are considered comments/debug and will be ignored\n- empty lignes will be ignored\n- a keyword without any value on a line clears the keyword and value information from the feedback\n- [] (without keyword) clears all key/value pairs collected up to this point.\n  Note : this could be usefull to end the task with a clear followed by a report.\n\n\n###### Feedback file processing\n\n- launch.py does not parse feedback file. It only checks the file update from the file update time for the task timeout fonction.\n- control.py processed feedback file to provide output.  \n  The last read value for a keyword updates any precedent values.  \n- use parse.py to parse and retrieve json from the feedback file.  \n\n- Example of a feedback.log\n~~~\n[info]Starting test\n[playbook]myPlaybook\n[info]\n[heartbeat]\n[testcase_id]001\n[testcase_name]Initialization\n[progress]12\n[progress]15\n[testcase_id]002\n[testcase_name]Setting up topology\n[progress]10\n~~~\n\n- If processed until this point, the above output would provide information like:\n```json\n{ \n  \"playbook\"      : \"myPlaybook\",\n  \"testcase_id\"   : \"002\",\n  \"testcase_name\" : \"Setting up topology\",\n  \"progress\"      : \"10\"\n}\n```\nNotes :  \n- 'info' is not provided because it was cleared by the '[info]' line in line 3\n- 'heartbeat' has no information, it would only reset the 'timeout' counter\n\n\n#### launch.py\n\n```tex\nRoles : \n   - launches command\n   - monitor the command checking its pid in process list\n   - monitor activity of the feedback file (by its update timing information)\n   - kills command if not updating feedback file within the timeout \n   - update the running task db about process state, duration and timer status\n   - manage task termination : archive task on database, delete feedback file\n\nPre-requisite :\nA unique taskid should have been reserved from a call to control.py to avoid duplicates.\nIf no reservation was made, the task won't start\n\nUsage : launch.py --db <database> --taskid <taskid> --command '<process or script with all its options>'\n\nParameters :\n--db       <database>     : sqlite database file\n--taskid   <taskid>       : task identifier (could be a number or a generated random string (8 chars max)    \n\nOptional parameters :  \n--name     <name>         : Name for the task. Use command name if not provided\n--info1 INFO1             : any information (optional)\n--info2 INFO2             : any information (optional)\n--info3 INFO3             : any information (optional)\n\n--feedpath <path>         : Feedback path where feedback.log is expected\n--timeout  <seconds>      : a value in second after which the command is considered timeout\n\t\t\t\t            and should be kill (any update in feedback.log resets the timer)\n```\n\n#### control.py\n\n```tex\nRoles :\n   - Provide list of all running tasks with their latests status\n   - Provide history of terminated tasks\n   - Provide all latests feedback information from the task\n   - Manage history\n   - Kill task (and cleanup feedback file if necessary)\n   - Initialise (or re-initialize db)\n   - Set a reservation for a task id\n\nUsage : control.py --db <database> <command>\n\nOptions :\n--db <database>      : sqlite database file\n\nList of available commands :\n\n--initialize         : Create or recreates a task database (all info is lost)\n\n--update             : Update database time informations (task duration)\n\n--list               : Provides a table displaying the list of the currently running tasks with : \n                       [ taskid, name, info1, info2, info3, pid, status, starttime, duration(s), feedback(yes/no), timer(s), timeout(s) ]\n\n--reserve            : Returns a unique taskid, reserved for future call of the launcher\n\n--feedback <taskid>  : Returns a json formatted output of the feedback values for the given task\n                     : Only available if the command provides feedback (feedback=yes in list)\n\n--history            : Dump all historical tasks completed\n--clear              : Clear all tasks history\n\n--kill <taskid>      : Request to terminate a specific task\n--killall <taskname> : Request to terminate all tasks named <taskname>\n\n```\n\n#### parse.py\n\n```tex\nusage: parse.py [-h] [--debug] --feedback filename\n\nTask controller\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --debug, -d          turn on debug\n  --feedback filename  selects feedback file to process\n\n\nExample: \n ./parse.py --feedback tests/textfile_progress.txt\n {\\\"progress\\\": \\\"100\\\"}\n```\n\n\n### sqlite database\n\nAn sqlite database is used for 3 purposes :\n\n- keep track of the current running tasks :  \n  Launcher.py updates tasks status but does not process feedback\n\n- keep track of the latest feedback from the launched command  \n  control.py called with --feedback parses command feedback file, stores information and returns a json object\n\n- keep an history of the previously completed tasks  \n  control.py called with --history\n\n\n**Table format**\n\n```tex\n* Table tasks:\n  Keeps track of running tasks status\n  -----------------------------------------------------------------------------------------------------------------------------------------------------------------\n  |       id(#1)        |  name | info1 | info2 | info3 |   pid   |   status   |   feedback    |  reservetime |   starttime   | duration |  lastupdate  | timeout |\n  | INTEGER PRIMARY KEY |  TEXT | TEXT  | TEXT  | TEXT  | INTEGER |  TEXT(#2)  |  INTEGER(#3)  |  INTEGER(#4) |   INTEGER(#4) | INTEGER  |  INTEGER(#4) | INTEGER |\n  -----------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n  Note : \n    #1 : should be automatic (use null during insert)\n    #2 : RESERVED|RUNNING|SILENT|STALLED\n    #3 : 0 if no feedback provided ; 1 if feedback provided\n    #4 : unix date format\n\n  taskid reservation consists of inserting a new task with all field empty, except status=RESERVED and reservetime set\n\n* Table feedbacks:\n  Keeps track of data feebacks from the run command, stored as json key/value pairs\n  ---------------------------------------\n  |    id   | feedback  |   lastupdate  |\n  | INTEGER |  BLOB(#1) |   INTEGER(#2) |\n  ---------------------------------------\n\n  Note :\n  #1 : json format expected\n  #2 : unix date format\n\n\n* Table history:\n  Keeps track of the completed tasks\n  Final state of json feedback is stored (this allows to store json reports before the command terminates)\n  --------------------------------------------------------------------------------------------------------------------------------------------------------\n  |       id(#0)        |  taskid(#1)  | taskname |  info1 | info2 | info3 | termsignal | termerror |   starttime   |   endtime   | duration | feedback  | \n  | INTEGER PRIMARY KEY |   INTEGER    |   TEXT   |  TEXT  | TEXT  | TEXT  |  TEXT(#1)  |  TEXT(#2) |   INTEGER(#3) | INTEGER(#3) | INTEGER  |  BLOB(#4) |\n  --------------------------------------------------------------------------------------------------------------------------------------------------------\n\n  Notes :\n  #1 : keeps track of the type of termination signal\n  #2 : keeps track of the terminaison error message if any\n  #3 : unix date format\n  #4 : json format expected\n\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cgustave/taskwatcher",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "taskwatcher",
    "package_url": "https://pypi.org/project/taskwatcher/",
    "platform": "",
    "project_url": "https://pypi.org/project/taskwatcher/",
    "project_urls": {
      "Homepage": "https://github.com/cgustave/taskwatcher"
    },
    "release_url": "https://pypi.org/project/taskwatcher/1.7/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Package taskwatcher",
    "version": "1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7285669,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "668290bd28f8974e6fdce44d44e9184bdd75a4dfcc80ca849cdcaaa9c50e0c3c",
          "md5": "cd7bd41ffc4b3ccd98d0bb18851e9c65",
          "sha256": "818b50d29e6fe44b9e53eb041c8c83545e1235e450b8868efb30d248c3fb6230"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd7bd41ffc4b3ccd98d0bb18851e9c65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18972,
        "upload_time": "2020-05-16T17:29:24",
        "upload_time_iso_8601": "2020-05-16T17:29:24.429587Z",
        "url": "https://files.pythonhosted.org/packages/66/82/90bd28f8974e6fdce44d44e9184bdd75a4dfcc80ca849cdcaaa9c50e0c3c/taskwatcher-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "092dd70d1e2cb03fed470db399b0143ce61b4a9a26f43749042d4cd0deefb4b1",
          "md5": "cfc66d27ca670c4c52a1df97d782030d",
          "sha256": "f6d7adfa460b24662dec09d8cb996ed22b8c00a8e2727f2a22befee031da5f06"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cfc66d27ca670c4c52a1df97d782030d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 20284,
        "upload_time": "2020-05-16T17:29:27",
        "upload_time_iso_8601": "2020-05-16T17:29:27.326274Z",
        "url": "https://files.pythonhosted.org/packages/09/2d/d70d1e2cb03fed470db399b0143ce61b4a9a26f43749042d4cd0deefb4b1/taskwatcher-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcadbe914423be4f8c4df13a3e375e208f599f7d34b2303f8686c688392fae45",
          "md5": "3247ee681b74dbb58aea9f69463d01ff",
          "sha256": "7c3f38c529e4db7d69f8d7c8d7a17f8d2357aa284784702a5e4d3edaf03cc60d"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3247ee681b74dbb58aea9f69463d01ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18973,
        "upload_time": "2020-05-16T20:07:12",
        "upload_time_iso_8601": "2020-05-16T20:07:12.900869Z",
        "url": "https://files.pythonhosted.org/packages/bc/ad/be914423be4f8c4df13a3e375e208f599f7d34b2303f8686c688392fae45/taskwatcher-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17992eb618f1c7b027b41a8077ed76ee124f8b10d8782d212be6126816034698",
          "md5": "6f5547c531a367f0bc730e3097309227",
          "sha256": "1581c33f63a88d5b2cf73bba05c91a49483e4176b07ca696ffb37a80fad72b51"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6f5547c531a367f0bc730e3097309227",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 20268,
        "upload_time": "2020-05-16T20:07:14",
        "upload_time_iso_8601": "2020-05-16T20:07:14.959716Z",
        "url": "https://files.pythonhosted.org/packages/17/99/2eb618f1c7b027b41a8077ed76ee124f8b10d8782d212be6126816034698/taskwatcher-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddec0eceeaf6948b788633ea40d814f3da4f6661b40259711e53311eeb23cf40",
          "md5": "ae2129b01768be4029db6a1bbdc24341",
          "sha256": "6d03384d55ec3537d6e0e11b409c7269efddca6db5657f8c37805fedf05296e4"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae2129b01768be4029db6a1bbdc24341",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 18980,
        "upload_time": "2020-05-16T20:15:10",
        "upload_time_iso_8601": "2020-05-16T20:15:10.898616Z",
        "url": "https://files.pythonhosted.org/packages/dd/ec/0eceeaf6948b788633ea40d814f3da4f6661b40259711e53311eeb23cf40/taskwatcher-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f9ee99d98f3669538afad1b9a240d48bbc7c34863f3f4ba69773c0c1068d996",
          "md5": "fb313babfcead87003061ec3f715b900",
          "sha256": "9fba4caaa54791dc5cd7d2cc5e0a57208d89a556674a4626f1e2ae0ce5dacd8b"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fb313babfcead87003061ec3f715b900",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 20282,
        "upload_time": "2020-05-16T20:15:14",
        "upload_time_iso_8601": "2020-05-16T20:15:14.416844Z",
        "url": "https://files.pythonhosted.org/packages/1f/9e/e99d98f3669538afad1b9a240d48bbc7c34863f3f4ba69773c0c1068d996/taskwatcher-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4be926526ce27b0eef15cf9276a921f3d8ded8cf7f85c9b1a45d06fa20cca32",
          "md5": "81cd38ca7c06dc6591cb2557313cfbb1",
          "sha256": "534a8e2947d956ee8cbf770e9e51b55a85c8b9017d664ba22a2d13ec80fc7245"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81cd38ca7c06dc6591cb2557313cfbb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 19087,
        "upload_time": "2020-05-16T21:24:39",
        "upload_time_iso_8601": "2020-05-16T21:24:39.381047Z",
        "url": "https://files.pythonhosted.org/packages/e4/be/926526ce27b0eef15cf9276a921f3d8ded8cf7f85c9b1a45d06fa20cca32/taskwatcher-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51adf6384b309bb8efb685a8547e25693e3614dc22a83ce7ce790af3a66b002c",
          "md5": "f1de91ff1fd36f929de99e186d55cf0b",
          "sha256": "e0be95226065ddaced342aa16fd6484f94609538db849e835f5e91fa48cb403d"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f1de91ff1fd36f929de99e186d55cf0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 20355,
        "upload_time": "2020-05-16T21:24:41",
        "upload_time_iso_8601": "2020-05-16T21:24:41.572087Z",
        "url": "https://files.pythonhosted.org/packages/51/ad/f6384b309bb8efb685a8547e25693e3614dc22a83ce7ce790af3a66b002c/taskwatcher-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21eaf3cd26a91ea9877b98116a89c7788c5273d5ac7001c084de4a887881cdf6",
          "md5": "e53a12c972979b7870615989fcbd8b37",
          "sha256": "2cc92d60ef1f5333df1a5cc87d30498378882089cb19111bb8c4373ceffa5e4a"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e53a12c972979b7870615989fcbd8b37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20833,
        "upload_time": "2020-05-19T19:14:52",
        "upload_time_iso_8601": "2020-05-19T19:14:52.905376Z",
        "url": "https://files.pythonhosted.org/packages/21/ea/f3cd26a91ea9877b98116a89c7788c5273d5ac7001c084de4a887881cdf6/taskwatcher-1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "354550a2d5841fe4383d4cde920880dfac86d051c2fc30f90c59f46f69e5227a",
          "md5": "140eb8d1c7f1539ed19869d5514e1c8f",
          "sha256": "3f3dea1c4a32b6e495b6f68108b3d6ad8880b7e62111d912a08b19da3489389c"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "140eb8d1c7f1539ed19869d5514e1c8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21432,
        "upload_time": "2020-05-19T19:14:54",
        "upload_time_iso_8601": "2020-05-19T19:14:54.368003Z",
        "url": "https://files.pythonhosted.org/packages/35/45/50a2d5841fe4383d4cde920880dfac86d051c2fc30f90c59f46f69e5227a/taskwatcher-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a968a250e9e4532a09308653634ea0cb50cefcdac9c1bdc68bec56fafb5438b",
          "md5": "f990f37062ba375072d6a8f3d9bce11b",
          "sha256": "81e687ebb5c9882ce236ac856b410cb0ccd247fbdbbc9637e2d4390d5c292cfe"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f990f37062ba375072d6a8f3d9bce11b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20872,
        "upload_time": "2020-05-20T12:42:28",
        "upload_time_iso_8601": "2020-05-20T12:42:28.618655Z",
        "url": "https://files.pythonhosted.org/packages/1a/96/8a250e9e4532a09308653634ea0cb50cefcdac9c1bdc68bec56fafb5438b/taskwatcher-1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "045c4a7b6fb2289d68471eb6d56cfdc788a7dcf956bdee0f364289fb162ae688",
          "md5": "3f238cfe88ba59c6d8ce0a701f8f1160",
          "sha256": "5b30c6156b63616b84a513c464621b183c3317b1534845debc026fac9bb2d176"
        },
        "downloads": -1,
        "filename": "taskwatcher-1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3f238cfe88ba59c6d8ce0a701f8f1160",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 21456,
        "upload_time": "2020-05-20T12:42:30",
        "upload_time_iso_8601": "2020-05-20T12:42:30.090609Z",
        "url": "https://files.pythonhosted.org/packages/04/5c/4a7b6fb2289d68471eb6d56cfdc788a7dcf956bdee0f364289fb162ae688/taskwatcher-1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a968a250e9e4532a09308653634ea0cb50cefcdac9c1bdc68bec56fafb5438b",
        "md5": "f990f37062ba375072d6a8f3d9bce11b",
        "sha256": "81e687ebb5c9882ce236ac856b410cb0ccd247fbdbbc9637e2d4390d5c292cfe"
      },
      "downloads": -1,
      "filename": "taskwatcher-1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f990f37062ba375072d6a8f3d9bce11b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 20872,
      "upload_time": "2020-05-20T12:42:28",
      "upload_time_iso_8601": "2020-05-20T12:42:28.618655Z",
      "url": "https://files.pythonhosted.org/packages/1a/96/8a250e9e4532a09308653634ea0cb50cefcdac9c1bdc68bec56fafb5438b/taskwatcher-1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "045c4a7b6fb2289d68471eb6d56cfdc788a7dcf956bdee0f364289fb162ae688",
        "md5": "3f238cfe88ba59c6d8ce0a701f8f1160",
        "sha256": "5b30c6156b63616b84a513c464621b183c3317b1534845debc026fac9bb2d176"
      },
      "downloads": -1,
      "filename": "taskwatcher-1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "3f238cfe88ba59c6d8ce0a701f8f1160",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 21456,
      "upload_time": "2020-05-20T12:42:30",
      "upload_time_iso_8601": "2020-05-20T12:42:30.090609Z",
      "url": "https://files.pythonhosted.org/packages/04/5c/4a7b6fb2289d68471eb6d56cfdc788a7dcf956bdee0f364289fb162ae688/taskwatcher-1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}