{
  "info": {
    "author": "Predictia",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<a name=\".climadjust.client\"></a>\n## climadjust.client\n\n<a name=\".climadjust.client.Client.authenticate\"></a>\n#### authenticate\n\n```python\n | authenticate()\n```\n\nAPI authentication. Needed to connect to the API\n\n<a name=\".climadjust.clientMethods.dataset_mixin\"></a>\n## Datasets\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin\"></a>\n### Observation datasets\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.get_observation_datasets\"></a>\n#### get\\_observation\\_datasets\n\n```python\n | get_observation_datasets(name=None, page=None, size=None, sort_field=None, sort_direction=None)\n```\n\nGet a paginated list of observation datasets\n\n**Arguments**:\n\n- `name`: (optional) str dataset name\n- `page`: (optional) int page number\n- `size`: (optional) int number of results per page\n- `sort_field`: (optional) str field to sort results by (either \"type\" or \"name\")\n- `sort_direction`: (optional) str sort direction (either \"ASC\" or \"DESC\")\n\n**Returns**:\n\nlist of observation datasets\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.get_observation_dataset_by_id\"></a>\n#### get\\_observation\\_dataset\\_by\\_id\n\n```python\n | get_observation_dataset_by_id(ds_id: int)\n```\n\nGet an observation dataset. In case the dataset is being uploaded the uploaded state will also\nappear.\n\n**Arguments**:\n\n- `ds_id`: int id of the observation dataset\n\n**Returns**:\n\nthe selected dataset information\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.post_observation_dataset\"></a>\n#### post\\_observation\\_dataset\n\n```python\n | post_observation_dataset(file, name, ds_format, variables)\n```\n\nUploads an observation dataset\n\n**Arguments**:\n\n- `file`: str path to the dataset to be uploaded\n- `name`: str dataset name\n- `ds_format`: str dataset format (either \"NETCDF\" or \"VALUE_TEXT\")\n- `variables`: list[dict] list of variables. Variable format should be:\n{\"standardName\": \"tas\", \"customName\": \"tas\", \"standardUnit\": \"Celsius\", \"customUnit\": \"Celsius\"}\n\n**Returns**:\n\nid of the uploaded dataset\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.get_validation\"></a>\n#### get\\_validation\n\n```python\n | get_validation(ds_id)\n```\n\nGets validation warning/errors and GEOJSON info from an uploaded dataset\n\n**Arguments**:\n\n- `ds_id`: int id of the uploaded dataset\n\n**Returns**:\n\ndict of validation warning/errors and a GEOJSON with info from the dataset\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.delete_observation_dataset\"></a>\n#### delete\\_observation\\_dataset\n\n```python\n | delete_observation_dataset(id: int)\n```\n\nDelete existing observation dataset\n\n**Arguments**:\n\n- `id`: int id of the dataset\n\n**Returns**:\n\n### Projection datasets\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.get_projection_datasets\"></a>\n#### get\\_projection\\_datasets\n\n```python\n | get_projection_datasets(type=None, name=None, page=None, size=None, sort_field=None, sort_direction=None)\n```\n\nGet a paginated list of projection datasets\n\n**Arguments**:\n\n- `name`: (optional) str dataset name\n- `page`: (optional) int page number\n- `size`: (optional) int number of results per page\n- `sort_field`: (optional) str field to sort results by (either \"type\" or \"name\")\n- `sort_direction`: (optional) str sort direction (either \"ASC\" or \"DESC\")\n\n**Returns**:\n\nlist of projection datasets\n\n<a name=\".climadjust.clientMethods.dataset_mixin.DatasetMixin.get_projection_datasets_by_id\"></a>\n#### get\\_projection\\_datasets\\_by\\_id\n\n```python\n | get_projection_datasets_by_id(id: int)\n```\n\nGet a projection dataset info\n\n**Arguments**:\n\n- `id`: int id of the projection dataset\n\n**Returns**:\n\ndict with dataset info\n\n\n<a name=\".climadjust.clientMethods.experiment_mixin\"></a>\n## climadjust.clientMethods.experiment\\_mixin\n\n<a name=\".climadjust.clientMethods.experiment_mixin.ExperimentMixin.get_experiments\"></a>\n#### get\\_experiments\n\n```python\n | get_experiments(page=None, size=None, sort_field=None, sort_direction=None)\n```\n\nGet a paginated list of experiments\n\n**Arguments**:\n\n- `page`: (optional) int page number\n- `size`: (optional) int number of results per page\n- `sort_field`: (optional) str field to sort results by (either \"id\" or \"name\")\n- `sort_direction`: (optional) str sort direction (either \"ASC\" or \"DESC\")\n\n**Returns**:\n\nlist of experiments\n\n<a name=\".climadjust.clientMethods.experiment_mixin.ExperimentMixin.get_experiments_by_id\"></a>\n#### get\\_experiments\\_by\\_id\n\n```python\n | get_experiments_by_id(exp_id)\n```\n\nGet a specific experiment. In case the experiment is being uploaded the uploaded state will also\nappear.\n\n**Arguments**:\n\n- `exp_id`: int id of the experiment\n\n**Returns**:\n\nthe selected experiment information\n\n<a name=\".climadjust.clientMethods.experiment_mixin.ExperimentMixin.post_experiment\"></a>\n#### post\\_experiment\n\n```python\n | post_experiment(name, temporalResolution, variables, scenarios, models, baconfiguration, spatialResolution, datasetProjection, datasetReference, spatialCoverage, outputFormat, validation, mask)\n```\n\n**Arguments**:\n\n- `name`: str experiment name\n- `temporalResolution`: str temporal resolution for the experiment (only \"DAILY\")\n- `variables`: list list of variables to perform the bias adjustment on\n- `scenarios`: list list of dictionaries, each dictionary contains the scenario name as well as the startDate\nand the endDate\n- `models`: list list of models / members to use\n- `baconfiguration`: list list of bias adjustment configurations for each variable\n(variable, method, and parameters)\n- `spatialResolution`: str spatial resolution for the experiment (\"NATIVE\")\n- `datasetProjection`: dict dictionary with the IDs of the projections datasets that will be used for the\nexperiment\n- `datasetReference`: dict dictionary with the IDs of the reference datasets that will be used for the\nexperiment\n- `spatialCoverage`: shapely.geometry.Polygon() Polygon with the spatial coverage over which to execute the\nexperiment\n- `outputFormat`: str output format (for example \"NETCDF\", \"GRIB\", ...)\n- `validation`: str validation activity to perform (for example \"NONE\")\n- `mask`: str a string explaining if land-mask needs to be used (for example \"none\")\n\n**Returns**:\n\nid of the uploaded experiment\n\n<a name=\".climadjust.clientMethods.experiment_mixin.ExperimentMixin.delete_experiment\"></a>\n#### delete\\_experiment\n\n```python\n | delete_experiment(exp_id)\n```\n\nDelete existing experiment\n\n**Arguments**:\n\n- `id`: int id of the expoeriment to be deleted\n\n**Returns**:",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "climadjust",
    "package_url": "https://pypi.org/project/climadjust/",
    "platform": "GNU/Linux",
    "project_url": "https://pypi.org/project/climadjust/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/climadjust/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python client for Climadjust API",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9912326,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf821a115c496ae3f3aeb93aea7ee8818487a1a4fb19c1960c16b99c357e23da",
          "md5": "f61806ce85a75828e3e54b6819bba0ee",
          "sha256": "1b2a20c59894bf964bcf2d587404649ffbedfe384d35942be92ac5a1376f6af9"
        },
        "downloads": -1,
        "filename": "climadjust-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f61806ce85a75828e3e54b6819bba0ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8590,
        "upload_time": "2021-03-29T12:43:01",
        "upload_time_iso_8601": "2021-03-29T12:43:01.516532Z",
        "url": "https://files.pythonhosted.org/packages/bf/82/1a115c496ae3f3aeb93aea7ee8818487a1a4fb19c1960c16b99c357e23da/climadjust-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf821a115c496ae3f3aeb93aea7ee8818487a1a4fb19c1960c16b99c357e23da",
        "md5": "f61806ce85a75828e3e54b6819bba0ee",
        "sha256": "1b2a20c59894bf964bcf2d587404649ffbedfe384d35942be92ac5a1376f6af9"
      },
      "downloads": -1,
      "filename": "climadjust-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f61806ce85a75828e3e54b6819bba0ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8590,
      "upload_time": "2021-03-29T12:43:01",
      "upload_time_iso_8601": "2021-03-29T12:43:01.516532Z",
      "url": "https://files.pythonhosted.org/packages/bf/82/1a115c496ae3f3aeb93aea7ee8818487a1a4fb19c1960c16b99c357e23da/climadjust-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}