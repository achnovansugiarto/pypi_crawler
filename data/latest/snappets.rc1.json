{
  "info": {
    "author": "Wolfgang Scherer",
    "author_email": "wolfgang.scherer@gmx.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. \\||<-snip->|| start\n.. \\||<-snap->|| include ^doc_defs.snip$\n.. \\||<-snap->|| part_top\n.. Copyright (C) 2018, Wolfgang Scherer, <Wolfgang.Scherer at gmx.de>\n.. Sponsored by Wiedenmann-Seile GmbH, http://ws-gruppe.de\n..\n.. This file is part of Snappets.\n..\n.. Permission is granted to copy, distribute and/or modify this document\n.. under the terms of the GNU Free Documentation License, Version 1.3\n.. or any later version published by the Free Software Foundation;\n.. with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n.. A copy of the license is included in the main documentation of Snappets.\n\n.. inline comments (with du_comment_role)\n.. role:: rem(comment)\n.. role:: html(raw)\n   :format: html\n.. role:: shx(code)\n   :language: sh\n\n.. \\||<-snap->|| part_top\n.. \\||<-snap->|| part_title\n\n##################################################\nSnappets\n##################################################\n.. \\||<-snap->|| part_title\n.. \\||<-snap->|| part_contents\n\nThe `full HTML document <doc/_build/html/index.html>`_ is available in\nthe `Sphinx HTML build directory <doc/_build/html/>`_\n\n:Author: `Wolfgang Scherer`_\n\n.. \\||<-snap->|| part_contents\n.. \\||<-snap->|| part_abstract\n.. >>CODD See `the components of a doctoral dissertation and their order <http://site.uit.no/english/writing-style/bookstructure/>`_\n.. >>CODD Dedication\n.. >>CODD Epigraph\n.. >>CODD Abstract\n.. \\||<-snap->|| subst seclevel section\n.. \\||<-snap->|| not_doc_standalone\n.. \\||<-snap->|| subst seclevel chapter\n.. \\||<-snap->|| not_doc_standalone\n\n.. raw:: latex\n\n   \\iffalse\n\n.. rubric:: Quickstart\n.. raw:: latex\n\n   \\fi\n   \\section*{Quickstart}\n   \\addcontentsline{toc}{@seclevel@}{Quickstart}%\n   \\markboth{Quickstart}{Quickstart}%\n   \\phantomsection\n\n.. \\|:here:|\n\n.. \\||<-snap->|| not_doc_chapter\n\n.. raw:: latex\n\n   \\iffalse\n\n.. rubric:: Abstract\n.. raw:: latex\n\n   \\fi\n   \\section*{Abstract}\n   \\addcontentsline{toc}{@seclevel@}{Abstract}%\n   \\markboth{Abstract}{Abstract}%\n   \\phantomsection\n\n.. \\||<-snap->|| not_doc_chapter\n\n.. compound::\n\n   Snap-on snippets for web and CLI.\n\n   .. \\|:here:|\n\n.. \\||<-snap->|| part_abstract\n.. \\||<-snap->|| part_contents\n.. >>CODD Contents page\n\n.. contents::\n..\n\n.. >>CODD List of Illustrations\n.. >>CODD List of Tables\n.. \\||<-snap->|| part_contents\n.. \\||<-snap->|| part_abstract\n.. \\||<-snap->|| not_doc_overview\n.. \\||<-snap->|| not_doc_chapter\n.. >>CODD Acknowledgements\n.. >>CODD Note on Transliterations\n.. >>CODD List of Abbreviations\n\n.. raw:: latex\n\n   \\iffalse\n\n.. rubric:: Abbreviations\n.. raw:: latex\n\n   \\fi\n   \\section*{Abbreviations}\n   \\addcontentsline{toc}{@seclevel@}{Abbreviations}%\n   \\markboth{Abbreviations}{Abbreviations}%\n   \\phantomsection\n\n.. \\||<-snap->|| doc_standalone\n.. include:: doc/abbrevs.inc\n.. \\||<-snap->|| doc_standalone\n.. \\||<-snap->|| not_doc_standalone\n.. @include_directive_combined@  abbrevs.inc\n.. \\||<-snap->|| not_doc_standalone\n.. \\||<-snap->|| not_doc_chapter\n.. \\||<-snap->|| not_doc_overview\n.. \\||<-snap->|| part_abstract\n.. \\||<-snap->|| inc_standalone ^standalone-header.snip$\n.. \\||<-snap->|| inc_index ^index-header.snip$\n.. \\||<-snap->|| inc_overview ^overview-header.snip$\n.. \\||<-snap->|| inc_chapter ^chapter-header.snip$\n.. \\||<-snap->|| part_body\n.. >>CODD Introduction\n\n==================================================\nIntroduction\n==================================================\n\n.. >>CODD Chapter\n.. >>CODD Conclusion\n.. >>CODD Appendix A\n\n.. \\|:here:|\n\n.. >>CODD Notes\n.. ==================================================\n.. Footnotes\n.. ==================================================\n\n:html:`<hr>`\n\n.. \\[#]\n\n.. >>CODD Reference List/Bibliography\n.. ==================================================\n.. References\n.. ==================================================\n\n.. \\||<-snap->|| part_body\n.. \\||<-snap->|| part_defs\n.. \\||<-snap->|| doc_standalone\n.. include:: doc/doc_defs.inc\n.. include:: doc/doc_defs_standalone.inc\n.. \\||<-snap->|| doc_standalone\n.. \\||<-snap->|| not_doc_standalone\n.. @include_directive_combined@ doc_defs.inc\n.. @include_directive_combined@ doc_defs_combined.inc\n.. \\||<-snap->|| not_doc_standalone\n.. \\||<-snap->|| part_defs\n.. \\||<-snap->|| inc_standalone ^standalone-footer.snip$\n.. \\||<-snap->|| inc_index ^index-footer.snip$\n.. \\||<-snap->|| inc_overview ^overview-footer.snip$\n.. \\||<-snap->|| inc_chapter ^chapter-footer.snip$\n.. \\||<-snap->|| part_bottom\n.. \\||<-snap->|| doc_standalone\n\n**Copyright**\n\nCopyright (C) 2018, `Wolfgang Scherer`_.\nSponsored by `Wiedenmann-Seile GmbH`_.\nSee the document source for conditions of use under the GNU Free\nDocumentation License.\n\n.. \\||<-snap->|| doc_standalone\n\n.. _`Wiedenmann-Seile GmbH`: http://ws-gruppe.de\n.. _`Wolfgang Scherer`: wolfgang.scherer@ws-gruppe.de\n\n.. \\||<-snap->|| part_bottom\n.. \\||<-snip->|| stop\n\n.. ==================================================\n.. END\n.. ==================================================\n\n.. (progn (forward-line 1) (snip-insert \"rst_t.ide-update\" t t \"rst\") (insert \"\\n\"))\n.. \f\n.. :ide-menu: Emacs IDE Main Menu - Buffer @BUFFER@\n.. . M-x `eIDE-menu' ()(eIDE-menu \"z\")\n\n.. :ide: DELIM: SNIPPETS (ABOUT)       |q|<- SYM ->||,   ||<- SYM ->||,  @| SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@|\") (cons \"@\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (DOC)          ||<- SYM ->||,     |: SYM :|,     ` SYM `\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"\\\\(\\\\`\\\\|[^\\\\]\\\\)\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (SNIP DOC)     ||<- SYM ->||,     |: SYM :|,     @ SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (FILLME)       ||<- SYM ->||,     :: SYM ::,     @ SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)))))\n\n.. :ide: DELIM: SNIPPETS (SUBST)        ||<- SYM ->||,      @ SYM @,      @ SYM @\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"@\") (cons \"@\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"||<-\") (cons \"->||\" nil)) t) (setq symbol-tag-match-rx \"sn[i]p\") (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: +#-\n.. . Snippet Delimiter Sets ()\n\n.. :ide: DELIM: ReST (links)              ` SYM `_,    .. _` SYM `,      ` SYM `\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`_\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \".. _`\") (cons \"`:\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"\\\\(\\\\`\\\\|[^\\\\]\\\\)\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: DELIM: STANDARD (GNU quoting)    |: SYM :|,       :: SYM ::,     ` SYM '\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons nil \"`\") (cons \"'\" nil)))))\n\n.. :ide: DELIM: STANDARD (ReST quoting)   |: SYM :|,       :: SYM ::,     ` SYM `\n.. . (let nil (symbol-tag-normalize-delimiter (cons (cons nil \"::\") (cons \"::\" nil)) t) (symbol-tag-switch-delimiter-sets) (symbol-tag-normalize-delimiter (cons (cons nil \"|:\") (cons \":|\" nil)) t) (setq symbol-tag-enclose-delimiter-set (symbol-tag-normalize-delimiter (cons (cons \"[^\\\\]\" \"`\") (cons \"`\" nil)))))\n\n.. :ide: +#-\n.. . Delimiter Sets ()\n\n.. :ide: COMPILE: render reST as LaTeX\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2latex.py --traceback | tee \" (shell-quote-argument fn) \".tex\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as MAN\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2man.py --traceback \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as TXT (via MAN)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2man.py --traceback | man -l -\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; snr \" args))))\n\n.. :ide: COMPILE: render reST as ODT --strip-comments\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2odt.py --traceback --strip-comments | cat >\" (shell-quote-argument fn) \".odt \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as LaTeX, compile PDF and view with xdg-open\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2latex.py --traceback | tee \" (shell-quote-argument fn) \".tex && pdflatex '\\\\nonstopmode\\\\input \" (shell-quote-argument fn) \".tex' && xdg-open \" (shell-quote-argument fn) \".pdf\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as PDF\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2pdf -e ws_docutils.raw_role >\" (shell-quote-argument fn) \".pdf\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: COMPILE: render reST as HTML\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" \" (shell-quote-argument fp) \" | ws_rst2html.py --traceback --cloak-email-addresses | ${SED__PROG-sed} '\\n/<\\\\/head>/i\\\\\\n<style type=\\\"text/css\\\">\\\\\\nimg { max-width\\: 1200px; }\\\\\\n</style>\\n' | tee \" (shell-quote-argument fn) \".html \"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; cat \" args))))\n\n.. :ide: +#-\n.. . Process with ws_rst2xxx ()\n\n.. :ide: CMD: show doc/_build PDF output\n.. . (let* ((fp (buffer-file-name)) (fd (file-name-directory fp))) (shell-command (concat \"xdg-open \\\"$( ls \" fd \"doc/_build/latex/*.aux | sed 's,\\\\.aux,.pdf,' )\\\"\" ) nil))\n\n.. :ide: CMD: show doc/_build HTML output\n.. . (let* ((fp (buffer-file-name)) (fd (file-name-directory fp))) (shell-command (concat \"xdg-open \" fd \"doc/_build/html/index.html\" ) nil))\n\n.. :ide: CMD: show PDF output\n.. . (let* ((fp (buffer-file-name)) (fb (file-name-sans-extension fp))) (shell-command (concat \"xdg-open '\" fb \".pdf'\")))\n\n.. :ide: CMD: show HTML output\n.. . (let* ((fp (buffer-file-name)) (fb (file-name-sans-extension fp))) (shell-command (concat \"xdg-open '\" fb \".html'\")))\n\n.. :ide: +#-\n.. . Show Ouput ()\n\n.. :ide: COMPILE: clean _build directory\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && cd doc && rm -rf _build *.rst.auto\" ) nil))\n\n.. :ide: #\n.. . ()\n\n.. :ide: COMPILE: Complete versions (HTML/PDF)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && cd doc && make html && make latexpdf\" ) nil))\n\n.. :ide: COMPILE: Standalone Versions (HTML/PDF)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format singlehtml \" fn \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format pdf \" fn ) nil))\n\n.. :ide: COMPILE: All versions (HTML/PDF)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp)) (fd (file-name-directory fp))) (compile (concat \"cd \" fd \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format singlehtml \" fn \" && PATH=\\\".:$PATH\\\" && sphinx-readme.sh  --format pdf \" fn \" && cd doc && make html && make latexpdf\" ) nil))\n\n.. :ide: #\n.. . ()\n\n.. :ide: COMPILE: render reST as EPUB (sphinx-readme.sh)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format epub \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))\n\n.. :ide: COMPILE: render reST as PDF  (sphinx-readme.sh)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format pdf \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))\n\n.. :ide: COMPILE: render doc as HTML  (sphinx-build in doc)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let () (save-buffer) (compile (concat \"cd doc && make html\"))))\n\n.. :ide: COMPILE: render reST as HTML (sphinx-readme.sh)\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --format singlehtml \" (shell-quote-argument fp)))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; sphinx-readme.sh \" args))))\n\n.. :ide: +#-\n.. . Process with sphinx-readme.sh ()\n\n.. :ide: COMPILE: render reST as pseudoXML\n.. . (let* ((fp (buffer-file-name)) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t \"[.][^.]*$\" fn) (setq fn (replace-match \"\" nil t fn)))) (let ((args (concat \" --traceback \" (shell-quote-argument fp) \" 2>&1 #| tee \" (shell-quote-argument fn) \".pxml\"))) (save-buffer) (compile (concat \"PATH=\\\".:$PATH\\\"; ws_rst2pseudoxml.py \" args))))\n\n.. :ide: +#-\n.. . Process ()\n\n.. :ide: QUO: ~~ Subsubsection ~~\n.. . (insert \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\:rem\\:`|\\:sec\\:|`\\\\ ::fillme\\::\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\" )\n\n.. :ide: QUO: -- Subsection --\n.. . (insert \"--------------------------------------------------\\n\\:rem\\:`||\\:sec\\:||`\\\\ ::fillme\\::\\n--------------------------------------------------\\n\" )\n\n.. :ide: QUO: == Section ==\n.. . (insert \"==================================================\\n\\:rem\\:`|||\\:sec\\:|||`\\\\ ::fillme\\::\\n==================================================\\n\" )\n\n.. :ide: +#-\n.. . Sections ()\n\n.. :ide: OCCUR-OUTLINE:  `|||: sec :|||' + ^.. + command comments\n.. . (x-symbol-tag-occur-outline \"sec\" '(\"|:\" \":|\") (cons (cons \"^\" \".. \") (cons nil nil)) \"\\\\(_`[^`\\n]+`\\\\|\\\\[[^]\\n]+\\\\]\\\\|[|][^|\\n]+[|]\\\\|[^:\\n]+::\\\\)\")\n\n.. :ide: MENU-OUTLINE:  `|||: sec :|||' + ^.. + command comments\n.. . (x-eIDE-menu-outline \"sec\" '(\"|:\" \":|\") (cons (cons \"^\" \".. \") (cons nil nil)) \"\\\\(_`[^`\\n]+`\\\\|\\\\[[^]\\n]+\\\\]\\\\|[|][^|\\n]+[|]\\\\|[^:\\n]+::\\\\)\")\n\n.. \f\n.. Local Variables:\n.. mode: rst\n.. snip-mode: rst\n.. truncate-lines: t\n.. symbol-tag-symbol-regexp: \"[-0-9A-Za-z_#]\\\\([-0-9A-Za-z_. ]*[-0-9A-Za-z_]\\\\|\\\\)\"\n.. symbol-tag-auto-comment-mode: nil\n.. symbol-tag-srx-is-safe-with-nil-delimiters: nil\n.. End:\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/wolfmanx/snappets",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "snappets",
    "package_url": "https://pypi.org/project/snappets/",
    "platform": "",
    "project_url": "https://pypi.org/project/snappets/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/wolfmanx/snappets"
    },
    "release_url": "https://pypi.org/project/snappets/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Snippets in Python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4294676,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a740cc4765df51a7988e41f4933c86c6d2e2f85481ca8348c4185e53342d9534",
          "md5": "a792859efad76eaf35da4cdfe40e8526",
          "sha256": "2b681e930a777305cdcbcf40a3336ffb551f9a24fa644b684b573d38016bcac8"
        },
        "downloads": -1,
        "filename": "snappets-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a792859efad76eaf35da4cdfe40e8526",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22941,
        "upload_time": "2018-09-21T01:27:26",
        "upload_time_iso_8601": "2018-09-21T01:27:26.869987Z",
        "url": "https://files.pythonhosted.org/packages/a7/40/cc4765df51a7988e41f4933c86c6d2e2f85481ca8348c4185e53342d9534/snappets-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a740cc4765df51a7988e41f4933c86c6d2e2f85481ca8348c4185e53342d9534",
        "md5": "a792859efad76eaf35da4cdfe40e8526",
        "sha256": "2b681e930a777305cdcbcf40a3336ffb551f9a24fa644b684b573d38016bcac8"
      },
      "downloads": -1,
      "filename": "snappets-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a792859efad76eaf35da4cdfe40e8526",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22941,
      "upload_time": "2018-09-21T01:27:26",
      "upload_time_iso_8601": "2018-09-21T01:27:26.869987Z",
      "url": "https://files.pythonhosted.org/packages/a7/40/cc4765df51a7988e41f4933c86c6d2e2f85481ca8348c4185e53342d9534/snappets-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}