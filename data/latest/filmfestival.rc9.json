{
  "info": {
    "author": "Letizia Mangano",
    "author_email": "l.mangano1@campus.unimib.it",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# 1st assignment - FilmFestival\n## WebServices\nL’applicazione creata è un web service scritto in Python3 per la ricerca di informazioni relative a film.  \nIl web service utilizza *Flask* come framework ed interagisce con un servizio open chiamato Omdb per reperire le informazioni relative ai film tramite chiamate REST.  \nQueste informazioni vengono in seguito salvate all’interno di documenti Firestore, un database noSQL a servizio che fa parte di un progetto Google Cloud.  \nE’ presente un’unica collection chiamata “FILM” che contiene solamente le seguenti informazioni di un film:\n- Titolo\n- Durata\n- Anno in cui è uscito il film\n- Genere\n- Una breve descrizione\n- Linguaggio\n- Nazione che l’ha prodotto\n- Regista\n- Premi\n\nGli endpoints che il web service espone sono i seguenti:\n- */search/film*\n- */delete/title*\n- */query/title*  \n\nL’applicazione finale è rilasciata su una Virtual Machine in Google Compute Engine.\n\n## Pipeline\nPer fare in modo che l’applicazione venga automaticamente verificata è stata creata una pipeline CICD in modo che, a partire dal sorgente presente sul repository GitLab, vengano eseguiti i diversi step descritti di seguito:\n- Build\n- Verify\n- Unit Test\n- Integration Test\n- Package \n- Release\n- Deploy\n\nEssendo l’applicazione sviluppata in Python, è stata aggiunto uno step *before_script* per poter creare ed attivare un virtual environment che, successivamente, verrà messo in cache per non scaricare ad ogni step tutti i pacchetti richiesti.\n\n#### Build\nLa fase di build è composta dal download di tutti i pacchetti delle librerie richieste dall’applicazione.  \nViene quindi effettuata l’installazione con PIP all’interno del virtual environment di tutte le librerie indicate all’interno del file *requirements.txt*.  \nPer ogni libreria, inoltre, è indicato un numero di versione uguale o maggiore uguale da garantire la compatibilità di quest’ultima.  \nLo step di build avrà successo qualora tutte le librerie indicate all’interno del file dei requirements vengano scaricate ed installate correttamente.\n\n### Verify\nIl secondo step è quello della verifica del codice dell’applicazione.  \nViene inizialmente effettuata una analisi statica del codice, utilizzando *prospector*; quest’ultimo effettua sul codice delle verifiche sintattiche, controllando la presenza di codice duplicato o di eventuali errori e sulla sua complessità.  \n\nSuccessivamente, a seguito dell’analisi statica, viene effettuata una verifica su potenziali vulnerabilità del codice.  \nQuesta operazione viene effettuata utilizzando *bandit*; questo tool effettua le seguenti operazioni di verifica sul codice:\n- Individua eventuali password scritte in chiaro nel codice;\n- Verifica la possibilità di effettuare attacchi di tipo SQL Injection e Shell Injection che possono compromettere l’integrità dei dati e potenzialmente della macchina da parte dell’attaccante.\n\n### Unit Test\nPer quanto riguarda l’automatizzazione degli unit test vi è uno step dedicato della pipeline, in cui vengono testate le funzioni utili al funzionamento del web service.  \nIn particolare vengono effettuati test ai seguenti metodi:\n- *format_title(title)*  \nIl metodo prende in oggetto un titolo formattato nel modo non corretto.  \nIl metodo prende il titolo ed elimina gli spazi a destra e a sinistra e, successivamente, inserisce un “+” negli spazi presenti tra le parole.\n- *compose_url(title)*  \nIl metodo prende in oggetto un titolo formattato nel modo corretto.  \nIl metodo prende il titolo e la appkey e, successivamente, formatta l’url nel modo corretto.  \nEs. url = \"http://www.omdbapi.com/?apikey=\"+appkey+\"&t=\"+title\n\nI test case sono presenti nel file *test_unit.py* del package tests che utilizza la libreria *pytest*.  \nL’esecuzione dei soli unit test avviene utilizzando il comando *py.test tests/test_unit.py* che previene l’esecuzione degli integration test, presenti nello stesso package.\n\n### Integration Test\nPer quanto riguarda l’automatizzazione degli integration test vi è uno step dedicato della pipeline in cui vengono testate le funzionalità del web service che si integrano con il database Firestore ed il servizio esterno tramite chiamate API.  \nIn particolare, i test effettuati sono:\n- Richiamare l’API tramite il metodo *search_film(test)* e verificare che quest’ultima ritorni un contenuto atteso;\n- Richiamare il metodo *query_firestore(title, year)* e verificare che il metodo ritorni il contenuto atteso; più precisamente, il regista del film;\n- Richiamare il metodo *query_firestore_len(title)* e verificare che il metodo ritorni il contenuto atteso; più precisamente, il lingua con cui è stato prodotto il film;\n- Richiamare il metodo *save_film(film)*, passandogli come oggetto il contenuto di un file .json e verificare che venga salvato nel modo corretto nel database;\n- Richiamare il metodo *delete_content(title)*, passandogli come oggetto il titolo di un film e verificare che venga eliminato correttamente dal database.\n\nI test case sono presenti nel file test_integration.py del package test che utilizza la libreria *pytest*.  \nL’esecuzione dei soli integration test avviene utilizzando il comando *py.test tests/test_integration.py* che previene l’esecuzione degli unit test, presenti nello stesso package.\n\n### Package\nUna volta superati i test si procederà con la pacchettizzazione dell’applicazione.  \nQuesta viene effettuata da *setuptool*, un tool in cui tramite codice python vengono dichiarate tutte le caratteristiche del pacchetto che verrà creato.  \nA questo processo sono state applicate due funzioni, in modo tale da non dover intervenire più volte su questo file.  \nPer fare in modo che i requirements vengano sempre tenuti aggiornati, è stata aggiunta la funzione *_get_install_requires* che legge il file *requirements.txt* ed utilizza il suo contenuto per indicare i requirement durante il setup.  \nE’ stata inoltre creata la funzione *_get_version* in modo tale da leggere il numero di versione da applicare al pacchetto da rilasciare, leggendola da un file esterno chiamato *VERSION* posto all’interno del repository.  \nIl comando utilizzato per effettuare la pacchettizzazione è *python setup.py sdist bdist_wheel* e questo fa si che venga prodotto un file in formato whl (wheel) pronto per essere rilasciato.  \nLa cartella dist in cui viene creato questo file viene tenuta in cache, in modo tale da poter accedere al file anche nello step successivo di rilascio.\n\n### Release\nUna volta che l’applicazione è stata pacchettizzata in formato wheel, questa verrà rilasciata pubblicamente sul repository dei pacchetti per Python chiamato pypi.  \nQuesta distribuzione permette agli utenti di poterla scaricare utilizzando il gestore dei pacchetti pip.  \nLo strumento utilizzato per effettuare questa operazione è *twine*, il quale permette di effettuare l’upload sulla piattaforma.  \nCome nello step precedente, per fare in modo da gestire in maniera automatica il numero di versione, questa viene utilizzata come variabile d’ambiente che riporta il contenuto del file *VERSION*.  \nQuesto per fare in modo che il pacchetto da rilasciare ed il comando per effettuare il rilascio siano sempre allineati ad uno stesso valore condiviso.  \n\n### Deploy\nIl deploy avviene su una macchina virtuale Google Cloud Compute Engine tramite SSH.  \nPer questo step le operazioni che sono state effettuate sono le seguenti:\n- Attivazione della chiave SSH all’interno del container che esegue la pipeline.\nTale chiave SSH è stata precedentemente abilitata all’accesso sulla macchina virtuale.  \nE’ stata in seguito caricata all’interno di una variabile d’ambiente per l’utilizzo durante la pipeline.\n- Caricamento sulla VM di uno script che scarica l’ultima versione del pacchetto filmfestival utilizzando pip ed inseguito effettua il riavvio del web service con il codice aggiornato.  \nIl caricamento di questo file avviene tramite SCP.\n- Connessione alla VM tramite SSH per l’esecuzione dello script.\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/LetiziaMangano97/1assignment_provca/",
    "keywords": "example documentation tutorial",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "filmfestival",
    "package_url": "https://pypi.org/project/filmfestival/",
    "platform": "",
    "project_url": "https://pypi.org/project/filmfestival/",
    "project_urls": {
      "Homepage": "https://gitlab.com/LetiziaMangano97/1assignment_provca/"
    },
    "release_url": "https://pypi.org/project/filmfestival/0.1.1/",
    "requires_dist": [
      "Flask (==1.1.2)",
      "requests (==2.24.0)",
      "google-cloud-firestore (==1.9.0)",
      "prospector (==1.3.0)",
      "bandit (==1.6.2)"
    ],
    "requires_python": "",
    "summary": "An demonstration of how to create, document, and publish to the cheese shop a5 pypi.org.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8440389,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d8704312f71db0c3ab61c61510eba3b55918fb17ef914687fff1c97ca239dfa",
          "md5": "076396f9669fc5f51fcafe48ff23852c",
          "sha256": "5378fac5b025aea08776c6b8e04d16b057b5722bc00aaec5e5a25e032610c92f"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "076396f9669fc5f51fcafe48ff23852c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3751,
        "upload_time": "2020-10-14T19:07:48",
        "upload_time_iso_8601": "2020-10-14T19:07:48.735321Z",
        "url": "https://files.pythonhosted.org/packages/5d/87/04312f71db0c3ab61c61510eba3b55918fb17ef914687fff1c97ca239dfa/filmfestival-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76eb969a6726236266584c6c91bb03f3193d0334e1d9dbfc6da11a3c02a2399d",
          "md5": "90943ae3967a4c9c050fcb9a844a07e9",
          "sha256": "a712a4290f11b64cceda4f51c97914c5ca90337af2bd4515afb4bc46359d5615"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90943ae3967a4c9c050fcb9a844a07e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3750,
        "upload_time": "2020-10-14T19:29:08",
        "upload_time_iso_8601": "2020-10-14T19:29:08.691973Z",
        "url": "https://files.pythonhosted.org/packages/76/eb/969a6726236266584c6c91bb03f3193d0334e1d9dbfc6da11a3c02a2399d/filmfestival-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b70d9643f67f9239dcee0c5b2861a408efd46db4f6cd449694864b853e728fca",
          "md5": "64b1b37aaa91c7ee9908559284d057f5",
          "sha256": "226c5ca2870dbceadbd717a41062139c0e8b9ad7de8292a4c69540db781d7789"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64b1b37aaa91c7ee9908559284d057f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3753,
        "upload_time": "2020-10-14T20:07:47",
        "upload_time_iso_8601": "2020-10-14T20:07:47.330382Z",
        "url": "https://files.pythonhosted.org/packages/b7/0d/9643f67f9239dcee0c5b2861a408efd46db4f6cd449694864b853e728fca/filmfestival-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1146e454a9e020a38d68189092837f7f21b07182739669738ec382cd9ae44ad2",
          "md5": "2b660f9ac68bd9866714cecc2392ef49",
          "sha256": "bb02662acfc4a43f2286b215503cb86a25cfeca390d09a14cb109fdc204595c3"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b660f9ac68bd9866714cecc2392ef49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3752,
        "upload_time": "2020-10-14T20:28:48",
        "upload_time_iso_8601": "2020-10-14T20:28:48.560492Z",
        "url": "https://files.pythonhosted.org/packages/11/46/e454a9e020a38d68189092837f7f21b07182739669738ec382cd9ae44ad2/filmfestival-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb5f6232f39876c38830dada6b64795ca9c4a683940619096a324c9607cc9f25",
          "md5": "613e77c3955eee15edec1a0c12407215",
          "sha256": "dbf76ac307de2935b3d2fc52ed59472e724857ab1df750078400473be8e91650"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "613e77c3955eee15edec1a0c12407215",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3752,
        "upload_time": "2020-10-14T20:54:16",
        "upload_time_iso_8601": "2020-10-14T20:54:16.307262Z",
        "url": "https://files.pythonhosted.org/packages/fb/5f/6232f39876c38830dada6b64795ca9c4a683940619096a324c9607cc9f25/filmfestival-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64d4dbd0e6010832027d78c0bc2c40f5f5aa42674fb9173e18cde040a5a5716d",
          "md5": "13a631899c7f7403aa9e9cc0a15c0a93",
          "sha256": "3788cac28301185d1516547259b05060a5b999dab3f9427e6e9a10ce9ef0122f"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13a631899c7f7403aa9e9cc0a15c0a93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3770,
        "upload_time": "2020-10-16T19:12:02",
        "upload_time_iso_8601": "2020-10-16T19:12:02.668878Z",
        "url": "https://files.pythonhosted.org/packages/64/d4/dbd0e6010832027d78c0bc2c40f5f5aa42674fb9173e18cde040a5a5716d/filmfestival-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55c8a6fcdd67e1d3ca5b161122cbe42670fec5a71b849c2f40866358814e0c07",
          "md5": "6314b1966e960ddefa33b7963947f728",
          "sha256": "500ee0bf6c4899f13799b37664c2e1e550566b2c09adfec5e1a55e38497ce594"
        },
        "downloads": -1,
        "filename": "filmfestival-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6314b1966e960ddefa33b7963947f728",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3769,
        "upload_time": "2020-10-16T19:31:46",
        "upload_time_iso_8601": "2020-10-16T19:31:46.426427Z",
        "url": "https://files.pythonhosted.org/packages/55/c8/a6fcdd67e1d3ca5b161122cbe42670fec5a71b849c2f40866358814e0c07/filmfestival-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d50791fabcd9f766ea26111956a230124492431ab7bb7ca73ef2e8649124a3c",
          "md5": "287cb0beb207065f49049b238224373b",
          "sha256": "28116744ef9698c38d8dcd773ba7304e03f58d944552d9e4ca8db0d5157f0a03"
        },
        "downloads": -1,
        "filename": "filmfestival-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "287cb0beb207065f49049b238224373b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6675,
        "upload_time": "2020-10-18T17:10:07",
        "upload_time_iso_8601": "2020-10-18T17:10:07.221801Z",
        "url": "https://files.pythonhosted.org/packages/3d/50/791fabcd9f766ea26111956a230124492431ab7bb7ca73ef2e8649124a3c/filmfestival-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "990add9759a0a7140706f2b83651f1ba729ce69fcd020b006fbc3f2a39c73bcf",
          "md5": "2803c2ddc2f0f2596572fd82c4dcc379",
          "sha256": "05fafa3ca0a25ec2636c266470902f5009bf3c40e41c87b1cf2959e713cd378f"
        },
        "downloads": -1,
        "filename": "filmfestival-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2803c2ddc2f0f2596572fd82c4dcc379",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6673,
        "upload_time": "2020-10-18T17:24:21",
        "upload_time_iso_8601": "2020-10-18T17:24:21.223960Z",
        "url": "https://files.pythonhosted.org/packages/99/0a/dd9759a0a7140706f2b83651f1ba729ce69fcd020b006fbc3f2a39c73bcf/filmfestival-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "990add9759a0a7140706f2b83651f1ba729ce69fcd020b006fbc3f2a39c73bcf",
        "md5": "2803c2ddc2f0f2596572fd82c4dcc379",
        "sha256": "05fafa3ca0a25ec2636c266470902f5009bf3c40e41c87b1cf2959e713cd378f"
      },
      "downloads": -1,
      "filename": "filmfestival-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2803c2ddc2f0f2596572fd82c4dcc379",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6673,
      "upload_time": "2020-10-18T17:24:21",
      "upload_time_iso_8601": "2020-10-18T17:24:21.223960Z",
      "url": "https://files.pythonhosted.org/packages/99/0a/dd9759a0a7140706f2b83651f1ba729ce69fcd020b006fbc3f2a39c73bcf/filmfestival-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}