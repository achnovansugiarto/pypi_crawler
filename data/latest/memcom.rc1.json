{
  "info": {
    "author": "Robert Umbehant",
    "author_email": "memcom@wheresjames.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# memcom\n\nInterprocess real time message/audio/video buffers\n\n---------------------------------------------------------------------\n## Table of contents\n\n* [Install](#install)\n* [Examples](#examples)\n* [References](#references)\n\n&nbsp;\n\n---------------------------------------------------------------------\n## Install\n\n    $ pip3 install memcom\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## Examples\n\n### Example that creates a test clip\n\n``` Python\n\nimport os\nimport time\nimport asyncio\nimport memcom\n\ndef on_error(ctx, e):\n    print(ctx.getName(), '---', e)\n\nasync def run():\n\n    print(memcom.__info__)\n\n    # Video file name\n    if not os.path.isdir('./out'):\n        os.mkdir('./out')\n    fname = './out/testvid.avi'\n\n    # Clip length in seconds\n    t = 30\n\n    # Time divider / Clip will be t / div seconds in length\n    # Using a higher divider gives more time to process\n    # If your CPU canÂ´t keep up, increase this value\n    div = 1\n\n    #---------------------------------------------------------------\n    # Video parameters\n    w = 800\n    h = 600\n    vfps = 15\n\n    print('Create video share')\n    vid = memcom.mcVideo()\n    if not vid.create(bufs=2*vfps, width=w, height=h, fps=vfps, cleanup=True):\n        raise Exception(vid.getError())\n\n    vsname = vid.getName()\n    print(f'Video share created: {vsname}')\n\n\n    #---------------------------------------------------------------\n    # Audio Parameters\n    ch = 2\n    bps = 16\n    asr = 48000\n    afps = 50\n\n    print('Create audio share')\n    aud = memcom.mcAudio()\n    if not aud.create(bufs=2*afps, ch=ch, bps=bps, bitrate=asr, fps=afps, cleanup=True):\n        raise Exception(aud.getError())\n\n    asname = aud.getName()\n    print(f'Audio share created: {asname}')\n\n\n    #---------------------------------------------------------------\n    # Create initial rectangles\n\n    # Initial rects\n    n = 0\n\n    # Target number of rects / adds one each second\n    m = 4\n\n    tv = []\n    rects = [{'x': 0, 'y': 0, 'w': w, 'h': h}]\n    for i in range(0, n-1):\n        memcom.addRect(rects)\n\n    ri = 0\n    for r in rects:\n        ri += 1\n        v = memcom.mcTestVid(on_error=on_error,\n                             opts={'name': f'Rect{ri}', 'roi':r,\n                                   'video':vsname, 'vbias':-0.25, 'vwin':0.25,\n                                   'audio':asname, 'abias':-0.25, 'awin':0.25})\n        if not v.create():\n            raise Exception(v.getError())\n        tv.append(v)\n\n\n    #---------------------------------------------------------------\n    # Create file recorder\n    print('Create recorder')\n    rec = memcom.mcRecord(on_error=on_error,\n                          opts={'name': 'Recorder',\n                                'video':vsname, 'vbias':-0.5, 'vwin':0.25,\n                                'audio':asname, 'abias':-0.5, 'awin':0.25})\n    if not rec.create(fname):\n    # if not rec.create(fname, opts={'roi':{'x':int(w/4), 'y':int(h/4), 'w':int(w/2), 'h':int(h/2)}}):\n        raise Exception(rec.getError())\n\n\n    #---------------------------------------------------------------\n    # Create frame eraser / clears frames before reuse\n    print('Create Eraser')\n    erase = memcom.mcBlank(on_error=on_error,\n                           opts={'name': 'Eraser',\n                                 'video':vsname, 'vbias':-0.75, 'vwin':0.25,\n                                 'audio':asname, 'abias':-0.75, 'awin':0.25})\n    if not erase.create():\n        raise Exception(rec.getError())\n\n\n    #---------------------------------------------------------------\n    # Create the clock\n    print('Create clock')\n    clk = memcom.mcClock(on_error=on_error,\n                         opts={'name': 'Clock', 'div':div,\n                               'video':vsname, 'vfps':vfps, 'vbias':0, 'vwin':0.25,\n                               'audio':asname, 'afps':afps, 'abias':0, 'awin':0.25})\n    clk.create()\n\n\n    #---------------------------------------------------------------\n    # Run everything for t * div seconds\n    d = 0\n    c = 0\n    t = t * div\n    while 0 < t:\n        time.sleep(1)\n        t -= 1\n        d += 1\n        if d >= div:\n            d = 0\n            c += 1\n            if c >= 4:\n                c = 0\n                if len(rects) < m:\n                    print('Add rect')\n                    r = memcom.addRect(rects)\n                    ri = len(rects) + 1\n                    v = memcom.mcTestVid(on_error=on_error,\n                                            opts={'name': f'Rect{ri}', 'roi':r,\n                                                'video':vsname, 'vbias':-0.25, 'vwin':0.25,\n                                                'audio':asname, 'abias':-0.25, 'awin':0.25})\n                    if not v.create():\n                        raise Exception(v.getError())\n                    tv.append(v)\n\n\n    # Close everything\n    clk.close()\n    erase.close()\n    rec.close()\n    for v in tv:\n        v.close()\n    vid.close()\n\n\nif __name__ == '__main__':\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    loop.run_until_complete(run())\n\n```\n\n&nbsp;\n\n\n---------------------------------------------------------------------\n## References\n\n- Python\n    - https://www.python.org/\n\n- pip\n    - https://pip.pypa.io/en/stable/\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wheresjames/memcom",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memcom",
    "package_url": "https://pypi.org/project/memcom/",
    "platform": null,
    "project_url": "https://pypi.org/project/memcom/",
    "project_urls": {
      "Homepage": "https://github.com/wheresjames/memcom"
    },
    "release_url": "https://pypi.org/project/memcom/0.1.1/",
    "requires_dist": [
      "Pillow",
      "av",
      "propertybag",
      "sparen"
    ],
    "requires_python": "",
    "summary": "Interprocess real time message/audio/video buffers",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15592221,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea3f0d25b8a10e25c1fdb1b076b38174e7563309e8afda33f572d95829cc3827",
          "md5": "f7b5786995478c5e4df40929fd1d1dd6",
          "sha256": "617e92316390dd864e4b8d8c22b212887ead23368b492138877d7b97b8d457c2"
        },
        "downloads": -1,
        "filename": "memcom-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b5786995478c5e4df40929fd1d1dd6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24118,
        "upload_time": "2022-10-31T05:27:34",
        "upload_time_iso_8601": "2022-10-31T05:27:34.293482Z",
        "url": "https://files.pythonhosted.org/packages/ea/3f/0d25b8a10e25c1fdb1b076b38174e7563309e8afda33f572d95829cc3827/memcom-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea3f0d25b8a10e25c1fdb1b076b38174e7563309e8afda33f572d95829cc3827",
        "md5": "f7b5786995478c5e4df40929fd1d1dd6",
        "sha256": "617e92316390dd864e4b8d8c22b212887ead23368b492138877d7b97b8d457c2"
      },
      "downloads": -1,
      "filename": "memcom-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7b5786995478c5e4df40929fd1d1dd6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24118,
      "upload_time": "2022-10-31T05:27:34",
      "upload_time_iso_8601": "2022-10-31T05:27:34.293482Z",
      "url": "https://files.pythonhosted.org/packages/ea/3f/0d25b8a10e25c1fdb1b076b38174e7563309e8afda33f572d95829cc3827/memcom-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}