{
  "info": {
    "author": "MaxLarue",
    "author_email": "maximilienlarue@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "==================\ndjango-simple-acl\n==================\n\nConfiguring builtin groups and permissions declaratively from code as static access control lists. Integrates with\n django built-in model permissions\n\nFeatures:\n\n- Define a list of groups that should exist at all time\n- Bind to each group a set of crud permissions to any model\n\n\nSummary\n============\n\n    - install_\n    - config_\n    - usage_\n    - gotchas_\n    - testing_\n    - restframework_\n\n.. _install:\n\nInstallation\n============\n\n#. `pip install django-groups-acl`\n#. Add `'simpleacls'` to `INSTALLED_APPS`\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        ...\n        'simpleacls.apps.SimpleAclsConfig',\n        ...\n    ]\n\nNB: make sure to add 'simpleacls.apps.SimpleAclsConfig' to your installed apps, not simply simpleacls\n\n.. _config:\n\nConfiguration\n=============\n\n.. code-block:: python\n\n    SIMPLE_ACLS = {\n        groups: [\n            \"admin\",\n            \"moderator\",\n            \"reader\",\n            \"gremlins\"\n        ],\n        acls: [\n            \"library.permissions.ACLS\",\n            \"swimmingpool.permissions.ACLS\",\n            \"polls.permissions.ACLS\",\n            \"myproject.permissions.ACLS\",\n        ]\n    }\n\n.. _usage:\n\nUsage\n=====\n\nWith django-simple-acls you define the groups of users you need in your app, which CRUD permission each group brings to\nthe user and on application startup the groups are created and model permissions are linked.\n\nEverything happens at startup and the final state is dictated by your code, which makes it simple to configure, update\nand replicate in multiple deployments.\n\nTo setup django-simple-acls, you must define a SIMPLE_ACL dictionary inside your settings.py file. Entries are:\n    - groups: a list of string representing the groups names\n    - acls: a list of path to the acls objects\n\n`acls` is a list of path such as those of middleware in the form \"path.to.module.objectinsidethemodule\". The goal here\nis to have acls live inside the same module as the model they apply on.\n\nAn example SIMPLE_ACL config can be found inside the test source:\n\n.. code-block:: python\n\n    SIMPLE_ACLS = {\n        \"groups\": [DRIVER, SHOP_EMPLOYEE, SALESMAN, ACCOUNTANT, MANAGER],\n        \"acls\": [\n            \"testautoload.acls.ACLS\"\n        ]\n    }\n\nwhere DRIVER, SHOP_EMPLOYEE, SALESMAN, ACCOUNTANT and MANAGER are actually the group name (as a string).\n\nThe acl declaration structure in itself can be as follow:\n\n.. code-block:: python\n\n    from myapp.models import MyCoolModel\n    from myapp.groups import ANONYMOUS, USER, ADMIN\n    from simpleacls.acls import C, R, U, D\n\n    ACLS = {\n        MyCoolModel: {\n            ANONYMOUS: {R}\n            USER: {C, R, U},\n            ADMIN: {C, R, U, D}\n        }\n    }\n\nIn other words, acl declarations are a mapping of models, to groups, to permissions.\n\nC, R, U, D are create, read, update delete permissions on a certain model.\n\nThe model itself is the key in the ACLS mapping (not his name, the actual model class).\n\nOn this model we define a map of groups and for each groups, which permission is available.\n\nPermissions are a set of C, R, U, D.\n\nThe group key is actually the group name (if you have a group called admin, it would be 'admin'). But you'll probably\nwant to maje these constants in your project or an enum.\n\nIf you omit a group for a model, that group will have no permission on that model.\n\nIf you define two sets of permissions for the same group, on the same model, they will be merged and duplicates removed.\n(meaning if you define two sets of permission, the resulting permission set will be the highest combination of both)\n\n.. _gotchas:\n\nGotchas\n========\n\n    - If the groups are not created and the permissions not linked on startup, maje sure you added 'simpleacls.apps.SimpleAclsConfig' to your installed apps\n    - If you omit the SIMPLE_ACLS settings or make a typo in the name, no permission will be loaded\n    - If you need to define an empty set of permissions use `set()` as `{}` is an empty dictionary.\n    - If the acl path in SIMPLE_ACLS[\"acl\"] is not valid (module does not exist or does not have the specified object). Then your application won't start (but you should see a warning about it).\n    - In order for permissions to be loaded inside your tests, you need to use the AclTestMixin (see the test section for detail).\n\n.. _testing:\n\nTesting\n========\n\nThe groups and permissions might not be setup correctly during your test (but they will be on application start). To\navoid confusion, and make sure everything is setup correctly, you should use the AclTestMixin in your integration/end2end\ntests. Here is an example how to:\n\n.. code-block:: python\n\n    from django.test import TestCase\n    from simpleacls.testutils import AclTestMxin\n\n    class MyTest(AclTestMixin, TestCase):\n\n        def test_something(self):\n            some = Group.objects.get(name=\"some_groups\")  # this group and it's permissions were created\n\n.. _restframework:\n\nUsage with rest framework\n==========================\n\nThe fact permissions used are the django's models one makes it possible to use this package with any other package that\nintegrate with those. As an example to leverage these permissions on a drf viewset, you'd use the DjangoModelPermissions\nclass and you're set:\n\n.. code-block:: python\n\n    from rest_framework import viewsets\n    from rest_framework.permissions import DjangoModelPermissions\n    from myapp.models import MyCoolModel\n    from myapp.serializers import MyCoolModelSerializer\n\n    class CoolModelViewSet(viewsets.ModelViewSet):\n        queryset = MyCoolModel.objects.all()\n        serializer_class = MyCoolModelSerializer\n        permission_classes = [DjangoModelPermissions]\n\n\nThis viewset will respect your acls, as the permissions live inside the database and are created upon startup.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MaxLarue/django-simple-acl/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-simple-acl",
    "package_url": "https://pypi.org/project/django-simple-acl/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-simple-acl/",
    "project_urls": {
      "Homepage": "https://github.com/MaxLarue/django-simple-acl/"
    },
    "release_url": "https://pypi.org/project/django-simple-acl/0.1.0/",
    "requires_dist": [
      "Django (>=2.7)"
    ],
    "requires_python": "",
    "summary": "Access control lists tied to django groups",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8377826,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99be7a92785a49d6b861a26a3496b25cb91b158244a00c8eb43b5221eb5304d6",
          "md5": "da3162c100e8278a342f365d738df842",
          "sha256": "53bc24dc0a42b0c893f2193061f8cc6a31b05d316600687454598f2e03d240b8"
        },
        "downloads": -1,
        "filename": "django_simple_acl-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da3162c100e8278a342f365d738df842",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6824,
        "upload_time": "2020-10-09T18:02:51",
        "upload_time_iso_8601": "2020-10-09T18:02:51.650744Z",
        "url": "https://files.pythonhosted.org/packages/99/be/7a92785a49d6b861a26a3496b25cb91b158244a00c8eb43b5221eb5304d6/django_simple_acl-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "043dc9eb94d9a554d2146351826026d4844888d7bb9a087f8be949b2ea957a4f",
          "md5": "42222c3f71b414a8bd3fd3f5f6dde597",
          "sha256": "37b0d4833b6dceb2f4201f5be6fa8875170dd0fd499a0ad6eb8218bed8542305"
        },
        "downloads": -1,
        "filename": "django-simple-acl-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "42222c3f71b414a8bd3fd3f5f6dde597",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5848,
        "upload_time": "2020-10-09T18:02:54",
        "upload_time_iso_8601": "2020-10-09T18:02:54.510902Z",
        "url": "https://files.pythonhosted.org/packages/04/3d/c9eb94d9a554d2146351826026d4844888d7bb9a087f8be949b2ea957a4f/django-simple-acl-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99be7a92785a49d6b861a26a3496b25cb91b158244a00c8eb43b5221eb5304d6",
        "md5": "da3162c100e8278a342f365d738df842",
        "sha256": "53bc24dc0a42b0c893f2193061f8cc6a31b05d316600687454598f2e03d240b8"
      },
      "downloads": -1,
      "filename": "django_simple_acl-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da3162c100e8278a342f365d738df842",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6824,
      "upload_time": "2020-10-09T18:02:51",
      "upload_time_iso_8601": "2020-10-09T18:02:51.650744Z",
      "url": "https://files.pythonhosted.org/packages/99/be/7a92785a49d6b861a26a3496b25cb91b158244a00c8eb43b5221eb5304d6/django_simple_acl-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "043dc9eb94d9a554d2146351826026d4844888d7bb9a087f8be949b2ea957a4f",
        "md5": "42222c3f71b414a8bd3fd3f5f6dde597",
        "sha256": "37b0d4833b6dceb2f4201f5be6fa8875170dd0fd499a0ad6eb8218bed8542305"
      },
      "downloads": -1,
      "filename": "django-simple-acl-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "42222c3f71b414a8bd3fd3f5f6dde597",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5848,
      "upload_time": "2020-10-09T18:02:54",
      "upload_time_iso_8601": "2020-10-09T18:02:54.510902Z",
      "url": "https://files.pythonhosted.org/packages/04/3d/c9eb94d9a554d2146351826026d4844888d7bb9a087f8be949b2ea957a4f/django-simple-acl-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}