{
  "info": {
    "author": "Amazon Web Services",
    "author_email": "aws-cryptools@amazon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Security",
      "Topic :: Security :: Cryptography"
    ],
    "description": "##############\nsecrets-helper\n##############\n\n.. image:: https://img.shields.io/pypi/v/secrets-helper.svg\n   :target: https://pypi.python.org/pypi/secrets-helper\n   :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/secrets-helper.svg\n   :target: https://pypi.python.org/pypi/secrets-helper\n   :alt: Supported Python Versions\n\n.. image:: https://img.shields.io/badge/code_style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Code style: black\n\n.. image:: https://readthedocs.org/projects/secrets-helper/badge/\n   :target: https://secrets-helper.readthedocs.io/en/stable/\n   :alt: Documentation Status\n\n.. image:: https://travis-ci.org/awslabs/secrets-helper.svg?branch=master\n   :target: https://travis-ci.org/awslabs/secrets-helper\n\n.. image:: https://ci.appveyor.com/api/projects/status/REPLACEME/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/REPLACEME\n\n``secrets-helper`` helps you use credentials stored in AWS Secrets Manager\nwith tools that accept credentials and other configuration\nthrough environment variables.\n\n***************\nGetting Started\n***************\n\nRequired Prerequisites\n======================\n\n* Suported Python versions\n\n  * 3.7\n  * 3.8\n\nInstallation\n============\n\n.. code::\n\n   $ pip install secrets-helper\n\n*****\nUsage\n*****\n\nHow it works\n============\n\nTo use ``secrets-helper``,\nsimply identify the ARN of your Secrets Manager secret,\nthe command profile that you want to use,\nand the command that you want to run along with any desired arguments.\n\n.. code-block:: shell\n\n    $ secrets-helper run \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret \\\n        --profile twine \\\n        --command \"twine upload --skip-existing dist/*\"\n\nValue Injection\n---------------\n\n``secrets-helper`` gets your credentials from Secrets Manager\nand injects them into the appropriate environment variables\nwhen it runs the command.\n\nFor example, if you were to have it run the ``env`` command\nto print out all of your environment variables,\nyou would see:\n\n.. code-block:: shell\n\n    $ secrets-helper run \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret \\\n        --profile twine \\\n        --command env\n    TWINE_USERNAME=my-awesome-username\n    TWINE_PASSWORD=my-secret-password\n    TWINE_REPOSITORY_URL=https://test.pypi.org/legacy/\n\n.. important::\n\n    Storing secrets in environment variables carries risks\n    because anything running in that environment has access\n    to those secret values.\n\n    For example, if your testing infrastructure logs all environment variables\n    (something that is perfectly reasonable to do in a testing environment)\n    then if you store secrets in your environment variables\n    those secrets are leaked into your testing logs.\n\n    ``secrets-helper run`` helps you work around this\n    by running your requested command in an isolated subprocess.\n    Your secret environment variables are ONLY injected\n    into this isolated subprocess,\n    so anything running outside of that process does NOT\n    have access to your secrets.\n\nConfiguration\n-------------\n\nIn order for ``secrets-helper`` to correctly load your credentials,\nyour secret needs to be JSON-formatted with expected field names.\nIt uses these names to map your secret values to the correct environment variables.\nThis means you can use a single Secrets Manager secret to store multiple secret values.\n\nYou can either format your secret plaintext like this manually\nor you can create key-value pairs in your secret through the\nSecrets Manager console.\n\n.. code-block:: shell\n\n    $ aws secretsmanager get-secret-value \\\n        --secret-id arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret\n    {\n        \"username\": \"my-awesome-username\",\n        \"password\": \"my-secret-password\",\n        \"url\": \"https://test.pypi.org/legacy/\"\n    }\n\n\n``secrets-helper`` comes pre-loaded\nwith some known environment variable mappings for common tools.\nYou can use those as-is or you can provide an ini-style config file\nthat defines a custom mapping.\n\n.. code-block:: shell\n\n    $ secrets-helper run \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret \\\n        --config twine-config.cfg \\\n        --command \"twine upload --skip-existing dist/*\"\n\nA mapping for ``twine`` might looks like this:\n\n.. code-block:: ini\n\n    [secrets-helper.env]\n    username: TWINE_USERNAME\n    password: TWINE_PASSWORD\n    url: TWINE_REPOSITORY_URL\n\n.. warning::\n\n    Each identifier to environment variable mapping MUST be 1:1.\n    No environment variable may have more than one identifier\n    that maps to it.\n\n\nAdditional Configuration\n------------------------\n\nYou can also define secret IDs and a command profile in the config file.\n\n.. code-block:: ini\n\n    [secrets-helper.settings]\n    secrets:\n        arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret\n        arn:aws:secretsmanager:us-west-2:111222333444:secret:AnotherSecret\n    profile: twine\n\nMultiple Secrets\n================\n\nYou might need to load secret values from multiple Secrets Manager secrets.\nIn this case, simply provide multiple ``--secret`` options!\n\n.. warning::\n\n    WARNING: If you use ``secrets-helper`` with multiple secrets,\n    those secrets MUST NOT have any repeating keys.\n\n.. code-block:: shell\n\n    $ secrets-helper run \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:AnotherSecret \\\n        --profile twine \\\n        --command \"twine upload --skip-existing dist/*\"\n\nSecrets as Command Line Parameters\n==================================\n\nSome commands need secret values to be passed in as command line parameters.\nIf you need to do this, add a reference in your ``--command`` parameter\nusing the ``{env:NAME}`` syntax to identify where you need\nenvironment variable values to be injected.\n\n.. important::\n\n    Providing secrets as command line arguments should generally be avoided\n    because anything monitoring your shell activity (such as ``history``)\n    will collect your secret values.\n\n    ``secrets-helper run`` helps with this too!\n    Because it executes the command you request in an isolated subprocess,\n    the command arguments are not exposed to external processes.\n\n.. code-block:: shell\n\n    $ secrets-helper run \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret \\\n        --profile twine \\\n        --command \"twine upload --skip-existing {env:DIST_DIRECTORY}\"\n\nPassing to ``env``\n==================\n\nIn some advanced use cases, you might not be able to use the ``run`` operating mode.\nIf you find yourself in this situation,\nyou can use the ``env`` operating mode\nand make ``secrets-helper`` print out the resulting environment variable assignments\nin a format that the ``env`` command can understand.\n\n.. code-block:: shell\n\n    $ secrets-helper env \\\n        --secret arn:aws:secretsmanager:us-west-2:111222333444:secret:MyAwesomeSecret \\\n        --profile twine\n\n\n***********\nDevelopment\n***********\n\nPrerequisites\n=============\n\n* Required\n\n  * Python 3.7+\n  * `tox`_ : We use tox to drive all of our testing and package management behavior.\n    Any tests that you want to run should be run using tox.\n\n* Optional\n\n  * `pyenv`_ : If you want to test against multiple versions of Python and are on Linux or MacOS,\n    we recommend using pyenv to manage your Python runtimes.\n  * `tox-pyenv`_ : Plugin for tox that enables it to use pyenv runtimes.\n  * `detox`_ : Parallel plugin for tox. Useful for running a lot of test environments quickly.\n\nSetting up pyenv\n----------------\n\nIf you are using pyenv, make sure that you have set up all desired runtimes and configured the environment\nbefore attempting to run any tests.\n\n1. Install all desired runtimes.\n\n   * ex: ``pyenv install 3.7.0``\n   * **NOTE:** You can only install one runtime at a time with the ``pyenv install`` command.\n\n1. In the root of the checked out repository for this package, set the runtimes that pyenv should use.\n\n   * ex: ``pyenv local 2.7.14 3.4.6 3.5.3 3.6.4 3.7.0``\n   * **NOTE:** This creates the ``.python-version`` file that pyenv will use. Pyenv treats the first\n     version in that file as the default Python version.\n\n\nRunning tests\n=============\n\nThere are two criteria to consider when running our tests:\nwhat version of Python do you want to use and what type of tests do you want to run?\n\nFor a full listing of the available types of tests available,\nsee the ``[testenv]commands`` section of the ``tox.ini`` file.\n\nAll tests should be run using tox.\nTo do this, identify the test environment that you want tox to run using the ``-e ENV_NAME`` flag.\nThe standard test environments are named as a combination of the Python version\nand the test type in the form ``VERSION-TYPE``.\nFor example, to run the ``local`` tests against CPython 3.7:\n\n.. code-block:: bash\n\n    tox -e py37-local\n\nIf you want to provide custom parameters to pytest to manually identify what tests you want to run,\nuse the ``manual`` test type. Any arguments you want to pass to pytest must follow the ``--`` argument.\nAnything before that argument is passed to tox. Everything after that argument is passed to pytest.\n\n.. code-block:: bash\n\n    tox -e py37-manual -- test/unit/test_example_file.py\n\nBefore submitting a pull request\n================================\n\nBefore submitting a pull request, please run the ``lint`` tox environment.\nThis will ensure that your submission meets our code formatting requirements\nand will pass our continous integration code formatting tests.\n\n.. _tox: http://tox.readthedocs.io/\n.. _detox: https://pypi.org/project/detox/\n.. _tox-pyenv: https://pypi.org/project/tox-pyenv/\n.. _pyenv: https://github.com/pyenv/pyenv\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awslabs/secrets-helper",
    "keywords": "secrets-helper secrets_helper aws",
    "license": "Apache 2.0",
    "maintainer": "Amazon Web Services",
    "maintainer_email": "",
    "name": "secrets-helper",
    "package_url": "https://pypi.org/project/secrets-helper/",
    "platform": "",
    "project_url": "https://pypi.org/project/secrets-helper/",
    "project_urls": {
      "Homepage": "https://github.com/awslabs/secrets-helper"
    },
    "release_url": "https://pypi.org/project/secrets-helper/0.1.0/",
    "requires_dist": [
      "click (>=3.0)",
      "boto3"
    ],
    "requires_python": ">=3.7",
    "summary": "secrets-helper",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6281346,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3576315db8719e4dcada5dc98065ea4b1db10632dabead0c9df3f75ba8277540",
          "md5": "ed32d7d1c8e8a26c6d80c8f805ed7131",
          "sha256": "5dde7046bb8d753dd8451e42b69dc6e8b8535b4151326b6ac5940b6f86573936"
        },
        "downloads": -1,
        "filename": "secrets_helper-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed32d7d1c8e8a26c6d80c8f805ed7131",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 25032,
        "upload_time": "2019-12-11T22:36:35",
        "upload_time_iso_8601": "2019-12-11T22:36:35.394291Z",
        "url": "https://files.pythonhosted.org/packages/35/76/315db8719e4dcada5dc98065ea4b1db10632dabead0c9df3f75ba8277540/secrets_helper-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "764f89b0813677509c369e216fe4bd14adde452a31d65e9d73b28f9917ed602f",
          "md5": "fd417f3bcff765c2fd2eb599334d1976",
          "sha256": "cfc3bab843431152f41d0df3844e92ac6864d084d0e17a72cd160ea28610fb28"
        },
        "downloads": -1,
        "filename": "secrets-helper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd417f3bcff765c2fd2eb599334d1976",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36225,
        "upload_time": "2019-12-11T22:36:37",
        "upload_time_iso_8601": "2019-12-11T22:36:37.956857Z",
        "url": "https://files.pythonhosted.org/packages/76/4f/89b0813677509c369e216fe4bd14adde452a31d65e9d73b28f9917ed602f/secrets-helper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3576315db8719e4dcada5dc98065ea4b1db10632dabead0c9df3f75ba8277540",
        "md5": "ed32d7d1c8e8a26c6d80c8f805ed7131",
        "sha256": "5dde7046bb8d753dd8451e42b69dc6e8b8535b4151326b6ac5940b6f86573936"
      },
      "downloads": -1,
      "filename": "secrets_helper-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed32d7d1c8e8a26c6d80c8f805ed7131",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 25032,
      "upload_time": "2019-12-11T22:36:35",
      "upload_time_iso_8601": "2019-12-11T22:36:35.394291Z",
      "url": "https://files.pythonhosted.org/packages/35/76/315db8719e4dcada5dc98065ea4b1db10632dabead0c9df3f75ba8277540/secrets_helper-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "764f89b0813677509c369e216fe4bd14adde452a31d65e9d73b28f9917ed602f",
        "md5": "fd417f3bcff765c2fd2eb599334d1976",
        "sha256": "cfc3bab843431152f41d0df3844e92ac6864d084d0e17a72cd160ea28610fb28"
      },
      "downloads": -1,
      "filename": "secrets-helper-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fd417f3bcff765c2fd2eb599334d1976",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 36225,
      "upload_time": "2019-12-11T22:36:37",
      "upload_time_iso_8601": "2019-12-11T22:36:37.956857Z",
      "url": "https://files.pythonhosted.org/packages/76/4f/89b0813677509c369e216fe4bd14adde452a31d65e9d73b28f9917ed602f/secrets-helper-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}