{
  "info": {
    "author": "",
    "author_email": "Andy Patterson <andnpatterson@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyExpUtils\n\nShort for python experiment utilities.\nThis is a collection of scripts and machine learning experiment management tools that I use whenever I have to use python.\n\nFor a more complete discussion on my organization patterns for research codebases, [look in the docs](docs/OrganizationPatterns.md).\n\n## This lib\nMaintaining a rigorous experiment structure can be labor intensive.\nAs such, I've automated out many of the common pieces that I use in my research.\n\n### Parameter Permutations\nExperiments are encoded within JSON files.\nThe JSON files should contain all of the information necessary to reproduce an experiment, including all parameters swept.\nEach of the parameter sweep specifications leads to a set of parameter permutations.\nImagine the case where you are sweeping over 2 meta-parameters:\n```json\n{\n    \"metaParameters\": {\n        \"alpha\": [0.01, 0.02, 0.04],\n        \"epsilon\": [0.1, 0.2, 0.3]\n    }\n}\n```\nHere there are 9 total possible permutations: `{alpha: 0.01, epsilon: 0.1}`, `{alpha: 0.01, epsilon: 0.2}`, ...\n\nThese are indexed by a single numeric value.\nTo run each permutation once, simply execute indices `i \\in [0..8]`.\nTo run each permutation twice, multiply by 2: `i \\in [0..17]`.\nIn general for `n` runs and `p` permutations: `i \\in [0..(n*p - 1)]`.\n\n\n## models\nA collection of JSON serialization classes with associated utility methods.\n### PyExpUtils/models/Config.py\n**Config**:\n\nExperiment utility configuration file.\nSpecifies global configuration settings:\n - *save_path*: directory format where experimental results will be stored\n - *log_path*: directory where log files will be saved (e.g. stacktraces during experiments)\n - *experiment_directory*: root directory where all of the experiment description files are located\n\nThe config file should be at the root level of the repository and should be named `config.json`.\n```\n.git\n.gitignore\ntests/\nscripts/\nsrc/\nconfig.json\n```\n\nAn example configuration file:\n```json\n{\n    \"save_path\": \"results/{name}/{environment}/{agent}/{params}\",\n    \"log_path\": \"~/scratch/.logs\",\n    \"experiment_directory\": \"experiments\"\n}\n```\n\n\n**getConfig**:\n\nMemoized global configuration loader.\nWill read `config.json` from (only once) and return a Config object.\n```python\nconfig = getConfig()\nprint(config.save_path) # -> 'results'\n```\n\n\n### PyExpUtils/models/ExperimentDescription.py\n**ExperimentDescription**:\n\nMain workhorse class of the library.\nTakes a dictionary desribing all configurable options of an experiment and serializes that dictionary.\nProvides a set of utility methods to run parameter sweeps in parallel and for storing data during experiments.\n```python\nexp_dict = {\n    'algorithm': 'SARSA',\n    'environment': 'MountainCar',\n    'metaParameters': {\n        'alpha': [1.0, 0.5, 0.25, 0.125],\n        'lambda': [1.0, 0.99, 0.98, 0.96]\n    }\n}\nexp = ExperimentDescription(d)\n```\n\n\n**permutable**:\n\nGives a list of parameters that can be swept over.\nUsing above example dictionary:\n```python\nparams = exp.permutable()\nprint(params) # -> { 'alpha': [1.0, 0.5, 0.25, 0.125], 'lambda': [1.0, 0.99, 0.98, 0.96] }\n```\n\n\n**getPermutation**:\n\nGives the `i`'th permutation of sweepable parameters.\nHandles wrapping indices, so can perform multiple runs of the same parameter setting by setting `i` large.\nIn the above dictionary, there are 16 total parameter permutations.\n```python\nparams = exp.getPermutation(0)\nprint(params) # -> { 'alpha': 1.0, 'lambda': 1.0 }\nparams = exp.getPermutation(1)\nprint(params) # -> { 'alpha': 1.0, 'lambda': 0.99 }\nparams = exp.getPermutation(15)\nprint(params) # -> { 'alpha': 0.125, 'lambda': 0.96 }\nparams = exp.getPermutation(16)\nprint(params) # -> { 'alpha': 1.0, 'lambda': 1.0 }\n```\n\n\n**numPermutations**:\n\nGives the total number of parameter permutations.\n```python\nnum_params = exp.numPermutations()\nprint(num_params) # -> 16\n```\n\n\n**getRun**:\n\nGet the run number based on wrapping the index.\nThis is a count of how many times we've wrapped back around to the same parameter setting.\n```python\nnum = exp.getRun(0)\nprint(num) # -> 0\nnum = exp.getRun(12)\nprint(num) # -> 0\nnum = exp.getRun(16)\nprint(num) # -> 1\nnum = exp.getRun(32)\nprint(num) # -> 2\n```\n\n\n**getExperimentName**:\n\nReturns the name of the experiment if stated in the dictionary: `{ 'name': 'MountainCar-v0', ... }`.\nIf not stated, will try to determine the name of the experiment based on the path to the JSON it is stored in (assuming experiments are stored in JSON files).\n```python\npath = 'experiments/MountainCar-v0/sarsa.json'\nwith open(path, 'r') as f:\n    d = json.load(path)\nexp = ExperimentDescription(d, path)\nname = exp.getExperimentName()\nprint(name) # -> d['name'] if available, or 'MountainCar-v0' if not.\n```\n\n\n**interpolateSavePath**:\n\nTakes a parameter index and generates a path for saving results.\nThe path depends on the configuration settings of the library (i.e. `config.json`).\nNote this uses an opinionated formatting for save paths and parameter string representations.\nThe configuration file can specify ordering and high-level control over paths, but for more fine-tuned control over how these are saved, inherit from this class and overload this method.\n`config.json`:\n```json\n{\n    \"save_path\": \"results/{name}/{environment}/{agent}/{params}\"\n}\n```\n```python\npath = exp.interpolateSavePath(0)\nprint(path) # -> 'results/MountainCar-v0/SARSA/alpha-1.0_lambda-1.0'\n```\n\n\n**buildSaveContext**:\n\nBuilds a `FileSystemContext` utility object that contains the save path for experimental results.\n```python\nfile_context = exp.buildSaveContext(0)\n# make sure folder structure is built\nfile_context.ensureExists()\n# get the path where results should be saved\npath = file_context.resolve('returns.npy')\nprint(path) # -> '/results/MountainCar-v0/SARSA/alpha-1.0_lambda-1.0/returns.npy'\n# save results\nnp.save(path, returns)\n```\n\n\n**loadExperiment**:\n\nLoads an ExperimentDescription from a JSON file (preferred way to make ExperimentDescriptions).\n\n```python\nexp = loadExperiment('experiments/MountainCar-v0/sarsa.json')\n```\n\n\n## runner\n### PyExpUtils/runner/Slurm.py\n**hours**:\n\nTakes an integer number of hours and returns a well-formated time string.\n```python\ntime = hours(3)\nprint(time) # -> '2:59:59\n```\n\n\n**gigs**:\n\nTakes an integer number of gigabytes and returns a well-formated memory string.\n```python\nmemory = gigs(4)\nprint(memory) # -> '4G'\n```\n\n\n## results\n### PyExpUtils/results/indices.py\n**listIndices**:\n\nReturns an iterator over indices for each parameter permutation.\nCan specify a number of runs and will cycle over the permutations `runs` number of times.\n\n```python\nfor i in listIndices(exp, runs=2):\n    print(i, exp.getRun(i)) # -> \"0 0\", \"1 0\", \"2 0\", ... \"0 1\", \"1 1\", ...\n```\n\n\n**listMissingResults**:\n\nReturns an iterator over indices which are missing results.\nDetects if a results is missing by checking if the results folder exists, but cannot check the contents of the results folder.\nIf deeper checking is necessary, copy and modify the source of this function accordingly.\n\nUseful for rescheduling jobs that were cancelled due to timeout (or randomly dropped jobs, etc.).\nIf no results are missing, then iterator is empty and the for loop is skipped.\n\n```python\nfor i in listMissingResults(exp, runs=100):\n    print(i) # -> 0, 1, 4, 23, 1002, ...\n```\n\n\n### PyExpUtils/results/results.py\n**Result**:\n\nThe `Result` objects allows performing operations over results lazily so that many file system calls can be avoided.\nThis is extremely useful when doing large parameter sweeps and plotting over slices of parameters.\nThe object stores some metadata about the result that can be inferred from the experiment description without needing to open the result file.\n\n```python\nresults = loadResults(exp, 'returns.npy') # -> gives an iterator over Result objects\n\nfor result in results:\n    print(result.path) # -> 'results/MountainCar-v0/SARSA/alpha-1.0_lambda-1.0/returns.npy'\n    print(result)\n\n# only load results from disk where alpha > 0.2\nresults = filter(lambda res: res.params['alpha'] > 0.2, results)\nfor result in results:\n    plot(result.load())\n\n```\n\n\n**reducer**:\n\nTakes a function that manipulates the result data.\nFor example: useful for truncating data or looking at only final performance, etc.\n```python\ndef getFirstNSteps(results, n):\n    for result in results:\n        yield result.reducer(lambda data: data[0:n])\nresults = loadResults(exp, 'returns.npy')\nresults = getFirstNSteps(results, 100)\n```\n\n\n**load**:\n\nLoad the result from disk.\nThe contents of the results file are cached, so as long as this result file is accessible (e.g. not garbage collected) you will only hit the filesystem once.\nThis is important for distributed filesystems (like on computecanada) where filesystem calls are extremely expensive.\nNote that if the result does not exist (e.g. compute canada job timed out), then an error message will be printed but no exception will be thrown.\nThis way plotting code can still continue to run with partial results.\n\n\n**ResultView**:\n\nA \"window\" over a `Result` object that allows changing the type of reducer on the object while still referencing the same memory cache.\nUseful for applying different views at the same results file without needing to load multiple copies of the result into memory or making multiple filesystem calls.\nReturned from the `Result.reducer` method.\nMaintains same API as a `Result` object and can be used interchangeably.\n\n```python\nresults = loadResults(exp, 'returns.npy')\nfor result in results:\n    view = result.reducer(lambda m: m.mean())\n    view2 = result.reducer(lambda m: m.std())\n```\n\n\n**splitOverParameter**:\n\nUtility function for sorting results into bins based on values of a metaParameter.\nDoes not load results from disk.\n\n```python\nresults = loadResults(exp, 'returns.npy')\nbins = splitOverParameter(results, 'alpha')\nprint(bins) # -> { 1.0: [Result, Result, ...], 0.5: [Result, Result, ...], 0.25: [Result, Result, ...], ...}\n```\n\n\n**sliceOverParameter**:\n\nUtility function for sorting results by fixing all parameters except one, and returning a list of results for all other values of the other parameter.\nTakes the list of results to consider, a result whose parameter values you want to match, and the name of the parameter you want to sweep over.\nDoes not load results from disk.\n\n```python\nresults = loadResults(exp, 'returns.npy')\nresult = next(results)\nslice = sliceOverParameter(results, result, 'lambda')\n\nprint(slice) # => { 1.0: [Result, Result, ...], 0.99: [Result, Result, ...], 0.98: [Result, Result], ....}\n```\n\n\n**getBest**:\n\nReturns the best result over a list of results.\nCan defined \"best\" based on the `comparator` option; defaults to returning smallest result (e.g. smallest error).\nCan also find best result over a range of a learning curve by specifying the last n steps with `steps=n` or the last p percent of steps with `percent=p`; defaults to returning mean over whole learning curve.\n**Requires loading all results in list from disk.**\n\n```python\nresults = loadResults(exp, 'returns.npy')\n\n# get the largest return over the last 10% of steps\nbest = getBest(results, percent=0.1, comparator=lambda a, b: a > b)\nprint(best.params) # -> { 'alpha': 1.0, 'lambda': 0.99 }\n\nresults = loadResults(exp, 'rmsve.npy')\n\n# get the lowest rmsve over all steps\nbest = getBest(results)\nprint(best.params) # -> { 'alpha': 0.25, 'lambda': 1.0 }\n```\n\n\n**find**:\n\nFind a specific result based on the metaParameters of another result.\nCan optionally specify a list of parameters to ignore using for example `ignore=['alpha']`.\nWill return the first result that matches.\nDoes not require loading results from disk.\n\n```python\nresults = loadResults(exp, 'returns.npy')\n\nresult = next(results)\nmatch = find(results, result, ignore=['lambda'])\n\nprint(result.params) # -> { 'alpha': 1.0, 'lambda': 1.0 }\nprint(match.params) # -> { 'alpha': 1.0, 'lambda': 0.98 }\n```\n\n\n**whereParameterEquals**:\n\nUtility method for filtering results based on the value of a particular parameter.\nIf the listed parameter does not exist for some of the results (e.g. when comparing TD vs. GTD where TD does not have the second stepsize param), then those results will match True for the comparator.\nDoes not require loading results from disk.\n\n```python\nresults = loadResults(exp, 'returns.npy')\nresults = whereParameterEquals(results, 'alpha', 0.25)\n\nfor res in results:\n    print(res.params) # -> { 'alpha': 0.25, 'lambda': ... }\n```\n\n\n**whereParameterGreaterEq**:\n\nUtility method for filtering results based on the value of a particular parameter.\nIf the listed parameter does not exist for some of the results (e.g. when comparing TD vs. GTD where TD does not have the second stepsize param), then those results will match True for the comparator.\nDoes not require loading results from disk.\n\n```python\nresults = loadResults(exp, 'returns.npy')\nresults = whereParameterGreaterEq(results, 'alpha', 0.25)\n\nfor res in results:\n    print(res.params) # -> { 'alpha': 0.25, 'lambda': ... }, { 'alpha': 0.5, 'lambda': ... }, ...\n```\n\n\n**loadResults**:\n\nReturns an iterator over all results that are expected to exist given a particular experiment.\nTakes the `ExperimentDescription` and the name of the result file.\nDoes not load results from disk.\n\n```python\nresults = loadResults(exp, 'returns.npy')\n\nfor result in results:\n    print(result) # -> `<Result>`\n```\n\n\n## utils\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyExpUtils-andnp",
    "package_url": "https://pypi.org/project/PyExpUtils-andnp/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyExpUtils-andnp/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PyExpUtils-andnp/3.4.0/",
    "requires_dist": [
      "filelock>=3.0.0",
      "h5py>=3.1.0",
      "numba>=0.52.0",
      "numpy>=1.21.5",
      "pandas"
    ],
    "requires_python": ">=3.8",
    "summary": "A small set of utilities for RL and ML experiments",
    "version": "3.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17245665,
  "releases": {
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ee558e4659d6bf1eba4c56934f3513e633ef995efc1f626e4ab812f0acc1ee5",
          "md5": "ffb8707623096001506076a84f70bd22",
          "sha256": "ff1dd852dd6685adcb19240ffa7e8e0ff3110f90dafd2178b0b7c0e583e1a2a9"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffb8707623096001506076a84f70bd22",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41597,
        "upload_time": "2022-04-17T05:08:33",
        "upload_time_iso_8601": "2022-04-17T05:08:33.760159Z",
        "url": "https://files.pythonhosted.org/packages/9e/e5/58e4659d6bf1eba4c56934f3513e633ef995efc1f626e4ab812f0acc1ee5/PyExpUtils_andnp-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00a5a354f6b746889b227d733d3ee67031d981ab9c6b58c179142b47ff584ee1",
          "md5": "d47f009109717cd3eea3f1946c1ac0ea",
          "sha256": "355307078f8c6f709091ed050e022b47f028dda33fb0e2f29a170b85e17f3f5d"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d47f009109717cd3eea3f1946c1ac0ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34529,
        "upload_time": "2022-04-17T05:08:35",
        "upload_time_iso_8601": "2022-04-17T05:08:35.752535Z",
        "url": "https://files.pythonhosted.org/packages/00/a5/a354f6b746889b227d733d3ee67031d981ab9c6b58c179142b47ff584ee1/PyExpUtils-andnp-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8809d0aa951fe7a8636ee310d2fc7f99554b208c2bbbaf5fc6495803a589f52",
          "md5": "29b7d3542d9ef51b4b862af73d57385b",
          "sha256": "a123afbd60da81e634e83a6381b131c30de9bb9b6628d9db99def62835f3c36e"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29b7d3542d9ef51b4b862af73d57385b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41696,
        "upload_time": "2022-04-17T17:34:48",
        "upload_time_iso_8601": "2022-04-17T17:34:48.307967Z",
        "url": "https://files.pythonhosted.org/packages/d8/80/9d0aa951fe7a8636ee310d2fc7f99554b208c2bbbaf5fc6495803a589f52/PyExpUtils_andnp-3.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcd76fe506befeef8caadb4fdff16e29f24dd66b99f7f56c9efc598b11612458",
          "md5": "482101bfe869b91200bcc0be90cdbacd",
          "sha256": "e791ade216eec08aa2cdc35e4a8400faeff3d6d6946ea88ae3e0106dca686a9d"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "482101bfe869b91200bcc0be90cdbacd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34181,
        "upload_time": "2022-04-17T17:34:49",
        "upload_time_iso_8601": "2022-04-17T17:34:49.741653Z",
        "url": "https://files.pythonhosted.org/packages/dc/d7/6fe506befeef8caadb4fdff16e29f24dd66b99f7f56c9efc598b11612458/PyExpUtils-andnp-3.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8614be26f6a45461366ba6d645c5598dae75c43962d2a7fed69392e0b50edc0",
          "md5": "420c2275b976abf7c6b9e435930d39c5",
          "sha256": "40aa80dc88b3fa98caaf1a3d095d378cceec1b8e02ba77606df712bed1f08935"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "420c2275b976abf7c6b9e435930d39c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41748,
        "upload_time": "2022-04-20T16:05:52",
        "upload_time_iso_8601": "2022-04-20T16:05:52.493645Z",
        "url": "https://files.pythonhosted.org/packages/c8/61/4be26f6a45461366ba6d645c5598dae75c43962d2a7fed69392e0b50edc0/PyExpUtils_andnp-3.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbe9491578638fa02c51e8ccd153e6c9c6edcf7cd48f2eb4d8883342c24a4951",
          "md5": "5e38cb8ae33d742fbe781de41f6266fd",
          "sha256": "a3e6de5fa242fadb75be1830b8c5108087e7ee0987cc4bfc213a4e15a3a3fe05"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e38cb8ae33d742fbe781de41f6266fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34211,
        "upload_time": "2022-04-20T16:05:54",
        "upload_time_iso_8601": "2022-04-20T16:05:54.080003Z",
        "url": "https://files.pythonhosted.org/packages/fb/e9/491578638fa02c51e8ccd153e6c9c6edcf7cd48f2eb4d8883342c24a4951/PyExpUtils-andnp-3.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53ed21239aa99d2b69d8d0645a657313fef4942b14d09d1731db2dbd8cd0a71b",
          "md5": "1cc561f823e9b662aa0941fe89e84089",
          "sha256": "b8b95890d5fcd0fbd16ee26ae90ef6a6a8b05c9a848c14ebd9540de797d64467"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cc561f823e9b662aa0941fe89e84089",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41878,
        "upload_time": "2022-04-21T04:17:21",
        "upload_time_iso_8601": "2022-04-21T04:17:21.456424Z",
        "url": "https://files.pythonhosted.org/packages/53/ed/21239aa99d2b69d8d0645a657313fef4942b14d09d1731db2dbd8cd0a71b/PyExpUtils_andnp-3.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7f0a681af2122f49113ff8bfadfecfdddd98c665ab883373319a51a9e7fdf24",
          "md5": "67cde0c4718d33e78ca1e58881bda380",
          "sha256": "8f874b830b2bbaface77119b42015cf11e0cef66f4a9cd184471563480c8978d"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67cde0c4718d33e78ca1e58881bda380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34322,
        "upload_time": "2022-04-21T04:17:23",
        "upload_time_iso_8601": "2022-04-21T04:17:23.067347Z",
        "url": "https://files.pythonhosted.org/packages/e7/f0/a681af2122f49113ff8bfadfecfdddd98c665ab883373319a51a9e7fdf24/PyExpUtils-andnp-3.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93242b3ab4837970ccb8ef93cd9ec45f3eae075d2d7ea27a8e51aea93f22307e",
          "md5": "16dcb9f049e0280e9077b3bc047a59ee",
          "sha256": "05c7157bb0f35cc008f8a6f7ed8a3a41743ec1948175b005b5bbced006692171"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16dcb9f049e0280e9077b3bc047a59ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 41874,
        "upload_time": "2022-05-06T02:35:48",
        "upload_time_iso_8601": "2022-05-06T02:35:48.112711Z",
        "url": "https://files.pythonhosted.org/packages/93/24/2b3ab4837970ccb8ef93cd9ec45f3eae075d2d7ea27a8e51aea93f22307e/PyExpUtils_andnp-3.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cadcc9639979a3fc11026152ba6606ac821e391b6299a3e319ace60543bab4b6",
          "md5": "00e351eaea6e3ab7c0e5e5944781e39c",
          "sha256": "8f16d075fc9f30abf4b4464bea577d4595b68aca7c70014e982437dd0122ff3e"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "00e351eaea6e3ab7c0e5e5944781e39c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34326,
        "upload_time": "2022-05-06T02:35:49",
        "upload_time_iso_8601": "2022-05-06T02:35:49.911219Z",
        "url": "https://files.pythonhosted.org/packages/ca/dc/c9639979a3fc11026152ba6606ac821e391b6299a3e319ace60543bab4b6/PyExpUtils-andnp-3.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40972b0ffd70e51150936269b38eeda888a89eeb31160358c819f890335d4d3c",
          "md5": "b17630e9dfda96e4b88617172196a2f2",
          "sha256": "c0d985b64c98641610246a1e4d2ad9702b0294205d554ef20c99d729e4537795"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b17630e9dfda96e4b88617172196a2f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 42482,
        "upload_time": "2022-11-08T19:46:46",
        "upload_time_iso_8601": "2022-11-08T19:46:46.797900Z",
        "url": "https://files.pythonhosted.org/packages/40/97/2b0ffd70e51150936269b38eeda888a89eeb31160358c819f890335d4d3c/PyExpUtils_andnp-3.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f0494f11d7601c66a4c96c1949cb60e55f27c6af066f86e45fb4574997acb8b",
          "md5": "96bb444c1dc58766230c3806b378b13b",
          "sha256": "f57300bf86dc6b22aa859d0942132e18d2b85ddec32e0ccdc592d13baf8dc9e5"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "96bb444c1dc58766230c3806b378b13b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34815,
        "upload_time": "2022-11-08T19:46:49",
        "upload_time_iso_8601": "2022-11-08T19:46:49.069217Z",
        "url": "https://files.pythonhosted.org/packages/3f/04/94f11d7601c66a4c96c1949cb60e55f27c6af066f86e45fb4574997acb8b/PyExpUtils-andnp-3.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04c9e68c482ca7471d0e5cd00f4ade930f5106b167f85f023094354bfd6c848e",
          "md5": "e6ebf81aa2bd3e7c41d6ba7d25f52e45",
          "sha256": "0b6835f626e7b363816e5e8e1c258484a5edaa781fc000466b4808cf9897a5a3"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6ebf81aa2bd3e7c41d6ba7d25f52e45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 42128,
        "upload_time": "2022-12-04T02:23:20",
        "upload_time_iso_8601": "2022-12-04T02:23:20.603630Z",
        "url": "https://files.pythonhosted.org/packages/04/c9/e68c482ca7471d0e5cd00f4ade930f5106b167f85f023094354bfd6c848e/PyExpUtils_andnp-3.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9882f6a63a5d0f3dbdfcf4117d9a06a2ecd0c44f8b43d67d33254f9d239e4d27",
          "md5": "6f5dd21734b1a726ee7a9ed1131d6f1d",
          "sha256": "41d28b391035613d10067c62d1bc232a50f2f849f80c549fc7b744418e1e4d22"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f5dd21734b1a726ee7a9ed1131d6f1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44996,
        "upload_time": "2022-12-04T02:23:22",
        "upload_time_iso_8601": "2022-12-04T02:23:22.178108Z",
        "url": "https://files.pythonhosted.org/packages/98/82/f6a63a5d0f3dbdfcf4117d9a06a2ecd0c44f8b43d67d33254f9d239e4d27/PyExpUtils-andnp-3.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f2c455b2fbdcfe92ad472aa1441b6ce61b838bb792375d3ecea4ae41e37bab6",
          "md5": "ed4c0cbfbf827bc6e83d31dabe6f700b",
          "sha256": "8599f47b43c7d5c156cfd3ce04ce52f166818ef956e224233cdf755b33a0d8d4"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed4c0cbfbf827bc6e83d31dabe6f700b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 42204,
        "upload_time": "2023-01-30T20:36:49",
        "upload_time_iso_8601": "2023-01-30T20:36:49.127163Z",
        "url": "https://files.pythonhosted.org/packages/0f/2c/455b2fbdcfe92ad472aa1441b6ce61b838bb792375d3ecea4ae41e37bab6/PyExpUtils_andnp-3.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03b6c360bf050b52ead2511c3cc318ae64bb557d7d4b6e5334262316bb525e14",
          "md5": "d46f49d1d9e5f724703edb861f10d353",
          "sha256": "cafe180f464421bd9cd4156db9cbc86330825aff649fa4956049543d208f3894"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d46f49d1d9e5f724703edb861f10d353",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45193,
        "upload_time": "2023-01-30T20:36:50",
        "upload_time_iso_8601": "2023-01-30T20:36:50.367395Z",
        "url": "https://files.pythonhosted.org/packages/03/b6/c360bf050b52ead2511c3cc318ae64bb557d7d4b6e5334262316bb525e14/PyExpUtils-andnp-3.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f353ff0b93e2eaa9186ffc98952743f6e65b288f709d15b97199e53821c17a1",
          "md5": "98554292c5158de3dc84607625f46a11",
          "sha256": "f46cebbeef608a39ea409f1c0e4206e92f8bfadb1b84db1a9d3828e988557d68"
        },
        "downloads": -1,
        "filename": "PyExpUtils_andnp-3.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98554292c5158de3dc84607625f46a11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 42299,
        "upload_time": "2023-03-10T22:09:10",
        "upload_time_iso_8601": "2023-03-10T22:09:10.049987Z",
        "url": "https://files.pythonhosted.org/packages/4f/35/3ff0b93e2eaa9186ffc98952743f6e65b288f709d15b97199e53821c17a1/PyExpUtils_andnp-3.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a5377758560ce1cc7abf5fa89130962f5badc3aad1204d1643147ec0c144116",
          "md5": "42707e96af4c910106accb8d7b881976",
          "sha256": "045599aa6dc9d40f2a10b10c8feb14f14855e1acfd09fd72d015a65f6574f231"
        },
        "downloads": -1,
        "filename": "PyExpUtils-andnp-3.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "42707e96af4c910106accb8d7b881976",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45430,
        "upload_time": "2023-03-10T22:09:12",
        "upload_time_iso_8601": "2023-03-10T22:09:12.162237Z",
        "url": "https://files.pythonhosted.org/packages/1a/53/77758560ce1cc7abf5fa89130962f5badc3aad1204d1643147ec0c144116/PyExpUtils-andnp-3.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f353ff0b93e2eaa9186ffc98952743f6e65b288f709d15b97199e53821c17a1",
        "md5": "98554292c5158de3dc84607625f46a11",
        "sha256": "f46cebbeef608a39ea409f1c0e4206e92f8bfadb1b84db1a9d3828e988557d68"
      },
      "downloads": -1,
      "filename": "PyExpUtils_andnp-3.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98554292c5158de3dc84607625f46a11",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 42299,
      "upload_time": "2023-03-10T22:09:10",
      "upload_time_iso_8601": "2023-03-10T22:09:10.049987Z",
      "url": "https://files.pythonhosted.org/packages/4f/35/3ff0b93e2eaa9186ffc98952743f6e65b288f709d15b97199e53821c17a1/PyExpUtils_andnp-3.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a5377758560ce1cc7abf5fa89130962f5badc3aad1204d1643147ec0c144116",
        "md5": "42707e96af4c910106accb8d7b881976",
        "sha256": "045599aa6dc9d40f2a10b10c8feb14f14855e1acfd09fd72d015a65f6574f231"
      },
      "downloads": -1,
      "filename": "PyExpUtils-andnp-3.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "42707e96af4c910106accb8d7b881976",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 45430,
      "upload_time": "2023-03-10T22:09:12",
      "upload_time_iso_8601": "2023-03-10T22:09:12.162237Z",
      "url": "https://files.pythonhosted.org/packages/1a/53/77758560ce1cc7abf5fa89130962f5badc3aad1204d1643147ec0c144116/PyExpUtils-andnp-3.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}