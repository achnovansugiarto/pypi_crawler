{
  "info": {
    "author": "Paul Gilmartin",
    "author_email": "paul.gilmartin89@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# GraphWrap #\n\nGraphWrap is a python library which, by adding only two lines of code to your django project, can extend an existing\n[Django Rest Framework](https://www.django-rest-framework.org/) (or [Tastypie](https://django-tastypie.readthedocs.io/en/latest/))\nAPI with a [GraphQL](https://graphql.org/learn/) interface.\nThis is achieved by leveraging [Graphene-Django](https://docs.graphene-python.org/projects/django/en/latest/) to dynamically \nbuild, at runtime, a GraphQL ObjectType for each Django REST (or tastypie) view in your API. These ObjectTypes are then glued together to\nform a GraphQL schema which has the same \"shape\" as your existing REST API. \nNote that GraphWrap is **not** designed to build a GraphQL schema to replace your existing REST API,\nbut rather extend it to offer an additional [fully compliant](http://spec.graphql.org/June2018/#sec-Root-Operation-Types)\nGraphQL-queryable interface.\n\n## Highlights:\n\n* The dynamic nature of the build of the GraphQL layer means that you can continue to develop your existing\nREST based API and know that the GraphQL schema will be kept up-to-date automatically. \n\n* Since the GraphQL layer is using the REST API under-the-hood, you can be sure that important things\nlike **serialization**, **authentication**, **authorization** and **filtering** will be consistent between your REST view\nand the corresponding GraphQL type.\n \n* You no longer need to \"over expose\" fields from nested apis - the client can make use of the GraphQL layer \n  to fetch data they need. This can lead to significant performance boosts\n  in certain circumstances (One of the advantages of GraphQL queries is that they solve the [n+1 problem](\n  https://itnext.io/what-is-the-n-1-problem-in-graphql-dd4921cb3c1a) which occurs with traditional REST-based APIs).\n \n \n## Which problems does GraphWrap address?\n\n* A common pattern for circumventing the [n+1 problem](\n  https://itnext.io/what-is-the-n-1-problem-in-graphql-dd4921cb3c1a) on a REST API is to expose\n  fields from \"nested\" serializers on a parent serializer. For example, here we expose\n  fields from the `AuthorSerializer` on the `PostViewSet`:\n  ```python\n    class AuthorSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = Author\n            fields = ['name', 'active']\n    \n    class PostSerializer(serializers.ModelSerializer):\n        author = AuthorSerializer(source='author')\n        class Meta:\n            model = Post\n            fields = ['author', 'content']\n    \n    class PostViewSet(viewsets.ReadOnlyModelViewSet):\n        queryset = Post.objects.all()\n        serializer_class = PostSerializer\n  ```\n* Whilst this solves [n+1 problem](\n  https://itnext.io/what-is-the-n-1-problem-in-graphql-dd4921cb3c1a), it creates a whole new\n  class of problem. The issue now is that we're potentially **over exposing** the nested author fields:\n  we may have one api client who is interested in these nested fields, but we may also have several\n  for whom these fields are irrelevant and who do not appreciate the extra time it now takes to fetch\n  and serialize this additional data. Unless we start building an API *per client*  (which of course\n  we do not want), we're a bit stuck.\n  \n* Enter GraphQL: GraphQL is designed so that the client decides what info it receives from the server,\n  not the other way around. Whilst many great [packages](https://docs.graphene-python.org/projects/django/en/latest/)\n  exist to create a GraphQL API from scratch, migrating an mature production REST API\n  to use one of these frameworks is not so simple. It may also be that our REST API\n  has functionality which is not available on a GraphQL specific API.  \n* This is where GrapWrap comes in: by adding two lines of code to your project, GraphWrap\n  exposes a GraphQL schema which has the same \"shape\" as your existing REST API.\n  With this new endpoint, we can now stop overexposing the `author` fields and instead\n  simply expose `author` as a URL:  \n  ```python\n    class PostSerializer(serializers.ModelSerializer):\n        author = serializers.HyperlinkedRelatedField(\n            view_name='author-detail', read_only=True)\n  ```\n  This keeps our clients who don't care about the nested author fields happy.\n  Any client interested in retrieving the nested author fields can then do so via a query to the new `/graphql`\n  endpoint:\n  ```graphql\n    query {\n        all_posts {\n            content\n            author {\n                name\n                active\n            }\n        }\n    }\n  ```\n  The important point here is that the above query will authentication, permissions and\n  serialization coming from the corresponding Django REST Post and Author viewsets/serializers.\n  \n  \n\n## Limitations\n\nHere are a few limitations of the GraphQL API produced by GraphWrap:\n\n* It can only accept GraphQL [queries](https://graphql.org/learn/queries/) - mutations and subscriptions\n  are not (yet) supported.\n\n* The schema is built only from Django REST Framework views which inherit from `ModelViewSet`\n (or `ReadOnlyModelViewSet`) and which are registered via a router which inherits from [SimpleRouter](\n https://www.django-rest-framework.org/api-guide/routers/#simplerouter). Alternatively, if you're\n using tastypie, the schema is only built from resources inheriting from `ModelResource`.\n \n* Will only work for APIs which use JSON serialization.\n  \n\n# GraphWrap for the Django REST Framework\n\n## Quick start\n\n### Prerequisites\n\nBefore using this library, you must be using Python 3.6 (or later) and have the following installed:\n\n1. `Django >=2.2`\n2. `djangorestframework>=3.0.0`\n\n\n### Installing\n\n```bash\npip install graph_wrap\n```\n\n\n### Exposing the /graphql endpoint\n\nGraphWrap exposes the GraphQL schema via a Django view `graphql_view`. This view builds and exposes a GraphQL\nqueryable schema via a POST request to a `/graphql` endpoint. The code snippet below demonstrates by example\nhow you can transform your DRF REST-API into a GraphQL schema by adding just two lines of code to your project:\n\n```python\nfrom rest_framework import routers\n\nfrom graph_wrap.django_rest_framework.graphql_view import graphql_view  # Addition 1: import the graphql_view\nfrom tests.django_rest_framework_api.api import (\n    AuthorViewSet, PostViewSet)\n\n\nrouter = routers.SimpleRouter()\nrouter.register(r'author', AuthorViewSet)\nrouter.register(r'post', PostViewSet)\n\n\nurlpatterns = [\n    path(r'', include(api.urls)),\n    path(r'/graphql/', view=graphql_view), # Addition 2: Register the view under the URL /graphql.\n]\n\n```\n\n\n## Documentation (by Example)\n\nIn this section we give a brief overview of how to use GraphWrap with Django REST Framework via examining\na simple concrete example. \n\n\n### Set-up\nSuppose we have the following basic django models and corresponding DRF API (\na fully executable (but more complex) version of this example can be found in graph_wrap.tests):\n\n```python\n# models.py\n\nclass Media(models.Model):\n    name = models.TextField()\n    content_type = models.TextField(null=True)\n    size = models.BigIntegerField(null=True)\n\n\nclass Author(models.Model):\n    user = models.ForeignKey(User, on_delete=models.PROTECT, null=True)\n    name = models.TextField()\n    age = models.IntegerField(null=True)\n    active = models.BooleanField(default=True)\n    profile_picture = models.ForeignKey(\n        Media, null=True, on_delete=models.PROTECT)\n\n    def get_name(self):\n        # Use to test custom additional serialization\n        return self.name.upper()\n\n\nclass Post(models.Model):\n    content = models.TextField()\n    date = models.DateTimeField()\n    author = models.ForeignKey(\n        Author, null=True, on_delete=models.SET_NULL, related_name='entries')\n    files = models.ManyToManyField('Media')\n    rating = models.DecimalField(null=True, decimal_places=20, max_digits=40)\n\n\n# api.py\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['username', 'is_staff']\n\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    user = UserSerializer()\n    entries = serializers.PrimaryKeyRelatedField(\n        many=True, queryset=Post.objects.all())\n\n    class Meta:\n        model = Author\n        fields = ['name', 'age', 'rating', 'profile_picture', 'user', 'entries']\n\n\nclass PostSerializer(serializers.ModelSerializer):\n    written_by = serializers.HyperlinkedRelatedField(\n        view_name='author-detail', read_only=True)\n\n    class Meta:\n        model = Post\n        depth = 3\n        fields = ['written_by', 'content', 'date', 'files']\n\n\nclass AuthorViewSet(viewsets.ModelViewSet):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n\n\nclass PostViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    filter_backends = [filters.SearchFilter, DjangoFilterBackend]\n    search_fields = ['content', 'author__name']\n    filterset_fields = ['author__name', 'content']\n\n```\n\nIf we wish to layer our REST resources with a GraphQL interface, we can follow the instructions above in the\n\"Quickstart\" guide where we import the `graphql_view` and expose it via the `/graphql` url:\n```python\nfrom graph_wrap.django_rest_framework.graphql_view import graphql_view  # Addition 1: import the graphql_view\nfrom tests.django_rest_framework_api.api import (\n    AuthorViewSet, PostViewSet)\n\n\nrouter = routers.SimpleRouter()\nrouter.register(r'author', AuthorViewSet)\nrouter.register(r'post', PostViewSet)\n\n\nurlpatterns = [\n    path(r'', include(api.urls)),\n    path(r'/graphql/', view=graphql_view), # Addition 2: Register the view under the URL /graphql.\n]\n\n```\n\n\n### Understanding the Schema\nWith these simple changes, we can now query the  `/graphql` endpoint with GraphQL queries. The structure\nqueries can take, as with all GraphQL APIs, is dictated by the shape of the underlying [schema](https://graphql.org/learn/schema/)\n(which, in this case, is dictated by the shape of the Django REST Framework API). To see what the schema looks like, run the following:\n\n```bash\n>>> from graph_wrap.django_rest_framework import schema\n>>> print(schema())\n\nschema {\n  query: Query\n}\ntype Query {\n  author(id: Int!): author_type\n  all_authors: [author_type]\n  post(id: Int!): post_type\n  all_posts(search: String, orm_filters: String): [post_type]\n}\ntype author_type {\n  name: String!\n  age: Int\n  active: Boolean!\n  profile_picture: String\n  user: user_type!\n  entries: [String]!\n}\ntype post_type {\n  written_by: author_type!\n  content: String!\n  date: String!\n  files: [post__files_type]!\n  rating: String\n}\ntype post__files_type {\n  id: Int!\n  name: String!\n  content_type: String\n  size: Int\n}\ntype user_type {\n  username: String!\n  is_staff: Boolean!\n}\n```\n\nImportant points to note about the schema produced by GraphWrap:\n\n* **snake_case**: As can be seen above, GraphWrap produces a schema in the `snake_case` convention. Whilst\n  this is generally not favoured in GraphQL circles, it was chosen here as it would likely be more consistent with\n  the field names on the underlying REST resources (which would use most often use the PEP8 recommended snake \n  case convention).\n  \n* **Root Query fields**: For each DRF ModelViewSet in our API, GraphWrap adds to the Query type precisely\n  two fields - one corresponding to the data accessible via a GET request to the 'list' endpoint of the\n  resource, and one corresponding to the data accessible via a GET request to the 'detail' endpoint of the\n  resource. If we take our AuthorViewSet as an example:\n    * the 'list' endpoint corresponds to the url `/author`. This maps to the `all_authors` field on the Query type.\n      Note that it is possible to change the naming convention of the list endpoint field by setting the\n      `LIST_ENDPOINT_RESOLVER_PREFIX` value in `settings.py`. For example, setting `LIST_ENDPOINT_RESOLVER_PREFIX = ''`\n      will mean this list endpoint url corresponds to the name `authors`.\n    * the 'detail' endpoint corresponds to urls of the form '/author/{author_pk}'. This maps to the `author(id: Int!)`\n      field on the Query type (where, in the usual GraphQL schema syntax, `(id: Int!)` indicates that an integer author\n      id must be supplied.)\n            \n* **ObjectType and ObjectType Field names**: \n    * GraphWrap maps each model *serializer* in our DRF API to a GraphQL\n      ObjectType (including dynamically build [nested serializers](\n      https://www.django-rest-framework.org/api-guide/serializers/#specifying-nested-serialization). \n    * The naming convention of the resultant ObjectType depends from which serializer it was created:\n      * If the ObjectType corresponds to an explicit \"non-nested\" serializer, the name of the field can be \n        found by appending `_type` to the lowercase version name of the underlying serializer model. For example,\n        the `AuthorSerializer` corresponds to the `author_type` in the above.\n      * If the ObjectType comes from a dynamically created `NestedSerializer`, the name of the field follows the Django\n        query notation: `{parent_model}__{related_field}_type`. For example, in our API above the `PostSerializer`\n        is set to have `depth=3`. This creates a `NestedSerializer` for the `files` field, which corresponds to the\n        `post__files_type` in the above.\n\n      \n* **Filtering (`orm_filters` and `search`)**: \n    * Currently, the `/graphql` endpoint produced by GraphWrap supports two types of filtering used by the Django REST\n    Framework: [Generic Filtering](https://www.django-rest-framework.org/api-guide/filtering/#generic-filtering) via the\n    django_filters `DjangoFilterBackend` and\n    [SearchFilter](https://www.django-rest-framework.org/api-guide/filtering/#searchfilter).\n    * When a DRF ViewSet allows filtering via the `DjangoFilterBackend`, the corresponding `Query` field on the\n      GraphQL schema produced by GraphWrap will have an optional `orm_filters` argument. If we take our `PostViewSet`\n      as an example, then the filtering done by the REST GET query `/paul/?author__name=Paul` can be achieved\n      via a POST request to `/graphql` with the following query:\n    \n    ```graphql\n    {\n      all_posts(orm_filters: \"author__name=Paul\") {\n        content  # or any fields belonging to post_type\n      }\n    }\n    ```\n    * Similarly, when a DRF ViewSet allows filtering via the `SearchFilter`, the corresponding `Query` field on the\n      GraphQL schema produced by GraphWrap will have an optional `search` argument. This can be used in a similar\n      fashion.\n\n   \n   \n### Authentication and Authorization of /graphql endpoint\n\nThe authentication/authorization applied \nwhen querying `/graphql` is the authentication/authorization defined on the resource corresponding to the root field \nof the query applied. This is consistent with the way DRF handles authenticaiton/authorization.\nSo, for example, the following query would invoke whatever authentication/authorization\nwas defined on the `AuthorViewSet`:\n\n``` graphql\n    {\n      all_authors {\n        name\n      }\n    }\n```\n\n\n  \n   \n## Making Queries: REST vs GraphQL\n\nIn this section we'll look at how various REST GET requests can be mapped to queries for the ``/graphql``\nendpoint. Again, we'll do this via examining our explicit concrete example (note that the queries\nand requests pictured in this section were produced on the [Insomnia](https://insomnia.rest/)\nHTTP client, which has a integration with GraphQL). Some of the fields here might not match up exactly\nwith our example above, but hopefully the idea is clear:\n\n\n\n### 'list' endpoint requests\n\n* REST:\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/rest_author_list.png)\n\n\n* GraphQL\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_all_authors.png)\n\n\n\n### 'detail' endpoint requests\n\n* REST\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/rest_author_detail.png)\n\n\n* GraphQL\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_author_single.png)\n\n\n\n### Filtering\n\n* REST\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/rest_author_orm.png)\n\n\n* GraphQL\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/test_img.png)\n\n\n### Some fancier GraphQL query examples - see GraphQL [queries](https://graphql.org/learn/queries/) for more\n\n* Nesting\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_all_authors_nested.png)\n\n\n* Fragments\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_fragments.png)\n\n\n\n# GraphWrap for Tastypie\n\n\n## Quick start\n\n### Core Requirements\nBefore using this library, the following requirements must be met:\n\n* Your project is using `Python >= 3.6` and ` Django >=2.2`.\n\n\n### Installing\n\n```bash\npip install graph_wrap\n```\n\n\n### Registering the GraphQL endpoint\n\nGraphWrap exposes the GraphQL schema via a Django view `graphql_view`. This view builds and exposes a GraphQL\nqueryable schema via a POST request to a `/graphql` endpoint. The code snippet below demonstrates by example\nhow you can transform your Tastypie into a GraphQL schema by adding just three lines of code to your project:\n\n\n```python\n# tests.urls.py\n\n\nfrom graph_wrap.tastypie.graphql_view import graphql_view # add this line to your project\n\n\nurlpatterns = [\n    ...,\n    path(r'/graphql/', view=graphql_view), # Register the view under the URL /graphql.\n]\n\n```\n\nIn order for GraphQL to be able to build the GraphQL schema from the tastypie Api instance, it needs\nto know where that instance lives in your project. To allow GraphWrap to locate the Api instance, we can simply\nadd the full path of the instance to our django settings module. For example:\n\n```python\n# tests.settings.py\n\nTASTYPIE_API_PATH = 'tests.urls.api'\n```\n\n\n\n## Documentation (by Example)\n\nIn this section we give a brief overview of how to use GraphWrap via examining\na simple concrete example. \n\n\n### Set-up\nSuppose we have the following basic django models and corresponding tastypie resources (\na fully executable version of this example can be found in graph_wrap.tests):\n\n```python\n# models.py\n\nclass Author(models.Model):\n    name = models.TextField()\n    age = models.TextField()\n\n\nclass Post(models.Model):\n    content = models.TextField()\n    date = models.DateTimeField()\n    author = models.ForeignKey(Author, null=True, on_delete=models.SET_NULL)\n    files = models.ManyToManyField('Media')\n\n\nclass Media(models.Model):\n    name = models.TextField()\n    content_type = models.TextField()\n    size = models.BigIntegerField()\n\n\n# api.py\n\nclass AuthorResource(ModelResource):\n    posts = fields.ManyToManyField('tests.api.PostResource', attribute='post_set')\n\n    class Meta:\n        queryset = Author.objects.all()\n        resource_name = 'author'\n        filtering = {\n            'age': ('exact',),\n            'name': ('exact',),\n        }\n\n\nclass PostResource(ModelResource):\n    author = fields.ForeignKey(AuthorResource, attribute='author', null=True)\n    files = fields.ManyToManyField('tests.api.MediaResource', attribute='files')\n    date = fields.DateTimeField('date')\n\n    class Meta:\n        queryset = Post.objects.all()\n        resource_name = 'post'\n\n\nclass MediaResource(ModelResource):\n    class Meta:\n        queryset = Media.objects.all()\n        resource_name = 'media'\n```\n\nIf we wish to layer our REST resources with a GraphQL interface, we can follow the instructions above in the\n\"Quickstart\" guide. Start by registering our GraphQLResource with the tastypie Api instance:\n\n```python\n# urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom tastypie.api import Api\n\nfrom graph_wrap import GraphQLResource\nfrom tests.api import AuthorResource, PostResource, MediaResource\n\n\napi = Api('v1')\napi.register(AuthorResource())\napi.register(PostResource())\napi.register(MediaResource())\napi.register(GraphQLResource())\n\nurlpatterns = [\n    path(r'', include(api.urls)),\n    path('admin/', admin.site.urls),\n]\n```\n\nNext, add the `TASTYPIE_API_PATH` to the django settings module so GraphWrap can locate the tastypie Api:\n\n```python\nTASTYPIE_API_PATH = 'tests.urls.api'\n```\n\n### Understanding the Schema\nWith these simple changes, we can now query the  `/graphql` endpoint with GraphQL queries. The structure\nqueries can take, as with all GraphQL APIs, is dictated by the shape of the underlying schema (which, in this case, is\ndictated by the shape of the tastypie API). To see what the schema looks like, run the following:\n\n```bash\n>>> from graph_wrap import schema\n>>> schema = schema()\n>>> print(schema)\n\n\nschema {\n  query: Query\n}\ntype Query {\n  author(id: Int!): author_type\n  all_authors(orm_filters: String): [author_type]\n  post(id: Int!): post_type\n  all_posts(orm_filters: String): [post_type]\n  media(id: Int!): media_type\n  all_medias(orm_filters: String): [media_type]\n}\ntype author_type {\n  resource_uri: String!\n  posts: [post_type]!\n  id: Int!\n  name: String!\n  age: String!\n}\ntype media_type {\n  resource_uri: String!\n  id: Int!\n  name: String!\n  content_type: String!\n  size: Int!\n}\ntype post_type {\n  resource_uri: String!\n  author: author_type\n  files: [media_type]!\n  date: String!\n  id: Int!\n  content: String!\n}\n\n```\n\nImportant points to note about the schema produced by GraphWrap:\n\n* **snake_case**: As can be seen above, GraphWrap produces a schema in the `snake_case` convention. Whilst\n  this is generally not favoured in GraphQL circles, it was chosen here as it would likely be more consistent with\n  the field names on the underlying REST resources (which would use most often use the PEP8 recommended snake \n  case convention).\n  \n* **Root Query field names**: For each REST model-resource, GraphWrap adds to the Query type precisely\n  two fields - one corresponding to the data accessible via a GET request to the 'list' endpoint of the\n  resource, and one corresponding to the data accessible via a GET request to the 'detail' endpoint of the\n  resource. If we take our AuthorResource as an example:\n    * the 'list' endpoint corresponds to the url `/author`. This maps to the `all_authors` field on the Query type.\n    * the 'detail' endpoint corresponds to urls of the form '/author/{author_pk}'. This maps to the `author(id: Int!)`\n      field on the Query type (where, in the usual GraphQL schema syntax, `(id: Int!)` indicates that an integer author\n      id must be supplied.)\n      \n* **ObjectType and ObjectType Field names**: \n    * GraphWrap maps each model-resource maps to a GraphQL\n      ObjectType. The name of the resultant ObjectType can be found by appending `_type` to the name of the\n      corresponding resource. For example, the `AuthorResource`, which has name `author`, maps to the `author_type`\n      GraphQL ObjectType. \n    * The names of the fields on each ObjectType match those of the names of the fields on the corresponding\n      resource.\n      \n* **Filtering (`orm_filters`)**: Notice in the schema above that each `all_` field can be queried with an optional \n    `orm_filters` argument. This is the GraphQL equivalent of the ORM filtering offered by tastypie on list endpoints.\n    If we take our AuthorResource as an example (which has been defined with \n    `filtering = {'age': ('exact',), 'name': ('exact',)})`, then the REST GET query `/author/?name=Paul` can be achieved\n    via a POST request to `/graphql` with the following query:\n    \n    ```graphql\n    {\n      all_authors(orm_filters: \"name=Paul\") {\n        name\n      }\n    }\n    ```\n   \n   \n### Authentication and Authorization of GraphQLResource\n\nThe authentication/authorization applied \nwhen querying `/graphql` is the authentication/authorization defined on the resource corresponding to the root field \nof the query applied. This is consistent with the way tastypie handles authenticaiton/authorization.\nSo, for example, the following query would invoke whatever authentication/authorization\nwas defined on the `AuthorResource`:\n\n```graphql\n    {\n      all_authors(orm_filters: \"name=Paul\") {\n        name\n      }\n    }\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PaulGilmartin/graph_wrap",
    "keywords": "tastypie graphene django graphql rest api djangorestframework drf",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graph-wrap",
    "package_url": "https://pypi.org/project/graph-wrap/",
    "platform": null,
    "project_url": "https://pypi.org/project/graph-wrap/",
    "project_urls": {
      "Homepage": "https://github.com/PaulGilmartin/graph_wrap",
      "Source": "https://github.com/PaulGilmartin/graph_wrap"
    },
    "release_url": "https://pypi.org/project/graph-wrap/0.1.3/",
    "requires_dist": [
      "graphene-django"
    ],
    "requires_python": ">=3.6,  <4",
    "summary": "Extend an existing Django REST Framework or Tastypie API with a GraphQL interface with a only a couple of lines of code.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13789725,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2734ac26ba2d542eb4654de5af9b3c757b393f3d54f92435a4221ab3cd694400",
          "md5": "ba598a98ad4688acebd614dee54e2c5f",
          "sha256": "c0a30d91d21fcc7bd4c3c7341181262dbb259d7c69295bb437b4134dd8cbc748"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba598a98ad4688acebd614dee54e2c5f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18265,
        "upload_time": "2020-03-30T18:51:45",
        "upload_time_iso_8601": "2020-03-30T18:51:45.796648Z",
        "url": "https://files.pythonhosted.org/packages/27/34/ac26ba2d542eb4654de5af9b3c757b393f3d54f92435a4221ab3cd694400/graph_wrap-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96cc8be7c075222d3cbf55a28b44860551f7ea642b9dfc06b9af879ab40a6045",
          "md5": "0a5bb6b22b95929f14bab210fa6f82c8",
          "sha256": "0de1de416bb2520720a141767c8cc0900c05dfa3239346e5cceda28a03f72e6d"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a5bb6b22b95929f14bab210fa6f82c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18510,
        "upload_time": "2020-03-30T18:51:49",
        "upload_time_iso_8601": "2020-03-30T18:51:49.437516Z",
        "url": "https://files.pythonhosted.org/packages/96/cc/8be7c075222d3cbf55a28b44860551f7ea642b9dfc06b9af879ab40a6045/graph-wrap-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c336b27835e4cf91700185c8015008784c3233e7d462fbf03bde853c546e55c1",
          "md5": "aa47b834fa6000f70a8497eaeb46a4e3",
          "sha256": "98171cef0932632ad4a4f99bbc344a0bf28085c7f6e87843499dc7c95b09cb8c"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa47b834fa6000f70a8497eaeb46a4e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18579,
        "upload_time": "2020-11-10T18:42:20",
        "upload_time_iso_8601": "2020-11-10T18:42:20.883999Z",
        "url": "https://files.pythonhosted.org/packages/c3/36/b27835e4cf91700185c8015008784c3233e7d462fbf03bde853c546e55c1/graph_wrap-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1458aea41656c0e71a8313fd1d876df00aba540ca0e98b9953edcf11cac9762",
          "md5": "df3f51fe1dcbd847e3f21e59a06abea8",
          "sha256": "126544b4fa84a4724b850efe53bc3e4b0a6af1ddb15f4328add7a928c858f7d4"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "df3f51fe1dcbd847e3f21e59a06abea8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18757,
        "upload_time": "2020-11-10T18:42:22",
        "upload_time_iso_8601": "2020-11-10T18:42:22.691345Z",
        "url": "https://files.pythonhosted.org/packages/c1/45/8aea41656c0e71a8313fd1d876df00aba540ca0e98b9953edcf11cac9762/graph-wrap-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2986d792fc02eb72d978fd48be203655d06855ad0f3fd69a3b4fa25f72bdb5",
          "md5": "44b91a01ec5d1f379fdebf484ca8d60b",
          "sha256": "6f9e2c9610ea6085e6bdbf441f4073fce9d06414d1c604719e5e939e7fc44c6b"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44b91a01ec5d1f379fdebf484ca8d60b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18578,
        "upload_time": "2020-11-10T18:56:04",
        "upload_time_iso_8601": "2020-11-10T18:56:04.933265Z",
        "url": "https://files.pythonhosted.org/packages/4a/29/86d792fc02eb72d978fd48be203655d06855ad0f3fd69a3b4fa25f72bdb5/graph_wrap-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ff21e5431af6ca3f5565b74790da66f4d08c3f0662cf9a1c26454ce7537dc30",
          "md5": "3bbdf9efd1306f6e5b53b54c46e2e6e4",
          "sha256": "584347d29f2a953b40d036185b4da297edcdf35614d2900eec2d0f947fe2bed1"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3bbdf9efd1306f6e5b53b54c46e2e6e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18756,
        "upload_time": "2020-11-10T18:56:06",
        "upload_time_iso_8601": "2020-11-10T18:56:06.380511Z",
        "url": "https://files.pythonhosted.org/packages/1f/f2/1e5431af6ca3f5565b74790da66f4d08c3f0662cf9a1c26454ce7537dc30/graph-wrap-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1d371d7e8d7f82f884f07d90ee761088ad5942724fa7f017aa5972b9a59a821",
          "md5": "60b899f726e552573d32d7bdae4ab73f",
          "sha256": "ac00a6b3dfc7c4be26ca11563ffede13b249483ca81d63998fbefe76483897c0"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60b899f726e552573d32d7bdae4ab73f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18582,
        "upload_time": "2020-11-10T20:18:10",
        "upload_time_iso_8601": "2020-11-10T20:18:10.190206Z",
        "url": "https://files.pythonhosted.org/packages/c1/d3/71d7e8d7f82f884f07d90ee761088ad5942724fa7f017aa5972b9a59a821/graph_wrap-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f02a9d76a2cf03631ba20e7f44877f1ce89a9ddb1d39e205aa0aa381a0599978",
          "md5": "ea88df928a5038c1fee3873bb48ca0b5",
          "sha256": "7d66ba6890cfeb0aba7b2268576d9a505093409d4f2704a053955041682dc1f0"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ea88df928a5038c1fee3873bb48ca0b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18773,
        "upload_time": "2020-11-10T20:18:11",
        "upload_time_iso_8601": "2020-11-10T20:18:11.647808Z",
        "url": "https://files.pythonhosted.org/packages/f0/2a/9d76a2cf03631ba20e7f44877f1ce89a9ddb1d39e205aa0aa381a0599978/graph-wrap-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb994951724c0413e0a6f959557993de325d9b855f268d65791489afda788a1d",
          "md5": "ae7b26951853657d650f7217d73c7938",
          "sha256": "a902e3a49a78e5b2f6b9362ba761243a902cf127e61e035fd7a7f394a4a67300"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae7b26951853657d650f7217d73c7938",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18709,
        "upload_time": "2020-11-10T20:49:49",
        "upload_time_iso_8601": "2020-11-10T20:49:49.227460Z",
        "url": "https://files.pythonhosted.org/packages/cb/99/4951724c0413e0a6f959557993de325d9b855f268d65791489afda788a1d/graph_wrap-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "708ea013dc310dab24b0a523f7fc04ea947cc5067b32990e8f874c405b6e2b78",
          "md5": "8b5d2628ba12b83f5c416357ca3d2008",
          "sha256": "792ced694f96f5999e04ff4982218bae3e253a1dae19c434e50226249e67b619"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8b5d2628ba12b83f5c416357ca3d2008",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4",
        "size": 18901,
        "upload_time": "2020-11-10T20:49:50",
        "upload_time_iso_8601": "2020-11-10T20:49:50.510172Z",
        "url": "https://files.pythonhosted.org/packages/70/8e/a013dc310dab24b0a523f7fc04ea947cc5067b32990e8f874c405b6e2b78/graph-wrap-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b38cd9765df19f4c22e0e08f44310f0cc139e1391f9b634a1776220a24d7f1c",
          "md5": "b6f3af1f9a5c77db9f061e6043a71c4b",
          "sha256": "6ddaddaa41a399a7062c09f510d1b1c741499ad3b3b63f7156dc5300b5ec9e0e"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6f3af1f9a5c77db9f061e6043a71c4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,  <4",
        "size": 32868,
        "upload_time": "2021-03-09T20:06:52",
        "upload_time_iso_8601": "2021-03-09T20:06:52.049896Z",
        "url": "https://files.pythonhosted.org/packages/1b/38/cd9765df19f4c22e0e08f44310f0cc139e1391f9b634a1776220a24d7f1c/graph_wrap-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53b82003b9ae463201c0a978ccb2f7de64340420ee4f30050fc23a3858e75c1e",
          "md5": "5bf9a37aa18c954141e917f0b1bc45a2",
          "sha256": "f998d42447d413c7e849995e6c2d7e67be619e6e03948fa588c6e05c1a980ec9"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5bf9a37aa18c954141e917f0b1bc45a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,  <4",
        "size": 30971,
        "upload_time": "2021-03-09T20:06:53",
        "upload_time_iso_8601": "2021-03-09T20:06:53.125005Z",
        "url": "https://files.pythonhosted.org/packages/53/b8/2003b9ae463201c0a978ccb2f7de64340420ee4f30050fc23a3858e75c1e/graph-wrap-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6f7c8e3583b76697ab4c12f0a1695f3b781ef22665164847a516051945ca0c8",
          "md5": "2b49ba2689454537e942b7afe6de0b30",
          "sha256": "057be3d40de7d3d397e9e4184097e5cc4e6f8224b440ca6303b0239bf8646790"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b49ba2689454537e942b7afe6de0b30",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,  <4",
        "size": 32785,
        "upload_time": "2021-04-22T13:26:04",
        "upload_time_iso_8601": "2021-04-22T13:26:04.948923Z",
        "url": "https://files.pythonhosted.org/packages/c6/f7/c8e3583b76697ab4c12f0a1695f3b781ef22665164847a516051945ca0c8/graph_wrap-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e940699b9ce987636c3f6e381419ceeff6ad8cb129fd70157cb06ff64702ab4d",
          "md5": "cda93c6255720564e49314f94cf3393b",
          "sha256": "e3681590be5288960ad7ebf2a9e853a8148aec6c23efb8fd9ef732ad771802fa"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cda93c6255720564e49314f94cf3393b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,  <4",
        "size": 33531,
        "upload_time": "2021-04-22T13:26:07",
        "upload_time_iso_8601": "2021-04-22T13:26:07.688993Z",
        "url": "https://files.pythonhosted.org/packages/e9/40/699b9ce987636c3f6e381419ceeff6ad8cb129fd70157cb06ff64702ab4d/graph-wrap-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c10533024e47e567fa7b1007a49f32b5b13771a5b39a3538f4da580f0dc3201",
          "md5": "1a23c150a4517e3de2036ac61b5b058c",
          "sha256": "19582073f0ae7defa04aa4249e91e9fb8f9cf78da6d1cfd33a55a6a9fc01f870"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a23c150a4517e3de2036ac61b5b058c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,  <4",
        "size": 33671,
        "upload_time": "2022-05-12T04:43:30",
        "upload_time_iso_8601": "2022-05-12T04:43:30.108995Z",
        "url": "https://files.pythonhosted.org/packages/5c/10/533024e47e567fa7b1007a49f32b5b13771a5b39a3538f4da580f0dc3201/graph_wrap-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c7f1fca9f7fc3fb9a8aa24bd0fcc2d281123b4505f2d6663ffb72de0ef00118",
          "md5": "091ddf66112714720e4c436eb07c2ebd",
          "sha256": "9215bd58b5b3153abd29cef4bb3844c51e8b9f42115acc52823da4ded88e60cf"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "091ddf66112714720e4c436eb07c2ebd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,  <4",
        "size": 32914,
        "upload_time": "2022-05-12T04:43:32",
        "upload_time_iso_8601": "2022-05-12T04:43:32.780427Z",
        "url": "https://files.pythonhosted.org/packages/6c/7f/1fca9f7fc3fb9a8aa24bd0fcc2d281123b4505f2d6663ffb72de0ef00118/graph-wrap-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de47c11ed8cdfdb1da76de089aadb856b003ff5ace752ff56f6226d46e18164e",
          "md5": "b846e6040d8574ebba2c2385c08be7dd",
          "sha256": "c51542e9f3c987c670e0bbf8aee57c7826a044fbae6263cf9d51a5676ea87d45"
        },
        "downloads": -1,
        "filename": "graph_wrap-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b846e6040d8574ebba2c2385c08be7dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,  <4",
        "size": 33671,
        "upload_time": "2022-05-12T04:57:20",
        "upload_time_iso_8601": "2022-05-12T04:57:20.167491Z",
        "url": "https://files.pythonhosted.org/packages/de/47/c11ed8cdfdb1da76de089aadb856b003ff5ace752ff56f6226d46e18164e/graph_wrap-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43df78d7efd82b53be3d29a4eeed48459c98e18e2a7fff84fbdf39e5ceac1330",
          "md5": "a2a12866341636f03492c91092ee73f9",
          "sha256": "2c2bfa9bea464a469d49997f7ba876213548fb667a00e9448147e8513d6f334b"
        },
        "downloads": -1,
        "filename": "graph-wrap-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a2a12866341636f03492c91092ee73f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,  <4",
        "size": 32907,
        "upload_time": "2022-05-12T04:57:22",
        "upload_time_iso_8601": "2022-05-12T04:57:22.115386Z",
        "url": "https://files.pythonhosted.org/packages/43/df/78d7efd82b53be3d29a4eeed48459c98e18e2a7fff84fbdf39e5ceac1330/graph-wrap-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de47c11ed8cdfdb1da76de089aadb856b003ff5ace752ff56f6226d46e18164e",
        "md5": "b846e6040d8574ebba2c2385c08be7dd",
        "sha256": "c51542e9f3c987c670e0bbf8aee57c7826a044fbae6263cf9d51a5676ea87d45"
      },
      "downloads": -1,
      "filename": "graph_wrap-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b846e6040d8574ebba2c2385c08be7dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,  <4",
      "size": 33671,
      "upload_time": "2022-05-12T04:57:20",
      "upload_time_iso_8601": "2022-05-12T04:57:20.167491Z",
      "url": "https://files.pythonhosted.org/packages/de/47/c11ed8cdfdb1da76de089aadb856b003ff5ace752ff56f6226d46e18164e/graph_wrap-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43df78d7efd82b53be3d29a4eeed48459c98e18e2a7fff84fbdf39e5ceac1330",
        "md5": "a2a12866341636f03492c91092ee73f9",
        "sha256": "2c2bfa9bea464a469d49997f7ba876213548fb667a00e9448147e8513d6f334b"
      },
      "downloads": -1,
      "filename": "graph-wrap-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a2a12866341636f03492c91092ee73f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,  <4",
      "size": 32907,
      "upload_time": "2022-05-12T04:57:22",
      "upload_time_iso_8601": "2022-05-12T04:57:22.115386Z",
      "url": "https://files.pythonhosted.org/packages/43/df/78d7efd82b53be3d29a4eeed48459c98e18e2a7fff84fbdf39e5ceac1330/graph-wrap-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}