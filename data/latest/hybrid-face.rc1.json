{
  "info": {
    "author": "Levi Borodenko",
    "author_email": "levi.borodenko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# Hybrid Face\n\n_See one face up close and another from far away!_\n\n## Description\n![banner](banner.png)\n\nTake any two faces and combine them into a so-called 'hybrid face'. That is, this tool will create an image that looks like the first face from nearby and like the seconds face from far away!\n## How does it work?\n\nThe core concept comes from research conducted by [A. Oliva et al.](https://stanford.edu/class/ee367/reading/OlivaTorralb_Hybrid_Siggraph06.pdf) that utilised the multiscale processing of images by the human visual system to generate static images with two interpretations.\n\nThis tool is an application of the above to faces. This is (roughly) how it works:\n\n1. First we need to understand the concept of the [Fourier Transform](https://www.academia.edu/download/44001876/34957138.pdf) applied to images.\n\n    1.1 Simple (but not easy) explanation: We interpret an image as a [tempered distribution](https://en.wikipedia.org/wiki/Distribution_(mathematics)#Tempered_distributions_and_Fourier_transform) obtained as the sum of [delta distributions](https://en.wikipedia.org/wiki/Dirac_delta_function) shifted by pixel location and multiplied by greyscale value. The Fourier transform of that image is then simply the [Fourier transform](https://en.wikipedia.org/wiki/Fourier_transform) of the aforementioned distribution. Well, technical the [periodically extension](https://www.math.ubc.ca/~feldman/m267/fsExt.pdf) of it.\n\n    1.2 Easy (but not simple) explanation: The Fourier transform of a sound sample gives you the audio frequencies contained in that sample. Similarly, the Fourier transform of an image give you the spatial frequencies that make up that image. A spatial frequency can be interpreted as a periodic wave (i.e. sinusoidal) pattern such that adding up all these waves returns back the (greyscale) image. In particular, high spatial frequencies correspond to rapidly oscillating waves and low spatial frequencies are slowly oscillating waves.\n\n2. It is a [curious observation](https://www.sciencedirect.com/science/article/abs/pii/S0010028597906678) that the human visual system is able to prioritize information coming from particular spatial frequency bands for object or scene recognition. This is precisely what we use in this application. We utilise that fact that from up close, we prioritize high spatial frequencies for object recognition and from further away, we prioritize lower spatial frequencies. Read [here](https://stanford.edu/class/ee367/reading/OlivaTorralb_Hybrid_Siggraph06.pdf) for more details.\n\n3. Finally, with all the above, this tool's functionality can be simply described as: We take the two images, crop them to only have the faces, then in one face we only keep the high spatial frequencies (via convolution with a high-pass filter) and in the other we only keep the low spatial frequencies (via convolution with a low-pass filter) and then we alpha-blend the two faces together.\n\n## How do I use it?\n\n### Installation\n\nSimply install via pip `pip install hybrid-face`.\n\nShould you have trouble with the `dlib` dependency during installation, simply run `pip install cmake dlib`.\n\n### Using the CLI\n\nAfter installing the tool, you can use the `hybrid-face` command line interface to create your own hybrid faces\n\n```\nusage: hybrid-face [-h] [--version] -n NEAR_IMAGE -f FAR_IMAGE [--emphasis {near,far,balanced}] [-o OUTPUT] [-s]\n\nCommand-line tool for creating hybrid images\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -n NEAR_IMAGE, --near NEAR_IMAGE\n                        Path to the image that should be seen from anear\n  -f FAR_IMAGE, --far FAR_IMAGE\n                        Path to the image that should be seen from afar\n  --emphasis {near,far,balanced}\n                        Choose whether the near or far image should be emphasized\n  -o OUTPUT, --output OUTPUT\n                        Output file for the resulting image (e.g. \"result.png\")\n  -s, --show            Set this flag if you want to display the image (and not necessarily save it)\n\n```\n\nThat is, if you have an image `gauss.png` and `fourier.png` and you want to display the hybrid image, you simply run `hybrid-face --near gauss.png --far fourier.png --show`.\n\n![cli-demo](cli-demo.png)\n\n### Setting up the project\n\nNavigate into your fork and do the remaining setup.\n\n```bash\n# Setup a python virtual environment:\npython3.8 -m venv venv\n\n# update pip\npip install --upgrade pip\n\n# ... and activate it.\n. venv/bin/activate\n```\n\nThis project uses pre-commits, so please make sure to install them:\n\n```bash\n# install pre-commit in your venv\npip install pre-commit\n\n# set up pre-commits\npre-commit install\n\n# It is a good idea to update the hooks to the latest version\npre-commit autoupdate\n\n# Run before committing to check all files\npre-commit run --all-files\n```\n\nNote: pre-commit hooks run on git commits and if they fix or make you fix some file, then you'll have to commit again.\n\npre-commit: <http://pre-commit.com/>\n\n## Installing dependencies\n\nDependencies are categorized and managed using `setup.cfg`.\n\n```bash\n# install default dependencies\npip install -e .\n\n# to further install testing dependencies run\npip install -e .[testing]\n\n# to further install dev dependencies like pre-commit, black, flake8 run\npip install -e .[dev]\n```\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LeviBorodenko/hybrid-face",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hybrid-face",
    "package_url": "https://pypi.org/project/hybrid-face/",
    "platform": "any",
    "project_url": "https://pypi.org/project/hybrid-face/",
    "project_urls": {
      "Documentation": "https://github.com/LeviBorodenko/hybrid-face",
      "Homepage": "https://github.com/LeviBorodenko/hybrid-face"
    },
    "release_url": "https://pypi.org/project/hybrid-face/0.1.3/",
    "requires_dist": [
      "importlib-metadata (>=4.0.1)",
      "face-recognition (>=1.3.0)",
      "numpy (>=1.20.2)",
      "Pillow (>=8.2.0)",
      "rich (>=10.1.0)",
      "flake8 ; extra == 'dev'",
      "black ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "See one face up close and another from far away!",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10253550,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54a8ca2b4e30ee4870bd680b847e0f81f75ee201be885fc3b5364d710701675b",
          "md5": "7bdef5b2dc9886d190f7728ad4589cb5",
          "sha256": "95702f3f0c4209f197072f998ba27e5cea003c5fc0d8a29893a634957d01d5d0"
        },
        "downloads": -1,
        "filename": "hybrid_face-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bdef5b2dc9886d190f7728ad4589cb5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 10551,
        "upload_time": "2021-05-04T13:45:33",
        "upload_time_iso_8601": "2021-05-04T13:45:33.767082Z",
        "url": "https://files.pythonhosted.org/packages/54/a8/ca2b4e30ee4870bd680b847e0f81f75ee201be885fc3b5364d710701675b/hybrid_face-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbf2ca376f159aa19d8311c4845082720a4dc61ece93179cabea69712e19d7ab",
          "md5": "23dcb96b5d7713fac8a55738288d2a8d",
          "sha256": "370e4a1bb41c1b05991991de577f43cb4b6621863139ec39bfdaf5fe45452f8b"
        },
        "downloads": -1,
        "filename": "hybrid_face-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "23dcb96b5d7713fac8a55738288d2a8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 1570540,
        "upload_time": "2021-05-04T13:45:39",
        "upload_time_iso_8601": "2021-05-04T13:45:39.698739Z",
        "url": "https://files.pythonhosted.org/packages/bb/f2/ca376f159aa19d8311c4845082720a4dc61ece93179cabea69712e19d7ab/hybrid_face-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54a8ca2b4e30ee4870bd680b847e0f81f75ee201be885fc3b5364d710701675b",
        "md5": "7bdef5b2dc9886d190f7728ad4589cb5",
        "sha256": "95702f3f0c4209f197072f998ba27e5cea003c5fc0d8a29893a634957d01d5d0"
      },
      "downloads": -1,
      "filename": "hybrid_face-0.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7bdef5b2dc9886d190f7728ad4589cb5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 10551,
      "upload_time": "2021-05-04T13:45:33",
      "upload_time_iso_8601": "2021-05-04T13:45:33.767082Z",
      "url": "https://files.pythonhosted.org/packages/54/a8/ca2b4e30ee4870bd680b847e0f81f75ee201be885fc3b5364d710701675b/hybrid_face-0.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbf2ca376f159aa19d8311c4845082720a4dc61ece93179cabea69712e19d7ab",
        "md5": "23dcb96b5d7713fac8a55738288d2a8d",
        "sha256": "370e4a1bb41c1b05991991de577f43cb4b6621863139ec39bfdaf5fe45452f8b"
      },
      "downloads": -1,
      "filename": "hybrid_face-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "23dcb96b5d7713fac8a55738288d2a8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 1570540,
      "upload_time": "2021-05-04T13:45:39",
      "upload_time_iso_8601": "2021-05-04T13:45:39.698739Z",
      "url": "https://files.pythonhosted.org/packages/bb/f2/ca376f159aa19d8311c4845082720a4dc61ece93179cabea69712e19d7ab/hybrid_face-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}