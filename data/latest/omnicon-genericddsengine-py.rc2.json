{
  "info": {
    "author": "Omnicon Distributed Systems LTD",
    "author_email": "Gal@OmniconSystems.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux"
    ],
    "description": "# OmniCon GenericDDSEngine PythonAPI\r\n\r\n## Introduction\r\nOmniCon's Generic DDS Engine is a pluggable software library that provides simple, fully generic monitoring and message injection capabilities for Data Distribution Service (DDS).\r\n\r\n### Motivation\r\nThis project encapsulates DDS-complex API and configuration. It provides a simple, user friendly API to easily incorporate DDS traffic to generic monitoring and visualization tools.\r\n\r\n### Engine Capabilites\r\n#### Engine's monitor inputs:\r\n1.\tActive dynamic/static monitoring based on a generic DDS Participant.\r\n2.\tPassive (non-intrusive) dynamic monitoring using network sniffing techniques.\r\n3.\tOffline network recording dissection.\r\n\r\n#### Engine's monitor outputs & plugins:\r\n1.  A generic C++, C# and Python APIs for receiving monitored messages in JSON and Map formats via push/poll methods.\r\n2.\tCustomized integration to operational monitoring tools (proprietary and open-source).\r\n3.\tTextual reports generation.\r\n4.\tIntegration to databases (relational and non-relational).\r\n\r\n#### Engine's message injection:\r\n1.\tA C++, C# and Python APIs for injecting messages via JSON or Map formats.\r\n2.\tMessage injection based on a user-provided textual format (e.g. CSV).\r\n\r\n#### DDS XML/IDL Type Files Introspection:\r\n1.\tA simplified C++, C# and Python APIs for extracting detailed information on a selected DDS type's structure.\r\n2.\tDocumentation / ICD generator. \r\n\r\n### DDS Overview \r\nThe OMG Data Distribution Service (DDS&trade;) is a middleware protocol and API standard for data-centric connectivity from the Object Management Group&reg; (OMG&reg;). It integrates the components of a system together, providing low-latency data connectivity, extreme reliability, and a scalable architecture that business and mission-critical Internet of Things (IoT) applications need.\r\n<br>For more information refer to https://www.dds-foundation.org/.\r\n\r\n## Installation\r\n* pip install Omnicon-GenericDDSEngine-Py\r\n* Requires: Visual Studio redistributable (https://aka.ms/vs/17/release/vc_redist.x64.exe)\r\n* An Omnnicon license is required to utilize the API. Please Contact Info@OmniconSystems.com.\r\n\r\n## Examples \r\nFor full API documentation and examples refer to https://www.OmniconSystems.com\r\n\r\n### Active Dynamic Monitoring\r\nDemonstrate how to dinamically monitor every topic in a desired DDS domain.\r\nThe same API applies for Passive monitoring.\r\n\r\n```python\r\nfrom Omnicon_GenericDDSEngine_Py import Omnicon_GenericDDSEngine_Py as omnicon\r\nfrom time import sleep\r\n\r\n\r\nclass ActiveDynamicMonitorExampleListener(omnicon.EngineListener):\r\n\r\n    def OnUserDataJson(self, sampleJson):\r\n        print(\"OnUserDataJson\")\r\n        print(sampleJson)\r\n\r\n    def OnDiscoveryDataJson(self, sampleJson):\r\n        print(\"OnDiscoveryDataJson\")\r\n        print(sampleJson)\r\n\r\n\r\nclass ActiveDynamicMonitorExample:\r\n    def __init__(self):\r\n        print(self.run())\r\n\r\n    @staticmethod\r\n    def run():\r\n        print(\"Active Dynamic Monitoring Example\")\r\n\r\n        # Factory configuration (optional) (can also be performed via an XML configuration)\r\n        factory_configuration = omnicon.FactoryConfiguration()\r\n        factory_configuration.loggerConfiguration.verbosity = omnicon.LogSeverityLevel.trace\r\n        if not omnicon.GenericDDSEngine.SetFactoryConfiguration(factory_configuration):\r\n            print(\"error setting factory configuration\")\r\n            return False\r\n\r\n        # Engine configuration (can also be performed via API)\r\n        engine = omnicon.GenericDDSEngine()\r\n        engine_configuration = omnicon.EngineConfiguration()\r\n        engine_configuration.engineOperationMode = omnicon.EngineOperationMode.ACTIVE_DYNAMIC_MONITORING\r\n        engine_configuration.ddsConfigurationFilesPath.append(\"./EngineConfigurationExamples/ActiveDynamicMonitoring\")\r\n        engine_configuration.enableJsonOutput = True\r\n\r\n        if not engine.Init(engine_configuration):\r\n            return False\r\n\r\n        # Register to engine's callbacks/events\r\n        listener = ActiveDynamicMonitorExampleListener()\r\n        if not engine.BindListener(listener, omnicon.ON_USER_DATA_JSON | omnicon.ON_DISCOVERY_DATA_JSON):\r\n            return False\r\n\r\n        if not engine.Run():\r\n           return False\r\n\r\n        print(\"Running Example...\")\r\n        input('Press Enter to Exit ')\r\n        sleep(1)\r\n        engine.UnbindListener()\r\n        print(\"Shutting Down...\")\r\n\r\n```\r\n\r\nRequired Standard DDS configuration files include a basic participant with the DDS types files and DDS domain. For example:\r\n\r\n```xml\r\n<dds xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <types>\r\n    <enum name=\"ShapeFillKind\">\r\n        <enumerator name=\"SOLID_FILL\"/>\r\n        <enumerator name=\"TRANSPARENT_FILL\"/>\r\n        <enumerator name=\"HORIZONTAL_HATCH_FILL\"/>\r\n        <enumerator name=\"VERTICAL_HATCH_FILL\"/>\r\n    </enum> \r\n    <struct name= \"ShapeType\">\r\n        <member name=\"color\" stringMaxLength=\"128\" type=\"string\" key=\"true\"/>\r\n        <member name=\"x\" type=\"int32\"/>\r\n        <member name=\"y\" type=\"int32\"/>\r\n        <member name=\"shapesize\" type=\"int32\"/>\r\n    </struct>\r\n    <struct name= \"ShapeTypeExtended\" baseType=\"ShapeType\">\r\n        <member name=\"fillKind\" type=\"nonBasic\"  nonBasicTypeName= \"ShapeFillKind\"/>\r\n        <member name=\"angle\" type=\"float32\"/>\r\n    </struct>\r\n  </types>\r\n\r\n  <domain_library name=\"Domain_Lib\">\r\n    <domain name=\"Domain\" domain_id=\"7\"/>\r\n  </domain_library>\r\n\r\n  <domain_participant_library name=\"Participants_Lib\">\r\n    <domain_participant name=\"OmniCon_Engine_Participant\" domain_ref=\"Domain_Lib::Domain\">\r\n      <subscriber name=\"Subscriber\"/>\r\n    </domain_participant>\r\n  </domain_participant_library>\r\n\r\n</dds>\r\n```\r\n\r\n### Message Injection\r\nDemonstrate how to generically inject every DDS Topic using dictionary/json format.\r\n\r\n```python\r\nfrom Omnicon_GenericDDSEngine_Py import Omnicon_GenericDDSEngine_Py as omnicon\r\nfrom time import sleep\r\n\r\n\r\nclass MessageInjectionExample:\r\n    def __init__(self):\r\n        print(self.run())\r\n\r\n    @staticmethod\r\n    def run():\r\n        print(\"Message Injection Example\")\r\n\r\n        engine = omnicon.GenericDDSEngine()\r\n        # Engine configuration (can also be performed via xml config file)\r\n        engine_configuration = omnicon.EngineConfiguration()\r\n        engine_configuration.engineOperationMode = omnicon.EngineOperationMode.MESSAGE_INJECTION\r\n        engine_configuration.ddsConfigurationFilesPath.append(\"./EngineConfigurationExamples/MessageInjection\")\r\n\r\n        if not engine.Init(engine_configuration):\r\n            return False\r\n        if not engine.Run():\r\n            return False\r\n\r\n        # Prevent data races:\r\n        sleep(2)\r\n        print(\"List of available writers: \")\r\n        for writerInfo in engine.GetWritersInfo():\r\n            print(writerInfo.entityName, \"to Topic\", writerInfo.topicName)\r\n        print(\"\")\r\n\r\n        # Primitive Topic message:\r\n        primitive_topic_input = {\r\n            \"SampleData.myLongLong\": \"-1\",\r\n            \"SampleData.myUnsignedShort\": \"0\",\r\n            \"SampleData.myFloat\": \"-6789889.3392\",\r\n            \"SampleData.myDouble\": \"-6789898989.33999442\",\r\n            \"SampleData.myBoolean\": \"0\",  # can also use \"False\"\r\n            \"SampleData.myChar\": \"\",\r\n            \"SampleData.myWchar\": \"0\",  # wchar is treated as number\r\n            \"SampleData.myOctet\": \"0\",\r\n            \"SampleData.myShort\": \"-32768\",\r\n            \"SampleData.myLong\": \"-2147483648\",\r\n            \"SampleData.myUnsignedLong\": \"0\"\r\n        }\r\n        print(\"Injecting Primitive Topic Message\")\r\n        engine.InjectMessage(\"Publisher::PrimitiveTypeTopic_DW\", primitive_topic_input)\r\n\r\n        # String Topic Message\r\n        string_topic_input = {\r\n            \"SampleData.myBoundedString\": \"Hello\",\r\n            \"SampleData.myUnboundedString\": \"OmniCon\",\r\n            \"SampleData.myBoundedWString\": \"!\"\r\n        }\r\n        print(\"Injecting String Topic Message\")\r\n        engine.InjectMessage(\"Publisher::StringsTypeTopic_DW\", string_topic_input)\r\n\r\n        # Enum Topic Message\r\n        enum_topic_input = {\r\n            \"SampleData.mySimpleEnum\": \"2\",\r\n            \"SampleData.myDigitsEnum\": \"-1\",\r\n            \"SampleData.LetterPrimitiveEnum\": \"1\"\r\n        }\r\n        print(\"Injecting Enum Topic Message\")\r\n        engine.InjectMessage(\"Publisher::EnumTypeTopic_DW\", enum_topic_input)\r\n\r\n        # PrimitiveNested Topic Message\r\n        primitive_nested_topic_input = {\r\n            \"SampleData.myAliasLongType\": \"1\",\r\n            \"SampleData.myFirstType.myChar\": \"1\",\r\n            \"SampleData.myFirstType.myWchar\": \"1\",\r\n            \"SampleData.myFirstType.myOctet\": \"1\",\r\n\r\n            \"SampleData.PrimitiveSecondNested.myFloat\": \"2.5\",\r\n            \"SampleData.PrimitiveSecondNested.myNestedType.myChar\": \"z\",\r\n            \"SampleData.PrimitiveSecondNested.myDouble\": \"3.14159265359\"\r\n        }\r\n        print(\"Injecting PrimitiveNested Topic Message\")\r\n        engine.InjectMessage(\"Publisher::PrimitiveNestedTypeTopic_DW\", primitive_nested_topic_input)\r\n\r\n        # Array Topic Message\r\n        array_type_topic_input = {\r\n            \"SampleData.myKey\": \"1\",\r\n            \"SampleData.AliasCharArray[0]\": \"1\",\r\n            \"SampleData.PrimitiveOneDimensionalLiteralSizeArray.boolean_array[0]\": \"1\",\r\n            \"SampleData.PrimitiveOneDimensionalLiteralSizeArray.boolean_array[1]\": \"0\",\r\n            \"SampleData.PrimitiveOneDimensionalLiteralSizeArray.boolean_array[2]\": \"1\",\r\n            \"SampleData.PrimitiveOneDimensionalLiteralSizeArray.short_array[0]\": \"223\",\r\n        }\r\n        print(\"Injecting ArrayTypeTopic Topic Message\")\r\n        engine.InjectMessage(\"Publisher::ArrayTypeTopic_DW\", array_type_topic_input)\r\n\r\n        # Sequence Topic Message\r\n        sequence_topic_message = \t{\r\n\t\t\t\t\t  \"SampleData\": {\r\n\t\t\t\t\t\t\"myKey\": \"0\",\r\n\t\t\t\t\t\t\"myBooleanSeq\": [\r\n\t\t\t\t\t\t\t\"TRUE\"\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"myAliasLongUSeq\": [],\r\n\t\t\t\t\t\t\"myAliasSeqEnumMember\": [\r\n\t\t\t\t\t\t\t\"(1) - GREEN\",\r\n\t\t\t\t\t\t\t\"(2) - BLUE\"\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"myAliasSeqStringMember\": [\r\n\t\t\t\t\t\t\t\"ABC\"\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"myPrimitiveSeq\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"myChar\": \"\\u0000\",\r\n\t\t\t\t\t\t\t\t\"myWchar\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myOctet\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myShort\": \"2\",\r\n\t\t\t\t\t\t\t\t\"myUnsignedShort\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myLong\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myUnsignedLong\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myLongLong\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myUnsignedLongLong\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myFloat\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myDouble\": \"0\",\r\n\t\t\t\t\t\t\t\t\"myBoolean\": \"TRUE\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t        }\r\n                }\r\n        print(\"Injecting SequenceTypeTopic Topic Message\")\r\n        engine.InjectMessage(\"Publisher::SequenceTypeTopic_DW\", sequence_topic_message)\r\n\r\n        # Union Topic Message\r\n        union_type_topic_input = {\r\n            \"SampleData.myKey\": \"1\",\r\n            \"SampleData.mySimpleUnion.AliasLong_2_3\": \"111\",\r\n            # \"SampleData.PositionError.Error3DMember.sigmaXX\": \"23\",\r\n            \"SampleData.PositionError.Error2DMember.sigmaXX\": \"245\"\r\n        }\r\n        print(\"Injecting UnionTypeTopic Topic Message\")\r\n        engine.InjectMessage(\"Publisher::UnionTypeTopic_DW\", union_type_topic_input)\r\n\r\n        input(\"Press Enter to Exit...\")\r\n        return True\r\n\r\n```\r\n\r\nRequired Standard DDS configuration files include a basic participant with the DDS types files and DDS domain. For example:\r\n\r\n```xml\r\n<dds xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <types>\r\n    <!--User Types-->\r\n    <include file=\"TypeFiles/ShapeType.xml\" />\r\n    <include file=\"TypeFiles/myIncludedTypesTester.xml\" />\r\n    <include file=\"TypeFiles/myGenericTypesTester.xml\" />\r\n  </types>\r\n\r\n<!-- Optional -->\r\n  <qos_library name=\"QOSLibrary\">\r\n    <qos_profile name=\"DefaultProfile\" is_default_participant_factory_profile=\"true\" is_default_qos=\"true\" >\r\n      <participant_qos/>\r\n      <datawriter_qos>\r\n        <property>\r\n          <value>\r\n            <!--Required for unbounded types support-->\r\n            <element>\r\n              <name>dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size</name>\r\n              <value>4096</value>\r\n            </element>\r\n          </value>\r\n        </property>\r\n      </datawriter_qos>\r\n      <datareader_qos>\r\n        <property>\r\n          <value>\r\n            <!--Required for unbounded types support-->\r\n            <element>\r\n              <name>dds.data_reader.history.memory_manager.fast_pool.pool_buffer_max_size</name>\r\n              <value>4096</value>\r\n            </element>\r\n          </value>\r\n        </property>\r\n      </datareader_qos>\r\n    </qos_profile>\r\n  </qos_library>\r\n\r\n\r\n\r\n  <domain_library name=\"Domain_Lib\">\r\n    <domain name=\"Domain\" domain_id=\"7\">\r\n      <!--Types Definition-->\r\n      <register_type name=\"ShapeType\" type_ref=\"ShapeType\" />\r\n      <register_type name=\"PrimitiveType\" type_ref=\"PrimitiveType\" />\r\n      <register_type name=\"MyNamespace::StringsType\" type_ref=\"MyNamespace::StringsType\" />\r\n      <register_type name=\"EnumType\" type_ref=\"EnumType\" />\r\n      <register_type name=\"PrimitiveNestedType\" type_ref=\"PrimitiveNestedType\" />\r\n      <register_type name=\"SequenceType\" type_ref=\"SequenceType\" />\r\n      <register_type name=\"UnionType\" type_ref=\"UnionType\" />\r\n      <register_type name=\"ArrayType\" type_ref=\"ArrayType\" />\r\n\r\n      <!--Topics Definition-->\r\n      <topic name=\"Square\" register_type_ref=\"ShapeType\"/>\r\n      <topic name=\"PrimitiveTypeTopic\" register_type_ref=\"PrimitiveType\" />\r\n      <topic name=\"StringsTypeTopic\" register_type_ref=\"MyNamespace::StringsType\" />\r\n      <topic name=\"EnumTypeTopic\" register_type_ref=\"EnumType\" />\r\n      <topic name=\"PrimitiveNestedTypeTopic\" register_type_ref=\"PrimitiveNestedType\" />\r\n      <topic name=\"SequenceTypeTopic\" register_type_ref=\"SequenceType\" />\r\n      <topic name=\"UnionTypeTopic\" register_type_ref=\"UnionType\" />\r\n      <topic name=\"ArrayTypeTopic\" register_type_ref=\"ArrayType\" />\r\n\r\n    </domain>\r\n  </domain_library>\r\n  <domain_participant_library name=\"Participants_Lib\">\r\n    <domain_participant name=\"OmniCon_Engine_Participant\" domain_ref=\"Domain_Lib::Domain\">\r\n      <publisher name=\"Publisher\">\r\n        <data_writer name=\"PrimitiveTypeTopic_DW\" topic_ref=\"PrimitiveTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n        <data_writer name=\"StringsTypeTopic_DW\" topic_ref=\"StringsTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n        <data_writer name=\"EnumTypeTopic_DW\" topic_ref=\"EnumTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n        <data_writer name=\"PrimitiveNestedTypeTopic_DW\" topic_ref=\"PrimitiveNestedTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n        <data_writer name=\"ArrayTypeTopic_DW\" topic_ref=\"ArrayTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n        <data_writer name=\"SequenceTypeTopic_DW\" topic_ref=\"SequenceTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n        <data_writer name=\"UnionTypeTopic_DW\" topic_ref=\"UnionTypeTopic\">\r\n          <datawriter_qos base_name=\"QOSLibrary::DefaultProfile\"/>\r\n        </data_writer>\r\n      </publisher>\r\n    </domain_participant>\r\n  </domain_participant_library>\r\n</dds>\r\n```\r\n\r\n### Type Introspection Example\r\nDemonstrate how to extract DDS type infromation for analysis purposes.\r\n\r\n```python\r\nfrom Omnicon_GenericDDSEngine_Py import Omnicon_GenericDDSEngine_Py as omnicon\r\n\r\nclass TypeIntrospectionExample:\r\n    def __init__(self):\r\n        print(self.run())\r\n\r\n    @staticmethod\r\n    def run():\r\n        print(\"Type Introspection Example\")\r\n        factory_configuration = omnicon.FactoryConfiguration()\r\n        factory_configuration.loggerConfiguration.verbosity = omnicon.LogSeverityLevel.trace\r\n        omnicon.GenericDDSEngine.SetFactoryConfiguration(factory_configuration)\r\n\r\n        engine = omnicon.GenericDDSEngine()\r\n        # Engine configuration (can also be performed via xml config file)\r\n        engine_configuration = omnicon.EngineConfiguration()\r\n        engine_configuration.engineOperationMode = omnicon.EngineOperationMode.TYPE_INTROSPECTION\r\n        engine_configuration.ddsConfigurationFilesPath.append(\"./EngineConfigurationExamples/TypeIntrospection/TopicNamesToTypesDefMap.xml\")\r\n\r\n        if not engine.Init(engine_configuration):\r\n            return False\r\n        if not engine.Run():\r\n            return False\r\n\r\n        DDSTopicToTypeXMLMapping = omnicon.GenericDDSEngine.GetTopicNameToTypeNameMap(\r\n            \"./EngineConfigurationExamples/TypeIntrospection/TopicNamesToTypesDefMap.xml\")\r\n        for topic, type in DDSTopicToTypeXMLMapping.items():\r\n            print(topic + \" - \" + type)\r\n\r\n            dds_type = engine.IntrospectType(type)\r\n            if dds_type is None:\r\n                print(type + \" is None\")\r\n            for element in dds_type.structure:\r\n                print(element.name)\r\n\r\n                if element.typeKindName == \"STRUCTURE\":\r\n                    print(\"\\tdataTypeName - \" + (element).dataTypeName)\r\n                if element.typeKindName == \"STRING\":\r\n                    print(\"\\tlen - \" + str((element).length))\r\n                if element.typeKindName == \"ENUMERATION\":\r\n                    print(\"\\tENUMERATION\")\r\n                if element.typeKindName == \"SEQUENCE\":\r\n                    print(\"\\tlen - \" + str((element).length))\r\n```\r\n\r\nRequired Standard DDS configuration files include a basic DDS types/topic XML definition. For example:\r\n```xml\r\n<dds xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n     xsi:noNamespaceSchemaLocation=\"http://community.rti.com/schema/6.1.0/rti_dds_profiles.xsd\"\r\n     version=\"6.1.0\">\r\n  <types>\r\n    <include file=\"TypeFiles//myIncludedTypesTester.xml\"/>\r\n    <include file=\"TypeFiles//myGenericTypesTester.xml\"/>\r\n    <include file=\"TypeFiles//ShapeType.xml\"/>\r\n  </types>\r\n\r\n  <domain_library name=\"Domain_Lib\">\r\n    <domain name=\"Domain\">\r\n      <!--Types Definition-->\r\n      <register_type name=\"ShapeType\" type_ref=\"ShapeTypeExtended\" />\r\n      <register_type name=\"PrimitiveType\" type_ref=\"PrimitiveType\" />\r\n      <register_type name=\"MyNamespace::StringsType\" type_ref=\"MyNamespace::StringsType\" />\r\n      <register_type name=\"EnumType\" type_ref=\"EnumType\" />\r\n      <register_type name=\"PrimitiveNestedType\" type_ref=\"PrimitiveNestedType\" />\r\n      <register_type name=\"SequenceType\" type_ref=\"SequenceType\" />\r\n      <register_type name=\"UnionType\" type_ref=\"UnionType\" />\r\n      <register_type name=\"ArrayType\" type_ref=\"ArrayType\" />\r\n\r\n      <!--Topics Definition-->\r\n      <topic name=\"Square\" register_type_ref=\"ShapeType\"/>\r\n      <topic name=\"PrimitiveTypeTopic\" register_type_ref=\"PrimitiveType\" />\r\n      <topic name=\"StringsTypeTopic\" register_type_ref=\"MyNamespace::StringsType\" />\r\n      <topic name=\"EnumTypeTopic\" register_type_ref=\"EnumType\" />\r\n      <topic name=\"PrimitiveNestedTypeTopic\" register_type_ref=\"PrimitiveNestedType\" />\r\n      <topic name=\"SequenceTypeTopic\" register_type_ref=\"SequenceType\" />\r\n      <topic name=\"UnionTypeTopic\" register_type_ref=\"UnionType\" />\r\n      <topic name=\"ArrayTypeTopic\" register_type_ref=\"ArrayType\" />\r\n    </domain>\r\n  </domain_library>\r\n\r\n</dds>\r\n```\r\n\r\n**OmniCon Distributed System LTD All Rights Reserved &copy;2019-2023**\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.OmniconSystems.com",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Omnicon-GenericDDSEngine-Py",
    "package_url": "https://pypi.org/project/Omnicon-GenericDDSEngine-Py/",
    "platform": null,
    "project_url": "https://pypi.org/project/Omnicon-GenericDDSEngine-Py/",
    "project_urls": {
      "Homepage": "https://www.OmniconSystems.com"
    },
    "release_url": "https://pypi.org/project/Omnicon-GenericDDSEngine-Py/4.5.5/",
    "requires_dist": null,
    "requires_python": "~=3.7",
    "summary": "Omnicon Generic DDS Engine Python API",
    "version": "4.5.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16483577,
  "releases": {
    "4.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f30f3682c2a074be1e266caec7cdc7330ca2a9065ac7d5193fdd9d38a13324d",
          "md5": "4824eaa008887e3d11d412bd334c4e96",
          "sha256": "6544202f7fb591765d5c552e1e0690da02308dac945531b722ca694da6717d6b"
        },
        "downloads": -1,
        "filename": "Omnicon_GenericDDSEngine_Py-4.5.4-1-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "4824eaa008887e3d11d412bd334c4e96",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": "~=3.7",
        "size": 4020935,
        "upload_time": "2022-11-15T14:27:22",
        "upload_time_iso_8601": "2022-11-15T14:27:22.523561Z",
        "url": "https://files.pythonhosted.org/packages/0f/30/f3682c2a074be1e266caec7cdc7330ca2a9065ac7d5193fdd9d38a13324d/Omnicon_GenericDDSEngine_Py-4.5.4-1-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3edd1eaf3412ad0668567ea20ff4a7a67466a37cb523befbe9a6212903b2eda8",
          "md5": "d0262f74e699bfed5748afba4e5b2698",
          "sha256": "dccf85e692a7eb8bc96301c0c2d0b7d4501c768d8b2b4a27fc9fc49c3f6c6c20"
        },
        "downloads": -1,
        "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-1-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d0262f74e699bfed5748afba4e5b2698",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": "~=3.7",
        "size": 4021636,
        "upload_time": "2022-12-21T21:54:05",
        "upload_time_iso_8601": "2022-12-21T21:54:05.705277Z",
        "url": "https://files.pythonhosted.org/packages/3e/dd/1eaf3412ad0668567ea20ff4a7a67466a37cb523befbe9a6212903b2eda8/Omnicon_GenericDDSEngine_Py-4.5.5-1-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2d0ddd83be39f860b8ecef259e914bba11457117c11c2f8aa509cf8abcd1b4b",
          "md5": "fe034484c96667b097cd7dca4e0bc179",
          "sha256": "39ead5d04b9a9a70f9a35128fff18ef4058779545385788efb68c9c18abc0efa"
        },
        "downloads": -1,
        "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-2-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fe034484c96667b097cd7dca4e0bc179",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": "~=3.7",
        "size": 4021585,
        "upload_time": "2022-12-26T11:41:53",
        "upload_time_iso_8601": "2022-12-26T11:41:53.690681Z",
        "url": "https://files.pythonhosted.org/packages/a2/d0/ddd83be39f860b8ecef259e914bba11457117c11c2f8aa509cf8abcd1b4b/Omnicon_GenericDDSEngine_Py-4.5.5-2-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cac874a427bb83ce124cb2764652caa2b289652096d9d94a958342b6563b0f5f",
          "md5": "a8333fe77648e26c0fd72c87d759c3cb",
          "sha256": "a89ec1c9651a83a971509b3a1174c7813347f9b336bc46d4688e093ef6cb737c"
        },
        "downloads": -1,
        "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-3-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a8333fe77648e26c0fd72c87d759c3cb",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": "~=3.7",
        "size": 4022784,
        "upload_time": "2023-01-17T19:46:30",
        "upload_time_iso_8601": "2023-01-17T19:46:30.323400Z",
        "url": "https://files.pythonhosted.org/packages/ca/c8/74a427bb83ce124cb2764652caa2b289652096d9d94a958342b6563b0f5f/Omnicon_GenericDDSEngine_Py-4.5.5-3-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "133dec3e5ec6dc5cbd0cd21c174fa47ac814d6b03c7145fc8414f75f8873f74a",
          "md5": "5e43c69027c95dcb22e42935162fd351",
          "sha256": "9e7b8913a2715458c92fcc3c5800836c81f3883431b38a227b90b822e0587576"
        },
        "downloads": -1,
        "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-4-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5e43c69027c95dcb22e42935162fd351",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": "~=3.7",
        "size": 4022784,
        "upload_time": "2023-01-19T06:49:17",
        "upload_time_iso_8601": "2023-01-19T06:49:17.078990Z",
        "url": "https://files.pythonhosted.org/packages/13/3d/ec3e5ec6dc5cbd0cd21c174fa47ac814d6b03c7145fc8414f75f8873f74a/Omnicon_GenericDDSEngine_Py-4.5.5-4-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f434b7f9d6c77e469085ff94affdbf7fa0a36e5174002119fa63b9b599217825",
          "md5": "54ed5cf9b2e03c6d540c0a2782db6650",
          "sha256": "2ddc49967e77a42ca2cc4f19f87f1f1fc56cb7ba92ab02d76944595638aaa01c"
        },
        "downloads": -1,
        "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-5-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "54ed5cf9b2e03c6d540c0a2782db6650",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": "~=3.7",
        "size": 4022781,
        "upload_time": "2023-01-19T06:55:40",
        "upload_time_iso_8601": "2023-01-19T06:55:40.529606Z",
        "url": "https://files.pythonhosted.org/packages/f4/34/b7f9d6c77e469085ff94affdbf7fa0a36e5174002119fa63b9b599217825/Omnicon_GenericDDSEngine_Py-4.5.5-5-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3edd1eaf3412ad0668567ea20ff4a7a67466a37cb523befbe9a6212903b2eda8",
        "md5": "d0262f74e699bfed5748afba4e5b2698",
        "sha256": "dccf85e692a7eb8bc96301c0c2d0b7d4501c768d8b2b4a27fc9fc49c3f6c6c20"
      },
      "downloads": -1,
      "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-1-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "d0262f74e699bfed5748afba4e5b2698",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": "~=3.7",
      "size": 4021636,
      "upload_time": "2022-12-21T21:54:05",
      "upload_time_iso_8601": "2022-12-21T21:54:05.705277Z",
      "url": "https://files.pythonhosted.org/packages/3e/dd/1eaf3412ad0668567ea20ff4a7a67466a37cb523befbe9a6212903b2eda8/Omnicon_GenericDDSEngine_Py-4.5.5-1-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2d0ddd83be39f860b8ecef259e914bba11457117c11c2f8aa509cf8abcd1b4b",
        "md5": "fe034484c96667b097cd7dca4e0bc179",
        "sha256": "39ead5d04b9a9a70f9a35128fff18ef4058779545385788efb68c9c18abc0efa"
      },
      "downloads": -1,
      "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-2-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "fe034484c96667b097cd7dca4e0bc179",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": "~=3.7",
      "size": 4021585,
      "upload_time": "2022-12-26T11:41:53",
      "upload_time_iso_8601": "2022-12-26T11:41:53.690681Z",
      "url": "https://files.pythonhosted.org/packages/a2/d0/ddd83be39f860b8ecef259e914bba11457117c11c2f8aa509cf8abcd1b4b/Omnicon_GenericDDSEngine_Py-4.5.5-2-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cac874a427bb83ce124cb2764652caa2b289652096d9d94a958342b6563b0f5f",
        "md5": "a8333fe77648e26c0fd72c87d759c3cb",
        "sha256": "a89ec1c9651a83a971509b3a1174c7813347f9b336bc46d4688e093ef6cb737c"
      },
      "downloads": -1,
      "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-3-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "a8333fe77648e26c0fd72c87d759c3cb",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": "~=3.7",
      "size": 4022784,
      "upload_time": "2023-01-17T19:46:30",
      "upload_time_iso_8601": "2023-01-17T19:46:30.323400Z",
      "url": "https://files.pythonhosted.org/packages/ca/c8/74a427bb83ce124cb2764652caa2b289652096d9d94a958342b6563b0f5f/Omnicon_GenericDDSEngine_Py-4.5.5-3-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "133dec3e5ec6dc5cbd0cd21c174fa47ac814d6b03c7145fc8414f75f8873f74a",
        "md5": "5e43c69027c95dcb22e42935162fd351",
        "sha256": "9e7b8913a2715458c92fcc3c5800836c81f3883431b38a227b90b822e0587576"
      },
      "downloads": -1,
      "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-4-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "5e43c69027c95dcb22e42935162fd351",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": "~=3.7",
      "size": 4022784,
      "upload_time": "2023-01-19T06:49:17",
      "upload_time_iso_8601": "2023-01-19T06:49:17.078990Z",
      "url": "https://files.pythonhosted.org/packages/13/3d/ec3e5ec6dc5cbd0cd21c174fa47ac814d6b03c7145fc8414f75f8873f74a/Omnicon_GenericDDSEngine_Py-4.5.5-4-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f434b7f9d6c77e469085ff94affdbf7fa0a36e5174002119fa63b9b599217825",
        "md5": "54ed5cf9b2e03c6d540c0a2782db6650",
        "sha256": "2ddc49967e77a42ca2cc4f19f87f1f1fc56cb7ba92ab02d76944595638aaa01c"
      },
      "downloads": -1,
      "filename": "Omnicon_GenericDDSEngine_Py-4.5.5-5-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "54ed5cf9b2e03c6d540c0a2782db6650",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": "~=3.7",
      "size": 4022781,
      "upload_time": "2023-01-19T06:55:40",
      "upload_time_iso_8601": "2023-01-19T06:55:40.529606Z",
      "url": "https://files.pythonhosted.org/packages/f4/34/b7f9d6c77e469085ff94affdbf7fa0a36e5174002119fa63b9b599217825/Omnicon_GenericDDSEngine_Py-4.5.5-5-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}