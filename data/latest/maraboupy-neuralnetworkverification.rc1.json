{
  "info": {
    "author": "Marabou",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![codecov.io](\n  https://codecov.io/github/NeuralNetworkVerification/Marabou/coverage.svg?branch=master)](\n    https://codecov.io/github/NeuralNetworkVerification/Marabou?branch=master)\n\n#  Marabou\nDeep neural networks are revolutionizing the way complex systems are designed.\nInstead of spending long hours hand-crafting complex software, many engineers\nnow opt to use deep neural networks (DNNs) - machine learning models, created by\ntraining algorithms that generalize from a finite set of examples to previously\nunseen inputs. Consequently, there is a pressing need for tools and techniques\nfor network analysis and certification. To help address that need, we present\nMarabou, a framework for verifying deep neural networks. \n\nMarabou is an SMT-based tool that can answer queries about a networkâ€™s\nproperties by transforming these queries into constraint satisfaction problems.\nIt can accommodate networks with different activation functions and topologies,\nand it performs high-level reasoning on the network that can curtail the search\nspace and improve performance. It also supports parallel execution to further\nenhance scalability. Marabou accepts multiple input formats, including protocol\nbuffer files generated by the popular TensorFlow framework for neural networks.\n\nA DNN verification query consists of two parts: (i) a neural network, and (ii) a\nproperty to be checked; and its result is either a formal guarantee that the\nnetwork satisfies the property, or a concrete input for which the property is\nviolated (a counter-example). There are several types of verification queries\nthat Marabou can answer: \n* Reachability queries: if inputs is in a given range is the output\nguaranteed to be in some, typically safe, range.\n* Robustness queries: test whether there exist adversarial points around a given\n  input point that change the output of the network.\n\nMarabou supports fully connected feed-forward and convolutional NNs with\npiece-wise linear activation functions, in the .nnet and TensorFlow formats.\nProperties can be specified using inequalites over input and output variables or\nvia Python interface. \n\nFor more details about the features of Marabou check out the [tool\npaper](https://aisafety.stanford.edu/marabou/MarabouCAV2019.pdf) and the\n[slides](https://aisafety.stanford.edu/marabou/fomlas19.html). \n\nFor more information about the input formats please check the\n[wiki](https://github.com/NeuralNetworkVerification/Marabou/wiki/Marabou-Input-Formats).\n\nDownload\n------------------------------------------------------------------------------\nThe latest version of Marabou is available on [https://github.com/NeuralNetworkVerification/Marabou].\n\nBuild and Dependencies\n------------------------------------------------------------------------------\n\nMarabou depends on the Boost library,\nwhich is automatically downloaded and built when you run make. Library CXXTEST\ncomes included in the repository.\n\nThe marabou build process uses CMake version 3.12 (or later).\nYou can get CMake [here](https://cmake.org/download/).\n\nMarabou can be built for Linux, MacOS, or Windows machines.\n\n### Build Instructions for Linux or MacOS\n\nTo build marabou using CMake run:\n```\ncd path/to/marabou/repo/folder\nmkdir build \ncd build\ncmake ..\n```\nFor configuring to build a static Marabou binary, use the following flag\n```\ncmake .. -DBUILD_STATIC_MARABOU=ON\n```\nTo build, run the following:\n```\ncmake --build .\n```\nTo enable multiprocess build change the last command to:\n```\ncmake --build . -j PROC_NUM\n```\nTo compile in debug mode (default is release)\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug\ncmake --build .\n```\n\nThe compiled binary will be in the *build* directory, named _Marabou_\n\nTo run tests we use [ctest](https://cmake.org/cmake/help/v3.15/manual/ctest.1.html).\nThe tests have labels according to level (unit/system/regress0/regress1...), and the code they are testing (engine/common etc...).  \nFor example to run all unit tests execute in the build directory:\n```\nctest -L unit\n```\nOn every build we run the unit tests, and on every pull request we run unit,\nsystem, regress0 and regress1.\n\nAnother option to build and run all of the tests is: \n```\ncd path/to/marabou/repo/folder\nmkdir build \ncd build\ncmake ..\nmake check -j PROC_NUM\n```\n### Build Instructions for Windows using Visual Studio\n\nFirst, install Visual Studio 2017 or later and select the \"Desktop development with C++\" workload. \nEnsure that CMake is installed and added to your PATH.\n\nOpen a command prompt and run:\n```\ncd path\\to\\marabou\\repo\\folder\nmkdir build \ncd build\ncmake .. -G\"Visual Studio 15 2017 Win64\"\ncmake --build . --config Release\n```\nThis process builds Marabou using the generator \"Visual Studio 15 2017 Win64\". \nFor 32-bit machines, omit Win64. Other generators and older versions of Visual Studio can likely be used as well, \nbut only \"Visual Studio 15 2017 Win64\" has been tested.\n\nThe Marabou executable file will be written to the build/Release folder. To build in \nDebug mode, simply run \"cmake --build . --config Debug\", and the executables will be \nwritten to build/Debug.\n\n### Python API\nIt may be useful to set up a Python virtual environment, see\n[here](https://docs.python.org/3/tutorial/venv.html) for more information.\n\nThe python interface was tested only on versions >3.5 and >2.7. The build process prefers python3 but will work if there is only python 2.7 available. (To control the default change the DEFAULT_PYTHON_VERSION variable).  \nThe Python interface requires *pybind11* (which is automatically downloaded). \nBy default Marabou builds also the python API, the BUILD_PYTHON variable\ncontrols that.\nThis process will produce the binary file and the shared library for the Python \nAPI. The shared library will be in the maraboupy folder for Linux and MacOS. \nOn Windows, the shared library is written to a Release subfolder in maraboupy, \nso you will need to move the Release/\\*pyd file to the maraboupy folder:\n```\ncd path\\to\\marabou\\repo\\folder\\maraboupy\nmove Release\\*pyd .\n```\n\nExport maraboupy folder to Python and Jupyter paths:\n```\nPYTHONPATH=PYTHONPATH:/path/to/marabou/folder\nJUPYTER_PATH=JUPYTER_PATH:/path/to/marabou/folder\n```\nand Marabou is ready to be used from a Python or a Jupyter script. On Windows, \nedit your environmental variables so PYTHONPATH includes the marabou folder.\n\n#### Troubleshooting\n\n- On Windows - Make sure the detected python (\"Found PythonInterp: ....\") is a windows python and not cygwin or something like that (if it is cygwin, use -DPYTHON_EXECUTABLE flag to override the default python, or manuialy download the linux pybind and locate it in the tools directory)\n\n- 32bit Python - By default we install a 64bit Marabou and consequently a 64bit\n  python interface, the maraboupy/build_python_x86.sh file builds a 32bit\n  version.\n\n\n\nGetting Started\n-----------------------------------------------------------------------------\n### To run Marabou from Command line \nAfter building Marabou the binary is located at *build/Marabou* (or *build\\Release\\Marabou.exe* for Windows). The\nrepository contains sample networks and properties in the *resources* folder.\nFor more information see [resources/README.md](resources/README.md).\n\nTo run Marabou, execute from the repo directory, for example:\n```\n./build/Marabou resources/nnet/acasxu/ACASXU_experimental_v2a_2_7.nnet resources/properties/acas_property_3.txt\n```\non Linux or MacOS, or \n```\nbuild\\Release\\Marabou.exe resources\\nnet\\acasxu\\ACASXU_experimental_v2a_2_7.nnet resources\\properties\\acas_property_3.txt\n```\non Windows.\n\n### Using Python interface \nPlease see our [documentation](https://neuralnetworkverification.github.io/Marabou/)\nfor the python interface, which contains examples, API documentation, and a developer's guide.\n\n### Using the Split and Conquer (SNC) mode\nIn the SNC mode, activated by *--snc* Marabou decomposes the problem into *2^n0*\nsub-problems, specified by *--initial-divides=n0*. Each sub-problem will be\nsolved with initial timeout of *t0*, supplied by *--initial-timeout=t0*. Every\nsub-problem that times out will be divided into *2^n* additional sub-problems,\n*--num-online-divides=n*, and the timeout is multiplied by a factor of *f*,\n*--timeout-factor=f*. Number of parallel threads *t* is specified by\n*--num-workers=t*.\n\nSo to solve a problem in SNC mode with 4 initial splits and initial timeout of 5s, 4 splits on each timeout and a timeout factor of 1.5:\n```\nbuild/Marabou resources/nnet/acasxu/ACASXU_experimental_v2a_2_7.nnet resources/properties/acas_property_3.txt --snc --initial-divides=4 --initial-timeout=5 --num-online-divides=4 --timeout-factor=1.5 --num-workers=4\n```\n\n### Use LP Relaxation\nMarabou has an option to use LP relaxation for bound tightening.\nFor now we use Gurobi as an LP solver. Gurobi requires a license (a free\nacademic license is available), after getting one the software can be downloaded\n[here](https://www.gurobi.com/downloads/gurobi-optimizer-eula/) and [here](https://www.gurobi.com/documentation/9.0/quickstart_linux/software_installation_guid.html#section:Installation) are\ninstallation steps, there is a [compatibility\nissue](https://support.gurobi.com/hc/en-us/articles/360039093112-C-compilation-on-Linux) that should be addressed.\nA quick installation reference:\n```\nexport INSTALL_DIR=/opt\nsudo tar xvfz gurobi9.1.1_linux64.tar.gz -C $INSTALL_DIR\ncd $INSTALL_DIR/gurobi911/linux64/src/build\nsudo make\nsudo cp libgurobi_c++.a ../../lib/\n```\nNext it is recommended to add the following to the .bashrc (but not necessary) \n```\nexport GUROBI_HOME=\"/opt/gurobi911/linux64\"\nexport PATH=\"${PATH}:${GUROBI_HOME}/bin\"\nexport LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib\"\n\n```\n\nAfter installing Gurobi compile marabou as follows:\n```\ncmake .. -DENABLE_GUROBI=ON\ncmake --build . \n```\nIf you did not set the GUROBI_HOME environment variable, then use the following:\n```\ncmake .. -DENABLE_GUROBI=ON -DGUROBI_DIR=<PATH_TO_GUROBI>\n```\n\n### Tests\nWe have three types of tests:  \n* unit tests - test specific small components, the tests are located alongside the code in a _tests_ folder (for example: _src/engine/tests_), to add a new set of tests, add a file named *Test_FILENAME* (where *FILENAME* is what you want to test), and add it to the CMakeLists.txt file (for example src/engine/CMakeLists.txt)\n* system tests - test an end to end use case but still have access to internal functionality. Those tests are located in _src/system_tests_. To add new set of tests create a file named *Test_FILENAME*, and add it also to _src/system_tests/CMakeLists.txt_.\n* regression tests - test end to end functionality thorugh the API, each test is defined by:  \n  * network_file - description of the \"neural network\" supporting nnet and mps formats (using the extension to decdie on the format)  \n  * property_file - optional, constraint on the input and output variables  \n  * expected_result - sat/unsat  \n\nThe tests are divided into 5 levels to allow variability in running time, to add a new regression tests: \n  * add the description of the network and property to the _resources_ sub-folder \n  * add the test to: _regress/regressLEVEL/CMakeLists.txt_ (where LEVEL is within 0-5) \nIn each build we run unit_tests and system_tests, on pull request we run regression 0 & 1, in the future we will run other levels of regression weekly / monthly.Â \n\nAcknowledgments\n-----------------------------------------------------------------------------\n\nThe Marabou project is partially supported by grants from the Binational Science\nFoundation (2017662), the Defense Advanced Research Projects Agency\n(FA8750-18-C-0099), the Semiconductor Research Corporation (2019-AU-2898), the\nFederal Aviation Administration, Ford Motor Company, Intel Corporation, the\nIsrael Science Foundation (683/18), the National Science Foundation (1814369,\nDGE-1656518), Siemens Corporation, General Electric, and the Stanford CURIS program.\n\n\nMarabou is used in a number of flagship projects at [Stanford's AISafety\ncenter](http://aisafety.stanford.edu).\n\n\n\nPeople\n-----------------------------------------------------------------------------\n[Guy Katz](https://www.katz-lab.com/)\n\n[Clark Barrett](http://theory.stanford.edu/~barrett/)\n\n[Aleksandar Zeljic](https://profiles.stanford.edu/aleksandar-zeljic)\n\n[Ahmed Irfan](https://profiles.stanford.edu/ahmed-irfan)\n\n[Haoze Wu](http://www.haozewu.com/)\n\n[Christopher Lazarus](https://profiles.stanford.edu/christopher-lazarus-garcia)\n\n[Kyle Julian](https://www.linkedin.com/in/kyjulian) \n\n[Chelsea Sidrane](https://www.linkedin.com/in/chelseasidrane)\n\n[Parth Shah](https://www.linkedin.com/in/parthshah1995)\n\n[Shantanu Thakoor](https://in.linkedin.com/in/shantanu-thakoor-4b2630142) \n\n[Rachel Lim](https://rachellim.github.io/)\n\nDerek A. Huang \n\nDuligur Ibeling\n\nElazar Cohen\n\nBen Goldberger\n\nOmri Cohen\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NeuralNetworkVerification/Marabou",
    "keywords": "neural network,formal verification",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maraboupy-NeuralNetworkVerification",
    "package_url": "https://pypi.org/project/maraboupy-NeuralNetworkVerification/",
    "platform": "",
    "project_url": "https://pypi.org/project/maraboupy-NeuralNetworkVerification/",
    "project_urls": {
      "Homepage": "https://github.com/NeuralNetworkVerification/Marabou"
    },
    "release_url": "https://pypi.org/project/maraboupy-NeuralNetworkVerification/0.0.0/",
    "requires_dist": [
      "pybind11 (>=2.3.0)"
    ],
    "requires_python": ">=3.5",
    "summary": "Marabou Neural Network Verification Framework Python Interface",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9482050,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a758532c6ee7b57de22da8fdd78121ffd14c57de8fc7dd3512e57bca8765bc64",
          "md5": "09d1991e39a203114ff6b9d804fecb4c",
          "sha256": "107c89a25dccbe8cf3777cad8e8c6097450ca2110f40a6079fbe9e4641d71f92"
        },
        "downloads": -1,
        "filename": "maraboupy_NeuralNetworkVerification-0.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09d1991e39a203114ff6b9d804fecb4c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 72729,
        "upload_time": "2021-02-21T16:35:40",
        "upload_time_iso_8601": "2021-02-21T16:35:40.006616Z",
        "url": "https://files.pythonhosted.org/packages/a7/58/532c6ee7b57de22da8fdd78121ffd14c57de8fc7dd3512e57bca8765bc64/maraboupy_NeuralNetworkVerification-0.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a758532c6ee7b57de22da8fdd78121ffd14c57de8fc7dd3512e57bca8765bc64",
        "md5": "09d1991e39a203114ff6b9d804fecb4c",
        "sha256": "107c89a25dccbe8cf3777cad8e8c6097450ca2110f40a6079fbe9e4641d71f92"
      },
      "downloads": -1,
      "filename": "maraboupy_NeuralNetworkVerification-0.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09d1991e39a203114ff6b9d804fecb4c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 72729,
      "upload_time": "2021-02-21T16:35:40",
      "upload_time_iso_8601": "2021-02-21T16:35:40.006616Z",
      "url": "https://files.pythonhosted.org/packages/a7/58/532c6ee7b57de22da8fdd78121ffd14c57de8fc7dd3512e57bca8765bc64/maraboupy_NeuralNetworkVerification-0.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}