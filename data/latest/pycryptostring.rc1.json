{
  "info": {
    "author": "Jon Yoder",
    "author_email": "jon@yoder.cloud",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "# pycryptostring\n\nA text format for easily interacting with cryptographic hashes and keys\n\n## Description\n\nOne of the many challenges with working with encryption is that keys and hashes are arbitrary-looking binary blobs of data -- they have zero meaning to people just looking at them. They also lack context or any other descriptive information; a 256-bit BLAKE2B hash looks the same as a SHA256 hash, but Heaven help you if you get something mixed up.\n\nThe solution is to represent keys and hashes as text and pair an algorithm nametag with the text representation of the key or hash. For example, a sample 128-bit BLAKE2B hash in its binary form is represented in hex as `a6 30 2a b0 da ef 14 fb 9b 82 b9 69 3e 78 76 6b`. Without spaces, this is 32 characters. The same hash can be represented in CryptoString format as `BLAKE2B-128:rZ6h7+V2$mn}WG%K6rL(`.\n\nThe format consists of the prefix, a colon for the separator, and the Base85-encoded binary data. Base85 was chosen because of its higher efficiency and source. The prefix consists of up to 24 characters, which may be capital ASCII letters, numbers, or dashes. A colon is used to separate the prefix from the encoded data.\n\nThe official prefixes as of this writing are:\n\n- ED25519\n- CURVE25519\n- AES-128 / AES-256 / AES-384 / AES-512\n- SALSA20 / XSALSA20\n- SHA-256 / SHA-384 / SHA-512\n- SHA3-256 / SHA3-384 / SHA3-512\n- BLAKE2B-128 / BLAKE2B-256 / BLAKE2B-512\n- BLAKE3-128 / BLAKE3-256 / BLAKE3-512\n\n## Status\n\nThe module is production stable and in active use in combination with PyNaCl.\n\n## Usage\n\nRegular usage of a CryptoString mostly involves creating an instance from other data. The constructor can take a CryptoString-formatted string or a string prefix and some raw bytes. Once data has been put into the instance, getting it back out is just a matter of casting to a string, or calling `as_string()`, `as_bytes()`, or `as_raw()`. The last of these three methods only returns the raw data stored in the object.\n\n```python\nfrom pycryptostring import CryptoString, encode85\n\nkey = nacl.public.PrivateKey.generate()\nmy_public_key = CryptoString('CURVE25519', key.public_key.encode())\nmy_private_key = CryptoString('CURVE25519', key.encode())\n\nprint(f\"My new public key is {my_public_key}\")\n```\n\nThe methods `set()`, `set_raw()`, and `is_valid()` are also useful. The module also comes with a bare function `is_cryptostring()` which returns True if a string passed to it is CryptoString-formatted.\n\n## Building\n\nThis is a very simple module. Most people will just want to install it from pip. Extracting the tarball and running `python setup.py install` will get you going otherwise.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/darkwyrm/pycryptostring",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycryptostring",
    "package_url": "https://pypi.org/project/pycryptostring/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycryptostring/",
    "project_urls": {
      "Bug Tracker": "https://github.com/darkwyrm/pycryptostring/issues",
      "Homepage": "https://github.com/darkwyrm/pycryptostring"
    },
    "release_url": "https://pypi.org/project/pycryptostring/1.0.0/",
    "requires_dist": [
      "retval (>=1.0.0)"
    ],
    "requires_python": "",
    "summary": "A text format for easily interacting with cryptographic hashes and keys",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10511811,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0765b5becaed0a36d2039536e700aa10e73a026102bdcbb156b74e9309141cbc",
          "md5": "931881707df10a2d13b01667590ec313",
          "sha256": "8c7b2b23c58f744a6294c7f8512304d223ba5d2bac3995de07ac7eb3bc7b9c5c"
        },
        "downloads": -1,
        "filename": "pycryptostring-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "931881707df10a2d13b01667590ec313",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4745,
        "upload_time": "2021-05-30T14:51:03",
        "upload_time_iso_8601": "2021-05-30T14:51:03.494178Z",
        "url": "https://files.pythonhosted.org/packages/07/65/b5becaed0a36d2039536e700aa10e73a026102bdcbb156b74e9309141cbc/pycryptostring-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb0ca9769dd1ead74613bd4524d915810b8405084f11224d9a85dea684e7f341",
          "md5": "e2119eb4e23e1f51ad9ef49791c9c30f",
          "sha256": "e427bf18109dd9a0d704970fc6c3d160cf673f1b16c9b7778a57cd7febdb8788"
        },
        "downloads": -1,
        "filename": "pycryptostring-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2119eb4e23e1f51ad9ef49791c9c30f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4584,
        "upload_time": "2021-05-30T14:51:04",
        "upload_time_iso_8601": "2021-05-30T14:51:04.825808Z",
        "url": "https://files.pythonhosted.org/packages/cb/0c/a9769dd1ead74613bd4524d915810b8405084f11224d9a85dea684e7f341/pycryptostring-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0765b5becaed0a36d2039536e700aa10e73a026102bdcbb156b74e9309141cbc",
        "md5": "931881707df10a2d13b01667590ec313",
        "sha256": "8c7b2b23c58f744a6294c7f8512304d223ba5d2bac3995de07ac7eb3bc7b9c5c"
      },
      "downloads": -1,
      "filename": "pycryptostring-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "931881707df10a2d13b01667590ec313",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4745,
      "upload_time": "2021-05-30T14:51:03",
      "upload_time_iso_8601": "2021-05-30T14:51:03.494178Z",
      "url": "https://files.pythonhosted.org/packages/07/65/b5becaed0a36d2039536e700aa10e73a026102bdcbb156b74e9309141cbc/pycryptostring-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb0ca9769dd1ead74613bd4524d915810b8405084f11224d9a85dea684e7f341",
        "md5": "e2119eb4e23e1f51ad9ef49791c9c30f",
        "sha256": "e427bf18109dd9a0d704970fc6c3d160cf673f1b16c9b7778a57cd7febdb8788"
      },
      "downloads": -1,
      "filename": "pycryptostring-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e2119eb4e23e1f51ad9ef49791c9c30f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4584,
      "upload_time": "2021-05-30T14:51:04",
      "upload_time_iso_8601": "2021-05-30T14:51:04.825808Z",
      "url": "https://files.pythonhosted.org/packages/cb/0c/a9769dd1ead74613bd4524d915810b8405084f11224d9a85dea684e7f341/pycryptostring-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}