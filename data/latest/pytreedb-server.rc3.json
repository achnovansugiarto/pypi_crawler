{
  "info": {
    "author": "3DGeo Heidelberg",
    "author_email": "hoefle@uni-heidelberg.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pytreedb-Server\n\nThis package provides a webserver as a frontend to a `pytreedb` instance.\n\n<img src=\"https://github.com/3dgeo-heidelberg/pytreedb/blob/main/doc/_static/pytreedb_webserver_home.png?raw=true\" width=\"85%\">\n\n## Prerequisites\n- Python packages:\n  - `pytreedb`\n  - `flask`\n  - `dotenv`\n  \n## Deployment for local dev\n### Installation\nThe `pytreedb_server` package can be a) installed via PyPI, b) installed via pip from the git repo or c) used as a local directory.\n\na) \\[Recommended\\]: Run `python -m pip install pytreedb_server` in a prepared (e.g., conda) environment, which will also install `pytreedb`. You can then import `pytreedb_server` and `pytreedb` from anywhere.\n\nb) Clone the git repository, and change directory into the `webserver` dir. Then run `python -m pip install .`, which will take the local files to create a package, and copy it to the environment's `site-packages` directory. You  can then import `pytreedb_server` and `pytreedb` from anywhere.\n\nc) Clone the git repository, and change directory into the `webserver` dir. Run the commands to run the local webserver (see below) *from this directory*. You will need to provide the `PYTREEDB_LOCATION` parameter (see next subsection).\n\n### Setup using `.env`\nWe use the `dotenv` package to configure the server. Both `pytreedb` and `flask` parameters should be written to\nthe `.env`-File in the current directory: \n```\n# path of the pytreedb package (if not installed via PIP)\nPYTREEDB_LOCATION=\"../pytreedb\"\n# local filename for database file\nPYTREEDB_FILENAME=\"syssifoss.db\"\n# if set, download (and overwrite local file) data from this URL\nPYTREEDB_DOWNLOAD=\"https://github.com/3dgeo-heidelberg/pytreedb/raw/main/data/test/geojsons.zip\"\n# connection string to mongodb (e.g. 127.0.0.1, or \"mongodb+srv://...\" if using MongoDB Cloud)\nCONN_URI = \"\"\n# database name to connect to\nCONN_DB = \"\"\n# collection to connect to\nCONN_COL = \"\"\n# FLASK settings\n\nFLASK_RUN_HOST=\"0.0.0.0\"\nFLASK_RUN_PORT=\"5001\"\n```\n\n### Configuring pytreedb dataset\nThe dataset is not a prerequisite. Please follow the instructions after getting Flask to running on your machine.\n\n\n### Serve the webserver locally\nUnder the webserver folder, run:\n\n```\nconda activate pytreedb\npython -m pytreedb_server\n```\n\n## Deployment for production\nNote that Flask is not suitable for production. However, it is possible to use the package *as-is* in Apache WGSI, following these steps:\n\n1) Install `mod_wsgi` **in the conda environment used for the server**. In the following, it is assumed that the environment is called `pytreedb`.\n```\nconda create -n pytreedb python=3.8\nconda activate pytreedb\nconda install mod_wsgi -c conda-forge -y\npython -m pip install python-dotenv pandas pymongo[srv]\n```\n\n2) Install `pytreedb_server` from pip:\n```\npython -m pip install pytreedb_server\n```\n\n3) Get the path to the WSGI library:\n```\nmod_wsgi-express module-config\n```\n\nThis e.g. gives\n```\nLoadModule wsgi_module \"/opt/miniconda3/envs/pytreedb/lib/python3.9/site-packages/mod_wsgi/server/mod_wsgi-py39.cpython-39-x86_64-linux-gnu.so\"\nWSGIPythonHome \"/opt/miniconda3/envs/pytreedb\"\n```\n\n4) Create/edit the apache server configuration. Here, we will overwrite the default configuration. Edit the file `/etc/apache2/sites-enabled/000-default.conf` with a text editor of your choice (`vim`, `nano`) as `root`, and insert these lines.\nBe sure to adapt all the paths related to your `conda` installation and the location where you want to have your database placed (in this example: `/var/www/pytreedb`)\n```\nWSGIPythonHome \"/opt/miniconda3/envs/pytreedb\"\nLoadModule wsgi_module \"/opt/miniconda3/envs/pytreedb/lib/python3.8/site-packages/mod_wsgi/server/mod_wsgi-py38.cpython-38-x86_64-linux-gnu.so\"\n\n<VirtualHost *:80>\n    ServerAdmin webmaster@localhost\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    WSGIDaemonProcess pytreedb python-path=/opt/miniconda3/envs/pytreedb/lib/python3.8/site-packages home=/var/www/pytreedb/webserver\n    WSGIScriptAlias / /var/www/pytreedb/pytreedb_server.wsgi\n\n    <Directory /var/www/pytreedb/>\n        WSGIProcessGroup pytreedb\n        WSGIApplicationGroup %{GLOBAL}\n        Order deny,allow\n        Allow from all\n    </Directory>\n</VirtualHost>\n```\n\n5) Create a new file `/var/www/pytreedb/pytreedb_server.wsgi` (adapt paths as required) and add the following line:\n```\nfrom pytreedb_server.__main__ import app as application\n```\nIf you have not installed `pytreedb` and `pytreedb_server` via pip, you need to add the paths to the installations prior:\n```\nimport sys\nsys.path.insert(0, '/var/www/pytreedb/webserver/')\nsys.path.insert(0, '/var/www/pytreedb/')\nfrom pytreedb_server.__main__ import app as application\n```\n\n6) Create a new environment file `/var/www/pytreedb/webserver/.env` and fill out the following parameters:\n```\nCONN_URI = \"\"\nCONN_DB = \"\"\nCONN_COL = \"\"\n\nPYTREEDB_FILENAME=\"/var/www/pytreedb/syssifoss.db\"\nPYTREEDB_DOWNLOAD=\"\"\n```\nSee the above section for details on the parameters. The `PYTREEDB_FILENAME` needs to be writable by the web user (typically `www-data`). When running for the first time, it might be neccessary to download data using `PYTREEDB_DOWNLOAD`. \n\n7) Restart apache and check the status:\n```\nsudo systemctl restart apache2\nsystemctl status apache2.service\n```\n\n8) Navigate to http://127.0.0.1/ and check if everything works as expected.\n\nIn case of any changes (e.g. in the `.env`-File), reload apache2 as in step 7. If you used the `PYTREEDB_DOWNLOAD`, make sure to remove it again **and** reload the server, otherwise the database will be downloaded with every http request.\n\nSee https://flask.palletsprojects.com/en/2.0.x/deploying/ for other deployment options.\n\n\n## Usage\nIn the \"Get tree by index\" search box, you can directly search for a tree according to its index.\n\nIn the \"Search the DB\" area, we predefined following filters:\n\n| Filter  | Corresponding fields|\n| ------- |-------------|\n| Species | properties.species |\n| Mode    | properties.data.mode |\n| Canopy  | properties.data.canopy_condition |\n| Quality | properties.data.quality |\n| Source  | properties.measurements.source |\n| DBH     | properties.measurements.DBH_cm |\n| Height  | properties.measurements.height_m |\n| CrownDia. | properties.measurements.mean_crown_diameter_m |\n\nThe filters have the default logic operator AND. You can toggle it between AND/OR by clicking on the preceding button of each filter.\n\nWe also allow brackets with a depth of 3. By moving a filter to the right, a bracket will be added to embrace the previous filter with the current filter. If you are still unfamiliar to our search interface and not sure if you are configuring the search correctly, just press \"Update Preview\" button to check if it aligns to your desired query.\n\nYou can export your query as a Json file to save to local, and import such a query for future use. Clicking on the \"Permalink\" button will also copy a link to your current query.\n\n\n## API\n\nYou can access the API of our example server http://pytreedb.geog.uni-heidelberg.de/ with the following key presented in the QR code:\n\n<img src=\"pytreedb_server/static/img/QR.png\"/>\n\nScan the QR code and save the key. Set the X-Api-Key value with the key in your request header, otherwise your request would not be authorized. \n\nIf you are using curl:\n```\ncurl -v -H \"X-Api-Key:{api key here}\" {URL here}\n```\n\nIf you are using API platforms, for example Postman, select \"API Key\" from the authorization types, and set the key name to \"X-Api-Key\".\n\n\nGET methods:\n\n| Request  | Description |\n| ------- |-------------|\n| /stats | The number of trees and species in DB |\n| /listspecies | Unique species names in DB |\n| /sharedproperties | A list of all object.properties that are shared among all objects |\n| /getitem/\\<index> | Get a specific tree by its index |\n| /download/exportcollection/\\<query> | Generate a feature collection of all trees from query results |\n| /download/lazlinks/tree/\\<index> | Get a list of point-cloud-URLs for a tree by its index |\n| /download/lazlinks/\\<query> | Get a list of point-cloud-URLs for all trees from query results |\n| /download/exportcsv/\\<query> | Get csv files containing information of all trees from query results |\n\n\nPOST methods:\n\n| Request  | Description | Example Message|\n| ------- |-------------|-------------|\n| /search | Search based on a given query. Returns a Json objects containing search results |  {\"properties.species\": \"Abies alba\"} |\n| /search/wssearch | This endpoint is created only for search requests from the frontend UI in order to improve site performance |  {\"properties.species\": \"Abies alba\", \"limit\": 10, \"nthEntrySet\": 3, \"getCoords\": false} |\n\nNote: all \\<query> parameters in GET methods should be encoded with base64.\n\nSee [example_queries](https://github.com/3dgeo-heidelberg/pytreedb/blob/main/examples/example_queries.py) for more examples on how to query.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "(L)GPL License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytreedb-server",
    "package_url": "https://pypi.org/project/pytreedb-server/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytreedb-server/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pytreedb-server/1.0.0.post2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "server for providing API access to pytreedb",
    "version": "1.0.0.post2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16726765,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58aa995b2b8305f084b7401b70a88e7d72045ab39a708510d625c11ae7ca6856",
          "md5": "5dadfa46afcafeb1eb7ac60c22b46902",
          "sha256": "fe7425b547ce7cac963dc2980706f36bfe86f9eb705cc51c97ee1ef179d1ceed"
        },
        "downloads": -1,
        "filename": "pytreedb_server-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5dadfa46afcafeb1eb7ac60c22b46902",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 477280,
        "upload_time": "2023-01-19T13:32:28",
        "upload_time_iso_8601": "2023-01-19T13:32:28.709416Z",
        "url": "https://files.pythonhosted.org/packages/58/aa/995b2b8305f084b7401b70a88e7d72045ab39a708510d625c11ae7ca6856/pytreedb_server-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a48b2eef9acad8ead6d93b1f7939f30a645b01e766bd8f3c1465ca55754268e",
          "md5": "3081c55d0e7fa5facacd1c9642c9a269",
          "sha256": "755ed51c8d68e617fcb18d722b30da2cf1c38a9fb831b1220eb171d2af48f9cf"
        },
        "downloads": -1,
        "filename": "pytreedb_server-1.0.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "3081c55d0e7fa5facacd1c9642c9a269",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 477332,
        "upload_time": "2023-01-20T22:19:51",
        "upload_time_iso_8601": "2023-01-20T22:19:51.858493Z",
        "url": "https://files.pythonhosted.org/packages/4a/48/b2eef9acad8ead6d93b1f7939f30a645b01e766bd8f3c1465ca55754268e/pytreedb_server-1.0.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbe732301db244aa528791d97793a24325825a2838a728d72f108da73c87a306",
          "md5": "17023553349cd8758c7733f1ae84b603",
          "sha256": "58b262d1249ae4648e6c5c808fb337e52023945c7d3315ce3bbc7ab8e89a8071"
        },
        "downloads": -1,
        "filename": "pytreedb_server-1.0.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "17023553349cd8758c7733f1ae84b603",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 477376,
        "upload_time": "2023-02-07T12:30:49",
        "upload_time_iso_8601": "2023-02-07T12:30:49.765114Z",
        "url": "https://files.pythonhosted.org/packages/bb/e7/32301db244aa528791d97793a24325825a2838a728d72f108da73c87a306/pytreedb_server-1.0.0.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbe732301db244aa528791d97793a24325825a2838a728d72f108da73c87a306",
        "md5": "17023553349cd8758c7733f1ae84b603",
        "sha256": "58b262d1249ae4648e6c5c808fb337e52023945c7d3315ce3bbc7ab8e89a8071"
      },
      "downloads": -1,
      "filename": "pytreedb_server-1.0.0.post2.tar.gz",
      "has_sig": false,
      "md5_digest": "17023553349cd8758c7733f1ae84b603",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 477376,
      "upload_time": "2023-02-07T12:30:49",
      "upload_time_iso_8601": "2023-02-07T12:30:49.765114Z",
      "url": "https://files.pythonhosted.org/packages/bb/e7/32301db244aa528791d97793a24325825a2838a728d72f108da73c87a306/pytreedb_server-1.0.0.post2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}