{
  "info": {
    "author": "pyprg",
    "author_email": "pyprg@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# egrid\r\n\r\n## Purpose\r\n\r\nModel of a balanced electric distribution network for experimental power flow\r\ncalculation and state estimation. Instances of Model can be the input for\r\n(a variety of) power flow calculation or estimation algorithms. They\r\nprovide an easy to use structure for calculating current and power flow\r\nthrough lines and into consumers (using an additional voltage vector which\r\nis the result of a power-flow-calculation).\r\n\r\nFunction **make_model(\\*args)** creates an instance of Model from  arguments\r\nof type\r\n\r\n    - Slacknode\r\n    - Branch (line, series capacitor, transformer winding, transformer, \r\n      closed switch)\r\n    - Injection (consumer, shunt capacitor, PQ/PV-generator, battery)\r\n    - Branchtaps\r\n    - Output (indicates that measured flow (I, P or Q) or a part thereof \r\n      flows through the referenced terminal (device or node+device))\r\n    - PValue (measured active power)\r\n    - QValue (measured reactive power)\r\n    - IValue (measured electric current)\r\n    - Vvalue (measured voltage or setpoint)\r\n    - Defk (definition of a scaling factor, for estimation)\r\n    - Link (associates a scaling factor to a load)\r\n\r\nincluding tuples, lists and iterables thereof (for a power-flow-calculation\r\njust Slacknode ... Branchtaps are necessary).\r\nAdditionally, __make_model__ can consume network descriptions as multiline\r\nstrings if package 'graphparser' is installed. This method is intended to\r\ninput very small electric networks using a text editor.\r\n\r\nMost fields of Model instances provide pandas.DataFrame instances. Electric\r\nvalues are stored per unit. Branch models are PI-equivalent circuits. Active\r\nand reactive power of injections have a dedicated voltage exponent.\r\n\r\n## Details of egrid.model.Model\r\n\r\nFields of egrid.model.Model\r\n---------------------------\r\nnodes: pandas.DataFrame (id of node)\r\n\r\n    * .idx, int index of node\r\n\r\nslacks: pandas.DataFrame\r\n\r\n    * .id_of_node, str, id of connection node\r\n    * .V, complex, given voltage at this slack\r\n    * .index_of_node, int, index of connection node\r\n\r\ninjections: pandas.DataFrame\r\n\r\n    * .id, str, unique identifier of injection\r\n    * .id_of_node, str, unique identifier of connected node\r\n    * .P10, float, active power at voltage magnitude 1.0 pu\r\n    * .Q10, float, reactive power at voltage magnitude 1.0 pu\r\n    * .Exp_v_p, float, voltage dependency exponent of active power\r\n    * .Exp_v_q, float, voltage dependency exponent of reactive power\r\n    * .index_of_node, int, index of connected node\r\n\r\nbranchterminals: pandas.DataFrame\r\n\r\n    * .index_of_branch, int, index of branch\r\n    * .id_of_branch, str, unique idendifier of branch\r\n    * .id_of_node, str, unique identifier of connected node\r\n    * .id_of_other_node, str, unique identifier of node connected\r\n       at other side of the branch\r\n    * .index_of_node, int, index of connected node\r\n    * .index_of_other_node, int, index of node connected at other side\r\n       of the branch\r\n    * .y_lo, complex, longitudinal branch admittance\r\n    * .y_tr_half, complex, half of transversal branch admittance\r\n    * .g_lo, float, longitudinal conductance\r\n    * .b_lo, float, longitudinal susceptance\r\n    * .g_tr_half, float, transversal conductance of branch devided by 2\r\n    * .b_tr_half, float, transversal susceptance of branch devided by 2\r\n    * .side, str, 'A' | 'B', side of branch, first or second\r\n\r\nbranchoutputs: pandas.DataFrame\r\n\r\n    * .id_of_batch, str, unique identifier of measurement batch\r\n    * .id_of_node, str, id of node connected to branch terminal\r\n    * .id_of_branch, str, unique identifier of branch\r\n    * .index_of_node, int, index of node connected to branch terminal\r\n    * .index_of_branch, int, index of branch\r\n\r\ninjectionoutputs: pandas.DataFrame\r\n\r\n    * .id_of_batch, str, unique identifier of measurement batch\r\n    * .id_of_injection, str, unique identifier of injection\r\n    * .index_of_injection, str, index of injection\r\n\r\npvalues: pandas.DataFrame\r\n\r\n    * .id_of_batch, str, unique identifier of measurement batch\r\n    * .P, float, active power\r\n    * .direction, float, -1: from device into node, 1: from node into device\r\n\r\nqvalues: pandas.DataFrame\r\n\r\n    * .id_of_batch, str, unique identifier of measurement batch\r\n    * .Q, float, reactive power\r\n    * .direction, float, -1: from device into node, 1: from node into device\r\n\r\nivalues: pandas.DataFrame\r\n\r\n    * .id_of_batch, str, unique identifier of measurement batch\r\n    * .I, float, electric current\r\n\r\nvvalues: pandas.DataFrame\r\n\r\n    * .id_of_node, str, unique identifier of node voltage is given for\r\n    * .V, float, magnitude of voltage\r\n    * .index_of_node, index of node voltage is given for\r\n\r\nbranchtaps: pandas.DataFrame\r\n\r\n    * .id, str, IDs of taps\r\n    * .id_of_node, str, ID of associated node\r\n    * .id_of_branch, str, ID of associated branch\r\n    * .Vstep, float, magnitude of voltage difference per step, pu\r\n    * .positionmin, int, smallest tap position\r\n    * .positionneutral, int, tap with ratio 1:1\r\n    * .positionmax, int, position of greates tap\r\n    * .position, int, actual position\r\n\r\nshape_of_Y: tuple (int, int)\r\n\r\n    shape of admittance matrix for power flow calculation\r\n\r\ncount_of_slacks: int\r\n\r\n    count_of_slacks\r\n\r\nload_scaling_factors: pandas.DataFrame (index: 'step','id')\r\n\r\n    * .type, 'var'|'const', type of factor decision variable or parameter\r\n    * .id_of_source, str, id of scaling factor (previous optimization step)\r\n       for initialization\r\n    * .value, float, used by initialization if no source factor in previous\r\n       optimization step\r\n    * .min, float\r\n       smallest possible value\r\n    * .max, float\r\n       greatest possible value\r\n\r\nmnodeinj: scipy.sparse.csc_matrix\r\n\r\n    converts a vector ordered according to injection indices to a vector\r\n    ordered according to power flow calculation nodes (adding values of\r\n    injections for each node) by calculating 'mnodeinj @ vector'\r\n\r\ninjection_factor_associations: pandas.DataFrame (index: 'step','injid','part')\r\n\r\n    * .id, str, unique identifier of scaling factor\r\n\r\nmessages: pandas.DataFrame\r\n\r\n    * .message, str, message on reason of error\r\n    * .level, int, 0 - information, 1 - warning. 2 - error\r\n\r\n## Making a Model\r\n\r\nFunction **model_from_frames** consumes a dictionary of\r\npandas.DataFrames. **model_from_frames** aggregates nodes connected without\r\nimpedance, creates indices, arranges data per branch-terminal from branch-data,\r\ncalculates values of branches from admittances.\r\n\r\nFunction make_model generates a model from network device objects defined\r\nin **egrid.builder**.\r\n\r\n\r\nExample - 3 nodes, 2 lines, 1 consumer:\r\n```\r\nnode: 0               1               2\r\n\r\n      |      line     |     line      |\r\n      +-----=====-----+-----=====-----+\r\n      |               |               |\r\n                                     \\|/ consumer\r\n```\r\n\r\nPython code for example, suitable input for function **egrid.make_model**\r\n(Branchtap is for demo only, it is used with transformers,\r\nhowever, transformers/transformerwindings are modeled using class Branch too.):\r\n```\r\nfrom egrid.builder import (\r\n    Slacknode, PValue, QValue, IValue, Output, Branch, Branchtaps, \r\n    Injection, Defk, Link)\r\n\r\nexample = [\r\n    Slacknode(id_of_node='n_0', V=1.+0.j),\r\n    PValue(\r\n        id_of_batch='pq_line_0',\r\n        P=30.),\r\n    QValue(\r\n        id_of_batch='pq_line_0',\r\n        Q=8.),\r\n    Output(\r\n        id_of_batch='pq_line_0',\r\n        id_of_node='n_0',\r\n        id_of_device='line_0'),\r\n    IValue(\r\n        id_of_batch='i_line_0',\r\n        I=40.0),\r\n    Output(\r\n        id_of_batch='i_line_0',\r\n        id_of_node='n_0',\r\n        id_of_device='line_0'),\r\n    Branch(\r\n        id='line_0',\r\n        id_of_node_A='n_0',\r\n        id_of_node_B='n_1',\r\n        y_lo=1e3-1e3j,\r\n        y_tr=1e-6+1e-6j),\r\n    Branchtaps(\r\n        id='taps_0',\r\n        id_of_node='n_0',\r\n        id_of_branch='line_0',\r\n        Vstep=.2/33,\r\n        positionmin=-16,\r\n        positionneutral=0,\r\n        positionmax=16,\r\n        position=0),\r\n    Branch(\r\n        id='line_1',\r\n        id_of_node_A='n_1',\r\n        id_of_node_B='n_2',\r\n        y_lo=1e3-1e3j,\r\n        y_tr=1e-6+1e-6j),\r\n    Output(\r\n        id_of_batch='pq_consumer_0',\r\n        id_of_device='consumer_0'),\r\n    Output(\r\n        id_of_batch='i_consumer_0',\r\n        id_of_device='consumer_0'),\r\n    Injection(\r\n        id='consumer_0',\r\n        id_of_node='n_2',\r\n        P10=30.0,\r\n        Q10=10.0,\r\n        Exp_v_p=2.0,\r\n        Exp_v_q=2.0),\r\n    Defk(step=(0, 1, 2), id=('kp', 'kq')),\r\n    Link(step=(0, 1, 2), objid='consumer_0', part='pq', id=('kp', 'kq'))]\r\n```\r\n\r\nValid input to **make_model** is a multiline pseudo graphic string e.g.\r\nthis one:\r\n```\r\n               y_tr=1e-6+1e-6j                 y_tr=1e-6+1e-6j\r\nslack=True     y_lo=1e3-1e3j                   y_lo=1e3-1e3j\r\nn0(---------- line_0 ----------)n1(---------- line_1 ----------)n2\r\n                                |                               |\r\n                                n1->> load0_1_        _load1 <<-n2->> load1_1_\r\n                                |      P10=30.0         P10=20.7       P10=4.3\r\n                                |      Q10=5            Q10=5.7        Q10=2\r\n                                |\r\n                                |              y_lo=1e3-1e3j\r\n                                |              y_tr=1e-6+1e-6j\r\n                                n1(---------- line_2 ----------)n3\r\n                                                                |\r\n                                                      _load2 <<-n3->> load2_1_\r\n                                                        P10=20.7       P10=20\r\n                                                        Q10=5.7        Q10=5.7\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pyprg/egrid",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "egrid",
    "package_url": "https://pypi.org/project/egrid/",
    "platform": null,
    "project_url": "https://pypi.org/project/egrid/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pyprg/egrid/issues",
      "Homepage": "https://github.com/pyprg/egrid"
    },
    "release_url": "https://pypi.org/project/egrid/0.0.4/",
    "requires_dist": [
      "graphparser (==0.8.2)",
      "networkx (==2.6.4a0)",
      "numpy (==1.22.3)",
      "pandas (==1.4.0)",
      "scipy (==1.8.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Model of an electric distribution network for calculation",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17197888,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc1b2753a432ef9118ec0104b21a7a317d7077a3bbe45ddf1093e88467c64ba",
          "md5": "c11f7d2d5da5225a9537b8453b16857e",
          "sha256": "d3e6aac9f4c675abe2f6fdfed2772ebfc13bbad36ddc1fc4054ea51bbde7143e"
        },
        "downloads": -1,
        "filename": "egrid-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c11f7d2d5da5225a9537b8453b16857e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26441,
        "upload_time": "2022-02-02T00:03:17",
        "upload_time_iso_8601": "2022-02-02T00:03:17.596986Z",
        "url": "https://files.pythonhosted.org/packages/3b/c1/b2753a432ef9118ec0104b21a7a317d7077a3bbe45ddf1093e88467c64ba/egrid-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23ad367a67581ac112594b6811df7c5cd285e54bbfd93b930697b0a437602a6d",
          "md5": "b50906ea1e7de65a4d529d7c7d9a8375",
          "sha256": "1611740fb7624818be6fd99fc0b9cc9092e4ee91c339319e2eb17ffe0b3f465e"
        },
        "downloads": -1,
        "filename": "egrid-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b50906ea1e7de65a4d529d7c7d9a8375",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25245,
        "upload_time": "2022-02-02T00:03:18",
        "upload_time_iso_8601": "2022-02-02T00:03:18.716886Z",
        "url": "https://files.pythonhosted.org/packages/23/ad/367a67581ac112594b6811df7c5cd285e54bbfd93b930697b0a437602a6d/egrid-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d70a1022d6db457bbed97c45ee260a1f8f61a9f9e7015f75c385d0321e29d10a",
          "md5": "96153febacbc0787145724bbcb73a9aa",
          "sha256": "3b18c554432d38a4218a443b79a9edfb8b9f93891e5da464ca7d3818e4e30824"
        },
        "downloads": -1,
        "filename": "egrid-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96153febacbc0787145724bbcb73a9aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37874,
        "upload_time": "2023-03-07T23:55:36",
        "upload_time_iso_8601": "2023-03-07T23:55:36.752165Z",
        "url": "https://files.pythonhosted.org/packages/d7/0a/1022d6db457bbed97c45ee260a1f8f61a9f9e7015f75c385d0321e29d10a/egrid-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a4657eecd630b1aa9430b3f4850c7bc50a2199cd1715ff9c1cc71be2bee37a2",
          "md5": "4cd0073aaf9397f778721ea44ba0949a",
          "sha256": "1d7b56c5515dacecbdba4446ad93d3821bc3ca01b89bd387a120ec444c4fbcb5"
        },
        "downloads": -1,
        "filename": "egrid-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4cd0073aaf9397f778721ea44ba0949a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36537,
        "upload_time": "2023-03-07T23:55:38",
        "upload_time_iso_8601": "2023-03-07T23:55:38.405439Z",
        "url": "https://files.pythonhosted.org/packages/8a/46/57eecd630b1aa9430b3f4850c7bc50a2199cd1715ff9c1cc71be2bee37a2/egrid-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d70a1022d6db457bbed97c45ee260a1f8f61a9f9e7015f75c385d0321e29d10a",
        "md5": "96153febacbc0787145724bbcb73a9aa",
        "sha256": "3b18c554432d38a4218a443b79a9edfb8b9f93891e5da464ca7d3818e4e30824"
      },
      "downloads": -1,
      "filename": "egrid-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96153febacbc0787145724bbcb73a9aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 37874,
      "upload_time": "2023-03-07T23:55:36",
      "upload_time_iso_8601": "2023-03-07T23:55:36.752165Z",
      "url": "https://files.pythonhosted.org/packages/d7/0a/1022d6db457bbed97c45ee260a1f8f61a9f9e7015f75c385d0321e29d10a/egrid-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a4657eecd630b1aa9430b3f4850c7bc50a2199cd1715ff9c1cc71be2bee37a2",
        "md5": "4cd0073aaf9397f778721ea44ba0949a",
        "sha256": "1d7b56c5515dacecbdba4446ad93d3821bc3ca01b89bd387a120ec444c4fbcb5"
      },
      "downloads": -1,
      "filename": "egrid-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4cd0073aaf9397f778721ea44ba0949a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 36537,
      "upload_time": "2023-03-07T23:55:38",
      "upload_time_iso_8601": "2023-03-07T23:55:38.405439Z",
      "url": "https://files.pythonhosted.org/packages/8a/46/57eecd630b1aa9430b3f4850c7bc50a2199cd1715ff9c1cc71be2bee37a2/egrid-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}