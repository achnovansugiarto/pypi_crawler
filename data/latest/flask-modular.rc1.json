{
  "info": {
    "author": "Michael de Villiers",
    "author_email": "michael@devilears.co.za",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# flask-modular\n\nA simple way to create modular and extensible apps based on the Flask framework\nwith full access the ecosystem of Flask extensions.\n\n## Why not just use a blueprint?\n\nModules are more extensible than the existing Flask blueprints, and allow\nmodules to be hot-loaded, load from a configuration file and for code to be\nexecuted on load, for instance, to initialize another Flask extension. And it's\nall wrapped in a nice simple system with helpers and dependencies.\n\n## Getting Started\n\nIt's as simple as:\n\n```python\nfrom flask import Flask\nfrom flask_modular import ModuleManager\n\napp = Flask(__name__)\n\nmanager = ModuleManager(app)\nmanager.load_modules()\n```\n\nAlternatively, you can initialize the manager on one or more applications \nusing the `init_app` method:\n\n```python\nmanager = ModuleManager()\nmanager.init_app(app)\n```\n\n## Entrypoint\n\nIn your `<module>/__init__.py` or `<module>.py` there should be a function\ncalled `init_app` which takes a the `app` as it's sole parameter, that\nthen will do all the work of initializing your module:\n\n```python\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom .controllers import model_controller\nfrom .models import User\n\ndb = SQLAlchemy()\n\ndef init_app(app):\n    db.init_app(app)\n    db.create_all([User])\n    \n    app.register_blueprint(model_controller)\n```\n\nThis gives you all sorts of flexibility on what your module can do to your \napplication once loaded without adding too many hard to remember custom\nhooks, methods and classes that do the same thing.\n\n## Dependencies\n\nModules can have dependencies, they will be automatically loaded before the\nmodule is loaded (and will be loaded if not specified). Useful for having a \ngeneric module that initializes some extension and some that then use that\nextension, or to extend an existing module:\n\n```python\n__depends__ = ['core', 'db']\n```\n\n## Configuration\n\nConfiguration is rather simple:\n\n| Key               | Description                                           |\n| ----------------- | ----------------------------------------------------- |\n| `MODULES_PATH`    | The path to load custom modules from                  |\n| `MODULES_TO_LOAD` | A list of modules to load when calling `load_modules` |\n\n## License\n\nLicensed under the [MIT License](./LICENSE.txt).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cour4g3/flask-modular",
    "keywords": "flask,modular,module,modules",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-modular",
    "package_url": "https://pypi.org/project/flask-modular/",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-modular/",
    "project_urls": {
      "Bug Tracker": "https://github.com/cour4g3/flask-modular/issues",
      "Homepage": "https://github.com/cour4g3/flask-modular"
    },
    "release_url": "https://pypi.org/project/flask-modular/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Create modular and extensible Flask applications",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9899273,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a55370479c688a3e2c9fed26a39db83c4364866f3c61c2fb6c2519a2d8891dd",
          "md5": "91a8017c0ed3d66ac970e2615b15bb35",
          "sha256": "6b0105c1e7ff683ea6fb3bcf503b6f2a01dc430c1ecb3b7f4e3f87d0e0ca2923"
        },
        "downloads": -1,
        "filename": "flask-modular-1.0.0.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "91a8017c0ed3d66ac970e2615b15bb35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2305,
        "upload_time": "2021-03-27T14:42:44",
        "upload_time_iso_8601": "2021-03-27T14:42:44.133828Z",
        "url": "https://files.pythonhosted.org/packages/8a/55/370479c688a3e2c9fed26a39db83c4364866f3c61c2fb6c2519a2d8891dd/flask-modular-1.0.0.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a55370479c688a3e2c9fed26a39db83c4364866f3c61c2fb6c2519a2d8891dd",
        "md5": "91a8017c0ed3d66ac970e2615b15bb35",
        "sha256": "6b0105c1e7ff683ea6fb3bcf503b6f2a01dc430c1ecb3b7f4e3f87d0e0ca2923"
      },
      "downloads": -1,
      "filename": "flask-modular-1.0.0.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "91a8017c0ed3d66ac970e2615b15bb35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2305,
      "upload_time": "2021-03-27T14:42:44",
      "upload_time_iso_8601": "2021-03-27T14:42:44.133828Z",
      "url": "https://files.pythonhosted.org/packages/8a/55/370479c688a3e2c9fed26a39db83c4364866f3c61c2fb6c2519a2d8891dd/flask-modular-1.0.0.linux-x86_64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}