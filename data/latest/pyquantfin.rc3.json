{
  "info": {
    "author": "mortalm",
    "author_email": "mortalm@sina.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "****\n# nav_calc\n****\nIt is a lib for backtesting.\n\n## multi_assets\n\n\nThis function is used to test strategies involving mutliple assets, like multi-factors model.\n\n### params:\n\n- prz: dataframe, index = dates, columns = stocks\n\n- w_tar: dataframe, target weight, index = dates, columns = stocks\n\nIt is worthwhile to note that the dates in w_tar does not need to be the same as the dates in prz, it can be a subset of the dates in prz.\n\n- dates_reb: array, rebalance dates\n\nIf you want to balance at every w_tar's dates, set dates_reb to w_tar.index\n\n- fee: fee rate, default = 0\n\n### return a dataframe\n\nIt has the following columns:\n\n- reb: 1 indicate it is a rebalance date, 0 for not a rebalance date\n\n- ret_gross: return before fee\n\n- fee: fees to substract from ret_gross\n\n- ret_net: return after fee\n\n- nav: net asset value of the strategy\n\n\n## time_series\n\nThis function is used to test timing strategies, like CTA strategies. \n\n### params:\n\n- prz: array\n\n- pos: array, indicate the strategy's position\n\nIt must be the same size with prz\n\n- fee: fee rate, default 0\n\n- ret_ext: whether to return the extended information; if False(default), return an array which represents the nav of the strategy; if True, return a DataFrame(see below)\n\n### return a dataframe \n\n**(ret_ext = True)**\n\nIt has the following columns:\n\n- price: the price of the underlying asset\n\n- position: the strategy's position\n\n- return: pct_change of the price\n\n- value: position * price\n\n- fee: trading fees\n\n- strategy_return_before_fee:\n\n- strategy_return: post-fee return\n\n- nav: nav of the strategy (post_fee)\n\n- nav_before_fee: \n\n- nav_price: the normalized price\n\n****\n\n# nav_analysis\n****\nIt is a lib for analysis nav (which maybe from nav_calc).\n\n## calc_mdd\n\nFunction to calculate max drawdown\n\n### params\n\n- arr: an array that represents nav or price\n\n### return a dict\n\nThe dict has the following keys:\n\n- mdd_value: the max drawdown in value\n\n- mdd_pct: the max drawdown in percentage\n\n\n## calc_ann_ret\n\nFunction to calculate the annualized return, assuming daily data.\n\n### parmas\n\n- arr: an array that represents nav or price\n\n### return a value\n\n- annualized return\n\n\n## stats\n\nFunction to return both ret and mdd\n\n### params\n\n- arr: an array that represents nav or price\n\n### return a dict which has the following keys\n\n- ret: the total return (not annualized return)\n\n- mdd: the max drawdown in percentage\n\n## stats_yearly\n\n### params\n\n- s: a series that represents nav or price\n\nThe index of s should be date and must be in the form like \"20181010\".\n\n### return a dataframe which has the following columns:\n\n- ret: the total return (not annualized return)\n\n- mdd: the max drawdown in percentage\n\nThe index of the dataframe is 'year'.\n\n## stats_yearly_multi_assets\n\n### params\n\n- df: a dataframe whose each column represents a nav of an asset or strategy.\n\n### return a dataframe which has two-level columns\n\nLevel I: the asset or strategy\n\nLevel II: ret and mdd, the same meaning as in stats_yearly\n\n****\n# general\n****\n## to_db_code\n\n### params\n- ts_code: security code like '600000.SH'\n\n### return\n- db_code: code format in database like 'SH_600000'\n\n### example\n- to_db_code('600000.SH') returns 'SH_600000'\n\n## to_ts_code\n### params:\n- db_code: code format in database like 'SH_600000'\n\n### return:\n- ts_code: security code like '600000.SH'\n\n### example:\n- to_ts_code('SH_600000') returns '600000.SH'\n\n## real_round_2\nprecise round to 0.01  (用于计算涨跌停价)\n\n### param\n- a number\n\n### return \n- number rounded\n\n### example\n-read_round_2(5.347) returns 5.35\n\n## check_df_struct\ncheck if two dataframe have identical struct: same shape, same index and same columns\n\n### params\n- df1, df2\n\n### return\n- True if the two dataframe have the same shape, same index and same columns, else False\n\n### example\ncheck_df_struct(df1, df2)\n\n****\n# utils\n****\n## grouping1d\nassign groupid to an array, used to group stocks according a factor\n\n### params\n- arr: the factor array\n- nog: number of group\n- ST = 999: the number need to be specially treated\n\n### return\nan array that contained groupid, nan will be assigned to the 0 group, ST will be assigned to the -1 group\n\n### example\ngrouping1d(np.arange(100),5)\n\n## get_clean_factor_and_forward_returns\n\n### param\n\n- factor: a mult-index series with index = ['date', 'asset'], value = factor value\n\n- prices: a dataframe with index = daily dates and columns = the universe of stocks interested\n\n- bins = 5: number of group (use bins as the variable name in order to be consistence with alphalens)\n\n- periods = (20,60): the holding periods to be tested\n\n### return\n\na multi-index dataframe with index = ['date', 'asset'] and columns:\n\n- XD(i.e. 20D, 60D,...): the forward return\n\n- factor: the factor value\n\n- factor_quantile: the group id (also, to be consistence with alphalens)\n\n### example\n\nfactor_data = get_clean_factor_and_forward_returns(factor, prices)\n\n### reference\n\nalphalens: http://quantopian.github.io/alphalens/index.html\n\n\n## convert_date_in_factor_data\n\nconvert the type of index 'date' in factor_data to datetime \n\n### param\n\nfactor_data: with be changed inplace\n\n### return\n\nNone\n\n\n### example\n\nconvert_date_in_factor_data(factor_data)\n\n****\n# SAA\n****\n## risk_budget\n### params\n- data: the DataFrame consists of asset price data\n- b: the risk budget (list or array)\n\n### return\n- a Series representing the weights\n\n\n## risk_budget_weight_resample\n### params\n- data: the DataFrame consists of asset price data\n- b: the risk budget (list or array)\n- lb: the lookback period\n- freq: the rebalace frequency (str or int)\n\n### return\n- a DataFrame representing the weights at each rebalance date\n\n\n## risk_parity\n### params\n- data: the DataFrame consists of asset price data\n\n### return\n- a Series representing the weights\n\n\n\n## rp_weight_resample\n### params\n- data: the DataFrame consists of asset price data\n- lb: the lookback period\n- freq: the rebalace frequency (str or int)\n\n### return\n- a DataFrame representing the weights at each rebalance date\n\n\n## equalweight_resample\n### params\n- data: the DataFrame consists of asset price data\n- freq: the rebalace frequency (str or int)\n\n### return\n- a DataFrame representing the weights at each rebalance date\n\n\n## calc_nav\n### params\n- data: the DataFrame consists of asset price data\n- wegiths: the DataFrame representing the weights at each rebalance date\n- fee: fee rate\n\n### return\n- df_nav: a DataFrame the contains the backtested nav of the strategy\n- df: a muli_level DataFrame that contains the raw data, the weights and the period return of that assets, at each rebalace data\n\n\n****\n# cta\n****\n有关 CTA 研究的方法\n\n## get_pos_1l\n\n\n当价格位于指标线上方时，做多；当价格位于指标线下方时，做空。\n\n### params:\n\n- prz: array\n\n- line: array，指标线。也可以为标量，表示水平线。\n\n### return an array\n\n仓位\n\n## get_pos_2l\n\n\n当价格位于  upper 上方时，做多；当价格位于  lower 下方时，做空。\n\n### params:\n\n- prz: array\n\n- upper / lower: array，指标线。也可以为标量，表示水平线。\n\n### return an array\n\n仓位\n\n## get_pos_3l\n\n\n当价格位于  upper 上方时，做多；下穿 mid 时平仓。当价格位于  lower 下方时，做空；上穿 mid 时平仓。注意，做多时有可能直接下穿 lower，此时应平多做空，反之亦然。\n\n### params:\n\n- prz: array\n\n- upper / lower / mid: array，指标线。也可以为标量，表示水平线。\n\n### return an array\n\n仓位",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/manage/projects/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyquantfin",
    "package_url": "https://pypi.org/project/pyquantfin/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyquantfin/",
    "project_urls": {
      "Homepage": "https://pypi.org/manage/projects/"
    },
    "release_url": "https://pypi.org/project/pyquantfin/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "package for quant finance lecture",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7967047,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac8495201b1eae9156ab27a19590094e10b21434a30958ce399907113abf829a",
          "md5": "791b6cd5260c3d08529233473bc281d1",
          "sha256": "b32f635757b2edb6dd92914919bfe52a5b9ada22c097a5affc3455d6e9cb21d3"
        },
        "downloads": -1,
        "filename": "pyquantfin-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "791b6cd5260c3d08529233473bc281d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3615795,
        "upload_time": "2020-05-24T02:43:16",
        "upload_time_iso_8601": "2020-05-24T02:43:16.650053Z",
        "url": "https://files.pythonhosted.org/packages/ac/84/95201b1eae9156ab27a19590094e10b21434a30958ce399907113abf829a/pyquantfin-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd10654cd3be705e9e36465423d19c51dd499bbfd95c336f17625afbd0a84868",
          "md5": "e4272003f6009768b087689d54d9d014",
          "sha256": "03849815d1623c0a86a6953517f479b289540fb59d476436c66391c78c122752"
        },
        "downloads": -1,
        "filename": "pyquantfin-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e4272003f6009768b087689d54d9d014",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3615847,
        "upload_time": "2020-05-24T03:39:50",
        "upload_time_iso_8601": "2020-05-24T03:39:50.437339Z",
        "url": "https://files.pythonhosted.org/packages/cd/10/654cd3be705e9e36465423d19c51dd499bbfd95c336f17625afbd0a84868/pyquantfin-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08b224a30cfb9fde1f7d9b5e92168e394b00ede64158f70cecb9afe4d4ea4537",
          "md5": "1b63ed49fd899139532ed8a87421ba8d",
          "sha256": "21b17d39ad56da108dd587cf66398c3572f577593d7529ea22c0cb830f721df4"
        },
        "downloads": -1,
        "filename": "pyquantfin-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1b63ed49fd899139532ed8a87421ba8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3618113,
        "upload_time": "2020-08-15T11:28:18",
        "upload_time_iso_8601": "2020-08-15T11:28:18.638297Z",
        "url": "https://files.pythonhosted.org/packages/08/b2/24a30cfb9fde1f7d9b5e92168e394b00ede64158f70cecb9afe4d4ea4537/pyquantfin-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08b224a30cfb9fde1f7d9b5e92168e394b00ede64158f70cecb9afe4d4ea4537",
        "md5": "1b63ed49fd899139532ed8a87421ba8d",
        "sha256": "21b17d39ad56da108dd587cf66398c3572f577593d7529ea22c0cb830f721df4"
      },
      "downloads": -1,
      "filename": "pyquantfin-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1b63ed49fd899139532ed8a87421ba8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3618113,
      "upload_time": "2020-08-15T11:28:18",
      "upload_time_iso_8601": "2020-08-15T11:28:18.638297Z",
      "url": "https://files.pythonhosted.org/packages/08/b2/24a30cfb9fde1f7d9b5e92168e394b00ede64158f70cecb9afe4d4ea4537/pyquantfin-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}