{
  "info": {
    "author": "Daniel Rodriguez Rodriguez",
    "author_email": "danielrodriguezrodriguez.pks@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CleanDev Validator\n\nLibrería que tiene por objetivo cambiar ligeramente el comportamiento de las clases tipo `@dataclass` añadiendo\nuna forma de evitar y realizar una validación previa de sus atributos según necesidad\n\n![diagrama](https://gitlab.com/cleansoftware/libs/public/cleandev-validator/-/raw/master/docs/diagram.png)\n\n## @dataclass\n\nVamos a mostrar algunos ejemplos del uso de `@dataclass` en python de forma nativa y posteriormente lo compararemos con\nlos añadidos que se implementan con esta librería para que se note la intención de la misma.\n\n### Ejemplo basico\n\nLa principal causa por la que uno quisiera usar `@dataclass` es crear las famosas clases de estructura de datos que\nsolo tienen la finalidad de agrupar ciertos atributos y trabajas con ellos de una forma muy concreta.\n\nSi quisieramos una clase con atributos con el unico fin de hacer getter y setters sin usar `@dataclass` tendriamos algo\ncomo esto.\n\n```python\nclass Persona:\n    edad: int\n    altura: int\n    apellidos: str\n    peso: int\n    nombre: str\n\n    @property\n    def edad(self):\n        return self.edad\n\n    @edad.setter\n    def edad(self, edad):\n        self.edad = edad\n\n    @property\n    def altura(self):\n        return self.altura\n\n    @altura.setter\n    def altura(self, altura):\n        self.altura = altura\n\n    @property\n    def apellidos(self):\n        return self.apellidos\n\n    @apellidos.setter\n    def apellidos(self, apellidos):\n        self.apellidos = apellidos\n\n    @property\n    def peso(self):\n        return self.peso\n\n    @peso.setter\n    def peso(self, peso):\n        self.peso = peso\n\n    @property\n    def nombre(self):\n        return self.nombre\n\n    @nombre.setter\n    def nombre(self, nombre):\n        self.nombre = nombre\n```\n\nA continuación ejecutaremos el mismo ejemplo usando `@dataclass`\n\n```python\nfrom dataclasses import dataclass\n\n\n@dataclass()\nclass Persona:\n    edad: int\n    altura: int\n    apellidos: str\n    peso: int\n    nombre: str\n```\n\nComo se puede apreciar es mucho más compacto no obstante cuando queremos usar dicha clase tenemos que definir todos sus\natributos si no queremos un error, o como alternativa definir un metodo `__init__()` que sobreescriba el comportamiento\npor defecto de `@dataclass` para permitirnos decidir que campos y cuales no queremos dar de alta.\n\nVeamoslo en el siguiente ejemplo\n\n```python\nfrom dataclasses import dataclass\n\n\n@dataclass()\nclass Persona:\n    edad: int\n    altura: int\n    apellidos: str\n    peso: int\n    nombre: str\n\n\n@dataclass()\nclass Animal:\n    peso: int\n    edad: int\n    nombre: str\n\n    def __init__(self, peso: int, edad: int):\n        self.peso = peso\n        self.edad = edad\n\n\nif __name__ == '__main__':\n    # Definiendo todos sus atributos para no tener un error\n    persona: Persona = Persona(edad=18, altura=176, apellidos='Hernandez', peso=80, nombre='Daniel')\n\n    # Para el caso de animal no estamos obligados a definirle un nombre por lo que estamos obligados a definir un método\n    # __init__()\n    animal: Animal = Animal(peso=20, edad=10)\n```\n\nExiste una forma compacta de hacer el ejemplo para la clase `Animal`\n\n```python\nfrom dataclasses import field\nfrom dataclasses import dataclass\n\n\n@dataclass()\nclass Animal:\n    peso: int\n    edad: int\n    nombre: str = field(init=False)\n\n\nif __name__ == '__main__':\n    animal: Animal = Animal(peso=20, edad=10)\n\n```\n\nAhora bien realmente pese a definir el tipo de dato realmente no se comprueba si el tipo de datos que se le asigna es\nel correcto, veamos un ejemplo\n\n```python\nfrom dataclasses import field\nfrom dataclasses import dataclass\n\n\n@dataclass()\nclass Animal:\n    peso: int\n    edad: int  # Definimos como entero\n    nombre: str = field(init=False)\n\n\nif __name__ == '__main__':\n    animal: Animal = Animal(peso=20, edad='tengo 10 años')  # ¿¿?? Le pasamos una string para edad\n```\n\nAdemas de esto no existe una forma sencilla de convertir la clase en `dict` y filtrarle algunos atributos cosa de\nevitarme que crear el tipico DTO (DataTransferObject) para ese fin o cosas equivalente. Buscando sobre ese caso uno de\nlos mejores intentos de hacer esto lo\nencontre [aquí](https://stackoverflow.com/questions/68722516/exclude-some-attributes-from-str-representation-of-a-dataclass/68722666)\n\nNi tampoco existe una forma facil de retornar unicamente el nombre de los atributos de mi clase.\n\n## DataClass\n\nClase que añade dos metodos a toda clase que herede de ella que sirven para filtrar atributos de la clase y retornar\nlos nombres de los atributos de la misa.\n\n### __fields__\n\nLa propiedad `__fields__` de esta clase retorna los atributos de la misma.\n\n```python\nfrom dataclasses import field\nfrom dataclasses import dataclass\nfrom cleandev_validator import DataClass\n\n\n@dataclass\nclass Animal(DataClass):\n    peso: int\n    edad: int\n    nombre: str = field(init=False)\n\n\nif __name__ == '__main__':\n    animal: Animal = Animal(peso=20, edad='tengo 10 años')\n    animal.__fields__  # ['peso', 'edad', 'nombre']\n```\n\n### __filter__()\n\nRecibe como parametro un `list` y un `bool` (default=True)\n`bool`: Bandera que decide si queremos incluir o excluir los campos pasados por la lista\n`list`: Dado una lista en funcion de `bool`, si es `True` solo mostrara (k,v) de los valores pasados por la lista\nen caso contrario solo excluira dichos valores.\n\n```python\nfrom dataclasses import field\nfrom dataclasses import dataclass\nfrom cleandev_validator import DataClass\n\n\n@dataclass\nclass Animal(DataClass):\n    peso: int\n    edad: int\n    nombre: str = field(init=False)\n\n\nif __name__ == '__main__':\n    animal: Animal = Animal(peso=20, edad='tengo 10 años')\n    animal.__filter__(['peso'])  # {'peso': 20}\n    animal.__filter__(['peso'], False)  # {'edad': 'tengo 10 años'}\n\n```\n\n### validaciones de atributos\n\nPara ejecutar la validación propuesta de atributos hay que definir un método `__constrains__` de esta manera ademas de\n\n```python\nfrom dataclasses import field\nfrom dataclasses import dataclass\nfrom cleandev_validator import DataClass, _DataClassConstrains\n\n\n@dataclass()\nclass Animal(DataClass):\n    peso: int\n    edad: int\n    active: bool\n    nombre: str = field(init=False)\n\n    @property\n    def __constrains__(self):\n        return {\n            'edad': str(_DataClassConstrains.INT)\n        }\n\n\n```\n\nAdemas de un método para que se mantegan las validaciones propias del `@dataclass`\n\n```python\ndef __post_init__(self):\n    super(Animal, self)._validate(**self.__dict__)\n```\n\nEl resultado final\n\n```python\nfrom dataclasses import field\nfrom dataclasses import dataclass\n\nfrom cleandev_validator import DataClass, _DataClassConstrains\n\n@dataclass()\nclass Animal(DataClass):\n    peso: int\n    edad: int\n    active: bool\n    nombre: str = field(init=False)\n\n    def __post_init__(self):\n        super(Animal, self)._validate(**self.__dict__)\n\n    @property\n    def __constrains__(self):\n        return {\n            'peso': str(_DataClassConstrains.INT),\n            'edad': str(_DataClassConstrains.INT),\n            'active': str(_DataClassConstrains.BOOL),\n        }\n\n\nif __name__ == '__main__':\n    animal: Animal = Animal(peso=20, edad=20, active=True)\n    animal.__filter__(['peso'])  # {'peso': 20}\n    animal.__filter__(['peso'], False)  # {'edad': 'tengo 10 años'}\n```\n\nDe esta forma estamos obligando a que realmente todos los campos son del tipo que se define y ademas de si hay que \ndefinirlo o no a la hora de crear la clase usando `field(init=False)`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/cleansoftware/libs/public/cleandev-validator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cleandev-validator",
    "package_url": "https://pypi.org/project/cleandev-validator/",
    "platform": null,
    "project_url": "https://pypi.org/project/cleandev-validator/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/cleansoftware/libs/public/cleandev-validator/-/issues",
      "Homepage": "https://gitlab.com/cleansoftware/libs/public/cleandev-validator"
    },
    "release_url": "https://pypi.org/project/cleandev-validator/0.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Module for handler dataclass more easy",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13929571,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbddc49dd95b9dfeacd80d22520e3e2d71d6d931f0a51aa31308340f30414413",
          "md5": "80cc3922c7f7d2589ce4f9552b0511f6",
          "sha256": "a3886bbe72b63dc8ef97c2d64545bd1bce813ab26cef3fa1302f6195acd7c555"
        },
        "downloads": -1,
        "filename": "cleandev-validator-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80cc3922c7f7d2589ce4f9552b0511f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 4328,
        "upload_time": "2022-05-25T06:19:28",
        "upload_time_iso_8601": "2022-05-25T06:19:28.377973Z",
        "url": "https://files.pythonhosted.org/packages/cb/dd/c49dd95b9dfeacd80d22520e3e2d71d6d931f0a51aa31308340f30414413/cleandev-validator-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbddc49dd95b9dfeacd80d22520e3e2d71d6d931f0a51aa31308340f30414413",
        "md5": "80cc3922c7f7d2589ce4f9552b0511f6",
        "sha256": "a3886bbe72b63dc8ef97c2d64545bd1bce813ab26cef3fa1302f6195acd7c555"
      },
      "downloads": -1,
      "filename": "cleandev-validator-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "80cc3922c7f7d2589ce4f9552b0511f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 4328,
      "upload_time": "2022-05-25T06:19:28",
      "upload_time_iso_8601": "2022-05-25T06:19:28.377973Z",
      "url": "https://files.pythonhosted.org/packages/cb/dd/c49dd95b9dfeacd80d22520e3e2d71d6d931f0a51aa31308340f30414413/cleandev-validator-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}