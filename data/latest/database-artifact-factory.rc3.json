{
  "info": {
    "author": "Eric Kascic",
    "author_email": "eric.kascic@stelligent.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Background\n\nA \"database artifact\" is a bundle of metadata and code/automation for creating or\nrecreating another database.\n\nIn the case of creating a database, it includes: * specifications for the location of the new database - networking, etc.\n* specifications for the hardware of the cluster instances - cpu, memory etc\n* specifications for the maintenance of the cluster - backup windows, etc\n* the schema for a relational database\n\nIn the case of re-creating a database, it includes:\n* a locator for the source database\n* specifications for the location of the new database - networking, etc.\n* specifications for the hardware of the cluster instances - cpu, memory etc\n* specifications for the maintenance of the cluster - backup windows, etc\n\nIn both cases, a new cluster is created and automation either does the copy or the create.\n\nIn the case of Aurora RDS - the copy can be a \"copy-on-write\" which means even a massive \nproduction database can be \"copied\" in a matter of minutes.  The commonality is shared between\nthe source and target, while deltas to the target are recorded separately.\n\nThe \"database artifact\" produced by this module is a Docker image.  The image\ncontains all the necessary metadata and automation to do the necessary.  A Docker image\nwas used because the automation (originally) contains a fairly diverse mix of software components.\n\n## Installing the Database Artifact Factory\n\n### Prerequisites\nYou will need a Docker engine installed locally.  For more information on how to do this, please\nsee: https://docs.docker.com/engine/install/\n\nYou will need a python 3.7 or greater environment with pip installed.  For more information on installing\npython, please see: https://www.python.org/about/gettingstarted/\n\n### Install via pip\n```\npip install db-artifact-factory\n```\n\n\n## Build the Database Artifact\n\n### Configuration\nIn order to build the artifact, a configuration INI file needs to be created with all the necessary\ninformation for the source and target databases.\n\nAn example INI file follows:\n\n```\n[source_db]\nsource_db_cluster_id = dbartifact-prod-create-cluster-1k326eivoq3i0\n\n[target_db]\nsubnet_ids = source\ninstance_type = db.r4.large\n```\n\nThe singular published artifact contains all the information to do both the create or the clone.  \nThis makes for a mix of arguments in the source/target sections - some values are only necessary\nfor create, and some are only necessary for clone.\n\n* *source_db_cluster_id*\n  This is the Aurora RDS database cluster id to clone.  Even when creating a fresh database cluster,\n  there should be a \"source\" database that it is re-creating - just without data.\n* *subnet_ids*\n  This can be a comma-delimited list of two or more subnet ids to create the target db in, e.g. subnet-1234, subnet-456\n  or it can be \"source\" and discover the subnet-ids from the source db cluster.\n\n  Make sure these subnet_ids are in different AZ.\n\n* *instance_type*\n  The instance type of the DB instance created in the cluster, e.g. db.r4.xlarge\n* *database_name*\n  In the create case, the name of a database to create and apply the liquibase changelog to.  This can be dontcare\n  if you only want the artifact to be able to clone.\n\n\n### Building\nTo invoke the build process, first make sure there are ambient AWS credentials.\n\nThen run `db-artifact-builder` against the created INI file:\n```\ndb-artifact-builder artifact-config.ini\n```\n\nIf the build process is successful, the build process will appear in stdout and a Docker image will be created\nwith the tag `db-artifact`\n\n### Publishing\nOnce the db-artifact is in the local registry, from here it can be \"published\" to DockerHub or the internal registry\nof choice (e.g. GitHub, Artifactory, etc.).  It is up to the operator to publish the image (and this tool doesn't \ndo anything special to support that).\n\n## Converging a Database Artifact\nIf running locally after a \"build\", then \"convergence\" (i.e creating or cloning) is just a matter of running the Docker image with a few execution settings.  If the Docker image has been published in a registry, then a docker pull will be necessary to\nmake the image accessible.\n\nUltimately `docker run` is being executed but there is a wrapper CLI script `db-artifact-converge` installed as part of database-artifact-factory that provides a nicer user experience (no fussing with the filesystem mounts and environment variables)\n\nTo clarify - installing database-artifact-factory contains both the tools to build and to converge, but an operator v. an end-user\nmight use only one or the other.\n\n### Clone an Existing Database\nThe following is the minimal command to clone an existing database.  It presumes a few things:\n* that AWS credentials are stored in ~/.aws/credentials\n* AWS profile is \"default\".\n* the Docker image db-artifact:latest contains the artifact to converge\n\nBEWARE - you must specify the password, but the username follows from the source cluster\n```\ndb-artifact-converge --db_password thisisafakepassw0rd\n```\n\nIf any of those defaults are inappropriate, please invoke the `db-artifact-converge -h` to see the other options.\n\n## Future Direction\n* Parameterize support for mysql v postgresql\n* Add support for other operational configuration items for the RDS cluster\n* better progress reporting and troubleshooting mechanisms\n* control over stack names\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stelligent/database-artifact-factory",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "database-artifact-factory",
    "package_url": "https://pypi.org/project/database-artifact-factory/",
    "platform": "",
    "project_url": "https://pypi.org/project/database-artifact-factory/",
    "project_urls": {
      "Homepage": "https://github.com/stelligent/database-artifact-factory"
    },
    "release_url": "https://pypi.org/project/database-artifact-factory/0.1.0/",
    "requires_dist": [
      "boto3 (==1.12.26)",
      "docker"
    ],
    "requires_python": ">=3.6",
    "summary": "An RDS database factory for rapidly creating database copies",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7426143,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67353a9600c77edd86750c4ae1c2737d14e1d90cc3be87ce138e5cdb5da5466d",
          "md5": "ad60124fcdb9b4f92bbcd543e4c76e34",
          "sha256": "b7d4428f390ad11e546d094df3d84cc5b4555d9351cc24ad3fd66102bd913a0c"
        },
        "downloads": -1,
        "filename": "database_artifact_factory-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad60124fcdb9b4f92bbcd543e4c76e34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17588,
        "upload_time": "2020-06-02T15:39:32",
        "upload_time_iso_8601": "2020-06-02T15:39:32.844468Z",
        "url": "https://files.pythonhosted.org/packages/67/35/3a9600c77edd86750c4ae1c2737d14e1d90cc3be87ce138e5cdb5da5466d/database_artifact_factory-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56993258392e0fa9b3d92a3abdb7787d705cbb43965ce1fc893d62f6befe77b3",
          "md5": "5e18c0439e054a85f6ea174590090eff",
          "sha256": "27a7a27bd3379b0bb3a800ec76201b900b2fba93eccbb780e80de19366a66515"
        },
        "downloads": -1,
        "filename": "database_artifact_factory-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e18c0439e054a85f6ea174590090eff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17931,
        "upload_time": "2020-06-05T16:07:20",
        "upload_time_iso_8601": "2020-06-05T16:07:20.981514Z",
        "url": "https://files.pythonhosted.org/packages/56/99/3258392e0fa9b3d92a3abdb7787d705cbb43965ce1fc893d62f6befe77b3/database_artifact_factory-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b95f861aaf8731fb60b49cdc335bcb655d496460c9ee965092b43ec14b6f84e",
          "md5": "bc2282b36473cf448de6ea4514971d17",
          "sha256": "0200c5a826c438f777f76226fe75fac15de71e3b28a23e6fbffc2a4b142736b5"
        },
        "downloads": -1,
        "filename": "database_artifact_factory-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc2282b36473cf448de6ea4514971d17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13729,
        "upload_time": "2020-06-08T19:10:54",
        "upload_time_iso_8601": "2020-06-08T19:10:54.383020Z",
        "url": "https://files.pythonhosted.org/packages/9b/95/f861aaf8731fb60b49cdc335bcb655d496460c9ee965092b43ec14b6f84e/database_artifact_factory-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b95f861aaf8731fb60b49cdc335bcb655d496460c9ee965092b43ec14b6f84e",
        "md5": "bc2282b36473cf448de6ea4514971d17",
        "sha256": "0200c5a826c438f777f76226fe75fac15de71e3b28a23e6fbffc2a4b142736b5"
      },
      "downloads": -1,
      "filename": "database_artifact_factory-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bc2282b36473cf448de6ea4514971d17",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13729,
      "upload_time": "2020-06-08T19:10:54",
      "upload_time_iso_8601": "2020-06-08T19:10:54.383020Z",
      "url": "https://files.pythonhosted.org/packages/9b/95/f861aaf8731fb60b49cdc335bcb655d496460c9ee965092b43ec14b6f84e/database_artifact_factory-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}