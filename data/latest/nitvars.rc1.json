{
  "info": {
    "author": "",
    "author_email": "createsoft@mail.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# nitvars\nPython variables v2 package\nPython version 3 or later\n\n\nadd new version of globals, locals\nglobals fix\nadd tracer, scaner frame info\nadd exec v2 = multiline exec and return result\nadd multiline  lambda  lambda x,y:e2('x=x+1;print(x);x+y')\n\nfor see and test all functions run nitvars_test.py  or \"py -m nitvars\" or\nfrom nitvars.nitvars_test import * \nmain()\n\n\n\nSelect test ['0=testglobals2', '1=testlocals2', '2=exec2test', '3=lambda2test', '4=testscaner', '5=tracertest', '6=callhelptest', 'all=all tests']:\n\n######## testglobals2\nNow get testvar. testvar in globals!\nvar \"testvar\" in simple globals()=NOT FOUND!\nNot found \"testvar\" in levels {'nitvars.nitvars', '__main__'}\nvar \"testvar\" in globals2()=None\nNot found \"testvar\" in levels {'module'}\nvar \"testvar\" in realglobals()=None\ntestvar in [level:id]: None\nWhy?  globals() find globals only in this script(in nitvars.py..)\n\nNow set testvar with \"global testvar\"\nvar \"testvar\" in simple globals()=SET OK!\nvar \"testvar\" in globals2()=SET OK!\nNot found \"testvar\" in levels {'module'}\nvar \"testvar\" in realglobals()=None\ntestvar in [level:id]: {'nitvars.nitvars': 2538507971952}\nWhy?  global x set globals only in this script(in nitvars.py..)\n\nNow set testvar2 with \"globals()[testvar]\"\nvar \"testvar\" in simple globals()=SET OK!2\nvar \"testvar\" in globals2()=SET OK!2\nNot found \"testvar\" in levels {'module'}\nvar \"testvar\" in realglobals()=None\ntestvar in [level:id]: {'nitvars.nitvars': 2538507972016}\nWhy?  globals() set globals only in this script(in nitvars.py..)\n\nNow set testvar2 with nitvars \"globals2()[testvar]\"\nvar \"testvar\" in simple globals()=SET OK!3\nvar \"testvar\" in globals2()=SET OK!3\nvar \"testvar\" in realglobals()=SET OK!3\ntestvar in [level:id]: {'nitvars.nitvars': 2538507972144, '__main__': 2538507972144}\nWhy?  globals2() is real globals, globals() is ...\nPress Enter to continue..q=exit\n\n######## testlocals2\nlocals = (2, 3, 1)\nsimple locals=> {}(is empty!) locals2=> {'x': 2, 'y': 3} + ^up level=globals. you can get/set/del, create vars in locals()dict       \nlocals set in other nested function! locals = {'x': 700, 'y': 70} + global z=7.  result= 771) #=777\nPress Enter to continue..q=exit\n\n######## exec2test\nthis code run in exec2\nand return result of x=x+50 , x+y\n200\nPress Enter to continue..q=exit\n\n######## lambda2test\ntest multiline lambdas!\n    This code run multiline lambda => x,y:e2('x=x+5;x+y')\n35\nPress Enter to continue..q=exit\n\n######## testscaner\nTest scan other objects andframes. Scan this frame:\nScan results:\n    name: testscaner\n    all: filename: C:\\Users\\nikos\\Desktop\\py\\nitvars\\nitvars_test.py\nline: 44\nname: testscaner\nlocals: {'x': 1, 'y': 2, 'z': 3}\nmodule: nitvars.nitvars_test\ncode: def testscaner(x=1,y=2):\n     \n    print('Test scan other objects andframes. Scan this frame:')\n    z=3\n    includescaner()\n\ncomment: #test comm\n\nargs_str: (x=1,y=2)\npath: nitvars.nitvars_test._run_code.<module>.main.testscaner\nobject: None\nsignature: line 44[level:3]: nitvars.nitvars_test._run_code.<module>.main.testscaner(x=1,y=2) {'x': 1, 'y': 2, 'z': 3}\nPress Enter to continue..q=exit\n\n######## tracertest\nTEST TRACE DECORATOR\n                                        >>>CALL: line 57[level:5]: nitvars.nitvars_test._run_code.<module>.main.tracertest.trace_func.decfunc(xx,x=120) {'xx': 80, 'x': 120}\n                                        ### RETURN: line 59[level:5]: nitvars.nitvars_test._run_code.<module>.main.tracertest.trace_func.decfunc(xx,x=120) {'xx': 80, 'x': 120} ==> 200 [<class 'int'>]\nTrace results=>>calls=>[line 57[level:5]: nitvars.nitvars_test._run_code.<module>.main.tracertest.trace_func.decfunc(xx,x=120) {'xx': 80, 'x': 120}] returns=>[200]\nTEST TRACE DECORATOR 2\n                                        >>>CALL: line 62[level:5]: nitvars.nitvars_test._run_code.<module>.main.tracertest.trace_func.testfunc(xx,x=170) {'xx': 80, 'x': 170}\n                                        ### RETURN: line 63[level:5]: nitvars.nitvars_test._run_code.<module>.main.tracertest.trace_func.testfunc(xx,x=170) {'xx': 80, 'x': 170} ==> 250 [<class 'int'>]\nTrace results=>>calls=>[line 62[level:5]: nitvars.nitvars_test._run_code.<module>.main.tracertest.trace_func.testfunc(xx,x=170) {'xx': 80, 'x': 170}] returns=>[250]\nTEST TRACE WITH\n                                >>>CALL: line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 270, 'x': 170}\n                                ### RETURN: line 63[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 270, 'x': 170} ==> 440 [<class 'int'>]\n                                >>>CALL: line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 370, 'x': 170}\n                                ### RETURN: line 63[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 370, 'x': 170} ==> 540 [<class 'int'>]\nTrace results=>>calls=>[line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 270, 'x': 170}, line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 370, 'x': 170}] returns=>[440, 540]\nTEST TRACE GLOBAL TRACE ON\n                                >>>CALL: line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 470, 'x': 170}\n                                ### RETURN: line 63[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 470, 'x': 170} ==> 640 [<class 'int'>]\n                                >>>CALL: line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 570, 'x': 170}\n                                ### RETURN: line 63[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 570, 'x': 170} ==> 740 [<class 'int'>]\nTrace results=>>calls=>[line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 270, 'x': 170}, line 62[level:4]: nitvars.nitvars_test._run_code.<module>.main.tracertest.testfunc(xx,x=170) {'xx': 370, 'x': 170}] returns=>[440, 540]\nTEST TRACE str combo returns Demo version of use tracer\n<div id=\"linksblock\">\n</div>\nPress Enter to continue..q=exit\n\n######## callhelptest\ntest callhelp decorator run myfunc(x,y,z=7) as myfunc() . x and y not defined\nhelp call func if args not defined\nЗапуск функции myfunc(x, y, z=7)\nВведите параметр \"x\"(\"#q\" для отмены запуска)111\nВведите параметр \"y\"(\"#q\" для отмены запуска)222\n340\nPress Enter to continue..q=exit",
    "description_content_type": "text/plain",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NITSoftware/nitvars",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nitvars",
    "package_url": "https://pypi.org/project/nitvars/",
    "platform": null,
    "project_url": "https://pypi.org/project/nitvars/",
    "project_urls": {
      "Homepage": "https://github.com/NITSoftware/nitvars"
    },
    "release_url": "https://pypi.org/project/nitvars/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "new versions of globals,locals,tracer and other functions..",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15277015,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97233dcb44e2d397fdd5e79a8814f0b6088af6a4645076d57602823a05e4b4f6",
          "md5": "25fc56a40bc23c08d48d4408732a7f8f",
          "sha256": "66dedfafefb160e7ac0ff3aa95453a76df848c9eea1c87ce61dd9e74c160a4df"
        },
        "downloads": -1,
        "filename": "nitvars-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25fc56a40bc23c08d48d4408732a7f8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11308,
        "upload_time": "2022-10-01T17:48:43",
        "upload_time_iso_8601": "2022-10-01T17:48:43.793445Z",
        "url": "https://files.pythonhosted.org/packages/97/23/3dcb44e2d397fdd5e79a8814f0b6088af6a4645076d57602823a05e4b4f6/nitvars-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97233dcb44e2d397fdd5e79a8814f0b6088af6a4645076d57602823a05e4b4f6",
        "md5": "25fc56a40bc23c08d48d4408732a7f8f",
        "sha256": "66dedfafefb160e7ac0ff3aa95453a76df848c9eea1c87ce61dd9e74c160a4df"
      },
      "downloads": -1,
      "filename": "nitvars-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "25fc56a40bc23c08d48d4408732a7f8f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 11308,
      "upload_time": "2022-10-01T17:48:43",
      "upload_time_iso_8601": "2022-10-01T17:48:43.793445Z",
      "url": "https://files.pythonhosted.org/packages/97/23/3dcb44e2d397fdd5e79a8814f0b6088af6a4645076d57602823a05e4b4f6/nitvars-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}