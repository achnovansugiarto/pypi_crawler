{
  "info": {
    "author": "Ralf Schlatterbeck",
    "author_email": "rsc@runtux.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Antenna Optimizer\n=================\n\n.. |ohm| unicode:: U+02126 .. Omega\n.. |_| unicode:: U+00A0 .. Non-breaking space\n   :trim:\n\nThis project can optimize anntennas using genetic algorithms.  It uses\nmy pgapy_ Python wrapper for PGApack_, the parallel genetic algorithm\nlibrary, originally by David Levine at Argonne National Laboratory and\ncurrently maintained by me. It also uses PyNEC_, the Python wrapper for\nNEC2++, the C++ version of the `Numerical Electromagnetics Code`_.\n\nOriginally this started out with a low-gain two-element antenna where\nthe driven element is a folded dipole. One of the requirements for that\nantenna was that it should have 50 |_| |ohm| impedance and at least some\nforward gain. Optimizing this antenna by hand soon turned out to be\ntedious and I started experimenting with optimization by a genetic\nalgorithm.\n\nYou can find the original experiments in ``folded.nec`` and\n``folded2.nec``. These are input files to the command-line NEC programs.\nYou can either use the ``nec2c`` command-line program which produces an\noutput file that can be viewed with ``xnecview`` or you can use\ngraphical ``xnec2c`` program. All run under Linux and are included in\nthe Debian Linux distribution. The ``.nec`` files *may* also be usable\nwith other NEC versions on other operating systems but I have not tried.\n\nFor optimizing the two-element Yagi-Uda you can use the command-line\ntool ``folded_antenna`` where the optimizer is implemented in\n``folded.py``. Later a 3-element antenna with the same principles was\nadded in ``folded_3ele.py`` callable with the command-line tool\n``folded_3ele_antenna``.\n\nThe ``antenna_model.py`` factors out the common parts of the various\nantennas.\n\nThe ``hb9cv.py`` with the command-line tool ``hb9cv_antenna`` models the\nwell-know HB9CV antenna but only very crudely. NEC2 isn't really suited\nfor modelling the phasing stubs of that antenna because it doesn't like\nparallel wires that are too close. I mainly did this for comparing some\nof the antennas resulting from optimization with the well-known\nperformance of the HB9CV.\n\nIn the file ``logper.py`` with the command-line tool ``logper_antenna``\nyou can find a 9-element log-periodic antenna.  It can currently not be\noptimized, the performance of the real antenna is better than the\nresults obtained with NEC, so I didn't implement an optimizer for it\nyet.\n\nAll the antenna programs take an action as mandatory argument. The\naction is typically either ``optimize`` for running the optimizer or\n``necout`` for creating a ``.nec`` file which can then be fed to one of\nthe nec programs mentioned above. When running the optimizer it makes\nsense to experiment with different random seeds, each random seed will\nusually produce a different antenna. In addition there are some\nexperimental actions, ``frgain`` prints the forward and backward gains\n(in dBi) for the lowest, the middle, and the highest frequencies and the\nVSWR for those. The ``gain`` action visualizes the 3D antenna gain\npattern and the ``swr`` action visualizes the VSWR over the given\nfrequency range. Note that both, the ``gain`` and the ``swr`` action\ncompute the antenna data over the whole frequency range using NEC and\nthat may take some time.\n\nThe output of the optimizer is text (usually redirected to a file) that\nprints the evaluation, the VSWR, maximum gain, and forward/backward\nratio of the best antenna for every 10th generation of the genetic\nalgorithm. In addition the command-line options to create that antenna\nare printed. When the genetic algorithm doesn't make any more progress,\nthe search terminates and the data of the best evaluation are given. An\nexample of the last lines of such a text is as follows. The data is from\none of the best 2-element antennas was obtained with the random seed 26\nof an earlier version of the program::\n\n    The Best Evaluation: 2.886437e+02.\n    The Best String:\n    -r 0.0364 -d 0.0444 -l 0.1704 -4 0.1075\n    VSWR: [1.7901433511443068, 1.1495780609982815, 1.7995760521232753]\n    GMAX: 6.69913175227, RMAX: -3.03663376703\n    Cache hits: 5670/9243 61.34%\n    Eval: 288.64\n    [ 101011001100101001111000000010011 ]\n\nThis tells us the evaluation (which is meaningful only to the\ngenetic algorithm), the genetic algorithm *maximizes* this value.\nThe command-line options after the line ``The Best String:`` can be used\nto create a ``.nec`` file for that antenna. The antenna in the example\nhas a voltage standing wave ratio of < |_| 1.8 at the band ends and\naround 1.15 in the middle of the band (the 70cm band from 430 to\n440 |_| MHz in that case). The forward gain (in the middle of the band)\nis 6.7 |_| dBi. The RMAX value is the (maximum) backward gain (in a 30\ndegree area in the back). So the F/B ratio of that antenna is::\n\n 6.7 dB - -3.0 dB = 9.7 dB\n\nThe last line of the text output contains the genetic representation of\nthat antenna.\nThe ``.nec`` file for the antenna above which was optimized with an early\nversion of this package can be created with the command::\n\n folded_antenna -r 0.0364 -d 0.0444 -l 0.1704 -4 0.1075 necout > folded-opt.nec\n\nThe command-line options specify the radius of the folded dipole, the\ndistance of the reflector from the folded dipole, the (half) length of\nthe reflector, and the (half) length of the straight part of the folded\ndipole, respectively.\n\nAccording to NEC it has a standing wave ratio (VSWR) of < |_| 1.8 from\n430-440 |_| MHz, a forward gain of > |_| 6.5 dBi over the whole\nfrequency range and a Forward/Back Ratio of 8-11 dB.\n\nIf you want to implement an optimizer for your own antenna, look at the\nfile ``folded.py``: You need to implement a class that defines the\ngeometry of the new antenna and an optimizer class that initializes the\ngene ranges and implements a ``compute_antenna`` method that returns an\ninstance of your antenna class with the parameters obtained from the\ngiven gene. All lengths in the models are metric (in meters) as is the\ndefault in NEC.\n\nA recent addition to this package involves modelling of coax cables.\nThis uses information from an old article by Frank Witt [1]_ to derive\neverything necessary to model a transmission line *with* loss from the\nmanufacturer cable data. The command-line tool for using these coax\nmodels is named ``coaxmodel``. Again this command has several\nsub-commands: \n\n- ``loss``: This displays the fitted loss-curves from the manufacturer\n  data against the curve-fit algorithm used, you can see how much\n  difference in dB the fitted curve has to the loss at certain\n  frequencies given by the manufacturer data.\n- ``match`` computes the impedance at the load and input (depending on\n  which was given as an input the other is computed), the matched and\n  total loss (the matched loss is the loss in the cable if the load is\n  prefectly matched, the total loss is the sum of the matched loss and\n  the additional loss due to reflections), the SWR and data for various\n  stub-matches to get to the cable impedance Z0.\n- ``resonator`` computes the resistance and Q-factor of a coax resonator\n  at the given frequency. A resonator is a piece of cable that either\n  has a short-circuit or an open-circuit at the far end. The sub-command\n  computes resonators for quarter and half wave at the given frequency.\n- ``stub`` computes the length, Q-factor, and resulting impedance as\n  well as the inductance or capacitance of a stub for a given impedance\n  and frequency. The impedance by default is -100j Ohm and can be\n  changed with the -x option. The stub with the shortest resulting\n  length is chosen, so for a negative reactance an open stub is chosen\n  while for a positive reactance a closed stub is chosen.\n\nFor all these sub-commands you can specify the frequency, length of\ncable and impedance (either at the load or at the end of the cable) to\nbe used in computing the results. You can specify complex impedances as\na python complex number in the format a+bj, e.g. 50-500j.\n\nFinally the ``transmission_line`` program can optimize the stub-matching\nfor a transmission line using NEC. By default a lossless line is asumed.\nAlso by default a closed stub at the closest possible position is\nsearched.\n\nTransmission lines can be modelled by NEC with the ``TL`` (transmission\nline) card.  But NEC can also model arbitrary (symmetric, passive)\nnetworks with the ``NT`` (network) card. We use this (and the code in\n``coaxmodel.py``) to model a real cable *with loss* for stub matching.\nIt is instructive to compare the values for stub-matching obtained\nanalytically from ``coaxmodel`` with the values obtained from an\noptimization with the genetic algorithm by ``transmission_line``. Note\nthat the coaxmodel takes frequecies in Hz while transmission_line (which\nuses NEC) accepts frequencies in MHz. So we match a complex impedance of\n75+15j |Ohm| for example::\n\n coaxmodel -c sytronic_RG_58_CU -f 435e6 -z 75+15j match\n\nThis yields a stub of length 8.007 cm attached 7.888 cm from the load when\nmatching with a closed stub. When optimizing with ``transmission_line``::\n\n transmission_line -c sytronic_RG_58_CU -f 435 -z 75+15j optimize\n\nwe get 8.016cm for the stub length and 7.6cm for the distance of the\nstub from the load. We can visualize this over a given frequency range\nby either producing NEC output::\n\n transmission_line -c sytronic_RG_58_CU -f 435 -z 75+15j -i 50 \\\n    -l 0.0816 -d 0.076 --frqstart=430 --frqend=440 necout > x1.nec\n transmission_line -c sytronic_RG_58_CU -f 435 -z 75+15j -i 50 \\\n    -l 0.08007 -d 0.07888 --frqstart=430 --frqend=440 necout > x2.nec\n\nAnd the compute the nec model and display with::\n\n nec2c -i x1.nec > x1.out\n nec2c -i x2.nec > x2.out\n xnecview x1.out\n xnecview x2.out\n\nOr directly display the VSWR curves with::\n\n transmission_line -c sytronic_RG_58_CU -f 435 -z 75+15j -i 50 \\\n    -l 0.0816 -d 0.076 --frqstart=430 --frqend=440 swr\n transmission_line -c sytronic_RG_58_CU -f 435 -z 75+15j -i 50 \\\n    -l 0.08007 -d 0.07888 --frqstart=430 --frqend=440 swr\n\nBoth are close enough, the SWR is below 1.1 over the whole frequency\nrange given. Note that this can change drastically if load impedances\nwith a higher VSWR are matched.\n\nAlso note that the NEC files produced in the example above have a different\nNEC network *for each frequency*. This is because NEC models networks\nusing an `admittance matrix`_ which is frequency dependent.\n\nThis means the sequence of two ``NT``\ncards, a ``TL`` card, a ``FR`` card and a ``RP`` card are repeated for\neach frequency. Here the two ``NT`` cards define the network of the\ncable from the load to the stub and the stub itself while the ``TL``\ncard defines the length of a lossless transmission line from the stub to\nthe source. The ``FR`` card specifies a single frequency and the ``RP``\ncard defines a radiation pattern and triggers computation. This format\nis perfectly valid NEC code, but certain programs (like the popular\n``xnec2c``) cannot deal with this format and display only a single\nfrequency.\n\n.. [1] Frank Witt. Transmission line properties from manufacturer’s\n   data. In R. Dean Straw, editor, The ARRL Antenna Compendium, volume 6,\n   pages 179–183. American Radio Relay League (ARRL), 1999.\n\n.. _pgapy:  https://pypi.org/project/PGAPy/\n.. _PGApack: https://github.com/schlatterbeck/pgapack\n.. _PyNEC: https://pypi.org/project/PyNEC/\n.. _`PyNEC source`: https://github.com/tmolteno/python-necpp\n.. _`Numerical Electromagnetics Code`:\n    https://en.wikipedia.org/wiki/Numerical_Electromagnetics_Code\n.. _`admittance matrix`: https://en.wikipedia.org/wiki/Admittance_parameters\n\nChanges\n-------\n\nVersion 0.2: More cable data\n\n- Fix setup to correctly specify dependencies\n- Add more cable data the following command will list supported cable\n  types::\n\n    coaxmodel --help\n\nVersion 0.1: Initial Release\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/schlatterbeck/antenna-optimizer",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "antenna-optimizer",
    "package_url": "https://pypi.org/project/antenna-optimizer/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/antenna-optimizer/",
    "project_urls": {
      "Homepage": "https://github.com/schlatterbeck/antenna-optimizer"
    },
    "release_url": "https://pypi.org/project/antenna-optimizer/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Optimize antennas using NEC and a genetic algorithm",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12078273,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65cb13b283eadbb929a5cce43de335ca8728ded8470d2073d7def3518b5ae341",
          "md5": "126ba02999d0dabecbc5315e6345b386",
          "sha256": "a01056a262b853a7cd36a9197e4ccca8e9584e30660b64d83cdd6399761a26d4"
        },
        "downloads": -1,
        "filename": "antenna-optimizer-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "126ba02999d0dabecbc5315e6345b386",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47677,
        "upload_time": "2021-10-08T08:52:18",
        "upload_time_iso_8601": "2021-10-08T08:52:18.433302Z",
        "url": "https://files.pythonhosted.org/packages/65/cb/13b283eadbb929a5cce43de335ca8728ded8470d2073d7def3518b5ae341/antenna-optimizer-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e665ad69c8e656183c962155fd70e2b4e53f8dc3b6cb07f39f78ccb08a325300",
          "md5": "97e13ea8819da874776b20df0d558777",
          "sha256": "5394c13f70981cb86e82cb3963ea5d90a1549fc5a590b92553361e5cd22823f3"
        },
        "downloads": -1,
        "filename": "antenna-optimizer-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "97e13ea8819da874776b20df0d558777",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 52142,
        "upload_time": "2021-11-20T15:37:48",
        "upload_time_iso_8601": "2021-11-20T15:37:48.853240Z",
        "url": "https://files.pythonhosted.org/packages/e6/65/ad69c8e656183c962155fd70e2b4e53f8dc3b6cb07f39f78ccb08a325300/antenna-optimizer-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e665ad69c8e656183c962155fd70e2b4e53f8dc3b6cb07f39f78ccb08a325300",
        "md5": "97e13ea8819da874776b20df0d558777",
        "sha256": "5394c13f70981cb86e82cb3963ea5d90a1549fc5a590b92553361e5cd22823f3"
      },
      "downloads": -1,
      "filename": "antenna-optimizer-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "97e13ea8819da874776b20df0d558777",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 52142,
      "upload_time": "2021-11-20T15:37:48",
      "upload_time_iso_8601": "2021-11-20T15:37:48.853240Z",
      "url": "https://files.pythonhosted.org/packages/e6/65/ad69c8e656183c962155fd70e2b4e53f8dc3b6cb07f39f78ccb08a325300/antenna-optimizer-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}