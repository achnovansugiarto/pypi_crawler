{
  "info": {
    "author": "",
    "author_email": "Jonathan Nicolas Libonati <libonati.jonathan@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# directory.py\nThis library is useful for working with structure of files and directories, facilitating the tasks related with those structures, such as getting information, copying, renaming and creating files and directories.\n\n```from directoryPy import directory```\n\n## Class File(path: str)\nThis class creates a File object using a relative or absolute path.\nWhen __File('<new file's path>')__ is instantiated, If the file does not exist, an empty file is created.\n\n```file = File('jonathanlibonati/exampleFile.txt')```\n\n### path\nContains the absolute path as string.\n```\nprint(file.path)\n```\n```\nResult:\n/Users/jonathanlibonati/exampleFile.txt\n```\n\n### dirpath\nContains the absolute path as string of the directory where the file is located.\n```\nprint(file.dirpath)\n```\n```\nResult:\n/Users/jonathanlibonati\n```\n\n### name\nContains the file name as string without the extension.\n```\nprint(file.name)\n```\n```\nResult:\nexampleFile\n```\n\n### extension\nContains the file extension as string.\n```\nprint(file.extension)\n```\n```\nResult:\n.txt\n```\n\n### data()\nReturn a dictionary with the dirpath, path, name and extension.\n```\ndata = file.data()\nprint(data)\n```\n```\nResult:\n{\n    'dirpath': '/Users/jonathanlibonati',\n    'path': '/Users/jonathanlibonati/exampleFile.txt',\n    'name': 'exampleFile',\n    'extension': '.txt'\n}\n```\n\n### rename(name: str)\nRenames the file and returns self. This method uses os.rename() function for renaming the file.\n```\ndata = file.rename('new_name').data()\nprint(data)\n```\n```\nResult:\n{\n    'dirpath': '/Users/jonathanlibonati',\n    'path': '/Users/jonathanlibonati/new_name.txt',\n    'name': 'new_name',\n    'extension': '.txt'\n}\n```\n\n### copy(dir: Directory) - asynchronous\nCopies the file to an especific directory an returns the copied file object. The parameter is an Directory object.\nIt is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n\nFor further information about Directory class, please search the information in this Readme.\n```\nimport asyncio\n\nasync def main():\n    file = File('jonathanlibonati/exampleFile.txt')\n    dir = Directory('/Users/jonathanlibonati/desktop')\n\n    copied_file = await file.copy(dir)\n\n    print(copied_file.data())\n\nasyncio.run(main())\n```\n```\nResult:\n{\n    'dirpath': '/Users/jonathanlibonati/desktop',\n    'path': '/Users/jonathanlibonati/desktop/exampleFile.txt',\n    'name': 'exampleFile',\n    'extension': '.txt'\n}\n```\n\n## Class Directory(path: str)\nThis class creates a Directory object using a relative or absolute path. When __Directory('<new directory's path>')__ is instantiated, If the directory does not exist, an empty directory is created. if the directory already exists, all files and folders inside the directory are created and saved in Directory().file and Directory().directories properties.\n\nFolder used as example:\n```\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|   |\n|   |-- üìÑ subExampleFile2.txt\n|\n|-- üìÅ subExampledir1\n    |\n    |-- üìÑ subExampleFile1.txt\n```\n\n```dir = Directory('/Users/jonathanlibonati/exampleDir')```\n\n### path\nContains the absolute path as string.\n```\nprint(dir.path)\n```\n```\nResult:\n/Users/jonathanlibonati/exampleDir\n```\n\n### name\nContains the directory name as string.\n```\nprint(dir.name)\n```\n```\nResult:\nexampleDir\n```\n\n### files\nContains a dictionary with the Files objects which are inside the directory.\n```\nprint(dir.files)\n```\n```\nResult:\n{\n'exampleFile1.txt': <File object 'exampleFile1'>,\n'exampleFile2.txt': <File object 'exampleFile2'>\n}\n```\n\n### fileslist()\nReturns a list with the Files objects which are inside the directory.\n```\nprint(dir.fileslist())\n```\n```\nResult:\n[<File object 'exampleFile1'>, <File object 'exampleFile2'>]\n```\n\n### directories\nContains a dictionary with the Directory objects which are inside the directory.\n```\nprint(dir.directories)\n```\n```\nResult:\n{\n'subExampledir1': <Directory object 'subExampledir1'>,\n'subExampledir2': <Directory object 'subExampledir2'>\n}\n```\n\n### dirlist()\nReturns a list with the Directory objects which are inside the directory.\n```\nprint(dir.fileslist())\n```\n```\nResult:\n[<Directory object 'subExampledir1'>, <Directory object 'subExampledir2'>]\n```\n\n### tree(levels: int)\nPrints on the terminal the tree of files and directories. The levels parameter indicates how deep to print.\n```\ndir.tree(0)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n```\n```\ndir.tree(1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n```\n```\ndir.tree()\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|   |\n|   |-- üìÑ subExampleFile2.txt\n|\n|-- üìÅ subExampledir1\n    |\n    |-- üìÑ subExampleFile1.txt\n```\n### data()\nReturn a dictionary with the information of root directory and all the files and directories inside.\n```\ndata = dir.data()\n\nprint(data)\n```\n```\nResult:\n{\n    'selfData': {\n        'path': '/Users/jonathanlibonati/exampleDir',\n        'name': 'exampleDir'},\n    'contentData': {\n        'exampleFile1_file': {\n            'dirpath': '/Users/jonathanlibonati/exampleDir',\n            'path': '/Users/jonathanlibonati/exampleDir/exampleFile1.txt',\n            'name': 'exampleFile1',\n            'extension': '.txt'},\n        'exampleFile2_file': {\n            'dirpath': '/Users/jonathanlibonati/exampleDir',\n            'path': '/Users/jonathanlibonati/exampleDir/exampleFile2.txt',\n            'name': 'exampleFile2',\n            'extension': '.txt'},\n        'subExampledir2_dir': {\n            'selfData': {\n                'path': '/Users/jonathanlibonati/exampleDir/subExampledir2',\n                'name': 'subExampledir2'},\n            'contentData': {\n                'subExampleFile2_file': {\n                    'dirpath': '/Users/jonathanlibonati/exampleDir/subExampledir2',\n                    'path': '/Users/jonathanlibonati/exampleDir/subExampledir2/subExampleFile2.txt',\n                    'name': 'subExampleFile2',\n                    'extension': '.txt'\n                }\n            }\n        },\n        'subExampledir1_dir': {\n            'selfData': {\n                'path': '/Users/jonathanlibonati/exampleDir/subExampledir1',\n                'name': 'subExampledir1'},\n            'contentData': {\n                'subExampleFile1_file': {\n                    'dirpath': '/Users/jonathanlibonati/exampleDir/subExampledir1',\n                    'path': '/Users/jonathanlibonati/exampleDir/subExampledir1/subExampleFile1.txt',\n                    'name': 'subExampleFile1',\n                    'extension': '.txt'\n                }\n            }\n        }\n    }\n}\n```\n\n### selfData()\nReturn a dictionary with the information of root directory.\n\n```\ndata = dir.selfData()\n\nprint(data)\n```\n```\n{\n   'path': '/Users/jonathanlibonati/exampleDir',\n   'name': 'exampleDir'\n}\n```\n\n### contentData()\nReturn a dictionary with the information of all the files and directories inside.\n```\ndata = dir.contentData()\n\nprint(data)\n```\n```\nResult:\n{\n    'exampleFile1_file': {\n        'dirpath': '/Users/jonathanlibonati/exampleDir',\n        'path': '/Users/jonathanlibonati/exampleDir/exampleFile1.txt',\n        'name': 'exampleFile1',\n        'extension': '.txt'},\n    'exampleFile2_file': {\n        'dirpath': '/Users/jonathanlibonati/exampleDir',\n        'path': '/Users/jonathanlibonati/exampleDir/exampleFile2.txt',\n        'name': 'exampleFile2',\n        'extension': '.txt'},\n    'subExampledir2_dir': {\n        'selfData': {\n            'path': '/Users/jonathanlibonati/exampleDir/subExampledir2',\n            'name': 'subExampledir2'},\n        'contentData': {\n            'subExampleFile2_file': {\n                'dirpath': '/Users/jonathanlibonati/exampleDir/subExampledir2',\n                'path': '/Users/jonathanlibonati/exampleDir/subExampledir2/subExampleFile2.txt',\n                'name': 'subExampleFile2',\n                'extension': '.txt'\n            }\n        }\n    },\n    'subExampledir1_dir': {\n        'selfData': {\n            'path': '/Users/jonathanlibonati/exampleDir/subExampledir1',\n            'name': 'subExampledir1'},\n        'contentData': {\n            'subExampleFile1_file': {\n                'dirpath': '/Users/jonathanlibonati/exampleDir/subExampledir1',\n                'path': '/Users/jonathanlibonati/exampleDir/subExampledir1/subExampleFile1.txt',\n                'name': 'subExampleFile1',\n                'extension': '.txt'\n            }\n        }\n    }\n}\n```\n\n### newDir(name: str)\nCreates and returns a new directory inside the root directory. If the directory exists already, a FileExistsError is raised.\n```\ndir.newDir('subExampledir3')\n\ndir.tree(1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n|\n|-- üìÅ subExampledir3\n```\n\n### newFile(name: str)\nCreates and returns a new empty file inside the root directory. If the file exists already, a FileExistsError is raised.\n```\ndir.newFile('exampleFile3.txt')\n\ndir.tree(1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|-- üìÑ exampleFile3.txt\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n```\n\n### removeFile(file: File)\nRemoves an existing file inside the root directory.\n```\nfile_1 = dir.files['exampleFile1.txt']\n\ndir.removeFile(file_1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n```\n\n### removeFiles(*args: File)\nRemoves multiple existing files inside the root directory.\n```\nfile_1 = dir.files['exampleFile1.txt']\nfile_2 = dir.files['exampleFile2.txt']\n\ndir.removeFiles(file_1, file_2)\n\ndir.tree(1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n```\n\n### removeAllFiles()\nRemoves all files inside the root directory.\n```\ndir.removeAllFiles()\n\nprint(dir.files)\ndir.tree(1)\n```\n```\nResult:\n{}\n\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n```\n\n### removeDir(dir: Directory)\nRemoves an existing directory inside the root directory.\n```\nsub_dir_1 = dir.directories['subExampledir1']\n\ndir.removeDir(sub_dir_1)\n\ndir.tree(1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n```\n### removeDirs(*args: Directory)\nRemoves multiple existing directories inside the root directory.\n```\nsub_dir_1 = dir.directories['subExampledir1']\nsub_dir_2 = dir.directories['subExampledir2']\n\ndir.removeDirs(sub_dir_1, sub_dir_2)\n\ndir.tree(1)\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n```\n\n### removeAllDirs()\nRemoves all directories inside the root directory.\n```\ndir.removeAllDirs()\n\nprint(dir.directories)\ndir.tree(1)\n```\n```\nResult:\n{}\n\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n```\n\n### empty()\nRemoves all directories and files inside the root directory.\n```\ndir.empty()\n\nprint(dir.directories)\nprint(dir.files)\ndir.tree(1)\n```\n```\nResult:\n{}\n{}\n\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n```\n\n### addFiles(*args: File) - asynchronous\nAdds files to the root directory and returns it. It is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n```\nimport asyncio\n\nasync def main():\n    dir = Directory('/Users/jonathanlibonati/exampleDir')\n\n    file_a = File('/Users/jonathanlibonati/file_a.txt')\n    file_b = File('/Users/jonathanlibonati/file_b.txt')\n\n    await dir.addFiles(file_a, file_b)\n\n    dir.tree(1)\n\nasyncio.run(main())\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|-- üìÑ file_a.txt\n|-- üìÑ file_b.txt\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n```\n\n### addDirectories(*args: Directory) - asynchronous\nAdds directories to the root directory and returns it. It is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n```\nimport asyncio\n\nasync def main():\n    dir = Directory('/Users/jonathanlibonati/exampleDir')\n\n    dir_a = Directory('/Users/jonathanlibonati/dir_a')\n    dir_b = Directory('/Users/jonathanlibonati/dir_b')\n\n    await dir.addDirectories(dir_a, dir_b)\n\n    dir.tree(1)\n\nasyncio.run(main())\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/exampleDir\n\nüìÅ exampleDir\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|\n|-- üìÅ subExampledir1\n|\n|-- üìÅ dir_a\n|\n|-- üìÅ dir_b\n```\n\n### copyFilesTo(dir: Directory) - asynchronous\nCopies the files of the root directory to other directory. It is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n```\nimport asyncio\n\nasync def main():\n    dir = Directory('/Users/jonathanlibonati/exampleDir')\n    dir_a = Directory('/Users/jonathanlibonati/dir_a')\n\n    await dir.copyFilesTo(dir_a)\n\n    dir_a.tree(1)\n\nasyncio.run(main())\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/dir_a\n\nüìÅ dir_a\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n```\n\n### copyDirsTo(dir: Directory) - asynchronous\nCopies the directories of the root directory to other directory. It is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n```\nimport asyncio\n\nasync def main():\n    dir = Directory('/Users/jonathanlibonati/exampleDir')\n    dir_a = Directory('/Users/jonathanlibonati/dir_a')\n\n    await dir.copyDirsTo(dir_a)\n\n    dir_a.tree()\n\nasyncio.run(main())\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/dir_a\n\nüìÅ dir_a\n|\n|-- üìÅ subExampledir2\n|   |\n|   |-- üìÑ subExampleFile2.txt\n|\n|-- üìÅ subExampledir1\n    |\n    |-- üìÑ subExampleFile1.txt\n```\n\n### copyAllTo(self, dir: Directory) - asynchronous\nCopies the files and directories of the root directory to other directory. It is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n```\nimport asyncio\n\nasync def main():\n    dir = Directory('/Users/jonathanlibonati/exampleDir')\n    dir_a = Directory('/Users/jonathanlibonati/dir_a')\n\n    await dir.copyAllTo(dir_a)\n\n    dir_a.tree()\n\nasyncio.run(main())\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/dir_a\n\nüìÅ dir_a\n|\n|-- üìÑ exampleFile1.txt\n|-- üìÑ exampleFile2.txt\n|\n|-- üìÅ subExampledir2\n|   |\n|   |-- üìÑ subExampleFile2.txt\n|\n|-- üìÅ subExampledir1\n    |\n    |-- üìÑ subExampleFile1.txt\n```\n\n### copy(self, dir: Directory) - asynchronous\nCopies the root directory to other directory. It is an asynchronous method, therefore it is \"awaitable\" and uses asyncio.\n```\nimport asyncio\n\nasync def main():\n    dir = Directory('/Users/jonathanlibonati/exampleDir')\n    dir_a = Directory('/Users/jonathanlibonati/dir_a')\n\n    await dir.copy(dir_a)\n\n    dir_a.tree()\n\nasyncio.run(main())\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/dir_a\n\nüìÅ dir_a\n|\n|-- üìÅ exampleDir\n    |\n    |-- üìÑ exampleFile1.txt\n    |-- üìÑ exampleFile2.txt\n    |\n    |-- üìÅ subExampledir2\n    |   |\n    |   |-- üìÑ subExampleFile2.txt\n    |\n    |-- üìÅ subExampledir1\n        |\n        |-- üìÑ subExampleFile1.txt\n```\n\n### findDirs([name_1, name_2 ...], deepLevel = -1):\nFinds and returns a list of dirs which match with the list of names passed as parameter. By default, the searching is made on all the tree but the scope of the search can be set by the deepLevel parameter.\n\n```\ndir_matches_list = dir.findDirs([\"subExampledir1\"])\n\n    for dir in dir_matches_list:\n        dir.tree()\n        print('====================================')\n```\n```\nResult:\nüõ£Ô∏è /Users/jonathanlibonati/Desktop/exampleDir/subExampledir1\n\nüìÅ subExampledir1\n|\n|-- üìÑ subExampleFile1.txt\n\n====================================\n\nüõ£Ô∏è /Users/jonathanlibonati/Desktop/exampleDir/subExampledir2\n\nüìÅ subExampledir2\n|\n|-- üìÑ subExampleFile2.txt\n\n====================================\n```\n\n### findFilesByName([name_1, name_2 ...], deepLevel = -1):\nFinds and returns a list of Files which match with the list of names passed as parameter. By default, the searching is made on all the tree but but the scope of the search can be set by the deepLevel parameter.\n\n```\nfiles_matches_list = dir.findFilesByName([\"subExampleFile1\"])\n\n    for file in files_matches_list:\n        print('')\n        print(f'--File Path: {file.path}')\n        print(f'--File Dir Path: {file.dirpath}')\n        print(f'--File Name: {file.name}')\n        print(f'--File Type: {file.extension}')\n        print(f'--File Data: {file.data()}')\n        print('====================================')\n```\n```\nResult:\n--File Path: /Users/jonathanlibonati/Desktop/exampleDir/subExampledir1/subExampleFile1.txt\n--File Dir Path: /Users/jonathanlibonati/Desktop/exampleDir/subExampledir1\n--File Name: subExampleFile1\n--File Type: .txt\n--File Data: {'dirpath': '/Users/jonathanlibonati/Desktop/exampleDir/subExampledir1', 'path': '/Users/jonathanlibonati/Desktop/exampleDir/subExampledir1/subExampleFile1.txt', 'name': 'subExampleFile1', 'extension': '.txt'}\n```\n\n### findFilesByExtension([extension_1, extension_2 ...], deepLevel = -1):\nFinds and returns a list of Files which match with the list of extensions passed as parameter. By default, the searching is made on all the tree but but the scope of the search can be set by the deepLevel parameter.\n\n```\nfiles_matches_list = dir.findFilesByExtension([\".txt\"])\n\n    for file in files_matches_list:\n        print('')\n        print(f'--File Path: {file.path}')\n        print(f'--File Dir Path: {file.dirpath}')\n        print(f'--File Name: {file.name}')\n        print(f'--File Type: {file.extension}')\n        print('====================================')\n```\n```\nResult:\n--File Path: /Users/jonathanlibonati/Desktop/exampleDir/exampleFile1.txt\n--File Dir Path: /Users/jonathanlibonati/Desktop/exampleDir\n--File Name: exampleFile1\n--File Type: .txt\n====================================\n\n--File Path: /Users/jonathanlibonati/Desktop/exampleDir/exampleFile2.txt\n--File Dir Path: /Users/jonathanlibonati/Desktop/exampleDir\n--File Name: exampleFile2\n--File Type: .txt\n====================================\n\n--File Path: /Users/jonathanlibonati/Desktop/exampleDir/subExampledir1/subExampleFile1.txt\n--File Dir Path: /Users/jonathanlibonati/Desktop/exampleDir/subExampledir1\n--File Name: subExampleFile1\n--File Type: .txt\n====================================\n\n--File Path: /Users/jonathanlibonati/Desktop/exampleDir/subExampledir2/subExampleFile2.txt\n--File Dir Path: /Users/jonathanlibonati/Desktop/exampleDir/subExampledir2\n--File Name: subExampleFile2\n--File Type: .txt\n====================================\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "directoryPy",
    "package_url": "https://pypi.org/project/directoryPy/",
    "platform": null,
    "project_url": "https://pypi.org/project/directoryPy/",
    "project_urls": {
      "Homepage": "https://github.com/JonaLibonati/directoryPy"
    },
    "release_url": "https://pypi.org/project/directoryPy/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "This library is useful for working with structure of files and directories, facilitating the tasks related with those structures, such as getting information, copying, renaming and creating files and directories.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17045257,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cf897351aca8b514ccfda9807107beeb401e8d2baa4762129ee5b7a2f461459",
          "md5": "ce385c0c76c7eba781104541efe82f89",
          "sha256": "4c5774701c1d6a2241eca6f9110f8be605d0b18d204ae01ea1549c1e4d79a75b"
        },
        "downloads": -1,
        "filename": "directorypy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce385c0c76c7eba781104541efe82f89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6758,
        "upload_time": "2023-02-26T01:49:02",
        "upload_time_iso_8601": "2023-02-26T01:49:02.231566Z",
        "url": "https://files.pythonhosted.org/packages/3c/f8/97351aca8b514ccfda9807107beeb401e8d2baa4762129ee5b7a2f461459/directorypy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3617d99255fd0c3147e9627bcf366d75c36ed4c3760416b8b1cb16d6b708326d",
          "md5": "ce7026708ca5c1b1b504b8bb4038e6f9",
          "sha256": "ab3ffbaec62f9e2d93c83f671a4523033f118b02f9033b7ccdf84957092ecac2"
        },
        "downloads": -1,
        "filename": "directorypy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce7026708ca5c1b1b504b8bb4038e6f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7058,
        "upload_time": "2023-02-26T01:49:04",
        "upload_time_iso_8601": "2023-02-26T01:49:04.447140Z",
        "url": "https://files.pythonhosted.org/packages/36/17/d99255fd0c3147e9627bcf366d75c36ed4c3760416b8b1cb16d6b708326d/directorypy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3cf897351aca8b514ccfda9807107beeb401e8d2baa4762129ee5b7a2f461459",
        "md5": "ce385c0c76c7eba781104541efe82f89",
        "sha256": "4c5774701c1d6a2241eca6f9110f8be605d0b18d204ae01ea1549c1e4d79a75b"
      },
      "downloads": -1,
      "filename": "directorypy-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce385c0c76c7eba781104541efe82f89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 6758,
      "upload_time": "2023-02-26T01:49:02",
      "upload_time_iso_8601": "2023-02-26T01:49:02.231566Z",
      "url": "https://files.pythonhosted.org/packages/3c/f8/97351aca8b514ccfda9807107beeb401e8d2baa4762129ee5b7a2f461459/directorypy-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3617d99255fd0c3147e9627bcf366d75c36ed4c3760416b8b1cb16d6b708326d",
        "md5": "ce7026708ca5c1b1b504b8bb4038e6f9",
        "sha256": "ab3ffbaec62f9e2d93c83f671a4523033f118b02f9033b7ccdf84957092ecac2"
      },
      "downloads": -1,
      "filename": "directorypy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ce7026708ca5c1b1b504b8bb4038e6f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7058,
      "upload_time": "2023-02-26T01:49:04",
      "upload_time_iso_8601": "2023-02-26T01:49:04.447140Z",
      "url": "https://files.pythonhosted.org/packages/36/17/d99255fd0c3147e9627bcf366d75c36ed4c3760416b8b1cb16d6b708326d/directorypy-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}