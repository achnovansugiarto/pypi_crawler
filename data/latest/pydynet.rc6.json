{
  "info": {
    "author": "Welt Xing",
    "author_email": "xingcy@smail.nju.edu.cn",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyDyNet：Neuron Network(DNN, CNN, RNN, etc) implementation using Numpy based on Autodiff\n\n前作：[PyNet: Use NumPy to build neuron network](https://github.com/Kaslanarian/PyNet)。在那里我们基于求导规则实现了全连接网络。在这里，我们向当今的深度学习框架看齐，实现属于自己的DL框架。\n\n**PyDyNet已被多个技术公众号和社区分享**：[居然用Numpy实现了一个深度学习框架](https://segmentfault.com/a/1190000042108301).\n\n[![Downloads](https://pepy.tech/badge/pydynet)](https://pepy.tech/project/pydynet)\n[![Downloads](https://static.pepy.tech/personalized-badge/pydynet?period=month&units=international_system&left_color=grey&right_color=orange&left_text=downloads/month)](https://pepy.tech/project/pydynet)\n![](https://img.shields.io/pypi/l/pydynet)\n![](https://img.shields.io/pypi/implementation/numpy)\n![](https://img.shields.io/github/stars/Kaslanarian/PyDyNet?style=social)\n![](https://img.shields.io/github/forks/Kaslanarian/PyDyNet?style=social)\n\n<details><summary>更新日志</summary>\n<p>\n\n- 5.10: ver 0.0.1 修改损失函数的定义方式：加入reduction机制，加入Embedding;\n- 5.15: ver 0.0.2 重构了RNN, LSTM和GRU，支持双向;\n- 5.16: ver 0.0.2 允许PyDyNet作为第三方库安装；开始手册的撰写(基于Sphinx).\n- 5.29: ver 0.0.3 加入了Dataset和Dataloader，现在可以像PyTorch一样定义数据集和分割数据集，具体参考[data.py](/pydynet/data.py)中的`train_loader`函数；\n- 5.30: ver 0.0.3 将一维卷积算法退化成基于循环的im2col，新版本NumPy似乎不是很支持strided上数组的魔改；\n- 7.22: ver 0.0.4/0.05 增加了Module类和Parameter类，将模块重组、增加多种Pytorch支持的初始化方式；正在撰写新的Manual；\n- 7.28: ver 0.0.6 加入no_grad方法，可以像pytorch一样禁止自动微分，比如`@no_grad()`和`with no_grad()`，详见[autograd.py](/pydynet/autograd.py);\n- 8.09: ver 0.0.7 基于[cupy](https://cupy.dev/)，PyDyNet现在可以使用显卡加速训练，用法与PyTorch一致，详见[tests](./tests)中`cu*.py`；\n- 8.18: ver 0.0.8 加入学习率调整策略，实现了训练过程中自动调节学习率；\n- 10.21: ver 0.0.9 加入tensor的split方法，基于此改进了RNN；\n- 10.23: ver 0.0.10 重写RNN, LSTM和GRU，支持多层双向；\n- ...\n\n</p>\n</details>\n\n## Overview\n\nPyDyNet也是纯NumPy(0.0.7版本后加入CuPy，其用法和NumPy一致)实现的神经网络，语法受PyTorch的启发，大致结构如下：\n\n```mermaid\ngraph BT\n   N(numpy.ndarray/cupy.ndarray) ----> ds(Dataset) ----> Data(DataLoader)--> Mission\n   N --> A(Tensor) --Eager execution--> B(Basic operators: add, exp, etc)\n   B -.Autograd-.-> A\n   B --> CO(Complex operators:softmax,etc)\n   --> f(Function:linear, conv2d, etc) \n   --> M(Basic Module:Linear,Conv2d,etc)\n   --> CM(Advanced Module:CNN,RNN,etc)\n   --> Mission(PyDyNet)\n   N --> GD(Optimizer:SGD, Adam, etc) ----> LS(lr_scheduler:StepLR, etc)--> Mission\n```\n\n虚线表示用户可以通过`no_grad`来关闭自动微分功能。\n\n文件结构\n\n```bash\npydynet\n├── __init__.py\n├── autograd.py       # 微分控制模块\n├── cuda.py           # cuda功能模块\n├── data.py           # 数据集模块\n├── nn                # 神经网络模块\n│   ├── __init__.py   \n│   ├── functional.py # 函数类\n│   ├── init.py       # 初始化模块\n│   ├── modules\n│   │   ├── __init__.py\n│   │   ├── activation.py # 激活函数\n│   │   ├── batchnorm.py  # BN\n│   │   ├── conv.py       # 卷积\n│   │   ├── dropout.py    # Dropout\n│   │   ├── linear.py     # 线性层\n│   │   ├── loss.py       # 损失函数类\n│   │   ├── module.py     # Module基类，包括Sequential\n│   │   ├── pool.py       # 池化\n│   │   └── rnn.py        # RNN\n│   └── parameter.py      # 参数化类\n├── optim\n│   ├── __init__.py\n│   ├── lr_scheduler.py   # 学习率衰减策略\n│   └── optimizer.py      # 优化器类\n└── tensor.py             # 张量类\n```\n\n我们实现了：\n\n1. 将NumPy数组包装成具有梯度等信息的张量(Tensor):\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   from pydynet import Tensor\n\n   x = Tensor(1., requires_grad=True)\n   print(x.data) # 1.\n   print(x.ndim, x.shape, x.is_leaf) # 0, (), True\n   ```\n   </p>\n   </details>\n\n2. 将NumPy数组的计算(包括数学运算、切片、形状变换等)抽象成基础算子(Basic operators)，并对部分运算加以重载：\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet as pdn\n   from pydynet import Tensor\n\n   x = Tensor([1, 2, 3])\n   y = pdn.exp(x) + x\n   z = pdn.sum(x)\n   print(z.data) # 36.192...\n   ```\n   </p>\n   </details>\n\n3. 手动编写基础算子的梯度，实现和PyTorch相同的动态图自动微分机制(Autograd)，从而实现反向传播\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet as pdn\n   from pydynet import Tensor\n\n   x = Tensor([1., 2., 3.], requires_grad=True)\n   y = pdn.log(x) + x\n   z = pdn.sum(y)\n\n   z.backward()\n   print(x.grad) # [2., 1.5, 1.33333333]\n   ```\n   </p>\n   </details>\n\n4. 基于基础算子实现更高级的算子(Complex operators)，它们不再需要手动编写导数：\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet as pdn\n\n   def simple_sigmoid(x: pdn.Tensor):\n       return 1 / (1 + pdn.exp(-x))\n   ```\n   </p>\n   </details>\n\n5. 实现了Mudule，包括激活函数，损失函数等，从而我们可以像下面这样定义神经网络，损失函数项：\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet.nn as nn\n   import pydynet.nn.functional as F\n\n   n_input = 64\n   n_hidden = 128\n   n_output = 10\n\n   class Net(nn.Module):\n       def __init__(self) -> None:\n           super().__init__()\n           self.fc1 = nn.Linear(n_input, n_hidden)\n           self.fc2 = nn.Linear(n_hidden, n_output)\n\n       def forward(self, x):\n           x = self.fc1(x)\n           x = F.sigmoid(x)\n           return self.fc2(x)\n\n   net = Net()\n   loss = nn.CrossEntropyLoss()\n   l = loss(net(X), y)\n   l.backward()\n   ```\n   </p>\n   </details>\n\n6. 实现了多种优化器和学习率衰减策略，从而实现神经网络的训练；其中优化器和PyTorch一样支持权值衰减，即正则化：\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   from pydynet.optim import Adam, StepLR\n\n   ...\n   net = Net()\n   optimizer = Adam(net.parameters(), lr=0.01)\n   lr_scheduler = StepLR(optimizer, step_size=10)\n\n   for epoch in range(EPOCHES):\n       for data in data_loader:\n           train(...)\n           optimizer.step()\n       lr_scheduler.step()\n   ```\n   </p>\n   </details>\n7. 实现了Dataset和DataLoader对数据集进行加载与划分：\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   from pydynet.data import Dataset, DataLoader\n   \n   class TrainSet(Dataset):\n       def __init__(self, X, y) -> None:\n           self.data = X\n           self.target = y\n\n       def __getitem__(self, index):\n           return self.data[index], self.target[index]\n\n       def __len__(self):\n           return len(self.data)\n\n    data_loader = DataLoader(TrainSet(X, y), batch_size, shuffle)\n   ```\n   </p>\n   </details>\n8. Dropout机制，Batch Normalization机制，以及将网络划分成训练阶段和评估阶段；\n9. 基于im2col高效实现Conv1d, Conv2d, max_pool1d和max_pool2d，从而实现CNN；\n10. 支持多层的**多层双向**RNN，LSTM和GRU；\n11. 多种初始化方式，包括Kaiming和Xavier；\n12. 基于cupy实现了显卡计算和训练：\n    <details><summary>Example</summary>\n    <p>\n\n    ```python\n    from pydynet import Tensor\n       \n    x = Tensor([1., 2., 3.], device='cuda')\n    y = Tensor([1., 2., 3.], device='cuda')\n    z = (x * y).sum()\n\n    w = Tensor([1., 2., 3.]) # CPU上的Tensor\n    x * w # 报错\n    ```\n    </p>\n    </details>\n\n## Install\n\n```bash\npip install pydynet\n```\n\n或本地安装\n\n```bash\ngit clone https://github.com/Kaslanarian/PyDyNet\ncd PyDyNet\npython setup.py install\n```\n\n安装成功后就可以运行下面的例子\n\n## Example\n\n[tests](./tests)中是一些例子。\n\n### AutoDiff\n\n[autodiff.py](tests/autodiff.py)利用自动微分，对一个凸函数进行梯度下降：\n\n![ad](src/autodiff.png)\n\n### DNN\n\n[DNN.py](tests/DNN.py)使用全连接网络对`sklearn`提供的数字数据集进行分类，训练参数\n\n- 网络结构：Linear(64->64) + Sigmoid + Linear(64->10)；\n- 损失函数：Cross Entropy Loss；\n- 优化器：Adam(lr=0.01)；\n- 训练轮次：50；\n- 批大小(Batch size)：32.\n\n训练损失，训练准确率和测试准确率：\n\n<img src=\"src/DNN.png\" alt=\"dnn\" style=\"zoom:67%;\" />\n\n### CNN\n\n[CNN.py](tests/CNN.py)使用三种网络对`fetch_olivetti_faces`人脸(64×64)数据集进行分类并进行性能对比：\n\n1. Linear + Sigmoid + Linear;\n2. Conv1d + MaxPool1d + Linear + ReLU + Linear;\n3. Conv2d + MaxPool2d + Linear + ReLU + Linear.\n\n其余参数相同：\n\n- 损失函数：Cross Entropy Loss；\n- 优化器：Adam(lr=0.01)；\n- 训练轮次：50；\n- 批大小(Batch size)：32.\n\n学习效果对比：\n\n<img src=\"src/CNN.png\" alt=\"cnn\" style=\"zoom:67%;\" />\n\n## Droput & BN\n\n[dropout_BN.py](tests/dropout_BN.py)使用三种网络对`fetch_olivetti_faces`人脸(64×64)数据集进行分类并进行性能对比：\n\n1. Linear + Sigmoid + Linear;\n2. Linear + Dropout(0.05) + Sigmoid + Linear;\n3. Linear + BN + Sigmoid + Linear.\n\n其余参数相同：\n\n- 损失函数：Cross Entropy Loss；\n- 优化器：Adam(lr=0.01)；\n- 训练轮次：50；\n- 批大小(Batch size)：32.\n\n学习效果对比：\n\n<img src=\"src/dropout_BN.png\" alt=\"BN\" style=\"zoom:67%;\" />\n\n## RNN\n\n[RNN.py](tests/RNN.py)中是一个用双向单层GRU对`sklearn`的数字图片数据集进行分类：\n\n<img src=\"src/RNN.png\" alt=\"RNN\" style=\"zoom:67%;\" />\n\n## cuda相关\n\n[cuDNN.py](tests/cuDNN.py), [cuCNN.py](tests/cuCNN.py), [cuDropoutBN.py](tests/cuDropoutBN.py), [cuRNN.py](tests/cuRNN.py)分别是上面四种网络的cuda版本，并对网络进行了相应的修改，主要是介绍如何使用PyDyNet的显卡功能，且已经在无显卡和有显卡的环境下都通过了测试。\n\n|  Net  |         Dataset          |        Parameters        |   CPU time   |   GPU time   |\n| :---: | :----------------------: | :----------------------: | :----------: | :----------: |\n|  FC   |     Digits (1970×64)     | batch_size=128, epoch=50 | 30.8s±392ms  | 22.4s±298ms  |\n| CNN1d | OlivettiFaces (400×4096) | batch_size=64, epoch=50  | 8.76s±68.7ms | 4.49s±16.3ms |\n| CNN2d | OlivettiFaces (400×4096) | batch_size=64, epoch=50  | 14.1s±285ms  |  4.54s±49ms  |\n\n事实上，对于越庞大的网络（更宽，更深，卷积），GPU加速效果更好。\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kaslanarian/PyDyNet",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "Welt Xing",
    "maintainer_email": "xingcy@smail.nju.edu.cn",
    "name": "pydynet",
    "package_url": "https://pypi.org/project/pydynet/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydynet/",
    "project_urls": {
      "Homepage": "https://github.com/Kaslanarian/PyDyNet"
    },
    "release_url": "https://pypi.org/project/pydynet/0.0.10/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15499612,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32702c7dcf6fdc71631c8038b6532578957ea1bc3925a688b1113015c8a8e051",
          "md5": "34d801f661a414a277b02a121d103d68",
          "sha256": "c845704eaf77a537beefa695069ada161dc6dd58f0dac64979461baff3e147b2"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34d801f661a414a277b02a121d103d68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32513,
        "upload_time": "2022-10-23T07:22:55",
        "upload_time_iso_8601": "2022-10-23T07:22:55.456266Z",
        "url": "https://files.pythonhosted.org/packages/32/70/2c7dcf6fdc71631c8038b6532578957ea1bc3925a688b1113015c8a8e051/pydynet-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0513d320c2e9d01e801d3f5f549b48023fa540d2e27add9922ece28b82fad33d",
          "md5": "5d6343d4d4edf4200a7684f9d8c3f572",
          "sha256": "8d3663e572dc05799462ba5be61f8a65153c03d735291b42fcfbef7887758ec2"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "5d6343d4d4edf4200a7684f9d8c3f572",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30895,
        "upload_time": "2022-10-23T07:22:57",
        "upload_time_iso_8601": "2022-10-23T07:22:57.384258Z",
        "url": "https://files.pythonhosted.org/packages/05/13/d320c2e9d01e801d3f5f549b48023fa540d2e27add9922ece28b82fad33d/pydynet-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7993d9cddbc5e56e6d41bd7a3f08b6a82bbae716395c49a7a295aea7a18f5706",
          "md5": "c5e7ef641bdb93fe2889a2fd3c5bea92",
          "sha256": "842e08d11b3510fe2c8bfe625af6e371d60790bd7b7b281ab9244c2af8887cb6"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5e7ef641bdb93fe2889a2fd3c5bea92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23349,
        "upload_time": "2022-07-22T04:31:17",
        "upload_time_iso_8601": "2022-07-22T04:31:17.088719Z",
        "url": "https://files.pythonhosted.org/packages/79/93/d9cddbc5e56e6d41bd7a3f08b6a82bbae716395c49a7a295aea7a18f5706/pydynet-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f29b5e392e04a93821c90cbf0ccdd9824e61fc9193c433aaf0f83377e89d978b",
          "md5": "dc7e6ac45757dd44f39acd7839737e04",
          "sha256": "bf810be6181ecbf0afa2dcec9fbdf830a6aa80b0d99886344f5f8594710e9e3c"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dc7e6ac45757dd44f39acd7839737e04",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22022,
        "upload_time": "2022-07-22T04:31:19",
        "upload_time_iso_8601": "2022-07-22T04:31:19.112893Z",
        "url": "https://files.pythonhosted.org/packages/f2/9b/5e392e04a93821c90cbf0ccdd9824e61fc9193c433aaf0f83377e89d978b/pydynet-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8fd8705d1c0286c0a66778d5899ba99aeec3192850d953448d8bcf03c65e2b9",
          "md5": "f5742635c1aa7071ad8f4615935c08a4",
          "sha256": "d0cd9a066f592cc5fdbd41a37675fc2fccf0c15a26a2ee6a7f9f1e79f4815e26"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5742635c1aa7071ad8f4615935c08a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24065,
        "upload_time": "2022-07-28T16:14:06",
        "upload_time_iso_8601": "2022-07-28T16:14:06.517351Z",
        "url": "https://files.pythonhosted.org/packages/b8/fd/8705d1c0286c0a66778d5899ba99aeec3192850d953448d8bcf03c65e2b9/pydynet-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3fea0436b21b499766a49bd8ae71d16907c81f3d2ddf5250794b05314cc36fe",
          "md5": "d0e19914ffc6e3b33acbb41dda0053c7",
          "sha256": "eea12fbc90a03035f028bc7e6bc2118a4aad3f3e6a836f5763c197959edfdb05"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d0e19914ffc6e3b33acbb41dda0053c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22619,
        "upload_time": "2022-07-28T16:14:08",
        "upload_time_iso_8601": "2022-07-28T16:14:08.953217Z",
        "url": "https://files.pythonhosted.org/packages/c3/fe/a0436b21b499766a49bd8ae71d16907c81f3d2ddf5250794b05314cc36fe/pydynet-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f061b24cb22c26e694ef02b03de7f537532872a645a036b3993398b4b5674091",
          "md5": "45e28ca3d8ed428b594a020c656343ea",
          "sha256": "abda096f3fe50bd9d08309c1411da844caced6c10955534905c38ab9621a282d"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45e28ca3d8ed428b594a020c656343ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27083,
        "upload_time": "2022-08-09T11:55:57",
        "upload_time_iso_8601": "2022-08-09T11:55:57.074674Z",
        "url": "https://files.pythonhosted.org/packages/f0/61/b24cb22c26e694ef02b03de7f537532872a645a036b3993398b4b5674091/pydynet-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b592a8932b7b2ab0964c1724ae3d8a2f479c9f18fa09f9a6fd140985055ea56",
          "md5": "12235940db6ca00b79d4698196383457",
          "sha256": "33caca119adf368b5f330dda72f2083d1e540620e0d196abd0997a96cd3579a1"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "12235940db6ca00b79d4698196383457",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25895,
        "upload_time": "2022-08-09T11:55:59",
        "upload_time_iso_8601": "2022-08-09T11:55:59.566954Z",
        "url": "https://files.pythonhosted.org/packages/1b/59/2a8932b7b2ab0964c1724ae3d8a2f479c9f18fa09f9a6fd140985055ea56/pydynet-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50b036a17ac103324c1cafb794b024f381d0f0655f5c566c1d276f6a4f8ebdfd",
          "md5": "0aee9b5a95e9cf8e3e94ffc250249243",
          "sha256": "c566f38f6dbcdef5bf7d6d925025b2ec716433d9efd4454962f98320f43a81ca"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0aee9b5a95e9cf8e3e94ffc250249243",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29459,
        "upload_time": "2022-08-18T11:30:17",
        "upload_time_iso_8601": "2022-08-18T11:30:17.758158Z",
        "url": "https://files.pythonhosted.org/packages/50/b0/36a17ac103324c1cafb794b024f381d0f0655f5c566c1d276f6a4f8ebdfd/pydynet-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c863cfa436d99265c57fa230b6dde50871635c145cb3b7ab7a8e2bb504f2567c",
          "md5": "029f66772b460215131a3e32847463eb",
          "sha256": "c94d58fc5085f1c8647c3721d685bc921b036935d12fc3b16e71a13f8d6cebf6"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "029f66772b460215131a3e32847463eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28144,
        "upload_time": "2022-08-18T11:30:19",
        "upload_time_iso_8601": "2022-08-18T11:30:19.708716Z",
        "url": "https://files.pythonhosted.org/packages/c8/63/cfa436d99265c57fa230b6dde50871635c145cb3b7ab7a8e2bb504f2567c/pydynet-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1a2e5739dc33d40e3840257dd9a4f9427f8947acf496fd714d29b31fe476a98",
          "md5": "425c72e7515c88ccc507df777a16dc5e",
          "sha256": "f5865cf7728c16adea0eb36b4f3d3d9e5d7632edc264d59313a3018d7b584650"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "425c72e7515c88ccc507df777a16dc5e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30838,
        "upload_time": "2022-10-21T13:06:19",
        "upload_time_iso_8601": "2022-10-21T13:06:19.549884Z",
        "url": "https://files.pythonhosted.org/packages/d1/a2/e5739dc33d40e3840257dd9a4f9427f8947acf496fd714d29b31fe476a98/pydynet-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06054c9e7841fb01f92b3b5337be183fe226c0fd85e01503cef19448278b13d2",
          "md5": "dcc26342cdc603562f70bcac6d36b4e4",
          "sha256": "61fe843a7b63200d6f8b9ca43aca774e8730e7b6ac6f192765c6e5993dc2755a"
        },
        "downloads": -1,
        "filename": "pydynet-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "dcc26342cdc603562f70bcac6d36b4e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29513,
        "upload_time": "2022-10-21T13:06:21",
        "upload_time_iso_8601": "2022-10-21T13:06:21.831480Z",
        "url": "https://files.pythonhosted.org/packages/06/05/4c9e7841fb01f92b3b5337be183fe226c0fd85e01503cef19448278b13d2/pydynet-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32702c7dcf6fdc71631c8038b6532578957ea1bc3925a688b1113015c8a8e051",
        "md5": "34d801f661a414a277b02a121d103d68",
        "sha256": "c845704eaf77a537beefa695069ada161dc6dd58f0dac64979461baff3e147b2"
      },
      "downloads": -1,
      "filename": "pydynet-0.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34d801f661a414a277b02a121d103d68",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32513,
      "upload_time": "2022-10-23T07:22:55",
      "upload_time_iso_8601": "2022-10-23T07:22:55.456266Z",
      "url": "https://files.pythonhosted.org/packages/32/70/2c7dcf6fdc71631c8038b6532578957ea1bc3925a688b1113015c8a8e051/pydynet-0.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0513d320c2e9d01e801d3f5f549b48023fa540d2e27add9922ece28b82fad33d",
        "md5": "5d6343d4d4edf4200a7684f9d8c3f572",
        "sha256": "8d3663e572dc05799462ba5be61f8a65153c03d735291b42fcfbef7887758ec2"
      },
      "downloads": -1,
      "filename": "pydynet-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "5d6343d4d4edf4200a7684f9d8c3f572",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30895,
      "upload_time": "2022-10-23T07:22:57",
      "upload_time_iso_8601": "2022-10-23T07:22:57.384258Z",
      "url": "https://files.pythonhosted.org/packages/05/13/d320c2e9d01e801d3f5f549b48023fa540d2e27add9922ece28b82fad33d/pydynet-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}