{
  "info": {
    "author": "Simone Bacchio",
    "author_email": "s.bacchio@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "## I/O functions for Python and LQCD file formats\n\n[![python](https://img.shields.io/pypi/pyversions/lyncs_io.svg?logo=python&logoColor=white)](https://pypi.org/project/lyncs_io/)\n[![pypi](https://img.shields.io/pypi/v/lyncs_io.svg?logo=python&logoColor=white)](https://pypi.org/project/lyncs_io/)\n[![license](https://img.shields.io/github/license/Lyncs-API/lyncs.io?logo=github&logoColor=white)](https://github.com/Lyncs-API/lyncs.io/blob/master/LICENSE)\n[![build & test](https://img.shields.io/github/workflow/status/Lyncs-API/lyncs.io/build%20&%20test?logo=github&logoColor=white)](https://github.com/Lyncs-API/lyncs.io/actions)\n[![codecov](https://img.shields.io/codecov/c/github/Lyncs-API/lyncs.io?logo=codecov&logoColor=white)](https://codecov.io/gh/Lyncs-API/lyncs.io)\n[![pylint](https://img.shields.io/badge/pylint%20score-8.9%2F10-yellowgreen?logo=python&logoColor=white)](http://pylint.pycqa.org/)\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg?logo=codefactor&logoColor=white)](https://github.com/ambv/black)\n\nLyncs IO offers two high-level functions `load` and `save` (or `dump` as alias of `save`).\n\nThe main features of this module are\n\n- **Seamlessly IO**, reading and writing made simple.\n  In most of the cases, after saving `save(obj, filename)`,\n  loading `obj=load(filename)` returns the original Python object.\n  This feature is already ensured by formats like `pickle`, but we\n  try to ensure it as much as possible also for other formats.\n\n- **Many formats supported**. The file format can be specified either\n  via the filename's extension or with the option `format` passed to\n  `load/save`. The structure of the package is flexible enough to\n  easily accomodate new/customized file formats as these arise.\n  See [Adding a file format] for guidelines.\n\n- **Support for archives**. In case of archives, e.g. HDF5, zip etc.,\n  the content can be accessed directly by specifying it in the path.\n  For instance with `directory/file.h5/content`, `directory/file.h5`\n  is the file path, and the remaining is content to be accessed that\n  will be searched inside the file (this is inspired by `h5py`).\n\n- **Support for Parallel IO**. Where possible and implemented,\n  parallel IO is supported. This is enabled either via MPI providing\n  a valid communicator with the option `comm`, or via [Dask](https://dask.org)\n  providing the option `chunks` (see\n  [Dask's Array](https://docs.dask.org/en/latest/array-api.html)).\n\n- **Omission of extension**. When saving, if the extension is omitted,\n  the optimal file format is deduced from the data type and the extension\n  is added to the filename. When loading, any extension is considered,\n  i.e. `filename.*`, and if only one match is available, the file is loaded.\n\n## Installation\n\nThe package can be installed via `pip`:\n\n```bash\npip install [--user] lyncs_io\n```\n\n**NOTE**: for enabling parallel IO, lyncs_io requires a working MPI installation.\nThis can be installed via `apt-get`:\n\n```bash\nsudo apt-get install libopenmpi-dev openmpi-bin\n```\n\nOR using `conda`:\n\n```bash\nconda install -c anaconda mpi4py\n```\n\nParallel IO can then be enabled via\n\n```bash\npip install [--user] lyncs_io[mpi]\n```\n\n## Documentation\n\nThe package provides three high-level functions:\n- `head`: loads the metadata of a file (e.g. `shape`, `dtype`, etc)\n- `load`: loads the content of a file\n- `save` or `dump`: saves data to file\n\n```python\nimport numpy as np\nimport lyncs_io as io\n\narr1 = np.random.rand(10,10,10)\nio.save(arr1, \"data.npy\")\n\narr2 = io.load(\"data.npy\")\n\nassert (arr1 == arr2).all()\n```\n\nNOTE: for `save` we use the order `data, filename`. This is the opposite\nof what done in `numpy` but consistent with `pickle`'s `dump`. This order\nis preferred because the function can be used directly as a method\nfor a class since `self`, i.e. the `data`, would be passed as the first\nargument of `save`.\n\n### Supported file formats\n\nFormat  | Extensions | Binary | Archive | Parallel MPI | Parallel Dask\n--------|------------|--------|---------|--------------|--------------\npickle  | pkl        | yes    | no      | no           | no\ndill    | dll        | yes    | no      | no           | no\nJSON    | json       | no     | no      | no           | no\nASCII   | txt        | no     | no      | no           | no\nNumpy   | npy        | yes    | no      | yes          | yes\nNumpyz  | npz        | yes    | yes     | TODO         | TODO\nHDF5    | hdf5,h5    | yes    | yes     | yes          | TODO\nlime    | lime       | yes    | TODO    | yes          | yes\nTar     | tar, tar.* |    -   | yes     | yes          | no\nopenqcd | oqcd       | yes    | no      | TODO         | TODO\n\n### IO with HDF5\n\n```python\nimport numpy as np\nimport lyncs_io as io\n\narr1 = np.random.rand(10,10,10)\nio.save(arr1, \"data.h5/random\")\n\narr2 = np.zeros_like(arr1)\nio.save(arr2, \"data.h5/zeros\")\n\narrs = io.load(\"data.h5\")\nassert (arr1 == arrs[\"random\"]).all()\nassert (arr2 == arrs[\"zeros\"]).all()\n```\n\nAlso the content of nested dictionary can be stored with HDF5:\n\n```python\nimport numpy as np\nimport lyncs_io as io\n\nmydict = {\n        \"random\": {\n            \"arr0\": np.random.rand(10,10,10),\n            \"arr1\": np.random.rand(5,5),\n        },\n        \"zeros\":  np.zeros((4, 4, 4, 4)),\n    }\n# once a dictionary (or mapping) is passed it is written as a group\nio.save(mydict, \"data.h5\")\n\n# all the datasets in the .h5 file are loaded here using all_data argument\nloaded_dict = io.load(\"data.h5\", all_data=True)\n\nassert (mydict[\"random\"][\"arr0\"] == loaded_dict[\"random\"][\"arr0\"]).all()\nassert (mydict[\"random\"][\"arr1\"] == loaded_dict[\"random\"][\"arr1\"]).all()\nassert (mydict[\"zeros\"] == loaded_dict[\"zeros\"]).all()\n```\n\nParallel IO via MPI can be enabled with a parallel installation of HDF5.\nFor doing so, please refer to https://docs.h5py.org/en/stable/mpi.html.\n\n### IO with MPI\n\n```python\nimport numpy as np\nimport lyncs_io as io\nfrom mpi4py import MPI\n\n# Assume 2D cartesian topology\ncomm = MPI.COMM_WORLD\ndims = (2,2) # e.g. 4 procs\ncartesian2d = comm.Create_cart(dims=dims)\n\noarr = np.random.rand(6, 4, 2, 2)\nio.save(oarr, \"pario.npy\", comm=cartesian2d)\niarr = io.load(\"pario.npy\", comm=cartesian2d)\n\nassert (iarr == oarr).all()\n```\n\nNOTE: Parallel IO is enabled once a valid cartesian communicator is passed to `load` or `save` routines, otherwise Serial IO is performed. Currently only `numpy` format supports this functionality.\n\n### IO with Dask\n\n```python\nimport lyncs_io as io\nimport dask\nfrom distributed import Client, progress\n\nclient = Client(n_workers=2, threads_per_worker=1)\n\nx = da.arange(0,128).reshape((16, 8)).rechunk(chunks=(8,4))\n\nxout_lazy = io.save(x, \"pario.npy\")\nxin_lazy = io.load(\"pario.npy\", chunks=(8,4))\n\nassert (x.compute() == xin_lazy.compute()).all()\nclient.shutdown()\n```\n\nNOTE: Parallel IO with Dask is enabled once a valid chunk size is passed to `load` routine using `chunks` parameter. For `save` routine, the DaskIO is enabled only if the array passed is a Dask Array. Currently only `numpy` format supports this functionality.\n\n### IO with Tar\n\n```python\nimport numpy as np\nimport lyncs_io as io\n\narr1 = np.random.rand(10,10,10)\nio.save(arr1, \"data.tar/random.npy\")\n\narr2 = np.zeros_like(arr1)\nio.save(arr2, \"data.tar/zeros.npy\")\n\narrs = io.load(\"data.tar\")\n\nassert (arr1 == arrs[\"random.npy\"]).all()\nassert (arr2 == arrs[\"zeros.npy\"]).all()\n```\n\nAlso the content of nested dictionary can be stored with Tar:\n\n```python\nmydict = {\n  \"random\": {\n\t\t\"arr0.npy\": np.random.rand(10,10,10),\n\t\t\"arr1.npy\": np.random.rand(5,5),\n\t},\n\t\"zeros.npy\": np.zeros((4, 4, 4, 4)),\n}\n\nio.save(mydict, 'data.npy')\n\nloaded_dict = io.load('data.npy', all_data=True)\n\nassert (mydict[\"random\"][\"arr0.npy\"] == loaded_dict[\"random\"][\"arr0.npy\"]).all()\nassert (mydict[\"random\"][\"arr1.npy\"] == loaded_dict[\"random\"][\"arr1.npy\"]).all()\nassert (mydict[\"zeros.npy\"] == loaded_dict[\"zeros.npy\"]).all()\n```\n#### Note:\n- Some formats inside a Tar are not currently supported. (See [Issues](https://github.com/Lyncs-API/lyncs.io/issues))\n- When loading/saving a file in series, it's done directly on the memory. When in parallel, files are first written on the secondary storage before being saved/loaded.\n\n### Adding a file format\n\nNew file formats can be registered providing providing where possible the respective `head`, `load` and `save` functions.\nFor example the `pickle` file format can be registered as follow:\n\n```python\nimport pickle\nfrom lyncs_io.formats import register\n\nregister(\n    \"pickle\",                         # Name of the format\n    extensions=[\"pkl\"],               # List of extensions\n    head=None,                        # Function called by head (omitted)\n    load=pickle.load,                 # Function called by load\n    save=pickle.dump,                 # Function called by save\n    description=\"Pickle file format\", # Short description\n)\n```\n\n## Acknowledgments\n\n### Authors\n- Simone Bacchio (sbacchio)\n- Christodoulos Stylianou (cstyl)\n- Alexandros Angeli (alexandrosangeli)\n\n### Fundings\n- PRACE-6IP, Grant agreement ID: 823767, Project name: LyNcs.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lyncs-API/lyncs.io",
    "keywords": "Python,functions,formats,LQCD,I/O",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lyncs-io",
    "package_url": "https://pypi.org/project/lyncs-io/",
    "platform": null,
    "project_url": "https://pypi.org/project/lyncs-io/",
    "project_urls": {
      "Documentation": "https://github.com/Lyncs-API/lyncs.io/README.md",
      "Download": "https://github.com/Lyncs-API/lyncs.io/archive/master.zip",
      "Homepage": "https://github.com/Lyncs-API/lyncs.io",
      "Source": "https://github.com/Lyncs-API/lyncs.io",
      "Tracker": "https://github.com/Lyncs-API/lyncs.io/issues"
    },
    "release_url": "https://pypi.org/project/lyncs-io/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "I/O functions for Python and LQCD file formats",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14136039,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5be00d005eac0f8bf0245f94062423ebf98e7e1dc342cf8c23db5a3ee4b28377",
          "md5": "3c329321457639979717f39eb666dacc",
          "sha256": "7e8a0f964e2351e227287da19e23d9aeee250ee15e436cf602f0580b5c5e7315"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3c329321457639979717f39eb666dacc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11979,
        "upload_time": "2021-02-24T16:39:10",
        "upload_time_iso_8601": "2021-02-24T16:39:10.346734Z",
        "url": "https://files.pythonhosted.org/packages/5b/e0/0d005eac0f8bf0245f94062423ebf98e7e1dc342cf8c23db5a3ee4b28377/lyncs_io-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e296cc60b4c539fddd93d5ec9e92b14e0e3ab0d91f13f79513e0bcb4d4e9f6ec",
          "md5": "2d3b31fcdb39cadd0285b194812ccd98",
          "sha256": "2aefa85e52003d9cb8fd33e28aea2501934cb76f34d6ec8c38edaa64ce2509c3"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2d3b31fcdb39cadd0285b194812ccd98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16070,
        "upload_time": "2021-03-29T06:06:11",
        "upload_time_iso_8601": "2021-03-29T06:06:11.056705Z",
        "url": "https://files.pythonhosted.org/packages/e2/96/cc60b4c539fddd93d5ec9e92b14e0e3ab0d91f13f79513e0bcb4d4e9f6ec/lyncs_io-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d6232d67fd64400f90664b6cd4bb567eaf463ac8f98a4e93725728de182368d",
          "md5": "0829004077846c32b2fe7214dfc8a735",
          "sha256": "77cd0d34cead0628a0484d12fb38f6adde3a0869deaf3158b963fc68d8f5d6b9"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0829004077846c32b2fe7214dfc8a735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19686,
        "upload_time": "2021-05-18T17:50:52",
        "upload_time_iso_8601": "2021-05-18T17:50:52.192921Z",
        "url": "https://files.pythonhosted.org/packages/3d/62/32d67fd64400f90664b6cd4bb567eaf463ac8f98a4e93725728de182368d/lyncs_io-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61cb641baf26a85e247e7a66239493199ce5dc84fc6dc9ed0c71609bda1699bc",
          "md5": "4dcc350800fb3944dabb6a3933bdc486",
          "sha256": "92ec36ba0b464c1ed810b16170102fd9504c931ea7cba490d49cff36dcfa590d"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4dcc350800fb3944dabb6a3933bdc486",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25131,
        "upload_time": "2021-07-22T06:48:30",
        "upload_time_iso_8601": "2021-07-22T06:48:30.580285Z",
        "url": "https://files.pythonhosted.org/packages/61/cb/641baf26a85e247e7a66239493199ce5dc84fc6dc9ed0c71609bda1699bc/lyncs_io-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63250f02135f209b21f830a75893669b59fbb9a8f8c00407ffcf80836ef39671",
          "md5": "aa8d19fd5fd16727e298976de384c246",
          "sha256": "1f23797f648355d2ef5d7fe23f4cae8a6ce8e12452a8376f9afe1b794272d0ef"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aa8d19fd5fd16727e298976de384c246",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29040,
        "upload_time": "2021-08-14T08:34:15",
        "upload_time_iso_8601": "2021-08-14T08:34:15.147474Z",
        "url": "https://files.pythonhosted.org/packages/63/25/0f02135f209b21f830a75893669b59fbb9a8f8c00407ffcf80836ef39671/lyncs_io-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9fbff3567aa38ec3226044d74fddf5bba2d77bb9b74a8418c3a1b9e584dce49",
          "md5": "b06a275931f521a4be6a241cfa7d67d5",
          "sha256": "4456b769f5dae26a5a68506b76f4150009e5d07ef5f5296292f7d2cfdaf8c21c"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b06a275931f521a4be6a241cfa7d67d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29275,
        "upload_time": "2022-03-24T12:05:29",
        "upload_time_iso_8601": "2022-03-24T12:05:29.644732Z",
        "url": "https://files.pythonhosted.org/packages/a9/fb/ff3567aa38ec3226044d74fddf5bba2d77bb9b74a8418c3a1b9e584dce49/lyncs_io-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b69fd1988effc841fde645c0e14f7f6c317046ccc9c855c39853f19f506cd63",
          "md5": "573aa8e9c66308ecaa2404f5787315af",
          "sha256": "494dc7f9e1e48387ab9b24b456a08cf815e0bdf0b2d891ade13d22d91e9d0fa2"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "573aa8e9c66308ecaa2404f5787315af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30147,
        "upload_time": "2022-03-24T19:39:13",
        "upload_time_iso_8601": "2022-03-24T19:39:13.747347Z",
        "url": "https://files.pythonhosted.org/packages/9b/69/fd1988effc841fde645c0e14f7f6c317046ccc9c855c39853f19f506cd63/lyncs_io-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c7381e7f2d982ecb6f1913ebb37eda9c445a40b143f3c02f805789896bb8161",
          "md5": "bb5ab5748c52748e22222d92a5a49188",
          "sha256": "82590ec0a3b8a4addfb8055018339abba6ae4b068d9d6ec6003e72136876dce4"
        },
        "downloads": -1,
        "filename": "lyncs_io-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb5ab5748c52748e22222d92a5a49188",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30245,
        "upload_time": "2022-06-15T05:31:52",
        "upload_time_iso_8601": "2022-06-15T05:31:52.214610Z",
        "url": "https://files.pythonhosted.org/packages/4c/73/81e7f2d982ecb6f1913ebb37eda9c445a40b143f3c02f805789896bb8161/lyncs_io-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c7381e7f2d982ecb6f1913ebb37eda9c445a40b143f3c02f805789896bb8161",
        "md5": "bb5ab5748c52748e22222d92a5a49188",
        "sha256": "82590ec0a3b8a4addfb8055018339abba6ae4b068d9d6ec6003e72136876dce4"
      },
      "downloads": -1,
      "filename": "lyncs_io-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bb5ab5748c52748e22222d92a5a49188",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30245,
      "upload_time": "2022-06-15T05:31:52",
      "upload_time_iso_8601": "2022-06-15T05:31:52.214610Z",
      "url": "https://files.pythonhosted.org/packages/4c/73/81e7f2d982ecb6f1913ebb37eda9c445a40b143f3c02f805789896bb8161/lyncs_io-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}