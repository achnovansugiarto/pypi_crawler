{
  "info": {
    "author": "FMR LLC",
    "author_email": "classitransformers@fmr.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# ClassiTransformers\n\nClassiTransformers is an abstract library based on Tensorflow implementation of BERT and ELECTRA, and transformers library of HuggingFace Inc. \n\nCurrently implemented models\n- BERT (Tensorflow)\n- ELECTRA (Tensorflow)\n- RoBERTa (PyTorch - transformers library)\n- ALBERT (PyTorch - transformers library)\n- DistilBERT (PyTorch - transformers library)\n\nTask\n- Sequence Classification\n\n## Features\n\n- Works for N-class classification problem where N is any number of classes.\n- Easy to use. Takes away all the complexity of writing tensorflow or pytorch codes for training and testing classification models.\n- It provides an methods to easily train, test and create deployable models in .pb and .bin format in just 5 steps.\n- Hyperparameters can be easily modified without having to change the source code.\n\n# Table of contents\n\n<!--ts-->\n- [ClassiTransformers](#classi-transformers)\n  - [Features](#features)\n- [Table of contents](#table-of-contents)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Structure](#structure)\n  - [Quick Start](#quick-start)\n  - [Data Preparation](#data-preparation)\n  - [Setting Configuration](#setting-configuration)\n  - [Class Methods](#class-methods)\n  - [Real Dataset Examples](#real-dataset-examples)\n  - [Support and Contributions](#support-and-contributions)\n  - [Acknowledgement](#acknowledgement)\n  - [License](#license)\n\n# Installation\nAssuming that anaconda environment is already installed,\n\n- with requirements.txt\n\n```\npip install -r requirements.txt\n```\n\n- with yml file, create conda environment\n\n```\nconda env create -f environment.yml\nsource activate env\n```\n\n# Usage\n\nExample notebooks can be found in the `sample_notebooks` directory.\n\n## Structure\n\n* `classitransformers.pytransformers` - Includes all pytorch-based text classification models from transformers library.\n* `classitransformers.tfelectra` - Includes tensorflow-based Electra model for text classification\n* `classitransformers.tfbert` - Includes tensorflow-based BERT model for text classification\n* `classitransformers.report` - Used for reporting performance metrics. (precision, recall, F1, confusion matric)\n* `classitransformers.configs` - Used for initializing the hyperparameters of the language models. Also checkas and creates the necessary directories.\n* `classitransformers.downloader` - Used for downloading any of the 5 language models.\n\n\n## Qucik Start\nSupports text classification with any number of labels.\n\n```python\n\nfrom classitransformers.report import metrics\nfrom classitransformers.configs import Configs\nfrom classitransformers.tfelectra import ElectraClassification\n\nconfig = Configs(pretrained_model_dir = './models/Electra_base/',\n              model_name='electra',\n              num_train_epochs=3, \n              train_batch_size = 16,\n              eval_batch_size = 8, \n              do_train = True, \n              do_eval = True, \n              label_list = [\"0\", \"1\", \"2\", \"3\", \"4\"],\n              max_seq_length = 256,\n              data_dir = \"./datasets/bbcsports/\", \n              output_dir = \"./electra_output_sports/\")\n\nmodel = ElectraClassification(config) \n\nmodel.train()\nprediction = model.test()\n\ny_pred = [np.argmax(tup) for tup in prediction]\nprint(y_pred)\n```\n\n## Data Preparation\n\nThe **directory** for input files needs to be **specified** while creating the **config** object. The files should be named **train.csv**, **dev.csv**, **test.csv** .**test.csv** may or may not have the labels. Labels would be useful forgenerating the report after testing.\n\nPlease check `data_preparation_format.txt` for details.\n\n## Setting Configuration\n\nAll the Hyperparameters are listed in the Configs class, and have standard default values. The values can be changed by modifying the parameters passed in the Configs constructor for config object.\n\n```python\nclass Configs(object):\n  \"\"\"Fine-tuning hyperparameters.\"\"\"\n\n    def __init__(self, pretrained_model_dir = './Albert',\n              data_dir = \"./data/\", output_dir = \"./albert_output/\",\n              export_dir = None, model_name=\"albert\", \n              model_size =\"base\", learning_rate = 5e-5, \n              num_train_epochs=3.0, train_batch_size = 16,\n              eval_batch_size = 8, predict_batch_size = 8, do_train = True,\n              do_eval = True, do_predict = False, label_list = [\"0\", \"1\"],\n              do_lower_case = True, max_seq_length = 256, use_tpu = False,\n              iterations_per_loop = 1000, save_checkpoint_steps = 1000000,\n              warmup_proportion = 0.1, export_path ='./exported_bert_model')\n```\n\nThese are the parameters to be specified for creating the config object of Configs class.\n\nArgs:\n* `pretrained_model_dir` : The path for pretrained directory.\n* `data_dir` : The path of the directory for the train,dev and test files.\n* `output_dir` (optional): The directory where the fine-tuned model will be saved. If not given, model will be saved in the current directory.(checkpoint for TF, .bin for pytorch)\n* `export_dir` (optional): The directory where the model to be deployed will be saved.(Currently only for BERT)\n* `model_name` : The name of the model. Either of these: 'albert', 'bert', 'electra', 'roberta', 'distilbert'\n* `learning_rate`: The learning rate required while training the model. Default is 5e-5.\n* `num_training_epochs`: The number of iterations for finetuning the pretrained model for classification task.\n* `label_list`: The list of the labels for text classification task.\n* `max_seq_length`: Max Sequence Length (multiples of 2) should be ideally just greater than the length of the longest text sentence, to prevent loss of information.\n* `export_path`: The export path directory where chkpt format is converted to .pb format. Only set for bert.\n\n\n## Class Methods\n\nThe class methods do not take any parameters. All the parameters are predefined to improve the clarity of the code.\n\n**`train()`**\nFine-Tunes(trains) the model and saves the model and config file in the `output_dir` directory. Validation is done after each epoch.\n\n**`test()`**\nTests the model for test dataset. Returns the prediction labels.\n\n**`export_model()`**\nExports checkpoint model to .pb fotmat. Used for tensorflow-serviing while inferencing.(Currently only for BERT)\n\n**`inference()`**\nInference on any input csv in batches using tensorflow serving for .pb model. (Currently only for BERT)\n\n**`text_inference()`**\nInference on list of sentences as input.\n\n**`report()`**\nPrints and returns the accuracy and other metrics. Also prints Confusion Matrix (decorated matrix using matplotlib)\n\n\n## Getting Language Models.\n\n```python\nfrom classitransformers import downloader\n\n# pass name of the model ('albert', 'bert', 'electra', 'roberta', 'distilbert')\ndownloader('roberta') # Downloads to default dir '../models'\n```\n\n## Real Dataset Examples\n\n* [BBC News and BBC Sports](http://mlg.ucd.ie/datasets/bbc.html)\n* [Financial Phrasebank - 3 class Classification of Financial Statements](https://www.kaggle.com/ankurzing/sentiment-analysis-for-financial-news/kernels)\n* [Semeval 2010 Task 8 - Entity Relationship Classification](https://www.aclweb.org/anthology/S10-1006.pdf)\n* [Yelp 2013 Dataset - User Rating Classification](https://www.kaggle.com/c/yelp-recsys-2013/data)\n\n\n## Support and Contributions\n\nPlease submit bug reports and feature requests as Issues.\nContributions are very welcome. \n\nFor additional questions and feedback, please contact us at classitransformers@fmr.com\n\n## Acknowledgement\n\nClassiTransformers is developed by Emerging Tech Team at Fidelity Investments.\nThe part of the package was developed as part of an internship program at Fidelity. We thank [Hrushikesh](https://github.com/Hrushikesh-Vazurkar) and [Mayank](https://github.com/mgroovyank) for their contribution to the package.\n\n## License\n\nClassiTransformers is licensed under the [Apache License 2.0.](LICENSE.md)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fidelity/classitransformers",
    "keywords": "NLP language_models text_classification bert electra roberta distilbert albert",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "classitransformers",
    "package_url": "https://pypi.org/project/classitransformers/",
    "platform": "",
    "project_url": "https://pypi.org/project/classitransformers/",
    "project_urls": {
      "Homepage": "https://github.com/fidelity/classitransformers",
      "Source": "https://github.com/fidelity/classitransformers"
    },
    "release_url": "https://pypi.org/project/classitransformers/0.0.1/",
    "requires_dist": [
      "tensorflow-gpu (==1.15.2)",
      "bert-tensorflow",
      "torch (==1.5.1)",
      "torchvision (==0.6.1)",
      "transformers (==2.11.0)",
      "wget"
    ],
    "requires_python": ">=3.6",
    "summary": "An abstract library for implementing text classification tasks based on various transformers based language models",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8062825,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b70de155e863d9b4ab18fc2ae6f1940eb60e08f2b56e2804ea8a3b5b0e532abf",
          "md5": "34cd9b5a0bea4d99165e053580f143dd",
          "sha256": "42d38440b5478333cfc325e82b001f4fd4a488ac16616780c4048a7e932521a8"
        },
        "downloads": -1,
        "filename": "classitransformers-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34cd9b5a0bea4d99165e053580f143dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51823,
        "upload_time": "2020-08-28T18:24:28",
        "upload_time_iso_8601": "2020-08-28T18:24:28.414745Z",
        "url": "https://files.pythonhosted.org/packages/b7/0d/e155e863d9b4ab18fc2ae6f1940eb60e08f2b56e2804ea8a3b5b0e532abf/classitransformers-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19f00018b1042e119d857d20851419015ff44c3b3664bb20c5b4aeab0f2683c6",
          "md5": "f339ec2586910136aa741b46d8b3c3ac",
          "sha256": "f6df7fa4c99b4ae559c2d8ed968addaf65097865c11be6bd412e6881e98e52e6"
        },
        "downloads": -1,
        "filename": "classitransformers-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f339ec2586910136aa741b46d8b3c3ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44809,
        "upload_time": "2020-08-28T18:24:31",
        "upload_time_iso_8601": "2020-08-28T18:24:31.626784Z",
        "url": "https://files.pythonhosted.org/packages/19/f0/0018b1042e119d857d20851419015ff44c3b3664bb20c5b4aeab0f2683c6/classitransformers-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b70de155e863d9b4ab18fc2ae6f1940eb60e08f2b56e2804ea8a3b5b0e532abf",
        "md5": "34cd9b5a0bea4d99165e053580f143dd",
        "sha256": "42d38440b5478333cfc325e82b001f4fd4a488ac16616780c4048a7e932521a8"
      },
      "downloads": -1,
      "filename": "classitransformers-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34cd9b5a0bea4d99165e053580f143dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 51823,
      "upload_time": "2020-08-28T18:24:28",
      "upload_time_iso_8601": "2020-08-28T18:24:28.414745Z",
      "url": "https://files.pythonhosted.org/packages/b7/0d/e155e863d9b4ab18fc2ae6f1940eb60e08f2b56e2804ea8a3b5b0e532abf/classitransformers-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19f00018b1042e119d857d20851419015ff44c3b3664bb20c5b4aeab0f2683c6",
        "md5": "f339ec2586910136aa741b46d8b3c3ac",
        "sha256": "f6df7fa4c99b4ae559c2d8ed968addaf65097865c11be6bd412e6881e98e52e6"
      },
      "downloads": -1,
      "filename": "classitransformers-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f339ec2586910136aa741b46d8b3c3ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44809,
      "upload_time": "2020-08-28T18:24:31",
      "upload_time_iso_8601": "2020-08-28T18:24:31.626784Z",
      "url": "https://files.pythonhosted.org/packages/19/f0/0018b1042e119d857d20851419015ff44c3b3664bb20c5b4aeab0f2683c6/classitransformers-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}