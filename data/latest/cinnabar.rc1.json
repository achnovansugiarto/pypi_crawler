{
  "info": {
    "author": "Open Free Energy",
    "author_email": "hannah.brucemacdonald@choderalab.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "cinnabar (formerly Arsenic)\n==============================\n[//]: # (Badges)\n\n[![CI](https://github.com/OpenFreeEnergy/cinnabar/actions/workflows/ci.yml/badge.svg)](https://github.com/OpenFreeEnergy/cinnabar/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/OpenFreeEnergy/cinnabar/branch/main/graph/badge.svg)](https://codecov.io/gh/OpenFreeEnergy/cinnabar)\n[![Documentation Status](https://readthedocs.org/projects/openff-cinnabar/badge/?version=latest)](https://openff-cinnabar.readthedocs.io/en/latest/?badge=latest)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.6210305.svg)](https://doi.org/10.5281/zenodo.6210305)\n\n# Reporting relative free energy results\nIssue: we _must_ report statistics consistently and we would _like_ to plot these results consistently too\n\nSolution: package that accepts relative free energy results reliably, which is untied to any particular method/system or software package. For this, the input should be as unconverted as possible.\n\n\n### USAGE\n\n`python cinnabar.py example.csv `\n\n### OPTIONS\n\n`python cinnabar.py --help`\n\n### Terminology\nD is difference (i.e. relative) while d is variance (i.e. error bar)\ndDG would be the variance of an absolute FE, DDG would be the relative free energy between two molecules.\n\n### Plots to output\nThere are two ways of thinking of the results of free energy simulations, one is as a method developer, where one cares about the distance of a simulation from the true experimental value. The other is as a drug designer - how does all the information of this method actually help me to pick which molecule to make next.\nStatistics should definitely be printed on plots.\n#### DDG’s\nThese should represent the primary data (i.e. for the method developer), output from the relative free energy simulations. There is still discussion to be had about the best way to report these. There are issues to decide as to\n\n* Should we report only edges run or all edges\n\n* Should we symmetrise\n\n\tIf we only report edges that we run, it makes it harder to compare between results generated with different _sets_ of edges for the same system - I.e. if I run all the easy edges, I will look better than another method that has run more results. Plotting all edges gets around this, but moves us further from the primary data, and is somewhat redundant with the DG plot.\n\n\tCorrelation statistics are variable based on the sign chosen for an edge, so if we are to report these, symmetrizing is the only way to make these robust. One solution would be to both not symmetrise and not report correlation statistics (only RMSE and AUE for these plots).\n\n\tIf we are using these primary data plots, then it should very clear which edges are being plotted, so that we know if we are comparing one network to another or not. Maybe a networkX graph should be attached.\n\n#### DG’s\nThese should represent the overall result (i.e. for the drug designer), where there relative free energies should be combined consistently (i.e. using MLE) to convert the available DDG’s into DG’s. As there can only be _Nligand_ data points on these plots, any statistics can be used, but possibly rank-ordering measures are most useful.\n\n### Statistics\n* RMSE - this is good\n\n* MUE - this has issues when comparing between targets, as it is dependent on the dynamic range (noted by C. Bayly), but less so when comparing between methods. C. Bayly suggested Relative Absolute Error. Additionally, GRAM from GSK would be a good measure to incorporate  ([GRAM: A True Null Model for Relative Binding Affinity Predictions | Journal of Chemical Information and Modeling](https://pubs.acs.org/doi/10.1021/acs.jcim.9b00939))\n\n* R2/Kendall etc (correlation coefficients) - there are issues of using these statistics with some DDG plots, and have more useful meaning with DG results (see 1examples/WhyNotToUseR2ForDDG.ipynb`)\n\n### Errors\nHow do we compare errors? Several sources:\n* MBAR\n\n* Repeats (same simulation again)\n\n* Repeats (forward/backward variety)\n\n* Cycle closures\n\n* Other sources (?)\n\nWe would like to handle these consistently. The input to the software should have two errors (a) generated from PYMBAR, as these are the de facto standard and (b) another column to contain other errors that may be generated, which may be used to try compensate for the underestimation of the MBAR errors.\n\n### Plot styles - It may be impossible to completely agree on a plot style (and maybe not necessary)\nColours? Colourblind friendly?\n\nDifferent colors for distance from equality (like David Hahn/de Groot lab)?\n\nError bars style?\n\nGuidelines at _n_ units from equality?\n\n\n#### TODO (move this to project board)\nGenerate set of plots that people are happy with\nAdd gram analysis for MUE\nIncorporate edge errors into the bootstrapping?\nHandle repeats properly\nHandle forwards and backwards edges properly\nHave entry point for absolute free energies too\nPlots that look at other success metrics? i.e histogram of errors? (One like in METK?)\nCurrently just plotting everything against experimental, would like to do forcefield X vs. forcefield Y\n\n\n### Copyright\n\nCopyright (c) 2021, Hannah Bruce Macdonald\n\n\n#### Acknowledgements\n\nProject based on the\n[Computational Molecular Science Python Cookiecutter](https://github.com/molssi/cookiecutter-cms) version 1.1.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cinnabar",
    "package_url": "https://pypi.org/project/cinnabar/",
    "platform": null,
    "project_url": "https://pypi.org/project/cinnabar/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/cinnabar/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15999852,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70697e2d655e987632d079d19913e8e8afd249024a7e77fd6dfc71f57d71902e",
          "md5": "3674ad66a40ecf7a390f5ecb6acb1c59",
          "sha256": "af3a43c96530b212b7ab0280b5820ffd739d0e4ed60665259e189bef6fbf1b69"
        },
        "downloads": -1,
        "filename": "cinnabar-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3674ad66a40ecf7a390f5ecb6acb1c59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22037,
        "upload_time": "2022-12-05T20:01:37",
        "upload_time_iso_8601": "2022-12-05T20:01:37.602100Z",
        "url": "https://files.pythonhosted.org/packages/70/69/7e2d655e987632d079d19913e8e8afd249024a7e77fd6dfc71f57d71902e/cinnabar-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "464c5305a4850e942233784aa050c54194a42aa64c0d58024008aa530743b13c",
          "md5": "3df914dbd31734f2bd63d2687a81675a",
          "sha256": "2c3256aa9ee000a9358aa8b62ed2683daa7b6781f263c5ae20b31469be99c3f7"
        },
        "downloads": -1,
        "filename": "cinnabar-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3df914dbd31734f2bd63d2687a81675a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37263,
        "upload_time": "2022-12-05T20:01:40",
        "upload_time_iso_8601": "2022-12-05T20:01:40.299583Z",
        "url": "https://files.pythonhosted.org/packages/46/4c/5305a4850e942233784aa050c54194a42aa64c0d58024008aa530743b13c/cinnabar-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70697e2d655e987632d079d19913e8e8afd249024a7e77fd6dfc71f57d71902e",
        "md5": "3674ad66a40ecf7a390f5ecb6acb1c59",
        "sha256": "af3a43c96530b212b7ab0280b5820ffd739d0e4ed60665259e189bef6fbf1b69"
      },
      "downloads": -1,
      "filename": "cinnabar-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3674ad66a40ecf7a390f5ecb6acb1c59",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22037,
      "upload_time": "2022-12-05T20:01:37",
      "upload_time_iso_8601": "2022-12-05T20:01:37.602100Z",
      "url": "https://files.pythonhosted.org/packages/70/69/7e2d655e987632d079d19913e8e8afd249024a7e77fd6dfc71f57d71902e/cinnabar-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "464c5305a4850e942233784aa050c54194a42aa64c0d58024008aa530743b13c",
        "md5": "3df914dbd31734f2bd63d2687a81675a",
        "sha256": "2c3256aa9ee000a9358aa8b62ed2683daa7b6781f263c5ae20b31469be99c3f7"
      },
      "downloads": -1,
      "filename": "cinnabar-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3df914dbd31734f2bd63d2687a81675a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37263,
      "upload_time": "2022-12-05T20:01:40",
      "upload_time_iso_8601": "2022-12-05T20:01:40.299583Z",
      "url": "https://files.pythonhosted.org/packages/46/4c/5305a4850e942233784aa050c54194a42aa64c0d58024008aa530743b13c/cinnabar-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}