{
  "info": {
    "author": "Assad, Felipe",
    "author_email": "fassad@almavivadobrasil.com.br",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Almaviva | Biblioteca Python\n> Biblioteca Python Almaviva com funções personalizadas para uso geral (pip install almaviva)\n\n## Executando o programa\n\n- Para usar esta biblioteca, basta instalar via PIP e posteriormente realizar a importação para dentro do código-fonte do seu projeto.\n\n    ```shell\n    pip install almaviva\n    ```\n\n- Para instalar a biblioteca na versão anteriormente publicada, acrescente \"==1.1.0\" na frente do nome do pacote que está instalando, ex.:\n\n    ```shell\n    pip install almaviva==1.4.8\n    ```\n\n- Para instalar a biblioteca do repositório de testes do PyPI, execute:\n\n    ```shell\n    pip install -i https://test.pypi.org/simple/ almaviva\n    ```\n\n### Ambiente virtual\n\n- Para criar a máquina virtual, caso não tenha sido criado a pasta ``.venv`` por parte do download do template python (tutorial acima), vá até a pasta que contém os arquivos deste projeto e execute, no PowerShell:\n\n    ```shell\n    python -m venv .venv --clear;\n    .venv/scripts/activate;\n    ```\n\n- Para que os passos acima sejam executados com sucesso, será necessário revisar a política de execução do scripts do PowerShell (no modo de administrador). Então, execute, no PowerShell:\n\n    ```shell\n    Get-ExecutionPolicy -List\n    ```\n\n- Caso ``Scope ExecutionPolicy`` no item ``LocalMachine`` esteja diferente de ``Remotesigned``, execute, no PowerShell:\n\n    ```shell\n    Set-ExecutionPolicy -ExecutionPolicy Remotesigned -Scope LocalMachine\n    ```\n\n### Modo de operação do módulo: Database\n\n#### Importação da biblioteca\n\nRealize a importação para dentro do código-fonte do seu projeto\n\n```py\nfrom almaviva.database import Database\n```\n\n#### Manipulando banco de dados\n\n1. Crie a conexão com o servidor e informe o nome do banco de dados principal\n\n    Configurando a conexão usando autenticação windows (trusted connection):\n    \n    ```py\n    server = '__servidor__'     # Ex.: r'servidor1\\instancia1'\n    database = '__banco__'      # Ex.: 'Assets'\n    db = Database (\n        server\n    ,   database\n    )\n    db.connect()\n    ```\n\n    Configurando a conexão usando autenticação de usuário:\n    \n    ```py\n    server = '__servidor__'     # Ex.: r'servidor1\\instancia1'\n    database = '__banco__'      # Ex.: 'Assets'\n    username = '__usuario__'    # Ex.: 'User1'\n    password = '__senha__'      # Ex.: 'Senha1'\n    db = Database (\n        server\n    ,   database\n    ,   username\n    ,   password\n    )\n    db.connect ()\n    ```\n\n    Opcionamente podemos configurar a versão do ``driver`` que está instalado no sistema operacional, adicionando a configuração abaixo. Por padrão, se não informando ``driver=None`` é utilizado ``ODBC Driver 13 for SQL Server``\n\n    ```py\n    driver='ODBC Driver 13 for SQL Server'\n    db.set_driver (driver)\n    ```\n\n    A opção de logging/debug no terminal pode ser ativado simplesmente acrescentando a condição abaixo no seu código:\n    \n    > Por padrão, esta condição é desabilitada\n\n    ```py\n    db.set_debugging (\n        activated=True\n    )\n    ```\n\n2. Exemplos dos métodos SQL para manipulação de dados\n\n    - SELECT:\n\n        ```py\n        query = '__select * from [...]__'\n        resultado = db.select (query)\n        ```\n\n    - INSERT:\n\n        ```py\n        query = '__insert [...] (__campos__) values [...] ou select [...]__'\n        db.insert (query)\n        ```\n\n    - DELETE:\n\n        ```py\n        query = '__delete [...] from [...]__'\n        db.delete (query)\n        ```\n\n    - UPDATE:\n\n        ```py\n        query = '__update [...] set [...]__'\n        db.update (query)\n        ```\n\n    - STORED PROCEDURE:\n\n        ```py\n        params = '__parametro1__', '__parametro2__'\n        procedure = '[__banco__].[__schema__].[__procedure__]'\n        db.execute_sp (\n            stored_procedure=procedure\n        ,   param=(params)\n        )\n        ```\n\n### Modo de operação do módulo: File\n\n#### Importação da biblioteca\n\nRealize a importação para dentro do código-fonte do seu projeto\n\n```py\nfrom almaviva.file import Files\n```\n\n#### Manipulando pastas e arquivos via Python\n\n1. Primeiro crie uma instancia do objeto, executando um dos seguintes códigos abaixo:\n\n    Podemos iniciar a instância informando um caminho ao qual os arquivos serão manipulados por esta função:\n\n    ```py\n    folder = Files (\n        tempfolder=r'C:\\_automacao\\'\n    )\n    ```\n\n    Ou, quando não for informado o caminho da pasta que está querendo mapear, o código criará uma pasta com nome randômico nas pastas temporárias do sistema operacioal ``%tmp%``\n\n    ```py\n    folder = Files (\n        tempfolder=None\n    )\n    print (\n        folder.get_folder_path()\n    )\n    ```\n\n    Posteriormente podemos configurar outro caminho de pasta, nesta mesma instância, executando:\n\n    ```py\n    folder.set_folder_path (\n        tempfolder='__outra pasta__'\n    )\n    ```\n\n2. Procurar e/ou listar arquivos do diretório\n\n    Lista todos os arquivos do diretório mapeado de uma determinada instância é fácil, basta executar o código abaixo:\n\n    ```py\n    folder.list_files()\n    ```\n\n    Mas, se quiser localizar uma pasta ou arquivo específico podemos usar:\n\n    > Aqui podemos usar caracteres coringas para localizar parte do nome do arquivo ou pasta\n    \n    ```py\n    folder.search_path_or_file (\n        name_or_pattern_to_search='*'\n    )\n    ```\n\n3. Excluir os arquivos da pasta\n\n    Podemos executar o código abaixo para excluir TODOS os arquivos e pastas que existirem na pasta mapeada em uma determinada instância\n    \n    ```py\n    folder.delete_all_files()\n    ```\n\n    Também temos a possibilidade de excluir um arquivo específico, executando:\n\n    ```py\n    folder.delete_file (\n        file_name='__arquivo1.xlsb__'\n    )\n    ```\n\n4. Mover arquivos de um diretório para outro\n\n    Se quiser mover todos os arquivos de um diretorio, basta executar:\n\n    > Aqui recomenda-se usar a função ``to_folder=folder2.get_folder_path()`` de outra instância para evitar exceções na execução do código\n\n    ```py\n    folder.move_all_files (\n        to_folder='__nova pasta__'\n    )\n    ```\n\n    Mover um arquivo específico de um diretório para outro:\n\n    > Aqui recomenda-se usar a função ``file_name=folder.search_path_or_file('__arquivo1__.xls*')[0]`` da mesma instância e também o exemplo ``to_folder=folder2.get_folder_path()`` de outra instância para evitar exceções na execução do código\n\n    ```py\n    folder.move_file (\n        file_name='__arquivo1.xlsb__'\n    ,   to_folder='__nova pasta__'\n    )\n    ```\n\n5. Copiar arquivos de um diretório para outro\n\n    Se quiser copiar todos os arquivos de um diretorio, basta executar:\n\n    > Aqui recomenda-se usar a função ``to_folder=folder2.get_folder_path()`` de outra instância para evitar exceções na execução do código\n\n    ```py\n    folder.copy_all_files (\n        to_folder='__nova pasta__'\n    )\n    ```\n\n    Copiar um arquivo específico de um diretório para outro:\n\n    > Aqui recomenda-se usar a função ``file_name=folder.search_path_or_file('__arquivo1__.xls*')[0]`` da mesma instância e também o exemplo ``to_folder=folder2.get_folder_path()`` de outra instância para evitar exceções na execução do código\n\n    ```py\n    folder.copy_file (\n        file_name='__arquivo1.xlsb__'\n    ,   to_folder='__nova pasta__'\n    )\n    ```\n\n### Modo de operação do módulo: IHM\n\n#### Importação da biblioteca\n\nRealize a importação para dentro do código-fonte do seu projeto:\n\n```py\nfrom almaviva.ihm import HUNames\n```\n\n#### Para obter o nome da máquina e o usuário atualmente conectado\n\n1. Primeiro crie uma instancia do objeto, executando:\n\n    ```py\n    huname = HUNames()\n    ```\n\n2. Para saber o usuário atualmente conectado ``username``, execute:\n\n    ```py\n    print (\n        huname.get_username()\n    )\n    ```\n\n3. Para saber o nome da máquina ``hostname``, execute:\n\n    ```py\n    print (\n        huname.get_hostname()\n    )\n    ```\n\n4. Para saber a versão do Python instalado no sistema, execute:\n\n    ```py\n    print (\n        huname.get_app()\n    )\n    ```\n\n### Modo de operação do módulo: LOGGING\n\n#### Importação da biblioteca\n\nRealize a importação para dentro do código-fonte do seu projeto\n\n```py\nfrom almaviva.logging import Logging\n```\n\n#### Registrando eventos de log\n\n1. Crie uma instancia do objeto antes de iniciar os registros, executando:\n\n    ```py\n    log = Logging()\n    ```\n\n2. Para registrar um evento de log no nível de segurança ``INFO``, basta executar:\n\n    ```py\n    log.info (\n        description='__primeiro log__'\n    ,   step='__etapa1__'               # Step é opcional\n    ,   complete=__True_or_False__      # Complete é opcional\n    )\n    ```\n\n    > O argumento ``complete`` pode ser informado com ``True`` ou ``False``, porém se não informado, o sistema sempre registrará o status como ``OK``\n\n3. Para registrar um evento de log no nível de segurança ``WARN``, basta executar:\n\n    ```py\n    log.warn (\n        description='__segundo log__'\n    ,   step='__etapa1__'               # Step é opcional\n    ,   complete=__True_or_False__      # Complete é opcional\n    )\n    ```\n    \n    > O argumento ``complete`` pode ser informado com ``True`` ou ``False``, porém se não informado, o sistema sempre registrará o status como ``OK``\n\n4. Para registrar um evento de log no nível de segurança ``ERROR``, basta executar:\n\n    ```py\n    log.error (\n        description='__terceiro log__'\n    ,   step='__etapa1__'               # Step é opcional\n    )\n    ```\n    \n    > O status desta função sempre retornará como ``OK``, porém com a sinalização ``ERROR``.\n\n5. Opções avançadas:\n\n    > A opção ``logging_in_db`` foi substituída na versão 1.2.1 para ``logging_in_server`` carregando o registro de log em texto para o servidor de processamento de log do NOC Central\n\n    ```py\n    log.set_options (           # Configurações padrão\n        logging_in_file=True\n    ,   debug_in_terminal=False\n    ,   logging_in_server=False\n    )\n    ```\n    \n    > Por padrão o sistema cria um arquivo de log na mesma pasta em que a aplicação está executando, para desativar isto, desabilite a opção:\n\n    ```py\n    logging_in_file=False\n    ```\n\n    > Podemos exibir todos os registros de logs de ``INFO`` até ``ERROR`` no terminal. Para fazer isto, habilite a seguinte opção:\n\n    ```py\n    debug_in_terminal=True\n    ```\n\n    > Todo registro de atividade da aplicação pode ser enviada para o servidor de processamento de log central localizado no NOC Central por padrão. Para fazer isto, habilite a opção:\n\n    ```py\n    logging_in_server=True\n    ```\n\n### Modo de operação do módulo: WEBDRIVER\n\n#### Importação da biblioteca\n\nRealize a importação para dentro do código-fonte do seu projeto\n\n```py\nfrom almaviva.webdriver import WebDriverChrome\nfrom selenium.webdriver.common.by import By\n```\n\n#### Executando o Google Chrome no modo automatizado\n\n> Aviso Importante! Para usar esta biblioteca, é necessário a instalação do [Navegador Chrome](https://www.google.pt/intl/pt-BR/chrome/) e [Chrome Driver](https://chromedriver.chromium.org/downloads)\n\n1. Inicialização do WebDriver com perfil para permitir restaurar ultima sessão\n\n    ```py\n    driver = WebDriverChrome (\n        profile_location=r'profiles\\profile1'    # profile_location: Parâmetro opcional\n    ,   executable_path=r'drivers\\chromedriver.exe'\n    )\n    ```\n    \n2. Opções adicionais de configuração das preferências do navegador:\n    \n    ```py\n    download_dir = r'download_folder\\'     # Importante encerrar com 2 barras no final\n    preferences = {\n        \"profile.default_content_settings.popups\": 0\n    ,   \"download.default_directory\": str(download_dir)\n    ,   \"download.prompt_for_download\": False\n    ,   \"directory_upgrade\": True\n    }\n    driver.add_experimental_option (prefs=preferences)          # Adicionar preferencias personalizadas.\n    ```\n\n3. Opções adicionais avançadas que podem ser configurados no navegador:\n\n    ```py\n    driver.set_options (new_argument='--disable-dev-shm-usage') # Opção para desabilitar recursos de desenvolvedor - economiza custo da memória\n    driver.set_options (new_argument='--disable-gpu')           # Opção para economizar processamento de vídeo\n    driver.set_options (new_argument='--no-sandbox')            # Opção para teste de versões Beta da aplicação\n    driver.set_options (new_argument='--start-maximized')       # Opção para maximizar a janela no start do browser\n    driver.set_options (new_argument='--window-size=960,1080')  # Opção para modificar largura x altura em pixel no start do browser\n    driver.set_options (new_argument='--headless')              # Opção para não rendenizar a janela do Google Chrome\n    ```\n\n4. Agora basta inicializar o navegador e obter os objeto de localização e controle dos elementos da página passando a função instanciada ``driver.set_browser(url)`` previamente configurado:\n    \n    ```py\n    browser=driver.set_browser (\n        url=r'https://portaldocolaborador.almavivadobrasil.com.br'\n    )\n    ```\n\n5. Use comandos, como no exemplo abaixo para localizar os elementos e controlar a página web, para mais informaçoes busque as palavras ``selenium browser find_elements`` na web.\n\n    #  | BY_CHOISES\n    -- | ------------------------\n    1  | ``By.ID``               \n    2  | ``By.XPATH``            \n    3  | ``By.LINK_TEXT``        \n    4  | ``By.PARTIAL_LINK_TEXT``\n    5  | ``By.NAME``             \n    6  | ``By.TAG_NAME``         \n    7  | ``By.CLASS_NAME``       \n    8  | ``By.CSS_SELECTOR``     \n    \n    ```py\n    browser.find_element (\n        by=By.XPATH,\n        value='__x_path__'\n    )\n    ```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://workflow.almavivadobrasil.com.br:8000/almaviva-library",
    "keywords": "almavivadobrasil,database,logging,file,ihm,webdriver",
    "license": "Almaviva do Brasil Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "almaviva",
    "package_url": "https://pypi.org/project/almaviva/",
    "platform": null,
    "project_url": "https://pypi.org/project/almaviva/",
    "project_urls": {
      "Homepage": "http://workflow.almavivadobrasil.com.br:8000/almaviva-library"
    },
    "release_url": "https://pypi.org/project/almaviva/1.4.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Biblioteca com funções personalizadas desenvolvidos para Almaviva Do Brasil",
    "version": "1.4.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13737049,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e647510894a5df46465686b663c343dacc22b5a68cefaa74ad48b3b4ac2b94fb",
          "md5": "5827441d7bfa1e4c53e26208847640af",
          "sha256": "e9963439c05c4dd5ec40c0f3e54d99957bb6272a29547e2220d0c1af7bddeb32"
        },
        "downloads": -1,
        "filename": "almaviva-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5827441d7bfa1e4c53e26208847640af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12114,
        "upload_time": "2021-09-10T20:18:00",
        "upload_time_iso_8601": "2021-09-10T20:18:00.598013Z",
        "url": "https://files.pythonhosted.org/packages/e6/47/510894a5df46465686b663c343dacc22b5a68cefaa74ad48b3b4ac2b94fb/almaviva-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f16afad0288077fbeaa4ee4bc4f668968d3187753f488b038c225541acd0cd12",
          "md5": "e8ea56095eff768dd6e14aba903ad6c2",
          "sha256": "e7d5fe942286e25f7860775f5b825589a9defd160708ac5a2cc2e142663daf49"
        },
        "downloads": -1,
        "filename": "almaviva-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8ea56095eff768dd6e14aba903ad6c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13094,
        "upload_time": "2021-09-11T07:27:09",
        "upload_time_iso_8601": "2021-09-11T07:27:09.852374Z",
        "url": "https://files.pythonhosted.org/packages/f1/6a/fad0288077fbeaa4ee4bc4f668968d3187753f488b038c225541acd0cd12/almaviva-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b48d47c0ef8434b0d9cfa10d8ecd70cd01f458c01c02d578d5154222e405089",
          "md5": "86eabb00799301090e53fc1ba15de4c6",
          "sha256": "6efa0cb305aca32ba68dfc1018da50dfa0f1372bda47719079d0764f4290c24b"
        },
        "downloads": -1,
        "filename": "almaviva-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "86eabb00799301090e53fc1ba15de4c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12852,
        "upload_time": "2021-09-12T03:12:16",
        "upload_time_iso_8601": "2021-09-12T03:12:16.227261Z",
        "url": "https://files.pythonhosted.org/packages/8b/48/d47c0ef8434b0d9cfa10d8ecd70cd01f458c01c02d578d5154222e405089/almaviva-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be6fd666a99b7f4410987bc236b101aa1584c9f69aa52726950a4a660d422e5",
          "md5": "794bccdb14e43b81a559e213148f3fa6",
          "sha256": "1176ba5a684684585505f475a15cb9a71fad39d451c9da458647c5c8ebfaa66c"
        },
        "downloads": -1,
        "filename": "almaviva-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "794bccdb14e43b81a559e213148f3fa6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12924,
        "upload_time": "2021-09-12T03:25:17",
        "upload_time_iso_8601": "2021-09-12T03:25:17.738072Z",
        "url": "https://files.pythonhosted.org/packages/3b/e6/fd666a99b7f4410987bc236b101aa1584c9f69aa52726950a4a660d422e5/almaviva-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9559cb0e7e16ff7dbffa6badae013bb8d14047d42302607d27d6823b6a3068e0",
          "md5": "2b4097491cb0c1b44258ab04cc6c6761",
          "sha256": "57409a21c1e33cc0c2eec58d1659f571700539cbfc81e70599f3ef4cb60ca557"
        },
        "downloads": -1,
        "filename": "almaviva-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b4097491cb0c1b44258ab04cc6c6761",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13091,
        "upload_time": "2021-09-13T19:20:39",
        "upload_time_iso_8601": "2021-09-13T19:20:39.200296Z",
        "url": "https://files.pythonhosted.org/packages/95/59/cb0e7e16ff7dbffa6badae013bb8d14047d42302607d27d6823b6a3068e0/almaviva-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cb799cc9960c4430e08d9fe3db46e2bd2ed13a8d86265167c2122307e8819bf",
          "md5": "8b463ad749ea2a195742a720e10efdf4",
          "sha256": "50a71ceebaf0aac5fb39e3ff7bd397a17a4da9b4311a72a641ca4cc7858ec004"
        },
        "downloads": -1,
        "filename": "almaviva-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8b463ad749ea2a195742a720e10efdf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13124,
        "upload_time": "2021-09-15T03:08:11",
        "upload_time_iso_8601": "2021-09-15T03:08:11.289530Z",
        "url": "https://files.pythonhosted.org/packages/5c/b7/99cc9960c4430e08d9fe3db46e2bd2ed13a8d86265167c2122307e8819bf/almaviva-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9303e29a76df589c4e582ff8356f904031d5c8d23d2346fa47e9121445538337",
          "md5": "1999870f6ce27cd18d1bcd7281e92476",
          "sha256": "93da769b2a031a498f61d47572255c03e04bf33a509709a3b4735294ce390f86"
        },
        "downloads": -1,
        "filename": "almaviva-1.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1999870f6ce27cd18d1bcd7281e92476",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18217,
        "upload_time": "2022-05-05T22:50:28",
        "upload_time_iso_8601": "2022-05-05T22:50:28.197669Z",
        "url": "https://files.pythonhosted.org/packages/93/03/e29a76df589c4e582ff8356f904031d5c8d23d2346fa47e9121445538337/almaviva-1.4.5.tar.gz",
        "yanked": true,
        "yanked_reason": "correção do bug que impossibilitava instalação do pacote"
      }
    ],
    "1.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "975457234b87b226b32e1a31972b77cacf17e429af0259bba2f99b50055857ae",
          "md5": "9f582dea3ecaec18b73e311a2fcef11b",
          "sha256": "46fbc7052777654fa203565b1ad9a59a082331198192d27dc45e93ff639ba9a6"
        },
        "downloads": -1,
        "filename": "almaviva-1.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9f582dea3ecaec18b73e311a2fcef11b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18971,
        "upload_time": "2022-05-05T23:03:20",
        "upload_time_iso_8601": "2022-05-05T23:03:20.529175Z",
        "url": "https://files.pythonhosted.org/packages/97/54/57234b87b226b32e1a31972b77cacf17e429af0259bba2f99b50055857ae/almaviva-1.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e88511c9e6f59e3e3ec5f6cf1352821c5d9a05d2b936913d3e70b6352480d852",
          "md5": "2c6702c95dd96076a39f0dca3d8c05ed",
          "sha256": "0ca01894653b62eae2de6c9f79df32419fb7e7bbb0955bb059afde936a537722"
        },
        "downloads": -1,
        "filename": "almaviva-1.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2c6702c95dd96076a39f0dca3d8c05ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19015,
        "upload_time": "2022-05-06T15:46:36",
        "upload_time_iso_8601": "2022-05-06T15:46:36.622732Z",
        "url": "https://files.pythonhosted.org/packages/e8/85/11c9e6f59e3e3ec5f6cf1352821c5d9a05d2b936913d3e70b6352480d852/almaviva-1.4.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f596c019fa1bcd5475bb5e7c1e4b04760c99bfdeb285744cd809486798258ac9",
          "md5": "8a792a24897971c500ffe24623d8db1e",
          "sha256": "9a90d59d7847a0248a3223d81d4f96cd0c83c13e7523bb3b37cefd44b82f514c"
        },
        "downloads": -1,
        "filename": "almaviva-1.4.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8a792a24897971c500ffe24623d8db1e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19126,
        "upload_time": "2022-05-06T19:44:14",
        "upload_time_iso_8601": "2022-05-06T19:44:14.938372Z",
        "url": "https://files.pythonhosted.org/packages/f5/96/c019fa1bcd5475bb5e7c1e4b04760c99bfdeb285744cd809486798258ac9/almaviva-1.4.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f596c019fa1bcd5475bb5e7c1e4b04760c99bfdeb285744cd809486798258ac9",
        "md5": "8a792a24897971c500ffe24623d8db1e",
        "sha256": "9a90d59d7847a0248a3223d81d4f96cd0c83c13e7523bb3b37cefd44b82f514c"
      },
      "downloads": -1,
      "filename": "almaviva-1.4.8.tar.gz",
      "has_sig": false,
      "md5_digest": "8a792a24897971c500ffe24623d8db1e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19126,
      "upload_time": "2022-05-06T19:44:14",
      "upload_time_iso_8601": "2022-05-06T19:44:14.938372Z",
      "url": "https://files.pythonhosted.org/packages/f5/96/c019fa1bcd5475bb5e7c1e4b04760c99bfdeb285744cd809486798258ac9/almaviva-1.4.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}