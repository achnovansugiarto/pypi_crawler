{
  "info": {
    "author": "austinjp",
    "author_email": "austin.plunkett+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: Free for non-commercial use",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Flask JSONAPI Trivial\n\nProvides Flask with *very basic* compliance with JSONAPI.org. It enables easy\nconstruction of APIs that return JSON.\n\nStatuses or exceptions generated by the following modules are automatically\ntransformed to JSONAPI while keeping the correct HTTP headers:\n\n- http.HTTPStatus\n- Jose (for JWT exceptions)\n- Werkzeug (for Flask itself)\n\nNote, all exceptions raised by Jose (for JWT exceptions) are converted to\nWerkzeug Unauthorized 401 exceptions. Extra information about the JWT\nerror is added to the returned JSON.\n\n\n## Example\n\n```python\nfrom flask import Flask, abort\nfrom flask_jsonapi_trivial import jsonapi, JsonApiModel\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\nfrom werkzeug import exceptions\nimport json\n\ndb = SQLAlchemy()\napp = Flask(__name__)\n\n# Add the @jsonapi decorator and return a\n# status or exception, plus optional JSON\n# object. Only keys 'meta', 'included',\n# 'data', and 'links' are taken from this\n# JSON object. Anything else is ignored.\n@app.route(\"/\")\n@jsonapi\ndef hello_world():\n    return HTTPStatus.OK, { \"meta\": \"Hello, world!\" }\n\n# Get Flask to return JSON for exceptions.\n# Exceptions raised Werkzeug and Jose\n# are supported, as well as all HTTPStatus types.\n@app.errorhandler(jose.exceptions.JWTError)\n@app.errorhandler(exceptions.NotImplemented)\ndef custom_error_handler(e):\n    return jsonapi_response(e)\n\n# Standard errors can simply be raised, the\n# custom error handler catches them.\n@app.route('/raise')\ndef raise_error():\n    raise exceptions.NotImplemented\n\n# Errors can simply be returned as well:\n@app.route('/show_error')\n@jsonapi\ndef show_error():\n    return exceptions.ImATeapot\n\n\n# Flask abort() will return JSON if the error\n# handler has been registered, provided it is\n# called with an appropriate numerical code.\n@app.route('/abort')\n@jsonapi\ndef flask_abort():\n    abort(exceptions.NotImplemented.code)\n\n\n# flask_jsonapi_trivial allows standard database\n# models to easily expose a jsonapi() method\n# simply by extending JsonApiModel class.\n# The class needs to implement a json()\n# method which needs to return a dict JSON\n# representation. Appropriate formatting is\n# up to you -- see below for an example.\nclass MyModel(db.Model, JsonApiModel):\n    __tablename__ = 'my_table'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    last_seen = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def __init__(self):\n        self.id = None\n        self.name = \"Default Name\"\n        self.last_seen = datetime.utcnow()\n\n    def json(self):\n        if self.id is not None:\n            self.id = str(self.id)\n        if self.name is not None:\n            self.name = str(self.name)\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"last_seen\": json.loads(json.dumps(self.last_seen,default=str))\n        }\n\n# Then it's simple to return the JSON representation\n# of the model. Correct headers etc are taken care of.\n@app.route('/show_model')\n@jsonapi\ndef show_model():\n    model = MyModel()\n    model.id = 1\n    model.name = \"Whom So Ever\"\n    return HTTPStatus.OK, model.jsonapi()\n\n# The method jsonapi_limited() strips all detail\n# from the model, leaving the keys intact. Any \"id\"\n# field is removed unless specified.\n@app.route('/show_limited_model')\n@jsonapi\ndef show_limited_model():\n    model = MyModel()\n    model.id = 999\n    model.name = \"Limited Model\"\n    return HTTPStatus.OK, model.jsonapi_limited(show_id=True)\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/subsect/flask_jsonapi_trivial/",
    "keywords": "",
    "license": "CC BY-NC-SA 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-jsonapi-trivial",
    "package_url": "https://pypi.org/project/flask-jsonapi-trivial/",
    "platform": "any",
    "project_url": "https://pypi.org/project/flask-jsonapi-trivial/",
    "project_urls": {
      "Homepage": "http://github.com/subsect/flask_jsonapi_trivial/"
    },
    "release_url": "https://pypi.org/project/flask-jsonapi-trivial/0.2.5/",
    "requires_dist": [
      "cryptography (>=2.9.2)",
      "Flask (>=1.0.2)",
      "python-jose[cryptography] (>=3.1.0)",
      "Werkzeug (>=0.15.3)"
    ],
    "requires_python": "~=3.6",
    "summary": "Provides Flask with *very basic* JSONAPI.org compliance",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7629115,
  "releases": {
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "442140c53f0fb1f7a5486c62d3e78adfc6bdae1510685a54b6bf862fe6a09690",
          "md5": "583e9137c113ef3696968aa15074388a",
          "sha256": "2d7815d411b186dddad661d28c055a27d0faf998d02527efe8a7f969d3d51b74"
        },
        "downloads": -1,
        "filename": "flask_jsonapi_trivial-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "583e9137c113ef3696968aa15074388a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.6",
        "size": 12471,
        "upload_time": "2020-07-04T13:57:27",
        "upload_time_iso_8601": "2020-07-04T13:57:27.916020Z",
        "url": "https://files.pythonhosted.org/packages/44/21/40c53f0fb1f7a5486c62d3e78adfc6bdae1510685a54b6bf862fe6a09690/flask_jsonapi_trivial-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ca8cab52fdaf626f305bf0a2677530638327d17da3a6984e762606ed4c431fc",
          "md5": "4ca222e304de56fc865d699756578e10",
          "sha256": "150b93f783834f1a69efe4e2f0a0c82bfaa39e8725514c7c0d13590b5735e68b"
        },
        "downloads": -1,
        "filename": "flask_jsonapi_trivial-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4ca222e304de56fc865d699756578e10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.6",
        "size": 5596,
        "upload_time": "2020-07-04T13:57:30",
        "upload_time_iso_8601": "2020-07-04T13:57:30.220339Z",
        "url": "https://files.pythonhosted.org/packages/1c/a8/cab52fdaf626f305bf0a2677530638327d17da3a6984e762606ed4c431fc/flask_jsonapi_trivial-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "442140c53f0fb1f7a5486c62d3e78adfc6bdae1510685a54b6bf862fe6a09690",
        "md5": "583e9137c113ef3696968aa15074388a",
        "sha256": "2d7815d411b186dddad661d28c055a27d0faf998d02527efe8a7f969d3d51b74"
      },
      "downloads": -1,
      "filename": "flask_jsonapi_trivial-0.2.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "583e9137c113ef3696968aa15074388a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 12471,
      "upload_time": "2020-07-04T13:57:27",
      "upload_time_iso_8601": "2020-07-04T13:57:27.916020Z",
      "url": "https://files.pythonhosted.org/packages/44/21/40c53f0fb1f7a5486c62d3e78adfc6bdae1510685a54b6bf862fe6a09690/flask_jsonapi_trivial-0.2.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ca8cab52fdaf626f305bf0a2677530638327d17da3a6984e762606ed4c431fc",
        "md5": "4ca222e304de56fc865d699756578e10",
        "sha256": "150b93f783834f1a69efe4e2f0a0c82bfaa39e8725514c7c0d13590b5735e68b"
      },
      "downloads": -1,
      "filename": "flask_jsonapi_trivial-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4ca222e304de56fc865d699756578e10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 5596,
      "upload_time": "2020-07-04T13:57:30",
      "upload_time_iso_8601": "2020-07-04T13:57:30.220339Z",
      "url": "https://files.pythonhosted.org/packages/1c/a8/cab52fdaf626f305bf0a2677530638327d17da3a6984e762606ed4c431fc/flask_jsonapi_trivial-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}