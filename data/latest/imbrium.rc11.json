{
  "info": {
    "author": "Maximilian Mekiska",
    "author_email": "maxmekiska@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# imbrium [![Downloads](https://pepy.tech/badge/imbrium)](https://pepy.tech/project/imbrium) [![PyPi](https://img.shields.io/pypi/v/imbrium.svg?color=blue)](https://pypi.org/project/imbrium/) [![GitHub license](https://img.shields.io/github/license/maxmekiska/Imbrium?color=black)](https://github.com/maxmekiska/Imbrium/blob/main/LICENSE) [![PyPI pyversions](https://img.shields.io/pypi/pyversions/imbrium.svg)](https://pypi.python.org/project/imbrium/)\n \n## Status\n\n| Build | Status|\n|---|---|\n| `MAIN BUILD`  |  ![master](https://github.com/maxmekiska/imbrium/actions/workflows/main.yml/badge.svg?branch=main) |\n|  `DEV BUILD`   |  ![development](https://github.com/maxmekiska/imbrium/actions/workflows/main.yml/badge.svg?branch=development) |\n\n## Pip install\n\n```shell\npip install imbrium\n```\n\nStandard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step\nTime Series Forecasting.\n\n\n                      ██╗███╗░░░███╗██████╗░██████╗░██╗██╗░░░██╗███╗░░░███╗\n                      ██║████╗░████║██╔══██╗██╔══██╗██║██║░░░██║████╗░████║\n                      ██║██╔████╔██║██████╦╝██████╔╝██║██║░░░██║██╔████╔██║\n                      ██║██║╚██╔╝██║██╔══██╗██╔══██╗██║██║░░░██║██║╚██╔╝██║\n                      ██║██║░╚═╝░██║██████╦╝██║░░██║██║╚██████╔╝██║░╚═╝░██║\n                      ╚═╝╚═╝░░░░░╚═╝╚═════╝░╚═╝░░╚═╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\n\n\n## Introduction to Imbrium\n\nImbrium is a deep learning library that specializes in time series forecasting. Its primary objective is to provide a user-friendly repository of deep learning architectures for this purpose. The focus is on simplifying the process of creating and applying these architectures, with the goal of allowing users to create complex architectures without having to build them from scratch. Instead, the emphasis shifts to high-level configuration of the architectures.\n\n## Contributions\n\nThe development and improvement of Imbrium is an ongoing process, and contributions from the community are greatly appreciated. New architectures, in particular, can help Imbrium achieve its goals more quickly. While Imbrium is currently based on Keras, it is open to being extended to other machine learning frameworks such as Pytorch.\n\nRecent research in the field of time series forecasting has shown the potential of graph-based neural networks. If you have experience in this area and would like to contribute architectures to Imbrium, your contributions would be most welcomed.\n\n## Hyperparameter Optimization imbrium 1.1.0\n<details>\n  <summary>Expand</summary>\nStarting from version 1.1.0, imbrium will support experimental hyperparamerter optimization for the model layer config and optimizer arguments. The optimization process uses the Optuna library (https://optuna.org/).\n\n### Optimization via the seeker decorator\n\nTo leverage Optimization, use the new classes `OptimizePureUni`, `OptimizeHybridUni`, `OptimizePureMulti` and `OptimizeHybridMulti`. These classes implement optimizable model architecture methods:\n\n`OptimizePureUni` & `OptimizePureMulti`:\n\n  - create_fit_mlp\n  - create_fit_rnn\n  - create_fit_lstm\n  - create_fit_cnn\n  - create_fit_gru\n  - create_fit_birnn\n  - create_fit_bilstm\n  - create_fit_bigru\n  - create_fit_encdec_rnn\n  - create_fit_encdec_lstm\n  - create_fit_encdec_gru\n  - create_fit_encdec_cnn\n\n`OptimizeHybridUni` & `OptimizeHybridMulti`:\n\n  - create_fit_cnnrnn\n  - create_fit_cnnlstm\n  - create_fit_cnngru\n  - create_fit_cnnbirnn\n  - create_fit_cnnbilstm\n  - create_fit_cnnbigru\n\n#### Example `OptimizePureUni`\n\n```python\nfrom imbrium.predictors.univarpure import OptimizePureUni\nfrom imbrium.utils.optimization import seeker\n\n# initialize optimizable predictor object\npredictor = OptimizePureUni(steps_past=5, steps_future=10, data=data, scale='standard')\n\n\n# use seeker decorator on optimization harness\n@seeker(optimizer_range=[\"adam\", \"sgd\"], \n        layer_config_range= [\n            {'layer0': (5, 'relu'), 'layer1': (10,'relu'), 'layer2': (5, 'relu')},\n            {'layer0': (2, 'relu'), 'layer1': (5, 'relu'), 'layer2': (2, 'relu')}\n        ], \n        optimization_target='minimize', n_trials = 2)\ndef create_fit_model(predictor: object, *args, **kwargs):\n    # use optimizable create_fit_xxx method\n    return predictor.create_fit_lstm(*args, **kwargs)\n\n\ncreate_fit_model(predictor, loss='mean_squared_error', metrics='mean_squared_error', epochs=2,\n                 show_progress=0, validation_split=0.20, monitor='val_loss', patience=2, min_delta=0, verbose=1\n                )\n\npredictor.show_performance()\npredictor.predict(data.tail(5))\npredictor.model_blueprint()\n```\n\n#### Example `OptimizeHybridUni`\n\n```python\nfrom imbrium.predictors.univarhybrid import OptimizeHybridUni\nfrom imbrium.utils.optimization import seeker\n\npredictor = OptimizeHybridUni(sub_seq = 2, steps_past = 10, steps_future = 5, data = data, scale = 'maxabs')\n\n@seeker(optimizer_range=[\"adam\", \"sgd\"], \n        layer_config_range= [\n            {'layer0': (8, 1, 'relu'), 'layer1': (4, 1, 'relu'), 'layer2': (2),'layer3': (25, 'relu'), 'layer4': (10, 'relu')},\n            {'layer0': (16, 1, 'relu'), 'layer1': (8, 1, 'relu'), 'layer2': (2),'layer3': (55, 'relu'), 'layer4': (10, 'relu')},\n            {'layer0': (32, 1, 'relu'), 'layer1': (16, 1, 'relu'), 'layer2': (2),'layer3': (25, 'relu'), 'layer4': (10, 'relu')}\n        ], \n        optimization_target='minimize', n_trials = 2)\ndef create_fit_model(predictor: object, *args, **kwargs):\n    return predictor.create_fit_cnnlstm(*args, **kwargs)\n\ncreate_fit_model(predictor, loss='mean_squared_error', metrics='mean_squared_error', epochs=2,\n                 show_progress=0, validation_split=0.20, monitor='val_loss', patience=2, min_delta=0, verbose=1\n                )\n\npredictor.show_performance()\npredictor.predict(data.tail(10))\npredictor.model_blueprint()\n```\n\n#### Example `OptimizePureMulti`\n\n```python\npredictor = OptimizePureMulti(steps_past =  5, steps_future = 10, data = data, features = ['target', 'target', 'HouseAge', 'AveRooms', 'AveBedrms'], scale = 'normalize')\n\n\n@seeker(optimizer_range=[\"adam\", \"sgd\"], \n        layer_config_range= [\n            {'layer0': (5, 'relu'), 'layer1': (10,'relu'), 'layer2': (5, 'relu')},\n            {'layer0': (2, 'relu'), 'layer1': (5, 'relu'), 'layer2': (2, 'relu')},\n            {'layer0': (20, 'relu'), 'layer1': (50, 'relu'), 'layer2': (20, 'sigmoid')}\n        ], \n        optimization_target='minimize', n_trials = 3)\ndef create_fit_model(predictor: object, *args, **kwargs):\n    return predictor.create_fit_lstm(*args, **kwargs)\n\ncreate_fit_model(predictor, loss='mean_squared_error', metrics='mean_squared_error', epochs=2,\n                 show_progress=1, validation_split=0.20, monitor='val_loss', patience=2, min_delta=0, verbose=1\n                )\n\n\npredictor.show_performance()\npredictor.predict(data[['target', 'HouseAge', 'AveRooms', 'AveBedrms']].tail(5))\npredictor.model_blueprint()\n```\n\n\n#### Example `OptimizeHybridMulti`\n\n```python\npredictor = OptimizeHybridMulti(sub_seq = 2, steps_past = 10, steps_future = 5, data = data,features = ['target', 'target', 'HouseAge', 'AveRooms', 'AveBedrms'], scale = 'normalize')\n\n\n@seeker(optimizer_range=[\"adam\", \"sgd\"], \n        layer_config_range= [\n            {'layer0': (8, 1, 'relu'), 'layer1': (4, 1, 'relu'), 'layer2': (2), 'layer3': (5, 'relu'), 'layer4': (5, 'relu')},\n            {'layer0': (8, 1, 'relu'), 'layer1': (4, 1, 'relu'), 'layer2': (2), 'layer3': (5, 'relu'), 'layer4': (5, 'relu')},\n            {'layer0': (8, 1, 'relu'), 'layer1': (4, 1, 'relu'), 'layer2': (2), 'layer3': (5, 'relu'), 'layer4': (5, 'relu')}\n        ], \n        optimization_target='minimize', n_trials = 3)\ndef create_fit_model(predictor: object, *args, **kwargs):\n    return predictor.create_fit_cnnlstm(*args, **kwargs)\n\ncreate_fit_model(predictor, loss='mean_squared_error', metrics='mean_squared_error', epochs=2,\n                 show_progress=1, validation_split=0.20, monitor='val_loss', patience=2, min_delta=0, verbose=1\n                )\n\n\npredictor.show_performance()\npredictor.predict(data[['target', 'HouseAge', 'AveRooms', 'AveBedrms']].tail(10))\npredictor.model_blueprint()\n```\n#### The shell of the seeker harness\n  \n```python\npredictor = OptimizePureMulti(...)\n\n@seeker(optimizer_range=[...], \n        layer_config_range= [\n            {...},\n            {...},\n            {...}\n        ], \n        ...)\ndef create_fit_model(predictor: object, *args, **kwargs): # seeker harness\n    return predictor.create_fit_xxx(*args, **kwargs)\n\ncreate_fit_model(...) # execute seeker harness\n\n\npredictor.show_performance()\npredictor.predict(...)\npredictor.model_blueprint()\n```\n\n\n</details>\n\n\n## imbrium 1.0.0 changes\n<details>\n  <summary>Expand</summary>\n\nThe following important name changes have been performed:\n\n```\n- univarstandard => univarpure\n- BasicMultStepUniVar => PureUni\n- univarhybrid => univarhybrid (unchanged)\n- HybridMultStepUniVar => HybridUni\n- multivarstandard => multivarpure\n- BasicMultSTepMultVar => PureMulti\n- multivarhybrid => multivarhybrid (unchanged)\n- HybridMultStepMultVar => HybridMulti\n```\n</details>\n\n## Try imbrium\n<details>\n  <summary>Expand</summary>\nPlease ignore all cudart dlerror/warnings, since no GPU is setup in this jupyter binder environment:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/maxmekiska/ImbriumTesting-Demo/main?labpath=TestImbrium.ipynb) <br>\n\n\nFor more testing, please visit the dedicated Demo & Testing repository at: https://github.com/maxmekiska/ImbriumTesting-Demo\n\n</details>\n\n## Overview of Imbrium's Functionality\n\n<details>\n  <summary>Expand</summary>\n\nImbrium is designed to simplify the application of deep learning models for time series forecasting. The library offers a variety of pre-built architectures, each with a fixed number of layers. However, the user retains full control over the configuration of each layer, including the number of neurons, the type of activation function, loss function, optimizer, and metrics applied. This allows for the flexibility to adapt the architecture to the specific needs of the forecast task at hand. Imbrium also offers a user-friendly interface for training and evaluating these models, making it easy to quickly iterate and test different configurations.\n\n\nThe library differentiates between two\nmodes:\n\n1. Univariate-Multistep forecasting\n2. Multivariate-Multistep forecasting\n\nThese two main modes are further divided based on the complexity of the underlying model architectures:\n\n1. Pure\n2. Hybrid\n\nPure supports the following architectures:\n\n- Multilayer perceptron (MLP)\n- Recurrent neural network (RNN)\n- Long short-term memory (LSTM)\n- Gated recurrent unit (GRU)\n- Convolutional neural network (CNN)\n- Bidirectional recurrent neural network (BI-RNN)\n- Bidirectional long-short term memory (BI-LSTM)\n- Bidirectional gated recurrent unit (BI-GRU)\n- Encoder-Decoder recurrent neural network\n- Encoder-Decoder long-short term memory\n- Encoder-Decoder convolutional neural network (Encoding via CNN, Decoding via GRU)\n- Encoder-Decoder gated recurrent unit\n\nHybrid supports:\n\n- Convolutional neural network + recurrent neural network (CNN-RNN)\n- Convolutional neural network + Long short-term memory (CNN-LSTM)\n- Convolutional neural network + Gated recurrent unit (CNN-GRU)\n- Convolutional neural network + Bidirectional recurrent neural network (CNN-BI-RNN)\n- Convolutional neural network + Bidirectional long-short term memory (CNN-BI-LSTM)\n- Convolutional neural network + Bidirectional gated recurrent unit (CNN-BI-GRU)\n\nPlease note that each model is supported by a prior input data pre-processing procedure which allows to set a look-back period, look-forward period, sub-sequences division (only for hybrid architectures) and data scaling method.\n\nThe following scikit-learn scaling procedures are supported:\n\n- StandardScaler\n- MinMaxScaler\n- MaxAbsScaler\n- Normalizing ([0, 1])\n- None (raw data input)\n\nDuring training/fitting, callback conditions can be defined to guard against\noverfitting.\n\nTrained models can furthermore be saved or loaded if the user wishes to do so.\n\n</details>\n\n## How to use imbrium?\n\n<details>\n  <summary>Expand</summary>\n\nAttention: Typing has been left in the below examples to ease the configuration readability.\n\n### Univariate Models:\n\n1. Univariate-Multistep forecasting - Pure architectures\n\n```python3\nfrom imbrium.predictors.univarpure import PureUni\n\npredictor = PureUni(steps_past: int, steps_future: int, data = DataFrame(),\n                    scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_mlp(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (25,'relu'),\n                                          'layer2': (25, 'relu')})\n\npredictor.create_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                      metrics: str = 'mean_squared_error',\n                      layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                            'layer2': (50, 'relu')})\n\npredictor.create_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu')})\n\npredictor.create_birnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_encdec_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                             metrics: str = 'mean_squared_error',\n                             layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (100, 'relu')})\n\npredictor.create_encdec_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                      monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor = PureUni(steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n\n2. Univariate-Multistep forecasting - Hybrid architectures\n\n```python3\nfrom imbrium.predictors.univarhybrid import HybridUni\n\npredictor = HybridUni(sub_seq: int, steps_past: int, steps_future: int, data =          DataFrame(), scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_cnnrnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnlstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                         metrics: str = 'mean_squared_error',\n                         layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnngru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbirnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                           metrics: str = 'mean_squared_error',\n                           layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                      monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor =  HybridUni(sub_seq: int, steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n\n### Multivariate Models:\n\n1. Multivariate-Multistep forecasting - Pure architectures\n\n```python3\nfrom imbrium.predictors.multivarpure import PureMulti\n\n# please make sure that the target feature is the first variable in the feature list\npredictor = PureMulti(steps_past: int, steps_future: int, data = DataFrame(), features = [], scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_mlp(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (25,'relu'),\n                                           'layer2': (25, 'relu')})\n\npredictor.create_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                      metrics: str = 'mean_squared_error',\n                      layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                            'layer2': (50, 'relu')})\n\npredictor.create_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu')})\n\npredictor.create_birnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_encdec_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                             metrics: str = 'mean_squared_error',\n                             layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (100, 'relu')})\n\npredictor.create_encdec_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                      monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor = PureMulti(steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n2. Multivariate-Multistep forecasting - Hybrid architectures\n\n```python3\nfrom imbrium.predictors.multivarhybrid import HybridMulti\n\n# please make sure that the target feature is the first variable in the feature list\npredictor = HybridMulti(sub_seq: int, steps_past: int, steps_future: int, data = DataFrame(), features:list = [], scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_cnnrnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnlstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                         metrics: str = 'mean_squared_error',\n                         layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnngru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbirnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                           metrics: str = 'mean_squared_error',\n                           layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                      monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor =  HybridMulti(sub_seq: int, steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n</details>\n\n## References\n\n<details>\n  <summary>Expand</summary>\n\nBrwonlee, J., 2016. Display deep learning model training history in keras [Online]. Available from:\nhttps://machinelearningmastery.com/display-deep-\nlearning-model-training-history-in-keras/.\n\nBrwonlee, J., 2018a. How to develop convolutional neural network models for time series forecasting [Online]. Available from:\nhttps://machinelearningmastery.com/how-to-develop-convolutional-\nneural-network-models-for-time-series-forecasting/.\n\nBrwonlee, J., 2018b. How to develop lstm models for time series forecasting [Online]. Available from:\nhttps://machinelearningmastery.com/how-to-develop-\nlstm-models-for-time-series-forecasting/.\n\nBrwonlee, J., 2018c. How to develop multilayer perceptron models for time series forecasting [Online]. Available from:\nhttps://machinelearningmastery.com/how-to-develop-multilayer-\nperceptron-models-for-time-series-forecasting/.\n\n</details>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maxmekiska/Imbrium",
    "keywords": "machinelearning,keras,deeplearning,timeseries,forecasting",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imbrium",
    "package_url": "https://pypi.org/project/imbrium/",
    "platform": null,
    "project_url": "https://pypi.org/project/imbrium/",
    "project_urls": {
      "Homepage": "https://github.com/maxmekiska/Imbrium"
    },
    "release_url": "https://pypi.org/project/imbrium/1.1.0/",
    "requires_dist": [
      "setuptools (>=41.0.0)",
      "tensorflow (<2.12.0,>=2.11.0)",
      "matplotlib (<3.7.0,>=3.5.0)",
      "pandas (<1.6.0,>=1.3.3)",
      "scikit-learn (<1.3.0,>=1.0)",
      "optuna (<3.2.0,>=3.1.0)"
    ],
    "requires_python": "",
    "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17216666,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ca9e9fe69f19d1c22a7211abcb7ce08e9ee58838db71bf894b070b3e18b3140",
          "md5": "fc4bfed20c2868cd2569ff1e29d68b85",
          "sha256": "283a429b6c6f147e3cf9ff6537894d17821b6cd07c868d34bf20eb1f598a6a61"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc4bfed20c2868cd2569ff1e29d68b85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22525,
        "upload_time": "2022-07-03T00:46:56",
        "upload_time_iso_8601": "2022-07-03T00:46:56.495578Z",
        "url": "https://files.pythonhosted.org/packages/8c/a9/e9fe69f19d1c22a7211abcb7ce08e9ee58838db71bf894b070b3e18b3140/Imbrium-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9996d2933e3c3500eb2eff53785168d1d263f5b8990913d1fa65637714a7d1f",
          "md5": "a80f3ba66f1f72d692b07d071bf0c747",
          "sha256": "cdeaf9df5be89a2c49eebe545485ad04566b51496d20d16d7ac2d08065d8c5bb"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a80f3ba66f1f72d692b07d071bf0c747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12526,
        "upload_time": "2022-07-03T00:46:58",
        "upload_time_iso_8601": "2022-07-03T00:46:58.995751Z",
        "url": "https://files.pythonhosted.org/packages/d9/99/6d2933e3c3500eb2eff53785168d1d263f5b8990913d1fa65637714a7d1f/Imbrium-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac22171c3c27ce0e8dd9f9ca96f685f3ab34ab4365450b0d9e2f754d26c70acd",
          "md5": "a2bf500092e1f8876637a7137c108354",
          "sha256": "206e81ca66a378edb01ed198373fcd03f5b0558f41e4899a32b694de99663483"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2bf500092e1f8876637a7137c108354",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22791,
        "upload_time": "2022-07-07T22:14:27",
        "upload_time_iso_8601": "2022-07-07T22:14:27.138245Z",
        "url": "https://files.pythonhosted.org/packages/ac/22/171c3c27ce0e8dd9f9ca96f685f3ab34ab4365450b0d9e2f754d26c70acd/Imbrium-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dcfd1a3f36351066224769cda805290810481172c40a320489e872d2af52b32",
          "md5": "8285de4715efbd29b61ba608dac2de8a",
          "sha256": "55a880049b9ff5ba85e26e060553871f084f2c0c6a41fd7bb541724db3b686bc"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8285de4715efbd29b61ba608dac2de8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12821,
        "upload_time": "2022-07-07T22:14:28",
        "upload_time_iso_8601": "2022-07-07T22:14:28.803444Z",
        "url": "https://files.pythonhosted.org/packages/7d/cf/d1a3f36351066224769cda805290810481172c40a320489e872d2af52b32/Imbrium-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f1235c2f70411bd53ea46ccadaccc56f12b5bc240c0d5f0b276141eb1f5e193",
          "md5": "0a99d59834b9623edadfdab04a81df3b",
          "sha256": "edacd0349070b90108e230d96175f989f593cc4a6e5f629d9782b2e335a499af"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a99d59834b9623edadfdab04a81df3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24465,
        "upload_time": "2022-07-12T11:51:39",
        "upload_time_iso_8601": "2022-07-12T11:51:39.072077Z",
        "url": "https://files.pythonhosted.org/packages/7f/12/35c2f70411bd53ea46ccadaccc56f12b5bc240c0d5f0b276141eb1f5e193/Imbrium-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67be9508a559c447961815c6fe8798792950a50b1cb85cadf7bf1f8d892f31ac",
          "md5": "de9127235a75fce71c2648135b8b205f",
          "sha256": "bb17cbae6cb613a72dfc89cf06632d965ed7874958dff1fe1083ec10ae8856a7"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "de9127235a75fce71c2648135b8b205f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14237,
        "upload_time": "2022-07-12T11:51:41",
        "upload_time_iso_8601": "2022-07-12T11:51:41.264843Z",
        "url": "https://files.pythonhosted.org/packages/67/be/9508a559c447961815c6fe8798792950a50b1cb85cadf7bf1f8d892f31ac/Imbrium-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "220cca5295040a28c6ee2a599ac2d2cf73f17a54e57d27ff98046e677bd4acfa",
          "md5": "a5c9503ec886e047482e5c504c0c16fc",
          "sha256": "611f7ab0cfe252af521bfcba46fdf59f81205bb7f650004de281ff7553b7b2c3"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5c9503ec886e047482e5c504c0c16fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25345,
        "upload_time": "2022-07-22T22:54:58",
        "upload_time_iso_8601": "2022-07-22T22:54:58.280752Z",
        "url": "https://files.pythonhosted.org/packages/22/0c/ca5295040a28c6ee2a599ac2d2cf73f17a54e57d27ff98046e677bd4acfa/Imbrium-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3ebd2481927714e3d996530d5980db5f343310c12afae56b361f11d799ac0a8",
          "md5": "d112a500a4b1539c7a8b579fb5af0dbb",
          "sha256": "c9377e5dc8245b2e34d695f2a6ff91bbe697dc805ec8f16f8725e610a7a09f0f"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d112a500a4b1539c7a8b579fb5af0dbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16745,
        "upload_time": "2022-07-22T22:55:01",
        "upload_time_iso_8601": "2022-07-22T22:55:01.392081Z",
        "url": "https://files.pythonhosted.org/packages/c3/eb/d2481927714e3d996530d5980db5f343310c12afae56b361f11d799ac0a8/Imbrium-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10c0dd23d2de5811006e5def426882d681c01802ece3ed6bd26c016cab8543c6",
          "md5": "b10d6381841af02d0899ee878eb0c9a1",
          "sha256": "19578696854f414bfac611802370484fe81924bb4d53ad5a774b115bfda563b3"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b10d6381841af02d0899ee878eb0c9a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27728,
        "upload_time": "2022-07-31T00:33:04",
        "upload_time_iso_8601": "2022-07-31T00:33:04.337414Z",
        "url": "https://files.pythonhosted.org/packages/10/c0/dd23d2de5811006e5def426882d681c01802ece3ed6bd26c016cab8543c6/Imbrium-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "109a7069e25220a0c4abec2e3f6b31eabb05053cb2fc18668c99fd5a3655f9b1",
          "md5": "0a70a0e0cab34c4cc6cefb2b28d783e8",
          "sha256": "e80325d7bf4efd6fa3909c9d4482f71ab51ed12d021121796a5cfc9129afb28a"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0a70a0e0cab34c4cc6cefb2b28d783e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24902,
        "upload_time": "2022-07-31T00:33:07",
        "upload_time_iso_8601": "2022-07-31T00:33:07.312891Z",
        "url": "https://files.pythonhosted.org/packages/10/9a/7069e25220a0c4abec2e3f6b31eabb05053cb2fc18668c99fd5a3655f9b1/Imbrium-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33e4d7e693d3ac7867334ed869c98028c820d985afc01fd681c3dd36e400a039",
          "md5": "81c2f2c8266d94e3a5b09b0d759674ab",
          "sha256": "7cfaab58438c7bcb3369330b92da1fce78776af7497d8893da4b92a20d24f704"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81c2f2c8266d94e3a5b09b0d759674ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27932,
        "upload_time": "2022-08-02T23:01:10",
        "upload_time_iso_8601": "2022-08-02T23:01:10.352305Z",
        "url": "https://files.pythonhosted.org/packages/33/e4/d7e693d3ac7867334ed869c98028c820d985afc01fd681c3dd36e400a039/Imbrium-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "beca038e45dc3594f422c7e26ee0aa086c3afb3ee589b14aa3937e183dd7dad2",
          "md5": "9b058189dc880087e5e25c07f5d21f3a",
          "sha256": "f7c8f356a261b399d09177ccb82cd680224f244388c223f489608d5e06f409da"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9b058189dc880087e5e25c07f5d21f3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21681,
        "upload_time": "2022-08-02T23:01:12",
        "upload_time_iso_8601": "2022-08-02T23:01:12.862748Z",
        "url": "https://files.pythonhosted.org/packages/be/ca/038e45dc3594f422c7e26ee0aa086c3afb3ee589b14aa3937e183dd7dad2/Imbrium-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40594e017a00db2d1f3cb792451998d5b39db8806552ba16c277b64bcd2cdc25",
          "md5": "abe87b14c7debb59fdaff20d7e933299",
          "sha256": "89aa7c9df6ab61f174912797c725d065574a29cf71bdef4f1e33a343efff27ec"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abe87b14c7debb59fdaff20d7e933299",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27809,
        "upload_time": "2022-09-19T18:49:55",
        "upload_time_iso_8601": "2022-09-19T18:49:55.383930Z",
        "url": "https://files.pythonhosted.org/packages/40/59/4e017a00db2d1f3cb792451998d5b39db8806552ba16c277b64bcd2cdc25/Imbrium-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a3382befd777c06ee6f89611cb0df8e5ee32142bae6a0d77efa741f7a48622f",
          "md5": "012d93ef2aee3e60d266e1e6584a4583",
          "sha256": "1fce9ba4cb31a8d071638eed0fc263929e12a758bac66a033b0cd66a648da097"
        },
        "downloads": -1,
        "filename": "Imbrium-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "012d93ef2aee3e60d266e1e6584a4583",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21002,
        "upload_time": "2022-09-19T18:49:58",
        "upload_time_iso_8601": "2022-09-19T18:49:58.995464Z",
        "url": "https://files.pythonhosted.org/packages/4a/33/82befd777c06ee6f89611cb0df8e5ee32142bae6a0d77efa741f7a48622f/Imbrium-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f614e3f437105c08af5e9e8adf25be606154ea00e72a6b3cb6c72d5b0fe1615",
          "md5": "61c1443367468c1b2147e96d87587b37",
          "sha256": "6091228e436eb15ace394aba1f7671f429e7c4813f312f0b036e48cc7cfecb71"
        },
        "downloads": -1,
        "filename": "imbrium-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61c1443367468c1b2147e96d87587b37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25810,
        "upload_time": "2022-09-25T23:17:51",
        "upload_time_iso_8601": "2022-09-25T23:17:51.412196Z",
        "url": "https://files.pythonhosted.org/packages/7f/61/4e3f437105c08af5e9e8adf25be606154ea00e72a6b3cb6c72d5b0fe1615/imbrium-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58a64633943f4f863d1cbf2fbc636acb4ac7aa9f77a627fa85895dd70aba4ce0",
          "md5": "073ac603ae677468dd79abcda0512a4e",
          "sha256": "246e72999294bd1f33b19fb3a6ff14ac56144d07491c3a4ad34c71975e2c6a71"
        },
        "downloads": -1,
        "filename": "imbrium-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "073ac603ae677468dd79abcda0512a4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21416,
        "upload_time": "2022-09-25T23:17:54",
        "upload_time_iso_8601": "2022-09-25T23:17:54.039401Z",
        "url": "https://files.pythonhosted.org/packages/58/a6/4633943f4f863d1cbf2fbc636acb4ac7aa9f77a627fa85895dd70aba4ce0/imbrium-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9966ce2c17e741289ac83b86f363d5e3c92b1f0b08c29e1b190eb0324f50d216",
          "md5": "0ee89120b88ee3cb4ca9ddaaa96e2019",
          "sha256": "bf81b181bb1b56c59e50e47381a726db7d527171c795bfe28557e3fdada119de"
        },
        "downloads": -1,
        "filename": "imbrium-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ee89120b88ee3cb4ca9ddaaa96e2019",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24113,
        "upload_time": "2022-11-01T02:35:11",
        "upload_time_iso_8601": "2022-11-01T02:35:11.563494Z",
        "url": "https://files.pythonhosted.org/packages/99/66/ce2c17e741289ac83b86f363d5e3c92b1f0b08c29e1b190eb0324f50d216/imbrium-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae2c01ae856c36c73a9a6a137ae63fa1d69c7c78b6ec5cb097ce605c52732fd0",
          "md5": "6b08fe82abe1aed7b924ffaa075bf1a9",
          "sha256": "3e62983a8e89504831c1c6f4e13a7c9e1086fbb0c5af290fabb6cfe836ca8e2a"
        },
        "downloads": -1,
        "filename": "imbrium-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b08fe82abe1aed7b924ffaa075bf1a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17940,
        "upload_time": "2022-11-01T02:35:14",
        "upload_time_iso_8601": "2022-11-01T02:35:14.097554Z",
        "url": "https://files.pythonhosted.org/packages/ae/2c/01ae856c36c73a9a6a137ae63fa1d69c7c78b6ec5cb097ce605c52732fd0/imbrium-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2ad9bc66945196d60b076830c633813fdc340ba27fb1286890d1a91c69c25e",
          "md5": "09087b8b2ed7c5c9d2b6c13eb7b5c78e",
          "sha256": "93e3fa8e97ffb2cb5cb3c8a0924d7e2120520bdc469aeebac1860481b1b9e9a7"
        },
        "downloads": -1,
        "filename": "imbrium-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09087b8b2ed7c5c9d2b6c13eb7b5c78e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24594,
        "upload_time": "2023-01-27T01:25:31",
        "upload_time_iso_8601": "2023-01-27T01:25:31.659542Z",
        "url": "https://files.pythonhosted.org/packages/5e/2a/d9bc66945196d60b076830c633813fdc340ba27fb1286890d1a91c69c25e/imbrium-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc8fad23397f04b52649ce00e6667d53e7105dacdd4312ac0a4104a45c46e83",
          "md5": "757c8a29cfb44b9faf1d7a061a36a312",
          "sha256": "e55ebcd56c95d34c32bb790a4ae73185ba38c299f1c5e6e3a9ee1d68f1208e51"
        },
        "downloads": -1,
        "filename": "imbrium-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "757c8a29cfb44b9faf1d7a061a36a312",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19903,
        "upload_time": "2023-01-27T01:25:33",
        "upload_time_iso_8601": "2023-01-27T01:25:33.573623Z",
        "url": "https://files.pythonhosted.org/packages/5d/c8/fad23397f04b52649ce00e6667d53e7105dacdd4312ac0a4104a45c46e83/imbrium-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5004c7b8760ac0eb5c2e37fc844bdb84ed514768db1160b81efbcbefa47f8b25",
          "md5": "59c70ac17679e955b7a9299d00b5b0c8",
          "sha256": "ed669e8c5f88422a86ef18b2bfcc02b55ba7ad4adbab791c28340b6bc05a56be"
        },
        "downloads": -1,
        "filename": "imbrium-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59c70ac17679e955b7a9299d00b5b0c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27305,
        "upload_time": "2023-03-09T01:29:30",
        "upload_time_iso_8601": "2023-03-09T01:29:30.507038Z",
        "url": "https://files.pythonhosted.org/packages/50/04/c7b8760ac0eb5c2e37fc844bdb84ed514768db1160b81efbcbefa47f8b25/imbrium-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8efb59f022bda83694c4fac963e7ed6bfc39850d065b5d9835906ae50de783d6",
          "md5": "35c1a7a476b46cb8d6a7ee3cfa8418fd",
          "sha256": "84a7336c9af5a49fd65c094aacf48f74e589d60ea5a35b9fd4a8d5a19b202e37"
        },
        "downloads": -1,
        "filename": "imbrium-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "35c1a7a476b46cb8d6a7ee3cfa8418fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24528,
        "upload_time": "2023-03-09T01:29:33",
        "upload_time_iso_8601": "2023-03-09T01:29:33.172499Z",
        "url": "https://files.pythonhosted.org/packages/8e/fb/59f022bda83694c4fac963e7ed6bfc39850d065b5d9835906ae50de783d6/imbrium-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5004c7b8760ac0eb5c2e37fc844bdb84ed514768db1160b81efbcbefa47f8b25",
        "md5": "59c70ac17679e955b7a9299d00b5b0c8",
        "sha256": "ed669e8c5f88422a86ef18b2bfcc02b55ba7ad4adbab791c28340b6bc05a56be"
      },
      "downloads": -1,
      "filename": "imbrium-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "59c70ac17679e955b7a9299d00b5b0c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27305,
      "upload_time": "2023-03-09T01:29:30",
      "upload_time_iso_8601": "2023-03-09T01:29:30.507038Z",
      "url": "https://files.pythonhosted.org/packages/50/04/c7b8760ac0eb5c2e37fc844bdb84ed514768db1160b81efbcbefa47f8b25/imbrium-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8efb59f022bda83694c4fac963e7ed6bfc39850d065b5d9835906ae50de783d6",
        "md5": "35c1a7a476b46cb8d6a7ee3cfa8418fd",
        "sha256": "84a7336c9af5a49fd65c094aacf48f74e589d60ea5a35b9fd4a8d5a19b202e37"
      },
      "downloads": -1,
      "filename": "imbrium-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "35c1a7a476b46cb8d6a7ee3cfa8418fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24528,
      "upload_time": "2023-03-09T01:29:33",
      "upload_time_iso_8601": "2023-03-09T01:29:33.172499Z",
      "url": "https://files.pythonhosted.org/packages/8e/fb/59f022bda83694c4fac963e7ed6bfc39850d065b5d9835906ae50de783d6/imbrium-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}