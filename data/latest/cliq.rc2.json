{
  "info": {
    "author": "youhyunjo",
    "author_email": "you@cpan.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# cliq: creating command line interfaces quickly in Python\n\n`cliq` is a lightweight framework for creating a command line application or\nwriting a libary powered with command line tools in Python.\n\n- supports nested subcommands\n- equiped with init and config system\n- supports multiple command line tools in a single library\n- only depends on the standard library\n\n\n## Quick Start\n\nInstall cliq:\n\n```\n$ pip install cliq\n```\n\nCreate your project:\n\n``` \n$ cliq create project ./myapp\n$ pip install -e ./myapp\n$ myapp\n```\n\nCreate a new command:\n\n```\n$ cliq create command do.py\n$ python do.py -h\n```\n\nAdd the command to your project:\n\n```\n$ mv do.py ./myapp/myapp/main/command/\n$ myapp do -h\n```\n\nRemove `help`, `init`, `config` commands if you don't need them:\n\n```\n$ cd ./myapp/myapp/main/command\n$ rm help.py init.py config.py\n```\n\n## Commands\n\n- A command is standalone and complete by itself if you don't need config.\n- You can run it as an independent script. \n- Just copy a command script into your project.\n- There is nothing to be configured.\n\nTry toy sample commands:\n\n```\n$ cliq create project myapp --sample\n$ pip install -e ./myapp \n$ myapp say hello\nhello\n$ cliq please say hello\nhello\n$ cliq please sum 1 2 3 4 5\n15.0\n```\n\nWrite your command:\n\n- It's just an argparse.ArgumentParser\n- See <https://docs.python.org/3/library/argparse.html>\n- Add arguments to the `self.parser`\n- Write the `run` method\n- Your command runs standalone if you don't use the `app` variable, which\n  allows your command to access config variables through `app.config`.\n\nCreate a command script:\n```\n$ cliq create command say.py \n```\n\nEdit the script:\n\n```python\n...\n\nclass Command(SimpleCommand):\n    def __init__(self, app = None, name = __name__):\n        super().__init__(app, name)\n\n        # self.parser is an argparse.ArumentParser\n        # see https://docs.python.org/3/library/argparse.html       \n        #\n        # add arguments. for example:\n        #\n        # self.parser.add_argument('input', type=str, help='input filename')\n        # self.parser.add_argument('-v', '--verbose', action='store_true', help='verbose')\n        # self.parser.add_argument('-o', '--output', type=str, help='output filename')\n\n    def run(self, argv):\n        args = self.parser.parse_args(argv)\n\n        # implement command line functionalities\n        print(args)\n \n...\n```\n\n## Library\n\nCreate a project and add modules:\n\n```\n$ cliq create project mylib\n$ pip install -e ./mylib\n$ echo 'def mean(*x): return sum(x)/len(x)' > mylib/mylib/math.py\n```\n\nIt is a normal library:\n\n```python\n>>> import mylib.math\n>>> mylib.math.mean(1, 2, 3, 4, 5)\n3.0\n```\n\nAdd commands. For example,\n\n```\n$ cliq create command mylib/mylib/main/command/mean.py\n```\n\n```python\nimport sys\nfrom cliq.main.command import SimpleCommand\nimport mylib.math\n\ndef init(app):\n    return Command(app)\n\nclass Command(SimpleCommand):\n    def __init__(self, app = None, name = __name__):\n        super().__init__(app, name)\n\n        self.parser.add_argument('x', type=float, nargs='+')\n\n    def run(self, argv):\n        args = self.parser.parse_args(argv)\n\n        # implement command line functionalities\n        print(mylib.math.mean(*args.x))\n \n```\n\nRun the command:\n\n```\n$ mylib mean 1 2 3 4\n2.5\n```\n\n\n\n\n## Tutorial\n### Concepts\n\n#### app, command and subcommand\n\n`cliq` supports nested command line interfaces to the depth 3: app, command, and subcommand.\n\n```\n$ cliq   create     project       ./myapp      --with-sample-commands\n$ pip    install                               -e ./myapp\n$ myapp  please     sum           1 2 3 \n$ myapp  say                      hello\n$ myapp                                        --help\n  <app>  <command>  <subcommand>  <arguments>  <options>\n```\n\n#### project, library and app\n\n`cliq` supports a library with multiple command line apps:\n\n```\n$ cliq create project ./myproj --name mylib --cli myapp,yourapp\n$ pip install -e ./mylib\n$ myapp -h\n$ yourapp -h\n```\n\nSee the directory structure: project, library and apps.\n \n```\n$ tree myproj\nmyproj\n├── README.md\n├── mylib\n│   ├── __init__.py\n│   ├── myapp\n│   │   ├── __init__.py\n│   │   └── main\n│   │       ├── __init__.py\n│   │       └── command\n│   │           ├── config.py\n│   │           ├── help.py\n│   │           └── init.py\n│   └── yourapp\n│       ├── __init__.py\n│       └── main\n│           ├── __init__.py\n│           └── command\n│               ├── config.py\n│               ├── help.py\n│               └── init.py\n├── setup.cfg\n└── setup.py\n\n7 directories, 14 files\n```\n\n\n\n\n### Simple command\n\nGenerate a simple command template script file:\n\n```\n$ cliq create command say.py  \n$ python say.py -h\nusage: __main__ [-h]\n\noptions:\n  -h, --help  show this help message and exit\n```\n\nAdd arguments to `self.parser` and implement `run` method:\n\n```python\nclass Command(SimpleCommand):\n    def __init__(self, app = None, name = __name__):\n        super().__init__(app, name)\n        \n        self.parser.add_argument('something', type=str, help='something')\n        \n    def run(self, argv):\n        args = self.parser.parse_args(argv)\n        print(args.something)\n```\n\nUse it:\n\n```\n$ python say.py hello\nhello\n```\n\n\n### Complex command with nested subcommands\n\nCreate a command script file with the subcommands option:\n\n```\n$ cliq create command do.py --with-subcommands something,anything,nothing \n```\n\nTest it:\n\n```\n$ python do.py\nusage: __main__ [-h] {something,anything,nothing} ...\n\noptions:\n  -h, --help            show this help message and exit\n\nsubcommands:\n  {something,anything,nothing}\n                        command help\n    something           something\n    anything            anything\n    nothing             nothing\n\n```\n\nEdit it and put it into the command directory:\n\n```\n$ mv do.py myapp/myapp/main/command/\n```\n\n### Project with multiple command line modules\n\nYou can create a project with multiple command line interface modules.\n\n```\n$ cliq create project ./holy --with-cli graham,terry \n$ pip install -e ./holy\n```\n\nDirectory strucutre:\n\n```\nholy/\n└── holy\n    ├── graham\n    │   └── main\n    │       └── command\n    └── terry\n        └── main\n            └── command\n```\n\nTest cli modules:\n\n```\n$ graham -h \n...\n\n$ terry -h \n...\n```\n\nAdd commands:\n\n```\n$ cliq create command holy/holy/graham/main/command/say.py\n$ graham say -h\n\n$ cliq create command holy/holy/graham/main/command/play.py --sub role,instrument\n$ graham play role -h\n$ graham play instrument -h\n```\n\n### Simple command line apps\n\nA command line module can run without predefined commands. Just put your\ncommand script named `__init__.py` into the path `<app>/main/command/`.\n\n```\nmyapp/\n├── __init__.py\n└── main\n    ├── __init__.py\n    └── command\n        └── __init__.py\n```\n\nFor example, you are going to write a image library with command line\nconverters.\n\n```\n$ cliq create project myimglib --cli png2jpg,jpg2png\n$ pip install -e ./myimglib/\n$ cliq create command myimglib/myimglib/png2jpg/main/command/__init__.py\n$ png2jpg --help\n```\n\nOpen `__init__.py` and write your code. `png2jpg` runs the code in\n`__init__.py`. Remove default command scripts if you don't need them.\n\n```\n$ rm myimglib/myimglib/png2jpg/main/command/*\n$ cliq create command myimglib/myimglib/png2jpg/main/command/__init__.py\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/youhyunjo/cliq",
    "keywords": "cli framework",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cliq",
    "package_url": "https://pypi.org/project/cliq/",
    "platform": "",
    "project_url": "https://pypi.org/project/cliq/",
    "project_urls": {
      "Homepage": "https://github.com/youhyunjo/cliq"
    },
    "release_url": "https://pypi.org/project/cliq/0.9.3/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "a lightweight framework for creating command line interfaces quickly",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13036268,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc0c36fa7294a5c2b29068664d295097573cb3b5eea6560ed2c5d263d38e7885",
          "md5": "036be3152877c6d78c282f2e00fc64f0",
          "sha256": "b3f6eea29d318c81ce4b722ea893751303ab247a4c6f17b44b6a1f13888adba7"
        },
        "downloads": -1,
        "filename": "cliq-0.9.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "036be3152877c6d78c282f2e00fc64f0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 18846,
        "upload_time": "2022-02-27T16:42:16",
        "upload_time_iso_8601": "2022-02-27T16:42:16.520454Z",
        "url": "https://files.pythonhosted.org/packages/fc/0c/36fa7294a5c2b29068664d295097573cb3b5eea6560ed2c5d263d38e7885/cliq-0.9.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a3d6d0c4abe7ca9ee5ab31ba65faed4fc697aba539bbd646866c4939e813a23",
          "md5": "a71890ceec74850d7271e1de647d09f7",
          "sha256": "70a2dac4edfb8fe8708f4dfe3178fef74d2a831a4ae9a3b50ce92f23cd672982"
        },
        "downloads": -1,
        "filename": "cliq-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a71890ceec74850d7271e1de647d09f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 13309,
        "upload_time": "2022-02-27T16:42:18",
        "upload_time_iso_8601": "2022-02-27T16:42:18.275561Z",
        "url": "https://files.pythonhosted.org/packages/2a/3d/6d0c4abe7ca9ee5ab31ba65faed4fc697aba539bbd646866c4939e813a23/cliq-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "785c2eeb3c38b1116d328b05ec57df62d10df28b17fd5c33521a9ad43ea6c17d",
          "md5": "5e81d7354a777f18faf48bb1c9b15ca0",
          "sha256": "a244d0bda0f10cb5a39b24a6007d3697fcf56ef967773bb261451cd312d7b618"
        },
        "downloads": -1,
        "filename": "cliq-0.9.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e81d7354a777f18faf48bb1c9b15ca0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 20467,
        "upload_time": "2022-02-28T18:26:48",
        "upload_time_iso_8601": "2022-02-28T18:26:48.079598Z",
        "url": "https://files.pythonhosted.org/packages/78/5c/2eeb3c38b1116d328b05ec57df62d10df28b17fd5c33521a9ad43ea6c17d/cliq-0.9.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1153808d1340c840f1c447556b43fbb96612f7193db8b3e348eb034d85210dd",
          "md5": "01864e9a06cddd0d795b402482efbc0a",
          "sha256": "c6606e8d0304c85e84f43e97bdef694bcd5580a1a897614784e483b7e007aa2d"
        },
        "downloads": -1,
        "filename": "cliq-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "01864e9a06cddd0d795b402482efbc0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15805,
        "upload_time": "2022-02-28T18:26:49",
        "upload_time_iso_8601": "2022-02-28T18:26:49.391272Z",
        "url": "https://files.pythonhosted.org/packages/c1/15/3808d1340c840f1c447556b43fbb96612f7193db8b3e348eb034d85210dd/cliq-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "785c2eeb3c38b1116d328b05ec57df62d10df28b17fd5c33521a9ad43ea6c17d",
        "md5": "5e81d7354a777f18faf48bb1c9b15ca0",
        "sha256": "a244d0bda0f10cb5a39b24a6007d3697fcf56ef967773bb261451cd312d7b618"
      },
      "downloads": -1,
      "filename": "cliq-0.9.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e81d7354a777f18faf48bb1c9b15ca0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 20467,
      "upload_time": "2022-02-28T18:26:48",
      "upload_time_iso_8601": "2022-02-28T18:26:48.079598Z",
      "url": "https://files.pythonhosted.org/packages/78/5c/2eeb3c38b1116d328b05ec57df62d10df28b17fd5c33521a9ad43ea6c17d/cliq-0.9.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1153808d1340c840f1c447556b43fbb96612f7193db8b3e348eb034d85210dd",
        "md5": "01864e9a06cddd0d795b402482efbc0a",
        "sha256": "c6606e8d0304c85e84f43e97bdef694bcd5580a1a897614784e483b7e007aa2d"
      },
      "downloads": -1,
      "filename": "cliq-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "01864e9a06cddd0d795b402482efbc0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 15805,
      "upload_time": "2022-02-28T18:26:49",
      "upload_time_iso_8601": "2022-02-28T18:26:49.391272Z",
      "url": "https://files.pythonhosted.org/packages/c1/15/3808d1340c840f1c447556b43fbb96612f7193db8b3e348eb034d85210dd/cliq-0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}