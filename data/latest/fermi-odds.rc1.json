{
  "info": {
    "author": "",
    "author_email": "Sina Baharlouei <baharlou@usc.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Fair Empirical Risk Minimization Via Exponential Rényi Mutual Information\r\nThis repository is dedicated to implementation of Fair Empirical Risk Minimization (FERMI) algorithms proposed in . FERMI provides the first ****stochastic**** algorithm with theroretical convergence guarantees for promoting fairness in classification tasks. To balance the accuracy and fairness, **fair risk minimization through exponential Rényi mutual information** framework minimizes the following objective function:\r\n\r\n<div align='center'>\r\n<img src=\"General_Framework.png\" width=\"750\" align='center'>\r\n</div>\r\n\r\nwhere the first term represents the population risk (accuracy) and the second term is a regularizer promoting exponential Rényi mutual information (ERMI) between the sensitive attribute(s) and predictions. Note that ERMI is a stronger notion of fairness compared to existing notions of fairness such as mutual information [Kamishima et al., 2011, Rezaei et al., 2020, Steinberget al., 2020, Zhang et al., 2018, Cho et al., 2020a], Pearson correlation [Zafar et al., 2017], false positive/negative rates[Bechavod and Ligett, 2017], Hilbert Schmidt independence criterion (HSIC) [Pérez-Suay et al., 2017], and Rényicorrelation [Baharlouei et al., 2020, Grari et al., 2020, 2019], in the sense that it upper bounds all aforementioned notions. Thus, minimizing ERMI guarantees the fairness of model under those notions. In the following table we compare FERMI with several state-of-the-art approaches in the literature. Note that the abbrevations NB, Cont., Stoch., DP, EOD, MI and RC stand for Non-binary, Continuous, Stochastic, Dempographic Parity, Equalized Odds, Mutual Information, and Rényi Correlation respectively.\r\n\r\n\r\n**Reference** | **NB Target** | **NB Attribute** | **NB both exp.** | **Violation Notion** | **Unbiased Stoch. Alg** | **Convergence Guarantee**\r\n:-: | :-: | :-: | :-: | :-: | :-: | :-:\r\nSotchastic FERMI | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |  DP, EOD, MI, RC, ERMI | :heavy_check_mark: | O(ε<sup>-4</sup>) (Stoch)\r\nBatch FERMI | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | DP, EOD, MI, RC, ERMI | :x: | O(ε<sup>-4</sup>) (Batch)\r\nCho et al. [2020a] | :heavy_check_mark: | :heavy_check_mark: | :x: | DP, EOD, MI | :heavy_check_mark: | :x:\r\nCho et al. [2020b] | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | DP, EOD | biased | :x:\r\nBaharlouei et al. [2020] | :heavy_check_mark: | :heavy_check_mark: | :x: | DP, EOD, RC | :x: | O(ε<sup>-4</sup>) (Batch)\r\nRezaei et al. [2020] | :x: |  :x: | :x: | DP, EOD | :x: | :x:\r\nJiang et al. [2020] | :x: | :heavy_check_mark: | :x: | DP | :x: | :x:\r\nDonini et al. [2018] | :x: | :heavy_check_mark: | :x: | EOD | :x: | :x:\r\nZhang et al. [2018] | :heavy_check_mark: | :heavy_check_mark: | :x: | DP, EOD | biased | :x:\r\n\r\n\r\n\r\n## Dependencies\r\nThe following packages must be installed via Anaconda or pip before running the codes. Download and install **Python 3.x version** from [Python 3.x Version](https://www.python.org/downloads/):\r\nThen install the following packages via Conda or pip:\r\n* [Numpy](https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html)\r\n* [Pandas](https://anaconda.org/conda-forge/matplotlib)\r\n* [Scikit learn](https://scikit-learn.org/stable/install.html)\r\n* [Matplotlib](https://matplotlib.org/stable/users/installing.html)\r\n* [PyTorch](https://pytorch.org/get-started/locally/)\r\n\r\n\r\n## Binary Classification with Binary Sensitive Attribute\r\nTo run the code for a binary classification problem with a binary sensitive attribute use the following command:\r\n\r\n```\r\npython BinaryClassification/Binary_FERMI.py\r\n```\r\n\r\nThe above code updates the parameters of a logistic regression model via gradient descent algorithm. When the training dataset is large-scale, the implemented algorithm can be slow. Thus, we suggest to run the following code which updates the parameters using stochastic gradient descent. Note that, from a theoretical point of view the number of required iterations for FERMI (stochastic version) is not better than the deterministic algorithm, but the per-iteration cost is much smaller especially when smaller batches are chosen.\r\n\r\n```\r\npython BinaryClassification/Stochastic_FERMI.py\r\n```\r\n\r\n\r\n## Stochastic FERMI for Large-scale Neural Networks on Datasets with Multiple Sensitive Attributes (Non-binary Labels and Sensitive Attributes)\r\nThe implementation of Algorithm 1 in [paper](https://arxiv.org/abs/2102.12586), specialized to a 4-layer neural network on color mnist dataset can be found in NeuralNetworkMnist folder. You can run it on color mnist dataset via:\r\n\r\n```\r\npython NeuralNetworkMnist/code_cm.py\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "FERMI-ODDS",
    "package_url": "https://pypi.org/project/FERMI-ODDS/",
    "platform": null,
    "project_url": "https://pypi.org/project/FERMI-ODDS/",
    "project_urls": {
      "Bug Tracker": "https://github.com/optimization-for-data-driven-science/FERMI",
      "Homepage": "https://github.com/optimization-for-data-driven-science/FERMI"
    },
    "release_url": "https://pypi.org/project/FERMI-ODDS/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Fair Empirical Risk Minimization via Exponential Renyi Mutual Information (ERMI)",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15837224,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbc6295f2d429a42987749a301f64e8f7e7e0565d3a3ff00753c7f6e4ac226f5",
          "md5": "18727735a354e4845c03f0052910893b",
          "sha256": "cbabbdb795bd74573ff39ea795e6ab48fe8c45785cfda42145c39743e276ada1"
        },
        "downloads": -1,
        "filename": "FERMI_ODDS-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18727735a354e4845c03f0052910893b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7127,
        "upload_time": "2022-11-21T07:51:52",
        "upload_time_iso_8601": "2022-11-21T07:51:52.934996Z",
        "url": "https://files.pythonhosted.org/packages/bb/c6/295f2d429a42987749a301f64e8f7e7e0565d3a3ff00753c7f6e4ac226f5/FERMI_ODDS-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61bbe60af48187ea81080fc197bc4df8080773ee989368da7ffc1f1b716abe00",
          "md5": "2c8fe0c8286b90c49aba29fa863106d8",
          "sha256": "d06f12d98bcf352adb234fea3a8d247ba1a49392c4f6c3fdfcf27899a4485178"
        },
        "downloads": -1,
        "filename": "FERMI_ODDS-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c8fe0c8286b90c49aba29fa863106d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6431,
        "upload_time": "2022-11-21T07:51:55",
        "upload_time_iso_8601": "2022-11-21T07:51:55.083205Z",
        "url": "https://files.pythonhosted.org/packages/61/bb/e60af48187ea81080fc197bc4df8080773ee989368da7ffc1f1b716abe00/FERMI_ODDS-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbc6295f2d429a42987749a301f64e8f7e7e0565d3a3ff00753c7f6e4ac226f5",
        "md5": "18727735a354e4845c03f0052910893b",
        "sha256": "cbabbdb795bd74573ff39ea795e6ab48fe8c45785cfda42145c39743e276ada1"
      },
      "downloads": -1,
      "filename": "FERMI_ODDS-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18727735a354e4845c03f0052910893b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7127,
      "upload_time": "2022-11-21T07:51:52",
      "upload_time_iso_8601": "2022-11-21T07:51:52.934996Z",
      "url": "https://files.pythonhosted.org/packages/bb/c6/295f2d429a42987749a301f64e8f7e7e0565d3a3ff00753c7f6e4ac226f5/FERMI_ODDS-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61bbe60af48187ea81080fc197bc4df8080773ee989368da7ffc1f1b716abe00",
        "md5": "2c8fe0c8286b90c49aba29fa863106d8",
        "sha256": "d06f12d98bcf352adb234fea3a8d247ba1a49392c4f6c3fdfcf27899a4485178"
      },
      "downloads": -1,
      "filename": "FERMI_ODDS-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2c8fe0c8286b90c49aba29fa863106d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6431,
      "upload_time": "2022-11-21T07:51:55",
      "upload_time_iso_8601": "2022-11-21T07:51:55.083205Z",
      "url": "https://files.pythonhosted.org/packages/61/bb/e60af48187ea81080fc197bc4df8080773ee989368da7ffc1f1b716abe00/FERMI_ODDS-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}