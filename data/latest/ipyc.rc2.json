{
  "info": {
    "author": "dovedevic",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "IPyC - Python InterProcess Communication\n========================================\n\n.. image:: https://img.shields.io/pypi/v/IPyC.svg\n   :target: https://pypi.python.org/pypi/IPyC\n   :alt: PyPI version info\n.. image:: https://img.shields.io/pypi/pyversions/IPyC.svg\n   :target: https://pypi.python.org/pypi/IPyC\n   :alt: PyPI supported Python versions\n.. image:: https://readthedocs.org/projects/ipyc/badge/?version=latest\n   :target: https://ipyc.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\nAn elegant and modern Python IPC implementation using multiprocessing and asyncio. IPyC comes in two flavors, synchronous and asynchronous, both using the same backend allowing you to pick and chose to your needs.\n\nSend builtins, custom objects, and more!\n\nKey Features\n------------\n\n- Uses the modern ``async`` and ``await`` AsyncIO Python API.\n- Includes a synchronous version for backward compatibility.\n- Flexible, easy to install, setup, and use.\n- Can transfer custom objects and classes at runtime!\n\nInstalling\n----------\n\n**Python 3.5.3 or higher is required if you use the asynchronous version**\n\nTo install the library you can just run the following command:\n\n.. code:: sh\n\n    # In general\n    pip3 install IPyC\n\n    # Linux/macOS\n    python3 -m pip install -U IPyC\n\n    # Windows\n    py -3 -m pip install -U IPyC\n\n\nHello World Example (using the asynchronous version)\n----------------------------------------------------\nClient\n~~~~~~\n\n.. code:: py\n\n    import asyncio\n    from ipyc import AsyncIPyCClient\n\n    async def hello_world():\n        client = AsyncIPyCClient()  # Create a client\n        link = await client.connect()  # Connect to the host\n        await link.send(\"Hello World!\")  # Send a string\n        await client.close()  # Close the connection\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(hello_world())\n\nHost\n~~~~\n\n.. code:: py\n\n    import datetime\n    from ipyc import AsyncIPyCHost, AsyncIPyCLink\n\n    host = AsyncIPyCHost()\n\n    @host.on_connect\n    async def on_client_connect(connection: AsyncIPyCLink):\n        while connection.is_active():\n            message = await connection.receive()\n            if message:\n                print(f\"[{datetime.datetime.now()}] - Client says: {message}\")\n        print(f\"[{datetime.datetime.now()}] - Connection was closed!\")\n\n    host.run()\n\nCustom Objects Example (using the synchronous version)\n------------------------------------------------------\nCustom Object\n~~~~~~~~~~~~~\n\n.. code:: py\n\n    class CustomObject:\n        def __init__(self, arg1: int, arg2: float, arg3: str, arg4: set):\n            self.a1 = arg1\n            self.a2 = arg2\n            self.a3 = arg3\n            self.a4 = arg4\n\n        def __str__(self):\n            return f\"<CustomObject:a1={self.a1},a2={self.a2},a3={self.a3},a4={self.a4}>\"\n\n        # Define a serializer that returns a string/str representation of the object\n        def serialize(self):\n            return f\"{self.a1}|{self.a2}|{self.a3}|{self.a4}\"\n\n        # Define a deserializer that undoes what the serializer did and returns the object\n        @staticmethod\n        def deserialize(serialization):\n            a1, a2, a3, a4 = serialization.split('|')\n            return CustomObject(int(a1), float(a2), str(a3), eval(a4))\n\nClient\n~~~~~~\n\n.. code:: py\n\n    from ipyc import IPyCClient, IPyCSerialization\n\n    custom_object = CustomObject(42, 3.1415926535897932, \"Lorem ipsum dolor sit amet\", {'s', 'e', 't'})\n    IPyCSerialization.add_custom_serialization(CustomObject, CustomObject.serialize)\n\n    client = IPyCClient()\n    link = client.connect()\n    link.send(custom_object)\n    client.close()\n\nHost\n~~~~\n\n.. code:: py\n\n    import datetime\n    from ipyc import IPyCHost, IPyCLink, IPyCSerialization\n\n    host = IPyCHost()\n    IPyCSerialization.add_custom_deserialization(CustomObject, CustomObject.deserialize)\n\n    while not host.is_closed():\n        connection = host.wait_for_client()\n\n        while connection.is_active():\n            message = connection.receive()\n            if message:\n                print(f\"[{datetime.datetime.now()}] - Client sent us a {type(message)} and it was {message}\")\n                print(message.a1, message.a2, message.a3, message.a4)\n        print(f\"[{datetime.datetime.now()}] - Connection was closed!\")\n\nYou can find more examples in the `examples <https://github.com/dovedevic/IPyC/tree/main/examples>`_ directory.\n\nUseful Links\n------------\n\n- `Documentation <https://ipyc.readthedocs.io/>`_\n- `AsyncIO Documentation <https://docs.python.org/3/library/asyncio.html>`_\n- `Multiprocessing Communication Documentation <https://docs.python.org/3/library/multiprocessing.html>`_\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dovedevic/IPyC",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "IPyC",
    "package_url": "https://pypi.org/project/IPyC/",
    "platform": "",
    "project_url": "https://pypi.org/project/IPyC/",
    "project_urls": {
      "Documentation": "https://ipyc.readthedocs.io/",
      "Homepage": "https://github.com/dovedevic/IPyC",
      "Issue tracker": "https://github.com/dovedevic/IPyC/issues"
    },
    "release_url": "https://pypi.org/project/IPyC/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5.3",
    "summary": "A basic IPC implementation for Python",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9202140,
  "releases": {
    "1.0.0.post0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "692ee5308b46216aab6b0662f4534d1088562ed2e36f87ab92cebe32bbd806df",
          "md5": "2cfcb1b137c434d1dac65543a21f0206",
          "sha256": "582ebd85788ac8934e55d17a0cc1a7f6210fe766152f46d6b31899fa883e7f55"
        },
        "downloads": -1,
        "filename": "IPyC-1.0.0.post0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cfcb1b137c434d1dac65543a21f0206",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 17407,
        "upload_time": "2020-12-01T09:03:35",
        "upload_time_iso_8601": "2020-12-01T09:03:35.802831Z",
        "url": "https://files.pythonhosted.org/packages/69/2e/e5308b46216aab6b0662f4534d1088562ed2e36f87ab92cebe32bbd806df/IPyC-1.0.0.post0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Outdated, no documentation, clunky"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fcf1898c7d59ccc3902811cd532d10052928b5c36e9ebe569eec27b90b958ff",
          "md5": "b0815d896e5dc563a428560927219dfa",
          "sha256": "f808a0a8ea31c21ece3374bcb923f57dd378f4c554b06a361c92be995d3ae043"
        },
        "downloads": -1,
        "filename": "IPyC-1.0.0.post0.tar.gz",
        "has_sig": false,
        "md5_digest": "b0815d896e5dc563a428560927219dfa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 17102,
        "upload_time": "2020-12-01T09:03:36",
        "upload_time_iso_8601": "2020-12-01T09:03:36.819293Z",
        "url": "https://files.pythonhosted.org/packages/2f/cf/1898c7d59ccc3902811cd532d10052928b5c36e9ebe569eec27b90b958ff/IPyC-1.0.0.post0.tar.gz",
        "yanked": true,
        "yanked_reason": "Outdated, no documentation, clunky"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f60d5278d928c5211412981f4e3c1652ed2b9cfe3c7b00af2cae3098c8eb3f5",
          "md5": "633fa87baca7d62583d44568ed7a8b73",
          "sha256": "2fc2475fe9d17a292f5f15f643e37d605789867a9193d2e96e687fad14a29b2f"
        },
        "downloads": -1,
        "filename": "IPyC-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "633fa87baca7d62583d44568ed7a8b73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.3",
        "size": 13414,
        "upload_time": "2021-01-22T10:14:25",
        "upload_time_iso_8601": "2021-01-22T10:14:25.989200Z",
        "url": "https://files.pythonhosted.org/packages/6f/60/d5278d928c5211412981f4e3c1652ed2b9cfe3c7b00af2cae3098c8eb3f5/IPyC-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8581cffc23d5487d2adcf519c5878a194d44784b9e637e1bf6616a7865195617",
          "md5": "564cbab3fed0bef3bd17538dfaa9d658",
          "sha256": "8fbf27dc0f0ca5f79a32a25b969bca93239d1de2761420c0f907e896ae79561a"
        },
        "downloads": -1,
        "filename": "IPyC-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "564cbab3fed0bef3bd17538dfaa9d658",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.3",
        "size": 10920,
        "upload_time": "2021-01-22T10:14:27",
        "upload_time_iso_8601": "2021-01-22T10:14:27.347719Z",
        "url": "https://files.pythonhosted.org/packages/85/81/cffc23d5487d2adcf519c5878a194d44784b9e637e1bf6616a7865195617/IPyC-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f60d5278d928c5211412981f4e3c1652ed2b9cfe3c7b00af2cae3098c8eb3f5",
        "md5": "633fa87baca7d62583d44568ed7a8b73",
        "sha256": "2fc2475fe9d17a292f5f15f643e37d605789867a9193d2e96e687fad14a29b2f"
      },
      "downloads": -1,
      "filename": "IPyC-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "633fa87baca7d62583d44568ed7a8b73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5.3",
      "size": 13414,
      "upload_time": "2021-01-22T10:14:25",
      "upload_time_iso_8601": "2021-01-22T10:14:25.989200Z",
      "url": "https://files.pythonhosted.org/packages/6f/60/d5278d928c5211412981f4e3c1652ed2b9cfe3c7b00af2cae3098c8eb3f5/IPyC-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8581cffc23d5487d2adcf519c5878a194d44784b9e637e1bf6616a7865195617",
        "md5": "564cbab3fed0bef3bd17538dfaa9d658",
        "sha256": "8fbf27dc0f0ca5f79a32a25b969bca93239d1de2761420c0f907e896ae79561a"
      },
      "downloads": -1,
      "filename": "IPyC-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "564cbab3fed0bef3bd17538dfaa9d658",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.3",
      "size": 10920,
      "upload_time": "2021-01-22T10:14:27",
      "upload_time_iso_8601": "2021-01-22T10:14:27.347719Z",
      "url": "https://files.pythonhosted.org/packages/85/81/cffc23d5487d2adcf519c5878a194d44784b9e637e1bf6616a7865195617/IPyC-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}