{
  "info": {
    "author": "Julian Smith",
    "author_email": "jules@op59.net",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "<!--\nmultimarkdown README.md > README.md.html\nmarkdown_py -v -x markdown.extensions.toc README.md > README.md.html\n[TOC]\n-->\n\n# *\"Walk, don't run.\"*\n\n\n## Overview\n\nWalk is a Python module that provides a mechanism for running commands, where\ncommands are not run if Walk can infer that they would not change any generated\nfiles.\n\n* An `LD_PRELOAD` library or syscall tracing is used to detect what files a\ncommand reads and/or writes.\n\n* Tested and used on Linux and OpenBSD.\n\n* Also provided is an example Python script `walkbuild/walkfg.py` which uses\nWalk to work as a build system for the [Flightgear](https://flightgear.org)\nopen-source flight simulator.\n\n\n## Use as a build system\n\nWalk allows a build system to be written simply as a list of commands to be\nrun, with no need for explicit dependency information.\n\nBy specifying these commands as calls to the function\n`walkbuild.walk.system()`, one ensures that they will not be run if the command\nwould not modify any existing generated files. So only the commands that are\nnecessary to bring things up to date, will be run.\n\nFor example to build a project consisting of two `.c` files, one could do (in\nPython):\n\n```python\nimport walkbuild.walk as walk\nwalk.system( 'cc -c -o foo.o foo.c', 'foo.o.walk')\nwalk.system( 'cc -c -o bar.o bar.c', 'bar.o.walk')\nwalk.system( 'cc -o myapp foo.o bar.o', 'myapp.walk')\n```\n\n\n## Other features\n\n* **Look at file content not modification times**\n\n    Walk uses md5 hashes to detect changes to files, instead of file modification\n    times.\n\n    This means that Walk will not do unnecessary builds if a file is merely touched\n    without its contents being changed (for example from a `git` operation).\n\n* **Allow control over ordering of commands**\n\n    Unlike conventional build systems, one can control the order in which\n    commands are run. For example the `walkbuild/walkfg.py` Flightgear build script\n    compiles newer source files first, which often finds compilation errors\n    more quickly when one is developing.\n\n* **Detect non-trivial changes to commands**\n\n    By default commands are always re-run if the command itself has changed.\n\n    One can provide a custom comparison function, which allows one to avoid\n    re-running commands if they are changed in only a trivial way. For example\n    the `walkbuild/walkfg.py` Flightgear build script ignores changes to the\n    compiler's `-W*` warning flags.\n\n* **Verbose output only on failure**\n\n    By default Walk only shows commands if they have failed. This gives concise\n    output but, unlike `make -s` for example, it still allows one to see the\n    details of failed commands.\n\n    [Command _output_ is always shown by default.]\n    \n\n## Concurrency\n\nThe `Concurrent` class allows commands to be run concurrently on multiple\nthreads. One can use the `.join()` method to wait for scheduled commands to\ncomplete.\n\nFor example:\n\n```python\nimport walkbuild.walk as walk\n\n# Create multiple internal worker threads.\n#\nwalk_concurrent = walk.Concurrent( num_threads=3)\n\n# Schedule commands to be run concurrently.\n#\nwalk_concurrent.system( 'cc -c -o foo.o foo.c', 'foo.o.walk')\nwalk_concurrent.system( 'cc -c -o bar.o bar.c', 'bar.o.walk')\n...\n\n# Wait for all scheduled commands to complete.\n#\nwalk_concurrent.join()\n\n# Run more commands.\n#\nwalk.system( 'cc -o myapp foo.o bar.o', 'myapp.walk')\nwalk_concurrent.end()\n```\n\n\n## How it works\n\n### Detecting command input and output files\n\nWalk supports two ways of finding out what files a command (or its\nsub-commands) opened for reading and/or writing:\n\n* An `LD_PRELOAD` library which intercepts functions such as `open()`,\n`rename()` etc.\n\n* Running commands under a syscall tracer:\n\n    * Linux `strace`.\n    * OpenBSD `ktrace`.\n\nOn Linux the `LD_PRELOAD` approach doesn't work due to the `ld` linker\nappearing to open the output file using a direct syscall (which cannot be\neasily intercepted by the preload library), so Walk defaults to using `strace`.\n\nOn OpenBSD both approaches work but Walk defaults to `LD_PRELOAD` as it appears\nto be slightly faster.\n\nIf using the `LD_PRELOAD` approach, Walk automatically builds the library in\n`/tmp` as required (Walk contains the C source code).\n\n\n### Managing `.walk` files\n\nThe first time Walk runs a command, it creates a per-command `.walk` file which\ncontains the command itself, plus md5 hashes of all files that the command (or\nits child commands) read or wrote.\n\nOn subsequent invocations of the command, Walk checks for changes to the md5\nhashes of the files listed in the `.walk` file. It also looks at whether the\ncommand itself has changed.\n\nIf the command is unchanged and all of the hashes are unchanged, Walk does not\nrun the command.\n\nOtherwise Walk runs the command and recreates the `.walk` file.\n\n\n### Edge cases\n    \nWalk is careful to handle previous failure to open input files (for example a\nfailure to open for reading) where the file now exists - in this case it will always\nrun the command.\n\nWalk is resilient to being interrupted by signals or system crashes, because\nit always write a zero-length `.walk` file before re-running a command. If\nthe build process is killed before the command completes, then the next time\nWalk runs it will find this zero-lenth `.walk` file and know the command was\ninterrupted, and will always re-run the command.\n\n\n## Command line usage\n\nWalk is primarily a python module, but can also be used from the command line:\n\n    walkbuild/walk.py <args> <walk-path> <command> ...\n\nFor example:\n\n```shell\nwalkbuild/walk.py myapp.exe.walk cc -Wall -W -o myapp.exe foo.c bar.c\n```\n\nFor more information run:\n\n```shell\n./walkbuild/walk.py -h\n```\n\n\n## Links\n\n* Development: [https://github.com/cgdae/walk](https://github.com/cgdae/walk)\n* Docs: [https://walk.readthedocs.io/](https://walk.readthedocs.io/)\n\n### Related projects\n\n* [https://code.google.com/archive/p/fabricate/](https://code.google.com/archive/p/fabricate/)\n* [https://github.com/buildsome/buildsome/](https://github.com/buildsome/buildsome/)\n* [https://github.com/kgaughan/memoize.py](https://github.com/kgaughan/memoize.py)\n* [https://gittup.org/tup/](https://gittup.org/tup/)\n\n\n## Future\n\n### Automatic ordering/concurrency\n    \nIt might be possible to use the information in `.walk` files to do automatic\ncommand ordering: look at existing build files to find dependency information\nbetween commands (i.e. find commands whose output files are read by other\ncommands) and run commands in the right order without the caller needing to\nspecify anything other than an unordered list of commands.\n\nThis could be extended to do automatic concurrency - run multiple commands\nconcurrently when they are known to not depend on each otheer.\n\nDependency information in walk files is not available the first time a build\nis run, and might become incorrect if commands or input files are changed. So\nwe would always have to re-scan walk files after commands have completed, and\nre-run commands in the correct order as required. But most of the time this\nwouldn't be necessary.\n\n### Automatic selection of source files\n    \nA large part of the Walk build script for building Flightgear is concerned with\nselecting the source files to compile and link together.\n\nIt might be possible to write code that finds the unresolved and defined\nsymbols after each compilation and stores this information in .walk files (or\na separate file next to each .walk file. Then one could tell the script to\ncompile the file that contains main() and have it automatically look for, and\nbuild, other files that implement the unresolved symbols.\n\nWe would need help to resolve situations where more than one file implements\nthe same symbol. And perhaps heuristics could be used to find likely source\nfiles by grepping for missing symbols names.\n\n\n## License\n\n    Copyright (C) 2020-2022 Julian Smith.\n    SPDX-License-Identifier: GPL-3.0-only\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cgdae/walk",
    "keywords": "walk,make,python,build",
    "license": "SPDX-License-Identifier: GPL-3.0-only",
    "maintainer": "",
    "maintainer_email": "",
    "name": "walkbuild",
    "package_url": "https://pypi.org/project/walkbuild/",
    "platform": null,
    "project_url": "https://pypi.org/project/walkbuild/",
    "project_urls": {
      "Documentation": "https://walk.readthedocs.io/",
      "Homepage": "https://github.com/cgdae/walk"
    },
    "release_url": "https://pypi.org/project/walkbuild/0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Command optimiser - run commands only if they might change generated files.",
    "version": "0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15198269,
  "releases": {
    "0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c95d7c7a46f6188770c3fa887a0ec0f3c0f64bd083321fdb25beb6a56bdabb6f",
          "md5": "944cde8ff392639e6153b6a2e72eea88",
          "sha256": "1a28a3cc24317e38d7734e967c1ff2ba9d92f8dfce796e7ce05e3060b9ff2b5a"
        },
        "downloads": -1,
        "filename": "walkbuild-0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "944cde8ff392639e6153b6a2e72eea88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 50838,
        "upload_time": "2022-09-24T12:07:36",
        "upload_time_iso_8601": "2022-09-24T12:07:36.641036Z",
        "url": "https://files.pythonhosted.org/packages/c9/5d/7c7a46f6188770c3fa887a0ec0f3c0f64bd083321fdb25beb6a56bdabb6f/walkbuild-0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c99d6f95e7dfde820b510c25eb4e67d06cddd8205ccdcc215c351ee0e235e331",
          "md5": "465e81468fd0a74be7cf66cb3a956f57",
          "sha256": "dac110b665d2d29882a13be729f67b0435f0eae868aedd185daecb44664ebf30"
        },
        "downloads": -1,
        "filename": "walkbuild-0.tar.gz",
        "has_sig": false,
        "md5_digest": "465e81468fd0a74be7cf66cb3a956f57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61808,
        "upload_time": "2022-09-24T12:07:38",
        "upload_time_iso_8601": "2022-09-24T12:07:38.619744Z",
        "url": "https://files.pythonhosted.org/packages/c9/9d/6f95e7dfde820b510c25eb4e67d06cddd8205ccdcc215c351ee0e235e331/walkbuild-0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c95d7c7a46f6188770c3fa887a0ec0f3c0f64bd083321fdb25beb6a56bdabb6f",
        "md5": "944cde8ff392639e6153b6a2e72eea88",
        "sha256": "1a28a3cc24317e38d7734e967c1ff2ba9d92f8dfce796e7ce05e3060b9ff2b5a"
      },
      "downloads": -1,
      "filename": "walkbuild-0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "944cde8ff392639e6153b6a2e72eea88",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 50838,
      "upload_time": "2022-09-24T12:07:36",
      "upload_time_iso_8601": "2022-09-24T12:07:36.641036Z",
      "url": "https://files.pythonhosted.org/packages/c9/5d/7c7a46f6188770c3fa887a0ec0f3c0f64bd083321fdb25beb6a56bdabb6f/walkbuild-0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c99d6f95e7dfde820b510c25eb4e67d06cddd8205ccdcc215c351ee0e235e331",
        "md5": "465e81468fd0a74be7cf66cb3a956f57",
        "sha256": "dac110b665d2d29882a13be729f67b0435f0eae868aedd185daecb44664ebf30"
      },
      "downloads": -1,
      "filename": "walkbuild-0.tar.gz",
      "has_sig": false,
      "md5_digest": "465e81468fd0a74be7cf66cb3a956f57",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 61808,
      "upload_time": "2022-09-24T12:07:38",
      "upload_time_iso_8601": "2022-09-24T12:07:38.619744Z",
      "url": "https://files.pythonhosted.org/packages/c9/9d/6f95e7dfde820b510c25eb4e67d06cddd8205ccdcc215c351ee0e235e331/walkbuild-0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}