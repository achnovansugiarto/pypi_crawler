{
  "info": {
    "author": "Mikko Ohtamaa",
    "author_email": "mikko@capitalgram.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Automated test suite](https://github.com/tradingstrategy-ai/smart-contracts-for-testing/actions/workflows/tests.yml/badge.svg)](https://github.com/tradingstrategy-ai/smart-contracts-for-testing/actions/workflows/tests.yml)\n\n[![Documentation Status](https://readthedocs.org/projects/smart-contracts-for-testing/badge/?version=latest)](https://smart-contracts-for-testing.readthedocs.io/en/latest/?badge=latest)\n\n# Mock smart contracts for writing Ethereum test suites\n\nThis package contains common Ethereum smart contracts to be used in automated test suites. \nThis was created for [Trading Strategy](https://tradingstrategy.ai), but can be used for any other \nprojects as well. As opposite to slower and messier [mainnet forking test strategies](https://www.quicknode.com/guides/web3-sdks/how-to-fork-ethereum-blockchain-with-ganache), \nthis project aims to explicit clean deployments and very fast test execution.\n\nSmart contract support includes \n\n* ERC-20 token\n* [SushiSwap](https://github.com/sushiswap/sushiswap): router, factory, pool (Uniswap v2, PancakeSwape, QuickSwap, Trader Joe and others are 99% Sushiswap compatible)\n* High-quality API documentation\n* Full type hinting support for optimal developer experience\n* (More integrations to come)\n\nTable of contents\n\n* [Precompiled ABI file distribution](#precompiled-abi-file-distribution)\n* [Python usage](#python-usage)\n   * [Prerequisites](#prerequisites)\n   * [ERC-20 token example](#erc-20-token-example)\n   * [Uniswap swap example](#uniswap-swap-example)\n   * [How to use hhe library in your Python project](#how-to-use-hhe-library-in-your-python-project)\n* [Development](#development)\n   * [Requires](#requires)\n   * [Make](#make)\n* [Version history](#version-history)\n* [Discord](#discord)\n* [Notes](#notes)\n* [License](#license)\n\n# Precompiled ABI file distribution\n\nThis package primarly supports Python, Web3.p3 and Brownie developers.\nFor other programming languages and frameworks,\nyou can [find precompiled Solidity smart contracts in abi folder](https://github.com/tradingstrategy-ai/smart-contracts-for-testing/tree/master/smart_contracts_for_testing/abi).\n\nThese files are good to go with any framework:\n* Web3.js\n* Ethers.js\n* Hardhat\n* Truffle\n* Web3j\n\nEach JSON file has `abi` and `bytecode` keys you need to deploy a contract.\n\nJust download and embed in your project. \nThe compiled source code files are mixture of MIT and GPL v2 license.\n\n# Python usage\n\nThe Python support is available as `smart_contract_test_fixtures` Python package.\n\nThe package depends only on [web3.py](github.com/ethereum/web3.py) and not others, like Brownie.\nIt grabs popular ABI files with their bytecode and compilation artifacts so that the contracts\nare easily deployable on any Ethereum tester interface. No Ganache is needed and everything\ncan be executed on faster [eth-tester enginer](https://github.com/ethereum/eth-tester).\n\n## Prerequisites\n\n* [Proficient in Python programming](https://wiki.python.org/moin/BeginnersGuide)\n* [Understanding of Web3.py library](https://web3py.readthedocs.io/en/stable/) \n* [pytest basics](https://docs.pytest.org/)\n\n## ERC-20 token example\n\nTo use the package to deploy a simple ERC-20 token in [pytest](https://docs.pytest.org/) testing: \n\n```python\nimport pytest\nfrom web3 import Web3, EthereumTesterProvider\n\nfrom smart_contracts_for_testing.token import create_token\n\n\n@pytest.fixture\ndef tester_provider():\n    return EthereumTesterProvider()\n\n\n@pytest.fixture\ndef eth_tester(tester_provider):\n    return tester_provider.ethereum_tester\n\n\n@pytest.fixture\ndef web3(tester_provider):\n    return Web3(tester_provider)\n\n\n@pytest.fixture()\ndef deployer(web3) -> str:\n    \"\"\"Deploy account.\"\"\"\n    return web3.eth.accounts[0]\n\n\n@pytest.fixture()\ndef user_1(web3) -> str:\n    \"\"\"User account.\"\"\"\n    return web3.eth.accounts[1]\n\n\n@pytest.fixture()\ndef user_2(web3) -> str:\n    \"\"\"User account.\"\"\"\n    return web3.eth.accounts[2]\n\n\ndef test_deploy_token(web3: Web3, deployer: str):\n    \"\"\"Deploy mock ERC-20.\"\"\"\n    token = create_token(web3, deployer, \"Hentai books token\", \"HENTAI\", 100_000 * 10**18)\n    assert token.functions.name().call() == \"Hentai books token\"\n    assert token.functions.symbol().call() == \"HENTAI\"\n    assert token.functions.totalSupply().call() == 100_000 * 10**18\n    assert token.functions.decimals().call() == 18\n\n\ndef test_tranfer_tokens_between_users(web3: Web3, deployer: str, user_1: str, user_2: str):\n    \"\"\"Transfer tokens between users.\"\"\"\n    token = create_token(web3, deployer, \"Telos EVM rocks\", \"TELOS\", 100_000 * 10**18)\n\n    # Move 10 tokens from deployer to user1\n    token.functions.transfer(user_1, 10 * 10**18).transact({\"from\": deployer})\n    assert token.functions.balanceOf(user_1).call() == 10 * 10**18\n\n    # Move 10 tokens from deployer to user1\n    token.functions.transfer(user_2, 6 * 10**18).transact({\"from\": user_1})\n    assert token.functions.balanceOf(user_1).call() == 4 * 10**18\n    assert token.functions.balanceOf(user_2).call() == 6 * 10**18\n```\n\n[See full example](https://github.com/tradingstrategy-ai/smart-contracts-for-testing/blob/master/tests/test_token.py).\n\n[For more information how to user Web3.py in testing, see Web3.py documentation](https://web3py.readthedocs.io/en/stable/examples.html#contract-unit-tests-in-python).\n\n## Uniswap swap example\n\n```python\nimport pytest\nfrom web3 import Web3\nfrom web3.contract import Contract\n\nfrom smart_contracts_for_testing.uniswap_v2 import UniswapV2Deployment, deploy_trading_pair, FOREVER_DEADLINE\n\n\ndef test_swap(web3: Web3, deployer: str, user_1: str, uniswap_v2: UniswapV2Deployment, weth: Contract, usdc: Contract):\n    \"\"\"User buys WETH on Uniswap v2 using mock USDC.\"\"\"\n\n    # Create the trading pair and add initial liquidity\n    deploy_trading_pair(\n        web3,\n        deployer,\n        uniswap_v2,\n        weth,\n        usdc,\n        10 * 10**18,  # 10 ETH liquidity\n        17_000 * 10**18,  # 17000 USDC liquidity\n    )\n\n    router = uniswap_v2.router\n\n    # Give user_1 500 dollars to buy ETH and approve it on the router\n    usdc_amount_to_pay = 500 * 10**18\n    usdc.functions.transfer(user_1, usdc_amount_to_pay).transact({\"from\": deployer})\n    usdc.functions.approve(router.address, usdc_amount_to_pay).transact({\"from\": user_1})\n\n    # Perform a swap USDC->WETH\n    path = [usdc.address, weth.address]  # Path tell how the swap is routed\n    # https://docs.uniswap.org/protocol/V2/reference/smart-contracts/router-02#swapexacttokensfortokens\n    router.functions.swapExactTokensForTokens(\n        usdc_amount_to_pay,\n        0,\n        path,\n        user_1,\n        FOREVER_DEADLINE,\n    ).transact({\n        \"from\": user_1\n    })\n\n    # Check the user_1 received ~0.284 ethers\n    assert weth.functions.balanceOf(user_1).call() / 1e18 == pytest.approx(0.28488156127668085)\n```\n\n[See the full example](https://github.com/tradingstrategy-ai/smart-contracts-for-testing/blob/master/tests/test_uniswap_v2_pair.py).\n\n## How to use hhe library in your Python project\n\nAdd `smart_contract_test_fixtures` as a development dependency:\n\nUsing [Poetry](https://python-poetry.org/):\n\n```shell\npoetry add -D smart_contract_test_fixtures\n```\n\n# Development\n\nThis step will extract compiled smart contract from Sushiswap repository. \n\n## Requires\n\n* Node v14 \n* npx \n* yarn\n* GNU Make\n* Unix shell\n\n## Make\n\nTo build the ABI distribution:\n\n```shell\ngit submodule update --recursive --init\nmake all\n```\n\n[See SushiSwap continuous integration files for more information](https://github.com/sushiswap/sushiswap/blob/canary/.github/workflows/sushiswap.yml).\n\n# Version history\n\n[See change log](https://github.com/tradingstrategy-ai/smart-contracts-for-testing/blob/master/CHANGELOG.md).\n\n# Discord\n\n[Join Discord for any questions](https://tradingstrategy.ai/community).\n\n# Notes\n\nCurrently there is no [Brownie](https://eth-brownie.readthedocs.io/) support.\nTo support Brownie, one would need to figure out how to import an existing Hardhat\nbased project (Sushiswap) to Brownie project format.\n\n# License \n\nMIT",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://tradingstrategy.ai",
    "keywords": "ethereum,cryptocurrency,uniswap,erc-20,pancakeswap,sushiswap,polygon,web3",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smart-contracts-for-testing",
    "package_url": "https://pypi.org/project/smart-contracts-for-testing/",
    "platform": "",
    "project_url": "https://pypi.org/project/smart-contracts-for-testing/",
    "project_urls": {
      "Homepage": "https://tradingstrategy.ai",
      "Repository": "https://github.com/tradingstrategy-ai/smart-contracts-for-testing"
    },
    "release_url": "https://pypi.org/project/smart-contracts-for-testing/0.1.0/",
    "requires_dist": [
      "web3[tester] (>=5.26.0,<6.0.0)",
      "Sphinx (>=4.4.0,<5.0.0); extra == \"docs\"",
      "sphinx-rtd-theme (>=1.0.0,<2.0.0); extra == \"docs\"",
      "sphinx-sitemap (>=2.2.0,<3.0.0); extra == \"docs\"",
      "Brownie (>=0.5.1,<0.6.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Popular Solidity smart contracts to be used in testing: ERC-20, Uniswap v2, etc.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12744510,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98c1c00ccf9faf2b1cb8dd988e8444827d6ae3c8433174b888a41232e8ae37fa",
          "md5": "297ba62c7259f520777c2c731973a951",
          "sha256": "3c6686f05f526c76995f5eb41d6d7a8805e8f813ae6300a854ebdf44224c4069"
        },
        "downloads": -1,
        "filename": "smart_contracts_for_testing-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "297ba62c7259f520777c2c731973a951",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 226883,
        "upload_time": "2022-01-31T13:20:59",
        "upload_time_iso_8601": "2022-01-31T13:20:59.322738Z",
        "url": "https://files.pythonhosted.org/packages/98/c1/c00ccf9faf2b1cb8dd988e8444827d6ae3c8433174b888a41232e8ae37fa/smart_contracts_for_testing-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "417242deb79b68978f074571bdfb0a5c84fa1688fee2346dd90442d3e18c0777",
          "md5": "bd15acba43166a6c0f01ef86288019a7",
          "sha256": "3bdb143f60d6bc6ae59083b7910fe78cce38690df199cfe053f9e0da915a3e75"
        },
        "downloads": -1,
        "filename": "smart_contracts_for_testing-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd15acba43166a6c0f01ef86288019a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 180314,
        "upload_time": "2022-01-31T13:21:01",
        "upload_time_iso_8601": "2022-01-31T13:21:01.012754Z",
        "url": "https://files.pythonhosted.org/packages/41/72/42deb79b68978f074571bdfb0a5c84fa1688fee2346dd90442d3e18c0777/smart_contracts_for_testing-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98c1c00ccf9faf2b1cb8dd988e8444827d6ae3c8433174b888a41232e8ae37fa",
        "md5": "297ba62c7259f520777c2c731973a951",
        "sha256": "3c6686f05f526c76995f5eb41d6d7a8805e8f813ae6300a854ebdf44224c4069"
      },
      "downloads": -1,
      "filename": "smart_contracts_for_testing-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "297ba62c7259f520777c2c731973a951",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 226883,
      "upload_time": "2022-01-31T13:20:59",
      "upload_time_iso_8601": "2022-01-31T13:20:59.322738Z",
      "url": "https://files.pythonhosted.org/packages/98/c1/c00ccf9faf2b1cb8dd988e8444827d6ae3c8433174b888a41232e8ae37fa/smart_contracts_for_testing-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "417242deb79b68978f074571bdfb0a5c84fa1688fee2346dd90442d3e18c0777",
        "md5": "bd15acba43166a6c0f01ef86288019a7",
        "sha256": "3bdb143f60d6bc6ae59083b7910fe78cce38690df199cfe053f9e0da915a3e75"
      },
      "downloads": -1,
      "filename": "smart_contracts_for_testing-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bd15acba43166a6c0f01ef86288019a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 180314,
      "upload_time": "2022-01-31T13:21:01",
      "upload_time_iso_8601": "2022-01-31T13:21:01.012754Z",
      "url": "https://files.pythonhosted.org/packages/41/72/42deb79b68978f074571bdfb0a5c84fa1688fee2346dd90442d3e18c0777/smart_contracts_for_testing-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}