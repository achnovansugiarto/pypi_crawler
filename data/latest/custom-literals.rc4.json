{
  "info": {
    "author": "RocketRace",
    "author_email": "oliviaspalmu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "`custom-literals`\n===============\n\nA module implementing custom literal suffixes using pure Python. `custom-literals` \nmimics C++'s user-defined literals (UDLs) by defining literal suffixes that can \nbe accessed as attributes of literal values, such as numeric constants, string \nliterals and more.\n\n(c) RocketRace 2022-present. See LICENSE file for more.\n\nExamples\n========\n\nSee the `examples/` directory for more.\n\nFunction decorator syntax:\n```py\nfrom custom_literals import literal\nfrom datetime import timedelta\n\n@literal(float, int, name=\"s\")\ndef seconds(self):\n    return timedelta(seconds=self)\n\n@literal(float, int, name=\"m\")\ndef minutes(self):\n    return timedelta(seconds=60 * self)\n\nprint(30 .s + 0.5.m) # 0:01:00\n```\nClass decorator syntax:\n```py\nfrom custom_literals import literals\nfrom datetime import timedelta\n\n@literals(float, int)\nclass Duration:\n    def s(self):\n        return timedelta(seconds=self)\n    def m(self):\n        return timedelta(seconds=60 * self)\n\nprint(30 .s + 0.5.m) # 0:01:00\n```\nRemoving a custom literal:\n```py\nfrom custom_literals import literal, unliteral\n\n@literal(str)\ndef u(self):\n    return self.upper()\n\nprint(\"hello\".u) # \"HELLO\"\n\nunliteral(str, \"u\")\nassert not hasattr(\"hello\", \"u\")\n```\nContext manager syntax (automatically removes literals afterwards):\n```py\nfrom custom_literals import literally\nfrom datetime import timedelta\n\nwith literally(float, int, \n    s=lambda x: timedelta(seconds=x), \n    m=lambda x: timedelta(seconds=60 * x)\n):\n    print(30 .s + 0.5.m) # 0:01:00\n```\n\nFeatures\n========\n\nCurrently, three methods of defining custom literals are supported:\nThe function decorator syntax `@literal`, the class decorator syntax `@literals`, and the\ncontext manager syntax `with literally`. (The latter will automatically unhook the literal\nsuffixes when the context is exited.) To remove a custom literal, use `unliteral`.\n\nCustom literals are defined for literal values of the following types:\n\n| Type | Example | Notes |\n|------|---------|-------|\n| `int` | `(42).x` | The Python parser interprets `42.x` as a float literal followed by an identifier. To avoid this, use `(42).x` or `42 .x` instead. |\n| `float` | `3.14.x` | |\n| `complex` | `1j.x` | |\n| `bool` | `True.x` | Since `bool` is a subclass of `int`, `int` hooks may influence `bool` as well. |\n| `str` | `\"hello\".x` | F-strings (`f\"{a}\".x`) are also supported. |\n| `bytes` | `b\"hello\".x` | |\n| `None` | `None.x` | |\n| `Ellipsis` | `....x` | Yes, this is valid syntax. |\n| `tuple` | `(1, 2, 3).x` | Generator expressions (`(x for x in ...)`) are not tuple literals and thus won't be affected by literal suffixes. |\n| `list` | `[1, 2, 3].x` | List comprehensions (`[x for x in ...]`) may not function properly. |\n| `set` | `{1, 2, 3}.x` | Set comprehensions (`{x for x in ...}`) may not function properly. |\n| `dict` | `{\"a\": 1, \"b\": 2}.x` | Dict comprehensions (`{x: y for x, y in ...}`) may not function properly. |\n\nIn addition, custom literals can be defined to be *strict*, that is, only allow the given \nliteral suffix to be invoked on constant, literal values. This means that the following \ncode will raise a `TypeError`:\n\n```py\n@literal(str, name=\"u\", strict=True)\ndef utf_8(self):\n    return self.encode(\"utf-8\")\n\nmy_string = \"hello\"\nprint(my_string.u) \n# TypeError: the strict custom literal `u` of `str` objects can only be invoked on literal values\n```\n\nBy default, custom literals are *not* strict. This is because determining whether a suffix was\ninvoked on a literal value relies on bytecode analysis, which is a feature of the CPython\ninterpreter, and is not guaranteed to be forwards compatible. It can be enabled by passing \n`strict=True` to the `@literal`, `@literals` or `literally` functions.\n\nCaveats\n========\n\nStability\n---------\n\nThis library relies almost entirely on implementation-specific behavior of the CPython\ninterpreter. It is not guaranteed to work on all platforms, or on all versions of Python.\nIt has been tested on common platforms (windows, ubuntu, macos) using python 3.7 through\nto 3.10, but while changes that would break the library are quite unlikely, they are not\nimpossible either.\n\n**That being said,** `custom-literals` does its absolute best to guarantee maximum \nstability of the library, even in light of possible breaking changes in CPython internals.\nThe code base is well tested. In the future, the library may also expose multiple \ndifferent backends for the actual implementation of builtin type patching. As of now,\nthe only valid backend is `forbiddenfruit`, which uses the `forbiddenfruit` library.\n\n| Feature | Stability |\n|---------|-----------|\n| Hooking with the `forbiddenfruit` backend | Quite stable, but may be affected by future releases. Relies on the `ctypes` module. |\n| Strict mode using the `strict=True` kwarg | Quite stable, but not forwards compatible. Relies on stack frame analysis and opcode checks to detect non-literal access. |\n\nType safety\n-----------\n\nThe library code, including the public API, is fully typed. Registering and unregistering\nhooks is type-safe, and static analysis tools should have nothing to complain about.\n\nHowever, accessing custom literal suffixes is impossible to type-check. This is because\nall major static  analysis tools available for python right now (understandably) assume \nthat builtins types are immutable. That is, the attributes and methods builtin types \ncannot be dynamically modified. This goes against the core idea of the library, which \nis to patch custom attributes on builtin types. \n\nTherefore, if you are using linters, type checkers or other static analysis tools, you \nwill likely encounter many warnings and errors. If your tool allows it, you should disable \nthese warnings (ideally on a per-diagnostic, scoped basis) if you want to use this library \nwithout false positives.\n\nFAQ\n=====\n\nShould I use this in production?\n-------------------------------\n\nEmphatically, no! But I won't stop you.\n\nNooooooo (runs away from computer)\n----------------------------------\n\nI kind of disagree: yessss (dances in front of computer)\n\nWhy?\n-----\n\nPython's operator overloading allows for flexible design of domain-specific languages. \nHowever, Python pales in comparison to C++ in this aspect. In particular, User-Defined \nLiterals (UDLs) are a powerful feature of C++ missing in Python. This library is designed\nto emulate UDLs in Python, with syntactic sugar comparable to C++ in elegance.\n\nBut *really*, why?\n-------------------\n\nBecause it's posssible.\n\nHow? (please keep it short)\n--------------------------\n\n`custom-literals` works by patching builtin types with custom objects satisfying the \n[descriptor protocol](https://docs.python.org/3/howto/descriptor.html), similar to \nthe builtin `property` decorator. The patching is done trough a \"backend\", which \nis an interface implementing functions to mutate the `__dict__` of builtin types. \nIf `strict=True` mode is enabled, the descriptor will also traverse stack frames \nbackwards to the invokation site of the literal suffix, and check the most recently \nexecuted bytecode opcode to ensure that the literal suffix was invoked on a literal value.\n\nHow? (I love detail)\n---------------------\n\nBuiltin types in CPython are implemented in C, and include checks to prevent\nmutation at runtime. This is why the following lines will each raise a `TypeError`:\n\n```py\nint.x = 42 # TypeError: cannot set 'x' attribute of immutable type 'int'\nsetattr(int, \"x\", 42) # TypeError: cannot set 'x' attribute of immutable type 'int'\nint.__dict__[\"x\"] = 42 # TypeError: 'mappingproxy' object does not support item assignment\n```\n\nHowever, these checks can be subverted in a number of ways. One method is to use\nCPython's APIs directly to bypass the checks. For the sake of stability, `custom-literals`\ncalls the `curse()` and `reverse()` functions of the `forbiddenfruit` library\nto implement these bypasses. Internally, `forbiddenfruit` uses the `ctypes` module\nto access the C API and use the `ctypes.pythonapi.PyType_Modified()` function to\nsignal that a builtin type has been modified. Other backends may also be available in the future, \nbut are not implemented at the moment. (As an example, there is currently a bug \nin CPython that allows `mappingproxy` objects to be mutated without using `ctypes`. \nThis was deemed too fragile to be included in the library.)\n\nPython's [`@property`](https://docs.python.org/3/howto/descriptor.html#properties) decorator\nimplements the [descriptor protocol](https://docs.python.org/3/howto/descriptor.html).\nThis is a protocol that allows for custom code to be executed when accessing specific\nattributes of a type. For example, the following code will print `42`:\n\n```py\nclass MyClass:\n    @property\n    def x(self):\n        print(42)\n\nMyClass().x\n```\n\n`custom-literals` patches builtin types with objects implementing the same protocol, \nallowing for user-defined & library-defiend code to be executed when invoking a literal\nsuffix on a builtin type. It cannot however use `@property` directly, as elaborated\nbelow.\n\nThe descriptor protocol is very flexible, used as the the backbone of bound methods, \nclass methods, and static methods and more. It is defined by the presence of one\nof the following methods\\*:\n\n```py\nclass SomeDescriptor:\n    # <instance>.<attribute>\n    def __get__(self, instance, owner) -> value: ...\n    # <instance>.<attribute> = <value>\n    def __set__(self, instance, value) -> None: ...\n    # del <instance>.<attribute>\n    def __delete__(self, instance) -> None: ...\n```\n\n\\**and optionally [`__set_name__`](https://docs.python.org/3/reference/datamodel.html#object.__set_name__)*\n\nThe descriptor methods can be invoked from an instance (`some_instance.x`) or from\na class (`SomeClass.x`). Importantly for us, the `__get__` method is called with \ndifferent arguments depending on whether the descriptor is accessed from an instance\nor a class:\n    \n```py\nclass MyDesciptor:\n    def __get__(self, instance, owner) -> value:\n        print(f\"Instance: {instance}\")\n        print(f\"Owner: {owner}\")\n\nclass MyClass:\n    x = MyDesciptor()\n\nMyClass().x \n# Instance: <__main__.MyClass object at 0x110e3a170> \n# Owner: <class '__main__.MyClass'>\nMyClass.x \n# Instance: None \n# Owner: <class '__main__.MyClass'>\n```\n\nThis is used to differentiate between the two cases. `@property`'s implementation\nsimply returns the descriptor instance if `instance` is `None`, which is a fair\ntest for whether the descriptor is accessed from a class or an instance.\n\nKeen-eyed readers may notice however that this is not a perfect test. What if `MyClass`\nis somehow `type(None)`? In this case, the two cases will be indistinguishable. \nIn normal code, this is not a problem, as `type(None)` is a builtin type, and\nthus cannot be mutated. In `custom-literals`, however, this breaks custom literals\nthat are defined on `type(None)`. \n\nThis can thankfully be mitigated thanks to the concept of a \n[data descriptor](https://docs.python.org/3/howto/descriptor.html#data-descriptors).\nA data descriptor is a descriptor that defines `__set__` or `__delete__`. When \nPython tries to resolve attribute access on an instance, it will first check whether\nits *type* has a data descriptor for the attribute, overriding any descriptors \ndefined on the *instance* itself. For example, suppose the following example using\na metaclass (a class inheriting from `type`):\n\n```py\nclass DataDescriptor:\n    def __get__(self, instance, owner):\n        print(\"The data descriptor was called!\")\n        print(f\"Instance: {instance}\")\n    \n    # Simply the presence of the method is enough\n    # to convert this into a data descriptor\n    def __set__(self, instance, value):\n        raise AttributeError\n\nclass NormalDescriptor:\n    def __get__(self, instance, owner):\n        print(\"The normal descriptor was called!\")\n        print(f\"Instance: {instance}\")\n\nclass MyMeta(type):\n    x = DataDescriptor()\n\nclass MyClass(metaclass=MyMeta):\n    x = NormalDescriptor()\n\nMyClass.x \n# The data descriptor was called!\n# Instance: <class '__main__.MyClass'>\nMyClass().x \n# The normal descriptor was called!\n# Instance: <__main__.MyClass object at 0x10f468ee0>s\n```\n\nThis example shows that it is possible to ensure that a descriptor is always\ncalled on an instance with `instance` set to an instance of the class. In the case of\n`custom-literals`, this is achieved by patching a data descriptor (any data descriptor)\non `type` when `type(None)` is also being patched. This removes the ambiguity of\nwhether the descriptor is called on an instance or a class. Yay!\n\nFinally, `custom-literals` also provides a mechanism for optionally detecting when a custom \nliteral suffix is invoked on a constant and literal type. (This is invoked when the\n`strict` argument is set to `True`.) This is achieved by attaching\nextra code to the `__get__` method of the custom literal descriptor. The code performs\n*bytecode analysis* at the invocation site of the custom literal suffix.\n\nThe CPython interpreter uses stack frames to implement function calls. When a function is\ncalled, a new frame is created and pushed to the stack, and when the function returns, the\nframe is popped off the stack. Importantly, these frame objects can be accessed directly\nfrom Python:\n\n```py\nimport inspect\n\ndef foo():\n    local_variable = 123\n    bar()\n\ndef bar():\n    # Alternatively, use `sys._getframe()`\n    frame = inspect.currentframe()\n    # The `f_back` attribute of a frame object\n    # points to the frame that called it\n    previous_frame = frame.f_back\n    # Frame objects have information about the\n    # invocation context of the frame, including\n    # e.g. local variables\n    previous_locals = previous_frame.f_locals\n    print(previous_locals['local_variable']) # 123\n```\n\nThe `f_code` attribute of a frame object contains information about the bytecode of the\ncurrently executed code. CPython being an interpreter, this bytecode corresponds roughly\nto the source code of the function. For example, see the disassembly of the following:\n\n```py\nimport dis\n\ndef add(a, b):\n    c = a + b\n    return int(c)\n\ndis.dis(add) # Outputs:\n# 4           0 LOAD_FAST                0 (a)\n#             2 LOAD_FAST                1 (b)\n#             4 BINARY_ADD\n#             6 STORE_FAST               2 (c)\n# \n# 5           8 LOAD_GLOBAL              0 (int)\n#            10 LOAD_FAST                2 (c)\n#            12 CALL_FUNCTION            1\n#            14 RETURN_VALUE\n```\n\n* First, the two arguments `a` and `b` are pushed onto the stack.\n* The arguments are popped from the stack and used as the operands for `+`. The result is pushed onto the stack.\n* The top of the stack is popped and stored in a local variable `c`.\n* The `int` function is fetched from the global namespace and pushed to the stack.\n* The local variable `c` is pushed to the stack.\n* The `int` function is called with one argument, and the return value of `int` is pushed to the stack.\n* The result is popped from the stack and returned.\n\nIn the case of custom literals, the opcodes we are concerned about are the following:\n\n* `LOAD_CONST`, used to load a constant (including most literal values) to the stack\n* `BUILD_TUPLE`/`BUILD_LIST`/`BUILD_SET`/`BUILD_MAP`, used to push tuple/list/set/dict literals to the stack\n* `FORMAT_VALUE`, used to push a formatted f-string literal (`f\"{a} {b} {c}\"`) to the stack\n* `LIST_TO_TUPLE`/`LIST_EXTEND`/`SET_UPDATE`/`DICT_UPDATE`, sometimes used in list/set/dict literals, for example when using the star unpack syntax (`[a, b, c, *x]`)\n\n(Do keep in mind that opcodes are not necessarily forwards compatible. Python 3.11 could release\na dozen new opcodes tomorrow that need to be accounted for by the library! This is why \n`custom-literals` does not perform bytecode analysis by default.)\n\nIf strict mode is enabled, the library will traverse up through the stack frames, inspect the bytecode,\ncheck the most recently executed opcode (available in `frame.f_lasti`), and check if it is one of the\nopcodes listed above. If the opcode is not in the allowed list, an error is raised, which is why\nthe following code raises an error:\n\n```py\n@literal(str, strict=True)\ndef xyz(self):\n    return 123\n\nabc = \"abc\"\nabc.xyz \n# TypeError: the strict custom literal `xyz` of `str` objects can only be invoked on literal values\n```\n\nPutting all of these features together, `custom-literals` is able to do the seemingly impossible - \ndefine custom literal suffixes on builtin types that can only be invoked on literal values!\n\nMaking this project has been a fascinating deep dive into some of the internals of CPython, and \nI hope it has been equally interesting to you, the reader.\n\nCould this ever be type safe?\n-----------------------------\n\nI doubt it. The assumptions made by static analysis tools are incredibly useful, and\nthis is such an edge case it makes no sense for them to assume builtin literal types can have\ndynamically set attributes. In addition, there isn't a good way to signal to your type \nchecker that an immutable type is going to be endowed with new attributes!\n\nLicense\n=======\n\n(c) RocketRace 2022-present. This library is under the Mozilla Public License 2.0. \nSee the `LICENSE` file for more details.\n\nContributing\n============\n\nPatches, bug reports, feature requests and pull requests  are welcome.\n\nLinks\n=====\n\n* [GitHub repository](https://github.com/RocketRace/custom-literals)\n* [PyPI](https://pypi.org/project/custom-literals/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RocketRace/custom-literals",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "custom-literals",
    "package_url": "https://pypi.org/project/custom-literals/",
    "platform": null,
    "project_url": "https://pypi.org/project/custom-literals/",
    "project_urls": {
      "Bug Tracker": "https://github.com/RocketRace/custom-literals/issues",
      "Homepage": "https://github.com/RocketRace/custom-literals"
    },
    "release_url": "https://pypi.org/project/custom-literals/0.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A module implementing custom literal suffixes using pure Python",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13373125,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0319c4e7d0aca70bf3229d7ad08132e9b271dec0e38a4b487829339d8c805858",
          "md5": "e079598d8eea10162c9e263068aa9510",
          "sha256": "2b51a965275307ac0e0a38c09248e93fb4124e1b3aabe80fa3e648f210b741d5"
        },
        "downloads": -1,
        "filename": "custom_literals-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e079598d8eea10162c9e263068aa9510",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9722,
        "upload_time": "2022-03-31T16:18:43",
        "upload_time_iso_8601": "2022-03-31T16:18:43.940982Z",
        "url": "https://files.pythonhosted.org/packages/03/19/c4e7d0aca70bf3229d7ad08132e9b271dec0e38a4b487829339d8c805858/custom_literals-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b21483db513dcb10b30a95a924753cf33ed0570ae0a19c4226356aaa4de535bd",
          "md5": "01f54ab8e5ef8a2ea262c306ef1ded2e",
          "sha256": "74ad39b64d80faf171f347fdde0f86e429693041061c75590218e0fd27400ee3"
        },
        "downloads": -1,
        "filename": "custom_literals-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01f54ab8e5ef8a2ea262c306ef1ded2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9572,
        "upload_time": "2022-03-31T16:18:45",
        "upload_time_iso_8601": "2022-03-31T16:18:45.984981Z",
        "url": "https://files.pythonhosted.org/packages/b2/14/83db513dcb10b30a95a924753cf33ed0570ae0a19c4226356aaa4de535bd/custom_literals-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ba705f11bce69a0102b33884402c90e7cb39d34343450c16f34829d79cca0a1",
          "md5": "0c69dcbd538c379923f32a5e537c022b",
          "sha256": "2253e960925a396cff6c32e6f113aa18db22b56faf7d1651d429ee497f17893e"
        },
        "downloads": -1,
        "filename": "custom_literals-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c69dcbd538c379923f32a5e537c022b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9734,
        "upload_time": "2022-03-31T16:24:26",
        "upload_time_iso_8601": "2022-03-31T16:24:26.806537Z",
        "url": "https://files.pythonhosted.org/packages/0b/a7/05f11bce69a0102b33884402c90e7cb39d34343450c16f34829d79cca0a1/custom_literals-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4dbb30f40b148830e13cb855ec4936d7d14420c41c6932fcb74051d36639401",
          "md5": "ff558094fad964e7e1554e91af6850b2",
          "sha256": "0639cf965fcc5eeae75044fb4afb5a5595a7b52c44d1dabb15eea6e95c3fcd4a"
        },
        "downloads": -1,
        "filename": "custom_literals-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff558094fad964e7e1554e91af6850b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9564,
        "upload_time": "2022-03-31T16:24:28",
        "upload_time_iso_8601": "2022-03-31T16:24:28.217126Z",
        "url": "https://files.pythonhosted.org/packages/f4/db/b30f40b148830e13cb855ec4936d7d14420c41c6932fcb74051d36639401/custom_literals-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dba5ac24836911ff754ebe6ba8211ab3de613530f4ec3ebe06390b8b01170ae",
          "md5": "d5cb8caa1ae951b9b6406e228714b228",
          "sha256": "768eda60f627a6200672e6fcd6b823ab0f0456e3759f317cb94344927aa21a9a"
        },
        "downloads": -1,
        "filename": "custom_literals-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5cb8caa1ae951b9b6406e228714b228",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15572,
        "upload_time": "2022-03-31T16:45:07",
        "upload_time_iso_8601": "2022-03-31T16:45:07.798664Z",
        "url": "https://files.pythonhosted.org/packages/0d/ba/5ac24836911ff754ebe6ba8211ab3de613530f4ec3ebe06390b8b01170ae/custom_literals-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e68c80acbdec217d018d3fcf7025a59f29910f463051064905991673e2fce70",
          "md5": "0ded835ca8d9f3f04aaad5a1e88fc951",
          "sha256": "6eb72b67a9373742792b8245c2b48f0049a439dce63b387f6a18d09b0225a9c8"
        },
        "downloads": -1,
        "filename": "custom-literals-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0ded835ca8d9f3f04aaad5a1e88fc951",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16731,
        "upload_time": "2022-03-31T16:45:09",
        "upload_time_iso_8601": "2022-03-31T16:45:09.076884Z",
        "url": "https://files.pythonhosted.org/packages/9e/68/c80acbdec217d018d3fcf7025a59f29910f463051064905991673e2fce70/custom-literals-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60f53722dd301f69125e32841d38ffda300551dc5d211c84eee350c96e34f78",
          "md5": "784a9cb1d98eaa2861d874f4d941fc59",
          "sha256": "6286d8f22c678b181f7fecf489b7ea37e974279c336df590aa9f3473c2e64ca0"
        },
        "downloads": -1,
        "filename": "custom_literals-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "784a9cb1d98eaa2861d874f4d941fc59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 19097,
        "upload_time": "2022-04-01T11:49:52",
        "upload_time_iso_8601": "2022-04-01T11:49:52.123516Z",
        "url": "https://files.pythonhosted.org/packages/b6/0f/53722dd301f69125e32841d38ffda300551dc5d211c84eee350c96e34f78/custom_literals-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "625b54d79ac637a5db7b521297fb8929531d401a820e4e89fa2d2caa35817114",
          "md5": "272cde707b22e47067c85d94b7118737",
          "sha256": "141363db4c71000b3c6a6b154e0be61473e97aefc083681182ba7335c1620991"
        },
        "downloads": -1,
        "filename": "custom-literals-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "272cde707b22e47067c85d94b7118737",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23500,
        "upload_time": "2022-04-01T11:49:53",
        "upload_time_iso_8601": "2022-04-01T11:49:53.738489Z",
        "url": "https://files.pythonhosted.org/packages/62/5b/54d79ac637a5db7b521297fb8929531d401a820e4e89fa2d2caa35817114/custom-literals-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b60f53722dd301f69125e32841d38ffda300551dc5d211c84eee350c96e34f78",
        "md5": "784a9cb1d98eaa2861d874f4d941fc59",
        "sha256": "6286d8f22c678b181f7fecf489b7ea37e974279c336df590aa9f3473c2e64ca0"
      },
      "downloads": -1,
      "filename": "custom_literals-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "784a9cb1d98eaa2861d874f4d941fc59",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19097,
      "upload_time": "2022-04-01T11:49:52",
      "upload_time_iso_8601": "2022-04-01T11:49:52.123516Z",
      "url": "https://files.pythonhosted.org/packages/b6/0f/53722dd301f69125e32841d38ffda300551dc5d211c84eee350c96e34f78/custom_literals-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "625b54d79ac637a5db7b521297fb8929531d401a820e4e89fa2d2caa35817114",
        "md5": "272cde707b22e47067c85d94b7118737",
        "sha256": "141363db4c71000b3c6a6b154e0be61473e97aefc083681182ba7335c1620991"
      },
      "downloads": -1,
      "filename": "custom-literals-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "272cde707b22e47067c85d94b7118737",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 23500,
      "upload_time": "2022-04-01T11:49:53",
      "upload_time_iso_8601": "2022-04-01T11:49:53.738489Z",
      "url": "https://files.pythonhosted.org/packages/62/5b/54d79ac637a5db7b521297fb8929531d401a820e4e89fa2d2caa35817114/custom-literals-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}