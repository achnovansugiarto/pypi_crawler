{
  "info": {
    "author": "Evan Richard",
    "author_email": "evan.richard.umd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6"
    ],
    "description": "# Python Firestore REST Package\n\nA simple package to manage requests to and from the Google Cloud Firestore REST api. This package is designed to be used with Python 2.6. If you are using a newer version of python, please refer to https://firebase.google.com/docs/firestore/use-rest-api for the official python SDK.\n\n## Dependencies\n\nDependencies:\n\n* jwt\n* requests\n\n## Documentation\n\n### Authentication\n\nAuthentication is managed through the service account keys produced in the Firestore console. See https://firebase.google.com/docs/firestore/quickstart for more information on how to generate and store your private keys.\n\nTo begin, you will need to pass your service account keys to *credentials*\n\n```\nfrom firestore_rest import credentials, firestore\n\ncredentials.set_credentials(\"path/to/serviceAccount.json\")\ncredentials.initialize_app()\n```\n\n### Client\n\nAfter authenticating, pass the *credentials* to the Firestore Client. The client manages all requests to and from the Firestore database\n\n```\nfrom firestore_rest import credentials, firestore\n\ncredentials.set_credentials(\"path/to/serviceAccount.json\")\ncredentials.initialize_app()\n\ndb = firestore.client(credentials)\n```\n\n### Collection\n\nThis class represents *Firestore Collections*\n\nTo retrieve a reference to a new collection, call the **collection** method of the client.\n\n```\ncol_ref = db.collection('collectionName')\n```\n\nA collection can also be spawned from an instance of a *Document (see below)*\n\n```\ncol_ref = doc_ref.collection('collectionName')\n```\n\n#### Properties\n\n* Path: a collection's path can be retrieve via the getPath() method\n\n```\ncol_ref.getPath()\n\n# returns the fully-qualified pathname to the collection e.g. 'col/doc/subCol'\n```\n\n### Document\n\nThis class represents *Firestore Documents*\n\nTo retrieve a reference to a new document, call the **document** method of the client.\n\n```\ndoc_ref = db.document('collectionName/documentName')\n```\n\nSimilar to a collection, a document can also be spawned from an instance of a *Collection*\n\n```\ncol_ref = col_ref.document('documentName')\n```\n\n#### Properties\n\n* Path: a document's path can be retrieve via the getPath() method\n\n```\ndoc_ref.getPath()\n\n# returns the fully-qualified pathname to the document e.g. 'col/doc/subCol/subDoc'\n```\n\n#### Get\n\nRetrieve a snapshot of the current document.\n\n**get**()\n\n```\ndoc_ref.get()\n```\n\n#### Set\n\nCreates a new document with the specified fields. *Note: if a document already exists with the same pathName, the contents of that document will be replace with the contents of the **set** request*\n\n**set**(payload: dict)\n\n```\ndoc_ref.set({ 'name' : 'Mario', 'Age' : 24 })\n```\n\n#### Update\n\nUpdates the document with the specified fields. *Note: if a document already exists with the same pathName, the contents of that document will persist and the contents of the **update** request will be be appended to the document.*\n\n**update**(payload: dict)\n\n```\ndoc_ref.update({ 'Friends' : ['Peach', 'Toad'] })\n```\n\n#### Delete\n\nDeletes the current document. This does nothing if the document does not already exist.\n\n**delete**()\n\n```\ndoc_ref.delete()\n```\n\n### Batch\n\nThis is a helper to make batch requests to the Firestore database. Batch requests allow you to update multiple documents at once. Up to 200 records can be altered from each type of request (**set**, **update**, **delete**). *Note: although the batch seemingly commits all requests at once, currently each type of request is a seperate transaction (i.e. all update requests happen in one transaction and all delete requests happen in a seperate transaction)*\n\nTo spawn a new batch object\n\n```\nbatch = db.batch()\n```\n\n#### Get\n\nRetrieves the current entries in the batch request.\n\n**getBatch**()\n\n```\nbatch.getBatch()\n```\n\n#### Set\n\nAdds a **set** request to the current batch.\n\n**set**(doc_ref: str, payload: dict)\n\n```\nbatch.set(doc_ref, { 'name' : 'Mario', 'Age' : 24 })\n```\n\n#### Update\n\nAdds an **update** request to the current batch.\n\n**update**(doc_ref: str, payload: dict)\n\n```\nbatch.update(doc_ref, { 'name' : 'Mario', 'Age' : 24 })\n```\n\n#### Delete\n\nAdds a **delete** request to the current batch.\n\n**delete**(doc_ref: str)\n\n```\nbatch.delete(doc_ref)\n```\n\n#### Commit\n\nCommits all current batch requests to the Firestore database. This also clears the batch for the next use.\n\n**commit**()\n\n```\nbatch.commit()\n```\n\n## Contributing\n\nIf you would like to help improve/add features to the package. Please feel free to branch off the github repository https://github.com/evan-richard/firestore_rest. I will try to make updates and review merge requests as soon as possible.\n\n## Disclaimer\n\nThis software is provided free of charge. The software is not in conjunction with, reviewed by, or a representation of, the Google Cloud Services Platform. It is intended only to be used at the risk of the developer. I am not responsible for lost or corrupted data, and it is recommended that you test your requests in a development environment before altering any production level database.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/evan-richard/firestore_rest",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "firestore-rest",
    "package_url": "https://pypi.org/project/firestore-rest/",
    "platform": "",
    "project_url": "https://pypi.org/project/firestore-rest/",
    "project_urls": {
      "Homepage": "https://github.com/evan-richard/firestore_rest"
    },
    "release_url": "https://pypi.org/project/firestore-rest/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Firestore REST api utility package",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6172510,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "236050d883b54f459d1bdeb25d11a366884270b3bab2e736c55750076f6d450a",
          "md5": "240d2b9ddc977830228921c47b7584fe",
          "sha256": "328f6a7b8e1f1b50dccf1f88c44b51e70df2bc4c9055ae2696ee0c8310535738"
        },
        "downloads": -1,
        "filename": "firestore_rest-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "240d2b9ddc977830228921c47b7584fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7845,
        "upload_time": "2019-11-21T01:39:50",
        "upload_time_iso_8601": "2019-11-21T01:39:50.586959Z",
        "url": "https://files.pythonhosted.org/packages/23/60/50d883b54f459d1bdeb25d11a366884270b3bab2e736c55750076f6d450a/firestore_rest-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87acf16c63b6d95aed64766d2ee0ddc7dcac429c833b9267db5a195d03c968de",
          "md5": "948b189e675ffb2a182c9c0b8dcb8d82",
          "sha256": "350e9a33bbe162444d21756d4bf86c9eef87a2b585bfee6a863020332fb54a97"
        },
        "downloads": -1,
        "filename": "firestore_rest-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "948b189e675ffb2a182c9c0b8dcb8d82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7670,
        "upload_time": "2019-11-21T01:39:52",
        "upload_time_iso_8601": "2019-11-21T01:39:52.961016Z",
        "url": "https://files.pythonhosted.org/packages/87/ac/f16c63b6d95aed64766d2ee0ddc7dcac429c833b9267db5a195d03c968de/firestore_rest-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "236050d883b54f459d1bdeb25d11a366884270b3bab2e736c55750076f6d450a",
        "md5": "240d2b9ddc977830228921c47b7584fe",
        "sha256": "328f6a7b8e1f1b50dccf1f88c44b51e70df2bc4c9055ae2696ee0c8310535738"
      },
      "downloads": -1,
      "filename": "firestore_rest-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "240d2b9ddc977830228921c47b7584fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7845,
      "upload_time": "2019-11-21T01:39:50",
      "upload_time_iso_8601": "2019-11-21T01:39:50.586959Z",
      "url": "https://files.pythonhosted.org/packages/23/60/50d883b54f459d1bdeb25d11a366884270b3bab2e736c55750076f6d450a/firestore_rest-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87acf16c63b6d95aed64766d2ee0ddc7dcac429c833b9267db5a195d03c968de",
        "md5": "948b189e675ffb2a182c9c0b8dcb8d82",
        "sha256": "350e9a33bbe162444d21756d4bf86c9eef87a2b585bfee6a863020332fb54a97"
      },
      "downloads": -1,
      "filename": "firestore_rest-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "948b189e675ffb2a182c9c0b8dcb8d82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7670,
      "upload_time": "2019-11-21T01:39:52",
      "upload_time_iso_8601": "2019-11-21T01:39:52.961016Z",
      "url": "https://files.pythonhosted.org/packages/87/ac/f16c63b6d95aed64766d2ee0ddc7dcac429c833b9267db5a195d03c968de/firestore_rest-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}