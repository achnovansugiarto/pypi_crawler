{
  "info": {
    "author": "MrZilinXiao",
    "author_email": "me@mrxiao.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Wechaty-Meme-Bot [![Python 3.7+](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/release/python-370/)\n\n![meme-bot-logo](/image/logo.png)\n\n[![Wechaty in Python](https://img.shields.io/badge/Wechaty-Python-blue)](https://github.com/wechaty/python-wechaty)\n[![Powered by Wechaty](https://img.shields.io/badge/Powered%20By-Wechaty-brightgreen.svg)](https://github.com/Wechaty/wechaty)\n## Preface\n**This project is supported by [Wechaty Community](https://github.com/wechaty) and [Institute of Software of Chinese Academy of Sciences](https://isrc.iscas.ac.cn/summer2020/).**\n[![Wechaty](/image/wechaty-logo.svg)](https://github.com/wechaty/wechaty)\n[![summerofcode](/image/summer2020.svg)](https://isrc.iscas.ac.cn/summer2020/)\n\nPowerPoint Demonstration: [https://www.bilibili.com/video/BV1kZ4y1M7F6/](https://www.bilibili.com/video/BV1kZ4y1M7F6/)\n\nDemo Live Video on bilibili: [https://www.bilibili.com/video/BV17f4y197ut/](https://www.bilibili.com/video/BV17f4y197ut/)\n\nMy community mentor is [Huang](https://github.com/huangaszaq), contributor of python-wechaty. I won't make such progress without his support.\n\n## Introduction\nI was required to build a meme bot based on [python-wechaty](https://github.com/wechaty/python-wechaty), which should possess at least following functions:\n- receive & save meme image from specific contact\n- analyse received meme image \n- response meme image accordingly based on analysis given above\n\nTo achieve such requirements, I came out with a cross-functional diagram below to assist my development(written in Chinese):\n![](https://upyun.mrxiao.net/img/Drawing4.svg)\n\n## Some Concepts\n1. Frontend: Run on user end, be in charge of communicating with python-wechaty-puppet and backend, acting as a middleware.\n2. Backend: Run on server end equipping a NVIDIA GPU, be in charge of analyzing meme image and choose response meme based on certain strategy.\n\n## Directory Layout\n\n```shell script\n$ tree -L 3 -I '__pycache__'\n.\n├── LICENSE\n├── Makefile\n├── README.md\n├── backend  # backend files\n│   ├── chineseocr_lite  # modified OCR module\n│   │   ├── Dockerfile\n│   │   ├── LICENSE\n│   │   ├── __init__.py\n│   │   ├── angle_class\n│   │   ├── config.py\n│   │   ├── crnn\n│   │   ├── model.py\n│   │   ├── models\n│   │   ├── psenet\n│   │   └── utils.py\n│   ├── config.yaml   # config file in yaml format\n│   ├── conversation  # conversation GPT2 model path (~600MB), download from GDrive mentioned before\n│   ├── cosine_metric_net.py  # definition of CosineMetricNet\n│   ├── cosine_train  # CosineMetricNet Training scripts\n│   │   ├── dataset.py\n│   │   ├── metric.py\n│   │   └── train_and_eval.py\n│   ├── dataset.py  # Common training dataset module\n│   ├── feature_extract.py  # feature extract module\n│   ├── hanlp_wrapper.py  # NLP wrapper\n│   ├── logs  # log dir\n│   ├── meme  # default dir for meme import\n│   │   ├── classified\n│   │   ├── others\n│   │   └── unclassified\n│   ├── meme_importer.py\n│   ├── ocr_wrapper.py\n│   ├── requirements.txt\n│   ├── response\n│   │   ├── __init__.py\n│   │   ├── conversation.py\n│   │   ├── dispatcher.py\n│   │   └── feature.py\n│   ├── spider  # custom spider dir, any spiders should derive from BaseSpider\n│   │   ├── BaseSpider.py\n│   │   └── FaBiaoQingSpider.py  # example spider to crawl FaBiaoQing\n│   ├── stopwords.txt  # stop words list for NLP tokenizer\n│   ├── utils.py  # backend public utils\n│   └── web_handler.py  # backend Flask module\n├── frontend\n│   ├── config.py  # frontend configuration\n│   ├── image  # image cache dir\n│   ├── logs  # log dir\n│   ├── main.py\n│   └── meme_bot.py\n├── gdrive.sh   # bash to download from GDrive\n├── image  # static image files\n│   ├── logo.png\n│   ├── summer2020.svg\n│   └── wechaty-logo.svg\n├── orm.py  # orm module\n├── test.db   # SQLite database\n└── tests  # unittests using pytest\n    ├── conftest.py\n    ├── test_conversation.py\n    ├── test_dataset.py\n    └── test_orm.py\n```\n\n## Deploy Tutorial\n```\ngit clone https://github.com/MrZilinXiao/python-wechaty-meme-bot.git\n```\n### Frontend\n#### Via PyPi (Pending...)\n```shell script\npip3 install wechaty-meme-bot\n```\n\n#### Manually\n\n1.Correctly configure backend settings in `frontend/config.yaml`\n```yaml\ngeneral:\n  image_temp_dir: './image'\n  allow_img_extensions: ('.jpg', '.png', '.jpeg', '.gif')\n\nbackend:  # change to your backend server\n  backend_upload_url: 'http://192.168.10.102:5000/meme/upload'\n  backend_static_url: 'http://192.168.10.102:5000/static'\n```\n2.Run lines below in your shell:\n```shell script\nexport WECHATY_PUPPET=wechaty-puppet-hostie\nexport WECHATY_PUPPET_HOSTIE_TOKEN=your-donut-token   # replace `your-donut-token` with your wechaty donut token\nmake run-frontend\n# if no `make` in your system, try run `pip3 install -r frontend/requirements.txt`, `python3 frontend/main.py`\n```\n\n### Backend\n*Currently we only get backend tested on Ubuntu, while frontend possesses cross-platform feature.*\n\nYou may refer to [Github Action Configuration](https://github.com/MrZilinXiao/python-wechaty-meme-bot/blob/master/.github/workflows/test.yml) to learn how we deploy backend when you encounter issues.\n#### Nvidia-docker\nPending...\n\n#### Manually\n```shell script\npip3 install -r backend/requirements.txt\npython backend/web_handler.py  # this will trigger chineseocrlite compiling process\n```\n\n## Open-Source Reference\n- [chineseocr_lite](https://github.com/ouyanghuiyu/chineseocr_lite/tree/master): Powerful Chinese OCR module with accurate results and fast inference.\n- [HaNLP](https://github.com/hankcs/HanLP): Multilingual NLP library for researchers and companies, built on TensorFlow 2.0.\n- [Transformers](https://github.com/huggingface/transformers): State-of-the-art Natural Language Processing for Pytorch and TensorFlow 2.0.\n- [GPT2-Chinese](https://github.com/Morizeyao/GPT2-Chinese): Chinese version of GPT2 training code, using BERT tokenizer.\n\n## Academic Citation\n```\n# in backend/cosine_metric_net.py\n[1]N. Wojke and A. Bewley, “Deep Cosine Metric Learning for Person Re-identification,” in 2018 IEEE Winter Conference on Applications of Computer Vision (WACV), Lake Tahoe, NV, Mar. 2018, pp. 748–756, doi: 10.1109/WACV.2018.00087.\n# GPT2 Original Paper\n[2]Radford, Alec, et al. \"Language models are unsupervised multitask learners.\" OpenAI Blog 1.8 (2019): 9.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MrZilinXiao/python-wechaty-meme-bot",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wechaty-meme-bot",
    "package_url": "https://pypi.org/project/wechaty-meme-bot/",
    "platform": "",
    "project_url": "https://pypi.org/project/wechaty-meme-bot/",
    "project_urls": {
      "Bug Reports": "https://github.com/MrZilinXiao/python-wechaty-meme-bot/issues",
      "Homepage": "https://github.com/MrZilinXiao/python-wechaty-meme-bot",
      "Source": "https://github.com/MrZilinXiao/python-wechaty-meme-bot"
    },
    "release_url": "https://pypi.org/project/wechaty-meme-bot/0.0.1/",
    "requires_dist": [
      "wechaty",
      "Pillow",
      "requests"
    ],
    "requires_python": "",
    "summary": "Wechaty-Meme-Bot is an interactive meme bot who respond interesting picture according to what he sees.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8276003,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b10903efa95c65e85e71631c0e8c58a640631657f2035aedb5267e54725ec83",
          "md5": "b48210d447c56726669b4bba37a6a93b",
          "sha256": "077c6c3de9c8c8ca0bf8dfd4b21c7fde0617e3d1c7cccb044cf65c59cb6c7780"
        },
        "downloads": -1,
        "filename": "wechaty_meme_bot-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b48210d447c56726669b4bba37a6a93b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6638,
        "upload_time": "2020-09-26T01:16:48",
        "upload_time_iso_8601": "2020-09-26T01:16:48.287605Z",
        "url": "https://files.pythonhosted.org/packages/9b/10/903efa95c65e85e71631c0e8c58a640631657f2035aedb5267e54725ec83/wechaty_meme_bot-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3410758710603b5cfb019e43b7e4d22dcf6db96b443ab0955440f5adbdc9c98b",
          "md5": "144b3de8b1564e5ba1341a56c8603ae1",
          "sha256": "afe7282e4b4604eefa80c1191482457ac2b3cc6f0d4a4c0c310aa4de5a5d8520"
        },
        "downloads": -1,
        "filename": "wechaty-meme-bot-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "144b3de8b1564e5ba1341a56c8603ae1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6882,
        "upload_time": "2020-09-26T01:16:50",
        "upload_time_iso_8601": "2020-09-26T01:16:50.938013Z",
        "url": "https://files.pythonhosted.org/packages/34/10/758710603b5cfb019e43b7e4d22dcf6db96b443ab0955440f5adbdc9c98b/wechaty-meme-bot-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b10903efa95c65e85e71631c0e8c58a640631657f2035aedb5267e54725ec83",
        "md5": "b48210d447c56726669b4bba37a6a93b",
        "sha256": "077c6c3de9c8c8ca0bf8dfd4b21c7fde0617e3d1c7cccb044cf65c59cb6c7780"
      },
      "downloads": -1,
      "filename": "wechaty_meme_bot-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b48210d447c56726669b4bba37a6a93b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6638,
      "upload_time": "2020-09-26T01:16:48",
      "upload_time_iso_8601": "2020-09-26T01:16:48.287605Z",
      "url": "https://files.pythonhosted.org/packages/9b/10/903efa95c65e85e71631c0e8c58a640631657f2035aedb5267e54725ec83/wechaty_meme_bot-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3410758710603b5cfb019e43b7e4d22dcf6db96b443ab0955440f5adbdc9c98b",
        "md5": "144b3de8b1564e5ba1341a56c8603ae1",
        "sha256": "afe7282e4b4604eefa80c1191482457ac2b3cc6f0d4a4c0c310aa4de5a5d8520"
      },
      "downloads": -1,
      "filename": "wechaty-meme-bot-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "144b3de8b1564e5ba1341a56c8603ae1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6882,
      "upload_time": "2020-09-26T01:16:50",
      "upload_time_iso_8601": "2020-09-26T01:16:50.938013Z",
      "url": "https://files.pythonhosted.org/packages/34/10/758710603b5cfb019e43b7e4d22dcf6db96b443ab0955440f5adbdc9c98b/wechaty-meme-bot-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}