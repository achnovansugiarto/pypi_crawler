{
  "info": {
    "author": "me",
    "author_email": "mail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Project daskcheck\n=================\n\nThis should allow an easy use of **dask**.\n\nInstalation\n-----------\n\n``` {.example}\npip install daskcheck\n```\n\nUsage\n-----\n\n``` {.python}\nfrom daskcheck import daskcheck\n\nfrom fire import Fire\nimport time\nimport platform\nimport datetime as dt\nimport json\n\ndef main( parlist ):\n    parameters = daskcheck.prepare_params( parlist )\n\n    if type(parameters)==list:\n        print(\"i... viable for DASK ....\")\n        daskcheck.submit( daskcheck.get_cpu_info , parameters)\n    else:\n        print(\"i... running only locally\")\n        my_results = xcorefunc( 1 , parameters )\n        # Write LOG file.\n        now = dt.datetime.now()\n        stamp = now.strftime(\"%Y%m%d_%H%M%S\")\n        with open(f\"dask_results_log_{stamp}.json\", \"w\") as fp:\n            json.dump( my_results , fp, sort_keys=True, indent='\\t', separators=(',', ': '))\n    return\n\ndef xcorefunc( order, param):\n    \"\"\"\n    Function to be sent to dask server with order# + parameter\n    \"\"\"\n    import ROOT # I need to avoid breaking pickle\n    start_time = time.perf_counter()\n\n    return order, [platform.node(),  f\"{time.perf_counter() - start_time:.1f} s\" , ni]\n\n\nif __name__==\"__main__\":\n    Fire(main)\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "GPL2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "daskcheck",
    "package_url": "https://pypi.org/project/daskcheck/",
    "platform": null,
    "project_url": "https://pypi.org/project/daskcheck/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/daskcheck/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Automatically created environment for python package",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16375940,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6121e725dfd2a1226d72b709ee0f324c4280dafe5787d2b4ccbaaf4d117eac46",
          "md5": "3572c9bcf4500cc2f7a187ef2901dc51",
          "sha256": "915107612afd775f18b60a7335962946d4471f40a880d12f2677d798cba0cd31"
        },
        "downloads": -1,
        "filename": "daskcheck-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3572c9bcf4500cc2f7a187ef2901dc51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7067,
        "upload_time": "2023-01-10T15:07:21",
        "upload_time_iso_8601": "2023-01-10T15:07:21.070961Z",
        "url": "https://files.pythonhosted.org/packages/61/21/e725dfd2a1226d72b709ee0f324c4280dafe5787d2b4ccbaaf4d117eac46/daskcheck-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6121e725dfd2a1226d72b709ee0f324c4280dafe5787d2b4ccbaaf4d117eac46",
        "md5": "3572c9bcf4500cc2f7a187ef2901dc51",
        "sha256": "915107612afd775f18b60a7335962946d4471f40a880d12f2677d798cba0cd31"
      },
      "downloads": -1,
      "filename": "daskcheck-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3572c9bcf4500cc2f7a187ef2901dc51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7067,
      "upload_time": "2023-01-10T15:07:21",
      "upload_time_iso_8601": "2023-01-10T15:07:21.070961Z",
      "url": "https://files.pythonhosted.org/packages/61/21/e725dfd2a1226d72b709ee0f324c4280dafe5787d2b4ccbaaf4d117eac46/daskcheck-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}