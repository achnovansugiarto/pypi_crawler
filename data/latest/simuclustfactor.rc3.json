{
  "info": {
    "author": "Prosper Ablordeppey, Adelaide Freitas, Giorgia Zaccaria",
    "author_email": "prablordeppey@gmail.com, adelaide@ua.pt, giorgia.zaccaria@unitelmasapienza.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "python-simuclustfactor\n===============\n\nPerform simultaneous clustering and factor decomposition in Python for \nthree-mode datasets, a library utility.\n\nThe main use cases of the library are:\n\n-   performing tandem clustering and factor-decomposition procedures sequentially (TWCFTA).\n-   performing tandem factor-decomposition and clustering procedures sequentially (TWFCTA).\n-   performing the clustering and factor decomposition procedures simultaneously (T3Clus).\n-   performing factor-decomposition and clustering procedures simultaneously (3FKMeans).\n-   performing combined T3Clus and 3FKMeans procedures simultaneously (CT3Clus).\n\nInstallation\n------------\n\nTo install the Python library, run:\n\n```shell\npip install simuclustfactor\n```\n\nYou may consider installing the library only for the current user:\n\n```shell\npip install simuclustfactor --user\n```\n\nLibrary usage\n-------------\n\nImplements just two main modules namely,\n  - `tandem`: encapsulating TWCFTA and TWFCTA\n  - `simultaneous`: encapsulating T3Clus, TFKMeans and CT3Clus\n\n**Data Generation**\n\n```py\nimport numpy as np\nfrom simuclustfactor import tandem\nfrom simuclustfactor import simultaneous\nfrom simuclustfactor.generate_dataset import GenerateDataset\nfrom simuclustfactor.tensor import Fold, Unfold\n\nI,J,K = 8,5,4  # dimensions in the full space.\nG,Q,R = 3,3,2  # tensor dimensions in reduced space.  \ndata = GenerateDataset(I=I, J=J, K=K, G=G, Q=Q, R=R, centroids_spread=[0,1], noise_mean=0, noise_stdev=0.5, seed=None).additive_noise()\n\n# Extracting the data\nY_g_qr = data.Y_g_qr  # centroids matrix in the reduced space.\nZ_i_jk = data.Z_i_jk  # score/centroid matrix in the full-space.\nX_i_jk = data.X_i_jk  # dataset with noise.\n\n# Ground-truth parameters\nU_i_g = data.U_i_g  # binary stochastic membership matrix\nB_j_q = data.B_j_q  # variables factor matrix\nC_k_r = data.C_k_r  # occasions factor matrix\n\n# Ground-truth associations\nU_i_g = data.U_labels  # array of clusters for objects\nB_j_q = data.B_labels  # array of factors for each variable\nC_k_r = data.C_labels  # array of factors for each occasion\n\n# Folding generated data matrices into tensors\nX_i_j_k = fold(X_i_jk, mode=1, shape=c(K,I,J))\nZ_i_j_k = fold(Z_i_jk, mode=1, shape=c(K,I,J))\nY_g_q_r = fold(Y_g_qr, mode=1, shape=c(R,G,Q))\n```\n\n### Tandem Models\n\n**TWCFTA**\n```py\ncf = tandem.TWCFTA(random_state=0,verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R))\n\n```\n**TWFCTA**\n```py\ntwfcta = tandem.TWFCTA(random_state=0,verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R))\n\n# The following attributes are accessible for the tandem models via the '. operator\ntwfcta.U_i_g0  # initial membership matrix\ntwfcta.B_j_q0  # initial variable-component matrix\ntwfcta.C_k_r0  # initial occasion-component matrix\ntwfcta.U_i_g  # final membership matrix\ntwfcta.B_j_q  # final variable-component matrix\ntwfcta.C_k_r  # final occasion-component matrix\n\ntwfcta.Y_g_qr  # The centroids in the reduced space (data matrix).\ntwfcta.X_i_jk_scaled  # Standardized data matrix.\n\ntwfcta.BestTimeElapsed  # Execution time for the best iterate.\ntwfcta.BestLoop  # Loop that obtained the best iterate.\n\ntwfcta.BestKmIteration  # Number of iterations until best iterate for the K-means.\ntwfcta.BestFaIteration  # Number of iterations until best iterate for the FA.\ntwfcta.FaConverged  # Flag to check if algorithm converged for the Factor decomposition.\ntwfcta.KmConverged  # Flag to check if algorithm converged for the K-means.\ntwfcta.nKmConverges  # Number of loops that converged for the K-means.\ntwfcta.nFaConverges  # Number of loops that converged for the Factor decomposition.\n\ntwfcta.TSS_full  # Total deviance in the full-space.\ntwfcta.BSS_full  # Between deviance in the reduced-space.\ntwfcta.RSS_full  # Residual deviance in the reduced-space.\ntwfcta.TSS_reduced  # Total deviance in the reduced-space.\ntwfcta.BSS_reduced  # Between deviance in the reduced-space.\ntwfcta.RSS_reduced  # Residual deviance in the reduced-space.\n\ntwfcta.PF_full  # PseudoF computed in the full-space.\ntwfcta.PF_reduced  # PseudoF computed in the reduced-space.\ntwfcta.PF  # Actual PseudoF score used to obtain the best loop. PF_reduced for twfcta and PF_full twcfta.\n\ntwfcta.Labels  # Object cluster assignments.\ntwfcta.FsKM  # Objective function values for the KM best iterate.\ntwfcta.FsFA  # Objective function values for the FA best iterate.\ntwfcta.Enorm  # Average l2norm of residual norm.\n```\n\n**Simultaneous Models**\n\n**TFKMeans**\n```py\ntfkmeans = simultaneous.TFKMeans(random_state=0, init='random', verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R))\n```\n\n**TFKMeans**\n```py\nt3clus = simultaneous.T3Clus(random_state=0, init='random', verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R))\n```\n\n**CT3Clus**\n```py\ntfkmeans_1 = simultaneous.CT3Clus(random_state=0, init='random', verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R), alpha=0)\n\nct3clus = simultaneous.CT3Clus(random_state=0, init='random', verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R), alpha=0.5)\n\nt3clus_1 = simultaneous.CT3Clus(random_state=0, init='random', verbose=True, n_max_iter=10).fit(X_i_jk, full_tensor_shape=(I,J,K), reduced_tensor_shape=(G,Q,R), alpha=1)\n\n# The following attributes are accessible for the simultaneous models via the '.' operator\nct3clus.U_i_g0  # initial membership matrix.\nct3clus.B_j_q0  # initial variable-component matrix.\nct3clus.C_k_r0  # initial occasion-component matrix.\nct3clus.U_i_g  # final membership matrix.\nct3clus.B_j_q  # final variable-component matrix.\nct3clus.C_k_r  # final occasion-component matrix.\n\nct3clus.Y_g_qr  # Centroids in the reduced space (data matrix).\nct3clus.X_i_jk_scaled  # Standardized data matrix.\n\nct3clus.BestTimeElapsed  # Execution time for the best iterate.\nct3clus.BestLoop  # Loop that obtained the best iterate.\nct3clus.BestIteration  # Number of iterations until best iterate found.\nct3clus.Converged  # Flag to check if the algorithm converged.\nct3clus.nConverges  # Number of loops that converged.\n\nct3clus.TSS_full  # Total deviance in the full-space.\nct3clus.BSS_full  # Between deviance in the reduced-space.\nct3clus.RSS_full  # Residual deviance in the reduced-space.\nct3clus.TSS_reduced  # Total deviance in the reduced-space.\nct3clus.BSS_reduced  # Between deviance in the reduced-space.\nct3clus.RSS_reduced  # Residual deviance in the reduced-space.\n\nct3clus.PF_full  # PseudoF computed in the full-space.\nct3clus.PF_reduced  # PseudoF computed in the reduced-space.\nct3clus.PF  # Weighted PseudoF score used to obtain the best loop.\n\nct3clus.Labels  # Object cluster assignments.\nct3clus.Fs  # Objective function values for the best iterate.\nct3clus.Enorm  # Average l2norm of residual norm.\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/prablordeppey/simuclustfactor-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Prosper Ablordeppey",
    "maintainer_email": "prablordeppey@gmail.com,",
    "name": "simuclustfactor",
    "package_url": "https://pypi.org/project/simuclustfactor/",
    "platform": null,
    "project_url": "https://pypi.org/project/simuclustfactor/",
    "project_urls": {
      "Bug Tracker": "https://github.com/prablordeppey/simuclustfactor-python/issues",
      "Homepage": "https://github.com/prablordeppey/simuclustfactor-python"
    },
    "release_url": "https://pypi.org/project/simuclustfactor/0.0.3/",
    "requires_dist": [
      "numpy (>=1.19.2)",
      "tabulate (>=0.8.9)"
    ],
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15460453,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29dd68e9522ecc20887a6f12a67a1ff2601b46b9c93803ac81159ed8d074d99f",
          "md5": "5de404263b155f8a949ae21515660c2a",
          "sha256": "bc617d3c8bdfb94c909bd2561dfbdbbb6ce53d6553ec00e3a0c5c72ceb77dcbd"
        },
        "downloads": -1,
        "filename": "simuclustfactor-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5de404263b155f8a949ae21515660c2a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2209,
        "upload_time": "2022-09-10T18:59:02",
        "upload_time_iso_8601": "2022-09-10T18:59:02.038156Z",
        "url": "https://files.pythonhosted.org/packages/29/dd/68e9522ecc20887a6f12a67a1ff2601b46b9c93803ac81159ed8d074d99f/simuclustfactor-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f526cefff82cf0c376c7e968de63ad35871a0454b7795da2af453934f71bf71",
          "md5": "e8bb81867adbfb52ef9d9896e1737599",
          "sha256": "165d3e243075b99965ee591fb4fa52d3a2e195ac26a6378b483c1fb8fb3bc28d"
        },
        "downloads": -1,
        "filename": "simuclustfactor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8bb81867adbfb52ef9d9896e1737599",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3136,
        "upload_time": "2022-09-10T18:59:03",
        "upload_time_iso_8601": "2022-09-10T18:59:03.638575Z",
        "url": "https://files.pythonhosted.org/packages/3f/52/6cefff82cf0c376c7e968de63ad35871a0454b7795da2af453934f71bf71/simuclustfactor-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06bd9aa6dac341a0315b724b8a00678fd78e0240bec0570bfa04c233112674db",
          "md5": "3253d26b8db1e632d0fc5393dfbe8d5a",
          "sha256": "1ffa37c068d6024734582d28d35b89a3c32cdad5b4d22a4ce62aff5a404b09fe"
        },
        "downloads": -1,
        "filename": "simuclustfactor-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3253d26b8db1e632d0fc5393dfbe8d5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 2214,
        "upload_time": "2022-09-10T19:29:44",
        "upload_time_iso_8601": "2022-09-10T19:29:44.492282Z",
        "url": "https://files.pythonhosted.org/packages/06/bd/9aa6dac341a0315b724b8a00678fd78e0240bec0570bfa04c233112674db/simuclustfactor-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "064c1d2507fdb5425033e0d2d5bab027f4bb0d1fc6d65fb4481479948f26c112",
          "md5": "a6f3feb9642cb5134489e2bdbf249594",
          "sha256": "fa4e8119ac93640a99c0c54b9c03f7e4861a430ff08c4c48807173816c717128"
        },
        "downloads": -1,
        "filename": "simuclustfactor-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a6f3feb9642cb5134489e2bdbf249594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3109,
        "upload_time": "2022-09-10T19:29:45",
        "upload_time_iso_8601": "2022-09-10T19:29:45.956990Z",
        "url": "https://files.pythonhosted.org/packages/06/4c/1d2507fdb5425033e0d2d5bab027f4bb0d1fc6d65fb4481479948f26c112/simuclustfactor-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cc0ff5212cbaec31a63ae57c147f24402ae6ea9d23d3f75c01d15f23d6adb1a",
          "md5": "a301f93c9573fb3407f96fe370713446",
          "sha256": "919eb1edef39ff3579471d914ee86ccc57d534003eed78ebe894cd1fc7b28b0c"
        },
        "downloads": -1,
        "filename": "simuclustfactor-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a301f93c9573fb3407f96fe370713446",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3130,
        "upload_time": "2022-10-19T11:45:01",
        "upload_time_iso_8601": "2022-10-19T11:45:01.091451Z",
        "url": "https://files.pythonhosted.org/packages/5c/c0/ff5212cbaec31a63ae57c147f24402ae6ea9d23d3f75c01d15f23d6adb1a/simuclustfactor-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcabd1fe1b1b6d3de5032f08f773f6c73196685e79221e5c9e6834cbed91b47d",
          "md5": "a13d78dea04ae21d6797998d3b1bb370",
          "sha256": "693d111f8d740b434a9aea103dc13fad32ebd66328967391dee2c87380534cbb"
        },
        "downloads": -1,
        "filename": "simuclustfactor-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a13d78dea04ae21d6797998d3b1bb370",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4885,
        "upload_time": "2022-10-19T11:45:02",
        "upload_time_iso_8601": "2022-10-19T11:45:02.561625Z",
        "url": "https://files.pythonhosted.org/packages/dc/ab/d1fe1b1b6d3de5032f08f773f6c73196685e79221e5c9e6834cbed91b47d/simuclustfactor-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cc0ff5212cbaec31a63ae57c147f24402ae6ea9d23d3f75c01d15f23d6adb1a",
        "md5": "a301f93c9573fb3407f96fe370713446",
        "sha256": "919eb1edef39ff3579471d914ee86ccc57d534003eed78ebe894cd1fc7b28b0c"
      },
      "downloads": -1,
      "filename": "simuclustfactor-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a301f93c9573fb3407f96fe370713446",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3130,
      "upload_time": "2022-10-19T11:45:01",
      "upload_time_iso_8601": "2022-10-19T11:45:01.091451Z",
      "url": "https://files.pythonhosted.org/packages/5c/c0/ff5212cbaec31a63ae57c147f24402ae6ea9d23d3f75c01d15f23d6adb1a/simuclustfactor-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcabd1fe1b1b6d3de5032f08f773f6c73196685e79221e5c9e6834cbed91b47d",
        "md5": "a13d78dea04ae21d6797998d3b1bb370",
        "sha256": "693d111f8d740b434a9aea103dc13fad32ebd66328967391dee2c87380534cbb"
      },
      "downloads": -1,
      "filename": "simuclustfactor-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a13d78dea04ae21d6797998d3b1bb370",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4885,
      "upload_time": "2022-10-19T11:45:02",
      "upload_time_iso_8601": "2022-10-19T11:45:02.561625Z",
      "url": "https://files.pythonhosted.org/packages/dc/ab/d1fe1b1b6d3de5032f08f773f6c73196685e79221e5c9e6834cbed91b47d/simuclustfactor-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}