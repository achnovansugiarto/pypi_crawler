{
  "info": {
    "author": "",
    "author_email": "JoÃ«l Larose <joel.larose@budo.systems>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Pytest",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Unit",
      "Typing :: Typed"
    ],
    "description": "Budo Systems Pytest Suite\n=========================\n\nThis add-on to the Budo Systems platform creates a standardized test suite\nfor modules that implement services abstracted in Budo Systems Core\n(`project <https://gitlab.com/budosystems/budosystems-core>`_,\n`docs <https://budosystems.readthedocs.io/>`_).\n\nThis early version only provides a test suite for a ``Repository``.  However, you get 21 ready-to-use tests for free to\nvalidate your implementation of a ``Repository``.\n\nUsage\n-----\nThe assumption here is that you're using this package to add tests for an implementation of a feature for Budo Systems.\n\nStep 1. Installation\n~~~~~~~~~~~~~~~~~~~~\n\nFrom your project environment, first you need to install the package.  There are several options for this.  Here are\nbut a few examples.\n\n#. Install directly with ``pip``:\n\n    |shell|\n\n    .. code:: sh\n\n        pip install pytest-budosystems\n\n#. Add to ``requirements.txt``, and install using that file:\n\n    |unifile| ``requirements.txt``\n\n    .. code::\n\n        budosystems-core\n        pytest-budosystems\n\n    |shell|\n\n    .. code:: sh\n\n        pip install -r requirements.txt\n\n#. Add to ``setup.cfg``, and reinstall your project:\n\n    |unifile| ``setup.cfg``\n\n    .. code:: cfg\n\n        [metadata]\n        name = my-budosystems-project\n        version = 0.0.2\n        description = My implementation of a Budo Systems feature.\n\n        [options]\n        python_requires = >= 3.9\n        packages = find_namespace:\n        package_dir =\n            =src\n\n        install_requires =\n            budosystems-core\n            another-required-package\n            something-else-needed\n\n        [options.packages.find]\n        where = src\n\n        [options.extras_require]\n        test =\n            pytest\n            pytest-budosystems\n\n    |shell|\n\n    .. code:: sh\n\n        pip install -U -e .\n\nStep 2. Add to your test suite\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo use this test suite to test your implementation of a ``budosystems.storage.repository.Repository``, you'll need to\ncreate a test class that inherits from\n``budosystems.xtra.pytest_suite.repository.AbstractTestRepository`` and override a few fixture methods.\n\nThe only required fixture method is ``repo_class``.  It's an abstract method with the following specs:\n\n.. code:: python\n\n    @abstractmethod\n    @fixture(scope=\"class\")\n    def repo_class(self) -> type[Repository]:\n        \"\"\"Returns the class for the implementation of `Repository` being tested.\"\"\"\n\nYour testing needs may require you to override some other fixture methods.  The two most likely candidates are\n``repo_args`` and ``repo_inaccessible``.  Here's how they are defined in ``AbstractTestRepository``\n\n.. code:: python\n\n    @fixture(scope=\"class\")\n    def repo_args(self) -> dict[str, Any]:\n        \"\"\"Returns implementation specific arguments to instantiate the implementation of\n        `Repository` being tested.\"\"\"\n        return {}\n\n    @fixture(scope=\"class\")\n    def repo_inaccessible(self, repo_class: type[Repository]) -> Repository:\n        \"\"\"\n        Returns an instance of the implementation of `Repository` with improper connection.\n        \"\"\"\n        pytest.skip(f\"No 'inaccessible' implementation of {str(repo_class)}\")\n\nMinimal Example\n+++++++++++++++\n\nA minimal example can be found in the test suite for Budo Systems Core:\n\n|unifile| ``test_dict_repository.py``\n\n.. code:: python\n\n    from pytest import fixture\n    from budosystems.xtra.pytest_suite.repository import AbstractTestRepository\n    from budosystems.storage.repository import Repository\n    from budosystems.storage.dict_repository import DictRepository\n\n    class TestDictRepository(AbstractTestRepository):\n\n        @fixture(scope=\"class\")\n        def repo_class(self) -> type[Repository]:\n            return DictRepository\n\nA More Complex Example\n++++++++++++++++++++++\n\nAn example that overrides all the methods listed above can be found in the test suite for Budo Systems SQLite Storage:\n\n|unifile| ``test_repository.py``\n\n.. code:: python\n\n    from pytest import fixture\n    import sqlite3\n    from typing import Any\n\n    from budosystems.xtra.pytest_suite.repository import AbstractTestRepository\n    from budosystems.storage.repository import Repository\n    from budosystems.xtra.sqlite3_storage.repository import SQLite3Repository\n\n    class TestSQLite3Repository(AbstractTestRepository):\n\n        @fixture(scope=\"class\")\n        def repo_class(self) -> type[Repository]:\n            return SQLite3Repository\n\n        @fixture(scope=\"class\")\n        def repo_args(self) -> dict[str, Any]:\n            return {\"con\": sqlite3.connect(\":memory:\")}\n\n        @fixture(scope=\"class\")\n        def repo_inaccessible(self, repo_class: type[Repository]) -> Repository:\n            con = sqlite3.connect(\":memory:\")\n            repo = repo_class(con=con)\n            con.close()\n            return repo\n\nStep 3. Test!\n~~~~~~~~~~~~~\n\nRun ``pytest`` and get your results.\n\n.. |unishell| unicode:: U+1f41a\n.. |unifile| unicode:: U+1f4dd\n.. |shell| replace:: |unishell| shell\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Budo Systems,test,pytest",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-budosystems",
    "package_url": "https://pypi.org/project/pytest-budosystems/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-budosystems/",
    "project_urls": {
      "Issue Tracker": "https://gitlab.com/budosystems/pytest-budosystems/-/issues",
      "Repository": "https://gitlab.com/budosystems/pytest-budosystems"
    },
    "release_url": "https://pypi.org/project/pytest-budosystems/0.2.0/",
    "requires_dist": [
      "budosystems-core",
      "pytest",
      "pytest-budosystems[docs,lintcheck,test,typecheck] ; extra == 'all'",
      "Sphinx ; extra == 'docs'",
      "sphinx-git ; extra == 'docs'",
      "pylint ; extra == 'lintcheck'",
      "pylint-venv ; extra == 'lintcheck'",
      "pylint-pytest ; extra == 'lintcheck'",
      "pytest-cov ; extra == 'test'",
      "mypy ; extra == 'typecheck'"
    ],
    "requires_python": ">=3.9",
    "summary": "Budo Systems is a martial arts school management system. This module is the Budo Systems Pytest Plugin.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16851230,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59912eee0328495587d38edd18960c118f57c3a45022298705d75f845827eb66",
          "md5": "558c227901e0b7c769ebe0514fd2e0eb",
          "sha256": "ab5be755b1f1d5e270e6b7156f89ccf413da44d6383667eadbcd3aae8f6dcf8b"
        },
        "downloads": -1,
        "filename": "pytest_budosystems-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "558c227901e0b7c769ebe0514fd2e0eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12497,
        "upload_time": "2023-01-22T23:33:05",
        "upload_time_iso_8601": "2023-01-22T23:33:05.189473Z",
        "url": "https://files.pythonhosted.org/packages/59/91/2eee0328495587d38edd18960c118f57c3a45022298705d75f845827eb66/pytest_budosystems-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b64c1e736dfc5a92a23b07c62071856a637258cca51523797001e5e5e87e90cf",
          "md5": "63b2426eef002e32dd132606eb77944e",
          "sha256": "d4a1ec2045b3db362e0b321410cf5e344c130c2e734367a07f73124fbcf16ef4"
        },
        "downloads": -1,
        "filename": "pytest-budosystems-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "63b2426eef002e32dd132606eb77944e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 22883,
        "upload_time": "2023-01-22T23:33:07",
        "upload_time_iso_8601": "2023-01-22T23:33:07.000298Z",
        "url": "https://files.pythonhosted.org/packages/b6/4c/1e736dfc5a92a23b07c62071856a637258cca51523797001e5e5e87e90cf/pytest-budosystems-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "555145a5ed90dcaf3a3d8f50ad27575f89f537adc7520dfa712f639e269dcba1",
          "md5": "569819931a8c4858a5bfc1e7e07c67ac",
          "sha256": "dcc9a90833c4680145e4a72b30ee6019eb0bf65791e06c5a26fdba9dd14c4047"
        },
        "downloads": -1,
        "filename": "pytest_budosystems-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "569819931a8c4858a5bfc1e7e07c67ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13146,
        "upload_time": "2023-02-14T03:43:43",
        "upload_time_iso_8601": "2023-02-14T03:43:43.418041Z",
        "url": "https://files.pythonhosted.org/packages/55/51/45a5ed90dcaf3a3d8f50ad27575f89f537adc7520dfa712f639e269dcba1/pytest_budosystems-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4749d5d379b8171986f2b90680e0c45f73d054412892794d9707f96b51289d0b",
          "md5": "248252c0592fe661ec95bdd884a90e6a",
          "sha256": "bd9a69617bbae7e0c49965d1923f0b9f81812e0a71214033c59b0dfd89309a10"
        },
        "downloads": -1,
        "filename": "pytest-budosystems-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "248252c0592fe661ec95bdd884a90e6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 82123,
        "upload_time": "2023-02-14T03:43:45",
        "upload_time_iso_8601": "2023-02-14T03:43:45.046941Z",
        "url": "https://files.pythonhosted.org/packages/47/49/d5d379b8171986f2b90680e0c45f73d054412892794d9707f96b51289d0b/pytest-budosystems-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "555145a5ed90dcaf3a3d8f50ad27575f89f537adc7520dfa712f639e269dcba1",
        "md5": "569819931a8c4858a5bfc1e7e07c67ac",
        "sha256": "dcc9a90833c4680145e4a72b30ee6019eb0bf65791e06c5a26fdba9dd14c4047"
      },
      "downloads": -1,
      "filename": "pytest_budosystems-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "569819931a8c4858a5bfc1e7e07c67ac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 13146,
      "upload_time": "2023-02-14T03:43:43",
      "upload_time_iso_8601": "2023-02-14T03:43:43.418041Z",
      "url": "https://files.pythonhosted.org/packages/55/51/45a5ed90dcaf3a3d8f50ad27575f89f537adc7520dfa712f639e269dcba1/pytest_budosystems-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4749d5d379b8171986f2b90680e0c45f73d054412892794d9707f96b51289d0b",
        "md5": "248252c0592fe661ec95bdd884a90e6a",
        "sha256": "bd9a69617bbae7e0c49965d1923f0b9f81812e0a71214033c59b0dfd89309a10"
      },
      "downloads": -1,
      "filename": "pytest-budosystems-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "248252c0592fe661ec95bdd884a90e6a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 82123,
      "upload_time": "2023-02-14T03:43:45",
      "upload_time_iso_8601": "2023-02-14T03:43:45.046941Z",
      "url": "https://files.pythonhosted.org/packages/47/49/d5d379b8171986f2b90680e0c45f73d054412892794d9707f96b51289d0b/pytest-budosystems-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}