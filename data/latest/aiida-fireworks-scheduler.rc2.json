{
  "info": {
    "author": "Bonan Zhu",
    "author_email": "zhubonan@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AiiDA",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python"
    ],
    "description": "[![Build Status](https://github.com/zhubonan/aiida-fireworks-scheduler/workflows/ci/badge.svg?branch=master)](https://github.com/zhubonan/aiida-fireworks-scheduler/actions)\n[![Coverage Status](https://coveralls.io/repos/github/zhubonan/aiida-fireworks-scheduler/badge.svg?branch=master)](https://coveralls.io/github/zhubonan/aiida-fireworks-scheduler?branch=master)\n[![Docs status](https://readthedocs.org/projects/aiida-fireworks-scheduler/badge)](http://aiida-fireworks-scheduler.readthedocs.io/)\n[![PyPI version](https://badge.fury.io/py/aiida-fireworks-scheduler.svg)](https://badge.fury.io/py/aiida-fireworks-scheduler)\n\n# aiida-fireworks-scheduler\n\nAiiDA plugin for using `fireworks` as the execution engine for `CalcJobProcess`.\n\nThe main advantage of using the `FwScheduler`, as provided in this plugin, compared to the standard AiiDA scheduler plugins is that it allows more flexible job placement.\nFor example, your may be forced to submit very large jobs to the cluster (or simply such jobs goes through the queue faster!),\nor that the cluster has a strict limit on the number of jobs that can be in the queue.\nUsing `FwScheduler`, a single allocation of the resources from the scheduler (SGE, PBSpro, SLURM etc.) can be used to run multiple AiiDA `CalcJob`s in serial or in parallel, depending on the user configuration.\nIn addition, AiiDA jobs can be run along side other workflows in fireworks.\n\n\n## Repository contents\n\n* [`.github/`](.github/): [Github Actions](https://github.com/features/actions) configuration\n  * [`ci.yml`](.github/workflows/ci.yml): runs tests, checks test coverage and builds documentation at every new commit\n  * [`publish-on-pypi.yml`](.github/workflows/publish-on-pypi.yml): automatically deploy git tags to PyPI - just generate a [PyPI API token](https://pypi.org/help/#apitoken) for your PyPI account and add it to the `pypi_token` secret of your github repository\n* [`aiida_fireworks_scheduler/`](aiida_fireworks_scheduler/): The main source code of the plugin package\n  * [`fwscheduler.py`](aiida_fireworks_scheduler/fwscheduler.py): A new `FWScheduler` class.\n  * [`scripts/arlauncher.py`](aiida_fireworks_scheduler/scripts/arlaunch_run.py): A special `rlaunch` script for launching jobs respecting the walltime limits.\n  * [`jobs.py`](aiida_fireworks_scheduler/jobs.py): Specialised `AiiDAJobFirework` for running AiiDA prepared jobs.\n  * [`fworker.py`](aiida_fireworks_scheduler/fworker.py): Specialised `AiiDAFWorker` to generate query for selecting appropriate jobs from the FireServer.\n* [`docs/`](docs/): A documentation template ready for publication on [Read the Docs](http://aiida-diff.readthedocs.io/en/latest/)\n* [`examples/`](examples/): An example of how to submit a calculation using this plugin\n* [`tests/`](tests/): Basic regression tests using the [pytest](https://docs.pytest.org/en/latest/) framework (submitting a calculation, ...). Install `pip install -e .[testing]` and run `pytest`.\n* [`.coveragerc`](.coveragerc): Configuration of [coverage.py](https://coverage.readthedocs.io/en/latest) tool reporting which lines of your plugin are covered by tests\n* [`.gitignore`](.gitignore): Telling git which files to ignore\n* [`.pre-commit-config.yaml`](.pre-commit-config.yaml): Configuration of [pre-commit hooks](https://pre-commit.com/) that sanitize coding style and check for syntax errors. Enable via `pip install -e .[pre-commit] && pre-commit install`\n* [`.readthedocs.yml`](.readthedocs.yml): Configuration of documentation build for [Read the Docs](https://readthedocs.org/)\n* [`LICENSE`](LICENSE): License for your plugin\n* [`MANIFEST.in`](MANIFEST.in): Configure non-Python files to be included for publication on [PyPI](https://pypi.org/)\n* [`README.md`](README.md): This file\n* [`conftest.py`](conftest.py): Configuration of fixtures for [pytest](https://docs.pytest.org/en/latest/)\n* [`pytest.ini`](pytest.ini): Configuration of [pytest](https://docs.pytest.org/en/latest/) test discovery\n* [`setup.json`](setup.json): Plugin metadata for registration on [PyPI](https://pypi.org/) and the [AiiDA plugin registry](https://aiidateam.github.io/aiida-registry/) (including entry points)\n* [`setup.py`](setup.py): Installation script for pip / [PyPI](https://pypi.org/)\n\n## Features\n\n* `FWScheduler` scheduler plugin to submit jobs to LaunchPad managed by `fireworks`.\n\n* `arlaunch` command for launching jobs on the cluster machine.\n\n* `verdi data fireworks-scheduler` command line tool for duplicating existing `Computer`/`Cold` for switching to `FwScheduler`.\n\n## Installation\n\nOn the local machine where AiiDA is installed:\n\n```shell\npip install aiida-fireworks-scheduler[local]\n```\n\nOn the remote machine where jobs to be launched:\n\n```shell\npip install aiida-fireworks-scheduler\n```\n\n## Usage\n\nSimply create a new computer using `verdi computer setup` and select the `fw` scheduler.\nConfigure your `fireworks` configuration following the guide [here](https://materialsproject.github.io/fireworks/config_tutorial.html).\n\nNote that you must configure the `LAUNCHPAD_LOC` setting in the file as defined by the `FW_CONFIG_FILE` environment variable to point to your `my_launchpad.yaml` file on BOTH the local and remote machines. On the local machine, it will be picked up by the daemon.\n\nIn addition, on the remote machine, setup your `my_fworker.yaml` with special directives for identifying the computer and username. These files can be generated using:\n\n```shell\nverdi data fireworks-scheduler generate-worker -Y COMPUTER -mpinp NUM_MPI_PROCESSORS\n```\n\nNote that each *worker\" can only launch jobs of a particular size (number of MPI processors). But you can always combine multiple workers in one or more cluster jobs.\n\nAt runtime, jobs needs to be launched with the `arlaunch` command on the remote machine.\n\n### Adding walltime selectors for standard fireworks jobs\n\nStandard fireworks jobs can also be selected based on the requested walltime using `arlaunch`.\nIf a job has `spec._walltime_seconds` key, it will only be selected to run if there is\nsufficient time left.\nHowever, unlike AiiDA jobs, this walltime limit is not enforced, and the launch can proceed\neven if the requested seconds have elapsed.\n\n## Development\n\n```shell\ngit clone https://github.com/zhubonan/aiida-fireworks-scheduler .\ncd aiida-fireworks-scheduler\npip install -e .[pre-commit,testing]  # install extra dependencies\npre-commit install  # install pre-commit hooks\npytest -v  # discover and run all tests\n```\n\nSee the [developer guide](http://aiida-fireworks-scheduler.readthedocs.io/en/latest/developer_guide/index.html) for more information.\n\n## License\n\nMIT\n\n## Contact\n\nzhubonan@outlook.com\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zhubonan/aiida-fireworks-scheduler",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiida-fireworks-scheduler",
    "package_url": "https://pypi.org/project/aiida-fireworks-scheduler/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiida-fireworks-scheduler/",
    "project_urls": {
      "Homepage": "https://github.com/zhubonan/aiida-fireworks-scheduler"
    },
    "release_url": "https://pypi.org/project/aiida-fireworks-scheduler/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AiiDA plugin to allow using `fireworks` as the execution engine for `CalcJob`.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10542771,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc372b8a29d4d509b495908aecfd0a15e7870cbc6175fb6bb1d35ccbadcde66d",
          "md5": "6064a0cd7f1a966c853872e13d15ba00",
          "sha256": "04501063e97743a69ccbcaa37c07a9562ef1ceb149f925e586059930d80ef6dd"
        },
        "downloads": -1,
        "filename": "aiida-fireworks-scheduler-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "6064a0cd7f1a966c853872e13d15ba00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19513,
        "upload_time": "2021-06-02T20:38:19",
        "upload_time_iso_8601": "2021-06-02T20:38:19.569282Z",
        "url": "https://files.pythonhosted.org/packages/bc/37/2b8a29d4d509b495908aecfd0a15e7870cbc6175fb6bb1d35ccbadcde66d/aiida-fireworks-scheduler-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34baa5b495fc19f299bf02383ef04c6c7f0785e1cc1643317b29b73945285e76",
          "md5": "a2df2c795f2c2b104e93ab0c8ed30712",
          "sha256": "5950feb87dfd2497ffc36192d9e360b18ab3054af6066265394704488e181813"
        },
        "downloads": -1,
        "filename": "aiida-fireworks-scheduler-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a2df2c795f2c2b104e93ab0c8ed30712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18604,
        "upload_time": "2021-06-02T20:48:12",
        "upload_time_iso_8601": "2021-06-02T20:48:12.562659Z",
        "url": "https://files.pythonhosted.org/packages/34/ba/a5b495fc19f299bf02383ef04c6c7f0785e1cc1643317b29b73945285e76/aiida-fireworks-scheduler-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34baa5b495fc19f299bf02383ef04c6c7f0785e1cc1643317b29b73945285e76",
        "md5": "a2df2c795f2c2b104e93ab0c8ed30712",
        "sha256": "5950feb87dfd2497ffc36192d9e360b18ab3054af6066265394704488e181813"
      },
      "downloads": -1,
      "filename": "aiida-fireworks-scheduler-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a2df2c795f2c2b104e93ab0c8ed30712",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18604,
      "upload_time": "2021-06-02T20:48:12",
      "upload_time_iso_8601": "2021-06-02T20:48:12.562659Z",
      "url": "https://files.pythonhosted.org/packages/34/ba/a5b495fc19f299bf02383ef04c6c7f0785e1cc1643317b29b73945285e76/aiida-fireworks-scheduler-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}