{
  "info": {
    "author": "HansBug",
    "author_email": "hansbug@buaa.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pyspj \n\n[![PyPI](https://img.shields.io/pypi/v/pyspj)](https://pypi.org/project/pyspj/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyspj)](https://pypi.org/project/pyspj/)\n![Loc](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HansBug/20b3613a7b38335548c65f11f60e4a2d/raw/loc.json)\n![Comments](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/HansBug/20b3613a7b38335548c65f11f60e4a2d/raw/comments.json)\n\n[![Docs Deploy](https://github.com/HansBug/pyspj/workflows/Docs%20Deploy/badge.svg)](https://github.com/HansBug/pyspj/actions?query=workflow%3A%22Docs+Deploy%22)\n[![Code Test](https://github.com/HansBug/pyspj/workflows/Code%20Test/badge.svg)](https://github.com/HansBug/pyspj/actions?query=workflow%3A%22Code+Test%22)\n[![Badge Creation](https://github.com/HansBug/pyspj/workflows/Badge%20Creation/badge.svg)](https://github.com/HansBug/pyspj/actions?query=workflow%3A%22Badge+Creation%22)\n[![Package Release](https://github.com/HansBug/pyspj/workflows/Package%20Release/badge.svg)](https://github.com/HansBug/pyspj/actions?query=workflow%3A%22Package+Release%22)\n[![codecov](https://codecov.io/gh/HansBug/pyspj/branch/main/graph/badge.svg?token=XJVDP4EFAT)](https://codecov.io/gh/HansBug/pyspj)\n\n[![GitHub stars](https://img.shields.io/github/stars/HansBug/pyspj)](https://github.com/HansBug/pyspj/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/HansBug/pyspj)](https://github.com/HansBug/pyspj/network)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/m/HansBug/pyspj)\n[![GitHub issues](https://img.shields.io/github/issues/HansBug/pyspj)](https://github.com/HansBug/pyspj/issues)\n[![GitHub pulls](https://img.shields.io/github/issues-pr/HansBug/pyspj)](https://github.com/HansBug/pyspj/pulls)\n[![Contributors](https://img.shields.io/github/contributors/HansBug/pyspj)](https://github.com/HansBug/pyspj/graphs/contributors)\n[![GitHub license](https://img.shields.io/github/license/HansBug/pyspj)](https://github.com/HansBug/pyspj/blob/master/LICENSE)\n\n\nA light-weighted special support utils.\n\n## Installation\n\nYou can simply install it with `pip` command line from the official PyPI site.\n\n```\npip install pyspj\n```\n\nFor more information about installation, you can refer to the [installation guide](https://hansbug.github.io/pyspj/main/tutorials/installation/index.html).\n\n\n\n## Quick Start\n\n### Use with CLI\n\nYou can use `pyspj` CLI to judge the running result, the help information is as follows\n\n```\nUsage: pyspj [OPTIONS]\n\nOptions:\n  -v, --version                   Show package's version information.\n  -i, --input TEXT                Input content of special judge.\n  -o, --output TEXT               Output content of special judge\n  -I, --input_file FILE           Input file of special judge (if -i is given,\n                                  this will be ignored).\n\n  -O, --output_file FILE          Output file of special judge (if -o is\n                                  given, this will be ignored).\n\n  -t, --type [free|simple|continuity]\n                                  Type of the final result.  [default: free]\n  -s, --spj TEXT                  Special judge script to be used.  [required]\n  -p, --pretty                    Use pretty mode to print json result.\n  -h, --help                      Show this message and exit.\n```\n\nHere is a simple example, a spj file named`test_spj.py`\n\n```python\nimport io\n\n\ndef spj_func(stdin: io.StringIO, stdout: io.StringIO):\n    inputs = [int(item.strip()) for item in stdin.read().strip().split(' ') if item]\n    _correct_sum = sum(inputs)\n\n    outputs = stdout.read().strip().split(' ', maxsplit=2)\n    if len(outputs) >= 1:\n        _result = int(outputs[0])\n    else:\n        return False, 'No output found.'\n\n    if _result == _correct_sum:\n        return True, 'Correct result.', 'Oh yeah, well done ^_^.'\n    else:\n        return False, 'Result {correct} expected but {actual} found.'.format(\n            correct=repr(_correct_sum), actual=repr(_result)\n        )\n\n\n__spj__ = spj_func\n\n```\n\nYou can use CLI to judge the result\n\n```shell\n# input: 1 2 3 4 5\n# output: 15\npyspj -i '1 2 3 4 5' -o '15' -s test_spj:spj_func\n```\n\nIt means import special judge function `spj_func` from package `test_spj`, the output result should be\n\n```\n{\"correctness\": true, \"detail\": \"Oh yeah, well done ^_^.\", \"message\": \"Correct result.\"}\n```\n\nBesides, a simpler command line can be used due to the definition of `__spj__` variable\n\n```shell\npyspj -i '1 2 3 4 5' -o '15' -s test_spj\n```\n\nThis command is equivalent to the above command.\n\n\n\n### Input & Output from File\n\nWhen the scale of input or output is huge, you can load them from `-I` and `-E` option.\n\nHere is an exmaple, a input file named`test_input.txt`\n\n```\n1 2 3 4 5\n```\n\nOutput file named`test_output.txt`\n\n```\n15\n```\n\nYou can use CLI to judge the result in the txt files\n\n```shell\npyspj -I test_input.txt -O test_output.txt -s test_spj\n```\n\nThe output should be\n\n```\n{\"correctness\": true, \"detail\": \"Oh yeah, well done ^_^.\", \"message\": \"Correct result.\"}\n```\n\nActually, `-I` and `-o` can be used together, so are the `-i` and `-E` options. There will be nothing different.\n\n\n\n### Pretty Json Output\n\nIf you need pretty print the result (especially when you are debugging), you can use `-p` option.\n\n```shell\npyspj -i '1 2 3 4 5' -o '15' -s test_spj -p\n```\n\nThe output should be\n\n```json\n{\n    \"correctness\": true,\n    \"detail\": \"Oh yeah, well done ^_^.\",\n    \"message\": \"Correct result.\"\n}\n```\n\n\n\n### Additional Arguments\n\nSometimes, you can use additional arguments to support more complex cases.\n\nSuch as the special judge function below\n\n```python\nimport io\n\n\ndef spj_func(stdin: io.StringIO, stdout: io.StringIO, fxxk=None):\n    inputs = [int(item.strip()) for item in stdin.read().strip().split(' ') if item]\n    _correct_sum = sum(inputs)\n\n    if not fxxk:\n        outputs = stdout.read().strip().split(' ', maxsplit=2)\n        if len(outputs) >= 1:\n            _result = int(outputs[0])\n        else:\n            return False, 'No output found.'\n\n        if _result == _correct_sum:\n            return True, 'Correct result.', 'Oh yeah, well done ^_^.'\n        else:\n            return False, 'Result {correct} expected but {actual} found.'.format(\n                correct=repr(_correct_sum), actual=repr(_result)\n            )\n    else:\n        return False, 'Result error because {value} detected in fxxk.'.format(value=repr(fxxk))\n\n\n__spj__ = spj_func\n\n```\n\nAn extra `fxxk` argument is used, so the following command line can be used to set the value of argument `fxxk` to `2` (string)\n\n```shell\npyspj -i '1 2 3 4 5' -o '15' -s test_spj -p -V fxxk=2\n```\n\nThe output should be\n\n```\n{\n    \"correctness\": false,\n    \"detail\": \"Result error because '2' detected in fxxk.\",\n    \"message\": \"Result error because '2' detected in fxxk.\"\n}\n```\n\nATTENTION:\n\n* **Addtional argument should has a default value**, otherwise when the value is not provided by command line, it will raise error.\n* **The default type of addtional arguments are string**, you need to convert it to the type you actually need in your special judge function.\n\n### Use Special Judge in Python\n\n`pyspj` can be used in native Python by importing package\n\n```python\nfrom pyspj import execute_spj_from_string\n\nif __name__ == '__main__':\n    result = execute_spj_from_string('test_spj', '1 2 3 4 5', '15')\n    print(result.to_json())\n\n```\n\nThe output should be\n\n```\n{'correctness': True, 'message': 'Correct result.', 'detail': 'Oh yeah, well done ^_^.'}\n```\n\nFile input or file output are supported as well, like the following code\n\n```python\nfrom pyspj import execute_spj_from_file\n\nif __name__ == '__main__':\n    result = execute_spj_from_file('test_spj', 'test_input.txt', 'test_output.txt')\n    print(result.to_json())\n\n```\n\nThe output should be the same as the abovementioned code.\n\nAddtional arguments are also supported like the CLI.\n\n```python\nimport codecs\nimport io\n\nfrom pyspj import execute_spj\n\nif __name__ == '__main__':\n    with codecs.open('test_input.txt') as stdin, \\\n            io.StringIO('15') as stdout:\n        result = execute_spj('test_spj', stdin, stdout, arguments={'fxxk': 2})\n    print(result.to_json())\n\n```\n\nThe output should be\n\n```\n{'correctness': False, 'message': 'Result error because 2 detected in fxxk.', 'detail': 'Result error because 2 detected in fxxk.'}\n```\n\n\n\n### Make My Special Judge Runnable\n\nYou can add entry for your special judge function by using `pyspj_entry` function and call it in `__main___`\n\n```python\nimport io\n\nfrom pyspj import pyspj_entry\n\n\ndef spj_func(stdin: io.StringIO, stdout: io.StringIO):\n    inputs = [int(item.strip()) for item in stdin.read().strip().split(' ') if item]\n    _correct_sum = sum(inputs)\n\n    outputs = stdout.read().strip().split(' ', maxsplit=2)\n    if len(outputs) >= 1:\n        _result = int(outputs[0])\n    else:\n        return False, 'No output found.'\n\n    if _result == _correct_sum:\n        return True, 'Correct result.', 'Oh yeah, well done ^_^.'\n    else:\n        return False, 'Result {correct} expected but {actual} found.'.format(\n            correct=repr(_correct_sum), actual=repr(_result)\n        )\n\n\nif __name__ == '__main__':\n    pyspj_entry('test_spj', spj_func, version='0.1.1')()\n\n```\n\nSave the code above to `test_spj.py`, and then you can run it like pyspj cli.\n\n```shell\npython test_spj.py -h\n```\n\nThe output should be\n\n```\nUsage: test_spj.py [OPTIONS]\n\n  Test_spj - test a pair of given input and output.\n\nOptions:\n  -v, --version           Show special judge's version information.\n  -i, --input TEXT        Input content of special judge.\n  -o, --output TEXT       Output content of special judge\n  -I, --input_file FILE   Input file of special judge (if -i is given, this\n                          will be ignored).\n  -O, --output_file FILE  Output file of special judge (if -o is given, this\n                          will be ignored).\n  -V, --value TEXT        Attached values for special judge (do not named as\n                          \"stdin\" or \"stdout\").\n  -p, --pretty            Use pretty mode to print json result.\n  -h, --help              Show this message and exit.\n```\n\nAnd test the input\n\n```shell\npython test_spj.py -i '1 2 3 4 5' -o 15\n```\n\n```text\n{\"correctness\": true, \"detail\": \"Oh yeah, well done ^_^.\", \"message\": \"Correct result.\"}\n```\n\n\n\nBesides, if the target environment does not have python, you can build this script with [pyinstaller](https://github.com/pyinstaller/pyinstaller)\n\n```shell\npip install pyspj[build]\npyinstaller -D -F -n test_spj -c test_spj.py\n```\n\nA standalone executable file will be created.\n\n## License\n\n`pyspj` released under the Apache 2.0 license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansbug/pyspj",
    "keywords": "Python library which can build special judge for running result judging.",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyspj",
    "package_url": "https://pypi.org/project/pyspj/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyspj/",
    "project_urls": {
      "Homepage": "https://github.com/hansbug/pyspj"
    },
    "release_url": "https://pypi.org/project/pyspj/0.1.0/",
    "requires_dist": [
      "click (>=7.1.0)",
      "colorama (~=0.4)",
      "hbutils (>=0.2.0)",
      "enum-tools (>=0.8.0)",
      "pyinstaller (<5,>=4.7) ; extra == 'build'",
      "sphinx (~=3.2.0) ; extra == 'doc'",
      "sphinx-rtd-theme (~=0.4.3) ; extra == 'doc'",
      "enum-tools ; extra == 'doc'",
      "sphinx-toolbox ; extra == 'doc'",
      "plantumlcli (>=0.0.4) ; extra == 'doc'",
      "packaging ; extra == 'doc'",
      "sphinx-multiversion (~=0.2.4) ; extra == 'doc'",
      "where (~=1.0.2) ; extra == 'doc'",
      "easydict (<2,>=1.7) ; extra == 'doc'",
      "pyinstaller (<5,>=4.7) ; extra == 'doc'",
      "coverage (>=5) ; extra == 'test'",
      "pytest (~=6.2.5) ; extra == 'test'",
      "pytest-cov (~=3.0.0) ; extra == 'test'",
      "pytest-mock (~=3.6.1) ; extra == 'test'",
      "pytest-rerunfailures (~=10.2) ; extra == 'test'",
      "pytest-timeout (~=2.0.2) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Python library which can build special judge for running result judging.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12755803,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f957df3ee02755cb4cfcc67e95dfc7878b2b8172218352fbecde333e2ee98bd",
          "md5": "efd24c6513cef6dddfca3fbd02acdf72",
          "sha256": "2800df3d785b33c07ebb25d9cd668ee4cef7a3d3875b4f56eb682f57d6ba3ab9"
        },
        "downloads": -1,
        "filename": "pyspj-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efd24c6513cef6dddfca3fbd02acdf72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21327,
        "upload_time": "2022-02-01T15:04:20",
        "upload_time_iso_8601": "2022-02-01T15:04:20.824545Z",
        "url": "https://files.pythonhosted.org/packages/3f/95/7df3ee02755cb4cfcc67e95dfc7878b2b8172218352fbecde333e2ee98bd/pyspj-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10a783396210b4da6663a802b5b8afa4141a3616182fecf383eb75c8f5e14b12",
          "md5": "ec256a76812fe82a326955210a991528",
          "sha256": "a401a44424c0c7bc9020a0bb5735179b834e86f3cecf995f24bdb1e8c4978fa3"
        },
        "downloads": -1,
        "filename": "pyspj-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec256a76812fe82a326955210a991528",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19320,
        "upload_time": "2022-02-01T15:04:22",
        "upload_time_iso_8601": "2022-02-01T15:04:22.451244Z",
        "url": "https://files.pythonhosted.org/packages/10/a7/83396210b4da6663a802b5b8afa4141a3616182fecf383eb75c8f5e14b12/pyspj-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f957df3ee02755cb4cfcc67e95dfc7878b2b8172218352fbecde333e2ee98bd",
        "md5": "efd24c6513cef6dddfca3fbd02acdf72",
        "sha256": "2800df3d785b33c07ebb25d9cd668ee4cef7a3d3875b4f56eb682f57d6ba3ab9"
      },
      "downloads": -1,
      "filename": "pyspj-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efd24c6513cef6dddfca3fbd02acdf72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21327,
      "upload_time": "2022-02-01T15:04:20",
      "upload_time_iso_8601": "2022-02-01T15:04:20.824545Z",
      "url": "https://files.pythonhosted.org/packages/3f/95/7df3ee02755cb4cfcc67e95dfc7878b2b8172218352fbecde333e2ee98bd/pyspj-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10a783396210b4da6663a802b5b8afa4141a3616182fecf383eb75c8f5e14b12",
        "md5": "ec256a76812fe82a326955210a991528",
        "sha256": "a401a44424c0c7bc9020a0bb5735179b834e86f3cecf995f24bdb1e8c4978fa3"
      },
      "downloads": -1,
      "filename": "pyspj-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ec256a76812fe82a326955210a991528",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19320,
      "upload_time": "2022-02-01T15:04:22",
      "upload_time_iso_8601": "2022-02-01T15:04:22.451244Z",
      "url": "https://files.pythonhosted.org/packages/10/a7/83396210b4da6663a802b5b8afa4141a3616182fecf383eb75c8f5e14b12/pyspj-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}