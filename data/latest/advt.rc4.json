{
  "info": {
    "author": "WindF98",
    "author_email": "wwj98713@163.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Attack & Defence on Video Tasks\n\n## Overview\n**ADVT** (Attack Defence on Video Tasks) is an adversarial attack/defence toolbox open source library based on Pytorch.\nThis repository mainly implements some adversarial attack & defence algorithms and provides some video processing apis.  \n\n![demo](https://github.com/WindFantasy98/ADVT/blob/main/docs/images/demo.png)\n\n\n## Features\nThe ADVT library has five functional features, which cover the whole process:  \n- Preprocess  \n- Attack  \n- Defence  \n- Record  \n- Visualization  \n\n## Attack\nThis module implements attack methods. All attack methods are from top computer conferences in recent 5 years:  \n- [x] FGSM [Explaining and harnessing adversarial examples]\n- [x] BIM [Adversarial examples in the physical world]\n- [x] MIM [Boosting adversarial attacks with momentum(CVPR-18)]\n- [x] DeepFool [DeepFool: A simple and accurate method to fool deep neural networks(CVPR-16)]\n- [x] DIM [Improving Transferability of Adversarial Examples with Input Diversity(CVPR-18)]\n- [x] C&W [Towards evaluating the robustness of neural networks(IEEE SP-17)]\n- [x] Universal [Universal adversarial perturbations(CVPR-17)]\n- [ ] ZOO [ZOO: Zeroth Order Optimization Based Black-box Attacks to Deep Neural Networks without Training Substitute Models(ACMAIS)]\n- [x] Sparse ADV [Sparse Adversarial Perturbations for Videos(AAAI-19)]\n\n## Defence\nThis module implements defence methods.\n- [x] Bit-depth Reduction\n- [x] Total Variance Minimization\n- [ ] Image Quilting  \n- [x] ComDefend [ComDefend: An Efficient Image Compression Model to Defend Adversarial Examples(CVPR-18)]\n- [x] Randomization [Mitigating Adversarial Effects Through Randomization(ICLR-18)]\n\n## Evaluation & Visualization\nADVT provides some useful evaluation & visualization tools.  \n**Evaluation Metric:**\n- [ ] PSNR\n- [ ] SSMI\n- [ ] mAP\n\n**Visualization:**\n- [x] Video-to-Frames\n- [x] Frames-to-Video\n- [x] Changed-Pixel\n\n## Installation\nBefore installation, make sure you install fellow requirements.  \n```shell script\nnumpy==1.18.5\nopencv-python==4.4.0.42\ntorch==1.7.0\nurllib==1.26.4\n```\nYou can install advt through pypi or build from source code.  \n**1. from pypi**\n```shell script\npip install advt\n```\n**2. from source code**\n```shell script\ngit clone https://github.com/WindFantasy98/ADVT.git\npip install -e .\n```\n\n## Usage\n1. attack example\n```python\n# python3.7 torch1.7\nimport torch\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nfrom torch.utils.data import DataLoader\nfrom advt.model.cnn import CNN\nfrom advt.attack import FGSM\n\nPATH_PARAMETERS = 'tests/cnn_model.pth'\n\ndef main():\n    transform = transforms.Compose([transforms.ToTensor()])\n    t = transforms.Compose([transforms.ToPILImage()])\n    test_dataset = datasets.CIFAR10(root='/data', train=False, transform=transform, download=True)\n    test_loader = DataLoader(dataset=test_dataset, batch_size=1, shuffle=False)\n    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n    net = CNN()\n    net.load_state_dict(torch.load(PATH_PARAMETERS))\n    net = net.to(device)\n\n    fgsm = FGSM(net, device)\n\n    attack_succ = 0\n    total_num = 0\n\n    for i, (img, lbl) in enumerate(test_loader):\n        img, lbl = img.to(device), lbl.to(device)\n        adv_img = fgsm.attack(img, lbl)\n\n        output = net(adv_img)\n        _, pred_indice = output.max(1)\n\n        total_num += len(lbl)\n        attack_succ += (pred_indice == lbl).sum().item()\n        if (i + 1) % 20 == 0:\n            print('batch {}:'.format((i + 1) // 20),\n                  'total tested number: {}, correct number: {}'.format(total_num, attack_succ))\n\nif __name__ == '__main__':\n    main()\n```\n\n2. defence example\n```python\n# python3.7 torch1.7\nimport torch\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nfrom torch.utils.data import DataLoader\nfrom advt.model.cnn import CNN\nfrom advt.attack import DeepFool\nfrom advt.defence import Randomization\n\nPATH_PARAMETERS = 'tests/cnn_model.pth'\n\ndef main():\n    # initialize dataset\n    transform = transforms.Compose([transforms.ToTensor()])\n    t = transforms.Compose([transforms.ToPILImage()])\n    test_dataset = datasets.CIFAR10(root='/data', train=False, transform=transform, download=True)\n    test_loader = DataLoader(dataset=test_dataset, batch_size=1, shuffle=False)\n    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n    # load victim model\n    net = CNN()\n    net.load_state_dict(torch.load(PATH_PARAMETERS))\n    net = net.to(device)\n\n    # initialize attack method\n    df = DeepFool(net, device)\n    # initialize defend method\n    rand_defend = Randomization(net, device)\n\n    # initialize indicator\n    attack_succ = 0\n    total_num = 0\n\n    # start attack\n    for i, (img, lbl) in enumerate(test_loader):\n        img, lbl = img.to(device), lbl.to(device)\n        adv_img = df.attack(img, lbl)  # get adv sample\n\n        output = rand_defend.defend(adv_img)  # get processed sample\n        _, pred_indice = output.max(1)\n\n        total_num += len(lbl)\n        attack_succ += (pred_indice == lbl).sum().item()\n        if (i + 1) % 20 == 0:\n            print('batch {}:'.format((i + 1) // 20),\n                  'total tested number: {}, correct number: {}'.format(total_num, attack_succ))\n\nif __name__ == '__main__':\n    main()\n```\n\nThis repo is still under maintenance. For more information, please contact with me.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WindFantasy98/ADVT",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "advt",
    "package_url": "https://pypi.org/project/advt/",
    "platform": "",
    "project_url": "https://pypi.org/project/advt/",
    "project_urls": {
      "Homepage": "https://github.com/WindFantasy98/ADVT"
    },
    "release_url": "https://pypi.org/project/advt/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A library for Attack & Defence on Video Task",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10648686,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec645715c0e79b4931b982dde1f384998101c8fd6aaac1a0faab5d00ea065699",
          "md5": "98ce6c90f2897434e79e01ad8a1e94c5",
          "sha256": "c5f8d7bd52a0d23241634202579e98ca8bf271dc31097201e03bb3a61c653315"
        },
        "downloads": -1,
        "filename": "advt-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98ce6c90f2897434e79e01ad8a1e94c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 65856,
        "upload_time": "2021-05-26T05:01:00",
        "upload_time_iso_8601": "2021-05-26T05:01:00.895741Z",
        "url": "https://files.pythonhosted.org/packages/ec/64/5715c0e79b4931b982dde1f384998101c8fd6aaac1a0faab5d00ea065699/advt-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33996b83bd971e8ff739548c9921634902bec4b426b9089fd85238bb1cda1565",
          "md5": "7f794ec608375ae504a123a1a2b5d583",
          "sha256": "b57916bdc9b34a5039dcbd741f513c6aec28018218eacd64285d9cd0aa62a8ef"
        },
        "downloads": -1,
        "filename": "advt-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f794ec608375ae504a123a1a2b5d583",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31236,
        "upload_time": "2021-05-26T05:01:02",
        "upload_time_iso_8601": "2021-05-26T05:01:02.979512Z",
        "url": "https://files.pythonhosted.org/packages/33/99/6b83bd971e8ff739548c9921634902bec4b426b9089fd85238bb1cda1565/advt-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10be0683eac9390acdb554968a1424a2f9f11ecb6bbf396fc9da0254a3073f71",
          "md5": "b3d931cbb8a557ecc06883c6e426ae19",
          "sha256": "93ffbc1ace43a063f3dbb21e65750e29cca1c23d8e830fbdbe617fbaae5ce532"
        },
        "downloads": -1,
        "filename": "advt-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3d931cbb8a557ecc06883c6e426ae19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 65851,
        "upload_time": "2021-05-26T05:31:01",
        "upload_time_iso_8601": "2021-05-26T05:31:01.729054Z",
        "url": "https://files.pythonhosted.org/packages/10/be/0683eac9390acdb554968a1424a2f9f11ecb6bbf396fc9da0254a3073f71/advt-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e460696f475d283614880b570e308b7b7f1a7dcd7524a4a1c88c521ffa47b5d0",
          "md5": "daaa7195bd3dc32a264cf4f404dd4ea3",
          "sha256": "29b7dff9c0caa13dcbdb28de38e5f6f7cc9193354166159dd8b2ef20ce7fe258"
        },
        "downloads": -1,
        "filename": "advt-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "daaa7195bd3dc32a264cf4f404dd4ea3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31226,
        "upload_time": "2021-05-26T05:31:03",
        "upload_time_iso_8601": "2021-05-26T05:31:03.490283Z",
        "url": "https://files.pythonhosted.org/packages/e4/60/696f475d283614880b570e308b7b7f1a7dcd7524a4a1c88c521ffa47b5d0/advt-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4b7e3c24dcc1ce5a767a1f495811b45c76374b7a1ffd91f3286798f076808bc",
          "md5": "35fc4bec5c674d2b219406e91105ab26",
          "sha256": "ec9d865476a86ec9f4473f832352ae1bdb216218152d1af79b847f35ead41c9a"
        },
        "downloads": -1,
        "filename": "advt-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35fc4bec5c674d2b219406e91105ab26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 65994,
        "upload_time": "2021-06-14T01:59:34",
        "upload_time_iso_8601": "2021-06-14T01:59:34.466013Z",
        "url": "https://files.pythonhosted.org/packages/c4/b7/e3c24dcc1ce5a767a1f495811b45c76374b7a1ffd91f3286798f076808bc/advt-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d211e00fab92f13fc4c3699c2055539065d32b134e03aeb89adb2e1e0d26d32",
          "md5": "67def811cc12252b12f4521e0706d85b",
          "sha256": "32a3b58fa12745fdf911bd2b45fc2c856e1edd58cf51b0ba27c8755bd1398fdc"
        },
        "downloads": -1,
        "filename": "advt-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67def811cc12252b12f4521e0706d85b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31425,
        "upload_time": "2021-06-14T01:59:36",
        "upload_time_iso_8601": "2021-06-14T01:59:36.344676Z",
        "url": "https://files.pythonhosted.org/packages/5d/21/1e00fab92f13fc4c3699c2055539065d32b134e03aeb89adb2e1e0d26d32/advt-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1686b0a727bed916060a2768a9f25f848bcbbfdea4a3009cd5a34e122e80446",
          "md5": "45f63370030fa85c05cf45b2d7694c18",
          "sha256": "1a06c526ad6a702c157254e0fdf08df5c041f8bba95b2e73645c01181c99dcd9"
        },
        "downloads": -1,
        "filename": "advt-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45f63370030fa85c05cf45b2d7694c18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 66025,
        "upload_time": "2021-06-15T02:05:20",
        "upload_time_iso_8601": "2021-06-15T02:05:20.211286Z",
        "url": "https://files.pythonhosted.org/packages/c1/68/6b0a727bed916060a2768a9f25f848bcbbfdea4a3009cd5a34e122e80446/advt-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1536e8ea6895781b58b5d98d28e8cea58f98714d843ad8115bb4feff008dc1f8",
          "md5": "df3899a27accdc45c3f7349587a31e5a",
          "sha256": "54f7411ab509497f764b50fe8963737bfa1261552c3923ca3d4d9c62b103cccf"
        },
        "downloads": -1,
        "filename": "advt-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "df3899a27accdc45c3f7349587a31e5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31454,
        "upload_time": "2021-06-15T02:05:22",
        "upload_time_iso_8601": "2021-06-15T02:05:22.105338Z",
        "url": "https://files.pythonhosted.org/packages/15/36/e8ea6895781b58b5d98d28e8cea58f98714d843ad8115bb4feff008dc1f8/advt-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1686b0a727bed916060a2768a9f25f848bcbbfdea4a3009cd5a34e122e80446",
        "md5": "45f63370030fa85c05cf45b2d7694c18",
        "sha256": "1a06c526ad6a702c157254e0fdf08df5c041f8bba95b2e73645c01181c99dcd9"
      },
      "downloads": -1,
      "filename": "advt-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "45f63370030fa85c05cf45b2d7694c18",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 66025,
      "upload_time": "2021-06-15T02:05:20",
      "upload_time_iso_8601": "2021-06-15T02:05:20.211286Z",
      "url": "https://files.pythonhosted.org/packages/c1/68/6b0a727bed916060a2768a9f25f848bcbbfdea4a3009cd5a34e122e80446/advt-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1536e8ea6895781b58b5d98d28e8cea58f98714d843ad8115bb4feff008dc1f8",
        "md5": "df3899a27accdc45c3f7349587a31e5a",
        "sha256": "54f7411ab509497f764b50fe8963737bfa1261552c3923ca3d4d9c62b103cccf"
      },
      "downloads": -1,
      "filename": "advt-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "df3899a27accdc45c3f7349587a31e5a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 31454,
      "upload_time": "2021-06-15T02:05:22",
      "upload_time_iso_8601": "2021-06-15T02:05:22.105338Z",
      "url": "https://files.pythonhosted.org/packages/15/36/e8ea6895781b58b5d98d28e8cea58f98714d843ad8115bb4feff008dc1f8/advt-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}