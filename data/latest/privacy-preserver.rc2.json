{
  "info": {
    "author": "telesoho",
    "author_email": "telesoho@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# privacy-preserver\n\nThis module provides a simple tool for anonymizing a dataset using PySpark. Given a `pandas.dataframe` with relevant metadata mondrian_privacy_preserver generates an anonymized `pandas.dataframe`. This provides following privacy preserving techniques for the anonymization.\n\n- K Anonymity\n- L Diversity\n- T Closeness\n\n## Demo\n\nJupyter notebook for each of the following modules are included.\n\n- Mondrian Based Anonymity (Single User Anonymization included)\n- Clustering Based Anonymity\n- Differential Privacy\n\n## Requirements\n\n* Python\n\nPython versions above Python 3.6 and below Python 3.8 are recommended. The module is developed and tested on: \nPython 3.7.7 and pip 20.0.2. (It is better to avoid Python 3.8 as it has some compatibility issues with Spark)\n\n## Installation\n\n### Using pip\n\nUse `pip install privacy_preserver` to install library\n\n### using source code\n\nClone the repository to your PC and run `pip install .` to build and install the package.\n\n## Usage\n\nUsage of each module is described in the relevant section.\n\n### For Mondrian Anonymization and Clustering Anonymization\n\nYou'll need to construct a schema to get the anonymized `pandas.dataframe` dataframe.\nYou need to consider the column names and thier data types to construct this. Output of functions of the Mondrian and Clustering Anonymization is described in thier relevant sections. \n\nFollowing code snippet shows how to construct an example schema.\n\n```python\nimport pandas as pd\n\n#age, occupation - feature columns\n#income - sensitive column\n\nschema = [\n    \"age\", \n    \"occupation\",\n    \"income\",\n]\n```\n_______________________________________________________________________________________________________\n\n## Basic Mondrian Anoymizing\n\n\n### Requirements - Basic Mondrian Anonymize\n\n- Pandas. You can easily install it with `pip install pandas`.\n\n### K Anonymity\n\nThe `pandas.dataframe` you get after anonymizing will always contain a extra column `count` which indicates the number of similar rows.\nReturn type of all the non categorical columns will be string\nYou need to always consider the count column when constructing the schema. Count column is an integer type column.\n\n```python\nfrom privacy_preserver.mondrian_preserver import Preserver #requires pandas\n\n#df - pandas.dataframe - original dataframe\n#k - int - value of the k\n#feature_columns - list - what you want in the output dataframe\n#sensitive_column - string - what you need as senstive attribute\n#categorical - set -all categorical columns of the original dataframe as a set\n#schema - schema of the output dataframe you are expecting\n\n# df = pd.read_csv('data/reduced_adult.csv', index_col=False).dropna().reset_index(drop=True)\ndf = pd.read.csv(your_csv_file)['age',\n    'occupation',\n    'race',\n    'sex',\n    'hours-per-week',\n    'income']\n\ncategorical = set((\n    'occupation',\n    'sex',\n    'race'\n))\n\nfeature_columns = ['age', 'occupation']\n\nsensitive_column = 'income'\n\nyour_anonymized_dataframe = Preserver.k_anonymize(df,\n                                                k,\n                                                feature_columns,\n                                                sensitive_column,\n                                                categorical,\n                                                schema)\n```\n\n### K Anonymity (without row suppresion)\n\nThis function provides a simple way to anonymize a dataset which has an user identification attribute without grouping the rows.    \nThis function doesn't return a dataframe with the count variable as above function. Instead it returns the same dataframe, k-anonymized. Return type of all the non categorical columns will be string.   \nUser attribute column **must not** be given as a feature column and its return type will be same as the input type.   \nFunction takes exact same parameters as the above function. To use this method to anonymize the dataset, instead of calling `k_anonymize`, call `k_anonymize_w_user`.    \n\n### L Diversity\n\nSame as the K Anonymity, the `pandas.dataframe` you get after anonymizing will always contain a extra column `count` which indicates the number of similar rows.\nReturn type of all the non categorical columns will be string\nYou need to always consider the count column when constructing the schema. Count column is an integer type column.\n\n```python\nfrom privacy_preserver.mondrian_preserver import Preserver #requires pandas\n\n#df - spark.sql.dataframe - original dataframe\n#k - int - value of the k\n#l - int - value of the l\n#feature_columns - list - what you want in the output dataframe\n#sensitive_column - string - what you need as senstive attribute\n#categorical - set -all categorical columns of the original dataframe as a set\n#schema - spark.sql.types StructType - schema of the output dataframe you are expecting\n\ndf = pd.read.csv(your_csv_file)['age',\n    'occupation',\n    'race',\n    'sex',\n    'hours-per-week',\n    'income']\n\ncategorical = set((\n    'occupation',\n    'sex',\n    'race'\n))\n\nfeature_columns = ['age', 'occupation']\n\nsensitive_column = 'income'\n\nyour_anonymized_dataframe = Preserver.l_diversity(df,\n                                                k,\n                                                l,\n                                                feature_columns,\n                                                sensitive_column,\n                                                categorical,\n                                                schema)\n```\n\n### L Diversity (without row suppresion)\n\nThis function provides a simple way to anonymize a dataset which has an user identification attribute without grouping the rows.   \nThis function doesn't return a dataframe with the count variable as above function. Instead it returns the same dataframe, l-diversity anonymized. Return type of all the non categorical columns will be string.    \nUser attribute column **must not** be given as a feature column and its return type will be same as the input type.   \nFunction takes exact same parameters as the above function. To use this method to anonymize the dataset, instead of calling `l_diversity`, call `l_diversity_w_user`.  \n\n### T - Closeness\n\nSame as the K Anonymity, the `pandas.sql.dataframe` you get after anonymizing will always contain a extra column `count` which indicates the number of similar rows.\nReturn type of all the non categorical columns will be string\nYou need to always consider the count column when constructing the schema. Count column is an integer type column.\n\n```python\nfrom privacy_preserver.mondrian_preserver import Preserver #requires pandas\n\n#df - spark.sql.dataframe - original dataframe\n#k - int - value of the k\n#l - int - value of the l\n#feature_columns - list - what you want in the output dataframe\n#sensitive_column - string - what you need as senstive attribute\n#categorical - set -all categorical columns of the original dataframe as a set\n#schema - spark.sql.types StructType - schema of the output dataframe you are expecting\n\ndf = spark.read.csv(your_csv_file).toDF('age',\n    'occupation',\n    'race',\n    'sex',\n    'hours-per-week',\n    'income')\n\ncategorical = set((\n    'occupation',\n    'sex',\n    'race'\n))\n\nfeature_columns = ['age', 'occupation']\n\nsensitive_column = 'income'\n\nyour_anonymized_dataframe = Preserver.t_closeness(df,\n                                                k,\n                                                t,\n                                                feature_columns,\n                                                sensitive_column,\n                                                categorical,\n                                                schema)\n\n```\n\n### T Closeness (without row suppresion)\n\nThis function provides a simple way to anonymize a dataset which has an user identification attribute without grouping the rows.  \nThis function doesn't return a dataframe with the count variable as above function. Instead it returns the same dataframe, t-closeness anonymized. Return type of all the non categorical columns will be string.   \nUser attribute column **must not** be given as a feature column and its return type will be same as the input type.   \nFunction takes exact same parameters as the above function. To use this method to anonymize the dataset, instead of calling `t_closeness`, call `t_closeness_w_user`.  \n\n### Single User K Anonymity\n\nThis function provides a simple way to anonymize a given user in a dataset. Even though this doesn't use the mondrian algorithm, function is included in the `mondrian_preserver`. User identification attribute and the column name of the user identification atribute is needed as parameters.   \nThis doesn't return a dataframe with count variable. Instead this returns the same dataframe, anonymized for the given user. Return type of user column and all the non categorical columns will be string.\n\n```python\nfrom privacy_preserver.mondrian_preserver import Preserver #requires pandas\n\n#df - spark.sql.dataframe - original dataframe\n#k - int - value of the k\n#user - name, id, number of the user. Unique user identification attribute.\n#usercolumn_name - name of the column containing unique user identification attribute.\n#sensitive_column - string - what you need as senstive attribute\n#categorical - set -all categorical columns of the original dataframe as a set\n#schema - spark.sql.types StructType - schema of the output dataframe you are expecting\n#random - a flag by default set to false. In a case where algorithm can't find similar rows for given user, if this is set to true, slgorithm will randomly select rows from dataframe.\n\ndf = spark.read.csv(your_csv_file).toDF('name',\n    'age',\n    'occupation',\n    'race',\n    'sex',\n    'hours-per-week',\n    'income')\n\ncategorical = set((\n    'occupation',\n    'sex',\n    'race'\n))\n\nsensitive_column = 'income'\n\nuser = 'Jon'\n\nusercolumn_name = 'name'\n\nrandom = True\n\nyour_anonymized_dataframe = Preserver.anonymize_user(df,\n                                                k,\n                                                user,\n                                                usercolumn_name,\n                                                sensitive_column,\n                                                categorical,\n                                                schema,\n                                                random)\n\n```\n_______________________________________________________________________________________________________\n\n## Introduction to Differential Privacy\n\nDifferential privacy is one of the data preservation paradigms similar to K-Anonymity, T-Closeness and L-Diversity.\nIt alters each value of actual data in a dataset according to specific constraints set by the owner and produces a \ndifferentially-private dataset. This anonymized dataset is then released for public utilization.\n\n**ε-differential privacy** is one of the methods in differential privacy. Laplace based ε-differential privacy is \napplied in this library. The method states that the randomization should be according the **epsilon** (ε) \n(should be >0) value set by data owner. After randomization a typical noise is added to the dataset. It is calibrated \naccording to the **sensitivity** value (λ) set by the data owner. \n\nOther than above parameters, a third parameter **delta** (δ) is added into the mix to increase accuracy of the \nalgorithm. A **scale** is computed from the above three parameters and a new value is computed.\n\n> scale = λ / (ε - _log_(1 - δ))\n\n> random_number = _random_generator_(0, 1) - 0.5\n\n> sign = _get_sign_(random_number)\n\n> new_value = value - scale × sign × _log_(1 - 2 × _mod_(random_number))\n\nIn essence above steps mean that a laplace transform is applied to the value and a new value is randomly selected \naccording to the parameters. When the scale becomes larger, the deviation from original value will increase.\n\nTO BE DO\n\n_______________________________________________________________________________________________________\n\n## Clustering Anonymizer\n\n### Requirements - Clustering Anonymize\n\n* Pandas `pip intall pandas`\n* kmodes `pip install kmodes`\n\n### Clustering Based K Anonymity\n\nOnly recommend if there are more catogorical columns, than numerical column. if there are more numerical column, then modrian algorithm is recommended. \n\nIt is recommended to use 5 <= k <= 20 to minimize the data loss, if your data set is small better to use a small k value \n\nhe spark.sql.dataframe you get after anonymizing will always contain a extra column count which indicates the number of similar rows. Return type of all the non categorical columns will be string\n\n\nIn Clustering base Anonymizer you can choose how the how to initialize the cluster centroids. \n\n1. 'fcbg' = This method return cluster centroids weight on the probability of row's column values appear in dataframe. Default Value.\n2. 'rsc'  = This method will choose centroids weight according to the column that has most number of unique values.\n3. 'random = Return cluster centroids in randomly.\n\njust enter the `center_type= 'fcbg'`to use fcbg, default is **fcbg**\n\nYou can also decide the clustering method.\n1. default is special method \n2. kmodes method \n\nif you want to use default dont enter anything to attribute `mode=`, else if you want to use the kmodes method `mode= 'kmode'`\nif you have a huge data amount default is recommended. \n\nyou can also decide the return mode. If this value equal to `return_mode=''equal` ; K anonymization will done with equal member clusters. Default value is 'Not_Equal'\nNot equal is often run fast, but could be data lossy. equal is vice versa. \n\nBelow is a full example:\n```python\nfrom clustering_preserver import Kanonymizer\nfrom gv import init\nfrom anonymizer import Anonymizer\n\ndf = pd.read_csv(\"reduced_adult.csv\")\n\nschema = [\n    \"age\",\n    \"workcalss\",\n    \"education_num\",\n    \"matrital_status\",\n    \"occupation\",\n    \"sex\",\n    \"race\",\n    \"native_country\",\n    \"class\",\n]\n\nQI = ['age', 'workcalss','education_num', 'matrital_status', 'occupation', 'race', 'sex', 'native_country']\nSA = ['class']\nCI = [1,3,4,5,6,7]\n\nk_df = Anonymizer.k_anonymize(\n    df, schema, QI, SA, CI, k=10, mode='', center_type='random', return_mode='Not_equal', iter=1)\nk_df.show()\n```\n\n### Clustering based L-Diversity\n\nThis method is recommended only for k anonymized dataframe. \nInput anonymized dataframe will group into similar k clusters and clusters that have not L number of distinct sensitive attributes \nwill be suspressed.\nRecommended small number of l to minimum the data loss. Default value is l = 2.\n\n```python\n## k_df - K anonymized spark dataframe\n## schema - output spark dataframe schema\n## QI - Quasi Identifiers. Type list\n## SA = Sensitive attributes . Type list\n\n QI = ['column1', 'column2', 'column3']\n CI = [1, 2]\n SA = ['column4']\n schema = [\n     \"column1\",\n     \"column2\",\n     \"column3\",\n     \"column4\",\n ]\n\nl_df = Anonymizer.l_diverse(k_df,schema, QI,SA, l=2)\nl_df.show()\n```\n\n### Clustering based T closeness\n\nThis method is recommended only for k anonymized dataframe. \nInput anonymized dataframe will group into similar k clusters and clusters that not have sensitive attribute distribution according to t value will be suspressed.\nt should be in between 0 and 1.\nLarger value of t to minimum the data loss. Default value is t = 0.2.\n\n```python \n## k_df - K anonymized spark dataframe\n## schema - output spark dataframe schema\n## QI - Quasi Identifiers. Type list\n## SA = Sensitive attributes . Type list\n\n QI = ['column1', 'column2', 'column3']\n CI = [1, 2]\n SA = ['column4']\n schema = [\n     \"column1\",\n     \"column2\",\n     \"column3\",\n     \"column4\",\n ]\n\nt_df = Anonymizer.t_closer(\n    k_df,schema, QI, SA, t=0.3, verbose=1)\nt_df.show()\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/telesoho/privacy-preserver",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "privacy-preserver",
    "package_url": "https://pypi.org/project/privacy-preserver/",
    "platform": "",
    "project_url": "https://pypi.org/project/privacy-preserver/",
    "project_urls": {
      "Homepage": "https://github.com/telesoho/privacy-preserver"
    },
    "release_url": "https://pypi.org/project/privacy-preserver/1.0.1/",
    "requires_dist": [
      "pandas (>=1.3.2)",
      "numpy (>=1.21.2)",
      "kmodes"
    ],
    "requires_python": ">=3.6",
    "summary": "Anonymizing Library",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11553252,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c191448bf608c834559bbcd3e825eaec5ccfa4ee4ae35686b33bb0c77ce1935",
          "md5": "3cdbb97ba1e39c7fbbd97db2267a02f3",
          "sha256": "b03964fa5b98df6947df8101f43062093575ef86e0a5a86870f3a0219dda535e"
        },
        "downloads": -1,
        "filename": "privacy_preserver-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cdbb97ba1e39c7fbbd97db2267a02f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29833,
        "upload_time": "2021-09-25T18:31:58",
        "upload_time_iso_8601": "2021-09-25T18:31:58.766842Z",
        "url": "https://files.pythonhosted.org/packages/8c/19/1448bf608c834559bbcd3e825eaec5ccfa4ee4ae35686b33bb0c77ce1935/privacy_preserver-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "988b2c72bfc921bbccf6aaa32472046463c1abada51acdaf293056361984147e",
          "md5": "f89151d6458fc4fb30090044a446fda3",
          "sha256": "54295ef152d041cdeb91fd31d98322c2ee28790e01a7eca306cdb0bc8d8cdc9c"
        },
        "downloads": -1,
        "filename": "privacy_preserver-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f89151d6458fc4fb30090044a446fda3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31526,
        "upload_time": "2021-09-25T18:32:02",
        "upload_time_iso_8601": "2021-09-25T18:32:02.244673Z",
        "url": "https://files.pythonhosted.org/packages/98/8b/2c72bfc921bbccf6aaa32472046463c1abada51acdaf293056361984147e/privacy_preserver-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c05ee64df877912926a42cfff1ffb7c3e0a11b07f618e0400b5ce90fbc65ca8b",
          "md5": "0e9a277becc8fc7d7b832fe8406b3f7e",
          "sha256": "ef8f35e68d1ceea00f5402ea8939bcd2595af0c8fd30c38e4e37e41e6501fd48"
        },
        "downloads": -1,
        "filename": "privacy_preserver-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e9a277becc8fc7d7b832fe8406b3f7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27669,
        "upload_time": "2021-09-26T14:32:05",
        "upload_time_iso_8601": "2021-09-26T14:32:05.910808Z",
        "url": "https://files.pythonhosted.org/packages/c0/5e/e64df877912926a42cfff1ffb7c3e0a11b07f618e0400b5ce90fbc65ca8b/privacy_preserver-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "623a353fc745ee652225de79c1af925c2ff2a0b278053f82c18234f31407aeff",
          "md5": "e40e549ef201d303d62339b6e3d03110",
          "sha256": "2a71f3c2658ac69f5fba1fef9efdf29d49b8d5c02e4fb78a3b40273ba412a9ae"
        },
        "downloads": -1,
        "filename": "privacy_preserver-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e40e549ef201d303d62339b6e3d03110",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27062,
        "upload_time": "2021-09-26T14:32:10",
        "upload_time_iso_8601": "2021-09-26T14:32:10.829159Z",
        "url": "https://files.pythonhosted.org/packages/62/3a/353fc745ee652225de79c1af925c2ff2a0b278053f82c18234f31407aeff/privacy_preserver-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c05ee64df877912926a42cfff1ffb7c3e0a11b07f618e0400b5ce90fbc65ca8b",
        "md5": "0e9a277becc8fc7d7b832fe8406b3f7e",
        "sha256": "ef8f35e68d1ceea00f5402ea8939bcd2595af0c8fd30c38e4e37e41e6501fd48"
      },
      "downloads": -1,
      "filename": "privacy_preserver-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e9a277becc8fc7d7b832fe8406b3f7e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 27669,
      "upload_time": "2021-09-26T14:32:05",
      "upload_time_iso_8601": "2021-09-26T14:32:05.910808Z",
      "url": "https://files.pythonhosted.org/packages/c0/5e/e64df877912926a42cfff1ffb7c3e0a11b07f618e0400b5ce90fbc65ca8b/privacy_preserver-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "623a353fc745ee652225de79c1af925c2ff2a0b278053f82c18234f31407aeff",
        "md5": "e40e549ef201d303d62339b6e3d03110",
        "sha256": "2a71f3c2658ac69f5fba1fef9efdf29d49b8d5c02e4fb78a3b40273ba412a9ae"
      },
      "downloads": -1,
      "filename": "privacy_preserver-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e40e549ef201d303d62339b6e3d03110",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27062,
      "upload_time": "2021-09-26T14:32:10",
      "upload_time_iso_8601": "2021-09-26T14:32:10.829159Z",
      "url": "https://files.pythonhosted.org/packages/62/3a/353fc745ee652225de79c1af925c2ff2a0b278053f82c18234f31407aeff/privacy_preserver-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}