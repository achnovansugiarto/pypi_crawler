{
  "info": {
    "author": "Jan Izydorczyk, Mateusz SÅ‚uszniak, Filip Nikolow",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Votepy\n![Tests](https://github.com/Janix4000/votepy/actions/workflows/tests.yml/badge.svg)\n\nVotepy provides ready-to-use tools to calculate multi-winning ordinal elections, under different voting rules.\n\n## Installation \n\n 1. Clone the repository: `git clone https://github.com/Janix4000/votepy.git path/to/lib`\n 2. Create and source new virtual environment: `cd path/to/your/project && python3 -m venv venv && source venv/bin/activate`\n 3. Install the main package: `pip3 install -e path/to/lib/votepy`\n\n## Usage\n\n### Ordered preference and election\n\nWhen working with the ordered elections, we need to represent such data. Given `n` candidates, we can represent voter's preference by permutation of length `n`, using a standard Python list:\n```py\nn = 4\nvoting_preference = [2, 1, 3, 0]\n```\n\nWe will call such a preference a `voting ballot`.\nHaving `m` voters, we can group their preferences into the `ordered election`:\n\n```py\nn = 4\nm = 3\n\nvoting = [\n    [2, 1, 3, 0], # first voter's preference\n    [1, 2, 3, 0], # second voter's preference\n    [3, 0, 2, 1]  # third voter's preference\n]\n```\n\nVotepy also provides special data types for them, but they are not obligatory and all functions support python's primitives.\nHowever, they give additional functionalities, such as mapping candidates to more human-readable representations:\n\n```py\nfrom votepy.ordinal_election import OrdinalElection, OrdinalBallot\n\nmapping = {0: 'Joe', 1: 'John', 2: 'Sue', 3: 'Anna'}\n\nsingle_voting_preference = OrdinalBallot([2, 1, 3, 0], mapping=mapping)\n\nvoting = OrdinalElection([\n    [2, 1, 3, 0], # first voter's preference\n    [1, 2, 3, 0], # second voter's preference\n    [3, 0, 2, 1]  # third voter's preference\n], mapping=mapping)\n\nprint(voting) # prints election using mapping representation\n\n```\n\n### Voting rules\n\nFor a given election, we want to choose a set of representatives, with the predefined number `k` (or `committee size`) of the delegates.\nHowever, there are many strategies to choose such a `committee`. These strategies are commonly called `voting rules` and may optimize different objectives. We can print all of the implemented voting rules, with the corresponding python functions:\n\n```py\nimport votepy as vp\n\nprint(vp.get_rules()) # prints rule_name->rule_function dictionary\n```\n\nLet's use for an example `bloc` rule on the previously defined election:\n\n```py\ncommittee_size = 2\ncommittee = vp.rules.bloc(voting, committee_size)\nprint(committee)\n```\n\nVotepy gives additional way to call the voting rules:\n\n```py \n# this is equivalent of calling vp.rules.bloc\ncommittee = vp.solve('bloc', voting, committee_size)\n```\n\n### Voting-solving algorithms\nSome of the voting rules are extremely costly to compute and finding the best committee may be very time-consuming for a greater number of candidates and voters. Luckily, many voting rules are defined by the maximization of some objective function (`scoring function`), so the best committees can be approximated using different tricks and methods. \n\nLet's look at the `chamberlin_courant` (shortly `cc`) rule, which turns out to be NP-Complete, and so no efficient algorithm is known for finding the best committees for the given election. For such a rules additional parameter `algorithm` must be provided. Algorithms can be specified by their name:\n\n```py\ncommittee = vp.rules.chamberlin_courant(\n    voting, \n    committee_size, \n    algorithm='brute_force'\n)\n```\n\nor by using their corresponding algorithms objects:\n\n```py\nfrom votepy.algorithms import BruteForce\n\n# this is equivalent of 'brute_force' string name\ncommittee = vp.rules.chamberlin_courant(\n    voting, \n    committee_size, \n    algorithm=BruteForce()\n) \n```\n\nIn this case, the `brute force` algorithm will check every possible combination of the candidates and take the best one to create committee.\n\nSome algorithms can accept additional parameters, and it is only possible by using their corresponding classes:\n\n```py\n# numeric algorithm, similar to simulated annealing, giving approximate results\nfrom votepy.algorithms import BasinHopping  \n\ncommittee = vp.rules.chamberlin_courant(\n    voting, \n    committee_size, \n    algorithm=BasinHopping(niter=100, seed=1)\n)\n```\n\nThere are better methods than brute force for getting exact solutions. We can check all algorithms implemented for the cc rule:\n\n```py\n# prints rule_name->algorithm_class dictionary\nprint(vp.get_algorithms('chamberlin_courant'))\n```\n\nOne of the most common technice used for solving NP-Complete problems is using `ILP` solvers. However, in contrast to the brute force algorithm, we need to specify solver engine during the initialization of the ILP.\n```py\nfrom votepy.algorithms import ILP\n# Gurobi solver must be previously installed and activated on the machine\nfrom votepy.generic_ilp import Gurobi \n\ncommittee = vp.rules.chamberlin_courant(\n    voting, \n    committee_size, \n    algorithm=ILP(Gurobi)\n)\n```\n\n\n## Contribution guide\n\n### Installation\n\n 1. Clone the repository: `git clone https://github.com/Janix4000/votepy.git && cd votepy`\n 2. Create and source new virtual environment: `python3 -m venv venv && source venv/bin/activate`\n 3. Install the main package: `pip3 install -e .`\n 4. Install development packages: `pip3 install -r ./requirements_dev.txt`\n 5. Run tests: `pytest`\n\n### Adding a new voting rule\nSee the [guide](votepy/rules/README.md) for adding new voting rule.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Janix4000/votepy/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "votepy",
    "package_url": "https://pypi.org/project/votepy/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/votepy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Janix4000/votepy/issues",
      "Homepage": "https://github.com/Janix4000/votepy/"
    },
    "release_url": "https://pypi.org/project/votepy/0.0.1/",
    "requires_dist": [
      "numpy (>=1)",
      "matplotlib (>=3)",
      "scipy (>=1)",
      "pytest (>=7.0) ; extra == 'testing'",
      "pytest-cov (>=2.0) ; extra == 'testing'",
      "mypy (>=0.971) ; extra == 'testing'",
      "flake8 (>=3.9) ; extra == 'testing'",
      "tox (>=3.25) ; extra == 'testing'"
    ],
    "requires_python": ">=3.9",
    "summary": "A Python library of ordinal-based committee (OBC) voting rules",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16267510,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "270e599b4956aa3deb74f29cdac2a6a4bac5529368bb0499d60aa3e0a0a30023",
          "md5": "9a78dbbc12e7640a5bc20b1999046d28",
          "sha256": "0e1a546a4932947816fb8aa53bfb62b5512209319a089eff4410bfd756394a95"
        },
        "downloads": -1,
        "filename": "votepy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a78dbbc12e7640a5bc20b1999046d28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 29608,
        "upload_time": "2022-12-31T15:29:33",
        "upload_time_iso_8601": "2022-12-31T15:29:33.420403Z",
        "url": "https://files.pythonhosted.org/packages/27/0e/599b4956aa3deb74f29cdac2a6a4bac5529368bb0499d60aa3e0a0a30023/votepy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "417c936114162a5955bc8d333ac280df863202b2705aec168d7ecdc244dafcdf",
          "md5": "b508f30db801e97fb66950bdd0df173b",
          "sha256": "6496307b5d9fd0d09700a72532a481dc4547cbd2a64bf5c8729ae324b319ac08"
        },
        "downloads": -1,
        "filename": "votepy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b508f30db801e97fb66950bdd0df173b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 23295,
        "upload_time": "2022-12-31T15:29:35",
        "upload_time_iso_8601": "2022-12-31T15:29:35.833479Z",
        "url": "https://files.pythonhosted.org/packages/41/7c/936114162a5955bc8d333ac280df863202b2705aec168d7ecdc244dafcdf/votepy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "270e599b4956aa3deb74f29cdac2a6a4bac5529368bb0499d60aa3e0a0a30023",
        "md5": "9a78dbbc12e7640a5bc20b1999046d28",
        "sha256": "0e1a546a4932947816fb8aa53bfb62b5512209319a089eff4410bfd756394a95"
      },
      "downloads": -1,
      "filename": "votepy-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a78dbbc12e7640a5bc20b1999046d28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 29608,
      "upload_time": "2022-12-31T15:29:33",
      "upload_time_iso_8601": "2022-12-31T15:29:33.420403Z",
      "url": "https://files.pythonhosted.org/packages/27/0e/599b4956aa3deb74f29cdac2a6a4bac5529368bb0499d60aa3e0a0a30023/votepy-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "417c936114162a5955bc8d333ac280df863202b2705aec168d7ecdc244dafcdf",
        "md5": "b508f30db801e97fb66950bdd0df173b",
        "sha256": "6496307b5d9fd0d09700a72532a481dc4547cbd2a64bf5c8729ae324b319ac08"
      },
      "downloads": -1,
      "filename": "votepy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b508f30db801e97fb66950bdd0df173b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 23295,
      "upload_time": "2022-12-31T15:29:35",
      "upload_time_iso_8601": "2022-12-31T15:29:35.833479Z",
      "url": "https://files.pythonhosted.org/packages/41/7c/936114162a5955bc8d333ac280df863202b2705aec168d7ecdc244dafcdf/votepy-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}