{
  "info": {
    "author": "Ben Kehoe",
    "author_email": "ben@kehoe.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# aws-lambda-api-event-utils\n\nThere are many other libraries, in Python and in other languages, for handling HTTP events in Lambda.\nSo why this library?\n\nAll the libraries I have seen are oriented towards providing traditional HTTP response handling, in the web server style, for Lambda functions.\nThey are often based on an actual web framework, generally provide routing, etc.\n\nThis library does none of that.\n\nIt is intended to be used in the serverless native style, where routing and validation logic is pushed into API Gateway whenever possible.\nIt is intended to make API handlers more Pythonic and less webserver-like, while retaining the use of proxy integrations with API Gateway.\n\nThe functionality in this library can be put into two categories:\n* More Pythonic handlers: interact less with the raw proxy request and response objects, deal with client errors by raising Python exceptions, make JSON payloads easier.\n* Request validation: while as much validation as possible should be done at the API Gateway layer, there are situations where you may need to validate the request in the Lambda function instead. The code in your function should be able to rely on the request being validated.\n\nNote that REST APIs using the Lambda proxy integration does not fully validate request payloads ([read details here](https://rboyd.dev/089999bf-b973-42ed-9796-6167539269b8)), and HTTP APIs do not do any validation.\n\n# Examples\n\n```python\nfrom aws_lambda_api_event_utils import *\n\nimport datetime\nimport decimal\n\n# When an APIErrorResponse is caught by a decorator, it's turned into an\n# API response that by default has a payload of the form:\n# {\n#   \"Error\": {\n#     \"Code\": <error_code>,\n#     \"Message\": <error_message>\n#   }\n# }\n\n@api_event_handler\ndef handler(event, context):\n    try:\n        # some code\n    except SomePayloadError as exc:\n        # this will re-raise as an APIErrorResponse so that it can be caught by\n        # the decorator and converted to a response to API Gateway using the\n        # given status code and a JSON response body with an error code set to\n        # the exception class name and an error message set to the\n        # stringified exception\n        raise APIErrorResponse.from_exception(400, exc)\n\n    try:\n        # some code\n    except SomeOtherPayloadError:\n        # To expose fewer internal details, use this standard exception\n        # which results in a status 400, a generic error code,\n        # and the given error message\n        # There's also APIErrorResponse.from_status_code() to create generic\n        # exceptions for other status codes\n        raise InvalidRequestError(\"Something's wrong with the request.\")\n\n    try:\n        # some code\n    except SomeServiceError:\n        # In general, server-side problems should be raised as regular exceptions\n        # causing the Lambda function to error out. This automatically\n        # means API Gateway will return 500 and you'll see these errors in your\n        # Lambda function metrics\n        raise\n\n    # more code\n\n    # The decorator will convert this to a response with status code 200,\n    # like the HTTP API Lambda proxy integration does automatically\n    # but it works with REST APIs too, and it does more:\n    # - JSON serialization of datetimes and decimals is provided\n    # - returning a string will be converted to a text/plain response\n    # - returning bytes will be converted to an application/octet-stream response\n    return {\n        \"my_field\": \"my_value\",\n        \"timestamp\": datetime.datetime.now(datetime.timezone.utc),\n        \"dynamodb_number\": decimal.Decimal(\"8.1\")\n    }\n```\n\n```python\nfrom aws_lambda_api_event_utils import *\n\n# Make subclasses of APIErrorResponse for your own purposes\n# The error code is the class name by default\n# The error message can be static or a template\n# The template can use any fields of the exception\n# or any keywords passed to the constructor\nclass FailedProcessing(APIErrorResponse):\n    STATUS_CODE = 400\n    ERROR_MESSAGE_TEMPLATE = \"Failed during {step}.\"\n\n# ApiErrorResponses caught by the decorator will log the internal message\n# using this callable or logging.Logger\nAPIErrorResponse.DECORATOR_LOGGER = print\n\n@api_event_handler\ndef handler(event, context):\n    try:\n        # some code\n    except SomeInputError as e:\n        # This will be caught by the decorator and converted to a response\n        # You must provide an internal message suitable for logging\n        # even if APIErrorResponse.DECORATOR_LOGGER is not set\n        # keyword arguments are stored and can be referenced in\n        # ERROR_MESSAGE_TEMPLATE\n        raise MyError(f\"Processing failed: {e}.\", step=\"step 1\")\n\n    try:\n        # some code\n    except SomeOtherInputError as e:\n        # You can also override the error message if it's using the default\n        # constructor or kwargs are passed to the APIErrorResponse constructor\n        raise MyError(f\"Processing failed: {e}.\", step=\"step 2\",\n            error_message=\"This error message overrides the template.\")\n\n    # return some other status code (or a fully-customized response)\n    # with make_response()\n    # format version can be provided implicitly as the Lambda function\n    # input event rather than having to provide it explicitly\n    return make_response(201, {\"status\": \"created\"}, format_version=event)\n```\n\n```python\nfrom aws_lambda_api_event_utils import *\n\n@api_event_handler\ndef handler(event, context):\n    # set response headers and cookies through the Lambda context object\n    # this works for both returning a value and raising an APIErrorResponse\n    context.api_response.headers = {\"my_header_key\": \"my_header_value\"}\n    return {\"my_field\": \"my_value\"}\n```\n\n```python\n# JSON schema validation requires either the fastjsonschema or jsonschema\n# package be installed to work\n# neither are required by this package by default\n# install one separately or install this package with the\n# appropriate extra as:\n# aws-lambda-api-event-utils[fastjsonschema]\n# or\n# aws-lambda-api-event-utils[jsonschema]\nfrom aws_lambda_api_event_utils import *\n\nSCHEMA = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"some_field\": {\n            \"type\": \"string\",\n        }\n    },\n    \"required\": [\"some_field\"]\n}\n# With fastjsonschema, compiled schemas can be used with the\n# CompiledFastJSONSchema class\n\n# any decorator from the package provides the base functionality\n# of @api_event_handler\n# Invalid JSON and JSON that violates the schema will generate\n# an error response\n@json_body(SCHEMA)\ndef handler(event, context):\n    payload = event[\"body\"] # parsed and validated JSON\n\n    try:\n        # some code\n    except SomeError as exc:\n        raise APIErrorResponse.from_exception(400, exc)\n\n    return {\"status\": \"success\"}\n```\n\n```python\nfrom aws_lambda_api_event_utils import *\n\n# @api_event_handler is the \"no-validation\" decorator\n# using any decorator provides the APIErrorResponse and\n# handler-return-value processing\n@event_format_version(API_GW_20)\n@method(\"POST\")\n@path(\"/my/path\")\n@headers(keys=[\"x-api-key\"])\n@query_parameters(keys=[\"my_param\"])\n@json_body(enforce_content_type=True) # require Content-Type: application/json header\ndef handler(event, context):\n    my_param = event[\"queryStringParameters\"][\"my_param\"]\n    payload = event[\"body\"] # parsed and validated JSON\n\n    # do work with my_param and payload\n\n    return {\"status\": \"success\"}\n```\n\n```python\nfrom aws_lambda_api_event_utils import *\n\ncors_config = CORSConfig(\n    allow_origin = \"https://example.com\",\n    allow_methods = [\"GET\", \"POST\"]\n)\n\n@api_event_handler\ndef handler(event, context):\n    if CORSConfig.is_preflight_request(event):\n        return cors_config.make_preflight_response(format_version=event)\n\n    context.api_response.cors_config = cors_config\n\n    return {\"status\": \"success\"}\n```\n\n```python\nimport os, http, boto3\nfrom aws_lambda_api_event_utils import *\n\nS3_BUCKET_NAME = os.environ[\"S3_BUCKET_NAME\"]\n\n# why use a session? read an explainer:\n# https://ben11kehoe.medium.com/boto3-sessions-and-why-you-should-use-them-9b094eb5ca8e\nBOTO3_SESSION = boto3.Session()\nS3_CLIENT = BOTO3_SESSION.client(\"s3\")\n\n# maybe this route is /obj/{param}\n# the regex can constrain it further\n# and capturing groups become path parameters\n@method(\"GET\")\n@path_regex(\"/data/obj-(?P<s3_key>\\w+)\")\n@headers(keys=[\"x-api-key\"])\ndef handler(event, context):\n    api_key = event[\"headers\"][\"x-api-key\"]\n    s3_key = event[\"pathParameters\"][\"s3_key\"]\n\n    if not is_authorized(api_key, s3_key):\n        # generic errors for all HTTP 4XX and 5XX status codes\n        raise APIErrorResponse.from_status_code(http.HTTPStatus.FORBIDDEN)\n\n    presigned_url = S3_CLIENT.generate_presigned_url(\"get_object\",\n        Params={\n            \"Bucket\": S3_BUCKET_NAME,\n            \"Key\": s3_key\n        },\n        ExpiresIn=30\n    )\n\n    # create an appropriate redirect response\n    # format version can be provided implicitly as the Lambda function\n    # input event rather than having to provide it explicitly\n    return make_redirect(\n        http.HTTPStatus.TEMPORARY_REDIRECT,\n        presigned_url,\n        format_version=event\n    )\n```\n\n# Installation\n\n```\npip install aws-lambda-api-utils\n\n# with jsonschema validation support\n# choose a schema validation library\npip install aws-lambda-api-utils[fastjsonschema]\nor\npip install aws-lambda-api-utils[jsonschema]\n```\n\n# API event formats\n\nAWS does not define a global event format convention.\nAPI Gateway Lambda proxy events, which are the focus of this library, come in three styles: the REST API format and HTTP API format version 1.0, which are essentially the same, and HTTP API format version 2.0.\n\nThis library defines the `FormatVersion` enum, which represents these as two formats: `FormatVersion.APIGW_10` and `FormatVersion.APIGW_20`.\n\nThe `get_event_format_version()` function takes an event and returns the event format version, or `None` if the event format version cannot be determined.\nBy default, the event format version is cached within the event (the key used for this is available in the `EVENT_FORMAT_VERSION_CACHE_KEY` module field) to speed up multiple calls to `get_event_format_version()` (e.g., across multiple validations).\nThis can be disabled in this function by setting `disable_cache=True`; it cannot be disabled when using validation functions or decorators.\n\n# Decorators\n\nUsing at least one decorator from this package is required to get the `APIErrorResponse` and handler return value processing described below.\nUsing one or more validation decorators is sufficient; if no validation decorators are needed, `@api_event_handler` provides this functionality as a standalone decorator.\n\n# Request body processing\n\nTo retrieve the body from the event, use the `get_body()` function.\nThis returns the body value as-is if it has already been parsed into an object (e.g., by the `@json_body` decorator), as `bytes` if `isBase64` is set to `True` in the event, or as a string otherwise.\nTo validate that the event contains a binary body or not, set the `type` parameter to `BodyType.str` or `BodyType.bytes`, which will cause `PayloadBinaryTypeError` to be raised if it doesn't match.\n\nTo parse the body as JSON and optionally validate the JSON, use the `@json_body` decorator or the `get_json_body()` function.\n\n`@json_body` and `get_json_body()` can apply schema validation to the JSON payload.\nThis requires a JSON schema validation library to be installed; both `fastjsonschema` and `jsonschema` are supported.\nThese are not required dependencies by default; install this libary with the `fastjsonschema` or `jsonschema` extra, respectively, or install them separately.\n\n`get_json_body()` returns the parsed and validated JSON body; it does not modify the event.\n`@json_body` replaces the body in the event with the parsed and validated JSON body; it can be retrieved directly or with the `get_body()` function.\n\nIf you're using `fastjsonschema`, you can wrap the schema in the `CompiledFastJSONSchema` class (i.e., `schema = CompiledFastJSONSchema({...})`) to use the schema compilation feature of that library.\n\nWithout a schema, the decorator can be used with or without parentheses.\n\nIf the body cannot be parsed as JSON, `get_json_body()` raises `PayloadJSONDecodeError`.\nThe exception will have an `internal_message` that includes the `json.JSONDecodeError`.\nThe error response is status 400, the error code is `InvalidPayload`, and the error message says the payload must be JSON.\n\nBy default, HTTP methods that are not expected to have request bodies, like GET, do not cause an error.\nSet `enforce_on_optional_methods=True` to enforce that any request has a valid JSON body.\n\nFor convenience, you can enforce that the `Content-Type` header is set to `application/json` by setting `enforce_on_optional_methods=True`.\nThis uses the [`validate_content_type()` function](docs/validators.md#Content-type).\n\nIf the body can be parsed as JSON, but does not validate against the provided schema, `get_json_body()` raises `PayloadSchemaViolationError`.\nThe exception will have an `internal_message` that includes the schema error.\nThe error response is status 400, the error code is `InvalidPayload`, and the error message provides the schema error.\n\n# Handler return value processing\n\nWhen a decorator is used on the Lambda function handler, the return value from the handler is inspected.\nIf it is a `dict` containing a `\"statusCode\"` field, it is considered to be a response and returned intact.\n\nOtherwise, it constructs a response using `make_response()`, with the following logic:\n* The status code is 200.\n* If the return value is of type `bytes`, it will be base64-encoded and a default content-type of `application/octet-stream` will be applied.\n* If the return value is of type `str`, it will be used as-is and a default content-type of `text/plain` will be applied.\n* Otherwise, the return value will be JSON-serialized and a default content-type of `application/json` will be applied.\n\nWhen serializing to JSON, objects of `datetime.datetime`, `datetime.date`, and `datetime.time` and `decimal.Decimal` classes are handled.\nBy default, the `datetime` classes are serialized with their `isoformat()` methods and UTC timezones are converted from using an `+00:00` offset to the plain `Z` suffix.\nBy default, `decimal.Decimal` is serialized as a float.\nThis can be changed with the `set_default_json_serialization_config()` function, and also `make_response()` can be provided with a `JSONSerializationConfig` override directly.\n\nHeaders and cookies can be set in the `api_response.headers` and `api_response.cookies` fields on the Lambda context object (the decorator creates these fields).\n\n# Redirects\n\nA redirect response can be generated using the `make_redirect()` function, which takes a 3XX status code and a URL to redirect to.\n\n# `APIErrorResponse`\nThe requirement of the handler returing a structured value when an error occurs is not particularly Pythonic; instead, we should raise an exception and it should cauase the right thing to happen.\nThis functionality is provided by the `APIErrorResponse` exception class.\nAn `APIErrorResponse` subclass has a status code, and knows how to create the response to return to API Gateway through the `get_response()` method.\n\nThe most basic usage is when you catch an exception that should cause an error to be returned to the client, you can use `APIErrorResponse.from_exception()` to get an instance of a dynamically-generated `APIErrorResponse` subclass you can re-raise (or call the `get_response()` method on).\nYou provide it the status code exception and use it for the response body ([see below](#Error-response-body) for error response body details): the error code will be the exception class name, and the error message will be the stringified exception.\nYou can provide an internal message for logging ([see below](#Error-logging)), or it will default to a string containing the error code and error message.\n\nYou can create your own subclasses of `APIErrorResponse` to make exceptions that will be caught by the decorators and turned into error responses as defined by the subclass.\nThis package also provides a generic `InvalidRequestError` exception (an `APIErrorResponse` subclass), which has a status code of 400 and an error code of `InvalidRequest`, and an error message you provide.\nYou can additionally call `APIErrorResponse.from_status_code()` to generate a generic exception instance for a given 4XX or 5XX status code.\n\nValidators in this package raise subclasses of `APIErrorResponse` for validation failures; see the docs for each validator for more information.\n\nHeaders and cookies for responses generated in decorators can be set from within the handler using the `api_response.headers` and `api_response.cookies` fields on the Lambda context object (the decorator creates these fields).\n\n## CORS\n\nSupport for CORS is through the `CORSConfig` class, an immutable representation of a CORS configuration.\n\nCheck if an incoming event is a CORS preflight request with the `CORSConfig.is_preflight_request()` class method, and respond to it using a `CORSConfig` instance with the `make_preflight_response()` method.\n\nA `CORSConfig` instance can be provided to any method or function in this package that creates a response.\nTo set the CORS configuration for responses generated in decorators, set the `api_response.cors_config` field on the Lambda context object.\n\n## Error logging\n\nTo log `APIErrorResponse` exceptions caught in a decorator, you can set `APIErrorResponse.DECORATOR_LOGGER` to a callable (e.g., `print`) or a `logging.Logger` object.\nThis will log the `internal_message` field of the `APIErrorResponse` exception.\nBy default, this does not include a traceback; set `APIErrorResponse.DECORATOR_LOGGER_TRACEBACK` to `True` to include one.\n\n## Response generation\n\nTo generate a response directly, use the `get_response()` method (this is only necessary if you're catching `APIErrorResponse`/subclasses yourself, rather than using a decorator).\nThis method must be provided an `format_version` to determine the format of the response; this can either be a format version directly, or the Lambda function input event (to determine the format version from).\nIt can optionally take a `body`, `headers`, and `cookies` to pass to the class methods that determine those values for the response.\n\nBy default, the response body generated for an `APIErrorResponse` looks like the following:\n\n```json\n{\n    \"Error\": {\n        \"Code\": \"<error code>\",\n        \"Message\": \"<error message>\"\n    }\n}\n```\n\nThese field names can be changed by altering the `ERROR_PARENT_FIELD`, `ERROR_CODE_FIELD`, and `ERROR_MESSAGE_FIELD` class fields on `APIErrorResponse`; if `ERROR_PARENT_FIELD` is set to `None`, the error code and error message will be put at the top level.\n\n## Subclassing `APIErrorResponse`\n\nCreate your own subclasses of `APIErrorResponse` to represent your own error conditions and how they should be mapped into an API response.\n\nThe minimal subclass looks like this:\n```python\nclass MyError(APIErrorResponse):\n    STATUS_CODE = 400 # the status code for the response\n\n    ERROR_MESSAGE = \"My error message.\" # static message\n\n# usage:\n# APIErrorResponse requires an internal message be provided to its constructor.\nraise MyError(\"This is the internal error message for logging\")\n\n# Providing a keyword argument named error_message will override the error message\nraise MyError(\"This is the internal error message for logging\",\n    error_message=\"Override error message.\")\n```\n\nThe error code defaults to the class name, but can be set explicitly with the `ERROR_CODE` class field.\n\nThe error message can be a string template using the `ERROR_MESSAGE_TEMPLATE` field, rather than a static value.\nThe template uses the standard `str.format()` method.\nIt can reference any instance fields.\nFor convenience, any keyword arguments provided to the `APIErrorResponse` constructor are stored and can also be referenced in the template, meaning you don't need to define your own constructor.\n\n```python\nclass MyError(APIErrorResponse):\n    STATUS_CODE = 400 # the status code for the response\n\n    ERROR_MESSAGE_TEMPLATE = \"My error message: {msg}.\" # static message\n\n# usage:\nraise MyError(\"This is the internal error message for logging.\",\n    msg=\"value for the error message template\")\n\n# Providing a keyword argument named error_message will override the error message\nraise MyError(\"This is the internal error message for logging.\",\n    error_message=\"Override error message.\")\n```\n\nYou can provide your own constructor to take more detailed information, and then construct the internal message there.\nYou can override `get_error_message()` to include more logic.\n\n```python\nclass MyError(APIErrorResponse):\n    STATUS_CODE = 400 # the status code for the response\n\n    # taking kwargs and passing them to APIErrorResponse to allow\n    # overriding the error message like normal\n    def __init__(self, bad_param, **kwargs):\n        self.bad_param = bad_param\n        if \"internal_message\" not in kwargs:\n            kwargs[\"internal_message\"] = f\"Bad param: {bad_param}\"\n        super().__init__(**kwargs)\n\n    def get_error_message(self):\n        # allow overriding error message\n        # self.kwargs are kwargs to APIErrorResponse\n        if \"error_message\" in self.kwargs:\n            return self.kwargs[\"error_message\"]\n        if self.bad_param == \"secret\":\n            return \"Bad parameter.\"\n        else:\n            return f\"Bad parameter: {self.bad_param}.\"\n\n\n# usage:\nraise MyError(\"param1\")\n\n# Providing a keyword argument named error_message will override the error message\nraise MyError(\"secret\", error_message=\"Bad secret.\")\n```\n\n### Headers and cookies\nTo fully control the headers in the response, override the `get_headers()` method, which takes the headers given to `get_response()` as input.\nTo add default headers, override `get_default_headers()`; these headers will be added if they are not already present in the result of `get_headers()`.\n\nTo control the cookies in the response, override the `get_cookies()` method, which takes the cookies given to `get_response()` as input.\n\n### Error response body\nThe response body is constructed in the `get_body()` method; the default implementation uses the `get_error_code()` and `get_error_message()` fields with the `make_error_body()` class method.\n\nThe `get_error_code()` method has a default implementation that uses the `ERROR_CODE` class field if it is set, falling back to the exception class name.\n\nThe `get_error_message()` method has a default implementation that uses the `error_message` keyword argument to the `APIErrorResponse` constructor if it was given, otherwise using the following class fields.\n`ERROR_MESSAGE` class field if it is set, otherwise using the `ERROR_MESSAGE_TEMPLATE` class field if it is set, calling the string `format()` method with `vars(self)` as inputs (that is, you can reference fields from the exception in the template).\nIf neither `ERROR_MESSAGE` or `ERROR_MESSAGE_TEMPLATE` are set, the message `An error occurred.` is used.\n\nThe `make_error_body()` class method constructs a body of the following form, taking the error code and message as input:\n```json\n{\n  \"Error\": {\n    \"Code\": \"MyErrorCode\",\n    \"Message\": \"My error message.\"\n  }\n}\n```\nYou can change the error code field name with the `ERROR_CODE_FIELD` class field, and the error message field name with the `ERROR_MESSAGE_FIELD` class field.\nYou can change the top-level field name by setting the `ERROR_PARENT_FIELD` class field, or by setting it to `None` the error code and message fields will be set at the top level.\n\n# Validators\n\nValidation is provided with both a decorator API and a functional API.\nSee the full documenation on validators [here](docs/validators.md).\n\n# Creating responses directly\n\nThe `make_response()` function formats a response for the function according to a given format version.\nThe format version must be specified, but can be given implicitly by setting `format_version` to the Lambda function input event.\n\nIf the `body` arugment is not a string or bytes, it will be serialized to JSON, and a `Content-Type` header of `application/json` will be added.\n\nThe function signature is as follows:\n```\nmake_response(\n    status_code: Union[int, http.HTTPStatus],\n    body: Optional[Any],\n    *,\n    format_version: Union[FormatVersion, Dict],\n    headers: Optional[Dict[str, Union[str, List[str]]]] = None,\n    cookies: Optional[List[str]] = None,\n    cors_config: Optional[CORSConfig] = None,\n    json_serialization_config: Optional[JSONSerializationConfig] = None,\n) -> Dict\n```\n\nWhen your function raises an exception that should be turned into a response, but you can't or don't want to modify the code to make that exception an `APIErrorResponse` subclass ([see above](#subclassing-errorresponse) for details), you can use the `APIErrorResponse.from_exception()` class method to create an .\nThis takes a status code and exception, and creates the error response with the error code set to the exception class name and the error message set to the stringified exception.\nIf the exception is an `APIErrorResponse` subclass, the result will be a call to its `get_response()` method, but it will raise an error if the status codes don't match.\nThe method signature is as follows:\n\n```\nAPIErrorResponse.get_response(\n    *,\n    format_version: Union[FormatVersion, Dict],\n    body: Optional[Any] = None,\n    headers: Optional[Dict[str, Union[str, List[str]]]] = None,\n    cookies: Optional[List[str]] = None,\n    cors_config: Optional[CORSConfig] = None,\n    json_serialization_config: Optional[JSONSerializationConfig] = None,\n) -> Dict\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/benkehoe/aws-lambda-api-event-utils",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aws-lambda-api-event-utils",
    "package_url": "https://pypi.org/project/aws-lambda-api-event-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/aws-lambda-api-event-utils/",
    "project_urls": {
      "Homepage": "https://github.com/benkehoe/aws-lambda-api-event-utils",
      "Repository": "https://github.com/benkehoe/aws-lambda-api-event-utils"
    },
    "release_url": "https://pypi.org/project/aws-lambda-api-event-utils/0.3.0/",
    "requires_dist": [
      "fastjsonschema[fastjsonschema] (>=2.15.3,<3.0.0)",
      "jsonschema[jsonschema] (>=4.2.1,<5.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Lightweight processing of API events for AWS Lambda",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12627181,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afd548c2cc6e29f27cb7ef167eeb53f99798c965a60a99978fce9d661b1ae09c",
          "md5": "f8174e6f85532d70ee1286620dab3915",
          "sha256": "94354fb6986dbcdd5f7a65b5693894683fdd4d33807d45ee2146be5faedf1734"
        },
        "downloads": -1,
        "filename": "aws_lambda_api_event_utils-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8174e6f85532d70ee1286620dab3915",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 28919,
        "upload_time": "2022-01-15T20:58:33",
        "upload_time_iso_8601": "2022-01-15T20:58:33.023849Z",
        "url": "https://files.pythonhosted.org/packages/af/d5/48c2cc6e29f27cb7ef167eeb53f99798c965a60a99978fce9d661b1ae09c/aws_lambda_api_event_utils-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fc333836edb4ddc9f65ce907d2ecb86c45b523f901f8a74a24ab6d1ac488dee",
          "md5": "f118ab419c3dafff09e039bf13f768c3",
          "sha256": "aa428a67c3158a363707b152654f31de25f4f5ca5e35edd9c62300b5d0a305b4"
        },
        "downloads": -1,
        "filename": "aws-lambda-api-event-utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f118ab419c3dafff09e039bf13f768c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 33438,
        "upload_time": "2022-01-15T20:58:34",
        "upload_time_iso_8601": "2022-01-15T20:58:34.745375Z",
        "url": "https://files.pythonhosted.org/packages/2f/c3/33836edb4ddc9f65ce907d2ecb86c45b523f901f8a74a24ab6d1ac488dee/aws-lambda-api-event-utils-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b497a1967ca8781c514892c97f680d42fd5d2dbd37f619bf8949c585a47f80c",
          "md5": "d5d544171dd33bdf01682b43ba41639f",
          "sha256": "5e64679ed4ecc7b925eeed9ed3bbd4c127cc4266cd075a8960ecf282683b13ee"
        },
        "downloads": -1,
        "filename": "aws_lambda_api_event_utils-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5d544171dd33bdf01682b43ba41639f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 29460,
        "upload_time": "2022-01-16T15:58:57",
        "upload_time_iso_8601": "2022-01-16T15:58:57.115261Z",
        "url": "https://files.pythonhosted.org/packages/5b/49/7a1967ca8781c514892c97f680d42fd5d2dbd37f619bf8949c585a47f80c/aws_lambda_api_event_utils-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dd798f6568c7874b20083690dccbec6bf71e15e5bab1737f7fea22d9007de0a",
          "md5": "300969bec72894f62fd46d3ad5209a07",
          "sha256": "085707cfc018b39abe6dc1fdca6d6259465a63b7a22168a239236c778d9281d1"
        },
        "downloads": -1,
        "filename": "aws-lambda-api-event-utils-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "300969bec72894f62fd46d3ad5209a07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 34410,
        "upload_time": "2022-01-16T15:58:58",
        "upload_time_iso_8601": "2022-01-16T15:58:58.764451Z",
        "url": "https://files.pythonhosted.org/packages/3d/d7/98f6568c7874b20083690dccbec6bf71e15e5bab1737f7fea22d9007de0a/aws-lambda-api-event-utils-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "247875ae8983ef1681716533cb8f569fb4e7f04e3a096709159814db05ed4bf0",
          "md5": "ee8b243b3baeaf7cffcece3fef74f9ab",
          "sha256": "f4849434bb2cb9600368626a90757806387290d43339179c66f9a9791f6b7454"
        },
        "downloads": -1,
        "filename": "aws_lambda_api_event_utils-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee8b243b3baeaf7cffcece3fef74f9ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31638,
        "upload_time": "2022-01-20T00:48:33",
        "upload_time_iso_8601": "2022-01-20T00:48:33.181605Z",
        "url": "https://files.pythonhosted.org/packages/24/78/75ae8983ef1681716533cb8f569fb4e7f04e3a096709159814db05ed4bf0/aws_lambda_api_event_utils-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1351a7b36ca0af6581a9d0e0a652c292e6c10b7a7f6ee456752d666ec94695d",
          "md5": "eb77e6ba1137e18843d08db4ee80f5d9",
          "sha256": "c942565d56ae47648e08123b8a0affcfc562adb8d28f2ebf1eb48809f2648333"
        },
        "downloads": -1,
        "filename": "aws-lambda-api-event-utils-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb77e6ba1137e18843d08db4ee80f5d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 37603,
        "upload_time": "2022-01-20T00:48:34",
        "upload_time_iso_8601": "2022-01-20T00:48:34.793292Z",
        "url": "https://files.pythonhosted.org/packages/e1/35/1a7b36ca0af6581a9d0e0a652c292e6c10b7a7f6ee456752d666ec94695d/aws-lambda-api-event-utils-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "247875ae8983ef1681716533cb8f569fb4e7f04e3a096709159814db05ed4bf0",
        "md5": "ee8b243b3baeaf7cffcece3fef74f9ab",
        "sha256": "f4849434bb2cb9600368626a90757806387290d43339179c66f9a9791f6b7454"
      },
      "downloads": -1,
      "filename": "aws_lambda_api_event_utils-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ee8b243b3baeaf7cffcece3fef74f9ab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 31638,
      "upload_time": "2022-01-20T00:48:33",
      "upload_time_iso_8601": "2022-01-20T00:48:33.181605Z",
      "url": "https://files.pythonhosted.org/packages/24/78/75ae8983ef1681716533cb8f569fb4e7f04e3a096709159814db05ed4bf0/aws_lambda_api_event_utils-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1351a7b36ca0af6581a9d0e0a652c292e6c10b7a7f6ee456752d666ec94695d",
        "md5": "eb77e6ba1137e18843d08db4ee80f5d9",
        "sha256": "c942565d56ae47648e08123b8a0affcfc562adb8d28f2ebf1eb48809f2648333"
      },
      "downloads": -1,
      "filename": "aws-lambda-api-event-utils-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "eb77e6ba1137e18843d08db4ee80f5d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 37603,
      "upload_time": "2022-01-20T00:48:34",
      "upload_time_iso_8601": "2022-01-20T00:48:34.793292Z",
      "url": "https://files.pythonhosted.org/packages/e1/35/1a7b36ca0af6581a9d0e0a652c292e6c10b7a7f6ee456752d666ec94695d/aws-lambda-api-event-utils-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}