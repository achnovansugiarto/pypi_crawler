{
  "info": {
    "author": "Joe Kington",
    "author_email": "joferkington@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "mpldatacursor\n=============\n``mpldatacursor`` provides interactive \"data cursors\" (clickable annotation\nboxes) for matplotlib. \n\nMajor Changes in v0.7\n---------------------\n\nVersion 0.7 adds several bugfixes and minor features that have accumulated in\nmaster since 2016 but have not been in the stable release.\n\n* Support for matplotlib 3.x \n\n* Support for errorbars (error information displayed by default)\n\n* Allow hiding/toggling datacursor display by pressing \"t\"\n\n* Don't allow additional datacursors to be accidentally added during panning/zooming\n\n* Numerous bugfixes (special thanks to @anntzer and @nilswagner)\n\n\nBasic Usage\n-----------\n``mpldatacursor`` offers a few different styles of interaction through the \n``datacursor`` function. \n\nAs an example, this displays the x, y coordinates of the selected artist in an\nannotation box::\n\n        import matplotlib.pyplot as plt\n        import numpy as np\n        from mpldatacursor import datacursor\n\n        data = np.outer(range(10), range(1, 5))\n\n        fig, ax = plt.subplots()\n        lines = ax.plot(data)\n        ax.set_title('Click somewhere on a line')\n\n        datacursor(lines)\n\n        plt.show()\n\n.. image:: http://joferkington.github.com/mpldatacursor/images/basic.png\n    :align: center\n    :target: https://github.com/joferkington/mpldatacursor/blob/master/examples/basic.py\n\nIf no artist or sequence of artists is specified, all manually plotted artists\nin all axes in all figures will be activated. (This can be limited to only\ncertain axes by passing in an axes object or a sequence of axes to the ``axes``\nkwarg.)\n\nAs an example (the output is identical to the first example)::\n\n        import matplotlib.pyplot as plt\n        import numpy as np\n        from mpldatacursor import datacursor\n\n        data = np.outer(range(10), range(1, 5))\n\n        plt.plot(data)\n        plt.title('Click somewhere on a line')\n\n        datacursor()\n\n        plt.show()\n\nHiding Annotation Boxes and Keyboard Shortcuts\n----------------------------------------------\nTo hide a specific annotation box, right-click on it (Customizable through the\n``hide_button`` kwarg).  To hide all annotation boxes, press \"d\" on the\nkeyboard.  (Think of \"delete\".  \"h\" was taken by matplotlib's default key for\n\"home\".) Hitting \"d\" again will re-display all of the datacursors that were\nhidde. To disable or re-enable interactive datacursors, press \"t\" (for\n\"toggle\").  Pressing \"t\" will prevent clicks from creating datacursors until\n\"t\" is pressed again. ``<shift> + <right arrow>`` and ``<shift> + <left\narrow>`` will move the datacursor to the next or previous item in the sequence\nfor artists that support it.  At present, this is more-or-less limited to\nartists created with ``plot`` and ``scatter``. These keys can be customized\nthrough the ``keybindings`` kwarg.\n\nControlling the Displayed Text\n------------------------------\nThe displayed text can be controlled either by using the ``formatter`` kwarg, \nwhich expects a function that accepts an arbitrary sequence of kwargs and\nreturns the string to be displayed. Often, it's convenient to pass in the\n``format`` method of a template string (e.g. \n``formatter=\"longitude:{x:.2f}\\nlatitude{y:.2f}\".format``).\n\nAs an example of using the ``formatter`` kwarg to display only the label of the\nartist instead of the x, y coordinates::\n\n        import numpy as np\n        import matplotlib.pyplot as plt\n        from mpldatacursor import datacursor\n\n        x = np.linspace(0, 10, 100)\n\n        fig, ax = plt.subplots()\n        ax.set_title('Click on a line to display its label')\n\n        # Plot a series of lines with increasing slopes...\n        for i in range(1, 20):\n            ax.plot(x, i * x, label='$y = {}x$'.format(i))\n\n        # Use a DataCursor to interactively display the label for a selected line...\n        datacursor(formatter='{label}'.format)\n\n        plt.show()\n\n.. image:: http://joferkington.github.com/mpldatacursor/images/show_artist_labels.png\n    :align: center\n    :target: https://github.com/joferkington/mpldatacursor/blob/master/examples/show_artist_labels.py\n\nWorking with Images\n-------------------\n``datacursor`` will also display the array value at the selected point in an\nimage. This example also demonstrates using the ``display=\"single\"`` option to\ndisplay only one data cursor instead of one-per-axes.::\n\n        import matplotlib.pyplot as plt\n        import numpy as np\n        from mpldatacursor import datacursor\n\n        data = np.arange(100).reshape((10,10))\n\n        fig, axes = plt.subplots(ncols=2)\n        axes[0].imshow(data, interpolation='nearest', origin='lower')\n        axes[1].imshow(data, interpolation='nearest', origin='upper',\n                             extent=[200, 300, 400, 500])\n        datacursor(display='single')\n\n        fig.suptitle('Click anywhere on the image')\n\n        plt.show()\n\n.. image:: http://joferkington.github.com/mpldatacursor/images/image_example.png\n    :align: center\n    :target: https://github.com/joferkington/mpldatacursor/blob/master/examples/image_example.py\n\nDraggable Boxes\n---------------\nIf ``draggable=True`` is specified, the annotation box can be interactively\ndragged to a new position after creation.\n\nAs an example (This also demonstrates using the ``display='multiple'`` kwarg)::\n\n        import matplotlib.pyplot as plt\n        import numpy as np\n        from mpldatacursor import datacursor\n\n        data = np.outer(range(10), range(1, 5))\n\n        fig, ax = plt.subplots()\n        ax.set_title('Try dragging the annotation boxes')\n        ax.plot(data)\n\n        datacursor(display='multiple', draggable=True)\n\n        plt.show()\n\n.. image:: http://joferkington.github.com/mpldatacursor/images/draggable_example.png\n    :align: center\n    :target: https://github.com/joferkington/mpldatacursor/blob/master/examples/draggable_example.py\n\nFurther Customization\n---------------------\nAdditional keyword arguments to ``datacursor`` are passed on to ``annotate``.\nThis allows one to control the appearance and location of the \"popup box\",\narrow, etc.  Note that properties passed in for the ``bbox`` and ``arrowprops``\nkwargs will be merged with the default style.  Therefore, specifying things\nlike ``bbox=dict(alpha=1)`` will yield an opaque, yellow, rounded box, instead\nof matplotlib's default blue, square box. As a basic example::\n\n        import matplotlib.pyplot as plt\n        import numpy as np\n        from mpldatacursor import datacursor\n\n        fig, axes = plt.subplots(ncols=2)\n\n        left_artist = axes[0].plot(range(11))\n        axes[0].set(title='No box, different position', aspect=1.0)\n\n        right_artist = axes[1].imshow(np.arange(100).reshape(10,10))\n        axes[1].set(title='Fancy white background')\n\n        # Make the text pop up \"underneath\" the line and remove the box...\n        dc1 = datacursor(left_artist, xytext=(15, -15), bbox=None)\n\n        # Make the box have a white background with a fancier connecting arrow\n        dc2 = datacursor(right_artist, bbox=dict(fc='white'),\n                         arrowprops=dict(arrowstyle='simple', fc='white', alpha=0.5))\n\n        plt.show()\n\n.. image:: http://joferkington.github.com/mpldatacursor/images/change_popup_color.png\n    :align: center\n    :target: https://github.com/joferkington/mpldatacursor/blob/master/examples/change_popup_color.py\n\nHighlighting Selected Lines\n---------------------------\n``HighlightingDataCursor`` highlights a ``Line2D`` artist in addition to\ndisplaying the selected coordinates.::\n\n        import numpy as np\n        import matplotlib.pyplot as plt\n        from mpldatacursor import HighlightingDataCursor\n\n        x = np.linspace(0, 10, 100)\n\n        fig, ax = plt.subplots()\n\n        # Plot a series of lines with increasing slopes...\n        lines = []\n        for i in range(1, 20):\n            line, = ax.plot(x, i * x, label='$y = {}x$'.format(i))\n            lines.append(line)\n\n        HighlightingDataCursor(lines)\n\n        plt.show()\n\n.. image:: http://joferkington.github.com/mpldatacursor/images/highlighting_example.png\n    :align: center\n    :target: https://github.com/joferkington/mpldatacursor/blob/master/examples/highlighting_example.py\n\nInstallation\n------------\n``mpldatacursor`` can be installed from PyPi using\n``easy_install``/``pip``/etc. (e.g. ``pip install mpldatacursor``) or you may\ndownload the source and install it directly with ``python setup.py install``.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joferkington/mpldatacursor/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mpldatacursor-rcognita",
    "package_url": "https://pypi.org/project/mpldatacursor-rcognita/",
    "platform": "",
    "project_url": "https://pypi.org/project/mpldatacursor-rcognita/",
    "project_urls": {
      "Homepage": "https://github.com/joferkington/mpldatacursor/"
    },
    "release_url": "https://pypi.org/project/mpldatacursor-rcognita/0.7.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Interactive data cursors for Matplotlib",
    "version": "0.7.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11446800,
  "releases": {
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2e28c24cc6eb7fd4b3b6ac972d1610a25aef46ce26604062de56576cb366a08",
          "md5": "3181ff48f1f3553cb03c181e5ffe3884",
          "sha256": "42cb416a8111a92d193d7c68ca6fd8999f4fdd2b009033fd3b0e159be77c7c23"
        },
        "downloads": -1,
        "filename": "mpldatacursor-rcognita-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3181ff48f1f3553cb03c181e5ffe3884",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28225,
        "upload_time": "2021-09-14T00:38:46",
        "upload_time_iso_8601": "2021-09-14T00:38:46.072619Z",
        "url": "https://files.pythonhosted.org/packages/d2/e2/8c24cc6eb7fd4b3b6ac972d1610a25aef46ce26604062de56576cb366a08/mpldatacursor-rcognita-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e15fe74b5416f9c09d3c80a1cf946f85d353bbe801db94a6a102e1fa1bb73109",
          "md5": "327769c81f1c92c7316278d334111c8e",
          "sha256": "2e718602bbe5c2a215a03d515cf221b0b345d889683c6fe6eeb172455d2fc86c"
        },
        "downloads": -1,
        "filename": "mpldatacursor-rcognita-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "327769c81f1c92c7316278d334111c8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28228,
        "upload_time": "2021-09-14T11:48:52",
        "upload_time_iso_8601": "2021-09-14T11:48:52.704449Z",
        "url": "https://files.pythonhosted.org/packages/e1/5f/e74b5416f9c09d3c80a1cf946f85d353bbe801db94a6a102e1fa1bb73109/mpldatacursor-rcognita-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e15fe74b5416f9c09d3c80a1cf946f85d353bbe801db94a6a102e1fa1bb73109",
        "md5": "327769c81f1c92c7316278d334111c8e",
        "sha256": "2e718602bbe5c2a215a03d515cf221b0b345d889683c6fe6eeb172455d2fc86c"
      },
      "downloads": -1,
      "filename": "mpldatacursor-rcognita-0.7.2.tar.gz",
      "has_sig": false,
      "md5_digest": "327769c81f1c92c7316278d334111c8e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28228,
      "upload_time": "2021-09-14T11:48:52",
      "upload_time_iso_8601": "2021-09-14T11:48:52.704449Z",
      "url": "https://files.pythonhosted.org/packages/e1/5f/e74b5416f9c09d3c80a1cf946f85d353bbe801db94a6a102e1fa1bb73109/mpldatacursor-rcognita-0.7.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}