{
  "info": {
    "author": "Alexander Berkovich",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Desktop Environment",
      "Topic :: Education",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "## selenium-support\n\nI’ve started to use Selenium’s related products and how found that documentation is misleading, it doesn’t promote \nbest practice. \n\nMoreover, many components has memory/resource leaks that are not fixed for years.\n\nSo I’ve created utility project that encapsulated my “fixes” to Selenium and promotes best practice.\n\nI will list some of the capabilities of my library:\n\n* create/destroy BmpDaemon(aka browsermobproxy.Server).\n* create/destroy BmpProxy (aka browsermobproxy.Client).\n* create/destroy SeleniumWebDriver (for example selenium.webdriver.Chrome.webdriver). (Can be any supported browser).\n* Taking screenshots.\n* Preparing browser’s data-dir for usage.\n* Enabling browser to download files.\n* Capturing network in har format.\n* Waiting for page to load.\n* Synchronous click (on the button).\n* Wait for Google Chrome to finish to download file (Chrome specific).\n* Wait for display.\n\n### Getting Help\n\n\n### QuickStart\n```bash\npython -m pip install -U selenium-support\n```\n\n\n### Installing from Github\n\n```bash\npython -m pip install -U https://github.com/alex-ber/selenium-support/archive/master.zip\n```\nOptionally installing tests requirements.\n\n```bash\npython -m pip install -U https://github.com/alex-ber/selenium-support/archive/master.zip#egg=alex-ber-utils[tests]\n```\n\nOr explicitly:\n\n```bash\nwget https://github.com/alex-ber/selenium-support/archive/master.zip -O master.zip; unzip master.zip; rm master.zip\n```\nAnd then installing from source (see below).\n\n\n### Installing from source\n```bash\npython -m pip install -r req.txt # only installs \"required\" (relaxed)\n```\n```bash\npython -m pip install . # only installs \"required\"\n```\n```bash\npython -m pip install .[tests] # installs dependencies for tests\n```\n\n#### Alternatively you install install from requirements file:\n```bash\npython -m pip install -r requirements.txt # only installs \"required\"\n```\n```bash\npython -m pip install -r requirements-tests.txt # installs dependencies for tests\n```\n\n\n### Using Docker\n`alexberkovich/selenium_support:latest`  contains all `selenium_support` dependencies.\nThis Dockerfile is very simple, you can take relevant part for you and put them into your Dockerfile.\n\n##\nAlternatively, you can use it as base Docker image for your project and add/upgrade \nanother dependencies as you need.\n\nFor example:\n\n```Dockerfile\nFROM alexberkovich/selenium_support:latest\n\nCOPY requirements.txt etc/requirements.txt\n\nRUN set -ex && \\\n    #latest pip,setuptools,wheel\n    pip install --upgrade pip setuptools wheel && \\\n    pip install selenium_support \n    pip install -r etc/requirements.txt \n\nCMD [\"/bin/sh\"]\n#CMD tail -f /dev/null\n```\n\nwhere `requirements.txt` is requirements for your project.\n\n##\n\nFrom the directory with setup.py\n```bash\npython setup.py test #run all tests\n```\n\nor\n\n```bash\n\npytest\n```\n\n## Installing new version\nSee https://docs.python.org/3.1/distutils/uploading.html \n\n## Installing new version to venv\n\n```bash\npython38 -m pip uninstall --yes selenium-support\npython38 setup.py clean sdist bdist_wheel\npython38 -m pip install --find-links=./dist selenium-support==0.1\n```\n\n\n```bas  h\npython setup.py sdist upload\n```\n\n## Requirements\n\n\nselenium-support requires the following modules.\n\n* Python 3.8+\n* selenium\n* browsermob-proxy\n* psutil\n\n\n# Changelog\n\nUseful functions for Selenium umbrella project.\n\nAll notable changes to this project will be documented in this file.\n\n\\#https://pypi.org/manage/project/selenium-support/releases/\n\n## [Unrelased]\n\n\n## [0.0.1] - 18/04/2021\n### Added\nAll functions below are listed in `alexber.seleniumsupport` package.  \nSee https://alex-ber.medium.com/selenium-support-19330843c63a for more details.\n\n* `BMPDaemon` is  context-manager that responsible for starting BMP Daemon. In the exit from the code block \ninside context-manager, BMP Daemon will be stopped, see `closeBmpDaemon()`.\n\nSee https://github.com/AutomatedTester/browsermob-proxy-py/blob/master/browsermobproxy/server.py#L59 \nfor undocumented values.\n\nIf you have multiple application that uses BMP Daemon, you have 2 basic choices:\n\n*  Start BMP Daemon outside of scope of these application (maybe as 3 application or as OS Daemon or just manually) \nin some predefined port (the default is 8080) and write your application code that assumes that BMP Daemon is up \nand running.\n\n* Each application will start BMP Daemon on different port.\n\nI want to *emphasize*, technically it is sufficient to have only 1 running BMP Daemon for all application \n(You will create BMP Proxy per application).\n\nPersonally, I’ve found the second option easier to manage — namely to have multiple BMP Daemons, one per application. \n\nThis is indeed waste of resources, but the application lifecycle is much easier to manage and you don’t \nhave some external dependencies. Note, however, that in such case you should, at least in one application, \nexplicitly provide the port number. It is better that they will far away one from another, because BMP Proxy is \ncreated as next port number.\n\nThis context-manager also worries to close BMP Daemon. See `closeBmpDaemon()` below. \n\nIf you use it as regular function, this will not happen. \n\n* `closeBmpDaemon` If you’re using BMPDaemon as context-manager, it will worry to close the BMP Daemon. \nIf you want to do it yourself, you can call `closeBmpDaemon()` function.\nSee https://github.com/AutomatedTester/browsermob-proxy-py/issues/8#issuecomment-679150656\n\n* `BrowserDataDir` -  this context manager can be used for reuse of user data dir. It unzips file template \n(*path/to/chrome_data_dir.zip* in our case) to work_dir (*logs* in our case).\nIt returns directory  with extracted content from template.\n\nIf you want your browser to work with some predefined user data dir (\"profile\" in Mozilla Firefox).\n\nFor more on Google Chrome see https://stackoverflow.com/a/55636113/1137529, for \nMozilla Firefox see https://firefox-source-docs.mozilla.org/testing/geckodriver/CrashReports.html.\n\nFor example, on Windows you can create shortcut: \n`\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --user-data-dir=C:\\tmp\\chrome_profile`. \n\nClick on it to create all internal folders and than pass `C:\\tmp\\chrome_profile` as `--user-data-dir` to \nGoogle Chrome option's argument.\n\n* `BMPPRoxy` -  this context manager is designed to create BMP Proxy on new port. It assumes that BMPDaemon is \nalready up. \n\nIt doesn't require BMPDaemon object, but only some of it's parameters.\n\nBy default it assumes, that BMPDaemon is running on localhost. By default it also assumes that it is \nrunning on port 8080, you may want to override this value.\n\nThis context manager returns BMP Proxy.\n\nIn the exit from the code block inside context-manager, it closes BMP Proxy.\n\n* `SeleniumWebDriver` - this context manager is designed to create Web Driver. It assumes that BMPDaemon is already up. \nYou may pass BMPPRoxy if you want to use it. It doesn't require BMPDaemon object. It returns Web Driver. \nIn the exit from the code block inside context-manager, it close Web Driver, see \n`closeSeleniumWebDriver()` for the details.\n\n*Note:* Web Driver consists of Python wrapper and some executable file (chromedriver.exe, for example). \nThe term 'Web Driver' (confusingly) refers to both.\n\n*Note*: There is some complexity on how to create general-purpose context-manager that will work for any Web Driver. \nFor example, Google Chrome and Mozilla Firefox has different option's class. \n\nMy implementation is inspired by \nhttps://github.com/clemfromspace/scrapy-selenium/blob/develop/scrapy_selenium/middlewares.py\n\n* `closeSeleniumWebDriver()` If you're using SeleniumWebDriver as context-manager, it will worry to close Web Driver. \nIf you want to do it yourself, you can call closeSeleniumWebDriver() function.\n\nYou may wonder why call to web_driver.quit() is not sufficient. \n*Note* (**be aware!**): you shouldn't confuse this call with `web_driver.close()`. \nThe last call will close only the tab and not browser itself.\n\nWhy web_driver.quit() is not enough?\n\nI have noticed, that sometimes, when exception is raised, but not always, Google Chrome browser and/or \nchromedriver.exe remain residents in memory.\n\nWhen I've added the same logic to close all ancestor processes that was opened in Web Driver initialization, \nthis never happens again.\n\nSee `closeBmpDaemon()`\n\nSee https://github.com/AutomatedTester/browsermob-proxy-py/issues/8#issuecomment-679150656\n\n* `Screenshot` is designed to be used as context-manager.\n\nIf you want API for simple function call, please use `save_screenshot()`.\n\nYou may want to guard piece of you code with this context-manager. It is required that you instantiated `web_driver` \nfirst.\n\n* `save_screenshot()` is regular function API. If you want a context-manager, please use `Screenshot`.\n\nMaybe, you have some try-finally block and you want when you've caught an exception from `web_driver` to get \nscreenshot in order to understand better what went wrong. \n\nPersonally, I prefer to use Screenshot, but in some complex scenario you may want to have better control.\n\n*Note*: you can define `dd['browser_download_folder']` as following\n`dd['files']['browser_download_folder'] = str(Path(Path.home(), 'Downloads'))`\n\nSee see https://stackoverflow.com/questions/37480641/how-do-i-view-the-screenshot-available-via-screen\n\n* `enable_chrome_download()` is Google Chrome specific function.\n\nIn Google Chrome in headless mode download is disabled by default. \nIt's a \"feature\", for security. If you want to enable download you can use this function. \n\n\nSee https://stackoverflow.com/questions/45631715/downloading-with-chrome-headless-and-selenium for more details.\nSee also https://bugs.chromium.org/p/chromium/issues/detail?id=696481.\n\n\n* `set_new_har()` is convenient wrapper to `bmp_proxy.new_har()` with `capture*` parameters. \n\nIt is used to get network transmission. For example, if you want to get response body. \n\nSee https://medium.com/@jiurdqe/how-to-get-json-response-body-with-selenium-amd-browsermob-proxy-71f10335c66 \nfor more details.\n\nNote:\n\n1. You should call `bmp_proxy.wait_for_traffic_to_stop(5, 70)` first (you can change parameters).\nHere we're waiting (5 ms) for network traffic to stop (with timeout of 70 ms). It is needed to ensure that BMP Proxy \nhas recorded all network traffic (up to this point).\n\n2. You should use `for ent in reversed(d['log']['entries']):`, note reversed builtin (it is absent in the link above).\nIf you have multiple calls to same URL, you should look on last result, so you should reverse the order of log entries.\n\n\nThis call is equivalent to click on *\"Start recording\"* on *Network* tab of *Page Inspector*.\n\n* `wait_page_loaded()` is helper function to ensure that some basic elements of the page, such as title are loaded.\n\nUsage example:\n\n```python\nfrom alexber.seleniumsupport import wait_page_loaded\nwait = WebDriverWait(web_driver, timeout=70, poll_frequency=1)\nwait_page_loaded(wait)\n```\n\n* `click_sync()`- sometimes calling click() on WebElement raise some weird exception. \nThe best practice will be to use `wait.until(EC.element_to_be_clickable((By.XPATH, 'xpath')))`. \nThis is \"dirty\" solution that make synchronous call (by using JavaScript) on `WebElement.click()` \n\n(WebElement is typically button). See https://stackoverflow.com/a/58378714/1137529 for more details.\n\nUsage example:\n```python\n\nfrom alexber.seleniumsupport import click_sync\nwait = WebDriverWait(web_driver, timeout=70, poll_frequency=1)\nclick_sync(web_driver,\n                 wait.until(EC.element_to_be_clickable(\n                    (By.XPATH, 'xpath'))))\n```\n\nSee see https://stackoverflow.com/a/58378714/1137529 \n\n* `wait_chrome_file_finished_downloades() `is Google Chrome specific function.\n\nIt works directly with file system. You should know the file_name beforehand. \nIt relies on Google Chrome following internal mechanism:\n\n* When Google Chrome downloads file, it has extension \".crdownload\". \n* When downloads is finished it Google Chrome rename the file removing this extension.\n\nThis function doesn't rely on Google Chrome's downloads status.\n\nOn Windows, we can see wrong state of the filesystem. This is the reason for rerty-with-sleep mechanism.\n\n\nSee \nhttps://docs.python.org/3/library/os.html#os.scandir\n\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85).aspx\n\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa364428(v=vs.85).aspx\n\n*Note:* if the file is very bigger (more than 200MB) you may need to increase retries number.\n\n*` wait_for_display()` - Sometimes, we want to make Selenium Web driver wait until elements style attribute has changed. \n\nThis is usefull for dynamically loaded material. \n\nFor example, we want to wait for the display style to change to none (or to \"inline-block\" or some other value). \n\nSee https://stackoverflow.com/questions/34915421/make-selenium-driver-wait-until-elements-style-attribute-has-changed\n\nUsage example:\n```python\nfrom alexber.seleniumsupport import wait_for_display\nwait = WebDriverWait(web_driver, timeout=70, poll_frequency=1)\nwait.until(wait_for_display((By.XPATH, 'xpath')))\n```\n\nSee https://stackoverflow.com/questions/34915421/make-selenium-driver-wait-until-elements-style-attribute-has-changed\n\n<!--\n### Added \n### Changed\n### Removed\n-->\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alex-ber/selenium-support",
    "keywords": "Selenium support BMP browsermobproxy web_driver driver Chrome Firefox har download  wait wait_page_loaded click click_sync wait_chrome_file_finished_downloades wait_for_display",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "selenium-support",
    "package_url": "https://pypi.org/project/selenium-support/",
    "platform": "",
    "project_url": "https://pypi.org/project/selenium-support/",
    "project_urls": {
      "Homepage": "https://github.com/alex-ber/selenium-support"
    },
    "release_url": "https://pypi.org/project/selenium-support/0.0.1/",
    "requires_dist": [
      "browsermob-proxy (==0.8.0)",
      "psutil (==5.8.0)",
      "requests (==2.24.0)",
      "selenium (==3.141.0)",
      "six (==1.15.0)",
      "urllib3 (==1.25.11)",
      "alex-ber-utils (==0.6.5) ; extra == 'tests'",
      "attrs (==20.2.0) ; extra == 'tests'",
      "mock (==4.0.2) ; extra == 'tests'",
      "py (==1.9.0) ; extra == 'tests'",
      "pytest (==6.1.2) ; extra == 'tests'",
      "pytest-assume (==2.3.3) ; extra == 'tests'",
      "pytest-mock (==3.3.1) ; extra == 'tests'",
      "PyYAML (==5.1) ; extra == 'tests'",
      "toml (==0.10.2) ; extra == 'tests'",
      "pluggy (==0.13.1) ; extra == 'tests'",
      "packaging (==20.4) ; extra == 'tests'",
      "iniconfig (==1.1.1) ; extra == 'tests'",
      "pyparsing (==2.4.7) ; extra == 'tests'"
    ],
    "requires_python": ">=3.8",
    "summary": "Usefull function for Selenium umbrella project",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10096596,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d113fe5d3b9a236cc03a00d220929fba6cbaa87ee816a4e3dacaa6b1302281a",
          "md5": "1b4036b31eeaa387b0beac83c1226d0c",
          "sha256": "d6e044f321db499839c5a5966404cc9329014e43256c90b8d17469f473d6fe2d"
        },
        "downloads": -1,
        "filename": "selenium_support-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b4036b31eeaa387b0beac83c1226d0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15514,
        "upload_time": "2021-04-18T07:40:50",
        "upload_time_iso_8601": "2021-04-18T07:40:50.115222Z",
        "url": "https://files.pythonhosted.org/packages/6d/11/3fe5d3b9a236cc03a00d220929fba6cbaa87ee816a4e3dacaa6b1302281a/selenium_support-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f66b6c71472a820a7367523e39052d45cac86256174e00bf2d037f8d4391b00",
          "md5": "b6b41594cc475de8fccfc09da6352bab",
          "sha256": "15005ab317291e98ce4bb08978b8c60f9b01e89c71ae7007d8dc3822f1d680d7"
        },
        "downloads": -1,
        "filename": "selenium_support-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6b41594cc475de8fccfc09da6352bab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21457,
        "upload_time": "2021-04-18T07:40:52",
        "upload_time_iso_8601": "2021-04-18T07:40:52.161715Z",
        "url": "https://files.pythonhosted.org/packages/0f/66/b6c71472a820a7367523e39052d45cac86256174e00bf2d037f8d4391b00/selenium_support-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a84ef380f0fb49560c475b105e2ed424fbd062614aa85d3fcac3819beb1d049",
          "md5": "73ea9fe228d08e3c3a52e7f6c07c6687",
          "sha256": "de579cdc7435cd05c4adcf8e0a19fd53e5d7943ecde8032cd02f5ce28e1c7121"
        },
        "downloads": -1,
        "filename": "selenium_support-0.0.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73ea9fe228d08e3c3a52e7f6c07c6687",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8376,
        "upload_time": "2021-04-07T10:49:49",
        "upload_time_iso_8601": "2021-04-07T10:49:49.043403Z",
        "url": "https://files.pythonhosted.org/packages/8a/84/ef380f0fb49560c475b105e2ed424fbd062614aa85d3fcac3819beb1d049/selenium_support-0.0.1b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "925afa330b667797fca4eeee53b2a7a538eb065cb97ef4e3d9b1b5295503ad9e",
          "md5": "fe4b477f6623f96e5348191300d4f9ab",
          "sha256": "f7ee7533c9401faeaae5a7eb6ab5daaf1e16b8891725a6ff17d782a272691390"
        },
        "downloads": -1,
        "filename": "selenium_support-0.0.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe4b477f6623f96e5348191300d4f9ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10441,
        "upload_time": "2021-04-07T10:49:50",
        "upload_time_iso_8601": "2021-04-07T10:49:50.622792Z",
        "url": "https://files.pythonhosted.org/packages/92/5a/fa330b667797fca4eeee53b2a7a538eb065cb97ef4e3d9b1b5295503ad9e/selenium_support-0.0.1b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d113fe5d3b9a236cc03a00d220929fba6cbaa87ee816a4e3dacaa6b1302281a",
        "md5": "1b4036b31eeaa387b0beac83c1226d0c",
        "sha256": "d6e044f321db499839c5a5966404cc9329014e43256c90b8d17469f473d6fe2d"
      },
      "downloads": -1,
      "filename": "selenium_support-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b4036b31eeaa387b0beac83c1226d0c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 15514,
      "upload_time": "2021-04-18T07:40:50",
      "upload_time_iso_8601": "2021-04-18T07:40:50.115222Z",
      "url": "https://files.pythonhosted.org/packages/6d/11/3fe5d3b9a236cc03a00d220929fba6cbaa87ee816a4e3dacaa6b1302281a/selenium_support-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f66b6c71472a820a7367523e39052d45cac86256174e00bf2d037f8d4391b00",
        "md5": "b6b41594cc475de8fccfc09da6352bab",
        "sha256": "15005ab317291e98ce4bb08978b8c60f9b01e89c71ae7007d8dc3822f1d680d7"
      },
      "downloads": -1,
      "filename": "selenium_support-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b6b41594cc475de8fccfc09da6352bab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 21457,
      "upload_time": "2021-04-18T07:40:52",
      "upload_time_iso_8601": "2021-04-18T07:40:52.161715Z",
      "url": "https://files.pythonhosted.org/packages/0f/66/b6c71472a820a7367523e39052d45cac86256174e00bf2d037f8d4391b00/selenium_support-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}