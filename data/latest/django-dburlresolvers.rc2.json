{
  "info": {
    "author": "Manuel Saelices",
    "author_email": "msaelices@yaco.es",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-dburlresolvers\n=====================\n\nA URL resolver which store the URL patterns in database, which means a webmaster can define some URLs.\n\nInstalling\n----------\n\nInstall package from pypi::\n\n    $ easy_install django-dburlresolvers\n\nPut ``dbresolver`` into your installed applications::\n\n    INSTALLED_APPS = (\n        ...\n        'dbresolver',\n    )\n\nChange the project ``urls.py`` file like this::\n\n    from dbresolver import get_dbresolver_patterns\n\n    urlpatterns = patterns('',\n        ... # your URLs\n    )\n\n    urlpatterns += get_dbresolver_patterns()\n\n\nUsage\n-----\n\nRegister some views of your project to get available in ``dbresolver``. You may\nregister it manually or automatically (by autodiscovering):\n\n* Manually: Using the ``dbresolver`` API directly::\n\n    >>> from dbresolver import register_view\n    >>> from fooapp.views import foo_listing\n    >>> register_view(foo_listing, 'Foo listing')\n\n* Automatically: Put this code in your project (we recommended in the project ``urls.py``)::\n\n    from dbresolver import autodiscover_views\n    autodiscover_views()\n\n  You need to define an especial ``views_to_register`` method, like ilustrate this example::\n\n    def foo_listing(request):\n        foo_list = FooModel.objects.all()\n        return render_to_response('fooapp/foo_listing.html',\n                                {'foo_list': foo_list},\n                                 context_instance=RequestContext(request))\n\n    def views_to_register():\n        \"\"\" returns views to be registered with dbresolver \"\"\"\n        return (\n            (foo_listing, _('Foo listing')),\n        )\n\nAlso you can register generic views with parameters. For example, imagine you\nhave a view like this::\n\n    def render_template(request, template_name=None):\n        try:\n            return direct_to_template(request, template=template_name)\n        except TemplateDoesNotExist:\n            raise Http404()\n\nYou may register the view with a parameter which be defined for admin user::\n\n    >>> from configfield import params\n    >>> register_view(render_template, 'Generic view to render a template',\n                      params=(\n                          params.Template(\n                              name='template_name',\n                              label='Template to be rendered',\n                          ),\n                      ))\n\nIf you want autoregistering of that view, the code was like this::\n\n    def views_to_register():\n        return (\n            {'view': render_template,\n             'label': 'Generic view to render a template',\n             'params': (\n                 params.Template(name='template_name', label='Template to be rendered'),\n            )},\n\nNow you only have to enter on admin site to create URL patterns attached to\nviews. You can use both Django `default regular expressions`_ and simpler\n`surlex expressions`_.\n\n.. _`default regular expressions`: http://docs.djangoproject.com/en/dev/topics/http/urls/\n.. _`surlex expressions`: http://codysoyland.com/projects/surlex/documentation/\n\n\n\n0.1.0-beta\n----------\nFixed a model form error when used outside admin.\n\n0.1.0-alpha\n-----------\n\nInitial version",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-dburlresolvers",
    "package_url": "https://pypi.org/project/django-dburlresolvers/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-dburlresolvers/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/django-dburlresolvers/0.1.0-beta2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django-based URL resolving mechanism, which store the URL patterns in database",
    "version": "0.1.0-beta2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 789440,
  "releases": {
    "0.1.0-beta": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce7a5cabd18fc6d8ffe6696d5a08e0a9d1f095d259b6b62e366b8569f0b44b7c",
          "md5": "8b93527f3ce98f1d1cdfbe14cafd7677",
          "sha256": "767c082571518a40441684300fe9087c54e17325e0b4252cc90189ad6c2e9d57"
        },
        "downloads": -1,
        "filename": "django-dburlresolvers-0.1.0-beta.tar.gz",
        "has_sig": false,
        "md5_digest": "8b93527f3ce98f1d1cdfbe14cafd7677",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10944,
        "upload_time": "2011-03-07T18:20:52",
        "upload_time_iso_8601": "2011-03-07T18:20:52.719659Z",
        "url": "https://files.pythonhosted.org/packages/ce/7a/5cabd18fc6d8ffe6696d5a08e0a9d1f095d259b6b62e366b8569f0b44b7c/django-dburlresolvers-0.1.0-beta.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0-beta2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c493a5b529eb5e593f59f61dcc24fe77d7d1a5d974221b42f73796a4bf6fea23",
          "md5": "3ae600ab30c77d69cf70a4458a827d55",
          "sha256": "a1bd290f964d212c894452c4e89081f0e072df47c8dde64e63ab75040bb4e41b"
        },
        "downloads": -1,
        "filename": "django-dburlresolvers-0.1.0-beta2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ae600ab30c77d69cf70a4458a827d55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11660,
        "upload_time": "2011-03-09T13:54:36",
        "upload_time_iso_8601": "2011-03-09T13:54:36.995790Z",
        "url": "https://files.pythonhosted.org/packages/c4/93/a5b529eb5e593f59f61dcc24fe77d7d1a5d974221b42f73796a4bf6fea23/django-dburlresolvers-0.1.0-beta2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c493a5b529eb5e593f59f61dcc24fe77d7d1a5d974221b42f73796a4bf6fea23",
        "md5": "3ae600ab30c77d69cf70a4458a827d55",
        "sha256": "a1bd290f964d212c894452c4e89081f0e072df47c8dde64e63ab75040bb4e41b"
      },
      "downloads": -1,
      "filename": "django-dburlresolvers-0.1.0-beta2.tar.gz",
      "has_sig": false,
      "md5_digest": "3ae600ab30c77d69cf70a4458a827d55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11660,
      "upload_time": "2011-03-09T13:54:36",
      "upload_time_iso_8601": "2011-03-09T13:54:36.995790Z",
      "url": "https://files.pythonhosted.org/packages/c4/93/a5b529eb5e593f59f61dcc24fe77d7d1a5d974221b42f73796a4bf6fea23/django-dburlresolvers-0.1.0-beta2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}