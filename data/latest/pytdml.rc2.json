{
  "info": {
    "author": "Boyi Shangguan",
    "author_email": "sgby@whu.edu.cn",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "# pytdml\r\n\r\n[pytdml](https://github.com/TrainingDML/pytdml) is a pure python parser and encoder for training datasets based on OGC\r\nTraining Data Markup Language for AI standard.\r\n\r\n---\r\n\r\n## Installation\r\n\r\nThe package can be installed via pip.\r\n\r\n### Requirements\r\n\r\n* Python 3 and above\r\n\r\n### Dependencies\r\n\r\nDependencies are listed in [requirements.txt](https://github.com/TrainingDML/pytdml/blob/main/requirements.txt). Dependencies are automatically installed during\r\npytdml's installation.\r\n\r\n### Installing the Package\r\n\r\n```bash\r\npip install pytdml\r\n```\r\n\r\n---\r\n\r\n## Usage\r\n\r\n### Encoding\r\n\r\n#### From the command line\r\n\r\nThe training dataset can be encoded to TrainingDML-AI JSON format by YAML configuration file with command line.\r\n\r\n```bash\r\npytdml/yaml_to_tdml.py --config=<YAML configuration file path> --output=<Output TrainingDML-AI JSON file path>\r\n```\r\n\r\nYAML configuration file schema is described in [encoding YAML configuration file schema](https://github.com/TrainingDML/pytdml/blob/main/encoding_config_schema.yml).\r\n\r\n#### Using the API from python\r\n\r\nThe training dataset can also be encoded to TrainingDML-AI JSON format with Python API.\r\n\r\n```python\r\nfrom pytdml.io import write_to_json\r\nfrom pytdml.type import EOTrainingDataset, EOTrainingData, EOTask, EODataSource, SceneLabel\r\n\r\n# generate EO training dataset\r\ndataset = EOTrainingDataset(\r\n    id='...',\r\n    name='...',\r\n    description='...',\r\n    data=[\r\n        EOTrainingData(\r\n            id='...',\r\n            labels=[\r\n                SceneLabel(\r\n                    label_class='...',\r\n                    data_url='...',\r\n                    date_time='...'),\r\n                ...\r\n            ]),\r\n        ...\r\n    ],\r\n    version=\"...\",\r\n    amount_of_training_data=...,\r\n    created_time=\"...\",\r\n    updated_time=\"...\",\r\n    providers=[\"...\"],\r\n    keywords=[\"...\", \"...\"],\r\n    tasks=[EOTask(task_type=\"...\",\r\n                  description=\"...\")],\r\n    data_sources=[EODataSource(\r\n        id=\"...\",\r\n        data_type=\"...\",\r\n        resolution=\"...\"\r\n    )],\r\n    classes=[\"...\", \"...\", \"...\"],\r\n    number_of_classes=...,\r\n    bands=[\"...\", \"...\", \"...\"],\r\n    image_size=\"...\"\r\n)\r\n# write to json\r\nwrite_to_json(dataset, \"dataset.json\")\r\n```\r\n\r\n### Parsing\r\n\r\nThe training dataset described with TrainingDML-AI JSON file can be parsed with python API and transformed to\r\nPyTorch/TensorFlow dataset.\r\n\r\n#### Read TrainingDataset object from JSON file\r\n\r\n```python\r\nimport pytdml\r\n\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\nprint(\"Load training dataset: \" + training_dataset.name)\r\nprint(\"Number of training samples: \" + str(training_dataset.amount_of_training_data))\r\nprint(\"Number of classes: \" + str(training_dataset.number_of_classes))\r\n```\r\n\r\n#### Transform to PyTorch dataset\r\n\r\n* Scene classification dataset\r\n\r\n```python\r\nimport pytdml\r\nfrom torchvision import transforms\r\n\r\n# Load the training dataset\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\n\r\n# Transform the training dataset\r\nclass_map = pytdml.ml.creat_class_map(training_dataset)  # create class map\r\ntrain_dataset = pytdml.ml.TorchEOImageSceneTD(  # create Torch train dataset\r\n    training_dataset.data,\r\n    class_map,\r\n    transform=transforms.Compose(  # transform for the training set\r\n        [transforms.RandomResizedCrop(size=156, scale=(0.8, 1.0)),  # random resize\r\n         transforms.RandomRotation(degrees=15),  # random rotate\r\n         transforms.RandomHorizontalFlip(),  # random flip\r\n         transforms.CenterCrop(size=124),  # center crop\r\n         transforms.ToTensor(),  # transform to tensor\r\n         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # normalize\r\n         ]\r\n    ))\r\n```\r\n\r\n* Object detection dataset\r\n\r\n```python\r\nimport pytdml\r\n\r\n# Load the training dataset\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\n\r\n# Transform the training dataset\r\nclass_map = pytdml.ml.creat_class_map(training_dataset)  # create class map\r\ntrain_dataset = pytdml.ml.TorchEOImageObjectTD(  # create Torch train dataset\r\n    training_dataset.data,\r\n    class_map,\r\n    transform=pytdml.ml.BaseTransform([128, 128])\r\n)\r\n```\r\n\r\n* Semantic segmentation dataset\r\n\r\n```python\r\nimport pytdml\r\nfrom torchvision import transforms\r\n\r\n# Load the training dataset\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\n\r\n# Transform the training dataset\r\nclass_map = pytdml.ml.creat_class_map(training_dataset)  # create class map\r\ntrain_dataset = pytdml.ml.TorchEOImageSegmentationTD(  # create Torch train dataset\r\n    training_dataset.data,\r\n    class_map,\r\n    transform=transforms.Compose([\r\n        transforms.ToTensor(),\r\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\r\n    ])\r\n)\r\n```\r\n\r\n#### Transform to TensorFlow dataset\r\n\r\n* Scene classification dataset\r\n\r\n```python\r\nimport pytdml\r\n\r\n# Load the training dataset\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\n\r\n# Transform the training dataset\r\nclass_map = pytdml.ml.creat_class_map(training_dataset)  # create class map\r\ntrain_dataset = pytdml.ml.TensorflowEOImageSceneTD(  # create TensorFlow train dataset\r\n    training_dataset.data,\r\n    class_map\r\n)\r\ntf_train_dataset = train_dataset.create_dataset()\r\n```\r\n\r\n* Object detection dataset\r\n\r\n```python\r\nimport pytdml\r\n\r\n# Load the training dataset\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\n\r\n# Transform the training dataset\r\nclass_map = pytdml.ml.creat_class_map(training_dataset)  # create class map\r\ntrain_dataset = pytdml.ml.TensorflowEOImageObjectTD(  # create TensorFlow train dataset\r\n    training_dataset.data,\r\n    class_map\r\n)\r\ntf_train_dataset = train_dataset.create_dataset()\r\n```\r\n\r\n* Semantic segmentation dataset\r\n\r\n```python\r\nimport pytdml\r\n\r\n# Load the training dataset\r\ntraining_dataset = pytdml.io.read_from_json(\"dataset.json\")  # read from TDML json file\r\n\r\n# Transform the training dataset\r\nclass_map = pytdml.ml.creat_class_map(training_dataset)  # create class map\r\ntrain_dataset = pytdml.ml.TensorflowEOImageSegmentationTD(  # create TensorFlow train dataset\r\n    training_dataset.data,\r\n    class_map\r\n)\r\ntf_train_dataset = train_dataset.create_dataset()\r\n```\r\n\r\n### Image Cropping\r\n\r\nThe images of training dataset in TrainingDML-AI JSON format can be cropped with command line for preprocessing.\r\n\r\n```bash\r\npytdml/tdml_image_crop.py  --input=<Input original TrainingDML-AU file path> --output_json=<Output result TrainingDML-AI JSON file path>\r\n                          --output_images=<Output dir of result cropped images> --size=<Crop size of images>\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TrainingDML/pytdml",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytdml",
    "package_url": "https://pypi.org/project/pytdml/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytdml/",
    "project_urls": {
      "Homepage": "https://github.com/TrainingDML/pytdml"
    },
    "release_url": "https://pypi.org/project/pytdml/1.1.1/",
    "requires_dist": [
      "dataclasses",
      "geojson"
    ],
    "requires_python": "",
    "summary": "Parsing and encoding training datasets based on OGC Training Data Markup Language for AI (TrainingDML-AI) standard",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17474730,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76893eb9df02bccd0dba407d19979e785d9769aeb60f6fd1f42dcf8a8480c17a",
          "md5": "75e8d66026845833ff17b68e57eb723e",
          "sha256": "d8ee797eefc81725b61fcca5e96af6ba39a96390e7699b56527558bf304ec0f0"
        },
        "downloads": -1,
        "filename": "pytdml-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75e8d66026845833ff17b68e57eb723e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29081,
        "upload_time": "2022-05-04T08:54:46",
        "upload_time_iso_8601": "2022-05-04T08:54:46.444564Z",
        "url": "https://files.pythonhosted.org/packages/76/89/3eb9df02bccd0dba407d19979e785d9769aeb60f6fd1f42dcf8a8480c17a/pytdml-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38a4e31710f9e4d9c6a9f5570fe5ffcae0fe197dbf3059b1688805610e1a6f66",
          "md5": "be1bbf07531ed91b417cad64fe6f8039",
          "sha256": "c6fb139f4328723387c054bddc47032dd1ab5807dd4191274e23203b3c31decd"
        },
        "downloads": -1,
        "filename": "pytdml-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be1bbf07531ed91b417cad64fe6f8039",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16535,
        "upload_time": "2022-05-04T08:54:48",
        "upload_time_iso_8601": "2022-05-04T08:54:48.803993Z",
        "url": "https://files.pythonhosted.org/packages/38/a4/e31710f9e4d9c6a9f5570fe5ffcae0fe197dbf3059b1688805610e1a6f66/pytdml-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf7297a94885d4e80e4d3bb981f42edb67e0e6a542515205e1ca0f99bb3ec01b",
          "md5": "1b923e50f2f618c241e5f68b545656ec",
          "sha256": "6c76e9e49475b58d6cfd4228f70baa724a53f0b31bd1eead28c490a129c4dc58"
        },
        "downloads": -1,
        "filename": "pytdml-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b923e50f2f618c241e5f68b545656ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30642,
        "upload_time": "2023-03-28T08:09:18",
        "upload_time_iso_8601": "2023-03-28T08:09:18.440796Z",
        "url": "https://files.pythonhosted.org/packages/cf/72/97a94885d4e80e4d3bb981f42edb67e0e6a542515205e1ca0f99bb3ec01b/pytdml-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "650aee9917a983064d74253d88754678d34e5cd6cbba6abdf7b0d54e02554e3f",
          "md5": "8ddc831d2fc5290a09552798cbc8af9d",
          "sha256": "9ff85c4df474d81201836a112f51000cac7f1768ea7e848d66b087bbc9674c25"
        },
        "downloads": -1,
        "filename": "pytdml-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ddc831d2fc5290a09552798cbc8af9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18836,
        "upload_time": "2023-03-28T08:09:26",
        "upload_time_iso_8601": "2023-03-28T08:09:26.073067Z",
        "url": "https://files.pythonhosted.org/packages/65/0a/ee9917a983064d74253d88754678d34e5cd6cbba6abdf7b0d54e02554e3f/pytdml-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf7297a94885d4e80e4d3bb981f42edb67e0e6a542515205e1ca0f99bb3ec01b",
        "md5": "1b923e50f2f618c241e5f68b545656ec",
        "sha256": "6c76e9e49475b58d6cfd4228f70baa724a53f0b31bd1eead28c490a129c4dc58"
      },
      "downloads": -1,
      "filename": "pytdml-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b923e50f2f618c241e5f68b545656ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30642,
      "upload_time": "2023-03-28T08:09:18",
      "upload_time_iso_8601": "2023-03-28T08:09:18.440796Z",
      "url": "https://files.pythonhosted.org/packages/cf/72/97a94885d4e80e4d3bb981f42edb67e0e6a542515205e1ca0f99bb3ec01b/pytdml-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "650aee9917a983064d74253d88754678d34e5cd6cbba6abdf7b0d54e02554e3f",
        "md5": "8ddc831d2fc5290a09552798cbc8af9d",
        "sha256": "9ff85c4df474d81201836a112f51000cac7f1768ea7e848d66b087bbc9674c25"
      },
      "downloads": -1,
      "filename": "pytdml-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8ddc831d2fc5290a09552798cbc8af9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18836,
      "upload_time": "2023-03-28T08:09:26",
      "upload_time_iso_8601": "2023-03-28T08:09:26.073067Z",
      "url": "https://files.pythonhosted.org/packages/65/0a/ee9917a983064d74253d88754678d34e5cd6cbba6abdf7b0d54e02554e3f/pytdml-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}