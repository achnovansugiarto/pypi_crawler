{
  "info": {
    "author": "",
    "author_email": "Kevin Han <kevin.han@synaccess.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n\nSynLink Python Library\n-------\n<!-- \n![pypi](https://img.shields.io/pypi/v/Slacker.svg)\\_ ![build\nstatus](https://img.shields.io/travis/os/slacker.svg)\\_ ![pypi\ndownloads](https://img.shields.io/pypi/dm/slacker.svg)\\_\n![license](https://img.shields.io/github/license/os/slacker.svg)\\_\n![gitter chat](https://badges.gitter.im/Join%20Chat.svg)\\_\n\n![image](https://raw.githubusercontent.com/os/slacker/master/static/slacker.jpg) -->\n\n### About\n\nSynLink Python Library is a Python interface for the [SynLink Smart PDU API](https://synaccess.com/support/webapi).\n\n### Installation\n\n```bash\n$ pip install synlinkpy\n```\n\n### Examples\n\n```python\nfrom synlinkpy import SynLinkPy\n\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\n# Change outlet state for a given PDU (Power Distribution Unit)\npdu1.outlets.set_state(\"1\", \"OFF\") # accepts outlet number\npdu1.outlets.set_state(\"1-1200578\", \"ON\") # accepts unique outlet ID\npdu1.outlets.set_state(\"2\", \"REBOOT\") # acceptable states are \"OFF\", \"ON\", \"REBOOT\"\n\n# Get information of all outlets\noutlet_response = pdu1.outlets.list()\nfor outlet in outlet_response:\n    print(outlet['id'], outlet['outletName'], outlet['state'])\n\n# Get information on inlet(s)\ninlet_response = pdu1.inlets.list()\n\nfor inlet in inlet_response:\n    print(inlet['id'], inlet['inletCurrentRms'], inlet[\"inletVoltageRms\"])\n\n\n# Modify Configuration \n# https://synaccess.com/support/webapi#configuration\npdu1.conf.set({\"lcdOutletControlEnabled\": False})\n\n```\n\n### HTTP API Documentation\n\n<https://synaccess.com/support/webapi>\n\n### Authentication\n\nAuthentication can occur with [Personal Access Token (PATs)](https://synaccess.com/support/webapi#personal-access-token-based) or Username & Password. It is recommended to use Personal Access Tokens.\n\n**Authenticating with Username and Password**\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\nprint(pdu1.device.info())\n```\n\n**Authenticating with Personal Access Token**\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"token\": \"9wxBwnck6JpEH0b1DyI\" })\n\nprint(pdu1.device.info())\n```\n\n\n### Python Library Commands\n\n#### Outlet Commands\n\nOutlet API Information\nhttps://synaccess.com/support/webapi#outlets\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\n# Change outlet state for a given PDU (Power Distribution Unit)\npdu1.outlets.set_state(\"1\", \"OFF\") # accepts outlet number\npdu1.outlets.set_state(\"1-1200578\", \"ON\") # accepts unique outlet ID\npdu1.outlets.set_state(\"2\", \"REBOOT\") # acceptable states are \"OFF\", \"ON\", \"REBOOT\"\n\n# Get information of all outlets\noutlet_response = pdu1.outlets.list()\n\nfor outlet in outlet_response:\n    print(outlet['id'], outlet['outletName'], outlet['state'])\n\n# OUTPUT\n# 1-1200578 Outlet 1 ON\n# 2-1200578 Rectifier #1 ON\n# 3-1200578 Outlet 3 ON\n# 4-1200578 Outlet 4 ON\n```\n\n#### Inlet Commands\n\nInlet API Information\nhttps://synaccess.com/support/webapi#inlets\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\ninlet_response = pdu1.inlets.list()\nfor inlet in inlet_response:\n    print(inlet['id'], inlet['inletPlug'], inlet['inletCurrentRms'] )\n\n# OUTPUT\n# I1-1000036 0.0 117.4000015258789\n```\n\n\n#### Bank Commands\n\nBank API Information\nhttps://synaccess.com/support/webapi#banks\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\nbanks_response = pdu1.banks.list()\n\nfor bank in banks_response:\n    print(bank['id'], bank['currentRms'])\n\n# OUTPUT\n# 1200578 0.0\n```\n\n\n#### Device Commands\n\nDevice API Information\nhttps://synaccess.com/support/webapi#device\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\ndevice_response = pdu1.device.info() \n\nprint (device_response['modelNumber'], device_response['enclosureSerialNumber'], device_response['formFactor'])\n\n# OUTPUT\n# 5001AIE-0E 1000036 Compact\n```\n\n#### Groups Commands\n\nGroups API Information\nhttps://synaccess.com/support/webapi#groups\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\ngroups_response = pdu1.groups.list()\nfor group in groups_response:\n    print(group['id'], group['groupName'], group[\"outlets\"])\n\n# OUTPUT\n# 1 Example Group [...] \n# 2 Important Equipment [...]\n# 3 Non Essential Equipment [...]\n\n# Create new group with name, to add outlets use groups.modify\npdu1.groups.create(\"Example Name\")\n\n# outlets value must be an array and will override pre-existing outlet's value. First argument is group ID\npdu1.groups.modify(1, { \"outlets\": [\"1-200578\", \"3-200578\"] })\n\n# switch all outlets of the group, will switch according to sequencing time setting\npdu1.groups.set_state(1, \"OFF\")\n\n# permanently remove based off of group ID\npdu1.groups.delete(1)\n\n```\n\n#### Configuration Commands\n\nConfiguration API Information\nhttps://synaccess.com/support/webapi#configuration\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\nconf_response = pdu1.conf.list()\nprint(conf_response[\"macAddr\"], conf_response[\"deviceName\"], conf_response[\"lcdOrientation\"])\n\n# OUTPUT\n# 0C:73:EB:BE:00:27 Demo Compact PDU 90\n\n# Set configuration with key value pairs\npdu1.conf.set({ \"lcdOutletControlEnabled\" : False })\n\n```\n\n#### Sensors Commands\n\nSensors API Information\nhttps://synaccess.com/support/webapi#sensors\n\n```python\npdu1 = SynLinkPy(\"http://192.168.1.100\", { \"username\": \"admin\", \"password\": \"admin\" })\n\nsensors_response = pdu1.sensors.list()\nfor sensor in sensors_response:\n    print(sensor['sensorPort'], sensor['sensorName'], sensor['sensorTempInC'], sensor['sensorHumidity'])\n\n# OUTPUT\n# B Temperature & Humidity Sensor 22.9057 39.50677\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "synlinkpy",
    "package_url": "https://pypi.org/project/synlinkpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/synlinkpy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/synaccess/synlink-py/issues",
      "Homepage": "https://github.com/synaccess/synlink-py"
    },
    "release_url": "https://pypi.org/project/synlinkpy/0.0.12/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "HTTP Python Wrapper for Synaccess SynLink PDU HTTP API.",
    "version": "0.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15632042,
  "releases": {
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9729e9b4a7c05775a9bb74cc30b48081b952026b7d2bd4e3eda6b82dac66561d",
          "md5": "4d41835d01275b5450db6502548f20f1",
          "sha256": "39948c312872c9ec12e72b62c5d05f23185a6b89d413ee89fe9363caa7a9bc5d"
        },
        "downloads": -1,
        "filename": "synlinkpy-0.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d41835d01275b5450db6502548f20f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5370,
        "upload_time": "2022-11-02T20:14:34",
        "upload_time_iso_8601": "2022-11-02T20:14:34.830158Z",
        "url": "https://files.pythonhosted.org/packages/97/29/e9b4a7c05775a9bb74cc30b48081b952026b7d2bd4e3eda6b82dac66561d/synlinkpy-0.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb76cc410be2ccb3521afe916f0ef4be58dd62ecbbfd4b72bd2d112f545e96a",
          "md5": "f619037baeaa153bee9b12691ce706a3",
          "sha256": "c56b862d2a0b74dd27b61e7ca0031b8844683a1ac653d093961a2872639b7125"
        },
        "downloads": -1,
        "filename": "synlinkpy-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "f619037baeaa153bee9b12691ce706a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9671,
        "upload_time": "2022-11-02T20:14:36",
        "upload_time_iso_8601": "2022-11-02T20:14:36.204153Z",
        "url": "https://files.pythonhosted.org/packages/5b/b7/6cc410be2ccb3521afe916f0ef4be58dd62ecbbfd4b72bd2d112f545e96a/synlinkpy-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9729e9b4a7c05775a9bb74cc30b48081b952026b7d2bd4e3eda6b82dac66561d",
        "md5": "4d41835d01275b5450db6502548f20f1",
        "sha256": "39948c312872c9ec12e72b62c5d05f23185a6b89d413ee89fe9363caa7a9bc5d"
      },
      "downloads": -1,
      "filename": "synlinkpy-0.0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d41835d01275b5450db6502548f20f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5370,
      "upload_time": "2022-11-02T20:14:34",
      "upload_time_iso_8601": "2022-11-02T20:14:34.830158Z",
      "url": "https://files.pythonhosted.org/packages/97/29/e9b4a7c05775a9bb74cc30b48081b952026b7d2bd4e3eda6b82dac66561d/synlinkpy-0.0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bb76cc410be2ccb3521afe916f0ef4be58dd62ecbbfd4b72bd2d112f545e96a",
        "md5": "f619037baeaa153bee9b12691ce706a3",
        "sha256": "c56b862d2a0b74dd27b61e7ca0031b8844683a1ac653d093961a2872639b7125"
      },
      "downloads": -1,
      "filename": "synlinkpy-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "f619037baeaa153bee9b12691ce706a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9671,
      "upload_time": "2022-11-02T20:14:36",
      "upload_time_iso_8601": "2022-11-02T20:14:36.204153Z",
      "url": "https://files.pythonhosted.org/packages/5b/b7/6cc410be2ccb3521afe916f0ef4be58dd62ecbbfd4b72bd2d112f545e96a/synlinkpy-0.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}