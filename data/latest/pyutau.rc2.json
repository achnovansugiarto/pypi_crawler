{
  "info": {
    "author": "UtaUtaUtau",
    "author_email": "diamond.glacier16@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "pyUtau\n======\n\nA complete *bodge* of a Python library made by UtaUtaUtau. Interprets data that UTAU sends through plugins. Made to work for UST Version 1.20 only. I am not an avid programmer, please don't expect much...\n\n~~To use, it's just one file. Clone or download this repo, and put pyutau.py somewhere in your project. Import it with none other than `import pyutau`~~\n\nTo use, you can now install this as a Python package through pip by using:\n```cmd\npip install pyutau\n```\nYou can still get the `pyutau.py` file from the folders but I recommend doing this instead.\n\nAll information used to make this plugin is from [this @wiki page](https://w.atwiki.jp/utaou/pages/64.html) and [this C# library.](https://github.com/delta-kimigatame/utauPlugin \"Get this if you know C#\") I just translated everything through [DeepL](https://deepl.com/en/translator) to understand how these work.\n\n~~I'll just put the documentation here...~~\n\nHow to use\n---\n```Python\nimport pyutau\nimport sys\n\nplugin = pyutau.UtauPlugin(sys.argv[-1])\n\n# Whatever you wanna do\n\nplugin.write(sys.argv[-1])\n```\n\nUtauPlugin\n-----\nUtauPlugin is the main class.\n\n<dl>\n  <dt>UtauPlugin(self, fpath)</dt>\n  <dd>Reads the UST data sent in by UTAU. The file path is always the second argument or the last argument.</dd>\n</dl>\n\n---\n\n### Data descriptors:\n<dl>\n  <dt>version</dt>\n  <dd>Obsolete. Returns UST version. Will be None if not provided.</dd>\n  \n  <dt>settings</dt>\n  <dd>Dictionary of UST settings. These are read-only. Will be empty when not provided.\n  Read more about it in the @wiki page.</dd>\n  \n  <dt>prev_note</dt>\n  <dd>Stores the note that precedes the selected notes in the UST. None if there is no PREV note.</dd>\n  \n  <dt>next_note</dt>\n  <dd>Stores the note that succeeds the selected notes in the UST. None if there is no NEXT note.</dd>\n  \n  <dt>notes</dt>\n  <dd>List that stores all notes. This uses the Note class.</dd>\n</dl>\n\n---\n\n### Methods:\n<dl>\n  <dt>__str__(self)</dt>\n  <dd>Returns a string representation of the whole UST.</dd>\n  \n  <dt>write(fpath, withHeader = False)</dt>\n  <dd>Writes the UST data to the given file path. Normally doesn't save header info.</dd>\n  \n  <dt>insert_note(self, idx, note)</dt>\n  <dd>Inserts note at the given index. Notes are stored in a list.</dd>\n  \n  <dt>delete_note(self, idx)</dt>\n  <dd>Sets the note at the given index to a DELETE note. Does not remove it from the list</dd>\n  \n  <dt>get_notes(self)</dt>\n  <dd>Returns all notes that are not DELETE notes. I don't think you can modify notes directly without using mutable functions</dd>\n</dl>\n\nNote\n-----\nA class that stores note data.\n\n<dl>\n  <dt>Note(self, note_type = 'INSERT')</dt>\n  <dd>Makes a default note with the given note type. Note types are PREV, NEXT, INSERT, DELETE and ####.\n  The default note is at C4 with lyric あ, and length 480</dd>\n  \n  <dt>pyutau.create_note(lyric = 'あ', length = 480, note_num = 60, **kwargs)</dt>\n  <dd>Makes a new INSERT note. Made for inserting notes specifically. note_num is the key, C4 = 60.\n  If the note is not a rest note (lyric \"R\", \"r\" or blank), it automatically sets intensity to 100 and mod to 0.\n  **kwargs are for extra data. Read the @wiki mentioned above for more info.</dd>\n</dl>\n\n---\n\n### Data descriptors:\n<dl>\n  <dt>note_type</dt>\n  <dd>Stores the note type. Does not change to DELETE when delete_note() is used</dd>\n  \n  <dt>isdeleted</dt>\n  <dd>The reason why note_type doesn't change to DELETE with delete_note(). This is made in case someone wants to bring back a deleted note from their data</dd>\n  \n  <dt>note_data</dt>\n  <dd>Where all note data is stored in a dictionary. Blank entries are written as None. Only put string keys and values here.</dd>\n</dl>\n\n---\n\n### Methods:\n<dl>\n  <dt>__str__(self)</dt>\n  <dt>get(self)</dt>\n  <dd>Returns a string representation of the note in the format of the UST</dd>\n  \n  <dt>delete_note(self)</dt>\n  <dd>Sets a note to a DELETE note without changing the note type.</dd>\n  \n  <dt>get_note_type(self)</dt>\n  <dd>Returns the note type, and also responds to isdeleted. Use this one, don't read note_type directly</dd>\n  \n  <dt>set_custom_data(self, name, data)</dt>\n  <dd>Sets in custom data and saves the string representation of the data under name.</dd>\n  \n  <dt>get_custom_data(self, name)</dt>\n  <dd>Gets the string representation of the custom data under name</dt>\n  \n  <dt>set_multiple_data(self, **kwargs)</dt>\n  <dd>Sets multiple data because note_data is a dictionary. Just.. yeah.</dd>\n\n  <dt>copy(self)</dt>\n  <dd>Returns a deep copy of the note.</dd>\n\n  <dt>clear_note(self)</dt>\n  <dd>Returns a clean slate note copy of the note with INSERT as its note type. Clean slate means it only has the required parameters plus intensity, modulation, and tempo. I think those are default essential.\n  This is good for cleaning extra properties by removing the existing note and inserting the clean note, as UTAU never considers a property cleared when it's not returned.</dd>\n</dl>\n\n***Setters and Getters***\n\nThese are written for data that UTAU can send in and read.\nSome of them get initializers because UTAU sends in values for them.\n\n**NOTE:** All floating point data are rounded to 3 decimals when set. Sorry if you still wanted to keep precision.\n\n**NOTE pt. 2:** If a property has both a setter and a getter, it's got a Python property setup for it. For example, since Lyric has both a setter and a getter, its property is named `lyric`. The `set_lyric` and `get_lyric` functions still exist for backwards compatibility, I hope. The table will list the property names, even if it doesn't have a setter. The format is just `set_x`, `get_x`, and `init_x` where `x` is the property name.\n\nLegend: **Required**, Not Required, *Read-only*\nData Key | Property Name | Description | Getter | Setter | Initializer | Value Type\n--- | --- | --- | :---: | :---: | :---: | :---: \n**Length** | `length` | Note Length.  480 = 1 quarter note. | ✓ | ✓ | - | `int` \n**Lyric** | `lyric` | Note Lyric. | ✓ | ✓ | ✓ | `str` \n**NoteNum** | `note_num` | Note key. C4 = 60 | ✓ | ✓ | - | `int` \n**PreUtterance** | `preutterance` | Note pre-utterance in milliseconds. | ✓ | ✓ | ✓ | `float`\nVoiceOverlap | `overlap` | Note overlap in milliseconds. | ✓ | ✓ | ✓ | `float`\nIntensity | `intensity` | Note intensity in percent. | ✓ | ✓ | - | `float` \nModulation | `modulation` | Note modulation in percent. | ✓ | ✓ | - | `float`\nStartPoint | `start_point` | Note start point/time in milliseconds. | ✓ | ✓ | ✓ | `float` \nEnvelope | `envelope` | Note envelope. | ✓ | ✓ | - | `Envelope`\nTempo | `tempo` | Tempo at note in BPM. | ✓ | ✓ | - | `float`\nVelocity | `velocity` | Note consonant velocity in percent. | ✓ | ✓ | - | `float`\nLabel | `label` | Label at note. | ✓ | ✓ | - | `str`\n$direct | `direct` | Boolean that enables direct rendering. | ✓ | ✓ | - | `bool`\nFlags | `flags` | Note flags. | ✓ | ✓ | - | `str`\nPBS, PBW, PBY, PBM | `mode2pitch` | Mode 2 pitchbend data. | ✓ | ✓ | - | `Mode2Pitch`\nVBR | `vibrato` | Mode 2 vibrato data. | ✓ | ✓ | - | `Vibrato`\nPitchBend, PBStart | `mode1pitch` | Mode 1 pitchbend data. | ✓ | ✓ | - | `Mode1Pitch`\n*@preuttr* | `at_preutterance` | Re-calculated pre-utterance in milliseconds. | ✓ | - | - | `float`\n*@overlap* | `at_overlap` | Re-calculated overlap in milliseconds. | ✓ | - | - | `float`\n*@stpoint* | `at_start_point` | Calculated start point in milliseconds. | ✓ | - | - | `float`\n*@filename* | `sample_filename` | Filename of sample. | ✓ | - | - | `str`\n*@alias* | `alias` | Alias with prefix map applied. Can also have VCV applied for shareware. | ✓ | - | - | `str`\n*@cache* | `cache_location` | Note cache file path. Not present when the note has no cache. | ✓ | - | - | `str`\n\nEnvelope\n-----\n\nA class for storing envelope data. Largely based on how delta's library stores envelopes.\n\n<dl>\n  <dt>Envelope(envelope = '')</dt>\n  <dd>Makes an envelope from the string representation of it. Default envelope is 0, 5, 35, 0, 100, 100, 0\n  Read more about envelopes in the @wiki.</dd>\n</dl> \n\n---\n\n### Data descriptors:\n<dl>\n  <dt>p</dt>\n  <dd>List of floats that store p1, p2, p3, p4, and p5. These are in milliseconds.</dd>\n  \n  <dt>v</dt>\n  <dd>List of floats that store v1, v2, v3, v4, and v5. These are in percentages.</dd>\n</dl>\n\n---\n\n### Methods:\n<dl>\n  <dt>__str__(self)</dt>\n  <dt>get(self)</dt>\n  <dd>Returns the string representation of the envelope.</dd>\n  \n  <dt>set_all(self, *args)</dt>\n  <dd>Sets all of the parameters of the envelope to the arguments. Order of arguments is p1, p2, p3, v1, v2, v3, v4, (A '%' can be here, copes with UTAU's weirdness), p4, p5, v5.</dd>\n\n  <dt>copy(self)</dt>\n  <dd>Returns a deep copy of the envelope.</dd>\n</dl>\n\nMode1Pitch\n-----\n\nA class for storing Mode1 pitchbend data. I gave my least efforts on this.\n\n<dl>\n  <dt>Mode1Pitch(PBStart = '', PitchBend = '')</dt>\n  <dd>Makes a new Mode1 pitchbend class from sting representations of Mode1 pitchbend data. Defaults are PBStart=None and PitchBend=0\n  Read more about Mode1Pitch in the @wiki.</dd>\n</dl>\n\n---\n\n### Data descriptors:\n\n<dl>\n  <dt>start_time</dt>\n  <dd>Stores the start time of the pitchbend data anchored around the start of the note in milliseconds.</dd>\n  \n  <dt>pitches</dt>\n  <dd>Stores the pitchbend values. I think the pitchbend data is in cents. I don't know how far two neighboring points are in milliseconds.</dd>\n</dl>\n\n---\n\n### Methods:\n\n<dl>\n  <dt>set_pitches(self, *args)</dt>\n  <dd>Sets the pitchbend data to the arguments. Just use set_pitches(*some_list) when you have a list to put in.</dd>\n  \n  <dt>get_pitches(self)</dt>\n  <dd>Returns the string representation of the pitchbend data. Just use some_mode1pitch_data.pitches to get the pitchbends in a list.</dd>\n  \n  <dt>set_start_time(self, PBStart)</dt>\n  <dd>Sets the pitchbend's start time.</dd>\n  \n  <dt>get_start_time(self)</dt>\n  <dd>Returns the string representation of the pitchbend's start time.</dd>\n  \n  <dt>get(self)</dt>\n  <dd>Returns a dictionary with keys PBStart and PitchBend and values of the string representations.</dd>\n\n  <dt>copy(self)</dt>\n  <dd>Returns a deep copy of the Mode1 pitchbend data.</dd>\n</dl>\n\nMode2Pitch\n-----\n\nA class for Mode2 pitchbend data.\n\n<dl>\n  <dt>Mode2Pitch(PBS = '-25', PBW = '50', PBY = '0', PBM = '')</dt>\n  <dd>Makes a new Mode2 pitchbend class from the string representations of Mode2 pitchbend data.</dd>\n</dl>\n\n---\n\n### Data descriptors:\n<dl>\n  <dt>start_time</dt>\n  <dd>Stores the first control point's time anchored around the start of the note in milliseconds.</dd>\n  \n  <dt>start_pitch</dt>\n  <dd>Stores the first control poin's pitch in decacents??? 10 in this value is one semitone or 100 cents.</dd>\n  \n  <dt>pbw</dt>\n  <dd>Stores a list of intervals between the control points in milliseconds.</dd>\n  \n  <dt>pby</dt>\n  <dd>Stores a list of offsets in pitch of the control points in decacents. I guess that's what we're calling it now.</dd>\n  \n  <dt>pbm</dt>\n  <dd>Stores the pitchbend curves as a list of strings. Blank is S-curve, s is straight line/Linear, j is J-curve, and r is R-curve</dd>\n</dl>\n\n---\n\n### Methods:\n\n<dl>\n  <dt>set_pbs(self, st, sp = 0)</dt>\n  <dt>set_pbw(self, *args)</dt>\n  <dt>set_pby(self, *args)</dt>\n  <dt>set_pbm(self, *args)</dt>\n  <dd>Sets the corresponding data.</dd>\n  \n  <dt>get_pbs(self)</dt>\n  <dt>get_pbw(self)</dt>\n  <dt>get_pby(self)</dt>\n  <dt>get_pbm(self)</dt>\n  <dd>Gets the string representation of the corresponding data.</dd>\n  \n  <dt>get(self)</dt>\n  <dd>Returns a dictionary with keys PBS, PBW, PBY, and PBM with its values as their corresponding data in their string representations.</dd>\n\n  <dt>copy(self)</dt>\n  <dd>Returns a deep copy of the Mode2 pitchbend data.</dd>\n</dl>\n\nVibrato\n-----\n\nA class for storing Mode2 vibrato data.\n\n<dl>\n  <dt>Vibrato(VBR = '')</dt>\n  <dd>Makes a new Vibrato class for Mode2 vibrato data.\n  Defaults are length 65, cycle 160, depth 35, fade in and out 20, the rest 0.</dd>\n</dl>\n\n---\n\n### Data descriptors:\n<dl>\n  <dt>length</dt>\n  <dt>cycle</dt>\n  <dt>depth</dt>\n  <dt>fade_in</dt>\n  <dt>fade_out</dt>\n  <dt>phase</dt>\n  <dt>offset</dt>\n  <dd>These are pretty self explanatory. Offset is the Pitch in the Vibrato window.\n  Units for these are percent, millisencond, cent, percent, percent, percent, and cent.</dd>\n</dl>\n\n---\n\n### Methods:\n\n<dl>\n  <dt>set_all(self, length = None, cycle = None, depth = None, fade_in = None, fade_out = None, phase = None, offset = None)</dt>\n  <dd>Sets all vibrato data. I might write separate setters and getters for each but I can't be bothered for now.</dd>\n\n  <dt>__str__(self)</dt>\n  <dt>get(self)</dt>\n  <dd>Returns the string representation of vibrato.</dd>\n\n  <dt>copy(self)</dt>\n  <dd>Returns a deep copy of the vibrato.</dd>\n</dl>\n\n---\n\n~~You did it. You read through all of it... maybe...~~\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/UtaUtaUtau/pyUtau/archive/refs/tags/v1.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/UtaUtaUtau/pyUtau",
    "keywords": "utau",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyutau",
    "package_url": "https://pypi.org/project/pyutau/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyutau/",
    "project_urls": {
      "Download": "https://github.com/UtaUtaUtau/pyUtau/archive/refs/tags/v1.1.0.tar.gz",
      "Homepage": "https://github.com/UtaUtaUtau/pyUtau"
    },
    "release_url": "https://pypi.org/project/pyutau/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python library/module for parsing UTAU plugin data",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15592024,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b37ac580f4746b399ac3eaff217b9e4a45fd391ab79c5ff13da07f5ff014ebc1",
          "md5": "efc03af57a0e7c6518e3efa20ecf71ab",
          "sha256": "6ef375a2c7e0a71418ccf27e57c89ecb810fc6a474af6550304d1200ee10e70c"
        },
        "downloads": -1,
        "filename": "pyutau-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efc03af57a0e7c6518e3efa20ecf71ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11345,
        "upload_time": "2022-09-02T10:00:35",
        "upload_time_iso_8601": "2022-09-02T10:00:35.606627Z",
        "url": "https://files.pythonhosted.org/packages/b3/7a/c580f4746b399ac3eaff217b9e4a45fd391ab79c5ff13da07f5ff014ebc1/pyutau-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccfc5773ad25d04006d193dda66a715aba526bc305ce4707ca60318e72fc56f6",
          "md5": "e5764e4f90b3819f1cb020f4a0aea961",
          "sha256": "43429bf2d3ef5d33096debd62fd1111f0d0bd68be4c717c5789de447d800bcfb"
        },
        "downloads": -1,
        "filename": "pyutau-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5764e4f90b3819f1cb020f4a0aea961",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11398,
        "upload_time": "2022-10-31T04:40:59",
        "upload_time_iso_8601": "2022-10-31T04:40:59.378951Z",
        "url": "https://files.pythonhosted.org/packages/cc/fc/5773ad25d04006d193dda66a715aba526bc305ce4707ca60318e72fc56f6/pyutau-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6507647f693998b03eb495891f674d3feabd7efe3c8f977522bae60227cc170",
          "md5": "d4b28dfe84f78cc3abe005006148bb5d",
          "sha256": "05e742316d35222de4fb29f92906c0b7a286d6a56e7b8a42ba1e97f25746dfc9"
        },
        "downloads": -1,
        "filename": "pyutau-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4b28dfe84f78cc3abe005006148bb5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14923,
        "upload_time": "2022-10-31T04:41:02",
        "upload_time_iso_8601": "2022-10-31T04:41:02.005121Z",
        "url": "https://files.pythonhosted.org/packages/b6/50/7647f693998b03eb495891f674d3feabd7efe3c8f977522bae60227cc170/pyutau-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccfc5773ad25d04006d193dda66a715aba526bc305ce4707ca60318e72fc56f6",
        "md5": "e5764e4f90b3819f1cb020f4a0aea961",
        "sha256": "43429bf2d3ef5d33096debd62fd1111f0d0bd68be4c717c5789de447d800bcfb"
      },
      "downloads": -1,
      "filename": "pyutau-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e5764e4f90b3819f1cb020f4a0aea961",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11398,
      "upload_time": "2022-10-31T04:40:59",
      "upload_time_iso_8601": "2022-10-31T04:40:59.378951Z",
      "url": "https://files.pythonhosted.org/packages/cc/fc/5773ad25d04006d193dda66a715aba526bc305ce4707ca60318e72fc56f6/pyutau-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6507647f693998b03eb495891f674d3feabd7efe3c8f977522bae60227cc170",
        "md5": "d4b28dfe84f78cc3abe005006148bb5d",
        "sha256": "05e742316d35222de4fb29f92906c0b7a286d6a56e7b8a42ba1e97f25746dfc9"
      },
      "downloads": -1,
      "filename": "pyutau-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d4b28dfe84f78cc3abe005006148bb5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14923,
      "upload_time": "2022-10-31T04:41:02",
      "upload_time_iso_8601": "2022-10-31T04:41:02.005121Z",
      "url": "https://files.pythonhosted.org/packages/b6/50/7647f693998b03eb495891f674d3feabd7efe3c8f977522bae60227cc170/pyutau-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}