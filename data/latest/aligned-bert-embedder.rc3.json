{
  "info": {
    "author": "",
    "author_email": "zeionara@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# get_aligned_BERT_emb\nGet the aligned BERT embedding for sequence labeling tasks \n## Installing as a dependency\n```shell script\npip install aligned-bert-embedder\n```\n## Installing dependencies\n```shell script\nconda env create -f environment.yml\n```\n## Example of usage from cmd (not recommended):\n```shell script\npython -m aligned_bert_embedder embed aligned_bert_embedder/configs/snip.yml aligned_bert_embedder/texts/triple.txt\n```\n## Example of usage from code (preferable)\n```shell script\nfrom aligned_bert_embedder import AlignedBertEmbedder\n\nembeddings = AlignedBertEmbedder(config).embed(\n  (\n    (\n      'First', `sentence`, `or`, `other`, `context`, `chunk`\n    ),\n    (\n      `Second`, `sentence`\n    )\n  )\n)\n```\n\n**The following is the content of the original `README.md` file from the developer repo.**\n\n## Why this repo?\n\nIn the origin script [extract_features.py](https://github.com/google-research/bert/blob/master/extract_features.py) in BERT, tokens may be splited into pieces as follows:\n\n```python\norig_tokens = [\"John\", \"Johanson\", \"'s\",  \"house\"]\nbert_tokens = [\"[CLS]\", \"john\", \"johan\", \"##son\", \"'\", \"s\", \"house\", \"[SEP]\"]\norig_to_tok_map = [1, 2, 4, 6]\n```\nWe investigate 3 align strategies (`first`, `mean` and `max`) to maintain an original-to-tokenized alignment. Take the \"`Johanson` -> `johan`, `##son`\" as example:\n\n+ `first`: take the representation of `johan` as the whole word `Johanson`\n+ `mean`: take the reduce_mean value of representations of `johan` and `##son` as the whole word `Johanson`\n+ `max`: take the reduce_max value of representations of `johan` and `##son` as the whole word `Johanson`\n\n\n## How to use this repo?\n\n```shell\nsh run.sh input_file outout_file BERT_BASE_DIR\n# For example:\nsh run.sh you_data you_data.bert path/to/bert/uncased_L-12_H-768_A-12 \n```\nYou can modify `layers` and `align_strategies` in the `run.sh`.\n\n\n## How to load the output embeddings?\n\nAfter the above procedure, you are expected to get a output file of contextual embeddings (e.g., your_data_6_mean). Then you can load this file like conventional word embeddings. For example in a python script:\n```python\nwith open(\"your_data_6_mean\", \"r\", encoding=\"utf-8\") as bert_f\"\n    for line in bert_f:\n        bert_vec = [[float(value) for value in token.split()] for token in line.strip().split(\"|||\")] \n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zeionara/aligned_bert_embedder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aligned-bert-embedder",
    "package_url": "https://pypi.org/project/aligned-bert-embedder/",
    "platform": "",
    "project_url": "https://pypi.org/project/aligned-bert-embedder/",
    "project_urls": {
      "Homepage": "https://github.com/zeionara/aligned_bert_embedder"
    },
    "release_url": "https://pypi.org/project/aligned-bert-embedder/0.81/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Module for generating aligned contextualized bert embeddings using different strategies",
    "version": "0.81",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7395080,
  "releases": {
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56c0b890b2c1a9e03f2257de52392eedc362168cd39a4b0cf5cd9ad34558923d",
          "md5": "fd0d9dcfcaa3c9392bc96e93304a2192",
          "sha256": "5132c98280a06d051dc57db77f41795e35ed5c7560cd5ff6187eda7b8481dfd7"
        },
        "downloads": -1,
        "filename": "aligned_bert_embedder-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd0d9dcfcaa3c9392bc96e93304a2192",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6718,
        "upload_time": "2020-06-03T14:36:31",
        "upload_time_iso_8601": "2020-06-03T14:36:31.950632Z",
        "url": "https://files.pythonhosted.org/packages/56/c0/b890b2c1a9e03f2257de52392eedc362168cd39a4b0cf5cd9ad34558923d/aligned_bert_embedder-0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dc8eddccafd5bceaef93248269a58ff1a31ac223c0cecb98057d8e4a8cec943",
          "md5": "275eb4650efc39ebf483f7b19836dc4e",
          "sha256": "09cb404e2ab1056dda1781160abafde895b1bd6d4a5ef5cf17ea9b1d414ceb66"
        },
        "downloads": -1,
        "filename": "aligned_bert_embedder-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "275eb4650efc39ebf483f7b19836dc4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6738,
        "upload_time": "2020-06-04T07:53:11",
        "upload_time_iso_8601": "2020-06-04T07:53:11.130858Z",
        "url": "https://files.pythonhosted.org/packages/0d/c8/eddccafd5bceaef93248269a58ff1a31ac223c0cecb98057d8e4a8cec943/aligned_bert_embedder-0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.81": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb736044b174146aa8e522cd6729604cd0e7191d8cbbafadbdf4e6bf2e2af629",
          "md5": "7da1d677937c47caed04f0c90d45a096",
          "sha256": "756edce37afd31d3275c103fe639b4872a41ff115b66a61dc083a9ef43c420ef"
        },
        "downloads": -1,
        "filename": "aligned_bert_embedder-0.81-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7da1d677937c47caed04f0c90d45a096",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27653,
        "upload_time": "2020-06-04T10:59:49",
        "upload_time_iso_8601": "2020-06-04T10:59:49.056611Z",
        "url": "https://files.pythonhosted.org/packages/eb/73/6044b174146aa8e522cd6729604cd0e7191d8cbbafadbdf4e6bf2e2af629/aligned_bert_embedder-0.81-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb736044b174146aa8e522cd6729604cd0e7191d8cbbafadbdf4e6bf2e2af629",
        "md5": "7da1d677937c47caed04f0c90d45a096",
        "sha256": "756edce37afd31d3275c103fe639b4872a41ff115b66a61dc083a9ef43c420ef"
      },
      "downloads": -1,
      "filename": "aligned_bert_embedder-0.81-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7da1d677937c47caed04f0c90d45a096",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27653,
      "upload_time": "2020-06-04T10:59:49",
      "upload_time_iso_8601": "2020-06-04T10:59:49.056611Z",
      "url": "https://files.pythonhosted.org/packages/eb/73/6044b174146aa8e522cd6729604cd0e7191d8cbbafadbdf4e6bf2e2af629/aligned_bert_embedder-0.81-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}