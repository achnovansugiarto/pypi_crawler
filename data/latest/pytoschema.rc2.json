{
  "info": {
    "author": "Carlos Ruiz Lantero",
    "author_email": "carlos.ruiz.lantero@comprehensivetech.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![Test](https://github.com/comprehensivetech/pytoschema/workflows/Test/badge.svg?branch=master)\n\n# pytoschema\n\n1. [Overview](#overview)\n\n2. [Getting started](#getting-started)\n\n   1. [Installation](#installation)\n\n      1. [Supported versions](#supported-versions)      \n\n   2. [Scan a package](#scan-a-package)\n   3. [Scan a file](#scan-a-file)\n   4. [Include and exclude patterns](#include-and-exclude-patterns)\n\n3. [Type annotation rules](#type-annotation-rules)\n\n   1. [Rules](#rules)\n   2. [Allowed annotations](#allowed-annotations)\n\n      1. [Atomic types](#atomic-types)\n      2. [Composite types](#composite-types)\n\n   3. [Default function arguments](#default-function-arguments)\n\n4. [References](#references)\n\n## Overview\n\nThis is a Python package that uses static analysis - `ast` - to convert Python type annotations into JSON schemas.\n\nThis allows you to auto-generate the validation schemas from backend functions written in Python, so they can be used by\nother layers of your application, normally the frontend. As an example, let's look at this file:\n\n```python\nfrom typing import List, Literal, TypedDict\n\n\nclass UserProperties(TypedDict, total=False):\n   username: str\n   is_superadmin: bool\n   groups: List[str]\n   status: Literal[\"ACTIVE\", \"DISABLED\"]\n\n\ndef update_user(user_id: str, user_properties: UserProperties) -> bool:\n    pass  # Your function code\n```\n\nWe could now use the library to process this file, and it would create the following JSON schemas:\n\n```json\n{\n    \"update_user\": {\n        \"input\": {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"user_id\": {\n                    \"type\": \"string\"\n                },\n                \"user_properties\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"username\": {\n                            \"type\": \"string\"\n                        },\n                        \"is_superadmin\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"groups\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"status\": {\n                            \"enum\": [\n                                \"ACTIVE\",\n                                \"DISABLED\"\n                            ]\n                        }\n                    },\n                    \"required\": [],\n                    \"additionalProperties\": false\n                }\n            },\n            \"required\": [\n                \"user_id\",\n                \"user_properties\"\n            ],\n            \"additionalProperties\": false\n        },\n        \"output\": {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"type\": \"boolean\"\n        }\n    }\n}\n```\n\nThis allows you to document and validate your functions in a single place, next to your code, using native Python.\n\n## Getting started\n\n### Installation\n\n- `pip install pytoschema`.\n\n#### Supported versions\n\n- Python 3.8+ \n- JSON schema draft 7+\n\n### Scan a package\n\nAfter installing the package, you can open a python terminal from the root of the repo and run:\n\n```python\nimport os\nimport json\n\nfrom pytoschema.functions import process_package\n\nprint(json.dumps(process_package(os.path.join(\"test\", \"example\")), indent=4))\n```\n\nThe example package will be scanned and JSON schemas will be generated for all the top level functions it can find.\n\n### Scan a file\n\nYou can also target specific files, which won't include the package namespacing in the result value. Following on the\nsame terminal:\n\n```python\nfrom pytoschema.functions import process_file\n\nprint(json.dumps(process_file(os.path.join(\"test\", \"example\", \"service.py\")), indent=4))\n```\n\n### Include and exclude patterns\n\nInclude and exclude unix-like patterns can be used to filter function and module names we want to allow/disallow for\nscanning. See the difference when you now run this instead:\n\n```python\nprint(json.dumps(process_package(os.path.join(\"test\", \"example\"), exclude_patterns=[\"_*\"]), indent=4))\n```\n\nSimilarly, but applied to specific files:\n\n```python\nprint(json.dumps(process_file(os.path.join(\"test\", \"example\", \"service.py\"), include_patterns=[\"_*\"]), indent=4))\n```\n\nThings to take into account:\n- Exclude pattern matching overwrite include matches. \n- `__init__.py` files are not affected by pattern rules and are always scanned. However, you can still filter its\n  internal functions.\n\n## Type annotation rules\n\nFitting Python's typing model to JSON means not everything is allowed in your function signatures. This is a natural\nrestriction that comes with JSON data serialization. Hopefully, most of the useful stuff you need is allowed, provided\nyou follow these simple rules.\n\n### Rules\n\n1. The functions you want to scan need to be type annotated, using the annotations described in the next section.\n\n2. Function arguments are meant to be passed in key-value format, like a json object. This puts a couple of restrictions\n   regarding *args, **kwargs, positional-only and keyword-only arguments:\n\n   The following is allowed:\n   - ****kwargs**: `def func(**kwargs): pass`\n   - **keyword-only arguments**: `def func(*, a): pass`\n\n   The following is not allowed:\n   - ***args**: `def func(*args): pass`\n   - **positional-only arguments**: `def func(a, /): pass`\n\n### Allowed annotations\n\n#### Atomic types\n\nSee Python type annotations and its JSON schema counterparts.\n\n- `bool`\n  ```json\n  {\"type\": \"boolean\"}\n  ```\n- `int`\n  ```json\n  {\"type\": \"integer\"}\n  ```\n- `float`\n  ```json\n  {\"type\": \"number\"}\n  ```\n- `str`\n  ```json\n  {\"type\": \"string\"}\n  ```\n- `None`\n  ```json\n  {\"type\": \"null\"}\n  ```\n- `typing.Any`\n  ```json\n  {\n      \"anyOf\": [\n          {\"type\": \"object\"},\n          {\"type\": \"array\"},\n          {\"type\": \"null\"},\n          {\"type\": \"string\"},\n          {\"type\": \"boolean\"},\n          {\"type\": \"integer\"},\n          {\"type\": \"number\"}\n      ]\n  }\n  ```\n\n#### Composite types\n\nYou can use the following composite types to build more complex validation. These examples are nested with atomic types,\nso they are easy to understand, but you can nest your composite types with other composite types.\n\n- `typing.Dict[str, int]`\n  ```json\n  {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n          \"type\": \"integer\"\n      }\n  }\n  ```\n- `typing.List[int]`\n  ```json\n  {\n      \"type\": \"array\",\n      \"items\": {\n          \"type\": \"integer\"\n      }\n  }\n  ```\n- `typing.Literal[\"red\", 5, 5.0, None, False]`\n  ```json\n  {\n      \"enum\": [\"red\", 5, 5.0, null, false]\n  }\n  ```\n- `typing.Optional[boolean]`\n  ```json\n  {\n      \"anyOf\": [\n          {\"type\": \"null\"},\n          {\"type\": \"boolean\"}\n      ]\n  }\n  ```\n- `typing.Union[float, boolean]`\n  ```json\n  {\n      \"anyOf\": [\n          {\"type\": \"number\"},\n          {\"type\": \"boolean\"}\n      ]\n  }\n  ```\n\nYou can define your own types and re-use them:\n\n```python\nServicePort = typing.Union[int, float]\nServiceConfig = typing.Dict[str, typing.Any]\nServiceState = typing.Literal[\"RUNNING\", \"STOPPED\", \"UNKNOWN\"]\n```\n\nYou can use `typing.TypedDict`, to build stronger validation on dict-like objects (Only class-based syntax). See how you\ncan chain types with no restrictions:\n\n```python\nclass Service(typing.TypedDict, total=False):\n    address: str\n    port: ServicePort\n    config: ServiceConfig\n    state: ServiceState\n    tags: typing.List[str]\n    debug: bool\n```\n\nThe flag `total=False` is there to indicate that the properties are required, default value is `True`. See the result:\n\n```json\n{\n     \"type\": \"object\",\n     \"additionalProperties\": false,\n     \"required\": [],\n     \"properties\": {\n         \"address\": {\n              \"type\": \"string\"\n         },\n         \"port\": {\n              \"anyOf\": [\n                   {\"type\": \"integer\"}, \n                   {\"type\": \"number\"}\n              ]\n         },\n         \"config\": {\n             \"additionalProperties\": {\n                 \"anyOf\": [\n                     {\"type\": \"object\"},\n                     {\"type\": \"array\"},\n                     {\"type\": \"null\"},\n                     {\"type\": \"string\"},\n                     {\"type\": \"boolean\"},\n                     {\"type\": \"integer\"},\n                     {\"type\": \"number\"}\n                 ]\n             },\n             \"type\": \"object\"\n         },\n         \"state\": {\n              \"enum\": [\"RUNNING\", \"STOPPED\", \"UNKNOWN\"]\n         },\n         \"tags\": {\n              \"type\": \"array\",\n              \"items\": {\"type\": \"string\"}\n         },\n         \"debug\": {\n              \"type\": \"boolean\"\n         }\n     }\n}\n```\n\nYou can import these user-defined types within your package, and they will be picked up. However, due to the static\nnature of the scan, custom types coming from external packages can't be easily followed and hence not supported yet.\n\n### Default function arguments\n\nGiving default values to your function arguments would make those properties not required in the output schema.\n\nSee this function:\n\n```python\nimport typing\n\n\ndef my_func(a: str, b: int = 3):\n    pass  # Some code\n```\n\nNow compare it with its JSON schema representation:\n\n```json\n{\n    \"my_func\": {\n        \"input\": {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"a\": {\"type\": \"string\"},\n                \"b\": {\"type\": \"integer\"}\n            },\n            \"required\": [\"a\"],\n            \"additionalProperties\": false\n        },\n        \"output\": {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"type\": \"null\"\n        }\n    }\n}\n```\n\n## References\n\n- Typing module docs: [https://docs.python.org/3/library/typing.html](https://docs.python.org/3/library/typing.html)\n- JSON schema SPEC: [https://json-schema.org/](https://json-schema.org/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/comprehensivetech/pytoschema",
    "keywords": "",
    "license": "",
    "maintainer": "Carlos Ruiz Lantero",
    "maintainer_email": "carlos.ruiz.lantero@comprehensivetech.co.uk",
    "name": "pytoschema",
    "package_url": "https://pypi.org/project/pytoschema/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytoschema/",
    "project_urls": {
      "Homepage": "https://github.com/comprehensivetech/pytoschema"
    },
    "release_url": "https://pypi.org/project/pytoschema/2.0.0/",
    "requires_dist": [
      "black (==20.8b1) ; extra == 'test'",
      "flake8 (==3.9.0) ; extra == 'test'",
      "pytest (==6.2.3) ; extra == 'test'",
      "pytest-cov (==2.11.1) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A package to convert Python type annotations into JSON schemas",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11763258,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7166175221336b32ff77a687bef0c6795bea20d4e1a0f217fee0f4d6fad6b46",
          "md5": "e8b17a6cf1627c922de19f1d6eafada4",
          "sha256": "9ee9027c15131dc15f814726cf68f6cfc4a847acae8716d4808376161a6ba491"
        },
        "downloads": -1,
        "filename": "pytoschema-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8b17a6cf1627c922de19f1d6eafada4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10968,
        "upload_time": "2021-04-06T02:55:01",
        "upload_time_iso_8601": "2021-04-06T02:55:01.897933Z",
        "url": "https://files.pythonhosted.org/packages/b7/16/6175221336b32ff77a687bef0c6795bea20d4e1a0f217fee0f4d6fad6b46/pytoschema-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c08b99b788f4c7e1eec4097f1a8a470c3304a75826d040778f6d0c9e3b2dabd",
          "md5": "0f205e69268a2726f72de700583755ce",
          "sha256": "02605890c171531ff2e6094cb4944d48ac77139e28fc4b98818ae45c7733c97c"
        },
        "downloads": -1,
        "filename": "pytoschema-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0f205e69268a2726f72de700583755ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15716,
        "upload_time": "2021-04-06T02:55:03",
        "upload_time_iso_8601": "2021-04-06T02:55:03.547918Z",
        "url": "https://files.pythonhosted.org/packages/0c/08/b99b788f4c7e1eec4097f1a8a470c3304a75826d040778f6d0c9e3b2dabd/pytoschema-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c5d8cec2f9999473434970aad2d56713b51dc0b1d0518933edcd917b1e10f46",
          "md5": "e672533c2a37f3486fd300c6a6787c67",
          "sha256": "813b12d1f6329e3ab00201b85c74e1512364979cd73b1257f8b900631bb2c5b1"
        },
        "downloads": -1,
        "filename": "pytoschema-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e672533c2a37f3486fd300c6a6787c67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11444,
        "upload_time": "2021-04-06T16:02:42",
        "upload_time_iso_8601": "2021-04-06T16:02:42.796135Z",
        "url": "https://files.pythonhosted.org/packages/4c/5d/8cec2f9999473434970aad2d56713b51dc0b1d0518933edcd917b1e10f46/pytoschema-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "089cddd5de8d5565ba8a5f60f234dd0d8f23a6a513114175e5b523d5dde106f4",
          "md5": "6cc43679d079ae4ab06aa4ad4b5b0bb2",
          "sha256": "959a2583dd66d7fefa8d33a44d8b4fc5bdb345d9640ed600fda48b6d2bcb9cb7"
        },
        "downloads": -1,
        "filename": "pytoschema-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6cc43679d079ae4ab06aa4ad4b5b0bb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16930,
        "upload_time": "2021-04-06T16:02:44",
        "upload_time_iso_8601": "2021-04-06T16:02:44.374854Z",
        "url": "https://files.pythonhosted.org/packages/08/9c/ddd5de8d5565ba8a5f60f234dd0d8f23a6a513114175e5b523d5dde106f4/pytoschema-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c5d8cec2f9999473434970aad2d56713b51dc0b1d0518933edcd917b1e10f46",
        "md5": "e672533c2a37f3486fd300c6a6787c67",
        "sha256": "813b12d1f6329e3ab00201b85c74e1512364979cd73b1257f8b900631bb2c5b1"
      },
      "downloads": -1,
      "filename": "pytoschema-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e672533c2a37f3486fd300c6a6787c67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11444,
      "upload_time": "2021-04-06T16:02:42",
      "upload_time_iso_8601": "2021-04-06T16:02:42.796135Z",
      "url": "https://files.pythonhosted.org/packages/4c/5d/8cec2f9999473434970aad2d56713b51dc0b1d0518933edcd917b1e10f46/pytoschema-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "089cddd5de8d5565ba8a5f60f234dd0d8f23a6a513114175e5b523d5dde106f4",
        "md5": "6cc43679d079ae4ab06aa4ad4b5b0bb2",
        "sha256": "959a2583dd66d7fefa8d33a44d8b4fc5bdb345d9640ed600fda48b6d2bcb9cb7"
      },
      "downloads": -1,
      "filename": "pytoschema-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6cc43679d079ae4ab06aa4ad4b5b0bb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16930,
      "upload_time": "2021-04-06T16:02:44",
      "upload_time_iso_8601": "2021-04-06T16:02:44.374854Z",
      "url": "https://files.pythonhosted.org/packages/08/9c/ddd5de8d5565ba8a5f60f234dd0d8f23a6a513114175e5b523d5dde106f4/pytoschema-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}