{
  "info": {
    "author": "Dark-Light",
    "author_email": "darklight02014@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h1> PyDB! A Library Focused Towards Making SQLITE for Discord Bots easier! </h1>\n\n<h4> Based on <strong>aiosqlite</strong>!</h4>\n\n<h3>Features: <strong>Economy Database Handler, Levelling Database Handler, Warns Database Handler</strong></h3>\n\n<hr>\n\n<h2> Example for Economy Databases! </h2>\n\n```python\n\nimport disnake\nfrom disnake.ext import commands\nfrom PyDB import EconomyDB\nimport random\n\nbot = commands.Bot(command_prefix='!', intents=disnake.Intents.all())\ndb = EconomyDB()\n\n@bot.event\nasync def on_ready():\n    await db.init_db()\n    print('Online')\n\n@bot.command()\nasync def cf(ctx: commands.Context, amount: int):\n    user = await db.create_account(ctx.author.id, 500, 1000)\n\n    ch = random.choice([1, 2])\n\n    if ch == 1:\n        await ctx.send(f\"You won {amount*2}\")\n        return await db.update_account(ctx.author.id, wallet=user.wallet+amount*2)\n    await ctx.send(f\"You lost {amount}\")\n    return await db.update_account(ctx.author.id, wallet=user.wallet-amount)\n\n@bot.command()\nasync def bal(ctx: commands.Context, member: disnake.Member=None):\n    member = ctx.author or member\n    user = await db.create_account(member.id, 500, 1000)\n    embed = disnake.Embed(description=f\"Wallet: {user.wallet} | Bank: {user.bank}\")\n    await ctx.send(embed=embed)\n\nbot.run(\"token\")\n\n```\n\n<h4>Methods</h4>\n\n - create_account(user_id INTEGER, initial_wallet_amount INTEGER, initial_bank_account INTEGER) [`Returns a Named Tuple if User exists or is added to the Database!`]\n\n - read_data(user_id INTEGER) [`Returns a Named Tuple with user data`]\n\n - update_account(user_id INTEGER, *, wallet_amount INTEGER, bank_amount INTEGER)\n\n<hr>\n\n<h2> Example for Levels Database! </h2>\n\n```python\nimport disnake\nfrom disnake.ext import commands\nfrom PyDB import LevelDB\n\nbot = commands.Bot(command_prefix='!', intents=disnake.Intents.all())\ndb = LevelDB()\n\n@bot.command()\nasync def rank(ctx: commands.Context):\n    user = await db.create_account(ctx.author.id, 5, 1)\n    embed = disnake.Embed(description=f\"Experience: {user.xp} | Level: {user.level}\")\n    await ctx.send(embed=embed)\n    \n@bot.listen(\"on_ready\")\nasync def on_ready():\n    await db.init_db()\n    print('Online')\n\n@bot.listen(\"on_message\")\nasync def on_message(message: disnake.Message):\n    if message.author.bot: return\n\n    user = await db.create_account(message.author.id, 5, )\n    if user.xp + 5 % 50 == 0:\n        await db.update_account(message.author.id, xp=user.xp+5, level=user.level+1)\n        return  await message.channel.send(f\"{message.author.mention} has levelled up to {user.level+1}\")\n    await db.update_account(message.author.id, xp=user.xp+5, level=user.level)\n    \nbot.run(\"token\")\n```\n\n<h4>Methods</h4>\n\n - create_account(user_id INTEGER, initial_experience INTEGER, initial_level INTEGER) [`Returns a Named Tuple if User exists or is added to the Database!`]\n\n - read_data(user_id INTEGER) [`Returns a Named Tuple with user data`]\n\n - update_account(user_id INTEGER, *, experience INTEGER, level INTEGER)\n\n\n<hr>\n\n<h2> Example for Warns Database! </h2>\n\n```python\nimport disnake\nfrom disnake.ext import commands\nfrom PyDB import WarnDB\n\nbot = commands.Bot(command_prefix=\"!\", intents=disnake.Intents.all())\ndb = WarnDB()\n\n@bot.listen(\"on_ready\")\nasync def on_ready():\n    await db.init_db()\n    print(\"online\")\n\n@bot.command()\n#check for permissions\nasync def warn(ctx: commands.Context, member: disnake.Member, *,reason: str):\n    user_data = await db.create_account(ctx.author.id, 0)\n    embed = disnake.Embed(title=f\"Warning #{user_data.warns+1} from {ctx.guild.name}\", description=f\"Reason: {reason}\", color=ctx.author.color).set_thumbnail(url=member.display_avatar.url)\n    try:\n        await member.send(embed=embed)\n        await ctx.send(f\"warned! It was **{member}**'s warning number: {user_data.warns+1}\")\n        await db.update_account(ctx.author.id, warnings=user_data.warns+1)\n    except disnake.Forbidden:\n        await ctx.send(\"could not warn that member!\")\n\n@bot.command()\nasync def infractions(ctx: commands.Context, member: disnake.Member=None):\n    member = ctx.author or member\n    user_data = await db.create_account(member.id, 0)\n    embed = disnake.Embed(title=f\"Infractions for {ctx.author.name}\", description=f\"Warnings: {user_data.warns}\")\n    await ctx.send(embed=embed)\n\nbot.run(\"token\")\n```\n\n<h4>Methods</h4>\n\n - create_account(user_id INTEGER, initial_warns INTEGER) [`Returns a Named Tuple if User exists or is added to the Database!`]\n\n - read_data(user_id INTEGER) [`Returns a Named Tuple with user data`]\n\n - update_account(user_id INTEGER, *, warns INTEGER)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "database sqlite3",
    "license": "GNU",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDcDB",
    "package_url": "https://pypi.org/project/PyDcDB/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyDcDB/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PyDcDB/0.4.1/",
    "requires_dist": [
      "aiosqlite"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13308120,
  "releases": {
    "0.1": [],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "886eaab1ad35f83e7d02a0b225853652132ce9aa9afb6ee96fa4b26e5745c627",
          "md5": "0ac9ae66faba54388121ff85400e5895",
          "sha256": "b876ded64cdc197a34dd2ff20b5747adb82a682c6048d43b842a3e1ba87b0630"
        },
        "downloads": -1,
        "filename": "PyDcDB-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ac9ae66faba54388121ff85400e5895",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6389,
        "upload_time": "2022-03-27T03:11:11",
        "upload_time_iso_8601": "2022-03-27T03:11:11.090770Z",
        "url": "https://files.pythonhosted.org/packages/88/6e/aab1ad35f83e7d02a0b225853652132ce9aa9afb6ee96fa4b26e5745c627/PyDcDB-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccd5f2236757a108fe9eaa2f7aaa752ded3b516be940b7a7468fd08de4647c4d",
          "md5": "41ddf92a06610523d70f19ead8e57662",
          "sha256": "0d085a728b1ed6a779150ccef2185dc206b3bba242e25fd32761e186029bda19"
        },
        "downloads": -1,
        "filename": "PyDcDB-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "41ddf92a06610523d70f19ead8e57662",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5803,
        "upload_time": "2022-03-27T03:11:12",
        "upload_time_iso_8601": "2022-03-27T03:11:12.844524Z",
        "url": "https://files.pythonhosted.org/packages/cc/d5/f2236757a108fe9eaa2f7aaa752ded3b516be940b7a7468fd08de4647c4d/PyDcDB-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61a1b0cc488bc4e3ab19bd84f90a75050a1bde64cad2813a7e4bffeb79997c90",
          "md5": "b875c40b7d15f009a209fc00984519cd",
          "sha256": "e7cac6eb0ec39eab59dd7c2db47963ac9214a90538cb3081c7f43f23aa043732"
        },
        "downloads": -1,
        "filename": "PyDcDB-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b875c40b7d15f009a209fc00984519cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6415,
        "upload_time": "2022-03-27T03:20:35",
        "upload_time_iso_8601": "2022-03-27T03:20:35.852342Z",
        "url": "https://files.pythonhosted.org/packages/61/a1/b0cc488bc4e3ab19bd84f90a75050a1bde64cad2813a7e4bffeb79997c90/PyDcDB-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89bcab52490716dfaac411b6d7c7b1aa6a4b837e61a3969f2c4921c5f69d5dfe",
          "md5": "c51c5dd15e5ad9d8d392287cb40af2c8",
          "sha256": "266ed4597949ed70ce1cb1da744026136e2134d666596975ca29a0d61186cea6"
        },
        "downloads": -1,
        "filename": "PyDcDB-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c51c5dd15e5ad9d8d392287cb40af2c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5820,
        "upload_time": "2022-03-27T03:20:37",
        "upload_time_iso_8601": "2022-03-27T03:20:37.816039Z",
        "url": "https://files.pythonhosted.org/packages/89/bc/ab52490716dfaac411b6d7c7b1aa6a4b837e61a3969f2c4921c5f69d5dfe/PyDcDB-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61a1b0cc488bc4e3ab19bd84f90a75050a1bde64cad2813a7e4bffeb79997c90",
        "md5": "b875c40b7d15f009a209fc00984519cd",
        "sha256": "e7cac6eb0ec39eab59dd7c2db47963ac9214a90538cb3081c7f43f23aa043732"
      },
      "downloads": -1,
      "filename": "PyDcDB-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b875c40b7d15f009a209fc00984519cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6415,
      "upload_time": "2022-03-27T03:20:35",
      "upload_time_iso_8601": "2022-03-27T03:20:35.852342Z",
      "url": "https://files.pythonhosted.org/packages/61/a1/b0cc488bc4e3ab19bd84f90a75050a1bde64cad2813a7e4bffeb79997c90/PyDcDB-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89bcab52490716dfaac411b6d7c7b1aa6a4b837e61a3969f2c4921c5f69d5dfe",
        "md5": "c51c5dd15e5ad9d8d392287cb40af2c8",
        "sha256": "266ed4597949ed70ce1cb1da744026136e2134d666596975ca29a0d61186cea6"
      },
      "downloads": -1,
      "filename": "PyDcDB-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c51c5dd15e5ad9d8d392287cb40af2c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5820,
      "upload_time": "2022-03-27T03:20:37",
      "upload_time_iso_8601": "2022-03-27T03:20:37.816039Z",
      "url": "https://files.pythonhosted.org/packages/89/bc/ab52490716dfaac411b6d7c7b1aa6a4b837e61a3969f2c4921c5f69d5dfe/PyDcDB-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}