{
  "info": {
    "author": "Carlos Olivares",
    "author_email": "carlos.olivares@phys.ens.fr",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Pygor3\n\nPygor3 is a python3 framework to analyze, vizualize, generate \nand infer V(D)J recombination [IGoR](https://github.com/statbiophys/IGoR) 's models. \nPygor3 provide a python interface to execute and encapsulate \nIGoR’s input/outputs by using a sqlite3 database that \ncontains input sequences, alignments, model parameters, \nconditional probabilities of the model Bayes network, \nbest scenarios and generation probabilities in a single db file.\nPygor3 also has command line utilities to import/export \nIGoR generated files to [AIRR standard format](https://docs.airr-community.org/en/latest/index.html).\n\n\n\n## Installation\n1. First install IGoR in your sytem [IGoR](https://github.com/statbiophys/IGoR) if you don't have it already.\nPygor will use default IGoR's path to execute it.\n\n2. (Optional) Install [conda](https://docs.conda.io/en/latest/) or \n[anaconda](https://www.anaconda.com/) and create (or use ) a virtual environment.\n\n    ```console\n      $ conda create --name statbiophys python=3.7\n      $ conda activate statbiophys\n    ```\n3. Use the package manager [pip](https://pip.pypa.io/en/stable/)\n\n    ```console\n    (statbiophys) $ pip install pygor3 \n    ```\n\n## Command Line Usage\n\n### Quickstart\n\n#### Get demo sample data\nGet a copy of demo sequences in current directory\n\n```console\n$ pygor demo-get-data\n--------------------------------\nCopy data from :  /home/olivares/GitHub/statbiophys/pygor3/pygor3/demo\nto:  /home/olivares/testing_pygor/demo\n```\nThis command creates a directory demo with the following structure, with sequences to infer and evaluate\na new model.\n\n```console\ndemo/\n└── data\n    └── IgL\n        ├── IgL_seqs_memory_Functional.txt\n        ├── IgL_seqs_memory_Nofunctional.txt\n        ├── IgL_seqs_naive_Functional.txt\n        └── IgL_seqs_naive_Nofunctional.txt\n```\n\n#### New Model\nNow to create a model from scratch, donwload gene templates and anchors from IMGT website [IMGT](http://www.imgt.org/)\nA list of available species to download from IMGT can be query with imgt-get-genomes command and option --info.\n\n    ```console\n    $ pygor imgt-get-genomes --info\n    --------------------------------\n    http://www.imgt.org\n    Downloading data from ... \n    List of IMGT available species:\n\n    Gallus+gallus\n    Cercocebus+atys\n    Mustela+putorius+furo\n    Macaca+nemestrina\n    Vicugna+pacos\n    Mus+cookii\n    Bos+taurus\n    Canis+lupus+familiaris\n    Ornithorhynchus+anatinus\n    Macaca+mulatta\n    Rattus+rattus\n    Mus+minutoides\n    Danio+rerio\n    Oncorhynchus+mykiss\n    Tursiops+truncatus\n    Felis+catus\n    Homo+sapiens\n    Salmo+salar\n    Macaca+fascicularis\n    Mus+musculus\n    Mus+saxicola\n    Capra+hircus\n    Sus+scrofa\n    Mus+pahari\n    Ovis+aries\n    Equus+caballus\n    Camelus+dromedarius\n    Oryctolagus+cuniculus\n    Papio+anubis+anubis\n    Mus+spretus\n    Rattus+norvegicus\n    For more details access:\n    http://www.imgt.org/download/GENE-DB/IMGTGENEDB-GeneList\n    ```\n\n2. Download genomic templates using VJ or VDJ corresponding to the type of chain.\n\n    ```console\n    $ pygor imgt-get-genomes --imgt-species Homo+sapiens --imgt-chain IGL -t VJ\n    --------------------------------\n    http://www.imgt.org\n    get_ref_genome\n    Homo+sapiens IGLV http://www.imgt.org/genedb/GENElect?query=7.2+IGLV&species=Homo+sapiens\n    http://www.imgt.org/genedb/GENElect?query=7.2+IGLV&species=Homo+sapiens\n    Homo+sapiens IGLJ http://www.imgt.org/genedb/GENElect?query=7.2+IGLJ&species=Homo+sapiens\n    http://www.imgt.org/genedb/GENElect?query=7.2+IGLJ&species=Homo+sapiens\n    http://www.imgt.org/genedb/GENElect?query=8.1+IGLV&species=Homo+sapiens&IMGTlabel=2nd-CYS\n    No anchor is found for : AC279423|IGLV(I)-11-1*01|Homo sapiens|P|V-REGION|22452..22620|169 nt|1| | | | |169+0=169|partial in 5'| |\n    No anchor is found for : D87007|IGLV(I)-20*01|Homo sapiens|P|V-REGION|15573..15858|286 nt|1| | | | |286+0=286| | |\n    No anchor is found for : AC279208|IGLV(I)-20*02|Homo sapiens|P|V-REGION|19943..20228|286 nt|1| | | | |286+0=286| | |\n\n    ...\n\n    Number of features: 0\n    Seq('TGCTGTGTTCGGAGGAGGCACCCAGCTGACCGTCCTCG')\n    ID: D87017|IGLJ7*02|Homo\n    Name: D87017|IGLJ7*02|Homo\n    Description: D87017|IGLJ7*02|Homo sapiens|F|J-REGION|18513..18550|38 nt|2| | | | |38+0=38| | |\n    Number of features: 0\n    Seq('TGCTGTGTTCGGAGGAGGCACCCAGCTGACCGCCCTCG')\n    ----------------------\n    Genomic VJ templates in files: \n    models/Homo+sapiens/IGL/ref_genome/genomicVs__imgt.fasta models/Homo+sapiens/IGL/ref_genome/genomicJs__imgt.fasta\n\n    ```\n\n    This creates a directory **models** with the following structure will be created\n\n    ```\n    models/\n    └── Homo+sapiens\n        └── TRB\n            ├── models\n            └── ref_genome\n                ├── genomicDs.fasta\n                ├── genomicDs__imgt.fasta\n                ├── genomicDs__imgt.fasta_short\n                ├── genomicJs.fasta\n                ├── genomicJs__imgt.fasta\n                ├── genomicJs__imgt.fasta_short\n                ├── genomicJs__imgt.fasta_trim\n                ├── genomicVs.fasta\n                ├── genomicVs__imgt.fasta\n                ├── genomicVs__imgt.fasta_short\n                ├── genomicVs__imgt.fasta_trim\n                ├── J_gene_CDR3_anchors.csv\n                ├── J_gene_CDR3_anchors__imgt.csv\n                ├── J_gene_CDR3_anchors__imgt.csv_short\n                ├── V_gene_CDR3_anchors.csv\n                ├── V_gene_CDR3_anchors__imgt.csv\n                └── V_gene_CDR3_anchors__imgt.csv_short\n\n    ```\n\n    ---\n    **Important Note**\n    It is important to review carefully your downloaded genes templates. Pygor automatically rename to long\n    IMGT descriptions to a short one. For instance\n\n    D86996|IGLV(I)-56*01|Homo sapiens|P|V-REGION|12276..12571|296 nt|1| | | | |296+0=296| | |\n\n    D86996|IGLV(I)-56*01|Homo sapiens|P|V-REGION|12576..12876|301 nt|1| | | | |301+0=301| | |\n\n    Are renamed as :\n\n    IGLV(I)-56*01\n\n    IGLV(I)-56*01 \n\n    For these cases, is important to rename it or remove it manually, before  create a new model.\n    For simplicity in this demo we remove the second IGLV(I)-56*01\n\n    ---\n\n3. Create a new initial default model, with uniform distribution for the conditional probabilities\nof Bayes network (\"model_marginals.txt\" file). Notice that in IGoR this file is called marginals,\nbut it is not the marginal probability of a recombination event.\n\n    ```console\n    $ pygor model-create -M models/Homo+sapiens/IGL/ -t VJ\n    --------------------------------\n    No D genes were found.\n    [Errno 2] No such file or directory: 'models/Homo+sapiens/IGL//ref_genome//genomicDs.fasta'\n    No D genes were found.\n    [Errno 2] No such file or directory: 'models/Homo+sapiens/IGL//ref_genome//genomicDs.fasta'\n    igortask.igor_model_dir_path:  models/Homo+sapiens/IGL/\n    Writing model parms in file  models/Homo+sapiens/IGL//models/model_parms.txt\n    Writing model marginals in file  models/Homo+sapiens/IGL//models/model_marginals.txt    \n    ```\n\n   A uniform model files will be created in files **model_parms.txt** and **model_marginals.txt** at directory path\n    ```console\n    models/\n    └── Homo+sapiens\n        └── IGL\n            ├── models\n            │   ├── model_marginals.txt\n            │   └── model_parms.txt\n            └── ref_genome\n                ├── genomicJs.fasta\n                ├── genomicJs__imgt.fasta\n                ├── genomicJs__imgt.fasta_short\n                ├── genomicJs__imgt.fasta_trim\n                ├── genomicVs.fasta\n                ├── genomicVs__imgt.fasta\n                ├── genomicVs__imgt.fasta_short\n                ├── genomicVs__imgt.fasta_trim\n                ├── J_gene_CDR3_anchors.csv\n                ├── J_gene_CDR3_anchors__imgt.csv\n                ├── J_gene_CDR3_anchors__imgt.csv_short\n                ├── V_gene_CDR3_anchors.csv\n                ├── V_gene_CDR3_anchors__imgt.csv\n                └── V_gene_CDR3_anchors__imgt.csv_short\n\n\n    ```\n\n   At this point you can use a set of non-productive sequence to infer a model within IGoR directly \n   or by using pygor command.\n\n    ```console\n    $ pygor igor-infer -M models/Homo+sapiens/IGL/ -i data/IgL/IgL_seqs_naive_Nofunctional.txt -o new_IgL_naive\n    --------------------------------\n    ===== Running inference =====\n    ...\n    WARNING: write_model_parms path  [Errno 2] No such file or directory: ''\n    Writing model parms in file  new_IgL_naive_parms.txt\n    WARNING: IgorModel_Marginals.write_model_marginals path  [Errno 2] No such file or directory: ''\n    Writing model marginals in file  new_IgL_naive_marginals.txt\n    Database file :  new_IgL_naive\n\n    ```\n\n   This will output the following files\n\n   ```console\n   new_IgL_naive.db\n   new_IgL_naive_BN.pdf\n   new_IgL_naive_PM.pdf\n   new_IgL_naive_marginals.txt\n   new_IgL_naive_parms.txt\n   ```\n\n   where new_hs_trb.db is a database with the encapsulated information about the new model and \n   the date used by IGoR to infer it, new_IgL_naive_BN.pdf is a plot of the Bayesian network(BN) of inferred\n   model, new_IgL_naive_PM.pdf are plots of the real marginals of events in BN, and finally the \n   new_IgL_naive_parms.txt and new_IgL_naive_marginals.txt the inferred model in IGoR's format.\n\n\n\n#### Model Plots\nA model can be plotted from a database file, model directory or by passing the model_parms.txt and \nmodel_marginals.txt\n\n\n```    \n\n$ pygor model-plot -M models/Homo+sapiens/IGL/ -o IgL_plot\n\nor \n\n$ pygor model-plot -D new_IgL_naive.db -o IgL_plot\n```\nThis will output two pdf files with the Marginal Probabilities and Conditional probabilities of events\n\n![](BayesNetwork.png)\n![](GeneChoice_MP.png)\n![](GeneChoice_CP.png)\n\n\n#### Database files\nThe .db files can contain all the information in IGoR's standard files in a single sqilite database file,\nand can be examinated with any sqlite client, like sqlite3 or sqlibrowser\n\n```console\n$ sqlite3 new_IgL_naive.db \nSQLite version 3.33.0 2020-08-14 13:23:32\nEnter \".help\" for usage hints.\nsqlite> .tables\nIgorDAlignments       IgorIndexedSeq        IgorMM_vj_ins       \nIgorDGeneTemplate     IgorJAlignments       IgorMP_Edges        \nIgorER_j_5_del        IgorJGeneCDR3Anchors  IgorMP_ErrorRate    \nIgorER_j_choice       IgorJGeneTemplate     IgorMP_Event_list   \nIgorER_v_3_del        IgorMM_j_5_del        IgorVAlignments     \nIgorER_v_choice       IgorMM_j_choice       IgorVGeneCDR3Anchors\nIgorER_vj_dinucl      IgorMM_v_3_del        IgorVGeneTemplate   \nIgorER_vj_ins         IgorMM_v_choice     \nIgorIndexedCDR3       IgorMM_vj_dinucl    \n\n```\n\nHowever, pygor has its own methods to maniputate data a database file. \nFor instance, db-ls list the contents of the database and the number of records\n\n```console\n$ pygor db-ls -D new_IgL_naive.db \n--------------------------------\n=== Sequences tables igor-reads: \nIgorIndexedSeq  :  24985\n=== Genomes References tables igor-genomes: \nIgorVGeneTemplate  :  151\nIgorJGeneTemplate  :  10\nIgorDGeneTemplate  :  0\nIgorVGeneCDR3Anchors  :  111\nIgorJGeneCDR3Anchors  :  10\n=== Alignments tables igor-alignments: \nIgorIndexedCDR3  :  24985\nIgorVAlignments  :  846743\nIgorJAlignments  :  257400\nIgorDAlignments  :  0\n=== Model tables igor-model: \nIgorMP_Event_list  :  6\nIgorMP_Edges  :  3\nIgorMP_ErrorRate  :  1\nIgorER_v_choice  :  151\nIgorER_j_choice  :  10\nIgorER_v_3_del  :  21\nIgorER_j_5_del  :  21\nIgorER_vj_ins  :  41\nIgorER_vj_dinucl  :  4\nIgorMM_v_choice  :  151\nIgorMM_j_choice  :  1510\nIgorMM_v_3_del  :  3171\nIgorMM_j_5_del  :  210\nIgorMM_vj_ins  :  41\nIgorMM_vj_dinucl  :  16\n=== Output tables igor-pgen and igor-scenarios: \n\n```\n\nIn a similar way the commands db-rm, db-cp, db-import and db-export can be used to manipulate\ndatabase files.\n\n```console\n$ pygor db-cp -D new_IgL_naive.db -o new_IgL_naive_mdl.db --igor-genomes --igor-model\n--------------------------------\n**** Tables in source database :  new_IgL_naive.db\n=== Sequences tables igor-reads: \nIgorIndexedSeq  :  24985\n=== Genomes References tables igor-genomes: \nIgorVGeneTemplate  :  151\nIgorJGeneTemplate  :  10\nIgorDGeneTemplate  :  0\nIgorVGeneCDR3Anchors  :  111\nIgorJGeneCDR3Anchors  :  10\n=== Alignments tables igor-alignments: \nIgorIndexedCDR3  :  24985\nIgorVAlignments  :  846743\nIgorJAlignments  :  257400\nIgorDAlignments  :  0\n=== Model tables igor-model: \nIgorMP_Event_list  :  6\nIgorMP_Edges  :  3\nIgorMP_ErrorRate  :  1\nIgorER_v_choice  :  151\nIgorER_j_choice  :  10\nIgorER_v_3_del  :  21\nIgorER_j_5_del  :  21\nIgorER_vj_ins  :  41\nIgorER_vj_dinucl  :  4\nIgorMM_v_choice  :  151\nIgorMM_j_choice  :  1510\nIgorMM_v_3_del  :  3171\nIgorMM_j_5_del  :  210\nIgorMM_vj_ins  :  41\nIgorMM_vj_dinucl  :  16\n=== Output tables igor-pgen and igor-scenarios: \n**** Tables in destiny database:  new_IgL_naive_mdl.db\n=== Sequences tables igor-reads: \n=== Genomes References tables igor-genomes: \nIgorVGeneTemplate  :  151\nIgorJGeneTemplate  :  10\nIgorDGeneTemplate  :  0\nIgorVGeneCDR3Anchors  :  111\nIgorJGeneCDR3Anchors  :  10\n=== Alignments tables igor-alignments: \n=== Model tables igor-model: \nIgorMP_Event_list  :  6\nIgorMP_Edges  :  3\nIgorMP_ErrorRate  :  1\nIgorER_v_choice  :  151\nIgorER_j_choice  :  10\nIgorER_v_3_del  :  21\nIgorER_j_5_del  :  21\nIgorER_vj_ins  :  41\nIgorER_vj_dinucl  :  4\nIgorMM_v_choice  :  151\nIgorMM_j_choice  :  1510\nIgorMM_v_3_del  :  3171\nIgorMM_j_5_del  :  210\nIgorMM_vj_ins  :  41\nIgorMM_vj_dinucl  :  16\n=== Output tables igor-pgen and igor-scenarios: \n\n```\n\n\n\n#### Model evaluation\nOnce we have an inferred model we can evaluate the probability of a particular sequence to be \ngenerated (pgen) and get the most probable scenarios for the recombination of input sequences \nor generate synthetic sequences. Please notice that in \"new_IgL_naive_mdl.db\" contains \nonly the model and genomes information, which is necessary for the alignment and evaluation for IGoR.\n\n```console\n$ pygor igor-evaluate -D new_IgL_naive_mdl.db -i data/IgL/IgL_seqs_naive_Functional_small.txt  -o IgL_naive_evaluated\n```\n\n\nAn tsv airr standard format is created with the rearragement. \n\n```\nsequence_id\tsequence\trev_comp\tproductive\tv_call\td_call\tj_call\tsequence_alignment\tgermline_alignment\tjunction\tjunction_aa\tv_cigar\td_cigar\tj_cigar\tv_score\tv_identity\tv_support\tv_sequence_start\tv_sequence_end\tv_germline_start\tv_germline_end\tv_alignment_start\tv_alignment_end\td_score\td_identity\td_support\td_sequence_start\td_sequence_end\td_germline_start\td_germline_end\td_alignment_start\td_alignment_end\tj_score\tj_identity\tj_support\tj_sequence_start\tj_sequence_end\tj_germline_start\tj_germline_end\tj_alignment_start\tj_alignment_end\tsequence_aa\tvj_in_frame\tstop_codon\tcomplete_vdj\tlocus\tsequence_alignment_aa\tn1_length\tnp1\tnp1_aa\tnp1_length\tn2_length\tnp2\tnp2_aa\tnp2_length\tp3v_length\tp5d_length\tp3d_length\tp5j_length\tscenario_rank\tscenario_proba_cond_seq\tpgen\tquality\tquality_alignment\n0\tCAGTCTCCCAGGTACAAAGTCACAAAGAGGGGACAGGATGTAACTCTCAGGTGTGATCCAATTTCGAGTCATGCAACCCTTTATTGGTATCAACAGGCCCTGGGGCAGGGCCCAGAGTTTCTGACTTACTTCAATTATGAAGCTCAACCAGACAAATCAGGGCTGCCCAGTGATCGGTTCTCTGCAGAGAGGCCTGAGGGATCCATCTCCACTCTGACGATTCAGCGCACAGAGCAGCGGGACTCAGCCATGTATCGCTGTGCTAGCAGCATTCCTCGGGCTGTCAGATACGCAGTATTTTGGCCCAGGCACCCGGCTGACAGTGCTCG\tF\t\tTRBV7-7*01\tTRBD2*02\tTRBJ2-3*01\tGGTGCTGGAGTCTCCCAGTCTCCCAGGTACAAAGTCACAAAGAGGGGACAGGATGTAACTCTCAGGTGTGATCCAATTTCGAGTCATGCAACCCTTTATTGGTATCAACAGGCCCTGGGGCAGGGCCCAGAGTTTCTGACTTACTTCAATTATGAAGCTCAACCAGACAAATCAGGGCTGCCCAGTGATCGGTTCTCTGCAGAGAGGCCTGAGGGATCCATCTCCACTCTGACGATTCAGCGCACAGAGCAGCGGGACTCAGCCATGTATCGCTGTGCCAGCAGCATTCCTCGGGCTGTCAGATACGCAGTATTTTGGCCCAGGCACCCGGCTGACAGTGCTCG\t\tTGTGCTAGCAGCATTCCTCGGGCTGTCAGATACGCAGTATTTT\t\t285M\t4M\t45M\t1425\t\t\t2\t285\t16\t283\t\t\t20\t\t\t290\t292\t10\t13\t\t\t225\t\t\t7\t50\t6\t50\t\t6ATTCCT\t\t6\t4\tCTGT\t\t4\t0\t0\t0\t0\t1\t0.02729091.34834e-19\t\t\n0\tCAGTCTCCCAGGTACAAAGTCACAAAGAGGGGACAGGATGTAACTCTCAGGTGTGATCCAATTTCGAGTCATGCAACCCTTTATTGGTATCAACAGGCCCTGGGGCAGGGCCCAGAGTTTCTGACTTACTTCAATTATGAAGCTCAACCAGACAAATCAGGGCTGCCCAGTGATCGGTTCTCTGCAGAGAGGCCTGAGGGATCCATCTCCACTCTGACGATTCAGCGCACAGAGCAGCGGGACTCAGCCATGTATCGCTGTGCTAGCAGCATTCCTCGGGCTGTCAGATACGCAGTATTTTGGCCCAGGCACCCGGCTGACAGTGCTCG\tF\t\tTRBV7-7*01\tTRBD2*01\tTRBJ2-3*01\tGGTGCTGGAGTCTCCCAGTCTCCCAGGTACAAAGTCACAAAGAGGGGACAGGATGTAACTCTCAGGTGTGATCCAATTTCGAGTCATGCAACCCTTTATTGGTATCAACAGGCCCTGGGGCAGGGCCCAGAGTTTCTGACTTACTTCAATTATGAAGCTCAACCAGACAAATCAGGGCTGCCCAGTGATCGGTTCTCTGCAGAGAGGCCTGAGGGATCCATCTCCACTCTGACGATTCAGCGCACAGAGCAGCGGGACTCAGCCATGTATCGCTGTGCCAGCAGCATTCCTCGGGCTGTCAGATACGCAGTATTTTGGCCCAGGCACCCGGCTGACAGTGCTCG\t\tTGTGCTAGCAGCATTCCTCGGGCTGTCAGATACGCAGTATTTT\t\t285M\t4M\t45M\t1425\t\t\t2\t285\t16\t283\t\t\t20\t\t\t290\t292\t10\t13\t\t\t225\t\t\t7\t50\t6\t50\t\t6ATTCCT\t\t6\t4\tCTGT\t\t4\t0\t0\t0\t0\t2\t0.02729091.34834e-19\t\t\n...\n```\n\n\n## Documentation\n\nAll the command line interface commands can be used in a python environment, like jupyter notebook, by \nexporting the pygor3 package\n\n```python\nimport pygor3 as p3\nmdl = p3.IgorModel(model_parms_file=\"model_parms.txt\", model_marginals_file=\"model_marginals.txt\")\n```\n\nFor further details checkout the [documentation]() and notebooks directory.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alfaceor/pygor3",
    "keywords": "",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "igorpy",
    "package_url": "https://pypi.org/project/igorpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/igorpy/",
    "project_urls": {
      "Homepage": "https://github.com/alfaceor/pygor3"
    },
    "release_url": "https://pypi.org/project/igorpy/0.0.5/",
    "requires_dist": [
      "pandas",
      "numpy",
      "xarray",
      "beautifulsoup4",
      "biopython",
      "Click",
      "networkx",
      "requests",
      "matplotlib",
      "airr"
    ],
    "requires_python": ">=3.5",
    "summary": "Python package to manipulate and run IGoR data files",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9182189,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f1b0c29d1714918a22bc31f956adca81f70c3e7410c82fdc3bb722373943118",
          "md5": "308fd4611accef6277bf6657462dbeec",
          "sha256": "2f998bd54c4def67165ed40d49aa51ac72d5eecd474e838d88096a52cda3a179"
        },
        "downloads": -1,
        "filename": "igorpy-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "308fd4611accef6277bf6657462dbeec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7104866,
        "upload_time": "2021-01-20T12:56:33",
        "upload_time_iso_8601": "2021-01-20T12:56:33.767837Z",
        "url": "https://files.pythonhosted.org/packages/4f/1b/0c29d1714918a22bc31f956adca81f70c3e7410c82fdc3bb722373943118/igorpy-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f1b0c29d1714918a22bc31f956adca81f70c3e7410c82fdc3bb722373943118",
        "md5": "308fd4611accef6277bf6657462dbeec",
        "sha256": "2f998bd54c4def67165ed40d49aa51ac72d5eecd474e838d88096a52cda3a179"
      },
      "downloads": -1,
      "filename": "igorpy-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "308fd4611accef6277bf6657462dbeec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 7104866,
      "upload_time": "2021-01-20T12:56:33",
      "upload_time_iso_8601": "2021-01-20T12:56:33.767837Z",
      "url": "https://files.pythonhosted.org/packages/4f/1b/0c29d1714918a22bc31f956adca81f70c3e7410c82fdc3bb722373943118/igorpy-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}