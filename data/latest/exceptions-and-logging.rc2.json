{
  "info": {
    "author": "Chidi Nnadi",
    "author_email": "chidinnaemekannadi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 3.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# exceptions_and_logging\n\nA **Django app** for logging custom application errors on the server side and also spits out JSON error info on the client side. You basically subclass our ```ApplicationErrors``` class and the rest is done for you.\n\n\n\n**Dependencies**\n\n- Django Rest Framework\n- PyYaml\n\n\n\n**Installation**\n\nIn your virtual environment run:\n\n```pip install exceptions-and-logging``` \n\n\n\n**Usage**\n\n1. Add ```exceptions_and_logging```  to your Django installed apps:\n\n```python\n# settings.py\n\nINSTALLED_APPS = [\n    ...\n\n    'exceptions_and_logging',\n]\n```\n\n\n\n2. Without logging config.\n\n```python\n# your_app.exceptions.py (or wherever your app exceptions are)\n\nfrom exceptions_and_logging.exceptions import ApplicationErrors\n\nclass MyCustomException(ApplicationErrors):\n    default_message = \"This item: '%(item_name)s' isn't supposed to be null\"\n\n    def __init__(self, item_name):\n        message = self.default_message % {\"item_name\": item_name}\n        super().__init__(message)\n\n```\n\nWhen this error is raised:\n\n- Generated response on the client side (via Rest Framework):\n\n  - ```json\n    {\n      \"error\":{\n          \"type\":\"MyCustomException\",\n          \"message\":\"This item: 'SomeItem' isn't supposed to be null\",\n          \"code\":\"error\"\n          }\n    }\n    ```\n\n  - An HTTP 500 Application Error response is returned.\n\n- Generated log on the server console (stdout):\n\n  - ```\n    02/15/2021 04:30:34 PM - APPLICATION ERROR - ERROR\n    Error Type: MyCustomException\n    Error Message: This item: 'SomeItem' isn't supposed to be null\n    Traceback (most recent call last):\n      # Bunch of traceback info\n      ...\n      ...\n        raise NullError(\"SomeItem\")\n    your_app.exceptions.MyCustomException: This item: 'SomeItem' isn't supposed to be null\n    ```\n\n\n\n3. With Logging Config\n\n```python\n# your_app.exceptions.py (or wherever your app exceptions are)\n\nfrom exceptions_and_logging.exceptions import ApplicationErrors\n\n# Path to your logging config file\nmodule_dir = os.path.dirname(__file__)\nconfig_file = os.path.join(module_dir, \"myconfig.yaml\")\n\nclass MyCustomException(ApplicationErrors):\n    default_message = \"This item: '%(item_name)s' isn't supposed to be null\"\n    log_config = config_file \t# Can also be a dict config\n\n    # If no logger name is passed, it will use the default logger name.\n    def __init__(self, item_name, logger_name=None):\n        message = self.default_message % {\"item_name\": item_name}\n        super().__init__(message, logger_name=logger_name)\n\n```\n\n- The ```ApplicationError``` class provides hooks for adding extra format strings to the logging message and also extra key, value pairs for the error dict.\n\n- ```python\n  # Assuming your formatter has extra values like user_id and user_email\n  msg_format = '%(asctime)s - APPLICATION ERROR - %(levelname)s\\n' \\\n               'User Email: %(user_email)s\\n' \\\n      \t     'User ID: %(user_id)s\\n'\\\n               'Error Message: %(message)s\\n'\n\n  class MyCustomException(ApplicationErrors):\n      def __init__(self, user_id, user_email, **err_dict_kwargs):\n          self.user_id, self.user_email = user_id, user_email\n          super().__init__(**err_dict_kwargs)\n\n      # Override this method to return extra kwargs for logging\n      def extra_kwargs(self) -> dict:\n          dict_ = {\n              \"user_id\": self.user_id,\n              \"user_email\": self.user_email\n          }\n          return dict_\n  ```\n\n  ```python\n  # in views.py\n\n  from rest_framework.views import APIView\n\n  from .exceptions import MyCustomException\n\n  class TestException(APIView):\n\n      def get(self, request):\n          raise MyCustomException(\n          \t\"id4\", \"name@gmail.com\", foo=\"bar\", hot=\"soup\"\n          \t)\n\n  ```\n\n  Generated response on the client side via Rest Framework:\n\n  ```json\n  {\n      \"error\":{\n          \"type\":\"MyCustomException\",\n          \"message\":\"An application error occurred.\",\n          \"code\":\"error\",\n          \"foo\":\"bar\",\n          \"hot\":\"soup\"\n      }\n  }\n  ```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Agamiru/exceptions_and_logging",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exceptions-and-logging",
    "package_url": "https://pypi.org/project/exceptions-and-logging/",
    "platform": "",
    "project_url": "https://pypi.org/project/exceptions-and-logging/",
    "project_urls": {
      "Homepage": "https://github.com/Agamiru/exceptions_and_logging"
    },
    "release_url": "https://pypi.org/project/exceptions-and-logging/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Django app for logging custom application errors",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9476349,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d92ff48212345a368ef6852f449762244db0efaeeb64f147c5bda5232c979c1f",
          "md5": "0c46a2035900cab2ad7b1ba081027bfe",
          "sha256": "16aaf460ba3427ebfba2462247764286f31069c0b1b122cae391461205dee030"
        },
        "downloads": -1,
        "filename": "exceptions_and_logging-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c46a2035900cab2ad7b1ba081027bfe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6894,
        "upload_time": "2021-02-20T15:15:29",
        "upload_time_iso_8601": "2021-02-20T15:15:29.517047Z",
        "url": "https://files.pythonhosted.org/packages/d9/2f/f48212345a368ef6852f449762244db0efaeeb64f147c5bda5232c979c1f/exceptions_and_logging-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c66d2dfb980a508f1908601b8303cbcf24a3a84fd16f4e5367addf886023976d",
          "md5": "97dc997b019637116cae5fe7825521ff",
          "sha256": "35fb120a370741b0280c5f6a1aaaebe109d52af2615e54620fde5541434f0297"
        },
        "downloads": -1,
        "filename": "exceptions_and_logging-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97dc997b019637116cae5fe7825521ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4747,
        "upload_time": "2021-02-20T15:15:31",
        "upload_time_iso_8601": "2021-02-20T15:15:31.230370Z",
        "url": "https://files.pythonhosted.org/packages/c6/6d/2dfb980a508f1908601b8303cbcf24a3a84fd16f4e5367addf886023976d/exceptions_and_logging-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f777cabc1f26a71c067c28c13ddb2857abfce559c67c13b965723eb9d072472",
          "md5": "439c442c33031858397758122bf05459",
          "sha256": "5741a22e6690efbfaa60cb58fa04e34120b9326f830cd6d77eee4cddc603f230"
        },
        "downloads": -1,
        "filename": "exceptions_and_logging-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "439c442c33031858397758122bf05459",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6957,
        "upload_time": "2021-02-20T15:53:25",
        "upload_time_iso_8601": "2021-02-20T15:53:25.680070Z",
        "url": "https://files.pythonhosted.org/packages/9f/77/7cabc1f26a71c067c28c13ddb2857abfce559c67c13b965723eb9d072472/exceptions_and_logging-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748a6a6b967011d5806ff63e5cb8b36d2b2d0b13c8589f9ef47c70733dc6962b",
          "md5": "5cd53ba65acdfb3abf37a010295eff0f",
          "sha256": "03e4326c396327474afa17336cee03cb9db81cee36f48a86fb2c66dec95d83b1"
        },
        "downloads": -1,
        "filename": "exceptions_and_logging-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5cd53ba65acdfb3abf37a010295eff0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4821,
        "upload_time": "2021-02-20T15:53:27",
        "upload_time_iso_8601": "2021-02-20T15:53:27.258185Z",
        "url": "https://files.pythonhosted.org/packages/74/8a/6a6b967011d5806ff63e5cb8b36d2b2d0b13c8589f9ef47c70733dc6962b/exceptions_and_logging-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f777cabc1f26a71c067c28c13ddb2857abfce559c67c13b965723eb9d072472",
        "md5": "439c442c33031858397758122bf05459",
        "sha256": "5741a22e6690efbfaa60cb58fa04e34120b9326f830cd6d77eee4cddc603f230"
      },
      "downloads": -1,
      "filename": "exceptions_and_logging-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "439c442c33031858397758122bf05459",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6957,
      "upload_time": "2021-02-20T15:53:25",
      "upload_time_iso_8601": "2021-02-20T15:53:25.680070Z",
      "url": "https://files.pythonhosted.org/packages/9f/77/7cabc1f26a71c067c28c13ddb2857abfce559c67c13b965723eb9d072472/exceptions_and_logging-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "748a6a6b967011d5806ff63e5cb8b36d2b2d0b13c8589f9ef47c70733dc6962b",
        "md5": "5cd53ba65acdfb3abf37a010295eff0f",
        "sha256": "03e4326c396327474afa17336cee03cb9db81cee36f48a86fb2c66dec95d83b1"
      },
      "downloads": -1,
      "filename": "exceptions_and_logging-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5cd53ba65acdfb3abf37a010295eff0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4821,
      "upload_time": "2021-02-20T15:53:27",
      "upload_time_iso_8601": "2021-02-20T15:53:27.258185Z",
      "url": "https://files.pythonhosted.org/packages/74/8a/6a6b967011d5806ff63e5cb8b36d2b2d0b13c8589f9ef47c70733dc6962b/exceptions_and_logging-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}