{
  "info": {
    "author": "",
    "author_email": "Aleksey Ustinov <augithub@zohomail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Jupyter :: JupyterLab",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# FInancial Analyzer (fia)\n\n\n## Overview\n**fia** (FInancial Analyzer) is a package that gets the historical market\ndata from multiple resources such as TradingView, Alphavantage, etc. \n\nThe package collects the data from TradingView over WebSocket. In the future,\nother options and resources will be added.\n\n\n## Installation\nThe source code is hosted on [GitHub](https://github.com/lexust1/fia).\n\nBefore the package installation, it is recommended to create a new virtual\nenvironment by conda, virtualenv, poetry, and so on.\n\nThe dependencies are listed in [pyproject.toml](https://github.com/lexust1) \nin the dependencies section.\n\nTo install the package use the following commands in Terminal:\n\n- For PyPI:\n    ```shell\n    pip install fia\n    ```\n\n## The simplest working example\n```python\nfrom fia import Frame, set_logger, TvDataCollector  \n\n# Set the logger to see the INFO messages.\nset_logger(\"INFO\")\n# Create an instance of the TvDataCollector class.\ntvdc = TvDataCollector(username=\"Red69\", \n                       password=\"fhEnv@*re37\",\n                       exchange=\"NASDAQ\",\n                       ticker_sym=\"AAPL\",\n                       currency=\"USD\",\n                       frame=Frame.MIN15,\n                       bars=50)\n# Get the raw data including the historical market data.\nraw_data = tvdc.get_data()\n# Get the clean historical market data as DataFrame object.\ndf = tvdc.get_pandas_data(raw_data, tz=\"America/Chicago\")\n```\nSee the detailed explanation below in the Usage section.\n\n## Usage\nThere are two ways how the package can be used:\n1. Over command line interface.\n2. As an imported package in Python (recommended method).\n\n### The 1st method (command line interface):\nThe 1st method returns only a CSV file with the historical market \ndata. This file can be used by a user in other software and apps \nto analyze the data. It is designed for people who are not going \nto use Python as the main tool and need only the file with the \nhistorical market data.\n\n#### Method 1.1 (CLI + environment variables):\n1. Go to the project directory and create setenv.sh\n2. Add the following lines in the file:\n    ```shell\n    export TV_USERNAME=\"USERNAME\"\n    export TV_PASSWORD=\"PASSWORD\"\n    ```\n    where:\n    - \"USERNAME\" is a TradingView username (not to be confused with email).\n    - \"PASSWORD\" is a TradingView password.\n    \n    For example:\n    ```shell\n    export TV_USERNAME=\"Red69\"\n    export TV_PASSWORD=\"fhEnv@*re37\"\n    ```\n3. From Terminal export the environment variables:\n    ``` shell\n    . ./setenv.sh\n    ```\n 4. Type the command in Terminal:\n    ```shell\n    fia -e exchange -t ticker_sym -c currency -f frame -b bars\n    ```    \n    where:\n    - exchange is an exchange (NYSE, CME, etc.).\n    - ticker_sym is a ticker symbol (AAPL, BTC, etc.)\n    - currency is a currency (USD, EUR, etc.).\n    - frame is a bar timeframe. Use one of the following options: \n      - MIN1 - 1 min, \n      - MIN5 - 5 min, \n      - MIN15 - 15 min, \n      - MIN30 - 30 min, \n      - MIN45 - 45 min, \n      - HOUR1 - 1 hr, \n      - HOUR2 - 2 hr, \n      - HOUR3 - 3 hr, \n      - HOUR4 - 4 hr, \n      - DAY - day, \n      - WEEK - week,\n      - MONTH - month.\n    - bars is a number of bars (the limit depends on the Tradingview plan and \n      the ticker symbol).\n    - user_agent is a user agent (optional), use the **-a** flag if you would like \n      to change the default value.\n    - remember is a status (optional), \"on\" - remember the user, use the **-r** flag\n      if you would like to change the default value.     \n    \n    For example:\n    ```shell\n    fia -e NASDAQ -t AAPL -c USD -f DAY -b 50\n    ```\n5.  It creates a CSV file that has the file name is similar to \n    \"TICKER_SYM_FRAME_DATE_TIME\" (for example, AAPL_NASDAQ_DAY_20221123_10_21_49) \n    and saves it in the fia_output folder.\n    The fia_output folder is created in your home (~, $HOME, etc.) folder.\n    \n    An example of output CSV file:\n    ```csv\n    DateTime,Open,High,Low,Close,Volume\n    2022-09-15 08:30:00-05:00,154.65,155.24,151.38,152.37,90481110.0\n    2022-09-16 08:30:00-05:00,151.21,151.35,148.37,150.7,162278841.0\n    .................................................................\n    2022-11-22 08:30:00-06:00,148.13,150.42,146.925,150.18,51804132.0\n    2022-11-23 08:30:00-06:00,149.45,151.83,149.34,151.07,58301395.0\n    ```\n      There are 6 values in every row separated by comma:\n     - DateTime: date and time. The UTC timezone is used.\n     - Open: the opening price of the chosen timeframe.\n     - High: the highest price of the chosen timeframe.\n     - Low: the lowest price of the chosen timeframe.\n     - Close: the closing price of the chosen timeframe.\n     - Volume: the market volume.     \n     \n    The values usually are in USD but check the currency and the unit of measure on \n     the exchange.\n\n6. Add setenv.sh in the .gitignore file for security reasons if you are going to\n   create a repository on a platform is similar to GitHub.\n\n#### Method 1.2 (CLI + explicit username and password):\nThis method is not recommended because it is not secure. It is better to use\nthe environment variables to keep your username and password as it was described\nabove in Method 1.1.\n\nType the command in Terminal:\n```shell\nfia -u username -p password -e exchange -t ticker_sym -c currency -f frame -b bars\n```    \nwhere:\n- username is a TradingView username (not to be confused with email).\n- password is a TradingView password.\n- exchange is an exchange (NYSE, CME, etc.).\n- ticker_sym is a ticker symbol (AAPL, BTC, etc.)\n- currency is a currency (USD, EUR, etc.).\n- frame is a bar timeframe. Use one of the following options: \n  - MIN1 - 1 min, \n  - MIN5 - 5 min, \n  - MIN15 - 15 min, \n  - MIN30 - 30 min, \n  - MIN45 - 45 min, \n  - HOUR1 - 1 hr, \n  - HOUR2 - 2 hr, \n  - HOUR3 - 3 hr, \n  - HOUR4 - 4 hr, \n  - DAY - day, \n  - WEEK - week,\n  - MONTH - month.\n- bars is a number of bars (the limit depends on the Tradingview plan and the \n  ticker symbol).\n- user_agent is a user agent (optional), use the **-a** flag if you would like \n  to change the default value.\n- remember is a status (optional), \"on\" - remember the user, use the **-r** flag\n  if you would like to change the default value.\n    \nFor example:\n  ```shell\n  fia -u Red69 -p fhEnv@*re37 -e NASDAQ -t AAPL -c USD -f DAY -b 50\n  ```\n\n\n### The 2nd method (import as a Python package):\nThe 2nd method is a recommended usage because it is more flexible \nand can work with other Python libraries. \n\nIt can return: \n- the raw market data received over WebSocket, \n- the market data in JSON format,\n- the market data as a Pandas DataFrame object. \n\nIt is designed for people who would like to use the package with Pandas, \nMatplotlib, JupyterLab, etc.\n\n#### Method 2.1 (import + environment variables):\n1. Go to the project directory and create setenv.sh\n2. Add the following lines in the file:\n    ```shell\n    export TV_USERNAME=\"USERNAME\"\n    export TV_PASSWORD=\"PASSWORD\"\n    ```\n    where:\n    - \"USERNAME\" is a TradingView username (not to be confused with email).\n    - \"PASSWORD\" is a TradingView password.\n    \n    For example:\n    ```shell\n    export TV_USERNAME=\"Red69\"\n    export TV_PASSWORD=\"fhEnv@*re37\"\n    ```\n3. From Terminal export the environment variables:\n    ``` shell\n    . ./setenv.sh\n    ```\n4. Create a python file and get the historical market data:\n    ```python\n    import os\n    # Import the fia package the TvDataCollector class and the Frame enum.\n    from fia import Frame, TvDataCollector\n    \n      \n    # Create an instance of the TvDataCollector class.\n    tvdc = TvDataCollector(username=os.environ.get(\"TV_USERNAME\"),\n                           password=os.environ.get(\"TV_PASSWORD\"),\n                           exchange=\"NASDAQ\", \n                           ticker_sym=\"AAPL\",\n                           currency=\"USD\",\n                           frame=Frame.MIN15,\n                           bars=50)\n    # Get the raw data including the historical market data.\n    raw_data = tvdc.get_data()\n    # Get the clean historical market data as DataFrame object.\n    df = tvdc.get_pandas_data(raw_data)\n    ```    \nThe TvDataCollector class gets the historical market data from TradingView and\nhas the following attributes:\n- username is a TradingView username (not to be confused with email).\n- password is a TradingView password.\n- exchange is an exchange (NYSE, CME, etc.).\n- ticker_sym is a ticker symbol (AAPL, BTC, etc.)\n- currency is a currency (USD, EUR, etc.).\n- frame is a bar timeframe as a member of enum Frame. Use one of the following \n  options: \n  - Frame.MIN1 - 1 min, \n  - Frame.MIN5 - 5 min, \n  - Frame.MIN15 - 15 min, \n  - Frame.MIN30 - 30 min, \n  - Frame.MIN45 - 45 min, \n  - Frame.HOUR1 - 1 hr, \n  - Frame.HOUR2 - 2 hr, \n  - Frame.HOUR3 - 3 hr, \n  - Frame.HOUR4 - 4 hr, \n  - Frame.DAY - day, \n  - Frame.WEEK - week,\n  - Frame.MONTH - month.\n- bars is a number of bars (the limit depends on the Tradingview plan and the \n  ticker symbol).\n- user_agent is a user agent (optional), use the **-a** flag if you would like \n  to change the default value.\n- remember is a status (optional), \"on\" - remember the user, use the **-r** flag\n  if you would like to change the default value.\n\nThe TvDataCollector has the following public methods:\n- get_auth_token(): Gets the authorization token.\n    The following code\n    ```python\n    # tvdc is an instance of the TvDataCollector class.\n    tvdc.get_auth_token()\n    ```\n    returns the authorization token generated for your username on TradingView \n    when you sign in.\n- get_data(): Gets the raw data over Websocket.   \n    The following code\n    ```python\n    # tvdc is an instance of the TvDataCollector class.\n    tvdc.get_data()\n    ```\n    returns the raw data including the historical market data.\n    \n    It includes all sent and received messages over WebSocket. It can be useful\n    if you would like to parse the raw data and use what you need for your goals. \n- get_pandas_data(raw_data, tz): Gets the market data as Pandas DataFrame from the raw \n  data. The tz argument is optional. The UTC time is used by default. Any time zone \n  from pytz.all_timezones (see the python library pytz) can be used. For  example, \n  \"America/Chicago\" is CME timezone.\n\n  The following code\n    ```python\n    # tvdc is an instance of the TvDataCollector class.\n    # raw_data is received by using tvdc.get_data().\n    tvdc.get_pandas_data(raw_data)\n    ```\n    returns the DataFrame object:\n\n| DateTime                  | Open    | High   | Low      | Close  | Volume     |\n|---------------------------|---------|--------|----------|--------|------------|\n| 2022-09-14 13:30:00+00:00 | 154.785 | 157.1  | 153.6106 | 155.31 | 87965409.0 |\n| 2022-09-15 13:30:00+00:00 | 154.65  | 155.24 | 151.38   | 152.37 | 90481110.0 |\n| …                         | …       | …      | …        | …      | …          |\n| 2022-11-21 14:30:00+00:00 | 150.16  | 150.37 | 147.715  | 148.01 | 58724070.0 |\n| 2022-11-22 14:30:00+00:00 | 148.13  | 150.42 | 146.925  | 150.18 | 51804132.0 |\n   \n  There are 6 columns:\n  - DateTime: date and time. It depends on the tz argument value in get_pandas_data().\n    The UTC time is used by default.\n  - Open: the opening price of the chosen timeframe.\n  - High: the highest price of the chosen timeframe.\n  - Low: the lowest price of the chosen timeframe.\n  - Close: the closing price of the chosen timeframe.\n  - Volume: the market volume.     \n  The price values usually are in USD but check the currency and the unit of measure on \n  the exchange. \n  If you would like to change the timezone see the following example:\n    ```python\n    # tvdc is an instance of the TvDataCollector class.\n    # raw_data is received by using tvdc.get_data().\n    # \"America/Chicago\" is a timezone. Any time zone from pytz.all_timezones \n    # (see the python library pytz) can be used.\n    tvdc.get_pandas_data(raw_data, \"America/Chicago\")\n    ```\n\n- get_json_data(raw_data): Gets the market data in JSON format from the raw data.\n    The following code\n    ```python\n    # tvdc is an instance of the TvDataCollector class.\n    # raw_data is received by using tvdc.get_data().\n    tvdc.get_json_data(raw_data)\n    ```\n    returns the data in JSON format.\n   \n5. Add setenv.sh in the .gitignore file for security reasons if you are going to\n   create a repository on a platform is similar to GitHub.\n\n#### Method 2.2 (import + explicit username and password):\nThis method is not recommended because it is not secure. It is better to use\nthe environment variables to keep your username and password as it was described\nabove in Method 2.1.\n\nCreate a python file and get the historical market data:\n```python\n# Import the fia package the TvDataCollector class and the Frame enum.\nfrom fia import Frame, TvDataCollector\n    \n      \n# Create an instance of the TvDataCollector class.\ntvdc = TvDataCollector(username=\"Red69\",\n                       password=\"fhEnv@*re37\",\n                       exchange=\"NASDAQ\", \n                       ticker_sym=\"AAPL\",\n                       currency=\"USD\",\n                       frame=Frame.MIN15,\n                       bars=50)\n# Get the raw data including the historical market data.\nraw_data = tvdc.get_data()\n# Get the clean historical market data as DataFrame object.\ndf = tvdc.get_pandas_data(raw_data)\n```    \nThe attributes and methods are described in Method 2.1. The only difference is\nthat we assign the explicit username and password rather than using os.environ.get()\nto get them from the environment variables.\n\n## Logging\n\n1. When the package is used over command line interface the root logger\n   is set by default and shows the info messages.\n\n2. When the package is imported the root logger is not set. It prevents\n   collisions with the logging system of the program where the package\n   was imported.\n    \n    There are several ways how to set the logger:\n    - Use the set_logger() function that sets the root logger and helps to choose\n      the level of log messages:\n      ```python\n      # import functions set_logger()\n      from fia import set_logger\n      \n      \n      # Set status: \"INFO\", \"DEBUG\", \"WARNING\", etc.\n      set_logger(\"INFO\")\n      ```\n    - Set the root logger manually.\n      ```python\n      import logging\n      import sys\n                              \n      \n      # Get the root logger.\n      logger = logging.getLogger()\n      # Set the level of messages for the logger.\n      logger.setLevel(logging.DEBUG)\n      # Set the log message style.\n      formatter = logging.Formatter(\n          \"{asctime} | {name} | {levelname} | {message}\", style=\"{\"\n      )\n      # Set and attach the handler.\n      handler = logging.StreamHandler(sys.stdout)\n      handler.setLevel(logging.DEBUG)\n      handler.setFormatter(formatter)\n      logger.addHandler(handler) \n      ```\n    - Set the package logger manually.\n      ```python\n      import logging\n      import sys\n      \n                          \n      # Get the logger.\n      logger = logging.getLogger(\"fia\")\n      # Set the level of messages for the logger.\n      logger.setLevel(logging.DEBUG)\n      # Set the log message style.\n      formatter = logging.Formatter(\n          \"{asctime} | {name} | {levelname} | {message}\", style=\"{\"\n      )\n      # Set and attach the handler.\n      handler = logging.StreamHandler(sys.stdout)\n      handler.setLevel(logging.DEBUG)\n      handler.setFormatter(formatter)\n      logger.addHandler(handler) \n      ```\n    Choose the most suitable method for your case.\n\n## Important notes\nYou should treat the historical data accurately especially the last bar. \n\nFor example, when you use the day timeframe, the last bar represents the actual prices\nand volume for the current day. If the market is active the prices and volume keep \nchanging.\n\nA similar situation occurs when you try to retrieve the data in the middle of \nthe week, month, etc. \n\n## License\n[Apache 2.0](https://github.com/lexust1)\n\n## Disclaimer\nThe fia package and any results received by using the fia package\nare for informational and educational purposes only.\nYou should not construe any such information or other material as\nlegal, tax, investment, financial, or other advice.\nThere are risks associated with investing in any securities and\nassets. Do your own research. Past performance is not a guarantee\nof future return or performance. You may gain or lose money.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "finance,portfolio,trading,crypto,TradingView,AlphaVantage",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fia",
    "package_url": "https://pypi.org/project/fia/",
    "platform": null,
    "project_url": "https://pypi.org/project/fia/",
    "project_urls": {
      "Bug Tracker": "https://github.com/lexust1/fia/issues",
      "Homepage": "https://github.com/lexust1/fia",
      "Source Code": "https://github.com/lexust1/fia"
    },
    "release_url": "https://pypi.org/project/fia/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "fia (financial analyzer) package for Python.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17480160,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c32a3f15a692c9fde8759032cc47f7ab52e83797e53a78aa79140b1dab2f37e",
          "md5": "f90c62d18fd492af8d74b57cf011af75",
          "sha256": "f76ca5f920cd0adcfcd1978ae152315eb6b8a99cd9a93726f6018ec5ebacc3fe"
        },
        "downloads": -1,
        "filename": "fia-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f90c62d18fd492af8d74b57cf011af75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 28893,
        "upload_time": "2022-12-27T16:47:22",
        "upload_time_iso_8601": "2022-12-27T16:47:22.943459Z",
        "url": "https://files.pythonhosted.org/packages/1c/32/a3f15a692c9fde8759032cc47f7ab52e83797e53a78aa79140b1dab2f37e/fia-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9e9efac75d63f65000cb0436de7b9fcc9a61b441ed624f213211299ff842508",
          "md5": "62e902c00ae383b87e4eaa844311ac09",
          "sha256": "7382f5d0c8114b38ad0cc241d422506f76abb20fa5a12270e7cdc8b557899786"
        },
        "downloads": -1,
        "filename": "fia-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62e902c00ae383b87e4eaa844311ac09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 30168,
        "upload_time": "2023-03-28T15:42:25",
        "upload_time_iso_8601": "2023-03-28T15:42:25.659012Z",
        "url": "https://files.pythonhosted.org/packages/a9/e9/efac75d63f65000cb0436de7b9fcc9a61b441ed624f213211299ff842508/fia-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9e9efac75d63f65000cb0436de7b9fcc9a61b441ed624f213211299ff842508",
        "md5": "62e902c00ae383b87e4eaa844311ac09",
        "sha256": "7382f5d0c8114b38ad0cc241d422506f76abb20fa5a12270e7cdc8b557899786"
      },
      "downloads": -1,
      "filename": "fia-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "62e902c00ae383b87e4eaa844311ac09",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 30168,
      "upload_time": "2023-03-28T15:42:25",
      "upload_time_iso_8601": "2023-03-28T15:42:25.659012Z",
      "url": "https://files.pythonhosted.org/packages/a9/e9/efac75d63f65000cb0436de7b9fcc9a61b441ed624f213211299ff842508/fia-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}