{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MONDA (MONocle Data Analysis)\n\n![monocle_logo](https://avatars1.githubusercontent.com/u/36449994?s=200&v=4)\n\n## Package Description\nThis package contains a suite of tools for retrieving, apply quality checks to, analysing and plotting data from the \nsensors and platforms included in the MONOCLE observation network. This project has received funding from the \nEuropean Union’s Horizon 2020 research and innovation programme under grant agreement No 776480\n\nThe MONOCLE project created a framework for building water quality sensor and platforms, networked to enhance the \nutility and accessibility of data from multiple sources, giving a more complete data landscape to support satellite\nobservation of water quality in optically complex coastal waters, lakes and estuaries.\n\nFor more information on the MONOCLE project see the [project website](https://www.monocle-h2020.eu/Home)\n\n## Dependencies\nThis code requires:\n- Python (>= 3.8)\n- NumPy (>= 1.13.3)\n- scikit-learn(>=0.23.2)\n- Matplotlib (>=3.3.3)\n- requests (>=2.27.1)\n- cartopy (>=0.20.2)\n## Installation\n**NOTE:** Some users have encountered issues installing into a fresh conda environment with pip due to GEOS \nversions.  This can be solved by installing cartopy with conda (```conda install cartopy```) before installing monda using pip.\n\n```pip install monda```\n\nExample creating MONOCLE conda environment and then installing monda package:\n```\nconda create --name monocle_test python=3.8 cartopy \nconda activate monocle_test\npip install monda \n```\n# Source code\nTo get the most up to date version of the source code please see the repository at:\n```\nhttps://github.com/monocle-h2020/MONDA.git\n```\n\n## Citation\nIf you use MONDA in a scientific publication, we would appreciate citations.\n\nTo cite the package as a whole you can use:\nSimis, S., Jackson, T., Jordan, T., Peters, S., and Ghebrehiwot, S. (2022) Monda: Monocle Data Analysis python package, https://github.com/monocle-h2020/MONDA \n\nFor single submodules (such as WISP or sorad) please use:\n[submodule] In Simis, S., Jackson, T., Jordan, T., Peters, S., and Ghebrehiwot, S. (2022) Monda: Monocle Data Analysis python package, https://github.com/monocle-h2020/MONDA\n\n## Contributors\nThis code was developed with input from Plymouth Marine laboratory (thja-pml@github, tjor@github, StefanSimis@github) and \nWater Insight (Semhar-Ghe@github, waterthing@github). \n\n## Submodule Information\nThe package contains access, quality control and visualisation tools for a number of sensor systems, for which details are provided below.\n\n## WISP (station)\nThe WISPstation is a fixed position optical instrument used for measuring water-leaving reflectance.\nIt records radiance and irradiance with an extended wavelength range of 350nm to 1100nm in two viewing directions,\nwhich enables continuous and autonomous high-quality measurements for water quality monitoring and satellite validation. \nThe reflectance observations are used to validate satellite measurements of water-leaving reflectance. \nConcentrations of the most important bio-physical water quality parameters such as chlorophyll-a, cyanobacterial pigment, turbidity and suspended matter, are derived from the reflectance measurement. The WISPstation sends the measurements automatically over 3G/4G/5G to the “WISPcloud” cloud database which makes the results available via an API. Measurement frequency is by default a 15 min interval but be adjusted to suit user requirements. \n\n#### About WISPcloud\nWISPcloud is a scalable Postgres database that autonomously receives, stores, performs quality control and \napplies water quality algorithms to all WISPstation measurements. It has an advanced API to serve data requests directly to customers. A separate online documentation can be found here. \n\n#### Acknowledgement \nThe WISPstation public data were collected by users participating on H2020 funded projects such as EOMORES(http://eomores-h2020.eu), TAPAS(http://tapas-h2020.eu/) and MONOCLE(https://monocle-h2020.eu/). \n\n#### Example data availability\nPlease use the instrument identification serial number and date when searching for data using the WISPcloud API\n \n| Instrument ID  | Country   | Station         | Longitude | Latitude | Start Date | End Date   |\n|----------------|-----------|-----------------|-----------|----------|------------|------------|\n| WISPstation001 | Italy     | Lake Trasimeno  | 12.344    | 43.1223  | 2018-04-30 | 2018-10-14 |\n| WISPstation001 | Italy     | Lake Trasimeno  | 12.344    | 43.1223  | 2019-06-20 | 2021-05-04 |\n| WISPstation004 | Greece    | Souda           | 24.1112   | 35.4800  | 2018-07-17 | 2019-08-09 |\n| WISPstation005 | Estonia   | Lake Vortsjarv  | 26.1074   | 58.2109  | 2018-05-28 | 2018-10-26 |\n| WISPstation005 | Estonia   | Lake Vortsjarv  | 26.1074   | 58.2109  | 2019-05-31 | 2019-11-01 |\n| WISPstation006 | Lithuania | Curonian Lagoon | 21.1002   | 55.4126  | 2018-08-09 | 2019-10-14 |\n| WISPstation007 | Lithuania | Klaipeda Harbor | 21.1016   | 55.7195  | 2018-08-13 | 2019-09-11 |\n| WISPstation009 | Hungary   | Lake Balaton    | 17.8936   | 46.9143  | 2019-06-17 | 2019-07-12 |\n| WISPstation009 | Hungary   | Halasto         | 17.6167   | 46.6342  | 2019-07-23 | 2019-10-07 |\n \n#### Functionality of the submodule\nAn example script is provided to connect with the WISPcloud API and subsequently plot Rrs and (ir)radiance measurements using date and instrument serial number as input arguments. \n\n#### Minimum code example \n```\nfrom monda.WISP import access\nimport numpy as np\n\ninstrument = \"WISPstation001\"\nday = \"2019-08-16\"\nstart = \"10:00:00\"\nstop = \"15:00:00\"\n\ndef list_to_array(lstring):\n    try:\n        arr = np.array(lstring.lstrip('[').rstrip(']').split(',')).astype(np.float64)\n        return arr\n    except:\n        return None\n\nREQUEST = 'REQUEST=GetData&INSTRUMENT={}&include=measurement.date,measurement.id,level2.reflectance,site.name,level2.quality&TIME={}T{},{}T{}'\\\n          .format(instrument, day, start, day, stop)\n\nl2r = access.WISP_data_API_call(REQUEST)\n\nprint(l2r[0]) # data header\n\nrrs = [list_to_array(meas['level2.reflectance']) for meas in l2r[1:]]\nwl = np.array(list(range(350, 901, 1)))\nstations = [meas['site.name'] for meas in l2r[1:]]\ntimes = [meas['measurement.date'][10:16] for meas in l2r[1:]]\n```\n\n\n## Solar-Tracking Radiometry platform (So-Rad)\nThe So-Rad is a low-power, low cost autonomous platform to obtain high-frequency water-leaving reflectance from \nnon-stationary platforms such as ships and buoys. So-Rad software is highly configurable and open-source. \nSo-Rad optimizes the measurement geometry of commercially available sensors which increases the number of successful \nobservations of water colour obtained from moving platforms (concept as in Simis and Olsson 2013). \n\nHyperspectral water-leaving reflectance is used to determine diagnostic features in water colour that can be \nassociated with phytoplankton biomass, suspended solids and dissolved organic matter concentration.\n\nObserving in situ reflectance with sensors on the So-Rad is used to validate satellite observations, particularly the \nperformance of algorithms that separate atmospheric and water-leaving radiance, which have high uncertainty in \noptically complex waters such as coastal seas and inland waters.  High-quality reference measurements are required, \ncollected under optimal observation conditions (solar and viewing azimuth, sun elevation).\n\n#### Added Value of So-Rad\n* Off-shore satellite validation is currently limited to research vessels and fixed moorings that are costly to \nmaintain. The So-Rad can be installed on non-stationary platforms and is ideally suited to be included on merchant \nvessels. Ferry routes are recommended because of predictable routes and schedules. Periodic sensor maintenance can be \neasily carried out by non-expert crew.\n* A high degree of automation and low-power components means the platform can be installed in remote locations for \nautonomous operation.\n\n#### Functionality of the submodule\nThe test script provided demonstrates how to download paged data from the So-Rad Geoserver layers hosted at PML. \nThese layers offer unfiltered, calibrated (ir)radiance and reflectance spectra. The reflectance data are processed either with the Fingerprint or the 3C method. \nSubsequently, quality control filters can be applied and data visualized. The scripts allow downloads per time window and per instrument. \n\n#### Minimum code example\n\n```\nfrom monda.sorad import access, plots, qc\nimport datetime\nimport numpy as np\n\n# collect data from any So-Rad platform obtained in the past 24h (adjust time range if this returns no data)\nstart_time =   datetime.datetime.now() - datetime.timedelta(days=1)\nend_time   =   datetime.datetime.now()\n\nplatform_id = None  # Choose None for any platform\n\n# choose 3c or fp as algorithm source in the layer name below\nresponse = access.get_wfs(platform = platform_id,\n                          timewindow = (start_time, end_time),\n                          layer='rsg:sorad_public_view_3c_full',\n                          bbox=None)\n\nprint(response['result'][0].keys())   # show all available fields\n\n# extract (meta)data from the response\ntime          = [response['result'][i]['time'] for i in range(len(response['result']))]\nlat           = np.array([response['result'][i]['lat'] for i in range(len(response['result']))])\nlon           = np.array([response['result'][i]['lon'] for i in range(len(response['result']))])\nrel_view_az   = np.array([response['result'][i]['rel_view_az'] for i in range(len(response['result']))])\nsample_uuid   = np.array([response['result'][i]['sample_uuid'] for i in range(len(response['result']))])\nplatform_id   = np.array([response['result'][i]['platform_id'] for i in range(len(response['result']))])\nplatform_uuid = np.array([response['result'][i]['platform_uuid'] for i in range(len(response['result']))])\ngps_speed     = np.array([response['result'][i]['id'] for i in range(len(response['result']))])\ntilt_avg      = np.array([response['result'][i]['tilt_avg'] for i in range(len(response['result']))])\ntilt_std      = np.array([response['result'][i]['tilt_std'] for i in range(len(response['result']))])\n\n# define common wavelength grid for (ir)radiance data (these are provided at their native, sensor-specific resolution\nwl_out = np.arange(300, 1001, 1)\ned = access.get_l1spectra(response, 'ed_', wl_out) # # irradiance spectra in 2D matrix format: rows time index, columns wavelength\nls = access.get_l1spectra(response, 'ls_', wl_out)\nlt = access.get_l1spectra(response, 'lt_', wl_out)\n\nrrswl = np.arange(response['result'][0]['c3_wl_grid'][0], response['result'][0]['c3_wl_grid'][1], response['result'][0]['c3_wl_grid'][2])  # reconstruct wavelength grid for Rrs\nrrs = np.array([response['result'][i]['c3_rrs'][:] for i in range(len(response['result']))]) # 2D matrix format: rows time index, columns wavelength\n```\n\n## Hyperspectral pyranometer (HSP)\n\nThe HSP1 measures the spectrum of downwelling solar radiation, and how this is partitioned between Direct, Diffuse and Global Irradiance. \nThis sensor provides a reference for the colour or spectral distribution of sunlight near the water's surface.\n\nHSP1 can be used to improve the accuracy of other sensors making direct measurements of the reflected light from the water body.\n\n#### Added Value of the HSP\n\n* Measurements can be used to improve satellite water quality products by removing or correcting for atmospheric effects, especially in coastal or inland waters.\n* Improving data products from other surface-based instruments (such as other MONOCLE instruments) where a reference is normally too expensive\n* In situations where existing equipment is difficult or impossible to use such as moving platforms, boats, buoys or aircraft.\n\n#### Functionality of the submodule\n\nThe access function downloads paged data from the HSP Geoserver layer hosted at PML. Queries can be refined based on time, sensor_id or bounding box.\nExtend the access function to include any additional CQL filters needed. \n\nThe HSP geoserver layer offers unfiltered, calibrated total and diffused irradiance spectra. \n\n#### Minimum code example\n\n```\nfrom monda.hsp import access\nimport datetime\n\nsensor_id = None\nstart_time = datetime.datetime(2021,10,21,12,0,0)\nend_time   = datetime.datetime(2021,10,21,14,0,0)\nbbox = None\nlayer = 'rsg:hsp_public_view_full'\n\nresponse = access.get_wfs(sensor = sensor_id,\n                          timewindow = (start_time, end_time),\n                          layer=layer, bbox=bbox)\n\n# show first record\nfor key, val in response['result'][0].items():\n    print(f\"{key}: {val}\")\n```\n\n\n## Mini-Secchi disk\nSecchi disk measurements have been used to record water transparency over hundreds of years, and are used as a proxy for eutrophication \nin international water quality monitoring programmes. Recently, a simple hand-held device was designed to measure the Secchi depth \nand water colour (Forel-Ule scale) of lake, estuarine and nearshore regions. The device additionally comes shipped with a clip for pH paper. \n\nThe mini-secchi App, available from Google play and Apple stores, aids with data collection through smartphones. The app will:\n- provide instructions for safe and correct use\n- gather all measurement data, including (optional) photos and quality control questions\n- upload measurement data to the PML server\n- in future, the app will show the user the results from nearby and recent observations. \n\nOnce data are received at PML they are immediately processed and made available in WMS/WFS format. The code example below illustrates how to query the WFS. \n\nThe Mini-Secchi disk was developed as a school project in collaboration with PML. \nDue to increased demand for larger quantities of Mini-Secchi disks in citizen science projects, the developers founded Brewtek to produce the devices at scale. \n\n\n#### Added value\nThe device is manufactured with marine resistant materials (mostly biodegradable) using a 3D printer and basic workshop tools. \nIt is inexpensive to manufacture, lightweight, easy to use, and accessible to a wide range of users. \n\nIt builds on a long tradition in optical limnology and oceanography, but is modified for ease of operation in smaller water bodies, and from small watercraft and platforms.\n\nThe 3D-printable design is particularly useful in community, educational and hobbyist settings.\nFor more information see the Mini-Secchi disk pages on the [project website](https://monocle-h2020.eu/Sensors_and_services/Mini-secchi_disk)\n\n\n#### Functionality of the Mini-Secchi disk and app\n\nNote: Mini-Secchi disk data on the geoserver are still a work in progress. Data formatting is likely to change, and test records have not yet been removed. \n\n#### Minimum code example\n\n```\nfrom monda.minisecchi import access\nimport datetime\n\nstart_date = datetime.datetime(2022,1,1,0,0,0)\nend_date = datetime.datetime(2022,8,1,0,0,0)\n\ngeoserver_layer = 'rsg:minisecchi_public_view'\nbbox = None  # alternatively supply a tuple of (corner1 lat, corner1 lon, corner2 lat, corner2 lon)\n\nresponse = access.get_wfs(count=1000, timewindow=(start_date, end_date), layer=geoserver_layer, bbox=bbox)\n\ndata = response['result']\nprint(data[0].keys())\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/monocle-h2020/MONDA",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monda",
    "package_url": "https://pypi.org/project/monda/",
    "platform": null,
    "project_url": "https://pypi.org/project/monda/",
    "project_urls": {
      "Homepage": "https://github.com/monocle-h2020/MONDA"
    },
    "release_url": "https://pypi.org/project/monda/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A package for retrieval, quality control and analysis of Data from MONOCLE systems",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14543145,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abc4298de606df87502a2fe2a868cb57568dcc90ad15148c19e681d05651e692",
          "md5": "3048597aff6a1f65bff94a990bafa2ae",
          "sha256": "8e8c9d139cbbc55286bd3fddf2c66b0f71cf2f84da565d30a998276ce4491611"
        },
        "downloads": -1,
        "filename": "monda-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3048597aff6a1f65bff94a990bafa2ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 40261,
        "upload_time": "2022-03-04T14:03:58",
        "upload_time_iso_8601": "2022-03-04T14:03:58.827879Z",
        "url": "https://files.pythonhosted.org/packages/ab/c4/298de606df87502a2fe2a868cb57568dcc90ad15148c19e681d05651e692/monda-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f72bdedf1f4ad3f2f6afe336082140bc576dab5c5925f748b2507f2621cdbdb",
          "md5": "9e37da66d182edc84a539b36342ed5cb",
          "sha256": "55c0ebe426f2a9b0af809d9145ecd3959d0e051b20327e1f5a5ec2a805c2108a"
        },
        "downloads": -1,
        "filename": "monda-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e37da66d182edc84a539b36342ed5cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 39086,
        "upload_time": "2022-03-04T14:04:00",
        "upload_time_iso_8601": "2022-03-04T14:04:00.656897Z",
        "url": "https://files.pythonhosted.org/packages/9f/72/bdedf1f4ad3f2f6afe336082140bc576dab5c5925f748b2507f2621cdbdb/monda-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3dfba861c26f952e084ba886c08dbfee650b38a84aeb724f66a1aba3be162aa8",
          "md5": "c18d3bd354ff79a6beb460fb60877100",
          "sha256": "0e6ef097cc462077d9c86b89284e8f76ecf3267cb26ac84471bdf1d1c580e592"
        },
        "downloads": -1,
        "filename": "monda-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c18d3bd354ff79a6beb460fb60877100",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 64343,
        "upload_time": "2022-07-25T16:24:15",
        "upload_time_iso_8601": "2022-07-25T16:24:15.234708Z",
        "url": "https://files.pythonhosted.org/packages/3d/fb/a861c26f952e084ba886c08dbfee650b38a84aeb724f66a1aba3be162aa8/monda-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "056af6b34136fd167e8a2422b3d2cbdf7b9000d3bf33c2bbe38501d19c92db51",
          "md5": "c167f5c8ffe5d7524b8329173d2e21fa",
          "sha256": "07ef5a0eacc7217904e8b5e22d110288bbfae66f14d332a39703cd792e0a9dfa"
        },
        "downloads": -1,
        "filename": "monda-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c167f5c8ffe5d7524b8329173d2e21fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 42438,
        "upload_time": "2022-07-25T16:23:51",
        "upload_time_iso_8601": "2022-07-25T16:23:51.200808Z",
        "url": "https://files.pythonhosted.org/packages/05/6a/f6b34136fd167e8a2422b3d2cbdf7b9000d3bf33c2bbe38501d19c92db51/monda-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3dfba861c26f952e084ba886c08dbfee650b38a84aeb724f66a1aba3be162aa8",
        "md5": "c18d3bd354ff79a6beb460fb60877100",
        "sha256": "0e6ef097cc462077d9c86b89284e8f76ecf3267cb26ac84471bdf1d1c580e592"
      },
      "downloads": -1,
      "filename": "monda-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c18d3bd354ff79a6beb460fb60877100",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 64343,
      "upload_time": "2022-07-25T16:24:15",
      "upload_time_iso_8601": "2022-07-25T16:24:15.234708Z",
      "url": "https://files.pythonhosted.org/packages/3d/fb/a861c26f952e084ba886c08dbfee650b38a84aeb724f66a1aba3be162aa8/monda-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "056af6b34136fd167e8a2422b3d2cbdf7b9000d3bf33c2bbe38501d19c92db51",
        "md5": "c167f5c8ffe5d7524b8329173d2e21fa",
        "sha256": "07ef5a0eacc7217904e8b5e22d110288bbfae66f14d332a39703cd792e0a9dfa"
      },
      "downloads": -1,
      "filename": "monda-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c167f5c8ffe5d7524b8329173d2e21fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 42438,
      "upload_time": "2022-07-25T16:23:51",
      "upload_time_iso_8601": "2022-07-25T16:23:51.200808Z",
      "url": "https://files.pythonhosted.org/packages/05/6a/f6b34136fd167e8a2422b3d2cbdf7b9000d3bf33c2bbe38501d19c92db51/monda-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}