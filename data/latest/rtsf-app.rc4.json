{
  "info": {
    "author": "罗科峰",
    "author_email": "lkf20031988@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# rtsf-app\n基于rtsf测试框架，关键字驱动Android UI,进行自动化的功能测试\n\n1. 基本的使用，参见rtsf项目的 使用入门\n2. rtsf-app遵循在rtsf项目高阶用法的约定\n3. rtsf-app也就只做了3件事情\n    - 设计APP UI自动化测试yaml用例，并重写Runner.run_test的执行规则\n    - 封装常用的Appium方法，为用例提供yaml函数\n    - 封装grid模式，支持命令行实现分布式部署\n\n[查看rtsf项目用法](https://github.com/RockFeng0/rtsf)\n\n# 环境准备\n\n## window安装 appium.js\n1. [下载安装node.js](https://nodejs.org/en)\n2. 管理员权限，执行命令，安装cnpm: npm install -g cnpm --registry=https://registry.npm.taobao.org\n3. 管理员权限，执行命令，安装appium: cnpm install appium -g\n4. 安装完成后，验证appium: appium.cmd --command-timeout 120000 -p 4723 -U DEVICE_ID\n\n> appium.cmd其实就是:  node \"%appdata%\\npm\\node_modules\\appium\\build\\lib\\main.js\" --command-timeout 120000 -p 4723 -U DEVICE_ID\n\n命令启动，appium-server实例：\n![appium-cmd.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/appium-cmd.png)\n\n## 设置ANDROID_HOME环境变量\n1. [下载simple_android_home](https://github.com/RockFeng0/rtsf-app/releases/tag/v1.0.39)\n2. 解压文件android_home.zip，新增环境变量 ANDROID_HOME，为解压后的根目录的路径\n3. 在环境变量path中，追加 %ANDROID_HOME%\\platform-tools\n\n> 如果你安装了  android SDK，并设置了 ANDROID_HOME, 确保 adb 和 aapt命令可以被调用\n\nrtsf-app依赖的两个命令，如图：\n![android-tools.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/android-tools.png)\n\n## 下载selenium-server-standalone.jar\n\n> 参见[rtsf-web](https://github.com/RockFeng0/rtsf-web)项目，环境准备栏，给出的下载链接\n\n## 安装rtsf-app\npip install rtsf-app \n\n# 命令介绍\n\n安装完成后，有两个命令用于执行yaml测试用例: \n- aldriver命令，android localhost driver，一般情况下，都是用这个命令执行yaml用例\n- ardriver命令，android remote driver， 分布式部署的grid模式下，使用该命令运行yaml用例，它可以指定任意hub中的所有node机器，并在所有这些机器上运行用例。\n\n安装完成后，有两个部署appium服务的命令：\n- wrhub命令，开启grid hub，具体参见[rtsf-web](https://github.com/RockFeng0/rtsf-web)\n- appserver命令，用于非grid模式下，启动appium server；在grid模式下，用于启动appium node\n\n安装完成后，有一个工具命令：\n- ainfo命令， 用于查看PC连接的android设备信息，以及查看待测试apk的报信息\n\n## ainfo\n1. 查看设备信息，其中注意关注， device_id 和  android_version(android device platform version)\n\n格式为dict -> {device_id: {...}, device_id: {...}, 。。。} \n\n```\n# PC中，执行ainfo命令，打印该PC连接的所有设备信息及设备属性\n> ainfo\n{'127.0.0.1:6555': {'ip': None, 'model': 'SAMSUNG-SM-N900A', 'cpu': 'x86', 'pad_version': 'hlteatt-userdebug 4.4.4 tt eng.jenkins.20171226.140228 release-keys', 'android_version': '4.4.4', 'android_api_version': '19', 'linux_version': 'Linux version 3.10.0+ (ttvm@TianTian-Dev) (gcc version 4.6 20120106 (prerelease) (GCC) ) #13 SMP PREEMPT Mon Dec 18 11:26:12 CST 2017'}}\n```\n\n2. 查看apk信息，其中主要关注，appPackage和appActivity \n\n```\n# PC中，执行ainfo --apk APK_FILE 命令，查看apk信息\n> ainfo --apk C:\\ApiDemos-debug.apk\n{'platformName': 'Android', 'deviceName': None, 'platformVersion': None, 'app': 'C:\\\\d_disk\\\\auto\\\\buffer\\\\test\\\\tools\\\\android\\\\ApiDemos-debug.apk', 'appPackage': 'io.appium.android.apis', 'appWaitPackage': 'io.appium.android.apis', 'appActivity': 'io.appium.android.apis.ApiDemos', 'unicodeKeyboard': True, 'resetKeyboard': True, 'newCommandTimeout': 120000}\n```\n\nainfo命令实例：\n![ainfo-cmd.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/ainfo-cmd.png)\n\n## wrhub\n如果有，并行的测试需求，我们会用到Grid模式，wrhub开启一个grid hub，允许不同测试node节点的接入\n\n具体参见[rtsf-web](https://github.com/RockFeng0/rtsf-web)\n\n## appserver\n\n1. appserver提供简单的命令，为每一个待测试的手机，绑定一个端口，通过该端口，我们的测试用例，可以准确下发测试任务\n2. appserver在绑定手机的同时，可以作为grid node接入grid模式\n\n查看帮助: appserver -h\n必填:\n- 设置绑定设备监听的地址及端口：          e.g. 192.168.1.1:4723\n\n选填：\n- 设置绑定设备的device_id:         --device-name DEVICE_NAME\n- 设置绑定设备的android_version:   --device-version DEVICE_VERSION\n- grid模式，连接的hub iP:         --hub-ip HUB_IP\n- grid模式，连接的hub port:       --hub-port HUB_PORT\n\nappserver命令参数\n![appserver-h.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/appserver-h.png)\n\n## aldriver\n1. aldriver命令执行本地测试，该命令主动连接本地的4723端口，并驱动adb连接的第一个设备进行测试\n\n查看帮助: aldriver -h\n\n选填：\n- 指定测试apk的本地路径，该参数会给手机重装app:        --apk APK\n- 手机已装app，指定测试app的package名字:          --package PACKAGE\n- 手机已装app，指定测试app的activity名字:         --activity ACTIVITY\n\naldriver命令参数:\n\n![aldriver-h.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/aldriver-h.png)\n\n## ardriver\n1. ardriver命令执行grid模式下，远程并行测试\n\n注意:\n- aldriver 与 ardriver的区别就在于: ardriver支持 ip和port参数，允许grid模式\n- 在使用grid模式的时候， 如果使用 --apk参数，那么 确保该grid hub下的node手机,在该指定的文件路径中，存在这个apk。\n- 在使用grid模式的时候，如果使用 --package和--activity参数，那么确保，连接到hub的node的手机，已经装了这个apk\n\nardriver命令参数:\n\n![ardriver-h.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/ardriver-h.png)\n\n# rtsf-app的约定\n\n依据rtsf的yaml约定模板，我们在steps中，为rtsf-app约定了一个规则，以便识别为Android UI自动化测试， 如下\n\n```\nsteps:\n    - appdriver:\n        by: \n        value:\n        index:\n        timeout:\n        action:\n    - appdriver:\n        action:\n    ...\n```\n> action必填，其他选填\nNativeApp的话，支持：(\"id\",\"xpath\",\"class name\",'-android uiautomator')，\nWebView的话，支持selenium所用方式\n\n# rtsf-app常用的yaml函数\n\n<!-- 注释， 不建议 使用 SetControl定位元素\n\n###  AppElement methods -- 元素定位相关操作\n\n<table>\n    <tr>\n        <th>AppElement methods</th>\n        <th>参数介绍</th>\n        <th>描述</th>\n    </tr>\n    <tr>\n        <td>GetControl()</td>\n        <td> </td>\n        <td>获取element controls,返回字典，如：{\"by\":None,\"value\":None,\"index\":0,\"timeout\":10}</td>\n    </tr>\n    <tr>\n        <td rowspan=\"4\">SetControl(by,value,index,timeout)</td>\n        <td>by: 指appium的寻找元素的方式:NativeApp支持(\"id\",\"xpath\",\"class name\",'-android uiautomator')，WebView支持selenium所用方式，默认为None</td>\n        <td rowspan=\"4\">\n                    1.依据app当前context，设置element controls，用于app元素的定位和控制<br/>\n                    2. -android uiautomator是appium使用uiautomator中的UiSelector来定位元素，常用来使用文本定位元素，value值如 text(\"xxxx\")\n        </td>\n    </tr>\n    <tr>\n        <td>value: 与by配对使用，相应by的值</td>\n    </tr>\n    <tr>\n        <td>index: 索引值，默认为0，即第一个， 如果by,value组合找到很多元素，通过索引index指定一个</td>\n    </tr>\n    <tr>\n       <td>timeout: 超时时间，默认10，即10秒，如果by,value组合寻找元素超过10秒，超时报错</td>\n   </tr>    \n</table>\n\n-->\n\n\n## App functions --> android设备-测试相关常用操作\n\n```\nLaunchApp()                                     # use current session to launch and active the app        \nStartActivity(app_package,app_activity,timeout) # Only support android.  start an activity and focus to it. default timeout is 10 seconds\nPageSource()                                    # page source for this activity\nForward()                                       # 类似浏览器的 前进\nBack()                                          # 类似浏览器的 后退\nShake()                                         # 模拟设备摇晃 \nBackgroundApp(seconds)                          # 应用会被放到后台特定时间,然后应用会重新回到前台 \nOpenNotifications()                             # 打开通知栏\nRemoveApp(app_package)                          # 卸载app\nSwitchToDefaultContext()                        # 切换到默认上下文 \nSwitchToNewContext()                            # 切换到新的上下文\nReset()                                         # 重置app, 即先closeApp然后在launchAPP\nCloseApp()                                      # only close app . keep the session\nQuitApp()                                       # will close the session\n```\n\n## AppContext methods --> 用于上下文管理\n```\nDyAttrData(name,attr)                       # -> 属性-动态存储变量，适用于，保存UI元素属性值。name-变量名称，attr为UI元素的属性名称，**配合SetControl使用**\nDyActivityData(name)                        # -> 使用变量,保存当前app activity name\nDyPackageData(name)                         # -> 使用变量,保存当前app package name\nDyStrData(name, regx, index)                # -> 字符串-动态存储变量，适用于，保存页面html中指定的值。 name-变量名称，regx已编译的正则表达式，index指定索引，默认0\n\n\nGetVar(name)                                # -> 获取指定变量的值\nSetVar(name,value)                          # -> 设置指定变量的值\n```\n\n## AppWait methods --> 用于时间的控制\n```\nTimeSleep(seconds)                   # -> 指定等待时间(秒钟)\nWaitForAppearing()                   # -> 等待元素出现(可能是隐藏，不可见的)，**配合SetControl使用**\nWaitForDisappearing()                # -> 等待元素消失，**配合SetControl使用**\nWaitForVisible()                     # -> 等待元素可见，**配合SetControl使用**\n```\n\n## AppVerify methods --> 用于验证\n```\nVerifyVar(name, expect_value)                # -> 验证变量值，是期望的expect_value，返回True，否则返回False\nVerifyAppInstalled(app_package)              # -> 验证app package name已经安装\nVerifyCurrentActivity(app_activity)          # -> 验证当前app activity name是期望的app_activity\nVerifyText(text)                             # -> 验证元素text属性值，为期望的text,**配合SetControl使用**\nVerifyElemEnabled()                          # -> 验证元素是enabled，**配合SetControl使用**\nVerifyElemNotEnabled()                       # -> 验证元素是Not Enabled, **配合SetControl使用**\nVerifyElemVisible()                          # -> 验证元素是可见的， **配合SetControl使用**\nVerifyElemNotVisible()                       # -> 验证元素是不可见的，**配合SetControl使用**\nVerifyElemAttr(attr_name,expect_value)       # -> 验证元素属性attr_name的值，包含值expect_value,**配合SetControl使用**\nVerifyElemCounts(num)                        # -> 验证元素数量为num,**配合SetControl使用**\n```\n\n## AppTouchAction methods --> 用于Android触摸操作\n```\nTap()                        # -> 在指定元素上，轻触点击 1次，**配合SetControl使用**\nLongPress()                  # -> 在指定元素上，长按，**配合SetControl使用**\nPress()                      # -> 在指定元素上，按住不释放，**配合SetControl使用**\nMoveTo()                     # -> 移动到指定元素上，**配合SetControl使用**\nRelease()                    # -> 在指定元素上，释放按住的操作，**配合SetControl使用**\nDraw()                       # -> 在当前activity中，画画\nSwipe(direction, times)      # -> 在当前activity中，滑动.direction滑动方向: up, down, left, right; times滑动次数，默认1次\n```\n\n## AppActions methods --> 用于Android常规操作\n```\nPinch()                      # -> 在指定元素上缩小，**配合SetControl使用**\nZoom()                       # -> 在指定元素上放大，**配合SetControl使用**\nSendKeys(value)              # -> 在指定元素上,输入文本值，**配合SetControl使用**, 继承自selenium，可用于WebView\nclick()                      # -> 在指定元素上，点击左键一次，**配合SetControl使用**, 继承自selenium,可用于WebView\n```\n\n> AppTouchAction和AppActions，封装较少的原因是考虑到Appium继承了selenium,因此有些appium提供的方法中,并不会同时兼容NativeApp和WebviewApp，同时，[rtsf-web](https://github.com/RockFeng0/rtsf-web)项目已经支持了selenium对web ui的测试。\n\n# 自定义，yaml函数和变量\n\n在case同级目录中，创建 preference.py, 该文件所定义的 变量、函数，可以被动态加载和引用， 具体参见rtsf的介绍\n\n# 数据驱动与分层用例\n\n在[rtsf](https://github.com/RockFeng0/rtsf)项目中，已经有了详细的介绍，rtsf-web也适用\n\n# 场景实例\n\n依据rtsf和rtsf-app的约定， 做了几个app ui测试的示例\n\n## 简单实例\n\n1. 编写一个yaml文件\n\n```\n# test_case.yaml\n- project:\n    name: ApiDemos项目\n    module: 简单实例\n\n- case:    \n    name: android_app_ui_auto_test_demo_1\n\n    glob_regx:\n        rex_bar_title: 'Views/Controls/(.*)'\n\n    glob_var:\n        app_package: io.appium.android.apis\n        app_main_activity: .ApiDemos\n        app_view_webview_activity: .view.WebView1\n        app_view_button_activity: .view.Buttons1\n        app_view_control_activity: .view.Controls1\n        app_view_dragdrop_activity: .view.DragAndDropDemo\n        app_graphic_paint_activity: .graphics.TouchPaint\n        app_animation_activity: .animation.BouncingBalls\n\n    pre_command:\n        - ${StartActivity($app_package, $app_view_control_activity)}\n        - ${DyStrData(var_bar_title, $rex_bar_title)}\n        - ${VerifyVar(var_bar_title, 1. Light Theme)}  \n\n    steps:      \n\n        - appdriver:\n            by: id\n            value: io.appium.android.apis:id/edit\n            index: 0\n            timeout: 10\n            action: ${SendKeys(你好  -  hello)}\n\n        - appdriver:\n            action: ${TimeSleep(1)}\n\n        - appdriver:\n            by: -android uiautomator\n            value: text(\"Checkbox 1\")\n            index: 0\n            timeout: 10\n            action: ${Tap()}\n\n        - appdriver:\n            action: ${VerifyElemAttr(checked, true)}\n\n        - appdriver:\n            action: ${Tap()}\n\n        - appdriver:\n            action: ${VerifyElemAttr(checked, false)}\n\n        - appdriver:\n            action: ${TimeSleep(1)} \n\n        - appdriver:\n            action: ${Swipe(up, 1)}\n\n        - appdriver:\n            by: id\n            value: android:id/text1            \n            action: ${Tap()} \n\n        - appdriver:\n            by: -android uiautomator\n            value: 'text(\"Earth\")'\n            action: ${Tap()}\n\n    post_command:\n        - ${Back()}\n        - ${CloseApp()}\n```\n\n2. 执行这个文件\n\n```\n# Terminal 1 监听本机4723端口\nappserver 192.168.1.200:4723 \n\n# Terminal 2 本地执行该用例\naldriver C:\\test_case.yaml --apk C:\\ApiDemos-debug.apk\n```\n[下载ApiDemos-debug.apk](https://github.com/RockFeng0/rtsf-app/releases/tag/v1.0.0)\n\n## 详细实例 \n\n### 场景一  本地测试\n\n一般情况下，就是一台PC，连接一台设备的测试场景，步骤如下\n\n1.测试场景假设\n\n```\n apk(待测试的apk): C:\\ApiDemos-debug.apk\n case(自动化测试用例): C:\\test_case.yaml\n\n PC_A_IP(本机): 192.168.1.1\n PC_A_Android_Device_ID(天天模拟器): 127.0.0.1:6555\n```\n\n2.开启appium server,并绑定待测设备\n\n```\n# PC_A监听4723端口，绑定名字是127.0.0.1:6555并且版本为4.4.4的移动设备\n# 注意，监听端口+1也会被占用\nappserver 192.168.1.1:4723 --device-name 127.0.0.1:6555 --device-version 4.4.4\n```\n\n3.aldriver驱动测试\n\n\n**aldriver命令执行本地测试，该命令主动连接本地PC_A的4723端口，并驱动adb连接的第一个设备进行测试, 这就是为什么，在假设场景中，PC_A使用本机IP和4723端口**\n\n```\n# --apk参数会在移动设备中重装\naldriver C:\\test_case.yaml --apk C:\\ApiDemos-debug.apk\n```\n\n**你不想重装apk。通过ainfo获取到 appPackage和appActivity,执行下述命令**\n\n```\n# 原理相当于appium中的，start_activity(package, activity)\naldriver C:\\test_case.yaml --package io.appium.android.apis --activity io.appium.android.apis.ApiDemos\n```\n\n**当然，你可以补全所有参数**\n\n```\naldriver C:\\test_case.yaml --apk C:\\ApiDemos-debug.apk --package io.appium.android.apis --activity io.appium.android.apis.ApiDemos\n```\n\n\n4.释放端口占用\n\n> ctrl + c 结束端口占用\n\n场景一实例:\n![scene-1.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/scene-1.png)\n\n## 场景二 远程控制测试-Selenium Grid Mode\n\n1.测试背景及分析\n\n```\n背景: \n    比如，手上有1000条相对独立的测试case，一台PC一台设备的方式完成这些case的验证，效率较低。那么，并行测试是最好的解决办法\n\n分析: \n    1.多台PC连接多台设备的测试场景假设,其原理是基于selenium RC，使用selenium Grid的方式，使得appium server作为node节点，进行分布式测试\n    2.可是，即使是分布式测试，它的过程也是一个并发的过程，每台设备分别都要测试1000条case。好比很多车在支路上跑，汇入的主干道却只有一条\n    3.需要做的，就是让这1000条case，分配给这些设备，让它们并行测试。解决方法：多重hub\n```\n\n多台PC,连接多台设备,并行测试case场景，步骤如下\n\n2.测试场景假设\n\n```\n apk(待测试的apk): C:\\ApiDemos-debug.apk\n case1(自动化测试用例): C:\\test_case1.yaml\n case2(自动化测试用例): C:\\test_case2.yaml\n ...\n\n PC_Server_IP(Grid Hub端): 192.168.1.254\n\n PC_A_IP(本机): 192.168.1.1\n PC_A_Android_Device_ID(天天模拟器): 127.0.0.1:6555\n ...\n\n PC_B_IP(远端机): 192.168.1.2\n PC_B_Android_Device_ID(天天模拟器): 127.0.0.1:6555\n ...\n\n注意: adb.exe最多支持每台pc链接20台设备\n并行测试: PC_A连接的所有机器，测试case1;PC_B连接的所有机器,测试case2\n```\n\n一个图，三种情况，理解分布式:\n![grid-hub.png](https://raw.githubusercontent.com/RockFeng0/img-folder/master/rtsf-app-img/grid-hub.png)\n\n3.开启selenium grid hub\n\n命令详解，参见[rtsf-web](https://github.com/RockFeng0/rtsf-web)\n\n```\n# PC_Server设置PC_A的hub\nwrhub C:\\selenium-server-standalone-3.14.0.jar --port 4444\n\n# PC_Server设置PC_B的hub\nwrhub C:\\selenium-server-standalone-3.14.0.jar --port 5555\n```\n\n4.开启appium server node\n\n```\n# PC_A  4723端口绑定设备，并注册node节点 \nappserver 192.168.1.1:4723 --device-name 127.0.0.1:6555 --device-version 4.4.4 --hub-ip 192.168.1.254 --hub-port 4444\n\n# PC_A  4725端口绑定设备，并注册node节点 \nappserver 192.168.1.1:4725 --device-name DEVICE_ID --device-version DEVICE_VERSION --hub-ip 192.168.1.254 --hub-port 4444\n...\n\n# PC_B, 同理\nappserver 192.168.1.2:4723 --device-name 127.0.0.1:6555 --device-version 4.4.4 --hub-ip 192.168.1.254 --hub-port 5555\n...\n```\n\n4.ardriver驱动测试\n\n注意:\n- 如果使用 --apk参数，那么 确保 PC A 和 PC B,在该指定的文件路径中，存在这个apk。\n- 如果使用 --package和--activity参数，那么确保，连接到PC的手机，已经装了这个apk\n- aldriver 与 ardriver的区别就在于: ardriver支持 ip和port参数，允许grid模式\n\n```\n# ardriver本身是个并发驱动测试，但是，每次使用都会开一个进程，并发的过程，就采用多次执行命令吧\n# PC_A执行case1，执行case1的测试验证\n> ardriver C:\\test_case1.yaml --apk C:\\ApiDemos-debug.apk --ip 192.168.1.254 --port 4444\n\n# PC_B的所有设备，执行case2的测试验证\n> ardriver C:\\test_case2.yaml --apk C:\\ApiDemos-debug.apk --ip 192.168.1.254 --port 5555\n\n```\n\n# 获取控件的工具\n1. 如果是WebviewApp项目，工具推荐，就参考rtsf-web项目\n2. 如果是NativeApp项目，您需要安装Android SDK, tools目录下，两个工具可以用于定位app元素:\n    - uiautomatorviewer\n    - hierarchyviewer\n\n暂时没有 找到轻量好用的，用于定位的工具，如果您知道，请赐教\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RockFeng0/rtsf-app",
    "keywords": "test android ui",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rtsf-app",
    "package_url": "https://pypi.org/project/rtsf-app/",
    "platform": "",
    "project_url": "https://pypi.org/project/rtsf-app/",
    "project_urls": {
      "Homepage": "https://github.com/RockFeng0/rtsf-app"
    },
    "release_url": "https://pypi.org/project/rtsf-app/1.2.3/",
    "requires_dist": [
      "Appium-Python-Client",
      "requests",
      "rtsf",
      "rtsf-web"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
    "summary": "only for android ui test, base on rtsf",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6635149,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b42a4cd967e5dbad450259bff27f1cc7061962058a0c2a296a5866225a4f09f",
          "md5": "ab63b8fe8d958856235290b1e3d40e26",
          "sha256": "ff4e91857945372995e4a45cc811378159ecf52802f3601000f0214f299ff00f"
        },
        "downloads": -1,
        "filename": "rtsf_app-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab63b8fe8d958856235290b1e3d40e26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 16489,
        "upload_time": "2018-10-14T12:14:25",
        "upload_time_iso_8601": "2018-10-14T12:14:25.130268Z",
        "url": "https://files.pythonhosted.org/packages/8b/42/a4cd967e5dbad450259bff27f1cc7061962058a0c2a296a5866225a4f09f/rtsf_app-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2dbf7096d040ea1330f0bc6ada3d0d6dedce0169433682cf34404e40dbd26ec",
          "md5": "7561b678385680400bb0b0a45f6436be",
          "sha256": "0ac80a85e7417cab2070f66022db734113657da7161138f6f279a6477b279183"
        },
        "downloads": -1,
        "filename": "rtsf_app-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7561b678385680400bb0b0a45f6436be",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 22921,
        "upload_time": "2018-11-04T02:04:20",
        "upload_time_iso_8601": "2018-11-04T02:04:20.606521Z",
        "url": "https://files.pythonhosted.org/packages/b2/db/f7096d040ea1330f0bc6ada3d0d6dedce0169433682cf34404e40dbd26ec/rtsf_app-1.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3809b9605e1f300d2949303a47075e0e03dd0024eff028ee3bc364d0087916c5",
          "md5": "d4a4484c9d23d93be630ce7698931ee1",
          "sha256": "aa925904397614b5e0f15f44cc00e37308838a639f731ba70f533d65ae15e164"
        },
        "downloads": -1,
        "filename": "rtsf-app-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d4a4484c9d23d93be630ce7698931ee1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 22817,
        "upload_time": "2018-11-04T02:04:21",
        "upload_time_iso_8601": "2018-11-04T02:04:21.827219Z",
        "url": "https://files.pythonhosted.org/packages/38/09/b9605e1f300d2949303a47075e0e03dd0024eff028ee3bc364d0087916c5/rtsf-app-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b6851a0c42fb8d94aaac6209e51879425c4dfb1f2c87bda7f09d507557905c",
          "md5": "ed2dcda3179e4777c62f0ced78192d1e",
          "sha256": "8619eeae97beb787377575ae7fcb1bf65f3421dc4660d672b85e59d97345062c"
        },
        "downloads": -1,
        "filename": "rtsf_app-1.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed2dcda3179e4777c62f0ced78192d1e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 22922,
        "upload_time": "2018-11-04T02:11:15",
        "upload_time_iso_8601": "2018-11-04T02:11:15.925886Z",
        "url": "https://files.pythonhosted.org/packages/24/b6/851a0c42fb8d94aaac6209e51879425c4dfb1f2c87bda7f09d507557905c/rtsf_app-1.2.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e16904571459854ed8f8a7c2f6d2b4ee2fb53b2a4c86823ce1500829e1e0bee6",
          "md5": "ddddb2d12e58097f6e3f6aacaf52b735",
          "sha256": "8dcc94bd9ae60e2deb0247bd0ca606dded5effaec82145f1f15c5b431eef8a39"
        },
        "downloads": -1,
        "filename": "rtsf-app-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ddddb2d12e58097f6e3f6aacaf52b735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 22824,
        "upload_time": "2018-11-04T02:11:17",
        "upload_time_iso_8601": "2018-11-04T02:11:17.367996Z",
        "url": "https://files.pythonhosted.org/packages/e1/69/04571459854ed8f8a7c2f6d2b4ee2fb53b2a4c86823ce1500829e1e0bee6/rtsf-app-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1aabda5b507ac8c9b41e4b2a9ae24617efc5577be895553bfd681200d26bbf2e",
          "md5": "711c7acd040d657e6c18896afe9d5b4a",
          "sha256": "be4ebb3f5bb9952ff6b59eb3b30b4244ed62428622656e5f4e98c475eee8c447"
        },
        "downloads": -1,
        "filename": "rtsf_app-1.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "711c7acd040d657e6c18896afe9d5b4a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 23421,
        "upload_time": "2020-02-15T04:10:36",
        "upload_time_iso_8601": "2020-02-15T04:10:36.422425Z",
        "url": "https://files.pythonhosted.org/packages/1a/ab/da5b507ac8c9b41e4b2a9ae24617efc5577be895553bfd681200d26bbf2e/rtsf_app-1.2.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e50d03a83f59f3455aff55da4efecaff900ace3ee878144341fbd89697fcd62",
          "md5": "6bd0153b12c390174a3b3e3afc0e4743",
          "sha256": "156bf5626bde6c23d292bb49cda3ccfe34626adff1385b806397c478facab22b"
        },
        "downloads": -1,
        "filename": "rtsf-app-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6bd0153b12c390174a3b3e3afc0e4743",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
        "size": 23174,
        "upload_time": "2020-02-15T04:10:38",
        "upload_time_iso_8601": "2020-02-15T04:10:38.759522Z",
        "url": "https://files.pythonhosted.org/packages/8e/50/d03a83f59f3455aff55da4efecaff900ace3ee878144341fbd89697fcd62/rtsf-app-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1aabda5b507ac8c9b41e4b2a9ae24617efc5577be895553bfd681200d26bbf2e",
        "md5": "711c7acd040d657e6c18896afe9d5b4a",
        "sha256": "be4ebb3f5bb9952ff6b59eb3b30b4244ed62428622656e5f4e98c475eee8c447"
      },
      "downloads": -1,
      "filename": "rtsf_app-1.2.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "711c7acd040d657e6c18896afe9d5b4a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 23421,
      "upload_time": "2020-02-15T04:10:36",
      "upload_time_iso_8601": "2020-02-15T04:10:36.422425Z",
      "url": "https://files.pythonhosted.org/packages/1a/ab/da5b507ac8c9b41e4b2a9ae24617efc5577be895553bfd681200d26bbf2e/rtsf_app-1.2.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e50d03a83f59f3455aff55da4efecaff900ace3ee878144341fbd89697fcd62",
        "md5": "6bd0153b12c390174a3b3e3afc0e4743",
        "sha256": "156bf5626bde6c23d292bb49cda3ccfe34626adff1385b806397c478facab22b"
      },
      "downloads": -1,
      "filename": "rtsf-app-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6bd0153b12c390174a3b3e3afc0e4743",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
      "size": 23174,
      "upload_time": "2020-02-15T04:10:38",
      "upload_time_iso_8601": "2020-02-15T04:10:38.759522Z",
      "url": "https://files.pythonhosted.org/packages/8e/50/d03a83f59f3455aff55da4efecaff900ace3ee878144341fbd89697fcd62/rtsf-app-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}