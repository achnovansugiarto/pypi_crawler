{
  "info": {
    "author": "Cloudtower developers",
    "author_email": "info@smartx.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Cloudtower Python SDK\n\nPython 环境下的 Cloudtower SDK，适用于 2.7 与 3.4 以上版本。\n\n- [源码地址](https://github.com/smartxworks/cloudtower-python-sdk)\n- [下载地址](https://github.com/smartxworks/cloudtower-python-sdk/releases)\n- [通用指南](https://cloudtower-api-doc.vercel.app)\n\n## 安装\n\n- ### whl\n\n  ```shell\n  pip install cloudtower_sdk-2.7.0-py2.py3-none-any.whl\n  ```\n\n- ### tar.gz\n\n  ```shell\n  tar xvzf cloudtower-sdk-2.7.0.tar.gz\n  cd cloudtower-sdk-2.7.0\n  python setup.py install\n  ```\n\n- ### git 源码安装\n\n  ```\n  git clone https://github.com/smartxworks/cloudtower-python-sdk.git\n  cd cloudtower-python-sdk\n  python setup.py install\n  ```\n\n- ### git pip 安装\n\n  ```shell\n  pip install git+https://github.com/smartxworks/cloudtower-python-sdk.git\n  ```\n\n- ### pypi 安装\n  ```shell\n  pip install cloudtower-sdk\n  ```\n\n## 使用\n\n### 创建实例\n\n#### 创建 `ApiClient` 实例\n\n```python\nfrom cloudtower.configuration import Configuration\nfrom cloudtower import ApiClient\n# 配置 operation-api endpoint\nconfiguration = Configuration(host=\"http://192.168.96.133/v2/api\")\nclient = ApiClient(configuration)\n```\n\n> 如果需要使用 https，可以安装证书，或者忽略证书验证\n\n```python\nconfiguration = Configuration(host=\"https://192.168.96.133/v2/api\")\nconfiguration.verify_ssl = False\nclient = ApiClient(configuration)\n```\n\n#### 创建对应的 API 实例\n\n> 根据不同用途的操作创建相关的 API 实例，例如虚拟机相关操作需要创建一个 `VmApi`。\n\n```python\nfrom cloudtower.api.vm_api import VmApi\nvm_api = VmApi(client)\n```\n\n### 鉴权\n\n> 可以通过 utils 中封装的登陆方法来鉴权 `ApiClient`\n\n```python\nfrom cloudtower.utils import wait_tasks, login\nconf = Configuration(host=\"http://api-test.dev-cloudtower.smartx.com/v2/api\")\napi_client = ApiClient(conf)\nlogin(api_client, \"your_username\", \"your_password\") # 默认使用 LOCAL 作为 usersource\n```\n\n> 也可以直接将 token 应用置 `configuration` 的 `api_key` 中\n\n```python\nfrom cloudtower.api.user_api import UserApi\nfrom cloudtower.models import UserSource\n# 通过 UserApi 中的 login 方法来获得 token。\nuser_api = UserApi(client)\nlogin_res = user_api.login({\n    \"username\": \"your_username\",\n    \"password\": \"your_password\",\n    \"source\": UserSource.LOCAL\n})\n# 将 token 配置在 configuration.api_key[\"Authorization\"] 中，\n# 这样所有使用当前 client 的 api 都会获得鉴权的 token 信息。\nconfiguration.api_key[\"Authorization\"] = login_res.data.token\n```\n\n### 发送请求\n\n#### 获取资源\n\n```python\nvms = vm_api.get_vms({\n  \"where\": {\n    \"id\": \"vm_id\"\n  },\n  \"first\":1,\n})\n```\n\n#### 更新资源\n\n> 资源更新会产生相关的异步任务，当异步任务结束时，代表资源操作完成且数据已更新。\n\n```python\nstart_res = vm_api.start_vm({\n  \"where\": {\n    \"id\": \"stopped_vm_id\"\n  },\n})\n```\n\n> 可以通过提供的工具方法同步等待异步任务结束\n\n```python\nfrom cloudtower.utils import wait_tasks\ntry:\n wait_tasks([res.task_id for res in start_res], api_client)\nexcept ApiException as e:\n # 处理错误\nelse:\n # task完成后的回调\n```\n\n##### 方法参数说明\n\n| 参数名        | 类型      | 是否必须 | 说明                                                                                 |\n| ------------- | --------- | -------- | ------------------------------------------------------------------------------------ |\n| ids           | list[str] | 是       | 需查询的 task 的 id 列表                                                             |\n| api_client    | ApiClient | 是       | 查询所使用的 ApiClient 实例                                                          |\n| interval      | int       | 否       | 轮询的间隔时间，默认为 5s                                                            |\n| timeout       | int       | 否       | 超时时间，默认为 300s                                                                |\n| exit_on_error | bool      | 否       | 是否在单个 Task 出错时立即退出，否则则会等待全部 Task 都完成后再退出，默认为 False。 |\n\n##### 错误说明\n\n| 错误码 | 说明             |\n| ------ | ---------------- |\n| 408    | 超时             |\n| 500    | 异步任务内部错误 |\n\n#### 自定义 header\n\n> cloudtower api 支持通过设置 header 中的 content-language 来设置返回信息的语言, 可选值 `en-US`, `zh-CN`。默认为 `en-US`。\n\n##### 通过 `ApiClient` 的 `set_default_header` 方法\n\n> 可以通过 `ApiClient` 的 `set_default_header` 方法设置默认的 header 信息。\n\n```python\napi_client.set_default_header(\"content_language\",\"en-US\")\nalert_api = AlertApi(api_client)\n# 此时得到的 alerts 中的 message, solution, cause, impact 将被转换为英文描述。\nalerts = alert_api.get_alerts(\n  {\n    \"where\": {\n      \"cluster\": {\n        \"id\": \"cluster_id\"\n      }\n    },\n    \"first\": 100\n  },\n)\n```\n\n##### 通过设置请求的关键字参数\n\n> 也可以通过设置请求的关键字参数 `content_language` 来设置返回信息的语言。\n\n```python\nfrom cloudtower.api.user_api import AlertApi\n\nalert_api = AlertApi(api_client)\n# 此时得到的 alerts 中的 message, solution, cause, impact 将被转换为中文描述。\nalerts = alert_api.get_alerts(\n  {\n    \"where\": {\n      \"cluster\": {\n        \"id\": \"cluster_id\"\n      }\n    },\n    \"first\": 100\n  },\n  content_language=\"zh-CN\"\n)\n```\n\n#### 其他\n\n##### 发送异步请求\n\n> 上述请求的发送都是同步的请求，会堵塞当前进程。如果需要使用异步请求，请在对应请求的关键字参数中加上 `async_req=True`。\n> 通过返回结果 `ApplyResult.get()` 来获取对应的结果。\n\n```python\nvms = vm_api.get_vms(\n  {\n    \"where\": {\n      \"id\": \"vm_id\"\n    }\n  },\n  async_req=True\n)\nprint(vms.get()[0].name)\n```\n\n### 使用完成后销毁 ApiClient 实例\n\n```python\nclient.close()\n```\n\n## 操作示例\n\n### 获取虚拟机\n\n#### 获取所有虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms = vm_api.get_vms({})\n```\n\n#### 分页获取虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms_from_51_to_100 = vm_api.get_vms({\n  \"first\": 50,\n  \"skip\": 50,\n})\n```\n\n#### 获取所有已开机虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi, VmStatus\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nrunning_vms = vm_api.get_vms(\n    {\n        \"where\": {\n            \"status\": VmStatus.RUNNING\n        }\n    },\n)\n```\n\n#### 获取名称或描述中包含特定字符串的虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms_name_contains = vm_api.get_vms(\n    {\n        \"where\": {\n            \"name_contains\": \"string\"\n        }\n    },\n)\n```\n\n#### 获取所有 vcpu > n 的虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nvms_has_4_more_vcpu = vm_api.get_vms(\n    {\n        \"where\": {\n            \"vcpu_gt\": 4\n        }\n    },\n)\n```\n\n### 从模版创建虚拟机\n\n#### 仅指定 id\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vms = vm_api.create_vm_from_template([\n    {\n        \"template_id\": \"template_id\",\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"is_full_copy\": False\n    }\n])\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nvm_ids = [\n    with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\ncreated_vms = vm_api.get_vms({\n    \"where\": {\n        \"id_in\": vm_ids\n    }\n})\n```\n\n#### 配置与模板不同的虚拟盘参数\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmCreateVmFromTemplateParamsDiskOperateModifyDisks,\n    VmDiskParams,\n    Bus,\n    VmVolumeElfStoragePolicyType\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.create_vm_from_template([\n    {\n        \"template_id\": \"template_id\",\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"is_full_copy\": False,\n        \"disk_operate\": {\n            \"remove_disks\": {\n                \"disk_index\": [2, 3]\n            },\n            \"modify_disks\":   [\n                {\n                    \"disk_index\": 0,\n                    \"vm_volume_id\": \"vm_volume_id\"\n                }\n            ],\n            \"new_disks\":   {\n                \"mount_cd_roms\": [\n                    {\n                        \"index\": 2,\n                        \"boot\": 0,\n                        \"elf_image_id\": \"elf_image_id\"\n                    }\n                ],\n                \"mount_disks\": [\n                    {\n                        \"index\": 3,\n                        \"bus\": Bus.VIRTIO,\n                        \"boot\": 1,\n                        \"vm_volume_id\": \"vm_volume_id\"\n                    }\n                ],\n                \"mount_new_create_disks\": [\n                    {\n                        \"vm_volume\": {\n                            \"elf_storage_policy\": VmVolumeElfStoragePolicyType._2_THIN_PROVISION,\n                            \"size\": 4*1024*1024*1024,\n                            \"name\": \"disk_name\",\n                        },\n                        \"bus\": Bus.IDE,\n                        \"boot\": 3,\n                    }\n                ]\n            }\n        }\n    }\n])\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nvm_ids = [\n    with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\ncreated_vms = vm_api.get_vms({\n    \"where\": {\n        \"id_in\": vm_ids\n    }\n})\n```\n\n#### 配置与模版不同的网卡参数\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi, VmNicModel\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.create_vm_from_template([\n    {\n        \"template_id\": \"template_id\",\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"is_full_copy\": False,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n                \"enabled\": True,\n                \"model\": VmNicModel.E1000\n            }\n        ]\n    }\n])\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nvm_ids = [\n    with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\ncreated_vms = vm_api.get_vms({\n    \"where\": {\n        \"id_in\": vm_ids\n    }\n})\n```\n\n### 创建空白虚拟机\n\n#### 简单创建\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4*1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_cd_roms\": [{\n                \"boot\": 0,\n                \"index\": 0\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### 创建时配置虚拟盘\n\n##### CD-ROM 加载 ISO\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4*1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_cd_roms\": [{\n                \"index\": 0,\n                \"boot\": 0,\n                \"elf_image_id\": \"elf_image_id\"\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 挂载虚拟卷为虚拟盘\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4*1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_disks\": [{\n                \"index\": 0,\n                \"boot\": 0,\n                \"bus\": Bus.VIRTIO,\n                \"vm_volume_id\": \"vm_volume_id\",\n                \"index\": 0,\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 新增并挂载虚拟盘\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus,\n    VmVolumeElfStoragePolicyType\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4 * 1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_new_create_disks\": [{\n                \"boot\": 0,\n                \"bus\": Bus.VIRTIO,\n                \"vm_volume\": {\n                    \"elf_storage_policy\": VmVolumeElfStoragePolicyType._2_THIN_PROVISION,\n                    \"size\": 10 * 1024 * 1024 * 1024,\n                    \"name\": \"new_volume_name\"\n                }\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### 创建时配置虚拟网卡\n\n```python\nfrom cloudtower import (\n    ApiClient,\n    Configuration,\n    VmApi,\n    VmStatus,\n    VmFirmware,\n    Bus,\n    VmNicModel,\n    VmVolumeElfStoragePolicyType\n)\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.create_vm([\n    {\n        \"cluster_id\": \"cluster_id\",\n        \"name\": \"vm_name1\",\n        \"ha\": True,\n        \"cpu_cores\": 4,\n        \"cpu_sockets\": 4,\n        \"memory\": 4 * 1024*1024*1024,\n        \"vcpu\": 16,\n        \"status\": VmStatus.STOPPED,\n        \"firmware\": VmFirmware.BIOS,\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n                \"mirror\": True,\n                \"model\": VmNicModel.VIRTIO\n            }\n        ],\n        \"vm_disks\": {\n            \"mount_cd_roms\": [{\n                \"index\": 0,\n                \"boot\": 0,\n            }],\n        }\n    }\n])[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\ncreated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n### 编辑虚拟机\n\n#### 编辑基本信息\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.update_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"name\": \"new_name\",\n        \"description\": \"new_description\",\n        \"ha\": False,\n        \"vcpu\": 2 * 2,\n        \"cpu_cores\": 2,\n        \"cpu_sockets\": 2,\n        \"memory\": 1*1024*1024*1024,\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### CD-ROM 编辑\n\n##### 添加 CD-ROM\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_cd_rom({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_cd_roms\": [\n            {\n                \"elf_image_id\": \"elf_image_id\",\n                \"boot\": 0,\n                \"index\": 0\n            }\n        ]\n    }\n})[0]\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 删除 CD-ROM\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.remove_vm_cd_rom({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"cd_rom_ids\": [\"cd_rom_id_1\", \"cd_rom_id_2\"]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### 虚拟卷操作\n\n##### 添加新虚拟卷\n\n```python\nfrom cloudtower import ApiClient, Configuration, Bus, VmVolumeElfStoragePolicyType, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_disk({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_disks\": {\n            \"mount_new_create_disks\": [\n                {\n                    \"vm_volume\": {\n                        \"elf_storage_policy\": VmVolumeElfStoragePolicyType._2_THIN_PROVISION,\n                        \"size\": 5*1024*1024*1024,\n                        \"name\": \"new_volume_name\"\n                    },\n                    \"boot\": 1,\n                    \"bus\": Bus.VIRTIO,\n                }\n            ]\n        }\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 挂载已存在虚拟卷为虚拟盘\n\n```python\nfrom cloudtower import ApiClient, Configuration, Bus, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_disk({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_disks\": {\n            \"mount_disks\": [\n                {\n                    \"index\": 0,\n                    \"vm_volume_id\": \"vm_volume_id\",\n                    \"boot\": 1,\n                    \"bus\": Bus.VIRTIO,\n                }\n            ]\n        }\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 卸载虚拟盘\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmVolumeElfStoragePolicyType, Bus, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.remove_vm_disk({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"disk_ids\": [\"vm_disk_id_1\", \"vm_disk_id_2\"]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### 网卡操作\n\n##### 添加网卡\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi, VmNicModel\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.add_vm_nic({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"vm_nics\": [\n            {\n                \"connect_vlan_id\": \"vlan_id\",\n                \"enabled\": False,\n                \"model\": VmNicModel.VIRTIO,\n            },\n            {\n                \"connect_vlan_id\": \"vlan_id_2\",\n                \"enabled\": True,\n                \"mirror\": True,\n                \"model\": VmNicModel.VIRTIO,\n            }\n        ]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 编辑网卡\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.update_vm_nic({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"nic_index\": 0,\n        \"enabled\": False,\n        \"mirror\": False,\n        \"connect_vlan_id\": \"vlan_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n##### 移除网卡\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.remove_vm_nic({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"nic_index\": [0, 1]\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\nupdated_vm = vm_api.get_vms({\n    \"where\": {\n        \"id\": with_task_vm.data.id\n    }\n})\n```\n\n#### 虚拟机迁移\n\n##### 迁移至指定主机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.mig_rate_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"host_id\": \"host_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n```\n\n##### 自动调度到合适的主机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\n\nwith_task_vm = vm_api.mig_rate_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n```\n\n### 虚拟机电源操作\n\n#### 虚拟机开机:\n\n##### 指定虚拟机开机，自动调度到合适的虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.start_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nopened_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 批量虚拟机开机，自动调度到合适的虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.start_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\n\nopened_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### 开机至指定主机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.start_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    },\n    \"data\": {\n        \"host_id\": \"host_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nopened_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n#### 虚拟机关机\n\n##### 指定虚拟机关机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.shut_down_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nclosed_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 批量虚拟机关机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.shut_down_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nclosed_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### 强制关机指定虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.force_shut_down_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nclosed_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 强制关机批量虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\nconf = Configuration(host=\"http://192.168.96.133/v2/api\")\nconf.api_key[\"Authorization\"] = \"token\"\napi_client = ApiClient(conf)\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.force_shut_down_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\nwait_tasks(tasks, api_client)\n\nclosed_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### 虚拟机重启\n\n##### 重启指定虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.restart_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nrestarted_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 重启批量虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.restart_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nrestarted_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### 强制重启指定虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.force_restart_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nrestarted_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 强制重启批量虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.force_restart_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nrestarted_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### 虚拟机暂停\n\n##### 暂停指定虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.suspend_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nsuspended_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 暂停批量虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.suspend_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nsuspended_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### 虚拟机恢复\n\n##### 恢复指定虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vm = vm_api.resume_vm({\n    \"where\": {\n        \"id\": \"vm_id\"\n    }\n})[0]\n\nwait_tasks([with_task_vm.task_id], api_client)\n\nresumed_vm = vm_api.get_vms({\"where\": {\"id\": with_task_vm.data.id}})[0]\n```\n\n##### 恢复批量虚拟机\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_vms = vm_api.resume_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_vm.task_id for with_task_vm in with_task_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nresumed_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n### 删除虚拟机\n\n#### 回收站\n\n##### 移入回收站\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_delete_vms = vm_api.move_vm_to_recycle_bin({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_delete_vm.task_id for with_task_delete_vm in with_task_delete_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nvm_moved_to_recycle_bin = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n##### 从回收站恢复\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_delete_vms = vm_api.recover_vm_from_recycle_bin({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_delete_vm.task_id for with_task_delete_vm in with_task_delete_vms]\nids = [with_task_vm.data.id for with_task_vm in with_task_vms]\n\nwait_tasks(tasks, api_client)\n\nrecovered_vms = vm_api.get_vms({\"where\": {\"id_in\": ids}})\n```\n\n#### 永久删除\n\n```python\nfrom cloudtower import ApiClient, Configuration, VmApi\nfrom cloudtower.utils import wait_tasks\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nvm_api = VmApi(api_client)\nwith_task_delete_vms = vm_api.delete_vm({\n    \"where\": {\n        \"id_in\": [\"vm_id_1\", \"vm_id_2\"]\n    }\n})\n\ntasks = [with_task_delete_vm.task_id for with_task_delete_vm in with_task_delete_vms]\n\nwait_tasks(tasks, api_client)\n```\n\n## 场景示例\n\n### 虚拟机备份\n\n```python\nfrom cloudtower import ApiClient\nfrom cloudtower.api.vm_api import VmApi\nfrom cloudtower.api.vm_snapshot_api import VmSnapshotApi\nfrom cloudtower.api.iscsi_lun_snapshot_api import IscsiLunSnapshotApi\nfrom cloudtower.models import (\n    ConsistentType,\n    VmToolsStatus\n)\nfrom cloudtower.utils import wait_tasks\n\n\ndef create_vm_snapshot(\n    api_client: ApiClient,\n    target_vm_name: str,\n    target_snapshot_name: str,\n    consistent_type: ConsistentType\n):\n    vm_api = VmApi(api_client)\n    vm_snapshot_api = VmSnapshotApi(api_client)\n    iscsi_lun_snapshot_api = IscsiLunSnapshotApi(api_client)\n    # 1. 获取所需备份的虚拟机的信息，这里我们需要vm的id来构建创建snapshot的参数\n    vm = vm_api.get_vms({\n        \"where\": {\n            \"name\": target_vm_name\n        },\n        \"first\": 1\n    })\n    # vm 已安装并启动 VMTools 时，consistent_type 可以使用 FILE_SYSTEM_CONSISTENT 代表文件系统一致性快照\n    if vm.vm_tools_status != VmToolsStatus.RUNNING and consistent_type == ConsistentType.FILE_SYSTEM_CONSISTENT:\n        consistent_type = ConsistentType.CRASH_CONSISTENT\n\n    # 2. 创建虚拟机快照\n    snapshots_with_task = vm_snapshot_api.create_vm_snapshot({\n        \"data\": [\n            {\n                \"vm_id\": vm.id,\n                \"name\": target_snapshot_name,\n                \"consistent_type\": consistent_type\n            }\n        ]\n    })\n\n    # 3. 等待Task完成\n    wait_tasks([snapshots_with_task[0].task_id], api_client)\n\n    # 4. 根据返回的id查询生成的虚拟机快照\n    snapshot = vm_snapshot_api.get_vm_snapshots({\n        \"where\": {\n            \"id\": snapshots_with_task.data.id\n        }\n    })[0]\n    # 5. 根据返回的snapshot中的vm_disks包含了快照的虚拟盘信息\n    # type 为 DISK 表示对应一个卷，其中会包含一个 snapshot_local_id 则表示该虚拟卷对应的lun快照的 local_id\n    # type 为 CD-ROM则代表为被挂载的CD-ROM，不会产生lun快照\n    lun_snapshot_ids = []\n    for disk in snapshot.vm_disks:\n        if disk.type == \"DISK\":\n            lun_snapshot_ids.append(disk.snapshot_local_id)\n\n    lun_snapshots = iscsi_lun_snapshot_api.get_iscsi_lun_snapshots({\n        \"where\": {\n            \"name_in\": lun_snapshot_ids\n        }\n    })\n\n    return {\n        \"vm_snapshot\": snapshot,\n        \"lun_snapshots\": lun_snapshots\n    }\n\n```\n\n### Dashboard 构建\n\n#### 定义工具方法\n\n```python\nfrom functools import reduce\nfrom datetime import datetime, timedelta\nfrom cloudtower import ApiClient\nfrom cloudtower.configuration import Configuration\nfrom cloudtower.models import SeverityEnum, ClusterType, Hypervisor, DiskType, DiskUsageStatus, DiskHealthStatus\nfrom cloudtower.api import VmApi, ClusterApi, AlertApi, HostApi, DiskApi, ClusterSettingsApi, GlobalSettingsApi\n\napi_client = ApiClient(Configuration(host=\"http://192.168.96.133/v2/api\"))\n\nbyte_units = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\"]\nhz_units = [\"Hz\", \"KHz\", \"MHz\", \"GHz\", \"THz\"]\n\n\ndef format_unit(base: int, units, step=1024):\n    if not len(units):\n        raise Exception(\"no unit provided\")\n    if base <= 0:\n        return \"0\" + units[0]\n    for unit in units:\n        if base < step:\n            return \"{:.2f}{}\".format(base, unit)\n        base /= step\n    return \"{:.2f}{}\".format(base, units[-1])\n```\n\n#### 构建报警信息\n\n```python\ndef build_alerts(api_client: ApiClient, cluster_ids):\n    alert_api = AlertApi(api_client)\n    alerts = alert_api.get_alerts({\n        \"where\": {\n            \"ended\": False,\n            \"cluster\": {\n                \"id_in\": cluster_ids\n            },\n        }\n    })\n    critial_alerts = [\n        alert for alert in alerts if alert.severity == SeverityEnum.CRITICAL]\n    notice_alerts = [\n        alert for alert in alerts if alert.severity == SeverityEnum.NOTICE]\n    info_alerts = [\n        alert for alert in alerts if alert.severity == SeverityEnum.INFO]\n    return {\n        \"critical\": critial_alerts,\n        \"notice\": notice_alerts,\n        \"info\": info_alerts\n    }\n```\n\n#### 构建硬盘信息\n\n> 这里以机械硬盘为例\n\n```python\ndef build_hdd_info(api_client: ApiClient, cluster_ids):\n    disk_api = DiskApi(api_client)\n    disks = disk_api.get_disks({\n        \"where\": {\n            \"host\": {\n                \"cluster\": {\n                    \"id_in\": cluster_ids\n                }\n            }\n        }\n    })\n    hdd = {\n        \"healthy\": 0,\n        \"warning\": 0,\n        \"error\": 0,\n        \"total\": 0,\n    }\n    for disk in disks:\n        if disk.type == DiskType.HDD:\n            if disk.health_status in [DiskHealthStatus.UNHEALTHY, DiskHealthStatus.SUBHEALTHY, DiskHealthStatus.SMART_FAILED]:\n                hdd['error'] += 1\n            elif disk.usage_status in [DiskUsageStatus.UNMOUNTED, DiskUsageStatus.PARTIAL_MOUNTED]:\n                hdd['warning'] += 1\n            else:\n                hdd['healthy'] += 1\n            hdd['total'] += 1\n    return hdd\n```\n\n#### 构建性能指标\n\n> 获取指定集群的 CPU 核数，CPU 频率总数，CPU 使用率，内存总量，内存使用量，存储资源总量，存储资源已使用量，存储资源失效量与存储资源可用量。\n\n```python\ndef build_metrics(api_client: ApiClient, clusters, cluster_ids):\n    result = {}\n    host_api = HostApi(api_client)\n    hosts = host_api.get_hosts({\n        \"where\": {\n            \"cluster\": {\n                \"id_in\": cluster_ids\n            }\n        }\n    })\n    cpu = {\n        \"total_cpu_cores\": 0,\n        \"total_cpu_hz\": 0,\n        \"used_cpu_hz\": 0,\n    }\n    memory = {\n        \"total_memory\": 0,\n        \"used_memory\": 0,\n    }\n    storage = {\n        \"total\": 0,\n        \"used\": 0,\n        \"invalid\": 0,\n        \"available\": 0\n    }\n\n    for host in hosts:\n        cluster = next(\n            cluster for cluster in clusters if cluster.id == host.cluster.id)\n        if cluster.hypervisor == Hypervisor.ELF:\n            memory['total_memory'] += 0 if host.total_memory_bytes is None else host.total_memory_bytes\n            memory['used_memory'] += (0 if host.running_pause_vm_memory_bytes is None else host.running_pause_vm_memory_bytes) + \\\n                (0 if host.os_memory_bytes is None else host.os_memory_bytes)\n\n    for cluster in clusters:\n        if cluster.type == ClusterType.SMTX_OS:\n            cpu[\"total_cpu_cores\"] += 0 if cluster.total_cpu_cores is None else cluster.total_cpu_cores\n            cpu[\"total_cpu_hz\"] += 0 if cluster.total_cpu_hz is None else cluster.total_cpu_hz\n            cpu[\"used_cpu_hz\"] += 0 if cluster.used_cpu_hz is None else cluster.used_cpu_hz\n            if cluster.hypervisor == Hypervisor.VMWARE:\n                memory[\"total_memory\"] += 0 if cluster.total_memory_bytes is None else cluster.total_memory_bytes\n                memory[\"used_memory\"] += 0 if cluster.used_memory_bytes is None else cluster.used_memory_bytes\n        storage[\"total\"] += 0 if cluster.total_data_capacity is None else cluster.total_data_capacity\n        storage[\"used\"] += 0 if cluster.used_data_space is None else cluster.used_data_space\n        storage[\"invalid\"] += 0 if cluster.failure_data_space is None else cluster.failure_data_space\n    if len([cluster for cluster in clusters if cluster.type != ClusterType.SMTX_ZBS]) > 1:\n        cpu[\"cpu_usage\"] = \"{:.2f}%\".format(\n            cpu[\"used_cpu_hz\"] / cpu[\"total_cpu_hz\"])\n        cpu[\"total_cpu_hz\"] = format_unit(cpu[\"total_cpu_hz\"], hz_units, 1000)\n        cpu[\"used_cpu_hz\"] = format_unit(cpu[\"used_cpu_hz\"], hz_units, 1000)\n        result['cpu'] = cpu\n        memory[\"memory_usage\"] = \"{:.2f}%\".format(\n            memory[\"used_memory\"] / memory[\"total_memory\"])\n        memory[\"total_memory\"] = format_unit(\n            memory[\"total_memory\"], byte_units)\n        memory[\"used_memory\"] = format_unit(\n            memory[\"used_memory\"], byte_units)\n        result[\"memory\"] = memory\n    storage[\"available\"] = format_unit(\n        storage[\"total\"] - storage[\"used\"] - storage[\"invalid\"], byte_units)\n    storage[\"total\"] = format_unit(storage[\"total\"], byte_units)\n    storage[\"used\"] = format_unit(storage[\"used\"], byte_units)\n    storage[\"invalid\"] = format_unit(storage[\"invalid\"], byte_units)\n    result[\"storage\"] = storage\n    return result\n```\n\n#### 构建 Dashboard\n\n```python\ndef build_dashboard(api_client: ApiClient, datacenter_id: str = None, cluster_id: str = None):\n    result = {}\n    cluster_api = ClusterApi(api_client)\n    clusters = cluster_api.get_clusters({\n        \"where\": {\"id\": cluster_id} if cluster_id is not None else {\"datacenters_some\": {\"id\": datacenter_id}} if datacenter_id is not None else None\n    })\n    cluster_ids = [cluster.id for cluster in clusters]\n\n    result[\"alerts\"] = build_alerts(api_client, cluster_ids)\n    result[\"hdd\"] = build_hdd_info(api_client, cluster_ids)\n    metric = build_metrics(api_client, clusters, cluster_ids)\n    if \"cpu\" in metric:\n        result[\"cpu\"] = metric[\"cpu\"]\n    if \"memory\" in metric:\n        result[\"memory\"] = metric[\"memory\"]\n    if \"storage\" in metric:\n        result[\"storage\"] = metric[\"storage\"]\n    return result\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smartxworks/cloudtower-python-sdk",
    "keywords": "OpenAPI,OpenAPI-Generator,CloudTower APIs",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cloudtower-sdk",
    "package_url": "https://pypi.org/project/cloudtower-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/cloudtower-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/smartxworks/cloudtower-python-sdk"
    },
    "release_url": "https://pypi.org/project/cloudtower-sdk/2.7.0/",
    "requires_dist": [
      "urllib3 (>=1.25.3)",
      "six (>=1.10)",
      "python-dateutil"
    ],
    "requires_python": "",
    "summary": "CloudTower APIs",
    "version": "2.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17393176,
  "releases": {
    "1.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1be1a988028622ed102511de0b36646163677f791bf07172b05d1ea6ea814e7e",
          "md5": "03bd950239c7c20218fdd36af789a9fd",
          "sha256": "c7505f4bb4b7a56b15b63a533635a49a23896cf0459eff01770e74c5f65688d2"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-1.10.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03bd950239c7c20218fdd36af789a9fd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 2817678,
        "upload_time": "2022-05-18T02:36:35",
        "upload_time_iso_8601": "2022-05-18T02:36:35.510348Z",
        "url": "https://files.pythonhosted.org/packages/1b/e1/a988028622ed102511de0b36646163677f791bf07172b05d1ea6ea814e7e/cloudtower_sdk-1.10.0-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "remove managementIp from witness"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04a6d3c2d62c3ddf85604fa4ef6df2a8c3968f9778964c5e0e72d9147cc446dd",
          "md5": "3b11124e96a08ffc64849741ddd52441",
          "sha256": "82938810c08e51a21c60f11fae434581ef43174d3cc2c7e68885ea7b0396dd91"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-1.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b11124e96a08ffc64849741ddd52441",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1236231,
        "upload_time": "2022-05-18T02:36:39",
        "upload_time_iso_8601": "2022-05-18T02:36:39.378916Z",
        "url": "https://files.pythonhosted.org/packages/04/a6/d3c2d62c3ddf85604fa4ef6df2a8c3968f9778964c5e0e72d9147cc446dd/cloudtower-sdk-1.10.0.tar.gz",
        "yanked": true,
        "yanked_reason": "remove managementIp from witness"
      }
    ],
    "1.10.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d67a329f2dc0aa251a539338049012de43ebe54fa504fd2cd87c6ad3a8f9cf14",
          "md5": "a0c4c9abb5241dbedf35794f4e591bbd",
          "sha256": "71a6dc5f64e5254c19035a670f4e7fa38ab5be0eb1807265e3ec9e180290b0f4"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-1.10.0.post1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0c4c9abb5241dbedf35794f4e591bbd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 2796733,
        "upload_time": "2022-05-20T03:57:30",
        "upload_time_iso_8601": "2022-05-20T03:57:30.038651Z",
        "url": "https://files.pythonhosted.org/packages/d6/7a/329f2dc0aa251a539338049012de43ebe54fa504fd2cd87c6ad3a8f9cf14/cloudtower_sdk-1.10.0.post1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35259266d742a44be7f5f561a344df005e19a60389c6ab95538546bc33eb3936",
          "md5": "3c7cdac8ff254ffc6f3ca40b3c13d5c2",
          "sha256": "282f51b863e0aa1d4db096071caeffb7a664f5f948a375b6e193deb5783f96d6"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-1.10.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c7cdac8ff254ffc6f3ca40b3c13d5c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1230666,
        "upload_time": "2022-05-20T03:57:33",
        "upload_time_iso_8601": "2022-05-20T03:57:33.910680Z",
        "url": "https://files.pythonhosted.org/packages/35/25/9266d742a44be7f5f561a344df005e19a60389c6ab95538546bc33eb3936/cloudtower-sdk-1.10.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "096cf174339a9363df3575485de9f7453c4d282f5da3966c6a763b55db767364",
          "md5": "af5bcaa41559289a8c3952503743db51",
          "sha256": "246430222caa9e368d221d145be1d36fa7e82a752567f6acdce9f81f11dfe0d2"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-1.9.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af5bcaa41559289a8c3952503743db51",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3118522,
        "upload_time": "2022-02-15T11:17:50",
        "upload_time_iso_8601": "2022-02-15T11:17:50.148617Z",
        "url": "https://files.pythonhosted.org/packages/09/6c/f174339a9363df3575485de9f7453c4d282f5da3966c6a763b55db767364/cloudtower_sdk-1.9.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ecd2c633de1252445d1fcb8d654227b8ee40dca51002e68daa243838f46c0de",
          "md5": "ef76a261266fc2ac72080d16c48a2792",
          "sha256": "68033bb7fe3ca2ba25378de35d5a3bb6365ca1e7b62d21e152e01f38ee72063d"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-1.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef76a261266fc2ac72080d16c48a2792",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1418392,
        "upload_time": "2022-02-15T11:17:52",
        "upload_time_iso_8601": "2022-02-15T11:17:52.923496Z",
        "url": "https://files.pythonhosted.org/packages/3e/cd/2c633de1252445d1fcb8d654227b8ee40dca51002e68daa243838f46c0de/cloudtower-sdk-1.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0aea5b93556ab8daf3783a36412fa9fa31aae3f6bde8817078396a3550604177",
          "md5": "f7f630762ca358807a52af619789399e",
          "sha256": "bede32d9440624c7e4c752c9a4871e3c30e850ae5eea8afeb38572b5685f5eb8"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7f630762ca358807a52af619789399e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 2941663,
        "upload_time": "2022-05-20T09:30:34",
        "upload_time_iso_8601": "2022-05-20T09:30:34.511379Z",
        "url": "https://files.pythonhosted.org/packages/0a/ea/5b93556ab8daf3783a36412fa9fa31aae3f6bde8817078396a3550604177/cloudtower_sdk-2.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9bafce4e8ec5bb778ef6ac332e21ca73e083f1f5ed4ff0b9f9530a9fbd9cdbf",
          "md5": "c05af9ba0913551291ab88c71e939b2f",
          "sha256": "70407c3c09d72da6b1928b76d1d4a85f3f22f463f7d624a51f59a6f52c44cd37"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c05af9ba0913551291ab88c71e939b2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1294723,
        "upload_time": "2022-05-20T09:30:38",
        "upload_time_iso_8601": "2022-05-20T09:30:38.963143Z",
        "url": "https://files.pythonhosted.org/packages/c9/ba/fce4e8ec5bb778ef6ac332e21ca73e083f1f5ed4ff0b9f9530a9fbd9cdbf/cloudtower-sdk-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70e57492aa7de741804af928786789b84119a5a676a7bbd0febab5c39dbbf51d",
          "md5": "cd3ac51005de28dcb56f8ec35eb65044",
          "sha256": "7ac9db6b8347b3448375f7ee9996cfbe89e5cecc7ecbbbefbba9060bb2d11e87"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd3ac51005de28dcb56f8ec35eb65044",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3054547,
        "upload_time": "2022-07-08T10:08:05",
        "upload_time_iso_8601": "2022-07-08T10:08:05.714795Z",
        "url": "https://files.pythonhosted.org/packages/70/e5/7492aa7de741804af928786789b84119a5a676a7bbd0febab5c39dbbf51d/cloudtower_sdk-2.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efc53fccc3ca4c2e9d31cbb7339abeb6b997d9ba5511f5a12c844d1f2fb69857",
          "md5": "edad4cf6524267efd0e87762aca38d8c",
          "sha256": "5878b6de33001585881247d96b652d8aa4a6e6c623aaab285c80fe830ce24a7f"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "edad4cf6524267efd0e87762aca38d8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1302577,
        "upload_time": "2022-07-08T10:08:09",
        "upload_time_iso_8601": "2022-07-08T10:08:09.887947Z",
        "url": "https://files.pythonhosted.org/packages/ef/c5/3fccc3ca4c2e9d31cbb7339abeb6b997d9ba5511f5a12c844d1f2fb69857/cloudtower-sdk-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69ce9640b1ca019f145b9b1e407c3229c1d58833763178b322a0437ddcad13ed",
          "md5": "4ecbb98528fa544e0f6487d5d4b6b6a7",
          "sha256": "1fef383a0961656058bd28b9b877ce14532eb05c11583f22f266bf6a0b6e6ff7"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ecbb98528fa544e0f6487d5d4b6b6a7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3078573,
        "upload_time": "2022-08-16T02:48:29",
        "upload_time_iso_8601": "2022-08-16T02:48:29.283241Z",
        "url": "https://files.pythonhosted.org/packages/69/ce/9640b1ca019f145b9b1e407c3229c1d58833763178b322a0437ddcad13ed/cloudtower_sdk-2.2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ca7af5653825745b49ac0852f0da4d3d635f73e3e2ebef6a7d08fb35bcdf8bb",
          "md5": "76ef20bb2c6898fbdd5d093706042857",
          "sha256": "f0f4b333550342734ef2126d5548b901f7bae9dea280faaf6308e53155420ead"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76ef20bb2c6898fbdd5d093706042857",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1305911,
        "upload_time": "2022-08-16T02:48:33",
        "upload_time_iso_8601": "2022-08-16T02:48:33.069023Z",
        "url": "https://files.pythonhosted.org/packages/1c/a7/af5653825745b49ac0852f0da4d3d635f73e3e2ebef6a7d08fb35bcdf8bb/cloudtower-sdk-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe054d79480e7988c92a2a984cb091c7bcb99c23b57a32a166b1ad2d3b0935ce",
          "md5": "77bbb6628e5ca195b5e572b025afa81c",
          "sha256": "ba8ba142cea8e1dfdeba085a4531b3ee29d506469bb53fd47d20c02631edcc65"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77bbb6628e5ca195b5e572b025afa81c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3016468,
        "upload_time": "2022-09-05T08:54:45",
        "upload_time_iso_8601": "2022-09-05T08:54:45.166762Z",
        "url": "https://files.pythonhosted.org/packages/fe/05/4d79480e7988c92a2a984cb091c7bcb99c23b57a32a166b1ad2d3b0935ce/cloudtower_sdk-2.3.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab82baca5a1aea835ea61f7ec3ed870ec4e1d4f2e563736bb0e930873f16e5b5",
          "md5": "6ae5d6a0a942a651eaf4ff05d14c77d4",
          "sha256": "233809f9e685741e6402731e3da26e2bfb1ea334b7f5120ead9fa00245f917c4"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6ae5d6a0a942a651eaf4ff05d14c77d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1308655,
        "upload_time": "2022-09-05T08:54:48",
        "upload_time_iso_8601": "2022-09-05T08:54:48.560762Z",
        "url": "https://files.pythonhosted.org/packages/ab/82/baca5a1aea835ea61f7ec3ed870ec4e1d4f2e563736bb0e930873f16e5b5/cloudtower-sdk-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12427aebb3f0fb1d2aed0aec36e12a95fb13c18696303797c2e9b9b43df36b76",
          "md5": "889e2a0a2636cdd06e0b9463bbc6f89d",
          "sha256": "4c09fc9f1b5f1f80787c4ba279d8021ffa610b86cee0d7ce00377657dcc778a6"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "889e2a0a2636cdd06e0b9463bbc6f89d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3105068,
        "upload_time": "2022-11-18T08:54:17",
        "upload_time_iso_8601": "2022-11-18T08:54:17.721362Z",
        "url": "https://files.pythonhosted.org/packages/12/42/7aebb3f0fb1d2aed0aec36e12a95fb13c18696303797c2e9b9b43df36b76/cloudtower_sdk-2.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf1437ae6b84a41d87f3f60c57ab6a37a2293b257e741ff0f3b1225c0cf8785",
          "md5": "ad96222d266f919e6b15120c02bb72ab",
          "sha256": "ebd28c1f288bcef585982618ade16117181c23c4e12ee1f4627aa289ba08f072"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad96222d266f919e6b15120c02bb72ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1344704,
        "upload_time": "2022-11-18T08:54:21",
        "upload_time_iso_8601": "2022-11-18T08:54:21.630651Z",
        "url": "https://files.pythonhosted.org/packages/dd/f1/437ae6b84a41d87f3f60c57ab6a37a2293b257e741ff0f3b1225c0cf8785/cloudtower-sdk-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2d0a24ebb7351b01263bef88a5d8b59cf18e3c60419b00bc6f516339dd3b88c",
          "md5": "8f42c3d9c22ef1910565385166b7babd",
          "sha256": "e490cd38b9854d656bdad066d9e76a160442b6f21f3d5681e39e15310e9ba925"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f42c3d9c22ef1910565385166b7babd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3120940,
        "upload_time": "2023-01-03T06:32:41",
        "upload_time_iso_8601": "2023-01-03T06:32:41.593071Z",
        "url": "https://files.pythonhosted.org/packages/f2/d0/a24ebb7351b01263bef88a5d8b59cf18e3c60419b00bc6f516339dd3b88c/cloudtower_sdk-2.5.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fd333fc9ef67e3911930aeff8618f260930ba57f74515505fc5ccb8b7cd17e1",
          "md5": "dda0712e132587dfd45f4be19421c6ea",
          "sha256": "5b25809a9743497c801ac2d724f8e769bd8202373bd1c5fe974798839534c651"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dda0712e132587dfd45f4be19421c6ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1349277,
        "upload_time": "2023-01-03T06:32:44",
        "upload_time_iso_8601": "2023-01-03T06:32:44.659179Z",
        "url": "https://files.pythonhosted.org/packages/3f/d3/33fc9ef67e3911930aeff8618f260930ba57f74515505fc5ccb8b7cd17e1/cloudtower-sdk-2.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d01a55d96635fd5e6217727844d00a93a67c11cda3e27328a9f8c2d5739d0a0",
          "md5": "1e8c8f67862009774fc9f4ca4205760e",
          "sha256": "242d84309ce7d2c886d23af22c4276f8873f7bc09155fc32e4905db86aebd9e8"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e8c8f67862009774fc9f4ca4205760e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3121081,
        "upload_time": "2023-02-20T09:14:45",
        "upload_time_iso_8601": "2023-02-20T09:14:45.053740Z",
        "url": "https://files.pythonhosted.org/packages/7d/01/a55d96635fd5e6217727844d00a93a67c11cda3e27328a9f8c2d5739d0a0/cloudtower_sdk-2.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bb7552d3fa9f1fc5a2d0284573e023c0b443c77e8f997b20f6d5da088e5c760",
          "md5": "6522fc2b29a78fb482711ccdd9468853",
          "sha256": "092ea0006f1388af5068b29fcfb80f7f28f04c88845e83ce58271d2a1daa821f"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6522fc2b29a78fb482711ccdd9468853",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1349406,
        "upload_time": "2023-02-20T09:14:47",
        "upload_time_iso_8601": "2023-02-20T09:14:47.839462Z",
        "url": "https://files.pythonhosted.org/packages/1b/b7/552d3fa9f1fc5a2d0284573e023c0b443c77e8f997b20f6d5da088e5c760/cloudtower-sdk-2.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff792961a23a4e12acc27519b61596f9b4cf2cd0692b95e424ac3fe7e2bc811d",
          "md5": "492eba4034dcc0391d9d3a8202502407",
          "sha256": "6fd554c72241959fe2c1df32c81b51e05e9bd08b9070bfae5aeddcd0e5479dbd"
        },
        "downloads": -1,
        "filename": "cloudtower_sdk-2.7.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "492eba4034dcc0391d9d3a8202502407",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 3106361,
        "upload_time": "2023-03-22T03:35:13",
        "upload_time_iso_8601": "2023-03-22T03:35:13.592941Z",
        "url": "https://files.pythonhosted.org/packages/ff/79/2961a23a4e12acc27519b61596f9b4cf2cd0692b95e424ac3fe7e2bc811d/cloudtower_sdk-2.7.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f6898ce67f69af438640b99751057884854277f6bd601704f55f387f0f429bc",
          "md5": "5d03ed9449fa3b35a6cee6f11b3df03f",
          "sha256": "27b69d013825827ef00a022a1aef655925694b159e402c56865ecda44ec1fd65"
        },
        "downloads": -1,
        "filename": "cloudtower-sdk-2.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d03ed9449fa3b35a6cee6f11b3df03f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1349642,
        "upload_time": "2023-03-22T03:35:17",
        "upload_time_iso_8601": "2023-03-22T03:35:17.021342Z",
        "url": "https://files.pythonhosted.org/packages/4f/68/98ce67f69af438640b99751057884854277f6bd601704f55f387f0f429bc/cloudtower-sdk-2.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff792961a23a4e12acc27519b61596f9b4cf2cd0692b95e424ac3fe7e2bc811d",
        "md5": "492eba4034dcc0391d9d3a8202502407",
        "sha256": "6fd554c72241959fe2c1df32c81b51e05e9bd08b9070bfae5aeddcd0e5479dbd"
      },
      "downloads": -1,
      "filename": "cloudtower_sdk-2.7.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "492eba4034dcc0391d9d3a8202502407",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 3106361,
      "upload_time": "2023-03-22T03:35:13",
      "upload_time_iso_8601": "2023-03-22T03:35:13.592941Z",
      "url": "https://files.pythonhosted.org/packages/ff/79/2961a23a4e12acc27519b61596f9b4cf2cd0692b95e424ac3fe7e2bc811d/cloudtower_sdk-2.7.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f6898ce67f69af438640b99751057884854277f6bd601704f55f387f0f429bc",
        "md5": "5d03ed9449fa3b35a6cee6f11b3df03f",
        "sha256": "27b69d013825827ef00a022a1aef655925694b159e402c56865ecda44ec1fd65"
      },
      "downloads": -1,
      "filename": "cloudtower-sdk-2.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5d03ed9449fa3b35a6cee6f11b3df03f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1349642,
      "upload_time": "2023-03-22T03:35:17",
      "upload_time_iso_8601": "2023-03-22T03:35:17.021342Z",
      "url": "https://files.pythonhosted.org/packages/4f/68/98ce67f69af438640b99751057884854277f6bd601704f55f387f0f429bc/cloudtower-sdk-2.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}