{
  "info": {
    "author": "",
    "author_email": "Li zhigang <imlzg@126.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Communications",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# 羽箭 Yujian\n\n一个异步的 RabbitMQ HTTP API 客户端。A asyncio Rabbitmq HTTP API client.\n\n![羽箭](https://github.com/imlzg/image/blob/84e4272984ab9b5becaf5c0e6c2b3e45d5c31c4a/yujian.png)\n\n写这个库的初衷是用在 Jiama 的 console 命令中，用于显示 RPC 的服务端和客户端；但找了一圈，却没有发现一个异步且支持Python3 的库，所以写了这个库。\n\n\nRabbitmq 的安装可以使用 docker 方式，具体参见[官网](https://www.rabbitmq.com/download.html)。\n```shell\nsudo docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.10-management\n```\n\n在启用“管理插件”运行后，可以在 http://server-name:15672/api/ 查看 Rabbitmq HTTP API 的内容。\n\n\n\n### 安装 Install\n\n``` shell\npip install wangong\n```\n\n\n\n### 接口 API\n\n#### yujian.api.config\nRabbitmq HTTP API 接口配置字典，键定义客户端方法名称，值定义方法调用的 API 地址、请求方法、必填项、默认值等，如：\n```python\n    'overview': {\n        'uri': '/api/overview',\n        'method': 'get',\n        'option': {\n            'columns': [\n                'rabbitmq_version',\n                'cluster_name',\n                'queue_totals.messages',\n                'object_totals.queues',\n            ]\n        },\n    },\n    'whoami': {'uri': '/api/whoami', 'method': 'get'},\n```\n你可以根据需要扩展此配置。\n\n\n\n#### client = await Client().init('http://localhost:15672')\n客户端初始化方法。\n\n\n\n#### await client.close()\n客户端销毁方法。\n\n\n\n#### await client.declare_queue(name, vhost=None, **kwargs)\n- `name` str - 队列名称\n- `vhost` str - 队列所属的虚拟机，默认为 `/`\n- `kwargs` Any - 其他可用参数，具体参见 [Rabbitmq HTTP API DOC](https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.11.2/deps/rabbitmq_management/priv/www/api/index.html)\n\n\n\n#### await client.list_queue(vhost, columns, **kwargs)\n- `vhost` str - 队列所属的虚拟机，默认为 `/`\n- `columns` list[str] - 返回结果中包含的列\n- `kwargs` Any - 其他可用参数\n\n\n\n#### await delete_queue(name, vhost)\n- `name` str - 队列名称\n- `vhost` str - 队列所属的虚拟机\n\n\n\n#### await client.declare_exchange(name, type, vhost, **kwargs)\n- `name` str - 交换机名称\n- `type` str - 交换机类型\n- `vhost` str - 交换机所属的虚拟机，默认为 `/`\n- `kwargs` Any - 其他可用参数，具体参见 [Rabbitmq HTTP API DOC](https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.11.2/deps/rabbitmq_management/priv/www/api/index.html)\n\n\n\n#### await client.declare_binding(source, routing_key, destination, destination_type, vhost, **kwargs)\n- `source` str - 绑定的源，交换机名称\n- `routing_key` str - 绑定的路由键\n- `destination` str - 绑定的终点，交换机或队列的名称\n- `destination_type` str - 绑定的重点类型，exchange 或 queue\n- `vhost` str - 绑定所属的虚拟机，默认为 `/`\n- `kwargs` Any - 其他可用参数，具体参见 [Rabbitmq HTTP API DOC](https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.11.2/deps/rabbitmq_management/priv/www/api/index.html)\n\n\n\n#### await client.publish_message(payload, routing_key, properties, exchange, vhost, **kwargs)\n- `payload` str - 消息内容\n- `routing_key` - 路由键\n- `properties` - 消息属性\n- `exchange` - 交换机\n- `vhost` - 虚拟机\n- `kwargs` - 其他可用参数，具体参见 [Rabbitmq HTTP API DOC](https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.11.2/deps/rabbitmq_management/priv/www/api/index.html)\n\n\n\n#### await client.await client.invoke(act, **kwargs)\n- `act` str - 需要执行的动作，对应 yujian.api.config 中的键\n- `kwargs` Any - 需要传递的参数\n\n\n\n#### client.__getattr__(method)\n- `method` str - 方法名称，对应 yujian.api.config 中的键\n\n借助 `__getattr__` 方法，你可以根据 [Rabbitmq HTTP API DOC](https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.11.2/deps/rabbitmq_management/priv/www/api/index.html) 的要求任意扩展 `yujian.api.config`，直接以键作为方法名在 `client` 对象上调用。\n\n\n\n### 示例 Example\n\n``` python\nfrom loguru import logger\n\nfrom yujian.api import Client\n\n\nasync def main():\n    c = await Client().init('http://192.168.56.109:15672/')\n\n    r20 = await c.whoami()\n    r21 = await c.list_exchange(columns=['name'])\n    r22 = await c.list_queue(\n        columns=['vhost', 'name', 'node', 'messages'], sort='name', sort_reverse='true'\n    )\n    r23 = await c.list_user()\n    r24 = await c.get_user(name='guest')\n    r25 = await c.get_vhost(name='%2F')\n    r26 = await c.get_permission('guest')\n    r27 = await c.get_queue('test_queue_2')\n\n    r30 = await c.invoke('declare_queue', name='test_queue')\n    r31 = await c.invoke(\n        'list_queue',\n        columns=['vhost', 'name', 'node', 'messages'],\n        sort='name',\n        sort_reverse='true',\n    )\n    r32 = await c.invoke('delete_queue', name='test_queue')\n    r33 = await c.invoke('declare_exchange', name='test_exchange', type='direct')\n    r34 = await c.invoke(\n        'get_message',\n        queue='test_queue',\n        count=5,\n        ackmode='ack_requeue_true',\n        encoding='auto',\n    )\n    r35 = await c.invoke(\n        'publish_message',\n        exchange='test_exchange',\n        payload='ko ko ko',\n        routing_key='test_queue',\n        payload_encoding='string',\n        properties={},\n    )\n    r36 = await c.invoke(\n        'declare_binding',\n        source='test_exchange',\n        destination='test_queue',\n        destination_type='queue',\n        routing_key='test_queue',\n    )\n    r37 = await c.invoke('whoami')\n\n    await c.close()\n\n\nif __name__ == '__main__':\n    config = {\n        'handlers': [\n            {\n                'sink': sys.stdout,\n                'format': '<green>{time:YYYY-MM-DD at HH:mm:ss}</green> {level} <level>{message}</level>',\n            },\n        ],\n    }\n    logger.configure(**config)\n\n    asyncio.run(main())\n\n\n```\n\n### License\n[MIT](LICENSE) © Li zhigang\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "asyncio,rabbitmq,http,api,client,management",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yujian",
    "package_url": "https://pypi.org/project/yujian/",
    "platform": null,
    "project_url": "https://pypi.org/project/yujian/",
    "project_urls": {
      "Bug Tracker": "https://github.com/liangshanpo/yujian/issues",
      "Homepage": "https://github.com/liangshanpo/yujian"
    },
    "release_url": "https://pypi.org/project/yujian/0.8.4/",
    "requires_dist": [
      "aiohttp[speedups]",
      "loguru"
    ],
    "requires_python": ">=3.10",
    "summary": "The aio rabbitmq HTTP API client.",
    "version": "0.8.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15642672,
  "releases": {
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e49dbf57914a357a4dab36f33f1c55784af2476631e3bbddd4329b9e6fa50e4",
          "md5": "50078b0639940bc82c6f515d17bf87fe",
          "sha256": "0bb08ad8d5d79a25eea5df51860b930f00fc456cfb6f442838babe443d54be00"
        },
        "downloads": -1,
        "filename": "yujian-0.8.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "50078b0639940bc82c6f515d17bf87fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 7791,
        "upload_time": "2022-11-03T14:43:48",
        "upload_time_iso_8601": "2022-11-03T14:43:48.930793Z",
        "url": "https://files.pythonhosted.org/packages/3e/49/dbf57914a357a4dab36f33f1c55784af2476631e3bbddd4329b9e6fa50e4/yujian-0.8.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cf4c3b3bbc69db08041ce08f4921fbafee3031e43f270054d6127acadcdbe2f",
          "md5": "901d989fd79c3556126d8e1f6c1c8773",
          "sha256": "8f639920fdc3529fa8cd2ea089b7281b76ab87ee7880e9409fa7e95fe6247342"
        },
        "downloads": -1,
        "filename": "yujian-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "901d989fd79c3556126d8e1f6c1c8773",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 9880,
        "upload_time": "2022-11-03T14:43:51",
        "upload_time_iso_8601": "2022-11-03T14:43:51.526221Z",
        "url": "https://files.pythonhosted.org/packages/7c/f4/c3b3bbc69db08041ce08f4921fbafee3031e43f270054d6127acadcdbe2f/yujian-0.8.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e49dbf57914a357a4dab36f33f1c55784af2476631e3bbddd4329b9e6fa50e4",
        "md5": "50078b0639940bc82c6f515d17bf87fe",
        "sha256": "0bb08ad8d5d79a25eea5df51860b930f00fc456cfb6f442838babe443d54be00"
      },
      "downloads": -1,
      "filename": "yujian-0.8.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "50078b0639940bc82c6f515d17bf87fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 7791,
      "upload_time": "2022-11-03T14:43:48",
      "upload_time_iso_8601": "2022-11-03T14:43:48.930793Z",
      "url": "https://files.pythonhosted.org/packages/3e/49/dbf57914a357a4dab36f33f1c55784af2476631e3bbddd4329b9e6fa50e4/yujian-0.8.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7cf4c3b3bbc69db08041ce08f4921fbafee3031e43f270054d6127acadcdbe2f",
        "md5": "901d989fd79c3556126d8e1f6c1c8773",
        "sha256": "8f639920fdc3529fa8cd2ea089b7281b76ab87ee7880e9409fa7e95fe6247342"
      },
      "downloads": -1,
      "filename": "yujian-0.8.4.tar.gz",
      "has_sig": false,
      "md5_digest": "901d989fd79c3556126d8e1f6c1c8773",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 9880,
      "upload_time": "2022-11-03T14:43:51",
      "upload_time_iso_8601": "2022-11-03T14:43:51.526221Z",
      "url": "https://files.pythonhosted.org/packages/7c/f4/c3b3bbc69db08041ce08f4921fbafee3031e43f270054d6127acadcdbe2f/yujian-0.8.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}