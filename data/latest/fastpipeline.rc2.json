{
  "info": {
    "author": "Shashank Yadav",
    "author_email": "shashank7.iitd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# FastPipeline\n\n<p align=\"center\">\n    <em>Persistent, easy to use, fast to code\n</em>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://shashank-yadav.github.io/fastpipeline\" target=\"_blank\">https://shashank-yadav.github.io/fastpipeline/</a>\n\n**Source Code**: <a href=\"https://github.com/shashank-yadav/fastpipeline\" target=\"_blank\">https://github.com/shashank-yadav/fastpipeline</a>\n\n---\n\nFastPipeline is a framework for creating general purpose pipeline in your ML projects. It helps in keeping track of your experiments by automatically storing all the intermediate data and source code. \n\nThe key features are:\n\n* **Persistence**: Automatically stores all the intermediate data and variables during the run.\n* **Autoreload**: Detects if something has been computed before and reloads it instead of a do-over.\n* **Accessible Intermediate Data**: The intermediate data is stored as pickle and json files, can be easily accessed and analyzed.\n* **General Purpose**: Unlike sklearn pipelines you don't need to format your data into the required X, y format.\n* **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n* **Easy**: Designed to be easy to use and learn. Less time reading docs.\n\n## Installation\n\n<div class=\"termy\">\n\n```console\n$ pip install fastpipeline\n\n---> 100%\n```\n\n</div>\n\n## Example\n\n#### Train a classifier over the (in)famous MNIST dataset\n\n* Create a file `mnist_pipeline.py`\n* Make necessary imports and create a class `DataLoader` that extends the `BaseNode` class from the fastpipeline package. This is something we'll refer to as a `Node`\n\n```Python\n# Import datasets, classifiers and performance metrics\nfrom sklearn import datasets, svm, metrics\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\n# Import pipeline and node constructs\nfrom fastpipeline.base_node import BaseNode\nfrom fastpipeline.pipeline import Pipeline\n\n# Node for loading data\nclass DataLoader(BaseNode):\n    def __init__(self):\n        super().__init__()\n\n    def run(self, input = {}):\n        # The digits dataset\n        digits = datasets.load_digits()\n\n        # To apply a classifier on this data, we need to flatten the image, to\n        # turn the data in a (samples, feature) matrix:\n        n_samples = len(digits.images)\n        data = digits.images.reshape((n_samples, -1))\n        return {\n            'data': data,\n            'target': digits.target\n        }\n```\n\n* Create another `Node` whose input is output of `DataLoader` and that trains an SVM classifier\n```Python\n# Node for training the classifier\nclass SVMClassifier(BaseNode):\n    def __init__(self, config):\n        super().__init__(config)\n        gamma = config['gamma']\n        # Create a classifier: a support vector classifier\n        self.classifier = svm.SVC(gamma=gamma)\n\n    def run(self, input):\n        data = input['data']\n        target = input['target']\n\n        # Split data into train and test subsets\n        X_train, X_test, y_train, y_test = train_test_split(\n            data, target, test_size=0.5, shuffle=False)\n\n        # We learn the digits on the first half of the digits\n        self.classifier.fit(X_train, y_train)\n\n        # Now predict the value of the digit on the second half:\n        y_pred = self.classifier.predict(X_test)\n\n        return {\n            'acc': np.mean(y_test == y_pred),\n            'y_test': y_test,\n            'y_pred': y_pred \n        }\n```\n* Now let's instantiate the nodes and create our pipeline\n```Python\nif __name__ == \"__main__\":\n    # Initialize the nodes\n    dl_node = DataLoader()\n    svm_node = SVMClassifier({'gamma': 0.01})\n\n    # Create the pipeline\n    pipeline = Pipeline('mnist', [dl_node, svm_node])\n\n    # Run pipeline and see results\n    result = pipeline.run(input={})\n    print('Accuracy: %s'%result['acc'])\n\n```\n* Run the pipeline using `$ python mnist.py`. You should see somthing like:\n\n\n![Screenshot](/docs/img/fastpipeline_mnist1.jpg)\n\nAs expected it says that this is the first run and hence for both nodes outputs are being computed by calling their `run` method. The log here shows where the data is being stored\n\n* Try running it again with the same command: `$ python mnist.py`. This time you should see something different:\n\n\n![Screenshot](/docs/img/fastpipeline_mnist2.jpg)\n\nSince all the intermediate outputs are already computed, the pipeline just reloads the data at each step instead of re-computing\n\n* Let's make a change to the value of config inside `__main__`:\n```Python\n# svm_node = SVMClassifier({'gamma': 0.01})\nsvm_node = SVMClassifier({'gamma': 0.05})\n```\n* Run the pipeline again. You'll see something like:\n\n\n![Screenshot](/docs/img/fastpipeline_mnist3.jpg)\n\nThis time it used the result from first node as-is and recomputed for second node, since we made a change to the config. \n\n**If you make any changes to the class `SVMClassifier` same thing will happen again.**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shashank-yadav/fastpipeline",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastpipeline",
    "package_url": "https://pypi.org/project/fastpipeline/",
    "platform": "",
    "project_url": "https://pypi.org/project/fastpipeline/",
    "project_urls": {
      "Homepage": "https://github.com/shashank-yadav/fastpipeline"
    },
    "release_url": "https://pypi.org/project/fastpipeline/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7.4",
    "summary": "Build time saving ML pipelines with built in autosave and reload",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8816676,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2768048b47583438b230d4d747346bf80331e549f10881fccacb4d017502b583",
          "md5": "b88c81824b996668b7d75aa70e6af1ce",
          "sha256": "357a1a0fdf8af59595cc98ec4b33fe38c0d1001b0777efdc9159f650cafb3957"
        },
        "downloads": -1,
        "filename": "fastpipeline-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b88c81824b996668b7d75aa70e6af1ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.4",
        "size": 11563,
        "upload_time": "2020-12-01T22:47:21",
        "upload_time_iso_8601": "2020-12-01T22:47:21.511687Z",
        "url": "https://files.pythonhosted.org/packages/27/68/048b47583438b230d4d747346bf80331e549f10881fccacb4d017502b583/fastpipeline-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf89e64c72cffd7c0496048ec6b357065e7830eea6f2a69ed6b08ecad17a4864",
          "md5": "144bbcfc795193e0bdf6e0f9c9ab8112",
          "sha256": "e303c32aca57f14b57c1646dc4a326b1857eb34a23097aa30aced04090f631be"
        },
        "downloads": -1,
        "filename": "fastpipeline-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "144bbcfc795193e0bdf6e0f9c9ab8112",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.4",
        "size": 9881,
        "upload_time": "2020-12-01T22:47:22",
        "upload_time_iso_8601": "2020-12-01T22:47:22.721160Z",
        "url": "https://files.pythonhosted.org/packages/bf/89/e64c72cffd7c0496048ec6b357065e7830eea6f2a69ed6b08ecad17a4864/fastpipeline-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb360e2701e3b6758cc42c27d67a167f677c4c423a7f46417589d7f12813937c",
          "md5": "04209643873e845cffcff1736729c5d4",
          "sha256": "4e72acb3976456353604c3e9b6b3398ea1e08923639c545bcab74857cf52148e"
        },
        "downloads": -1,
        "filename": "fastpipeline-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04209643873e845cffcff1736729c5d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.4",
        "size": 12280,
        "upload_time": "2020-12-03T22:42:14",
        "upload_time_iso_8601": "2020-12-03T22:42:14.544398Z",
        "url": "https://files.pythonhosted.org/packages/bb/36/0e2701e3b6758cc42c27d67a167f677c4c423a7f46417589d7f12813937c/fastpipeline-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95f19c16349e356eb4523d4ecd532235d4ecd81858166900c84ed109dd8fc2ac",
          "md5": "f383644ebba73d15207e9e3c44cf278a",
          "sha256": "01faf10d7a0a97120dfef3e7ef0c2213fa697ff2cdfe00c2b2c97d965d60dd7f"
        },
        "downloads": -1,
        "filename": "fastpipeline-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f383644ebba73d15207e9e3c44cf278a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.4",
        "size": 10586,
        "upload_time": "2020-12-03T22:42:15",
        "upload_time_iso_8601": "2020-12-03T22:42:15.761832Z",
        "url": "https://files.pythonhosted.org/packages/95/f1/9c16349e356eb4523d4ecd532235d4ecd81858166900c84ed109dd8fc2ac/fastpipeline-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb360e2701e3b6758cc42c27d67a167f677c4c423a7f46417589d7f12813937c",
        "md5": "04209643873e845cffcff1736729c5d4",
        "sha256": "4e72acb3976456353604c3e9b6b3398ea1e08923639c545bcab74857cf52148e"
      },
      "downloads": -1,
      "filename": "fastpipeline-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04209643873e845cffcff1736729c5d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.4",
      "size": 12280,
      "upload_time": "2020-12-03T22:42:14",
      "upload_time_iso_8601": "2020-12-03T22:42:14.544398Z",
      "url": "https://files.pythonhosted.org/packages/bb/36/0e2701e3b6758cc42c27d67a167f677c4c423a7f46417589d7f12813937c/fastpipeline-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95f19c16349e356eb4523d4ecd532235d4ecd81858166900c84ed109dd8fc2ac",
        "md5": "f383644ebba73d15207e9e3c44cf278a",
        "sha256": "01faf10d7a0a97120dfef3e7ef0c2213fa697ff2cdfe00c2b2c97d965d60dd7f"
      },
      "downloads": -1,
      "filename": "fastpipeline-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f383644ebba73d15207e9e3c44cf278a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.4",
      "size": 10586,
      "upload_time": "2020-12-03T22:42:15",
      "upload_time_iso_8601": "2020-12-03T22:42:15.761832Z",
      "url": "https://files.pythonhosted.org/packages/95/f1/9c16349e356eb4523d4ecd532235d4ecd81858166900c84ed109dd8fc2ac/fastpipeline-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}