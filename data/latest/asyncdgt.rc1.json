{
  "info": {
    "author": "Niklas Fiekas",
    "author_email": "niklas.fiekas@tu-clausthal.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Topic :: Games/Entertainment :: Board Games",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "asyncdgt: Communicate asynchronously with DGT boards\n====================================================\n\nasyncdgt uses asyncio to communicate asynchronously with a DGT electronic\nchess board.\n`View reference documentation <http://pythonhosted.org/asyncdgt/#reference-documentation>`_.\n\n.. image:: https://badge.fury.io/py/asyncdgt.svg\n    :target: https://pypi.python.org/pypi/asyncdgt\n\n.. image:: https://travis-ci.org/niklasf/python-asyncdgt.svg\n       :target: https://travis-ci.org/niklasf/python-asyncdgt\n\nExample\n-------\n\nCreate an event loop and a connection to the DGT board.\n\n.. code:: python\n\n    import asyncio\n\n    loop = asyncio.get_event_loop()\n    dgt = asyncdgt.auto_connect([\"/dev/ttyACM*\"], loop)\n\nRegister some `pyee <https://github.com/jfhbrook/pyee>`__ event handlers. They\nwill be called whenever a board gets connected, disconnected or the position\nchanged.\n\n.. code:: python\n\n    @dgt.on(\"connected\")\n    def on_connected(port):\n        print(\"Board connected to {0}!\".format(port))\n\n    @dgt.on(\"disconnected\")\n    def on_disconnected():\n        print(\"Board disconnected!\")\n\n    @dgt.on(\"board\")\n    def on_board(board):\n        print(\"Position changed:\")\n        print(board)\n        print()\n\nGet some information outside of an event handler using the coroutine\n``get_version()``.\n\n.. code:: python\n\n    print(\"Version:\", loop.run_until_complete(dgt.get_version()))\n\n\nRun the event loop.\n\n.. code:: python\n\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt:\n        pass\n    finally:\n        dgt.close()\n        loop.close()\n\nSee ``asyncdgt/__main__.py`` for the complete example. Run with\n``python -m asyncdgt /dev/ttyACM0``.\n\nHardware\n--------\n\nTested with the following boards:\n\n* DGT e-Board 3.1\n* DGT e-Board 3.1 Bluetooth\n\nClocks:\n\n* DGT Clock 3000\n\nDependencies\n------------\n\n* Python 3.4\n* `pyee <https://github.com/jfhbrook/pyee>`__\n* `pyserial <http://pyserial.sourceforge.net/>`_\n\n``pip install -r requirements.txt``\n\nRelated projects\n----------------\n\n* `python-chess <https://github.com/niklasf/python-chess>`_,\n  a general purpose chess library.\n\n* `picochess <http://www.picochess.org/>`_,\n  a standalone chess computer for DGT boards. Some of the DGT protocol handling\n  has been shamelessly extracted from their code.\n\nLicense\n-------\n\npython-asyncdtg is licensed under the GPL3. See the ``LICENSE.txt`` file for\nthe full license text.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/asyncdgt/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/niklasf/python-asyncdgt",
    "keywords": "chess dgt",
    "license": "GPL3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "asyncdgt",
    "package_url": "https://pypi.org/project/asyncdgt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/asyncdgt/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/niklasf/python-asyncdgt"
    },
    "release_url": "https://pypi.org/project/asyncdgt/0.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Communicate asynchronously with DGT boards",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1720977,
  "releases": {
    "0.0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}