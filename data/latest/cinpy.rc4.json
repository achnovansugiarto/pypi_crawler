{
  "info": {
    "author": "Johannes Fischer",
    "author_email": "<aulasparticularesdealemaosp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "\n# You have no clue about C/C++, but want to boost Python using C/C++ code? Try this!\n\n\n\n**cinpy** is made for people who never coded in C/C++, but want to use C/C++ functions/algorithms found somewhere on the internet (GitHub, Stack Overflow, ChatGPT …) in their Python code to speed things up.\n\n\n\n### This module is not for massive frameworks, only for small scripts/code snippets. It is very simple and straightforward to use.\n\n\n\n#### pip install cinpy\n\n\n\n## Please install:\n\n\n\nMSVC ..... C++ x64/x86 build tools from: \n\n[https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&channel=Release&version=VS2022&source=VSLandingPage&passive=false&cid=2030](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&channel=Release&version=VS2022&source=VSLandingPage&passive=false&cid=2030)\n\n\n\n#### Localize the following files (Version number might vary) and copy their path:\n\n\n\nvcvarsall_bat = r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\"\n\n\n\ncl_exe = r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\"\n\n\n\nlink_exe = r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\"\n\n\n\n\n\n### Examples\n\n\n\n\n\n```python\n\n\n\n\n\nfrom cinpy import CreateCppDll\n\n\n\nvariable_for_function_creation = (\n\n    r\"!CT_DATA_DTYPE!_!CT_DATA_DTYPE2!_!C_FUNCTION_NAME!_!CT_DATA_DTYPE3!\"\n\n)\n\nappc = CreateCppDll(\n\n    cfunctioname=\"cppradixsort\",\n\n    cfunction=rf\"\"\"\n\n!DTYPE_EXPLANATIONC!\n\n__declspec(dllexport) void {variable_for_function_creation}\n\n(!C_DATA_DTYPE! * indatav1,size_t size, \n\n!C_DATA_DTYPE2! * indatav2, \n\n!C_DATA_DTYPE3! * outdatav )\n\n{{\n\n   std::vector<!C_DATA_DTYPE!> v(indatav1, \n\n   indatav1 + size);\n\n   concurrency::parallel_radixsort(begin(v), end(v));\n\n   std::copy(v.begin(), v.begin()+size, outdatav);\n\n}}\n\n\"\"\",\n\n    samedtypes=(\"!C_DATA_DTYPE!\", \"!C_DATA_DTYPE3!\"),\n\n    modulename=\"radixsortcpp\",\n\n    variable_for_function_creation=variable_for_function_creation,\n\n    cheader=\"\"\"\n\n    //#include <iostream>\n\n    //#include <stdio.h>\n\n    //#include <algorithm>    // std::replace_if\n\n    #include <vector>       // std::vector\n\n    //#include <functional> \n\n    //#include <conio.h>\n\n    #include <ppl.h>\n\n\n\n    \"\"\",\n\n    cfooter=\"\",\n\n    ignored_dtypes1=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes2=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes3=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    vcvarsall_bat=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\",\n\n    cl_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\",\n\n    link_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\",\n\n    compilerflags=(\"/std:c++17\", \"/Ferelease\", \"/EHsc\", \"/MT\", \"/O2\", \"/bigobj\"),\n\n)\n\nappc.compile_cpp_code()\n\n\n\n# compile and run\n\nfrom cinpy.radixsortcppmodule import cppradixsort\n\nimport numpy as np\n\narr1 = np.random.randint(0, 10000, 800000000)\n\narr2 = np.array([],dtype=arr1.dtype)\n\nsodi=cppradixsort(arr1,arr2,arr1.dtype)\n\n\n\nimport numpy as np\n\nfrom time import perf_counter\n\narr1 = np.random.randint(0, 10000, 800000000)\n\narr2 = np.array([],dtype=arr1.dtype)\n\nstart=perf_counter()\n\nsodi=cppradixsort(arr1,arr2,arr1.dtype)\n\nprint('c++: ', perf_counter()-start)\n\nstart=perf_counter()\n\nnp.sort(arr1)\n\nprint('numpy: ', perf_counter()-start)\n\nc++:  5.262247000000002\n\nnumpy:  36.521482199999994\n\n\n\n\n\nimport numpy as np\n\nfrom time import perf_counter\n\narr1 = np.random.randint(0, 10000, 800000000).tolist()\n\nstart=perf_counter()\n\narr1.sort()\n\nprint('python: ', perf_counter()-start)\n\npython:  158.9699383\n\n\n\n```\n\n\n\n\n\n\n\n```python\n\nfrom cinpy import CreateCppDll\n\n\n\nvariable_for_function_creation = (\n\n    r\"!CT_DATA_DTYPE!_!CT_DATA_DTYPE2!_!C_FUNCTION_NAME!_!CT_DATA_DTYPE3!\"\n\n)\n\nappc = CreateCppDll(\n\n    cfunctioname=\"cppbufferedsort\",\n\n    cfunction=rf\"\"\"\n\n!DTYPE_EXPLANATIONC!\n\n__declspec(dllexport) void {variable_for_function_creation}(!C_DATA_DTYPE! * indatav1,size_t size, !C_DATA_DTYPE2! * indatav2, !C_DATA_DTYPE3! * outdatav )\n\n{{\n\n   std::vector<!C_DATA_DTYPE!> v(indatav1, indatav1 + size);\n\n   concurrency::parallel_buffered_sort(begin(v), end(v));\n\n   std::copy(v.begin(), v.begin()+size, outdatav);\n\n}}\n\n\"\"\",\n\n    samedtypes=(\"!C_DATA_DTYPE!\", \"!C_DATA_DTYPE3!\"),\n\n    modulename=\"bufferedsortcpp\",\n\n    variable_for_function_creation=variable_for_function_creation,\n\n    cheader=\"\"\"\n\n    //#include <iostream>\n\n    //#include <stdio.h>\n\n    //#include <algorithm>    // std::replace_if\n\n    #include <vector>       // std::vector\n\n    //#include <functional> \n\n    //#include <conio.h>\n\n    #include <ppl.h>\n\n\n\n    \"\"\",\n\n    cfooter=\"\",\n\n    ignored_dtypes1=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes2=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes3=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    vcvarsall_bat=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\",\n\n    cl_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\",\n\n    link_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\",\n\n    compilerflags=(\"/std:c++17\", \"/Ferelease\", \"/EHsc\", \"/MT\", \"/O2\", \"/bigobj\"),\n\n)\n\nappc.compile_cpp_code()\n\n\n\n\"\"\"\n\n# Compile and run\n\nfrom cinpy.bufferedsortcppmodule import cppbufferedsort\n\nimport numpy as np\n\narr1 = np.random.random(8000000)\n\narr2 = np.array([],dtype=arr1.dtype)\n\n%timeit cppbufferedsort(arr1,arr2,arr1.dtype)\n\n%timeit np.sort(arr1)\n\n193 ms ± 7.74 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n568 ms ± 1.97 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\n\n\ncppbufferedsort(arr1,arr2,arr1.dtype)\n\nOut[3]:\n\narray([5.84790262e-07, 6.10106611e-07, 6.50635063e-07, ...,\n\n       9.99999442e-01, 9.99999492e-01, 9.99999790e-01])\n\n\n\nnp.sort(arr1)\n\nOut[6]:\n\narray([5.84790262e-07, 6.10106611e-07, 6.50635063e-07, ...,\n\n       9.99999442e-01, 9.99999492e-01, 9.99999790e-01])\n\n\"\"\"\n\n```\n\n\n\n\n\n\n\n```python\n\n\n\n\n\nfrom cinpy import CreateCppDll\n\n\n\nvariable_for_function_creation = (\n\n    r\"!CT_DATA_DTYPE!_!CT_DATA_DTYPE2!_!C_FUNCTION_NAME!_!CT_DATA_DTYPE3!\"\n\n)\n\nappc = CreateCppDll(\n\n    cfunctioname=\"variouscalculations\",\n\n    cfunction=rf\"\"\"\n\n!DTYPE_EXPLANATIONC!\n\n__declspec(dllexport) void {variable_for_function_creation}(!C_DATA_DTYPE! * indatav1,size_t size, !C_DATA_DTYPE2! * indatav2, !C_DATA_DTYPE3! * outdatav )\n\n{{\n\n        concurrency::parallel_for (size_t(0), size, [&](size_t u){{\n\n        outdatav[u] = indatav1[u] * indatav2[0] / indatav2[1] + indatav2[2] - indatav2[3];}});\n\n}}\n\n\"\"\",\n\n    samedtypes=(),\n\n    modulename=\"calcvarious\",\n\n    variable_for_function_creation=variable_for_function_creation,\n\n    cheader=\"\"\"\n\n    //#include <iostream>\n\n    //#include <stdio.h>\n\n    //#include <algorithm>    // std::replace_if\n\n    //#include <vector>       // std::vector\n\n    //#include <functional> \n\n    //#include <conio.h>\n\n    #include <ppl.h>\n\n\n\n    \"\"\",\n\n    cfooter=\"\",\n\n    ignored_dtypes1=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes2=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes3=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    vcvarsall_bat=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\",\n\n    cl_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\",\n\n    link_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\",\n\n    compilerflags=(\"/std:c++17\", \"/Ferelease\", \"/EHsc\", \"/MT\", \"/O2\", \"/bigobj\"),\n\n)\n\nappc.compile_cpp_code()\n\n\n\n\n\n# Compile the code and run:\n\nfrom cinpy.calcvariousmodule import variouscalculations\n\nimport numpy as np\n\ninputarray3np = np.random.randint(0, 10000000, 1000000).astype(np.float64)\n\ninputarray4np = np.array([40.2901,4.21,2.12,6.3])\n\ncp=variouscalculations(inputarray3np,inputarray4np,np.float64)\n\nnu= inputarray3np *40.2901/4.21+2.12-6.3\n\n\n\nprint(cp)\n\nprint(nu)\n\n[15388258.80463183 85115406.42555821 75231240.03558196 ...\n\n 34228493.34042756 68792824.6350119  86092819.36931117]\n\n[15388258.80463183 85115406.42555821 75231240.03558196 ...\n\n 34228493.34042756 68792824.6350119  86092819.36931117]\n\n \n\n%timeit variouscalculations(inputarray3np,inputarray4np,np.float64)\n\n2.04 ms ± 124 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n%timeit inputarray3np *40.2901/4.21+2.12-6.3\n\n10.2 ms ± 63.6 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfrom cinpy import CreateCppDll\n\n\n\nvariable_for_function_creation = (\n\n    r\"!CT_DATA_DTYPE!_!CT_DATA_DTYPE2!_!C_FUNCTION_NAME!_!CT_DATA_DTYPE3!\"\n\n)\n\nappc = CreateCppDll(\n\n    cfunctioname=\"multiplybyarray\",\n\n    cfunction=rf\"\"\"\n\n!DTYPE_EXPLANATIONC!\n\n__declspec(dllexport) void {variable_for_function_creation}(!C_DATA_DTYPE! * indatav1,size_t size, !C_DATA_DTYPE2! * indatav2, !C_DATA_DTYPE3! * outdatav )\n\n{{\n\n        concurrency::parallel_for (size_t(0), size, [&](size_t u){{\n\n        outdatav[u] = indatav1[u] * indatav2[u];}});\n\n}}\n\n\"\"\",\n\n    samedtypes=(),\n\n    modulename=\"multiplyarrays\",\n\n    variable_for_function_creation=variable_for_function_creation,\n\n    cheader=\"\"\"\n\n    //#include <iostream>\n\n    //#include <stdio.h>\n\n    //#include <algorithm>    // std::replace_if\n\n    //#include <vector>       // std::vector\n\n    //#include <functional> \n\n    //#include <conio.h>\n\n    #include <ppl.h>\n\n\n\n    \"\"\",\n\n    cfooter=\"\",\n\n    ignored_dtypes1=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes2=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes3=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    vcvarsall_bat=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\",\n\n    cl_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\",\n\n    link_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\",\n\n    compilerflags=(\"/std:c++17\", \"/Ferelease\", \"/EHsc\", \"/MT\", \"/O2\", \"/bigobj\"),\n\n)\n\nappc.compile_cpp_code()\n\n\n\n\n\n# compile and run\n\nfrom cinpy.multiplyarraysmodule import multiplybyarray\n\nimport numpy as np\n\ninputarray3np = np.random.randint(0, 1005000, 8000000).astype(np.uint64)\n\ninputarray4np = np.random.randint(0, 1022300, 8000000).astype(np.uint64)\n\n%timeit multiplybyarray(inputarray3np,inputarray4np,np.uint64)\n\n%timeit inputarray3np*inputarray4np\n\n18.1 ms ± 757 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n26.6 ms ± 163 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\n\nmultiplybyarray(inputarray3np,inputarray4np,np.uint64)\n\nOut[4]:\n\narray([218000641625, 493834462272,  38299985966, ...,  74381999748,\n\n       168393582760, 515058090867], dtype=uint64)\n\ninputarray3np*inputarray4np\n\nOut[5]:\n\narray([218000641625, 493834462272,  38299985966, ...,  74381999748,\n\n       168393582760, 515058090867], dtype=uint64)\n\n\n\n```\n\n\n\n```python\n\n\n\n\n\nfrom cinpy import CreateCppDll\n\n\n\nvariable_for_function_creation = (\n\n    r\"!CT_DATA_DTYPE!_!CT_DATA_DTYPE2!_!C_FUNCTION_NAME!_!CT_DATA_DTYPE3!\"\n\n)\n\nappc = CreateCppDll(\n\n    cfunctioname=\"multiplybynumber\",\n\n    cfunction=rf\"\"\"\n\n!DTYPE_EXPLANATIONC!\n\n__declspec(dllexport) void {variable_for_function_creation}(!C_DATA_DTYPE! * indatav1,size_t size, !C_DATA_DTYPE2! * indatav2, !C_DATA_DTYPE3! * outdatav )\n\n{{\n\n        concurrency::parallel_for (size_t(0), size, [&](size_t u){{\n\n        outdatav[u] = indatav1[u] * indatav2[0];}});\n\n}}\n\n\"\"\",\n\nsamedtypes=(),\n\n    modulename=\"mulbyonenumber\",\n\n    variable_for_function_creation=variable_for_function_creation,\n\n    cheader=\"\"\"\n\n    //#include <iostream>\n\n    //#include <stdio.h>\n\n    //#include <algorithm>    // std::replace_if\n\n    //#include <vector>       // std::vector\n\n    //#include <functional> \n\n    //#include <conio.h>\n\n    #include <ppl.h>\n\n\n\n    \"\"\",\n\n    cfooter=\"\",\n\n    ignored_dtypes1=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes2=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    ignored_dtypes3=(\n\n        \"bool\",\n\n        # \"signed char\",\n\n        # \"unsigned char\",\n\n        # \"short\",\n\n        # \"unsigned short\",\n\n        # \"int\",\n\n        # \"unsigned int\",\n\n        # \"long\",\n\n        # \"unsigned long\",\n\n        # \"long long\",\n\n        # \"unsigned long long\",\n\n        \"float\",\n\n        # \"double\",\n\n        \"long double\",\n\n        \"float complex\",\n\n        \"double complex\",\n\n        \"long double complex\",\n\n    ),\n\n    vcvarsall_bat=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\",\n\n    cl_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\",\n\n    link_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\",\n\n    compilerflags=(\"/std:c++17\", \"/Ferelease\", \"/EHsc\", \"/MT\", \"/O2\", \"/bigobj\"),\n\n)\n\nappc.compile_cpp_code()\n\n\n\n# compile and run\n\n\n\nfrom cinpy.mulbyonenumbermodule import multiplybynumber\n\nimport numpy as np\n\ninputarray3np = np.random.randint(0, 100000, 8000000).astype(np.float64)\n\ninputarray4np = np.array([2.345122],dtype=np.float64)\n\n%timeit multiplybynumber(inputarray3np,inputarray4np,np.float64)\n\n%timeit inputarray3np*inputarray4np[0]\n\n14.5 ms ± 99 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n22.1 ms ± 131 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\n\nmultiplybynumber(inputarray3np,inputarray4np,np.float64)\n\nOut[10]:\n\narray([221388.897288, 123871.689162,  40683.176456, ..., 222221.415598,\n\n        73761.122266,  69851.803892])\n\ninputarray3np*inputarray4np[0]\n\nOut[11]:\n\narray([221388.897288, 123871.689162,  40683.176456, ..., 222221.415598,\n\n        73761.122266,  69851.803892])\n\n\n\n\n\n\n\n# There is also a second version (if you need to pass more variables)\n\n\n\nfrom cinpy import CreateCppDllv2\n\n\n\ncppco = CreateCppDllv2(\n\n    modulename=\"cppsort\",\n\n    # \"module\" will be added to \"cppsort\"\n\n    # This is how to import it after compiling the code:\n\n    # from cinpy.cppsortmodule import cppradixsort\n\n    cheader=\"\"\"\n\n#include <vector>       // std::vector\n\n#include <ppl.h>\n\n\n\n\"\"\",  # Code before the functions in the .cpp file -> imports etc.\n\n    cfooter=\"\",  # Code after the functions in the .cpp file\n\n    cfunctioname=\"cppradixsort\",\n\n    # This is the name of the C++ function in Python, this is how you import it:\n\n    # from cinpy.cppsortmodule import cppradixsort\n\n    var_variations={\n\n        # cinpy creates various versions of the functions (I could not make\n\n        # templates/function overloading work with Python) Create a dict with\n\n        # all datadtypes that you want to use for each variable\n\n        \"!C_DATA_DTYPE1!\": (  # \"bool\",\n\n            \"signed char\",\n\n            \"unsigned char\",\n\n            \"short\",\n\n            \"unsigned short\",\n\n            \"int\",\n\n            \"unsigned int\",\n\n            \"long\",\n\n            \"unsigned long\",\n\n            \"long long\",\n\n            \"unsigned long long\",  # \"float\",\n\n            # \"double\",\n\n            # \"long double\",\n\n            # \"float complex\",\n\n            # \"double complex\",\n\n            # \"long double complex\",\n\n        ),\n\n        \"!C_DATA_DTYPE2!\": (\"size_t\",),\n\n        \"!C_DATA_DTYPE3!\": (  # \"bool\",\n\n            \"signed char\",\n\n            \"unsigned char\",\n\n            \"short\",\n\n            \"unsigned short\",\n\n            \"int\",\n\n            \"unsigned int\",\n\n            \"long\",\n\n            \"unsigned long\",\n\n            \"long long\",\n\n            \"unsigned long long\",  # \"float\",\n\n            # \"double\",\n\n            # \"long double\",\n\n            # \"float complex\",\n\n            # \"double complex\",\n\n            # \"long double complex\",\n\n        ),\n\n        \"!C_DATA_DTYPE4!\": (\"size_t\",),\n\n        \"!C_DATA_DTYPE5!\": (  # \"bool\",\n\n            \"signed char\",\n\n            \"unsigned char\",\n\n            \"short\",\n\n            \"unsigned short\",\n\n            \"int\",\n\n            \"unsigned int\",\n\n            \"long\",\n\n            \"unsigned long\",\n\n            \"long long\",\n\n            \"unsigned long long\",  # \"float\",\n\n            # \"double\",\n\n            # \"long double\",\n\n            # \"float complex\",\n\n            # \"double complex\",\n\n            # \"long double complex\",\n\n        ),\n\n        \"!C_DATA_DTYPE6!\": (\"size_t\",),\n\n    },\n\n    dtypemustbeequal=[(\"!C_DATA_DTYPE1!\", \"!C_DATA_DTYPE3!\", \"!C_DATA_DTYPE5!\")],\n\n    # \"!C_DATA_DTYPE1!\", \"!C_DATA_DTYPE3!\", \"!C_DATA_DTYPE5!\" will always have the same Datatype\n\n    fu=rf\"\"\"\n\n__declspec(dllexport) void variable_for_function_creation\n\n(!C_DATA_DTYPE1! * indatav1,!C_DATA_DTYPE2!  size1,\n\n!C_DATA_DTYPE3! * indatav2,!C_DATA_DTYPE4!  size2,\n\n!C_DATA_DTYPE5! * indatav3,!C_DATA_DTYPE6! size3  )\n\n{{\n\n   std::vector<!C_DATA_DTYPE1!> v(indatav1,\n\n   indatav1 + size1);\n\n   concurrency::parallel_radixsort(begin(v), end(v));\n\n   std::copy(v.begin(), v.begin()+size1, indatav3);\n\n\n\n   std::vector<!C_DATA_DTYPE1!> v2(indatav1, indatav1 + size1);\n\n   concurrency::parallel_buffered_sort(begin(v2), end(v2));\n\n   std::copy(v2.begin(), v2.begin()+size1, indatav2);\n\n\n\n\n\n}}\"\"\",\n\n    # The C++ code, use the keys in the dict for the data types, don't change the function name:  variable_for_function_creation\n\n)\n\ncppco.compile_cpp_code(\n\n    vcvarsall_bat=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\",\n\n    cl_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\cl.exe\",\n\n    link_exe=r\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\Hostx86\\x64\\link.exe\",\n\n    compilerflags=(\"/std:c++20\", \"/Ferelease\", \"/EHsc\", \"/MT\", \"/O2\", \"/bigobj\"),\n\n) # Compile the code\n\n\n\n#import the compiled code\n\n\n\nfrom cinpy.cppsortmodule import cppradixsort\n\nimport numpy as np\n\ninputarray = np.array([6,3,2,64,2,46],dtype=np.uint8)\n\nnpbufferedsort = np.zeros_like(inputarray)\n\nnpradixsort = np.zeros_like(inputarray)\n\nlen1=inputarray.size\n\nlen2=npbufferedsort.size\n\nlen3=npradixsort.size\n\n# arguments always start with v + number, data dtype should be detected automatically\n\ncppradixsort(v0=inputarray,v1=len1,v2=npbufferedsort,v3=len2,v4=npradixsort,v5=len3,)\n\nprint(inputarray)\n\nprint(npbufferedsort)\n\nprint(npradixsort)\n\n\n\n# results\n\n# [ 6  3  2 64  2 46]\n\n# [ 2  2  3  6 46 64]\n\n# [ 2  2  3  6 46 64]\n\n\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansalemaos/cinpy",
    "keywords": "c,c++,python,ctypes,numpy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cinpy",
    "package_url": "https://pypi.org/project/cinpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/cinpy/",
    "project_urls": {
      "Homepage": "https://github.com/hansalemaos/cinpy"
    },
    "release_url": "https://pypi.org/project/cinpy/0.13/",
    "requires_dist": [
      "cprinter",
      "numpy",
      "touchtouch"
    ],
    "requires_python": "",
    "summary": "C/C++ in Python for Dummies",
    "version": "0.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17020086,
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0db21ccdd480dca1c7fa65f4cb7186a6bb4ea1a23e0f1013d17e82111a5cb33e",
          "md5": "65ab49aa1d177442dbebf79bf45a155d",
          "sha256": "066e35cc9eb32b779614dbfa30fad34ac46bd471f2e4db9e6e5dfb179f4a8dcc"
        },
        "downloads": -1,
        "filename": "cinpy-0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65ab49aa1d177442dbebf79bf45a155d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25088,
        "upload_time": "2023-02-11T08:42:53",
        "upload_time_iso_8601": "2023-02-11T08:42:53.205267Z",
        "url": "https://files.pythonhosted.org/packages/0d/b2/1ccdd480dca1c7fa65f4cb7186a6bb4ea1a23e0f1013d17e82111a5cb33e/cinpy-0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a02277581f2bf35ecd16334ef274a81788bf5579b8431e0583ab73bdb6a4a3d8",
          "md5": "6efd8a6f91adb36520246dcf1a4efbbc",
          "sha256": "b12c049669e22eb68a277cd4b5698458f1bd7f99e8d2e452d30a7e6eb99990a3"
        },
        "downloads": -1,
        "filename": "cinpy-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "6efd8a6f91adb36520246dcf1a4efbbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40918,
        "upload_time": "2023-02-11T08:42:55",
        "upload_time_iso_8601": "2023-02-11T08:42:55.127563Z",
        "url": "https://files.pythonhosted.org/packages/a0/22/77581f2bf35ecd16334ef274a81788bf5579b8431e0583ab73bdb6a4a3d8/cinpy-0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c271b4b028a47cd2cd2d0f55705e5eeff08366effa2417635b2d7ddc12adeef",
          "md5": "f7949766f92d6221ae2e5c7f08ecdb59",
          "sha256": "aa4d9eaae166b4564366639be7a511f67f962bacd2f62d1c72c23461d26795fd"
        },
        "downloads": -1,
        "filename": "cinpy-0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7949766f92d6221ae2e5c7f08ecdb59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25128,
        "upload_time": "2023-02-12T11:46:49",
        "upload_time_iso_8601": "2023-02-12T11:46:49.743300Z",
        "url": "https://files.pythonhosted.org/packages/7c/27/1b4b028a47cd2cd2d0f55705e5eeff08366effa2417635b2d7ddc12adeef/cinpy-0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfac8b218d90b25fa1e83e3ebba356298f185b6c0ae5d25f41b97151c800a805",
          "md5": "5e32766eba82ceb6a0acea0f4c177ef9",
          "sha256": "19644d2d7b289cf65e2f3542164a3d94619535fd90fd542db81325d7bd2c0ef2"
        },
        "downloads": -1,
        "filename": "cinpy-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "5e32766eba82ceb6a0acea0f4c177ef9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40973,
        "upload_time": "2023-02-12T11:46:51",
        "upload_time_iso_8601": "2023-02-12T11:46:51.595479Z",
        "url": "https://files.pythonhosted.org/packages/cf/ac/8b218d90b25fa1e83e3ebba356298f185b6c0ae5d25f41b97151c800a805/cinpy-0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17377a1153422220d71f0d46fccd87ddce5da92b6141fa04ba9b90ccf1d591b0",
          "md5": "df0d0aeb6aba893ee87e5859f34cdc8b",
          "sha256": "ff0986ebfd4b0c456540ec7b1f08d9d72ad2623073ba4a179b8d2315892f7f57"
        },
        "downloads": -1,
        "filename": "cinpy-0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df0d0aeb6aba893ee87e5859f34cdc8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12825,
        "upload_time": "2023-02-16T01:12:04",
        "upload_time_iso_8601": "2023-02-16T01:12:04.135563Z",
        "url": "https://files.pythonhosted.org/packages/17/37/7a1153422220d71f0d46fccd87ddce5da92b6141fa04ba9b90ccf1d591b0/cinpy-0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69b648090f658c63ab4d1578a74fbdf3660c1cde7ec79769e75841210192dba7",
          "md5": "5fe16ffa4f39f955aa371f77cf49c6a7",
          "sha256": "83e83f6014e551dd48c7b2387e2072a345b1ffd42e76f3b74fe2f675fcabaefa"
        },
        "downloads": -1,
        "filename": "cinpy-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "5fe16ffa4f39f955aa371f77cf49c6a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13559,
        "upload_time": "2023-02-16T01:12:05",
        "upload_time_iso_8601": "2023-02-16T01:12:05.962227Z",
        "url": "https://files.pythonhosted.org/packages/69/b6/48090f658c63ab4d1578a74fbdf3660c1cde7ec79769e75841210192dba7/cinpy-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cf64960fb04dc7ddb76dcf5c658db3dd72ad1d5f6322e343680a9a1812bde1a",
          "md5": "ceaeecd78ca51e43feca33de4085ff64",
          "sha256": "832721ed7de1a2cdcf081126ce6122d7d51c1620fb99b42701b407c328c08816"
        },
        "downloads": -1,
        "filename": "cinpy-0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ceaeecd78ca51e43feca33de4085ff64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16044,
        "upload_time": "2023-02-24T22:45:47",
        "upload_time_iso_8601": "2023-02-24T22:45:47.210489Z",
        "url": "https://files.pythonhosted.org/packages/8c/f6/4960fb04dc7ddb76dcf5c658db3dd72ad1d5f6322e343680a9a1812bde1a/cinpy-0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e1549d0a3ad1921b81616a59bc437bd699db7088fa7a7c62c24d5fddc156197",
          "md5": "df10c8c130fd208f0f21a61f59a54d3c",
          "sha256": "a0df77f80bb994fc8d603ccc32a004cb23e995a5262dd1c81bd4473561db7657"
        },
        "downloads": -1,
        "filename": "cinpy-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "df10c8c130fd208f0f21a61f59a54d3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17166,
        "upload_time": "2023-02-24T22:45:49",
        "upload_time_iso_8601": "2023-02-24T22:45:49.330252Z",
        "url": "https://files.pythonhosted.org/packages/7e/15/49d0a3ad1921b81616a59bc437bd699db7088fa7a7c62c24d5fddc156197/cinpy-0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cf64960fb04dc7ddb76dcf5c658db3dd72ad1d5f6322e343680a9a1812bde1a",
        "md5": "ceaeecd78ca51e43feca33de4085ff64",
        "sha256": "832721ed7de1a2cdcf081126ce6122d7d51c1620fb99b42701b407c328c08816"
      },
      "downloads": -1,
      "filename": "cinpy-0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ceaeecd78ca51e43feca33de4085ff64",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16044,
      "upload_time": "2023-02-24T22:45:47",
      "upload_time_iso_8601": "2023-02-24T22:45:47.210489Z",
      "url": "https://files.pythonhosted.org/packages/8c/f6/4960fb04dc7ddb76dcf5c658db3dd72ad1d5f6322e343680a9a1812bde1a/cinpy-0.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e1549d0a3ad1921b81616a59bc437bd699db7088fa7a7c62c24d5fddc156197",
        "md5": "df10c8c130fd208f0f21a61f59a54d3c",
        "sha256": "a0df77f80bb994fc8d603ccc32a004cb23e995a5262dd1c81bd4473561db7657"
      },
      "downloads": -1,
      "filename": "cinpy-0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "df10c8c130fd208f0f21a61f59a54d3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17166,
      "upload_time": "2023-02-24T22:45:49",
      "upload_time_iso_8601": "2023-02-24T22:45:49.330252Z",
      "url": "https://files.pythonhosted.org/packages/7e/15/49d0a3ad1921b81616a59bc437bd699db7088fa7a7c62c24d5fddc156197/cinpy-0.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}