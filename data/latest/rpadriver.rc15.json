{
  "info": {
    "author": "SKALER / Siili Solutions",
    "author_email": "skaler-support@siili.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "RPADriver\n=========\n\nThe goal of RPADriver is to make Robot Framework a true RPA tool. This is a RPA helper library built on\nthe TOS model using ``task-object-storage`` package.\n\nRequirements\n------------\n\n* MongoDB\n* Python >3.7\n* robotframework >3 (>=3.2 for RPAListener)\n* task-object-storage\n\n\nOverview\n--------\n\nRPADriver relies on the concept of stages: Every RPA process can usually be divided to at least two stages:\n\n* Producer\n* Consumer\n\nThere is always one producer, but there might be many consumers (1... *n*). The naming convention is as follows:\n\n+--------------+----------+\n| Type         | Name     |\n+==============+==========+\n| Producer     | stage_0  |\n+--------------+----------+\n| Consumer 1   | stage_1  |\n+--------------+----------+\n| Consumer 2   | stage_2  |\n+--------------+----------+\n| Consumer *n* | stage_n  |\n+--------------+----------+\n\nProducer creates task objects, and consumers fetch them from the database for processing.\nSplitting the work into stages gives more control over the process execution enables stages to be run (and retried) in isolation.\n\nRPADriver consists of two packages:\n\n`RPALibrary`_\n    Used to implement RPA processes largely as Python code, in stage definitions that inherit from ``Producer`` and ``Consumer`` superclasses. Robot Framework acts only as a thin wrapper.\n`RPAListener`_\n    Enables RPA process stages to be defined in Robot Framework test data, while still leveraging ``TOSLibrary``.\n\nRPALibrary\n----------\n\n``RPALibrary`` is the classic library originally included as a helper with ``TOSLibrary``.\nWith this you create robot stage definition in Python code, but still have support for\nRobot Framework keywords.\n\n\nConventional project structure\n++++++++++++++++++++++++++++++\n\nConventional project structure looks like this\n\n::\n\n    .\n    ├── keywords\n    ├── libraries\n    ├── pipelines\n    │   ├── Jenkinsfile\n    │   ├── consumer.groovy\n    │   └── producer.groovy\n    ├── resources\n    │   └── settings.py\n    ├── stages\n    ├── tasks\n    │   └── main.robot\n    └── run.py\n\nwhere\n\n* ``keywords``: Robot Framework keyword files.\n* ``libraries``: module for all the Python library code.\n* ``pipelines``: Jenkins pipelines.\n* ``resources``: place to store all miscellaneous files: settings, configs, templates.\n* ``stages``: module for the stage definitions (in Python code).\n* ``tasks``: Robot Framework suites.\n* ``run.py``: startup script for the robot.\n\nThe robot control flow is ``run.py`` -> ``tasks/main.robot`` -> ``stages.StageN``.\n\n\nProducer\n--------\n\nTo build a Producer stage, you need to create a new file ``stages/Stage0.py`` with a class\ncalled ``Stage0`` inside. This class should inherit from ``Producer``.\nThe class needs at least one method: ``process_data(self)``.\nThis method is the main action to do for every data item that will become task object payload.\nOptionally, if you need to first prefetch the data into memory (e.g., into a list), you will need\nto define a method called ``preloop_action``. This will then feed ``process_data`` with data items\none at a time. When prelooping, you will need to define ``process_data`` like this: ``process_data(self, item)``,\nwhere ``item`` is one of the pre-prepared data items.\n\nCall ``Stage0.Main Loop`` from Robot Framework to start the loop action (your defined Python methods will be\ncalled automatically inside the library).\n\n\nBy inheriting from ``Producer`` you get:\n\n* Automatic task object creation.\n* Automatic looping of the data.\n* Automatic error handling.\n* Every software robot you and your team builds will follow the same conventions.\n\n\nConsumer\n--------\n\nTo build a Consumer stage, you need to create a new file ``stages/Stage1.py`` with a class\ncalled ``Stage1`` inside (the number depending on your stage number).\nThis class should inherit from ``Consumer``.\nThe class needs at least one method: ``main_action(self, to)``, where ``to`` is a task object\nfetched by the library from your MongoDB database. All you need to do is to define what to do\nfor every task object.\n\nCall ``Stage1.Main Loop`` from Robot Framework to start the loop action (your defined Python methods will be\ncalled automatically inside the library).\n\n\nBy inheriting from ``Consumer`` you get:\n\n* Automatic task object fetching.\n* Automatic error handling.\n* Every software robot you and your team builds will follow the same conventions.\n\n\nExample usage\n+++++++++++++\n\nNote that the examples here are overly simplified.\n\n\nStartup script (``run.py``):\n\n.. code-block:: python\n\n    def main():\n        return robot.run(\"tasks\")\n\n    if __name__ == '__main__':\n        sys.exit(main())\n\n\nMain Robot file definition (``tasks/main.robot``):\n\n.. code-block:: robotframework\n\n    *** Settings ***\n    Library             TOSLibrary    ${db_server}:${db_port}  ${db_name}\n    Library             ../stages/Stage0.py\n    Library             ../stages/Stage1.py\n\n    *** Tasks ***\n    Create task objects from raw data\n        [Tags]                      stage_0\n        Stage0.Main Loop            no_screenshots=True\n\n    Do action on the task objects\n        [Tags]                      stage_1\n        Stage1.Main Loop\n\n\n\nProducer stage definition (``stages/Stage0.py``):\n\n.. code-block:: python\n\n    from RPALibrary import Producer\n\n\n    class Stage0(Producer):\n\n        def preloop_action(self):\n            \"\"\"Read and preprocess an Excel worksheet.\"\"\"\n            data = self.read_excel()\n            data = self.filter_rows(data)\n            return data\n\n        def process_data(self, item):\n            \"\"\"\n            Do some some operations for every data item (e.g.\n            Excel row). This should return a dictionary.\n            The return value will be used as the payload for the task object.\n            The task objects are created automatically in ``Producer`` object.\n\n            Having ``item`` parameter in the method signature is important.\n            \"\"\"\n            item = self.reader.clean_item(item)\n            return item\n\n\n\nConsumer stage definition  (``stages/Stage1.py``)\n\n.. code-block:: python\n\n    from RPALibrary import Consumer\n\n    from .errors import SYSTEM_OFFLINE\n\n\n    class Stage1(Consumer):\n        def main_action(self, to):\n            \"\"\"The library will pass created task objects to this method.\"\"\"\n            self.do_some_complex_action_on_the_task_object(to)\n\n        def action_on_fail(self, to):\n            if to[\"last_error\"] == SYSTEM_OFFLINE:\n                self.handle_system_offline()\n            self.return_to_main_screen()\n\n\n\nYou can also call your stage methods as Robot Framework keywords with ``run_keyword``:\n\n.. code-block:: python\n\n    from robot.libraries.BuiltIn import BuiltIn\n\n    run = BuiltIn().run_keyword\n\n\n    class Stage1(Consumer):\n        def main_action(self, to):\n            run(\"Do Some Complex Action On The Task Object\", to)\n\n        def action_on_fail(self, to):\n            if to[\"last_error\"] == SYSTEM_OFFLINE:\n                run(\"Handle System Offline\")\n            run(\"Return To Main Screen\")\n\n\nRPAListener\n-----------\n\nRPAListener is a tool that adds transaction management for RPA automations, where the top-level workflow\nhas been defined natively in Robot Framework script. The library has been implemented as a\n`listener library <https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface>`_.\n\nIn the backend, the RPAListener uses Task Object Storage (TOS), meaning that it relies on MongoDB\nfor work item persistence.\n\nFor more information about TOS, see https://skaler.gitlab-siili.io/skaler-core/task-object-storage\nFor more information about Robot Framework, see http://robotframework.org.\n\n\nBackground\n----------\n\nRPA processes usually consist of sequential stages. Some stages are to be executed only once (batch).\nOthers are transactional, where identical steps are performed to a number of work items in a\nrepetitive manner. RPAListener automates the management of task iterations and work items during\ntransactional stages.\n\n\nUsage\n-----\n\nAfter installation, RPAListener can be imported in the Settings-table.\n\n::\n\n    *** Settings ***\n    Library    RPAListener    ${db_server}:${db_port}    ${db_name}\n\nDatabase connection details (address, credentials) are passed to the library using\nthe `TOS convention <https://intelligent_automation.gitlab-siili.io/tos/#usage>`_.\n\n\nTask Tags\n---------\n\nRPAListener requires special tags to be set on the robot tasks in order to use them as RPA process stages.\nEach task should be assigned a tag prefixed with ``stage_`` depending on its sequence in the process,\n\nTransactional stages, whose steps are to be repeated for each applicable work item,\nare marked with ``repeat`` tag.\n\nExample process consisting of one batch stage followed by one transactional stage:\n\n::\n\n    *** Tasks ***\n    Initial Stage\n        [Tags]    stage_0\n        Log    This is performed only once\n\n    Process transactions A\n        [Tags]    stage_1    repeat\n        Log    Processing item '${ITEM_ID}'\n\n\nWorking with items\n------------------\n\nIn transactional stages, RPAListener sets the workable items to the robot scope for each task iteration.\nThe work item's payload contents can be accessed in a dictionary named ``${ITEM}``.\nThe MongoDB ObjectId of the work item can be accessed as ``{ITEM_ID}`` (str).\nThe name of the dictionary variable can be overriden using the ``item_variable_name`` upon library import.\nFor example, if you want to refer to the work item as ``&{PERSON}`` in your script:\n\n::\n\n    Library     RPAListener    db_server=localhost    db_name=newtos    item_variable_name=PERSON\n\n\nRPAListener exposes ``Update Current Item`` keyword, that can be used in a transactional stage\nto update the payload contents of the currently worked item, e.g. adding a key-value pair.\nThe keyword is used similarly to ``Set To Dictionary`` from the standard library ``Collections``,\nexcept that the targeted dictionary is omitted:\n\n::\n\n    | Update Current Item | my_new_key=my_new_value | another_key=another_value |\n    | Update Current Item | my_new_key | my_new_value | another_key | another_value |\n\n\nSetups and Teardowns\n--------------------\n\nDefault test setups and teardowns, (i.e. those set in ``*** Settings ***``) are run for each stage.\nAny setups/teardowns set on the robot task with ``[Setup]`` and ``[Teardown]`` override their\ndefault counterparts.\n\n``Suite Setup/Teardown`` set in ``*** Settings ***`` are run as per normal,\ni.e. only at the beginning and end of the robot execution.\n\n\nTask Naming\n-----------\n\nTask iterations are named according to the worked item. The name determines appears\nin the robot log file. By default, RPAListener uses the MongoDB Object-id as task name,\nbut any field from the payload can be used by specifying ``item_identifier_field``\nupon library import. For example, in order to use the values from field ``payload.myField``,\nRPAListener should be imported as follows:\n\n::\n\n    Library     RPAListener    db_server=localhost    db_name=newtos    item_identifier_field=myField\n\n\nSkipping Tasks\n--------------\n\nBesides passing or failing, processing of a work item can result in the item being skipped.\nThis is done when the item violates a predefined business rule, and hence should not be processed further.\nWhen skipped, keyword and task execution ends for that work item, and its status is changed to `skip`.\n\nSkipping is perfomed with the keyword `Run Keyword And Skip On Failure`, used in conjunction with a\nkeyword whose failure indicates an invalid work item. For example:\n\n::\n\n    | Run Keyword And Skip On Failure | Should Be True | ${invoice_amount} > 0 |\n    | ...    msg=Invoice is for a zero amount, no action required |\n\n\nError Handling (experimental)\n-----------------------------\n\nWhen processing of a work item fails, robot behaviour depends on the type of error raised.\nRPAListener exposes keywords ``raise_business_exception`` and ``raise_application_exception``.\nThe first argument for both keywords is the error message. By default, execution continues\ndespite of a failing work item. If an application exception is raised with argument ``fatal``\nset to ``True``, robot execution is stopped, for example:\n\n::\n\n    | Raise Application Exception | Something went terribly wrong | fatal=${TRUE} |\n\nIt is possible to assign a stage-specific error handling keyword, to be run upon failure.\nThis is done by tagging the robot task with ``error_handler=[Keyword Name]``, for example:\n\n::\n\n    *** Tasks ***\n    My RPA Stage\n        [Tags]    stage_1    repeat    error_handler=Handle My Error\n            # ...\n\nTask timeouts can be used as per normal robot convention. The timeout specified on a stage\nis the maximum time allowed for working one item in said stage. If the timeout is exceeded,\nthe item is failed and error handler is called.\n\n\nAvailable keywords/methods\n--------------------------\n\nSee the full `API documentation <https://skaler.gitlab-siili.io/skaler-core/rpadriver/api.html>`_.\n\n\nFor developers\n--------------\n\nRelease a new version by running:\n\n.. code-block:: bash\n\n  scripts/build.sh release\n\n\nYou can also install the `whl` package found in the `dist` directory with\n\n.. code-block:: bash\n\n  pip install <package-name>.whl\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rpadriver",
    "package_url": "https://pypi.org/project/rpadriver/",
    "platform": null,
    "project_url": "https://pypi.org/project/rpadriver/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/rpadriver/1.2.1/",
    "requires_dist": [
      "task-object-storage (~=1.2.0)",
      "packaging",
      "Pillow (>=9.3.0)"
    ],
    "requires_python": "",
    "summary": "RPADriver package.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16122892,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59faae0c6ff946b52815ba1d7beb7287c5050ef23f461a7c074eb0e2fc59544f",
          "md5": "6484ffa5e91f65b6f4eea06a641ae447",
          "sha256": "75b0e72558953932cbec043ae43b208d87a58fca00c3d5687ab74900c28b6f9e"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6484ffa5e91f65b6f4eea06a641ae447",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29127,
        "upload_time": "2021-02-22T10:25:32",
        "upload_time_iso_8601": "2021-02-22T10:25:32.577549Z",
        "url": "https://files.pythonhosted.org/packages/59/fa/ae0c6ff946b52815ba1d7beb7287c5050ef23f461a7c074eb0e2fc59544f/rpadriver-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "833182e27ce2286d9b69b2450587c53c2b447e0636161566edb004e1b62b90b0",
          "md5": "c8507c41087ae45f35ac9a14fb90528d",
          "sha256": "a91bda06b55c2a13c81e30a1a1617ea960e633158752af04075385438d74a164"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8507c41087ae45f35ac9a14fb90528d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27412,
        "upload_time": "2020-10-29T12:44:24",
        "upload_time_iso_8601": "2020-10-29T12:44:24.298785Z",
        "url": "https://files.pythonhosted.org/packages/83/31/82e27ce2286d9b69b2450587c53c2b447e0636161566edb004e1b62b90b0/rpadriver-1.0.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ff516741b7e94d8ed38d6f835a061d120b0ce586c04d75318043cf5f23c580d",
          "md5": "11dedf0f0a3a31c5c217f8f67beeba99",
          "sha256": "865f948ed092b8f125ff492b2aaecd9dc992736f7f5a2f5b2873e5a36811f7b9"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11dedf0f0a3a31c5c217f8f67beeba99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28357,
        "upload_time": "2020-11-12T12:24:30",
        "upload_time_iso_8601": "2020-11-12T12:24:30.843805Z",
        "url": "https://files.pythonhosted.org/packages/6f/f5/16741b7e94d8ed38d6f835a061d120b0ce586c04d75318043cf5f23c580d/rpadriver-1.0.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09937e9f292fd706fff71aa26f928e41eaf0a340f766b08bbe192c41bc7cf7d7",
          "md5": "3c431f682897b8443a6a0a79cd728ca8",
          "sha256": "77ae3c29586f892a3d3769c688dd252724d8658a148f39a6877f8105af34e647"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c431f682897b8443a6a0a79cd728ca8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28671,
        "upload_time": "2020-11-13T07:59:01",
        "upload_time_iso_8601": "2020-11-13T07:59:01.594772Z",
        "url": "https://files.pythonhosted.org/packages/09/93/7e9f292fd706fff71aa26f928e41eaf0a340f766b08bbe192c41bc7cf7d7/rpadriver-1.0.0a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0a5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86d7bdca05f2a6bfd86b7e87040feb45df126a7ef034b08983f5f5248adb2b4e",
          "md5": "6a243c9f600aab1541851f7698c4bd2e",
          "sha256": "639eee23d6528c116d2725232e596717e79eb00bebfeb5a6818a290db574b767"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.0a5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a243c9f600aab1541851f7698c4bd2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34456,
        "upload_time": "2021-01-05T12:06:39",
        "upload_time_iso_8601": "2021-01-05T12:06:39.007363Z",
        "url": "https://files.pythonhosted.org/packages/86/d7/bdca05f2a6bfd86b7e87040feb45df126a7ef034b08983f5f5248adb2b4e/rpadriver-1.0.0a5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb52e3a94bf484dd886a27096eeb5e6dcf3e26c223fed78f6dc44d442ccf106b",
          "md5": "37feb0ed895a0f0eb517cd227444730c",
          "sha256": "491c4fc12d6fb4a08af6ae3e48556867d1165c8c15191dd73f38ef4560669053"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37feb0ed895a0f0eb517cd227444730c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34514,
        "upload_time": "2021-01-05T14:59:39",
        "upload_time_iso_8601": "2021-01-05T14:59:39.350069Z",
        "url": "https://files.pythonhosted.org/packages/eb/52/e3a94bf484dd886a27096eeb5e6dcf3e26c223fed78f6dc44d442ccf106b/rpadriver-1.0.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29388dc96230160acfdbe970ea701f99e1ac6382915944e8ad3ad9b619c3160b",
          "md5": "d30e06d742ace81f09f7dc13eb1c6db8",
          "sha256": "5bc879be3a40c145aee0bc2e94e2b187a1ca22a29d4ea781085aff087af9dacb"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d30e06d742ace81f09f7dc13eb1c6db8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29215,
        "upload_time": "2021-07-27T11:18:10",
        "upload_time_iso_8601": "2021-07-27T11:18:10.013598Z",
        "url": "https://files.pythonhosted.org/packages/29/38/8dc96230160acfdbe970ea701f99e1ac6382915944e8ad3ad9b619c3160b/rpadriver-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2dd8a2f4cf44dd8db23454451cf5ffd9666a26d1f801f4bd154cffe0149b18b",
          "md5": "9612d830a2ed70a7c636de0d1670d2fb",
          "sha256": "efaaddf69150582284849c359fbc1e69a20cab4d36e271eed6629c88e8966fed"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9612d830a2ed70a7c636de0d1670d2fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29183,
        "upload_time": "2021-03-16T06:57:14",
        "upload_time_iso_8601": "2021-03-16T06:57:14.256986Z",
        "url": "https://files.pythonhosted.org/packages/c2/dd/8a2f4cf44dd8db23454451cf5ffd9666a26d1f801f4bd154cffe0149b18b/rpadriver-1.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a157fda3c75e5fb872e53744b4b12c8f0a03609346f71afa8b345261e31d22",
          "md5": "7c028636c24c52219efd47a23067c4ba",
          "sha256": "0f89ce2ef8d9110b56cef2621c7c26c68c91f59f4168869569ee3126b08f6dd3"
        },
        "downloads": -1,
        "filename": "rpadriver-1.0.1a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c028636c24c52219efd47a23067c4ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29232,
        "upload_time": "2021-05-28T09:01:04",
        "upload_time_iso_8601": "2021-05-28T09:01:04.290391Z",
        "url": "https://files.pythonhosted.org/packages/66/a1/57fda3c75e5fb872e53744b4b12c8f0a03609346f71afa8b345261e31d22/rpadriver-1.0.1a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb612a12fa3d42145176023251c0e585f6cb553c6f82fb53a24d9ca6793ba945",
          "md5": "bfc13cf03a00fc25826d0c00279c1e8b",
          "sha256": "368e7e0f0bbd6662e5e635045ca3d8db636a03e28e9796a666823d33a53f97e1"
        },
        "downloads": -1,
        "filename": "rpadriver-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfc13cf03a00fc25826d0c00279c1e8b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29526,
        "upload_time": "2022-04-13T08:14:38",
        "upload_time_iso_8601": "2022-04-13T08:14:38.073872Z",
        "url": "https://files.pythonhosted.org/packages/bb/61/2a12fa3d42145176023251c0e585f6cb553c6f82fb53a24d9ca6793ba945/rpadriver-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2013cdd93025b41ff94d0e3ee0474bce8c30e0aceddb6c6d741a0f8282ac6bb",
          "md5": "a13c66a9e20158799cc5783e4342627a",
          "sha256": "d9a456dae79b987f0d81b2d4d1e2cf213b77e5112430641c59b82ee32835ccdb"
        },
        "downloads": -1,
        "filename": "rpadriver-1.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a13c66a9e20158799cc5783e4342627a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29443,
        "upload_time": "2021-09-22T10:00:49",
        "upload_time_iso_8601": "2021-09-22T10:00:49.996235Z",
        "url": "https://files.pythonhosted.org/packages/b2/01/3cdd93025b41ff94d0e3ee0474bce8c30e0aceddb6c6d741a0f8282ac6bb/rpadriver-1.1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ecb6462a34af00bbf43cdb9a945c56a3699af983d4a53f35b5599769f75e597",
          "md5": "5da7f0171a6fa9fa091c5bcf0f3efb6b",
          "sha256": "a767f79ad99c990e759545107455b19d6248fea4009b126071d0750d4298e668"
        },
        "downloads": -1,
        "filename": "rpadriver-1.1.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5da7f0171a6fa9fa091c5bcf0f3efb6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29445,
        "upload_time": "2021-12-01T07:03:18",
        "upload_time_iso_8601": "2021-12-01T07:03:18.603001Z",
        "url": "https://files.pythonhosted.org/packages/8e/cb/6462a34af00bbf43cdb9a945c56a3699af983d4a53f35b5599769f75e597/rpadriver-1.1.0a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b729159c606fd309abced0b029def001d7dfb6e1754a1a1dede1d4763776e919",
          "md5": "0ab8e73db18f7f358abdf495c87928aa",
          "sha256": "127849e22519ead52a18a1de8a03530e9ad01ee81f7663ef06819f3cdf94aa3a"
        },
        "downloads": -1,
        "filename": "rpadriver-1.1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ab8e73db18f7f358abdf495c87928aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29514,
        "upload_time": "2022-03-11T11:56:26",
        "upload_time_iso_8601": "2022-03-11T11:56:26.803772Z",
        "url": "https://files.pythonhosted.org/packages/b7/29/159c606fd309abced0b029def001d7dfb6e1754a1a1dede1d4763776e919/rpadriver-1.1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a72e3b03dbbd46bbf223ba69e053c54ebd3350bed1df4d45dfb63cc8ee3abce",
          "md5": "558f354a5bc3b039d086c1b4143c49a2",
          "sha256": "8f3de89cde23c1d1dd6603dc9c669f3c47e015f4e9af66fc8582b4ee3b05a35d"
        },
        "downloads": -1,
        "filename": "rpadriver-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "558f354a5bc3b039d086c1b4143c49a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29617,
        "upload_time": "2022-08-04T11:10:21",
        "upload_time_iso_8601": "2022-08-04T11:10:21.162782Z",
        "url": "https://files.pythonhosted.org/packages/3a/72/e3b03dbbd46bbf223ba69e053c54ebd3350bed1df4d45dfb63cc8ee3abce/rpadriver-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca02d9ff63903d646a9afd0281a0b89e54fc52301115f2f149a05aaf0584b55a",
          "md5": "3a545afa337edc9bf7b65cfae7de5659",
          "sha256": "719d6f91eca082954628b627ddf1c21c471a531c7b09c854387945e8209adf1a"
        },
        "downloads": -1,
        "filename": "rpadriver-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a545afa337edc9bf7b65cfae7de5659",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29632,
        "upload_time": "2022-12-16T07:30:33",
        "upload_time_iso_8601": "2022-12-16T07:30:33.584986Z",
        "url": "https://files.pythonhosted.org/packages/ca/02/d9ff63903d646a9afd0281a0b89e54fc52301115f2f149a05aaf0584b55a/rpadriver-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca02d9ff63903d646a9afd0281a0b89e54fc52301115f2f149a05aaf0584b55a",
        "md5": "3a545afa337edc9bf7b65cfae7de5659",
        "sha256": "719d6f91eca082954628b627ddf1c21c471a531c7b09c854387945e8209adf1a"
      },
      "downloads": -1,
      "filename": "rpadriver-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a545afa337edc9bf7b65cfae7de5659",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29632,
      "upload_time": "2022-12-16T07:30:33",
      "upload_time_iso_8601": "2022-12-16T07:30:33.584986Z",
      "url": "https://files.pythonhosted.org/packages/ca/02/d9ff63903d646a9afd0281a0b89e54fc52301115f2f149a05aaf0584b55a/rpadriver-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}