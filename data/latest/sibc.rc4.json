{
  "info": {
    "author": "JJChiDguez",
    "author_email": "chidoys@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# **S**upersingular **I**sogeny-**B**ased **C**ryptographic constructions\n\n<img align=\"center\" src=\"https://github.com/JJChiDguez/sibc/blob/master/sibc-logo.png\">\n\nThis repository includes a python-code library named **sibc**, which allows a user-friendly\ninterface to deal with some isogeny-based cryptographic primitive.\n\nThe current version of the **sibc** library has integrated SIDH, CSIDH, and B-SIDH schemes using traditional\nand velusqrt formulae on Montgomery curve x-only projective coordinates; in particular, **sibc** allows\nworking with prime and quadratic field classes that permit operating field elements as integers.\nAdditionally, the cryptographic primitives are implemented in constant-time concerning the number\nof field operations, where a constant-time procedure refers to its running time does not depend on\nthe input or it possibly does from randomness as CSIDH does.\n\nIt is worthing to mention, the library is constantly extended, and some signature schemes will be integrated into the **sibc** library.\n\nThe **sibc** library aims to allow isogeny-contributors for building new primitives with a constant-time nature.\n\n\n> :warning: There is a new devastating attack against *SIDH* and *SIKE* by Castryck & Decru. Currently, there are two public implementations of the Castryck-Decru attack:\n> \n> 1. [**Magma** code](https://homes.esat.kuleuven.be/~wcastryc/) from [Castryck-Decru preprint](https://eprint.iacr.org/2022/975), and\n> 2. [**Sagemath** code](https://github.com/jack4818/Castryck-Decru-SageMath) translation from the Magma code, by Giacomo Pope.\n>\n> :warning: The attack does extend to B-SIDH and B-SIKE.\n> \n> :exclamation: The attack does not apply to CSIDH.\n\n## Installation \n\nInstall the `sibc` module which provides the `sibc` program:\n\n```\nsudo python3 setup.py install\n```\n\n## For development:\nFor this installation method, any further modification in sibc directory will be reflect when running sibc library.\n\n```\n# Installing required package\n# Before running the following commands, ensure you have the lastest version of pip\npip3 install dh click numpy progress matplotlib networkx stdeb setuptools-scm setuptools\n\n# only pip3 install cpuinfo is missing for macOS (to be fixed in coming versions)\npip3 install pytest pytest-xdist\n\n# Installing the library\nsudo pip3 install -e .\n```\n\n### Debian package build\n\nTo build a package for Debian or Ubuntu, we suggest the use of stdeb:\n\n```\nsudo apt install -y dh-python python3-click python3-progress\\\n  python3-numpy python3-matplotlib python3-networkx \\\n  python3-stdeb python3-setuptools-scm python3-setuptools python3-cpuinfo\npython3 setup.py bdist_deb\nsudo dpkg -i deb_dist/python3-sibc_0.0.1-1_all.deb\n```\n\n## Usage \nThe syntax compilation can be viewed by running one of the following three commands:\n```bash\n# Corresponding with the key-exchange protocol\nsibc --help\n\n# Corresponding with benchmarking (only for CSIDH, which has a variable\n# running-time cost independent from the key)\nsibc csidh-bench\n\n# Corresponding with the costs of KPs (Kernel Point computation), xISOG\n# (isogeny construction), and xEVAL (isogeny evaluation)\nsibc csidh-test\n```\n\nUsage for the `sibc` tool:\n```bash\n\nUsage: sibc [OPTIONS] COMMAND [ARGS]...\n\n    ,-~~-.___.          \n   / |  '     \\        \n  (  )         0        \n   \\_/-, ,----'         \n      ====           // \n     /  \\-'~;    /~~~(O)\n    /  __/~|   /       |\n  =(  _____| (_________|\n\nOptions:\n  -p, --prime [p434|p503|p610|p751|p253|p255|p247|p237|p257|p512|p1024|p1792|p2048|p4096|p5120|p6144|p8192|p9216]\n                                  [default: p512]\n  -f, --formula [tvelu|svelu|hvelu]\n                                  [default: hvelu]\n  -a, --algorithm [sidh|sike|csidh|bsidh|bsike]\n                                  [default: csidh]\n  -s, --style [wd1|wd2|df]        [default: df]\n  -e, --exponent [1|2|3|4|5|6|7|8|9|10]\n                                  [default: 10]\n  -m, --multievaluation           [default: False]\n  -c, --curvemodel [edwards|montgomery]\n                                  [default: montgomery]\n  -b, --benchmark INTEGER         [default: 128]\n  -t, --tuned                     [default: False]\n  -u, --uninitialized             [default: False]\n  -v, --verbose                   Not the kind of verbosity you might expect\n                                  [default: False]\n  --version                       Show the version and exit.\n  --help                          Show this message and exit.\n\nCommands:\n  bsidh-main                   Random instance example of a key-exchange\n  bsidh-precompute-parameters  Precomputation of tuned velusqrt parameters\n  bsidh-precompute-strategy    Precomputation of optimal strategies\n  bsidh-test                   GF(pÂ²)-operation cost of kps, xisog, and...\n  csidh-bench                  Average GF(p)-operation cost of a GAE\n  csidh-bounds                 Greedy-based search of optimal exponents\n  csidh-dh                     Derive shared secret key from CSIDH sk,...\n  csidh-genkey                 Generate random CSIDH secret key\n  csidh-header                 Optimal strategies as C-code headers files\n  csidh-ijk                    Velusqrt parameters as C-code headers files\n  csidh-main                   Random instance example of a key-exchange\n  csidh-precompute-parameters  Precomputation of tuned velusqrt parameters\n  csidh-precompute-strategy    Precomputation of optimal strategies\n  csidh-pubkey                 Derive CSIDH public key from CSIDH secret key\n  csidh-sdacs                  SDACs as C-code headers files\n  csidh-test                   GF(p)-operation cost of kps, xisog, and xeval\n  decaps                       (B)SIKE decapsulation\n  encaps                       (B)SIKE encapsulation\n  keygen                       Generate random (B)SIKE secret and public...\n  plot-strategy                draw strategy graphs as a subgraph...\n  print-timing\n  sidh-precompute-strategy     Precomputation of optimal strategies\n```\n\n## SIDH cryptographic API\n\n`CSIDH`, `BSIDH`, `SIDH`, `SIKE`, and `BSIKE` objects are available from the `sibc` package and module.\n\nAutomatically generated documentation is available with pydoc after `sibc` is\ninstalled:\n```\npydoc3 sibc.csidh\npydoc3 sibc.bsidh\npydoc3 sibc.sidh\n```\n\n### Command Line Interface: examples\n\n```bash\n# CSIDH\nsk_a=\"$(sibc csidh-genkey)\"\npk_a=\"$(echo \"$sk_a\"|sibc csidh-pubkey -)\"\nsk_b=\"$(sibc csidh-genkey)\"\npk_b=\"$(echo \"$sk_b\"|sibc csidh-pubkey -)\"\nss_a=\"$(echo \"$sk_a\"|sibc csidh-dh - \"$pk_b\")\"\nss_b=\"$(echo \"$sk_b\"|sibc csidh-dh - \"$pk_a\")\"\necho $ss_a\necho $ss_b\n\n# SIKE\nsk=\"$(sibc -a sidh -p p434 keygen)\"\npk3=`echo \"${sk}\" | tail -n1`\nck=\"$(echo \"$pk3\"|sibc -a sidh -p p434 encaps -)\"\nc0=`echo \"${ck}\" | head -1`\nc1=`echo \"${ck}\" | tail -2 | head -1`\nK=`echo \"${ck}\" | tail -n1`\nK_=\"$(echo \"$sk\"|sibc -a sidh -p p434 decaps - \"$c0 $c1\")\"\necho $K\necho $K_\n\n# BSIKE\nsk=\"$(sibc -a bsidh -p p253 keygen)\"\npk3=`echo \"${sk}\" | tail -n1`\nck=\"$(echo \"$pk3\"|sibc -a bsidh -p p253 encaps -)\"\nc0=`echo \"${ck}\" | head -1`\nc1=`echo \"${ck}\" | tail -2 | head -1`\nK=`echo \"${ck}\" | tail -n1`\nK_=\"$(echo \"$sk\"|sibc -a bsidh -p p253 decaps - \"$c0 $c1\")\"\necho $K\necho $K_\n```\n\n### Basic shared secret generation example with CSIDH\n```python3\nfrom sibc.csidh import CSIDH, default_parameters\ncsidh = CSIDH(**default_parameters)\n\n# alice generates a key\nalice_secret_key = csidh.secret_key()\nalice_public_key = csidh.public_key(alice_secret_key)\n\n# bob generates a key\nbob_secret_key = csidh.secret_key()\nbob_public_key = csidh.public_key(bob_secret_key)\n\n# if either alice or bob use their secret key with the other's respective\n# public key, the resulting shared secrets are the same\nshared_secret_alice = csidh.dh(alice_secret_key, bob_public_key)\nshared_secret_bob = csidh.dh(bob_secret_key, alice_public_key)\n\n# Alice and bob produce an identical shared secret\nassert shared_secret_alice == shared_secret_bob\n```\n\n### Basic shared secret generation example with BSIDH\n```python3\nfrom sibc.bsidh import BSIDH, default_parameters\nbsidh = BSIDH(**default_parameters)\nsk_a, pk_a = bsidh.keygen_a()\nsk_b, pk_b = bsidh.keygen_b()\nss_a, ss_b = bsidh.derive_a(sk_a, pk_b), bsidh.derive_b(sk_b, pk_a)\nss_a == ss_b\n```\n\n### Basic example with BSIKE (BSIDH + key encapsulation)\n```python3\nfrom sibc.bsidh import BSIKE, default_parameters\nbsike = BSIKE(**default_parameters)\ns, sk3, pk3 = bsike.KeyGen()\nc, K = bsike.Encaps(pk3)\nK_ = bsike.Decaps((s, sk3, pk3), c)\nK == K_\n\nbsike255 = BSIKE('montgomery', 'p255', 'hvelu', True, False, False, False)\ns, sk3, pk3 = bsike255.KeyGen()\nc, K = bsike255.Encaps(pk3)\nK_ = bsike255.Decaps((s, sk3, pk3), c)\nK == K_\n```\n\n### Basic shared secret generation example with SIDH\n```python3\nfrom sibc.sidh import SIDH, default_parameters\nsidh = SIDH(**default_parameters)\nsk_a, pk_a = sidh.keygen_a()\nsk_b, pk_b = sidh.keygen_b()\nss_a, ss_b = sidh.dh_a(sk_a, pk_b), sidh.dh_b(sk_b, pk_a)\nss_a == ss_b\n```\n\n### Basic example with SIKE (SIDH + key encapsulation)\n```python3\nfrom sibc.sidh import SIKE, default_parameters\nsike = SIKE(**default_parameters)\ns, sk3, pk3 = sike.KeyGen()\nc, K = sike.Encaps(pk3)\nK_ = sike.Decaps((s, sk3, pk3), c)\nK == K_\n\nsike503 = SIKE('montgomery', 'p503', False, False)\ns, sk3, pk3 = sike503.KeyGen()\nc, K = sike503.Encaps(pk3)\nK_ = sike503.Decaps((s, sk3, pk3), c)\nK == K_\n```\n\n## Adding new primes\n\nThe field characteristic `p` should be stored in directory `data/sop/`, and\nCSIDH and BSIDH have different structures (see below):\n\n```bash\n# CSIDH format (here p = cofactor * l_1 * .... l_n - 1)\ncofactor l_1 l_2 ... l_n\n\n# BSIDH format\nHexadecimal representation of the prime p\n4 l_1 l_2 ... l_n\nc e_1 e_2 ... e_n\nl'_1 l'_2 ... l'_m\ne'_1 e'_2 ... e'_m\n\n# SIDH format: p = 2^{e_2} * 3^{e_3} - 1\ne_2 e_3\n```\n\nFor the case of BSIDH, `M := (4^c * l_1^{e_1} * l_2^{e_2} * ... * l_n^{e_n})`\nmust divide `(p + 1)`, and `N := (l'_1^{e'_1} * l'_2^{e'_2} * ... *\nl'_n^{e'_n})` must divide `(p-1)`. Additionally, the order-`M` generators `PA`,\n`QA` and `PQA := PA - QA` should be stored in directory `gen/` as projective\nx-coordinate points. Similarly, the order-`N` generators `PB`, `QB` and `PQB :=\nPB - QB` also should be stored it the same directory. Both 3-tuples of points\nmust be stored in a single file with the following syntax:\n\n```bash\nRe(x(PA)) Im(x(PA)) Re(x(QA)) Im(x(QA)) Re(x(PQA)) Im(x(PQA))\nRe(x(PB)) Im(x(PB)) Re(x(QB)) Im(x(QB)) Re(x(PQB)) Im(x(PQB))\n```\n\nwhere `Re(X)` and `Im(X)` denote the real and imaginary parts of X with respect\nto `F_p[i]/(i^2 + 1)`, respectively. Moreover, all the above twelve integers\nshould be stored in hexadecimal.\n\nFor SIDH, generators have order either `M=2^{e_2}` or `N=3^{e_3}`.\n\n## Examples\n\nWe summarize some examples of runs of the `sibc` tool as follows:\n\n```bash\n# CSIDH\n# A single random intances of a key exchange\nsibc -p p512 -f hvelu -a csidh -s df -e 10 csidh-main\nsibc -p p512 -f hvelu -a csidh -s df -e 10 -m csidh-main\nsibc -p p512 -f hvelu -a csidh -s df -e 10 -t csidh-main\nsibc -p p512 -f hvelu -a csidh -s df -e 10 -m -t csidh-main\n# Average GF(p)-operation cost of 64 random instances\nsibc -p p512 -f hvelu -a csidh -s df -m -e 10 -b 64 csidh-bench\nsibc -p p512 -f hvelu -a csidh -s df -m -e 10 -b 64 -m csidh-bench\nsibc -p p512 -f hvelu -a csidh -s df -m -e 10 -b 64 -t csidh-bench\nsibc -p p512 -f hvelu -a csidh -s df -m -e 10 -b 64 -t -m csidh-bench\n# GF(p)-operation cost of kps, xisog, and xeval blocks\nsibc -p p512 -f hvelu -a csidh csidh-test\nsibc -p p512 -f hvelu -a csidh -m csidh-test\nsibc -p p512 -f hvelu -a csidh -t csidh-test\nsibc -p p512 -f hvelu -a csidh -t -m csidh-test\n\n# BSIDH\n# A single random intances of a key exchange\nsibc -p p253 -f hvelu -a bsidh bsidh-main\nsibc -p p253 -f hvelu -a bsidh -m bsidh-main\nsibc -p p253 -f hvelu -a bsidh -t bsidh-main\nsibc -p p253 -f hvelu -a bsidh -t -m bsidh-main\n# GF(pÂ²)-operation cost of kps, xisog, and xeval blocks\nsibc -p p253 -f tvelu -a bsidh bsidh-test\nsibc -p p253 -f svelu -a bsidh bsidh-test\nsibc -p p253 -f hvelu -a bsidh -t bsidh-test\n```\n\nRemark, our implementation allows us to plot each optimal strategy required (only tested in Linux machines):\n\n```bash\n# CSIDH\nsibc -p p512 -f tvelu -a csidh -s df -e 10 plot-strategy\nsibc -p p512 -f svelu -a csidh -s wd1 -e 10 plot-strategy\nsibc -p p512 -f hvelu -a csidh -s wd2 -e 5 plot-strategy\n\n# BSIDH\nsibc -p p253 -f hvelu -a bsidh plot-strategy\nsibc -p p253 -f hvelu -a bsidh -m plot-strategy\nsibc -p p253 -f hvelu -a bsidh -t -m plot-strategy\n\n# SIDH\nsibc -p p434 -a sidh plot-strategy\nsibc -p p503 -a sidh plot-strategy\nsibc -p p610 -a sidh plot-strategy\nsibc -p p751 -a sidh plot-strategy\n```\n\nAdditionally, one can created files with extension `.h` that includes all the\nrequired variables in a the sdacs, strategies, and velusqrt (at least for CSIDH\nimplementations).\n\n```bash\n# Suitable bounds search with e = 10.\nsibc -a csidh -p p512 -s df -f hvelu -e 10 -u csidh-bounds # The greedy-based algorithm on a large searching space, it could take hours or even days!: option -u is required\n# SDACs (options -s and -e do not affect the output)\nsibc -p p512 -f hvelu -a csidh -s df -e 10 csidh-sdacs\n# Optimal sizes of I, J, and K required in velusqrt (options -s and -e do not affect the output)\nsibc -p p512 -f hvelu -a csidh -s df -e 10 -t csidh-ijk  # option -t is required\n# Optimal strategies\nsibc -p p512 -f hvelu -a csidh -s df -e 10 -t csidh-header\n```\n\n## BSIDH primes\nCurrently only `p253`, `p255`, `p247`, `p237`, and `p257` are implemented and tested in the current API.\nExtending this to other primes is straight-forward.\n\n## SIDH primes\nCurrently only `p434`, `p503`, `p610`, and `p751` are implemented and tested in the current API.\nExtending this to other primes is straight-forward.\n\n## Precomputing data for a new prime instances\n\nGenerating new data can be easily done by adding and running to either `misc/create-csidh-data.sh` or\n`misc/create-bsidh-data.sh`. The new prime number description should b stored as previously mentioned.\n\n```bash\nbash misc/create-csidh-data.sh\nbash misc/create-bsidh-data.sh\n```\n\nAlso, you can do it manually by doing something as follows:\n\n```bash\n# CSIDH\nsibc-precompute-sdacs -p p512 -a csidh # SDACs\nsibc -p p512 -f hvelu -a csidh -m -t -u csidh-precompute-parameters # Tuned velusqrt parameters\nsibc -p p512 -f hvelu -a csidh -s df -m -u csidh-precompute-strategy # Strategies\n# BSIDH\nsibc-precompute-sdacs -p p253 -a bsidh # SDACs\nsudo sibc -p p253 -f svelu -a bsidh -u bsidh-precompute-parameters # Tuned velusqrt parameters: the option -u is required\nsudo sibc -p p253 -f svelu -a bsidh -u bsidh-precompute-strategy # Strategies\n# SIDH\nsibc -p p434 -a sidh -u sidh-precompute-strategy # Strategies\nsibc -p p503 -a sidh -u sidh-precompute-strategy # Strategies\nsibc -p p610 -a sidh -u sidh-precompute-strategy # Strategies\nsibc -p p751 -a sidh -u sidh-precompute-strategy # Strategies\n```\n\nFurthermore, you can create tests by running `bash misc/create-tests.sh` and `bash misc/test-cli.sh`\n(only `CSIDH`, `BSIKE`, and `SIKE` are handled by now).\n\nIf either a new prime instace or primitive is included, then you should add it to misc directory.\nNew primitives require new bash scripts. SIDH instances are simple, only one configuration (for now),\nand thus you can omit adding them in `misc` directory.\n \n## Remarks\n\nThe primes labeled as `p253`, `p255`, `p247`, and `p237` correspond with the examples 2, 3, 5, and 6 from\n[B-SIDH paper](https://eprint.iacr.org/2019/1145), respectively. In particular,  `p257` denotes the\nprime number given in [velusqrt paper](https://eprint.iacr.org/2020/341). The field airthmetic is\ncentered on primes `p = 3 mod 4`. Multiplying and squaring in `GF(pÂ²) = GF(p)[u]/(u^2 + 1)` have a\ncost of 3 and 2 multiplications in `GF(p)`, respectively.\n\nThe current implementation does not have implemented the B-SIDH key validation, it will be included\nin the next library version.\n\n### Adding new prime instances\nWhen adding a new isogeny-based instances (the prime number, and public parameters) should be included\nin parameter list of `sibc/__main__.py` (click option `-p`, `--prime`) by modifying `sibc/constants.py`\n(updating the lists/dictionary `[csidh/bsidh]_primes`). If a new primitive is included, then you need\nto update `sibc/__main__.py` by extending the click options `-p` (`--prime`) and `-a` (`--algorithm`),\nand also to include its branch in `sibc/montgomery/curve.py` and `sibc/montgomery/isogeny.py` files.\n\n## Changes\n\nSignificant changes are listed in the [CHANGELOG](CHANGELOG.md) file. Future integrations/modifications\nare listed in the [TODOLIST](TODOLIST.md) file.\n\n## Authors\n\n1. **_Gora Adj_** <gora.adj@udl.cat>, <gora.adj@gmail.com>;\n2. **_JesÃºs-Javier Chi-DomÃ­nguez_** <jesus.dominguez@tii.ae>, <chidoys@gmail.com>; and\n3. **_Francisco RodrÃ­guez-HenrÃ­quez_** <francisco@cs.cinvestav.mx>.\n\n### Main cryptographer contributors (collaborators):\n\n1. **_Jorge Ch&aacute;vez-Saab_** <jchavez@computacion.cs.cinvestav.mx>, <jorgechavezsaab@gmail.com>\n\n### Logo creator contributor\n\n1. **_Fabiola-Argentina Hern&aacute;ndez-Torres_** <farg.cls@outlook.com>\n\n### User-friendly interface contributors\n\n1. Jacob Appelbaum <j.appelbaum@tue.nl>; and\n2. Leif Ryge <leif@synthesize.us>.\n\n\n\nAll contributors are listed in the [CONTRIBUTORS](CONTRIBUTORS) file.\n\n### How to cite this library\n\n```latex\n@misc{sibc,\n  author = {{Gora Adj} and {Jes\\'us-Javier Chi-Dom\\'inguez} and {Francisco Rodr\\'iguez-Henr\\'iquez}},\n  title = {{SIBC} Python library},\n  year = {2021},\n  howpublished = {\\url{https://github.com/JJChiDguez/sibc/}}\n}\n```\n\n## License\n\nThis project is licensed under the GNU general public license - see the\n[LICENSE](LICENSE) file for details.\n\n## Funding\n\nThis project has initially received funding from the European Research Council (ERC) under the\nEuropean Union's Horizon 2020 research and innovation programme (grant agreement No 804476),\nwhile the second author was doing a postdoctoral research stay in Tampere University.\n\nThe third author received partial funds from the Mexican Science council CONACyT project 313572.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JJChiDguez/sibc",
    "keywords": "csidh,bsidh,sidh,sike,sibc,encryption",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sibc",
    "package_url": "https://pypi.org/project/sibc/",
    "platform": null,
    "project_url": "https://pypi.org/project/sibc/",
    "project_urls": {
      "Homepage": "https://github.com/JJChiDguez/sibc"
    },
    "release_url": "https://pypi.org/project/sibc/1.0.4/",
    "requires_dist": [
      "click",
      "matplotlib",
      "networkx",
      "numpy",
      "progress"
    ],
    "requires_python": ">=3.7",
    "summary": "Supersingular Isogeny-Based Cryptography constructions: currently, csidh, bsidh, sidh, and sike are implemented by using traditional and velusqrt formulae on Montgomery curve x-only projective coordinates",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14664116,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5375149b02d8218f43caee4c0a20c4b9769fd9fbe4d9024a4d573df8fbc32f82",
          "md5": "196e16b513e9fe1df2ba3bae08b8721e",
          "sha256": "e765423666701bea749b516634dd5ac2a95f0444488dd42bb77796b002d3e53b"
        },
        "downloads": -1,
        "filename": "sibc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "196e16b513e9fe1df2ba3bae08b8721e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 167944,
        "upload_time": "2021-04-03T20:16:52",
        "upload_time_iso_8601": "2021-04-03T20:16:52.735140Z",
        "url": "https://files.pythonhosted.org/packages/53/75/149b02d8218f43caee4c0a20c4b9769fd9fbe4d9024a4d573df8fbc32f82/sibc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5894d550fa0607aafd6a01b6a9d9f733492be3fe66113c2adc4a7f6cdf1e865e",
          "md5": "2eaa0af6a56ef954b088549589db5158",
          "sha256": "9f1e1f2c7f08a3a0225073a4ad4b0806cfae9ee3e02f56cd4351b9ef7a0a64c3"
        },
        "downloads": -1,
        "filename": "sibc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2eaa0af6a56ef954b088549589db5158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 111997,
        "upload_time": "2021-04-03T20:16:55",
        "upload_time_iso_8601": "2021-04-03T20:16:55.132286Z",
        "url": "https://files.pythonhosted.org/packages/58/94/d550fa0607aafd6a01b6a9d9f733492be3fe66113c2adc4a7f6cdf1e865e/sibc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "065090bc45e01983fab0cc05f99e4b78f424670a4be7b3a08974f909ac1a39d9",
          "md5": "f1862192c903f8b8a12818c66b3937f6",
          "sha256": "e08c1d2fdaa833d6615782c08f6b98a7e85cb27eb920848aba61a4ef6c577fa2"
        },
        "downloads": -1,
        "filename": "sibc-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1862192c903f8b8a12818c66b3937f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 879695,
        "upload_time": "2021-08-05T08:00:08",
        "upload_time_iso_8601": "2021-08-05T08:00:08.018397Z",
        "url": "https://files.pythonhosted.org/packages/06/50/90bc45e01983fab0cc05f99e4b78f424670a4be7b3a08974f909ac1a39d9/sibc-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65746ecd4d81290da431b2aa50baf903b392a307d52295bfd2026b81d4622267",
          "md5": "fc1e0d8da189ea65f8902944e293f0d1",
          "sha256": "eac92d720efbaf4b6dac55864e9e68ad7b4011596631ed38082db4a7f25b746f"
        },
        "downloads": -1,
        "filename": "sibc-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc1e0d8da189ea65f8902944e293f0d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 206877,
        "upload_time": "2021-08-05T08:00:10",
        "upload_time_iso_8601": "2021-08-05T08:00:10.695845Z",
        "url": "https://files.pythonhosted.org/packages/65/74/6ecd4d81290da431b2aa50baf903b392a307d52295bfd2026b81d4622267/sibc-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c497824096fdc49a48b56e9aae1d8a6e1cd503b2f0cf8a2023175eec24f0d17a",
          "md5": "582a669778711d8d9e30a7fbe9c5930a",
          "sha256": "92956e25e4e3dc216344ad0ba661503e043af335b20a4b9d1dbd3714670cf240"
        },
        "downloads": -1,
        "filename": "sibc-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "582a669778711d8d9e30a7fbe9c5930a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 879730,
        "upload_time": "2021-11-09T06:09:08",
        "upload_time_iso_8601": "2021-11-09T06:09:08.086062Z",
        "url": "https://files.pythonhosted.org/packages/c4/97/824096fdc49a48b56e9aae1d8a6e1cd503b2f0cf8a2023175eec24f0d17a/sibc-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d050426115da974b638dc7c5e396eedd576d2192b5f0bc666c40963dbc49d988",
          "md5": "1f632c0d841c43e840d122d8ab89737c",
          "sha256": "eb6a11263fcfa63cfb055e31bdcd7742cdfc984d931a9210556d25aa18ea822b"
        },
        "downloads": -1,
        "filename": "sibc-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1f632c0d841c43e840d122d8ab89737c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 207080,
        "upload_time": "2021-11-09T06:09:11",
        "upload_time_iso_8601": "2021-11-09T06:09:11.358753Z",
        "url": "https://files.pythonhosted.org/packages/d0/50/426115da974b638dc7c5e396eedd576d2192b5f0bc666c40963dbc49d988/sibc-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da7a32d2d6f754b5e17b4461ed1901dde4270203984bd6a65c5e572593bfe550",
          "md5": "2bb74614894787b845a5e2bdc33bb062",
          "sha256": "a48d58eeae7e00e0fe40f8fc4bde78f1e69473859c410b94423093265e082155"
        },
        "downloads": -1,
        "filename": "sibc-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bb74614894787b845a5e2bdc33bb062",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 882612,
        "upload_time": "2022-08-05T09:42:19",
        "upload_time_iso_8601": "2022-08-05T09:42:19.348511Z",
        "url": "https://files.pythonhosted.org/packages/da/7a/32d2d6f754b5e17b4461ed1901dde4270203984bd6a65c5e572593bfe550/sibc-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30e50c493f381e848219b5adc0dd83eba94225597a0e6a79ed7569ff01bf24e0",
          "md5": "edaaab54d521be4aa9b3ea7877ed48a1",
          "sha256": "177f6079ee336c952b636a9a01bde7688ba9aba17d2d56289cd0de56b541b37a"
        },
        "downloads": -1,
        "filename": "sibc-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "edaaab54d521be4aa9b3ea7877ed48a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 212590,
        "upload_time": "2022-08-05T09:42:21",
        "upload_time_iso_8601": "2022-08-05T09:42:21.260545Z",
        "url": "https://files.pythonhosted.org/packages/30/e5/0c493f381e848219b5adc0dd83eba94225597a0e6a79ed7569ff01bf24e0/sibc-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da7a32d2d6f754b5e17b4461ed1901dde4270203984bd6a65c5e572593bfe550",
        "md5": "2bb74614894787b845a5e2bdc33bb062",
        "sha256": "a48d58eeae7e00e0fe40f8fc4bde78f1e69473859c410b94423093265e082155"
      },
      "downloads": -1,
      "filename": "sibc-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2bb74614894787b845a5e2bdc33bb062",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 882612,
      "upload_time": "2022-08-05T09:42:19",
      "upload_time_iso_8601": "2022-08-05T09:42:19.348511Z",
      "url": "https://files.pythonhosted.org/packages/da/7a/32d2d6f754b5e17b4461ed1901dde4270203984bd6a65c5e572593bfe550/sibc-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30e50c493f381e848219b5adc0dd83eba94225597a0e6a79ed7569ff01bf24e0",
        "md5": "edaaab54d521be4aa9b3ea7877ed48a1",
        "sha256": "177f6079ee336c952b636a9a01bde7688ba9aba17d2d56289cd0de56b541b37a"
      },
      "downloads": -1,
      "filename": "sibc-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "edaaab54d521be4aa9b3ea7877ed48a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 212590,
      "upload_time": "2022-08-05T09:42:21",
      "upload_time_iso_8601": "2022-08-05T09:42:21.260545Z",
      "url": "https://files.pythonhosted.org/packages/30/e5/0c493f381e848219b5adc0dd83eba94225597a0e6a79ed7569ff01bf24e0/sibc-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}