{
  "info": {
    "author": "Stitch, wintersrd, SteveDMurphy, degreed-data-engineering, Firebend",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# pipelinewise-tap-mssql\n\n[Singer](https://www.singer.io/) tap that extracts data from a [mssql](https://www.mssql.com/) database and produces JSON-formatted data following the [Singer spec](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md).\n\nThis is a fork from a [PipelineWise](https://transferwise.github.io/pipelinewise) compatible tap connector to add a log_based replication method for use with [Change Tracking](https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-tracking-sql-server).\n\n## How to use it\n\nThe recommended method of running this tap is to use it from [PipelineWise](https://transferwise.github.io/pipelinewise). When running it from PipelineWise you don't need to configure this tap with JSON files and most of things are automated. Please check the related documentation at [Tap mssql](https://transferwise.github.io/pipelinewise/connectors/taps/mssql.html)\n\nThis tap has also been tested with [Meltano](https://meltano.com) and can be configured as part of their ELT for the DataOps era.\n\nIf you want to run this [Singer Tap](https://singer.io) independently please read further.\n\n## Usage\n\nThis section dives into basic usage of `tap-mssql` by walking through extracting\ndata from a table. It assumes that you can connect to and read from a mssql\ndatabase.\n\n### Install\n\nFirst, make sure Python 3 is installed on your system or follow these\ninstallation instructions for [Mac](http://docs.python-guide.org/en/latest/starting/install3/osx/) or\n[Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04).\n\nIt's recommended to use a virtualenv:\n\n```bash\n  python3 -m venv venv\n  pip install pipelinewise-tap-mssql\n```\n\nor\n\n```bash\n  python3 -m venv venv\n  . venv/bin/activate\n  pip install --upgrade pip\n  pip install .\n```\n\n### Have a source database\n\nThere's some important business data siloed in this mssql database -- we need to\nextract it. Here's the table we'd like to sync:\n\n```\nmssql> select * from example_db.animals;\n+----|----------|----------------------+\n| id | name     | likes_getting_petted |\n+----|----------|----------------------+\n|  1 | aardvark |                    0 |\n|  2 | bear     |                    0 |\n|  3 | cow      |                    1 |\n+----|----------|----------------------+\n3 rows in set (0.00 sec)\n```\n\n### Create the configuration file\n\nCreate a config file containing the database connection credentials, e.g.:\n\n```json\n{\n  \"host\": \"localhost\",\n  \"database\": \"db\",\n  \"port\": \"3306\",\n  \"user\": \"root\",\n  \"password\": \"password\",\n  \"include_schemas_in_destination_stream_name\": true\n}\n```\n\nThese are the same basic configuration properties used by the mssql command-line\nclient (`mssql`).\n\n### Discovery mode\n\nThe tap can be invoked in discovery mode to find the available tables and\ncolumns in the database:\n\n```bash\n$ tap-mssql --config config.json --discover\n\n```\n\nA discovered catalog is output, with a JSON-schema description of each table. A\nsource table directly corresponds to a Singer stream.\n\n```json\n{\n  \"streams\": [\n    {\n      \"tap_stream_id\": \"example_db-animals\",\n      \"table_name\": \"animals\",\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"inclusion\": \"available\",\n            \"type\": [\n              \"null\",\n              \"string\"\n            ],\n            \"maxLength\": 255\n          },\n          \"id\": {\n            \"inclusion\": \"automatic\",\n            \"minimum\": -2147483648,\n            \"maximum\": 2147483647,\n            \"type\": [\n              \"null\",\n              \"integer\"\n            ]\n          },\n          \"likes_getting_petted\": {\n            \"inclusion\": \"available\",\n            \"type\": [\n              \"null\",\n              \"boolean\"\n            ]\n          }\n        }\n      },\n      \"metadata\": [\n        {\n          \"breadcrumb\": [],\n          \"metadata\": {\n            \"row-count\": 3,\n            \"table-key-properties\": [\n              \"id\"\n            ],\n            \"database-name\": \"example_db\",\n            \"selected-by-default\": false,\n            \"is-view\": false,\n          }\n        },\n        {\n          \"breadcrumb\": [\n            \"properties\",\n            \"id\"\n          ],\n          \"metadata\": {\n            \"sql-datatype\": \"int(11)\",\n            \"selected-by-default\": true\n          }\n        },\n        {\n          \"breadcrumb\": [\n            \"properties\",\n            \"name\"\n          ],\n          \"metadata\": {\n            \"sql-datatype\": \"varchar(255)\",\n            \"selected-by-default\": true\n          }\n        },\n        {\n          \"breadcrumb\": [\n            \"properties\",\n            \"likes_getting_petted\"\n          ],\n          \"metadata\": {\n            \"sql-datatype\": \"tinyint(1)\",\n            \"selected-by-default\": true\n          }\n        }\n      ],\n      \"stream\": \"animals\"\n    }\n  ]\n}\n\n```\n\n### Field selection\n\nIn sync mode, `tap-mssql` consumes the catalog and looks for tables and fields\nhave been marked as _selected_ in their associated metadata entries.\n\nRedirect output from the tap's discovery mode to a file so that it can be\nmodified:\n\n```bash\n$ tap-mssql -c config.json --discover > properties.json\n```\n\nThen edit `properties.json` to make selections. In this example we want the\n`animals` table. The stream's metadata entry (associated with `\"breadcrumb\": []`)\ngets a top-level `selected` flag, as does its columns' metadata entries. Additionally,\nwe will mark the `animals` table to replicate using a `FULL_TABLE` strategy. For more,\ninformation, see [Replication methods and state file](#replication-methods-and-state-file).\n\n```json\n[\n  {\n    \"breadcrumb\": [],\n    \"metadata\": {\n      \"row-count\": 3,\n      \"table-key-properties\": [\n        \"id\"\n      ],\n      \"database-name\": \"example_db\",\n      \"selected-by-default\": false,\n      \"is-view\": false,\n      \"selected\": true,\n      \"replication-method\": \"FULL_TABLE\"\n    }\n  },\n  {\n    \"breadcrumb\": [\n      \"properties\",\n      \"id\"\n    ],\n    \"metadata\": {\n      \"sql-datatype\": \"int(11)\",\n      \"selected-by-default\": true,\n      \"selected\": true\n    }\n  },\n  {\n    \"breadcrumb\": [\n      \"properties\",\n      \"name\"\n    ],\n    \"metadata\": {\n      \"sql-datatype\": \"varchar(255)\",\n      \"selected-by-default\": true,\n      \"selected\": true\n    }\n  },\n  {\n    \"breadcrumb\": [\n      \"properties\",\n      \"likes_getting_petted\"\n    ],\n    \"metadata\": {\n      \"sql-datatype\": \"tinyint(1)\",\n      \"selected-by-default\": true,\n      \"selected\": true\n    }\n  }\n]\n```\n\n### Sync mode\n\nWith a properties catalog that describes field and table selections, the tap can be invoked in sync mode:\n\n```bash\n$ tap-mssql -c config.json --properties properties.json\n```\n\nMessages are written to standard output following the Singer specification. The\nresultant stream of JSON data can be consumed by a Singer target.\n\n```json\n{\"value\": {\"currently_syncing\": \"example_db-animals\"}, \"type\": \"STATE\"}\n\n{\"key_properties\": [\"id\"], \"stream\": \"animals\", \"schema\": {\"properties\": {\"name\": {\"inclusion\": \"available\", \"maxLength\": 255, \"type\": [\"null\", \"string\"]}, \"likes_getting_petted\": {\"inclusion\": \"available\", \"type\": [\"null\", \"boolean\"]}, \"id\": {\"inclusion\": \"automatic\", \"minimum\": -2147483648, \"type\": [\"null\", \"integer\"], \"maximum\": 2147483647}}, \"type\": \"object\"}, \"type\": \"SCHEMA\"}\n\n{\"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"ACTIVATE_VERSION\"}\n\n{\"record\": {\"name\": \"aardvark\", \"likes_getting_petted\": false, \"id\": 1}, \"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"RECORD\"}\n\n{\"record\": {\"name\": \"bear\", \"likes_getting_petted\": false, \"id\": 2}, \"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"RECORD\"}\n\n{\"record\": {\"name\": \"cow\", \"likes_getting_petted\": true, \"id\": 3}, \"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"RECORD\"}\n\n{\"stream\": \"animals\", \"version\": 1509133344771, \"type\": \"ACTIVATE_VERSION\"}\n\n{\"value\": {\"currently_syncing\": \"example_db-animals\", \"bookmarks\": {\"example_db-animals\": {\"initial_full_table_complete\": true}}}, \"type\": \"STATE\"}\n\n{\"value\": {\"currently_syncing\": null, \"bookmarks\": {\"example_db-animals\": {\"initial_full_table_complete\": true}}}, \"type\": \"STATE\"}\n```\n\n## Replication methods and state file\n\nIn the above example, we invoked `tap-mssql` without providing a _state_ file\nand without specifying a replication method. The three ways to replicate a given\ntable are `FULL_TABLE`, `INCREMENTAL`, and `LOG_BASED`.\n\n### Full Table\n\nFull-table replication extracts all data from the source table each time the tap\nis invoked.\n\n### Incremental\n\nIncremental replication works in conjunction with a state file to only extract\nnew records each time the tap is invoked. This requires a replication key to be\nspecified in the table's metadata as well.\n\n### Log Based\n\nLog based replication works in conjunction with a state file to extract\nnew and changed records that have been recorded by SQL Server Change Tracking each time the tap is invoked. This requires change tracking to be enabled on the source database as well as each table to be replicated with this method. The initial sync with this method will default to full table, and log based replication will occur on subsequent runs.\n\n#### Examples\n\nLet's sync the `animals` table again, but this time using incremental\nreplication. The replication method and replication key are set in the\ntable's metadata entry in properties file:\n\n```json\n{\n  \"streams\": [\n    {\n      \"tap_stream_id\": \"example_db-animals\",\n      \"table_name\": \"animals\",\n      \"schema\": { ... },\n      \"metadata\": [\n        {\n          \"breadcrumb\": [],\n          \"metadata\": {\n            \"row-count\": 3,\n            \"table-key-properties\": [\n              \"id\"\n            ],\n            \"database-name\": \"example_db\",\n            \"selected-by-default\": false,\n            \"is-view\": false,\n            \"replication-method\": \"INCREMENTAL\",\n            \"replication-key\": \"id\"\n          }\n        },\n        ...\n      ],\n      \"stream\": \"animals\"\n    }\n  ]\n}\n```\n\nWe have no meaningful state so far, so just invoke the tap in sync mode again\nwithout a state file:\n\n```bash\n$ tap-mssql -c config.json --properties properties.json\n```\n\nThe output messages look very similar to when the table was replicated using the\ndefault `FULL_TABLE` replication method. One important difference is that the\n`STATE` messages now contain a `replication_key_value` -- a bookmark or\nhigh-water mark -- for data that was extracted:\n\n```json\n{\"type\": \"STATE\", \"value\": {\"currently_syncing\": \"example_db-animals\"}}\n\n{\"stream\": \"animals\", \"type\": \"SCHEMA\", \"schema\": {\"type\": \"object\", \"properties\": {\"id\": {\"type\": [\"null\", \"integer\"], \"minimum\": -2147483648, \"maximum\": 2147483647, \"inclusion\": \"automatic\"}, \"name\": {\"type\": [\"null\", \"string\"], \"inclusion\": \"available\", \"maxLength\": 255}, \"likes_getting_petted\": {\"type\": [\"null\", \"boolean\"], \"inclusion\": \"available\"}}}, \"key_properties\": [\"id\"]}\n\n{\"stream\": \"animals\", \"type\": \"ACTIVATE_VERSION\", \"version\": 1509135204169}\n\n{\"stream\": \"animals\", \"type\": \"RECORD\", \"version\": 1509135204169, \"record\": {\"id\": 1, \"name\": \"aardvark\", \"likes_getting_petted\": false}}\n\n{\"stream\": \"animals\", \"type\": \"RECORD\", \"version\": 1509135204169, \"record\": {\"id\": 2, \"name\": \"bear\", \"likes_getting_petted\": false}}\n\n{\"stream\": \"animals\", \"type\": \"RECORD\", \"version\": 1509135204169, \"record\": {\"id\": 3, \"name\": \"cow\", \"likes_getting_petted\": true}}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"version\": 1509135204169, \"replication_key_value\": 3, \"replication_key\": \"id\"}}, \"currently_syncing\": \"example_db-animals\"}}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"version\": 1509135204169, \"replication_key_value\": 3, \"replication_key\": \"id\"}}, \"currently_syncing\": null}}\n```\n\nNote that the final `STATE` message has a `replication_key_value` of `3`,\nreflecting that the extraction ended on a record that had an `id` of `3`.\nSubsequent invocations of the tap will pick up from this bookmark.\n\nNormally, the target will echo the last `STATE` after it's finished processing\ndata. For this example, let's manually write a `state.json` file using the\n`STATE` message:\n\n```json\n{\n  \"bookmarks\": {\n    \"example_db-animals\": {\n      \"version\": 1509135204169,\n      \"replication_key_value\": 3,\n      \"replication_key\": \"id\"\n    }\n  },\n  \"currently_syncing\": null\n}\n```\n\nLet's add some more animals to our farm:\n\n```\nmssql> insert into animals (name, likes_getting_petted) values ('dog', true), ('elephant', true), ('frog', false);\n```\n\n```bash\n$ tap-mssql -c config.json --properties properties.json --state state.json\n```\n\nThis invocation extracts any data since (and including) the\n`replication_key_value`:\n\n```json\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"replication_key\": \"id\", \"version\": 1509135204169, \"replication_key_value\": 3}}, \"currently_syncing\": \"example_db-animals\"}}\n\n{\"key_properties\": [\"id\"], \"schema\": {\"properties\": {\"name\": {\"maxLength\": 255, \"inclusion\": \"available\", \"type\": [\"null\", \"string\"]}, \"id\": {\"maximum\": 2147483647, \"minimum\": -2147483648, \"inclusion\": \"automatic\", \"type\": [\"null\", \"integer\"]}, \"likes_getting_petted\": {\"inclusion\": \"available\", \"type\": [\"null\", \"boolean\"]}}, \"type\": \"object\"}, \"type\": \"SCHEMA\", \"stream\": \"animals\"}\n\n{\"type\": \"ACTIVATE_VERSION\", \"version\": 1509135204169, \"stream\": \"animals\"}\n\n{\"record\": {\"name\": \"cow\", \"id\": 3, \"likes_getting_petted\": true}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n{\"record\": {\"name\": \"dog\", \"id\": 4, \"likes_getting_petted\": true}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n{\"record\": {\"name\": \"elephant\", \"id\": 5, \"likes_getting_petted\": true}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n{\"record\": {\"name\": \"frog\", \"id\": 6, \"likes_getting_petted\": false}, \"type\": \"RECORD\", \"version\": 1509135204169, \"stream\": \"animals\"}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"replication_key\": \"id\", \"version\": 1509135204169, \"replication_key_value\": 6}}, \"currently_syncing\": \"example_db-animals\"}}\n\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"example_db-animals\": {\"replication_key\": \"id\", \"version\": 1509135204169, \"replication_key_value\": 6}}, \"currently_syncing\": null}}\n```\n\n## Development\n\n### Running Tests\n\n1. Install test dependencies:\n```bash\npython3 -m venv .venv\n. .venv/bin/activate\npip install --upgrade pip\npip install '.[test]' # or pip install -e '.[test]'\n```\n2. Running the unit tests:\n```bash\npytest tests/unit\n```\n3. Running the unit tests with coverage:\n```bash\ncoverage run -m pytest -vv --disable-pytest-warnings tests/unit && coverage report\n```\n\n### Running pylint\n\n1. Install test dependencies:\n```bash\npython3 -m venv .venv\n. .venv/bin/activate\npip install --upgrade pip\npip install '.[test]' # or pip install -e '.[test]'\n```\n2. Run pylint\n```bash\npylint tap_mssql\n```\n\n---\n\nBased on Stitch documentation\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/firebend/pipelinewise-tap-mssql",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "firebend-tap-mssql",
    "package_url": "https://pypi.org/project/firebend-tap-mssql/",
    "platform": null,
    "project_url": "https://pypi.org/project/firebend-tap-mssql/",
    "project_urls": {
      "Homepage": "https://github.com/firebend/pipelinewise-tap-mssql"
    },
    "release_url": "https://pypi.org/project/firebend-tap-mssql/1.0.5/",
    "requires_dist": [
      "pendulum (~=1.5.1)",
      "singer-python (~=5.12.2)",
      "sqlalchemy (~=1.4.31)",
      "pyodbc (==4.0.32)",
      "backoff (==1.8.0)",
      "MarkupSafe (==2.0.1)",
      "jinja2 (==2.11.3)",
      "pylint (~=2.12.2) ; extra == 'test'",
      "pytest (~=6.2.5) ; extra == 'test'",
      "pytest-cov (~=3.0.0) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Singer.io tap for extracting data from SQL Server - PipelineWise compatible",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14262128,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3480aaf67b4b7734be3c65593a2ff1763e227a1ec1579f2c2c02bfcffd79bf2",
          "md5": "5995d8777f8f31e904af31f4e673e0d6",
          "sha256": "9f86cec3bb8c516a5a418c1323cdc885b978791f1174160302269243a3809a21"
        },
        "downloads": -1,
        "filename": "firebend_tap_mssql-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5995d8777f8f31e904af31f4e673e0d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32163,
        "upload_time": "2022-03-30T18:10:41",
        "upload_time_iso_8601": "2022-03-30T18:10:41.230596Z",
        "url": "https://files.pythonhosted.org/packages/c3/48/0aaf67b4b7734be3c65593a2ff1763e227a1ec1579f2c2c02bfcffd79bf2/firebend_tap_mssql-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb73349a07022d1af8e09415f6493772fa8b04734a5f695ca420eec287c73215",
          "md5": "22c84107e5c71c9590c05a8c086b1440",
          "sha256": "a745c3971047b91460d1412c7e9956b5aa553c58a1ddd556cd73adf237398893"
        },
        "downloads": -1,
        "filename": "firebend-tap-mssql-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "22c84107e5c71c9590c05a8c086b1440",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29206,
        "upload_time": "2022-03-30T18:10:42",
        "upload_time_iso_8601": "2022-03-30T18:10:42.825909Z",
        "url": "https://files.pythonhosted.org/packages/eb/73/349a07022d1af8e09415f6493772fa8b04734a5f695ca420eec287c73215/firebend-tap-mssql-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e479ff70b68eaa42d68b8f906b47eba4cef5a76d8de399cf678fc78622b5594f",
          "md5": "2907914ce1f27eef3d1e4c0769960999",
          "sha256": "555d53d8aff37bbbe2838c3300602e5346aebebafc3c7d6f72f647ee6655e373"
        },
        "downloads": -1,
        "filename": "firebend_tap_mssql-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2907914ce1f27eef3d1e4c0769960999",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32317,
        "upload_time": "2022-06-27T16:09:34",
        "upload_time_iso_8601": "2022-06-27T16:09:34.529589Z",
        "url": "https://files.pythonhosted.org/packages/e4/79/ff70b68eaa42d68b8f906b47eba4cef5a76d8de399cf678fc78622b5594f/firebend_tap_mssql-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4eba725220b1b20fdf3523d10cbcfcba76aeafa2384fc58e04252b558e1650b",
          "md5": "c3ebf7802bc4fe7115cae753e239a66c",
          "sha256": "b1cfb27803a3594aaa95a95d117ebb1f39ff9d71335c0b824f03ce6e27a79080"
        },
        "downloads": -1,
        "filename": "firebend-tap-mssql-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c3ebf7802bc4fe7115cae753e239a66c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29408,
        "upload_time": "2022-06-27T16:09:41",
        "upload_time_iso_8601": "2022-06-27T16:09:41.780785Z",
        "url": "https://files.pythonhosted.org/packages/f4/eb/a725220b1b20fdf3523d10cbcfcba76aeafa2384fc58e04252b558e1650b/firebend-tap-mssql-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e479ff70b68eaa42d68b8f906b47eba4cef5a76d8de399cf678fc78622b5594f",
        "md5": "2907914ce1f27eef3d1e4c0769960999",
        "sha256": "555d53d8aff37bbbe2838c3300602e5346aebebafc3c7d6f72f647ee6655e373"
      },
      "downloads": -1,
      "filename": "firebend_tap_mssql-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2907914ce1f27eef3d1e4c0769960999",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32317,
      "upload_time": "2022-06-27T16:09:34",
      "upload_time_iso_8601": "2022-06-27T16:09:34.529589Z",
      "url": "https://files.pythonhosted.org/packages/e4/79/ff70b68eaa42d68b8f906b47eba4cef5a76d8de399cf678fc78622b5594f/firebend_tap_mssql-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4eba725220b1b20fdf3523d10cbcfcba76aeafa2384fc58e04252b558e1650b",
        "md5": "c3ebf7802bc4fe7115cae753e239a66c",
        "sha256": "b1cfb27803a3594aaa95a95d117ebb1f39ff9d71335c0b824f03ce6e27a79080"
      },
      "downloads": -1,
      "filename": "firebend-tap-mssql-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "c3ebf7802bc4fe7115cae753e239a66c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29408,
      "upload_time": "2022-06-27T16:09:41",
      "upload_time_iso_8601": "2022-06-27T16:09:41.780785Z",
      "url": "https://files.pythonhosted.org/packages/f4/eb/a725220b1b20fdf3523d10cbcfcba76aeafa2384fc58e04252b558e1650b/firebend-tap-mssql-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}