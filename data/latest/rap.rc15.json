{
  "info": {
    "author": "So1n",
    "author_email": "so1n897046026@gamil.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# rap\nrap(par[::-1]) is advanced and fast python async rpc\n\n`rap` achieves very fast communication through `msgpack` and `Python asyncio` and multiplexing conn, while supporting high concurrency.\nImplement the `protobuf` of `Grpc` through Python functions and TypeHint.\n\nNote: The current `rap` API may change significantly in subsequent versions\n> The rap first version feature idea comes from [aiorpc](https://github.com/choleraehyq/aiorpc)\n\n[中文文档](https://github.com/so1n/rap/blob/master/README_CH.md)\n# 1.Installation\n```Bash\npip install rap\n```\n\n# 2.Quick Start\n\n## Server\n```Python\nimport asyncio\nfrom typing import AsyncIterator\n\nfrom rap.server import Server\n\n\ndef sync_sum(a: int, b: int) -> int:\n    return a + b\n\n\nasync def async_sum(a: int, b: int) -> int:\n    await asyncio.sleep(1)  #  mock io \n    return a + b\n\n\nasync def async_gen(a: int) -> AsyncIterator[int]:\n    for i in range(a):\n        yield i\n\n\nloop = asyncio.new_event_loop()\nrpc_server = Server()  # init service\n\n# register func\nrpc_server.register(sync_sum)\nrpc_server.register(async_sum)\nrpc_server.register(async_gen)\n\n# run server\nloop.run_until_complete(rpc_server.create_server())\n\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    # stop server\n    loop.run_until_complete(rpc_server.await_closed())\n```\n\n## Client\nThe client supports to call the service by `raw_call` and `call` methods, but this can not fully use the functions of TypeHint, it is recommended to use `@client.register` to register the function and then call it.\n\nNote: For `rap.client` there is no distinction between `async def` and `def`, but functions registered with `@client.register` can be used directly by the user, so functions decorated with `@client.register` should be similar to:\n```Python\nasync def demo(): pass\n```\n\nexample: \n```Python\nimport asyncio\nfrom typing import AsyncIterator\n\nfrom rap.client import Client\n\nclient: \"Client\" = Client()  # init client\n\n\n# Declare a function with no function. The function name, function type and return type must be the same as the server side function (async def does not differ from def) \ndef sync_sum(a: int, b: int) -> int:\n    pass\n\n\n# The decorated function must be an async def function  \n@client.register()\nasync def sync_sum(a: int, b: int) -> int:\n    pass\n\n\n# The decorated function must be the async def function, because the function is a generator syntax, to `yield` instead of `pass` \n@client.register()\nasync def async_gen(a: int) -> AsyncIterator:\n    yield\n\n\nasync def main():\n    await client.connect()\n    # Call the call method; read the function name and then call `raw_call`. \n    print(f\"call result: {await client.call(sync_sum, 1, 2)}\")\n    # Basic calls to rap.client \n    print(f\"raw call result: {await client.raw_call('sync_sum', 1, 2)}\")\n    \n    # Functions registered through `@client.register` can be used directly \n    # await async_sum(1,3) == await client.raw_call('async_sum', 1, 2)\n    # It is recommended to use the @client.register method, which can be used by tools such as IDE to determine whether the parameter type is wrong \n    print(f\"decorator result: {await sync_sum(1, 3)}\")\n    async_gen_result: list = []\n    \n    # Example of an asynchronous generator, which by default opens or reuses the current session of the rap (about the session will be mentioned below) \n    async for i in async_gen(10):\n        async_gen_result.append(i)\n    print(f\"async gen result:{async_gen_result}\")\n\n    \nasyncio.run(main())\n```\n# 3.Function Introduction\n## 3.1.Register function\nThe server side supports `def` and `async def`, if it is a `def` function, it will be run with multiple threads. When registering, the TypeHints of the function's parameters and return value will be checked, and an error will be reported if the type does not match the type specified by json.\n\nThe server comes with a registration library. If there are duplicate registrations in the same group, an error will be reported. You can use the `group` parameter to define the group to be registered or redefine the name of the registration with the `name` parameter (you also need to specify the corresponding group when the client calls it).\n\nIn addition, you can set `is_private` to True when registering, so that the function can only be called by the local rap.client.\n```Python\nimport asyncio\nfrom typing import AsyncIterator \n\nfrom rap.server import Server\n\n\ndef demo1(a: int, b: int) -> int:\n    return a + b\n\n\nasync def demo2(a: int, b: int) -> int:\n    await asyncio.sleep(1)\n    return a + b\n\n\nasync def demo_gen(a: int) -> AsyncIterator[int]:\n    for i in range(a):\n        yield i\n\n\nserver: Server = Server()\nserver.register(demo1)   # register def func\nserver.register(demo2)   # register async def func \nserver.register(demo_gen)  # register async iterator func\nserver.register(demo2, name='demo2-alias')   # Register with the value of `name` \nserver.register(demo2, group='new-group')    # Register and set the groups to be registered \nserver.register(demo2, group='root', is_private=True)  # Register and set the group to be registered, and set it to private \n```\nFor clients, it is recommended to use `client.register` instead of `client.call`, `client.raw_call`.\n`client.register` uses Python syntax to define function names, arguments, parameter types, and return value types, \nIt allows the caller to call the function as if it were a normal function, and the function can be checked through tools using the TypeHint feature.\nNote: When using `client.register`, be sure to use `async def ... `.\n```Python\nfrom typing import AsyncIterator \nfrom rap.client import Client\n\nclient: Client = Client()\n\n\n# register func\n@client.register()\nasync def demo1(a: int, b: int) -> int: pass\n\n\n# register async iterator fun, replace `pass` with `yield` \n# Since `async for` will make multiple requests to the same conn over time, it will check if the session is enabled and automatically reuse the current session if it is enabled, otherwise it will create a new session and use it. \n@client.register()\nasync def demo_gen(a: int) -> AsyncIterator: yield \n\n\n# Register the general function and set the name to demo2-alias \n@client.register(name='demo2-alias')\nasync def demo2(a: int, b: int) -> int: pass\n\n\n# Register the general function and set the group to new-group \n@client.register(group='new-group')\nasync def demo2(a: int, b: int) -> int: pass\n```\n## 3.2.session\n[example](https://github.com/so1n/rap/tree/master/example/session)\n\n`rap` client support session function, after enabling the session, all requests will only be requested through the current session's conn to the corresponding server, while each request, the session_id in the header will set the current session id, convenient for the server to identify.\n`rap` sessions support explicit and implicit settings, each with its own advantages and disadvantages, without mandatory restrictions.\n\n```Python\nfrom typing import AsyncIterator\n\nfrom rap.client import Client\n\nclient = Client()\n\n\ndef sync_sum(a: int, b: int) -> int:\n  pass\n\n\n@client.register()\nasync def async_sum(a: int, b: int) -> int:\n  pass\n\n\n@client.register()\nasync def async_gen(a: int) -> AsyncIterator[int]:\n  yield\n\n\nasync def no_param_run():\n  # The rap internal implementation uses the session implicitly via the `contextvar` module \n  print(f\"sync result: {await client.call(sync_sum, 1, 2)}\")\n  print(f\"async result: {await async_sum(1, 3)}\")\n\n  # The asynchronous generator detects if a session is enabled, and if so, it automatically reuses the current session, otherwise it creates a session \n  async for i in async_gen(10):\n    print(f\"async gen result:{i}\")\n\n\nasync def param_run(session: \"Session\"):\n  # By explicitly passing the session parameters in \n  print(f\"sync result: {await client.call(sync_sum, 1, 2, session=session)}\")\n  print(f\"sync result: {await client.raw_call('sync_sum', 1, 2, session=session)}\")\n  # May be a bit unfriendly \n  print(f\"async result: {await async_sum(1, 3, session=session)}\")\n\n  # The asynchronous generator detects if a session is enabled, and if so, it automatically reuses the current session, otherwise it creates a session \n  async for i in async_gen(10):\n    print(f\"async gen result:{i}\")\n\n\nasync def execute(session: \"Session\"):\n  # The best way to call a session explicitly, using a method similar to the mysql cursor \n  # execute will automatically recognize the type of call \n  print(f\"sync result: {await session.execute(sync_sum, arg_list=[1, 2])}\")\n  print(f\"sync result: {await session.execute('sync_sum', arg_list=[1, 2])}\")\n  print(f\"async result: {await session.execute(async_sum(1, 3))}\")\n\n  # The asynchronous generator detects if a session is enabled, and if so, it automatically reuses the current session, otherwise it creates a session \n  async for i in async_gen(10):\n    print(f\"async gen result:{i}\")\n\n\nasync def run_once():\n  await client.connect()\n  # init session\n  async with client.session as s:\n    await no_param_run()\n    await param_run(s)\n    await execute(s)\n  await client.await_close()\n```\n## 3.3.channel\n[example](https://github.com/so1n/rap/tree/master/example/channel)\n\nchannel supports client-server interaction in a duplex manner, similar to Http's WebSocket, it should be noted that the channel does not support group settings.\n\nOnly `@client.register` is supported on the client side to register the channel function, which is characterized by a single argument of type `Channel`.\nThe channel will maintain a session and will only communicate with the server via a conn from the time the channel is enabled to the time it is closed.\nTo avoid the use of 'while True', the channel supports the use of 'async for' syntax and the use of 'while await channel.loop()` syntax instead of 'while True\n```Python\nfrom rap.client import Channel, Client\nfrom rap.client.model import Response\n\nclient = Client()\n\n\n@client.register()\nasync def async_channel(channel: Channel) -> None:\n    await channel.write(\"hello\")  # send data\n    cnt: int = 0\n    while await channel.loop(cnt < 3):\n        cnt += 1\n        print(await channel.read_body())  # read data \n\n\n@client.register()\nasync def echo_body(channel: Channel) -> None:\n    await channel.write(\"hi!\")\n    # Reads data, returns only when data is read, and exits the loop if it receives a signal to close the channel \n    async for body in channel.iter_body():\n        print(f\"body:{body}\")\n        await channel.write(body)\n\n\n@client.register()\nasync def echo_response(channel: Channel) -> None:\n    await channel.write(\"hi!\")\n    # Read the response data (including header data), and return only if the data is read, or exit the loop if a signal is received to close the channel \n    async for response in channel.iter_response():\n        response: Response = response  #  help IDE check type.... \n        print(f\"response: {response}\")\n        await channel.write(response.body)\n```\n## 3.4.ssl\n[example](https://github.com/so1n/rap/tree/master/example/ssl)\n\nDue to the high degree of encapsulation of the `Python asyncio` module, `rap` can be used very easily with ssl\n```bash\n# Quickly generate ssl.crt and ssl.key \nopenssl req -newkey rsa:2048 -nodes -keyout rap_ssl.key -x509 -days 365 -out rap_ssl.crt\n```\nclient.py\n```Python\nfrom rap.client import Client\n\nclient = Client(ssl_crt_path=\"./rap_ssl.crt\")\n```\nserver.py\n```Python\nfrom rap.server import Server\n\nrpc_server = Server(\n    ssl_crt_path=\"./rap_ssl.crt\",\n    ssl_key_path=\"./rap_ssl.key\",\n)\n```\n## 3.5.event\nThe server side supports `start_event` and `stop_event` for event handling before start and after shutdown respectively.\n\n```Python\nfrom rap.server import Server\n\n\nasync def mock_start():\n    print('start event')\n\n\nasync def mock_stop(): \n    print('stop event')\n\n\n# example 1\nserver = Server(start_event_list=[mock_start()], stop_event_list=[mock_stop()])\n# example 2\nserver = Server()\nserver.load_start_event([mock_start()])\nserver.load_stop_event([mock_stop()])\n```\n## 3.6.middleware\n`rap` currently supports 2 types of middleware::\n- Conn middleware: Used when creating conn, such as limiting the total number of links, etc... \n  reference [block.py](https://github.com/so1n/rap/blob/master/rap/server/middleware/conn/block.py),\n  The `dispatch` method will pass in a conn object, and then determine whether to release it according to the rules (return await self.call_next(conn)) or reject it (await conn.close) \n- Message middleware: only supports normal function calls (no support for `Channel`), similar to the use of `starlette` middleware \n  reference [access.py](https://github.com/so1n/rap/blob/master/rap/server/middleware/msg/access.py)\n  Message middleware will pass in 4 parameters: request(current request object), call_id(current call id), func(current call function), param(current parameter) and request to return call_id and result(function execution result or exception object) \n  \nIn addition, the middleware supports `start_event_handle` and `stop_event_handle` methods, which are called when the `Server` starts and shuts down respectively.\n\nexample:\n```Python\nfrom rap.server import Server\nfrom rap.server.middleware import AccessMsgMiddleware, ConnLimitMiddleware\n\nrpc_server = Server()\nrpc_server.load_middleware([ConnLimitMiddleware(), AccessMsgMiddleware()])\n```\n## 3.7.processor\nThe `rap` processor is used to handle inbound and outbound traffic, where `process_request` is for inbound traffic and `process_response` is for outbound traffic.\n\nThe methods of `rap.client` and `rap.server` processors are basically the same, `rap.server` supports `start_event_handle` and `stop_event_handle` methods, which are called when `Server` starts and shuts down respectively \n\n[server crypto processor example](https://github.com/so1n/rap/blob/master/rap/server/processor/crypto.py)\n\n[client crypto processor example](https://github.com/so1n/rap/blob/master/rap/client/processor/crypto.py)\n\n\nclient load processor example\n```Python\nfrom rap.client import Client\nfrom rap.client.processor import CryptoProcessor\n\nclient = Client()\nclient.load_processor([CryptoProcessor('key_id', 'xxxxxxxxxxxxxxxx')])\n```\nserver load processor example\n```Python\nfrom rap.server import Server\nfrom rap.server.processor import CryptoProcessor\n\nserver = Server()\nserver.load_processor([CryptoProcessor({'key_id': 'xxxxxxxxxxxxxxxx'})])\n```\n\n# 4.Plugin\nrap supports plug-in functionality through `middleware` and `processor`, `middleware` only supports the server side, `processor` supports the client and server side\n\n## 4.1.Encrypted transmission\nEncrypted transmission only encrypts the request and response body content, not the header etc. While encrypting, the nonce parameter is added to prevent replay, and the timestamp parameter is added to prevent timeout access.\n\nclient example:\n```Python\nfrom rap.client import Client\nfrom rap.client.processor import CryptoProcessor\n\nclient = Client()\n# The first parameter is the id of the secret key, the server determines which secret key is used for the current request by the id of the secret key \n# The second parameter is the key of the secret key, currently only support the length of 16 bits of the secret key \n# timeout: Requests that exceed the timeout value compared to the current timestamp will be discarded\n# interval: Clear the nonce interval, the shorter the interval, the more frequent the execution, the greater the useless work, the longer the interval, the more likely to occupy memory, the recommended value is the timeout value is 2 times \nclient.load_processor([CryptoProcessor(\"demo_id\", \"xxxxxxxxxxxxxxxx\", timeout=60, interval=120)])\n```\nserver example:\n```Python\nfrom rap.server import Server\nfrom rap.server.processor import CryptoProcessor\n\n\nserver = Server()\n# The first parameter is the secret key key-value pair, key is the secret key id, value is the secret key\n# timeout: Requests that exceed the timeout value compared to the current timestamp will be discarded\n# nonce_timeout: The expiration time of nonce, the recommended setting is greater than timeout \nserver.load_processor([CryptoProcessor({\"demo_id\": \"xxxxxxxxxxxxxxxx\"}, timeout=60, nonce_timeout=120)])\n```\n## 4.2. Limit the maximum number of conn\nServer-side use only, you can limit the maximum number of links on the server side, more than the set value will not handle new requests\n```Python\nfrom rap.server import Server\nfrom rap.server.middleware import ConnLimitMiddleware, IpMaxConnMiddleware \n\n\nserver = Server()\nserver.load_middleware(\n    [\n        # max_conn: Current maximum number of conn\n        # block_timeout: Access ban time after exceeding the maximum number of conn\n        ConnLimitMiddleware(max_conn=100, block_time=60),\n        # ip_max_conn: Maximum number of conn per ip \n        # timeout: The maximum statistics time for each ip, after the time no new requests come in, the relevant statistics will be cleared\n        IpMaxConnMiddleware(ip_max_conn=10, timeout=60),\n    ]\n)\n```\n## 4.3.Limit ip access\nSupport restrict single ip or whole segment ip, support both whitelist and blacklist mode, if whitelist is enabled, blacklist mode is disabled by default\n```Python\nfrom rap.server import Server\nfrom rap.server.middleware import IpBlockMiddleware \n\n\nserver = Server()\n# allow_ip_list: whitelist, support network segment ip, if filled with allow_ip_list, black_ip_list will be invalid \n# black_ip_list: blacklist, support network segment ip \nserver.load_middleware([IpBlockMiddleware(allow_ip_list=['192.168.0.0/31'], block_ip_list=['192.168.0.2'])])\n```\n# 5.Advanced Features\n**TODO**, This feature is not yet implemented \n\n# 6.Protocol Design\n**TODO**, Document is being edited \n\n# 7.Introduction to the rap transport\n**TODO**, Document is being edited ",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/so1n/rap",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rap",
    "package_url": "https://pypi.org/project/rap/",
    "platform": "",
    "project_url": "https://pypi.org/project/rap/",
    "project_urls": {
      "Homepage": "https://github.com/so1n/rap",
      "Repository": "https://github.com/so1n/rap"
    },
    "release_url": "https://pypi.org/project/rap/0.5.3.8/",
    "requires_dist": [
      "msgpack (>=1.0.0,<2.0.0)",
      "pycrypto (==2.6.1); extra == \"crypto\"",
      "starlette (>=0.14.2,<0.15.0); extra == \"api_gateway\"",
      "aredis (>=1.1.8,<2.0.0); extra == \"redis\"",
      "opentracing (>=2.4.0,<3.0.0); extra == \"opentracing\"",
      "jaeger-client (>=4.4.0,<5.0.0); extra == \"opentracing\""
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "rap(par[::-1]) is advanced and fast python async rpc",
    "version": "0.5.3.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10401991,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7de4a46679e083f8103ebf4f7d959a773b17480066f137572ce80d91b2a6f84",
          "md5": "c13e8074145b9727d58cbf18411431d7",
          "sha256": "2b17d02b4ee6eee8ade85461fb40fa270e20fc24626133802bb0578d11e64671"
        },
        "downloads": -1,
        "filename": "rap-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c13e8074145b9727d58cbf18411431d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14038,
        "upload_time": "2020-08-06T14:55:49",
        "upload_time_iso_8601": "2020-08-06T14:55:49.071643Z",
        "url": "https://files.pythonhosted.org/packages/c7/de/4a46679e083f8103ebf4f7d959a773b17480066f137572ce80d91b2a6f84/rap-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3527e3392eb63c5603c29a25e54950170217028bdd17b67291d0d15f689661bb",
          "md5": "8f14721cb758bee339f59d62f4f299d9",
          "sha256": "6d15fb0d954e5f5639a2a66326069ab4dc99f35e3a4e31686e65a57b96492868"
        },
        "downloads": -1,
        "filename": "rap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f14721cb758bee339f59d62f4f299d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6809,
        "upload_time": "2020-08-06T14:55:54",
        "upload_time_iso_8601": "2020-08-06T14:55:54.201884Z",
        "url": "https://files.pythonhosted.org/packages/35/27/e3392eb63c5603c29a25e54950170217028bdd17b67291d0d15f689661bb/rap-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69e02fc9dcaf6cd22b87d663ba90c07701f552a9b83fa78d2e644be584427d5e",
          "md5": "11aca0f7b6ca62871d66366e485ef500",
          "sha256": "59608e231f2f99f02cb568e0cffd273f17e61a080e27bc28569b3d7d9fe58319"
        },
        "downloads": -1,
        "filename": "rap-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11aca0f7b6ca62871d66366e485ef500",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14678,
        "upload_time": "2020-08-06T17:20:53",
        "upload_time_iso_8601": "2020-08-06T17:20:53.105928Z",
        "url": "https://files.pythonhosted.org/packages/69/e0/2fc9dcaf6cd22b87d663ba90c07701f552a9b83fa78d2e644be584427d5e/rap-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1bd078b99333618c20bc0eeceaee48b994e66b750f396201901a9e1673b4006e",
          "md5": "43324e86ad0732ce1783bebb8b5034b9",
          "sha256": "5120609e51119e1c40205861a7340e95059a7096d72f2d88219fbfca21bee565"
        },
        "downloads": -1,
        "filename": "rap-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "43324e86ad0732ce1783bebb8b5034b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7396,
        "upload_time": "2020-08-06T17:20:55",
        "upload_time_iso_8601": "2020-08-06T17:20:55.200957Z",
        "url": "https://files.pythonhosted.org/packages/1b/d0/78b99333618c20bc0eeceaee48b994e66b750f396201901a9e1673b4006e/rap-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3e1f6571a2634edd6a06670aafa4f1323f1bae10213667f2114c3b01861a511",
          "md5": "2dee416420ca657654544e2e182c4da8",
          "sha256": "0a8362d109fb265cd6b4c0b73072d18190d68840faa9b80c0ae6788fd3a6f877"
        },
        "downloads": -1,
        "filename": "rap-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dee416420ca657654544e2e182c4da8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24971,
        "upload_time": "2020-10-22T15:39:50",
        "upload_time_iso_8601": "2020-10-22T15:39:50.446945Z",
        "url": "https://files.pythonhosted.org/packages/c3/e1/f6571a2634edd6a06670aafa4f1323f1bae10213667f2114c3b01861a511/rap-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b87dfedbc6de354c1493611d3482000b7e2b8bb0f94651bba3f3f18794b64a01",
          "md5": "c47de77b0b81d9328c51155ec300afc7",
          "sha256": "3a6d23933b014bd4f4d42d592a35246be764962f1b7cb0fa732c626538ed8ede"
        },
        "downloads": -1,
        "filename": "rap-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c47de77b0b81d9328c51155ec300afc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14316,
        "upload_time": "2020-10-22T15:39:52",
        "upload_time_iso_8601": "2020-10-22T15:39:52.128900Z",
        "url": "https://files.pythonhosted.org/packages/b8/7d/fedbc6de354c1493611d3482000b7e2b8bb0f94651bba3f3f18794b64a01/rap-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22f09949533e963cfd4e0cbbc023f0ae04f2d4659d48bce1581223f1fa453b0f",
          "md5": "326fb1519f7d756d00916577c0041132",
          "sha256": "1f5e072eed4214566116b51929f3da0ce704c7cbe1c907684cbe818f9ab2e529"
        },
        "downloads": -1,
        "filename": "rap-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "326fb1519f7d756d00916577c0041132",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 26587,
        "upload_time": "2020-11-07T06:02:58",
        "upload_time_iso_8601": "2020-11-07T06:02:58.781406Z",
        "url": "https://files.pythonhosted.org/packages/22/f0/9949533e963cfd4e0cbbc023f0ae04f2d4659d48bce1581223f1fa453b0f/rap-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "deecdbcb6db5d0b4dafa8bf996606a9eb840eeb95ee88f69ecdbf24237a00c3c",
          "md5": "f9352fbcd83728fc1e39e877dd9ad7af",
          "sha256": "aaa103d8b5fcab13b152684e341535cffdc00eba56123349053565770120ae31"
        },
        "downloads": -1,
        "filename": "rap-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9352fbcd83728fc1e39e877dd9ad7af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 20368,
        "upload_time": "2020-11-07T06:03:00",
        "upload_time_iso_8601": "2020-11-07T06:03:00.449172Z",
        "url": "https://files.pythonhosted.org/packages/de/ec/dbcb6db5d0b4dafa8bf996606a9eb840eeb95ee88f69ecdbf24237a00c3c/rap-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2108a0c94e718be476472a470783def3d88343e81063526e84da44d562245b24",
          "md5": "b4640fd89163760767ab99408792e00a",
          "sha256": "8be145ea91c244295bd7125f21ea5e8c8d3f6b6e3550766f0a9356282c57920d"
        },
        "downloads": -1,
        "filename": "rap-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4640fd89163760767ab99408792e00a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 25339,
        "upload_time": "2020-11-07T17:53:35",
        "upload_time_iso_8601": "2020-11-07T17:53:35.865689Z",
        "url": "https://files.pythonhosted.org/packages/21/08/a0c94e718be476472a470783def3d88343e81063526e84da44d562245b24/rap-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3478ca1a8ee5c3bcd1f3a72b31824ec2d965692ac1cb8840e7a5dfca55e40ad",
          "md5": "6039a63cfb2a104173a9d4d5725c93ef",
          "sha256": "9e0b0751c4c1f6015158a823ccba87b3355d909b70745341e092d56148493a79"
        },
        "downloads": -1,
        "filename": "rap-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6039a63cfb2a104173a9d4d5725c93ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 19610,
        "upload_time": "2020-11-07T17:53:37",
        "upload_time_iso_8601": "2020-11-07T17:53:37.806678Z",
        "url": "https://files.pythonhosted.org/packages/b3/47/8ca1a8ee5c3bcd1f3a72b31824ec2d965692ac1cb8840e7a5dfca55e40ad/rap-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34e955b74db587a22cd7322051e77b6bf4698decadcb45370a2e2c2064cc62c6",
          "md5": "839e2e42ab17b280ced3ec88d97f9ab0",
          "sha256": "9a167764bb0cd5d196e8e44635c5425bfea42765ea1d8a790f4ab054d49675f6"
        },
        "downloads": -1,
        "filename": "rap-0.5.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "839e2e42ab17b280ced3ec88d97f9ab0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 25635,
        "upload_time": "2020-12-02T03:12:32",
        "upload_time_iso_8601": "2020-12-02T03:12:32.548436Z",
        "url": "https://files.pythonhosted.org/packages/34/e9/55b74db587a22cd7322051e77b6bf4698decadcb45370a2e2c2064cc62c6/rap-0.5.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5574a87ef9f8f2b42eecf943829e2d5b96ac02d7b2efd48ec656a47c84f25d1",
          "md5": "1987ab3232b00f609afa8d3f517aee06",
          "sha256": "a0587c8a1e7c42e27c90c722fd220c1e18cee131184124030331b2835229b1fd"
        },
        "downloads": -1,
        "filename": "rap-0.5.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1987ab3232b00f609afa8d3f517aee06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 19878,
        "upload_time": "2020-12-02T03:12:34",
        "upload_time_iso_8601": "2020-12-02T03:12:34.003299Z",
        "url": "https://files.pythonhosted.org/packages/a5/57/4a87ef9f8f2b42eecf943829e2d5b96ac02d7b2efd48ec656a47c84f25d1/rap-0.5.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84d2ce34289f15cd5ad18ff932affa9e9da846c927ca343f6527190b63502785",
          "md5": "bf5cd085c34e0220e903957d709f45db",
          "sha256": "8e4299f5105ca45c1b943cf017296b5ed8b6efde29a228dd63747161d640c638"
        },
        "downloads": -1,
        "filename": "rap-0.5.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf5cd085c34e0220e903957d709f45db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 25772,
        "upload_time": "2020-12-03T16:08:45",
        "upload_time_iso_8601": "2020-12-03T16:08:45.928774Z",
        "url": "https://files.pythonhosted.org/packages/84/d2/ce34289f15cd5ad18ff932affa9e9da846c927ca343f6527190b63502785/rap-0.5.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de320abff2a7e4c40cc960105c0f1d4891c3781e53379519ffa9a81f4be304b5",
          "md5": "bca9db255c34e8af67eab2697b853522",
          "sha256": "408982ad179ad7ceb3dabeb16a516fa891d362d644d26769b2712114c8990fab"
        },
        "downloads": -1,
        "filename": "rap-0.5.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bca9db255c34e8af67eab2697b853522",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 20083,
        "upload_time": "2020-12-03T16:08:47",
        "upload_time_iso_8601": "2020-12-03T16:08:47.375308Z",
        "url": "https://files.pythonhosted.org/packages/de/32/0abff2a7e4c40cc960105c0f1d4891c3781e53379519ffa9a81f4be304b5/rap-0.5.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "066ce4a3f1f9428d03843c54b4a10432ffe44fe7b3e75bb61d66171b36429701",
          "md5": "ee3109e15787a1686eb130f7c29c5f98",
          "sha256": "e8fd316c4ad0b2be6d50abf8f19aa7441327595b4ea6b9448d06960212da9f59"
        },
        "downloads": -1,
        "filename": "rap-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee3109e15787a1686eb130f7c29c5f98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31522,
        "upload_time": "2020-12-08T17:23:38",
        "upload_time_iso_8601": "2020-12-08T17:23:38.983322Z",
        "url": "https://files.pythonhosted.org/packages/06/6c/e4a3f1f9428d03843c54b4a10432ffe44fe7b3e75bb61d66171b36429701/rap-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3188be774ea1f446c4c10eac185a88e3546f896e3f36501c7b3ffd58e198dbf7",
          "md5": "7d87f86e477b8f9135f2604a537efcac",
          "sha256": "07b7f6d2b04b888d54f2562ca4753c0e341aafd8ad6912e60c2d7e5c5e79f6a2"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7d87f86e477b8f9135f2604a537efcac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23259,
        "upload_time": "2020-12-08T17:23:42",
        "upload_time_iso_8601": "2020-12-08T17:23:42.053792Z",
        "url": "https://files.pythonhosted.org/packages/31/88/be774ea1f446c4c10eac185a88e3546f896e3f36501c7b3ffd58e198dbf7/rap-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f26d178d1a6110110b8c5751574f27fc5c021ef1b63f10c2fa01de163bc015bf",
          "md5": "572babc46469c339ed5f0f0735a78f05",
          "sha256": "ad0624d95c9bcb770e268c7742555ece174b60603b7afce2268c2b4d88417d51"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "572babc46469c339ed5f0f0735a78f05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31596,
        "upload_time": "2020-12-10T15:06:20",
        "upload_time_iso_8601": "2020-12-10T15:06:20.555270Z",
        "url": "https://files.pythonhosted.org/packages/f2/6d/178d1a6110110b8c5751574f27fc5c021ef1b63f10c2fa01de163bc015bf/rap-0.5.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "314c455c0093855f2c2c8cbbf791e61b0d7c2553b370cb143d9e3b4fcbd4c7da",
          "md5": "9a2b8950e23ed5f546b079b980899490",
          "sha256": "bfe617d753d46c6d965a557ddbdad8131ec588e1bf153b710819a9811a00325a"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a2b8950e23ed5f546b079b980899490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23262,
        "upload_time": "2020-12-10T15:06:21",
        "upload_time_iso_8601": "2020-12-10T15:06:21.776580Z",
        "url": "https://files.pythonhosted.org/packages/31/4c/455c0093855f2c2c8cbbf791e61b0d7c2553b370cb143d9e3b4fcbd4c7da/rap-0.5.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6dd15e54b6a3fe34920d37632c1304b544409299177e98151ee03ef14181c7c",
          "md5": "ba80d4ec23245d1d1a6dfd19431e69bf",
          "sha256": "4c19b1e5dce9703fbdbddc0e82ecb5253803bee4c98c4505b49f2cba34e35d26"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba80d4ec23245d1d1a6dfd19431e69bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 32120,
        "upload_time": "2020-12-24T03:42:23",
        "upload_time_iso_8601": "2020-12-24T03:42:23.583648Z",
        "url": "https://files.pythonhosted.org/packages/f6/dd/15e54b6a3fe34920d37632c1304b544409299177e98151ee03ef14181c7c/rap-0.5.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "350ed397762f7671fc9da11efc74cf0de5030d633355788824b8d4731298a980",
          "md5": "e76442e656a2b811390a296a50836d37",
          "sha256": "b80826a74144acf370311186782de3a0a9169aca35171670601fb07b498bd9c5"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e76442e656a2b811390a296a50836d37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 23619,
        "upload_time": "2020-12-24T03:42:25",
        "upload_time_iso_8601": "2020-12-24T03:42:25.069415Z",
        "url": "https://files.pythonhosted.org/packages/35/0e/d397762f7671fc9da11efc74cf0de5030d633355788824b8d4731298a980/rap-0.5.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52b9811826ea467f4e4e52d8663b130a7843eaf0328bdc7e3d366fc4781ac134",
          "md5": "112b60a83e390d123f0084952f015b21",
          "sha256": "41fa8780237b467f362551d3d1ec8bbe77486f79388d5083770a184ddf0219e8"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "112b60a83e390d123f0084952f015b21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 36131,
        "upload_time": "2020-12-29T16:07:27",
        "upload_time_iso_8601": "2020-12-29T16:07:27.101853Z",
        "url": "https://files.pythonhosted.org/packages/52/b9/811826ea467f4e4e52d8663b130a7843eaf0328bdc7e3d366fc4781ac134/rap-0.5.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad75fd54264a8e0d8b638bd2cf0ac93a0d905571b7abe716fe9847309b618dac",
          "md5": "6b375b5ff09c22f974e08fac1a2019c0",
          "sha256": "fd203c742653d7f2a433212fb3d031920773efd2a2f07bbf0333209581ced47e"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6b375b5ff09c22f974e08fac1a2019c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 26609,
        "upload_time": "2020-12-29T16:07:28",
        "upload_time_iso_8601": "2020-12-29T16:07:28.965971Z",
        "url": "https://files.pythonhosted.org/packages/ad/75/fd54264a8e0d8b638bd2cf0ac93a0d905571b7abe716fe9847309b618dac/rap-0.5.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce7225928f0562c816d94d35ac81062bd22bd2d659ac78ca35e2f1c8c22b2c48",
          "md5": "32f1a2ccd3a203ad2472b4d5fa32c11b",
          "sha256": "99716fa226db0c1235bfb37900e4a6c485229a9b5ae6a0ccc5f8ac5ba86821cc"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32f1a2ccd3a203ad2472b4d5fa32c11b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 39057,
        "upload_time": "2021-01-11T07:41:15",
        "upload_time_iso_8601": "2021-01-11T07:41:15.119405Z",
        "url": "https://files.pythonhosted.org/packages/ce/72/25928f0562c816d94d35ac81062bd22bd2d659ac78ca35e2f1c8c22b2c48/rap-0.5.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b956c42762d4a5eef7906cc1ee546e0f1d9ef2593b83e6b087d6316a11a9e7f",
          "md5": "4ca3bc2365d401f0d72f859d0ce87620",
          "sha256": "06b0c31a5015d3412849a4f2bffc4c5d8acff99b63090a7cfbd24c4832a2743d"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4ca3bc2365d401f0d72f859d0ce87620",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 29388,
        "upload_time": "2021-01-11T07:41:16",
        "upload_time_iso_8601": "2021-01-11T07:41:16.628503Z",
        "url": "https://files.pythonhosted.org/packages/9b/95/6c42762d4a5eef7906cc1ee546e0f1d9ef2593b83e6b087d6316a11a9e7f/rap-0.5.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be9d8001452e4aa69723fcd697050ae0bb4ba70856a9f5f2b8755b4723778603",
          "md5": "2a0a0d9b980dcff300febf7539667b3c",
          "sha256": "c896bd0ab3977b75ac362266a730dc159a891d0bcebf990d044b4ca2a95b0895"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a0a0d9b980dcff300febf7539667b3c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 41456,
        "upload_time": "2021-01-19T11:49:03",
        "upload_time_iso_8601": "2021-01-19T11:49:03.638789Z",
        "url": "https://files.pythonhosted.org/packages/be/9d/8001452e4aa69723fcd697050ae0bb4ba70856a9f5f2b8755b4723778603/rap-0.5.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84a15605439cc06f1fadd2b49cf6881f311eac47e694549a477e3ba2d887389b",
          "md5": "cf42e25e5bc9e3410c2a3f8384c52361",
          "sha256": "9a504f3664f443c84bdb537c4f38f1350e0bb152bbd742e5d449562f745e0639"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cf42e25e5bc9e3410c2a3f8384c52361",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 31266,
        "upload_time": "2021-01-19T11:49:05",
        "upload_time_iso_8601": "2021-01-19T11:49:05.101553Z",
        "url": "https://files.pythonhosted.org/packages/84/a1/5605439cc06f1fadd2b49cf6881f311eac47e694549a477e3ba2d887389b/rap-0.5.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b0581fa9dd7579cb73e222acc48d9c0ed6fbe2fa07bca2f4b3b4e62084594f5",
          "md5": "d5f282902bb2b41331aa4f5ffe37897a",
          "sha256": "7ccb6e1e02bef89430634b3f809bf77ff5c08e074c67e6557bafc3dd273894be"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5f282902bb2b41331aa4f5ffe37897a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 46156,
        "upload_time": "2021-01-26T10:10:06",
        "upload_time_iso_8601": "2021-01-26T10:10:06.536129Z",
        "url": "https://files.pythonhosted.org/packages/7b/05/81fa9dd7579cb73e222acc48d9c0ed6fbe2fa07bca2f4b3b4e62084594f5/rap-0.5.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81c0fef3767b70847de81b8348f78df731d35c05478b5c5f72d99e97ad0526ba",
          "md5": "3e17c3da3d1d1bbe9e82ca584a28a13f",
          "sha256": "20f8ccfb9fdf59f93bcf8c914ba64d55bd70aac63dec6823ee4680cab32979d4"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3e17c3da3d1d1bbe9e82ca584a28a13f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 41210,
        "upload_time": "2021-01-26T10:10:08",
        "upload_time_iso_8601": "2021-01-26T10:10:08.560742Z",
        "url": "https://files.pythonhosted.org/packages/81/c0/fef3767b70847de81b8348f78df731d35c05478b5c5f72d99e97ad0526ba/rap-0.5.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77535519946416d9e5903ac59b44c6446286b5a58357135d0c78ab1f0272ac0a",
          "md5": "33c3b5f0d8984529705d7974c8b80a4e",
          "sha256": "817928c090535f15bf0df1c5d9d20b4e96ce9eda4eb9486f3a85d343f753ff96"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33c3b5f0d8984529705d7974c8b80a4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 57638,
        "upload_time": "2021-05-19T08:16:56",
        "upload_time_iso_8601": "2021-05-19T08:16:56.982207Z",
        "url": "https://files.pythonhosted.org/packages/77/53/5519946416d9e5903ac59b44c6446286b5a58357135d0c78ab1f0272ac0a/rap-0.5.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "055c6979e2a8fb2a501f2b308123d0071deb5c532c4fff5e900b66626e7d28bb",
          "md5": "1dd33f71a668bc4253c6895b73f73e8d",
          "sha256": "2a5684e509fb4ea815a2155124bbfe8874e47405024311ae5a7138dd78ca68ec"
        },
        "downloads": -1,
        "filename": "rap-0.5.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1dd33f71a668bc4253c6895b73f73e8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 49254,
        "upload_time": "2021-05-19T08:16:59",
        "upload_time_iso_8601": "2021-05-19T08:16:59.231946Z",
        "url": "https://files.pythonhosted.org/packages/05/5c/6979e2a8fb2a501f2b308123d0071deb5c532c4fff5e900b66626e7d28bb/rap-0.5.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77535519946416d9e5903ac59b44c6446286b5a58357135d0c78ab1f0272ac0a",
        "md5": "33c3b5f0d8984529705d7974c8b80a4e",
        "sha256": "817928c090535f15bf0df1c5d9d20b4e96ce9eda4eb9486f3a85d343f753ff96"
      },
      "downloads": -1,
      "filename": "rap-0.5.3.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33c3b5f0d8984529705d7974c8b80a4e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 57638,
      "upload_time": "2021-05-19T08:16:56",
      "upload_time_iso_8601": "2021-05-19T08:16:56.982207Z",
      "url": "https://files.pythonhosted.org/packages/77/53/5519946416d9e5903ac59b44c6446286b5a58357135d0c78ab1f0272ac0a/rap-0.5.3.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "055c6979e2a8fb2a501f2b308123d0071deb5c532c4fff5e900b66626e7d28bb",
        "md5": "1dd33f71a668bc4253c6895b73f73e8d",
        "sha256": "2a5684e509fb4ea815a2155124bbfe8874e47405024311ae5a7138dd78ca68ec"
      },
      "downloads": -1,
      "filename": "rap-0.5.3.8.tar.gz",
      "has_sig": false,
      "md5_digest": "1dd33f71a668bc4253c6895b73f73e8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 49254,
      "upload_time": "2021-05-19T08:16:59",
      "upload_time_iso_8601": "2021-05-19T08:16:59.231946Z",
      "url": "https://files.pythonhosted.org/packages/05/5c/6979e2a8fb2a501f2b308123d0071deb5c532c4fff5e900b66626e7d28bb/rap-0.5.3.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}