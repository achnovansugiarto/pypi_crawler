{
  "info": {
    "author": "",
    "author_email": "Matt Manes <mattmanes@pm.me>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Hassle\n\nAutomate creating, building, testing, and publishing Python projects and packages from the command line. <br>\nThis package wraps several other packages and tools to streamline the package creation and distribution workflow\nfor smaller scale personal projects.\n\n## Installation\n\nInstall with:\n\n<pre>\npip install hassle\n</pre>\n\n### Additional setup:\n\nInstall git and add it to your PATH if it already isn't.<br>\nYou will also need to register a [pypi account](https://pypi.org/account/register/) if you want to publish pip-installable packages to https://pypi.org with this tool.<br>\nOnce you've created and validated an account, you will need to follow the directions to generate an [api key](https://pypi.org/help/#apitoken).<br>\nCopy the key and in your home directory, create a '.pypirc' file if it doesn't already exist.<br>\nEdit the file so it contains the following (don't include the brackets around your api key):\n\n<pre>\n[distutils]\nindex-servers =\n    pypi\n\n[pypi]\nusername = __token__\npassword = pypi-{The api key you copied}\n</pre>\n\n## Configuration\n\nAfter installation and the above additional setup, it is a good idea to run the 'hassle_config' tool.\nThis isn't required and a blank config will be generated whenever another tool needs it if it doesn't exist.\nThis info, if provided, is used to populate a new project's 'pyproject.toml' file.\nInvoking the tool with the -h switch shows the following:\n\n<pre>\nC:\\python>hassle_config -h\nusage: hassle_config [-h] [-n NAME] [-e EMAIL] [-g GITHUB_USERNAME] [-d DOCS_URL] [-t TAG_PREFIX]\n\noptions:\n  -h, --help            show this help message and exit\n  -n NAME, --name NAME  Your name. This will be used to populate the 'authors' field of a packages 'pyproject.toml'.\n  -e EMAIL, --email EMAIL\n                        Your email. This will be used to populate the 'authors' field of a packages 'pyproject.toml'.\n  -g GITHUB_USERNAME, --github_username GITHUB_USERNAME\n                        Your github account name. When creating a new package, say with the name 'mypackage', the pyproject.toml 'Homepage' field will be set to 'https://github.com/{github_username}/mypackage' and the 'Source code' field will be set to\n                        'https://github.com/{github_username}/mypackage/tree/main/src/mypackage'.\n  -d DOCS_URL, --docs_url DOCS_URL\n                        The template url to be used in your pyproject.toml file indicating where your project docs will be hosted. Pass the url such that the spot the actual package name will go is held by '$name', e.g. 'https://somedocswebsite/user/projects/$name'. If\n                        'hassle_config.toml' didn't exist prior to running this tool and nothing is given for this arg, it will default to using the package's github url. e.g. for package 'mypackage' the url will be 'https://github.com/{your_github_name}/mypackage/tree/main/docs'\n  -t TAG_PREFIX, --tag_prefix TAG_PREFIX\n                        The tag prefix to use with git when tagging source code versions. e.g. hassle will use the current version in your pyproject.toml file to when adding a git tag. If you've passed 'v' to this arg and the version of your hypothetical package is '1.0.1', it will\n                        be tagged as 'v1.0.1'. If 'hassle_config.toml' didn't exist prior to running this tool and you don't pass anything for this arg, it will default to ''.\n</pre>\n\nInvoking 'hassle_config' with no arguments will create a blank config if a config file doesn't already exist and it will also print where the config file is located so manual edits can be made.<br>\nOn a typical Python installation that'll look something like:\n\n<pre>\nC:\\python>hassle_config\nManual edits can be made at C:\\Users\\%USER%\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\hassle\\hassle_config.toml\n</pre>\n\n## Generating New Projects\nNew projects are generated by invoking the \"new_project\" tool from your terminal.<br>\nThe -h/--help switch produces the following:\n\n<pre>\nC:\\python>new_project -h\nusage: new_project [-h] [-s [SOURCE_FILES ...]] [-d DESCRIPTION] [-dp [DEPENDENCIES ...]] [-k [KEYWORDS ...]] [-as] [-nl] [-os [OPERATING_SYSTEM ...]] name\n\npositional arguments:\n  name                  Name of the package to create in the current working directory.\n\noptions:\n  -h, --help            show this help message and exit\n  -s [SOURCE_FILES ...], --source_files [SOURCE_FILES ...]\n                        List of additional source files to create in addition to the default __init__.py and {name}.py files.\n  -d DESCRIPTION, --description DESCRIPTION\n                        The package description to be added to the pyproject.toml file.\n  -dp [DEPENDENCIES ...], --dependencies [DEPENDENCIES ...]\n                        List of dependencies to add to pyproject.toml. Note: hassle.py will automatically scan your project for 3rd party imports and update pyproject.toml. This switch is largely useful for adding dependencies your project might need, but doesn't directly import in\n                        any source files, like an os.system() call that invokes a 3rd party cli.\n  -k [KEYWORDS ...], --keywords [KEYWORDS ...]\n                        List of keywords to be added to the keywords field in pyproject.toml.\n  -as, --add_script     Add section to pyproject.toml declaring the package should be installed with command line scripts added. The default is '{name} = \"{name}.{name}:main\". You will need to manually change this field.\n  -nl, --no_license     By default, projects are created with an MIT license. Set this flag to avoid adding a license if you want to configure licensing at another time.\n  -os [OPERATING_SYSTEM ...], --operating_system [OPERATING_SYSTEM ...]\n                        List of operating systems this package will be compatible with. The default is OS Independent. This only affects the 'classifiers' field of pyproject.toml .\n</pre>\n\nMost of these options pertain to prefilling the generated 'pyproject.toml' file.<br>\nAs a simple example we'll create a new package called 'nyquil' with the following:\n\n<pre>\nC:\\python>new_project nyquil -d \"A package to help you sleep when you're sick.\" -k \"sleep\" \"sick\"\n</pre>\n\nYou should see the following output:\n\n<pre>\nreformatted C:\\python\\nyquil\\tests\\test_nyquil.py\n\nAll done! ‚ú® üç∞ ‚ú®\n1 file reformatted.\nFixing C:\\python\\nyquil\\tests\\test_nyquil.py\nInitialized empty Git repository in C:/python/nyquil/.git/\n</pre>\n\nA new folder in your current working directory called 'nyquil' should now exist.<br>\nIt should have the following structure:\n\n<pre>\nnyquil\n|  |-.git\n|  |  |-config\n|  |  |-description\n|  |  |-HEAD\n|  |  |-hooks\n|  |  |  |-applypatch-msg.sample\n|  |  |  |-commit-msg.sample\n|  |  |  |-fsmonitor-watchman.sample\n|  |  |  |-post-update.sample\n|  |  |  |-pre-applypatch.sample\n|  |  |  |-pre-commit.sample\n|  |  |  |-pre-merge-commit.sample\n|  |  |  |-pre-push.sample\n|  |  |  |-pre-rebase.sample\n|  |  |  |-pre-receive.sample\n|  |  |  |-prepare-commit-msg.sample\n|  |  |  |-push-to-checkout.sample\n|  |  |  |_update.sample\n|  |  |\n|  |  |-info\n|  |  |  |_exclude\n|  |\n|  |-.gitignore\n|  |-.vscode\n|  |  |_settings.json\n|  |\n|  |-LICENSE.txt\n|  |-pyproject.toml\n|  |-README.md\n|  |-src\n|  |  |-nyquil\n|  |  |  |-__init__.py\n|  |  |  |_nyquil.py\n|  |\n|  |-tests\n|  |  |_test_nyquil.py\n</pre>\n\n'new_project' has generated our project structure and files for us as well as initialized a git repository.<br>\n**Note: By default 'new_project' adds an MIT License to the project. Pass the `-nl/--no_license` flag to prevent this behavior.**<br>\nIf you open the 'pyproject.toml' file it should look like the following except\nfor the 'project.authors' and 'project.urls' sections:\n\n<pre>\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"nyquil\"\ndescription = \"A package to help you sleep when you're sick.\"\nversion = \"0.0.0\"\nrequires-python = \"3.0\"\ndependencies = []\nreadme = \"README.md\"\nkeywords = [\"sleep\", \"sick\"]\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n    ]\n\n[[project.authors]]\nname = \"Matt Manes\"\nemail = \"mattmanes@pm.me\"\n\n[project.urls]\n\"Homepage\" = \"https://github.com/matt-manes/nyquil\"\n\"Documentation\" = \"https://github.com/matt-manes/nyquil/tree/main/docs\"\n\"Source code\" = \"https://github.com/matt-manes/nyquil/tree/main/src/nyquil\"\n\n[tool.pytest.ini_options]\naddopts = [\n    \"--import-mode=importlib\",\n    ]\npythonpath = \"src\"\n\n[tool.hatch.build.targets.sdist]\nexclude = [\n    \".coverage\",\n    \".pytest_cache\",\n    \".vscode\",\n    \"tests\",\n    \".gitignore\"\n    ]\n[project.scripts]\n</pre>\n\nThe package would do absolutely nothing, but with the generated files we do have the\nviable minimum to build an installable python package.\n\n## Generating Tests\n\nWhile Hassle won't write your tests for you, \nit will generate the scaffolding to write tests for you.<br>\nWhen you run the tool, it will scan the files in your 'src' directory\nand generate placeholders for each function in the file and place\nthem in a test file in the 'tests' directory.<br>\nIf the test file already exists, functions will not be duplicated \nand existing content will not be overwritten, only appended to.\n\nLet's navigate into our new 'nyquil' folder from the terminal:\n\n<pre>\nC:\\python>cd nyquil\n</pre>\n\n**Note**: All of the following Hassle tools can be run from the parent folder of 'nyquil',\nbut you will need to specify the package name as the first argument, since we're navigating into 'nyquil' we can omit it.\n\nBefore we run the test generator tool, we need to add something to test.<br>\nOpen up the 'nyquil.py' file in the 'src' directory and add the following (be sure to save):\n\n<pre>\nfrom pathlib import Path\n\nimport tomlkit\n\nroot = Path(__file__).parent\n\n\ndef get_project_name() -> str:\n    \"\"\"Return the name of this project from its pyproject.toml file.\"\"\"\n    content = tomlkit.loads((root.parent.parent / \"pyproject.toml\").read_text())\n    return content[\"project\"][\"name\"]\n</pre>\n\nThere are two ways to generate tests:<br>\n\n<pre>\nC:\\python\\nyquil>generate_tests\n</pre>\nand\n<pre>\nC:\\python\\nyquil>hassle -gt\n</pre>\n\nThey both produce the same results, so we'll use the shorter one.<br>\nAfter running `hassle -gt` in your terminal, look at the 'test_nyquil.py' file\ninside the 'tests' folder.<br>\nIt should look like this:\n\n<pre>\nimport pytest\n\nfrom nyquil import nyquil\n\n\ndef test__nyquil__get_project_name():\n    ...\n</pre>\n\nGo ahead and modify it to this (and save):\n\n<pre>\nimport pytest\n\nfrom nyquil import nyquil\n\n\ndef test__nyquil__get_project_name():\n    assert \"nyquil\" == nyquil.get_project_name()\n</pre>\n\n## Running Tests\n\nSimilarly to generating tests, running tests can be done with either\n\n<pre>\nC:\\python\\nyquil>run_tests\n</pre>\n\nor \n\n<pre>\nC:\\python\\nyquil>hassle -rt\n</pre>\n\nand as before we'll stick with the first.\n\nHassle uses [Pytest](https://pypi.org/project/pytest/) and [Coverage](https://pypi.org/project/coverage/) to run tests, so when we invoke the `hassle -rt` command,\nwe should see something like this:\n\n<pre>\nC:\\python\\nyquil>hassle -rt\n================================================================================================================================== test session starts ==================================================================================================================================\nplatform win32 -- Python 3.11.0, pytest-7.2.1, pluggy-1.0.0\nrootdir: C:\\python\\nyquil, configfile: pyproject.toml\nplugins: anyio-3.6.2, hypothesis-6.63.0\ncollected 1 item\n\ntests\\test_nyquil.py .\n\n=================================================================================================================================== 1 passed in 0.06s ===================================================================================================================================\nName                     Stmts   Miss  Cover   Missing\n------------------------------------------------------\nsrc\\nyquil\\__init__.py       0      0   100%\nsrc\\nyquil\\nyquil.py         6      0   100%\ntests\\test_nyquil.py         4      0   100%\n------------------------------------------------------\nTOTAL                       10      0   100%\n</pre>\n\nFor more about testing refer to the Pytest documentation.\n\n## Building\n\nBuilding the package is as simple as running the following:\n\n<pre>\nC:\\python\\nyquil>hassle -b\n</pre>\n\nwhich should produce\n\n<pre>\nAll done! ‚ú® üç∞ ‚ú®\n3 files left unchanged.\nSkipped 1 files\n [____________________________________________________________________________________________]-100.00% Scanning test_nyquil.py\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (hatchling)\n* Getting build dependencies for sdist...\n* Building sdist...\n* Building wheel from sdist\n* Creating venv isolated environment...\n* Installing packages in isolated environment... (hatchling)\n* Getting build dependencies for wheel...\n* Building wheel...\nSuccessfully built nyquil-0.0.0.tar.gz and nyquil-0.0.0-py3-none-any.whl\n</pre>\n\n\nThere should be two new folders in the top nyquil directory: \"dist\" and \"docs\".<br>\nThe \"dist\" folder contains the tar.gz and .whl files that are needed to install the package\nand \"docs\" contains .html and .js files autogenerated by the [pdoc](https://pypi.org/project/pdoc/) package.<br>\n\nThe build command also invokes the [Vermin](https://pypi.org/project/vermin/) package to determine the minimum Python version\nour package will support as well as the [Packagelister](https://pypi.org/project/packagelister/) package to determine our package's dependencies.<br>\nhassle then updates the 'pyproject.toml' file with this new information.<br>\nThe version of pyproject that was generated initially showed this for \"requires-python\" and \"dependencies\":\n\n<pre>\nrequires-python = \"3.0\"\ndependencies = []\n</pre>\n\nbut now it should show\n\n<pre>\nrequires-python = \">=3.4\"\ndependencies = [\"tomlkit~=0.11.6\", \"pytest~=7.2.1\"]\n</pre>\n\nAnother command line switch for Hassle that's relevant to this is the `-od/--overwrite_dependencies` flag.<br>\nThe defualt behavior of `hassle -b` is to append any new packages it finds to the dependencies list that aren't already there.<br>\nThis is good for when you've manually added dependencies your package needs that aren't explicitly imported in any of your source files.<br>\nFor instance, Hassle invokes a lot of things through the `os.system()` function, such as the [Black](https://pypi.org/project/black/) \nand [Isort](https://pypi.org/project/isort/) packages.<br>\nPackagelister doesn't pick these up even though Hassle depends on them because they're never explicitly imported into a source file.<br>\n\nHowever if our package doesn't have any manually added dependencies like that and, after some modifications from our first build,\nwe know there are some packages we were using that we don't use anymore, we can run\n\n<pre>\nC:\\python\\nyquil>hassle -b -od\n</pre>\n\nand our dependencies list will get overwritten, effectively removing the packages we no longer need in our project.\n\n\n## Installing\nWe can install the package to our \"site-packages\" directory like any other package so that it's available to import with the command\n\n<pre>\nC:\\python\\nyquil>hassle -i\n</pre>\n\n## Publishing\n\nAssuming you've set up a [PyPi](https://pypi.org/) account, generated the api key, and configured the '.pypirc' \nfile as mentioned earlier, then you can publish the current version of your package by running\n\n<pre>\nC:\\python\\nyquil>hassle -p\n</pre>\n\n\n## Updating\n\nAfter fixing some bugs or adding some features, you can increment your version number in the pyproject file\nwith the `-iv/--increment_version` flag using one of three arguments: `major`, `minor`, or `patch`. \nThis follows the [semantic versioning standard](https://semver.org/)\nso, if the project's current version is `1.3.7`, then\n\n<pre>\n>hassle -iv patch\n</pre>\n\nproduces `1.3.8`,\n\n<pre>\n>hassle -iv minor\n</pre>\n\nproduces `1.4.0`,\n\nand\n\n<pre>\n>hassle -iv major\n</pre>\n\nproduces `2.0.0`\n\n## Git Stuff\n\n#### Version Tagging\n\nThe command `>hassle -t` can be used to git tag your repo's current state according to the version number in the pyproject file\nand the tag prefix in your hassle_config file we made earlier.\n\n#### Committing\n\nUsing the `-ca/--commit_all` flag followed by a commit message with Hassle will git commit all uncommitted\nfiles with the provided message.<br>\nIf you only pass \"build\" as the message, i.e. `>hassle -ca build`, all uncommitted files will be\ncommitted with the message `chore: build v<pyproject.toml_version>`.<br>\nThis is particulary useful to run with the build flag so as to commit the files created and modified \nby the build process such as \"dist\", \"docs\", etc.\n\n#### Syncing\n\n**Note: This section requires Git and GitHub to be able to talk to each other.<br>\nIf you need help with that, look [here](https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git).<br><br>\nThe `-s/--sync` flag can be used to sync your changes with your remote repo.<br>\nRunning\n<pre>\n>hassle -s\n</pre>\n\nreally just invokes\n\n<pre>\n>git pull --tags origin main\n>git push origin main:main --tags\n</pre>\n\nSo for our example package 'nyquil', we can log into github and create an empty repository named \"nyquil\".<br>\nThen, in your terminal, run the command\n<pre>\nC:\\python\\nyquil> git remote add origin https://github.com/{your-username}/nyquil.git\n</pre>\n\nNow you should be able to sync your local commits to GitHub using `>hassle -s`.\n\n#### Changelog Generation\n\nYou can also generate a formatted changelog using `>hassle -uc`.<br>\nThis isn't strictly a Git operation, but it invokes the [auto-changelog](https://pypi.org/project/auto-changelog/) package and relies on\ngit version tagging, [conventional commit](https://www.conventionalcommits.org/en/v1.0.0/) style commit messages, and your remote repo.\n\n## Tying It All Together\n\nLet's fastfoward in time and assume we've already published our 'nyquil' package as version `0.0.0`.<br>\nWe've decided to add some non-breaking additions to our package.<br>\nAssuming we've dilligently done our tests and updated our readme, we can accomplish the whole build, publish, and sync process with the command\n<pre>\nC:\\python\\nyquil>hassle -b -t -i -iv minor -p -uc -ca build -s\n</pre>\n\nThis will: \n* increment our pyproject version to `0.1.0`\n* delete the previous distribution files\n* update our package's dependencies\n* update our package's minimum Python version\n* generate updated documentation\n* build the distributable 'tar.gz' and '.wheel' files\n* update our changelog and git commit it with the message `chore: update changelog`\n* git commit the rest of the modifications and additions with the message `chore: build v0.1.0`\n* git tag the current code state as `<prefix_in_hassle_config_.toml>0.1.0`\n* publish the updated package to PyPi\n* install the package to our system\n* sync everything to our remote repo.\n\nFor reference, here is the full `-h/--help` output for hassle:\n\n<pre>\n>hassle -h\nusage: hassle [-h] [-b] [-t] [-i] [-iv INCREMENT_VERSION] [-p] [-rt] [-gt] [-uc] [-od] [-ca COMMIT_ALL] [-s] [package]\n\npositional arguments:\n  package               The name of the package or project to use, assuming it's a subfolder of your current working directory. Can also be a full path to the package. If nothing is given, the current working directory will be used.\n\noptions:\n  -h, --help            show this help message and exit\n  -b, --build           Build the package.\n  -t, --tag_version     Add a git tag corresponding to the version in pyproject.toml.\n  -i, --install         Install the package from source.\n  -iv INCREMENT_VERSION, --increment_version INCREMENT_VERSION\n                        Increment version in pyproject.toml. Can be one of \"major\", \"minor\", or \"patch\".\n  -p, --publish         Publish package to PyPi. Note: You must have configured twine and registered a PyPi account/generated an API key to use this option.\n  -rt, --run_tests      Run tests for the package.\n  -gt, --generate_tests\n                        Generate tests for the package.\n  -uc, --update_changelog\n                        Update changelog file.\n  -od, --overwrite_dependencies\n                        When building a package, packagelister will be used to update the dependencies list in pyproject.toml. The default behavior is to append any new dependencies to the current list so as not to erase any manually added dependencies that packagelister may not\n                        detect. If you don't have any manually added dependencies and want to remove any dependencies that your project no longer uses, pass this flag.\n  -ca COMMIT_ALL, --commit_all COMMIT_ALL\n                        Git stage and commit all tracked files with this supplied commit message. If 'build' is passed, all commits will have message: 'chore: build v{current_version}\n  -s, --sync            Pull from github, then push current commit to repo.\n</pre>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "automation,build,devops,packaging,test",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hassle",
    "package_url": "https://pypi.org/project/hassle/",
    "platform": null,
    "project_url": "https://pypi.org/project/hassle/",
    "project_urls": {
      "Documentation": "https://github.com/matt-manes/hassle/tree/main/docs",
      "Homepage": "https://github.com/matt-manes/hassle",
      "Source code": "https://github.com/matt-manes/hassle/tree/main/src/hassle"
    },
    "release_url": "https://pypi.org/project/hassle/2.2.0/",
    "requires_dist": [
      "auto-changelog",
      "black",
      "bs4==0.0.1",
      "build",
      "coverage",
      "isort",
      "packagelister~=1.1.2",
      "pdoc",
      "pytest~=7.2.1",
      "requests~=2.28.1",
      "tomlkit==0.11.6",
      "twine",
      "vermin==1.5.1"
    ],
    "requires_python": ">=3.10",
    "summary": "Create, build, test, and publish Python projects and packages.",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17404360,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed6773814c635b3a81130f26874d1f0a59f6dff64e380cf7d1b10ab50117df84",
          "md5": "181cab99131da9894bf9af3be2e197aa",
          "sha256": "91bd25fc8ef917b9a3a9de392006720d109e32050be878dbea8f74b87a2b7dcf"
        },
        "downloads": -1,
        "filename": "hassle-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "181cab99131da9894bf9af3be2e197aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 21514,
        "upload_time": "2023-02-18T22:30:26",
        "upload_time_iso_8601": "2023-02-18T22:30:26.187477Z",
        "url": "https://files.pythonhosted.org/packages/ed/67/73814c635b3a81130f26874d1f0a59f6dff64e380cf7d1b10ab50117df84/hassle-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5cda73ee966c9303314d232a68fefcfd6c5e8e41146a05251060b2895999e58",
          "md5": "409eb802fdca7739c0e91dd63b72c25b",
          "sha256": "a60ebfe876ad335a0ee9260e471acb79ec77d6a197ca8f72919f1c4a4339f31a"
        },
        "downloads": -1,
        "filename": "hassle-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "409eb802fdca7739c0e91dd63b72c25b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 142461,
        "upload_time": "2023-02-18T22:30:27",
        "upload_time_iso_8601": "2023-02-18T22:30:27.669928Z",
        "url": "https://files.pythonhosted.org/packages/b5/cd/a73ee966c9303314d232a68fefcfd6c5e8e41146a05251060b2895999e58/hassle-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e86d9e882ac1acc659905986c77a97cfa90b309ce059277d21e5cadb8295e1c",
          "md5": "9552630d29b5e0930efd8a5bb3613380",
          "sha256": "1a33bfdd4160ba9aa48624e469cf378c4ec15b45b1a6f389f8a525a416aa4db4"
        },
        "downloads": -1,
        "filename": "hassle-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9552630d29b5e0930efd8a5bb3613380",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 21456,
        "upload_time": "2023-02-19T00:52:07",
        "upload_time_iso_8601": "2023-02-19T00:52:07.126499Z",
        "url": "https://files.pythonhosted.org/packages/4e/86/d9e882ac1acc659905986c77a97cfa90b309ce059277d21e5cadb8295e1c/hassle-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8b504db0b4cae6bf20f2601caa05454d1347a36e44d9724f73cf3d6e6aec79b",
          "md5": "3512996415d68d44607d6caf42698d9b",
          "sha256": "bc4e23c645cde1c42d3960d33f40c53cd8c89ef8ece9b8152832c5521fa3ed91"
        },
        "downloads": -1,
        "filename": "hassle-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3512996415d68d44607d6caf42698d9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 142439,
        "upload_time": "2023-02-19T00:52:08",
        "upload_time_iso_8601": "2023-02-19T00:52:08.294973Z",
        "url": "https://files.pythonhosted.org/packages/a8/b5/04db0b4cae6bf20f2601caa05454d1347a36e44d9724f73cf3d6e6aec79b/hassle-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45513f194ec5a73717d08f91c9aff02f209e3b2420027343a81d7b1d02aeda37",
          "md5": "45e129c5eec0c4999a1f3630aa5bc037",
          "sha256": "0539fa1db070c7dd72ee28c0ff35d5aed7f3e2212874b8897b7fd0bc2cd3a268"
        },
        "downloads": -1,
        "filename": "hassle-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45e129c5eec0c4999a1f3630aa5bc037",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 21477,
        "upload_time": "2023-02-20T23:15:10",
        "upload_time_iso_8601": "2023-02-20T23:15:10.336674Z",
        "url": "https://files.pythonhosted.org/packages/45/51/3f194ec5a73717d08f91c9aff02f209e3b2420027343a81d7b1d02aeda37/hassle-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bda0a7b4768154db6bd8bb46eaec5695cada1dca36ecdd456eecb4f6c28d688",
          "md5": "819f6161db997709a4cbc1d43db9c415",
          "sha256": "5f1cca6bed3a0ca17c0c528976bc0aaeb50767faac4e396ace18545c8abdc5b2"
        },
        "downloads": -1,
        "filename": "hassle-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "819f6161db997709a4cbc1d43db9c415",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 142612,
        "upload_time": "2023-02-20T23:15:12",
        "upload_time_iso_8601": "2023-02-20T23:15:12.047180Z",
        "url": "https://files.pythonhosted.org/packages/2b/da/0a7b4768154db6bd8bb46eaec5695cada1dca36ecdd456eecb4f6c28d688/hassle-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2af5740384674101c8f30433390c48a6d12c8d26ffb0a85528f21cca3bfee92",
          "md5": "5a04a0f5190d10a9ba10439f9864905e",
          "sha256": "6deb1b5e88b286d0ffb436872cf17e0c1871cebbfb38c4c1bd056ad2220187ca"
        },
        "downloads": -1,
        "filename": "hassle-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a04a0f5190d10a9ba10439f9864905e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 21630,
        "upload_time": "2023-03-22T21:08:16",
        "upload_time_iso_8601": "2023-03-22T21:08:16.628832Z",
        "url": "https://files.pythonhosted.org/packages/d2/af/5740384674101c8f30433390c48a6d12c8d26ffb0a85528f21cca3bfee92/hassle-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2192671d7b354863eb4ba945441582971ee03ab2cdde88f058c5c7ea7653dc88",
          "md5": "5fd0fc9eabe82657ace8d604475c3af6",
          "sha256": "4f62fa98f2495828df08a23fa91beba0eac39629f2d5f07e9beddfe0206061a3"
        },
        "downloads": -1,
        "filename": "hassle-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5fd0fc9eabe82657ace8d604475c3af6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 143997,
        "upload_time": "2023-03-22T21:08:19",
        "upload_time_iso_8601": "2023-03-22T21:08:19.230904Z",
        "url": "https://files.pythonhosted.org/packages/21/92/671d7b354863eb4ba945441582971ee03ab2cdde88f058c5c7ea7653dc88/hassle-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2af5740384674101c8f30433390c48a6d12c8d26ffb0a85528f21cca3bfee92",
        "md5": "5a04a0f5190d10a9ba10439f9864905e",
        "sha256": "6deb1b5e88b286d0ffb436872cf17e0c1871cebbfb38c4c1bd056ad2220187ca"
      },
      "downloads": -1,
      "filename": "hassle-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a04a0f5190d10a9ba10439f9864905e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 21630,
      "upload_time": "2023-03-22T21:08:16",
      "upload_time_iso_8601": "2023-03-22T21:08:16.628832Z",
      "url": "https://files.pythonhosted.org/packages/d2/af/5740384674101c8f30433390c48a6d12c8d26ffb0a85528f21cca3bfee92/hassle-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2192671d7b354863eb4ba945441582971ee03ab2cdde88f058c5c7ea7653dc88",
        "md5": "5fd0fc9eabe82657ace8d604475c3af6",
        "sha256": "4f62fa98f2495828df08a23fa91beba0eac39629f2d5f07e9beddfe0206061a3"
      },
      "downloads": -1,
      "filename": "hassle-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5fd0fc9eabe82657ace8d604475c3af6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 143997,
      "upload_time": "2023-03-22T21:08:19",
      "upload_time_iso_8601": "2023-03-22T21:08:19.230904Z",
      "url": "https://files.pythonhosted.org/packages/21/92/671d7b354863eb4ba945441582971ee03ab2cdde88f058c5c7ea7653dc88/hassle-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}