{
  "info": {
    "author": "Danny Baez",
    "author_email": "danny.baez.jr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: OpenStack",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "# ospclientsdk\nAn SDK like wrapper around the openstackclient to reduce the need to write boilerplate \nsubprocess code. \n\n## Installation\n\nOspclientsdk can be easily installed with a one line command. It is recommended (as best practice) to create a virtual\nenvironment and install ospclientsdk. Please see the commands below to install. Note this is only supported\nin python 3.6 and higher.\n\n```\n# install python virtualenv\n$ pip install python-virtualenv\n\n# create virtualenv\n$ virtualenv ospclientsdk\n\n# activate virtualenv\n$ source ospclientsdk/bin/activate\n\n# install blaster\n$ (ospclientsdk) pip install ospclientsdk\n```\n\n## Usage\n\nLet's dive into how to use this sdk. \n\n### Initialize\nWhen working with the sdk the main interface you will be interacting with is the \n**ClientShell** class. This interface can be initialized with with or without credentials\n\n```python\nfrom ospclientsdk import ClientShell\nimport yaml\n\n\n\"\"\"\nYou can provide a string path to a clouds.yaml file. If a cloud isn't specified\nthe shell will default to using one called 'openstack'\n\"\"\"\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n\n\"\"\"\nYou can also preload the clouds.yaml file or build the dictionary by hand \nand provide it that way.\n\"\"\"\ncreds = {}\nwith open('clouds.yaml') as f:\n    creds = yaml.safe_load(f)\nshell = ClientShell(cloud_dict=creds, cloud='test')\n\n\n\"\"\"\nYou can also load the shell with credentials after it has been initialized\n\"\"\"\nshell = ClientShell()\nshell.load_cloud_config(cloud_dict=creds, cloud='test')\n```\n\nOnce the shell has been intialized you can see what command groups and commands\nare available in a couple of ways. \n\nNote when the commands are loaded the white spaces are replaced with \nunderscores ('_') to make it easier to parse and find what you're looking for. i.e. \n*server create* to *server_create* \n\n```python\nfrom ospclientsdk import ClientShell\n\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n\n\"\"\"\nYou can see a simplied version of all available command groups and their respective commands.\nThis will return a dictionary. Where the key is the name of the of the command group and \nthe values are a list of commands supported by the command group.  \n\"\"\"\ncmd_groups = shell.all_osp_cmd_groups\ncmd_list = cmd_groups.get('data_processing', {})\n\n\n\"\"\"\nIf you already know the name of the command group you want and would like to see the \ncommands available for it. You can access one of the many command group properties.\n\"\"\"\ncmd_list = shell.data_processing_commands\n\n\n\"\"\"\nIf you would like to check which are the available commands irrespective of command group\nyou can do so as well\n\"\"\"\nall_cmds = shell.all_osp_commands\n```\n### Executing Commands\nOnce you have an idea of what commands you want to execute you have a few different ways of \nexecuting them. Before we dive into those, let's talk a little bit about generating the options\nand their arguments. \n\n### Options\n\nThe options and argument values for the command actions are always defined as dictionaries. Let's\ntouch on a couple examples\n\n#### Example 1\n\nAny time an option takes an argument\n```python\n\n# This\ncommand create --option arg <res_name>\n\n\n# Can be defined like\n{'option': 'arg', 'res': 'res_name'}\n```\n\n#### Example 2\nAny time an option takes an argument and can be specified multiple times \n```python\n\n# This\ncommand create --option arg1 --option arg2 <res_name>\n\n# Can be defined like\n{'option': ['arg1', 'arg2'], 'res': 'res_name'}\n```\n\n#### Example 3\nAny time an option takes an argument with the value in k=v \n```python\n\n# This\ncommand create --option arg1=val1\n\n# Can be defined like\n{'option': [{'arg1': 'val1'}], 'res': 'res_name'} \n```\n\n#### Example 4\nAny time an option takes an argument with the value in k=v and can be specified multiple times. \n```python\n\n# This\ncommand create --option arg1=val1 --option arg2=val2 <res_name>\n\n# Can be defined like\n{'option': [{'arg1': 'val1'}, {'arg2': 'val2'}], 'res': 'res_name'}\n```\n\n#### Example 5\nAny time an option takes an argument but the value can be a comma separated list of k=v \n```python\n\n# This\ncommand create --option arg1=val1,arg2=val2,arg3=val3 <res_name>\n\n# Can be defined like\n{'option': [{'arg1': 'val1', 'arg2': 'val2', 'arg3': 'val3'}], 'res': 'res_name'}\n```\n\n#### Example 6\nAny time an option takes no argument and actions like a boolean flag \n```python\n\n# This\ncommand create --option <res_name>\n\n# Can be defined like\n{'option': True, 'res': 'res_name'}\n```\n\n#### Example 7\nIn the case of *add* command actions, which not only require the name or id of the resource\nit needs the name or id of the target resource you want to add\n```python\n\n# This\ncommand add --option arg1 <res_name> <tgt_res>\n\n# Can be defined like\n{'option': 'arg1', 'res': 'res_name', 'tgt_res': 'tgt_res'}\n```\n**Note** rather than `name` you could supply `id` and rather than `tgt_name` you can supply `tgt_id` \n\n#### Example 7\nIn the case of *delete* command actions, you can specify multiple resources\n```python\n\n# This\ncommand delete <res_name_1> <res_name_2>\n\n# Can be defined like\n{'res': ['res_name_1', 'res_name_2']}\n```\n\n\nFor a full list of commands and options refer to the\n[openstackclient](https://docs.openstack.org/python-openstackclient/latest/cli/command-list.html) documentation. \n\n#### High Level APIs\nThe first and recommended way is to use the high level APIs the shell provides \nthrough a series of proxy instances. Each proxy object reflects a command group\nand provides APIs that map to the corresponding CLI commands.\n\n\n\n##### Example 1\n\n```python\n\nfrom ospclientsdk import ClientShell\n\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n# Build a dictionary of the required arguements/options and their parameters.\n# Each key is command option and the value is the parameter.\nserver_params = dict(name=\"ccit_test_client\",\n                     image=\"rhel-7.5-server-x86_64-released\",\n                     flavor=\"m1.small\",\n                     key_name=\"db2-test\",\n                     network=[\"test_private_network\"],\n                     wait=True\n                     )\n\n# To create a server using the above define dict I simply access\n# the compute instance and us the server_create function\nresults = shell.compute.server_create(server_params)\n``` \n\n##### Example 2\n\n```python\n\nfrom ospclientsdk import ClientShell\n\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n# Build a dictionary of the required arguements/options and their parameters.\n# Each key is command option and the value is the parameter.\ntrunk_port_params = dict(name=\"test_compute_trunk\",\n                         parent_port=\"test_port\",\n                         subport=[dict(port=\"dummy_port\",\n                                       segmentation_type=\"vlan\",\n                                       segmentation_id=2007\n                                      )]\n                        )\n\n# To create a network trunk port using the above defined dict I simply access\n# the neutronclient instance and us the network_trunk_create function\nresults = shell.neutronclient.network_trunk_create(trunk_port_params)\n\n``` \n\n#### Mid Level API\n\nYou can use the **run_command** to to supply the command \n(using the underscore version of the command) and a dictionary options and it's parameters. \n\nThis can come in handy in scenarios where it's quite possible that other openstackclient \nplugins have been installed after the clientshell has been initialized. But you still want\nto take advantage of supplying the command options and arguments as a dictionary. \n\n```python\n\nfrom ospclientsdk import ClientShell\n\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n# Build a dictionary of the required arguements/options and their parameters.\n# Each key is command option and the value is the parameter.\ntrunk_port_params = dict(name=\"test_compute_trunk\",\n                         parent_port=\"test_port\",\n                         subport=[dict(port=\"dummy_port\",\n                                       segmentation_type=\"vlan\",\n                                       segmentation_id=2007\n                                      )]\n                        )\n\n# To create a network trunk port using the above defined dict I\n# use I pass in the command as a string and the options as a dictionaru\nresults = shell.run_command('network_trunk_create', trunk_port_params)\n``` \n\n#### Low Level API\n\nYou can use the function **run_raw_command** to explicitly run full commands. This will\nallow you to pass in a string directly. \n\nThis commmand might be useful if there are problems\nwith the clientshell normalizing the options or if you want to leverage the underlying shell to\nchain together commands and do some complex processing without having to setup \nsubprocess boilerplate code yourself.  \n\nNote since we aren't doing any string checking make sure you aren't passing in anything unsafe\nfor the underlying shell to execute. Also make sure to escape your command properly. \n```python\nfrom ospclientsdk import ClientShell\n\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n# Pass in a string representing a string command\nresults = shell.run_raw_command('openstack server show -f json')\n``` \n\n### Output\n\nWhen the ospclientsdk executes it will return back\nto you a dictionary. It will contain the following keys:\n* rc\n* stdout\n* stderr\n\nYou can use the rc value to determine if the command passed (0) or failed (1) and how to respond to \neither scenario. The stdout key will always be deserialized into a dictionary so that \nit can be easily manipulated and accessed. The stderr will typically always be a text string.\n\n### Running openstack commands remotely\n\nThere are use cases where it's useful to run the commands remotely on a test driver or bastion host.\nThe SDK provides a `remote_shell` context that can forward all CLI commands to the desired host without \na lot of extra boilerplate code. Before using this context first install the necessary ssh package:\n\n```bash\n$ pip install ospclientsdk['remote_shell']\n``` \n\nNext it's recommended you will load your ssh agent up with a key appropriate to the target client host.\n\nThen you can start using it. Below are some examples\n\n```python\nfrom ospclientsdk import ClientShell, remote_shell\n\nshell = ClientShell(cloud_file='clouds.yaml', cloud='test')\n\n# Build a dictionary of the required arguements/options and their parameters.\n# Each key is command option and the value is the parameter.\nserver_params = dict(res=\"ccit_test_client\",\n                     image=\"rhel-7.5-server-x86_64-released\",\n                     flavor=\"m1.small\",\n                     key_name=\"db2-test\",\n                     network=[\"test_private_network\"],\n                     wait=True\n                     )\n\n\n# Here is an example where we log into a remote host using user 'cloud-user' and a key file\n# using the high level api\nwith remote_shell(hostname=\"10.x.x.x\", username=\"cloud-user\", key_file=\"keys/test-key\"):\n        results = shell.compute.server_create(server_params)\n\n\n# Here is an example running raw commands to a remote host using the FQDN and 'fedora' user \n# but we've specified a client path for where to look for the 'openstack' binary since it is\n# not in the $PATH on the remote host. This comes in useful if you've installed the client\n# in a virtualenv on the remote host.\nwith remote_shell(hostname=\"host.example.com\", username=\"fedora\", key_file=\"keys/test-key\", client_path=\"/home/fedora/cbn/bin\"):\n        results = shell.run_raw_command('openstack server show -f json')\n\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dannyb48/ospclientsdk",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ospclientsdk",
    "package_url": "https://pypi.org/project/ospclientsdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/ospclientsdk/",
    "project_urls": {
      "Homepage": "https://github.com/Dannyb48/ospclientsdk"
    },
    "release_url": "https://pypi.org/project/ospclientsdk/0.5.0/",
    "requires_dist": [
      "openstackclient",
      "PyYaml",
      "plumbum ; extra == 'remote_shell'",
      "python-tripleoclient ; extra == 'tripleo'"
    ],
    "requires_python": "",
    "summary": "An SDK like wrapper around the openstackclient.",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7910082,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e18f0a353fd5cc34be5bee4448c46bba3086627f3d8dbec1f9266c44f54abb",
          "md5": "384c3921302c145b539063562eb37dc5",
          "sha256": "f5d2b769288a9185470416caf6e4b0888f62cde0e7cbd45d0f1b899aafc48926"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "384c3921302c145b539063562eb37dc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10764,
        "upload_time": "2020-07-04T07:27:05",
        "upload_time_iso_8601": "2020-07-04T07:27:05.308586Z",
        "url": "https://files.pythonhosted.org/packages/a7/e1/8f0a353fd5cc34be5bee4448c46bba3086627f3d8dbec1f9266c44f54abb/ospclientsdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ae1330526a8c53594d26a751171b388e16875e9f62ac1af380fd8be819184d3",
          "md5": "02b601ee6554d3a5b694c3d66989110e",
          "sha256": "f719352da20829d01783ead674952b42c6f0b038ea4ecfd0cdf6b5ba68d7cc30"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "02b601ee6554d3a5b694c3d66989110e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11372,
        "upload_time": "2020-07-04T07:27:07",
        "upload_time_iso_8601": "2020-07-04T07:27:07.412320Z",
        "url": "https://files.pythonhosted.org/packages/2a/e1/330526a8c53594d26a751171b388e16875e9f62ac1af380fd8be819184d3/ospclientsdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6858b4f228798c49a60c381a6b0aa36554a564810959d87715bd33ad007124a",
          "md5": "e0c4cf7694b3a48f82d5ac200a7f4014",
          "sha256": "de9ae84a29cab61598f1c196dec022058008e0bb4b06c14233e689aac3f8309a"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0c4cf7694b3a48f82d5ac200a7f4014",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10756,
        "upload_time": "2020-07-07T01:29:16",
        "upload_time_iso_8601": "2020-07-07T01:29:16.721420Z",
        "url": "https://files.pythonhosted.org/packages/c6/85/8b4f228798c49a60c381a6b0aa36554a564810959d87715bd33ad007124a/ospclientsdk-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7aee22ae852153d5ac02d384a3ab5d3d028994eeef9ed624e0d69c3ba7be9c36",
          "md5": "951e5a4ce6e9241b5cd0e6b98f409615",
          "sha256": "8a766ba3aedc4714c28915e35cdd9270c4f95b4a228c21ba53ae5650637d7812"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "951e5a4ce6e9241b5cd0e6b98f409615",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11478,
        "upload_time": "2020-07-07T01:29:17",
        "upload_time_iso_8601": "2020-07-07T01:29:17.734207Z",
        "url": "https://files.pythonhosted.org/packages/7a/ee/22ae852153d5ac02d384a3ab5d3d028994eeef9ed624e0d69c3ba7be9c36/ospclientsdk-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb58dbb11da495a1286382d57808a345df74bcf3aa79d44c9eef726aa3601771",
          "md5": "b623f331e96a82453ab29a7f08ec6983",
          "sha256": "17ff1ee5b50452725a65792dd1e9cac54f1cfe0d2d370b9aff0877cfd625a3a5"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b623f331e96a82453ab29a7f08ec6983",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10845,
        "upload_time": "2020-07-17T02:55:18",
        "upload_time_iso_8601": "2020-07-17T02:55:18.747168Z",
        "url": "https://files.pythonhosted.org/packages/fb/58/dbb11da495a1286382d57808a345df74bcf3aa79d44c9eef726aa3601771/ospclientsdk-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e637677edc3fb7b6483f615dd149f33bb48a7a492f06190a04463c895b793d7",
          "md5": "92c7c623c6634e7095560ec67d7790a9",
          "sha256": "3eab38c0be93f9e83024d921d27a50129e4db861ec54490077a9dfe4610e7e66"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "92c7c623c6634e7095560ec67d7790a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12132,
        "upload_time": "2020-07-17T02:55:19",
        "upload_time_iso_8601": "2020-07-17T02:55:19.847940Z",
        "url": "https://files.pythonhosted.org/packages/9e/63/7677edc3fb7b6483f615dd149f33bb48a7a492f06190a04463c895b793d7/ospclientsdk-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9edbd847132fe23bffd114e55bb6ae35abfafc70a000a6f157eb4d927a9ca234",
          "md5": "c49d8e66745b19ce71a9b341eadb7fda",
          "sha256": "a43d049f5b83c974dba1a4ee66021dc554a4e8c9689d3d4d58730fae9f990537"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c49d8e66745b19ce71a9b341eadb7fda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16144,
        "upload_time": "2020-07-28T06:50:20",
        "upload_time_iso_8601": "2020-07-28T06:50:20.916516Z",
        "url": "https://files.pythonhosted.org/packages/9e/db/d847132fe23bffd114e55bb6ae35abfafc70a000a6f157eb4d927a9ca234/ospclientsdk-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "694a6e7b377721fcc31dd58f84e5a687ebc41ef6d66b6497a04b02efb6adccc1",
          "md5": "894e21f2ef829e99296a2f421c6144fc",
          "sha256": "8dbe4269c6b23e049227df387d3c441231c4be1a57fc1039cd42a5ea98c6953e"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "894e21f2ef829e99296a2f421c6144fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18317,
        "upload_time": "2020-07-28T06:50:21",
        "upload_time_iso_8601": "2020-07-28T06:50:21.952743Z",
        "url": "https://files.pythonhosted.org/packages/69/4a/6e7b377721fcc31dd58f84e5a687ebc41ef6d66b6497a04b02efb6adccc1/ospclientsdk-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d79a4b72b45eaad7169bb30cf8c06d7a66c117d415b0f5c006ea05afa084134",
          "md5": "4b0cfe7e913d54018b8f1619d32d0d69",
          "sha256": "b5b2a5e96ba0a3fa7a14325d2f35985a91996997ed7d6dd42b5f951f15cbf925"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b0cfe7e913d54018b8f1619d32d0d69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16128,
        "upload_time": "2020-08-07T19:39:24",
        "upload_time_iso_8601": "2020-08-07T19:39:24.100419Z",
        "url": "https://files.pythonhosted.org/packages/1d/79/a4b72b45eaad7169bb30cf8c06d7a66c117d415b0f5c006ea05afa084134/ospclientsdk-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d14124ce77547d9531f8583e258c19a2f218704315dd9f028128133c9ee678e5",
          "md5": "efc173fd7030379d14fa9cf221c9602e",
          "sha256": "b39162e81fe069270e0bb8f6256dce917c5ee8cfdee3a1a5531d46db76519f39"
        },
        "downloads": -1,
        "filename": "ospclientsdk-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efc173fd7030379d14fa9cf221c9602e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18335,
        "upload_time": "2020-08-07T19:39:25",
        "upload_time_iso_8601": "2020-08-07T19:39:25.605844Z",
        "url": "https://files.pythonhosted.org/packages/d1/41/24ce77547d9531f8583e258c19a2f218704315dd9f028128133c9ee678e5/ospclientsdk-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d79a4b72b45eaad7169bb30cf8c06d7a66c117d415b0f5c006ea05afa084134",
        "md5": "4b0cfe7e913d54018b8f1619d32d0d69",
        "sha256": "b5b2a5e96ba0a3fa7a14325d2f35985a91996997ed7d6dd42b5f951f15cbf925"
      },
      "downloads": -1,
      "filename": "ospclientsdk-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b0cfe7e913d54018b8f1619d32d0d69",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16128,
      "upload_time": "2020-08-07T19:39:24",
      "upload_time_iso_8601": "2020-08-07T19:39:24.100419Z",
      "url": "https://files.pythonhosted.org/packages/1d/79/a4b72b45eaad7169bb30cf8c06d7a66c117d415b0f5c006ea05afa084134/ospclientsdk-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d14124ce77547d9531f8583e258c19a2f218704315dd9f028128133c9ee678e5",
        "md5": "efc173fd7030379d14fa9cf221c9602e",
        "sha256": "b39162e81fe069270e0bb8f6256dce917c5ee8cfdee3a1a5531d46db76519f39"
      },
      "downloads": -1,
      "filename": "ospclientsdk-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "efc173fd7030379d14fa9cf221c9602e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18335,
      "upload_time": "2020-08-07T19:39:25",
      "upload_time_iso_8601": "2020-08-07T19:39:25.605844Z",
      "url": "https://files.pythonhosted.org/packages/d1/41/24ce77547d9531f8583e258c19a2f218704315dd9f028128133c9ee678e5/ospclientsdk-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}