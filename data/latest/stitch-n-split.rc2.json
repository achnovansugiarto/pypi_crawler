{
  "info": {
    "author": "Fuzail Palnak",
    "author_email": "fuzailpalnak@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# stitchNsplit\n![GitHub](https://img.shields.io/github/license/cypherics/ShapeMerge)\n![Python](https://img.shields.io/badge/python-v3.6+-blue.svg)\n![Contributions welcome](https://img.shields.io/badge/contributions-welcome-orange.svg)\n\nA Python Library To Stitch And Split Images for any dimension, computing grid and windows over the specified dimension\n\n## Installation\n    \n- Installing rasterio dependency using conda\n        \n        conda install -c conda-forge rasterio\n\n- Installing rasterio dependency from [pip](https://rasterio.readthedocs.io/en/latest/installation.html)\n         \n          \n    pip install stitch_n_split\n    \n    \n## Split\n\nSplit Operation can be performed on two sets of Imagery, <b>Geo Referenced</b> and <b>Non Geo Referenced</b>\nThe Windows formed for the split operation are adjusted based on the split_size and img_size, whenever \n<code>img_size%split_size != 0</code> is true, this suggests that there will be overlapping windows. \nOverlapping windows are generated only when required. \n\n<table>\n  <tr>\n    <td>Original Image</td>\n     <td>Images After Split</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://user-images.githubusercontent.com/24665570/89780629-73256d80-db2f-11ea-9db5-ee50573d8c6d.png\" width=600 height=200></td>\n    <td><img src=\"https://user-images.githubusercontent.com/24665570/89780554-483b1980-db2f-11ea-8830-d13c728eadcd.png\" width=2000 height=200></td>\n  </tr>\n </table>\n \n- ##### Geo Referenced\n    GeoReferenced Imagery have reference coordinate information stored in them.\nThis is taken into account while splitting geo referenced imagery, assigning correct reference information to the cut images,\nthus preserving the over all reference information \n    > Geo Reference imagery must be of [tiff](https://en.wikipedia.org/wiki/TIFF) format.\n\n- ##### Non GeoReferenced \n    For Non GeoReferenced the split is straight forward, it gets cropped in to specified dimension\n\n*_Split Entire Directory_:*\n```python\nfrom stitch_n_split.split.images import SplitGeo\nsplit = SplitGeo(split_size=(124, 267), img_size=(512, 512))\nsplit.perform_directory_split(\"dir_path\")\n```\nPerforming Split over individual images can be done by accessing split as an iterator.\n\n*_Split Iterator using window_:*\n```python\nfrom stitch_n_split.split.images import SplitGeo\nfrom stitch_n_split.utility import open_image\n\nsplit = SplitGeo(split_size=(124, 267), img_size=(512, 512))\nimage = open_image(\"img_path\", is_geo_reference=True)\nfor win_number, window in split:\n    split_image = split.window_split(image, window)\n    # perform operation ....\n```\n\n## Stitch \n\nWhile Performing Stitch if there are any overlapping window, those windows are merged seamlessly, without\nhampering the pixel information and image dimension\n\nEvery Split image can be associated to the original image by the *window number* or the *window* itself.\n\n*_Using stitchNsplit together_:*\n```python\nfrom stitch_n_split.stitch.images import Stitch\nfrom stitch_n_split.utility import save_image\nfrom stitch_n_split.split.images import SplitNonGeo\nfrom stitch_n_split.utility import open_image\nimport numpy as np\n\nsplit = SplitNonGeo(split_size=(124, 267), img_size=(512, 512, 3))\nimage = open_image(\"img_path\")\nstitched_image = np.zeros((512, 512, 3))\n\nfor win_number, window in split:\n    split_image = split.window_split(image, win_number)\n    # perform operation ....\n    stitched_image = Stitch.stitch_image(split_image, stitched_image, window)\nsave_image(\"path_to_save\", stitched_image)\n``` \n  \n## Mesh Computing\n\n![stitchNsplit](https://user-images.githubusercontent.com/24665570/89779619-6e5fba00-db2d-11ea-8705-d8ba781f72ea.gif)\n\n- #### OverLapping Grid\n    \n    The grid creation process assumes the provided grid size might not be evenly distributed over the mesh size and\n    whenever such situation arises, the grid adjusts its position without compromising the grid size, thus generating \n    overlapping grid in the mesh\n    \n- #### NonOverlapping Grid\n    \n    No matter what the provided grid size, the goal is to find a grid size which can be evenly distributed over the\n    provided mesh size, if the provided sizes presents the possibility of a overlap then the size of the \n    grid is adjusted, to provide non overlapping grid\n    \n    \n<table>\n  <tr>\n    <td>Mesh with Overlapping Grid</td>\n     <td>Mesh with Non Overlapping Grid</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://user-images.githubusercontent.com/24665570/89773311-49654a00-db21-11ea-9955-f1230d432989.png\" width=812 height=350></td>\n    <td><img src=\"https://user-images.githubusercontent.com/24665570/89773649-f8a22100-db21-11ea-8bcc-deeb46939a51.png\" width=812 height=350></td>\n  </tr>\n </table>\n \n _*mesh size = (10000, 10000)*,  *grid size = (2587, 3000)* were used for above example_\n\nThe number of grid generated in both cases are the same, the only difference is, the image in the left doesn't compromises the grid size when it encounters\nan overlap, where as the image on the right adjusts its grid size to <code>mesh size // (mesh size / grid size)</code> \nto avoid any overlap\n\n\n#### Mesh Computing From geo-referenced image\nThe One mandatory Parameter while computing Mesh is the geo referencing transformation matrix.\n\n- When the size of the mesh and the grid are provided in regular dimension, then the position where the mesh is to be drawn is\nextracted from the affine transform and conversion of the dimension to reference coordinate system is done with the help\nof pixel resolution present in affine transform\n\n        mesh = mesh_from_geo_transform(\n        mesh_size=(w, h),\n        transform=transfromation_matrix, \n        grid_size=(w, h)\n        )\n\n    _This will generate a *Mesh* of dimension *(w, h)* which will have *Grid* of dimension *(w, h)*, \nwhich will be bounded within the region *transform * (mesh_size)*_\n\n- When the bounds of mesh are passed, The transformation matrix for the mesh have to be constructed explicitly, the width and\nheight are computed internally from the given transformation\n\n        transfromation_matrix = get_affine_transform(\n        mesh_bounds[0],\n        mesh_bounds[-1],\n        *get_pixel_resolution(image.transform)\n        ) \n        \n        mesh = mesh_from_geo_transform(\n            grid_size=(w, h),\n            transform=transfromation_matrix,\n            mesh_bounds=mesh_bounds,\n        )\n\n## Output\n\nGrid can can accessed by the extent() call which is a Generator for providing individual grid along with the information associated \nwith the grid\n\n    mesh_overlap = mesh_from_geo_transform(mesh_size=(10000, 10000, 3), transform=affine_transform,\n    grid_size=(2587, 3000, 3))\n    \n    for grid in mesh.extent():\n        print(grid)\n        .....\n\nIf the coordinate system available is different than the ones listed [here](#Working-Coordinate-System), then the coordinate must be reprojected before \nmesh computation\n    \n    transform=geo_transform_to_26190(w, h, arbitrary_image_coordinate_system.bounds,\n         arbitrary_image_coordinate_system.crs),\n\nIf width and height of the bounds are not known, to calculate it, use\n\n    compute_dimension(arbitrary_image_coordinate_system.bounds, pixel_resolution)\n\n    \n## Working Coordinate System\n1. EPSG:26910\n2. EPSG:26986",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "GIS Rasterio Sticth Split Mesh Grid Geo Reference",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stitch-n-split",
    "package_url": "https://pypi.org/project/stitch-n-split/",
    "platform": "",
    "project_url": "https://pypi.org/project/stitch-n-split/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/stitch-n-split/0.1.1/",
    "requires_dist": null,
    "requires_python": "~=3.3",
    "summary": "Library for stitching and spliting",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8374120,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28c37d67dd0025bcd1647a3d50f28bade3fa3d509cbb374c5dc66a8f44b9fa12",
          "md5": "fdcc47e7c34d0f305b959b12a5d72ac8",
          "sha256": "50f96d564496545cd567487cfa77c08671720408dd6021e5e9f9b489709e733b"
        },
        "downloads": -1,
        "filename": "stitch_n_split-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fdcc47e7c34d0f305b959b12a5d72ac8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.3",
        "size": 12154,
        "upload_time": "2020-10-09T07:44:40",
        "upload_time_iso_8601": "2020-10-09T07:44:40.596480Z",
        "url": "https://files.pythonhosted.org/packages/28/c3/7d67dd0025bcd1647a3d50f28bade3fa3d509cbb374c5dc66a8f44b9fa12/stitch_n_split-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "500c2ebb701ecd6b1792fc4a0ee9e55732b683624e054ae3bb3c161aacb3b511",
          "md5": "b22a47a6b6c2a0fd1d5a733bf8ac774b",
          "sha256": "b3c680bb9ffae7b515bd81265bfbf2a9c8fdf66224ac6816557711a548fee091"
        },
        "downloads": -1,
        "filename": "stitch_n_split-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b22a47a6b6c2a0fd1d5a733bf8ac774b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.3",
        "size": 12294,
        "upload_time": "2020-10-09T08:15:05",
        "upload_time_iso_8601": "2020-10-09T08:15:05.070783Z",
        "url": "https://files.pythonhosted.org/packages/50/0c/2ebb701ecd6b1792fc4a0ee9e55732b683624e054ae3bb3c161aacb3b511/stitch_n_split-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "500c2ebb701ecd6b1792fc4a0ee9e55732b683624e054ae3bb3c161aacb3b511",
        "md5": "b22a47a6b6c2a0fd1d5a733bf8ac774b",
        "sha256": "b3c680bb9ffae7b515bd81265bfbf2a9c8fdf66224ac6816557711a548fee091"
      },
      "downloads": -1,
      "filename": "stitch_n_split-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b22a47a6b6c2a0fd1d5a733bf8ac774b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.3",
      "size": 12294,
      "upload_time": "2020-10-09T08:15:05",
      "upload_time_iso_8601": "2020-10-09T08:15:05.070783Z",
      "url": "https://files.pythonhosted.org/packages/50/0c/2ebb701ecd6b1792fc4a0ee9e55732b683624e054ae3bb3c161aacb3b511/stitch_n_split-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}