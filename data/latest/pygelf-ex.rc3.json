{
  "info": {
    "author": "",
    "author_email": "Ivan Mukhin <muhin.ivan@gmail.com>, Anders Ã…gren <anders.agren@rssoftware.se>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "pygelf\n======\n|pypi| |downloads|\n\n.. |pypi| image:: https://badge.fury.io/py/pygelf-ex.svg\n    :target: https://pypi.python.org/pypi/pygelf-ex\n.. |downloads| image:: https://pepy.tech/badge/pygelf-ex/month\n    :target: https://pypi.org/project/pygelf-ex/\n\nPython logging handlers with GELF (Graylog Extended Log Format) support.\n\nCurrently TCP, UDP, TLS (encrypted TCP) and HTTP logging handlers are supported.\n\nGet pygelf\n==========\n.. code:: python\n\n    pip install pygelf-ex\n\nUsage\n=====\n\n.. code:: python\n\n    from pygelf import GelfTcpHandler, GelfUdpHandler, GelfTlsHandler, GelfHttpHandler\n    import logging\n\n\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger()\n    logger.addHandler(GelfTcpHandler(host='127.0.0.1', port=9401))\n    logger.addHandler(GelfUdpHandler(host='127.0.0.1', port=9402))\n    logger.addHandler(GelfTlsHandler(host='127.0.0.1', port=9403))\n    logger.addHandler(GelfHttpHandler(host='127.0.0.1', port=9404))\n\n    logger.info('hello gelf')\n\nMessage structure\n=================\n\nAccording to the GELF spec, each message has the following mandatory fields:\n\n- **version**: '1.1', can be overridden when creating a logger\n- **short_message**: the log message itself\n- **timestamp**: current timestamp\n- **level**: syslog-compliant_ log level number (e.g. WARNING will be sent as 4)\n- **host**: hostname of the machine that sent the message\n- **full_message**: this field contains stack trace and is being written **ONLY** when logging an exception, e.g.\n\n.. code:: python\n\n    try:\n        1/0\n    except ZeroDivisionError as e:\n        logger.exception(e)\n\n.. _syslog-compliant: https://en.wikipedia.org/wiki/Syslog#Severity_level\n\nIn debug mode (when handler was created with debug=True option) each message contains some extra fields (which are pretty self-explanatory): \n\n- **_file**\n- **_line**\n- **_module**\n- **_func**\n- **_logger_name**\n\nConfiguration\n=============\n\nEach handler has the following parameters:\n\n- **host**: IP address of the GELF input\n- **port**: port of the GELF input\n- **debug** (False by default): if true, each log message will include debugging info: module name, file name, line number, method name\n- **version** ('1.1' by default): GELF protocol version, can be overridden\n- **include_extra_fields** (False by default): if true, each log message will include all the extra fields set to LogRecord\n- **json_default** (:code:`str` with exception for several :code:`datetime` objects): function that is called for objects that cannot be serialized to JSON natively by python. Default implementation is custom function that returns result of :code:`isoformat()` method for :code:`datetime.datetime`, :code:`datetime.time`, :code:`datetime.date` objects and result of :code:`str(obj)` call for other objects (which is string representation of an object with fallback to :code:`repr`)\n\nAlso, there are some handler-specific parameters.\n\nUDP:\n\n- **chunk\\_size** (1300 by default) - maximum length of the message. If log length exceeds this value, it splits into multiple chunks (see https://www.graylog.org/resources/gelf/ section \"chunked GELF\") with the length equals to this value. This parameter must be less than the MTU_. If the logs don't seem to be delivered, try to reduce this value.\n- **compress** (True by default) - if true, compress log messages before sending them to the server\n\n.. _MTU: https://en.wikipedia.org/wiki/Maximum_transmission_unit\n\nTLS:\n\n- **validate** (False by default) - if true, validate server certificate. If server provides a certificate that doesn't exist in **ca_certs**, you won't be able to send logs over TLS\n- **ca_certs** (None by default) - path to CA bundle file. This parameter is required if **validate** is true.\n- **certfile** (None by default) - path to certificate file that will be used to identify ourselves to the remote endpoint. This is necessary when the remote server has client authentication required. If **certfile** contains the private key, it should be placed before the certificate.\n- **keyfile** (None by default) - path to the private key. If the private key is stored in **certfile** this parameter can be None.\n\nHTTP:\n\n- **compress** (True by default) - if true, compress log messages before sending them to the server\n- **path** ('/gelf' by default) - path of the HTTP input (http://docs.graylog.org/en/latest/pages/sending_data.html#gelf-via-http)\n- **timeout** (5 by default) - amount of seconds that HTTP client should wait before it discards the request if the server doesn't respond\n\nHTTPS:\n\n- **headers** (empty by default) - default headers for the request, for example to set the content type\n- **waitForResponse** (False by default) - whether or not to wait for the response before returning\n\nStatic fields\n=============\n\nIf you need to include some static fields into your logs, simply pass them to the handler constructor. Each additional field should start with underscore. You can't add field '\\_id'.\n\nExample:\n\n.. code:: python\n\n    handler = GelfUdpHandler(host='127.0.0.1', port=9402, _app_name='pygelf', _something=11)\n    logger.addHandler(handler)\n\nDynamic fields\n==============\n\nIf you need to include some dynamic fields into your logs, add them to record by using LoggingAdapter or logging.Filter and create handler with include_extra_fields set to True.\nAll the non-trivial fields of the record will be sent to graylog2 with '\\_' added before the name\n\nExample:\n\n.. code:: python\n\n    class ContextFilter(logging.Filter):\n\n        def filter(self, record):\n            record.job_id = threading.local().process_id\n            return True\n\n    logger.addFilter(ContextFilter())\n    handler = GelfUdpHandler(host='127.0.0.1', port=9402, include_extra_fields=True)\n    logger.addHandler(handler)\n\nDefining fields from environment\n================================\n\nIf you need to include some fields from the environment into your logs, add them to record by using `additional_env_fields`.\n\nThe following example will add an `env` field to the logs, taking its value from the environment variable `FLASK_ENV`.\n\n.. code:: python\n\n    handler = GelfTcpHandler(host='127.0.0.1', port=9402, include_extra_fields=True, additional_env_fields={'env': 'FLASK_ENV'})\n    logger.addHandler(handler)\n\nThe following can also be used in defining logging from configuration files (yaml/ini):\n\n.. code:: ini\n\n    [formatters]\n    keys=standard\n\n    [formatter_standard]\n    class=logging.Formatter\n    format=%(message)s\n\n    [handlers]\n    keys=graylog\n\n    [handler_graylog]\n    class=pygelf.GelfTcpHandler\n    formatter=standard\n    args=('127.0.0.1', '12201')\n    kwargs={'include_extra_fields': True, 'debug': True, 'additional_env_fields': {'env': 'FLASK_ENV'}}\n\n    [loggers]\n    keys=root\n\n    [logger_root]\n    level=WARN\n    handlers=graylog\n\nRunning tests\n=============\n\nTo run tests, you'll need tox_. After installing, simply run it:\n\n.. code::\n\n    tox\n\n.. _tox: https://pypi.python.org/pypi/tox\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygelf-ex",
    "package_url": "https://pypi.org/project/pygelf-ex/",
    "platform": null,
    "project_url": "https://pypi.org/project/pygelf-ex/",
    "project_urls": {
      "Homepage": "https://github.com/rs-anders-agren/pygelf-ex"
    },
    "release_url": "https://pypi.org/project/pygelf-ex/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Logging handlers with GELF support",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16731687,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c333527a1e887e5b3afef9d23946a53544789463c200c8b4c469cd7367563bbb",
          "md5": "17011fc9c3f1483ed22d48f3bbbcee35",
          "sha256": "e8d058b5fff634782f459b6217681b60a5314ad41cf1caf0b4d142496b1dbb2c"
        },
        "downloads": -1,
        "filename": "pygelf_ex-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17011fc9c3f1483ed22d48f3bbbcee35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9166,
        "upload_time": "2023-02-06T21:07:30",
        "upload_time_iso_8601": "2023-02-06T21:07:30.109166Z",
        "url": "https://files.pythonhosted.org/packages/c3/33/527a1e887e5b3afef9d23946a53544789463c200c8b4c469cd7367563bbb/pygelf_ex-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "686ccef154b16bf67ea6edb876e8be633972dd3404dae679a40fc4630c3712e4",
          "md5": "bb5d3585d3af1a0b57412e18732f2c13",
          "sha256": "36c8744d09464c0ea571061c5fab6502422fbbd1c0fe3aebf93e0f1613039cd1"
        },
        "downloads": -1,
        "filename": "pygelf_ex-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb5d3585d3af1a0b57412e18732f2c13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19498,
        "upload_time": "2023-02-06T21:07:31",
        "upload_time_iso_8601": "2023-02-06T21:07:31.490011Z",
        "url": "https://files.pythonhosted.org/packages/68/6c/cef154b16bf67ea6edb876e8be633972dd3404dae679a40fc4630c3712e4/pygelf_ex-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60da0c4f94c5323927ded3caea5ac393aea00e49185075c8c3fe5dda5b0da262",
          "md5": "d8c7309be91df860da755c9737d6f242",
          "sha256": "5c7c4a56a20b402fb9384f583dc359585c8ad76e206db265df3ed976841da829"
        },
        "downloads": -1,
        "filename": "pygelf_ex-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8c7309be91df860da755c9737d6f242",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9100,
        "upload_time": "2023-02-06T21:13:32",
        "upload_time_iso_8601": "2023-02-06T21:13:32.767744Z",
        "url": "https://files.pythonhosted.org/packages/60/da/0c4f94c5323927ded3caea5ac393aea00e49185075c8c3fe5dda5b0da262/pygelf_ex-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "363d02d01f71b799deeb7427d4a1f0feaaeef6d049135f25700727fb9963ff71",
          "md5": "4fc210db93df843f5fd0cdee07b5df10",
          "sha256": "14075d12af9091d6edc4cbe9077f5b3e458d9ef315faacb923d7dbffe555898a"
        },
        "downloads": -1,
        "filename": "pygelf_ex-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4fc210db93df843f5fd0cdee07b5df10",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19427,
        "upload_time": "2023-02-06T21:13:35",
        "upload_time_iso_8601": "2023-02-06T21:13:35.004513Z",
        "url": "https://files.pythonhosted.org/packages/36/3d/02d01f71b799deeb7427d4a1f0feaaeef6d049135f25700727fb9963ff71/pygelf_ex-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b8b7cbfa3eb4a6ff3e6beb434726f29cea39fee4cb3dfe1d476b8f1241a87c8",
          "md5": "9154fe43f69e8727d9243a35b537dce9",
          "sha256": "46b05c806e32b48f6d7964565433676d2ce3a751039a8a548f4eebaa2598984c"
        },
        "downloads": -1,
        "filename": "pygelf_ex-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9154fe43f69e8727d9243a35b537dce9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9223,
        "upload_time": "2023-02-07T18:03:24",
        "upload_time_iso_8601": "2023-02-07T18:03:24.451461Z",
        "url": "https://files.pythonhosted.org/packages/3b/8b/7cbfa3eb4a6ff3e6beb434726f29cea39fee4cb3dfe1d476b8f1241a87c8/pygelf_ex-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83d19b8b8637f743376f5ffa4a3cbf5f178e0d97bb9081d9e8221a38ea3e4e1e",
          "md5": "e2962edf453481ae74cbdfb69781e33e",
          "sha256": "57dac31a5086efccb3da276470fbd3887c9f3c77a8885d037af8052442217c9a"
        },
        "downloads": -1,
        "filename": "pygelf_ex-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e2962edf453481ae74cbdfb69781e33e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19623,
        "upload_time": "2023-02-07T18:03:26",
        "upload_time_iso_8601": "2023-02-07T18:03:26.783951Z",
        "url": "https://files.pythonhosted.org/packages/83/d1/9b8b8637f743376f5ffa4a3cbf5f178e0d97bb9081d9e8221a38ea3e4e1e/pygelf_ex-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b8b7cbfa3eb4a6ff3e6beb434726f29cea39fee4cb3dfe1d476b8f1241a87c8",
        "md5": "9154fe43f69e8727d9243a35b537dce9",
        "sha256": "46b05c806e32b48f6d7964565433676d2ce3a751039a8a548f4eebaa2598984c"
      },
      "downloads": -1,
      "filename": "pygelf_ex-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9154fe43f69e8727d9243a35b537dce9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9223,
      "upload_time": "2023-02-07T18:03:24",
      "upload_time_iso_8601": "2023-02-07T18:03:24.451461Z",
      "url": "https://files.pythonhosted.org/packages/3b/8b/7cbfa3eb4a6ff3e6beb434726f29cea39fee4cb3dfe1d476b8f1241a87c8/pygelf_ex-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83d19b8b8637f743376f5ffa4a3cbf5f178e0d97bb9081d9e8221a38ea3e4e1e",
        "md5": "e2962edf453481ae74cbdfb69781e33e",
        "sha256": "57dac31a5086efccb3da276470fbd3887c9f3c77a8885d037af8052442217c9a"
      },
      "downloads": -1,
      "filename": "pygelf_ex-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e2962edf453481ae74cbdfb69781e33e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19623,
      "upload_time": "2023-02-07T18:03:26",
      "upload_time_iso_8601": "2023-02-07T18:03:26.783951Z",
      "url": "https://files.pythonhosted.org/packages/83/d1/9b8b8637f743376f5ffa4a3cbf5f178e0d97bb9081d9e8221a38ea3e4e1e/pygelf_ex-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}