{
  "info": {
    "author": "Dan Davis",
    "author_email": "dan@danizen.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "License :: Public Domain",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Text Processing :: General",
      "Topic :: Utilities"
    ],
    "description": "# pymarcspec\n[![Build Status](https://travis-ci.org/danizen/pymarcspec.svg?branch=main)](https://travis-ci.org/danizen/pymarcspec) [![Coverage Status](https://coveralls.io/repos/github/danizen/pymarcspec/badge.svg?branch=main)](https://coveralls.io/github/danizen/pymarcspec?branch=main)\n\n## Summary \n\nAn implementation of [MarcSpec](https://github.com/MarcSpec/MarcSpec)\non top of [pymarc](https://gitlab.com/pymarc/pymarc) for searching\nMARC records.\n\n## Usage\n\nThe idea is to easily use strings to search over MARC without writing complicated\ncode to handle data.\n\n```python\nimport sys\nfrom pymarcspec import MarcSearchParser\nfrom pymarc import MARCReader\n\nparser = MarcSearchParser()\nspec = parser.parse('650$a$0')\nwith open(sys.argv[1], 'rb') as f:\n    for record in MARCReader(f):\n        subjects = spec.search(record)\n        print(subjects)\n```\n\nThe `TextStyle` class governs how results are combined into strings (or not).\nYou can subclass `TextStyle` or `BaseTextStyle` to do anything you want with combining\nthe results, or you can handle it yourself. \n\nThere is also a `MarcSearch` object that memoizes each search expression, so that \nyou can conveniently run a number of different searches without creating several\nparsed specs. For example:\n\n```python\nimport csv\nimport sys\nfrom pymarcspec import MarcSearch, TextStyle\nfrom pymarc import MARCReader\n\nwriter = csv.writer(sys.stdout, dialect='unix', quoting=csv.QUOTE_MINIMAL)\nwriter.writerow(['id', 'title', 'subjects'])\n\nstyle = TextStyle(field_delimiter=':')\nmarcsearch = MarcSearch(style)\nwith open(sys.argv[1], 'rb') as f:\n    for record in MARCReader(f):\n        control_id = marcsearch.search('100', record)\n        title = marcsearch.search('245[0]$a-c', record)\n        subjects = marcsearch.search('650$a', record)\n        writer.writerow([control_id, title, subjects])        \n```\n\n## Development\n\n### Building the Parser\n\nTo build the parser, run:\n\n```bash\npython -m tatsu -o marcparser/parser.py marcparser/marcparser.ebnf\n```\n\nNote that this builds a class `MarcSpecParser`, which implements the full specification from\n[MarcSpec](https://github.com/MarcSpec/MarcSpec), the `MarcSearchParser` is a subclass\nthat builds an instance of  `MarcSpec`; building this structure has some \nrestrictions for what I needed when I wrote it.\n\n### Testing for freshness\n\nThe test in `test/test_ebnf.py` compiles the parser from the EBNF into a temporary path, which makes sure\nthat coffee driven programmers like me remember to compile the parser and check in the changes.\n\n## Performance\n\nIt is not obvious this is needed.  It may be fine for instance to use XPath expressions.\nSuppose we are going to do a lot of these conversions - if XPath is fast enough, the work of converting\nfrom a `pymarc.Record` to MARCXML will be amoritized by many searches.  Jupyter Notebooks have a %timeit\nmagic that allows us to check this:\n\nLet us check the performance of the simplest such XPath expression:\n\n```python\nIn [34]: %timeit ''.join(doc.xpath('./controlfield[@tag=\"001\"]/text()'))                                                                                  \n19.4 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```\n\nAnd compare it to parsing a spec and searching:\n\n```python\nIn [37]: from pymarcspec import MarcSearchParser                                                    \n\nIn [38]: parser = MarcSearchParser()                                                                \n\nIn [39]: spec = parser.parse('001')                                                                 \n\nIn [40]: spec.search(record)                                                                        \nOut[40]: '1589530'\n\nIn [41]: %timeit spec.search(record)                                                                \n7.89 µs ± 253 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```\n\nSo, from a performance perspective this is clearly a win, and the expression is much closer\nto library IT.\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=CommonMark",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danizen/pymarcspec/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymarcspec",
    "package_url": "https://pypi.org/project/pymarcspec/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymarcspec/",
    "project_urls": {
      "Homepage": "https://github.com/danizen/pymarcspec/"
    },
    "release_url": "https://pypi.org/project/pymarcspec/0.0.3/",
    "requires_dist": [
      "attrs",
      "lxml",
      "pymarc",
      "tatsu"
    ],
    "requires_python": ">=3.6",
    "summary": "Search pymarc.Record using a string expression",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9754346,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00e43829a7451c009f273229a1cd89c49494945f1385d0e3adf6cde541cc8a40",
          "md5": "d58802d56cc52ec3b3f15e0306d18527",
          "sha256": "4a22383a7c0888aa5d2d7f9b015f4c49bcdec53219f527ed9126a3b475e39854"
        },
        "downloads": -1,
        "filename": "pymarcspec-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d58802d56cc52ec3b3f15e0306d18527",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9831,
        "upload_time": "2021-03-04T04:50:24",
        "upload_time_iso_8601": "2021-03-04T04:50:24.435750Z",
        "url": "https://files.pythonhosted.org/packages/00/e4/3829a7451c009f273229a1cd89c49494945f1385d0e3adf6cde541cc8a40/pymarcspec-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfc124f5c2972d1673fba48b2ef85f6c77b8bc4aeda286ec40493e404446f9e6",
          "md5": "8e1e440bd7242b2e9ac58766fddef3e4",
          "sha256": "57b514668743750942fbcb2952ec7260aca96b1ecccbaac0bea8f6067d438fed"
        },
        "downloads": -1,
        "filename": "pymarcspec-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e1e440bd7242b2e9ac58766fddef3e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15993,
        "upload_time": "2021-03-04T04:50:25",
        "upload_time_iso_8601": "2021-03-04T04:50:25.545280Z",
        "url": "https://files.pythonhosted.org/packages/df/c1/24f5c2972d1673fba48b2ef85f6c77b8bc4aeda286ec40493e404446f9e6/pymarcspec-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51f9fa6a0e7908222c87fb434dd997852435bbb8c73fd05bea0c6e8173e74b41",
          "md5": "a5af6d6ed1cd1b2c304979b04d21909e",
          "sha256": "9cedbd5e3e92956d2ef99e9f47b889960382ad50fae487c5c7726bb2116137d1"
        },
        "downloads": -1,
        "filename": "pymarcspec-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5af6d6ed1cd1b2c304979b04d21909e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10267,
        "upload_time": "2021-03-04T19:47:09",
        "upload_time_iso_8601": "2021-03-04T19:47:09.939278Z",
        "url": "https://files.pythonhosted.org/packages/51/f9/fa6a0e7908222c87fb434dd997852435bbb8c73fd05bea0c6e8173e74b41/pymarcspec-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da899116e1f9d0a620b4c84c989e51ac52603cd474e36daf91088a0d54d48df4",
          "md5": "2c02deb9aa8b078255ac1d8867b22d0a",
          "sha256": "5256d7143725e730be3de6fa3b64bcf48f3245745d034c95cbbed4b65edb8ee6"
        },
        "downloads": -1,
        "filename": "pymarcspec-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2c02deb9aa8b078255ac1d8867b22d0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16343,
        "upload_time": "2021-03-04T19:47:11",
        "upload_time_iso_8601": "2021-03-04T19:47:11.061314Z",
        "url": "https://files.pythonhosted.org/packages/da/89/9116e1f9d0a620b4c84c989e51ac52603cd474e36daf91088a0d54d48df4/pymarcspec-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42c10b1d28df009d4033fdbb92bdec4932fe03f4187bbe377162e8ef5b59aab1",
          "md5": "1b9878d6548da0bf5ba6c7b8b163426b",
          "sha256": "6ad388830bc596396850f75633dae9dd5f696d4af47d72c9f7872227746954f3"
        },
        "downloads": -1,
        "filename": "pymarcspec-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b9878d6548da0bf5ba6c7b8b163426b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10974,
        "upload_time": "2021-03-12T17:37:13",
        "upload_time_iso_8601": "2021-03-12T17:37:13.846703Z",
        "url": "https://files.pythonhosted.org/packages/42/c1/0b1d28df009d4033fdbb92bdec4932fe03f4187bbe377162e8ef5b59aab1/pymarcspec-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce6ce9070c6b25891df09ace180d156abc900e17db00f23b0036fe825c3785e2",
          "md5": "02f64d398ea72cdd5bb64379ae4df424",
          "sha256": "7c4bd5a1496585ec8e5d189df862ef714ed4ec51bd3e42d3db76edebd611056b"
        },
        "downloads": -1,
        "filename": "pymarcspec-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "02f64d398ea72cdd5bb64379ae4df424",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17330,
        "upload_time": "2021-03-12T17:37:15",
        "upload_time_iso_8601": "2021-03-12T17:37:15.599315Z",
        "url": "https://files.pythonhosted.org/packages/ce/6c/e9070c6b25891df09ace180d156abc900e17db00f23b0036fe825c3785e2/pymarcspec-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42c10b1d28df009d4033fdbb92bdec4932fe03f4187bbe377162e8ef5b59aab1",
        "md5": "1b9878d6548da0bf5ba6c7b8b163426b",
        "sha256": "6ad388830bc596396850f75633dae9dd5f696d4af47d72c9f7872227746954f3"
      },
      "downloads": -1,
      "filename": "pymarcspec-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b9878d6548da0bf5ba6c7b8b163426b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10974,
      "upload_time": "2021-03-12T17:37:13",
      "upload_time_iso_8601": "2021-03-12T17:37:13.846703Z",
      "url": "https://files.pythonhosted.org/packages/42/c1/0b1d28df009d4033fdbb92bdec4932fe03f4187bbe377162e8ef5b59aab1/pymarcspec-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce6ce9070c6b25891df09ace180d156abc900e17db00f23b0036fe825c3785e2",
        "md5": "02f64d398ea72cdd5bb64379ae4df424",
        "sha256": "7c4bd5a1496585ec8e5d189df862ef714ed4ec51bd3e42d3db76edebd611056b"
      },
      "downloads": -1,
      "filename": "pymarcspec-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "02f64d398ea72cdd5bb64379ae4df424",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17330,
      "upload_time": "2021-03-12T17:37:15",
      "upload_time_iso_8601": "2021-03-12T17:37:15.599315Z",
      "url": "https://files.pythonhosted.org/packages/ce/6c/e9070c6b25891df09ace180d156abc900e17db00f23b0036fe825c3785e2/pymarcspec-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}