{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# densMAP\n\nThis software package contains an implementation of density-preserving data visualization tool **densMAP**, which augments the [UMAP](https://github.com/lmcinnes/umap) algorithm (based on v0.3.10).\nSome of the following instructions are adapted from the UMAP repository.\n\n## Installation\ndensMAP shares the same dependencies as UMAP, including:\n\n* numpy\n* scipy\n* scikit-learn\n* numba==0.48.0\n\nOur code currently does not support the latest version of numba (0.49.0).\n\n### Install Options\n\nPyPI installation of densMAP can be performed as:\n\n```bash\npip install densmap-learn\n```\n\nFor a manual install, first download this package:\n\n```bash\nwget https://github.com/hhcho/densvis/archive/master.zip\nunzip densvis-master.zip\nrm densvis-master.zip\ncd densvis-master/densmap/\n```\n\nInstall the requirements:\n\n```bash\nsudo pip install -r requirements.txt\n```\n\nor\n\n```bash\nconda install scikit-learn numba\n```\n\nFinally, install the package:\n\n```bash\npython setup.py install\n```\n\n## Usage\n\nLike UMAP, the densMAP package inherits from sklearn classes, and thus drops in neatly\nnext to other sklearn transformers with an identical calling API.\n\n```python\nimport densmap\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.utils import resample\n\ndigits = fetch_openml(name='mnist_784')\nsubsample, subsample_labels = resample(digits.data, digits.target, n_samples=7000,\n                                       stratify=digits.target, random_state=1)\n\nembedding, ro, re = densmap.densMAP().fit_transform(subsample)\n```\n\n### Input arguments\n\nThere are a number of parameters that can be set for the densMAP class; the\nmajor ones inherited from UMAP are:\n\n -  ``n_neighbors``: This determines the number of neighboring points used in\n    local approximations of manifold structure. Larger values will result in\n    more global structure being preserved at the loss of detailed local\n    structure. In general this parameter should often be in the range 5 to\n    50; we set a default of 30.\n\n -  ``min_dist``: This controls how tightly the embedding is allowed compress\n    points together. Larger values ensure embedded points are more evenly\n    distributed, while smaller values allow the algorithm to optimise more\n    accurately with regard to local structure. Sensible values are in the\n    range 0.001 to 0.5, with 0.1 being a reasonable default.\n\n -  ``metric``: This determines the choice of metric used to measure distance\n    in the input space. A wide variety of metrics are already coded, and a user\n    defined function can be passed as long as it has been JITd by numba.\n\nThe additional parameters specific to densMAP are:\n\n- ``dens_frac``: This determines the fraction of iterations that will include\n  the density-preservation term of the gradient (float, between 0 and 1); default 0.3.\n\n- ``dens_lambda``: This determines the weight of the density-preservation\n  objective. See the original paper for the effect this parameter has when changed (float, non-negative); default 2.0.\n\n- ``final_dens``: When this flag is `True`, the code returns, in addition to the embedding,\n  the local radii for the original dataset and for the embedding. If `False`, only the embedding\n  is returned (bool); default `True`.\n\nOther parameters that can be set include:\n\n- ``ndim``: Dimensions of the embedding (int); default 2.\n\n- ``n_epochs``: Number of epochs to run the algorithm (int); default 750.\n\n- ``var_shift``: Regularization term added to the variance of embedding local radius for stability (float, non-negative); default 0.1.\n\n### Output arguments\nIf `final_dens` is `True`, returns `(embedding, ro, re)`, where: \n- `embedding`: a (number of data points)-by-`ndims` numpy array containing the embedding coordinates\n\n- `ro`: a numpy array of length (number of data points) that contains the log local radius of\nthe input data\n\n- `re`: a numpy array of length (number of data points) that contains the log local radius\nof the embedded data\n\nIf `final_dens` is `False`, returns just `embedding`. \n\nAn example of making use of these options:\n\n```python\nembedding, ro, re = densmap.densMAP(n_neighbors=25, n_epochs=500, dens_frac=0.3,\n                                    dens_lambda=0.5).fit_transform(data)\n```\n### R wrapper\n\nWe use the `reticulate` library to provide compatibility with R as well with the \nscript `densmap.R`. Since `reticulate` runs Python code with an R wrapper, to use this \nlibrary you must have Python3 installed. The script will automatically install the\n`densmap-learn` package via `pip` if it is not installed. \n\nFrom then, within your R script, you can run\n```R\nsource(\"densmap.R\")\n\n# Assume `data` is an R dataframe, needs to be converted to a matrix\n\nout <- densMAP(as.matrix(data))\n\n```\nThe R function `densMAP` takes the same optional arguments listed in Input Arguments section \nabove with the same names and default values. So you can, for example, run: \n```R\nout <- densMAP(as.matrix(data), n_neighbors=25, n_epochs=500, dens_frac=0.3, dens_lambda=0.5)\n```\nIf `final_dens` is `TRUE` then `out[[1]]` will contain the embedding, `out[[2]]` will be the \nlog original local radii, and `out[[3]]` the log embedding local radii. \n\nIf `final_dens` is `FALSE` then `out` will be the embeddings itself. \n\n### From the command line\n\nWe also provide the file `densmap.py` which allows you to run densMAP from the terminal,\nspecifying the major options from above. Simply run:\n\n```bash\npython densmap.py -i [--input INPUT] -o [--outname OUTNAME] -f [--dens_frac DENS_FRAC]\n    -l [--dens_lambda DENS_LAMBDA] -s [--var_shift VAR_SHIFT] -d [--ndim NDIM]\n    -n [--n-epochs N-EPOCHS] -k [--n-nei N-NEIGHBORS] [--final_dens/--no_final_dens FINAL_DENS]\n```\nwhere within the square braces are the long-form flag and the capitalized text corresponds to\nthe parameters above. For example:\n```\npython densmap.py -i data.txt -o out -f .3 -k 25\n```\nand\n```\npython densmap.py --input data.txt --outname out --dens_frac .3 --n-nei 25\n```\nboth run densMAP on input file `data.txt` to produce output files `out_emb.txt`\nand `out_dens.txt`, using `dens_frac=0.3` and `n_neighbors=25`.\nThe input file is parsed using numpyâ€™s `loadtxt` function if it is a `.txt` file; another option is to provide a `.pkl` file. \nWe assume that the first dimension (row index) iterates over the data instances, and the second dimension (column index) iterates over the features.\n\nThe output files include:\n\n* `out_emb.txt` a TSV file containing the embedding coordinatesof the data, and\n* `out_dens.txt` a (number of data points)-by-2 TSV file containing in the first column the log local radii in the original data and in the second column the log local radii in the embedding.\n\n## Example data and script\nWe have included the file `trial_densmap.py` which allows you to run an example straight out of\nthe box.\n\nRun: \n```bash\npython trial_densmap.py\n```\n\nThe code will load a dataset that contains a mixture of six Gaussian point clouds\nwith increasing variance and\nwill run both densMAP and UMAP on the dataset with default parameters and plot the embeddings\n(if you have `matplotlib` installed),\nand alignment of the local radius in each case. It will also save the embeddings in `{umap,densmap}_trial_emb.txt`,\nthe local radii in `{umap,densmap}_trial_dens.txt`, and the plot in `densmap_trial_fig.png`.\n\nThe plot will look like: \n<p align=\"center\">\n<img src=\"http://cb.csail.mit.edu/cb/densvis/figs/densmap_trial_fig_labels.jpg\" width=\"700\">\n</p>\n\n\n## References\nOur densMAP algorithm is described in:\n\nAshwin Narayan, Bonnie Berger\\*, and Hyunghoon Cho\\*. \"Density-Preserving Data Visualization Unveils Dynamic Patterns of Single-Cell Transcriptomic Variability\", *bioRxiv*, 2020.\n\nOriginal UMAP algorithm is described in:\n\nLeland McInnes, John Healy, and James Melville. \"UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction\", *arXiv*, 1802.03426, 2018.\n\n## License\nThis package is licensed under the MIT license.\n\n## Contact for questions\nAshwin Narayan, [ashwinn@mit.edu](mailto:ashwinn@mit.edu)\\\nHoon Cho, [hhcho@broadinstitute.org](mailto:hhcho@broadinstitute.org)\n\nAdditionally, some questions regarding the UMAP-specific aspects of this software may be answered by browsing the UMAP documentation at [Read the Docs](https://umap-learn.readthedocs.io/ \"Read the Docs\"), which [includes an FAQ](https://umap-learn.readthedocs.io/en/latest/faq.html \"FAQ\").\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/hhcho/densvis",
    "keywords": "dimension reduction t-sne manifold density",
    "license": "MIT",
    "maintainer": "Ashwin Narayan",
    "maintainer_email": "ashwinn@mit.edu",
    "name": "densmap-learn",
    "package_url": "https://pypi.org/project/densmap-learn/",
    "platform": "",
    "project_url": "https://pypi.org/project/densmap-learn/",
    "project_urls": {
      "Homepage": "http://github.com/hhcho/densvis"
    },
    "release_url": "https://pypi.org/project/densmap-learn/0.2.2/",
    "requires_dist": [
      "numpy (>=1.13)",
      "scikit-learn (>=0.16)",
      "scipy (>=0.19)",
      "numba (==0.48.0)"
    ],
    "requires_python": "",
    "summary": "densMAP",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8637246,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0d8706b1450e9e02e76d3a83fd64353b3fe9b10d76303955575e4cab7fad433",
          "md5": "6e7ce9df32d133752ff1b861b393bb87",
          "sha256": "9c3c08258ec72ef92a75ddf42e132f98130bcd9726e47e7842af6a50da611103"
        },
        "downloads": -1,
        "filename": "densmap-learn-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e7ce9df32d133752ff1b861b393bb87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 360772,
        "upload_time": "2020-05-11T03:20:10",
        "upload_time_iso_8601": "2020-05-11T03:20:10.931633Z",
        "url": "https://files.pythonhosted.org/packages/b0/d8/706b1450e9e02e76d3a83fd64353b3fe9b10d76303955575e4cab7fad433/densmap-learn-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95589a8d334c766d2e9295008d4c3143ea1a328e8b587fd72a0b4ed2ea980bfd",
          "md5": "6864a88a1461cfa8bb29ace3eda6a27f",
          "sha256": "49c31684c28ac8a6ab4ca691af695b0f71b942076c5e2a96bea690026aadae74"
        },
        "downloads": -1,
        "filename": "densmap_learn-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6864a88a1461cfa8bb29ace3eda6a27f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1025049,
        "upload_time": "2020-05-11T03:39:30",
        "upload_time_iso_8601": "2020-05-11T03:39:30.110167Z",
        "url": "https://files.pythonhosted.org/packages/95/58/9a8d334c766d2e9295008d4c3143ea1a328e8b587fd72a0b4ed2ea980bfd/densmap_learn-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "570eaa9e35ed9025bb636b836f490c9ea25b6a42b61d268919c26ad956b1d1f8",
          "md5": "4bc8e056c057663f190621c47bdc03ac",
          "sha256": "6e9d8a2286335633b924fbb631a0f4fbbb1b6c07714feaae86ec3fc0e9124716"
        },
        "downloads": -1,
        "filename": "densmap-learn-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4bc8e056c057663f190621c47bdc03ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1018852,
        "upload_time": "2020-05-11T03:39:31",
        "upload_time_iso_8601": "2020-05-11T03:39:31.374175Z",
        "url": "https://files.pythonhosted.org/packages/57/0e/aa9e35ed9025bb636b836f490c9ea25b6a42b61d268919c26ad956b1d1f8/densmap-learn-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95435e471ff639e28e1e76ebfcbf211ab3c90542367f138383ea62052edc5c8c",
          "md5": "7ab87b0edb4b16f3ae83f01a9659fb97",
          "sha256": "e55a9001d0466651abb29b4f1ac0f810b9fbb05e70d86af39235158cb19cdd89"
        },
        "downloads": -1,
        "filename": "densmap_learn-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7ab87b0edb4b16f3ae83f01a9659fb97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 680423,
        "upload_time": "2020-11-12T00:18:03",
        "upload_time_iso_8601": "2020-11-12T00:18:03.476732Z",
        "url": "https://files.pythonhosted.org/packages/95/43/5e471ff639e28e1e76ebfcbf211ab3c90542367f138383ea62052edc5c8c/densmap_learn-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9f65671fa4ac7ea1f911920f7e7d793e23c0aee100104adc5c92cb4279fbeb0",
          "md5": "6631e689fd05b2fba26ead55475d3964",
          "sha256": "004f66f0fbddfd5f36cdde29abdb0e59b83fc9d15ef9373114194fc3430a0800"
        },
        "downloads": -1,
        "filename": "densmap-learn-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6631e689fd05b2fba26ead55475d3964",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 361913,
        "upload_time": "2020-11-12T00:18:04",
        "upload_time_iso_8601": "2020-11-12T00:18:04.613237Z",
        "url": "https://files.pythonhosted.org/packages/b9/f6/5671fa4ac7ea1f911920f7e7d793e23c0aee100104adc5c92cb4279fbeb0/densmap-learn-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95435e471ff639e28e1e76ebfcbf211ab3c90542367f138383ea62052edc5c8c",
        "md5": "7ab87b0edb4b16f3ae83f01a9659fb97",
        "sha256": "e55a9001d0466651abb29b4f1ac0f810b9fbb05e70d86af39235158cb19cdd89"
      },
      "downloads": -1,
      "filename": "densmap_learn-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7ab87b0edb4b16f3ae83f01a9659fb97",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 680423,
      "upload_time": "2020-11-12T00:18:03",
      "upload_time_iso_8601": "2020-11-12T00:18:03.476732Z",
      "url": "https://files.pythonhosted.org/packages/95/43/5e471ff639e28e1e76ebfcbf211ab3c90542367f138383ea62052edc5c8c/densmap_learn-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9f65671fa4ac7ea1f911920f7e7d793e23c0aee100104adc5c92cb4279fbeb0",
        "md5": "6631e689fd05b2fba26ead55475d3964",
        "sha256": "004f66f0fbddfd5f36cdde29abdb0e59b83fc9d15ef9373114194fc3430a0800"
      },
      "downloads": -1,
      "filename": "densmap-learn-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6631e689fd05b2fba26ead55475d3964",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 361913,
      "upload_time": "2020-11-12T00:18:04",
      "upload_time_iso_8601": "2020-11-12T00:18:04.613237Z",
      "url": "https://files.pythonhosted.org/packages/b9/f6/5671fa4ac7ea1f911920f7e7d793e23c0aee100104adc5c92cb4279fbeb0/densmap-learn-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}