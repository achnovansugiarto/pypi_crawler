{
  "info": {
    "author": "Michael Whittaker",
    "author_email": "mwhittttaker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Quoracle\n========\n\nQuoracle is a library for constructing and analyzing [read-write quorum\nsystems](https://scholar.google.com/scholar?cluster=4847365665094368145). Run\n`pip install quoracle` and then follow along with the tutorial below to get\nstarted. You can find more information on Quoracle in our [PaPoC '21\npaper](https://mwhittaker.github.io/publications/quoracle.pdf).\n\n## Tutorial\n### Quorum Systems\nGiven a set of nodes `X`, a _read-write quorum system_ is a pair `(R, W)` where\n\n1. `R` is a set of subsets of `X` called _read quorums_,\n2. `W` is a set of subsets of `X` called _write quorums_, and\n3. every read quorum intersects every write quorum.\n\nquoracle allows us to construct and analyze arbitrary read-write quorum\nsystems. First, we import the library.\n\n```python\nfrom quoracle import *\n```\n\nNext, we specify the nodes in our quorum system. Our nodes can be strings,\nintegers, IP addresses, anything!\n\n```python\n>>> a = Node('a')\n>>> b = Node('b')\n>>> c = Node('c')\n>>> d = Node('d')\n>>> e = Node('e')\n>>> f = Node('f')\n```\n\nNow, we construct a two by three grid of nodes. Every row is read quorum, and\none element from every row is a write quorum. Note that when we construct a\nquorum system, we only have to specify the set of read quorums. The library\nfigures out the optimal set of write quorums automatically.\n\n```python\n>>> grid = QuorumSystem(reads=a*b*c + d*e*f)\n```\n\nThis next code snippet prints out the read quorums.\n\n```python\n>>> for r in grid.read_quorums():\n...     print(r)\n{'a', 'b', 'c'}\n{'d', 'e', 'f'}\n```\n\nAnd this next code snippet prints out the write quorums.\n\n```python\n>>> for w in grid.write_quorums():\n...     print(w)\n{'a', 'd'}\n{'a', 'e'}\n{'a', 'f'}\n{'b', 'd'}\n{'b', 'e'}\n{'b', 'f'}\n{'c', 'd'}\n{'c', 'e'}\n{'c', 'f'}\n```\n\nAlternatively, we can construct a quorum system be specifying the write\nquorums.\n\n```python\n>>> QuorumSystem(writes=(a + b + c) * (d + e + f))\n```\n\nOr, we can specify both the read and write quorums.\n\n```python\n>>> QuorumSystem(reads=a*b*c + d*e*f, writes=(a + b + c) * (d + e + f))\n```\n\nBut, remember that every read quorum must intersect every write quorum. If we\ntry to construct a quorum system with non-overlapping quorums, an exception\nwill be thrown.\n\n```python\n>>> QuorumSystem(reads=a+b+c, writes=d+e+f)\nTraceback (most recent call last):\n...\nValueError: Not all read quorums intersect all write quorums\n```\n\nWe can check whether a given set is a read or write quorum. Note that any\nsuperset of a quorum is also considered a quorum.\n\n```python\n>>> grid.is_read_quorum({'a', 'b', 'c'})\nTrue\n>>> grid.is_read_quorum({'a', 'b', 'c', 'd'})\nTrue\n>>> grid.is_read_quorum({'a', 'b', 'd'})\nFalse\n>>>\n>>> grid.is_write_quorum({'a', 'd'})\nTrue\n>>> grid.is_write_quorum({'a', 'd', 'd'})\nTrue\n>>> grid.is_write_quorum({'a', 'b'})\nFalse\n```\n\n### Resilience\nThe _read resilience_ of our quorum system is the largest number `f` such that\ndespite the failure of any `f` nodes, we still have at least one read quorum.\n_Write resilience_ is defined similarly, and _resilience_ is the minimum of\nread and write resilience.\n\nHere, we print out the read resilience, write resilience, and resilience of our\ngrid quorum system. We can fail any one node and still have a read quorum, but\nif we fail one node from each row, we eliminate every read quorum, so the read\nresilience is 1. Similarly, we can fail any two nodes and still have a write\nquorum, but if we fail one node from every column, we eliminate every write\nquorum, so our write resilience is 1. The resilience is the minimum of 1 and 2,\nwhich is 1.\n\n```python\n>>> grid.read_resilience()\n1\n>>> grid.write_resilience()\n2\n>>> grid.resilience()\n1\n```\n\n### Strategies\nA _strategy_ is a discrete probability distribution over the set of read and\nwrite quorums. A strategy gives us a way to pick quorums at random. We'll see\nhow to construct optimal strategies in a second, but for now, we'll construct a\nstrategy by hand. To do so, we have to provide a probability distribution over\nthe read quorums and a probability distribution over the write quorums. Here,\nwe'll pick the top row twice as often as the bottom row, and we'll pick each\ncolumn uniformly at random. Note that when we specify a probability\ndistribution, we don't have to provide exact probabilities. We can simply pass\nin weights, and the library will automatically normalize the weights into a\nvalid probability distribution.\n\n```python\n>>> # The read quorum strategy.\n>>> sigma_r = {\n...     frozenset({'a', 'b', 'c'}): 2.,\n...     frozenset({'d', 'e', 'f'}): 1.,\n... }\n>>>\n>>> # The write quorum strategy.\n>>> sigma_w = {\n...     frozenset({'a', 'd'}): 1.,\n...     frozenset({'b', 'e'}): 1.,\n...     frozenset({'c', 'f'}): 1.,\n... }\n>>> strategy = grid.make_strategy(sigma_r, sigma_w)\n```\n\nOnce we have a strategy, we can use it to sample read and write quorums. Here,\nwe expect `get_read_quorum` to return the top row twice as often as the bottom\nrow, and we expect `get_write_quorum` to return every column uniformly at\nrandom.\n\n```python\n>>> strategy.get_read_quorum()\n{'a', 'b', 'c'}\n>>> strategy.get_read_quorum()\n{'a', 'b', 'c'}\n>>> strategy.get_read_quorum()\n{'d', 'e', 'f'}\n>>> strategy.get_write_quorum()\n{'b', 'e'}\n>>> strategy.get_write_quorum()\n{'c', 'f'}\n>>> strategy.get_write_quorum()\n{'b', 'e'}\n>>> strategy.get_write_quorum()\n{'a', 'd'}\n```\n\n### Load and Capacity\nTypically in a distributed system, a read quorum of nodes is contacted to\nperform a read, and a write quorum of nodes is contacted to perform a write.\nAssume we have a workload with a _read fraction_ `fr` of reads and a _write\nfraction_ `fw = 1 - fr` of writes. Given a strategy, the _load of a node_ is\nthe probability that the node is selected by the strategy. The _load of a\nstrategy_ is the load of the most heavily loaded node. The _load of a quorum\nsystem_ is the load of the optimal strategy, i.e. the strategy that achieves\nthe lowest load. The most heavily loaded node in a quorum system is a\nthroughput bottleneck, so the lower the load the better.\n\nLet's calculate the load of our strategy assuming a 100% read workload (i.e. a\nworkload with a read fraction of 1).\n\n- The load of `a` is 2/3 because the read quorum `{a, b, c}` is chosen 2/3 of\n  the time.\n- The load of `b` is 2/3 because the read quorum `{a, b, c}` is chosen 2/3 of\n  the time.\n- The load of `c` is 2/3 because the read quorum `{a, b, c}` is chosen 2/3 of\n  the time.\n- The load of `d` is 1/3 because the read quorum `{d, e, f}` is chosen 2/3 of\n  the time.\n- The load of `e` is 1/3 because the read quorum `{d, e, f}` is chosen 2/3 of\n  the time.\n- The load of `f` is 1/3 because the read quorum `{d, e, f}` is chosen 2/3 of\n  the time.\n\nThe largest node load is 2/3, so our strategy has a load of 2/3. Rather than\ncalculating load by hand, we can simply call the `load` function.\n\n```python\n>>> strategy.load(read_fraction=1)\n0.6666666666666666\n```\n\nNow let's calculate the load of our strategy assuming a 100% write workload.\nAgain, we calculate the load on every node.\n\n- The load of `a` is 1/3 because the write quorum `{a, d}` is chosen 1/3 of\n  the time.\n- The load of `b` is 1/3 because the write quorum `{b, e}` is chosen 1/3 of\n  the time.\n- The load of `c` is 1/3 because the write quorum `{c, f}` is chosen 1/3 of\n  the time.\n- The load of `d` is 1/3 because the write quorum `{a, d}` is chosen 1/3 of\n  the time.\n- The load of `e` is 1/3 because the write quorum `{b, e}` is chosen 1/3 of\n  the time.\n- The load of `f` is 1/3 because the write quorum `{c, f}` is chosen 1/3 of\n  the time.\n\nThe largest node load is 1/3, so our strategy has a load of 1/3. Again, rather\nthan calculating load by hand, we can simply call the `load` function. Note\nthat we can pass in a `read_fraction` or `write_fraction` but not both.\n\n```python\n>>> strategy.load(write_fraction=1)\n0.3333333333333333\n```\n\nNow let's calculate the load of our strategy on a 25% read and 75% write\nworkload.\n\n- The load of `a` is `0.25 * 2/3 + 0.75 * 1/3 = 5/12` because 25% of the time\n  we perform a read and select the read quorum `{a, b, c}` with 2/3 probability\n  and 75% of the time, we perform a write and select the write quorum `{a, d}`\n  with 1/3 probability.\n- The load of `b` is `0.25 * 2/3 + 0.75 * 1/3 = 5/12` because 25% of the time\n  we perform a read and select the read quorum `{a, b, c}` with 2/3 probability\n  and 75% of the time, we perform a write and select the write quorum `{b, e}`\n  with 1/3 probability.\n- The load of `c` is `0.25 * 2/3 + 0.75 * 1/3 = 5/12` because 25% of the time\n  we perform a read and select the read quorum `{a, b, c}` with 2/3 probability\n  and 75% of the time, we perform a write and select the write quorum `{c, f}`\n  with 1/3 probability.\n- The load of `d` is `0.25 * 1/3 + 0.75 * 1/3 = 1/3` because 25% of the time\n  we perform a read and select the read quorum `{d, e, f}` with 2/3 probability\n  and 75% of the time, we perform a write and select the write quorum `{a, d}`\n  with 1/3 probability.\n- The load of `e` is `0.25 * 1/3 + 0.75 * 1/3 = 1/3` because 25% of the time\n  we perform a read and select the read quorum `{d, e, f}` with 2/3 probability\n  and 75% of the time, we perform a write and select the write quorum `{b, e}`\n  with 1/3 probability.\n- The load of `f` is `0.25 * 1/3 + 0.75 * 1/3 = 1/3` because 25% of the time\n  we perform a read and select the read quorum `{d, e, f}` with 2/3 probability\n  and 75% of the time, we perform a write and select the write quorum `{c, f}`\n  with 1/3 probability.\n\nThe largest node load is 5/12, so our strategy has a load of 5/12. At this\npoint, you can see that calculating load by hand is extremely tedious. We could\nhave skipped all that work and called `load` instead!\n\n```python\n>>> strategy.load(read_fraction=0.25)\n0.41666666666666663\n```\n\nWe can also compute the load on every node.\n\n```python\n>>> print(strategy.node_load(a, read_fraction=0.25))\n0.41666666666666663\n>>> print(strategy.node_load(b, read_fraction=0.25))\n0.41666666666666663\n>>> print(strategy.node_load(c, read_fraction=0.25))\n0.41666666666666663\n>>> print(strategy.node_load(d, read_fraction=0.25))\n0.3333333333333333\n>>> print(strategy.node_load(e, read_fraction=0.25))\n0.3333333333333333\n>>> print(strategy.node_load(f, read_fraction=0.25))\n0.3333333333333333\n```\n\nOur strategy has a load of 5/12 on a 25% read workload, but what about the\nquorum system? The quorum system does __not__ have a load of 5/12 because our\nstrategy is not optimal. We can call the `strategy` function to compute the\noptimal strategy automatically.\n\n```python\n>>> strategy = grid.strategy(read_fraction=0.25)\n>>> strategy\nStrategy(reads={('a', 'b', 'c'): 0.5, ('d', 'e', 'f'): 0.5}, writes={('a', 'f'): 0.33333333, ('b', 'e'): 0.33333333, ('c', 'd'): 0.33333333})\n>>> strategy.load(read_fraction=0.25))\n0.3749999975\n```\n\nHere, we see that the optimal strategy picks all rows and all columns\nuniformly. This strategy has a load of 3/8 on the 25% read workload. Since this\nstrategy is optimal, that means our quorum system also has a load of 3/8 on a\n25% workload.\n\nWe can also query this strategy's load on other workloads as well. Note that\nthis strategy is optimal for a read fraction of 25%, but it may not be optimal\nfor other read fractions.\n\n```python\n>>> strategy.load(read_fraction=0)\n0.33333333\n>>> strategy.load(read_fraction=0.5)\n0.416666665\n>>> strategy.load(read_fraction=1)\n0.5\n```\n\nWe can also use a quorum system's `load` function. The code snippet below is a\nshorthand for `grid.strategy(read_fraction=0.25).load(read_fraction=0.25)`.\n\n```python\n>>> grid.load(read_fraction=0.25)\n0.3749999975\n```\n\nThe capacity of strategy or quorum is simply the inverse of the load. Our\nquorum system has a load of 3/8 on a 25% read workload, so it has a capacity of\n8/3.\n\n```python\n>>> grid.capacity(read_fraction=0.25)\n2.6666666844444444\n```\n\nThe _capacity_ of a quorum system is proportional to the maximum throughput\nthat it can achieve before a node becomes bottlenecked. Here, if every node\ncould process 100 commands per second, then our quorum system could process\n800/3 commands per second.\n\n### Workload Distributions\nIn the real world, we don't often have a workload with a fixed read fraction.\nWorkloads change over time. Instead of specifying a fixed read fraction, we can\nprovide a discrete probability distribution of read fractions. Here, we say\nthat the read fraction is 10% half the time and 75% half the time. `strategy`\nwill return the strategy that minimizes the expected load according to this\ndistribution.\n\n```python\n>>> distribution = {0.1: 1, 0.75: 1}\n>>> strategy = grid.strategy(read_fraction=distribution)\n>>> strategy.load(read_fraction=distribution)\n0.40416666474999996\n```\n\n### Heterogeneous Node\nIn the real world, not all nodes are equal. We often run distributed systems on\nheterogeneous hardware, so some nodes might be faster than others. To model\nthis, we instantiate every node with its capacity. Here, nodes `a`, `c`, and\n`e` can process 1000 commands per second, while nodes `b`, `d`, and `f` can\nonly process 500 requests per second.\n\n```python\n>>> a = Node('a', capacity=1000)\n>>> b = Node('b', capacity=500)\n>>> c = Node('c', capacity=1000)\n>>> d = Node('d', capacity=500)\n>>> e = Node('e', capacity=1000)\n>>> f = Node('f', capacity=500)\n```\n\nNow, the definition of capacity becomes much simpler. The capacity of a quorum\nsystem is simply the maximum throughput that it can achieve. The load can be\ninterpreted as the inverse of the capacity. Here, our quorum system is capable\nof processing 1333 commands per second for a workload of 75% reads.\n\n```python\n>>> grid = QuorumSystem(reads=a*b*c + d*e*f)\n>>> strategy = grid.strategy(read_fraction=0.75)\n>>> strategy.load(read_fraction=0.75)\n0.00075\n>>> strategy.capacity(read_fraction=0.75)\n1333.3333333333333\n```\n\nNodes might also process reads and writes at different speeds. We can specify\nthe peak read and write throughput of every node separately. Here, we assume\nreads are ten times as fast as writes.\n\n```python\n>>> a = Node('a', write_capacity=1000, read_capacity=10000)\n>>> b = Node('b', write_capacity=500, read_capacity=5000)\n>>> c = Node('c', write_capacity=1000, read_capacity=10000)\n>>> d = Node('d', write_capacity=500, read_capacity=5000)\n>>> e = Node('e', write_capacity=1000, read_capacity=10000)\n>>> f = Node('f', write_capacity=500, read_capacity=5000)\n```\n\nWith 100% reads, our quorum system can process 10,000 commands per second.\nThis throughput decreases as we increase the fraction of writes.\n\n```python\n>>> grid = QuorumSystem(reads=a*b*c + d*e*f)\n>>> grid.capacity(read_fraction=1)\n10000.0\n>>> grid.capacity(read_fraction=0.5)\n3913.043450018904\n>>> grid.capacity(read_fraction=0)\n2000.0\n```\n\n### `f`-resilient Strategies\nAnother real world complication is the fact that machines sometimes fail and\nare sometimes slow. If we contact a quorum of nodes, some of them may fail, and\nwe'll get stuck waiting to hear back from them. Or, some of them may be\nstragglers, and we'll wait longer than we'd like. We can address this problem\nby contacting more than the bare minimum number of nodes.\n\nFormally, we say a read quorum (or write quorum) q is _`f`-resilient_ if\ndespite the failure of any `f` nodes, q still forms a read quorum (or write\nquorum). A strategy is `f`-resilient if it only selects `f`-resilient quorums.\nBy default, `strategy` returns `0`-resilient quorums. We can pass in the `f`\nargument to get more resilient strategies.\n\n```python\n>>> strategy = grid.strategy(read_fraction=0.5, f=1)\n```\n\nThese sets are quorums even if 1 machine fails.\n\n```python\n>>> strategy.get_read_quorum()\n{'b', 'f', 'e', 'd', 'a', 'c'}\n>>> strategy.get_write_quorum()\n{'b', 'd', 'a', 'e'}\n```\n\nNote that as we increase resilience, quorums get larger, and we decrease\ncapacity. On a 100% write workload, our grid quorum system has a 0-resilient\ncapacity of 2000 commands per second, but a 1-resilient capacity of 1000\ncommands per second.\n\n```python\n>>> grid.capacity(write_fraction=1, f=0)\n2000.0\n>>> grid.capacity(write_fraction=1, f=1)\n1000.0\n```\n\nAlso note that not all quorum systems are equally as resilient. In the next\ncode snippet, we construct a \"write 2, read 3\" quorum system using the `choose`\nfunction. For this quorum system, every set of 2 nodes is a write quorum, and\nevery set of 3 nodes is a read quorum. This quorum system has a 0-resilient\ncapacity of 2000 (the same as the grid), but a 1-resilient capacity of 1333\n(higher than the grid).\n\n```python\n>>> write2 = QuorumSystem(writes=choose(2, [a, b, c, d, e]))\n>>> write2.capacity(write_fraction=1, f=0)\n2000.0\n>>> write2.capacity(write_fraction=1, f=1)\n1333.3333333333333\n```\n\n### Latency\nIn the real world, not all nodes are equally as far away. Some are close and\nsome are far. To address this, we associate every node with a latency, i.e. the\ntime the required to contact the node. We model this in quoracle by assigning\neach node a latency, represented as a `datetime.timedelta`. Here, nodes `a`,\n`b`, `c`, `d`, `e`, and `f` in our grid have latencies of 1, 2, 3, 4, 5, and 6\nseconds.\n\n```python\n>>> import datetime\n>>>\n>>> def seconds(x: int) -> datetime.timedelta:\n>>>     return datetime.timedelta(seconds=x)\n>>>\n>>> a = Node('a', write_capacity=1000, read_capacity=10000, latency=seconds(1))\n>>> b = Node('b', write_capacity=500, read_capacity=5000, latency=seconds(2))\n>>> c = Node('c', write_capacity=1000, read_capacity=10000, latency=seconds(3))\n>>> d = Node('d', write_capacity=500, read_capacity=5000, latency=seconds(4))\n>>> e = Node('e', write_capacity=1000, read_capacity=10000, latency=seconds(5))\n>>> f = Node('f', write_capacity=500, read_capacity=5000, latency=seconds(6))\n>>> grid = QuorumSystem(reads=a*b*c + d*e*f)\n```\n\nThe _latency of a quorum_ `q` is the time required to form a quorum of\nresponses after contacting every node in `q`. For example, the read quorum `{a,\nb, c}` has a latency of three seconds. It takes 1 second to hear back from `a`,\nanother second to hear back from `b`, and then a final second to hear back from\n`c`. The write quorum `{a, b, d, f}` has a latency of 4 seconds. It takes 1\nsecond to hear back from `a`, another second to hear back from `b`, and then\nanother 2 seconds to hear back from `d`. The set `{a, b, d}` is a write quorum,\nso the latency of this quorum is 4 seconds. Note that we didn't have to wait to\nhear back from `f` in order to form a quorum.\n\nThe _latency of a strategy_ is the expected latency of the quorums that it\nchooses. The _latency of a quorum system_ is the latency of the latency-optimal\nstrategy. We can use the `strategy` function to find a latency-optimal strategy\nby passing in the value `\"latency\"` to the `optimize` flag.\n\n```python\n>>> sigma = grid.strategy(read_fraction=0.5, optimize='latency')\n>>> sigma\nStrategy(reads={('a', 'b', 'c'): 1.0}, writes={('c', 'd'): 1.0})\n```\n\nWe can find the latency of this strategy by calling the `latency` function.\n\n```python\n>>> sigma.latency(read_fraction=1)\n0:00:03\n>>> sigma.latency(read_fraction=0)\n0:00:04\n>>> sigma.latency(read_fraction=0.5)\n0:00:03.500000\n```\n\nAs with capacity, we can call the `latency` function on our quorum system\ndirectly. In the follow code snippet `grid.latency(read_fraction=0.5,\noptimize='latency')` is a shorthand for `grid.strategy(read_fraction=0.5,\noptimize='latency').latency(read_fraction=0.5)`.\n\n```\n>>> grid.latency(read_fraction=0.5, optimize='latency')\n0:00:03.500000\n```\n\nNote that finding the latency-optimal strategy is trivial. The latency-optimal\nstrategy always selects the read and write quorum with the smallest latencies.\nHowever, things get complicated when we start optimizing for capacity and\nlatency at the same time. When we call the `strategy` function with\n`optimize='latency'`, we can pass in a constraint on the maximum allowable load\nusing the `load_limit` argument. For example, in the code snippet below, we\nfind the latency-optimal strategy with a capacity of at least 1,500.\n\n```python\n>>> sigma = grid.strategy(read_fraction=0.5,\n...                      optimize='latency',\n...                      load_limit=1/1500)\n>>> sigma\nStrategy(reads={('a', 'b', 'c'): 1.0}, writes={('a', 'd'): 0.66666667, ('c', 'e'): 0.33333333})\n>>> sigma.capacity(read_fraction=0.5)\n1499.9999925\n>>> sigma.latency(read_fraction=0.5)\n0:00:03.666667\n```\n\nThis strategy always picks the read quorum `{a, b, c}`, and picks the write\nquorum `{a, d}` twice as often as write quorum `{c, e}`. It achieves our\ndesired capacity of 1,500 commands per second (ignoring rounding errors) and\nhas a latency of 3.66 seconds. We can also find a load-optimal strategy with a\nlatency constraint.\n\n```python\n>>> sigma = grid.strategy(read_fraction=0.5,\n...                       optimize='load',\n...                       latency_limit=seconds(4))\n>>> sigma\nStrategy(reads={('a', 'b', 'c'): 0.98870056, ('d', 'e', 'f'): 0.011299435}, writes={('a', 'd'): 0.19548023, ('a', 'f'): 0.22429379, ('b', 'd'): 0.062711864, ('b', 'e'): 0.097740113, ('c', 'e'): 0.41977401})\n>>> sigma.capacity(read_fraction=0.5)\n3856.2090893331633\n>>> sigma.latency(read_fraction=0.5)\n0:00:04.000001\n```\n\nThis strategy is rather complicated and would be hard to find by hand. It has a\ncapacity of 3856 commands per second and achieves our latency constraint of 4\nseconds.\n\nBe careful when specifying constraints. If the constraints cannot be met, a\n`NoStrategyFound` exception is raised.\n\n```python\n>>> grid.strategy(read_fraction=0.5,\n...               optimize='load',\n...               latency_limit=seconds(1))\nTraceback (most recent call last):\n...\nquoracle.quorum_system.NoStrategyFoundError: no strategy satisfies the given constraints\n```\n\n### Network Load\nAnother useful metric is network load. When a protocol performs a read, it has\nto send messages to every node in a read quorum, and when a protocol performs a\nwrite, it has to send messages to every node in a write quorum. The bigger the\nquorums, the more messages are sent over the network. The _network load of a\nquorum_ is simply the size of the quorum, the _network load of a strategy_ is\nthe expected network load of the quorums it chooses, and the _network load of a\nquorum system_ is the network load of the network load-optimal strategy.\n\nWe can find network load optimal-strategies using the `strategy` function by\npassing in `\"network\"` to the `optimize` flag. We can also specify constraints\non load and latency. In general, using the `strategy` function, we can pick one\nof load, latency, or network load to optimize and specify constraints on the\nother two metrics.\n\n```python\n>>> sigma = grid.strategy(read_fraction=0.5, optimize='network')\n>>> sigma\nStrategy(reads={('a', 'b', 'c'): 1.0}, writes={('c', 'f'): 1.0})\n>>> sigma.network_load(read_fraction=0.5)\n2.5\n>>> grid.network_load(read_fraction=0.5, optimize='network')\n2.5\n>>> sigma = grid.strategy(read_fraction=0.5,\n...                       optimize='network',\n...                       load_limit=1/2000,\n...                       latency_limit=seconds(4))\n```\n\n### Search\nFinding good quorum systems by hand is hard. quoracle includes a heuristic\nbased search procedure that tries to find quorum systems that are optimal with\nrespect a target metric and set of constraints. For example, lets try to find a\nquorum system\n\n- that has resilience 1,\n- that is 1-resilient load optimal for a 75% read workload,\n- that has a latency of most 4 seconds, and\n- that has a network load of at most 4.\n\nBecause the number of quorum systems is enormous, the search procedure can take\na very, very long time. We pass in a timeout to the search procedure to limit\nhow long it takes. If the timeout expires, `search` returns the most optimal\nquorum system that it found so far.\n\n```python\n### Search\n>>> qs, sigma = search(nodes=[a, b, c, d, e, f],\n...                    resilience=1,\n...                    f=1,\n...                    read_fraction=0.75,\n...                    optimize='load',\n...                    latency_limit=seconds(4),\n...                    network_limit=4,\n...                    timeout=seconds(60))\n>>> qs\nQuorumSystem(reads=choose3(a, c, e, (b + d + f)), writes=choose2(a, c, e, (b * d * f)))\n>>> sigma\nStrategy(reads={('a', 'c', 'e', 'f'): 0.33333333, ('a', 'b', 'c', 'e'): 0.33333333, ('a', 'c', 'd', 'e'): 0.33333333}, writes={('a', 'b', 'c', 'd', 'f'): 0.15714286, ('b', 'c', 'd', 'e', 'f'): 0.15714286, ('a', 'c', 'e'): 0.52857143, ('a', 'b', 'd', 'e', 'f'): 0.15714286})\n>>> sigma.capacity(read_fraction=0.75)\n3499.9999536250007\n>>> sigma.latency(read_fraction=0.75)\n0:00:03.907143\n>>> sigma.network_load(read_fraction=0.75)\n3.9857142674999997\n```\n\nHere, the search procedure returns the quorum system `choose(3, [a, c, e,\nb+d+f])` with a capacity of 3500 commands per second and with latency and\nnetwork load close to the limits specified.\n\n## Publishing To pypi\nFirst, bump the version in `setup.py`. Then, run the following where $VERSION\nis the current version in `setup.py`.\n\n```\npython -m unittest\npython -m build\npython -m twine upload dist/quoracle-$VERSION*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mwhittaker/quorums",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quoracle",
    "package_url": "https://pypi.org/project/quoracle/",
    "platform": "",
    "project_url": "https://pypi.org/project/quoracle/",
    "project_urls": {
      "Homepage": "https://github.com/mwhittaker/quorums"
    },
    "release_url": "https://pypi.org/project/quoracle/0.0.4/",
    "requires_dist": [
      "matplotlib",
      "pulp"
    ],
    "requires_python": ">=3.8",
    "summary": "A library for modelling, analyzing, and optimizing quorum systems",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10579269,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3909702ae5a556f046ebbbebc80301c0b365f9a322801630352d1e6b319e6f0",
          "md5": "88021e3cfca7abebe92af81048433ceb",
          "sha256": "8ce3e0a16dda06bd815c6fc962cc3991b201a8bbd8b0bec2172ada25636e665a"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88021e3cfca7abebe92af81048433ceb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39176,
        "upload_time": "2021-02-05T05:05:42",
        "upload_time_iso_8601": "2021-02-05T05:05:42.893423Z",
        "url": "https://files.pythonhosted.org/packages/e3/90/9702ae5a556f046ebbbebc80301c0b365f9a322801630352d1e6b319e6f0/quoracle-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc1bf4038479d9586077fb8f338b95d462943f6783df22581d9055d340404e63",
          "md5": "f12da80b579c70ff33d7424684b724a2",
          "sha256": "b3ebc4aa3cfb1c503df0b6cf82053b2bf1c90a4264a01958b325a380252ff468"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f12da80b579c70ff33d7424684b724a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23736,
        "upload_time": "2021-02-05T05:05:44",
        "upload_time_iso_8601": "2021-02-05T05:05:44.697498Z",
        "url": "https://files.pythonhosted.org/packages/fc/1b/f4038479d9586077fb8f338b95d462943f6783df22581d9055d340404e63/quoracle-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "593321853d76586e22dfd7b3043772c111da03e39387af7079063b1125a25cb2",
          "md5": "5661bab382652ea6da1c1ef0fe9a2f44",
          "sha256": "557ff23e9ae13fab78c07311a0324e4797f6717b20c37d16d51b993b543cbc2e"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5661bab382652ea6da1c1ef0fe9a2f44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 42638,
        "upload_time": "2021-02-06T01:23:48",
        "upload_time_iso_8601": "2021-02-06T01:23:48.621584Z",
        "url": "https://files.pythonhosted.org/packages/59/33/21853d76586e22dfd7b3043772c111da03e39387af7079063b1125a25cb2/quoracle-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64759f39eabfdbbd2d7fa3ccf6d586aa114ca7794c2d722c8cf83fe594d72f83",
          "md5": "0b6a0a8ed519924464788b817e9d433c",
          "sha256": "caea2c15b4d950c1185896f1b3b090792ff9483d51435972c020b3cd1bab9c29"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0b6a0a8ed519924464788b817e9d433c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30964,
        "upload_time": "2021-02-06T01:23:50",
        "upload_time_iso_8601": "2021-02-06T01:23:50.121050Z",
        "url": "https://files.pythonhosted.org/packages/64/75/9f39eabfdbbd2d7fa3ccf6d586aa114ca7794c2d722c8cf83fe594d72f83/quoracle-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9cf5ee2b9164f6cba6661e614e0c8a83af5225eeb988c57371b1a3031c9bce6",
          "md5": "e1421e798cf540b546cb8ad6aeff3bc0",
          "sha256": "ca280f360c8619fbeba678a6dd89f561ec9355ea829198af66444f7ae1148e68"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1421e798cf540b546cb8ad6aeff3bc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 42774,
        "upload_time": "2021-02-07T20:26:39",
        "upload_time_iso_8601": "2021-02-07T20:26:39.590475Z",
        "url": "https://files.pythonhosted.org/packages/a9/cf/5ee2b9164f6cba6661e614e0c8a83af5225eeb988c57371b1a3031c9bce6/quoracle-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd5f66633ec5897ced9545d3f2ec92d9b2b465f310d2723de7760e2245fb3d82",
          "md5": "d1fb43ac6d74d9d5b0544ee3b574815f",
          "sha256": "d6519d3f9cd85ca08c0edddecab2fd99e4121e62445b0e6206d244a78a1f57a0"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d1fb43ac6d74d9d5b0544ee3b574815f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31127,
        "upload_time": "2021-02-07T20:26:42",
        "upload_time_iso_8601": "2021-02-07T20:26:42.052473Z",
        "url": "https://files.pythonhosted.org/packages/fd/5f/66633ec5897ced9545d3f2ec92d9b2b465f310d2723de7760e2245fb3d82/quoracle-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9174cbc7215ab9c1097792ba27269fa852a29c7ac24737906e1568684cf10deb",
          "md5": "e82e5f4f011291e7c015aed27905af89",
          "sha256": "342519c13b402f9d446558422927ab121c98b53e263988897adaf760f3a59c4e"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e82e5f4f011291e7c015aed27905af89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 36507,
        "upload_time": "2021-06-07T16:01:49",
        "upload_time_iso_8601": "2021-06-07T16:01:49.253454Z",
        "url": "https://files.pythonhosted.org/packages/91/74/cbc7215ab9c1097792ba27269fa852a29c7ac24737906e1568684cf10deb/quoracle-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76c1633d141e6d486dd555d6cd875de9c815c775cd9bab61c5868dd8b59b06a7",
          "md5": "26b8551d5bcec196fa6f701197d72be4",
          "sha256": "e8351ee2d2758c57434832ff7e90106550917e49b78a0ca09e2f0e72042f74d3"
        },
        "downloads": -1,
        "filename": "quoracle-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "26b8551d5bcec196fa6f701197d72be4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 36568,
        "upload_time": "2021-06-07T16:01:50",
        "upload_time_iso_8601": "2021-06-07T16:01:50.873877Z",
        "url": "https://files.pythonhosted.org/packages/76/c1/633d141e6d486dd555d6cd875de9c815c775cd9bab61c5868dd8b59b06a7/quoracle-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9174cbc7215ab9c1097792ba27269fa852a29c7ac24737906e1568684cf10deb",
        "md5": "e82e5f4f011291e7c015aed27905af89",
        "sha256": "342519c13b402f9d446558422927ab121c98b53e263988897adaf760f3a59c4e"
      },
      "downloads": -1,
      "filename": "quoracle-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e82e5f4f011291e7c015aed27905af89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 36507,
      "upload_time": "2021-06-07T16:01:49",
      "upload_time_iso_8601": "2021-06-07T16:01:49.253454Z",
      "url": "https://files.pythonhosted.org/packages/91/74/cbc7215ab9c1097792ba27269fa852a29c7ac24737906e1568684cf10deb/quoracle-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76c1633d141e6d486dd555d6cd875de9c815c775cd9bab61c5868dd8b59b06a7",
        "md5": "26b8551d5bcec196fa6f701197d72be4",
        "sha256": "e8351ee2d2758c57434832ff7e90106550917e49b78a0ca09e2f0e72042f74d3"
      },
      "downloads": -1,
      "filename": "quoracle-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "26b8551d5bcec196fa6f701197d72be4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 36568,
      "upload_time": "2021-06-07T16:01:50",
      "upload_time_iso_8601": "2021-06-07T16:01:50.873877Z",
      "url": "https://files.pythonhosted.org/packages/76/c1/633d141e6d486dd555d6cd875de9c815c775cd9bab61c5868dd8b59b06a7/quoracle-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}