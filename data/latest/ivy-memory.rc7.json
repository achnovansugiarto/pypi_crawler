{
  "info": {
    "author": "Ivy Team",
    "author_email": "ivydl.team@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License"
    ],
    "description": ".. image:: https://github.com/ivy-dl/memory/blob/master/docs/partial_source/logos/logo.png?raw=true\n   :width: 100%\n\n\n\n**End-to-end memory modules for machine learning developers, written in Ivy.**\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/logos/supported/frameworks.png?raw=true\n   :width: 100%\n\nContents\n--------\n\n* `Overview`_\n* `Run Through`_\n* `Interactive Demos`_\n* `Get Involed`_\n\nOverview\n--------\n\n.. _docs: https://ivy-dl.org/memory\n\n**What is Ivy Memory?**\n\nIvy memory provides differentiable memory modules,\nincluding learnt modules such as Neural Turing Machines (NTM),\nbut also parameter-free modules such as End-to-End Egospheric Spatial Memory (ESM).\nCheck out the docs_ for more info!\n\nThe library is built on top of the Ivy machine learning framework.\nThis means all memory modules simultaneously support:\nJax, Tensorflow, PyTorch, MXNet, and Numpy.\n\n**Ivy Libraries**\n\nThere are a host of derived libraries written in Ivy, in the areas of mechanics, 3D vision, robotics, gym environments,\nneural memory, pre-trained models + implementations, and builder tools with trainers, data loaders and more. Click on\nthe icons below to learn more!\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_libraries.png?raw=true\n   :width: 100%\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Quick Start**\n\nIvy memory can be installed like so: ``pip install ivy-memory``\n\n.. _demos: https://github.com/ivy-dl/memory/tree/master/ivy_memory_demos\n.. _interactive: https://github.com/ivy-dl/memory/tree/master/ivy_memory_demos/interactive\n\nTo quickly see the different aspects of the library, we suggest you check out the demos_!\nWe suggest you start by running the script ``run_through.py``,\nand read the \"Run Through\" section below which explains this script.\n\nFor more interactive demos, we suggest you run either\n``learning_to_copy_with_ntm.py`` or ``mapping_a_room_with_esm.py`` in the interactive_ demos folder.\n\nRun Through\n-----------\n\nWe run through some of the different parts of the library via a simple ongoing example script.\nThe full script is available in the demos_ folder, as file ``run_through.py``.\n\n**End-to-End Egospheric Spatial Memory**\n\nFirst, we show how the Ivy End-to-End Egospheric Spatial Memory (ESM) class can be used inside a pure-Ivy model.\nWe first define the model as below.\n\n.. code-block:: python\n\n    class IvyModelWithESM(ivy.Module):\n\n        def __init__(self, channels_in, channels_out):\n            self._channels_in = channels_in\n            self._esm = ivy_mem.ESM(omni_image_dims=(16, 32))\n            self._linear = ivy_mem.Linear(channels_in, channels_out)\n            ivy.Module.__init__(self, 'cpu')\n\n        def _forward(self, obs):\n            mem = self._esm(obs)\n            x = ivy.reshape(mem.mean, (-1, self._channels_in))\n            return self._linear(x)\n\nNext, we instantiate this model, and verify that the returned tensors are of the expected shape.\n\n.. code-block:: python\n\n    # create model\n    in_channels = 32\n    out_channels = 8\n    ivy.set_framework('torch')\n    model = IvyModelWithESM(in_channels, out_channels)\n\n    # input config\n    batch_size = 1\n    image_dims = [5, 5]\n    num_timesteps = 2\n    num_feature_channels = 3\n\n    # create image of pixel co-ordinates\n    uniform_pixel_coords =\\\n        ivy_vision.create_uniform_pixel_coords_image(image_dims, [batch_size, num_timesteps])\n\n    # define camera measurement\n    depths = ivy.random_uniform(shape=[batch_size, num_timesteps] + image_dims + [1])\n    pixel_coords = ivy_vision.depth_to_pixel_coords(depths)\n    inv_calib_mats = ivy.random_uniform(shape=[batch_size, num_timesteps, 3, 3])\n    cam_coords = ivy_vision.pixel_to_cam_coords(pixel_coords, inv_calib_mats)[..., 0:3]\n    features = ivy.random_uniform(shape=[batch_size, num_timesteps] + image_dims + [num_feature_channels])\n    img_mean = ivy.concatenate((cam_coords, features), -1)\n    cam_rel_mat = ivy.identity(4, batch_shape=[batch_size, num_timesteps])[..., 0:3, :]\n\n    # place these into an ESM camera measurement container\n    esm_cam_meas = ESMCamMeasurement(\n        img_mean=img_mean,\n        cam_rel_mat=cam_rel_mat\n    )\n\n    # define agent pose transformation\n    agent_rel_mat = ivy.identity(4, batch_shape=[batch_size, num_timesteps])[..., 0:3, :]\n\n    # collect together into an ESM observation container\n    esm_obs = ESMObservation(\n        img_meas={'camera_0': esm_cam_meas},\n        agent_rel_mat=agent_rel_mat\n    )\n\n    # call model and test output\n    output = model(esm_obs)\n    assert output.shape[-1] == out_channels\n\nFinally, we define a dummy loss function, and show how the ESM network can be trained using Ivy functions only.\n\n.. code-block:: python\n\n    # define loss function\n    target = ivy.zeros_like(output)\n\n    def loss_fn(v):\n        pred = model(esm_obs, v=v)\n        return ivy.reduce_mean((pred - target) ** 2)\n\n    # optimizer\n    optimizer = ivy.SGD(lr=1e-4)\n\n    # train model\n    print('\\ntraining dummy Ivy ESM model...\\n')\n    for i in range(10):\n        loss, grads = ivy.execute_with_gradients(loss_fn, model.v)\n        model.v = optimizer.step(model.v, grads)\n        print('step {}, loss = {}'.format(i, ivy.to_numpy(loss).item()))\n    print('\\ndummy Ivy ESM model trained!\\n')\n    ivy.unset_framework()\n\n**Neural Turing Machine**\n\nWe next show how the Ivy Neural Turing Machine (NTM) class can be used inside a TensorFlow model.\nFirst, we define the model as below.\n\n.. code-block:: python\n\n    class TfModelWithNTM(tf.keras.Model):\n\n        def __init__(self, channels_in, channels_out):\n            tf.keras.Model.__init__(self)\n            self._linear = tf.keras.layers.Dense(64)\n            memory_size = 4\n            memory_vector_dim = 1\n            self._ntm = ivy_mem.NTM(\n                input_dim=64, output_dim=channels_out, ctrl_output_size=channels_out, ctrl_layers=1,\n                memory_size=memory_size, memory_vector_dim=memory_vector_dim, read_head_num=1, write_head_num=1)\n            self._assign_variables()\n\n        def _assign_variables(self):\n            self._ntm.v.map(\n                lambda x, kc: self.add_weight(name=kc, shape=x.shape))\n            self.set_weights([ivy.to_numpy(v) for k, v in self._ntm.v.to_iterator()])\n            self.trainable_weights_dict = dict()\n            for weight in self.trainable_weights:\n                self.trainable_weights_dict[weight.name] = weight\n            self._ntm.v = self._ntm.v.map(lambda x, kc: self.trainable_weights_dict[kc + ':0'])\n\n        def call(self, x, **kwargs):\n            x = self._linear(x)\n            return self._ntm(x)\n\nNext, we instantiate this model, and verify that the returned tensors are of the expected shape.\n\n.. code-block:: python\n\n    # create model\n    in_channels = 32\n    out_channels = 8\n    ivy.set_framework('tensorflow')\n    model = TfModelWithNTM(in_channels, out_channels)\n\n    # define inputs\n    batch_shape = [1, 2]\n    timesteps = 3\n    input_shape = batch_shape + [timesteps, in_channels]\n    input_seq = tf.random.uniform(batch_shape + [timesteps, in_channels])\n\n    # call model and test output\n    output_seq = model(input_seq)\n    assert input_seq.shape[:-1] == output_seq.shape[:-1]\n    assert input_seq.shape[-1] == in_channels\n    assert output_seq.shape[-1] == out_channels\n\nFinally, we define a dummy loss function, and show how the NTM can be trained using a native TensorFlow optimizer.\n\n.. code-block:: python\n\n    # define loss function\n    target = tf.zeros_like(output_seq)\n\n    def loss_fn():\n        pred = model(input_seq)\n        return tf.reduce_sum((pred - target) ** 2)\n\n    # define optimizer\n    optimizer = tf.keras.optimizers.Adam(1e-2)\n\n    # train model\n    print('\\ntraining dummy TensorFlow NTM model...\\n')\n    for i in range(10):\n        with tf.GradientTape() as tape:\n            loss = loss_fn()\n        grads = tape.gradient(loss, model.trainable_weights)\n        optimizer.apply_gradients(zip(grads, model.trainable_weights))\n        print('step {}, loss = {}'.format(i, loss))\n    print('\\ndummy TensorFlow NTM model trained!\\n')\n    ivy.unset_framework()\n\nInteractive Demos\n-----------------\n\nIn addition to the run through above, we provide two further demo scripts,\nwhich are more visual and interactive.\n\nThe scripts for these demos can be found in the interactive_ demos folder.\n\n**Learning to Copy with NTM**\n\nThe first demo trains a Neural Turing Machine to copy a sequence from one memory bank to another.\nNTM can overfit to a single copy sequence very quickly, as show in the real-time visualization below.\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_memory/demo_a.png?raw=true\n   :width: 100%\n\n**Mapping a Room with ESM**\n\nThe second demo creates an egocentric map of a room, from a rotating camera.\nThe raw image observations are shown on the left,\nand the incrementally constructed omni-directional ESM feature and depth images are shown on the right.\nWhile this example only projects color values into the memory, arbitrary neural network features can also be projected, for end-to-end training.\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_memory/demo_b.png?raw=true\n   :width: 100%\n\nGet Involed\n-----------\n\nWe hope the memory classes in this library are useful to a wide range of machine learning developers.\nHowever, there are many more areas of differentiable memory which could be covered by this library.\n\nIf there are any particular functions or classes you feel are missing,\nand your needs are not met by the functions currently on offer,\nthen we are very happy to accept pull requests!\n\nWe look forward to working with the community on expanding and improving the Ivy memory library.\n\nCitation\n--------\n\n::\n\n    @article{lenton2021ivy,\n      title={Ivy: Unified Machine Learning for Inter-Framework Portability},\n      author={Lenton, Daniel and Pardo, Fabio and Falck, Fabian and James, Stephen and Clark, Ronald},\n      journal={arXiv preprint arXiv:2102.02886},\n      year={2021}\n    }\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ivy-dl.org/memory",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ivy-memory",
    "package_url": "https://pypi.org/project/ivy-memory/",
    "platform": "",
    "project_url": "https://pypi.org/project/ivy-memory/",
    "project_urls": {
      "Docs": "https://ivy-dl.org/memory/",
      "Homepage": "https://ivy-dl.org/memory",
      "Source": "https://github.com/ivy-dl/memory"
    },
    "release_url": "https://pypi.org/project/ivy-memory/1.1.9/",
    "requires_dist": [
      "ivy-core",
      "ivy-mech",
      "ivy-vision"
    ],
    "requires_python": "",
    "summary": "End-to-end memory modules for machine learning developers, written in Ivy.",
    "version": "1.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12178855,
  "releases": {
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fde839ae6eb0545ba355357fd0ce13476f9c2a10bb82283a7f94e35f5d477154",
          "md5": "7af7ee57b5c873447898af3151ad995d",
          "sha256": "feef8a6755fbc679c85afa23f2e342e8ed3b9304955c8946df77c8190c886d75"
        },
        "downloads": -1,
        "filename": "ivy_memory-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7af7ee57b5c873447898af3151ad995d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19713,
        "upload_time": "2021-03-20T00:03:36",
        "upload_time_iso_8601": "2021-03-20T00:03:36.545379Z",
        "url": "https://files.pythonhosted.org/packages/fd/e8/39ae6eb0545ba355357fd0ce13476f9c2a10bb82283a7f94e35f5d477154/ivy_memory-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69f885a69ef5a34e7a693b2bc52f530ccbad29b5f357a800dc557235c0e75d33",
          "md5": "e19978df48b736503de5c33887915134",
          "sha256": "f5cf46c435811ac96838879f8564b9ec1f4731bbd3a3e79ab71d85ba8667c8b3"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e19978df48b736503de5c33887915134",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17938,
        "upload_time": "2021-03-20T00:03:37",
        "upload_time_iso_8601": "2021-03-20T00:03:37.466037Z",
        "url": "https://files.pythonhosted.org/packages/69/f8/85a69ef5a34e7a693b2bc52f530ccbad29b5f357a800dc557235c0e75d33/ivy-memory-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6c369db1bfce39f9755d0ee5e4b33a28f51aafead064ecfb3ec5796828f80cd",
          "md5": "dd75ed7d3abf9295c55174c69e375ef6",
          "sha256": "825e3c6725202bdaa42353131bf36c9553444b687be9932ed2fb51838ca72626"
        },
        "downloads": -1,
        "filename": "ivy_memory-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd75ed7d3abf9295c55174c69e375ef6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17866,
        "upload_time": "2021-04-12T14:54:20",
        "upload_time_iso_8601": "2021-04-12T14:54:20.220154Z",
        "url": "https://files.pythonhosted.org/packages/d6/c3/69db1bfce39f9755d0ee5e4b33a28f51aafead064ecfb3ec5796828f80cd/ivy_memory-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcfdb7a89e7ae3643a14fbf8b378ed356afa4ef54e7c0e6447a7897c662ae82a",
          "md5": "d32b02ec7a3e77efe2e0b9b19f10dc08",
          "sha256": "23f4c268051d5db78cc34545f040c4d9b33603c57b28923eae0e63bfdae56284"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d32b02ec7a3e77efe2e0b9b19f10dc08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16845,
        "upload_time": "2021-04-12T14:54:21",
        "upload_time_iso_8601": "2021-04-12T14:54:21.271318Z",
        "url": "https://files.pythonhosted.org/packages/bc/fd/b7a89e7ae3643a14fbf8b378ed356afa4ef54e7c0e6447a7897c662ae82a/ivy-memory-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16155a7694b1f4f59a484eb634d87490a94d348ed451d31cd960e0c0ac7f76dd",
          "md5": "ab7bd92834b3f05f0234ece4cb7e91a3",
          "sha256": "29311352c70fc30202d34c5e9bcc7c74664380f31fd3cfcf8f69465e39fdfbc2"
        },
        "downloads": -1,
        "filename": "ivy_memory-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab7bd92834b3f05f0234ece4cb7e91a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17866,
        "upload_time": "2021-07-26T23:53:48",
        "upload_time_iso_8601": "2021-07-26T23:53:48.919631Z",
        "url": "https://files.pythonhosted.org/packages/16/15/5a7694b1f4f59a484eb634d87490a94d348ed451d31cd960e0c0ac7f76dd/ivy_memory-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b399c9739a82dcce9b93b8544df68aa3376e50c7b30d392caa579fc68867e86e",
          "md5": "46b49a8119ee811f0792114f3a665e02",
          "sha256": "4a1e81b1b17c22bf7ffb25023e81ef1d7ed1c708656c35e28e1f46eaed080f25"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "46b49a8119ee811f0792114f3a665e02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16840,
        "upload_time": "2021-07-26T23:53:50",
        "upload_time_iso_8601": "2021-07-26T23:53:50.063253Z",
        "url": "https://files.pythonhosted.org/packages/b3/99/c9739a82dcce9b93b8544df68aa3376e50c7b30d392caa579fc68867e86e/ivy-memory-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dfe5100fa48770acc3e9e5edce96d437661f35b2688b56a6e5005fd9f835bf0",
          "md5": "47c6bb840fd21fc7c22426d19c1601c7",
          "sha256": "be40054ded5cfb88da5563d1ab3d7cc9056c3d2d8c468abfbb8624eab57ac3e9"
        },
        "downloads": -1,
        "filename": "ivy_memory-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47c6bb840fd21fc7c22426d19c1601c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17545,
        "upload_time": "2021-11-29T21:52:00",
        "upload_time_iso_8601": "2021-11-29T21:52:00.490482Z",
        "url": "https://files.pythonhosted.org/packages/6d/fe/5100fa48770acc3e9e5edce96d437661f35b2688b56a6e5005fd9f835bf0/ivy_memory-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77f08bdb6f3aa8a80330bbea3293a6e07c8ed13da19e71af51be51e237982d3d",
          "md5": "771b49e2ef826ec132f0aa66cab9082d",
          "sha256": "1558a9a1e4a83eb37c87589d4cfeb9a257e60e4798a235d30afbd4d45fb43222"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "771b49e2ef826ec132f0aa66cab9082d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16901,
        "upload_time": "2021-11-29T21:52:01",
        "upload_time_iso_8601": "2021-11-29T21:52:01.338586Z",
        "url": "https://files.pythonhosted.org/packages/77/f0/8bdb6f3aa8a80330bbea3293a6e07c8ed13da19e71af51be51e237982d3d/ivy-memory-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee1a91fd0cfa0bb790586c9d431705e2350d35bff2f3d1461709893a79077504",
          "md5": "64accbb803d9e708e4c84a0cc5de058a",
          "sha256": "d2e866b721ee828a6bb8a2e971667856281432b5497aa72b8a49b3c92ee8ea78"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "64accbb803d9e708e4c84a0cc5de058a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23954,
        "upload_time": "2021-11-30T22:20:45",
        "upload_time_iso_8601": "2021-11-30T22:20:45.367890Z",
        "url": "https://files.pythonhosted.org/packages/ee/1a/91fd0cfa0bb790586c9d431705e2350d35bff2f3d1461709893a79077504/ivy-memory-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1514e64433acf8b59acbaf2eb0716b1d169f795af095a222f892cbdcd33285f6",
          "md5": "a1c1695fb05432f38a5c2afaf78f6a28",
          "sha256": "1c473c831a14122a4d3a5d76c02522aa48c9d9594da1ab9ad4b0942f4d1c9655"
        },
        "downloads": -1,
        "filename": "ivy_memory-1.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1c1695fb05432f38a5c2afaf78f6a28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20610,
        "upload_time": "2021-12-01T08:50:09",
        "upload_time_iso_8601": "2021-12-01T08:50:09.020917Z",
        "url": "https://files.pythonhosted.org/packages/15/14/e64433acf8b59acbaf2eb0716b1d169f795af095a222f892cbdcd33285f6/ivy_memory-1.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4498621d033e1400656a5ad463e4fb2a75af5c9c854f27a5cbc4b51c3f3d273b",
          "md5": "fe445f6932fc6a82d7aff55d46679a9b",
          "sha256": "bd3a830ddd42d130bf4773598e9851672b086e7ac67ab3012dcca865d2226db6"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "fe445f6932fc6a82d7aff55d46679a9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24095,
        "upload_time": "2021-12-01T08:50:10",
        "upload_time_iso_8601": "2021-12-01T08:50:10.207774Z",
        "url": "https://files.pythonhosted.org/packages/44/98/621d033e1400656a5ad463e4fb2a75af5c9c854f27a5cbc4b51c3f3d273b/ivy-memory-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "326ebfa3f3034ea0179749cd204d659bed88e1bce411c3773b29e46efe55d75b",
          "md5": "3def849271ad364acd3778db1704f6f4",
          "sha256": "568cd45d2cc3eed286a481b19afdc769b08d8799b51be80b45a472630182959d"
        },
        "downloads": -1,
        "filename": "ivy_memory-1.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3def849271ad364acd3778db1704f6f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20739,
        "upload_time": "2021-12-01T16:23:10",
        "upload_time_iso_8601": "2021-12-01T16:23:10.006696Z",
        "url": "https://files.pythonhosted.org/packages/32/6e/bfa3f3034ea0179749cd204d659bed88e1bce411c3773b29e46efe55d75b/ivy_memory-1.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85acc82785b498247341329efb6dd042b8a92f00db3d90f0e12a35277e9b814d",
          "md5": "87ff9047db58453dca35060513d1e061",
          "sha256": "d0a7eeb219278dcf88146c315cb7c505bf91d5d7ad275aba6af6e6723f28584d"
        },
        "downloads": -1,
        "filename": "ivy-memory-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "87ff9047db58453dca35060513d1e061",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24748,
        "upload_time": "2021-12-01T16:23:11",
        "upload_time_iso_8601": "2021-12-01T16:23:11.173204Z",
        "url": "https://files.pythonhosted.org/packages/85/ac/c82785b498247341329efb6dd042b8a92f00db3d90f0e12a35277e9b814d/ivy-memory-1.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "326ebfa3f3034ea0179749cd204d659bed88e1bce411c3773b29e46efe55d75b",
        "md5": "3def849271ad364acd3778db1704f6f4",
        "sha256": "568cd45d2cc3eed286a481b19afdc769b08d8799b51be80b45a472630182959d"
      },
      "downloads": -1,
      "filename": "ivy_memory-1.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3def849271ad364acd3778db1704f6f4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20739,
      "upload_time": "2021-12-01T16:23:10",
      "upload_time_iso_8601": "2021-12-01T16:23:10.006696Z",
      "url": "https://files.pythonhosted.org/packages/32/6e/bfa3f3034ea0179749cd204d659bed88e1bce411c3773b29e46efe55d75b/ivy_memory-1.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85acc82785b498247341329efb6dd042b8a92f00db3d90f0e12a35277e9b814d",
        "md5": "87ff9047db58453dca35060513d1e061",
        "sha256": "d0a7eeb219278dcf88146c315cb7c505bf91d5d7ad275aba6af6e6723f28584d"
      },
      "downloads": -1,
      "filename": "ivy-memory-1.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "87ff9047db58453dca35060513d1e061",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24748,
      "upload_time": "2021-12-01T16:23:11",
      "upload_time_iso_8601": "2021-12-01T16:23:11.173204Z",
      "url": "https://files.pythonhosted.org/packages/85/ac/c82785b498247341329efb6dd042b8a92f00db3d90f0e12a35277e9b814d/ivy-memory-1.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}