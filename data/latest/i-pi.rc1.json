{
  "info": {
    "author": "The i-PI developers",
    "author_email": "ipi.managers@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "==============================\ni-PI: a Universal Force Engine\n==============================\n\nA Python interface for ab initio path integral molecular dynamics simulations.\ni-PI is composed of a Python server (i-pi itself, that does not need to be\ncompiled but only requires a relatively recent version of Python and Numpy)\nthat propagates the (path integral) dynamics of the nuclei, and of an external\ncode that acts as a client and computes the electronic energy and forces.\n\nThis is typically a patched version of an electronic structure code, but a\nsimple self-contained Fortran driver that implements Lennard-Jones and\nSilvera-Goldman potentials is included for test purposes.\n\n\nQuick Setup and Test\n====================\n\nTo use i-PI with already existing drivers, install and update using Pip::\n\n   $ pip install -U i-PI\n\nTest with Pytest::\n\n   $ pip install pytest\n   $ pytest --pyargs ipi.tests\n\n\nFull installation\n=================\n\nTo develop i-PI or test it with the self-contained driver, follow these\ninstructions. It is assumed that i-PI will\nbe run from a Linux environment, with a recent version of Python, Numpy and\ngfortran, and that the terminal is initially in the i-pi package directory (the\ndirectory containing this file), which you can obtain by cloning the repository::\n\n   $ git clone https://github.com/i-pi/i-pi.git\n\nSource the environment settings file :code:`env.sh` as :code:`$ source env.sh` or :code:`$ .\nenv.sh`.  It is useful to put this in your :code:`.bashrc` or other settings file if\nyou always want to have i-PI available.\n\n\nCompile the driver code\n-----------------------\n\n::\n\n  $ cd drivers\n  $ make\n  $ cd ..\n\n\nRun one of the examples\n-----------------------\n\nThis will first start the wrapper in the background, redirecting the output to\na log file, and then run a couple of instances of the driver code. The progress\nof the wrapper is followed by monitoring the log file with the `tail` Linux\ncommand.\n\nOptionally, you can make a copy of the directory with the example somewhere\nelse if you want to keep the i-PI directory clean.\n\n::\n\n  $ cd examples/tutorial/tutorial-1/\n  $ i-pi tutorial-1.xml > log &\n  $ i-pi-driver -h localhost -p 31415 -m sg -o 15 &\n  $ i-pi-driver -h localhost -p 31415 -m sg -o 15 &\n  $ tail -f log\n\nThe monitoring can be interrupted with CTRL+C when the run has finished (5000 steps).\n\n\nRun the automatic test suite\n----------------------------\n\nThe automatic test suite can be run by calling the i-pi-test script. \nYou need to have the `pytest` package installed\n\n::\n\n  $ i-pi-test\n\nSee more details in the README file inside the ipi_tests folder.\n\nContributing\n================\n\ni-PI is an open source project, and everyone is welcome to contribute\nwith bug fixes, documentation, examples, new features, regression tests, etc.\n\nYour contribution should be based on the master branch. We kindly ask you to first fork the project,\nmake your changes, make sure you comply with all items in our checklist below, and finally create a pull request (PR).\n\nChecklist to create a pull request:\n\n- The PR follows our format compliance (based on `black` and `flake8` as explained above)\n- All the new classes and functions include the corresponding docstrings\n\n(If the PR adds a new functionally, please fulfill the next two requirements as well)\n\n- Add a working example to the `examples` folder to showcase the new functionality\n- Add a regression test to the `i-pi/ipi_tests/regression_tests` folder (see the corresponding README file for further details)\n- Make sure that all the automatic checks pass without any error\n\nWe are looking forward to your contribution!\n\nFormat Compliance\n-----------------\n\ni-PI code should be compliant to a minimal subset of PEP-8 recommendations.\nCurrently, we require the use of `black` as formatter and linter.\nWe also ask for the usage of `flake8` for syntactic checks, which is also\npart of linting.\nIn most systems, both packages can be easily installed using `pip`.\nBEFORE proceeding to a pull request, the minimal requirement is that you run\n\n::\n\n  $ make lint\n  $ make pretty \n\nThis will ensure the formatting and linting requirement are applied in the whole \ndirectory tree. Please resolve any warnings or errors that may appear. Your\ncommit will not pass the CI tests otherwise.\n\nFor a more flexible setup, we also provide the script `i-pi-style`, for\nwhich instructions can be obtained by typing \n\n::\n\n  $ i-pi-style -h \n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://ipi-code.org",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "i-PI",
    "package_url": "https://pypi.org/project/i-PI/",
    "platform": "",
    "project_url": "https://pypi.org/project/i-PI/",
    "project_urls": {
      "Documentation": "https://ipi-code.org/i-pi",
      "Homepage": "http://ipi-code.org",
      "Repository": "https://github.com/i-pi/i-pi"
    },
    "release_url": "https://pypi.org/project/i-PI/2.4.0/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python interface for ab initio path integral molecular dynamics simulations",
    "version": "2.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9858028,
  "releases": {
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99c45578454180954ad87fbfde121f4d59fc24844e9e256bf902a85624d60264",
          "md5": "9b214c614022614d2fae552847051371",
          "sha256": "04835df78840806698f6bf528e2e90ecf5a67662ef469122aa0a38ec30be6553"
        },
        "downloads": -1,
        "filename": "i_PI-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b214c614022614d2fae552847051371",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 407373,
        "upload_time": "2021-03-19T12:40:24",
        "upload_time_iso_8601": "2021-03-19T12:40:24.836420Z",
        "url": "https://files.pythonhosted.org/packages/99/c4/5578454180954ad87fbfde121f4d59fc24844e9e256bf902a85624d60264/i_PI-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a768952b2ace260bdea4a98d167640c0cf371f9ac0cde1897a2a195d4484cb71",
          "md5": "5bb790e0bf90881c438f80c7034c2f4f",
          "sha256": "5be1f649bfb697b6993320cfb53797e6ae90c8863c366b608098e784dbd65ccb"
        },
        "downloads": -1,
        "filename": "i-PI-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5bb790e0bf90881c438f80c7034c2f4f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 332216,
        "upload_time": "2021-03-19T12:40:27",
        "upload_time_iso_8601": "2021-03-19T12:40:27.587856Z",
        "url": "https://files.pythonhosted.org/packages/a7/68/952b2ace260bdea4a98d167640c0cf371f9ac0cde1897a2a195d4484cb71/i-PI-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99c45578454180954ad87fbfde121f4d59fc24844e9e256bf902a85624d60264",
        "md5": "9b214c614022614d2fae552847051371",
        "sha256": "04835df78840806698f6bf528e2e90ecf5a67662ef469122aa0a38ec30be6553"
      },
      "downloads": -1,
      "filename": "i_PI-2.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b214c614022614d2fae552847051371",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 407373,
      "upload_time": "2021-03-19T12:40:24",
      "upload_time_iso_8601": "2021-03-19T12:40:24.836420Z",
      "url": "https://files.pythonhosted.org/packages/99/c4/5578454180954ad87fbfde121f4d59fc24844e9e256bf902a85624d60264/i_PI-2.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a768952b2ace260bdea4a98d167640c0cf371f9ac0cde1897a2a195d4484cb71",
        "md5": "5bb790e0bf90881c438f80c7034c2f4f",
        "sha256": "5be1f649bfb697b6993320cfb53797e6ae90c8863c366b608098e784dbd65ccb"
      },
      "downloads": -1,
      "filename": "i-PI-2.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5bb790e0bf90881c438f80c7034c2f4f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 332216,
      "upload_time": "2021-03-19T12:40:27",
      "upload_time_iso_8601": "2021-03-19T12:40:27.587856Z",
      "url": "https://files.pythonhosted.org/packages/a7/68/952b2ace260bdea4a98d167640c0cf371f9ac0cde1897a2a195d4484cb71/i-PI-2.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}