{
  "info": {
    "author": "Abdelhadi Abu-Shamleh",
    "author_email": "abushamleh92@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Django Channels Notifications\nNotifying users of various things that happen in your application is super easy to implement. Django Channels notifications allow you to send a message to any user via Email, Datbase, and many other channels.\n\n<br/>\n\n## Installation\n\n1. Run the [pip](https://pip.pypa.io/en/stable/) command to install the latest version:\n\n```bash\n pip install django-channels-notifications\n```\n\n2. Add `django_channels_notifications` to your `INSTALLED_APPS` in settings.py:\n```bash\n INSTALLED_APPS = (\n    ...\n    'django_channels_notifications',\n )\n```\n\n3. Run the migration command:\n```bash\n python manage.py migrate\n```\n\n<br/>\n\n## Creating Notifications\n\nIn Django Channels Notifications, each notification is represented by a single class, and to create a new notification you can run the following manage.py command:\n```bash\n python manage.py createnotification TestNotification\n ```   \n\nAnd this will place a fresh notification class with the below contents. Each notification class contains a `via` method and a variable number of message building methods (such as `to_mail` or `to_database`) that convert the notification to a message optimized for that particular channel.\n\n```python\nfrom django_channels_notifications.core import Notification  \nfrom django_channels_notifications.core.channels import DatabaseChannel  \n\n\nclass TestNotification(Notification):  \n\n  # Get the notification's delivery channels.  \n  def via(self, notifiable):  \n        return [DatabaseChannel]  \n\n  # Get the dict representation of the notification.  \n  def to_database(self, notifiable):  \n        pass\n```\n<br/>\n\n## Sending  Notifications\n\n###  # Using The Notifiable Mixin\nNotifications may be sent in two ways: using the notify method of the Notifiable mixin or using the NotificationSender . First, let's explore using the mixin:\n\n```python\n from django_channels_notifications.core import Notifiable\n from django.db import models\n\n class Profile(models.Model, Notifiable):  \n\tphone = models.CharField(max_length=255, verbose_name='Phone')\n\taddress = models.TextField(max_length=512,verbose_name='Address')\n\n```\nAdding `Notifiable` mixin in your  `Profile` model will allow you to easily send notifications to profiles using `notify` method. The `notify` method expects to receive a notification instance:\n```python\n profile = Profile.objects.get(pk=1)\n profile.notify(TestNotification());\n```\n\n**Remember ,** you may use the `django_channels_notifications.core.Notifiable` mixin on any of your models. You are not limited to only including it on your `Profile`model.\n\n\n###  # Using The NotificationSender:\nAlternatively, you may send notifications via the `NotificationSender` . This is useful primarily when you need to send a notification to multiple notifiable entities such as a list of profiles. To send notifications using the NotificationSender, pass all of the notifiable entities and the notification instance to the `send` method:\n\n```python\n from django_channels_notifications.core import NotificationSender\n\n profiles = Profile.objects.all()\n NotificationSender.send(profiles, TestNotification())\n\n```\n\n###  # Specifying Delivery Channels:\nEvery notification class has a `via` method that determines on which channels the notification will be delivered. Notifications may be sent on the `database`, `mail`,  `unifonc` channels.\n\nThe `via` method receives a `notifiable` instance, which will be an instance of the class to which the notification is being sent. You may use `notifiable` to determine which channels the notification should be delivered on:\n\n```python\n\n #Get the notification's delivery channels.\n def via(self, notifiable):\n\t if notifiable.prefers_sms:\n\t\treturn [UnifonicChannel]\n\t return\t[DatabaseChannel]\n\n```\nLet's quickly go through the different notification channels supported by Django Channels Notifications.\n\n-   **Database:** This option allows you to store notifications in a database should you wish to build a custom UI to display it.\n-  **Mail:** The notifications will be sent in the form of email to users.\n-  **Unifonic:** As the name suggests, users will receive SMS notifications on their phone.\n<br/>\n\n## Database Channel\nThe `DatabaseChannel` notification stores the notification information in a database table. This table will contain information such as the notification type as well as custom JSON data that describes the notification.\n\n###  # Formatting Database Notifications:\nIf a notification supports being stored in a database table, you should define a `to_database`  method on the notification class. This method will receive a `notifiable` entity and should return a plain Python dict. The returned dict will be encoded as JSON and stored in the `data` column of your `notifications` table. Let's take a look at an example `to_database` method:\n\n```python\n\n # Get the dict representation of the notification. \n def to_database(self, notifiable): \n    return {\n        'invoice_id': 12,\n        'amount': 200,\n    } \n\n```\n\n###  # Accessing The Notifications\nOnce notifications are stored in the database, you need a convenient way to access them from your notifiable entities. To fetch notifications, you may use the `notifications` method. By default, notifications will be sorted by the `created_at` timestamp:\n```python\n\n profile = Profile.objects.get(pk=1)\n\n for notification in profile.notifications():\n     print(notification.type)\n\n```\n\nIf you want to retrieve only the \"unread\" notifications, you may use the  `unread_notifications`  method and If you want to retrieve only the \"read\" notifications, you may use the  `read_notifications`  method. Again, these notifications will be sorted by the  `created_at`  timestamp:\n\n```python\n\n profile = Profile.objects.get(pk=1)\n\n for notification in profile.unread_notifications():\n     print(notification.type)\n\n for notification in profile.read_notifications():\n     print(notification.type)\n```\n\n###  # Marking Notifications As Read , Unread: \nTypically, you will want to mark a notification as \"read\" when a user views it. The `django_channels_notifications.core.notifiable` mixin provides  `mark_as_read` and `mark_as_unread` methods, which updates the `read_at` column on the notification's database record:\n\n```python\n\nprofile = Profile.objects.get(pk=1)\n\n# Marking notifications as read\nfor notification in profile.unread_notifications():\n    notification.mark_as_read()\n\n# Marking notifications as unread   \nfor notification in profile.read_notifications():\n    notification.mark_as_unread()    \n\n```\n<br/>\n\n## Mail Channel  \nIf a notification supports being sent as an email, you should define a `to_mail` method on the notification class. This method will receive a `notifiable` entity and should return a [`django.core.mail.EmailMessage`](https://docs.djangoproject.com/en/2.2/topics/email/#the-emailmessage-class)  or  [`django.core.mail.EmailMultiAlternatives`](https://docs.djangoproject.com/en/2.2/topics/email/#sending-alternative-content-types) instance. Let's take a look at an example `to_mail` method:   \n```python\nfrom django.core.mail import EmailMessage\n\n # Get the mail representation of the notification.\n def to_mail(self, notifiable):  \n    return EmailMessage(\n        'Hello',\n        'Body goes here',\n        'from@example.com',\n        ['to1@example.com', 'to2@example.com'],\n        ['bcc@example.com'],\n        reply_to=['another@example.com'],\n        headers={'Message-ID': 'foo'},\n    )    \n\n```\n\n###  # Sending through \"Mailgun\" :\nTo use the Mailgun provider,  you need to add the following parameters to your `settings.py`:\n\n```bash\n EMAIL_HOST = 'smtp.mailgun.org'  \n EMAIL_PORT = 587  \n EMAIL_HOST_USER = 'postmaster@msg.com' #please change this with your username  \n EMAIL_HOST_PASSWORD = '112233445566778899' #please change this with your password  \n EMAIL_USE_TLS  =  True\n```\n\n###  # Sending through \"SES\" :\nTo use the SES provider, you'll need [Boto](http://boto.cloudhackers.com/) 2.1.0 or higher. [Boto](http://boto.cloudhackers.com/) is a Python library that wraps the AWS API. \n\nYou can do the following to install boto 2.1.0 (we're using --upgrade here to make sure you get 2.1.0):\n```bash\npip install --upgrade boto\n```\n\nInstall django-ses:\n```bash\npip install django-ses\n```\n\nAdd the following to your settings.py:\n\n```python\nEMAIL_BACKEND = 'django_ses.SESBackend'\n\n# These are optional -- if they're set as environment variables they won't\n# need to be set here as well\nAWS_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'\nAWS_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'\n\n# Additionally, if you are not using the default AWS region of us-east-1,\n# you need to specify a region, like so:\nAWS_SES_REGION_NAME = 'us-west-2'\nAWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'\n```\n\n<br/>\n\n## Unifonic Channel\nThe `UnifonicChannel` notification allow you to sent the notification as SMS via Unifonic.\n\nYou need to add `UNIFONIC_APPSID`  in settings.py:\n```bash\n UNIFONIC_APPSID = \"Your Unifonic APPSID\" \n```\n\n\n###  # Formatting Unifonic Notifications:\nIf a notification supports being sent as an SMS, you should define a `to_unifonic` method on the notification class. This method will receive a `notifiable` entity and should return a `django_channels_notifications.core.channels.unifonic_channel.UnifonicMessage` instance:\n```python\n from django_channels_notifications.core.channels.unifonic_channel import UnifonicMessage\n\n # Get the Unifonic representation of the notification.\n def to_unifonic(self, notifiable):  \n    return UnifonicMessage().set_body('Your SMS message content').set_recipient(notifiable.phone)\n\n```\n### # Customizing The \"SenderID\":\nIf you would like to send some notifications from a SenderID that is different from the default SenderID in your  Unifonic account, you may use the  `set_sender_id` method on a  `UnifonicMessage`  instance:\n```python\n from django_channels_notifications.core.channels.unifonic_channel import UnifonicMessage\n\n # Get the Unifonic representation of the notification.\n def to_unifonic(self, notifiable):  \n    return UnifonicMessage().set_body('Your SMS message content').set_recipient(notifiable.phone).set_sender_id('Your SenderID')\n\n```\n<br/>\n\n## Custom Channels\nDjango Channels Notifications ships with a handful of notification channels, but you may want to write your own channel to deliver notifications via other channels. Django Channels Notifications makes it simple. To get started, define a class that extended from `django_channels_notifications.core.BaseChannel` and contains a `send` method. The method should receive two arguments: a `notifiable` and a `notification`. or by run the following manage.py command:\n\n```bash\n python manage.py createchannel TestChannel\n```\n\n```python\n from django_channels_notifications.core import BaseChannel  \n\n\n class TestChannel(BaseChannel):  \n\t# Send the given notification.  \n\tdef send(self, notifiable, notification):  \n        pass\n\n```\nOnce your notification channel class has been defined, you may return the class name from the `via` method of any of your notifications:\n\n```python\nclass TestNotification(Notification):  \n\n  # Get the notification's delivery channels.  \n  def via(self, notifiable):  \n        return [DatabaseChannel, TestChannel]  \n\n  # Get the dict representation of the notification.  \n  def to_database(self, notifiable):  \n        pass\n\n  # Get the dict representation of the notification.  \n  def to_test(self, notifiable):  \n        pass\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Abdelhadi92/django-channels-notifications",
    "keywords": "Django Channels Notifications",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-channels-notifications",
    "package_url": "https://pypi.org/project/django-channels-notifications/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-channels-notifications/",
    "project_urls": {
      "Homepage": "https://github.com/Abdelhadi92/django-channels-notifications"
    },
    "release_url": "https://pypi.org/project/django-channels-notifications/1.1/",
    "requires_dist": [
      "setuptools",
      "jsonfield",
      "requests"
    ],
    "requires_python": "",
    "summary": "Django Channels Notifications",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9153382,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b402f842a47dc7c1a35bffa96537dfc44335c3fc186fabde2d95115d0b2fa2fa",
          "md5": "aae1a7ffdd46b89e0d4e768b5f4947dd",
          "sha256": "1b526cf06dd88bb8542fbc5388318b0b10ed66d740bd9023b3386d7101a659bc"
        },
        "downloads": -1,
        "filename": "django_channels_notifications-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aae1a7ffdd46b89e0d4e768b5f4947dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13974,
        "upload_time": "2021-01-16T22:34:09",
        "upload_time_iso_8601": "2021-01-16T22:34:09.983170Z",
        "url": "https://files.pythonhosted.org/packages/b4/02/f842a47dc7c1a35bffa96537dfc44335c3fc186fabde2d95115d0b2fa2fa/django_channels_notifications-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb6879a77dee882ebf8a721325a75d91b88f0b44c9ecb4c02d038ff685b29927",
          "md5": "17a3c65d92e22b1a9b1d0f9a868d031a",
          "sha256": "498404d5f3d54eec0be17b224cc397960c2c036d564392a417560c32f59ff386"
        },
        "downloads": -1,
        "filename": "django-channels-notifications-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17a3c65d92e22b1a9b1d0f9a868d031a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13145,
        "upload_time": "2021-01-16T22:34:11",
        "upload_time_iso_8601": "2021-01-16T22:34:11.856262Z",
        "url": "https://files.pythonhosted.org/packages/cb/68/79a77dee882ebf8a721325a75d91b88f0b44c9ecb4c02d038ff685b29927/django-channels-notifications-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b402f842a47dc7c1a35bffa96537dfc44335c3fc186fabde2d95115d0b2fa2fa",
        "md5": "aae1a7ffdd46b89e0d4e768b5f4947dd",
        "sha256": "1b526cf06dd88bb8542fbc5388318b0b10ed66d740bd9023b3386d7101a659bc"
      },
      "downloads": -1,
      "filename": "django_channels_notifications-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "aae1a7ffdd46b89e0d4e768b5f4947dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13974,
      "upload_time": "2021-01-16T22:34:09",
      "upload_time_iso_8601": "2021-01-16T22:34:09.983170Z",
      "url": "https://files.pythonhosted.org/packages/b4/02/f842a47dc7c1a35bffa96537dfc44335c3fc186fabde2d95115d0b2fa2fa/django_channels_notifications-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb6879a77dee882ebf8a721325a75d91b88f0b44c9ecb4c02d038ff685b29927",
        "md5": "17a3c65d92e22b1a9b1d0f9a868d031a",
        "sha256": "498404d5f3d54eec0be17b224cc397960c2c036d564392a417560c32f59ff386"
      },
      "downloads": -1,
      "filename": "django-channels-notifications-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "17a3c65d92e22b1a9b1d0f9a868d031a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13145,
      "upload_time": "2021-01-16T22:34:11",
      "upload_time_iso_8601": "2021-01-16T22:34:11.856262Z",
      "url": "https://files.pythonhosted.org/packages/cb/68/79a77dee882ebf8a721325a75d91b88f0b44c9ecb4c02d038ff685b29927/django-channels-notifications-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}