{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "====\nandi\n====\n\n.. image:: https://img.shields.io/pypi/v/andi.svg\n   :target: https://pypi.python.org/pypi/andi\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/pypi/pyversions/andi.svg\n   :target: https://pypi.python.org/pypi/andi\n   :alt: Supported Python Versions\n\n.. image:: https://travis-ci.com/scrapinghub/andi.svg?branch=master\n   :target: https://travis-ci.com/scrapinghub/andi\n   :alt: Build Status\n\n.. image:: https://codecov.io/github/scrapinghub/andi/coverage.svg?branch=master\n   :target: https://codecov.io/gh/scrapinghub/andi\n   :alt: Coverage report\n\n``andi`` makes easy implementing custom dependency injection mechanisms\nwhere dependencies are expressed using type annotations.\n\n``andi`` is useful as a building block for frameworks, or as a library\nwhich helps to implement dependency injection (thus the name -\nANnotation-based Dependency Injection).\n\nLicense is BSD 3-clause.\n\nInstallation\n============\n\n::\n\n    pip install andi\n\nandi requires Python >= 3.5.3.\n\nGoal\n====\n\nSee the following classes that represents parts of a car\n(and the car itself):\n\n.. code-block:: python\n\n    class Valves:\n        pass\n\n    class Engine:\n        def __init__(self, valves):\n            self.valves = valves\n\n    class Wheels:\n        pass\n\n    class Car:\n        def __init__(self, engine, wheels):\n            self.engine = engine\n            self.wheels = wheels\n\nThe following would be the usual way of build a ``Car`` instance:\n\n.. code-block:: python\n\n    valves = Valves()\n    engine = Engine(valves)\n    wheels = Wheels()\n    car = Car(engine, wheels)\n\nThere are some dependencies between the classes: A car requires\nand engine and wheels to be built, as well as the engine requires\nvalves. These are the car dependencies and sub-dependencies.\n\nThe question is, could we have an automatic way of building instances?\nFor example, could we have a ``build`` function that\ngiven the ``Car`` class or any other class would return an instance\neven if the class itself has some other dependencies?\n\n.. code-block:: python\n\n    car = build(Car)  # Andi helps creating this generic build function\n\n``andi`` inspect the dependency tree and creates a plan making easy creating\nsuch a ``build`` function.\n\nThis is how this plan for the ``Car`` class would looks like:\n\n1. Invoke ``Valves`` with empty arguments\n2. Invoke ``Engine`` using the instance created in 1 as the argument ``valves``\n3. Invoke ``Wheels`` with empty arguments\n4. Invoke ``Cars`` with the instance created in 2 as the ``engine`` argument and with\n   the instance created in 3 as the ``wheels`` argument\n\nType annotations\n----------------\n\nBut there is a missing piece in the Car example before. How can\n``andi`` know that the class ``Valves`` is required to build the\nargument ``valves``? A first idea would be to use the argument\nname as a hint for the class name\n(as `pinject <https://pypi.org/project/pinject/>`_ does),\nbut ``andi`` opts to rely on arguments' type annotations instead.\n\nThe classes for ``Car`` should then be rewritten as:\n\n.. code-block:: python\n\n    class Valves:\n        pass\n\n    class Engine:\n        def __init__(self, valves: Valves):\n            self.valves = valves\n\n    class Wheels:\n        pass\n\n    class Car:\n        def __init__(self, engine: Engine, wheels: Wheels):\n            self.engine = engine\n            self.wheels = wheels\n\nNote how now there is a explicit annotation stating that the\n``valves`` argument is of type ``Valves``\n(same for ``engine`` and ``wheels``).\n\nThe ``andi.plan`` function can now create a plan to build the\n``Car`` class (ignore the ``is_injectable`` parameter by now):\n\n.. code-block:: python\n\n    plan = andi.plan(Car, is_injectable={Engine, Wheels, Valves})\n\n\nThis is what the ``plan`` variable contains:\n\n.. code-block:: python\n\n    [(Valves, {}),\n     (Engine, {'valves': Valves}),\n     (Wheels, {}),\n     (Car,    {'engine': Engine,\n               'wheels': Wheels})]\n\nNote how this plan correspond exactly to the 4-steps plan described\nin the previous section.\n\nBuilding from the plan\n----------------------\n\nCreating a generic function to build the instances from\na plan generated by ``andi`` is then very easy:\n\n.. code-block:: python\n\n    def build(plan):\n        instances = {}\n        for fn_or_cls, kwargs_spec in plan:\n            instances[fn_or_cls] = fn_or_cls(**kwargs_spec.kwargs(instances))\n        return instances\n\nSo let's see putting all the pieces together. The following code\ncreates an instance of ``Car`` using ``andi``:\n\n.. code-block:: python\n\n    plan = andi.plan(Car, is_injectable={Engine, Wheels, Valves})\n    instances = build(plan)\n    car = instances[Car]\n\nis_injectable\n-------------\n\nIt is not always desired for ``andi`` to manage every single annotation found.\nInstead is usually better to explicitly declare which types\ncan be handled by ``andi``. The argument ``is_injectable``\nallows to customize this feature.\n\n``andi`` will raise an error on the presence of a dependency that cannot be resolved\nbecause it is not injectable.\n\nUsually is desirable to declare injectabilty by\ncreating a base class to inherit from. For example,\nwe could create a base class ``Injectable`` as base\nclass for the car components:\n\n.. code-block:: python\n\n    class Injectable(ABC):\n        pass\n\n    class Valves(Injectable):\n        pass\n\n    class Engine(Injectable):\n        def __init__(self, valves: Valves):\n            self.valves = valves\n\n    class Wheels(Injectable):\n        pass\n\nThe call to ``andi.plan`` would then be:\n\n.. code-block:: python\n\n    is_injectable = lambda cls: issubclass(cls, Injectable)\n    plan = andi.plan(Car, is_injectable=is_injectable)\n\nFunctions and methods\n---------------------\n\nDependency injection is also very useful when applied to functions.\nImagine that you have a function ``drive`` that drives the ``Car``\nthrough the ``Road``:\n\n.. code-block:: python\n\n    class Road(Injectable):\n        ...\n\n    def drive(car: Car, road: Road, speed):\n        ... # Drive the car through the road\n\nThe dependencies has to be resolved before invoking\nthe ``drive`` function:\n\n.. code-block:: python\n\n    plan = andi.plan(drive, is_injectable=is_injectable)\n    instances = build(plan.dependencies)\n\nNow the ``drive`` function can be invoked:\n\n.. code-block:: python\n\n    drive(instances[Car], instances[Road], 100)\n\nNote that ``speed`` argument was not annotated. The resultant plan just won't include it\nbecause the ``andi.plan`` ``full_final_kwargs`` parameter is ``False``\nby default. Otherwise, an exception would have been raised (see ``full_final_kwargs`` argument\ndocumentation for more information).\n\nAn alternative and more generic way to invoke the drive function\nwould be:\n\n.. code-block:: python\n\n    drive(speed=100, **plan.final_kwargs(instances))\n\ndataclasses and attrs\n---------------------\n\n``andi`` supports classes defined using `attrs <https://www.attrs.org/>`_\nand also `dataclasses <https://docs.python.org/3/library/dataclasses.html>`_.\nFor example the ``Car`` class could have been defined as:\n\n.. code-block:: python\n\n    # attrs class example\n    @attr.s(auto_attribs=True)\n    class Car:\n        engine: Engine\n        wheels: Wheels\n\n    # dataclass example\n    @dataclass\n    class Car(Injectable):\n        engine: Engine\n        wheels: Wheels\n\nUsing ``attrs`` or ``dataclass`` is handy because they avoid\nsome boilerplate.\n\nExternally provided dependencies\n--------------------------------\n\nRetaining the control over object instantiation\ncould be desired in some cases. For example creating\na database connection could require accessing some\ncredentials registry or getting the connection from a pool\nso you might want to control building\nsuch instances outside of the regular\ndependency injection mechanism.\n\n``andi.plan`` allows to specify which types would be\nexternally provided. Let's see an example:\n\n.. code-block:: python\n\n    class DBConnection(ABC):\n\n        @abstractmethod\n        def getConn():\n            pass\n\n    @dataclass\n    class UsersDAO:\n        conn: DBConnection\n\n        def getUsers():\n           return self.conn.query(\"SELECT * FROM USERS\")\n\n``UsersDAO`` requires a database connection to run queries.\nBut the connection will be provided externally from a pool, so we\ncall then ``andi.plan`` using also the ``externally_provided``\nparameter:\n\n.. code-block:: python\n\n    plan = andi.plan(UsersDAO, is_injectable=is_injectable,\n                     externally_provided={DBConnection})\n\nThe build method should then be modified slightly to be able\nto inject externally provided instances:\n\n.. code-block:: python\n\n    def build(plan, instances_stock=None):\n        instances_stock = instances_stock or {}\n        instances = {}\n        for fn_or_cls, kwargs_spec in plan:\n            if fn_or_cls in instances_stock:\n                instances[fn_or_cls] = instances_stock[fn_or_cls]\n            else:\n                instances[fn_or_cls] = fn_or_cls(**kwargs_spec.kwargs(instances))\n        return instances\n\nNow we are ready to create ``UserDAO`` instances with ``andi``:\n\n.. code-block:: python\n\n    plan = andi.plan(UsersDAO, is_injectable=is_injectable,\n                     externally_provided={DBConnection})\n    dbconnection = DBPool.get_connection()\n    instances = build(plan.dependencies, {DBConnection: dbconnection})\n    users_dao = instances[UsersDAO]\n    users = user_dao.getUsers()\n\nNote that being injectable is not required for externally provided\ndependencies.\n\nOptional\n--------\n\n``Optional`` type annotations can be used in case of\ndependencies that can be optional. For example:\n\n.. code-block:: python\n\n    @dataclass\n    class Dashboard:\n        conn: Optional[DBConnection]\n\n        def showPage():\n            if self.conn:\n                self.conn.query(\"INSERT INTO VISITS ...\")\n            ...  # renders a HTML page\n\nIn this example, the ``Dashboard`` class generates a HTML page to be served, and\nalso stores the number of visits into a database. Database\ncould be absent in some environments, but you might want\nthe dashboard to work even if it cannot log the visits.\n\nWhen a database connection is possible the plan call would be:\n\n.. code-block:: python\n\n    plan = andi.plan(UsersDAO, is_injectable=is_injectable,\n                     externally_provided={DBConnection})\n\n\nAnd the following when the connection is absent:\n\n.. code-block:: python\n\n    plan = andi.plan(UsersDAO, is_injectable=is_injectable,\n                     externally_provided={})\n\nIt is also required to register the type of ``None``\nas injectable. Otherwise ``andi.plan`` with raise an exception\nsaying that \"NoneType is not injectable\".\n\n.. code-block:: python\n\n    Injectable.register(type(None))\n\nUnion\n-----\n\n``Union`` can also be used to express alternatives. For example:\n\n.. code-block:: python\n\n    @dataclass\n    class UsersDAO:\n        conn: Union[ProductionDBConnection, DevelopmentDBConnection]\n\n``DevelopmentDBConnection`` will be injected in the absence of\n``ProductionDBConnection``.\n\nFull final kwargs mode\n-------------------------\n\nBy default ``andi.plan`` won't fail if it is not able to provide\nsome of the direct dependencies for the given input (see the\n``speed`` argument in one of the examples above).\n\nThis behaviour is desired when inspecting functions\nfor which is already known that some arguments won't be\ninjectable but they will be provided by other means\n(like the ``drive`` function above).\n\nBut in other cases is better to be sure that all dependencies\nare fulfilled and otherwise fail. Such is the case for classes.\nSo it is recommended to set ``full_final_kwargs=True`` when invoking\n``andi.plan`` for classes.\n\nWhy type annotations?\n---------------------\n\n``andi`` uses type annotations to declare dependencies (inputs).\nIt has several advantages, and some limitations as well.\n\nAdvantages:\n\n1. Built-in language feature.\n2. You're not lying when specifying a type - these\n   annotations still work as usual type annotations.\n3. In many projects you'd annotate arguments anyways, so ``andi`` support\n   is \"for free\".\n\nLimitations:\n\n1. Callable can't have two arguments of the same type.\n2. This feature could possibly conflict with regular type annotation usages.\n\nIf your callable has two arguments of the same type, consider making them\ndifferent types. For example, a callable may receive url and html of\na web page:\n\n.. code-block:: python\n\n    def parse(html: str, url: str):\n        # ...\n\nTo make it play well with ``andi``, you may define separate types for url\nand for html:\n\n.. code-block:: python\n\n    class HTML(str):\n        pass\n\n    class URL(str):\n        pass\n\n    def parse(html: HTML, url: URL):\n        # ...\n\nThis is more boilerplate though.\n\nWhy doesn't andi handle creation of objects?\n--------------------------------------------\n\nCurrently ``andi`` just inspects callable and chooses best concrete types\na framework needs to create and pass to a callable, without prescribing how\nto create them. This makes ``andi`` useful in various contexts - e.g.\n\n* creation of some objects may require asynchronous functions, and it\n  may depend on libraries used (asyncio, twisted, etc.)\n* in streaming architectures (e.g. based on Kafka) inspection may happen\n  on one machine, while creation of objects may happen on different nodes\n  in a distributed system, and then actually running a callable may happen on\n  yet another machine.\n\nIt is hard to design API with enough flexibility for all such use cases.\nThat said, ``andi`` may provide more helpers in future,\nonce patterns emerge, even if they're useful only in certain contexts.\n\nExamples: callback based frameworks\n-----------------------------------\n\nSpider example\n**************\n\nNothing better than a example to understand how ``andi`` can be useful.\nLet's imagine you want to implemented a callback based framework\nfor writing spiders to crawl web pages.\n\nThe basic idea is that there is framework in which the user\ncan write spiders. Each spider is a collection of callbacks\nthat can process data from a page, emit extracted data or request new\npages. Then, there is an engine that takes care of downloading\nthe web pages\nand invoking the user defined callbacks, chaining requests\nwith its corresponding callback.\n\nLet's see an example of an spider to download recipes\nfrom a cooking page:\n\n.. code-block:: python\n\n    class MySpider(Spider):\n        start_url = \"htttp://a_page_with_a_list_of_recipes\"\n\n        def parse(self, response):\n            for url in recipes_urls_from_page(response)\n                yield Request(url, callback=parse_recipe)\n\n        def parse_recipe(self, response):\n            yield extract_recipe(response)\n\n\nIt would be handy if the user can define some requirements\njust by annotating parameters in the callbacks. And ``andi`` make it\npossible.\n\nFor example, a particular callback could require access to the cookies:\n\n.. code-block:: python\n\n    def parse(self, response: Response, cookies: CookieJar):\n        # ... Do something with the response and the cookies\n\nIn this case, the engine can use ``andi`` to inspect the ``parse`` method, and\ndetect that ``Response`` and ``CookieJar`` are required.\nThen the framework will build them and will invoke the callback.\n\nThis functionality would serve to inject into the users callbacks\nsome components only when they are required.\n\nIt could also serve to encapsulate better the user code. For\nexample, we could just decouple the recipe extraction into\nit's own class:\n\n.. code-block:: python\n\n    @dataclass\n    class RecipeExtractor:\n        response: Response\n\n        def to_item():\n            return extract_recipe(self.response)\n\nThe callback could then be defined as:\n\n.. code-block:: python\n\n        def parse_recipe(extractor: RecipeExtractor):\n            yield extractor.to_item()\n\nNote how handy is that with ``andi`` the engine can create\nan instance of ``RecipesExtractor`` feeding it with the\ndeclared ``Response`` dependency.\n\nIn definitive, using ``andi`` in such a framework\ncan provide great flexibility to the user\nand reduce boilerplate.\n\nWeb server example\n******************\n\n``andi`` can be useful also for implementing a new\nweb framework.\n\nLet's imagine a framework where you can declare your sever in a\nclass like the following:\n\n.. code-block:: python\n\n    class MyWeb(Server):\n\n        @route(\"/products\")\n        def productspage(self, request: Request):\n            ... # return the composed page\n\n        @route(\"/sales\")\n        def salespage(self, request: Request):\n            ... # return the composed page\n\nThe former case is composed of two endpoints, one for serving\na page with a summary of sales, and a second one to serve\nthe products list.\n\nConnection to the database can be required\nto sever these pages. This logic could be encapsulated\nin some classes:\n\n.. code-block:: python\n\n    @dataclass\n    class Products:\n        conn: DBConnection\n\n        def get_products()\n            return self.conn.query(\"SELECT ...\")\n\n    @dataclass\n    class Sales:\n        conn: DBConnection\n\n        def get_sales()\n            return self.conn.query(\"SELECT ...\")\n\nNow ``productspage`` and ``salespage`` methods can just declare\nthat they require these objects:\n\n.. code-block:: python\n\n    class MyWeb(Server):\n\n        @route(\"/products\")\n        def productspage(self, request: Request, products: Products):\n            ... # return the composed page\n\n        @route(\"/sales\")\n        def salespage(self, request: Request, sales: Sales):\n            ... # return the composed page\n\nAnd the framework can then be responsible to fulfill these\ndependencies. The flexibility offered would be a great advantage.\nAs an example, if would be very easy to create a page that requires\nboth sales and products:\n\n.. code-block:: python\n\n        @route(\"/overview\")\n        def productspage(self, request: Request,\n                         products: Products, sales: Sales):\n            ... # return the composed overview page\n\n\nContributing\n============\n\n* Source code: https://github.com/scrapinghub/andi\n* Issue tracker: https://github.com/scrapinghub/andi/issues\n\nUse tox_ to run tests with different Python versions::\n\n    tox\n\nThe command above also runs type checks; we use mypy.\n\n.. _tox: https://tox.readthedocs.io\n\n\nChanges\n=======\n\n0.4.1 (2021-02-11)\n------------------\n\n* Overrides support in ``andi.plan``\n\n0.4.0 (2020-04-23)\n------------------\n\n* ``andi.inspect`` can handle classes now (their ``__init__`` method\n  is inspected)\n* ``andi.plan`` and ``andi.inspect`` can handle objects which are\n  callable via ``__call__`` method.\n\n0.3.0 (2020-04-03)\n------------------\n\n* ``andi.plan`` function replacing ``andi.to_provide``.\n* Rewrite README explaining the new approach based in ``plan`` method.\n* ``andi.inspect`` return non annotated arguments also.\n\n0.2.0 (2020-02-14)\n------------------\n\n* Better attrs support (workaround issue with string type annotations).\n* Declare Python 3.8 support.\n* More tests; ensure dataclasses support.\n\n0.1 (2019-08-28)\n----------------\n\nInitial release.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/scrapinghub/andi",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "andi",
    "package_url": "https://pypi.org/project/andi/",
    "platform": "",
    "project_url": "https://pypi.org/project/andi/",
    "project_urls": {
      "Homepage": "https://github.com/scrapinghub/andi"
    },
    "release_url": "https://pypi.org/project/andi/0.4.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for annotation-based dependency injection",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9387502,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c01200abded0948a6245b9e2d549a74800da3fa8fc3250884c3fbc91107f967b",
          "md5": "3cda79495f7401996460781dc0e0d903",
          "sha256": "6f5435a510ca487b683783934ac1db67ba75d5e682c2eb426946ef19b2de2e8c"
        },
        "downloads": -1,
        "filename": "andi-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cda79495f7401996460781dc0e0d903",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7491,
        "upload_time": "2019-08-28T18:06:13",
        "upload_time_iso_8601": "2019-08-28T18:06:13.129042Z",
        "url": "https://files.pythonhosted.org/packages/c0/12/00abded0948a6245b9e2d549a74800da3fa8fc3250884c3fbc91107f967b/andi-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68c5b862a8890cb01620cbec939ade48b7c96fa38354854eeb63d16d07a39edb",
          "md5": "05b527572312f5b863ffbe2415062e9e",
          "sha256": "b78e51b238c0c99b3ce5ac12f90c3bdb652cc2b6bdc40c8c3dc9c8f296b77f3b"
        },
        "downloads": -1,
        "filename": "andi-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "05b527572312f5b863ffbe2415062e9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9688,
        "upload_time": "2019-08-28T18:06:15",
        "upload_time_iso_8601": "2019-08-28T18:06:15.586069Z",
        "url": "https://files.pythonhosted.org/packages/68/c5/b862a8890cb01620cbec939ade48b7c96fa38354854eeb63d16d07a39edb/andi-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8d9ebc55a577824703892d3064b0b8b877b63026e3c9d934389ec592ca10eac",
          "md5": "d67ede9269ca1a16898eb68b984603d2",
          "sha256": "7846636376d7d1c72a75f022b10fa7f7bb92564ffd33e84a48d183f9a252a3cf"
        },
        "downloads": -1,
        "filename": "andi-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d67ede9269ca1a16898eb68b984603d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8262,
        "upload_time": "2020-02-14T13:53:41",
        "upload_time_iso_8601": "2020-02-14T13:53:41.758890Z",
        "url": "https://files.pythonhosted.org/packages/b8/d9/ebc55a577824703892d3064b0b8b877b63026e3c9d934389ec592ca10eac/andi-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c1bb1c8e8fab0d296f36f5cc579df8c3c0c8f82e40b31ca32f63fe692f74057",
          "md5": "d917f87b0967fcedfd59a90f4fad81e8",
          "sha256": "e029dbb4ee5a740bd45cb939ae0523c7e86d51a1e1e6a3c24da039f640a2f2be"
        },
        "downloads": -1,
        "filename": "andi-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d917f87b0967fcedfd59a90f4fad81e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11492,
        "upload_time": "2020-02-14T13:53:43",
        "upload_time_iso_8601": "2020-02-14T13:53:43.611060Z",
        "url": "https://files.pythonhosted.org/packages/3c/1b/b1c8e8fab0d296f36f5cc579df8c3c0c8f82e40b31ca32f63fe692f74057/andi-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be99d0f45cd9a22a36fa602335c68426aad04ed1542cf98e68a01b79af2ea67d",
          "md5": "e902c5b5567781e64068ae439214e356",
          "sha256": "7e7c6444710524567f7684a9525de9ef5de5e8f732a2d3f0c4df16d42d75fbde"
        },
        "downloads": -1,
        "filename": "andi-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e902c5b5567781e64068ae439214e356",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15257,
        "upload_time": "2020-04-03T13:57:18",
        "upload_time_iso_8601": "2020-04-03T13:57:18.918171Z",
        "url": "https://files.pythonhosted.org/packages/be/99/d0f45cd9a22a36fa602335c68426aad04ed1542cf98e68a01b79af2ea67d/andi-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d3524f6085aa7e61c1b60cdbcb5aca47cea34865ec1e9d891d29cfdb5038f92",
          "md5": "e30ce0a2093dac49bd0d2476727c9282",
          "sha256": "72869569d88fb7b9b57b3714a82782d2e3e16d183846205c672a2b39e1de601b"
        },
        "downloads": -1,
        "filename": "andi-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e30ce0a2093dac49bd0d2476727c9282",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25688,
        "upload_time": "2020-04-03T13:57:20",
        "upload_time_iso_8601": "2020-04-03T13:57:20.769111Z",
        "url": "https://files.pythonhosted.org/packages/1d/35/24f6085aa7e61c1b60cdbcb5aca47cea34865ec1e9d891d29cfdb5038f92/andi-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04498edda5f911da19d06323d1a88ff2f3eaba4ecffc584fe795b53c0c434929",
          "md5": "c05b3d9f4b767c7b61d7d03dced73a53",
          "sha256": "4433b56f06dd2677b2ba471f5a5026dd9a56377560a0e2157083a679ea8454c7"
        },
        "downloads": -1,
        "filename": "andi-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c05b3d9f4b767c7b61d7d03dced73a53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15905,
        "upload_time": "2020-04-23T15:10:16",
        "upload_time_iso_8601": "2020-04-23T15:10:16.092158Z",
        "url": "https://files.pythonhosted.org/packages/04/49/8edda5f911da19d06323d1a88ff2f3eaba4ecffc584fe795b53c0c434929/andi-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b709acf37d3bc7db164c755fb7d15ddc077605876c1d89cdcafe9581e56fac01",
          "md5": "3875c7043a14e313cc8a7df108043940",
          "sha256": "ccda828841760d0b6f79d5f6cdbb2d9de89016c5190480a734e842dea9e5771b"
        },
        "downloads": -1,
        "filename": "andi-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3875c7043a14e313cc8a7df108043940",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26741,
        "upload_time": "2020-04-23T15:10:17",
        "upload_time_iso_8601": "2020-04-23T15:10:17.807535Z",
        "url": "https://files.pythonhosted.org/packages/b7/09/acf37d3bc7db164c755fb7d15ddc077605876c1d89cdcafe9581e56fac01/andi-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7337c363dd92a4232e599de0f07d28c48a09921c9d61a65753ede22a7fc7020",
          "md5": "9977119a9a7fdca2090014f645a2d7b5",
          "sha256": "8209d771fb84b26925109f5beb758b6dabbbf28f96ad16c2738184b4e6e01d35"
        },
        "downloads": -1,
        "filename": "andi-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9977119a9a7fdca2090014f645a2d7b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16821,
        "upload_time": "2021-02-11T17:07:49",
        "upload_time_iso_8601": "2021-02-11T17:07:49.351723Z",
        "url": "https://files.pythonhosted.org/packages/d7/33/7c363dd92a4232e599de0f07d28c48a09921c9d61a65753ede22a7fc7020/andi-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47397d55850f61e321b678a436201b1a33345547a5d886dbd009a9e1bb244449",
          "md5": "b658fba9648c23d8dbc1fac26ed539c4",
          "sha256": "d8f4a1f4dfbf84e49442c32fd33bf06a83850dbd55e3bcbc91d108476a8cea21"
        },
        "downloads": -1,
        "filename": "andi-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b658fba9648c23d8dbc1fac26ed539c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28946,
        "upload_time": "2021-02-11T17:07:51",
        "upload_time_iso_8601": "2021-02-11T17:07:51.542503Z",
        "url": "https://files.pythonhosted.org/packages/47/39/7d55850f61e321b678a436201b1a33345547a5d886dbd009a9e1bb244449/andi-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7337c363dd92a4232e599de0f07d28c48a09921c9d61a65753ede22a7fc7020",
        "md5": "9977119a9a7fdca2090014f645a2d7b5",
        "sha256": "8209d771fb84b26925109f5beb758b6dabbbf28f96ad16c2738184b4e6e01d35"
      },
      "downloads": -1,
      "filename": "andi-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9977119a9a7fdca2090014f645a2d7b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16821,
      "upload_time": "2021-02-11T17:07:49",
      "upload_time_iso_8601": "2021-02-11T17:07:49.351723Z",
      "url": "https://files.pythonhosted.org/packages/d7/33/7c363dd92a4232e599de0f07d28c48a09921c9d61a65753ede22a7fc7020/andi-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47397d55850f61e321b678a436201b1a33345547a5d886dbd009a9e1bb244449",
        "md5": "b658fba9648c23d8dbc1fac26ed539c4",
        "sha256": "d8f4a1f4dfbf84e49442c32fd33bf06a83850dbd55e3bcbc91d108476a8cea21"
      },
      "downloads": -1,
      "filename": "andi-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b658fba9648c23d8dbc1fac26ed539c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28946,
      "upload_time": "2021-02-11T17:07:51",
      "upload_time_iso_8601": "2021-02-11T17:07:51.542503Z",
      "url": "https://files.pythonhosted.org/packages/47/39/7d55850f61e321b678a436201b1a33345547a5d886dbd009a9e1bb244449/andi-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}