{
  "info": {
    "author": "Warren Westfall",
    "author_email": "warren.westfall@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# django-custom-table\n\n## Overview\n\nDjango Custom Table is a framework for building the back end to a no-code platform in Django or for adding no-code customizible tables to a Django application.\n\n## Installation\n\nInstall using `pip`\n\n```sh\npip install django-custom-table\n```\n\nor clone the project from github\n\n```sh\ngit clone https://github.com/warrenwestfall/django-custom-table\n```\n\nAdd `custom_table` to your `INSTALLED_APPS` setting.\n\n```Python\nINSTALLED_APPS = [\n    ...\n    'custom_table',\n]\n```\n\n## Example Usage\n\n1. First create a metadata model. This model will store all of the customizations users make to customizable tables. The model stores the app label and model name of the custom table model being customized, so you can have only one metadata model for mutlple customizable table models.\n\n    Edit or create an app's `models.py` module\n\n    ```python\n    from custom_table.models import Metadata\n    from custom_table.formats import DefaultFormat\n\n\n    class MyMetadata(Metadata):\n        created = models.DateTimeField('Created', auto_now_add=True, db_index=True)\n        modified = models.DateTimeField('Modified', auto_now=True)\n        \n        class Meta:\n            ct_format_class = DefaultFormat()\n    ```\n\n    Your metadata model will need to inherit from `custom_table.models.Metadata` and provide a format class (as the `ct_format_class` meta attribute) that tells Django Custom Table how customazaton metadata will be stored and how to format the metadata for use in form and list renderng. How to build your own format class is decribribed later. This example adds some additional audit trail fields.\n\n1. Next create one or more customzable models.\n\n    Create a new customizable model or edit and existing one to make it customizable\n\n    ```python\n    from django.db import models\n    from custom_table.models import CustomizableMeta, CustomizableMixin\n\n\n    STORAGE_FIELDS = {\n        \"indexed_char\": {\n            \"num_to_create\": 10,\n            \"field_class\": models.CharField,\n            \"field_class_params\": {\n                \"max_length\": 128,\n                \"db_index\": True,\n            },\n        },\n        \"char\": {\n            \"num_to_create\": 30,\n            \"field_class\": models.CharField,\n            \"field_class_params\": {\n                \"max_length\": 128,\n            },\n        },\n        \"indexed_integer\": {\n            \"num_to_create\": 20,\n            \"field_class\": models.IntegerField,\n            \"field_class_params\": {\n                \"db_index\": True,\n            },\n        },\n        \"integer\": {\n            \"num_to_create\": 20,\n            \"field_class\": models.IntegerField,\n            \"field_class_params\": {},\n        },\n        \"text\": {\n            \"num_to_create\": 30,\n            \"field_class\": models.TextField,\n            \"field_class_params\": {},\n        },\n        \"float\": {\n            \"num_to_create\": 10,\n            \"field_class\": models.FloatField,\n            \"field_class_params\": {},\n        },\n        \"boolean\": {\n            \"num_to_create\": 10,\n            \"field_class\": models.BooleanField,\n            \"field_class_params\": {},\n        },\n        \"datetime\": {\n            \"num_to_create\": 10,\n            \"field_class\": models.DateTimeField,\n            \"field_class_params\": {},\n        },\n        \"decimal-1000-2\": {\n            \"num_to_create\": 10,\n            \"field_class\": models.DecimalField,\n            \"field_class_params\": {\n                \"max_digits\": 1000,\n                \"decimal_places\": 2,\n            },\n        },\n    }\n\n\n    class MyCustomTable(models.Model, CustomizableMixin, metaclass=CustomizableMeta):\n        created = models.DateTimeField('Created', auto_now_add=True, db_index=True)\n        modified = models.DateTimeField('Modified', auto_now=True)\n        example_static_field = models.CharField('Example Static Field', max_length=32)\n\n        class Meta:\n            ct_metadata_model = MyMetadata\n            ct_storage_fields = STORAGE_FIELDS\n            ct_db_field_prefix = 'ctf_'\n    ```\n\n    Set `custom_table.models.CustomizableMeta` as the metaclass and provide a `ct_storage_fields` meta attribute, a dictionary describing how to generate storage fields and how to map your users custom fields to storage fields. Also it is best to provide `ct_db_field_prefix` with a string to prefix to all storage field names and prevent conflicts with ant static fields in your model.\n\n1. If you require your own form and/or list metadata formats you can create your own metadata format class\n\n    ```python\n    from custom_table.formats import BaseFormat\n\n\n    class RestSpaFormat(BaseFormat):\n        \"\"\" Format metadata for use in a Single Page App with a REST back end\n            and a Javascript front end.\n            Form metadate follows react-jsonschema-form\n        \"\"\"\n\n        def get_custom_fields(self, metadata):\n        \"\"\" Must return a list of dictionaries containing field_name and field_type\n            [\n                {\n                    \"name\": \"example_field_name\",\n                    \"type\": \"char\"\n                },\n            ]\n            Overide this in order to store the metadata in the custom_data field\n            in a different format than what is expected by Metadata.save().\n            This is used by the metadata model to calculate storage mappings\n\n            In this example we will assume that our apllication stores the metadata\n            in the expected format above.\n        \"\"\"\n        return metadata.custom_data\n\n\n        def get_list_metadata(self, metadata):\n            \"\"\" Should return the metadata required for a Django or front end view\n            to render a grid or list.\n            Overide this to produce output required by your appication\n            If it is desired that the list view be entirely dynamic that method\n            should combine both static Django fields and custom fields.\n\n            In this example we include static Django fields and convert them to\n            dictionary/json objects. We also add some simplication of the type\n            to combine types that are stored differently but rendered the same. \n        \"\"\"\n            all_fields = self.get_all_fields(metadata)\n            # print(all_fields)\n            list_metadata = []\n            for field in all_fields:\n                type = field['type']\n                if type.startswith('indexed_'):\n                    type = type[8:]\n                list_field = {\n                    'name': field['name'],\n                    'type': type,\n                }\n                if 'list' in field:\n                    for list_property, value in field['list'].items():\n                        list_field[list_property] = value\n                list_metadata.append(list_field)\n            return list_metadata\n\n\n        def get_form_metadata(self, metadata):\n            \"\"\" Should return the metadata required for a Django or front end view \n                to render a form.\n                Overide this to produce output required by your appication\n                If it is desired that the form view be entirely dynamic that method\n                should combine both static Django fields and custom fields.\n\n                In this example we include static Django fields and\n                output from metadata in a format that should work with \n                react-jsonschema-form\n            \"\"\"\n            all_fields = self.get_all_fields(metadata)\n            form_metadata = {\n                'title': metadata.title,\n                'type': 'object',\n                'properties': {},\n            }\n            for field in all_fields:\n                properties = {\n                    'type': field['type'],\n                }\n                if field['type'] in ('indexed_char', 'char', 'text',):\n                    properties['type'] = 'string'\n                if field['typethon'] in ('indexed_integer', 'integer',):\n                    properties['type'] = 'integer'\n                if field['type'] == 'float':\n                    properties['type'] = 'number'\n                if field['type'] == 'datetime':\n                    properties['type'] = 'string'\n                    properties['format'] = 'date-time'\n                if field['type'].startswith('decimal'):\n                    # _, max_digits, decimal_places = field['type'].split('_')\n                    properties['type'] = 'string'\n                    properties['format'] = field['type']\n                if 'form' in field:\n                    for form_property, value in field['form'].items():\n                        properties[snake_to_camel(form_property)] = value\n                form_metadata['properties'][field['name']] = properties\n            return form_metadata\n    ```\n\n    The above example is taken from the built in django-custom-table formats and can be used as is as follows\n\n    ```python\n    from custom_table.formats import RestSpaFormat\n    ```\n\n1. When creating views, you can use the Django Custom table base view classes that have helper methods for reading and writing using customizable models.\n\n    This how a view for a rest web service might look.\n\n    In a `views.py`\n\n    ```Python\n    class RestMetadataListView(BaseMetadataView):\n        metadata_model=RestSpaFormatMetadata\n        include_metadata=True\n\n        \n        def get(self, request):\n            return JsonResponse(self.get_list(), safe=False)\n\n\n        def post(self, request):\n            new_record = self.create(json.loads(request.body))\n            return JsonResponse({'pk': new_record.pk}, status=201)\n\n\n    class RestMetadataDetailView(BaseMetadataView):\n        metadata_model=RestSpaFormatMetadata\n        include_metadata=True\n        always_update_fields = ['modified']\n\n\n        def get(self, request, name_or_pk):\n            return JsonResponse(self.get_detail(name_or_pk), safe=False)\n\n        \n        def patch(self, request, name_or_pk):\n            self.update_fields(name_or_pk, json.loads(request.body))\n            return HttpResponse(status=202)\n\n\n        def delete(self, request, name_or_pk):\n            self.delete_record(name_or_pk)\n            return HttpResponse(status=204)\n    ```\n\n    In a `urls.py`\n\n    ```Python\n    rest_urlpatterns = [\n        path('metadata/', RestMetadataListView.as_view()),\n        path('metadata/<str:name_or_pk>/', RestMetadataDetailView.as_view()),\n        path('data/<str:name>/', RestCustomTableListView.as_view(),\n        path('data/<str:name>/<int:pk>/', RestCustomTableDetailView.as_view(),\n    ]\n\n    html_urlpatterns = [\n        path('<str:name>/', HtmlCustomTableListView.as_view()),\n        path('<str:name>/<int:pk>/', HtmlCustomTableDetailView.as_view()),\n    ]\n\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('rest/', include(rest_urlpatterns)),\n        path('html/', include(html_urlpatterns)),\n    ]\n    ```\n\n    `metadata_model` tells the view what metadata model to use to discover and render all customizations\n    `include_metadata` is used to tell the view to always include metadata in calls to `get_list()` and `get_detail()`\n    `always_update_fields` tells the view what additional fields tell Django to update in the `save()` method called in `update_fields()`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/warrenwestfall/django-custom-table",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-custom-table",
    "package_url": "https://pypi.org/project/django-custom-table/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-custom-table/",
    "project_urls": {
      "Homepage": "https://github.com/warrenwestfall/django-custom-table"
    },
    "release_url": "https://pypi.org/project/django-custom-table/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A Django app for building customizable tables.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13312981,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26193639da02fcee2851d03f0a99f31be7004e98813c10f7b4028cd737cdb21e",
          "md5": "350e0afba9379391f27ed565c64182d6",
          "sha256": "56e5452a4b883392a5f971976027fe8717071b6a4476b19dea1c9f4567bee850"
        },
        "downloads": -1,
        "filename": "django-custom-table-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "350e0afba9379391f27ed565c64182d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23482,
        "upload_time": "2022-03-27T17:20:06",
        "upload_time_iso_8601": "2022-03-27T17:20:06.833402Z",
        "url": "https://files.pythonhosted.org/packages/26/19/3639da02fcee2851d03f0a99f31be7004e98813c10f7b4028cd737cdb21e/django-custom-table-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e277f3d0c14ba7b6bd5db97e0302e0b52d00e1e0f519a38207a46109b910f31",
          "md5": "856c4a9864fbbf1eb86d25db31632144",
          "sha256": "facbcd1eb5752b7231706c3284929638ed044e01f99d9d1c46ba2c8a66d45fe7"
        },
        "downloads": -1,
        "filename": "django-custom-table-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "856c4a9864fbbf1eb86d25db31632144",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23539,
        "upload_time": "2022-03-27T17:42:26",
        "upload_time_iso_8601": "2022-03-27T17:42:26.437066Z",
        "url": "https://files.pythonhosted.org/packages/4e/27/7f3d0c14ba7b6bd5db97e0302e0b52d00e1e0f519a38207a46109b910f31/django-custom-table-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79159f589f34d0daecb01e0ed31cc505b2513adf6d49ea5f0b32bab0b4d63c44",
          "md5": "cd60e210b7468098b06b1f9948c3a500",
          "sha256": "e2019a3234c31cb7ce72b564ce8139228ed22af1a443e28bc3cd14d2b8ebc503"
        },
        "downloads": -1,
        "filename": "django-custom-table-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd60e210b7468098b06b1f9948c3a500",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23777,
        "upload_time": "2022-03-27T19:39:16",
        "upload_time_iso_8601": "2022-03-27T19:39:16.087812Z",
        "url": "https://files.pythonhosted.org/packages/79/15/9f589f34d0daecb01e0ed31cc505b2513adf6d49ea5f0b32bab0b4d63c44/django-custom-table-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79159f589f34d0daecb01e0ed31cc505b2513adf6d49ea5f0b32bab0b4d63c44",
        "md5": "cd60e210b7468098b06b1f9948c3a500",
        "sha256": "e2019a3234c31cb7ce72b564ce8139228ed22af1a443e28bc3cd14d2b8ebc503"
      },
      "downloads": -1,
      "filename": "django-custom-table-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd60e210b7468098b06b1f9948c3a500",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 23777,
      "upload_time": "2022-03-27T19:39:16",
      "upload_time_iso_8601": "2022-03-27T19:39:16.087812Z",
      "url": "https://files.pythonhosted.org/packages/79/15/9f589f34d0daecb01e0ed31cc505b2513adf6d49ea5f0b32bab0b4d63c44/django-custom-table-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}