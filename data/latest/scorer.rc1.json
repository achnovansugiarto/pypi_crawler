{
  "info": {
    "author": "Nico Curti",
    "author_email": "nico.curti2@unibo.it",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "| **Authors**  | **Project** |  **Build Status** | **License** | **Code Quality** | **Coverage** |\n|:------------:|:-----------:|:-----------------:|:-----------:|:----------------:|:------------:|\n| [**N. Curti**](https://github.com/Nico-Curti) | **Scorer** | **Linux/MacOS** : [![travis](https://travis-ci.com/Nico-Curti/scorer.svg?branch=master)](https://travis-ci.com/Nico-Curti/scorer) <br/>  **Windows** : [![appveyor](https://ci.appveyor.com/api/projects/status/4whrmb6qsp3nefgp?svg=true)](https://ci.appveyor.com/project/Nico-Curti/scorer) | [![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/Nico-Curti/Scorer/blob/master/LICENSE.md) | **Codacy** : [![Codacy](https://api.codacy.com/project/badge/Grade/569341573b4e438196ea012f906fd0d0)](https://www.codacy.com/manual/Nico-Curti/scorer?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Nico-Curti/scorer&amp;utm_campaign=Badge_Grade) <br/> **Codebeat** : [![CODEBEAT](https://codebeat.co/badges/7222a662-b62c-4481-9d40-136cd9ba17b6)](https://codebeat.co/projects/github-com-nico-curti-scorer-master) | [![codecov](https://codecov.io/gh/Nico-Curti/scorer/branch/master/graph/badge.svg)](https://codecov.io/gh/Nico-Curti/scorer) |\n\n![Scorer++ CI](https://github.com/Nico-Curti/scorer/workflows/Scorer++%20CI/badge.svg)\n\n![Scorer CI](https://github.com/Nico-Curti/scorer/workflows/Scorer%20CI/badge.svg)\n\n[![GitHub pull-requests](https://img.shields.io/github/issues-pr/Nico-Curti/scorer.svg?style=plastic)](https://github.com/Nico-Curti/scorer/pulls)\n[![GitHub issues](https://img.shields.io/github/issues/Nico-Curti/scorer.svg?style=plastic)](https://github.com/Nico-Curti/scorer/issues)\n\n[![GitHub stars](https://img.shields.io/github/stars/Nico-Curti/scorer.svg?label=Stars&style=social)](https://github.com/Nico-Curti/scorer/stargazers)\n[![GitHub watchers](https://img.shields.io/github/watchers/Nico-Curti/scorer.svg?label=Watch&style=social)](https://github.com/Nico-Curti/scorer/watchers)\n\n# Machine Learning Scores\n\n<a href=\"https://github.com/Nico-Curti/scorer/blob/master/img/scorer.pdf\">\n<div class=\"image\">\n<img src=\"img/dependency_graph.gif\" width=\"1010\" height=\"392\">\n</div>\n</a>\n\nOptimization and extension of the [**PyCM**](https://github.com/sepandhaghighi/pycm) library with c++ support and network dependencies.\n\n1. [Getting Started](#getting-started)\n2. [Prerequisites](#prerequisites)\n3. [Usage](#usage)\n4. [License](#license)\n5. [Contribution](#contribution)\n6. [Authors](#authors)\n7. [Acknowledgments](#acknowledgments)\n8. [Citation](#citation)\n\n## Getting Started\n\nTo build the project you can use the [Makefile](https://github.com/Nico-Curti/scorer/blob/master/Makefile) or the [CMake](https://github.com/Nico-Curti/scorer/blob/master/CMakeLists.txt) (recommended).\n\nIn the first case you can see the whole set of available rules just typing `make` or `make example` to build the [example](https://github.com/Nico-Curti/scorer/blob/master/example/example.cpp) script in c++ or `make pythonic` to build the Cython version of the code.\n\nThe builds scripts ([build.sh](https://github.com/Nico-Curti/scorer/blob/master/build.sh) and [build.ps1](https://github.com/Nico-Curti/scorer/blob/master/build.ps1)) allow an automatic build of the full library in Windows and Linux/MacOS systems using CMake.\n\n```bash\ngit clone https://github.com/Nico-Curti/scorer.git\ncd scorer\n./build.sh\n```\n\nFor a manual installation of the Python version you can also run the [setup](https://github.com/Nico-Curti/scorer/blob/master/setup.py) script as\n\n```bash\npython -m pip install -r requirements.txt\npython setup.py build_ext --inplace\n```\n\nor for developers\n\n```bash\npython -m pip install -r requirements.txt\npython setup.py develop --user\n```\n\nIf you are working without *root* privileges we suggest to use the [`Shut`](https://github.com/Nico-Curti/shut) scripts to easily install all the required dependencies.\n\n## Prerequisites\n\nTo build the c++ version of the code at least c++14 is required.\nC++ supported compilers:\n\n![gcc version](https://img.shields.io/badge/gcc-4.9.*%20|%205.*%20|%206.*%20|%207.*%20|%208.*%20|%209.*-yellow.svg)\n\n![clang version](https://img.shields.io/badge/clang-3.*%20|4.*%20|5.*%20|%206.*%20|%207.*%20|-red.svg)\n\n![msvc version](https://img.shields.io/badge/msvc-vs2017%20x86%20|%20vs2017%20x64-blue.svg)\n\nPython version supported :\n\n![Python version](https://img.shields.io/badge/python-2.7%20|%203.3%20|%203.4%20|%203.5%20|%203.6%20|%203.7-blue.svg)\n\nThe OMP version of the code is automatically available if OMP is installed and in this way all the metric computations are performed in parallel according to the generated dependency graph.\n\nThe full list of prerequisites of Python version is listed in [requirements](https://github.com/Nico-Curti/scorer/blob/master/requirements.txt).\n\n**Note**: if you are interested on the visualization of the dependency graph and some other utilities to manage the evaluated metrics you can find all the scripts in the [utils](https://github.com/Nico-Curti/scorer/tree/master/utils) folder.\nIn this case you need to install also the following Python packages:\n\n```\nnetworkx>=2.2\npandas>=0.23.3\nmatplotlib>=2.2.2\nmpld3>=0.3\n```\n\n## Usage\n\nYou can use the libraries either inside your c++ project with a simple include of the [scorer.h](https://github.com/Nico-Curti/scorer/blob/master/include/scorer.h) header file or inside your Python application, where the scorer class is wrapped to give a simple dictionary in return.\n\nIf you use the c++ version *PAY ATTENTION* to the parallel environment (open the parallel region before the run of scores computation as shown in the following example code).\n\n```c++\n#include <array>\n#include <scorer.h>\n\nint main ()\n{\n  const int n_labels = 12;\n\n  std :: array < int, n_labels > y_true = { {2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2} };\n  std :: array < int, n_labels > y_pred = { {0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2} };\n\n  scorer score;\n\n#ifdef _OPENMP\n#pragma omp parallel shared (score)\n  {\n#endif\n\n    score.compute_score(y_true.data(), y_pred.data(), n_labels, n_labels);\n\n#ifdef _OPENMP\n  }\n#endif\n\n  score.print();\n\n  return 0;\n}\n```\n\nThe same code can be rewritten in Python (also with different labels dtype) as\n\n```python\n#import numpy as np\nfrom scorer import Scorer\n\ny_true = ['a', 'b', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'b', 'c', 'a'] # np.array([2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2], dtype=np.int32)\ny_pred = ['b', 'b', 'a', 'c', 'b', 'a', 'c', 'b', 'a', 'b', 'a', 'a'] # np.array([0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2], dtype=np.int32)\n\nscorer = Scorer()\nscorer.evaluate(y_true, y_pred)\nprint(scorer)\n```\n\nThe output is the same in both the executions and it should be something like this\n\n```bash\n$ python ./scorer/example/main.py\nClasses: 0, 1, 2\nConfusion Matrix:\n 3.0 0.0 0.0\n 0.0 1.0 2.0\n 2.0 1.0 3.0\n\nClass Statistics:\n\nTP(True positive/hit)                                                                           3.000                1.000                3.000\nFN(False negative/miss/type 2 error)                                                            0.000                2.000                3.000\nFP(False positive/type 1 error/false alarm)                                                     2.000                1.000                2.000\nTN(True negative/correct rejection)                                                             7.000                8.000                4.000\nPOP(Population)                                                                                12.000               12.000               12.000\nP(Condition positive or support)                                                                3.000                3.000                6.000\nN(Condition negative)                                                                           9.000                9.000                6.000\nTOP(Test outcome positive)                                                                      5.000                2.000                5.000\nTON(Test outcome negative)                                                                      7.000               10.000                7.000\nTPR(Sensitivity / recall / hit rate / true positive rate)                                       1.000                0.333                0.500\nTNR(Specificity or true negative rate)                                                          0.778                0.889                0.667\nPPV(Precision or positive predictive value)                                                     0.600                0.500                0.600\nNPV(Negative predictive value)                                                                  1.000                0.800                0.571\nFNR(Miss rate or false negative rate)                                                           0.000                0.667                0.500\nFPR(Fall-out or false positive rate)                                                            0.222                0.111                0.333\nFDR(False discovery rate)                                                                       0.400                0.500                0.400\nFOR(False omission rate)                                                                        0.000                0.200                0.429\nACC(Accuracy)                                                                                   0.833                0.750                0.583\nF1(F1 score - harmonic mean of precision and sensitivity)                                       0.750                0.400                0.545\nF0.5(F0.5 score)                                                                                0.652                0.455                0.577\nF2(F2 score)                                                                                    0.882                0.357                0.517\nMCC(Matthews correlation coefficient)                                                           0.683                0.258                0.169\nBM(Informedness or bookmaker informedness)                                                      0.778                0.222                0.167\nMK(Markedness)                                                                                  0.600                0.300                0.171\nPLR(Positive likelihood ratio)                                                                  4.500                3.000                1.500\nNLR(Negative likelihood ratio)                                                                  0.000                0.750                0.750\nDOR(Diagnostic odds ratio)                                                                        inf                4.000                2.000\nPRE(Prevalence)                                                                                 0.250                0.250                0.500\nG(G-measure geometric mean of precision and sensitivity)                                        0.775                0.408                0.548\nRACC(Random accuracy)                                                                           0.104                0.042                0.208\nERR(Error rate)                                                                                 0.167                0.250                0.417\nRACCU(Random accuracy unbiased)                                                                 0.111                0.043                0.210\nJ(Jaccard index)                                                                                0.600                0.250                0.375\nIS(Information score)                                                                           1.263                1.000                0.263\nCEN(Confusion entropy)                                                                          0.250                0.497                0.604\nMCEN(Modified confusion entropy)                                                                0.264                0.500                0.688\nAUC(Area Under the ROC curve)                                                                   0.889                0.611                0.583\ndInd(Distance index)                                                                            0.222                0.676                0.601\nsInd(Similarity index)                                                                          0.843                0.522                0.575\nDP(Discriminant power)                                                                            inf                0.332                0.166\nY(Youden index)                                                                                 0.778                0.222                0.167\nPLRI(Positive likelihood ratio interpretation)                                                   Poor                 Poor                 Poor\nNLRI(Negative likelihood ratio interpretation)                                                   Good           Negligible           Negligible\nDPI(Discriminant power interpretation)                                                           None                 Poor                 Poor\nAUCI(AUC value interpretation)                                                              Very Good                 Fair                 Poor\nGI(Gini index)                                                                                  0.778                0.222                0.167\nLS(Lift score)                                                                                  2.400                2.000                1.200\nAM(Difference between automatic and manual classification)                                      2.000               -1.000               -1.000\nOP(Optimized precision)                                                                         0.708                0.295                0.440\nIBA(Index of balanced accuracy)                                                                 0.951                0.132                0.278\nGM(G-mean geometric mean of specificity and sensitivity)                                        0.882                0.544                0.577\nQ(Yule Q - coefficient of colligation)                                                            nan                0.600                0.333\nAGM(Adjusted geometric mean)                                                                    0.837                0.692                0.607\nMCCI(Matthews correlation coefficient interpretation)                                        Moderate           Negligible           Negligible\nAGF(Adjusted F-score)                                                                           0.914                0.540                0.552\nOC(Overlap coefficient)                                                                         1.000                0.500                0.600\nOOC(Otsuka-Ochiai coefficient)                                                                  0.775                0.408                0.548\nAUPR(Area under the PR curve)                                                                   0.800                0.417                0.550\nBCD(Bray-Curtis dissimilarity)                                                                  0.083                0.042                0.042\nICSI(Individual classification success index)                                                   0.600               -0.167                0.100\n\nOverall Statistics:\n\nOverall ACC                                                                      0.583\nOverall RACCU                                                                    0.365\nOverall RACC                                                                     0.354\nKappa                                                                            0.355\nScott PI                                                                         0.344\nGet AC1                                                                          0.389\nBennett S                                                                        0.375\nKappa Standard Error                                                             0.220\nKappa Unbiased                                                                   0.344\nKappa No Prevalence                                                              0.167\nKappa 95% CI                                                                     (0.7867531180381775, -0.0770757719874382)\nStandard Error                                                                   0.142\n95% CI                                                                           (0.8622781038284302, 0.30438855290412903)\nChi-Squared                                                                      6.600\nPhi-Squared                                                                      0.550\nCramer V                                                                         0.524\nResponse Entropy                                                                 1.483\nReference Entropy                                                                1.500\nCross Entropy                                                                    1.594\nJoint Entropy                                                                    2.459\nConditional Entropy                                                              0.959\nMutual Information                                                               0.524\nKL Divergence                                                                    0.094\nLambda B                                                                         0.429\nLambda A                                                                         0.167\nChi-Squared DF                                                                   4.000\nOverall J                                                                        (1.225000023841858, 0.40833333134651184)\nHamming loss                                                                     0.417\nZero-one Loss                                                                    5.000\nNIR                                                                              0.500\nP-value                                                                          0.387\nOverall CEN                                                                      0.464\nOverall MCEN                                                                     0.519\nOverall MCC                                                                      0.367\nRR                                                                               4.000\nCBA                                                                              0.478\nAUNU                                                                             0.694\nAUNP                                                                             0.667\nRCI                                                                              0.349\nPearson C                                                                        0.596\nF1 Micro                                                                         0.583\nPPV Micro                                                                        0.583\nTPR Micro                                                                        0.583\nSOA1(Landis & Koch)                                                              Fair\nSOA2(Fleiss)                                                                     Poor\nSOA3(Altman)                                                                     Fair\nSOA4(Cicchetti)                                                                  Poor\nSOA5(Cramer)                                                                     Relatively Strong\nSOA6(Matthews)                                                                   Weak\nACC Macro                                                                        0.722\nF1 Macro                                                                         0.565\nTPR Macro                                                                        0.611\nPPV Macro                                                                        0.567\nCSI                                                                              0.178\n```\n\nIf you are working with non-integer labels the Scorer object provides a usefull `_label2numbers` (`encode` in C++) function.\nIts usage is mandatory in `C++` since the function signature requires **only** integer (int32) values, while the `Python` version automatically encode/decode the labels according to requirements.\n\nIn the [utils](https://github.com/Nico-Curti/scorer/tree/master/utils) folder some utility scripts are reported.\nThe `make_script.py` allows to write the complete parallel version of the scorer class in c++.\nIn this way if you add a new operator to the library you can just run this code to update the scorer class parallelization strategies (computed in `dependency_graphs.py` script).\n\nWith `view_stats.py` you can see the complete graph of computed statistics with an HTML support for a more pleasant vision (e.g. [graph](https://github.com/Nico-Curti/scorer/blob/master/img/dependency_graph.gif))\n\n**NOTE**: using `view_stats.py` you can find the error\n\n```python\nObject of type ndarray is not JSON serializable\n```\n\nI suggest to use the following command to overcome this `mpld3` issue:\n\n```bash\npython -m pip install --user \"git+https://github.com/javadba/mpld3@display_fix\"\n```\n\nA full list of informations about the score functions and their meaning can be found in the amazing [documentation](https://www.pycm.ir/doc/) of the original PyCM project.\n\n## License\n\nThe `Scorer` package is licensed under the MIT \"Expat\" License. [![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/Nico-Curti/Scorer/blob/master/LICENSE.md)\n\n## Contribution\n\nAny contribution is more than welcome :heart:. Just fill an [issue](https://github.com/Nico-Curti/scorer/blob/master/ISSUE_TEMPLATE.md) or a [pull request](https://github.com/Nico-Curti/scorer/blob/master/PULL_REQUEST_TEMPLATE.md) and we will check ASAP!\n\nSee [here](https://github.com/Nico-Curti/scorer/blob/master/CONTRIBUTING.md) for further informations about how to contribute with this project.\n\n## Authors\n\n* <img src=\"https://avatars0.githubusercontent.com/u/24650975?s=400&v=4\" width=\"25px\"> **Nico Curti** [git](https://github.com/Nico-Curti), [unibo](https://www.unibo.it/sitoweb/nico.curti2)\n\nSee also the list of [contributors](https://github.com/Nico-Curti/Scorer/contributors) [![GitHub contributors](https://img.shields.io/github/contributors/Nico-Curti/scorer.svg?style=plastic)](https://github.com/Nico-Curti/scorer/graphs/contributors/) who participated to this project.\n\n## Acknowledgments\n\nThanks goes to all contributors of this project:\n\n| [<img src=\"https://avatars3.githubusercontent.com/u/23407684?s=400&v=4\" width=\"100px;\"/><br /><sub><b>Daniele Dall'Olio</b></sub>](https://github.com/DanieleDallOlio)\n|:---:|\n\n### Citation\n\nIf you have found `Scorer` helpful in your research, please consider citing the project\n\n```tex\n@misc{Scorer,\n  author = {Nico Curti},\n  title = {Scorer},\n  year = {2019},\n  publisher = {GitHub},\n  howpublished = {\\url{https://github.com/Nico-Curti/scorer}},\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Nico-Curti/scorer",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Nico-Curti/scorer",
    "keywords": "machine-learning score-calculator confusion-matrix statistics parallel",
    "license": "GNU Lesser General Public License v2 or later (LGPLv2+)",
    "maintainer": "Nico Curti",
    "maintainer_email": "nico.curti2@unibo.it",
    "name": "scorer",
    "package_url": "https://pypi.org/project/scorer/",
    "platform": "any",
    "project_url": "https://pypi.org/project/scorer/",
    "project_urls": {
      "Download": "https://github.com/Nico-Curti/scorer",
      "Homepage": "https://github.com/Nico-Curti/scorer"
    },
    "release_url": "https://pypi.org/project/scorer/2.0.2/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Multi-class scorer computation library.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8005462,
  "releases": {
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c783f823fa14ea86d2e7c7220413698fc646cf044e3b0a5d374c542b2108e96f",
          "md5": "667924e893ade1fce969401bd1a41d0a",
          "sha256": "3b6a4923f00a7246244f3f0c89f272f8b25b95b47162155b6992bac1bbd015dd"
        },
        "downloads": -1,
        "filename": "scorer-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "667924e893ade1fce969401bd1a41d0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 151546,
        "upload_time": "2020-08-20T15:21:29",
        "upload_time_iso_8601": "2020-08-20T15:21:29.005286Z",
        "url": "https://files.pythonhosted.org/packages/c7/83/f823fa14ea86d2e7c7220413698fc646cf044e3b0a5d374c542b2108e96f/scorer-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c783f823fa14ea86d2e7c7220413698fc646cf044e3b0a5d374c542b2108e96f",
        "md5": "667924e893ade1fce969401bd1a41d0a",
        "sha256": "3b6a4923f00a7246244f3f0c89f272f8b25b95b47162155b6992bac1bbd015dd"
      },
      "downloads": -1,
      "filename": "scorer-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "667924e893ade1fce969401bd1a41d0a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 151546,
      "upload_time": "2020-08-20T15:21:29",
      "upload_time_iso_8601": "2020-08-20T15:21:29.005286Z",
      "url": "https://files.pythonhosted.org/packages/c7/83/f823fa14ea86d2e7c7220413698fc646cf044e3b0a5d374c542b2108e96f/scorer-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}