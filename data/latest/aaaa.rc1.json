{
  "info": {
    "author": "Stuart WD Grieve",
    "author_email": "stuart@swdg.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "## aaaa\n\n[![Build Status](https://travis-ci.org/sgrieve/aaaa.svg?branch=master)](https://travis-ci.org/sgrieve/aaaa) [![Coverage](https://img.shields.io/codecov/c/github/sgrieve/aaaa)](https://codecov.io/gh/sgrieve/aaaa) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aaaa) ![PyPI - License](https://img.shields.io/pypi/l/aaaa)\n\nHave you ever been creating an animated plot by saving a series of images and joining them together? The obvious way to name these frames would be using numbers:\n\n```python\nfor i in range(15):\n    plt.savefig('{}.png'.format(i))\n```\n\nBut many operating systems will order these files as follows:\n\n```bash\n0.png\n1.png\n10.png\n11.png\n12.png\n13.png\n14.png\n2.png\n3.png\n4.png\n5.png\n6.png\n7.png\n8.png\n9.png\n```\n\nThereby screwing up the order of your animation.\n\nThis is where `aaaa` (pronounced like a scream) comes in! `aaaa` has a single class which creates an iterator that yields an alphabetical sequence `aa`, `ab`, `ac`, etc. So we can change our above example:\n\n```python\nfrom aaaa import aaaa\n\nfname = aaaa()\n\nfor i in range(15):\n    plt.savefig('{}.png'.format(next(fname)))\n```\n\nWhich will preserve the order of the files in your operating system:\n\n```bash\naa.png\nab.png\nac.png\nad.png\nae.png\naf.png\nag.png\nah.png\nai.png\naj.png\nak.png\nal.png\nam.png\nan.png\nao.png\n```\n\nFile sorting can differ between operating systems, sometimes with [serious results](https://arstechnica.com/information-technology/2019/10/chemists-discover-cross-platform-python-scripts-not-so-cross-platform/).\n\n\n### Installation\n\n`aaaa` has no dependences and is tested on Python 3.5 through 3.8 and it can be installed via pip:\n\n```bash\npip install aaaa\n```\n\n### Usage\n\nThere are two ways to use `aaaa`. Firstly, you can loop directly over an `aaaa` instance, until there are no items left (in this case the last value of name will be `zz`):\n\n```python\nfrom aaaa import aaaa\n\nnames = aaaa()\n\nfor name in names:\n    print(name)\n\n```\n\nOr, you can use the `next()` operator to only get as many values as you need:\n\n```python\nfrom aaaa import aaaa\n\nnames = aaaa()\n\nfor i in range(10):\n    print(next(names))\n\n```\n\nThe default length of an output from `aaaa` is 2 characters long - this will allow you to order 676 files. If you need a larger or smaller amount of characters you can specify this as an argument to `aaaa`:\n\n```python\nfrom aaaa import aaaa\n\nnames_short = aaaa(1)\nnames_long = aaaa(4)\n\nprint(next(names_short), next(names_long))\n# Outputs --> a aaaa\n\n```\n\nBeyond four or five characters in length, initializing `aaaa` becomes prohibitively slow. Note that four characters gives you **456976** permutations - so you should never need more than this.\n\n\n### Contribute\n\nFor my purposes this package is feature complete, but if you find a bug, or have a feature request, open an issue, or create a pull request!\n\n\n### License\n\nThe project is licensed under the MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/sgrieve/aaaa",
    "keywords": "filenames,alphabetize",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aaaa",
    "package_url": "https://pypi.org/project/aaaa/",
    "platform": "",
    "project_url": "https://pypi.org/project/aaaa/",
    "project_urls": {
      "Homepage": "http://github.com/sgrieve/aaaa"
    },
    "release_url": "https://pypi.org/project/aaaa/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Alphabetize output filenames",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6824640,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4a387b5fddf2fa002916aadd82807841ed33a1ef7a2afe3e34935e35cbf7dc1",
          "md5": "938eb12111dda9baad34714af131dc6a",
          "sha256": "2bf745b32ae110ad19addbfb11510cdce6b67a49db9843764d0a0e7bf32da2e1"
        },
        "downloads": -1,
        "filename": "aaaa-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "938eb12111dda9baad34714af131dc6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3891,
        "upload_time": "2020-03-16T22:37:46",
        "upload_time_iso_8601": "2020-03-16T22:37:46.365458Z",
        "url": "https://files.pythonhosted.org/packages/c4/a3/87b5fddf2fa002916aadd82807841ed33a1ef7a2afe3e34935e35cbf7dc1/aaaa-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4a387b5fddf2fa002916aadd82807841ed33a1ef7a2afe3e34935e35cbf7dc1",
        "md5": "938eb12111dda9baad34714af131dc6a",
        "sha256": "2bf745b32ae110ad19addbfb11510cdce6b67a49db9843764d0a0e7bf32da2e1"
      },
      "downloads": -1,
      "filename": "aaaa-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "938eb12111dda9baad34714af131dc6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3891,
      "upload_time": "2020-03-16T22:37:46",
      "upload_time_iso_8601": "2020-03-16T22:37:46.365458Z",
      "url": "https://files.pythonhosted.org/packages/c4/a3/87b5fddf2fa002916aadd82807841ed33a1ef7a2afe3e34935e35cbf7dc1/aaaa-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}