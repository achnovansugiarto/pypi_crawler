{
  "info": {
    "author": "",
    "author_email": "Florimond Manca <florimond.manca@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# asgi-htmx\n\n[![Build Status](https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.asgi-htmx?branchName=master)](https://dev.azure.com/florimondmanca/public/_build?definitionId=18)\n[![Coverage](https://codecov.io/gh/florimondmanca/asgi-htmx/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/asgi-htmx)\n[![Package version](https://badge.fury.io/py/asgi-htmx.svg)](https://pypi.org/project/asgi-htmx)\n\n[HTMX](https://htmx.org) integration for [ASGI](https://asgi.readthedocs.io/en/latest/) applications. Works with Starlette, FastAPI, Quart -- or any other web framework supporting ASGI that exposes the ASGI `scope`. Inspired by [django-htmx](https://github.com/adamchainz/django-htmx).\n\n**Table of contents**\n\n- [Installation](#installation)\n- [Quickstart](#quickstart)\n- [API Reference](#api-reference)\n\n## Installation\n\n**NOTE**: This is alpha software. Please be sure to pin your dependencies.\n\n```\npip install asgi-htmx==0.1.*\n```\n\n## Quickstart\n\nFirst, ensure [HTMX is installed](https://htmx.org/docs/#installing).\n\nFor example, download a copy of `htmx.min.js`, add it to your [static files](https://www.starlette.io/staticfiles/), then add the script tag to templates:\n\n```html\n<script src=\"{{ url_for('static', path='/js/htmx.min.js') }}\" defer></script>\n```\n\nNow, install `HtmxMiddleware` onto the ASGI app:\n\n* Using Starlette:\n\n    ```python\n    from asgi_htmx import HtmxMiddleware\n    from starlette.middleware import Middleware\n\n    app = Starlette(\n        middleware=[\n            ...,\n            Middleware(HtmxMiddleware),\n            ...,\n        ],\n    )\n\n* Using FastAPI:\n\n    ```python\n    from asgi_htmx import HtmxMiddleware\n    from fastapi import FastAPI\n\n    app = FastAPI()\n    app.add_middleware(HtmxMiddleware)\n    ```\n\nYou can now access `scope[\"htmx\"]` (an instance of [`HtmxDetails`](#htmxdetails)) in endpoints:\n\n```python\n# `HtmxRequest` makes code editors type-check `request.scope[\"htmx\"]`\nfrom asgi_htmx import HtmxRequest as Request\n\nfrom .resources import templates\n\nasync def home(request: Request):\n    template = \"home.html\"\n    context = {\"request\": request}\n\n    if (htmx := request.scope[\"htmx\"]):\n        template = \"partials/items.html\"\n        context[\"boosted\"] = htmx.boosted  # ...\n\n    return templates.TemplateResponse(template, context)\n```\n\nSee [examples](./examples) for full working example code.\n\n## API Reference\n\n### `HtmxMiddleware`\n\nAn ASGI middleware that sets `scope[\"htmx\"]` to an instance of [`HtmxDetails`](#htmxdetails) (`scope` refers to the ASGI scope).\n\n```python\napp = HtmxMiddleware(app)\n```\n\n### `HtmxDetails`\n\nA helper that provides shortcuts for accessing HTMX-specific [request headers](https://htmx.org/reference/#request_headers).\n\n```python\nhtmx = HtmxDetails(scope)\n```\n\n* `__bool__() -> bool` - Return `True` if the request was made using HTMX (`HX-Request` is present), `False` otherwise.\n* `boosted: bool` - Mirrors the `HX-Boosted` header: `True` if the request is via an element with the [`hx-boost`](https://htmx.org/attributes/hx-boost/) attribute.\n* `current_url: str | None` - Mirrors the `HX-Current-URL` header: The current URL of the browser, or `None` for non-HTMX requests.\n* `history_restore_request: str` - Mirrors the `HX-History-Restore-Request` header: `True` if the request is for history restoration after a miss in the local history cache.\n* `prompt: str | None` - Mirrors `HX-Prompt`: The user response to [`hx-prompt`](https://htmx.org/attributes/hx-prompt/) if it was used, or `None`.\n* `target: str | None` - Mirrors `HX-Target`: The `id` of the target element if it exists, or `None`.\n* `trigger: str | None` - Mirrors `HX-Trigger`: The `id` of the trigger element if it exists, or `None`.\n* `trigger_name: str | None` - Mirrors `HX-Trigger-Name`: The `name` of the trigger element if it exists, or `None`.\n* `triggering_event: Any | None` - Mirrors `Triggering-Event`, which is set by the [event-header extension](https://htmx.org/extensions/event-header/): The deserialized JSON representation of the event that triggered the request if it exists, or `None`.\n\n### `HtmxRequest`\n\nFor Starlette-based frameworks, use this instead of the standard `starlette.requests.Request` so that code editors understand that `request.scope[\"htmx\"]` contains an `HtmxDetails` instance:\n\n```python\nfrom asgi_htmx import HtmxRequest as Request\n\nasync def home(request: Request):\n    reveal_type(request.scope[\"htmx\"])  # Revealed type is 'HtmxDetails'\n```\n\n## License\n\nMIT\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.1.0 - 2022-05-30\n\n_Initial release_\n\n## Added\n\n* Add `HtmxDetails` that facilitates working with `HX-*` request headers.\n* Add `HtmxMiddleware` that automatically adds an `HtmxDetails` instance as `scope[\"htmx\"]`.\n* Add `HtmxRequest` that facilitates type hinting `request.scope[\"htmx\"]` in Starlette-based frameworks.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asgi-htmx",
    "package_url": "https://pypi.org/project/asgi-htmx/",
    "platform": null,
    "project_url": "https://pypi.org/project/asgi-htmx/",
    "project_urls": {
      "Homepage": "https://github.com/florimondmanca/asgi-htmx"
    },
    "release_url": "https://pypi.org/project/asgi-htmx/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "HTMX integration for ASGI applications.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13981413,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc75490c81826f003038fab6047384ac77fd848296453e6dd0784b055ebba41",
          "md5": "dbb335f83765d2a5ad082ba46f4f1478",
          "sha256": "622a98b5c31a8b9857de6a5a9cd97d584b0ee21b88e0a8a56dc237d172b75c9b"
        },
        "downloads": -1,
        "filename": "asgi_htmx-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbb335f83765d2a5ad082ba46f4f1478",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6366,
        "upload_time": "2022-05-30T20:04:59",
        "upload_time_iso_8601": "2022-05-30T20:04:59.863919Z",
        "url": "https://files.pythonhosted.org/packages/3b/c7/5490c81826f003038fab6047384ac77fd848296453e6dd0784b055ebba41/asgi_htmx-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab6bd013c1e0fd6de4f8fbbc253d74766df50146bacfee856093722f10d30a2e",
          "md5": "22d078e9623e0abe14c1dd56ccc9f8c3",
          "sha256": "3c6cb1419f05d53ea593bfe684c88b4941b22063c7628720ec99de9197587623"
        },
        "downloads": -1,
        "filename": "asgi-htmx-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "22d078e9623e0abe14c1dd56ccc9f8c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24885,
        "upload_time": "2022-05-30T20:05:01",
        "upload_time_iso_8601": "2022-05-30T20:05:01.621335Z",
        "url": "https://files.pythonhosted.org/packages/ab/6b/d013c1e0fd6de4f8fbbc253d74766df50146bacfee856093722f10d30a2e/asgi-htmx-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bc75490c81826f003038fab6047384ac77fd848296453e6dd0784b055ebba41",
        "md5": "dbb335f83765d2a5ad082ba46f4f1478",
        "sha256": "622a98b5c31a8b9857de6a5a9cd97d584b0ee21b88e0a8a56dc237d172b75c9b"
      },
      "downloads": -1,
      "filename": "asgi_htmx-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dbb335f83765d2a5ad082ba46f4f1478",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 6366,
      "upload_time": "2022-05-30T20:04:59",
      "upload_time_iso_8601": "2022-05-30T20:04:59.863919Z",
      "url": "https://files.pythonhosted.org/packages/3b/c7/5490c81826f003038fab6047384ac77fd848296453e6dd0784b055ebba41/asgi_htmx-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab6bd013c1e0fd6de4f8fbbc253d74766df50146bacfee856093722f10d30a2e",
        "md5": "22d078e9623e0abe14c1dd56ccc9f8c3",
        "sha256": "3c6cb1419f05d53ea593bfe684c88b4941b22063c7628720ec99de9197587623"
      },
      "downloads": -1,
      "filename": "asgi-htmx-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "22d078e9623e0abe14c1dd56ccc9f8c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 24885,
      "upload_time": "2022-05-30T20:05:01",
      "upload_time_iso_8601": "2022-05-30T20:05:01.621335Z",
      "url": "https://files.pythonhosted.org/packages/ab/6b/d013c1e0fd6de4f8fbbc253d74766df50146bacfee856093722f10d30a2e/asgi-htmx-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}