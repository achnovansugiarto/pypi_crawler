{
  "info": {
    "author": "Aleksey Yeletsky <Tiendil>",
    "author_email": "a.eletsky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "##############################\nRels — перечисления для Python\n##############################\n\n*********\nУстановка\n*********\n\n::\n\n   pip install rels\n\n********\nВведение\n********\n\nRels позволяет создавать сложные перечисляемые типы, со следующими свойствами:\n\n* каждый элемент перечисления — отдельный объект со всеми необходимыми методами;\n* наследование перечислений;\n* любое количество дополнительных данных, привязанных к элементу перечисления;\n* автоматическое создание индексов по данным;\n* дополнительные проверки данных;\n* формирование обратных ссылок в связанных друг с другом перечислениях (и других объектах);\n\nОбщая идея заключается в использовании реляционной модели данных. При описании нового типа описываются поля отношения (столбцы таблицы) и непосредственно сами данные (в виде таблицы).\n\nЗа счёт наследования можно заранее объявить необходимые общие (абстрактные) типы, а конкретные перечисления уже наследовать от них.\n\nБлагодаря динамической природе Python, при создании новых перечислений данные можно загружать из внешних источников, например, электронных таблиц.\n\nПример использования:\n\n.. code:: python\n\n   from rels import Column, Relation\n\n   class Enum(Relation):             # объявляем абстраткное перечисление\n       name = Column(primary=True)   # имя\n       value = Column(external=True) # значение\n\n\n   class EnumWithText(Enum):  # добавляем дополнительный столбец для описания значений\n        text = Column()       # например, для использования в пользовательском интерфейсе\n\n\n   class SOME_CONSTANTS(Enum):       # объявляем конкретное перечисление\n        records = ( ('NAME_1', 1),   # и указываем данные для него\n                    ('NAME_2', 2))\n\n\n   # Варианты работы с элементами перечислений\n   SOME_CONSTANTS.NAME_1.name == 'NAME_1'          # True\n   SOME_CONSTANTS.NAME_1.value == 1                # True\n\n   SOME_CONSTANTS(1) == SOME_CONSTANTS.NAME_1      # True\n\n   SOME_CONSTANTS.NAME_2 == SOME_CONSTANTS.NAME_2  # True\n   SOME_CONSTANTS.NAME_2 != SOME_CONSTANTS.NAME_1  # True\n   SOME_CONSTANTS.NAME_2.is_NAME_2                 # True\n\n\n   class SOME_CONSTANTS_WITH_TEXT(EnumWithText):\n       records = ( ('NAME_1', 1, 'constant 1'),\n                   ('NAME_2', 2, 'constant 2'))\n\n\n   SOME_CONSTANTS.NAME_2 != SOME_CONSTANTS_WITH_TEXT.NAME_2  # True\n   SOME_CONSTANTS.NAME_1 != SOME_CONSTANTS_WITH_TEXT.NAME_1  # True\n\n\n   # добавление новых элементов перечисления\n   class EXTENDED_CONSTANTS(SOME_CONSTANTS_WITH_TEXT):\n       records = ( ('NAME_3', 3, 'constant 3'), )  # добавляем ещё одно значение\n\n\n*********************\nОписание перечисления\n*********************\n\nПри описании столбцов таблицы, можно указать их свойства:\n\n* name — ``string`` — имя столбца (по умолчанию равно имени, которому присваивается объект столбца);\n* unique — ``boolean`` — значения в столбце должны быть уникальными, иначе будет брошено исключение (по умолчанию ``True``);\n* primary — ``boolean`` — элементы перечисления будут доступны как атрибуты перечисления с именами, указанными в этом столбце (например, ``ENUM.COLUMN_VALUE``) (по умолчанию ``False``);\n* external — ``boolean`` — элемент перечисления можно будет получить по значению этого столбца, передав его в конструктор перечисления (например, ``ENUM(some_value)``) (по умолчанию ``False``);\n* single_type — ``boolean`` — все значения в столбце должны быть одного типа (по умолчанию ``True``);\n* index_name — ``string`` — имя, по которому будет доступен индекс с ключам из этого столбца (по умолчанию равен ``index_<имя столбца>``), см. подробнее в описании индексов;\n* related_name — ``string`` | ``None`` — имя, по которому элемент перечисления будет доступен в объектах, на которые ссылается этот столбец (по умолчанию ``None``), см. подробнее в описании связывания.\n\nПри создании перечисления:\n\n* Каждая строка данных в таблице превратится в элемент перечисления.\n* В классе перечисления будут установлен атрибут, ссылающиеся на соответствующий элемент перечисления. Имя атрибута будет установлено в значение в столбце, отмеченном как ``primary``.\n* Если ``primary`` столбцов больше 1, то будут установлены атрибуты для каждого.\n\n\n*****************\nАтрибуты и методы\n*****************\n\nАтрибуты перечисления:\n\n* ``.<имя из primary столбца>`` — ссылка на элемент перечисления (создаётся для всех значений из primary столбцов);\n* ``.records`` — список всех элементов перечисления в порядке их объявления в «сырых» данных;\n* ``.<имя индекса>``— индексы всех столбцов (по умолчанию ``index_<имя столбца>``);\n* ``.__call__`` — принимает значение из столбца с external установленным в ``True``, возвращает элемент перечисления, которому оно соответствует;\n* ``.select(*<список имён столбцов>)`` — возвращает таблицу с выборкой данных по указанным столбцам;\n* ``.get_from_name(<полное имя элемента перечисления>)`` — принимает строку с именем конкретного элемента перечисления (например, ``\"ENUM.NAME\"``) и возвращает соответствующий элемент перечисления или бросает исключение.\n\nАтрибуты элемента перечисления:\n\n* ``.<имя столбца>`` — получение данных для соответствующего столбца;\n* ``.is_<имя из primary столбца>`` — возвращает ``True``, если\n\n*******\nИндексы\n*******\n\nДля каждого столбца таблицы формируются индексы с ключами, равными данным в этом столбце, и значениями, равными элементам перечисления (если значения в столбце помечены как уникальные) или спискам элементов перечисления (если значения в столбце не уникальны).\n\nПо умолчанию индекс доступен как атрибут перечисления с именем ``index_<имя столбца>``, но оно может быть изменено при описании столбца.\n\nПример:\n\n.. code:: python\n\n   from rels import Column, Relation\n\n   class ENUM(Relation):\n       name = Column(primary=True)\n       value = Column(external=True)\n       text = Column(unique=False, index_name='by_key')\n\n       records = ( ('NAME_1', 0, 'key_1'),\n                   ('NAME_2', 1, 'key_2'),\n                   ('NAME_3', 2, 'key_2'), )\n\n   ENUM.index_name # {'NAME_1': ENUM.NAME_1, 'NAME_2': ENUM.NAME_2,  'NAME_3': ENUM.NAME_3}\n   ENUM.by_key     # {'key_1': [ENUM.NAME_1], 'key_2': [ENUM.NAME_2, ENUM.NAME_3]}\n\n************\nНаследование\n************\n\nНаследование позволяет расширять как количество столбцов, так и добавлять новые элементы перечисления (дополняя таблицу данных).\n\n**Добавлять столбцы можно только если в родительском классе не была указана таблица данных.**\n\nПример наследования можно видеть в самом первом листинге.\n\n\n**********\nСвязывание\n**********\n\nЕсли для одного из столбцов указано ``related_name``, то во время создания перечисления, для каждого объекта из этого столбца будет вызван метод ``set_related_name(<имя атрибута>, <ссылка на соответствующий элемент перечисления>)``, который должен установить объекту атрибут с соответствующим значением.\n\nВ первую очередь, этот механизм предназначен для связи отношений друг с другом, но может использоваться и в других объектах.\n\nПример:\n\n.. code:: python\n\n   from rels import Column, Relation\n\n   class DESTINATION_ENUM(Relation):\n       name = Column(primary=True)\n       val_1 = Column()\n\n       records = ( ('STATE_1', 'value_1'),\n                   ('STATE_2', 'value_2') )\n\n   class SOURCE_ENUM(Relation):\n       name = Column(primary=True)\n       val_1 = Column()\n       rel = Column(related_name='rel_source')\n\n       records = ( ('STATE_1', 'value_1', DESTINATION_ENUM.STATE_1),\n                   ('STATE_2', 'value_2', DESTINATION_ENUM.STATE_2) )\n\n\n   DESTINATION_ENUM.STATE_1.rel_source == SOURCE_ENUM.STATE_1 # True\n   DESTINATION_ENUM.STATE_2 == SOURCE_ENUM.STATE_2.rel        # True\n\n*********************************\nВзаимодействие со сторонним кодом\n*********************************\n\nДля взаимодействия с кодом, использующим другую реализацию перечислений, можно использовать значения из столбца с установленным в True параметром ``external``. Для восстановления объекта элемента перечисления, достаточно передать это значение в конструктор перечисления.\n\nПример использования можно найти в самом первом листинге (``SOME_CONSTANTS(1) == SOME_CONSTANTS.NAME_1``)\n\n## Использование библиотеки\n\nВсе необходимые объекты вынесены в корень модуля:\n\n.. code:: python\n\n   import rels\n\n   # Базовые классы\n   rels.Column # класс столбца\n   rels.Record # класс элемента перечисления (обычно использовать нет необходимости)\n   rels.Relation  # базовый клас перечисления\n\n   # Простые перечисления\n   rels.Enum         # простое перечисление со столбцами name и value\n   rels.EnumWithText # простое перечисление с дополнительным столбцом text\n\n   # Прочее\n   rels.NullObject   # объект заглушка для отсутствующих значений в external столбцах\n   rels.exceptions   # модуль с исключениями\n\nНазвание классов перечислений и имена элементов перечисления в primary столбцах желательно писать заглавными буквами так как у них семантика констант (также, это решает проблему пересечения имён стандартных методов с именами элементов перечисления ).\n\n******\nDjango\n******\n\nВ модуле ``rels.django`` реализован небольшой функционал для взаимодействия с Django.\n\n==========\nDjangoEnum\n==========\n\nПеречисление, унаследованное от EnumWithText, дополнительные методы:\n\n* choices — возвращает список ``[<элемент перечисления, текс>, …]``\n\n====================\nRelationIntegerField\n====================\n\nНаследник ``models.IntegerField``, автоматически конвертирует друг в друга целочисленные значения из базы и элементы перечисления.\n\nКонструктор принимает следующие параметры (кроме стандартных для ``IntegerField``):\n\n* relation — объект отношения\n* relation_column — имя столбца, который сохраняется в базу (по умолчанию, равен ``\"value\"``)\n\n=================\nDjango Migrations\n=================\n\nDjango нормально воспринимает ``RelationIntegerField``, но в случае указания параметра ``default``, понадобится править код миграции, так как django ничего о rels не знает.\n\n=====\nТесты\n=====\n\nВсе «фичи», за исключением связанных с Django, покрыты тестами.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tiendil/rels",
    "keywords": "enums",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Rels",
    "package_url": "https://pypi.org/project/Rels/",
    "platform": "",
    "project_url": "https://pypi.org/project/Rels/",
    "project_urls": {
      "Homepage": "https://github.com/Tiendil/rels"
    },
    "release_url": "https://pypi.org/project/Rels/0.3.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for describing data relations in python (Enums, \"relational\" tables)",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6246140,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "880d9d8e8c11042bfc8fa080a08deb3f64174c0b37fd61b7a641348e9d939254",
          "md5": "ce1f6ace7723831395bfa017a1f52e9a",
          "sha256": "e8e52f3e472faca5fc9587baafea55e76c5558e05217f573ad6ae69543d121f4"
        },
        "downloads": -1,
        "filename": "Rels-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ce1f6ace7723831395bfa017a1f52e9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13266,
        "upload_time": "2015-06-08T08:28:45",
        "upload_time_iso_8601": "2015-06-08T08:28:45.311053Z",
        "url": "https://files.pythonhosted.org/packages/88/0d/9d8e8c11042bfc8fa080a08deb3f64174c0b37fd61b7a641348e9d939254/Rels-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76a2a73bd649a963db8de037ecff16c01c6c99f0ba1f7804e63d6e649579ae3d",
          "md5": "92a8689348b01e4bfb2778abf6b055b2",
          "sha256": "4076639edbf1f2fc6631892e9486c5cc35b39feaf80beb3f656486309db4fa7d"
        },
        "downloads": -1,
        "filename": "Rels-0.2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92a8689348b01e4bfb2778abf6b055b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13266,
        "upload_time": "2015-06-08T08:33:57",
        "upload_time_iso_8601": "2015-06-08T08:33:57.379487Z",
        "url": "https://files.pythonhosted.org/packages/76/a2/a73bd649a963db8de037ecff16c01c6c99f0ba1f7804e63d6e649579ae3d/Rels-0.2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "898769f1d1734e7a0012e34460b8386b42b632a6dd3717ff0c31785e031dc9fb",
          "md5": "ec45ab1c7410aedab29ccb67e6d2959a",
          "sha256": "8841b02e2d2efd684417299e71109310a60007b8ede6516eeaf4fb2c32b45cc4"
        },
        "downloads": -1,
        "filename": "Rels-0.2.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec45ab1c7410aedab29ccb67e6d2959a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13250,
        "upload_time": "2015-06-08T08:34:54",
        "upload_time_iso_8601": "2015-06-08T08:34:54.716371Z",
        "url": "https://files.pythonhosted.org/packages/89/87/69f1d1734e7a0012e34460b8386b42b632a6dd3717ff0c31785e031dc9fb/Rels-0.2.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcad377a36f4121cb5214c145bce4193146c86e6dee90f556edcd413d9da62ca",
          "md5": "8a1d5fb3280c01d5a2d550093d310c3c",
          "sha256": "e03a006fe9c192abb1dc9beeffe8149569b2e502420a23ddf9bceb952ecb1505"
        },
        "downloads": -1,
        "filename": "Rels-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a1d5fb3280c01d5a2d550093d310c3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17288,
        "upload_time": "2016-12-04T14:04:28",
        "upload_time_iso_8601": "2016-12-04T14:04:28.149434Z",
        "url": "https://files.pythonhosted.org/packages/fc/ad/377a36f4121cb5214c145bce4193146c86e6dee90f556edcd413d9da62ca/Rels-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "413dc5ca201cd3e7c93a5f8888a5a825303ce38737a1b79d562068bce298a519",
          "md5": "f93d0c7dab29d5ab25cfc7b2404497e5",
          "sha256": "4d0153249d5e79f443a3450e5ea3e281b67b2ff1b6a045f04f4ef74c7e3e03cb"
        },
        "downloads": -1,
        "filename": "Rels-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f93d0c7dab29d5ab25cfc7b2404497e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13311,
        "upload_time": "2019-12-05T08:32:51",
        "upload_time_iso_8601": "2019-12-05T08:32:51.709470Z",
        "url": "https://files.pythonhosted.org/packages/41/3d/c5ca201cd3e7c93a5f8888a5a825303ce38737a1b79d562068bce298a519/Rels-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "413dc5ca201cd3e7c93a5f8888a5a825303ce38737a1b79d562068bce298a519",
        "md5": "f93d0c7dab29d5ab25cfc7b2404497e5",
        "sha256": "4d0153249d5e79f443a3450e5ea3e281b67b2ff1b6a045f04f4ef74c7e3e03cb"
      },
      "downloads": -1,
      "filename": "Rels-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f93d0c7dab29d5ab25cfc7b2404497e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13311,
      "upload_time": "2019-12-05T08:32:51",
      "upload_time_iso_8601": "2019-12-05T08:32:51.709470Z",
      "url": "https://files.pythonhosted.org/packages/41/3d/c5ca201cd3e7c93a5f8888a5a825303ce38737a1b79d562068bce298a519/Rels-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}