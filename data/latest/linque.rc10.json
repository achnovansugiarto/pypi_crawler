{
  "info": {
    "author": "Martin Strohalm",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Utilities"
    ],
    "description": "# LinQue - Linear Query\n\nThe *LinQue* library can be seen as a Python equivalent of popular .NET LINQ (Language Integrated Query). It allows\nchaining multiple queries on a sequence of items without evaluating the sequence until necessary.\n\n```python\nfrom linque import Linque\n\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\n\nresult = Linque(words) \\\n    .select(lambda d: d.upper()) \\\n    .distinct() \\\n    .sort() \\\n    .group(lambda d: len(d)) \\\n    .sort(lambda d: d[0]) \\\n    .flatten(lambda d: d[1]) \\\n    .to_list() \\\n\nprint(result)\n\n# ['DOG', 'FOX', 'THE', 'LAZY', 'OVER', 'BROWN', 'JUMPS', 'QUICK']\n```\n\nSimilar to .NET, *LinQue* is using iterators whenever possible and does not evaluate the source sequence until\nnecessary. Depending on whether the source sequence itself is fully evaluated (i.e. list or tuple) or not\n(i.e. iterator), a Linque instance can be safely reused or used just in a single chained query. By default, type of\nthe source sequence is not changed and the instance behaves accordingly. This behavior can be changed by initializing\nit with the 'evaluate' flag set to True, to keep results of each step as internal list. This is automatically applied\nto all derived instances as well. To evaluate just current state, the 'evaluate' method should be called.\n\n```python\nfrom linque import Linque\n\n# using iterator as source\nlinq = Linque(d for d in range(10))\ns = linq.sum()  # this call evaluates the sequence\nprint(linq.to_list())  # there are no 'next' items available anymore\n\n# []\n\n# using fully evaluated source\nlinq = Linque(list(range(10)))\ns = linq.sum()\nprint(linq.to_list())\n\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# force source evaluation\nlinq = Linque((d for d in range(10)), evaluate=True)\ns = linq.sum()\nprint(linq.to_list())\n\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# evaluate current instance\nlinq = Linque(d for d in range(10))\nlinq.evaluate()\ns = linq.sum()\nprint(linq.to_list())\n\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n## Installation\n\nThe *LinQue* library is fully implemented in Python. No additional compiler is necessary. After downloading the source\ncode just run the following command from the *linque* folder:\n\n```$ python setup.py install```\n\nor simply by using pip\n\n```$ pip install linque```\n\n\n## Available Operations\n\n### Quantifier Operations\n\n- [all](#allcondition): Determines whether all items satisfy given condition.\n- [any](#anycondition): Determines whether a sequence contains any item or whether any item satisfies given condition.\n- [contains](#containsvalue-key): Determines whether a sequence contains item with given value by using default comparer or specified item's key.\n\n### Search Operations\n\n- [argmax](#argmaxkey): Returns index of the maximum item in a sequence by using default comparer or specified item's key.\n- [argmin](#argminkey): Returns index of the minimum item in a sequence by using default comparer or specified item's key.\n- [first](#firstcondition-default): Returns the first item that satisfies specified condition or specified default value if provided.\n- [last](#lastcondition-default): Returns the last item that satisfies specified condition or specified default value if provided.\n- [max](#maxkey): Returns item having maximum value in a sequence by using default comparer or specified item's key.\n- [min](#minkey): Returns item having minimum value in a sequence by using default comparer or specified item's key.\n- [single](#singlecondition-default): Returns the single item that satisfies specified condition, specified default value or raises error.\n- [where](#wherecondition): Produces new sequence by selecting items by specified predicate.\n\n### Sorting Operations\n\n- [argsort](#argsortkey-reverse): Returns items indices that would sort current sequence by using default comparer or selected item's key.\n- [reverse](#reverse): Produces new sequence by inverting order of items.\n- [rank](#rankkey-method-reverse): Provides 1-based rank for each item of current sequence by using default comparer or selected item's key.\n- [sort](#sortkey-reverse): Produces new sequence by sorting elements by using default comparer or selected item's key.\n\n### Projection Operations\n\n- [flatten](#flattenselector): Produces new sequence by selecting and flattening items data using specified selector.\n- [select](#selectselector): Produces new sequence by selecting items data by specified selector.\n- [select_many](#select_manyselector): Produces new sequence by selecting and flattening items data using specified selector.\n- [zip](#zipsequences): Produces new sequence by merging given sequences as long as there are items in all sequences.\n\n### Random Operations\n- [choice](#choiceweights): Returns random item from current sequence.\n- [choices](#choicescount-weights): Produces new sequence by randomly choosing number of items from current sequence.\n- [sample](#samplecount): Produces new sequence by randomly sample number of items from current sequence.\n- [shuffle](#shuffle): Produces new sequence by randomly shuffling items from current sequence.\n\n### Grouping Operations\n\n- [group](#groupkey): Produces new sequence by grouping items according to default comparer or specified key selector.\n\n### Partitioning Operations\n\n- [chunk](#chunksize): Produces new sequence by splitting into chunks of specified size.\n- [skip](#skipcount): Produces new sequence by bypassing specified number of items and returns the remaining items.\n- [skip_while](#skip_whilecondition): Produces new sequence by bypassing contiguous items from the start until specified condition fails.\n- [take](#takecount): Produces new sequence by selecting specified number of contiguous items.\n- [take_while](#take_whilecondition): Produces new sequence by selecting items as long as specified condition is true.\n\n### Concatenation Operations\n\n- [concat](#concatitems): Produces new sequence by appending given items at the end of a sequence. \n\n### Set Operations\n\n- [distinct](#distinctkey): Produces new sequence by selecting distinct items by using default comparer or specified item's key.\n- [exclude](#excludeitems-key): Produces new sequence by excluding specified items by using default comparer or selected item's key.\n- [intersect](#intersectitems-key): Produces new sequence of shared unique items by using default comparer or selected item's key.\n- [union](#unionitems-key): Produces new sequence of unique items by using default comparer or selected item's key.\n\n### Converting Operations\n\n- [each](#eachaction): Applies specified function to every item in a sequence.\n- [enumerate](#enumerate): Produces new sequence by enumerating items into (index, item) pairs.\n- [evaluate](#evaluate): Evaluates all the iterators in a sequence and stores items as internal list.\n- [to_dict](#to_dictkey-value): Evaluates items into dictionary.\n- [to_list](#to_list): Evaluates items into list.\n- [to_set](#to_set): Evaluates items into set.\n- [to_tuple](#to_tuple): Evaluates items into tuple.\n\n### Aggregation Operations\n\n- [aggregate](#aggregateaccumulator-seed): Applies accumulator function over a sequence.\n- [count](#countcondition): Returns number of items in a sequence satisfying given condition.\n- [maximum](#maximumselector): Returns maximum value in a sequence by specified items data selector.\n- [mean](#meanselector): Returns average value of a sequence by specified items data selector.\n- [median](#medianselector): Returns median value of a sequence by specified items data selector.\n- [minimum](#minimumselector): Returns minimum value in a sequence by specified items data selector.\n- [sum](#sumselector): Returns summed value in a sequence by specified items data selector.\n\n\n## Examples\n\n### .aggregate(accumulator, seed)\nApplies accumulator function over current sequence. This functionality is also available as\na *linque.aggregate(sequence, func, seed)* utility function.\n\n```python\ndata = (97, 103, 103, 114, 101, 103, 97, 116, 101)\nresult = Linque(data).aggregate(lambda r, d: r+chr(d), \"\")\nprint(result)\n\n# 'aggregate'\n```\n\n### .all(condition)\nDetermines whether all items of current sequence satisfy given condition.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).all(lambda d: d > -5)\nprint(result)\n\n# True\n```\n\n### .any(condition)\nDetermines whether current sequence contains any item or whether any item of current sequence satisfies given condition.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).any(lambda d: d > 5)\nprint(result)\n\n# True\n```\n\n### .argmax(key)\nReturns index of the maximum item in a sequence by using default comparer or specified item's key. This functionality\nis also available as a *linque.argmax(sequence, key)* utility function.\n\n```python\ndata = (3, 1, 2, 0, 9, 7, 8)\nresult = Linque(data).argmax()\nprint(result)\n\n# 4\n\ndata = ((0, 3), (1, 1), (2, 2), (3, 0), (4, 9), (5, 7), (6, 8))\nresult = Linque(data).argmax(lambda d: d[1])\nprint(result)\n\n# 4\n```\n\n### .argmin(key)\nReturns index of the minimum item in a sequence by using default comparer or specified item's key. This functionality\nis also available as a *linque.argmin(sequence, key)* utility function.\n\n```python\ndata = (3, 1, 2, 0, 9, 7, 8)\nresult = Linque(data).argmin()\nprint(result)\n\n# 3\n\ndata = ((0, 3), (1, 1), (2, 2), (3, 0), (4, 9), (5, 7), (6, 8))\nresult = Linque(data).argmin(lambda d: d[1])\nprint(result)\n\n# 3\n```\n\n### .argsort(key, reverse)\nReturns items indices that would sort current sequence by using default comparer or specified item's key.\nThis functionality is also available as a *linque.argsort(sequence, key, reverse)* utility function.\n\n```python\ndata = (3, 1, 2)\nresult = Linque(data).argsort().to_list()\nprint(result)\n\n# [1, 2, 0]\n\ndata = ((2, 3), (1, 1), (3, 2))\nresult = Linque(data).argsort(lambda d: d[1]).to_list()\nprint(result)\n\n# [1, 2, 0]\n```\n\n### .choice(weights)\nReturns random item from current sequence.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).choice()\nprint(result)\n\n# 7\n```\n\n### .choices(count, weights)\nProduces new sequence by randomly choosing items from current sequence. Each item can be selected multiple times.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).choices(20).to_list()\nprint(result)\n\n# [7, 0, 0, 0, 4, 7, 3, 1, 5, 0, 1, 6, 7, 1, 2, 6, 8, 0, 5, 8]\n```\n\n### .chunk(size)\nProduces new sequence by splitting current sequence into chunks of specified size. This functionality is also available\nas a *linque.chunk(sequence, size)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).chunk(3).select(lambda d: d.to_tuple()).to_list()\nprint(result)\n\n# [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]\n```\n\n### .concat(items)\nProduces new sequence by appending given items at the end of current sequence. This functionality is also available as\na *linque.concat(\\*sequences)* utility function.\n\n```python\ndata1 = (0, 1, 2, 3, 4)\ndata2 = (5, 6, 7, 8, 9)\nresult = Linque(data1).concat(data2).to_list()\nprint(result)\n\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### .contains(value, key)\nDetermines whether current sequence contains item with given value by using default comparer or specified item's key.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).contains((1, 10))\nprint(result)\n\n# True\n\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).contains(10, lambda d: d[1])\nprint(result)\n\n# True\n```\n\n### .count(condition)\nReturns number of items in current sequence satisfying given condition. This functionality is also available as\na *linque.count(sequence, condition)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).count(lambda d: d > 4)\nprint(result)\n\n# 5\n```\n\n### .distinct(key)\nProduces new sequence by selecting distinct items from current sequence using default comparer or specified item's key.\nFirst occurrence of each item is used. This functionality is also available as a *linque.distinct(sequence, items, key)*\nutility function.\n\n```python\ndata = ((0, 1), (0, 1), (0, 2), (1, 1), (1, 2))\nresult = Linque(data).distinct().to_list()\nprint(result)\n\n# [(0, 1), (0, 2), (1, 1), (1, 2)]\n\ndata = ((0, 1), (0, 1), (0, 2), (1, 1), (1, 2))\nresult = Linque(data).distinct(lambda d: d[1]).to_list()\nprint(result)\n\n# [(0, 1), (0, 2)]\n```\n\n### .each(action)\nApplies specified function to every item in current sequence. Any  return value of given function is ignored. Since\nthis call fully evaluates current sequence, depending on the source, the items may no longer be available. This may\nor may not be desired behavior. Consider calling '.evaluate()' before calling this method.\n\n```python\ndef action(d):\n    d[1] = str(d[0])\n\n\ndata = ([0, None], [1, None], [2, None], [3, None], [4, None])\nresult = Linque(data).each(action)\nprint(data)\n\n# [[0, '0'], [1, '1'], [2, '2'], [3, '3'], [4, '4']]\n```\n\n### .enumerate()\nProduces new sequence by enumerating items of current sequence into (index, item) pairs.\n\n```python\ndata = (5, 6, 7, 8, 9)\nresult = Linque(data).enumerate().to_list()\nprint(result)\n\n# [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]\n```\n\n### .evaluate()\nEvaluates all the iterators in current sequence and stores items as internal list. This method is essential if current\nLinque instance should be reused.\n\n```python\nlinq = Linque(d for d in range(10))\nlinq.sum()\nprint(linq.to_list())\n\n# []\n\nlinq = Linque(d for d in range(10))\nlinq.evaluate()\nlinq.sum()\nprint(linq.to_list())\n\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### .exclude(items, key)\nProduces new sequence by excluding specified items from current sequence using default comparer or selected item's key.\nThis functionality is also available as a *linque.exclude(sequence, items, key)* utility function.\n\n```python\ndata1 = ((0, 1), (0, 1), (0, 2), (1, 2), (0, 3), (0, 4))\ndata2 = ((0, 1), (1, 2), (1, 2), (1, 3))\n\nresult = Linque(data1).exclude(data2).to_list()\nprint(result)\n\n# [(0, 2), (0, 3), (0, 4)]\n\nresult = Linque(data1).exclude(data2, lambda d: d[1]).to_list()\nprint(result)\n\n# [(0, 4)]\n```\n\n### .first(condition, default)\nReturns the first item in current sequence that satisfies specified condition or specified default value if provided and\nno item found. This functionality is also available as a *linque.first(sequence, condition, default)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nresult = Linque(data).first(lambda d: d > 4)\nprint(result)\n\n# 5\n\nresult = Linque(data).first(lambda d: d > 10, -1)\nprint(result)\n\n# -1\n```\n\n### .flatten(selector)\nProduces new sequence by selecting and flattening items data using specified selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).flatten().to_list()\nprint(result)\n\n# [0, 0, 1, 10, 2, 20, 3, 30, 4, 40]\n```\n\n### .group(key)\nProduces new sequence by grouping items of current sequence according to specified key selector and creates result\nvalues as (key, group) pairs. This functionality is also available as a *linque.group(sequence, key)* utility function.\n\n```python\ndata = ((0, 1), (0, 1), (0, 2), (1, 1))\n\nresult = Linque(data).group().to_dict(lambda d: d[0], lambda d: d[1].to_list())\nprint(result)\n\n# {\n#     (0, 1): [(0, 1), (0, 1)], \n#     (0, 2): [(0, 2)],\n#     (1, 1): [(1, 1)]\n# }\n\nresult = Linque(data).group(lambda d: d[1]).to_dict(lambda d: d[0], lambda d: d[1].to_list())\nprint(result)\n\n# {\n#     1: [(0, 1), (0, 1), (1, 1)], \n#     2: [(0, 2)],\n# }\n```\n\n### .intersect(items, key)\nProduces new sequence of shared unique items from current sequence and given items by using default comparer or selected\nitem's key. This functionality is also available as a *linque.intersect(sequence, items, key)* utility function.\n\n```python\ndata1 = ((0, 1), (0, 1), (0, 2), (1, 2))\ndata2 = ((0, 1), (1, 2), (1, 2), (0, 3))\n\nresult = Linque(data1).intersect(data2).to_list()\nprint(result)\n\n# [(0, 1), (1, 2)]\n\nresult = Linque(data1).intersect(data2, lambda d: d[1]).to_list()\nprint(result)\n\n# [(0, 1), (0, 2)]\n```\n\n### .last(condition, default)\nReturns the last item in current sequence that satisfies specified condition or specified default value if provided and\nno item  found. This functionality is also available as a *linque.last(sequence, condition, default)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 4, 5, 6, 0)\n\nresult = Linque(data).last(lambda d: d > 4)\nprint(result)\n\n# 6\n\nresult = Linque(data).last(lambda d: d > 10, -1)\nprint(result)\n\n# -1\n```\n\n### .maximum(selector)\nReturns maximum value in current sequence by specified items data selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).maximum(lambda d: d[1])\nprint(result)\n\n# 40\n```\n\n### .max(key)\nReturns item having maximum value in current sequence by using specified item's key.\n\n```python\ndata = ((0, 0), (1, 100), (20, 20), (3, 30), (4, 40))\n\nresult = Linque(data).max()\nprint(result)\n\n# (20, 20)\n\nresult = Linque(data).max(lambda d: d[1])\nprint(result)\n\n# (1, 100)\n```\n\n### .mean(selector)\nReturns average value of current sequence by specified items data selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).mean(lambda d: d[1])\nprint(result)\n\n# 20\n```\n\n### .median(selector)\nReturns median value of current sequence by specified items data selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).median(lambda d: d[1])\nprint(result)\n\n# 20\n```\n\n### .minimum(selector)\nReturns minimum value in current sequence by specified items data selector.\n\n```python\ndata = ((0, 0), (1, -10), (2, -20), (3, -30), (4, -40))\nresult = Linque(data).minimum(lambda d: d[1])\nprint(result)\n\n# -40\n```\n\n### .min(key)\nReturns item having minimum value in current sequence by using specified item's key.\n\n```python\ndata = ((0, 0), (1, -100), (-2, -20), (3, -30), (4, -40))\n\nresult = Linque(data).min()\nprint(result)\n\n# (-2, -20)\n\nresult = Linque(data).min(lambda d: d[1])\nprint(result)\n\n# (1, -100)\n```\n\n### .rank(key, method, reverse)\nProvides 1-based rank for each item of current sequence by using default comparer or selected item's key. The ties are\nresolved according to selected method. This functionality is also available as\na *linque.rank(sequence, key, method, reverse)* utility function.\n\n```python\ndata = (0, 2, 3, 2)\n\nresult = Linque(data).rank(method='average').to_list()\nprint(result)\n\n# [1, 2.5, 4, 2.5]\n\nresult = Linque(data).rank(method='min').to_list()\nprint(result)\n\n# [1, 2, 4, 2]\n\nresult = Linque(data).rank(method='max').to_list()\nprint(result)\n\n# [1, 3, 4, 3]\n\nresult = Linque(data).rank(method='dense').to_list()\nprint(result)\n\n# [1, 2, 3, 2]\n\nresult = Linque(data).rank(method='ordinal').to_list()\nprint(result)\n\n# [1, 2, 4, 3]\n\ndata = ((2, 0), (3, 2), (2, 3), (0, 2))\n\nresult = Linque(data).rank(lambda d: d[1], method='average').to_list()\nprint(result)\n\n# [1, 2.5, 4, 2.5]\n\nresult = Linque(data).rank(lambda d: d[1], method='min').to_list()\nprint(result)\n\n# [1, 2, 4, 2]\n\nresult = Linque(data).rank(lambda d: d[1], method='max').to_list()\nprint(result)\n\n# [1, 3, 4, 3]\n\nresult = Linque(data).rank(lambda d: d[1], method='dense').to_list()\nprint(result)\n\n# [1, 2, 3, 2]\n\nresult = Linque(data).rank(lambda d: d[1], method='ordinal').to_list()\nprint(result)\n\n# [1, 2, 4, 3]\n```\n\n### .reverse()\nProduces new sequence by inverting order of items in current sequence.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).reverse().to_list()\nprint(result)\n\n# [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n```\n\n### .sample(count)\nProduces new sequence by randomly sampling items from current sequence. Each item can be selected only once.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).sample(5).to_list()\nprint(result)\n\n# [6, 3, 5, 0, 7]\n```\n\n### .select(selector)\nProduces new sequence by selecting items data by specified selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).select(lambda d: d[1]).to_list()\nprint(result)\n\n# [0, 10, 20, 30, 40]\n```\n\n### .select_many(selector)\nProduces new sequence by selecting and flattening items data using specified selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).select_many(lambda d: d).to_list()\nprint(result)\n\n# [0, 0, 1, 10, 2, 20, 3, 30, 4, 40]\n```\n\n### .shuffle()\nProduces new sequence by randomly shuffling items from current sequence.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).shuffle().to_list()\nprint(result)\n\n# [6, 5, 3, 2, 4, 0, 1, 9, 8, 7]\n```\n\n### .single(condition, default)\nReturns the single item in current sequence that satisfies specified condition or specified default value if provided\nand no item found. Raises error if more items found. This functionality is also available as\na *linque.single(sequence, condition, default)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nresult = Linque(data).single(lambda d: 3<d<5)\nprint(result)\n\n# 4\n\nresult = Linque(data).single(lambda d: d>10, -1)\nprint(result)\n\n# -1\n```\n\n### .skip(count)\nProduces new sequence by bypassing specified number of items in current sequence and returns the remaining items. This\nfunctionality is also available as a *linque.skip(sequence, n)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).skip(4).to_list()\nprint(result)\n\n# [4, 5, 6, 7, 8, 9]\n```\n\n### .skip_while(condition)\nProduces new sequence by bypassing contiguous items from the start of current sequence until specified condition fails\nthe first time. This functionality is also available as a *linque.skip_while(sequence, condition)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 4, 3, 2, 2, 0)\nresult = Linque(data).skip_while(lambda d: d < 4).to_list()\nprint(result)\n\n# [4, 5, 4, 3, 2, 2, 0]\n```\n\n### .sort(key, reverse)\nSorts elements of current sequence by using default comparer or selected item's key. If the key provides multiple\ncolumns, the sorting direction can be specified for each individual column. This functionality is also available as\na *linque.multisort(sequence, key, reverse)* utility function.\n\n```python\ndata = (8, 0, 2, 3, 5, 1, 6, 7, 4, 9)\nresult = Linque(data).sort().to_list()\nprint(result)\n\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndata = ((1, 8), (2, 0), (3, 2), (4, 3), (5, 5), (6, 1), (7, 6), (8, 7), (9, 4), (0, 9))\nresult = Linque(data).sort(lambda d: d[1], reverse=True).to_list()\nprint(result)\n\n# [(0, 9), (1, 8), (8, 7), (7, 6), (5, 5), (9, 4), (4, 3), (3, 2), (6, 1), (2, 0)]\n\ndata = ((1, \"d\", 11), (0, \"a\", 10), (0, \"b\", 1000), (0, \"c\", 100), (0, \"b\", 100), (1, \"e\", 10), (2, \"f\", 20))\nresult = Linque(data).sort(lambda d: (d[0], d[1]), reverse=[False, True]).to_list()\nprint(result)\n\n# [(0, 'c', 100), (0, 'b', 1000), (0, 'b', 100), (0, 'a', 10), (1, 'e', 10), (1, 'd', 11), (2, 'f', 20)]\n```\n\n### .sum(selector)\nReturns summed value in current sequence by specified items data selector.\n\n```python\ndata = ((0, 0), (1, 10), (2, 20), (3, 30), (4, 40))\nresult = Linque(data).sum(lambda d: d[1])\nprint(result)\n\n# 100\n```\n\n### .take(count)\nProduces new sequence by selecting specified number of contiguous items from the start of current sequence. This\nfunctionality is also available as a *linque.take(sequence, n)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).take(4).to_list()\nprint(result)\n\n# [0, 1, 2, 3]\n```\n\n### .take_while(condition)\nProduces new sequence by selecting items from current sequence as long as specified condition is true. This\nfunctionality is also available as a *linque.take_while(sequence, condition)* utility function.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).take_while(lambda d: d < 4).to_list()\nprint(result)\n\n# [0, 1, 2, 3]\n```\n\n### .to_dict(key, value)\nEvaluates items into dictionary.\n\n```python\ndata = ((0, 1, 'a'), (0, 2, 'b'), (0, 3, 'c'))\nresult = Linque(data).to_dict(lambda d: d[1], lambda d: d[2])\nprint(result)\n\n# {1: 'a', 2: 'b', 3: 'c'}\n```\n\n### .to_list()\nEvaluate items into list.\n\n```python\ndata = (0, 1, 2, 3, 4, 0, 1)\nresult = Linque(data).to_list()\nprint(result)\n\n# [0, 1, 2, 3, 4, 0, 1]\n```\n\n### .to_set()\nEvaluate items into set.\n\n```python\ndata = (0, 1, 2, 3, 4, 0, 1)\nresult = Linque(data).to_set()\nprint(result)\n\n# {0, 1, 2, 3, 4}\n```\n\n### .to_tuple()\nEvaluate items into tuple.\n\n```python\ndata = [0, 1, 2, 3, 4, 0, 1]\nresult = Linque(data).to_tuple()\nprint(result)\n\n# (0, 1, 2, 3, 4, 0, 1)\n```\n\n### .union(items, key)\nProduces new sequence of unique items from current sequence and given items by using default comparer and selected\nitem's key. This functionality is also available as a *linque.union(sequence, items, key)* utility function.\n\n```python\ndata1 = ((0, 1), (0, 1), (0, 2))\ndata2 = ((1, 1), (1, 2), (1, 2), (0, 3))\n\nresult = Linque(data1).union(data2).to_list()\nprint(result)\n\n# [(0, 1), (0, 2), (1, 1), (1, 2), (0, 3)]\n\nresult = Linque(data1).union(data2, lambda d: d[1]).to_list()\nprint(result)\n\n# [(0, 1), (0, 2), (0, 3)]\n```\n\n### .where(condition)\nProduces new sequence by selecting items by specified predicate.\n\n```python\ndata = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nresult = Linque(data).where(lambda d: d % 2).to_list()\nprint(result)\n\n# [1, 3, 5, 7, 9]\n```\n\n### .zip(\\*sequences)\nProduces new sequence by merging given sequences with current sequence as long as there are items available in all\nsequences.\n\n```python\ndata1 = (0, 1, 2, 3, 4)\ndata2 = ('a', 'b', 'c')\nresult = Linque(data1).zip(data2).to_list()\nprint(result)\n\n# [(0, 'a'), (1, 'b'), (2, 'c')]\n```\n\n\n## Disclaimer\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xxao/linque",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "linque",
    "package_url": "https://pypi.org/project/linque/",
    "platform": null,
    "project_url": "https://pypi.org/project/linque/",
    "project_urls": {
      "Homepage": "https://github.com/xxao/linque"
    },
    "release_url": "https://pypi.org/project/linque/4.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Linear Query - Python replica of popular .NET LINQ utilities.",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16362246,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d667a2bcc906c8d48ffcd014121cd1d5fd6dab2d80e7cd79078f23f7f3d9ff56",
          "md5": "dea4de9fd775d67a3da22d88e7978974",
          "sha256": "a5272019e526d49113516f67be93d74fcd5410562fe7d2d54d338debfec3a247"
        },
        "downloads": -1,
        "filename": "linque-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dea4de9fd775d67a3da22d88e7978974",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14715,
        "upload_time": "2021-10-04T08:55:21",
        "upload_time_iso_8601": "2021-10-04T08:55:21.728671Z",
        "url": "https://files.pythonhosted.org/packages/d6/67/a2bcc906c8d48ffcd014121cd1d5fd6dab2d80e7cd79078f23f7f3d9ff56/linque-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a764188b4c57960c5a18614ba58707e33e2599edfc0bff9ab690db110c9df1f",
          "md5": "ce6d846295bca53420f4f4e8498ebdb6",
          "sha256": "ff627d40a45218e45d21a289234e9412049ede1788ecf4f862ff0b34ddd0a55d"
        },
        "downloads": -1,
        "filename": "linque-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce6d846295bca53420f4f4e8498ebdb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15551,
        "upload_time": "2021-10-04T08:55:24",
        "upload_time_iso_8601": "2021-10-04T08:55:24.206185Z",
        "url": "https://files.pythonhosted.org/packages/6a/76/4188b4c57960c5a18614ba58707e33e2599edfc0bff9ab690db110c9df1f/linque-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2de78ccef76747d09db525e3e4ea48c95686ed31ef99eb347baad7cd87aa4270",
          "md5": "2f504f5071430232381e8e2ce3f50f5c",
          "sha256": "2946d7353604952133c1f38faca47632edc15a8d491e2299a2b3ee75ade2eab9"
        },
        "downloads": -1,
        "filename": "linque-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f504f5071430232381e8e2ce3f50f5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16386,
        "upload_time": "2021-10-14T11:34:57",
        "upload_time_iso_8601": "2021-10-14T11:34:57.496802Z",
        "url": "https://files.pythonhosted.org/packages/2d/e7/8ccef76747d09db525e3e4ea48c95686ed31ef99eb347baad7cd87aa4270/linque-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2db26cd2182703ecf14068b5c183300dbaaa2991e4032380e404c6aff749e94c",
          "md5": "707b9f756c86b32079973ffdfe97656f",
          "sha256": "e7b8e41a77834c0088fa47ac694a8bb51d4ac8ff9e7d31aceb4a6991d4ca1076"
        },
        "downloads": -1,
        "filename": "linque-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "707b9f756c86b32079973ffdfe97656f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17451,
        "upload_time": "2021-10-14T11:34:59",
        "upload_time_iso_8601": "2021-10-14T11:34:59.700949Z",
        "url": "https://files.pythonhosted.org/packages/2d/b2/6cd2182703ecf14068b5c183300dbaaa2991e4032380e404c6aff749e94c/linque-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af3def169548c3901c5c74b698be1a4ebd0e900cb08a8b5581233090194d91ba",
          "md5": "589e684aaa1bcc3f4ba9653ed5655bce",
          "sha256": "e7cc960ab82d206d9e041f25c711a12093120f0ed21f467e2b293495c6a22bfe"
        },
        "downloads": -1,
        "filename": "linque-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "589e684aaa1bcc3f4ba9653ed5655bce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17656,
        "upload_time": "2021-10-14T16:29:29",
        "upload_time_iso_8601": "2021-10-14T16:29:29.740884Z",
        "url": "https://files.pythonhosted.org/packages/af/3d/ef169548c3901c5c74b698be1a4ebd0e900cb08a8b5581233090194d91ba/linque-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d6678cced5a1479f6386dc8dc84bdd6fd8670b56b0343d22a3a1c08704160cd",
          "md5": "7ba6f418c8b55c3319164d16379e21c7",
          "sha256": "225c7d8940b343ead4f5d2fb3746fb5bbaa8d70c36ee556fa4d369e33633d04c"
        },
        "downloads": -1,
        "filename": "linque-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ba6f418c8b55c3319164d16379e21c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19944,
        "upload_time": "2021-10-14T16:29:31",
        "upload_time_iso_8601": "2021-10-14T16:29:31.549999Z",
        "url": "https://files.pythonhosted.org/packages/4d/66/78cced5a1479f6386dc8dc84bdd6fd8670b56b0343d22a3a1c08704160cd/linque-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b557e20e754421c0c5d6d79efefd7073f7dbf0a80aa3382cc98664043903fea",
          "md5": "c2edc21b26941889243d63642317ecec",
          "sha256": "91c3e3569b1a69b96366ae8758c9f748f8ba90f8c361f8d80a65fdea27051fe0"
        },
        "downloads": -1,
        "filename": "linque-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2edc21b26941889243d63642317ecec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19241,
        "upload_time": "2022-06-02T19:50:19",
        "upload_time_iso_8601": "2022-06-02T19:50:19.545097Z",
        "url": "https://files.pythonhosted.org/packages/5b/55/7e20e754421c0c5d6d79efefd7073f7dbf0a80aa3382cc98664043903fea/linque-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a594977b6f293439abd4adffcadb6001dca1499a1636d0970ae1063002f832f7",
          "md5": "a2e7da8348d755c26f9bb00b40d79210",
          "sha256": "92028df0f6de705e759c2f69e2785c04c5c3010a34f8ac3d7beb822eb92a04ed"
        },
        "downloads": -1,
        "filename": "linque-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a2e7da8348d755c26f9bb00b40d79210",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21621,
        "upload_time": "2022-06-02T19:50:21",
        "upload_time_iso_8601": "2022-06-02T19:50:21.277049Z",
        "url": "https://files.pythonhosted.org/packages/a5/94/977b6f293439abd4adffcadb6001dca1499a1636d0970ae1063002f832f7/linque-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4055b109f30b32c17add7ddcb170982bf03a4c578caac95605b77aa918664c0",
          "md5": "6c08c68162808b67932158d9837bfe46",
          "sha256": "3fcd738675e379bd12cb263366fd30760e66c0362a16cc02481cd806ecd044a2"
        },
        "downloads": -1,
        "filename": "linque-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c08c68162808b67932158d9837bfe46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19388,
        "upload_time": "2022-06-03T14:47:31",
        "upload_time_iso_8601": "2022-06-03T14:47:31.330298Z",
        "url": "https://files.pythonhosted.org/packages/c4/05/5b109f30b32c17add7ddcb170982bf03a4c578caac95605b77aa918664c0/linque-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83bfe911b1c528ae308e3db08c729578af1a0c9e1899fd29cc4a1c1f7d086706",
          "md5": "1fd268b9cbdeaa112f155d4ce2f78944",
          "sha256": "a28e7b72695ea730856f51b9400490c0513ea2de5e2779ef6f95d519bdf6cb23"
        },
        "downloads": -1,
        "filename": "linque-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1fd268b9cbdeaa112f155d4ce2f78944",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21810,
        "upload_time": "2022-06-03T14:47:33",
        "upload_time_iso_8601": "2022-06-03T14:47:33.312497Z",
        "url": "https://files.pythonhosted.org/packages/83/bf/e911b1c528ae308e3db08c729578af1a0c9e1899fd29cc4a1c1f7d086706/linque-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45656024657418e4a1387a94b679ed11a57073d989410ef6b8426eff31ba2804",
          "md5": "f3b4f153e46ff2890e49c2c5d9159d01",
          "sha256": "b52b79a32bb9d35c004ee7b7d2e8821ff06a4bfbc58f6235a0caba0462a295cc"
        },
        "downloads": -1,
        "filename": "linque-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3b4f153e46ff2890e49c2c5d9159d01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18709,
        "upload_time": "2022-06-03T20:27:32",
        "upload_time_iso_8601": "2022-06-03T20:27:32.425754Z",
        "url": "https://files.pythonhosted.org/packages/45/65/6024657418e4a1387a94b679ed11a57073d989410ef6b8426eff31ba2804/linque-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23feea12e099433bcf73b7cc2726ea9f5d5df2543df65092a2c2dfe8b05f61d6",
          "md5": "135851aa8a66604e30c0f822d41ab0d8",
          "sha256": "e544443e1b47da902eee7836bd655890513df7b5b64d8cee84836f556774857c"
        },
        "downloads": -1,
        "filename": "linque-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "135851aa8a66604e30c0f822d41ab0d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20565,
        "upload_time": "2022-06-03T20:27:34",
        "upload_time_iso_8601": "2022-06-03T20:27:34.544094Z",
        "url": "https://files.pythonhosted.org/packages/23/fe/ea12e099433bcf73b7cc2726ea9f5d5df2543df65092a2c2dfe8b05f61d6/linque-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e37454ac6236eb38e97368f7d8a5aa1e0f85058fc4051118b462cb091e971641",
          "md5": "87113876fe03b87e729d833162ddef7f",
          "sha256": "56222b8c226e140522aed23ab75ae8bdc8883315d0a94aeefa13f8ffaf63ccd9"
        },
        "downloads": -1,
        "filename": "linque-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87113876fe03b87e729d833162ddef7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19897,
        "upload_time": "2023-01-03T16:54:58",
        "upload_time_iso_8601": "2023-01-03T16:54:58.749599Z",
        "url": "https://files.pythonhosted.org/packages/e3/74/54ac6236eb38e97368f7d8a5aa1e0f85058fc4051118b462cb091e971641/linque-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a81ee5a23bdb1091f3449eaee333877abdb50553b0242807f9a099029a1dee5",
          "md5": "39dc6cc49275b9c4e385c187a1b21e55",
          "sha256": "6449f1c68be1420346a8775c08e6f7b08025609289adcccb9245cdc255d1b3b6"
        },
        "downloads": -1,
        "filename": "linque-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39dc6cc49275b9c4e385c187a1b21e55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21763,
        "upload_time": "2023-01-03T16:55:00",
        "upload_time_iso_8601": "2023-01-03T16:55:00.271547Z",
        "url": "https://files.pythonhosted.org/packages/7a/81/ee5a23bdb1091f3449eaee333877abdb50553b0242807f9a099029a1dee5/linque-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee70d6dfdb32ae884e7ecd8b6b6350daaa3b6f7516e342e424512f9378de1081",
          "md5": "8348220d0889303fbcc8bdaae7a3a99c",
          "sha256": "e4f818d5587d55d290b162a7a6b0df4c73537d6dc73a0b88984e9d904d7c47df"
        },
        "downloads": -1,
        "filename": "linque-3.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8348220d0889303fbcc8bdaae7a3a99c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20736,
        "upload_time": "2023-01-05T12:58:18",
        "upload_time_iso_8601": "2023-01-05T12:58:18.993414Z",
        "url": "https://files.pythonhosted.org/packages/ee/70/d6dfdb32ae884e7ecd8b6b6350daaa3b6f7516e342e424512f9378de1081/linque-3.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56e868f4f9b44a0399aa11669282c9e53531ab87d5eb65e60577368088048450",
          "md5": "b54420980dc9ed332f53de5c22924e17",
          "sha256": "acd55f7a67e824bf79c00c19b3557f9d0ec1d46620c5a5aeb56e3c35099f6c67"
        },
        "downloads": -1,
        "filename": "linque-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b54420980dc9ed332f53de5c22924e17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22916,
        "upload_time": "2023-01-05T12:58:20",
        "upload_time_iso_8601": "2023-01-05T12:58:20.726052Z",
        "url": "https://files.pythonhosted.org/packages/56/e8/68f4f9b44a0399aa11669282c9e53531ab87d5eb65e60577368088048450/linque-3.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f36ae7d9e7fd92d42496f4d2f8b1be066d46ca51df33fd17169b3d297af7df0b",
          "md5": "e76e36e382d98f3ded3a105afff2bef4",
          "sha256": "e0d8e90460f314f23fa3e099a8afb8719dc80e63f58ec783f33087d9ceb67f50"
        },
        "downloads": -1,
        "filename": "linque-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e76e36e382d98f3ded3a105afff2bef4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20534,
        "upload_time": "2023-01-05T17:29:19",
        "upload_time_iso_8601": "2023-01-05T17:29:19.157065Z",
        "url": "https://files.pythonhosted.org/packages/f3/6a/e7d9e7fd92d42496f4d2f8b1be066d46ca51df33fd17169b3d297af7df0b/linque-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08695ab770becf6bd3fc8177598144cf08830a5ca61bf9fa3d6712303ce5d003",
          "md5": "f42b91a90dd34869e7e67ecd507625af",
          "sha256": "e4ebbfd04617a0a04d76d37b4a8b469ffbfe2e1a634690cf3669417ef76c3b4b"
        },
        "downloads": -1,
        "filename": "linque-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f42b91a90dd34869e7e67ecd507625af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22635,
        "upload_time": "2023-01-05T17:29:20",
        "upload_time_iso_8601": "2023-01-05T17:29:20.807529Z",
        "url": "https://files.pythonhosted.org/packages/08/69/5ab770becf6bd3fc8177598144cf08830a5ca61bf9fa3d6712303ce5d003/linque-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a0078ad8b7e5c7a242bc4c7d1fd775e58cdba0e388e76965e05cc82ae164ec2",
          "md5": "6001ae6ed4900413579e87412bee492f",
          "sha256": "4732b4492d8c4586366888dceb3d307b46333f51489c4d4f9752e767d3dadcb6"
        },
        "downloads": -1,
        "filename": "linque-4.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6001ae6ed4900413579e87412bee492f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20487,
        "upload_time": "2023-01-09T16:13:54",
        "upload_time_iso_8601": "2023-01-09T16:13:54.463339Z",
        "url": "https://files.pythonhosted.org/packages/7a/00/78ad8b7e5c7a242bc4c7d1fd775e58cdba0e388e76965e05cc82ae164ec2/linque-4.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3025e00f7ac15d700f3dc1b2ec5479c38756457a6bd26e83c7145c10dbd65429",
          "md5": "80c109e51c5210973ff2de555541b688",
          "sha256": "96e07b526ac090724810f848c8c43791fd6dc743e48400c6be311b350fd12ba7"
        },
        "downloads": -1,
        "filename": "linque-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80c109e51c5210973ff2de555541b688",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22594,
        "upload_time": "2023-01-09T16:13:57",
        "upload_time_iso_8601": "2023-01-09T16:13:57.750095Z",
        "url": "https://files.pythonhosted.org/packages/30/25/e00f7ac15d700f3dc1b2ec5479c38756457a6bd26e83c7145c10dbd65429/linque-4.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a0078ad8b7e5c7a242bc4c7d1fd775e58cdba0e388e76965e05cc82ae164ec2",
        "md5": "6001ae6ed4900413579e87412bee492f",
        "sha256": "4732b4492d8c4586366888dceb3d307b46333f51489c4d4f9752e767d3dadcb6"
      },
      "downloads": -1,
      "filename": "linque-4.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6001ae6ed4900413579e87412bee492f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20487,
      "upload_time": "2023-01-09T16:13:54",
      "upload_time_iso_8601": "2023-01-09T16:13:54.463339Z",
      "url": "https://files.pythonhosted.org/packages/7a/00/78ad8b7e5c7a242bc4c7d1fd775e58cdba0e388e76965e05cc82ae164ec2/linque-4.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3025e00f7ac15d700f3dc1b2ec5479c38756457a6bd26e83c7145c10dbd65429",
        "md5": "80c109e51c5210973ff2de555541b688",
        "sha256": "96e07b526ac090724810f848c8c43791fd6dc743e48400c6be311b350fd12ba7"
      },
      "downloads": -1,
      "filename": "linque-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "80c109e51c5210973ff2de555541b688",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22594,
      "upload_time": "2023-01-09T16:13:57",
      "upload_time_iso_8601": "2023-01-09T16:13:57.750095Z",
      "url": "https://files.pythonhosted.org/packages/30/25/e00f7ac15d700f3dc1b2ec5479c38756457a6bd26e83c7145c10dbd65429/linque-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}