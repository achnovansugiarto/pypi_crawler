{
  "info": {
    "author": "Flywheel",
    "author_email": "support@flywheel.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# ANTs Atlas Registration\n\nThis performs the registration of predefined atlases to a target\nimage (fixed image) using the antsRegistration algorithm from the ANTs\npackage. The base template from the atlas dataset will be registered\nto the fixed image provided by the user and the computed warping will\nbe applied to transform all atlas derivative images (e.g. masks, priors)\ninto the fixed image space.\n\n![Workflow](./docs/images/ants-atlas-registration.png)\n\n## Usage\n\n### Inputs\n\n* __fixed_image__: NIfTI file to be used as the fixed image in `antsRegistration`.\n* __fixed_image_mask__: Optional NIfTI mask for the `fixed_image`\n\n### Configuration\n\n#### Gear config\n\n* __debug__ (boolean, default False): Include debug statements in output.\n* __atlas__: (string, default mindboggle): Atlas to register to `fixed_image`.\n  Currently only supporting `mindboggle`\n\n#### ANTs config\n\n##### Single valued options\n\n* __dimension__: (int, default 3): Image dimension, 2 or 3.\n* __interpolation__: (string, default Linear) One of Linear, NearestNeighbor,\n  CosineWindowedSinc, WelchWindowedSinc. HammingWindowedSinc, LanczosWindowedSinc,\n  BSpline, MultiLabel, Gaussian\n* __interpolation_parameters__: (JSON string) Optional parameters for interpolation\n  method. Ex. if Interpolation is Gaussian, you may set sigma and alpha with `\"[.1,1]\"`\n  which can be parsed by a JSON parser.\n* __collapse_output_transforms__: (boolean, default True) Collapse output transforms.\n  Specifically, enabling this option combines all adjacent linear transforms and\n  composes all adjacent displacement field transforms before writing the results to\n  disk.\n* __initialize_transforms_per_stage__: (boolean, default False) Initialize linear\n  transforms from the previous stage. By enabling this option, the current linear stage\n  transform is directly intialized from the previous stages linear transform; this\n  allows multiple linear stages to be run where each stage directly updates the\n  estimated linear transform from the previous stage. (e.g. Translation -> Rigid ->\n  Affine)\n* __float__: (boolean, default False) Use float instead of double for computations.\n* __output_transform_prefix__: (string, default `\"transform\"`) Output transform prefix, only\n  if output_warped_image is True\n* __output_warped_image__: (boolean, default True) Output warped moving image to the\n  fixed space and\n* __output_inverse_warped_image__: (boolean, default True) Output warped fixed image to\n  the fixed space and\n* __winsorize_upper_quantile__: (number, default 0.995) Winsorize data based on\n  specified upper quantile\n* __winsorize_lower_quantile__: (number, default 0.005) Winsorize data based on\n  specified lower quantile\n* __num_threads__: (integer, default 1) Number of ITK threads to use.\n* __args__: (string, default None) Additional arguments\n\n##### Stage specific options\n\nEach of the stage specific options must be a JSON string that parses into a list of the\nsame length as the number of `transforms`.  Each entry in this list is the value for a\nsingle stage.\n\n* __metric__: (string, default [\"MI\",\"MI\",\"CC\"]) List of items which are\n  CC or MeanSquares or Demons or GC or MI or Mattes.  The metric(s) to use for each\n  stage. Enclose a list of the previous values in square brackets, to use multiple\n  metrics for a single stage i.e. `[\"MI\",\"CC\",[\"MI,\"CC\"]]`\n* __metric_weight__: (string, default [1,1,1])  The metric weight(s) for\n  each stage (float, weights must sum to 1 per stage).  Shape must match the config\n  value `metric`\n* __radius_or_number_of_bins__: (string, default [32,32,32])  The number of\n  bins in each stage for the MI and Mattes metric, the radius for other metrics\n  (integer). Shape must match the config value `metric`\n* __sampling_strategy__: (string, default [\"Regular\",\"Regular\",\"Regular\"])\n  The metric sample strategy for each stage (one of '', 'Regular', or 'Random').  Shape\n  must match the config value `metric`\n* __sampling_percentage__: (string, default [0.25,0.25,0.25])  The metric\n  sampling percentage(s) to use for each stage (float, 0 <= val <= 1). Shape must match\n  the config value `metric`\n* __use_estimate_learning_rate_once__: (string, default [false,false,false]) (JSON\n  string) Estimate the learning rate step size only at the beginning of each level\n  (boolean).  Must match number of stages.\n* __use_histogram_matching__: (string, default [false,false,false])\n  Histogram match the images before registration (boolean).  Must match number of\n  stages.\n* __interpolation__: (string, default Linear)  One of Linear,\n  NearestNeighbor, CosineWindowedSinc, WelchWindowedSinc. HammingWindowedSinc,\n  LanczosWindowedSinc, BSpline, MultiLabel, Gaussian\n* __interpolation_parameters__: (string, default None)  Parameters for\n  interpolation method. (json string)\n* __transforms__: (string, default [\"Rigid\",\"Affine\",\"SyN\"])  A list of\n  items which are one of Rigid, Affine, CompositeAffine, Similarity, Translation,\n  BSpline, GaussianDisplacementField, TimeVaryingVelocityField,\n  TimeVaryingBSplineVelocityField, SyN, BSplineSyN, Exponential, or BSplineExponential.\n  Must be the same size as number of Stages.\n* __transform_parameters__: (string, default [0.1,0.1,[0.1,3.0,0.0]])\n  Parameters for transform at each stage.  Must be same size as number of stages.\n* __restrict_deformation__: (string, default None) A list of lists, one for each stage.\n  At each stage items are 0.0 <= a floating point number <= 1.0. This option allows the\n  user to restrict the optimization of the displacement field, translation, rigid or\n  affine transform on a per-component basis. For example, if one wants to limit the\n  deformation or rotation of 3-D volume to the first two dimensions, this is possible by\n  specifying a weight vector of 1,1,0 for a deformation field or 1,1,0,1,1,0 for a rigid\n  transformation. Low-dimensional restriction only works if there are no preceding\n  transformations.\n* __number_of_iterations__: (string, default\n  [[1000,500,250,100],[1000,500,250,100],[100,100,70,50,20]])  List of\n  lists of integers for each stage, corresponds to MxNxO in the antsRegistration\n  documentation: Convergence is determined from the number of iterations per level and\n  is determined by  fitting a line to the normalized energy profile of the last N\n  iterations (where N is specified by the window size) and determining the slope which\n  is then compared with the convergence threshold.\n* __smoothing_sigmas__: (string, default [[4,3,2,1],[4,3,2,1],[5,3,2,1,0]]) (JSON\n  string) List of lists of floats for each stage.  Specify the sigma of gaussian\n  smoothing at each level.\n* __sigma_units__: (string, default [\"vox\",\"vox\",\"vox\"]) Corresponding units of the\n  smoothing sigmas, either mm or vox\n* __shrink_factors__: (string, default [[12,8,4,2],[12,8,4,2],[10,6,4,2,1]]) (JSON\n  string) List of list of integers for each stage. Specify  the  shrink  factor  for the\n  virtual domain (typically the fixed image) at each level.\n* __convergence_threshold__: (string, default [\"1e-6\",\"1e-6\",\"1e-6\"])  List\n  of string valued convergence thresholds, one for each stage.\n* __convergence_window_size__: (string, default [10,10,10])  List of\n  integer window sizes, one for each stage.\n\n## Contributing\n\nFor more information about how to get started contributing to this gear,\ncheckout [CONTRIBUTING.md](CONTRIBUTING.md).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/flywheel-io/flywheel-apps/templates/skeleton",
    "keywords": "Flywheel,Gears",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fw-gear-ants-atlas-registration",
    "package_url": "https://pypi.org/project/fw-gear-ants-atlas-registration/",
    "platform": "",
    "project_url": "https://pypi.org/project/fw-gear-ants-atlas-registration/",
    "project_urls": {
      "Homepage": "https://gitlab.com/flywheel-io/flywheel-apps/templates/skeleton",
      "Repository": "https://gitlab.com/flywheel-io/flywheel-apps/templates/skeleton"
    },
    "release_url": "https://pypi.org/project/fw-gear-ants-atlas-registration/0.1.1/",
    "requires_dist": [
      "flywheel-gear-toolkit (>=0.5,<0.6)",
      "nipype (>=1.7.0,<2.0.0)",
      "fw-utils (>=2.0.6,<3.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12342369,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "294b229745fd8567d8a6d979a7cf612a6d926909214f29ab821a538427c3a9de",
          "md5": "c7eb188a018cdaa60e8db259261030bc",
          "sha256": "d1252fa9593d1435d6b3e0e23e1ed32451d947009b7bb2af5af1124794e89ea0"
        },
        "downloads": -1,
        "filename": "fw_gear_ants_atlas_registration-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7eb188a018cdaa60e8db259261030bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 55391923,
        "upload_time": "2021-12-14T21:08:37",
        "upload_time_iso_8601": "2021-12-14T21:08:37.032978Z",
        "url": "https://files.pythonhosted.org/packages/29/4b/229745fd8567d8a6d979a7cf612a6d926909214f29ab821a538427c3a9de/fw_gear_ants_atlas_registration-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c6441a7ba585099e13147c4eedc98b7b3ca8856d9eba5a9d3f1707e97383cb2",
          "md5": "e26146ad6cb894e10a3bf70495eb3a24",
          "sha256": "b19ea7f547fe8e19fc176b28f2fad4dfadc53aa57a47d563a365b8a8302b4aa7"
        },
        "downloads": -1,
        "filename": "fw_gear_ants_atlas_registration-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e26146ad6cb894e10a3bf70495eb3a24",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 55391933,
        "upload_time": "2021-12-17T16:40:14",
        "upload_time_iso_8601": "2021-12-17T16:40:14.423184Z",
        "url": "https://files.pythonhosted.org/packages/9c/64/41a7ba585099e13147c4eedc98b7b3ca8856d9eba5a9d3f1707e97383cb2/fw_gear_ants_atlas_registration-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c6441a7ba585099e13147c4eedc98b7b3ca8856d9eba5a9d3f1707e97383cb2",
        "md5": "e26146ad6cb894e10a3bf70495eb3a24",
        "sha256": "b19ea7f547fe8e19fc176b28f2fad4dfadc53aa57a47d563a365b8a8302b4aa7"
      },
      "downloads": -1,
      "filename": "fw_gear_ants_atlas_registration-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e26146ad6cb894e10a3bf70495eb3a24",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 55391933,
      "upload_time": "2021-12-17T16:40:14",
      "upload_time_iso_8601": "2021-12-17T16:40:14.423184Z",
      "url": "https://files.pythonhosted.org/packages/9c/64/41a7ba585099e13147c4eedc98b7b3ca8856d9eba5a9d3f1707e97383cb2/fw_gear_ants_atlas_registration-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}