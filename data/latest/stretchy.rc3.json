{
  "info": {
    "author": "",
    "author_email": "Ferenc Vajda <ferenc.vajda@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Stretchy Python Module\n\nThe stretchy module contains  one- and multi-dimensional containers that\ncan  grow in  any  direction (including  the negative  one).  To grow  a\ncontainer, simply add a value to an  element that is not yet used and it\nwill be created.  Containers are non-sparse containers,  meaning that if\nyou  give an  element a  value without  skipping several  positions, the\nintermediate  values  will  also  take up  space.  The  `default`  value\nspecified  during  initialization will  be  placed  in these  cells  (by\ndefault `None`). If data  is read from a cell that is  not yet used, the\ndefault value will be returned there as well.\n\nE.g.\n\n```python\nimport stretchy\narray = stretchy.empty(default='.')\nfor i in range(2,8,2):\n  array[-i] = '#'\n  array[i] = '#'\nprint(f'{array:s}')\n```\n\nResults in\n```\n#.#.#...#.#.#\n```\n\nIt's also important  to note that array  storage starts at 0.  So if you\nonly put a value in cell 2, cells 0 and 1 will be created anyway. If you\nplace an  element in cell -2,  then 0 is  not created, just -1.  In this\nway,  `array[2] =  42` and  `array[-2] =  42` result  in the  followings\n(respectively):\n\n```\n| -2 |  -1  |   0  |   1  |  2 |\n|----|------|------|------|----|\n|    |      | None | None | 42 |\n| 42 | None |      |      |    |\n```\n\nThis property affects related features  (such as `offset`, `len`, etc.),\ntoo.\n\nAlso  important to  mention,  that one-  and multi-dimensional  stretchy\narrays' functionality (properties, methods)  are slightly different. For\nmore information, see below.\n\n## `stretchy` functions\n\n### `array`\n\n```python\ndef array(\n        content: Sequence|Iterable|None = None,\n        *,\n        default: Any = None,\n        offset: tuple[int, ...]|list[int]|int = 0,\n        dim: int|None = None\n        ) -> Array1D|ArrayND\n```\n\n- `content`:   Array-like   object   (E.g.   `list`,   `tuple`...).   In\n  one-dimensional   case  this   can  be   any  iterable   object  (e.g.\n  `itertools`-generated ones, or a generator), but  in multi-dimensional\n  cases it can be only Sequence of Sequences (e.g. list of lists).\n- `offset`:  lower  boundaries  of  the  array  in  all  dimensions.  In\n  one-dimensional case  it must  be an  `int`, and  in multi-dimensional\n  ones  it  is a  `tuple`  of  as much  values  as  much the  number  of\n  dimensions the arrays  has. The value of `offset` can  be `int` in the\n  multi-dimensional case, in  which case it is equivalent  to having the\n  same offset value in all dimensions.\n- `default`: Default value for non-specified cells. If this parameter is\n  not specified, the default value of `default` is `None`\n- `dim`:  Number of  imensions in  the array.  If not  specified and  no\n  `content`  is provided  the result  will be  an empty  one-dimensional\n  stretchy array.\n\nThis function  can be used to  create stretchy arrays. If  an array-like\nobject is  given as the input (`content`) to the function,  the stretchy\narray is filled with the contents of the object. In this case the number\nof  dimensions  is determined  automatically  by  the function,  but  in\nambiguous cases you can specify it manually (using `dim`).\n\nIn some cases, the determination of dimensions can be ambiguous. This is\nthe case when the input array  contains strings. By default, the strings\nare kept together  by the function (except if the  `content` itself is a\n`str`), but  if you  want the  string to be  interpreted as  a character\nsequence, specify the appropriate dimension number. So,\n\n```python\nstretchy.array(['abc','def','ghi'])\n```\n\nis handled as\n\n```python\n['abc', 'def', 'ghi']\n```\n\nbut\n\n```python\nstretchy.array(['abc','def','ghi'], dim=2)\n```\n\nis\n\n```python\n[['a', 'b', 'c'],\n ['d', 'e', 'f'],\n ['g', 'h', 'i']]\n```\n\nIf the input `content`  is a string, it will be  split up, because dim=0\nis pointless.\n\n```python\nstretchy.array('abcdef')\n```\n\nresults in a one-dimensional array of characters:\n\n```python\n['a', 'b', 'c', 'd', 'e', 'f']\n```\n\n`content`'s  embedded arrays  are  not reused,  so  repeating the  \"same\narrays\" does  not have any  side-effects. To define  a three-dimensional\narray with an initial set of 10x10x10 `'.'` values, you can use:\n\n```python\narray = stretchy.array([[['.']*10]*10]*10)\n```\n\nA more complex example:\n\n```python\nimport stretchy\n\ntic_tac_toe = stretchy.array(['___'] * 3, dim=2)\nsteps = ((1,0,'X'), (0,1,'O'), (0,0,'X'), (2,0,'O'), (1,1,'X'), \\\n                                                  (1,2,'O'), (2,2,'X'))\nfor i,(x,y,c) in enumerate(steps, 1):\n  print('Round', i)\n  tic_tac_toe[y,x] = c\n  print(f'{tic_tac_toe:b }')\n```\n\nThe output of the program is:\n\n```\nRound 1\n  _ X _\n  _ _ _\n  _ _ _\nRound 2\n...\nRound 7\n  X X O\n  O X _\n  _ O X\n```\n\n### `empty`\n\n```\ndef empty(dim: int = 1, default: Any = None) -> Array1D|ArrayND\n```\n\nAlthough  you can  also  use the  `array` function  to  create an  empty\nstretchy array, this is a lightweight option.\n\n- `dim`: Dimension  of the array.  If not  specified, the array  will be\n  one-dimensional.\n- `default`: Default value for non-specified cells. If this parameter is\n  not specifoed, the default value of `default` is `None`.\n\nExample:\n\n```python\nimport stretchy\n\narray = stretchy.empty(3, 0)\narray[1,2,0] = 42\narray[1,1,2] = 137\narray[0,2,2] = 69\nprint(f'{array:s, ai}')\n```\n\nresults in\n\n```\nIndex 0:\n  0,   0,   0\n  0,   0,   0\n  0,   0,  69\nIndex 1:\n  0,   0,   0\n  0,   0, 137\n 42,   0,   0\n```\n\n## Array object properties\n\nThe properties can be used to get important information about the array.\nThere are  also properties  that are  writable. For  one-dimensional and\nmulti-dimensional arrays, propertys work somewhat differently. These are\ndiscussed in the description of propertys.\n\n### `dim` (read only)\n\nType: `int`\n\nUse the `dim` property to get the dimension number of the array.\n\n### `boundaries` (read only)\n\nType:\n\n- One-dimensional arrays: `tuple[int, int]`\n- Multi-dimensional arrays: `tuple[tuple[int, int], ...]`\n\nThe `boundaries` property can be used  to get the lower and upper bounds\nof the array  in each dimension. While in the  multi-dimensional case it\nis a tuple of tuples that gives the boundaries in all dimensions, in the\none-dimensional case it is just a tuple of the two boundaries. Following\nthe pythonic way,  the lower limit is the smallest  index on which there\nis a cell, while the upper limit is the largest index plus 1.\n\nE.g.\n\n```python\nimport stretchy\n\narray = stretchy.array([[1,0,1],[],[1,0,1]], offset=(-1,-1))\nprint(f'{array.boundaries=}')\nprint(f'{array!r}')\n```\n\nResults in\n\n```\narray.boundaries=((-1, 2), (-1, 2))\nArrayND(dim=2, default=None, offset=(-1, -1), content=\n[[   1,    0,    1],\n [None, None, None],\n [   1,    0,    1]])\n```\n\n### `offset` (read only)\n\nType:\n\n- One-dimensional arrays: `int`\n- Multi-dimensional arrays: `tuple[int, ...]`\n\nThis property  is used  to get the  lower bounds of  the array. See also\n[boundaries](#boundaries-read-only).\n\n### `shape` (read only)\n\nType (only for multi-dimensional arrays): `tuple[int, ...]`\n\nThis property is used to get the size of the array in all directions. In\none-dimensional case, use `len(array)` instead.\n\n### `index_format` (read & write)\n\nIn case of `dim >= 3`, two-dimensional planes are separated by different\nnumber of empty lines, or by showing  the indices of the plane (See also\n[Formatting](#formatting)). By default this  latter looks as follows (5D\narray, `f'{array:s,i}'`):\n\n```\n...\n1,6,2\n8,3,6\nIndex 2,-5,3:\n5,7,2\n9,5,3\n...\n```\n\nThe index text can be changed by setting the `index_format`. The default\nvalue is `'Index {}:'` and the `{}` will be replaced by the index values\nseparated by commas.\n\n## Array operations\n\n### Length of array (`len`)\n\n```python\nlength: int = len(array)\n```\n\nThe function call gives the size  of the highest dimension of the array.\nThis is  the length of  the array in  the one-dimensional case,  and the\nnumber of sub-planes (alse the first element of the `shape` property) in\nthe case of multi-dimensional arrays.\n\n### Getting values or subplanes\n\nBy indexing a stretchy array, you can perform several tasks depending on\nthe type of index.\n\n```python\nvalue: Any = array[5,-7,-2]\nsubplane: stretchy.Array = array[3]\nitr: Iterator = array[-10:10:2]\n```\n\nTo get the  **value** of a cell,  use a `tuple` in which  the values are\nthe indices  of all dimensions. If  a non-existent cell is  indexed, the\ndefault value of the array is returned.\n\nYou can also  get a **subplane** of  the array (indexed by  an `int`) on\nwhich you can perform further read  or write operations. In this way, we\nalso affect the whole array. In  the case of a one-dimensional array, we\ndo not get a plane, but directly  the value of the addressed cell. It is\nimportant to note that  if you request a plane that  does not yet exist,\nthe plane is  automatically created (for the sake  of write operations),\nas  well as  all the  planes between  the current  boundary and  the new\nplane.\n\nIf you use `slice` as an  index, unlike the traditional python approach,\nyou don't get  a stretchy array, but an **iterator**  to iterate through\nthe selected subplanes, or in the one-dimensional case, the cell values.\nThe note  mentioned in the previous  point, that new planes  are created\nwhen indexing beyond the boundaries, is true also for this case.\n\nIn all of  the above cases, it  is true that negative  values and values\nbeyond the current boundaries are also valid index values.\n\n### Changing cell values\n\nTo write  the contents of  the cells, the cells  must be indexed  in the\nsame way as for rrading:\n\n```python\narray[5,-7,-2] = 42\n```\n\nFor one-dimensional arrays, slice indexing  can also be used, but unlike\nit usually is in python, in this case all selected elements of the array\nreceive the passed value:\n\n```python\nimport stretchy\n\narray = stretchy.array('_'*31)\narray[::3] = 'O'\nprint(f'{array:s}')\n```\n\nresults in\n\n```\nO__O__O__O__O__O__O__O__O__O__O\n```\n\nTo replace  the entire contents  of the array,  you can use  the array's\n`replace_content` method:\n\nOne-dimensional arrays:\n\n```python\nreplace_content(self, content: Iterable, offset: int = 0) -> None\n```\n\nMulti-dimensional arrays:\n\n```python\nreplace_content(self, array: Sequence,\n                      offset: tuple[int,...]|list[int]|int = 0) -> None\n```\n\n### Iterating over the array\n\nStretchy  arrays are  iterable.  This  means, that  you  can  use it  as\nfollows:\n\n```python\nimport stretchy\n\narray = stretchy.array([[0]*5]*5, offset=-2)\nfor index, subplane in enumerate(array, array.offset[0]):\n    subplane[0] = index\nprint(f'{array:a}')\n```\n\nAnd the output is:\n\n```\n 0  0 -2  0  0\n 0  0 -1  0  0\n 0  0  0  0  0\n 0  0  1  0  0\n 0  0  2  0  0\n```\n\n## Formatting\n\nStretchy arrays come with a set of formatting options:\n\n```python\ns1 = f'{array:s;}'\ns2 = '{:b|e|s|a}'.format(array)\n...\n```\n\nGrammar of formatting options can be described as:\n\n```\nFormat  ← Option*\nOption  ← Command Param?\nCommand ← [a-zA-Z]\nParam   ← (Char & !Command)+\nChar    ← any single unicode character\n```\n\nThis  means,  that  options  follow each  other  without  any  separator\ncharacters.  The  ascii  letters  indicate  which  option  to  set,  the\ncharacters after them  are their optional parameters.  Letters cannot be\nparameters.\n\n### Formatting options\n\n- `s`: cell  separator. The  character string  after this  option will\n  separate values in a row. Default: `' '`\n- `r`: row  ending. This value  separates rows (i.e. separator  in the\n  second or higher dimensions). Default: `''`\n- `b`: beginning of  block. Each dimension is represented  by a single\n  block. Default: `''`\n- `e`: ending of block. Default: `''`\n- `a`: arrange in  columns. `int` and `float` values are  aligned to the\n  right, others to the left. `a` turns on arrangement, no parameters are\n  allowed.\n- `i`:  show indices.  If this  option  is turned  on, the  higher-order\n  indices  (>2)  are  displayed   between  the  two-dimensional  blocks.\n  Otherwise,  it uses  line breaks  to indicate  which block  follows (1\n  empty line:  level 3, 2  empty lines:  level 4...). No  parameters are\n  allowed.\n- `l`: literal format.  If this option is turned on,  the repr format of\n  the  cell content  is  used.  Note, that  otherwise,  `None` value  is\n  represented by an empty string. No parameters are allowed.\n\nWith examples that build on each other:\n\n```python\nimport stretchy\n\narray = stretchy.empty(3)\narray[-1,0,-1] = '#'\narray[-1,0,1] = '@'\narray[-1,1,0] = '%'\narray[0,0,-1] = '$'\narray[0,1,1] = '&'\nprint(f'{array}')\n##  @\n# %\n#\n# $\n#   &\nprint(f'{array:s,}')\n##,,@\n#,%,\n#\n#$,,\n#,,&\nprint(f'{array:s,b|e|}')\n#|||#,,@|\n#  |,%,||\n#\n# ||$,,|\n#  |,,&|||\nprint(f'{array:s,r;b|e|}')\n#|||#,,@|;\n#  |,%,||;\n#\n# ||$,,|;\n#  |,,&|||\nprint(f'{array:s,r;b|e|a}')\n#|||#, ,@|;\n#  | ,%, ||;\n#\n# ||$, , |;\n#  | , ,&|||\nprint(f'{array:s,r;b|e|al}')\n#|||'#' ,None,'@' |;\n#  |None,'%' ,None||;\n#\n# ||'$' ,None,None|;\n#  |None,None,'&' |||\nprint(f'{array:s,r;b|e|ali}')\n#Index -1:\n#|||'#' ,None,'@' |;\n#  |None,'%' ,None||;\n#Index 0:\n# ||'$' ,None,None|;\n#  |None,None,'&' |||\n```\n\n### `str()`\n\nConverting  the   array  to  `str`   is  equivalent  to   the  following\nformatting options: `b[e]a`. This also  means, that while `str(array) ==\nf'{array:b[e]a}'`, `print(array)` differs from `print(f'{array}')`.\n\nSo, let us consider the following sniplet:\n\n```python\nimport stretchy\n\narray = stretchy.array([[['ab', 'cd'], ['ef', 'gh']], \\\n                                  [['ij', 'kl'], ['mn', 'op']]], dim=4)\nprint(array)\nprint(repr(array))\n```\n\nThe output of it is:\n\n```\n[[[[a b]\n   [c d]]\n\n  [[e f]\n   [g h]]]\n\n\n [[[i j]\n   [k l]]\n\n  [[m n]\n   [o p]]]]\n ```\n\n### `repr()`\n\nYou can  use this function  to print  more information about  the array.\nWhen representing  arrays, other data  in the array are  also displayed,\ne.g:\n\n```\nArrayND(dim=2, default='.', offset=(0, 0), content=[])\n```\n\nThe  `content` part  is  displayed  with the  format  equivalent to  the\nfollowing formatting options: `s, r,b[e]al`.\n\nSo the same code as above but with the following printout:\n\n```python\nprint(repr(array)) # or print(f'{array!r}')\n```\n\nresults in\n\n```\nArrayND(dim=4, default=None, offset=(0, 0, 0, 0), content=\n[[[['a', 'b'],\n   ['c', 'd']],\n\n  [['e', 'f'],\n   ['g', 'h']]],\n\n\n [[['i', 'j'],\n   ['k', 'l']],\n\n  [['m', 'n'],\n   ['o', 'p']]]])\n```\n\n## Complex examples\n\n### Langton's ant\n\n```python\nimport stretchy\n\narray = stretchy.empty(2, '.')\npos = (0, 0)\ndir = 2\nfor _ in range(11000):\n    if array[pos] == '#':\n        dir = (dir + 1) % 4\n    else:\n        dir = (dir - 1) % 4\n    array[pos] = '.' if array[pos] == '#' else '#'\n    if dir == 0:\n        pos = (pos[0], pos[1] + 1)\n    elif dir == 1:\n        pos = (pos[0] - 1, pos[1])\n    elif dir == 2:\n        pos = (pos[0], pos[1] - 1)\n    elif dir == 3:\n        pos = (pos[0] + 1, pos[1])\nprint(f'{array:s}')\n```\n\n## Future plans\n\nThere are some ideas for future development:\n\n- **arbitrary  croping**:  Cut  to specified  size,  increase/shrink  by\n  amount (`int`) or reshape to boundaries\n- **normalization**:  Cut off  the default values  at the  boundaries to\n  prevent unnecessary storage\n- **offset  shifting**: Offset  an existing  array without  changing the\n  contents. Also, offset to center.\n- **non-zero centric operation**: Do not require storage starting from 0\n  if all elements are in the positive or negative range.\n- **sub-sub-planes**:  with  partial indexing  you  can  get plane  from\n  any  levels. E.g.  in a  4-dimensional array,  `array[2,5]` returns  a\n  2-dimensional one\n- **comparison operators**\n- **ellipsis**: in case of large arrays, represent values with ellipsis (`str` or `repr`)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stretchy",
    "package_url": "https://pypi.org/project/stretchy/",
    "platform": null,
    "project_url": "https://pypi.org/project/stretchy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/fercsi/pylib-stretchy/issues",
      "Homepage": "https://github.com/fercsi/pylib-stretchy"
    },
    "release_url": "https://pypi.org/project/stretchy/1.0b3/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "One- and multi-dimensional containers that grow automatically in all directions",
    "version": "1.0b3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17442823,
  "releases": {
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "596fbf163c7020665a156892b6439d410e7c1340154f7e2d5679cbc58184a531",
          "md5": "403bf0fc84fe23a5f87ff0a6c03c5784",
          "sha256": "71044a003e287ac0a34acd80016b87c609d87a0bdb6f7b26cf68c73d9367b15c"
        },
        "downloads": -1,
        "filename": "stretchy-1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "403bf0fc84fe23a5f87ff0a6c03c5784",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 13266,
        "upload_time": "2023-03-23T20:47:18",
        "upload_time_iso_8601": "2023-03-23T20:47:18.851862Z",
        "url": "https://files.pythonhosted.org/packages/59/6f/bf163c7020665a156892b6439d410e7c1340154f7e2d5679cbc58184a531/stretchy-1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66cd6eb94a2e575e4b2c71102ad4f13e20bc0fa00971d7b449e7779b7a4ff088",
          "md5": "0e60be0c69e06631272371cb9037816a",
          "sha256": "4684678e1d62227084a366011f6673354ef004499994c6a38d55d596bb4ee44b"
        },
        "downloads": -1,
        "filename": "stretchy-1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e60be0c69e06631272371cb9037816a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 12968,
        "upload_time": "2023-03-23T20:47:20",
        "upload_time_iso_8601": "2023-03-23T20:47:20.872550Z",
        "url": "https://files.pythonhosted.org/packages/66/cd/6eb94a2e575e4b2c71102ad4f13e20bc0fa00971d7b449e7779b7a4ff088/stretchy-1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "968a8e03d4eeea3cbefe11b93de32b6b02ff2a8be21c166466f31d8cbcc25337",
          "md5": "3a766d6e7d3f8c99750ee199d2193b00",
          "sha256": "a1b40f9fcf40add5618b1297ecdbd90abe6de5ccedc1d79b86d96f4629974194"
        },
        "downloads": -1,
        "filename": "stretchy-1.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a766d6e7d3f8c99750ee199d2193b00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 13278,
        "upload_time": "2023-03-25T09:51:19",
        "upload_time_iso_8601": "2023-03-25T09:51:19.151328Z",
        "url": "https://files.pythonhosted.org/packages/96/8a/8e03d4eeea3cbefe11b93de32b6b02ff2a8be21c166466f31d8cbcc25337/stretchy-1.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a023ef26bff7bcbc97b2fc43572d73052e3172100b8f6e8726d94f15638e102",
          "md5": "69a5a24cedecf10775a2c26b881f343f",
          "sha256": "8a8f686c085c886b3f22419356204faff9b5bed303ef4eff14819616abfe4f7f"
        },
        "downloads": -1,
        "filename": "stretchy-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "69a5a24cedecf10775a2c26b881f343f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 14758,
        "upload_time": "2023-03-25T09:51:20",
        "upload_time_iso_8601": "2023-03-25T09:51:20.921745Z",
        "url": "https://files.pythonhosted.org/packages/9a/02/3ef26bff7bcbc97b2fc43572d73052e3172100b8f6e8726d94f15638e102/stretchy-1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b5422488c0af955e9c22b45729b2a1d33235e99bfdd28f82fa21deb6d6223fa",
          "md5": "575734615572df671d1fe24c07717e3d",
          "sha256": "25f2e3266dc16d3e689fed475c13aba205dbd8e4a1963ea741e258035c7d53b7"
        },
        "downloads": -1,
        "filename": "stretchy-1.0b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "575734615572df671d1fe24c07717e3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 15564,
        "upload_time": "2023-03-25T15:27:42",
        "upload_time_iso_8601": "2023-03-25T15:27:42.657544Z",
        "url": "https://files.pythonhosted.org/packages/7b/54/22488c0af955e9c22b45729b2a1d33235e99bfdd28f82fa21deb6d6223fa/stretchy-1.0b3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ea9365d4447651ac8d3d4f7f894784bc9c4a9da6addcaccfc9622ff9e7a8673",
          "md5": "96860c69d85b2ee7bd2e83f9ba5f8a51",
          "sha256": "def3c224b3c443dda4d0bd2d9b40de1b5f3e489bfe5dc10e18f211d9b43eb2c6"
        },
        "downloads": -1,
        "filename": "stretchy-1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "96860c69d85b2ee7bd2e83f9ba5f8a51",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 15287,
        "upload_time": "2023-03-25T15:27:45",
        "upload_time_iso_8601": "2023-03-25T15:27:45.138782Z",
        "url": "https://files.pythonhosted.org/packages/1e/a9/365d4447651ac8d3d4f7f894784bc9c4a9da6addcaccfc9622ff9e7a8673/stretchy-1.0b3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b5422488c0af955e9c22b45729b2a1d33235e99bfdd28f82fa21deb6d6223fa",
        "md5": "575734615572df671d1fe24c07717e3d",
        "sha256": "25f2e3266dc16d3e689fed475c13aba205dbd8e4a1963ea741e258035c7d53b7"
      },
      "downloads": -1,
      "filename": "stretchy-1.0b3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "575734615572df671d1fe24c07717e3d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 15564,
      "upload_time": "2023-03-25T15:27:42",
      "upload_time_iso_8601": "2023-03-25T15:27:42.657544Z",
      "url": "https://files.pythonhosted.org/packages/7b/54/22488c0af955e9c22b45729b2a1d33235e99bfdd28f82fa21deb6d6223fa/stretchy-1.0b3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ea9365d4447651ac8d3d4f7f894784bc9c4a9da6addcaccfc9622ff9e7a8673",
        "md5": "96860c69d85b2ee7bd2e83f9ba5f8a51",
        "sha256": "def3c224b3c443dda4d0bd2d9b40de1b5f3e489bfe5dc10e18f211d9b43eb2c6"
      },
      "downloads": -1,
      "filename": "stretchy-1.0b3.tar.gz",
      "has_sig": false,
      "md5_digest": "96860c69d85b2ee7bd2e83f9ba5f8a51",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 15287,
      "upload_time": "2023-03-25T15:27:45",
      "upload_time_iso_8601": "2023-03-25T15:27:45.138782Z",
      "url": "https://files.pythonhosted.org/packages/1e/a9/365d4447651ac8d3d4f7f894784bc9c4a9da6addcaccfc9622ff9e7a8673/stretchy-1.0b3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}